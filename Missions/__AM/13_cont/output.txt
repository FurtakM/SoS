// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak = 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus = 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot = 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched = 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources = [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles = [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 = 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 = 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 = 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 = 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 = 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// mission_prefix = 13f_ ;
 154: LD_ADDR_EXP 34
 158: PUSH
 159: LD_STRING 13f_
 161: ST_TO_ADDR
// debugMode = 0 ;
 162: LD_ADDR_EXP 40
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// achivCounter := 0 ;
 170: LD_ADDR_EXP 41
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// if Difficulty = 1 then
 178: LD_OWVAR 67
 182: PUSH
 183: LD_INT 1
 185: EQUAL
 186: IFFALSE 195
// RemoveEnvironmentArea ( oilBlockArea ) ;
 188: LD_INT 15
 190: PPUSH
 191: CALL_OW 355
// PrepareVehicles ;
 195: CALL 1314 0 0
// PrepareHeroes ;
 199: CALL 571 0 0
// PrepareAmericansRandom ;
 203: CALL 1218 0 0
// PrepareDifficulty ;
 207: CALL 6279 0 0
// end ;
 211: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 212: LD_EXP 40
 216: PUSH
 217: LD_INT 1
 219: EQUAL
 220: IFFALSE 526
 222: GO 224
 224: DISABLE
 225: LD_INT 0
 227: PPUSH
// begin enable ;
 228: ENABLE
// fogoff ( true ) ;
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 236: LD_ADDR_VAR 0 1
 240: PUSH
 241: LD_INT 22
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: LD_INT 21
 253: PUSH
 254: LD_INT 1
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: PPUSH
 265: CALL_OW 69
 269: PUSH
 270: FOR_IN
 271: IFFALSE 287
// SetLives ( i , 1000 ) ;
 273: LD_VAR 0 1
 277: PPUSH
 278: LD_INT 1000
 280: PPUSH
 281: CALL_OW 234
 285: GO 270
 287: POP
 288: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 22
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: LD_INT 2
 306: PUSH
 307: LD_INT 30
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 30
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 366
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: CALL_OW 274
 353: PPUSH
 354: LD_INT 1
 356: PPUSH
 357: LD_INT 9999
 359: PPUSH
 360: CALL_OW 277
 364: GO 341
 366: POP
 367: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 30
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 30
 398: PUSH
 399: LD_INT 1
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 2
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 30
 477: PUSH
 478: LD_INT 1
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PPUSH
 494: CALL_OW 69
 498: PUSH
 499: FOR_IN
 500: IFFALSE 524
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 502: LD_VAR 0 1
 506: PPUSH
 507: CALL_OW 274
 511: PPUSH
 512: LD_INT 3
 514: PPUSH
 515: LD_INT 9999
 517: PPUSH
 518: CALL_OW 277
 522: GO 499
 524: POP
 525: POP
// end ;
 526: PPOPN 1
 528: END
// every 0 0$1 trigger achivCounter >= 2 do
 529: LD_EXP 41
 533: PUSH
 534: LD_INT 2
 536: GREATEREQUAL
 537: IFFALSE 549
 539: GO 541
 541: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 542: LD_STRING ACH_REMOTE
 544: PPUSH
 545: CALL_OW 543
 549: END
// every 0 0$1 trigger destroyCounter >= 30 do
 550: LD_EXP 42
 554: PUSH
 555: LD_INT 30
 557: GREATEREQUAL
 558: IFFALSE 570
 560: GO 562
 562: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 563: LD_STRING ACH_DEFMASTER
 565: PPUSH
 566: CALL_OW 543
 570: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
// uc_side = 1 ;
 577: LD_ADDR_OWVAR 20
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 585: LD_ADDR_EXP 1
 589: PUSH
 590: LD_STRING JMM
 592: PPUSH
 593: LD_EXP 40
 597: NOT
 598: PPUSH
 599: LD_STRING 13c_
 601: PPUSH
 602: CALL 30287 0 3
 606: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 607: LD_ADDR_EXP 2
 611: PUSH
 612: LD_STRING Stevens
 614: PPUSH
 615: LD_EXP 40
 619: NOT
 620: PPUSH
 621: LD_STRING 13c_
 623: PPUSH
 624: CALL 30287 0 3
 628: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 629: LD_ADDR_EXP 3
 633: PUSH
 634: LD_STRING Lisa
 636: PPUSH
 637: LD_EXP 40
 641: NOT
 642: PPUSH
 643: LD_STRING 13c_
 645: PPUSH
 646: CALL 30287 0 3
 650: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 651: LD_ADDR_EXP 4
 655: PUSH
 656: LD_STRING Donaldson
 658: PPUSH
 659: LD_EXP 40
 663: NOT
 664: PPUSH
 665: LD_STRING 13c_
 667: PPUSH
 668: CALL 30287 0 3
 672: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 673: LD_ADDR_EXP 5
 677: PUSH
 678: LD_STRING Bobby
 680: PPUSH
 681: LD_EXP 40
 685: NOT
 686: PPUSH
 687: LD_STRING 13c_
 689: PPUSH
 690: CALL 30287 0 3
 694: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 695: LD_ADDR_EXP 6
 699: PUSH
 700: LD_STRING Cyrus
 702: PPUSH
 703: LD_EXP 40
 707: NOT
 708: PPUSH
 709: LD_STRING 13c_
 711: PPUSH
 712: CALL 30287 0 3
 716: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 717: LD_ADDR_EXP 7
 721: PUSH
 722: LD_STRING Denis
 724: PPUSH
 725: LD_EXP 40
 729: NOT
 730: PPUSH
 731: LD_STRING 13c_
 733: PPUSH
 734: CALL 30287 0 3
 738: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 739: LD_ADDR_EXP 8
 743: PUSH
 744: LD_STRING Brown
 746: PPUSH
 747: LD_EXP 40
 751: NOT
 752: PPUSH
 753: LD_STRING 13c_
 755: PPUSH
 756: CALL 30287 0 3
 760: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 13c_ ) ;
 761: LD_ADDR_EXP 9
 765: PUSH
 766: LD_STRING Gladstone
 768: PPUSH
 769: LD_INT 1
 771: PPUSH
 772: LD_STRING 13c_
 774: PPUSH
 775: CALL 30287 0 3
 779: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 13c_ ) ;
 780: LD_ADDR_EXP 10
 784: PUSH
 785: LD_STRING Houten
 787: PPUSH
 788: LD_INT 1
 790: PPUSH
 791: LD_STRING 13c_
 793: PPUSH
 794: CALL 30287 0 3
 798: ST_TO_ADDR
// Cornel = PrepareUnit ( Cornel , true , 13c_ ) ;
 799: LD_ADDR_EXP 11
 803: PUSH
 804: LD_STRING Cornel
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_STRING 13c_
 812: PPUSH
 813: CALL 30287 0 3
 817: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 13c_ ) ;
 818: LD_ADDR_EXP 12
 822: PUSH
 823: LD_STRING Gary
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_STRING 13c_
 831: PPUSH
 832: CALL 30287 0 3
 836: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 13c_ ) ;
 837: LD_ADDR_EXP 13
 841: PUSH
 842: LD_STRING Frank
 844: PPUSH
 845: LD_INT 1
 847: PPUSH
 848: LD_STRING 13c_
 850: PPUSH
 851: CALL 30287 0 3
 855: ST_TO_ADDR
// Kikuchi = PrepareUnit ( Kikuchi , true , 13c_ ) ;
 856: LD_ADDR_EXP 14
 860: PUSH
 861: LD_STRING Kikuchi
 863: PPUSH
 864: LD_INT 1
 866: PPUSH
 867: LD_STRING 13c_
 869: PPUSH
 870: CALL 30287 0 3
 874: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 875: LD_ADDR_EXP 15
 879: PUSH
 880: LD_STRING Powell
 882: PPUSH
 883: LD_INT 0
 885: PPUSH
 886: LD_STRING 
 888: PPUSH
 889: CALL 30287 0 3
 893: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 894: LD_ADDR_VAR 0 2
 898: PUSH
 899: LD_EXP 1
 903: PUSH
 904: LD_EXP 2
 908: PUSH
 909: LD_EXP 3
 913: PUSH
 914: LD_EXP 4
 918: PUSH
 919: LD_EXP 5
 923: PUSH
 924: LD_EXP 6
 928: PUSH
 929: LD_EXP 7
 933: PUSH
 934: LD_EXP 8
 938: PUSH
 939: LD_EXP 9
 943: PUSH
 944: LD_EXP 10
 948: PUSH
 949: LD_EXP 11
 953: PUSH
 954: LD_EXP 12
 958: PUSH
 959: LD_EXP 13
 963: PUSH
 964: LD_EXP 14
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 985: LD_ADDR_VAR 0 3
 989: PUSH
 990: LD_INT 22
 992: PUSH
 993: LD_INT 1
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 33
1002: PUSH
1003: LD_INT 1
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 21
1012: PUSH
1013: LD_INT 2
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: LIST
1024: PPUSH
1025: CALL_OW 69
1029: ST_TO_ADDR
// for i = tmp downto 1 do
1030: LD_ADDR_VAR 0 4
1034: PUSH
1035: DOUBLE
1036: LD_VAR 0 2
1040: INC
1041: ST_TO_ADDR
1042: LD_INT 1
1044: PUSH
1045: FOR_DOWNTO
1046: IFFALSE 1083
// if not tmp [ i ] then
1048: LD_VAR 0 2
1052: PUSH
1053: LD_VAR 0 4
1057: ARRAY
1058: NOT
1059: IFFALSE 1081
// tmp := Delete ( tmp , i ) ;
1061: LD_ADDR_VAR 0 2
1065: PUSH
1066: LD_VAR 0 2
1070: PPUSH
1071: LD_VAR 0 4
1075: PPUSH
1076: CALL_OW 3
1080: ST_TO_ADDR
1081: GO 1045
1083: POP
1084: POP
// for i = 1 to tmp do
1085: LD_ADDR_VAR 0 4
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_VAR 0 2
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1131
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1103: LD_VAR 0 2
1107: PUSH
1108: LD_VAR 0 4
1112: ARRAY
1113: PPUSH
1114: LD_VAR 0 3
1118: PUSH
1119: LD_VAR 0 4
1123: ARRAY
1124: PPUSH
1125: CALL_OW 52
1129: GO 1100
1131: POP
1132: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1133: LD_INT 22
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 25
1145: PUSH
1146: LD_INT 2
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: PPUSH
1157: CALL_OW 69
1161: PUSH
1162: LD_INT 0
1164: EQUAL
1165: PUSH
1166: LD_INT 22
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 34
1178: PUSH
1179: LD_INT 13
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PPUSH
1190: CALL_OW 69
1194: PUSH
1195: LD_INT 0
1197: EQUAL
1198: AND
1199: IFFALSE 1213
// SetClass ( JMM , 2 ) ;
1201: LD_EXP 1
1205: PPUSH
1206: LD_INT 2
1208: PPUSH
1209: CALL_OW 336
// end ;
1213: LD_VAR 0 1
1217: RET
// export function PrepareAmericansRandom ; var i ; begin
1218: LD_INT 0
1220: PPUSH
1221: PPUSH
// uc_side = 1 ;
1222: LD_ADDR_OWVAR 20
1226: PUSH
1227: LD_INT 1
1229: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1230: LD_ADDR_EXP 16
1234: PUSH
1235: LD_STRING 13c_others
1237: PPUSH
1238: CALL_OW 31
1242: ST_TO_ADDR
// for i in others13 do
1243: LD_ADDR_VAR 0 2
1247: PUSH
1248: LD_EXP 16
1252: PUSH
1253: FOR_IN
1254: IFFALSE 1307
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1256: LD_VAR 0 2
1260: PPUSH
1261: LD_INT 22
1263: PUSH
1264: LD_INT 1
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 21
1273: PUSH
1274: LD_INT 2
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: LD_INT 58
1283: PUSH
1284: EMPTY
1285: LIST
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 69
1296: PUSH
1297: LD_INT 1
1299: ARRAY
1300: PPUSH
1301: CALL_OW 52
1305: GO 1253
1307: POP
1308: POP
// end ;
1309: LD_VAR 0 1
1313: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1314: LD_INT 0
1316: PPUSH
1317: PPUSH
1318: PPUSH
1319: PPUSH
1320: PPUSH
1321: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1322: LD_ADDR_VAR 0 5
1326: PUSH
1327: LD_STRING 13_VehiclesIn13_1
1329: PPUSH
1330: LD_INT 1
1332: PUSH
1333: LD_INT 5
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: LD_INT 1
1341: PUSH
1342: LD_INT 6
1344: PUSH
1345: LD_INT 100
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 1
1358: PUSH
1359: LD_INT 5
1361: PUSH
1362: LD_INT 3
1364: PUSH
1365: LD_INT 1
1367: PUSH
1368: LD_INT 6
1370: PUSH
1371: LD_INT 100
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 1
1384: PUSH
1385: LD_INT 5
1387: PUSH
1388: LD_INT 3
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: LD_INT 6
1396: PUSH
1397: LD_INT 100
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 1
1410: PUSH
1411: LD_INT 5
1413: PUSH
1414: LD_INT 3
1416: PUSH
1417: LD_INT 1
1419: PUSH
1420: LD_INT 6
1422: PUSH
1423: LD_INT 100
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 1
1436: PUSH
1437: LD_INT 5
1439: PUSH
1440: LD_INT 3
1442: PUSH
1443: LD_INT 1
1445: PUSH
1446: LD_INT 6
1448: PUSH
1449: LD_INT 100
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 1
1462: PUSH
1463: LD_INT 5
1465: PUSH
1466: LD_INT 3
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: LD_INT 6
1474: PUSH
1475: LD_INT 100
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 1
1488: PUSH
1489: LD_INT 5
1491: PUSH
1492: LD_INT 3
1494: PUSH
1495: LD_INT 1
1497: PUSH
1498: LD_INT 6
1500: PUSH
1501: LD_INT 100
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 1
1514: PUSH
1515: LD_INT 5
1517: PUSH
1518: LD_INT 3
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 6
1526: PUSH
1527: LD_INT 100
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: PPUSH
1548: CALL_OW 30
1552: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1553: LD_ADDR_EXP 24
1557: PUSH
1558: LD_STRING 13_ResourcesInCargo13_1
1560: PPUSH
1561: EMPTY
1562: PPUSH
1563: CALL_OW 30
1567: ST_TO_ADDR
// cargoList = [ ] ;
1568: LD_ADDR_VAR 0 6
1572: PUSH
1573: EMPTY
1574: ST_TO_ADDR
// uc_side = 1 ;
1575: LD_ADDR_OWVAR 20
1579: PUSH
1580: LD_INT 1
1582: ST_TO_ADDR
// if vehicles then
1583: LD_VAR 0 5
1587: IFFALSE 1934
// begin for i := 1 to vehicles do
1589: LD_ADDR_VAR 0 2
1593: PUSH
1594: DOUBLE
1595: LD_INT 1
1597: DEC
1598: ST_TO_ADDR
1599: LD_VAR 0 5
1603: PUSH
1604: FOR_TO
1605: IFFALSE 1754
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1607: LD_ADDR_OWVAR 21
1611: PUSH
1612: LD_VAR 0 5
1616: PUSH
1617: LD_VAR 0 2
1621: ARRAY
1622: PUSH
1623: LD_INT 1
1625: ARRAY
1626: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1627: LD_ADDR_OWVAR 37
1631: PUSH
1632: LD_VAR 0 5
1636: PUSH
1637: LD_VAR 0 2
1641: ARRAY
1642: PUSH
1643: LD_INT 2
1645: ARRAY
1646: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1647: LD_ADDR_OWVAR 39
1651: PUSH
1652: LD_VAR 0 5
1656: PUSH
1657: LD_VAR 0 2
1661: ARRAY
1662: PUSH
1663: LD_INT 3
1665: ARRAY
1666: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1667: LD_ADDR_OWVAR 38
1671: PUSH
1672: LD_VAR 0 5
1676: PUSH
1677: LD_VAR 0 2
1681: ARRAY
1682: PUSH
1683: LD_INT 4
1685: ARRAY
1686: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1687: LD_ADDR_OWVAR 40
1691: PUSH
1692: LD_VAR 0 5
1696: PUSH
1697: LD_VAR 0 2
1701: ARRAY
1702: PUSH
1703: LD_INT 5
1705: ARRAY
1706: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1707: LD_ADDR_OWVAR 41
1711: PUSH
1712: LD_INT 40
1714: ST_TO_ADDR
// veh = CreateVehicle ;
1715: LD_ADDR_VAR 0 4
1719: PUSH
1720: CALL_OW 45
1724: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1725: LD_VAR 0 4
1729: PPUSH
1730: LD_INT 3
1732: PPUSH
1733: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1737: LD_VAR 0 4
1741: PPUSH
1742: LD_INT 2
1744: PPUSH
1745: LD_INT 0
1747: PPUSH
1748: CALL_OW 49
// end ;
1752: GO 1604
1754: POP
1755: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1756: LD_ADDR_VAR 0 6
1760: PUSH
1761: LD_INT 22
1763: PUSH
1764: LD_INT 1
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: PUSH
1771: LD_INT 21
1773: PUSH
1774: LD_INT 2
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 34
1783: PUSH
1784: LD_INT 12
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: PPUSH
1796: CALL_OW 69
1800: ST_TO_ADDR
// if cargoList then
1801: LD_VAR 0 6
1805: IFFALSE 1934
// for i = 1 to cargoList do
1807: LD_ADDR_VAR 0 2
1811: PUSH
1812: DOUBLE
1813: LD_INT 1
1815: DEC
1816: ST_TO_ADDR
1817: LD_VAR 0 6
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1932
// begin if resources then
1825: LD_EXP 24
1829: IFFALSE 1930
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1831: LD_VAR 0 6
1835: PUSH
1836: LD_VAR 0 2
1840: ARRAY
1841: PPUSH
1842: LD_INT 1
1844: PPUSH
1845: LD_EXP 24
1849: PUSH
1850: LD_VAR 0 2
1854: ARRAY
1855: PUSH
1856: LD_INT 1
1858: ARRAY
1859: PPUSH
1860: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1864: LD_VAR 0 6
1868: PUSH
1869: LD_VAR 0 2
1873: ARRAY
1874: PPUSH
1875: LD_INT 2
1877: PPUSH
1878: LD_EXP 24
1882: PUSH
1883: LD_VAR 0 2
1887: ARRAY
1888: PUSH
1889: LD_INT 2
1891: ARRAY
1892: PPUSH
1893: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1897: LD_VAR 0 6
1901: PUSH
1902: LD_VAR 0 2
1906: ARRAY
1907: PPUSH
1908: LD_INT 3
1910: PPUSH
1911: LD_EXP 24
1915: PUSH
1916: LD_VAR 0 2
1920: ARRAY
1921: PUSH
1922: LD_INT 3
1924: ARRAY
1925: PPUSH
1926: CALL_OW 291
// end ; end ;
1930: GO 1822
1932: POP
1933: POP
// end ; end ;
1934: LD_VAR 0 1
1938: RET
// export function PowellSupport ; var i , veh , un ; begin
1939: LD_INT 0
1941: PPUSH
1942: PPUSH
1943: PPUSH
1944: PPUSH
// for i = 1 to 3 do
1945: LD_ADDR_VAR 0 2
1949: PUSH
1950: DOUBLE
1951: LD_INT 1
1953: DEC
1954: ST_TO_ADDR
1955: LD_INT 3
1957: PUSH
1958: FOR_TO
1959: IFFALSE 2160
// begin uc_nation = 1 ;
1961: LD_ADDR_OWVAR 21
1965: PUSH
1966: LD_INT 1
1968: ST_TO_ADDR
// uc_side = 1 ;
1969: LD_ADDR_OWVAR 20
1973: PUSH
1974: LD_INT 1
1976: ST_TO_ADDR
// vc_engine = 3 ;
1977: LD_ADDR_OWVAR 39
1981: PUSH
1982: LD_INT 3
1984: ST_TO_ADDR
// vc_control = 1 ;
1985: LD_ADDR_OWVAR 38
1989: PUSH
1990: LD_INT 1
1992: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1993: LD_ADDR_OWVAR 40
1997: PUSH
1998: LD_INT 9
2000: PUSH
2001: LD_INT 5
2003: PUSH
2004: LD_INT 4
2006: PUSH
2007: LD_INT 7
2009: PUSH
2010: LD_INT 6
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 1
2022: PPUSH
2023: LD_INT 5
2025: PPUSH
2026: CALL_OW 12
2030: ARRAY
2031: ST_TO_ADDR
// if vc_weapon = 6 then
2032: LD_OWVAR 40
2036: PUSH
2037: LD_INT 6
2039: EQUAL
2040: IFFALSE 2052
// vc_chassis = 4 else
2042: LD_ADDR_OWVAR 37
2046: PUSH
2047: LD_INT 4
2049: ST_TO_ADDR
2050: GO 2060
// vc_chassis = 3 ;
2052: LD_ADDR_OWVAR 37
2056: PUSH
2057: LD_INT 3
2059: ST_TO_ADDR
// veh = CreateVehicle ;
2060: LD_ADDR_VAR 0 3
2064: PUSH
2065: CALL_OW 45
2069: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2070: LD_VAR 0 3
2074: PPUSH
2075: LD_INT 2
2077: PPUSH
2078: LD_INT 0
2080: PPUSH
2081: CALL_OW 49
// SetDir ( veh , 1 ) ;
2085: LD_VAR 0 3
2089: PPUSH
2090: LD_INT 1
2092: PPUSH
2093: CALL_OW 233
// hc_gallery =  ;
2097: LD_ADDR_OWVAR 33
2101: PUSH
2102: LD_STRING 
2104: ST_TO_ADDR
// hc_name =  ;
2105: LD_ADDR_OWVAR 26
2109: PUSH
2110: LD_STRING 
2112: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
2113: LD_INT 0
2115: PPUSH
2116: LD_INT 3
2118: PPUSH
2119: LD_INT 7
2121: PPUSH
2122: LD_INT 10
2124: PPUSH
2125: CALL_OW 12
2129: PPUSH
2130: CALL_OW 380
// un = CreateHuman ;
2134: LD_ADDR_VAR 0 4
2138: PUSH
2139: CALL_OW 44
2143: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2144: LD_VAR 0 4
2148: PPUSH
2149: LD_VAR 0 3
2153: PPUSH
2154: CALL_OW 52
// end ;
2158: GO 1958
2160: POP
2161: POP
// end ; end_of_file
2162: LD_VAR 0 1
2166: RET
// export function PrepareBurlak ; begin
2167: LD_INT 0
2169: PPUSH
// uc_side = 7 ;
2170: LD_ADDR_OWVAR 20
2174: PUSH
2175: LD_INT 7
2177: ST_TO_ADDR
// uc_nation = 3 ;
2178: LD_ADDR_OWVAR 21
2182: PUSH
2183: LD_INT 3
2185: ST_TO_ADDR
// vc_engine = 3 ;
2186: LD_ADDR_OWVAR 39
2190: PUSH
2191: LD_INT 3
2193: ST_TO_ADDR
// vc_control = 1 ;
2194: LD_ADDR_OWVAR 38
2198: PUSH
2199: LD_INT 1
2201: ST_TO_ADDR
// vc_weapon = 46 ;
2202: LD_ADDR_OWVAR 40
2206: PUSH
2207: LD_INT 46
2209: ST_TO_ADDR
// vc_chassis = 24 ;
2210: LD_ADDR_OWVAR 37
2214: PUSH
2215: LD_INT 24
2217: ST_TO_ADDR
// Masha = CreateVehicle ;
2218: LD_ADDR_EXP 18
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2228: LD_EXP 18
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: LD_INT 0
2238: PPUSH
2239: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2243: LD_EXP 18
2247: PPUSH
2248: LD_INT 1
2250: PPUSH
2251: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2255: LD_ADDR_EXP 17
2259: PUSH
2260: LD_STRING Burlak
2262: PPUSH
2263: LD_INT 0
2265: PPUSH
2266: LD_STRING 
2268: PPUSH
2269: CALL 30287 0 3
2273: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2274: LD_EXP 17
2278: PPUSH
2279: LD_EXP 18
2283: PPUSH
2284: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2288: LD_EXP 18
2292: PPUSH
2293: LD_INT 107
2295: PPUSH
2296: LD_INT 118
2298: PPUSH
2299: CALL_OW 114
// spawnBurlak = 1 ;
2303: LD_ADDR_EXP 27
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// end ;
2311: LD_VAR 0 1
2315: RET
// export function BurlakArmy ; var i , veh , tmp ; begin
2316: LD_INT 0
2318: PPUSH
2319: PPUSH
2320: PPUSH
2321: PPUSH
// uc_side = 7 ;
2322: LD_ADDR_OWVAR 20
2326: PUSH
2327: LD_INT 7
2329: ST_TO_ADDR
// uc_nation = 3 ;
2330: LD_ADDR_OWVAR 21
2334: PUSH
2335: LD_INT 3
2337: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ,  ) ;
2338: LD_ADDR_EXP 19
2342: PUSH
2343: LD_STRING Gnyevko
2345: PPUSH
2346: LD_INT 0
2348: PPUSH
2349: LD_STRING 
2351: PPUSH
2352: CALL 30287 0 3
2356: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ,  ) ;
2357: LD_ADDR_EXP 20
2361: PUSH
2362: LD_STRING Titov
2364: PPUSH
2365: LD_INT 0
2367: PPUSH
2368: LD_STRING 
2370: PPUSH
2371: CALL 30287 0 3
2375: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ,  ) ;
2376: LD_ADDR_EXP 21
2380: PUSH
2381: LD_STRING Xavier2
2383: PPUSH
2384: LD_INT 0
2386: PPUSH
2387: LD_STRING 
2389: PPUSH
2390: CALL 30287 0 3
2394: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ,  ) ;
2395: LD_ADDR_EXP 22
2399: PUSH
2400: LD_STRING Belkov
2402: PPUSH
2403: LD_INT 0
2405: PPUSH
2406: LD_STRING 
2408: PPUSH
2409: CALL 30287 0 3
2413: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ,  ) ;
2414: LD_ADDR_EXP 23
2418: PUSH
2419: LD_STRING Lipshchin
2421: PPUSH
2422: LD_INT 0
2424: PPUSH
2425: LD_STRING 
2427: PPUSH
2428: CALL 30287 0 3
2432: ST_TO_ADDR
// for i = 1 to 5 do
2433: LD_ADDR_VAR 0 2
2437: PUSH
2438: DOUBLE
2439: LD_INT 1
2441: DEC
2442: ST_TO_ADDR
2443: LD_INT 5
2445: PUSH
2446: FOR_TO
2447: IFFALSE 2535
// begin vc_engine = 3 ;
2449: LD_ADDR_OWVAR 39
2453: PUSH
2454: LD_INT 3
2456: ST_TO_ADDR
// vc_control = 1 ;
2457: LD_ADDR_OWVAR 38
2461: PUSH
2462: LD_INT 1
2464: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2465: LD_ADDR_OWVAR 40
2469: PUSH
2470: LD_INT 43
2472: PUSH
2473: LD_INT 44
2475: PUSH
2476: LD_INT 45
2478: PUSH
2479: LD_INT 49
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: PUSH
2488: LD_INT 1
2490: PPUSH
2491: LD_INT 4
2493: PPUSH
2494: CALL_OW 12
2498: ARRAY
2499: ST_TO_ADDR
// vc_chassis = 22 ;
2500: LD_ADDR_OWVAR 37
2504: PUSH
2505: LD_INT 22
2507: ST_TO_ADDR
// veh = CreateVehicle ;
2508: LD_ADDR_VAR 0 3
2512: PUSH
2513: CALL_OW 45
2517: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2518: LD_VAR 0 3
2522: PPUSH
2523: LD_INT 3
2525: PPUSH
2526: LD_INT 0
2528: PPUSH
2529: CALL_OW 49
// end ;
2533: GO 2446
2535: POP
2536: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2537: LD_ADDR_VAR 0 4
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 7
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 21
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 58
2564: PUSH
2565: EMPTY
2566: LIST
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: LIST
2572: PPUSH
2573: CALL_OW 69
2577: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2578: LD_EXP 19
2582: PPUSH
2583: LD_VAR 0 4
2587: PUSH
2588: LD_INT 1
2590: ARRAY
2591: PPUSH
2592: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2596: LD_EXP 20
2600: PPUSH
2601: LD_VAR 0 4
2605: PUSH
2606: LD_INT 2
2608: ARRAY
2609: PPUSH
2610: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2614: LD_EXP 21
2618: PPUSH
2619: LD_VAR 0 4
2623: PUSH
2624: LD_INT 3
2626: ARRAY
2627: PPUSH
2628: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2632: LD_EXP 22
2636: PPUSH
2637: LD_VAR 0 4
2641: PUSH
2642: LD_INT 4
2644: ARRAY
2645: PPUSH
2646: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2650: LD_EXP 23
2654: PPUSH
2655: LD_VAR 0 4
2659: PUSH
2660: LD_INT 5
2662: ARRAY
2663: PPUSH
2664: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2668: LD_EXP 19
2672: PPUSH
2673: LD_INT 3
2675: PPUSH
2676: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2680: LD_EXP 20
2684: PUSH
2685: LD_EXP 23
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: PPUSH
2694: LD_INT 9
2696: PPUSH
2697: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2701: LD_ADDR_VAR 0 4
2705: PUSH
2706: LD_INT 22
2708: PUSH
2709: LD_INT 7
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PPUSH
2716: CALL_OW 69
2720: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2721: LD_VAR 0 4
2725: PPUSH
2726: LD_INT 107
2728: PPUSH
2729: LD_INT 118
2731: PPUSH
2732: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2736: LD_INT 35
2738: PPUSH
2739: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , 49 ] ) , Masha ) ;
2743: LD_VAR 0 4
2747: PPUSH
2748: LD_INT 34
2750: PUSH
2751: LD_INT 49
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PPUSH
2758: CALL_OW 72
2762: PPUSH
2763: LD_EXP 18
2767: PPUSH
2768: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , 49 ] ] ) , 107 , 118 ) ;
2772: LD_VAR 0 4
2776: PPUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 34
2782: PUSH
2783: LD_INT 49
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: PPUSH
2794: CALL_OW 72
2798: PPUSH
2799: LD_INT 107
2801: PPUSH
2802: LD_INT 118
2804: PPUSH
2805: CALL_OW 114
// until UnitFilter ( tmp , [ f_weapon , 49 ] ) = 0 or IsDying ( Masha ) ;
2809: LD_VAR 0 4
2813: PPUSH
2814: LD_INT 34
2816: PUSH
2817: LD_INT 49
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PPUSH
2824: CALL_OW 72
2828: PUSH
2829: LD_INT 0
2831: EQUAL
2832: PUSH
2833: LD_EXP 18
2837: PPUSH
2838: CALL_OW 303
2842: OR
2843: IFFALSE 2736
// repeat wait ( 0 0$1 ) ;
2845: LD_INT 35
2847: PPUSH
2848: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
2852: LD_ADDR_VAR 0 4
2856: PUSH
2857: LD_INT 22
2859: PUSH
2860: LD_INT 7
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PPUSH
2867: CALL_OW 69
2871: PUSH
2872: LD_EXP 17
2876: DIFF
2877: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2878: LD_VAR 0 4
2882: PPUSH
2883: LD_INT 107
2885: PPUSH
2886: LD_INT 118
2888: PPUSH
2889: CALL_OW 114
// if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
2893: LD_EXP 17
2897: PPUSH
2898: CALL_OW 302
2902: PUSH
2903: LD_EXP 17
2907: PPUSH
2908: CALL_OW 310
2912: NOT
2913: AND
2914: IFFALSE 2931
// ComMoveXY ( Burlak , 107 , 118 ) ;
2916: LD_EXP 17
2920: PPUSH
2921: LD_INT 107
2923: PPUSH
2924: LD_INT 118
2926: PPUSH
2927: CALL_OW 111
// until not tmp ;
2931: LD_VAR 0 4
2935: NOT
2936: IFFALSE 2845
// end ; end_of_file
2938: LD_VAR 0 1
2942: RET
// every 15 15$0 trigger sibDeposits do var un , rnd ;
2943: LD_EXP 31
2947: IFFALSE 3123
2949: GO 2951
2951: DISABLE
2952: LD_INT 0
2954: PPUSH
2955: PPUSH
// begin enable ;
2956: ENABLE
// rnd = 0 ;
2957: LD_ADDR_VAR 0 2
2961: PUSH
2962: LD_INT 0
2964: ST_TO_ADDR
// uc_side = 8 ;
2965: LD_ADDR_OWVAR 20
2969: PUSH
2970: LD_INT 8
2972: ST_TO_ADDR
// uc_nation = 2 ;
2973: LD_ADDR_OWVAR 21
2977: PUSH
2978: LD_INT 2
2980: ST_TO_ADDR
// hc_name =  ;
2981: LD_ADDR_OWVAR 26
2985: PUSH
2986: LD_STRING 
2988: ST_TO_ADDR
// hc_gallery =  ;
2989: LD_ADDR_OWVAR 33
2993: PUSH
2994: LD_STRING 
2996: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
2997: LD_INT 0
2999: PPUSH
3000: LD_INT 4
3002: PPUSH
3003: LD_INT 10
3005: PPUSH
3006: CALL_OW 380
// un = CreateHuman ;
3010: LD_ADDR_VAR 0 1
3014: PUSH
3015: CALL_OW 44
3019: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3020: LD_VAR 0 1
3024: PPUSH
3025: LD_INT 8
3027: PUSH
3028: LD_INT 9
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 1
3037: PPUSH
3038: LD_INT 2
3040: PPUSH
3041: CALL_OW 12
3045: ARRAY
3046: PPUSH
3047: LD_INT 0
3049: PPUSH
3050: CALL_OW 49
// SetTag ( un , 1 ) ;
3054: LD_VAR 0 1
3058: PPUSH
3059: LD_INT 1
3061: PPUSH
3062: CALL_OW 109
// rnd = Rand ( 1 , sibDeposits ) ;
3066: LD_ADDR_VAR 0 2
3070: PUSH
3071: LD_INT 1
3073: PPUSH
3074: LD_EXP 31
3078: PPUSH
3079: CALL_OW 12
3083: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
3084: LD_VAR 0 1
3088: PPUSH
3089: LD_EXP 31
3093: PUSH
3094: LD_VAR 0 2
3098: ARRAY
3099: PUSH
3100: LD_INT 1
3102: ARRAY
3103: PPUSH
3104: LD_EXP 31
3108: PUSH
3109: LD_VAR 0 2
3113: ARRAY
3114: PUSH
3115: LD_INT 2
3117: ARRAY
3118: PPUSH
3119: CALL_OW 158
// end ;
3123: PPOPN 2
3125: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do var i ;
3126: LD_INT 22
3128: PUSH
3129: LD_INT 8
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 3
3138: PUSH
3139: LD_INT 61
3141: PUSH
3142: EMPTY
3143: LIST
3144: PUSH
3145: EMPTY
3146: LIST
3147: LIST
3148: PUSH
3149: LD_INT 33
3151: PUSH
3152: LD_INT 2
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PUSH
3159: EMPTY
3160: LIST
3161: LIST
3162: LIST
3163: PPUSH
3164: CALL_OW 69
3168: IFFALSE 3241
3170: GO 3172
3172: DISABLE
3173: LD_INT 0
3175: PPUSH
// begin enable ;
3176: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do
3177: LD_ADDR_VAR 0 1
3181: PUSH
3182: LD_INT 22
3184: PUSH
3185: LD_INT 8
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 61
3197: PUSH
3198: EMPTY
3199: LIST
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: LD_INT 33
3207: PUSH
3208: LD_INT 2
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: LIST
3219: PPUSH
3220: CALL_OW 69
3224: PUSH
3225: FOR_IN
3226: IFFALSE 3239
// Connect ( i ) ;
3228: LD_VAR 0 1
3232: PPUSH
3233: CALL 38244 0 1
3237: GO 3225
3239: POP
3240: POP
// end ; end_of_file
3241: PPOPN 1
3243: END
// every 1 do
3244: GO 3246
3246: DISABLE
// begin InGameOn ;
3247: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3251: LD_INT 22
3253: PUSH
3254: LD_INT 1
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 21
3263: PUSH
3264: LD_INT 2
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PPUSH
3275: CALL_OW 69
3279: PUSH
3280: LD_INT 1
3282: ARRAY
3283: PPUSH
3284: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
3288: LD_INT 22
3290: PUSH
3291: LD_INT 1
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PUSH
3298: LD_INT 21
3300: PUSH
3301: LD_INT 2
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PPUSH
3312: CALL_OW 69
3316: PPUSH
3317: LD_INT 69
3319: PPUSH
3320: LD_INT 94
3322: PPUSH
3323: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3327: LD_EXP 1
3331: PPUSH
3332: LD_STRING D2-JMM-1
3334: PPUSH
3335: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3339: LD_INT 22
3341: PUSH
3342: LD_INT 1
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 21
3351: PUSH
3352: LD_INT 2
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: LD_INT 1
3370: ARRAY
3371: PPUSH
3372: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3376: LD_EXP 2
3380: PPUSH
3381: LD_STRING D2-Huck-1
3383: PPUSH
3384: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3388: LD_INT 22
3390: PUSH
3391: LD_INT 1
3393: PUSH
3394: EMPTY
3395: LIST
3396: LIST
3397: PUSH
3398: LD_INT 21
3400: PUSH
3401: LD_INT 2
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PPUSH
3412: CALL_OW 69
3416: PUSH
3417: LD_INT 1
3419: ARRAY
3420: PPUSH
3421: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3425: LD_EXP 1
3429: PPUSH
3430: LD_STRING D2-JMM-2
3432: PPUSH
3433: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3437: LD_INT 22
3439: PUSH
3440: LD_INT 1
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: LD_INT 21
3449: PUSH
3450: LD_INT 2
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PPUSH
3461: CALL_OW 69
3465: PUSH
3466: LD_INT 1
3468: ARRAY
3469: PPUSH
3470: CALL_OW 87
// InGameOff ;
3474: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3478: LD_STRING M1
3480: PPUSH
3481: CALL_OW 337
// SaveForQuickRestart ;
3485: CALL_OW 22
// end ;
3489: END
// every 10 10$0 do
3490: GO 3492
3492: DISABLE
// begin DialogueOn ;
3493: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3497: LD_EXP 15
3501: PPUSH
3502: LD_STRING D3-Pow-1
3504: PPUSH
3505: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3509: LD_EXP 1
3513: PPUSH
3514: LD_STRING D3-JMM-1
3516: PPUSH
3517: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3521: LD_EXP 15
3525: PPUSH
3526: LD_STRING D3-Pow-2
3528: PPUSH
3529: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3533: LD_EXP 1
3537: PPUSH
3538: LD_STRING D3-JMM-2
3540: PPUSH
3541: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3545: LD_EXP 15
3549: PPUSH
3550: LD_STRING D3-Pow-3
3552: PPUSH
3553: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3557: LD_EXP 1
3561: PPUSH
3562: LD_STRING D3-JMM-3
3564: PPUSH
3565: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3569: LD_EXP 15
3573: PPUSH
3574: LD_STRING D3-Pow-4
3576: PPUSH
3577: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3581: LD_EXP 1
3585: PPUSH
3586: LD_STRING D3-JMM-4
3588: PPUSH
3589: CALL_OW 88
// DialogueOff ;
3593: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3597: LD_STRING M2
3599: PPUSH
3600: CALL_OW 337
// wait ( 2 2$30 ) ;
3604: LD_INT 5250
3606: PPUSH
3607: CALL_OW 67
// PrepareBurlak ;
3611: CALL 2167 0 0
// BurlakArmy ;
3615: CALL 2316 0 0
// end ;
3619: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3620: LD_INT 1
3622: PPUSH
3623: LD_EXP 18
3627: PPUSH
3628: CALL_OW 292
3632: IFFALSE 3791
3634: GO 3636
3636: DISABLE
// begin DialogueOn ;
3637: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3641: LD_EXP 18
3645: PPUSH
3646: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3650: LD_INT 22
3652: PUSH
3653: LD_INT 1
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: PUSH
3660: LD_INT 26
3662: PUSH
3663: LD_INT 1
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: PUSH
3670: LD_INT 2
3672: PUSH
3673: LD_INT 25
3675: PUSH
3676: LD_INT 1
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 25
3685: PUSH
3686: LD_INT 2
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: PUSH
3693: LD_INT 25
3695: PUSH
3696: LD_INT 3
3698: PUSH
3699: EMPTY
3700: LIST
3701: LIST
3702: PUSH
3703: LD_INT 25
3705: PUSH
3706: LD_INT 4
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: PUSH
3713: LD_INT 25
3715: PUSH
3716: LD_INT 5
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: PPUSH
3736: CALL_OW 69
3740: PPUSH
3741: LD_STRING D5-Sol1-1
3743: PPUSH
3744: LD_STRING D5-FSol1-1
3746: PPUSH
3747: CALL 6078 0 3
// Say ( JMM , D5-JMM-1 ) ;
3751: LD_EXP 1
3755: PPUSH
3756: LD_STRING D5-JMM-1
3758: PPUSH
3759: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3763: LD_EXP 17
3767: PPUSH
3768: LD_STRING DAmer-Bur-1
3770: PPUSH
3771: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3775: LD_EXP 1
3779: PPUSH
3780: LD_STRING DAmer-JMM-1
3782: PPUSH
3783: CALL_OW 88
// DialogueOff ;
3787: CALL_OW 7
// end ;
3791: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
3792: LD_INT 4
3794: PPUSH
3795: LD_INT 22
3797: PUSH
3798: LD_INT 7
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: PPUSH
3805: CALL_OW 70
3809: IFFALSE 4208
3811: GO 3813
3813: DISABLE
3814: LD_INT 0
3816: PPUSH
// begin enable ;
3817: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
3818: LD_ADDR_VAR 0 1
3822: PUSH
3823: LD_INT 4
3825: PPUSH
3826: LD_INT 22
3828: PUSH
3829: LD_INT 7
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PPUSH
3836: CALL_OW 70
3840: PUSH
3841: FOR_IN
3842: IFFALSE 4206
// begin if i = Burlak or i = Masha then
3844: LD_VAR 0 1
3848: PUSH
3849: LD_EXP 17
3853: EQUAL
3854: PUSH
3855: LD_VAR 0 1
3859: PUSH
3860: LD_EXP 18
3864: EQUAL
3865: OR
3866: IFFALSE 4013
// begin RemoveUnit ( i ) ;
3868: LD_VAR 0 1
3872: PPUSH
3873: CALL_OW 64
// DialogueOn ;
3877: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3881: LD_EXP 1
3885: PPUSH
3886: LD_STRING D5a-JMM-1
3888: PPUSH
3889: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3893: LD_INT 22
3895: PUSH
3896: LD_INT 1
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: PUSH
3903: LD_INT 26
3905: PUSH
3906: LD_INT 1
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: PUSH
3913: LD_INT 2
3915: PUSH
3916: LD_INT 25
3918: PUSH
3919: LD_INT 1
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: PUSH
3926: LD_INT 25
3928: PUSH
3929: LD_INT 2
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: PUSH
3936: LD_INT 25
3938: PUSH
3939: LD_INT 3
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: PUSH
3946: LD_INT 25
3948: PUSH
3949: LD_INT 4
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: PUSH
3956: LD_INT 25
3958: PUSH
3959: LD_INT 5
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: LIST
3978: PPUSH
3979: CALL_OW 69
3983: PPUSH
3984: LD_STRING D5a-Sol1-1
3986: PPUSH
3987: LD_STRING D5-FSol1-1
3989: PPUSH
3990: CALL 6078 0 3
// DialogueOff ;
3994: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
3998: LD_STRING M2b
4000: PPUSH
4001: CALL_OW 337
// spawnBurlak = 0 ;
4005: LD_ADDR_EXP 27
4009: PUSH
4010: LD_INT 0
4012: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
4013: LD_VAR 0 1
4017: PPUSH
4018: CALL_OW 247
4022: PUSH
4023: LD_INT 2
4025: EQUAL
4026: PUSH
4027: LD_VAR 0 1
4031: PPUSH
4032: CALL_OW 263
4036: PUSH
4037: LD_INT 1
4039: EQUAL
4040: AND
4041: IFFALSE 4169
// begin case IsDrivenBy ( i ) of Gnyevko :
4043: LD_VAR 0 1
4047: PPUSH
4048: CALL_OW 311
4052: PUSH
4053: LD_EXP 19
4057: DOUBLE
4058: EQUAL
4059: IFTRUE 4063
4061: GO 4076
4063: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
4064: LD_INT 1
4066: PPUSH
4067: LD_STRING 13_Gnyevko_1
4069: PPUSH
4070: CALL_OW 39
4074: GO 4169
4076: LD_EXP 20
4080: DOUBLE
4081: EQUAL
4082: IFTRUE 4086
4084: GO 4099
4086: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
4087: LD_INT 1
4089: PPUSH
4090: LD_STRING 13_Titov_1
4092: PPUSH
4093: CALL_OW 39
4097: GO 4169
4099: LD_EXP 21
4103: DOUBLE
4104: EQUAL
4105: IFTRUE 4109
4107: GO 4122
4109: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
4110: LD_INT 1
4112: PPUSH
4113: LD_STRING 13_Xavier_1
4115: PPUSH
4116: CALL_OW 39
4120: GO 4169
4122: LD_EXP 22
4126: DOUBLE
4127: EQUAL
4128: IFTRUE 4132
4130: GO 4145
4132: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
4133: LD_INT 1
4135: PPUSH
4136: LD_STRING 13_Belkov_1
4138: PPUSH
4139: CALL_OW 39
4143: GO 4169
4145: LD_EXP 23
4149: DOUBLE
4150: EQUAL
4151: IFTRUE 4155
4153: GO 4168
4155: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
4156: LD_INT 1
4158: PPUSH
4159: LD_STRING 13_Lipshchin_1
4161: PPUSH
4162: CALL_OW 39
4166: GO 4169
4168: POP
// end ; if GetWeapon ( i ) = 49 then
4169: LD_VAR 0 1
4173: PPUSH
4174: CALL_OW 264
4178: PUSH
4179: LD_INT 49
4181: EQUAL
4182: IFFALSE 4195
// DestroyUnit ( i ) else
4184: LD_VAR 0 1
4188: PPUSH
4189: CALL_OW 65
4193: GO 4204
// RemoveUnit ( i ) ;
4195: LD_VAR 0 1
4199: PPUSH
4200: CALL_OW 64
// end ;
4204: GO 3841
4206: POP
4207: POP
// end ;
4208: PPOPN 1
4210: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
4211: LD_EXP 17
4215: PPUSH
4216: CALL_OW 302
4220: PUSH
4221: LD_EXP 18
4225: PPUSH
4226: CALL_OW 256
4230: PUSH
4231: LD_INT 500
4233: LESS
4234: AND
4235: PUSH
4236: LD_EXP 18
4240: PPUSH
4241: CALL_OW 255
4245: PUSH
4246: LD_INT 7
4248: EQUAL
4249: AND
4250: IFFALSE 4270
4252: GO 4254
4254: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
4255: LD_EXP 17
4259: PPUSH
4260: LD_INT 107
4262: PPUSH
4263: LD_INT 118
4265: PPUSH
4266: CALL_OW 111
4270: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
4271: LD_EXP 17
4275: PPUSH
4276: CALL_OW 301
4280: PUSH
4281: LD_EXP 27
4285: PUSH
4286: LD_INT 1
4288: EQUAL
4289: AND
4290: IFFALSE 4423
4292: GO 4294
4294: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4295: LD_EXP 1
4299: PPUSH
4300: LD_STRING D5b-JMM-1
4302: PPUSH
4303: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
4307: LD_INT 22
4309: PUSH
4310: LD_INT 1
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: PUSH
4317: LD_INT 26
4319: PUSH
4320: LD_INT 1
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PUSH
4327: LD_INT 2
4329: PUSH
4330: LD_INT 25
4332: PUSH
4333: LD_INT 1
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: PUSH
4340: LD_INT 25
4342: PUSH
4343: LD_INT 2
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: PUSH
4350: LD_INT 25
4352: PUSH
4353: LD_INT 3
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: PUSH
4360: LD_INT 25
4362: PUSH
4363: LD_INT 4
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: PUSH
4370: LD_INT 25
4372: PUSH
4373: LD_INT 5
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: LIST
4392: PPUSH
4393: CALL_OW 69
4397: PPUSH
4398: LD_STRING D5b-Sol1-1
4400: PPUSH
4401: LD_STRING 
4403: PPUSH
4404: CALL 6078 0 3
// ChangeMissionObjectives ( M2a ) ;
4408: LD_STRING M2a
4410: PPUSH
4411: CALL_OW 337
// burlakStatus = 1 ;
4415: LD_ADDR_EXP 28
4419: PUSH
4420: LD_INT 1
4422: ST_TO_ADDR
// end ;
4423: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4424: LD_EXP 2
4428: PPUSH
4429: CALL_OW 301
4433: IFFALSE 4570
4435: GO 4437
4437: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4438: LD_EXP 1
4442: PPUSH
4443: LD_STRING D6-JMM-1
4445: PPUSH
4446: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
4450: LD_INT 22
4452: PUSH
4453: LD_INT 1
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 26
4462: PUSH
4463: LD_INT 1
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 2
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 1
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 25
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 25
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 25
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 25
4515: PUSH
4516: LD_INT 5
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 69
4540: PPUSH
4541: LD_STRING D6-Sol1-1
4543: PPUSH
4544: LD_STRING 
4546: PPUSH
4547: CALL 6078 0 3
// Say ( JMM , D6-JMM-2 ) ;
4551: LD_EXP 1
4555: PPUSH
4556: LD_STRING D6-JMM-2
4558: PPUSH
4559: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4563: LD_STRING M1a
4565: PPUSH
4566: CALL_OW 337
// end ;
4570: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4571: LD_INT 25
4573: PPUSH
4574: LD_INT 1
4576: PPUSH
4577: CALL_OW 321
4581: PUSH
4582: LD_INT 2
4584: EQUAL
4585: IFFALSE 4602
4587: GO 4589
4589: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4590: LD_EXP 2
4594: PPUSH
4595: LD_STRING D6-Huck-2
4597: PPUSH
4598: CALL_OW 88
// end ;
4602: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4603: LD_INT 22
4605: PUSH
4606: LD_INT 1
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: PUSH
4613: LD_INT 2
4615: PUSH
4616: LD_INT 34
4618: PUSH
4619: LD_INT 8
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: LD_INT 35
4628: PUSH
4629: LD_INT 8
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: LIST
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PPUSH
4645: CALL_OW 69
4649: PUSH
4650: LD_INT 0
4652: GREATER
4653: IFFALSE 4845
4655: GO 4657
4657: DISABLE
4658: LD_INT 0
4660: PPUSH
4661: PPUSH
// begin enable ;
4662: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4663: LD_ADDR_VAR 0 1
4667: PUSH
4668: LD_INT 5
4670: PPUSH
4671: LD_INT 22
4673: PUSH
4674: LD_INT 1
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: LD_INT 21
4683: PUSH
4684: LD_INT 3
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: LD_INT 30
4693: PUSH
4694: LD_INT 1
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: PUSH
4701: LD_INT 3
4703: PUSH
4704: LD_INT 57
4706: PUSH
4707: EMPTY
4708: LIST
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: PPUSH
4720: CALL_OW 70
4724: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4725: LD_ADDR_VAR 0 2
4729: PUSH
4730: LD_INT 5
4732: PPUSH
4733: LD_INT 22
4735: PUSH
4736: LD_INT 1
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: LD_INT 21
4745: PUSH
4746: LD_INT 3
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 30
4755: PUSH
4756: LD_INT 5
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 3
4765: PUSH
4766: LD_INT 57
4768: PUSH
4769: EMPTY
4770: LIST
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: PPUSH
4782: CALL_OW 70
4786: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4787: LD_VAR 0 1
4791: PUSH
4792: LD_INT 0
4794: GREATER
4795: PUSH
4796: LD_VAR 0 2
4800: PUSH
4801: LD_INT 0
4803: GREATER
4804: AND
4805: IFFALSE 4845
// begin disable ;
4807: DISABLE
// DialogueOn ;
4808: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4812: LD_EXP 1
4816: PPUSH
4817: LD_STRING D7-JMM-1
4819: PPUSH
4820: CALL_OW 88
// DialogueOff ;
4824: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4828: LD_STRING M4
4830: PPUSH
4831: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4835: LD_INT 5
4837: PPUSH
4838: LD_INT 0
4840: PPUSH
4841: CALL_OW 424
// end ; end ;
4845: PPOPN 2
4847: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4848: LD_INT 6
4850: PPUSH
4851: LD_INT 22
4853: PUSH
4854: LD_INT 1
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 25
4863: PUSH
4864: LD_INT 4
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PPUSH
4875: CALL_OW 70
4879: PUSH
4880: LD_INT 0
4882: GREATER
4883: PUSH
4884: LD_EXP 37
4888: PUSH
4889: LD_INT 1
4891: EQUAL
4892: AND
4893: PUSH
4894: LD_EXP 29
4898: PUSH
4899: LD_INT 0
4901: EQUAL
4902: AND
4903: IFFALSE 4968
4905: GO 4907
4907: DISABLE
// begin enable ;
4908: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4909: LD_ADDR_EXP 26
4913: PUSH
4914: LD_INT 6
4916: PPUSH
4917: LD_INT 22
4919: PUSH
4920: LD_INT 1
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: LD_INT 25
4929: PUSH
4930: LD_INT 4
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: PPUSH
4941: CALL_OW 70
4945: PUSH
4946: LD_INT 1
4948: ARRAY
4949: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4950: LD_INT 6
4952: PPUSH
4953: LD_INT 0
4955: PPUSH
4956: CALL_OW 424
// radationResearched = 1 ;
4960: LD_ADDR_EXP 29
4964: PUSH
4965: LD_INT 1
4967: ST_TO_ADDR
// end ;
4968: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4969: LD_EXP 26
4973: PPUSH
4974: CALL_OW 301
4978: PUSH
4979: LD_EXP 29
4983: PUSH
4984: LD_INT 1
4986: EQUAL
4987: AND
4988: IFFALSE 5024
4990: GO 4992
4992: DISABLE
// begin enable ;
4993: ENABLE
// radationResearched = 0 ;
4994: LD_ADDR_EXP 29
4998: PUSH
4999: LD_INT 0
5001: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5002: LD_INT 6
5004: PPUSH
5005: LD_INT 1
5007: PPUSH
5008: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
5012: LD_EXP 1
5016: PPUSH
5017: LD_STRING D9a-JMM-1
5019: PPUSH
5020: CALL_OW 88
// end ; end_of_file
5024: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
5025: LD_VAR 0 5
5029: PUSH
5030: LD_INT 8
5032: EQUAL
5033: PUSH
5034: LD_EXP 35
5038: PUSH
5039: LD_INT 0
5041: EQUAL
5042: AND
5043: IFFALSE 5096
// begin eventVar1 = 1 ;
5045: LD_ADDR_EXP 35
5049: PUSH
5050: LD_INT 1
5052: ST_TO_ADDR
// DialogueOn ;
5053: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
5057: LD_EXP 1
5061: PPUSH
5062: LD_STRING D6a-JMM-1
5064: PPUSH
5065: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
5069: LD_EXP 15
5073: PPUSH
5074: LD_STRING D6a-Pow-1
5076: PPUSH
5077: CALL_OW 94
// DialogueOff ;
5081: CALL_OW 7
// wait ( 3 3$0 ) ;
5085: LD_INT 6300
5087: PPUSH
5088: CALL_OW 67
// PowellSupport ;
5092: CALL 1939 0 0
// end ; end ;
5096: PPOPN 5
5098: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5099: LD_VAR 0 1
5103: PUSH
5104: LD_EXP 1
5108: EQUAL
5109: IFFALSE 5118
// YouLost ( JMM ) ;
5111: LD_STRING JMM
5113: PPUSH
5114: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
5118: LD_VAR 0 1
5122: PPUSH
5123: CALL_OW 264
5127: PUSH
5128: LD_INT 31
5130: EQUAL
5131: IFFALSE 5147
// achivCounter := achivCounter + 1 ;
5133: LD_ADDR_EXP 41
5137: PUSH
5138: LD_EXP 41
5142: PUSH
5143: LD_INT 1
5145: PLUS
5146: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
5147: LD_VAR 0 1
5151: PPUSH
5152: CALL_OW 255
5156: PUSH
5157: LD_INT 1
5159: NONEQUAL
5160: PUSH
5161: LD_VAR 0 1
5165: PPUSH
5166: CALL_OW 247
5170: PUSH
5171: LD_INT 2
5173: EQUAL
5174: AND
5175: IFFALSE 5191
// destroyCounter := destroyCounter + 1 ;
5177: LD_ADDR_EXP 42
5181: PUSH
5182: LD_EXP 42
5186: PUSH
5187: LD_INT 1
5189: PLUS
5190: ST_TO_ADDR
// end ;
5191: PPOPN 1
5193: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
5194: LD_VAR 0 2
5198: PUSH
5199: LD_EXP 18
5203: EQUAL
5204: IFFALSE 5213
// SetAchievement ( ACH_MASHA ) ;
5206: LD_STRING ACH_MASHA
5208: PPUSH
5209: CALL_OW 543
// end ;
5213: PPOPN 4
5215: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
5216: LD_VAR 0 1
5220: PPUSH
5221: CALL_OW 264
5225: PUSH
5226: LD_INT 8
5228: EQUAL
5229: PUSH
5230: LD_EXP 36
5234: PUSH
5235: LD_INT 0
5237: EQUAL
5238: AND
5239: IFFALSE 5308
// begin eventVar2 = 1 ;
5241: LD_ADDR_EXP 36
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// DialogueOn ;
5249: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
5253: LD_EXP 1
5257: PPUSH
5258: LD_STRING D6b-JMM-1
5260: PPUSH
5261: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
5265: LD_EXP 15
5269: PPUSH
5270: LD_STRING D6b-Pow-1
5272: PPUSH
5273: CALL_OW 94
// DialogueOff ;
5277: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
5281: LD_INT 5
5283: PPUSH
5284: LD_INT 1
5286: PPUSH
5287: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
5291: LD_INT 7
5293: PPUSH
5294: LD_INT 1
5296: PPUSH
5297: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
5301: LD_STRING M3
5303: PPUSH
5304: CALL_OW 337
// end ; end ;
5308: PPOPN 2
5310: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5311: LD_VAR 0 2
5315: PPUSH
5316: LD_VAR 0 3
5320: PPUSH
5321: LD_INT 5
5323: PPUSH
5324: CALL_OW 309
5328: PUSH
5329: LD_EXP 37
5333: PUSH
5334: LD_INT 0
5336: EQUAL
5337: AND
5338: IFFALSE 5567
// begin eventVar3 = 1 ;
5340: LD_ADDR_EXP 37
5344: PUSH
5345: LD_INT 1
5347: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5348: LD_INT 175
5350: PPUSH
5351: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5355: LD_INT 7
5357: PPUSH
5358: LD_INT 22
5360: PUSH
5361: LD_INT 1
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 21
5370: PUSH
5371: LD_INT 2
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: PUSH
5378: LD_INT 34
5380: PUSH
5381: LD_INT 11
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: LIST
5392: PPUSH
5393: CALL_OW 70
5397: PUSH
5398: LD_INT 0
5400: GREATER
5401: IFFALSE 5420
// begin radarOnSpot = 1 ;
5403: LD_ADDR_EXP 30
5407: PUSH
5408: LD_INT 1
5410: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5411: LD_STRING M3a
5413: PPUSH
5414: CALL_OW 337
// end else
5418: GO 5427
// begin ChangeMissionObjectives ( M3b ) ;
5420: LD_STRING M3b
5422: PPUSH
5423: CALL_OW 337
// end ; DialogueOn ;
5427: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5431: LD_EXP 2
5435: PPUSH
5436: LD_STRING D8-Huck-1
5438: PPUSH
5439: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5443: LD_EXP 1
5447: PPUSH
5448: LD_STRING D8-JMM-1
5450: PPUSH
5451: CALL_OW 88
// if IsOk ( Stevens ) then
5455: LD_EXP 2
5459: PPUSH
5460: CALL_OW 302
5464: IFFALSE 5526
// begin Say ( Stevens , D8-Huck-2 ) ;
5466: LD_EXP 2
5470: PPUSH
5471: LD_STRING D8-Huck-2
5473: PPUSH
5474: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5478: LD_EXP 1
5482: PPUSH
5483: LD_STRING D8-JMM-2
5485: PPUSH
5486: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5490: LD_EXP 2
5494: PPUSH
5495: LD_STRING D8-Huck-3
5497: PPUSH
5498: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5502: LD_EXP 1
5506: PPUSH
5507: LD_STRING D8-JMM-3
5509: PPUSH
5510: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5514: LD_EXP 2
5518: PPUSH
5519: LD_STRING D8-Huck-4
5521: PPUSH
5522: CALL_OW 88
// end ; DialogueOff ;
5526: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5530: LD_INT 5
5532: PPUSH
5533: LD_INT 0
5535: PPUSH
5536: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5540: LD_INT 7
5542: PPUSH
5543: LD_INT 0
5545: PPUSH
5546: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5550: LD_INT 6
5552: PPUSH
5553: LD_INT 1
5555: PPUSH
5556: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5560: LD_STRING M5
5562: PPUSH
5563: CALL_OW 337
// end ; end ;
5567: PPOPN 3
5569: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5570: LD_EXP 26
5574: PPUSH
5575: CALL_OW 302
5579: PUSH
5580: LD_VAR 0 2
5584: PUSH
5585: LD_EXP 26
5589: EQUAL
5590: AND
5591: PUSH
5592: LD_EXP 38
5596: PUSH
5597: LD_INT 0
5599: EQUAL
5600: AND
5601: PUSH
5602: LD_EXP 37
5606: PUSH
5607: LD_INT 1
5609: EQUAL
5610: AND
5611: IFFALSE 5657
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5613: LD_VAR 0 1
5617: PPUSH
5618: LD_INT 1
5620: PPUSH
5621: CALL_OW 268
5625: PUSH
5626: LD_INT 11
5628: EQUAL
5629: PUSH
5630: LD_VAR 0 1
5634: PPUSH
5635: LD_INT 2
5637: PPUSH
5638: CALL_OW 268
5642: PUSH
5643: LD_INT 11
5645: EQUAL
5646: OR
5647: IFFALSE 5657
// eventVar4 = 1 ;
5649: LD_ADDR_EXP 38
5653: PUSH
5654: LD_INT 1
5656: ST_TO_ADDR
// end ;
5657: PPOPN 2
5659: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5660: LD_INT 0
5662: PPUSH
5663: PPUSH
// begin if GetNation ( unit ) = 2 then
5664: LD_VAR 0 1
5668: PPUSH
5669: CALL_OW 248
5673: PUSH
5674: LD_INT 2
5676: EQUAL
5677: IFFALSE 5955
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5679: LD_ADDR_EXP 32
5683: PUSH
5684: LD_EXP 32
5688: PUSH
5689: LD_INT 1
5691: PLUS
5692: ST_TO_ADDR
// for i := 1 to sibDeposits do
5693: LD_ADDR_VAR 0 4
5697: PUSH
5698: DOUBLE
5699: LD_INT 1
5701: DEC
5702: ST_TO_ADDR
5703: LD_EXP 31
5707: PUSH
5708: FOR_TO
5709: IFFALSE 5811
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5711: LD_EXP 31
5715: PUSH
5716: LD_VAR 0 4
5720: ARRAY
5721: PUSH
5722: LD_INT 1
5724: ARRAY
5725: PUSH
5726: LD_VAR 0 2
5730: EQUAL
5731: PUSH
5732: LD_EXP 31
5736: PUSH
5737: LD_VAR 0 4
5741: ARRAY
5742: PUSH
5743: LD_INT 2
5745: ARRAY
5746: PUSH
5747: LD_VAR 0 3
5751: EQUAL
5752: AND
5753: IFFALSE 5809
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5755: LD_ADDR_EXP 31
5759: PUSH
5760: LD_EXP 31
5764: PPUSH
5765: LD_VAR 0 4
5769: PUSH
5770: EMPTY
5771: LIST
5772: PUSH
5773: LD_INT 1
5775: ARRAY
5776: PPUSH
5777: CALL_OW 3
5781: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5782: LD_ADDR_EXP 31
5786: PUSH
5787: LD_EXP 31
5791: PPUSH
5792: LD_VAR 0 4
5796: PUSH
5797: EMPTY
5798: LIST
5799: PUSH
5800: LD_INT 2
5802: ARRAY
5803: PPUSH
5804: CALL_OW 3
5808: ST_TO_ADDR
// end ;
5809: GO 5708
5811: POP
5812: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
5813: LD_EXP 39
5817: PUSH
5818: LD_INT 0
5820: EQUAL
5821: PUSH
5822: LD_VAR 0 2
5826: PPUSH
5827: LD_VAR 0 3
5831: PPUSH
5832: CALL_OW 428
5836: PUSH
5837: LD_INT 22
5839: PUSH
5840: LD_INT 1
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PPUSH
5847: CALL_OW 69
5851: IN
5852: AND
5853: IFFALSE 5955
// begin eventVar5 = 1 ;
5855: LD_ADDR_EXP 39
5859: PUSH
5860: LD_INT 1
5862: ST_TO_ADDR
// DialogueOn ;
5863: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5867: LD_EXP 2
5871: PPUSH
5872: LD_STRING D4-Sci1-1
5874: PPUSH
5875: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5879: LD_EXP 1
5883: PPUSH
5884: LD_STRING D4-JMM-1
5886: PPUSH
5887: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5891: LD_EXP 2
5895: PPUSH
5896: LD_STRING D4-Sci1-2
5898: PPUSH
5899: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5903: LD_EXP 1
5907: PPUSH
5908: LD_STRING D4-JMM-2
5910: PPUSH
5911: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5915: LD_EXP 2
5919: PPUSH
5920: LD_STRING D4-Sci1-3
5922: PPUSH
5923: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5927: LD_EXP 1
5931: PPUSH
5932: LD_STRING D4-JMM-3
5934: PPUSH
5935: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5939: LD_EXP 1
5943: PPUSH
5944: LD_STRING D4-JMM-3a
5946: PPUSH
5947: CALL_OW 88
// DialogueOff ;
5951: CALL_OW 7
// end ; end ; end ;
5955: PPOPN 5
5957: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
5958: LD_VAR 0 1
5962: PPUSH
5963: CALL_OW 255
5967: PUSH
5968: LD_INT 1
5970: EQUAL
5971: PUSH
5972: LD_VAR 0 1
5976: PPUSH
5977: CALL_OW 266
5981: PUSH
5982: LD_INT 0
5984: EQUAL
5985: AND
5986: PUSH
5987: LD_INT 22
5989: PUSH
5990: LD_INT 1
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PUSH
5997: LD_INT 21
5999: PUSH
6000: LD_INT 3
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: PUSH
6007: LD_INT 2
6009: PUSH
6010: LD_INT 30
6012: PUSH
6013: LD_INT 0
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: PUSH
6020: LD_INT 30
6022: PUSH
6023: LD_INT 1
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: LIST
6039: PPUSH
6040: CALL_OW 69
6044: PUSH
6045: LD_INT 1
6047: EQUAL
6048: AND
6049: IFFALSE 6063
// SetBName ( building , omega ) ;
6051: LD_VAR 0 1
6055: PPUSH
6056: LD_STRING omega
6058: PPUSH
6059: CALL_OW 500
// end ;
6063: PPOPN 2
6065: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6066: LD_VAR 0 1
6070: PPUSH
6071: CALL 26378 0 1
// end ; end_of_file
6075: PPOPN 1
6077: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6078: LD_INT 0
6080: PPUSH
6081: PPUSH
6082: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6083: LD_ADDR_VAR 0 1
6087: PUSH
6088: LD_VAR 0 1
6092: PUSH
6093: LD_EXP 1
6097: PUSH
6098: LD_EXP 2
6102: PUSH
6103: LD_EXP 3
6107: PUSH
6108: LD_EXP 4
6112: PUSH
6113: LD_EXP 5
6117: PUSH
6118: LD_EXP 6
6122: PUSH
6123: LD_EXP 7
6127: PUSH
6128: LD_EXP 8
6132: PUSH
6133: LD_EXP 9
6137: PUSH
6138: LD_EXP 10
6142: PUSH
6143: LD_EXP 11
6147: PUSH
6148: LD_EXP 12
6152: PUSH
6153: LD_EXP 13
6157: PUSH
6158: LD_EXP 14
6162: PUSH
6163: LD_EXP 15
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: DIFF
6185: ST_TO_ADDR
// if not characters then
6186: LD_VAR 0 1
6190: NOT
6191: IFFALSE 6195
// exit ;
6193: GO 6274
// speaker := characters [ rand ( 1 , characters ) ] ;
6195: LD_ADDR_VAR 0 6
6199: PUSH
6200: LD_VAR 0 1
6204: PUSH
6205: LD_INT 1
6207: PPUSH
6208: LD_VAR 0 1
6212: PPUSH
6213: CALL_OW 12
6217: ARRAY
6218: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6219: LD_VAR 0 6
6223: PPUSH
6224: CALL_OW 258
6228: PUSH
6229: LD_INT 1
6231: EQUAL
6232: IFFALSE 6250
// Say ( speaker , dialogMID ) else
6234: LD_VAR 0 6
6238: PPUSH
6239: LD_VAR 0 2
6243: PPUSH
6244: CALL_OW 88
6248: GO 6264
// Say ( speaker , dialogFID ) ;
6250: LD_VAR 0 6
6254: PPUSH
6255: LD_VAR 0 3
6259: PPUSH
6260: CALL_OW 88
// result := speaker ;
6264: LD_ADDR_VAR 0 4
6268: PUSH
6269: LD_VAR 0 6
6273: ST_TO_ADDR
// end ;
6274: LD_VAR 0 4
6278: RET
// export function PrepareDifficulty ; begin
6279: LD_INT 0
6281: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6282: LD_INT 5
6284: PPUSH
6285: LD_INT 8
6287: PPUSH
6288: LD_INT 2
6290: PPUSH
6291: CALL_OW 322
// if difficulty = 1 then
6295: LD_OWVAR 67
6299: PUSH
6300: LD_INT 1
6302: EQUAL
6303: IFFALSE 6422
// begin SetTech ( 66 , 8 , state_researched ) ;
6305: LD_INT 66
6307: PPUSH
6308: LD_INT 8
6310: PPUSH
6311: LD_INT 2
6313: PPUSH
6314: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6318: LD_INT 67
6320: PPUSH
6321: LD_INT 8
6323: PPUSH
6324: LD_INT 0
6326: PPUSH
6327: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6331: LD_INT 68
6333: PPUSH
6334: LD_INT 8
6336: PPUSH
6337: LD_INT 0
6339: PPUSH
6340: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6344: LD_INT 51
6346: PPUSH
6347: LD_INT 8
6349: PPUSH
6350: LD_INT 2
6352: PPUSH
6353: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6357: LD_INT 52
6359: PPUSH
6360: LD_INT 8
6362: PPUSH
6363: LD_INT 0
6365: PPUSH
6366: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6370: LD_INT 53
6372: PPUSH
6373: LD_INT 8
6375: PPUSH
6376: LD_INT 0
6378: PPUSH
6379: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6383: LD_INT 60
6385: PPUSH
6386: LD_INT 8
6388: PPUSH
6389: LD_INT 2
6391: PPUSH
6392: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6396: LD_INT 61
6398: PPUSH
6399: LD_INT 8
6401: PPUSH
6402: LD_INT 0
6404: PPUSH
6405: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6409: LD_INT 62
6411: PPUSH
6412: LD_INT 8
6414: PPUSH
6415: LD_INT 0
6417: PPUSH
6418: CALL_OW 322
// end ; if difficulty = 2 then
6422: LD_OWVAR 67
6426: PUSH
6427: LD_INT 2
6429: EQUAL
6430: IFFALSE 6549
// begin SetTech ( 66 , 8 , state_researched ) ;
6432: LD_INT 66
6434: PPUSH
6435: LD_INT 8
6437: PPUSH
6438: LD_INT 2
6440: PPUSH
6441: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6445: LD_INT 67
6447: PPUSH
6448: LD_INT 8
6450: PPUSH
6451: LD_INT 2
6453: PPUSH
6454: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6458: LD_INT 68
6460: PPUSH
6461: LD_INT 8
6463: PPUSH
6464: LD_INT 0
6466: PPUSH
6467: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6471: LD_INT 51
6473: PPUSH
6474: LD_INT 8
6476: PPUSH
6477: LD_INT 2
6479: PPUSH
6480: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6484: LD_INT 52
6486: PPUSH
6487: LD_INT 8
6489: PPUSH
6490: LD_INT 2
6492: PPUSH
6493: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6497: LD_INT 53
6499: PPUSH
6500: LD_INT 8
6502: PPUSH
6503: LD_INT 2
6505: PPUSH
6506: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6510: LD_INT 60
6512: PPUSH
6513: LD_INT 8
6515: PPUSH
6516: LD_INT 2
6518: PPUSH
6519: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6523: LD_INT 61
6525: PPUSH
6526: LD_INT 8
6528: PPUSH
6529: LD_INT 2
6531: PPUSH
6532: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6536: LD_INT 62
6538: PPUSH
6539: LD_INT 8
6541: PPUSH
6542: LD_INT 0
6544: PPUSH
6545: CALL_OW 322
// end ; if difficulty >= 3 then
6549: LD_OWVAR 67
6553: PUSH
6554: LD_INT 3
6556: GREATEREQUAL
6557: IFFALSE 6676
// begin SetTech ( 66 , 8 , state_researched ) ;
6559: LD_INT 66
6561: PPUSH
6562: LD_INT 8
6564: PPUSH
6565: LD_INT 2
6567: PPUSH
6568: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6572: LD_INT 67
6574: PPUSH
6575: LD_INT 8
6577: PPUSH
6578: LD_INT 2
6580: PPUSH
6581: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6585: LD_INT 68
6587: PPUSH
6588: LD_INT 8
6590: PPUSH
6591: LD_INT 0
6593: PPUSH
6594: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6598: LD_INT 51
6600: PPUSH
6601: LD_INT 8
6603: PPUSH
6604: LD_INT 2
6606: PPUSH
6607: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6611: LD_INT 52
6613: PPUSH
6614: LD_INT 8
6616: PPUSH
6617: LD_INT 2
6619: PPUSH
6620: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6624: LD_INT 53
6626: PPUSH
6627: LD_INT 8
6629: PPUSH
6630: LD_INT 2
6632: PPUSH
6633: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6637: LD_INT 60
6639: PPUSH
6640: LD_INT 8
6642: PPUSH
6643: LD_INT 2
6645: PPUSH
6646: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6650: LD_INT 61
6652: PPUSH
6653: LD_INT 8
6655: PPUSH
6656: LD_INT 2
6658: PPUSH
6659: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6663: LD_INT 62
6665: PPUSH
6666: LD_INT 8
6668: PPUSH
6669: LD_INT 0
6671: PPUSH
6672: CALL_OW 322
// end ; end ;
6676: LD_VAR 0 1
6680: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6681: LD_INT 0
6683: PPUSH
6684: PPUSH
6685: PPUSH
6686: PPUSH
6687: PPUSH
6688: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6689: LD_ADDR_VAR 0 7
6693: PUSH
6694: LD_INT 22
6696: PUSH
6697: LD_VAR 0 1
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PUSH
6706: LD_INT 25
6708: PUSH
6709: LD_INT 9
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PPUSH
6720: CALL_OW 69
6724: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6725: LD_ADDR_VAR 0 8
6729: PUSH
6730: LD_INT 22
6732: PUSH
6733: LD_VAR 0 2
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: PUSH
6742: LD_INT 3
6744: PUSH
6745: LD_INT 21
6747: PUSH
6748: LD_INT 3
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: PPUSH
6763: CALL_OW 69
6767: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6768: LD_ADDR_VAR 0 5
6772: PUSH
6773: LD_INT 1
6775: PPUSH
6776: LD_INT 3
6778: PPUSH
6779: CALL_OW 12
6783: ST_TO_ADDR
// for i = 1 to list do
6784: LD_ADDR_VAR 0 6
6788: PUSH
6789: DOUBLE
6790: LD_INT 1
6792: DEC
6793: ST_TO_ADDR
6794: LD_VAR 0 7
6798: PUSH
6799: FOR_TO
6800: IFFALSE 6982
// for ta in filter do
6802: LD_ADDR_VAR 0 4
6806: PUSH
6807: LD_VAR 0 8
6811: PUSH
6812: FOR_IN
6813: IFFALSE 6978
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6815: LD_VAR 0 7
6819: PUSH
6820: LD_VAR 0 6
6824: ARRAY
6825: PPUSH
6826: LD_VAR 0 4
6830: PPUSH
6831: CALL_OW 296
6835: PUSH
6836: LD_INT 13
6838: LESSEQUAL
6839: IFFALSE 6976
// begin case c of 1 :
6841: LD_VAR 0 5
6845: PUSH
6846: LD_INT 1
6848: DOUBLE
6849: EQUAL
6850: IFTRUE 6854
6852: GO 6892
6854: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
6855: LD_VAR 0 7
6859: PUSH
6860: LD_VAR 0 6
6864: ARRAY
6865: PPUSH
6866: LD_VAR 0 4
6870: PPUSH
6871: CALL_OW 250
6875: PPUSH
6876: LD_VAR 0 4
6880: PPUSH
6881: CALL_OW 251
6885: PPUSH
6886: CALL_OW 154
6890: GO 6976
6892: LD_INT 2
6894: DOUBLE
6895: EQUAL
6896: IFTRUE 6900
6898: GO 6964
6900: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
6901: LD_VAR 0 7
6905: PUSH
6906: LD_VAR 0 6
6910: ARRAY
6911: PPUSH
6912: LD_VAR 0 4
6916: PPUSH
6917: CALL_OW 250
6921: PUSH
6922: LD_INT 1
6924: NEG
6925: PPUSH
6926: LD_INT 1
6928: PPUSH
6929: CALL_OW 12
6933: PLUS
6934: PPUSH
6935: LD_VAR 0 4
6939: PPUSH
6940: CALL_OW 251
6944: PUSH
6945: LD_INT 1
6947: NEG
6948: PPUSH
6949: LD_INT 1
6951: PPUSH
6952: CALL_OW 12
6956: PLUS
6957: PPUSH
6958: CALL_OW 153
6962: GO 6976
6964: LD_INT 3
6966: DOUBLE
6967: EQUAL
6968: IFTRUE 6972
6970: GO 6975
6972: POP
// ; end ;
6973: GO 6976
6975: POP
// end ; end ;
6976: GO 6812
6978: POP
6979: POP
6980: GO 6799
6982: POP
6983: POP
// end ;
6984: LD_VAR 0 3
6988: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6989: LD_INT 0
6991: PPUSH
6992: PPUSH
// for i in charactersList do
6993: LD_ADDR_VAR 0 4
6997: PUSH
6998: LD_VAR 0 1
7002: PUSH
7003: FOR_IN
7004: IFFALSE 7022
// SaveCharacters ( i , ident ) ;
7006: LD_VAR 0 4
7010: PPUSH
7011: LD_VAR 0 2
7015: PPUSH
7016: CALL_OW 38
7020: GO 7003
7022: POP
7023: POP
// end ;
7024: LD_VAR 0 3
7028: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7029: LD_INT 0
7031: PPUSH
7032: PPUSH
7033: PPUSH
7034: PPUSH
7035: PPUSH
7036: PPUSH
7037: PPUSH
7038: PPUSH
7039: PPUSH
7040: PPUSH
7041: PPUSH
// for i = 1 to medicCount do
7042: LD_ADDR_VAR 0 13
7046: PUSH
7047: DOUBLE
7048: LD_INT 1
7050: DEC
7051: ST_TO_ADDR
7052: LD_VAR 0 7
7056: PUSH
7057: FOR_TO
7058: IFFALSE 7140
// begin uc_side = side ;
7060: LD_ADDR_OWVAR 20
7064: PUSH
7065: LD_VAR 0 1
7069: ST_TO_ADDR
// uc_nation = nation ;
7070: LD_ADDR_OWVAR 21
7074: PUSH
7075: LD_VAR 0 2
7079: ST_TO_ADDR
// hc_name =  ;
7080: LD_ADDR_OWVAR 26
7084: PUSH
7085: LD_STRING 
7087: ST_TO_ADDR
// hc_gallery =  ;
7088: LD_ADDR_OWVAR 33
7092: PUSH
7093: LD_STRING 
7095: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7096: LD_INT 0
7098: PPUSH
7099: LD_INT 4
7101: PPUSH
7102: LD_VAR 0 8
7106: PPUSH
7107: CALL_OW 380
// un = CreateHuman ;
7111: LD_ADDR_VAR 0 15
7115: PUSH
7116: CALL_OW 44
7120: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7121: LD_VAR 0 15
7125: PPUSH
7126: LD_VAR 0 9
7130: PPUSH
7131: LD_INT 0
7133: PPUSH
7134: CALL_OW 49
// end ;
7138: GO 7057
7140: POP
7141: POP
// for i = 1 to soldierCount do
7142: LD_ADDR_VAR 0 13
7146: PUSH
7147: DOUBLE
7148: LD_INT 1
7150: DEC
7151: ST_TO_ADDR
7152: LD_VAR 0 3
7156: PUSH
7157: FOR_TO
7158: IFFALSE 7240
// begin uc_side = side ;
7160: LD_ADDR_OWVAR 20
7164: PUSH
7165: LD_VAR 0 1
7169: ST_TO_ADDR
// uc_nation = nation ;
7170: LD_ADDR_OWVAR 21
7174: PUSH
7175: LD_VAR 0 2
7179: ST_TO_ADDR
// hc_name =  ;
7180: LD_ADDR_OWVAR 26
7184: PUSH
7185: LD_STRING 
7187: ST_TO_ADDR
// hc_gallery =  ;
7188: LD_ADDR_OWVAR 33
7192: PUSH
7193: LD_STRING 
7195: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7196: LD_INT 0
7198: PPUSH
7199: LD_INT 1
7201: PPUSH
7202: LD_VAR 0 8
7206: PPUSH
7207: CALL_OW 380
// un = CreateHuman ;
7211: LD_ADDR_VAR 0 15
7215: PUSH
7216: CALL_OW 44
7220: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7221: LD_VAR 0 15
7225: PPUSH
7226: LD_VAR 0 9
7230: PPUSH
7231: LD_INT 0
7233: PPUSH
7234: CALL_OW 49
// end ;
7238: GO 7157
7240: POP
7241: POP
// for i = 1 to sniperCount do
7242: LD_ADDR_VAR 0 13
7246: PUSH
7247: DOUBLE
7248: LD_INT 1
7250: DEC
7251: ST_TO_ADDR
7252: LD_VAR 0 4
7256: PUSH
7257: FOR_TO
7258: IFFALSE 7340
// begin uc_side = side ;
7260: LD_ADDR_OWVAR 20
7264: PUSH
7265: LD_VAR 0 1
7269: ST_TO_ADDR
// uc_nation = nation ;
7270: LD_ADDR_OWVAR 21
7274: PUSH
7275: LD_VAR 0 2
7279: ST_TO_ADDR
// hc_name =  ;
7280: LD_ADDR_OWVAR 26
7284: PUSH
7285: LD_STRING 
7287: ST_TO_ADDR
// hc_gallery =  ;
7288: LD_ADDR_OWVAR 33
7292: PUSH
7293: LD_STRING 
7295: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7296: LD_INT 0
7298: PPUSH
7299: LD_INT 5
7301: PPUSH
7302: LD_VAR 0 8
7306: PPUSH
7307: CALL_OW 380
// un = CreateHuman ;
7311: LD_ADDR_VAR 0 15
7315: PUSH
7316: CALL_OW 44
7320: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7321: LD_VAR 0 15
7325: PPUSH
7326: LD_VAR 0 9
7330: PPUSH
7331: LD_INT 0
7333: PPUSH
7334: CALL_OW 49
// end ;
7338: GO 7257
7340: POP
7341: POP
// for i = 1 to bazookCount do
7342: LD_ADDR_VAR 0 13
7346: PUSH
7347: DOUBLE
7348: LD_INT 1
7350: DEC
7351: ST_TO_ADDR
7352: LD_VAR 0 5
7356: PUSH
7357: FOR_TO
7358: IFFALSE 7440
// begin uc_side = side ;
7360: LD_ADDR_OWVAR 20
7364: PUSH
7365: LD_VAR 0 1
7369: ST_TO_ADDR
// uc_nation = nation ;
7370: LD_ADDR_OWVAR 21
7374: PUSH
7375: LD_VAR 0 2
7379: ST_TO_ADDR
// hc_name =  ;
7380: LD_ADDR_OWVAR 26
7384: PUSH
7385: LD_STRING 
7387: ST_TO_ADDR
// hc_gallery =  ;
7388: LD_ADDR_OWVAR 33
7392: PUSH
7393: LD_STRING 
7395: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7396: LD_INT 0
7398: PPUSH
7399: LD_INT 9
7401: PPUSH
7402: LD_VAR 0 8
7406: PPUSH
7407: CALL_OW 380
// un = CreateHuman ;
7411: LD_ADDR_VAR 0 15
7415: PUSH
7416: CALL_OW 44
7420: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7421: LD_VAR 0 15
7425: PPUSH
7426: LD_VAR 0 9
7430: PPUSH
7431: LD_INT 0
7433: PPUSH
7434: CALL_OW 49
// end ;
7438: GO 7357
7440: POP
7441: POP
// for i = 1 to mortalCount do
7442: LD_ADDR_VAR 0 13
7446: PUSH
7447: DOUBLE
7448: LD_INT 1
7450: DEC
7451: ST_TO_ADDR
7452: LD_VAR 0 6
7456: PUSH
7457: FOR_TO
7458: IFFALSE 7540
// begin uc_side = side ;
7460: LD_ADDR_OWVAR 20
7464: PUSH
7465: LD_VAR 0 1
7469: ST_TO_ADDR
// uc_nation = nation ;
7470: LD_ADDR_OWVAR 21
7474: PUSH
7475: LD_VAR 0 2
7479: ST_TO_ADDR
// hc_name =  ;
7480: LD_ADDR_OWVAR 26
7484: PUSH
7485: LD_STRING 
7487: ST_TO_ADDR
// hc_gallery =  ;
7488: LD_ADDR_OWVAR 33
7492: PUSH
7493: LD_STRING 
7495: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7496: LD_INT 0
7498: PPUSH
7499: LD_INT 8
7501: PPUSH
7502: LD_VAR 0 8
7506: PPUSH
7507: CALL_OW 380
// un = CreateHuman ;
7511: LD_ADDR_VAR 0 15
7515: PUSH
7516: CALL_OW 44
7520: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7521: LD_VAR 0 15
7525: PPUSH
7526: LD_VAR 0 9
7530: PPUSH
7531: LD_INT 0
7533: PPUSH
7534: CALL_OW 49
// end ;
7538: GO 7457
7540: POP
7541: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7542: LD_ADDR_VAR 0 17
7546: PUSH
7547: LD_INT 22
7549: PUSH
7550: LD_VAR 0 1
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: PUSH
7559: LD_INT 25
7561: PUSH
7562: LD_INT 4
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PPUSH
7573: CALL_OW 69
7577: ST_TO_ADDR
// for i in medic_list do
7578: LD_ADDR_VAR 0 13
7582: PUSH
7583: LD_VAR 0 17
7587: PUSH
7588: FOR_IN
7589: IFFALSE 7624
// if GetTag ( i ) = 1 then
7591: LD_VAR 0 13
7595: PPUSH
7596: CALL_OW 110
7600: PUSH
7601: LD_INT 1
7603: EQUAL
7604: IFFALSE 7622
// medic_list := medic_list diff i ;
7606: LD_ADDR_VAR 0 17
7610: PUSH
7611: LD_VAR 0 17
7615: PUSH
7616: LD_VAR 0 13
7620: DIFF
7621: ST_TO_ADDR
7622: GO 7588
7624: POP
7625: POP
// for i in medic_list do
7626: LD_ADDR_VAR 0 13
7630: PUSH
7631: LD_VAR 0 17
7635: PUSH
7636: FOR_IN
7637: IFFALSE 7655
// ComMoveToArea ( i , healArea ) ;
7639: LD_VAR 0 13
7643: PPUSH
7644: LD_VAR 0 10
7648: PPUSH
7649: CALL_OW 113
7653: GO 7636
7655: POP
7656: POP
// repeat wait ( 0 0$1 ) ;
7657: LD_INT 35
7659: PPUSH
7660: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7664: LD_ADDR_VAR 0 16
7668: PUSH
7669: LD_INT 22
7671: PUSH
7672: LD_VAR 0 1
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: LD_INT 1
7683: PUSH
7684: LD_INT 3
7686: PUSH
7687: LD_INT 24
7689: PUSH
7690: LD_INT 550
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_INT 24
7703: PUSH
7704: LD_INT 250
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PUSH
7711: EMPTY
7712: LIST
7713: LIST
7714: LIST
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PPUSH
7720: CALL_OW 69
7724: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7725: LD_ADDR_VAR 0 18
7729: PUSH
7730: LD_INT 22
7732: PUSH
7733: LD_VAR 0 1
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: PUSH
7742: LD_INT 2
7744: PUSH
7745: LD_INT 25
7747: PUSH
7748: LD_INT 1
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PUSH
7755: LD_INT 25
7757: PUSH
7758: LD_INT 5
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PUSH
7765: LD_INT 25
7767: PUSH
7768: LD_INT 8
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PUSH
7775: LD_INT 25
7777: PUSH
7778: LD_INT 9
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 24
7794: PUSH
7795: LD_INT 1000
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: LIST
7806: PPUSH
7807: CALL_OW 69
7811: ST_TO_ADDR
// if medicCount > 0 then
7812: LD_VAR 0 7
7816: PUSH
7817: LD_INT 0
7819: GREATER
7820: IFFALSE 7894
// begin if damageUnit_list > 0 then
7822: LD_VAR 0 16
7826: PUSH
7827: LD_INT 0
7829: GREATER
7830: IFFALSE 7894
// begin for i in damageUnit_list do
7832: LD_ADDR_VAR 0 13
7836: PUSH
7837: LD_VAR 0 16
7841: PUSH
7842: FOR_IN
7843: IFFALSE 7892
// begin ComMoveToArea ( i , healArea ) ;
7845: LD_VAR 0 13
7849: PPUSH
7850: LD_VAR 0 10
7854: PPUSH
7855: CALL_OW 113
// for j in medic_list do
7859: LD_ADDR_VAR 0 14
7863: PUSH
7864: LD_VAR 0 17
7868: PUSH
7869: FOR_IN
7870: IFFALSE 7888
// AddComHeal ( j , i ) ;
7872: LD_VAR 0 14
7876: PPUSH
7877: LD_VAR 0 13
7881: PPUSH
7882: CALL_OW 188
7886: GO 7869
7888: POP
7889: POP
// end ;
7890: GO 7842
7892: POP
7893: POP
// end ; end ; for i in soldiersOK_list do
7894: LD_ADDR_VAR 0 13
7898: PUSH
7899: LD_VAR 0 18
7903: PUSH
7904: FOR_IN
7905: IFFALSE 8081
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7907: LD_ADDR_VAR 0 21
7911: PUSH
7912: LD_INT 22
7914: PUSH
7915: LD_VAR 0 11
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PPUSH
7924: CALL_OW 69
7928: PPUSH
7929: LD_VAR 0 13
7933: PPUSH
7934: CALL_OW 74
7938: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7939: LD_ADDR_VAR 0 22
7943: PUSH
7944: LD_INT 22
7946: PUSH
7947: LD_VAR 0 11
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: LD_INT 2
7958: PUSH
7959: LD_INT 59
7961: PUSH
7962: EMPTY
7963: LIST
7964: PUSH
7965: LD_INT 21
7967: PUSH
7968: LD_INT 1
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 21
7977: PUSH
7978: LD_INT 2
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: PUSH
7995: EMPTY
7996: LIST
7997: PPUSH
7998: CALL_OW 69
8002: PPUSH
8003: LD_VAR 0 13
8007: PPUSH
8008: CALL_OW 74
8012: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8013: LD_VAR 0 13
8017: PPUSH
8018: LD_VAR 0 21
8022: PPUSH
8023: CALL_OW 296
8027: PUSH
8028: LD_INT 8
8030: PLUS
8031: PUSH
8032: LD_VAR 0 13
8036: PPUSH
8037: LD_VAR 0 22
8041: PPUSH
8042: CALL_OW 296
8046: LESS
8047: IFFALSE 8065
// begin ComAttackUnit ( i , target1 ) ;
8049: LD_VAR 0 13
8053: PPUSH
8054: LD_VAR 0 21
8058: PPUSH
8059: CALL_OW 115
// end else
8063: GO 8079
// begin ComAttackUnit ( i , target2 ) ;
8065: LD_VAR 0 13
8069: PPUSH
8070: LD_VAR 0 22
8074: PPUSH
8075: CALL_OW 115
// end ; end ;
8079: GO 7904
8081: POP
8082: POP
// until soldiersOK_list = [ ] ;
8083: LD_VAR 0 18
8087: PUSH
8088: EMPTY
8089: EQUAL
8090: IFFALSE 7657
// end ;
8092: LD_VAR 0 12
8096: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8097: LD_INT 0
8099: PPUSH
8100: PPUSH
8101: PPUSH
8102: PPUSH
8103: PPUSH
8104: PPUSH
8105: PPUSH
8106: PPUSH
8107: PPUSH
8108: PPUSH
8109: PPUSH
// amChassisTab = [ ] ;
8110: LD_ADDR_VAR 0 19
8114: PUSH
8115: EMPTY
8116: ST_TO_ADDR
// arChassisTab = [ ] ;
8117: LD_ADDR_VAR 0 18
8121: PUSH
8122: EMPTY
8123: ST_TO_ADDR
// ruChassisTab = [ ] ;
8124: LD_ADDR_VAR 0 17
8128: PUSH
8129: EMPTY
8130: ST_TO_ADDR
// for i = 1 to vehCount do
8131: LD_ADDR_VAR 0 13
8135: PUSH
8136: DOUBLE
8137: LD_INT 1
8139: DEC
8140: ST_TO_ADDR
8141: LD_VAR 0 3
8145: PUSH
8146: FOR_TO
8147: IFFALSE 9571
// begin wait ( 0 0$01 ) ;
8149: LD_INT 35
8151: PPUSH
8152: CALL_OW 67
// if nation = 1 then
8156: LD_VAR 0 5
8160: PUSH
8161: LD_INT 1
8163: EQUAL
8164: IFFALSE 8645
// begin uc_side = side ;
8166: LD_ADDR_OWVAR 20
8170: PUSH
8171: LD_VAR 0 2
8175: ST_TO_ADDR
// uc_nation = nation ;
8176: LD_ADDR_OWVAR 21
8180: PUSH
8181: LD_VAR 0 5
8185: ST_TO_ADDR
// vc_engine = vehengine ;
8186: LD_ADDR_OWVAR 39
8190: PUSH
8191: LD_VAR 0 6
8195: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8196: LD_ADDR_OWVAR 40
8200: PUSH
8201: LD_VAR 0 10
8205: PUSH
8206: LD_INT 1
8208: PPUSH
8209: LD_VAR 0 10
8213: PPUSH
8214: CALL_OW 12
8218: ARRAY
8219: ST_TO_ADDR
// for j = 1 to AMWeapon do
8220: LD_ADDR_VAR 0 14
8224: PUSH
8225: DOUBLE
8226: LD_INT 1
8228: DEC
8229: ST_TO_ADDR
8230: LD_VAR 0 10
8234: PUSH
8235: FOR_TO
8236: IFFALSE 8537
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8238: LD_VAR 0 10
8242: PUSH
8243: LD_VAR 0 14
8247: ARRAY
8248: PUSH
8249: LD_INT 2
8251: EQUAL
8252: PUSH
8253: LD_VAR 0 10
8257: PUSH
8258: LD_VAR 0 14
8262: ARRAY
8263: PUSH
8264: LD_INT 3
8266: EQUAL
8267: OR
8268: IFFALSE 8321
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8270: LD_ADDR_VAR 0 19
8274: PUSH
8275: LD_INT 1
8277: PUSH
8278: LD_INT 2
8280: PUSH
8281: LD_INT 3
8283: PUSH
8284: LD_INT 4
8286: PUSH
8287: LD_INT 5
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8297: LD_ADDR_OWVAR 37
8301: PUSH
8302: LD_VAR 0 19
8306: PUSH
8307: LD_INT 1
8309: PPUSH
8310: LD_VAR 0 19
8314: PPUSH
8315: CALL_OW 12
8319: ARRAY
8320: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8321: LD_VAR 0 10
8325: PUSH
8326: LD_VAR 0 14
8330: ARRAY
8331: PUSH
8332: LD_INT 4
8334: EQUAL
8335: PUSH
8336: LD_VAR 0 10
8340: PUSH
8341: LD_VAR 0 14
8345: ARRAY
8346: PUSH
8347: LD_INT 5
8349: EQUAL
8350: OR
8351: PUSH
8352: LD_VAR 0 10
8356: PUSH
8357: LD_VAR 0 14
8361: ARRAY
8362: PUSH
8363: LD_INT 9
8365: EQUAL
8366: OR
8367: PUSH
8368: LD_VAR 0 10
8372: PUSH
8373: LD_VAR 0 14
8377: ARRAY
8378: PUSH
8379: LD_INT 11
8381: EQUAL
8382: OR
8383: PUSH
8384: LD_VAR 0 10
8388: PUSH
8389: LD_VAR 0 14
8393: ARRAY
8394: PUSH
8395: LD_INT 7
8397: EQUAL
8398: OR
8399: IFFALSE 8448
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8401: LD_ADDR_VAR 0 19
8405: PUSH
8406: LD_INT 2
8408: PUSH
8409: LD_INT 3
8411: PUSH
8412: LD_INT 4
8414: PUSH
8415: LD_INT 5
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8424: LD_ADDR_OWVAR 37
8428: PUSH
8429: LD_VAR 0 19
8433: PUSH
8434: LD_INT 1
8436: PPUSH
8437: LD_VAR 0 19
8441: PPUSH
8442: CALL_OW 12
8446: ARRAY
8447: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8448: LD_VAR 0 10
8452: PUSH
8453: LD_VAR 0 14
8457: ARRAY
8458: PUSH
8459: LD_INT 8
8461: EQUAL
8462: PUSH
8463: LD_VAR 0 10
8467: PUSH
8468: LD_VAR 0 14
8472: ARRAY
8473: PUSH
8474: LD_INT 6
8476: EQUAL
8477: OR
8478: PUSH
8479: LD_VAR 0 10
8483: PUSH
8484: LD_VAR 0 14
8488: ARRAY
8489: PUSH
8490: LD_INT 10
8492: EQUAL
8493: OR
8494: IFFALSE 8535
// begin amChassisTab = [ 4 , 5 ] ;
8496: LD_ADDR_VAR 0 19
8500: PUSH
8501: LD_INT 4
8503: PUSH
8504: LD_INT 5
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8511: LD_ADDR_OWVAR 37
8515: PUSH
8516: LD_VAR 0 19
8520: PUSH
8521: LD_INT 1
8523: PPUSH
8524: LD_VAR 0 19
8528: PPUSH
8529: CALL_OW 12
8533: ARRAY
8534: ST_TO_ADDR
// end ; end ;
8535: GO 8235
8537: POP
8538: POP
// veh = CreateVehicle ;
8539: LD_ADDR_VAR 0 16
8543: PUSH
8544: CALL_OW 45
8548: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8549: LD_VAR 0 16
8553: PPUSH
8554: LD_VAR 0 1
8558: PPUSH
8559: LD_INT 0
8561: PPUSH
8562: CALL_OW 49
// if vc_control = 1 then
8566: LD_OWVAR 38
8570: PUSH
8571: LD_INT 1
8573: EQUAL
8574: IFFALSE 8631
// begin hc_gallery =  ;
8576: LD_ADDR_OWVAR 33
8580: PUSH
8581: LD_STRING 
8583: ST_TO_ADDR
// hc_name =  ;
8584: LD_ADDR_OWVAR 26
8588: PUSH
8589: LD_STRING 
8591: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8592: LD_INT 0
8594: PPUSH
8595: LD_INT 3
8597: PPUSH
8598: LD_VAR 0 4
8602: PPUSH
8603: CALL_OW 380
// un = CreateHuman ;
8607: LD_ADDR_VAR 0 15
8611: PUSH
8612: CALL_OW 44
8616: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8617: LD_VAR 0 15
8621: PPUSH
8622: LD_VAR 0 16
8626: PPUSH
8627: CALL_OW 52
// end ; i = i + 1 ;
8631: LD_ADDR_VAR 0 13
8635: PUSH
8636: LD_VAR 0 13
8640: PUSH
8641: LD_INT 1
8643: PLUS
8644: ST_TO_ADDR
// end ; if nation = 2 then
8645: LD_VAR 0 5
8649: PUSH
8650: LD_INT 2
8652: EQUAL
8653: IFFALSE 9155
// begin uc_side = side ;
8655: LD_ADDR_OWVAR 20
8659: PUSH
8660: LD_VAR 0 2
8664: ST_TO_ADDR
// uc_nation = nation ;
8665: LD_ADDR_OWVAR 21
8669: PUSH
8670: LD_VAR 0 5
8674: ST_TO_ADDR
// vc_engine = vehengine ;
8675: LD_ADDR_OWVAR 39
8679: PUSH
8680: LD_VAR 0 6
8684: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8685: LD_INT 22
8687: PUSH
8688: LD_VAR 0 2
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: LD_INT 21
8699: PUSH
8700: LD_INT 2
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PUSH
8707: LD_INT 33
8709: PUSH
8710: LD_INT 2
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PUSH
8717: LD_INT 50
8719: PUSH
8720: EMPTY
8721: LIST
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: PPUSH
8729: CALL_OW 69
8733: PUSH
8734: LD_INT 8
8736: LESSEQUAL
8737: IFFALSE 8765
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8739: LD_ADDR_OWVAR 38
8743: PUSH
8744: LD_VAR 0 7
8748: PUSH
8749: LD_INT 1
8751: PPUSH
8752: LD_VAR 0 7
8756: PPUSH
8757: CALL_OW 12
8761: ARRAY
8762: ST_TO_ADDR
8763: GO 8773
// vc_control = control_apeman ;
8765: LD_ADDR_OWVAR 38
8769: PUSH
8770: LD_INT 5
8772: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8773: LD_ADDR_OWVAR 40
8777: PUSH
8778: LD_VAR 0 9
8782: PUSH
8783: LD_INT 1
8785: PPUSH
8786: LD_VAR 0 9
8790: PPUSH
8791: CALL_OW 12
8795: ARRAY
8796: ST_TO_ADDR
// for j = 1 to ARWeapons do
8797: LD_ADDR_VAR 0 14
8801: PUSH
8802: DOUBLE
8803: LD_INT 1
8805: DEC
8806: ST_TO_ADDR
8807: LD_VAR 0 9
8811: PUSH
8812: FOR_TO
8813: IFFALSE 9047
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8815: LD_VAR 0 9
8819: PUSH
8820: LD_VAR 0 14
8824: ARRAY
8825: PUSH
8826: LD_INT 24
8828: EQUAL
8829: PUSH
8830: LD_VAR 0 9
8834: PUSH
8835: LD_VAR 0 14
8839: ARRAY
8840: PUSH
8841: LD_INT 22
8843: EQUAL
8844: OR
8845: PUSH
8846: LD_VAR 0 9
8850: PUSH
8851: LD_VAR 0 14
8855: ARRAY
8856: PUSH
8857: LD_INT 23
8859: EQUAL
8860: OR
8861: PUSH
8862: LD_VAR 0 9
8866: PUSH
8867: LD_VAR 0 14
8871: ARRAY
8872: PUSH
8873: LD_INT 30
8875: EQUAL
8876: OR
8877: IFFALSE 8926
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8879: LD_ADDR_VAR 0 18
8883: PUSH
8884: LD_INT 11
8886: PUSH
8887: LD_INT 12
8889: PUSH
8890: LD_INT 13
8892: PUSH
8893: LD_INT 14
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8902: LD_ADDR_OWVAR 37
8906: PUSH
8907: LD_VAR 0 18
8911: PUSH
8912: LD_INT 1
8914: PPUSH
8915: LD_VAR 0 18
8919: PPUSH
8920: CALL_OW 12
8924: ARRAY
8925: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8926: LD_VAR 0 9
8930: PUSH
8931: LD_VAR 0 14
8935: ARRAY
8936: PUSH
8937: LD_INT 29
8939: EQUAL
8940: PUSH
8941: LD_VAR 0 9
8945: PUSH
8946: LD_VAR 0 14
8950: ARRAY
8951: PUSH
8952: LD_INT 28
8954: EQUAL
8955: OR
8956: PUSH
8957: LD_VAR 0 9
8961: PUSH
8962: LD_VAR 0 14
8966: ARRAY
8967: PUSH
8968: LD_INT 27
8970: EQUAL
8971: OR
8972: PUSH
8973: LD_VAR 0 9
8977: PUSH
8978: LD_VAR 0 14
8982: ARRAY
8983: PUSH
8984: LD_INT 26
8986: EQUAL
8987: OR
8988: PUSH
8989: LD_VAR 0 9
8993: PUSH
8994: LD_VAR 0 14
8998: ARRAY
8999: PUSH
9000: LD_INT 25
9002: EQUAL
9003: OR
9004: IFFALSE 9045
// begin arChassisTab = [ 13 , 14 ] ;
9006: LD_ADDR_VAR 0 18
9010: PUSH
9011: LD_INT 13
9013: PUSH
9014: LD_INT 14
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9021: LD_ADDR_OWVAR 37
9025: PUSH
9026: LD_VAR 0 18
9030: PUSH
9031: LD_INT 1
9033: PPUSH
9034: LD_VAR 0 18
9038: PPUSH
9039: CALL_OW 12
9043: ARRAY
9044: ST_TO_ADDR
// end ; end ;
9045: GO 8812
9047: POP
9048: POP
// veh = CreateVehicle ;
9049: LD_ADDR_VAR 0 16
9053: PUSH
9054: CALL_OW 45
9058: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9059: LD_VAR 0 16
9063: PPUSH
9064: LD_VAR 0 1
9068: PPUSH
9069: LD_INT 0
9071: PPUSH
9072: CALL_OW 49
// if vc_control = 1 then
9076: LD_OWVAR 38
9080: PUSH
9081: LD_INT 1
9083: EQUAL
9084: IFFALSE 9141
// begin hc_gallery =  ;
9086: LD_ADDR_OWVAR 33
9090: PUSH
9091: LD_STRING 
9093: ST_TO_ADDR
// hc_name =  ;
9094: LD_ADDR_OWVAR 26
9098: PUSH
9099: LD_STRING 
9101: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9102: LD_INT 0
9104: PPUSH
9105: LD_INT 3
9107: PPUSH
9108: LD_VAR 0 4
9112: PPUSH
9113: CALL_OW 380
// un = CreateHuman ;
9117: LD_ADDR_VAR 0 15
9121: PUSH
9122: CALL_OW 44
9126: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9127: LD_VAR 0 15
9131: PPUSH
9132: LD_VAR 0 16
9136: PPUSH
9137: CALL_OW 52
// end ; i = i + 1 ;
9141: LD_ADDR_VAR 0 13
9145: PUSH
9146: LD_VAR 0 13
9150: PUSH
9151: LD_INT 1
9153: PLUS
9154: ST_TO_ADDR
// end ; if nation = 3 then
9155: LD_VAR 0 5
9159: PUSH
9160: LD_INT 3
9162: EQUAL
9163: IFFALSE 9569
// begin uc_side = side ;
9165: LD_ADDR_OWVAR 20
9169: PUSH
9170: LD_VAR 0 2
9174: ST_TO_ADDR
// uc_nation = nation ;
9175: LD_ADDR_OWVAR 21
9179: PUSH
9180: LD_VAR 0 5
9184: ST_TO_ADDR
// vc_engine = vehengine ;
9185: LD_ADDR_OWVAR 39
9189: PUSH
9190: LD_VAR 0 6
9194: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
9195: LD_ADDR_OWVAR 38
9199: PUSH
9200: LD_VAR 0 7
9204: PUSH
9205: LD_INT 1
9207: PPUSH
9208: LD_VAR 0 7
9212: PPUSH
9213: CALL_OW 12
9217: ARRAY
9218: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9219: LD_ADDR_OWVAR 40
9223: PUSH
9224: LD_VAR 0 8
9228: PUSH
9229: LD_INT 1
9231: PPUSH
9232: LD_VAR 0 8
9236: PPUSH
9237: CALL_OW 12
9241: ARRAY
9242: ST_TO_ADDR
// for j = 1 to RuWeapons do
9243: LD_ADDR_VAR 0 14
9247: PUSH
9248: DOUBLE
9249: LD_INT 1
9251: DEC
9252: ST_TO_ADDR
9253: LD_VAR 0 8
9257: PUSH
9258: FOR_TO
9259: IFFALSE 9445
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9261: LD_VAR 0 8
9265: PUSH
9266: LD_VAR 0 14
9270: ARRAY
9271: PUSH
9272: LD_INT 42
9274: EQUAL
9275: PUSH
9276: LD_VAR 0 8
9280: PUSH
9281: LD_VAR 0 14
9285: ARRAY
9286: PUSH
9287: LD_INT 43
9289: EQUAL
9290: OR
9291: PUSH
9292: LD_VAR 0 8
9296: PUSH
9297: LD_VAR 0 14
9301: ARRAY
9302: PUSH
9303: LD_INT 44
9305: EQUAL
9306: OR
9307: PUSH
9308: LD_VAR 0 8
9312: PUSH
9313: LD_VAR 0 14
9317: ARRAY
9318: PUSH
9319: LD_INT 45
9321: EQUAL
9322: OR
9323: PUSH
9324: LD_VAR 0 8
9328: PUSH
9329: LD_VAR 0 14
9333: ARRAY
9334: PUSH
9335: LD_INT 49
9337: EQUAL
9338: OR
9339: IFFALSE 9376
// begin ruChassisTab = [ 24 ] ;
9341: LD_ADDR_VAR 0 17
9345: PUSH
9346: LD_INT 24
9348: PUSH
9349: EMPTY
9350: LIST
9351: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9352: LD_ADDR_OWVAR 37
9356: PUSH
9357: LD_VAR 0 17
9361: PUSH
9362: LD_INT 1
9364: PPUSH
9365: LD_VAR 0 17
9369: PPUSH
9370: CALL_OW 12
9374: ARRAY
9375: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9376: LD_VAR 0 8
9380: PUSH
9381: LD_VAR 0 14
9385: ARRAY
9386: PUSH
9387: LD_INT 46
9389: EQUAL
9390: PUSH
9391: LD_VAR 0 8
9395: PUSH
9396: LD_VAR 0 14
9400: ARRAY
9401: PUSH
9402: LD_INT 47
9404: EQUAL
9405: OR
9406: IFFALSE 9443
// begin ruChassisTab = [ 24 ] ;
9408: LD_ADDR_VAR 0 17
9412: PUSH
9413: LD_INT 24
9415: PUSH
9416: EMPTY
9417: LIST
9418: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9419: LD_ADDR_OWVAR 37
9423: PUSH
9424: LD_VAR 0 17
9428: PUSH
9429: LD_INT 1
9431: PPUSH
9432: LD_VAR 0 17
9436: PPUSH
9437: CALL_OW 12
9441: ARRAY
9442: ST_TO_ADDR
// end ; end ;
9443: GO 9258
9445: POP
9446: POP
// veh = CreateVehicle ;
9447: LD_ADDR_VAR 0 16
9451: PUSH
9452: CALL_OW 45
9456: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9457: LD_VAR 0 16
9461: PPUSH
9462: LD_VAR 0 1
9466: PPUSH
9467: LD_INT 0
9469: PPUSH
9470: CALL_OW 49
// if vc_control = 1 then
9474: LD_OWVAR 38
9478: PUSH
9479: LD_INT 1
9481: EQUAL
9482: IFFALSE 9569
// begin if uc_side = 8 then
9484: LD_OWVAR 20
9488: PUSH
9489: LD_INT 8
9491: EQUAL
9492: IFFALSE 9504
// uc_nation = 2 else
9494: LD_ADDR_OWVAR 21
9498: PUSH
9499: LD_INT 2
9501: ST_TO_ADDR
9502: GO 9514
// uc_nation = nation ;
9504: LD_ADDR_OWVAR 21
9508: PUSH
9509: LD_VAR 0 5
9513: ST_TO_ADDR
// hc_gallery =  ;
9514: LD_ADDR_OWVAR 33
9518: PUSH
9519: LD_STRING 
9521: ST_TO_ADDR
// hc_name =  ;
9522: LD_ADDR_OWVAR 26
9526: PUSH
9527: LD_STRING 
9529: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9530: LD_INT 0
9532: PPUSH
9533: LD_INT 3
9535: PPUSH
9536: LD_VAR 0 4
9540: PPUSH
9541: CALL_OW 380
// un = CreateHuman ;
9545: LD_ADDR_VAR 0 15
9549: PUSH
9550: CALL_OW 44
9554: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9555: LD_VAR 0 15
9559: PPUSH
9560: LD_VAR 0 16
9564: PPUSH
9565: CALL_OW 52
// end ; end ; end ;
9569: GO 8146
9571: POP
9572: POP
// repeat wait ( 0 0$1 ) ;
9573: LD_INT 35
9575: PPUSH
9576: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9580: LD_ADDR_VAR 0 20
9584: PUSH
9585: LD_INT 22
9587: PUSH
9588: LD_VAR 0 2
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 21
9599: PUSH
9600: LD_INT 2
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 24
9609: PUSH
9610: LD_INT 250
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 2
9619: PUSH
9620: LD_INT 34
9622: PUSH
9623: LD_INT 25
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 34
9632: PUSH
9633: LD_INT 26
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: LD_INT 34
9642: PUSH
9643: LD_INT 27
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PUSH
9650: LD_INT 34
9652: PUSH
9653: LD_INT 28
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 34
9662: PUSH
9663: LD_INT 29
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PUSH
9670: LD_INT 34
9672: PUSH
9673: LD_INT 46
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PUSH
9680: LD_INT 34
9682: PUSH
9683: LD_INT 44
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PUSH
9690: LD_INT 34
9692: PUSH
9693: LD_INT 45
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: PUSH
9700: LD_INT 34
9702: PUSH
9703: LD_INT 47
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: PPUSH
9728: CALL_OW 69
9732: ST_TO_ADDR
// if vehicleOK_list > 0 then
9733: LD_VAR 0 20
9737: PUSH
9738: LD_INT 0
9740: GREATER
9741: IFFALSE 9960
// begin for i in vehicleOK_list do
9743: LD_ADDR_VAR 0 13
9747: PUSH
9748: LD_VAR 0 20
9752: PUSH
9753: FOR_IN
9754: IFFALSE 9958
// begin if GetSide ( i ) <> side then
9756: LD_VAR 0 13
9760: PPUSH
9761: CALL_OW 255
9765: PUSH
9766: LD_VAR 0 2
9770: NONEQUAL
9771: IFFALSE 9784
// begin ComStop ( i ) ;
9773: LD_VAR 0 13
9777: PPUSH
9778: CALL_OW 141
// continue ;
9782: GO 9753
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9784: LD_ADDR_VAR 0 21
9788: PUSH
9789: LD_INT 22
9791: PUSH
9792: LD_VAR 0 11
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PPUSH
9801: CALL_OW 69
9805: PPUSH
9806: LD_VAR 0 13
9810: PPUSH
9811: CALL_OW 74
9815: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9816: LD_ADDR_VAR 0 22
9820: PUSH
9821: LD_INT 22
9823: PUSH
9824: LD_VAR 0 11
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 2
9835: PUSH
9836: LD_INT 59
9838: PUSH
9839: EMPTY
9840: LIST
9841: PUSH
9842: LD_INT 21
9844: PUSH
9845: LD_INT 1
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PUSH
9852: LD_INT 21
9854: PUSH
9855: LD_INT 2
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: EMPTY
9873: LIST
9874: PPUSH
9875: CALL_OW 69
9879: PPUSH
9880: LD_VAR 0 13
9884: PPUSH
9885: CALL_OW 74
9889: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9890: LD_VAR 0 13
9894: PPUSH
9895: LD_VAR 0 21
9899: PPUSH
9900: CALL_OW 296
9904: PUSH
9905: LD_INT 8
9907: PLUS
9908: PUSH
9909: LD_VAR 0 13
9913: PPUSH
9914: LD_VAR 0 22
9918: PPUSH
9919: CALL_OW 296
9923: LESS
9924: IFFALSE 9942
// begin ComAttackUnit ( i , target1 ) ;
9926: LD_VAR 0 13
9930: PPUSH
9931: LD_VAR 0 21
9935: PPUSH
9936: CALL_OW 115
// end else
9940: GO 9956
// begin ComAttackUnit ( i , target2 ) ;
9942: LD_VAR 0 13
9946: PPUSH
9947: LD_VAR 0 22
9951: PPUSH
9952: CALL_OW 115
// end ; end ;
9956: GO 9753
9958: POP
9959: POP
// end ; until vehicleOK_list = 0 ;
9960: LD_VAR 0 20
9964: PUSH
9965: LD_INT 0
9967: EQUAL
9968: IFFALSE 9573
// end ;
9970: LD_VAR 0 12
9974: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
9975: LD_INT 0
9977: PPUSH
9978: PPUSH
9979: PPUSH
9980: PPUSH
9981: PPUSH
9982: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
9983: LD_ADDR_VAR 0 6
9987: PUSH
9988: LD_INT 22
9990: PUSH
9991: LD_VAR 0 1
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: LD_INT 34
10002: PUSH
10003: LD_INT 29
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PPUSH
10014: CALL_OW 69
10018: ST_TO_ADDR
// if veh_list = 0 then
10019: LD_VAR 0 6
10023: PUSH
10024: LD_INT 0
10026: EQUAL
10027: IFFALSE 10031
// exit ;
10029: GO 10236
// if veh_list > 0 then
10031: LD_VAR 0 6
10035: PUSH
10036: LD_INT 0
10038: GREATER
10039: IFFALSE 10236
// begin for i in veh_List do
10041: LD_ADDR_VAR 0 4
10045: PUSH
10046: LD_VAR 0 6
10050: PUSH
10051: FOR_IN
10052: IFFALSE 10234
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10054: LD_ADDR_VAR 0 7
10058: PUSH
10059: LD_INT 22
10061: PUSH
10062: LD_VAR 0 2
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: LD_INT 24
10073: PUSH
10074: LD_INT 250
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: PUSH
10081: LD_INT 2
10083: PUSH
10084: LD_INT 59
10086: PUSH
10087: EMPTY
10088: LIST
10089: PUSH
10090: LD_INT 21
10092: PUSH
10093: LD_INT 1
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 21
10102: PUSH
10103: LD_INT 2
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: LIST
10120: PUSH
10121: EMPTY
10122: LIST
10123: PPUSH
10124: CALL_OW 69
10128: PPUSH
10129: LD_VAR 0 4
10133: PPUSH
10134: CALL_OW 74
10138: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
10139: LD_VAR 0 4
10143: PPUSH
10144: LD_VAR 0 7
10148: PPUSH
10149: CALL_OW 115
// if not HasTask ( i ) then
10153: LD_VAR 0 4
10157: PPUSH
10158: CALL_OW 314
10162: NOT
10163: IFFALSE 10232
// begin wait ( 0 0$0.1 ) ;
10165: LD_INT 4
10167: PPUSH
10168: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
10172: LD_ADDR_VAR 0 8
10176: PUSH
10177: LD_INT 22
10179: PUSH
10180: LD_VAR 0 2
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: PUSH
10189: LD_INT 24
10191: PUSH
10192: LD_INT 250
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PPUSH
10203: CALL_OW 69
10207: PPUSH
10208: LD_VAR 0 4
10212: PPUSH
10213: CALL_OW 74
10217: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
10218: LD_VAR 0 4
10222: PPUSH
10223: LD_VAR 0 8
10227: PPUSH
10228: CALL_OW 115
// end ; end ;
10232: GO 10051
10234: POP
10235: POP
// end ; end ; end_of_file
10236: LD_VAR 0 3
10240: RET
// every 0 0$1 do
10241: GO 10243
10243: DISABLE
// begin enable ;
10244: ENABLE
// IntBazooka ( 7 , 1 ) ;
10245: LD_INT 7
10247: PPUSH
10248: LD_INT 1
10250: PPUSH
10251: CALL 6681 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10255: LD_INT 8
10257: PPUSH
10258: LD_INT 1
10260: PPUSH
10261: CALL 9975 0 2
// end ;
10265: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10266: LD_INT 22
10268: PUSH
10269: LD_INT 3
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 21
10278: PUSH
10279: LD_INT 2
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: LD_INT 50
10288: PUSH
10289: EMPTY
10290: LIST
10291: PUSH
10292: LD_INT 2
10294: PUSH
10295: LD_INT 34
10297: PUSH
10298: LD_INT 46
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: LD_INT 34
10307: PUSH
10308: LD_INT 44
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PUSH
10315: LD_INT 34
10317: PUSH
10318: LD_INT 45
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PUSH
10325: LD_INT 34
10327: PUSH
10328: LD_INT 47
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: PPUSH
10348: CALL_OW 69
10352: PUSH
10353: LD_INT 0
10355: GREATER
10356: PUSH
10357: LD_INT 22
10359: PUSH
10360: LD_INT 3
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 21
10369: PUSH
10370: LD_INT 2
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 50
10379: PUSH
10380: EMPTY
10381: LIST
10382: PUSH
10383: LD_INT 34
10385: PUSH
10386: LD_INT 49
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: PPUSH
10399: CALL_OW 69
10403: PUSH
10404: LD_INT 0
10406: GREATER
10407: AND
10408: IFFALSE 10580
10410: GO 10412
10412: DISABLE
10413: LD_INT 0
10415: PPUSH
10416: PPUSH
// begin enable ;
10417: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10418: LD_ADDR_VAR 0 1
10422: PUSH
10423: LD_INT 22
10425: PUSH
10426: LD_INT 3
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: PUSH
10433: LD_INT 21
10435: PUSH
10436: LD_INT 2
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: PUSH
10443: LD_INT 50
10445: PUSH
10446: EMPTY
10447: LIST
10448: PUSH
10449: LD_INT 2
10451: PUSH
10452: LD_INT 34
10454: PUSH
10455: LD_INT 46
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: LD_INT 34
10464: PUSH
10465: LD_INT 44
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 34
10474: PUSH
10475: LD_INT 45
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 34
10484: PUSH
10485: LD_INT 47
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: PPUSH
10505: CALL_OW 69
10509: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10510: LD_ADDR_VAR 0 2
10514: PUSH
10515: LD_INT 22
10517: PUSH
10518: LD_INT 3
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PUSH
10525: LD_INT 21
10527: PUSH
10528: LD_INT 2
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 50
10537: PUSH
10538: EMPTY
10539: LIST
10540: PUSH
10541: LD_INT 34
10543: PUSH
10544: LD_INT 49
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: PPUSH
10557: CALL_OW 69
10561: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10562: LD_VAR 0 2
10566: PPUSH
10567: LD_VAR 0 1
10571: PUSH
10572: LD_INT 1
10574: ARRAY
10575: PPUSH
10576: CALL_OW 112
// end ; end_of_file
10580: PPOPN 2
10582: END
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
10583: LD_EXP 38
10587: PUSH
10588: LD_INT 1
10590: EQUAL
10591: IFFALSE 11493
10593: GO 10595
10595: DISABLE
10596: LD_INT 0
10598: PPUSH
10599: PPUSH
10600: PPUSH
// begin m1 := false ;
10601: LD_ADDR_VAR 0 1
10605: PUSH
10606: LD_INT 0
10608: ST_TO_ADDR
// m2 := false ;
10609: LD_ADDR_VAR 0 2
10613: PUSH
10614: LD_INT 0
10616: ST_TO_ADDR
// m3 := false ;
10617: LD_ADDR_VAR 0 3
10621: PUSH
10622: LD_INT 0
10624: ST_TO_ADDR
// Say ( JMM , D9b-JMM-1 ) ;
10625: LD_EXP 1
10629: PPUSH
10630: LD_STRING D9b-JMM-1
10632: PPUSH
10633: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10637: LD_EXP 15
10641: PPUSH
10642: LD_STRING D9b-Pow-1
10644: PPUSH
10645: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10649: LD_EXP 1
10653: PPUSH
10654: LD_STRING D9b-JMM-2
10656: PPUSH
10657: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10661: LD_EXP 15
10665: PPUSH
10666: LD_STRING D9b-Pow-2
10668: PPUSH
10669: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10673: LD_EXP 1
10677: PPUSH
10678: LD_STRING D9b-JMM-3
10680: PPUSH
10681: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10685: LD_EXP 15
10689: PPUSH
10690: LD_STRING D9b-Pow-3
10692: PPUSH
10693: CALL_OW 94
// if tick <= 60 60$00 then
10697: LD_OWVAR 1
10701: PUSH
10702: LD_INT 126000
10704: LESSEQUAL
10705: IFFALSE 10714
// SetAchievement ( ACH_ASPEED_13 ) ;
10707: LD_STRING ACH_ASPEED_13
10709: PPUSH
10710: CALL_OW 543
// if burlakStatus = 1 then
10714: LD_EXP 28
10718: PUSH
10719: LD_INT 1
10721: EQUAL
10722: IFFALSE 10744
// begin m1 := true ;
10724: LD_ADDR_VAR 0 1
10728: PUSH
10729: LD_INT 1
10731: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
10732: LD_STRING Burlak
10734: PPUSH
10735: LD_INT 1
10737: PPUSH
10738: CALL_OW 101
// end else
10742: GO 10755
// begin AddMedal ( Burlak , - 1 ) ;
10744: LD_STRING Burlak
10746: PPUSH
10747: LD_INT 1
10749: NEG
10750: PPUSH
10751: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10755: LD_EXP 2
10759: PPUSH
10760: CALL_OW 302
10764: IFFALSE 10786
// begin m2 := true ;
10766: LD_ADDR_VAR 0 2
10770: PUSH
10771: LD_INT 1
10773: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
10774: LD_STRING Stevens
10776: PPUSH
10777: LD_INT 1
10779: PPUSH
10780: CALL_OW 101
// end else
10784: GO 10797
// begin AddMedal ( Stevens , - 1 ) ;
10786: LD_STRING Stevens
10788: PPUSH
10789: LD_INT 1
10791: NEG
10792: PPUSH
10793: CALL_OW 101
// end ; if radarOnSpot = 1 then
10797: LD_EXP 30
10801: PUSH
10802: LD_INT 1
10804: EQUAL
10805: IFFALSE 10827
// begin m3 := true ;
10807: LD_ADDR_VAR 0 3
10811: PUSH
10812: LD_INT 1
10814: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
10815: LD_STRING Observation
10817: PPUSH
10818: LD_INT 1
10820: PPUSH
10821: CALL_OW 101
// end else
10825: GO 10838
// begin AddMedal ( Observation , - 1 ) ;
10827: LD_STRING Observation
10829: PPUSH
10830: LD_INT 1
10832: NEG
10833: PPUSH
10834: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10838: LD_VAR 0 1
10842: PUSH
10843: LD_VAR 0 2
10847: AND
10848: PUSH
10849: LD_VAR 0 3
10853: AND
10854: PUSH
10855: LD_OWVAR 67
10859: PUSH
10860: LD_INT 3
10862: GREATEREQUAL
10863: AND
10864: IFFALSE 10876
// SetAchievementEX ( ACH_AMER , 13 ) ;
10866: LD_STRING ACH_AMER
10868: PPUSH
10869: LD_INT 13
10871: PPUSH
10872: CALL_OW 564
// GiveMedals ( MAIN ) ;
10876: LD_STRING MAIN
10878: PPUSH
10879: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
10883: LD_EXP 28
10887: PPUSH
10888: LD_STRING 13_BurlakStatus_1
10890: PPUSH
10891: CALL_OW 39
// if IsLive ( Stevens ) then
10895: LD_EXP 2
10899: PPUSH
10900: CALL_OW 300
10904: IFFALSE 10918
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
10906: LD_INT 1
10908: PPUSH
10909: LD_STRING 13_StevensStatus_1
10911: PPUSH
10912: CALL_OW 39
10916: GO 10928
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
10918: LD_INT 0
10920: PPUSH
10921: LD_STRING 13_StevensStatus_1
10923: PPUSH
10924: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
10928: LD_INT 22
10930: PUSH
10931: LD_INT 1
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 21
10940: PUSH
10941: LD_INT 1
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PUSH
10948: LD_INT 2
10950: PUSH
10951: LD_INT 25
10953: PUSH
10954: LD_INT 1
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PUSH
10961: LD_INT 25
10963: PUSH
10964: LD_INT 2
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 25
10973: PUSH
10974: LD_INT 3
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 25
10983: PUSH
10984: LD_INT 4
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: LD_INT 25
10993: PUSH
10994: LD_INT 5
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: PUSH
11001: LD_INT 25
11003: PUSH
11004: LD_INT 8
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: LIST
11024: PPUSH
11025: CALL_OW 69
11029: PPUSH
11030: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11034: LD_EXP 1
11038: PPUSH
11039: LD_EXP 34
11043: PUSH
11044: LD_STRING JMM
11046: STR
11047: PPUSH
11048: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
11052: LD_EXP 8
11056: PPUSH
11057: LD_EXP 34
11061: PUSH
11062: LD_STRING Brown
11064: STR
11065: PPUSH
11066: CALL 6989 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11070: LD_EXP 4
11074: PPUSH
11075: LD_EXP 34
11079: PUSH
11080: LD_STRING Donaldson
11082: STR
11083: PPUSH
11084: CALL 6989 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11088: LD_EXP 5
11092: PPUSH
11093: LD_EXP 34
11097: PUSH
11098: LD_STRING Bobby
11100: STR
11101: PPUSH
11102: CALL 6989 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11106: LD_EXP 6
11110: PPUSH
11111: LD_EXP 34
11115: PUSH
11116: LD_STRING Cyrus
11118: STR
11119: PPUSH
11120: CALL 6989 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11124: LD_EXP 3
11128: PPUSH
11129: LD_EXP 34
11133: PUSH
11134: LD_STRING Lisa
11136: STR
11137: PPUSH
11138: CALL 6989 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
11142: LD_EXP 13
11146: PPUSH
11147: LD_EXP 34
11151: PUSH
11152: LD_STRING Frank
11154: STR
11155: PPUSH
11156: CALL 6989 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11160: LD_EXP 14
11164: PPUSH
11165: LD_EXP 34
11169: PUSH
11170: LD_STRING Kikuchi
11172: STR
11173: PPUSH
11174: CALL 6989 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
11178: LD_EXP 10
11182: PPUSH
11183: LD_EXP 34
11187: PUSH
11188: LD_STRING Houten
11190: STR
11191: PPUSH
11192: CALL 6989 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
11196: LD_EXP 12
11200: PPUSH
11201: LD_EXP 34
11205: PUSH
11206: LD_STRING Gary
11208: STR
11209: PPUSH
11210: CALL 6989 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
11214: LD_EXP 11
11218: PPUSH
11219: LD_EXP 34
11223: PUSH
11224: LD_STRING Cornell
11226: STR
11227: PPUSH
11228: CALL 6989 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
11232: LD_EXP 7
11236: PPUSH
11237: LD_EXP 34
11241: PUSH
11242: LD_STRING Denis
11244: STR
11245: PPUSH
11246: CALL 6989 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11250: LD_EXP 9
11254: PPUSH
11255: LD_EXP 34
11259: PUSH
11260: LD_STRING Gladstone
11262: STR
11263: PPUSH
11264: CALL 6989 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
11268: LD_EXP 2
11272: PPUSH
11273: LD_EXP 34
11277: PUSH
11278: LD_STRING Stevens
11280: STR
11281: PPUSH
11282: CALL 6989 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
11286: LD_INT 50
11288: PUSH
11289: EMPTY
11290: LIST
11291: PUSH
11292: LD_INT 22
11294: PUSH
11295: LD_INT 1
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PUSH
11302: LD_INT 21
11304: PUSH
11305: LD_INT 1
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PUSH
11312: LD_INT 2
11314: PUSH
11315: LD_INT 25
11317: PUSH
11318: LD_INT 1
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 25
11327: PUSH
11328: LD_INT 2
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: LD_INT 25
11337: PUSH
11338: LD_INT 3
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: PUSH
11345: LD_INT 25
11347: PUSH
11348: LD_INT 4
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: PUSH
11355: LD_INT 25
11357: PUSH
11358: LD_INT 5
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 25
11367: PUSH
11368: LD_INT 8
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: PPUSH
11390: CALL_OW 69
11394: PUSH
11395: LD_EXP 1
11399: PUSH
11400: LD_EXP 8
11404: PUSH
11405: LD_EXP 4
11409: PUSH
11410: LD_EXP 5
11414: PUSH
11415: LD_EXP 6
11419: PUSH
11420: LD_EXP 3
11424: PUSH
11425: LD_EXP 13
11429: PUSH
11430: LD_EXP 9
11434: PUSH
11435: LD_EXP 14
11439: PUSH
11440: LD_EXP 7
11444: PUSH
11445: LD_EXP 10
11449: PUSH
11450: LD_EXP 12
11454: PUSH
11455: LD_EXP 11
11459: PUSH
11460: LD_EXP 2
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: DIFF
11481: PPUSH
11482: LD_STRING 13_other_survivors
11484: PPUSH
11485: CALL_OW 38
// YouWin ;
11489: CALL_OW 103
// end ; end_of_file
11493: PPOPN 3
11495: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do var i , tmp , yourSiberite ;
11496: LD_EXP 32
11500: PUSH
11501: LD_INT 2
11503: EQUAL
11504: PUSH
11505: LD_INT 34
11507: PUSH
11508: LD_INT 8
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PPUSH
11515: CALL_OW 69
11519: NOT
11520: AND
11521: IFFALSE 11657
11523: GO 11525
11525: DISABLE
11526: LD_INT 0
11528: PPUSH
11529: PPUSH
11530: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11531: LD_ADDR_VAR 0 2
11535: PUSH
11536: LD_INT 22
11538: PUSH
11539: LD_INT 1
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: PUSH
11546: LD_INT 21
11548: PUSH
11549: LD_INT 3
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 2
11558: PUSH
11559: LD_INT 30
11561: PUSH
11562: LD_INT 0
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 30
11571: PUSH
11572: LD_INT 1
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: LIST
11588: PPUSH
11589: CALL_OW 69
11593: ST_TO_ADDR
// for i in tmp do
11594: LD_ADDR_VAR 0 1
11598: PUSH
11599: LD_VAR 0 2
11603: PUSH
11604: FOR_IN
11605: IFFALSE 11638
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11607: LD_ADDR_VAR 0 3
11611: PUSH
11612: LD_VAR 0 3
11616: PUSH
11617: LD_VAR 0 1
11621: PPUSH
11622: CALL_OW 274
11626: PPUSH
11627: LD_INT 3
11629: PPUSH
11630: CALL_OW 275
11634: PLUS
11635: ST_TO_ADDR
11636: GO 11604
11638: POP
11639: POP
// if yourSiberite < 79 then
11640: LD_VAR 0 3
11644: PUSH
11645: LD_INT 79
11647: LESS
11648: IFFALSE 11657
// YouLost ( siberite ) ;
11650: LD_STRING siberite
11652: PPUSH
11653: CALL_OW 104
// end ; end_of_file
11657: PPOPN 3
11659: END
// every 8 8$0 + 7 7$0 do
11660: GO 11662
11662: DISABLE
// begin enable ;
11663: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 1 , 3 ) , 0 , 0 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11664: LD_INT 8
11666: PPUSH
11667: LD_INT 2
11669: PPUSH
11670: LD_INT 1
11672: PPUSH
11673: LD_INT 3
11675: PPUSH
11676: CALL_OW 12
11680: PPUSH
11681: LD_INT 0
11683: PPUSH
11684: LD_INT 0
11686: PPUSH
11687: LD_INT 2
11689: PUSH
11690: LD_INT 3
11692: PUSH
11693: LD_INT 4
11695: PUSH
11696: LD_INT 5
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: PUSH
11705: LD_OWVAR 67
11709: ARRAY
11710: PPUSH
11711: LD_INT 0
11713: PPUSH
11714: LD_INT 10
11716: PPUSH
11717: LD_INT 8
11719: PUSH
11720: LD_INT 9
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 1
11729: PPUSH
11730: LD_INT 2
11732: PPUSH
11733: CALL_OW 12
11737: ARRAY
11738: PPUSH
11739: LD_INT 12
11741: PPUSH
11742: LD_INT 1
11744: PPUSH
11745: CALL 7029 0 11
// end ;
11749: END
// every 8 8$00 + 7 7$0 do var i , veh , xy ;
11750: GO 11752
11752: DISABLE
11753: LD_INT 0
11755: PPUSH
11756: PPUSH
11757: PPUSH
// begin enable ;
11758: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11759: LD_ADDR_EXP 33
11763: PUSH
11764: LD_EXP 33
11768: PUSH
11769: LD_INT 1
11771: PLUS
11772: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
11773: LD_INT 22
11775: PUSH
11776: LD_INT 8
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 3
11785: PUSH
11786: LD_INT 58
11788: PUSH
11789: EMPTY
11790: LIST
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: LD_INT 34
11798: PUSH
11799: LD_INT 31
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: LIST
11810: PPUSH
11811: CALL_OW 69
11815: PUSH
11816: LD_INT 2
11818: LESS
11819: IFFALSE 12063
// begin uc_side := 8 ;
11821: LD_ADDR_OWVAR 20
11825: PUSH
11826: LD_INT 8
11828: ST_TO_ADDR
// uc_nation := 2 ;
11829: LD_ADDR_OWVAR 21
11833: PUSH
11834: LD_INT 2
11836: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
11837: LD_INT 14
11839: PPUSH
11840: LD_INT 3
11842: PPUSH
11843: LD_INT 1
11845: PPUSH
11846: LD_INT 31
11848: PPUSH
11849: LD_INT 100
11851: PPUSH
11852: CALL 35151 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
11856: LD_ADDR_VAR 0 1
11860: PUSH
11861: DOUBLE
11862: LD_INT 22
11864: PUSH
11865: LD_INT 8
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: LD_INT 3
11874: PUSH
11875: LD_INT 58
11877: PUSH
11878: EMPTY
11879: LIST
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 34
11887: PUSH
11888: LD_INT 31
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: PPUSH
11900: CALL_OW 69
11904: PUSH
11905: LD_INT 1
11907: PLUS
11908: DEC
11909: ST_TO_ADDR
11910: LD_INT 2
11912: PUSH
11913: FOR_TO
11914: IFFALSE 12061
// begin veh := CreateVehicle ;
11916: LD_ADDR_VAR 0 2
11920: PUSH
11921: CALL_OW 45
11925: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11926: LD_VAR 0 2
11930: PPUSH
11931: LD_INT 5
11933: PPUSH
11934: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
11938: LD_ADDR_VAR 0 3
11942: PUSH
11943: LD_INT 181
11945: PUSH
11946: LD_INT 105
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 137
11955: PUSH
11956: LD_INT 6
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: LD_VAR 0 1
11971: PUSH
11972: LD_INT 2
11974: MOD
11975: PUSH
11976: LD_INT 1
11978: PLUS
11979: ARRAY
11980: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
11981: LD_VAR 0 2
11985: PPUSH
11986: LD_VAR 0 3
11990: PUSH
11991: LD_INT 1
11993: ARRAY
11994: PPUSH
11995: LD_VAR 0 3
11999: PUSH
12000: LD_INT 2
12002: ARRAY
12003: PPUSH
12004: LD_INT 12
12006: PPUSH
12007: LD_INT 0
12009: PPUSH
12010: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
12014: LD_INT 0
12016: PPUSH
12017: LD_INT 7
12019: PUSH
12020: LD_INT 9
12022: PUSH
12023: LD_INT 10
12025: PUSH
12026: LD_INT 10
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: PUSH
12035: LD_OWVAR 67
12039: ARRAY
12040: PPUSH
12041: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12045: CALL_OW 44
12049: PPUSH
12050: LD_VAR 0 2
12054: PPUSH
12055: CALL_OW 52
// end ;
12059: GO 11913
12061: POP
12062: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 10 ) , 10 ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
12063: LD_INT 8
12065: PUSH
12066: LD_INT 9
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PUSH
12073: LD_INT 1
12075: PPUSH
12076: LD_INT 2
12078: PPUSH
12079: CALL_OW 12
12083: ARRAY
12084: PPUSH
12085: LD_INT 8
12087: PPUSH
12088: LD_INT 4
12090: PPUSH
12091: LD_INT 6
12093: PPUSH
12094: CALL_OW 12
12098: PUSH
12099: LD_INT 6
12101: PPUSH
12102: LD_INT 9
12104: PPUSH
12105: CALL_OW 12
12109: PUSH
12110: LD_INT 7
12112: PPUSH
12113: LD_INT 10
12115: PPUSH
12116: CALL_OW 12
12120: PUSH
12121: LD_INT 10
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: PUSH
12130: LD_OWVAR 67
12134: ARRAY
12135: PPUSH
12136: LD_INT 10
12138: PPUSH
12139: LD_INT 2
12141: PPUSH
12142: LD_INT 3
12144: PPUSH
12145: LD_INT 5
12147: PUSH
12148: LD_INT 2
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: PPUSH
12155: EMPTY
12156: PPUSH
12157: LD_INT 25
12159: PUSH
12160: LD_INT 26
12162: PUSH
12163: LD_INT 27
12165: PUSH
12166: LD_INT 28
12168: PUSH
12169: LD_INT 29
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: PPUSH
12179: EMPTY
12180: PPUSH
12181: LD_INT 1
12183: PPUSH
12184: CALL 8097 0 11
// end ;
12188: PPOPN 3
12190: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do var i , veh ;
12191: LD_EXP 33
12195: PUSH
12196: LD_INT 4
12198: GREATEREQUAL
12199: IFFALSE 12547
12201: GO 12203
12203: DISABLE
12204: LD_INT 0
12206: PPUSH
12207: PPUSH
// begin enable ;
12208: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
12209: LD_ADDR_EXP 33
12213: PUSH
12214: LD_EXP 33
12218: PUSH
12219: LD_INT 1
12221: PLUS
12222: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12223: LD_INT 22
12225: PUSH
12226: LD_INT 8
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 3
12235: PUSH
12236: LD_INT 58
12238: PUSH
12239: EMPTY
12240: LIST
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: LD_INT 34
12248: PUSH
12249: LD_INT 31
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: LIST
12260: PPUSH
12261: CALL_OW 69
12265: PUSH
12266: LD_INT 2
12268: LESS
12269: IFFALSE 12458
// begin uc_side := 8 ;
12271: LD_ADDR_OWVAR 20
12275: PUSH
12276: LD_INT 8
12278: ST_TO_ADDR
// uc_nation := 2 ;
12279: LD_ADDR_OWVAR 21
12283: PUSH
12284: LD_INT 2
12286: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12287: LD_INT 14
12289: PPUSH
12290: LD_INT 3
12292: PPUSH
12293: LD_INT 1
12295: PPUSH
12296: LD_INT 31
12298: PPUSH
12299: LD_INT 100
12301: PPUSH
12302: CALL 35151 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12306: LD_ADDR_VAR 0 1
12310: PUSH
12311: DOUBLE
12312: LD_INT 22
12314: PUSH
12315: LD_INT 8
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 3
12324: PUSH
12325: LD_INT 58
12327: PUSH
12328: EMPTY
12329: LIST
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PUSH
12335: LD_INT 34
12337: PUSH
12338: LD_INT 31
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 69
12354: PUSH
12355: LD_INT 1
12357: PLUS
12358: DEC
12359: ST_TO_ADDR
12360: LD_INT 2
12362: PUSH
12363: FOR_TO
12364: IFFALSE 12456
// begin veh := CreateVehicle ;
12366: LD_ADDR_VAR 0 2
12370: PUSH
12371: CALL_OW 45
12375: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12376: LD_VAR 0 2
12380: PPUSH
12381: LD_INT 5
12383: PPUSH
12384: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12388: LD_VAR 0 2
12392: PPUSH
12393: LD_INT 181
12395: PPUSH
12396: LD_INT 105
12398: PPUSH
12399: LD_INT 12
12401: PPUSH
12402: LD_INT 0
12404: PPUSH
12405: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
12409: LD_INT 0
12411: PPUSH
12412: LD_INT 8
12414: PUSH
12415: LD_INT 9
12417: PUSH
12418: LD_INT 10
12420: PUSH
12421: LD_INT 10
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: PUSH
12430: LD_OWVAR 67
12434: ARRAY
12435: PPUSH
12436: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12440: CALL_OW 44
12444: PPUSH
12445: LD_VAR 0 2
12449: PPUSH
12450: CALL_OW 52
// end ;
12454: GO 12363
12456: POP
12457: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 , 4 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
12458: LD_INT 8
12460: PUSH
12461: LD_INT 9
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PUSH
12468: LD_INT 1
12470: PPUSH
12471: LD_INT 2
12473: PPUSH
12474: CALL_OW 12
12478: ARRAY
12479: PPUSH
12480: LD_INT 8
12482: PPUSH
12483: LD_INT 1
12485: PUSH
12486: LD_INT 2
12488: PUSH
12489: LD_INT 3
12491: PUSH
12492: LD_INT 4
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: PUSH
12501: LD_OWVAR 67
12505: ARRAY
12506: PPUSH
12507: LD_INT 10
12509: PPUSH
12510: LD_INT 3
12512: PPUSH
12513: LD_INT 3
12515: PPUSH
12516: LD_INT 1
12518: PUSH
12519: LD_INT 1
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PPUSH
12526: LD_INT 47
12528: PUSH
12529: LD_INT 47
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PPUSH
12536: EMPTY
12537: PPUSH
12538: EMPTY
12539: PPUSH
12540: LD_INT 1
12542: PPUSH
12543: CALL 8097 0 11
// end ;
12547: PPOPN 2
12549: END
// every 1 1$0 trigger eventVar2 = 1 do var i , veh ;
12550: LD_EXP 36
12554: PUSH
12555: LD_INT 1
12557: EQUAL
12558: IFFALSE 12903
12560: GO 12562
12562: DISABLE
12563: LD_INT 0
12565: PPUSH
12566: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12567: LD_INT 22
12569: PUSH
12570: LD_INT 8
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PUSH
12577: LD_INT 3
12579: PUSH
12580: LD_INT 58
12582: PUSH
12583: EMPTY
12584: LIST
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: LD_INT 34
12592: PUSH
12593: LD_INT 31
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: LIST
12604: PPUSH
12605: CALL_OW 69
12609: PUSH
12610: LD_INT 2
12612: LESS
12613: IFFALSE 12802
// begin uc_side := 8 ;
12615: LD_ADDR_OWVAR 20
12619: PUSH
12620: LD_INT 8
12622: ST_TO_ADDR
// uc_nation := 2 ;
12623: LD_ADDR_OWVAR 21
12627: PUSH
12628: LD_INT 2
12630: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12631: LD_INT 14
12633: PPUSH
12634: LD_INT 3
12636: PPUSH
12637: LD_INT 1
12639: PPUSH
12640: LD_INT 31
12642: PPUSH
12643: LD_INT 100
12645: PPUSH
12646: CALL 35151 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12650: LD_ADDR_VAR 0 1
12654: PUSH
12655: DOUBLE
12656: LD_INT 22
12658: PUSH
12659: LD_INT 8
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PUSH
12666: LD_INT 3
12668: PUSH
12669: LD_INT 58
12671: PUSH
12672: EMPTY
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PUSH
12679: LD_INT 34
12681: PUSH
12682: LD_INT 31
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: LIST
12693: PPUSH
12694: CALL_OW 69
12698: PUSH
12699: LD_INT 1
12701: PLUS
12702: DEC
12703: ST_TO_ADDR
12704: LD_INT 2
12706: PUSH
12707: FOR_TO
12708: IFFALSE 12800
// begin veh := CreateVehicle ;
12710: LD_ADDR_VAR 0 2
12714: PUSH
12715: CALL_OW 45
12719: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12720: LD_VAR 0 2
12724: PPUSH
12725: LD_INT 5
12727: PPUSH
12728: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12732: LD_VAR 0 2
12736: PPUSH
12737: LD_INT 181
12739: PPUSH
12740: LD_INT 105
12742: PPUSH
12743: LD_INT 12
12745: PPUSH
12746: LD_INT 0
12748: PPUSH
12749: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
12753: LD_INT 0
12755: PPUSH
12756: LD_INT 8
12758: PUSH
12759: LD_INT 9
12761: PUSH
12762: LD_INT 10
12764: PUSH
12765: LD_INT 10
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: PUSH
12774: LD_OWVAR 67
12778: ARRAY
12779: PPUSH
12780: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12784: CALL_OW 44
12788: PPUSH
12789: LD_VAR 0 2
12793: PPUSH
12794: CALL_OW 52
// end ;
12798: GO 12707
12800: POP
12801: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 5 , 7 , 8 , 9 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
12802: LD_INT 8
12804: PUSH
12805: LD_INT 9
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: LD_INT 1
12814: PPUSH
12815: LD_INT 2
12817: PPUSH
12818: CALL_OW 12
12822: ARRAY
12823: PPUSH
12824: LD_INT 3
12826: PPUSH
12827: LD_INT 5
12829: PUSH
12830: LD_INT 7
12832: PUSH
12833: LD_INT 8
12835: PUSH
12836: LD_INT 9
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: PUSH
12845: LD_OWVAR 67
12849: ARRAY
12850: PPUSH
12851: LD_INT 10
12853: PPUSH
12854: LD_INT 3
12856: PPUSH
12857: LD_INT 3
12859: PPUSH
12860: LD_INT 3
12862: PUSH
12863: LD_INT 3
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: PPUSH
12870: LD_INT 46
12872: PUSH
12873: LD_INT 44
12875: PUSH
12876: LD_INT 45
12878: PUSH
12879: LD_INT 47
12881: PUSH
12882: LD_INT 49
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: PPUSH
12892: EMPTY
12893: PPUSH
12894: EMPTY
12895: PPUSH
12896: LD_INT 1
12898: PPUSH
12899: CALL 8097 0 11
// end ; end_of_file
12903: PPOPN 2
12905: END
// every 1 1$0 do
12906: GO 12908
12908: DISABLE
// begin enable ;
12909: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
12910: LD_INT 3
12912: PPUSH
12913: LD_INT 5
12915: PPUSH
12916: CALL_OW 12
12920: PPUSH
12921: LD_INT 13
12923: PPUSH
12924: LD_INT 1
12926: PPUSH
12927: CALL_OW 55
// end ; end_of_file
12931: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12932: LD_INT 0
12934: PPUSH
// ar_miner := 81 ;
12935: LD_ADDR_EXP 50
12939: PUSH
12940: LD_INT 81
12942: ST_TO_ADDR
// ar_crane := 88 ;
12943: LD_ADDR_EXP 49
12947: PUSH
12948: LD_INT 88
12950: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12951: LD_ADDR_EXP 44
12955: PUSH
12956: LD_INT 89
12958: ST_TO_ADDR
// us_hack := 99 ;
12959: LD_ADDR_EXP 45
12963: PUSH
12964: LD_INT 99
12966: ST_TO_ADDR
// us_artillery := 97 ;
12967: LD_ADDR_EXP 46
12971: PUSH
12972: LD_INT 97
12974: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12975: LD_ADDR_EXP 47
12979: PUSH
12980: LD_INT 91
12982: ST_TO_ADDR
// ar_mortar := 92 ;
12983: LD_ADDR_EXP 48
12987: PUSH
12988: LD_INT 92
12990: ST_TO_ADDR
// ru_radar := 98 ;
12991: LD_ADDR_EXP 43
12995: PUSH
12996: LD_INT 98
12998: ST_TO_ADDR
// tech_Artillery := 80 ;
12999: LD_ADDR_EXP 51
13003: PUSH
13004: LD_INT 80
13006: ST_TO_ADDR
// tech_RadMat := 81 ;
13007: LD_ADDR_EXP 52
13011: PUSH
13012: LD_INT 81
13014: ST_TO_ADDR
// tech_BasicTools := 82 ;
13015: LD_ADDR_EXP 53
13019: PUSH
13020: LD_INT 82
13022: ST_TO_ADDR
// tech_Cargo := 83 ;
13023: LD_ADDR_EXP 54
13027: PUSH
13028: LD_INT 83
13030: ST_TO_ADDR
// tech_Track := 84 ;
13031: LD_ADDR_EXP 55
13035: PUSH
13036: LD_INT 84
13038: ST_TO_ADDR
// tech_Crane := 85 ;
13039: LD_ADDR_EXP 56
13043: PUSH
13044: LD_INT 85
13046: ST_TO_ADDR
// tech_Bulldozer := 86 ;
13047: LD_ADDR_EXP 57
13051: PUSH
13052: LD_INT 86
13054: ST_TO_ADDR
// tech_Hovercraft := 87 ;
13055: LD_ADDR_EXP 58
13059: PUSH
13060: LD_INT 87
13062: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
13063: LD_ADDR_EXP 59
13067: PUSH
13068: LD_INT 88
13070: ST_TO_ADDR
// class_mastodont := 31 ;
13071: LD_ADDR_EXP 60
13075: PUSH
13076: LD_INT 31
13078: ST_TO_ADDR
// class_horse := 21 ;
13079: LD_ADDR_EXP 61
13083: PUSH
13084: LD_INT 21
13086: ST_TO_ADDR
// end ;
13087: LD_VAR 0 1
13091: RET
// every 1 do
13092: GO 13094
13094: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
13095: CALL 12932 0 0
13099: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13100: LD_INT 0
13102: PPUSH
// if p2 = 100 then
13103: LD_VAR 0 2
13107: PUSH
13108: LD_INT 100
13110: EQUAL
13111: IFFALSE 14060
// begin if not StreamModeActive then
13113: LD_EXP 62
13117: NOT
13118: IFFALSE 13128
// StreamModeActive := true ;
13120: LD_ADDR_EXP 62
13124: PUSH
13125: LD_INT 1
13127: ST_TO_ADDR
// if p3 = 0 then
13128: LD_VAR 0 3
13132: PUSH
13133: LD_INT 0
13135: EQUAL
13136: IFFALSE 13142
// InitStreamMode ;
13138: CALL 14220 0 0
// if p3 = 1 then
13142: LD_VAR 0 3
13146: PUSH
13147: LD_INT 1
13149: EQUAL
13150: IFFALSE 13160
// sRocket := true ;
13152: LD_ADDR_EXP 67
13156: PUSH
13157: LD_INT 1
13159: ST_TO_ADDR
// if p3 = 2 then
13160: LD_VAR 0 3
13164: PUSH
13165: LD_INT 2
13167: EQUAL
13168: IFFALSE 13178
// sSpeed := true ;
13170: LD_ADDR_EXP 66
13174: PUSH
13175: LD_INT 1
13177: ST_TO_ADDR
// if p3 = 3 then
13178: LD_VAR 0 3
13182: PUSH
13183: LD_INT 3
13185: EQUAL
13186: IFFALSE 13196
// sEngine := true ;
13188: LD_ADDR_EXP 68
13192: PUSH
13193: LD_INT 1
13195: ST_TO_ADDR
// if p3 = 4 then
13196: LD_VAR 0 3
13200: PUSH
13201: LD_INT 4
13203: EQUAL
13204: IFFALSE 13214
// sSpec := true ;
13206: LD_ADDR_EXP 65
13210: PUSH
13211: LD_INT 1
13213: ST_TO_ADDR
// if p3 = 5 then
13214: LD_VAR 0 3
13218: PUSH
13219: LD_INT 5
13221: EQUAL
13222: IFFALSE 13232
// sLevel := true ;
13224: LD_ADDR_EXP 69
13228: PUSH
13229: LD_INT 1
13231: ST_TO_ADDR
// if p3 = 6 then
13232: LD_VAR 0 3
13236: PUSH
13237: LD_INT 6
13239: EQUAL
13240: IFFALSE 13250
// sArmoury := true ;
13242: LD_ADDR_EXP 70
13246: PUSH
13247: LD_INT 1
13249: ST_TO_ADDR
// if p3 = 7 then
13250: LD_VAR 0 3
13254: PUSH
13255: LD_INT 7
13257: EQUAL
13258: IFFALSE 13268
// sRadar := true ;
13260: LD_ADDR_EXP 71
13264: PUSH
13265: LD_INT 1
13267: ST_TO_ADDR
// if p3 = 8 then
13268: LD_VAR 0 3
13272: PUSH
13273: LD_INT 8
13275: EQUAL
13276: IFFALSE 13286
// sBunker := true ;
13278: LD_ADDR_EXP 72
13282: PUSH
13283: LD_INT 1
13285: ST_TO_ADDR
// if p3 = 9 then
13286: LD_VAR 0 3
13290: PUSH
13291: LD_INT 9
13293: EQUAL
13294: IFFALSE 13304
// sHack := true ;
13296: LD_ADDR_EXP 73
13300: PUSH
13301: LD_INT 1
13303: ST_TO_ADDR
// if p3 = 10 then
13304: LD_VAR 0 3
13308: PUSH
13309: LD_INT 10
13311: EQUAL
13312: IFFALSE 13322
// sFire := true ;
13314: LD_ADDR_EXP 74
13318: PUSH
13319: LD_INT 1
13321: ST_TO_ADDR
// if p3 = 11 then
13322: LD_VAR 0 3
13326: PUSH
13327: LD_INT 11
13329: EQUAL
13330: IFFALSE 13340
// sRefresh := true ;
13332: LD_ADDR_EXP 75
13336: PUSH
13337: LD_INT 1
13339: ST_TO_ADDR
// if p3 = 12 then
13340: LD_VAR 0 3
13344: PUSH
13345: LD_INT 12
13347: EQUAL
13348: IFFALSE 13358
// sExp := true ;
13350: LD_ADDR_EXP 76
13354: PUSH
13355: LD_INT 1
13357: ST_TO_ADDR
// if p3 = 13 then
13358: LD_VAR 0 3
13362: PUSH
13363: LD_INT 13
13365: EQUAL
13366: IFFALSE 13376
// sDepot := true ;
13368: LD_ADDR_EXP 77
13372: PUSH
13373: LD_INT 1
13375: ST_TO_ADDR
// if p3 = 14 then
13376: LD_VAR 0 3
13380: PUSH
13381: LD_INT 14
13383: EQUAL
13384: IFFALSE 13394
// sFlag := true ;
13386: LD_ADDR_EXP 78
13390: PUSH
13391: LD_INT 1
13393: ST_TO_ADDR
// if p3 = 15 then
13394: LD_VAR 0 3
13398: PUSH
13399: LD_INT 15
13401: EQUAL
13402: IFFALSE 13412
// sKamikadze := true ;
13404: LD_ADDR_EXP 86
13408: PUSH
13409: LD_INT 1
13411: ST_TO_ADDR
// if p3 = 16 then
13412: LD_VAR 0 3
13416: PUSH
13417: LD_INT 16
13419: EQUAL
13420: IFFALSE 13430
// sTroll := true ;
13422: LD_ADDR_EXP 87
13426: PUSH
13427: LD_INT 1
13429: ST_TO_ADDR
// if p3 = 17 then
13430: LD_VAR 0 3
13434: PUSH
13435: LD_INT 17
13437: EQUAL
13438: IFFALSE 13448
// sSlow := true ;
13440: LD_ADDR_EXP 88
13444: PUSH
13445: LD_INT 1
13447: ST_TO_ADDR
// if p3 = 18 then
13448: LD_VAR 0 3
13452: PUSH
13453: LD_INT 18
13455: EQUAL
13456: IFFALSE 13466
// sLack := true ;
13458: LD_ADDR_EXP 89
13462: PUSH
13463: LD_INT 1
13465: ST_TO_ADDR
// if p3 = 19 then
13466: LD_VAR 0 3
13470: PUSH
13471: LD_INT 19
13473: EQUAL
13474: IFFALSE 13484
// sTank := true ;
13476: LD_ADDR_EXP 91
13480: PUSH
13481: LD_INT 1
13483: ST_TO_ADDR
// if p3 = 20 then
13484: LD_VAR 0 3
13488: PUSH
13489: LD_INT 20
13491: EQUAL
13492: IFFALSE 13502
// sRemote := true ;
13494: LD_ADDR_EXP 92
13498: PUSH
13499: LD_INT 1
13501: ST_TO_ADDR
// if p3 = 21 then
13502: LD_VAR 0 3
13506: PUSH
13507: LD_INT 21
13509: EQUAL
13510: IFFALSE 13520
// sPowell := true ;
13512: LD_ADDR_EXP 93
13516: PUSH
13517: LD_INT 1
13519: ST_TO_ADDR
// if p3 = 22 then
13520: LD_VAR 0 3
13524: PUSH
13525: LD_INT 22
13527: EQUAL
13528: IFFALSE 13538
// sTeleport := true ;
13530: LD_ADDR_EXP 96
13534: PUSH
13535: LD_INT 1
13537: ST_TO_ADDR
// if p3 = 23 then
13538: LD_VAR 0 3
13542: PUSH
13543: LD_INT 23
13545: EQUAL
13546: IFFALSE 13556
// sOilTower := true ;
13548: LD_ADDR_EXP 98
13552: PUSH
13553: LD_INT 1
13555: ST_TO_ADDR
// if p3 = 24 then
13556: LD_VAR 0 3
13560: PUSH
13561: LD_INT 24
13563: EQUAL
13564: IFFALSE 13574
// sShovel := true ;
13566: LD_ADDR_EXP 99
13570: PUSH
13571: LD_INT 1
13573: ST_TO_ADDR
// if p3 = 25 then
13574: LD_VAR 0 3
13578: PUSH
13579: LD_INT 25
13581: EQUAL
13582: IFFALSE 13592
// sSheik := true ;
13584: LD_ADDR_EXP 100
13588: PUSH
13589: LD_INT 1
13591: ST_TO_ADDR
// if p3 = 26 then
13592: LD_VAR 0 3
13596: PUSH
13597: LD_INT 26
13599: EQUAL
13600: IFFALSE 13610
// sEarthquake := true ;
13602: LD_ADDR_EXP 102
13606: PUSH
13607: LD_INT 1
13609: ST_TO_ADDR
// if p3 = 27 then
13610: LD_VAR 0 3
13614: PUSH
13615: LD_INT 27
13617: EQUAL
13618: IFFALSE 13628
// sAI := true ;
13620: LD_ADDR_EXP 103
13624: PUSH
13625: LD_INT 1
13627: ST_TO_ADDR
// if p3 = 28 then
13628: LD_VAR 0 3
13632: PUSH
13633: LD_INT 28
13635: EQUAL
13636: IFFALSE 13646
// sCargo := true ;
13638: LD_ADDR_EXP 106
13642: PUSH
13643: LD_INT 1
13645: ST_TO_ADDR
// if p3 = 29 then
13646: LD_VAR 0 3
13650: PUSH
13651: LD_INT 29
13653: EQUAL
13654: IFFALSE 13664
// sDLaser := true ;
13656: LD_ADDR_EXP 107
13660: PUSH
13661: LD_INT 1
13663: ST_TO_ADDR
// if p3 = 30 then
13664: LD_VAR 0 3
13668: PUSH
13669: LD_INT 30
13671: EQUAL
13672: IFFALSE 13682
// sExchange := true ;
13674: LD_ADDR_EXP 108
13678: PUSH
13679: LD_INT 1
13681: ST_TO_ADDR
// if p3 = 31 then
13682: LD_VAR 0 3
13686: PUSH
13687: LD_INT 31
13689: EQUAL
13690: IFFALSE 13700
// sFac := true ;
13692: LD_ADDR_EXP 109
13696: PUSH
13697: LD_INT 1
13699: ST_TO_ADDR
// if p3 = 32 then
13700: LD_VAR 0 3
13704: PUSH
13705: LD_INT 32
13707: EQUAL
13708: IFFALSE 13718
// sPower := true ;
13710: LD_ADDR_EXP 110
13714: PUSH
13715: LD_INT 1
13717: ST_TO_ADDR
// if p3 = 33 then
13718: LD_VAR 0 3
13722: PUSH
13723: LD_INT 33
13725: EQUAL
13726: IFFALSE 13736
// sRandom := true ;
13728: LD_ADDR_EXP 111
13732: PUSH
13733: LD_INT 1
13735: ST_TO_ADDR
// if p3 = 34 then
13736: LD_VAR 0 3
13740: PUSH
13741: LD_INT 34
13743: EQUAL
13744: IFFALSE 13754
// sShield := true ;
13746: LD_ADDR_EXP 112
13750: PUSH
13751: LD_INT 1
13753: ST_TO_ADDR
// if p3 = 35 then
13754: LD_VAR 0 3
13758: PUSH
13759: LD_INT 35
13761: EQUAL
13762: IFFALSE 13772
// sTime := true ;
13764: LD_ADDR_EXP 113
13768: PUSH
13769: LD_INT 1
13771: ST_TO_ADDR
// if p3 = 36 then
13772: LD_VAR 0 3
13776: PUSH
13777: LD_INT 36
13779: EQUAL
13780: IFFALSE 13790
// sTools := true ;
13782: LD_ADDR_EXP 114
13786: PUSH
13787: LD_INT 1
13789: ST_TO_ADDR
// if p3 = 101 then
13790: LD_VAR 0 3
13794: PUSH
13795: LD_INT 101
13797: EQUAL
13798: IFFALSE 13808
// sSold := true ;
13800: LD_ADDR_EXP 79
13804: PUSH
13805: LD_INT 1
13807: ST_TO_ADDR
// if p3 = 102 then
13808: LD_VAR 0 3
13812: PUSH
13813: LD_INT 102
13815: EQUAL
13816: IFFALSE 13826
// sDiff := true ;
13818: LD_ADDR_EXP 80
13822: PUSH
13823: LD_INT 1
13825: ST_TO_ADDR
// if p3 = 103 then
13826: LD_VAR 0 3
13830: PUSH
13831: LD_INT 103
13833: EQUAL
13834: IFFALSE 13844
// sFog := true ;
13836: LD_ADDR_EXP 83
13840: PUSH
13841: LD_INT 1
13843: ST_TO_ADDR
// if p3 = 104 then
13844: LD_VAR 0 3
13848: PUSH
13849: LD_INT 104
13851: EQUAL
13852: IFFALSE 13862
// sReset := true ;
13854: LD_ADDR_EXP 84
13858: PUSH
13859: LD_INT 1
13861: ST_TO_ADDR
// if p3 = 105 then
13862: LD_VAR 0 3
13866: PUSH
13867: LD_INT 105
13869: EQUAL
13870: IFFALSE 13880
// sSun := true ;
13872: LD_ADDR_EXP 85
13876: PUSH
13877: LD_INT 1
13879: ST_TO_ADDR
// if p3 = 106 then
13880: LD_VAR 0 3
13884: PUSH
13885: LD_INT 106
13887: EQUAL
13888: IFFALSE 13898
// sTiger := true ;
13890: LD_ADDR_EXP 81
13894: PUSH
13895: LD_INT 1
13897: ST_TO_ADDR
// if p3 = 107 then
13898: LD_VAR 0 3
13902: PUSH
13903: LD_INT 107
13905: EQUAL
13906: IFFALSE 13916
// sBomb := true ;
13908: LD_ADDR_EXP 82
13912: PUSH
13913: LD_INT 1
13915: ST_TO_ADDR
// if p3 = 108 then
13916: LD_VAR 0 3
13920: PUSH
13921: LD_INT 108
13923: EQUAL
13924: IFFALSE 13934
// sWound := true ;
13926: LD_ADDR_EXP 90
13930: PUSH
13931: LD_INT 1
13933: ST_TO_ADDR
// if p3 = 109 then
13934: LD_VAR 0 3
13938: PUSH
13939: LD_INT 109
13941: EQUAL
13942: IFFALSE 13952
// sBetray := true ;
13944: LD_ADDR_EXP 94
13948: PUSH
13949: LD_INT 1
13951: ST_TO_ADDR
// if p3 = 110 then
13952: LD_VAR 0 3
13956: PUSH
13957: LD_INT 110
13959: EQUAL
13960: IFFALSE 13970
// sContamin := true ;
13962: LD_ADDR_EXP 95
13966: PUSH
13967: LD_INT 1
13969: ST_TO_ADDR
// if p3 = 111 then
13970: LD_VAR 0 3
13974: PUSH
13975: LD_INT 111
13977: EQUAL
13978: IFFALSE 13988
// sOil := true ;
13980: LD_ADDR_EXP 97
13984: PUSH
13985: LD_INT 1
13987: ST_TO_ADDR
// if p3 = 112 then
13988: LD_VAR 0 3
13992: PUSH
13993: LD_INT 112
13995: EQUAL
13996: IFFALSE 14006
// sStu := true ;
13998: LD_ADDR_EXP 101
14002: PUSH
14003: LD_INT 1
14005: ST_TO_ADDR
// if p3 = 113 then
14006: LD_VAR 0 3
14010: PUSH
14011: LD_INT 113
14013: EQUAL
14014: IFFALSE 14024
// sBazooka := true ;
14016: LD_ADDR_EXP 104
14020: PUSH
14021: LD_INT 1
14023: ST_TO_ADDR
// if p3 = 114 then
14024: LD_VAR 0 3
14028: PUSH
14029: LD_INT 114
14031: EQUAL
14032: IFFALSE 14042
// sMortar := true ;
14034: LD_ADDR_EXP 105
14038: PUSH
14039: LD_INT 1
14041: ST_TO_ADDR
// if p3 = 115 then
14042: LD_VAR 0 3
14046: PUSH
14047: LD_INT 115
14049: EQUAL
14050: IFFALSE 14060
// sRanger := true ;
14052: LD_ADDR_EXP 115
14056: PUSH
14057: LD_INT 1
14059: ST_TO_ADDR
// end ; if p2 = 101 then
14060: LD_VAR 0 2
14064: PUSH
14065: LD_INT 101
14067: EQUAL
14068: IFFALSE 14196
// begin case p3 of 1 :
14070: LD_VAR 0 3
14074: PUSH
14075: LD_INT 1
14077: DOUBLE
14078: EQUAL
14079: IFTRUE 14083
14081: GO 14090
14083: POP
// hHackUnlimitedResources ; 2 :
14084: CALL 25233 0 0
14088: GO 14196
14090: LD_INT 2
14092: DOUBLE
14093: EQUAL
14094: IFTRUE 14098
14096: GO 14105
14098: POP
// hHackSetLevel10 ; 3 :
14099: CALL 25366 0 0
14103: GO 14196
14105: LD_INT 3
14107: DOUBLE
14108: EQUAL
14109: IFTRUE 14113
14111: GO 14120
14113: POP
// hHackSetLevel10YourUnits ; 4 :
14114: CALL 25451 0 0
14118: GO 14196
14120: LD_INT 4
14122: DOUBLE
14123: EQUAL
14124: IFTRUE 14128
14126: GO 14135
14128: POP
// hHackInvincible ; 5 :
14129: CALL 25899 0 0
14133: GO 14196
14135: LD_INT 5
14137: DOUBLE
14138: EQUAL
14139: IFTRUE 14143
14141: GO 14150
14143: POP
// hHackInvisible ; 6 :
14144: CALL 26010 0 0
14148: GO 14196
14150: LD_INT 6
14152: DOUBLE
14153: EQUAL
14154: IFTRUE 14158
14156: GO 14165
14158: POP
// hHackChangeYourSide ; 7 :
14159: CALL 26067 0 0
14163: GO 14196
14165: LD_INT 7
14167: DOUBLE
14168: EQUAL
14169: IFTRUE 14173
14171: GO 14180
14173: POP
// hHackChangeUnitSide ; 8 :
14174: CALL 26109 0 0
14178: GO 14196
14180: LD_INT 8
14182: DOUBLE
14183: EQUAL
14184: IFTRUE 14188
14186: GO 14195
14188: POP
// hHackFog ; end ;
14189: CALL 26210 0 0
14193: GO 14196
14195: POP
// end ; end ;
14196: LD_VAR 0 7
14200: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
14201: GO 14203
14203: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
14204: LD_STRING initStreamRollete();
14206: PPUSH
14207: CALL_OW 559
// InitStreamMode ;
14211: CALL 14220 0 0
// DefineStreamItems ( ) ;
14215: CALL 14660 0 0
// end ;
14219: END
// function InitStreamMode ; begin
14220: LD_INT 0
14222: PPUSH
// streamModeActive := false ;
14223: LD_ADDR_EXP 62
14227: PUSH
14228: LD_INT 0
14230: ST_TO_ADDR
// normalCounter := 36 ;
14231: LD_ADDR_EXP 63
14235: PUSH
14236: LD_INT 36
14238: ST_TO_ADDR
// hardcoreCounter := 16 ;
14239: LD_ADDR_EXP 64
14243: PUSH
14244: LD_INT 16
14246: ST_TO_ADDR
// sRocket := false ;
14247: LD_ADDR_EXP 67
14251: PUSH
14252: LD_INT 0
14254: ST_TO_ADDR
// sSpeed := false ;
14255: LD_ADDR_EXP 66
14259: PUSH
14260: LD_INT 0
14262: ST_TO_ADDR
// sEngine := false ;
14263: LD_ADDR_EXP 68
14267: PUSH
14268: LD_INT 0
14270: ST_TO_ADDR
// sSpec := false ;
14271: LD_ADDR_EXP 65
14275: PUSH
14276: LD_INT 0
14278: ST_TO_ADDR
// sLevel := false ;
14279: LD_ADDR_EXP 69
14283: PUSH
14284: LD_INT 0
14286: ST_TO_ADDR
// sArmoury := false ;
14287: LD_ADDR_EXP 70
14291: PUSH
14292: LD_INT 0
14294: ST_TO_ADDR
// sRadar := false ;
14295: LD_ADDR_EXP 71
14299: PUSH
14300: LD_INT 0
14302: ST_TO_ADDR
// sBunker := false ;
14303: LD_ADDR_EXP 72
14307: PUSH
14308: LD_INT 0
14310: ST_TO_ADDR
// sHack := false ;
14311: LD_ADDR_EXP 73
14315: PUSH
14316: LD_INT 0
14318: ST_TO_ADDR
// sFire := false ;
14319: LD_ADDR_EXP 74
14323: PUSH
14324: LD_INT 0
14326: ST_TO_ADDR
// sRefresh := false ;
14327: LD_ADDR_EXP 75
14331: PUSH
14332: LD_INT 0
14334: ST_TO_ADDR
// sExp := false ;
14335: LD_ADDR_EXP 76
14339: PUSH
14340: LD_INT 0
14342: ST_TO_ADDR
// sDepot := false ;
14343: LD_ADDR_EXP 77
14347: PUSH
14348: LD_INT 0
14350: ST_TO_ADDR
// sFlag := false ;
14351: LD_ADDR_EXP 78
14355: PUSH
14356: LD_INT 0
14358: ST_TO_ADDR
// sKamikadze := false ;
14359: LD_ADDR_EXP 86
14363: PUSH
14364: LD_INT 0
14366: ST_TO_ADDR
// sTroll := false ;
14367: LD_ADDR_EXP 87
14371: PUSH
14372: LD_INT 0
14374: ST_TO_ADDR
// sSlow := false ;
14375: LD_ADDR_EXP 88
14379: PUSH
14380: LD_INT 0
14382: ST_TO_ADDR
// sLack := false ;
14383: LD_ADDR_EXP 89
14387: PUSH
14388: LD_INT 0
14390: ST_TO_ADDR
// sTank := false ;
14391: LD_ADDR_EXP 91
14395: PUSH
14396: LD_INT 0
14398: ST_TO_ADDR
// sRemote := false ;
14399: LD_ADDR_EXP 92
14403: PUSH
14404: LD_INT 0
14406: ST_TO_ADDR
// sPowell := false ;
14407: LD_ADDR_EXP 93
14411: PUSH
14412: LD_INT 0
14414: ST_TO_ADDR
// sTeleport := false ;
14415: LD_ADDR_EXP 96
14419: PUSH
14420: LD_INT 0
14422: ST_TO_ADDR
// sOilTower := false ;
14423: LD_ADDR_EXP 98
14427: PUSH
14428: LD_INT 0
14430: ST_TO_ADDR
// sShovel := false ;
14431: LD_ADDR_EXP 99
14435: PUSH
14436: LD_INT 0
14438: ST_TO_ADDR
// sSheik := false ;
14439: LD_ADDR_EXP 100
14443: PUSH
14444: LD_INT 0
14446: ST_TO_ADDR
// sEarthquake := false ;
14447: LD_ADDR_EXP 102
14451: PUSH
14452: LD_INT 0
14454: ST_TO_ADDR
// sAI := false ;
14455: LD_ADDR_EXP 103
14459: PUSH
14460: LD_INT 0
14462: ST_TO_ADDR
// sCargo := false ;
14463: LD_ADDR_EXP 106
14467: PUSH
14468: LD_INT 0
14470: ST_TO_ADDR
// sDLaser := false ;
14471: LD_ADDR_EXP 107
14475: PUSH
14476: LD_INT 0
14478: ST_TO_ADDR
// sExchange := false ;
14479: LD_ADDR_EXP 108
14483: PUSH
14484: LD_INT 0
14486: ST_TO_ADDR
// sFac := false ;
14487: LD_ADDR_EXP 109
14491: PUSH
14492: LD_INT 0
14494: ST_TO_ADDR
// sPower := false ;
14495: LD_ADDR_EXP 110
14499: PUSH
14500: LD_INT 0
14502: ST_TO_ADDR
// sRandom := false ;
14503: LD_ADDR_EXP 111
14507: PUSH
14508: LD_INT 0
14510: ST_TO_ADDR
// sShield := false ;
14511: LD_ADDR_EXP 112
14515: PUSH
14516: LD_INT 0
14518: ST_TO_ADDR
// sTime := false ;
14519: LD_ADDR_EXP 113
14523: PUSH
14524: LD_INT 0
14526: ST_TO_ADDR
// sTools := false ;
14527: LD_ADDR_EXP 114
14531: PUSH
14532: LD_INT 0
14534: ST_TO_ADDR
// sSold := false ;
14535: LD_ADDR_EXP 79
14539: PUSH
14540: LD_INT 0
14542: ST_TO_ADDR
// sDiff := false ;
14543: LD_ADDR_EXP 80
14547: PUSH
14548: LD_INT 0
14550: ST_TO_ADDR
// sFog := false ;
14551: LD_ADDR_EXP 83
14555: PUSH
14556: LD_INT 0
14558: ST_TO_ADDR
// sReset := false ;
14559: LD_ADDR_EXP 84
14563: PUSH
14564: LD_INT 0
14566: ST_TO_ADDR
// sSun := false ;
14567: LD_ADDR_EXP 85
14571: PUSH
14572: LD_INT 0
14574: ST_TO_ADDR
// sTiger := false ;
14575: LD_ADDR_EXP 81
14579: PUSH
14580: LD_INT 0
14582: ST_TO_ADDR
// sBomb := false ;
14583: LD_ADDR_EXP 82
14587: PUSH
14588: LD_INT 0
14590: ST_TO_ADDR
// sWound := false ;
14591: LD_ADDR_EXP 90
14595: PUSH
14596: LD_INT 0
14598: ST_TO_ADDR
// sBetray := false ;
14599: LD_ADDR_EXP 94
14603: PUSH
14604: LD_INT 0
14606: ST_TO_ADDR
// sContamin := false ;
14607: LD_ADDR_EXP 95
14611: PUSH
14612: LD_INT 0
14614: ST_TO_ADDR
// sOil := false ;
14615: LD_ADDR_EXP 97
14619: PUSH
14620: LD_INT 0
14622: ST_TO_ADDR
// sStu := false ;
14623: LD_ADDR_EXP 101
14627: PUSH
14628: LD_INT 0
14630: ST_TO_ADDR
// sBazooka := false ;
14631: LD_ADDR_EXP 104
14635: PUSH
14636: LD_INT 0
14638: ST_TO_ADDR
// sMortar := false ;
14639: LD_ADDR_EXP 105
14643: PUSH
14644: LD_INT 0
14646: ST_TO_ADDR
// sRanger := false ;
14647: LD_ADDR_EXP 115
14651: PUSH
14652: LD_INT 0
14654: ST_TO_ADDR
// end ;
14655: LD_VAR 0 1
14659: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
14660: LD_INT 0
14662: PPUSH
14663: PPUSH
14664: PPUSH
14665: PPUSH
14666: PPUSH
// result := [ ] ;
14667: LD_ADDR_VAR 0 1
14671: PUSH
14672: EMPTY
14673: ST_TO_ADDR
// if campaign_id = 1 then
14674: LD_OWVAR 69
14678: PUSH
14679: LD_INT 1
14681: EQUAL
14682: IFFALSE 17620
// begin case mission_number of 1 :
14684: LD_OWVAR 70
14688: PUSH
14689: LD_INT 1
14691: DOUBLE
14692: EQUAL
14693: IFTRUE 14697
14695: GO 14761
14697: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
14698: LD_ADDR_VAR 0 1
14702: PUSH
14703: LD_INT 2
14705: PUSH
14706: LD_INT 4
14708: PUSH
14709: LD_INT 11
14711: PUSH
14712: LD_INT 12
14714: PUSH
14715: LD_INT 15
14717: PUSH
14718: LD_INT 16
14720: PUSH
14721: LD_INT 22
14723: PUSH
14724: LD_INT 23
14726: PUSH
14727: LD_INT 26
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 101
14743: PUSH
14744: LD_INT 102
14746: PUSH
14747: LD_INT 106
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: LIST
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: ST_TO_ADDR
14759: GO 17618
14761: LD_INT 2
14763: DOUBLE
14764: EQUAL
14765: IFTRUE 14769
14767: GO 14841
14769: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
14770: LD_ADDR_VAR 0 1
14774: PUSH
14775: LD_INT 2
14777: PUSH
14778: LD_INT 4
14780: PUSH
14781: LD_INT 11
14783: PUSH
14784: LD_INT 12
14786: PUSH
14787: LD_INT 15
14789: PUSH
14790: LD_INT 16
14792: PUSH
14793: LD_INT 22
14795: PUSH
14796: LD_INT 23
14798: PUSH
14799: LD_INT 26
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: PUSH
14813: LD_INT 101
14815: PUSH
14816: LD_INT 102
14818: PUSH
14819: LD_INT 105
14821: PUSH
14822: LD_INT 106
14824: PUSH
14825: LD_INT 108
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: ST_TO_ADDR
14839: GO 17618
14841: LD_INT 3
14843: DOUBLE
14844: EQUAL
14845: IFTRUE 14849
14847: GO 14925
14849: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
14850: LD_ADDR_VAR 0 1
14854: PUSH
14855: LD_INT 2
14857: PUSH
14858: LD_INT 4
14860: PUSH
14861: LD_INT 5
14863: PUSH
14864: LD_INT 11
14866: PUSH
14867: LD_INT 12
14869: PUSH
14870: LD_INT 15
14872: PUSH
14873: LD_INT 16
14875: PUSH
14876: LD_INT 22
14878: PUSH
14879: LD_INT 26
14881: PUSH
14882: LD_INT 36
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: PUSH
14897: LD_INT 101
14899: PUSH
14900: LD_INT 102
14902: PUSH
14903: LD_INT 105
14905: PUSH
14906: LD_INT 106
14908: PUSH
14909: LD_INT 108
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: ST_TO_ADDR
14923: GO 17618
14925: LD_INT 4
14927: DOUBLE
14928: EQUAL
14929: IFTRUE 14933
14931: GO 15017
14933: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
14934: LD_ADDR_VAR 0 1
14938: PUSH
14939: LD_INT 2
14941: PUSH
14942: LD_INT 4
14944: PUSH
14945: LD_INT 5
14947: PUSH
14948: LD_INT 8
14950: PUSH
14951: LD_INT 11
14953: PUSH
14954: LD_INT 12
14956: PUSH
14957: LD_INT 15
14959: PUSH
14960: LD_INT 16
14962: PUSH
14963: LD_INT 22
14965: PUSH
14966: LD_INT 23
14968: PUSH
14969: LD_INT 26
14971: PUSH
14972: LD_INT 36
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: PUSH
14989: LD_INT 101
14991: PUSH
14992: LD_INT 102
14994: PUSH
14995: LD_INT 105
14997: PUSH
14998: LD_INT 106
15000: PUSH
15001: LD_INT 108
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: ST_TO_ADDR
15015: GO 17618
15017: LD_INT 5
15019: DOUBLE
15020: EQUAL
15021: IFTRUE 15025
15023: GO 15125
15025: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
15026: LD_ADDR_VAR 0 1
15030: PUSH
15031: LD_INT 2
15033: PUSH
15034: LD_INT 4
15036: PUSH
15037: LD_INT 5
15039: PUSH
15040: LD_INT 6
15042: PUSH
15043: LD_INT 8
15045: PUSH
15046: LD_INT 11
15048: PUSH
15049: LD_INT 12
15051: PUSH
15052: LD_INT 15
15054: PUSH
15055: LD_INT 16
15057: PUSH
15058: LD_INT 22
15060: PUSH
15061: LD_INT 23
15063: PUSH
15064: LD_INT 25
15066: PUSH
15067: LD_INT 26
15069: PUSH
15070: LD_INT 36
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: PUSH
15089: LD_INT 101
15091: PUSH
15092: LD_INT 102
15094: PUSH
15095: LD_INT 105
15097: PUSH
15098: LD_INT 106
15100: PUSH
15101: LD_INT 108
15103: PUSH
15104: LD_INT 109
15106: PUSH
15107: LD_INT 112
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: ST_TO_ADDR
15123: GO 17618
15125: LD_INT 6
15127: DOUBLE
15128: EQUAL
15129: IFTRUE 15133
15131: GO 15253
15133: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
15134: LD_ADDR_VAR 0 1
15138: PUSH
15139: LD_INT 2
15141: PUSH
15142: LD_INT 4
15144: PUSH
15145: LD_INT 5
15147: PUSH
15148: LD_INT 6
15150: PUSH
15151: LD_INT 8
15153: PUSH
15154: LD_INT 11
15156: PUSH
15157: LD_INT 12
15159: PUSH
15160: LD_INT 15
15162: PUSH
15163: LD_INT 16
15165: PUSH
15166: LD_INT 20
15168: PUSH
15169: LD_INT 21
15171: PUSH
15172: LD_INT 22
15174: PUSH
15175: LD_INT 23
15177: PUSH
15178: LD_INT 25
15180: PUSH
15181: LD_INT 26
15183: PUSH
15184: LD_INT 30
15186: PUSH
15187: LD_INT 31
15189: PUSH
15190: LD_INT 32
15192: PUSH
15193: LD_INT 36
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: PUSH
15217: LD_INT 101
15219: PUSH
15220: LD_INT 102
15222: PUSH
15223: LD_INT 105
15225: PUSH
15226: LD_INT 106
15228: PUSH
15229: LD_INT 108
15231: PUSH
15232: LD_INT 109
15234: PUSH
15235: LD_INT 112
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: ST_TO_ADDR
15251: GO 17618
15253: LD_INT 7
15255: DOUBLE
15256: EQUAL
15257: IFTRUE 15261
15259: GO 15361
15261: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
15262: LD_ADDR_VAR 0 1
15266: PUSH
15267: LD_INT 2
15269: PUSH
15270: LD_INT 4
15272: PUSH
15273: LD_INT 5
15275: PUSH
15276: LD_INT 7
15278: PUSH
15279: LD_INT 11
15281: PUSH
15282: LD_INT 12
15284: PUSH
15285: LD_INT 15
15287: PUSH
15288: LD_INT 16
15290: PUSH
15291: LD_INT 20
15293: PUSH
15294: LD_INT 21
15296: PUSH
15297: LD_INT 22
15299: PUSH
15300: LD_INT 23
15302: PUSH
15303: LD_INT 25
15305: PUSH
15306: LD_INT 26
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: PUSH
15325: LD_INT 101
15327: PUSH
15328: LD_INT 102
15330: PUSH
15331: LD_INT 103
15333: PUSH
15334: LD_INT 105
15336: PUSH
15337: LD_INT 106
15339: PUSH
15340: LD_INT 108
15342: PUSH
15343: LD_INT 112
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: ST_TO_ADDR
15359: GO 17618
15361: LD_INT 8
15363: DOUBLE
15364: EQUAL
15365: IFTRUE 15369
15367: GO 15497
15369: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
15370: LD_ADDR_VAR 0 1
15374: PUSH
15375: LD_INT 2
15377: PUSH
15378: LD_INT 4
15380: PUSH
15381: LD_INT 5
15383: PUSH
15384: LD_INT 6
15386: PUSH
15387: LD_INT 7
15389: PUSH
15390: LD_INT 8
15392: PUSH
15393: LD_INT 11
15395: PUSH
15396: LD_INT 12
15398: PUSH
15399: LD_INT 15
15401: PUSH
15402: LD_INT 16
15404: PUSH
15405: LD_INT 20
15407: PUSH
15408: LD_INT 21
15410: PUSH
15411: LD_INT 22
15413: PUSH
15414: LD_INT 23
15416: PUSH
15417: LD_INT 25
15419: PUSH
15420: LD_INT 26
15422: PUSH
15423: LD_INT 30
15425: PUSH
15426: LD_INT 31
15428: PUSH
15429: LD_INT 32
15431: PUSH
15432: LD_INT 36
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: PUSH
15457: LD_INT 101
15459: PUSH
15460: LD_INT 102
15462: PUSH
15463: LD_INT 103
15465: PUSH
15466: LD_INT 105
15468: PUSH
15469: LD_INT 106
15471: PUSH
15472: LD_INT 108
15474: PUSH
15475: LD_INT 109
15477: PUSH
15478: LD_INT 112
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: ST_TO_ADDR
15495: GO 17618
15497: LD_INT 9
15499: DOUBLE
15500: EQUAL
15501: IFTRUE 15505
15503: GO 15641
15505: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
15506: LD_ADDR_VAR 0 1
15510: PUSH
15511: LD_INT 2
15513: PUSH
15514: LD_INT 4
15516: PUSH
15517: LD_INT 5
15519: PUSH
15520: LD_INT 6
15522: PUSH
15523: LD_INT 7
15525: PUSH
15526: LD_INT 8
15528: PUSH
15529: LD_INT 11
15531: PUSH
15532: LD_INT 12
15534: PUSH
15535: LD_INT 15
15537: PUSH
15538: LD_INT 16
15540: PUSH
15541: LD_INT 20
15543: PUSH
15544: LD_INT 21
15546: PUSH
15547: LD_INT 22
15549: PUSH
15550: LD_INT 23
15552: PUSH
15553: LD_INT 25
15555: PUSH
15556: LD_INT 26
15558: PUSH
15559: LD_INT 28
15561: PUSH
15562: LD_INT 30
15564: PUSH
15565: LD_INT 31
15567: PUSH
15568: LD_INT 32
15570: PUSH
15571: LD_INT 36
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 101
15599: PUSH
15600: LD_INT 102
15602: PUSH
15603: LD_INT 103
15605: PUSH
15606: LD_INT 105
15608: PUSH
15609: LD_INT 106
15611: PUSH
15612: LD_INT 108
15614: PUSH
15615: LD_INT 109
15617: PUSH
15618: LD_INT 112
15620: PUSH
15621: LD_INT 114
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: ST_TO_ADDR
15639: GO 17618
15641: LD_INT 10
15643: DOUBLE
15644: EQUAL
15645: IFTRUE 15649
15647: GO 15833
15649: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
15650: LD_ADDR_VAR 0 1
15654: PUSH
15655: LD_INT 2
15657: PUSH
15658: LD_INT 4
15660: PUSH
15661: LD_INT 5
15663: PUSH
15664: LD_INT 6
15666: PUSH
15667: LD_INT 7
15669: PUSH
15670: LD_INT 8
15672: PUSH
15673: LD_INT 9
15675: PUSH
15676: LD_INT 10
15678: PUSH
15679: LD_INT 11
15681: PUSH
15682: LD_INT 12
15684: PUSH
15685: LD_INT 13
15687: PUSH
15688: LD_INT 14
15690: PUSH
15691: LD_INT 15
15693: PUSH
15694: LD_INT 16
15696: PUSH
15697: LD_INT 17
15699: PUSH
15700: LD_INT 18
15702: PUSH
15703: LD_INT 19
15705: PUSH
15706: LD_INT 20
15708: PUSH
15709: LD_INT 21
15711: PUSH
15712: LD_INT 22
15714: PUSH
15715: LD_INT 23
15717: PUSH
15718: LD_INT 24
15720: PUSH
15721: LD_INT 25
15723: PUSH
15724: LD_INT 26
15726: PUSH
15727: LD_INT 28
15729: PUSH
15730: LD_INT 30
15732: PUSH
15733: LD_INT 31
15735: PUSH
15736: LD_INT 32
15738: PUSH
15739: LD_INT 36
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: PUSH
15773: LD_INT 101
15775: PUSH
15776: LD_INT 102
15778: PUSH
15779: LD_INT 103
15781: PUSH
15782: LD_INT 104
15784: PUSH
15785: LD_INT 105
15787: PUSH
15788: LD_INT 106
15790: PUSH
15791: LD_INT 107
15793: PUSH
15794: LD_INT 108
15796: PUSH
15797: LD_INT 109
15799: PUSH
15800: LD_INT 110
15802: PUSH
15803: LD_INT 111
15805: PUSH
15806: LD_INT 112
15808: PUSH
15809: LD_INT 114
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: ST_TO_ADDR
15831: GO 17618
15833: LD_INT 11
15835: DOUBLE
15836: EQUAL
15837: IFTRUE 15841
15839: GO 16033
15841: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
15842: LD_ADDR_VAR 0 1
15846: PUSH
15847: LD_INT 2
15849: PUSH
15850: LD_INT 3
15852: PUSH
15853: LD_INT 4
15855: PUSH
15856: LD_INT 5
15858: PUSH
15859: LD_INT 6
15861: PUSH
15862: LD_INT 7
15864: PUSH
15865: LD_INT 8
15867: PUSH
15868: LD_INT 9
15870: PUSH
15871: LD_INT 10
15873: PUSH
15874: LD_INT 11
15876: PUSH
15877: LD_INT 12
15879: PUSH
15880: LD_INT 13
15882: PUSH
15883: LD_INT 14
15885: PUSH
15886: LD_INT 15
15888: PUSH
15889: LD_INT 16
15891: PUSH
15892: LD_INT 17
15894: PUSH
15895: LD_INT 18
15897: PUSH
15898: LD_INT 19
15900: PUSH
15901: LD_INT 20
15903: PUSH
15904: LD_INT 21
15906: PUSH
15907: LD_INT 22
15909: PUSH
15910: LD_INT 23
15912: PUSH
15913: LD_INT 24
15915: PUSH
15916: LD_INT 25
15918: PUSH
15919: LD_INT 26
15921: PUSH
15922: LD_INT 28
15924: PUSH
15925: LD_INT 30
15927: PUSH
15928: LD_INT 31
15930: PUSH
15931: LD_INT 32
15933: PUSH
15934: LD_INT 34
15936: PUSH
15937: LD_INT 36
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: PUSH
15973: LD_INT 101
15975: PUSH
15976: LD_INT 102
15978: PUSH
15979: LD_INT 103
15981: PUSH
15982: LD_INT 104
15984: PUSH
15985: LD_INT 105
15987: PUSH
15988: LD_INT 106
15990: PUSH
15991: LD_INT 107
15993: PUSH
15994: LD_INT 108
15996: PUSH
15997: LD_INT 109
15999: PUSH
16000: LD_INT 110
16002: PUSH
16003: LD_INT 111
16005: PUSH
16006: LD_INT 112
16008: PUSH
16009: LD_INT 114
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: ST_TO_ADDR
16031: GO 17618
16033: LD_INT 12
16035: DOUBLE
16036: EQUAL
16037: IFTRUE 16041
16039: GO 16249
16041: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
16042: LD_ADDR_VAR 0 1
16046: PUSH
16047: LD_INT 1
16049: PUSH
16050: LD_INT 2
16052: PUSH
16053: LD_INT 3
16055: PUSH
16056: LD_INT 4
16058: PUSH
16059: LD_INT 5
16061: PUSH
16062: LD_INT 6
16064: PUSH
16065: LD_INT 7
16067: PUSH
16068: LD_INT 8
16070: PUSH
16071: LD_INT 9
16073: PUSH
16074: LD_INT 10
16076: PUSH
16077: LD_INT 11
16079: PUSH
16080: LD_INT 12
16082: PUSH
16083: LD_INT 13
16085: PUSH
16086: LD_INT 14
16088: PUSH
16089: LD_INT 15
16091: PUSH
16092: LD_INT 16
16094: PUSH
16095: LD_INT 17
16097: PUSH
16098: LD_INT 18
16100: PUSH
16101: LD_INT 19
16103: PUSH
16104: LD_INT 20
16106: PUSH
16107: LD_INT 21
16109: PUSH
16110: LD_INT 22
16112: PUSH
16113: LD_INT 23
16115: PUSH
16116: LD_INT 24
16118: PUSH
16119: LD_INT 25
16121: PUSH
16122: LD_INT 26
16124: PUSH
16125: LD_INT 27
16127: PUSH
16128: LD_INT 28
16130: PUSH
16131: LD_INT 30
16133: PUSH
16134: LD_INT 31
16136: PUSH
16137: LD_INT 32
16139: PUSH
16140: LD_INT 33
16142: PUSH
16143: LD_INT 34
16145: PUSH
16146: LD_INT 36
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: PUSH
16185: LD_INT 101
16187: PUSH
16188: LD_INT 102
16190: PUSH
16191: LD_INT 103
16193: PUSH
16194: LD_INT 104
16196: PUSH
16197: LD_INT 105
16199: PUSH
16200: LD_INT 106
16202: PUSH
16203: LD_INT 107
16205: PUSH
16206: LD_INT 108
16208: PUSH
16209: LD_INT 109
16211: PUSH
16212: LD_INT 110
16214: PUSH
16215: LD_INT 111
16217: PUSH
16218: LD_INT 112
16220: PUSH
16221: LD_INT 113
16223: PUSH
16224: LD_INT 114
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: ST_TO_ADDR
16247: GO 17618
16249: LD_INT 13
16251: DOUBLE
16252: EQUAL
16253: IFTRUE 16257
16255: GO 16453
16257: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
16258: LD_ADDR_VAR 0 1
16262: PUSH
16263: LD_INT 1
16265: PUSH
16266: LD_INT 2
16268: PUSH
16269: LD_INT 3
16271: PUSH
16272: LD_INT 4
16274: PUSH
16275: LD_INT 5
16277: PUSH
16278: LD_INT 8
16280: PUSH
16281: LD_INT 9
16283: PUSH
16284: LD_INT 10
16286: PUSH
16287: LD_INT 11
16289: PUSH
16290: LD_INT 12
16292: PUSH
16293: LD_INT 14
16295: PUSH
16296: LD_INT 15
16298: PUSH
16299: LD_INT 16
16301: PUSH
16302: LD_INT 17
16304: PUSH
16305: LD_INT 18
16307: PUSH
16308: LD_INT 19
16310: PUSH
16311: LD_INT 20
16313: PUSH
16314: LD_INT 21
16316: PUSH
16317: LD_INT 22
16319: PUSH
16320: LD_INT 23
16322: PUSH
16323: LD_INT 24
16325: PUSH
16326: LD_INT 25
16328: PUSH
16329: LD_INT 26
16331: PUSH
16332: LD_INT 27
16334: PUSH
16335: LD_INT 28
16337: PUSH
16338: LD_INT 30
16340: PUSH
16341: LD_INT 31
16343: PUSH
16344: LD_INT 32
16346: PUSH
16347: LD_INT 33
16349: PUSH
16350: LD_INT 34
16352: PUSH
16353: LD_INT 36
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 101
16391: PUSH
16392: LD_INT 102
16394: PUSH
16395: LD_INT 103
16397: PUSH
16398: LD_INT 104
16400: PUSH
16401: LD_INT 105
16403: PUSH
16404: LD_INT 106
16406: PUSH
16407: LD_INT 107
16409: PUSH
16410: LD_INT 108
16412: PUSH
16413: LD_INT 109
16415: PUSH
16416: LD_INT 110
16418: PUSH
16419: LD_INT 111
16421: PUSH
16422: LD_INT 112
16424: PUSH
16425: LD_INT 113
16427: PUSH
16428: LD_INT 114
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: ST_TO_ADDR
16451: GO 17618
16453: LD_INT 14
16455: DOUBLE
16456: EQUAL
16457: IFTRUE 16461
16459: GO 16673
16461: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
16462: LD_ADDR_VAR 0 1
16466: PUSH
16467: LD_INT 1
16469: PUSH
16470: LD_INT 2
16472: PUSH
16473: LD_INT 3
16475: PUSH
16476: LD_INT 4
16478: PUSH
16479: LD_INT 5
16481: PUSH
16482: LD_INT 6
16484: PUSH
16485: LD_INT 7
16487: PUSH
16488: LD_INT 8
16490: PUSH
16491: LD_INT 9
16493: PUSH
16494: LD_INT 10
16496: PUSH
16497: LD_INT 11
16499: PUSH
16500: LD_INT 12
16502: PUSH
16503: LD_INT 13
16505: PUSH
16506: LD_INT 14
16508: PUSH
16509: LD_INT 15
16511: PUSH
16512: LD_INT 16
16514: PUSH
16515: LD_INT 17
16517: PUSH
16518: LD_INT 18
16520: PUSH
16521: LD_INT 19
16523: PUSH
16524: LD_INT 20
16526: PUSH
16527: LD_INT 21
16529: PUSH
16530: LD_INT 22
16532: PUSH
16533: LD_INT 23
16535: PUSH
16536: LD_INT 24
16538: PUSH
16539: LD_INT 25
16541: PUSH
16542: LD_INT 26
16544: PUSH
16545: LD_INT 27
16547: PUSH
16548: LD_INT 28
16550: PUSH
16551: LD_INT 29
16553: PUSH
16554: LD_INT 30
16556: PUSH
16557: LD_INT 31
16559: PUSH
16560: LD_INT 32
16562: PUSH
16563: LD_INT 33
16565: PUSH
16566: LD_INT 34
16568: PUSH
16569: LD_INT 36
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: PUSH
16609: LD_INT 101
16611: PUSH
16612: LD_INT 102
16614: PUSH
16615: LD_INT 103
16617: PUSH
16618: LD_INT 104
16620: PUSH
16621: LD_INT 105
16623: PUSH
16624: LD_INT 106
16626: PUSH
16627: LD_INT 107
16629: PUSH
16630: LD_INT 108
16632: PUSH
16633: LD_INT 109
16635: PUSH
16636: LD_INT 110
16638: PUSH
16639: LD_INT 111
16641: PUSH
16642: LD_INT 112
16644: PUSH
16645: LD_INT 113
16647: PUSH
16648: LD_INT 114
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: ST_TO_ADDR
16671: GO 17618
16673: LD_INT 15
16675: DOUBLE
16676: EQUAL
16677: IFTRUE 16681
16679: GO 16893
16681: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
16682: LD_ADDR_VAR 0 1
16686: PUSH
16687: LD_INT 1
16689: PUSH
16690: LD_INT 2
16692: PUSH
16693: LD_INT 3
16695: PUSH
16696: LD_INT 4
16698: PUSH
16699: LD_INT 5
16701: PUSH
16702: LD_INT 6
16704: PUSH
16705: LD_INT 7
16707: PUSH
16708: LD_INT 8
16710: PUSH
16711: LD_INT 9
16713: PUSH
16714: LD_INT 10
16716: PUSH
16717: LD_INT 11
16719: PUSH
16720: LD_INT 12
16722: PUSH
16723: LD_INT 13
16725: PUSH
16726: LD_INT 14
16728: PUSH
16729: LD_INT 15
16731: PUSH
16732: LD_INT 16
16734: PUSH
16735: LD_INT 17
16737: PUSH
16738: LD_INT 18
16740: PUSH
16741: LD_INT 19
16743: PUSH
16744: LD_INT 20
16746: PUSH
16747: LD_INT 21
16749: PUSH
16750: LD_INT 22
16752: PUSH
16753: LD_INT 23
16755: PUSH
16756: LD_INT 24
16758: PUSH
16759: LD_INT 25
16761: PUSH
16762: LD_INT 26
16764: PUSH
16765: LD_INT 27
16767: PUSH
16768: LD_INT 28
16770: PUSH
16771: LD_INT 29
16773: PUSH
16774: LD_INT 30
16776: PUSH
16777: LD_INT 31
16779: PUSH
16780: LD_INT 32
16782: PUSH
16783: LD_INT 33
16785: PUSH
16786: LD_INT 34
16788: PUSH
16789: LD_INT 36
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: PUSH
16829: LD_INT 101
16831: PUSH
16832: LD_INT 102
16834: PUSH
16835: LD_INT 103
16837: PUSH
16838: LD_INT 104
16840: PUSH
16841: LD_INT 105
16843: PUSH
16844: LD_INT 106
16846: PUSH
16847: LD_INT 107
16849: PUSH
16850: LD_INT 108
16852: PUSH
16853: LD_INT 109
16855: PUSH
16856: LD_INT 110
16858: PUSH
16859: LD_INT 111
16861: PUSH
16862: LD_INT 112
16864: PUSH
16865: LD_INT 113
16867: PUSH
16868: LD_INT 114
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: ST_TO_ADDR
16891: GO 17618
16893: LD_INT 16
16895: DOUBLE
16896: EQUAL
16897: IFTRUE 16901
16899: GO 17025
16901: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
16902: LD_ADDR_VAR 0 1
16906: PUSH
16907: LD_INT 2
16909: PUSH
16910: LD_INT 4
16912: PUSH
16913: LD_INT 5
16915: PUSH
16916: LD_INT 7
16918: PUSH
16919: LD_INT 11
16921: PUSH
16922: LD_INT 12
16924: PUSH
16925: LD_INT 15
16927: PUSH
16928: LD_INT 16
16930: PUSH
16931: LD_INT 20
16933: PUSH
16934: LD_INT 21
16936: PUSH
16937: LD_INT 22
16939: PUSH
16940: LD_INT 23
16942: PUSH
16943: LD_INT 25
16945: PUSH
16946: LD_INT 26
16948: PUSH
16949: LD_INT 30
16951: PUSH
16952: LD_INT 31
16954: PUSH
16955: LD_INT 32
16957: PUSH
16958: LD_INT 33
16960: PUSH
16961: LD_INT 34
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: PUSH
16985: LD_INT 101
16987: PUSH
16988: LD_INT 102
16990: PUSH
16991: LD_INT 103
16993: PUSH
16994: LD_INT 106
16996: PUSH
16997: LD_INT 108
16999: PUSH
17000: LD_INT 112
17002: PUSH
17003: LD_INT 113
17005: PUSH
17006: LD_INT 114
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: ST_TO_ADDR
17023: GO 17618
17025: LD_INT 17
17027: DOUBLE
17028: EQUAL
17029: IFTRUE 17033
17031: GO 17245
17033: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
17034: LD_ADDR_VAR 0 1
17038: PUSH
17039: LD_INT 1
17041: PUSH
17042: LD_INT 2
17044: PUSH
17045: LD_INT 3
17047: PUSH
17048: LD_INT 4
17050: PUSH
17051: LD_INT 5
17053: PUSH
17054: LD_INT 6
17056: PUSH
17057: LD_INT 7
17059: PUSH
17060: LD_INT 8
17062: PUSH
17063: LD_INT 9
17065: PUSH
17066: LD_INT 10
17068: PUSH
17069: LD_INT 11
17071: PUSH
17072: LD_INT 12
17074: PUSH
17075: LD_INT 13
17077: PUSH
17078: LD_INT 14
17080: PUSH
17081: LD_INT 15
17083: PUSH
17084: LD_INT 16
17086: PUSH
17087: LD_INT 17
17089: PUSH
17090: LD_INT 18
17092: PUSH
17093: LD_INT 19
17095: PUSH
17096: LD_INT 20
17098: PUSH
17099: LD_INT 21
17101: PUSH
17102: LD_INT 22
17104: PUSH
17105: LD_INT 23
17107: PUSH
17108: LD_INT 24
17110: PUSH
17111: LD_INT 25
17113: PUSH
17114: LD_INT 26
17116: PUSH
17117: LD_INT 27
17119: PUSH
17120: LD_INT 28
17122: PUSH
17123: LD_INT 29
17125: PUSH
17126: LD_INT 30
17128: PUSH
17129: LD_INT 31
17131: PUSH
17132: LD_INT 32
17134: PUSH
17135: LD_INT 33
17137: PUSH
17138: LD_INT 34
17140: PUSH
17141: LD_INT 36
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 101
17183: PUSH
17184: LD_INT 102
17186: PUSH
17187: LD_INT 103
17189: PUSH
17190: LD_INT 104
17192: PUSH
17193: LD_INT 105
17195: PUSH
17196: LD_INT 106
17198: PUSH
17199: LD_INT 107
17201: PUSH
17202: LD_INT 108
17204: PUSH
17205: LD_INT 109
17207: PUSH
17208: LD_INT 110
17210: PUSH
17211: LD_INT 111
17213: PUSH
17214: LD_INT 112
17216: PUSH
17217: LD_INT 113
17219: PUSH
17220: LD_INT 114
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: ST_TO_ADDR
17243: GO 17618
17245: LD_INT 18
17247: DOUBLE
17248: EQUAL
17249: IFTRUE 17253
17251: GO 17389
17253: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
17254: LD_ADDR_VAR 0 1
17258: PUSH
17259: LD_INT 2
17261: PUSH
17262: LD_INT 4
17264: PUSH
17265: LD_INT 5
17267: PUSH
17268: LD_INT 7
17270: PUSH
17271: LD_INT 11
17273: PUSH
17274: LD_INT 12
17276: PUSH
17277: LD_INT 15
17279: PUSH
17280: LD_INT 16
17282: PUSH
17283: LD_INT 20
17285: PUSH
17286: LD_INT 21
17288: PUSH
17289: LD_INT 22
17291: PUSH
17292: LD_INT 23
17294: PUSH
17295: LD_INT 25
17297: PUSH
17298: LD_INT 26
17300: PUSH
17301: LD_INT 30
17303: PUSH
17304: LD_INT 31
17306: PUSH
17307: LD_INT 32
17309: PUSH
17310: LD_INT 33
17312: PUSH
17313: LD_INT 34
17315: PUSH
17316: LD_INT 35
17318: PUSH
17319: LD_INT 36
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: PUSH
17345: LD_INT 101
17347: PUSH
17348: LD_INT 102
17350: PUSH
17351: LD_INT 103
17353: PUSH
17354: LD_INT 106
17356: PUSH
17357: LD_INT 108
17359: PUSH
17360: LD_INT 112
17362: PUSH
17363: LD_INT 113
17365: PUSH
17366: LD_INT 114
17368: PUSH
17369: LD_INT 115
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: ST_TO_ADDR
17387: GO 17618
17389: LD_INT 19
17391: DOUBLE
17392: EQUAL
17393: IFTRUE 17397
17395: GO 17617
17397: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
17398: LD_ADDR_VAR 0 1
17402: PUSH
17403: LD_INT 1
17405: PUSH
17406: LD_INT 2
17408: PUSH
17409: LD_INT 3
17411: PUSH
17412: LD_INT 4
17414: PUSH
17415: LD_INT 5
17417: PUSH
17418: LD_INT 6
17420: PUSH
17421: LD_INT 7
17423: PUSH
17424: LD_INT 8
17426: PUSH
17427: LD_INT 9
17429: PUSH
17430: LD_INT 10
17432: PUSH
17433: LD_INT 11
17435: PUSH
17436: LD_INT 12
17438: PUSH
17439: LD_INT 13
17441: PUSH
17442: LD_INT 14
17444: PUSH
17445: LD_INT 15
17447: PUSH
17448: LD_INT 16
17450: PUSH
17451: LD_INT 17
17453: PUSH
17454: LD_INT 18
17456: PUSH
17457: LD_INT 19
17459: PUSH
17460: LD_INT 20
17462: PUSH
17463: LD_INT 21
17465: PUSH
17466: LD_INT 22
17468: PUSH
17469: LD_INT 23
17471: PUSH
17472: LD_INT 24
17474: PUSH
17475: LD_INT 25
17477: PUSH
17478: LD_INT 26
17480: PUSH
17481: LD_INT 27
17483: PUSH
17484: LD_INT 28
17486: PUSH
17487: LD_INT 29
17489: PUSH
17490: LD_INT 30
17492: PUSH
17493: LD_INT 31
17495: PUSH
17496: LD_INT 32
17498: PUSH
17499: LD_INT 33
17501: PUSH
17502: LD_INT 34
17504: PUSH
17505: LD_INT 35
17507: PUSH
17508: LD_INT 36
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 101
17551: PUSH
17552: LD_INT 102
17554: PUSH
17555: LD_INT 103
17557: PUSH
17558: LD_INT 104
17560: PUSH
17561: LD_INT 105
17563: PUSH
17564: LD_INT 106
17566: PUSH
17567: LD_INT 107
17569: PUSH
17570: LD_INT 108
17572: PUSH
17573: LD_INT 109
17575: PUSH
17576: LD_INT 110
17578: PUSH
17579: LD_INT 111
17581: PUSH
17582: LD_INT 112
17584: PUSH
17585: LD_INT 113
17587: PUSH
17588: LD_INT 114
17590: PUSH
17591: LD_INT 115
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: ST_TO_ADDR
17615: GO 17618
17617: POP
// end else
17618: GO 17837
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
17620: LD_ADDR_VAR 0 1
17624: PUSH
17625: LD_INT 1
17627: PUSH
17628: LD_INT 2
17630: PUSH
17631: LD_INT 3
17633: PUSH
17634: LD_INT 4
17636: PUSH
17637: LD_INT 5
17639: PUSH
17640: LD_INT 6
17642: PUSH
17643: LD_INT 7
17645: PUSH
17646: LD_INT 8
17648: PUSH
17649: LD_INT 9
17651: PUSH
17652: LD_INT 10
17654: PUSH
17655: LD_INT 11
17657: PUSH
17658: LD_INT 12
17660: PUSH
17661: LD_INT 13
17663: PUSH
17664: LD_INT 14
17666: PUSH
17667: LD_INT 15
17669: PUSH
17670: LD_INT 16
17672: PUSH
17673: LD_INT 17
17675: PUSH
17676: LD_INT 18
17678: PUSH
17679: LD_INT 19
17681: PUSH
17682: LD_INT 20
17684: PUSH
17685: LD_INT 21
17687: PUSH
17688: LD_INT 22
17690: PUSH
17691: LD_INT 23
17693: PUSH
17694: LD_INT 24
17696: PUSH
17697: LD_INT 25
17699: PUSH
17700: LD_INT 26
17702: PUSH
17703: LD_INT 27
17705: PUSH
17706: LD_INT 28
17708: PUSH
17709: LD_INT 29
17711: PUSH
17712: LD_INT 30
17714: PUSH
17715: LD_INT 31
17717: PUSH
17718: LD_INT 32
17720: PUSH
17721: LD_INT 33
17723: PUSH
17724: LD_INT 34
17726: PUSH
17727: LD_INT 35
17729: PUSH
17730: LD_INT 36
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: PUSH
17771: LD_INT 101
17773: PUSH
17774: LD_INT 102
17776: PUSH
17777: LD_INT 103
17779: PUSH
17780: LD_INT 104
17782: PUSH
17783: LD_INT 105
17785: PUSH
17786: LD_INT 106
17788: PUSH
17789: LD_INT 107
17791: PUSH
17792: LD_INT 108
17794: PUSH
17795: LD_INT 109
17797: PUSH
17798: LD_INT 110
17800: PUSH
17801: LD_INT 111
17803: PUSH
17804: LD_INT 112
17806: PUSH
17807: LD_INT 113
17809: PUSH
17810: LD_INT 114
17812: PUSH
17813: LD_INT 115
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: ST_TO_ADDR
// if result then
17837: LD_VAR 0 1
17841: IFFALSE 18130
// begin normal :=  ;
17843: LD_ADDR_VAR 0 3
17847: PUSH
17848: LD_STRING 
17850: ST_TO_ADDR
// hardcore :=  ;
17851: LD_ADDR_VAR 0 4
17855: PUSH
17856: LD_STRING 
17858: ST_TO_ADDR
// for i = 1 to normalCounter do
17859: LD_ADDR_VAR 0 5
17863: PUSH
17864: DOUBLE
17865: LD_INT 1
17867: DEC
17868: ST_TO_ADDR
17869: LD_EXP 63
17873: PUSH
17874: FOR_TO
17875: IFFALSE 17976
// begin tmp := 0 ;
17877: LD_ADDR_VAR 0 2
17881: PUSH
17882: LD_STRING 0
17884: ST_TO_ADDR
// if result [ 1 ] then
17885: LD_VAR 0 1
17889: PUSH
17890: LD_INT 1
17892: ARRAY
17893: IFFALSE 17958
// if result [ 1 ] [ 1 ] = i then
17895: LD_VAR 0 1
17899: PUSH
17900: LD_INT 1
17902: ARRAY
17903: PUSH
17904: LD_INT 1
17906: ARRAY
17907: PUSH
17908: LD_VAR 0 5
17912: EQUAL
17913: IFFALSE 17958
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17915: LD_ADDR_VAR 0 1
17919: PUSH
17920: LD_VAR 0 1
17924: PPUSH
17925: LD_INT 1
17927: PPUSH
17928: LD_VAR 0 1
17932: PUSH
17933: LD_INT 1
17935: ARRAY
17936: PPUSH
17937: LD_INT 1
17939: PPUSH
17940: CALL_OW 3
17944: PPUSH
17945: CALL_OW 1
17949: ST_TO_ADDR
// tmp := 1 ;
17950: LD_ADDR_VAR 0 2
17954: PUSH
17955: LD_STRING 1
17957: ST_TO_ADDR
// end ; normal := normal & tmp ;
17958: LD_ADDR_VAR 0 3
17962: PUSH
17963: LD_VAR 0 3
17967: PUSH
17968: LD_VAR 0 2
17972: STR
17973: ST_TO_ADDR
// end ;
17974: GO 17874
17976: POP
17977: POP
// for i = 1 to hardcoreCounter do
17978: LD_ADDR_VAR 0 5
17982: PUSH
17983: DOUBLE
17984: LD_INT 1
17986: DEC
17987: ST_TO_ADDR
17988: LD_EXP 64
17992: PUSH
17993: FOR_TO
17994: IFFALSE 18099
// begin tmp := 0 ;
17996: LD_ADDR_VAR 0 2
18000: PUSH
18001: LD_STRING 0
18003: ST_TO_ADDR
// if result [ 2 ] then
18004: LD_VAR 0 1
18008: PUSH
18009: LD_INT 2
18011: ARRAY
18012: IFFALSE 18081
// if result [ 2 ] [ 1 ] = 100 + i then
18014: LD_VAR 0 1
18018: PUSH
18019: LD_INT 2
18021: ARRAY
18022: PUSH
18023: LD_INT 1
18025: ARRAY
18026: PUSH
18027: LD_INT 100
18029: PUSH
18030: LD_VAR 0 5
18034: PLUS
18035: EQUAL
18036: IFFALSE 18081
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18038: LD_ADDR_VAR 0 1
18042: PUSH
18043: LD_VAR 0 1
18047: PPUSH
18048: LD_INT 2
18050: PPUSH
18051: LD_VAR 0 1
18055: PUSH
18056: LD_INT 2
18058: ARRAY
18059: PPUSH
18060: LD_INT 1
18062: PPUSH
18063: CALL_OW 3
18067: PPUSH
18068: CALL_OW 1
18072: ST_TO_ADDR
// tmp := 1 ;
18073: LD_ADDR_VAR 0 2
18077: PUSH
18078: LD_STRING 1
18080: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18081: LD_ADDR_VAR 0 4
18085: PUSH
18086: LD_VAR 0 4
18090: PUSH
18091: LD_VAR 0 2
18095: STR
18096: ST_TO_ADDR
// end ;
18097: GO 17993
18099: POP
18100: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
18101: LD_STRING getStreamItemsFromMission("
18103: PUSH
18104: LD_VAR 0 3
18108: STR
18109: PUSH
18110: LD_STRING ","
18112: STR
18113: PUSH
18114: LD_VAR 0 4
18118: STR
18119: PUSH
18120: LD_STRING ")
18122: STR
18123: PPUSH
18124: CALL_OW 559
// end else
18128: GO 18137
// ToLua ( getStreamItemsFromMission("","") ) ;
18130: LD_STRING getStreamItemsFromMission("","")
18132: PPUSH
18133: CALL_OW 559
// end ;
18137: LD_VAR 0 1
18141: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18142: LD_EXP 62
18146: PUSH
18147: LD_EXP 67
18151: AND
18152: IFFALSE 18276
18154: GO 18156
18156: DISABLE
18157: LD_INT 0
18159: PPUSH
18160: PPUSH
// begin enable ;
18161: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18162: LD_ADDR_VAR 0 2
18166: PUSH
18167: LD_INT 22
18169: PUSH
18170: LD_OWVAR 2
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 2
18181: PUSH
18182: LD_INT 34
18184: PUSH
18185: LD_INT 7
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 34
18194: PUSH
18195: LD_INT 45
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 34
18204: PUSH
18205: LD_INT 28
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 34
18214: PUSH
18215: LD_INT 47
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PPUSH
18233: CALL_OW 69
18237: ST_TO_ADDR
// if not tmp then
18238: LD_VAR 0 2
18242: NOT
18243: IFFALSE 18247
// exit ;
18245: GO 18276
// for i in tmp do
18247: LD_ADDR_VAR 0 1
18251: PUSH
18252: LD_VAR 0 2
18256: PUSH
18257: FOR_IN
18258: IFFALSE 18274
// begin SetLives ( i , 0 ) ;
18260: LD_VAR 0 1
18264: PPUSH
18265: LD_INT 0
18267: PPUSH
18268: CALL_OW 234
// end ;
18272: GO 18257
18274: POP
18275: POP
// end ;
18276: PPOPN 2
18278: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18279: LD_EXP 62
18283: PUSH
18284: LD_EXP 68
18288: AND
18289: IFFALSE 18373
18291: GO 18293
18293: DISABLE
18294: LD_INT 0
18296: PPUSH
18297: PPUSH
// begin enable ;
18298: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18299: LD_ADDR_VAR 0 2
18303: PUSH
18304: LD_INT 22
18306: PUSH
18307: LD_OWVAR 2
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 32
18318: PUSH
18319: LD_INT 3
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PPUSH
18330: CALL_OW 69
18334: ST_TO_ADDR
// if not tmp then
18335: LD_VAR 0 2
18339: NOT
18340: IFFALSE 18344
// exit ;
18342: GO 18373
// for i in tmp do
18344: LD_ADDR_VAR 0 1
18348: PUSH
18349: LD_VAR 0 2
18353: PUSH
18354: FOR_IN
18355: IFFALSE 18371
// begin SetLives ( i , 0 ) ;
18357: LD_VAR 0 1
18361: PPUSH
18362: LD_INT 0
18364: PPUSH
18365: CALL_OW 234
// end ;
18369: GO 18354
18371: POP
18372: POP
// end ;
18373: PPOPN 2
18375: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18376: LD_EXP 62
18380: PUSH
18381: LD_EXP 65
18385: AND
18386: IFFALSE 18479
18388: GO 18390
18390: DISABLE
18391: LD_INT 0
18393: PPUSH
// begin enable ;
18394: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18395: LD_ADDR_VAR 0 1
18399: PUSH
18400: LD_INT 22
18402: PUSH
18403: LD_OWVAR 2
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 2
18414: PUSH
18415: LD_INT 25
18417: PUSH
18418: LD_INT 5
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 25
18427: PUSH
18428: LD_INT 9
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 25
18437: PUSH
18438: LD_INT 8
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PPUSH
18455: CALL_OW 69
18459: PUSH
18460: FOR_IN
18461: IFFALSE 18477
// begin SetClass ( i , 1 ) ;
18463: LD_VAR 0 1
18467: PPUSH
18468: LD_INT 1
18470: PPUSH
18471: CALL_OW 336
// end ;
18475: GO 18460
18477: POP
18478: POP
// end ;
18479: PPOPN 1
18481: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18482: LD_EXP 62
18486: PUSH
18487: LD_EXP 66
18491: AND
18492: PUSH
18493: LD_OWVAR 65
18497: PUSH
18498: LD_INT 7
18500: LESS
18501: AND
18502: IFFALSE 18516
18504: GO 18506
18506: DISABLE
// begin enable ;
18507: ENABLE
// game_speed := 7 ;
18508: LD_ADDR_OWVAR 65
18512: PUSH
18513: LD_INT 7
18515: ST_TO_ADDR
// end ;
18516: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18517: LD_EXP 62
18521: PUSH
18522: LD_EXP 69
18526: AND
18527: IFFALSE 18729
18529: GO 18531
18531: DISABLE
18532: LD_INT 0
18534: PPUSH
18535: PPUSH
18536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18537: LD_ADDR_VAR 0 3
18541: PUSH
18542: LD_INT 81
18544: PUSH
18545: LD_OWVAR 2
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: PUSH
18554: LD_INT 21
18556: PUSH
18557: LD_INT 1
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PPUSH
18568: CALL_OW 69
18572: ST_TO_ADDR
// if not tmp then
18573: LD_VAR 0 3
18577: NOT
18578: IFFALSE 18582
// exit ;
18580: GO 18729
// if tmp > 5 then
18582: LD_VAR 0 3
18586: PUSH
18587: LD_INT 5
18589: GREATER
18590: IFFALSE 18602
// k := 5 else
18592: LD_ADDR_VAR 0 2
18596: PUSH
18597: LD_INT 5
18599: ST_TO_ADDR
18600: GO 18612
// k := tmp ;
18602: LD_ADDR_VAR 0 2
18606: PUSH
18607: LD_VAR 0 3
18611: ST_TO_ADDR
// for i := 1 to k do
18612: LD_ADDR_VAR 0 1
18616: PUSH
18617: DOUBLE
18618: LD_INT 1
18620: DEC
18621: ST_TO_ADDR
18622: LD_VAR 0 2
18626: PUSH
18627: FOR_TO
18628: IFFALSE 18727
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18630: LD_VAR 0 3
18634: PUSH
18635: LD_VAR 0 1
18639: ARRAY
18640: PPUSH
18641: LD_VAR 0 1
18645: PUSH
18646: LD_INT 4
18648: MOD
18649: PUSH
18650: LD_INT 1
18652: PLUS
18653: PPUSH
18654: CALL_OW 259
18658: PUSH
18659: LD_INT 10
18661: LESS
18662: IFFALSE 18725
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18664: LD_VAR 0 3
18668: PUSH
18669: LD_VAR 0 1
18673: ARRAY
18674: PPUSH
18675: LD_VAR 0 1
18679: PUSH
18680: LD_INT 4
18682: MOD
18683: PUSH
18684: LD_INT 1
18686: PLUS
18687: PPUSH
18688: LD_VAR 0 3
18692: PUSH
18693: LD_VAR 0 1
18697: ARRAY
18698: PPUSH
18699: LD_VAR 0 1
18703: PUSH
18704: LD_INT 4
18706: MOD
18707: PUSH
18708: LD_INT 1
18710: PLUS
18711: PPUSH
18712: CALL_OW 259
18716: PUSH
18717: LD_INT 1
18719: PLUS
18720: PPUSH
18721: CALL_OW 237
18725: GO 18627
18727: POP
18728: POP
// end ;
18729: PPOPN 3
18731: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18732: LD_EXP 62
18736: PUSH
18737: LD_EXP 70
18741: AND
18742: IFFALSE 18762
18744: GO 18746
18746: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18747: LD_INT 4
18749: PPUSH
18750: LD_OWVAR 2
18754: PPUSH
18755: LD_INT 0
18757: PPUSH
18758: CALL_OW 324
18762: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18763: LD_EXP 62
18767: PUSH
18768: LD_EXP 99
18772: AND
18773: IFFALSE 18793
18775: GO 18777
18777: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18778: LD_INT 19
18780: PPUSH
18781: LD_OWVAR 2
18785: PPUSH
18786: LD_INT 0
18788: PPUSH
18789: CALL_OW 324
18793: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18794: LD_EXP 62
18798: PUSH
18799: LD_EXP 71
18803: AND
18804: IFFALSE 18906
18806: GO 18808
18808: DISABLE
18809: LD_INT 0
18811: PPUSH
18812: PPUSH
// begin enable ;
18813: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18814: LD_ADDR_VAR 0 2
18818: PUSH
18819: LD_INT 22
18821: PUSH
18822: LD_OWVAR 2
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 2
18833: PUSH
18834: LD_INT 34
18836: PUSH
18837: LD_INT 11
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 34
18846: PUSH
18847: LD_INT 30
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: LIST
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PPUSH
18863: CALL_OW 69
18867: ST_TO_ADDR
// if not tmp then
18868: LD_VAR 0 2
18872: NOT
18873: IFFALSE 18877
// exit ;
18875: GO 18906
// for i in tmp do
18877: LD_ADDR_VAR 0 1
18881: PUSH
18882: LD_VAR 0 2
18886: PUSH
18887: FOR_IN
18888: IFFALSE 18904
// begin SetLives ( i , 0 ) ;
18890: LD_VAR 0 1
18894: PPUSH
18895: LD_INT 0
18897: PPUSH
18898: CALL_OW 234
// end ;
18902: GO 18887
18904: POP
18905: POP
// end ;
18906: PPOPN 2
18908: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18909: LD_EXP 62
18913: PUSH
18914: LD_EXP 72
18918: AND
18919: IFFALSE 18939
18921: GO 18923
18923: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18924: LD_INT 32
18926: PPUSH
18927: LD_OWVAR 2
18931: PPUSH
18932: LD_INT 0
18934: PPUSH
18935: CALL_OW 324
18939: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18940: LD_EXP 62
18944: PUSH
18945: LD_EXP 73
18949: AND
18950: IFFALSE 19131
18952: GO 18954
18954: DISABLE
18955: LD_INT 0
18957: PPUSH
18958: PPUSH
18959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18960: LD_ADDR_VAR 0 2
18964: PUSH
18965: LD_INT 22
18967: PUSH
18968: LD_OWVAR 2
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 33
18979: PUSH
18980: LD_INT 3
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PPUSH
18991: CALL_OW 69
18995: ST_TO_ADDR
// if not tmp then
18996: LD_VAR 0 2
19000: NOT
19001: IFFALSE 19005
// exit ;
19003: GO 19131
// side := 0 ;
19005: LD_ADDR_VAR 0 3
19009: PUSH
19010: LD_INT 0
19012: ST_TO_ADDR
// for i := 1 to 8 do
19013: LD_ADDR_VAR 0 1
19017: PUSH
19018: DOUBLE
19019: LD_INT 1
19021: DEC
19022: ST_TO_ADDR
19023: LD_INT 8
19025: PUSH
19026: FOR_TO
19027: IFFALSE 19075
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19029: LD_OWVAR 2
19033: PUSH
19034: LD_VAR 0 1
19038: NONEQUAL
19039: PUSH
19040: LD_OWVAR 2
19044: PPUSH
19045: LD_VAR 0 1
19049: PPUSH
19050: CALL_OW 81
19054: PUSH
19055: LD_INT 2
19057: EQUAL
19058: AND
19059: IFFALSE 19073
// begin side := i ;
19061: LD_ADDR_VAR 0 3
19065: PUSH
19066: LD_VAR 0 1
19070: ST_TO_ADDR
// break ;
19071: GO 19075
// end ;
19073: GO 19026
19075: POP
19076: POP
// if not side then
19077: LD_VAR 0 3
19081: NOT
19082: IFFALSE 19086
// exit ;
19084: GO 19131
// for i := 1 to tmp do
19086: LD_ADDR_VAR 0 1
19090: PUSH
19091: DOUBLE
19092: LD_INT 1
19094: DEC
19095: ST_TO_ADDR
19096: LD_VAR 0 2
19100: PUSH
19101: FOR_TO
19102: IFFALSE 19129
// if Prob ( 60 ) then
19104: LD_INT 60
19106: PPUSH
19107: CALL_OW 13
19111: IFFALSE 19127
// SetSide ( i , side ) ;
19113: LD_VAR 0 1
19117: PPUSH
19118: LD_VAR 0 3
19122: PPUSH
19123: CALL_OW 235
19127: GO 19101
19129: POP
19130: POP
// end ;
19131: PPOPN 3
19133: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19134: LD_EXP 62
19138: PUSH
19139: LD_EXP 75
19143: AND
19144: IFFALSE 19263
19146: GO 19148
19148: DISABLE
19149: LD_INT 0
19151: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19152: LD_ADDR_VAR 0 1
19156: PUSH
19157: LD_INT 22
19159: PUSH
19160: LD_OWVAR 2
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 21
19171: PUSH
19172: LD_INT 1
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 3
19181: PUSH
19182: LD_INT 23
19184: PUSH
19185: LD_INT 0
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: LIST
19200: PPUSH
19201: CALL_OW 69
19205: PUSH
19206: FOR_IN
19207: IFFALSE 19261
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19209: LD_VAR 0 1
19213: PPUSH
19214: CALL_OW 257
19218: PUSH
19219: LD_INT 1
19221: PUSH
19222: LD_INT 2
19224: PUSH
19225: LD_INT 3
19227: PUSH
19228: LD_INT 4
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: IN
19237: IFFALSE 19259
// SetClass ( un , rand ( 1 , 4 ) ) ;
19239: LD_VAR 0 1
19243: PPUSH
19244: LD_INT 1
19246: PPUSH
19247: LD_INT 4
19249: PPUSH
19250: CALL_OW 12
19254: PPUSH
19255: CALL_OW 336
19259: GO 19206
19261: POP
19262: POP
// end ;
19263: PPOPN 1
19265: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19266: LD_EXP 62
19270: PUSH
19271: LD_EXP 74
19275: AND
19276: IFFALSE 19355
19278: GO 19280
19280: DISABLE
19281: LD_INT 0
19283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19284: LD_ADDR_VAR 0 1
19288: PUSH
19289: LD_INT 22
19291: PUSH
19292: LD_OWVAR 2
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 21
19303: PUSH
19304: LD_INT 3
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PPUSH
19315: CALL_OW 69
19319: ST_TO_ADDR
// if not tmp then
19320: LD_VAR 0 1
19324: NOT
19325: IFFALSE 19329
// exit ;
19327: GO 19355
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19329: LD_VAR 0 1
19333: PUSH
19334: LD_INT 1
19336: PPUSH
19337: LD_VAR 0 1
19341: PPUSH
19342: CALL_OW 12
19346: ARRAY
19347: PPUSH
19348: LD_INT 100
19350: PPUSH
19351: CALL_OW 234
// end ;
19355: PPOPN 1
19357: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19358: LD_EXP 62
19362: PUSH
19363: LD_EXP 76
19367: AND
19368: IFFALSE 19466
19370: GO 19372
19372: DISABLE
19373: LD_INT 0
19375: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19376: LD_ADDR_VAR 0 1
19380: PUSH
19381: LD_INT 22
19383: PUSH
19384: LD_OWVAR 2
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 21
19395: PUSH
19396: LD_INT 1
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PPUSH
19407: CALL_OW 69
19411: ST_TO_ADDR
// if not tmp then
19412: LD_VAR 0 1
19416: NOT
19417: IFFALSE 19421
// exit ;
19419: GO 19466
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19421: LD_VAR 0 1
19425: PUSH
19426: LD_INT 1
19428: PPUSH
19429: LD_VAR 0 1
19433: PPUSH
19434: CALL_OW 12
19438: ARRAY
19439: PPUSH
19440: LD_INT 1
19442: PPUSH
19443: LD_INT 4
19445: PPUSH
19446: CALL_OW 12
19450: PPUSH
19451: LD_INT 3000
19453: PPUSH
19454: LD_INT 9000
19456: PPUSH
19457: CALL_OW 12
19461: PPUSH
19462: CALL_OW 492
// end ;
19466: PPOPN 1
19468: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19469: LD_EXP 62
19473: PUSH
19474: LD_EXP 77
19478: AND
19479: IFFALSE 19499
19481: GO 19483
19483: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19484: LD_INT 1
19486: PPUSH
19487: LD_OWVAR 2
19491: PPUSH
19492: LD_INT 0
19494: PPUSH
19495: CALL_OW 324
19499: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19500: LD_EXP 62
19504: PUSH
19505: LD_EXP 78
19509: AND
19510: IFFALSE 19593
19512: GO 19514
19514: DISABLE
19515: LD_INT 0
19517: PPUSH
19518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19519: LD_ADDR_VAR 0 2
19523: PUSH
19524: LD_INT 22
19526: PUSH
19527: LD_OWVAR 2
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 21
19538: PUSH
19539: LD_INT 3
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PPUSH
19550: CALL_OW 69
19554: ST_TO_ADDR
// if not tmp then
19555: LD_VAR 0 2
19559: NOT
19560: IFFALSE 19564
// exit ;
19562: GO 19593
// for i in tmp do
19564: LD_ADDR_VAR 0 1
19568: PUSH
19569: LD_VAR 0 2
19573: PUSH
19574: FOR_IN
19575: IFFALSE 19591
// SetBLevel ( i , 10 ) ;
19577: LD_VAR 0 1
19581: PPUSH
19582: LD_INT 10
19584: PPUSH
19585: CALL_OW 241
19589: GO 19574
19591: POP
19592: POP
// end ;
19593: PPOPN 2
19595: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19596: LD_EXP 62
19600: PUSH
19601: LD_EXP 79
19605: AND
19606: IFFALSE 19717
19608: GO 19610
19610: DISABLE
19611: LD_INT 0
19613: PPUSH
19614: PPUSH
19615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19616: LD_ADDR_VAR 0 3
19620: PUSH
19621: LD_INT 22
19623: PUSH
19624: LD_OWVAR 2
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 25
19635: PUSH
19636: LD_INT 1
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PPUSH
19647: CALL_OW 69
19651: ST_TO_ADDR
// if not tmp then
19652: LD_VAR 0 3
19656: NOT
19657: IFFALSE 19661
// exit ;
19659: GO 19717
// un := tmp [ rand ( 1 , tmp ) ] ;
19661: LD_ADDR_VAR 0 2
19665: PUSH
19666: LD_VAR 0 3
19670: PUSH
19671: LD_INT 1
19673: PPUSH
19674: LD_VAR 0 3
19678: PPUSH
19679: CALL_OW 12
19683: ARRAY
19684: ST_TO_ADDR
// if Crawls ( un ) then
19685: LD_VAR 0 2
19689: PPUSH
19690: CALL_OW 318
19694: IFFALSE 19705
// ComWalk ( un ) ;
19696: LD_VAR 0 2
19700: PPUSH
19701: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19705: LD_VAR 0 2
19709: PPUSH
19710: LD_INT 5
19712: PPUSH
19713: CALL_OW 336
// end ;
19717: PPOPN 3
19719: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
19720: LD_EXP 62
19724: PUSH
19725: LD_EXP 80
19729: AND
19730: PUSH
19731: LD_OWVAR 67
19735: PUSH
19736: LD_INT 3
19738: LESS
19739: AND
19740: IFFALSE 19759
19742: GO 19744
19744: DISABLE
// Difficulty := Difficulty + 1 ;
19745: LD_ADDR_OWVAR 67
19749: PUSH
19750: LD_OWVAR 67
19754: PUSH
19755: LD_INT 1
19757: PLUS
19758: ST_TO_ADDR
19759: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19760: LD_EXP 62
19764: PUSH
19765: LD_EXP 81
19769: AND
19770: IFFALSE 19873
19772: GO 19774
19774: DISABLE
19775: LD_INT 0
19777: PPUSH
// begin for i := 1 to 5 do
19778: LD_ADDR_VAR 0 1
19782: PUSH
19783: DOUBLE
19784: LD_INT 1
19786: DEC
19787: ST_TO_ADDR
19788: LD_INT 5
19790: PUSH
19791: FOR_TO
19792: IFFALSE 19871
// begin uc_nation := nation_nature ;
19794: LD_ADDR_OWVAR 21
19798: PUSH
19799: LD_INT 0
19801: ST_TO_ADDR
// uc_side := 0 ;
19802: LD_ADDR_OWVAR 20
19806: PUSH
19807: LD_INT 0
19809: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19810: LD_ADDR_OWVAR 29
19814: PUSH
19815: LD_INT 12
19817: PUSH
19818: LD_INT 12
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: ST_TO_ADDR
// hc_agressivity := 20 ;
19825: LD_ADDR_OWVAR 35
19829: PUSH
19830: LD_INT 20
19832: ST_TO_ADDR
// hc_class := class_tiger ;
19833: LD_ADDR_OWVAR 28
19837: PUSH
19838: LD_INT 14
19840: ST_TO_ADDR
// hc_gallery :=  ;
19841: LD_ADDR_OWVAR 33
19845: PUSH
19846: LD_STRING 
19848: ST_TO_ADDR
// hc_name :=  ;
19849: LD_ADDR_OWVAR 26
19853: PUSH
19854: LD_STRING 
19856: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19857: CALL_OW 44
19861: PPUSH
19862: LD_INT 0
19864: PPUSH
19865: CALL_OW 51
// end ;
19869: GO 19791
19871: POP
19872: POP
// end ;
19873: PPOPN 1
19875: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19876: LD_EXP 62
19880: PUSH
19881: LD_EXP 82
19885: AND
19886: IFFALSE 19895
19888: GO 19890
19890: DISABLE
// StreamSibBomb ;
19891: CALL 19896 0 0
19895: END
// export function StreamSibBomb ; var i , x , y ; begin
19896: LD_INT 0
19898: PPUSH
19899: PPUSH
19900: PPUSH
19901: PPUSH
// result := false ;
19902: LD_ADDR_VAR 0 1
19906: PUSH
19907: LD_INT 0
19909: ST_TO_ADDR
// for i := 1 to 16 do
19910: LD_ADDR_VAR 0 2
19914: PUSH
19915: DOUBLE
19916: LD_INT 1
19918: DEC
19919: ST_TO_ADDR
19920: LD_INT 16
19922: PUSH
19923: FOR_TO
19924: IFFALSE 20123
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19926: LD_ADDR_VAR 0 3
19930: PUSH
19931: LD_INT 10
19933: PUSH
19934: LD_INT 20
19936: PUSH
19937: LD_INT 30
19939: PUSH
19940: LD_INT 40
19942: PUSH
19943: LD_INT 50
19945: PUSH
19946: LD_INT 60
19948: PUSH
19949: LD_INT 70
19951: PUSH
19952: LD_INT 80
19954: PUSH
19955: LD_INT 90
19957: PUSH
19958: LD_INT 100
19960: PUSH
19961: LD_INT 110
19963: PUSH
19964: LD_INT 120
19966: PUSH
19967: LD_INT 130
19969: PUSH
19970: LD_INT 140
19972: PUSH
19973: LD_INT 150
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 1
19995: PPUSH
19996: LD_INT 15
19998: PPUSH
19999: CALL_OW 12
20003: ARRAY
20004: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20005: LD_ADDR_VAR 0 4
20009: PUSH
20010: LD_INT 10
20012: PUSH
20013: LD_INT 20
20015: PUSH
20016: LD_INT 30
20018: PUSH
20019: LD_INT 40
20021: PUSH
20022: LD_INT 50
20024: PUSH
20025: LD_INT 60
20027: PUSH
20028: LD_INT 70
20030: PUSH
20031: LD_INT 80
20033: PUSH
20034: LD_INT 90
20036: PUSH
20037: LD_INT 100
20039: PUSH
20040: LD_INT 110
20042: PUSH
20043: LD_INT 120
20045: PUSH
20046: LD_INT 130
20048: PUSH
20049: LD_INT 140
20051: PUSH
20052: LD_INT 150
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: PUSH
20072: LD_INT 1
20074: PPUSH
20075: LD_INT 15
20077: PPUSH
20078: CALL_OW 12
20082: ARRAY
20083: ST_TO_ADDR
// if ValidHex ( x , y ) then
20084: LD_VAR 0 3
20088: PPUSH
20089: LD_VAR 0 4
20093: PPUSH
20094: CALL_OW 488
20098: IFFALSE 20121
// begin result := [ x , y ] ;
20100: LD_ADDR_VAR 0 1
20104: PUSH
20105: LD_VAR 0 3
20109: PUSH
20110: LD_VAR 0 4
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: ST_TO_ADDR
// break ;
20119: GO 20123
// end ; end ;
20121: GO 19923
20123: POP
20124: POP
// if result then
20125: LD_VAR 0 1
20129: IFFALSE 20189
// begin ToLua ( playSibBomb() ) ;
20131: LD_STRING playSibBomb()
20133: PPUSH
20134: CALL_OW 559
// wait ( 0 0$14 ) ;
20138: LD_INT 490
20140: PPUSH
20141: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20145: LD_VAR 0 1
20149: PUSH
20150: LD_INT 1
20152: ARRAY
20153: PPUSH
20154: LD_VAR 0 1
20158: PUSH
20159: LD_INT 2
20161: ARRAY
20162: PPUSH
20163: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20167: LD_VAR 0 1
20171: PUSH
20172: LD_INT 1
20174: ARRAY
20175: PPUSH
20176: LD_VAR 0 1
20180: PUSH
20181: LD_INT 2
20183: ARRAY
20184: PPUSH
20185: CALL_OW 429
// end ; end ;
20189: LD_VAR 0 1
20193: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20194: LD_EXP 62
20198: PUSH
20199: LD_EXP 84
20203: AND
20204: IFFALSE 20216
20206: GO 20208
20208: DISABLE
// YouLost (  ) ;
20209: LD_STRING 
20211: PPUSH
20212: CALL_OW 104
20216: END
// every 0 0$1 trigger StreamModeActive and sFog do
20217: LD_EXP 62
20221: PUSH
20222: LD_EXP 83
20226: AND
20227: IFFALSE 20241
20229: GO 20231
20231: DISABLE
// FogOff ( your_side ) ;
20232: LD_OWVAR 2
20236: PPUSH
20237: CALL_OW 344
20241: END
// every 0 0$1 trigger StreamModeActive and sSun do
20242: LD_EXP 62
20246: PUSH
20247: LD_EXP 85
20251: AND
20252: IFFALSE 20280
20254: GO 20256
20256: DISABLE
// begin solar_recharge_percent := 0 ;
20257: LD_ADDR_OWVAR 79
20261: PUSH
20262: LD_INT 0
20264: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20265: LD_INT 10500
20267: PPUSH
20268: CALL_OW 67
// solar_recharge_percent := 100 ;
20272: LD_ADDR_OWVAR 79
20276: PUSH
20277: LD_INT 100
20279: ST_TO_ADDR
// end ;
20280: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20281: LD_EXP 62
20285: PUSH
20286: LD_EXP 86
20290: AND
20291: IFFALSE 20530
20293: GO 20295
20295: DISABLE
20296: LD_INT 0
20298: PPUSH
20299: PPUSH
20300: PPUSH
// begin tmp := [ ] ;
20301: LD_ADDR_VAR 0 3
20305: PUSH
20306: EMPTY
20307: ST_TO_ADDR
// for i := 1 to 6 do
20308: LD_ADDR_VAR 0 1
20312: PUSH
20313: DOUBLE
20314: LD_INT 1
20316: DEC
20317: ST_TO_ADDR
20318: LD_INT 6
20320: PUSH
20321: FOR_TO
20322: IFFALSE 20427
// begin uc_nation := nation_nature ;
20324: LD_ADDR_OWVAR 21
20328: PUSH
20329: LD_INT 0
20331: ST_TO_ADDR
// uc_side := 0 ;
20332: LD_ADDR_OWVAR 20
20336: PUSH
20337: LD_INT 0
20339: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20340: LD_ADDR_OWVAR 29
20344: PUSH
20345: LD_INT 12
20347: PUSH
20348: LD_INT 12
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: ST_TO_ADDR
// hc_agressivity := 20 ;
20355: LD_ADDR_OWVAR 35
20359: PUSH
20360: LD_INT 20
20362: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20363: LD_ADDR_OWVAR 28
20367: PUSH
20368: LD_INT 17
20370: ST_TO_ADDR
// hc_gallery :=  ;
20371: LD_ADDR_OWVAR 33
20375: PUSH
20376: LD_STRING 
20378: ST_TO_ADDR
// hc_name :=  ;
20379: LD_ADDR_OWVAR 26
20383: PUSH
20384: LD_STRING 
20386: ST_TO_ADDR
// un := CreateHuman ;
20387: LD_ADDR_VAR 0 2
20391: PUSH
20392: CALL_OW 44
20396: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20397: LD_VAR 0 2
20401: PPUSH
20402: LD_INT 1
20404: PPUSH
20405: CALL_OW 51
// tmp := tmp ^ un ;
20409: LD_ADDR_VAR 0 3
20413: PUSH
20414: LD_VAR 0 3
20418: PUSH
20419: LD_VAR 0 2
20423: ADD
20424: ST_TO_ADDR
// end ;
20425: GO 20321
20427: POP
20428: POP
// repeat wait ( 0 0$1 ) ;
20429: LD_INT 35
20431: PPUSH
20432: CALL_OW 67
// for un in tmp do
20436: LD_ADDR_VAR 0 2
20440: PUSH
20441: LD_VAR 0 3
20445: PUSH
20446: FOR_IN
20447: IFFALSE 20521
// begin if IsDead ( un ) then
20449: LD_VAR 0 2
20453: PPUSH
20454: CALL_OW 301
20458: IFFALSE 20478
// begin tmp := tmp diff un ;
20460: LD_ADDR_VAR 0 3
20464: PUSH
20465: LD_VAR 0 3
20469: PUSH
20470: LD_VAR 0 2
20474: DIFF
20475: ST_TO_ADDR
// continue ;
20476: GO 20446
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20478: LD_VAR 0 2
20482: PPUSH
20483: LD_INT 3
20485: PUSH
20486: LD_INT 22
20488: PUSH
20489: LD_INT 0
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PPUSH
20500: CALL_OW 69
20504: PPUSH
20505: LD_VAR 0 2
20509: PPUSH
20510: CALL_OW 74
20514: PPUSH
20515: CALL_OW 115
// end ;
20519: GO 20446
20521: POP
20522: POP
// until not tmp ;
20523: LD_VAR 0 3
20527: NOT
20528: IFFALSE 20429
// end ;
20530: PPOPN 3
20532: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20533: LD_EXP 62
20537: PUSH
20538: LD_EXP 87
20542: AND
20543: IFFALSE 20597
20545: GO 20547
20547: DISABLE
// begin ToLua ( displayTroll(); ) ;
20548: LD_STRING displayTroll();
20550: PPUSH
20551: CALL_OW 559
// wait ( 3 3$00 ) ;
20555: LD_INT 6300
20557: PPUSH
20558: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20562: LD_STRING hideTroll();
20564: PPUSH
20565: CALL_OW 559
// wait ( 1 1$00 ) ;
20569: LD_INT 2100
20571: PPUSH
20572: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20576: LD_STRING displayTroll();
20578: PPUSH
20579: CALL_OW 559
// wait ( 1 1$00 ) ;
20583: LD_INT 2100
20585: PPUSH
20586: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20590: LD_STRING hideTroll();
20592: PPUSH
20593: CALL_OW 559
// end ;
20597: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20598: LD_EXP 62
20602: PUSH
20603: LD_EXP 88
20607: AND
20608: IFFALSE 20671
20610: GO 20612
20612: DISABLE
20613: LD_INT 0
20615: PPUSH
// begin p := 0 ;
20616: LD_ADDR_VAR 0 1
20620: PUSH
20621: LD_INT 0
20623: ST_TO_ADDR
// repeat game_speed := 1 ;
20624: LD_ADDR_OWVAR 65
20628: PUSH
20629: LD_INT 1
20631: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20632: LD_INT 35
20634: PPUSH
20635: CALL_OW 67
// p := p + 1 ;
20639: LD_ADDR_VAR 0 1
20643: PUSH
20644: LD_VAR 0 1
20648: PUSH
20649: LD_INT 1
20651: PLUS
20652: ST_TO_ADDR
// until p >= 60 ;
20653: LD_VAR 0 1
20657: PUSH
20658: LD_INT 60
20660: GREATEREQUAL
20661: IFFALSE 20624
// game_speed := 4 ;
20663: LD_ADDR_OWVAR 65
20667: PUSH
20668: LD_INT 4
20670: ST_TO_ADDR
// end ;
20671: PPOPN 1
20673: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20674: LD_EXP 62
20678: PUSH
20679: LD_EXP 89
20683: AND
20684: IFFALSE 20830
20686: GO 20688
20688: DISABLE
20689: LD_INT 0
20691: PPUSH
20692: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20693: LD_ADDR_VAR 0 1
20697: PUSH
20698: LD_INT 22
20700: PUSH
20701: LD_OWVAR 2
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: PUSH
20710: LD_INT 2
20712: PUSH
20713: LD_INT 30
20715: PUSH
20716: LD_INT 0
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 30
20725: PUSH
20726: LD_INT 1
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: LIST
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PPUSH
20742: CALL_OW 69
20746: ST_TO_ADDR
// if not depot then
20747: LD_VAR 0 1
20751: NOT
20752: IFFALSE 20756
// exit ;
20754: GO 20830
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20756: LD_ADDR_VAR 0 2
20760: PUSH
20761: LD_VAR 0 1
20765: PUSH
20766: LD_INT 1
20768: PPUSH
20769: LD_VAR 0 1
20773: PPUSH
20774: CALL_OW 12
20778: ARRAY
20779: PPUSH
20780: CALL_OW 274
20784: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20785: LD_VAR 0 2
20789: PPUSH
20790: LD_INT 1
20792: PPUSH
20793: LD_INT 0
20795: PPUSH
20796: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20800: LD_VAR 0 2
20804: PPUSH
20805: LD_INT 2
20807: PPUSH
20808: LD_INT 0
20810: PPUSH
20811: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20815: LD_VAR 0 2
20819: PPUSH
20820: LD_INT 3
20822: PPUSH
20823: LD_INT 0
20825: PPUSH
20826: CALL_OW 277
// end ;
20830: PPOPN 2
20832: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20833: LD_EXP 62
20837: PUSH
20838: LD_EXP 90
20842: AND
20843: IFFALSE 20940
20845: GO 20847
20847: DISABLE
20848: LD_INT 0
20850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20851: LD_ADDR_VAR 0 1
20855: PUSH
20856: LD_INT 22
20858: PUSH
20859: LD_OWVAR 2
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PUSH
20868: LD_INT 21
20870: PUSH
20871: LD_INT 1
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 3
20880: PUSH
20881: LD_INT 23
20883: PUSH
20884: LD_INT 0
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: LIST
20899: PPUSH
20900: CALL_OW 69
20904: ST_TO_ADDR
// if not tmp then
20905: LD_VAR 0 1
20909: NOT
20910: IFFALSE 20914
// exit ;
20912: GO 20940
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20914: LD_VAR 0 1
20918: PUSH
20919: LD_INT 1
20921: PPUSH
20922: LD_VAR 0 1
20926: PPUSH
20927: CALL_OW 12
20931: ARRAY
20932: PPUSH
20933: LD_INT 200
20935: PPUSH
20936: CALL_OW 234
// end ;
20940: PPOPN 1
20942: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20943: LD_EXP 62
20947: PUSH
20948: LD_EXP 91
20952: AND
20953: IFFALSE 21032
20955: GO 20957
20957: DISABLE
20958: LD_INT 0
20960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20961: LD_ADDR_VAR 0 1
20965: PUSH
20966: LD_INT 22
20968: PUSH
20969: LD_OWVAR 2
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 21
20980: PUSH
20981: LD_INT 2
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PPUSH
20992: CALL_OW 69
20996: ST_TO_ADDR
// if not tmp then
20997: LD_VAR 0 1
21001: NOT
21002: IFFALSE 21006
// exit ;
21004: GO 21032
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21006: LD_VAR 0 1
21010: PUSH
21011: LD_INT 1
21013: PPUSH
21014: LD_VAR 0 1
21018: PPUSH
21019: CALL_OW 12
21023: ARRAY
21024: PPUSH
21025: LD_INT 60
21027: PPUSH
21028: CALL_OW 234
// end ;
21032: PPOPN 1
21034: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21035: LD_EXP 62
21039: PUSH
21040: LD_EXP 92
21044: AND
21045: IFFALSE 21144
21047: GO 21049
21049: DISABLE
21050: LD_INT 0
21052: PPUSH
21053: PPUSH
// begin enable ;
21054: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21055: LD_ADDR_VAR 0 1
21059: PUSH
21060: LD_INT 22
21062: PUSH
21063: LD_OWVAR 2
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 61
21074: PUSH
21075: EMPTY
21076: LIST
21077: PUSH
21078: LD_INT 33
21080: PUSH
21081: LD_INT 2
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: LIST
21092: PPUSH
21093: CALL_OW 69
21097: ST_TO_ADDR
// if not tmp then
21098: LD_VAR 0 1
21102: NOT
21103: IFFALSE 21107
// exit ;
21105: GO 21144
// for i in tmp do
21107: LD_ADDR_VAR 0 2
21111: PUSH
21112: LD_VAR 0 1
21116: PUSH
21117: FOR_IN
21118: IFFALSE 21142
// if IsControledBy ( i ) then
21120: LD_VAR 0 2
21124: PPUSH
21125: CALL_OW 312
21129: IFFALSE 21140
// ComUnlink ( i ) ;
21131: LD_VAR 0 2
21135: PPUSH
21136: CALL_OW 136
21140: GO 21117
21142: POP
21143: POP
// end ;
21144: PPOPN 2
21146: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21147: LD_EXP 62
21151: PUSH
21152: LD_EXP 93
21156: AND
21157: IFFALSE 21297
21159: GO 21161
21161: DISABLE
21162: LD_INT 0
21164: PPUSH
21165: PPUSH
// begin ToLua ( displayPowell(); ) ;
21166: LD_STRING displayPowell();
21168: PPUSH
21169: CALL_OW 559
// uc_side := 0 ;
21173: LD_ADDR_OWVAR 20
21177: PUSH
21178: LD_INT 0
21180: ST_TO_ADDR
// uc_nation := 2 ;
21181: LD_ADDR_OWVAR 21
21185: PUSH
21186: LD_INT 2
21188: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21189: LD_ADDR_OWVAR 37
21193: PUSH
21194: LD_INT 14
21196: ST_TO_ADDR
// vc_engine := engine_siberite ;
21197: LD_ADDR_OWVAR 39
21201: PUSH
21202: LD_INT 3
21204: ST_TO_ADDR
// vc_control := control_apeman ;
21205: LD_ADDR_OWVAR 38
21209: PUSH
21210: LD_INT 5
21212: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21213: LD_ADDR_OWVAR 40
21217: PUSH
21218: LD_INT 29
21220: ST_TO_ADDR
// un := CreateVehicle ;
21221: LD_ADDR_VAR 0 2
21225: PUSH
21226: CALL_OW 45
21230: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21231: LD_VAR 0 2
21235: PPUSH
21236: LD_INT 1
21238: PPUSH
21239: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21243: LD_INT 35
21245: PPUSH
21246: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21250: LD_VAR 0 2
21254: PPUSH
21255: LD_INT 22
21257: PUSH
21258: LD_OWVAR 2
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PPUSH
21267: CALL_OW 69
21271: PPUSH
21272: LD_VAR 0 2
21276: PPUSH
21277: CALL_OW 74
21281: PPUSH
21282: CALL_OW 115
// until IsDead ( un ) ;
21286: LD_VAR 0 2
21290: PPUSH
21291: CALL_OW 301
21295: IFFALSE 21243
// end ;
21297: PPOPN 2
21299: END
// every 0 0$1 trigger StreamModeActive and sStu do
21300: LD_EXP 62
21304: PUSH
21305: LD_EXP 101
21309: AND
21310: IFFALSE 21326
21312: GO 21314
21314: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21315: LD_STRING displayStucuk();
21317: PPUSH
21318: CALL_OW 559
// ResetFog ;
21322: CALL_OW 335
// end ;
21326: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21327: LD_EXP 62
21331: PUSH
21332: LD_EXP 94
21336: AND
21337: IFFALSE 21478
21339: GO 21341
21341: DISABLE
21342: LD_INT 0
21344: PPUSH
21345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21346: LD_ADDR_VAR 0 2
21350: PUSH
21351: LD_INT 22
21353: PUSH
21354: LD_OWVAR 2
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 21
21365: PUSH
21366: LD_INT 1
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PPUSH
21377: CALL_OW 69
21381: ST_TO_ADDR
// if not tmp then
21382: LD_VAR 0 2
21386: NOT
21387: IFFALSE 21391
// exit ;
21389: GO 21478
// un := tmp [ rand ( 1 , tmp ) ] ;
21391: LD_ADDR_VAR 0 1
21395: PUSH
21396: LD_VAR 0 2
21400: PUSH
21401: LD_INT 1
21403: PPUSH
21404: LD_VAR 0 2
21408: PPUSH
21409: CALL_OW 12
21413: ARRAY
21414: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21415: LD_VAR 0 1
21419: PPUSH
21420: LD_INT 0
21422: PPUSH
21423: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21427: LD_VAR 0 1
21431: PPUSH
21432: LD_OWVAR 3
21436: PUSH
21437: LD_VAR 0 1
21441: DIFF
21442: PPUSH
21443: LD_VAR 0 1
21447: PPUSH
21448: CALL_OW 74
21452: PPUSH
21453: CALL_OW 115
// wait ( 0 0$20 ) ;
21457: LD_INT 700
21459: PPUSH
21460: CALL_OW 67
// SetSide ( un , your_side ) ;
21464: LD_VAR 0 1
21468: PPUSH
21469: LD_OWVAR 2
21473: PPUSH
21474: CALL_OW 235
// end ;
21478: PPOPN 2
21480: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21481: LD_EXP 62
21485: PUSH
21486: LD_EXP 95
21490: AND
21491: IFFALSE 21597
21493: GO 21495
21495: DISABLE
21496: LD_INT 0
21498: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21499: LD_ADDR_VAR 0 1
21503: PUSH
21504: LD_INT 22
21506: PUSH
21507: LD_OWVAR 2
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 2
21518: PUSH
21519: LD_INT 30
21521: PUSH
21522: LD_INT 0
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 30
21531: PUSH
21532: LD_INT 1
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: LIST
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PPUSH
21548: CALL_OW 69
21552: ST_TO_ADDR
// if not depot then
21553: LD_VAR 0 1
21557: NOT
21558: IFFALSE 21562
// exit ;
21560: GO 21597
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21562: LD_VAR 0 1
21566: PUSH
21567: LD_INT 1
21569: ARRAY
21570: PPUSH
21571: CALL_OW 250
21575: PPUSH
21576: LD_VAR 0 1
21580: PUSH
21581: LD_INT 1
21583: ARRAY
21584: PPUSH
21585: CALL_OW 251
21589: PPUSH
21590: LD_INT 70
21592: PPUSH
21593: CALL_OW 495
// end ;
21597: PPOPN 1
21599: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21600: LD_EXP 62
21604: PUSH
21605: LD_EXP 96
21609: AND
21610: IFFALSE 21821
21612: GO 21614
21614: DISABLE
21615: LD_INT 0
21617: PPUSH
21618: PPUSH
21619: PPUSH
21620: PPUSH
21621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21622: LD_ADDR_VAR 0 5
21626: PUSH
21627: LD_INT 22
21629: PUSH
21630: LD_OWVAR 2
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 21
21641: PUSH
21642: LD_INT 1
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PPUSH
21653: CALL_OW 69
21657: ST_TO_ADDR
// if not tmp then
21658: LD_VAR 0 5
21662: NOT
21663: IFFALSE 21667
// exit ;
21665: GO 21821
// for i in tmp do
21667: LD_ADDR_VAR 0 1
21671: PUSH
21672: LD_VAR 0 5
21676: PUSH
21677: FOR_IN
21678: IFFALSE 21819
// begin d := rand ( 0 , 5 ) ;
21680: LD_ADDR_VAR 0 4
21684: PUSH
21685: LD_INT 0
21687: PPUSH
21688: LD_INT 5
21690: PPUSH
21691: CALL_OW 12
21695: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21696: LD_ADDR_VAR 0 2
21700: PUSH
21701: LD_VAR 0 1
21705: PPUSH
21706: CALL_OW 250
21710: PPUSH
21711: LD_VAR 0 4
21715: PPUSH
21716: LD_INT 3
21718: PPUSH
21719: LD_INT 12
21721: PPUSH
21722: CALL_OW 12
21726: PPUSH
21727: CALL_OW 272
21731: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21732: LD_ADDR_VAR 0 3
21736: PUSH
21737: LD_VAR 0 1
21741: PPUSH
21742: CALL_OW 251
21746: PPUSH
21747: LD_VAR 0 4
21751: PPUSH
21752: LD_INT 3
21754: PPUSH
21755: LD_INT 12
21757: PPUSH
21758: CALL_OW 12
21762: PPUSH
21763: CALL_OW 273
21767: ST_TO_ADDR
// if ValidHex ( x , y ) then
21768: LD_VAR 0 2
21772: PPUSH
21773: LD_VAR 0 3
21777: PPUSH
21778: CALL_OW 488
21782: IFFALSE 21817
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21784: LD_VAR 0 1
21788: PPUSH
21789: LD_VAR 0 2
21793: PPUSH
21794: LD_VAR 0 3
21798: PPUSH
21799: LD_INT 3
21801: PPUSH
21802: LD_INT 6
21804: PPUSH
21805: CALL_OW 12
21809: PPUSH
21810: LD_INT 1
21812: PPUSH
21813: CALL_OW 483
// end ;
21817: GO 21677
21819: POP
21820: POP
// end ;
21821: PPOPN 5
21823: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21824: LD_EXP 62
21828: PUSH
21829: LD_EXP 97
21833: AND
21834: IFFALSE 21928
21836: GO 21838
21838: DISABLE
21839: LD_INT 0
21841: PPUSH
21842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21843: LD_ADDR_VAR 0 2
21847: PUSH
21848: LD_INT 22
21850: PUSH
21851: LD_OWVAR 2
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 32
21862: PUSH
21863: LD_INT 1
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 21
21872: PUSH
21873: LD_INT 2
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: LIST
21884: PPUSH
21885: CALL_OW 69
21889: ST_TO_ADDR
// if not tmp then
21890: LD_VAR 0 2
21894: NOT
21895: IFFALSE 21899
// exit ;
21897: GO 21928
// for i in tmp do
21899: LD_ADDR_VAR 0 1
21903: PUSH
21904: LD_VAR 0 2
21908: PUSH
21909: FOR_IN
21910: IFFALSE 21926
// SetFuel ( i , 0 ) ;
21912: LD_VAR 0 1
21916: PPUSH
21917: LD_INT 0
21919: PPUSH
21920: CALL_OW 240
21924: GO 21909
21926: POP
21927: POP
// end ;
21928: PPOPN 2
21930: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21931: LD_EXP 62
21935: PUSH
21936: LD_EXP 98
21940: AND
21941: IFFALSE 22007
21943: GO 21945
21945: DISABLE
21946: LD_INT 0
21948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21949: LD_ADDR_VAR 0 1
21953: PUSH
21954: LD_INT 22
21956: PUSH
21957: LD_OWVAR 2
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 30
21968: PUSH
21969: LD_INT 29
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PPUSH
21980: CALL_OW 69
21984: ST_TO_ADDR
// if not tmp then
21985: LD_VAR 0 1
21989: NOT
21990: IFFALSE 21994
// exit ;
21992: GO 22007
// DestroyUnit ( tmp [ 1 ] ) ;
21994: LD_VAR 0 1
21998: PUSH
21999: LD_INT 1
22001: ARRAY
22002: PPUSH
22003: CALL_OW 65
// end ;
22007: PPOPN 1
22009: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22010: LD_EXP 62
22014: PUSH
22015: LD_EXP 100
22019: AND
22020: IFFALSE 22149
22022: GO 22024
22024: DISABLE
22025: LD_INT 0
22027: PPUSH
// begin uc_side := 0 ;
22028: LD_ADDR_OWVAR 20
22032: PUSH
22033: LD_INT 0
22035: ST_TO_ADDR
// uc_nation := nation_arabian ;
22036: LD_ADDR_OWVAR 21
22040: PUSH
22041: LD_INT 2
22043: ST_TO_ADDR
// hc_gallery :=  ;
22044: LD_ADDR_OWVAR 33
22048: PUSH
22049: LD_STRING 
22051: ST_TO_ADDR
// hc_name :=  ;
22052: LD_ADDR_OWVAR 26
22056: PUSH
22057: LD_STRING 
22059: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22060: LD_INT 1
22062: PPUSH
22063: LD_INT 11
22065: PPUSH
22066: LD_INT 10
22068: PPUSH
22069: CALL_OW 380
// un := CreateHuman ;
22073: LD_ADDR_VAR 0 1
22077: PUSH
22078: CALL_OW 44
22082: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22083: LD_VAR 0 1
22087: PPUSH
22088: LD_INT 1
22090: PPUSH
22091: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22095: LD_INT 35
22097: PPUSH
22098: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22102: LD_VAR 0 1
22106: PPUSH
22107: LD_INT 22
22109: PUSH
22110: LD_OWVAR 2
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PPUSH
22119: CALL_OW 69
22123: PPUSH
22124: LD_VAR 0 1
22128: PPUSH
22129: CALL_OW 74
22133: PPUSH
22134: CALL_OW 115
// until IsDead ( un ) ;
22138: LD_VAR 0 1
22142: PPUSH
22143: CALL_OW 301
22147: IFFALSE 22095
// end ;
22149: PPOPN 1
22151: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22152: LD_EXP 62
22156: PUSH
22157: LD_EXP 102
22161: AND
22162: IFFALSE 22174
22164: GO 22166
22166: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22167: LD_STRING earthquake(getX(game), 0, 32)
22169: PPUSH
22170: CALL_OW 559
22174: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22175: LD_EXP 62
22179: PUSH
22180: LD_EXP 103
22184: AND
22185: IFFALSE 22276
22187: GO 22189
22189: DISABLE
22190: LD_INT 0
22192: PPUSH
// begin enable ;
22193: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22194: LD_ADDR_VAR 0 1
22198: PUSH
22199: LD_INT 22
22201: PUSH
22202: LD_OWVAR 2
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 21
22213: PUSH
22214: LD_INT 2
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 33
22223: PUSH
22224: LD_INT 3
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: LIST
22235: PPUSH
22236: CALL_OW 69
22240: ST_TO_ADDR
// if not tmp then
22241: LD_VAR 0 1
22245: NOT
22246: IFFALSE 22250
// exit ;
22248: GO 22276
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22250: LD_VAR 0 1
22254: PUSH
22255: LD_INT 1
22257: PPUSH
22258: LD_VAR 0 1
22262: PPUSH
22263: CALL_OW 12
22267: ARRAY
22268: PPUSH
22269: LD_INT 1
22271: PPUSH
22272: CALL_OW 234
// end ;
22276: PPOPN 1
22278: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22279: LD_EXP 62
22283: PUSH
22284: LD_EXP 104
22288: AND
22289: IFFALSE 22430
22291: GO 22293
22293: DISABLE
22294: LD_INT 0
22296: PPUSH
22297: PPUSH
22298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22299: LD_ADDR_VAR 0 3
22303: PUSH
22304: LD_INT 22
22306: PUSH
22307: LD_OWVAR 2
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 25
22318: PUSH
22319: LD_INT 1
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PPUSH
22330: CALL_OW 69
22334: ST_TO_ADDR
// if not tmp then
22335: LD_VAR 0 3
22339: NOT
22340: IFFALSE 22344
// exit ;
22342: GO 22430
// un := tmp [ rand ( 1 , tmp ) ] ;
22344: LD_ADDR_VAR 0 2
22348: PUSH
22349: LD_VAR 0 3
22353: PUSH
22354: LD_INT 1
22356: PPUSH
22357: LD_VAR 0 3
22361: PPUSH
22362: CALL_OW 12
22366: ARRAY
22367: ST_TO_ADDR
// if Crawls ( un ) then
22368: LD_VAR 0 2
22372: PPUSH
22373: CALL_OW 318
22377: IFFALSE 22388
// ComWalk ( un ) ;
22379: LD_VAR 0 2
22383: PPUSH
22384: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22388: LD_VAR 0 2
22392: PPUSH
22393: LD_INT 9
22395: PPUSH
22396: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22400: LD_INT 28
22402: PPUSH
22403: LD_OWVAR 2
22407: PPUSH
22408: LD_INT 2
22410: PPUSH
22411: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22415: LD_INT 29
22417: PPUSH
22418: LD_OWVAR 2
22422: PPUSH
22423: LD_INT 2
22425: PPUSH
22426: CALL_OW 322
// end ;
22430: PPOPN 3
22432: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22433: LD_EXP 62
22437: PUSH
22438: LD_EXP 105
22442: AND
22443: IFFALSE 22554
22445: GO 22447
22447: DISABLE
22448: LD_INT 0
22450: PPUSH
22451: PPUSH
22452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22453: LD_ADDR_VAR 0 3
22457: PUSH
22458: LD_INT 22
22460: PUSH
22461: LD_OWVAR 2
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 25
22472: PUSH
22473: LD_INT 1
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PPUSH
22484: CALL_OW 69
22488: ST_TO_ADDR
// if not tmp then
22489: LD_VAR 0 3
22493: NOT
22494: IFFALSE 22498
// exit ;
22496: GO 22554
// un := tmp [ rand ( 1 , tmp ) ] ;
22498: LD_ADDR_VAR 0 2
22502: PUSH
22503: LD_VAR 0 3
22507: PUSH
22508: LD_INT 1
22510: PPUSH
22511: LD_VAR 0 3
22515: PPUSH
22516: CALL_OW 12
22520: ARRAY
22521: ST_TO_ADDR
// if Crawls ( un ) then
22522: LD_VAR 0 2
22526: PPUSH
22527: CALL_OW 318
22531: IFFALSE 22542
// ComWalk ( un ) ;
22533: LD_VAR 0 2
22537: PPUSH
22538: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22542: LD_VAR 0 2
22546: PPUSH
22547: LD_INT 8
22549: PPUSH
22550: CALL_OW 336
// end ;
22554: PPOPN 3
22556: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22557: LD_EXP 62
22561: PUSH
22562: LD_EXP 106
22566: AND
22567: IFFALSE 22711
22569: GO 22571
22571: DISABLE
22572: LD_INT 0
22574: PPUSH
22575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22576: LD_ADDR_VAR 0 2
22580: PUSH
22581: LD_INT 22
22583: PUSH
22584: LD_OWVAR 2
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 21
22595: PUSH
22596: LD_INT 2
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 2
22605: PUSH
22606: LD_INT 34
22608: PUSH
22609: LD_INT 12
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 34
22618: PUSH
22619: LD_INT 51
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 34
22628: PUSH
22629: LD_INT 32
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: LIST
22646: PPUSH
22647: CALL_OW 69
22651: ST_TO_ADDR
// if not tmp then
22652: LD_VAR 0 2
22656: NOT
22657: IFFALSE 22661
// exit ;
22659: GO 22711
// for i in tmp do
22661: LD_ADDR_VAR 0 1
22665: PUSH
22666: LD_VAR 0 2
22670: PUSH
22671: FOR_IN
22672: IFFALSE 22709
// if GetCargo ( i , mat_artifact ) = 0 then
22674: LD_VAR 0 1
22678: PPUSH
22679: LD_INT 4
22681: PPUSH
22682: CALL_OW 289
22686: PUSH
22687: LD_INT 0
22689: EQUAL
22690: IFFALSE 22707
// SetCargo ( i , mat_siberit , 100 ) ;
22692: LD_VAR 0 1
22696: PPUSH
22697: LD_INT 3
22699: PPUSH
22700: LD_INT 100
22702: PPUSH
22703: CALL_OW 290
22707: GO 22671
22709: POP
22710: POP
// end ;
22711: PPOPN 2
22713: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22714: LD_EXP 62
22718: PUSH
22719: LD_EXP 107
22723: AND
22724: IFFALSE 22907
22726: GO 22728
22728: DISABLE
22729: LD_INT 0
22731: PPUSH
22732: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22733: LD_ADDR_VAR 0 2
22737: PUSH
22738: LD_INT 22
22740: PUSH
22741: LD_OWVAR 2
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PPUSH
22750: CALL_OW 69
22754: ST_TO_ADDR
// if not tmp then
22755: LD_VAR 0 2
22759: NOT
22760: IFFALSE 22764
// exit ;
22762: GO 22907
// for i := 1 to 2 do
22764: LD_ADDR_VAR 0 1
22768: PUSH
22769: DOUBLE
22770: LD_INT 1
22772: DEC
22773: ST_TO_ADDR
22774: LD_INT 2
22776: PUSH
22777: FOR_TO
22778: IFFALSE 22905
// begin uc_side := your_side ;
22780: LD_ADDR_OWVAR 20
22784: PUSH
22785: LD_OWVAR 2
22789: ST_TO_ADDR
// uc_nation := nation_american ;
22790: LD_ADDR_OWVAR 21
22794: PUSH
22795: LD_INT 1
22797: ST_TO_ADDR
// vc_chassis := us_morphling ;
22798: LD_ADDR_OWVAR 37
22802: PUSH
22803: LD_INT 5
22805: ST_TO_ADDR
// vc_engine := engine_siberite ;
22806: LD_ADDR_OWVAR 39
22810: PUSH
22811: LD_INT 3
22813: ST_TO_ADDR
// vc_control := control_computer ;
22814: LD_ADDR_OWVAR 38
22818: PUSH
22819: LD_INT 3
22821: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22822: LD_ADDR_OWVAR 40
22826: PUSH
22827: LD_INT 10
22829: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22830: LD_VAR 0 2
22834: PUSH
22835: LD_INT 1
22837: ARRAY
22838: PPUSH
22839: CALL_OW 310
22843: NOT
22844: IFFALSE 22891
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22846: CALL_OW 45
22850: PPUSH
22851: LD_VAR 0 2
22855: PUSH
22856: LD_INT 1
22858: ARRAY
22859: PPUSH
22860: CALL_OW 250
22864: PPUSH
22865: LD_VAR 0 2
22869: PUSH
22870: LD_INT 1
22872: ARRAY
22873: PPUSH
22874: CALL_OW 251
22878: PPUSH
22879: LD_INT 12
22881: PPUSH
22882: LD_INT 1
22884: PPUSH
22885: CALL_OW 50
22889: GO 22903
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22891: CALL_OW 45
22895: PPUSH
22896: LD_INT 1
22898: PPUSH
22899: CALL_OW 51
// end ;
22903: GO 22777
22905: POP
22906: POP
// end ;
22907: PPOPN 2
22909: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22910: LD_EXP 62
22914: PUSH
22915: LD_EXP 108
22919: AND
22920: IFFALSE 23142
22922: GO 22924
22924: DISABLE
22925: LD_INT 0
22927: PPUSH
22928: PPUSH
22929: PPUSH
22930: PPUSH
22931: PPUSH
22932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22933: LD_ADDR_VAR 0 6
22937: PUSH
22938: LD_INT 22
22940: PUSH
22941: LD_OWVAR 2
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 21
22952: PUSH
22953: LD_INT 1
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 3
22962: PUSH
22963: LD_INT 23
22965: PUSH
22966: LD_INT 0
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: LIST
22981: PPUSH
22982: CALL_OW 69
22986: ST_TO_ADDR
// if not tmp then
22987: LD_VAR 0 6
22991: NOT
22992: IFFALSE 22996
// exit ;
22994: GO 23142
// s1 := rand ( 1 , 4 ) ;
22996: LD_ADDR_VAR 0 2
23000: PUSH
23001: LD_INT 1
23003: PPUSH
23004: LD_INT 4
23006: PPUSH
23007: CALL_OW 12
23011: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23012: LD_ADDR_VAR 0 4
23016: PUSH
23017: LD_VAR 0 6
23021: PUSH
23022: LD_INT 1
23024: ARRAY
23025: PPUSH
23026: LD_VAR 0 2
23030: PPUSH
23031: CALL_OW 259
23035: ST_TO_ADDR
// if s1 = 1 then
23036: LD_VAR 0 2
23040: PUSH
23041: LD_INT 1
23043: EQUAL
23044: IFFALSE 23064
// s2 := rand ( 2 , 4 ) else
23046: LD_ADDR_VAR 0 3
23050: PUSH
23051: LD_INT 2
23053: PPUSH
23054: LD_INT 4
23056: PPUSH
23057: CALL_OW 12
23061: ST_TO_ADDR
23062: GO 23072
// s2 := 1 ;
23064: LD_ADDR_VAR 0 3
23068: PUSH
23069: LD_INT 1
23071: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23072: LD_ADDR_VAR 0 5
23076: PUSH
23077: LD_VAR 0 6
23081: PUSH
23082: LD_INT 1
23084: ARRAY
23085: PPUSH
23086: LD_VAR 0 3
23090: PPUSH
23091: CALL_OW 259
23095: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23096: LD_VAR 0 6
23100: PUSH
23101: LD_INT 1
23103: ARRAY
23104: PPUSH
23105: LD_VAR 0 2
23109: PPUSH
23110: LD_VAR 0 5
23114: PPUSH
23115: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23119: LD_VAR 0 6
23123: PUSH
23124: LD_INT 1
23126: ARRAY
23127: PPUSH
23128: LD_VAR 0 3
23132: PPUSH
23133: LD_VAR 0 4
23137: PPUSH
23138: CALL_OW 237
// end ;
23142: PPOPN 6
23144: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23145: LD_EXP 62
23149: PUSH
23150: LD_EXP 109
23154: AND
23155: IFFALSE 23234
23157: GO 23159
23159: DISABLE
23160: LD_INT 0
23162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23163: LD_ADDR_VAR 0 1
23167: PUSH
23168: LD_INT 22
23170: PUSH
23171: LD_OWVAR 2
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 30
23182: PUSH
23183: LD_INT 3
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PPUSH
23194: CALL_OW 69
23198: ST_TO_ADDR
// if not tmp then
23199: LD_VAR 0 1
23203: NOT
23204: IFFALSE 23208
// exit ;
23206: GO 23234
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23208: LD_VAR 0 1
23212: PUSH
23213: LD_INT 1
23215: PPUSH
23216: LD_VAR 0 1
23220: PPUSH
23221: CALL_OW 12
23225: ARRAY
23226: PPUSH
23227: LD_INT 1
23229: PPUSH
23230: CALL_OW 234
// end ;
23234: PPOPN 1
23236: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23237: LD_EXP 62
23241: PUSH
23242: LD_EXP 110
23246: AND
23247: IFFALSE 23359
23249: GO 23251
23251: DISABLE
23252: LD_INT 0
23254: PPUSH
23255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23256: LD_ADDR_VAR 0 2
23260: PUSH
23261: LD_INT 22
23263: PUSH
23264: LD_OWVAR 2
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 2
23275: PUSH
23276: LD_INT 30
23278: PUSH
23279: LD_INT 27
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 30
23288: PUSH
23289: LD_INT 26
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 30
23298: PUSH
23299: LD_INT 28
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PPUSH
23316: CALL_OW 69
23320: ST_TO_ADDR
// if not tmp then
23321: LD_VAR 0 2
23325: NOT
23326: IFFALSE 23330
// exit ;
23328: GO 23359
// for i in tmp do
23330: LD_ADDR_VAR 0 1
23334: PUSH
23335: LD_VAR 0 2
23339: PUSH
23340: FOR_IN
23341: IFFALSE 23357
// SetLives ( i , 1 ) ;
23343: LD_VAR 0 1
23347: PPUSH
23348: LD_INT 1
23350: PPUSH
23351: CALL_OW 234
23355: GO 23340
23357: POP
23358: POP
// end ;
23359: PPOPN 2
23361: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23362: LD_EXP 62
23366: PUSH
23367: LD_EXP 111
23371: AND
23372: IFFALSE 23646
23374: GO 23376
23376: DISABLE
23377: LD_INT 0
23379: PPUSH
23380: PPUSH
23381: PPUSH
// begin i := rand ( 1 , 7 ) ;
23382: LD_ADDR_VAR 0 1
23386: PUSH
23387: LD_INT 1
23389: PPUSH
23390: LD_INT 7
23392: PPUSH
23393: CALL_OW 12
23397: ST_TO_ADDR
// case i of 1 :
23398: LD_VAR 0 1
23402: PUSH
23403: LD_INT 1
23405: DOUBLE
23406: EQUAL
23407: IFTRUE 23411
23409: GO 23421
23411: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23412: LD_STRING earthquake(getX(game), 0, 32)
23414: PPUSH
23415: CALL_OW 559
23419: GO 23646
23421: LD_INT 2
23423: DOUBLE
23424: EQUAL
23425: IFTRUE 23429
23427: GO 23443
23429: POP
// begin ToLua ( displayStucuk(); ) ;
23430: LD_STRING displayStucuk();
23432: PPUSH
23433: CALL_OW 559
// ResetFog ;
23437: CALL_OW 335
// end ; 3 :
23441: GO 23646
23443: LD_INT 3
23445: DOUBLE
23446: EQUAL
23447: IFTRUE 23451
23449: GO 23555
23451: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23452: LD_ADDR_VAR 0 2
23456: PUSH
23457: LD_INT 22
23459: PUSH
23460: LD_OWVAR 2
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 25
23471: PUSH
23472: LD_INT 1
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PPUSH
23483: CALL_OW 69
23487: ST_TO_ADDR
// if not tmp then
23488: LD_VAR 0 2
23492: NOT
23493: IFFALSE 23497
// exit ;
23495: GO 23646
// un := tmp [ rand ( 1 , tmp ) ] ;
23497: LD_ADDR_VAR 0 3
23501: PUSH
23502: LD_VAR 0 2
23506: PUSH
23507: LD_INT 1
23509: PPUSH
23510: LD_VAR 0 2
23514: PPUSH
23515: CALL_OW 12
23519: ARRAY
23520: ST_TO_ADDR
// if Crawls ( un ) then
23521: LD_VAR 0 3
23525: PPUSH
23526: CALL_OW 318
23530: IFFALSE 23541
// ComWalk ( un ) ;
23532: LD_VAR 0 3
23536: PPUSH
23537: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23541: LD_VAR 0 3
23545: PPUSH
23546: LD_INT 8
23548: PPUSH
23549: CALL_OW 336
// end ; 4 :
23553: GO 23646
23555: LD_INT 4
23557: DOUBLE
23558: EQUAL
23559: IFTRUE 23563
23561: GO 23624
23563: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23564: LD_ADDR_VAR 0 2
23568: PUSH
23569: LD_INT 22
23571: PUSH
23572: LD_OWVAR 2
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 30
23583: PUSH
23584: LD_INT 29
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PPUSH
23595: CALL_OW 69
23599: ST_TO_ADDR
// if not tmp then
23600: LD_VAR 0 2
23604: NOT
23605: IFFALSE 23609
// exit ;
23607: GO 23646
// DestroyUnit ( tmp [ 1 ] ) ;
23609: LD_VAR 0 2
23613: PUSH
23614: LD_INT 1
23616: ARRAY
23617: PPUSH
23618: CALL_OW 65
// end ; 5 .. 7 :
23622: GO 23646
23624: LD_INT 5
23626: DOUBLE
23627: GREATEREQUAL
23628: IFFALSE 23636
23630: LD_INT 7
23632: DOUBLE
23633: LESSEQUAL
23634: IFTRUE 23638
23636: GO 23645
23638: POP
// StreamSibBomb ; end ;
23639: CALL 19896 0 0
23643: GO 23646
23645: POP
// end ;
23646: PPOPN 3
23648: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23649: LD_EXP 62
23653: PUSH
23654: LD_EXP 112
23658: AND
23659: IFFALSE 23815
23661: GO 23663
23663: DISABLE
23664: LD_INT 0
23666: PPUSH
23667: PPUSH
23668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23669: LD_ADDR_VAR 0 2
23673: PUSH
23674: LD_INT 81
23676: PUSH
23677: LD_OWVAR 2
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 2
23688: PUSH
23689: LD_INT 21
23691: PUSH
23692: LD_INT 1
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 21
23701: PUSH
23702: LD_INT 2
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: LIST
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PPUSH
23718: CALL_OW 69
23722: ST_TO_ADDR
// if not tmp then
23723: LD_VAR 0 2
23727: NOT
23728: IFFALSE 23732
// exit ;
23730: GO 23815
// p := 0 ;
23732: LD_ADDR_VAR 0 3
23736: PUSH
23737: LD_INT 0
23739: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23740: LD_INT 35
23742: PPUSH
23743: CALL_OW 67
// p := p + 1 ;
23747: LD_ADDR_VAR 0 3
23751: PUSH
23752: LD_VAR 0 3
23756: PUSH
23757: LD_INT 1
23759: PLUS
23760: ST_TO_ADDR
// for i in tmp do
23761: LD_ADDR_VAR 0 1
23765: PUSH
23766: LD_VAR 0 2
23770: PUSH
23771: FOR_IN
23772: IFFALSE 23803
// if GetLives ( i ) < 1000 then
23774: LD_VAR 0 1
23778: PPUSH
23779: CALL_OW 256
23783: PUSH
23784: LD_INT 1000
23786: LESS
23787: IFFALSE 23801
// SetLives ( i , 1000 ) ;
23789: LD_VAR 0 1
23793: PPUSH
23794: LD_INT 1000
23796: PPUSH
23797: CALL_OW 234
23801: GO 23771
23803: POP
23804: POP
// until p > 20 ;
23805: LD_VAR 0 3
23809: PUSH
23810: LD_INT 20
23812: GREATER
23813: IFFALSE 23740
// end ;
23815: PPOPN 3
23817: END
// every 0 0$1 trigger StreamModeActive and sTime do
23818: LD_EXP 62
23822: PUSH
23823: LD_EXP 113
23827: AND
23828: IFFALSE 23863
23830: GO 23832
23832: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23833: LD_INT 28
23835: PPUSH
23836: LD_OWVAR 2
23840: PPUSH
23841: LD_INT 2
23843: PPUSH
23844: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23848: LD_INT 30
23850: PPUSH
23851: LD_OWVAR 2
23855: PPUSH
23856: LD_INT 2
23858: PPUSH
23859: CALL_OW 322
// end ;
23863: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23864: LD_EXP 62
23868: PUSH
23869: LD_EXP 114
23873: AND
23874: IFFALSE 23995
23876: GO 23878
23878: DISABLE
23879: LD_INT 0
23881: PPUSH
23882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23883: LD_ADDR_VAR 0 2
23887: PUSH
23888: LD_INT 22
23890: PUSH
23891: LD_OWVAR 2
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 21
23902: PUSH
23903: LD_INT 1
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 3
23912: PUSH
23913: LD_INT 23
23915: PUSH
23916: LD_INT 0
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: LIST
23931: PPUSH
23932: CALL_OW 69
23936: ST_TO_ADDR
// if not tmp then
23937: LD_VAR 0 2
23941: NOT
23942: IFFALSE 23946
// exit ;
23944: GO 23995
// for i in tmp do
23946: LD_ADDR_VAR 0 1
23950: PUSH
23951: LD_VAR 0 2
23955: PUSH
23956: FOR_IN
23957: IFFALSE 23993
// begin if Crawls ( i ) then
23959: LD_VAR 0 1
23963: PPUSH
23964: CALL_OW 318
23968: IFFALSE 23979
// ComWalk ( i ) ;
23970: LD_VAR 0 1
23974: PPUSH
23975: CALL_OW 138
// SetClass ( i , 2 ) ;
23979: LD_VAR 0 1
23983: PPUSH
23984: LD_INT 2
23986: PPUSH
23987: CALL_OW 336
// end ;
23991: GO 23956
23993: POP
23994: POP
// end ;
23995: PPOPN 2
23997: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23998: LD_EXP 62
24002: PUSH
24003: LD_EXP 115
24007: AND
24008: IFFALSE 24289
24010: GO 24012
24012: DISABLE
24013: LD_INT 0
24015: PPUSH
24016: PPUSH
24017: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24018: LD_OWVAR 2
24022: PPUSH
24023: LD_INT 9
24025: PPUSH
24026: LD_INT 1
24028: PPUSH
24029: LD_INT 1
24031: PPUSH
24032: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24036: LD_INT 9
24038: PPUSH
24039: LD_OWVAR 2
24043: PPUSH
24044: CALL_OW 343
// uc_side := 9 ;
24048: LD_ADDR_OWVAR 20
24052: PUSH
24053: LD_INT 9
24055: ST_TO_ADDR
// uc_nation := 2 ;
24056: LD_ADDR_OWVAR 21
24060: PUSH
24061: LD_INT 2
24063: ST_TO_ADDR
// hc_name := Dark Warrior ;
24064: LD_ADDR_OWVAR 26
24068: PUSH
24069: LD_STRING Dark Warrior
24071: ST_TO_ADDR
// hc_gallery :=  ;
24072: LD_ADDR_OWVAR 33
24076: PUSH
24077: LD_STRING 
24079: ST_TO_ADDR
// hc_noskilllimit := true ;
24080: LD_ADDR_OWVAR 76
24084: PUSH
24085: LD_INT 1
24087: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24088: LD_ADDR_OWVAR 31
24092: PUSH
24093: LD_INT 30
24095: PUSH
24096: LD_INT 30
24098: PUSH
24099: LD_INT 30
24101: PUSH
24102: LD_INT 30
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: ST_TO_ADDR
// un := CreateHuman ;
24111: LD_ADDR_VAR 0 3
24115: PUSH
24116: CALL_OW 44
24120: ST_TO_ADDR
// hc_noskilllimit := false ;
24121: LD_ADDR_OWVAR 76
24125: PUSH
24126: LD_INT 0
24128: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24129: LD_VAR 0 3
24133: PPUSH
24134: LD_INT 1
24136: PPUSH
24137: CALL_OW 51
// p := 0 ;
24141: LD_ADDR_VAR 0 2
24145: PUSH
24146: LD_INT 0
24148: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24149: LD_INT 35
24151: PPUSH
24152: CALL_OW 67
// p := p + 1 ;
24156: LD_ADDR_VAR 0 2
24160: PUSH
24161: LD_VAR 0 2
24165: PUSH
24166: LD_INT 1
24168: PLUS
24169: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24170: LD_VAR 0 3
24174: PPUSH
24175: CALL_OW 256
24179: PUSH
24180: LD_INT 1000
24182: LESS
24183: IFFALSE 24197
// SetLives ( un , 1000 ) ;
24185: LD_VAR 0 3
24189: PPUSH
24190: LD_INT 1000
24192: PPUSH
24193: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24197: LD_VAR 0 3
24201: PPUSH
24202: LD_INT 81
24204: PUSH
24205: LD_OWVAR 2
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 91
24216: PUSH
24217: LD_VAR 0 3
24221: PUSH
24222: LD_INT 30
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: LIST
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PPUSH
24234: CALL_OW 69
24238: PPUSH
24239: LD_VAR 0 3
24243: PPUSH
24244: CALL_OW 74
24248: PPUSH
24249: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
24253: LD_VAR 0 2
24257: PUSH
24258: LD_INT 60
24260: GREATER
24261: PUSH
24262: LD_VAR 0 3
24266: PPUSH
24267: CALL_OW 301
24271: OR
24272: IFFALSE 24149
// if un then
24274: LD_VAR 0 3
24278: IFFALSE 24289
// RemoveUnit ( un ) ;
24280: LD_VAR 0 3
24284: PPUSH
24285: CALL_OW 64
// end ;
24289: PPOPN 3
24291: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24292: LD_INT 0
24294: PPUSH
// case cmd of 301 :
24295: LD_VAR 0 1
24299: PUSH
24300: LD_INT 301
24302: DOUBLE
24303: EQUAL
24304: IFTRUE 24308
24306: GO 24340
24308: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24309: LD_VAR 0 6
24313: PPUSH
24314: LD_VAR 0 7
24318: PPUSH
24319: LD_VAR 0 8
24323: PPUSH
24324: LD_VAR 0 4
24328: PPUSH
24329: LD_VAR 0 5
24333: PPUSH
24334: CALL 25541 0 5
24338: GO 24461
24340: LD_INT 302
24342: DOUBLE
24343: EQUAL
24344: IFTRUE 24348
24346: GO 24385
24348: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24349: LD_VAR 0 6
24353: PPUSH
24354: LD_VAR 0 7
24358: PPUSH
24359: LD_VAR 0 8
24363: PPUSH
24364: LD_VAR 0 9
24368: PPUSH
24369: LD_VAR 0 4
24373: PPUSH
24374: LD_VAR 0 5
24378: PPUSH
24379: CALL 25632 0 6
24383: GO 24461
24385: LD_INT 303
24387: DOUBLE
24388: EQUAL
24389: IFTRUE 24393
24391: GO 24430
24393: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24394: LD_VAR 0 6
24398: PPUSH
24399: LD_VAR 0 7
24403: PPUSH
24404: LD_VAR 0 8
24408: PPUSH
24409: LD_VAR 0 9
24413: PPUSH
24414: LD_VAR 0 4
24418: PPUSH
24419: LD_VAR 0 5
24423: PPUSH
24424: CALL 24466 0 6
24428: GO 24461
24430: LD_INT 304
24432: DOUBLE
24433: EQUAL
24434: IFTRUE 24438
24436: GO 24460
24438: POP
// hHackTeleport ( unit , x , y ) ; end ;
24439: LD_VAR 0 2
24443: PPUSH
24444: LD_VAR 0 4
24448: PPUSH
24449: LD_VAR 0 5
24453: PPUSH
24454: CALL 26225 0 3
24458: GO 24461
24460: POP
// end ;
24461: LD_VAR 0 12
24465: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24466: LD_INT 0
24468: PPUSH
24469: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24470: LD_VAR 0 1
24474: PUSH
24475: LD_INT 1
24477: LESS
24478: PUSH
24479: LD_VAR 0 1
24483: PUSH
24484: LD_INT 3
24486: GREATER
24487: OR
24488: PUSH
24489: LD_VAR 0 5
24493: PPUSH
24494: LD_VAR 0 6
24498: PPUSH
24499: CALL_OW 428
24503: OR
24504: IFFALSE 24508
// exit ;
24506: GO 25228
// uc_side := your_side ;
24508: LD_ADDR_OWVAR 20
24512: PUSH
24513: LD_OWVAR 2
24517: ST_TO_ADDR
// uc_nation := nation ;
24518: LD_ADDR_OWVAR 21
24522: PUSH
24523: LD_VAR 0 1
24527: ST_TO_ADDR
// bc_level = 1 ;
24528: LD_ADDR_OWVAR 43
24532: PUSH
24533: LD_INT 1
24535: ST_TO_ADDR
// case btype of 1 :
24536: LD_VAR 0 2
24540: PUSH
24541: LD_INT 1
24543: DOUBLE
24544: EQUAL
24545: IFTRUE 24549
24547: GO 24560
24549: POP
// bc_type := b_depot ; 2 :
24550: LD_ADDR_OWVAR 42
24554: PUSH
24555: LD_INT 0
24557: ST_TO_ADDR
24558: GO 25172
24560: LD_INT 2
24562: DOUBLE
24563: EQUAL
24564: IFTRUE 24568
24566: GO 24579
24568: POP
// bc_type := b_warehouse ; 3 :
24569: LD_ADDR_OWVAR 42
24573: PUSH
24574: LD_INT 1
24576: ST_TO_ADDR
24577: GO 25172
24579: LD_INT 3
24581: DOUBLE
24582: EQUAL
24583: IFTRUE 24587
24585: GO 24598
24587: POP
// bc_type := b_lab ; 4 .. 9 :
24588: LD_ADDR_OWVAR 42
24592: PUSH
24593: LD_INT 6
24595: ST_TO_ADDR
24596: GO 25172
24598: LD_INT 4
24600: DOUBLE
24601: GREATEREQUAL
24602: IFFALSE 24610
24604: LD_INT 9
24606: DOUBLE
24607: LESSEQUAL
24608: IFTRUE 24612
24610: GO 24664
24612: POP
// begin bc_type := b_lab_half ;
24613: LD_ADDR_OWVAR 42
24617: PUSH
24618: LD_INT 7
24620: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24621: LD_ADDR_OWVAR 44
24625: PUSH
24626: LD_INT 10
24628: PUSH
24629: LD_INT 11
24631: PUSH
24632: LD_INT 12
24634: PUSH
24635: LD_INT 15
24637: PUSH
24638: LD_INT 14
24640: PUSH
24641: LD_INT 13
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: PUSH
24652: LD_VAR 0 2
24656: PUSH
24657: LD_INT 3
24659: MINUS
24660: ARRAY
24661: ST_TO_ADDR
// end ; 10 .. 13 :
24662: GO 25172
24664: LD_INT 10
24666: DOUBLE
24667: GREATEREQUAL
24668: IFFALSE 24676
24670: LD_INT 13
24672: DOUBLE
24673: LESSEQUAL
24674: IFTRUE 24678
24676: GO 24755
24678: POP
// begin bc_type := b_lab_full ;
24679: LD_ADDR_OWVAR 42
24683: PUSH
24684: LD_INT 8
24686: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24687: LD_ADDR_OWVAR 44
24691: PUSH
24692: LD_INT 10
24694: PUSH
24695: LD_INT 12
24697: PUSH
24698: LD_INT 14
24700: PUSH
24701: LD_INT 13
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: PUSH
24710: LD_VAR 0 2
24714: PUSH
24715: LD_INT 9
24717: MINUS
24718: ARRAY
24719: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24720: LD_ADDR_OWVAR 45
24724: PUSH
24725: LD_INT 11
24727: PUSH
24728: LD_INT 15
24730: PUSH
24731: LD_INT 12
24733: PUSH
24734: LD_INT 15
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: PUSH
24743: LD_VAR 0 2
24747: PUSH
24748: LD_INT 9
24750: MINUS
24751: ARRAY
24752: ST_TO_ADDR
// end ; 14 :
24753: GO 25172
24755: LD_INT 14
24757: DOUBLE
24758: EQUAL
24759: IFTRUE 24763
24761: GO 24774
24763: POP
// bc_type := b_workshop ; 15 :
24764: LD_ADDR_OWVAR 42
24768: PUSH
24769: LD_INT 2
24771: ST_TO_ADDR
24772: GO 25172
24774: LD_INT 15
24776: DOUBLE
24777: EQUAL
24778: IFTRUE 24782
24780: GO 24793
24782: POP
// bc_type := b_factory ; 16 :
24783: LD_ADDR_OWVAR 42
24787: PUSH
24788: LD_INT 3
24790: ST_TO_ADDR
24791: GO 25172
24793: LD_INT 16
24795: DOUBLE
24796: EQUAL
24797: IFTRUE 24801
24799: GO 24812
24801: POP
// bc_type := b_ext_gun ; 17 :
24802: LD_ADDR_OWVAR 42
24806: PUSH
24807: LD_INT 17
24809: ST_TO_ADDR
24810: GO 25172
24812: LD_INT 17
24814: DOUBLE
24815: EQUAL
24816: IFTRUE 24820
24818: GO 24848
24820: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24821: LD_ADDR_OWVAR 42
24825: PUSH
24826: LD_INT 19
24828: PUSH
24829: LD_INT 23
24831: PUSH
24832: LD_INT 19
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: LIST
24839: PUSH
24840: LD_VAR 0 1
24844: ARRAY
24845: ST_TO_ADDR
24846: GO 25172
24848: LD_INT 18
24850: DOUBLE
24851: EQUAL
24852: IFTRUE 24856
24854: GO 24867
24856: POP
// bc_type := b_ext_radar ; 19 :
24857: LD_ADDR_OWVAR 42
24861: PUSH
24862: LD_INT 20
24864: ST_TO_ADDR
24865: GO 25172
24867: LD_INT 19
24869: DOUBLE
24870: EQUAL
24871: IFTRUE 24875
24873: GO 24886
24875: POP
// bc_type := b_ext_radio ; 20 :
24876: LD_ADDR_OWVAR 42
24880: PUSH
24881: LD_INT 22
24883: ST_TO_ADDR
24884: GO 25172
24886: LD_INT 20
24888: DOUBLE
24889: EQUAL
24890: IFTRUE 24894
24892: GO 24905
24894: POP
// bc_type := b_ext_siberium ; 21 :
24895: LD_ADDR_OWVAR 42
24899: PUSH
24900: LD_INT 21
24902: ST_TO_ADDR
24903: GO 25172
24905: LD_INT 21
24907: DOUBLE
24908: EQUAL
24909: IFTRUE 24913
24911: GO 24924
24913: POP
// bc_type := b_ext_computer ; 22 :
24914: LD_ADDR_OWVAR 42
24918: PUSH
24919: LD_INT 24
24921: ST_TO_ADDR
24922: GO 25172
24924: LD_INT 22
24926: DOUBLE
24927: EQUAL
24928: IFTRUE 24932
24930: GO 24943
24932: POP
// bc_type := b_ext_track ; 23 :
24933: LD_ADDR_OWVAR 42
24937: PUSH
24938: LD_INT 16
24940: ST_TO_ADDR
24941: GO 25172
24943: LD_INT 23
24945: DOUBLE
24946: EQUAL
24947: IFTRUE 24951
24949: GO 24962
24951: POP
// bc_type := b_ext_laser ; 24 :
24952: LD_ADDR_OWVAR 42
24956: PUSH
24957: LD_INT 25
24959: ST_TO_ADDR
24960: GO 25172
24962: LD_INT 24
24964: DOUBLE
24965: EQUAL
24966: IFTRUE 24970
24968: GO 24981
24970: POP
// bc_type := b_control_tower ; 25 :
24971: LD_ADDR_OWVAR 42
24975: PUSH
24976: LD_INT 36
24978: ST_TO_ADDR
24979: GO 25172
24981: LD_INT 25
24983: DOUBLE
24984: EQUAL
24985: IFTRUE 24989
24987: GO 25000
24989: POP
// bc_type := b_breastwork ; 26 :
24990: LD_ADDR_OWVAR 42
24994: PUSH
24995: LD_INT 31
24997: ST_TO_ADDR
24998: GO 25172
25000: LD_INT 26
25002: DOUBLE
25003: EQUAL
25004: IFTRUE 25008
25006: GO 25019
25008: POP
// bc_type := b_bunker ; 27 :
25009: LD_ADDR_OWVAR 42
25013: PUSH
25014: LD_INT 32
25016: ST_TO_ADDR
25017: GO 25172
25019: LD_INT 27
25021: DOUBLE
25022: EQUAL
25023: IFTRUE 25027
25025: GO 25038
25027: POP
// bc_type := b_turret ; 28 :
25028: LD_ADDR_OWVAR 42
25032: PUSH
25033: LD_INT 33
25035: ST_TO_ADDR
25036: GO 25172
25038: LD_INT 28
25040: DOUBLE
25041: EQUAL
25042: IFTRUE 25046
25044: GO 25057
25046: POP
// bc_type := b_armoury ; 29 :
25047: LD_ADDR_OWVAR 42
25051: PUSH
25052: LD_INT 4
25054: ST_TO_ADDR
25055: GO 25172
25057: LD_INT 29
25059: DOUBLE
25060: EQUAL
25061: IFTRUE 25065
25063: GO 25076
25065: POP
// bc_type := b_barracks ; 30 :
25066: LD_ADDR_OWVAR 42
25070: PUSH
25071: LD_INT 5
25073: ST_TO_ADDR
25074: GO 25172
25076: LD_INT 30
25078: DOUBLE
25079: EQUAL
25080: IFTRUE 25084
25082: GO 25095
25084: POP
// bc_type := b_solar_power ; 31 :
25085: LD_ADDR_OWVAR 42
25089: PUSH
25090: LD_INT 27
25092: ST_TO_ADDR
25093: GO 25172
25095: LD_INT 31
25097: DOUBLE
25098: EQUAL
25099: IFTRUE 25103
25101: GO 25114
25103: POP
// bc_type := b_oil_power ; 32 :
25104: LD_ADDR_OWVAR 42
25108: PUSH
25109: LD_INT 26
25111: ST_TO_ADDR
25112: GO 25172
25114: LD_INT 32
25116: DOUBLE
25117: EQUAL
25118: IFTRUE 25122
25120: GO 25133
25122: POP
// bc_type := b_siberite_power ; 33 :
25123: LD_ADDR_OWVAR 42
25127: PUSH
25128: LD_INT 28
25130: ST_TO_ADDR
25131: GO 25172
25133: LD_INT 33
25135: DOUBLE
25136: EQUAL
25137: IFTRUE 25141
25139: GO 25152
25141: POP
// bc_type := b_oil_mine ; 34 :
25142: LD_ADDR_OWVAR 42
25146: PUSH
25147: LD_INT 29
25149: ST_TO_ADDR
25150: GO 25172
25152: LD_INT 34
25154: DOUBLE
25155: EQUAL
25156: IFTRUE 25160
25158: GO 25171
25160: POP
// bc_type := b_siberite_mine ; end ;
25161: LD_ADDR_OWVAR 42
25165: PUSH
25166: LD_INT 30
25168: ST_TO_ADDR
25169: GO 25172
25171: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25172: LD_ADDR_VAR 0 8
25176: PUSH
25177: LD_VAR 0 5
25181: PPUSH
25182: LD_VAR 0 6
25186: PPUSH
25187: LD_VAR 0 3
25191: PPUSH
25192: CALL_OW 47
25196: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25197: LD_OWVAR 42
25201: PUSH
25202: LD_INT 32
25204: PUSH
25205: LD_INT 33
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: IN
25212: IFFALSE 25228
// PlaceWeaponTurret ( b , weapon ) ;
25214: LD_VAR 0 8
25218: PPUSH
25219: LD_VAR 0 4
25223: PPUSH
25224: CALL_OW 431
// end ;
25228: LD_VAR 0 7
25232: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25233: LD_INT 0
25235: PPUSH
25236: PPUSH
25237: PPUSH
25238: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25239: LD_ADDR_VAR 0 4
25243: PUSH
25244: LD_INT 22
25246: PUSH
25247: LD_OWVAR 2
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 2
25258: PUSH
25259: LD_INT 30
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 30
25271: PUSH
25272: LD_INT 1
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: LIST
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PPUSH
25288: CALL_OW 69
25292: ST_TO_ADDR
// if not tmp then
25293: LD_VAR 0 4
25297: NOT
25298: IFFALSE 25302
// exit ;
25300: GO 25361
// for i in tmp do
25302: LD_ADDR_VAR 0 2
25306: PUSH
25307: LD_VAR 0 4
25311: PUSH
25312: FOR_IN
25313: IFFALSE 25359
// for j = 1 to 3 do
25315: LD_ADDR_VAR 0 3
25319: PUSH
25320: DOUBLE
25321: LD_INT 1
25323: DEC
25324: ST_TO_ADDR
25325: LD_INT 3
25327: PUSH
25328: FOR_TO
25329: IFFALSE 25355
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25331: LD_VAR 0 2
25335: PPUSH
25336: CALL_OW 274
25340: PPUSH
25341: LD_VAR 0 3
25345: PPUSH
25346: LD_INT 99999
25348: PPUSH
25349: CALL_OW 277
25353: GO 25328
25355: POP
25356: POP
25357: GO 25312
25359: POP
25360: POP
// end ;
25361: LD_VAR 0 1
25365: RET
// export function hHackSetLevel10 ; var i , j ; begin
25366: LD_INT 0
25368: PPUSH
25369: PPUSH
25370: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25371: LD_ADDR_VAR 0 2
25375: PUSH
25376: LD_INT 21
25378: PUSH
25379: LD_INT 1
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PPUSH
25386: CALL_OW 69
25390: PUSH
25391: FOR_IN
25392: IFFALSE 25444
// if IsSelected ( i ) then
25394: LD_VAR 0 2
25398: PPUSH
25399: CALL_OW 306
25403: IFFALSE 25442
// begin for j := 1 to 4 do
25405: LD_ADDR_VAR 0 3
25409: PUSH
25410: DOUBLE
25411: LD_INT 1
25413: DEC
25414: ST_TO_ADDR
25415: LD_INT 4
25417: PUSH
25418: FOR_TO
25419: IFFALSE 25440
// SetSkill ( i , j , 10 ) ;
25421: LD_VAR 0 2
25425: PPUSH
25426: LD_VAR 0 3
25430: PPUSH
25431: LD_INT 10
25433: PPUSH
25434: CALL_OW 237
25438: GO 25418
25440: POP
25441: POP
// end ;
25442: GO 25391
25444: POP
25445: POP
// end ;
25446: LD_VAR 0 1
25450: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25451: LD_INT 0
25453: PPUSH
25454: PPUSH
25455: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25456: LD_ADDR_VAR 0 2
25460: PUSH
25461: LD_INT 22
25463: PUSH
25464: LD_OWVAR 2
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 21
25475: PUSH
25476: LD_INT 1
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PPUSH
25487: CALL_OW 69
25491: PUSH
25492: FOR_IN
25493: IFFALSE 25534
// begin for j := 1 to 4 do
25495: LD_ADDR_VAR 0 3
25499: PUSH
25500: DOUBLE
25501: LD_INT 1
25503: DEC
25504: ST_TO_ADDR
25505: LD_INT 4
25507: PUSH
25508: FOR_TO
25509: IFFALSE 25530
// SetSkill ( i , j , 10 ) ;
25511: LD_VAR 0 2
25515: PPUSH
25516: LD_VAR 0 3
25520: PPUSH
25521: LD_INT 10
25523: PPUSH
25524: CALL_OW 237
25528: GO 25508
25530: POP
25531: POP
// end ;
25532: GO 25492
25534: POP
25535: POP
// end ;
25536: LD_VAR 0 1
25540: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25541: LD_INT 0
25543: PPUSH
// uc_side := your_side ;
25544: LD_ADDR_OWVAR 20
25548: PUSH
25549: LD_OWVAR 2
25553: ST_TO_ADDR
// uc_nation := nation ;
25554: LD_ADDR_OWVAR 21
25558: PUSH
25559: LD_VAR 0 1
25563: ST_TO_ADDR
// InitHc ;
25564: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25568: LD_INT 0
25570: PPUSH
25571: LD_VAR 0 2
25575: PPUSH
25576: LD_VAR 0 3
25580: PPUSH
25581: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25585: LD_VAR 0 4
25589: PPUSH
25590: LD_VAR 0 5
25594: PPUSH
25595: CALL_OW 428
25599: PUSH
25600: LD_INT 0
25602: EQUAL
25603: IFFALSE 25627
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25605: CALL_OW 44
25609: PPUSH
25610: LD_VAR 0 4
25614: PPUSH
25615: LD_VAR 0 5
25619: PPUSH
25620: LD_INT 1
25622: PPUSH
25623: CALL_OW 48
// end ;
25627: LD_VAR 0 6
25631: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25632: LD_INT 0
25634: PPUSH
25635: PPUSH
// uc_side := your_side ;
25636: LD_ADDR_OWVAR 20
25640: PUSH
25641: LD_OWVAR 2
25645: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25646: LD_VAR 0 1
25650: PUSH
25651: LD_INT 1
25653: PUSH
25654: LD_INT 2
25656: PUSH
25657: LD_INT 3
25659: PUSH
25660: LD_INT 4
25662: PUSH
25663: LD_INT 5
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: IN
25673: IFFALSE 25685
// uc_nation := nation_american else
25675: LD_ADDR_OWVAR 21
25679: PUSH
25680: LD_INT 1
25682: ST_TO_ADDR
25683: GO 25728
// if chassis in [ 11 , 12 , 13 , 14 ] then
25685: LD_VAR 0 1
25689: PUSH
25690: LD_INT 11
25692: PUSH
25693: LD_INT 12
25695: PUSH
25696: LD_INT 13
25698: PUSH
25699: LD_INT 14
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: IN
25708: IFFALSE 25720
// uc_nation := nation_arabian else
25710: LD_ADDR_OWVAR 21
25714: PUSH
25715: LD_INT 2
25717: ST_TO_ADDR
25718: GO 25728
// uc_nation := nation_russian ;
25720: LD_ADDR_OWVAR 21
25724: PUSH
25725: LD_INT 3
25727: ST_TO_ADDR
// vc_chassis := chassis ;
25728: LD_ADDR_OWVAR 37
25732: PUSH
25733: LD_VAR 0 1
25737: ST_TO_ADDR
// vc_engine := engine ;
25738: LD_ADDR_OWVAR 39
25742: PUSH
25743: LD_VAR 0 2
25747: ST_TO_ADDR
// vc_control := control ;
25748: LD_ADDR_OWVAR 38
25752: PUSH
25753: LD_VAR 0 3
25757: ST_TO_ADDR
// vc_weapon := weapon ;
25758: LD_ADDR_OWVAR 40
25762: PUSH
25763: LD_VAR 0 4
25767: ST_TO_ADDR
// un := CreateVehicle ;
25768: LD_ADDR_VAR 0 8
25772: PUSH
25773: CALL_OW 45
25777: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25778: LD_VAR 0 8
25782: PPUSH
25783: LD_INT 0
25785: PPUSH
25786: LD_INT 5
25788: PPUSH
25789: CALL_OW 12
25793: PPUSH
25794: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25798: LD_VAR 0 8
25802: PPUSH
25803: LD_VAR 0 5
25807: PPUSH
25808: LD_VAR 0 6
25812: PPUSH
25813: LD_INT 1
25815: PPUSH
25816: CALL_OW 48
// end ;
25820: LD_VAR 0 7
25824: RET
// export hInvincible ; every 1 do
25825: GO 25827
25827: DISABLE
// hInvincible := [ ] ;
25828: LD_ADDR_EXP 116
25832: PUSH
25833: EMPTY
25834: ST_TO_ADDR
25835: END
// every 10 do var i ;
25836: GO 25838
25838: DISABLE
25839: LD_INT 0
25841: PPUSH
// begin enable ;
25842: ENABLE
// if not hInvincible then
25843: LD_EXP 116
25847: NOT
25848: IFFALSE 25852
// exit ;
25850: GO 25896
// for i in hInvincible do
25852: LD_ADDR_VAR 0 1
25856: PUSH
25857: LD_EXP 116
25861: PUSH
25862: FOR_IN
25863: IFFALSE 25894
// if GetLives ( i ) < 1000 then
25865: LD_VAR 0 1
25869: PPUSH
25870: CALL_OW 256
25874: PUSH
25875: LD_INT 1000
25877: LESS
25878: IFFALSE 25892
// SetLives ( i , 1000 ) ;
25880: LD_VAR 0 1
25884: PPUSH
25885: LD_INT 1000
25887: PPUSH
25888: CALL_OW 234
25892: GO 25862
25894: POP
25895: POP
// end ;
25896: PPOPN 1
25898: END
// export function hHackInvincible ; var i ; begin
25899: LD_INT 0
25901: PPUSH
25902: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25903: LD_ADDR_VAR 0 2
25907: PUSH
25908: LD_INT 2
25910: PUSH
25911: LD_INT 21
25913: PUSH
25914: LD_INT 1
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 21
25923: PUSH
25924: LD_INT 2
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: LIST
25935: PPUSH
25936: CALL_OW 69
25940: PUSH
25941: FOR_IN
25942: IFFALSE 26003
// if IsSelected ( i ) then
25944: LD_VAR 0 2
25948: PPUSH
25949: CALL_OW 306
25953: IFFALSE 26001
// begin if i in hInvincible then
25955: LD_VAR 0 2
25959: PUSH
25960: LD_EXP 116
25964: IN
25965: IFFALSE 25985
// hInvincible := hInvincible diff i else
25967: LD_ADDR_EXP 116
25971: PUSH
25972: LD_EXP 116
25976: PUSH
25977: LD_VAR 0 2
25981: DIFF
25982: ST_TO_ADDR
25983: GO 26001
// hInvincible := hInvincible union i ;
25985: LD_ADDR_EXP 116
25989: PUSH
25990: LD_EXP 116
25994: PUSH
25995: LD_VAR 0 2
25999: UNION
26000: ST_TO_ADDR
// end ;
26001: GO 25941
26003: POP
26004: POP
// end ;
26005: LD_VAR 0 1
26009: RET
// export function hHackInvisible ; var i , j ; begin
26010: LD_INT 0
26012: PPUSH
26013: PPUSH
26014: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26015: LD_ADDR_VAR 0 2
26019: PUSH
26020: LD_INT 21
26022: PUSH
26023: LD_INT 1
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PPUSH
26030: CALL_OW 69
26034: PUSH
26035: FOR_IN
26036: IFFALSE 26060
// if IsSelected ( i ) then
26038: LD_VAR 0 2
26042: PPUSH
26043: CALL_OW 306
26047: IFFALSE 26058
// ComForceInvisible ( i ) ;
26049: LD_VAR 0 2
26053: PPUSH
26054: CALL_OW 496
26058: GO 26035
26060: POP
26061: POP
// end ;
26062: LD_VAR 0 1
26066: RET
// export function hHackChangeYourSide ; begin
26067: LD_INT 0
26069: PPUSH
// if your_side = 8 then
26070: LD_OWVAR 2
26074: PUSH
26075: LD_INT 8
26077: EQUAL
26078: IFFALSE 26090
// your_side := 0 else
26080: LD_ADDR_OWVAR 2
26084: PUSH
26085: LD_INT 0
26087: ST_TO_ADDR
26088: GO 26104
// your_side := your_side + 1 ;
26090: LD_ADDR_OWVAR 2
26094: PUSH
26095: LD_OWVAR 2
26099: PUSH
26100: LD_INT 1
26102: PLUS
26103: ST_TO_ADDR
// end ;
26104: LD_VAR 0 1
26108: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26109: LD_INT 0
26111: PPUSH
26112: PPUSH
26113: PPUSH
// for i in all_units do
26114: LD_ADDR_VAR 0 2
26118: PUSH
26119: LD_OWVAR 3
26123: PUSH
26124: FOR_IN
26125: IFFALSE 26203
// if IsSelected ( i ) then
26127: LD_VAR 0 2
26131: PPUSH
26132: CALL_OW 306
26136: IFFALSE 26201
// begin j := GetSide ( i ) ;
26138: LD_ADDR_VAR 0 3
26142: PUSH
26143: LD_VAR 0 2
26147: PPUSH
26148: CALL_OW 255
26152: ST_TO_ADDR
// if j = 8 then
26153: LD_VAR 0 3
26157: PUSH
26158: LD_INT 8
26160: EQUAL
26161: IFFALSE 26173
// j := 0 else
26163: LD_ADDR_VAR 0 3
26167: PUSH
26168: LD_INT 0
26170: ST_TO_ADDR
26171: GO 26187
// j := j + 1 ;
26173: LD_ADDR_VAR 0 3
26177: PUSH
26178: LD_VAR 0 3
26182: PUSH
26183: LD_INT 1
26185: PLUS
26186: ST_TO_ADDR
// SetSide ( i , j ) ;
26187: LD_VAR 0 2
26191: PPUSH
26192: LD_VAR 0 3
26196: PPUSH
26197: CALL_OW 235
// end ;
26201: GO 26124
26203: POP
26204: POP
// end ;
26205: LD_VAR 0 1
26209: RET
// export function hHackFog ; begin
26210: LD_INT 0
26212: PPUSH
// FogOff ( true ) ;
26213: LD_INT 1
26215: PPUSH
26216: CALL_OW 344
// end ;
26220: LD_VAR 0 1
26224: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26225: LD_INT 0
26227: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26228: LD_VAR 0 1
26232: PPUSH
26233: LD_VAR 0 2
26237: PPUSH
26238: LD_VAR 0 3
26242: PPUSH
26243: LD_INT 1
26245: PPUSH
26246: LD_INT 1
26248: PPUSH
26249: CALL_OW 483
// CenterOnXY ( x , y ) ;
26253: LD_VAR 0 2
26257: PPUSH
26258: LD_VAR 0 3
26262: PPUSH
26263: CALL_OW 84
// end ; end_of_file
26267: LD_VAR 0 4
26271: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26272: LD_INT 0
26274: PPUSH
26275: PPUSH
26276: PPUSH
26277: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26278: LD_VAR 0 1
26282: PPUSH
26283: CALL_OW 264
26287: PUSH
26288: LD_EXP 47
26292: EQUAL
26293: IFFALSE 26365
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26295: LD_INT 68
26297: PPUSH
26298: LD_VAR 0 1
26302: PPUSH
26303: CALL_OW 255
26307: PPUSH
26308: CALL_OW 321
26312: PUSH
26313: LD_INT 2
26315: EQUAL
26316: IFFALSE 26328
// eff := 70 else
26318: LD_ADDR_VAR 0 4
26322: PUSH
26323: LD_INT 70
26325: ST_TO_ADDR
26326: GO 26336
// eff := 30 ;
26328: LD_ADDR_VAR 0 4
26332: PUSH
26333: LD_INT 30
26335: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26336: LD_VAR 0 1
26340: PPUSH
26341: CALL_OW 250
26345: PPUSH
26346: LD_VAR 0 1
26350: PPUSH
26351: CALL_OW 251
26355: PPUSH
26356: LD_VAR 0 4
26360: PPUSH
26361: CALL_OW 495
// end ; end ;
26365: LD_VAR 0 2
26369: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26370: LD_INT 0
26372: PPUSH
// end ;
26373: LD_VAR 0 4
26377: RET
// export function SOS_Command ( cmd ) ; begin
26378: LD_INT 0
26380: PPUSH
// end ;
26381: LD_VAR 0 2
26385: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26386: LD_INT 0
26388: PPUSH
// if cmd = 121 then
26389: LD_VAR 0 1
26393: PUSH
26394: LD_INT 121
26396: EQUAL
26397: IFFALSE 26399
// end ;
26399: LD_VAR 0 6
26403: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26404: LD_INT 0
26406: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26407: LD_VAR 0 1
26411: PUSH
26412: LD_INT 250
26414: EQUAL
26415: PUSH
26416: LD_VAR 0 2
26420: PPUSH
26421: CALL_OW 264
26425: PUSH
26426: LD_EXP 50
26430: EQUAL
26431: AND
26432: IFFALSE 26453
// MinerPlaceMine ( unit , x , y ) ;
26434: LD_VAR 0 2
26438: PPUSH
26439: LD_VAR 0 4
26443: PPUSH
26444: LD_VAR 0 5
26448: PPUSH
26449: CALL 28802 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26453: LD_VAR 0 1
26457: PUSH
26458: LD_INT 251
26460: EQUAL
26461: PUSH
26462: LD_VAR 0 2
26466: PPUSH
26467: CALL_OW 264
26471: PUSH
26472: LD_EXP 50
26476: EQUAL
26477: AND
26478: IFFALSE 26499
// MinerDetonateMine ( unit , x , y ) ;
26480: LD_VAR 0 2
26484: PPUSH
26485: LD_VAR 0 4
26489: PPUSH
26490: LD_VAR 0 5
26494: PPUSH
26495: CALL 29079 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26499: LD_VAR 0 1
26503: PUSH
26504: LD_INT 252
26506: EQUAL
26507: PUSH
26508: LD_VAR 0 2
26512: PPUSH
26513: CALL_OW 264
26517: PUSH
26518: LD_EXP 50
26522: EQUAL
26523: AND
26524: IFFALSE 26545
// MinerCreateMinefield ( unit , x , y ) ;
26526: LD_VAR 0 2
26530: PPUSH
26531: LD_VAR 0 4
26535: PPUSH
26536: LD_VAR 0 5
26540: PPUSH
26541: CALL 29496 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26545: LD_VAR 0 1
26549: PUSH
26550: LD_INT 253
26552: EQUAL
26553: PUSH
26554: LD_VAR 0 2
26558: PPUSH
26559: CALL_OW 257
26563: PUSH
26564: LD_INT 5
26566: EQUAL
26567: AND
26568: IFFALSE 26589
// ComBinocular ( unit , x , y ) ;
26570: LD_VAR 0 2
26574: PPUSH
26575: LD_VAR 0 4
26579: PPUSH
26580: LD_VAR 0 5
26584: PPUSH
26585: CALL 29867 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26589: LD_VAR 0 1
26593: PUSH
26594: LD_INT 254
26596: EQUAL
26597: PUSH
26598: LD_VAR 0 2
26602: PPUSH
26603: CALL_OW 264
26607: PUSH
26608: LD_EXP 45
26612: EQUAL
26613: AND
26614: PUSH
26615: LD_VAR 0 3
26619: PPUSH
26620: CALL_OW 263
26624: PUSH
26625: LD_INT 3
26627: EQUAL
26628: AND
26629: IFFALSE 26645
// HackDestroyVehicle ( unit , selectedUnit ) ;
26631: LD_VAR 0 2
26635: PPUSH
26636: LD_VAR 0 3
26640: PPUSH
26641: CALL 28162 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26645: LD_VAR 0 1
26649: PUSH
26650: LD_INT 255
26652: EQUAL
26653: PUSH
26654: LD_VAR 0 2
26658: PPUSH
26659: CALL_OW 264
26663: PUSH
26664: LD_INT 14
26666: PUSH
26667: LD_INT 53
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: IN
26674: AND
26675: PUSH
26676: LD_VAR 0 4
26680: PPUSH
26681: LD_VAR 0 5
26685: PPUSH
26686: CALL_OW 488
26690: AND
26691: IFFALSE 26715
// CutTreeXYR ( unit , x , y , 12 ) ;
26693: LD_VAR 0 2
26697: PPUSH
26698: LD_VAR 0 4
26702: PPUSH
26703: LD_VAR 0 5
26707: PPUSH
26708: LD_INT 12
26710: PPUSH
26711: CALL 26728 0 4
// end ;
26715: LD_VAR 0 6
26719: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
26720: LD_INT 0
26722: PPUSH
// end ;
26723: LD_VAR 0 4
26727: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26728: LD_INT 0
26730: PPUSH
26731: PPUSH
26732: PPUSH
26733: PPUSH
26734: PPUSH
26735: PPUSH
26736: PPUSH
26737: PPUSH
26738: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26739: LD_VAR 0 1
26743: NOT
26744: PUSH
26745: LD_VAR 0 2
26749: PPUSH
26750: LD_VAR 0 3
26754: PPUSH
26755: CALL_OW 488
26759: NOT
26760: OR
26761: PUSH
26762: LD_VAR 0 4
26766: NOT
26767: OR
26768: IFFALSE 26772
// exit ;
26770: GO 27112
// list := [ ] ;
26772: LD_ADDR_VAR 0 13
26776: PUSH
26777: EMPTY
26778: ST_TO_ADDR
// if x - r < 0 then
26779: LD_VAR 0 2
26783: PUSH
26784: LD_VAR 0 4
26788: MINUS
26789: PUSH
26790: LD_INT 0
26792: LESS
26793: IFFALSE 26805
// min_x := 0 else
26795: LD_ADDR_VAR 0 7
26799: PUSH
26800: LD_INT 0
26802: ST_TO_ADDR
26803: GO 26821
// min_x := x - r ;
26805: LD_ADDR_VAR 0 7
26809: PUSH
26810: LD_VAR 0 2
26814: PUSH
26815: LD_VAR 0 4
26819: MINUS
26820: ST_TO_ADDR
// if y - r < 0 then
26821: LD_VAR 0 3
26825: PUSH
26826: LD_VAR 0 4
26830: MINUS
26831: PUSH
26832: LD_INT 0
26834: LESS
26835: IFFALSE 26847
// min_y := 0 else
26837: LD_ADDR_VAR 0 8
26841: PUSH
26842: LD_INT 0
26844: ST_TO_ADDR
26845: GO 26863
// min_y := y - r ;
26847: LD_ADDR_VAR 0 8
26851: PUSH
26852: LD_VAR 0 3
26856: PUSH
26857: LD_VAR 0 4
26861: MINUS
26862: ST_TO_ADDR
// max_x := x + r ;
26863: LD_ADDR_VAR 0 9
26867: PUSH
26868: LD_VAR 0 2
26872: PUSH
26873: LD_VAR 0 4
26877: PLUS
26878: ST_TO_ADDR
// max_y := y + r ;
26879: LD_ADDR_VAR 0 10
26883: PUSH
26884: LD_VAR 0 3
26888: PUSH
26889: LD_VAR 0 4
26893: PLUS
26894: ST_TO_ADDR
// for _x = min_x to max_x do
26895: LD_ADDR_VAR 0 11
26899: PUSH
26900: DOUBLE
26901: LD_VAR 0 7
26905: DEC
26906: ST_TO_ADDR
26907: LD_VAR 0 9
26911: PUSH
26912: FOR_TO
26913: IFFALSE 27030
// for _y = min_y to max_y do
26915: LD_ADDR_VAR 0 12
26919: PUSH
26920: DOUBLE
26921: LD_VAR 0 8
26925: DEC
26926: ST_TO_ADDR
26927: LD_VAR 0 10
26931: PUSH
26932: FOR_TO
26933: IFFALSE 27026
// begin if not ValidHex ( _x , _y ) then
26935: LD_VAR 0 11
26939: PPUSH
26940: LD_VAR 0 12
26944: PPUSH
26945: CALL_OW 488
26949: NOT
26950: IFFALSE 26954
// continue ;
26952: GO 26932
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26954: LD_VAR 0 11
26958: PPUSH
26959: LD_VAR 0 12
26963: PPUSH
26964: CALL_OW 351
26968: PUSH
26969: LD_VAR 0 11
26973: PPUSH
26974: LD_VAR 0 12
26978: PPUSH
26979: CALL_OW 554
26983: AND
26984: IFFALSE 27024
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26986: LD_ADDR_VAR 0 13
26990: PUSH
26991: LD_VAR 0 13
26995: PPUSH
26996: LD_VAR 0 13
27000: PUSH
27001: LD_INT 1
27003: PLUS
27004: PPUSH
27005: LD_VAR 0 11
27009: PUSH
27010: LD_VAR 0 12
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PPUSH
27019: CALL_OW 2
27023: ST_TO_ADDR
// end ;
27024: GO 26932
27026: POP
27027: POP
27028: GO 26912
27030: POP
27031: POP
// if not list then
27032: LD_VAR 0 13
27036: NOT
27037: IFFALSE 27041
// exit ;
27039: GO 27112
// for i in list do
27041: LD_ADDR_VAR 0 6
27045: PUSH
27046: LD_VAR 0 13
27050: PUSH
27051: FOR_IN
27052: IFFALSE 27110
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27054: LD_VAR 0 1
27058: PPUSH
27059: LD_STRING M
27061: PUSH
27062: LD_VAR 0 6
27066: PUSH
27067: LD_INT 1
27069: ARRAY
27070: PUSH
27071: LD_VAR 0 6
27075: PUSH
27076: LD_INT 2
27078: ARRAY
27079: PUSH
27080: LD_INT 0
27082: PUSH
27083: LD_INT 0
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: PUSH
27101: EMPTY
27102: LIST
27103: PPUSH
27104: CALL_OW 447
27108: GO 27051
27110: POP
27111: POP
// end ;
27112: LD_VAR 0 5
27116: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27117: LD_EXP 119
27121: NOT
27122: IFFALSE 27172
27124: GO 27126
27126: DISABLE
// begin initHack := true ;
27127: LD_ADDR_EXP 119
27131: PUSH
27132: LD_INT 1
27134: ST_TO_ADDR
// hackTanks := [ ] ;
27135: LD_ADDR_EXP 120
27139: PUSH
27140: EMPTY
27141: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27142: LD_ADDR_EXP 121
27146: PUSH
27147: EMPTY
27148: ST_TO_ADDR
// hackLimit := 3 ;
27149: LD_ADDR_EXP 122
27153: PUSH
27154: LD_INT 3
27156: ST_TO_ADDR
// hackDist := 12 ;
27157: LD_ADDR_EXP 123
27161: PUSH
27162: LD_INT 12
27164: ST_TO_ADDR
// hackCounter := [ ] ;
27165: LD_ADDR_EXP 124
27169: PUSH
27170: EMPTY
27171: ST_TO_ADDR
// end ;
27172: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27173: LD_EXP 119
27177: PUSH
27178: LD_INT 34
27180: PUSH
27181: LD_EXP 45
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PPUSH
27190: CALL_OW 69
27194: AND
27195: IFFALSE 27450
27197: GO 27199
27199: DISABLE
27200: LD_INT 0
27202: PPUSH
27203: PPUSH
// begin enable ;
27204: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27205: LD_ADDR_VAR 0 1
27209: PUSH
27210: LD_INT 34
27212: PUSH
27213: LD_EXP 45
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PPUSH
27222: CALL_OW 69
27226: PUSH
27227: FOR_IN
27228: IFFALSE 27448
// begin if not i in hackTanks then
27230: LD_VAR 0 1
27234: PUSH
27235: LD_EXP 120
27239: IN
27240: NOT
27241: IFFALSE 27324
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27243: LD_ADDR_EXP 120
27247: PUSH
27248: LD_EXP 120
27252: PPUSH
27253: LD_EXP 120
27257: PUSH
27258: LD_INT 1
27260: PLUS
27261: PPUSH
27262: LD_VAR 0 1
27266: PPUSH
27267: CALL_OW 1
27271: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27272: LD_ADDR_EXP 121
27276: PUSH
27277: LD_EXP 121
27281: PPUSH
27282: LD_EXP 121
27286: PUSH
27287: LD_INT 1
27289: PLUS
27290: PPUSH
27291: EMPTY
27292: PPUSH
27293: CALL_OW 1
27297: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27298: LD_ADDR_EXP 124
27302: PUSH
27303: LD_EXP 124
27307: PPUSH
27308: LD_EXP 124
27312: PUSH
27313: LD_INT 1
27315: PLUS
27316: PPUSH
27317: EMPTY
27318: PPUSH
27319: CALL_OW 1
27323: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27324: LD_VAR 0 1
27328: PPUSH
27329: CALL_OW 302
27333: NOT
27334: IFFALSE 27347
// begin HackUnlinkAll ( i ) ;
27336: LD_VAR 0 1
27340: PPUSH
27341: CALL 27453 0 1
// continue ;
27345: GO 27227
// end ; HackCheckCapturedStatus ( i ) ;
27347: LD_VAR 0 1
27351: PPUSH
27352: CALL 27896 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27356: LD_ADDR_VAR 0 2
27360: PUSH
27361: LD_INT 81
27363: PUSH
27364: LD_VAR 0 1
27368: PPUSH
27369: CALL_OW 255
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 33
27380: PUSH
27381: LD_INT 3
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 91
27390: PUSH
27391: LD_VAR 0 1
27395: PUSH
27396: LD_EXP 123
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 50
27408: PUSH
27409: EMPTY
27410: LIST
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: PPUSH
27418: CALL_OW 69
27422: ST_TO_ADDR
// if not tmp then
27423: LD_VAR 0 2
27427: NOT
27428: IFFALSE 27432
// continue ;
27430: GO 27227
// HackLink ( i , tmp ) ;
27432: LD_VAR 0 1
27436: PPUSH
27437: LD_VAR 0 2
27441: PPUSH
27442: CALL 27589 0 2
// end ;
27446: GO 27227
27448: POP
27449: POP
// end ;
27450: PPOPN 2
27452: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27453: LD_INT 0
27455: PPUSH
27456: PPUSH
27457: PPUSH
// if not hack in hackTanks then
27458: LD_VAR 0 1
27462: PUSH
27463: LD_EXP 120
27467: IN
27468: NOT
27469: IFFALSE 27473
// exit ;
27471: GO 27584
// index := GetElementIndex ( hackTanks , hack ) ;
27473: LD_ADDR_VAR 0 4
27477: PUSH
27478: LD_EXP 120
27482: PPUSH
27483: LD_VAR 0 1
27487: PPUSH
27488: CALL 35058 0 2
27492: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27493: LD_EXP 121
27497: PUSH
27498: LD_VAR 0 4
27502: ARRAY
27503: IFFALSE 27584
// begin for i in hackTanksCaptured [ index ] do
27505: LD_ADDR_VAR 0 3
27509: PUSH
27510: LD_EXP 121
27514: PUSH
27515: LD_VAR 0 4
27519: ARRAY
27520: PUSH
27521: FOR_IN
27522: IFFALSE 27548
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27524: LD_VAR 0 3
27528: PUSH
27529: LD_INT 1
27531: ARRAY
27532: PPUSH
27533: LD_VAR 0 3
27537: PUSH
27538: LD_INT 2
27540: ARRAY
27541: PPUSH
27542: CALL_OW 235
27546: GO 27521
27548: POP
27549: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27550: LD_ADDR_EXP 121
27554: PUSH
27555: LD_EXP 121
27559: PPUSH
27560: LD_VAR 0 4
27564: PPUSH
27565: EMPTY
27566: PPUSH
27567: CALL_OW 1
27571: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27572: LD_VAR 0 1
27576: PPUSH
27577: LD_INT 0
27579: PPUSH
27580: CALL_OW 505
// end ; end ;
27584: LD_VAR 0 2
27588: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27589: LD_INT 0
27591: PPUSH
27592: PPUSH
27593: PPUSH
// if not hack in hackTanks or not vehicles then
27594: LD_VAR 0 1
27598: PUSH
27599: LD_EXP 120
27603: IN
27604: NOT
27605: PUSH
27606: LD_VAR 0 2
27610: NOT
27611: OR
27612: IFFALSE 27616
// exit ;
27614: GO 27891
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27616: LD_ADDR_VAR 0 2
27620: PUSH
27621: LD_VAR 0 1
27625: PPUSH
27626: LD_VAR 0 2
27630: PPUSH
27631: LD_INT 1
27633: PPUSH
27634: LD_INT 1
27636: PPUSH
27637: CALL 35708 0 4
27641: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27642: LD_ADDR_VAR 0 5
27646: PUSH
27647: LD_EXP 120
27651: PPUSH
27652: LD_VAR 0 1
27656: PPUSH
27657: CALL 35058 0 2
27661: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27662: LD_EXP 121
27666: PUSH
27667: LD_VAR 0 5
27671: ARRAY
27672: PUSH
27673: LD_EXP 122
27677: LESS
27678: IFFALSE 27867
// begin for i := 1 to vehicles do
27680: LD_ADDR_VAR 0 4
27684: PUSH
27685: DOUBLE
27686: LD_INT 1
27688: DEC
27689: ST_TO_ADDR
27690: LD_VAR 0 2
27694: PUSH
27695: FOR_TO
27696: IFFALSE 27865
// begin if hackTanksCaptured [ index ] = hackLimit then
27698: LD_EXP 121
27702: PUSH
27703: LD_VAR 0 5
27707: ARRAY
27708: PUSH
27709: LD_EXP 122
27713: EQUAL
27714: IFFALSE 27718
// break ;
27716: GO 27865
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27718: LD_ADDR_EXP 124
27722: PUSH
27723: LD_EXP 124
27727: PPUSH
27728: LD_VAR 0 5
27732: PPUSH
27733: LD_EXP 124
27737: PUSH
27738: LD_VAR 0 5
27742: ARRAY
27743: PUSH
27744: LD_INT 1
27746: PLUS
27747: PPUSH
27748: CALL_OW 1
27752: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27753: LD_ADDR_EXP 121
27757: PUSH
27758: LD_EXP 121
27762: PPUSH
27763: LD_VAR 0 5
27767: PUSH
27768: LD_EXP 121
27772: PUSH
27773: LD_VAR 0 5
27777: ARRAY
27778: PUSH
27779: LD_INT 1
27781: PLUS
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PPUSH
27787: LD_VAR 0 2
27791: PUSH
27792: LD_VAR 0 4
27796: ARRAY
27797: PUSH
27798: LD_VAR 0 2
27802: PUSH
27803: LD_VAR 0 4
27807: ARRAY
27808: PPUSH
27809: CALL_OW 255
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PPUSH
27818: CALL 35273 0 3
27822: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27823: LD_VAR 0 2
27827: PUSH
27828: LD_VAR 0 4
27832: ARRAY
27833: PPUSH
27834: LD_VAR 0 1
27838: PPUSH
27839: CALL_OW 255
27843: PPUSH
27844: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27848: LD_VAR 0 2
27852: PUSH
27853: LD_VAR 0 4
27857: ARRAY
27858: PPUSH
27859: CALL_OW 141
// end ;
27863: GO 27695
27865: POP
27866: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27867: LD_VAR 0 1
27871: PPUSH
27872: LD_EXP 121
27876: PUSH
27877: LD_VAR 0 5
27881: ARRAY
27882: PUSH
27883: LD_INT 0
27885: PLUS
27886: PPUSH
27887: CALL_OW 505
// end ;
27891: LD_VAR 0 3
27895: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27896: LD_INT 0
27898: PPUSH
27899: PPUSH
27900: PPUSH
27901: PPUSH
// if not hack in hackTanks then
27902: LD_VAR 0 1
27906: PUSH
27907: LD_EXP 120
27911: IN
27912: NOT
27913: IFFALSE 27917
// exit ;
27915: GO 28157
// index := GetElementIndex ( hackTanks , hack ) ;
27917: LD_ADDR_VAR 0 4
27921: PUSH
27922: LD_EXP 120
27926: PPUSH
27927: LD_VAR 0 1
27931: PPUSH
27932: CALL 35058 0 2
27936: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27937: LD_ADDR_VAR 0 3
27941: PUSH
27942: DOUBLE
27943: LD_EXP 121
27947: PUSH
27948: LD_VAR 0 4
27952: ARRAY
27953: INC
27954: ST_TO_ADDR
27955: LD_INT 1
27957: PUSH
27958: FOR_DOWNTO
27959: IFFALSE 28131
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27961: LD_ADDR_VAR 0 5
27965: PUSH
27966: LD_EXP 121
27970: PUSH
27971: LD_VAR 0 4
27975: ARRAY
27976: PUSH
27977: LD_VAR 0 3
27981: ARRAY
27982: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27983: LD_VAR 0 5
27987: PUSH
27988: LD_INT 1
27990: ARRAY
27991: PPUSH
27992: CALL_OW 302
27996: NOT
27997: PUSH
27998: LD_VAR 0 5
28002: PUSH
28003: LD_INT 1
28005: ARRAY
28006: PPUSH
28007: CALL_OW 255
28011: PUSH
28012: LD_VAR 0 1
28016: PPUSH
28017: CALL_OW 255
28021: NONEQUAL
28022: OR
28023: IFFALSE 28129
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28025: LD_VAR 0 5
28029: PUSH
28030: LD_INT 1
28032: ARRAY
28033: PPUSH
28034: CALL_OW 305
28038: PUSH
28039: LD_VAR 0 5
28043: PUSH
28044: LD_INT 1
28046: ARRAY
28047: PPUSH
28048: CALL_OW 255
28052: PUSH
28053: LD_VAR 0 1
28057: PPUSH
28058: CALL_OW 255
28062: EQUAL
28063: AND
28064: IFFALSE 28088
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28066: LD_VAR 0 5
28070: PUSH
28071: LD_INT 1
28073: ARRAY
28074: PPUSH
28075: LD_VAR 0 5
28079: PUSH
28080: LD_INT 2
28082: ARRAY
28083: PPUSH
28084: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28088: LD_ADDR_EXP 121
28092: PUSH
28093: LD_EXP 121
28097: PPUSH
28098: LD_VAR 0 4
28102: PPUSH
28103: LD_EXP 121
28107: PUSH
28108: LD_VAR 0 4
28112: ARRAY
28113: PPUSH
28114: LD_VAR 0 3
28118: PPUSH
28119: CALL_OW 3
28123: PPUSH
28124: CALL_OW 1
28128: ST_TO_ADDR
// end ; end ;
28129: GO 27958
28131: POP
28132: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28133: LD_VAR 0 1
28137: PPUSH
28138: LD_EXP 121
28142: PUSH
28143: LD_VAR 0 4
28147: ARRAY
28148: PUSH
28149: LD_INT 0
28151: PLUS
28152: PPUSH
28153: CALL_OW 505
// end ;
28157: LD_VAR 0 2
28161: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28162: LD_INT 0
28164: PPUSH
28165: PPUSH
28166: PPUSH
28167: PPUSH
// if not hack in hackTanks then
28168: LD_VAR 0 1
28172: PUSH
28173: LD_EXP 120
28177: IN
28178: NOT
28179: IFFALSE 28183
// exit ;
28181: GO 28268
// index := GetElementIndex ( hackTanks , hack ) ;
28183: LD_ADDR_VAR 0 5
28187: PUSH
28188: LD_EXP 120
28192: PPUSH
28193: LD_VAR 0 1
28197: PPUSH
28198: CALL 35058 0 2
28202: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28203: LD_ADDR_VAR 0 4
28207: PUSH
28208: DOUBLE
28209: LD_INT 1
28211: DEC
28212: ST_TO_ADDR
28213: LD_EXP 121
28217: PUSH
28218: LD_VAR 0 5
28222: ARRAY
28223: PUSH
28224: FOR_TO
28225: IFFALSE 28266
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28227: LD_EXP 121
28231: PUSH
28232: LD_VAR 0 5
28236: ARRAY
28237: PUSH
28238: LD_VAR 0 4
28242: ARRAY
28243: PUSH
28244: LD_INT 1
28246: ARRAY
28247: PUSH
28248: LD_VAR 0 2
28252: EQUAL
28253: IFFALSE 28264
// KillUnit ( vehicle ) ;
28255: LD_VAR 0 2
28259: PPUSH
28260: CALL_OW 66
28264: GO 28224
28266: POP
28267: POP
// end ;
28268: LD_VAR 0 3
28272: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28273: LD_EXP 125
28277: NOT
28278: IFFALSE 28313
28280: GO 28282
28282: DISABLE
// begin initMiner := true ;
28283: LD_ADDR_EXP 125
28287: PUSH
28288: LD_INT 1
28290: ST_TO_ADDR
// minersList := [ ] ;
28291: LD_ADDR_EXP 126
28295: PUSH
28296: EMPTY
28297: ST_TO_ADDR
// minerMinesList := [ ] ;
28298: LD_ADDR_EXP 127
28302: PUSH
28303: EMPTY
28304: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28305: LD_ADDR_EXP 128
28309: PUSH
28310: LD_INT 5
28312: ST_TO_ADDR
// end ;
28313: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28314: LD_EXP 125
28318: PUSH
28319: LD_INT 34
28321: PUSH
28322: LD_EXP 50
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PPUSH
28331: CALL_OW 69
28335: AND
28336: IFFALSE 28799
28338: GO 28340
28340: DISABLE
28341: LD_INT 0
28343: PPUSH
28344: PPUSH
28345: PPUSH
28346: PPUSH
// begin enable ;
28347: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28348: LD_ADDR_VAR 0 1
28352: PUSH
28353: LD_INT 34
28355: PUSH
28356: LD_EXP 50
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PPUSH
28365: CALL_OW 69
28369: PUSH
28370: FOR_IN
28371: IFFALSE 28443
// begin if not i in minersList then
28373: LD_VAR 0 1
28377: PUSH
28378: LD_EXP 126
28382: IN
28383: NOT
28384: IFFALSE 28441
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28386: LD_ADDR_EXP 126
28390: PUSH
28391: LD_EXP 126
28395: PPUSH
28396: LD_EXP 126
28400: PUSH
28401: LD_INT 1
28403: PLUS
28404: PPUSH
28405: LD_VAR 0 1
28409: PPUSH
28410: CALL_OW 1
28414: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28415: LD_ADDR_EXP 127
28419: PUSH
28420: LD_EXP 127
28424: PPUSH
28425: LD_EXP 127
28429: PUSH
28430: LD_INT 1
28432: PLUS
28433: PPUSH
28434: EMPTY
28435: PPUSH
28436: CALL_OW 1
28440: ST_TO_ADDR
// end end ;
28441: GO 28370
28443: POP
28444: POP
// for i := minerMinesList downto 1 do
28445: LD_ADDR_VAR 0 1
28449: PUSH
28450: DOUBLE
28451: LD_EXP 127
28455: INC
28456: ST_TO_ADDR
28457: LD_INT 1
28459: PUSH
28460: FOR_DOWNTO
28461: IFFALSE 28797
// begin if IsLive ( minersList [ i ] ) then
28463: LD_EXP 126
28467: PUSH
28468: LD_VAR 0 1
28472: ARRAY
28473: PPUSH
28474: CALL_OW 300
28478: IFFALSE 28506
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28480: LD_EXP 126
28484: PUSH
28485: LD_VAR 0 1
28489: ARRAY
28490: PPUSH
28491: LD_EXP 127
28495: PUSH
28496: LD_VAR 0 1
28500: ARRAY
28501: PPUSH
28502: CALL_OW 505
// if not minerMinesList [ i ] then
28506: LD_EXP 127
28510: PUSH
28511: LD_VAR 0 1
28515: ARRAY
28516: NOT
28517: IFFALSE 28521
// continue ;
28519: GO 28460
// for j := minerMinesList [ i ] downto 1 do
28521: LD_ADDR_VAR 0 2
28525: PUSH
28526: DOUBLE
28527: LD_EXP 127
28531: PUSH
28532: LD_VAR 0 1
28536: ARRAY
28537: INC
28538: ST_TO_ADDR
28539: LD_INT 1
28541: PUSH
28542: FOR_DOWNTO
28543: IFFALSE 28793
// begin side := GetSide ( minersList [ i ] ) ;
28545: LD_ADDR_VAR 0 3
28549: PUSH
28550: LD_EXP 126
28554: PUSH
28555: LD_VAR 0 1
28559: ARRAY
28560: PPUSH
28561: CALL_OW 255
28565: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28566: LD_ADDR_VAR 0 4
28570: PUSH
28571: LD_EXP 127
28575: PUSH
28576: LD_VAR 0 1
28580: ARRAY
28581: PUSH
28582: LD_VAR 0 2
28586: ARRAY
28587: PUSH
28588: LD_INT 1
28590: ARRAY
28591: PPUSH
28592: LD_EXP 127
28596: PUSH
28597: LD_VAR 0 1
28601: ARRAY
28602: PUSH
28603: LD_VAR 0 2
28607: ARRAY
28608: PUSH
28609: LD_INT 2
28611: ARRAY
28612: PPUSH
28613: CALL_OW 428
28617: ST_TO_ADDR
// if not tmp then
28618: LD_VAR 0 4
28622: NOT
28623: IFFALSE 28627
// continue ;
28625: GO 28542
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28627: LD_VAR 0 4
28631: PUSH
28632: LD_INT 81
28634: PUSH
28635: LD_VAR 0 3
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PPUSH
28644: CALL_OW 69
28648: IN
28649: PUSH
28650: LD_EXP 127
28654: PUSH
28655: LD_VAR 0 1
28659: ARRAY
28660: PUSH
28661: LD_VAR 0 2
28665: ARRAY
28666: PUSH
28667: LD_INT 1
28669: ARRAY
28670: PPUSH
28671: LD_EXP 127
28675: PUSH
28676: LD_VAR 0 1
28680: ARRAY
28681: PUSH
28682: LD_VAR 0 2
28686: ARRAY
28687: PUSH
28688: LD_INT 2
28690: ARRAY
28691: PPUSH
28692: CALL_OW 458
28696: AND
28697: IFFALSE 28791
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28699: LD_EXP 127
28703: PUSH
28704: LD_VAR 0 1
28708: ARRAY
28709: PUSH
28710: LD_VAR 0 2
28714: ARRAY
28715: PUSH
28716: LD_INT 1
28718: ARRAY
28719: PPUSH
28720: LD_EXP 127
28724: PUSH
28725: LD_VAR 0 1
28729: ARRAY
28730: PUSH
28731: LD_VAR 0 2
28735: ARRAY
28736: PUSH
28737: LD_INT 2
28739: ARRAY
28740: PPUSH
28741: LD_VAR 0 3
28745: PPUSH
28746: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28750: LD_ADDR_EXP 127
28754: PUSH
28755: LD_EXP 127
28759: PPUSH
28760: LD_VAR 0 1
28764: PPUSH
28765: LD_EXP 127
28769: PUSH
28770: LD_VAR 0 1
28774: ARRAY
28775: PPUSH
28776: LD_VAR 0 2
28780: PPUSH
28781: CALL_OW 3
28785: PPUSH
28786: CALL_OW 1
28790: ST_TO_ADDR
// end ; end ;
28791: GO 28542
28793: POP
28794: POP
// end ;
28795: GO 28460
28797: POP
28798: POP
// end ;
28799: PPOPN 4
28801: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28802: LD_INT 0
28804: PPUSH
28805: PPUSH
// result := false ;
28806: LD_ADDR_VAR 0 4
28810: PUSH
28811: LD_INT 0
28813: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28814: LD_VAR 0 1
28818: PPUSH
28819: CALL_OW 264
28823: PUSH
28824: LD_EXP 50
28828: EQUAL
28829: NOT
28830: IFFALSE 28834
// exit ;
28832: GO 29074
// index := GetElementIndex ( minersList , unit ) ;
28834: LD_ADDR_VAR 0 5
28838: PUSH
28839: LD_EXP 126
28843: PPUSH
28844: LD_VAR 0 1
28848: PPUSH
28849: CALL 35058 0 2
28853: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28854: LD_EXP 127
28858: PUSH
28859: LD_VAR 0 5
28863: ARRAY
28864: PUSH
28865: LD_EXP 128
28869: GREATEREQUAL
28870: IFFALSE 28874
// exit ;
28872: GO 29074
// ComMoveXY ( unit , x , y ) ;
28874: LD_VAR 0 1
28878: PPUSH
28879: LD_VAR 0 2
28883: PPUSH
28884: LD_VAR 0 3
28888: PPUSH
28889: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28893: LD_INT 35
28895: PPUSH
28896: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28900: LD_VAR 0 1
28904: PPUSH
28905: LD_VAR 0 2
28909: PPUSH
28910: LD_VAR 0 3
28914: PPUSH
28915: CALL 65830 0 3
28919: NOT
28920: PUSH
28921: LD_VAR 0 1
28925: PPUSH
28926: CALL_OW 314
28930: AND
28931: IFFALSE 28935
// exit ;
28933: GO 29074
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28935: LD_VAR 0 2
28939: PPUSH
28940: LD_VAR 0 3
28944: PPUSH
28945: CALL_OW 428
28949: PUSH
28950: LD_VAR 0 1
28954: EQUAL
28955: PUSH
28956: LD_VAR 0 1
28960: PPUSH
28961: CALL_OW 314
28965: NOT
28966: AND
28967: IFFALSE 28893
// PlaySoundXY ( x , y , PlantMine ) ;
28969: LD_VAR 0 2
28973: PPUSH
28974: LD_VAR 0 3
28978: PPUSH
28979: LD_STRING PlantMine
28981: PPUSH
28982: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28986: LD_VAR 0 2
28990: PPUSH
28991: LD_VAR 0 3
28995: PPUSH
28996: LD_VAR 0 1
29000: PPUSH
29001: CALL_OW 255
29005: PPUSH
29006: LD_INT 0
29008: PPUSH
29009: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29013: LD_ADDR_EXP 127
29017: PUSH
29018: LD_EXP 127
29022: PPUSH
29023: LD_VAR 0 5
29027: PUSH
29028: LD_EXP 127
29032: PUSH
29033: LD_VAR 0 5
29037: ARRAY
29038: PUSH
29039: LD_INT 1
29041: PLUS
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PPUSH
29047: LD_VAR 0 2
29051: PUSH
29052: LD_VAR 0 3
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PPUSH
29061: CALL 35273 0 3
29065: ST_TO_ADDR
// result := true ;
29066: LD_ADDR_VAR 0 4
29070: PUSH
29071: LD_INT 1
29073: ST_TO_ADDR
// end ;
29074: LD_VAR 0 4
29078: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29079: LD_INT 0
29081: PPUSH
29082: PPUSH
29083: PPUSH
// if not unit in minersList then
29084: LD_VAR 0 1
29088: PUSH
29089: LD_EXP 126
29093: IN
29094: NOT
29095: IFFALSE 29099
// exit ;
29097: GO 29491
// index := GetElementIndex ( minersList , unit ) ;
29099: LD_ADDR_VAR 0 6
29103: PUSH
29104: LD_EXP 126
29108: PPUSH
29109: LD_VAR 0 1
29113: PPUSH
29114: CALL 35058 0 2
29118: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29119: LD_ADDR_VAR 0 5
29123: PUSH
29124: DOUBLE
29125: LD_EXP 127
29129: PUSH
29130: LD_VAR 0 6
29134: ARRAY
29135: INC
29136: ST_TO_ADDR
29137: LD_INT 1
29139: PUSH
29140: FOR_DOWNTO
29141: IFFALSE 29302
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29143: LD_EXP 127
29147: PUSH
29148: LD_VAR 0 6
29152: ARRAY
29153: PUSH
29154: LD_VAR 0 5
29158: ARRAY
29159: PUSH
29160: LD_INT 1
29162: ARRAY
29163: PUSH
29164: LD_VAR 0 2
29168: EQUAL
29169: PUSH
29170: LD_EXP 127
29174: PUSH
29175: LD_VAR 0 6
29179: ARRAY
29180: PUSH
29181: LD_VAR 0 5
29185: ARRAY
29186: PUSH
29187: LD_INT 2
29189: ARRAY
29190: PUSH
29191: LD_VAR 0 3
29195: EQUAL
29196: AND
29197: IFFALSE 29300
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29199: LD_EXP 127
29203: PUSH
29204: LD_VAR 0 6
29208: ARRAY
29209: PUSH
29210: LD_VAR 0 5
29214: ARRAY
29215: PUSH
29216: LD_INT 1
29218: ARRAY
29219: PPUSH
29220: LD_EXP 127
29224: PUSH
29225: LD_VAR 0 6
29229: ARRAY
29230: PUSH
29231: LD_VAR 0 5
29235: ARRAY
29236: PUSH
29237: LD_INT 2
29239: ARRAY
29240: PPUSH
29241: LD_VAR 0 1
29245: PPUSH
29246: CALL_OW 255
29250: PPUSH
29251: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29255: LD_ADDR_EXP 127
29259: PUSH
29260: LD_EXP 127
29264: PPUSH
29265: LD_VAR 0 6
29269: PPUSH
29270: LD_EXP 127
29274: PUSH
29275: LD_VAR 0 6
29279: ARRAY
29280: PPUSH
29281: LD_VAR 0 5
29285: PPUSH
29286: CALL_OW 3
29290: PPUSH
29291: CALL_OW 1
29295: ST_TO_ADDR
// exit ;
29296: POP
29297: POP
29298: GO 29491
// end ; end ;
29300: GO 29140
29302: POP
29303: POP
// for i := minerMinesList [ index ] downto 1 do
29304: LD_ADDR_VAR 0 5
29308: PUSH
29309: DOUBLE
29310: LD_EXP 127
29314: PUSH
29315: LD_VAR 0 6
29319: ARRAY
29320: INC
29321: ST_TO_ADDR
29322: LD_INT 1
29324: PUSH
29325: FOR_DOWNTO
29326: IFFALSE 29489
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29328: LD_EXP 127
29332: PUSH
29333: LD_VAR 0 6
29337: ARRAY
29338: PUSH
29339: LD_VAR 0 5
29343: ARRAY
29344: PUSH
29345: LD_INT 1
29347: ARRAY
29348: PPUSH
29349: LD_EXP 127
29353: PUSH
29354: LD_VAR 0 6
29358: ARRAY
29359: PUSH
29360: LD_VAR 0 5
29364: ARRAY
29365: PUSH
29366: LD_INT 2
29368: ARRAY
29369: PPUSH
29370: LD_VAR 0 2
29374: PPUSH
29375: LD_VAR 0 3
29379: PPUSH
29380: CALL_OW 298
29384: PUSH
29385: LD_INT 6
29387: LESS
29388: IFFALSE 29487
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29390: LD_EXP 127
29394: PUSH
29395: LD_VAR 0 6
29399: ARRAY
29400: PUSH
29401: LD_VAR 0 5
29405: ARRAY
29406: PUSH
29407: LD_INT 1
29409: ARRAY
29410: PPUSH
29411: LD_EXP 127
29415: PUSH
29416: LD_VAR 0 6
29420: ARRAY
29421: PUSH
29422: LD_VAR 0 5
29426: ARRAY
29427: PUSH
29428: LD_INT 2
29430: ARRAY
29431: PPUSH
29432: LD_VAR 0 1
29436: PPUSH
29437: CALL_OW 255
29441: PPUSH
29442: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29446: LD_ADDR_EXP 127
29450: PUSH
29451: LD_EXP 127
29455: PPUSH
29456: LD_VAR 0 6
29460: PPUSH
29461: LD_EXP 127
29465: PUSH
29466: LD_VAR 0 6
29470: ARRAY
29471: PPUSH
29472: LD_VAR 0 5
29476: PPUSH
29477: CALL_OW 3
29481: PPUSH
29482: CALL_OW 1
29486: ST_TO_ADDR
// end ; end ;
29487: GO 29325
29489: POP
29490: POP
// end ;
29491: LD_VAR 0 4
29495: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29496: LD_INT 0
29498: PPUSH
29499: PPUSH
29500: PPUSH
29501: PPUSH
29502: PPUSH
29503: PPUSH
29504: PPUSH
29505: PPUSH
29506: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29507: LD_VAR 0 1
29511: PPUSH
29512: CALL_OW 264
29516: PUSH
29517: LD_EXP 50
29521: EQUAL
29522: NOT
29523: PUSH
29524: LD_VAR 0 1
29528: PUSH
29529: LD_EXP 126
29533: IN
29534: NOT
29535: OR
29536: IFFALSE 29540
// exit ;
29538: GO 29862
// index := GetElementIndex ( minersList , unit ) ;
29540: LD_ADDR_VAR 0 6
29544: PUSH
29545: LD_EXP 126
29549: PPUSH
29550: LD_VAR 0 1
29554: PPUSH
29555: CALL 35058 0 2
29559: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29560: LD_ADDR_VAR 0 8
29564: PUSH
29565: LD_EXP 128
29569: PUSH
29570: LD_EXP 127
29574: PUSH
29575: LD_VAR 0 6
29579: ARRAY
29580: MINUS
29581: ST_TO_ADDR
// if not minesFreeAmount then
29582: LD_VAR 0 8
29586: NOT
29587: IFFALSE 29591
// exit ;
29589: GO 29862
// tmp := [ ] ;
29591: LD_ADDR_VAR 0 7
29595: PUSH
29596: EMPTY
29597: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29598: LD_ADDR_VAR 0 5
29602: PUSH
29603: DOUBLE
29604: LD_INT 1
29606: DEC
29607: ST_TO_ADDR
29608: LD_VAR 0 8
29612: PUSH
29613: FOR_TO
29614: IFFALSE 29809
// begin _d := rand ( 0 , 5 ) ;
29616: LD_ADDR_VAR 0 11
29620: PUSH
29621: LD_INT 0
29623: PPUSH
29624: LD_INT 5
29626: PPUSH
29627: CALL_OW 12
29631: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29632: LD_ADDR_VAR 0 12
29636: PUSH
29637: LD_INT 2
29639: PPUSH
29640: LD_INT 6
29642: PPUSH
29643: CALL_OW 12
29647: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29648: LD_ADDR_VAR 0 9
29652: PUSH
29653: LD_VAR 0 2
29657: PPUSH
29658: LD_VAR 0 11
29662: PPUSH
29663: LD_VAR 0 12
29667: PPUSH
29668: CALL_OW 272
29672: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29673: LD_ADDR_VAR 0 10
29677: PUSH
29678: LD_VAR 0 3
29682: PPUSH
29683: LD_VAR 0 11
29687: PPUSH
29688: LD_VAR 0 12
29692: PPUSH
29693: CALL_OW 273
29697: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29698: LD_VAR 0 9
29702: PPUSH
29703: LD_VAR 0 10
29707: PPUSH
29708: CALL_OW 488
29712: PUSH
29713: LD_VAR 0 9
29717: PUSH
29718: LD_VAR 0 10
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_VAR 0 7
29731: IN
29732: NOT
29733: AND
29734: PUSH
29735: LD_VAR 0 9
29739: PPUSH
29740: LD_VAR 0 10
29744: PPUSH
29745: CALL_OW 458
29749: NOT
29750: AND
29751: IFFALSE 29793
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29753: LD_ADDR_VAR 0 7
29757: PUSH
29758: LD_VAR 0 7
29762: PPUSH
29763: LD_VAR 0 7
29767: PUSH
29768: LD_INT 1
29770: PLUS
29771: PPUSH
29772: LD_VAR 0 9
29776: PUSH
29777: LD_VAR 0 10
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PPUSH
29786: CALL_OW 1
29790: ST_TO_ADDR
29791: GO 29807
// i := i - 1 ;
29793: LD_ADDR_VAR 0 5
29797: PUSH
29798: LD_VAR 0 5
29802: PUSH
29803: LD_INT 1
29805: MINUS
29806: ST_TO_ADDR
// end ;
29807: GO 29613
29809: POP
29810: POP
// for i in tmp do
29811: LD_ADDR_VAR 0 5
29815: PUSH
29816: LD_VAR 0 7
29820: PUSH
29821: FOR_IN
29822: IFFALSE 29860
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29824: LD_VAR 0 1
29828: PPUSH
29829: LD_VAR 0 5
29833: PUSH
29834: LD_INT 1
29836: ARRAY
29837: PPUSH
29838: LD_VAR 0 5
29842: PUSH
29843: LD_INT 2
29845: ARRAY
29846: PPUSH
29847: CALL 28802 0 3
29851: NOT
29852: IFFALSE 29858
// exit ;
29854: POP
29855: POP
29856: GO 29862
29858: GO 29821
29860: POP
29861: POP
// end ;
29862: LD_VAR 0 4
29866: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29867: LD_INT 0
29869: PPUSH
29870: PPUSH
29871: PPUSH
29872: PPUSH
29873: PPUSH
29874: PPUSH
29875: PPUSH
// if not GetClass ( unit ) = class_sniper then
29876: LD_VAR 0 1
29880: PPUSH
29881: CALL_OW 257
29885: PUSH
29886: LD_INT 5
29888: EQUAL
29889: NOT
29890: IFFALSE 29894
// exit ;
29892: GO 30282
// dist := 8 ;
29894: LD_ADDR_VAR 0 5
29898: PUSH
29899: LD_INT 8
29901: ST_TO_ADDR
// viewRange := 12 ;
29902: LD_ADDR_VAR 0 7
29906: PUSH
29907: LD_INT 12
29909: ST_TO_ADDR
// side := GetSide ( unit ) ;
29910: LD_ADDR_VAR 0 6
29914: PUSH
29915: LD_VAR 0 1
29919: PPUSH
29920: CALL_OW 255
29924: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29925: LD_INT 61
29927: PPUSH
29928: LD_VAR 0 6
29932: PPUSH
29933: CALL_OW 321
29937: PUSH
29938: LD_INT 2
29940: EQUAL
29941: IFFALSE 29951
// viewRange := 16 ;
29943: LD_ADDR_VAR 0 7
29947: PUSH
29948: LD_INT 16
29950: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29951: LD_VAR 0 1
29955: PPUSH
29956: LD_VAR 0 2
29960: PPUSH
29961: LD_VAR 0 3
29965: PPUSH
29966: CALL_OW 297
29970: PUSH
29971: LD_VAR 0 5
29975: GREATER
29976: IFFALSE 30055
// begin ComMoveXY ( unit , x , y ) ;
29978: LD_VAR 0 1
29982: PPUSH
29983: LD_VAR 0 2
29987: PPUSH
29988: LD_VAR 0 3
29992: PPUSH
29993: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29997: LD_INT 35
29999: PPUSH
30000: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30004: LD_VAR 0 1
30008: PPUSH
30009: LD_VAR 0 2
30013: PPUSH
30014: LD_VAR 0 3
30018: PPUSH
30019: CALL 65830 0 3
30023: NOT
30024: IFFALSE 30028
// exit ;
30026: GO 30282
// until GetDistUnitXY ( unit , x , y ) < dist ;
30028: LD_VAR 0 1
30032: PPUSH
30033: LD_VAR 0 2
30037: PPUSH
30038: LD_VAR 0 3
30042: PPUSH
30043: CALL_OW 297
30047: PUSH
30048: LD_VAR 0 5
30052: LESS
30053: IFFALSE 29997
// end ; ComTurnXY ( unit , x , y ) ;
30055: LD_VAR 0 1
30059: PPUSH
30060: LD_VAR 0 2
30064: PPUSH
30065: LD_VAR 0 3
30069: PPUSH
30070: CALL_OW 118
// wait ( 5 ) ;
30074: LD_INT 5
30076: PPUSH
30077: CALL_OW 67
// _d := GetDir ( unit ) ;
30081: LD_ADDR_VAR 0 10
30085: PUSH
30086: LD_VAR 0 1
30090: PPUSH
30091: CALL_OW 254
30095: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30096: LD_ADDR_VAR 0 8
30100: PUSH
30101: LD_VAR 0 1
30105: PPUSH
30106: CALL_OW 250
30110: PPUSH
30111: LD_VAR 0 10
30115: PPUSH
30116: LD_VAR 0 5
30120: PPUSH
30121: CALL_OW 272
30125: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30126: LD_ADDR_VAR 0 9
30130: PUSH
30131: LD_VAR 0 1
30135: PPUSH
30136: CALL_OW 251
30140: PPUSH
30141: LD_VAR 0 10
30145: PPUSH
30146: LD_VAR 0 5
30150: PPUSH
30151: CALL_OW 273
30155: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30156: LD_VAR 0 8
30160: PPUSH
30161: LD_VAR 0 9
30165: PPUSH
30166: CALL_OW 488
30170: NOT
30171: IFFALSE 30175
// exit ;
30173: GO 30282
// ComAnimCustom ( unit , 1 ) ;
30175: LD_VAR 0 1
30179: PPUSH
30180: LD_INT 1
30182: PPUSH
30183: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30187: LD_VAR 0 8
30191: PPUSH
30192: LD_VAR 0 9
30196: PPUSH
30197: LD_VAR 0 6
30201: PPUSH
30202: LD_VAR 0 7
30206: PPUSH
30207: CALL_OW 330
// repeat wait ( 1 ) ;
30211: LD_INT 1
30213: PPUSH
30214: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30218: LD_VAR 0 1
30222: PPUSH
30223: CALL_OW 316
30227: PUSH
30228: LD_VAR 0 1
30232: PPUSH
30233: CALL_OW 314
30237: OR
30238: PUSH
30239: LD_VAR 0 1
30243: PPUSH
30244: CALL_OW 302
30248: NOT
30249: OR
30250: PUSH
30251: LD_VAR 0 1
30255: PPUSH
30256: CALL_OW 301
30260: OR
30261: IFFALSE 30211
// RemoveSeeing ( _x , _y , side ) ;
30263: LD_VAR 0 8
30267: PPUSH
30268: LD_VAR 0 9
30272: PPUSH
30273: LD_VAR 0 6
30277: PPUSH
30278: CALL_OW 331
// end ; end_of_file
30282: LD_VAR 0 4
30286: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30287: LD_INT 0
30289: PPUSH
30290: PPUSH
// if exist_mode then
30291: LD_VAR 0 2
30295: IFFALSE 30320
// unit := CreateCharacter ( prefix & ident ) else
30297: LD_ADDR_VAR 0 5
30301: PUSH
30302: LD_VAR 0 3
30306: PUSH
30307: LD_VAR 0 1
30311: STR
30312: PPUSH
30313: CALL_OW 34
30317: ST_TO_ADDR
30318: GO 30335
// unit := NewCharacter ( ident ) ;
30320: LD_ADDR_VAR 0 5
30324: PUSH
30325: LD_VAR 0 1
30329: PPUSH
30330: CALL_OW 25
30334: ST_TO_ADDR
// result := unit ;
30335: LD_ADDR_VAR 0 4
30339: PUSH
30340: LD_VAR 0 5
30344: ST_TO_ADDR
// end ;
30345: LD_VAR 0 4
30349: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30350: LD_INT 0
30352: PPUSH
30353: PPUSH
// if not side or not nation then
30354: LD_VAR 0 1
30358: NOT
30359: PUSH
30360: LD_VAR 0 2
30364: NOT
30365: OR
30366: IFFALSE 30370
// exit ;
30368: GO 31138
// case nation of nation_american :
30370: LD_VAR 0 2
30374: PUSH
30375: LD_INT 1
30377: DOUBLE
30378: EQUAL
30379: IFTRUE 30383
30381: GO 30597
30383: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30384: LD_ADDR_VAR 0 4
30388: PUSH
30389: LD_INT 35
30391: PUSH
30392: LD_INT 45
30394: PUSH
30395: LD_INT 46
30397: PUSH
30398: LD_INT 47
30400: PUSH
30401: LD_INT 82
30403: PUSH
30404: LD_INT 83
30406: PUSH
30407: LD_INT 84
30409: PUSH
30410: LD_INT 85
30412: PUSH
30413: LD_INT 86
30415: PUSH
30416: LD_INT 1
30418: PUSH
30419: LD_INT 2
30421: PUSH
30422: LD_INT 6
30424: PUSH
30425: LD_INT 15
30427: PUSH
30428: LD_INT 16
30430: PUSH
30431: LD_INT 7
30433: PUSH
30434: LD_INT 12
30436: PUSH
30437: LD_INT 13
30439: PUSH
30440: LD_INT 10
30442: PUSH
30443: LD_INT 14
30445: PUSH
30446: LD_INT 20
30448: PUSH
30449: LD_INT 21
30451: PUSH
30452: LD_INT 22
30454: PUSH
30455: LD_INT 25
30457: PUSH
30458: LD_INT 32
30460: PUSH
30461: LD_INT 27
30463: PUSH
30464: LD_INT 36
30466: PUSH
30467: LD_INT 69
30469: PUSH
30470: LD_INT 39
30472: PUSH
30473: LD_INT 34
30475: PUSH
30476: LD_INT 40
30478: PUSH
30479: LD_INT 48
30481: PUSH
30482: LD_INT 49
30484: PUSH
30485: LD_INT 50
30487: PUSH
30488: LD_INT 51
30490: PUSH
30491: LD_INT 52
30493: PUSH
30494: LD_INT 53
30496: PUSH
30497: LD_INT 54
30499: PUSH
30500: LD_INT 55
30502: PUSH
30503: LD_INT 56
30505: PUSH
30506: LD_INT 57
30508: PUSH
30509: LD_INT 58
30511: PUSH
30512: LD_INT 59
30514: PUSH
30515: LD_INT 60
30517: PUSH
30518: LD_INT 61
30520: PUSH
30521: LD_INT 62
30523: PUSH
30524: LD_INT 80
30526: PUSH
30527: LD_INT 82
30529: PUSH
30530: LD_INT 83
30532: PUSH
30533: LD_INT 84
30535: PUSH
30536: LD_INT 85
30538: PUSH
30539: LD_INT 86
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: ST_TO_ADDR
30595: GO 31062
30597: LD_INT 2
30599: DOUBLE
30600: EQUAL
30601: IFTRUE 30605
30603: GO 30831
30605: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30606: LD_ADDR_VAR 0 4
30610: PUSH
30611: LD_INT 35
30613: PUSH
30614: LD_INT 45
30616: PUSH
30617: LD_INT 46
30619: PUSH
30620: LD_INT 47
30622: PUSH
30623: LD_INT 82
30625: PUSH
30626: LD_INT 83
30628: PUSH
30629: LD_INT 84
30631: PUSH
30632: LD_INT 85
30634: PUSH
30635: LD_INT 87
30637: PUSH
30638: LD_INT 70
30640: PUSH
30641: LD_INT 1
30643: PUSH
30644: LD_INT 11
30646: PUSH
30647: LD_INT 3
30649: PUSH
30650: LD_INT 4
30652: PUSH
30653: LD_INT 5
30655: PUSH
30656: LD_INT 6
30658: PUSH
30659: LD_INT 15
30661: PUSH
30662: LD_INT 18
30664: PUSH
30665: LD_INT 7
30667: PUSH
30668: LD_INT 17
30670: PUSH
30671: LD_INT 8
30673: PUSH
30674: LD_INT 20
30676: PUSH
30677: LD_INT 21
30679: PUSH
30680: LD_INT 22
30682: PUSH
30683: LD_INT 72
30685: PUSH
30686: LD_INT 26
30688: PUSH
30689: LD_INT 69
30691: PUSH
30692: LD_INT 39
30694: PUSH
30695: LD_INT 40
30697: PUSH
30698: LD_INT 41
30700: PUSH
30701: LD_INT 42
30703: PUSH
30704: LD_INT 43
30706: PUSH
30707: LD_INT 48
30709: PUSH
30710: LD_INT 49
30712: PUSH
30713: LD_INT 50
30715: PUSH
30716: LD_INT 51
30718: PUSH
30719: LD_INT 52
30721: PUSH
30722: LD_INT 53
30724: PUSH
30725: LD_INT 54
30727: PUSH
30728: LD_INT 55
30730: PUSH
30731: LD_INT 56
30733: PUSH
30734: LD_INT 60
30736: PUSH
30737: LD_INT 61
30739: PUSH
30740: LD_INT 62
30742: PUSH
30743: LD_INT 66
30745: PUSH
30746: LD_INT 67
30748: PUSH
30749: LD_INT 68
30751: PUSH
30752: LD_INT 81
30754: PUSH
30755: LD_INT 82
30757: PUSH
30758: LD_INT 83
30760: PUSH
30761: LD_INT 84
30763: PUSH
30764: LD_INT 85
30766: PUSH
30767: LD_INT 87
30769: PUSH
30770: LD_INT 88
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: ST_TO_ADDR
30829: GO 31062
30831: LD_INT 3
30833: DOUBLE
30834: EQUAL
30835: IFTRUE 30839
30837: GO 31061
30839: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30840: LD_ADDR_VAR 0 4
30844: PUSH
30845: LD_INT 46
30847: PUSH
30848: LD_INT 47
30850: PUSH
30851: LD_INT 1
30853: PUSH
30854: LD_INT 2
30856: PUSH
30857: LD_INT 82
30859: PUSH
30860: LD_INT 83
30862: PUSH
30863: LD_INT 84
30865: PUSH
30866: LD_INT 85
30868: PUSH
30869: LD_INT 86
30871: PUSH
30872: LD_INT 11
30874: PUSH
30875: LD_INT 9
30877: PUSH
30878: LD_INT 20
30880: PUSH
30881: LD_INT 19
30883: PUSH
30884: LD_INT 21
30886: PUSH
30887: LD_INT 24
30889: PUSH
30890: LD_INT 22
30892: PUSH
30893: LD_INT 25
30895: PUSH
30896: LD_INT 28
30898: PUSH
30899: LD_INT 29
30901: PUSH
30902: LD_INT 30
30904: PUSH
30905: LD_INT 31
30907: PUSH
30908: LD_INT 37
30910: PUSH
30911: LD_INT 38
30913: PUSH
30914: LD_INT 32
30916: PUSH
30917: LD_INT 27
30919: PUSH
30920: LD_INT 33
30922: PUSH
30923: LD_INT 69
30925: PUSH
30926: LD_INT 39
30928: PUSH
30929: LD_INT 34
30931: PUSH
30932: LD_INT 40
30934: PUSH
30935: LD_INT 71
30937: PUSH
30938: LD_INT 23
30940: PUSH
30941: LD_INT 44
30943: PUSH
30944: LD_INT 48
30946: PUSH
30947: LD_INT 49
30949: PUSH
30950: LD_INT 50
30952: PUSH
30953: LD_INT 51
30955: PUSH
30956: LD_INT 52
30958: PUSH
30959: LD_INT 53
30961: PUSH
30962: LD_INT 54
30964: PUSH
30965: LD_INT 55
30967: PUSH
30968: LD_INT 56
30970: PUSH
30971: LD_INT 57
30973: PUSH
30974: LD_INT 58
30976: PUSH
30977: LD_INT 59
30979: PUSH
30980: LD_INT 63
30982: PUSH
30983: LD_INT 64
30985: PUSH
30986: LD_INT 65
30988: PUSH
30989: LD_INT 82
30991: PUSH
30992: LD_INT 83
30994: PUSH
30995: LD_INT 84
30997: PUSH
30998: LD_INT 85
31000: PUSH
31001: LD_INT 86
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: ST_TO_ADDR
31059: GO 31062
31061: POP
// if state > - 1 and state < 3 then
31062: LD_VAR 0 3
31066: PUSH
31067: LD_INT 1
31069: NEG
31070: GREATER
31071: PUSH
31072: LD_VAR 0 3
31076: PUSH
31077: LD_INT 3
31079: LESS
31080: AND
31081: IFFALSE 31138
// for i in result do
31083: LD_ADDR_VAR 0 5
31087: PUSH
31088: LD_VAR 0 4
31092: PUSH
31093: FOR_IN
31094: IFFALSE 31136
// if GetTech ( i , side ) <> state then
31096: LD_VAR 0 5
31100: PPUSH
31101: LD_VAR 0 1
31105: PPUSH
31106: CALL_OW 321
31110: PUSH
31111: LD_VAR 0 3
31115: NONEQUAL
31116: IFFALSE 31134
// result := result diff i ;
31118: LD_ADDR_VAR 0 4
31122: PUSH
31123: LD_VAR 0 4
31127: PUSH
31128: LD_VAR 0 5
31132: DIFF
31133: ST_TO_ADDR
31134: GO 31093
31136: POP
31137: POP
// end ;
31138: LD_VAR 0 4
31142: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31143: LD_INT 0
31145: PPUSH
31146: PPUSH
31147: PPUSH
// result := true ;
31148: LD_ADDR_VAR 0 3
31152: PUSH
31153: LD_INT 1
31155: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31156: LD_ADDR_VAR 0 5
31160: PUSH
31161: LD_VAR 0 2
31165: PPUSH
31166: CALL_OW 480
31170: ST_TO_ADDR
// if not tmp then
31171: LD_VAR 0 5
31175: NOT
31176: IFFALSE 31180
// exit ;
31178: GO 31229
// for i in tmp do
31180: LD_ADDR_VAR 0 4
31184: PUSH
31185: LD_VAR 0 5
31189: PUSH
31190: FOR_IN
31191: IFFALSE 31227
// if GetTech ( i , side ) <> state_researched then
31193: LD_VAR 0 4
31197: PPUSH
31198: LD_VAR 0 1
31202: PPUSH
31203: CALL_OW 321
31207: PUSH
31208: LD_INT 2
31210: NONEQUAL
31211: IFFALSE 31225
// begin result := false ;
31213: LD_ADDR_VAR 0 3
31217: PUSH
31218: LD_INT 0
31220: ST_TO_ADDR
// exit ;
31221: POP
31222: POP
31223: GO 31229
// end ;
31225: GO 31190
31227: POP
31228: POP
// end ;
31229: LD_VAR 0 3
31233: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31234: LD_INT 0
31236: PPUSH
31237: PPUSH
31238: PPUSH
31239: PPUSH
31240: PPUSH
31241: PPUSH
31242: PPUSH
31243: PPUSH
31244: PPUSH
31245: PPUSH
31246: PPUSH
31247: PPUSH
31248: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31249: LD_VAR 0 1
31253: NOT
31254: PUSH
31255: LD_VAR 0 1
31259: PPUSH
31260: CALL_OW 257
31264: PUSH
31265: LD_INT 9
31267: NONEQUAL
31268: OR
31269: IFFALSE 31273
// exit ;
31271: GO 31846
// side := GetSide ( unit ) ;
31273: LD_ADDR_VAR 0 9
31277: PUSH
31278: LD_VAR 0 1
31282: PPUSH
31283: CALL_OW 255
31287: ST_TO_ADDR
// tech_space := tech_spacanom ;
31288: LD_ADDR_VAR 0 12
31292: PUSH
31293: LD_INT 29
31295: ST_TO_ADDR
// tech_time := tech_taurad ;
31296: LD_ADDR_VAR 0 13
31300: PUSH
31301: LD_INT 28
31303: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31304: LD_ADDR_VAR 0 11
31308: PUSH
31309: LD_VAR 0 1
31313: PPUSH
31314: CALL_OW 310
31318: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31319: LD_VAR 0 11
31323: PPUSH
31324: CALL_OW 247
31328: PUSH
31329: LD_INT 2
31331: EQUAL
31332: IFFALSE 31336
// exit ;
31334: GO 31846
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31336: LD_ADDR_VAR 0 8
31340: PUSH
31341: LD_INT 81
31343: PUSH
31344: LD_VAR 0 9
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 3
31355: PUSH
31356: LD_INT 21
31358: PUSH
31359: LD_INT 3
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PPUSH
31374: CALL_OW 69
31378: ST_TO_ADDR
// if not tmp then
31379: LD_VAR 0 8
31383: NOT
31384: IFFALSE 31388
// exit ;
31386: GO 31846
// if in_unit then
31388: LD_VAR 0 11
31392: IFFALSE 31416
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31394: LD_ADDR_VAR 0 10
31398: PUSH
31399: LD_VAR 0 8
31403: PPUSH
31404: LD_VAR 0 11
31408: PPUSH
31409: CALL_OW 74
31413: ST_TO_ADDR
31414: GO 31436
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31416: LD_ADDR_VAR 0 10
31420: PUSH
31421: LD_VAR 0 8
31425: PPUSH
31426: LD_VAR 0 1
31430: PPUSH
31431: CALL_OW 74
31435: ST_TO_ADDR
// if not enemy then
31436: LD_VAR 0 10
31440: NOT
31441: IFFALSE 31445
// exit ;
31443: GO 31846
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31445: LD_VAR 0 11
31449: PUSH
31450: LD_VAR 0 11
31454: PPUSH
31455: LD_VAR 0 10
31459: PPUSH
31460: CALL_OW 296
31464: PUSH
31465: LD_INT 13
31467: GREATER
31468: AND
31469: PUSH
31470: LD_VAR 0 1
31474: PPUSH
31475: LD_VAR 0 10
31479: PPUSH
31480: CALL_OW 296
31484: PUSH
31485: LD_INT 12
31487: GREATER
31488: OR
31489: IFFALSE 31493
// exit ;
31491: GO 31846
// missile := [ 1 ] ;
31493: LD_ADDR_VAR 0 14
31497: PUSH
31498: LD_INT 1
31500: PUSH
31501: EMPTY
31502: LIST
31503: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31504: LD_VAR 0 9
31508: PPUSH
31509: LD_VAR 0 12
31513: PPUSH
31514: CALL_OW 325
31518: IFFALSE 31547
// missile := Insert ( missile , missile + 1 , 2 ) ;
31520: LD_ADDR_VAR 0 14
31524: PUSH
31525: LD_VAR 0 14
31529: PPUSH
31530: LD_VAR 0 14
31534: PUSH
31535: LD_INT 1
31537: PLUS
31538: PPUSH
31539: LD_INT 2
31541: PPUSH
31542: CALL_OW 2
31546: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31547: LD_VAR 0 9
31551: PPUSH
31552: LD_VAR 0 13
31556: PPUSH
31557: CALL_OW 325
31561: PUSH
31562: LD_VAR 0 10
31566: PPUSH
31567: CALL_OW 255
31571: PPUSH
31572: LD_VAR 0 13
31576: PPUSH
31577: CALL_OW 325
31581: NOT
31582: AND
31583: IFFALSE 31612
// missile := Insert ( missile , missile + 1 , 3 ) ;
31585: LD_ADDR_VAR 0 14
31589: PUSH
31590: LD_VAR 0 14
31594: PPUSH
31595: LD_VAR 0 14
31599: PUSH
31600: LD_INT 1
31602: PLUS
31603: PPUSH
31604: LD_INT 3
31606: PPUSH
31607: CALL_OW 2
31611: ST_TO_ADDR
// if missile < 2 then
31612: LD_VAR 0 14
31616: PUSH
31617: LD_INT 2
31619: LESS
31620: IFFALSE 31624
// exit ;
31622: GO 31846
// x := GetX ( enemy ) ;
31624: LD_ADDR_VAR 0 4
31628: PUSH
31629: LD_VAR 0 10
31633: PPUSH
31634: CALL_OW 250
31638: ST_TO_ADDR
// y := GetY ( enemy ) ;
31639: LD_ADDR_VAR 0 5
31643: PUSH
31644: LD_VAR 0 10
31648: PPUSH
31649: CALL_OW 251
31653: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31654: LD_ADDR_VAR 0 6
31658: PUSH
31659: LD_VAR 0 4
31663: PUSH
31664: LD_INT 1
31666: NEG
31667: PPUSH
31668: LD_INT 1
31670: PPUSH
31671: CALL_OW 12
31675: PLUS
31676: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31677: LD_ADDR_VAR 0 7
31681: PUSH
31682: LD_VAR 0 5
31686: PUSH
31687: LD_INT 1
31689: NEG
31690: PPUSH
31691: LD_INT 1
31693: PPUSH
31694: CALL_OW 12
31698: PLUS
31699: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31700: LD_VAR 0 6
31704: PPUSH
31705: LD_VAR 0 7
31709: PPUSH
31710: CALL_OW 488
31714: NOT
31715: IFFALSE 31737
// begin _x := x ;
31717: LD_ADDR_VAR 0 6
31721: PUSH
31722: LD_VAR 0 4
31726: ST_TO_ADDR
// _y := y ;
31727: LD_ADDR_VAR 0 7
31731: PUSH
31732: LD_VAR 0 5
31736: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31737: LD_ADDR_VAR 0 3
31741: PUSH
31742: LD_INT 1
31744: PPUSH
31745: LD_VAR 0 14
31749: PPUSH
31750: CALL_OW 12
31754: ST_TO_ADDR
// case i of 1 :
31755: LD_VAR 0 3
31759: PUSH
31760: LD_INT 1
31762: DOUBLE
31763: EQUAL
31764: IFTRUE 31768
31766: GO 31785
31768: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31769: LD_VAR 0 1
31773: PPUSH
31774: LD_VAR 0 10
31778: PPUSH
31779: CALL_OW 115
31783: GO 31846
31785: LD_INT 2
31787: DOUBLE
31788: EQUAL
31789: IFTRUE 31793
31791: GO 31815
31793: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31794: LD_VAR 0 1
31798: PPUSH
31799: LD_VAR 0 6
31803: PPUSH
31804: LD_VAR 0 7
31808: PPUSH
31809: CALL_OW 153
31813: GO 31846
31815: LD_INT 3
31817: DOUBLE
31818: EQUAL
31819: IFTRUE 31823
31821: GO 31845
31823: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31824: LD_VAR 0 1
31828: PPUSH
31829: LD_VAR 0 6
31833: PPUSH
31834: LD_VAR 0 7
31838: PPUSH
31839: CALL_OW 154
31843: GO 31846
31845: POP
// end ;
31846: LD_VAR 0 2
31850: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31851: LD_INT 0
31853: PPUSH
31854: PPUSH
31855: PPUSH
31856: PPUSH
31857: PPUSH
31858: PPUSH
// if not unit or not building then
31859: LD_VAR 0 1
31863: NOT
31864: PUSH
31865: LD_VAR 0 2
31869: NOT
31870: OR
31871: IFFALSE 31875
// exit ;
31873: GO 32033
// x := GetX ( building ) ;
31875: LD_ADDR_VAR 0 5
31879: PUSH
31880: LD_VAR 0 2
31884: PPUSH
31885: CALL_OW 250
31889: ST_TO_ADDR
// y := GetY ( building ) ;
31890: LD_ADDR_VAR 0 6
31894: PUSH
31895: LD_VAR 0 2
31899: PPUSH
31900: CALL_OW 251
31904: ST_TO_ADDR
// for i = 0 to 5 do
31905: LD_ADDR_VAR 0 4
31909: PUSH
31910: DOUBLE
31911: LD_INT 0
31913: DEC
31914: ST_TO_ADDR
31915: LD_INT 5
31917: PUSH
31918: FOR_TO
31919: IFFALSE 32031
// begin _x := ShiftX ( x , i , 3 ) ;
31921: LD_ADDR_VAR 0 7
31925: PUSH
31926: LD_VAR 0 5
31930: PPUSH
31931: LD_VAR 0 4
31935: PPUSH
31936: LD_INT 3
31938: PPUSH
31939: CALL_OW 272
31943: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31944: LD_ADDR_VAR 0 8
31948: PUSH
31949: LD_VAR 0 6
31953: PPUSH
31954: LD_VAR 0 4
31958: PPUSH
31959: LD_INT 3
31961: PPUSH
31962: CALL_OW 273
31966: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31967: LD_VAR 0 7
31971: PPUSH
31972: LD_VAR 0 8
31976: PPUSH
31977: CALL_OW 488
31981: NOT
31982: IFFALSE 31986
// continue ;
31984: GO 31918
// if HexInfo ( _x , _y ) = 0 then
31986: LD_VAR 0 7
31990: PPUSH
31991: LD_VAR 0 8
31995: PPUSH
31996: CALL_OW 428
32000: PUSH
32001: LD_INT 0
32003: EQUAL
32004: IFFALSE 32029
// begin ComMoveXY ( unit , _x , _y ) ;
32006: LD_VAR 0 1
32010: PPUSH
32011: LD_VAR 0 7
32015: PPUSH
32016: LD_VAR 0 8
32020: PPUSH
32021: CALL_OW 111
// exit ;
32025: POP
32026: POP
32027: GO 32033
// end ; end ;
32029: GO 31918
32031: POP
32032: POP
// end ;
32033: LD_VAR 0 3
32037: RET
// export function ScanBase ( side , base_area ) ; begin
32038: LD_INT 0
32040: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32041: LD_ADDR_VAR 0 3
32045: PUSH
32046: LD_VAR 0 2
32050: PPUSH
32051: LD_INT 81
32053: PUSH
32054: LD_VAR 0 1
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PPUSH
32063: CALL_OW 70
32067: ST_TO_ADDR
// end ;
32068: LD_VAR 0 3
32072: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32073: LD_INT 0
32075: PPUSH
32076: PPUSH
32077: PPUSH
32078: PPUSH
// result := false ;
32079: LD_ADDR_VAR 0 2
32083: PUSH
32084: LD_INT 0
32086: ST_TO_ADDR
// side := GetSide ( unit ) ;
32087: LD_ADDR_VAR 0 3
32091: PUSH
32092: LD_VAR 0 1
32096: PPUSH
32097: CALL_OW 255
32101: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32102: LD_ADDR_VAR 0 4
32106: PUSH
32107: LD_VAR 0 1
32111: PPUSH
32112: CALL_OW 248
32116: ST_TO_ADDR
// case nat of 1 :
32117: LD_VAR 0 4
32121: PUSH
32122: LD_INT 1
32124: DOUBLE
32125: EQUAL
32126: IFTRUE 32130
32128: GO 32141
32130: POP
// tech := tech_lassight ; 2 :
32131: LD_ADDR_VAR 0 5
32135: PUSH
32136: LD_INT 12
32138: ST_TO_ADDR
32139: GO 32180
32141: LD_INT 2
32143: DOUBLE
32144: EQUAL
32145: IFTRUE 32149
32147: GO 32160
32149: POP
// tech := tech_mortar ; 3 :
32150: LD_ADDR_VAR 0 5
32154: PUSH
32155: LD_INT 41
32157: ST_TO_ADDR
32158: GO 32180
32160: LD_INT 3
32162: DOUBLE
32163: EQUAL
32164: IFTRUE 32168
32166: GO 32179
32168: POP
// tech := tech_bazooka ; end ;
32169: LD_ADDR_VAR 0 5
32173: PUSH
32174: LD_INT 44
32176: ST_TO_ADDR
32177: GO 32180
32179: POP
// if Researched ( side , tech ) then
32180: LD_VAR 0 3
32184: PPUSH
32185: LD_VAR 0 5
32189: PPUSH
32190: CALL_OW 325
32194: IFFALSE 32221
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32196: LD_ADDR_VAR 0 2
32200: PUSH
32201: LD_INT 5
32203: PUSH
32204: LD_INT 8
32206: PUSH
32207: LD_INT 9
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: LIST
32214: PUSH
32215: LD_VAR 0 4
32219: ARRAY
32220: ST_TO_ADDR
// end ;
32221: LD_VAR 0 2
32225: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32226: LD_INT 0
32228: PPUSH
32229: PPUSH
32230: PPUSH
// if not mines then
32231: LD_VAR 0 2
32235: NOT
32236: IFFALSE 32240
// exit ;
32238: GO 32384
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32240: LD_ADDR_VAR 0 5
32244: PUSH
32245: LD_INT 81
32247: PUSH
32248: LD_VAR 0 1
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 3
32259: PUSH
32260: LD_INT 21
32262: PUSH
32263: LD_INT 3
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PPUSH
32278: CALL_OW 69
32282: ST_TO_ADDR
// for i in mines do
32283: LD_ADDR_VAR 0 4
32287: PUSH
32288: LD_VAR 0 2
32292: PUSH
32293: FOR_IN
32294: IFFALSE 32382
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32296: LD_VAR 0 4
32300: PUSH
32301: LD_INT 1
32303: ARRAY
32304: PPUSH
32305: LD_VAR 0 4
32309: PUSH
32310: LD_INT 2
32312: ARRAY
32313: PPUSH
32314: CALL_OW 458
32318: NOT
32319: IFFALSE 32323
// continue ;
32321: GO 32293
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32323: LD_VAR 0 4
32327: PUSH
32328: LD_INT 1
32330: ARRAY
32331: PPUSH
32332: LD_VAR 0 4
32336: PUSH
32337: LD_INT 2
32339: ARRAY
32340: PPUSH
32341: CALL_OW 428
32345: PUSH
32346: LD_VAR 0 5
32350: IN
32351: IFFALSE 32380
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32353: LD_VAR 0 4
32357: PUSH
32358: LD_INT 1
32360: ARRAY
32361: PPUSH
32362: LD_VAR 0 4
32366: PUSH
32367: LD_INT 2
32369: ARRAY
32370: PPUSH
32371: LD_VAR 0 1
32375: PPUSH
32376: CALL_OW 456
// end ;
32380: GO 32293
32382: POP
32383: POP
// end ;
32384: LD_VAR 0 3
32388: RET
// export function Count ( array ) ; var i ; begin
32389: LD_INT 0
32391: PPUSH
32392: PPUSH
// result := 0 ;
32393: LD_ADDR_VAR 0 2
32397: PUSH
32398: LD_INT 0
32400: ST_TO_ADDR
// for i in array do
32401: LD_ADDR_VAR 0 3
32405: PUSH
32406: LD_VAR 0 1
32410: PUSH
32411: FOR_IN
32412: IFFALSE 32436
// if i then
32414: LD_VAR 0 3
32418: IFFALSE 32434
// result := result + 1 ;
32420: LD_ADDR_VAR 0 2
32424: PUSH
32425: LD_VAR 0 2
32429: PUSH
32430: LD_INT 1
32432: PLUS
32433: ST_TO_ADDR
32434: GO 32411
32436: POP
32437: POP
// end ;
32438: LD_VAR 0 2
32442: RET
// export function IsEmpty ( building ) ; begin
32443: LD_INT 0
32445: PPUSH
// if not building then
32446: LD_VAR 0 1
32450: NOT
32451: IFFALSE 32455
// exit ;
32453: GO 32498
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32455: LD_ADDR_VAR 0 2
32459: PUSH
32460: LD_VAR 0 1
32464: PUSH
32465: LD_INT 22
32467: PUSH
32468: LD_VAR 0 1
32472: PPUSH
32473: CALL_OW 255
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 58
32484: PUSH
32485: EMPTY
32486: LIST
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PPUSH
32492: CALL_OW 69
32496: IN
32497: ST_TO_ADDR
// end ;
32498: LD_VAR 0 2
32502: RET
// export function IsNotFull ( building ) ; begin
32503: LD_INT 0
32505: PPUSH
// if not building then
32506: LD_VAR 0 1
32510: NOT
32511: IFFALSE 32515
// exit ;
32513: GO 32534
// result := UnitsInside ( building ) < 6 ;
32515: LD_ADDR_VAR 0 2
32519: PUSH
32520: LD_VAR 0 1
32524: PPUSH
32525: CALL_OW 313
32529: PUSH
32530: LD_INT 6
32532: LESS
32533: ST_TO_ADDR
// end ;
32534: LD_VAR 0 2
32538: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32539: LD_INT 0
32541: PPUSH
32542: PPUSH
32543: PPUSH
32544: PPUSH
// tmp := [ ] ;
32545: LD_ADDR_VAR 0 3
32549: PUSH
32550: EMPTY
32551: ST_TO_ADDR
// list := [ ] ;
32552: LD_ADDR_VAR 0 5
32556: PUSH
32557: EMPTY
32558: ST_TO_ADDR
// for i = 16 to 25 do
32559: LD_ADDR_VAR 0 4
32563: PUSH
32564: DOUBLE
32565: LD_INT 16
32567: DEC
32568: ST_TO_ADDR
32569: LD_INT 25
32571: PUSH
32572: FOR_TO
32573: IFFALSE 32646
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32575: LD_ADDR_VAR 0 3
32579: PUSH
32580: LD_VAR 0 3
32584: PUSH
32585: LD_INT 22
32587: PUSH
32588: LD_VAR 0 1
32592: PPUSH
32593: CALL_OW 255
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 91
32604: PUSH
32605: LD_VAR 0 1
32609: PUSH
32610: LD_INT 6
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 30
32620: PUSH
32621: LD_VAR 0 4
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: LIST
32634: PUSH
32635: EMPTY
32636: LIST
32637: PPUSH
32638: CALL_OW 69
32642: ADD
32643: ST_TO_ADDR
32644: GO 32572
32646: POP
32647: POP
// for i = 1 to tmp do
32648: LD_ADDR_VAR 0 4
32652: PUSH
32653: DOUBLE
32654: LD_INT 1
32656: DEC
32657: ST_TO_ADDR
32658: LD_VAR 0 3
32662: PUSH
32663: FOR_TO
32664: IFFALSE 32752
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32666: LD_ADDR_VAR 0 5
32670: PUSH
32671: LD_VAR 0 5
32675: PUSH
32676: LD_VAR 0 3
32680: PUSH
32681: LD_VAR 0 4
32685: ARRAY
32686: PPUSH
32687: CALL_OW 266
32691: PUSH
32692: LD_VAR 0 3
32696: PUSH
32697: LD_VAR 0 4
32701: ARRAY
32702: PPUSH
32703: CALL_OW 250
32707: PUSH
32708: LD_VAR 0 3
32712: PUSH
32713: LD_VAR 0 4
32717: ARRAY
32718: PPUSH
32719: CALL_OW 251
32723: PUSH
32724: LD_VAR 0 3
32728: PUSH
32729: LD_VAR 0 4
32733: ARRAY
32734: PPUSH
32735: CALL_OW 254
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: PUSH
32746: EMPTY
32747: LIST
32748: ADD
32749: ST_TO_ADDR
32750: GO 32663
32752: POP
32753: POP
// result := list ;
32754: LD_ADDR_VAR 0 2
32758: PUSH
32759: LD_VAR 0 5
32763: ST_TO_ADDR
// end ;
32764: LD_VAR 0 2
32768: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32769: LD_INT 0
32771: PPUSH
32772: PPUSH
32773: PPUSH
32774: PPUSH
32775: PPUSH
32776: PPUSH
32777: PPUSH
// if not factory then
32778: LD_VAR 0 1
32782: NOT
32783: IFFALSE 32787
// exit ;
32785: GO 33380
// if control = control_apeman then
32787: LD_VAR 0 4
32791: PUSH
32792: LD_INT 5
32794: EQUAL
32795: IFFALSE 32904
// begin tmp := UnitsInside ( factory ) ;
32797: LD_ADDR_VAR 0 8
32801: PUSH
32802: LD_VAR 0 1
32806: PPUSH
32807: CALL_OW 313
32811: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32812: LD_VAR 0 8
32816: PPUSH
32817: LD_INT 25
32819: PUSH
32820: LD_INT 12
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PPUSH
32827: CALL_OW 72
32831: NOT
32832: IFFALSE 32842
// control := control_manual ;
32834: LD_ADDR_VAR 0 4
32838: PUSH
32839: LD_INT 1
32841: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32842: LD_ADDR_VAR 0 8
32846: PUSH
32847: LD_VAR 0 1
32851: PPUSH
32852: CALL 32539 0 1
32856: ST_TO_ADDR
// if tmp then
32857: LD_VAR 0 8
32861: IFFALSE 32904
// begin for i in tmp do
32863: LD_ADDR_VAR 0 7
32867: PUSH
32868: LD_VAR 0 8
32872: PUSH
32873: FOR_IN
32874: IFFALSE 32902
// if i [ 1 ] = b_ext_radio then
32876: LD_VAR 0 7
32880: PUSH
32881: LD_INT 1
32883: ARRAY
32884: PUSH
32885: LD_INT 22
32887: EQUAL
32888: IFFALSE 32900
// begin control := control_remote ;
32890: LD_ADDR_VAR 0 4
32894: PUSH
32895: LD_INT 2
32897: ST_TO_ADDR
// break ;
32898: GO 32902
// end ;
32900: GO 32873
32902: POP
32903: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32904: LD_VAR 0 1
32908: PPUSH
32909: LD_VAR 0 2
32913: PPUSH
32914: LD_VAR 0 3
32918: PPUSH
32919: LD_VAR 0 4
32923: PPUSH
32924: LD_VAR 0 5
32928: PPUSH
32929: CALL_OW 448
32933: IFFALSE 32968
// begin result := [ chassis , engine , control , weapon ] ;
32935: LD_ADDR_VAR 0 6
32939: PUSH
32940: LD_VAR 0 2
32944: PUSH
32945: LD_VAR 0 3
32949: PUSH
32950: LD_VAR 0 4
32954: PUSH
32955: LD_VAR 0 5
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: ST_TO_ADDR
// exit ;
32966: GO 33380
// end ; _chassis := AvailableChassisList ( factory ) ;
32968: LD_ADDR_VAR 0 9
32972: PUSH
32973: LD_VAR 0 1
32977: PPUSH
32978: CALL_OW 475
32982: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32983: LD_ADDR_VAR 0 11
32987: PUSH
32988: LD_VAR 0 1
32992: PPUSH
32993: CALL_OW 476
32997: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32998: LD_ADDR_VAR 0 12
33002: PUSH
33003: LD_VAR 0 1
33007: PPUSH
33008: CALL_OW 477
33012: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33013: LD_ADDR_VAR 0 10
33017: PUSH
33018: LD_VAR 0 1
33022: PPUSH
33023: CALL_OW 478
33027: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33028: LD_VAR 0 9
33032: NOT
33033: PUSH
33034: LD_VAR 0 11
33038: NOT
33039: OR
33040: PUSH
33041: LD_VAR 0 12
33045: NOT
33046: OR
33047: PUSH
33048: LD_VAR 0 10
33052: NOT
33053: OR
33054: IFFALSE 33089
// begin result := [ chassis , engine , control , weapon ] ;
33056: LD_ADDR_VAR 0 6
33060: PUSH
33061: LD_VAR 0 2
33065: PUSH
33066: LD_VAR 0 3
33070: PUSH
33071: LD_VAR 0 4
33075: PUSH
33076: LD_VAR 0 5
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: ST_TO_ADDR
// exit ;
33087: GO 33380
// end ; if not chassis in _chassis then
33089: LD_VAR 0 2
33093: PUSH
33094: LD_VAR 0 9
33098: IN
33099: NOT
33100: IFFALSE 33126
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33102: LD_ADDR_VAR 0 2
33106: PUSH
33107: LD_VAR 0 9
33111: PUSH
33112: LD_INT 1
33114: PPUSH
33115: LD_VAR 0 9
33119: PPUSH
33120: CALL_OW 12
33124: ARRAY
33125: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33126: LD_VAR 0 2
33130: PPUSH
33131: LD_VAR 0 3
33135: PPUSH
33136: CALL 33385 0 2
33140: NOT
33141: IFFALSE 33200
// repeat engine := _engine [ 1 ] ;
33143: LD_ADDR_VAR 0 3
33147: PUSH
33148: LD_VAR 0 11
33152: PUSH
33153: LD_INT 1
33155: ARRAY
33156: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33157: LD_ADDR_VAR 0 11
33161: PUSH
33162: LD_VAR 0 11
33166: PPUSH
33167: LD_INT 1
33169: PPUSH
33170: CALL_OW 3
33174: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33175: LD_VAR 0 2
33179: PPUSH
33180: LD_VAR 0 3
33184: PPUSH
33185: CALL 33385 0 2
33189: PUSH
33190: LD_VAR 0 11
33194: PUSH
33195: EMPTY
33196: EQUAL
33197: OR
33198: IFFALSE 33143
// if not control in _control then
33200: LD_VAR 0 4
33204: PUSH
33205: LD_VAR 0 12
33209: IN
33210: NOT
33211: IFFALSE 33237
// control := _control [ rand ( 1 , _control ) ] ;
33213: LD_ADDR_VAR 0 4
33217: PUSH
33218: LD_VAR 0 12
33222: PUSH
33223: LD_INT 1
33225: PPUSH
33226: LD_VAR 0 12
33230: PPUSH
33231: CALL_OW 12
33235: ARRAY
33236: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33237: LD_VAR 0 2
33241: PPUSH
33242: LD_VAR 0 5
33246: PPUSH
33247: CALL 33605 0 2
33251: NOT
33252: IFFALSE 33311
// repeat weapon := _weapon [ 1 ] ;
33254: LD_ADDR_VAR 0 5
33258: PUSH
33259: LD_VAR 0 10
33263: PUSH
33264: LD_INT 1
33266: ARRAY
33267: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33268: LD_ADDR_VAR 0 10
33272: PUSH
33273: LD_VAR 0 10
33277: PPUSH
33278: LD_INT 1
33280: PPUSH
33281: CALL_OW 3
33285: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33286: LD_VAR 0 2
33290: PPUSH
33291: LD_VAR 0 5
33295: PPUSH
33296: CALL 33605 0 2
33300: PUSH
33301: LD_VAR 0 10
33305: PUSH
33306: EMPTY
33307: EQUAL
33308: OR
33309: IFFALSE 33254
// result := [ ] ;
33311: LD_ADDR_VAR 0 6
33315: PUSH
33316: EMPTY
33317: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33318: LD_VAR 0 1
33322: PPUSH
33323: LD_VAR 0 2
33327: PPUSH
33328: LD_VAR 0 3
33332: PPUSH
33333: LD_VAR 0 4
33337: PPUSH
33338: LD_VAR 0 5
33342: PPUSH
33343: CALL_OW 448
33347: IFFALSE 33380
// result := [ chassis , engine , control , weapon ] ;
33349: LD_ADDR_VAR 0 6
33353: PUSH
33354: LD_VAR 0 2
33358: PUSH
33359: LD_VAR 0 3
33363: PUSH
33364: LD_VAR 0 4
33368: PUSH
33369: LD_VAR 0 5
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: ST_TO_ADDR
// end ;
33380: LD_VAR 0 6
33384: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33385: LD_INT 0
33387: PPUSH
// if not chassis or not engine then
33388: LD_VAR 0 1
33392: NOT
33393: PUSH
33394: LD_VAR 0 2
33398: NOT
33399: OR
33400: IFFALSE 33404
// exit ;
33402: GO 33600
// case engine of engine_solar :
33404: LD_VAR 0 2
33408: PUSH
33409: LD_INT 2
33411: DOUBLE
33412: EQUAL
33413: IFTRUE 33417
33415: GO 33455
33417: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33418: LD_ADDR_VAR 0 3
33422: PUSH
33423: LD_INT 11
33425: PUSH
33426: LD_INT 12
33428: PUSH
33429: LD_INT 13
33431: PUSH
33432: LD_INT 14
33434: PUSH
33435: LD_INT 1
33437: PUSH
33438: LD_INT 2
33440: PUSH
33441: LD_INT 3
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: ST_TO_ADDR
33453: GO 33584
33455: LD_INT 1
33457: DOUBLE
33458: EQUAL
33459: IFTRUE 33463
33461: GO 33525
33463: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33464: LD_ADDR_VAR 0 3
33468: PUSH
33469: LD_INT 11
33471: PUSH
33472: LD_INT 12
33474: PUSH
33475: LD_INT 13
33477: PUSH
33478: LD_INT 14
33480: PUSH
33481: LD_INT 1
33483: PUSH
33484: LD_INT 2
33486: PUSH
33487: LD_INT 3
33489: PUSH
33490: LD_INT 4
33492: PUSH
33493: LD_INT 5
33495: PUSH
33496: LD_INT 21
33498: PUSH
33499: LD_INT 23
33501: PUSH
33502: LD_INT 22
33504: PUSH
33505: LD_INT 24
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: ST_TO_ADDR
33523: GO 33584
33525: LD_INT 3
33527: DOUBLE
33528: EQUAL
33529: IFTRUE 33533
33531: GO 33583
33533: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33534: LD_ADDR_VAR 0 3
33538: PUSH
33539: LD_INT 13
33541: PUSH
33542: LD_INT 14
33544: PUSH
33545: LD_INT 2
33547: PUSH
33548: LD_INT 3
33550: PUSH
33551: LD_INT 4
33553: PUSH
33554: LD_INT 5
33556: PUSH
33557: LD_INT 21
33559: PUSH
33560: LD_INT 22
33562: PUSH
33563: LD_INT 23
33565: PUSH
33566: LD_INT 24
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: ST_TO_ADDR
33581: GO 33584
33583: POP
// result := ( chassis in result ) ;
33584: LD_ADDR_VAR 0 3
33588: PUSH
33589: LD_VAR 0 1
33593: PUSH
33594: LD_VAR 0 3
33598: IN
33599: ST_TO_ADDR
// end ;
33600: LD_VAR 0 3
33604: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33605: LD_INT 0
33607: PPUSH
// if not chassis or not weapon then
33608: LD_VAR 0 1
33612: NOT
33613: PUSH
33614: LD_VAR 0 2
33618: NOT
33619: OR
33620: IFFALSE 33624
// exit ;
33622: GO 34686
// case weapon of us_machine_gun :
33624: LD_VAR 0 2
33628: PUSH
33629: LD_INT 2
33631: DOUBLE
33632: EQUAL
33633: IFTRUE 33637
33635: GO 33667
33637: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33638: LD_ADDR_VAR 0 3
33642: PUSH
33643: LD_INT 1
33645: PUSH
33646: LD_INT 2
33648: PUSH
33649: LD_INT 3
33651: PUSH
33652: LD_INT 4
33654: PUSH
33655: LD_INT 5
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: ST_TO_ADDR
33665: GO 34670
33667: LD_INT 3
33669: DOUBLE
33670: EQUAL
33671: IFTRUE 33675
33673: GO 33705
33675: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33676: LD_ADDR_VAR 0 3
33680: PUSH
33681: LD_INT 1
33683: PUSH
33684: LD_INT 2
33686: PUSH
33687: LD_INT 3
33689: PUSH
33690: LD_INT 4
33692: PUSH
33693: LD_INT 5
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: ST_TO_ADDR
33703: GO 34670
33705: LD_INT 11
33707: DOUBLE
33708: EQUAL
33709: IFTRUE 33713
33711: GO 33743
33713: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33714: LD_ADDR_VAR 0 3
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: LD_INT 2
33724: PUSH
33725: LD_INT 3
33727: PUSH
33728: LD_INT 4
33730: PUSH
33731: LD_INT 5
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: ST_TO_ADDR
33741: GO 34670
33743: LD_INT 4
33745: DOUBLE
33746: EQUAL
33747: IFTRUE 33751
33749: GO 33777
33751: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33752: LD_ADDR_VAR 0 3
33756: PUSH
33757: LD_INT 2
33759: PUSH
33760: LD_INT 3
33762: PUSH
33763: LD_INT 4
33765: PUSH
33766: LD_INT 5
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: ST_TO_ADDR
33775: GO 34670
33777: LD_INT 5
33779: DOUBLE
33780: EQUAL
33781: IFTRUE 33785
33783: GO 33811
33785: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33786: LD_ADDR_VAR 0 3
33790: PUSH
33791: LD_INT 2
33793: PUSH
33794: LD_INT 3
33796: PUSH
33797: LD_INT 4
33799: PUSH
33800: LD_INT 5
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: ST_TO_ADDR
33809: GO 34670
33811: LD_INT 9
33813: DOUBLE
33814: EQUAL
33815: IFTRUE 33819
33817: GO 33845
33819: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33820: LD_ADDR_VAR 0 3
33824: PUSH
33825: LD_INT 2
33827: PUSH
33828: LD_INT 3
33830: PUSH
33831: LD_INT 4
33833: PUSH
33834: LD_INT 5
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: ST_TO_ADDR
33843: GO 34670
33845: LD_INT 7
33847: DOUBLE
33848: EQUAL
33849: IFTRUE 33853
33851: GO 33879
33853: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33854: LD_ADDR_VAR 0 3
33858: PUSH
33859: LD_INT 2
33861: PUSH
33862: LD_INT 3
33864: PUSH
33865: LD_INT 4
33867: PUSH
33868: LD_INT 5
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: ST_TO_ADDR
33877: GO 34670
33879: LD_INT 12
33881: DOUBLE
33882: EQUAL
33883: IFTRUE 33887
33885: GO 33913
33887: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33888: LD_ADDR_VAR 0 3
33892: PUSH
33893: LD_INT 2
33895: PUSH
33896: LD_INT 3
33898: PUSH
33899: LD_INT 4
33901: PUSH
33902: LD_INT 5
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: ST_TO_ADDR
33911: GO 34670
33913: LD_INT 13
33915: DOUBLE
33916: EQUAL
33917: IFTRUE 33921
33919: GO 33947
33921: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33922: LD_ADDR_VAR 0 3
33926: PUSH
33927: LD_INT 2
33929: PUSH
33930: LD_INT 3
33932: PUSH
33933: LD_INT 4
33935: PUSH
33936: LD_INT 5
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: ST_TO_ADDR
33945: GO 34670
33947: LD_INT 14
33949: DOUBLE
33950: EQUAL
33951: IFTRUE 33955
33953: GO 33973
33955: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33956: LD_ADDR_VAR 0 3
33960: PUSH
33961: LD_INT 4
33963: PUSH
33964: LD_INT 5
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: ST_TO_ADDR
33971: GO 34670
33973: LD_INT 6
33975: DOUBLE
33976: EQUAL
33977: IFTRUE 33981
33979: GO 33999
33981: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33982: LD_ADDR_VAR 0 3
33986: PUSH
33987: LD_INT 4
33989: PUSH
33990: LD_INT 5
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: ST_TO_ADDR
33997: GO 34670
33999: LD_INT 10
34001: DOUBLE
34002: EQUAL
34003: IFTRUE 34007
34005: GO 34025
34007: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34008: LD_ADDR_VAR 0 3
34012: PUSH
34013: LD_INT 4
34015: PUSH
34016: LD_INT 5
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: ST_TO_ADDR
34023: GO 34670
34025: LD_INT 22
34027: DOUBLE
34028: EQUAL
34029: IFTRUE 34033
34031: GO 34059
34033: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34034: LD_ADDR_VAR 0 3
34038: PUSH
34039: LD_INT 11
34041: PUSH
34042: LD_INT 12
34044: PUSH
34045: LD_INT 13
34047: PUSH
34048: LD_INT 14
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: ST_TO_ADDR
34057: GO 34670
34059: LD_INT 23
34061: DOUBLE
34062: EQUAL
34063: IFTRUE 34067
34065: GO 34093
34067: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34068: LD_ADDR_VAR 0 3
34072: PUSH
34073: LD_INT 11
34075: PUSH
34076: LD_INT 12
34078: PUSH
34079: LD_INT 13
34081: PUSH
34082: LD_INT 14
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: ST_TO_ADDR
34091: GO 34670
34093: LD_INT 24
34095: DOUBLE
34096: EQUAL
34097: IFTRUE 34101
34099: GO 34127
34101: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34102: LD_ADDR_VAR 0 3
34106: PUSH
34107: LD_INT 11
34109: PUSH
34110: LD_INT 12
34112: PUSH
34113: LD_INT 13
34115: PUSH
34116: LD_INT 14
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: ST_TO_ADDR
34125: GO 34670
34127: LD_INT 30
34129: DOUBLE
34130: EQUAL
34131: IFTRUE 34135
34133: GO 34161
34135: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34136: LD_ADDR_VAR 0 3
34140: PUSH
34141: LD_INT 11
34143: PUSH
34144: LD_INT 12
34146: PUSH
34147: LD_INT 13
34149: PUSH
34150: LD_INT 14
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: ST_TO_ADDR
34159: GO 34670
34161: LD_INT 25
34163: DOUBLE
34164: EQUAL
34165: IFTRUE 34169
34167: GO 34187
34169: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34170: LD_ADDR_VAR 0 3
34174: PUSH
34175: LD_INT 13
34177: PUSH
34178: LD_INT 14
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: ST_TO_ADDR
34185: GO 34670
34187: LD_INT 27
34189: DOUBLE
34190: EQUAL
34191: IFTRUE 34195
34193: GO 34213
34195: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34196: LD_ADDR_VAR 0 3
34200: PUSH
34201: LD_INT 13
34203: PUSH
34204: LD_INT 14
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: ST_TO_ADDR
34211: GO 34670
34213: LD_EXP 48
34217: DOUBLE
34218: EQUAL
34219: IFTRUE 34223
34221: GO 34249
34223: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34224: LD_ADDR_VAR 0 3
34228: PUSH
34229: LD_INT 11
34231: PUSH
34232: LD_INT 12
34234: PUSH
34235: LD_INT 13
34237: PUSH
34238: LD_INT 14
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: ST_TO_ADDR
34247: GO 34670
34249: LD_INT 28
34251: DOUBLE
34252: EQUAL
34253: IFTRUE 34257
34255: GO 34275
34257: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34258: LD_ADDR_VAR 0 3
34262: PUSH
34263: LD_INT 13
34265: PUSH
34266: LD_INT 14
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: ST_TO_ADDR
34273: GO 34670
34275: LD_INT 29
34277: DOUBLE
34278: EQUAL
34279: IFTRUE 34283
34281: GO 34301
34283: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34284: LD_ADDR_VAR 0 3
34288: PUSH
34289: LD_INT 13
34291: PUSH
34292: LD_INT 14
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: ST_TO_ADDR
34299: GO 34670
34301: LD_INT 31
34303: DOUBLE
34304: EQUAL
34305: IFTRUE 34309
34307: GO 34327
34309: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34310: LD_ADDR_VAR 0 3
34314: PUSH
34315: LD_INT 13
34317: PUSH
34318: LD_INT 14
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: ST_TO_ADDR
34325: GO 34670
34327: LD_INT 26
34329: DOUBLE
34330: EQUAL
34331: IFTRUE 34335
34333: GO 34353
34335: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34336: LD_ADDR_VAR 0 3
34340: PUSH
34341: LD_INT 13
34343: PUSH
34344: LD_INT 14
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: ST_TO_ADDR
34351: GO 34670
34353: LD_INT 42
34355: DOUBLE
34356: EQUAL
34357: IFTRUE 34361
34359: GO 34387
34361: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34362: LD_ADDR_VAR 0 3
34366: PUSH
34367: LD_INT 21
34369: PUSH
34370: LD_INT 22
34372: PUSH
34373: LD_INT 23
34375: PUSH
34376: LD_INT 24
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: ST_TO_ADDR
34385: GO 34670
34387: LD_INT 43
34389: DOUBLE
34390: EQUAL
34391: IFTRUE 34395
34393: GO 34421
34395: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34396: LD_ADDR_VAR 0 3
34400: PUSH
34401: LD_INT 21
34403: PUSH
34404: LD_INT 22
34406: PUSH
34407: LD_INT 23
34409: PUSH
34410: LD_INT 24
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: ST_TO_ADDR
34419: GO 34670
34421: LD_INT 44
34423: DOUBLE
34424: EQUAL
34425: IFTRUE 34429
34427: GO 34455
34429: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34430: LD_ADDR_VAR 0 3
34434: PUSH
34435: LD_INT 21
34437: PUSH
34438: LD_INT 22
34440: PUSH
34441: LD_INT 23
34443: PUSH
34444: LD_INT 24
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: ST_TO_ADDR
34453: GO 34670
34455: LD_INT 45
34457: DOUBLE
34458: EQUAL
34459: IFTRUE 34463
34461: GO 34489
34463: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34464: LD_ADDR_VAR 0 3
34468: PUSH
34469: LD_INT 21
34471: PUSH
34472: LD_INT 22
34474: PUSH
34475: LD_INT 23
34477: PUSH
34478: LD_INT 24
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: ST_TO_ADDR
34487: GO 34670
34489: LD_INT 49
34491: DOUBLE
34492: EQUAL
34493: IFTRUE 34497
34495: GO 34523
34497: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34498: LD_ADDR_VAR 0 3
34502: PUSH
34503: LD_INT 21
34505: PUSH
34506: LD_INT 22
34508: PUSH
34509: LD_INT 23
34511: PUSH
34512: LD_INT 24
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: ST_TO_ADDR
34521: GO 34670
34523: LD_INT 51
34525: DOUBLE
34526: EQUAL
34527: IFTRUE 34531
34529: GO 34557
34531: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34532: LD_ADDR_VAR 0 3
34536: PUSH
34537: LD_INT 21
34539: PUSH
34540: LD_INT 22
34542: PUSH
34543: LD_INT 23
34545: PUSH
34546: LD_INT 24
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: ST_TO_ADDR
34555: GO 34670
34557: LD_INT 52
34559: DOUBLE
34560: EQUAL
34561: IFTRUE 34565
34563: GO 34591
34565: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34566: LD_ADDR_VAR 0 3
34570: PUSH
34571: LD_INT 21
34573: PUSH
34574: LD_INT 22
34576: PUSH
34577: LD_INT 23
34579: PUSH
34580: LD_INT 24
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: ST_TO_ADDR
34589: GO 34670
34591: LD_INT 53
34593: DOUBLE
34594: EQUAL
34595: IFTRUE 34599
34597: GO 34617
34599: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34600: LD_ADDR_VAR 0 3
34604: PUSH
34605: LD_INT 23
34607: PUSH
34608: LD_INT 24
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: ST_TO_ADDR
34615: GO 34670
34617: LD_INT 46
34619: DOUBLE
34620: EQUAL
34621: IFTRUE 34625
34623: GO 34643
34625: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34626: LD_ADDR_VAR 0 3
34630: PUSH
34631: LD_INT 23
34633: PUSH
34634: LD_INT 24
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: ST_TO_ADDR
34641: GO 34670
34643: LD_INT 47
34645: DOUBLE
34646: EQUAL
34647: IFTRUE 34651
34649: GO 34669
34651: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34652: LD_ADDR_VAR 0 3
34656: PUSH
34657: LD_INT 23
34659: PUSH
34660: LD_INT 24
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: ST_TO_ADDR
34667: GO 34670
34669: POP
// result := ( chassis in result ) ;
34670: LD_ADDR_VAR 0 3
34674: PUSH
34675: LD_VAR 0 1
34679: PUSH
34680: LD_VAR 0 3
34684: IN
34685: ST_TO_ADDR
// end ;
34686: LD_VAR 0 3
34690: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34691: LD_INT 0
34693: PPUSH
34694: PPUSH
34695: PPUSH
34696: PPUSH
34697: PPUSH
34698: PPUSH
34699: PPUSH
// result := array ;
34700: LD_ADDR_VAR 0 5
34704: PUSH
34705: LD_VAR 0 1
34709: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34710: LD_VAR 0 1
34714: NOT
34715: PUSH
34716: LD_VAR 0 2
34720: NOT
34721: OR
34722: PUSH
34723: LD_VAR 0 3
34727: NOT
34728: OR
34729: PUSH
34730: LD_VAR 0 2
34734: PUSH
34735: LD_VAR 0 1
34739: GREATER
34740: OR
34741: PUSH
34742: LD_VAR 0 3
34746: PUSH
34747: LD_VAR 0 1
34751: GREATER
34752: OR
34753: IFFALSE 34757
// exit ;
34755: GO 35053
// if direction then
34757: LD_VAR 0 4
34761: IFFALSE 34825
// begin d := 1 ;
34763: LD_ADDR_VAR 0 9
34767: PUSH
34768: LD_INT 1
34770: ST_TO_ADDR
// if i_from > i_to then
34771: LD_VAR 0 2
34775: PUSH
34776: LD_VAR 0 3
34780: GREATER
34781: IFFALSE 34807
// length := ( array - i_from ) + i_to else
34783: LD_ADDR_VAR 0 11
34787: PUSH
34788: LD_VAR 0 1
34792: PUSH
34793: LD_VAR 0 2
34797: MINUS
34798: PUSH
34799: LD_VAR 0 3
34803: PLUS
34804: ST_TO_ADDR
34805: GO 34823
// length := i_to - i_from ;
34807: LD_ADDR_VAR 0 11
34811: PUSH
34812: LD_VAR 0 3
34816: PUSH
34817: LD_VAR 0 2
34821: MINUS
34822: ST_TO_ADDR
// end else
34823: GO 34886
// begin d := - 1 ;
34825: LD_ADDR_VAR 0 9
34829: PUSH
34830: LD_INT 1
34832: NEG
34833: ST_TO_ADDR
// if i_from > i_to then
34834: LD_VAR 0 2
34838: PUSH
34839: LD_VAR 0 3
34843: GREATER
34844: IFFALSE 34864
// length := i_from - i_to else
34846: LD_ADDR_VAR 0 11
34850: PUSH
34851: LD_VAR 0 2
34855: PUSH
34856: LD_VAR 0 3
34860: MINUS
34861: ST_TO_ADDR
34862: GO 34886
// length := ( array - i_to ) + i_from ;
34864: LD_ADDR_VAR 0 11
34868: PUSH
34869: LD_VAR 0 1
34873: PUSH
34874: LD_VAR 0 3
34878: MINUS
34879: PUSH
34880: LD_VAR 0 2
34884: PLUS
34885: ST_TO_ADDR
// end ; if not length then
34886: LD_VAR 0 11
34890: NOT
34891: IFFALSE 34895
// exit ;
34893: GO 35053
// tmp := array ;
34895: LD_ADDR_VAR 0 10
34899: PUSH
34900: LD_VAR 0 1
34904: ST_TO_ADDR
// for i = 1 to length do
34905: LD_ADDR_VAR 0 6
34909: PUSH
34910: DOUBLE
34911: LD_INT 1
34913: DEC
34914: ST_TO_ADDR
34915: LD_VAR 0 11
34919: PUSH
34920: FOR_TO
34921: IFFALSE 35041
// begin for j = 1 to array do
34923: LD_ADDR_VAR 0 7
34927: PUSH
34928: DOUBLE
34929: LD_INT 1
34931: DEC
34932: ST_TO_ADDR
34933: LD_VAR 0 1
34937: PUSH
34938: FOR_TO
34939: IFFALSE 35027
// begin k := j + d ;
34941: LD_ADDR_VAR 0 8
34945: PUSH
34946: LD_VAR 0 7
34950: PUSH
34951: LD_VAR 0 9
34955: PLUS
34956: ST_TO_ADDR
// if k > array then
34957: LD_VAR 0 8
34961: PUSH
34962: LD_VAR 0 1
34966: GREATER
34967: IFFALSE 34977
// k := 1 ;
34969: LD_ADDR_VAR 0 8
34973: PUSH
34974: LD_INT 1
34976: ST_TO_ADDR
// if not k then
34977: LD_VAR 0 8
34981: NOT
34982: IFFALSE 34994
// k := array ;
34984: LD_ADDR_VAR 0 8
34988: PUSH
34989: LD_VAR 0 1
34993: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34994: LD_ADDR_VAR 0 10
34998: PUSH
34999: LD_VAR 0 10
35003: PPUSH
35004: LD_VAR 0 8
35008: PPUSH
35009: LD_VAR 0 1
35013: PUSH
35014: LD_VAR 0 7
35018: ARRAY
35019: PPUSH
35020: CALL_OW 1
35024: ST_TO_ADDR
// end ;
35025: GO 34938
35027: POP
35028: POP
// array := tmp ;
35029: LD_ADDR_VAR 0 1
35033: PUSH
35034: LD_VAR 0 10
35038: ST_TO_ADDR
// end ;
35039: GO 34920
35041: POP
35042: POP
// result := array ;
35043: LD_ADDR_VAR 0 5
35047: PUSH
35048: LD_VAR 0 1
35052: ST_TO_ADDR
// end ;
35053: LD_VAR 0 5
35057: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35058: LD_INT 0
35060: PPUSH
35061: PPUSH
// result := 0 ;
35062: LD_ADDR_VAR 0 3
35066: PUSH
35067: LD_INT 0
35069: ST_TO_ADDR
// if not array or not value in array then
35070: LD_VAR 0 1
35074: NOT
35075: PUSH
35076: LD_VAR 0 2
35080: PUSH
35081: LD_VAR 0 1
35085: IN
35086: NOT
35087: OR
35088: IFFALSE 35092
// exit ;
35090: GO 35146
// for i = 1 to array do
35092: LD_ADDR_VAR 0 4
35096: PUSH
35097: DOUBLE
35098: LD_INT 1
35100: DEC
35101: ST_TO_ADDR
35102: LD_VAR 0 1
35106: PUSH
35107: FOR_TO
35108: IFFALSE 35144
// if value = array [ i ] then
35110: LD_VAR 0 2
35114: PUSH
35115: LD_VAR 0 1
35119: PUSH
35120: LD_VAR 0 4
35124: ARRAY
35125: EQUAL
35126: IFFALSE 35142
// begin result := i ;
35128: LD_ADDR_VAR 0 3
35132: PUSH
35133: LD_VAR 0 4
35137: ST_TO_ADDR
// exit ;
35138: POP
35139: POP
35140: GO 35146
// end ;
35142: GO 35107
35144: POP
35145: POP
// end ;
35146: LD_VAR 0 3
35150: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35151: LD_INT 0
35153: PPUSH
// vc_chassis := chassis ;
35154: LD_ADDR_OWVAR 37
35158: PUSH
35159: LD_VAR 0 1
35163: ST_TO_ADDR
// vc_engine := engine ;
35164: LD_ADDR_OWVAR 39
35168: PUSH
35169: LD_VAR 0 2
35173: ST_TO_ADDR
// vc_control := control ;
35174: LD_ADDR_OWVAR 38
35178: PUSH
35179: LD_VAR 0 3
35183: ST_TO_ADDR
// vc_weapon := weapon ;
35184: LD_ADDR_OWVAR 40
35188: PUSH
35189: LD_VAR 0 4
35193: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35194: LD_ADDR_OWVAR 41
35198: PUSH
35199: LD_VAR 0 5
35203: ST_TO_ADDR
// end ;
35204: LD_VAR 0 6
35208: RET
// export function WantPlant ( unit ) ; var task ; begin
35209: LD_INT 0
35211: PPUSH
35212: PPUSH
// result := false ;
35213: LD_ADDR_VAR 0 2
35217: PUSH
35218: LD_INT 0
35220: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35221: LD_ADDR_VAR 0 3
35225: PUSH
35226: LD_VAR 0 1
35230: PPUSH
35231: CALL_OW 437
35235: ST_TO_ADDR
// if task then
35236: LD_VAR 0 3
35240: IFFALSE 35268
// if task [ 1 ] [ 1 ] = p then
35242: LD_VAR 0 3
35246: PUSH
35247: LD_INT 1
35249: ARRAY
35250: PUSH
35251: LD_INT 1
35253: ARRAY
35254: PUSH
35255: LD_STRING p
35257: EQUAL
35258: IFFALSE 35268
// result := true ;
35260: LD_ADDR_VAR 0 2
35264: PUSH
35265: LD_INT 1
35267: ST_TO_ADDR
// end ;
35268: LD_VAR 0 2
35272: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35273: LD_INT 0
35275: PPUSH
35276: PPUSH
35277: PPUSH
35278: PPUSH
// if pos < 1 then
35279: LD_VAR 0 2
35283: PUSH
35284: LD_INT 1
35286: LESS
35287: IFFALSE 35291
// exit ;
35289: GO 35594
// if pos = 1 then
35291: LD_VAR 0 2
35295: PUSH
35296: LD_INT 1
35298: EQUAL
35299: IFFALSE 35332
// result := Replace ( arr , pos [ 1 ] , value ) else
35301: LD_ADDR_VAR 0 4
35305: PUSH
35306: LD_VAR 0 1
35310: PPUSH
35311: LD_VAR 0 2
35315: PUSH
35316: LD_INT 1
35318: ARRAY
35319: PPUSH
35320: LD_VAR 0 3
35324: PPUSH
35325: CALL_OW 1
35329: ST_TO_ADDR
35330: GO 35594
// begin tmp := arr ;
35332: LD_ADDR_VAR 0 6
35336: PUSH
35337: LD_VAR 0 1
35341: ST_TO_ADDR
// s_arr := [ tmp ] ;
35342: LD_ADDR_VAR 0 7
35346: PUSH
35347: LD_VAR 0 6
35351: PUSH
35352: EMPTY
35353: LIST
35354: ST_TO_ADDR
// for i = 1 to pos - 1 do
35355: LD_ADDR_VAR 0 5
35359: PUSH
35360: DOUBLE
35361: LD_INT 1
35363: DEC
35364: ST_TO_ADDR
35365: LD_VAR 0 2
35369: PUSH
35370: LD_INT 1
35372: MINUS
35373: PUSH
35374: FOR_TO
35375: IFFALSE 35420
// begin tmp := tmp [ pos [ i ] ] ;
35377: LD_ADDR_VAR 0 6
35381: PUSH
35382: LD_VAR 0 6
35386: PUSH
35387: LD_VAR 0 2
35391: PUSH
35392: LD_VAR 0 5
35396: ARRAY
35397: ARRAY
35398: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35399: LD_ADDR_VAR 0 7
35403: PUSH
35404: LD_VAR 0 7
35408: PUSH
35409: LD_VAR 0 6
35413: PUSH
35414: EMPTY
35415: LIST
35416: ADD
35417: ST_TO_ADDR
// end ;
35418: GO 35374
35420: POP
35421: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35422: LD_ADDR_VAR 0 6
35426: PUSH
35427: LD_VAR 0 6
35431: PPUSH
35432: LD_VAR 0 2
35436: PUSH
35437: LD_VAR 0 2
35441: ARRAY
35442: PPUSH
35443: LD_VAR 0 3
35447: PPUSH
35448: CALL_OW 1
35452: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35453: LD_ADDR_VAR 0 7
35457: PUSH
35458: LD_VAR 0 7
35462: PPUSH
35463: LD_VAR 0 7
35467: PPUSH
35468: LD_VAR 0 6
35472: PPUSH
35473: CALL_OW 1
35477: ST_TO_ADDR
// for i = s_arr downto 2 do
35478: LD_ADDR_VAR 0 5
35482: PUSH
35483: DOUBLE
35484: LD_VAR 0 7
35488: INC
35489: ST_TO_ADDR
35490: LD_INT 2
35492: PUSH
35493: FOR_DOWNTO
35494: IFFALSE 35578
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35496: LD_ADDR_VAR 0 6
35500: PUSH
35501: LD_VAR 0 7
35505: PUSH
35506: LD_VAR 0 5
35510: PUSH
35511: LD_INT 1
35513: MINUS
35514: ARRAY
35515: PPUSH
35516: LD_VAR 0 2
35520: PUSH
35521: LD_VAR 0 5
35525: PUSH
35526: LD_INT 1
35528: MINUS
35529: ARRAY
35530: PPUSH
35531: LD_VAR 0 7
35535: PUSH
35536: LD_VAR 0 5
35540: ARRAY
35541: PPUSH
35542: CALL_OW 1
35546: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35547: LD_ADDR_VAR 0 7
35551: PUSH
35552: LD_VAR 0 7
35556: PPUSH
35557: LD_VAR 0 5
35561: PUSH
35562: LD_INT 1
35564: MINUS
35565: PPUSH
35566: LD_VAR 0 6
35570: PPUSH
35571: CALL_OW 1
35575: ST_TO_ADDR
// end ;
35576: GO 35493
35578: POP
35579: POP
// result := s_arr [ 1 ] ;
35580: LD_ADDR_VAR 0 4
35584: PUSH
35585: LD_VAR 0 7
35589: PUSH
35590: LD_INT 1
35592: ARRAY
35593: ST_TO_ADDR
// end ; end ;
35594: LD_VAR 0 4
35598: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35599: LD_INT 0
35601: PPUSH
35602: PPUSH
// if not list then
35603: LD_VAR 0 1
35607: NOT
35608: IFFALSE 35612
// exit ;
35610: GO 35703
// i := list [ pos1 ] ;
35612: LD_ADDR_VAR 0 5
35616: PUSH
35617: LD_VAR 0 1
35621: PUSH
35622: LD_VAR 0 2
35626: ARRAY
35627: ST_TO_ADDR
// if not i then
35628: LD_VAR 0 5
35632: NOT
35633: IFFALSE 35637
// exit ;
35635: GO 35703
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35637: LD_ADDR_VAR 0 1
35641: PUSH
35642: LD_VAR 0 1
35646: PPUSH
35647: LD_VAR 0 2
35651: PPUSH
35652: LD_VAR 0 1
35656: PUSH
35657: LD_VAR 0 3
35661: ARRAY
35662: PPUSH
35663: CALL_OW 1
35667: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35668: LD_ADDR_VAR 0 1
35672: PUSH
35673: LD_VAR 0 1
35677: PPUSH
35678: LD_VAR 0 3
35682: PPUSH
35683: LD_VAR 0 5
35687: PPUSH
35688: CALL_OW 1
35692: ST_TO_ADDR
// result := list ;
35693: LD_ADDR_VAR 0 4
35697: PUSH
35698: LD_VAR 0 1
35702: ST_TO_ADDR
// end ;
35703: LD_VAR 0 4
35707: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35708: LD_INT 0
35710: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35711: LD_ADDR_VAR 0 5
35715: PUSH
35716: LD_VAR 0 1
35720: PPUSH
35721: CALL_OW 250
35725: PPUSH
35726: LD_VAR 0 1
35730: PPUSH
35731: CALL_OW 251
35735: PPUSH
35736: LD_VAR 0 2
35740: PPUSH
35741: LD_VAR 0 3
35745: PPUSH
35746: LD_VAR 0 4
35750: PPUSH
35751: CALL 35761 0 5
35755: ST_TO_ADDR
// end ;
35756: LD_VAR 0 5
35760: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35761: LD_INT 0
35763: PPUSH
35764: PPUSH
35765: PPUSH
35766: PPUSH
// if not list then
35767: LD_VAR 0 3
35771: NOT
35772: IFFALSE 35776
// exit ;
35774: GO 36164
// result := [ ] ;
35776: LD_ADDR_VAR 0 6
35780: PUSH
35781: EMPTY
35782: ST_TO_ADDR
// for i in list do
35783: LD_ADDR_VAR 0 7
35787: PUSH
35788: LD_VAR 0 3
35792: PUSH
35793: FOR_IN
35794: IFFALSE 35996
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35796: LD_ADDR_VAR 0 9
35800: PUSH
35801: LD_VAR 0 7
35805: PPUSH
35806: LD_VAR 0 1
35810: PPUSH
35811: LD_VAR 0 2
35815: PPUSH
35816: CALL_OW 297
35820: ST_TO_ADDR
// if not result then
35821: LD_VAR 0 6
35825: NOT
35826: IFFALSE 35852
// result := [ [ i , tmp ] ] else
35828: LD_ADDR_VAR 0 6
35832: PUSH
35833: LD_VAR 0 7
35837: PUSH
35838: LD_VAR 0 9
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: EMPTY
35848: LIST
35849: ST_TO_ADDR
35850: GO 35994
// begin if result [ result ] [ 2 ] < tmp then
35852: LD_VAR 0 6
35856: PUSH
35857: LD_VAR 0 6
35861: ARRAY
35862: PUSH
35863: LD_INT 2
35865: ARRAY
35866: PUSH
35867: LD_VAR 0 9
35871: LESS
35872: IFFALSE 35914
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35874: LD_ADDR_VAR 0 6
35878: PUSH
35879: LD_VAR 0 6
35883: PPUSH
35884: LD_VAR 0 6
35888: PUSH
35889: LD_INT 1
35891: PLUS
35892: PPUSH
35893: LD_VAR 0 7
35897: PUSH
35898: LD_VAR 0 9
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PPUSH
35907: CALL_OW 2
35911: ST_TO_ADDR
35912: GO 35994
// for j = 1 to result do
35914: LD_ADDR_VAR 0 8
35918: PUSH
35919: DOUBLE
35920: LD_INT 1
35922: DEC
35923: ST_TO_ADDR
35924: LD_VAR 0 6
35928: PUSH
35929: FOR_TO
35930: IFFALSE 35992
// begin if tmp < result [ j ] [ 2 ] then
35932: LD_VAR 0 9
35936: PUSH
35937: LD_VAR 0 6
35941: PUSH
35942: LD_VAR 0 8
35946: ARRAY
35947: PUSH
35948: LD_INT 2
35950: ARRAY
35951: LESS
35952: IFFALSE 35990
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35954: LD_ADDR_VAR 0 6
35958: PUSH
35959: LD_VAR 0 6
35963: PPUSH
35964: LD_VAR 0 8
35968: PPUSH
35969: LD_VAR 0 7
35973: PUSH
35974: LD_VAR 0 9
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PPUSH
35983: CALL_OW 2
35987: ST_TO_ADDR
// break ;
35988: GO 35992
// end ; end ;
35990: GO 35929
35992: POP
35993: POP
// end ; end ;
35994: GO 35793
35996: POP
35997: POP
// if result and not asc then
35998: LD_VAR 0 6
36002: PUSH
36003: LD_VAR 0 4
36007: NOT
36008: AND
36009: IFFALSE 36084
// begin tmp := result ;
36011: LD_ADDR_VAR 0 9
36015: PUSH
36016: LD_VAR 0 6
36020: ST_TO_ADDR
// for i = tmp downto 1 do
36021: LD_ADDR_VAR 0 7
36025: PUSH
36026: DOUBLE
36027: LD_VAR 0 9
36031: INC
36032: ST_TO_ADDR
36033: LD_INT 1
36035: PUSH
36036: FOR_DOWNTO
36037: IFFALSE 36082
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36039: LD_ADDR_VAR 0 6
36043: PUSH
36044: LD_VAR 0 6
36048: PPUSH
36049: LD_VAR 0 9
36053: PUSH
36054: LD_VAR 0 7
36058: MINUS
36059: PUSH
36060: LD_INT 1
36062: PLUS
36063: PPUSH
36064: LD_VAR 0 9
36068: PUSH
36069: LD_VAR 0 7
36073: ARRAY
36074: PPUSH
36075: CALL_OW 1
36079: ST_TO_ADDR
36080: GO 36036
36082: POP
36083: POP
// end ; tmp := [ ] ;
36084: LD_ADDR_VAR 0 9
36088: PUSH
36089: EMPTY
36090: ST_TO_ADDR
// if mode then
36091: LD_VAR 0 5
36095: IFFALSE 36164
// begin for i = 1 to result do
36097: LD_ADDR_VAR 0 7
36101: PUSH
36102: DOUBLE
36103: LD_INT 1
36105: DEC
36106: ST_TO_ADDR
36107: LD_VAR 0 6
36111: PUSH
36112: FOR_TO
36113: IFFALSE 36152
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36115: LD_ADDR_VAR 0 9
36119: PUSH
36120: LD_VAR 0 9
36124: PPUSH
36125: LD_VAR 0 7
36129: PPUSH
36130: LD_VAR 0 6
36134: PUSH
36135: LD_VAR 0 7
36139: ARRAY
36140: PUSH
36141: LD_INT 1
36143: ARRAY
36144: PPUSH
36145: CALL_OW 1
36149: ST_TO_ADDR
36150: GO 36112
36152: POP
36153: POP
// result := tmp ;
36154: LD_ADDR_VAR 0 6
36158: PUSH
36159: LD_VAR 0 9
36163: ST_TO_ADDR
// end ; end ;
36164: LD_VAR 0 6
36168: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36169: LD_INT 0
36171: PPUSH
36172: PPUSH
36173: PPUSH
36174: PPUSH
36175: PPUSH
36176: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36177: LD_ADDR_VAR 0 5
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: LD_INT 0
36187: PUSH
36188: LD_INT 0
36190: PUSH
36191: EMPTY
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: ST_TO_ADDR
// if not x or not y then
36199: LD_VAR 0 2
36203: NOT
36204: PUSH
36205: LD_VAR 0 3
36209: NOT
36210: OR
36211: IFFALSE 36215
// exit ;
36213: GO 37867
// if not range then
36215: LD_VAR 0 4
36219: NOT
36220: IFFALSE 36230
// range := 10 ;
36222: LD_ADDR_VAR 0 4
36226: PUSH
36227: LD_INT 10
36229: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36230: LD_ADDR_VAR 0 8
36234: PUSH
36235: LD_INT 81
36237: PUSH
36238: LD_VAR 0 1
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 92
36249: PUSH
36250: LD_VAR 0 2
36254: PUSH
36255: LD_VAR 0 3
36259: PUSH
36260: LD_VAR 0 4
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 3
36273: PUSH
36274: LD_INT 21
36276: PUSH
36277: LD_INT 3
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: LIST
36292: PPUSH
36293: CALL_OW 69
36297: ST_TO_ADDR
// if not tmp then
36298: LD_VAR 0 8
36302: NOT
36303: IFFALSE 36307
// exit ;
36305: GO 37867
// for i in tmp do
36307: LD_ADDR_VAR 0 6
36311: PUSH
36312: LD_VAR 0 8
36316: PUSH
36317: FOR_IN
36318: IFFALSE 37842
// begin points := [ 0 , 0 , 0 ] ;
36320: LD_ADDR_VAR 0 9
36324: PUSH
36325: LD_INT 0
36327: PUSH
36328: LD_INT 0
36330: PUSH
36331: LD_INT 0
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: LIST
36338: ST_TO_ADDR
// bpoints := 1 ;
36339: LD_ADDR_VAR 0 10
36343: PUSH
36344: LD_INT 1
36346: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36347: LD_VAR 0 6
36351: PPUSH
36352: CALL_OW 247
36356: PUSH
36357: LD_INT 1
36359: DOUBLE
36360: EQUAL
36361: IFTRUE 36365
36363: GO 36943
36365: POP
// begin if GetClass ( i ) = 1 then
36366: LD_VAR 0 6
36370: PPUSH
36371: CALL_OW 257
36375: PUSH
36376: LD_INT 1
36378: EQUAL
36379: IFFALSE 36400
// points := [ 10 , 5 , 3 ] ;
36381: LD_ADDR_VAR 0 9
36385: PUSH
36386: LD_INT 10
36388: PUSH
36389: LD_INT 5
36391: PUSH
36392: LD_INT 3
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: LIST
36399: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36400: LD_VAR 0 6
36404: PPUSH
36405: CALL_OW 257
36409: PUSH
36410: LD_INT 2
36412: PUSH
36413: LD_INT 3
36415: PUSH
36416: LD_INT 4
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: LIST
36423: IN
36424: IFFALSE 36445
// points := [ 3 , 2 , 1 ] ;
36426: LD_ADDR_VAR 0 9
36430: PUSH
36431: LD_INT 3
36433: PUSH
36434: LD_INT 2
36436: PUSH
36437: LD_INT 1
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: LIST
36444: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36445: LD_VAR 0 6
36449: PPUSH
36450: CALL_OW 257
36454: PUSH
36455: LD_INT 5
36457: EQUAL
36458: IFFALSE 36479
// points := [ 130 , 5 , 2 ] ;
36460: LD_ADDR_VAR 0 9
36464: PUSH
36465: LD_INT 130
36467: PUSH
36468: LD_INT 5
36470: PUSH
36471: LD_INT 2
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: LIST
36478: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36479: LD_VAR 0 6
36483: PPUSH
36484: CALL_OW 257
36488: PUSH
36489: LD_INT 8
36491: EQUAL
36492: IFFALSE 36513
// points := [ 35 , 35 , 30 ] ;
36494: LD_ADDR_VAR 0 9
36498: PUSH
36499: LD_INT 35
36501: PUSH
36502: LD_INT 35
36504: PUSH
36505: LD_INT 30
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: LIST
36512: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36513: LD_VAR 0 6
36517: PPUSH
36518: CALL_OW 257
36522: PUSH
36523: LD_INT 9
36525: EQUAL
36526: IFFALSE 36547
// points := [ 20 , 55 , 40 ] ;
36528: LD_ADDR_VAR 0 9
36532: PUSH
36533: LD_INT 20
36535: PUSH
36536: LD_INT 55
36538: PUSH
36539: LD_INT 40
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: LIST
36546: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36547: LD_VAR 0 6
36551: PPUSH
36552: CALL_OW 257
36556: PUSH
36557: LD_INT 12
36559: PUSH
36560: LD_INT 16
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: IN
36567: IFFALSE 36588
// points := [ 5 , 3 , 2 ] ;
36569: LD_ADDR_VAR 0 9
36573: PUSH
36574: LD_INT 5
36576: PUSH
36577: LD_INT 3
36579: PUSH
36580: LD_INT 2
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: LIST
36587: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36588: LD_VAR 0 6
36592: PPUSH
36593: CALL_OW 257
36597: PUSH
36598: LD_INT 17
36600: EQUAL
36601: IFFALSE 36622
// points := [ 100 , 50 , 75 ] ;
36603: LD_ADDR_VAR 0 9
36607: PUSH
36608: LD_INT 100
36610: PUSH
36611: LD_INT 50
36613: PUSH
36614: LD_INT 75
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: LIST
36621: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36622: LD_VAR 0 6
36626: PPUSH
36627: CALL_OW 257
36631: PUSH
36632: LD_INT 15
36634: EQUAL
36635: IFFALSE 36656
// points := [ 10 , 5 , 3 ] ;
36637: LD_ADDR_VAR 0 9
36641: PUSH
36642: LD_INT 10
36644: PUSH
36645: LD_INT 5
36647: PUSH
36648: LD_INT 3
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: LIST
36655: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36656: LD_VAR 0 6
36660: PPUSH
36661: CALL_OW 257
36665: PUSH
36666: LD_INT 14
36668: EQUAL
36669: IFFALSE 36690
// points := [ 10 , 0 , 0 ] ;
36671: LD_ADDR_VAR 0 9
36675: PUSH
36676: LD_INT 10
36678: PUSH
36679: LD_INT 0
36681: PUSH
36682: LD_INT 0
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: LIST
36689: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36690: LD_VAR 0 6
36694: PPUSH
36695: CALL_OW 257
36699: PUSH
36700: LD_INT 11
36702: EQUAL
36703: IFFALSE 36724
// points := [ 30 , 10 , 5 ] ;
36705: LD_ADDR_VAR 0 9
36709: PUSH
36710: LD_INT 30
36712: PUSH
36713: LD_INT 10
36715: PUSH
36716: LD_INT 5
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: LIST
36723: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36724: LD_VAR 0 1
36728: PPUSH
36729: LD_INT 5
36731: PPUSH
36732: CALL_OW 321
36736: PUSH
36737: LD_INT 2
36739: EQUAL
36740: IFFALSE 36757
// bpoints := bpoints * 1.8 ;
36742: LD_ADDR_VAR 0 10
36746: PUSH
36747: LD_VAR 0 10
36751: PUSH
36752: LD_REAL  1.80000000000000E+0000
36755: MUL
36756: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36757: LD_VAR 0 6
36761: PPUSH
36762: CALL_OW 257
36766: PUSH
36767: LD_INT 1
36769: PUSH
36770: LD_INT 2
36772: PUSH
36773: LD_INT 3
36775: PUSH
36776: LD_INT 4
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: IN
36785: PUSH
36786: LD_VAR 0 1
36790: PPUSH
36791: LD_INT 51
36793: PPUSH
36794: CALL_OW 321
36798: PUSH
36799: LD_INT 2
36801: EQUAL
36802: AND
36803: IFFALSE 36820
// bpoints := bpoints * 1.2 ;
36805: LD_ADDR_VAR 0 10
36809: PUSH
36810: LD_VAR 0 10
36814: PUSH
36815: LD_REAL  1.20000000000000E+0000
36818: MUL
36819: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36820: LD_VAR 0 6
36824: PPUSH
36825: CALL_OW 257
36829: PUSH
36830: LD_INT 5
36832: PUSH
36833: LD_INT 7
36835: PUSH
36836: LD_INT 9
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: LIST
36843: IN
36844: PUSH
36845: LD_VAR 0 1
36849: PPUSH
36850: LD_INT 52
36852: PPUSH
36853: CALL_OW 321
36857: PUSH
36858: LD_INT 2
36860: EQUAL
36861: AND
36862: IFFALSE 36879
// bpoints := bpoints * 1.5 ;
36864: LD_ADDR_VAR 0 10
36868: PUSH
36869: LD_VAR 0 10
36873: PUSH
36874: LD_REAL  1.50000000000000E+0000
36877: MUL
36878: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36879: LD_VAR 0 1
36883: PPUSH
36884: LD_INT 66
36886: PPUSH
36887: CALL_OW 321
36891: PUSH
36892: LD_INT 2
36894: EQUAL
36895: IFFALSE 36912
// bpoints := bpoints * 1.1 ;
36897: LD_ADDR_VAR 0 10
36901: PUSH
36902: LD_VAR 0 10
36906: PUSH
36907: LD_REAL  1.10000000000000E+0000
36910: MUL
36911: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36912: LD_ADDR_VAR 0 10
36916: PUSH
36917: LD_VAR 0 10
36921: PUSH
36922: LD_VAR 0 6
36926: PPUSH
36927: LD_INT 1
36929: PPUSH
36930: CALL_OW 259
36934: PUSH
36935: LD_REAL  1.15000000000000E+0000
36938: MUL
36939: MUL
36940: ST_TO_ADDR
// end ; unit_vehicle :
36941: GO 37771
36943: LD_INT 2
36945: DOUBLE
36946: EQUAL
36947: IFTRUE 36951
36949: GO 37759
36951: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36952: LD_VAR 0 6
36956: PPUSH
36957: CALL_OW 264
36961: PUSH
36962: LD_INT 2
36964: PUSH
36965: LD_INT 42
36967: PUSH
36968: LD_INT 24
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: LIST
36975: IN
36976: IFFALSE 36997
// points := [ 25 , 5 , 3 ] ;
36978: LD_ADDR_VAR 0 9
36982: PUSH
36983: LD_INT 25
36985: PUSH
36986: LD_INT 5
36988: PUSH
36989: LD_INT 3
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: LIST
36996: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36997: LD_VAR 0 6
37001: PPUSH
37002: CALL_OW 264
37006: PUSH
37007: LD_INT 4
37009: PUSH
37010: LD_INT 43
37012: PUSH
37013: LD_INT 25
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: LIST
37020: IN
37021: IFFALSE 37042
// points := [ 40 , 15 , 5 ] ;
37023: LD_ADDR_VAR 0 9
37027: PUSH
37028: LD_INT 40
37030: PUSH
37031: LD_INT 15
37033: PUSH
37034: LD_INT 5
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: LIST
37041: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37042: LD_VAR 0 6
37046: PPUSH
37047: CALL_OW 264
37051: PUSH
37052: LD_INT 3
37054: PUSH
37055: LD_INT 23
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: IN
37062: IFFALSE 37083
// points := [ 7 , 25 , 8 ] ;
37064: LD_ADDR_VAR 0 9
37068: PUSH
37069: LD_INT 7
37071: PUSH
37072: LD_INT 25
37074: PUSH
37075: LD_INT 8
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: LIST
37082: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37083: LD_VAR 0 6
37087: PPUSH
37088: CALL_OW 264
37092: PUSH
37093: LD_INT 5
37095: PUSH
37096: LD_INT 27
37098: PUSH
37099: LD_INT 44
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: LIST
37106: IN
37107: IFFALSE 37128
// points := [ 14 , 50 , 16 ] ;
37109: LD_ADDR_VAR 0 9
37113: PUSH
37114: LD_INT 14
37116: PUSH
37117: LD_INT 50
37119: PUSH
37120: LD_INT 16
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: LIST
37127: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37128: LD_VAR 0 6
37132: PPUSH
37133: CALL_OW 264
37137: PUSH
37138: LD_INT 6
37140: PUSH
37141: LD_INT 46
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: IN
37148: IFFALSE 37169
// points := [ 32 , 120 , 70 ] ;
37150: LD_ADDR_VAR 0 9
37154: PUSH
37155: LD_INT 32
37157: PUSH
37158: LD_INT 120
37160: PUSH
37161: LD_INT 70
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: LIST
37168: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37169: LD_VAR 0 6
37173: PPUSH
37174: CALL_OW 264
37178: PUSH
37179: LD_INT 7
37181: PUSH
37182: LD_INT 28
37184: PUSH
37185: LD_INT 45
37187: PUSH
37188: LD_EXP 48
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: IN
37199: IFFALSE 37220
// points := [ 35 , 20 , 45 ] ;
37201: LD_ADDR_VAR 0 9
37205: PUSH
37206: LD_INT 35
37208: PUSH
37209: LD_INT 20
37211: PUSH
37212: LD_INT 45
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: LIST
37219: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37220: LD_VAR 0 6
37224: PPUSH
37225: CALL_OW 264
37229: PUSH
37230: LD_INT 47
37232: PUSH
37233: EMPTY
37234: LIST
37235: IN
37236: IFFALSE 37257
// points := [ 67 , 45 , 75 ] ;
37238: LD_ADDR_VAR 0 9
37242: PUSH
37243: LD_INT 67
37245: PUSH
37246: LD_INT 45
37248: PUSH
37249: LD_INT 75
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: LIST
37256: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37257: LD_VAR 0 6
37261: PPUSH
37262: CALL_OW 264
37266: PUSH
37267: LD_INT 26
37269: PUSH
37270: EMPTY
37271: LIST
37272: IN
37273: IFFALSE 37294
// points := [ 120 , 30 , 80 ] ;
37275: LD_ADDR_VAR 0 9
37279: PUSH
37280: LD_INT 120
37282: PUSH
37283: LD_INT 30
37285: PUSH
37286: LD_INT 80
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: LIST
37293: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37294: LD_VAR 0 6
37298: PPUSH
37299: CALL_OW 264
37303: PUSH
37304: LD_INT 22
37306: PUSH
37307: EMPTY
37308: LIST
37309: IN
37310: IFFALSE 37331
// points := [ 40 , 1 , 1 ] ;
37312: LD_ADDR_VAR 0 9
37316: PUSH
37317: LD_INT 40
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: LD_INT 1
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: LIST
37330: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37331: LD_VAR 0 6
37335: PPUSH
37336: CALL_OW 264
37340: PUSH
37341: LD_INT 29
37343: PUSH
37344: EMPTY
37345: LIST
37346: IN
37347: IFFALSE 37368
// points := [ 70 , 200 , 400 ] ;
37349: LD_ADDR_VAR 0 9
37353: PUSH
37354: LD_INT 70
37356: PUSH
37357: LD_INT 200
37359: PUSH
37360: LD_INT 400
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: LIST
37367: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37368: LD_VAR 0 6
37372: PPUSH
37373: CALL_OW 264
37377: PUSH
37378: LD_INT 14
37380: PUSH
37381: LD_INT 53
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: IN
37388: IFFALSE 37409
// points := [ 40 , 10 , 20 ] ;
37390: LD_ADDR_VAR 0 9
37394: PUSH
37395: LD_INT 40
37397: PUSH
37398: LD_INT 10
37400: PUSH
37401: LD_INT 20
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: LIST
37408: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37409: LD_VAR 0 6
37413: PPUSH
37414: CALL_OW 264
37418: PUSH
37419: LD_INT 9
37421: PUSH
37422: EMPTY
37423: LIST
37424: IN
37425: IFFALSE 37446
// points := [ 5 , 70 , 20 ] ;
37427: LD_ADDR_VAR 0 9
37431: PUSH
37432: LD_INT 5
37434: PUSH
37435: LD_INT 70
37437: PUSH
37438: LD_INT 20
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: LIST
37445: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37446: LD_VAR 0 6
37450: PPUSH
37451: CALL_OW 264
37455: PUSH
37456: LD_INT 10
37458: PUSH
37459: EMPTY
37460: LIST
37461: IN
37462: IFFALSE 37483
// points := [ 35 , 110 , 70 ] ;
37464: LD_ADDR_VAR 0 9
37468: PUSH
37469: LD_INT 35
37471: PUSH
37472: LD_INT 110
37474: PUSH
37475: LD_INT 70
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: LIST
37482: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37483: LD_VAR 0 6
37487: PPUSH
37488: CALL_OW 265
37492: PUSH
37493: LD_INT 25
37495: EQUAL
37496: IFFALSE 37517
// points := [ 80 , 65 , 100 ] ;
37498: LD_ADDR_VAR 0 9
37502: PUSH
37503: LD_INT 80
37505: PUSH
37506: LD_INT 65
37508: PUSH
37509: LD_INT 100
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: LIST
37516: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37517: LD_VAR 0 6
37521: PPUSH
37522: CALL_OW 263
37526: PUSH
37527: LD_INT 1
37529: EQUAL
37530: IFFALSE 37565
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37532: LD_ADDR_VAR 0 10
37536: PUSH
37537: LD_VAR 0 10
37541: PUSH
37542: LD_VAR 0 6
37546: PPUSH
37547: CALL_OW 311
37551: PPUSH
37552: LD_INT 3
37554: PPUSH
37555: CALL_OW 259
37559: PUSH
37560: LD_INT 4
37562: MUL
37563: MUL
37564: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37565: LD_VAR 0 6
37569: PPUSH
37570: CALL_OW 263
37574: PUSH
37575: LD_INT 2
37577: EQUAL
37578: IFFALSE 37629
// begin j := IsControledBy ( i ) ;
37580: LD_ADDR_VAR 0 7
37584: PUSH
37585: LD_VAR 0 6
37589: PPUSH
37590: CALL_OW 312
37594: ST_TO_ADDR
// if j then
37595: LD_VAR 0 7
37599: IFFALSE 37629
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37601: LD_ADDR_VAR 0 10
37605: PUSH
37606: LD_VAR 0 10
37610: PUSH
37611: LD_VAR 0 7
37615: PPUSH
37616: LD_INT 3
37618: PPUSH
37619: CALL_OW 259
37623: PUSH
37624: LD_INT 3
37626: MUL
37627: MUL
37628: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37629: LD_VAR 0 6
37633: PPUSH
37634: CALL_OW 264
37638: PUSH
37639: LD_INT 5
37641: PUSH
37642: LD_INT 6
37644: PUSH
37645: LD_INT 46
37647: PUSH
37648: LD_INT 44
37650: PUSH
37651: LD_INT 47
37653: PUSH
37654: LD_INT 45
37656: PUSH
37657: LD_INT 28
37659: PUSH
37660: LD_INT 7
37662: PUSH
37663: LD_INT 27
37665: PUSH
37666: LD_INT 29
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: IN
37681: PUSH
37682: LD_VAR 0 1
37686: PPUSH
37687: LD_INT 52
37689: PPUSH
37690: CALL_OW 321
37694: PUSH
37695: LD_INT 2
37697: EQUAL
37698: AND
37699: IFFALSE 37716
// bpoints := bpoints * 1.2 ;
37701: LD_ADDR_VAR 0 10
37705: PUSH
37706: LD_VAR 0 10
37710: PUSH
37711: LD_REAL  1.20000000000000E+0000
37714: MUL
37715: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37716: LD_VAR 0 6
37720: PPUSH
37721: CALL_OW 264
37725: PUSH
37726: LD_INT 6
37728: PUSH
37729: LD_INT 46
37731: PUSH
37732: LD_INT 47
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: LIST
37739: IN
37740: IFFALSE 37757
// bpoints := bpoints * 1.2 ;
37742: LD_ADDR_VAR 0 10
37746: PUSH
37747: LD_VAR 0 10
37751: PUSH
37752: LD_REAL  1.20000000000000E+0000
37755: MUL
37756: ST_TO_ADDR
// end ; unit_building :
37757: GO 37771
37759: LD_INT 3
37761: DOUBLE
37762: EQUAL
37763: IFTRUE 37767
37765: GO 37770
37767: POP
// ; end ;
37768: GO 37771
37770: POP
// for j = 1 to 3 do
37771: LD_ADDR_VAR 0 7
37775: PUSH
37776: DOUBLE
37777: LD_INT 1
37779: DEC
37780: ST_TO_ADDR
37781: LD_INT 3
37783: PUSH
37784: FOR_TO
37785: IFFALSE 37838
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37787: LD_ADDR_VAR 0 5
37791: PUSH
37792: LD_VAR 0 5
37796: PPUSH
37797: LD_VAR 0 7
37801: PPUSH
37802: LD_VAR 0 5
37806: PUSH
37807: LD_VAR 0 7
37811: ARRAY
37812: PUSH
37813: LD_VAR 0 9
37817: PUSH
37818: LD_VAR 0 7
37822: ARRAY
37823: PUSH
37824: LD_VAR 0 10
37828: MUL
37829: PLUS
37830: PPUSH
37831: CALL_OW 1
37835: ST_TO_ADDR
37836: GO 37784
37838: POP
37839: POP
// end ;
37840: GO 36317
37842: POP
37843: POP
// result := Replace ( result , 4 , tmp ) ;
37844: LD_ADDR_VAR 0 5
37848: PUSH
37849: LD_VAR 0 5
37853: PPUSH
37854: LD_INT 4
37856: PPUSH
37857: LD_VAR 0 8
37861: PPUSH
37862: CALL_OW 1
37866: ST_TO_ADDR
// end ;
37867: LD_VAR 0 5
37871: RET
// export function DangerAtRange ( unit , range ) ; begin
37872: LD_INT 0
37874: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37875: LD_ADDR_VAR 0 3
37879: PUSH
37880: LD_VAR 0 1
37884: PPUSH
37885: CALL_OW 255
37889: PPUSH
37890: LD_VAR 0 1
37894: PPUSH
37895: CALL_OW 250
37899: PPUSH
37900: LD_VAR 0 1
37904: PPUSH
37905: CALL_OW 251
37909: PPUSH
37910: LD_VAR 0 2
37914: PPUSH
37915: CALL 36169 0 4
37919: ST_TO_ADDR
// end ;
37920: LD_VAR 0 3
37924: RET
// export function DangerInArea ( side , area ) ; begin
37925: LD_INT 0
37927: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37928: LD_ADDR_VAR 0 3
37932: PUSH
37933: LD_VAR 0 2
37937: PPUSH
37938: LD_INT 81
37940: PUSH
37941: LD_VAR 0 1
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PPUSH
37950: CALL_OW 70
37954: ST_TO_ADDR
// end ;
37955: LD_VAR 0 3
37959: RET
// export function IsExtension ( b ) ; begin
37960: LD_INT 0
37962: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37963: LD_ADDR_VAR 0 2
37967: PUSH
37968: LD_VAR 0 1
37972: PUSH
37973: LD_INT 23
37975: PUSH
37976: LD_INT 20
37978: PUSH
37979: LD_INT 22
37981: PUSH
37982: LD_INT 17
37984: PUSH
37985: LD_INT 24
37987: PUSH
37988: LD_INT 21
37990: PUSH
37991: LD_INT 19
37993: PUSH
37994: LD_INT 16
37996: PUSH
37997: LD_INT 25
37999: PUSH
38000: LD_INT 18
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: IN
38015: ST_TO_ADDR
// end ;
38016: LD_VAR 0 2
38020: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38021: LD_INT 0
38023: PPUSH
38024: PPUSH
38025: PPUSH
// result := [ ] ;
38026: LD_ADDR_VAR 0 4
38030: PUSH
38031: EMPTY
38032: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38033: LD_ADDR_VAR 0 5
38037: PUSH
38038: LD_VAR 0 2
38042: PPUSH
38043: LD_INT 21
38045: PUSH
38046: LD_INT 3
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PPUSH
38053: CALL_OW 70
38057: ST_TO_ADDR
// if not tmp then
38058: LD_VAR 0 5
38062: NOT
38063: IFFALSE 38067
// exit ;
38065: GO 38131
// if checkLink then
38067: LD_VAR 0 3
38071: IFFALSE 38121
// begin for i in tmp do
38073: LD_ADDR_VAR 0 6
38077: PUSH
38078: LD_VAR 0 5
38082: PUSH
38083: FOR_IN
38084: IFFALSE 38119
// if GetBase ( i ) <> base then
38086: LD_VAR 0 6
38090: PPUSH
38091: CALL_OW 274
38095: PUSH
38096: LD_VAR 0 1
38100: NONEQUAL
38101: IFFALSE 38117
// ComLinkToBase ( base , i ) ;
38103: LD_VAR 0 1
38107: PPUSH
38108: LD_VAR 0 6
38112: PPUSH
38113: CALL_OW 169
38117: GO 38083
38119: POP
38120: POP
// end ; result := tmp ;
38121: LD_ADDR_VAR 0 4
38125: PUSH
38126: LD_VAR 0 5
38130: ST_TO_ADDR
// end ;
38131: LD_VAR 0 4
38135: RET
// export function ComComplete ( units , b ) ; var i ; begin
38136: LD_INT 0
38138: PPUSH
38139: PPUSH
// if not units then
38140: LD_VAR 0 1
38144: NOT
38145: IFFALSE 38149
// exit ;
38147: GO 38239
// for i in units do
38149: LD_ADDR_VAR 0 4
38153: PUSH
38154: LD_VAR 0 1
38158: PUSH
38159: FOR_IN
38160: IFFALSE 38237
// if BuildingStatus ( b ) = bs_build then
38162: LD_VAR 0 2
38166: PPUSH
38167: CALL_OW 461
38171: PUSH
38172: LD_INT 1
38174: EQUAL
38175: IFFALSE 38235
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38177: LD_VAR 0 4
38181: PPUSH
38182: LD_STRING h
38184: PUSH
38185: LD_VAR 0 2
38189: PPUSH
38190: CALL_OW 250
38194: PUSH
38195: LD_VAR 0 2
38199: PPUSH
38200: CALL_OW 251
38204: PUSH
38205: LD_VAR 0 2
38209: PUSH
38210: LD_INT 0
38212: PUSH
38213: LD_INT 0
38215: PUSH
38216: LD_INT 0
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: PUSH
38228: EMPTY
38229: LIST
38230: PPUSH
38231: CALL_OW 446
38235: GO 38159
38237: POP
38238: POP
// end ;
38239: LD_VAR 0 3
38243: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38244: LD_INT 0
38246: PPUSH
38247: PPUSH
38248: PPUSH
38249: PPUSH
38250: PPUSH
38251: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38252: LD_VAR 0 1
38256: NOT
38257: PUSH
38258: LD_VAR 0 1
38262: PPUSH
38263: CALL_OW 263
38267: PUSH
38268: LD_INT 2
38270: NONEQUAL
38271: OR
38272: IFFALSE 38276
// exit ;
38274: GO 38592
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38276: LD_ADDR_VAR 0 6
38280: PUSH
38281: LD_INT 22
38283: PUSH
38284: LD_VAR 0 1
38288: PPUSH
38289: CALL_OW 255
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 2
38300: PUSH
38301: LD_INT 30
38303: PUSH
38304: LD_INT 36
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 34
38313: PUSH
38314: LD_INT 31
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: LIST
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PPUSH
38330: CALL_OW 69
38334: ST_TO_ADDR
// if not tmp then
38335: LD_VAR 0 6
38339: NOT
38340: IFFALSE 38344
// exit ;
38342: GO 38592
// result := [ ] ;
38344: LD_ADDR_VAR 0 2
38348: PUSH
38349: EMPTY
38350: ST_TO_ADDR
// for i in tmp do
38351: LD_ADDR_VAR 0 3
38355: PUSH
38356: LD_VAR 0 6
38360: PUSH
38361: FOR_IN
38362: IFFALSE 38433
// begin t := UnitsInside ( i ) ;
38364: LD_ADDR_VAR 0 4
38368: PUSH
38369: LD_VAR 0 3
38373: PPUSH
38374: CALL_OW 313
38378: ST_TO_ADDR
// if t then
38379: LD_VAR 0 4
38383: IFFALSE 38431
// for j in t do
38385: LD_ADDR_VAR 0 7
38389: PUSH
38390: LD_VAR 0 4
38394: PUSH
38395: FOR_IN
38396: IFFALSE 38429
// result := Replace ( result , result + 1 , j ) ;
38398: LD_ADDR_VAR 0 2
38402: PUSH
38403: LD_VAR 0 2
38407: PPUSH
38408: LD_VAR 0 2
38412: PUSH
38413: LD_INT 1
38415: PLUS
38416: PPUSH
38417: LD_VAR 0 7
38421: PPUSH
38422: CALL_OW 1
38426: ST_TO_ADDR
38427: GO 38395
38429: POP
38430: POP
// end ;
38431: GO 38361
38433: POP
38434: POP
// if not result then
38435: LD_VAR 0 2
38439: NOT
38440: IFFALSE 38444
// exit ;
38442: GO 38592
// mech := result [ 1 ] ;
38444: LD_ADDR_VAR 0 5
38448: PUSH
38449: LD_VAR 0 2
38453: PUSH
38454: LD_INT 1
38456: ARRAY
38457: ST_TO_ADDR
// if result > 1 then
38458: LD_VAR 0 2
38462: PUSH
38463: LD_INT 1
38465: GREATER
38466: IFFALSE 38578
// begin for i = 2 to result do
38468: LD_ADDR_VAR 0 3
38472: PUSH
38473: DOUBLE
38474: LD_INT 2
38476: DEC
38477: ST_TO_ADDR
38478: LD_VAR 0 2
38482: PUSH
38483: FOR_TO
38484: IFFALSE 38576
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38486: LD_ADDR_VAR 0 4
38490: PUSH
38491: LD_VAR 0 2
38495: PUSH
38496: LD_VAR 0 3
38500: ARRAY
38501: PPUSH
38502: LD_INT 3
38504: PPUSH
38505: CALL_OW 259
38509: PUSH
38510: LD_VAR 0 2
38514: PUSH
38515: LD_VAR 0 3
38519: ARRAY
38520: PPUSH
38521: CALL_OW 432
38525: MINUS
38526: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38527: LD_VAR 0 4
38531: PUSH
38532: LD_VAR 0 5
38536: PPUSH
38537: LD_INT 3
38539: PPUSH
38540: CALL_OW 259
38544: PUSH
38545: LD_VAR 0 5
38549: PPUSH
38550: CALL_OW 432
38554: MINUS
38555: GREATEREQUAL
38556: IFFALSE 38574
// mech := result [ i ] ;
38558: LD_ADDR_VAR 0 5
38562: PUSH
38563: LD_VAR 0 2
38567: PUSH
38568: LD_VAR 0 3
38572: ARRAY
38573: ST_TO_ADDR
// end ;
38574: GO 38483
38576: POP
38577: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38578: LD_VAR 0 1
38582: PPUSH
38583: LD_VAR 0 5
38587: PPUSH
38588: CALL_OW 135
// end ;
38592: LD_VAR 0 2
38596: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38597: LD_INT 0
38599: PPUSH
38600: PPUSH
38601: PPUSH
38602: PPUSH
38603: PPUSH
38604: PPUSH
38605: PPUSH
38606: PPUSH
38607: PPUSH
38608: PPUSH
38609: PPUSH
38610: PPUSH
38611: PPUSH
// result := [ ] ;
38612: LD_ADDR_VAR 0 7
38616: PUSH
38617: EMPTY
38618: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38619: LD_VAR 0 1
38623: PPUSH
38624: CALL_OW 266
38628: PUSH
38629: LD_INT 0
38631: PUSH
38632: LD_INT 1
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: IN
38639: NOT
38640: IFFALSE 38644
// exit ;
38642: GO 40278
// if name then
38644: LD_VAR 0 3
38648: IFFALSE 38664
// SetBName ( base_dep , name ) ;
38650: LD_VAR 0 1
38654: PPUSH
38655: LD_VAR 0 3
38659: PPUSH
38660: CALL_OW 500
// base := GetBase ( base_dep ) ;
38664: LD_ADDR_VAR 0 15
38668: PUSH
38669: LD_VAR 0 1
38673: PPUSH
38674: CALL_OW 274
38678: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38679: LD_ADDR_VAR 0 16
38683: PUSH
38684: LD_VAR 0 1
38688: PPUSH
38689: CALL_OW 255
38693: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38694: LD_ADDR_VAR 0 17
38698: PUSH
38699: LD_VAR 0 1
38703: PPUSH
38704: CALL_OW 248
38708: ST_TO_ADDR
// if sources then
38709: LD_VAR 0 5
38713: IFFALSE 38760
// for i = 1 to 3 do
38715: LD_ADDR_VAR 0 8
38719: PUSH
38720: DOUBLE
38721: LD_INT 1
38723: DEC
38724: ST_TO_ADDR
38725: LD_INT 3
38727: PUSH
38728: FOR_TO
38729: IFFALSE 38758
// AddResourceType ( base , i , sources [ i ] ) ;
38731: LD_VAR 0 15
38735: PPUSH
38736: LD_VAR 0 8
38740: PPUSH
38741: LD_VAR 0 5
38745: PUSH
38746: LD_VAR 0 8
38750: ARRAY
38751: PPUSH
38752: CALL_OW 276
38756: GO 38728
38758: POP
38759: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38760: LD_ADDR_VAR 0 18
38764: PUSH
38765: LD_VAR 0 15
38769: PPUSH
38770: LD_VAR 0 2
38774: PPUSH
38775: LD_INT 1
38777: PPUSH
38778: CALL 38021 0 3
38782: ST_TO_ADDR
// InitHc ;
38783: CALL_OW 19
// InitUc ;
38787: CALL_OW 18
// uc_side := side ;
38791: LD_ADDR_OWVAR 20
38795: PUSH
38796: LD_VAR 0 16
38800: ST_TO_ADDR
// uc_nation := nation ;
38801: LD_ADDR_OWVAR 21
38805: PUSH
38806: LD_VAR 0 17
38810: ST_TO_ADDR
// if buildings then
38811: LD_VAR 0 18
38815: IFFALSE 40137
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38817: LD_ADDR_VAR 0 19
38821: PUSH
38822: LD_VAR 0 18
38826: PPUSH
38827: LD_INT 2
38829: PUSH
38830: LD_INT 30
38832: PUSH
38833: LD_INT 29
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 30
38842: PUSH
38843: LD_INT 30
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: LIST
38854: PPUSH
38855: CALL_OW 72
38859: ST_TO_ADDR
// if tmp then
38860: LD_VAR 0 19
38864: IFFALSE 38912
// for i in tmp do
38866: LD_ADDR_VAR 0 8
38870: PUSH
38871: LD_VAR 0 19
38875: PUSH
38876: FOR_IN
38877: IFFALSE 38910
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38879: LD_VAR 0 8
38883: PPUSH
38884: CALL_OW 250
38888: PPUSH
38889: LD_VAR 0 8
38893: PPUSH
38894: CALL_OW 251
38898: PPUSH
38899: LD_VAR 0 16
38903: PPUSH
38904: CALL_OW 441
38908: GO 38876
38910: POP
38911: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38912: LD_VAR 0 18
38916: PPUSH
38917: LD_INT 2
38919: PUSH
38920: LD_INT 30
38922: PUSH
38923: LD_INT 32
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 30
38932: PUSH
38933: LD_INT 33
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: LIST
38944: PPUSH
38945: CALL_OW 72
38949: IFFALSE 39037
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38951: LD_ADDR_VAR 0 8
38955: PUSH
38956: LD_VAR 0 18
38960: PPUSH
38961: LD_INT 2
38963: PUSH
38964: LD_INT 30
38966: PUSH
38967: LD_INT 32
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 30
38976: PUSH
38977: LD_INT 33
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: LIST
38988: PPUSH
38989: CALL_OW 72
38993: PUSH
38994: FOR_IN
38995: IFFALSE 39035
// begin if not GetBWeapon ( i ) then
38997: LD_VAR 0 8
39001: PPUSH
39002: CALL_OW 269
39006: NOT
39007: IFFALSE 39033
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39009: LD_VAR 0 8
39013: PPUSH
39014: LD_VAR 0 8
39018: PPUSH
39019: LD_VAR 0 2
39023: PPUSH
39024: CALL 40283 0 2
39028: PPUSH
39029: CALL_OW 431
// end ;
39033: GO 38994
39035: POP
39036: POP
// end ; for i = 1 to personel do
39037: LD_ADDR_VAR 0 8
39041: PUSH
39042: DOUBLE
39043: LD_INT 1
39045: DEC
39046: ST_TO_ADDR
39047: LD_VAR 0 6
39051: PUSH
39052: FOR_TO
39053: IFFALSE 40117
// begin if i > 4 then
39055: LD_VAR 0 8
39059: PUSH
39060: LD_INT 4
39062: GREATER
39063: IFFALSE 39067
// break ;
39065: GO 40117
// case i of 1 :
39067: LD_VAR 0 8
39071: PUSH
39072: LD_INT 1
39074: DOUBLE
39075: EQUAL
39076: IFTRUE 39080
39078: GO 39160
39080: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39081: LD_ADDR_VAR 0 12
39085: PUSH
39086: LD_VAR 0 18
39090: PPUSH
39091: LD_INT 22
39093: PUSH
39094: LD_VAR 0 16
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 58
39105: PUSH
39106: EMPTY
39107: LIST
39108: PUSH
39109: LD_INT 2
39111: PUSH
39112: LD_INT 30
39114: PUSH
39115: LD_INT 32
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 30
39124: PUSH
39125: LD_INT 4
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 30
39134: PUSH
39135: LD_INT 5
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: LIST
39152: PPUSH
39153: CALL_OW 72
39157: ST_TO_ADDR
39158: GO 39382
39160: LD_INT 2
39162: DOUBLE
39163: EQUAL
39164: IFTRUE 39168
39166: GO 39230
39168: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39169: LD_ADDR_VAR 0 12
39173: PUSH
39174: LD_VAR 0 18
39178: PPUSH
39179: LD_INT 22
39181: PUSH
39182: LD_VAR 0 16
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 2
39193: PUSH
39194: LD_INT 30
39196: PUSH
39197: LD_INT 0
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 30
39206: PUSH
39207: LD_INT 1
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: LIST
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PPUSH
39223: CALL_OW 72
39227: ST_TO_ADDR
39228: GO 39382
39230: LD_INT 3
39232: DOUBLE
39233: EQUAL
39234: IFTRUE 39238
39236: GO 39300
39238: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39239: LD_ADDR_VAR 0 12
39243: PUSH
39244: LD_VAR 0 18
39248: PPUSH
39249: LD_INT 22
39251: PUSH
39252: LD_VAR 0 16
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 2
39263: PUSH
39264: LD_INT 30
39266: PUSH
39267: LD_INT 2
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 30
39276: PUSH
39277: LD_INT 3
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: LIST
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PPUSH
39293: CALL_OW 72
39297: ST_TO_ADDR
39298: GO 39382
39300: LD_INT 4
39302: DOUBLE
39303: EQUAL
39304: IFTRUE 39308
39306: GO 39381
39308: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39309: LD_ADDR_VAR 0 12
39313: PUSH
39314: LD_VAR 0 18
39318: PPUSH
39319: LD_INT 22
39321: PUSH
39322: LD_VAR 0 16
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 2
39333: PUSH
39334: LD_INT 30
39336: PUSH
39337: LD_INT 6
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 30
39346: PUSH
39347: LD_INT 7
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 30
39356: PUSH
39357: LD_INT 8
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PPUSH
39374: CALL_OW 72
39378: ST_TO_ADDR
39379: GO 39382
39381: POP
// if i = 1 then
39382: LD_VAR 0 8
39386: PUSH
39387: LD_INT 1
39389: EQUAL
39390: IFFALSE 39501
// begin tmp := [ ] ;
39392: LD_ADDR_VAR 0 19
39396: PUSH
39397: EMPTY
39398: ST_TO_ADDR
// for j in f do
39399: LD_ADDR_VAR 0 9
39403: PUSH
39404: LD_VAR 0 12
39408: PUSH
39409: FOR_IN
39410: IFFALSE 39483
// if GetBType ( j ) = b_bunker then
39412: LD_VAR 0 9
39416: PPUSH
39417: CALL_OW 266
39421: PUSH
39422: LD_INT 32
39424: EQUAL
39425: IFFALSE 39452
// tmp := Insert ( tmp , 1 , j ) else
39427: LD_ADDR_VAR 0 19
39431: PUSH
39432: LD_VAR 0 19
39436: PPUSH
39437: LD_INT 1
39439: PPUSH
39440: LD_VAR 0 9
39444: PPUSH
39445: CALL_OW 2
39449: ST_TO_ADDR
39450: GO 39481
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39452: LD_ADDR_VAR 0 19
39456: PUSH
39457: LD_VAR 0 19
39461: PPUSH
39462: LD_VAR 0 19
39466: PUSH
39467: LD_INT 1
39469: PLUS
39470: PPUSH
39471: LD_VAR 0 9
39475: PPUSH
39476: CALL_OW 2
39480: ST_TO_ADDR
39481: GO 39409
39483: POP
39484: POP
// if tmp then
39485: LD_VAR 0 19
39489: IFFALSE 39501
// f := tmp ;
39491: LD_ADDR_VAR 0 12
39495: PUSH
39496: LD_VAR 0 19
39500: ST_TO_ADDR
// end ; x := personel [ i ] ;
39501: LD_ADDR_VAR 0 13
39505: PUSH
39506: LD_VAR 0 6
39510: PUSH
39511: LD_VAR 0 8
39515: ARRAY
39516: ST_TO_ADDR
// if x = - 1 then
39517: LD_VAR 0 13
39521: PUSH
39522: LD_INT 1
39524: NEG
39525: EQUAL
39526: IFFALSE 39735
// begin for j in f do
39528: LD_ADDR_VAR 0 9
39532: PUSH
39533: LD_VAR 0 12
39537: PUSH
39538: FOR_IN
39539: IFFALSE 39731
// repeat InitHc ;
39541: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39545: LD_VAR 0 9
39549: PPUSH
39550: CALL_OW 266
39554: PUSH
39555: LD_INT 5
39557: EQUAL
39558: IFFALSE 39628
// begin if UnitsInside ( j ) < 3 then
39560: LD_VAR 0 9
39564: PPUSH
39565: CALL_OW 313
39569: PUSH
39570: LD_INT 3
39572: LESS
39573: IFFALSE 39609
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39575: LD_INT 0
39577: PPUSH
39578: LD_INT 5
39580: PUSH
39581: LD_INT 8
39583: PUSH
39584: LD_INT 9
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: LIST
39591: PUSH
39592: LD_VAR 0 17
39596: ARRAY
39597: PPUSH
39598: LD_VAR 0 4
39602: PPUSH
39603: CALL_OW 380
39607: GO 39626
// PrepareHuman ( false , i , skill ) ;
39609: LD_INT 0
39611: PPUSH
39612: LD_VAR 0 8
39616: PPUSH
39617: LD_VAR 0 4
39621: PPUSH
39622: CALL_OW 380
// end else
39626: GO 39645
// PrepareHuman ( false , i , skill ) ;
39628: LD_INT 0
39630: PPUSH
39631: LD_VAR 0 8
39635: PPUSH
39636: LD_VAR 0 4
39640: PPUSH
39641: CALL_OW 380
// un := CreateHuman ;
39645: LD_ADDR_VAR 0 14
39649: PUSH
39650: CALL_OW 44
39654: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39655: LD_ADDR_VAR 0 7
39659: PUSH
39660: LD_VAR 0 7
39664: PPUSH
39665: LD_INT 1
39667: PPUSH
39668: LD_VAR 0 14
39672: PPUSH
39673: CALL_OW 2
39677: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39678: LD_VAR 0 14
39682: PPUSH
39683: LD_VAR 0 9
39687: PPUSH
39688: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39692: LD_VAR 0 9
39696: PPUSH
39697: CALL_OW 313
39701: PUSH
39702: LD_INT 6
39704: EQUAL
39705: PUSH
39706: LD_VAR 0 9
39710: PPUSH
39711: CALL_OW 266
39715: PUSH
39716: LD_INT 32
39718: PUSH
39719: LD_INT 31
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: IN
39726: OR
39727: IFFALSE 39541
39729: GO 39538
39731: POP
39732: POP
// end else
39733: GO 40115
// for j = 1 to x do
39735: LD_ADDR_VAR 0 9
39739: PUSH
39740: DOUBLE
39741: LD_INT 1
39743: DEC
39744: ST_TO_ADDR
39745: LD_VAR 0 13
39749: PUSH
39750: FOR_TO
39751: IFFALSE 40113
// begin InitHc ;
39753: CALL_OW 19
// if not f then
39757: LD_VAR 0 12
39761: NOT
39762: IFFALSE 39851
// begin PrepareHuman ( false , i , skill ) ;
39764: LD_INT 0
39766: PPUSH
39767: LD_VAR 0 8
39771: PPUSH
39772: LD_VAR 0 4
39776: PPUSH
39777: CALL_OW 380
// un := CreateHuman ;
39781: LD_ADDR_VAR 0 14
39785: PUSH
39786: CALL_OW 44
39790: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39791: LD_ADDR_VAR 0 7
39795: PUSH
39796: LD_VAR 0 7
39800: PPUSH
39801: LD_INT 1
39803: PPUSH
39804: LD_VAR 0 14
39808: PPUSH
39809: CALL_OW 2
39813: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39814: LD_VAR 0 14
39818: PPUSH
39819: LD_VAR 0 1
39823: PPUSH
39824: CALL_OW 250
39828: PPUSH
39829: LD_VAR 0 1
39833: PPUSH
39834: CALL_OW 251
39838: PPUSH
39839: LD_INT 10
39841: PPUSH
39842: LD_INT 0
39844: PPUSH
39845: CALL_OW 50
// continue ;
39849: GO 39750
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39851: LD_VAR 0 12
39855: PUSH
39856: LD_INT 1
39858: ARRAY
39859: PPUSH
39860: CALL_OW 313
39864: PUSH
39865: LD_VAR 0 12
39869: PUSH
39870: LD_INT 1
39872: ARRAY
39873: PPUSH
39874: CALL_OW 266
39878: PUSH
39879: LD_INT 32
39881: PUSH
39882: LD_INT 31
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: IN
39889: AND
39890: PUSH
39891: LD_VAR 0 12
39895: PUSH
39896: LD_INT 1
39898: ARRAY
39899: PPUSH
39900: CALL_OW 313
39904: PUSH
39905: LD_INT 6
39907: EQUAL
39908: OR
39909: IFFALSE 39929
// f := Delete ( f , 1 ) ;
39911: LD_ADDR_VAR 0 12
39915: PUSH
39916: LD_VAR 0 12
39920: PPUSH
39921: LD_INT 1
39923: PPUSH
39924: CALL_OW 3
39928: ST_TO_ADDR
// if not f then
39929: LD_VAR 0 12
39933: NOT
39934: IFFALSE 39952
// begin x := x + 2 ;
39936: LD_ADDR_VAR 0 13
39940: PUSH
39941: LD_VAR 0 13
39945: PUSH
39946: LD_INT 2
39948: PLUS
39949: ST_TO_ADDR
// continue ;
39950: GO 39750
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39952: LD_VAR 0 12
39956: PUSH
39957: LD_INT 1
39959: ARRAY
39960: PPUSH
39961: CALL_OW 266
39965: PUSH
39966: LD_INT 5
39968: EQUAL
39969: IFFALSE 40043
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39971: LD_VAR 0 12
39975: PUSH
39976: LD_INT 1
39978: ARRAY
39979: PPUSH
39980: CALL_OW 313
39984: PUSH
39985: LD_INT 3
39987: LESS
39988: IFFALSE 40024
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39990: LD_INT 0
39992: PPUSH
39993: LD_INT 5
39995: PUSH
39996: LD_INT 8
39998: PUSH
39999: LD_INT 9
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: LIST
40006: PUSH
40007: LD_VAR 0 17
40011: ARRAY
40012: PPUSH
40013: LD_VAR 0 4
40017: PPUSH
40018: CALL_OW 380
40022: GO 40041
// PrepareHuman ( false , i , skill ) ;
40024: LD_INT 0
40026: PPUSH
40027: LD_VAR 0 8
40031: PPUSH
40032: LD_VAR 0 4
40036: PPUSH
40037: CALL_OW 380
// end else
40041: GO 40060
// PrepareHuman ( false , i , skill ) ;
40043: LD_INT 0
40045: PPUSH
40046: LD_VAR 0 8
40050: PPUSH
40051: LD_VAR 0 4
40055: PPUSH
40056: CALL_OW 380
// un := CreateHuman ;
40060: LD_ADDR_VAR 0 14
40064: PUSH
40065: CALL_OW 44
40069: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40070: LD_ADDR_VAR 0 7
40074: PUSH
40075: LD_VAR 0 7
40079: PPUSH
40080: LD_INT 1
40082: PPUSH
40083: LD_VAR 0 14
40087: PPUSH
40088: CALL_OW 2
40092: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40093: LD_VAR 0 14
40097: PPUSH
40098: LD_VAR 0 12
40102: PUSH
40103: LD_INT 1
40105: ARRAY
40106: PPUSH
40107: CALL_OW 52
// end ;
40111: GO 39750
40113: POP
40114: POP
// end ;
40115: GO 39052
40117: POP
40118: POP
// result := result ^ buildings ;
40119: LD_ADDR_VAR 0 7
40123: PUSH
40124: LD_VAR 0 7
40128: PUSH
40129: LD_VAR 0 18
40133: ADD
40134: ST_TO_ADDR
// end else
40135: GO 40278
// begin for i = 1 to personel do
40137: LD_ADDR_VAR 0 8
40141: PUSH
40142: DOUBLE
40143: LD_INT 1
40145: DEC
40146: ST_TO_ADDR
40147: LD_VAR 0 6
40151: PUSH
40152: FOR_TO
40153: IFFALSE 40276
// begin if i > 4 then
40155: LD_VAR 0 8
40159: PUSH
40160: LD_INT 4
40162: GREATER
40163: IFFALSE 40167
// break ;
40165: GO 40276
// x := personel [ i ] ;
40167: LD_ADDR_VAR 0 13
40171: PUSH
40172: LD_VAR 0 6
40176: PUSH
40177: LD_VAR 0 8
40181: ARRAY
40182: ST_TO_ADDR
// if x = - 1 then
40183: LD_VAR 0 13
40187: PUSH
40188: LD_INT 1
40190: NEG
40191: EQUAL
40192: IFFALSE 40196
// continue ;
40194: GO 40152
// PrepareHuman ( false , i , skill ) ;
40196: LD_INT 0
40198: PPUSH
40199: LD_VAR 0 8
40203: PPUSH
40204: LD_VAR 0 4
40208: PPUSH
40209: CALL_OW 380
// un := CreateHuman ;
40213: LD_ADDR_VAR 0 14
40217: PUSH
40218: CALL_OW 44
40222: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40223: LD_VAR 0 14
40227: PPUSH
40228: LD_VAR 0 1
40232: PPUSH
40233: CALL_OW 250
40237: PPUSH
40238: LD_VAR 0 1
40242: PPUSH
40243: CALL_OW 251
40247: PPUSH
40248: LD_INT 10
40250: PPUSH
40251: LD_INT 0
40253: PPUSH
40254: CALL_OW 50
// result := result ^ un ;
40258: LD_ADDR_VAR 0 7
40262: PUSH
40263: LD_VAR 0 7
40267: PUSH
40268: LD_VAR 0 14
40272: ADD
40273: ST_TO_ADDR
// end ;
40274: GO 40152
40276: POP
40277: POP
// end ; end ;
40278: LD_VAR 0 7
40282: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40283: LD_INT 0
40285: PPUSH
40286: PPUSH
40287: PPUSH
40288: PPUSH
40289: PPUSH
40290: PPUSH
40291: PPUSH
40292: PPUSH
40293: PPUSH
40294: PPUSH
40295: PPUSH
40296: PPUSH
40297: PPUSH
40298: PPUSH
40299: PPUSH
40300: PPUSH
// result := false ;
40301: LD_ADDR_VAR 0 3
40305: PUSH
40306: LD_INT 0
40308: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40309: LD_VAR 0 1
40313: NOT
40314: PUSH
40315: LD_VAR 0 1
40319: PPUSH
40320: CALL_OW 266
40324: PUSH
40325: LD_INT 32
40327: PUSH
40328: LD_INT 33
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: IN
40335: NOT
40336: OR
40337: IFFALSE 40341
// exit ;
40339: GO 41450
// nat := GetNation ( tower ) ;
40341: LD_ADDR_VAR 0 12
40345: PUSH
40346: LD_VAR 0 1
40350: PPUSH
40351: CALL_OW 248
40355: ST_TO_ADDR
// side := GetSide ( tower ) ;
40356: LD_ADDR_VAR 0 16
40360: PUSH
40361: LD_VAR 0 1
40365: PPUSH
40366: CALL_OW 255
40370: ST_TO_ADDR
// x := GetX ( tower ) ;
40371: LD_ADDR_VAR 0 10
40375: PUSH
40376: LD_VAR 0 1
40380: PPUSH
40381: CALL_OW 250
40385: ST_TO_ADDR
// y := GetY ( tower ) ;
40386: LD_ADDR_VAR 0 11
40390: PUSH
40391: LD_VAR 0 1
40395: PPUSH
40396: CALL_OW 251
40400: ST_TO_ADDR
// if not x or not y then
40401: LD_VAR 0 10
40405: NOT
40406: PUSH
40407: LD_VAR 0 11
40411: NOT
40412: OR
40413: IFFALSE 40417
// exit ;
40415: GO 41450
// weapon := 0 ;
40417: LD_ADDR_VAR 0 18
40421: PUSH
40422: LD_INT 0
40424: ST_TO_ADDR
// fac_list := [ ] ;
40425: LD_ADDR_VAR 0 17
40429: PUSH
40430: EMPTY
40431: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40432: LD_ADDR_VAR 0 6
40436: PUSH
40437: LD_VAR 0 1
40441: PPUSH
40442: CALL_OW 274
40446: PPUSH
40447: LD_VAR 0 2
40451: PPUSH
40452: LD_INT 0
40454: PPUSH
40455: CALL 38021 0 3
40459: PPUSH
40460: LD_INT 30
40462: PUSH
40463: LD_INT 3
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PPUSH
40470: CALL_OW 72
40474: ST_TO_ADDR
// if not factories then
40475: LD_VAR 0 6
40479: NOT
40480: IFFALSE 40484
// exit ;
40482: GO 41450
// for i in factories do
40484: LD_ADDR_VAR 0 8
40488: PUSH
40489: LD_VAR 0 6
40493: PUSH
40494: FOR_IN
40495: IFFALSE 40520
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40497: LD_ADDR_VAR 0 17
40501: PUSH
40502: LD_VAR 0 17
40506: PUSH
40507: LD_VAR 0 8
40511: PPUSH
40512: CALL_OW 478
40516: UNION
40517: ST_TO_ADDR
40518: GO 40494
40520: POP
40521: POP
// if not fac_list then
40522: LD_VAR 0 17
40526: NOT
40527: IFFALSE 40531
// exit ;
40529: GO 41450
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40531: LD_ADDR_VAR 0 5
40535: PUSH
40536: LD_INT 4
40538: PUSH
40539: LD_INT 5
40541: PUSH
40542: LD_INT 9
40544: PUSH
40545: LD_INT 10
40547: PUSH
40548: LD_INT 6
40550: PUSH
40551: LD_INT 7
40553: PUSH
40554: LD_INT 11
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 27
40568: PUSH
40569: LD_INT 28
40571: PUSH
40572: LD_INT 26
40574: PUSH
40575: LD_INT 30
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 43
40586: PUSH
40587: LD_INT 44
40589: PUSH
40590: LD_INT 46
40592: PUSH
40593: LD_INT 45
40595: PUSH
40596: LD_INT 47
40598: PUSH
40599: LD_INT 49
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: LIST
40614: PUSH
40615: LD_VAR 0 12
40619: ARRAY
40620: ST_TO_ADDR
// list := list isect fac_list ;
40621: LD_ADDR_VAR 0 5
40625: PUSH
40626: LD_VAR 0 5
40630: PUSH
40631: LD_VAR 0 17
40635: ISECT
40636: ST_TO_ADDR
// if not list then
40637: LD_VAR 0 5
40641: NOT
40642: IFFALSE 40646
// exit ;
40644: GO 41450
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40646: LD_VAR 0 12
40650: PUSH
40651: LD_INT 3
40653: EQUAL
40654: PUSH
40655: LD_INT 49
40657: PUSH
40658: LD_VAR 0 5
40662: IN
40663: AND
40664: PUSH
40665: LD_INT 31
40667: PPUSH
40668: LD_VAR 0 16
40672: PPUSH
40673: CALL_OW 321
40677: PUSH
40678: LD_INT 2
40680: EQUAL
40681: AND
40682: IFFALSE 40742
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40684: LD_INT 22
40686: PUSH
40687: LD_VAR 0 16
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 35
40698: PUSH
40699: LD_INT 49
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 91
40708: PUSH
40709: LD_VAR 0 1
40713: PUSH
40714: LD_INT 10
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: LIST
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: LIST
40726: PPUSH
40727: CALL_OW 69
40731: NOT
40732: IFFALSE 40742
// weapon := ru_time_lapser ;
40734: LD_ADDR_VAR 0 18
40738: PUSH
40739: LD_INT 49
40741: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40742: LD_VAR 0 12
40746: PUSH
40747: LD_INT 1
40749: PUSH
40750: LD_INT 2
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: IN
40757: PUSH
40758: LD_INT 11
40760: PUSH
40761: LD_VAR 0 5
40765: IN
40766: PUSH
40767: LD_INT 30
40769: PUSH
40770: LD_VAR 0 5
40774: IN
40775: OR
40776: AND
40777: PUSH
40778: LD_INT 6
40780: PPUSH
40781: LD_VAR 0 16
40785: PPUSH
40786: CALL_OW 321
40790: PUSH
40791: LD_INT 2
40793: EQUAL
40794: AND
40795: IFFALSE 40960
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40797: LD_INT 22
40799: PUSH
40800: LD_VAR 0 16
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 2
40811: PUSH
40812: LD_INT 35
40814: PUSH
40815: LD_INT 11
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 35
40824: PUSH
40825: LD_INT 30
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 91
40839: PUSH
40840: LD_VAR 0 1
40844: PUSH
40845: LD_INT 18
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: LIST
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: LIST
40857: PPUSH
40858: CALL_OW 69
40862: NOT
40863: PUSH
40864: LD_INT 22
40866: PUSH
40867: LD_VAR 0 16
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 2
40878: PUSH
40879: LD_INT 30
40881: PUSH
40882: LD_INT 32
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 30
40891: PUSH
40892: LD_INT 33
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 91
40906: PUSH
40907: LD_VAR 0 1
40911: PUSH
40912: LD_INT 12
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: LIST
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: LIST
40924: PUSH
40925: EMPTY
40926: LIST
40927: PPUSH
40928: CALL_OW 69
40932: PUSH
40933: LD_INT 2
40935: GREATER
40936: AND
40937: IFFALSE 40960
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40939: LD_ADDR_VAR 0 18
40943: PUSH
40944: LD_INT 11
40946: PUSH
40947: LD_INT 30
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_VAR 0 12
40958: ARRAY
40959: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40960: LD_VAR 0 18
40964: NOT
40965: PUSH
40966: LD_INT 40
40968: PPUSH
40969: LD_VAR 0 16
40973: PPUSH
40974: CALL_OW 321
40978: PUSH
40979: LD_INT 2
40981: EQUAL
40982: AND
40983: PUSH
40984: LD_INT 7
40986: PUSH
40987: LD_VAR 0 5
40991: IN
40992: PUSH
40993: LD_INT 28
40995: PUSH
40996: LD_VAR 0 5
41000: IN
41001: OR
41002: PUSH
41003: LD_INT 45
41005: PUSH
41006: LD_VAR 0 5
41010: IN
41011: OR
41012: AND
41013: IFFALSE 41267
// begin hex := GetHexInfo ( x , y ) ;
41015: LD_ADDR_VAR 0 4
41019: PUSH
41020: LD_VAR 0 10
41024: PPUSH
41025: LD_VAR 0 11
41029: PPUSH
41030: CALL_OW 546
41034: ST_TO_ADDR
// if hex [ 1 ] then
41035: LD_VAR 0 4
41039: PUSH
41040: LD_INT 1
41042: ARRAY
41043: IFFALSE 41047
// exit ;
41045: GO 41450
// height := hex [ 2 ] ;
41047: LD_ADDR_VAR 0 15
41051: PUSH
41052: LD_VAR 0 4
41056: PUSH
41057: LD_INT 2
41059: ARRAY
41060: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41061: LD_ADDR_VAR 0 14
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: LD_INT 2
41071: PUSH
41072: LD_INT 3
41074: PUSH
41075: LD_INT 5
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: ST_TO_ADDR
// for i in tmp do
41084: LD_ADDR_VAR 0 8
41088: PUSH
41089: LD_VAR 0 14
41093: PUSH
41094: FOR_IN
41095: IFFALSE 41265
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41097: LD_ADDR_VAR 0 9
41101: PUSH
41102: LD_VAR 0 10
41106: PPUSH
41107: LD_VAR 0 8
41111: PPUSH
41112: LD_INT 5
41114: PPUSH
41115: CALL_OW 272
41119: PUSH
41120: LD_VAR 0 11
41124: PPUSH
41125: LD_VAR 0 8
41129: PPUSH
41130: LD_INT 5
41132: PPUSH
41133: CALL_OW 273
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41142: LD_VAR 0 9
41146: PUSH
41147: LD_INT 1
41149: ARRAY
41150: PPUSH
41151: LD_VAR 0 9
41155: PUSH
41156: LD_INT 2
41158: ARRAY
41159: PPUSH
41160: CALL_OW 488
41164: IFFALSE 41263
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41166: LD_ADDR_VAR 0 4
41170: PUSH
41171: LD_VAR 0 9
41175: PUSH
41176: LD_INT 1
41178: ARRAY
41179: PPUSH
41180: LD_VAR 0 9
41184: PUSH
41185: LD_INT 2
41187: ARRAY
41188: PPUSH
41189: CALL_OW 546
41193: ST_TO_ADDR
// if hex [ 1 ] then
41194: LD_VAR 0 4
41198: PUSH
41199: LD_INT 1
41201: ARRAY
41202: IFFALSE 41206
// continue ;
41204: GO 41094
// h := hex [ 2 ] ;
41206: LD_ADDR_VAR 0 13
41210: PUSH
41211: LD_VAR 0 4
41215: PUSH
41216: LD_INT 2
41218: ARRAY
41219: ST_TO_ADDR
// if h + 7 < height then
41220: LD_VAR 0 13
41224: PUSH
41225: LD_INT 7
41227: PLUS
41228: PUSH
41229: LD_VAR 0 15
41233: LESS
41234: IFFALSE 41263
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41236: LD_ADDR_VAR 0 18
41240: PUSH
41241: LD_INT 7
41243: PUSH
41244: LD_INT 28
41246: PUSH
41247: LD_INT 45
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: LIST
41254: PUSH
41255: LD_VAR 0 12
41259: ARRAY
41260: ST_TO_ADDR
// break ;
41261: GO 41265
// end ; end ; end ;
41263: GO 41094
41265: POP
41266: POP
// end ; if not weapon then
41267: LD_VAR 0 18
41271: NOT
41272: IFFALSE 41332
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41274: LD_ADDR_VAR 0 5
41278: PUSH
41279: LD_VAR 0 5
41283: PUSH
41284: LD_INT 11
41286: PUSH
41287: LD_INT 30
41289: PUSH
41290: LD_INT 49
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: LIST
41297: DIFF
41298: ST_TO_ADDR
// if not list then
41299: LD_VAR 0 5
41303: NOT
41304: IFFALSE 41308
// exit ;
41306: GO 41450
// weapon := list [ rand ( 1 , list ) ] ;
41308: LD_ADDR_VAR 0 18
41312: PUSH
41313: LD_VAR 0 5
41317: PUSH
41318: LD_INT 1
41320: PPUSH
41321: LD_VAR 0 5
41325: PPUSH
41326: CALL_OW 12
41330: ARRAY
41331: ST_TO_ADDR
// end ; if weapon then
41332: LD_VAR 0 18
41336: IFFALSE 41450
// begin tmp := CostOfWeapon ( weapon ) ;
41338: LD_ADDR_VAR 0 14
41342: PUSH
41343: LD_VAR 0 18
41347: PPUSH
41348: CALL_OW 451
41352: ST_TO_ADDR
// j := GetBase ( tower ) ;
41353: LD_ADDR_VAR 0 9
41357: PUSH
41358: LD_VAR 0 1
41362: PPUSH
41363: CALL_OW 274
41367: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41368: LD_VAR 0 9
41372: PPUSH
41373: LD_INT 1
41375: PPUSH
41376: CALL_OW 275
41380: PUSH
41381: LD_VAR 0 14
41385: PUSH
41386: LD_INT 1
41388: ARRAY
41389: GREATEREQUAL
41390: PUSH
41391: LD_VAR 0 9
41395: PPUSH
41396: LD_INT 2
41398: PPUSH
41399: CALL_OW 275
41403: PUSH
41404: LD_VAR 0 14
41408: PUSH
41409: LD_INT 2
41411: ARRAY
41412: GREATEREQUAL
41413: AND
41414: PUSH
41415: LD_VAR 0 9
41419: PPUSH
41420: LD_INT 3
41422: PPUSH
41423: CALL_OW 275
41427: PUSH
41428: LD_VAR 0 14
41432: PUSH
41433: LD_INT 3
41435: ARRAY
41436: GREATEREQUAL
41437: AND
41438: IFFALSE 41450
// result := weapon ;
41440: LD_ADDR_VAR 0 3
41444: PUSH
41445: LD_VAR 0 18
41449: ST_TO_ADDR
// end ; end ;
41450: LD_VAR 0 3
41454: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41455: LD_INT 0
41457: PPUSH
41458: PPUSH
// result := true ;
41459: LD_ADDR_VAR 0 3
41463: PUSH
41464: LD_INT 1
41466: ST_TO_ADDR
// if array1 = array2 then
41467: LD_VAR 0 1
41471: PUSH
41472: LD_VAR 0 2
41476: EQUAL
41477: IFFALSE 41537
// begin for i = 1 to array1 do
41479: LD_ADDR_VAR 0 4
41483: PUSH
41484: DOUBLE
41485: LD_INT 1
41487: DEC
41488: ST_TO_ADDR
41489: LD_VAR 0 1
41493: PUSH
41494: FOR_TO
41495: IFFALSE 41533
// if array1 [ i ] <> array2 [ i ] then
41497: LD_VAR 0 1
41501: PUSH
41502: LD_VAR 0 4
41506: ARRAY
41507: PUSH
41508: LD_VAR 0 2
41512: PUSH
41513: LD_VAR 0 4
41517: ARRAY
41518: NONEQUAL
41519: IFFALSE 41531
// begin result := false ;
41521: LD_ADDR_VAR 0 3
41525: PUSH
41526: LD_INT 0
41528: ST_TO_ADDR
// break ;
41529: GO 41533
// end ;
41531: GO 41494
41533: POP
41534: POP
// end else
41535: GO 41545
// result := false ;
41537: LD_ADDR_VAR 0 3
41541: PUSH
41542: LD_INT 0
41544: ST_TO_ADDR
// end ;
41545: LD_VAR 0 3
41549: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41550: LD_INT 0
41552: PPUSH
41553: PPUSH
// if not array1 or not array2 then
41554: LD_VAR 0 1
41558: NOT
41559: PUSH
41560: LD_VAR 0 2
41564: NOT
41565: OR
41566: IFFALSE 41570
// exit ;
41568: GO 41634
// result := true ;
41570: LD_ADDR_VAR 0 3
41574: PUSH
41575: LD_INT 1
41577: ST_TO_ADDR
// for i = 1 to array1 do
41578: LD_ADDR_VAR 0 4
41582: PUSH
41583: DOUBLE
41584: LD_INT 1
41586: DEC
41587: ST_TO_ADDR
41588: LD_VAR 0 1
41592: PUSH
41593: FOR_TO
41594: IFFALSE 41632
// if array1 [ i ] <> array2 [ i ] then
41596: LD_VAR 0 1
41600: PUSH
41601: LD_VAR 0 4
41605: ARRAY
41606: PUSH
41607: LD_VAR 0 2
41611: PUSH
41612: LD_VAR 0 4
41616: ARRAY
41617: NONEQUAL
41618: IFFALSE 41630
// begin result := false ;
41620: LD_ADDR_VAR 0 3
41624: PUSH
41625: LD_INT 0
41627: ST_TO_ADDR
// break ;
41628: GO 41632
// end ;
41630: GO 41593
41632: POP
41633: POP
// end ;
41634: LD_VAR 0 3
41638: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41639: LD_INT 0
41641: PPUSH
41642: PPUSH
41643: PPUSH
// pom := GetBase ( fac ) ;
41644: LD_ADDR_VAR 0 5
41648: PUSH
41649: LD_VAR 0 1
41653: PPUSH
41654: CALL_OW 274
41658: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41659: LD_ADDR_VAR 0 4
41663: PUSH
41664: LD_VAR 0 2
41668: PUSH
41669: LD_INT 1
41671: ARRAY
41672: PPUSH
41673: LD_VAR 0 2
41677: PUSH
41678: LD_INT 2
41680: ARRAY
41681: PPUSH
41682: LD_VAR 0 2
41686: PUSH
41687: LD_INT 3
41689: ARRAY
41690: PPUSH
41691: LD_VAR 0 2
41695: PUSH
41696: LD_INT 4
41698: ARRAY
41699: PPUSH
41700: CALL_OW 449
41704: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41705: LD_ADDR_VAR 0 3
41709: PUSH
41710: LD_VAR 0 5
41714: PPUSH
41715: LD_INT 1
41717: PPUSH
41718: CALL_OW 275
41722: PUSH
41723: LD_VAR 0 4
41727: PUSH
41728: LD_INT 1
41730: ARRAY
41731: GREATEREQUAL
41732: PUSH
41733: LD_VAR 0 5
41737: PPUSH
41738: LD_INT 2
41740: PPUSH
41741: CALL_OW 275
41745: PUSH
41746: LD_VAR 0 4
41750: PUSH
41751: LD_INT 2
41753: ARRAY
41754: GREATEREQUAL
41755: AND
41756: PUSH
41757: LD_VAR 0 5
41761: PPUSH
41762: LD_INT 3
41764: PPUSH
41765: CALL_OW 275
41769: PUSH
41770: LD_VAR 0 4
41774: PUSH
41775: LD_INT 3
41777: ARRAY
41778: GREATEREQUAL
41779: AND
41780: ST_TO_ADDR
// end ;
41781: LD_VAR 0 3
41785: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41786: LD_INT 0
41788: PPUSH
41789: PPUSH
41790: PPUSH
41791: PPUSH
// pom := GetBase ( building ) ;
41792: LD_ADDR_VAR 0 3
41796: PUSH
41797: LD_VAR 0 1
41801: PPUSH
41802: CALL_OW 274
41806: ST_TO_ADDR
// if not pom then
41807: LD_VAR 0 3
41811: NOT
41812: IFFALSE 41816
// exit ;
41814: GO 41986
// btype := GetBType ( building ) ;
41816: LD_ADDR_VAR 0 5
41820: PUSH
41821: LD_VAR 0 1
41825: PPUSH
41826: CALL_OW 266
41830: ST_TO_ADDR
// if btype = b_armoury then
41831: LD_VAR 0 5
41835: PUSH
41836: LD_INT 4
41838: EQUAL
41839: IFFALSE 41849
// btype := b_barracks ;
41841: LD_ADDR_VAR 0 5
41845: PUSH
41846: LD_INT 5
41848: ST_TO_ADDR
// if btype = b_depot then
41849: LD_VAR 0 5
41853: PUSH
41854: LD_INT 0
41856: EQUAL
41857: IFFALSE 41867
// btype := b_warehouse ;
41859: LD_ADDR_VAR 0 5
41863: PUSH
41864: LD_INT 1
41866: ST_TO_ADDR
// if btype = b_workshop then
41867: LD_VAR 0 5
41871: PUSH
41872: LD_INT 2
41874: EQUAL
41875: IFFALSE 41885
// btype := b_factory ;
41877: LD_ADDR_VAR 0 5
41881: PUSH
41882: LD_INT 3
41884: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41885: LD_ADDR_VAR 0 4
41889: PUSH
41890: LD_VAR 0 5
41894: PPUSH
41895: LD_VAR 0 1
41899: PPUSH
41900: CALL_OW 248
41904: PPUSH
41905: CALL_OW 450
41909: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41910: LD_ADDR_VAR 0 2
41914: PUSH
41915: LD_VAR 0 3
41919: PPUSH
41920: LD_INT 1
41922: PPUSH
41923: CALL_OW 275
41927: PUSH
41928: LD_VAR 0 4
41932: PUSH
41933: LD_INT 1
41935: ARRAY
41936: GREATEREQUAL
41937: PUSH
41938: LD_VAR 0 3
41942: PPUSH
41943: LD_INT 2
41945: PPUSH
41946: CALL_OW 275
41950: PUSH
41951: LD_VAR 0 4
41955: PUSH
41956: LD_INT 2
41958: ARRAY
41959: GREATEREQUAL
41960: AND
41961: PUSH
41962: LD_VAR 0 3
41966: PPUSH
41967: LD_INT 3
41969: PPUSH
41970: CALL_OW 275
41974: PUSH
41975: LD_VAR 0 4
41979: PUSH
41980: LD_INT 3
41982: ARRAY
41983: GREATEREQUAL
41984: AND
41985: ST_TO_ADDR
// end ;
41986: LD_VAR 0 2
41990: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41991: LD_INT 0
41993: PPUSH
41994: PPUSH
41995: PPUSH
// pom := GetBase ( building ) ;
41996: LD_ADDR_VAR 0 4
42000: PUSH
42001: LD_VAR 0 1
42005: PPUSH
42006: CALL_OW 274
42010: ST_TO_ADDR
// if not pom then
42011: LD_VAR 0 4
42015: NOT
42016: IFFALSE 42020
// exit ;
42018: GO 42121
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42020: LD_ADDR_VAR 0 5
42024: PUSH
42025: LD_VAR 0 2
42029: PPUSH
42030: LD_VAR 0 1
42034: PPUSH
42035: CALL_OW 248
42039: PPUSH
42040: CALL_OW 450
42044: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42045: LD_ADDR_VAR 0 3
42049: PUSH
42050: LD_VAR 0 4
42054: PPUSH
42055: LD_INT 1
42057: PPUSH
42058: CALL_OW 275
42062: PUSH
42063: LD_VAR 0 5
42067: PUSH
42068: LD_INT 1
42070: ARRAY
42071: GREATEREQUAL
42072: PUSH
42073: LD_VAR 0 4
42077: PPUSH
42078: LD_INT 2
42080: PPUSH
42081: CALL_OW 275
42085: PUSH
42086: LD_VAR 0 5
42090: PUSH
42091: LD_INT 2
42093: ARRAY
42094: GREATEREQUAL
42095: AND
42096: PUSH
42097: LD_VAR 0 4
42101: PPUSH
42102: LD_INT 3
42104: PPUSH
42105: CALL_OW 275
42109: PUSH
42110: LD_VAR 0 5
42114: PUSH
42115: LD_INT 3
42117: ARRAY
42118: GREATEREQUAL
42119: AND
42120: ST_TO_ADDR
// end ;
42121: LD_VAR 0 3
42125: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42126: LD_INT 0
42128: PPUSH
42129: PPUSH
42130: PPUSH
42131: PPUSH
42132: PPUSH
42133: PPUSH
42134: PPUSH
42135: PPUSH
42136: PPUSH
42137: PPUSH
42138: PPUSH
// result := false ;
42139: LD_ADDR_VAR 0 8
42143: PUSH
42144: LD_INT 0
42146: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42147: LD_VAR 0 5
42151: NOT
42152: PUSH
42153: LD_VAR 0 1
42157: NOT
42158: OR
42159: PUSH
42160: LD_VAR 0 2
42164: NOT
42165: OR
42166: PUSH
42167: LD_VAR 0 3
42171: NOT
42172: OR
42173: IFFALSE 42177
// exit ;
42175: GO 42991
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42177: LD_ADDR_VAR 0 14
42181: PUSH
42182: LD_VAR 0 1
42186: PPUSH
42187: LD_VAR 0 2
42191: PPUSH
42192: LD_VAR 0 3
42196: PPUSH
42197: LD_VAR 0 4
42201: PPUSH
42202: LD_VAR 0 5
42206: PUSH
42207: LD_INT 1
42209: ARRAY
42210: PPUSH
42211: CALL_OW 248
42215: PPUSH
42216: LD_INT 0
42218: PPUSH
42219: CALL 44228 0 6
42223: ST_TO_ADDR
// if not hexes then
42224: LD_VAR 0 14
42228: NOT
42229: IFFALSE 42233
// exit ;
42231: GO 42991
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42233: LD_ADDR_VAR 0 17
42237: PUSH
42238: LD_VAR 0 5
42242: PPUSH
42243: LD_INT 22
42245: PUSH
42246: LD_VAR 0 13
42250: PPUSH
42251: CALL_OW 255
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 2
42262: PUSH
42263: LD_INT 30
42265: PUSH
42266: LD_INT 0
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 30
42275: PUSH
42276: LD_INT 1
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: LIST
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PPUSH
42292: CALL_OW 72
42296: ST_TO_ADDR
// for i = 1 to hexes do
42297: LD_ADDR_VAR 0 9
42301: PUSH
42302: DOUBLE
42303: LD_INT 1
42305: DEC
42306: ST_TO_ADDR
42307: LD_VAR 0 14
42311: PUSH
42312: FOR_TO
42313: IFFALSE 42989
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42315: LD_ADDR_VAR 0 13
42319: PUSH
42320: LD_VAR 0 14
42324: PUSH
42325: LD_VAR 0 9
42329: ARRAY
42330: PUSH
42331: LD_INT 1
42333: ARRAY
42334: PPUSH
42335: LD_VAR 0 14
42339: PUSH
42340: LD_VAR 0 9
42344: ARRAY
42345: PUSH
42346: LD_INT 2
42348: ARRAY
42349: PPUSH
42350: CALL_OW 428
42354: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42355: LD_VAR 0 14
42359: PUSH
42360: LD_VAR 0 9
42364: ARRAY
42365: PUSH
42366: LD_INT 1
42368: ARRAY
42369: PPUSH
42370: LD_VAR 0 14
42374: PUSH
42375: LD_VAR 0 9
42379: ARRAY
42380: PUSH
42381: LD_INT 2
42383: ARRAY
42384: PPUSH
42385: CALL_OW 351
42389: PUSH
42390: LD_VAR 0 14
42394: PUSH
42395: LD_VAR 0 9
42399: ARRAY
42400: PUSH
42401: LD_INT 1
42403: ARRAY
42404: PPUSH
42405: LD_VAR 0 14
42409: PUSH
42410: LD_VAR 0 9
42414: ARRAY
42415: PUSH
42416: LD_INT 2
42418: ARRAY
42419: PPUSH
42420: CALL_OW 488
42424: NOT
42425: OR
42426: PUSH
42427: LD_VAR 0 13
42431: PPUSH
42432: CALL_OW 247
42436: PUSH
42437: LD_INT 3
42439: EQUAL
42440: OR
42441: IFFALSE 42447
// exit ;
42443: POP
42444: POP
42445: GO 42991
// if not tmp then
42447: LD_VAR 0 13
42451: NOT
42452: IFFALSE 42456
// continue ;
42454: GO 42312
// result := true ;
42456: LD_ADDR_VAR 0 8
42460: PUSH
42461: LD_INT 1
42463: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42464: LD_VAR 0 6
42468: PUSH
42469: LD_VAR 0 13
42473: PPUSH
42474: CALL_OW 247
42478: PUSH
42479: LD_INT 2
42481: EQUAL
42482: AND
42483: PUSH
42484: LD_VAR 0 13
42488: PPUSH
42489: CALL_OW 263
42493: PUSH
42494: LD_INT 1
42496: EQUAL
42497: AND
42498: IFFALSE 42662
// begin if IsDrivenBy ( tmp ) then
42500: LD_VAR 0 13
42504: PPUSH
42505: CALL_OW 311
42509: IFFALSE 42513
// continue ;
42511: GO 42312
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42513: LD_VAR 0 6
42517: PPUSH
42518: LD_INT 3
42520: PUSH
42521: LD_INT 60
42523: PUSH
42524: EMPTY
42525: LIST
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 3
42533: PUSH
42534: LD_INT 55
42536: PUSH
42537: EMPTY
42538: LIST
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PPUSH
42548: CALL_OW 72
42552: IFFALSE 42660
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42554: LD_ADDR_VAR 0 18
42558: PUSH
42559: LD_VAR 0 6
42563: PPUSH
42564: LD_INT 3
42566: PUSH
42567: LD_INT 60
42569: PUSH
42570: EMPTY
42571: LIST
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 3
42579: PUSH
42580: LD_INT 55
42582: PUSH
42583: EMPTY
42584: LIST
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PPUSH
42594: CALL_OW 72
42598: PUSH
42599: LD_INT 1
42601: ARRAY
42602: ST_TO_ADDR
// if IsInUnit ( driver ) then
42603: LD_VAR 0 18
42607: PPUSH
42608: CALL_OW 310
42612: IFFALSE 42623
// ComExit ( driver ) ;
42614: LD_VAR 0 18
42618: PPUSH
42619: CALL 67412 0 1
// AddComEnterUnit ( driver , tmp ) ;
42623: LD_VAR 0 18
42627: PPUSH
42628: LD_VAR 0 13
42632: PPUSH
42633: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42637: LD_VAR 0 18
42641: PPUSH
42642: LD_VAR 0 7
42646: PPUSH
42647: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42651: LD_VAR 0 18
42655: PPUSH
42656: CALL_OW 181
// end ; continue ;
42660: GO 42312
// end ; if not cleaners or not tmp in cleaners then
42662: LD_VAR 0 6
42666: NOT
42667: PUSH
42668: LD_VAR 0 13
42672: PUSH
42673: LD_VAR 0 6
42677: IN
42678: NOT
42679: OR
42680: IFFALSE 42987
// begin if dep then
42682: LD_VAR 0 17
42686: IFFALSE 42822
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42688: LD_ADDR_VAR 0 16
42692: PUSH
42693: LD_VAR 0 17
42697: PUSH
42698: LD_INT 1
42700: ARRAY
42701: PPUSH
42702: CALL_OW 250
42706: PPUSH
42707: LD_VAR 0 17
42711: PUSH
42712: LD_INT 1
42714: ARRAY
42715: PPUSH
42716: CALL_OW 254
42720: PPUSH
42721: LD_INT 5
42723: PPUSH
42724: CALL_OW 272
42728: PUSH
42729: LD_VAR 0 17
42733: PUSH
42734: LD_INT 1
42736: ARRAY
42737: PPUSH
42738: CALL_OW 251
42742: PPUSH
42743: LD_VAR 0 17
42747: PUSH
42748: LD_INT 1
42750: ARRAY
42751: PPUSH
42752: CALL_OW 254
42756: PPUSH
42757: LD_INT 5
42759: PPUSH
42760: CALL_OW 273
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42769: LD_VAR 0 16
42773: PUSH
42774: LD_INT 1
42776: ARRAY
42777: PPUSH
42778: LD_VAR 0 16
42782: PUSH
42783: LD_INT 2
42785: ARRAY
42786: PPUSH
42787: CALL_OW 488
42791: IFFALSE 42822
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42793: LD_VAR 0 13
42797: PPUSH
42798: LD_VAR 0 16
42802: PUSH
42803: LD_INT 1
42805: ARRAY
42806: PPUSH
42807: LD_VAR 0 16
42811: PUSH
42812: LD_INT 2
42814: ARRAY
42815: PPUSH
42816: CALL_OW 111
// continue ;
42820: GO 42312
// end ; end ; r := GetDir ( tmp ) ;
42822: LD_ADDR_VAR 0 15
42826: PUSH
42827: LD_VAR 0 13
42831: PPUSH
42832: CALL_OW 254
42836: ST_TO_ADDR
// if r = 5 then
42837: LD_VAR 0 15
42841: PUSH
42842: LD_INT 5
42844: EQUAL
42845: IFFALSE 42855
// r := 0 ;
42847: LD_ADDR_VAR 0 15
42851: PUSH
42852: LD_INT 0
42854: ST_TO_ADDR
// for j = r to 5 do
42855: LD_ADDR_VAR 0 10
42859: PUSH
42860: DOUBLE
42861: LD_VAR 0 15
42865: DEC
42866: ST_TO_ADDR
42867: LD_INT 5
42869: PUSH
42870: FOR_TO
42871: IFFALSE 42985
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42873: LD_ADDR_VAR 0 11
42877: PUSH
42878: LD_VAR 0 13
42882: PPUSH
42883: CALL_OW 250
42887: PPUSH
42888: LD_VAR 0 10
42892: PPUSH
42893: LD_INT 2
42895: PPUSH
42896: CALL_OW 272
42900: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42901: LD_ADDR_VAR 0 12
42905: PUSH
42906: LD_VAR 0 13
42910: PPUSH
42911: CALL_OW 251
42915: PPUSH
42916: LD_VAR 0 10
42920: PPUSH
42921: LD_INT 2
42923: PPUSH
42924: CALL_OW 273
42928: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42929: LD_VAR 0 11
42933: PPUSH
42934: LD_VAR 0 12
42938: PPUSH
42939: CALL_OW 488
42943: PUSH
42944: LD_VAR 0 11
42948: PPUSH
42949: LD_VAR 0 12
42953: PPUSH
42954: CALL_OW 428
42958: NOT
42959: AND
42960: IFFALSE 42983
// begin ComMoveXY ( tmp , _x , _y ) ;
42962: LD_VAR 0 13
42966: PPUSH
42967: LD_VAR 0 11
42971: PPUSH
42972: LD_VAR 0 12
42976: PPUSH
42977: CALL_OW 111
// break ;
42981: GO 42985
// end ; end ;
42983: GO 42870
42985: POP
42986: POP
// end ; end ;
42987: GO 42312
42989: POP
42990: POP
// end ;
42991: LD_VAR 0 8
42995: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42996: LD_INT 0
42998: PPUSH
// result := true ;
42999: LD_ADDR_VAR 0 3
43003: PUSH
43004: LD_INT 1
43006: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43007: LD_VAR 0 2
43011: PUSH
43012: LD_INT 24
43014: DOUBLE
43015: EQUAL
43016: IFTRUE 43026
43018: LD_INT 33
43020: DOUBLE
43021: EQUAL
43022: IFTRUE 43026
43024: GO 43051
43026: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43027: LD_ADDR_VAR 0 3
43031: PUSH
43032: LD_INT 32
43034: PPUSH
43035: LD_VAR 0 1
43039: PPUSH
43040: CALL_OW 321
43044: PUSH
43045: LD_INT 2
43047: EQUAL
43048: ST_TO_ADDR
43049: GO 43371
43051: LD_INT 20
43053: DOUBLE
43054: EQUAL
43055: IFTRUE 43059
43057: GO 43084
43059: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43060: LD_ADDR_VAR 0 3
43064: PUSH
43065: LD_INT 6
43067: PPUSH
43068: LD_VAR 0 1
43072: PPUSH
43073: CALL_OW 321
43077: PUSH
43078: LD_INT 2
43080: EQUAL
43081: ST_TO_ADDR
43082: GO 43371
43084: LD_INT 22
43086: DOUBLE
43087: EQUAL
43088: IFTRUE 43098
43090: LD_INT 36
43092: DOUBLE
43093: EQUAL
43094: IFTRUE 43098
43096: GO 43123
43098: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43099: LD_ADDR_VAR 0 3
43103: PUSH
43104: LD_INT 15
43106: PPUSH
43107: LD_VAR 0 1
43111: PPUSH
43112: CALL_OW 321
43116: PUSH
43117: LD_INT 2
43119: EQUAL
43120: ST_TO_ADDR
43121: GO 43371
43123: LD_INT 30
43125: DOUBLE
43126: EQUAL
43127: IFTRUE 43131
43129: GO 43156
43131: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43132: LD_ADDR_VAR 0 3
43136: PUSH
43137: LD_INT 20
43139: PPUSH
43140: LD_VAR 0 1
43144: PPUSH
43145: CALL_OW 321
43149: PUSH
43150: LD_INT 2
43152: EQUAL
43153: ST_TO_ADDR
43154: GO 43371
43156: LD_INT 28
43158: DOUBLE
43159: EQUAL
43160: IFTRUE 43170
43162: LD_INT 21
43164: DOUBLE
43165: EQUAL
43166: IFTRUE 43170
43168: GO 43195
43170: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43171: LD_ADDR_VAR 0 3
43175: PUSH
43176: LD_INT 21
43178: PPUSH
43179: LD_VAR 0 1
43183: PPUSH
43184: CALL_OW 321
43188: PUSH
43189: LD_INT 2
43191: EQUAL
43192: ST_TO_ADDR
43193: GO 43371
43195: LD_INT 16
43197: DOUBLE
43198: EQUAL
43199: IFTRUE 43203
43201: GO 43230
43203: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43204: LD_ADDR_VAR 0 3
43208: PUSH
43209: LD_EXP 55
43213: PPUSH
43214: LD_VAR 0 1
43218: PPUSH
43219: CALL_OW 321
43223: PUSH
43224: LD_INT 2
43226: EQUAL
43227: ST_TO_ADDR
43228: GO 43371
43230: LD_INT 19
43232: DOUBLE
43233: EQUAL
43234: IFTRUE 43244
43236: LD_INT 23
43238: DOUBLE
43239: EQUAL
43240: IFTRUE 43244
43242: GO 43271
43244: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43245: LD_ADDR_VAR 0 3
43249: PUSH
43250: LD_EXP 54
43254: PPUSH
43255: LD_VAR 0 1
43259: PPUSH
43260: CALL_OW 321
43264: PUSH
43265: LD_INT 2
43267: EQUAL
43268: ST_TO_ADDR
43269: GO 43371
43271: LD_INT 17
43273: DOUBLE
43274: EQUAL
43275: IFTRUE 43279
43277: GO 43304
43279: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43280: LD_ADDR_VAR 0 3
43284: PUSH
43285: LD_INT 39
43287: PPUSH
43288: LD_VAR 0 1
43292: PPUSH
43293: CALL_OW 321
43297: PUSH
43298: LD_INT 2
43300: EQUAL
43301: ST_TO_ADDR
43302: GO 43371
43304: LD_INT 18
43306: DOUBLE
43307: EQUAL
43308: IFTRUE 43312
43310: GO 43337
43312: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43313: LD_ADDR_VAR 0 3
43317: PUSH
43318: LD_INT 40
43320: PPUSH
43321: LD_VAR 0 1
43325: PPUSH
43326: CALL_OW 321
43330: PUSH
43331: LD_INT 2
43333: EQUAL
43334: ST_TO_ADDR
43335: GO 43371
43337: LD_INT 27
43339: DOUBLE
43340: EQUAL
43341: IFTRUE 43345
43343: GO 43370
43345: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43346: LD_ADDR_VAR 0 3
43350: PUSH
43351: LD_INT 35
43353: PPUSH
43354: LD_VAR 0 1
43358: PPUSH
43359: CALL_OW 321
43363: PUSH
43364: LD_INT 2
43366: EQUAL
43367: ST_TO_ADDR
43368: GO 43371
43370: POP
// end ;
43371: LD_VAR 0 3
43375: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43376: LD_INT 0
43378: PPUSH
43379: PPUSH
43380: PPUSH
43381: PPUSH
43382: PPUSH
43383: PPUSH
43384: PPUSH
43385: PPUSH
43386: PPUSH
43387: PPUSH
43388: PPUSH
// result := false ;
43389: LD_ADDR_VAR 0 6
43393: PUSH
43394: LD_INT 0
43396: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43397: LD_VAR 0 1
43401: NOT
43402: PUSH
43403: LD_VAR 0 1
43407: PPUSH
43408: CALL_OW 266
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: IN
43423: NOT
43424: OR
43425: PUSH
43426: LD_VAR 0 2
43430: NOT
43431: OR
43432: PUSH
43433: LD_VAR 0 5
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: LD_INT 2
43446: PUSH
43447: LD_INT 3
43449: PUSH
43450: LD_INT 4
43452: PUSH
43453: LD_INT 5
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: IN
43464: NOT
43465: OR
43466: PUSH
43467: LD_VAR 0 3
43471: PPUSH
43472: LD_VAR 0 4
43476: PPUSH
43477: CALL_OW 488
43481: NOT
43482: OR
43483: IFFALSE 43487
// exit ;
43485: GO 44223
// side := GetSide ( depot ) ;
43487: LD_ADDR_VAR 0 9
43491: PUSH
43492: LD_VAR 0 1
43496: PPUSH
43497: CALL_OW 255
43501: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43502: LD_VAR 0 9
43506: PPUSH
43507: LD_VAR 0 2
43511: PPUSH
43512: CALL 42996 0 2
43516: NOT
43517: IFFALSE 43521
// exit ;
43519: GO 44223
// pom := GetBase ( depot ) ;
43521: LD_ADDR_VAR 0 10
43525: PUSH
43526: LD_VAR 0 1
43530: PPUSH
43531: CALL_OW 274
43535: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43536: LD_ADDR_VAR 0 11
43540: PUSH
43541: LD_VAR 0 2
43545: PPUSH
43546: LD_VAR 0 1
43550: PPUSH
43551: CALL_OW 248
43555: PPUSH
43556: CALL_OW 450
43560: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43561: LD_VAR 0 10
43565: PPUSH
43566: LD_INT 1
43568: PPUSH
43569: CALL_OW 275
43573: PUSH
43574: LD_VAR 0 11
43578: PUSH
43579: LD_INT 1
43581: ARRAY
43582: GREATEREQUAL
43583: PUSH
43584: LD_VAR 0 10
43588: PPUSH
43589: LD_INT 2
43591: PPUSH
43592: CALL_OW 275
43596: PUSH
43597: LD_VAR 0 11
43601: PUSH
43602: LD_INT 2
43604: ARRAY
43605: GREATEREQUAL
43606: AND
43607: PUSH
43608: LD_VAR 0 10
43612: PPUSH
43613: LD_INT 3
43615: PPUSH
43616: CALL_OW 275
43620: PUSH
43621: LD_VAR 0 11
43625: PUSH
43626: LD_INT 3
43628: ARRAY
43629: GREATEREQUAL
43630: AND
43631: NOT
43632: IFFALSE 43636
// exit ;
43634: GO 44223
// if GetBType ( depot ) = b_depot then
43636: LD_VAR 0 1
43640: PPUSH
43641: CALL_OW 266
43645: PUSH
43646: LD_INT 0
43648: EQUAL
43649: IFFALSE 43661
// dist := 28 else
43651: LD_ADDR_VAR 0 14
43655: PUSH
43656: LD_INT 28
43658: ST_TO_ADDR
43659: GO 43669
// dist := 36 ;
43661: LD_ADDR_VAR 0 14
43665: PUSH
43666: LD_INT 36
43668: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43669: LD_VAR 0 1
43673: PPUSH
43674: LD_VAR 0 3
43678: PPUSH
43679: LD_VAR 0 4
43683: PPUSH
43684: CALL_OW 297
43688: PUSH
43689: LD_VAR 0 14
43693: GREATER
43694: IFFALSE 43698
// exit ;
43696: GO 44223
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43698: LD_ADDR_VAR 0 12
43702: PUSH
43703: LD_VAR 0 2
43707: PPUSH
43708: LD_VAR 0 3
43712: PPUSH
43713: LD_VAR 0 4
43717: PPUSH
43718: LD_VAR 0 5
43722: PPUSH
43723: LD_VAR 0 1
43727: PPUSH
43728: CALL_OW 248
43732: PPUSH
43733: LD_INT 0
43735: PPUSH
43736: CALL 44228 0 6
43740: ST_TO_ADDR
// if not hexes then
43741: LD_VAR 0 12
43745: NOT
43746: IFFALSE 43750
// exit ;
43748: GO 44223
// hex := GetHexInfo ( x , y ) ;
43750: LD_ADDR_VAR 0 15
43754: PUSH
43755: LD_VAR 0 3
43759: PPUSH
43760: LD_VAR 0 4
43764: PPUSH
43765: CALL_OW 546
43769: ST_TO_ADDR
// if hex [ 1 ] then
43770: LD_VAR 0 15
43774: PUSH
43775: LD_INT 1
43777: ARRAY
43778: IFFALSE 43782
// exit ;
43780: GO 44223
// height := hex [ 2 ] ;
43782: LD_ADDR_VAR 0 13
43786: PUSH
43787: LD_VAR 0 15
43791: PUSH
43792: LD_INT 2
43794: ARRAY
43795: ST_TO_ADDR
// for i = 1 to hexes do
43796: LD_ADDR_VAR 0 7
43800: PUSH
43801: DOUBLE
43802: LD_INT 1
43804: DEC
43805: ST_TO_ADDR
43806: LD_VAR 0 12
43810: PUSH
43811: FOR_TO
43812: IFFALSE 44142
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43814: LD_VAR 0 12
43818: PUSH
43819: LD_VAR 0 7
43823: ARRAY
43824: PUSH
43825: LD_INT 1
43827: ARRAY
43828: PPUSH
43829: LD_VAR 0 12
43833: PUSH
43834: LD_VAR 0 7
43838: ARRAY
43839: PUSH
43840: LD_INT 2
43842: ARRAY
43843: PPUSH
43844: CALL_OW 488
43848: NOT
43849: PUSH
43850: LD_VAR 0 12
43854: PUSH
43855: LD_VAR 0 7
43859: ARRAY
43860: PUSH
43861: LD_INT 1
43863: ARRAY
43864: PPUSH
43865: LD_VAR 0 12
43869: PUSH
43870: LD_VAR 0 7
43874: ARRAY
43875: PUSH
43876: LD_INT 2
43878: ARRAY
43879: PPUSH
43880: CALL_OW 428
43884: PUSH
43885: LD_INT 0
43887: GREATER
43888: OR
43889: PUSH
43890: LD_VAR 0 12
43894: PUSH
43895: LD_VAR 0 7
43899: ARRAY
43900: PUSH
43901: LD_INT 1
43903: ARRAY
43904: PPUSH
43905: LD_VAR 0 12
43909: PUSH
43910: LD_VAR 0 7
43914: ARRAY
43915: PUSH
43916: LD_INT 2
43918: ARRAY
43919: PPUSH
43920: CALL_OW 351
43924: OR
43925: IFFALSE 43931
// exit ;
43927: POP
43928: POP
43929: GO 44223
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43931: LD_ADDR_VAR 0 8
43935: PUSH
43936: LD_VAR 0 12
43940: PUSH
43941: LD_VAR 0 7
43945: ARRAY
43946: PUSH
43947: LD_INT 1
43949: ARRAY
43950: PPUSH
43951: LD_VAR 0 12
43955: PUSH
43956: LD_VAR 0 7
43960: ARRAY
43961: PUSH
43962: LD_INT 2
43964: ARRAY
43965: PPUSH
43966: CALL_OW 546
43970: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43971: LD_VAR 0 8
43975: PUSH
43976: LD_INT 1
43978: ARRAY
43979: PUSH
43980: LD_VAR 0 8
43984: PUSH
43985: LD_INT 2
43987: ARRAY
43988: PUSH
43989: LD_VAR 0 13
43993: PUSH
43994: LD_INT 2
43996: PLUS
43997: GREATER
43998: OR
43999: PUSH
44000: LD_VAR 0 8
44004: PUSH
44005: LD_INT 2
44007: ARRAY
44008: PUSH
44009: LD_VAR 0 13
44013: PUSH
44014: LD_INT 2
44016: MINUS
44017: LESS
44018: OR
44019: PUSH
44020: LD_VAR 0 8
44024: PUSH
44025: LD_INT 3
44027: ARRAY
44028: PUSH
44029: LD_INT 0
44031: PUSH
44032: LD_INT 8
44034: PUSH
44035: LD_INT 9
44037: PUSH
44038: LD_INT 10
44040: PUSH
44041: LD_INT 11
44043: PUSH
44044: LD_INT 12
44046: PUSH
44047: LD_INT 13
44049: PUSH
44050: LD_INT 16
44052: PUSH
44053: LD_INT 17
44055: PUSH
44056: LD_INT 18
44058: PUSH
44059: LD_INT 19
44061: PUSH
44062: LD_INT 20
44064: PUSH
44065: LD_INT 21
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: IN
44083: NOT
44084: OR
44085: PUSH
44086: LD_VAR 0 8
44090: PUSH
44091: LD_INT 5
44093: ARRAY
44094: NOT
44095: OR
44096: PUSH
44097: LD_VAR 0 8
44101: PUSH
44102: LD_INT 6
44104: ARRAY
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: LD_INT 2
44111: PUSH
44112: LD_INT 7
44114: PUSH
44115: LD_INT 9
44117: PUSH
44118: LD_INT 10
44120: PUSH
44121: LD_INT 11
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: IN
44132: NOT
44133: OR
44134: IFFALSE 44140
// exit ;
44136: POP
44137: POP
44138: GO 44223
// end ;
44140: GO 43811
44142: POP
44143: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44144: LD_VAR 0 9
44148: PPUSH
44149: LD_VAR 0 3
44153: PPUSH
44154: LD_VAR 0 4
44158: PPUSH
44159: LD_INT 20
44161: PPUSH
44162: CALL 36169 0 4
44166: PUSH
44167: LD_INT 4
44169: ARRAY
44170: IFFALSE 44174
// exit ;
44172: GO 44223
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44174: LD_VAR 0 2
44178: PUSH
44179: LD_INT 29
44181: PUSH
44182: LD_INT 30
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: IN
44189: PUSH
44190: LD_VAR 0 3
44194: PPUSH
44195: LD_VAR 0 4
44199: PPUSH
44200: LD_VAR 0 9
44204: PPUSH
44205: CALL_OW 440
44209: NOT
44210: AND
44211: IFFALSE 44215
// exit ;
44213: GO 44223
// result := true ;
44215: LD_ADDR_VAR 0 6
44219: PUSH
44220: LD_INT 1
44222: ST_TO_ADDR
// end ;
44223: LD_VAR 0 6
44227: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44228: LD_INT 0
44230: PPUSH
44231: PPUSH
44232: PPUSH
44233: PPUSH
44234: PPUSH
44235: PPUSH
44236: PPUSH
44237: PPUSH
44238: PPUSH
44239: PPUSH
44240: PPUSH
44241: PPUSH
44242: PPUSH
44243: PPUSH
44244: PPUSH
44245: PPUSH
44246: PPUSH
44247: PPUSH
44248: PPUSH
44249: PPUSH
44250: PPUSH
44251: PPUSH
44252: PPUSH
44253: PPUSH
44254: PPUSH
44255: PPUSH
44256: PPUSH
44257: PPUSH
44258: PPUSH
44259: PPUSH
44260: PPUSH
44261: PPUSH
44262: PPUSH
44263: PPUSH
44264: PPUSH
44265: PPUSH
44266: PPUSH
44267: PPUSH
44268: PPUSH
44269: PPUSH
44270: PPUSH
44271: PPUSH
44272: PPUSH
44273: PPUSH
44274: PPUSH
44275: PPUSH
44276: PPUSH
44277: PPUSH
44278: PPUSH
44279: PPUSH
44280: PPUSH
44281: PPUSH
44282: PPUSH
44283: PPUSH
44284: PPUSH
44285: PPUSH
44286: PPUSH
44287: PPUSH
// result = [ ] ;
44288: LD_ADDR_VAR 0 7
44292: PUSH
44293: EMPTY
44294: ST_TO_ADDR
// temp_list = [ ] ;
44295: LD_ADDR_VAR 0 9
44299: PUSH
44300: EMPTY
44301: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44302: LD_VAR 0 4
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: LD_INT 2
44315: PUSH
44316: LD_INT 3
44318: PUSH
44319: LD_INT 4
44321: PUSH
44322: LD_INT 5
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: IN
44333: NOT
44334: PUSH
44335: LD_VAR 0 1
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: IN
44350: PUSH
44351: LD_VAR 0 5
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: LD_INT 2
44361: PUSH
44362: LD_INT 3
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: LIST
44369: IN
44370: NOT
44371: AND
44372: OR
44373: IFFALSE 44377
// exit ;
44375: GO 62768
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44377: LD_VAR 0 1
44381: PUSH
44382: LD_INT 6
44384: PUSH
44385: LD_INT 7
44387: PUSH
44388: LD_INT 8
44390: PUSH
44391: LD_INT 13
44393: PUSH
44394: LD_INT 12
44396: PUSH
44397: LD_INT 15
44399: PUSH
44400: LD_INT 11
44402: PUSH
44403: LD_INT 14
44405: PUSH
44406: LD_INT 10
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: IN
44420: IFFALSE 44430
// btype = b_lab ;
44422: LD_ADDR_VAR 0 1
44426: PUSH
44427: LD_INT 6
44429: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44430: LD_VAR 0 6
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: LD_INT 2
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: LIST
44448: IN
44449: NOT
44450: PUSH
44451: LD_VAR 0 1
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: LD_INT 1
44461: PUSH
44462: LD_INT 2
44464: PUSH
44465: LD_INT 3
44467: PUSH
44468: LD_INT 6
44470: PUSH
44471: LD_INT 36
44473: PUSH
44474: LD_INT 4
44476: PUSH
44477: LD_INT 5
44479: PUSH
44480: LD_INT 31
44482: PUSH
44483: LD_INT 32
44485: PUSH
44486: LD_INT 33
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: IN
44502: NOT
44503: PUSH
44504: LD_VAR 0 6
44508: PUSH
44509: LD_INT 1
44511: EQUAL
44512: AND
44513: OR
44514: PUSH
44515: LD_VAR 0 1
44519: PUSH
44520: LD_INT 2
44522: PUSH
44523: LD_INT 3
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: IN
44530: NOT
44531: PUSH
44532: LD_VAR 0 6
44536: PUSH
44537: LD_INT 2
44539: EQUAL
44540: AND
44541: OR
44542: IFFALSE 44552
// mode = 0 ;
44544: LD_ADDR_VAR 0 6
44548: PUSH
44549: LD_INT 0
44551: ST_TO_ADDR
// case mode of 0 :
44552: LD_VAR 0 6
44556: PUSH
44557: LD_INT 0
44559: DOUBLE
44560: EQUAL
44561: IFTRUE 44565
44563: GO 56018
44565: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44566: LD_ADDR_VAR 0 11
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: LD_INT 1
44639: NEG
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: LD_INT 2
44651: NEG
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: LD_INT 2
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: LD_INT 1
44673: NEG
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 1
44681: PUSH
44682: LD_INT 2
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: LD_INT 2
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: LD_INT 3
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: LD_INT 3
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: LD_INT 2
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44759: LD_ADDR_VAR 0 12
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: LD_INT 1
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: LD_INT 1
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 2
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 2
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: NEG
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 2
44893: NEG
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 2
44905: NEG
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 3
44916: NEG
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 3
44927: NEG
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44955: LD_ADDR_VAR 0 13
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: LD_INT 1
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: LD_INT 1
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: NEG
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 1
45036: NEG
45037: PUSH
45038: LD_INT 2
45040: NEG
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 2
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 2
45058: PUSH
45059: LD_INT 2
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: LD_INT 2
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 2
45078: NEG
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 2
45090: NEG
45091: PUSH
45092: LD_INT 2
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 2
45102: NEG
45103: PUSH
45104: LD_INT 3
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 3
45114: NEG
45115: PUSH
45116: LD_INT 2
45118: NEG
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 3
45126: NEG
45127: PUSH
45128: LD_INT 3
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45154: LD_ADDR_VAR 0 14
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: LD_INT 2
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: LD_INT 2
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: LD_INT 2
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: LD_INT 3
45304: NEG
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: LD_INT 3
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: LD_INT 2
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45350: LD_ADDR_VAR 0 15
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: LD_INT 1
45423: NEG
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 2
45452: PUSH
45453: LD_INT 1
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: NEG
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: NEG
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 2
45484: NEG
45485: PUSH
45486: LD_INT 1
45488: NEG
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 2
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 3
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 3
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45543: LD_ADDR_VAR 0 16
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: LD_INT 1
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 1
45612: NEG
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: LD_INT 2
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 2
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 2
45646: PUSH
45647: LD_INT 2
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 2
45666: NEG
45667: PUSH
45668: LD_INT 1
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 2
45678: NEG
45679: PUSH
45680: LD_INT 2
45682: NEG
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 3
45690: PUSH
45691: LD_INT 2
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 3
45700: PUSH
45701: LD_INT 3
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 2
45710: PUSH
45711: LD_INT 3
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45736: LD_ADDR_VAR 0 17
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: LD_INT 1
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 1
45794: NEG
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: LD_INT 2
45821: NEG
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: LD_INT 2
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 2
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 2
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: LD_INT 2
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 2
45912: NEG
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 2
45923: NEG
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 2
45935: NEG
45936: PUSH
45937: LD_INT 2
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45966: LD_ADDR_VAR 0 18
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: LD_INT 1
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: NEG
46048: PUSH
46049: LD_INT 2
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: LD_INT 2
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: LD_INT 1
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 2
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 2
46091: PUSH
46092: LD_INT 1
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: LD_INT 2
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: LD_INT 2
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 2
46142: NEG
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 2
46153: NEG
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 2
46165: NEG
46166: PUSH
46167: LD_INT 2
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46196: LD_ADDR_VAR 0 19
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: LD_INT 1
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: NEG
46278: PUSH
46279: LD_INT 2
46281: NEG
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: LD_INT 2
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 2
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 2
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: LD_INT 2
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: LD_INT 2
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 2
46372: NEG
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: LD_INT 1
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 2
46395: NEG
46396: PUSH
46397: LD_INT 2
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46426: LD_ADDR_VAR 0 20
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 1
46507: NEG
46508: PUSH
46509: LD_INT 2
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: LD_INT 2
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 2
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 2
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 2
46561: PUSH
46562: LD_INT 2
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: LD_INT 2
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: LD_INT 2
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 2
46602: NEG
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: NEG
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: LD_INT 2
46629: NEG
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46656: LD_ADDR_VAR 0 21
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: LD_INT 1
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 1
46714: NEG
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 1
46725: NEG
46726: PUSH
46727: LD_INT 1
46729: NEG
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: LD_INT 2
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: LD_INT 2
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 2
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 2
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 2
46791: PUSH
46792: LD_INT 2
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: PUSH
46802: LD_INT 2
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: LD_INT 2
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 2
46832: NEG
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 2
46843: NEG
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: LD_INT 2
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46886: LD_ADDR_VAR 0 22
46890: PUSH
46891: LD_INT 0
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 1
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 1
46967: NEG
46968: PUSH
46969: LD_INT 2
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: LD_INT 2
46982: NEG
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 2
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 2
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 2
47021: PUSH
47022: LD_INT 2
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 1
47031: PUSH
47032: LD_INT 2
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: LD_INT 2
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: NEG
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 2
47073: NEG
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 2
47085: NEG
47086: PUSH
47087: LD_INT 2
47089: NEG
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47116: LD_ADDR_VAR 0 23
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: LD_INT 1
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: LD_INT 1
47189: NEG
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: LD_INT 2
47201: NEG
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: LD_INT 2
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 2
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 2
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 2
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: LD_INT 2
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: LD_INT 2
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 2
47292: NEG
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 2
47303: NEG
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 2
47315: NEG
47316: PUSH
47317: LD_INT 2
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 2
47327: NEG
47328: PUSH
47329: LD_INT 3
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: NEG
47340: PUSH
47341: LD_INT 3
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: LD_INT 2
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47396: LD_ADDR_VAR 0 24
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: NEG
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: LD_INT 2
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: LD_INT 2
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 2
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 2
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 2
47531: PUSH
47532: LD_INT 2
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: LD_INT 2
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: LD_INT 2
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 1
47561: NEG
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 2
47572: NEG
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 2
47583: NEG
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 2
47595: NEG
47596: PUSH
47597: LD_INT 2
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 2
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 3
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 3
47639: PUSH
47640: LD_INT 2
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47672: LD_ADDR_VAR 0 25
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: LD_INT 2
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: LD_INT 2
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: LD_INT 1
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 2
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 2
47807: PUSH
47808: LD_INT 2
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: LD_INT 2
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: LD_INT 2
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: LD_INT 1
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 2
47848: NEG
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 2
47859: NEG
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 2
47871: NEG
47872: PUSH
47873: LD_INT 2
47875: NEG
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 3
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 3
47893: PUSH
47894: LD_INT 2
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: LD_INT 3
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: LD_INT 3
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47946: LD_ADDR_VAR 0 26
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 1
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: NEG
48028: PUSH
48029: LD_INT 2
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: LD_INT 2
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: LD_INT 1
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 2
48061: PUSH
48062: LD_INT 0
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 2
48081: PUSH
48082: LD_INT 2
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: LD_INT 2
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: LD_INT 2
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 2
48122: NEG
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 2
48133: NEG
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 2
48145: NEG
48146: PUSH
48147: LD_INT 2
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: LD_INT 3
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: LD_INT 3
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: LD_INT 2
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 2
48188: NEG
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48222: LD_ADDR_VAR 0 27
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: NEG
48304: PUSH
48305: LD_INT 2
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: LD_INT 2
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: LD_INT 1
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 2
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 2
48357: PUSH
48358: LD_INT 2
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: LD_INT 2
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: LD_INT 2
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 2
48398: NEG
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 2
48409: NEG
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 2
48421: NEG
48422: PUSH
48423: LD_INT 2
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 2
48444: NEG
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 3
48455: NEG
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 3
48467: NEG
48468: PUSH
48469: LD_INT 2
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48502: LD_ADDR_VAR 0 28
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: LD_INT 2
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 2
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 2
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 2
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 2
48637: PUSH
48638: LD_INT 2
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: LD_INT 2
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: LD_INT 2
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 2
48678: NEG
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 2
48689: NEG
48690: PUSH
48691: LD_INT 1
48693: NEG
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 2
48701: NEG
48702: PUSH
48703: LD_INT 2
48705: NEG
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 2
48713: NEG
48714: PUSH
48715: LD_INT 3
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: NEG
48726: PUSH
48727: LD_INT 3
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 3
48737: NEG
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 3
48749: NEG
48750: PUSH
48751: LD_INT 2
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48784: LD_ADDR_VAR 0 29
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: LD_INT 2
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: LD_INT 2
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: LD_INT 1
48891: NEG
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 2
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 2
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: LD_INT 2
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: LD_INT 2
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 2
48950: NEG
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 2
48962: NEG
48963: PUSH
48964: LD_INT 2
48966: NEG
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 2
48974: NEG
48975: PUSH
48976: LD_INT 3
48978: NEG
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 2
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 3
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: LD_INT 3
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: LD_INT 2
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 3
49028: NEG
49029: PUSH
49030: LD_INT 2
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49063: LD_ADDR_VAR 0 30
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: LD_INT 1
49083: NEG
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 1
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: NEG
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 1
49132: NEG
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: LD_INT 2
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: LD_INT 2
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 2
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: LD_INT 1
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 2
49229: NEG
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 2
49240: NEG
49241: PUSH
49242: LD_INT 1
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: LD_INT 3
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: LD_INT 2
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 3
49275: PUSH
49276: LD_INT 2
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 2
49285: PUSH
49286: LD_INT 3
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 2
49295: NEG
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 3
49306: NEG
49307: PUSH
49308: LD_INT 1
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49341: LD_ADDR_VAR 0 31
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: LD_INT 1
49361: NEG
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: NEG
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: NEG
49411: PUSH
49412: LD_INT 1
49414: NEG
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: LD_INT 2
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: LD_INT 1
49437: NEG
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 2
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 2
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 2
49465: PUSH
49466: LD_INT 2
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: LD_INT 2
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: LD_INT 2
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: NEG
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 2
49506: NEG
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 2
49518: NEG
49519: PUSH
49520: LD_INT 2
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: NEG
49531: PUSH
49532: LD_INT 3
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 2
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 3
49553: PUSH
49554: LD_INT 1
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: LD_INT 3
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 3
49584: NEG
49585: PUSH
49586: LD_INT 2
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49619: LD_ADDR_VAR 0 32
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: LD_INT 1
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: LD_INT 2
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: LD_INT 2
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 2
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: LD_INT 2
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: LD_INT 2
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: LD_INT 2
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 2
49785: NEG
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 2
49796: NEG
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: NEG
49809: PUSH
49810: LD_INT 3
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: LD_INT 2
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 3
49831: PUSH
49832: LD_INT 2
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: PUSH
49842: LD_INT 3
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: NEG
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 3
49862: NEG
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49897: LD_ADDR_VAR 0 33
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 1
49955: NEG
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: LD_INT 2
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 2
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 2
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: LD_INT 2
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: LD_INT 2
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: NEG
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: NEG
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 2
50063: NEG
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 2
50075: NEG
50076: PUSH
50077: LD_INT 2
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: LD_INT 3
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 2
50099: PUSH
50100: LD_INT 1
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 3
50110: PUSH
50111: LD_INT 1
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: LD_INT 3
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: LD_INT 2
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 3
50141: NEG
50142: PUSH
50143: LD_INT 2
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50176: LD_ADDR_VAR 0 34
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: NEG
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: LD_INT 2
50261: NEG
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: LD_INT 2
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 2
50291: PUSH
50292: LD_INT 1
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 2
50301: PUSH
50302: LD_INT 2
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: LD_INT 2
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: NEG
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 2
50332: NEG
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 2
50343: NEG
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 2
50355: NEG
50356: PUSH
50357: LD_INT 2
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: LD_INT 3
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: LD_INT 2
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 3
50390: PUSH
50391: LD_INT 2
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: LD_INT 3
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 2
50410: NEG
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 3
50421: NEG
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50456: LD_ADDR_VAR 0 35
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: LD_INT 1
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 1
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: NEG
50526: PUSH
50527: LD_INT 1
50529: NEG
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 2
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 2
50547: NEG
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50568: LD_ADDR_VAR 0 36
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: LD_INT 2
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: LD_INT 2
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50680: LD_ADDR_VAR 0 37
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 1
50738: NEG
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 1
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50792: LD_ADDR_VAR 0 38
50796: PUSH
50797: LD_INT 0
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 1
50850: NEG
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: LD_INT 1
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 2
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50904: LD_ADDR_VAR 0 39
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: LD_INT 1
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: LD_INT 2
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: LD_INT 2
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51016: LD_ADDR_VAR 0 40
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51128: LD_ADDR_VAR 0 41
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: LD_INT 2
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 2
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 2
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 2
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 2
51283: NEG
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 2
51294: NEG
51295: PUSH
51296: LD_INT 1
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 2
51306: NEG
51307: PUSH
51308: LD_INT 2
51310: NEG
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 2
51318: NEG
51319: PUSH
51320: LD_INT 3
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 2
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 3
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 3
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 3
51361: PUSH
51362: LD_INT 2
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 3
51371: PUSH
51372: LD_INT 3
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 2
51381: PUSH
51382: LD_INT 3
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 2
51391: NEG
51392: PUSH
51393: LD_INT 1
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 3
51402: NEG
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 3
51413: NEG
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 3
51425: NEG
51426: PUSH
51427: LD_INT 2
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 3
51437: NEG
51438: PUSH
51439: LD_INT 3
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51478: LD_ADDR_VAR 0 42
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: LD_INT 2
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: LD_INT 2
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 1
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 2
51593: PUSH
51594: LD_INT 1
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 2
51603: PUSH
51604: LD_INT 2
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: LD_INT 2
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: LD_INT 2
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 2
51644: NEG
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 2
51656: NEG
51657: PUSH
51658: LD_INT 2
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 2
51668: NEG
51669: PUSH
51670: LD_INT 3
51672: NEG
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: LD_INT 3
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: LD_INT 3
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 3
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 3
51724: PUSH
51725: LD_INT 3
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 2
51734: PUSH
51735: LD_INT 3
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: LD_INT 3
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: LD_INT 3
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 1
51764: NEG
51765: PUSH
51766: LD_INT 2
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 3
51775: NEG
51776: PUSH
51777: LD_INT 2
51779: NEG
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 3
51787: NEG
51788: PUSH
51789: LD_INT 3
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51828: LD_ADDR_VAR 0 43
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 1
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: LD_INT 1
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: LD_INT 2
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: LD_INT 2
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 2
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 2
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: LD_INT 2
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: LD_INT 2
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 2
52005: NEG
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: LD_INT 3
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: LD_INT 3
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: LD_INT 2
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 2
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 3
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 3
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: PUSH
52083: LD_INT 3
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: LD_INT 3
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: LD_INT 2
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 2
52113: NEG
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 3
52124: NEG
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 3
52135: NEG
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52176: LD_ADDR_VAR 0 44
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: NEG
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: LD_INT 1
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: NEG
52258: PUSH
52259: LD_INT 2
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 2
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: LD_INT 2
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 2
52331: NEG
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 2
52342: NEG
52343: PUSH
52344: LD_INT 1
52346: NEG
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 2
52354: NEG
52355: PUSH
52356: LD_INT 2
52358: NEG
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 2
52366: NEG
52367: PUSH
52368: LD_INT 3
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 3
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 3
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 3
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 3
52419: PUSH
52420: LD_INT 3
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 2
52429: PUSH
52430: LD_INT 3
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 2
52439: NEG
52440: PUSH
52441: LD_INT 1
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 3
52450: NEG
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 3
52461: NEG
52462: PUSH
52463: LD_INT 1
52465: NEG
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 3
52473: NEG
52474: PUSH
52475: LD_INT 2
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 3
52485: NEG
52486: PUSH
52487: LD_INT 3
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52526: LD_ADDR_VAR 0 45
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: LD_INT 2
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: LD_INT 2
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: LD_INT 1
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 2
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: LD_INT 2
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: LD_INT 2
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: NEG
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 2
52692: NEG
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 2
52704: NEG
52705: PUSH
52706: LD_INT 2
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 2
52716: NEG
52717: PUSH
52718: LD_INT 3
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: LD_INT 3
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: LD_INT 3
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: LD_INT 2
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 3
52762: PUSH
52763: LD_INT 2
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 3
52772: PUSH
52773: LD_INT 3
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 2
52782: PUSH
52783: LD_INT 3
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: PUSH
52793: LD_INT 3
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: LD_INT 3
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 1
52812: NEG
52813: PUSH
52814: LD_INT 2
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 3
52823: NEG
52824: PUSH
52825: LD_INT 2
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 3
52835: NEG
52836: PUSH
52837: LD_INT 3
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52876: LD_ADDR_VAR 0 46
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 0
52893: PUSH
52894: LD_INT 1
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 1
52934: NEG
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: LD_INT 2
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 2
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 2
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 2
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: PUSH
53012: LD_INT 2
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: LD_INT 2
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 2
53042: NEG
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 2
53053: NEG
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: LD_INT 3
53069: NEG
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: LD_INT 3
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: PUSH
53089: LD_INT 2
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 2
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 3
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 3
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: LD_INT 3
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: LD_INT 3
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: LD_INT 2
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 2
53161: NEG
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 3
53172: NEG
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 3
53183: NEG
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53224: LD_ADDR_VAR 0 47
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: NEG
53306: PUSH
53307: LD_INT 2
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: LD_INT 2
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 2
53339: NEG
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 2
53351: NEG
53352: PUSH
53353: LD_INT 2
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53375: LD_ADDR_VAR 0 48
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: NEG
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 1
53444: NEG
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: LD_INT 2
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: LD_INT 2
53471: NEG
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 2
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 2
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53522: LD_ADDR_VAR 0 49
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: LD_INT 1
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 2
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: PUSH
53635: LD_INT 2
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: LD_INT 2
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53666: LD_ADDR_VAR 0 50
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 2
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 2
53757: PUSH
53758: LD_INT 2
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: LD_INT 2
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: LD_INT 2
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53810: LD_ADDR_VAR 0 51
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: LD_INT 1
53883: NEG
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 2
53922: NEG
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 2
53933: NEG
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53957: LD_ADDR_VAR 0 52
53961: PUSH
53962: LD_INT 0
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 2
54072: NEG
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 2
54084: NEG
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54108: LD_ADDR_VAR 0 53
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: LD_INT 1
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: LD_INT 2
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: LD_INT 2
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 1
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 2
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 2
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 2
54243: PUSH
54244: LD_INT 2
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: LD_INT 2
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 0
54263: PUSH
54264: LD_INT 2
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: NEG
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 2
54284: NEG
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 2
54295: NEG
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 2
54307: NEG
54308: PUSH
54309: LD_INT 2
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54338: LD_ADDR_VAR 0 54
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: NEG
54420: PUSH
54421: LD_INT 2
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: LD_INT 2
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: PUSH
54443: LD_INT 1
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 2
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 2
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 2
54473: PUSH
54474: LD_INT 2
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 0
54493: PUSH
54494: LD_INT 2
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: NEG
54526: PUSH
54527: LD_INT 1
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 2
54537: NEG
54538: PUSH
54539: LD_INT 2
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54568: LD_ADDR_VAR 0 55
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: LD_INT 1
54588: NEG
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: LD_INT 1
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 1
54626: NEG
54627: PUSH
54628: LD_INT 0
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: NEG
54650: PUSH
54651: LD_INT 2
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: LD_INT 2
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 2
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 2
54693: PUSH
54694: LD_INT 1
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 2
54703: PUSH
54704: LD_INT 2
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: LD_INT 2
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: LD_INT 2
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 2
54744: NEG
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 2
54755: NEG
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 2
54767: NEG
54768: PUSH
54769: LD_INT 2
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54798: LD_ADDR_VAR 0 56
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: NEG
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: LD_INT 2
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 2
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 2
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: LD_INT 2
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 1
54943: PUSH
54944: LD_INT 2
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: LD_INT 2
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 2
54974: NEG
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 2
54985: NEG
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 2
54997: NEG
54998: PUSH
54999: LD_INT 2
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55028: LD_ADDR_VAR 0 57
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 0
55076: PUSH
55077: LD_INT 1
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: LD_INT 1
55101: NEG
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 1
55109: NEG
55110: PUSH
55111: LD_INT 2
55113: NEG
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: LD_INT 2
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: LD_INT 1
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 2
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 2
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 2
55163: PUSH
55164: LD_INT 2
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: LD_INT 2
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: LD_INT 2
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: LD_INT 1
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 2
55215: NEG
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 2
55227: NEG
55228: PUSH
55229: LD_INT 2
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55258: LD_ADDR_VAR 0 58
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: LD_INT 2
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: LD_INT 1
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 2
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 2
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 2
55393: PUSH
55394: LD_INT 2
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: LD_INT 2
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: LD_INT 2
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 2
55434: NEG
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 2
55445: NEG
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: LD_INT 2
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55488: LD_ADDR_VAR 0 59
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: LD_INT 1
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: LD_INT 1
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55576: LD_ADDR_VAR 0 60
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: LD_INT 1
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55664: LD_ADDR_VAR 0 61
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55752: LD_ADDR_VAR 0 62
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55840: LD_ADDR_VAR 0 63
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: NEG
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55928: LD_ADDR_VAR 0 64
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: LD_INT 1
55948: NEG
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 1
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: LD_INT 1
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: ST_TO_ADDR
// end ; 1 :
56016: GO 61913
56018: LD_INT 1
56020: DOUBLE
56021: EQUAL
56022: IFTRUE 56026
56024: GO 58649
56026: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56027: LD_ADDR_VAR 0 11
56031: PUSH
56032: LD_INT 1
56034: NEG
56035: PUSH
56036: LD_INT 3
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: LD_INT 3
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: LD_INT 2
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: LIST
56070: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56071: LD_ADDR_VAR 0 12
56075: PUSH
56076: LD_INT 2
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 3
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 3
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: LIST
56111: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56112: LD_ADDR_VAR 0 13
56116: PUSH
56117: LD_INT 3
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 3
56129: PUSH
56130: LD_INT 3
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: LD_INT 3
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: LIST
56151: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56152: LD_ADDR_VAR 0 14
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: LD_INT 3
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: LD_INT 3
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: LD_INT 2
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: LIST
56192: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56193: LD_ADDR_VAR 0 15
56197: PUSH
56198: LD_INT 2
56200: NEG
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 3
56211: NEG
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 3
56222: NEG
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: LIST
56236: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56237: LD_ADDR_VAR 0 16
56241: PUSH
56242: LD_INT 2
56244: NEG
56245: PUSH
56246: LD_INT 3
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 3
56256: NEG
56257: PUSH
56258: LD_INT 2
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 3
56268: NEG
56269: PUSH
56270: LD_INT 3
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: LIST
56282: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56283: LD_ADDR_VAR 0 17
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: LD_INT 3
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: LD_INT 3
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: LD_INT 2
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: LIST
56326: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56327: LD_ADDR_VAR 0 18
56331: PUSH
56332: LD_INT 2
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 3
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 3
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: LIST
56367: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56368: LD_ADDR_VAR 0 19
56372: PUSH
56373: LD_INT 3
56375: PUSH
56376: LD_INT 2
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 3
56385: PUSH
56386: LD_INT 3
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 2
56395: PUSH
56396: LD_INT 3
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: LIST
56407: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56408: LD_ADDR_VAR 0 20
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: LD_INT 3
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: LD_INT 3
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: LD_INT 2
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: LIST
56448: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56449: LD_ADDR_VAR 0 21
56453: PUSH
56454: LD_INT 2
56456: NEG
56457: PUSH
56458: LD_INT 1
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 3
56467: NEG
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 3
56478: NEG
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: LIST
56492: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56493: LD_ADDR_VAR 0 22
56497: PUSH
56498: LD_INT 2
56500: NEG
56501: PUSH
56502: LD_INT 3
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 3
56512: NEG
56513: PUSH
56514: LD_INT 2
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 3
56524: NEG
56525: PUSH
56526: LD_INT 3
56528: NEG
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: LIST
56538: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56539: LD_ADDR_VAR 0 23
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: LD_INT 3
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: LD_INT 4
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: LD_INT 3
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: LIST
56582: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56583: LD_ADDR_VAR 0 24
56587: PUSH
56588: LD_INT 3
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 3
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 4
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: LIST
56623: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56624: LD_ADDR_VAR 0 25
56628: PUSH
56629: LD_INT 3
56631: PUSH
56632: LD_INT 3
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 4
56641: PUSH
56642: LD_INT 3
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 3
56651: PUSH
56652: LD_INT 4
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: LIST
56663: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56664: LD_ADDR_VAR 0 26
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: LD_INT 3
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: LD_INT 4
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: LD_INT 3
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: LIST
56704: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56705: LD_ADDR_VAR 0 27
56709: PUSH
56710: LD_INT 3
56712: NEG
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 3
56723: NEG
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 4
56734: NEG
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: LIST
56748: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56749: LD_ADDR_VAR 0 28
56753: PUSH
56754: LD_INT 3
56756: NEG
56757: PUSH
56758: LD_INT 3
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 3
56768: NEG
56769: PUSH
56770: LD_INT 4
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 4
56780: NEG
56781: PUSH
56782: LD_INT 3
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: LIST
56794: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56795: LD_ADDR_VAR 0 29
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: LD_INT 3
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 0
56814: PUSH
56815: LD_INT 3
56817: NEG
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 1
56825: PUSH
56826: LD_INT 2
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 1
56836: NEG
56837: PUSH
56838: LD_INT 4
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: LD_INT 4
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: LD_INT 3
56862: NEG
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: LD_INT 5
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: LD_INT 5
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: PUSH
56894: LD_INT 4
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: LD_INT 6
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: LD_INT 6
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: LD_INT 5
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56950: LD_ADDR_VAR 0 30
56954: PUSH
56955: LD_INT 2
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 3
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 3
56978: PUSH
56979: LD_INT 1
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 3
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 4
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 4
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 4
57019: PUSH
57020: LD_INT 1
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 5
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 5
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 5
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 6
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 6
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57093: LD_ADDR_VAR 0 31
57097: PUSH
57098: LD_INT 3
57100: PUSH
57101: LD_INT 2
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 3
57110: PUSH
57111: LD_INT 3
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 2
57120: PUSH
57121: LD_INT 3
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 4
57130: PUSH
57131: LD_INT 3
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 4
57140: PUSH
57141: LD_INT 4
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 3
57150: PUSH
57151: LD_INT 4
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 5
57160: PUSH
57161: LD_INT 4
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 5
57170: PUSH
57171: LD_INT 5
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 4
57180: PUSH
57181: LD_INT 5
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 6
57190: PUSH
57191: LD_INT 5
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 6
57200: PUSH
57201: LD_INT 6
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 5
57210: PUSH
57211: LD_INT 6
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57232: LD_ADDR_VAR 0 32
57236: PUSH
57237: LD_INT 1
57239: PUSH
57240: LD_INT 3
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: LD_INT 3
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 1
57259: NEG
57260: PUSH
57261: LD_INT 2
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 1
57270: PUSH
57271: LD_INT 4
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: LD_INT 4
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 1
57290: NEG
57291: PUSH
57292: LD_INT 3
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: LD_INT 5
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: LD_INT 5
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: LD_INT 4
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: LD_INT 6
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: LD_INT 6
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: LD_INT 5
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57375: LD_ADDR_VAR 0 33
57379: PUSH
57380: LD_INT 2
57382: NEG
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 3
57393: NEG
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 3
57404: NEG
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 3
57416: NEG
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 4
57427: NEG
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 4
57438: NEG
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 4
57450: NEG
57451: PUSH
57452: LD_INT 1
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 5
57461: NEG
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 5
57472: NEG
57473: PUSH
57474: LD_INT 1
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 5
57484: NEG
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 6
57495: NEG
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 6
57506: NEG
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57530: LD_ADDR_VAR 0 34
57534: PUSH
57535: LD_INT 2
57537: NEG
57538: PUSH
57539: LD_INT 3
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 3
57549: NEG
57550: PUSH
57551: LD_INT 2
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 3
57561: NEG
57562: PUSH
57563: LD_INT 3
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 3
57573: NEG
57574: PUSH
57575: LD_INT 4
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 4
57585: NEG
57586: PUSH
57587: LD_INT 3
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 4
57597: NEG
57598: PUSH
57599: LD_INT 4
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 4
57609: NEG
57610: PUSH
57611: LD_INT 5
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 5
57621: NEG
57622: PUSH
57623: LD_INT 4
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 5
57633: NEG
57634: PUSH
57635: LD_INT 5
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 5
57645: NEG
57646: PUSH
57647: LD_INT 6
57649: NEG
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 6
57657: NEG
57658: PUSH
57659: LD_INT 5
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 6
57669: NEG
57670: PUSH
57671: LD_INT 6
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57693: LD_ADDR_VAR 0 41
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: LD_INT 2
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: LD_INT 3
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: PUSH
57724: LD_INT 2
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: LIST
57736: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57737: LD_ADDR_VAR 0 42
57741: PUSH
57742: LD_INT 2
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 2
57754: PUSH
57755: LD_INT 1
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 3
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: LIST
57777: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57778: LD_ADDR_VAR 0 43
57782: PUSH
57783: LD_INT 2
57785: PUSH
57786: LD_INT 2
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 3
57795: PUSH
57796: LD_INT 2
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 2
57805: PUSH
57806: LD_INT 3
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: LIST
57817: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57818: LD_ADDR_VAR 0 44
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: LD_INT 2
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: LD_INT 3
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 1
57845: NEG
57846: PUSH
57847: LD_INT 2
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: LIST
57858: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57859: LD_ADDR_VAR 0 45
57863: PUSH
57864: LD_INT 2
57866: NEG
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 2
57877: NEG
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 3
57888: NEG
57889: PUSH
57890: LD_INT 1
57892: NEG
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: LIST
57902: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57903: LD_ADDR_VAR 0 46
57907: PUSH
57908: LD_INT 2
57910: NEG
57911: PUSH
57912: LD_INT 2
57914: NEG
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 2
57922: NEG
57923: PUSH
57924: LD_INT 3
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 3
57934: NEG
57935: PUSH
57936: LD_INT 2
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: LIST
57948: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57949: LD_ADDR_VAR 0 47
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: LD_INT 3
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: LD_INT 3
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57982: LD_ADDR_VAR 0 48
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: LD_INT 2
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 2
58000: PUSH
58001: LD_INT 1
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58013: LD_ADDR_VAR 0 49
58017: PUSH
58018: LD_INT 3
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 3
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58042: LD_ADDR_VAR 0 50
58046: PUSH
58047: LD_INT 2
58049: PUSH
58050: LD_INT 3
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: PUSH
58060: LD_INT 3
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58071: LD_ADDR_VAR 0 51
58075: PUSH
58076: LD_INT 1
58078: NEG
58079: PUSH
58080: LD_INT 2
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 2
58089: NEG
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58102: LD_ADDR_VAR 0 52
58106: PUSH
58107: LD_INT 3
58109: NEG
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 3
58121: NEG
58122: PUSH
58123: LD_INT 2
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58135: LD_ADDR_VAR 0 53
58139: PUSH
58140: LD_INT 1
58142: NEG
58143: PUSH
58144: LD_INT 3
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: LD_INT 3
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 1
58165: PUSH
58166: LD_INT 2
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: LIST
58178: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58179: LD_ADDR_VAR 0 54
58183: PUSH
58184: LD_INT 2
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 3
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 3
58207: PUSH
58208: LD_INT 1
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: LIST
58219: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58220: LD_ADDR_VAR 0 55
58224: PUSH
58225: LD_INT 3
58227: PUSH
58228: LD_INT 2
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 3
58237: PUSH
58238: LD_INT 3
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 2
58247: PUSH
58248: LD_INT 3
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: LIST
58259: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58260: LD_ADDR_VAR 0 56
58264: PUSH
58265: LD_INT 1
58267: PUSH
58268: LD_INT 3
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 0
58277: PUSH
58278: LD_INT 3
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: LD_INT 2
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: LIST
58300: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58301: LD_ADDR_VAR 0 57
58305: PUSH
58306: LD_INT 2
58308: NEG
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 3
58319: NEG
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 3
58330: NEG
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: LIST
58344: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58345: LD_ADDR_VAR 0 58
58349: PUSH
58350: LD_INT 2
58352: NEG
58353: PUSH
58354: LD_INT 3
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 3
58364: NEG
58365: PUSH
58366: LD_INT 2
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 3
58376: NEG
58377: PUSH
58378: LD_INT 3
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: LIST
58390: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58391: LD_ADDR_VAR 0 59
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: LD_INT 2
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: LD_INT 2
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: LD_INT 1
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: LIST
58434: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58435: LD_ADDR_VAR 0 60
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: LD_INT 1
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: LIST
58475: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58476: LD_ADDR_VAR 0 61
58480: PUSH
58481: LD_INT 2
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 2
58493: PUSH
58494: LD_INT 2
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 1
58503: PUSH
58504: LD_INT 2
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: LIST
58515: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58516: LD_ADDR_VAR 0 62
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: LD_INT 2
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: LD_INT 2
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 1
58543: NEG
58544: PUSH
58545: LD_INT 1
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: LIST
58556: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58557: LD_ADDR_VAR 0 63
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: LD_INT 1
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 2
58575: NEG
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 2
58586: NEG
58587: PUSH
58588: LD_INT 1
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: LIST
58600: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58601: LD_ADDR_VAR 0 64
58605: PUSH
58606: LD_INT 1
58608: NEG
58609: PUSH
58610: LD_INT 2
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 2
58620: NEG
58621: PUSH
58622: LD_INT 1
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 2
58632: NEG
58633: PUSH
58634: LD_INT 2
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: LIST
58646: ST_TO_ADDR
// end ; 2 :
58647: GO 61913
58649: LD_INT 2
58651: DOUBLE
58652: EQUAL
58653: IFTRUE 58657
58655: GO 61912
58657: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58658: LD_ADDR_VAR 0 29
58662: PUSH
58663: LD_INT 4
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 4
58675: PUSH
58676: LD_INT 1
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 5
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 5
58696: PUSH
58697: LD_INT 1
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 4
58706: PUSH
58707: LD_INT 1
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 3
58716: PUSH
58717: LD_INT 0
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 3
58726: PUSH
58727: LD_INT 1
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 3
58737: PUSH
58738: LD_INT 2
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 5
58748: PUSH
58749: LD_INT 2
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 3
58758: PUSH
58759: LD_INT 3
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 3
58768: PUSH
58769: LD_INT 2
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 4
58778: PUSH
58779: LD_INT 3
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 4
58788: PUSH
58789: LD_INT 4
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 3
58798: PUSH
58799: LD_INT 4
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 2
58808: PUSH
58809: LD_INT 3
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 2
58818: PUSH
58819: LD_INT 2
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 4
58828: PUSH
58829: LD_INT 2
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 2
58838: PUSH
58839: LD_INT 4
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 0
58848: PUSH
58849: LD_INT 4
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: LD_INT 3
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: LD_INT 4
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 1
58878: PUSH
58879: LD_INT 5
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 0
58888: PUSH
58889: LD_INT 5
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 1
58898: NEG
58899: PUSH
58900: LD_INT 4
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: LD_INT 3
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 2
58920: PUSH
58921: LD_INT 5
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 2
58930: NEG
58931: PUSH
58932: LD_INT 3
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 3
58941: NEG
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 3
58952: NEG
58953: PUSH
58954: LD_INT 1
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 2
58964: NEG
58965: PUSH
58966: LD_INT 0
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 2
58975: NEG
58976: PUSH
58977: LD_INT 1
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 3
58986: NEG
58987: PUSH
58988: LD_INT 1
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 4
58997: NEG
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 4
59008: NEG
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 4
59020: NEG
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 2
59032: NEG
59033: PUSH
59034: LD_INT 2
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 4
59043: NEG
59044: PUSH
59045: LD_INT 4
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 4
59055: NEG
59056: PUSH
59057: LD_INT 5
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 3
59067: NEG
59068: PUSH
59069: LD_INT 4
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 3
59079: NEG
59080: PUSH
59081: LD_INT 3
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 4
59091: NEG
59092: PUSH
59093: LD_INT 3
59095: NEG
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 5
59103: NEG
59104: PUSH
59105: LD_INT 4
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 5
59115: NEG
59116: PUSH
59117: LD_INT 5
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 3
59127: NEG
59128: PUSH
59129: LD_INT 5
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 5
59139: NEG
59140: PUSH
59141: LD_INT 3
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59196: LD_ADDR_VAR 0 30
59200: PUSH
59201: LD_INT 4
59203: PUSH
59204: LD_INT 4
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 4
59213: PUSH
59214: LD_INT 3
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 5
59223: PUSH
59224: LD_INT 4
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 5
59233: PUSH
59234: LD_INT 5
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 4
59243: PUSH
59244: LD_INT 5
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 3
59253: PUSH
59254: LD_INT 4
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 3
59263: PUSH
59264: LD_INT 3
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 5
59273: PUSH
59274: LD_INT 3
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 3
59283: PUSH
59284: LD_INT 5
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: LD_INT 3
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: LD_INT 2
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 1
59313: PUSH
59314: LD_INT 3
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 1
59323: PUSH
59324: LD_INT 4
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: LD_INT 4
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 1
59343: NEG
59344: PUSH
59345: LD_INT 3
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 1
59354: NEG
59355: PUSH
59356: LD_INT 2
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 2
59365: PUSH
59366: LD_INT 4
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 2
59375: NEG
59376: PUSH
59377: LD_INT 2
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 4
59386: NEG
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 4
59397: NEG
59398: PUSH
59399: LD_INT 1
59401: NEG
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 3
59409: NEG
59410: PUSH
59411: LD_INT 0
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 3
59420: NEG
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 4
59431: NEG
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 5
59442: NEG
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 5
59453: NEG
59454: PUSH
59455: LD_INT 1
59457: NEG
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 5
59465: NEG
59466: PUSH
59467: LD_INT 2
59469: NEG
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 3
59477: NEG
59478: PUSH
59479: LD_INT 2
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 3
59488: NEG
59489: PUSH
59490: LD_INT 3
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 3
59500: NEG
59501: PUSH
59502: LD_INT 4
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 2
59512: NEG
59513: PUSH
59514: LD_INT 3
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 2
59524: NEG
59525: PUSH
59526: LD_INT 2
59528: NEG
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 3
59536: NEG
59537: PUSH
59538: LD_INT 2
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 4
59548: NEG
59549: PUSH
59550: LD_INT 3
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 4
59560: NEG
59561: PUSH
59562: LD_INT 4
59564: NEG
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 2
59572: NEG
59573: PUSH
59574: LD_INT 4
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 4
59584: NEG
59585: PUSH
59586: LD_INT 2
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 0
59596: PUSH
59597: LD_INT 4
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: LD_INT 5
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 1
59618: PUSH
59619: LD_INT 4
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: LD_INT 3
59632: NEG
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 0
59640: PUSH
59641: LD_INT 3
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: NEG
59652: PUSH
59653: LD_INT 4
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 1
59663: NEG
59664: PUSH
59665: LD_INT 5
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 2
59675: PUSH
59676: LD_INT 3
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 2
59686: NEG
59687: PUSH
59688: LD_INT 5
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59743: LD_ADDR_VAR 0 31
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: LD_INT 4
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: LD_INT 3
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 1
59770: PUSH
59771: LD_INT 4
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: LD_INT 5
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 0
59790: PUSH
59791: LD_INT 5
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 1
59800: NEG
59801: PUSH
59802: LD_INT 4
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 1
59811: NEG
59812: PUSH
59813: LD_INT 3
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 2
59822: PUSH
59823: LD_INT 5
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 2
59832: NEG
59833: PUSH
59834: LD_INT 3
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 3
59843: NEG
59844: PUSH
59845: LD_INT 0
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 3
59854: NEG
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 2
59866: NEG
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 2
59877: NEG
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 3
59888: NEG
59889: PUSH
59890: LD_INT 1
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 4
59899: NEG
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 4
59910: NEG
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 4
59922: NEG
59923: PUSH
59924: LD_INT 2
59926: NEG
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 2
59934: NEG
59935: PUSH
59936: LD_INT 2
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 4
59945: NEG
59946: PUSH
59947: LD_INT 4
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 4
59957: NEG
59958: PUSH
59959: LD_INT 5
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 3
59969: NEG
59970: PUSH
59971: LD_INT 4
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 3
59981: NEG
59982: PUSH
59983: LD_INT 3
59985: NEG
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 4
59993: NEG
59994: PUSH
59995: LD_INT 3
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 5
60005: NEG
60006: PUSH
60007: LD_INT 4
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 5
60017: NEG
60018: PUSH
60019: LD_INT 5
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 3
60029: NEG
60030: PUSH
60031: LD_INT 5
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 5
60041: NEG
60042: PUSH
60043: LD_INT 3
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 0
60053: PUSH
60054: LD_INT 3
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 0
60064: PUSH
60065: LD_INT 4
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 1
60075: PUSH
60076: LD_INT 3
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 1
60086: PUSH
60087: LD_INT 2
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: LD_INT 2
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 1
60108: NEG
60109: PUSH
60110: LD_INT 3
60112: NEG
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 1
60120: NEG
60121: PUSH
60122: LD_INT 4
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 2
60132: PUSH
60133: LD_INT 2
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 2
60143: NEG
60144: PUSH
60145: LD_INT 4
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 4
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 4
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 5
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 5
60186: PUSH
60187: LD_INT 1
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 4
60196: PUSH
60197: LD_INT 1
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 3
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 3
60216: PUSH
60217: LD_INT 1
60219: NEG
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 3
60227: PUSH
60228: LD_INT 2
60230: NEG
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 5
60238: PUSH
60239: LD_INT 2
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60293: LD_ADDR_VAR 0 32
60297: PUSH
60298: LD_INT 4
60300: NEG
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 4
60311: NEG
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 3
60323: NEG
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 3
60334: NEG
60335: PUSH
60336: LD_INT 1
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 4
60345: NEG
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 5
60356: NEG
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 5
60367: NEG
60368: PUSH
60369: LD_INT 1
60371: NEG
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 5
60379: NEG
60380: PUSH
60381: LD_INT 2
60383: NEG
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 3
60391: NEG
60392: PUSH
60393: LD_INT 2
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 3
60402: NEG
60403: PUSH
60404: LD_INT 3
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 3
60414: NEG
60415: PUSH
60416: LD_INT 4
60418: NEG
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 2
60426: NEG
60427: PUSH
60428: LD_INT 3
60430: NEG
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 2
60438: NEG
60439: PUSH
60440: LD_INT 2
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 3
60450: NEG
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 4
60462: NEG
60463: PUSH
60464: LD_INT 3
60466: NEG
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 4
60474: NEG
60475: PUSH
60476: LD_INT 4
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 2
60486: NEG
60487: PUSH
60488: LD_INT 4
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 4
60498: NEG
60499: PUSH
60500: LD_INT 2
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: LD_INT 4
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: LD_INT 5
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 1
60532: PUSH
60533: LD_INT 4
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 1
60543: PUSH
60544: LD_INT 3
60546: NEG
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: LD_INT 3
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 1
60565: NEG
60566: PUSH
60567: LD_INT 4
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: LD_INT 5
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 2
60589: PUSH
60590: LD_INT 3
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 2
60600: NEG
60601: PUSH
60602: LD_INT 5
60604: NEG
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 3
60612: PUSH
60613: LD_INT 0
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 3
60622: PUSH
60623: LD_INT 1
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 4
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 4
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 3
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 2
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 2
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 2
60684: PUSH
60685: LD_INT 2
60687: NEG
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 4
60695: PUSH
60696: LD_INT 2
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 4
60705: PUSH
60706: LD_INT 4
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 4
60715: PUSH
60716: LD_INT 3
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 5
60725: PUSH
60726: LD_INT 4
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 5
60735: PUSH
60736: LD_INT 5
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 4
60745: PUSH
60746: LD_INT 5
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 3
60755: PUSH
60756: LD_INT 4
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 3
60765: PUSH
60766: LD_INT 3
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 5
60775: PUSH
60776: LD_INT 3
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 3
60785: PUSH
60786: LD_INT 5
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60840: LD_ADDR_VAR 0 33
60844: PUSH
60845: LD_INT 4
60847: NEG
60848: PUSH
60849: LD_INT 4
60851: NEG
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 4
60859: NEG
60860: PUSH
60861: LD_INT 5
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 3
60871: NEG
60872: PUSH
60873: LD_INT 4
60875: NEG
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 3
60883: NEG
60884: PUSH
60885: LD_INT 3
60887: NEG
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 4
60895: NEG
60896: PUSH
60897: LD_INT 3
60899: NEG
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 5
60907: NEG
60908: PUSH
60909: LD_INT 4
60911: NEG
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 5
60919: NEG
60920: PUSH
60921: LD_INT 5
60923: NEG
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 3
60931: NEG
60932: PUSH
60933: LD_INT 5
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 5
60943: NEG
60944: PUSH
60945: LD_INT 3
60947: NEG
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 0
60955: PUSH
60956: LD_INT 3
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: LD_INT 4
60969: NEG
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 1
60977: PUSH
60978: LD_INT 3
60980: NEG
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 1
60988: PUSH
60989: LD_INT 2
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: LD_INT 2
61002: NEG
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 1
61010: NEG
61011: PUSH
61012: LD_INT 3
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: NEG
61023: PUSH
61024: LD_INT 4
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 2
61034: PUSH
61035: LD_INT 2
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 2
61045: NEG
61046: PUSH
61047: LD_INT 4
61049: NEG
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 4
61057: PUSH
61058: LD_INT 0
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 4
61067: PUSH
61068: LD_INT 1
61070: NEG
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 5
61078: PUSH
61079: LD_INT 0
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 5
61088: PUSH
61089: LD_INT 1
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 4
61098: PUSH
61099: LD_INT 1
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 3
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 3
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 3
61129: PUSH
61130: LD_INT 2
61132: NEG
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 5
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 3
61150: PUSH
61151: LD_INT 3
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 3
61160: PUSH
61161: LD_INT 2
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 4
61170: PUSH
61171: LD_INT 3
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 4
61180: PUSH
61181: LD_INT 4
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 3
61190: PUSH
61191: LD_INT 4
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 2
61200: PUSH
61201: LD_INT 3
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 2
61210: PUSH
61211: LD_INT 2
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 4
61220: PUSH
61221: LD_INT 2
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 2
61230: PUSH
61231: LD_INT 4
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 0
61240: PUSH
61241: LD_INT 4
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 0
61250: PUSH
61251: LD_INT 3
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 1
61260: PUSH
61261: LD_INT 4
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 1
61270: PUSH
61271: LD_INT 5
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: LD_INT 5
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 1
61290: NEG
61291: PUSH
61292: LD_INT 4
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 1
61301: NEG
61302: PUSH
61303: LD_INT 3
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 2
61312: PUSH
61313: LD_INT 5
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 2
61322: NEG
61323: PUSH
61324: LD_INT 3
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61378: LD_ADDR_VAR 0 34
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: LD_INT 4
61388: NEG
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 0
61396: PUSH
61397: LD_INT 5
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 1
61407: PUSH
61408: LD_INT 4
61410: NEG
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 1
61418: PUSH
61419: LD_INT 3
61421: NEG
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 0
61429: PUSH
61430: LD_INT 3
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 1
61440: NEG
61441: PUSH
61442: LD_INT 4
61444: NEG
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 1
61452: NEG
61453: PUSH
61454: LD_INT 5
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 2
61464: PUSH
61465: LD_INT 3
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 2
61475: NEG
61476: PUSH
61477: LD_INT 5
61479: NEG
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 3
61487: PUSH
61488: LD_INT 0
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 3
61497: PUSH
61498: LD_INT 1
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 4
61508: PUSH
61509: LD_INT 0
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 4
61518: PUSH
61519: LD_INT 1
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 3
61528: PUSH
61529: LD_INT 1
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 2
61538: PUSH
61539: LD_INT 0
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 2
61548: PUSH
61549: LD_INT 1
61551: NEG
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 2
61559: PUSH
61560: LD_INT 2
61562: NEG
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 4
61570: PUSH
61571: LD_INT 2
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 4
61580: PUSH
61581: LD_INT 4
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 4
61590: PUSH
61591: LD_INT 3
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 5
61600: PUSH
61601: LD_INT 4
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 5
61610: PUSH
61611: LD_INT 5
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 4
61620: PUSH
61621: LD_INT 5
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 3
61630: PUSH
61631: LD_INT 4
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 3
61640: PUSH
61641: LD_INT 3
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 5
61650: PUSH
61651: LD_INT 3
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 3
61660: PUSH
61661: LD_INT 5
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 0
61670: PUSH
61671: LD_INT 3
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 0
61680: PUSH
61681: LD_INT 2
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 1
61690: PUSH
61691: LD_INT 3
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 1
61700: PUSH
61701: LD_INT 4
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 0
61710: PUSH
61711: LD_INT 4
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 1
61720: NEG
61721: PUSH
61722: LD_INT 3
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 1
61731: NEG
61732: PUSH
61733: LD_INT 2
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 2
61742: PUSH
61743: LD_INT 4
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 2
61752: NEG
61753: PUSH
61754: LD_INT 2
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 4
61763: NEG
61764: PUSH
61765: LD_INT 0
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 4
61774: NEG
61775: PUSH
61776: LD_INT 1
61778: NEG
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 3
61786: NEG
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 3
61797: NEG
61798: PUSH
61799: LD_INT 1
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 4
61808: NEG
61809: PUSH
61810: LD_INT 1
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 5
61819: NEG
61820: PUSH
61821: LD_INT 0
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 5
61830: NEG
61831: PUSH
61832: LD_INT 1
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 5
61842: NEG
61843: PUSH
61844: LD_INT 2
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 3
61854: NEG
61855: PUSH
61856: LD_INT 2
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: ST_TO_ADDR
// end ; end ;
61910: GO 61913
61912: POP
// case btype of b_depot , b_warehouse :
61913: LD_VAR 0 1
61917: PUSH
61918: LD_INT 0
61920: DOUBLE
61921: EQUAL
61922: IFTRUE 61932
61924: LD_INT 1
61926: DOUBLE
61927: EQUAL
61928: IFTRUE 61932
61930: GO 62133
61932: POP
// case nation of nation_american :
61933: LD_VAR 0 5
61937: PUSH
61938: LD_INT 1
61940: DOUBLE
61941: EQUAL
61942: IFTRUE 61946
61944: GO 62002
61946: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61947: LD_ADDR_VAR 0 9
61951: PUSH
61952: LD_VAR 0 11
61956: PUSH
61957: LD_VAR 0 12
61961: PUSH
61962: LD_VAR 0 13
61966: PUSH
61967: LD_VAR 0 14
61971: PUSH
61972: LD_VAR 0 15
61976: PUSH
61977: LD_VAR 0 16
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: PUSH
61990: LD_VAR 0 4
61994: PUSH
61995: LD_INT 1
61997: PLUS
61998: ARRAY
61999: ST_TO_ADDR
62000: GO 62131
62002: LD_INT 2
62004: DOUBLE
62005: EQUAL
62006: IFTRUE 62010
62008: GO 62066
62010: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62011: LD_ADDR_VAR 0 9
62015: PUSH
62016: LD_VAR 0 17
62020: PUSH
62021: LD_VAR 0 18
62025: PUSH
62026: LD_VAR 0 19
62030: PUSH
62031: LD_VAR 0 20
62035: PUSH
62036: LD_VAR 0 21
62040: PUSH
62041: LD_VAR 0 22
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: PUSH
62054: LD_VAR 0 4
62058: PUSH
62059: LD_INT 1
62061: PLUS
62062: ARRAY
62063: ST_TO_ADDR
62064: GO 62131
62066: LD_INT 3
62068: DOUBLE
62069: EQUAL
62070: IFTRUE 62074
62072: GO 62130
62074: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62075: LD_ADDR_VAR 0 9
62079: PUSH
62080: LD_VAR 0 23
62084: PUSH
62085: LD_VAR 0 24
62089: PUSH
62090: LD_VAR 0 25
62094: PUSH
62095: LD_VAR 0 26
62099: PUSH
62100: LD_VAR 0 27
62104: PUSH
62105: LD_VAR 0 28
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: PUSH
62118: LD_VAR 0 4
62122: PUSH
62123: LD_INT 1
62125: PLUS
62126: ARRAY
62127: ST_TO_ADDR
62128: GO 62131
62130: POP
62131: GO 62686
62133: LD_INT 2
62135: DOUBLE
62136: EQUAL
62137: IFTRUE 62147
62139: LD_INT 3
62141: DOUBLE
62142: EQUAL
62143: IFTRUE 62147
62145: GO 62203
62147: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62148: LD_ADDR_VAR 0 9
62152: PUSH
62153: LD_VAR 0 29
62157: PUSH
62158: LD_VAR 0 30
62162: PUSH
62163: LD_VAR 0 31
62167: PUSH
62168: LD_VAR 0 32
62172: PUSH
62173: LD_VAR 0 33
62177: PUSH
62178: LD_VAR 0 34
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: PUSH
62191: LD_VAR 0 4
62195: PUSH
62196: LD_INT 1
62198: PLUS
62199: ARRAY
62200: ST_TO_ADDR
62201: GO 62686
62203: LD_INT 16
62205: DOUBLE
62206: EQUAL
62207: IFTRUE 62265
62209: LD_INT 17
62211: DOUBLE
62212: EQUAL
62213: IFTRUE 62265
62215: LD_INT 18
62217: DOUBLE
62218: EQUAL
62219: IFTRUE 62265
62221: LD_INT 19
62223: DOUBLE
62224: EQUAL
62225: IFTRUE 62265
62227: LD_INT 22
62229: DOUBLE
62230: EQUAL
62231: IFTRUE 62265
62233: LD_INT 20
62235: DOUBLE
62236: EQUAL
62237: IFTRUE 62265
62239: LD_INT 21
62241: DOUBLE
62242: EQUAL
62243: IFTRUE 62265
62245: LD_INT 23
62247: DOUBLE
62248: EQUAL
62249: IFTRUE 62265
62251: LD_INT 24
62253: DOUBLE
62254: EQUAL
62255: IFTRUE 62265
62257: LD_INT 25
62259: DOUBLE
62260: EQUAL
62261: IFTRUE 62265
62263: GO 62321
62265: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62266: LD_ADDR_VAR 0 9
62270: PUSH
62271: LD_VAR 0 35
62275: PUSH
62276: LD_VAR 0 36
62280: PUSH
62281: LD_VAR 0 37
62285: PUSH
62286: LD_VAR 0 38
62290: PUSH
62291: LD_VAR 0 39
62295: PUSH
62296: LD_VAR 0 40
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: PUSH
62309: LD_VAR 0 4
62313: PUSH
62314: LD_INT 1
62316: PLUS
62317: ARRAY
62318: ST_TO_ADDR
62319: GO 62686
62321: LD_INT 6
62323: DOUBLE
62324: EQUAL
62325: IFTRUE 62377
62327: LD_INT 7
62329: DOUBLE
62330: EQUAL
62331: IFTRUE 62377
62333: LD_INT 8
62335: DOUBLE
62336: EQUAL
62337: IFTRUE 62377
62339: LD_INT 13
62341: DOUBLE
62342: EQUAL
62343: IFTRUE 62377
62345: LD_INT 12
62347: DOUBLE
62348: EQUAL
62349: IFTRUE 62377
62351: LD_INT 15
62353: DOUBLE
62354: EQUAL
62355: IFTRUE 62377
62357: LD_INT 11
62359: DOUBLE
62360: EQUAL
62361: IFTRUE 62377
62363: LD_INT 14
62365: DOUBLE
62366: EQUAL
62367: IFTRUE 62377
62369: LD_INT 10
62371: DOUBLE
62372: EQUAL
62373: IFTRUE 62377
62375: GO 62433
62377: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62378: LD_ADDR_VAR 0 9
62382: PUSH
62383: LD_VAR 0 41
62387: PUSH
62388: LD_VAR 0 42
62392: PUSH
62393: LD_VAR 0 43
62397: PUSH
62398: LD_VAR 0 44
62402: PUSH
62403: LD_VAR 0 45
62407: PUSH
62408: LD_VAR 0 46
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: PUSH
62421: LD_VAR 0 4
62425: PUSH
62426: LD_INT 1
62428: PLUS
62429: ARRAY
62430: ST_TO_ADDR
62431: GO 62686
62433: LD_INT 36
62435: DOUBLE
62436: EQUAL
62437: IFTRUE 62441
62439: GO 62497
62441: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62442: LD_ADDR_VAR 0 9
62446: PUSH
62447: LD_VAR 0 47
62451: PUSH
62452: LD_VAR 0 48
62456: PUSH
62457: LD_VAR 0 49
62461: PUSH
62462: LD_VAR 0 50
62466: PUSH
62467: LD_VAR 0 51
62471: PUSH
62472: LD_VAR 0 52
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: PUSH
62485: LD_VAR 0 4
62489: PUSH
62490: LD_INT 1
62492: PLUS
62493: ARRAY
62494: ST_TO_ADDR
62495: GO 62686
62497: LD_INT 4
62499: DOUBLE
62500: EQUAL
62501: IFTRUE 62523
62503: LD_INT 5
62505: DOUBLE
62506: EQUAL
62507: IFTRUE 62523
62509: LD_INT 34
62511: DOUBLE
62512: EQUAL
62513: IFTRUE 62523
62515: LD_INT 37
62517: DOUBLE
62518: EQUAL
62519: IFTRUE 62523
62521: GO 62579
62523: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62524: LD_ADDR_VAR 0 9
62528: PUSH
62529: LD_VAR 0 53
62533: PUSH
62534: LD_VAR 0 54
62538: PUSH
62539: LD_VAR 0 55
62543: PUSH
62544: LD_VAR 0 56
62548: PUSH
62549: LD_VAR 0 57
62553: PUSH
62554: LD_VAR 0 58
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: PUSH
62567: LD_VAR 0 4
62571: PUSH
62572: LD_INT 1
62574: PLUS
62575: ARRAY
62576: ST_TO_ADDR
62577: GO 62686
62579: LD_INT 31
62581: DOUBLE
62582: EQUAL
62583: IFTRUE 62629
62585: LD_INT 32
62587: DOUBLE
62588: EQUAL
62589: IFTRUE 62629
62591: LD_INT 33
62593: DOUBLE
62594: EQUAL
62595: IFTRUE 62629
62597: LD_INT 27
62599: DOUBLE
62600: EQUAL
62601: IFTRUE 62629
62603: LD_INT 26
62605: DOUBLE
62606: EQUAL
62607: IFTRUE 62629
62609: LD_INT 28
62611: DOUBLE
62612: EQUAL
62613: IFTRUE 62629
62615: LD_INT 29
62617: DOUBLE
62618: EQUAL
62619: IFTRUE 62629
62621: LD_INT 30
62623: DOUBLE
62624: EQUAL
62625: IFTRUE 62629
62627: GO 62685
62629: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62630: LD_ADDR_VAR 0 9
62634: PUSH
62635: LD_VAR 0 59
62639: PUSH
62640: LD_VAR 0 60
62644: PUSH
62645: LD_VAR 0 61
62649: PUSH
62650: LD_VAR 0 62
62654: PUSH
62655: LD_VAR 0 63
62659: PUSH
62660: LD_VAR 0 64
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: PUSH
62673: LD_VAR 0 4
62677: PUSH
62678: LD_INT 1
62680: PLUS
62681: ARRAY
62682: ST_TO_ADDR
62683: GO 62686
62685: POP
// temp_list2 = [ ] ;
62686: LD_ADDR_VAR 0 10
62690: PUSH
62691: EMPTY
62692: ST_TO_ADDR
// for i in temp_list do
62693: LD_ADDR_VAR 0 8
62697: PUSH
62698: LD_VAR 0 9
62702: PUSH
62703: FOR_IN
62704: IFFALSE 62756
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62706: LD_ADDR_VAR 0 10
62710: PUSH
62711: LD_VAR 0 10
62715: PUSH
62716: LD_VAR 0 8
62720: PUSH
62721: LD_INT 1
62723: ARRAY
62724: PUSH
62725: LD_VAR 0 2
62729: PLUS
62730: PUSH
62731: LD_VAR 0 8
62735: PUSH
62736: LD_INT 2
62738: ARRAY
62739: PUSH
62740: LD_VAR 0 3
62744: PLUS
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: EMPTY
62751: LIST
62752: ADD
62753: ST_TO_ADDR
62754: GO 62703
62756: POP
62757: POP
// result = temp_list2 ;
62758: LD_ADDR_VAR 0 7
62762: PUSH
62763: LD_VAR 0 10
62767: ST_TO_ADDR
// end ;
62768: LD_VAR 0 7
62772: RET
// export function EnemyInRange ( unit , dist ) ; begin
62773: LD_INT 0
62775: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62776: LD_ADDR_VAR 0 3
62780: PUSH
62781: LD_VAR 0 1
62785: PPUSH
62786: CALL_OW 255
62790: PPUSH
62791: LD_VAR 0 1
62795: PPUSH
62796: CALL_OW 250
62800: PPUSH
62801: LD_VAR 0 1
62805: PPUSH
62806: CALL_OW 251
62810: PPUSH
62811: LD_VAR 0 2
62815: PPUSH
62816: CALL 36169 0 4
62820: PUSH
62821: LD_INT 4
62823: ARRAY
62824: ST_TO_ADDR
// end ;
62825: LD_VAR 0 3
62829: RET
// export function PlayerSeeMe ( unit ) ; begin
62830: LD_INT 0
62832: PPUSH
// result := See ( your_side , unit ) ;
62833: LD_ADDR_VAR 0 2
62837: PUSH
62838: LD_OWVAR 2
62842: PPUSH
62843: LD_VAR 0 1
62847: PPUSH
62848: CALL_OW 292
62852: ST_TO_ADDR
// end ;
62853: LD_VAR 0 2
62857: RET
// export function ReverseDir ( unit ) ; begin
62858: LD_INT 0
62860: PPUSH
// if not unit then
62861: LD_VAR 0 1
62865: NOT
62866: IFFALSE 62870
// exit ;
62868: GO 62893
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62870: LD_ADDR_VAR 0 2
62874: PUSH
62875: LD_VAR 0 1
62879: PPUSH
62880: CALL_OW 254
62884: PUSH
62885: LD_INT 3
62887: PLUS
62888: PUSH
62889: LD_INT 6
62891: MOD
62892: ST_TO_ADDR
// end ;
62893: LD_VAR 0 2
62897: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62898: LD_INT 0
62900: PPUSH
62901: PPUSH
62902: PPUSH
62903: PPUSH
62904: PPUSH
// if not hexes then
62905: LD_VAR 0 2
62909: NOT
62910: IFFALSE 62914
// exit ;
62912: GO 63062
// dist := 9999 ;
62914: LD_ADDR_VAR 0 5
62918: PUSH
62919: LD_INT 9999
62921: ST_TO_ADDR
// for i = 1 to hexes do
62922: LD_ADDR_VAR 0 4
62926: PUSH
62927: DOUBLE
62928: LD_INT 1
62930: DEC
62931: ST_TO_ADDR
62932: LD_VAR 0 2
62936: PUSH
62937: FOR_TO
62938: IFFALSE 63050
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62940: LD_VAR 0 1
62944: PPUSH
62945: LD_VAR 0 2
62949: PUSH
62950: LD_VAR 0 4
62954: ARRAY
62955: PUSH
62956: LD_INT 1
62958: ARRAY
62959: PPUSH
62960: LD_VAR 0 2
62964: PUSH
62965: LD_VAR 0 4
62969: ARRAY
62970: PUSH
62971: LD_INT 2
62973: ARRAY
62974: PPUSH
62975: CALL_OW 297
62979: PUSH
62980: LD_VAR 0 5
62984: LESS
62985: IFFALSE 63048
// begin hex := hexes [ i ] ;
62987: LD_ADDR_VAR 0 7
62991: PUSH
62992: LD_VAR 0 2
62996: PUSH
62997: LD_VAR 0 4
63001: ARRAY
63002: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63003: LD_ADDR_VAR 0 5
63007: PUSH
63008: LD_VAR 0 1
63012: PPUSH
63013: LD_VAR 0 2
63017: PUSH
63018: LD_VAR 0 4
63022: ARRAY
63023: PUSH
63024: LD_INT 1
63026: ARRAY
63027: PPUSH
63028: LD_VAR 0 2
63032: PUSH
63033: LD_VAR 0 4
63037: ARRAY
63038: PUSH
63039: LD_INT 2
63041: ARRAY
63042: PPUSH
63043: CALL_OW 297
63047: ST_TO_ADDR
// end ; end ;
63048: GO 62937
63050: POP
63051: POP
// result := hex ;
63052: LD_ADDR_VAR 0 3
63056: PUSH
63057: LD_VAR 0 7
63061: ST_TO_ADDR
// end ;
63062: LD_VAR 0 3
63066: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63067: LD_INT 0
63069: PPUSH
63070: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63071: LD_VAR 0 1
63075: NOT
63076: PUSH
63077: LD_VAR 0 1
63081: PUSH
63082: LD_INT 21
63084: PUSH
63085: LD_INT 2
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 23
63094: PUSH
63095: LD_INT 2
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PPUSH
63106: CALL_OW 69
63110: IN
63111: NOT
63112: OR
63113: IFFALSE 63117
// exit ;
63115: GO 63164
// for i = 1 to 3 do
63117: LD_ADDR_VAR 0 3
63121: PUSH
63122: DOUBLE
63123: LD_INT 1
63125: DEC
63126: ST_TO_ADDR
63127: LD_INT 3
63129: PUSH
63130: FOR_TO
63131: IFFALSE 63162
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63133: LD_VAR 0 1
63137: PPUSH
63138: CALL_OW 250
63142: PPUSH
63143: LD_VAR 0 1
63147: PPUSH
63148: CALL_OW 251
63152: PPUSH
63153: LD_INT 1
63155: PPUSH
63156: CALL_OW 453
63160: GO 63130
63162: POP
63163: POP
// end ;
63164: LD_VAR 0 2
63168: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63169: LD_INT 0
63171: PPUSH
63172: PPUSH
63173: PPUSH
63174: PPUSH
63175: PPUSH
63176: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63177: LD_VAR 0 1
63181: NOT
63182: PUSH
63183: LD_VAR 0 2
63187: NOT
63188: OR
63189: PUSH
63190: LD_VAR 0 1
63194: PPUSH
63195: CALL_OW 314
63199: OR
63200: IFFALSE 63204
// exit ;
63202: GO 63645
// x := GetX ( enemy_unit ) ;
63204: LD_ADDR_VAR 0 7
63208: PUSH
63209: LD_VAR 0 2
63213: PPUSH
63214: CALL_OW 250
63218: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63219: LD_ADDR_VAR 0 8
63223: PUSH
63224: LD_VAR 0 2
63228: PPUSH
63229: CALL_OW 251
63233: ST_TO_ADDR
// if not x or not y then
63234: LD_VAR 0 7
63238: NOT
63239: PUSH
63240: LD_VAR 0 8
63244: NOT
63245: OR
63246: IFFALSE 63250
// exit ;
63248: GO 63645
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63250: LD_ADDR_VAR 0 6
63254: PUSH
63255: LD_VAR 0 7
63259: PPUSH
63260: LD_INT 0
63262: PPUSH
63263: LD_INT 4
63265: PPUSH
63266: CALL_OW 272
63270: PUSH
63271: LD_VAR 0 8
63275: PPUSH
63276: LD_INT 0
63278: PPUSH
63279: LD_INT 4
63281: PPUSH
63282: CALL_OW 273
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_VAR 0 7
63295: PPUSH
63296: LD_INT 1
63298: PPUSH
63299: LD_INT 4
63301: PPUSH
63302: CALL_OW 272
63306: PUSH
63307: LD_VAR 0 8
63311: PPUSH
63312: LD_INT 1
63314: PPUSH
63315: LD_INT 4
63317: PPUSH
63318: CALL_OW 273
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_VAR 0 7
63331: PPUSH
63332: LD_INT 2
63334: PPUSH
63335: LD_INT 4
63337: PPUSH
63338: CALL_OW 272
63342: PUSH
63343: LD_VAR 0 8
63347: PPUSH
63348: LD_INT 2
63350: PPUSH
63351: LD_INT 4
63353: PPUSH
63354: CALL_OW 273
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_VAR 0 7
63367: PPUSH
63368: LD_INT 3
63370: PPUSH
63371: LD_INT 4
63373: PPUSH
63374: CALL_OW 272
63378: PUSH
63379: LD_VAR 0 8
63383: PPUSH
63384: LD_INT 3
63386: PPUSH
63387: LD_INT 4
63389: PPUSH
63390: CALL_OW 273
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_VAR 0 7
63403: PPUSH
63404: LD_INT 4
63406: PPUSH
63407: LD_INT 4
63409: PPUSH
63410: CALL_OW 272
63414: PUSH
63415: LD_VAR 0 8
63419: PPUSH
63420: LD_INT 4
63422: PPUSH
63423: LD_INT 4
63425: PPUSH
63426: CALL_OW 273
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_VAR 0 7
63439: PPUSH
63440: LD_INT 5
63442: PPUSH
63443: LD_INT 4
63445: PPUSH
63446: CALL_OW 272
63450: PUSH
63451: LD_VAR 0 8
63455: PPUSH
63456: LD_INT 5
63458: PPUSH
63459: LD_INT 4
63461: PPUSH
63462: CALL_OW 273
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: ST_TO_ADDR
// for i = tmp downto 1 do
63479: LD_ADDR_VAR 0 4
63483: PUSH
63484: DOUBLE
63485: LD_VAR 0 6
63489: INC
63490: ST_TO_ADDR
63491: LD_INT 1
63493: PUSH
63494: FOR_DOWNTO
63495: IFFALSE 63596
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63497: LD_VAR 0 6
63501: PUSH
63502: LD_VAR 0 4
63506: ARRAY
63507: PUSH
63508: LD_INT 1
63510: ARRAY
63511: PPUSH
63512: LD_VAR 0 6
63516: PUSH
63517: LD_VAR 0 4
63521: ARRAY
63522: PUSH
63523: LD_INT 2
63525: ARRAY
63526: PPUSH
63527: CALL_OW 488
63531: NOT
63532: PUSH
63533: LD_VAR 0 6
63537: PUSH
63538: LD_VAR 0 4
63542: ARRAY
63543: PUSH
63544: LD_INT 1
63546: ARRAY
63547: PPUSH
63548: LD_VAR 0 6
63552: PUSH
63553: LD_VAR 0 4
63557: ARRAY
63558: PUSH
63559: LD_INT 2
63561: ARRAY
63562: PPUSH
63563: CALL_OW 428
63567: PUSH
63568: LD_INT 0
63570: NONEQUAL
63571: OR
63572: IFFALSE 63594
// tmp := Delete ( tmp , i ) ;
63574: LD_ADDR_VAR 0 6
63578: PUSH
63579: LD_VAR 0 6
63583: PPUSH
63584: LD_VAR 0 4
63588: PPUSH
63589: CALL_OW 3
63593: ST_TO_ADDR
63594: GO 63494
63596: POP
63597: POP
// j := GetClosestHex ( unit , tmp ) ;
63598: LD_ADDR_VAR 0 5
63602: PUSH
63603: LD_VAR 0 1
63607: PPUSH
63608: LD_VAR 0 6
63612: PPUSH
63613: CALL 62898 0 2
63617: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63618: LD_VAR 0 1
63622: PPUSH
63623: LD_VAR 0 5
63627: PUSH
63628: LD_INT 1
63630: ARRAY
63631: PPUSH
63632: LD_VAR 0 5
63636: PUSH
63637: LD_INT 2
63639: ARRAY
63640: PPUSH
63641: CALL_OW 111
// end ;
63645: LD_VAR 0 3
63649: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63650: LD_INT 0
63652: PPUSH
63653: PPUSH
63654: PPUSH
// uc_side = 0 ;
63655: LD_ADDR_OWVAR 20
63659: PUSH
63660: LD_INT 0
63662: ST_TO_ADDR
// uc_nation = 0 ;
63663: LD_ADDR_OWVAR 21
63667: PUSH
63668: LD_INT 0
63670: ST_TO_ADDR
// InitHc_All ( ) ;
63671: CALL_OW 584
// InitVc ;
63675: CALL_OW 20
// if mastodonts then
63679: LD_VAR 0 6
63683: IFFALSE 63750
// for i = 1 to mastodonts do
63685: LD_ADDR_VAR 0 11
63689: PUSH
63690: DOUBLE
63691: LD_INT 1
63693: DEC
63694: ST_TO_ADDR
63695: LD_VAR 0 6
63699: PUSH
63700: FOR_TO
63701: IFFALSE 63748
// begin vc_chassis := 31 ;
63703: LD_ADDR_OWVAR 37
63707: PUSH
63708: LD_INT 31
63710: ST_TO_ADDR
// vc_control := control_rider ;
63711: LD_ADDR_OWVAR 38
63715: PUSH
63716: LD_INT 4
63718: ST_TO_ADDR
// animal := CreateVehicle ;
63719: LD_ADDR_VAR 0 12
63723: PUSH
63724: CALL_OW 45
63728: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63729: LD_VAR 0 12
63733: PPUSH
63734: LD_VAR 0 8
63738: PPUSH
63739: LD_INT 0
63741: PPUSH
63742: CALL 65938 0 3
// end ;
63746: GO 63700
63748: POP
63749: POP
// if horses then
63750: LD_VAR 0 5
63754: IFFALSE 63821
// for i = 1 to horses do
63756: LD_ADDR_VAR 0 11
63760: PUSH
63761: DOUBLE
63762: LD_INT 1
63764: DEC
63765: ST_TO_ADDR
63766: LD_VAR 0 5
63770: PUSH
63771: FOR_TO
63772: IFFALSE 63819
// begin hc_class := 21 ;
63774: LD_ADDR_OWVAR 28
63778: PUSH
63779: LD_INT 21
63781: ST_TO_ADDR
// hc_gallery :=  ;
63782: LD_ADDR_OWVAR 33
63786: PUSH
63787: LD_STRING 
63789: ST_TO_ADDR
// animal := CreateHuman ;
63790: LD_ADDR_VAR 0 12
63794: PUSH
63795: CALL_OW 44
63799: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63800: LD_VAR 0 12
63804: PPUSH
63805: LD_VAR 0 8
63809: PPUSH
63810: LD_INT 0
63812: PPUSH
63813: CALL 65938 0 3
// end ;
63817: GO 63771
63819: POP
63820: POP
// if birds then
63821: LD_VAR 0 1
63825: IFFALSE 63892
// for i = 1 to birds do
63827: LD_ADDR_VAR 0 11
63831: PUSH
63832: DOUBLE
63833: LD_INT 1
63835: DEC
63836: ST_TO_ADDR
63837: LD_VAR 0 1
63841: PUSH
63842: FOR_TO
63843: IFFALSE 63890
// begin hc_class = 18 ;
63845: LD_ADDR_OWVAR 28
63849: PUSH
63850: LD_INT 18
63852: ST_TO_ADDR
// hc_gallery =  ;
63853: LD_ADDR_OWVAR 33
63857: PUSH
63858: LD_STRING 
63860: ST_TO_ADDR
// animal := CreateHuman ;
63861: LD_ADDR_VAR 0 12
63865: PUSH
63866: CALL_OW 44
63870: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63871: LD_VAR 0 12
63875: PPUSH
63876: LD_VAR 0 8
63880: PPUSH
63881: LD_INT 0
63883: PPUSH
63884: CALL 65938 0 3
// end ;
63888: GO 63842
63890: POP
63891: POP
// if tigers then
63892: LD_VAR 0 2
63896: IFFALSE 63980
// for i = 1 to tigers do
63898: LD_ADDR_VAR 0 11
63902: PUSH
63903: DOUBLE
63904: LD_INT 1
63906: DEC
63907: ST_TO_ADDR
63908: LD_VAR 0 2
63912: PUSH
63913: FOR_TO
63914: IFFALSE 63978
// begin hc_class = class_tiger ;
63916: LD_ADDR_OWVAR 28
63920: PUSH
63921: LD_INT 14
63923: ST_TO_ADDR
// hc_gallery =  ;
63924: LD_ADDR_OWVAR 33
63928: PUSH
63929: LD_STRING 
63931: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63932: LD_ADDR_OWVAR 35
63936: PUSH
63937: LD_INT 7
63939: NEG
63940: PPUSH
63941: LD_INT 7
63943: PPUSH
63944: CALL_OW 12
63948: ST_TO_ADDR
// animal := CreateHuman ;
63949: LD_ADDR_VAR 0 12
63953: PUSH
63954: CALL_OW 44
63958: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63959: LD_VAR 0 12
63963: PPUSH
63964: LD_VAR 0 8
63968: PPUSH
63969: LD_INT 0
63971: PPUSH
63972: CALL 65938 0 3
// end ;
63976: GO 63913
63978: POP
63979: POP
// if apemans then
63980: LD_VAR 0 3
63984: IFFALSE 64107
// for i = 1 to apemans do
63986: LD_ADDR_VAR 0 11
63990: PUSH
63991: DOUBLE
63992: LD_INT 1
63994: DEC
63995: ST_TO_ADDR
63996: LD_VAR 0 3
64000: PUSH
64001: FOR_TO
64002: IFFALSE 64105
// begin hc_class = class_apeman ;
64004: LD_ADDR_OWVAR 28
64008: PUSH
64009: LD_INT 12
64011: ST_TO_ADDR
// hc_gallery =  ;
64012: LD_ADDR_OWVAR 33
64016: PUSH
64017: LD_STRING 
64019: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64020: LD_ADDR_OWVAR 35
64024: PUSH
64025: LD_INT 2
64027: NEG
64028: PPUSH
64029: LD_INT 2
64031: PPUSH
64032: CALL_OW 12
64036: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64037: LD_ADDR_OWVAR 31
64041: PUSH
64042: LD_INT 1
64044: PPUSH
64045: LD_INT 3
64047: PPUSH
64048: CALL_OW 12
64052: PUSH
64053: LD_INT 1
64055: PPUSH
64056: LD_INT 3
64058: PPUSH
64059: CALL_OW 12
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: LD_INT 0
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: ST_TO_ADDR
// animal := CreateHuman ;
64076: LD_ADDR_VAR 0 12
64080: PUSH
64081: CALL_OW 44
64085: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64086: LD_VAR 0 12
64090: PPUSH
64091: LD_VAR 0 8
64095: PPUSH
64096: LD_INT 0
64098: PPUSH
64099: CALL 65938 0 3
// end ;
64103: GO 64001
64105: POP
64106: POP
// if enchidnas then
64107: LD_VAR 0 4
64111: IFFALSE 64178
// for i = 1 to enchidnas do
64113: LD_ADDR_VAR 0 11
64117: PUSH
64118: DOUBLE
64119: LD_INT 1
64121: DEC
64122: ST_TO_ADDR
64123: LD_VAR 0 4
64127: PUSH
64128: FOR_TO
64129: IFFALSE 64176
// begin hc_class = 13 ;
64131: LD_ADDR_OWVAR 28
64135: PUSH
64136: LD_INT 13
64138: ST_TO_ADDR
// hc_gallery =  ;
64139: LD_ADDR_OWVAR 33
64143: PUSH
64144: LD_STRING 
64146: ST_TO_ADDR
// animal := CreateHuman ;
64147: LD_ADDR_VAR 0 12
64151: PUSH
64152: CALL_OW 44
64156: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64157: LD_VAR 0 12
64161: PPUSH
64162: LD_VAR 0 8
64166: PPUSH
64167: LD_INT 0
64169: PPUSH
64170: CALL 65938 0 3
// end ;
64174: GO 64128
64176: POP
64177: POP
// if fishes then
64178: LD_VAR 0 7
64182: IFFALSE 64249
// for i = 1 to fishes do
64184: LD_ADDR_VAR 0 11
64188: PUSH
64189: DOUBLE
64190: LD_INT 1
64192: DEC
64193: ST_TO_ADDR
64194: LD_VAR 0 7
64198: PUSH
64199: FOR_TO
64200: IFFALSE 64247
// begin hc_class = 20 ;
64202: LD_ADDR_OWVAR 28
64206: PUSH
64207: LD_INT 20
64209: ST_TO_ADDR
// hc_gallery =  ;
64210: LD_ADDR_OWVAR 33
64214: PUSH
64215: LD_STRING 
64217: ST_TO_ADDR
// animal := CreateHuman ;
64218: LD_ADDR_VAR 0 12
64222: PUSH
64223: CALL_OW 44
64227: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64228: LD_VAR 0 12
64232: PPUSH
64233: LD_VAR 0 9
64237: PPUSH
64238: LD_INT 0
64240: PPUSH
64241: CALL 65938 0 3
// end ;
64245: GO 64199
64247: POP
64248: POP
// end ;
64249: LD_VAR 0 10
64253: RET
// export function WantHeal ( sci , unit ) ; begin
64254: LD_INT 0
64256: PPUSH
// if GetTaskList ( sci ) > 0 then
64257: LD_VAR 0 1
64261: PPUSH
64262: CALL_OW 437
64266: PUSH
64267: LD_INT 0
64269: GREATER
64270: IFFALSE 64340
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64272: LD_VAR 0 1
64276: PPUSH
64277: CALL_OW 437
64281: PUSH
64282: LD_INT 1
64284: ARRAY
64285: PUSH
64286: LD_INT 1
64288: ARRAY
64289: PUSH
64290: LD_STRING l
64292: EQUAL
64293: PUSH
64294: LD_VAR 0 1
64298: PPUSH
64299: CALL_OW 437
64303: PUSH
64304: LD_INT 1
64306: ARRAY
64307: PUSH
64308: LD_INT 4
64310: ARRAY
64311: PUSH
64312: LD_VAR 0 2
64316: EQUAL
64317: AND
64318: IFFALSE 64330
// result := true else
64320: LD_ADDR_VAR 0 3
64324: PUSH
64325: LD_INT 1
64327: ST_TO_ADDR
64328: GO 64338
// result := false ;
64330: LD_ADDR_VAR 0 3
64334: PUSH
64335: LD_INT 0
64337: ST_TO_ADDR
// end else
64338: GO 64348
// result := false ;
64340: LD_ADDR_VAR 0 3
64344: PUSH
64345: LD_INT 0
64347: ST_TO_ADDR
// end ;
64348: LD_VAR 0 3
64352: RET
// export function HealTarget ( sci ) ; begin
64353: LD_INT 0
64355: PPUSH
// if not sci then
64356: LD_VAR 0 1
64360: NOT
64361: IFFALSE 64365
// exit ;
64363: GO 64430
// result := 0 ;
64365: LD_ADDR_VAR 0 2
64369: PUSH
64370: LD_INT 0
64372: ST_TO_ADDR
// if GetTaskList ( sci ) then
64373: LD_VAR 0 1
64377: PPUSH
64378: CALL_OW 437
64382: IFFALSE 64430
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64384: LD_VAR 0 1
64388: PPUSH
64389: CALL_OW 437
64393: PUSH
64394: LD_INT 1
64396: ARRAY
64397: PUSH
64398: LD_INT 1
64400: ARRAY
64401: PUSH
64402: LD_STRING l
64404: EQUAL
64405: IFFALSE 64430
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64407: LD_ADDR_VAR 0 2
64411: PUSH
64412: LD_VAR 0 1
64416: PPUSH
64417: CALL_OW 437
64421: PUSH
64422: LD_INT 1
64424: ARRAY
64425: PUSH
64426: LD_INT 4
64428: ARRAY
64429: ST_TO_ADDR
// end ;
64430: LD_VAR 0 2
64434: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64435: LD_INT 0
64437: PPUSH
64438: PPUSH
64439: PPUSH
64440: PPUSH
// if not base_units then
64441: LD_VAR 0 1
64445: NOT
64446: IFFALSE 64450
// exit ;
64448: GO 64537
// result := false ;
64450: LD_ADDR_VAR 0 2
64454: PUSH
64455: LD_INT 0
64457: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64458: LD_ADDR_VAR 0 5
64462: PUSH
64463: LD_VAR 0 1
64467: PPUSH
64468: LD_INT 21
64470: PUSH
64471: LD_INT 3
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PPUSH
64478: CALL_OW 72
64482: ST_TO_ADDR
// if not tmp then
64483: LD_VAR 0 5
64487: NOT
64488: IFFALSE 64492
// exit ;
64490: GO 64537
// for i in tmp do
64492: LD_ADDR_VAR 0 3
64496: PUSH
64497: LD_VAR 0 5
64501: PUSH
64502: FOR_IN
64503: IFFALSE 64535
// begin result := EnemyInRange ( i , 22 ) ;
64505: LD_ADDR_VAR 0 2
64509: PUSH
64510: LD_VAR 0 3
64514: PPUSH
64515: LD_INT 22
64517: PPUSH
64518: CALL 62773 0 2
64522: ST_TO_ADDR
// if result then
64523: LD_VAR 0 2
64527: IFFALSE 64533
// exit ;
64529: POP
64530: POP
64531: GO 64537
// end ;
64533: GO 64502
64535: POP
64536: POP
// end ;
64537: LD_VAR 0 2
64541: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
64542: LD_INT 0
64544: PPUSH
64545: PPUSH
// if not units then
64546: LD_VAR 0 1
64550: NOT
64551: IFFALSE 64555
// exit ;
64553: GO 64625
// result := [ ] ;
64555: LD_ADDR_VAR 0 3
64559: PUSH
64560: EMPTY
64561: ST_TO_ADDR
// for i in units do
64562: LD_ADDR_VAR 0 4
64566: PUSH
64567: LD_VAR 0 1
64571: PUSH
64572: FOR_IN
64573: IFFALSE 64623
// if GetTag ( i ) = tag then
64575: LD_VAR 0 4
64579: PPUSH
64580: CALL_OW 110
64584: PUSH
64585: LD_VAR 0 2
64589: EQUAL
64590: IFFALSE 64621
// result := Replace ( result , result + 1 , i ) ;
64592: LD_ADDR_VAR 0 3
64596: PUSH
64597: LD_VAR 0 3
64601: PPUSH
64602: LD_VAR 0 3
64606: PUSH
64607: LD_INT 1
64609: PLUS
64610: PPUSH
64611: LD_VAR 0 4
64615: PPUSH
64616: CALL_OW 1
64620: ST_TO_ADDR
64621: GO 64572
64623: POP
64624: POP
// end ;
64625: LD_VAR 0 3
64629: RET
// export function IsDriver ( un ) ; begin
64630: LD_INT 0
64632: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64633: LD_ADDR_VAR 0 2
64637: PUSH
64638: LD_VAR 0 1
64642: PUSH
64643: LD_INT 55
64645: PUSH
64646: EMPTY
64647: LIST
64648: PPUSH
64649: CALL_OW 69
64653: IN
64654: ST_TO_ADDR
// end ;
64655: LD_VAR 0 2
64659: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64660: LD_INT 0
64662: PPUSH
64663: PPUSH
// list := [ ] ;
64664: LD_ADDR_VAR 0 5
64668: PUSH
64669: EMPTY
64670: ST_TO_ADDR
// case d of 0 :
64671: LD_VAR 0 3
64675: PUSH
64676: LD_INT 0
64678: DOUBLE
64679: EQUAL
64680: IFTRUE 64684
64682: GO 64817
64684: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64685: LD_ADDR_VAR 0 5
64689: PUSH
64690: LD_VAR 0 1
64694: PUSH
64695: LD_INT 4
64697: MINUS
64698: PUSH
64699: LD_VAR 0 2
64703: PUSH
64704: LD_INT 4
64706: MINUS
64707: PUSH
64708: LD_INT 2
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: LIST
64715: PUSH
64716: LD_VAR 0 1
64720: PUSH
64721: LD_INT 3
64723: MINUS
64724: PUSH
64725: LD_VAR 0 2
64729: PUSH
64730: LD_INT 1
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: LIST
64737: PUSH
64738: LD_VAR 0 1
64742: PUSH
64743: LD_INT 4
64745: PLUS
64746: PUSH
64747: LD_VAR 0 2
64751: PUSH
64752: LD_INT 4
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: LIST
64759: PUSH
64760: LD_VAR 0 1
64764: PUSH
64765: LD_INT 3
64767: PLUS
64768: PUSH
64769: LD_VAR 0 2
64773: PUSH
64774: LD_INT 3
64776: PLUS
64777: PUSH
64778: LD_INT 5
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: LIST
64785: PUSH
64786: LD_VAR 0 1
64790: PUSH
64791: LD_VAR 0 2
64795: PUSH
64796: LD_INT 4
64798: PLUS
64799: PUSH
64800: LD_INT 0
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: LIST
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: ST_TO_ADDR
// end ; 1 :
64815: GO 65515
64817: LD_INT 1
64819: DOUBLE
64820: EQUAL
64821: IFTRUE 64825
64823: GO 64958
64825: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64826: LD_ADDR_VAR 0 5
64830: PUSH
64831: LD_VAR 0 1
64835: PUSH
64836: LD_VAR 0 2
64840: PUSH
64841: LD_INT 4
64843: MINUS
64844: PUSH
64845: LD_INT 3
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: LIST
64852: PUSH
64853: LD_VAR 0 1
64857: PUSH
64858: LD_INT 3
64860: MINUS
64861: PUSH
64862: LD_VAR 0 2
64866: PUSH
64867: LD_INT 3
64869: MINUS
64870: PUSH
64871: LD_INT 2
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: LIST
64878: PUSH
64879: LD_VAR 0 1
64883: PUSH
64884: LD_INT 4
64886: MINUS
64887: PUSH
64888: LD_VAR 0 2
64892: PUSH
64893: LD_INT 1
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: LIST
64900: PUSH
64901: LD_VAR 0 1
64905: PUSH
64906: LD_VAR 0 2
64910: PUSH
64911: LD_INT 3
64913: PLUS
64914: PUSH
64915: LD_INT 0
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: LIST
64922: PUSH
64923: LD_VAR 0 1
64927: PUSH
64928: LD_INT 4
64930: PLUS
64931: PUSH
64932: LD_VAR 0 2
64936: PUSH
64937: LD_INT 4
64939: PLUS
64940: PUSH
64941: LD_INT 5
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: LIST
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: ST_TO_ADDR
// end ; 2 :
64956: GO 65515
64958: LD_INT 2
64960: DOUBLE
64961: EQUAL
64962: IFTRUE 64966
64964: GO 65095
64966: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64967: LD_ADDR_VAR 0 5
64971: PUSH
64972: LD_VAR 0 1
64976: PUSH
64977: LD_VAR 0 2
64981: PUSH
64982: LD_INT 3
64984: MINUS
64985: PUSH
64986: LD_INT 3
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: LIST
64993: PUSH
64994: LD_VAR 0 1
64998: PUSH
64999: LD_INT 4
65001: PLUS
65002: PUSH
65003: LD_VAR 0 2
65007: PUSH
65008: LD_INT 4
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: LIST
65015: PUSH
65016: LD_VAR 0 1
65020: PUSH
65021: LD_VAR 0 2
65025: PUSH
65026: LD_INT 4
65028: PLUS
65029: PUSH
65030: LD_INT 0
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: LIST
65037: PUSH
65038: LD_VAR 0 1
65042: PUSH
65043: LD_INT 3
65045: MINUS
65046: PUSH
65047: LD_VAR 0 2
65051: PUSH
65052: LD_INT 1
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: LIST
65059: PUSH
65060: LD_VAR 0 1
65064: PUSH
65065: LD_INT 4
65067: MINUS
65068: PUSH
65069: LD_VAR 0 2
65073: PUSH
65074: LD_INT 4
65076: MINUS
65077: PUSH
65078: LD_INT 2
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: LIST
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: ST_TO_ADDR
// end ; 3 :
65093: GO 65515
65095: LD_INT 3
65097: DOUBLE
65098: EQUAL
65099: IFTRUE 65103
65101: GO 65236
65103: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65104: LD_ADDR_VAR 0 5
65108: PUSH
65109: LD_VAR 0 1
65113: PUSH
65114: LD_INT 3
65116: PLUS
65117: PUSH
65118: LD_VAR 0 2
65122: PUSH
65123: LD_INT 4
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: LIST
65130: PUSH
65131: LD_VAR 0 1
65135: PUSH
65136: LD_INT 4
65138: PLUS
65139: PUSH
65140: LD_VAR 0 2
65144: PUSH
65145: LD_INT 4
65147: PLUS
65148: PUSH
65149: LD_INT 5
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: LIST
65156: PUSH
65157: LD_VAR 0 1
65161: PUSH
65162: LD_INT 4
65164: MINUS
65165: PUSH
65166: LD_VAR 0 2
65170: PUSH
65171: LD_INT 1
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: LIST
65178: PUSH
65179: LD_VAR 0 1
65183: PUSH
65184: LD_VAR 0 2
65188: PUSH
65189: LD_INT 4
65191: MINUS
65192: PUSH
65193: LD_INT 3
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: LIST
65200: PUSH
65201: LD_VAR 0 1
65205: PUSH
65206: LD_INT 3
65208: MINUS
65209: PUSH
65210: LD_VAR 0 2
65214: PUSH
65215: LD_INT 3
65217: MINUS
65218: PUSH
65219: LD_INT 2
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: LIST
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: ST_TO_ADDR
// end ; 4 :
65234: GO 65515
65236: LD_INT 4
65238: DOUBLE
65239: EQUAL
65240: IFTRUE 65244
65242: GO 65377
65244: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65245: LD_ADDR_VAR 0 5
65249: PUSH
65250: LD_VAR 0 1
65254: PUSH
65255: LD_VAR 0 2
65259: PUSH
65260: LD_INT 4
65262: PLUS
65263: PUSH
65264: LD_INT 0
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: LIST
65271: PUSH
65272: LD_VAR 0 1
65276: PUSH
65277: LD_INT 3
65279: PLUS
65280: PUSH
65281: LD_VAR 0 2
65285: PUSH
65286: LD_INT 3
65288: PLUS
65289: PUSH
65290: LD_INT 5
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: LIST
65297: PUSH
65298: LD_VAR 0 1
65302: PUSH
65303: LD_INT 4
65305: PLUS
65306: PUSH
65307: LD_VAR 0 2
65311: PUSH
65312: LD_INT 4
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: LIST
65319: PUSH
65320: LD_VAR 0 1
65324: PUSH
65325: LD_VAR 0 2
65329: PUSH
65330: LD_INT 3
65332: MINUS
65333: PUSH
65334: LD_INT 3
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: LIST
65341: PUSH
65342: LD_VAR 0 1
65346: PUSH
65347: LD_INT 4
65349: MINUS
65350: PUSH
65351: LD_VAR 0 2
65355: PUSH
65356: LD_INT 4
65358: MINUS
65359: PUSH
65360: LD_INT 2
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: LIST
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: ST_TO_ADDR
// end ; 5 :
65375: GO 65515
65377: LD_INT 5
65379: DOUBLE
65380: EQUAL
65381: IFTRUE 65385
65383: GO 65514
65385: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65386: LD_ADDR_VAR 0 5
65390: PUSH
65391: LD_VAR 0 1
65395: PUSH
65396: LD_INT 4
65398: MINUS
65399: PUSH
65400: LD_VAR 0 2
65404: PUSH
65405: LD_INT 1
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: LIST
65412: PUSH
65413: LD_VAR 0 1
65417: PUSH
65418: LD_VAR 0 2
65422: PUSH
65423: LD_INT 4
65425: MINUS
65426: PUSH
65427: LD_INT 3
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: LIST
65434: PUSH
65435: LD_VAR 0 1
65439: PUSH
65440: LD_INT 4
65442: PLUS
65443: PUSH
65444: LD_VAR 0 2
65448: PUSH
65449: LD_INT 4
65451: PLUS
65452: PUSH
65453: LD_INT 5
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: LIST
65460: PUSH
65461: LD_VAR 0 1
65465: PUSH
65466: LD_INT 3
65468: PLUS
65469: PUSH
65470: LD_VAR 0 2
65474: PUSH
65475: LD_INT 4
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: LIST
65482: PUSH
65483: LD_VAR 0 1
65487: PUSH
65488: LD_VAR 0 2
65492: PUSH
65493: LD_INT 3
65495: PLUS
65496: PUSH
65497: LD_INT 0
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: LIST
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: ST_TO_ADDR
// end ; end ;
65512: GO 65515
65514: POP
// result := list ;
65515: LD_ADDR_VAR 0 4
65519: PUSH
65520: LD_VAR 0 5
65524: ST_TO_ADDR
// end ;
65525: LD_VAR 0 4
65529: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65530: LD_INT 0
65532: PPUSH
65533: PPUSH
65534: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65535: LD_VAR 0 1
65539: NOT
65540: PUSH
65541: LD_VAR 0 2
65545: PUSH
65546: LD_INT 1
65548: PUSH
65549: LD_INT 2
65551: PUSH
65552: LD_INT 3
65554: PUSH
65555: LD_INT 4
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: IN
65564: NOT
65565: OR
65566: IFFALSE 65570
// exit ;
65568: GO 65662
// tmp := [ ] ;
65570: LD_ADDR_VAR 0 5
65574: PUSH
65575: EMPTY
65576: ST_TO_ADDR
// for i in units do
65577: LD_ADDR_VAR 0 4
65581: PUSH
65582: LD_VAR 0 1
65586: PUSH
65587: FOR_IN
65588: IFFALSE 65631
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65590: LD_ADDR_VAR 0 5
65594: PUSH
65595: LD_VAR 0 5
65599: PPUSH
65600: LD_VAR 0 5
65604: PUSH
65605: LD_INT 1
65607: PLUS
65608: PPUSH
65609: LD_VAR 0 4
65613: PPUSH
65614: LD_VAR 0 2
65618: PPUSH
65619: CALL_OW 259
65623: PPUSH
65624: CALL_OW 2
65628: ST_TO_ADDR
65629: GO 65587
65631: POP
65632: POP
// if not tmp then
65633: LD_VAR 0 5
65637: NOT
65638: IFFALSE 65642
// exit ;
65640: GO 65662
// result := SortListByListDesc ( units , tmp ) ;
65642: LD_ADDR_VAR 0 3
65646: PUSH
65647: LD_VAR 0 1
65651: PPUSH
65652: LD_VAR 0 5
65656: PPUSH
65657: CALL_OW 77
65661: ST_TO_ADDR
// end ;
65662: LD_VAR 0 3
65666: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65667: LD_INT 0
65669: PPUSH
65670: PPUSH
65671: PPUSH
// result := false ;
65672: LD_ADDR_VAR 0 3
65676: PUSH
65677: LD_INT 0
65679: ST_TO_ADDR
// x := GetX ( building ) ;
65680: LD_ADDR_VAR 0 4
65684: PUSH
65685: LD_VAR 0 2
65689: PPUSH
65690: CALL_OW 250
65694: ST_TO_ADDR
// y := GetY ( building ) ;
65695: LD_ADDR_VAR 0 5
65699: PUSH
65700: LD_VAR 0 2
65704: PPUSH
65705: CALL_OW 251
65709: ST_TO_ADDR
// if not building or not x or not y then
65710: LD_VAR 0 2
65714: NOT
65715: PUSH
65716: LD_VAR 0 4
65720: NOT
65721: OR
65722: PUSH
65723: LD_VAR 0 5
65727: NOT
65728: OR
65729: IFFALSE 65733
// exit ;
65731: GO 65825
// if GetTaskList ( unit ) then
65733: LD_VAR 0 1
65737: PPUSH
65738: CALL_OW 437
65742: IFFALSE 65825
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65744: LD_STRING e
65746: PUSH
65747: LD_VAR 0 1
65751: PPUSH
65752: CALL_OW 437
65756: PUSH
65757: LD_INT 1
65759: ARRAY
65760: PUSH
65761: LD_INT 1
65763: ARRAY
65764: EQUAL
65765: PUSH
65766: LD_VAR 0 4
65770: PUSH
65771: LD_VAR 0 1
65775: PPUSH
65776: CALL_OW 437
65780: PUSH
65781: LD_INT 1
65783: ARRAY
65784: PUSH
65785: LD_INT 2
65787: ARRAY
65788: EQUAL
65789: AND
65790: PUSH
65791: LD_VAR 0 5
65795: PUSH
65796: LD_VAR 0 1
65800: PPUSH
65801: CALL_OW 437
65805: PUSH
65806: LD_INT 1
65808: ARRAY
65809: PUSH
65810: LD_INT 3
65812: ARRAY
65813: EQUAL
65814: AND
65815: IFFALSE 65825
// result := true end ;
65817: LD_ADDR_VAR 0 3
65821: PUSH
65822: LD_INT 1
65824: ST_TO_ADDR
// end ;
65825: LD_VAR 0 3
65829: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65830: LD_INT 0
65832: PPUSH
// result := false ;
65833: LD_ADDR_VAR 0 4
65837: PUSH
65838: LD_INT 0
65840: ST_TO_ADDR
// if GetTaskList ( unit ) then
65841: LD_VAR 0 1
65845: PPUSH
65846: CALL_OW 437
65850: IFFALSE 65933
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65852: LD_STRING M
65854: PUSH
65855: LD_VAR 0 1
65859: PPUSH
65860: CALL_OW 437
65864: PUSH
65865: LD_INT 1
65867: ARRAY
65868: PUSH
65869: LD_INT 1
65871: ARRAY
65872: EQUAL
65873: PUSH
65874: LD_VAR 0 2
65878: PUSH
65879: LD_VAR 0 1
65883: PPUSH
65884: CALL_OW 437
65888: PUSH
65889: LD_INT 1
65891: ARRAY
65892: PUSH
65893: LD_INT 2
65895: ARRAY
65896: EQUAL
65897: AND
65898: PUSH
65899: LD_VAR 0 3
65903: PUSH
65904: LD_VAR 0 1
65908: PPUSH
65909: CALL_OW 437
65913: PUSH
65914: LD_INT 1
65916: ARRAY
65917: PUSH
65918: LD_INT 3
65920: ARRAY
65921: EQUAL
65922: AND
65923: IFFALSE 65933
// result := true ;
65925: LD_ADDR_VAR 0 4
65929: PUSH
65930: LD_INT 1
65932: ST_TO_ADDR
// end ; end ;
65933: LD_VAR 0 4
65937: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65938: LD_INT 0
65940: PPUSH
65941: PPUSH
65942: PPUSH
65943: PPUSH
// if not unit or not area then
65944: LD_VAR 0 1
65948: NOT
65949: PUSH
65950: LD_VAR 0 2
65954: NOT
65955: OR
65956: IFFALSE 65960
// exit ;
65958: GO 66124
// tmp := AreaToList ( area , i ) ;
65960: LD_ADDR_VAR 0 6
65964: PUSH
65965: LD_VAR 0 2
65969: PPUSH
65970: LD_VAR 0 5
65974: PPUSH
65975: CALL_OW 517
65979: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65980: LD_ADDR_VAR 0 5
65984: PUSH
65985: DOUBLE
65986: LD_INT 1
65988: DEC
65989: ST_TO_ADDR
65990: LD_VAR 0 6
65994: PUSH
65995: LD_INT 1
65997: ARRAY
65998: PUSH
65999: FOR_TO
66000: IFFALSE 66122
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66002: LD_ADDR_VAR 0 7
66006: PUSH
66007: LD_VAR 0 6
66011: PUSH
66012: LD_INT 1
66014: ARRAY
66015: PUSH
66016: LD_VAR 0 5
66020: ARRAY
66021: PUSH
66022: LD_VAR 0 6
66026: PUSH
66027: LD_INT 2
66029: ARRAY
66030: PUSH
66031: LD_VAR 0 5
66035: ARRAY
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66041: LD_VAR 0 7
66045: PUSH
66046: LD_INT 1
66048: ARRAY
66049: PPUSH
66050: LD_VAR 0 7
66054: PUSH
66055: LD_INT 2
66057: ARRAY
66058: PPUSH
66059: CALL_OW 428
66063: PUSH
66064: LD_INT 0
66066: EQUAL
66067: IFFALSE 66120
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66069: LD_VAR 0 1
66073: PPUSH
66074: LD_VAR 0 7
66078: PUSH
66079: LD_INT 1
66081: ARRAY
66082: PPUSH
66083: LD_VAR 0 7
66087: PUSH
66088: LD_INT 2
66090: ARRAY
66091: PPUSH
66092: LD_VAR 0 3
66096: PPUSH
66097: CALL_OW 48
// result := IsPlaced ( unit ) ;
66101: LD_ADDR_VAR 0 4
66105: PUSH
66106: LD_VAR 0 1
66110: PPUSH
66111: CALL_OW 305
66115: ST_TO_ADDR
// exit ;
66116: POP
66117: POP
66118: GO 66124
// end ; end ;
66120: GO 65999
66122: POP
66123: POP
// end ;
66124: LD_VAR 0 4
66128: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66129: LD_INT 0
66131: PPUSH
66132: PPUSH
66133: PPUSH
// if not side or side > 8 then
66134: LD_VAR 0 1
66138: NOT
66139: PUSH
66140: LD_VAR 0 1
66144: PUSH
66145: LD_INT 8
66147: GREATER
66148: OR
66149: IFFALSE 66153
// exit ;
66151: GO 66340
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66153: LD_ADDR_VAR 0 4
66157: PUSH
66158: LD_INT 22
66160: PUSH
66161: LD_VAR 0 1
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 21
66172: PUSH
66173: LD_INT 3
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PPUSH
66184: CALL_OW 69
66188: ST_TO_ADDR
// if not tmp then
66189: LD_VAR 0 4
66193: NOT
66194: IFFALSE 66198
// exit ;
66196: GO 66340
// enable_addtolog := true ;
66198: LD_ADDR_OWVAR 81
66202: PUSH
66203: LD_INT 1
66205: ST_TO_ADDR
// AddToLog ( [ ) ;
66206: LD_STRING [
66208: PPUSH
66209: CALL_OW 561
// for i in tmp do
66213: LD_ADDR_VAR 0 3
66217: PUSH
66218: LD_VAR 0 4
66222: PUSH
66223: FOR_IN
66224: IFFALSE 66331
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66226: LD_STRING [
66228: PUSH
66229: LD_VAR 0 3
66233: PPUSH
66234: CALL_OW 266
66238: STR
66239: PUSH
66240: LD_STRING , 
66242: STR
66243: PUSH
66244: LD_VAR 0 3
66248: PPUSH
66249: CALL_OW 250
66253: STR
66254: PUSH
66255: LD_STRING , 
66257: STR
66258: PUSH
66259: LD_VAR 0 3
66263: PPUSH
66264: CALL_OW 251
66268: STR
66269: PUSH
66270: LD_STRING , 
66272: STR
66273: PUSH
66274: LD_VAR 0 3
66278: PPUSH
66279: CALL_OW 254
66283: STR
66284: PUSH
66285: LD_STRING , 
66287: STR
66288: PUSH
66289: LD_VAR 0 3
66293: PPUSH
66294: LD_INT 1
66296: PPUSH
66297: CALL_OW 268
66301: STR
66302: PUSH
66303: LD_STRING , 
66305: STR
66306: PUSH
66307: LD_VAR 0 3
66311: PPUSH
66312: LD_INT 2
66314: PPUSH
66315: CALL_OW 268
66319: STR
66320: PUSH
66321: LD_STRING ],
66323: STR
66324: PPUSH
66325: CALL_OW 561
// end ;
66329: GO 66223
66331: POP
66332: POP
// AddToLog ( ]; ) ;
66333: LD_STRING ];
66335: PPUSH
66336: CALL_OW 561
// end ;
66340: LD_VAR 0 2
66344: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66345: LD_INT 0
66347: PPUSH
66348: PPUSH
66349: PPUSH
66350: PPUSH
66351: PPUSH
// if not area or not rate or not max then
66352: LD_VAR 0 1
66356: NOT
66357: PUSH
66358: LD_VAR 0 2
66362: NOT
66363: OR
66364: PUSH
66365: LD_VAR 0 4
66369: NOT
66370: OR
66371: IFFALSE 66375
// exit ;
66373: GO 66567
// while 1 do
66375: LD_INT 1
66377: IFFALSE 66567
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66379: LD_ADDR_VAR 0 9
66383: PUSH
66384: LD_VAR 0 1
66388: PPUSH
66389: LD_INT 1
66391: PPUSH
66392: CALL_OW 287
66396: PUSH
66397: LD_INT 10
66399: MUL
66400: ST_TO_ADDR
// r := rate / 10 ;
66401: LD_ADDR_VAR 0 7
66405: PUSH
66406: LD_VAR 0 2
66410: PUSH
66411: LD_INT 10
66413: DIVREAL
66414: ST_TO_ADDR
// time := 1 1$00 ;
66415: LD_ADDR_VAR 0 8
66419: PUSH
66420: LD_INT 2100
66422: ST_TO_ADDR
// if amount < min then
66423: LD_VAR 0 9
66427: PUSH
66428: LD_VAR 0 3
66432: LESS
66433: IFFALSE 66451
// r := r * 2 else
66435: LD_ADDR_VAR 0 7
66439: PUSH
66440: LD_VAR 0 7
66444: PUSH
66445: LD_INT 2
66447: MUL
66448: ST_TO_ADDR
66449: GO 66477
// if amount > max then
66451: LD_VAR 0 9
66455: PUSH
66456: LD_VAR 0 4
66460: GREATER
66461: IFFALSE 66477
// r := r / 2 ;
66463: LD_ADDR_VAR 0 7
66467: PUSH
66468: LD_VAR 0 7
66472: PUSH
66473: LD_INT 2
66475: DIVREAL
66476: ST_TO_ADDR
// time := time / r ;
66477: LD_ADDR_VAR 0 8
66481: PUSH
66482: LD_VAR 0 8
66486: PUSH
66487: LD_VAR 0 7
66491: DIVREAL
66492: ST_TO_ADDR
// if time < 0 then
66493: LD_VAR 0 8
66497: PUSH
66498: LD_INT 0
66500: LESS
66501: IFFALSE 66518
// time := time * - 1 ;
66503: LD_ADDR_VAR 0 8
66507: PUSH
66508: LD_VAR 0 8
66512: PUSH
66513: LD_INT 1
66515: NEG
66516: MUL
66517: ST_TO_ADDR
// wait ( time ) ;
66518: LD_VAR 0 8
66522: PPUSH
66523: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66527: LD_INT 35
66529: PPUSH
66530: LD_INT 875
66532: PPUSH
66533: CALL_OW 12
66537: PPUSH
66538: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66542: LD_INT 1
66544: PPUSH
66545: LD_INT 5
66547: PPUSH
66548: CALL_OW 12
66552: PPUSH
66553: LD_VAR 0 1
66557: PPUSH
66558: LD_INT 1
66560: PPUSH
66561: CALL_OW 55
// end ;
66565: GO 66375
// end ;
66567: LD_VAR 0 5
66571: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66572: LD_INT 0
66574: PPUSH
66575: PPUSH
66576: PPUSH
66577: PPUSH
66578: PPUSH
66579: PPUSH
66580: PPUSH
66581: PPUSH
// if not turrets or not factories then
66582: LD_VAR 0 1
66586: NOT
66587: PUSH
66588: LD_VAR 0 2
66592: NOT
66593: OR
66594: IFFALSE 66598
// exit ;
66596: GO 66905
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66598: LD_ADDR_VAR 0 10
66602: PUSH
66603: LD_INT 5
66605: PUSH
66606: LD_INT 6
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 2
66615: PUSH
66616: LD_INT 4
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 3
66625: PUSH
66626: LD_INT 5
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 24
66640: PUSH
66641: LD_INT 25
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 23
66650: PUSH
66651: LD_INT 27
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 42
66664: PUSH
66665: LD_INT 43
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 44
66674: PUSH
66675: LD_INT 46
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: LD_INT 45
66684: PUSH
66685: LD_INT 47
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: LIST
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: LIST
66701: ST_TO_ADDR
// result := [ ] ;
66702: LD_ADDR_VAR 0 3
66706: PUSH
66707: EMPTY
66708: ST_TO_ADDR
// for i in turrets do
66709: LD_ADDR_VAR 0 4
66713: PUSH
66714: LD_VAR 0 1
66718: PUSH
66719: FOR_IN
66720: IFFALSE 66903
// begin nat := GetNation ( i ) ;
66722: LD_ADDR_VAR 0 7
66726: PUSH
66727: LD_VAR 0 4
66731: PPUSH
66732: CALL_OW 248
66736: ST_TO_ADDR
// weapon := 0 ;
66737: LD_ADDR_VAR 0 8
66741: PUSH
66742: LD_INT 0
66744: ST_TO_ADDR
// if not nat then
66745: LD_VAR 0 7
66749: NOT
66750: IFFALSE 66754
// continue ;
66752: GO 66719
// for j in list [ nat ] do
66754: LD_ADDR_VAR 0 5
66758: PUSH
66759: LD_VAR 0 10
66763: PUSH
66764: LD_VAR 0 7
66768: ARRAY
66769: PUSH
66770: FOR_IN
66771: IFFALSE 66812
// if GetBWeapon ( i ) = j [ 1 ] then
66773: LD_VAR 0 4
66777: PPUSH
66778: CALL_OW 269
66782: PUSH
66783: LD_VAR 0 5
66787: PUSH
66788: LD_INT 1
66790: ARRAY
66791: EQUAL
66792: IFFALSE 66810
// begin weapon := j [ 2 ] ;
66794: LD_ADDR_VAR 0 8
66798: PUSH
66799: LD_VAR 0 5
66803: PUSH
66804: LD_INT 2
66806: ARRAY
66807: ST_TO_ADDR
// break ;
66808: GO 66812
// end ;
66810: GO 66770
66812: POP
66813: POP
// if not weapon then
66814: LD_VAR 0 8
66818: NOT
66819: IFFALSE 66823
// continue ;
66821: GO 66719
// for k in factories do
66823: LD_ADDR_VAR 0 6
66827: PUSH
66828: LD_VAR 0 2
66832: PUSH
66833: FOR_IN
66834: IFFALSE 66899
// begin weapons := AvailableWeaponList ( k ) ;
66836: LD_ADDR_VAR 0 9
66840: PUSH
66841: LD_VAR 0 6
66845: PPUSH
66846: CALL_OW 478
66850: ST_TO_ADDR
// if not weapons then
66851: LD_VAR 0 9
66855: NOT
66856: IFFALSE 66860
// continue ;
66858: GO 66833
// if weapon in weapons then
66860: LD_VAR 0 8
66864: PUSH
66865: LD_VAR 0 9
66869: IN
66870: IFFALSE 66897
// begin result := [ i , weapon ] ;
66872: LD_ADDR_VAR 0 3
66876: PUSH
66877: LD_VAR 0 4
66881: PUSH
66882: LD_VAR 0 8
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: ST_TO_ADDR
// exit ;
66891: POP
66892: POP
66893: POP
66894: POP
66895: GO 66905
// end ; end ;
66897: GO 66833
66899: POP
66900: POP
// end ;
66901: GO 66719
66903: POP
66904: POP
// end ;
66905: LD_VAR 0 3
66909: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66910: LD_INT 0
66912: PPUSH
// if not side or side > 8 then
66913: LD_VAR 0 3
66917: NOT
66918: PUSH
66919: LD_VAR 0 3
66923: PUSH
66924: LD_INT 8
66926: GREATER
66927: OR
66928: IFFALSE 66932
// exit ;
66930: GO 66991
// if not range then
66932: LD_VAR 0 4
66936: NOT
66937: IFFALSE 66948
// range := - 12 ;
66939: LD_ADDR_VAR 0 4
66943: PUSH
66944: LD_INT 12
66946: NEG
66947: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66948: LD_VAR 0 1
66952: PPUSH
66953: LD_VAR 0 2
66957: PPUSH
66958: LD_VAR 0 3
66962: PPUSH
66963: LD_VAR 0 4
66967: PPUSH
66968: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66972: LD_VAR 0 1
66976: PPUSH
66977: LD_VAR 0 2
66981: PPUSH
66982: LD_VAR 0 3
66986: PPUSH
66987: CALL_OW 331
// end ;
66991: LD_VAR 0 5
66995: RET
// export function Video ( mode ) ; begin
66996: LD_INT 0
66998: PPUSH
// ingame_video = mode ;
66999: LD_ADDR_OWVAR 52
67003: PUSH
67004: LD_VAR 0 1
67008: ST_TO_ADDR
// interface_hidden = mode ;
67009: LD_ADDR_OWVAR 54
67013: PUSH
67014: LD_VAR 0 1
67018: ST_TO_ADDR
// end ;
67019: LD_VAR 0 2
67023: RET
// export function Join ( array , element ) ; begin
67024: LD_INT 0
67026: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67027: LD_ADDR_VAR 0 3
67031: PUSH
67032: LD_VAR 0 1
67036: PPUSH
67037: LD_VAR 0 1
67041: PUSH
67042: LD_INT 1
67044: PLUS
67045: PPUSH
67046: LD_VAR 0 2
67050: PPUSH
67051: CALL_OW 1
67055: ST_TO_ADDR
// end ;
67056: LD_VAR 0 3
67060: RET
// export function JoinUnion ( array , element ) ; begin
67061: LD_INT 0
67063: PPUSH
// result := array union element ;
67064: LD_ADDR_VAR 0 3
67068: PUSH
67069: LD_VAR 0 1
67073: PUSH
67074: LD_VAR 0 2
67078: UNION
67079: ST_TO_ADDR
// end ;
67080: LD_VAR 0 3
67084: RET
// export function GetBehemoths ( side ) ; begin
67085: LD_INT 0
67087: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67088: LD_ADDR_VAR 0 2
67092: PUSH
67093: LD_INT 22
67095: PUSH
67096: LD_VAR 0 1
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 31
67107: PUSH
67108: LD_INT 25
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PPUSH
67119: CALL_OW 69
67123: ST_TO_ADDR
// end ;
67124: LD_VAR 0 2
67128: RET
// export function Shuffle ( array ) ; var i , index ; begin
67129: LD_INT 0
67131: PPUSH
67132: PPUSH
67133: PPUSH
// result := [ ] ;
67134: LD_ADDR_VAR 0 2
67138: PUSH
67139: EMPTY
67140: ST_TO_ADDR
// if not array then
67141: LD_VAR 0 1
67145: NOT
67146: IFFALSE 67150
// exit ;
67148: GO 67249
// Randomize ;
67150: CALL_OW 10
// for i = array downto 1 do
67154: LD_ADDR_VAR 0 3
67158: PUSH
67159: DOUBLE
67160: LD_VAR 0 1
67164: INC
67165: ST_TO_ADDR
67166: LD_INT 1
67168: PUSH
67169: FOR_DOWNTO
67170: IFFALSE 67247
// begin index := rand ( 1 , array ) ;
67172: LD_ADDR_VAR 0 4
67176: PUSH
67177: LD_INT 1
67179: PPUSH
67180: LD_VAR 0 1
67184: PPUSH
67185: CALL_OW 12
67189: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67190: LD_ADDR_VAR 0 2
67194: PUSH
67195: LD_VAR 0 2
67199: PPUSH
67200: LD_VAR 0 2
67204: PUSH
67205: LD_INT 1
67207: PLUS
67208: PPUSH
67209: LD_VAR 0 1
67213: PUSH
67214: LD_VAR 0 4
67218: ARRAY
67219: PPUSH
67220: CALL_OW 2
67224: ST_TO_ADDR
// array := Delete ( array , index ) ;
67225: LD_ADDR_VAR 0 1
67229: PUSH
67230: LD_VAR 0 1
67234: PPUSH
67235: LD_VAR 0 4
67239: PPUSH
67240: CALL_OW 3
67244: ST_TO_ADDR
// end ;
67245: GO 67169
67247: POP
67248: POP
// end ;
67249: LD_VAR 0 2
67253: RET
// export function GetBaseMaterials ( base ) ; begin
67254: LD_INT 0
67256: PPUSH
// result := [ 0 , 0 , 0 ] ;
67257: LD_ADDR_VAR 0 2
67261: PUSH
67262: LD_INT 0
67264: PUSH
67265: LD_INT 0
67267: PUSH
67268: LD_INT 0
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: LIST
67275: ST_TO_ADDR
// if not base then
67276: LD_VAR 0 1
67280: NOT
67281: IFFALSE 67285
// exit ;
67283: GO 67334
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67285: LD_ADDR_VAR 0 2
67289: PUSH
67290: LD_VAR 0 1
67294: PPUSH
67295: LD_INT 1
67297: PPUSH
67298: CALL_OW 275
67302: PUSH
67303: LD_VAR 0 1
67307: PPUSH
67308: LD_INT 2
67310: PPUSH
67311: CALL_OW 275
67315: PUSH
67316: LD_VAR 0 1
67320: PPUSH
67321: LD_INT 3
67323: PPUSH
67324: CALL_OW 275
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: LIST
67333: ST_TO_ADDR
// end ;
67334: LD_VAR 0 2
67338: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67339: LD_INT 0
67341: PPUSH
67342: PPUSH
// result := array ;
67343: LD_ADDR_VAR 0 3
67347: PUSH
67348: LD_VAR 0 1
67352: ST_TO_ADDR
// if size > 0 then
67353: LD_VAR 0 2
67357: PUSH
67358: LD_INT 0
67360: GREATER
67361: IFFALSE 67407
// for i := array downto size do
67363: LD_ADDR_VAR 0 4
67367: PUSH
67368: DOUBLE
67369: LD_VAR 0 1
67373: INC
67374: ST_TO_ADDR
67375: LD_VAR 0 2
67379: PUSH
67380: FOR_DOWNTO
67381: IFFALSE 67405
// result := Delete ( result , result ) ;
67383: LD_ADDR_VAR 0 3
67387: PUSH
67388: LD_VAR 0 3
67392: PPUSH
67393: LD_VAR 0 3
67397: PPUSH
67398: CALL_OW 3
67402: ST_TO_ADDR
67403: GO 67380
67405: POP
67406: POP
// end ;
67407: LD_VAR 0 3
67411: RET
// export function ComExit ( unit ) ; var tmp ; begin
67412: LD_INT 0
67414: PPUSH
67415: PPUSH
// if not IsInUnit ( unit ) then
67416: LD_VAR 0 1
67420: PPUSH
67421: CALL_OW 310
67425: NOT
67426: IFFALSE 67430
// exit ;
67428: GO 67490
// tmp := IsInUnit ( unit ) ;
67430: LD_ADDR_VAR 0 3
67434: PUSH
67435: LD_VAR 0 1
67439: PPUSH
67440: CALL_OW 310
67444: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67445: LD_VAR 0 3
67449: PPUSH
67450: CALL_OW 247
67454: PUSH
67455: LD_INT 2
67457: EQUAL
67458: IFFALSE 67471
// ComExitVehicle ( unit ) else
67460: LD_VAR 0 1
67464: PPUSH
67465: CALL_OW 121
67469: GO 67480
// ComExitBuilding ( unit ) ;
67471: LD_VAR 0 1
67475: PPUSH
67476: CALL_OW 122
// result := tmp ;
67480: LD_ADDR_VAR 0 2
67484: PUSH
67485: LD_VAR 0 3
67489: ST_TO_ADDR
// end ;
67490: LD_VAR 0 2
67494: RET
// export function ComExitAll ( units ) ; var i ; begin
67495: LD_INT 0
67497: PPUSH
67498: PPUSH
// if not units then
67499: LD_VAR 0 1
67503: NOT
67504: IFFALSE 67508
// exit ;
67506: GO 67534
// for i in units do
67508: LD_ADDR_VAR 0 3
67512: PUSH
67513: LD_VAR 0 1
67517: PUSH
67518: FOR_IN
67519: IFFALSE 67532
// ComExit ( i ) ;
67521: LD_VAR 0 3
67525: PPUSH
67526: CALL 67412 0 1
67530: GO 67518
67532: POP
67533: POP
// end ;
67534: LD_VAR 0 2
67538: RET
// export function ResetHc ; begin
67539: LD_INT 0
67541: PPUSH
// InitHc ;
67542: CALL_OW 19
// hc_importance := 0 ;
67546: LD_ADDR_OWVAR 32
67550: PUSH
67551: LD_INT 0
67553: ST_TO_ADDR
// end ;
67554: LD_VAR 0 1
67558: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67559: LD_INT 0
67561: PPUSH
67562: PPUSH
67563: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67564: LD_ADDR_VAR 0 6
67568: PUSH
67569: LD_VAR 0 1
67573: PUSH
67574: LD_VAR 0 3
67578: PLUS
67579: PUSH
67580: LD_INT 2
67582: DIV
67583: ST_TO_ADDR
// if _x < 0 then
67584: LD_VAR 0 6
67588: PUSH
67589: LD_INT 0
67591: LESS
67592: IFFALSE 67609
// _x := _x * - 1 ;
67594: LD_ADDR_VAR 0 6
67598: PUSH
67599: LD_VAR 0 6
67603: PUSH
67604: LD_INT 1
67606: NEG
67607: MUL
67608: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67609: LD_ADDR_VAR 0 7
67613: PUSH
67614: LD_VAR 0 2
67618: PUSH
67619: LD_VAR 0 4
67623: PLUS
67624: PUSH
67625: LD_INT 2
67627: DIV
67628: ST_TO_ADDR
// if _y < 0 then
67629: LD_VAR 0 7
67633: PUSH
67634: LD_INT 0
67636: LESS
67637: IFFALSE 67654
// _y := _y * - 1 ;
67639: LD_ADDR_VAR 0 7
67643: PUSH
67644: LD_VAR 0 7
67648: PUSH
67649: LD_INT 1
67651: NEG
67652: MUL
67653: ST_TO_ADDR
// result := [ _x , _y ] ;
67654: LD_ADDR_VAR 0 5
67658: PUSH
67659: LD_VAR 0 6
67663: PUSH
67664: LD_VAR 0 7
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: ST_TO_ADDR
// end ;
67673: LD_VAR 0 5
67677: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67678: LD_INT 0
67680: PPUSH
67681: PPUSH
67682: PPUSH
67683: PPUSH
// task := GetTaskList ( unit ) ;
67684: LD_ADDR_VAR 0 7
67688: PUSH
67689: LD_VAR 0 1
67693: PPUSH
67694: CALL_OW 437
67698: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67699: LD_VAR 0 7
67703: NOT
67704: PUSH
67705: LD_VAR 0 1
67709: PPUSH
67710: LD_VAR 0 2
67714: PPUSH
67715: CALL_OW 308
67719: NOT
67720: AND
67721: IFFALSE 67725
// exit ;
67723: GO 67843
// if IsInArea ( unit , area ) then
67725: LD_VAR 0 1
67729: PPUSH
67730: LD_VAR 0 2
67734: PPUSH
67735: CALL_OW 308
67739: IFFALSE 67757
// begin ComMoveToArea ( unit , goAway ) ;
67741: LD_VAR 0 1
67745: PPUSH
67746: LD_VAR 0 3
67750: PPUSH
67751: CALL_OW 113
// exit ;
67755: GO 67843
// end ; if task [ 1 ] [ 1 ] <> M then
67757: LD_VAR 0 7
67761: PUSH
67762: LD_INT 1
67764: ARRAY
67765: PUSH
67766: LD_INT 1
67768: ARRAY
67769: PUSH
67770: LD_STRING M
67772: NONEQUAL
67773: IFFALSE 67777
// exit ;
67775: GO 67843
// x := task [ 1 ] [ 2 ] ;
67777: LD_ADDR_VAR 0 5
67781: PUSH
67782: LD_VAR 0 7
67786: PUSH
67787: LD_INT 1
67789: ARRAY
67790: PUSH
67791: LD_INT 2
67793: ARRAY
67794: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67795: LD_ADDR_VAR 0 6
67799: PUSH
67800: LD_VAR 0 7
67804: PUSH
67805: LD_INT 1
67807: ARRAY
67808: PUSH
67809: LD_INT 3
67811: ARRAY
67812: ST_TO_ADDR
// if InArea ( x , y , area ) then
67813: LD_VAR 0 5
67817: PPUSH
67818: LD_VAR 0 6
67822: PPUSH
67823: LD_VAR 0 2
67827: PPUSH
67828: CALL_OW 309
67832: IFFALSE 67843
// ComStop ( unit ) ;
67834: LD_VAR 0 1
67838: PPUSH
67839: CALL_OW 141
// end ;
67843: LD_VAR 0 4
67847: RET
// export function Abs ( value ) ; begin
67848: LD_INT 0
67850: PPUSH
// result := value ;
67851: LD_ADDR_VAR 0 2
67855: PUSH
67856: LD_VAR 0 1
67860: ST_TO_ADDR
// if value < 0 then
67861: LD_VAR 0 1
67865: PUSH
67866: LD_INT 0
67868: LESS
67869: IFFALSE 67886
// result := value * - 1 ;
67871: LD_ADDR_VAR 0 2
67875: PUSH
67876: LD_VAR 0 1
67880: PUSH
67881: LD_INT 1
67883: NEG
67884: MUL
67885: ST_TO_ADDR
// end ;
67886: LD_VAR 0 2
67890: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67891: LD_INT 0
67893: PPUSH
67894: PPUSH
67895: PPUSH
67896: PPUSH
67897: PPUSH
67898: PPUSH
67899: PPUSH
67900: PPUSH
// if not unit or not building then
67901: LD_VAR 0 1
67905: NOT
67906: PUSH
67907: LD_VAR 0 2
67911: NOT
67912: OR
67913: IFFALSE 67917
// exit ;
67915: GO 68143
// x := GetX ( building ) ;
67917: LD_ADDR_VAR 0 4
67921: PUSH
67922: LD_VAR 0 2
67926: PPUSH
67927: CALL_OW 250
67931: ST_TO_ADDR
// y := GetY ( building ) ;
67932: LD_ADDR_VAR 0 6
67936: PUSH
67937: LD_VAR 0 2
67941: PPUSH
67942: CALL_OW 251
67946: ST_TO_ADDR
// d := GetDir ( building ) ;
67947: LD_ADDR_VAR 0 8
67951: PUSH
67952: LD_VAR 0 2
67956: PPUSH
67957: CALL_OW 254
67961: ST_TO_ADDR
// r := 4 ;
67962: LD_ADDR_VAR 0 9
67966: PUSH
67967: LD_INT 4
67969: ST_TO_ADDR
// for i := 1 to 5 do
67970: LD_ADDR_VAR 0 10
67974: PUSH
67975: DOUBLE
67976: LD_INT 1
67978: DEC
67979: ST_TO_ADDR
67980: LD_INT 5
67982: PUSH
67983: FOR_TO
67984: IFFALSE 68141
// begin _x := ShiftX ( x , d , r + i ) ;
67986: LD_ADDR_VAR 0 5
67990: PUSH
67991: LD_VAR 0 4
67995: PPUSH
67996: LD_VAR 0 8
68000: PPUSH
68001: LD_VAR 0 9
68005: PUSH
68006: LD_VAR 0 10
68010: PLUS
68011: PPUSH
68012: CALL_OW 272
68016: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68017: LD_ADDR_VAR 0 7
68021: PUSH
68022: LD_VAR 0 6
68026: PPUSH
68027: LD_VAR 0 8
68031: PPUSH
68032: LD_VAR 0 9
68036: PUSH
68037: LD_VAR 0 10
68041: PLUS
68042: PPUSH
68043: CALL_OW 273
68047: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68048: LD_VAR 0 5
68052: PPUSH
68053: LD_VAR 0 7
68057: PPUSH
68058: CALL_OW 488
68062: PUSH
68063: LD_VAR 0 5
68067: PPUSH
68068: LD_VAR 0 7
68072: PPUSH
68073: CALL_OW 428
68077: PPUSH
68078: CALL_OW 247
68082: PUSH
68083: LD_INT 3
68085: PUSH
68086: LD_INT 2
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: IN
68093: NOT
68094: AND
68095: IFFALSE 68139
// begin ComMoveXY ( unit , _x , _y ) ;
68097: LD_VAR 0 1
68101: PPUSH
68102: LD_VAR 0 5
68106: PPUSH
68107: LD_VAR 0 7
68111: PPUSH
68112: CALL_OW 111
// result := [ _x , _y ] ;
68116: LD_ADDR_VAR 0 3
68120: PUSH
68121: LD_VAR 0 5
68125: PUSH
68126: LD_VAR 0 7
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: ST_TO_ADDR
// exit ;
68135: POP
68136: POP
68137: GO 68143
// end ; end ;
68139: GO 67983
68141: POP
68142: POP
// end ;
68143: LD_VAR 0 3
68147: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68148: LD_INT 0
68150: PPUSH
68151: PPUSH
68152: PPUSH
// result := 0 ;
68153: LD_ADDR_VAR 0 3
68157: PUSH
68158: LD_INT 0
68160: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68161: LD_VAR 0 1
68165: PUSH
68166: LD_INT 0
68168: LESS
68169: PUSH
68170: LD_VAR 0 1
68174: PUSH
68175: LD_INT 8
68177: GREATER
68178: OR
68179: PUSH
68180: LD_VAR 0 2
68184: PUSH
68185: LD_INT 0
68187: LESS
68188: OR
68189: PUSH
68190: LD_VAR 0 2
68194: PUSH
68195: LD_INT 8
68197: GREATER
68198: OR
68199: IFFALSE 68203
// exit ;
68201: GO 68278
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68203: LD_ADDR_VAR 0 4
68207: PUSH
68208: LD_INT 22
68210: PUSH
68211: LD_VAR 0 2
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PPUSH
68220: CALL_OW 69
68224: PUSH
68225: FOR_IN
68226: IFFALSE 68276
// begin un := UnitShoot ( i ) ;
68228: LD_ADDR_VAR 0 5
68232: PUSH
68233: LD_VAR 0 4
68237: PPUSH
68238: CALL_OW 504
68242: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68243: LD_VAR 0 5
68247: PPUSH
68248: CALL_OW 255
68252: PUSH
68253: LD_VAR 0 1
68257: EQUAL
68258: IFFALSE 68274
// begin result := un ;
68260: LD_ADDR_VAR 0 3
68264: PUSH
68265: LD_VAR 0 5
68269: ST_TO_ADDR
// exit ;
68270: POP
68271: POP
68272: GO 68278
// end ; end ;
68274: GO 68225
68276: POP
68277: POP
// end ;
68278: LD_VAR 0 3
68282: RET
// export function GetCargoBay ( units ) ; begin
68283: LD_INT 0
68285: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68286: LD_ADDR_VAR 0 2
68290: PUSH
68291: LD_VAR 0 1
68295: PPUSH
68296: LD_INT 2
68298: PUSH
68299: LD_INT 34
68301: PUSH
68302: LD_INT 12
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 34
68311: PUSH
68312: LD_INT 51
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 34
68321: PUSH
68322: LD_INT 32
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 34
68331: PUSH
68332: LD_EXP 44
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: PPUSH
68348: CALL_OW 72
68352: ST_TO_ADDR
// end ;
68353: LD_VAR 0 2
68357: RET
// export function Negate ( value ) ; begin
68358: LD_INT 0
68360: PPUSH
// result := not value ;
68361: LD_ADDR_VAR 0 2
68365: PUSH
68366: LD_VAR 0 1
68370: NOT
68371: ST_TO_ADDR
// end ;
68372: LD_VAR 0 2
68376: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
68377: LD_INT 0
68379: PPUSH
// if x1 = x2 then
68380: LD_VAR 0 1
68384: PUSH
68385: LD_VAR 0 3
68389: EQUAL
68390: IFFALSE 68424
// begin if y1 > y2 then
68392: LD_VAR 0 2
68396: PUSH
68397: LD_VAR 0 4
68401: GREATER
68402: IFFALSE 68414
// result := 0 else
68404: LD_ADDR_VAR 0 5
68408: PUSH
68409: LD_INT 0
68411: ST_TO_ADDR
68412: GO 68422
// result := 3 ;
68414: LD_ADDR_VAR 0 5
68418: PUSH
68419: LD_INT 3
68421: ST_TO_ADDR
// exit ;
68422: GO 68510
// end ; if y1 = y2 then
68424: LD_VAR 0 2
68428: PUSH
68429: LD_VAR 0 4
68433: EQUAL
68434: IFFALSE 68468
// begin if x1 > x2 then
68436: LD_VAR 0 1
68440: PUSH
68441: LD_VAR 0 3
68445: GREATER
68446: IFFALSE 68458
// result := 1 else
68448: LD_ADDR_VAR 0 5
68452: PUSH
68453: LD_INT 1
68455: ST_TO_ADDR
68456: GO 68466
// result := 4 ;
68458: LD_ADDR_VAR 0 5
68462: PUSH
68463: LD_INT 4
68465: ST_TO_ADDR
// exit ;
68466: GO 68510
// end ; if x1 > x2 and y1 > y2 then
68468: LD_VAR 0 1
68472: PUSH
68473: LD_VAR 0 3
68477: GREATER
68478: PUSH
68479: LD_VAR 0 2
68483: PUSH
68484: LD_VAR 0 4
68488: GREATER
68489: AND
68490: IFFALSE 68502
// result := 2 else
68492: LD_ADDR_VAR 0 5
68496: PUSH
68497: LD_INT 2
68499: ST_TO_ADDR
68500: GO 68510
// result := 5 ;
68502: LD_ADDR_VAR 0 5
68506: PUSH
68507: LD_INT 5
68509: ST_TO_ADDR
// end ;
68510: LD_VAR 0 5
68514: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68515: LD_INT 0
68517: PPUSH
68518: PPUSH
// if not driver or not IsInUnit ( driver ) then
68519: LD_VAR 0 1
68523: NOT
68524: PUSH
68525: LD_VAR 0 1
68529: PPUSH
68530: CALL_OW 310
68534: NOT
68535: OR
68536: IFFALSE 68540
// exit ;
68538: GO 68630
// vehicle := IsInUnit ( driver ) ;
68540: LD_ADDR_VAR 0 3
68544: PUSH
68545: LD_VAR 0 1
68549: PPUSH
68550: CALL_OW 310
68554: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68555: LD_VAR 0 1
68559: PPUSH
68560: LD_STRING \
68562: PUSH
68563: LD_INT 0
68565: PUSH
68566: LD_INT 0
68568: PUSH
68569: LD_INT 0
68571: PUSH
68572: LD_INT 0
68574: PUSH
68575: LD_INT 0
68577: PUSH
68578: LD_INT 0
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: PUSH
68590: LD_STRING E
68592: PUSH
68593: LD_INT 0
68595: PUSH
68596: LD_INT 0
68598: PUSH
68599: LD_VAR 0 3
68603: PUSH
68604: LD_INT 0
68606: PUSH
68607: LD_INT 0
68609: PUSH
68610: LD_INT 0
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: LIST
68617: LIST
68618: LIST
68619: LIST
68620: LIST
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PPUSH
68626: CALL_OW 446
// end ;
68630: LD_VAR 0 2
68634: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68635: LD_INT 0
68637: PPUSH
68638: PPUSH
// if not driver or not IsInUnit ( driver ) then
68639: LD_VAR 0 1
68643: NOT
68644: PUSH
68645: LD_VAR 0 1
68649: PPUSH
68650: CALL_OW 310
68654: NOT
68655: OR
68656: IFFALSE 68660
// exit ;
68658: GO 68750
// vehicle := IsInUnit ( driver ) ;
68660: LD_ADDR_VAR 0 3
68664: PUSH
68665: LD_VAR 0 1
68669: PPUSH
68670: CALL_OW 310
68674: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68675: LD_VAR 0 1
68679: PPUSH
68680: LD_STRING \
68682: PUSH
68683: LD_INT 0
68685: PUSH
68686: LD_INT 0
68688: PUSH
68689: LD_INT 0
68691: PUSH
68692: LD_INT 0
68694: PUSH
68695: LD_INT 0
68697: PUSH
68698: LD_INT 0
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: PUSH
68710: LD_STRING E
68712: PUSH
68713: LD_INT 0
68715: PUSH
68716: LD_INT 0
68718: PUSH
68719: LD_VAR 0 3
68723: PUSH
68724: LD_INT 0
68726: PUSH
68727: LD_INT 0
68729: PUSH
68730: LD_INT 0
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PPUSH
68746: CALL_OW 447
// end ;
68750: LD_VAR 0 2
68754: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68755: LD_INT 0
68757: PPUSH
68758: PPUSH
68759: PPUSH
// tmp := [ ] ;
68760: LD_ADDR_VAR 0 5
68764: PUSH
68765: EMPTY
68766: ST_TO_ADDR
// for i in units do
68767: LD_ADDR_VAR 0 4
68771: PUSH
68772: LD_VAR 0 1
68776: PUSH
68777: FOR_IN
68778: IFFALSE 68816
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68780: LD_ADDR_VAR 0 5
68784: PUSH
68785: LD_VAR 0 5
68789: PPUSH
68790: LD_VAR 0 5
68794: PUSH
68795: LD_INT 1
68797: PLUS
68798: PPUSH
68799: LD_VAR 0 4
68803: PPUSH
68804: CALL_OW 256
68808: PPUSH
68809: CALL_OW 2
68813: ST_TO_ADDR
68814: GO 68777
68816: POP
68817: POP
// if not tmp then
68818: LD_VAR 0 5
68822: NOT
68823: IFFALSE 68827
// exit ;
68825: GO 68875
// if asc then
68827: LD_VAR 0 2
68831: IFFALSE 68855
// result := SortListByListAsc ( units , tmp ) else
68833: LD_ADDR_VAR 0 3
68837: PUSH
68838: LD_VAR 0 1
68842: PPUSH
68843: LD_VAR 0 5
68847: PPUSH
68848: CALL_OW 76
68852: ST_TO_ADDR
68853: GO 68875
// result := SortListByListDesc ( units , tmp ) ;
68855: LD_ADDR_VAR 0 3
68859: PUSH
68860: LD_VAR 0 1
68864: PPUSH
68865: LD_VAR 0 5
68869: PPUSH
68870: CALL_OW 77
68874: ST_TO_ADDR
// end ;
68875: LD_VAR 0 3
68879: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68880: LD_INT 0
68882: PPUSH
68883: PPUSH
// task := GetTaskList ( mech ) ;
68884: LD_ADDR_VAR 0 4
68888: PUSH
68889: LD_VAR 0 1
68893: PPUSH
68894: CALL_OW 437
68898: ST_TO_ADDR
// if not task then
68899: LD_VAR 0 4
68903: NOT
68904: IFFALSE 68908
// exit ;
68906: GO 68950
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68908: LD_ADDR_VAR 0 3
68912: PUSH
68913: LD_VAR 0 4
68917: PUSH
68918: LD_INT 1
68920: ARRAY
68921: PUSH
68922: LD_INT 1
68924: ARRAY
68925: PUSH
68926: LD_STRING r
68928: EQUAL
68929: PUSH
68930: LD_VAR 0 4
68934: PUSH
68935: LD_INT 1
68937: ARRAY
68938: PUSH
68939: LD_INT 4
68941: ARRAY
68942: PUSH
68943: LD_VAR 0 2
68947: EQUAL
68948: AND
68949: ST_TO_ADDR
// end ;
68950: LD_VAR 0 3
68954: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68955: LD_INT 0
68957: PPUSH
// SetDir ( unit , d ) ;
68958: LD_VAR 0 1
68962: PPUSH
68963: LD_VAR 0 4
68967: PPUSH
68968: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68972: LD_VAR 0 1
68976: PPUSH
68977: LD_VAR 0 2
68981: PPUSH
68982: LD_VAR 0 3
68986: PPUSH
68987: LD_VAR 0 5
68991: PPUSH
68992: CALL_OW 48
// end ;
68996: LD_VAR 0 6
69000: RET
// export function ToNaturalNumber ( number ) ; begin
69001: LD_INT 0
69003: PPUSH
// result := number div 1 ;
69004: LD_ADDR_VAR 0 2
69008: PUSH
69009: LD_VAR 0 1
69013: PUSH
69014: LD_INT 1
69016: DIV
69017: ST_TO_ADDR
// if number < 0 then
69018: LD_VAR 0 1
69022: PUSH
69023: LD_INT 0
69025: LESS
69026: IFFALSE 69036
// result := 0 ;
69028: LD_ADDR_VAR 0 2
69032: PUSH
69033: LD_INT 0
69035: ST_TO_ADDR
// end ;
69036: LD_VAR 0 2
69040: RET
// export function SortByClass ( units , class ) ; var un ; begin
69041: LD_INT 0
69043: PPUSH
69044: PPUSH
// if not units or not class then
69045: LD_VAR 0 1
69049: NOT
69050: PUSH
69051: LD_VAR 0 2
69055: NOT
69056: OR
69057: IFFALSE 69061
// exit ;
69059: GO 69156
// result := [ ] ;
69061: LD_ADDR_VAR 0 3
69065: PUSH
69066: EMPTY
69067: ST_TO_ADDR
// for un in units do
69068: LD_ADDR_VAR 0 4
69072: PUSH
69073: LD_VAR 0 1
69077: PUSH
69078: FOR_IN
69079: IFFALSE 69154
// if GetClass ( un ) = class then
69081: LD_VAR 0 4
69085: PPUSH
69086: CALL_OW 257
69090: PUSH
69091: LD_VAR 0 2
69095: EQUAL
69096: IFFALSE 69123
// result := Insert ( result , 1 , un ) else
69098: LD_ADDR_VAR 0 3
69102: PUSH
69103: LD_VAR 0 3
69107: PPUSH
69108: LD_INT 1
69110: PPUSH
69111: LD_VAR 0 4
69115: PPUSH
69116: CALL_OW 2
69120: ST_TO_ADDR
69121: GO 69152
// result := Replace ( result , result + 1 , un ) ;
69123: LD_ADDR_VAR 0 3
69127: PUSH
69128: LD_VAR 0 3
69132: PPUSH
69133: LD_VAR 0 3
69137: PUSH
69138: LD_INT 1
69140: PLUS
69141: PPUSH
69142: LD_VAR 0 4
69146: PPUSH
69147: CALL_OW 1
69151: ST_TO_ADDR
69152: GO 69078
69154: POP
69155: POP
// end ;
69156: LD_VAR 0 3
69160: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69161: LD_INT 0
69163: PPUSH
69164: PPUSH
69165: PPUSH
69166: PPUSH
69167: PPUSH
69168: PPUSH
69169: PPUSH
// result := [ ] ;
69170: LD_ADDR_VAR 0 4
69174: PUSH
69175: EMPTY
69176: ST_TO_ADDR
// if x - r < 0 then
69177: LD_VAR 0 1
69181: PUSH
69182: LD_VAR 0 3
69186: MINUS
69187: PUSH
69188: LD_INT 0
69190: LESS
69191: IFFALSE 69203
// min_x := 0 else
69193: LD_ADDR_VAR 0 8
69197: PUSH
69198: LD_INT 0
69200: ST_TO_ADDR
69201: GO 69219
// min_x := x - r ;
69203: LD_ADDR_VAR 0 8
69207: PUSH
69208: LD_VAR 0 1
69212: PUSH
69213: LD_VAR 0 3
69217: MINUS
69218: ST_TO_ADDR
// if y - r < 0 then
69219: LD_VAR 0 2
69223: PUSH
69224: LD_VAR 0 3
69228: MINUS
69229: PUSH
69230: LD_INT 0
69232: LESS
69233: IFFALSE 69245
// min_y := 0 else
69235: LD_ADDR_VAR 0 7
69239: PUSH
69240: LD_INT 0
69242: ST_TO_ADDR
69243: GO 69261
// min_y := y - r ;
69245: LD_ADDR_VAR 0 7
69249: PUSH
69250: LD_VAR 0 2
69254: PUSH
69255: LD_VAR 0 3
69259: MINUS
69260: ST_TO_ADDR
// max_x := x + r ;
69261: LD_ADDR_VAR 0 9
69265: PUSH
69266: LD_VAR 0 1
69270: PUSH
69271: LD_VAR 0 3
69275: PLUS
69276: ST_TO_ADDR
// max_y := y + r ;
69277: LD_ADDR_VAR 0 10
69281: PUSH
69282: LD_VAR 0 2
69286: PUSH
69287: LD_VAR 0 3
69291: PLUS
69292: ST_TO_ADDR
// for _x = min_x to max_x do
69293: LD_ADDR_VAR 0 5
69297: PUSH
69298: DOUBLE
69299: LD_VAR 0 8
69303: DEC
69304: ST_TO_ADDR
69305: LD_VAR 0 9
69309: PUSH
69310: FOR_TO
69311: IFFALSE 69412
// for _y = min_y to max_y do
69313: LD_ADDR_VAR 0 6
69317: PUSH
69318: DOUBLE
69319: LD_VAR 0 7
69323: DEC
69324: ST_TO_ADDR
69325: LD_VAR 0 10
69329: PUSH
69330: FOR_TO
69331: IFFALSE 69408
// begin if not ValidHex ( _x , _y ) then
69333: LD_VAR 0 5
69337: PPUSH
69338: LD_VAR 0 6
69342: PPUSH
69343: CALL_OW 488
69347: NOT
69348: IFFALSE 69352
// continue ;
69350: GO 69330
// if GetResourceTypeXY ( _x , _y ) then
69352: LD_VAR 0 5
69356: PPUSH
69357: LD_VAR 0 6
69361: PPUSH
69362: CALL_OW 283
69366: IFFALSE 69406
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69368: LD_ADDR_VAR 0 4
69372: PUSH
69373: LD_VAR 0 4
69377: PPUSH
69378: LD_VAR 0 4
69382: PUSH
69383: LD_INT 1
69385: PLUS
69386: PPUSH
69387: LD_VAR 0 5
69391: PUSH
69392: LD_VAR 0 6
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PPUSH
69401: CALL_OW 1
69405: ST_TO_ADDR
// end ;
69406: GO 69330
69408: POP
69409: POP
69410: GO 69310
69412: POP
69413: POP
// end ;
69414: LD_VAR 0 4
69418: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
69419: LD_INT 0
69421: PPUSH
69422: PPUSH
69423: PPUSH
69424: PPUSH
69425: PPUSH
69426: PPUSH
// if not units then
69427: LD_VAR 0 1
69431: NOT
69432: IFFALSE 69436
// exit ;
69434: GO 69837
// result := UnitFilter ( units , [ f_ok ] ) ;
69436: LD_ADDR_VAR 0 3
69440: PUSH
69441: LD_VAR 0 1
69445: PPUSH
69446: LD_INT 50
69448: PUSH
69449: EMPTY
69450: LIST
69451: PPUSH
69452: CALL_OW 72
69456: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69457: LD_ADDR_VAR 0 7
69461: PUSH
69462: LD_VAR 0 1
69466: PUSH
69467: LD_INT 1
69469: ARRAY
69470: PPUSH
69471: CALL_OW 255
69475: ST_TO_ADDR
// if not result then
69476: LD_VAR 0 3
69480: NOT
69481: IFFALSE 69485
// exit ;
69483: GO 69837
// for i in result do
69485: LD_ADDR_VAR 0 4
69489: PUSH
69490: LD_VAR 0 3
69494: PUSH
69495: FOR_IN
69496: IFFALSE 69835
// begin tag := GetTag ( i ) + 1 ;
69498: LD_ADDR_VAR 0 8
69502: PUSH
69503: LD_VAR 0 4
69507: PPUSH
69508: CALL_OW 110
69512: PUSH
69513: LD_INT 1
69515: PLUS
69516: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69517: LD_ADDR_VAR 0 6
69521: PUSH
69522: LD_VAR 0 4
69526: PPUSH
69527: CALL_OW 250
69531: PPUSH
69532: LD_VAR 0 4
69536: PPUSH
69537: CALL_OW 251
69541: PPUSH
69542: LD_INT 6
69544: PPUSH
69545: CALL 69161 0 3
69549: ST_TO_ADDR
// if cr then
69550: LD_VAR 0 6
69554: IFFALSE 69593
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69556: LD_VAR 0 4
69560: PPUSH
69561: LD_VAR 0 6
69565: PUSH
69566: LD_INT 1
69568: ARRAY
69569: PUSH
69570: LD_INT 1
69572: ARRAY
69573: PPUSH
69574: LD_VAR 0 6
69578: PUSH
69579: LD_INT 1
69581: ARRAY
69582: PUSH
69583: LD_INT 2
69585: ARRAY
69586: PPUSH
69587: CALL_OW 116
69591: GO 69833
// if path > tag then
69593: LD_VAR 0 2
69597: PUSH
69598: LD_VAR 0 8
69602: GREATER
69603: IFFALSE 69781
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
69605: LD_ADDR_VAR 0 5
69609: PUSH
69610: LD_INT 81
69612: PUSH
69613: LD_VAR 0 7
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: LD_INT 91
69624: PUSH
69625: LD_VAR 0 4
69629: PUSH
69630: LD_INT 12
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: LIST
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PPUSH
69642: CALL_OW 69
69646: ST_TO_ADDR
// if enemy then
69647: LD_VAR 0 5
69651: IFFALSE 69679
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69653: LD_VAR 0 4
69657: PPUSH
69658: LD_VAR 0 5
69662: PPUSH
69663: LD_VAR 0 4
69667: PPUSH
69668: CALL_OW 74
69672: PPUSH
69673: CALL_OW 115
69677: GO 69779
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69679: LD_VAR 0 4
69683: PPUSH
69684: LD_VAR 0 2
69688: PUSH
69689: LD_VAR 0 8
69693: ARRAY
69694: PUSH
69695: LD_INT 1
69697: ARRAY
69698: PPUSH
69699: LD_VAR 0 2
69703: PUSH
69704: LD_VAR 0 8
69708: ARRAY
69709: PUSH
69710: LD_INT 2
69712: ARRAY
69713: PPUSH
69714: CALL_OW 297
69718: PUSH
69719: LD_INT 6
69721: GREATER
69722: IFFALSE 69765
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69724: LD_VAR 0 4
69728: PPUSH
69729: LD_VAR 0 2
69733: PUSH
69734: LD_VAR 0 8
69738: ARRAY
69739: PUSH
69740: LD_INT 1
69742: ARRAY
69743: PPUSH
69744: LD_VAR 0 2
69748: PUSH
69749: LD_VAR 0 8
69753: ARRAY
69754: PUSH
69755: LD_INT 2
69757: ARRAY
69758: PPUSH
69759: CALL_OW 114
69763: GO 69779
// SetTag ( i , tag ) ;
69765: LD_VAR 0 4
69769: PPUSH
69770: LD_VAR 0 8
69774: PPUSH
69775: CALL_OW 109
// end else
69779: GO 69833
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69781: LD_ADDR_VAR 0 5
69785: PUSH
69786: LD_INT 81
69788: PUSH
69789: LD_VAR 0 7
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PPUSH
69798: CALL_OW 69
69802: ST_TO_ADDR
// if enemy then
69803: LD_VAR 0 5
69807: IFFALSE 69833
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69809: LD_VAR 0 4
69813: PPUSH
69814: LD_VAR 0 5
69818: PPUSH
69819: LD_VAR 0 4
69823: PPUSH
69824: CALL_OW 74
69828: PPUSH
69829: CALL_OW 115
// end ; end ;
69833: GO 69495
69835: POP
69836: POP
// end ; end_of_file
69837: LD_VAR 0 3
69841: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69842: LD_VAR 0 1
69846: PUSH
69847: LD_INT 200
69849: DOUBLE
69850: GREATEREQUAL
69851: IFFALSE 69859
69853: LD_INT 299
69855: DOUBLE
69856: LESSEQUAL
69857: IFTRUE 69861
69859: GO 69893
69861: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69862: LD_VAR 0 1
69866: PPUSH
69867: LD_VAR 0 2
69871: PPUSH
69872: LD_VAR 0 3
69876: PPUSH
69877: LD_VAR 0 4
69881: PPUSH
69882: LD_VAR 0 5
69886: PPUSH
69887: CALL 26404 0 5
69891: GO 69970
69893: LD_INT 300
69895: DOUBLE
69896: GREATEREQUAL
69897: IFFALSE 69905
69899: LD_INT 399
69901: DOUBLE
69902: LESSEQUAL
69903: IFTRUE 69907
69905: GO 69969
69907: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69908: LD_VAR 0 1
69912: PPUSH
69913: LD_VAR 0 2
69917: PPUSH
69918: LD_VAR 0 3
69922: PPUSH
69923: LD_VAR 0 4
69927: PPUSH
69928: LD_VAR 0 5
69932: PPUSH
69933: LD_VAR 0 6
69937: PPUSH
69938: LD_VAR 0 7
69942: PPUSH
69943: LD_VAR 0 8
69947: PPUSH
69948: LD_VAR 0 9
69952: PPUSH
69953: LD_VAR 0 10
69957: PPUSH
69958: LD_VAR 0 11
69962: PPUSH
69963: CALL 24292 0 11
69967: GO 69970
69969: POP
// end ;
69970: PPOPN 11
69972: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69973: LD_VAR 0 1
69977: PPUSH
69978: LD_VAR 0 2
69982: PPUSH
69983: LD_VAR 0 3
69987: PPUSH
69988: LD_VAR 0 4
69992: PPUSH
69993: LD_VAR 0 5
69997: PPUSH
69998: CALL 26386 0 5
// end ; end_of_file
70002: PPOPN 5
70004: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70005: LD_VAR 0 1
70009: PPUSH
70010: LD_VAR 0 2
70014: PPUSH
70015: LD_VAR 0 3
70019: PPUSH
70020: LD_VAR 0 4
70024: PPUSH
70025: LD_VAR 0 5
70029: PPUSH
70030: LD_VAR 0 6
70034: PPUSH
70035: CALL 13100 0 6
// end ;
70039: PPOPN 6
70041: END
