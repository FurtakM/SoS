// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak = 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus = 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot = 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched = 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources = [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles = [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 = 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 = 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 = 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 = 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 = 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// mission_prefix = 13f_ ;
 154: LD_ADDR_EXP 34
 158: PUSH
 159: LD_STRING 13f_
 161: ST_TO_ADDR
// debugMode = 0 ;
 162: LD_ADDR_EXP 40
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// achivCounter := 0 ;
 170: LD_ADDR_EXP 41
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// if Difficulty = 1 then
 178: LD_OWVAR 67
 182: PUSH
 183: LD_INT 1
 185: EQUAL
 186: IFFALSE 195
// RemoveEnvironmentArea ( oilBlockArea ) ;
 188: LD_INT 15
 190: PPUSH
 191: CALL_OW 355
// PrepareVehicles ;
 195: CALL 1290 0 0
// PrepareHeroes ;
 199: CALL 571 0 0
// PrepareAmericansRandom ;
 203: CALL 1194 0 0
// PrepareDifficulty ;
 207: CALL 6051 0 0
// end ;
 211: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 212: LD_EXP 40
 216: PUSH
 217: LD_INT 1
 219: EQUAL
 220: IFFALSE 526
 222: GO 224
 224: DISABLE
 225: LD_INT 0
 227: PPUSH
// begin enable ;
 228: ENABLE
// fogoff ( true ) ;
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 236: LD_ADDR_VAR 0 1
 240: PUSH
 241: LD_INT 22
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: LD_INT 21
 253: PUSH
 254: LD_INT 1
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: PPUSH
 265: CALL_OW 69
 269: PUSH
 270: FOR_IN
 271: IFFALSE 287
// SetLives ( i , 1000 ) ;
 273: LD_VAR 0 1
 277: PPUSH
 278: LD_INT 1000
 280: PPUSH
 281: CALL_OW 234
 285: GO 270
 287: POP
 288: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 22
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: LD_INT 2
 306: PUSH
 307: LD_INT 30
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 30
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 366
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: CALL_OW 274
 353: PPUSH
 354: LD_INT 1
 356: PPUSH
 357: LD_INT 9999
 359: PPUSH
 360: CALL_OW 277
 364: GO 341
 366: POP
 367: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 30
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 30
 398: PUSH
 399: LD_INT 1
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 2
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 30
 477: PUSH
 478: LD_INT 1
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PPUSH
 494: CALL_OW 69
 498: PUSH
 499: FOR_IN
 500: IFFALSE 524
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 502: LD_VAR 0 1
 506: PPUSH
 507: CALL_OW 274
 511: PPUSH
 512: LD_INT 3
 514: PPUSH
 515: LD_INT 9999
 517: PPUSH
 518: CALL_OW 277
 522: GO 499
 524: POP
 525: POP
// end ;
 526: PPOPN 1
 528: END
// every 0 0$1 trigger achivCounter >= 2 do
 529: LD_EXP 41
 533: PUSH
 534: LD_INT 2
 536: GREATEREQUAL
 537: IFFALSE 549
 539: GO 541
 541: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 542: LD_STRING ACH_REMOTE
 544: PPUSH
 545: CALL_OW 543
 549: END
// every 0 0$1 trigger destroyCounter >= 30 do
 550: LD_EXP 42
 554: PUSH
 555: LD_INT 30
 557: GREATEREQUAL
 558: IFFALSE 570
 560: GO 562
 562: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 563: LD_STRING ACH_DEFMASTER
 565: PPUSH
 566: CALL_OW 543
 570: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
// uc_side = 1 ;
 577: LD_ADDR_OWVAR 20
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 13c_ ) ;
 585: LD_ADDR_EXP 1
 589: PUSH
 590: LD_STRING JMM
 592: PPUSH
 593: LD_INT 1
 595: PPUSH
 596: LD_STRING 13c_
 598: PPUSH
 599: CALL 29959 0 3
 603: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , true , 13c_ ) ;
 604: LD_ADDR_EXP 2
 608: PUSH
 609: LD_STRING Stevens
 611: PPUSH
 612: LD_INT 1
 614: PPUSH
 615: LD_STRING 13c_
 617: PPUSH
 618: CALL 29959 0 3
 622: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , 13c_ ) ;
 623: LD_ADDR_EXP 3
 627: PUSH
 628: LD_STRING Lisa
 630: PPUSH
 631: LD_INT 1
 633: PPUSH
 634: LD_STRING 13c_
 636: PPUSH
 637: CALL 29959 0 3
 641: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , 13c_ ) ;
 642: LD_ADDR_EXP 4
 646: PUSH
 647: LD_STRING Donaldson
 649: PPUSH
 650: LD_INT 1
 652: PPUSH
 653: LD_STRING 13c_
 655: PPUSH
 656: CALL 29959 0 3
 660: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , 13c_ ) ;
 661: LD_ADDR_EXP 5
 665: PUSH
 666: LD_STRING Bobby
 668: PPUSH
 669: LD_INT 1
 671: PPUSH
 672: LD_STRING 13c_
 674: PPUSH
 675: CALL 29959 0 3
 679: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , 13c_ ) ;
 680: LD_ADDR_EXP 6
 684: PUSH
 685: LD_STRING Cyrus
 687: PPUSH
 688: LD_INT 1
 690: PPUSH
 691: LD_STRING 13c_
 693: PPUSH
 694: CALL 29959 0 3
 698: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 13c_ ) ;
 699: LD_ADDR_EXP 7
 703: PUSH
 704: LD_STRING Denis
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: LD_STRING 13c_
 712: PPUSH
 713: CALL 29959 0 3
 717: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , 13c_ ) ;
 718: LD_ADDR_EXP 8
 722: PUSH
 723: LD_STRING Brown
 725: PPUSH
 726: LD_INT 1
 728: PPUSH
 729: LD_STRING 13c_
 731: PPUSH
 732: CALL 29959 0 3
 736: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 13c_ ) ;
 737: LD_ADDR_EXP 9
 741: PUSH
 742: LD_STRING Gladstone
 744: PPUSH
 745: LD_INT 1
 747: PPUSH
 748: LD_STRING 13c_
 750: PPUSH
 751: CALL 29959 0 3
 755: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 13c_ ) ;
 756: LD_ADDR_EXP 10
 760: PUSH
 761: LD_STRING Houten
 763: PPUSH
 764: LD_INT 1
 766: PPUSH
 767: LD_STRING 13c_
 769: PPUSH
 770: CALL 29959 0 3
 774: ST_TO_ADDR
// Cornel = PrepareUnit ( Cornel , true , 13c_ ) ;
 775: LD_ADDR_EXP 11
 779: PUSH
 780: LD_STRING Cornel
 782: PPUSH
 783: LD_INT 1
 785: PPUSH
 786: LD_STRING 13c_
 788: PPUSH
 789: CALL 29959 0 3
 793: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 13c_ ) ;
 794: LD_ADDR_EXP 12
 798: PUSH
 799: LD_STRING Gary
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: LD_STRING 13c_
 807: PPUSH
 808: CALL 29959 0 3
 812: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 13c_ ) ;
 813: LD_ADDR_EXP 13
 817: PUSH
 818: LD_STRING Frank
 820: PPUSH
 821: LD_INT 1
 823: PPUSH
 824: LD_STRING 13c_
 826: PPUSH
 827: CALL 29959 0 3
 831: ST_TO_ADDR
// Kikuchi = PrepareUnit ( Kikuchi , true , 13c_ ) ;
 832: LD_ADDR_EXP 14
 836: PUSH
 837: LD_STRING Kikuchi
 839: PPUSH
 840: LD_INT 1
 842: PPUSH
 843: LD_STRING 13c_
 845: PPUSH
 846: CALL 29959 0 3
 850: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 851: LD_ADDR_EXP 15
 855: PUSH
 856: LD_STRING Powell
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: LD_STRING 
 864: PPUSH
 865: CALL 29959 0 3
 869: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 870: LD_ADDR_VAR 0 2
 874: PUSH
 875: LD_EXP 1
 879: PUSH
 880: LD_EXP 2
 884: PUSH
 885: LD_EXP 3
 889: PUSH
 890: LD_EXP 4
 894: PUSH
 895: LD_EXP 5
 899: PUSH
 900: LD_EXP 6
 904: PUSH
 905: LD_EXP 7
 909: PUSH
 910: LD_EXP 8
 914: PUSH
 915: LD_EXP 9
 919: PUSH
 920: LD_EXP 10
 924: PUSH
 925: LD_EXP 11
 929: PUSH
 930: LD_EXP 12
 934: PUSH
 935: LD_EXP 13
 939: PUSH
 940: LD_EXP 14
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: LIST
 954: LIST
 955: LIST
 956: LIST
 957: LIST
 958: LIST
 959: LIST
 960: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 961: LD_ADDR_VAR 0 3
 965: PUSH
 966: LD_INT 22
 968: PUSH
 969: LD_INT 1
 971: PUSH
 972: EMPTY
 973: LIST
 974: LIST
 975: PUSH
 976: LD_INT 33
 978: PUSH
 979: LD_INT 1
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PUSH
 986: LD_INT 21
 988: PUSH
 989: LD_INT 2
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: LIST
1000: PPUSH
1001: CALL_OW 69
1005: ST_TO_ADDR
// for i = tmp downto 1 do
1006: LD_ADDR_VAR 0 4
1010: PUSH
1011: DOUBLE
1012: LD_VAR 0 2
1016: INC
1017: ST_TO_ADDR
1018: LD_INT 1
1020: PUSH
1021: FOR_DOWNTO
1022: IFFALSE 1059
// if not tmp [ i ] then
1024: LD_VAR 0 2
1028: PUSH
1029: LD_VAR 0 4
1033: ARRAY
1034: NOT
1035: IFFALSE 1057
// tmp := Delete ( tmp , i ) ;
1037: LD_ADDR_VAR 0 2
1041: PUSH
1042: LD_VAR 0 2
1046: PPUSH
1047: LD_VAR 0 4
1051: PPUSH
1052: CALL_OW 3
1056: ST_TO_ADDR
1057: GO 1021
1059: POP
1060: POP
// for i = 1 to tmp do
1061: LD_ADDR_VAR 0 4
1065: PUSH
1066: DOUBLE
1067: LD_INT 1
1069: DEC
1070: ST_TO_ADDR
1071: LD_VAR 0 2
1075: PUSH
1076: FOR_TO
1077: IFFALSE 1107
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1079: LD_VAR 0 2
1083: PUSH
1084: LD_VAR 0 4
1088: ARRAY
1089: PPUSH
1090: LD_VAR 0 3
1094: PUSH
1095: LD_VAR 0 4
1099: ARRAY
1100: PPUSH
1101: CALL_OW 52
1105: GO 1076
1107: POP
1108: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1109: LD_INT 22
1111: PUSH
1112: LD_INT 1
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PUSH
1119: LD_INT 25
1121: PUSH
1122: LD_INT 2
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: PPUSH
1133: CALL_OW 69
1137: PUSH
1138: LD_INT 0
1140: EQUAL
1141: PUSH
1142: LD_INT 22
1144: PUSH
1145: LD_INT 1
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 34
1154: PUSH
1155: LD_INT 13
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: PPUSH
1166: CALL_OW 69
1170: PUSH
1171: LD_INT 0
1173: EQUAL
1174: AND
1175: IFFALSE 1189
// SetClass ( JMM , 2 ) ;
1177: LD_EXP 1
1181: PPUSH
1182: LD_INT 2
1184: PPUSH
1185: CALL_OW 336
// end ;
1189: LD_VAR 0 1
1193: RET
// export function PrepareAmericansRandom ; var i ; begin
1194: LD_INT 0
1196: PPUSH
1197: PPUSH
// uc_side = 1 ;
1198: LD_ADDR_OWVAR 20
1202: PUSH
1203: LD_INT 1
1205: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1206: LD_ADDR_EXP 16
1210: PUSH
1211: LD_STRING 13c_others
1213: PPUSH
1214: CALL_OW 31
1218: ST_TO_ADDR
// for i in others13 do
1219: LD_ADDR_VAR 0 2
1223: PUSH
1224: LD_EXP 16
1228: PUSH
1229: FOR_IN
1230: IFFALSE 1283
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1232: LD_VAR 0 2
1236: PPUSH
1237: LD_INT 22
1239: PUSH
1240: LD_INT 1
1242: PUSH
1243: EMPTY
1244: LIST
1245: LIST
1246: PUSH
1247: LD_INT 21
1249: PUSH
1250: LD_INT 2
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: PUSH
1257: LD_INT 58
1259: PUSH
1260: EMPTY
1261: LIST
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: PPUSH
1268: CALL_OW 69
1272: PUSH
1273: LD_INT 1
1275: ARRAY
1276: PPUSH
1277: CALL_OW 52
1281: GO 1229
1283: POP
1284: POP
// end ;
1285: LD_VAR 0 1
1289: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1290: LD_INT 0
1292: PPUSH
1293: PPUSH
1294: PPUSH
1295: PPUSH
1296: PPUSH
1297: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ ] ) ;
1298: LD_ADDR_VAR 0 5
1302: PUSH
1303: LD_STRING 13_VehiclesIn13_1
1305: PPUSH
1306: EMPTY
1307: PPUSH
1308: CALL_OW 30
1312: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1313: LD_ADDR_EXP 24
1317: PUSH
1318: LD_STRING 13_ResourcesInCargo13_1
1320: PPUSH
1321: EMPTY
1322: PPUSH
1323: CALL_OW 30
1327: ST_TO_ADDR
// cargoList = [ ] ;
1328: LD_ADDR_VAR 0 6
1332: PUSH
1333: EMPTY
1334: ST_TO_ADDR
// uc_side = 1 ;
1335: LD_ADDR_OWVAR 20
1339: PUSH
1340: LD_INT 1
1342: ST_TO_ADDR
// if vehicles > 0 then
1343: LD_VAR 0 5
1347: PUSH
1348: LD_INT 0
1350: GREATER
1351: IFFALSE 1706
// begin for i := 1 to vehicles do
1353: LD_ADDR_VAR 0 2
1357: PUSH
1358: DOUBLE
1359: LD_INT 1
1361: DEC
1362: ST_TO_ADDR
1363: LD_VAR 0 5
1367: PUSH
1368: FOR_TO
1369: IFFALSE 1518
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1371: LD_ADDR_OWVAR 21
1375: PUSH
1376: LD_VAR 0 5
1380: PUSH
1381: LD_VAR 0 2
1385: ARRAY
1386: PUSH
1387: LD_INT 1
1389: ARRAY
1390: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1391: LD_ADDR_OWVAR 37
1395: PUSH
1396: LD_VAR 0 5
1400: PUSH
1401: LD_VAR 0 2
1405: ARRAY
1406: PUSH
1407: LD_INT 2
1409: ARRAY
1410: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1411: LD_ADDR_OWVAR 39
1415: PUSH
1416: LD_VAR 0 5
1420: PUSH
1421: LD_VAR 0 2
1425: ARRAY
1426: PUSH
1427: LD_INT 3
1429: ARRAY
1430: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1431: LD_ADDR_OWVAR 38
1435: PUSH
1436: LD_VAR 0 5
1440: PUSH
1441: LD_VAR 0 2
1445: ARRAY
1446: PUSH
1447: LD_INT 4
1449: ARRAY
1450: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1451: LD_ADDR_OWVAR 40
1455: PUSH
1456: LD_VAR 0 5
1460: PUSH
1461: LD_VAR 0 2
1465: ARRAY
1466: PUSH
1467: LD_INT 5
1469: ARRAY
1470: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1471: LD_ADDR_OWVAR 41
1475: PUSH
1476: LD_INT 40
1478: ST_TO_ADDR
// veh = CreateVehicle ;
1479: LD_ADDR_VAR 0 4
1483: PUSH
1484: CALL_OW 45
1488: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 3
1496: PPUSH
1497: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1501: LD_VAR 0 4
1505: PPUSH
1506: LD_INT 2
1508: PPUSH
1509: LD_INT 0
1511: PPUSH
1512: CALL_OW 49
// end ;
1516: GO 1368
1518: POP
1519: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1520: LD_ADDR_VAR 0 6
1524: PUSH
1525: LD_INT 22
1527: PUSH
1528: LD_INT 1
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 21
1537: PUSH
1538: LD_INT 2
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PUSH
1545: LD_INT 34
1547: PUSH
1548: LD_INT 12
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PPUSH
1560: CALL_OW 69
1564: ST_TO_ADDR
// if cargoList > 0 then
1565: LD_VAR 0 6
1569: PUSH
1570: LD_INT 0
1572: GREATER
1573: IFFALSE 1706
// for i = 1 to cargoList do
1575: LD_ADDR_VAR 0 2
1579: PUSH
1580: DOUBLE
1581: LD_INT 1
1583: DEC
1584: ST_TO_ADDR
1585: LD_VAR 0 6
1589: PUSH
1590: FOR_TO
1591: IFFALSE 1704
// begin if resources > 0 then
1593: LD_EXP 24
1597: PUSH
1598: LD_INT 0
1600: GREATER
1601: IFFALSE 1702
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1603: LD_VAR 0 6
1607: PUSH
1608: LD_VAR 0 2
1612: ARRAY
1613: PPUSH
1614: LD_INT 1
1616: PPUSH
1617: LD_EXP 24
1621: PUSH
1622: LD_VAR 0 2
1626: ARRAY
1627: PUSH
1628: LD_INT 1
1630: ARRAY
1631: PPUSH
1632: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1636: LD_VAR 0 6
1640: PUSH
1641: LD_VAR 0 2
1645: ARRAY
1646: PPUSH
1647: LD_INT 2
1649: PPUSH
1650: LD_EXP 24
1654: PUSH
1655: LD_VAR 0 2
1659: ARRAY
1660: PUSH
1661: LD_INT 2
1663: ARRAY
1664: PPUSH
1665: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1669: LD_VAR 0 6
1673: PUSH
1674: LD_VAR 0 2
1678: ARRAY
1679: PPUSH
1680: LD_INT 3
1682: PPUSH
1683: LD_EXP 24
1687: PUSH
1688: LD_VAR 0 2
1692: ARRAY
1693: PUSH
1694: LD_INT 3
1696: ARRAY
1697: PPUSH
1698: CALL_OW 291
// end ; end ;
1702: GO 1590
1704: POP
1705: POP
// end ; end ;
1706: LD_VAR 0 1
1710: RET
// export function PowellSupport ; var i , veh , un ; begin
1711: LD_INT 0
1713: PPUSH
1714: PPUSH
1715: PPUSH
1716: PPUSH
// for i = 1 to 3 do
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: DOUBLE
1723: LD_INT 1
1725: DEC
1726: ST_TO_ADDR
1727: LD_INT 3
1729: PUSH
1730: FOR_TO
1731: IFFALSE 1932
// begin uc_nation = 1 ;
1733: LD_ADDR_OWVAR 21
1737: PUSH
1738: LD_INT 1
1740: ST_TO_ADDR
// uc_side = 1 ;
1741: LD_ADDR_OWVAR 20
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// vc_engine = 3 ;
1749: LD_ADDR_OWVAR 39
1753: PUSH
1754: LD_INT 3
1756: ST_TO_ADDR
// vc_control = 1 ;
1757: LD_ADDR_OWVAR 38
1761: PUSH
1762: LD_INT 1
1764: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1765: LD_ADDR_OWVAR 40
1769: PUSH
1770: LD_INT 9
1772: PUSH
1773: LD_INT 5
1775: PUSH
1776: LD_INT 4
1778: PUSH
1779: LD_INT 7
1781: PUSH
1782: LD_INT 6
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: PUSH
1792: LD_INT 1
1794: PPUSH
1795: LD_INT 5
1797: PPUSH
1798: CALL_OW 12
1802: ARRAY
1803: ST_TO_ADDR
// if vc_weapon = 6 then
1804: LD_OWVAR 40
1808: PUSH
1809: LD_INT 6
1811: EQUAL
1812: IFFALSE 1824
// vc_chassis = 4 else
1814: LD_ADDR_OWVAR 37
1818: PUSH
1819: LD_INT 4
1821: ST_TO_ADDR
1822: GO 1832
// vc_chassis = 3 ;
1824: LD_ADDR_OWVAR 37
1828: PUSH
1829: LD_INT 3
1831: ST_TO_ADDR
// veh = CreateVehicle ;
1832: LD_ADDR_VAR 0 3
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1842: LD_VAR 0 3
1846: PPUSH
1847: LD_INT 2
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// SetDir ( veh , 1 ) ;
1857: LD_VAR 0 3
1861: PPUSH
1862: LD_INT 1
1864: PPUSH
1865: CALL_OW 233
// hc_gallery =  ;
1869: LD_ADDR_OWVAR 33
1873: PUSH
1874: LD_STRING 
1876: ST_TO_ADDR
// hc_name =  ;
1877: LD_ADDR_OWVAR 26
1881: PUSH
1882: LD_STRING 
1884: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
1885: LD_INT 0
1887: PPUSH
1888: LD_INT 3
1890: PPUSH
1891: LD_INT 7
1893: PPUSH
1894: LD_INT 10
1896: PPUSH
1897: CALL_OW 12
1901: PPUSH
1902: CALL_OW 380
// un = CreateHuman ;
1906: LD_ADDR_VAR 0 4
1910: PUSH
1911: CALL_OW 44
1915: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1916: LD_VAR 0 4
1920: PPUSH
1921: LD_VAR 0 3
1925: PPUSH
1926: CALL_OW 52
// end ;
1930: GO 1730
1932: POP
1933: POP
// end ; end_of_file
1934: LD_VAR 0 1
1938: RET
// export function PrepareBurlak ; begin
1939: LD_INT 0
1941: PPUSH
// uc_side = 7 ;
1942: LD_ADDR_OWVAR 20
1946: PUSH
1947: LD_INT 7
1949: ST_TO_ADDR
// uc_nation = 3 ;
1950: LD_ADDR_OWVAR 21
1954: PUSH
1955: LD_INT 3
1957: ST_TO_ADDR
// vc_engine = 3 ;
1958: LD_ADDR_OWVAR 39
1962: PUSH
1963: LD_INT 3
1965: ST_TO_ADDR
// vc_control = 1 ;
1966: LD_ADDR_OWVAR 38
1970: PUSH
1971: LD_INT 1
1973: ST_TO_ADDR
// vc_weapon = 46 ;
1974: LD_ADDR_OWVAR 40
1978: PUSH
1979: LD_INT 46
1981: ST_TO_ADDR
// vc_chassis = 24 ;
1982: LD_ADDR_OWVAR 37
1986: PUSH
1987: LD_INT 24
1989: ST_TO_ADDR
// Masha = CreateVehicle ;
1990: LD_ADDR_EXP 18
1994: PUSH
1995: CALL_OW 45
1999: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2000: LD_EXP 18
2004: PPUSH
2005: LD_INT 3
2007: PPUSH
2008: LD_INT 0
2010: PPUSH
2011: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2015: LD_EXP 18
2019: PPUSH
2020: LD_INT 1
2022: PPUSH
2023: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2027: LD_ADDR_EXP 17
2031: PUSH
2032: LD_STRING Burlak
2034: PPUSH
2035: LD_INT 0
2037: PPUSH
2038: LD_STRING 
2040: PPUSH
2041: CALL 29959 0 3
2045: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2046: LD_EXP 17
2050: PPUSH
2051: LD_EXP 18
2055: PPUSH
2056: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2060: LD_EXP 18
2064: PPUSH
2065: LD_INT 107
2067: PPUSH
2068: LD_INT 118
2070: PPUSH
2071: CALL_OW 114
// spawnBurlak = 1 ;
2075: LD_ADDR_EXP 27
2079: PUSH
2080: LD_INT 1
2082: ST_TO_ADDR
// end ;
2083: LD_VAR 0 1
2087: RET
// export function BurlakArmy ; var i , veh , tmp ; begin
2088: LD_INT 0
2090: PPUSH
2091: PPUSH
2092: PPUSH
2093: PPUSH
// uc_side = 7 ;
2094: LD_ADDR_OWVAR 20
2098: PUSH
2099: LD_INT 7
2101: ST_TO_ADDR
// uc_nation = 3 ;
2102: LD_ADDR_OWVAR 21
2106: PUSH
2107: LD_INT 3
2109: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ,  ) ;
2110: LD_ADDR_EXP 19
2114: PUSH
2115: LD_STRING Gnyevko
2117: PPUSH
2118: LD_INT 0
2120: PPUSH
2121: LD_STRING 
2123: PPUSH
2124: CALL 29959 0 3
2128: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ,  ) ;
2129: LD_ADDR_EXP 20
2133: PUSH
2134: LD_STRING Titov
2136: PPUSH
2137: LD_INT 0
2139: PPUSH
2140: LD_STRING 
2142: PPUSH
2143: CALL 29959 0 3
2147: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ,  ) ;
2148: LD_ADDR_EXP 21
2152: PUSH
2153: LD_STRING Xavier2
2155: PPUSH
2156: LD_INT 0
2158: PPUSH
2159: LD_STRING 
2161: PPUSH
2162: CALL 29959 0 3
2166: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ,  ) ;
2167: LD_ADDR_EXP 22
2171: PUSH
2172: LD_STRING Belkov
2174: PPUSH
2175: LD_INT 0
2177: PPUSH
2178: LD_STRING 
2180: PPUSH
2181: CALL 29959 0 3
2185: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ,  ) ;
2186: LD_ADDR_EXP 23
2190: PUSH
2191: LD_STRING Lipshchin
2193: PPUSH
2194: LD_INT 0
2196: PPUSH
2197: LD_STRING 
2199: PPUSH
2200: CALL 29959 0 3
2204: ST_TO_ADDR
// for i = 1 to 5 do
2205: LD_ADDR_VAR 0 2
2209: PUSH
2210: DOUBLE
2211: LD_INT 1
2213: DEC
2214: ST_TO_ADDR
2215: LD_INT 5
2217: PUSH
2218: FOR_TO
2219: IFFALSE 2307
// begin vc_engine = 3 ;
2221: LD_ADDR_OWVAR 39
2225: PUSH
2226: LD_INT 3
2228: ST_TO_ADDR
// vc_control = 1 ;
2229: LD_ADDR_OWVAR 38
2233: PUSH
2234: LD_INT 1
2236: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2237: LD_ADDR_OWVAR 40
2241: PUSH
2242: LD_INT 43
2244: PUSH
2245: LD_INT 44
2247: PUSH
2248: LD_INT 45
2250: PUSH
2251: LD_INT 49
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 1
2262: PPUSH
2263: LD_INT 4
2265: PPUSH
2266: CALL_OW 12
2270: ARRAY
2271: ST_TO_ADDR
// vc_chassis = 22 ;
2272: LD_ADDR_OWVAR 37
2276: PUSH
2277: LD_INT 22
2279: ST_TO_ADDR
// veh = CreateVehicle ;
2280: LD_ADDR_VAR 0 3
2284: PUSH
2285: CALL_OW 45
2289: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2290: LD_VAR 0 3
2294: PPUSH
2295: LD_INT 3
2297: PPUSH
2298: LD_INT 0
2300: PPUSH
2301: CALL_OW 49
// end ;
2305: GO 2218
2307: POP
2308: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2309: LD_ADDR_VAR 0 4
2313: PUSH
2314: LD_INT 22
2316: PUSH
2317: LD_INT 7
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: PUSH
2324: LD_INT 21
2326: PUSH
2327: LD_INT 2
2329: PUSH
2330: EMPTY
2331: LIST
2332: LIST
2333: PUSH
2334: LD_INT 58
2336: PUSH
2337: EMPTY
2338: LIST
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: LIST
2344: PPUSH
2345: CALL_OW 69
2349: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2350: LD_EXP 19
2354: PPUSH
2355: LD_VAR 0 4
2359: PUSH
2360: LD_INT 1
2362: ARRAY
2363: PPUSH
2364: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2368: LD_EXP 20
2372: PPUSH
2373: LD_VAR 0 4
2377: PUSH
2378: LD_INT 2
2380: ARRAY
2381: PPUSH
2382: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2386: LD_EXP 21
2390: PPUSH
2391: LD_VAR 0 4
2395: PUSH
2396: LD_INT 3
2398: ARRAY
2399: PPUSH
2400: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2404: LD_EXP 22
2408: PPUSH
2409: LD_VAR 0 4
2413: PUSH
2414: LD_INT 4
2416: ARRAY
2417: PPUSH
2418: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2422: LD_EXP 23
2426: PPUSH
2427: LD_VAR 0 4
2431: PUSH
2432: LD_INT 5
2434: ARRAY
2435: PPUSH
2436: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2440: LD_EXP 19
2444: PPUSH
2445: LD_INT 3
2447: PPUSH
2448: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2452: LD_EXP 20
2456: PUSH
2457: LD_EXP 23
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PPUSH
2466: LD_INT 9
2468: PPUSH
2469: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2473: LD_ADDR_VAR 0 4
2477: PUSH
2478: LD_INT 22
2480: PUSH
2481: LD_INT 7
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: PPUSH
2488: CALL_OW 69
2492: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2493: LD_VAR 0 4
2497: PPUSH
2498: LD_INT 107
2500: PPUSH
2501: LD_INT 118
2503: PPUSH
2504: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2508: LD_INT 35
2510: PPUSH
2511: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , 49 ] ) , Masha ) ;
2515: LD_VAR 0 4
2519: PPUSH
2520: LD_INT 34
2522: PUSH
2523: LD_INT 49
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PPUSH
2530: CALL_OW 72
2534: PPUSH
2535: LD_EXP 18
2539: PPUSH
2540: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , 49 ] ] ) , 107 , 118 ) ;
2544: LD_VAR 0 4
2548: PPUSH
2549: LD_INT 3
2551: PUSH
2552: LD_INT 34
2554: PUSH
2555: LD_INT 49
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: PPUSH
2566: CALL_OW 72
2570: PPUSH
2571: LD_INT 107
2573: PPUSH
2574: LD_INT 118
2576: PPUSH
2577: CALL_OW 114
// until UnitFilter ( tmp , [ f_weapon , 49 ] ) = 0 or IsDying ( Masha ) ;
2581: LD_VAR 0 4
2585: PPUSH
2586: LD_INT 34
2588: PUSH
2589: LD_INT 49
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: PPUSH
2596: CALL_OW 72
2600: PUSH
2601: LD_INT 0
2603: EQUAL
2604: PUSH
2605: LD_EXP 18
2609: PPUSH
2610: CALL_OW 303
2614: OR
2615: IFFALSE 2508
// repeat wait ( 0 0$1 ) ;
2617: LD_INT 35
2619: PPUSH
2620: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
2624: LD_ADDR_VAR 0 4
2628: PUSH
2629: LD_INT 22
2631: PUSH
2632: LD_INT 7
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PPUSH
2639: CALL_OW 69
2643: PUSH
2644: LD_EXP 17
2648: DIFF
2649: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2650: LD_VAR 0 4
2654: PPUSH
2655: LD_INT 107
2657: PPUSH
2658: LD_INT 118
2660: PPUSH
2661: CALL_OW 114
// if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
2665: LD_EXP 17
2669: PPUSH
2670: CALL_OW 302
2674: PUSH
2675: LD_EXP 17
2679: PPUSH
2680: CALL_OW 310
2684: NOT
2685: AND
2686: IFFALSE 2703
// ComMoveXY ( Burlak , 107 , 118 ) ;
2688: LD_EXP 17
2692: PPUSH
2693: LD_INT 107
2695: PPUSH
2696: LD_INT 118
2698: PPUSH
2699: CALL_OW 111
// until not tmp ;
2703: LD_VAR 0 4
2707: NOT
2708: IFFALSE 2617
// end ; end_of_file
2710: LD_VAR 0 1
2714: RET
// every 15 15$0 trigger sibDeposits do var un , rnd ;
2715: LD_EXP 31
2719: IFFALSE 2895
2721: GO 2723
2723: DISABLE
2724: LD_INT 0
2726: PPUSH
2727: PPUSH
// begin enable ;
2728: ENABLE
// rnd = 0 ;
2729: LD_ADDR_VAR 0 2
2733: PUSH
2734: LD_INT 0
2736: ST_TO_ADDR
// uc_side = 8 ;
2737: LD_ADDR_OWVAR 20
2741: PUSH
2742: LD_INT 8
2744: ST_TO_ADDR
// uc_nation = 2 ;
2745: LD_ADDR_OWVAR 21
2749: PUSH
2750: LD_INT 2
2752: ST_TO_ADDR
// hc_name =  ;
2753: LD_ADDR_OWVAR 26
2757: PUSH
2758: LD_STRING 
2760: ST_TO_ADDR
// hc_gallery =  ;
2761: LD_ADDR_OWVAR 33
2765: PUSH
2766: LD_STRING 
2768: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
2769: LD_INT 0
2771: PPUSH
2772: LD_INT 4
2774: PPUSH
2775: LD_INT 10
2777: PPUSH
2778: CALL_OW 380
// un = CreateHuman ;
2782: LD_ADDR_VAR 0 1
2786: PUSH
2787: CALL_OW 44
2791: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2792: LD_VAR 0 1
2796: PPUSH
2797: LD_INT 8
2799: PUSH
2800: LD_INT 9
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 1
2809: PPUSH
2810: LD_INT 2
2812: PPUSH
2813: CALL_OW 12
2817: ARRAY
2818: PPUSH
2819: LD_INT 0
2821: PPUSH
2822: CALL_OW 49
// SetTag ( un , 1 ) ;
2826: LD_VAR 0 1
2830: PPUSH
2831: LD_INT 1
2833: PPUSH
2834: CALL_OW 109
// rnd = Rand ( 1 , sibDeposits ) ;
2838: LD_ADDR_VAR 0 2
2842: PUSH
2843: LD_INT 1
2845: PPUSH
2846: LD_EXP 31
2850: PPUSH
2851: CALL_OW 12
2855: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
2856: LD_VAR 0 1
2860: PPUSH
2861: LD_EXP 31
2865: PUSH
2866: LD_VAR 0 2
2870: ARRAY
2871: PUSH
2872: LD_INT 1
2874: ARRAY
2875: PPUSH
2876: LD_EXP 31
2880: PUSH
2881: LD_VAR 0 2
2885: ARRAY
2886: PUSH
2887: LD_INT 2
2889: ARRAY
2890: PPUSH
2891: CALL_OW 158
// end ;
2895: PPOPN 2
2897: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do var i ;
2898: LD_INT 22
2900: PUSH
2901: LD_INT 8
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: LD_INT 3
2910: PUSH
2911: LD_INT 61
2913: PUSH
2914: EMPTY
2915: LIST
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PUSH
2921: LD_INT 33
2923: PUSH
2924: LD_INT 2
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: LIST
2935: PPUSH
2936: CALL_OW 69
2940: IFFALSE 3013
2942: GO 2944
2944: DISABLE
2945: LD_INT 0
2947: PPUSH
// begin enable ;
2948: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do
2949: LD_ADDR_VAR 0 1
2953: PUSH
2954: LD_INT 22
2956: PUSH
2957: LD_INT 8
2959: PUSH
2960: EMPTY
2961: LIST
2962: LIST
2963: PUSH
2964: LD_INT 3
2966: PUSH
2967: LD_INT 61
2969: PUSH
2970: EMPTY
2971: LIST
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: PUSH
2977: LD_INT 33
2979: PUSH
2980: LD_INT 2
2982: PUSH
2983: EMPTY
2984: LIST
2985: LIST
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: LIST
2991: PPUSH
2992: CALL_OW 69
2996: PUSH
2997: FOR_IN
2998: IFFALSE 3011
// Connect ( i ) ;
3000: LD_VAR 0 1
3004: PPUSH
3005: CALL 37838 0 1
3009: GO 2997
3011: POP
3012: POP
// end ; end_of_file
3013: PPOPN 1
3015: END
// every 1 do
3016: GO 3018
3018: DISABLE
// begin InGameOn ;
3019: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3023: LD_INT 22
3025: PUSH
3026: LD_INT 1
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: LD_INT 21
3035: PUSH
3036: LD_INT 2
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PPUSH
3047: CALL_OW 69
3051: PUSH
3052: LD_INT 1
3054: ARRAY
3055: PPUSH
3056: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
3060: LD_INT 22
3062: PUSH
3063: LD_INT 1
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PUSH
3070: LD_INT 21
3072: PUSH
3073: LD_INT 2
3075: PUSH
3076: EMPTY
3077: LIST
3078: LIST
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PPUSH
3084: CALL_OW 69
3088: PPUSH
3089: LD_INT 69
3091: PPUSH
3092: LD_INT 94
3094: PPUSH
3095: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3099: LD_EXP 1
3103: PPUSH
3104: LD_STRING D2-JMM-1
3106: PPUSH
3107: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3111: LD_INT 22
3113: PUSH
3114: LD_INT 1
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PUSH
3121: LD_INT 21
3123: PUSH
3124: LD_INT 2
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: PPUSH
3135: CALL_OW 69
3139: PUSH
3140: LD_INT 1
3142: ARRAY
3143: PPUSH
3144: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3148: LD_EXP 2
3152: PPUSH
3153: LD_STRING D2-Huck-1
3155: PPUSH
3156: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3160: LD_INT 22
3162: PUSH
3163: LD_INT 1
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: LD_INT 21
3172: PUSH
3173: LD_INT 2
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: PPUSH
3184: CALL_OW 69
3188: PUSH
3189: LD_INT 1
3191: ARRAY
3192: PPUSH
3193: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3197: LD_EXP 1
3201: PPUSH
3202: LD_STRING D2-JMM-2
3204: PPUSH
3205: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3209: LD_INT 22
3211: PUSH
3212: LD_INT 1
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: PUSH
3219: LD_INT 21
3221: PUSH
3222: LD_INT 2
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PPUSH
3233: CALL_OW 69
3237: PUSH
3238: LD_INT 1
3240: ARRAY
3241: PPUSH
3242: CALL_OW 87
// InGameOff ;
3246: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3250: LD_STRING M1
3252: PPUSH
3253: CALL_OW 337
// SaveForQuickRestart ;
3257: CALL_OW 22
// end ;
3261: END
// every 10 10$0 do
3262: GO 3264
3264: DISABLE
// begin DialogueOn ;
3265: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3269: LD_EXP 15
3273: PPUSH
3274: LD_STRING D3-Pow-1
3276: PPUSH
3277: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3281: LD_EXP 1
3285: PPUSH
3286: LD_STRING D3-JMM-1
3288: PPUSH
3289: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3293: LD_EXP 15
3297: PPUSH
3298: LD_STRING D3-Pow-2
3300: PPUSH
3301: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3305: LD_EXP 1
3309: PPUSH
3310: LD_STRING D3-JMM-2
3312: PPUSH
3313: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3317: LD_EXP 15
3321: PPUSH
3322: LD_STRING D3-Pow-3
3324: PPUSH
3325: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3329: LD_EXP 1
3333: PPUSH
3334: LD_STRING D3-JMM-3
3336: PPUSH
3337: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3341: LD_EXP 15
3345: PPUSH
3346: LD_STRING D3-Pow-4
3348: PPUSH
3349: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3353: LD_EXP 1
3357: PPUSH
3358: LD_STRING D3-JMM-4
3360: PPUSH
3361: CALL_OW 88
// DialogueOff ;
3365: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3369: LD_STRING M2
3371: PPUSH
3372: CALL_OW 337
// wait ( 2 2$30 ) ;
3376: LD_INT 5250
3378: PPUSH
3379: CALL_OW 67
// PrepareBurlak ;
3383: CALL 1939 0 0
// BurlakArmy ;
3387: CALL 2088 0 0
// end ;
3391: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3392: LD_INT 1
3394: PPUSH
3395: LD_EXP 18
3399: PPUSH
3400: CALL_OW 292
3404: IFFALSE 3563
3406: GO 3408
3408: DISABLE
// begin DialogueOn ;
3409: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3413: LD_EXP 18
3417: PPUSH
3418: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3422: LD_INT 22
3424: PUSH
3425: LD_INT 1
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: PUSH
3432: LD_INT 26
3434: PUSH
3435: LD_INT 1
3437: PUSH
3438: EMPTY
3439: LIST
3440: LIST
3441: PUSH
3442: LD_INT 2
3444: PUSH
3445: LD_INT 25
3447: PUSH
3448: LD_INT 1
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 25
3457: PUSH
3458: LD_INT 2
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: PUSH
3465: LD_INT 25
3467: PUSH
3468: LD_INT 3
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PUSH
3475: LD_INT 25
3477: PUSH
3478: LD_INT 4
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PUSH
3485: LD_INT 25
3487: PUSH
3488: LD_INT 5
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: PPUSH
3508: CALL_OW 69
3512: PPUSH
3513: LD_STRING D5-Sol1-1
3515: PPUSH
3516: LD_STRING D5-FSol1-1
3518: PPUSH
3519: CALL 5850 0 3
// Say ( JMM , D5-JMM-1 ) ;
3523: LD_EXP 1
3527: PPUSH
3528: LD_STRING D5-JMM-1
3530: PPUSH
3531: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3535: LD_EXP 17
3539: PPUSH
3540: LD_STRING DAmer-Bur-1
3542: PPUSH
3543: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3547: LD_EXP 1
3551: PPUSH
3552: LD_STRING DAmer-JMM-1
3554: PPUSH
3555: CALL_OW 88
// DialogueOff ;
3559: CALL_OW 7
// end ;
3563: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
3564: LD_INT 4
3566: PPUSH
3567: LD_INT 22
3569: PUSH
3570: LD_INT 7
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: PPUSH
3577: CALL_OW 70
3581: IFFALSE 3980
3583: GO 3585
3585: DISABLE
3586: LD_INT 0
3588: PPUSH
// begin enable ;
3589: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
3590: LD_ADDR_VAR 0 1
3594: PUSH
3595: LD_INT 4
3597: PPUSH
3598: LD_INT 22
3600: PUSH
3601: LD_INT 7
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PPUSH
3608: CALL_OW 70
3612: PUSH
3613: FOR_IN
3614: IFFALSE 3978
// begin if i = Burlak or i = Masha then
3616: LD_VAR 0 1
3620: PUSH
3621: LD_EXP 17
3625: EQUAL
3626: PUSH
3627: LD_VAR 0 1
3631: PUSH
3632: LD_EXP 18
3636: EQUAL
3637: OR
3638: IFFALSE 3785
// begin RemoveUnit ( i ) ;
3640: LD_VAR 0 1
3644: PPUSH
3645: CALL_OW 64
// DialogueOn ;
3649: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3653: LD_EXP 1
3657: PPUSH
3658: LD_STRING D5a-JMM-1
3660: PPUSH
3661: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3665: LD_INT 22
3667: PUSH
3668: LD_INT 1
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 26
3677: PUSH
3678: LD_INT 1
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PUSH
3685: LD_INT 2
3687: PUSH
3688: LD_INT 25
3690: PUSH
3691: LD_INT 1
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PUSH
3698: LD_INT 25
3700: PUSH
3701: LD_INT 2
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 25
3710: PUSH
3711: LD_INT 3
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: LD_INT 25
3720: PUSH
3721: LD_INT 4
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: PUSH
3728: LD_INT 25
3730: PUSH
3731: LD_INT 5
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: LIST
3750: PPUSH
3751: CALL_OW 69
3755: PPUSH
3756: LD_STRING D5a-Sol1-1
3758: PPUSH
3759: LD_STRING D5-FSol1-1
3761: PPUSH
3762: CALL 5850 0 3
// DialogueOff ;
3766: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
3770: LD_STRING M2b
3772: PPUSH
3773: CALL_OW 337
// spawnBurlak = 0 ;
3777: LD_ADDR_EXP 27
3781: PUSH
3782: LD_INT 0
3784: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
3785: LD_VAR 0 1
3789: PPUSH
3790: CALL_OW 247
3794: PUSH
3795: LD_INT 2
3797: EQUAL
3798: PUSH
3799: LD_VAR 0 1
3803: PPUSH
3804: CALL_OW 263
3808: PUSH
3809: LD_INT 1
3811: EQUAL
3812: AND
3813: IFFALSE 3941
// begin case IsDrivenBy ( i ) of Gnyevko :
3815: LD_VAR 0 1
3819: PPUSH
3820: CALL_OW 311
3824: PUSH
3825: LD_EXP 19
3829: DOUBLE
3830: EQUAL
3831: IFTRUE 3835
3833: GO 3848
3835: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
3836: LD_INT 1
3838: PPUSH
3839: LD_STRING 13_Gnyevko_1
3841: PPUSH
3842: CALL_OW 39
3846: GO 3941
3848: LD_EXP 20
3852: DOUBLE
3853: EQUAL
3854: IFTRUE 3858
3856: GO 3871
3858: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
3859: LD_INT 1
3861: PPUSH
3862: LD_STRING 13_Titov_1
3864: PPUSH
3865: CALL_OW 39
3869: GO 3941
3871: LD_EXP 21
3875: DOUBLE
3876: EQUAL
3877: IFTRUE 3881
3879: GO 3894
3881: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
3882: LD_INT 1
3884: PPUSH
3885: LD_STRING 13_Xavier_1
3887: PPUSH
3888: CALL_OW 39
3892: GO 3941
3894: LD_EXP 22
3898: DOUBLE
3899: EQUAL
3900: IFTRUE 3904
3902: GO 3917
3904: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
3905: LD_INT 1
3907: PPUSH
3908: LD_STRING 13_Belkov_1
3910: PPUSH
3911: CALL_OW 39
3915: GO 3941
3917: LD_EXP 23
3921: DOUBLE
3922: EQUAL
3923: IFTRUE 3927
3925: GO 3940
3927: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
3928: LD_INT 1
3930: PPUSH
3931: LD_STRING 13_Lipshchin_1
3933: PPUSH
3934: CALL_OW 39
3938: GO 3941
3940: POP
// end ; if GetWeapon ( i ) = 49 then
3941: LD_VAR 0 1
3945: PPUSH
3946: CALL_OW 264
3950: PUSH
3951: LD_INT 49
3953: EQUAL
3954: IFFALSE 3967
// DestroyUnit ( i ) else
3956: LD_VAR 0 1
3960: PPUSH
3961: CALL_OW 65
3965: GO 3976
// RemoveUnit ( i ) ;
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 64
// end ;
3976: GO 3613
3978: POP
3979: POP
// end ;
3980: PPOPN 1
3982: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
3983: LD_EXP 17
3987: PPUSH
3988: CALL_OW 302
3992: PUSH
3993: LD_EXP 18
3997: PPUSH
3998: CALL_OW 256
4002: PUSH
4003: LD_INT 500
4005: LESS
4006: AND
4007: PUSH
4008: LD_EXP 18
4012: PPUSH
4013: CALL_OW 255
4017: PUSH
4018: LD_INT 7
4020: EQUAL
4021: AND
4022: IFFALSE 4042
4024: GO 4026
4026: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
4027: LD_EXP 17
4031: PPUSH
4032: LD_INT 107
4034: PPUSH
4035: LD_INT 118
4037: PPUSH
4038: CALL_OW 111
4042: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
4043: LD_EXP 17
4047: PPUSH
4048: CALL_OW 301
4052: PUSH
4053: LD_EXP 27
4057: PUSH
4058: LD_INT 1
4060: EQUAL
4061: AND
4062: IFFALSE 4195
4064: GO 4066
4066: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4067: LD_EXP 1
4071: PPUSH
4072: LD_STRING D5b-JMM-1
4074: PPUSH
4075: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
4079: LD_INT 22
4081: PUSH
4082: LD_INT 1
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: LD_INT 26
4091: PUSH
4092: LD_INT 1
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: PUSH
4099: LD_INT 2
4101: PUSH
4102: LD_INT 25
4104: PUSH
4105: LD_INT 1
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: LD_INT 25
4114: PUSH
4115: LD_INT 2
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PUSH
4122: LD_INT 25
4124: PUSH
4125: LD_INT 3
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: PUSH
4132: LD_INT 25
4134: PUSH
4135: LD_INT 4
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PUSH
4142: LD_INT 25
4144: PUSH
4145: LD_INT 5
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: LIST
4164: PPUSH
4165: CALL_OW 69
4169: PPUSH
4170: LD_STRING D5b-Sol1-1
4172: PPUSH
4173: LD_STRING 
4175: PPUSH
4176: CALL 5850 0 3
// ChangeMissionObjectives ( M2a ) ;
4180: LD_STRING M2a
4182: PPUSH
4183: CALL_OW 337
// burlakStatus = 1 ;
4187: LD_ADDR_EXP 28
4191: PUSH
4192: LD_INT 1
4194: ST_TO_ADDR
// end ;
4195: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4196: LD_EXP 2
4200: PPUSH
4201: CALL_OW 301
4205: IFFALSE 4342
4207: GO 4209
4209: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4210: LD_EXP 1
4214: PPUSH
4215: LD_STRING D6-JMM-1
4217: PPUSH
4218: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
4222: LD_INT 22
4224: PUSH
4225: LD_INT 1
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: LD_INT 26
4234: PUSH
4235: LD_INT 1
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: PUSH
4242: LD_INT 2
4244: PUSH
4245: LD_INT 25
4247: PUSH
4248: LD_INT 1
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: PUSH
4255: LD_INT 25
4257: PUSH
4258: LD_INT 2
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: PUSH
4265: LD_INT 25
4267: PUSH
4268: LD_INT 3
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: PUSH
4275: LD_INT 25
4277: PUSH
4278: LD_INT 4
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: PUSH
4285: LD_INT 25
4287: PUSH
4288: LD_INT 5
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: LIST
4307: PPUSH
4308: CALL_OW 69
4312: PPUSH
4313: LD_STRING D6-Sol1-1
4315: PPUSH
4316: LD_STRING 
4318: PPUSH
4319: CALL 5850 0 3
// Say ( JMM , D6-JMM-2 ) ;
4323: LD_EXP 1
4327: PPUSH
4328: LD_STRING D6-JMM-2
4330: PPUSH
4331: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4335: LD_STRING M1a
4337: PPUSH
4338: CALL_OW 337
// end ;
4342: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4343: LD_INT 25
4345: PPUSH
4346: LD_INT 1
4348: PPUSH
4349: CALL_OW 321
4353: PUSH
4354: LD_INT 2
4356: EQUAL
4357: IFFALSE 4374
4359: GO 4361
4361: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4362: LD_EXP 2
4366: PPUSH
4367: LD_STRING D6-Huck-2
4369: PPUSH
4370: CALL_OW 88
// end ;
4374: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4375: LD_INT 22
4377: PUSH
4378: LD_INT 1
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: PUSH
4385: LD_INT 2
4387: PUSH
4388: LD_INT 34
4390: PUSH
4391: LD_INT 8
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: PUSH
4398: LD_INT 35
4400: PUSH
4401: LD_INT 8
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: LIST
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PPUSH
4417: CALL_OW 69
4421: PUSH
4422: LD_INT 0
4424: GREATER
4425: IFFALSE 4617
4427: GO 4429
4429: DISABLE
4430: LD_INT 0
4432: PPUSH
4433: PPUSH
// begin enable ;
4434: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4435: LD_ADDR_VAR 0 1
4439: PUSH
4440: LD_INT 5
4442: PPUSH
4443: LD_INT 22
4445: PUSH
4446: LD_INT 1
4448: PUSH
4449: EMPTY
4450: LIST
4451: LIST
4452: PUSH
4453: LD_INT 21
4455: PUSH
4456: LD_INT 3
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 30
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 3
4475: PUSH
4476: LD_INT 57
4478: PUSH
4479: EMPTY
4480: LIST
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: PPUSH
4492: CALL_OW 70
4496: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4497: LD_ADDR_VAR 0 2
4501: PUSH
4502: LD_INT 5
4504: PPUSH
4505: LD_INT 22
4507: PUSH
4508: LD_INT 1
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: LD_INT 21
4517: PUSH
4518: LD_INT 3
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: PUSH
4525: LD_INT 30
4527: PUSH
4528: LD_INT 5
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PUSH
4535: LD_INT 3
4537: PUSH
4538: LD_INT 57
4540: PUSH
4541: EMPTY
4542: LIST
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: PPUSH
4554: CALL_OW 70
4558: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4559: LD_VAR 0 1
4563: PUSH
4564: LD_INT 0
4566: GREATER
4567: PUSH
4568: LD_VAR 0 2
4572: PUSH
4573: LD_INT 0
4575: GREATER
4576: AND
4577: IFFALSE 4617
// begin disable ;
4579: DISABLE
// DialogueOn ;
4580: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4584: LD_EXP 1
4588: PPUSH
4589: LD_STRING D7-JMM-1
4591: PPUSH
4592: CALL_OW 88
// DialogueOff ;
4596: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4600: LD_STRING M4
4602: PPUSH
4603: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4607: LD_INT 5
4609: PPUSH
4610: LD_INT 0
4612: PPUSH
4613: CALL_OW 424
// end ; end ;
4617: PPOPN 2
4619: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4620: LD_INT 6
4622: PPUSH
4623: LD_INT 22
4625: PUSH
4626: LD_INT 1
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: PUSH
4633: LD_INT 25
4635: PUSH
4636: LD_INT 4
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: PPUSH
4647: CALL_OW 70
4651: PUSH
4652: LD_INT 0
4654: GREATER
4655: PUSH
4656: LD_EXP 37
4660: PUSH
4661: LD_INT 1
4663: EQUAL
4664: AND
4665: PUSH
4666: LD_EXP 29
4670: PUSH
4671: LD_INT 0
4673: EQUAL
4674: AND
4675: IFFALSE 4740
4677: GO 4679
4679: DISABLE
// begin enable ;
4680: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4681: LD_ADDR_EXP 26
4685: PUSH
4686: LD_INT 6
4688: PPUSH
4689: LD_INT 22
4691: PUSH
4692: LD_INT 1
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: PUSH
4699: LD_INT 25
4701: PUSH
4702: LD_INT 4
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: PPUSH
4713: CALL_OW 70
4717: PUSH
4718: LD_INT 1
4720: ARRAY
4721: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4722: LD_INT 6
4724: PPUSH
4725: LD_INT 0
4727: PPUSH
4728: CALL_OW 424
// radationResearched = 1 ;
4732: LD_ADDR_EXP 29
4736: PUSH
4737: LD_INT 1
4739: ST_TO_ADDR
// end ;
4740: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4741: LD_EXP 26
4745: PPUSH
4746: CALL_OW 301
4750: PUSH
4751: LD_EXP 29
4755: PUSH
4756: LD_INT 1
4758: EQUAL
4759: AND
4760: IFFALSE 4796
4762: GO 4764
4764: DISABLE
// begin enable ;
4765: ENABLE
// radationResearched = 0 ;
4766: LD_ADDR_EXP 29
4770: PUSH
4771: LD_INT 0
4773: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
4774: LD_INT 6
4776: PPUSH
4777: LD_INT 1
4779: PPUSH
4780: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
4784: LD_EXP 1
4788: PPUSH
4789: LD_STRING D9a-JMM-1
4791: PPUSH
4792: CALL_OW 88
// end ; end_of_file
4796: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
4797: LD_VAR 0 5
4801: PUSH
4802: LD_INT 8
4804: EQUAL
4805: PUSH
4806: LD_EXP 35
4810: PUSH
4811: LD_INT 0
4813: EQUAL
4814: AND
4815: IFFALSE 4868
// begin eventVar1 = 1 ;
4817: LD_ADDR_EXP 35
4821: PUSH
4822: LD_INT 1
4824: ST_TO_ADDR
// DialogueOn ;
4825: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
4829: LD_EXP 1
4833: PPUSH
4834: LD_STRING D6a-JMM-1
4836: PPUSH
4837: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
4841: LD_EXP 15
4845: PPUSH
4846: LD_STRING D6a-Pow-1
4848: PPUSH
4849: CALL_OW 94
// DialogueOff ;
4853: CALL_OW 7
// wait ( 3 3$0 ) ;
4857: LD_INT 6300
4859: PPUSH
4860: CALL_OW 67
// PowellSupport ;
4864: CALL 1711 0 0
// end ; end ;
4868: PPOPN 5
4870: END
// on UnitDestroyed ( un ) do begin if un = JMM then
4871: LD_VAR 0 1
4875: PUSH
4876: LD_EXP 1
4880: EQUAL
4881: IFFALSE 4890
// YouLost ( JMM ) ;
4883: LD_STRING JMM
4885: PPUSH
4886: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
4890: LD_VAR 0 1
4894: PPUSH
4895: CALL_OW 264
4899: PUSH
4900: LD_INT 31
4902: EQUAL
4903: IFFALSE 4919
// achivCounter := achivCounter + 1 ;
4905: LD_ADDR_EXP 41
4909: PUSH
4910: LD_EXP 41
4914: PUSH
4915: LD_INT 1
4917: PLUS
4918: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
4919: LD_VAR 0 1
4923: PPUSH
4924: CALL_OW 255
4928: PUSH
4929: LD_INT 1
4931: NONEQUAL
4932: PUSH
4933: LD_VAR 0 1
4937: PPUSH
4938: CALL_OW 247
4942: PUSH
4943: LD_INT 2
4945: EQUAL
4946: AND
4947: IFFALSE 4963
// destroyCounter := destroyCounter + 1 ;
4949: LD_ADDR_EXP 42
4953: PUSH
4954: LD_EXP 42
4958: PUSH
4959: LD_INT 1
4961: PLUS
4962: ST_TO_ADDR
// end ;
4963: PPOPN 1
4965: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
4966: LD_VAR 0 2
4970: PUSH
4971: LD_EXP 18
4975: EQUAL
4976: IFFALSE 4985
// SetAchievement ( ACH_MASHA ) ;
4978: LD_STRING ACH_MASHA
4980: PPUSH
4981: CALL_OW 543
// end ;
4985: PPOPN 4
4987: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
4988: LD_VAR 0 1
4992: PPUSH
4993: CALL_OW 264
4997: PUSH
4998: LD_INT 8
5000: EQUAL
5001: PUSH
5002: LD_EXP 36
5006: PUSH
5007: LD_INT 0
5009: EQUAL
5010: AND
5011: IFFALSE 5080
// begin eventVar2 = 1 ;
5013: LD_ADDR_EXP 36
5017: PUSH
5018: LD_INT 1
5020: ST_TO_ADDR
// DialogueOn ;
5021: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
5025: LD_EXP 1
5029: PPUSH
5030: LD_STRING D6b-JMM-1
5032: PPUSH
5033: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
5037: LD_EXP 15
5041: PPUSH
5042: LD_STRING D6b-Pow-1
5044: PPUSH
5045: CALL_OW 94
// DialogueOff ;
5049: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
5053: LD_INT 5
5055: PPUSH
5056: LD_INT 1
5058: PPUSH
5059: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
5063: LD_INT 7
5065: PPUSH
5066: LD_INT 1
5068: PPUSH
5069: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
5073: LD_STRING M3
5075: PPUSH
5076: CALL_OW 337
// end ; end ;
5080: PPOPN 2
5082: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5083: LD_VAR 0 2
5087: PPUSH
5088: LD_VAR 0 3
5092: PPUSH
5093: LD_INT 5
5095: PPUSH
5096: CALL_OW 309
5100: PUSH
5101: LD_EXP 37
5105: PUSH
5106: LD_INT 0
5108: EQUAL
5109: AND
5110: IFFALSE 5339
// begin eventVar3 = 1 ;
5112: LD_ADDR_EXP 37
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5120: LD_INT 175
5122: PPUSH
5123: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5127: LD_INT 7
5129: PPUSH
5130: LD_INT 22
5132: PUSH
5133: LD_INT 1
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: LD_INT 21
5142: PUSH
5143: LD_INT 2
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: PUSH
5150: LD_INT 34
5152: PUSH
5153: LD_INT 11
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: LIST
5164: PPUSH
5165: CALL_OW 70
5169: PUSH
5170: LD_INT 0
5172: GREATER
5173: IFFALSE 5192
// begin radarOnSpot = 1 ;
5175: LD_ADDR_EXP 30
5179: PUSH
5180: LD_INT 1
5182: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5183: LD_STRING M3a
5185: PPUSH
5186: CALL_OW 337
// end else
5190: GO 5199
// begin ChangeMissionObjectives ( M3b ) ;
5192: LD_STRING M3b
5194: PPUSH
5195: CALL_OW 337
// end ; DialogueOn ;
5199: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5203: LD_EXP 2
5207: PPUSH
5208: LD_STRING D8-Huck-1
5210: PPUSH
5211: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5215: LD_EXP 1
5219: PPUSH
5220: LD_STRING D8-JMM-1
5222: PPUSH
5223: CALL_OW 88
// if IsOk ( Stevens ) then
5227: LD_EXP 2
5231: PPUSH
5232: CALL_OW 302
5236: IFFALSE 5298
// begin Say ( Stevens , D8-Huck-2 ) ;
5238: LD_EXP 2
5242: PPUSH
5243: LD_STRING D8-Huck-2
5245: PPUSH
5246: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5250: LD_EXP 1
5254: PPUSH
5255: LD_STRING D8-JMM-2
5257: PPUSH
5258: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5262: LD_EXP 2
5266: PPUSH
5267: LD_STRING D8-Huck-3
5269: PPUSH
5270: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5274: LD_EXP 1
5278: PPUSH
5279: LD_STRING D8-JMM-3
5281: PPUSH
5282: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5286: LD_EXP 2
5290: PPUSH
5291: LD_STRING D8-Huck-4
5293: PPUSH
5294: CALL_OW 88
// end ; DialogueOff ;
5298: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5302: LD_INT 5
5304: PPUSH
5305: LD_INT 0
5307: PPUSH
5308: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5312: LD_INT 7
5314: PPUSH
5315: LD_INT 0
5317: PPUSH
5318: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5322: LD_INT 6
5324: PPUSH
5325: LD_INT 1
5327: PPUSH
5328: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5332: LD_STRING M5
5334: PPUSH
5335: CALL_OW 337
// end ; end ;
5339: PPOPN 3
5341: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5342: LD_EXP 26
5346: PPUSH
5347: CALL_OW 302
5351: PUSH
5352: LD_VAR 0 2
5356: PUSH
5357: LD_EXP 26
5361: EQUAL
5362: AND
5363: PUSH
5364: LD_EXP 38
5368: PUSH
5369: LD_INT 0
5371: EQUAL
5372: AND
5373: PUSH
5374: LD_EXP 37
5378: PUSH
5379: LD_INT 1
5381: EQUAL
5382: AND
5383: IFFALSE 5429
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5385: LD_VAR 0 1
5389: PPUSH
5390: LD_INT 1
5392: PPUSH
5393: CALL_OW 268
5397: PUSH
5398: LD_INT 11
5400: EQUAL
5401: PUSH
5402: LD_VAR 0 1
5406: PPUSH
5407: LD_INT 2
5409: PPUSH
5410: CALL_OW 268
5414: PUSH
5415: LD_INT 11
5417: EQUAL
5418: OR
5419: IFFALSE 5429
// eventVar4 = 1 ;
5421: LD_ADDR_EXP 38
5425: PUSH
5426: LD_INT 1
5428: ST_TO_ADDR
// end ;
5429: PPOPN 2
5431: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5432: LD_INT 0
5434: PPUSH
5435: PPUSH
// begin if GetNation ( unit ) = 2 then
5436: LD_VAR 0 1
5440: PPUSH
5441: CALL_OW 248
5445: PUSH
5446: LD_INT 2
5448: EQUAL
5449: IFFALSE 5727
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5451: LD_ADDR_EXP 32
5455: PUSH
5456: LD_EXP 32
5460: PUSH
5461: LD_INT 1
5463: PLUS
5464: ST_TO_ADDR
// for i := 1 to sibDeposits do
5465: LD_ADDR_VAR 0 4
5469: PUSH
5470: DOUBLE
5471: LD_INT 1
5473: DEC
5474: ST_TO_ADDR
5475: LD_EXP 31
5479: PUSH
5480: FOR_TO
5481: IFFALSE 5583
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5483: LD_EXP 31
5487: PUSH
5488: LD_VAR 0 4
5492: ARRAY
5493: PUSH
5494: LD_INT 1
5496: ARRAY
5497: PUSH
5498: LD_VAR 0 2
5502: EQUAL
5503: PUSH
5504: LD_EXP 31
5508: PUSH
5509: LD_VAR 0 4
5513: ARRAY
5514: PUSH
5515: LD_INT 2
5517: ARRAY
5518: PUSH
5519: LD_VAR 0 3
5523: EQUAL
5524: AND
5525: IFFALSE 5581
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5527: LD_ADDR_EXP 31
5531: PUSH
5532: LD_EXP 31
5536: PPUSH
5537: LD_VAR 0 4
5541: PUSH
5542: EMPTY
5543: LIST
5544: PUSH
5545: LD_INT 1
5547: ARRAY
5548: PPUSH
5549: CALL_OW 3
5553: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5554: LD_ADDR_EXP 31
5558: PUSH
5559: LD_EXP 31
5563: PPUSH
5564: LD_VAR 0 4
5568: PUSH
5569: EMPTY
5570: LIST
5571: PUSH
5572: LD_INT 2
5574: ARRAY
5575: PPUSH
5576: CALL_OW 3
5580: ST_TO_ADDR
// end ;
5581: GO 5480
5583: POP
5584: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
5585: LD_EXP 39
5589: PUSH
5590: LD_INT 0
5592: EQUAL
5593: PUSH
5594: LD_VAR 0 2
5598: PPUSH
5599: LD_VAR 0 3
5603: PPUSH
5604: CALL_OW 428
5608: PUSH
5609: LD_INT 22
5611: PUSH
5612: LD_INT 1
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PPUSH
5619: CALL_OW 69
5623: IN
5624: AND
5625: IFFALSE 5727
// begin eventVar5 = 1 ;
5627: LD_ADDR_EXP 39
5631: PUSH
5632: LD_INT 1
5634: ST_TO_ADDR
// DialogueOn ;
5635: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5639: LD_EXP 2
5643: PPUSH
5644: LD_STRING D4-Sci1-1
5646: PPUSH
5647: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5651: LD_EXP 1
5655: PPUSH
5656: LD_STRING D4-JMM-1
5658: PPUSH
5659: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5663: LD_EXP 2
5667: PPUSH
5668: LD_STRING D4-Sci1-2
5670: PPUSH
5671: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5675: LD_EXP 1
5679: PPUSH
5680: LD_STRING D4-JMM-2
5682: PPUSH
5683: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5687: LD_EXP 2
5691: PPUSH
5692: LD_STRING D4-Sci1-3
5694: PPUSH
5695: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5699: LD_EXP 1
5703: PPUSH
5704: LD_STRING D4-JMM-3
5706: PPUSH
5707: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5711: LD_EXP 1
5715: PPUSH
5716: LD_STRING D4-JMM-3a
5718: PPUSH
5719: CALL_OW 88
// DialogueOff ;
5723: CALL_OW 7
// end ; end ; end ;
5727: PPOPN 5
5729: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
5730: LD_VAR 0 1
5734: PPUSH
5735: CALL_OW 255
5739: PUSH
5740: LD_INT 1
5742: EQUAL
5743: PUSH
5744: LD_VAR 0 1
5748: PPUSH
5749: CALL_OW 266
5753: PUSH
5754: LD_INT 0
5756: EQUAL
5757: AND
5758: PUSH
5759: LD_INT 22
5761: PUSH
5762: LD_INT 1
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: PUSH
5769: LD_INT 21
5771: PUSH
5772: LD_INT 3
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PUSH
5779: LD_INT 2
5781: PUSH
5782: LD_INT 30
5784: PUSH
5785: LD_INT 0
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PUSH
5792: LD_INT 30
5794: PUSH
5795: LD_INT 1
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: LIST
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: LIST
5811: PPUSH
5812: CALL_OW 69
5816: PUSH
5817: LD_INT 1
5819: EQUAL
5820: AND
5821: IFFALSE 5835
// SetBName ( building , omega ) ;
5823: LD_VAR 0 1
5827: PPUSH
5828: LD_STRING omega
5830: PPUSH
5831: CALL_OW 500
// end ;
5835: PPOPN 2
5837: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5838: LD_VAR 0 1
5842: PPUSH
5843: CALL 26076 0 1
// end ; end_of_file
5847: PPOPN 1
5849: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
5850: LD_INT 0
5852: PPUSH
5853: PPUSH
5854: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
5855: LD_ADDR_VAR 0 1
5859: PUSH
5860: LD_VAR 0 1
5864: PUSH
5865: LD_EXP 1
5869: PUSH
5870: LD_EXP 2
5874: PUSH
5875: LD_EXP 3
5879: PUSH
5880: LD_EXP 4
5884: PUSH
5885: LD_EXP 5
5889: PUSH
5890: LD_EXP 6
5894: PUSH
5895: LD_EXP 7
5899: PUSH
5900: LD_EXP 8
5904: PUSH
5905: LD_EXP 9
5909: PUSH
5910: LD_EXP 10
5914: PUSH
5915: LD_EXP 11
5919: PUSH
5920: LD_EXP 12
5924: PUSH
5925: LD_EXP 13
5929: PUSH
5930: LD_EXP 14
5934: PUSH
5935: LD_EXP 15
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: DIFF
5957: ST_TO_ADDR
// if not characters then
5958: LD_VAR 0 1
5962: NOT
5963: IFFALSE 5967
// exit ;
5965: GO 6046
// speaker := characters [ rand ( 1 , characters ) ] ;
5967: LD_ADDR_VAR 0 6
5971: PUSH
5972: LD_VAR 0 1
5976: PUSH
5977: LD_INT 1
5979: PPUSH
5980: LD_VAR 0 1
5984: PPUSH
5985: CALL_OW 12
5989: ARRAY
5990: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
5991: LD_VAR 0 6
5995: PPUSH
5996: CALL_OW 258
6000: PUSH
6001: LD_INT 1
6003: EQUAL
6004: IFFALSE 6022
// Say ( speaker , dialogMID ) else
6006: LD_VAR 0 6
6010: PPUSH
6011: LD_VAR 0 2
6015: PPUSH
6016: CALL_OW 88
6020: GO 6036
// Say ( speaker , dialogFID ) ;
6022: LD_VAR 0 6
6026: PPUSH
6027: LD_VAR 0 3
6031: PPUSH
6032: CALL_OW 88
// result := speaker ;
6036: LD_ADDR_VAR 0 4
6040: PUSH
6041: LD_VAR 0 6
6045: ST_TO_ADDR
// end ;
6046: LD_VAR 0 4
6050: RET
// export function PrepareDifficulty ; begin
6051: LD_INT 0
6053: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6054: LD_INT 5
6056: PPUSH
6057: LD_INT 8
6059: PPUSH
6060: LD_INT 2
6062: PPUSH
6063: CALL_OW 322
// if difficulty = 1 then
6067: LD_OWVAR 67
6071: PUSH
6072: LD_INT 1
6074: EQUAL
6075: IFFALSE 6194
// begin SetTech ( 66 , 8 , state_researched ) ;
6077: LD_INT 66
6079: PPUSH
6080: LD_INT 8
6082: PPUSH
6083: LD_INT 2
6085: PPUSH
6086: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6090: LD_INT 67
6092: PPUSH
6093: LD_INT 8
6095: PPUSH
6096: LD_INT 0
6098: PPUSH
6099: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6103: LD_INT 68
6105: PPUSH
6106: LD_INT 8
6108: PPUSH
6109: LD_INT 0
6111: PPUSH
6112: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6116: LD_INT 51
6118: PPUSH
6119: LD_INT 8
6121: PPUSH
6122: LD_INT 2
6124: PPUSH
6125: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6129: LD_INT 52
6131: PPUSH
6132: LD_INT 8
6134: PPUSH
6135: LD_INT 0
6137: PPUSH
6138: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6142: LD_INT 53
6144: PPUSH
6145: LD_INT 8
6147: PPUSH
6148: LD_INT 0
6150: PPUSH
6151: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6155: LD_INT 60
6157: PPUSH
6158: LD_INT 8
6160: PPUSH
6161: LD_INT 2
6163: PPUSH
6164: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6168: LD_INT 61
6170: PPUSH
6171: LD_INT 8
6173: PPUSH
6174: LD_INT 0
6176: PPUSH
6177: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6181: LD_INT 62
6183: PPUSH
6184: LD_INT 8
6186: PPUSH
6187: LD_INT 0
6189: PPUSH
6190: CALL_OW 322
// end ; if difficulty = 2 then
6194: LD_OWVAR 67
6198: PUSH
6199: LD_INT 2
6201: EQUAL
6202: IFFALSE 6321
// begin SetTech ( 66 , 8 , state_researched ) ;
6204: LD_INT 66
6206: PPUSH
6207: LD_INT 8
6209: PPUSH
6210: LD_INT 2
6212: PPUSH
6213: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6217: LD_INT 67
6219: PPUSH
6220: LD_INT 8
6222: PPUSH
6223: LD_INT 2
6225: PPUSH
6226: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6230: LD_INT 68
6232: PPUSH
6233: LD_INT 8
6235: PPUSH
6236: LD_INT 0
6238: PPUSH
6239: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6243: LD_INT 51
6245: PPUSH
6246: LD_INT 8
6248: PPUSH
6249: LD_INT 2
6251: PPUSH
6252: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6256: LD_INT 52
6258: PPUSH
6259: LD_INT 8
6261: PPUSH
6262: LD_INT 2
6264: PPUSH
6265: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6269: LD_INT 53
6271: PPUSH
6272: LD_INT 8
6274: PPUSH
6275: LD_INT 2
6277: PPUSH
6278: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6282: LD_INT 60
6284: PPUSH
6285: LD_INT 8
6287: PPUSH
6288: LD_INT 2
6290: PPUSH
6291: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6295: LD_INT 61
6297: PPUSH
6298: LD_INT 8
6300: PPUSH
6301: LD_INT 2
6303: PPUSH
6304: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6308: LD_INT 62
6310: PPUSH
6311: LD_INT 8
6313: PPUSH
6314: LD_INT 0
6316: PPUSH
6317: CALL_OW 322
// end ; if difficulty = 3 then
6321: LD_OWVAR 67
6325: PUSH
6326: LD_INT 3
6328: EQUAL
6329: IFFALSE 6448
// begin SetTech ( 66 , 8 , state_researched ) ;
6331: LD_INT 66
6333: PPUSH
6334: LD_INT 8
6336: PPUSH
6337: LD_INT 2
6339: PPUSH
6340: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6344: LD_INT 67
6346: PPUSH
6347: LD_INT 8
6349: PPUSH
6350: LD_INT 2
6352: PPUSH
6353: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6357: LD_INT 68
6359: PPUSH
6360: LD_INT 8
6362: PPUSH
6363: LD_INT 0
6365: PPUSH
6366: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6370: LD_INT 51
6372: PPUSH
6373: LD_INT 8
6375: PPUSH
6376: LD_INT 2
6378: PPUSH
6379: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6383: LD_INT 52
6385: PPUSH
6386: LD_INT 8
6388: PPUSH
6389: LD_INT 2
6391: PPUSH
6392: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6396: LD_INT 53
6398: PPUSH
6399: LD_INT 8
6401: PPUSH
6402: LD_INT 2
6404: PPUSH
6405: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6409: LD_INT 60
6411: PPUSH
6412: LD_INT 8
6414: PPUSH
6415: LD_INT 2
6417: PPUSH
6418: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6422: LD_INT 61
6424: PPUSH
6425: LD_INT 8
6427: PPUSH
6428: LD_INT 2
6430: PPUSH
6431: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6435: LD_INT 62
6437: PPUSH
6438: LD_INT 8
6440: PPUSH
6441: LD_INT 0
6443: PPUSH
6444: CALL_OW 322
// end ; end ;
6448: LD_VAR 0 1
6452: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6453: LD_INT 0
6455: PPUSH
6456: PPUSH
6457: PPUSH
6458: PPUSH
6459: PPUSH
6460: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6461: LD_ADDR_VAR 0 7
6465: PUSH
6466: LD_INT 22
6468: PUSH
6469: LD_VAR 0 1
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PUSH
6478: LD_INT 25
6480: PUSH
6481: LD_INT 9
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PPUSH
6492: CALL_OW 69
6496: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6497: LD_ADDR_VAR 0 8
6501: PUSH
6502: LD_INT 22
6504: PUSH
6505: LD_VAR 0 2
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: LD_INT 3
6516: PUSH
6517: LD_INT 21
6519: PUSH
6520: LD_INT 3
6522: PUSH
6523: EMPTY
6524: LIST
6525: LIST
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PPUSH
6535: CALL_OW 69
6539: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6540: LD_ADDR_VAR 0 5
6544: PUSH
6545: LD_INT 1
6547: PPUSH
6548: LD_INT 3
6550: PPUSH
6551: CALL_OW 12
6555: ST_TO_ADDR
// for i = 1 to list do
6556: LD_ADDR_VAR 0 6
6560: PUSH
6561: DOUBLE
6562: LD_INT 1
6564: DEC
6565: ST_TO_ADDR
6566: LD_VAR 0 7
6570: PUSH
6571: FOR_TO
6572: IFFALSE 6754
// for ta in filter do
6574: LD_ADDR_VAR 0 4
6578: PUSH
6579: LD_VAR 0 8
6583: PUSH
6584: FOR_IN
6585: IFFALSE 6750
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6587: LD_VAR 0 7
6591: PUSH
6592: LD_VAR 0 6
6596: ARRAY
6597: PPUSH
6598: LD_VAR 0 4
6602: PPUSH
6603: CALL_OW 296
6607: PUSH
6608: LD_INT 13
6610: LESSEQUAL
6611: IFFALSE 6748
// begin case c of 1 :
6613: LD_VAR 0 5
6617: PUSH
6618: LD_INT 1
6620: DOUBLE
6621: EQUAL
6622: IFTRUE 6626
6624: GO 6664
6626: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
6627: LD_VAR 0 7
6631: PUSH
6632: LD_VAR 0 6
6636: ARRAY
6637: PPUSH
6638: LD_VAR 0 4
6642: PPUSH
6643: CALL_OW 250
6647: PPUSH
6648: LD_VAR 0 4
6652: PPUSH
6653: CALL_OW 251
6657: PPUSH
6658: CALL_OW 154
6662: GO 6748
6664: LD_INT 2
6666: DOUBLE
6667: EQUAL
6668: IFTRUE 6672
6670: GO 6736
6672: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
6673: LD_VAR 0 7
6677: PUSH
6678: LD_VAR 0 6
6682: ARRAY
6683: PPUSH
6684: LD_VAR 0 4
6688: PPUSH
6689: CALL_OW 250
6693: PUSH
6694: LD_INT 1
6696: NEG
6697: PPUSH
6698: LD_INT 1
6700: PPUSH
6701: CALL_OW 12
6705: PLUS
6706: PPUSH
6707: LD_VAR 0 4
6711: PPUSH
6712: CALL_OW 251
6716: PUSH
6717: LD_INT 1
6719: NEG
6720: PPUSH
6721: LD_INT 1
6723: PPUSH
6724: CALL_OW 12
6728: PLUS
6729: PPUSH
6730: CALL_OW 153
6734: GO 6748
6736: LD_INT 3
6738: DOUBLE
6739: EQUAL
6740: IFTRUE 6744
6742: GO 6747
6744: POP
// ; end ;
6745: GO 6748
6747: POP
// end ; end ;
6748: GO 6584
6750: POP
6751: POP
6752: GO 6571
6754: POP
6755: POP
// end ;
6756: LD_VAR 0 3
6760: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6761: LD_INT 0
6763: PPUSH
6764: PPUSH
// for i in charactersList do
6765: LD_ADDR_VAR 0 4
6769: PUSH
6770: LD_VAR 0 1
6774: PUSH
6775: FOR_IN
6776: IFFALSE 6794
// SaveCharacters ( i , ident ) ;
6778: LD_VAR 0 4
6782: PPUSH
6783: LD_VAR 0 2
6787: PPUSH
6788: CALL_OW 38
6792: GO 6775
6794: POP
6795: POP
// end ;
6796: LD_VAR 0 3
6800: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6801: LD_INT 0
6803: PPUSH
6804: PPUSH
6805: PPUSH
6806: PPUSH
6807: PPUSH
6808: PPUSH
6809: PPUSH
6810: PPUSH
6811: PPUSH
6812: PPUSH
6813: PPUSH
// for i = 1 to medicCount do
6814: LD_ADDR_VAR 0 13
6818: PUSH
6819: DOUBLE
6820: LD_INT 1
6822: DEC
6823: ST_TO_ADDR
6824: LD_VAR 0 7
6828: PUSH
6829: FOR_TO
6830: IFFALSE 6912
// begin uc_side = side ;
6832: LD_ADDR_OWVAR 20
6836: PUSH
6837: LD_VAR 0 1
6841: ST_TO_ADDR
// uc_nation = nation ;
6842: LD_ADDR_OWVAR 21
6846: PUSH
6847: LD_VAR 0 2
6851: ST_TO_ADDR
// hc_name =  ;
6852: LD_ADDR_OWVAR 26
6856: PUSH
6857: LD_STRING 
6859: ST_TO_ADDR
// hc_gallery =  ;
6860: LD_ADDR_OWVAR 33
6864: PUSH
6865: LD_STRING 
6867: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
6868: LD_INT 0
6870: PPUSH
6871: LD_INT 4
6873: PPUSH
6874: LD_VAR 0 8
6878: PPUSH
6879: CALL_OW 380
// un = CreateHuman ;
6883: LD_ADDR_VAR 0 15
6887: PUSH
6888: CALL_OW 44
6892: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6893: LD_VAR 0 15
6897: PPUSH
6898: LD_VAR 0 9
6902: PPUSH
6903: LD_INT 0
6905: PPUSH
6906: CALL_OW 49
// end ;
6910: GO 6829
6912: POP
6913: POP
// for i = 1 to soldierCount do
6914: LD_ADDR_VAR 0 13
6918: PUSH
6919: DOUBLE
6920: LD_INT 1
6922: DEC
6923: ST_TO_ADDR
6924: LD_VAR 0 3
6928: PUSH
6929: FOR_TO
6930: IFFALSE 7012
// begin uc_side = side ;
6932: LD_ADDR_OWVAR 20
6936: PUSH
6937: LD_VAR 0 1
6941: ST_TO_ADDR
// uc_nation = nation ;
6942: LD_ADDR_OWVAR 21
6946: PUSH
6947: LD_VAR 0 2
6951: ST_TO_ADDR
// hc_name =  ;
6952: LD_ADDR_OWVAR 26
6956: PUSH
6957: LD_STRING 
6959: ST_TO_ADDR
// hc_gallery =  ;
6960: LD_ADDR_OWVAR 33
6964: PUSH
6965: LD_STRING 
6967: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
6968: LD_INT 0
6970: PPUSH
6971: LD_INT 1
6973: PPUSH
6974: LD_VAR 0 8
6978: PPUSH
6979: CALL_OW 380
// un = CreateHuman ;
6983: LD_ADDR_VAR 0 15
6987: PUSH
6988: CALL_OW 44
6992: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6993: LD_VAR 0 15
6997: PPUSH
6998: LD_VAR 0 9
7002: PPUSH
7003: LD_INT 0
7005: PPUSH
7006: CALL_OW 49
// end ;
7010: GO 6929
7012: POP
7013: POP
// for i = 1 to sniperCount do
7014: LD_ADDR_VAR 0 13
7018: PUSH
7019: DOUBLE
7020: LD_INT 1
7022: DEC
7023: ST_TO_ADDR
7024: LD_VAR 0 4
7028: PUSH
7029: FOR_TO
7030: IFFALSE 7112
// begin uc_side = side ;
7032: LD_ADDR_OWVAR 20
7036: PUSH
7037: LD_VAR 0 1
7041: ST_TO_ADDR
// uc_nation = nation ;
7042: LD_ADDR_OWVAR 21
7046: PUSH
7047: LD_VAR 0 2
7051: ST_TO_ADDR
// hc_name =  ;
7052: LD_ADDR_OWVAR 26
7056: PUSH
7057: LD_STRING 
7059: ST_TO_ADDR
// hc_gallery =  ;
7060: LD_ADDR_OWVAR 33
7064: PUSH
7065: LD_STRING 
7067: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7068: LD_INT 0
7070: PPUSH
7071: LD_INT 5
7073: PPUSH
7074: LD_VAR 0 8
7078: PPUSH
7079: CALL_OW 380
// un = CreateHuman ;
7083: LD_ADDR_VAR 0 15
7087: PUSH
7088: CALL_OW 44
7092: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7093: LD_VAR 0 15
7097: PPUSH
7098: LD_VAR 0 9
7102: PPUSH
7103: LD_INT 0
7105: PPUSH
7106: CALL_OW 49
// end ;
7110: GO 7029
7112: POP
7113: POP
// for i = 1 to bazookCount do
7114: LD_ADDR_VAR 0 13
7118: PUSH
7119: DOUBLE
7120: LD_INT 1
7122: DEC
7123: ST_TO_ADDR
7124: LD_VAR 0 5
7128: PUSH
7129: FOR_TO
7130: IFFALSE 7212
// begin uc_side = side ;
7132: LD_ADDR_OWVAR 20
7136: PUSH
7137: LD_VAR 0 1
7141: ST_TO_ADDR
// uc_nation = nation ;
7142: LD_ADDR_OWVAR 21
7146: PUSH
7147: LD_VAR 0 2
7151: ST_TO_ADDR
// hc_name =  ;
7152: LD_ADDR_OWVAR 26
7156: PUSH
7157: LD_STRING 
7159: ST_TO_ADDR
// hc_gallery =  ;
7160: LD_ADDR_OWVAR 33
7164: PUSH
7165: LD_STRING 
7167: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7168: LD_INT 0
7170: PPUSH
7171: LD_INT 9
7173: PPUSH
7174: LD_VAR 0 8
7178: PPUSH
7179: CALL_OW 380
// un = CreateHuman ;
7183: LD_ADDR_VAR 0 15
7187: PUSH
7188: CALL_OW 44
7192: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7193: LD_VAR 0 15
7197: PPUSH
7198: LD_VAR 0 9
7202: PPUSH
7203: LD_INT 0
7205: PPUSH
7206: CALL_OW 49
// end ;
7210: GO 7129
7212: POP
7213: POP
// for i = 1 to mortalCount do
7214: LD_ADDR_VAR 0 13
7218: PUSH
7219: DOUBLE
7220: LD_INT 1
7222: DEC
7223: ST_TO_ADDR
7224: LD_VAR 0 6
7228: PUSH
7229: FOR_TO
7230: IFFALSE 7312
// begin uc_side = side ;
7232: LD_ADDR_OWVAR 20
7236: PUSH
7237: LD_VAR 0 1
7241: ST_TO_ADDR
// uc_nation = nation ;
7242: LD_ADDR_OWVAR 21
7246: PUSH
7247: LD_VAR 0 2
7251: ST_TO_ADDR
// hc_name =  ;
7252: LD_ADDR_OWVAR 26
7256: PUSH
7257: LD_STRING 
7259: ST_TO_ADDR
// hc_gallery =  ;
7260: LD_ADDR_OWVAR 33
7264: PUSH
7265: LD_STRING 
7267: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7268: LD_INT 0
7270: PPUSH
7271: LD_INT 8
7273: PPUSH
7274: LD_VAR 0 8
7278: PPUSH
7279: CALL_OW 380
// un = CreateHuman ;
7283: LD_ADDR_VAR 0 15
7287: PUSH
7288: CALL_OW 44
7292: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7293: LD_VAR 0 15
7297: PPUSH
7298: LD_VAR 0 9
7302: PPUSH
7303: LD_INT 0
7305: PPUSH
7306: CALL_OW 49
// end ;
7310: GO 7229
7312: POP
7313: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7314: LD_ADDR_VAR 0 17
7318: PUSH
7319: LD_INT 22
7321: PUSH
7322: LD_VAR 0 1
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: LD_INT 25
7333: PUSH
7334: LD_INT 4
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PPUSH
7345: CALL_OW 69
7349: ST_TO_ADDR
// for i in medic_list do
7350: LD_ADDR_VAR 0 13
7354: PUSH
7355: LD_VAR 0 17
7359: PUSH
7360: FOR_IN
7361: IFFALSE 7396
// if GetTag ( i ) = 1 then
7363: LD_VAR 0 13
7367: PPUSH
7368: CALL_OW 110
7372: PUSH
7373: LD_INT 1
7375: EQUAL
7376: IFFALSE 7394
// medic_list := medic_list diff i ;
7378: LD_ADDR_VAR 0 17
7382: PUSH
7383: LD_VAR 0 17
7387: PUSH
7388: LD_VAR 0 13
7392: DIFF
7393: ST_TO_ADDR
7394: GO 7360
7396: POP
7397: POP
// for i in medic_list do
7398: LD_ADDR_VAR 0 13
7402: PUSH
7403: LD_VAR 0 17
7407: PUSH
7408: FOR_IN
7409: IFFALSE 7427
// ComMoveToArea ( i , healArea ) ;
7411: LD_VAR 0 13
7415: PPUSH
7416: LD_VAR 0 10
7420: PPUSH
7421: CALL_OW 113
7425: GO 7408
7427: POP
7428: POP
// repeat wait ( 0 0$1 ) ;
7429: LD_INT 35
7431: PPUSH
7432: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7436: LD_ADDR_VAR 0 16
7440: PUSH
7441: LD_INT 22
7443: PUSH
7444: LD_VAR 0 1
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: PUSH
7453: LD_INT 1
7455: PUSH
7456: LD_INT 3
7458: PUSH
7459: LD_INT 24
7461: PUSH
7462: LD_INT 550
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PUSH
7473: LD_INT 24
7475: PUSH
7476: LD_INT 250
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PUSH
7483: EMPTY
7484: LIST
7485: LIST
7486: LIST
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PPUSH
7492: CALL_OW 69
7496: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7497: LD_ADDR_VAR 0 18
7501: PUSH
7502: LD_INT 22
7504: PUSH
7505: LD_VAR 0 1
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PUSH
7514: LD_INT 2
7516: PUSH
7517: LD_INT 25
7519: PUSH
7520: LD_INT 1
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: PUSH
7527: LD_INT 25
7529: PUSH
7530: LD_INT 5
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 25
7539: PUSH
7540: LD_INT 8
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 25
7549: PUSH
7550: LD_INT 9
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 24
7566: PUSH
7567: LD_INT 1000
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: LIST
7578: PPUSH
7579: CALL_OW 69
7583: ST_TO_ADDR
// if medicCount > 0 then
7584: LD_VAR 0 7
7588: PUSH
7589: LD_INT 0
7591: GREATER
7592: IFFALSE 7666
// begin if damageUnit_list > 0 then
7594: LD_VAR 0 16
7598: PUSH
7599: LD_INT 0
7601: GREATER
7602: IFFALSE 7666
// begin for i in damageUnit_list do
7604: LD_ADDR_VAR 0 13
7608: PUSH
7609: LD_VAR 0 16
7613: PUSH
7614: FOR_IN
7615: IFFALSE 7664
// begin ComMoveToArea ( i , healArea ) ;
7617: LD_VAR 0 13
7621: PPUSH
7622: LD_VAR 0 10
7626: PPUSH
7627: CALL_OW 113
// for j in medic_list do
7631: LD_ADDR_VAR 0 14
7635: PUSH
7636: LD_VAR 0 17
7640: PUSH
7641: FOR_IN
7642: IFFALSE 7660
// AddComHeal ( j , i ) ;
7644: LD_VAR 0 14
7648: PPUSH
7649: LD_VAR 0 13
7653: PPUSH
7654: CALL_OW 188
7658: GO 7641
7660: POP
7661: POP
// end ;
7662: GO 7614
7664: POP
7665: POP
// end ; end ; for i in soldiersOK_list do
7666: LD_ADDR_VAR 0 13
7670: PUSH
7671: LD_VAR 0 18
7675: PUSH
7676: FOR_IN
7677: IFFALSE 7853
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7679: LD_ADDR_VAR 0 21
7683: PUSH
7684: LD_INT 22
7686: PUSH
7687: LD_VAR 0 11
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: PPUSH
7696: CALL_OW 69
7700: PPUSH
7701: LD_VAR 0 13
7705: PPUSH
7706: CALL_OW 74
7710: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7711: LD_ADDR_VAR 0 22
7715: PUSH
7716: LD_INT 22
7718: PUSH
7719: LD_VAR 0 11
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: LD_INT 2
7730: PUSH
7731: LD_INT 59
7733: PUSH
7734: EMPTY
7735: LIST
7736: PUSH
7737: LD_INT 21
7739: PUSH
7740: LD_INT 1
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: LD_INT 21
7749: PUSH
7750: LD_INT 2
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: EMPTY
7768: LIST
7769: PPUSH
7770: CALL_OW 69
7774: PPUSH
7775: LD_VAR 0 13
7779: PPUSH
7780: CALL_OW 74
7784: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7785: LD_VAR 0 13
7789: PPUSH
7790: LD_VAR 0 21
7794: PPUSH
7795: CALL_OW 296
7799: PUSH
7800: LD_INT 8
7802: PLUS
7803: PUSH
7804: LD_VAR 0 13
7808: PPUSH
7809: LD_VAR 0 22
7813: PPUSH
7814: CALL_OW 296
7818: LESS
7819: IFFALSE 7837
// begin ComAttackUnit ( i , target1 ) ;
7821: LD_VAR 0 13
7825: PPUSH
7826: LD_VAR 0 21
7830: PPUSH
7831: CALL_OW 115
// end else
7835: GO 7851
// begin ComAttackUnit ( i , target2 ) ;
7837: LD_VAR 0 13
7841: PPUSH
7842: LD_VAR 0 22
7846: PPUSH
7847: CALL_OW 115
// end ; end ;
7851: GO 7676
7853: POP
7854: POP
// until soldiersOK_list = [ ] ;
7855: LD_VAR 0 18
7859: PUSH
7860: EMPTY
7861: EQUAL
7862: IFFALSE 7429
// end ;
7864: LD_VAR 0 12
7868: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7869: LD_INT 0
7871: PPUSH
7872: PPUSH
7873: PPUSH
7874: PPUSH
7875: PPUSH
7876: PPUSH
7877: PPUSH
7878: PPUSH
7879: PPUSH
7880: PPUSH
7881: PPUSH
// amChassisTab = [ ] ;
7882: LD_ADDR_VAR 0 19
7886: PUSH
7887: EMPTY
7888: ST_TO_ADDR
// arChassisTab = [ ] ;
7889: LD_ADDR_VAR 0 18
7893: PUSH
7894: EMPTY
7895: ST_TO_ADDR
// ruChassisTab = [ ] ;
7896: LD_ADDR_VAR 0 17
7900: PUSH
7901: EMPTY
7902: ST_TO_ADDR
// for i = 1 to vehCount do
7903: LD_ADDR_VAR 0 13
7907: PUSH
7908: DOUBLE
7909: LD_INT 1
7911: DEC
7912: ST_TO_ADDR
7913: LD_VAR 0 3
7917: PUSH
7918: FOR_TO
7919: IFFALSE 9343
// begin wait ( 0 0$01 ) ;
7921: LD_INT 35
7923: PPUSH
7924: CALL_OW 67
// if nation = 1 then
7928: LD_VAR 0 5
7932: PUSH
7933: LD_INT 1
7935: EQUAL
7936: IFFALSE 8417
// begin uc_side = side ;
7938: LD_ADDR_OWVAR 20
7942: PUSH
7943: LD_VAR 0 2
7947: ST_TO_ADDR
// uc_nation = nation ;
7948: LD_ADDR_OWVAR 21
7952: PUSH
7953: LD_VAR 0 5
7957: ST_TO_ADDR
// vc_engine = vehengine ;
7958: LD_ADDR_OWVAR 39
7962: PUSH
7963: LD_VAR 0 6
7967: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
7968: LD_ADDR_OWVAR 40
7972: PUSH
7973: LD_VAR 0 10
7977: PUSH
7978: LD_INT 1
7980: PPUSH
7981: LD_VAR 0 10
7985: PPUSH
7986: CALL_OW 12
7990: ARRAY
7991: ST_TO_ADDR
// for j = 1 to AMWeapon do
7992: LD_ADDR_VAR 0 14
7996: PUSH
7997: DOUBLE
7998: LD_INT 1
8000: DEC
8001: ST_TO_ADDR
8002: LD_VAR 0 10
8006: PUSH
8007: FOR_TO
8008: IFFALSE 8309
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8010: LD_VAR 0 10
8014: PUSH
8015: LD_VAR 0 14
8019: ARRAY
8020: PUSH
8021: LD_INT 2
8023: EQUAL
8024: PUSH
8025: LD_VAR 0 10
8029: PUSH
8030: LD_VAR 0 14
8034: ARRAY
8035: PUSH
8036: LD_INT 3
8038: EQUAL
8039: OR
8040: IFFALSE 8093
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8042: LD_ADDR_VAR 0 19
8046: PUSH
8047: LD_INT 1
8049: PUSH
8050: LD_INT 2
8052: PUSH
8053: LD_INT 3
8055: PUSH
8056: LD_INT 4
8058: PUSH
8059: LD_INT 5
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8069: LD_ADDR_OWVAR 37
8073: PUSH
8074: LD_VAR 0 19
8078: PUSH
8079: LD_INT 1
8081: PPUSH
8082: LD_VAR 0 19
8086: PPUSH
8087: CALL_OW 12
8091: ARRAY
8092: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8093: LD_VAR 0 10
8097: PUSH
8098: LD_VAR 0 14
8102: ARRAY
8103: PUSH
8104: LD_INT 4
8106: EQUAL
8107: PUSH
8108: LD_VAR 0 10
8112: PUSH
8113: LD_VAR 0 14
8117: ARRAY
8118: PUSH
8119: LD_INT 5
8121: EQUAL
8122: OR
8123: PUSH
8124: LD_VAR 0 10
8128: PUSH
8129: LD_VAR 0 14
8133: ARRAY
8134: PUSH
8135: LD_INT 9
8137: EQUAL
8138: OR
8139: PUSH
8140: LD_VAR 0 10
8144: PUSH
8145: LD_VAR 0 14
8149: ARRAY
8150: PUSH
8151: LD_INT 11
8153: EQUAL
8154: OR
8155: PUSH
8156: LD_VAR 0 10
8160: PUSH
8161: LD_VAR 0 14
8165: ARRAY
8166: PUSH
8167: LD_INT 7
8169: EQUAL
8170: OR
8171: IFFALSE 8220
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8173: LD_ADDR_VAR 0 19
8177: PUSH
8178: LD_INT 2
8180: PUSH
8181: LD_INT 3
8183: PUSH
8184: LD_INT 4
8186: PUSH
8187: LD_INT 5
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8196: LD_ADDR_OWVAR 37
8200: PUSH
8201: LD_VAR 0 19
8205: PUSH
8206: LD_INT 1
8208: PPUSH
8209: LD_VAR 0 19
8213: PPUSH
8214: CALL_OW 12
8218: ARRAY
8219: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8220: LD_VAR 0 10
8224: PUSH
8225: LD_VAR 0 14
8229: ARRAY
8230: PUSH
8231: LD_INT 8
8233: EQUAL
8234: PUSH
8235: LD_VAR 0 10
8239: PUSH
8240: LD_VAR 0 14
8244: ARRAY
8245: PUSH
8246: LD_INT 6
8248: EQUAL
8249: OR
8250: PUSH
8251: LD_VAR 0 10
8255: PUSH
8256: LD_VAR 0 14
8260: ARRAY
8261: PUSH
8262: LD_INT 10
8264: EQUAL
8265: OR
8266: IFFALSE 8307
// begin amChassisTab = [ 4 , 5 ] ;
8268: LD_ADDR_VAR 0 19
8272: PUSH
8273: LD_INT 4
8275: PUSH
8276: LD_INT 5
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8283: LD_ADDR_OWVAR 37
8287: PUSH
8288: LD_VAR 0 19
8292: PUSH
8293: LD_INT 1
8295: PPUSH
8296: LD_VAR 0 19
8300: PPUSH
8301: CALL_OW 12
8305: ARRAY
8306: ST_TO_ADDR
// end ; end ;
8307: GO 8007
8309: POP
8310: POP
// veh = CreateVehicle ;
8311: LD_ADDR_VAR 0 16
8315: PUSH
8316: CALL_OW 45
8320: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8321: LD_VAR 0 16
8325: PPUSH
8326: LD_VAR 0 1
8330: PPUSH
8331: LD_INT 0
8333: PPUSH
8334: CALL_OW 49
// if vc_control = 1 then
8338: LD_OWVAR 38
8342: PUSH
8343: LD_INT 1
8345: EQUAL
8346: IFFALSE 8403
// begin hc_gallery =  ;
8348: LD_ADDR_OWVAR 33
8352: PUSH
8353: LD_STRING 
8355: ST_TO_ADDR
// hc_name =  ;
8356: LD_ADDR_OWVAR 26
8360: PUSH
8361: LD_STRING 
8363: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8364: LD_INT 0
8366: PPUSH
8367: LD_INT 3
8369: PPUSH
8370: LD_VAR 0 4
8374: PPUSH
8375: CALL_OW 380
// un = CreateHuman ;
8379: LD_ADDR_VAR 0 15
8383: PUSH
8384: CALL_OW 44
8388: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8389: LD_VAR 0 15
8393: PPUSH
8394: LD_VAR 0 16
8398: PPUSH
8399: CALL_OW 52
// end ; i = i + 1 ;
8403: LD_ADDR_VAR 0 13
8407: PUSH
8408: LD_VAR 0 13
8412: PUSH
8413: LD_INT 1
8415: PLUS
8416: ST_TO_ADDR
// end ; if nation = 2 then
8417: LD_VAR 0 5
8421: PUSH
8422: LD_INT 2
8424: EQUAL
8425: IFFALSE 8927
// begin uc_side = side ;
8427: LD_ADDR_OWVAR 20
8431: PUSH
8432: LD_VAR 0 2
8436: ST_TO_ADDR
// uc_nation = nation ;
8437: LD_ADDR_OWVAR 21
8441: PUSH
8442: LD_VAR 0 5
8446: ST_TO_ADDR
// vc_engine = vehengine ;
8447: LD_ADDR_OWVAR 39
8451: PUSH
8452: LD_VAR 0 6
8456: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8457: LD_INT 22
8459: PUSH
8460: LD_VAR 0 2
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 21
8471: PUSH
8472: LD_INT 2
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 33
8481: PUSH
8482: LD_INT 2
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PUSH
8489: LD_INT 50
8491: PUSH
8492: EMPTY
8493: LIST
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: PPUSH
8501: CALL_OW 69
8505: PUSH
8506: LD_INT 8
8508: LESSEQUAL
8509: IFFALSE 8537
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8511: LD_ADDR_OWVAR 38
8515: PUSH
8516: LD_VAR 0 7
8520: PUSH
8521: LD_INT 1
8523: PPUSH
8524: LD_VAR 0 7
8528: PPUSH
8529: CALL_OW 12
8533: ARRAY
8534: ST_TO_ADDR
8535: GO 8545
// vc_control = control_apeman ;
8537: LD_ADDR_OWVAR 38
8541: PUSH
8542: LD_INT 5
8544: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8545: LD_ADDR_OWVAR 40
8549: PUSH
8550: LD_VAR 0 9
8554: PUSH
8555: LD_INT 1
8557: PPUSH
8558: LD_VAR 0 9
8562: PPUSH
8563: CALL_OW 12
8567: ARRAY
8568: ST_TO_ADDR
// for j = 1 to ARWeapons do
8569: LD_ADDR_VAR 0 14
8573: PUSH
8574: DOUBLE
8575: LD_INT 1
8577: DEC
8578: ST_TO_ADDR
8579: LD_VAR 0 9
8583: PUSH
8584: FOR_TO
8585: IFFALSE 8819
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8587: LD_VAR 0 9
8591: PUSH
8592: LD_VAR 0 14
8596: ARRAY
8597: PUSH
8598: LD_INT 24
8600: EQUAL
8601: PUSH
8602: LD_VAR 0 9
8606: PUSH
8607: LD_VAR 0 14
8611: ARRAY
8612: PUSH
8613: LD_INT 22
8615: EQUAL
8616: OR
8617: PUSH
8618: LD_VAR 0 9
8622: PUSH
8623: LD_VAR 0 14
8627: ARRAY
8628: PUSH
8629: LD_INT 23
8631: EQUAL
8632: OR
8633: PUSH
8634: LD_VAR 0 9
8638: PUSH
8639: LD_VAR 0 14
8643: ARRAY
8644: PUSH
8645: LD_INT 30
8647: EQUAL
8648: OR
8649: IFFALSE 8698
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8651: LD_ADDR_VAR 0 18
8655: PUSH
8656: LD_INT 11
8658: PUSH
8659: LD_INT 12
8661: PUSH
8662: LD_INT 13
8664: PUSH
8665: LD_INT 14
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8674: LD_ADDR_OWVAR 37
8678: PUSH
8679: LD_VAR 0 18
8683: PUSH
8684: LD_INT 1
8686: PPUSH
8687: LD_VAR 0 18
8691: PPUSH
8692: CALL_OW 12
8696: ARRAY
8697: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8698: LD_VAR 0 9
8702: PUSH
8703: LD_VAR 0 14
8707: ARRAY
8708: PUSH
8709: LD_INT 29
8711: EQUAL
8712: PUSH
8713: LD_VAR 0 9
8717: PUSH
8718: LD_VAR 0 14
8722: ARRAY
8723: PUSH
8724: LD_INT 28
8726: EQUAL
8727: OR
8728: PUSH
8729: LD_VAR 0 9
8733: PUSH
8734: LD_VAR 0 14
8738: ARRAY
8739: PUSH
8740: LD_INT 27
8742: EQUAL
8743: OR
8744: PUSH
8745: LD_VAR 0 9
8749: PUSH
8750: LD_VAR 0 14
8754: ARRAY
8755: PUSH
8756: LD_INT 26
8758: EQUAL
8759: OR
8760: PUSH
8761: LD_VAR 0 9
8765: PUSH
8766: LD_VAR 0 14
8770: ARRAY
8771: PUSH
8772: LD_INT 25
8774: EQUAL
8775: OR
8776: IFFALSE 8817
// begin arChassisTab = [ 13 , 14 ] ;
8778: LD_ADDR_VAR 0 18
8782: PUSH
8783: LD_INT 13
8785: PUSH
8786: LD_INT 14
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8793: LD_ADDR_OWVAR 37
8797: PUSH
8798: LD_VAR 0 18
8802: PUSH
8803: LD_INT 1
8805: PPUSH
8806: LD_VAR 0 18
8810: PPUSH
8811: CALL_OW 12
8815: ARRAY
8816: ST_TO_ADDR
// end ; end ;
8817: GO 8584
8819: POP
8820: POP
// veh = CreateVehicle ;
8821: LD_ADDR_VAR 0 16
8825: PUSH
8826: CALL_OW 45
8830: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8831: LD_VAR 0 16
8835: PPUSH
8836: LD_VAR 0 1
8840: PPUSH
8841: LD_INT 0
8843: PPUSH
8844: CALL_OW 49
// if vc_control = 1 then
8848: LD_OWVAR 38
8852: PUSH
8853: LD_INT 1
8855: EQUAL
8856: IFFALSE 8913
// begin hc_gallery =  ;
8858: LD_ADDR_OWVAR 33
8862: PUSH
8863: LD_STRING 
8865: ST_TO_ADDR
// hc_name =  ;
8866: LD_ADDR_OWVAR 26
8870: PUSH
8871: LD_STRING 
8873: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8874: LD_INT 0
8876: PPUSH
8877: LD_INT 3
8879: PPUSH
8880: LD_VAR 0 4
8884: PPUSH
8885: CALL_OW 380
// un = CreateHuman ;
8889: LD_ADDR_VAR 0 15
8893: PUSH
8894: CALL_OW 44
8898: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8899: LD_VAR 0 15
8903: PPUSH
8904: LD_VAR 0 16
8908: PPUSH
8909: CALL_OW 52
// end ; i = i + 1 ;
8913: LD_ADDR_VAR 0 13
8917: PUSH
8918: LD_VAR 0 13
8922: PUSH
8923: LD_INT 1
8925: PLUS
8926: ST_TO_ADDR
// end ; if nation = 3 then
8927: LD_VAR 0 5
8931: PUSH
8932: LD_INT 3
8934: EQUAL
8935: IFFALSE 9341
// begin uc_side = side ;
8937: LD_ADDR_OWVAR 20
8941: PUSH
8942: LD_VAR 0 2
8946: ST_TO_ADDR
// uc_nation = nation ;
8947: LD_ADDR_OWVAR 21
8951: PUSH
8952: LD_VAR 0 5
8956: ST_TO_ADDR
// vc_engine = vehengine ;
8957: LD_ADDR_OWVAR 39
8961: PUSH
8962: LD_VAR 0 6
8966: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
8967: LD_ADDR_OWVAR 38
8971: PUSH
8972: LD_VAR 0 7
8976: PUSH
8977: LD_INT 1
8979: PPUSH
8980: LD_VAR 0 7
8984: PPUSH
8985: CALL_OW 12
8989: ARRAY
8990: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
8991: LD_ADDR_OWVAR 40
8995: PUSH
8996: LD_VAR 0 8
9000: PUSH
9001: LD_INT 1
9003: PPUSH
9004: LD_VAR 0 8
9008: PPUSH
9009: CALL_OW 12
9013: ARRAY
9014: ST_TO_ADDR
// for j = 1 to RuWeapons do
9015: LD_ADDR_VAR 0 14
9019: PUSH
9020: DOUBLE
9021: LD_INT 1
9023: DEC
9024: ST_TO_ADDR
9025: LD_VAR 0 8
9029: PUSH
9030: FOR_TO
9031: IFFALSE 9217
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9033: LD_VAR 0 8
9037: PUSH
9038: LD_VAR 0 14
9042: ARRAY
9043: PUSH
9044: LD_INT 42
9046: EQUAL
9047: PUSH
9048: LD_VAR 0 8
9052: PUSH
9053: LD_VAR 0 14
9057: ARRAY
9058: PUSH
9059: LD_INT 43
9061: EQUAL
9062: OR
9063: PUSH
9064: LD_VAR 0 8
9068: PUSH
9069: LD_VAR 0 14
9073: ARRAY
9074: PUSH
9075: LD_INT 44
9077: EQUAL
9078: OR
9079: PUSH
9080: LD_VAR 0 8
9084: PUSH
9085: LD_VAR 0 14
9089: ARRAY
9090: PUSH
9091: LD_INT 45
9093: EQUAL
9094: OR
9095: PUSH
9096: LD_VAR 0 8
9100: PUSH
9101: LD_VAR 0 14
9105: ARRAY
9106: PUSH
9107: LD_INT 49
9109: EQUAL
9110: OR
9111: IFFALSE 9148
// begin ruChassisTab = [ 24 ] ;
9113: LD_ADDR_VAR 0 17
9117: PUSH
9118: LD_INT 24
9120: PUSH
9121: EMPTY
9122: LIST
9123: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9124: LD_ADDR_OWVAR 37
9128: PUSH
9129: LD_VAR 0 17
9133: PUSH
9134: LD_INT 1
9136: PPUSH
9137: LD_VAR 0 17
9141: PPUSH
9142: CALL_OW 12
9146: ARRAY
9147: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9148: LD_VAR 0 8
9152: PUSH
9153: LD_VAR 0 14
9157: ARRAY
9158: PUSH
9159: LD_INT 46
9161: EQUAL
9162: PUSH
9163: LD_VAR 0 8
9167: PUSH
9168: LD_VAR 0 14
9172: ARRAY
9173: PUSH
9174: LD_INT 47
9176: EQUAL
9177: OR
9178: IFFALSE 9215
// begin ruChassisTab = [ 24 ] ;
9180: LD_ADDR_VAR 0 17
9184: PUSH
9185: LD_INT 24
9187: PUSH
9188: EMPTY
9189: LIST
9190: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9191: LD_ADDR_OWVAR 37
9195: PUSH
9196: LD_VAR 0 17
9200: PUSH
9201: LD_INT 1
9203: PPUSH
9204: LD_VAR 0 17
9208: PPUSH
9209: CALL_OW 12
9213: ARRAY
9214: ST_TO_ADDR
// end ; end ;
9215: GO 9030
9217: POP
9218: POP
// veh = CreateVehicle ;
9219: LD_ADDR_VAR 0 16
9223: PUSH
9224: CALL_OW 45
9228: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9229: LD_VAR 0 16
9233: PPUSH
9234: LD_VAR 0 1
9238: PPUSH
9239: LD_INT 0
9241: PPUSH
9242: CALL_OW 49
// if vc_control = 1 then
9246: LD_OWVAR 38
9250: PUSH
9251: LD_INT 1
9253: EQUAL
9254: IFFALSE 9341
// begin if uc_side = 8 then
9256: LD_OWVAR 20
9260: PUSH
9261: LD_INT 8
9263: EQUAL
9264: IFFALSE 9276
// uc_nation = 2 else
9266: LD_ADDR_OWVAR 21
9270: PUSH
9271: LD_INT 2
9273: ST_TO_ADDR
9274: GO 9286
// uc_nation = nation ;
9276: LD_ADDR_OWVAR 21
9280: PUSH
9281: LD_VAR 0 5
9285: ST_TO_ADDR
// hc_gallery =  ;
9286: LD_ADDR_OWVAR 33
9290: PUSH
9291: LD_STRING 
9293: ST_TO_ADDR
// hc_name =  ;
9294: LD_ADDR_OWVAR 26
9298: PUSH
9299: LD_STRING 
9301: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9302: LD_INT 0
9304: PPUSH
9305: LD_INT 3
9307: PPUSH
9308: LD_VAR 0 4
9312: PPUSH
9313: CALL_OW 380
// un = CreateHuman ;
9317: LD_ADDR_VAR 0 15
9321: PUSH
9322: CALL_OW 44
9326: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9327: LD_VAR 0 15
9331: PPUSH
9332: LD_VAR 0 16
9336: PPUSH
9337: CALL_OW 52
// end ; end ; end ;
9341: GO 7918
9343: POP
9344: POP
// repeat wait ( 0 0$1 ) ;
9345: LD_INT 35
9347: PPUSH
9348: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9352: LD_ADDR_VAR 0 20
9356: PUSH
9357: LD_INT 22
9359: PUSH
9360: LD_VAR 0 2
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: LD_INT 21
9371: PUSH
9372: LD_INT 2
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: PUSH
9379: LD_INT 24
9381: PUSH
9382: LD_INT 250
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 2
9391: PUSH
9392: LD_INT 34
9394: PUSH
9395: LD_INT 25
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PUSH
9402: LD_INT 34
9404: PUSH
9405: LD_INT 26
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: LD_INT 34
9414: PUSH
9415: LD_INT 27
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: PUSH
9422: LD_INT 34
9424: PUSH
9425: LD_INT 28
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: LD_INT 34
9434: PUSH
9435: LD_INT 29
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: PUSH
9442: LD_INT 34
9444: PUSH
9445: LD_INT 46
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: LD_INT 34
9454: PUSH
9455: LD_INT 44
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PUSH
9462: LD_INT 34
9464: PUSH
9465: LD_INT 45
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PUSH
9472: LD_INT 34
9474: PUSH
9475: LD_INT 47
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: PPUSH
9500: CALL_OW 69
9504: ST_TO_ADDR
// if vehicleOK_list > 0 then
9505: LD_VAR 0 20
9509: PUSH
9510: LD_INT 0
9512: GREATER
9513: IFFALSE 9732
// begin for i in vehicleOK_list do
9515: LD_ADDR_VAR 0 13
9519: PUSH
9520: LD_VAR 0 20
9524: PUSH
9525: FOR_IN
9526: IFFALSE 9730
// begin if GetSide ( i ) <> side then
9528: LD_VAR 0 13
9532: PPUSH
9533: CALL_OW 255
9537: PUSH
9538: LD_VAR 0 2
9542: NONEQUAL
9543: IFFALSE 9556
// begin ComStop ( i ) ;
9545: LD_VAR 0 13
9549: PPUSH
9550: CALL_OW 141
// continue ;
9554: GO 9525
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9556: LD_ADDR_VAR 0 21
9560: PUSH
9561: LD_INT 22
9563: PUSH
9564: LD_VAR 0 11
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PPUSH
9573: CALL_OW 69
9577: PPUSH
9578: LD_VAR 0 13
9582: PPUSH
9583: CALL_OW 74
9587: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9588: LD_ADDR_VAR 0 22
9592: PUSH
9593: LD_INT 22
9595: PUSH
9596: LD_VAR 0 11
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: LD_INT 2
9607: PUSH
9608: LD_INT 59
9610: PUSH
9611: EMPTY
9612: LIST
9613: PUSH
9614: LD_INT 21
9616: PUSH
9617: LD_INT 1
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 21
9626: PUSH
9627: LD_INT 2
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: EMPTY
9645: LIST
9646: PPUSH
9647: CALL_OW 69
9651: PPUSH
9652: LD_VAR 0 13
9656: PPUSH
9657: CALL_OW 74
9661: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9662: LD_VAR 0 13
9666: PPUSH
9667: LD_VAR 0 21
9671: PPUSH
9672: CALL_OW 296
9676: PUSH
9677: LD_INT 8
9679: PLUS
9680: PUSH
9681: LD_VAR 0 13
9685: PPUSH
9686: LD_VAR 0 22
9690: PPUSH
9691: CALL_OW 296
9695: LESS
9696: IFFALSE 9714
// begin ComAttackUnit ( i , target1 ) ;
9698: LD_VAR 0 13
9702: PPUSH
9703: LD_VAR 0 21
9707: PPUSH
9708: CALL_OW 115
// end else
9712: GO 9728
// begin ComAttackUnit ( i , target2 ) ;
9714: LD_VAR 0 13
9718: PPUSH
9719: LD_VAR 0 22
9723: PPUSH
9724: CALL_OW 115
// end ; end ;
9728: GO 9525
9730: POP
9731: POP
// end ; until vehicleOK_list = 0 ;
9732: LD_VAR 0 20
9736: PUSH
9737: LD_INT 0
9739: EQUAL
9740: IFFALSE 9345
// end ;
9742: LD_VAR 0 12
9746: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
9747: LD_INT 0
9749: PPUSH
9750: PPUSH
9751: PPUSH
9752: PPUSH
9753: PPUSH
9754: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
9755: LD_ADDR_VAR 0 6
9759: PUSH
9760: LD_INT 22
9762: PUSH
9763: LD_VAR 0 1
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PUSH
9772: LD_INT 34
9774: PUSH
9775: LD_INT 29
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PPUSH
9786: CALL_OW 69
9790: ST_TO_ADDR
// if veh_list = 0 then
9791: LD_VAR 0 6
9795: PUSH
9796: LD_INT 0
9798: EQUAL
9799: IFFALSE 9803
// exit ;
9801: GO 10008
// if veh_list > 0 then
9803: LD_VAR 0 6
9807: PUSH
9808: LD_INT 0
9810: GREATER
9811: IFFALSE 10008
// begin for i in veh_List do
9813: LD_ADDR_VAR 0 4
9817: PUSH
9818: LD_VAR 0 6
9822: PUSH
9823: FOR_IN
9824: IFFALSE 10006
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9826: LD_ADDR_VAR 0 7
9830: PUSH
9831: LD_INT 22
9833: PUSH
9834: LD_VAR 0 2
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: LD_INT 24
9845: PUSH
9846: LD_INT 250
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: PUSH
9853: LD_INT 2
9855: PUSH
9856: LD_INT 59
9858: PUSH
9859: EMPTY
9860: LIST
9861: PUSH
9862: LD_INT 21
9864: PUSH
9865: LD_INT 1
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: LD_INT 21
9874: PUSH
9875: LD_INT 2
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: LIST
9892: PUSH
9893: EMPTY
9894: LIST
9895: PPUSH
9896: CALL_OW 69
9900: PPUSH
9901: LD_VAR 0 4
9905: PPUSH
9906: CALL_OW 74
9910: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
9911: LD_VAR 0 4
9915: PPUSH
9916: LD_VAR 0 7
9920: PPUSH
9921: CALL_OW 115
// if not HasTask ( i ) then
9925: LD_VAR 0 4
9929: PPUSH
9930: CALL_OW 314
9934: NOT
9935: IFFALSE 10004
// begin wait ( 0 0$0.1 ) ;
9937: LD_INT 4
9939: PPUSH
9940: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
9944: LD_ADDR_VAR 0 8
9948: PUSH
9949: LD_INT 22
9951: PUSH
9952: LD_VAR 0 2
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PUSH
9961: LD_INT 24
9963: PUSH
9964: LD_INT 250
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PPUSH
9975: CALL_OW 69
9979: PPUSH
9980: LD_VAR 0 4
9984: PPUSH
9985: CALL_OW 74
9989: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
9990: LD_VAR 0 4
9994: PPUSH
9995: LD_VAR 0 8
9999: PPUSH
10000: CALL_OW 115
// end ; end ;
10004: GO 9823
10006: POP
10007: POP
// end ; end ; end_of_file
10008: LD_VAR 0 3
10012: RET
// every 0 0$1 do
10013: GO 10015
10015: DISABLE
// begin enable ;
10016: ENABLE
// IntBazooka ( 7 , 1 ) ;
10017: LD_INT 7
10019: PPUSH
10020: LD_INT 1
10022: PPUSH
10023: CALL 6453 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10027: LD_INT 8
10029: PPUSH
10030: LD_INT 1
10032: PPUSH
10033: CALL 9747 0 2
// end ;
10037: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10038: LD_INT 22
10040: PUSH
10041: LD_INT 3
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 21
10050: PUSH
10051: LD_INT 2
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: LD_INT 50
10060: PUSH
10061: EMPTY
10062: LIST
10063: PUSH
10064: LD_INT 2
10066: PUSH
10067: LD_INT 34
10069: PUSH
10070: LD_INT 46
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PUSH
10077: LD_INT 34
10079: PUSH
10080: LD_INT 44
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PUSH
10087: LD_INT 34
10089: PUSH
10090: LD_INT 45
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: PUSH
10097: LD_INT 34
10099: PUSH
10100: LD_INT 47
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: PUSH
10125: LD_INT 0
10127: GREATER
10128: PUSH
10129: LD_INT 22
10131: PUSH
10132: LD_INT 3
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: PUSH
10139: LD_INT 21
10141: PUSH
10142: LD_INT 2
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: LD_INT 50
10151: PUSH
10152: EMPTY
10153: LIST
10154: PUSH
10155: LD_INT 34
10157: PUSH
10158: LD_INT 49
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: PPUSH
10171: CALL_OW 69
10175: PUSH
10176: LD_INT 0
10178: GREATER
10179: AND
10180: IFFALSE 10352
10182: GO 10184
10184: DISABLE
10185: LD_INT 0
10187: PPUSH
10188: PPUSH
// begin enable ;
10189: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10190: LD_ADDR_VAR 0 1
10194: PUSH
10195: LD_INT 22
10197: PUSH
10198: LD_INT 3
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: PUSH
10205: LD_INT 21
10207: PUSH
10208: LD_INT 2
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: PUSH
10215: LD_INT 50
10217: PUSH
10218: EMPTY
10219: LIST
10220: PUSH
10221: LD_INT 2
10223: PUSH
10224: LD_INT 34
10226: PUSH
10227: LD_INT 46
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PUSH
10234: LD_INT 34
10236: PUSH
10237: LD_INT 44
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 34
10246: PUSH
10247: LD_INT 45
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 34
10256: PUSH
10257: LD_INT 47
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: PPUSH
10277: CALL_OW 69
10281: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10282: LD_ADDR_VAR 0 2
10286: PUSH
10287: LD_INT 22
10289: PUSH
10290: LD_INT 3
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: LD_INT 21
10299: PUSH
10300: LD_INT 2
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 50
10309: PUSH
10310: EMPTY
10311: LIST
10312: PUSH
10313: LD_INT 34
10315: PUSH
10316: LD_INT 49
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: PPUSH
10329: CALL_OW 69
10333: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10334: LD_VAR 0 2
10338: PPUSH
10339: LD_VAR 0 1
10343: PUSH
10344: LD_INT 1
10346: ARRAY
10347: PPUSH
10348: CALL_OW 112
// end ; end_of_file
10352: PPOPN 2
10354: END
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
10355: LD_EXP 38
10359: PUSH
10360: LD_INT 1
10362: EQUAL
10363: IFFALSE 11265
10365: GO 10367
10367: DISABLE
10368: LD_INT 0
10370: PPUSH
10371: PPUSH
10372: PPUSH
// begin m1 := false ;
10373: LD_ADDR_VAR 0 1
10377: PUSH
10378: LD_INT 0
10380: ST_TO_ADDR
// m2 := false ;
10381: LD_ADDR_VAR 0 2
10385: PUSH
10386: LD_INT 0
10388: ST_TO_ADDR
// m3 := false ;
10389: LD_ADDR_VAR 0 3
10393: PUSH
10394: LD_INT 0
10396: ST_TO_ADDR
// Say ( JMM , D9b-JMM-1 ) ;
10397: LD_EXP 1
10401: PPUSH
10402: LD_STRING D9b-JMM-1
10404: PPUSH
10405: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10409: LD_EXP 15
10413: PPUSH
10414: LD_STRING D9b-Pow-1
10416: PPUSH
10417: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10421: LD_EXP 1
10425: PPUSH
10426: LD_STRING D9b-JMM-2
10428: PPUSH
10429: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10433: LD_EXP 15
10437: PPUSH
10438: LD_STRING D9b-Pow-2
10440: PPUSH
10441: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10445: LD_EXP 1
10449: PPUSH
10450: LD_STRING D9b-JMM-3
10452: PPUSH
10453: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10457: LD_EXP 15
10461: PPUSH
10462: LD_STRING D9b-Pow-3
10464: PPUSH
10465: CALL_OW 94
// if tick <= 60 60$00 then
10469: LD_OWVAR 1
10473: PUSH
10474: LD_INT 126000
10476: LESSEQUAL
10477: IFFALSE 10486
// SetAchievement ( ACH_ASPEED_13 ) ;
10479: LD_STRING ACH_ASPEED_13
10481: PPUSH
10482: CALL_OW 543
// if burlakStatus = 1 then
10486: LD_EXP 28
10490: PUSH
10491: LD_INT 1
10493: EQUAL
10494: IFFALSE 10516
// begin m1 := true ;
10496: LD_ADDR_VAR 0 1
10500: PUSH
10501: LD_INT 1
10503: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
10504: LD_STRING Burlak
10506: PPUSH
10507: LD_INT 1
10509: PPUSH
10510: CALL_OW 101
// end else
10514: GO 10527
// begin AddMedal ( Burlak , - 1 ) ;
10516: LD_STRING Burlak
10518: PPUSH
10519: LD_INT 1
10521: NEG
10522: PPUSH
10523: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10527: LD_EXP 2
10531: PPUSH
10532: CALL_OW 302
10536: IFFALSE 10558
// begin m2 := true ;
10538: LD_ADDR_VAR 0 2
10542: PUSH
10543: LD_INT 1
10545: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
10546: LD_STRING Stevens
10548: PPUSH
10549: LD_INT 1
10551: PPUSH
10552: CALL_OW 101
// end else
10556: GO 10569
// begin AddMedal ( Stevens , - 1 ) ;
10558: LD_STRING Stevens
10560: PPUSH
10561: LD_INT 1
10563: NEG
10564: PPUSH
10565: CALL_OW 101
// end ; if radarOnSpot = 1 then
10569: LD_EXP 30
10573: PUSH
10574: LD_INT 1
10576: EQUAL
10577: IFFALSE 10599
// begin m3 := true ;
10579: LD_ADDR_VAR 0 3
10583: PUSH
10584: LD_INT 1
10586: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
10587: LD_STRING Observation
10589: PPUSH
10590: LD_INT 1
10592: PPUSH
10593: CALL_OW 101
// end else
10597: GO 10610
// begin AddMedal ( Observation , - 1 ) ;
10599: LD_STRING Observation
10601: PPUSH
10602: LD_INT 1
10604: NEG
10605: PPUSH
10606: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
10610: LD_VAR 0 1
10614: PUSH
10615: LD_VAR 0 2
10619: AND
10620: PUSH
10621: LD_VAR 0 3
10625: AND
10626: PUSH
10627: LD_OWVAR 67
10631: PUSH
10632: LD_INT 3
10634: EQUAL
10635: AND
10636: IFFALSE 10648
// SetAchievementEX ( ACH_AMER , 13 ) ;
10638: LD_STRING ACH_AMER
10640: PPUSH
10641: LD_INT 13
10643: PPUSH
10644: CALL_OW 564
// GiveMedals ( MAIN ) ;
10648: LD_STRING MAIN
10650: PPUSH
10651: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
10655: LD_EXP 28
10659: PPUSH
10660: LD_STRING 13_BurlakStatus_1
10662: PPUSH
10663: CALL_OW 39
// if IsLive ( Stevens ) then
10667: LD_EXP 2
10671: PPUSH
10672: CALL_OW 300
10676: IFFALSE 10690
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
10678: LD_INT 1
10680: PPUSH
10681: LD_STRING 13_StevensStatus_1
10683: PPUSH
10684: CALL_OW 39
10688: GO 10700
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
10690: LD_INT 0
10692: PPUSH
10693: LD_STRING 13_StevensStatus_1
10695: PPUSH
10696: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
10700: LD_INT 22
10702: PUSH
10703: LD_INT 1
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 21
10712: PUSH
10713: LD_INT 1
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 2
10722: PUSH
10723: LD_INT 25
10725: PUSH
10726: LD_INT 1
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PUSH
10733: LD_INT 25
10735: PUSH
10736: LD_INT 2
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PUSH
10743: LD_INT 25
10745: PUSH
10746: LD_INT 3
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: PUSH
10753: LD_INT 25
10755: PUSH
10756: LD_INT 4
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: LD_INT 25
10765: PUSH
10766: LD_INT 5
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PUSH
10773: LD_INT 25
10775: PUSH
10776: LD_INT 8
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: LIST
10796: PPUSH
10797: CALL_OW 69
10801: PPUSH
10802: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
10806: LD_EXP 1
10810: PPUSH
10811: LD_EXP 34
10815: PUSH
10816: LD_STRING JMM
10818: STR
10819: PPUSH
10820: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
10824: LD_EXP 8
10828: PPUSH
10829: LD_EXP 34
10833: PUSH
10834: LD_STRING Brown
10836: STR
10837: PPUSH
10838: CALL 6761 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
10842: LD_EXP 4
10846: PPUSH
10847: LD_EXP 34
10851: PUSH
10852: LD_STRING Donaldson
10854: STR
10855: PPUSH
10856: CALL 6761 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
10860: LD_EXP 5
10864: PPUSH
10865: LD_EXP 34
10869: PUSH
10870: LD_STRING Bobby
10872: STR
10873: PPUSH
10874: CALL 6761 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
10878: LD_EXP 6
10882: PPUSH
10883: LD_EXP 34
10887: PUSH
10888: LD_STRING Cyrus
10890: STR
10891: PPUSH
10892: CALL 6761 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
10896: LD_EXP 3
10900: PPUSH
10901: LD_EXP 34
10905: PUSH
10906: LD_STRING Lisa
10908: STR
10909: PPUSH
10910: CALL 6761 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
10914: LD_EXP 13
10918: PPUSH
10919: LD_EXP 34
10923: PUSH
10924: LD_STRING Frank
10926: STR
10927: PPUSH
10928: CALL 6761 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
10932: LD_EXP 14
10936: PPUSH
10937: LD_EXP 34
10941: PUSH
10942: LD_STRING Kikuchi
10944: STR
10945: PPUSH
10946: CALL 6761 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
10950: LD_EXP 10
10954: PPUSH
10955: LD_EXP 34
10959: PUSH
10960: LD_STRING Houten
10962: STR
10963: PPUSH
10964: CALL 6761 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
10968: LD_EXP 12
10972: PPUSH
10973: LD_EXP 34
10977: PUSH
10978: LD_STRING Gary
10980: STR
10981: PPUSH
10982: CALL 6761 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
10986: LD_EXP 11
10990: PPUSH
10991: LD_EXP 34
10995: PUSH
10996: LD_STRING Cornell
10998: STR
10999: PPUSH
11000: CALL 6761 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
11004: LD_EXP 7
11008: PPUSH
11009: LD_EXP 34
11013: PUSH
11014: LD_STRING Denis
11016: STR
11017: PPUSH
11018: CALL 6761 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11022: LD_EXP 9
11026: PPUSH
11027: LD_EXP 34
11031: PUSH
11032: LD_STRING Gladstone
11034: STR
11035: PPUSH
11036: CALL 6761 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
11040: LD_EXP 2
11044: PPUSH
11045: LD_EXP 34
11049: PUSH
11050: LD_STRING Stevens
11052: STR
11053: PPUSH
11054: CALL 6761 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
11058: LD_INT 50
11060: PUSH
11061: EMPTY
11062: LIST
11063: PUSH
11064: LD_INT 22
11066: PUSH
11067: LD_INT 1
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 21
11076: PUSH
11077: LD_INT 1
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: LD_INT 2
11086: PUSH
11087: LD_INT 25
11089: PUSH
11090: LD_INT 1
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 25
11099: PUSH
11100: LD_INT 2
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: LD_INT 25
11109: PUSH
11110: LD_INT 3
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: LD_INT 25
11119: PUSH
11120: LD_INT 4
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PUSH
11127: LD_INT 25
11129: PUSH
11130: LD_INT 5
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 25
11139: PUSH
11140: LD_INT 8
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: PPUSH
11162: CALL_OW 69
11166: PUSH
11167: LD_EXP 1
11171: PUSH
11172: LD_EXP 8
11176: PUSH
11177: LD_EXP 4
11181: PUSH
11182: LD_EXP 5
11186: PUSH
11187: LD_EXP 6
11191: PUSH
11192: LD_EXP 3
11196: PUSH
11197: LD_EXP 13
11201: PUSH
11202: LD_EXP 9
11206: PUSH
11207: LD_EXP 14
11211: PUSH
11212: LD_EXP 7
11216: PUSH
11217: LD_EXP 10
11221: PUSH
11222: LD_EXP 12
11226: PUSH
11227: LD_EXP 11
11231: PUSH
11232: LD_EXP 2
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: DIFF
11253: PPUSH
11254: LD_STRING 13_other_survivors
11256: PPUSH
11257: CALL_OW 38
// YouWin ;
11261: CALL_OW 103
// end ; end_of_file
11265: PPOPN 3
11267: END
// every 0 0$1 trigger sibDestroyedCounter = 2 do var i , tmp , yourSiberite ;
11268: LD_EXP 32
11272: PUSH
11273: LD_INT 2
11275: EQUAL
11276: IFFALSE 11412
11278: GO 11280
11280: DISABLE
11281: LD_INT 0
11283: PPUSH
11284: PPUSH
11285: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11286: LD_ADDR_VAR 0 2
11290: PUSH
11291: LD_INT 22
11293: PUSH
11294: LD_INT 1
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: PUSH
11301: LD_INT 21
11303: PUSH
11304: LD_INT 3
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: PUSH
11311: LD_INT 2
11313: PUSH
11314: LD_INT 30
11316: PUSH
11317: LD_INT 0
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PUSH
11324: LD_INT 30
11326: PUSH
11327: LD_INT 1
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: LIST
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: LIST
11343: PPUSH
11344: CALL_OW 69
11348: ST_TO_ADDR
// for i in tmp do
11349: LD_ADDR_VAR 0 1
11353: PUSH
11354: LD_VAR 0 2
11358: PUSH
11359: FOR_IN
11360: IFFALSE 11393
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11362: LD_ADDR_VAR 0 3
11366: PUSH
11367: LD_VAR 0 3
11371: PUSH
11372: LD_VAR 0 1
11376: PPUSH
11377: CALL_OW 274
11381: PPUSH
11382: LD_INT 3
11384: PPUSH
11385: CALL_OW 275
11389: PLUS
11390: ST_TO_ADDR
11391: GO 11359
11393: POP
11394: POP
// if yourSiberite < 79 then
11395: LD_VAR 0 3
11399: PUSH
11400: LD_INT 79
11402: LESS
11403: IFFALSE 11412
// YouLost ( siberite ) ;
11405: LD_STRING siberite
11407: PPUSH
11408: CALL_OW 104
// end ; end_of_file
11412: PPOPN 3
11414: END
// every 8 8$0 + 7 7$0 do
11415: GO 11417
11417: DISABLE
// begin enable ;
11418: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 1 , 3 ) , 0 , 0 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11419: LD_INT 8
11421: PPUSH
11422: LD_INT 2
11424: PPUSH
11425: LD_INT 1
11427: PPUSH
11428: LD_INT 3
11430: PPUSH
11431: CALL_OW 12
11435: PPUSH
11436: LD_INT 0
11438: PPUSH
11439: LD_INT 0
11441: PPUSH
11442: LD_INT 2
11444: PUSH
11445: LD_INT 3
11447: PUSH
11448: LD_INT 4
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: LIST
11455: PUSH
11456: LD_OWVAR 67
11460: ARRAY
11461: PPUSH
11462: LD_INT 0
11464: PPUSH
11465: LD_INT 10
11467: PPUSH
11468: LD_INT 8
11470: PUSH
11471: LD_INT 9
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: PUSH
11478: LD_INT 1
11480: PPUSH
11481: LD_INT 2
11483: PPUSH
11484: CALL_OW 12
11488: ARRAY
11489: PPUSH
11490: LD_INT 12
11492: PPUSH
11493: LD_INT 1
11495: PPUSH
11496: CALL 6801 0 11
// end ;
11500: END
// every 8 8$00 + 7 7$0 do var i , veh , xy ;
11501: GO 11503
11503: DISABLE
11504: LD_INT 0
11506: PPUSH
11507: PPUSH
11508: PPUSH
// begin enable ;
11509: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11510: LD_ADDR_EXP 33
11514: PUSH
11515: LD_EXP 33
11519: PUSH
11520: LD_INT 1
11522: PLUS
11523: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
11524: LD_INT 22
11526: PUSH
11527: LD_INT 8
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: LD_INT 3
11536: PUSH
11537: LD_INT 58
11539: PUSH
11540: EMPTY
11541: LIST
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: PUSH
11547: LD_INT 34
11549: PUSH
11550: LD_INT 31
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: LIST
11561: PPUSH
11562: CALL_OW 69
11566: PUSH
11567: LD_INT 2
11569: LESS
11570: IFFALSE 11810
// begin uc_side := 8 ;
11572: LD_ADDR_OWVAR 20
11576: PUSH
11577: LD_INT 8
11579: ST_TO_ADDR
// uc_nation := 2 ;
11580: LD_ADDR_OWVAR 21
11584: PUSH
11585: LD_INT 2
11587: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
11588: LD_INT 14
11590: PPUSH
11591: LD_INT 3
11593: PPUSH
11594: LD_INT 1
11596: PPUSH
11597: LD_INT 31
11599: PPUSH
11600: LD_INT 100
11602: PPUSH
11603: CALL 34783 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
11607: LD_ADDR_VAR 0 1
11611: PUSH
11612: DOUBLE
11613: LD_INT 22
11615: PUSH
11616: LD_INT 8
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PUSH
11623: LD_INT 3
11625: PUSH
11626: LD_INT 58
11628: PUSH
11629: EMPTY
11630: LIST
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: LD_INT 34
11638: PUSH
11639: LD_INT 31
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: LIST
11650: PPUSH
11651: CALL_OW 69
11655: PUSH
11656: LD_INT 1
11658: PLUS
11659: DEC
11660: ST_TO_ADDR
11661: LD_INT 2
11663: PUSH
11664: FOR_TO
11665: IFFALSE 11808
// begin veh := CreateVehicle ;
11667: LD_ADDR_VAR 0 2
11671: PUSH
11672: CALL_OW 45
11676: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11677: LD_VAR 0 2
11681: PPUSH
11682: LD_INT 5
11684: PPUSH
11685: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
11689: LD_ADDR_VAR 0 3
11693: PUSH
11694: LD_INT 181
11696: PUSH
11697: LD_INT 105
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: PUSH
11704: LD_INT 137
11706: PUSH
11707: LD_INT 6
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PUSH
11718: LD_VAR 0 1
11722: PUSH
11723: LD_INT 2
11725: MOD
11726: PUSH
11727: LD_INT 1
11729: PLUS
11730: ARRAY
11731: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
11732: LD_VAR 0 2
11736: PPUSH
11737: LD_VAR 0 3
11741: PUSH
11742: LD_INT 1
11744: ARRAY
11745: PPUSH
11746: LD_VAR 0 3
11750: PUSH
11751: LD_INT 2
11753: ARRAY
11754: PPUSH
11755: LD_INT 12
11757: PPUSH
11758: LD_INT 0
11760: PPUSH
11761: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 ] [ Difficulty ] ) ;
11765: LD_INT 0
11767: PPUSH
11768: LD_INT 7
11770: PUSH
11771: LD_INT 9
11773: PUSH
11774: LD_INT 10
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: LIST
11781: PUSH
11782: LD_OWVAR 67
11786: ARRAY
11787: PPUSH
11788: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
11792: CALL_OW 44
11796: PPUSH
11797: LD_VAR 0 2
11801: PPUSH
11802: CALL_OW 52
// end ;
11806: GO 11664
11808: POP
11809: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 10 ) ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
11810: LD_INT 8
11812: PUSH
11813: LD_INT 9
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: PUSH
11820: LD_INT 1
11822: PPUSH
11823: LD_INT 2
11825: PPUSH
11826: CALL_OW 12
11830: ARRAY
11831: PPUSH
11832: LD_INT 8
11834: PPUSH
11835: LD_INT 4
11837: PPUSH
11838: LD_INT 6
11840: PPUSH
11841: CALL_OW 12
11845: PUSH
11846: LD_INT 6
11848: PPUSH
11849: LD_INT 9
11851: PPUSH
11852: CALL_OW 12
11856: PUSH
11857: LD_INT 7
11859: PPUSH
11860: LD_INT 10
11862: PPUSH
11863: CALL_OW 12
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: LIST
11872: PUSH
11873: LD_OWVAR 67
11877: ARRAY
11878: PPUSH
11879: LD_INT 10
11881: PPUSH
11882: LD_INT 2
11884: PPUSH
11885: LD_INT 3
11887: PPUSH
11888: LD_INT 5
11890: PUSH
11891: LD_INT 2
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PPUSH
11898: EMPTY
11899: PPUSH
11900: LD_INT 25
11902: PUSH
11903: LD_INT 26
11905: PUSH
11906: LD_INT 27
11908: PUSH
11909: LD_INT 28
11911: PUSH
11912: LD_INT 29
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: PPUSH
11922: EMPTY
11923: PPUSH
11924: LD_INT 1
11926: PPUSH
11927: CALL 7869 0 11
// end ;
11931: PPOPN 3
11933: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do var i , veh ;
11934: LD_EXP 33
11938: PUSH
11939: LD_INT 4
11941: GREATEREQUAL
11942: IFFALSE 12282
11944: GO 11946
11946: DISABLE
11947: LD_INT 0
11949: PPUSH
11950: PPUSH
// begin enable ;
11951: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11952: LD_ADDR_EXP 33
11956: PUSH
11957: LD_EXP 33
11961: PUSH
11962: LD_INT 1
11964: PLUS
11965: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
11966: LD_INT 22
11968: PUSH
11969: LD_INT 8
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PUSH
11976: LD_INT 3
11978: PUSH
11979: LD_INT 58
11981: PUSH
11982: EMPTY
11983: LIST
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 34
11991: PUSH
11992: LD_INT 31
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: LIST
12003: PPUSH
12004: CALL_OW 69
12008: PUSH
12009: LD_INT 2
12011: LESS
12012: IFFALSE 12197
// begin uc_side := 8 ;
12014: LD_ADDR_OWVAR 20
12018: PUSH
12019: LD_INT 8
12021: ST_TO_ADDR
// uc_nation := 2 ;
12022: LD_ADDR_OWVAR 21
12026: PUSH
12027: LD_INT 2
12029: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12030: LD_INT 14
12032: PPUSH
12033: LD_INT 3
12035: PPUSH
12036: LD_INT 1
12038: PPUSH
12039: LD_INT 31
12041: PPUSH
12042: LD_INT 100
12044: PPUSH
12045: CALL 34783 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12049: LD_ADDR_VAR 0 1
12053: PUSH
12054: DOUBLE
12055: LD_INT 22
12057: PUSH
12058: LD_INT 8
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: LD_INT 3
12067: PUSH
12068: LD_INT 58
12070: PUSH
12071: EMPTY
12072: LIST
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: PUSH
12078: LD_INT 34
12080: PUSH
12081: LD_INT 31
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: LIST
12092: PPUSH
12093: CALL_OW 69
12097: PUSH
12098: LD_INT 1
12100: PLUS
12101: DEC
12102: ST_TO_ADDR
12103: LD_INT 2
12105: PUSH
12106: FOR_TO
12107: IFFALSE 12195
// begin veh := CreateVehicle ;
12109: LD_ADDR_VAR 0 2
12113: PUSH
12114: CALL_OW 45
12118: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12119: LD_VAR 0 2
12123: PPUSH
12124: LD_INT 5
12126: PPUSH
12127: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12131: LD_VAR 0 2
12135: PPUSH
12136: LD_INT 181
12138: PPUSH
12139: LD_INT 105
12141: PPUSH
12142: LD_INT 12
12144: PPUSH
12145: LD_INT 0
12147: PPUSH
12148: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
12152: LD_INT 0
12154: PPUSH
12155: LD_INT 8
12157: PUSH
12158: LD_INT 9
12160: PUSH
12161: LD_INT 10
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: LIST
12168: PUSH
12169: LD_OWVAR 67
12173: ARRAY
12174: PPUSH
12175: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12179: CALL_OW 44
12183: PPUSH
12184: LD_VAR 0 2
12188: PPUSH
12189: CALL_OW 52
// end ;
12193: GO 12106
12195: POP
12196: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
12197: LD_INT 8
12199: PUSH
12200: LD_INT 9
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: PUSH
12207: LD_INT 1
12209: PPUSH
12210: LD_INT 2
12212: PPUSH
12213: CALL_OW 12
12217: ARRAY
12218: PPUSH
12219: LD_INT 8
12221: PPUSH
12222: LD_INT 1
12224: PUSH
12225: LD_INT 2
12227: PUSH
12228: LD_INT 3
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: LIST
12235: PUSH
12236: LD_OWVAR 67
12240: ARRAY
12241: PPUSH
12242: LD_INT 10
12244: PPUSH
12245: LD_INT 3
12247: PPUSH
12248: LD_INT 3
12250: PPUSH
12251: LD_INT 1
12253: PUSH
12254: LD_INT 1
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PPUSH
12261: LD_INT 47
12263: PUSH
12264: LD_INT 47
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PPUSH
12271: EMPTY
12272: PPUSH
12273: EMPTY
12274: PPUSH
12275: LD_INT 1
12277: PPUSH
12278: CALL 7869 0 11
// end ;
12282: PPOPN 2
12284: END
// every 1 1$0 trigger eventVar2 = 1 do var i , veh ;
12285: LD_EXP 36
12289: PUSH
12290: LD_INT 1
12292: EQUAL
12293: IFFALSE 12630
12295: GO 12297
12297: DISABLE
12298: LD_INT 0
12300: PPUSH
12301: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12302: LD_INT 22
12304: PUSH
12305: LD_INT 8
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 3
12314: PUSH
12315: LD_INT 58
12317: PUSH
12318: EMPTY
12319: LIST
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: PUSH
12325: LD_INT 34
12327: PUSH
12328: LD_INT 31
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: LIST
12339: PPUSH
12340: CALL_OW 69
12344: PUSH
12345: LD_INT 2
12347: LESS
12348: IFFALSE 12533
// begin uc_side := 8 ;
12350: LD_ADDR_OWVAR 20
12354: PUSH
12355: LD_INT 8
12357: ST_TO_ADDR
// uc_nation := 2 ;
12358: LD_ADDR_OWVAR 21
12362: PUSH
12363: LD_INT 2
12365: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12366: LD_INT 14
12368: PPUSH
12369: LD_INT 3
12371: PPUSH
12372: LD_INT 1
12374: PPUSH
12375: LD_INT 31
12377: PPUSH
12378: LD_INT 100
12380: PPUSH
12381: CALL 34783 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12385: LD_ADDR_VAR 0 1
12389: PUSH
12390: DOUBLE
12391: LD_INT 22
12393: PUSH
12394: LD_INT 8
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PUSH
12401: LD_INT 3
12403: PUSH
12404: LD_INT 58
12406: PUSH
12407: EMPTY
12408: LIST
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PUSH
12414: LD_INT 34
12416: PUSH
12417: LD_INT 31
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: LIST
12428: PPUSH
12429: CALL_OW 69
12433: PUSH
12434: LD_INT 1
12436: PLUS
12437: DEC
12438: ST_TO_ADDR
12439: LD_INT 2
12441: PUSH
12442: FOR_TO
12443: IFFALSE 12531
// begin veh := CreateVehicle ;
12445: LD_ADDR_VAR 0 2
12449: PUSH
12450: CALL_OW 45
12454: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12455: LD_VAR 0 2
12459: PPUSH
12460: LD_INT 5
12462: PPUSH
12463: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12467: LD_VAR 0 2
12471: PPUSH
12472: LD_INT 181
12474: PPUSH
12475: LD_INT 105
12477: PPUSH
12478: LD_INT 12
12480: PPUSH
12481: LD_INT 0
12483: PPUSH
12484: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
12488: LD_INT 0
12490: PPUSH
12491: LD_INT 8
12493: PUSH
12494: LD_INT 9
12496: PUSH
12497: LD_INT 10
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: LIST
12504: PUSH
12505: LD_OWVAR 67
12509: ARRAY
12510: PPUSH
12511: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12515: CALL_OW 44
12519: PPUSH
12520: LD_VAR 0 2
12524: PPUSH
12525: CALL_OW 52
// end ;
12529: GO 12442
12531: POP
12532: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 5 , 7 , 8 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
12533: LD_INT 8
12535: PUSH
12536: LD_INT 9
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PUSH
12543: LD_INT 1
12545: PPUSH
12546: LD_INT 2
12548: PPUSH
12549: CALL_OW 12
12553: ARRAY
12554: PPUSH
12555: LD_INT 3
12557: PPUSH
12558: LD_INT 5
12560: PUSH
12561: LD_INT 7
12563: PUSH
12564: LD_INT 8
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: PUSH
12572: LD_OWVAR 67
12576: ARRAY
12577: PPUSH
12578: LD_INT 10
12580: PPUSH
12581: LD_INT 3
12583: PPUSH
12584: LD_INT 3
12586: PPUSH
12587: LD_INT 3
12589: PUSH
12590: LD_INT 3
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PPUSH
12597: LD_INT 46
12599: PUSH
12600: LD_INT 44
12602: PUSH
12603: LD_INT 45
12605: PUSH
12606: LD_INT 47
12608: PUSH
12609: LD_INT 49
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: PPUSH
12619: EMPTY
12620: PPUSH
12621: EMPTY
12622: PPUSH
12623: LD_INT 1
12625: PPUSH
12626: CALL 7869 0 11
// end ; end_of_file
12630: PPOPN 2
12632: END
// every 1 1$0 do
12633: GO 12635
12635: DISABLE
// begin enable ;
12636: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
12637: LD_INT 3
12639: PPUSH
12640: LD_INT 5
12642: PPUSH
12643: CALL_OW 12
12647: PPUSH
12648: LD_INT 13
12650: PPUSH
12651: LD_INT 1
12653: PPUSH
12654: CALL_OW 55
// end ; end_of_file
12658: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
12659: LD_INT 0
12661: PPUSH
// ar_miner := 81 ;
12662: LD_ADDR_EXP 50
12666: PUSH
12667: LD_INT 81
12669: ST_TO_ADDR
// ar_crane := 88 ;
12670: LD_ADDR_EXP 49
12674: PUSH
12675: LD_INT 88
12677: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12678: LD_ADDR_EXP 44
12682: PUSH
12683: LD_INT 89
12685: ST_TO_ADDR
// us_hack := 99 ;
12686: LD_ADDR_EXP 45
12690: PUSH
12691: LD_INT 99
12693: ST_TO_ADDR
// us_artillery := 97 ;
12694: LD_ADDR_EXP 46
12698: PUSH
12699: LD_INT 97
12701: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12702: LD_ADDR_EXP 47
12706: PUSH
12707: LD_INT 91
12709: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
12710: LD_ADDR_EXP 48
12714: PUSH
12715: LD_INT 92
12717: ST_TO_ADDR
// ru_radar := 98 ;
12718: LD_ADDR_EXP 43
12722: PUSH
12723: LD_INT 98
12725: ST_TO_ADDR
// tech_Artillery := 80 ;
12726: LD_ADDR_EXP 51
12730: PUSH
12731: LD_INT 80
12733: ST_TO_ADDR
// tech_RadMat := 81 ;
12734: LD_ADDR_EXP 52
12738: PUSH
12739: LD_INT 81
12741: ST_TO_ADDR
// tech_BasicTools := 82 ;
12742: LD_ADDR_EXP 53
12746: PUSH
12747: LD_INT 82
12749: ST_TO_ADDR
// tech_Cargo := 83 ;
12750: LD_ADDR_EXP 54
12754: PUSH
12755: LD_INT 83
12757: ST_TO_ADDR
// tech_Track := 84 ;
12758: LD_ADDR_EXP 55
12762: PUSH
12763: LD_INT 84
12765: ST_TO_ADDR
// tech_Crane := 85 ;
12766: LD_ADDR_EXP 56
12770: PUSH
12771: LD_INT 85
12773: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12774: LD_ADDR_EXP 57
12778: PUSH
12779: LD_INT 86
12781: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12782: LD_ADDR_EXP 58
12786: PUSH
12787: LD_INT 87
12789: ST_TO_ADDR
// end ;
12790: LD_VAR 0 1
12794: RET
// every 1 do
12795: GO 12797
12797: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12798: CALL 12659 0 0
12802: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
12803: LD_VAR 0 2
12807: PUSH
12808: LD_INT 100
12810: EQUAL
12811: IFFALSE 13760
// begin if not StreamModeActive then
12813: LD_EXP 59
12817: NOT
12818: IFFALSE 12828
// StreamModeActive := true ;
12820: LD_ADDR_EXP 59
12824: PUSH
12825: LD_INT 1
12827: ST_TO_ADDR
// if p3 = 0 then
12828: LD_VAR 0 3
12832: PUSH
12833: LD_INT 0
12835: EQUAL
12836: IFFALSE 12842
// InitStreamMode ;
12838: CALL 13918 0 0
// if p3 = 1 then
12842: LD_VAR 0 3
12846: PUSH
12847: LD_INT 1
12849: EQUAL
12850: IFFALSE 12860
// sRocket := true ;
12852: LD_ADDR_EXP 64
12856: PUSH
12857: LD_INT 1
12859: ST_TO_ADDR
// if p3 = 2 then
12860: LD_VAR 0 3
12864: PUSH
12865: LD_INT 2
12867: EQUAL
12868: IFFALSE 12878
// sSpeed := true ;
12870: LD_ADDR_EXP 63
12874: PUSH
12875: LD_INT 1
12877: ST_TO_ADDR
// if p3 = 3 then
12878: LD_VAR 0 3
12882: PUSH
12883: LD_INT 3
12885: EQUAL
12886: IFFALSE 12896
// sEngine := true ;
12888: LD_ADDR_EXP 65
12892: PUSH
12893: LD_INT 1
12895: ST_TO_ADDR
// if p3 = 4 then
12896: LD_VAR 0 3
12900: PUSH
12901: LD_INT 4
12903: EQUAL
12904: IFFALSE 12914
// sSpec := true ;
12906: LD_ADDR_EXP 62
12910: PUSH
12911: LD_INT 1
12913: ST_TO_ADDR
// if p3 = 5 then
12914: LD_VAR 0 3
12918: PUSH
12919: LD_INT 5
12921: EQUAL
12922: IFFALSE 12932
// sLevel := true ;
12924: LD_ADDR_EXP 66
12928: PUSH
12929: LD_INT 1
12931: ST_TO_ADDR
// if p3 = 6 then
12932: LD_VAR 0 3
12936: PUSH
12937: LD_INT 6
12939: EQUAL
12940: IFFALSE 12950
// sArmoury := true ;
12942: LD_ADDR_EXP 67
12946: PUSH
12947: LD_INT 1
12949: ST_TO_ADDR
// if p3 = 7 then
12950: LD_VAR 0 3
12954: PUSH
12955: LD_INT 7
12957: EQUAL
12958: IFFALSE 12968
// sRadar := true ;
12960: LD_ADDR_EXP 68
12964: PUSH
12965: LD_INT 1
12967: ST_TO_ADDR
// if p3 = 8 then
12968: LD_VAR 0 3
12972: PUSH
12973: LD_INT 8
12975: EQUAL
12976: IFFALSE 12986
// sBunker := true ;
12978: LD_ADDR_EXP 69
12982: PUSH
12983: LD_INT 1
12985: ST_TO_ADDR
// if p3 = 9 then
12986: LD_VAR 0 3
12990: PUSH
12991: LD_INT 9
12993: EQUAL
12994: IFFALSE 13004
// sHack := true ;
12996: LD_ADDR_EXP 70
13000: PUSH
13001: LD_INT 1
13003: ST_TO_ADDR
// if p3 = 10 then
13004: LD_VAR 0 3
13008: PUSH
13009: LD_INT 10
13011: EQUAL
13012: IFFALSE 13022
// sFire := true ;
13014: LD_ADDR_EXP 71
13018: PUSH
13019: LD_INT 1
13021: ST_TO_ADDR
// if p3 = 11 then
13022: LD_VAR 0 3
13026: PUSH
13027: LD_INT 11
13029: EQUAL
13030: IFFALSE 13040
// sRefresh := true ;
13032: LD_ADDR_EXP 72
13036: PUSH
13037: LD_INT 1
13039: ST_TO_ADDR
// if p3 = 12 then
13040: LD_VAR 0 3
13044: PUSH
13045: LD_INT 12
13047: EQUAL
13048: IFFALSE 13058
// sExp := true ;
13050: LD_ADDR_EXP 73
13054: PUSH
13055: LD_INT 1
13057: ST_TO_ADDR
// if p3 = 13 then
13058: LD_VAR 0 3
13062: PUSH
13063: LD_INT 13
13065: EQUAL
13066: IFFALSE 13076
// sDepot := true ;
13068: LD_ADDR_EXP 74
13072: PUSH
13073: LD_INT 1
13075: ST_TO_ADDR
// if p3 = 14 then
13076: LD_VAR 0 3
13080: PUSH
13081: LD_INT 14
13083: EQUAL
13084: IFFALSE 13094
// sFlag := true ;
13086: LD_ADDR_EXP 75
13090: PUSH
13091: LD_INT 1
13093: ST_TO_ADDR
// if p3 = 15 then
13094: LD_VAR 0 3
13098: PUSH
13099: LD_INT 15
13101: EQUAL
13102: IFFALSE 13112
// sKamikadze := true ;
13104: LD_ADDR_EXP 83
13108: PUSH
13109: LD_INT 1
13111: ST_TO_ADDR
// if p3 = 16 then
13112: LD_VAR 0 3
13116: PUSH
13117: LD_INT 16
13119: EQUAL
13120: IFFALSE 13130
// sTroll := true ;
13122: LD_ADDR_EXP 84
13126: PUSH
13127: LD_INT 1
13129: ST_TO_ADDR
// if p3 = 17 then
13130: LD_VAR 0 3
13134: PUSH
13135: LD_INT 17
13137: EQUAL
13138: IFFALSE 13148
// sSlow := true ;
13140: LD_ADDR_EXP 85
13144: PUSH
13145: LD_INT 1
13147: ST_TO_ADDR
// if p3 = 18 then
13148: LD_VAR 0 3
13152: PUSH
13153: LD_INT 18
13155: EQUAL
13156: IFFALSE 13166
// sLack := true ;
13158: LD_ADDR_EXP 86
13162: PUSH
13163: LD_INT 1
13165: ST_TO_ADDR
// if p3 = 19 then
13166: LD_VAR 0 3
13170: PUSH
13171: LD_INT 19
13173: EQUAL
13174: IFFALSE 13184
// sTank := true ;
13176: LD_ADDR_EXP 88
13180: PUSH
13181: LD_INT 1
13183: ST_TO_ADDR
// if p3 = 20 then
13184: LD_VAR 0 3
13188: PUSH
13189: LD_INT 20
13191: EQUAL
13192: IFFALSE 13202
// sRemote := true ;
13194: LD_ADDR_EXP 89
13198: PUSH
13199: LD_INT 1
13201: ST_TO_ADDR
// if p3 = 21 then
13202: LD_VAR 0 3
13206: PUSH
13207: LD_INT 21
13209: EQUAL
13210: IFFALSE 13220
// sPowell := true ;
13212: LD_ADDR_EXP 90
13216: PUSH
13217: LD_INT 1
13219: ST_TO_ADDR
// if p3 = 22 then
13220: LD_VAR 0 3
13224: PUSH
13225: LD_INT 22
13227: EQUAL
13228: IFFALSE 13238
// sTeleport := true ;
13230: LD_ADDR_EXP 93
13234: PUSH
13235: LD_INT 1
13237: ST_TO_ADDR
// if p3 = 23 then
13238: LD_VAR 0 3
13242: PUSH
13243: LD_INT 23
13245: EQUAL
13246: IFFALSE 13256
// sOilTower := true ;
13248: LD_ADDR_EXP 95
13252: PUSH
13253: LD_INT 1
13255: ST_TO_ADDR
// if p3 = 24 then
13256: LD_VAR 0 3
13260: PUSH
13261: LD_INT 24
13263: EQUAL
13264: IFFALSE 13274
// sShovel := true ;
13266: LD_ADDR_EXP 96
13270: PUSH
13271: LD_INT 1
13273: ST_TO_ADDR
// if p3 = 25 then
13274: LD_VAR 0 3
13278: PUSH
13279: LD_INT 25
13281: EQUAL
13282: IFFALSE 13292
// sSheik := true ;
13284: LD_ADDR_EXP 97
13288: PUSH
13289: LD_INT 1
13291: ST_TO_ADDR
// if p3 = 26 then
13292: LD_VAR 0 3
13296: PUSH
13297: LD_INT 26
13299: EQUAL
13300: IFFALSE 13310
// sEarthquake := true ;
13302: LD_ADDR_EXP 99
13306: PUSH
13307: LD_INT 1
13309: ST_TO_ADDR
// if p3 = 27 then
13310: LD_VAR 0 3
13314: PUSH
13315: LD_INT 27
13317: EQUAL
13318: IFFALSE 13328
// sAI := true ;
13320: LD_ADDR_EXP 100
13324: PUSH
13325: LD_INT 1
13327: ST_TO_ADDR
// if p3 = 28 then
13328: LD_VAR 0 3
13332: PUSH
13333: LD_INT 28
13335: EQUAL
13336: IFFALSE 13346
// sCargo := true ;
13338: LD_ADDR_EXP 103
13342: PUSH
13343: LD_INT 1
13345: ST_TO_ADDR
// if p3 = 29 then
13346: LD_VAR 0 3
13350: PUSH
13351: LD_INT 29
13353: EQUAL
13354: IFFALSE 13364
// sDLaser := true ;
13356: LD_ADDR_EXP 104
13360: PUSH
13361: LD_INT 1
13363: ST_TO_ADDR
// if p3 = 30 then
13364: LD_VAR 0 3
13368: PUSH
13369: LD_INT 30
13371: EQUAL
13372: IFFALSE 13382
// sExchange := true ;
13374: LD_ADDR_EXP 105
13378: PUSH
13379: LD_INT 1
13381: ST_TO_ADDR
// if p3 = 31 then
13382: LD_VAR 0 3
13386: PUSH
13387: LD_INT 31
13389: EQUAL
13390: IFFALSE 13400
// sFac := true ;
13392: LD_ADDR_EXP 106
13396: PUSH
13397: LD_INT 1
13399: ST_TO_ADDR
// if p3 = 32 then
13400: LD_VAR 0 3
13404: PUSH
13405: LD_INT 32
13407: EQUAL
13408: IFFALSE 13418
// sPower := true ;
13410: LD_ADDR_EXP 107
13414: PUSH
13415: LD_INT 1
13417: ST_TO_ADDR
// if p3 = 33 then
13418: LD_VAR 0 3
13422: PUSH
13423: LD_INT 33
13425: EQUAL
13426: IFFALSE 13436
// sRandom := true ;
13428: LD_ADDR_EXP 108
13432: PUSH
13433: LD_INT 1
13435: ST_TO_ADDR
// if p3 = 34 then
13436: LD_VAR 0 3
13440: PUSH
13441: LD_INT 34
13443: EQUAL
13444: IFFALSE 13454
// sShield := true ;
13446: LD_ADDR_EXP 109
13450: PUSH
13451: LD_INT 1
13453: ST_TO_ADDR
// if p3 = 35 then
13454: LD_VAR 0 3
13458: PUSH
13459: LD_INT 35
13461: EQUAL
13462: IFFALSE 13472
// sTime := true ;
13464: LD_ADDR_EXP 110
13468: PUSH
13469: LD_INT 1
13471: ST_TO_ADDR
// if p3 = 36 then
13472: LD_VAR 0 3
13476: PUSH
13477: LD_INT 36
13479: EQUAL
13480: IFFALSE 13490
// sTools := true ;
13482: LD_ADDR_EXP 111
13486: PUSH
13487: LD_INT 1
13489: ST_TO_ADDR
// if p3 = 101 then
13490: LD_VAR 0 3
13494: PUSH
13495: LD_INT 101
13497: EQUAL
13498: IFFALSE 13508
// sSold := true ;
13500: LD_ADDR_EXP 76
13504: PUSH
13505: LD_INT 1
13507: ST_TO_ADDR
// if p3 = 102 then
13508: LD_VAR 0 3
13512: PUSH
13513: LD_INT 102
13515: EQUAL
13516: IFFALSE 13526
// sDiff := true ;
13518: LD_ADDR_EXP 77
13522: PUSH
13523: LD_INT 1
13525: ST_TO_ADDR
// if p3 = 103 then
13526: LD_VAR 0 3
13530: PUSH
13531: LD_INT 103
13533: EQUAL
13534: IFFALSE 13544
// sFog := true ;
13536: LD_ADDR_EXP 80
13540: PUSH
13541: LD_INT 1
13543: ST_TO_ADDR
// if p3 = 104 then
13544: LD_VAR 0 3
13548: PUSH
13549: LD_INT 104
13551: EQUAL
13552: IFFALSE 13562
// sReset := true ;
13554: LD_ADDR_EXP 81
13558: PUSH
13559: LD_INT 1
13561: ST_TO_ADDR
// if p3 = 105 then
13562: LD_VAR 0 3
13566: PUSH
13567: LD_INT 105
13569: EQUAL
13570: IFFALSE 13580
// sSun := true ;
13572: LD_ADDR_EXP 82
13576: PUSH
13577: LD_INT 1
13579: ST_TO_ADDR
// if p3 = 106 then
13580: LD_VAR 0 3
13584: PUSH
13585: LD_INT 106
13587: EQUAL
13588: IFFALSE 13598
// sTiger := true ;
13590: LD_ADDR_EXP 78
13594: PUSH
13595: LD_INT 1
13597: ST_TO_ADDR
// if p3 = 107 then
13598: LD_VAR 0 3
13602: PUSH
13603: LD_INT 107
13605: EQUAL
13606: IFFALSE 13616
// sBomb := true ;
13608: LD_ADDR_EXP 79
13612: PUSH
13613: LD_INT 1
13615: ST_TO_ADDR
// if p3 = 108 then
13616: LD_VAR 0 3
13620: PUSH
13621: LD_INT 108
13623: EQUAL
13624: IFFALSE 13634
// sWound := true ;
13626: LD_ADDR_EXP 87
13630: PUSH
13631: LD_INT 1
13633: ST_TO_ADDR
// if p3 = 109 then
13634: LD_VAR 0 3
13638: PUSH
13639: LD_INT 109
13641: EQUAL
13642: IFFALSE 13652
// sBetray := true ;
13644: LD_ADDR_EXP 91
13648: PUSH
13649: LD_INT 1
13651: ST_TO_ADDR
// if p3 = 110 then
13652: LD_VAR 0 3
13656: PUSH
13657: LD_INT 110
13659: EQUAL
13660: IFFALSE 13670
// sContamin := true ;
13662: LD_ADDR_EXP 92
13666: PUSH
13667: LD_INT 1
13669: ST_TO_ADDR
// if p3 = 111 then
13670: LD_VAR 0 3
13674: PUSH
13675: LD_INT 111
13677: EQUAL
13678: IFFALSE 13688
// sOil := true ;
13680: LD_ADDR_EXP 94
13684: PUSH
13685: LD_INT 1
13687: ST_TO_ADDR
// if p3 = 112 then
13688: LD_VAR 0 3
13692: PUSH
13693: LD_INT 112
13695: EQUAL
13696: IFFALSE 13706
// sStu := true ;
13698: LD_ADDR_EXP 98
13702: PUSH
13703: LD_INT 1
13705: ST_TO_ADDR
// if p3 = 113 then
13706: LD_VAR 0 3
13710: PUSH
13711: LD_INT 113
13713: EQUAL
13714: IFFALSE 13724
// sBazooka := true ;
13716: LD_ADDR_EXP 101
13720: PUSH
13721: LD_INT 1
13723: ST_TO_ADDR
// if p3 = 114 then
13724: LD_VAR 0 3
13728: PUSH
13729: LD_INT 114
13731: EQUAL
13732: IFFALSE 13742
// sMortar := true ;
13734: LD_ADDR_EXP 102
13738: PUSH
13739: LD_INT 1
13741: ST_TO_ADDR
// if p3 = 115 then
13742: LD_VAR 0 3
13746: PUSH
13747: LD_INT 115
13749: EQUAL
13750: IFFALSE 13760
// sRanger := true ;
13752: LD_ADDR_EXP 112
13756: PUSH
13757: LD_INT 1
13759: ST_TO_ADDR
// end ; if p2 = 101 then
13760: LD_VAR 0 2
13764: PUSH
13765: LD_INT 101
13767: EQUAL
13768: IFFALSE 13896
// begin case p3 of 1 :
13770: LD_VAR 0 3
13774: PUSH
13775: LD_INT 1
13777: DOUBLE
13778: EQUAL
13779: IFTRUE 13783
13781: GO 13790
13783: POP
// hHackUnlimitedResources ; 2 :
13784: CALL 24931 0 0
13788: GO 13896
13790: LD_INT 2
13792: DOUBLE
13793: EQUAL
13794: IFTRUE 13798
13796: GO 13805
13798: POP
// hHackSetLevel10 ; 3 :
13799: CALL 25064 0 0
13803: GO 13896
13805: LD_INT 3
13807: DOUBLE
13808: EQUAL
13809: IFTRUE 13813
13811: GO 13820
13813: POP
// hHackSetLevel10YourUnits ; 4 :
13814: CALL 25149 0 0
13818: GO 13896
13820: LD_INT 4
13822: DOUBLE
13823: EQUAL
13824: IFTRUE 13828
13826: GO 13835
13828: POP
// hHackInvincible ; 5 :
13829: CALL 25597 0 0
13833: GO 13896
13835: LD_INT 5
13837: DOUBLE
13838: EQUAL
13839: IFTRUE 13843
13841: GO 13850
13843: POP
// hHackInvisible ; 6 :
13844: CALL 25708 0 0
13848: GO 13896
13850: LD_INT 6
13852: DOUBLE
13853: EQUAL
13854: IFTRUE 13858
13856: GO 13865
13858: POP
// hHackChangeYourSide ; 7 :
13859: CALL 25765 0 0
13863: GO 13896
13865: LD_INT 7
13867: DOUBLE
13868: EQUAL
13869: IFTRUE 13873
13871: GO 13880
13873: POP
// hHackChangeUnitSide ; 8 :
13874: CALL 25807 0 0
13878: GO 13896
13880: LD_INT 8
13882: DOUBLE
13883: EQUAL
13884: IFTRUE 13888
13886: GO 13895
13888: POP
// hHackFog ; end ;
13889: CALL 25908 0 0
13893: GO 13896
13895: POP
// end ; end ;
13896: PPOPN 6
13898: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13899: GO 13901
13901: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13902: LD_STRING initStreamRollete();
13904: PPUSH
13905: CALL_OW 559
// InitStreamMode ;
13909: CALL 13918 0 0
// DefineStreamItems ( ) ;
13913: CALL 14358 0 0
// end ;
13917: END
// function InitStreamMode ; begin
13918: LD_INT 0
13920: PPUSH
// streamModeActive := false ;
13921: LD_ADDR_EXP 59
13925: PUSH
13926: LD_INT 0
13928: ST_TO_ADDR
// normalCounter := 36 ;
13929: LD_ADDR_EXP 60
13933: PUSH
13934: LD_INT 36
13936: ST_TO_ADDR
// hardcoreCounter := 16 ;
13937: LD_ADDR_EXP 61
13941: PUSH
13942: LD_INT 16
13944: ST_TO_ADDR
// sRocket := false ;
13945: LD_ADDR_EXP 64
13949: PUSH
13950: LD_INT 0
13952: ST_TO_ADDR
// sSpeed := false ;
13953: LD_ADDR_EXP 63
13957: PUSH
13958: LD_INT 0
13960: ST_TO_ADDR
// sEngine := false ;
13961: LD_ADDR_EXP 65
13965: PUSH
13966: LD_INT 0
13968: ST_TO_ADDR
// sSpec := false ;
13969: LD_ADDR_EXP 62
13973: PUSH
13974: LD_INT 0
13976: ST_TO_ADDR
// sLevel := false ;
13977: LD_ADDR_EXP 66
13981: PUSH
13982: LD_INT 0
13984: ST_TO_ADDR
// sArmoury := false ;
13985: LD_ADDR_EXP 67
13989: PUSH
13990: LD_INT 0
13992: ST_TO_ADDR
// sRadar := false ;
13993: LD_ADDR_EXP 68
13997: PUSH
13998: LD_INT 0
14000: ST_TO_ADDR
// sBunker := false ;
14001: LD_ADDR_EXP 69
14005: PUSH
14006: LD_INT 0
14008: ST_TO_ADDR
// sHack := false ;
14009: LD_ADDR_EXP 70
14013: PUSH
14014: LD_INT 0
14016: ST_TO_ADDR
// sFire := false ;
14017: LD_ADDR_EXP 71
14021: PUSH
14022: LD_INT 0
14024: ST_TO_ADDR
// sRefresh := false ;
14025: LD_ADDR_EXP 72
14029: PUSH
14030: LD_INT 0
14032: ST_TO_ADDR
// sExp := false ;
14033: LD_ADDR_EXP 73
14037: PUSH
14038: LD_INT 0
14040: ST_TO_ADDR
// sDepot := false ;
14041: LD_ADDR_EXP 74
14045: PUSH
14046: LD_INT 0
14048: ST_TO_ADDR
// sFlag := false ;
14049: LD_ADDR_EXP 75
14053: PUSH
14054: LD_INT 0
14056: ST_TO_ADDR
// sKamikadze := false ;
14057: LD_ADDR_EXP 83
14061: PUSH
14062: LD_INT 0
14064: ST_TO_ADDR
// sTroll := false ;
14065: LD_ADDR_EXP 84
14069: PUSH
14070: LD_INT 0
14072: ST_TO_ADDR
// sSlow := false ;
14073: LD_ADDR_EXP 85
14077: PUSH
14078: LD_INT 0
14080: ST_TO_ADDR
// sLack := false ;
14081: LD_ADDR_EXP 86
14085: PUSH
14086: LD_INT 0
14088: ST_TO_ADDR
// sTank := false ;
14089: LD_ADDR_EXP 88
14093: PUSH
14094: LD_INT 0
14096: ST_TO_ADDR
// sRemote := false ;
14097: LD_ADDR_EXP 89
14101: PUSH
14102: LD_INT 0
14104: ST_TO_ADDR
// sPowell := false ;
14105: LD_ADDR_EXP 90
14109: PUSH
14110: LD_INT 0
14112: ST_TO_ADDR
// sTeleport := false ;
14113: LD_ADDR_EXP 93
14117: PUSH
14118: LD_INT 0
14120: ST_TO_ADDR
// sOilTower := false ;
14121: LD_ADDR_EXP 95
14125: PUSH
14126: LD_INT 0
14128: ST_TO_ADDR
// sShovel := false ;
14129: LD_ADDR_EXP 96
14133: PUSH
14134: LD_INT 0
14136: ST_TO_ADDR
// sSheik := false ;
14137: LD_ADDR_EXP 97
14141: PUSH
14142: LD_INT 0
14144: ST_TO_ADDR
// sEarthquake := false ;
14145: LD_ADDR_EXP 99
14149: PUSH
14150: LD_INT 0
14152: ST_TO_ADDR
// sAI := false ;
14153: LD_ADDR_EXP 100
14157: PUSH
14158: LD_INT 0
14160: ST_TO_ADDR
// sCargo := false ;
14161: LD_ADDR_EXP 103
14165: PUSH
14166: LD_INT 0
14168: ST_TO_ADDR
// sDLaser := false ;
14169: LD_ADDR_EXP 104
14173: PUSH
14174: LD_INT 0
14176: ST_TO_ADDR
// sExchange := false ;
14177: LD_ADDR_EXP 105
14181: PUSH
14182: LD_INT 0
14184: ST_TO_ADDR
// sFac := false ;
14185: LD_ADDR_EXP 106
14189: PUSH
14190: LD_INT 0
14192: ST_TO_ADDR
// sPower := false ;
14193: LD_ADDR_EXP 107
14197: PUSH
14198: LD_INT 0
14200: ST_TO_ADDR
// sRandom := false ;
14201: LD_ADDR_EXP 108
14205: PUSH
14206: LD_INT 0
14208: ST_TO_ADDR
// sShield := false ;
14209: LD_ADDR_EXP 109
14213: PUSH
14214: LD_INT 0
14216: ST_TO_ADDR
// sTime := false ;
14217: LD_ADDR_EXP 110
14221: PUSH
14222: LD_INT 0
14224: ST_TO_ADDR
// sTools := false ;
14225: LD_ADDR_EXP 111
14229: PUSH
14230: LD_INT 0
14232: ST_TO_ADDR
// sSold := false ;
14233: LD_ADDR_EXP 76
14237: PUSH
14238: LD_INT 0
14240: ST_TO_ADDR
// sDiff := false ;
14241: LD_ADDR_EXP 77
14245: PUSH
14246: LD_INT 0
14248: ST_TO_ADDR
// sFog := false ;
14249: LD_ADDR_EXP 80
14253: PUSH
14254: LD_INT 0
14256: ST_TO_ADDR
// sReset := false ;
14257: LD_ADDR_EXP 81
14261: PUSH
14262: LD_INT 0
14264: ST_TO_ADDR
// sSun := false ;
14265: LD_ADDR_EXP 82
14269: PUSH
14270: LD_INT 0
14272: ST_TO_ADDR
// sTiger := false ;
14273: LD_ADDR_EXP 78
14277: PUSH
14278: LD_INT 0
14280: ST_TO_ADDR
// sBomb := false ;
14281: LD_ADDR_EXP 79
14285: PUSH
14286: LD_INT 0
14288: ST_TO_ADDR
// sWound := false ;
14289: LD_ADDR_EXP 87
14293: PUSH
14294: LD_INT 0
14296: ST_TO_ADDR
// sBetray := false ;
14297: LD_ADDR_EXP 91
14301: PUSH
14302: LD_INT 0
14304: ST_TO_ADDR
// sContamin := false ;
14305: LD_ADDR_EXP 92
14309: PUSH
14310: LD_INT 0
14312: ST_TO_ADDR
// sOil := false ;
14313: LD_ADDR_EXP 94
14317: PUSH
14318: LD_INT 0
14320: ST_TO_ADDR
// sStu := false ;
14321: LD_ADDR_EXP 98
14325: PUSH
14326: LD_INT 0
14328: ST_TO_ADDR
// sBazooka := false ;
14329: LD_ADDR_EXP 101
14333: PUSH
14334: LD_INT 0
14336: ST_TO_ADDR
// sMortar := false ;
14337: LD_ADDR_EXP 102
14341: PUSH
14342: LD_INT 0
14344: ST_TO_ADDR
// sRanger := false ;
14345: LD_ADDR_EXP 112
14349: PUSH
14350: LD_INT 0
14352: ST_TO_ADDR
// end ;
14353: LD_VAR 0 1
14357: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
14358: LD_INT 0
14360: PPUSH
14361: PPUSH
14362: PPUSH
14363: PPUSH
14364: PPUSH
// result := [ ] ;
14365: LD_ADDR_VAR 0 1
14369: PUSH
14370: EMPTY
14371: ST_TO_ADDR
// if campaign_id = 1 then
14372: LD_OWVAR 69
14376: PUSH
14377: LD_INT 1
14379: EQUAL
14380: IFFALSE 17318
// begin case mission_number of 1 :
14382: LD_OWVAR 70
14386: PUSH
14387: LD_INT 1
14389: DOUBLE
14390: EQUAL
14391: IFTRUE 14395
14393: GO 14459
14395: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
14396: LD_ADDR_VAR 0 1
14400: PUSH
14401: LD_INT 2
14403: PUSH
14404: LD_INT 4
14406: PUSH
14407: LD_INT 11
14409: PUSH
14410: LD_INT 12
14412: PUSH
14413: LD_INT 15
14415: PUSH
14416: LD_INT 16
14418: PUSH
14419: LD_INT 22
14421: PUSH
14422: LD_INT 23
14424: PUSH
14425: LD_INT 26
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: PUSH
14439: LD_INT 101
14441: PUSH
14442: LD_INT 102
14444: PUSH
14445: LD_INT 106
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: ST_TO_ADDR
14457: GO 17316
14459: LD_INT 2
14461: DOUBLE
14462: EQUAL
14463: IFTRUE 14467
14465: GO 14539
14467: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
14468: LD_ADDR_VAR 0 1
14472: PUSH
14473: LD_INT 2
14475: PUSH
14476: LD_INT 4
14478: PUSH
14479: LD_INT 11
14481: PUSH
14482: LD_INT 12
14484: PUSH
14485: LD_INT 15
14487: PUSH
14488: LD_INT 16
14490: PUSH
14491: LD_INT 22
14493: PUSH
14494: LD_INT 23
14496: PUSH
14497: LD_INT 26
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: PUSH
14511: LD_INT 101
14513: PUSH
14514: LD_INT 102
14516: PUSH
14517: LD_INT 105
14519: PUSH
14520: LD_INT 106
14522: PUSH
14523: LD_INT 108
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: ST_TO_ADDR
14537: GO 17316
14539: LD_INT 3
14541: DOUBLE
14542: EQUAL
14543: IFTRUE 14547
14545: GO 14623
14547: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
14548: LD_ADDR_VAR 0 1
14552: PUSH
14553: LD_INT 2
14555: PUSH
14556: LD_INT 4
14558: PUSH
14559: LD_INT 5
14561: PUSH
14562: LD_INT 11
14564: PUSH
14565: LD_INT 12
14567: PUSH
14568: LD_INT 15
14570: PUSH
14571: LD_INT 16
14573: PUSH
14574: LD_INT 22
14576: PUSH
14577: LD_INT 26
14579: PUSH
14580: LD_INT 36
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: PUSH
14595: LD_INT 101
14597: PUSH
14598: LD_INT 102
14600: PUSH
14601: LD_INT 105
14603: PUSH
14604: LD_INT 106
14606: PUSH
14607: LD_INT 108
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: ST_TO_ADDR
14621: GO 17316
14623: LD_INT 4
14625: DOUBLE
14626: EQUAL
14627: IFTRUE 14631
14629: GO 14715
14631: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
14632: LD_ADDR_VAR 0 1
14636: PUSH
14637: LD_INT 2
14639: PUSH
14640: LD_INT 4
14642: PUSH
14643: LD_INT 5
14645: PUSH
14646: LD_INT 8
14648: PUSH
14649: LD_INT 11
14651: PUSH
14652: LD_INT 12
14654: PUSH
14655: LD_INT 15
14657: PUSH
14658: LD_INT 16
14660: PUSH
14661: LD_INT 22
14663: PUSH
14664: LD_INT 23
14666: PUSH
14667: LD_INT 26
14669: PUSH
14670: LD_INT 36
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: PUSH
14687: LD_INT 101
14689: PUSH
14690: LD_INT 102
14692: PUSH
14693: LD_INT 105
14695: PUSH
14696: LD_INT 106
14698: PUSH
14699: LD_INT 108
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: ST_TO_ADDR
14713: GO 17316
14715: LD_INT 5
14717: DOUBLE
14718: EQUAL
14719: IFTRUE 14723
14721: GO 14823
14723: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
14724: LD_ADDR_VAR 0 1
14728: PUSH
14729: LD_INT 2
14731: PUSH
14732: LD_INT 4
14734: PUSH
14735: LD_INT 5
14737: PUSH
14738: LD_INT 6
14740: PUSH
14741: LD_INT 8
14743: PUSH
14744: LD_INT 11
14746: PUSH
14747: LD_INT 12
14749: PUSH
14750: LD_INT 15
14752: PUSH
14753: LD_INT 16
14755: PUSH
14756: LD_INT 22
14758: PUSH
14759: LD_INT 23
14761: PUSH
14762: LD_INT 25
14764: PUSH
14765: LD_INT 26
14767: PUSH
14768: LD_INT 36
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 101
14789: PUSH
14790: LD_INT 102
14792: PUSH
14793: LD_INT 105
14795: PUSH
14796: LD_INT 106
14798: PUSH
14799: LD_INT 108
14801: PUSH
14802: LD_INT 109
14804: PUSH
14805: LD_INT 112
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: ST_TO_ADDR
14821: GO 17316
14823: LD_INT 6
14825: DOUBLE
14826: EQUAL
14827: IFTRUE 14831
14829: GO 14951
14831: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14832: LD_ADDR_VAR 0 1
14836: PUSH
14837: LD_INT 2
14839: PUSH
14840: LD_INT 4
14842: PUSH
14843: LD_INT 5
14845: PUSH
14846: LD_INT 6
14848: PUSH
14849: LD_INT 8
14851: PUSH
14852: LD_INT 11
14854: PUSH
14855: LD_INT 12
14857: PUSH
14858: LD_INT 15
14860: PUSH
14861: LD_INT 16
14863: PUSH
14864: LD_INT 20
14866: PUSH
14867: LD_INT 21
14869: PUSH
14870: LD_INT 22
14872: PUSH
14873: LD_INT 23
14875: PUSH
14876: LD_INT 25
14878: PUSH
14879: LD_INT 26
14881: PUSH
14882: LD_INT 30
14884: PUSH
14885: LD_INT 31
14887: PUSH
14888: LD_INT 32
14890: PUSH
14891: LD_INT 36
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: PUSH
14915: LD_INT 101
14917: PUSH
14918: LD_INT 102
14920: PUSH
14921: LD_INT 105
14923: PUSH
14924: LD_INT 106
14926: PUSH
14927: LD_INT 108
14929: PUSH
14930: LD_INT 109
14932: PUSH
14933: LD_INT 112
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: ST_TO_ADDR
14949: GO 17316
14951: LD_INT 7
14953: DOUBLE
14954: EQUAL
14955: IFTRUE 14959
14957: GO 15059
14959: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
14960: LD_ADDR_VAR 0 1
14964: PUSH
14965: LD_INT 2
14967: PUSH
14968: LD_INT 4
14970: PUSH
14971: LD_INT 5
14973: PUSH
14974: LD_INT 7
14976: PUSH
14977: LD_INT 11
14979: PUSH
14980: LD_INT 12
14982: PUSH
14983: LD_INT 15
14985: PUSH
14986: LD_INT 16
14988: PUSH
14989: LD_INT 20
14991: PUSH
14992: LD_INT 21
14994: PUSH
14995: LD_INT 22
14997: PUSH
14998: LD_INT 23
15000: PUSH
15001: LD_INT 25
15003: PUSH
15004: LD_INT 26
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: PUSH
15023: LD_INT 101
15025: PUSH
15026: LD_INT 102
15028: PUSH
15029: LD_INT 103
15031: PUSH
15032: LD_INT 105
15034: PUSH
15035: LD_INT 106
15037: PUSH
15038: LD_INT 108
15040: PUSH
15041: LD_INT 112
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: ST_TO_ADDR
15057: GO 17316
15059: LD_INT 8
15061: DOUBLE
15062: EQUAL
15063: IFTRUE 15067
15065: GO 15195
15067: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
15068: LD_ADDR_VAR 0 1
15072: PUSH
15073: LD_INT 2
15075: PUSH
15076: LD_INT 4
15078: PUSH
15079: LD_INT 5
15081: PUSH
15082: LD_INT 6
15084: PUSH
15085: LD_INT 7
15087: PUSH
15088: LD_INT 8
15090: PUSH
15091: LD_INT 11
15093: PUSH
15094: LD_INT 12
15096: PUSH
15097: LD_INT 15
15099: PUSH
15100: LD_INT 16
15102: PUSH
15103: LD_INT 20
15105: PUSH
15106: LD_INT 21
15108: PUSH
15109: LD_INT 22
15111: PUSH
15112: LD_INT 23
15114: PUSH
15115: LD_INT 25
15117: PUSH
15118: LD_INT 26
15120: PUSH
15121: LD_INT 30
15123: PUSH
15124: LD_INT 31
15126: PUSH
15127: LD_INT 32
15129: PUSH
15130: LD_INT 36
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: PUSH
15155: LD_INT 101
15157: PUSH
15158: LD_INT 102
15160: PUSH
15161: LD_INT 103
15163: PUSH
15164: LD_INT 105
15166: PUSH
15167: LD_INT 106
15169: PUSH
15170: LD_INT 108
15172: PUSH
15173: LD_INT 109
15175: PUSH
15176: LD_INT 112
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: ST_TO_ADDR
15193: GO 17316
15195: LD_INT 9
15197: DOUBLE
15198: EQUAL
15199: IFTRUE 15203
15201: GO 15339
15203: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
15204: LD_ADDR_VAR 0 1
15208: PUSH
15209: LD_INT 2
15211: PUSH
15212: LD_INT 4
15214: PUSH
15215: LD_INT 5
15217: PUSH
15218: LD_INT 6
15220: PUSH
15221: LD_INT 7
15223: PUSH
15224: LD_INT 8
15226: PUSH
15227: LD_INT 11
15229: PUSH
15230: LD_INT 12
15232: PUSH
15233: LD_INT 15
15235: PUSH
15236: LD_INT 16
15238: PUSH
15239: LD_INT 20
15241: PUSH
15242: LD_INT 21
15244: PUSH
15245: LD_INT 22
15247: PUSH
15248: LD_INT 23
15250: PUSH
15251: LD_INT 25
15253: PUSH
15254: LD_INT 26
15256: PUSH
15257: LD_INT 28
15259: PUSH
15260: LD_INT 30
15262: PUSH
15263: LD_INT 31
15265: PUSH
15266: LD_INT 32
15268: PUSH
15269: LD_INT 36
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: PUSH
15295: LD_INT 101
15297: PUSH
15298: LD_INT 102
15300: PUSH
15301: LD_INT 103
15303: PUSH
15304: LD_INT 105
15306: PUSH
15307: LD_INT 106
15309: PUSH
15310: LD_INT 108
15312: PUSH
15313: LD_INT 109
15315: PUSH
15316: LD_INT 112
15318: PUSH
15319: LD_INT 114
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: ST_TO_ADDR
15337: GO 17316
15339: LD_INT 10
15341: DOUBLE
15342: EQUAL
15343: IFTRUE 15347
15345: GO 15531
15347: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
15348: LD_ADDR_VAR 0 1
15352: PUSH
15353: LD_INT 2
15355: PUSH
15356: LD_INT 4
15358: PUSH
15359: LD_INT 5
15361: PUSH
15362: LD_INT 6
15364: PUSH
15365: LD_INT 7
15367: PUSH
15368: LD_INT 8
15370: PUSH
15371: LD_INT 9
15373: PUSH
15374: LD_INT 10
15376: PUSH
15377: LD_INT 11
15379: PUSH
15380: LD_INT 12
15382: PUSH
15383: LD_INT 13
15385: PUSH
15386: LD_INT 14
15388: PUSH
15389: LD_INT 15
15391: PUSH
15392: LD_INT 16
15394: PUSH
15395: LD_INT 17
15397: PUSH
15398: LD_INT 18
15400: PUSH
15401: LD_INT 19
15403: PUSH
15404: LD_INT 20
15406: PUSH
15407: LD_INT 21
15409: PUSH
15410: LD_INT 22
15412: PUSH
15413: LD_INT 23
15415: PUSH
15416: LD_INT 24
15418: PUSH
15419: LD_INT 25
15421: PUSH
15422: LD_INT 26
15424: PUSH
15425: LD_INT 28
15427: PUSH
15428: LD_INT 30
15430: PUSH
15431: LD_INT 31
15433: PUSH
15434: LD_INT 32
15436: PUSH
15437: LD_INT 36
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 101
15473: PUSH
15474: LD_INT 102
15476: PUSH
15477: LD_INT 103
15479: PUSH
15480: LD_INT 104
15482: PUSH
15483: LD_INT 105
15485: PUSH
15486: LD_INT 106
15488: PUSH
15489: LD_INT 107
15491: PUSH
15492: LD_INT 108
15494: PUSH
15495: LD_INT 109
15497: PUSH
15498: LD_INT 110
15500: PUSH
15501: LD_INT 111
15503: PUSH
15504: LD_INT 112
15506: PUSH
15507: LD_INT 114
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: ST_TO_ADDR
15529: GO 17316
15531: LD_INT 11
15533: DOUBLE
15534: EQUAL
15535: IFTRUE 15539
15537: GO 15731
15539: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
15540: LD_ADDR_VAR 0 1
15544: PUSH
15545: LD_INT 2
15547: PUSH
15548: LD_INT 3
15550: PUSH
15551: LD_INT 4
15553: PUSH
15554: LD_INT 5
15556: PUSH
15557: LD_INT 6
15559: PUSH
15560: LD_INT 7
15562: PUSH
15563: LD_INT 8
15565: PUSH
15566: LD_INT 9
15568: PUSH
15569: LD_INT 10
15571: PUSH
15572: LD_INT 11
15574: PUSH
15575: LD_INT 12
15577: PUSH
15578: LD_INT 13
15580: PUSH
15581: LD_INT 14
15583: PUSH
15584: LD_INT 15
15586: PUSH
15587: LD_INT 16
15589: PUSH
15590: LD_INT 17
15592: PUSH
15593: LD_INT 18
15595: PUSH
15596: LD_INT 19
15598: PUSH
15599: LD_INT 20
15601: PUSH
15602: LD_INT 21
15604: PUSH
15605: LD_INT 22
15607: PUSH
15608: LD_INT 23
15610: PUSH
15611: LD_INT 24
15613: PUSH
15614: LD_INT 25
15616: PUSH
15617: LD_INT 26
15619: PUSH
15620: LD_INT 28
15622: PUSH
15623: LD_INT 30
15625: PUSH
15626: LD_INT 31
15628: PUSH
15629: LD_INT 32
15631: PUSH
15632: LD_INT 34
15634: PUSH
15635: LD_INT 36
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: PUSH
15671: LD_INT 101
15673: PUSH
15674: LD_INT 102
15676: PUSH
15677: LD_INT 103
15679: PUSH
15680: LD_INT 104
15682: PUSH
15683: LD_INT 105
15685: PUSH
15686: LD_INT 106
15688: PUSH
15689: LD_INT 107
15691: PUSH
15692: LD_INT 108
15694: PUSH
15695: LD_INT 109
15697: PUSH
15698: LD_INT 110
15700: PUSH
15701: LD_INT 111
15703: PUSH
15704: LD_INT 112
15706: PUSH
15707: LD_INT 114
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: ST_TO_ADDR
15729: GO 17316
15731: LD_INT 12
15733: DOUBLE
15734: EQUAL
15735: IFTRUE 15739
15737: GO 15947
15739: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15740: LD_ADDR_VAR 0 1
15744: PUSH
15745: LD_INT 1
15747: PUSH
15748: LD_INT 2
15750: PUSH
15751: LD_INT 3
15753: PUSH
15754: LD_INT 4
15756: PUSH
15757: LD_INT 5
15759: PUSH
15760: LD_INT 6
15762: PUSH
15763: LD_INT 7
15765: PUSH
15766: LD_INT 8
15768: PUSH
15769: LD_INT 9
15771: PUSH
15772: LD_INT 10
15774: PUSH
15775: LD_INT 11
15777: PUSH
15778: LD_INT 12
15780: PUSH
15781: LD_INT 13
15783: PUSH
15784: LD_INT 14
15786: PUSH
15787: LD_INT 15
15789: PUSH
15790: LD_INT 16
15792: PUSH
15793: LD_INT 17
15795: PUSH
15796: LD_INT 18
15798: PUSH
15799: LD_INT 19
15801: PUSH
15802: LD_INT 20
15804: PUSH
15805: LD_INT 21
15807: PUSH
15808: LD_INT 22
15810: PUSH
15811: LD_INT 23
15813: PUSH
15814: LD_INT 24
15816: PUSH
15817: LD_INT 25
15819: PUSH
15820: LD_INT 26
15822: PUSH
15823: LD_INT 27
15825: PUSH
15826: LD_INT 28
15828: PUSH
15829: LD_INT 30
15831: PUSH
15832: LD_INT 31
15834: PUSH
15835: LD_INT 32
15837: PUSH
15838: LD_INT 33
15840: PUSH
15841: LD_INT 34
15843: PUSH
15844: LD_INT 36
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: PUSH
15883: LD_INT 101
15885: PUSH
15886: LD_INT 102
15888: PUSH
15889: LD_INT 103
15891: PUSH
15892: LD_INT 104
15894: PUSH
15895: LD_INT 105
15897: PUSH
15898: LD_INT 106
15900: PUSH
15901: LD_INT 107
15903: PUSH
15904: LD_INT 108
15906: PUSH
15907: LD_INT 109
15909: PUSH
15910: LD_INT 110
15912: PUSH
15913: LD_INT 111
15915: PUSH
15916: LD_INT 112
15918: PUSH
15919: LD_INT 113
15921: PUSH
15922: LD_INT 114
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: ST_TO_ADDR
15945: GO 17316
15947: LD_INT 13
15949: DOUBLE
15950: EQUAL
15951: IFTRUE 15955
15953: GO 16151
15955: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
15956: LD_ADDR_VAR 0 1
15960: PUSH
15961: LD_INT 1
15963: PUSH
15964: LD_INT 2
15966: PUSH
15967: LD_INT 3
15969: PUSH
15970: LD_INT 4
15972: PUSH
15973: LD_INT 5
15975: PUSH
15976: LD_INT 8
15978: PUSH
15979: LD_INT 9
15981: PUSH
15982: LD_INT 10
15984: PUSH
15985: LD_INT 11
15987: PUSH
15988: LD_INT 12
15990: PUSH
15991: LD_INT 14
15993: PUSH
15994: LD_INT 15
15996: PUSH
15997: LD_INT 16
15999: PUSH
16000: LD_INT 17
16002: PUSH
16003: LD_INT 18
16005: PUSH
16006: LD_INT 19
16008: PUSH
16009: LD_INT 20
16011: PUSH
16012: LD_INT 21
16014: PUSH
16015: LD_INT 22
16017: PUSH
16018: LD_INT 23
16020: PUSH
16021: LD_INT 24
16023: PUSH
16024: LD_INT 25
16026: PUSH
16027: LD_INT 26
16029: PUSH
16030: LD_INT 27
16032: PUSH
16033: LD_INT 28
16035: PUSH
16036: LD_INT 30
16038: PUSH
16039: LD_INT 31
16041: PUSH
16042: LD_INT 32
16044: PUSH
16045: LD_INT 33
16047: PUSH
16048: LD_INT 34
16050: PUSH
16051: LD_INT 36
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 101
16089: PUSH
16090: LD_INT 102
16092: PUSH
16093: LD_INT 103
16095: PUSH
16096: LD_INT 104
16098: PUSH
16099: LD_INT 105
16101: PUSH
16102: LD_INT 106
16104: PUSH
16105: LD_INT 107
16107: PUSH
16108: LD_INT 108
16110: PUSH
16111: LD_INT 109
16113: PUSH
16114: LD_INT 110
16116: PUSH
16117: LD_INT 111
16119: PUSH
16120: LD_INT 112
16122: PUSH
16123: LD_INT 113
16125: PUSH
16126: LD_INT 114
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: ST_TO_ADDR
16149: GO 17316
16151: LD_INT 14
16153: DOUBLE
16154: EQUAL
16155: IFTRUE 16159
16157: GO 16371
16159: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
16160: LD_ADDR_VAR 0 1
16164: PUSH
16165: LD_INT 1
16167: PUSH
16168: LD_INT 2
16170: PUSH
16171: LD_INT 3
16173: PUSH
16174: LD_INT 4
16176: PUSH
16177: LD_INT 5
16179: PUSH
16180: LD_INT 6
16182: PUSH
16183: LD_INT 7
16185: PUSH
16186: LD_INT 8
16188: PUSH
16189: LD_INT 9
16191: PUSH
16192: LD_INT 10
16194: PUSH
16195: LD_INT 11
16197: PUSH
16198: LD_INT 12
16200: PUSH
16201: LD_INT 13
16203: PUSH
16204: LD_INT 14
16206: PUSH
16207: LD_INT 15
16209: PUSH
16210: LD_INT 16
16212: PUSH
16213: LD_INT 17
16215: PUSH
16216: LD_INT 18
16218: PUSH
16219: LD_INT 19
16221: PUSH
16222: LD_INT 20
16224: PUSH
16225: LD_INT 21
16227: PUSH
16228: LD_INT 22
16230: PUSH
16231: LD_INT 23
16233: PUSH
16234: LD_INT 24
16236: PUSH
16237: LD_INT 25
16239: PUSH
16240: LD_INT 26
16242: PUSH
16243: LD_INT 27
16245: PUSH
16246: LD_INT 28
16248: PUSH
16249: LD_INT 29
16251: PUSH
16252: LD_INT 30
16254: PUSH
16255: LD_INT 31
16257: PUSH
16258: LD_INT 32
16260: PUSH
16261: LD_INT 33
16263: PUSH
16264: LD_INT 34
16266: PUSH
16267: LD_INT 36
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: PUSH
16307: LD_INT 101
16309: PUSH
16310: LD_INT 102
16312: PUSH
16313: LD_INT 103
16315: PUSH
16316: LD_INT 104
16318: PUSH
16319: LD_INT 105
16321: PUSH
16322: LD_INT 106
16324: PUSH
16325: LD_INT 107
16327: PUSH
16328: LD_INT 108
16330: PUSH
16331: LD_INT 109
16333: PUSH
16334: LD_INT 110
16336: PUSH
16337: LD_INT 111
16339: PUSH
16340: LD_INT 112
16342: PUSH
16343: LD_INT 113
16345: PUSH
16346: LD_INT 114
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: ST_TO_ADDR
16369: GO 17316
16371: LD_INT 15
16373: DOUBLE
16374: EQUAL
16375: IFTRUE 16379
16377: GO 16591
16379: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
16380: LD_ADDR_VAR 0 1
16384: PUSH
16385: LD_INT 1
16387: PUSH
16388: LD_INT 2
16390: PUSH
16391: LD_INT 3
16393: PUSH
16394: LD_INT 4
16396: PUSH
16397: LD_INT 5
16399: PUSH
16400: LD_INT 6
16402: PUSH
16403: LD_INT 7
16405: PUSH
16406: LD_INT 8
16408: PUSH
16409: LD_INT 9
16411: PUSH
16412: LD_INT 10
16414: PUSH
16415: LD_INT 11
16417: PUSH
16418: LD_INT 12
16420: PUSH
16421: LD_INT 13
16423: PUSH
16424: LD_INT 14
16426: PUSH
16427: LD_INT 15
16429: PUSH
16430: LD_INT 16
16432: PUSH
16433: LD_INT 17
16435: PUSH
16436: LD_INT 18
16438: PUSH
16439: LD_INT 19
16441: PUSH
16442: LD_INT 20
16444: PUSH
16445: LD_INT 21
16447: PUSH
16448: LD_INT 22
16450: PUSH
16451: LD_INT 23
16453: PUSH
16454: LD_INT 24
16456: PUSH
16457: LD_INT 25
16459: PUSH
16460: LD_INT 26
16462: PUSH
16463: LD_INT 27
16465: PUSH
16466: LD_INT 28
16468: PUSH
16469: LD_INT 29
16471: PUSH
16472: LD_INT 30
16474: PUSH
16475: LD_INT 31
16477: PUSH
16478: LD_INT 32
16480: PUSH
16481: LD_INT 33
16483: PUSH
16484: LD_INT 34
16486: PUSH
16487: LD_INT 36
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: PUSH
16527: LD_INT 101
16529: PUSH
16530: LD_INT 102
16532: PUSH
16533: LD_INT 103
16535: PUSH
16536: LD_INT 104
16538: PUSH
16539: LD_INT 105
16541: PUSH
16542: LD_INT 106
16544: PUSH
16545: LD_INT 107
16547: PUSH
16548: LD_INT 108
16550: PUSH
16551: LD_INT 109
16553: PUSH
16554: LD_INT 110
16556: PUSH
16557: LD_INT 111
16559: PUSH
16560: LD_INT 112
16562: PUSH
16563: LD_INT 113
16565: PUSH
16566: LD_INT 114
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: ST_TO_ADDR
16589: GO 17316
16591: LD_INT 16
16593: DOUBLE
16594: EQUAL
16595: IFTRUE 16599
16597: GO 16723
16599: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
16600: LD_ADDR_VAR 0 1
16604: PUSH
16605: LD_INT 2
16607: PUSH
16608: LD_INT 4
16610: PUSH
16611: LD_INT 5
16613: PUSH
16614: LD_INT 7
16616: PUSH
16617: LD_INT 11
16619: PUSH
16620: LD_INT 12
16622: PUSH
16623: LD_INT 15
16625: PUSH
16626: LD_INT 16
16628: PUSH
16629: LD_INT 20
16631: PUSH
16632: LD_INT 21
16634: PUSH
16635: LD_INT 22
16637: PUSH
16638: LD_INT 23
16640: PUSH
16641: LD_INT 25
16643: PUSH
16644: LD_INT 26
16646: PUSH
16647: LD_INT 30
16649: PUSH
16650: LD_INT 31
16652: PUSH
16653: LD_INT 32
16655: PUSH
16656: LD_INT 33
16658: PUSH
16659: LD_INT 34
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: PUSH
16683: LD_INT 101
16685: PUSH
16686: LD_INT 102
16688: PUSH
16689: LD_INT 103
16691: PUSH
16692: LD_INT 106
16694: PUSH
16695: LD_INT 108
16697: PUSH
16698: LD_INT 112
16700: PUSH
16701: LD_INT 113
16703: PUSH
16704: LD_INT 114
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: ST_TO_ADDR
16721: GO 17316
16723: LD_INT 17
16725: DOUBLE
16726: EQUAL
16727: IFTRUE 16731
16729: GO 16943
16731: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16732: LD_ADDR_VAR 0 1
16736: PUSH
16737: LD_INT 1
16739: PUSH
16740: LD_INT 2
16742: PUSH
16743: LD_INT 3
16745: PUSH
16746: LD_INT 4
16748: PUSH
16749: LD_INT 5
16751: PUSH
16752: LD_INT 6
16754: PUSH
16755: LD_INT 7
16757: PUSH
16758: LD_INT 8
16760: PUSH
16761: LD_INT 9
16763: PUSH
16764: LD_INT 10
16766: PUSH
16767: LD_INT 11
16769: PUSH
16770: LD_INT 12
16772: PUSH
16773: LD_INT 13
16775: PUSH
16776: LD_INT 14
16778: PUSH
16779: LD_INT 15
16781: PUSH
16782: LD_INT 16
16784: PUSH
16785: LD_INT 17
16787: PUSH
16788: LD_INT 18
16790: PUSH
16791: LD_INT 19
16793: PUSH
16794: LD_INT 20
16796: PUSH
16797: LD_INT 21
16799: PUSH
16800: LD_INT 22
16802: PUSH
16803: LD_INT 23
16805: PUSH
16806: LD_INT 24
16808: PUSH
16809: LD_INT 25
16811: PUSH
16812: LD_INT 26
16814: PUSH
16815: LD_INT 27
16817: PUSH
16818: LD_INT 28
16820: PUSH
16821: LD_INT 29
16823: PUSH
16824: LD_INT 30
16826: PUSH
16827: LD_INT 31
16829: PUSH
16830: LD_INT 32
16832: PUSH
16833: LD_INT 33
16835: PUSH
16836: LD_INT 34
16838: PUSH
16839: LD_INT 36
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: PUSH
16879: LD_INT 101
16881: PUSH
16882: LD_INT 102
16884: PUSH
16885: LD_INT 103
16887: PUSH
16888: LD_INT 104
16890: PUSH
16891: LD_INT 105
16893: PUSH
16894: LD_INT 106
16896: PUSH
16897: LD_INT 107
16899: PUSH
16900: LD_INT 108
16902: PUSH
16903: LD_INT 109
16905: PUSH
16906: LD_INT 110
16908: PUSH
16909: LD_INT 111
16911: PUSH
16912: LD_INT 112
16914: PUSH
16915: LD_INT 113
16917: PUSH
16918: LD_INT 114
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: ST_TO_ADDR
16941: GO 17316
16943: LD_INT 18
16945: DOUBLE
16946: EQUAL
16947: IFTRUE 16951
16949: GO 17087
16951: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
16952: LD_ADDR_VAR 0 1
16956: PUSH
16957: LD_INT 2
16959: PUSH
16960: LD_INT 4
16962: PUSH
16963: LD_INT 5
16965: PUSH
16966: LD_INT 7
16968: PUSH
16969: LD_INT 11
16971: PUSH
16972: LD_INT 12
16974: PUSH
16975: LD_INT 15
16977: PUSH
16978: LD_INT 16
16980: PUSH
16981: LD_INT 20
16983: PUSH
16984: LD_INT 21
16986: PUSH
16987: LD_INT 22
16989: PUSH
16990: LD_INT 23
16992: PUSH
16993: LD_INT 25
16995: PUSH
16996: LD_INT 26
16998: PUSH
16999: LD_INT 30
17001: PUSH
17002: LD_INT 31
17004: PUSH
17005: LD_INT 32
17007: PUSH
17008: LD_INT 33
17010: PUSH
17011: LD_INT 34
17013: PUSH
17014: LD_INT 35
17016: PUSH
17017: LD_INT 36
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: PUSH
17043: LD_INT 101
17045: PUSH
17046: LD_INT 102
17048: PUSH
17049: LD_INT 103
17051: PUSH
17052: LD_INT 106
17054: PUSH
17055: LD_INT 108
17057: PUSH
17058: LD_INT 112
17060: PUSH
17061: LD_INT 113
17063: PUSH
17064: LD_INT 114
17066: PUSH
17067: LD_INT 115
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: ST_TO_ADDR
17085: GO 17316
17087: LD_INT 19
17089: DOUBLE
17090: EQUAL
17091: IFTRUE 17095
17093: GO 17315
17095: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
17096: LD_ADDR_VAR 0 1
17100: PUSH
17101: LD_INT 1
17103: PUSH
17104: LD_INT 2
17106: PUSH
17107: LD_INT 3
17109: PUSH
17110: LD_INT 4
17112: PUSH
17113: LD_INT 5
17115: PUSH
17116: LD_INT 6
17118: PUSH
17119: LD_INT 7
17121: PUSH
17122: LD_INT 8
17124: PUSH
17125: LD_INT 9
17127: PUSH
17128: LD_INT 10
17130: PUSH
17131: LD_INT 11
17133: PUSH
17134: LD_INT 12
17136: PUSH
17137: LD_INT 13
17139: PUSH
17140: LD_INT 14
17142: PUSH
17143: LD_INT 15
17145: PUSH
17146: LD_INT 16
17148: PUSH
17149: LD_INT 17
17151: PUSH
17152: LD_INT 18
17154: PUSH
17155: LD_INT 19
17157: PUSH
17158: LD_INT 20
17160: PUSH
17161: LD_INT 21
17163: PUSH
17164: LD_INT 22
17166: PUSH
17167: LD_INT 23
17169: PUSH
17170: LD_INT 24
17172: PUSH
17173: LD_INT 25
17175: PUSH
17176: LD_INT 26
17178: PUSH
17179: LD_INT 27
17181: PUSH
17182: LD_INT 28
17184: PUSH
17185: LD_INT 29
17187: PUSH
17188: LD_INT 30
17190: PUSH
17191: LD_INT 31
17193: PUSH
17194: LD_INT 32
17196: PUSH
17197: LD_INT 33
17199: PUSH
17200: LD_INT 34
17202: PUSH
17203: LD_INT 35
17205: PUSH
17206: LD_INT 36
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 101
17249: PUSH
17250: LD_INT 102
17252: PUSH
17253: LD_INT 103
17255: PUSH
17256: LD_INT 104
17258: PUSH
17259: LD_INT 105
17261: PUSH
17262: LD_INT 106
17264: PUSH
17265: LD_INT 107
17267: PUSH
17268: LD_INT 108
17270: PUSH
17271: LD_INT 109
17273: PUSH
17274: LD_INT 110
17276: PUSH
17277: LD_INT 111
17279: PUSH
17280: LD_INT 112
17282: PUSH
17283: LD_INT 113
17285: PUSH
17286: LD_INT 114
17288: PUSH
17289: LD_INT 115
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: ST_TO_ADDR
17313: GO 17316
17315: POP
// end else
17316: GO 17535
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
17318: LD_ADDR_VAR 0 1
17322: PUSH
17323: LD_INT 1
17325: PUSH
17326: LD_INT 2
17328: PUSH
17329: LD_INT 3
17331: PUSH
17332: LD_INT 4
17334: PUSH
17335: LD_INT 5
17337: PUSH
17338: LD_INT 6
17340: PUSH
17341: LD_INT 7
17343: PUSH
17344: LD_INT 8
17346: PUSH
17347: LD_INT 9
17349: PUSH
17350: LD_INT 10
17352: PUSH
17353: LD_INT 11
17355: PUSH
17356: LD_INT 12
17358: PUSH
17359: LD_INT 13
17361: PUSH
17362: LD_INT 14
17364: PUSH
17365: LD_INT 15
17367: PUSH
17368: LD_INT 16
17370: PUSH
17371: LD_INT 17
17373: PUSH
17374: LD_INT 18
17376: PUSH
17377: LD_INT 19
17379: PUSH
17380: LD_INT 20
17382: PUSH
17383: LD_INT 21
17385: PUSH
17386: LD_INT 22
17388: PUSH
17389: LD_INT 23
17391: PUSH
17392: LD_INT 24
17394: PUSH
17395: LD_INT 25
17397: PUSH
17398: LD_INT 26
17400: PUSH
17401: LD_INT 27
17403: PUSH
17404: LD_INT 28
17406: PUSH
17407: LD_INT 29
17409: PUSH
17410: LD_INT 30
17412: PUSH
17413: LD_INT 31
17415: PUSH
17416: LD_INT 32
17418: PUSH
17419: LD_INT 33
17421: PUSH
17422: LD_INT 34
17424: PUSH
17425: LD_INT 35
17427: PUSH
17428: LD_INT 36
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: PUSH
17469: LD_INT 101
17471: PUSH
17472: LD_INT 102
17474: PUSH
17475: LD_INT 103
17477: PUSH
17478: LD_INT 104
17480: PUSH
17481: LD_INT 105
17483: PUSH
17484: LD_INT 106
17486: PUSH
17487: LD_INT 107
17489: PUSH
17490: LD_INT 108
17492: PUSH
17493: LD_INT 109
17495: PUSH
17496: LD_INT 110
17498: PUSH
17499: LD_INT 111
17501: PUSH
17502: LD_INT 112
17504: PUSH
17505: LD_INT 113
17507: PUSH
17508: LD_INT 114
17510: PUSH
17511: LD_INT 115
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: ST_TO_ADDR
// if result then
17535: LD_VAR 0 1
17539: IFFALSE 17828
// begin normal :=  ;
17541: LD_ADDR_VAR 0 3
17545: PUSH
17546: LD_STRING 
17548: ST_TO_ADDR
// hardcore :=  ;
17549: LD_ADDR_VAR 0 4
17553: PUSH
17554: LD_STRING 
17556: ST_TO_ADDR
// for i = 1 to normalCounter do
17557: LD_ADDR_VAR 0 5
17561: PUSH
17562: DOUBLE
17563: LD_INT 1
17565: DEC
17566: ST_TO_ADDR
17567: LD_EXP 60
17571: PUSH
17572: FOR_TO
17573: IFFALSE 17674
// begin tmp := 0 ;
17575: LD_ADDR_VAR 0 2
17579: PUSH
17580: LD_STRING 0
17582: ST_TO_ADDR
// if result [ 1 ] then
17583: LD_VAR 0 1
17587: PUSH
17588: LD_INT 1
17590: ARRAY
17591: IFFALSE 17656
// if result [ 1 ] [ 1 ] = i then
17593: LD_VAR 0 1
17597: PUSH
17598: LD_INT 1
17600: ARRAY
17601: PUSH
17602: LD_INT 1
17604: ARRAY
17605: PUSH
17606: LD_VAR 0 5
17610: EQUAL
17611: IFFALSE 17656
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17613: LD_ADDR_VAR 0 1
17617: PUSH
17618: LD_VAR 0 1
17622: PPUSH
17623: LD_INT 1
17625: PPUSH
17626: LD_VAR 0 1
17630: PUSH
17631: LD_INT 1
17633: ARRAY
17634: PPUSH
17635: LD_INT 1
17637: PPUSH
17638: CALL_OW 3
17642: PPUSH
17643: CALL_OW 1
17647: ST_TO_ADDR
// tmp := 1 ;
17648: LD_ADDR_VAR 0 2
17652: PUSH
17653: LD_STRING 1
17655: ST_TO_ADDR
// end ; normal := normal & tmp ;
17656: LD_ADDR_VAR 0 3
17660: PUSH
17661: LD_VAR 0 3
17665: PUSH
17666: LD_VAR 0 2
17670: STR
17671: ST_TO_ADDR
// end ;
17672: GO 17572
17674: POP
17675: POP
// for i = 1 to hardcoreCounter do
17676: LD_ADDR_VAR 0 5
17680: PUSH
17681: DOUBLE
17682: LD_INT 1
17684: DEC
17685: ST_TO_ADDR
17686: LD_EXP 61
17690: PUSH
17691: FOR_TO
17692: IFFALSE 17797
// begin tmp := 0 ;
17694: LD_ADDR_VAR 0 2
17698: PUSH
17699: LD_STRING 0
17701: ST_TO_ADDR
// if result [ 2 ] then
17702: LD_VAR 0 1
17706: PUSH
17707: LD_INT 2
17709: ARRAY
17710: IFFALSE 17779
// if result [ 2 ] [ 1 ] = 100 + i then
17712: LD_VAR 0 1
17716: PUSH
17717: LD_INT 2
17719: ARRAY
17720: PUSH
17721: LD_INT 1
17723: ARRAY
17724: PUSH
17725: LD_INT 100
17727: PUSH
17728: LD_VAR 0 5
17732: PLUS
17733: EQUAL
17734: IFFALSE 17779
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17736: LD_ADDR_VAR 0 1
17740: PUSH
17741: LD_VAR 0 1
17745: PPUSH
17746: LD_INT 2
17748: PPUSH
17749: LD_VAR 0 1
17753: PUSH
17754: LD_INT 2
17756: ARRAY
17757: PPUSH
17758: LD_INT 1
17760: PPUSH
17761: CALL_OW 3
17765: PPUSH
17766: CALL_OW 1
17770: ST_TO_ADDR
// tmp := 1 ;
17771: LD_ADDR_VAR 0 2
17775: PUSH
17776: LD_STRING 1
17778: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17779: LD_ADDR_VAR 0 4
17783: PUSH
17784: LD_VAR 0 4
17788: PUSH
17789: LD_VAR 0 2
17793: STR
17794: ST_TO_ADDR
// end ;
17795: GO 17691
17797: POP
17798: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17799: LD_STRING getStreamItemsFromMission("
17801: PUSH
17802: LD_VAR 0 3
17806: STR
17807: PUSH
17808: LD_STRING ","
17810: STR
17811: PUSH
17812: LD_VAR 0 4
17816: STR
17817: PUSH
17818: LD_STRING ")
17820: STR
17821: PPUSH
17822: CALL_OW 559
// end else
17826: GO 17835
// ToLua ( getStreamItemsFromMission("","") ) ;
17828: LD_STRING getStreamItemsFromMission("","")
17830: PPUSH
17831: CALL_OW 559
// end ;
17835: LD_VAR 0 1
17839: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17840: LD_EXP 59
17844: PUSH
17845: LD_EXP 64
17849: AND
17850: IFFALSE 17974
17852: GO 17854
17854: DISABLE
17855: LD_INT 0
17857: PPUSH
17858: PPUSH
// begin enable ;
17859: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17860: LD_ADDR_VAR 0 2
17864: PUSH
17865: LD_INT 22
17867: PUSH
17868: LD_OWVAR 2
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 2
17879: PUSH
17880: LD_INT 34
17882: PUSH
17883: LD_INT 7
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 34
17892: PUSH
17893: LD_INT 45
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 34
17902: PUSH
17903: LD_INT 28
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 34
17912: PUSH
17913: LD_INT 47
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PPUSH
17931: CALL_OW 69
17935: ST_TO_ADDR
// if not tmp then
17936: LD_VAR 0 2
17940: NOT
17941: IFFALSE 17945
// exit ;
17943: GO 17974
// for i in tmp do
17945: LD_ADDR_VAR 0 1
17949: PUSH
17950: LD_VAR 0 2
17954: PUSH
17955: FOR_IN
17956: IFFALSE 17972
// begin SetLives ( i , 0 ) ;
17958: LD_VAR 0 1
17962: PPUSH
17963: LD_INT 0
17965: PPUSH
17966: CALL_OW 234
// end ;
17970: GO 17955
17972: POP
17973: POP
// end ;
17974: PPOPN 2
17976: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17977: LD_EXP 59
17981: PUSH
17982: LD_EXP 65
17986: AND
17987: IFFALSE 18071
17989: GO 17991
17991: DISABLE
17992: LD_INT 0
17994: PPUSH
17995: PPUSH
// begin enable ;
17996: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17997: LD_ADDR_VAR 0 2
18001: PUSH
18002: LD_INT 22
18004: PUSH
18005: LD_OWVAR 2
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 32
18016: PUSH
18017: LD_INT 3
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PPUSH
18028: CALL_OW 69
18032: ST_TO_ADDR
// if not tmp then
18033: LD_VAR 0 2
18037: NOT
18038: IFFALSE 18042
// exit ;
18040: GO 18071
// for i in tmp do
18042: LD_ADDR_VAR 0 1
18046: PUSH
18047: LD_VAR 0 2
18051: PUSH
18052: FOR_IN
18053: IFFALSE 18069
// begin SetLives ( i , 0 ) ;
18055: LD_VAR 0 1
18059: PPUSH
18060: LD_INT 0
18062: PPUSH
18063: CALL_OW 234
// end ;
18067: GO 18052
18069: POP
18070: POP
// end ;
18071: PPOPN 2
18073: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18074: LD_EXP 59
18078: PUSH
18079: LD_EXP 62
18083: AND
18084: IFFALSE 18177
18086: GO 18088
18088: DISABLE
18089: LD_INT 0
18091: PPUSH
// begin enable ;
18092: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18093: LD_ADDR_VAR 0 1
18097: PUSH
18098: LD_INT 22
18100: PUSH
18101: LD_OWVAR 2
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 2
18112: PUSH
18113: LD_INT 25
18115: PUSH
18116: LD_INT 5
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 25
18125: PUSH
18126: LD_INT 9
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 25
18135: PUSH
18136: LD_INT 8
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PPUSH
18153: CALL_OW 69
18157: PUSH
18158: FOR_IN
18159: IFFALSE 18175
// begin SetClass ( i , 1 ) ;
18161: LD_VAR 0 1
18165: PPUSH
18166: LD_INT 1
18168: PPUSH
18169: CALL_OW 336
// end ;
18173: GO 18158
18175: POP
18176: POP
// end ;
18177: PPOPN 1
18179: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18180: LD_EXP 59
18184: PUSH
18185: LD_EXP 63
18189: AND
18190: PUSH
18191: LD_OWVAR 65
18195: PUSH
18196: LD_INT 7
18198: LESS
18199: AND
18200: IFFALSE 18214
18202: GO 18204
18204: DISABLE
// begin enable ;
18205: ENABLE
// game_speed := 7 ;
18206: LD_ADDR_OWVAR 65
18210: PUSH
18211: LD_INT 7
18213: ST_TO_ADDR
// end ;
18214: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18215: LD_EXP 59
18219: PUSH
18220: LD_EXP 66
18224: AND
18225: IFFALSE 18427
18227: GO 18229
18229: DISABLE
18230: LD_INT 0
18232: PPUSH
18233: PPUSH
18234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18235: LD_ADDR_VAR 0 3
18239: PUSH
18240: LD_INT 81
18242: PUSH
18243: LD_OWVAR 2
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 21
18254: PUSH
18255: LD_INT 1
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PPUSH
18266: CALL_OW 69
18270: ST_TO_ADDR
// if not tmp then
18271: LD_VAR 0 3
18275: NOT
18276: IFFALSE 18280
// exit ;
18278: GO 18427
// if tmp > 5 then
18280: LD_VAR 0 3
18284: PUSH
18285: LD_INT 5
18287: GREATER
18288: IFFALSE 18300
// k := 5 else
18290: LD_ADDR_VAR 0 2
18294: PUSH
18295: LD_INT 5
18297: ST_TO_ADDR
18298: GO 18310
// k := tmp ;
18300: LD_ADDR_VAR 0 2
18304: PUSH
18305: LD_VAR 0 3
18309: ST_TO_ADDR
// for i := 1 to k do
18310: LD_ADDR_VAR 0 1
18314: PUSH
18315: DOUBLE
18316: LD_INT 1
18318: DEC
18319: ST_TO_ADDR
18320: LD_VAR 0 2
18324: PUSH
18325: FOR_TO
18326: IFFALSE 18425
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18328: LD_VAR 0 3
18332: PUSH
18333: LD_VAR 0 1
18337: ARRAY
18338: PPUSH
18339: LD_VAR 0 1
18343: PUSH
18344: LD_INT 4
18346: MOD
18347: PUSH
18348: LD_INT 1
18350: PLUS
18351: PPUSH
18352: CALL_OW 259
18356: PUSH
18357: LD_INT 10
18359: LESS
18360: IFFALSE 18423
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18362: LD_VAR 0 3
18366: PUSH
18367: LD_VAR 0 1
18371: ARRAY
18372: PPUSH
18373: LD_VAR 0 1
18377: PUSH
18378: LD_INT 4
18380: MOD
18381: PUSH
18382: LD_INT 1
18384: PLUS
18385: PPUSH
18386: LD_VAR 0 3
18390: PUSH
18391: LD_VAR 0 1
18395: ARRAY
18396: PPUSH
18397: LD_VAR 0 1
18401: PUSH
18402: LD_INT 4
18404: MOD
18405: PUSH
18406: LD_INT 1
18408: PLUS
18409: PPUSH
18410: CALL_OW 259
18414: PUSH
18415: LD_INT 1
18417: PLUS
18418: PPUSH
18419: CALL_OW 237
18423: GO 18325
18425: POP
18426: POP
// end ;
18427: PPOPN 3
18429: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18430: LD_EXP 59
18434: PUSH
18435: LD_EXP 67
18439: AND
18440: IFFALSE 18460
18442: GO 18444
18444: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18445: LD_INT 4
18447: PPUSH
18448: LD_OWVAR 2
18452: PPUSH
18453: LD_INT 0
18455: PPUSH
18456: CALL_OW 324
18460: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18461: LD_EXP 59
18465: PUSH
18466: LD_EXP 96
18470: AND
18471: IFFALSE 18491
18473: GO 18475
18475: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18476: LD_INT 19
18478: PPUSH
18479: LD_OWVAR 2
18483: PPUSH
18484: LD_INT 0
18486: PPUSH
18487: CALL_OW 324
18491: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18492: LD_EXP 59
18496: PUSH
18497: LD_EXP 68
18501: AND
18502: IFFALSE 18604
18504: GO 18506
18506: DISABLE
18507: LD_INT 0
18509: PPUSH
18510: PPUSH
// begin enable ;
18511: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18512: LD_ADDR_VAR 0 2
18516: PUSH
18517: LD_INT 22
18519: PUSH
18520: LD_OWVAR 2
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PUSH
18529: LD_INT 2
18531: PUSH
18532: LD_INT 34
18534: PUSH
18535: LD_INT 11
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 34
18544: PUSH
18545: LD_INT 30
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: LIST
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PPUSH
18561: CALL_OW 69
18565: ST_TO_ADDR
// if not tmp then
18566: LD_VAR 0 2
18570: NOT
18571: IFFALSE 18575
// exit ;
18573: GO 18604
// for i in tmp do
18575: LD_ADDR_VAR 0 1
18579: PUSH
18580: LD_VAR 0 2
18584: PUSH
18585: FOR_IN
18586: IFFALSE 18602
// begin SetLives ( i , 0 ) ;
18588: LD_VAR 0 1
18592: PPUSH
18593: LD_INT 0
18595: PPUSH
18596: CALL_OW 234
// end ;
18600: GO 18585
18602: POP
18603: POP
// end ;
18604: PPOPN 2
18606: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18607: LD_EXP 59
18611: PUSH
18612: LD_EXP 69
18616: AND
18617: IFFALSE 18637
18619: GO 18621
18621: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18622: LD_INT 32
18624: PPUSH
18625: LD_OWVAR 2
18629: PPUSH
18630: LD_INT 0
18632: PPUSH
18633: CALL_OW 324
18637: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18638: LD_EXP 59
18642: PUSH
18643: LD_EXP 70
18647: AND
18648: IFFALSE 18829
18650: GO 18652
18652: DISABLE
18653: LD_INT 0
18655: PPUSH
18656: PPUSH
18657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18658: LD_ADDR_VAR 0 2
18662: PUSH
18663: LD_INT 22
18665: PUSH
18666: LD_OWVAR 2
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: LD_INT 33
18677: PUSH
18678: LD_INT 3
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PPUSH
18689: CALL_OW 69
18693: ST_TO_ADDR
// if not tmp then
18694: LD_VAR 0 2
18698: NOT
18699: IFFALSE 18703
// exit ;
18701: GO 18829
// side := 0 ;
18703: LD_ADDR_VAR 0 3
18707: PUSH
18708: LD_INT 0
18710: ST_TO_ADDR
// for i := 1 to 8 do
18711: LD_ADDR_VAR 0 1
18715: PUSH
18716: DOUBLE
18717: LD_INT 1
18719: DEC
18720: ST_TO_ADDR
18721: LD_INT 8
18723: PUSH
18724: FOR_TO
18725: IFFALSE 18773
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18727: LD_OWVAR 2
18731: PUSH
18732: LD_VAR 0 1
18736: NONEQUAL
18737: PUSH
18738: LD_OWVAR 2
18742: PPUSH
18743: LD_VAR 0 1
18747: PPUSH
18748: CALL_OW 81
18752: PUSH
18753: LD_INT 2
18755: EQUAL
18756: AND
18757: IFFALSE 18771
// begin side := i ;
18759: LD_ADDR_VAR 0 3
18763: PUSH
18764: LD_VAR 0 1
18768: ST_TO_ADDR
// break ;
18769: GO 18773
// end ;
18771: GO 18724
18773: POP
18774: POP
// if not side then
18775: LD_VAR 0 3
18779: NOT
18780: IFFALSE 18784
// exit ;
18782: GO 18829
// for i := 1 to tmp do
18784: LD_ADDR_VAR 0 1
18788: PUSH
18789: DOUBLE
18790: LD_INT 1
18792: DEC
18793: ST_TO_ADDR
18794: LD_VAR 0 2
18798: PUSH
18799: FOR_TO
18800: IFFALSE 18827
// if Prob ( 60 ) then
18802: LD_INT 60
18804: PPUSH
18805: CALL_OW 13
18809: IFFALSE 18825
// SetSide ( i , side ) ;
18811: LD_VAR 0 1
18815: PPUSH
18816: LD_VAR 0 3
18820: PPUSH
18821: CALL_OW 235
18825: GO 18799
18827: POP
18828: POP
// end ;
18829: PPOPN 3
18831: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18832: LD_EXP 59
18836: PUSH
18837: LD_EXP 72
18841: AND
18842: IFFALSE 18961
18844: GO 18846
18846: DISABLE
18847: LD_INT 0
18849: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18850: LD_ADDR_VAR 0 1
18854: PUSH
18855: LD_INT 22
18857: PUSH
18858: LD_OWVAR 2
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 21
18869: PUSH
18870: LD_INT 1
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 3
18879: PUSH
18880: LD_INT 23
18882: PUSH
18883: LD_INT 0
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: LIST
18898: PPUSH
18899: CALL_OW 69
18903: PUSH
18904: FOR_IN
18905: IFFALSE 18959
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18907: LD_VAR 0 1
18911: PPUSH
18912: CALL_OW 257
18916: PUSH
18917: LD_INT 1
18919: PUSH
18920: LD_INT 2
18922: PUSH
18923: LD_INT 3
18925: PUSH
18926: LD_INT 4
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: IN
18935: IFFALSE 18957
// SetClass ( un , rand ( 1 , 4 ) ) ;
18937: LD_VAR 0 1
18941: PPUSH
18942: LD_INT 1
18944: PPUSH
18945: LD_INT 4
18947: PPUSH
18948: CALL_OW 12
18952: PPUSH
18953: CALL_OW 336
18957: GO 18904
18959: POP
18960: POP
// end ;
18961: PPOPN 1
18963: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18964: LD_EXP 59
18968: PUSH
18969: LD_EXP 71
18973: AND
18974: IFFALSE 19053
18976: GO 18978
18978: DISABLE
18979: LD_INT 0
18981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18982: LD_ADDR_VAR 0 1
18986: PUSH
18987: LD_INT 22
18989: PUSH
18990: LD_OWVAR 2
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: LD_INT 21
19001: PUSH
19002: LD_INT 3
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PPUSH
19013: CALL_OW 69
19017: ST_TO_ADDR
// if not tmp then
19018: LD_VAR 0 1
19022: NOT
19023: IFFALSE 19027
// exit ;
19025: GO 19053
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19027: LD_VAR 0 1
19031: PUSH
19032: LD_INT 1
19034: PPUSH
19035: LD_VAR 0 1
19039: PPUSH
19040: CALL_OW 12
19044: ARRAY
19045: PPUSH
19046: LD_INT 100
19048: PPUSH
19049: CALL_OW 234
// end ;
19053: PPOPN 1
19055: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19056: LD_EXP 59
19060: PUSH
19061: LD_EXP 73
19065: AND
19066: IFFALSE 19164
19068: GO 19070
19070: DISABLE
19071: LD_INT 0
19073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19074: LD_ADDR_VAR 0 1
19078: PUSH
19079: LD_INT 22
19081: PUSH
19082: LD_OWVAR 2
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 21
19093: PUSH
19094: LD_INT 1
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PPUSH
19105: CALL_OW 69
19109: ST_TO_ADDR
// if not tmp then
19110: LD_VAR 0 1
19114: NOT
19115: IFFALSE 19119
// exit ;
19117: GO 19164
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19119: LD_VAR 0 1
19123: PUSH
19124: LD_INT 1
19126: PPUSH
19127: LD_VAR 0 1
19131: PPUSH
19132: CALL_OW 12
19136: ARRAY
19137: PPUSH
19138: LD_INT 1
19140: PPUSH
19141: LD_INT 4
19143: PPUSH
19144: CALL_OW 12
19148: PPUSH
19149: LD_INT 3000
19151: PPUSH
19152: LD_INT 9000
19154: PPUSH
19155: CALL_OW 12
19159: PPUSH
19160: CALL_OW 492
// end ;
19164: PPOPN 1
19166: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19167: LD_EXP 59
19171: PUSH
19172: LD_EXP 74
19176: AND
19177: IFFALSE 19197
19179: GO 19181
19181: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19182: LD_INT 1
19184: PPUSH
19185: LD_OWVAR 2
19189: PPUSH
19190: LD_INT 0
19192: PPUSH
19193: CALL_OW 324
19197: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19198: LD_EXP 59
19202: PUSH
19203: LD_EXP 75
19207: AND
19208: IFFALSE 19291
19210: GO 19212
19212: DISABLE
19213: LD_INT 0
19215: PPUSH
19216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19217: LD_ADDR_VAR 0 2
19221: PUSH
19222: LD_INT 22
19224: PUSH
19225: LD_OWVAR 2
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PUSH
19234: LD_INT 21
19236: PUSH
19237: LD_INT 3
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PPUSH
19248: CALL_OW 69
19252: ST_TO_ADDR
// if not tmp then
19253: LD_VAR 0 2
19257: NOT
19258: IFFALSE 19262
// exit ;
19260: GO 19291
// for i in tmp do
19262: LD_ADDR_VAR 0 1
19266: PUSH
19267: LD_VAR 0 2
19271: PUSH
19272: FOR_IN
19273: IFFALSE 19289
// SetBLevel ( i , 10 ) ;
19275: LD_VAR 0 1
19279: PPUSH
19280: LD_INT 10
19282: PPUSH
19283: CALL_OW 241
19287: GO 19272
19289: POP
19290: POP
// end ;
19291: PPOPN 2
19293: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19294: LD_EXP 59
19298: PUSH
19299: LD_EXP 76
19303: AND
19304: IFFALSE 19415
19306: GO 19308
19308: DISABLE
19309: LD_INT 0
19311: PPUSH
19312: PPUSH
19313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19314: LD_ADDR_VAR 0 3
19318: PUSH
19319: LD_INT 22
19321: PUSH
19322: LD_OWVAR 2
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 25
19333: PUSH
19334: LD_INT 1
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PPUSH
19345: CALL_OW 69
19349: ST_TO_ADDR
// if not tmp then
19350: LD_VAR 0 3
19354: NOT
19355: IFFALSE 19359
// exit ;
19357: GO 19415
// un := tmp [ rand ( 1 , tmp ) ] ;
19359: LD_ADDR_VAR 0 2
19363: PUSH
19364: LD_VAR 0 3
19368: PUSH
19369: LD_INT 1
19371: PPUSH
19372: LD_VAR 0 3
19376: PPUSH
19377: CALL_OW 12
19381: ARRAY
19382: ST_TO_ADDR
// if Crawls ( un ) then
19383: LD_VAR 0 2
19387: PPUSH
19388: CALL_OW 318
19392: IFFALSE 19403
// ComWalk ( un ) ;
19394: LD_VAR 0 2
19398: PPUSH
19399: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19403: LD_VAR 0 2
19407: PPUSH
19408: LD_INT 5
19410: PPUSH
19411: CALL_OW 336
// end ;
19415: PPOPN 3
19417: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
19418: LD_EXP 59
19422: PUSH
19423: LD_EXP 77
19427: AND
19428: PUSH
19429: LD_OWVAR 67
19433: PUSH
19434: LD_INT 3
19436: LESS
19437: AND
19438: IFFALSE 19457
19440: GO 19442
19442: DISABLE
// Difficulty := Difficulty + 1 ;
19443: LD_ADDR_OWVAR 67
19447: PUSH
19448: LD_OWVAR 67
19452: PUSH
19453: LD_INT 1
19455: PLUS
19456: ST_TO_ADDR
19457: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19458: LD_EXP 59
19462: PUSH
19463: LD_EXP 78
19467: AND
19468: IFFALSE 19571
19470: GO 19472
19472: DISABLE
19473: LD_INT 0
19475: PPUSH
// begin for i := 1 to 5 do
19476: LD_ADDR_VAR 0 1
19480: PUSH
19481: DOUBLE
19482: LD_INT 1
19484: DEC
19485: ST_TO_ADDR
19486: LD_INT 5
19488: PUSH
19489: FOR_TO
19490: IFFALSE 19569
// begin uc_nation := nation_nature ;
19492: LD_ADDR_OWVAR 21
19496: PUSH
19497: LD_INT 0
19499: ST_TO_ADDR
// uc_side := 0 ;
19500: LD_ADDR_OWVAR 20
19504: PUSH
19505: LD_INT 0
19507: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19508: LD_ADDR_OWVAR 29
19512: PUSH
19513: LD_INT 12
19515: PUSH
19516: LD_INT 12
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: ST_TO_ADDR
// hc_agressivity := 20 ;
19523: LD_ADDR_OWVAR 35
19527: PUSH
19528: LD_INT 20
19530: ST_TO_ADDR
// hc_class := class_tiger ;
19531: LD_ADDR_OWVAR 28
19535: PUSH
19536: LD_INT 14
19538: ST_TO_ADDR
// hc_gallery :=  ;
19539: LD_ADDR_OWVAR 33
19543: PUSH
19544: LD_STRING 
19546: ST_TO_ADDR
// hc_name :=  ;
19547: LD_ADDR_OWVAR 26
19551: PUSH
19552: LD_STRING 
19554: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19555: CALL_OW 44
19559: PPUSH
19560: LD_INT 0
19562: PPUSH
19563: CALL_OW 51
// end ;
19567: GO 19489
19569: POP
19570: POP
// end ;
19571: PPOPN 1
19573: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19574: LD_EXP 59
19578: PUSH
19579: LD_EXP 79
19583: AND
19584: IFFALSE 19593
19586: GO 19588
19588: DISABLE
// StreamSibBomb ;
19589: CALL 19594 0 0
19593: END
// export function StreamSibBomb ; var i , x , y ; begin
19594: LD_INT 0
19596: PPUSH
19597: PPUSH
19598: PPUSH
19599: PPUSH
// result := false ;
19600: LD_ADDR_VAR 0 1
19604: PUSH
19605: LD_INT 0
19607: ST_TO_ADDR
// for i := 1 to 16 do
19608: LD_ADDR_VAR 0 2
19612: PUSH
19613: DOUBLE
19614: LD_INT 1
19616: DEC
19617: ST_TO_ADDR
19618: LD_INT 16
19620: PUSH
19621: FOR_TO
19622: IFFALSE 19821
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19624: LD_ADDR_VAR 0 3
19628: PUSH
19629: LD_INT 10
19631: PUSH
19632: LD_INT 20
19634: PUSH
19635: LD_INT 30
19637: PUSH
19638: LD_INT 40
19640: PUSH
19641: LD_INT 50
19643: PUSH
19644: LD_INT 60
19646: PUSH
19647: LD_INT 70
19649: PUSH
19650: LD_INT 80
19652: PUSH
19653: LD_INT 90
19655: PUSH
19656: LD_INT 100
19658: PUSH
19659: LD_INT 110
19661: PUSH
19662: LD_INT 120
19664: PUSH
19665: LD_INT 130
19667: PUSH
19668: LD_INT 140
19670: PUSH
19671: LD_INT 150
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 1
19693: PPUSH
19694: LD_INT 15
19696: PPUSH
19697: CALL_OW 12
19701: ARRAY
19702: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19703: LD_ADDR_VAR 0 4
19707: PUSH
19708: LD_INT 10
19710: PUSH
19711: LD_INT 20
19713: PUSH
19714: LD_INT 30
19716: PUSH
19717: LD_INT 40
19719: PUSH
19720: LD_INT 50
19722: PUSH
19723: LD_INT 60
19725: PUSH
19726: LD_INT 70
19728: PUSH
19729: LD_INT 80
19731: PUSH
19732: LD_INT 90
19734: PUSH
19735: LD_INT 100
19737: PUSH
19738: LD_INT 110
19740: PUSH
19741: LD_INT 120
19743: PUSH
19744: LD_INT 130
19746: PUSH
19747: LD_INT 140
19749: PUSH
19750: LD_INT 150
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 1
19772: PPUSH
19773: LD_INT 15
19775: PPUSH
19776: CALL_OW 12
19780: ARRAY
19781: ST_TO_ADDR
// if ValidHex ( x , y ) then
19782: LD_VAR 0 3
19786: PPUSH
19787: LD_VAR 0 4
19791: PPUSH
19792: CALL_OW 488
19796: IFFALSE 19819
// begin result := [ x , y ] ;
19798: LD_ADDR_VAR 0 1
19802: PUSH
19803: LD_VAR 0 3
19807: PUSH
19808: LD_VAR 0 4
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: ST_TO_ADDR
// break ;
19817: GO 19821
// end ; end ;
19819: GO 19621
19821: POP
19822: POP
// if result then
19823: LD_VAR 0 1
19827: IFFALSE 19887
// begin ToLua ( playSibBomb() ) ;
19829: LD_STRING playSibBomb()
19831: PPUSH
19832: CALL_OW 559
// wait ( 0 0$14 ) ;
19836: LD_INT 490
19838: PPUSH
19839: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19843: LD_VAR 0 1
19847: PUSH
19848: LD_INT 1
19850: ARRAY
19851: PPUSH
19852: LD_VAR 0 1
19856: PUSH
19857: LD_INT 2
19859: ARRAY
19860: PPUSH
19861: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19865: LD_VAR 0 1
19869: PUSH
19870: LD_INT 1
19872: ARRAY
19873: PPUSH
19874: LD_VAR 0 1
19878: PUSH
19879: LD_INT 2
19881: ARRAY
19882: PPUSH
19883: CALL_OW 429
// end ; end ;
19887: LD_VAR 0 1
19891: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19892: LD_EXP 59
19896: PUSH
19897: LD_EXP 81
19901: AND
19902: IFFALSE 19914
19904: GO 19906
19906: DISABLE
// YouLost (  ) ;
19907: LD_STRING 
19909: PPUSH
19910: CALL_OW 104
19914: END
// every 0 0$1 trigger StreamModeActive and sFog do
19915: LD_EXP 59
19919: PUSH
19920: LD_EXP 80
19924: AND
19925: IFFALSE 19939
19927: GO 19929
19929: DISABLE
// FogOff ( your_side ) ;
19930: LD_OWVAR 2
19934: PPUSH
19935: CALL_OW 344
19939: END
// every 0 0$1 trigger StreamModeActive and sSun do
19940: LD_EXP 59
19944: PUSH
19945: LD_EXP 82
19949: AND
19950: IFFALSE 19978
19952: GO 19954
19954: DISABLE
// begin solar_recharge_percent := 0 ;
19955: LD_ADDR_OWVAR 79
19959: PUSH
19960: LD_INT 0
19962: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19963: LD_INT 10500
19965: PPUSH
19966: CALL_OW 67
// solar_recharge_percent := 100 ;
19970: LD_ADDR_OWVAR 79
19974: PUSH
19975: LD_INT 100
19977: ST_TO_ADDR
// end ;
19978: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19979: LD_EXP 59
19983: PUSH
19984: LD_EXP 83
19988: AND
19989: IFFALSE 20228
19991: GO 19993
19993: DISABLE
19994: LD_INT 0
19996: PPUSH
19997: PPUSH
19998: PPUSH
// begin tmp := [ ] ;
19999: LD_ADDR_VAR 0 3
20003: PUSH
20004: EMPTY
20005: ST_TO_ADDR
// for i := 1 to 6 do
20006: LD_ADDR_VAR 0 1
20010: PUSH
20011: DOUBLE
20012: LD_INT 1
20014: DEC
20015: ST_TO_ADDR
20016: LD_INT 6
20018: PUSH
20019: FOR_TO
20020: IFFALSE 20125
// begin uc_nation := nation_nature ;
20022: LD_ADDR_OWVAR 21
20026: PUSH
20027: LD_INT 0
20029: ST_TO_ADDR
// uc_side := 0 ;
20030: LD_ADDR_OWVAR 20
20034: PUSH
20035: LD_INT 0
20037: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20038: LD_ADDR_OWVAR 29
20042: PUSH
20043: LD_INT 12
20045: PUSH
20046: LD_INT 12
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: ST_TO_ADDR
// hc_agressivity := 20 ;
20053: LD_ADDR_OWVAR 35
20057: PUSH
20058: LD_INT 20
20060: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20061: LD_ADDR_OWVAR 28
20065: PUSH
20066: LD_INT 17
20068: ST_TO_ADDR
// hc_gallery :=  ;
20069: LD_ADDR_OWVAR 33
20073: PUSH
20074: LD_STRING 
20076: ST_TO_ADDR
// hc_name :=  ;
20077: LD_ADDR_OWVAR 26
20081: PUSH
20082: LD_STRING 
20084: ST_TO_ADDR
// un := CreateHuman ;
20085: LD_ADDR_VAR 0 2
20089: PUSH
20090: CALL_OW 44
20094: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20095: LD_VAR 0 2
20099: PPUSH
20100: LD_INT 1
20102: PPUSH
20103: CALL_OW 51
// tmp := tmp ^ un ;
20107: LD_ADDR_VAR 0 3
20111: PUSH
20112: LD_VAR 0 3
20116: PUSH
20117: LD_VAR 0 2
20121: ADD
20122: ST_TO_ADDR
// end ;
20123: GO 20019
20125: POP
20126: POP
// repeat wait ( 0 0$1 ) ;
20127: LD_INT 35
20129: PPUSH
20130: CALL_OW 67
// for un in tmp do
20134: LD_ADDR_VAR 0 2
20138: PUSH
20139: LD_VAR 0 3
20143: PUSH
20144: FOR_IN
20145: IFFALSE 20219
// begin if IsDead ( un ) then
20147: LD_VAR 0 2
20151: PPUSH
20152: CALL_OW 301
20156: IFFALSE 20176
// begin tmp := tmp diff un ;
20158: LD_ADDR_VAR 0 3
20162: PUSH
20163: LD_VAR 0 3
20167: PUSH
20168: LD_VAR 0 2
20172: DIFF
20173: ST_TO_ADDR
// continue ;
20174: GO 20144
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20176: LD_VAR 0 2
20180: PPUSH
20181: LD_INT 3
20183: PUSH
20184: LD_INT 22
20186: PUSH
20187: LD_INT 0
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PPUSH
20198: CALL_OW 69
20202: PPUSH
20203: LD_VAR 0 2
20207: PPUSH
20208: CALL_OW 74
20212: PPUSH
20213: CALL_OW 115
// end ;
20217: GO 20144
20219: POP
20220: POP
// until not tmp ;
20221: LD_VAR 0 3
20225: NOT
20226: IFFALSE 20127
// end ;
20228: PPOPN 3
20230: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20231: LD_EXP 59
20235: PUSH
20236: LD_EXP 84
20240: AND
20241: IFFALSE 20295
20243: GO 20245
20245: DISABLE
// begin ToLua ( displayTroll(); ) ;
20246: LD_STRING displayTroll();
20248: PPUSH
20249: CALL_OW 559
// wait ( 3 3$00 ) ;
20253: LD_INT 6300
20255: PPUSH
20256: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20260: LD_STRING hideTroll();
20262: PPUSH
20263: CALL_OW 559
// wait ( 1 1$00 ) ;
20267: LD_INT 2100
20269: PPUSH
20270: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20274: LD_STRING displayTroll();
20276: PPUSH
20277: CALL_OW 559
// wait ( 1 1$00 ) ;
20281: LD_INT 2100
20283: PPUSH
20284: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20288: LD_STRING hideTroll();
20290: PPUSH
20291: CALL_OW 559
// end ;
20295: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20296: LD_EXP 59
20300: PUSH
20301: LD_EXP 85
20305: AND
20306: IFFALSE 20369
20308: GO 20310
20310: DISABLE
20311: LD_INT 0
20313: PPUSH
// begin p := 0 ;
20314: LD_ADDR_VAR 0 1
20318: PUSH
20319: LD_INT 0
20321: ST_TO_ADDR
// repeat game_speed := 1 ;
20322: LD_ADDR_OWVAR 65
20326: PUSH
20327: LD_INT 1
20329: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20330: LD_INT 35
20332: PPUSH
20333: CALL_OW 67
// p := p + 1 ;
20337: LD_ADDR_VAR 0 1
20341: PUSH
20342: LD_VAR 0 1
20346: PUSH
20347: LD_INT 1
20349: PLUS
20350: ST_TO_ADDR
// until p >= 60 ;
20351: LD_VAR 0 1
20355: PUSH
20356: LD_INT 60
20358: GREATEREQUAL
20359: IFFALSE 20322
// game_speed := 4 ;
20361: LD_ADDR_OWVAR 65
20365: PUSH
20366: LD_INT 4
20368: ST_TO_ADDR
// end ;
20369: PPOPN 1
20371: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20372: LD_EXP 59
20376: PUSH
20377: LD_EXP 86
20381: AND
20382: IFFALSE 20528
20384: GO 20386
20386: DISABLE
20387: LD_INT 0
20389: PPUSH
20390: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20391: LD_ADDR_VAR 0 1
20395: PUSH
20396: LD_INT 22
20398: PUSH
20399: LD_OWVAR 2
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 2
20410: PUSH
20411: LD_INT 30
20413: PUSH
20414: LD_INT 0
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 30
20423: PUSH
20424: LD_INT 1
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: LIST
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PPUSH
20440: CALL_OW 69
20444: ST_TO_ADDR
// if not depot then
20445: LD_VAR 0 1
20449: NOT
20450: IFFALSE 20454
// exit ;
20452: GO 20528
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20454: LD_ADDR_VAR 0 2
20458: PUSH
20459: LD_VAR 0 1
20463: PUSH
20464: LD_INT 1
20466: PPUSH
20467: LD_VAR 0 1
20471: PPUSH
20472: CALL_OW 12
20476: ARRAY
20477: PPUSH
20478: CALL_OW 274
20482: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20483: LD_VAR 0 2
20487: PPUSH
20488: LD_INT 1
20490: PPUSH
20491: LD_INT 0
20493: PPUSH
20494: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20498: LD_VAR 0 2
20502: PPUSH
20503: LD_INT 2
20505: PPUSH
20506: LD_INT 0
20508: PPUSH
20509: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20513: LD_VAR 0 2
20517: PPUSH
20518: LD_INT 3
20520: PPUSH
20521: LD_INT 0
20523: PPUSH
20524: CALL_OW 277
// end ;
20528: PPOPN 2
20530: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20531: LD_EXP 59
20535: PUSH
20536: LD_EXP 87
20540: AND
20541: IFFALSE 20638
20543: GO 20545
20545: DISABLE
20546: LD_INT 0
20548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20549: LD_ADDR_VAR 0 1
20553: PUSH
20554: LD_INT 22
20556: PUSH
20557: LD_OWVAR 2
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 21
20568: PUSH
20569: LD_INT 1
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 3
20578: PUSH
20579: LD_INT 23
20581: PUSH
20582: LD_INT 0
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: LIST
20597: PPUSH
20598: CALL_OW 69
20602: ST_TO_ADDR
// if not tmp then
20603: LD_VAR 0 1
20607: NOT
20608: IFFALSE 20612
// exit ;
20610: GO 20638
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20612: LD_VAR 0 1
20616: PUSH
20617: LD_INT 1
20619: PPUSH
20620: LD_VAR 0 1
20624: PPUSH
20625: CALL_OW 12
20629: ARRAY
20630: PPUSH
20631: LD_INT 200
20633: PPUSH
20634: CALL_OW 234
// end ;
20638: PPOPN 1
20640: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20641: LD_EXP 59
20645: PUSH
20646: LD_EXP 88
20650: AND
20651: IFFALSE 20730
20653: GO 20655
20655: DISABLE
20656: LD_INT 0
20658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20659: LD_ADDR_VAR 0 1
20663: PUSH
20664: LD_INT 22
20666: PUSH
20667: LD_OWVAR 2
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 21
20678: PUSH
20679: LD_INT 2
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PPUSH
20690: CALL_OW 69
20694: ST_TO_ADDR
// if not tmp then
20695: LD_VAR 0 1
20699: NOT
20700: IFFALSE 20704
// exit ;
20702: GO 20730
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20704: LD_VAR 0 1
20708: PUSH
20709: LD_INT 1
20711: PPUSH
20712: LD_VAR 0 1
20716: PPUSH
20717: CALL_OW 12
20721: ARRAY
20722: PPUSH
20723: LD_INT 60
20725: PPUSH
20726: CALL_OW 234
// end ;
20730: PPOPN 1
20732: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20733: LD_EXP 59
20737: PUSH
20738: LD_EXP 89
20742: AND
20743: IFFALSE 20842
20745: GO 20747
20747: DISABLE
20748: LD_INT 0
20750: PPUSH
20751: PPUSH
// begin enable ;
20752: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20753: LD_ADDR_VAR 0 1
20757: PUSH
20758: LD_INT 22
20760: PUSH
20761: LD_OWVAR 2
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: LD_INT 61
20772: PUSH
20773: EMPTY
20774: LIST
20775: PUSH
20776: LD_INT 33
20778: PUSH
20779: LD_INT 2
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: LIST
20790: PPUSH
20791: CALL_OW 69
20795: ST_TO_ADDR
// if not tmp then
20796: LD_VAR 0 1
20800: NOT
20801: IFFALSE 20805
// exit ;
20803: GO 20842
// for i in tmp do
20805: LD_ADDR_VAR 0 2
20809: PUSH
20810: LD_VAR 0 1
20814: PUSH
20815: FOR_IN
20816: IFFALSE 20840
// if IsControledBy ( i ) then
20818: LD_VAR 0 2
20822: PPUSH
20823: CALL_OW 312
20827: IFFALSE 20838
// ComUnlink ( i ) ;
20829: LD_VAR 0 2
20833: PPUSH
20834: CALL_OW 136
20838: GO 20815
20840: POP
20841: POP
// end ;
20842: PPOPN 2
20844: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20845: LD_EXP 59
20849: PUSH
20850: LD_EXP 90
20854: AND
20855: IFFALSE 20995
20857: GO 20859
20859: DISABLE
20860: LD_INT 0
20862: PPUSH
20863: PPUSH
// begin ToLua ( displayPowell(); ) ;
20864: LD_STRING displayPowell();
20866: PPUSH
20867: CALL_OW 559
// uc_side := 0 ;
20871: LD_ADDR_OWVAR 20
20875: PUSH
20876: LD_INT 0
20878: ST_TO_ADDR
// uc_nation := 2 ;
20879: LD_ADDR_OWVAR 21
20883: PUSH
20884: LD_INT 2
20886: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20887: LD_ADDR_OWVAR 37
20891: PUSH
20892: LD_INT 14
20894: ST_TO_ADDR
// vc_engine := engine_siberite ;
20895: LD_ADDR_OWVAR 39
20899: PUSH
20900: LD_INT 3
20902: ST_TO_ADDR
// vc_control := control_apeman ;
20903: LD_ADDR_OWVAR 38
20907: PUSH
20908: LD_INT 5
20910: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20911: LD_ADDR_OWVAR 40
20915: PUSH
20916: LD_INT 29
20918: ST_TO_ADDR
// un := CreateVehicle ;
20919: LD_ADDR_VAR 0 2
20923: PUSH
20924: CALL_OW 45
20928: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20929: LD_VAR 0 2
20933: PPUSH
20934: LD_INT 1
20936: PPUSH
20937: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20941: LD_INT 35
20943: PPUSH
20944: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20948: LD_VAR 0 2
20952: PPUSH
20953: LD_INT 22
20955: PUSH
20956: LD_OWVAR 2
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PPUSH
20965: CALL_OW 69
20969: PPUSH
20970: LD_VAR 0 2
20974: PPUSH
20975: CALL_OW 74
20979: PPUSH
20980: CALL_OW 115
// until IsDead ( un ) ;
20984: LD_VAR 0 2
20988: PPUSH
20989: CALL_OW 301
20993: IFFALSE 20941
// end ;
20995: PPOPN 2
20997: END
// every 0 0$1 trigger StreamModeActive and sStu do
20998: LD_EXP 59
21002: PUSH
21003: LD_EXP 98
21007: AND
21008: IFFALSE 21024
21010: GO 21012
21012: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21013: LD_STRING displayStucuk();
21015: PPUSH
21016: CALL_OW 559
// ResetFog ;
21020: CALL_OW 335
// end ;
21024: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21025: LD_EXP 59
21029: PUSH
21030: LD_EXP 91
21034: AND
21035: IFFALSE 21176
21037: GO 21039
21039: DISABLE
21040: LD_INT 0
21042: PPUSH
21043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21044: LD_ADDR_VAR 0 2
21048: PUSH
21049: LD_INT 22
21051: PUSH
21052: LD_OWVAR 2
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 21
21063: PUSH
21064: LD_INT 1
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PPUSH
21075: CALL_OW 69
21079: ST_TO_ADDR
// if not tmp then
21080: LD_VAR 0 2
21084: NOT
21085: IFFALSE 21089
// exit ;
21087: GO 21176
// un := tmp [ rand ( 1 , tmp ) ] ;
21089: LD_ADDR_VAR 0 1
21093: PUSH
21094: LD_VAR 0 2
21098: PUSH
21099: LD_INT 1
21101: PPUSH
21102: LD_VAR 0 2
21106: PPUSH
21107: CALL_OW 12
21111: ARRAY
21112: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21113: LD_VAR 0 1
21117: PPUSH
21118: LD_INT 0
21120: PPUSH
21121: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21125: LD_VAR 0 1
21129: PPUSH
21130: LD_OWVAR 3
21134: PUSH
21135: LD_VAR 0 1
21139: DIFF
21140: PPUSH
21141: LD_VAR 0 1
21145: PPUSH
21146: CALL_OW 74
21150: PPUSH
21151: CALL_OW 115
// wait ( 0 0$20 ) ;
21155: LD_INT 700
21157: PPUSH
21158: CALL_OW 67
// SetSide ( un , your_side ) ;
21162: LD_VAR 0 1
21166: PPUSH
21167: LD_OWVAR 2
21171: PPUSH
21172: CALL_OW 235
// end ;
21176: PPOPN 2
21178: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21179: LD_EXP 59
21183: PUSH
21184: LD_EXP 92
21188: AND
21189: IFFALSE 21295
21191: GO 21193
21193: DISABLE
21194: LD_INT 0
21196: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21197: LD_ADDR_VAR 0 1
21201: PUSH
21202: LD_INT 22
21204: PUSH
21205: LD_OWVAR 2
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 2
21216: PUSH
21217: LD_INT 30
21219: PUSH
21220: LD_INT 0
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 30
21229: PUSH
21230: LD_INT 1
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: LIST
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PPUSH
21246: CALL_OW 69
21250: ST_TO_ADDR
// if not depot then
21251: LD_VAR 0 1
21255: NOT
21256: IFFALSE 21260
// exit ;
21258: GO 21295
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21260: LD_VAR 0 1
21264: PUSH
21265: LD_INT 1
21267: ARRAY
21268: PPUSH
21269: CALL_OW 250
21273: PPUSH
21274: LD_VAR 0 1
21278: PUSH
21279: LD_INT 1
21281: ARRAY
21282: PPUSH
21283: CALL_OW 251
21287: PPUSH
21288: LD_INT 70
21290: PPUSH
21291: CALL_OW 495
// end ;
21295: PPOPN 1
21297: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21298: LD_EXP 59
21302: PUSH
21303: LD_EXP 93
21307: AND
21308: IFFALSE 21519
21310: GO 21312
21312: DISABLE
21313: LD_INT 0
21315: PPUSH
21316: PPUSH
21317: PPUSH
21318: PPUSH
21319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21320: LD_ADDR_VAR 0 5
21324: PUSH
21325: LD_INT 22
21327: PUSH
21328: LD_OWVAR 2
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 21
21339: PUSH
21340: LD_INT 1
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PPUSH
21351: CALL_OW 69
21355: ST_TO_ADDR
// if not tmp then
21356: LD_VAR 0 5
21360: NOT
21361: IFFALSE 21365
// exit ;
21363: GO 21519
// for i in tmp do
21365: LD_ADDR_VAR 0 1
21369: PUSH
21370: LD_VAR 0 5
21374: PUSH
21375: FOR_IN
21376: IFFALSE 21517
// begin d := rand ( 0 , 5 ) ;
21378: LD_ADDR_VAR 0 4
21382: PUSH
21383: LD_INT 0
21385: PPUSH
21386: LD_INT 5
21388: PPUSH
21389: CALL_OW 12
21393: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21394: LD_ADDR_VAR 0 2
21398: PUSH
21399: LD_VAR 0 1
21403: PPUSH
21404: CALL_OW 250
21408: PPUSH
21409: LD_VAR 0 4
21413: PPUSH
21414: LD_INT 3
21416: PPUSH
21417: LD_INT 12
21419: PPUSH
21420: CALL_OW 12
21424: PPUSH
21425: CALL_OW 272
21429: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21430: LD_ADDR_VAR 0 3
21434: PUSH
21435: LD_VAR 0 1
21439: PPUSH
21440: CALL_OW 251
21444: PPUSH
21445: LD_VAR 0 4
21449: PPUSH
21450: LD_INT 3
21452: PPUSH
21453: LD_INT 12
21455: PPUSH
21456: CALL_OW 12
21460: PPUSH
21461: CALL_OW 273
21465: ST_TO_ADDR
// if ValidHex ( x , y ) then
21466: LD_VAR 0 2
21470: PPUSH
21471: LD_VAR 0 3
21475: PPUSH
21476: CALL_OW 488
21480: IFFALSE 21515
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21482: LD_VAR 0 1
21486: PPUSH
21487: LD_VAR 0 2
21491: PPUSH
21492: LD_VAR 0 3
21496: PPUSH
21497: LD_INT 3
21499: PPUSH
21500: LD_INT 6
21502: PPUSH
21503: CALL_OW 12
21507: PPUSH
21508: LD_INT 1
21510: PPUSH
21511: CALL_OW 483
// end ;
21515: GO 21375
21517: POP
21518: POP
// end ;
21519: PPOPN 5
21521: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21522: LD_EXP 59
21526: PUSH
21527: LD_EXP 94
21531: AND
21532: IFFALSE 21626
21534: GO 21536
21536: DISABLE
21537: LD_INT 0
21539: PPUSH
21540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21541: LD_ADDR_VAR 0 2
21545: PUSH
21546: LD_INT 22
21548: PUSH
21549: LD_OWVAR 2
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: LD_INT 32
21560: PUSH
21561: LD_INT 1
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 21
21570: PUSH
21571: LD_INT 2
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: LIST
21582: PPUSH
21583: CALL_OW 69
21587: ST_TO_ADDR
// if not tmp then
21588: LD_VAR 0 2
21592: NOT
21593: IFFALSE 21597
// exit ;
21595: GO 21626
// for i in tmp do
21597: LD_ADDR_VAR 0 1
21601: PUSH
21602: LD_VAR 0 2
21606: PUSH
21607: FOR_IN
21608: IFFALSE 21624
// SetFuel ( i , 0 ) ;
21610: LD_VAR 0 1
21614: PPUSH
21615: LD_INT 0
21617: PPUSH
21618: CALL_OW 240
21622: GO 21607
21624: POP
21625: POP
// end ;
21626: PPOPN 2
21628: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21629: LD_EXP 59
21633: PUSH
21634: LD_EXP 95
21638: AND
21639: IFFALSE 21705
21641: GO 21643
21643: DISABLE
21644: LD_INT 0
21646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21647: LD_ADDR_VAR 0 1
21651: PUSH
21652: LD_INT 22
21654: PUSH
21655: LD_OWVAR 2
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 30
21666: PUSH
21667: LD_INT 29
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PPUSH
21678: CALL_OW 69
21682: ST_TO_ADDR
// if not tmp then
21683: LD_VAR 0 1
21687: NOT
21688: IFFALSE 21692
// exit ;
21690: GO 21705
// DestroyUnit ( tmp [ 1 ] ) ;
21692: LD_VAR 0 1
21696: PUSH
21697: LD_INT 1
21699: ARRAY
21700: PPUSH
21701: CALL_OW 65
// end ;
21705: PPOPN 1
21707: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21708: LD_EXP 59
21712: PUSH
21713: LD_EXP 97
21717: AND
21718: IFFALSE 21847
21720: GO 21722
21722: DISABLE
21723: LD_INT 0
21725: PPUSH
// begin uc_side := 0 ;
21726: LD_ADDR_OWVAR 20
21730: PUSH
21731: LD_INT 0
21733: ST_TO_ADDR
// uc_nation := nation_arabian ;
21734: LD_ADDR_OWVAR 21
21738: PUSH
21739: LD_INT 2
21741: ST_TO_ADDR
// hc_gallery :=  ;
21742: LD_ADDR_OWVAR 33
21746: PUSH
21747: LD_STRING 
21749: ST_TO_ADDR
// hc_name :=  ;
21750: LD_ADDR_OWVAR 26
21754: PUSH
21755: LD_STRING 
21757: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21758: LD_INT 1
21760: PPUSH
21761: LD_INT 11
21763: PPUSH
21764: LD_INT 10
21766: PPUSH
21767: CALL_OW 380
// un := CreateHuman ;
21771: LD_ADDR_VAR 0 1
21775: PUSH
21776: CALL_OW 44
21780: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21781: LD_VAR 0 1
21785: PPUSH
21786: LD_INT 1
21788: PPUSH
21789: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21793: LD_INT 35
21795: PPUSH
21796: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21800: LD_VAR 0 1
21804: PPUSH
21805: LD_INT 22
21807: PUSH
21808: LD_OWVAR 2
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PPUSH
21817: CALL_OW 69
21821: PPUSH
21822: LD_VAR 0 1
21826: PPUSH
21827: CALL_OW 74
21831: PPUSH
21832: CALL_OW 115
// until IsDead ( un ) ;
21836: LD_VAR 0 1
21840: PPUSH
21841: CALL_OW 301
21845: IFFALSE 21793
// end ;
21847: PPOPN 1
21849: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21850: LD_EXP 59
21854: PUSH
21855: LD_EXP 99
21859: AND
21860: IFFALSE 21872
21862: GO 21864
21864: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21865: LD_STRING earthquake(getX(game), 0, 32)
21867: PPUSH
21868: CALL_OW 559
21872: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21873: LD_EXP 59
21877: PUSH
21878: LD_EXP 100
21882: AND
21883: IFFALSE 21974
21885: GO 21887
21887: DISABLE
21888: LD_INT 0
21890: PPUSH
// begin enable ;
21891: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21892: LD_ADDR_VAR 0 1
21896: PUSH
21897: LD_INT 22
21899: PUSH
21900: LD_OWVAR 2
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 21
21911: PUSH
21912: LD_INT 2
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 33
21921: PUSH
21922: LD_INT 3
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: LIST
21933: PPUSH
21934: CALL_OW 69
21938: ST_TO_ADDR
// if not tmp then
21939: LD_VAR 0 1
21943: NOT
21944: IFFALSE 21948
// exit ;
21946: GO 21974
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21948: LD_VAR 0 1
21952: PUSH
21953: LD_INT 1
21955: PPUSH
21956: LD_VAR 0 1
21960: PPUSH
21961: CALL_OW 12
21965: ARRAY
21966: PPUSH
21967: LD_INT 1
21969: PPUSH
21970: CALL_OW 234
// end ;
21974: PPOPN 1
21976: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21977: LD_EXP 59
21981: PUSH
21982: LD_EXP 101
21986: AND
21987: IFFALSE 22128
21989: GO 21991
21991: DISABLE
21992: LD_INT 0
21994: PPUSH
21995: PPUSH
21996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21997: LD_ADDR_VAR 0 3
22001: PUSH
22002: LD_INT 22
22004: PUSH
22005: LD_OWVAR 2
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PUSH
22014: LD_INT 25
22016: PUSH
22017: LD_INT 1
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PPUSH
22028: CALL_OW 69
22032: ST_TO_ADDR
// if not tmp then
22033: LD_VAR 0 3
22037: NOT
22038: IFFALSE 22042
// exit ;
22040: GO 22128
// un := tmp [ rand ( 1 , tmp ) ] ;
22042: LD_ADDR_VAR 0 2
22046: PUSH
22047: LD_VAR 0 3
22051: PUSH
22052: LD_INT 1
22054: PPUSH
22055: LD_VAR 0 3
22059: PPUSH
22060: CALL_OW 12
22064: ARRAY
22065: ST_TO_ADDR
// if Crawls ( un ) then
22066: LD_VAR 0 2
22070: PPUSH
22071: CALL_OW 318
22075: IFFALSE 22086
// ComWalk ( un ) ;
22077: LD_VAR 0 2
22081: PPUSH
22082: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22086: LD_VAR 0 2
22090: PPUSH
22091: LD_INT 9
22093: PPUSH
22094: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22098: LD_INT 28
22100: PPUSH
22101: LD_OWVAR 2
22105: PPUSH
22106: LD_INT 2
22108: PPUSH
22109: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22113: LD_INT 29
22115: PPUSH
22116: LD_OWVAR 2
22120: PPUSH
22121: LD_INT 2
22123: PPUSH
22124: CALL_OW 322
// end ;
22128: PPOPN 3
22130: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22131: LD_EXP 59
22135: PUSH
22136: LD_EXP 102
22140: AND
22141: IFFALSE 22252
22143: GO 22145
22145: DISABLE
22146: LD_INT 0
22148: PPUSH
22149: PPUSH
22150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22151: LD_ADDR_VAR 0 3
22155: PUSH
22156: LD_INT 22
22158: PUSH
22159: LD_OWVAR 2
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 25
22170: PUSH
22171: LD_INT 1
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PPUSH
22182: CALL_OW 69
22186: ST_TO_ADDR
// if not tmp then
22187: LD_VAR 0 3
22191: NOT
22192: IFFALSE 22196
// exit ;
22194: GO 22252
// un := tmp [ rand ( 1 , tmp ) ] ;
22196: LD_ADDR_VAR 0 2
22200: PUSH
22201: LD_VAR 0 3
22205: PUSH
22206: LD_INT 1
22208: PPUSH
22209: LD_VAR 0 3
22213: PPUSH
22214: CALL_OW 12
22218: ARRAY
22219: ST_TO_ADDR
// if Crawls ( un ) then
22220: LD_VAR 0 2
22224: PPUSH
22225: CALL_OW 318
22229: IFFALSE 22240
// ComWalk ( un ) ;
22231: LD_VAR 0 2
22235: PPUSH
22236: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22240: LD_VAR 0 2
22244: PPUSH
22245: LD_INT 8
22247: PPUSH
22248: CALL_OW 336
// end ;
22252: PPOPN 3
22254: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22255: LD_EXP 59
22259: PUSH
22260: LD_EXP 103
22264: AND
22265: IFFALSE 22409
22267: GO 22269
22269: DISABLE
22270: LD_INT 0
22272: PPUSH
22273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22274: LD_ADDR_VAR 0 2
22278: PUSH
22279: LD_INT 22
22281: PUSH
22282: LD_OWVAR 2
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 21
22293: PUSH
22294: LD_INT 2
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 2
22303: PUSH
22304: LD_INT 34
22306: PUSH
22307: LD_INT 12
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 34
22316: PUSH
22317: LD_INT 51
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 34
22326: PUSH
22327: LD_INT 32
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: LIST
22344: PPUSH
22345: CALL_OW 69
22349: ST_TO_ADDR
// if not tmp then
22350: LD_VAR 0 2
22354: NOT
22355: IFFALSE 22359
// exit ;
22357: GO 22409
// for i in tmp do
22359: LD_ADDR_VAR 0 1
22363: PUSH
22364: LD_VAR 0 2
22368: PUSH
22369: FOR_IN
22370: IFFALSE 22407
// if GetCargo ( i , mat_artifact ) = 0 then
22372: LD_VAR 0 1
22376: PPUSH
22377: LD_INT 4
22379: PPUSH
22380: CALL_OW 289
22384: PUSH
22385: LD_INT 0
22387: EQUAL
22388: IFFALSE 22405
// SetCargo ( i , mat_siberit , 100 ) ;
22390: LD_VAR 0 1
22394: PPUSH
22395: LD_INT 3
22397: PPUSH
22398: LD_INT 100
22400: PPUSH
22401: CALL_OW 290
22405: GO 22369
22407: POP
22408: POP
// end ;
22409: PPOPN 2
22411: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22412: LD_EXP 59
22416: PUSH
22417: LD_EXP 104
22421: AND
22422: IFFALSE 22605
22424: GO 22426
22426: DISABLE
22427: LD_INT 0
22429: PPUSH
22430: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22431: LD_ADDR_VAR 0 2
22435: PUSH
22436: LD_INT 22
22438: PUSH
22439: LD_OWVAR 2
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PPUSH
22448: CALL_OW 69
22452: ST_TO_ADDR
// if not tmp then
22453: LD_VAR 0 2
22457: NOT
22458: IFFALSE 22462
// exit ;
22460: GO 22605
// for i := 1 to 2 do
22462: LD_ADDR_VAR 0 1
22466: PUSH
22467: DOUBLE
22468: LD_INT 1
22470: DEC
22471: ST_TO_ADDR
22472: LD_INT 2
22474: PUSH
22475: FOR_TO
22476: IFFALSE 22603
// begin uc_side := your_side ;
22478: LD_ADDR_OWVAR 20
22482: PUSH
22483: LD_OWVAR 2
22487: ST_TO_ADDR
// uc_nation := nation_american ;
22488: LD_ADDR_OWVAR 21
22492: PUSH
22493: LD_INT 1
22495: ST_TO_ADDR
// vc_chassis := us_morphling ;
22496: LD_ADDR_OWVAR 37
22500: PUSH
22501: LD_INT 5
22503: ST_TO_ADDR
// vc_engine := engine_siberite ;
22504: LD_ADDR_OWVAR 39
22508: PUSH
22509: LD_INT 3
22511: ST_TO_ADDR
// vc_control := control_computer ;
22512: LD_ADDR_OWVAR 38
22516: PUSH
22517: LD_INT 3
22519: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22520: LD_ADDR_OWVAR 40
22524: PUSH
22525: LD_INT 10
22527: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22528: LD_VAR 0 2
22532: PUSH
22533: LD_INT 1
22535: ARRAY
22536: PPUSH
22537: CALL_OW 310
22541: NOT
22542: IFFALSE 22589
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22544: CALL_OW 45
22548: PPUSH
22549: LD_VAR 0 2
22553: PUSH
22554: LD_INT 1
22556: ARRAY
22557: PPUSH
22558: CALL_OW 250
22562: PPUSH
22563: LD_VAR 0 2
22567: PUSH
22568: LD_INT 1
22570: ARRAY
22571: PPUSH
22572: CALL_OW 251
22576: PPUSH
22577: LD_INT 12
22579: PPUSH
22580: LD_INT 1
22582: PPUSH
22583: CALL_OW 50
22587: GO 22601
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22589: CALL_OW 45
22593: PPUSH
22594: LD_INT 1
22596: PPUSH
22597: CALL_OW 51
// end ;
22601: GO 22475
22603: POP
22604: POP
// end ;
22605: PPOPN 2
22607: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22608: LD_EXP 59
22612: PUSH
22613: LD_EXP 105
22617: AND
22618: IFFALSE 22840
22620: GO 22622
22622: DISABLE
22623: LD_INT 0
22625: PPUSH
22626: PPUSH
22627: PPUSH
22628: PPUSH
22629: PPUSH
22630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22631: LD_ADDR_VAR 0 6
22635: PUSH
22636: LD_INT 22
22638: PUSH
22639: LD_OWVAR 2
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 21
22650: PUSH
22651: LD_INT 1
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 3
22660: PUSH
22661: LD_INT 23
22663: PUSH
22664: LD_INT 0
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: LIST
22679: PPUSH
22680: CALL_OW 69
22684: ST_TO_ADDR
// if not tmp then
22685: LD_VAR 0 6
22689: NOT
22690: IFFALSE 22694
// exit ;
22692: GO 22840
// s1 := rand ( 1 , 4 ) ;
22694: LD_ADDR_VAR 0 2
22698: PUSH
22699: LD_INT 1
22701: PPUSH
22702: LD_INT 4
22704: PPUSH
22705: CALL_OW 12
22709: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22710: LD_ADDR_VAR 0 4
22714: PUSH
22715: LD_VAR 0 6
22719: PUSH
22720: LD_INT 1
22722: ARRAY
22723: PPUSH
22724: LD_VAR 0 2
22728: PPUSH
22729: CALL_OW 259
22733: ST_TO_ADDR
// if s1 = 1 then
22734: LD_VAR 0 2
22738: PUSH
22739: LD_INT 1
22741: EQUAL
22742: IFFALSE 22762
// s2 := rand ( 2 , 4 ) else
22744: LD_ADDR_VAR 0 3
22748: PUSH
22749: LD_INT 2
22751: PPUSH
22752: LD_INT 4
22754: PPUSH
22755: CALL_OW 12
22759: ST_TO_ADDR
22760: GO 22770
// s2 := 1 ;
22762: LD_ADDR_VAR 0 3
22766: PUSH
22767: LD_INT 1
22769: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22770: LD_ADDR_VAR 0 5
22774: PUSH
22775: LD_VAR 0 6
22779: PUSH
22780: LD_INT 1
22782: ARRAY
22783: PPUSH
22784: LD_VAR 0 3
22788: PPUSH
22789: CALL_OW 259
22793: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22794: LD_VAR 0 6
22798: PUSH
22799: LD_INT 1
22801: ARRAY
22802: PPUSH
22803: LD_VAR 0 2
22807: PPUSH
22808: LD_VAR 0 5
22812: PPUSH
22813: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22817: LD_VAR 0 6
22821: PUSH
22822: LD_INT 1
22824: ARRAY
22825: PPUSH
22826: LD_VAR 0 3
22830: PPUSH
22831: LD_VAR 0 4
22835: PPUSH
22836: CALL_OW 237
// end ;
22840: PPOPN 6
22842: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22843: LD_EXP 59
22847: PUSH
22848: LD_EXP 106
22852: AND
22853: IFFALSE 22932
22855: GO 22857
22857: DISABLE
22858: LD_INT 0
22860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22861: LD_ADDR_VAR 0 1
22865: PUSH
22866: LD_INT 22
22868: PUSH
22869: LD_OWVAR 2
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 30
22880: PUSH
22881: LD_INT 3
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PPUSH
22892: CALL_OW 69
22896: ST_TO_ADDR
// if not tmp then
22897: LD_VAR 0 1
22901: NOT
22902: IFFALSE 22906
// exit ;
22904: GO 22932
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22906: LD_VAR 0 1
22910: PUSH
22911: LD_INT 1
22913: PPUSH
22914: LD_VAR 0 1
22918: PPUSH
22919: CALL_OW 12
22923: ARRAY
22924: PPUSH
22925: LD_INT 1
22927: PPUSH
22928: CALL_OW 234
// end ;
22932: PPOPN 1
22934: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22935: LD_EXP 59
22939: PUSH
22940: LD_EXP 107
22944: AND
22945: IFFALSE 23057
22947: GO 22949
22949: DISABLE
22950: LD_INT 0
22952: PPUSH
22953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22954: LD_ADDR_VAR 0 2
22958: PUSH
22959: LD_INT 22
22961: PUSH
22962: LD_OWVAR 2
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 2
22973: PUSH
22974: LD_INT 30
22976: PUSH
22977: LD_INT 27
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 30
22986: PUSH
22987: LD_INT 26
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: LD_INT 30
22996: PUSH
22997: LD_INT 28
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PPUSH
23014: CALL_OW 69
23018: ST_TO_ADDR
// if not tmp then
23019: LD_VAR 0 2
23023: NOT
23024: IFFALSE 23028
// exit ;
23026: GO 23057
// for i in tmp do
23028: LD_ADDR_VAR 0 1
23032: PUSH
23033: LD_VAR 0 2
23037: PUSH
23038: FOR_IN
23039: IFFALSE 23055
// SetLives ( i , 1 ) ;
23041: LD_VAR 0 1
23045: PPUSH
23046: LD_INT 1
23048: PPUSH
23049: CALL_OW 234
23053: GO 23038
23055: POP
23056: POP
// end ;
23057: PPOPN 2
23059: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23060: LD_EXP 59
23064: PUSH
23065: LD_EXP 108
23069: AND
23070: IFFALSE 23344
23072: GO 23074
23074: DISABLE
23075: LD_INT 0
23077: PPUSH
23078: PPUSH
23079: PPUSH
// begin i := rand ( 1 , 7 ) ;
23080: LD_ADDR_VAR 0 1
23084: PUSH
23085: LD_INT 1
23087: PPUSH
23088: LD_INT 7
23090: PPUSH
23091: CALL_OW 12
23095: ST_TO_ADDR
// case i of 1 :
23096: LD_VAR 0 1
23100: PUSH
23101: LD_INT 1
23103: DOUBLE
23104: EQUAL
23105: IFTRUE 23109
23107: GO 23119
23109: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23110: LD_STRING earthquake(getX(game), 0, 32)
23112: PPUSH
23113: CALL_OW 559
23117: GO 23344
23119: LD_INT 2
23121: DOUBLE
23122: EQUAL
23123: IFTRUE 23127
23125: GO 23141
23127: POP
// begin ToLua ( displayStucuk(); ) ;
23128: LD_STRING displayStucuk();
23130: PPUSH
23131: CALL_OW 559
// ResetFog ;
23135: CALL_OW 335
// end ; 3 :
23139: GO 23344
23141: LD_INT 3
23143: DOUBLE
23144: EQUAL
23145: IFTRUE 23149
23147: GO 23253
23149: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23150: LD_ADDR_VAR 0 2
23154: PUSH
23155: LD_INT 22
23157: PUSH
23158: LD_OWVAR 2
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 25
23169: PUSH
23170: LD_INT 1
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PPUSH
23181: CALL_OW 69
23185: ST_TO_ADDR
// if not tmp then
23186: LD_VAR 0 2
23190: NOT
23191: IFFALSE 23195
// exit ;
23193: GO 23344
// un := tmp [ rand ( 1 , tmp ) ] ;
23195: LD_ADDR_VAR 0 3
23199: PUSH
23200: LD_VAR 0 2
23204: PUSH
23205: LD_INT 1
23207: PPUSH
23208: LD_VAR 0 2
23212: PPUSH
23213: CALL_OW 12
23217: ARRAY
23218: ST_TO_ADDR
// if Crawls ( un ) then
23219: LD_VAR 0 3
23223: PPUSH
23224: CALL_OW 318
23228: IFFALSE 23239
// ComWalk ( un ) ;
23230: LD_VAR 0 3
23234: PPUSH
23235: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23239: LD_VAR 0 3
23243: PPUSH
23244: LD_INT 8
23246: PPUSH
23247: CALL_OW 336
// end ; 4 :
23251: GO 23344
23253: LD_INT 4
23255: DOUBLE
23256: EQUAL
23257: IFTRUE 23261
23259: GO 23322
23261: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23262: LD_ADDR_VAR 0 2
23266: PUSH
23267: LD_INT 22
23269: PUSH
23270: LD_OWVAR 2
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PUSH
23279: LD_INT 30
23281: PUSH
23282: LD_INT 29
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PPUSH
23293: CALL_OW 69
23297: ST_TO_ADDR
// if not tmp then
23298: LD_VAR 0 2
23302: NOT
23303: IFFALSE 23307
// exit ;
23305: GO 23344
// DestroyUnit ( tmp [ 1 ] ) ;
23307: LD_VAR 0 2
23311: PUSH
23312: LD_INT 1
23314: ARRAY
23315: PPUSH
23316: CALL_OW 65
// end ; 5 .. 7 :
23320: GO 23344
23322: LD_INT 5
23324: DOUBLE
23325: GREATEREQUAL
23326: IFFALSE 23334
23328: LD_INT 7
23330: DOUBLE
23331: LESSEQUAL
23332: IFTRUE 23336
23334: GO 23343
23336: POP
// StreamSibBomb ; end ;
23337: CALL 19594 0 0
23341: GO 23344
23343: POP
// end ;
23344: PPOPN 3
23346: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23347: LD_EXP 59
23351: PUSH
23352: LD_EXP 109
23356: AND
23357: IFFALSE 23513
23359: GO 23361
23361: DISABLE
23362: LD_INT 0
23364: PPUSH
23365: PPUSH
23366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23367: LD_ADDR_VAR 0 2
23371: PUSH
23372: LD_INT 81
23374: PUSH
23375: LD_OWVAR 2
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 2
23386: PUSH
23387: LD_INT 21
23389: PUSH
23390: LD_INT 1
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 21
23399: PUSH
23400: LD_INT 2
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: LIST
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PPUSH
23416: CALL_OW 69
23420: ST_TO_ADDR
// if not tmp then
23421: LD_VAR 0 2
23425: NOT
23426: IFFALSE 23430
// exit ;
23428: GO 23513
// p := 0 ;
23430: LD_ADDR_VAR 0 3
23434: PUSH
23435: LD_INT 0
23437: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23438: LD_INT 35
23440: PPUSH
23441: CALL_OW 67
// p := p + 1 ;
23445: LD_ADDR_VAR 0 3
23449: PUSH
23450: LD_VAR 0 3
23454: PUSH
23455: LD_INT 1
23457: PLUS
23458: ST_TO_ADDR
// for i in tmp do
23459: LD_ADDR_VAR 0 1
23463: PUSH
23464: LD_VAR 0 2
23468: PUSH
23469: FOR_IN
23470: IFFALSE 23501
// if GetLives ( i ) < 1000 then
23472: LD_VAR 0 1
23476: PPUSH
23477: CALL_OW 256
23481: PUSH
23482: LD_INT 1000
23484: LESS
23485: IFFALSE 23499
// SetLives ( i , 1000 ) ;
23487: LD_VAR 0 1
23491: PPUSH
23492: LD_INT 1000
23494: PPUSH
23495: CALL_OW 234
23499: GO 23469
23501: POP
23502: POP
// until p > 20 ;
23503: LD_VAR 0 3
23507: PUSH
23508: LD_INT 20
23510: GREATER
23511: IFFALSE 23438
// end ;
23513: PPOPN 3
23515: END
// every 0 0$1 trigger StreamModeActive and sTime do
23516: LD_EXP 59
23520: PUSH
23521: LD_EXP 110
23525: AND
23526: IFFALSE 23561
23528: GO 23530
23530: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23531: LD_INT 28
23533: PPUSH
23534: LD_OWVAR 2
23538: PPUSH
23539: LD_INT 2
23541: PPUSH
23542: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23546: LD_INT 30
23548: PPUSH
23549: LD_OWVAR 2
23553: PPUSH
23554: LD_INT 2
23556: PPUSH
23557: CALL_OW 322
// end ;
23561: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23562: LD_EXP 59
23566: PUSH
23567: LD_EXP 111
23571: AND
23572: IFFALSE 23693
23574: GO 23576
23576: DISABLE
23577: LD_INT 0
23579: PPUSH
23580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23581: LD_ADDR_VAR 0 2
23585: PUSH
23586: LD_INT 22
23588: PUSH
23589: LD_OWVAR 2
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 21
23600: PUSH
23601: LD_INT 1
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 3
23610: PUSH
23611: LD_INT 23
23613: PUSH
23614: LD_INT 0
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: LIST
23629: PPUSH
23630: CALL_OW 69
23634: ST_TO_ADDR
// if not tmp then
23635: LD_VAR 0 2
23639: NOT
23640: IFFALSE 23644
// exit ;
23642: GO 23693
// for i in tmp do
23644: LD_ADDR_VAR 0 1
23648: PUSH
23649: LD_VAR 0 2
23653: PUSH
23654: FOR_IN
23655: IFFALSE 23691
// begin if Crawls ( i ) then
23657: LD_VAR 0 1
23661: PPUSH
23662: CALL_OW 318
23666: IFFALSE 23677
// ComWalk ( i ) ;
23668: LD_VAR 0 1
23672: PPUSH
23673: CALL_OW 138
// SetClass ( i , 2 ) ;
23677: LD_VAR 0 1
23681: PPUSH
23682: LD_INT 2
23684: PPUSH
23685: CALL_OW 336
// end ;
23689: GO 23654
23691: POP
23692: POP
// end ;
23693: PPOPN 2
23695: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23696: LD_EXP 59
23700: PUSH
23701: LD_EXP 112
23705: AND
23706: IFFALSE 23987
23708: GO 23710
23710: DISABLE
23711: LD_INT 0
23713: PPUSH
23714: PPUSH
23715: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23716: LD_OWVAR 2
23720: PPUSH
23721: LD_INT 9
23723: PPUSH
23724: LD_INT 1
23726: PPUSH
23727: LD_INT 1
23729: PPUSH
23730: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23734: LD_INT 9
23736: PPUSH
23737: LD_OWVAR 2
23741: PPUSH
23742: CALL_OW 343
// uc_side := 9 ;
23746: LD_ADDR_OWVAR 20
23750: PUSH
23751: LD_INT 9
23753: ST_TO_ADDR
// uc_nation := 2 ;
23754: LD_ADDR_OWVAR 21
23758: PUSH
23759: LD_INT 2
23761: ST_TO_ADDR
// hc_name := Dark Warrior ;
23762: LD_ADDR_OWVAR 26
23766: PUSH
23767: LD_STRING Dark Warrior
23769: ST_TO_ADDR
// hc_gallery :=  ;
23770: LD_ADDR_OWVAR 33
23774: PUSH
23775: LD_STRING 
23777: ST_TO_ADDR
// hc_noskilllimit := true ;
23778: LD_ADDR_OWVAR 76
23782: PUSH
23783: LD_INT 1
23785: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23786: LD_ADDR_OWVAR 31
23790: PUSH
23791: LD_INT 30
23793: PUSH
23794: LD_INT 30
23796: PUSH
23797: LD_INT 30
23799: PUSH
23800: LD_INT 30
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: ST_TO_ADDR
// un := CreateHuman ;
23809: LD_ADDR_VAR 0 3
23813: PUSH
23814: CALL_OW 44
23818: ST_TO_ADDR
// hc_noskilllimit := false ;
23819: LD_ADDR_OWVAR 76
23823: PUSH
23824: LD_INT 0
23826: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23827: LD_VAR 0 3
23831: PPUSH
23832: LD_INT 1
23834: PPUSH
23835: CALL_OW 51
// p := 0 ;
23839: LD_ADDR_VAR 0 2
23843: PUSH
23844: LD_INT 0
23846: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23847: LD_INT 35
23849: PPUSH
23850: CALL_OW 67
// p := p + 1 ;
23854: LD_ADDR_VAR 0 2
23858: PUSH
23859: LD_VAR 0 2
23863: PUSH
23864: LD_INT 1
23866: PLUS
23867: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23868: LD_VAR 0 3
23872: PPUSH
23873: CALL_OW 256
23877: PUSH
23878: LD_INT 1000
23880: LESS
23881: IFFALSE 23895
// SetLives ( un , 1000 ) ;
23883: LD_VAR 0 3
23887: PPUSH
23888: LD_INT 1000
23890: PPUSH
23891: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23895: LD_VAR 0 3
23899: PPUSH
23900: LD_INT 81
23902: PUSH
23903: LD_OWVAR 2
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 91
23914: PUSH
23915: LD_VAR 0 3
23919: PUSH
23920: LD_INT 30
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: LIST
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PPUSH
23932: CALL_OW 69
23936: PPUSH
23937: LD_VAR 0 3
23941: PPUSH
23942: CALL_OW 74
23946: PPUSH
23947: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23951: LD_VAR 0 2
23955: PUSH
23956: LD_INT 60
23958: GREATER
23959: PUSH
23960: LD_VAR 0 3
23964: PPUSH
23965: CALL_OW 301
23969: OR
23970: IFFALSE 23847
// if un then
23972: LD_VAR 0 3
23976: IFFALSE 23987
// RemoveUnit ( un ) ;
23978: LD_VAR 0 3
23982: PPUSH
23983: CALL_OW 64
// end ;
23987: PPOPN 3
23989: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23990: LD_INT 0
23992: PPUSH
// case cmd of 301 :
23993: LD_VAR 0 1
23997: PUSH
23998: LD_INT 301
24000: DOUBLE
24001: EQUAL
24002: IFTRUE 24006
24004: GO 24038
24006: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24007: LD_VAR 0 6
24011: PPUSH
24012: LD_VAR 0 7
24016: PPUSH
24017: LD_VAR 0 8
24021: PPUSH
24022: LD_VAR 0 4
24026: PPUSH
24027: LD_VAR 0 5
24031: PPUSH
24032: CALL 25239 0 5
24036: GO 24159
24038: LD_INT 302
24040: DOUBLE
24041: EQUAL
24042: IFTRUE 24046
24044: GO 24083
24046: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24047: LD_VAR 0 6
24051: PPUSH
24052: LD_VAR 0 7
24056: PPUSH
24057: LD_VAR 0 8
24061: PPUSH
24062: LD_VAR 0 9
24066: PPUSH
24067: LD_VAR 0 4
24071: PPUSH
24072: LD_VAR 0 5
24076: PPUSH
24077: CALL 25330 0 6
24081: GO 24159
24083: LD_INT 303
24085: DOUBLE
24086: EQUAL
24087: IFTRUE 24091
24089: GO 24128
24091: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24092: LD_VAR 0 6
24096: PPUSH
24097: LD_VAR 0 7
24101: PPUSH
24102: LD_VAR 0 8
24106: PPUSH
24107: LD_VAR 0 9
24111: PPUSH
24112: LD_VAR 0 4
24116: PPUSH
24117: LD_VAR 0 5
24121: PPUSH
24122: CALL 24164 0 6
24126: GO 24159
24128: LD_INT 304
24130: DOUBLE
24131: EQUAL
24132: IFTRUE 24136
24134: GO 24158
24136: POP
// hHackTeleport ( unit , x , y ) ; end ;
24137: LD_VAR 0 2
24141: PPUSH
24142: LD_VAR 0 4
24146: PPUSH
24147: LD_VAR 0 5
24151: PPUSH
24152: CALL 25923 0 3
24156: GO 24159
24158: POP
// end ;
24159: LD_VAR 0 12
24163: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24164: LD_INT 0
24166: PPUSH
24167: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24168: LD_VAR 0 1
24172: PUSH
24173: LD_INT 1
24175: LESS
24176: PUSH
24177: LD_VAR 0 1
24181: PUSH
24182: LD_INT 3
24184: GREATER
24185: OR
24186: PUSH
24187: LD_VAR 0 5
24191: PPUSH
24192: LD_VAR 0 6
24196: PPUSH
24197: CALL_OW 428
24201: OR
24202: IFFALSE 24206
// exit ;
24204: GO 24926
// uc_side := your_side ;
24206: LD_ADDR_OWVAR 20
24210: PUSH
24211: LD_OWVAR 2
24215: ST_TO_ADDR
// uc_nation := nation ;
24216: LD_ADDR_OWVAR 21
24220: PUSH
24221: LD_VAR 0 1
24225: ST_TO_ADDR
// bc_level = 1 ;
24226: LD_ADDR_OWVAR 43
24230: PUSH
24231: LD_INT 1
24233: ST_TO_ADDR
// case btype of 1 :
24234: LD_VAR 0 2
24238: PUSH
24239: LD_INT 1
24241: DOUBLE
24242: EQUAL
24243: IFTRUE 24247
24245: GO 24258
24247: POP
// bc_type := b_depot ; 2 :
24248: LD_ADDR_OWVAR 42
24252: PUSH
24253: LD_INT 0
24255: ST_TO_ADDR
24256: GO 24870
24258: LD_INT 2
24260: DOUBLE
24261: EQUAL
24262: IFTRUE 24266
24264: GO 24277
24266: POP
// bc_type := b_warehouse ; 3 :
24267: LD_ADDR_OWVAR 42
24271: PUSH
24272: LD_INT 1
24274: ST_TO_ADDR
24275: GO 24870
24277: LD_INT 3
24279: DOUBLE
24280: EQUAL
24281: IFTRUE 24285
24283: GO 24296
24285: POP
// bc_type := b_lab ; 4 .. 9 :
24286: LD_ADDR_OWVAR 42
24290: PUSH
24291: LD_INT 6
24293: ST_TO_ADDR
24294: GO 24870
24296: LD_INT 4
24298: DOUBLE
24299: GREATEREQUAL
24300: IFFALSE 24308
24302: LD_INT 9
24304: DOUBLE
24305: LESSEQUAL
24306: IFTRUE 24310
24308: GO 24362
24310: POP
// begin bc_type := b_lab_half ;
24311: LD_ADDR_OWVAR 42
24315: PUSH
24316: LD_INT 7
24318: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24319: LD_ADDR_OWVAR 44
24323: PUSH
24324: LD_INT 10
24326: PUSH
24327: LD_INT 11
24329: PUSH
24330: LD_INT 12
24332: PUSH
24333: LD_INT 15
24335: PUSH
24336: LD_INT 14
24338: PUSH
24339: LD_INT 13
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: PUSH
24350: LD_VAR 0 2
24354: PUSH
24355: LD_INT 3
24357: MINUS
24358: ARRAY
24359: ST_TO_ADDR
// end ; 10 .. 13 :
24360: GO 24870
24362: LD_INT 10
24364: DOUBLE
24365: GREATEREQUAL
24366: IFFALSE 24374
24368: LD_INT 13
24370: DOUBLE
24371: LESSEQUAL
24372: IFTRUE 24376
24374: GO 24453
24376: POP
// begin bc_type := b_lab_full ;
24377: LD_ADDR_OWVAR 42
24381: PUSH
24382: LD_INT 8
24384: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24385: LD_ADDR_OWVAR 44
24389: PUSH
24390: LD_INT 10
24392: PUSH
24393: LD_INT 12
24395: PUSH
24396: LD_INT 14
24398: PUSH
24399: LD_INT 13
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: PUSH
24408: LD_VAR 0 2
24412: PUSH
24413: LD_INT 9
24415: MINUS
24416: ARRAY
24417: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24418: LD_ADDR_OWVAR 45
24422: PUSH
24423: LD_INT 11
24425: PUSH
24426: LD_INT 15
24428: PUSH
24429: LD_INT 12
24431: PUSH
24432: LD_INT 15
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: PUSH
24441: LD_VAR 0 2
24445: PUSH
24446: LD_INT 9
24448: MINUS
24449: ARRAY
24450: ST_TO_ADDR
// end ; 14 :
24451: GO 24870
24453: LD_INT 14
24455: DOUBLE
24456: EQUAL
24457: IFTRUE 24461
24459: GO 24472
24461: POP
// bc_type := b_workshop ; 15 :
24462: LD_ADDR_OWVAR 42
24466: PUSH
24467: LD_INT 2
24469: ST_TO_ADDR
24470: GO 24870
24472: LD_INT 15
24474: DOUBLE
24475: EQUAL
24476: IFTRUE 24480
24478: GO 24491
24480: POP
// bc_type := b_factory ; 16 :
24481: LD_ADDR_OWVAR 42
24485: PUSH
24486: LD_INT 3
24488: ST_TO_ADDR
24489: GO 24870
24491: LD_INT 16
24493: DOUBLE
24494: EQUAL
24495: IFTRUE 24499
24497: GO 24510
24499: POP
// bc_type := b_ext_gun ; 17 :
24500: LD_ADDR_OWVAR 42
24504: PUSH
24505: LD_INT 17
24507: ST_TO_ADDR
24508: GO 24870
24510: LD_INT 17
24512: DOUBLE
24513: EQUAL
24514: IFTRUE 24518
24516: GO 24546
24518: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24519: LD_ADDR_OWVAR 42
24523: PUSH
24524: LD_INT 19
24526: PUSH
24527: LD_INT 23
24529: PUSH
24530: LD_INT 19
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: LIST
24537: PUSH
24538: LD_VAR 0 1
24542: ARRAY
24543: ST_TO_ADDR
24544: GO 24870
24546: LD_INT 18
24548: DOUBLE
24549: EQUAL
24550: IFTRUE 24554
24552: GO 24565
24554: POP
// bc_type := b_ext_radar ; 19 :
24555: LD_ADDR_OWVAR 42
24559: PUSH
24560: LD_INT 20
24562: ST_TO_ADDR
24563: GO 24870
24565: LD_INT 19
24567: DOUBLE
24568: EQUAL
24569: IFTRUE 24573
24571: GO 24584
24573: POP
// bc_type := b_ext_radio ; 20 :
24574: LD_ADDR_OWVAR 42
24578: PUSH
24579: LD_INT 22
24581: ST_TO_ADDR
24582: GO 24870
24584: LD_INT 20
24586: DOUBLE
24587: EQUAL
24588: IFTRUE 24592
24590: GO 24603
24592: POP
// bc_type := b_ext_siberium ; 21 :
24593: LD_ADDR_OWVAR 42
24597: PUSH
24598: LD_INT 21
24600: ST_TO_ADDR
24601: GO 24870
24603: LD_INT 21
24605: DOUBLE
24606: EQUAL
24607: IFTRUE 24611
24609: GO 24622
24611: POP
// bc_type := b_ext_computer ; 22 :
24612: LD_ADDR_OWVAR 42
24616: PUSH
24617: LD_INT 24
24619: ST_TO_ADDR
24620: GO 24870
24622: LD_INT 22
24624: DOUBLE
24625: EQUAL
24626: IFTRUE 24630
24628: GO 24641
24630: POP
// bc_type := b_ext_track ; 23 :
24631: LD_ADDR_OWVAR 42
24635: PUSH
24636: LD_INT 16
24638: ST_TO_ADDR
24639: GO 24870
24641: LD_INT 23
24643: DOUBLE
24644: EQUAL
24645: IFTRUE 24649
24647: GO 24660
24649: POP
// bc_type := b_ext_laser ; 24 :
24650: LD_ADDR_OWVAR 42
24654: PUSH
24655: LD_INT 25
24657: ST_TO_ADDR
24658: GO 24870
24660: LD_INT 24
24662: DOUBLE
24663: EQUAL
24664: IFTRUE 24668
24666: GO 24679
24668: POP
// bc_type := b_control_tower ; 25 :
24669: LD_ADDR_OWVAR 42
24673: PUSH
24674: LD_INT 36
24676: ST_TO_ADDR
24677: GO 24870
24679: LD_INT 25
24681: DOUBLE
24682: EQUAL
24683: IFTRUE 24687
24685: GO 24698
24687: POP
// bc_type := b_breastwork ; 26 :
24688: LD_ADDR_OWVAR 42
24692: PUSH
24693: LD_INT 31
24695: ST_TO_ADDR
24696: GO 24870
24698: LD_INT 26
24700: DOUBLE
24701: EQUAL
24702: IFTRUE 24706
24704: GO 24717
24706: POP
// bc_type := b_bunker ; 27 :
24707: LD_ADDR_OWVAR 42
24711: PUSH
24712: LD_INT 32
24714: ST_TO_ADDR
24715: GO 24870
24717: LD_INT 27
24719: DOUBLE
24720: EQUAL
24721: IFTRUE 24725
24723: GO 24736
24725: POP
// bc_type := b_turret ; 28 :
24726: LD_ADDR_OWVAR 42
24730: PUSH
24731: LD_INT 33
24733: ST_TO_ADDR
24734: GO 24870
24736: LD_INT 28
24738: DOUBLE
24739: EQUAL
24740: IFTRUE 24744
24742: GO 24755
24744: POP
// bc_type := b_armoury ; 29 :
24745: LD_ADDR_OWVAR 42
24749: PUSH
24750: LD_INT 4
24752: ST_TO_ADDR
24753: GO 24870
24755: LD_INT 29
24757: DOUBLE
24758: EQUAL
24759: IFTRUE 24763
24761: GO 24774
24763: POP
// bc_type := b_barracks ; 30 :
24764: LD_ADDR_OWVAR 42
24768: PUSH
24769: LD_INT 5
24771: ST_TO_ADDR
24772: GO 24870
24774: LD_INT 30
24776: DOUBLE
24777: EQUAL
24778: IFTRUE 24782
24780: GO 24793
24782: POP
// bc_type := b_solar_power ; 31 :
24783: LD_ADDR_OWVAR 42
24787: PUSH
24788: LD_INT 27
24790: ST_TO_ADDR
24791: GO 24870
24793: LD_INT 31
24795: DOUBLE
24796: EQUAL
24797: IFTRUE 24801
24799: GO 24812
24801: POP
// bc_type := b_oil_power ; 32 :
24802: LD_ADDR_OWVAR 42
24806: PUSH
24807: LD_INT 26
24809: ST_TO_ADDR
24810: GO 24870
24812: LD_INT 32
24814: DOUBLE
24815: EQUAL
24816: IFTRUE 24820
24818: GO 24831
24820: POP
// bc_type := b_siberite_power ; 33 :
24821: LD_ADDR_OWVAR 42
24825: PUSH
24826: LD_INT 28
24828: ST_TO_ADDR
24829: GO 24870
24831: LD_INT 33
24833: DOUBLE
24834: EQUAL
24835: IFTRUE 24839
24837: GO 24850
24839: POP
// bc_type := b_oil_mine ; 34 :
24840: LD_ADDR_OWVAR 42
24844: PUSH
24845: LD_INT 29
24847: ST_TO_ADDR
24848: GO 24870
24850: LD_INT 34
24852: DOUBLE
24853: EQUAL
24854: IFTRUE 24858
24856: GO 24869
24858: POP
// bc_type := b_siberite_mine ; end ;
24859: LD_ADDR_OWVAR 42
24863: PUSH
24864: LD_INT 30
24866: ST_TO_ADDR
24867: GO 24870
24869: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24870: LD_ADDR_VAR 0 8
24874: PUSH
24875: LD_VAR 0 5
24879: PPUSH
24880: LD_VAR 0 6
24884: PPUSH
24885: LD_VAR 0 3
24889: PPUSH
24890: CALL_OW 47
24894: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24895: LD_OWVAR 42
24899: PUSH
24900: LD_INT 32
24902: PUSH
24903: LD_INT 33
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: IN
24910: IFFALSE 24926
// PlaceWeaponTurret ( b , weapon ) ;
24912: LD_VAR 0 8
24916: PPUSH
24917: LD_VAR 0 4
24921: PPUSH
24922: CALL_OW 431
// end ;
24926: LD_VAR 0 7
24930: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24931: LD_INT 0
24933: PPUSH
24934: PPUSH
24935: PPUSH
24936: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24937: LD_ADDR_VAR 0 4
24941: PUSH
24942: LD_INT 22
24944: PUSH
24945: LD_OWVAR 2
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 2
24956: PUSH
24957: LD_INT 30
24959: PUSH
24960: LD_INT 0
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 30
24969: PUSH
24970: LD_INT 1
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: LIST
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PPUSH
24986: CALL_OW 69
24990: ST_TO_ADDR
// if not tmp then
24991: LD_VAR 0 4
24995: NOT
24996: IFFALSE 25000
// exit ;
24998: GO 25059
// for i in tmp do
25000: LD_ADDR_VAR 0 2
25004: PUSH
25005: LD_VAR 0 4
25009: PUSH
25010: FOR_IN
25011: IFFALSE 25057
// for j = 1 to 3 do
25013: LD_ADDR_VAR 0 3
25017: PUSH
25018: DOUBLE
25019: LD_INT 1
25021: DEC
25022: ST_TO_ADDR
25023: LD_INT 3
25025: PUSH
25026: FOR_TO
25027: IFFALSE 25053
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25029: LD_VAR 0 2
25033: PPUSH
25034: CALL_OW 274
25038: PPUSH
25039: LD_VAR 0 3
25043: PPUSH
25044: LD_INT 99999
25046: PPUSH
25047: CALL_OW 277
25051: GO 25026
25053: POP
25054: POP
25055: GO 25010
25057: POP
25058: POP
// end ;
25059: LD_VAR 0 1
25063: RET
// export function hHackSetLevel10 ; var i , j ; begin
25064: LD_INT 0
25066: PPUSH
25067: PPUSH
25068: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25069: LD_ADDR_VAR 0 2
25073: PUSH
25074: LD_INT 21
25076: PUSH
25077: LD_INT 1
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PPUSH
25084: CALL_OW 69
25088: PUSH
25089: FOR_IN
25090: IFFALSE 25142
// if IsSelected ( i ) then
25092: LD_VAR 0 2
25096: PPUSH
25097: CALL_OW 306
25101: IFFALSE 25140
// begin for j := 1 to 4 do
25103: LD_ADDR_VAR 0 3
25107: PUSH
25108: DOUBLE
25109: LD_INT 1
25111: DEC
25112: ST_TO_ADDR
25113: LD_INT 4
25115: PUSH
25116: FOR_TO
25117: IFFALSE 25138
// SetSkill ( i , j , 10 ) ;
25119: LD_VAR 0 2
25123: PPUSH
25124: LD_VAR 0 3
25128: PPUSH
25129: LD_INT 10
25131: PPUSH
25132: CALL_OW 237
25136: GO 25116
25138: POP
25139: POP
// end ;
25140: GO 25089
25142: POP
25143: POP
// end ;
25144: LD_VAR 0 1
25148: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25149: LD_INT 0
25151: PPUSH
25152: PPUSH
25153: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25154: LD_ADDR_VAR 0 2
25158: PUSH
25159: LD_INT 22
25161: PUSH
25162: LD_OWVAR 2
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 21
25173: PUSH
25174: LD_INT 1
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PPUSH
25185: CALL_OW 69
25189: PUSH
25190: FOR_IN
25191: IFFALSE 25232
// begin for j := 1 to 4 do
25193: LD_ADDR_VAR 0 3
25197: PUSH
25198: DOUBLE
25199: LD_INT 1
25201: DEC
25202: ST_TO_ADDR
25203: LD_INT 4
25205: PUSH
25206: FOR_TO
25207: IFFALSE 25228
// SetSkill ( i , j , 10 ) ;
25209: LD_VAR 0 2
25213: PPUSH
25214: LD_VAR 0 3
25218: PPUSH
25219: LD_INT 10
25221: PPUSH
25222: CALL_OW 237
25226: GO 25206
25228: POP
25229: POP
// end ;
25230: GO 25190
25232: POP
25233: POP
// end ;
25234: LD_VAR 0 1
25238: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25239: LD_INT 0
25241: PPUSH
// uc_side := your_side ;
25242: LD_ADDR_OWVAR 20
25246: PUSH
25247: LD_OWVAR 2
25251: ST_TO_ADDR
// uc_nation := nation ;
25252: LD_ADDR_OWVAR 21
25256: PUSH
25257: LD_VAR 0 1
25261: ST_TO_ADDR
// InitHc ;
25262: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25266: LD_INT 0
25268: PPUSH
25269: LD_VAR 0 2
25273: PPUSH
25274: LD_VAR 0 3
25278: PPUSH
25279: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25283: LD_VAR 0 4
25287: PPUSH
25288: LD_VAR 0 5
25292: PPUSH
25293: CALL_OW 428
25297: PUSH
25298: LD_INT 0
25300: EQUAL
25301: IFFALSE 25325
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25303: CALL_OW 44
25307: PPUSH
25308: LD_VAR 0 4
25312: PPUSH
25313: LD_VAR 0 5
25317: PPUSH
25318: LD_INT 1
25320: PPUSH
25321: CALL_OW 48
// end ;
25325: LD_VAR 0 6
25329: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25330: LD_INT 0
25332: PPUSH
25333: PPUSH
// uc_side := your_side ;
25334: LD_ADDR_OWVAR 20
25338: PUSH
25339: LD_OWVAR 2
25343: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25344: LD_VAR 0 1
25348: PUSH
25349: LD_INT 1
25351: PUSH
25352: LD_INT 2
25354: PUSH
25355: LD_INT 3
25357: PUSH
25358: LD_INT 4
25360: PUSH
25361: LD_INT 5
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: IN
25371: IFFALSE 25383
// uc_nation := nation_american else
25373: LD_ADDR_OWVAR 21
25377: PUSH
25378: LD_INT 1
25380: ST_TO_ADDR
25381: GO 25426
// if chassis in [ 11 , 12 , 13 , 14 ] then
25383: LD_VAR 0 1
25387: PUSH
25388: LD_INT 11
25390: PUSH
25391: LD_INT 12
25393: PUSH
25394: LD_INT 13
25396: PUSH
25397: LD_INT 14
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: IN
25406: IFFALSE 25418
// uc_nation := nation_arabian else
25408: LD_ADDR_OWVAR 21
25412: PUSH
25413: LD_INT 2
25415: ST_TO_ADDR
25416: GO 25426
// uc_nation := nation_russian ;
25418: LD_ADDR_OWVAR 21
25422: PUSH
25423: LD_INT 3
25425: ST_TO_ADDR
// vc_chassis := chassis ;
25426: LD_ADDR_OWVAR 37
25430: PUSH
25431: LD_VAR 0 1
25435: ST_TO_ADDR
// vc_engine := engine ;
25436: LD_ADDR_OWVAR 39
25440: PUSH
25441: LD_VAR 0 2
25445: ST_TO_ADDR
// vc_control := control ;
25446: LD_ADDR_OWVAR 38
25450: PUSH
25451: LD_VAR 0 3
25455: ST_TO_ADDR
// vc_weapon := weapon ;
25456: LD_ADDR_OWVAR 40
25460: PUSH
25461: LD_VAR 0 4
25465: ST_TO_ADDR
// un := CreateVehicle ;
25466: LD_ADDR_VAR 0 8
25470: PUSH
25471: CALL_OW 45
25475: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25476: LD_VAR 0 8
25480: PPUSH
25481: LD_INT 0
25483: PPUSH
25484: LD_INT 5
25486: PPUSH
25487: CALL_OW 12
25491: PPUSH
25492: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25496: LD_VAR 0 8
25500: PPUSH
25501: LD_VAR 0 5
25505: PPUSH
25506: LD_VAR 0 6
25510: PPUSH
25511: LD_INT 1
25513: PPUSH
25514: CALL_OW 48
// end ;
25518: LD_VAR 0 7
25522: RET
// export hInvincible ; every 1 do
25523: GO 25525
25525: DISABLE
// hInvincible := [ ] ;
25526: LD_ADDR_EXP 113
25530: PUSH
25531: EMPTY
25532: ST_TO_ADDR
25533: END
// every 10 do var i ;
25534: GO 25536
25536: DISABLE
25537: LD_INT 0
25539: PPUSH
// begin enable ;
25540: ENABLE
// if not hInvincible then
25541: LD_EXP 113
25545: NOT
25546: IFFALSE 25550
// exit ;
25548: GO 25594
// for i in hInvincible do
25550: LD_ADDR_VAR 0 1
25554: PUSH
25555: LD_EXP 113
25559: PUSH
25560: FOR_IN
25561: IFFALSE 25592
// if GetLives ( i ) < 1000 then
25563: LD_VAR 0 1
25567: PPUSH
25568: CALL_OW 256
25572: PUSH
25573: LD_INT 1000
25575: LESS
25576: IFFALSE 25590
// SetLives ( i , 1000 ) ;
25578: LD_VAR 0 1
25582: PPUSH
25583: LD_INT 1000
25585: PPUSH
25586: CALL_OW 234
25590: GO 25560
25592: POP
25593: POP
// end ;
25594: PPOPN 1
25596: END
// export function hHackInvincible ; var i ; begin
25597: LD_INT 0
25599: PPUSH
25600: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25601: LD_ADDR_VAR 0 2
25605: PUSH
25606: LD_INT 2
25608: PUSH
25609: LD_INT 21
25611: PUSH
25612: LD_INT 1
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 21
25621: PUSH
25622: LD_INT 2
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: LIST
25633: PPUSH
25634: CALL_OW 69
25638: PUSH
25639: FOR_IN
25640: IFFALSE 25701
// if IsSelected ( i ) then
25642: LD_VAR 0 2
25646: PPUSH
25647: CALL_OW 306
25651: IFFALSE 25699
// begin if i in hInvincible then
25653: LD_VAR 0 2
25657: PUSH
25658: LD_EXP 113
25662: IN
25663: IFFALSE 25683
// hInvincible := hInvincible diff i else
25665: LD_ADDR_EXP 113
25669: PUSH
25670: LD_EXP 113
25674: PUSH
25675: LD_VAR 0 2
25679: DIFF
25680: ST_TO_ADDR
25681: GO 25699
// hInvincible := hInvincible union i ;
25683: LD_ADDR_EXP 113
25687: PUSH
25688: LD_EXP 113
25692: PUSH
25693: LD_VAR 0 2
25697: UNION
25698: ST_TO_ADDR
// end ;
25699: GO 25639
25701: POP
25702: POP
// end ;
25703: LD_VAR 0 1
25707: RET
// export function hHackInvisible ; var i , j ; begin
25708: LD_INT 0
25710: PPUSH
25711: PPUSH
25712: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25713: LD_ADDR_VAR 0 2
25717: PUSH
25718: LD_INT 21
25720: PUSH
25721: LD_INT 1
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PPUSH
25728: CALL_OW 69
25732: PUSH
25733: FOR_IN
25734: IFFALSE 25758
// if IsSelected ( i ) then
25736: LD_VAR 0 2
25740: PPUSH
25741: CALL_OW 306
25745: IFFALSE 25756
// ComForceInvisible ( i ) ;
25747: LD_VAR 0 2
25751: PPUSH
25752: CALL_OW 496
25756: GO 25733
25758: POP
25759: POP
// end ;
25760: LD_VAR 0 1
25764: RET
// export function hHackChangeYourSide ; begin
25765: LD_INT 0
25767: PPUSH
// if your_side = 8 then
25768: LD_OWVAR 2
25772: PUSH
25773: LD_INT 8
25775: EQUAL
25776: IFFALSE 25788
// your_side := 0 else
25778: LD_ADDR_OWVAR 2
25782: PUSH
25783: LD_INT 0
25785: ST_TO_ADDR
25786: GO 25802
// your_side := your_side + 1 ;
25788: LD_ADDR_OWVAR 2
25792: PUSH
25793: LD_OWVAR 2
25797: PUSH
25798: LD_INT 1
25800: PLUS
25801: ST_TO_ADDR
// end ;
25802: LD_VAR 0 1
25806: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25807: LD_INT 0
25809: PPUSH
25810: PPUSH
25811: PPUSH
// for i in all_units do
25812: LD_ADDR_VAR 0 2
25816: PUSH
25817: LD_OWVAR 3
25821: PUSH
25822: FOR_IN
25823: IFFALSE 25901
// if IsSelected ( i ) then
25825: LD_VAR 0 2
25829: PPUSH
25830: CALL_OW 306
25834: IFFALSE 25899
// begin j := GetSide ( i ) ;
25836: LD_ADDR_VAR 0 3
25840: PUSH
25841: LD_VAR 0 2
25845: PPUSH
25846: CALL_OW 255
25850: ST_TO_ADDR
// if j = 8 then
25851: LD_VAR 0 3
25855: PUSH
25856: LD_INT 8
25858: EQUAL
25859: IFFALSE 25871
// j := 0 else
25861: LD_ADDR_VAR 0 3
25865: PUSH
25866: LD_INT 0
25868: ST_TO_ADDR
25869: GO 25885
// j := j + 1 ;
25871: LD_ADDR_VAR 0 3
25875: PUSH
25876: LD_VAR 0 3
25880: PUSH
25881: LD_INT 1
25883: PLUS
25884: ST_TO_ADDR
// SetSide ( i , j ) ;
25885: LD_VAR 0 2
25889: PPUSH
25890: LD_VAR 0 3
25894: PPUSH
25895: CALL_OW 235
// end ;
25899: GO 25822
25901: POP
25902: POP
// end ;
25903: LD_VAR 0 1
25907: RET
// export function hHackFog ; begin
25908: LD_INT 0
25910: PPUSH
// FogOff ( true ) ;
25911: LD_INT 1
25913: PPUSH
25914: CALL_OW 344
// end ;
25918: LD_VAR 0 1
25922: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25923: LD_INT 0
25925: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25926: LD_VAR 0 1
25930: PPUSH
25931: LD_VAR 0 2
25935: PPUSH
25936: LD_VAR 0 3
25940: PPUSH
25941: LD_INT 1
25943: PPUSH
25944: LD_INT 1
25946: PPUSH
25947: CALL_OW 483
// CenterOnXY ( x , y ) ;
25951: LD_VAR 0 2
25955: PPUSH
25956: LD_VAR 0 3
25960: PPUSH
25961: CALL_OW 84
// end ; end_of_file
25965: LD_VAR 0 4
25969: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25970: LD_INT 0
25972: PPUSH
25973: PPUSH
25974: PPUSH
25975: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25976: LD_VAR 0 1
25980: PPUSH
25981: CALL_OW 264
25985: PUSH
25986: LD_EXP 47
25990: EQUAL
25991: IFFALSE 26063
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25993: LD_INT 68
25995: PPUSH
25996: LD_VAR 0 1
26000: PPUSH
26001: CALL_OW 255
26005: PPUSH
26006: CALL_OW 321
26010: PUSH
26011: LD_INT 2
26013: EQUAL
26014: IFFALSE 26026
// eff := 70 else
26016: LD_ADDR_VAR 0 4
26020: PUSH
26021: LD_INT 70
26023: ST_TO_ADDR
26024: GO 26034
// eff := 30 ;
26026: LD_ADDR_VAR 0 4
26030: PUSH
26031: LD_INT 30
26033: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26034: LD_VAR 0 1
26038: PPUSH
26039: CALL_OW 250
26043: PPUSH
26044: LD_VAR 0 1
26048: PPUSH
26049: CALL_OW 251
26053: PPUSH
26054: LD_VAR 0 4
26058: PPUSH
26059: CALL_OW 495
// end ; end ;
26063: LD_VAR 0 2
26067: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26068: LD_INT 0
26070: PPUSH
// end ;
26071: LD_VAR 0 4
26075: RET
// export function SOS_Command ( cmd ) ; begin
26076: LD_INT 0
26078: PPUSH
// end ;
26079: LD_VAR 0 2
26083: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26084: LD_INT 0
26086: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26087: LD_VAR 0 1
26091: PUSH
26092: LD_INT 250
26094: EQUAL
26095: PUSH
26096: LD_VAR 0 2
26100: PPUSH
26101: CALL_OW 264
26105: PUSH
26106: LD_EXP 50
26110: EQUAL
26111: AND
26112: IFFALSE 26133
// MinerPlaceMine ( unit , x , y ) ;
26114: LD_VAR 0 2
26118: PPUSH
26119: LD_VAR 0 4
26123: PPUSH
26124: LD_VAR 0 5
26128: PPUSH
26129: CALL 28474 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26133: LD_VAR 0 1
26137: PUSH
26138: LD_INT 251
26140: EQUAL
26141: PUSH
26142: LD_VAR 0 2
26146: PPUSH
26147: CALL_OW 264
26151: PUSH
26152: LD_EXP 50
26156: EQUAL
26157: AND
26158: IFFALSE 26179
// MinerDetonateMine ( unit , x , y ) ;
26160: LD_VAR 0 2
26164: PPUSH
26165: LD_VAR 0 4
26169: PPUSH
26170: LD_VAR 0 5
26174: PPUSH
26175: CALL 28751 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26179: LD_VAR 0 1
26183: PUSH
26184: LD_INT 252
26186: EQUAL
26187: PUSH
26188: LD_VAR 0 2
26192: PPUSH
26193: CALL_OW 264
26197: PUSH
26198: LD_EXP 50
26202: EQUAL
26203: AND
26204: IFFALSE 26225
// MinerCreateMinefield ( unit , x , y ) ;
26206: LD_VAR 0 2
26210: PPUSH
26211: LD_VAR 0 4
26215: PPUSH
26216: LD_VAR 0 5
26220: PPUSH
26221: CALL 29168 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26225: LD_VAR 0 1
26229: PUSH
26230: LD_INT 253
26232: EQUAL
26233: PUSH
26234: LD_VAR 0 2
26238: PPUSH
26239: CALL_OW 257
26243: PUSH
26244: LD_INT 5
26246: EQUAL
26247: AND
26248: IFFALSE 26269
// ComBinocular ( unit , x , y ) ;
26250: LD_VAR 0 2
26254: PPUSH
26255: LD_VAR 0 4
26259: PPUSH
26260: LD_VAR 0 5
26264: PPUSH
26265: CALL 29539 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26269: LD_VAR 0 1
26273: PUSH
26274: LD_INT 254
26276: EQUAL
26277: PUSH
26278: LD_VAR 0 2
26282: PPUSH
26283: CALL_OW 264
26287: PUSH
26288: LD_EXP 45
26292: EQUAL
26293: AND
26294: PUSH
26295: LD_VAR 0 3
26299: PPUSH
26300: CALL_OW 263
26304: PUSH
26305: LD_INT 3
26307: EQUAL
26308: AND
26309: IFFALSE 26325
// HackDestroyVehicle ( unit , selectedUnit ) ;
26311: LD_VAR 0 2
26315: PPUSH
26316: LD_VAR 0 3
26320: PPUSH
26321: CALL 27834 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26325: LD_VAR 0 1
26329: PUSH
26330: LD_INT 255
26332: EQUAL
26333: PUSH
26334: LD_VAR 0 2
26338: PPUSH
26339: CALL_OW 264
26343: PUSH
26344: LD_INT 14
26346: PUSH
26347: LD_INT 53
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: IN
26354: AND
26355: PUSH
26356: LD_VAR 0 4
26360: PPUSH
26361: LD_VAR 0 5
26365: PPUSH
26366: CALL_OW 488
26370: AND
26371: IFFALSE 26395
// CutTreeXYR ( unit , x , y , 12 ) ;
26373: LD_VAR 0 2
26377: PPUSH
26378: LD_VAR 0 4
26382: PPUSH
26383: LD_VAR 0 5
26387: PPUSH
26388: LD_INT 12
26390: PPUSH
26391: CALL 26400 0 4
// end ;
26395: LD_VAR 0 6
26399: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26400: LD_INT 0
26402: PPUSH
26403: PPUSH
26404: PPUSH
26405: PPUSH
26406: PPUSH
26407: PPUSH
26408: PPUSH
26409: PPUSH
26410: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26411: LD_VAR 0 1
26415: NOT
26416: PUSH
26417: LD_VAR 0 2
26421: PPUSH
26422: LD_VAR 0 3
26426: PPUSH
26427: CALL_OW 488
26431: NOT
26432: OR
26433: PUSH
26434: LD_VAR 0 4
26438: NOT
26439: OR
26440: IFFALSE 26444
// exit ;
26442: GO 26784
// list := [ ] ;
26444: LD_ADDR_VAR 0 13
26448: PUSH
26449: EMPTY
26450: ST_TO_ADDR
// if x - r < 0 then
26451: LD_VAR 0 2
26455: PUSH
26456: LD_VAR 0 4
26460: MINUS
26461: PUSH
26462: LD_INT 0
26464: LESS
26465: IFFALSE 26477
// min_x := 0 else
26467: LD_ADDR_VAR 0 7
26471: PUSH
26472: LD_INT 0
26474: ST_TO_ADDR
26475: GO 26493
// min_x := x - r ;
26477: LD_ADDR_VAR 0 7
26481: PUSH
26482: LD_VAR 0 2
26486: PUSH
26487: LD_VAR 0 4
26491: MINUS
26492: ST_TO_ADDR
// if y - r < 0 then
26493: LD_VAR 0 3
26497: PUSH
26498: LD_VAR 0 4
26502: MINUS
26503: PUSH
26504: LD_INT 0
26506: LESS
26507: IFFALSE 26519
// min_y := 0 else
26509: LD_ADDR_VAR 0 8
26513: PUSH
26514: LD_INT 0
26516: ST_TO_ADDR
26517: GO 26535
// min_y := y - r ;
26519: LD_ADDR_VAR 0 8
26523: PUSH
26524: LD_VAR 0 3
26528: PUSH
26529: LD_VAR 0 4
26533: MINUS
26534: ST_TO_ADDR
// max_x := x + r ;
26535: LD_ADDR_VAR 0 9
26539: PUSH
26540: LD_VAR 0 2
26544: PUSH
26545: LD_VAR 0 4
26549: PLUS
26550: ST_TO_ADDR
// max_y := y + r ;
26551: LD_ADDR_VAR 0 10
26555: PUSH
26556: LD_VAR 0 3
26560: PUSH
26561: LD_VAR 0 4
26565: PLUS
26566: ST_TO_ADDR
// for _x = min_x to max_x do
26567: LD_ADDR_VAR 0 11
26571: PUSH
26572: DOUBLE
26573: LD_VAR 0 7
26577: DEC
26578: ST_TO_ADDR
26579: LD_VAR 0 9
26583: PUSH
26584: FOR_TO
26585: IFFALSE 26702
// for _y = min_y to max_y do
26587: LD_ADDR_VAR 0 12
26591: PUSH
26592: DOUBLE
26593: LD_VAR 0 8
26597: DEC
26598: ST_TO_ADDR
26599: LD_VAR 0 10
26603: PUSH
26604: FOR_TO
26605: IFFALSE 26698
// begin if not ValidHex ( _x , _y ) then
26607: LD_VAR 0 11
26611: PPUSH
26612: LD_VAR 0 12
26616: PPUSH
26617: CALL_OW 488
26621: NOT
26622: IFFALSE 26626
// continue ;
26624: GO 26604
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26626: LD_VAR 0 11
26630: PPUSH
26631: LD_VAR 0 12
26635: PPUSH
26636: CALL_OW 351
26640: PUSH
26641: LD_VAR 0 11
26645: PPUSH
26646: LD_VAR 0 12
26650: PPUSH
26651: CALL_OW 554
26655: AND
26656: IFFALSE 26696
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26658: LD_ADDR_VAR 0 13
26662: PUSH
26663: LD_VAR 0 13
26667: PPUSH
26668: LD_VAR 0 13
26672: PUSH
26673: LD_INT 1
26675: PLUS
26676: PPUSH
26677: LD_VAR 0 11
26681: PUSH
26682: LD_VAR 0 12
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PPUSH
26691: CALL_OW 2
26695: ST_TO_ADDR
// end ;
26696: GO 26604
26698: POP
26699: POP
26700: GO 26584
26702: POP
26703: POP
// if not list then
26704: LD_VAR 0 13
26708: NOT
26709: IFFALSE 26713
// exit ;
26711: GO 26784
// for i in list do
26713: LD_ADDR_VAR 0 6
26717: PUSH
26718: LD_VAR 0 13
26722: PUSH
26723: FOR_IN
26724: IFFALSE 26782
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26726: LD_VAR 0 1
26730: PPUSH
26731: LD_STRING M
26733: PUSH
26734: LD_VAR 0 6
26738: PUSH
26739: LD_INT 1
26741: ARRAY
26742: PUSH
26743: LD_VAR 0 6
26747: PUSH
26748: LD_INT 2
26750: ARRAY
26751: PUSH
26752: LD_INT 0
26754: PUSH
26755: LD_INT 0
26757: PUSH
26758: LD_INT 0
26760: PUSH
26761: LD_INT 0
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: PUSH
26773: EMPTY
26774: LIST
26775: PPUSH
26776: CALL_OW 447
26780: GO 26723
26782: POP
26783: POP
// end ;
26784: LD_VAR 0 5
26788: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26789: LD_EXP 114
26793: NOT
26794: IFFALSE 26844
26796: GO 26798
26798: DISABLE
// begin initHack := true ;
26799: LD_ADDR_EXP 114
26803: PUSH
26804: LD_INT 1
26806: ST_TO_ADDR
// hackTanks := [ ] ;
26807: LD_ADDR_EXP 115
26811: PUSH
26812: EMPTY
26813: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26814: LD_ADDR_EXP 116
26818: PUSH
26819: EMPTY
26820: ST_TO_ADDR
// hackLimit := 3 ;
26821: LD_ADDR_EXP 117
26825: PUSH
26826: LD_INT 3
26828: ST_TO_ADDR
// hackDist := 12 ;
26829: LD_ADDR_EXP 118
26833: PUSH
26834: LD_INT 12
26836: ST_TO_ADDR
// hackCounter := [ ] ;
26837: LD_ADDR_EXP 119
26841: PUSH
26842: EMPTY
26843: ST_TO_ADDR
// end ;
26844: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26845: LD_EXP 114
26849: PUSH
26850: LD_INT 34
26852: PUSH
26853: LD_EXP 45
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PPUSH
26862: CALL_OW 69
26866: AND
26867: IFFALSE 27122
26869: GO 26871
26871: DISABLE
26872: LD_INT 0
26874: PPUSH
26875: PPUSH
// begin enable ;
26876: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26877: LD_ADDR_VAR 0 1
26881: PUSH
26882: LD_INT 34
26884: PUSH
26885: LD_EXP 45
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PPUSH
26894: CALL_OW 69
26898: PUSH
26899: FOR_IN
26900: IFFALSE 27120
// begin if not i in hackTanks then
26902: LD_VAR 0 1
26906: PUSH
26907: LD_EXP 115
26911: IN
26912: NOT
26913: IFFALSE 26996
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26915: LD_ADDR_EXP 115
26919: PUSH
26920: LD_EXP 115
26924: PPUSH
26925: LD_EXP 115
26929: PUSH
26930: LD_INT 1
26932: PLUS
26933: PPUSH
26934: LD_VAR 0 1
26938: PPUSH
26939: CALL_OW 1
26943: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26944: LD_ADDR_EXP 116
26948: PUSH
26949: LD_EXP 116
26953: PPUSH
26954: LD_EXP 116
26958: PUSH
26959: LD_INT 1
26961: PLUS
26962: PPUSH
26963: EMPTY
26964: PPUSH
26965: CALL_OW 1
26969: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26970: LD_ADDR_EXP 119
26974: PUSH
26975: LD_EXP 119
26979: PPUSH
26980: LD_EXP 119
26984: PUSH
26985: LD_INT 1
26987: PLUS
26988: PPUSH
26989: EMPTY
26990: PPUSH
26991: CALL_OW 1
26995: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26996: LD_VAR 0 1
27000: PPUSH
27001: CALL_OW 302
27005: NOT
27006: IFFALSE 27019
// begin HackUnlinkAll ( i ) ;
27008: LD_VAR 0 1
27012: PPUSH
27013: CALL 27125 0 1
// continue ;
27017: GO 26899
// end ; HackCheckCapturedStatus ( i ) ;
27019: LD_VAR 0 1
27023: PPUSH
27024: CALL 27568 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27028: LD_ADDR_VAR 0 2
27032: PUSH
27033: LD_INT 81
27035: PUSH
27036: LD_VAR 0 1
27040: PPUSH
27041: CALL_OW 255
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 33
27052: PUSH
27053: LD_INT 3
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 91
27062: PUSH
27063: LD_VAR 0 1
27067: PUSH
27068: LD_EXP 118
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 50
27080: PUSH
27081: EMPTY
27082: LIST
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: PPUSH
27090: CALL_OW 69
27094: ST_TO_ADDR
// if not tmp then
27095: LD_VAR 0 2
27099: NOT
27100: IFFALSE 27104
// continue ;
27102: GO 26899
// HackLink ( i , tmp ) ;
27104: LD_VAR 0 1
27108: PPUSH
27109: LD_VAR 0 2
27113: PPUSH
27114: CALL 27261 0 2
// end ;
27118: GO 26899
27120: POP
27121: POP
// end ;
27122: PPOPN 2
27124: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27125: LD_INT 0
27127: PPUSH
27128: PPUSH
27129: PPUSH
// if not hack in hackTanks then
27130: LD_VAR 0 1
27134: PUSH
27135: LD_EXP 115
27139: IN
27140: NOT
27141: IFFALSE 27145
// exit ;
27143: GO 27256
// index := GetElementIndex ( hackTanks , hack ) ;
27145: LD_ADDR_VAR 0 4
27149: PUSH
27150: LD_EXP 115
27154: PPUSH
27155: LD_VAR 0 1
27159: PPUSH
27160: CALL 34690 0 2
27164: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27165: LD_EXP 116
27169: PUSH
27170: LD_VAR 0 4
27174: ARRAY
27175: IFFALSE 27256
// begin for i in hackTanksCaptured [ index ] do
27177: LD_ADDR_VAR 0 3
27181: PUSH
27182: LD_EXP 116
27186: PUSH
27187: LD_VAR 0 4
27191: ARRAY
27192: PUSH
27193: FOR_IN
27194: IFFALSE 27220
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27196: LD_VAR 0 3
27200: PUSH
27201: LD_INT 1
27203: ARRAY
27204: PPUSH
27205: LD_VAR 0 3
27209: PUSH
27210: LD_INT 2
27212: ARRAY
27213: PPUSH
27214: CALL_OW 235
27218: GO 27193
27220: POP
27221: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27222: LD_ADDR_EXP 116
27226: PUSH
27227: LD_EXP 116
27231: PPUSH
27232: LD_VAR 0 4
27236: PPUSH
27237: EMPTY
27238: PPUSH
27239: CALL_OW 1
27243: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27244: LD_VAR 0 1
27248: PPUSH
27249: LD_INT 0
27251: PPUSH
27252: CALL_OW 505
// end ; end ;
27256: LD_VAR 0 2
27260: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27261: LD_INT 0
27263: PPUSH
27264: PPUSH
27265: PPUSH
// if not hack in hackTanks or not vehicles then
27266: LD_VAR 0 1
27270: PUSH
27271: LD_EXP 115
27275: IN
27276: NOT
27277: PUSH
27278: LD_VAR 0 2
27282: NOT
27283: OR
27284: IFFALSE 27288
// exit ;
27286: GO 27563
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27288: LD_ADDR_VAR 0 2
27292: PUSH
27293: LD_VAR 0 1
27297: PPUSH
27298: LD_VAR 0 2
27302: PPUSH
27303: LD_INT 1
27305: PPUSH
27306: LD_INT 1
27308: PPUSH
27309: CALL 35340 0 4
27313: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27314: LD_ADDR_VAR 0 5
27318: PUSH
27319: LD_EXP 115
27323: PPUSH
27324: LD_VAR 0 1
27328: PPUSH
27329: CALL 34690 0 2
27333: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27334: LD_EXP 116
27338: PUSH
27339: LD_VAR 0 5
27343: ARRAY
27344: PUSH
27345: LD_EXP 117
27349: LESS
27350: IFFALSE 27539
// begin for i := 1 to vehicles do
27352: LD_ADDR_VAR 0 4
27356: PUSH
27357: DOUBLE
27358: LD_INT 1
27360: DEC
27361: ST_TO_ADDR
27362: LD_VAR 0 2
27366: PUSH
27367: FOR_TO
27368: IFFALSE 27537
// begin if hackTanksCaptured [ index ] = hackLimit then
27370: LD_EXP 116
27374: PUSH
27375: LD_VAR 0 5
27379: ARRAY
27380: PUSH
27381: LD_EXP 117
27385: EQUAL
27386: IFFALSE 27390
// break ;
27388: GO 27537
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27390: LD_ADDR_EXP 119
27394: PUSH
27395: LD_EXP 119
27399: PPUSH
27400: LD_VAR 0 5
27404: PPUSH
27405: LD_EXP 119
27409: PUSH
27410: LD_VAR 0 5
27414: ARRAY
27415: PUSH
27416: LD_INT 1
27418: PLUS
27419: PPUSH
27420: CALL_OW 1
27424: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27425: LD_ADDR_EXP 116
27429: PUSH
27430: LD_EXP 116
27434: PPUSH
27435: LD_VAR 0 5
27439: PUSH
27440: LD_EXP 116
27444: PUSH
27445: LD_VAR 0 5
27449: ARRAY
27450: PUSH
27451: LD_INT 1
27453: PLUS
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PPUSH
27459: LD_VAR 0 2
27463: PUSH
27464: LD_VAR 0 4
27468: ARRAY
27469: PUSH
27470: LD_VAR 0 2
27474: PUSH
27475: LD_VAR 0 4
27479: ARRAY
27480: PPUSH
27481: CALL_OW 255
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PPUSH
27490: CALL 34905 0 3
27494: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27495: LD_VAR 0 2
27499: PUSH
27500: LD_VAR 0 4
27504: ARRAY
27505: PPUSH
27506: LD_VAR 0 1
27510: PPUSH
27511: CALL_OW 255
27515: PPUSH
27516: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27520: LD_VAR 0 2
27524: PUSH
27525: LD_VAR 0 4
27529: ARRAY
27530: PPUSH
27531: CALL_OW 141
// end ;
27535: GO 27367
27537: POP
27538: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27539: LD_VAR 0 1
27543: PPUSH
27544: LD_EXP 116
27548: PUSH
27549: LD_VAR 0 5
27553: ARRAY
27554: PUSH
27555: LD_INT 0
27557: PLUS
27558: PPUSH
27559: CALL_OW 505
// end ;
27563: LD_VAR 0 3
27567: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27568: LD_INT 0
27570: PPUSH
27571: PPUSH
27572: PPUSH
27573: PPUSH
// if not hack in hackTanks then
27574: LD_VAR 0 1
27578: PUSH
27579: LD_EXP 115
27583: IN
27584: NOT
27585: IFFALSE 27589
// exit ;
27587: GO 27829
// index := GetElementIndex ( hackTanks , hack ) ;
27589: LD_ADDR_VAR 0 4
27593: PUSH
27594: LD_EXP 115
27598: PPUSH
27599: LD_VAR 0 1
27603: PPUSH
27604: CALL 34690 0 2
27608: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27609: LD_ADDR_VAR 0 3
27613: PUSH
27614: DOUBLE
27615: LD_EXP 116
27619: PUSH
27620: LD_VAR 0 4
27624: ARRAY
27625: INC
27626: ST_TO_ADDR
27627: LD_INT 1
27629: PUSH
27630: FOR_DOWNTO
27631: IFFALSE 27803
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27633: LD_ADDR_VAR 0 5
27637: PUSH
27638: LD_EXP 116
27642: PUSH
27643: LD_VAR 0 4
27647: ARRAY
27648: PUSH
27649: LD_VAR 0 3
27653: ARRAY
27654: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27655: LD_VAR 0 5
27659: PUSH
27660: LD_INT 1
27662: ARRAY
27663: PPUSH
27664: CALL_OW 302
27668: NOT
27669: PUSH
27670: LD_VAR 0 5
27674: PUSH
27675: LD_INT 1
27677: ARRAY
27678: PPUSH
27679: CALL_OW 255
27683: PUSH
27684: LD_VAR 0 1
27688: PPUSH
27689: CALL_OW 255
27693: NONEQUAL
27694: OR
27695: IFFALSE 27801
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27697: LD_VAR 0 5
27701: PUSH
27702: LD_INT 1
27704: ARRAY
27705: PPUSH
27706: CALL_OW 305
27710: PUSH
27711: LD_VAR 0 5
27715: PUSH
27716: LD_INT 1
27718: ARRAY
27719: PPUSH
27720: CALL_OW 255
27724: PUSH
27725: LD_VAR 0 1
27729: PPUSH
27730: CALL_OW 255
27734: EQUAL
27735: AND
27736: IFFALSE 27760
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27738: LD_VAR 0 5
27742: PUSH
27743: LD_INT 1
27745: ARRAY
27746: PPUSH
27747: LD_VAR 0 5
27751: PUSH
27752: LD_INT 2
27754: ARRAY
27755: PPUSH
27756: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27760: LD_ADDR_EXP 116
27764: PUSH
27765: LD_EXP 116
27769: PPUSH
27770: LD_VAR 0 4
27774: PPUSH
27775: LD_EXP 116
27779: PUSH
27780: LD_VAR 0 4
27784: ARRAY
27785: PPUSH
27786: LD_VAR 0 3
27790: PPUSH
27791: CALL_OW 3
27795: PPUSH
27796: CALL_OW 1
27800: ST_TO_ADDR
// end ; end ;
27801: GO 27630
27803: POP
27804: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27805: LD_VAR 0 1
27809: PPUSH
27810: LD_EXP 116
27814: PUSH
27815: LD_VAR 0 4
27819: ARRAY
27820: PUSH
27821: LD_INT 0
27823: PLUS
27824: PPUSH
27825: CALL_OW 505
// end ;
27829: LD_VAR 0 2
27833: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27834: LD_INT 0
27836: PPUSH
27837: PPUSH
27838: PPUSH
27839: PPUSH
// if not hack in hackTanks then
27840: LD_VAR 0 1
27844: PUSH
27845: LD_EXP 115
27849: IN
27850: NOT
27851: IFFALSE 27855
// exit ;
27853: GO 27940
// index := GetElementIndex ( hackTanks , hack ) ;
27855: LD_ADDR_VAR 0 5
27859: PUSH
27860: LD_EXP 115
27864: PPUSH
27865: LD_VAR 0 1
27869: PPUSH
27870: CALL 34690 0 2
27874: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27875: LD_ADDR_VAR 0 4
27879: PUSH
27880: DOUBLE
27881: LD_INT 1
27883: DEC
27884: ST_TO_ADDR
27885: LD_EXP 116
27889: PUSH
27890: LD_VAR 0 5
27894: ARRAY
27895: PUSH
27896: FOR_TO
27897: IFFALSE 27938
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27899: LD_EXP 116
27903: PUSH
27904: LD_VAR 0 5
27908: ARRAY
27909: PUSH
27910: LD_VAR 0 4
27914: ARRAY
27915: PUSH
27916: LD_INT 1
27918: ARRAY
27919: PUSH
27920: LD_VAR 0 2
27924: EQUAL
27925: IFFALSE 27936
// KillUnit ( vehicle ) ;
27927: LD_VAR 0 2
27931: PPUSH
27932: CALL_OW 66
27936: GO 27896
27938: POP
27939: POP
// end ;
27940: LD_VAR 0 3
27944: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27945: LD_EXP 120
27949: NOT
27950: IFFALSE 27985
27952: GO 27954
27954: DISABLE
// begin initMiner := true ;
27955: LD_ADDR_EXP 120
27959: PUSH
27960: LD_INT 1
27962: ST_TO_ADDR
// minersList := [ ] ;
27963: LD_ADDR_EXP 121
27967: PUSH
27968: EMPTY
27969: ST_TO_ADDR
// minerMinesList := [ ] ;
27970: LD_ADDR_EXP 122
27974: PUSH
27975: EMPTY
27976: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27977: LD_ADDR_EXP 123
27981: PUSH
27982: LD_INT 5
27984: ST_TO_ADDR
// end ;
27985: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27986: LD_EXP 120
27990: PUSH
27991: LD_INT 34
27993: PUSH
27994: LD_EXP 50
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PPUSH
28003: CALL_OW 69
28007: AND
28008: IFFALSE 28471
28010: GO 28012
28012: DISABLE
28013: LD_INT 0
28015: PPUSH
28016: PPUSH
28017: PPUSH
28018: PPUSH
// begin enable ;
28019: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28020: LD_ADDR_VAR 0 1
28024: PUSH
28025: LD_INT 34
28027: PUSH
28028: LD_EXP 50
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PPUSH
28037: CALL_OW 69
28041: PUSH
28042: FOR_IN
28043: IFFALSE 28115
// begin if not i in minersList then
28045: LD_VAR 0 1
28049: PUSH
28050: LD_EXP 121
28054: IN
28055: NOT
28056: IFFALSE 28113
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28058: LD_ADDR_EXP 121
28062: PUSH
28063: LD_EXP 121
28067: PPUSH
28068: LD_EXP 121
28072: PUSH
28073: LD_INT 1
28075: PLUS
28076: PPUSH
28077: LD_VAR 0 1
28081: PPUSH
28082: CALL_OW 1
28086: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28087: LD_ADDR_EXP 122
28091: PUSH
28092: LD_EXP 122
28096: PPUSH
28097: LD_EXP 122
28101: PUSH
28102: LD_INT 1
28104: PLUS
28105: PPUSH
28106: EMPTY
28107: PPUSH
28108: CALL_OW 1
28112: ST_TO_ADDR
// end end ;
28113: GO 28042
28115: POP
28116: POP
// for i := minerMinesList downto 1 do
28117: LD_ADDR_VAR 0 1
28121: PUSH
28122: DOUBLE
28123: LD_EXP 122
28127: INC
28128: ST_TO_ADDR
28129: LD_INT 1
28131: PUSH
28132: FOR_DOWNTO
28133: IFFALSE 28469
// begin if IsLive ( minersList [ i ] ) then
28135: LD_EXP 121
28139: PUSH
28140: LD_VAR 0 1
28144: ARRAY
28145: PPUSH
28146: CALL_OW 300
28150: IFFALSE 28178
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28152: LD_EXP 121
28156: PUSH
28157: LD_VAR 0 1
28161: ARRAY
28162: PPUSH
28163: LD_EXP 122
28167: PUSH
28168: LD_VAR 0 1
28172: ARRAY
28173: PPUSH
28174: CALL_OW 505
// if not minerMinesList [ i ] then
28178: LD_EXP 122
28182: PUSH
28183: LD_VAR 0 1
28187: ARRAY
28188: NOT
28189: IFFALSE 28193
// continue ;
28191: GO 28132
// for j := minerMinesList [ i ] downto 1 do
28193: LD_ADDR_VAR 0 2
28197: PUSH
28198: DOUBLE
28199: LD_EXP 122
28203: PUSH
28204: LD_VAR 0 1
28208: ARRAY
28209: INC
28210: ST_TO_ADDR
28211: LD_INT 1
28213: PUSH
28214: FOR_DOWNTO
28215: IFFALSE 28465
// begin side := GetSide ( minersList [ i ] ) ;
28217: LD_ADDR_VAR 0 3
28221: PUSH
28222: LD_EXP 121
28226: PUSH
28227: LD_VAR 0 1
28231: ARRAY
28232: PPUSH
28233: CALL_OW 255
28237: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28238: LD_ADDR_VAR 0 4
28242: PUSH
28243: LD_EXP 122
28247: PUSH
28248: LD_VAR 0 1
28252: ARRAY
28253: PUSH
28254: LD_VAR 0 2
28258: ARRAY
28259: PUSH
28260: LD_INT 1
28262: ARRAY
28263: PPUSH
28264: LD_EXP 122
28268: PUSH
28269: LD_VAR 0 1
28273: ARRAY
28274: PUSH
28275: LD_VAR 0 2
28279: ARRAY
28280: PUSH
28281: LD_INT 2
28283: ARRAY
28284: PPUSH
28285: CALL_OW 428
28289: ST_TO_ADDR
// if not tmp then
28290: LD_VAR 0 4
28294: NOT
28295: IFFALSE 28299
// continue ;
28297: GO 28214
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28299: LD_VAR 0 4
28303: PUSH
28304: LD_INT 81
28306: PUSH
28307: LD_VAR 0 3
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PPUSH
28316: CALL_OW 69
28320: IN
28321: PUSH
28322: LD_EXP 122
28326: PUSH
28327: LD_VAR 0 1
28331: ARRAY
28332: PUSH
28333: LD_VAR 0 2
28337: ARRAY
28338: PUSH
28339: LD_INT 1
28341: ARRAY
28342: PPUSH
28343: LD_EXP 122
28347: PUSH
28348: LD_VAR 0 1
28352: ARRAY
28353: PUSH
28354: LD_VAR 0 2
28358: ARRAY
28359: PUSH
28360: LD_INT 2
28362: ARRAY
28363: PPUSH
28364: CALL_OW 458
28368: AND
28369: IFFALSE 28463
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28371: LD_EXP 122
28375: PUSH
28376: LD_VAR 0 1
28380: ARRAY
28381: PUSH
28382: LD_VAR 0 2
28386: ARRAY
28387: PUSH
28388: LD_INT 1
28390: ARRAY
28391: PPUSH
28392: LD_EXP 122
28396: PUSH
28397: LD_VAR 0 1
28401: ARRAY
28402: PUSH
28403: LD_VAR 0 2
28407: ARRAY
28408: PUSH
28409: LD_INT 2
28411: ARRAY
28412: PPUSH
28413: LD_VAR 0 3
28417: PPUSH
28418: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28422: LD_ADDR_EXP 122
28426: PUSH
28427: LD_EXP 122
28431: PPUSH
28432: LD_VAR 0 1
28436: PPUSH
28437: LD_EXP 122
28441: PUSH
28442: LD_VAR 0 1
28446: ARRAY
28447: PPUSH
28448: LD_VAR 0 2
28452: PPUSH
28453: CALL_OW 3
28457: PPUSH
28458: CALL_OW 1
28462: ST_TO_ADDR
// end ; end ;
28463: GO 28214
28465: POP
28466: POP
// end ;
28467: GO 28132
28469: POP
28470: POP
// end ;
28471: PPOPN 4
28473: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28474: LD_INT 0
28476: PPUSH
28477: PPUSH
// result := false ;
28478: LD_ADDR_VAR 0 4
28482: PUSH
28483: LD_INT 0
28485: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28486: LD_VAR 0 1
28490: PPUSH
28491: CALL_OW 264
28495: PUSH
28496: LD_EXP 50
28500: EQUAL
28501: NOT
28502: IFFALSE 28506
// exit ;
28504: GO 28746
// index := GetElementIndex ( minersList , unit ) ;
28506: LD_ADDR_VAR 0 5
28510: PUSH
28511: LD_EXP 121
28515: PPUSH
28516: LD_VAR 0 1
28520: PPUSH
28521: CALL 34690 0 2
28525: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28526: LD_EXP 122
28530: PUSH
28531: LD_VAR 0 5
28535: ARRAY
28536: PUSH
28537: LD_EXP 123
28541: GREATEREQUAL
28542: IFFALSE 28546
// exit ;
28544: GO 28746
// ComMoveXY ( unit , x , y ) ;
28546: LD_VAR 0 1
28550: PPUSH
28551: LD_VAR 0 2
28555: PPUSH
28556: LD_VAR 0 3
28560: PPUSH
28561: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28565: LD_INT 35
28567: PPUSH
28568: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28572: LD_VAR 0 1
28576: PPUSH
28577: LD_VAR 0 2
28581: PPUSH
28582: LD_VAR 0 3
28586: PPUSH
28587: CALL 64754 0 3
28591: NOT
28592: PUSH
28593: LD_VAR 0 1
28597: PPUSH
28598: CALL_OW 314
28602: AND
28603: IFFALSE 28607
// exit ;
28605: GO 28746
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28607: LD_VAR 0 2
28611: PPUSH
28612: LD_VAR 0 3
28616: PPUSH
28617: CALL_OW 428
28621: PUSH
28622: LD_VAR 0 1
28626: EQUAL
28627: PUSH
28628: LD_VAR 0 1
28632: PPUSH
28633: CALL_OW 314
28637: NOT
28638: AND
28639: IFFALSE 28565
// PlaySoundXY ( x , y , PlantMine ) ;
28641: LD_VAR 0 2
28645: PPUSH
28646: LD_VAR 0 3
28650: PPUSH
28651: LD_STRING PlantMine
28653: PPUSH
28654: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28658: LD_VAR 0 2
28662: PPUSH
28663: LD_VAR 0 3
28667: PPUSH
28668: LD_VAR 0 1
28672: PPUSH
28673: CALL_OW 255
28677: PPUSH
28678: LD_INT 0
28680: PPUSH
28681: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28685: LD_ADDR_EXP 122
28689: PUSH
28690: LD_EXP 122
28694: PPUSH
28695: LD_VAR 0 5
28699: PUSH
28700: LD_EXP 122
28704: PUSH
28705: LD_VAR 0 5
28709: ARRAY
28710: PUSH
28711: LD_INT 1
28713: PLUS
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PPUSH
28719: LD_VAR 0 2
28723: PUSH
28724: LD_VAR 0 3
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PPUSH
28733: CALL 34905 0 3
28737: ST_TO_ADDR
// result := true ;
28738: LD_ADDR_VAR 0 4
28742: PUSH
28743: LD_INT 1
28745: ST_TO_ADDR
// end ;
28746: LD_VAR 0 4
28750: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28751: LD_INT 0
28753: PPUSH
28754: PPUSH
28755: PPUSH
// if not unit in minersList then
28756: LD_VAR 0 1
28760: PUSH
28761: LD_EXP 121
28765: IN
28766: NOT
28767: IFFALSE 28771
// exit ;
28769: GO 29163
// index := GetElementIndex ( minersList , unit ) ;
28771: LD_ADDR_VAR 0 6
28775: PUSH
28776: LD_EXP 121
28780: PPUSH
28781: LD_VAR 0 1
28785: PPUSH
28786: CALL 34690 0 2
28790: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28791: LD_ADDR_VAR 0 5
28795: PUSH
28796: DOUBLE
28797: LD_EXP 122
28801: PUSH
28802: LD_VAR 0 6
28806: ARRAY
28807: INC
28808: ST_TO_ADDR
28809: LD_INT 1
28811: PUSH
28812: FOR_DOWNTO
28813: IFFALSE 28974
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28815: LD_EXP 122
28819: PUSH
28820: LD_VAR 0 6
28824: ARRAY
28825: PUSH
28826: LD_VAR 0 5
28830: ARRAY
28831: PUSH
28832: LD_INT 1
28834: ARRAY
28835: PUSH
28836: LD_VAR 0 2
28840: EQUAL
28841: PUSH
28842: LD_EXP 122
28846: PUSH
28847: LD_VAR 0 6
28851: ARRAY
28852: PUSH
28853: LD_VAR 0 5
28857: ARRAY
28858: PUSH
28859: LD_INT 2
28861: ARRAY
28862: PUSH
28863: LD_VAR 0 3
28867: EQUAL
28868: AND
28869: IFFALSE 28972
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28871: LD_EXP 122
28875: PUSH
28876: LD_VAR 0 6
28880: ARRAY
28881: PUSH
28882: LD_VAR 0 5
28886: ARRAY
28887: PUSH
28888: LD_INT 1
28890: ARRAY
28891: PPUSH
28892: LD_EXP 122
28896: PUSH
28897: LD_VAR 0 6
28901: ARRAY
28902: PUSH
28903: LD_VAR 0 5
28907: ARRAY
28908: PUSH
28909: LD_INT 2
28911: ARRAY
28912: PPUSH
28913: LD_VAR 0 1
28917: PPUSH
28918: CALL_OW 255
28922: PPUSH
28923: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28927: LD_ADDR_EXP 122
28931: PUSH
28932: LD_EXP 122
28936: PPUSH
28937: LD_VAR 0 6
28941: PPUSH
28942: LD_EXP 122
28946: PUSH
28947: LD_VAR 0 6
28951: ARRAY
28952: PPUSH
28953: LD_VAR 0 5
28957: PPUSH
28958: CALL_OW 3
28962: PPUSH
28963: CALL_OW 1
28967: ST_TO_ADDR
// exit ;
28968: POP
28969: POP
28970: GO 29163
// end ; end ;
28972: GO 28812
28974: POP
28975: POP
// for i := minerMinesList [ index ] downto 1 do
28976: LD_ADDR_VAR 0 5
28980: PUSH
28981: DOUBLE
28982: LD_EXP 122
28986: PUSH
28987: LD_VAR 0 6
28991: ARRAY
28992: INC
28993: ST_TO_ADDR
28994: LD_INT 1
28996: PUSH
28997: FOR_DOWNTO
28998: IFFALSE 29161
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29000: LD_EXP 122
29004: PUSH
29005: LD_VAR 0 6
29009: ARRAY
29010: PUSH
29011: LD_VAR 0 5
29015: ARRAY
29016: PUSH
29017: LD_INT 1
29019: ARRAY
29020: PPUSH
29021: LD_EXP 122
29025: PUSH
29026: LD_VAR 0 6
29030: ARRAY
29031: PUSH
29032: LD_VAR 0 5
29036: ARRAY
29037: PUSH
29038: LD_INT 2
29040: ARRAY
29041: PPUSH
29042: LD_VAR 0 2
29046: PPUSH
29047: LD_VAR 0 3
29051: PPUSH
29052: CALL_OW 298
29056: PUSH
29057: LD_INT 6
29059: LESS
29060: IFFALSE 29159
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29062: LD_EXP 122
29066: PUSH
29067: LD_VAR 0 6
29071: ARRAY
29072: PUSH
29073: LD_VAR 0 5
29077: ARRAY
29078: PUSH
29079: LD_INT 1
29081: ARRAY
29082: PPUSH
29083: LD_EXP 122
29087: PUSH
29088: LD_VAR 0 6
29092: ARRAY
29093: PUSH
29094: LD_VAR 0 5
29098: ARRAY
29099: PUSH
29100: LD_INT 2
29102: ARRAY
29103: PPUSH
29104: LD_VAR 0 1
29108: PPUSH
29109: CALL_OW 255
29113: PPUSH
29114: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29118: LD_ADDR_EXP 122
29122: PUSH
29123: LD_EXP 122
29127: PPUSH
29128: LD_VAR 0 6
29132: PPUSH
29133: LD_EXP 122
29137: PUSH
29138: LD_VAR 0 6
29142: ARRAY
29143: PPUSH
29144: LD_VAR 0 5
29148: PPUSH
29149: CALL_OW 3
29153: PPUSH
29154: CALL_OW 1
29158: ST_TO_ADDR
// end ; end ;
29159: GO 28997
29161: POP
29162: POP
// end ;
29163: LD_VAR 0 4
29167: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29168: LD_INT 0
29170: PPUSH
29171: PPUSH
29172: PPUSH
29173: PPUSH
29174: PPUSH
29175: PPUSH
29176: PPUSH
29177: PPUSH
29178: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29179: LD_VAR 0 1
29183: PPUSH
29184: CALL_OW 264
29188: PUSH
29189: LD_EXP 50
29193: EQUAL
29194: NOT
29195: PUSH
29196: LD_VAR 0 1
29200: PUSH
29201: LD_EXP 121
29205: IN
29206: NOT
29207: OR
29208: IFFALSE 29212
// exit ;
29210: GO 29534
// index := GetElementIndex ( minersList , unit ) ;
29212: LD_ADDR_VAR 0 6
29216: PUSH
29217: LD_EXP 121
29221: PPUSH
29222: LD_VAR 0 1
29226: PPUSH
29227: CALL 34690 0 2
29231: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29232: LD_ADDR_VAR 0 8
29236: PUSH
29237: LD_EXP 123
29241: PUSH
29242: LD_EXP 122
29246: PUSH
29247: LD_VAR 0 6
29251: ARRAY
29252: MINUS
29253: ST_TO_ADDR
// if not minesFreeAmount then
29254: LD_VAR 0 8
29258: NOT
29259: IFFALSE 29263
// exit ;
29261: GO 29534
// tmp := [ ] ;
29263: LD_ADDR_VAR 0 7
29267: PUSH
29268: EMPTY
29269: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29270: LD_ADDR_VAR 0 5
29274: PUSH
29275: DOUBLE
29276: LD_INT 1
29278: DEC
29279: ST_TO_ADDR
29280: LD_VAR 0 8
29284: PUSH
29285: FOR_TO
29286: IFFALSE 29481
// begin _d := rand ( 0 , 5 ) ;
29288: LD_ADDR_VAR 0 11
29292: PUSH
29293: LD_INT 0
29295: PPUSH
29296: LD_INT 5
29298: PPUSH
29299: CALL_OW 12
29303: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29304: LD_ADDR_VAR 0 12
29308: PUSH
29309: LD_INT 2
29311: PPUSH
29312: LD_INT 6
29314: PPUSH
29315: CALL_OW 12
29319: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29320: LD_ADDR_VAR 0 9
29324: PUSH
29325: LD_VAR 0 2
29329: PPUSH
29330: LD_VAR 0 11
29334: PPUSH
29335: LD_VAR 0 12
29339: PPUSH
29340: CALL_OW 272
29344: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29345: LD_ADDR_VAR 0 10
29349: PUSH
29350: LD_VAR 0 3
29354: PPUSH
29355: LD_VAR 0 11
29359: PPUSH
29360: LD_VAR 0 12
29364: PPUSH
29365: CALL_OW 273
29369: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29370: LD_VAR 0 9
29374: PPUSH
29375: LD_VAR 0 10
29379: PPUSH
29380: CALL_OW 488
29384: PUSH
29385: LD_VAR 0 9
29389: PUSH
29390: LD_VAR 0 10
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_VAR 0 7
29403: IN
29404: NOT
29405: AND
29406: PUSH
29407: LD_VAR 0 9
29411: PPUSH
29412: LD_VAR 0 10
29416: PPUSH
29417: CALL_OW 458
29421: NOT
29422: AND
29423: IFFALSE 29465
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29425: LD_ADDR_VAR 0 7
29429: PUSH
29430: LD_VAR 0 7
29434: PPUSH
29435: LD_VAR 0 7
29439: PUSH
29440: LD_INT 1
29442: PLUS
29443: PPUSH
29444: LD_VAR 0 9
29448: PUSH
29449: LD_VAR 0 10
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PPUSH
29458: CALL_OW 1
29462: ST_TO_ADDR
29463: GO 29479
// i := i - 1 ;
29465: LD_ADDR_VAR 0 5
29469: PUSH
29470: LD_VAR 0 5
29474: PUSH
29475: LD_INT 1
29477: MINUS
29478: ST_TO_ADDR
// end ;
29479: GO 29285
29481: POP
29482: POP
// for i in tmp do
29483: LD_ADDR_VAR 0 5
29487: PUSH
29488: LD_VAR 0 7
29492: PUSH
29493: FOR_IN
29494: IFFALSE 29532
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29496: LD_VAR 0 1
29500: PPUSH
29501: LD_VAR 0 5
29505: PUSH
29506: LD_INT 1
29508: ARRAY
29509: PPUSH
29510: LD_VAR 0 5
29514: PUSH
29515: LD_INT 2
29517: ARRAY
29518: PPUSH
29519: CALL 28474 0 3
29523: NOT
29524: IFFALSE 29530
// exit ;
29526: POP
29527: POP
29528: GO 29534
29530: GO 29493
29532: POP
29533: POP
// end ;
29534: LD_VAR 0 4
29538: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29539: LD_INT 0
29541: PPUSH
29542: PPUSH
29543: PPUSH
29544: PPUSH
29545: PPUSH
29546: PPUSH
29547: PPUSH
// if not GetClass ( unit ) = class_sniper then
29548: LD_VAR 0 1
29552: PPUSH
29553: CALL_OW 257
29557: PUSH
29558: LD_INT 5
29560: EQUAL
29561: NOT
29562: IFFALSE 29566
// exit ;
29564: GO 29954
// dist := 8 ;
29566: LD_ADDR_VAR 0 5
29570: PUSH
29571: LD_INT 8
29573: ST_TO_ADDR
// viewRange := 12 ;
29574: LD_ADDR_VAR 0 7
29578: PUSH
29579: LD_INT 12
29581: ST_TO_ADDR
// side := GetSide ( unit ) ;
29582: LD_ADDR_VAR 0 6
29586: PUSH
29587: LD_VAR 0 1
29591: PPUSH
29592: CALL_OW 255
29596: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29597: LD_INT 61
29599: PPUSH
29600: LD_VAR 0 6
29604: PPUSH
29605: CALL_OW 321
29609: PUSH
29610: LD_INT 2
29612: EQUAL
29613: IFFALSE 29623
// viewRange := 16 ;
29615: LD_ADDR_VAR 0 7
29619: PUSH
29620: LD_INT 16
29622: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29623: LD_VAR 0 1
29627: PPUSH
29628: LD_VAR 0 2
29632: PPUSH
29633: LD_VAR 0 3
29637: PPUSH
29638: CALL_OW 297
29642: PUSH
29643: LD_VAR 0 5
29647: GREATER
29648: IFFALSE 29727
// begin ComMoveXY ( unit , x , y ) ;
29650: LD_VAR 0 1
29654: PPUSH
29655: LD_VAR 0 2
29659: PPUSH
29660: LD_VAR 0 3
29664: PPUSH
29665: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29669: LD_INT 35
29671: PPUSH
29672: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29676: LD_VAR 0 1
29680: PPUSH
29681: LD_VAR 0 2
29685: PPUSH
29686: LD_VAR 0 3
29690: PPUSH
29691: CALL 64754 0 3
29695: NOT
29696: IFFALSE 29700
// exit ;
29698: GO 29954
// until GetDistUnitXY ( unit , x , y ) < dist ;
29700: LD_VAR 0 1
29704: PPUSH
29705: LD_VAR 0 2
29709: PPUSH
29710: LD_VAR 0 3
29714: PPUSH
29715: CALL_OW 297
29719: PUSH
29720: LD_VAR 0 5
29724: LESS
29725: IFFALSE 29669
// end ; ComTurnXY ( unit , x , y ) ;
29727: LD_VAR 0 1
29731: PPUSH
29732: LD_VAR 0 2
29736: PPUSH
29737: LD_VAR 0 3
29741: PPUSH
29742: CALL_OW 118
// wait ( 5 ) ;
29746: LD_INT 5
29748: PPUSH
29749: CALL_OW 67
// _d := GetDir ( unit ) ;
29753: LD_ADDR_VAR 0 10
29757: PUSH
29758: LD_VAR 0 1
29762: PPUSH
29763: CALL_OW 254
29767: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29768: LD_ADDR_VAR 0 8
29772: PUSH
29773: LD_VAR 0 1
29777: PPUSH
29778: CALL_OW 250
29782: PPUSH
29783: LD_VAR 0 10
29787: PPUSH
29788: LD_VAR 0 5
29792: PPUSH
29793: CALL_OW 272
29797: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29798: LD_ADDR_VAR 0 9
29802: PUSH
29803: LD_VAR 0 1
29807: PPUSH
29808: CALL_OW 251
29812: PPUSH
29813: LD_VAR 0 10
29817: PPUSH
29818: LD_VAR 0 5
29822: PPUSH
29823: CALL_OW 273
29827: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29828: LD_VAR 0 8
29832: PPUSH
29833: LD_VAR 0 9
29837: PPUSH
29838: CALL_OW 488
29842: NOT
29843: IFFALSE 29847
// exit ;
29845: GO 29954
// ComAnimCustom ( unit , 1 ) ;
29847: LD_VAR 0 1
29851: PPUSH
29852: LD_INT 1
29854: PPUSH
29855: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29859: LD_VAR 0 8
29863: PPUSH
29864: LD_VAR 0 9
29868: PPUSH
29869: LD_VAR 0 6
29873: PPUSH
29874: LD_VAR 0 7
29878: PPUSH
29879: CALL_OW 330
// repeat wait ( 1 ) ;
29883: LD_INT 1
29885: PPUSH
29886: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29890: LD_VAR 0 1
29894: PPUSH
29895: CALL_OW 316
29899: PUSH
29900: LD_VAR 0 1
29904: PPUSH
29905: CALL_OW 314
29909: OR
29910: PUSH
29911: LD_VAR 0 1
29915: PPUSH
29916: CALL_OW 302
29920: NOT
29921: OR
29922: PUSH
29923: LD_VAR 0 1
29927: PPUSH
29928: CALL_OW 301
29932: OR
29933: IFFALSE 29883
// RemoveSeeing ( _x , _y , side ) ;
29935: LD_VAR 0 8
29939: PPUSH
29940: LD_VAR 0 9
29944: PPUSH
29945: LD_VAR 0 6
29949: PPUSH
29950: CALL_OW 331
// end ; end_of_file
29954: LD_VAR 0 4
29958: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29959: LD_INT 0
29961: PPUSH
29962: PPUSH
// if exist_mode then
29963: LD_VAR 0 2
29967: IFFALSE 29992
// unit := CreateCharacter ( prefix & ident ) else
29969: LD_ADDR_VAR 0 5
29973: PUSH
29974: LD_VAR 0 3
29978: PUSH
29979: LD_VAR 0 1
29983: STR
29984: PPUSH
29985: CALL_OW 34
29989: ST_TO_ADDR
29990: GO 30007
// unit := NewCharacter ( ident ) ;
29992: LD_ADDR_VAR 0 5
29996: PUSH
29997: LD_VAR 0 1
30001: PPUSH
30002: CALL_OW 25
30006: ST_TO_ADDR
// result := unit ;
30007: LD_ADDR_VAR 0 4
30011: PUSH
30012: LD_VAR 0 5
30016: ST_TO_ADDR
// end ;
30017: LD_VAR 0 4
30021: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30022: LD_INT 0
30024: PPUSH
30025: PPUSH
// if not side or not nation then
30026: LD_VAR 0 1
30030: NOT
30031: PUSH
30032: LD_VAR 0 2
30036: NOT
30037: OR
30038: IFFALSE 30042
// exit ;
30040: GO 30806
// case nation of nation_american :
30042: LD_VAR 0 2
30046: PUSH
30047: LD_INT 1
30049: DOUBLE
30050: EQUAL
30051: IFTRUE 30055
30053: GO 30269
30055: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30056: LD_ADDR_VAR 0 4
30060: PUSH
30061: LD_INT 35
30063: PUSH
30064: LD_INT 45
30066: PUSH
30067: LD_INT 46
30069: PUSH
30070: LD_INT 47
30072: PUSH
30073: LD_INT 82
30075: PUSH
30076: LD_INT 83
30078: PUSH
30079: LD_INT 84
30081: PUSH
30082: LD_INT 85
30084: PUSH
30085: LD_INT 86
30087: PUSH
30088: LD_INT 1
30090: PUSH
30091: LD_INT 2
30093: PUSH
30094: LD_INT 6
30096: PUSH
30097: LD_INT 15
30099: PUSH
30100: LD_INT 16
30102: PUSH
30103: LD_INT 7
30105: PUSH
30106: LD_INT 12
30108: PUSH
30109: LD_INT 13
30111: PUSH
30112: LD_INT 10
30114: PUSH
30115: LD_INT 14
30117: PUSH
30118: LD_INT 20
30120: PUSH
30121: LD_INT 21
30123: PUSH
30124: LD_INT 22
30126: PUSH
30127: LD_INT 25
30129: PUSH
30130: LD_INT 32
30132: PUSH
30133: LD_INT 27
30135: PUSH
30136: LD_INT 36
30138: PUSH
30139: LD_INT 69
30141: PUSH
30142: LD_INT 39
30144: PUSH
30145: LD_INT 34
30147: PUSH
30148: LD_INT 40
30150: PUSH
30151: LD_INT 48
30153: PUSH
30154: LD_INT 49
30156: PUSH
30157: LD_INT 50
30159: PUSH
30160: LD_INT 51
30162: PUSH
30163: LD_INT 52
30165: PUSH
30166: LD_INT 53
30168: PUSH
30169: LD_INT 54
30171: PUSH
30172: LD_INT 55
30174: PUSH
30175: LD_INT 56
30177: PUSH
30178: LD_INT 57
30180: PUSH
30181: LD_INT 58
30183: PUSH
30184: LD_INT 59
30186: PUSH
30187: LD_INT 60
30189: PUSH
30190: LD_INT 61
30192: PUSH
30193: LD_INT 62
30195: PUSH
30196: LD_INT 80
30198: PUSH
30199: LD_INT 82
30201: PUSH
30202: LD_INT 83
30204: PUSH
30205: LD_INT 84
30207: PUSH
30208: LD_INT 85
30210: PUSH
30211: LD_INT 86
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: ST_TO_ADDR
30267: GO 30730
30269: LD_INT 2
30271: DOUBLE
30272: EQUAL
30273: IFTRUE 30277
30275: GO 30499
30277: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
30278: LD_ADDR_VAR 0 4
30282: PUSH
30283: LD_INT 35
30285: PUSH
30286: LD_INT 45
30288: PUSH
30289: LD_INT 46
30291: PUSH
30292: LD_INT 47
30294: PUSH
30295: LD_INT 82
30297: PUSH
30298: LD_INT 83
30300: PUSH
30301: LD_INT 84
30303: PUSH
30304: LD_INT 85
30306: PUSH
30307: LD_INT 87
30309: PUSH
30310: LD_INT 70
30312: PUSH
30313: LD_INT 1
30315: PUSH
30316: LD_INT 11
30318: PUSH
30319: LD_INT 3
30321: PUSH
30322: LD_INT 4
30324: PUSH
30325: LD_INT 5
30327: PUSH
30328: LD_INT 6
30330: PUSH
30331: LD_INT 15
30333: PUSH
30334: LD_INT 18
30336: PUSH
30337: LD_INT 7
30339: PUSH
30340: LD_INT 17
30342: PUSH
30343: LD_INT 8
30345: PUSH
30346: LD_INT 20
30348: PUSH
30349: LD_INT 21
30351: PUSH
30352: LD_INT 22
30354: PUSH
30355: LD_INT 72
30357: PUSH
30358: LD_INT 26
30360: PUSH
30361: LD_INT 69
30363: PUSH
30364: LD_INT 39
30366: PUSH
30367: LD_INT 40
30369: PUSH
30370: LD_INT 41
30372: PUSH
30373: LD_INT 42
30375: PUSH
30376: LD_INT 43
30378: PUSH
30379: LD_INT 48
30381: PUSH
30382: LD_INT 49
30384: PUSH
30385: LD_INT 50
30387: PUSH
30388: LD_INT 51
30390: PUSH
30391: LD_INT 52
30393: PUSH
30394: LD_INT 53
30396: PUSH
30397: LD_INT 54
30399: PUSH
30400: LD_INT 55
30402: PUSH
30403: LD_INT 56
30405: PUSH
30406: LD_INT 60
30408: PUSH
30409: LD_INT 61
30411: PUSH
30412: LD_INT 62
30414: PUSH
30415: LD_INT 66
30417: PUSH
30418: LD_INT 67
30420: PUSH
30421: LD_INT 68
30423: PUSH
30424: LD_INT 81
30426: PUSH
30427: LD_INT 82
30429: PUSH
30430: LD_INT 83
30432: PUSH
30433: LD_INT 84
30435: PUSH
30436: LD_INT 85
30438: PUSH
30439: LD_INT 87
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: ST_TO_ADDR
30497: GO 30730
30499: LD_INT 3
30501: DOUBLE
30502: EQUAL
30503: IFTRUE 30507
30505: GO 30729
30507: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30508: LD_ADDR_VAR 0 4
30512: PUSH
30513: LD_INT 46
30515: PUSH
30516: LD_INT 47
30518: PUSH
30519: LD_INT 1
30521: PUSH
30522: LD_INT 2
30524: PUSH
30525: LD_INT 82
30527: PUSH
30528: LD_INT 83
30530: PUSH
30531: LD_INT 84
30533: PUSH
30534: LD_INT 85
30536: PUSH
30537: LD_INT 86
30539: PUSH
30540: LD_INT 11
30542: PUSH
30543: LD_INT 9
30545: PUSH
30546: LD_INT 20
30548: PUSH
30549: LD_INT 19
30551: PUSH
30552: LD_INT 21
30554: PUSH
30555: LD_INT 24
30557: PUSH
30558: LD_INT 22
30560: PUSH
30561: LD_INT 25
30563: PUSH
30564: LD_INT 28
30566: PUSH
30567: LD_INT 29
30569: PUSH
30570: LD_INT 30
30572: PUSH
30573: LD_INT 31
30575: PUSH
30576: LD_INT 37
30578: PUSH
30579: LD_INT 38
30581: PUSH
30582: LD_INT 32
30584: PUSH
30585: LD_INT 27
30587: PUSH
30588: LD_INT 33
30590: PUSH
30591: LD_INT 69
30593: PUSH
30594: LD_INT 39
30596: PUSH
30597: LD_INT 34
30599: PUSH
30600: LD_INT 40
30602: PUSH
30603: LD_INT 71
30605: PUSH
30606: LD_INT 23
30608: PUSH
30609: LD_INT 44
30611: PUSH
30612: LD_INT 48
30614: PUSH
30615: LD_INT 49
30617: PUSH
30618: LD_INT 50
30620: PUSH
30621: LD_INT 51
30623: PUSH
30624: LD_INT 52
30626: PUSH
30627: LD_INT 53
30629: PUSH
30630: LD_INT 54
30632: PUSH
30633: LD_INT 55
30635: PUSH
30636: LD_INT 56
30638: PUSH
30639: LD_INT 57
30641: PUSH
30642: LD_INT 58
30644: PUSH
30645: LD_INT 59
30647: PUSH
30648: LD_INT 63
30650: PUSH
30651: LD_INT 64
30653: PUSH
30654: LD_INT 65
30656: PUSH
30657: LD_INT 82
30659: PUSH
30660: LD_INT 83
30662: PUSH
30663: LD_INT 84
30665: PUSH
30666: LD_INT 85
30668: PUSH
30669: LD_INT 86
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: ST_TO_ADDR
30727: GO 30730
30729: POP
// if state > - 1 and state < 3 then
30730: LD_VAR 0 3
30734: PUSH
30735: LD_INT 1
30737: NEG
30738: GREATER
30739: PUSH
30740: LD_VAR 0 3
30744: PUSH
30745: LD_INT 3
30747: LESS
30748: AND
30749: IFFALSE 30806
// for i in result do
30751: LD_ADDR_VAR 0 5
30755: PUSH
30756: LD_VAR 0 4
30760: PUSH
30761: FOR_IN
30762: IFFALSE 30804
// if GetTech ( i , side ) <> state then
30764: LD_VAR 0 5
30768: PPUSH
30769: LD_VAR 0 1
30773: PPUSH
30774: CALL_OW 321
30778: PUSH
30779: LD_VAR 0 3
30783: NONEQUAL
30784: IFFALSE 30802
// result := result diff i ;
30786: LD_ADDR_VAR 0 4
30790: PUSH
30791: LD_VAR 0 4
30795: PUSH
30796: LD_VAR 0 5
30800: DIFF
30801: ST_TO_ADDR
30802: GO 30761
30804: POP
30805: POP
// end ;
30806: LD_VAR 0 4
30810: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30811: LD_INT 0
30813: PPUSH
30814: PPUSH
30815: PPUSH
// result := true ;
30816: LD_ADDR_VAR 0 3
30820: PUSH
30821: LD_INT 1
30823: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30824: LD_ADDR_VAR 0 5
30828: PUSH
30829: LD_VAR 0 2
30833: PPUSH
30834: CALL_OW 480
30838: ST_TO_ADDR
// if not tmp then
30839: LD_VAR 0 5
30843: NOT
30844: IFFALSE 30848
// exit ;
30846: GO 30897
// for i in tmp do
30848: LD_ADDR_VAR 0 4
30852: PUSH
30853: LD_VAR 0 5
30857: PUSH
30858: FOR_IN
30859: IFFALSE 30895
// if GetTech ( i , side ) <> state_researched then
30861: LD_VAR 0 4
30865: PPUSH
30866: LD_VAR 0 1
30870: PPUSH
30871: CALL_OW 321
30875: PUSH
30876: LD_INT 2
30878: NONEQUAL
30879: IFFALSE 30893
// begin result := false ;
30881: LD_ADDR_VAR 0 3
30885: PUSH
30886: LD_INT 0
30888: ST_TO_ADDR
// exit ;
30889: POP
30890: POP
30891: GO 30897
// end ;
30893: GO 30858
30895: POP
30896: POP
// end ;
30897: LD_VAR 0 3
30901: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30902: LD_INT 0
30904: PPUSH
30905: PPUSH
30906: PPUSH
30907: PPUSH
30908: PPUSH
30909: PPUSH
30910: PPUSH
30911: PPUSH
30912: PPUSH
30913: PPUSH
30914: PPUSH
30915: PPUSH
30916: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30917: LD_VAR 0 1
30921: NOT
30922: PUSH
30923: LD_VAR 0 1
30927: PPUSH
30928: CALL_OW 257
30932: PUSH
30933: LD_INT 9
30935: NONEQUAL
30936: OR
30937: IFFALSE 30941
// exit ;
30939: GO 31514
// side := GetSide ( unit ) ;
30941: LD_ADDR_VAR 0 9
30945: PUSH
30946: LD_VAR 0 1
30950: PPUSH
30951: CALL_OW 255
30955: ST_TO_ADDR
// tech_space := tech_spacanom ;
30956: LD_ADDR_VAR 0 12
30960: PUSH
30961: LD_INT 29
30963: ST_TO_ADDR
// tech_time := tech_taurad ;
30964: LD_ADDR_VAR 0 13
30968: PUSH
30969: LD_INT 28
30971: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30972: LD_ADDR_VAR 0 11
30976: PUSH
30977: LD_VAR 0 1
30981: PPUSH
30982: CALL_OW 310
30986: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30987: LD_VAR 0 11
30991: PPUSH
30992: CALL_OW 247
30996: PUSH
30997: LD_INT 2
30999: EQUAL
31000: IFFALSE 31004
// exit ;
31002: GO 31514
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31004: LD_ADDR_VAR 0 8
31008: PUSH
31009: LD_INT 81
31011: PUSH
31012: LD_VAR 0 9
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 3
31023: PUSH
31024: LD_INT 21
31026: PUSH
31027: LD_INT 3
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PPUSH
31042: CALL_OW 69
31046: ST_TO_ADDR
// if not tmp then
31047: LD_VAR 0 8
31051: NOT
31052: IFFALSE 31056
// exit ;
31054: GO 31514
// if in_unit then
31056: LD_VAR 0 11
31060: IFFALSE 31084
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31062: LD_ADDR_VAR 0 10
31066: PUSH
31067: LD_VAR 0 8
31071: PPUSH
31072: LD_VAR 0 11
31076: PPUSH
31077: CALL_OW 74
31081: ST_TO_ADDR
31082: GO 31104
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31084: LD_ADDR_VAR 0 10
31088: PUSH
31089: LD_VAR 0 8
31093: PPUSH
31094: LD_VAR 0 1
31098: PPUSH
31099: CALL_OW 74
31103: ST_TO_ADDR
// if not enemy then
31104: LD_VAR 0 10
31108: NOT
31109: IFFALSE 31113
// exit ;
31111: GO 31514
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31113: LD_VAR 0 11
31117: PUSH
31118: LD_VAR 0 11
31122: PPUSH
31123: LD_VAR 0 10
31127: PPUSH
31128: CALL_OW 296
31132: PUSH
31133: LD_INT 13
31135: GREATER
31136: AND
31137: PUSH
31138: LD_VAR 0 1
31142: PPUSH
31143: LD_VAR 0 10
31147: PPUSH
31148: CALL_OW 296
31152: PUSH
31153: LD_INT 12
31155: GREATER
31156: OR
31157: IFFALSE 31161
// exit ;
31159: GO 31514
// missile := [ 1 ] ;
31161: LD_ADDR_VAR 0 14
31165: PUSH
31166: LD_INT 1
31168: PUSH
31169: EMPTY
31170: LIST
31171: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31172: LD_VAR 0 9
31176: PPUSH
31177: LD_VAR 0 12
31181: PPUSH
31182: CALL_OW 325
31186: IFFALSE 31215
// missile := Insert ( missile , missile + 1 , 2 ) ;
31188: LD_ADDR_VAR 0 14
31192: PUSH
31193: LD_VAR 0 14
31197: PPUSH
31198: LD_VAR 0 14
31202: PUSH
31203: LD_INT 1
31205: PLUS
31206: PPUSH
31207: LD_INT 2
31209: PPUSH
31210: CALL_OW 2
31214: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31215: LD_VAR 0 9
31219: PPUSH
31220: LD_VAR 0 13
31224: PPUSH
31225: CALL_OW 325
31229: PUSH
31230: LD_VAR 0 10
31234: PPUSH
31235: CALL_OW 255
31239: PPUSH
31240: LD_VAR 0 13
31244: PPUSH
31245: CALL_OW 325
31249: NOT
31250: AND
31251: IFFALSE 31280
// missile := Insert ( missile , missile + 1 , 3 ) ;
31253: LD_ADDR_VAR 0 14
31257: PUSH
31258: LD_VAR 0 14
31262: PPUSH
31263: LD_VAR 0 14
31267: PUSH
31268: LD_INT 1
31270: PLUS
31271: PPUSH
31272: LD_INT 3
31274: PPUSH
31275: CALL_OW 2
31279: ST_TO_ADDR
// if missile < 2 then
31280: LD_VAR 0 14
31284: PUSH
31285: LD_INT 2
31287: LESS
31288: IFFALSE 31292
// exit ;
31290: GO 31514
// x := GetX ( enemy ) ;
31292: LD_ADDR_VAR 0 4
31296: PUSH
31297: LD_VAR 0 10
31301: PPUSH
31302: CALL_OW 250
31306: ST_TO_ADDR
// y := GetY ( enemy ) ;
31307: LD_ADDR_VAR 0 5
31311: PUSH
31312: LD_VAR 0 10
31316: PPUSH
31317: CALL_OW 251
31321: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31322: LD_ADDR_VAR 0 6
31326: PUSH
31327: LD_VAR 0 4
31331: PUSH
31332: LD_INT 1
31334: NEG
31335: PPUSH
31336: LD_INT 1
31338: PPUSH
31339: CALL_OW 12
31343: PLUS
31344: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31345: LD_ADDR_VAR 0 7
31349: PUSH
31350: LD_VAR 0 5
31354: PUSH
31355: LD_INT 1
31357: NEG
31358: PPUSH
31359: LD_INT 1
31361: PPUSH
31362: CALL_OW 12
31366: PLUS
31367: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31368: LD_VAR 0 6
31372: PPUSH
31373: LD_VAR 0 7
31377: PPUSH
31378: CALL_OW 488
31382: NOT
31383: IFFALSE 31405
// begin _x := x ;
31385: LD_ADDR_VAR 0 6
31389: PUSH
31390: LD_VAR 0 4
31394: ST_TO_ADDR
// _y := y ;
31395: LD_ADDR_VAR 0 7
31399: PUSH
31400: LD_VAR 0 5
31404: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31405: LD_ADDR_VAR 0 3
31409: PUSH
31410: LD_INT 1
31412: PPUSH
31413: LD_VAR 0 14
31417: PPUSH
31418: CALL_OW 12
31422: ST_TO_ADDR
// case i of 1 :
31423: LD_VAR 0 3
31427: PUSH
31428: LD_INT 1
31430: DOUBLE
31431: EQUAL
31432: IFTRUE 31436
31434: GO 31453
31436: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31437: LD_VAR 0 1
31441: PPUSH
31442: LD_VAR 0 10
31446: PPUSH
31447: CALL_OW 115
31451: GO 31514
31453: LD_INT 2
31455: DOUBLE
31456: EQUAL
31457: IFTRUE 31461
31459: GO 31483
31461: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31462: LD_VAR 0 1
31466: PPUSH
31467: LD_VAR 0 6
31471: PPUSH
31472: LD_VAR 0 7
31476: PPUSH
31477: CALL_OW 153
31481: GO 31514
31483: LD_INT 3
31485: DOUBLE
31486: EQUAL
31487: IFTRUE 31491
31489: GO 31513
31491: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31492: LD_VAR 0 1
31496: PPUSH
31497: LD_VAR 0 6
31501: PPUSH
31502: LD_VAR 0 7
31506: PPUSH
31507: CALL_OW 154
31511: GO 31514
31513: POP
// end ;
31514: LD_VAR 0 2
31518: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31519: LD_INT 0
31521: PPUSH
31522: PPUSH
31523: PPUSH
31524: PPUSH
31525: PPUSH
31526: PPUSH
// if not unit or not building then
31527: LD_VAR 0 1
31531: NOT
31532: PUSH
31533: LD_VAR 0 2
31537: NOT
31538: OR
31539: IFFALSE 31543
// exit ;
31541: GO 31701
// x := GetX ( building ) ;
31543: LD_ADDR_VAR 0 5
31547: PUSH
31548: LD_VAR 0 2
31552: PPUSH
31553: CALL_OW 250
31557: ST_TO_ADDR
// y := GetY ( building ) ;
31558: LD_ADDR_VAR 0 6
31562: PUSH
31563: LD_VAR 0 2
31567: PPUSH
31568: CALL_OW 251
31572: ST_TO_ADDR
// for i = 0 to 5 do
31573: LD_ADDR_VAR 0 4
31577: PUSH
31578: DOUBLE
31579: LD_INT 0
31581: DEC
31582: ST_TO_ADDR
31583: LD_INT 5
31585: PUSH
31586: FOR_TO
31587: IFFALSE 31699
// begin _x := ShiftX ( x , i , 3 ) ;
31589: LD_ADDR_VAR 0 7
31593: PUSH
31594: LD_VAR 0 5
31598: PPUSH
31599: LD_VAR 0 4
31603: PPUSH
31604: LD_INT 3
31606: PPUSH
31607: CALL_OW 272
31611: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31612: LD_ADDR_VAR 0 8
31616: PUSH
31617: LD_VAR 0 6
31621: PPUSH
31622: LD_VAR 0 4
31626: PPUSH
31627: LD_INT 3
31629: PPUSH
31630: CALL_OW 273
31634: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31635: LD_VAR 0 7
31639: PPUSH
31640: LD_VAR 0 8
31644: PPUSH
31645: CALL_OW 488
31649: NOT
31650: IFFALSE 31654
// continue ;
31652: GO 31586
// if HexInfo ( _x , _y ) = 0 then
31654: LD_VAR 0 7
31658: PPUSH
31659: LD_VAR 0 8
31663: PPUSH
31664: CALL_OW 428
31668: PUSH
31669: LD_INT 0
31671: EQUAL
31672: IFFALSE 31697
// begin ComMoveXY ( unit , _x , _y ) ;
31674: LD_VAR 0 1
31678: PPUSH
31679: LD_VAR 0 7
31683: PPUSH
31684: LD_VAR 0 8
31688: PPUSH
31689: CALL_OW 111
// exit ;
31693: POP
31694: POP
31695: GO 31701
// end ; end ;
31697: GO 31586
31699: POP
31700: POP
// end ;
31701: LD_VAR 0 3
31705: RET
// export function ScanBase ( side , base_area ) ; begin
31706: LD_INT 0
31708: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31709: LD_ADDR_VAR 0 3
31713: PUSH
31714: LD_VAR 0 2
31718: PPUSH
31719: LD_INT 81
31721: PUSH
31722: LD_VAR 0 1
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PPUSH
31731: CALL_OW 70
31735: ST_TO_ADDR
// end ;
31736: LD_VAR 0 3
31740: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31741: LD_INT 0
31743: PPUSH
31744: PPUSH
31745: PPUSH
31746: PPUSH
// result := false ;
31747: LD_ADDR_VAR 0 2
31751: PUSH
31752: LD_INT 0
31754: ST_TO_ADDR
// side := GetSide ( unit ) ;
31755: LD_ADDR_VAR 0 3
31759: PUSH
31760: LD_VAR 0 1
31764: PPUSH
31765: CALL_OW 255
31769: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31770: LD_ADDR_VAR 0 4
31774: PUSH
31775: LD_VAR 0 1
31779: PPUSH
31780: CALL_OW 248
31784: ST_TO_ADDR
// case nat of 1 :
31785: LD_VAR 0 4
31789: PUSH
31790: LD_INT 1
31792: DOUBLE
31793: EQUAL
31794: IFTRUE 31798
31796: GO 31809
31798: POP
// tech := tech_lassight ; 2 :
31799: LD_ADDR_VAR 0 5
31803: PUSH
31804: LD_INT 12
31806: ST_TO_ADDR
31807: GO 31848
31809: LD_INT 2
31811: DOUBLE
31812: EQUAL
31813: IFTRUE 31817
31815: GO 31828
31817: POP
// tech := tech_mortar ; 3 :
31818: LD_ADDR_VAR 0 5
31822: PUSH
31823: LD_INT 41
31825: ST_TO_ADDR
31826: GO 31848
31828: LD_INT 3
31830: DOUBLE
31831: EQUAL
31832: IFTRUE 31836
31834: GO 31847
31836: POP
// tech := tech_bazooka ; end ;
31837: LD_ADDR_VAR 0 5
31841: PUSH
31842: LD_INT 44
31844: ST_TO_ADDR
31845: GO 31848
31847: POP
// if Researched ( side , tech ) then
31848: LD_VAR 0 3
31852: PPUSH
31853: LD_VAR 0 5
31857: PPUSH
31858: CALL_OW 325
31862: IFFALSE 31889
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31864: LD_ADDR_VAR 0 2
31868: PUSH
31869: LD_INT 5
31871: PUSH
31872: LD_INT 8
31874: PUSH
31875: LD_INT 9
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: LIST
31882: PUSH
31883: LD_VAR 0 4
31887: ARRAY
31888: ST_TO_ADDR
// end ;
31889: LD_VAR 0 2
31893: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31894: LD_INT 0
31896: PPUSH
31897: PPUSH
31898: PPUSH
// if not mines then
31899: LD_VAR 0 2
31903: NOT
31904: IFFALSE 31908
// exit ;
31906: GO 32052
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31908: LD_ADDR_VAR 0 5
31912: PUSH
31913: LD_INT 81
31915: PUSH
31916: LD_VAR 0 1
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 3
31927: PUSH
31928: LD_INT 21
31930: PUSH
31931: LD_INT 3
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PPUSH
31946: CALL_OW 69
31950: ST_TO_ADDR
// for i in mines do
31951: LD_ADDR_VAR 0 4
31955: PUSH
31956: LD_VAR 0 2
31960: PUSH
31961: FOR_IN
31962: IFFALSE 32050
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31964: LD_VAR 0 4
31968: PUSH
31969: LD_INT 1
31971: ARRAY
31972: PPUSH
31973: LD_VAR 0 4
31977: PUSH
31978: LD_INT 2
31980: ARRAY
31981: PPUSH
31982: CALL_OW 458
31986: NOT
31987: IFFALSE 31991
// continue ;
31989: GO 31961
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31991: LD_VAR 0 4
31995: PUSH
31996: LD_INT 1
31998: ARRAY
31999: PPUSH
32000: LD_VAR 0 4
32004: PUSH
32005: LD_INT 2
32007: ARRAY
32008: PPUSH
32009: CALL_OW 428
32013: PUSH
32014: LD_VAR 0 5
32018: IN
32019: IFFALSE 32048
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32021: LD_VAR 0 4
32025: PUSH
32026: LD_INT 1
32028: ARRAY
32029: PPUSH
32030: LD_VAR 0 4
32034: PUSH
32035: LD_INT 2
32037: ARRAY
32038: PPUSH
32039: LD_VAR 0 1
32043: PPUSH
32044: CALL_OW 456
// end ;
32048: GO 31961
32050: POP
32051: POP
// end ;
32052: LD_VAR 0 3
32056: RET
// export function Count ( array ) ; var i ; begin
32057: LD_INT 0
32059: PPUSH
32060: PPUSH
// result := 0 ;
32061: LD_ADDR_VAR 0 2
32065: PUSH
32066: LD_INT 0
32068: ST_TO_ADDR
// for i in array do
32069: LD_ADDR_VAR 0 3
32073: PUSH
32074: LD_VAR 0 1
32078: PUSH
32079: FOR_IN
32080: IFFALSE 32104
// if i then
32082: LD_VAR 0 3
32086: IFFALSE 32102
// result := result + 1 ;
32088: LD_ADDR_VAR 0 2
32092: PUSH
32093: LD_VAR 0 2
32097: PUSH
32098: LD_INT 1
32100: PLUS
32101: ST_TO_ADDR
32102: GO 32079
32104: POP
32105: POP
// end ;
32106: LD_VAR 0 2
32110: RET
// export function IsEmpty ( building ) ; begin
32111: LD_INT 0
32113: PPUSH
// if not building then
32114: LD_VAR 0 1
32118: NOT
32119: IFFALSE 32123
// exit ;
32121: GO 32166
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32123: LD_ADDR_VAR 0 2
32127: PUSH
32128: LD_VAR 0 1
32132: PUSH
32133: LD_INT 22
32135: PUSH
32136: LD_VAR 0 1
32140: PPUSH
32141: CALL_OW 255
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 58
32152: PUSH
32153: EMPTY
32154: LIST
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PPUSH
32160: CALL_OW 69
32164: IN
32165: ST_TO_ADDR
// end ;
32166: LD_VAR 0 2
32170: RET
// export function IsNotFull ( building ) ; begin
32171: LD_INT 0
32173: PPUSH
// if not building then
32174: LD_VAR 0 1
32178: NOT
32179: IFFALSE 32183
// exit ;
32181: GO 32202
// result := UnitsInside ( building ) < 6 ;
32183: LD_ADDR_VAR 0 2
32187: PUSH
32188: LD_VAR 0 1
32192: PPUSH
32193: CALL_OW 313
32197: PUSH
32198: LD_INT 6
32200: LESS
32201: ST_TO_ADDR
// end ;
32202: LD_VAR 0 2
32206: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32207: LD_INT 0
32209: PPUSH
32210: PPUSH
32211: PPUSH
32212: PPUSH
// tmp := [ ] ;
32213: LD_ADDR_VAR 0 3
32217: PUSH
32218: EMPTY
32219: ST_TO_ADDR
// list := [ ] ;
32220: LD_ADDR_VAR 0 5
32224: PUSH
32225: EMPTY
32226: ST_TO_ADDR
// for i = 16 to 25 do
32227: LD_ADDR_VAR 0 4
32231: PUSH
32232: DOUBLE
32233: LD_INT 16
32235: DEC
32236: ST_TO_ADDR
32237: LD_INT 25
32239: PUSH
32240: FOR_TO
32241: IFFALSE 32314
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32243: LD_ADDR_VAR 0 3
32247: PUSH
32248: LD_VAR 0 3
32252: PUSH
32253: LD_INT 22
32255: PUSH
32256: LD_VAR 0 1
32260: PPUSH
32261: CALL_OW 255
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 91
32272: PUSH
32273: LD_VAR 0 1
32277: PUSH
32278: LD_INT 6
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 30
32288: PUSH
32289: LD_VAR 0 4
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: LIST
32302: PUSH
32303: EMPTY
32304: LIST
32305: PPUSH
32306: CALL_OW 69
32310: ADD
32311: ST_TO_ADDR
32312: GO 32240
32314: POP
32315: POP
// for i = 1 to tmp do
32316: LD_ADDR_VAR 0 4
32320: PUSH
32321: DOUBLE
32322: LD_INT 1
32324: DEC
32325: ST_TO_ADDR
32326: LD_VAR 0 3
32330: PUSH
32331: FOR_TO
32332: IFFALSE 32420
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32334: LD_ADDR_VAR 0 5
32338: PUSH
32339: LD_VAR 0 5
32343: PUSH
32344: LD_VAR 0 3
32348: PUSH
32349: LD_VAR 0 4
32353: ARRAY
32354: PPUSH
32355: CALL_OW 266
32359: PUSH
32360: LD_VAR 0 3
32364: PUSH
32365: LD_VAR 0 4
32369: ARRAY
32370: PPUSH
32371: CALL_OW 250
32375: PUSH
32376: LD_VAR 0 3
32380: PUSH
32381: LD_VAR 0 4
32385: ARRAY
32386: PPUSH
32387: CALL_OW 251
32391: PUSH
32392: LD_VAR 0 3
32396: PUSH
32397: LD_VAR 0 4
32401: ARRAY
32402: PPUSH
32403: CALL_OW 254
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: PUSH
32414: EMPTY
32415: LIST
32416: ADD
32417: ST_TO_ADDR
32418: GO 32331
32420: POP
32421: POP
// result := list ;
32422: LD_ADDR_VAR 0 2
32426: PUSH
32427: LD_VAR 0 5
32431: ST_TO_ADDR
// end ;
32432: LD_VAR 0 2
32436: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32437: LD_INT 0
32439: PPUSH
32440: PPUSH
32441: PPUSH
32442: PPUSH
32443: PPUSH
32444: PPUSH
32445: PPUSH
// if not factory then
32446: LD_VAR 0 1
32450: NOT
32451: IFFALSE 32455
// exit ;
32453: GO 33048
// if control = control_apeman then
32455: LD_VAR 0 4
32459: PUSH
32460: LD_INT 5
32462: EQUAL
32463: IFFALSE 32572
// begin tmp := UnitsInside ( factory ) ;
32465: LD_ADDR_VAR 0 8
32469: PUSH
32470: LD_VAR 0 1
32474: PPUSH
32475: CALL_OW 313
32479: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32480: LD_VAR 0 8
32484: PPUSH
32485: LD_INT 25
32487: PUSH
32488: LD_INT 12
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PPUSH
32495: CALL_OW 72
32499: NOT
32500: IFFALSE 32510
// control := control_manual ;
32502: LD_ADDR_VAR 0 4
32506: PUSH
32507: LD_INT 1
32509: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32510: LD_ADDR_VAR 0 8
32514: PUSH
32515: LD_VAR 0 1
32519: PPUSH
32520: CALL 32207 0 1
32524: ST_TO_ADDR
// if tmp then
32525: LD_VAR 0 8
32529: IFFALSE 32572
// begin for i in tmp do
32531: LD_ADDR_VAR 0 7
32535: PUSH
32536: LD_VAR 0 8
32540: PUSH
32541: FOR_IN
32542: IFFALSE 32570
// if i [ 1 ] = b_ext_radio then
32544: LD_VAR 0 7
32548: PUSH
32549: LD_INT 1
32551: ARRAY
32552: PUSH
32553: LD_INT 22
32555: EQUAL
32556: IFFALSE 32568
// begin control := control_remote ;
32558: LD_ADDR_VAR 0 4
32562: PUSH
32563: LD_INT 2
32565: ST_TO_ADDR
// break ;
32566: GO 32570
// end ;
32568: GO 32541
32570: POP
32571: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32572: LD_VAR 0 1
32576: PPUSH
32577: LD_VAR 0 2
32581: PPUSH
32582: LD_VAR 0 3
32586: PPUSH
32587: LD_VAR 0 4
32591: PPUSH
32592: LD_VAR 0 5
32596: PPUSH
32597: CALL_OW 448
32601: IFFALSE 32636
// begin result := [ chassis , engine , control , weapon ] ;
32603: LD_ADDR_VAR 0 6
32607: PUSH
32608: LD_VAR 0 2
32612: PUSH
32613: LD_VAR 0 3
32617: PUSH
32618: LD_VAR 0 4
32622: PUSH
32623: LD_VAR 0 5
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: ST_TO_ADDR
// exit ;
32634: GO 33048
// end ; _chassis := AvailableChassisList ( factory ) ;
32636: LD_ADDR_VAR 0 9
32640: PUSH
32641: LD_VAR 0 1
32645: PPUSH
32646: CALL_OW 475
32650: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32651: LD_ADDR_VAR 0 11
32655: PUSH
32656: LD_VAR 0 1
32660: PPUSH
32661: CALL_OW 476
32665: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32666: LD_ADDR_VAR 0 12
32670: PUSH
32671: LD_VAR 0 1
32675: PPUSH
32676: CALL_OW 477
32680: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32681: LD_ADDR_VAR 0 10
32685: PUSH
32686: LD_VAR 0 1
32690: PPUSH
32691: CALL_OW 478
32695: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32696: LD_VAR 0 9
32700: NOT
32701: PUSH
32702: LD_VAR 0 11
32706: NOT
32707: OR
32708: PUSH
32709: LD_VAR 0 12
32713: NOT
32714: OR
32715: PUSH
32716: LD_VAR 0 10
32720: NOT
32721: OR
32722: IFFALSE 32757
// begin result := [ chassis , engine , control , weapon ] ;
32724: LD_ADDR_VAR 0 6
32728: PUSH
32729: LD_VAR 0 2
32733: PUSH
32734: LD_VAR 0 3
32738: PUSH
32739: LD_VAR 0 4
32743: PUSH
32744: LD_VAR 0 5
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: ST_TO_ADDR
// exit ;
32755: GO 33048
// end ; if not chassis in _chassis then
32757: LD_VAR 0 2
32761: PUSH
32762: LD_VAR 0 9
32766: IN
32767: NOT
32768: IFFALSE 32794
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32770: LD_ADDR_VAR 0 2
32774: PUSH
32775: LD_VAR 0 9
32779: PUSH
32780: LD_INT 1
32782: PPUSH
32783: LD_VAR 0 9
32787: PPUSH
32788: CALL_OW 12
32792: ARRAY
32793: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32794: LD_VAR 0 2
32798: PPUSH
32799: LD_VAR 0 3
32803: PPUSH
32804: CALL 33053 0 2
32808: NOT
32809: IFFALSE 32868
// repeat engine := _engine [ 1 ] ;
32811: LD_ADDR_VAR 0 3
32815: PUSH
32816: LD_VAR 0 11
32820: PUSH
32821: LD_INT 1
32823: ARRAY
32824: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32825: LD_ADDR_VAR 0 11
32829: PUSH
32830: LD_VAR 0 11
32834: PPUSH
32835: LD_INT 1
32837: PPUSH
32838: CALL_OW 3
32842: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32843: LD_VAR 0 2
32847: PPUSH
32848: LD_VAR 0 3
32852: PPUSH
32853: CALL 33053 0 2
32857: PUSH
32858: LD_VAR 0 11
32862: PUSH
32863: EMPTY
32864: EQUAL
32865: OR
32866: IFFALSE 32811
// if not control in _control then
32868: LD_VAR 0 4
32872: PUSH
32873: LD_VAR 0 12
32877: IN
32878: NOT
32879: IFFALSE 32905
// control := _control [ rand ( 1 , _control ) ] ;
32881: LD_ADDR_VAR 0 4
32885: PUSH
32886: LD_VAR 0 12
32890: PUSH
32891: LD_INT 1
32893: PPUSH
32894: LD_VAR 0 12
32898: PPUSH
32899: CALL_OW 12
32903: ARRAY
32904: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32905: LD_VAR 0 2
32909: PPUSH
32910: LD_VAR 0 5
32914: PPUSH
32915: CALL 33273 0 2
32919: NOT
32920: IFFALSE 32979
// repeat weapon := _weapon [ 1 ] ;
32922: LD_ADDR_VAR 0 5
32926: PUSH
32927: LD_VAR 0 10
32931: PUSH
32932: LD_INT 1
32934: ARRAY
32935: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32936: LD_ADDR_VAR 0 10
32940: PUSH
32941: LD_VAR 0 10
32945: PPUSH
32946: LD_INT 1
32948: PPUSH
32949: CALL_OW 3
32953: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32954: LD_VAR 0 2
32958: PPUSH
32959: LD_VAR 0 5
32963: PPUSH
32964: CALL 33273 0 2
32968: PUSH
32969: LD_VAR 0 10
32973: PUSH
32974: EMPTY
32975: EQUAL
32976: OR
32977: IFFALSE 32922
// result := [ ] ;
32979: LD_ADDR_VAR 0 6
32983: PUSH
32984: EMPTY
32985: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32986: LD_VAR 0 1
32990: PPUSH
32991: LD_VAR 0 2
32995: PPUSH
32996: LD_VAR 0 3
33000: PPUSH
33001: LD_VAR 0 4
33005: PPUSH
33006: LD_VAR 0 5
33010: PPUSH
33011: CALL_OW 448
33015: IFFALSE 33048
// result := [ chassis , engine , control , weapon ] ;
33017: LD_ADDR_VAR 0 6
33021: PUSH
33022: LD_VAR 0 2
33026: PUSH
33027: LD_VAR 0 3
33031: PUSH
33032: LD_VAR 0 4
33036: PUSH
33037: LD_VAR 0 5
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: ST_TO_ADDR
// end ;
33048: LD_VAR 0 6
33052: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33053: LD_INT 0
33055: PPUSH
// if not chassis or not engine then
33056: LD_VAR 0 1
33060: NOT
33061: PUSH
33062: LD_VAR 0 2
33066: NOT
33067: OR
33068: IFFALSE 33072
// exit ;
33070: GO 33268
// case engine of engine_solar :
33072: LD_VAR 0 2
33076: PUSH
33077: LD_INT 2
33079: DOUBLE
33080: EQUAL
33081: IFTRUE 33085
33083: GO 33123
33085: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33086: LD_ADDR_VAR 0 3
33090: PUSH
33091: LD_INT 11
33093: PUSH
33094: LD_INT 12
33096: PUSH
33097: LD_INT 13
33099: PUSH
33100: LD_INT 14
33102: PUSH
33103: LD_INT 1
33105: PUSH
33106: LD_INT 2
33108: PUSH
33109: LD_INT 3
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: ST_TO_ADDR
33121: GO 33252
33123: LD_INT 1
33125: DOUBLE
33126: EQUAL
33127: IFTRUE 33131
33129: GO 33193
33131: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33132: LD_ADDR_VAR 0 3
33136: PUSH
33137: LD_INT 11
33139: PUSH
33140: LD_INT 12
33142: PUSH
33143: LD_INT 13
33145: PUSH
33146: LD_INT 14
33148: PUSH
33149: LD_INT 1
33151: PUSH
33152: LD_INT 2
33154: PUSH
33155: LD_INT 3
33157: PUSH
33158: LD_INT 4
33160: PUSH
33161: LD_INT 5
33163: PUSH
33164: LD_INT 21
33166: PUSH
33167: LD_INT 23
33169: PUSH
33170: LD_INT 22
33172: PUSH
33173: LD_INT 24
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: ST_TO_ADDR
33191: GO 33252
33193: LD_INT 3
33195: DOUBLE
33196: EQUAL
33197: IFTRUE 33201
33199: GO 33251
33201: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33202: LD_ADDR_VAR 0 3
33206: PUSH
33207: LD_INT 13
33209: PUSH
33210: LD_INT 14
33212: PUSH
33213: LD_INT 2
33215: PUSH
33216: LD_INT 3
33218: PUSH
33219: LD_INT 4
33221: PUSH
33222: LD_INT 5
33224: PUSH
33225: LD_INT 21
33227: PUSH
33228: LD_INT 22
33230: PUSH
33231: LD_INT 23
33233: PUSH
33234: LD_INT 24
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: ST_TO_ADDR
33249: GO 33252
33251: POP
// result := ( chassis in result ) ;
33252: LD_ADDR_VAR 0 3
33256: PUSH
33257: LD_VAR 0 1
33261: PUSH
33262: LD_VAR 0 3
33266: IN
33267: ST_TO_ADDR
// end ;
33268: LD_VAR 0 3
33272: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33273: LD_INT 0
33275: PPUSH
// if not chassis or not weapon then
33276: LD_VAR 0 1
33280: NOT
33281: PUSH
33282: LD_VAR 0 2
33286: NOT
33287: OR
33288: IFFALSE 33292
// exit ;
33290: GO 34318
// case weapon of us_machine_gun :
33292: LD_VAR 0 2
33296: PUSH
33297: LD_INT 2
33299: DOUBLE
33300: EQUAL
33301: IFTRUE 33305
33303: GO 33335
33305: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33306: LD_ADDR_VAR 0 3
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: LD_INT 2
33316: PUSH
33317: LD_INT 3
33319: PUSH
33320: LD_INT 4
33322: PUSH
33323: LD_INT 5
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: ST_TO_ADDR
33333: GO 34302
33335: LD_INT 3
33337: DOUBLE
33338: EQUAL
33339: IFTRUE 33343
33341: GO 33373
33343: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33344: LD_ADDR_VAR 0 3
33348: PUSH
33349: LD_INT 1
33351: PUSH
33352: LD_INT 2
33354: PUSH
33355: LD_INT 3
33357: PUSH
33358: LD_INT 4
33360: PUSH
33361: LD_INT 5
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: ST_TO_ADDR
33371: GO 34302
33373: LD_INT 11
33375: DOUBLE
33376: EQUAL
33377: IFTRUE 33381
33379: GO 33411
33381: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33382: LD_ADDR_VAR 0 3
33386: PUSH
33387: LD_INT 1
33389: PUSH
33390: LD_INT 2
33392: PUSH
33393: LD_INT 3
33395: PUSH
33396: LD_INT 4
33398: PUSH
33399: LD_INT 5
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: ST_TO_ADDR
33409: GO 34302
33411: LD_INT 4
33413: DOUBLE
33414: EQUAL
33415: IFTRUE 33419
33417: GO 33445
33419: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33420: LD_ADDR_VAR 0 3
33424: PUSH
33425: LD_INT 2
33427: PUSH
33428: LD_INT 3
33430: PUSH
33431: LD_INT 4
33433: PUSH
33434: LD_INT 5
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: ST_TO_ADDR
33443: GO 34302
33445: LD_INT 5
33447: DOUBLE
33448: EQUAL
33449: IFTRUE 33453
33451: GO 33479
33453: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33454: LD_ADDR_VAR 0 3
33458: PUSH
33459: LD_INT 2
33461: PUSH
33462: LD_INT 3
33464: PUSH
33465: LD_INT 4
33467: PUSH
33468: LD_INT 5
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: ST_TO_ADDR
33477: GO 34302
33479: LD_INT 9
33481: DOUBLE
33482: EQUAL
33483: IFTRUE 33487
33485: GO 33513
33487: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33488: LD_ADDR_VAR 0 3
33492: PUSH
33493: LD_INT 2
33495: PUSH
33496: LD_INT 3
33498: PUSH
33499: LD_INT 4
33501: PUSH
33502: LD_INT 5
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: ST_TO_ADDR
33511: GO 34302
33513: LD_INT 7
33515: DOUBLE
33516: EQUAL
33517: IFTRUE 33521
33519: GO 33547
33521: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33522: LD_ADDR_VAR 0 3
33526: PUSH
33527: LD_INT 2
33529: PUSH
33530: LD_INT 3
33532: PUSH
33533: LD_INT 4
33535: PUSH
33536: LD_INT 5
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: ST_TO_ADDR
33545: GO 34302
33547: LD_INT 12
33549: DOUBLE
33550: EQUAL
33551: IFTRUE 33555
33553: GO 33581
33555: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33556: LD_ADDR_VAR 0 3
33560: PUSH
33561: LD_INT 2
33563: PUSH
33564: LD_INT 3
33566: PUSH
33567: LD_INT 4
33569: PUSH
33570: LD_INT 5
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: ST_TO_ADDR
33579: GO 34302
33581: LD_INT 13
33583: DOUBLE
33584: EQUAL
33585: IFTRUE 33589
33587: GO 33615
33589: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33590: LD_ADDR_VAR 0 3
33594: PUSH
33595: LD_INT 2
33597: PUSH
33598: LD_INT 3
33600: PUSH
33601: LD_INT 4
33603: PUSH
33604: LD_INT 5
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: ST_TO_ADDR
33613: GO 34302
33615: LD_INT 14
33617: DOUBLE
33618: EQUAL
33619: IFTRUE 33623
33621: GO 33641
33623: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33624: LD_ADDR_VAR 0 3
33628: PUSH
33629: LD_INT 4
33631: PUSH
33632: LD_INT 5
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: ST_TO_ADDR
33639: GO 34302
33641: LD_INT 6
33643: DOUBLE
33644: EQUAL
33645: IFTRUE 33649
33647: GO 33667
33649: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33650: LD_ADDR_VAR 0 3
33654: PUSH
33655: LD_INT 4
33657: PUSH
33658: LD_INT 5
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: ST_TO_ADDR
33665: GO 34302
33667: LD_INT 10
33669: DOUBLE
33670: EQUAL
33671: IFTRUE 33675
33673: GO 33693
33675: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33676: LD_ADDR_VAR 0 3
33680: PUSH
33681: LD_INT 4
33683: PUSH
33684: LD_INT 5
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: ST_TO_ADDR
33691: GO 34302
33693: LD_INT 22
33695: DOUBLE
33696: EQUAL
33697: IFTRUE 33701
33699: GO 33727
33701: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33702: LD_ADDR_VAR 0 3
33706: PUSH
33707: LD_INT 11
33709: PUSH
33710: LD_INT 12
33712: PUSH
33713: LD_INT 13
33715: PUSH
33716: LD_INT 14
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: ST_TO_ADDR
33725: GO 34302
33727: LD_INT 23
33729: DOUBLE
33730: EQUAL
33731: IFTRUE 33735
33733: GO 33761
33735: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33736: LD_ADDR_VAR 0 3
33740: PUSH
33741: LD_INT 11
33743: PUSH
33744: LD_INT 12
33746: PUSH
33747: LD_INT 13
33749: PUSH
33750: LD_INT 14
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: ST_TO_ADDR
33759: GO 34302
33761: LD_INT 24
33763: DOUBLE
33764: EQUAL
33765: IFTRUE 33769
33767: GO 33795
33769: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33770: LD_ADDR_VAR 0 3
33774: PUSH
33775: LD_INT 11
33777: PUSH
33778: LD_INT 12
33780: PUSH
33781: LD_INT 13
33783: PUSH
33784: LD_INT 14
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: ST_TO_ADDR
33793: GO 34302
33795: LD_INT 30
33797: DOUBLE
33798: EQUAL
33799: IFTRUE 33803
33801: GO 33829
33803: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33804: LD_ADDR_VAR 0 3
33808: PUSH
33809: LD_INT 11
33811: PUSH
33812: LD_INT 12
33814: PUSH
33815: LD_INT 13
33817: PUSH
33818: LD_INT 14
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: ST_TO_ADDR
33827: GO 34302
33829: LD_INT 25
33831: DOUBLE
33832: EQUAL
33833: IFTRUE 33837
33835: GO 33855
33837: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33838: LD_ADDR_VAR 0 3
33842: PUSH
33843: LD_INT 13
33845: PUSH
33846: LD_INT 14
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: ST_TO_ADDR
33853: GO 34302
33855: LD_INT 27
33857: DOUBLE
33858: EQUAL
33859: IFTRUE 33863
33861: GO 33881
33863: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33864: LD_ADDR_VAR 0 3
33868: PUSH
33869: LD_INT 13
33871: PUSH
33872: LD_INT 14
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: ST_TO_ADDR
33879: GO 34302
33881: LD_INT 28
33883: DOUBLE
33884: EQUAL
33885: IFTRUE 33889
33887: GO 33907
33889: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33890: LD_ADDR_VAR 0 3
33894: PUSH
33895: LD_INT 13
33897: PUSH
33898: LD_INT 14
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: ST_TO_ADDR
33905: GO 34302
33907: LD_INT 29
33909: DOUBLE
33910: EQUAL
33911: IFTRUE 33915
33913: GO 33933
33915: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33916: LD_ADDR_VAR 0 3
33920: PUSH
33921: LD_INT 13
33923: PUSH
33924: LD_INT 14
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: ST_TO_ADDR
33931: GO 34302
33933: LD_INT 31
33935: DOUBLE
33936: EQUAL
33937: IFTRUE 33941
33939: GO 33959
33941: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33942: LD_ADDR_VAR 0 3
33946: PUSH
33947: LD_INT 13
33949: PUSH
33950: LD_INT 14
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: ST_TO_ADDR
33957: GO 34302
33959: LD_INT 26
33961: DOUBLE
33962: EQUAL
33963: IFTRUE 33967
33965: GO 33985
33967: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33968: LD_ADDR_VAR 0 3
33972: PUSH
33973: LD_INT 13
33975: PUSH
33976: LD_INT 14
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: ST_TO_ADDR
33983: GO 34302
33985: LD_INT 42
33987: DOUBLE
33988: EQUAL
33989: IFTRUE 33993
33991: GO 34019
33993: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33994: LD_ADDR_VAR 0 3
33998: PUSH
33999: LD_INT 21
34001: PUSH
34002: LD_INT 22
34004: PUSH
34005: LD_INT 23
34007: PUSH
34008: LD_INT 24
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: ST_TO_ADDR
34017: GO 34302
34019: LD_INT 43
34021: DOUBLE
34022: EQUAL
34023: IFTRUE 34027
34025: GO 34053
34027: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34028: LD_ADDR_VAR 0 3
34032: PUSH
34033: LD_INT 21
34035: PUSH
34036: LD_INT 22
34038: PUSH
34039: LD_INT 23
34041: PUSH
34042: LD_INT 24
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: ST_TO_ADDR
34051: GO 34302
34053: LD_INT 44
34055: DOUBLE
34056: EQUAL
34057: IFTRUE 34061
34059: GO 34087
34061: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34062: LD_ADDR_VAR 0 3
34066: PUSH
34067: LD_INT 21
34069: PUSH
34070: LD_INT 22
34072: PUSH
34073: LD_INT 23
34075: PUSH
34076: LD_INT 24
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: ST_TO_ADDR
34085: GO 34302
34087: LD_INT 45
34089: DOUBLE
34090: EQUAL
34091: IFTRUE 34095
34093: GO 34121
34095: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34096: LD_ADDR_VAR 0 3
34100: PUSH
34101: LD_INT 21
34103: PUSH
34104: LD_INT 22
34106: PUSH
34107: LD_INT 23
34109: PUSH
34110: LD_INT 24
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: ST_TO_ADDR
34119: GO 34302
34121: LD_INT 49
34123: DOUBLE
34124: EQUAL
34125: IFTRUE 34129
34127: GO 34155
34129: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34130: LD_ADDR_VAR 0 3
34134: PUSH
34135: LD_INT 21
34137: PUSH
34138: LD_INT 22
34140: PUSH
34141: LD_INT 23
34143: PUSH
34144: LD_INT 24
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: ST_TO_ADDR
34153: GO 34302
34155: LD_INT 51
34157: DOUBLE
34158: EQUAL
34159: IFTRUE 34163
34161: GO 34189
34163: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34164: LD_ADDR_VAR 0 3
34168: PUSH
34169: LD_INT 21
34171: PUSH
34172: LD_INT 22
34174: PUSH
34175: LD_INT 23
34177: PUSH
34178: LD_INT 24
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: ST_TO_ADDR
34187: GO 34302
34189: LD_INT 52
34191: DOUBLE
34192: EQUAL
34193: IFTRUE 34197
34195: GO 34223
34197: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34198: LD_ADDR_VAR 0 3
34202: PUSH
34203: LD_INT 21
34205: PUSH
34206: LD_INT 22
34208: PUSH
34209: LD_INT 23
34211: PUSH
34212: LD_INT 24
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: ST_TO_ADDR
34221: GO 34302
34223: LD_INT 53
34225: DOUBLE
34226: EQUAL
34227: IFTRUE 34231
34229: GO 34249
34231: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34232: LD_ADDR_VAR 0 3
34236: PUSH
34237: LD_INT 23
34239: PUSH
34240: LD_INT 24
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: ST_TO_ADDR
34247: GO 34302
34249: LD_INT 46
34251: DOUBLE
34252: EQUAL
34253: IFTRUE 34257
34255: GO 34275
34257: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34258: LD_ADDR_VAR 0 3
34262: PUSH
34263: LD_INT 23
34265: PUSH
34266: LD_INT 24
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: ST_TO_ADDR
34273: GO 34302
34275: LD_INT 47
34277: DOUBLE
34278: EQUAL
34279: IFTRUE 34283
34281: GO 34301
34283: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34284: LD_ADDR_VAR 0 3
34288: PUSH
34289: LD_INT 23
34291: PUSH
34292: LD_INT 24
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: ST_TO_ADDR
34299: GO 34302
34301: POP
// result := ( chassis in result ) ;
34302: LD_ADDR_VAR 0 3
34306: PUSH
34307: LD_VAR 0 1
34311: PUSH
34312: LD_VAR 0 3
34316: IN
34317: ST_TO_ADDR
// end ;
34318: LD_VAR 0 3
34322: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34323: LD_INT 0
34325: PPUSH
34326: PPUSH
34327: PPUSH
34328: PPUSH
34329: PPUSH
34330: PPUSH
34331: PPUSH
// result := array ;
34332: LD_ADDR_VAR 0 5
34336: PUSH
34337: LD_VAR 0 1
34341: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34342: LD_VAR 0 1
34346: NOT
34347: PUSH
34348: LD_VAR 0 2
34352: NOT
34353: OR
34354: PUSH
34355: LD_VAR 0 3
34359: NOT
34360: OR
34361: PUSH
34362: LD_VAR 0 2
34366: PUSH
34367: LD_VAR 0 1
34371: GREATER
34372: OR
34373: PUSH
34374: LD_VAR 0 3
34378: PUSH
34379: LD_VAR 0 1
34383: GREATER
34384: OR
34385: IFFALSE 34389
// exit ;
34387: GO 34685
// if direction then
34389: LD_VAR 0 4
34393: IFFALSE 34457
// begin d := 1 ;
34395: LD_ADDR_VAR 0 9
34399: PUSH
34400: LD_INT 1
34402: ST_TO_ADDR
// if i_from > i_to then
34403: LD_VAR 0 2
34407: PUSH
34408: LD_VAR 0 3
34412: GREATER
34413: IFFALSE 34439
// length := ( array - i_from ) + i_to else
34415: LD_ADDR_VAR 0 11
34419: PUSH
34420: LD_VAR 0 1
34424: PUSH
34425: LD_VAR 0 2
34429: MINUS
34430: PUSH
34431: LD_VAR 0 3
34435: PLUS
34436: ST_TO_ADDR
34437: GO 34455
// length := i_to - i_from ;
34439: LD_ADDR_VAR 0 11
34443: PUSH
34444: LD_VAR 0 3
34448: PUSH
34449: LD_VAR 0 2
34453: MINUS
34454: ST_TO_ADDR
// end else
34455: GO 34518
// begin d := - 1 ;
34457: LD_ADDR_VAR 0 9
34461: PUSH
34462: LD_INT 1
34464: NEG
34465: ST_TO_ADDR
// if i_from > i_to then
34466: LD_VAR 0 2
34470: PUSH
34471: LD_VAR 0 3
34475: GREATER
34476: IFFALSE 34496
// length := i_from - i_to else
34478: LD_ADDR_VAR 0 11
34482: PUSH
34483: LD_VAR 0 2
34487: PUSH
34488: LD_VAR 0 3
34492: MINUS
34493: ST_TO_ADDR
34494: GO 34518
// length := ( array - i_to ) + i_from ;
34496: LD_ADDR_VAR 0 11
34500: PUSH
34501: LD_VAR 0 1
34505: PUSH
34506: LD_VAR 0 3
34510: MINUS
34511: PUSH
34512: LD_VAR 0 2
34516: PLUS
34517: ST_TO_ADDR
// end ; if not length then
34518: LD_VAR 0 11
34522: NOT
34523: IFFALSE 34527
// exit ;
34525: GO 34685
// tmp := array ;
34527: LD_ADDR_VAR 0 10
34531: PUSH
34532: LD_VAR 0 1
34536: ST_TO_ADDR
// for i = 1 to length do
34537: LD_ADDR_VAR 0 6
34541: PUSH
34542: DOUBLE
34543: LD_INT 1
34545: DEC
34546: ST_TO_ADDR
34547: LD_VAR 0 11
34551: PUSH
34552: FOR_TO
34553: IFFALSE 34673
// begin for j = 1 to array do
34555: LD_ADDR_VAR 0 7
34559: PUSH
34560: DOUBLE
34561: LD_INT 1
34563: DEC
34564: ST_TO_ADDR
34565: LD_VAR 0 1
34569: PUSH
34570: FOR_TO
34571: IFFALSE 34659
// begin k := j + d ;
34573: LD_ADDR_VAR 0 8
34577: PUSH
34578: LD_VAR 0 7
34582: PUSH
34583: LD_VAR 0 9
34587: PLUS
34588: ST_TO_ADDR
// if k > array then
34589: LD_VAR 0 8
34593: PUSH
34594: LD_VAR 0 1
34598: GREATER
34599: IFFALSE 34609
// k := 1 ;
34601: LD_ADDR_VAR 0 8
34605: PUSH
34606: LD_INT 1
34608: ST_TO_ADDR
// if not k then
34609: LD_VAR 0 8
34613: NOT
34614: IFFALSE 34626
// k := array ;
34616: LD_ADDR_VAR 0 8
34620: PUSH
34621: LD_VAR 0 1
34625: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34626: LD_ADDR_VAR 0 10
34630: PUSH
34631: LD_VAR 0 10
34635: PPUSH
34636: LD_VAR 0 8
34640: PPUSH
34641: LD_VAR 0 1
34645: PUSH
34646: LD_VAR 0 7
34650: ARRAY
34651: PPUSH
34652: CALL_OW 1
34656: ST_TO_ADDR
// end ;
34657: GO 34570
34659: POP
34660: POP
// array := tmp ;
34661: LD_ADDR_VAR 0 1
34665: PUSH
34666: LD_VAR 0 10
34670: ST_TO_ADDR
// end ;
34671: GO 34552
34673: POP
34674: POP
// result := array ;
34675: LD_ADDR_VAR 0 5
34679: PUSH
34680: LD_VAR 0 1
34684: ST_TO_ADDR
// end ;
34685: LD_VAR 0 5
34689: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34690: LD_INT 0
34692: PPUSH
34693: PPUSH
// result := 0 ;
34694: LD_ADDR_VAR 0 3
34698: PUSH
34699: LD_INT 0
34701: ST_TO_ADDR
// if not array or not value in array then
34702: LD_VAR 0 1
34706: NOT
34707: PUSH
34708: LD_VAR 0 2
34712: PUSH
34713: LD_VAR 0 1
34717: IN
34718: NOT
34719: OR
34720: IFFALSE 34724
// exit ;
34722: GO 34778
// for i = 1 to array do
34724: LD_ADDR_VAR 0 4
34728: PUSH
34729: DOUBLE
34730: LD_INT 1
34732: DEC
34733: ST_TO_ADDR
34734: LD_VAR 0 1
34738: PUSH
34739: FOR_TO
34740: IFFALSE 34776
// if value = array [ i ] then
34742: LD_VAR 0 2
34746: PUSH
34747: LD_VAR 0 1
34751: PUSH
34752: LD_VAR 0 4
34756: ARRAY
34757: EQUAL
34758: IFFALSE 34774
// begin result := i ;
34760: LD_ADDR_VAR 0 3
34764: PUSH
34765: LD_VAR 0 4
34769: ST_TO_ADDR
// exit ;
34770: POP
34771: POP
34772: GO 34778
// end ;
34774: GO 34739
34776: POP
34777: POP
// end ;
34778: LD_VAR 0 3
34782: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34783: LD_INT 0
34785: PPUSH
// vc_chassis := chassis ;
34786: LD_ADDR_OWVAR 37
34790: PUSH
34791: LD_VAR 0 1
34795: ST_TO_ADDR
// vc_engine := engine ;
34796: LD_ADDR_OWVAR 39
34800: PUSH
34801: LD_VAR 0 2
34805: ST_TO_ADDR
// vc_control := control ;
34806: LD_ADDR_OWVAR 38
34810: PUSH
34811: LD_VAR 0 3
34815: ST_TO_ADDR
// vc_weapon := weapon ;
34816: LD_ADDR_OWVAR 40
34820: PUSH
34821: LD_VAR 0 4
34825: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34826: LD_ADDR_OWVAR 41
34830: PUSH
34831: LD_VAR 0 5
34835: ST_TO_ADDR
// end ;
34836: LD_VAR 0 6
34840: RET
// export function WantPlant ( unit ) ; var task ; begin
34841: LD_INT 0
34843: PPUSH
34844: PPUSH
// result := false ;
34845: LD_ADDR_VAR 0 2
34849: PUSH
34850: LD_INT 0
34852: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34853: LD_ADDR_VAR 0 3
34857: PUSH
34858: LD_VAR 0 1
34862: PPUSH
34863: CALL_OW 437
34867: ST_TO_ADDR
// if task then
34868: LD_VAR 0 3
34872: IFFALSE 34900
// if task [ 1 ] [ 1 ] = p then
34874: LD_VAR 0 3
34878: PUSH
34879: LD_INT 1
34881: ARRAY
34882: PUSH
34883: LD_INT 1
34885: ARRAY
34886: PUSH
34887: LD_STRING p
34889: EQUAL
34890: IFFALSE 34900
// result := true ;
34892: LD_ADDR_VAR 0 2
34896: PUSH
34897: LD_INT 1
34899: ST_TO_ADDR
// end ;
34900: LD_VAR 0 2
34904: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34905: LD_INT 0
34907: PPUSH
34908: PPUSH
34909: PPUSH
34910: PPUSH
// if pos < 1 then
34911: LD_VAR 0 2
34915: PUSH
34916: LD_INT 1
34918: LESS
34919: IFFALSE 34923
// exit ;
34921: GO 35226
// if pos = 1 then
34923: LD_VAR 0 2
34927: PUSH
34928: LD_INT 1
34930: EQUAL
34931: IFFALSE 34964
// result := Replace ( arr , pos [ 1 ] , value ) else
34933: LD_ADDR_VAR 0 4
34937: PUSH
34938: LD_VAR 0 1
34942: PPUSH
34943: LD_VAR 0 2
34947: PUSH
34948: LD_INT 1
34950: ARRAY
34951: PPUSH
34952: LD_VAR 0 3
34956: PPUSH
34957: CALL_OW 1
34961: ST_TO_ADDR
34962: GO 35226
// begin tmp := arr ;
34964: LD_ADDR_VAR 0 6
34968: PUSH
34969: LD_VAR 0 1
34973: ST_TO_ADDR
// s_arr := [ tmp ] ;
34974: LD_ADDR_VAR 0 7
34978: PUSH
34979: LD_VAR 0 6
34983: PUSH
34984: EMPTY
34985: LIST
34986: ST_TO_ADDR
// for i = 1 to pos - 1 do
34987: LD_ADDR_VAR 0 5
34991: PUSH
34992: DOUBLE
34993: LD_INT 1
34995: DEC
34996: ST_TO_ADDR
34997: LD_VAR 0 2
35001: PUSH
35002: LD_INT 1
35004: MINUS
35005: PUSH
35006: FOR_TO
35007: IFFALSE 35052
// begin tmp := tmp [ pos [ i ] ] ;
35009: LD_ADDR_VAR 0 6
35013: PUSH
35014: LD_VAR 0 6
35018: PUSH
35019: LD_VAR 0 2
35023: PUSH
35024: LD_VAR 0 5
35028: ARRAY
35029: ARRAY
35030: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35031: LD_ADDR_VAR 0 7
35035: PUSH
35036: LD_VAR 0 7
35040: PUSH
35041: LD_VAR 0 6
35045: PUSH
35046: EMPTY
35047: LIST
35048: ADD
35049: ST_TO_ADDR
// end ;
35050: GO 35006
35052: POP
35053: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35054: LD_ADDR_VAR 0 6
35058: PUSH
35059: LD_VAR 0 6
35063: PPUSH
35064: LD_VAR 0 2
35068: PUSH
35069: LD_VAR 0 2
35073: ARRAY
35074: PPUSH
35075: LD_VAR 0 3
35079: PPUSH
35080: CALL_OW 1
35084: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35085: LD_ADDR_VAR 0 7
35089: PUSH
35090: LD_VAR 0 7
35094: PPUSH
35095: LD_VAR 0 7
35099: PPUSH
35100: LD_VAR 0 6
35104: PPUSH
35105: CALL_OW 1
35109: ST_TO_ADDR
// for i = s_arr downto 2 do
35110: LD_ADDR_VAR 0 5
35114: PUSH
35115: DOUBLE
35116: LD_VAR 0 7
35120: INC
35121: ST_TO_ADDR
35122: LD_INT 2
35124: PUSH
35125: FOR_DOWNTO
35126: IFFALSE 35210
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35128: LD_ADDR_VAR 0 6
35132: PUSH
35133: LD_VAR 0 7
35137: PUSH
35138: LD_VAR 0 5
35142: PUSH
35143: LD_INT 1
35145: MINUS
35146: ARRAY
35147: PPUSH
35148: LD_VAR 0 2
35152: PUSH
35153: LD_VAR 0 5
35157: PUSH
35158: LD_INT 1
35160: MINUS
35161: ARRAY
35162: PPUSH
35163: LD_VAR 0 7
35167: PUSH
35168: LD_VAR 0 5
35172: ARRAY
35173: PPUSH
35174: CALL_OW 1
35178: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35179: LD_ADDR_VAR 0 7
35183: PUSH
35184: LD_VAR 0 7
35188: PPUSH
35189: LD_VAR 0 5
35193: PUSH
35194: LD_INT 1
35196: MINUS
35197: PPUSH
35198: LD_VAR 0 6
35202: PPUSH
35203: CALL_OW 1
35207: ST_TO_ADDR
// end ;
35208: GO 35125
35210: POP
35211: POP
// result := s_arr [ 1 ] ;
35212: LD_ADDR_VAR 0 4
35216: PUSH
35217: LD_VAR 0 7
35221: PUSH
35222: LD_INT 1
35224: ARRAY
35225: ST_TO_ADDR
// end ; end ;
35226: LD_VAR 0 4
35230: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35231: LD_INT 0
35233: PPUSH
35234: PPUSH
// if not list then
35235: LD_VAR 0 1
35239: NOT
35240: IFFALSE 35244
// exit ;
35242: GO 35335
// i := list [ pos1 ] ;
35244: LD_ADDR_VAR 0 5
35248: PUSH
35249: LD_VAR 0 1
35253: PUSH
35254: LD_VAR 0 2
35258: ARRAY
35259: ST_TO_ADDR
// if not i then
35260: LD_VAR 0 5
35264: NOT
35265: IFFALSE 35269
// exit ;
35267: GO 35335
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35269: LD_ADDR_VAR 0 1
35273: PUSH
35274: LD_VAR 0 1
35278: PPUSH
35279: LD_VAR 0 2
35283: PPUSH
35284: LD_VAR 0 1
35288: PUSH
35289: LD_VAR 0 3
35293: ARRAY
35294: PPUSH
35295: CALL_OW 1
35299: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35300: LD_ADDR_VAR 0 1
35304: PUSH
35305: LD_VAR 0 1
35309: PPUSH
35310: LD_VAR 0 3
35314: PPUSH
35315: LD_VAR 0 5
35319: PPUSH
35320: CALL_OW 1
35324: ST_TO_ADDR
// result := list ;
35325: LD_ADDR_VAR 0 4
35329: PUSH
35330: LD_VAR 0 1
35334: ST_TO_ADDR
// end ;
35335: LD_VAR 0 4
35339: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35340: LD_INT 0
35342: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35343: LD_ADDR_VAR 0 5
35347: PUSH
35348: LD_VAR 0 1
35352: PPUSH
35353: CALL_OW 250
35357: PPUSH
35358: LD_VAR 0 1
35362: PPUSH
35363: CALL_OW 251
35367: PPUSH
35368: LD_VAR 0 2
35372: PPUSH
35373: LD_VAR 0 3
35377: PPUSH
35378: LD_VAR 0 4
35382: PPUSH
35383: CALL 35393 0 5
35387: ST_TO_ADDR
// end ;
35388: LD_VAR 0 5
35392: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35393: LD_INT 0
35395: PPUSH
35396: PPUSH
35397: PPUSH
35398: PPUSH
// if not list then
35399: LD_VAR 0 3
35403: NOT
35404: IFFALSE 35408
// exit ;
35406: GO 35796
// result := [ ] ;
35408: LD_ADDR_VAR 0 6
35412: PUSH
35413: EMPTY
35414: ST_TO_ADDR
// for i in list do
35415: LD_ADDR_VAR 0 7
35419: PUSH
35420: LD_VAR 0 3
35424: PUSH
35425: FOR_IN
35426: IFFALSE 35628
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35428: LD_ADDR_VAR 0 9
35432: PUSH
35433: LD_VAR 0 7
35437: PPUSH
35438: LD_VAR 0 1
35442: PPUSH
35443: LD_VAR 0 2
35447: PPUSH
35448: CALL_OW 297
35452: ST_TO_ADDR
// if not result then
35453: LD_VAR 0 6
35457: NOT
35458: IFFALSE 35484
// result := [ [ i , tmp ] ] else
35460: LD_ADDR_VAR 0 6
35464: PUSH
35465: LD_VAR 0 7
35469: PUSH
35470: LD_VAR 0 9
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: EMPTY
35480: LIST
35481: ST_TO_ADDR
35482: GO 35626
// begin if result [ result ] [ 2 ] < tmp then
35484: LD_VAR 0 6
35488: PUSH
35489: LD_VAR 0 6
35493: ARRAY
35494: PUSH
35495: LD_INT 2
35497: ARRAY
35498: PUSH
35499: LD_VAR 0 9
35503: LESS
35504: IFFALSE 35546
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35506: LD_ADDR_VAR 0 6
35510: PUSH
35511: LD_VAR 0 6
35515: PPUSH
35516: LD_VAR 0 6
35520: PUSH
35521: LD_INT 1
35523: PLUS
35524: PPUSH
35525: LD_VAR 0 7
35529: PUSH
35530: LD_VAR 0 9
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PPUSH
35539: CALL_OW 2
35543: ST_TO_ADDR
35544: GO 35626
// for j = 1 to result do
35546: LD_ADDR_VAR 0 8
35550: PUSH
35551: DOUBLE
35552: LD_INT 1
35554: DEC
35555: ST_TO_ADDR
35556: LD_VAR 0 6
35560: PUSH
35561: FOR_TO
35562: IFFALSE 35624
// begin if tmp < result [ j ] [ 2 ] then
35564: LD_VAR 0 9
35568: PUSH
35569: LD_VAR 0 6
35573: PUSH
35574: LD_VAR 0 8
35578: ARRAY
35579: PUSH
35580: LD_INT 2
35582: ARRAY
35583: LESS
35584: IFFALSE 35622
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35586: LD_ADDR_VAR 0 6
35590: PUSH
35591: LD_VAR 0 6
35595: PPUSH
35596: LD_VAR 0 8
35600: PPUSH
35601: LD_VAR 0 7
35605: PUSH
35606: LD_VAR 0 9
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PPUSH
35615: CALL_OW 2
35619: ST_TO_ADDR
// break ;
35620: GO 35624
// end ; end ;
35622: GO 35561
35624: POP
35625: POP
// end ; end ;
35626: GO 35425
35628: POP
35629: POP
// if result and not asc then
35630: LD_VAR 0 6
35634: PUSH
35635: LD_VAR 0 4
35639: NOT
35640: AND
35641: IFFALSE 35716
// begin tmp := result ;
35643: LD_ADDR_VAR 0 9
35647: PUSH
35648: LD_VAR 0 6
35652: ST_TO_ADDR
// for i = tmp downto 1 do
35653: LD_ADDR_VAR 0 7
35657: PUSH
35658: DOUBLE
35659: LD_VAR 0 9
35663: INC
35664: ST_TO_ADDR
35665: LD_INT 1
35667: PUSH
35668: FOR_DOWNTO
35669: IFFALSE 35714
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35671: LD_ADDR_VAR 0 6
35675: PUSH
35676: LD_VAR 0 6
35680: PPUSH
35681: LD_VAR 0 9
35685: PUSH
35686: LD_VAR 0 7
35690: MINUS
35691: PUSH
35692: LD_INT 1
35694: PLUS
35695: PPUSH
35696: LD_VAR 0 9
35700: PUSH
35701: LD_VAR 0 7
35705: ARRAY
35706: PPUSH
35707: CALL_OW 1
35711: ST_TO_ADDR
35712: GO 35668
35714: POP
35715: POP
// end ; tmp := [ ] ;
35716: LD_ADDR_VAR 0 9
35720: PUSH
35721: EMPTY
35722: ST_TO_ADDR
// if mode then
35723: LD_VAR 0 5
35727: IFFALSE 35796
// begin for i = 1 to result do
35729: LD_ADDR_VAR 0 7
35733: PUSH
35734: DOUBLE
35735: LD_INT 1
35737: DEC
35738: ST_TO_ADDR
35739: LD_VAR 0 6
35743: PUSH
35744: FOR_TO
35745: IFFALSE 35784
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35747: LD_ADDR_VAR 0 9
35751: PUSH
35752: LD_VAR 0 9
35756: PPUSH
35757: LD_VAR 0 7
35761: PPUSH
35762: LD_VAR 0 6
35766: PUSH
35767: LD_VAR 0 7
35771: ARRAY
35772: PUSH
35773: LD_INT 1
35775: ARRAY
35776: PPUSH
35777: CALL_OW 1
35781: ST_TO_ADDR
35782: GO 35744
35784: POP
35785: POP
// result := tmp ;
35786: LD_ADDR_VAR 0 6
35790: PUSH
35791: LD_VAR 0 9
35795: ST_TO_ADDR
// end ; end ;
35796: LD_VAR 0 6
35800: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35801: LD_INT 0
35803: PPUSH
35804: PPUSH
35805: PPUSH
35806: PPUSH
35807: PPUSH
35808: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35809: LD_ADDR_VAR 0 5
35813: PUSH
35814: LD_INT 0
35816: PUSH
35817: LD_INT 0
35819: PUSH
35820: LD_INT 0
35822: PUSH
35823: EMPTY
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: ST_TO_ADDR
// if not x or not y then
35831: LD_VAR 0 2
35835: NOT
35836: PUSH
35837: LD_VAR 0 3
35841: NOT
35842: OR
35843: IFFALSE 35847
// exit ;
35845: GO 37493
// if not range then
35847: LD_VAR 0 4
35851: NOT
35852: IFFALSE 35862
// range := 10 ;
35854: LD_ADDR_VAR 0 4
35858: PUSH
35859: LD_INT 10
35861: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35862: LD_ADDR_VAR 0 8
35866: PUSH
35867: LD_INT 81
35869: PUSH
35870: LD_VAR 0 1
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 92
35881: PUSH
35882: LD_VAR 0 2
35886: PUSH
35887: LD_VAR 0 3
35891: PUSH
35892: LD_VAR 0 4
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 3
35905: PUSH
35906: LD_INT 21
35908: PUSH
35909: LD_INT 3
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: LIST
35924: PPUSH
35925: CALL_OW 69
35929: ST_TO_ADDR
// if not tmp then
35930: LD_VAR 0 8
35934: NOT
35935: IFFALSE 35939
// exit ;
35937: GO 37493
// for i in tmp do
35939: LD_ADDR_VAR 0 6
35943: PUSH
35944: LD_VAR 0 8
35948: PUSH
35949: FOR_IN
35950: IFFALSE 37468
// begin points := [ 0 , 0 , 0 ] ;
35952: LD_ADDR_VAR 0 9
35956: PUSH
35957: LD_INT 0
35959: PUSH
35960: LD_INT 0
35962: PUSH
35963: LD_INT 0
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: LIST
35970: ST_TO_ADDR
// bpoints := 1 ;
35971: LD_ADDR_VAR 0 10
35975: PUSH
35976: LD_INT 1
35978: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35979: LD_VAR 0 6
35983: PPUSH
35984: CALL_OW 247
35988: PUSH
35989: LD_INT 1
35991: DOUBLE
35992: EQUAL
35993: IFTRUE 35997
35995: GO 36575
35997: POP
// begin if GetClass ( i ) = 1 then
35998: LD_VAR 0 6
36002: PPUSH
36003: CALL_OW 257
36007: PUSH
36008: LD_INT 1
36010: EQUAL
36011: IFFALSE 36032
// points := [ 10 , 5 , 3 ] ;
36013: LD_ADDR_VAR 0 9
36017: PUSH
36018: LD_INT 10
36020: PUSH
36021: LD_INT 5
36023: PUSH
36024: LD_INT 3
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: LIST
36031: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36032: LD_VAR 0 6
36036: PPUSH
36037: CALL_OW 257
36041: PUSH
36042: LD_INT 2
36044: PUSH
36045: LD_INT 3
36047: PUSH
36048: LD_INT 4
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: LIST
36055: IN
36056: IFFALSE 36077
// points := [ 3 , 2 , 1 ] ;
36058: LD_ADDR_VAR 0 9
36062: PUSH
36063: LD_INT 3
36065: PUSH
36066: LD_INT 2
36068: PUSH
36069: LD_INT 1
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: LIST
36076: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36077: LD_VAR 0 6
36081: PPUSH
36082: CALL_OW 257
36086: PUSH
36087: LD_INT 5
36089: EQUAL
36090: IFFALSE 36111
// points := [ 130 , 5 , 2 ] ;
36092: LD_ADDR_VAR 0 9
36096: PUSH
36097: LD_INT 130
36099: PUSH
36100: LD_INT 5
36102: PUSH
36103: LD_INT 2
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: LIST
36110: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36111: LD_VAR 0 6
36115: PPUSH
36116: CALL_OW 257
36120: PUSH
36121: LD_INT 8
36123: EQUAL
36124: IFFALSE 36145
// points := [ 35 , 35 , 30 ] ;
36126: LD_ADDR_VAR 0 9
36130: PUSH
36131: LD_INT 35
36133: PUSH
36134: LD_INT 35
36136: PUSH
36137: LD_INT 30
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: LIST
36144: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36145: LD_VAR 0 6
36149: PPUSH
36150: CALL_OW 257
36154: PUSH
36155: LD_INT 9
36157: EQUAL
36158: IFFALSE 36179
// points := [ 20 , 55 , 40 ] ;
36160: LD_ADDR_VAR 0 9
36164: PUSH
36165: LD_INT 20
36167: PUSH
36168: LD_INT 55
36170: PUSH
36171: LD_INT 40
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: LIST
36178: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36179: LD_VAR 0 6
36183: PPUSH
36184: CALL_OW 257
36188: PUSH
36189: LD_INT 12
36191: PUSH
36192: LD_INT 16
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: IN
36199: IFFALSE 36220
// points := [ 5 , 3 , 2 ] ;
36201: LD_ADDR_VAR 0 9
36205: PUSH
36206: LD_INT 5
36208: PUSH
36209: LD_INT 3
36211: PUSH
36212: LD_INT 2
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: LIST
36219: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36220: LD_VAR 0 6
36224: PPUSH
36225: CALL_OW 257
36229: PUSH
36230: LD_INT 17
36232: EQUAL
36233: IFFALSE 36254
// points := [ 100 , 50 , 75 ] ;
36235: LD_ADDR_VAR 0 9
36239: PUSH
36240: LD_INT 100
36242: PUSH
36243: LD_INT 50
36245: PUSH
36246: LD_INT 75
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: LIST
36253: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36254: LD_VAR 0 6
36258: PPUSH
36259: CALL_OW 257
36263: PUSH
36264: LD_INT 15
36266: EQUAL
36267: IFFALSE 36288
// points := [ 10 , 5 , 3 ] ;
36269: LD_ADDR_VAR 0 9
36273: PUSH
36274: LD_INT 10
36276: PUSH
36277: LD_INT 5
36279: PUSH
36280: LD_INT 3
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: LIST
36287: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36288: LD_VAR 0 6
36292: PPUSH
36293: CALL_OW 257
36297: PUSH
36298: LD_INT 14
36300: EQUAL
36301: IFFALSE 36322
// points := [ 10 , 0 , 0 ] ;
36303: LD_ADDR_VAR 0 9
36307: PUSH
36308: LD_INT 10
36310: PUSH
36311: LD_INT 0
36313: PUSH
36314: LD_INT 0
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: LIST
36321: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36322: LD_VAR 0 6
36326: PPUSH
36327: CALL_OW 257
36331: PUSH
36332: LD_INT 11
36334: EQUAL
36335: IFFALSE 36356
// points := [ 30 , 10 , 5 ] ;
36337: LD_ADDR_VAR 0 9
36341: PUSH
36342: LD_INT 30
36344: PUSH
36345: LD_INT 10
36347: PUSH
36348: LD_INT 5
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: LIST
36355: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36356: LD_VAR 0 1
36360: PPUSH
36361: LD_INT 5
36363: PPUSH
36364: CALL_OW 321
36368: PUSH
36369: LD_INT 2
36371: EQUAL
36372: IFFALSE 36389
// bpoints := bpoints * 1.8 ;
36374: LD_ADDR_VAR 0 10
36378: PUSH
36379: LD_VAR 0 10
36383: PUSH
36384: LD_REAL  1.80000000000000E+0000
36387: MUL
36388: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36389: LD_VAR 0 6
36393: PPUSH
36394: CALL_OW 257
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: LD_INT 2
36404: PUSH
36405: LD_INT 3
36407: PUSH
36408: LD_INT 4
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: IN
36417: PUSH
36418: LD_VAR 0 1
36422: PPUSH
36423: LD_INT 51
36425: PPUSH
36426: CALL_OW 321
36430: PUSH
36431: LD_INT 2
36433: EQUAL
36434: AND
36435: IFFALSE 36452
// bpoints := bpoints * 1.2 ;
36437: LD_ADDR_VAR 0 10
36441: PUSH
36442: LD_VAR 0 10
36446: PUSH
36447: LD_REAL  1.20000000000000E+0000
36450: MUL
36451: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36452: LD_VAR 0 6
36456: PPUSH
36457: CALL_OW 257
36461: PUSH
36462: LD_INT 5
36464: PUSH
36465: LD_INT 7
36467: PUSH
36468: LD_INT 9
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: LIST
36475: IN
36476: PUSH
36477: LD_VAR 0 1
36481: PPUSH
36482: LD_INT 52
36484: PPUSH
36485: CALL_OW 321
36489: PUSH
36490: LD_INT 2
36492: EQUAL
36493: AND
36494: IFFALSE 36511
// bpoints := bpoints * 1.5 ;
36496: LD_ADDR_VAR 0 10
36500: PUSH
36501: LD_VAR 0 10
36505: PUSH
36506: LD_REAL  1.50000000000000E+0000
36509: MUL
36510: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36511: LD_VAR 0 1
36515: PPUSH
36516: LD_INT 66
36518: PPUSH
36519: CALL_OW 321
36523: PUSH
36524: LD_INT 2
36526: EQUAL
36527: IFFALSE 36544
// bpoints := bpoints * 1.1 ;
36529: LD_ADDR_VAR 0 10
36533: PUSH
36534: LD_VAR 0 10
36538: PUSH
36539: LD_REAL  1.10000000000000E+0000
36542: MUL
36543: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36544: LD_ADDR_VAR 0 10
36548: PUSH
36549: LD_VAR 0 10
36553: PUSH
36554: LD_VAR 0 6
36558: PPUSH
36559: LD_INT 1
36561: PPUSH
36562: CALL_OW 259
36566: PUSH
36567: LD_REAL  1.15000000000000E+0000
36570: MUL
36571: MUL
36572: ST_TO_ADDR
// end ; unit_vehicle :
36573: GO 37397
36575: LD_INT 2
36577: DOUBLE
36578: EQUAL
36579: IFTRUE 36583
36581: GO 37385
36583: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36584: LD_VAR 0 6
36588: PPUSH
36589: CALL_OW 264
36593: PUSH
36594: LD_INT 2
36596: PUSH
36597: LD_INT 42
36599: PUSH
36600: LD_INT 24
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: LIST
36607: IN
36608: IFFALSE 36629
// points := [ 25 , 5 , 3 ] ;
36610: LD_ADDR_VAR 0 9
36614: PUSH
36615: LD_INT 25
36617: PUSH
36618: LD_INT 5
36620: PUSH
36621: LD_INT 3
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: LIST
36628: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36629: LD_VAR 0 6
36633: PPUSH
36634: CALL_OW 264
36638: PUSH
36639: LD_INT 4
36641: PUSH
36642: LD_INT 43
36644: PUSH
36645: LD_INT 25
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: LIST
36652: IN
36653: IFFALSE 36674
// points := [ 40 , 15 , 5 ] ;
36655: LD_ADDR_VAR 0 9
36659: PUSH
36660: LD_INT 40
36662: PUSH
36663: LD_INT 15
36665: PUSH
36666: LD_INT 5
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: LIST
36673: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36674: LD_VAR 0 6
36678: PPUSH
36679: CALL_OW 264
36683: PUSH
36684: LD_INT 3
36686: PUSH
36687: LD_INT 23
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: IN
36694: IFFALSE 36715
// points := [ 7 , 25 , 8 ] ;
36696: LD_ADDR_VAR 0 9
36700: PUSH
36701: LD_INT 7
36703: PUSH
36704: LD_INT 25
36706: PUSH
36707: LD_INT 8
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: LIST
36714: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36715: LD_VAR 0 6
36719: PPUSH
36720: CALL_OW 264
36724: PUSH
36725: LD_INT 5
36727: PUSH
36728: LD_INT 27
36730: PUSH
36731: LD_INT 44
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: LIST
36738: IN
36739: IFFALSE 36760
// points := [ 14 , 50 , 16 ] ;
36741: LD_ADDR_VAR 0 9
36745: PUSH
36746: LD_INT 14
36748: PUSH
36749: LD_INT 50
36751: PUSH
36752: LD_INT 16
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: LIST
36759: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36760: LD_VAR 0 6
36764: PPUSH
36765: CALL_OW 264
36769: PUSH
36770: LD_INT 6
36772: PUSH
36773: LD_INT 46
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: IN
36780: IFFALSE 36801
// points := [ 32 , 120 , 70 ] ;
36782: LD_ADDR_VAR 0 9
36786: PUSH
36787: LD_INT 32
36789: PUSH
36790: LD_INT 120
36792: PUSH
36793: LD_INT 70
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: LIST
36800: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
36801: LD_VAR 0 6
36805: PPUSH
36806: CALL_OW 264
36810: PUSH
36811: LD_INT 7
36813: PUSH
36814: LD_INT 28
36816: PUSH
36817: LD_INT 45
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: LIST
36824: IN
36825: IFFALSE 36846
// points := [ 35 , 20 , 45 ] ;
36827: LD_ADDR_VAR 0 9
36831: PUSH
36832: LD_INT 35
36834: PUSH
36835: LD_INT 20
36837: PUSH
36838: LD_INT 45
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: LIST
36845: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36846: LD_VAR 0 6
36850: PPUSH
36851: CALL_OW 264
36855: PUSH
36856: LD_INT 47
36858: PUSH
36859: EMPTY
36860: LIST
36861: IN
36862: IFFALSE 36883
// points := [ 67 , 45 , 75 ] ;
36864: LD_ADDR_VAR 0 9
36868: PUSH
36869: LD_INT 67
36871: PUSH
36872: LD_INT 45
36874: PUSH
36875: LD_INT 75
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: LIST
36882: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36883: LD_VAR 0 6
36887: PPUSH
36888: CALL_OW 264
36892: PUSH
36893: LD_INT 26
36895: PUSH
36896: EMPTY
36897: LIST
36898: IN
36899: IFFALSE 36920
// points := [ 120 , 30 , 80 ] ;
36901: LD_ADDR_VAR 0 9
36905: PUSH
36906: LD_INT 120
36908: PUSH
36909: LD_INT 30
36911: PUSH
36912: LD_INT 80
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: LIST
36919: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36920: LD_VAR 0 6
36924: PPUSH
36925: CALL_OW 264
36929: PUSH
36930: LD_INT 22
36932: PUSH
36933: EMPTY
36934: LIST
36935: IN
36936: IFFALSE 36957
// points := [ 40 , 1 , 1 ] ;
36938: LD_ADDR_VAR 0 9
36942: PUSH
36943: LD_INT 40
36945: PUSH
36946: LD_INT 1
36948: PUSH
36949: LD_INT 1
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: LIST
36956: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36957: LD_VAR 0 6
36961: PPUSH
36962: CALL_OW 264
36966: PUSH
36967: LD_INT 29
36969: PUSH
36970: EMPTY
36971: LIST
36972: IN
36973: IFFALSE 36994
// points := [ 70 , 200 , 400 ] ;
36975: LD_ADDR_VAR 0 9
36979: PUSH
36980: LD_INT 70
36982: PUSH
36983: LD_INT 200
36985: PUSH
36986: LD_INT 400
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: LIST
36993: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36994: LD_VAR 0 6
36998: PPUSH
36999: CALL_OW 264
37003: PUSH
37004: LD_INT 14
37006: PUSH
37007: LD_INT 53
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: IN
37014: IFFALSE 37035
// points := [ 40 , 10 , 20 ] ;
37016: LD_ADDR_VAR 0 9
37020: PUSH
37021: LD_INT 40
37023: PUSH
37024: LD_INT 10
37026: PUSH
37027: LD_INT 20
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: LIST
37034: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37035: LD_VAR 0 6
37039: PPUSH
37040: CALL_OW 264
37044: PUSH
37045: LD_INT 9
37047: PUSH
37048: EMPTY
37049: LIST
37050: IN
37051: IFFALSE 37072
// points := [ 5 , 70 , 20 ] ;
37053: LD_ADDR_VAR 0 9
37057: PUSH
37058: LD_INT 5
37060: PUSH
37061: LD_INT 70
37063: PUSH
37064: LD_INT 20
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: LIST
37071: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37072: LD_VAR 0 6
37076: PPUSH
37077: CALL_OW 264
37081: PUSH
37082: LD_INT 10
37084: PUSH
37085: EMPTY
37086: LIST
37087: IN
37088: IFFALSE 37109
// points := [ 35 , 110 , 70 ] ;
37090: LD_ADDR_VAR 0 9
37094: PUSH
37095: LD_INT 35
37097: PUSH
37098: LD_INT 110
37100: PUSH
37101: LD_INT 70
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: LIST
37108: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37109: LD_VAR 0 6
37113: PPUSH
37114: CALL_OW 265
37118: PUSH
37119: LD_INT 25
37121: EQUAL
37122: IFFALSE 37143
// points := [ 80 , 65 , 100 ] ;
37124: LD_ADDR_VAR 0 9
37128: PUSH
37129: LD_INT 80
37131: PUSH
37132: LD_INT 65
37134: PUSH
37135: LD_INT 100
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: LIST
37142: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37143: LD_VAR 0 6
37147: PPUSH
37148: CALL_OW 263
37152: PUSH
37153: LD_INT 1
37155: EQUAL
37156: IFFALSE 37191
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37158: LD_ADDR_VAR 0 10
37162: PUSH
37163: LD_VAR 0 10
37167: PUSH
37168: LD_VAR 0 6
37172: PPUSH
37173: CALL_OW 311
37177: PPUSH
37178: LD_INT 3
37180: PPUSH
37181: CALL_OW 259
37185: PUSH
37186: LD_INT 4
37188: MUL
37189: MUL
37190: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37191: LD_VAR 0 6
37195: PPUSH
37196: CALL_OW 263
37200: PUSH
37201: LD_INT 2
37203: EQUAL
37204: IFFALSE 37255
// begin j := IsControledBy ( i ) ;
37206: LD_ADDR_VAR 0 7
37210: PUSH
37211: LD_VAR 0 6
37215: PPUSH
37216: CALL_OW 312
37220: ST_TO_ADDR
// if j then
37221: LD_VAR 0 7
37225: IFFALSE 37255
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37227: LD_ADDR_VAR 0 10
37231: PUSH
37232: LD_VAR 0 10
37236: PUSH
37237: LD_VAR 0 7
37241: PPUSH
37242: LD_INT 3
37244: PPUSH
37245: CALL_OW 259
37249: PUSH
37250: LD_INT 3
37252: MUL
37253: MUL
37254: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37255: LD_VAR 0 6
37259: PPUSH
37260: CALL_OW 264
37264: PUSH
37265: LD_INT 5
37267: PUSH
37268: LD_INT 6
37270: PUSH
37271: LD_INT 46
37273: PUSH
37274: LD_INT 44
37276: PUSH
37277: LD_INT 47
37279: PUSH
37280: LD_INT 45
37282: PUSH
37283: LD_INT 28
37285: PUSH
37286: LD_INT 7
37288: PUSH
37289: LD_INT 27
37291: PUSH
37292: LD_INT 29
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: IN
37307: PUSH
37308: LD_VAR 0 1
37312: PPUSH
37313: LD_INT 52
37315: PPUSH
37316: CALL_OW 321
37320: PUSH
37321: LD_INT 2
37323: EQUAL
37324: AND
37325: IFFALSE 37342
// bpoints := bpoints * 1.2 ;
37327: LD_ADDR_VAR 0 10
37331: PUSH
37332: LD_VAR 0 10
37336: PUSH
37337: LD_REAL  1.20000000000000E+0000
37340: MUL
37341: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37342: LD_VAR 0 6
37346: PPUSH
37347: CALL_OW 264
37351: PUSH
37352: LD_INT 6
37354: PUSH
37355: LD_INT 46
37357: PUSH
37358: LD_INT 47
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: LIST
37365: IN
37366: IFFALSE 37383
// bpoints := bpoints * 1.2 ;
37368: LD_ADDR_VAR 0 10
37372: PUSH
37373: LD_VAR 0 10
37377: PUSH
37378: LD_REAL  1.20000000000000E+0000
37381: MUL
37382: ST_TO_ADDR
// end ; unit_building :
37383: GO 37397
37385: LD_INT 3
37387: DOUBLE
37388: EQUAL
37389: IFTRUE 37393
37391: GO 37396
37393: POP
// ; end ;
37394: GO 37397
37396: POP
// for j = 1 to 3 do
37397: LD_ADDR_VAR 0 7
37401: PUSH
37402: DOUBLE
37403: LD_INT 1
37405: DEC
37406: ST_TO_ADDR
37407: LD_INT 3
37409: PUSH
37410: FOR_TO
37411: IFFALSE 37464
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37413: LD_ADDR_VAR 0 5
37417: PUSH
37418: LD_VAR 0 5
37422: PPUSH
37423: LD_VAR 0 7
37427: PPUSH
37428: LD_VAR 0 5
37432: PUSH
37433: LD_VAR 0 7
37437: ARRAY
37438: PUSH
37439: LD_VAR 0 9
37443: PUSH
37444: LD_VAR 0 7
37448: ARRAY
37449: PUSH
37450: LD_VAR 0 10
37454: MUL
37455: PLUS
37456: PPUSH
37457: CALL_OW 1
37461: ST_TO_ADDR
37462: GO 37410
37464: POP
37465: POP
// end ;
37466: GO 35949
37468: POP
37469: POP
// result := Replace ( result , 4 , tmp ) ;
37470: LD_ADDR_VAR 0 5
37474: PUSH
37475: LD_VAR 0 5
37479: PPUSH
37480: LD_INT 4
37482: PPUSH
37483: LD_VAR 0 8
37487: PPUSH
37488: CALL_OW 1
37492: ST_TO_ADDR
// end ;
37493: LD_VAR 0 5
37497: RET
// export function DangerAtRange ( unit , range ) ; begin
37498: LD_INT 0
37500: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37501: LD_ADDR_VAR 0 3
37505: PUSH
37506: LD_VAR 0 1
37510: PPUSH
37511: CALL_OW 255
37515: PPUSH
37516: LD_VAR 0 1
37520: PPUSH
37521: CALL_OW 250
37525: PPUSH
37526: LD_VAR 0 1
37530: PPUSH
37531: CALL_OW 251
37535: PPUSH
37536: LD_VAR 0 2
37540: PPUSH
37541: CALL 35801 0 4
37545: ST_TO_ADDR
// end ;
37546: LD_VAR 0 3
37550: RET
// export function DangerInArea ( side , area ) ; begin
37551: LD_INT 0
37553: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37554: LD_ADDR_VAR 0 3
37558: PUSH
37559: LD_VAR 0 2
37563: PPUSH
37564: LD_INT 81
37566: PUSH
37567: LD_VAR 0 1
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PPUSH
37576: CALL_OW 70
37580: ST_TO_ADDR
// end ;
37581: LD_VAR 0 3
37585: RET
// export function IsExtension ( b ) ; begin
37586: LD_INT 0
37588: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37589: LD_ADDR_VAR 0 2
37593: PUSH
37594: LD_VAR 0 1
37598: PUSH
37599: LD_INT 23
37601: PUSH
37602: LD_INT 20
37604: PUSH
37605: LD_INT 22
37607: PUSH
37608: LD_INT 17
37610: PUSH
37611: LD_INT 24
37613: PUSH
37614: LD_INT 21
37616: PUSH
37617: LD_INT 19
37619: PUSH
37620: LD_INT 16
37622: PUSH
37623: LD_INT 25
37625: PUSH
37626: LD_INT 18
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: IN
37641: ST_TO_ADDR
// end ;
37642: LD_VAR 0 2
37646: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
37647: LD_INT 0
37649: PPUSH
37650: PPUSH
37651: PPUSH
// result := [ ] ;
37652: LD_ADDR_VAR 0 3
37656: PUSH
37657: EMPTY
37658: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37659: LD_ADDR_VAR 0 4
37663: PUSH
37664: LD_VAR 0 2
37668: PPUSH
37669: LD_INT 21
37671: PUSH
37672: LD_INT 3
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PPUSH
37679: CALL_OW 70
37683: ST_TO_ADDR
// if not tmp then
37684: LD_VAR 0 4
37688: NOT
37689: IFFALSE 37693
// exit ;
37691: GO 37751
// for i in tmp do
37693: LD_ADDR_VAR 0 5
37697: PUSH
37698: LD_VAR 0 4
37702: PUSH
37703: FOR_IN
37704: IFFALSE 37739
// if GetBase ( i ) <> base then
37706: LD_VAR 0 5
37710: PPUSH
37711: CALL_OW 274
37715: PUSH
37716: LD_VAR 0 1
37720: NONEQUAL
37721: IFFALSE 37737
// ComLinkToBase ( base , i ) ;
37723: LD_VAR 0 1
37727: PPUSH
37728: LD_VAR 0 5
37732: PPUSH
37733: CALL_OW 169
37737: GO 37703
37739: POP
37740: POP
// result := tmp ;
37741: LD_ADDR_VAR 0 3
37745: PUSH
37746: LD_VAR 0 4
37750: ST_TO_ADDR
// end ;
37751: LD_VAR 0 3
37755: RET
// export function ComComplete ( unit , b ) ; var i ; begin
37756: LD_INT 0
37758: PPUSH
37759: PPUSH
// if BuildingStatus ( b ) = bs_build then
37760: LD_VAR 0 2
37764: PPUSH
37765: CALL_OW 461
37769: PUSH
37770: LD_INT 1
37772: EQUAL
37773: IFFALSE 37833
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37775: LD_VAR 0 1
37779: PPUSH
37780: LD_STRING h
37782: PUSH
37783: LD_VAR 0 2
37787: PPUSH
37788: CALL_OW 250
37792: PUSH
37793: LD_VAR 0 2
37797: PPUSH
37798: CALL_OW 251
37802: PUSH
37803: LD_VAR 0 2
37807: PUSH
37808: LD_INT 0
37810: PUSH
37811: LD_INT 0
37813: PUSH
37814: LD_INT 0
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: PUSH
37826: EMPTY
37827: LIST
37828: PPUSH
37829: CALL_OW 446
// end ;
37833: LD_VAR 0 3
37837: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37838: LD_INT 0
37840: PPUSH
37841: PPUSH
37842: PPUSH
37843: PPUSH
37844: PPUSH
37845: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
37846: LD_VAR 0 1
37850: NOT
37851: PUSH
37852: LD_VAR 0 1
37856: PPUSH
37857: CALL_OW 263
37861: PUSH
37862: LD_INT 2
37864: EQUAL
37865: NOT
37866: OR
37867: IFFALSE 37871
// exit ;
37869: GO 38187
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37871: LD_ADDR_VAR 0 6
37875: PUSH
37876: LD_INT 22
37878: PUSH
37879: LD_VAR 0 1
37883: PPUSH
37884: CALL_OW 255
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 2
37895: PUSH
37896: LD_INT 30
37898: PUSH
37899: LD_INT 36
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 34
37908: PUSH
37909: LD_INT 31
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: LIST
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PPUSH
37925: CALL_OW 69
37929: ST_TO_ADDR
// if not tmp then
37930: LD_VAR 0 6
37934: NOT
37935: IFFALSE 37939
// exit ;
37937: GO 38187
// result := [ ] ;
37939: LD_ADDR_VAR 0 2
37943: PUSH
37944: EMPTY
37945: ST_TO_ADDR
// for i in tmp do
37946: LD_ADDR_VAR 0 3
37950: PUSH
37951: LD_VAR 0 6
37955: PUSH
37956: FOR_IN
37957: IFFALSE 38028
// begin t := UnitsInside ( i ) ;
37959: LD_ADDR_VAR 0 4
37963: PUSH
37964: LD_VAR 0 3
37968: PPUSH
37969: CALL_OW 313
37973: ST_TO_ADDR
// if t then
37974: LD_VAR 0 4
37978: IFFALSE 38026
// for j in t do
37980: LD_ADDR_VAR 0 7
37984: PUSH
37985: LD_VAR 0 4
37989: PUSH
37990: FOR_IN
37991: IFFALSE 38024
// result := Insert ( result , result + 1 , j ) ;
37993: LD_ADDR_VAR 0 2
37997: PUSH
37998: LD_VAR 0 2
38002: PPUSH
38003: LD_VAR 0 2
38007: PUSH
38008: LD_INT 1
38010: PLUS
38011: PPUSH
38012: LD_VAR 0 7
38016: PPUSH
38017: CALL_OW 2
38021: ST_TO_ADDR
38022: GO 37990
38024: POP
38025: POP
// end ;
38026: GO 37956
38028: POP
38029: POP
// if not result then
38030: LD_VAR 0 2
38034: NOT
38035: IFFALSE 38039
// exit ;
38037: GO 38187
// mech := result [ 1 ] ;
38039: LD_ADDR_VAR 0 5
38043: PUSH
38044: LD_VAR 0 2
38048: PUSH
38049: LD_INT 1
38051: ARRAY
38052: ST_TO_ADDR
// if result > 1 then
38053: LD_VAR 0 2
38057: PUSH
38058: LD_INT 1
38060: GREATER
38061: IFFALSE 38173
// for i = 2 to result do
38063: LD_ADDR_VAR 0 3
38067: PUSH
38068: DOUBLE
38069: LD_INT 2
38071: DEC
38072: ST_TO_ADDR
38073: LD_VAR 0 2
38077: PUSH
38078: FOR_TO
38079: IFFALSE 38171
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38081: LD_ADDR_VAR 0 4
38085: PUSH
38086: LD_VAR 0 2
38090: PUSH
38091: LD_VAR 0 3
38095: ARRAY
38096: PPUSH
38097: LD_INT 3
38099: PPUSH
38100: CALL_OW 259
38104: PUSH
38105: LD_VAR 0 2
38109: PUSH
38110: LD_VAR 0 3
38114: ARRAY
38115: PPUSH
38116: CALL_OW 432
38120: MINUS
38121: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38122: LD_VAR 0 4
38126: PUSH
38127: LD_VAR 0 5
38131: PPUSH
38132: LD_INT 3
38134: PPUSH
38135: CALL_OW 259
38139: PUSH
38140: LD_VAR 0 5
38144: PPUSH
38145: CALL_OW 432
38149: MINUS
38150: GREATEREQUAL
38151: IFFALSE 38169
// mech := result [ i ] ;
38153: LD_ADDR_VAR 0 5
38157: PUSH
38158: LD_VAR 0 2
38162: PUSH
38163: LD_VAR 0 3
38167: ARRAY
38168: ST_TO_ADDR
// end ;
38169: GO 38078
38171: POP
38172: POP
// ComLinkTo ( vehicle , mech ) ;
38173: LD_VAR 0 1
38177: PPUSH
38178: LD_VAR 0 5
38182: PPUSH
38183: CALL_OW 135
// end ;
38187: LD_VAR 0 2
38191: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38192: LD_INT 0
38194: PPUSH
38195: PPUSH
38196: PPUSH
38197: PPUSH
38198: PPUSH
38199: PPUSH
38200: PPUSH
38201: PPUSH
38202: PPUSH
38203: PPUSH
38204: PPUSH
38205: PPUSH
38206: PPUSH
// result := [ ] ;
38207: LD_ADDR_VAR 0 7
38211: PUSH
38212: EMPTY
38213: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38214: LD_VAR 0 1
38218: PPUSH
38219: CALL_OW 266
38223: PUSH
38224: LD_INT 0
38226: PUSH
38227: LD_INT 1
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: IN
38234: NOT
38235: IFFALSE 38239
// exit ;
38237: GO 39870
// if name then
38239: LD_VAR 0 3
38243: IFFALSE 38259
// SetBName ( base_dep , name ) ;
38245: LD_VAR 0 1
38249: PPUSH
38250: LD_VAR 0 3
38254: PPUSH
38255: CALL_OW 500
// base := GetBase ( base_dep ) ;
38259: LD_ADDR_VAR 0 15
38263: PUSH
38264: LD_VAR 0 1
38268: PPUSH
38269: CALL_OW 274
38273: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38274: LD_ADDR_VAR 0 16
38278: PUSH
38279: LD_VAR 0 1
38283: PPUSH
38284: CALL_OW 255
38288: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38289: LD_ADDR_VAR 0 17
38293: PUSH
38294: LD_VAR 0 1
38298: PPUSH
38299: CALL_OW 248
38303: ST_TO_ADDR
// if sources then
38304: LD_VAR 0 5
38308: IFFALSE 38355
// for i = 1 to 3 do
38310: LD_ADDR_VAR 0 8
38314: PUSH
38315: DOUBLE
38316: LD_INT 1
38318: DEC
38319: ST_TO_ADDR
38320: LD_INT 3
38322: PUSH
38323: FOR_TO
38324: IFFALSE 38353
// AddResourceType ( base , i , sources [ i ] ) ;
38326: LD_VAR 0 15
38330: PPUSH
38331: LD_VAR 0 8
38335: PPUSH
38336: LD_VAR 0 5
38340: PUSH
38341: LD_VAR 0 8
38345: ARRAY
38346: PPUSH
38347: CALL_OW 276
38351: GO 38323
38353: POP
38354: POP
// buildings := GetBaseBuildings ( base , area ) ;
38355: LD_ADDR_VAR 0 18
38359: PUSH
38360: LD_VAR 0 15
38364: PPUSH
38365: LD_VAR 0 2
38369: PPUSH
38370: CALL 37647 0 2
38374: ST_TO_ADDR
// InitHc ;
38375: CALL_OW 19
// InitUc ;
38379: CALL_OW 18
// uc_side := side ;
38383: LD_ADDR_OWVAR 20
38387: PUSH
38388: LD_VAR 0 16
38392: ST_TO_ADDR
// uc_nation := nation ;
38393: LD_ADDR_OWVAR 21
38397: PUSH
38398: LD_VAR 0 17
38402: ST_TO_ADDR
// if buildings then
38403: LD_VAR 0 18
38407: IFFALSE 39729
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38409: LD_ADDR_VAR 0 19
38413: PUSH
38414: LD_VAR 0 18
38418: PPUSH
38419: LD_INT 2
38421: PUSH
38422: LD_INT 30
38424: PUSH
38425: LD_INT 29
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 30
38434: PUSH
38435: LD_INT 30
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: LIST
38446: PPUSH
38447: CALL_OW 72
38451: ST_TO_ADDR
// if tmp then
38452: LD_VAR 0 19
38456: IFFALSE 38504
// for i in tmp do
38458: LD_ADDR_VAR 0 8
38462: PUSH
38463: LD_VAR 0 19
38467: PUSH
38468: FOR_IN
38469: IFFALSE 38502
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38471: LD_VAR 0 8
38475: PPUSH
38476: CALL_OW 250
38480: PPUSH
38481: LD_VAR 0 8
38485: PPUSH
38486: CALL_OW 251
38490: PPUSH
38491: LD_VAR 0 16
38495: PPUSH
38496: CALL_OW 441
38500: GO 38468
38502: POP
38503: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38504: LD_VAR 0 18
38508: PPUSH
38509: LD_INT 2
38511: PUSH
38512: LD_INT 30
38514: PUSH
38515: LD_INT 32
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 30
38524: PUSH
38525: LD_INT 33
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: LIST
38536: PPUSH
38537: CALL_OW 72
38541: IFFALSE 38629
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38543: LD_ADDR_VAR 0 8
38547: PUSH
38548: LD_VAR 0 18
38552: PPUSH
38553: LD_INT 2
38555: PUSH
38556: LD_INT 30
38558: PUSH
38559: LD_INT 32
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 30
38568: PUSH
38569: LD_INT 33
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: LIST
38580: PPUSH
38581: CALL_OW 72
38585: PUSH
38586: FOR_IN
38587: IFFALSE 38627
// begin if not GetBWeapon ( i ) then
38589: LD_VAR 0 8
38593: PPUSH
38594: CALL_OW 269
38598: NOT
38599: IFFALSE 38625
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38601: LD_VAR 0 8
38605: PPUSH
38606: LD_VAR 0 8
38610: PPUSH
38611: LD_VAR 0 2
38615: PPUSH
38616: CALL 39875 0 2
38620: PPUSH
38621: CALL_OW 431
// end ;
38625: GO 38586
38627: POP
38628: POP
// end ; for i = 1 to personel do
38629: LD_ADDR_VAR 0 8
38633: PUSH
38634: DOUBLE
38635: LD_INT 1
38637: DEC
38638: ST_TO_ADDR
38639: LD_VAR 0 6
38643: PUSH
38644: FOR_TO
38645: IFFALSE 39709
// begin if i > 4 then
38647: LD_VAR 0 8
38651: PUSH
38652: LD_INT 4
38654: GREATER
38655: IFFALSE 38659
// break ;
38657: GO 39709
// case i of 1 :
38659: LD_VAR 0 8
38663: PUSH
38664: LD_INT 1
38666: DOUBLE
38667: EQUAL
38668: IFTRUE 38672
38670: GO 38752
38672: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38673: LD_ADDR_VAR 0 12
38677: PUSH
38678: LD_VAR 0 18
38682: PPUSH
38683: LD_INT 22
38685: PUSH
38686: LD_VAR 0 16
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 58
38697: PUSH
38698: EMPTY
38699: LIST
38700: PUSH
38701: LD_INT 2
38703: PUSH
38704: LD_INT 30
38706: PUSH
38707: LD_INT 32
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 30
38716: PUSH
38717: LD_INT 4
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 30
38726: PUSH
38727: LD_INT 5
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: LIST
38744: PPUSH
38745: CALL_OW 72
38749: ST_TO_ADDR
38750: GO 38974
38752: LD_INT 2
38754: DOUBLE
38755: EQUAL
38756: IFTRUE 38760
38758: GO 38822
38760: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38761: LD_ADDR_VAR 0 12
38765: PUSH
38766: LD_VAR 0 18
38770: PPUSH
38771: LD_INT 22
38773: PUSH
38774: LD_VAR 0 16
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 2
38785: PUSH
38786: LD_INT 30
38788: PUSH
38789: LD_INT 0
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 30
38798: PUSH
38799: LD_INT 1
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: LIST
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PPUSH
38815: CALL_OW 72
38819: ST_TO_ADDR
38820: GO 38974
38822: LD_INT 3
38824: DOUBLE
38825: EQUAL
38826: IFTRUE 38830
38828: GO 38892
38830: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38831: LD_ADDR_VAR 0 12
38835: PUSH
38836: LD_VAR 0 18
38840: PPUSH
38841: LD_INT 22
38843: PUSH
38844: LD_VAR 0 16
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 2
38855: PUSH
38856: LD_INT 30
38858: PUSH
38859: LD_INT 2
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 30
38868: PUSH
38869: LD_INT 3
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: LIST
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PPUSH
38885: CALL_OW 72
38889: ST_TO_ADDR
38890: GO 38974
38892: LD_INT 4
38894: DOUBLE
38895: EQUAL
38896: IFTRUE 38900
38898: GO 38973
38900: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38901: LD_ADDR_VAR 0 12
38905: PUSH
38906: LD_VAR 0 18
38910: PPUSH
38911: LD_INT 22
38913: PUSH
38914: LD_VAR 0 16
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 2
38925: PUSH
38926: LD_INT 30
38928: PUSH
38929: LD_INT 6
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 30
38938: PUSH
38939: LD_INT 7
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 30
38948: PUSH
38949: LD_INT 8
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PPUSH
38966: CALL_OW 72
38970: ST_TO_ADDR
38971: GO 38974
38973: POP
// if i = 1 then
38974: LD_VAR 0 8
38978: PUSH
38979: LD_INT 1
38981: EQUAL
38982: IFFALSE 39093
// begin tmp := [ ] ;
38984: LD_ADDR_VAR 0 19
38988: PUSH
38989: EMPTY
38990: ST_TO_ADDR
// for j in f do
38991: LD_ADDR_VAR 0 9
38995: PUSH
38996: LD_VAR 0 12
39000: PUSH
39001: FOR_IN
39002: IFFALSE 39075
// if GetBType ( j ) = b_bunker then
39004: LD_VAR 0 9
39008: PPUSH
39009: CALL_OW 266
39013: PUSH
39014: LD_INT 32
39016: EQUAL
39017: IFFALSE 39044
// tmp := Insert ( tmp , 1 , j ) else
39019: LD_ADDR_VAR 0 19
39023: PUSH
39024: LD_VAR 0 19
39028: PPUSH
39029: LD_INT 1
39031: PPUSH
39032: LD_VAR 0 9
39036: PPUSH
39037: CALL_OW 2
39041: ST_TO_ADDR
39042: GO 39073
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39044: LD_ADDR_VAR 0 19
39048: PUSH
39049: LD_VAR 0 19
39053: PPUSH
39054: LD_VAR 0 19
39058: PUSH
39059: LD_INT 1
39061: PLUS
39062: PPUSH
39063: LD_VAR 0 9
39067: PPUSH
39068: CALL_OW 2
39072: ST_TO_ADDR
39073: GO 39001
39075: POP
39076: POP
// if tmp then
39077: LD_VAR 0 19
39081: IFFALSE 39093
// f := tmp ;
39083: LD_ADDR_VAR 0 12
39087: PUSH
39088: LD_VAR 0 19
39092: ST_TO_ADDR
// end ; x := personel [ i ] ;
39093: LD_ADDR_VAR 0 13
39097: PUSH
39098: LD_VAR 0 6
39102: PUSH
39103: LD_VAR 0 8
39107: ARRAY
39108: ST_TO_ADDR
// if x = - 1 then
39109: LD_VAR 0 13
39113: PUSH
39114: LD_INT 1
39116: NEG
39117: EQUAL
39118: IFFALSE 39327
// begin for j in f do
39120: LD_ADDR_VAR 0 9
39124: PUSH
39125: LD_VAR 0 12
39129: PUSH
39130: FOR_IN
39131: IFFALSE 39323
// repeat InitHc ;
39133: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39137: LD_VAR 0 9
39141: PPUSH
39142: CALL_OW 266
39146: PUSH
39147: LD_INT 5
39149: EQUAL
39150: IFFALSE 39220
// begin if UnitsInside ( j ) < 3 then
39152: LD_VAR 0 9
39156: PPUSH
39157: CALL_OW 313
39161: PUSH
39162: LD_INT 3
39164: LESS
39165: IFFALSE 39201
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39167: LD_INT 0
39169: PPUSH
39170: LD_INT 5
39172: PUSH
39173: LD_INT 8
39175: PUSH
39176: LD_INT 9
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: LIST
39183: PUSH
39184: LD_VAR 0 17
39188: ARRAY
39189: PPUSH
39190: LD_VAR 0 4
39194: PPUSH
39195: CALL_OW 380
39199: GO 39218
// PrepareHuman ( false , i , skill ) ;
39201: LD_INT 0
39203: PPUSH
39204: LD_VAR 0 8
39208: PPUSH
39209: LD_VAR 0 4
39213: PPUSH
39214: CALL_OW 380
// end else
39218: GO 39237
// PrepareHuman ( false , i , skill ) ;
39220: LD_INT 0
39222: PPUSH
39223: LD_VAR 0 8
39227: PPUSH
39228: LD_VAR 0 4
39232: PPUSH
39233: CALL_OW 380
// un := CreateHuman ;
39237: LD_ADDR_VAR 0 14
39241: PUSH
39242: CALL_OW 44
39246: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39247: LD_ADDR_VAR 0 7
39251: PUSH
39252: LD_VAR 0 7
39256: PPUSH
39257: LD_INT 1
39259: PPUSH
39260: LD_VAR 0 14
39264: PPUSH
39265: CALL_OW 2
39269: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39270: LD_VAR 0 14
39274: PPUSH
39275: LD_VAR 0 9
39279: PPUSH
39280: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39284: LD_VAR 0 9
39288: PPUSH
39289: CALL_OW 313
39293: PUSH
39294: LD_INT 6
39296: EQUAL
39297: PUSH
39298: LD_VAR 0 9
39302: PPUSH
39303: CALL_OW 266
39307: PUSH
39308: LD_INT 32
39310: PUSH
39311: LD_INT 31
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: IN
39318: OR
39319: IFFALSE 39133
39321: GO 39130
39323: POP
39324: POP
// end else
39325: GO 39707
// for j = 1 to x do
39327: LD_ADDR_VAR 0 9
39331: PUSH
39332: DOUBLE
39333: LD_INT 1
39335: DEC
39336: ST_TO_ADDR
39337: LD_VAR 0 13
39341: PUSH
39342: FOR_TO
39343: IFFALSE 39705
// begin InitHc ;
39345: CALL_OW 19
// if not f then
39349: LD_VAR 0 12
39353: NOT
39354: IFFALSE 39443
// begin PrepareHuman ( false , i , skill ) ;
39356: LD_INT 0
39358: PPUSH
39359: LD_VAR 0 8
39363: PPUSH
39364: LD_VAR 0 4
39368: PPUSH
39369: CALL_OW 380
// un := CreateHuman ;
39373: LD_ADDR_VAR 0 14
39377: PUSH
39378: CALL_OW 44
39382: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39383: LD_ADDR_VAR 0 7
39387: PUSH
39388: LD_VAR 0 7
39392: PPUSH
39393: LD_INT 1
39395: PPUSH
39396: LD_VAR 0 14
39400: PPUSH
39401: CALL_OW 2
39405: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39406: LD_VAR 0 14
39410: PPUSH
39411: LD_VAR 0 1
39415: PPUSH
39416: CALL_OW 250
39420: PPUSH
39421: LD_VAR 0 1
39425: PPUSH
39426: CALL_OW 251
39430: PPUSH
39431: LD_INT 10
39433: PPUSH
39434: LD_INT 0
39436: PPUSH
39437: CALL_OW 50
// continue ;
39441: GO 39342
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39443: LD_VAR 0 12
39447: PUSH
39448: LD_INT 1
39450: ARRAY
39451: PPUSH
39452: CALL_OW 313
39456: PUSH
39457: LD_VAR 0 12
39461: PUSH
39462: LD_INT 1
39464: ARRAY
39465: PPUSH
39466: CALL_OW 266
39470: PUSH
39471: LD_INT 32
39473: PUSH
39474: LD_INT 31
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: IN
39481: AND
39482: PUSH
39483: LD_VAR 0 12
39487: PUSH
39488: LD_INT 1
39490: ARRAY
39491: PPUSH
39492: CALL_OW 313
39496: PUSH
39497: LD_INT 6
39499: EQUAL
39500: OR
39501: IFFALSE 39521
// f := Delete ( f , 1 ) ;
39503: LD_ADDR_VAR 0 12
39507: PUSH
39508: LD_VAR 0 12
39512: PPUSH
39513: LD_INT 1
39515: PPUSH
39516: CALL_OW 3
39520: ST_TO_ADDR
// if not f then
39521: LD_VAR 0 12
39525: NOT
39526: IFFALSE 39544
// begin x := x + 2 ;
39528: LD_ADDR_VAR 0 13
39532: PUSH
39533: LD_VAR 0 13
39537: PUSH
39538: LD_INT 2
39540: PLUS
39541: ST_TO_ADDR
// continue ;
39542: GO 39342
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39544: LD_VAR 0 12
39548: PUSH
39549: LD_INT 1
39551: ARRAY
39552: PPUSH
39553: CALL_OW 266
39557: PUSH
39558: LD_INT 5
39560: EQUAL
39561: IFFALSE 39635
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39563: LD_VAR 0 12
39567: PUSH
39568: LD_INT 1
39570: ARRAY
39571: PPUSH
39572: CALL_OW 313
39576: PUSH
39577: LD_INT 3
39579: LESS
39580: IFFALSE 39616
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39582: LD_INT 0
39584: PPUSH
39585: LD_INT 5
39587: PUSH
39588: LD_INT 8
39590: PUSH
39591: LD_INT 9
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: LIST
39598: PUSH
39599: LD_VAR 0 17
39603: ARRAY
39604: PPUSH
39605: LD_VAR 0 4
39609: PPUSH
39610: CALL_OW 380
39614: GO 39633
// PrepareHuman ( false , i , skill ) ;
39616: LD_INT 0
39618: PPUSH
39619: LD_VAR 0 8
39623: PPUSH
39624: LD_VAR 0 4
39628: PPUSH
39629: CALL_OW 380
// end else
39633: GO 39652
// PrepareHuman ( false , i , skill ) ;
39635: LD_INT 0
39637: PPUSH
39638: LD_VAR 0 8
39642: PPUSH
39643: LD_VAR 0 4
39647: PPUSH
39648: CALL_OW 380
// un := CreateHuman ;
39652: LD_ADDR_VAR 0 14
39656: PUSH
39657: CALL_OW 44
39661: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39662: LD_ADDR_VAR 0 7
39666: PUSH
39667: LD_VAR 0 7
39671: PPUSH
39672: LD_INT 1
39674: PPUSH
39675: LD_VAR 0 14
39679: PPUSH
39680: CALL_OW 2
39684: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39685: LD_VAR 0 14
39689: PPUSH
39690: LD_VAR 0 12
39694: PUSH
39695: LD_INT 1
39697: ARRAY
39698: PPUSH
39699: CALL_OW 52
// end ;
39703: GO 39342
39705: POP
39706: POP
// end ;
39707: GO 38644
39709: POP
39710: POP
// result := result ^ buildings ;
39711: LD_ADDR_VAR 0 7
39715: PUSH
39716: LD_VAR 0 7
39720: PUSH
39721: LD_VAR 0 18
39725: ADD
39726: ST_TO_ADDR
// end else
39727: GO 39870
// begin for i = 1 to personel do
39729: LD_ADDR_VAR 0 8
39733: PUSH
39734: DOUBLE
39735: LD_INT 1
39737: DEC
39738: ST_TO_ADDR
39739: LD_VAR 0 6
39743: PUSH
39744: FOR_TO
39745: IFFALSE 39868
// begin if i > 4 then
39747: LD_VAR 0 8
39751: PUSH
39752: LD_INT 4
39754: GREATER
39755: IFFALSE 39759
// break ;
39757: GO 39868
// x := personel [ i ] ;
39759: LD_ADDR_VAR 0 13
39763: PUSH
39764: LD_VAR 0 6
39768: PUSH
39769: LD_VAR 0 8
39773: ARRAY
39774: ST_TO_ADDR
// if x = - 1 then
39775: LD_VAR 0 13
39779: PUSH
39780: LD_INT 1
39782: NEG
39783: EQUAL
39784: IFFALSE 39788
// continue ;
39786: GO 39744
// PrepareHuman ( false , i , skill ) ;
39788: LD_INT 0
39790: PPUSH
39791: LD_VAR 0 8
39795: PPUSH
39796: LD_VAR 0 4
39800: PPUSH
39801: CALL_OW 380
// un := CreateHuman ;
39805: LD_ADDR_VAR 0 14
39809: PUSH
39810: CALL_OW 44
39814: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39815: LD_VAR 0 14
39819: PPUSH
39820: LD_VAR 0 1
39824: PPUSH
39825: CALL_OW 250
39829: PPUSH
39830: LD_VAR 0 1
39834: PPUSH
39835: CALL_OW 251
39839: PPUSH
39840: LD_INT 10
39842: PPUSH
39843: LD_INT 0
39845: PPUSH
39846: CALL_OW 50
// result := result ^ un ;
39850: LD_ADDR_VAR 0 7
39854: PUSH
39855: LD_VAR 0 7
39859: PUSH
39860: LD_VAR 0 14
39864: ADD
39865: ST_TO_ADDR
// end ;
39866: GO 39744
39868: POP
39869: POP
// end ; end ;
39870: LD_VAR 0 7
39874: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39875: LD_INT 0
39877: PPUSH
39878: PPUSH
39879: PPUSH
39880: PPUSH
39881: PPUSH
39882: PPUSH
39883: PPUSH
39884: PPUSH
39885: PPUSH
39886: PPUSH
39887: PPUSH
39888: PPUSH
39889: PPUSH
39890: PPUSH
39891: PPUSH
39892: PPUSH
// result := false ;
39893: LD_ADDR_VAR 0 3
39897: PUSH
39898: LD_INT 0
39900: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39901: LD_VAR 0 1
39905: NOT
39906: PUSH
39907: LD_VAR 0 1
39911: PPUSH
39912: CALL_OW 266
39916: PUSH
39917: LD_INT 32
39919: PUSH
39920: LD_INT 33
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: IN
39927: NOT
39928: OR
39929: IFFALSE 39933
// exit ;
39931: GO 41069
// nat := GetNation ( tower ) ;
39933: LD_ADDR_VAR 0 12
39937: PUSH
39938: LD_VAR 0 1
39942: PPUSH
39943: CALL_OW 248
39947: ST_TO_ADDR
// side := GetSide ( tower ) ;
39948: LD_ADDR_VAR 0 16
39952: PUSH
39953: LD_VAR 0 1
39957: PPUSH
39958: CALL_OW 255
39962: ST_TO_ADDR
// x := GetX ( tower ) ;
39963: LD_ADDR_VAR 0 10
39967: PUSH
39968: LD_VAR 0 1
39972: PPUSH
39973: CALL_OW 250
39977: ST_TO_ADDR
// y := GetY ( tower ) ;
39978: LD_ADDR_VAR 0 11
39982: PUSH
39983: LD_VAR 0 1
39987: PPUSH
39988: CALL_OW 251
39992: ST_TO_ADDR
// if not x or not y then
39993: LD_VAR 0 10
39997: NOT
39998: PUSH
39999: LD_VAR 0 11
40003: NOT
40004: OR
40005: IFFALSE 40009
// exit ;
40007: GO 41069
// weapon := 0 ;
40009: LD_ADDR_VAR 0 18
40013: PUSH
40014: LD_INT 0
40016: ST_TO_ADDR
// fac_list := [ ] ;
40017: LD_ADDR_VAR 0 17
40021: PUSH
40022: EMPTY
40023: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
40024: LD_ADDR_VAR 0 6
40028: PUSH
40029: LD_VAR 0 1
40033: PPUSH
40034: CALL_OW 274
40038: PPUSH
40039: LD_VAR 0 2
40043: PPUSH
40044: CALL 37647 0 2
40048: PPUSH
40049: LD_INT 30
40051: PUSH
40052: LD_INT 3
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PPUSH
40059: CALL_OW 72
40063: ST_TO_ADDR
// if not factories then
40064: LD_VAR 0 6
40068: NOT
40069: IFFALSE 40073
// exit ;
40071: GO 41069
// for i in factories do
40073: LD_ADDR_VAR 0 8
40077: PUSH
40078: LD_VAR 0 6
40082: PUSH
40083: FOR_IN
40084: IFFALSE 40109
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40086: LD_ADDR_VAR 0 17
40090: PUSH
40091: LD_VAR 0 17
40095: PUSH
40096: LD_VAR 0 8
40100: PPUSH
40101: CALL_OW 478
40105: UNION
40106: ST_TO_ADDR
40107: GO 40083
40109: POP
40110: POP
// if not fac_list then
40111: LD_VAR 0 17
40115: NOT
40116: IFFALSE 40120
// exit ;
40118: GO 41069
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40120: LD_ADDR_VAR 0 5
40124: PUSH
40125: LD_INT 4
40127: PUSH
40128: LD_INT 5
40130: PUSH
40131: LD_INT 9
40133: PUSH
40134: LD_INT 10
40136: PUSH
40137: LD_INT 6
40139: PUSH
40140: LD_INT 7
40142: PUSH
40143: LD_INT 11
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 27
40157: PUSH
40158: LD_INT 28
40160: PUSH
40161: LD_INT 26
40163: PUSH
40164: LD_INT 30
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 43
40175: PUSH
40176: LD_INT 44
40178: PUSH
40179: LD_INT 46
40181: PUSH
40182: LD_INT 45
40184: PUSH
40185: LD_INT 47
40187: PUSH
40188: LD_INT 49
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: LIST
40203: PUSH
40204: LD_VAR 0 12
40208: ARRAY
40209: ST_TO_ADDR
// for i in list do
40210: LD_ADDR_VAR 0 8
40214: PUSH
40215: LD_VAR 0 5
40219: PUSH
40220: FOR_IN
40221: IFFALSE 40254
// if not i in fac_list then
40223: LD_VAR 0 8
40227: PUSH
40228: LD_VAR 0 17
40232: IN
40233: NOT
40234: IFFALSE 40252
// list := list diff i ;
40236: LD_ADDR_VAR 0 5
40240: PUSH
40241: LD_VAR 0 5
40245: PUSH
40246: LD_VAR 0 8
40250: DIFF
40251: ST_TO_ADDR
40252: GO 40220
40254: POP
40255: POP
// if not list then
40256: LD_VAR 0 5
40260: NOT
40261: IFFALSE 40265
// exit ;
40263: GO 41069
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40265: LD_VAR 0 12
40269: PUSH
40270: LD_INT 3
40272: EQUAL
40273: PUSH
40274: LD_INT 49
40276: PUSH
40277: LD_VAR 0 5
40281: IN
40282: AND
40283: PUSH
40284: LD_INT 31
40286: PPUSH
40287: LD_VAR 0 16
40291: PPUSH
40292: CALL_OW 321
40296: PUSH
40297: LD_INT 2
40299: EQUAL
40300: AND
40301: IFFALSE 40361
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40303: LD_INT 22
40305: PUSH
40306: LD_VAR 0 16
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 35
40317: PUSH
40318: LD_INT 49
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 91
40327: PUSH
40328: LD_VAR 0 1
40332: PUSH
40333: LD_INT 10
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: LIST
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: LIST
40345: PPUSH
40346: CALL_OW 69
40350: NOT
40351: IFFALSE 40361
// weapon := ru_time_lapser ;
40353: LD_ADDR_VAR 0 18
40357: PUSH
40358: LD_INT 49
40360: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40361: LD_VAR 0 12
40365: PUSH
40366: LD_INT 1
40368: PUSH
40369: LD_INT 2
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: IN
40376: PUSH
40377: LD_INT 11
40379: PUSH
40380: LD_VAR 0 5
40384: IN
40385: PUSH
40386: LD_INT 30
40388: PUSH
40389: LD_VAR 0 5
40393: IN
40394: OR
40395: AND
40396: PUSH
40397: LD_INT 6
40399: PPUSH
40400: LD_VAR 0 16
40404: PPUSH
40405: CALL_OW 321
40409: PUSH
40410: LD_INT 2
40412: EQUAL
40413: AND
40414: IFFALSE 40579
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40416: LD_INT 22
40418: PUSH
40419: LD_VAR 0 16
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 2
40430: PUSH
40431: LD_INT 35
40433: PUSH
40434: LD_INT 11
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 35
40443: PUSH
40444: LD_INT 30
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 91
40458: PUSH
40459: LD_VAR 0 1
40463: PUSH
40464: LD_INT 18
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: LIST
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: LIST
40476: PPUSH
40477: CALL_OW 69
40481: NOT
40482: PUSH
40483: LD_INT 22
40485: PUSH
40486: LD_VAR 0 16
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 2
40497: PUSH
40498: LD_INT 30
40500: PUSH
40501: LD_INT 32
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 30
40510: PUSH
40511: LD_INT 33
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 91
40525: PUSH
40526: LD_VAR 0 1
40530: PUSH
40531: LD_INT 12
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: LIST
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: LIST
40543: PUSH
40544: EMPTY
40545: LIST
40546: PPUSH
40547: CALL_OW 69
40551: PUSH
40552: LD_INT 2
40554: GREATER
40555: AND
40556: IFFALSE 40579
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40558: LD_ADDR_VAR 0 18
40562: PUSH
40563: LD_INT 11
40565: PUSH
40566: LD_INT 30
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_VAR 0 12
40577: ARRAY
40578: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40579: LD_VAR 0 18
40583: NOT
40584: PUSH
40585: LD_INT 40
40587: PPUSH
40588: LD_VAR 0 16
40592: PPUSH
40593: CALL_OW 321
40597: PUSH
40598: LD_INT 2
40600: EQUAL
40601: AND
40602: PUSH
40603: LD_INT 7
40605: PUSH
40606: LD_VAR 0 5
40610: IN
40611: PUSH
40612: LD_INT 28
40614: PUSH
40615: LD_VAR 0 5
40619: IN
40620: OR
40621: PUSH
40622: LD_INT 45
40624: PUSH
40625: LD_VAR 0 5
40629: IN
40630: OR
40631: AND
40632: IFFALSE 40886
// begin hex := GetHexInfo ( x , y ) ;
40634: LD_ADDR_VAR 0 4
40638: PUSH
40639: LD_VAR 0 10
40643: PPUSH
40644: LD_VAR 0 11
40648: PPUSH
40649: CALL_OW 546
40653: ST_TO_ADDR
// if hex [ 1 ] then
40654: LD_VAR 0 4
40658: PUSH
40659: LD_INT 1
40661: ARRAY
40662: IFFALSE 40666
// exit ;
40664: GO 41069
// height := hex [ 2 ] ;
40666: LD_ADDR_VAR 0 15
40670: PUSH
40671: LD_VAR 0 4
40675: PUSH
40676: LD_INT 2
40678: ARRAY
40679: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40680: LD_ADDR_VAR 0 14
40684: PUSH
40685: LD_INT 0
40687: PUSH
40688: LD_INT 2
40690: PUSH
40691: LD_INT 3
40693: PUSH
40694: LD_INT 5
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: ST_TO_ADDR
// for i in tmp do
40703: LD_ADDR_VAR 0 8
40707: PUSH
40708: LD_VAR 0 14
40712: PUSH
40713: FOR_IN
40714: IFFALSE 40884
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40716: LD_ADDR_VAR 0 9
40720: PUSH
40721: LD_VAR 0 10
40725: PPUSH
40726: LD_VAR 0 8
40730: PPUSH
40731: LD_INT 5
40733: PPUSH
40734: CALL_OW 272
40738: PUSH
40739: LD_VAR 0 11
40743: PPUSH
40744: LD_VAR 0 8
40748: PPUSH
40749: LD_INT 5
40751: PPUSH
40752: CALL_OW 273
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40761: LD_VAR 0 9
40765: PUSH
40766: LD_INT 1
40768: ARRAY
40769: PPUSH
40770: LD_VAR 0 9
40774: PUSH
40775: LD_INT 2
40777: ARRAY
40778: PPUSH
40779: CALL_OW 488
40783: IFFALSE 40882
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40785: LD_ADDR_VAR 0 4
40789: PUSH
40790: LD_VAR 0 9
40794: PUSH
40795: LD_INT 1
40797: ARRAY
40798: PPUSH
40799: LD_VAR 0 9
40803: PUSH
40804: LD_INT 2
40806: ARRAY
40807: PPUSH
40808: CALL_OW 546
40812: ST_TO_ADDR
// if hex [ 1 ] then
40813: LD_VAR 0 4
40817: PUSH
40818: LD_INT 1
40820: ARRAY
40821: IFFALSE 40825
// continue ;
40823: GO 40713
// h := hex [ 2 ] ;
40825: LD_ADDR_VAR 0 13
40829: PUSH
40830: LD_VAR 0 4
40834: PUSH
40835: LD_INT 2
40837: ARRAY
40838: ST_TO_ADDR
// if h + 7 < height then
40839: LD_VAR 0 13
40843: PUSH
40844: LD_INT 7
40846: PLUS
40847: PUSH
40848: LD_VAR 0 15
40852: LESS
40853: IFFALSE 40882
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40855: LD_ADDR_VAR 0 18
40859: PUSH
40860: LD_INT 7
40862: PUSH
40863: LD_INT 28
40865: PUSH
40866: LD_INT 45
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: LIST
40873: PUSH
40874: LD_VAR 0 12
40878: ARRAY
40879: ST_TO_ADDR
// break ;
40880: GO 40884
// end ; end ; end ;
40882: GO 40713
40884: POP
40885: POP
// end ; if not weapon then
40886: LD_VAR 0 18
40890: NOT
40891: IFFALSE 40951
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40893: LD_ADDR_VAR 0 5
40897: PUSH
40898: LD_VAR 0 5
40902: PUSH
40903: LD_INT 11
40905: PUSH
40906: LD_INT 30
40908: PUSH
40909: LD_INT 49
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: LIST
40916: DIFF
40917: ST_TO_ADDR
// if not list then
40918: LD_VAR 0 5
40922: NOT
40923: IFFALSE 40927
// exit ;
40925: GO 41069
// weapon := list [ rand ( 1 , list ) ] ;
40927: LD_ADDR_VAR 0 18
40931: PUSH
40932: LD_VAR 0 5
40936: PUSH
40937: LD_INT 1
40939: PPUSH
40940: LD_VAR 0 5
40944: PPUSH
40945: CALL_OW 12
40949: ARRAY
40950: ST_TO_ADDR
// end ; if weapon then
40951: LD_VAR 0 18
40955: IFFALSE 41069
// begin tmp := CostOfWeapon ( weapon ) ;
40957: LD_ADDR_VAR 0 14
40961: PUSH
40962: LD_VAR 0 18
40966: PPUSH
40967: CALL_OW 451
40971: ST_TO_ADDR
// j := GetBase ( tower ) ;
40972: LD_ADDR_VAR 0 9
40976: PUSH
40977: LD_VAR 0 1
40981: PPUSH
40982: CALL_OW 274
40986: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40987: LD_VAR 0 9
40991: PPUSH
40992: LD_INT 1
40994: PPUSH
40995: CALL_OW 275
40999: PUSH
41000: LD_VAR 0 14
41004: PUSH
41005: LD_INT 1
41007: ARRAY
41008: GREATEREQUAL
41009: PUSH
41010: LD_VAR 0 9
41014: PPUSH
41015: LD_INT 2
41017: PPUSH
41018: CALL_OW 275
41022: PUSH
41023: LD_VAR 0 14
41027: PUSH
41028: LD_INT 2
41030: ARRAY
41031: GREATEREQUAL
41032: AND
41033: PUSH
41034: LD_VAR 0 9
41038: PPUSH
41039: LD_INT 3
41041: PPUSH
41042: CALL_OW 275
41046: PUSH
41047: LD_VAR 0 14
41051: PUSH
41052: LD_INT 3
41054: ARRAY
41055: GREATEREQUAL
41056: AND
41057: IFFALSE 41069
// result := weapon ;
41059: LD_ADDR_VAR 0 3
41063: PUSH
41064: LD_VAR 0 18
41068: ST_TO_ADDR
// end ; end ;
41069: LD_VAR 0 3
41073: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41074: LD_INT 0
41076: PPUSH
41077: PPUSH
// result := true ;
41078: LD_ADDR_VAR 0 3
41082: PUSH
41083: LD_INT 1
41085: ST_TO_ADDR
// if array1 = array2 then
41086: LD_VAR 0 1
41090: PUSH
41091: LD_VAR 0 2
41095: EQUAL
41096: IFFALSE 41156
// begin for i = 1 to array1 do
41098: LD_ADDR_VAR 0 4
41102: PUSH
41103: DOUBLE
41104: LD_INT 1
41106: DEC
41107: ST_TO_ADDR
41108: LD_VAR 0 1
41112: PUSH
41113: FOR_TO
41114: IFFALSE 41152
// if array1 [ i ] <> array2 [ i ] then
41116: LD_VAR 0 1
41120: PUSH
41121: LD_VAR 0 4
41125: ARRAY
41126: PUSH
41127: LD_VAR 0 2
41131: PUSH
41132: LD_VAR 0 4
41136: ARRAY
41137: NONEQUAL
41138: IFFALSE 41150
// begin result := false ;
41140: LD_ADDR_VAR 0 3
41144: PUSH
41145: LD_INT 0
41147: ST_TO_ADDR
// break ;
41148: GO 41152
// end ;
41150: GO 41113
41152: POP
41153: POP
// end else
41154: GO 41164
// result := false ;
41156: LD_ADDR_VAR 0 3
41160: PUSH
41161: LD_INT 0
41163: ST_TO_ADDR
// end ;
41164: LD_VAR 0 3
41168: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41169: LD_INT 0
41171: PPUSH
41172: PPUSH
41173: PPUSH
// pom := GetBase ( fac ) ;
41174: LD_ADDR_VAR 0 5
41178: PUSH
41179: LD_VAR 0 1
41183: PPUSH
41184: CALL_OW 274
41188: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41189: LD_ADDR_VAR 0 4
41193: PUSH
41194: LD_VAR 0 2
41198: PUSH
41199: LD_INT 1
41201: ARRAY
41202: PPUSH
41203: LD_VAR 0 2
41207: PUSH
41208: LD_INT 2
41210: ARRAY
41211: PPUSH
41212: LD_VAR 0 2
41216: PUSH
41217: LD_INT 3
41219: ARRAY
41220: PPUSH
41221: LD_VAR 0 2
41225: PUSH
41226: LD_INT 4
41228: ARRAY
41229: PPUSH
41230: CALL_OW 449
41234: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41235: LD_ADDR_VAR 0 3
41239: PUSH
41240: LD_VAR 0 5
41244: PPUSH
41245: LD_INT 1
41247: PPUSH
41248: CALL_OW 275
41252: PUSH
41253: LD_VAR 0 4
41257: PUSH
41258: LD_INT 1
41260: ARRAY
41261: GREATEREQUAL
41262: PUSH
41263: LD_VAR 0 5
41267: PPUSH
41268: LD_INT 2
41270: PPUSH
41271: CALL_OW 275
41275: PUSH
41276: LD_VAR 0 4
41280: PUSH
41281: LD_INT 2
41283: ARRAY
41284: GREATEREQUAL
41285: AND
41286: PUSH
41287: LD_VAR 0 5
41291: PPUSH
41292: LD_INT 3
41294: PPUSH
41295: CALL_OW 275
41299: PUSH
41300: LD_VAR 0 4
41304: PUSH
41305: LD_INT 3
41307: ARRAY
41308: GREATEREQUAL
41309: AND
41310: ST_TO_ADDR
// end ;
41311: LD_VAR 0 3
41315: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41316: LD_INT 0
41318: PPUSH
41319: PPUSH
41320: PPUSH
41321: PPUSH
// pom := GetBase ( building ) ;
41322: LD_ADDR_VAR 0 3
41326: PUSH
41327: LD_VAR 0 1
41331: PPUSH
41332: CALL_OW 274
41336: ST_TO_ADDR
// if not pom then
41337: LD_VAR 0 3
41341: NOT
41342: IFFALSE 41346
// exit ;
41344: GO 41516
// btype := GetBType ( building ) ;
41346: LD_ADDR_VAR 0 5
41350: PUSH
41351: LD_VAR 0 1
41355: PPUSH
41356: CALL_OW 266
41360: ST_TO_ADDR
// if btype = b_armoury then
41361: LD_VAR 0 5
41365: PUSH
41366: LD_INT 4
41368: EQUAL
41369: IFFALSE 41379
// btype := b_barracks ;
41371: LD_ADDR_VAR 0 5
41375: PUSH
41376: LD_INT 5
41378: ST_TO_ADDR
// if btype = b_depot then
41379: LD_VAR 0 5
41383: PUSH
41384: LD_INT 0
41386: EQUAL
41387: IFFALSE 41397
// btype := b_warehouse ;
41389: LD_ADDR_VAR 0 5
41393: PUSH
41394: LD_INT 1
41396: ST_TO_ADDR
// if btype = b_workshop then
41397: LD_VAR 0 5
41401: PUSH
41402: LD_INT 2
41404: EQUAL
41405: IFFALSE 41415
// btype := b_factory ;
41407: LD_ADDR_VAR 0 5
41411: PUSH
41412: LD_INT 3
41414: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41415: LD_ADDR_VAR 0 4
41419: PUSH
41420: LD_VAR 0 5
41424: PPUSH
41425: LD_VAR 0 1
41429: PPUSH
41430: CALL_OW 248
41434: PPUSH
41435: CALL_OW 450
41439: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41440: LD_ADDR_VAR 0 2
41444: PUSH
41445: LD_VAR 0 3
41449: PPUSH
41450: LD_INT 1
41452: PPUSH
41453: CALL_OW 275
41457: PUSH
41458: LD_VAR 0 4
41462: PUSH
41463: LD_INT 1
41465: ARRAY
41466: GREATEREQUAL
41467: PUSH
41468: LD_VAR 0 3
41472: PPUSH
41473: LD_INT 2
41475: PPUSH
41476: CALL_OW 275
41480: PUSH
41481: LD_VAR 0 4
41485: PUSH
41486: LD_INT 2
41488: ARRAY
41489: GREATEREQUAL
41490: AND
41491: PUSH
41492: LD_VAR 0 3
41496: PPUSH
41497: LD_INT 3
41499: PPUSH
41500: CALL_OW 275
41504: PUSH
41505: LD_VAR 0 4
41509: PUSH
41510: LD_INT 3
41512: ARRAY
41513: GREATEREQUAL
41514: AND
41515: ST_TO_ADDR
// end ;
41516: LD_VAR 0 2
41520: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41521: LD_INT 0
41523: PPUSH
41524: PPUSH
41525: PPUSH
// pom := GetBase ( building ) ;
41526: LD_ADDR_VAR 0 4
41530: PUSH
41531: LD_VAR 0 1
41535: PPUSH
41536: CALL_OW 274
41540: ST_TO_ADDR
// if not pom then
41541: LD_VAR 0 4
41545: NOT
41546: IFFALSE 41550
// exit ;
41548: GO 41651
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41550: LD_ADDR_VAR 0 5
41554: PUSH
41555: LD_VAR 0 2
41559: PPUSH
41560: LD_VAR 0 1
41564: PPUSH
41565: CALL_OW 248
41569: PPUSH
41570: CALL_OW 450
41574: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41575: LD_ADDR_VAR 0 3
41579: PUSH
41580: LD_VAR 0 4
41584: PPUSH
41585: LD_INT 1
41587: PPUSH
41588: CALL_OW 275
41592: PUSH
41593: LD_VAR 0 5
41597: PUSH
41598: LD_INT 1
41600: ARRAY
41601: GREATEREQUAL
41602: PUSH
41603: LD_VAR 0 4
41607: PPUSH
41608: LD_INT 2
41610: PPUSH
41611: CALL_OW 275
41615: PUSH
41616: LD_VAR 0 5
41620: PUSH
41621: LD_INT 2
41623: ARRAY
41624: GREATEREQUAL
41625: AND
41626: PUSH
41627: LD_VAR 0 4
41631: PPUSH
41632: LD_INT 3
41634: PPUSH
41635: CALL_OW 275
41639: PUSH
41640: LD_VAR 0 5
41644: PUSH
41645: LD_INT 3
41647: ARRAY
41648: GREATEREQUAL
41649: AND
41650: ST_TO_ADDR
// end ;
41651: LD_VAR 0 3
41655: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
41656: LD_INT 0
41658: PPUSH
41659: PPUSH
41660: PPUSH
41661: PPUSH
41662: PPUSH
41663: PPUSH
41664: PPUSH
41665: PPUSH
41666: PPUSH
41667: PPUSH
// result := false ;
41668: LD_ADDR_VAR 0 6
41672: PUSH
41673: LD_INT 0
41675: ST_TO_ADDR
// if not base or not btype or not x or not y then
41676: LD_VAR 0 1
41680: NOT
41681: PUSH
41682: LD_VAR 0 2
41686: NOT
41687: OR
41688: PUSH
41689: LD_VAR 0 3
41693: NOT
41694: OR
41695: PUSH
41696: LD_VAR 0 4
41700: NOT
41701: OR
41702: IFFALSE 41706
// exit ;
41704: GO 42315
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
41706: LD_ADDR_VAR 0 12
41710: PUSH
41711: LD_VAR 0 2
41715: PPUSH
41716: LD_VAR 0 3
41720: PPUSH
41721: LD_VAR 0 4
41725: PPUSH
41726: LD_VAR 0 5
41730: PPUSH
41731: LD_VAR 0 1
41735: PUSH
41736: LD_INT 1
41738: ARRAY
41739: PPUSH
41740: CALL_OW 248
41744: PPUSH
41745: LD_INT 0
41747: PPUSH
41748: CALL 43152 0 6
41752: ST_TO_ADDR
// if not hexes then
41753: LD_VAR 0 12
41757: NOT
41758: IFFALSE 41762
// exit ;
41760: GO 42315
// for i = 1 to hexes do
41762: LD_ADDR_VAR 0 7
41766: PUSH
41767: DOUBLE
41768: LD_INT 1
41770: DEC
41771: ST_TO_ADDR
41772: LD_VAR 0 12
41776: PUSH
41777: FOR_TO
41778: IFFALSE 42313
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41780: LD_ADDR_VAR 0 11
41784: PUSH
41785: LD_VAR 0 12
41789: PUSH
41790: LD_VAR 0 7
41794: ARRAY
41795: PUSH
41796: LD_INT 1
41798: ARRAY
41799: PPUSH
41800: LD_VAR 0 12
41804: PUSH
41805: LD_VAR 0 7
41809: ARRAY
41810: PUSH
41811: LD_INT 2
41813: ARRAY
41814: PPUSH
41815: CALL_OW 428
41819: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41820: LD_VAR 0 12
41824: PUSH
41825: LD_VAR 0 7
41829: ARRAY
41830: PUSH
41831: LD_INT 1
41833: ARRAY
41834: PPUSH
41835: LD_VAR 0 12
41839: PUSH
41840: LD_VAR 0 7
41844: ARRAY
41845: PUSH
41846: LD_INT 2
41848: ARRAY
41849: PPUSH
41850: CALL_OW 351
41854: PUSH
41855: LD_VAR 0 12
41859: PUSH
41860: LD_VAR 0 7
41864: ARRAY
41865: PUSH
41866: LD_INT 1
41868: ARRAY
41869: PPUSH
41870: LD_VAR 0 12
41874: PUSH
41875: LD_VAR 0 7
41879: ARRAY
41880: PUSH
41881: LD_INT 2
41883: ARRAY
41884: PPUSH
41885: CALL_OW 488
41889: NOT
41890: OR
41891: PUSH
41892: LD_VAR 0 11
41896: PPUSH
41897: CALL_OW 247
41901: PUSH
41902: LD_INT 3
41904: EQUAL
41905: OR
41906: IFFALSE 41912
// exit ;
41908: POP
41909: POP
41910: GO 42315
// if not tmp or not tmp in base then
41912: LD_VAR 0 11
41916: NOT
41917: PUSH
41918: LD_VAR 0 11
41922: PUSH
41923: LD_VAR 0 1
41927: IN
41928: NOT
41929: OR
41930: IFFALSE 41934
// continue ;
41932: GO 41777
// result := true ;
41934: LD_ADDR_VAR 0 6
41938: PUSH
41939: LD_INT 1
41941: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41942: LD_ADDR_VAR 0 15
41946: PUSH
41947: LD_VAR 0 1
41951: PPUSH
41952: LD_INT 22
41954: PUSH
41955: LD_VAR 0 11
41959: PPUSH
41960: CALL_OW 255
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 2
41971: PUSH
41972: LD_INT 30
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 30
41984: PUSH
41985: LD_INT 1
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: LIST
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PPUSH
42001: CALL_OW 72
42005: ST_TO_ADDR
// if dep then
42006: LD_VAR 0 15
42010: IFFALSE 42146
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42012: LD_ADDR_VAR 0 14
42016: PUSH
42017: LD_VAR 0 15
42021: PUSH
42022: LD_INT 1
42024: ARRAY
42025: PPUSH
42026: CALL_OW 250
42030: PPUSH
42031: LD_VAR 0 15
42035: PUSH
42036: LD_INT 1
42038: ARRAY
42039: PPUSH
42040: CALL_OW 254
42044: PPUSH
42045: LD_INT 5
42047: PPUSH
42048: CALL_OW 272
42052: PUSH
42053: LD_VAR 0 15
42057: PUSH
42058: LD_INT 1
42060: ARRAY
42061: PPUSH
42062: CALL_OW 251
42066: PPUSH
42067: LD_VAR 0 15
42071: PUSH
42072: LD_INT 1
42074: ARRAY
42075: PPUSH
42076: CALL_OW 254
42080: PPUSH
42081: LD_INT 5
42083: PPUSH
42084: CALL_OW 273
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42093: LD_VAR 0 14
42097: PUSH
42098: LD_INT 1
42100: ARRAY
42101: PPUSH
42102: LD_VAR 0 14
42106: PUSH
42107: LD_INT 2
42109: ARRAY
42110: PPUSH
42111: CALL_OW 488
42115: IFFALSE 42146
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42117: LD_VAR 0 11
42121: PPUSH
42122: LD_VAR 0 14
42126: PUSH
42127: LD_INT 1
42129: ARRAY
42130: PPUSH
42131: LD_VAR 0 14
42135: PUSH
42136: LD_INT 2
42138: ARRAY
42139: PPUSH
42140: CALL_OW 111
// continue ;
42144: GO 41777
// end ; end ; r := GetDir ( tmp ) ;
42146: LD_ADDR_VAR 0 13
42150: PUSH
42151: LD_VAR 0 11
42155: PPUSH
42156: CALL_OW 254
42160: ST_TO_ADDR
// if r = 5 then
42161: LD_VAR 0 13
42165: PUSH
42166: LD_INT 5
42168: EQUAL
42169: IFFALSE 42179
// r := 0 ;
42171: LD_ADDR_VAR 0 13
42175: PUSH
42176: LD_INT 0
42178: ST_TO_ADDR
// for j = r to 5 do
42179: LD_ADDR_VAR 0 8
42183: PUSH
42184: DOUBLE
42185: LD_VAR 0 13
42189: DEC
42190: ST_TO_ADDR
42191: LD_INT 5
42193: PUSH
42194: FOR_TO
42195: IFFALSE 42309
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42197: LD_ADDR_VAR 0 9
42201: PUSH
42202: LD_VAR 0 11
42206: PPUSH
42207: CALL_OW 250
42211: PPUSH
42212: LD_VAR 0 8
42216: PPUSH
42217: LD_INT 2
42219: PPUSH
42220: CALL_OW 272
42224: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42225: LD_ADDR_VAR 0 10
42229: PUSH
42230: LD_VAR 0 11
42234: PPUSH
42235: CALL_OW 251
42239: PPUSH
42240: LD_VAR 0 8
42244: PPUSH
42245: LD_INT 2
42247: PPUSH
42248: CALL_OW 273
42252: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42253: LD_VAR 0 9
42257: PPUSH
42258: LD_VAR 0 10
42262: PPUSH
42263: CALL_OW 488
42267: PUSH
42268: LD_VAR 0 9
42272: PPUSH
42273: LD_VAR 0 10
42277: PPUSH
42278: CALL_OW 428
42282: NOT
42283: AND
42284: IFFALSE 42307
// begin ComMoveXY ( tmp , _x , _y ) ;
42286: LD_VAR 0 11
42290: PPUSH
42291: LD_VAR 0 9
42295: PPUSH
42296: LD_VAR 0 10
42300: PPUSH
42301: CALL_OW 111
// break ;
42305: GO 42309
// end ; end ;
42307: GO 42194
42309: POP
42310: POP
// end ;
42311: GO 41777
42313: POP
42314: POP
// end ;
42315: LD_VAR 0 6
42319: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
42320: LD_INT 0
42322: PPUSH
42323: PPUSH
42324: PPUSH
42325: PPUSH
42326: PPUSH
42327: PPUSH
42328: PPUSH
42329: PPUSH
42330: PPUSH
42331: PPUSH
// result := false ;
42332: LD_ADDR_VAR 0 6
42336: PUSH
42337: LD_INT 0
42339: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42340: LD_VAR 0 1
42344: NOT
42345: PUSH
42346: LD_VAR 0 1
42350: PPUSH
42351: CALL_OW 266
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: LD_INT 1
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: IN
42366: NOT
42367: OR
42368: PUSH
42369: LD_VAR 0 2
42373: NOT
42374: OR
42375: PUSH
42376: LD_VAR 0 5
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: LD_INT 2
42389: PUSH
42390: LD_INT 3
42392: PUSH
42393: LD_INT 4
42395: PUSH
42396: LD_INT 5
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: IN
42407: NOT
42408: OR
42409: PUSH
42410: LD_VAR 0 3
42414: PPUSH
42415: LD_VAR 0 4
42419: PPUSH
42420: CALL_OW 488
42424: NOT
42425: OR
42426: IFFALSE 42430
// exit ;
42428: GO 43147
// pom := GetBase ( depot ) ;
42430: LD_ADDR_VAR 0 10
42434: PUSH
42435: LD_VAR 0 1
42439: PPUSH
42440: CALL_OW 274
42444: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42445: LD_ADDR_VAR 0 11
42449: PUSH
42450: LD_VAR 0 2
42454: PPUSH
42455: LD_VAR 0 1
42459: PPUSH
42460: CALL_OW 248
42464: PPUSH
42465: CALL_OW 450
42469: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42470: LD_VAR 0 10
42474: PPUSH
42475: LD_INT 1
42477: PPUSH
42478: CALL_OW 275
42482: PUSH
42483: LD_VAR 0 11
42487: PUSH
42488: LD_INT 1
42490: ARRAY
42491: GREATEREQUAL
42492: PUSH
42493: LD_VAR 0 10
42497: PPUSH
42498: LD_INT 2
42500: PPUSH
42501: CALL_OW 275
42505: PUSH
42506: LD_VAR 0 11
42510: PUSH
42511: LD_INT 2
42513: ARRAY
42514: GREATEREQUAL
42515: AND
42516: PUSH
42517: LD_VAR 0 10
42521: PPUSH
42522: LD_INT 3
42524: PPUSH
42525: CALL_OW 275
42529: PUSH
42530: LD_VAR 0 11
42534: PUSH
42535: LD_INT 3
42537: ARRAY
42538: GREATEREQUAL
42539: AND
42540: NOT
42541: IFFALSE 42545
// exit ;
42543: GO 43147
// if GetBType ( depot ) = b_depot then
42545: LD_VAR 0 1
42549: PPUSH
42550: CALL_OW 266
42554: PUSH
42555: LD_INT 0
42557: EQUAL
42558: IFFALSE 42570
// dist := 28 else
42560: LD_ADDR_VAR 0 14
42564: PUSH
42565: LD_INT 28
42567: ST_TO_ADDR
42568: GO 42578
// dist := 36 ;
42570: LD_ADDR_VAR 0 14
42574: PUSH
42575: LD_INT 36
42577: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42578: LD_VAR 0 1
42582: PPUSH
42583: LD_VAR 0 3
42587: PPUSH
42588: LD_VAR 0 4
42592: PPUSH
42593: CALL_OW 297
42597: PUSH
42598: LD_VAR 0 14
42602: GREATER
42603: IFFALSE 42607
// exit ;
42605: GO 43147
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42607: LD_ADDR_VAR 0 12
42611: PUSH
42612: LD_VAR 0 2
42616: PPUSH
42617: LD_VAR 0 3
42621: PPUSH
42622: LD_VAR 0 4
42626: PPUSH
42627: LD_VAR 0 5
42631: PPUSH
42632: LD_VAR 0 1
42636: PPUSH
42637: CALL_OW 248
42641: PPUSH
42642: LD_INT 0
42644: PPUSH
42645: CALL 43152 0 6
42649: ST_TO_ADDR
// if not hexes then
42650: LD_VAR 0 12
42654: NOT
42655: IFFALSE 42659
// exit ;
42657: GO 43147
// hex := GetHexInfo ( x , y ) ;
42659: LD_ADDR_VAR 0 15
42663: PUSH
42664: LD_VAR 0 3
42668: PPUSH
42669: LD_VAR 0 4
42673: PPUSH
42674: CALL_OW 546
42678: ST_TO_ADDR
// if hex [ 1 ] then
42679: LD_VAR 0 15
42683: PUSH
42684: LD_INT 1
42686: ARRAY
42687: IFFALSE 42691
// exit ;
42689: GO 43147
// height := hex [ 2 ] ;
42691: LD_ADDR_VAR 0 13
42695: PUSH
42696: LD_VAR 0 15
42700: PUSH
42701: LD_INT 2
42703: ARRAY
42704: ST_TO_ADDR
// for i = 1 to hexes do
42705: LD_ADDR_VAR 0 7
42709: PUSH
42710: DOUBLE
42711: LD_INT 1
42713: DEC
42714: ST_TO_ADDR
42715: LD_VAR 0 12
42719: PUSH
42720: FOR_TO
42721: IFFALSE 43051
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42723: LD_VAR 0 12
42727: PUSH
42728: LD_VAR 0 7
42732: ARRAY
42733: PUSH
42734: LD_INT 1
42736: ARRAY
42737: PPUSH
42738: LD_VAR 0 12
42742: PUSH
42743: LD_VAR 0 7
42747: ARRAY
42748: PUSH
42749: LD_INT 2
42751: ARRAY
42752: PPUSH
42753: CALL_OW 488
42757: NOT
42758: PUSH
42759: LD_VAR 0 12
42763: PUSH
42764: LD_VAR 0 7
42768: ARRAY
42769: PUSH
42770: LD_INT 1
42772: ARRAY
42773: PPUSH
42774: LD_VAR 0 12
42778: PUSH
42779: LD_VAR 0 7
42783: ARRAY
42784: PUSH
42785: LD_INT 2
42787: ARRAY
42788: PPUSH
42789: CALL_OW 428
42793: PUSH
42794: LD_INT 0
42796: GREATER
42797: OR
42798: PUSH
42799: LD_VAR 0 12
42803: PUSH
42804: LD_VAR 0 7
42808: ARRAY
42809: PUSH
42810: LD_INT 1
42812: ARRAY
42813: PPUSH
42814: LD_VAR 0 12
42818: PUSH
42819: LD_VAR 0 7
42823: ARRAY
42824: PUSH
42825: LD_INT 2
42827: ARRAY
42828: PPUSH
42829: CALL_OW 351
42833: OR
42834: IFFALSE 42840
// exit ;
42836: POP
42837: POP
42838: GO 43147
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42840: LD_ADDR_VAR 0 8
42844: PUSH
42845: LD_VAR 0 12
42849: PUSH
42850: LD_VAR 0 7
42854: ARRAY
42855: PUSH
42856: LD_INT 1
42858: ARRAY
42859: PPUSH
42860: LD_VAR 0 12
42864: PUSH
42865: LD_VAR 0 7
42869: ARRAY
42870: PUSH
42871: LD_INT 2
42873: ARRAY
42874: PPUSH
42875: CALL_OW 546
42879: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42880: LD_VAR 0 8
42884: PUSH
42885: LD_INT 1
42887: ARRAY
42888: PUSH
42889: LD_VAR 0 8
42893: PUSH
42894: LD_INT 2
42896: ARRAY
42897: PUSH
42898: LD_VAR 0 13
42902: PUSH
42903: LD_INT 2
42905: PLUS
42906: GREATER
42907: OR
42908: PUSH
42909: LD_VAR 0 8
42913: PUSH
42914: LD_INT 2
42916: ARRAY
42917: PUSH
42918: LD_VAR 0 13
42922: PUSH
42923: LD_INT 2
42925: MINUS
42926: LESS
42927: OR
42928: PUSH
42929: LD_VAR 0 8
42933: PUSH
42934: LD_INT 3
42936: ARRAY
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: LD_INT 8
42943: PUSH
42944: LD_INT 9
42946: PUSH
42947: LD_INT 10
42949: PUSH
42950: LD_INT 11
42952: PUSH
42953: LD_INT 12
42955: PUSH
42956: LD_INT 13
42958: PUSH
42959: LD_INT 16
42961: PUSH
42962: LD_INT 17
42964: PUSH
42965: LD_INT 18
42967: PUSH
42968: LD_INT 19
42970: PUSH
42971: LD_INT 20
42973: PUSH
42974: LD_INT 21
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: IN
42992: NOT
42993: OR
42994: PUSH
42995: LD_VAR 0 8
42999: PUSH
43000: LD_INT 5
43002: ARRAY
43003: NOT
43004: OR
43005: PUSH
43006: LD_VAR 0 8
43010: PUSH
43011: LD_INT 6
43013: ARRAY
43014: PUSH
43015: LD_INT 1
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: LD_INT 7
43023: PUSH
43024: LD_INT 9
43026: PUSH
43027: LD_INT 10
43029: PUSH
43030: LD_INT 11
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: IN
43041: NOT
43042: OR
43043: IFFALSE 43049
// exit ;
43045: POP
43046: POP
43047: GO 43147
// end ;
43049: GO 42720
43051: POP
43052: POP
// side := GetSide ( depot ) ;
43053: LD_ADDR_VAR 0 9
43057: PUSH
43058: LD_VAR 0 1
43062: PPUSH
43063: CALL_OW 255
43067: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43068: LD_VAR 0 9
43072: PPUSH
43073: LD_VAR 0 3
43077: PPUSH
43078: LD_VAR 0 4
43082: PPUSH
43083: LD_INT 20
43085: PPUSH
43086: CALL 35801 0 4
43090: PUSH
43091: LD_INT 4
43093: ARRAY
43094: IFFALSE 43098
// exit ;
43096: GO 43147
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43098: LD_VAR 0 2
43102: PUSH
43103: LD_INT 29
43105: PUSH
43106: LD_INT 30
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: IN
43113: PUSH
43114: LD_VAR 0 3
43118: PPUSH
43119: LD_VAR 0 4
43123: PPUSH
43124: LD_VAR 0 9
43128: PPUSH
43129: CALL_OW 440
43133: NOT
43134: AND
43135: IFFALSE 43139
// exit ;
43137: GO 43147
// result := true ;
43139: LD_ADDR_VAR 0 6
43143: PUSH
43144: LD_INT 1
43146: ST_TO_ADDR
// end ;
43147: LD_VAR 0 6
43151: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43152: LD_INT 0
43154: PPUSH
43155: PPUSH
43156: PPUSH
43157: PPUSH
43158: PPUSH
43159: PPUSH
43160: PPUSH
43161: PPUSH
43162: PPUSH
43163: PPUSH
43164: PPUSH
43165: PPUSH
43166: PPUSH
43167: PPUSH
43168: PPUSH
43169: PPUSH
43170: PPUSH
43171: PPUSH
43172: PPUSH
43173: PPUSH
43174: PPUSH
43175: PPUSH
43176: PPUSH
43177: PPUSH
43178: PPUSH
43179: PPUSH
43180: PPUSH
43181: PPUSH
43182: PPUSH
43183: PPUSH
43184: PPUSH
43185: PPUSH
43186: PPUSH
43187: PPUSH
43188: PPUSH
43189: PPUSH
43190: PPUSH
43191: PPUSH
43192: PPUSH
43193: PPUSH
43194: PPUSH
43195: PPUSH
43196: PPUSH
43197: PPUSH
43198: PPUSH
43199: PPUSH
43200: PPUSH
43201: PPUSH
43202: PPUSH
43203: PPUSH
43204: PPUSH
43205: PPUSH
43206: PPUSH
43207: PPUSH
43208: PPUSH
43209: PPUSH
43210: PPUSH
43211: PPUSH
// result = [ ] ;
43212: LD_ADDR_VAR 0 7
43216: PUSH
43217: EMPTY
43218: ST_TO_ADDR
// temp_list = [ ] ;
43219: LD_ADDR_VAR 0 9
43223: PUSH
43224: EMPTY
43225: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43226: LD_VAR 0 4
43230: PUSH
43231: LD_INT 0
43233: PUSH
43234: LD_INT 1
43236: PUSH
43237: LD_INT 2
43239: PUSH
43240: LD_INT 3
43242: PUSH
43243: LD_INT 4
43245: PUSH
43246: LD_INT 5
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: IN
43257: NOT
43258: PUSH
43259: LD_VAR 0 1
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: LD_INT 1
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: IN
43274: PUSH
43275: LD_VAR 0 5
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: LD_INT 2
43285: PUSH
43286: LD_INT 3
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: LIST
43293: IN
43294: NOT
43295: AND
43296: OR
43297: IFFALSE 43301
// exit ;
43299: GO 61692
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43301: LD_VAR 0 1
43305: PUSH
43306: LD_INT 6
43308: PUSH
43309: LD_INT 7
43311: PUSH
43312: LD_INT 8
43314: PUSH
43315: LD_INT 13
43317: PUSH
43318: LD_INT 12
43320: PUSH
43321: LD_INT 15
43323: PUSH
43324: LD_INT 11
43326: PUSH
43327: LD_INT 14
43329: PUSH
43330: LD_INT 10
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: IN
43344: IFFALSE 43354
// btype = b_lab ;
43346: LD_ADDR_VAR 0 1
43350: PUSH
43351: LD_INT 6
43353: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43354: LD_VAR 0 6
43358: PUSH
43359: LD_INT 0
43361: PUSH
43362: LD_INT 1
43364: PUSH
43365: LD_INT 2
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: LIST
43372: IN
43373: NOT
43374: PUSH
43375: LD_VAR 0 1
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: LD_INT 1
43385: PUSH
43386: LD_INT 2
43388: PUSH
43389: LD_INT 3
43391: PUSH
43392: LD_INT 6
43394: PUSH
43395: LD_INT 36
43397: PUSH
43398: LD_INT 4
43400: PUSH
43401: LD_INT 5
43403: PUSH
43404: LD_INT 31
43406: PUSH
43407: LD_INT 32
43409: PUSH
43410: LD_INT 33
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: IN
43426: NOT
43427: PUSH
43428: LD_VAR 0 6
43432: PUSH
43433: LD_INT 1
43435: EQUAL
43436: AND
43437: OR
43438: PUSH
43439: LD_VAR 0 1
43443: PUSH
43444: LD_INT 2
43446: PUSH
43447: LD_INT 3
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: IN
43454: NOT
43455: PUSH
43456: LD_VAR 0 6
43460: PUSH
43461: LD_INT 2
43463: EQUAL
43464: AND
43465: OR
43466: IFFALSE 43476
// mode = 0 ;
43468: LD_ADDR_VAR 0 6
43472: PUSH
43473: LD_INT 0
43475: ST_TO_ADDR
// case mode of 0 :
43476: LD_VAR 0 6
43480: PUSH
43481: LD_INT 0
43483: DOUBLE
43484: EQUAL
43485: IFTRUE 43489
43487: GO 54942
43489: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43490: LD_ADDR_VAR 0 11
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: LD_INT 1
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: LD_INT 1
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: LD_INT 1
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 1
43571: NEG
43572: PUSH
43573: LD_INT 2
43575: NEG
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: LD_INT 2
43586: NEG
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 1
43594: PUSH
43595: LD_INT 1
43597: NEG
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: LD_INT 2
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: LD_INT 2
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: PUSH
43637: LD_INT 3
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: LD_INT 3
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: LD_INT 2
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43683: LD_ADDR_VAR 0 12
43687: PUSH
43688: LD_INT 0
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: LD_INT 1
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: LD_INT 0
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: LD_INT 1
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: NEG
43742: PUSH
43743: LD_INT 0
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 1
43752: NEG
43753: PUSH
43754: LD_INT 1
43756: NEG
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 1
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 2
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 2
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 1
43795: NEG
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 2
43806: NEG
43807: PUSH
43808: LD_INT 0
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 2
43817: NEG
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 2
43829: NEG
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 3
43840: NEG
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 3
43851: NEG
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43879: LD_ADDR_VAR 0 13
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: LD_INT 1
43899: NEG
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 1
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: PUSH
43918: LD_INT 1
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 1
43937: NEG
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: NEG
43949: PUSH
43950: LD_INT 1
43952: NEG
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: LD_INT 2
43964: NEG
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 2
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 2
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 2
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 2
44002: NEG
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 2
44014: NEG
44015: PUSH
44016: LD_INT 2
44018: NEG
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 2
44026: NEG
44027: PUSH
44028: LD_INT 3
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 3
44038: NEG
44039: PUSH
44040: LD_INT 2
44042: NEG
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 3
44050: NEG
44051: PUSH
44052: LD_INT 3
44054: NEG
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44078: LD_ADDR_VAR 0 14
44082: PUSH
44083: LD_INT 0
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 0
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 1
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: LD_INT 1
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 0
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 1
44136: NEG
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: LD_INT 2
44163: NEG
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: LD_INT 2
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: LD_INT 2
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: LD_INT 2
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: LD_INT 3
44228: NEG
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: LD_INT 3
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: LD_INT 2
44250: NEG
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44274: LD_ADDR_VAR 0 15
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: LD_INT 1
44294: NEG
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: NEG
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 1
44355: PUSH
44356: LD_INT 1
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 2
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 2
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 1
44386: NEG
44387: PUSH
44388: LD_INT 1
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 2
44397: NEG
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 2
44408: NEG
44409: PUSH
44410: LD_INT 1
44412: NEG
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 2
44420: PUSH
44421: LD_INT 1
44423: NEG
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 3
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 3
44441: PUSH
44442: LD_INT 1
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44467: LD_ADDR_VAR 0 16
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: PUSH
44496: LD_INT 0
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 1
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: LD_INT 1
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: NEG
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 1
44548: NEG
44549: PUSH
44550: LD_INT 2
44552: NEG
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 2
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 2
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: PUSH
44581: LD_INT 2
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 2
44590: NEG
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 2
44602: NEG
44603: PUSH
44604: LD_INT 2
44606: NEG
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 3
44614: PUSH
44615: LD_INT 2
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 3
44624: PUSH
44625: LD_INT 3
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 2
44634: PUSH
44635: LD_INT 3
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44660: LD_ADDR_VAR 0 17
44664: PUSH
44665: LD_INT 0
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: LD_INT 1
44680: NEG
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 1
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 1
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: LD_INT 1
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 1
44718: NEG
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: LD_INT 1
44733: NEG
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: LD_INT 2
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: LD_INT 2
44756: NEG
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 1
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 2
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 2
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 2
44795: PUSH
44796: LD_INT 2
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: PUSH
44806: LD_INT 2
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: LD_INT 2
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 1
44825: NEG
44826: PUSH
44827: LD_INT 1
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 2
44836: NEG
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 2
44847: NEG
44848: PUSH
44849: LD_INT 1
44851: NEG
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 2
44859: NEG
44860: PUSH
44861: LD_INT 2
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44890: LD_ADDR_VAR 0 18
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: LD_INT 1
44910: NEG
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 1
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: LD_INT 1
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 1
44948: NEG
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 1
44959: NEG
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: LD_INT 2
44975: NEG
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: LD_INT 2
44986: NEG
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 2
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 2
45025: PUSH
45026: LD_INT 2
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: LD_INT 2
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: LD_INT 2
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 2
45066: NEG
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 2
45077: NEG
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 2
45089: NEG
45090: PUSH
45091: LD_INT 2
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45120: LD_ADDR_VAR 0 19
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: LD_INT 2
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: LD_INT 2
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 2
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 2
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 2
45255: PUSH
45256: LD_INT 2
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 2
45296: NEG
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 2
45307: NEG
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 2
45319: NEG
45320: PUSH
45321: LD_INT 2
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45350: LD_ADDR_VAR 0 20
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: LD_INT 1
45423: NEG
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: LD_INT 2
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: LD_INT 2
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 2
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 2
45485: PUSH
45486: LD_INT 2
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: LD_INT 2
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: LD_INT 2
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 1
45515: NEG
45516: PUSH
45517: LD_INT 1
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 2
45526: NEG
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 2
45537: NEG
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 2
45549: NEG
45550: PUSH
45551: LD_INT 2
45553: NEG
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45580: LD_ADDR_VAR 0 21
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: NEG
45662: PUSH
45663: LD_INT 2
45665: NEG
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: LD_INT 2
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 2
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 2
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 2
45715: PUSH
45716: LD_INT 2
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: PUSH
45726: LD_INT 2
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: LD_INT 2
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 2
45756: NEG
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 2
45767: NEG
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 2
45779: NEG
45780: PUSH
45781: LD_INT 2
45783: NEG
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45810: LD_ADDR_VAR 0 22
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: LD_INT 2
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: LD_INT 2
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 2
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 2
45945: PUSH
45946: LD_INT 2
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: LD_INT 2
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: LD_INT 2
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: LD_INT 1
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 2
45986: NEG
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 2
45997: NEG
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 2
46009: NEG
46010: PUSH
46011: LD_INT 2
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46040: LD_ADDR_VAR 0 23
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: LD_INT 2
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 2
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 2
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 2
46175: PUSH
46176: LD_INT 2
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: LD_INT 2
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 2
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 2
46216: NEG
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 2
46227: NEG
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 2
46239: NEG
46240: PUSH
46241: LD_INT 2
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 2
46251: NEG
46252: PUSH
46253: LD_INT 3
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: LD_INT 3
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: LD_INT 2
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: LD_INT 1
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46320: LD_ADDR_VAR 0 24
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 0
46337: PUSH
46338: LD_INT 1
46340: NEG
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: LD_INT 0
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: LD_INT 2
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: LD_INT 2
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 2
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 2
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 2
46455: PUSH
46456: LD_INT 2
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: LD_INT 2
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: LD_INT 2
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 1
46485: NEG
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 2
46496: NEG
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 2
46507: NEG
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 2
46519: NEG
46520: PUSH
46521: LD_INT 2
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 1
46531: PUSH
46532: LD_INT 2
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 3
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 3
46563: PUSH
46564: LD_INT 2
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46596: LD_ADDR_VAR 0 25
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: LD_INT 1
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: LD_INT 0
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: NEG
46666: PUSH
46667: LD_INT 1
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: NEG
46678: PUSH
46679: LD_INT 2
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: LD_INT 2
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: LD_INT 1
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 2
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 2
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 2
46731: PUSH
46732: LD_INT 2
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 2
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: LD_INT 2
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: NEG
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 2
46783: NEG
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 2
46795: NEG
46796: PUSH
46797: LD_INT 2
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 3
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 3
46817: PUSH
46818: LD_INT 2
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 2
46827: PUSH
46828: LD_INT 3
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: LD_INT 3
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46870: LD_ADDR_VAR 0 26
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: LD_INT 2
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: LD_INT 2
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: LD_INT 1
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 2
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 2
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 2
47005: PUSH
47006: LD_INT 2
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 2
47046: NEG
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 2
47057: NEG
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 2
47069: NEG
47070: PUSH
47071: LD_INT 2
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: LD_INT 3
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: LD_INT 3
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: LD_INT 2
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 2
47112: NEG
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47146: LD_ADDR_VAR 0 27
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 1
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: NEG
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 1
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 2
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 2
47271: PUSH
47272: LD_INT 1
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 2
47281: PUSH
47282: LD_INT 2
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: LD_INT 2
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: LD_INT 2
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: NEG
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 2
47333: NEG
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 2
47345: NEG
47346: PUSH
47347: LD_INT 2
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: LD_INT 2
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 3
47379: NEG
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 3
47391: NEG
47392: PUSH
47393: LD_INT 2
47395: NEG
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47426: LD_ADDR_VAR 0 28
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: LD_INT 2
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: LD_INT 2
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 2
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 2
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 2
47561: PUSH
47562: LD_INT 2
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: LD_INT 2
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: LD_INT 2
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 1
47591: NEG
47592: PUSH
47593: LD_INT 1
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 2
47613: NEG
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 2
47625: NEG
47626: PUSH
47627: LD_INT 2
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 2
47637: NEG
47638: PUSH
47639: LD_INT 3
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: LD_INT 3
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 3
47661: NEG
47662: PUSH
47663: LD_INT 1
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 3
47673: NEG
47674: PUSH
47675: LD_INT 2
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47708: LD_ADDR_VAR 0 29
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: LD_INT 1
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: NEG
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: LD_INT 2
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: LD_INT 2
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: LD_INT 1
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 2
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: LD_INT 2
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 2
47874: NEG
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 2
47886: NEG
47887: PUSH
47888: LD_INT 2
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 2
47898: NEG
47899: PUSH
47900: LD_INT 3
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 2
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 3
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: PUSH
47932: LD_INT 3
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 2
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 3
47952: NEG
47953: PUSH
47954: LD_INT 2
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47987: LD_ADDR_VAR 0 30
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: LD_INT 1
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: LD_INT 2
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: LD_INT 2
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: LD_INT 1
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 2
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 2
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 2
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 2
48153: NEG
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: LD_INT 3
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: LD_INT 2
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 3
48199: PUSH
48200: LD_INT 2
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: PUSH
48210: LD_INT 3
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 2
48219: NEG
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 3
48230: NEG
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48265: LD_ADDR_VAR 0 31
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: NEG
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: LD_INT 1
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 2
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: LD_INT 1
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 2
48389: PUSH
48390: LD_INT 2
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: LD_INT 2
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: LD_INT 2
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 2
48430: NEG
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 2
48442: NEG
48443: PUSH
48444: LD_INT 2
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 2
48454: NEG
48455: PUSH
48456: LD_INT 3
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 2
48466: PUSH
48467: LD_INT 1
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 3
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: LD_INT 3
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: LD_INT 2
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 3
48508: NEG
48509: PUSH
48510: LD_INT 2
48512: NEG
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48543: LD_ADDR_VAR 0 32
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 0
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: LD_INT 1
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 0
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 1
48612: NEG
48613: PUSH
48614: LD_INT 1
48616: NEG
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: LD_INT 2
48628: NEG
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: LD_INT 2
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 2
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 2
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: LD_INT 2
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 2
48709: NEG
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: NEG
48721: PUSH
48722: LD_INT 1
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: LD_INT 3
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: LD_INT 2
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 3
48755: PUSH
48756: LD_INT 2
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 2
48765: PUSH
48766: LD_INT 3
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 2
48775: NEG
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 3
48786: NEG
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48821: LD_ADDR_VAR 0 33
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: LD_INT 0
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: LD_INT 2
48906: NEG
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: LD_INT 1
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 2
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 2
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: LD_INT 2
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: LD_INT 2
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 2
48976: NEG
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 2
48987: NEG
48988: PUSH
48989: LD_INT 1
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 2
48999: NEG
49000: PUSH
49001: LD_INT 2
49003: NEG
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 2
49011: NEG
49012: PUSH
49013: LD_INT 3
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 3
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: LD_INT 3
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: LD_INT 2
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 3
49065: NEG
49066: PUSH
49067: LD_INT 2
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49100: LD_ADDR_VAR 0 34
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 0
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 1
49169: NEG
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: LD_INT 2
49185: NEG
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: LD_INT 2
49196: NEG
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 2
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 2
49225: PUSH
49226: LD_INT 2
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: PUSH
49236: LD_INT 2
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 2
49256: NEG
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 2
49267: NEG
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 2
49279: NEG
49280: PUSH
49281: LD_INT 2
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 1
49291: NEG
49292: PUSH
49293: LD_INT 3
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: LD_INT 2
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 3
49314: PUSH
49315: LD_INT 2
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 2
49324: PUSH
49325: LD_INT 3
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 2
49334: NEG
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 3
49345: NEG
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49380: LD_ADDR_VAR 0 35
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: LD_INT 1
49400: NEG
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: LD_INT 1
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: LD_INT 1
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: NEG
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 2
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 2
49471: NEG
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49492: LD_ADDR_VAR 0 36
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: LD_INT 1
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: LD_INT 2
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: LD_INT 2
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49604: LD_ADDR_VAR 0 37
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: LD_INT 0
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: PUSH
49633: LD_INT 0
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: LD_INT 0
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49716: LD_ADDR_VAR 0 38
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: LD_INT 1
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 2
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 2
49807: NEG
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49828: LD_ADDR_VAR 0 39
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 1
49866: PUSH
49867: LD_INT 1
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: NEG
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: LD_INT 1
49901: NEG
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: LD_INT 2
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: LD_INT 2
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49940: LD_ADDR_VAR 0 40
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50052: LD_ADDR_VAR 0 41
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 1
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: LD_INT 0
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: NEG
50134: PUSH
50135: LD_INT 2
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 1
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 2
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 2
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 2
50176: PUSH
50177: LD_INT 2
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: LD_INT 2
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 2
50207: NEG
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 2
50218: NEG
50219: PUSH
50220: LD_INT 1
50222: NEG
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 2
50230: NEG
50231: PUSH
50232: LD_INT 2
50234: NEG
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 2
50242: NEG
50243: PUSH
50244: LD_INT 3
50246: NEG
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 2
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 3
50265: PUSH
50266: LD_INT 0
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 3
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 3
50285: PUSH
50286: LD_INT 2
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 3
50295: PUSH
50296: LD_INT 3
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: LD_INT 3
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 2
50315: NEG
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 3
50326: NEG
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 3
50337: NEG
50338: PUSH
50339: LD_INT 1
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 3
50349: NEG
50350: PUSH
50351: LD_INT 2
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 3
50361: NEG
50362: PUSH
50363: LD_INT 3
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50402: LD_ADDR_VAR 0 42
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: LD_INT 1
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: LD_INT 1
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: LD_INT 2
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: LD_INT 2
50498: NEG
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 2
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 2
50527: PUSH
50528: LD_INT 2
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: LD_INT 2
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: LD_INT 2
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 2
50568: NEG
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 2
50580: NEG
50581: PUSH
50582: LD_INT 2
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 2
50592: NEG
50593: PUSH
50594: LD_INT 3
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: LD_INT 3
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: LD_INT 3
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: LD_INT 2
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 3
50638: PUSH
50639: LD_INT 2
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 3
50648: PUSH
50649: LD_INT 3
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 2
50658: PUSH
50659: LD_INT 3
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: LD_INT 3
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: LD_INT 3
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 3
50699: NEG
50700: PUSH
50701: LD_INT 2
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 3
50711: NEG
50712: PUSH
50713: LD_INT 3
50715: NEG
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50752: LD_ADDR_VAR 0 43
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: LD_INT 1
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 1
50810: NEG
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: LD_INT 1
50825: NEG
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: NEG
50834: PUSH
50835: LD_INT 2
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: LD_INT 2
50848: NEG
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 1
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 2
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 2
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: LD_INT 2
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: LD_INT 2
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 2
50918: NEG
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: NEG
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: LD_INT 3
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: LD_INT 3
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: LD_INT 2
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 3
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 3
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: LD_INT 3
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: LD_INT 3
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: LD_INT 2
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 2
51037: NEG
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 3
51048: NEG
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 3
51059: NEG
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51100: LD_ADDR_VAR 0 44
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: NEG
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: LD_INT 2
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 1
51193: PUSH
51194: LD_INT 1
51196: NEG
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 2
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 2
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 2
51224: PUSH
51225: LD_INT 2
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: LD_INT 2
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 2
51255: NEG
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 2
51266: NEG
51267: PUSH
51268: LD_INT 1
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 2
51278: NEG
51279: PUSH
51280: LD_INT 2
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 2
51290: NEG
51291: PUSH
51292: LD_INT 3
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 2
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 3
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 3
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 3
51333: PUSH
51334: LD_INT 2
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 3
51343: PUSH
51344: LD_INT 3
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 2
51353: PUSH
51354: LD_INT 3
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 2
51363: NEG
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 3
51374: NEG
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 3
51385: NEG
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 3
51397: NEG
51398: PUSH
51399: LD_INT 2
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 3
51409: NEG
51410: PUSH
51411: LD_INT 3
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51450: LD_ADDR_VAR 0 45
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: LD_INT 1
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: LD_INT 2
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: LD_INT 2
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 2
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 2
51575: PUSH
51576: LD_INT 2
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: LD_INT 2
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: LD_INT 2
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 2
51616: NEG
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 2
51628: NEG
51629: PUSH
51630: LD_INT 2
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 2
51640: NEG
51641: PUSH
51642: LD_INT 3
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: LD_INT 3
51656: NEG
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: LD_INT 3
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: LD_INT 2
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 3
51686: PUSH
51687: LD_INT 2
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 3
51696: PUSH
51697: LD_INT 3
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 2
51706: PUSH
51707: LD_INT 3
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: PUSH
51717: LD_INT 3
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: LD_INT 3
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 1
51736: NEG
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 3
51747: NEG
51748: PUSH
51749: LD_INT 2
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 3
51759: NEG
51760: PUSH
51761: LD_INT 3
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51800: LD_ADDR_VAR 0 46
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: LD_INT 2
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 2
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: LD_INT 2
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 2
51966: NEG
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 2
51977: NEG
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 1
51989: NEG
51990: PUSH
51991: LD_INT 3
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: LD_INT 3
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: PUSH
52013: LD_INT 2
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 2
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 3
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 3
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: LD_INT 3
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: LD_INT 3
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: LD_INT 2
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 2
52085: NEG
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 3
52096: NEG
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 3
52107: NEG
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52148: LD_ADDR_VAR 0 47
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: LD_INT 0
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: LD_INT 2
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 0
52241: PUSH
52242: LD_INT 2
52244: NEG
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 2
52263: NEG
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 2
52275: NEG
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52299: LD_ADDR_VAR 0 48
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: LD_INT 2
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: LD_INT 2
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 2
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52446: LD_ADDR_VAR 0 49
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 1
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 2
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 2
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 2
52558: PUSH
52559: LD_INT 2
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: LD_INT 2
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52590: LD_ADDR_VAR 0 50
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 0
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: LD_INT 1
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: LD_INT 0
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 2
52681: PUSH
52682: LD_INT 2
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: LD_INT 2
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: LD_INT 2
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: LD_INT 1
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52734: LD_ADDR_VAR 0 51
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 0
52782: PUSH
52783: LD_INT 1
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 1
52803: NEG
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: LD_INT 2
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 2
52846: NEG
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52881: LD_ADDR_VAR 0 52
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: LD_INT 2
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 1
52974: NEG
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 2
52985: NEG
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 2
52996: NEG
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 2
53008: NEG
53009: PUSH
53010: LD_INT 2
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53032: LD_ADDR_VAR 0 53
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: LD_INT 1
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 1
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: LD_INT 1
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: NEG
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: LD_INT 1
53105: NEG
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: LD_INT 2
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: LD_INT 2
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 2
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 2
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 2
53167: PUSH
53168: LD_INT 2
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: PUSH
53178: LD_INT 2
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 0
53187: PUSH
53188: LD_INT 2
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: LD_INT 1
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 2
53208: NEG
53209: PUSH
53210: LD_INT 0
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 2
53219: NEG
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 2
53231: NEG
53232: PUSH
53233: LD_INT 2
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53262: LD_ADDR_VAR 0 54
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: LD_INT 1
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: LD_INT 2
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: LD_INT 2
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 2
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 2
53387: PUSH
53388: LD_INT 1
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 2
53397: PUSH
53398: LD_INT 2
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: LD_INT 2
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: NEG
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 2
53438: NEG
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 2
53449: NEG
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 2
53461: NEG
53462: PUSH
53463: LD_INT 2
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53492: LD_ADDR_VAR 0 55
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 1
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: LD_INT 2
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: LD_INT 2
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 2
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: LD_INT 1
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 2
53627: PUSH
53628: LD_INT 2
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: LD_INT 2
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: LD_INT 2
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 2
53668: NEG
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 2
53679: NEG
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 2
53691: NEG
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53722: LD_ADDR_VAR 0 56
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: LD_INT 1
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 2
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: LD_INT 2
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 2
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 2
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 2
53857: PUSH
53858: LD_INT 2
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: LD_INT 2
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: LD_INT 2
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 2
53898: NEG
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 2
53909: NEG
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 2
53921: NEG
53922: PUSH
53923: LD_INT 2
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53952: LD_ADDR_VAR 0 57
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 1
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: PUSH
54023: LD_INT 1
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: LD_INT 2
54037: NEG
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: LD_INT 2
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 2
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 2
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 2
54087: PUSH
54088: LD_INT 2
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: LD_INT 2
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: LD_INT 2
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: LD_INT 1
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 2
54128: NEG
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 2
54139: NEG
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 2
54151: NEG
54152: PUSH
54153: LD_INT 2
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54182: LD_ADDR_VAR 0 58
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: NEG
54252: PUSH
54253: LD_INT 1
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: LD_INT 2
54267: NEG
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 2
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: LD_INT 2
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: LD_INT 2
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 2
54358: NEG
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 2
54369: NEG
54370: PUSH
54371: LD_INT 1
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 2
54381: NEG
54382: PUSH
54383: LD_INT 2
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54412: LD_ADDR_VAR 0 59
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: LD_INT 1
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 1
54481: NEG
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54500: LD_ADDR_VAR 0 60
54504: PUSH
54505: LD_INT 0
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 1
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54588: LD_ADDR_VAR 0 61
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 1
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54676: LD_ADDR_VAR 0 62
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: LD_INT 1
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: LD_INT 1
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 1
54734: NEG
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54764: LD_ADDR_VAR 0 63
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: LD_INT 1
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54852: LD_ADDR_VAR 0 64
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: LD_INT 1
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: LD_INT 1
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: ST_TO_ADDR
// end ; 1 :
54940: GO 60837
54942: LD_INT 1
54944: DOUBLE
54945: EQUAL
54946: IFTRUE 54950
54948: GO 57573
54950: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54951: LD_ADDR_VAR 0 11
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: LD_INT 3
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: LD_INT 3
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: LD_INT 2
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: LIST
54994: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54995: LD_ADDR_VAR 0 12
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 3
55013: PUSH
55014: LD_INT 0
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 3
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: LIST
55035: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55036: LD_ADDR_VAR 0 13
55040: PUSH
55041: LD_INT 3
55043: PUSH
55044: LD_INT 2
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 3
55053: PUSH
55054: LD_INT 3
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: LD_INT 3
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: LIST
55075: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55076: LD_ADDR_VAR 0 14
55080: PUSH
55081: LD_INT 1
55083: PUSH
55084: LD_INT 3
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: LD_INT 3
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: LD_INT 2
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: LIST
55116: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55117: LD_ADDR_VAR 0 15
55121: PUSH
55122: LD_INT 2
55124: NEG
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 3
55135: NEG
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 3
55146: NEG
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: LIST
55160: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55161: LD_ADDR_VAR 0 16
55165: PUSH
55166: LD_INT 2
55168: NEG
55169: PUSH
55170: LD_INT 3
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 3
55180: NEG
55181: PUSH
55182: LD_INT 2
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 3
55192: NEG
55193: PUSH
55194: LD_INT 3
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: LIST
55206: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55207: LD_ADDR_VAR 0 17
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: LD_INT 3
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: LD_INT 3
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: LD_INT 2
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: LIST
55250: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55251: LD_ADDR_VAR 0 18
55255: PUSH
55256: LD_INT 2
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 3
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 3
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: LIST
55291: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55292: LD_ADDR_VAR 0 19
55296: PUSH
55297: LD_INT 3
55299: PUSH
55300: LD_INT 2
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 3
55309: PUSH
55310: LD_INT 3
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 2
55319: PUSH
55320: LD_INT 3
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: LIST
55331: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55332: LD_ADDR_VAR 0 20
55336: PUSH
55337: LD_INT 1
55339: PUSH
55340: LD_INT 3
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: LD_INT 3
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: LD_INT 2
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: LIST
55372: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55373: LD_ADDR_VAR 0 21
55377: PUSH
55378: LD_INT 2
55380: NEG
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 3
55391: NEG
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 3
55402: NEG
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: LIST
55416: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55417: LD_ADDR_VAR 0 22
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: LD_INT 3
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 3
55436: NEG
55437: PUSH
55438: LD_INT 2
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 3
55448: NEG
55449: PUSH
55450: LD_INT 3
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: LIST
55462: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55463: LD_ADDR_VAR 0 23
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: LD_INT 3
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: LD_INT 4
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: LD_INT 3
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: LIST
55506: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55507: LD_ADDR_VAR 0 24
55511: PUSH
55512: LD_INT 3
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 3
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 4
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: LIST
55547: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55548: LD_ADDR_VAR 0 25
55552: PUSH
55553: LD_INT 3
55555: PUSH
55556: LD_INT 3
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 4
55565: PUSH
55566: LD_INT 3
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 3
55575: PUSH
55576: LD_INT 4
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: LIST
55587: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55588: LD_ADDR_VAR 0 26
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: LD_INT 3
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: LD_INT 4
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: LD_INT 3
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: LIST
55628: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55629: LD_ADDR_VAR 0 27
55633: PUSH
55634: LD_INT 3
55636: NEG
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 3
55647: NEG
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 4
55658: NEG
55659: PUSH
55660: LD_INT 1
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: LIST
55672: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55673: LD_ADDR_VAR 0 28
55677: PUSH
55678: LD_INT 3
55680: NEG
55681: PUSH
55682: LD_INT 3
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 3
55692: NEG
55693: PUSH
55694: LD_INT 4
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 4
55704: NEG
55705: PUSH
55706: LD_INT 3
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: LIST
55718: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55719: LD_ADDR_VAR 0 29
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: LD_INT 3
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: LD_INT 3
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: LD_INT 2
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: LD_INT 4
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: LD_INT 4
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: LD_INT 3
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: LD_INT 5
55798: NEG
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: LD_INT 5
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: LD_INT 4
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: LD_INT 6
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: LD_INT 6
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 1
55851: PUSH
55852: LD_INT 5
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55874: LD_ADDR_VAR 0 30
55878: PUSH
55879: LD_INT 2
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 3
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 3
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 3
55912: PUSH
55913: LD_INT 1
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 4
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 4
55933: PUSH
55934: LD_INT 1
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 4
55943: PUSH
55944: LD_INT 1
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 5
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 5
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 5
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 6
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 6
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56017: LD_ADDR_VAR 0 31
56021: PUSH
56022: LD_INT 3
56024: PUSH
56025: LD_INT 2
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 3
56034: PUSH
56035: LD_INT 3
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 2
56044: PUSH
56045: LD_INT 3
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 4
56054: PUSH
56055: LD_INT 3
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 4
56064: PUSH
56065: LD_INT 4
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 3
56074: PUSH
56075: LD_INT 4
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 5
56084: PUSH
56085: LD_INT 4
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 5
56094: PUSH
56095: LD_INT 5
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 4
56104: PUSH
56105: LD_INT 5
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 6
56114: PUSH
56115: LD_INT 5
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 6
56124: PUSH
56125: LD_INT 6
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 5
56134: PUSH
56135: LD_INT 6
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56156: LD_ADDR_VAR 0 32
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: LD_INT 3
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: LD_INT 3
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 1
56183: NEG
56184: PUSH
56185: LD_INT 2
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: LD_INT 4
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: LD_INT 4
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: LD_INT 3
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: LD_INT 5
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: LD_INT 5
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: LD_INT 4
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: LD_INT 6
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: LD_INT 6
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: LD_INT 5
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56299: LD_ADDR_VAR 0 33
56303: PUSH
56304: LD_INT 2
56306: NEG
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 3
56317: NEG
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 3
56328: NEG
56329: PUSH
56330: LD_INT 1
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 3
56340: NEG
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 4
56351: NEG
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 4
56362: NEG
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 4
56374: NEG
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 5
56385: NEG
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 5
56396: NEG
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 5
56408: NEG
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 6
56419: NEG
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 6
56430: NEG
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56454: LD_ADDR_VAR 0 34
56458: PUSH
56459: LD_INT 2
56461: NEG
56462: PUSH
56463: LD_INT 3
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 3
56473: NEG
56474: PUSH
56475: LD_INT 2
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 3
56485: NEG
56486: PUSH
56487: LD_INT 3
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 3
56497: NEG
56498: PUSH
56499: LD_INT 4
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 4
56509: NEG
56510: PUSH
56511: LD_INT 3
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 4
56521: NEG
56522: PUSH
56523: LD_INT 4
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 4
56533: NEG
56534: PUSH
56535: LD_INT 5
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 5
56545: NEG
56546: PUSH
56547: LD_INT 4
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 5
56557: NEG
56558: PUSH
56559: LD_INT 5
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 5
56569: NEG
56570: PUSH
56571: LD_INT 6
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 6
56581: NEG
56582: PUSH
56583: LD_INT 5
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 6
56593: NEG
56594: PUSH
56595: LD_INT 6
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56617: LD_ADDR_VAR 0 41
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: LD_INT 2
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 1
56635: NEG
56636: PUSH
56637: LD_INT 3
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: LD_INT 2
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: LIST
56660: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56661: LD_ADDR_VAR 0 42
56665: PUSH
56666: LD_INT 2
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 2
56678: PUSH
56679: LD_INT 1
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 3
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: LIST
56701: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56702: LD_ADDR_VAR 0 43
56706: PUSH
56707: LD_INT 2
56709: PUSH
56710: LD_INT 2
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 3
56719: PUSH
56720: LD_INT 2
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 2
56729: PUSH
56730: LD_INT 3
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: LIST
56741: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56742: LD_ADDR_VAR 0 44
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: LD_INT 2
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 1
56759: PUSH
56760: LD_INT 3
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: LD_INT 2
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: LIST
56782: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56783: LD_ADDR_VAR 0 45
56787: PUSH
56788: LD_INT 2
56790: NEG
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 2
56801: NEG
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 3
56812: NEG
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: LIST
56826: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56827: LD_ADDR_VAR 0 46
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: LD_INT 2
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 2
56846: NEG
56847: PUSH
56848: LD_INT 3
56850: NEG
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 3
56858: NEG
56859: PUSH
56860: LD_INT 2
56862: NEG
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: LIST
56872: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56873: LD_ADDR_VAR 0 47
56877: PUSH
56878: LD_INT 2
56880: NEG
56881: PUSH
56882: LD_INT 3
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: LD_INT 3
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56906: LD_ADDR_VAR 0 48
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: LD_INT 2
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 2
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56937: LD_ADDR_VAR 0 49
56941: PUSH
56942: LD_INT 3
56944: PUSH
56945: LD_INT 1
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 3
56954: PUSH
56955: LD_INT 2
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56966: LD_ADDR_VAR 0 50
56970: PUSH
56971: LD_INT 2
56973: PUSH
56974: LD_INT 3
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: LD_INT 3
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56995: LD_ADDR_VAR 0 51
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: LD_INT 2
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 2
57013: NEG
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57026: LD_ADDR_VAR 0 52
57030: PUSH
57031: LD_INT 3
57033: NEG
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 3
57045: NEG
57046: PUSH
57047: LD_INT 2
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57059: LD_ADDR_VAR 0 53
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: LD_INT 3
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: LD_INT 3
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: LD_INT 2
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: LIST
57102: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57103: LD_ADDR_VAR 0 54
57107: PUSH
57108: LD_INT 2
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 3
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 3
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: LIST
57143: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57144: LD_ADDR_VAR 0 55
57148: PUSH
57149: LD_INT 3
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 3
57161: PUSH
57162: LD_INT 3
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 2
57171: PUSH
57172: LD_INT 3
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: LIST
57183: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57184: LD_ADDR_VAR 0 56
57188: PUSH
57189: LD_INT 1
57191: PUSH
57192: LD_INT 3
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: LD_INT 3
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: LD_INT 2
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: LIST
57224: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57225: LD_ADDR_VAR 0 57
57229: PUSH
57230: LD_INT 2
57232: NEG
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 3
57243: NEG
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 3
57254: NEG
57255: PUSH
57256: LD_INT 1
57258: NEG
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: LIST
57268: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57269: LD_ADDR_VAR 0 58
57273: PUSH
57274: LD_INT 2
57276: NEG
57277: PUSH
57278: LD_INT 3
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 3
57288: NEG
57289: PUSH
57290: LD_INT 2
57292: NEG
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 3
57300: NEG
57301: PUSH
57302: LD_INT 3
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: LIST
57314: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57315: LD_ADDR_VAR 0 59
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: LD_INT 2
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: LD_INT 2
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: LD_INT 1
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: LIST
57358: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57359: LD_ADDR_VAR 0 60
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 2
57377: PUSH
57378: LD_INT 0
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 2
57387: PUSH
57388: LD_INT 1
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: LIST
57399: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57400: LD_ADDR_VAR 0 61
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 2
57417: PUSH
57418: LD_INT 2
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 1
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: LIST
57439: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57440: LD_ADDR_VAR 0 62
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: LD_INT 2
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: LD_INT 2
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: LD_INT 1
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: LIST
57480: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57481: LD_ADDR_VAR 0 63
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: LD_INT 1
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: LD_INT 0
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 2
57510: NEG
57511: PUSH
57512: LD_INT 1
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: LIST
57524: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57525: LD_ADDR_VAR 0 64
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: LD_INT 2
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 2
57544: NEG
57545: PUSH
57546: LD_INT 1
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 2
57556: NEG
57557: PUSH
57558: LD_INT 2
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: LIST
57570: ST_TO_ADDR
// end ; 2 :
57571: GO 60837
57573: LD_INT 2
57575: DOUBLE
57576: EQUAL
57577: IFTRUE 57581
57579: GO 60836
57581: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57582: LD_ADDR_VAR 0 29
57586: PUSH
57587: LD_INT 4
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 4
57599: PUSH
57600: LD_INT 1
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 5
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 5
57620: PUSH
57621: LD_INT 1
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 4
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 3
57640: PUSH
57641: LD_INT 0
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 3
57650: PUSH
57651: LD_INT 1
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 3
57661: PUSH
57662: LD_INT 2
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 5
57672: PUSH
57673: LD_INT 2
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 3
57682: PUSH
57683: LD_INT 3
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 3
57692: PUSH
57693: LD_INT 2
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 4
57702: PUSH
57703: LD_INT 3
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 4
57712: PUSH
57713: LD_INT 4
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 3
57722: PUSH
57723: LD_INT 4
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 2
57732: PUSH
57733: LD_INT 3
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 2
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 4
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 2
57762: PUSH
57763: LD_INT 4
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: LD_INT 4
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: LD_INT 3
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 1
57792: PUSH
57793: LD_INT 4
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 1
57802: PUSH
57803: LD_INT 5
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: LD_INT 5
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: LD_INT 4
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: LD_INT 3
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 2
57844: PUSH
57845: LD_INT 5
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 2
57854: NEG
57855: PUSH
57856: LD_INT 3
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 3
57865: NEG
57866: PUSH
57867: LD_INT 0
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 3
57876: NEG
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 2
57888: NEG
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 2
57899: NEG
57900: PUSH
57901: LD_INT 1
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 3
57910: NEG
57911: PUSH
57912: LD_INT 1
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 4
57921: NEG
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 4
57932: NEG
57933: PUSH
57934: LD_INT 1
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 4
57944: NEG
57945: PUSH
57946: LD_INT 2
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: LD_INT 2
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 4
57967: NEG
57968: PUSH
57969: LD_INT 4
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 4
57979: NEG
57980: PUSH
57981: LD_INT 5
57983: NEG
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 3
57991: NEG
57992: PUSH
57993: LD_INT 4
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 3
58003: NEG
58004: PUSH
58005: LD_INT 3
58007: NEG
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 4
58015: NEG
58016: PUSH
58017: LD_INT 3
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 5
58027: NEG
58028: PUSH
58029: LD_INT 4
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 5
58039: NEG
58040: PUSH
58041: LD_INT 5
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 3
58051: NEG
58052: PUSH
58053: LD_INT 5
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 5
58063: NEG
58064: PUSH
58065: LD_INT 3
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58120: LD_ADDR_VAR 0 30
58124: PUSH
58125: LD_INT 4
58127: PUSH
58128: LD_INT 4
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 4
58137: PUSH
58138: LD_INT 3
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 5
58147: PUSH
58148: LD_INT 4
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 5
58157: PUSH
58158: LD_INT 5
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 4
58167: PUSH
58168: LD_INT 5
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 3
58177: PUSH
58178: LD_INT 4
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 3
58187: PUSH
58188: LD_INT 3
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 5
58197: PUSH
58198: LD_INT 3
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 3
58207: PUSH
58208: LD_INT 5
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: LD_INT 3
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: LD_INT 2
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: LD_INT 3
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 1
58247: PUSH
58248: LD_INT 4
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: LD_INT 4
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 1
58267: NEG
58268: PUSH
58269: LD_INT 3
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: LD_INT 2
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 2
58289: PUSH
58290: LD_INT 4
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 2
58299: NEG
58300: PUSH
58301: LD_INT 2
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 4
58310: NEG
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 4
58321: NEG
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 3
58333: NEG
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 3
58344: NEG
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 4
58355: NEG
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 5
58366: NEG
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 5
58377: NEG
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 5
58389: NEG
58390: PUSH
58391: LD_INT 2
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 3
58401: NEG
58402: PUSH
58403: LD_INT 2
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 3
58412: NEG
58413: PUSH
58414: LD_INT 3
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 3
58424: NEG
58425: PUSH
58426: LD_INT 4
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 2
58436: NEG
58437: PUSH
58438: LD_INT 3
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 2
58448: NEG
58449: PUSH
58450: LD_INT 2
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 3
58460: NEG
58461: PUSH
58462: LD_INT 2
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 4
58472: NEG
58473: PUSH
58474: LD_INT 3
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 4
58484: NEG
58485: PUSH
58486: LD_INT 4
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 2
58496: NEG
58497: PUSH
58498: LD_INT 4
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 4
58508: NEG
58509: PUSH
58510: LD_INT 2
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 0
58520: PUSH
58521: LD_INT 4
58523: NEG
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: LD_INT 5
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: LD_INT 4
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: LD_INT 3
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: LD_INT 3
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 1
58575: NEG
58576: PUSH
58577: LD_INT 4
58579: NEG
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 1
58587: NEG
58588: PUSH
58589: LD_INT 5
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 2
58599: PUSH
58600: LD_INT 3
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 2
58610: NEG
58611: PUSH
58612: LD_INT 5
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58667: LD_ADDR_VAR 0 31
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: LD_INT 4
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: LD_INT 3
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: PUSH
58695: LD_INT 4
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: LD_INT 5
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: LD_INT 5
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: LD_INT 4
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 3
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 2
58746: PUSH
58747: LD_INT 5
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 2
58756: NEG
58757: PUSH
58758: LD_INT 3
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 3
58767: NEG
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 3
58778: NEG
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 2
58790: NEG
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 2
58801: NEG
58802: PUSH
58803: LD_INT 1
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 3
58812: NEG
58813: PUSH
58814: LD_INT 1
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 4
58823: NEG
58824: PUSH
58825: LD_INT 0
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 4
58834: NEG
58835: PUSH
58836: LD_INT 1
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 4
58846: NEG
58847: PUSH
58848: LD_INT 2
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 2
58858: NEG
58859: PUSH
58860: LD_INT 2
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 4
58869: NEG
58870: PUSH
58871: LD_INT 4
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 4
58881: NEG
58882: PUSH
58883: LD_INT 5
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 3
58893: NEG
58894: PUSH
58895: LD_INT 4
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 3
58905: NEG
58906: PUSH
58907: LD_INT 3
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 4
58917: NEG
58918: PUSH
58919: LD_INT 3
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 5
58929: NEG
58930: PUSH
58931: LD_INT 4
58933: NEG
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 5
58941: NEG
58942: PUSH
58943: LD_INT 5
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 3
58953: NEG
58954: PUSH
58955: LD_INT 5
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 5
58965: NEG
58966: PUSH
58967: LD_INT 3
58969: NEG
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: LD_INT 3
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 0
58988: PUSH
58989: LD_INT 4
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 1
58999: PUSH
59000: LD_INT 3
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: LD_INT 2
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 1
59032: NEG
59033: PUSH
59034: LD_INT 3
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: LD_INT 4
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 2
59056: PUSH
59057: LD_INT 2
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 2
59067: NEG
59068: PUSH
59069: LD_INT 4
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 4
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 4
59089: PUSH
59090: LD_INT 1
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 5
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 5
59110: PUSH
59111: LD_INT 1
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 4
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 3
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 3
59140: PUSH
59141: LD_INT 1
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 3
59151: PUSH
59152: LD_INT 2
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 5
59162: PUSH
59163: LD_INT 2
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59217: LD_ADDR_VAR 0 32
59221: PUSH
59222: LD_INT 4
59224: NEG
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 4
59235: NEG
59236: PUSH
59237: LD_INT 1
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 3
59247: NEG
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 3
59258: NEG
59259: PUSH
59260: LD_INT 1
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 4
59269: NEG
59270: PUSH
59271: LD_INT 1
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 5
59280: NEG
59281: PUSH
59282: LD_INT 0
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 5
59291: NEG
59292: PUSH
59293: LD_INT 1
59295: NEG
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 5
59303: NEG
59304: PUSH
59305: LD_INT 2
59307: NEG
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 3
59315: NEG
59316: PUSH
59317: LD_INT 2
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 3
59326: NEG
59327: PUSH
59328: LD_INT 3
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 3
59338: NEG
59339: PUSH
59340: LD_INT 4
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 2
59350: NEG
59351: PUSH
59352: LD_INT 3
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 2
59362: NEG
59363: PUSH
59364: LD_INT 2
59366: NEG
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 3
59374: NEG
59375: PUSH
59376: LD_INT 2
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 4
59386: NEG
59387: PUSH
59388: LD_INT 3
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 4
59398: NEG
59399: PUSH
59400: LD_INT 4
59402: NEG
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 2
59410: NEG
59411: PUSH
59412: LD_INT 4
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 4
59422: NEG
59423: PUSH
59424: LD_INT 2
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: LD_INT 4
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: LD_INT 5
59448: NEG
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: LD_INT 4
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 1
59467: PUSH
59468: LD_INT 3
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: LD_INT 3
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 1
59489: NEG
59490: PUSH
59491: LD_INT 4
59493: NEG
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 1
59501: NEG
59502: PUSH
59503: LD_INT 5
59505: NEG
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 2
59513: PUSH
59514: LD_INT 3
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 2
59524: NEG
59525: PUSH
59526: LD_INT 5
59528: NEG
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 3
59536: PUSH
59537: LD_INT 0
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 3
59546: PUSH
59547: LD_INT 1
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 4
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 4
59567: PUSH
59568: LD_INT 1
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 3
59577: PUSH
59578: LD_INT 1
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 2
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 2
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 2
59608: PUSH
59609: LD_INT 2
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 4
59619: PUSH
59620: LD_INT 2
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 4
59629: PUSH
59630: LD_INT 4
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 4
59639: PUSH
59640: LD_INT 3
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 5
59649: PUSH
59650: LD_INT 4
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 5
59659: PUSH
59660: LD_INT 5
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 4
59669: PUSH
59670: LD_INT 5
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 3
59679: PUSH
59680: LD_INT 4
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 3
59689: PUSH
59690: LD_INT 3
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 5
59699: PUSH
59700: LD_INT 3
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 3
59709: PUSH
59710: LD_INT 5
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59764: LD_ADDR_VAR 0 33
59768: PUSH
59769: LD_INT 4
59771: NEG
59772: PUSH
59773: LD_INT 4
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 4
59783: NEG
59784: PUSH
59785: LD_INT 5
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 3
59795: NEG
59796: PUSH
59797: LD_INT 4
59799: NEG
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 3
59807: NEG
59808: PUSH
59809: LD_INT 3
59811: NEG
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 4
59819: NEG
59820: PUSH
59821: LD_INT 3
59823: NEG
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 5
59831: NEG
59832: PUSH
59833: LD_INT 4
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 5
59843: NEG
59844: PUSH
59845: LD_INT 5
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 3
59855: NEG
59856: PUSH
59857: LD_INT 5
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 5
59867: NEG
59868: PUSH
59869: LD_INT 3
59871: NEG
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 0
59879: PUSH
59880: LD_INT 3
59882: NEG
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: LD_INT 4
59893: NEG
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 1
59901: PUSH
59902: LD_INT 3
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 1
59912: PUSH
59913: LD_INT 2
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 0
59923: PUSH
59924: LD_INT 2
59926: NEG
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 1
59934: NEG
59935: PUSH
59936: LD_INT 3
59938: NEG
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: LD_INT 4
59950: NEG
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 2
59958: PUSH
59959: LD_INT 2
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 2
59969: NEG
59970: PUSH
59971: LD_INT 4
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 4
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 4
59991: PUSH
59992: LD_INT 1
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 5
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 5
60012: PUSH
60013: LD_INT 1
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 4
60022: PUSH
60023: LD_INT 1
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 3
60032: PUSH
60033: LD_INT 0
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 3
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 3
60053: PUSH
60054: LD_INT 2
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 5
60064: PUSH
60065: LD_INT 2
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 3
60074: PUSH
60075: LD_INT 3
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 3
60084: PUSH
60085: LD_INT 2
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 4
60094: PUSH
60095: LD_INT 3
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 4
60104: PUSH
60105: LD_INT 4
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 3
60114: PUSH
60115: LD_INT 4
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 2
60124: PUSH
60125: LD_INT 3
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: PUSH
60135: LD_INT 2
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 4
60144: PUSH
60145: LD_INT 2
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 2
60154: PUSH
60155: LD_INT 4
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: LD_INT 4
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: LD_INT 3
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: LD_INT 4
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 1
60194: PUSH
60195: LD_INT 5
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 0
60204: PUSH
60205: LD_INT 5
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 1
60214: NEG
60215: PUSH
60216: LD_INT 4
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: LD_INT 3
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 2
60236: PUSH
60237: LD_INT 5
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 2
60246: NEG
60247: PUSH
60248: LD_INT 3
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60302: LD_ADDR_VAR 0 34
60306: PUSH
60307: LD_INT 0
60309: PUSH
60310: LD_INT 4
60312: NEG
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 0
60320: PUSH
60321: LD_INT 5
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: LD_INT 4
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 1
60342: PUSH
60343: LD_INT 3
60345: NEG
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 0
60353: PUSH
60354: LD_INT 3
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 1
60364: NEG
60365: PUSH
60366: LD_INT 4
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 1
60376: NEG
60377: PUSH
60378: LD_INT 5
60380: NEG
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 2
60388: PUSH
60389: LD_INT 3
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 2
60399: NEG
60400: PUSH
60401: LD_INT 5
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 3
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 3
60421: PUSH
60422: LD_INT 1
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 4
60432: PUSH
60433: LD_INT 0
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 4
60442: PUSH
60443: LD_INT 1
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 3
60452: PUSH
60453: LD_INT 1
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 2
60462: PUSH
60463: LD_INT 0
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 2
60472: PUSH
60473: LD_INT 1
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 2
60483: PUSH
60484: LD_INT 2
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 4
60494: PUSH
60495: LD_INT 2
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 4
60504: PUSH
60505: LD_INT 4
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 4
60514: PUSH
60515: LD_INT 3
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 5
60524: PUSH
60525: LD_INT 4
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 5
60534: PUSH
60535: LD_INT 5
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 4
60544: PUSH
60545: LD_INT 5
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 3
60554: PUSH
60555: LD_INT 4
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 3
60564: PUSH
60565: LD_INT 3
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 5
60574: PUSH
60575: LD_INT 3
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 3
60584: PUSH
60585: LD_INT 5
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: LD_INT 3
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: LD_INT 2
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 1
60614: PUSH
60615: LD_INT 3
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 1
60624: PUSH
60625: LD_INT 4
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 0
60634: PUSH
60635: LD_INT 4
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 1
60644: NEG
60645: PUSH
60646: LD_INT 3
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 1
60655: NEG
60656: PUSH
60657: LD_INT 2
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 2
60666: PUSH
60667: LD_INT 4
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 2
60676: NEG
60677: PUSH
60678: LD_INT 2
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 4
60687: NEG
60688: PUSH
60689: LD_INT 0
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 4
60698: NEG
60699: PUSH
60700: LD_INT 1
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 3
60710: NEG
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 3
60721: NEG
60722: PUSH
60723: LD_INT 1
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 4
60732: NEG
60733: PUSH
60734: LD_INT 1
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 5
60743: NEG
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 5
60754: NEG
60755: PUSH
60756: LD_INT 1
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 5
60766: NEG
60767: PUSH
60768: LD_INT 2
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 3
60778: NEG
60779: PUSH
60780: LD_INT 2
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: ST_TO_ADDR
// end ; end ;
60834: GO 60837
60836: POP
// case btype of b_depot , b_warehouse :
60837: LD_VAR 0 1
60841: PUSH
60842: LD_INT 0
60844: DOUBLE
60845: EQUAL
60846: IFTRUE 60856
60848: LD_INT 1
60850: DOUBLE
60851: EQUAL
60852: IFTRUE 60856
60854: GO 61057
60856: POP
// case nation of nation_american :
60857: LD_VAR 0 5
60861: PUSH
60862: LD_INT 1
60864: DOUBLE
60865: EQUAL
60866: IFTRUE 60870
60868: GO 60926
60870: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60871: LD_ADDR_VAR 0 9
60875: PUSH
60876: LD_VAR 0 11
60880: PUSH
60881: LD_VAR 0 12
60885: PUSH
60886: LD_VAR 0 13
60890: PUSH
60891: LD_VAR 0 14
60895: PUSH
60896: LD_VAR 0 15
60900: PUSH
60901: LD_VAR 0 16
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: PUSH
60914: LD_VAR 0 4
60918: PUSH
60919: LD_INT 1
60921: PLUS
60922: ARRAY
60923: ST_TO_ADDR
60924: GO 61055
60926: LD_INT 2
60928: DOUBLE
60929: EQUAL
60930: IFTRUE 60934
60932: GO 60990
60934: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60935: LD_ADDR_VAR 0 9
60939: PUSH
60940: LD_VAR 0 17
60944: PUSH
60945: LD_VAR 0 18
60949: PUSH
60950: LD_VAR 0 19
60954: PUSH
60955: LD_VAR 0 20
60959: PUSH
60960: LD_VAR 0 21
60964: PUSH
60965: LD_VAR 0 22
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: PUSH
60978: LD_VAR 0 4
60982: PUSH
60983: LD_INT 1
60985: PLUS
60986: ARRAY
60987: ST_TO_ADDR
60988: GO 61055
60990: LD_INT 3
60992: DOUBLE
60993: EQUAL
60994: IFTRUE 60998
60996: GO 61054
60998: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60999: LD_ADDR_VAR 0 9
61003: PUSH
61004: LD_VAR 0 23
61008: PUSH
61009: LD_VAR 0 24
61013: PUSH
61014: LD_VAR 0 25
61018: PUSH
61019: LD_VAR 0 26
61023: PUSH
61024: LD_VAR 0 27
61028: PUSH
61029: LD_VAR 0 28
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: PUSH
61042: LD_VAR 0 4
61046: PUSH
61047: LD_INT 1
61049: PLUS
61050: ARRAY
61051: ST_TO_ADDR
61052: GO 61055
61054: POP
61055: GO 61610
61057: LD_INT 2
61059: DOUBLE
61060: EQUAL
61061: IFTRUE 61071
61063: LD_INT 3
61065: DOUBLE
61066: EQUAL
61067: IFTRUE 61071
61069: GO 61127
61071: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61072: LD_ADDR_VAR 0 9
61076: PUSH
61077: LD_VAR 0 29
61081: PUSH
61082: LD_VAR 0 30
61086: PUSH
61087: LD_VAR 0 31
61091: PUSH
61092: LD_VAR 0 32
61096: PUSH
61097: LD_VAR 0 33
61101: PUSH
61102: LD_VAR 0 34
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: PUSH
61115: LD_VAR 0 4
61119: PUSH
61120: LD_INT 1
61122: PLUS
61123: ARRAY
61124: ST_TO_ADDR
61125: GO 61610
61127: LD_INT 16
61129: DOUBLE
61130: EQUAL
61131: IFTRUE 61189
61133: LD_INT 17
61135: DOUBLE
61136: EQUAL
61137: IFTRUE 61189
61139: LD_INT 18
61141: DOUBLE
61142: EQUAL
61143: IFTRUE 61189
61145: LD_INT 19
61147: DOUBLE
61148: EQUAL
61149: IFTRUE 61189
61151: LD_INT 22
61153: DOUBLE
61154: EQUAL
61155: IFTRUE 61189
61157: LD_INT 20
61159: DOUBLE
61160: EQUAL
61161: IFTRUE 61189
61163: LD_INT 21
61165: DOUBLE
61166: EQUAL
61167: IFTRUE 61189
61169: LD_INT 23
61171: DOUBLE
61172: EQUAL
61173: IFTRUE 61189
61175: LD_INT 24
61177: DOUBLE
61178: EQUAL
61179: IFTRUE 61189
61181: LD_INT 25
61183: DOUBLE
61184: EQUAL
61185: IFTRUE 61189
61187: GO 61245
61189: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61190: LD_ADDR_VAR 0 9
61194: PUSH
61195: LD_VAR 0 35
61199: PUSH
61200: LD_VAR 0 36
61204: PUSH
61205: LD_VAR 0 37
61209: PUSH
61210: LD_VAR 0 38
61214: PUSH
61215: LD_VAR 0 39
61219: PUSH
61220: LD_VAR 0 40
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: PUSH
61233: LD_VAR 0 4
61237: PUSH
61238: LD_INT 1
61240: PLUS
61241: ARRAY
61242: ST_TO_ADDR
61243: GO 61610
61245: LD_INT 6
61247: DOUBLE
61248: EQUAL
61249: IFTRUE 61301
61251: LD_INT 7
61253: DOUBLE
61254: EQUAL
61255: IFTRUE 61301
61257: LD_INT 8
61259: DOUBLE
61260: EQUAL
61261: IFTRUE 61301
61263: LD_INT 13
61265: DOUBLE
61266: EQUAL
61267: IFTRUE 61301
61269: LD_INT 12
61271: DOUBLE
61272: EQUAL
61273: IFTRUE 61301
61275: LD_INT 15
61277: DOUBLE
61278: EQUAL
61279: IFTRUE 61301
61281: LD_INT 11
61283: DOUBLE
61284: EQUAL
61285: IFTRUE 61301
61287: LD_INT 14
61289: DOUBLE
61290: EQUAL
61291: IFTRUE 61301
61293: LD_INT 10
61295: DOUBLE
61296: EQUAL
61297: IFTRUE 61301
61299: GO 61357
61301: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61302: LD_ADDR_VAR 0 9
61306: PUSH
61307: LD_VAR 0 41
61311: PUSH
61312: LD_VAR 0 42
61316: PUSH
61317: LD_VAR 0 43
61321: PUSH
61322: LD_VAR 0 44
61326: PUSH
61327: LD_VAR 0 45
61331: PUSH
61332: LD_VAR 0 46
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: PUSH
61345: LD_VAR 0 4
61349: PUSH
61350: LD_INT 1
61352: PLUS
61353: ARRAY
61354: ST_TO_ADDR
61355: GO 61610
61357: LD_INT 36
61359: DOUBLE
61360: EQUAL
61361: IFTRUE 61365
61363: GO 61421
61365: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61366: LD_ADDR_VAR 0 9
61370: PUSH
61371: LD_VAR 0 47
61375: PUSH
61376: LD_VAR 0 48
61380: PUSH
61381: LD_VAR 0 49
61385: PUSH
61386: LD_VAR 0 50
61390: PUSH
61391: LD_VAR 0 51
61395: PUSH
61396: LD_VAR 0 52
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: PUSH
61409: LD_VAR 0 4
61413: PUSH
61414: LD_INT 1
61416: PLUS
61417: ARRAY
61418: ST_TO_ADDR
61419: GO 61610
61421: LD_INT 4
61423: DOUBLE
61424: EQUAL
61425: IFTRUE 61447
61427: LD_INT 5
61429: DOUBLE
61430: EQUAL
61431: IFTRUE 61447
61433: LD_INT 34
61435: DOUBLE
61436: EQUAL
61437: IFTRUE 61447
61439: LD_INT 37
61441: DOUBLE
61442: EQUAL
61443: IFTRUE 61447
61445: GO 61503
61447: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61448: LD_ADDR_VAR 0 9
61452: PUSH
61453: LD_VAR 0 53
61457: PUSH
61458: LD_VAR 0 54
61462: PUSH
61463: LD_VAR 0 55
61467: PUSH
61468: LD_VAR 0 56
61472: PUSH
61473: LD_VAR 0 57
61477: PUSH
61478: LD_VAR 0 58
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: PUSH
61491: LD_VAR 0 4
61495: PUSH
61496: LD_INT 1
61498: PLUS
61499: ARRAY
61500: ST_TO_ADDR
61501: GO 61610
61503: LD_INT 31
61505: DOUBLE
61506: EQUAL
61507: IFTRUE 61553
61509: LD_INT 32
61511: DOUBLE
61512: EQUAL
61513: IFTRUE 61553
61515: LD_INT 33
61517: DOUBLE
61518: EQUAL
61519: IFTRUE 61553
61521: LD_INT 27
61523: DOUBLE
61524: EQUAL
61525: IFTRUE 61553
61527: LD_INT 26
61529: DOUBLE
61530: EQUAL
61531: IFTRUE 61553
61533: LD_INT 28
61535: DOUBLE
61536: EQUAL
61537: IFTRUE 61553
61539: LD_INT 29
61541: DOUBLE
61542: EQUAL
61543: IFTRUE 61553
61545: LD_INT 30
61547: DOUBLE
61548: EQUAL
61549: IFTRUE 61553
61551: GO 61609
61553: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61554: LD_ADDR_VAR 0 9
61558: PUSH
61559: LD_VAR 0 59
61563: PUSH
61564: LD_VAR 0 60
61568: PUSH
61569: LD_VAR 0 61
61573: PUSH
61574: LD_VAR 0 62
61578: PUSH
61579: LD_VAR 0 63
61583: PUSH
61584: LD_VAR 0 64
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: PUSH
61597: LD_VAR 0 4
61601: PUSH
61602: LD_INT 1
61604: PLUS
61605: ARRAY
61606: ST_TO_ADDR
61607: GO 61610
61609: POP
// temp_list2 = [ ] ;
61610: LD_ADDR_VAR 0 10
61614: PUSH
61615: EMPTY
61616: ST_TO_ADDR
// for i in temp_list do
61617: LD_ADDR_VAR 0 8
61621: PUSH
61622: LD_VAR 0 9
61626: PUSH
61627: FOR_IN
61628: IFFALSE 61680
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61630: LD_ADDR_VAR 0 10
61634: PUSH
61635: LD_VAR 0 10
61639: PUSH
61640: LD_VAR 0 8
61644: PUSH
61645: LD_INT 1
61647: ARRAY
61648: PUSH
61649: LD_VAR 0 2
61653: PLUS
61654: PUSH
61655: LD_VAR 0 8
61659: PUSH
61660: LD_INT 2
61662: ARRAY
61663: PUSH
61664: LD_VAR 0 3
61668: PLUS
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: EMPTY
61675: LIST
61676: ADD
61677: ST_TO_ADDR
61678: GO 61627
61680: POP
61681: POP
// result = temp_list2 ;
61682: LD_ADDR_VAR 0 7
61686: PUSH
61687: LD_VAR 0 10
61691: ST_TO_ADDR
// end ;
61692: LD_VAR 0 7
61696: RET
// export function EnemyInRange ( unit , dist ) ; begin
61697: LD_INT 0
61699: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61700: LD_ADDR_VAR 0 3
61704: PUSH
61705: LD_VAR 0 1
61709: PPUSH
61710: CALL_OW 255
61714: PPUSH
61715: LD_VAR 0 1
61719: PPUSH
61720: CALL_OW 250
61724: PPUSH
61725: LD_VAR 0 1
61729: PPUSH
61730: CALL_OW 251
61734: PPUSH
61735: LD_VAR 0 2
61739: PPUSH
61740: CALL 35801 0 4
61744: PUSH
61745: LD_INT 4
61747: ARRAY
61748: ST_TO_ADDR
// end ;
61749: LD_VAR 0 3
61753: RET
// export function PlayerSeeMe ( unit ) ; begin
61754: LD_INT 0
61756: PPUSH
// result := See ( your_side , unit ) ;
61757: LD_ADDR_VAR 0 2
61761: PUSH
61762: LD_OWVAR 2
61766: PPUSH
61767: LD_VAR 0 1
61771: PPUSH
61772: CALL_OW 292
61776: ST_TO_ADDR
// end ;
61777: LD_VAR 0 2
61781: RET
// export function ReverseDir ( unit ) ; begin
61782: LD_INT 0
61784: PPUSH
// if not unit then
61785: LD_VAR 0 1
61789: NOT
61790: IFFALSE 61794
// exit ;
61792: GO 61817
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61794: LD_ADDR_VAR 0 2
61798: PUSH
61799: LD_VAR 0 1
61803: PPUSH
61804: CALL_OW 254
61808: PUSH
61809: LD_INT 3
61811: PLUS
61812: PUSH
61813: LD_INT 6
61815: MOD
61816: ST_TO_ADDR
// end ;
61817: LD_VAR 0 2
61821: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61822: LD_INT 0
61824: PPUSH
61825: PPUSH
61826: PPUSH
61827: PPUSH
61828: PPUSH
// if not hexes then
61829: LD_VAR 0 2
61833: NOT
61834: IFFALSE 61838
// exit ;
61836: GO 61986
// dist := 9999 ;
61838: LD_ADDR_VAR 0 5
61842: PUSH
61843: LD_INT 9999
61845: ST_TO_ADDR
// for i = 1 to hexes do
61846: LD_ADDR_VAR 0 4
61850: PUSH
61851: DOUBLE
61852: LD_INT 1
61854: DEC
61855: ST_TO_ADDR
61856: LD_VAR 0 2
61860: PUSH
61861: FOR_TO
61862: IFFALSE 61974
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61864: LD_VAR 0 1
61868: PPUSH
61869: LD_VAR 0 2
61873: PUSH
61874: LD_VAR 0 4
61878: ARRAY
61879: PUSH
61880: LD_INT 1
61882: ARRAY
61883: PPUSH
61884: LD_VAR 0 2
61888: PUSH
61889: LD_VAR 0 4
61893: ARRAY
61894: PUSH
61895: LD_INT 2
61897: ARRAY
61898: PPUSH
61899: CALL_OW 297
61903: PUSH
61904: LD_VAR 0 5
61908: LESS
61909: IFFALSE 61972
// begin hex := hexes [ i ] ;
61911: LD_ADDR_VAR 0 7
61915: PUSH
61916: LD_VAR 0 2
61920: PUSH
61921: LD_VAR 0 4
61925: ARRAY
61926: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61927: LD_ADDR_VAR 0 5
61931: PUSH
61932: LD_VAR 0 1
61936: PPUSH
61937: LD_VAR 0 2
61941: PUSH
61942: LD_VAR 0 4
61946: ARRAY
61947: PUSH
61948: LD_INT 1
61950: ARRAY
61951: PPUSH
61952: LD_VAR 0 2
61956: PUSH
61957: LD_VAR 0 4
61961: ARRAY
61962: PUSH
61963: LD_INT 2
61965: ARRAY
61966: PPUSH
61967: CALL_OW 297
61971: ST_TO_ADDR
// end ; end ;
61972: GO 61861
61974: POP
61975: POP
// result := hex ;
61976: LD_ADDR_VAR 0 3
61980: PUSH
61981: LD_VAR 0 7
61985: ST_TO_ADDR
// end ;
61986: LD_VAR 0 3
61990: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61991: LD_INT 0
61993: PPUSH
61994: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61995: LD_VAR 0 1
61999: NOT
62000: PUSH
62001: LD_VAR 0 1
62005: PUSH
62006: LD_INT 21
62008: PUSH
62009: LD_INT 2
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 23
62018: PUSH
62019: LD_INT 2
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PPUSH
62030: CALL_OW 69
62034: IN
62035: NOT
62036: OR
62037: IFFALSE 62041
// exit ;
62039: GO 62088
// for i = 1 to 3 do
62041: LD_ADDR_VAR 0 3
62045: PUSH
62046: DOUBLE
62047: LD_INT 1
62049: DEC
62050: ST_TO_ADDR
62051: LD_INT 3
62053: PUSH
62054: FOR_TO
62055: IFFALSE 62086
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62057: LD_VAR 0 1
62061: PPUSH
62062: CALL_OW 250
62066: PPUSH
62067: LD_VAR 0 1
62071: PPUSH
62072: CALL_OW 251
62076: PPUSH
62077: LD_INT 1
62079: PPUSH
62080: CALL_OW 453
62084: GO 62054
62086: POP
62087: POP
// end ;
62088: LD_VAR 0 2
62092: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62093: LD_INT 0
62095: PPUSH
62096: PPUSH
62097: PPUSH
62098: PPUSH
62099: PPUSH
62100: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62101: LD_VAR 0 1
62105: NOT
62106: PUSH
62107: LD_VAR 0 2
62111: NOT
62112: OR
62113: PUSH
62114: LD_VAR 0 1
62118: PPUSH
62119: CALL_OW 314
62123: OR
62124: IFFALSE 62128
// exit ;
62126: GO 62569
// x := GetX ( enemy_unit ) ;
62128: LD_ADDR_VAR 0 7
62132: PUSH
62133: LD_VAR 0 2
62137: PPUSH
62138: CALL_OW 250
62142: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62143: LD_ADDR_VAR 0 8
62147: PUSH
62148: LD_VAR 0 2
62152: PPUSH
62153: CALL_OW 251
62157: ST_TO_ADDR
// if not x or not y then
62158: LD_VAR 0 7
62162: NOT
62163: PUSH
62164: LD_VAR 0 8
62168: NOT
62169: OR
62170: IFFALSE 62174
// exit ;
62172: GO 62569
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62174: LD_ADDR_VAR 0 6
62178: PUSH
62179: LD_VAR 0 7
62183: PPUSH
62184: LD_INT 0
62186: PPUSH
62187: LD_INT 4
62189: PPUSH
62190: CALL_OW 272
62194: PUSH
62195: LD_VAR 0 8
62199: PPUSH
62200: LD_INT 0
62202: PPUSH
62203: LD_INT 4
62205: PPUSH
62206: CALL_OW 273
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_VAR 0 7
62219: PPUSH
62220: LD_INT 1
62222: PPUSH
62223: LD_INT 4
62225: PPUSH
62226: CALL_OW 272
62230: PUSH
62231: LD_VAR 0 8
62235: PPUSH
62236: LD_INT 1
62238: PPUSH
62239: LD_INT 4
62241: PPUSH
62242: CALL_OW 273
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_VAR 0 7
62255: PPUSH
62256: LD_INT 2
62258: PPUSH
62259: LD_INT 4
62261: PPUSH
62262: CALL_OW 272
62266: PUSH
62267: LD_VAR 0 8
62271: PPUSH
62272: LD_INT 2
62274: PPUSH
62275: LD_INT 4
62277: PPUSH
62278: CALL_OW 273
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_VAR 0 7
62291: PPUSH
62292: LD_INT 3
62294: PPUSH
62295: LD_INT 4
62297: PPUSH
62298: CALL_OW 272
62302: PUSH
62303: LD_VAR 0 8
62307: PPUSH
62308: LD_INT 3
62310: PPUSH
62311: LD_INT 4
62313: PPUSH
62314: CALL_OW 273
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_VAR 0 7
62327: PPUSH
62328: LD_INT 4
62330: PPUSH
62331: LD_INT 4
62333: PPUSH
62334: CALL_OW 272
62338: PUSH
62339: LD_VAR 0 8
62343: PPUSH
62344: LD_INT 4
62346: PPUSH
62347: LD_INT 4
62349: PPUSH
62350: CALL_OW 273
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_VAR 0 7
62363: PPUSH
62364: LD_INT 5
62366: PPUSH
62367: LD_INT 4
62369: PPUSH
62370: CALL_OW 272
62374: PUSH
62375: LD_VAR 0 8
62379: PPUSH
62380: LD_INT 5
62382: PPUSH
62383: LD_INT 4
62385: PPUSH
62386: CALL_OW 273
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: ST_TO_ADDR
// for i = tmp downto 1 do
62403: LD_ADDR_VAR 0 4
62407: PUSH
62408: DOUBLE
62409: LD_VAR 0 6
62413: INC
62414: ST_TO_ADDR
62415: LD_INT 1
62417: PUSH
62418: FOR_DOWNTO
62419: IFFALSE 62520
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62421: LD_VAR 0 6
62425: PUSH
62426: LD_VAR 0 4
62430: ARRAY
62431: PUSH
62432: LD_INT 1
62434: ARRAY
62435: PPUSH
62436: LD_VAR 0 6
62440: PUSH
62441: LD_VAR 0 4
62445: ARRAY
62446: PUSH
62447: LD_INT 2
62449: ARRAY
62450: PPUSH
62451: CALL_OW 488
62455: NOT
62456: PUSH
62457: LD_VAR 0 6
62461: PUSH
62462: LD_VAR 0 4
62466: ARRAY
62467: PUSH
62468: LD_INT 1
62470: ARRAY
62471: PPUSH
62472: LD_VAR 0 6
62476: PUSH
62477: LD_VAR 0 4
62481: ARRAY
62482: PUSH
62483: LD_INT 2
62485: ARRAY
62486: PPUSH
62487: CALL_OW 428
62491: PUSH
62492: LD_INT 0
62494: NONEQUAL
62495: OR
62496: IFFALSE 62518
// tmp := Delete ( tmp , i ) ;
62498: LD_ADDR_VAR 0 6
62502: PUSH
62503: LD_VAR 0 6
62507: PPUSH
62508: LD_VAR 0 4
62512: PPUSH
62513: CALL_OW 3
62517: ST_TO_ADDR
62518: GO 62418
62520: POP
62521: POP
// j := GetClosestHex ( unit , tmp ) ;
62522: LD_ADDR_VAR 0 5
62526: PUSH
62527: LD_VAR 0 1
62531: PPUSH
62532: LD_VAR 0 6
62536: PPUSH
62537: CALL 61822 0 2
62541: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62542: LD_VAR 0 1
62546: PPUSH
62547: LD_VAR 0 5
62551: PUSH
62552: LD_INT 1
62554: ARRAY
62555: PPUSH
62556: LD_VAR 0 5
62560: PUSH
62561: LD_INT 2
62563: ARRAY
62564: PPUSH
62565: CALL_OW 111
// end ;
62569: LD_VAR 0 3
62573: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62574: LD_INT 0
62576: PPUSH
62577: PPUSH
62578: PPUSH
// uc_side = 0 ;
62579: LD_ADDR_OWVAR 20
62583: PUSH
62584: LD_INT 0
62586: ST_TO_ADDR
// uc_nation = 0 ;
62587: LD_ADDR_OWVAR 21
62591: PUSH
62592: LD_INT 0
62594: ST_TO_ADDR
// InitHc_All ( ) ;
62595: CALL_OW 584
// InitVc ;
62599: CALL_OW 20
// if mastodonts then
62603: LD_VAR 0 6
62607: IFFALSE 62674
// for i = 1 to mastodonts do
62609: LD_ADDR_VAR 0 11
62613: PUSH
62614: DOUBLE
62615: LD_INT 1
62617: DEC
62618: ST_TO_ADDR
62619: LD_VAR 0 6
62623: PUSH
62624: FOR_TO
62625: IFFALSE 62672
// begin vc_chassis := 31 ;
62627: LD_ADDR_OWVAR 37
62631: PUSH
62632: LD_INT 31
62634: ST_TO_ADDR
// vc_control := control_rider ;
62635: LD_ADDR_OWVAR 38
62639: PUSH
62640: LD_INT 4
62642: ST_TO_ADDR
// animal := CreateVehicle ;
62643: LD_ADDR_VAR 0 12
62647: PUSH
62648: CALL_OW 45
62652: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62653: LD_VAR 0 12
62657: PPUSH
62658: LD_VAR 0 8
62662: PPUSH
62663: LD_INT 0
62665: PPUSH
62666: CALL 64862 0 3
// end ;
62670: GO 62624
62672: POP
62673: POP
// if horses then
62674: LD_VAR 0 5
62678: IFFALSE 62745
// for i = 1 to horses do
62680: LD_ADDR_VAR 0 11
62684: PUSH
62685: DOUBLE
62686: LD_INT 1
62688: DEC
62689: ST_TO_ADDR
62690: LD_VAR 0 5
62694: PUSH
62695: FOR_TO
62696: IFFALSE 62743
// begin hc_class := 21 ;
62698: LD_ADDR_OWVAR 28
62702: PUSH
62703: LD_INT 21
62705: ST_TO_ADDR
// hc_gallery :=  ;
62706: LD_ADDR_OWVAR 33
62710: PUSH
62711: LD_STRING 
62713: ST_TO_ADDR
// animal := CreateHuman ;
62714: LD_ADDR_VAR 0 12
62718: PUSH
62719: CALL_OW 44
62723: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62724: LD_VAR 0 12
62728: PPUSH
62729: LD_VAR 0 8
62733: PPUSH
62734: LD_INT 0
62736: PPUSH
62737: CALL 64862 0 3
// end ;
62741: GO 62695
62743: POP
62744: POP
// if birds then
62745: LD_VAR 0 1
62749: IFFALSE 62816
// for i = 1 to birds do
62751: LD_ADDR_VAR 0 11
62755: PUSH
62756: DOUBLE
62757: LD_INT 1
62759: DEC
62760: ST_TO_ADDR
62761: LD_VAR 0 1
62765: PUSH
62766: FOR_TO
62767: IFFALSE 62814
// begin hc_class = 18 ;
62769: LD_ADDR_OWVAR 28
62773: PUSH
62774: LD_INT 18
62776: ST_TO_ADDR
// hc_gallery =  ;
62777: LD_ADDR_OWVAR 33
62781: PUSH
62782: LD_STRING 
62784: ST_TO_ADDR
// animal := CreateHuman ;
62785: LD_ADDR_VAR 0 12
62789: PUSH
62790: CALL_OW 44
62794: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62795: LD_VAR 0 12
62799: PPUSH
62800: LD_VAR 0 8
62804: PPUSH
62805: LD_INT 0
62807: PPUSH
62808: CALL 64862 0 3
// end ;
62812: GO 62766
62814: POP
62815: POP
// if tigers then
62816: LD_VAR 0 2
62820: IFFALSE 62904
// for i = 1 to tigers do
62822: LD_ADDR_VAR 0 11
62826: PUSH
62827: DOUBLE
62828: LD_INT 1
62830: DEC
62831: ST_TO_ADDR
62832: LD_VAR 0 2
62836: PUSH
62837: FOR_TO
62838: IFFALSE 62902
// begin hc_class = class_tiger ;
62840: LD_ADDR_OWVAR 28
62844: PUSH
62845: LD_INT 14
62847: ST_TO_ADDR
// hc_gallery =  ;
62848: LD_ADDR_OWVAR 33
62852: PUSH
62853: LD_STRING 
62855: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62856: LD_ADDR_OWVAR 35
62860: PUSH
62861: LD_INT 7
62863: NEG
62864: PPUSH
62865: LD_INT 7
62867: PPUSH
62868: CALL_OW 12
62872: ST_TO_ADDR
// animal := CreateHuman ;
62873: LD_ADDR_VAR 0 12
62877: PUSH
62878: CALL_OW 44
62882: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62883: LD_VAR 0 12
62887: PPUSH
62888: LD_VAR 0 8
62892: PPUSH
62893: LD_INT 0
62895: PPUSH
62896: CALL 64862 0 3
// end ;
62900: GO 62837
62902: POP
62903: POP
// if apemans then
62904: LD_VAR 0 3
62908: IFFALSE 63031
// for i = 1 to apemans do
62910: LD_ADDR_VAR 0 11
62914: PUSH
62915: DOUBLE
62916: LD_INT 1
62918: DEC
62919: ST_TO_ADDR
62920: LD_VAR 0 3
62924: PUSH
62925: FOR_TO
62926: IFFALSE 63029
// begin hc_class = class_apeman ;
62928: LD_ADDR_OWVAR 28
62932: PUSH
62933: LD_INT 12
62935: ST_TO_ADDR
// hc_gallery =  ;
62936: LD_ADDR_OWVAR 33
62940: PUSH
62941: LD_STRING 
62943: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
62944: LD_ADDR_OWVAR 35
62948: PUSH
62949: LD_INT 5
62951: NEG
62952: PPUSH
62953: LD_INT 5
62955: PPUSH
62956: CALL_OW 12
62960: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62961: LD_ADDR_OWVAR 31
62965: PUSH
62966: LD_INT 1
62968: PPUSH
62969: LD_INT 3
62971: PPUSH
62972: CALL_OW 12
62976: PUSH
62977: LD_INT 1
62979: PPUSH
62980: LD_INT 3
62982: PPUSH
62983: CALL_OW 12
62987: PUSH
62988: LD_INT 0
62990: PUSH
62991: LD_INT 0
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: ST_TO_ADDR
// animal := CreateHuman ;
63000: LD_ADDR_VAR 0 12
63004: PUSH
63005: CALL_OW 44
63009: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63010: LD_VAR 0 12
63014: PPUSH
63015: LD_VAR 0 8
63019: PPUSH
63020: LD_INT 0
63022: PPUSH
63023: CALL 64862 0 3
// end ;
63027: GO 62925
63029: POP
63030: POP
// if enchidnas then
63031: LD_VAR 0 4
63035: IFFALSE 63102
// for i = 1 to enchidnas do
63037: LD_ADDR_VAR 0 11
63041: PUSH
63042: DOUBLE
63043: LD_INT 1
63045: DEC
63046: ST_TO_ADDR
63047: LD_VAR 0 4
63051: PUSH
63052: FOR_TO
63053: IFFALSE 63100
// begin hc_class = 13 ;
63055: LD_ADDR_OWVAR 28
63059: PUSH
63060: LD_INT 13
63062: ST_TO_ADDR
// hc_gallery =  ;
63063: LD_ADDR_OWVAR 33
63067: PUSH
63068: LD_STRING 
63070: ST_TO_ADDR
// animal := CreateHuman ;
63071: LD_ADDR_VAR 0 12
63075: PUSH
63076: CALL_OW 44
63080: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63081: LD_VAR 0 12
63085: PPUSH
63086: LD_VAR 0 8
63090: PPUSH
63091: LD_INT 0
63093: PPUSH
63094: CALL 64862 0 3
// end ;
63098: GO 63052
63100: POP
63101: POP
// if fishes then
63102: LD_VAR 0 7
63106: IFFALSE 63173
// for i = 1 to fishes do
63108: LD_ADDR_VAR 0 11
63112: PUSH
63113: DOUBLE
63114: LD_INT 1
63116: DEC
63117: ST_TO_ADDR
63118: LD_VAR 0 7
63122: PUSH
63123: FOR_TO
63124: IFFALSE 63171
// begin hc_class = 20 ;
63126: LD_ADDR_OWVAR 28
63130: PUSH
63131: LD_INT 20
63133: ST_TO_ADDR
// hc_gallery =  ;
63134: LD_ADDR_OWVAR 33
63138: PUSH
63139: LD_STRING 
63141: ST_TO_ADDR
// animal := CreateHuman ;
63142: LD_ADDR_VAR 0 12
63146: PUSH
63147: CALL_OW 44
63151: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63152: LD_VAR 0 12
63156: PPUSH
63157: LD_VAR 0 9
63161: PPUSH
63162: LD_INT 0
63164: PPUSH
63165: CALL 64862 0 3
// end ;
63169: GO 63123
63171: POP
63172: POP
// end ;
63173: LD_VAR 0 10
63177: RET
// export function WantHeal ( sci , unit ) ; begin
63178: LD_INT 0
63180: PPUSH
// if GetTaskList ( sci ) > 0 then
63181: LD_VAR 0 1
63185: PPUSH
63186: CALL_OW 437
63190: PUSH
63191: LD_INT 0
63193: GREATER
63194: IFFALSE 63264
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63196: LD_VAR 0 1
63200: PPUSH
63201: CALL_OW 437
63205: PUSH
63206: LD_INT 1
63208: ARRAY
63209: PUSH
63210: LD_INT 1
63212: ARRAY
63213: PUSH
63214: LD_STRING l
63216: EQUAL
63217: PUSH
63218: LD_VAR 0 1
63222: PPUSH
63223: CALL_OW 437
63227: PUSH
63228: LD_INT 1
63230: ARRAY
63231: PUSH
63232: LD_INT 4
63234: ARRAY
63235: PUSH
63236: LD_VAR 0 2
63240: EQUAL
63241: AND
63242: IFFALSE 63254
// result := true else
63244: LD_ADDR_VAR 0 3
63248: PUSH
63249: LD_INT 1
63251: ST_TO_ADDR
63252: GO 63262
// result := false ;
63254: LD_ADDR_VAR 0 3
63258: PUSH
63259: LD_INT 0
63261: ST_TO_ADDR
// end else
63262: GO 63272
// result := false ;
63264: LD_ADDR_VAR 0 3
63268: PUSH
63269: LD_INT 0
63271: ST_TO_ADDR
// end ;
63272: LD_VAR 0 3
63276: RET
// export function HealTarget ( sci ) ; begin
63277: LD_INT 0
63279: PPUSH
// if not sci then
63280: LD_VAR 0 1
63284: NOT
63285: IFFALSE 63289
// exit ;
63287: GO 63354
// result := 0 ;
63289: LD_ADDR_VAR 0 2
63293: PUSH
63294: LD_INT 0
63296: ST_TO_ADDR
// if GetTaskList ( sci ) then
63297: LD_VAR 0 1
63301: PPUSH
63302: CALL_OW 437
63306: IFFALSE 63354
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63308: LD_VAR 0 1
63312: PPUSH
63313: CALL_OW 437
63317: PUSH
63318: LD_INT 1
63320: ARRAY
63321: PUSH
63322: LD_INT 1
63324: ARRAY
63325: PUSH
63326: LD_STRING l
63328: EQUAL
63329: IFFALSE 63354
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63331: LD_ADDR_VAR 0 2
63335: PUSH
63336: LD_VAR 0 1
63340: PPUSH
63341: CALL_OW 437
63345: PUSH
63346: LD_INT 1
63348: ARRAY
63349: PUSH
63350: LD_INT 4
63352: ARRAY
63353: ST_TO_ADDR
// end ;
63354: LD_VAR 0 2
63358: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63359: LD_INT 0
63361: PPUSH
63362: PPUSH
63363: PPUSH
63364: PPUSH
// if not base_units then
63365: LD_VAR 0 1
63369: NOT
63370: IFFALSE 63374
// exit ;
63372: GO 63461
// result := false ;
63374: LD_ADDR_VAR 0 2
63378: PUSH
63379: LD_INT 0
63381: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63382: LD_ADDR_VAR 0 5
63386: PUSH
63387: LD_VAR 0 1
63391: PPUSH
63392: LD_INT 21
63394: PUSH
63395: LD_INT 3
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PPUSH
63402: CALL_OW 72
63406: ST_TO_ADDR
// if not tmp then
63407: LD_VAR 0 5
63411: NOT
63412: IFFALSE 63416
// exit ;
63414: GO 63461
// for i in tmp do
63416: LD_ADDR_VAR 0 3
63420: PUSH
63421: LD_VAR 0 5
63425: PUSH
63426: FOR_IN
63427: IFFALSE 63459
// begin result := EnemyInRange ( i , 22 ) ;
63429: LD_ADDR_VAR 0 2
63433: PUSH
63434: LD_VAR 0 3
63438: PPUSH
63439: LD_INT 22
63441: PPUSH
63442: CALL 61697 0 2
63446: ST_TO_ADDR
// if result then
63447: LD_VAR 0 2
63451: IFFALSE 63457
// exit ;
63453: POP
63454: POP
63455: GO 63461
// end ;
63457: GO 63426
63459: POP
63460: POP
// end ;
63461: LD_VAR 0 2
63465: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63466: LD_INT 0
63468: PPUSH
63469: PPUSH
// if not units then
63470: LD_VAR 0 1
63474: NOT
63475: IFFALSE 63479
// exit ;
63477: GO 63549
// result := [ ] ;
63479: LD_ADDR_VAR 0 3
63483: PUSH
63484: EMPTY
63485: ST_TO_ADDR
// for i in units do
63486: LD_ADDR_VAR 0 4
63490: PUSH
63491: LD_VAR 0 1
63495: PUSH
63496: FOR_IN
63497: IFFALSE 63547
// if GetTag ( i ) = tag then
63499: LD_VAR 0 4
63503: PPUSH
63504: CALL_OW 110
63508: PUSH
63509: LD_VAR 0 2
63513: EQUAL
63514: IFFALSE 63545
// result := Insert ( result , result + 1 , i ) ;
63516: LD_ADDR_VAR 0 3
63520: PUSH
63521: LD_VAR 0 3
63525: PPUSH
63526: LD_VAR 0 3
63530: PUSH
63531: LD_INT 1
63533: PLUS
63534: PPUSH
63535: LD_VAR 0 4
63539: PPUSH
63540: CALL_OW 2
63544: ST_TO_ADDR
63545: GO 63496
63547: POP
63548: POP
// end ;
63549: LD_VAR 0 3
63553: RET
// export function IsDriver ( un ) ; begin
63554: LD_INT 0
63556: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63557: LD_ADDR_VAR 0 2
63561: PUSH
63562: LD_VAR 0 1
63566: PUSH
63567: LD_INT 55
63569: PUSH
63570: EMPTY
63571: LIST
63572: PPUSH
63573: CALL_OW 69
63577: IN
63578: ST_TO_ADDR
// end ;
63579: LD_VAR 0 2
63583: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63584: LD_INT 0
63586: PPUSH
63587: PPUSH
// list := [ ] ;
63588: LD_ADDR_VAR 0 5
63592: PUSH
63593: EMPTY
63594: ST_TO_ADDR
// case d of 0 :
63595: LD_VAR 0 3
63599: PUSH
63600: LD_INT 0
63602: DOUBLE
63603: EQUAL
63604: IFTRUE 63608
63606: GO 63741
63608: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63609: LD_ADDR_VAR 0 5
63613: PUSH
63614: LD_VAR 0 1
63618: PUSH
63619: LD_INT 4
63621: MINUS
63622: PUSH
63623: LD_VAR 0 2
63627: PUSH
63628: LD_INT 4
63630: MINUS
63631: PUSH
63632: LD_INT 2
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: LIST
63639: PUSH
63640: LD_VAR 0 1
63644: PUSH
63645: LD_INT 3
63647: MINUS
63648: PUSH
63649: LD_VAR 0 2
63653: PUSH
63654: LD_INT 1
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: LIST
63661: PUSH
63662: LD_VAR 0 1
63666: PUSH
63667: LD_INT 4
63669: PLUS
63670: PUSH
63671: LD_VAR 0 2
63675: PUSH
63676: LD_INT 4
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: LIST
63683: PUSH
63684: LD_VAR 0 1
63688: PUSH
63689: LD_INT 3
63691: PLUS
63692: PUSH
63693: LD_VAR 0 2
63697: PUSH
63698: LD_INT 3
63700: PLUS
63701: PUSH
63702: LD_INT 5
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: LIST
63709: PUSH
63710: LD_VAR 0 1
63714: PUSH
63715: LD_VAR 0 2
63719: PUSH
63720: LD_INT 4
63722: PLUS
63723: PUSH
63724: LD_INT 0
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: LIST
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: ST_TO_ADDR
// end ; 1 :
63739: GO 64439
63741: LD_INT 1
63743: DOUBLE
63744: EQUAL
63745: IFTRUE 63749
63747: GO 63882
63749: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63750: LD_ADDR_VAR 0 5
63754: PUSH
63755: LD_VAR 0 1
63759: PUSH
63760: LD_VAR 0 2
63764: PUSH
63765: LD_INT 4
63767: MINUS
63768: PUSH
63769: LD_INT 3
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: LIST
63776: PUSH
63777: LD_VAR 0 1
63781: PUSH
63782: LD_INT 3
63784: MINUS
63785: PUSH
63786: LD_VAR 0 2
63790: PUSH
63791: LD_INT 3
63793: MINUS
63794: PUSH
63795: LD_INT 2
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: LIST
63802: PUSH
63803: LD_VAR 0 1
63807: PUSH
63808: LD_INT 4
63810: MINUS
63811: PUSH
63812: LD_VAR 0 2
63816: PUSH
63817: LD_INT 1
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: LIST
63824: PUSH
63825: LD_VAR 0 1
63829: PUSH
63830: LD_VAR 0 2
63834: PUSH
63835: LD_INT 3
63837: PLUS
63838: PUSH
63839: LD_INT 0
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: LIST
63846: PUSH
63847: LD_VAR 0 1
63851: PUSH
63852: LD_INT 4
63854: PLUS
63855: PUSH
63856: LD_VAR 0 2
63860: PUSH
63861: LD_INT 4
63863: PLUS
63864: PUSH
63865: LD_INT 5
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: LIST
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: ST_TO_ADDR
// end ; 2 :
63880: GO 64439
63882: LD_INT 2
63884: DOUBLE
63885: EQUAL
63886: IFTRUE 63890
63888: GO 64019
63890: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63891: LD_ADDR_VAR 0 5
63895: PUSH
63896: LD_VAR 0 1
63900: PUSH
63901: LD_VAR 0 2
63905: PUSH
63906: LD_INT 3
63908: MINUS
63909: PUSH
63910: LD_INT 3
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: LIST
63917: PUSH
63918: LD_VAR 0 1
63922: PUSH
63923: LD_INT 4
63925: PLUS
63926: PUSH
63927: LD_VAR 0 2
63931: PUSH
63932: LD_INT 4
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: LIST
63939: PUSH
63940: LD_VAR 0 1
63944: PUSH
63945: LD_VAR 0 2
63949: PUSH
63950: LD_INT 4
63952: PLUS
63953: PUSH
63954: LD_INT 0
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: LIST
63961: PUSH
63962: LD_VAR 0 1
63966: PUSH
63967: LD_INT 3
63969: MINUS
63970: PUSH
63971: LD_VAR 0 2
63975: PUSH
63976: LD_INT 1
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: LIST
63983: PUSH
63984: LD_VAR 0 1
63988: PUSH
63989: LD_INT 4
63991: MINUS
63992: PUSH
63993: LD_VAR 0 2
63997: PUSH
63998: LD_INT 4
64000: MINUS
64001: PUSH
64002: LD_INT 2
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: LIST
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: ST_TO_ADDR
// end ; 3 :
64017: GO 64439
64019: LD_INT 3
64021: DOUBLE
64022: EQUAL
64023: IFTRUE 64027
64025: GO 64160
64027: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64028: LD_ADDR_VAR 0 5
64032: PUSH
64033: LD_VAR 0 1
64037: PUSH
64038: LD_INT 3
64040: PLUS
64041: PUSH
64042: LD_VAR 0 2
64046: PUSH
64047: LD_INT 4
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: LIST
64054: PUSH
64055: LD_VAR 0 1
64059: PUSH
64060: LD_INT 4
64062: PLUS
64063: PUSH
64064: LD_VAR 0 2
64068: PUSH
64069: LD_INT 4
64071: PLUS
64072: PUSH
64073: LD_INT 5
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: LIST
64080: PUSH
64081: LD_VAR 0 1
64085: PUSH
64086: LD_INT 4
64088: MINUS
64089: PUSH
64090: LD_VAR 0 2
64094: PUSH
64095: LD_INT 1
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: LIST
64102: PUSH
64103: LD_VAR 0 1
64107: PUSH
64108: LD_VAR 0 2
64112: PUSH
64113: LD_INT 4
64115: MINUS
64116: PUSH
64117: LD_INT 3
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: LIST
64124: PUSH
64125: LD_VAR 0 1
64129: PUSH
64130: LD_INT 3
64132: MINUS
64133: PUSH
64134: LD_VAR 0 2
64138: PUSH
64139: LD_INT 3
64141: MINUS
64142: PUSH
64143: LD_INT 2
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: LIST
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: ST_TO_ADDR
// end ; 4 :
64158: GO 64439
64160: LD_INT 4
64162: DOUBLE
64163: EQUAL
64164: IFTRUE 64168
64166: GO 64301
64168: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64169: LD_ADDR_VAR 0 5
64173: PUSH
64174: LD_VAR 0 1
64178: PUSH
64179: LD_VAR 0 2
64183: PUSH
64184: LD_INT 4
64186: PLUS
64187: PUSH
64188: LD_INT 0
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: LIST
64195: PUSH
64196: LD_VAR 0 1
64200: PUSH
64201: LD_INT 3
64203: PLUS
64204: PUSH
64205: LD_VAR 0 2
64209: PUSH
64210: LD_INT 3
64212: PLUS
64213: PUSH
64214: LD_INT 5
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: LIST
64221: PUSH
64222: LD_VAR 0 1
64226: PUSH
64227: LD_INT 4
64229: PLUS
64230: PUSH
64231: LD_VAR 0 2
64235: PUSH
64236: LD_INT 4
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: LIST
64243: PUSH
64244: LD_VAR 0 1
64248: PUSH
64249: LD_VAR 0 2
64253: PUSH
64254: LD_INT 3
64256: MINUS
64257: PUSH
64258: LD_INT 3
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: LIST
64265: PUSH
64266: LD_VAR 0 1
64270: PUSH
64271: LD_INT 4
64273: MINUS
64274: PUSH
64275: LD_VAR 0 2
64279: PUSH
64280: LD_INT 4
64282: MINUS
64283: PUSH
64284: LD_INT 2
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: LIST
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: ST_TO_ADDR
// end ; 5 :
64299: GO 64439
64301: LD_INT 5
64303: DOUBLE
64304: EQUAL
64305: IFTRUE 64309
64307: GO 64438
64309: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64310: LD_ADDR_VAR 0 5
64314: PUSH
64315: LD_VAR 0 1
64319: PUSH
64320: LD_INT 4
64322: MINUS
64323: PUSH
64324: LD_VAR 0 2
64328: PUSH
64329: LD_INT 1
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: LIST
64336: PUSH
64337: LD_VAR 0 1
64341: PUSH
64342: LD_VAR 0 2
64346: PUSH
64347: LD_INT 4
64349: MINUS
64350: PUSH
64351: LD_INT 3
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: LIST
64358: PUSH
64359: LD_VAR 0 1
64363: PUSH
64364: LD_INT 4
64366: PLUS
64367: PUSH
64368: LD_VAR 0 2
64372: PUSH
64373: LD_INT 4
64375: PLUS
64376: PUSH
64377: LD_INT 5
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: LIST
64384: PUSH
64385: LD_VAR 0 1
64389: PUSH
64390: LD_INT 3
64392: PLUS
64393: PUSH
64394: LD_VAR 0 2
64398: PUSH
64399: LD_INT 4
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: LIST
64406: PUSH
64407: LD_VAR 0 1
64411: PUSH
64412: LD_VAR 0 2
64416: PUSH
64417: LD_INT 3
64419: PLUS
64420: PUSH
64421: LD_INT 0
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: LIST
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: ST_TO_ADDR
// end ; end ;
64436: GO 64439
64438: POP
// result := list ;
64439: LD_ADDR_VAR 0 4
64443: PUSH
64444: LD_VAR 0 5
64448: ST_TO_ADDR
// end ;
64449: LD_VAR 0 4
64453: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64454: LD_INT 0
64456: PPUSH
64457: PPUSH
64458: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64459: LD_VAR 0 1
64463: NOT
64464: PUSH
64465: LD_VAR 0 2
64469: PUSH
64470: LD_INT 1
64472: PUSH
64473: LD_INT 2
64475: PUSH
64476: LD_INT 3
64478: PUSH
64479: LD_INT 4
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: IN
64488: NOT
64489: OR
64490: IFFALSE 64494
// exit ;
64492: GO 64586
// tmp := [ ] ;
64494: LD_ADDR_VAR 0 5
64498: PUSH
64499: EMPTY
64500: ST_TO_ADDR
// for i in units do
64501: LD_ADDR_VAR 0 4
64505: PUSH
64506: LD_VAR 0 1
64510: PUSH
64511: FOR_IN
64512: IFFALSE 64555
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64514: LD_ADDR_VAR 0 5
64518: PUSH
64519: LD_VAR 0 5
64523: PPUSH
64524: LD_VAR 0 5
64528: PUSH
64529: LD_INT 1
64531: PLUS
64532: PPUSH
64533: LD_VAR 0 4
64537: PPUSH
64538: LD_VAR 0 2
64542: PPUSH
64543: CALL_OW 259
64547: PPUSH
64548: CALL_OW 2
64552: ST_TO_ADDR
64553: GO 64511
64555: POP
64556: POP
// if not tmp then
64557: LD_VAR 0 5
64561: NOT
64562: IFFALSE 64566
// exit ;
64564: GO 64586
// result := SortListByListDesc ( units , tmp ) ;
64566: LD_ADDR_VAR 0 3
64570: PUSH
64571: LD_VAR 0 1
64575: PPUSH
64576: LD_VAR 0 5
64580: PPUSH
64581: CALL_OW 77
64585: ST_TO_ADDR
// end ;
64586: LD_VAR 0 3
64590: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64591: LD_INT 0
64593: PPUSH
64594: PPUSH
64595: PPUSH
// result := false ;
64596: LD_ADDR_VAR 0 3
64600: PUSH
64601: LD_INT 0
64603: ST_TO_ADDR
// x := GetX ( building ) ;
64604: LD_ADDR_VAR 0 4
64608: PUSH
64609: LD_VAR 0 2
64613: PPUSH
64614: CALL_OW 250
64618: ST_TO_ADDR
// y := GetY ( building ) ;
64619: LD_ADDR_VAR 0 5
64623: PUSH
64624: LD_VAR 0 2
64628: PPUSH
64629: CALL_OW 251
64633: ST_TO_ADDR
// if not building or not x or not y then
64634: LD_VAR 0 2
64638: NOT
64639: PUSH
64640: LD_VAR 0 4
64644: NOT
64645: OR
64646: PUSH
64647: LD_VAR 0 5
64651: NOT
64652: OR
64653: IFFALSE 64657
// exit ;
64655: GO 64749
// if GetTaskList ( unit ) then
64657: LD_VAR 0 1
64661: PPUSH
64662: CALL_OW 437
64666: IFFALSE 64749
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64668: LD_STRING e
64670: PUSH
64671: LD_VAR 0 1
64675: PPUSH
64676: CALL_OW 437
64680: PUSH
64681: LD_INT 1
64683: ARRAY
64684: PUSH
64685: LD_INT 1
64687: ARRAY
64688: EQUAL
64689: PUSH
64690: LD_VAR 0 4
64694: PUSH
64695: LD_VAR 0 1
64699: PPUSH
64700: CALL_OW 437
64704: PUSH
64705: LD_INT 1
64707: ARRAY
64708: PUSH
64709: LD_INT 2
64711: ARRAY
64712: EQUAL
64713: AND
64714: PUSH
64715: LD_VAR 0 5
64719: PUSH
64720: LD_VAR 0 1
64724: PPUSH
64725: CALL_OW 437
64729: PUSH
64730: LD_INT 1
64732: ARRAY
64733: PUSH
64734: LD_INT 3
64736: ARRAY
64737: EQUAL
64738: AND
64739: IFFALSE 64749
// result := true end ;
64741: LD_ADDR_VAR 0 3
64745: PUSH
64746: LD_INT 1
64748: ST_TO_ADDR
// end ;
64749: LD_VAR 0 3
64753: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64754: LD_INT 0
64756: PPUSH
// result := false ;
64757: LD_ADDR_VAR 0 4
64761: PUSH
64762: LD_INT 0
64764: ST_TO_ADDR
// if GetTaskList ( unit ) then
64765: LD_VAR 0 1
64769: PPUSH
64770: CALL_OW 437
64774: IFFALSE 64857
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64776: LD_STRING M
64778: PUSH
64779: LD_VAR 0 1
64783: PPUSH
64784: CALL_OW 437
64788: PUSH
64789: LD_INT 1
64791: ARRAY
64792: PUSH
64793: LD_INT 1
64795: ARRAY
64796: EQUAL
64797: PUSH
64798: LD_VAR 0 2
64802: PUSH
64803: LD_VAR 0 1
64807: PPUSH
64808: CALL_OW 437
64812: PUSH
64813: LD_INT 1
64815: ARRAY
64816: PUSH
64817: LD_INT 2
64819: ARRAY
64820: EQUAL
64821: AND
64822: PUSH
64823: LD_VAR 0 3
64827: PUSH
64828: LD_VAR 0 1
64832: PPUSH
64833: CALL_OW 437
64837: PUSH
64838: LD_INT 1
64840: ARRAY
64841: PUSH
64842: LD_INT 3
64844: ARRAY
64845: EQUAL
64846: AND
64847: IFFALSE 64857
// result := true ;
64849: LD_ADDR_VAR 0 4
64853: PUSH
64854: LD_INT 1
64856: ST_TO_ADDR
// end ; end ;
64857: LD_VAR 0 4
64861: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64862: LD_INT 0
64864: PPUSH
64865: PPUSH
64866: PPUSH
64867: PPUSH
// if not unit or not area then
64868: LD_VAR 0 1
64872: NOT
64873: PUSH
64874: LD_VAR 0 2
64878: NOT
64879: OR
64880: IFFALSE 64884
// exit ;
64882: GO 65048
// tmp := AreaToList ( area , i ) ;
64884: LD_ADDR_VAR 0 6
64888: PUSH
64889: LD_VAR 0 2
64893: PPUSH
64894: LD_VAR 0 5
64898: PPUSH
64899: CALL_OW 517
64903: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64904: LD_ADDR_VAR 0 5
64908: PUSH
64909: DOUBLE
64910: LD_INT 1
64912: DEC
64913: ST_TO_ADDR
64914: LD_VAR 0 6
64918: PUSH
64919: LD_INT 1
64921: ARRAY
64922: PUSH
64923: FOR_TO
64924: IFFALSE 65046
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64926: LD_ADDR_VAR 0 7
64930: PUSH
64931: LD_VAR 0 6
64935: PUSH
64936: LD_INT 1
64938: ARRAY
64939: PUSH
64940: LD_VAR 0 5
64944: ARRAY
64945: PUSH
64946: LD_VAR 0 6
64950: PUSH
64951: LD_INT 2
64953: ARRAY
64954: PUSH
64955: LD_VAR 0 5
64959: ARRAY
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64965: LD_VAR 0 7
64969: PUSH
64970: LD_INT 1
64972: ARRAY
64973: PPUSH
64974: LD_VAR 0 7
64978: PUSH
64979: LD_INT 2
64981: ARRAY
64982: PPUSH
64983: CALL_OW 428
64987: PUSH
64988: LD_INT 0
64990: EQUAL
64991: IFFALSE 65044
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64993: LD_VAR 0 1
64997: PPUSH
64998: LD_VAR 0 7
65002: PUSH
65003: LD_INT 1
65005: ARRAY
65006: PPUSH
65007: LD_VAR 0 7
65011: PUSH
65012: LD_INT 2
65014: ARRAY
65015: PPUSH
65016: LD_VAR 0 3
65020: PPUSH
65021: CALL_OW 48
// result := IsPlaced ( unit ) ;
65025: LD_ADDR_VAR 0 4
65029: PUSH
65030: LD_VAR 0 1
65034: PPUSH
65035: CALL_OW 305
65039: ST_TO_ADDR
// exit ;
65040: POP
65041: POP
65042: GO 65048
// end ; end ;
65044: GO 64923
65046: POP
65047: POP
// end ;
65048: LD_VAR 0 4
65052: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65053: LD_INT 0
65055: PPUSH
65056: PPUSH
65057: PPUSH
// if not side or side > 8 then
65058: LD_VAR 0 1
65062: NOT
65063: PUSH
65064: LD_VAR 0 1
65068: PUSH
65069: LD_INT 8
65071: GREATER
65072: OR
65073: IFFALSE 65077
// exit ;
65075: GO 65264
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65077: LD_ADDR_VAR 0 4
65081: PUSH
65082: LD_INT 22
65084: PUSH
65085: LD_VAR 0 1
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 21
65096: PUSH
65097: LD_INT 3
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PPUSH
65108: CALL_OW 69
65112: ST_TO_ADDR
// if not tmp then
65113: LD_VAR 0 4
65117: NOT
65118: IFFALSE 65122
// exit ;
65120: GO 65264
// enable_addtolog := true ;
65122: LD_ADDR_OWVAR 81
65126: PUSH
65127: LD_INT 1
65129: ST_TO_ADDR
// AddToLog ( [ ) ;
65130: LD_STRING [
65132: PPUSH
65133: CALL_OW 561
// for i in tmp do
65137: LD_ADDR_VAR 0 3
65141: PUSH
65142: LD_VAR 0 4
65146: PUSH
65147: FOR_IN
65148: IFFALSE 65255
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65150: LD_STRING [
65152: PUSH
65153: LD_VAR 0 3
65157: PPUSH
65158: CALL_OW 266
65162: STR
65163: PUSH
65164: LD_STRING , 
65166: STR
65167: PUSH
65168: LD_VAR 0 3
65172: PPUSH
65173: CALL_OW 250
65177: STR
65178: PUSH
65179: LD_STRING , 
65181: STR
65182: PUSH
65183: LD_VAR 0 3
65187: PPUSH
65188: CALL_OW 251
65192: STR
65193: PUSH
65194: LD_STRING , 
65196: STR
65197: PUSH
65198: LD_VAR 0 3
65202: PPUSH
65203: CALL_OW 254
65207: STR
65208: PUSH
65209: LD_STRING , 
65211: STR
65212: PUSH
65213: LD_VAR 0 3
65217: PPUSH
65218: LD_INT 1
65220: PPUSH
65221: CALL_OW 268
65225: STR
65226: PUSH
65227: LD_STRING , 
65229: STR
65230: PUSH
65231: LD_VAR 0 3
65235: PPUSH
65236: LD_INT 2
65238: PPUSH
65239: CALL_OW 268
65243: STR
65244: PUSH
65245: LD_STRING ],
65247: STR
65248: PPUSH
65249: CALL_OW 561
// end ;
65253: GO 65147
65255: POP
65256: POP
// AddToLog ( ]; ) ;
65257: LD_STRING ];
65259: PPUSH
65260: CALL_OW 561
// end ;
65264: LD_VAR 0 2
65268: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65269: LD_INT 0
65271: PPUSH
65272: PPUSH
65273: PPUSH
65274: PPUSH
65275: PPUSH
// if not area or not rate or not max then
65276: LD_VAR 0 1
65280: NOT
65281: PUSH
65282: LD_VAR 0 2
65286: NOT
65287: OR
65288: PUSH
65289: LD_VAR 0 4
65293: NOT
65294: OR
65295: IFFALSE 65299
// exit ;
65297: GO 65491
// while 1 do
65299: LD_INT 1
65301: IFFALSE 65491
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65303: LD_ADDR_VAR 0 9
65307: PUSH
65308: LD_VAR 0 1
65312: PPUSH
65313: LD_INT 1
65315: PPUSH
65316: CALL_OW 287
65320: PUSH
65321: LD_INT 10
65323: MUL
65324: ST_TO_ADDR
// r := rate / 10 ;
65325: LD_ADDR_VAR 0 7
65329: PUSH
65330: LD_VAR 0 2
65334: PUSH
65335: LD_INT 10
65337: DIVREAL
65338: ST_TO_ADDR
// time := 1 1$00 ;
65339: LD_ADDR_VAR 0 8
65343: PUSH
65344: LD_INT 2100
65346: ST_TO_ADDR
// if amount < min then
65347: LD_VAR 0 9
65351: PUSH
65352: LD_VAR 0 3
65356: LESS
65357: IFFALSE 65375
// r := r * 2 else
65359: LD_ADDR_VAR 0 7
65363: PUSH
65364: LD_VAR 0 7
65368: PUSH
65369: LD_INT 2
65371: MUL
65372: ST_TO_ADDR
65373: GO 65401
// if amount > max then
65375: LD_VAR 0 9
65379: PUSH
65380: LD_VAR 0 4
65384: GREATER
65385: IFFALSE 65401
// r := r / 2 ;
65387: LD_ADDR_VAR 0 7
65391: PUSH
65392: LD_VAR 0 7
65396: PUSH
65397: LD_INT 2
65399: DIVREAL
65400: ST_TO_ADDR
// time := time / r ;
65401: LD_ADDR_VAR 0 8
65405: PUSH
65406: LD_VAR 0 8
65410: PUSH
65411: LD_VAR 0 7
65415: DIVREAL
65416: ST_TO_ADDR
// if time < 0 then
65417: LD_VAR 0 8
65421: PUSH
65422: LD_INT 0
65424: LESS
65425: IFFALSE 65442
// time := time * - 1 ;
65427: LD_ADDR_VAR 0 8
65431: PUSH
65432: LD_VAR 0 8
65436: PUSH
65437: LD_INT 1
65439: NEG
65440: MUL
65441: ST_TO_ADDR
// wait ( time ) ;
65442: LD_VAR 0 8
65446: PPUSH
65447: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65451: LD_INT 35
65453: PPUSH
65454: LD_INT 875
65456: PPUSH
65457: CALL_OW 12
65461: PPUSH
65462: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65466: LD_INT 1
65468: PPUSH
65469: LD_INT 5
65471: PPUSH
65472: CALL_OW 12
65476: PPUSH
65477: LD_VAR 0 1
65481: PPUSH
65482: LD_INT 1
65484: PPUSH
65485: CALL_OW 55
// end ;
65489: GO 65299
// end ;
65491: LD_VAR 0 5
65495: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65496: LD_INT 0
65498: PPUSH
65499: PPUSH
65500: PPUSH
65501: PPUSH
65502: PPUSH
65503: PPUSH
65504: PPUSH
65505: PPUSH
// if not turrets or not factories then
65506: LD_VAR 0 1
65510: NOT
65511: PUSH
65512: LD_VAR 0 2
65516: NOT
65517: OR
65518: IFFALSE 65522
// exit ;
65520: GO 65829
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65522: LD_ADDR_VAR 0 10
65526: PUSH
65527: LD_INT 5
65529: PUSH
65530: LD_INT 6
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 2
65539: PUSH
65540: LD_INT 4
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 3
65549: PUSH
65550: LD_INT 5
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 24
65564: PUSH
65565: LD_INT 25
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 23
65574: PUSH
65575: LD_INT 27
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 42
65588: PUSH
65589: LD_INT 43
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 44
65598: PUSH
65599: LD_INT 46
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 45
65608: PUSH
65609: LD_INT 47
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: LIST
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: LIST
65625: ST_TO_ADDR
// result := [ ] ;
65626: LD_ADDR_VAR 0 3
65630: PUSH
65631: EMPTY
65632: ST_TO_ADDR
// for i in turrets do
65633: LD_ADDR_VAR 0 4
65637: PUSH
65638: LD_VAR 0 1
65642: PUSH
65643: FOR_IN
65644: IFFALSE 65827
// begin nat := GetNation ( i ) ;
65646: LD_ADDR_VAR 0 7
65650: PUSH
65651: LD_VAR 0 4
65655: PPUSH
65656: CALL_OW 248
65660: ST_TO_ADDR
// weapon := 0 ;
65661: LD_ADDR_VAR 0 8
65665: PUSH
65666: LD_INT 0
65668: ST_TO_ADDR
// if not nat then
65669: LD_VAR 0 7
65673: NOT
65674: IFFALSE 65678
// continue ;
65676: GO 65643
// for j in list [ nat ] do
65678: LD_ADDR_VAR 0 5
65682: PUSH
65683: LD_VAR 0 10
65687: PUSH
65688: LD_VAR 0 7
65692: ARRAY
65693: PUSH
65694: FOR_IN
65695: IFFALSE 65736
// if GetBWeapon ( i ) = j [ 1 ] then
65697: LD_VAR 0 4
65701: PPUSH
65702: CALL_OW 269
65706: PUSH
65707: LD_VAR 0 5
65711: PUSH
65712: LD_INT 1
65714: ARRAY
65715: EQUAL
65716: IFFALSE 65734
// begin weapon := j [ 2 ] ;
65718: LD_ADDR_VAR 0 8
65722: PUSH
65723: LD_VAR 0 5
65727: PUSH
65728: LD_INT 2
65730: ARRAY
65731: ST_TO_ADDR
// break ;
65732: GO 65736
// end ;
65734: GO 65694
65736: POP
65737: POP
// if not weapon then
65738: LD_VAR 0 8
65742: NOT
65743: IFFALSE 65747
// continue ;
65745: GO 65643
// for k in factories do
65747: LD_ADDR_VAR 0 6
65751: PUSH
65752: LD_VAR 0 2
65756: PUSH
65757: FOR_IN
65758: IFFALSE 65823
// begin weapons := AvailableWeaponList ( k ) ;
65760: LD_ADDR_VAR 0 9
65764: PUSH
65765: LD_VAR 0 6
65769: PPUSH
65770: CALL_OW 478
65774: ST_TO_ADDR
// if not weapons then
65775: LD_VAR 0 9
65779: NOT
65780: IFFALSE 65784
// continue ;
65782: GO 65757
// if weapon in weapons then
65784: LD_VAR 0 8
65788: PUSH
65789: LD_VAR 0 9
65793: IN
65794: IFFALSE 65821
// begin result := [ i , weapon ] ;
65796: LD_ADDR_VAR 0 3
65800: PUSH
65801: LD_VAR 0 4
65805: PUSH
65806: LD_VAR 0 8
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: ST_TO_ADDR
// exit ;
65815: POP
65816: POP
65817: POP
65818: POP
65819: GO 65829
// end ; end ;
65821: GO 65757
65823: POP
65824: POP
// end ;
65825: GO 65643
65827: POP
65828: POP
// end ;
65829: LD_VAR 0 3
65833: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65834: LD_INT 0
65836: PPUSH
// if not side or side > 8 then
65837: LD_VAR 0 3
65841: NOT
65842: PUSH
65843: LD_VAR 0 3
65847: PUSH
65848: LD_INT 8
65850: GREATER
65851: OR
65852: IFFALSE 65856
// exit ;
65854: GO 65915
// if not range then
65856: LD_VAR 0 4
65860: NOT
65861: IFFALSE 65872
// range := - 12 ;
65863: LD_ADDR_VAR 0 4
65867: PUSH
65868: LD_INT 12
65870: NEG
65871: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65872: LD_VAR 0 1
65876: PPUSH
65877: LD_VAR 0 2
65881: PPUSH
65882: LD_VAR 0 3
65886: PPUSH
65887: LD_VAR 0 4
65891: PPUSH
65892: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65896: LD_VAR 0 1
65900: PPUSH
65901: LD_VAR 0 2
65905: PPUSH
65906: LD_VAR 0 3
65910: PPUSH
65911: CALL_OW 331
// end ;
65915: LD_VAR 0 5
65919: RET
// export function Video ( mode ) ; begin
65920: LD_INT 0
65922: PPUSH
// ingame_video = mode ;
65923: LD_ADDR_OWVAR 52
65927: PUSH
65928: LD_VAR 0 1
65932: ST_TO_ADDR
// interface_hidden = mode ;
65933: LD_ADDR_OWVAR 54
65937: PUSH
65938: LD_VAR 0 1
65942: ST_TO_ADDR
// end ;
65943: LD_VAR 0 2
65947: RET
// export function Join ( array , element ) ; begin
65948: LD_INT 0
65950: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65951: LD_ADDR_VAR 0 3
65955: PUSH
65956: LD_VAR 0 1
65960: PPUSH
65961: LD_VAR 0 1
65965: PUSH
65966: LD_INT 1
65968: PLUS
65969: PPUSH
65970: LD_VAR 0 2
65974: PPUSH
65975: CALL_OW 1
65979: ST_TO_ADDR
// end ;
65980: LD_VAR 0 3
65984: RET
// export function JoinUnion ( array , element ) ; begin
65985: LD_INT 0
65987: PPUSH
// result := array union element ;
65988: LD_ADDR_VAR 0 3
65992: PUSH
65993: LD_VAR 0 1
65997: PUSH
65998: LD_VAR 0 2
66002: UNION
66003: ST_TO_ADDR
// end ;
66004: LD_VAR 0 3
66008: RET
// export function GetBehemoths ( side ) ; begin
66009: LD_INT 0
66011: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66012: LD_ADDR_VAR 0 2
66016: PUSH
66017: LD_INT 22
66019: PUSH
66020: LD_VAR 0 1
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 31
66031: PUSH
66032: LD_INT 25
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PPUSH
66043: CALL_OW 69
66047: ST_TO_ADDR
// end ;
66048: LD_VAR 0 2
66052: RET
// export function Shuffle ( array ) ; var i , index ; begin
66053: LD_INT 0
66055: PPUSH
66056: PPUSH
66057: PPUSH
// result := [ ] ;
66058: LD_ADDR_VAR 0 2
66062: PUSH
66063: EMPTY
66064: ST_TO_ADDR
// if not array then
66065: LD_VAR 0 1
66069: NOT
66070: IFFALSE 66074
// exit ;
66072: GO 66173
// Randomize ;
66074: CALL_OW 10
// for i = array downto 1 do
66078: LD_ADDR_VAR 0 3
66082: PUSH
66083: DOUBLE
66084: LD_VAR 0 1
66088: INC
66089: ST_TO_ADDR
66090: LD_INT 1
66092: PUSH
66093: FOR_DOWNTO
66094: IFFALSE 66171
// begin index := rand ( 1 , array ) ;
66096: LD_ADDR_VAR 0 4
66100: PUSH
66101: LD_INT 1
66103: PPUSH
66104: LD_VAR 0 1
66108: PPUSH
66109: CALL_OW 12
66113: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66114: LD_ADDR_VAR 0 2
66118: PUSH
66119: LD_VAR 0 2
66123: PPUSH
66124: LD_VAR 0 2
66128: PUSH
66129: LD_INT 1
66131: PLUS
66132: PPUSH
66133: LD_VAR 0 1
66137: PUSH
66138: LD_VAR 0 4
66142: ARRAY
66143: PPUSH
66144: CALL_OW 2
66148: ST_TO_ADDR
// array := Delete ( array , index ) ;
66149: LD_ADDR_VAR 0 1
66153: PUSH
66154: LD_VAR 0 1
66158: PPUSH
66159: LD_VAR 0 4
66163: PPUSH
66164: CALL_OW 3
66168: ST_TO_ADDR
// end ;
66169: GO 66093
66171: POP
66172: POP
// end ;
66173: LD_VAR 0 2
66177: RET
// export function GetBaseMaterials ( base ) ; begin
66178: LD_INT 0
66180: PPUSH
// result := [ 0 , 0 , 0 ] ;
66181: LD_ADDR_VAR 0 2
66185: PUSH
66186: LD_INT 0
66188: PUSH
66189: LD_INT 0
66191: PUSH
66192: LD_INT 0
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: LIST
66199: ST_TO_ADDR
// if not base then
66200: LD_VAR 0 1
66204: NOT
66205: IFFALSE 66209
// exit ;
66207: GO 66258
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66209: LD_ADDR_VAR 0 2
66213: PUSH
66214: LD_VAR 0 1
66218: PPUSH
66219: LD_INT 1
66221: PPUSH
66222: CALL_OW 275
66226: PUSH
66227: LD_VAR 0 1
66231: PPUSH
66232: LD_INT 2
66234: PPUSH
66235: CALL_OW 275
66239: PUSH
66240: LD_VAR 0 1
66244: PPUSH
66245: LD_INT 3
66247: PPUSH
66248: CALL_OW 275
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: LIST
66257: ST_TO_ADDR
// end ;
66258: LD_VAR 0 2
66262: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66263: LD_INT 0
66265: PPUSH
66266: PPUSH
// result := array ;
66267: LD_ADDR_VAR 0 3
66271: PUSH
66272: LD_VAR 0 1
66276: ST_TO_ADDR
// if size > 0 then
66277: LD_VAR 0 2
66281: PUSH
66282: LD_INT 0
66284: GREATER
66285: IFFALSE 66331
// for i := array downto size do
66287: LD_ADDR_VAR 0 4
66291: PUSH
66292: DOUBLE
66293: LD_VAR 0 1
66297: INC
66298: ST_TO_ADDR
66299: LD_VAR 0 2
66303: PUSH
66304: FOR_DOWNTO
66305: IFFALSE 66329
// result := Delete ( result , result ) ;
66307: LD_ADDR_VAR 0 3
66311: PUSH
66312: LD_VAR 0 3
66316: PPUSH
66317: LD_VAR 0 3
66321: PPUSH
66322: CALL_OW 3
66326: ST_TO_ADDR
66327: GO 66304
66329: POP
66330: POP
// end ;
66331: LD_VAR 0 3
66335: RET
// export function ComExit ( unit ) ; var tmp ; begin
66336: LD_INT 0
66338: PPUSH
66339: PPUSH
// if not IsInUnit ( unit ) then
66340: LD_VAR 0 1
66344: PPUSH
66345: CALL_OW 310
66349: NOT
66350: IFFALSE 66354
// exit ;
66352: GO 66414
// tmp := IsInUnit ( unit ) ;
66354: LD_ADDR_VAR 0 3
66358: PUSH
66359: LD_VAR 0 1
66363: PPUSH
66364: CALL_OW 310
66368: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66369: LD_VAR 0 3
66373: PPUSH
66374: CALL_OW 247
66378: PUSH
66379: LD_INT 2
66381: EQUAL
66382: IFFALSE 66395
// ComExitVehicle ( unit ) else
66384: LD_VAR 0 1
66388: PPUSH
66389: CALL_OW 121
66393: GO 66404
// ComExitBuilding ( unit ) ;
66395: LD_VAR 0 1
66399: PPUSH
66400: CALL_OW 122
// result := tmp ;
66404: LD_ADDR_VAR 0 2
66408: PUSH
66409: LD_VAR 0 3
66413: ST_TO_ADDR
// end ;
66414: LD_VAR 0 2
66418: RET
// export function ResetHc ; begin
66419: LD_INT 0
66421: PPUSH
// InitHc ;
66422: CALL_OW 19
// hc_importance := 0 ;
66426: LD_ADDR_OWVAR 32
66430: PUSH
66431: LD_INT 0
66433: ST_TO_ADDR
// end ;
66434: LD_VAR 0 1
66438: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66439: LD_INT 0
66441: PPUSH
66442: PPUSH
66443: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66444: LD_ADDR_VAR 0 6
66448: PUSH
66449: LD_VAR 0 1
66453: PUSH
66454: LD_VAR 0 3
66458: PLUS
66459: PUSH
66460: LD_INT 2
66462: DIV
66463: ST_TO_ADDR
// if _x < 0 then
66464: LD_VAR 0 6
66468: PUSH
66469: LD_INT 0
66471: LESS
66472: IFFALSE 66489
// _x := _x * - 1 ;
66474: LD_ADDR_VAR 0 6
66478: PUSH
66479: LD_VAR 0 6
66483: PUSH
66484: LD_INT 1
66486: NEG
66487: MUL
66488: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66489: LD_ADDR_VAR 0 7
66493: PUSH
66494: LD_VAR 0 2
66498: PUSH
66499: LD_VAR 0 4
66503: PLUS
66504: PUSH
66505: LD_INT 2
66507: DIV
66508: ST_TO_ADDR
// if _y < 0 then
66509: LD_VAR 0 7
66513: PUSH
66514: LD_INT 0
66516: LESS
66517: IFFALSE 66534
// _y := _y * - 1 ;
66519: LD_ADDR_VAR 0 7
66523: PUSH
66524: LD_VAR 0 7
66528: PUSH
66529: LD_INT 1
66531: NEG
66532: MUL
66533: ST_TO_ADDR
// result := [ _x , _y ] ;
66534: LD_ADDR_VAR 0 5
66538: PUSH
66539: LD_VAR 0 6
66543: PUSH
66544: LD_VAR 0 7
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: ST_TO_ADDR
// end ;
66553: LD_VAR 0 5
66557: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66558: LD_INT 0
66560: PPUSH
66561: PPUSH
66562: PPUSH
66563: PPUSH
// task := GetTaskList ( unit ) ;
66564: LD_ADDR_VAR 0 7
66568: PUSH
66569: LD_VAR 0 1
66573: PPUSH
66574: CALL_OW 437
66578: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66579: LD_VAR 0 7
66583: NOT
66584: PUSH
66585: LD_VAR 0 1
66589: PPUSH
66590: LD_VAR 0 2
66594: PPUSH
66595: CALL_OW 308
66599: NOT
66600: AND
66601: IFFALSE 66605
// exit ;
66603: GO 66723
// if IsInArea ( unit , area ) then
66605: LD_VAR 0 1
66609: PPUSH
66610: LD_VAR 0 2
66614: PPUSH
66615: CALL_OW 308
66619: IFFALSE 66637
// begin ComMoveToArea ( unit , goAway ) ;
66621: LD_VAR 0 1
66625: PPUSH
66626: LD_VAR 0 3
66630: PPUSH
66631: CALL_OW 113
// exit ;
66635: GO 66723
// end ; if task [ 1 ] [ 1 ] <> M then
66637: LD_VAR 0 7
66641: PUSH
66642: LD_INT 1
66644: ARRAY
66645: PUSH
66646: LD_INT 1
66648: ARRAY
66649: PUSH
66650: LD_STRING M
66652: NONEQUAL
66653: IFFALSE 66657
// exit ;
66655: GO 66723
// x := task [ 1 ] [ 2 ] ;
66657: LD_ADDR_VAR 0 5
66661: PUSH
66662: LD_VAR 0 7
66666: PUSH
66667: LD_INT 1
66669: ARRAY
66670: PUSH
66671: LD_INT 2
66673: ARRAY
66674: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66675: LD_ADDR_VAR 0 6
66679: PUSH
66680: LD_VAR 0 7
66684: PUSH
66685: LD_INT 1
66687: ARRAY
66688: PUSH
66689: LD_INT 3
66691: ARRAY
66692: ST_TO_ADDR
// if InArea ( x , y , area ) then
66693: LD_VAR 0 5
66697: PPUSH
66698: LD_VAR 0 6
66702: PPUSH
66703: LD_VAR 0 2
66707: PPUSH
66708: CALL_OW 309
66712: IFFALSE 66723
// ComStop ( unit ) ;
66714: LD_VAR 0 1
66718: PPUSH
66719: CALL_OW 141
// end ;
66723: LD_VAR 0 4
66727: RET
// export function Abs ( value ) ; begin
66728: LD_INT 0
66730: PPUSH
// result := value ;
66731: LD_ADDR_VAR 0 2
66735: PUSH
66736: LD_VAR 0 1
66740: ST_TO_ADDR
// if value < 0 then
66741: LD_VAR 0 1
66745: PUSH
66746: LD_INT 0
66748: LESS
66749: IFFALSE 66766
// result := value * - 1 ;
66751: LD_ADDR_VAR 0 2
66755: PUSH
66756: LD_VAR 0 1
66760: PUSH
66761: LD_INT 1
66763: NEG
66764: MUL
66765: ST_TO_ADDR
// end ;
66766: LD_VAR 0 2
66770: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66771: LD_INT 0
66773: PPUSH
66774: PPUSH
66775: PPUSH
66776: PPUSH
66777: PPUSH
66778: PPUSH
66779: PPUSH
66780: PPUSH
// if not unit or not building then
66781: LD_VAR 0 1
66785: NOT
66786: PUSH
66787: LD_VAR 0 2
66791: NOT
66792: OR
66793: IFFALSE 66797
// exit ;
66795: GO 67023
// x := GetX ( building ) ;
66797: LD_ADDR_VAR 0 4
66801: PUSH
66802: LD_VAR 0 2
66806: PPUSH
66807: CALL_OW 250
66811: ST_TO_ADDR
// y := GetY ( building ) ;
66812: LD_ADDR_VAR 0 6
66816: PUSH
66817: LD_VAR 0 2
66821: PPUSH
66822: CALL_OW 251
66826: ST_TO_ADDR
// d := GetDir ( building ) ;
66827: LD_ADDR_VAR 0 8
66831: PUSH
66832: LD_VAR 0 2
66836: PPUSH
66837: CALL_OW 254
66841: ST_TO_ADDR
// r := 4 ;
66842: LD_ADDR_VAR 0 9
66846: PUSH
66847: LD_INT 4
66849: ST_TO_ADDR
// for i := 1 to 5 do
66850: LD_ADDR_VAR 0 10
66854: PUSH
66855: DOUBLE
66856: LD_INT 1
66858: DEC
66859: ST_TO_ADDR
66860: LD_INT 5
66862: PUSH
66863: FOR_TO
66864: IFFALSE 67021
// begin _x := ShiftX ( x , d , r + i ) ;
66866: LD_ADDR_VAR 0 5
66870: PUSH
66871: LD_VAR 0 4
66875: PPUSH
66876: LD_VAR 0 8
66880: PPUSH
66881: LD_VAR 0 9
66885: PUSH
66886: LD_VAR 0 10
66890: PLUS
66891: PPUSH
66892: CALL_OW 272
66896: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66897: LD_ADDR_VAR 0 7
66901: PUSH
66902: LD_VAR 0 6
66906: PPUSH
66907: LD_VAR 0 8
66911: PPUSH
66912: LD_VAR 0 9
66916: PUSH
66917: LD_VAR 0 10
66921: PLUS
66922: PPUSH
66923: CALL_OW 273
66927: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66928: LD_VAR 0 5
66932: PPUSH
66933: LD_VAR 0 7
66937: PPUSH
66938: CALL_OW 488
66942: PUSH
66943: LD_VAR 0 5
66947: PPUSH
66948: LD_VAR 0 7
66952: PPUSH
66953: CALL_OW 428
66957: PPUSH
66958: CALL_OW 247
66962: PUSH
66963: LD_INT 3
66965: PUSH
66966: LD_INT 2
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: IN
66973: NOT
66974: AND
66975: IFFALSE 67019
// begin ComMoveXY ( unit , _x , _y ) ;
66977: LD_VAR 0 1
66981: PPUSH
66982: LD_VAR 0 5
66986: PPUSH
66987: LD_VAR 0 7
66991: PPUSH
66992: CALL_OW 111
// result := [ _x , _y ] ;
66996: LD_ADDR_VAR 0 3
67000: PUSH
67001: LD_VAR 0 5
67005: PUSH
67006: LD_VAR 0 7
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: ST_TO_ADDR
// exit ;
67015: POP
67016: POP
67017: GO 67023
// end ; end ;
67019: GO 66863
67021: POP
67022: POP
// end ; end_of_file
67023: LD_VAR 0 3
67027: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67028: LD_VAR 0 1
67032: PUSH
67033: LD_INT 200
67035: DOUBLE
67036: GREATEREQUAL
67037: IFFALSE 67045
67039: LD_INT 299
67041: DOUBLE
67042: LESSEQUAL
67043: IFTRUE 67047
67045: GO 67079
67047: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67048: LD_VAR 0 1
67052: PPUSH
67053: LD_VAR 0 2
67057: PPUSH
67058: LD_VAR 0 3
67062: PPUSH
67063: LD_VAR 0 4
67067: PPUSH
67068: LD_VAR 0 5
67072: PPUSH
67073: CALL 26084 0 5
67077: GO 67156
67079: LD_INT 300
67081: DOUBLE
67082: GREATEREQUAL
67083: IFFALSE 67091
67085: LD_INT 399
67087: DOUBLE
67088: LESSEQUAL
67089: IFTRUE 67093
67091: GO 67155
67093: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67094: LD_VAR 0 1
67098: PPUSH
67099: LD_VAR 0 2
67103: PPUSH
67104: LD_VAR 0 3
67108: PPUSH
67109: LD_VAR 0 4
67113: PPUSH
67114: LD_VAR 0 5
67118: PPUSH
67119: LD_VAR 0 6
67123: PPUSH
67124: LD_VAR 0 7
67128: PPUSH
67129: LD_VAR 0 8
67133: PPUSH
67134: LD_VAR 0 9
67138: PPUSH
67139: LD_VAR 0 10
67143: PPUSH
67144: LD_VAR 0 11
67148: PPUSH
67149: CALL 23990 0 11
67153: GO 67156
67155: POP
// end ;
67156: PPOPN 11
67158: END
