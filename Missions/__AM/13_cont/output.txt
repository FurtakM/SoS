// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , DeltaDoctor ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; export eventArabianAttack , eventRussianAttack , eventContaminate ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak := 0 ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus := 0 ;
  23: LD_ADDR_EXP 29
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot := 0 ;
  31: LD_ADDR_EXP 31
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched := 0 ;
  39: LD_ADDR_EXP 30
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter := 0 ;
  47: LD_ADDR_EXP 33
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits := [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 32
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter := 0 ;
  84: LD_ADDR_EXP 34
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 43
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources := [ ] ;
 100: LD_ADDR_EXP 25
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles := [ ] ;
 107: LD_ADDR_EXP 26
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 := 0 ;
 114: LD_ADDR_EXP 36
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 := 0 ;
 122: LD_ADDR_EXP 37
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 := 0 ;
 130: LD_ADDR_EXP 38
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 := 0 ;
 138: LD_ADDR_EXP 39
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 := 0 ;
 146: LD_ADDR_EXP 40
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// eventArabianAttack := 1 ;
 154: LD_ADDR_EXP 44
 158: PUSH
 159: LD_INT 1
 161: ST_TO_ADDR
// eventRussianAttack := 2 ;
 162: LD_ADDR_EXP 45
 166: PUSH
 167: LD_INT 2
 169: ST_TO_ADDR
// eventContaminate := 3 ;
 170: LD_ADDR_EXP 46
 174: PUSH
 175: LD_INT 3
 177: ST_TO_ADDR
// mission_prefix := 13f_ ;
 178: LD_ADDR_EXP 35
 182: PUSH
 183: LD_STRING 13f_
 185: ST_TO_ADDR
// debugMode := 0 ;
 186: LD_ADDR_EXP 41
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// achivCounter := 0 ;
 194: LD_ADDR_EXP 42
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// if Difficulty = 1 then
 202: LD_OWVAR 67
 206: PUSH
 207: LD_INT 1
 209: EQUAL
 210: IFFALSE 219
// RemoveEnvironmentArea ( oilBlockArea ) ;
 212: LD_INT 15
 214: PPUSH
 215: CALL_OW 355
// if Difficulty < 4 then
 219: LD_OWVAR 67
 223: PUSH
 224: LD_INT 4
 226: LESS
 227: IFFALSE 236
// RemoveEnvironmentArea ( sibBlockArea ) ;
 229: LD_INT 18
 231: PPUSH
 232: CALL_OW 355
// PrepareVehicles ;
 236: CALL 1247 0 0
// PrepareHeroes ;
 240: CALL 477 0 0
// PrepareAmericansRandom ;
 244: CALL 1151 0 0
// PrepareDifficulty ;
 248: CALL 8613 0 0
// Action ;
 252: CALL 5425 0 0
// end ;
 256: END
// every 0 0$1 trigger debugMode do var i , j ;
 257: LD_EXP 41
 261: IFFALSE 432
 263: GO 265
 265: DISABLE
 266: LD_INT 0
 268: PPUSH
 269: PPUSH
// begin enable ;
 270: ENABLE
// FogOff ( true ) ;
 271: LD_INT 1
 273: PPUSH
 274: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 278: LD_ADDR_VAR 0 1
 282: PUSH
 283: LD_INT 22
 285: PUSH
 286: LD_INT 1
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: LD_INT 21
 295: PUSH
 296: LD_INT 1
 298: PUSH
 299: EMPTY
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 329
// SetLives ( i , 1000 ) ;
 315: LD_VAR 0 1
 319: PPUSH
 320: LD_INT 1000
 322: PPUSH
 323: CALL_OW 234
 327: GO 312
 329: POP
 330: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 331: LD_ADDR_VAR 0 1
 335: PUSH
 336: LD_INT 22
 338: PUSH
 339: LD_INT 1
 341: PUSH
 342: EMPTY
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: LD_INT 30
 351: PUSH
 352: LD_INT 0
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 30
 361: PUSH
 362: LD_INT 1
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: PPUSH
 378: CALL_OW 69
 382: PUSH
 383: FOR_IN
 384: IFFALSE 430
// for j := 1 to 3 do
 386: LD_ADDR_VAR 0 2
 390: PUSH
 391: DOUBLE
 392: LD_INT 1
 394: DEC
 395: ST_TO_ADDR
 396: LD_INT 3
 398: PUSH
 399: FOR_TO
 400: IFFALSE 426
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 274
 411: PPUSH
 412: LD_VAR 0 2
 416: PPUSH
 417: LD_INT 9999
 419: PPUSH
 420: CALL_OW 277
 424: GO 399
 426: POP
 427: POP
 428: GO 383
 430: POP
 431: POP
// end ;
 432: PPOPN 2
 434: END
// every 0 0$1 trigger achivCounter >= 2 do
 435: LD_EXP 42
 439: PUSH
 440: LD_INT 2
 442: GREATEREQUAL
 443: IFFALSE 455
 445: GO 447
 447: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 448: LD_STRING ACH_REMOTE
 450: PPUSH
 451: CALL_OW 543
 455: END
// every 0 0$1 trigger destroyCounter >= 30 do
 456: LD_EXP 43
 460: PUSH
 461: LD_INT 30
 463: GREATEREQUAL
 464: IFFALSE 476
 466: GO 468
 468: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 469: LD_STRING ACH_DEFMASTER
 471: PPUSH
 472: CALL_OW 543
 476: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 477: LD_INT 0
 479: PPUSH
 480: PPUSH
 481: PPUSH
 482: PPUSH
// uc_side = 1 ;
 483: LD_ADDR_OWVAR 20
 487: PUSH
 488: LD_INT 1
 490: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 491: LD_ADDR_EXP 1
 495: PUSH
 496: LD_STRING JMM
 498: PPUSH
 499: LD_EXP 41
 503: NOT
 504: PPUSH
 505: LD_STRING 13c_
 507: PPUSH
 508: CALL 33559 0 3
 512: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 513: LD_ADDR_EXP 2
 517: PUSH
 518: LD_STRING Stevens
 520: PPUSH
 521: LD_EXP 41
 525: NOT
 526: PPUSH
 527: LD_STRING 13c_
 529: PPUSH
 530: CALL 33559 0 3
 534: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 535: LD_ADDR_EXP 3
 539: PUSH
 540: LD_STRING Lisa
 542: PPUSH
 543: LD_EXP 41
 547: NOT
 548: PPUSH
 549: LD_STRING 13c_
 551: PPUSH
 552: CALL 33559 0 3
 556: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 557: LD_ADDR_EXP 4
 561: PUSH
 562: LD_STRING Donaldson
 564: PPUSH
 565: LD_EXP 41
 569: NOT
 570: PPUSH
 571: LD_STRING 13c_
 573: PPUSH
 574: CALL 33559 0 3
 578: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 579: LD_ADDR_EXP 5
 583: PUSH
 584: LD_STRING Bobby
 586: PPUSH
 587: LD_EXP 41
 591: NOT
 592: PPUSH
 593: LD_STRING 13c_
 595: PPUSH
 596: CALL 33559 0 3
 600: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 601: LD_ADDR_EXP 6
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_EXP 41
 613: NOT
 614: PPUSH
 615: LD_STRING 13c_
 617: PPUSH
 618: CALL 33559 0 3
 622: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 623: LD_ADDR_EXP 7
 627: PUSH
 628: LD_STRING Denis
 630: PPUSH
 631: LD_EXP 41
 635: NOT
 636: PPUSH
 637: LD_STRING 13c_
 639: PPUSH
 640: CALL 33559 0 3
 644: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 645: LD_ADDR_EXP 8
 649: PUSH
 650: LD_STRING Brown
 652: PPUSH
 653: LD_EXP 41
 657: NOT
 658: PPUSH
 659: LD_STRING 13c_
 661: PPUSH
 662: CALL 33559 0 3
 666: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true , 13c_ ) ;
 667: LD_ADDR_EXP 9
 671: PUSH
 672: LD_STRING Gladstone
 674: PPUSH
 675: LD_INT 1
 677: PPUSH
 678: LD_STRING 13c_
 680: PPUSH
 681: CALL 33559 0 3
 685: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true , 13c_ ) ;
 686: LD_ADDR_EXP 10
 690: PUSH
 691: LD_STRING Houten
 693: PPUSH
 694: LD_INT 1
 696: PPUSH
 697: LD_STRING 13c_
 699: PPUSH
 700: CALL 33559 0 3
 704: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , true , 13c_ ) ;
 705: LD_ADDR_EXP 11
 709: PUSH
 710: LD_STRING Cornel
 712: PPUSH
 713: LD_INT 1
 715: PPUSH
 716: LD_STRING 13c_
 718: PPUSH
 719: CALL 33559 0 3
 723: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true , 13c_ ) ;
 724: LD_ADDR_EXP 12
 728: PUSH
 729: LD_STRING Gary
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_STRING 13c_
 737: PPUSH
 738: CALL 33559 0 3
 742: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 13c_ ) ;
 743: LD_ADDR_EXP 13
 747: PUSH
 748: LD_STRING Frank
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_STRING 13c_
 756: PPUSH
 757: CALL 33559 0 3
 761: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true , 13c_ ) ;
 762: LD_ADDR_EXP 14
 766: PUSH
 767: LD_STRING Kikuchi
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: LD_STRING 13c_
 775: PPUSH
 776: CALL 33559 0 3
 780: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , true , 13c_ ) ;
 781: LD_ADDR_EXP 15
 785: PUSH
 786: LD_STRING DeltaDoctor
 788: PPUSH
 789: LD_INT 1
 791: PPUSH
 792: LD_STRING 13c_
 794: PPUSH
 795: CALL 33559 0 3
 799: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 800: LD_ADDR_EXP 16
 804: PUSH
 805: LD_STRING Powell
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: LD_STRING 
 813: PPUSH
 814: CALL 33559 0 3
 818: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , DeltaDoctor ] ;
 819: LD_ADDR_VAR 0 2
 823: PUSH
 824: LD_EXP 1
 828: PUSH
 829: LD_EXP 2
 833: PUSH
 834: LD_EXP 3
 838: PUSH
 839: LD_EXP 4
 843: PUSH
 844: LD_EXP 5
 848: PUSH
 849: LD_EXP 6
 853: PUSH
 854: LD_EXP 7
 858: PUSH
 859: LD_EXP 8
 863: PUSH
 864: LD_EXP 9
 868: PUSH
 869: LD_EXP 10
 873: PUSH
 874: LD_EXP 11
 878: PUSH
 879: LD_EXP 12
 883: PUSH
 884: LD_EXP 13
 888: PUSH
 889: LD_EXP 14
 893: PUSH
 894: LD_EXP 15
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 916: LD_ADDR_VAR 0 3
 920: PUSH
 921: LD_INT 22
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 33
 933: PUSH
 934: LD_INT 1
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 21
 943: PUSH
 944: LD_INT 2
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: LIST
 955: PPUSH
 956: CALL_OW 69
 960: ST_TO_ADDR
// for i = tmp downto 1 do
 961: LD_ADDR_VAR 0 4
 965: PUSH
 966: DOUBLE
 967: LD_VAR 0 2
 971: INC
 972: ST_TO_ADDR
 973: LD_INT 1
 975: PUSH
 976: FOR_DOWNTO
 977: IFFALSE 1014
// if not tmp [ i ] then
 979: LD_VAR 0 2
 983: PUSH
 984: LD_VAR 0 4
 988: ARRAY
 989: NOT
 990: IFFALSE 1012
// tmp := Delete ( tmp , i ) ;
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: LD_VAR 0 2
1001: PPUSH
1002: LD_VAR 0 4
1006: PPUSH
1007: CALL_OW 3
1011: ST_TO_ADDR
1012: GO 976
1014: POP
1015: POP
// for i = 1 to tmp do
1016: LD_ADDR_VAR 0 4
1020: PUSH
1021: DOUBLE
1022: LD_INT 1
1024: DEC
1025: ST_TO_ADDR
1026: LD_VAR 0 2
1030: PUSH
1031: FOR_TO
1032: IFFALSE 1062
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1034: LD_VAR 0 2
1038: PUSH
1039: LD_VAR 0 4
1043: ARRAY
1044: PPUSH
1045: LD_VAR 0 3
1049: PUSH
1050: LD_VAR 0 4
1054: ARRAY
1055: PPUSH
1056: CALL_OW 52
1060: GO 1031
1062: POP
1063: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1064: LD_INT 22
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PUSH
1074: LD_INT 25
1076: PUSH
1077: LD_INT 2
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PPUSH
1088: CALL_OW 69
1092: PUSH
1093: LD_INT 0
1095: EQUAL
1096: IFFALSE 1132
1098: PUSH
1099: LD_INT 22
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: PUSH
1109: LD_INT 34
1111: PUSH
1112: LD_INT 13
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: PPUSH
1123: CALL_OW 69
1127: PUSH
1128: LD_INT 0
1130: EQUAL
1131: AND
1132: IFFALSE 1146
// SetClass ( JMM , 2 ) ;
1134: LD_EXP 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 336
// end ;
1146: LD_VAR 0 1
1150: RET
// export function PrepareAmericansRandom ; var i ; begin
1151: LD_INT 0
1153: PPUSH
1154: PPUSH
// uc_side = 1 ;
1155: LD_ADDR_OWVAR 20
1159: PUSH
1160: LD_INT 1
1162: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1163: LD_ADDR_EXP 17
1167: PUSH
1168: LD_STRING 13c_others
1170: PPUSH
1171: CALL_OW 31
1175: ST_TO_ADDR
// for i in others13 do
1176: LD_ADDR_VAR 0 2
1180: PUSH
1181: LD_EXP 17
1185: PUSH
1186: FOR_IN
1187: IFFALSE 1240
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1189: LD_VAR 0 2
1193: PPUSH
1194: LD_INT 22
1196: PUSH
1197: LD_INT 1
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: PUSH
1204: LD_INT 21
1206: PUSH
1207: LD_INT 2
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: LD_INT 58
1216: PUSH
1217: EMPTY
1218: LIST
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 69
1229: PUSH
1230: LD_INT 1
1232: ARRAY
1233: PPUSH
1234: CALL_OW 52
1238: GO 1186
1240: POP
1241: POP
// end ;
1242: LD_VAR 0 1
1246: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1247: LD_INT 0
1249: PPUSH
1250: PPUSH
1251: PPUSH
1252: PPUSH
1253: PPUSH
1254: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1255: LD_ADDR_VAR 0 5
1259: PUSH
1260: LD_STRING 13_VehiclesIn13_1
1262: PPUSH
1263: LD_INT 1
1265: PUSH
1266: LD_INT 5
1268: PUSH
1269: LD_INT 3
1271: PUSH
1272: LD_INT 1
1274: PUSH
1275: LD_INT 6
1277: PUSH
1278: LD_INT 100
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_INT 1
1291: PUSH
1292: LD_INT 5
1294: PUSH
1295: LD_INT 3
1297: PUSH
1298: LD_INT 1
1300: PUSH
1301: LD_INT 6
1303: PUSH
1304: LD_INT 100
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: LIST
1314: PUSH
1315: LD_INT 1
1317: PUSH
1318: LD_INT 5
1320: PUSH
1321: LD_INT 3
1323: PUSH
1324: LD_INT 1
1326: PUSH
1327: LD_INT 6
1329: PUSH
1330: LD_INT 100
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: PUSH
1341: LD_INT 1
1343: PUSH
1344: LD_INT 5
1346: PUSH
1347: LD_INT 3
1349: PUSH
1350: LD_INT 1
1352: PUSH
1353: LD_INT 6
1355: PUSH
1356: LD_INT 100
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: PUSH
1367: LD_INT 1
1369: PUSH
1370: LD_INT 5
1372: PUSH
1373: LD_INT 3
1375: PUSH
1376: LD_INT 1
1378: PUSH
1379: LD_INT 6
1381: PUSH
1382: LD_INT 100
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 1
1395: PUSH
1396: LD_INT 5
1398: PUSH
1399: LD_INT 3
1401: PUSH
1402: LD_INT 1
1404: PUSH
1405: LD_INT 6
1407: PUSH
1408: LD_INT 100
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PUSH
1419: LD_INT 1
1421: PUSH
1422: LD_INT 5
1424: PUSH
1425: LD_INT 3
1427: PUSH
1428: LD_INT 1
1430: PUSH
1431: LD_INT 6
1433: PUSH
1434: LD_INT 100
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: PUSH
1445: LD_INT 1
1447: PUSH
1448: LD_INT 5
1450: PUSH
1451: LD_INT 3
1453: PUSH
1454: LD_INT 1
1456: PUSH
1457: LD_INT 6
1459: PUSH
1460: LD_INT 100
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: PUSH
1471: EMPTY
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: PPUSH
1481: CALL_OW 30
1485: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1486: LD_ADDR_EXP 25
1490: PUSH
1491: LD_STRING 13_ResourcesInCargo13_1
1493: PPUSH
1494: EMPTY
1495: PPUSH
1496: CALL_OW 30
1500: ST_TO_ADDR
// cargoList = [ ] ;
1501: LD_ADDR_VAR 0 6
1505: PUSH
1506: EMPTY
1507: ST_TO_ADDR
// uc_side = 1 ;
1508: LD_ADDR_OWVAR 20
1512: PUSH
1513: LD_INT 1
1515: ST_TO_ADDR
// if vehicles then
1516: LD_VAR 0 5
1520: IFFALSE 1867
// begin for i := 1 to vehicles do
1522: LD_ADDR_VAR 0 2
1526: PUSH
1527: DOUBLE
1528: LD_INT 1
1530: DEC
1531: ST_TO_ADDR
1532: LD_VAR 0 5
1536: PUSH
1537: FOR_TO
1538: IFFALSE 1687
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1540: LD_ADDR_OWVAR 21
1544: PUSH
1545: LD_VAR 0 5
1549: PUSH
1550: LD_VAR 0 2
1554: ARRAY
1555: PUSH
1556: LD_INT 1
1558: ARRAY
1559: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1560: LD_ADDR_OWVAR 37
1564: PUSH
1565: LD_VAR 0 5
1569: PUSH
1570: LD_VAR 0 2
1574: ARRAY
1575: PUSH
1576: LD_INT 2
1578: ARRAY
1579: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1580: LD_ADDR_OWVAR 39
1584: PUSH
1585: LD_VAR 0 5
1589: PUSH
1590: LD_VAR 0 2
1594: ARRAY
1595: PUSH
1596: LD_INT 3
1598: ARRAY
1599: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1600: LD_ADDR_OWVAR 38
1604: PUSH
1605: LD_VAR 0 5
1609: PUSH
1610: LD_VAR 0 2
1614: ARRAY
1615: PUSH
1616: LD_INT 4
1618: ARRAY
1619: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1620: LD_ADDR_OWVAR 40
1624: PUSH
1625: LD_VAR 0 5
1629: PUSH
1630: LD_VAR 0 2
1634: ARRAY
1635: PUSH
1636: LD_INT 5
1638: ARRAY
1639: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1640: LD_ADDR_OWVAR 41
1644: PUSH
1645: LD_INT 40
1647: ST_TO_ADDR
// veh = CreateVehicle ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: CALL_OW 45
1657: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1658: LD_VAR 0 4
1662: PPUSH
1663: LD_INT 1
1665: PPUSH
1666: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1670: LD_VAR 0 4
1674: PPUSH
1675: LD_INT 2
1677: PPUSH
1678: LD_INT 0
1680: PPUSH
1681: CALL_OW 49
// end ;
1685: GO 1537
1687: POP
1688: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1689: LD_ADDR_VAR 0 6
1693: PUSH
1694: LD_INT 22
1696: PUSH
1697: LD_INT 1
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 21
1706: PUSH
1707: LD_INT 2
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: PUSH
1714: LD_INT 34
1716: PUSH
1717: LD_INT 12
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: LIST
1728: PPUSH
1729: CALL_OW 69
1733: ST_TO_ADDR
// if cargoList then
1734: LD_VAR 0 6
1738: IFFALSE 1867
// for i = 1 to cargoList do
1740: LD_ADDR_VAR 0 2
1744: PUSH
1745: DOUBLE
1746: LD_INT 1
1748: DEC
1749: ST_TO_ADDR
1750: LD_VAR 0 6
1754: PUSH
1755: FOR_TO
1756: IFFALSE 1865
// begin if resources then
1758: LD_EXP 25
1762: IFFALSE 1863
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1764: LD_VAR 0 6
1768: PUSH
1769: LD_VAR 0 2
1773: ARRAY
1774: PPUSH
1775: LD_INT 1
1777: PPUSH
1778: LD_EXP 25
1782: PUSH
1783: LD_VAR 0 2
1787: ARRAY
1788: PUSH
1789: LD_INT 1
1791: ARRAY
1792: PPUSH
1793: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1797: LD_VAR 0 6
1801: PUSH
1802: LD_VAR 0 2
1806: ARRAY
1807: PPUSH
1808: LD_INT 2
1810: PPUSH
1811: LD_EXP 25
1815: PUSH
1816: LD_VAR 0 2
1820: ARRAY
1821: PUSH
1822: LD_INT 2
1824: ARRAY
1825: PPUSH
1826: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1830: LD_VAR 0 6
1834: PUSH
1835: LD_VAR 0 2
1839: ARRAY
1840: PPUSH
1841: LD_INT 3
1843: PPUSH
1844: LD_EXP 25
1848: PUSH
1849: LD_VAR 0 2
1853: ARRAY
1854: PUSH
1855: LD_INT 3
1857: ARRAY
1858: PPUSH
1859: CALL_OW 291
// end ; end ;
1863: GO 1755
1865: POP
1866: POP
// end ; end ;
1867: LD_VAR 0 1
1871: RET
// export function PowellSupport ; var i , veh , un ; begin
1872: LD_INT 0
1874: PPUSH
1875: PPUSH
1876: PPUSH
1877: PPUSH
// for i := 1 to [ 4 , 3 , 2 , 2 ] [ Difficulty ] do
1878: LD_ADDR_VAR 0 2
1882: PUSH
1883: DOUBLE
1884: LD_INT 1
1886: DEC
1887: ST_TO_ADDR
1888: LD_INT 4
1890: PUSH
1891: LD_INT 3
1893: PUSH
1894: LD_INT 2
1896: PUSH
1897: LD_INT 2
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: PUSH
1906: LD_OWVAR 67
1910: ARRAY
1911: PUSH
1912: FOR_TO
1913: IFFALSE 2186
// begin uc_nation := 1 ;
1915: LD_ADDR_OWVAR 21
1919: PUSH
1920: LD_INT 1
1922: ST_TO_ADDR
// uc_side := 1 ;
1923: LD_ADDR_OWVAR 20
1927: PUSH
1928: LD_INT 1
1930: ST_TO_ADDR
// vc_engine := engine_siberite ;
1931: LD_ADDR_OWVAR 39
1935: PUSH
1936: LD_INT 3
1938: ST_TO_ADDR
// vc_control := control_manual ;
1939: LD_ADDR_OWVAR 38
1943: PUSH
1944: LD_INT 1
1946: ST_TO_ADDR
// vc_weapon := [ us_laser , us_heavy_gun , us_laser , us_double_gun , us_double_gun ] [ Difficulty + rand ( 0 , 1 ) ] ;
1947: LD_ADDR_OWVAR 40
1951: PUSH
1952: LD_INT 9
1954: PUSH
1955: LD_INT 6
1957: PUSH
1958: LD_INT 9
1960: PUSH
1961: LD_INT 5
1963: PUSH
1964: LD_INT 5
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: PUSH
1974: LD_OWVAR 67
1978: PUSH
1979: LD_INT 0
1981: PPUSH
1982: LD_INT 1
1984: PPUSH
1985: CALL_OW 12
1989: PLUS
1990: ARRAY
1991: ST_TO_ADDR
// if vc_weapon = us_heavy_gun then
1992: LD_OWVAR 40
1996: PUSH
1997: LD_INT 6
1999: EQUAL
2000: IFFALSE 2029
// vc_chassis := [ us_morphling , us_heavy_tracked , us_heavy_tracked ] [ Difficulty ] else
2002: LD_ADDR_OWVAR 37
2006: PUSH
2007: LD_INT 5
2009: PUSH
2010: LD_INT 4
2012: PUSH
2013: LD_INT 4
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_OWVAR 67
2025: ARRAY
2026: ST_TO_ADDR
2027: GO 2064
// vc_chassis := [ us_morphling , us_heavy_tracked , us_medium_tracked , us_medium_tracked ] [ rand ( 1 , 4 ) ] ;
2029: LD_ADDR_OWVAR 37
2033: PUSH
2034: LD_INT 5
2036: PUSH
2037: LD_INT 4
2039: PUSH
2040: LD_INT 3
2042: PUSH
2043: LD_INT 3
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: PUSH
2052: LD_INT 1
2054: PPUSH
2055: LD_INT 4
2057: PPUSH
2058: CALL_OW 12
2062: ARRAY
2063: ST_TO_ADDR
// veh = CreateVehicle ;
2064: LD_ADDR_VAR 0 3
2068: PUSH
2069: CALL_OW 45
2073: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2074: LD_INT 35
2076: PPUSH
2077: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn2 , false ) ;
2081: LD_VAR 0 3
2085: PPUSH
2086: LD_INT 24
2088: PPUSH
2089: LD_INT 0
2091: PPUSH
2092: CALL_OW 49
2096: IFFALSE 2074
// SetDir ( veh , 1 ) ;
2098: LD_VAR 0 3
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL_OW 233
// hc_gallery :=  ;
2110: LD_ADDR_OWVAR 33
2114: PUSH
2115: LD_STRING 
2117: ST_TO_ADDR
// hc_name :=  ;
2118: LD_ADDR_OWVAR 26
2122: PUSH
2123: LD_STRING 
2125: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2126: LD_INT 0
2128: PPUSH
2129: LD_INT 3
2131: PPUSH
2132: LD_INT 9
2134: PUSH
2135: LD_INT 8
2137: PUSH
2138: LD_INT 8
2140: PUSH
2141: LD_INT 7
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: PUSH
2150: LD_OWVAR 67
2154: ARRAY
2155: PPUSH
2156: CALL_OW 380
// un := CreateHuman ;
2160: LD_ADDR_VAR 0 4
2164: PUSH
2165: CALL_OW 44
2169: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2170: LD_VAR 0 4
2174: PPUSH
2175: LD_VAR 0 3
2179: PPUSH
2180: CALL_OW 52
// end ;
2184: GO 1912
2186: POP
2187: POP
// for i := 1 to [ 2 , 2 , 2 , 1 ] [ Difficulty ] do
2188: LD_ADDR_VAR 0 2
2192: PUSH
2193: DOUBLE
2194: LD_INT 1
2196: DEC
2197: ST_TO_ADDR
2198: LD_INT 2
2200: PUSH
2201: LD_INT 2
2203: PUSH
2204: LD_INT 2
2206: PUSH
2207: LD_INT 1
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: PUSH
2216: LD_OWVAR 67
2220: ARRAY
2221: PUSH
2222: FOR_TO
2223: IFFALSE 2307
// begin PrepareHuman ( false , class_soldier , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2225: LD_INT 0
2227: PPUSH
2228: LD_INT 1
2230: PPUSH
2231: LD_INT 9
2233: PUSH
2234: LD_INT 8
2236: PUSH
2237: LD_INT 8
2239: PUSH
2240: LD_INT 7
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: PUSH
2249: LD_OWVAR 67
2253: ARRAY
2254: PPUSH
2255: CALL_OW 380
// un := CreateHuman ;
2259: LD_ADDR_VAR 0 4
2263: PUSH
2264: CALL_OW 44
2268: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2269: LD_VAR 0 4
2273: PPUSH
2274: LD_INT 1
2276: PPUSH
2277: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
2281: LD_INT 35
2283: PPUSH
2284: CALL_OW 67
// until PlaceUnitArea ( un , PlayerSpawn2 , false ) ;
2288: LD_VAR 0 4
2292: PPUSH
2293: LD_INT 24
2295: PPUSH
2296: LD_INT 0
2298: PPUSH
2299: CALL_OW 49
2303: IFFALSE 2281
// end ;
2305: GO 2222
2307: POP
2308: POP
// end ; end_of_file
2309: LD_VAR 0 1
2313: RET
// export function PrepareBurlak ; begin
2314: LD_INT 0
2316: PPUSH
// uc_side := 7 ;
2317: LD_ADDR_OWVAR 20
2321: PUSH
2322: LD_INT 7
2324: ST_TO_ADDR
// uc_nation := 3 ;
2325: LD_ADDR_OWVAR 21
2329: PUSH
2330: LD_INT 3
2332: ST_TO_ADDR
// vc_engine := engine_siberite ;
2333: LD_ADDR_OWVAR 39
2337: PUSH
2338: LD_INT 3
2340: ST_TO_ADDR
// vc_control := control_manual ;
2341: LD_ADDR_OWVAR 38
2345: PUSH
2346: LD_INT 1
2348: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ Difficulty ] ;
2349: LD_ADDR_OWVAR 40
2353: PUSH
2354: LD_INT 44
2356: PUSH
2357: LD_INT 45
2359: PUSH
2360: LD_INT 46
2362: PUSH
2363: LD_INT 46
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: PUSH
2372: LD_OWVAR 67
2376: ARRAY
2377: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
2378: LD_ADDR_OWVAR 37
2382: PUSH
2383: LD_INT 24
2385: ST_TO_ADDR
// Masha := CreateVehicle ;
2386: LD_ADDR_EXP 19
2390: PUSH
2391: CALL_OW 45
2395: ST_TO_ADDR
// SetDir ( Masha , 2 ) ;
2396: LD_EXP 19
2400: PPUSH
2401: LD_INT 2
2403: PPUSH
2404: CALL_OW 233
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2408: LD_EXP 19
2412: PPUSH
2413: LD_INT 3
2415: PPUSH
2416: LD_INT 0
2418: PPUSH
2419: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2423: LD_EXP 19
2427: PPUSH
2428: LD_INT 1
2430: PPUSH
2431: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2435: LD_ADDR_EXP 18
2439: PUSH
2440: LD_STRING Burlak
2442: PPUSH
2443: LD_INT 0
2445: PPUSH
2446: LD_STRING 
2448: PPUSH
2449: CALL 33559 0 3
2453: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2454: LD_EXP 18
2458: PPUSH
2459: LD_EXP 19
2463: PPUSH
2464: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2468: LD_EXP 19
2472: PPUSH
2473: LD_INT 107
2475: PPUSH
2476: LD_INT 118
2478: PPUSH
2479: CALL_OW 114
// spawnBurlak := 1 ;
2483: LD_ADDR_EXP 28
2487: PUSH
2488: LD_INT 1
2490: ST_TO_ADDR
// end ;
2491: LD_VAR 0 1
2495: RET
// export function BurlakArmy ; var i , veh , tmp , bazooka ; begin
2496: LD_INT 0
2498: PPUSH
2499: PPUSH
2500: PPUSH
2501: PPUSH
2502: PPUSH
// uc_side := 7 ;
2503: LD_ADDR_OWVAR 20
2507: PUSH
2508: LD_INT 7
2510: ST_TO_ADDR
// uc_nation := 3 ;
2511: LD_ADDR_OWVAR 21
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
2519: LD_ADDR_EXP 20
2523: PUSH
2524: LD_STRING Gnyevko
2526: PPUSH
2527: LD_INT 0
2529: PPUSH
2530: LD_STRING 
2532: PPUSH
2533: CALL 33559 0 3
2537: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2538: LD_ADDR_EXP 21
2542: PUSH
2543: LD_STRING Titov
2545: PPUSH
2546: LD_INT 0
2548: PPUSH
2549: LD_STRING 
2551: PPUSH
2552: CALL 33559 0 3
2556: ST_TO_ADDR
// Xavier := PrepareUnit ( Xavier2 , false ,  ) ;
2557: LD_ADDR_EXP 22
2561: PUSH
2562: LD_STRING Xavier2
2564: PPUSH
2565: LD_INT 0
2567: PPUSH
2568: LD_STRING 
2570: PPUSH
2571: CALL 33559 0 3
2575: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
2576: LD_ADDR_EXP 23
2580: PUSH
2581: LD_STRING Belkov
2583: PPUSH
2584: LD_INT 0
2586: PPUSH
2587: LD_STRING 
2589: PPUSH
2590: CALL 33559 0 3
2594: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2595: LD_ADDR_EXP 24
2599: PUSH
2600: LD_STRING Lipshchin
2602: PPUSH
2603: LD_INT 0
2605: PPUSH
2606: LD_STRING 
2608: PPUSH
2609: CALL 33559 0 3
2613: ST_TO_ADDR
// for i = 1 to 5 do
2614: LD_ADDR_VAR 0 2
2618: PUSH
2619: DOUBLE
2620: LD_INT 1
2622: DEC
2623: ST_TO_ADDR
2624: LD_INT 5
2626: PUSH
2627: FOR_TO
2628: IFFALSE 2753
// begin vc_engine := engine_siberite ;
2630: LD_ADDR_OWVAR 39
2634: PUSH
2635: LD_INT 3
2637: ST_TO_ADDR
// vc_control := control_manual ;
2638: LD_ADDR_OWVAR 38
2642: PUSH
2643: LD_INT 1
2645: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun , ru_time_lapser ] [ rand ( 1 , 5 ) ] ;
2646: LD_ADDR_OWVAR 40
2650: PUSH
2651: LD_INT 43
2653: PUSH
2654: LD_INT 45
2656: PUSH
2657: LD_INT 45
2659: PUSH
2660: LD_INT 44
2662: PUSH
2663: LD_INT 49
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: LIST
2670: LIST
2671: LIST
2672: PUSH
2673: LD_INT 1
2675: PPUSH
2676: LD_INT 5
2678: PPUSH
2679: CALL_OW 12
2683: ARRAY
2684: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] ;
2685: LD_ADDR_OWVAR 37
2689: PUSH
2690: LD_INT 22
2692: PUSH
2693: LD_INT 22
2695: PUSH
2696: LD_INT 24
2698: PUSH
2699: LD_INT 24
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: PUSH
2708: LD_OWVAR 67
2712: ARRAY
2713: ST_TO_ADDR
// veh = CreateVehicle ;
2714: LD_ADDR_VAR 0 3
2718: PUSH
2719: CALL_OW 45
2723: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2724: LD_VAR 0 3
2728: PPUSH
2729: LD_INT 2
2731: PPUSH
2732: CALL_OW 233
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2736: LD_VAR 0 3
2740: PPUSH
2741: LD_INT 3
2743: PPUSH
2744: LD_INT 0
2746: PPUSH
2747: CALL_OW 49
// end ;
2751: GO 2627
2753: POP
2754: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2755: LD_ADDR_VAR 0 4
2759: PUSH
2760: LD_INT 22
2762: PUSH
2763: LD_INT 7
2765: PUSH
2766: EMPTY
2767: LIST
2768: LIST
2769: PUSH
2770: LD_INT 21
2772: PUSH
2773: LD_INT 2
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: PUSH
2780: LD_INT 58
2782: PUSH
2783: EMPTY
2784: LIST
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: LIST
2790: PPUSH
2791: CALL_OW 69
2795: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2796: LD_EXP 20
2800: PPUSH
2801: LD_VAR 0 4
2805: PUSH
2806: LD_INT 1
2808: ARRAY
2809: PPUSH
2810: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2814: LD_EXP 21
2818: PPUSH
2819: LD_VAR 0 4
2823: PUSH
2824: LD_INT 2
2826: ARRAY
2827: PPUSH
2828: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2832: LD_EXP 22
2836: PPUSH
2837: LD_VAR 0 4
2841: PUSH
2842: LD_INT 3
2844: ARRAY
2845: PPUSH
2846: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2850: LD_EXP 23
2854: PPUSH
2855: LD_VAR 0 4
2859: PUSH
2860: LD_INT 4
2862: ARRAY
2863: PPUSH
2864: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2868: LD_EXP 24
2872: PPUSH
2873: LD_VAR 0 4
2877: PUSH
2878: LD_INT 5
2880: ARRAY
2881: PPUSH
2882: CALL_OW 52
// SetClass ( Gnyevko , class_mechanic ) ;
2886: LD_EXP 20
2890: PPUSH
2891: LD_INT 3
2893: PPUSH
2894: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , class_bazooker ) ;
2898: LD_EXP 21
2902: PUSH
2903: LD_EXP 24
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PPUSH
2912: LD_INT 9
2914: PPUSH
2915: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2919: LD_ADDR_VAR 0 4
2923: PUSH
2924: LD_INT 22
2926: PUSH
2927: LD_INT 7
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: PPUSH
2934: CALL_OW 69
2938: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2939: LD_VAR 0 4
2943: PPUSH
2944: LD_INT 107
2946: PPUSH
2947: LD_INT 118
2949: PPUSH
2950: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2954: LD_INT 35
2956: PPUSH
2957: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) , Masha ) ;
2961: LD_VAR 0 4
2965: PPUSH
2966: LD_INT 34
2968: PUSH
2969: LD_INT 49
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PPUSH
2976: CALL_OW 72
2980: PPUSH
2981: LD_EXP 19
2985: PPUSH
2986: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , 107 , 118 ) ;
2990: LD_VAR 0 4
2994: PPUSH
2995: LD_INT 3
2997: PUSH
2998: LD_INT 34
3000: PUSH
3001: LD_INT 49
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PPUSH
3012: CALL_OW 72
3016: PPUSH
3017: LD_INT 107
3019: PPUSH
3020: LD_INT 118
3022: PPUSH
3023: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3027: LD_ADDR_VAR 0 5
3031: PUSH
3032: LD_EXP 21
3036: PUSH
3037: LD_EXP 24
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PPUSH
3046: LD_INT 50
3048: PUSH
3049: EMPTY
3050: LIST
3051: PUSH
3052: LD_INT 3
3054: PUSH
3055: LD_INT 54
3057: PUSH
3058: EMPTY
3059: LIST
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: EMPTY
3066: LIST
3067: LIST
3068: PPUSH
3069: CALL_OW 72
3073: ST_TO_ADDR
// if bazooka then
3074: LD_VAR 0 5
3078: IFFALSE 3120
// begin for i in bazooka do
3080: LD_ADDR_VAR 0 2
3084: PUSH
3085: LD_VAR 0 5
3089: PUSH
3090: FOR_IN
3091: IFFALSE 3118
// if See ( 1 , i ) then
3093: LD_INT 1
3095: PPUSH
3096: LD_VAR 0 2
3100: PPUSH
3101: CALL_OW 292
3105: IFFALSE 3116
// ComSpaceTimeShoot ( i ) ;
3107: LD_VAR 0 2
3111: PPUSH
3112: CALL 34618 0 1
3116: GO 3090
3118: POP
3119: POP
// end ; until UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) = 0 or IsDying ( Masha ) ;
3120: LD_VAR 0 4
3124: PPUSH
3125: LD_INT 34
3127: PUSH
3128: LD_INT 49
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: PPUSH
3135: CALL_OW 72
3139: PUSH
3140: LD_INT 0
3142: EQUAL
3143: IFTRUE 3156
3145: PUSH
3146: LD_EXP 19
3150: PPUSH
3151: CALL_OW 303
3155: OR
3156: IFFALSE 2954
// repeat wait ( 0 0$1 ) ;
3158: LD_INT 35
3160: PPUSH
3161: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
3165: LD_ADDR_VAR 0 4
3169: PUSH
3170: LD_INT 22
3172: PUSH
3173: LD_INT 7
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PPUSH
3180: CALL_OW 69
3184: PUSH
3185: LD_EXP 18
3189: DIFF
3190: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
3191: LD_VAR 0 4
3195: PPUSH
3196: LD_INT 107
3198: PPUSH
3199: LD_INT 118
3201: PPUSH
3202: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3206: LD_ADDR_VAR 0 5
3210: PUSH
3211: LD_EXP 21
3215: PUSH
3216: LD_EXP 24
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PPUSH
3225: LD_INT 50
3227: PUSH
3228: EMPTY
3229: LIST
3230: PUSH
3231: LD_INT 3
3233: PUSH
3234: LD_INT 54
3236: PUSH
3237: EMPTY
3238: LIST
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PPUSH
3248: CALL_OW 72
3252: ST_TO_ADDR
// if bazooka then
3253: LD_VAR 0 5
3257: IFFALSE 3299
// begin for i in bazooka do
3259: LD_ADDR_VAR 0 2
3263: PUSH
3264: LD_VAR 0 5
3268: PUSH
3269: FOR_IN
3270: IFFALSE 3297
// if See ( 1 , i ) then
3272: LD_INT 1
3274: PPUSH
3275: LD_VAR 0 2
3279: PPUSH
3280: CALL_OW 292
3284: IFFALSE 3295
// ComSpaceTimeShoot ( i ) ;
3286: LD_VAR 0 2
3290: PPUSH
3291: CALL 34618 0 1
3295: GO 3269
3297: POP
3298: POP
// end ; if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
3299: LD_EXP 18
3303: PPUSH
3304: CALL_OW 302
3308: IFFALSE 3322
3310: PUSH
3311: LD_EXP 18
3315: PPUSH
3316: CALL_OW 310
3320: NOT
3321: AND
3322: IFFALSE 3339
// ComMoveXY ( Burlak , 107 , 118 ) ;
3324: LD_EXP 18
3328: PPUSH
3329: LD_INT 107
3331: PPUSH
3332: LD_INT 118
3334: PPUSH
3335: CALL_OW 111
// until not tmp ;
3339: LD_VAR 0 4
3343: NOT
3344: IFFALSE 3158
// end ;
3346: LD_VAR 0 1
3350: RET
// export function PrepareRussianAttack ; var i , un , veh , area , dir ; begin
3351: LD_INT 0
3353: PPUSH
3354: PPUSH
3355: PPUSH
3356: PPUSH
3357: PPUSH
3358: PPUSH
// result := [ ] ;
3359: LD_ADDR_VAR 0 1
3363: PUSH
3364: EMPTY
3365: ST_TO_ADDR
// dir := rand ( 1 , 2 ) ;
3366: LD_ADDR_VAR 0 6
3370: PUSH
3371: LD_INT 1
3373: PPUSH
3374: LD_INT 2
3376: PPUSH
3377: CALL_OW 12
3381: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
3382: LD_ADDR_VAR 0 5
3386: PUSH
3387: LD_INT 8
3389: PUSH
3390: LD_INT 9
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PUSH
3397: LD_VAR 0 6
3401: ARRAY
3402: ST_TO_ADDR
// for i := 1 to [ 6 , 8 , 10 , 11 ] [ Difficulty ] do
3403: LD_ADDR_VAR 0 2
3407: PUSH
3408: DOUBLE
3409: LD_INT 1
3411: DEC
3412: ST_TO_ADDR
3413: LD_INT 6
3415: PUSH
3416: LD_INT 8
3418: PUSH
3419: LD_INT 10
3421: PUSH
3422: LD_INT 11
3424: PUSH
3425: EMPTY
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: PUSH
3431: LD_OWVAR 67
3435: ARRAY
3436: PUSH
3437: FOR_TO
3438: IFFALSE 3676
// begin uc_side := 3 ;
3440: LD_ADDR_OWVAR 20
3444: PUSH
3445: LD_INT 3
3447: ST_TO_ADDR
// uc_nation := 3 ;
3448: LD_ADDR_OWVAR 21
3452: PUSH
3453: LD_INT 3
3455: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] , [ ru_heavy_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] [ rand ( 1 , 5 ) ] , 100 ) ;
3456: LD_INT 24
3458: PPUSH
3459: LD_INT 3
3461: PPUSH
3462: LD_INT 1
3464: PUSH
3465: LD_INT 3
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: PUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 2
3477: PPUSH
3478: CALL_OW 12
3482: ARRAY
3483: PPUSH
3484: LD_INT 46
3486: PUSH
3487: LD_INT 46
3489: PUSH
3490: LD_INT 45
3492: PUSH
3493: LD_INT 47
3495: PUSH
3496: LD_INT 49
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: PUSH
3506: LD_INT 1
3508: PPUSH
3509: LD_INT 5
3511: PPUSH
3512: CALL_OW 12
3516: ARRAY
3517: PPUSH
3518: LD_INT 100
3520: PPUSH
3521: CALL 38545 0 5
// veh := CreateVehicle ;
3525: LD_ADDR_VAR 0 4
3529: PUSH
3530: CALL_OW 45
3534: ST_TO_ADDR
// result := Join ( result , veh ) ;
3535: LD_ADDR_VAR 0 1
3539: PUSH
3540: LD_VAR 0 1
3544: PPUSH
3545: LD_VAR 0 4
3549: PPUSH
3550: CALL 71715 0 2
3554: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
3555: LD_VAR 0 4
3559: PPUSH
3560: LD_INT 3
3562: PUSH
3563: LD_INT 5
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: PUSH
3570: LD_VAR 0 6
3574: ARRAY
3575: PPUSH
3576: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3580: LD_VAR 0 4
3584: PPUSH
3585: LD_VAR 0 5
3589: PPUSH
3590: LD_INT 0
3592: PPUSH
3593: CALL_OW 49
// if vc_control = control_manual then
3597: LD_OWVAR 38
3601: PUSH
3602: LD_INT 1
3604: EQUAL
3605: IFFALSE 3652
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3607: LD_INT 0
3609: PPUSH
3610: LD_INT 7
3612: PUSH
3613: LD_INT 8
3615: PUSH
3616: LD_INT 9
3618: PUSH
3619: LD_INT 10
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: PUSH
3628: LD_OWVAR 67
3632: ARRAY
3633: PPUSH
3634: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3638: CALL_OW 44
3642: PPUSH
3643: LD_VAR 0 4
3647: PPUSH
3648: CALL_OW 52
// end ; wait ( 0 0$0.5 ) ;
3652: LD_INT 18
3654: PPUSH
3655: CALL_OW 67
// ComAgressiveMove ( veh , 100 , 55 ) ;
3659: LD_VAR 0 4
3663: PPUSH
3664: LD_INT 100
3666: PPUSH
3667: LD_INT 55
3669: PPUSH
3670: CALL_OW 114
// end ;
3674: GO 3437
3676: POP
3677: POP
// for i in result do
3678: LD_ADDR_VAR 0 2
3682: PUSH
3683: LD_VAR 0 1
3687: PUSH
3688: FOR_IN
3689: IFFALSE 3705
// SetTag ( i , 10 ) ;
3691: LD_VAR 0 2
3695: PPUSH
3696: LD_INT 10
3698: PPUSH
3699: CALL_OW 109
3703: GO 3688
3705: POP
3706: POP
// RaiseSailEvent ( eventRussianAttack ) ;
3707: LD_EXP 45
3711: PPUSH
3712: CALL_OW 427
// end ; end_of_file
3716: LD_VAR 0 1
3720: RET
// export function DestroySibDeposit ; var un , rnd ; begin
3721: LD_INT 0
3723: PPUSH
3724: PPUSH
3725: PPUSH
// rnd := 0 ;
3726: LD_ADDR_VAR 0 3
3730: PUSH
3731: LD_INT 0
3733: ST_TO_ADDR
// uc_side := 8 ;
3734: LD_ADDR_OWVAR 20
3738: PUSH
3739: LD_INT 8
3741: ST_TO_ADDR
// uc_nation := 2 ;
3742: LD_ADDR_OWVAR 21
3746: PUSH
3747: LD_INT 2
3749: ST_TO_ADDR
// hc_name :=  ;
3750: LD_ADDR_OWVAR 26
3754: PUSH
3755: LD_STRING 
3757: ST_TO_ADDR
// hc_gallery :=  ;
3758: LD_ADDR_OWVAR 33
3762: PUSH
3763: LD_STRING 
3765: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 , 12 ] [ Difficulty ] , [ 10 , 11 , 12 , 12 ] [ Difficulty ] ] ;
3766: LD_ADDR_OWVAR 29
3770: PUSH
3771: LD_INT 10
3773: PUSH
3774: LD_INT 11
3776: PUSH
3777: LD_INT 12
3779: PUSH
3780: LD_INT 12
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: PUSH
3789: LD_OWVAR 67
3793: ARRAY
3794: PUSH
3795: LD_INT 10
3797: PUSH
3798: LD_INT 11
3800: PUSH
3801: LD_INT 12
3803: PUSH
3804: LD_INT 12
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: PUSH
3813: LD_OWVAR 67
3817: ARRAY
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: ST_TO_ADDR
// PrepareHuman ( false , 4 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3823: LD_INT 0
3825: PPUSH
3826: LD_INT 4
3828: PPUSH
3829: LD_INT 7
3831: PUSH
3832: LD_INT 8
3834: PUSH
3835: LD_INT 9
3837: PUSH
3838: LD_INT 10
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: PUSH
3847: LD_OWVAR 67
3851: ARRAY
3852: PPUSH
3853: CALL_OW 380
// un := CreateHuman ;
3857: LD_ADDR_VAR 0 2
3861: PUSH
3862: CALL_OW 44
3866: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3867: LD_VAR 0 2
3871: PPUSH
3872: LD_INT 8
3874: PUSH
3875: LD_INT 9
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PUSH
3882: LD_INT 1
3884: PPUSH
3885: LD_INT 2
3887: PPUSH
3888: CALL_OW 12
3892: ARRAY
3893: PPUSH
3894: LD_INT 0
3896: PPUSH
3897: CALL_OW 49
// SetTag ( un , 1 ) ;
3901: LD_VAR 0 2
3905: PPUSH
3906: LD_INT 1
3908: PPUSH
3909: CALL_OW 109
// rnd := rand ( 1 , sibDeposits ) ;
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: LD_INT 1
3920: PPUSH
3921: LD_EXP 32
3925: PPUSH
3926: CALL_OW 12
3930: ST_TO_ADDR
// RaiseSailEventCustom ( eventContaminate , un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] , 0 , 0 , 0 ) ;
3931: LD_EXP 46
3935: PPUSH
3936: LD_VAR 0 2
3940: PPUSH
3941: LD_EXP 32
3945: PUSH
3946: LD_VAR 0 3
3950: ARRAY
3951: PUSH
3952: LD_INT 1
3954: ARRAY
3955: PPUSH
3956: LD_EXP 32
3960: PUSH
3961: LD_VAR 0 3
3965: ARRAY
3966: PUSH
3967: LD_INT 2
3969: ARRAY
3970: PPUSH
3971: LD_INT 0
3973: PPUSH
3974: LD_INT 0
3976: PPUSH
3977: LD_INT 0
3979: PPUSH
3980: CALL_OW 595
// end ;
3984: LD_VAR 0 1
3988: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do var i ;
3989: LD_INT 22
3991: PUSH
3992: LD_INT 8
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PUSH
3999: LD_INT 3
4001: PUSH
4002: LD_INT 61
4004: PUSH
4005: EMPTY
4006: LIST
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PUSH
4012: LD_INT 50
4014: PUSH
4015: EMPTY
4016: LIST
4017: PUSH
4018: LD_INT 33
4020: PUSH
4021: LD_INT 2
4023: PUSH
4024: EMPTY
4025: LIST
4026: LIST
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: PPUSH
4034: CALL_OW 69
4038: IFFALSE 4125
4040: GO 4042
4042: DISABLE
4043: LD_INT 0
4045: PPUSH
// begin enable ;
4046: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do
4047: LD_ADDR_VAR 0 1
4051: PUSH
4052: LD_INT 22
4054: PUSH
4055: LD_INT 8
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 3
4064: PUSH
4065: LD_INT 61
4067: PUSH
4068: EMPTY
4069: LIST
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PUSH
4075: LD_INT 50
4077: PUSH
4078: EMPTY
4079: LIST
4080: PUSH
4081: LD_INT 33
4083: PUSH
4084: LD_INT 2
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: PPUSH
4097: CALL_OW 69
4101: PUSH
4102: FOR_IN
4103: IFFALSE 4123
// begin wait ( 0 0$0.3 ) ;
4105: LD_INT 10
4107: PPUSH
4108: CALL_OW 67
// Connect ( i ) ;
4112: LD_VAR 0 1
4116: PPUSH
4117: CALL 42027 0 1
// end ;
4121: GO 4102
4123: POP
4124: POP
// end ;
4125: PPOPN 1
4127: END
// export function PrepareArabianAttack ; var i , veh , xy , un , area , counter , tmp , dir ; begin
4128: LD_INT 0
4130: PPUSH
4131: PPUSH
4132: PPUSH
4133: PPUSH
4134: PPUSH
4135: PPUSH
4136: PPUSH
4137: PPUSH
4138: PPUSH
// result := [ ] ;
4139: LD_ADDR_VAR 0 1
4143: PUSH
4144: EMPTY
4145: ST_TO_ADDR
// arabianAttacksCounter := arabianAttacksCounter + 1 ;
4146: LD_ADDR_EXP 34
4150: PUSH
4151: LD_EXP 34
4155: PUSH
4156: LD_INT 1
4158: PLUS
4159: ST_TO_ADDR
// xy := [ ctArea1 , ctArea2 , ctArea3 , ctArea4 ] ;
4160: LD_ADDR_VAR 0 4
4164: PUSH
4165: LD_INT 19
4167: PUSH
4168: LD_INT 20
4170: PUSH
4171: LD_INT 21
4173: PUSH
4174: LD_INT 22
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
4183: LD_INT 22
4185: PUSH
4186: LD_INT 8
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 3
4195: PUSH
4196: LD_INT 58
4198: PUSH
4199: EMPTY
4200: LIST
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: LD_INT 34
4208: PUSH
4209: LD_INT 31
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: LIST
4220: PPUSH
4221: CALL_OW 69
4225: PUSH
4226: LD_INT 2
4228: LESS
4229: IFFALSE 4534
// begin uc_side := 8 ;
4231: LD_ADDR_OWVAR 20
4235: PUSH
4236: LD_INT 8
4238: ST_TO_ADDR
// uc_nation := 2 ;
4239: LD_ADDR_OWVAR 21
4243: PUSH
4244: LD_INT 2
4246: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
4247: LD_INT 14
4249: PPUSH
4250: LD_INT 3
4252: PPUSH
4253: LD_INT 1
4255: PPUSH
4256: LD_INT 31
4258: PPUSH
4259: LD_INT 100
4261: PPUSH
4262: CALL 38545 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
4266: LD_ADDR_VAR 0 2
4270: PUSH
4271: DOUBLE
4272: LD_INT 22
4274: PUSH
4275: LD_INT 8
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PUSH
4282: LD_INT 3
4284: PUSH
4285: LD_INT 58
4287: PUSH
4288: EMPTY
4289: LIST
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: PUSH
4295: LD_INT 34
4297: PUSH
4298: LD_INT 31
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: EMPTY
4306: LIST
4307: LIST
4308: LIST
4309: PPUSH
4310: CALL_OW 69
4314: PUSH
4315: LD_INT 1
4317: PLUS
4318: DEC
4319: ST_TO_ADDR
4320: LD_INT 2
4322: PUSH
4323: FOR_TO
4324: IFFALSE 4532
// begin veh := CreateVehicle ;
4326: LD_ADDR_VAR 0 3
4330: PUSH
4331: CALL_OW 45
4335: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
4336: LD_VAR 0 3
4340: PPUSH
4341: LD_INT 0
4343: PPUSH
4344: LD_INT 5
4346: PPUSH
4347: CALL_OW 12
4351: PPUSH
4352: CALL_OW 233
// xy := Delete ( xy , rand ( 1 , Count ( xy ) ) ) ;
4356: LD_ADDR_VAR 0 4
4360: PUSH
4361: LD_VAR 0 4
4365: PPUSH
4366: LD_INT 1
4368: PPUSH
4369: LD_VAR 0 4
4373: PPUSH
4374: CALL 35783 0 1
4378: PPUSH
4379: CALL_OW 12
4383: PPUSH
4384: CALL_OW 3
4388: ST_TO_ADDR
// area := xy [ rand ( 1 , Count ( xy ) ) ] ;
4389: LD_ADDR_VAR 0 6
4393: PUSH
4394: LD_VAR 0 4
4398: PUSH
4399: LD_INT 1
4401: PPUSH
4402: LD_VAR 0 4
4406: PPUSH
4407: CALL 35783 0 1
4411: PPUSH
4412: CALL_OW 12
4416: ARRAY
4417: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_ok ] ) then
4418: LD_VAR 0 6
4422: PPUSH
4423: LD_INT 50
4425: PUSH
4426: EMPTY
4427: LIST
4428: PPUSH
4429: CALL_OW 70
4433: IFFALSE 4443
// area := ctAreaExtra ;
4435: LD_ADDR_VAR 0 6
4439: PUSH
4440: LD_INT 23
4442: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4443: LD_VAR 0 3
4447: PPUSH
4448: LD_VAR 0 6
4452: PPUSH
4453: LD_INT 0
4455: PPUSH
4456: CALL_OW 49
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4460: LD_INT 0
4462: PPUSH
4463: LD_INT 7
4465: PUSH
4466: LD_INT 9
4468: PUSH
4469: LD_INT 10
4471: PUSH
4472: LD_INT 10
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: PUSH
4481: LD_OWVAR 67
4485: ARRAY
4486: PPUSH
4487: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4491: CALL_OW 44
4495: PPUSH
4496: LD_VAR 0 3
4500: PPUSH
4501: CALL_OW 52
// if area = ctAreaExtra then
4505: LD_VAR 0 6
4509: PUSH
4510: LD_INT 23
4512: EQUAL
4513: IFFALSE 4530
// ComMoveXY ( veh , 73 , 21 ) ;
4515: LD_VAR 0 3
4519: PPUSH
4520: LD_INT 73
4522: PPUSH
4523: LD_INT 21
4525: PPUSH
4526: CALL_OW 111
// end ;
4530: GO 4323
4532: POP
4533: POP
// end ; dir := rand ( 1 , 2 ) ;
4534: LD_ADDR_VAR 0 9
4538: PUSH
4539: LD_INT 1
4541: PPUSH
4542: LD_INT 2
4544: PPUSH
4545: CALL_OW 12
4549: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
4550: LD_ADDR_VAR 0 6
4554: PUSH
4555: LD_INT 8
4557: PUSH
4558: LD_INT 9
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: PUSH
4565: LD_VAR 0 9
4569: ARRAY
4570: ST_TO_ADDR
// counter := [ 6 , 8 , 10 , 11 ] [ Difficulty ] + arabianAttacksCounter ;
4571: LD_ADDR_VAR 0 7
4575: PUSH
4576: LD_INT 6
4578: PUSH
4579: LD_INT 8
4581: PUSH
4582: LD_INT 10
4584: PUSH
4585: LD_INT 11
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: PUSH
4594: LD_OWVAR 67
4598: ARRAY
4599: PUSH
4600: LD_EXP 34
4604: PLUS
4605: ST_TO_ADDR
// if counter > 20 then
4606: LD_VAR 0 7
4610: PUSH
4611: LD_INT 20
4613: GREATER
4614: IFFALSE 4624
// counter := 20 ;
4616: LD_ADDR_VAR 0 7
4620: PUSH
4621: LD_INT 20
4623: ST_TO_ADDR
// for i := 1 to counter do
4624: LD_ADDR_VAR 0 2
4628: PUSH
4629: DOUBLE
4630: LD_INT 1
4632: DEC
4633: ST_TO_ADDR
4634: LD_VAR 0 7
4638: PUSH
4639: FOR_TO
4640: IFFALSE 4975
// begin uc_side := 8 ;
4642: LD_ADDR_OWVAR 20
4646: PUSH
4647: LD_INT 8
4649: ST_TO_ADDR
// uc_nation := 2 ;
4650: LD_ADDR_OWVAR 21
4654: PUSH
4655: LD_INT 2
4657: ST_TO_ADDR
// PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] , [ ar_gun , ar_rocket_launcher , ar_gun , ar_mortar , ar_selfpropelled_bomb , ar_gatling_gun ] [ rand ( 1 , 6 ) ] , 100 ) ;
4658: LD_INT 13
4660: PUSH
4661: LD_INT 14
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PUSH
4668: LD_INT 1
4670: PPUSH
4671: LD_INT 2
4673: PPUSH
4674: CALL_OW 12
4678: ARRAY
4679: PPUSH
4680: LD_INT 3
4682: PPUSH
4683: LD_INT 1
4685: PUSH
4686: LD_INT 2
4688: PUSH
4689: LD_INT 5
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: LIST
4696: PUSH
4697: LD_INT 1
4699: PPUSH
4700: LD_INT 3
4702: PPUSH
4703: CALL_OW 12
4707: ARRAY
4708: PPUSH
4709: LD_INT 27
4711: PUSH
4712: LD_INT 28
4714: PUSH
4715: LD_INT 27
4717: PUSH
4718: LD_INT 92
4720: PUSH
4721: LD_INT 29
4723: PUSH
4724: LD_INT 25
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: PUSH
4735: LD_INT 1
4737: PPUSH
4738: LD_INT 6
4740: PPUSH
4741: CALL_OW 12
4745: ARRAY
4746: PPUSH
4747: LD_INT 100
4749: PPUSH
4750: CALL 38545 0 5
// if vc_weapon = ar_selfpropelled_bomb then
4754: LD_OWVAR 40
4758: PUSH
4759: LD_INT 29
4761: EQUAL
4762: IFFALSE 4772
// vc_control := control_remote ;
4764: LD_ADDR_OWVAR 38
4768: PUSH
4769: LD_INT 2
4771: ST_TO_ADDR
// veh := CreateVehicle ;
4772: LD_ADDR_VAR 0 3
4776: PUSH
4777: CALL_OW 45
4781: ST_TO_ADDR
// result := Join ( result , veh ) ;
4782: LD_ADDR_VAR 0 1
4786: PUSH
4787: LD_VAR 0 1
4791: PPUSH
4792: LD_VAR 0 3
4796: PPUSH
4797: CALL 71715 0 2
4801: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
4802: LD_VAR 0 3
4806: PPUSH
4807: LD_INT 3
4809: PUSH
4810: LD_INT 5
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: PUSH
4817: LD_VAR 0 9
4821: ARRAY
4822: PPUSH
4823: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
4827: LD_VAR 0 3
4831: PPUSH
4832: LD_VAR 0 6
4836: PPUSH
4837: LD_INT 0
4839: PPUSH
4840: CALL_OW 49
// if vc_control = control_manual then
4844: LD_OWVAR 38
4848: PUSH
4849: LD_INT 1
4851: EQUAL
4852: IFFALSE 4899
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4854: LD_INT 0
4856: PPUSH
4857: LD_INT 7
4859: PUSH
4860: LD_INT 8
4862: PUSH
4863: LD_INT 9
4865: PUSH
4866: LD_INT 10
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: PUSH
4875: LD_OWVAR 67
4879: ARRAY
4880: PPUSH
4881: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4885: CALL_OW 44
4889: PPUSH
4890: LD_VAR 0 3
4894: PPUSH
4895: CALL_OW 52
// end ; wait ( 0 0$0.3 ) ;
4899: LD_INT 10
4901: PPUSH
4902: CALL_OW 67
// if GetControl ( veh ) = control_remote and not IsControledBy ( veh ) then
4906: LD_VAR 0 3
4910: PPUSH
4911: CALL_OW 263
4915: PUSH
4916: LD_INT 2
4918: EQUAL
4919: IFFALSE 4933
4921: PUSH
4922: LD_VAR 0 3
4926: PPUSH
4927: CALL_OW 312
4931: NOT
4932: AND
4933: IFFALSE 4951
// begin Connect ( veh ) ;
4935: LD_VAR 0 3
4939: PPUSH
4940: CALL 42027 0 1
// wait ( 0 0$0.3 ) ;
4944: LD_INT 10
4946: PPUSH
4947: CALL_OW 67
// end ; ComAgressiveMove ( veh , 100 , 55 ) ;
4951: LD_VAR 0 3
4955: PPUSH
4956: LD_INT 100
4958: PPUSH
4959: LD_INT 55
4961: PPUSH
4962: CALL_OW 114
// wait ( 0 0$0.5 ) ;
4966: LD_INT 18
4968: PPUSH
4969: CALL_OW 67
// end ;
4973: GO 4639
4975: POP
4976: POP
// if arabianAttacksCounter = 1 then
4977: LD_EXP 34
4981: PUSH
4982: LD_INT 1
4984: EQUAL
4985: IFFALSE 4991
// DestroySibDeposit ;
4987: CALL 3721 0 0
// if arabianAttacksCounter mod [ 4 , 3 , 3 , 2 ] [ Difficulty ] = 0 then
4991: LD_EXP 34
4995: PUSH
4996: LD_INT 4
4998: PUSH
4999: LD_INT 3
5001: PUSH
5002: LD_INT 3
5004: PUSH
5005: LD_INT 2
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: PUSH
5014: LD_OWVAR 67
5018: ARRAY
5019: MOD
5020: PUSH
5021: LD_INT 0
5023: EQUAL
5024: IFFALSE 5382
// begin tmp := rand ( 0 , 2 ) ;
5026: LD_ADDR_VAR 0 8
5030: PUSH
5031: LD_INT 0
5033: PPUSH
5034: LD_INT 2
5036: PPUSH
5037: CALL_OW 12
5041: ST_TO_ADDR
// if not tmp then
5042: LD_VAR 0 8
5046: NOT
5047: IFFALSE 5208
// begin for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] do
5049: LD_ADDR_VAR 0 2
5053: PUSH
5054: DOUBLE
5055: LD_INT 1
5057: DEC
5058: ST_TO_ADDR
5059: LD_INT 3
5061: PUSH
5062: LD_INT 4
5064: PUSH
5065: LD_INT 4
5067: PUSH
5068: LD_INT 5
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: PUSH
5077: LD_OWVAR 67
5081: ARRAY
5082: PUSH
5083: FOR_TO
5084: IFFALSE 5204
// begin uc_side := 8 ;
5086: LD_ADDR_OWVAR 20
5090: PUSH
5091: LD_INT 8
5093: ST_TO_ADDR
// uc_nation := 2 ;
5094: LD_ADDR_OWVAR 21
5098: PUSH
5099: LD_INT 2
5101: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5102: LD_INT 0
5104: PPUSH
5105: LD_INT 1
5107: PPUSH
5108: LD_INT 7
5110: PUSH
5111: LD_INT 8
5113: PUSH
5114: LD_INT 9
5116: PUSH
5117: LD_INT 10
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: PUSH
5126: LD_OWVAR 67
5130: ARRAY
5131: PPUSH
5132: CALL_OW 380
// un := CreateHuman ;
5136: LD_ADDR_VAR 0 5
5140: PUSH
5141: CALL_OW 44
5145: ST_TO_ADDR
// result := Join ( result , un ) ;
5146: LD_ADDR_VAR 0 1
5150: PUSH
5151: LD_VAR 0 1
5155: PPUSH
5156: LD_VAR 0 5
5160: PPUSH
5161: CALL 71715 0 2
5165: ST_TO_ADDR
// if Prob ( 60 ) then
5166: LD_INT 60
5168: PPUSH
5169: CALL_OW 13
5173: IFFALSE 5187
// SetClass ( un , class_mortar ) ;
5175: LD_VAR 0 5
5179: PPUSH
5180: LD_INT 8
5182: PPUSH
5183: CALL_OW 336
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5187: LD_VAR 0 5
5191: PPUSH
5192: LD_INT 16
5194: PPUSH
5195: LD_INT 0
5197: PPUSH
5198: CALL_OW 49
// end ;
5202: GO 5083
5204: POP
5205: POP
// end else
5206: GO 5372
// begin for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
5208: LD_ADDR_VAR 0 2
5212: PUSH
5213: DOUBLE
5214: LD_INT 1
5216: DEC
5217: ST_TO_ADDR
5218: LD_INT 2
5220: PUSH
5221: LD_INT 3
5223: PUSH
5224: LD_INT 3
5226: PUSH
5227: LD_INT 4
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: PUSH
5236: LD_OWVAR 67
5240: ARRAY
5241: PUSH
5242: FOR_TO
5243: IFFALSE 5370
// begin uc_side := 8 ;
5245: LD_ADDR_OWVAR 20
5249: PUSH
5250: LD_INT 8
5252: ST_TO_ADDR
// uc_nation := 0 ;
5253: LD_ADDR_OWVAR 21
5257: PUSH
5258: LD_INT 0
5260: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
5261: LD_ADDR_OWVAR 28
5265: PUSH
5266: LD_INT 17
5268: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
5269: LD_ADDR_OWVAR 31
5273: PUSH
5274: LD_INT 3
5276: PUSH
5277: LD_INT 0
5279: PUSH
5280: LD_INT 0
5282: PUSH
5283: LD_INT 0
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5292: LD_ADDR_OWVAR 29
5296: PUSH
5297: LD_INT 10
5299: PUSH
5300: LD_INT 10
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: ST_TO_ADDR
// hc_gallery :=  ;
5307: LD_ADDR_OWVAR 33
5311: PUSH
5312: LD_STRING 
5314: ST_TO_ADDR
// hc_name :=  ;
5315: LD_ADDR_OWVAR 26
5319: PUSH
5320: LD_STRING 
5322: ST_TO_ADDR
// un := CreateHuman ;
5323: LD_ADDR_VAR 0 5
5327: PUSH
5328: CALL_OW 44
5332: ST_TO_ADDR
// result := Join ( result , un ) ;
5333: LD_ADDR_VAR 0 1
5337: PUSH
5338: LD_VAR 0 1
5342: PPUSH
5343: LD_VAR 0 5
5347: PPUSH
5348: CALL 71715 0 2
5352: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5353: LD_VAR 0 5
5357: PPUSH
5358: LD_INT 16
5360: PPUSH
5361: LD_INT 0
5363: PPUSH
5364: CALL_OW 49
// end ;
5368: GO 5242
5370: POP
5371: POP
// end ; if sibDeposits then
5372: LD_EXP 32
5376: IFFALSE 5382
// DestroySibDeposit ;
5378: CALL 3721 0 0
// end ; for i in result do
5382: LD_ADDR_VAR 0 2
5386: PUSH
5387: LD_VAR 0 1
5391: PUSH
5392: FOR_IN
5393: IFFALSE 5409
// SetTag ( i , 10 ) ;
5395: LD_VAR 0 2
5399: PPUSH
5400: LD_INT 10
5402: PPUSH
5403: CALL_OW 109
5407: GO 5392
5409: POP
5410: POP
// RaiseSailEvent ( eventArabianAttack ) ;
5411: LD_EXP 44
5415: PPUSH
5416: CALL_OW 427
// end ; end_of_file
5420: LD_VAR 0 1
5424: RET
// export function Action ; var tmp ; begin
5425: LD_INT 0
5427: PPUSH
5428: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
5429: LD_ADDR_VAR 0 2
5433: PUSH
5434: LD_INT 22
5436: PUSH
5437: LD_INT 1
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PUSH
5444: LD_INT 21
5446: PUSH
5447: LD_INT 2
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: ST_TO_ADDR
// InGameOn ;
5463: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
5467: LD_VAR 0 2
5471: PPUSH
5472: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
5476: LD_INT 22
5478: PUSH
5479: LD_INT 1
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: LD_INT 21
5488: PUSH
5489: LD_INT 2
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: PPUSH
5500: CALL_OW 69
5504: PPUSH
5505: LD_INT 69
5507: PPUSH
5508: LD_INT 94
5510: PPUSH
5511: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
5515: LD_EXP 1
5519: PPUSH
5520: LD_STRING D2-JMM-1
5522: PPUSH
5523: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5527: LD_VAR 0 2
5531: PPUSH
5532: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
5536: LD_EXP 2
5540: PPUSH
5541: LD_STRING D2-Huck-1
5543: PPUSH
5544: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5548: LD_VAR 0 2
5552: PPUSH
5553: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
5557: LD_EXP 1
5561: PPUSH
5562: LD_STRING D2-JMM-2
5564: PPUSH
5565: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5569: LD_VAR 0 2
5573: PPUSH
5574: CALL_OW 87
// InGameOff ;
5578: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5582: LD_STRING M1
5584: PPUSH
5585: CALL_OW 337
// SaveForQuickRestart ;
5589: CALL_OW 22
// wait ( 10 10$00 ) ;
5593: LD_INT 21000
5595: PPUSH
5596: CALL_OW 67
// DialogueOn ;
5600: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
5604: LD_EXP 16
5608: PPUSH
5609: LD_STRING D3-Pow-1
5611: PPUSH
5612: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
5616: LD_EXP 1
5620: PPUSH
5621: LD_STRING D3-JMM-1
5623: PPUSH
5624: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
5628: LD_EXP 16
5632: PPUSH
5633: LD_STRING D3-Pow-2
5635: PPUSH
5636: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
5640: LD_EXP 1
5644: PPUSH
5645: LD_STRING D3-JMM-2
5647: PPUSH
5648: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
5652: LD_EXP 16
5656: PPUSH
5657: LD_STRING D3-Pow-3
5659: PPUSH
5660: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
5664: LD_EXP 1
5668: PPUSH
5669: LD_STRING D3-JMM-3
5671: PPUSH
5672: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
5676: LD_EXP 16
5680: PPUSH
5681: LD_STRING D3-Pow-4
5683: PPUSH
5684: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
5688: LD_EXP 1
5692: PPUSH
5693: LD_STRING D3-JMM-4
5695: PPUSH
5696: CALL_OW 88
// DialogueOff ;
5700: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5704: LD_STRING M2
5706: PPUSH
5707: CALL_OW 337
// wait ( 2 2$30 ) ;
5711: LD_INT 5250
5713: PPUSH
5714: CALL_OW 67
// PrepareBurlak ;
5718: CALL 2314 0 0
// BurlakArmy ;
5722: CALL 2496 0 0
// end ;
5726: LD_VAR 0 1
5730: RET
// every 0 0$1 trigger See ( 1 , Masha ) do
5731: LD_INT 1
5733: PPUSH
5734: LD_EXP 19
5738: PPUSH
5739: CALL_OW 292
5743: IFFALSE 5902
5745: GO 5747
5747: DISABLE
// begin DialogueOn ;
5748: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
5752: LD_EXP 19
5756: PPUSH
5757: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
5761: LD_INT 22
5763: PUSH
5764: LD_INT 1
5766: PUSH
5767: EMPTY
5768: LIST
5769: LIST
5770: PUSH
5771: LD_INT 26
5773: PUSH
5774: LD_INT 1
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PUSH
5781: LD_INT 2
5783: PUSH
5784: LD_INT 25
5786: PUSH
5787: LD_INT 1
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PUSH
5794: LD_INT 25
5796: PUSH
5797: LD_INT 2
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: PUSH
5804: LD_INT 25
5806: PUSH
5807: LD_INT 3
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: PUSH
5814: LD_INT 25
5816: PUSH
5817: LD_INT 4
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PUSH
5824: LD_INT 25
5826: PUSH
5827: LD_INT 5
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: LIST
5846: PPUSH
5847: CALL_OW 69
5851: PPUSH
5852: LD_STRING D5-Sol1-1
5854: PPUSH
5855: LD_STRING D5-FSol1-1
5857: PPUSH
5858: CALL 8412 0 3
// Say ( JMM , D5-JMM-1 ) ;
5862: LD_EXP 1
5866: PPUSH
5867: LD_STRING D5-JMM-1
5869: PPUSH
5870: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
5874: LD_EXP 18
5878: PPUSH
5879: LD_STRING DAmer-Bur-1
5881: PPUSH
5882: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
5886: LD_EXP 1
5890: PPUSH
5891: LD_STRING DAmer-JMM-1
5893: PPUSH
5894: CALL_OW 88
// DialogueOff ;
5898: CALL_OW 7
// end ;
5902: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
5903: LD_INT 4
5905: PPUSH
5906: LD_INT 22
5908: PUSH
5909: LD_INT 7
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PPUSH
5916: CALL_OW 70
5920: IFFALSE 6323
5922: GO 5924
5924: DISABLE
5925: LD_INT 0
5927: PPUSH
// begin enable ;
5928: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
5929: LD_ADDR_VAR 0 1
5933: PUSH
5934: LD_INT 4
5936: PPUSH
5937: LD_INT 22
5939: PUSH
5940: LD_INT 7
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PPUSH
5947: CALL_OW 70
5951: PUSH
5952: FOR_IN
5953: IFFALSE 6321
// begin if i = Burlak or i = Masha then
5955: LD_VAR 0 1
5959: PUSH
5960: LD_EXP 18
5964: EQUAL
5965: IFTRUE 5979
5967: PUSH
5968: LD_VAR 0 1
5972: PUSH
5973: LD_EXP 19
5977: EQUAL
5978: OR
5979: IFFALSE 6126
// begin RemoveUnit ( i ) ;
5981: LD_VAR 0 1
5985: PPUSH
5986: CALL_OW 64
// DialogueOn ;
5990: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
5994: LD_EXP 1
5998: PPUSH
5999: LD_STRING D5a-JMM-1
6001: PPUSH
6002: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
6006: LD_INT 22
6008: PUSH
6009: LD_INT 1
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PUSH
6016: LD_INT 26
6018: PUSH
6019: LD_INT 1
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: LD_INT 2
6028: PUSH
6029: LD_INT 25
6031: PUSH
6032: LD_INT 1
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: PUSH
6039: LD_INT 25
6041: PUSH
6042: LD_INT 2
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: PUSH
6049: LD_INT 25
6051: PUSH
6052: LD_INT 3
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: PUSH
6059: LD_INT 25
6061: PUSH
6062: LD_INT 4
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 25
6071: PUSH
6072: LD_INT 5
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: LIST
6091: PPUSH
6092: CALL_OW 69
6096: PPUSH
6097: LD_STRING D5a-Sol1-1
6099: PPUSH
6100: LD_STRING D5-FSol1-1
6102: PPUSH
6103: CALL 8412 0 3
// DialogueOff ;
6107: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
6111: LD_STRING M2b
6113: PPUSH
6114: CALL_OW 337
// spawnBurlak = 0 ;
6118: LD_ADDR_EXP 28
6122: PUSH
6123: LD_INT 0
6125: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
6126: LD_VAR 0 1
6130: PPUSH
6131: CALL_OW 247
6135: PUSH
6136: LD_INT 2
6138: EQUAL
6139: IFFALSE 6156
6141: PUSH
6142: LD_VAR 0 1
6146: PPUSH
6147: CALL_OW 263
6151: PUSH
6152: LD_INT 1
6154: EQUAL
6155: AND
6156: IFFALSE 6284
// begin case IsDrivenBy ( i ) of Gnyevko :
6158: LD_VAR 0 1
6162: PPUSH
6163: CALL_OW 311
6167: PUSH
6168: LD_EXP 20
6172: DOUBLE
6173: EQUAL
6174: IFTRUE 6178
6176: GO 6191
6178: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
6179: LD_INT 1
6181: PPUSH
6182: LD_STRING 13_Gnyevko_1
6184: PPUSH
6185: CALL_OW 39
6189: GO 6284
6191: LD_EXP 21
6195: DOUBLE
6196: EQUAL
6197: IFTRUE 6201
6199: GO 6214
6201: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
6202: LD_INT 1
6204: PPUSH
6205: LD_STRING 13_Titov_1
6207: PPUSH
6208: CALL_OW 39
6212: GO 6284
6214: LD_EXP 22
6218: DOUBLE
6219: EQUAL
6220: IFTRUE 6224
6222: GO 6237
6224: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
6225: LD_INT 1
6227: PPUSH
6228: LD_STRING 13_Xavier_1
6230: PPUSH
6231: CALL_OW 39
6235: GO 6284
6237: LD_EXP 23
6241: DOUBLE
6242: EQUAL
6243: IFTRUE 6247
6245: GO 6260
6247: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
6248: LD_INT 1
6250: PPUSH
6251: LD_STRING 13_Belkov_1
6253: PPUSH
6254: CALL_OW 39
6258: GO 6284
6260: LD_EXP 24
6264: DOUBLE
6265: EQUAL
6266: IFTRUE 6270
6268: GO 6283
6270: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
6271: LD_INT 1
6273: PPUSH
6274: LD_STRING 13_Lipshchin_1
6276: PPUSH
6277: CALL_OW 39
6281: GO 6284
6283: POP
// end ; if GetWeapon ( i ) = ru_time_lapser then
6284: LD_VAR 0 1
6288: PPUSH
6289: CALL_OW 264
6293: PUSH
6294: LD_INT 49
6296: EQUAL
6297: IFFALSE 6310
// DestroyUnit ( i ) else
6299: LD_VAR 0 1
6303: PPUSH
6304: CALL_OW 65
6308: GO 6319
// RemoveUnit ( i ) ;
6310: LD_VAR 0 1
6314: PPUSH
6315: CALL_OW 64
// end ;
6319: GO 5952
6321: POP
6322: POP
// end ;
6323: PPOPN 1
6325: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
6326: LD_EXP 18
6330: PPUSH
6331: CALL_OW 302
6335: IFFALSE 6352
6337: PUSH
6338: LD_EXP 19
6342: PPUSH
6343: CALL_OW 256
6347: PUSH
6348: LD_INT 500
6350: LESS
6351: AND
6352: IFFALSE 6369
6354: PUSH
6355: LD_EXP 19
6359: PPUSH
6360: CALL_OW 255
6364: PUSH
6365: LD_INT 7
6367: EQUAL
6368: AND
6369: IFFALSE 6389
6371: GO 6373
6373: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
6374: LD_EXP 18
6378: PPUSH
6379: LD_INT 107
6381: PPUSH
6382: LD_INT 118
6384: PPUSH
6385: CALL_OW 111
6389: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
6390: LD_EXP 18
6394: PPUSH
6395: CALL_OW 301
6399: IFFALSE 6411
6401: PUSH
6402: LD_EXP 28
6406: PUSH
6407: LD_INT 1
6409: EQUAL
6410: AND
6411: IFFALSE 6544
6413: GO 6415
6415: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
6416: LD_EXP 1
6420: PPUSH
6421: LD_STRING D5b-JMM-1
6423: PPUSH
6424: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
6428: LD_INT 22
6430: PUSH
6431: LD_INT 1
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PUSH
6438: LD_INT 26
6440: PUSH
6441: LD_INT 1
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PUSH
6448: LD_INT 2
6450: PUSH
6451: LD_INT 25
6453: PUSH
6454: LD_INT 1
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 25
6463: PUSH
6464: LD_INT 2
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_INT 25
6473: PUSH
6474: LD_INT 3
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 25
6483: PUSH
6484: LD_INT 4
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PUSH
6491: LD_INT 25
6493: PUSH
6494: LD_INT 5
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: LIST
6513: PPUSH
6514: CALL_OW 69
6518: PPUSH
6519: LD_STRING D5b-Sol1-1
6521: PPUSH
6522: LD_STRING 
6524: PPUSH
6525: CALL 8412 0 3
// ChangeMissionObjectives ( M2a ) ;
6529: LD_STRING M2a
6531: PPUSH
6532: CALL_OW 337
// burlakStatus := 1 ;
6536: LD_ADDR_EXP 29
6540: PUSH
6541: LD_INT 1
6543: ST_TO_ADDR
// end ;
6544: END
// every 0 0$1 trigger IsDead ( Stevens ) do
6545: LD_EXP 2
6549: PPUSH
6550: CALL_OW 301
6554: IFFALSE 6691
6556: GO 6558
6558: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
6559: LD_EXP 1
6563: PPUSH
6564: LD_STRING D6-JMM-1
6566: PPUSH
6567: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
6571: LD_INT 22
6573: PUSH
6574: LD_INT 1
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PUSH
6581: LD_INT 26
6583: PUSH
6584: LD_INT 1
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: LD_INT 2
6593: PUSH
6594: LD_INT 25
6596: PUSH
6597: LD_INT 1
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 25
6606: PUSH
6607: LD_INT 2
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: LD_INT 25
6616: PUSH
6617: LD_INT 3
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: PUSH
6624: LD_INT 25
6626: PUSH
6627: LD_INT 4
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: LD_INT 25
6636: PUSH
6637: LD_INT 5
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: LIST
6656: PPUSH
6657: CALL_OW 69
6661: PPUSH
6662: LD_STRING D6-Sol1-1
6664: PPUSH
6665: LD_STRING 
6667: PPUSH
6668: CALL 8412 0 3
// Say ( JMM , D6-JMM-2 ) ;
6672: LD_EXP 1
6676: PPUSH
6677: LD_STRING D6-JMM-2
6679: PPUSH
6680: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
6684: LD_STRING M1a
6686: PPUSH
6687: CALL_OW 337
// end ;
6691: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
6692: LD_INT 25
6694: PPUSH
6695: LD_INT 1
6697: PPUSH
6698: CALL_OW 321
6702: PUSH
6703: LD_INT 2
6705: EQUAL
6706: IFFALSE 6723
6708: GO 6710
6710: DISABLE
// Say ( Stevens , D6-Huck-2 ) ;
6711: LD_EXP 2
6715: PPUSH
6716: LD_STRING D6-Huck-2
6718: PPUSH
6719: CALL_OW 88
6723: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_warehouse ] , [ f_not , [ f_constructed ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] , [ f_not , [ f_constructed ] ] ] ) do
6724: LD_INT 22
6726: PUSH
6727: LD_INT 1
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: PUSH
6734: LD_INT 2
6736: PUSH
6737: LD_INT 34
6739: PUSH
6740: LD_INT 8
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PUSH
6747: LD_INT 35
6749: PUSH
6750: LD_INT 8
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: LIST
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PPUSH
6766: CALL_OW 69
6770: IFFALSE 6830
6772: PUSH
6773: LD_INT 5
6775: PPUSH
6776: LD_INT 22
6778: PUSH
6779: LD_INT 1
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: PUSH
6786: LD_INT 21
6788: PUSH
6789: LD_INT 3
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PUSH
6796: LD_INT 30
6798: PUSH
6799: LD_INT 1
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 3
6808: PUSH
6809: LD_INT 57
6811: PUSH
6812: EMPTY
6813: LIST
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: PPUSH
6825: CALL_OW 70
6829: AND
6830: IFFALSE 6890
6832: PUSH
6833: LD_INT 5
6835: PPUSH
6836: LD_INT 22
6838: PUSH
6839: LD_INT 1
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: LD_INT 21
6848: PUSH
6849: LD_INT 3
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 30
6858: PUSH
6859: LD_INT 5
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 3
6868: PUSH
6869: LD_INT 57
6871: PUSH
6872: EMPTY
6873: LIST
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: PPUSH
6885: CALL_OW 70
6889: AND
6890: IFFALSE 6932
6892: GO 6894
6894: DISABLE
// begin DialogueOn ;
6895: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6899: LD_EXP 1
6903: PPUSH
6904: LD_STRING D7-JMM-1
6906: PPUSH
6907: CALL_OW 88
// DialogueOff ;
6911: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
6915: LD_STRING M4
6917: PPUSH
6918: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
6922: LD_INT 5
6924: PPUSH
6925: LD_INT 0
6927: PPUSH
6928: CALL_OW 424
// end ;
6932: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) and eventVar3 = 1 and radationResearched = 0 do
6933: LD_INT 6
6935: PPUSH
6936: LD_INT 22
6938: PUSH
6939: LD_INT 1
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 25
6948: PUSH
6949: LD_INT 4
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PPUSH
6960: CALL_OW 70
6964: IFFALSE 6976
6966: PUSH
6967: LD_EXP 38
6971: PUSH
6972: LD_INT 1
6974: EQUAL
6975: AND
6976: IFFALSE 6988
6978: PUSH
6979: LD_EXP 30
6983: PUSH
6984: LD_INT 0
6986: EQUAL
6987: AND
6988: IFFALSE 7053
6990: GO 6992
6992: DISABLE
// begin enable ;
6993: ENABLE
// AmSciSib := FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
6994: LD_ADDR_EXP 27
6998: PUSH
6999: LD_INT 6
7001: PPUSH
7002: LD_INT 22
7004: PUSH
7005: LD_INT 1
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: LD_INT 25
7014: PUSH
7015: LD_INT 4
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PPUSH
7026: CALL_OW 70
7030: PUSH
7031: LD_INT 1
7033: ARRAY
7034: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
7035: LD_INT 6
7037: PPUSH
7038: LD_INT 0
7040: PPUSH
7041: CALL_OW 424
// radationResearched := 1 ;
7045: LD_ADDR_EXP 30
7049: PUSH
7050: LD_INT 1
7052: ST_TO_ADDR
// end ;
7053: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
7054: LD_EXP 27
7058: PPUSH
7059: CALL_OW 301
7063: IFFALSE 7075
7065: PUSH
7066: LD_EXP 30
7070: PUSH
7071: LD_INT 1
7073: EQUAL
7074: AND
7075: IFFALSE 7111
7077: GO 7079
7079: DISABLE
// begin enable ;
7080: ENABLE
// radationResearched = 0 ;
7081: LD_ADDR_EXP 30
7085: PUSH
7086: LD_INT 0
7088: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7089: LD_INT 6
7091: PPUSH
7092: LD_INT 1
7094: PPUSH
7095: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
7099: LD_EXP 1
7103: PPUSH
7104: LD_STRING D9a-JMM-1
7106: PPUSH
7107: CALL_OW 88
// end ; end_of_file
7111: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = us_siberium_rocket and eventVar1 = 0 then
7112: LD_VAR 0 5
7116: PUSH
7117: LD_INT 8
7119: EQUAL
7120: IFFALSE 7132
7122: PUSH
7123: LD_EXP 36
7127: PUSH
7128: LD_INT 0
7130: EQUAL
7131: AND
7132: IFFALSE 7185
// begin eventVar1 := 1 ;
7134: LD_ADDR_EXP 36
7138: PUSH
7139: LD_INT 1
7141: ST_TO_ADDR
// DialogueOn ;
7142: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
7146: LD_EXP 1
7150: PPUSH
7151: LD_STRING D6a-JMM-1
7153: PPUSH
7154: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
7158: LD_EXP 16
7162: PPUSH
7163: LD_STRING D6a-Pow-1
7165: PPUSH
7166: CALL_OW 94
// DialogueOff ;
7170: CALL_OW 7
// wait ( 3 3$0 ) ;
7174: LD_INT 6300
7176: PPUSH
7177: CALL_OW 67
// PowellSupport ;
7181: CALL 1872 0 0
// end ; end ;
7185: PPOPN 5
7187: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7188: LD_VAR 0 1
7192: PPUSH
7193: CALL 27356 0 1
// if un = JMM then
7197: LD_VAR 0 1
7201: PUSH
7202: LD_EXP 1
7206: EQUAL
7207: IFFALSE 7216
// YouLost ( JMM ) ;
7209: LD_STRING JMM
7211: PPUSH
7212: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
7216: LD_VAR 0 1
7220: PPUSH
7221: CALL_OW 264
7225: PUSH
7226: LD_INT 31
7228: EQUAL
7229: IFFALSE 7245
// achivCounter := achivCounter + 1 ;
7231: LD_ADDR_EXP 42
7235: PUSH
7236: LD_EXP 42
7240: PUSH
7241: LD_INT 1
7243: PLUS
7244: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
7245: LD_VAR 0 1
7249: PPUSH
7250: CALL_OW 255
7254: PUSH
7255: LD_INT 1
7257: NONEQUAL
7258: IFFALSE 7275
7260: PUSH
7261: LD_VAR 0 1
7265: PPUSH
7266: CALL_OW 247
7270: PUSH
7271: LD_INT 2
7273: EQUAL
7274: AND
7275: IFFALSE 7291
// destroyCounter := destroyCounter + 1 ;
7277: LD_ADDR_EXP 43
7281: PUSH
7282: LD_EXP 43
7286: PUSH
7287: LD_INT 1
7289: PLUS
7290: ST_TO_ADDR
// end ;
7291: PPOPN 1
7293: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
7294: LD_VAR 0 2
7298: PUSH
7299: LD_EXP 19
7303: EQUAL
7304: IFFALSE 7313
// SetAchievement ( ACH_MASHA ) ;
7306: LD_STRING ACH_MASHA
7308: PPUSH
7309: CALL_OW 543
// end ;
7313: PPOPN 4
7315: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
7316: LD_VAR 0 1
7320: PPUSH
7321: LD_VAR 0 2
7325: PPUSH
7326: CALL 27414 0 2
// if GetWeapon ( vehicle ) = us_siberium_rocket and eventVar2 = 0 then
7330: LD_VAR 0 1
7334: PPUSH
7335: CALL_OW 264
7339: PUSH
7340: LD_INT 8
7342: EQUAL
7343: IFFALSE 7355
7345: PUSH
7346: LD_EXP 37
7350: PUSH
7351: LD_INT 0
7353: EQUAL
7354: AND
7355: IFFALSE 7424
// begin eventVar2 := 1 ;
7357: LD_ADDR_EXP 37
7361: PUSH
7362: LD_INT 1
7364: ST_TO_ADDR
// DialogueOn ;
7365: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
7369: LD_EXP 1
7373: PPUSH
7374: LD_STRING D6b-JMM-1
7376: PPUSH
7377: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
7381: LD_EXP 16
7385: PPUSH
7386: LD_STRING D6b-Pow-1
7388: PPUSH
7389: CALL_OW 94
// DialogueOff ;
7393: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
7397: LD_INT 5
7399: PPUSH
7400: LD_INT 1
7402: PPUSH
7403: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
7407: LD_INT 7
7409: PPUSH
7410: LD_INT 1
7412: PPUSH
7413: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
7417: LD_STRING M3
7419: PPUSH
7420: CALL_OW 337
// end ; end ;
7424: PPOPN 2
7426: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
7427: LD_VAR 0 2
7431: PPUSH
7432: LD_VAR 0 3
7436: PPUSH
7437: LD_INT 5
7439: PPUSH
7440: CALL_OW 309
7444: IFFALSE 7456
7446: PUSH
7447: LD_EXP 38
7451: PUSH
7452: LD_INT 0
7454: EQUAL
7455: AND
7456: IFFALSE 7681
// begin eventVar3 := 1 ;
7458: LD_ADDR_EXP 38
7462: PUSH
7463: LD_INT 1
7465: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7466: LD_INT 175
7468: PPUSH
7469: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_radar ] ] ) then
7473: LD_INT 7
7475: PPUSH
7476: LD_INT 22
7478: PUSH
7479: LD_INT 1
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 21
7488: PUSH
7489: LD_INT 2
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: PUSH
7496: LD_INT 34
7498: PUSH
7499: LD_INT 11
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: LIST
7510: PPUSH
7511: CALL_OW 70
7515: IFFALSE 7534
// begin radarOnSpot := 1 ;
7517: LD_ADDR_EXP 31
7521: PUSH
7522: LD_INT 1
7524: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
7525: LD_STRING M3a
7527: PPUSH
7528: CALL_OW 337
// end else
7532: GO 7541
// ChangeMissionObjectives ( M3b ) ;
7534: LD_STRING M3b
7536: PPUSH
7537: CALL_OW 337
// DialogueOn ;
7541: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
7545: LD_EXP 2
7549: PPUSH
7550: LD_STRING D8-Huck-1
7552: PPUSH
7553: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
7557: LD_EXP 1
7561: PPUSH
7562: LD_STRING D8-JMM-1
7564: PPUSH
7565: CALL_OW 88
// if IsOk ( Stevens ) then
7569: LD_EXP 2
7573: PPUSH
7574: CALL_OW 302
7578: IFFALSE 7640
// begin Say ( Stevens , D8-Huck-2 ) ;
7580: LD_EXP 2
7584: PPUSH
7585: LD_STRING D8-Huck-2
7587: PPUSH
7588: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
7592: LD_EXP 1
7596: PPUSH
7597: LD_STRING D8-JMM-2
7599: PPUSH
7600: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
7604: LD_EXP 2
7608: PPUSH
7609: LD_STRING D8-Huck-3
7611: PPUSH
7612: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
7616: LD_EXP 1
7620: PPUSH
7621: LD_STRING D8-JMM-3
7623: PPUSH
7624: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
7628: LD_EXP 2
7632: PPUSH
7633: LD_STRING D8-Huck-4
7635: PPUSH
7636: CALL_OW 88
// end ; DialogueOff ;
7640: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
7644: LD_INT 5
7646: PPUSH
7647: LD_INT 0
7649: PPUSH
7650: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
7654: LD_INT 7
7656: PPUSH
7657: LD_INT 0
7659: PPUSH
7660: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7664: LD_INT 6
7666: PPUSH
7667: LD_INT 1
7669: PPUSH
7670: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
7674: LD_STRING M5
7676: PPUSH
7677: CALL_OW 337
// end ; end ;
7681: PPOPN 3
7683: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 and ( GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium ) then
7684: LD_EXP 27
7688: PPUSH
7689: CALL_OW 302
7693: IFFALSE 7707
7695: PUSH
7696: LD_VAR 0 2
7700: PUSH
7701: LD_EXP 27
7705: EQUAL
7706: AND
7707: IFFALSE 7719
7709: PUSH
7710: LD_EXP 39
7714: PUSH
7715: LD_INT 0
7717: EQUAL
7718: AND
7719: IFFALSE 7731
7721: PUSH
7722: LD_EXP 38
7726: PUSH
7727: LD_INT 1
7729: EQUAL
7730: AND
7731: IFFALSE 7771
7733: PUSH
7734: LD_VAR 0 1
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: CALL_OW 268
7746: PUSH
7747: LD_INT 11
7749: EQUAL
7750: IFTRUE 7770
7752: PUSH
7753: LD_VAR 0 1
7757: PPUSH
7758: LD_INT 2
7760: PPUSH
7761: CALL_OW 268
7765: PUSH
7766: LD_INT 11
7768: EQUAL
7769: OR
7770: AND
7771: IFFALSE 7781
// eventVar4 := 1 ;
7773: LD_ADDR_EXP 39
7777: PUSH
7778: LD_INT 1
7780: ST_TO_ADDR
// end ;
7781: PPOPN 2
7783: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
7784: LD_INT 0
7786: PPUSH
7787: PPUSH
// begin if GetNation ( unit ) = nation_arabian then
7788: LD_VAR 0 1
7792: PPUSH
7793: CALL_OW 248
7797: PUSH
7798: LD_INT 2
7800: EQUAL
7801: IFFALSE 8037
// begin for i := sibDeposits downto 1 do
7803: LD_ADDR_VAR 0 4
7807: PUSH
7808: DOUBLE
7809: LD_EXP 32
7813: INC
7814: ST_TO_ADDR
7815: LD_INT 1
7817: PUSH
7818: FOR_DOWNTO
7819: IFFALSE 7891
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
7821: LD_EXP 32
7825: PUSH
7826: LD_VAR 0 4
7830: ARRAY
7831: PUSH
7832: LD_INT 1
7834: ARRAY
7835: PUSH
7836: LD_VAR 0 2
7840: EQUAL
7841: IFFALSE 7865
7843: PUSH
7844: LD_EXP 32
7848: PUSH
7849: LD_VAR 0 4
7853: ARRAY
7854: PUSH
7855: LD_INT 2
7857: ARRAY
7858: PUSH
7859: LD_VAR 0 3
7863: EQUAL
7864: AND
7865: IFFALSE 7889
// begin sibDeposits := Delete ( sibDeposits , i ) ;
7867: LD_ADDR_EXP 32
7871: PUSH
7872: LD_EXP 32
7876: PPUSH
7877: LD_VAR 0 4
7881: PPUSH
7882: CALL_OW 3
7886: ST_TO_ADDR
// break ;
7887: GO 7891
// end ;
7889: GO 7818
7891: POP
7892: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
7893: LD_EXP 40
7897: PUSH
7898: LD_INT 0
7900: EQUAL
7901: IFFALSE 7935
7903: PUSH
7904: LD_VAR 0 2
7908: PPUSH
7909: LD_VAR 0 3
7913: PPUSH
7914: CALL_OW 428
7918: PUSH
7919: LD_INT 22
7921: PUSH
7922: LD_INT 1
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PPUSH
7929: CALL_OW 69
7933: IN
7934: AND
7935: IFFALSE 8037
// begin eventVar5 := 1 ;
7937: LD_ADDR_EXP 40
7941: PUSH
7942: LD_INT 1
7944: ST_TO_ADDR
// DialogueOn ;
7945: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
7949: LD_EXP 2
7953: PPUSH
7954: LD_STRING D4-Sci1-1
7956: PPUSH
7957: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7961: LD_EXP 1
7965: PPUSH
7966: LD_STRING D4-JMM-1
7968: PPUSH
7969: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
7973: LD_EXP 2
7977: PPUSH
7978: LD_STRING D4-Sci1-2
7980: PPUSH
7981: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7985: LD_EXP 1
7989: PPUSH
7990: LD_STRING D4-JMM-2
7992: PPUSH
7993: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
7997: LD_EXP 2
8001: PPUSH
8002: LD_STRING D4-Sci1-3
8004: PPUSH
8005: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8009: LD_EXP 1
8013: PPUSH
8014: LD_STRING D4-JMM-3
8016: PPUSH
8017: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
8021: LD_EXP 1
8025: PPUSH
8026: LD_STRING D4-JMM-3a
8028: PPUSH
8029: CALL_OW 88
// DialogueOff ;
8033: CALL_OW 7
// end ; end ; end ;
8037: PPOPN 5
8039: END
// on SiberiteDepositDestroyed ( x , y ) do begin sibDestroyedCounter := Inc ( sibDestroyedCounter ) ;
8040: LD_ADDR_EXP 33
8044: PUSH
8045: LD_EXP 33
8049: PPUSH
8050: CALL 73088 0 1
8054: ST_TO_ADDR
// end ;
8055: PPOPN 2
8057: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = b_depot and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 1 then
8058: LD_VAR 0 1
8062: PPUSH
8063: CALL_OW 255
8067: PUSH
8068: LD_INT 1
8070: EQUAL
8071: IFFALSE 8088
8073: PUSH
8074: LD_VAR 0 1
8078: PPUSH
8079: CALL_OW 266
8083: PUSH
8084: LD_INT 0
8086: EQUAL
8087: AND
8088: IFFALSE 8153
8090: PUSH
8091: LD_INT 22
8093: PUSH
8094: LD_INT 1
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PUSH
8101: LD_INT 21
8103: PUSH
8104: LD_INT 3
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PUSH
8111: LD_INT 2
8113: PUSH
8114: LD_INT 30
8116: PUSH
8117: LD_INT 0
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: PUSH
8124: LD_INT 30
8126: PUSH
8127: LD_INT 1
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: LIST
8143: PPUSH
8144: CALL_OW 69
8148: PUSH
8149: LD_INT 1
8151: EQUAL
8152: AND
8153: IFFALSE 8167
// SetBName ( building , omega ) ;
8155: LD_VAR 0 1
8159: PPUSH
8160: LD_STRING omega
8162: PPUSH
8163: CALL_OW 500
// end ;
8167: PPOPN 2
8169: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
8170: LD_VAR 0 1
8174: PPUSH
8175: CALL 27398 0 1
// end ;
8179: PPOPN 1
8181: END
// on SailEvent ( event ) do begin if event = eventArabianAttack then
8182: LD_VAR 0 1
8186: PUSH
8187: LD_EXP 44
8191: EQUAL
8192: IFFALSE 8198
// ArabianAttack ;
8194: CALL 10352 0 0
// if event = eventRussianAttack then
8198: LD_VAR 0 1
8202: PUSH
8203: LD_EXP 45
8207: EQUAL
8208: IFFALSE 8214
// RussianAttack ;
8210: CALL 10717 0 0
// end ;
8214: PPOPN 1
8216: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = eventContaminate then
8217: LD_VAR 0 1
8221: PUSH
8222: LD_EXP 46
8226: EQUAL
8227: IFFALSE 8323
// begin if IsOk ( p1 ) and ValidHex ( p2 , p3 ) then
8229: LD_VAR 0 2
8233: PPUSH
8234: CALL_OW 302
8238: IFFALSE 8256
8240: PUSH
8241: LD_VAR 0 3
8245: PPUSH
8246: LD_VAR 0 4
8250: PPUSH
8251: CALL_OW 488
8255: AND
8256: IFFALSE 8323
// begin repeat wait ( 0 0$1 ) ;
8258: LD_INT 35
8260: PPUSH
8261: CALL_OW 67
// if not HasTask ( p1 ) then
8265: LD_VAR 0 2
8269: PPUSH
8270: CALL_OW 314
8274: NOT
8275: IFFALSE 8311
// begin ComContaminate ( p1 , p2 , p3 ) ;
8277: LD_VAR 0 2
8281: PPUSH
8282: LD_VAR 0 3
8286: PPUSH
8287: LD_VAR 0 4
8291: PPUSH
8292: CALL_OW 158
// AddComMoveXY ( p1 , 42 , 3 ) ;
8296: LD_VAR 0 2
8300: PPUSH
8301: LD_INT 42
8303: PPUSH
8304: LD_INT 3
8306: PPUSH
8307: CALL_OW 171
// end ; until not IsOk ( p1 ) ;
8311: LD_VAR 0 2
8315: PPUSH
8316: CALL_OW 302
8320: NOT
8321: IFFALSE 8258
// end ; end ; end ;
8323: PPOPN 7
8325: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 8 ] then
8326: LD_VAR 0 1
8330: PPUSH
8331: CALL_OW 255
8335: PUSH
8336: LD_INT 3
8338: PUSH
8339: LD_INT 8
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: IN
8346: IFFALSE 8409
// begin ComMoveXY ( driver , 41 , 2 ) ;
8348: LD_VAR 0 1
8352: PPUSH
8353: LD_INT 41
8355: PPUSH
8356: LD_INT 2
8358: PPUSH
8359: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8363: LD_INT 35
8365: PPUSH
8366: CALL_OW 67
// if IsDead ( driver ) then
8370: LD_VAR 0 1
8374: PPUSH
8375: CALL_OW 301
8379: IFFALSE 8383
// exit ;
8381: GO 8409
// until IsAt ( driver , 41 , 2 ) ;
8383: LD_VAR 0 1
8387: PPUSH
8388: LD_INT 41
8390: PPUSH
8391: LD_INT 2
8393: PPUSH
8394: CALL_OW 307
8398: IFFALSE 8363
// RemoveUnit ( driver ) ;
8400: LD_VAR 0 1
8404: PPUSH
8405: CALL_OW 64
// end ; end ; end_of_file
8409: PPOPN 4
8411: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
8412: LD_INT 0
8414: PPUSH
8415: PPUSH
8416: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
8417: LD_ADDR_VAR 0 1
8421: PUSH
8422: LD_VAR 0 1
8426: PUSH
8427: LD_EXP 1
8431: PUSH
8432: LD_EXP 2
8436: PUSH
8437: LD_EXP 3
8441: PUSH
8442: LD_EXP 4
8446: PUSH
8447: LD_EXP 5
8451: PUSH
8452: LD_EXP 6
8456: PUSH
8457: LD_EXP 7
8461: PUSH
8462: LD_EXP 8
8466: PUSH
8467: LD_EXP 9
8471: PUSH
8472: LD_EXP 10
8476: PUSH
8477: LD_EXP 11
8481: PUSH
8482: LD_EXP 12
8486: PUSH
8487: LD_EXP 13
8491: PUSH
8492: LD_EXP 14
8496: PUSH
8497: LD_EXP 16
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: DIFF
8519: ST_TO_ADDR
// if not characters then
8520: LD_VAR 0 1
8524: NOT
8525: IFFALSE 8529
// exit ;
8527: GO 8608
// speaker := characters [ rand ( 1 , characters ) ] ;
8529: LD_ADDR_VAR 0 6
8533: PUSH
8534: LD_VAR 0 1
8538: PUSH
8539: LD_INT 1
8541: PPUSH
8542: LD_VAR 0 1
8546: PPUSH
8547: CALL_OW 12
8551: ARRAY
8552: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
8553: LD_VAR 0 6
8557: PPUSH
8558: CALL_OW 258
8562: PUSH
8563: LD_INT 1
8565: EQUAL
8566: IFFALSE 8584
// Say ( speaker , dialogMID ) else
8568: LD_VAR 0 6
8572: PPUSH
8573: LD_VAR 0 2
8577: PPUSH
8578: CALL_OW 88
8582: GO 8598
// Say ( speaker , dialogFID ) ;
8584: LD_VAR 0 6
8588: PPUSH
8589: LD_VAR 0 3
8593: PPUSH
8594: CALL_OW 88
// result := speaker ;
8598: LD_ADDR_VAR 0 4
8602: PUSH
8603: LD_VAR 0 6
8607: ST_TO_ADDR
// end ;
8608: LD_VAR 0 4
8612: RET
// export function PrepareDifficulty ; begin
8613: LD_INT 0
8615: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
8616: LD_INT 5
8618: PPUSH
8619: LD_INT 8
8621: PPUSH
8622: LD_INT 2
8624: PPUSH
8625: CALL_OW 322
// if Difficulty = 1 then
8629: LD_OWVAR 67
8633: PUSH
8634: LD_INT 1
8636: EQUAL
8637: IFFALSE 8756
// begin SetTech ( 66 , 8 , state_researched ) ;
8639: LD_INT 66
8641: PPUSH
8642: LD_INT 8
8644: PPUSH
8645: LD_INT 2
8647: PPUSH
8648: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
8652: LD_INT 67
8654: PPUSH
8655: LD_INT 8
8657: PPUSH
8658: LD_INT 0
8660: PPUSH
8661: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8665: LD_INT 68
8667: PPUSH
8668: LD_INT 8
8670: PPUSH
8671: LD_INT 0
8673: PPUSH
8674: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8678: LD_INT 51
8680: PPUSH
8681: LD_INT 8
8683: PPUSH
8684: LD_INT 2
8686: PPUSH
8687: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
8691: LD_INT 52
8693: PPUSH
8694: LD_INT 8
8696: PPUSH
8697: LD_INT 0
8699: PPUSH
8700: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
8704: LD_INT 53
8706: PPUSH
8707: LD_INT 8
8709: PPUSH
8710: LD_INT 0
8712: PPUSH
8713: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8717: LD_INT 60
8719: PPUSH
8720: LD_INT 8
8722: PPUSH
8723: LD_INT 2
8725: PPUSH
8726: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
8730: LD_INT 61
8732: PPUSH
8733: LD_INT 8
8735: PPUSH
8736: LD_INT 0
8738: PPUSH
8739: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8743: LD_INT 62
8745: PPUSH
8746: LD_INT 8
8748: PPUSH
8749: LD_INT 0
8751: PPUSH
8752: CALL_OW 322
// end ; if Difficulty = 2 then
8756: LD_OWVAR 67
8760: PUSH
8761: LD_INT 2
8763: EQUAL
8764: IFFALSE 8883
// begin SetTech ( 66 , 8 , state_researched ) ;
8766: LD_INT 66
8768: PPUSH
8769: LD_INT 8
8771: PPUSH
8772: LD_INT 2
8774: PPUSH
8775: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8779: LD_INT 67
8781: PPUSH
8782: LD_INT 8
8784: PPUSH
8785: LD_INT 2
8787: PPUSH
8788: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8792: LD_INT 68
8794: PPUSH
8795: LD_INT 8
8797: PPUSH
8798: LD_INT 0
8800: PPUSH
8801: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8805: LD_INT 51
8807: PPUSH
8808: LD_INT 8
8810: PPUSH
8811: LD_INT 2
8813: PPUSH
8814: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8818: LD_INT 52
8820: PPUSH
8821: LD_INT 8
8823: PPUSH
8824: LD_INT 2
8826: PPUSH
8827: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8831: LD_INT 53
8833: PPUSH
8834: LD_INT 8
8836: PPUSH
8837: LD_INT 2
8839: PPUSH
8840: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8844: LD_INT 60
8846: PPUSH
8847: LD_INT 8
8849: PPUSH
8850: LD_INT 2
8852: PPUSH
8853: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8857: LD_INT 61
8859: PPUSH
8860: LD_INT 8
8862: PPUSH
8863: LD_INT 2
8865: PPUSH
8866: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8870: LD_INT 62
8872: PPUSH
8873: LD_INT 8
8875: PPUSH
8876: LD_INT 0
8878: PPUSH
8879: CALL_OW 322
// end ; if Difficulty >= 3 then
8883: LD_OWVAR 67
8887: PUSH
8888: LD_INT 3
8890: GREATEREQUAL
8891: IFFALSE 9010
// begin SetTech ( 66 , 8 , state_researched ) ;
8893: LD_INT 66
8895: PPUSH
8896: LD_INT 8
8898: PPUSH
8899: LD_INT 2
8901: PPUSH
8902: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8906: LD_INT 67
8908: PPUSH
8909: LD_INT 8
8911: PPUSH
8912: LD_INT 2
8914: PPUSH
8915: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8919: LD_INT 68
8921: PPUSH
8922: LD_INT 8
8924: PPUSH
8925: LD_INT 0
8927: PPUSH
8928: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8932: LD_INT 51
8934: PPUSH
8935: LD_INT 8
8937: PPUSH
8938: LD_INT 2
8940: PPUSH
8941: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8945: LD_INT 52
8947: PPUSH
8948: LD_INT 8
8950: PPUSH
8951: LD_INT 2
8953: PPUSH
8954: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8958: LD_INT 53
8960: PPUSH
8961: LD_INT 8
8963: PPUSH
8964: LD_INT 2
8966: PPUSH
8967: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8971: LD_INT 60
8973: PPUSH
8974: LD_INT 8
8976: PPUSH
8977: LD_INT 2
8979: PPUSH
8980: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8984: LD_INT 61
8986: PPUSH
8987: LD_INT 8
8989: PPUSH
8990: LD_INT 2
8992: PPUSH
8993: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8997: LD_INT 62
8999: PPUSH
9000: LD_INT 8
9002: PPUSH
9003: LD_INT 0
9005: PPUSH
9006: CALL_OW 322
// end ; end ;
9010: LD_VAR 0 1
9014: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
9015: LD_INT 0
9017: PPUSH
9018: PPUSH
// for i in charactersList do
9019: LD_ADDR_VAR 0 4
9023: PUSH
9024: LD_VAR 0 1
9028: PUSH
9029: FOR_IN
9030: IFFALSE 9048
// SaveCharacters ( i , ident ) ;
9032: LD_VAR 0 4
9036: PPUSH
9037: LD_VAR 0 2
9041: PPUSH
9042: CALL_OW 38
9046: GO 9029
9048: POP
9049: POP
// end ; end_of_file
9050: LD_VAR 0 3
9054: RET
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
9055: LD_EXP 39
9059: PUSH
9060: LD_INT 1
9062: EQUAL
9063: IFFALSE 10041
9065: GO 9067
9067: DISABLE
9068: LD_INT 0
9070: PPUSH
9071: PPUSH
9072: PPUSH
// begin m1 := false ;
9073: LD_ADDR_VAR 0 1
9077: PUSH
9078: LD_INT 0
9080: ST_TO_ADDR
// m2 := false ;
9081: LD_ADDR_VAR 0 2
9085: PUSH
9086: LD_INT 0
9088: ST_TO_ADDR
// m3 := false ;
9089: LD_ADDR_VAR 0 3
9093: PUSH
9094: LD_INT 0
9096: ST_TO_ADDR
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
9097: LD_INT 22
9099: PUSH
9100: LD_INT 1
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: PUSH
9107: LD_INT 21
9109: PUSH
9110: LD_INT 1
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: LD_INT 23
9119: PUSH
9120: LD_INT 1
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PUSH
9127: LD_INT 50
9129: PUSH
9130: EMPTY
9131: LIST
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: PPUSH
9139: CALL_OW 69
9143: PPUSH
9144: CALL 35783 0 1
9148: PUSH
9149: LD_INT 5
9151: LESS
9152: IFFALSE 9163
// begin YouLost ( Troops ) ;
9154: LD_STRING Troops
9156: PPUSH
9157: CALL_OW 104
// exit ;
9161: GO 10041
// end ; DialogueOn ;
9163: CALL_OW 6
// Say ( JMM , D9b-JMM-1 ) ;
9167: LD_EXP 1
9171: PPUSH
9172: LD_STRING D9b-JMM-1
9174: PPUSH
9175: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
9179: LD_EXP 16
9183: PPUSH
9184: LD_STRING D9b-Pow-1
9186: PPUSH
9187: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
9191: LD_EXP 1
9195: PPUSH
9196: LD_STRING D9b-JMM-2
9198: PPUSH
9199: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
9203: LD_EXP 16
9207: PPUSH
9208: LD_STRING D9b-Pow-2
9210: PPUSH
9211: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
9215: LD_EXP 1
9219: PPUSH
9220: LD_STRING D9b-JMM-3
9222: PPUSH
9223: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
9227: LD_EXP 16
9231: PPUSH
9232: LD_STRING D9b-Pow-3
9234: PPUSH
9235: CALL_OW 94
// if tick <= 60 60$00 then
9239: LD_OWVAR 1
9243: PUSH
9244: LD_INT 126000
9246: LESSEQUAL
9247: IFFALSE 9256
// SetAchievement ( ACH_ASPEED_13 ) ;
9249: LD_STRING ACH_ASPEED_13
9251: PPUSH
9252: CALL_OW 543
// if burlakStatus = 1 then
9256: LD_EXP 29
9260: PUSH
9261: LD_INT 1
9263: EQUAL
9264: IFFALSE 9286
// begin m1 := true ;
9266: LD_ADDR_VAR 0 1
9270: PUSH
9271: LD_INT 1
9273: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
9274: LD_STRING Burlak
9276: PPUSH
9277: LD_INT 1
9279: PPUSH
9280: CALL_OW 101
// end else
9284: GO 9297
// begin AddMedal ( Burlak , - 1 ) ;
9286: LD_STRING Burlak
9288: PPUSH
9289: LD_INT 1
9291: NEG
9292: PPUSH
9293: CALL_OW 101
// end ; if IsOk ( Stevens ) then
9297: LD_EXP 2
9301: PPUSH
9302: CALL_OW 302
9306: IFFALSE 9328
// begin m2 := true ;
9308: LD_ADDR_VAR 0 2
9312: PUSH
9313: LD_INT 1
9315: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
9316: LD_STRING Stevens
9318: PPUSH
9319: LD_INT 1
9321: PPUSH
9322: CALL_OW 101
// end else
9326: GO 9339
// begin AddMedal ( Stevens , - 1 ) ;
9328: LD_STRING Stevens
9330: PPUSH
9331: LD_INT 1
9333: NEG
9334: PPUSH
9335: CALL_OW 101
// end ; if radarOnSpot = 1 then
9339: LD_EXP 31
9343: PUSH
9344: LD_INT 1
9346: EQUAL
9347: IFFALSE 9369
// begin m3 := true ;
9349: LD_ADDR_VAR 0 3
9353: PUSH
9354: LD_INT 1
9356: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
9357: LD_STRING Observation
9359: PPUSH
9360: LD_INT 1
9362: PPUSH
9363: CALL_OW 101
// end else
9367: GO 9380
// begin AddMedal ( Observation , - 1 ) ;
9369: LD_STRING Observation
9371: PPUSH
9372: LD_INT 1
9374: NEG
9375: PPUSH
9376: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
9380: LD_VAR 0 1
9384: IFFALSE 9392
9386: PUSH
9387: LD_VAR 0 2
9391: AND
9392: IFFALSE 9400
9394: PUSH
9395: LD_VAR 0 3
9399: AND
9400: IFFALSE 9412
9402: PUSH
9403: LD_OWVAR 67
9407: PUSH
9408: LD_INT 3
9410: GREATEREQUAL
9411: AND
9412: IFFALSE 9424
// SetAchievementEX ( ACH_AMER , 13 ) ;
9414: LD_STRING ACH_AMER
9416: PPUSH
9417: LD_INT 13
9419: PPUSH
9420: CALL_OW 564
// GiveMedals ( MAIN ) ;
9424: LD_STRING MAIN
9426: PPUSH
9427: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
9431: LD_EXP 29
9435: PPUSH
9436: LD_STRING 13_BurlakStatus_1
9438: PPUSH
9439: CALL_OW 39
// if IsLive ( Stevens ) then
9443: LD_EXP 2
9447: PPUSH
9448: CALL_OW 300
9452: IFFALSE 9466
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
9454: LD_INT 1
9456: PPUSH
9457: LD_STRING 13_StevensStatus_1
9459: PPUSH
9460: CALL_OW 39
9464: GO 9476
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
9466: LD_INT 0
9468: PPUSH
9469: LD_STRING 13_StevensStatus_1
9471: PPUSH
9472: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
9476: LD_INT 22
9478: PUSH
9479: LD_INT 1
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: PUSH
9486: LD_INT 21
9488: PUSH
9489: LD_INT 1
9491: PUSH
9492: EMPTY
9493: LIST
9494: LIST
9495: PUSH
9496: LD_INT 2
9498: PUSH
9499: LD_INT 25
9501: PUSH
9502: LD_INT 1
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 25
9511: PUSH
9512: LD_INT 2
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: PUSH
9519: LD_INT 25
9521: PUSH
9522: LD_INT 3
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: PUSH
9529: LD_INT 25
9531: PUSH
9532: LD_INT 4
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PUSH
9539: LD_INT 25
9541: PUSH
9542: LD_INT 5
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: PUSH
9549: LD_INT 25
9551: PUSH
9552: LD_INT 8
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: LIST
9572: PPUSH
9573: CALL_OW 69
9577: PPUSH
9578: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
9582: LD_EXP 1
9586: PPUSH
9587: LD_EXP 35
9591: PUSH
9592: LD_STRING JMM
9594: STR
9595: PPUSH
9596: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9600: LD_EXP 8
9604: PPUSH
9605: LD_EXP 35
9609: PUSH
9610: LD_STRING Brown
9612: STR
9613: PPUSH
9614: CALL 9015 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9618: LD_EXP 4
9622: PPUSH
9623: LD_EXP 35
9627: PUSH
9628: LD_STRING Donaldson
9630: STR
9631: PPUSH
9632: CALL 9015 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9636: LD_EXP 5
9640: PPUSH
9641: LD_EXP 35
9645: PUSH
9646: LD_STRING Bobby
9648: STR
9649: PPUSH
9650: CALL 9015 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
9654: LD_EXP 6
9658: PPUSH
9659: LD_EXP 35
9663: PUSH
9664: LD_STRING Cyrus
9666: STR
9667: PPUSH
9668: CALL 9015 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
9672: LD_EXP 3
9676: PPUSH
9677: LD_EXP 35
9681: PUSH
9682: LD_STRING Lisa
9684: STR
9685: PPUSH
9686: CALL 9015 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
9690: LD_EXP 13
9694: PPUSH
9695: LD_EXP 35
9699: PUSH
9700: LD_STRING Frank
9702: STR
9703: PPUSH
9704: CALL 9015 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
9708: LD_EXP 14
9712: PPUSH
9713: LD_EXP 35
9717: PUSH
9718: LD_STRING Kikuchi
9720: STR
9721: PPUSH
9722: CALL 9015 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
9726: LD_EXP 10
9730: PPUSH
9731: LD_EXP 35
9735: PUSH
9736: LD_STRING Houten
9738: STR
9739: PPUSH
9740: CALL 9015 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
9744: LD_EXP 12
9748: PPUSH
9749: LD_EXP 35
9753: PUSH
9754: LD_STRING Gary
9756: STR
9757: PPUSH
9758: CALL 9015 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
9762: LD_EXP 11
9766: PPUSH
9767: LD_EXP 35
9771: PUSH
9772: LD_STRING Cornell
9774: STR
9775: PPUSH
9776: CALL 9015 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
9780: LD_EXP 7
9784: PPUSH
9785: LD_EXP 35
9789: PUSH
9790: LD_STRING Denis
9792: STR
9793: PPUSH
9794: CALL 9015 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
9798: LD_EXP 9
9802: PPUSH
9803: LD_EXP 35
9807: PUSH
9808: LD_STRING Gladstone
9810: STR
9811: PPUSH
9812: CALL 9015 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
9816: LD_EXP 2
9820: PPUSH
9821: LD_EXP 35
9825: PUSH
9826: LD_STRING Stevens
9828: STR
9829: PPUSH
9830: CALL 9015 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
9834: LD_INT 50
9836: PUSH
9837: EMPTY
9838: LIST
9839: PUSH
9840: LD_INT 22
9842: PUSH
9843: LD_INT 1
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 21
9852: PUSH
9853: LD_INT 1
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: PUSH
9860: LD_INT 2
9862: PUSH
9863: LD_INT 25
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: LD_INT 25
9875: PUSH
9876: LD_INT 2
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PUSH
9883: LD_INT 25
9885: PUSH
9886: LD_INT 3
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PUSH
9893: LD_INT 25
9895: PUSH
9896: LD_INT 4
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PUSH
9903: LD_INT 25
9905: PUSH
9906: LD_INT 5
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: LD_INT 25
9915: PUSH
9916: LD_INT 8
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: PPUSH
9938: CALL_OW 69
9942: PUSH
9943: LD_EXP 1
9947: PUSH
9948: LD_EXP 8
9952: PUSH
9953: LD_EXP 4
9957: PUSH
9958: LD_EXP 5
9962: PUSH
9963: LD_EXP 6
9967: PUSH
9968: LD_EXP 3
9972: PUSH
9973: LD_EXP 13
9977: PUSH
9978: LD_EXP 9
9982: PUSH
9983: LD_EXP 14
9987: PUSH
9988: LD_EXP 7
9992: PUSH
9993: LD_EXP 10
9997: PUSH
9998: LD_EXP 12
10002: PUSH
10003: LD_EXP 11
10007: PUSH
10008: LD_EXP 2
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: DIFF
10029: PPUSH
10030: LD_STRING 13_other_survivors
10032: PPUSH
10033: CALL_OW 38
// YouWin ;
10037: CALL_OW 103
// end ; end_of_file
10041: PPOPN 3
10043: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) and GetTech ( tech_SibFiss , 1 ) = state_enabled do var i , tmp , yourSiberite ;
10044: LD_EXP 33
10048: PUSH
10049: LD_INT 2
10051: EQUAL
10052: IFFALSE 10071
10054: PUSH
10055: LD_INT 34
10057: PUSH
10058: LD_INT 8
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PPUSH
10065: CALL_OW 69
10069: NOT
10070: AND
10071: IFFALSE 10089
10073: PUSH
10074: LD_INT 25
10076: PPUSH
10077: LD_INT 1
10079: PPUSH
10080: CALL_OW 321
10084: PUSH
10085: LD_INT 1
10087: EQUAL
10088: AND
10089: IFFALSE 10234
10091: GO 10093
10093: DISABLE
10094: LD_INT 0
10096: PPUSH
10097: PPUSH
10098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10099: LD_ADDR_VAR 0 2
10103: PUSH
10104: LD_INT 22
10106: PUSH
10107: LD_INT 1
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: LD_INT 21
10116: PUSH
10117: LD_INT 3
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: PUSH
10124: LD_INT 2
10126: PUSH
10127: LD_INT 30
10129: PUSH
10130: LD_INT 0
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PUSH
10137: LD_INT 30
10139: PUSH
10140: LD_INT 1
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: LIST
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: LIST
10156: PPUSH
10157: CALL_OW 69
10161: ST_TO_ADDR
// for i in tmp do
10162: LD_ADDR_VAR 0 1
10166: PUSH
10167: LD_VAR 0 2
10171: PUSH
10172: FOR_IN
10173: IFFALSE 10206
// yourSiberite := yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
10175: LD_ADDR_VAR 0 3
10179: PUSH
10180: LD_VAR 0 3
10184: PUSH
10185: LD_VAR 0 1
10189: PPUSH
10190: CALL_OW 274
10194: PPUSH
10195: LD_INT 3
10197: PPUSH
10198: CALL_OW 275
10202: PLUS
10203: ST_TO_ADDR
10204: GO 10172
10206: POP
10207: POP
// if yourSiberite < CostOfWeapon ( us_siberium_rocket ) [ 3 ] then
10208: LD_VAR 0 3
10212: PUSH
10213: LD_INT 8
10215: PPUSH
10216: CALL_OW 451
10220: PUSH
10221: LD_INT 3
10223: ARRAY
10224: LESS
10225: IFFALSE 10234
// YouLost ( siberite ) ;
10227: LD_STRING siberite
10229: PPUSH
10230: CALL_OW 104
// end ; end_of_file
10234: PPOPN 3
10236: END
// every 8 8$00 + 8 8$00 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
10237: LD_INT 22
10239: PUSH
10240: LD_INT 8
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 21
10249: PUSH
10250: LD_INT 1
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PPUSH
10261: CALL_OW 69
10265: PUSH
10266: LD_INT 6
10268: LESS
10269: IFFALSE 10279
10271: GO 10273
10273: DISABLE
// begin enable ;
10274: ENABLE
// PrepareArabianAttack ;
10275: CALL 4128 0 0
// end ;
10279: END
// every 0 0$30 trigger eventVar1 = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
10280: LD_EXP 36
10284: PUSH
10285: LD_INT 1
10287: EQUAL
10288: IFFALSE 10324
10290: PUSH
10291: LD_INT 22
10293: PUSH
10294: LD_INT 8
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PUSH
10301: LD_INT 21
10303: PUSH
10304: LD_INT 1
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PPUSH
10315: CALL_OW 69
10319: PUSH
10320: LD_INT 6
10322: LESS
10323: AND
10324: IFFALSE 10351
10326: GO 10328
10328: DISABLE
// begin wait ( 4 4$00 ) ;
10329: LD_INT 8400
10331: PPUSH
10332: CALL_OW 67
// PrepareRussianAttack ;
10336: CALL 3351 0 0
// wait ( 12 12$00 ) ;
10340: LD_INT 25200
10342: PPUSH
10343: CALL_OW 67
// PrepareRussianAttack ;
10347: CALL 3351 0 0
// end ;
10351: END
// export function ArabianAttack ; var i , tmp , path , path2 , vehicles , infantry , units , apes ; begin
10352: LD_INT 0
10354: PPUSH
10355: PPUSH
10356: PPUSH
10357: PPUSH
10358: PPUSH
10359: PPUSH
10360: PPUSH
10361: PPUSH
10362: PPUSH
// units := FilterAllUnits ( [ [ f_side , 8 ] , [ f_tag , 10 ] ] ) ;
10363: LD_ADDR_VAR 0 8
10367: PUSH
10368: LD_INT 22
10370: PUSH
10371: LD_INT 8
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 120
10380: PUSH
10381: LD_INT 10
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: PPUSH
10392: CALL_OW 69
10396: ST_TO_ADDR
// if not units then
10397: LD_VAR 0 8
10401: NOT
10402: IFFALSE 10406
// exit ;
10404: GO 10712
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10406: LD_ADDR_VAR 0 4
10410: PUSH
10411: LD_INT 80
10413: PUSH
10414: LD_INT 60
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PUSH
10421: LD_INT 54
10423: PUSH
10424: LD_INT 57
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 55
10433: PUSH
10434: LD_INT 74
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 61
10443: PUSH
10444: LD_INT 85
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: ST_TO_ADDR
// path2 := [ [ 93 , 99 ] , [ 85 , 99 ] ] ;
10457: LD_ADDR_VAR 0 5
10461: PUSH
10462: LD_INT 93
10464: PUSH
10465: LD_INT 99
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 85
10474: PUSH
10475: LD_INT 99
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10486: LD_INT 35
10488: PPUSH
10489: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10493: LD_ADDR_VAR 0 6
10497: PUSH
10498: LD_VAR 0 8
10502: PPUSH
10503: LD_INT 21
10505: PUSH
10506: LD_INT 2
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PPUSH
10513: CALL_OW 72
10517: ST_TO_ADDR
// if vehicles then
10518: LD_VAR 0 6
10522: IFFALSE 10538
// AgressiveMove ( vehicles , path ) ;
10524: LD_VAR 0 6
10528: PPUSH
10529: LD_VAR 0 4
10533: PPUSH
10534: CALL 74481 0 2
// infantry := UnitFilter ( units , [ [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10538: LD_ADDR_VAR 0 7
10542: PUSH
10543: LD_VAR 0 8
10547: PPUSH
10548: LD_INT 23
10550: PUSH
10551: LD_INT 2
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PUSH
10558: LD_INT 21
10560: PUSH
10561: LD_INT 1
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PPUSH
10572: CALL_OW 72
10576: ST_TO_ADDR
// if infantry then
10577: LD_VAR 0 7
10581: IFFALSE 10597
// AgressiveMove ( infantry , path2 ) ;
10583: LD_VAR 0 7
10587: PPUSH
10588: LD_VAR 0 5
10592: PPUSH
10593: CALL 74481 0 2
// apes := UnitFilter ( units , [ [ f_nation , 0 ] , [ f_type , unit_human ] ] ) ;
10597: LD_ADDR_VAR 0 9
10601: PUSH
10602: LD_VAR 0 8
10606: PPUSH
10607: LD_INT 23
10609: PUSH
10610: LD_INT 0
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PUSH
10617: LD_INT 21
10619: PUSH
10620: LD_INT 1
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PPUSH
10631: CALL_OW 72
10635: ST_TO_ADDR
// if apes then
10636: LD_VAR 0 9
10640: IFFALSE 10684
// ComAttackUnit ( apes [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , apes [ 1 ] ) ) ;
10642: LD_VAR 0 9
10646: PUSH
10647: LD_INT 1
10649: ARRAY
10650: PPUSH
10651: LD_INT 22
10653: PUSH
10654: LD_INT 1
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PPUSH
10661: CALL_OW 69
10665: PPUSH
10666: LD_VAR 0 9
10670: PUSH
10671: LD_INT 1
10673: ARRAY
10674: PPUSH
10675: CALL_OW 74
10679: PPUSH
10680: CALL_OW 115
// units := UnitFilter ( units , [ f_ok ] ) ;
10684: LD_ADDR_VAR 0 8
10688: PUSH
10689: LD_VAR 0 8
10693: PPUSH
10694: LD_INT 50
10696: PUSH
10697: EMPTY
10698: LIST
10699: PPUSH
10700: CALL_OW 72
10704: ST_TO_ADDR
// until not units ;
10705: LD_VAR 0 8
10709: NOT
10710: IFFALSE 10486
// end ;
10712: LD_VAR 0 1
10716: RET
// export function RussianAttack ; var i , tmp , path , vehicles , units ; begin
10717: LD_INT 0
10719: PPUSH
10720: PPUSH
10721: PPUSH
10722: PPUSH
10723: PPUSH
10724: PPUSH
// units := FilterAllUnits ( [ [ f_side , 3 ] , [ f_tag , 10 ] ] ) ;
10725: LD_ADDR_VAR 0 6
10729: PUSH
10730: LD_INT 22
10732: PUSH
10733: LD_INT 3
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PUSH
10740: LD_INT 120
10742: PUSH
10743: LD_INT 10
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PPUSH
10754: CALL_OW 69
10758: ST_TO_ADDR
// if not units then
10759: LD_VAR 0 6
10763: NOT
10764: IFFALSE 10768
// exit ;
10766: GO 10899
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10768: LD_ADDR_VAR 0 4
10772: PUSH
10773: LD_INT 80
10775: PUSH
10776: LD_INT 60
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 54
10785: PUSH
10786: LD_INT 57
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: PUSH
10793: LD_INT 55
10795: PUSH
10796: LD_INT 74
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: LD_INT 61
10805: PUSH
10806: LD_INT 85
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10819: LD_INT 35
10821: PPUSH
10822: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10826: LD_ADDR_VAR 0 5
10830: PUSH
10831: LD_VAR 0 6
10835: PPUSH
10836: LD_INT 21
10838: PUSH
10839: LD_INT 2
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PPUSH
10846: CALL_OW 72
10850: ST_TO_ADDR
// if vehicles then
10851: LD_VAR 0 5
10855: IFFALSE 10871
// AgressiveMove ( vehicles , path ) ;
10857: LD_VAR 0 5
10861: PPUSH
10862: LD_VAR 0 4
10866: PPUSH
10867: CALL 74481 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10871: LD_ADDR_VAR 0 6
10875: PUSH
10876: LD_VAR 0 6
10880: PPUSH
10881: LD_INT 50
10883: PUSH
10884: EMPTY
10885: LIST
10886: PPUSH
10887: CALL_OW 72
10891: ST_TO_ADDR
// until not units ;
10892: LD_VAR 0 6
10896: NOT
10897: IFFALSE 10819
// end ; end_of_file
10899: LD_VAR 0 1
10903: RET
// every 0 0$01 do var i , cratesSpawned ;
10904: GO 10906
10906: DISABLE
10907: LD_INT 0
10909: PPUSH
10910: PPUSH
// begin cratesSpawned := 0 ;
10911: LD_ADDR_VAR 0 2
10915: PUSH
10916: LD_INT 0
10918: ST_TO_ADDR
// for i := 1 to 6 do
10919: LD_ADDR_VAR 0 1
10923: PUSH
10924: DOUBLE
10925: LD_INT 1
10927: DEC
10928: ST_TO_ADDR
10929: LD_INT 6
10931: PUSH
10932: FOR_TO
10933: IFFALSE 10958
// CreateCratesArea ( rand ( 2 , 5 ) , StartCratesArea , false ) ;
10935: LD_INT 2
10937: PPUSH
10938: LD_INT 5
10940: PPUSH
10941: CALL_OW 12
10945: PPUSH
10946: LD_INT 17
10948: PPUSH
10949: LD_INT 0
10951: PPUSH
10952: CALL_OW 55
10956: GO 10932
10958: POP
10959: POP
// wait ( 0 0$20 ) ;
10960: LD_INT 700
10962: PPUSH
10963: CALL_OW 67
// repeat wait ( 0 0$08 ) ;
10967: LD_INT 280
10969: PPUSH
10970: CALL_OW 67
// if cratesSpawned < 12 then
10974: LD_VAR 0 2
10978: PUSH
10979: LD_INT 12
10981: LESS
10982: IFFALSE 11034
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
10984: LD_INT 105
10986: PPUSH
10987: LD_INT 350
10989: PPUSH
10990: CALL_OW 12
10994: PPUSH
10995: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10999: LD_INT 3
11001: PPUSH
11002: LD_INT 5
11004: PPUSH
11005: CALL_OW 12
11009: PPUSH
11010: LD_INT 13
11012: PPUSH
11013: LD_INT 1
11015: PPUSH
11016: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11020: LD_ADDR_VAR 0 2
11024: PUSH
11025: LD_VAR 0 2
11029: PUSH
11030: LD_INT 1
11032: PLUS
11033: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
11034: LD_VAR 0 2
11038: PUSH
11039: LD_INT 12
11041: GREATEREQUAL
11042: IFFALSE 11054
11044: PUSH
11045: LD_VAR 0 2
11049: PUSH
11050: LD_INT 32
11052: LESS
11053: AND
11054: IFFALSE 11106
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
11056: LD_INT 420
11058: PPUSH
11059: LD_INT 700
11061: PPUSH
11062: CALL_OW 12
11066: PPUSH
11067: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
11071: LD_INT 3
11073: PPUSH
11074: LD_INT 5
11076: PPUSH
11077: CALL_OW 12
11081: PPUSH
11082: LD_INT 13
11084: PPUSH
11085: LD_INT 1
11087: PPUSH
11088: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11092: LD_ADDR_VAR 0 2
11096: PUSH
11097: LD_VAR 0 2
11101: PUSH
11102: LD_INT 1
11104: PLUS
11105: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
11106: LD_VAR 0 2
11110: PUSH
11111: LD_INT 32
11113: GREATEREQUAL
11114: IFFALSE 11188
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
11116: LD_INT 13
11118: PPUSH
11119: CALL_OW 435
11123: PUSH
11124: LD_INT 14
11126: LESS
11127: IFFALSE 11138
// wait ( 0 0$20 ) else
11129: LD_INT 700
11131: PPUSH
11132: CALL_OW 67
11136: GO 11153
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
11138: LD_INT 1750
11140: PPUSH
11141: LD_INT 3150
11143: PPUSH
11144: CALL_OW 12
11148: PPUSH
11149: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
11153: LD_INT 2
11155: PPUSH
11156: LD_INT 5
11158: PPUSH
11159: CALL_OW 12
11163: PPUSH
11164: LD_INT 13
11166: PPUSH
11167: LD_INT 1
11169: PPUSH
11170: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11174: LD_ADDR_VAR 0 2
11178: PUSH
11179: LD_VAR 0 2
11183: PUSH
11184: LD_INT 1
11186: PLUS
11187: ST_TO_ADDR
// end ; if cratesSpawned >= 120 then
11188: LD_VAR 0 2
11192: PUSH
11193: LD_INT 120
11195: GREATEREQUAL
11196: IFFALSE 11270
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
11198: LD_INT 13
11200: PPUSH
11201: CALL_OW 435
11205: PUSH
11206: LD_INT 14
11208: LESS
11209: IFFALSE 11220
// wait ( 0 0$40 ) else
11211: LD_INT 1400
11213: PPUSH
11214: CALL_OW 67
11218: GO 11235
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
11220: LD_INT 2450
11222: PPUSH
11223: LD_INT 3850
11225: PPUSH
11226: CALL_OW 12
11230: PPUSH
11231: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
11235: LD_INT 1
11237: PPUSH
11238: LD_INT 5
11240: PPUSH
11241: CALL_OW 12
11245: PPUSH
11246: LD_INT 13
11248: PPUSH
11249: LD_INT 1
11251: PPUSH
11252: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11256: LD_ADDR_VAR 0 2
11260: PUSH
11261: LD_VAR 0 2
11265: PUSH
11266: LD_INT 1
11268: PLUS
11269: ST_TO_ADDR
// end ; until false ;
11270: LD_INT 0
11272: IFFALSE 10967
// end ; end_of_file end_of_file
11274: PPOPN 2
11276: END
// export globalGameSaveCounter ; every 0 0$1 do
11277: GO 11279
11279: DISABLE
// begin enable ;
11280: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11281: LD_STRING updateTimer(
11283: PUSH
11284: LD_OWVAR 1
11288: STR
11289: PUSH
11290: LD_STRING );
11292: STR
11293: PPUSH
11294: CALL_OW 559
// end ;
11298: END
// every 0 0$1 do
11299: GO 11301
11301: DISABLE
// begin globalGameSaveCounter := 0 ;
11302: LD_ADDR_EXP 47
11306: PUSH
11307: LD_INT 0
11309: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11310: LD_STRING setGameSaveCounter(0)
11312: PPUSH
11313: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11317: LD_STRING initStreamRollete();
11319: PPUSH
11320: CALL_OW 559
// InitStreamMode ;
11324: CALL 12669 0 0
// DefineStreamItems ( false ) ;
11328: LD_INT 0
11330: PPUSH
11331: CALL 13133 0 1
// end ;
11335: END
// export function SOS_MapStart ( ) ; begin
11336: LD_INT 0
11338: PPUSH
// if streamModeActive then
11339: LD_EXP 48
11343: IFFALSE 11352
// DefineStreamItems ( true ) ;
11345: LD_INT 1
11347: PPUSH
11348: CALL 13133 0 1
// UpdateLuaVariables ( ) ;
11352: CALL 11369 0 0
// UpdateFactoryWaypoints ( ) ;
11356: CALL 26255 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11360: CALL 26507 0 0
// end ;
11364: LD_VAR 0 1
11368: RET
// function UpdateLuaVariables ( ) ; begin
11369: LD_INT 0
11371: PPUSH
// if globalGameSaveCounter then
11372: LD_EXP 47
11376: IFFALSE 11410
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11378: LD_ADDR_EXP 47
11382: PUSH
11383: LD_EXP 47
11387: PPUSH
11388: CALL 73088 0 1
11392: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11393: LD_STRING setGameSaveCounter(
11395: PUSH
11396: LD_EXP 47
11400: STR
11401: PUSH
11402: LD_STRING )
11404: STR
11405: PPUSH
11406: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11410: LD_STRING setGameDifficulty(
11412: PUSH
11413: LD_OWVAR 67
11417: STR
11418: PUSH
11419: LD_STRING )
11421: STR
11422: PPUSH
11423: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
11427: LD_STRING displayDifficulty(
11429: PUSH
11430: LD_OWVAR 67
11434: STR
11435: PUSH
11436: LD_STRING )
11438: STR
11439: PPUSH
11440: CALL_OW 559
// end ;
11444: LD_VAR 0 1
11448: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11449: LD_INT 0
11451: PPUSH
// if p2 = stream_mode then
11452: LD_VAR 0 2
11456: PUSH
11457: LD_INT 100
11459: EQUAL
11460: IFFALSE 12463
// begin if not StreamModeActive then
11462: LD_EXP 48
11466: NOT
11467: IFFALSE 11477
// StreamModeActive := true ;
11469: LD_ADDR_EXP 48
11473: PUSH
11474: LD_INT 1
11476: ST_TO_ADDR
// if p3 = 0 then
11477: LD_VAR 0 3
11481: PUSH
11482: LD_INT 0
11484: EQUAL
11485: IFFALSE 11491
// InitStreamMode ;
11487: CALL 12669 0 0
// if p3 = 1 then
11491: LD_VAR 0 3
11495: PUSH
11496: LD_INT 1
11498: EQUAL
11499: IFFALSE 11509
// sRocket := true ;
11501: LD_ADDR_EXP 53
11505: PUSH
11506: LD_INT 1
11508: ST_TO_ADDR
// if p3 = 2 then
11509: LD_VAR 0 3
11513: PUSH
11514: LD_INT 2
11516: EQUAL
11517: IFFALSE 11527
// sSpeed := true ;
11519: LD_ADDR_EXP 52
11523: PUSH
11524: LD_INT 1
11526: ST_TO_ADDR
// if p3 = 3 then
11527: LD_VAR 0 3
11531: PUSH
11532: LD_INT 3
11534: EQUAL
11535: IFFALSE 11545
// sEngine := true ;
11537: LD_ADDR_EXP 54
11541: PUSH
11542: LD_INT 1
11544: ST_TO_ADDR
// if p3 = 4 then
11545: LD_VAR 0 3
11549: PUSH
11550: LD_INT 4
11552: EQUAL
11553: IFFALSE 11563
// sSpec := true ;
11555: LD_ADDR_EXP 51
11559: PUSH
11560: LD_INT 1
11562: ST_TO_ADDR
// if p3 = 5 then
11563: LD_VAR 0 3
11567: PUSH
11568: LD_INT 5
11570: EQUAL
11571: IFFALSE 11581
// sLevel := true ;
11573: LD_ADDR_EXP 55
11577: PUSH
11578: LD_INT 1
11580: ST_TO_ADDR
// if p3 = 6 then
11581: LD_VAR 0 3
11585: PUSH
11586: LD_INT 6
11588: EQUAL
11589: IFFALSE 11599
// sArmoury := true ;
11591: LD_ADDR_EXP 56
11595: PUSH
11596: LD_INT 1
11598: ST_TO_ADDR
// if p3 = 7 then
11599: LD_VAR 0 3
11603: PUSH
11604: LD_INT 7
11606: EQUAL
11607: IFFALSE 11617
// sRadar := true ;
11609: LD_ADDR_EXP 57
11613: PUSH
11614: LD_INT 1
11616: ST_TO_ADDR
// if p3 = 8 then
11617: LD_VAR 0 3
11621: PUSH
11622: LD_INT 8
11624: EQUAL
11625: IFFALSE 11635
// sBunker := true ;
11627: LD_ADDR_EXP 58
11631: PUSH
11632: LD_INT 1
11634: ST_TO_ADDR
// if p3 = 9 then
11635: LD_VAR 0 3
11639: PUSH
11640: LD_INT 9
11642: EQUAL
11643: IFFALSE 11653
// sHack := true ;
11645: LD_ADDR_EXP 59
11649: PUSH
11650: LD_INT 1
11652: ST_TO_ADDR
// if p3 = 10 then
11653: LD_VAR 0 3
11657: PUSH
11658: LD_INT 10
11660: EQUAL
11661: IFFALSE 11671
// sFire := true ;
11663: LD_ADDR_EXP 60
11667: PUSH
11668: LD_INT 1
11670: ST_TO_ADDR
// if p3 = 11 then
11671: LD_VAR 0 3
11675: PUSH
11676: LD_INT 11
11678: EQUAL
11679: IFFALSE 11689
// sRefresh := true ;
11681: LD_ADDR_EXP 61
11685: PUSH
11686: LD_INT 1
11688: ST_TO_ADDR
// if p3 = 12 then
11689: LD_VAR 0 3
11693: PUSH
11694: LD_INT 12
11696: EQUAL
11697: IFFALSE 11707
// sExp := true ;
11699: LD_ADDR_EXP 62
11703: PUSH
11704: LD_INT 1
11706: ST_TO_ADDR
// if p3 = 13 then
11707: LD_VAR 0 3
11711: PUSH
11712: LD_INT 13
11714: EQUAL
11715: IFFALSE 11725
// sDepot := true ;
11717: LD_ADDR_EXP 63
11721: PUSH
11722: LD_INT 1
11724: ST_TO_ADDR
// if p3 = 14 then
11725: LD_VAR 0 3
11729: PUSH
11730: LD_INT 14
11732: EQUAL
11733: IFFALSE 11743
// sFlag := true ;
11735: LD_ADDR_EXP 64
11739: PUSH
11740: LD_INT 1
11742: ST_TO_ADDR
// if p3 = 15 then
11743: LD_VAR 0 3
11747: PUSH
11748: LD_INT 15
11750: EQUAL
11751: IFFALSE 11761
// sKamikadze := true ;
11753: LD_ADDR_EXP 72
11757: PUSH
11758: LD_INT 1
11760: ST_TO_ADDR
// if p3 = 16 then
11761: LD_VAR 0 3
11765: PUSH
11766: LD_INT 16
11768: EQUAL
11769: IFFALSE 11779
// sTroll := true ;
11771: LD_ADDR_EXP 73
11775: PUSH
11776: LD_INT 1
11778: ST_TO_ADDR
// if p3 = 17 then
11779: LD_VAR 0 3
11783: PUSH
11784: LD_INT 17
11786: EQUAL
11787: IFFALSE 11797
// sSlow := true ;
11789: LD_ADDR_EXP 74
11793: PUSH
11794: LD_INT 1
11796: ST_TO_ADDR
// if p3 = 18 then
11797: LD_VAR 0 3
11801: PUSH
11802: LD_INT 18
11804: EQUAL
11805: IFFALSE 11815
// sLack := true ;
11807: LD_ADDR_EXP 75
11811: PUSH
11812: LD_INT 1
11814: ST_TO_ADDR
// if p3 = 19 then
11815: LD_VAR 0 3
11819: PUSH
11820: LD_INT 19
11822: EQUAL
11823: IFFALSE 11833
// sTank := true ;
11825: LD_ADDR_EXP 77
11829: PUSH
11830: LD_INT 1
11832: ST_TO_ADDR
// if p3 = 20 then
11833: LD_VAR 0 3
11837: PUSH
11838: LD_INT 20
11840: EQUAL
11841: IFFALSE 11851
// sRemote := true ;
11843: LD_ADDR_EXP 78
11847: PUSH
11848: LD_INT 1
11850: ST_TO_ADDR
// if p3 = 21 then
11851: LD_VAR 0 3
11855: PUSH
11856: LD_INT 21
11858: EQUAL
11859: IFFALSE 11869
// sPowell := true ;
11861: LD_ADDR_EXP 79
11865: PUSH
11866: LD_INT 1
11868: ST_TO_ADDR
// if p3 = 22 then
11869: LD_VAR 0 3
11873: PUSH
11874: LD_INT 22
11876: EQUAL
11877: IFFALSE 11887
// sTeleport := true ;
11879: LD_ADDR_EXP 82
11883: PUSH
11884: LD_INT 1
11886: ST_TO_ADDR
// if p3 = 23 then
11887: LD_VAR 0 3
11891: PUSH
11892: LD_INT 23
11894: EQUAL
11895: IFFALSE 11905
// sOilTower := true ;
11897: LD_ADDR_EXP 84
11901: PUSH
11902: LD_INT 1
11904: ST_TO_ADDR
// if p3 = 24 then
11905: LD_VAR 0 3
11909: PUSH
11910: LD_INT 24
11912: EQUAL
11913: IFFALSE 11923
// sShovel := true ;
11915: LD_ADDR_EXP 85
11919: PUSH
11920: LD_INT 1
11922: ST_TO_ADDR
// if p3 = 25 then
11923: LD_VAR 0 3
11927: PUSH
11928: LD_INT 25
11930: EQUAL
11931: IFFALSE 11941
// sSheik := true ;
11933: LD_ADDR_EXP 86
11937: PUSH
11938: LD_INT 1
11940: ST_TO_ADDR
// if p3 = 26 then
11941: LD_VAR 0 3
11945: PUSH
11946: LD_INT 26
11948: EQUAL
11949: IFFALSE 11959
// sEarthquake := true ;
11951: LD_ADDR_EXP 88
11955: PUSH
11956: LD_INT 1
11958: ST_TO_ADDR
// if p3 = 27 then
11959: LD_VAR 0 3
11963: PUSH
11964: LD_INT 27
11966: EQUAL
11967: IFFALSE 11977
// sAI := true ;
11969: LD_ADDR_EXP 89
11973: PUSH
11974: LD_INT 1
11976: ST_TO_ADDR
// if p3 = 28 then
11977: LD_VAR 0 3
11981: PUSH
11982: LD_INT 28
11984: EQUAL
11985: IFFALSE 11995
// sCargo := true ;
11987: LD_ADDR_EXP 92
11991: PUSH
11992: LD_INT 1
11994: ST_TO_ADDR
// if p3 = 29 then
11995: LD_VAR 0 3
11999: PUSH
12000: LD_INT 29
12002: EQUAL
12003: IFFALSE 12013
// sDLaser := true ;
12005: LD_ADDR_EXP 93
12009: PUSH
12010: LD_INT 1
12012: ST_TO_ADDR
// if p3 = 30 then
12013: LD_VAR 0 3
12017: PUSH
12018: LD_INT 30
12020: EQUAL
12021: IFFALSE 12031
// sExchange := true ;
12023: LD_ADDR_EXP 94
12027: PUSH
12028: LD_INT 1
12030: ST_TO_ADDR
// if p3 = 31 then
12031: LD_VAR 0 3
12035: PUSH
12036: LD_INT 31
12038: EQUAL
12039: IFFALSE 12049
// sFac := true ;
12041: LD_ADDR_EXP 95
12045: PUSH
12046: LD_INT 1
12048: ST_TO_ADDR
// if p3 = 32 then
12049: LD_VAR 0 3
12053: PUSH
12054: LD_INT 32
12056: EQUAL
12057: IFFALSE 12067
// sPower := true ;
12059: LD_ADDR_EXP 96
12063: PUSH
12064: LD_INT 1
12066: ST_TO_ADDR
// if p3 = 33 then
12067: LD_VAR 0 3
12071: PUSH
12072: LD_INT 33
12074: EQUAL
12075: IFFALSE 12085
// sRandom := true ;
12077: LD_ADDR_EXP 97
12081: PUSH
12082: LD_INT 1
12084: ST_TO_ADDR
// if p3 = 34 then
12085: LD_VAR 0 3
12089: PUSH
12090: LD_INT 34
12092: EQUAL
12093: IFFALSE 12103
// sShield := true ;
12095: LD_ADDR_EXP 98
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// if p3 = 35 then
12103: LD_VAR 0 3
12107: PUSH
12108: LD_INT 35
12110: EQUAL
12111: IFFALSE 12121
// sTime := true ;
12113: LD_ADDR_EXP 99
12117: PUSH
12118: LD_INT 1
12120: ST_TO_ADDR
// if p3 = 36 then
12121: LD_VAR 0 3
12125: PUSH
12126: LD_INT 36
12128: EQUAL
12129: IFFALSE 12139
// sTools := true ;
12131: LD_ADDR_EXP 100
12135: PUSH
12136: LD_INT 1
12138: ST_TO_ADDR
// if p3 = 101 then
12139: LD_VAR 0 3
12143: PUSH
12144: LD_INT 101
12146: EQUAL
12147: IFFALSE 12157
// sSold := true ;
12149: LD_ADDR_EXP 65
12153: PUSH
12154: LD_INT 1
12156: ST_TO_ADDR
// if p3 = 102 then
12157: LD_VAR 0 3
12161: PUSH
12162: LD_INT 102
12164: EQUAL
12165: IFFALSE 12175
// sDiff := true ;
12167: LD_ADDR_EXP 66
12171: PUSH
12172: LD_INT 1
12174: ST_TO_ADDR
// if p3 = 103 then
12175: LD_VAR 0 3
12179: PUSH
12180: LD_INT 103
12182: EQUAL
12183: IFFALSE 12193
// sFog := true ;
12185: LD_ADDR_EXP 69
12189: PUSH
12190: LD_INT 1
12192: ST_TO_ADDR
// if p3 = 104 then
12193: LD_VAR 0 3
12197: PUSH
12198: LD_INT 104
12200: EQUAL
12201: IFFALSE 12211
// sReset := true ;
12203: LD_ADDR_EXP 70
12207: PUSH
12208: LD_INT 1
12210: ST_TO_ADDR
// if p3 = 105 then
12211: LD_VAR 0 3
12215: PUSH
12216: LD_INT 105
12218: EQUAL
12219: IFFALSE 12229
// sSun := true ;
12221: LD_ADDR_EXP 71
12225: PUSH
12226: LD_INT 1
12228: ST_TO_ADDR
// if p3 = 106 then
12229: LD_VAR 0 3
12233: PUSH
12234: LD_INT 106
12236: EQUAL
12237: IFFALSE 12247
// sTiger := true ;
12239: LD_ADDR_EXP 67
12243: PUSH
12244: LD_INT 1
12246: ST_TO_ADDR
// if p3 = 107 then
12247: LD_VAR 0 3
12251: PUSH
12252: LD_INT 107
12254: EQUAL
12255: IFFALSE 12265
// sBomb := true ;
12257: LD_ADDR_EXP 68
12261: PUSH
12262: LD_INT 1
12264: ST_TO_ADDR
// if p3 = 108 then
12265: LD_VAR 0 3
12269: PUSH
12270: LD_INT 108
12272: EQUAL
12273: IFFALSE 12283
// sWound := true ;
12275: LD_ADDR_EXP 76
12279: PUSH
12280: LD_INT 1
12282: ST_TO_ADDR
// if p3 = 109 then
12283: LD_VAR 0 3
12287: PUSH
12288: LD_INT 109
12290: EQUAL
12291: IFFALSE 12301
// sBetray := true ;
12293: LD_ADDR_EXP 80
12297: PUSH
12298: LD_INT 1
12300: ST_TO_ADDR
// if p3 = 110 then
12301: LD_VAR 0 3
12305: PUSH
12306: LD_INT 110
12308: EQUAL
12309: IFFALSE 12319
// sContamin := true ;
12311: LD_ADDR_EXP 81
12315: PUSH
12316: LD_INT 1
12318: ST_TO_ADDR
// if p3 = 111 then
12319: LD_VAR 0 3
12323: PUSH
12324: LD_INT 111
12326: EQUAL
12327: IFFALSE 12337
// sOil := true ;
12329: LD_ADDR_EXP 83
12333: PUSH
12334: LD_INT 1
12336: ST_TO_ADDR
// if p3 = 112 then
12337: LD_VAR 0 3
12341: PUSH
12342: LD_INT 112
12344: EQUAL
12345: IFFALSE 12355
// sStu := true ;
12347: LD_ADDR_EXP 87
12351: PUSH
12352: LD_INT 1
12354: ST_TO_ADDR
// if p3 = 113 then
12355: LD_VAR 0 3
12359: PUSH
12360: LD_INT 113
12362: EQUAL
12363: IFFALSE 12373
// sBazooka := true ;
12365: LD_ADDR_EXP 90
12369: PUSH
12370: LD_INT 1
12372: ST_TO_ADDR
// if p3 = 114 then
12373: LD_VAR 0 3
12377: PUSH
12378: LD_INT 114
12380: EQUAL
12381: IFFALSE 12391
// sMortar := true ;
12383: LD_ADDR_EXP 91
12387: PUSH
12388: LD_INT 1
12390: ST_TO_ADDR
// if p3 = 115 then
12391: LD_VAR 0 3
12395: PUSH
12396: LD_INT 115
12398: EQUAL
12399: IFFALSE 12409
// sRanger := true ;
12401: LD_ADDR_EXP 101
12405: PUSH
12406: LD_INT 1
12408: ST_TO_ADDR
// if p3 = 116 then
12409: LD_VAR 0 3
12413: PUSH
12414: LD_INT 116
12416: EQUAL
12417: IFFALSE 12427
// sComputer := true ;
12419: LD_ADDR_EXP 102
12423: PUSH
12424: LD_INT 1
12426: ST_TO_ADDR
// if p3 = 117 then
12427: LD_VAR 0 3
12431: PUSH
12432: LD_INT 117
12434: EQUAL
12435: IFFALSE 12445
// s30 := true ;
12437: LD_ADDR_EXP 103
12441: PUSH
12442: LD_INT 1
12444: ST_TO_ADDR
// if p3 = 118 then
12445: LD_VAR 0 3
12449: PUSH
12450: LD_INT 118
12452: EQUAL
12453: IFFALSE 12463
// s60 := true ;
12455: LD_ADDR_EXP 104
12459: PUSH
12460: LD_INT 1
12462: ST_TO_ADDR
// end ; if p2 = hack_mode then
12463: LD_VAR 0 2
12467: PUSH
12468: LD_INT 101
12470: EQUAL
12471: IFFALSE 12599
// begin case p3 of 1 :
12473: LD_VAR 0 3
12477: PUSH
12478: LD_INT 1
12480: DOUBLE
12481: EQUAL
12482: IFTRUE 12486
12484: GO 12493
12486: POP
// hHackUnlimitedResources ; 2 :
12487: CALL 24862 0 0
12491: GO 12599
12493: LD_INT 2
12495: DOUBLE
12496: EQUAL
12497: IFTRUE 12501
12499: GO 12508
12501: POP
// hHackSetLevel10 ; 3 :
12502: CALL 24995 0 0
12506: GO 12599
12508: LD_INT 3
12510: DOUBLE
12511: EQUAL
12512: IFTRUE 12516
12514: GO 12523
12516: POP
// hHackSetLevel10YourUnits ; 4 :
12517: CALL 25080 0 0
12521: GO 12599
12523: LD_INT 4
12525: DOUBLE
12526: EQUAL
12527: IFTRUE 12531
12529: GO 12538
12531: POP
// hHackInvincible ; 5 :
12532: CALL 25528 0 0
12536: GO 12599
12538: LD_INT 5
12540: DOUBLE
12541: EQUAL
12542: IFTRUE 12546
12544: GO 12553
12546: POP
// hHackInvisible ; 6 :
12547: CALL 25639 0 0
12551: GO 12599
12553: LD_INT 6
12555: DOUBLE
12556: EQUAL
12557: IFTRUE 12561
12559: GO 12568
12561: POP
// hHackChangeYourSide ; 7 :
12562: CALL 25696 0 0
12566: GO 12599
12568: LD_INT 7
12570: DOUBLE
12571: EQUAL
12572: IFTRUE 12576
12574: GO 12583
12576: POP
// hHackChangeUnitSide ; 8 :
12577: CALL 25738 0 0
12581: GO 12599
12583: LD_INT 8
12585: DOUBLE
12586: EQUAL
12587: IFTRUE 12591
12589: GO 12598
12591: POP
// hHackFog ; end ;
12592: CALL 25839 0 0
12596: GO 12599
12598: POP
// end ; if p2 = game_save_mode then
12599: LD_VAR 0 2
12603: PUSH
12604: LD_INT 102
12606: EQUAL
12607: IFFALSE 12664
// begin if p3 = 1 then
12609: LD_VAR 0 3
12613: PUSH
12614: LD_INT 1
12616: EQUAL
12617: IFFALSE 12629
// globalGameSaveCounter := p4 ;
12619: LD_ADDR_EXP 47
12623: PUSH
12624: LD_VAR 0 4
12628: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12629: LD_VAR 0 3
12633: PUSH
12634: LD_INT 2
12636: EQUAL
12637: IFFALSE 12645
12639: PUSH
12640: LD_EXP 47
12644: AND
12645: IFFALSE 12664
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12647: LD_STRING setGameSaveCounter(
12649: PUSH
12650: LD_EXP 47
12654: STR
12655: PUSH
12656: LD_STRING )
12658: STR
12659: PPUSH
12660: CALL_OW 559
// end ; end ;
12664: LD_VAR 0 7
12668: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12669: LD_INT 0
12671: PPUSH
// streamModeActive := false ;
12672: LD_ADDR_EXP 48
12676: PUSH
12677: LD_INT 0
12679: ST_TO_ADDR
// normalCounter := 36 ;
12680: LD_ADDR_EXP 49
12684: PUSH
12685: LD_INT 36
12687: ST_TO_ADDR
// hardcoreCounter := 18 ;
12688: LD_ADDR_EXP 50
12692: PUSH
12693: LD_INT 18
12695: ST_TO_ADDR
// sRocket := false ;
12696: LD_ADDR_EXP 53
12700: PUSH
12701: LD_INT 0
12703: ST_TO_ADDR
// sSpeed := false ;
12704: LD_ADDR_EXP 52
12708: PUSH
12709: LD_INT 0
12711: ST_TO_ADDR
// sEngine := false ;
12712: LD_ADDR_EXP 54
12716: PUSH
12717: LD_INT 0
12719: ST_TO_ADDR
// sSpec := false ;
12720: LD_ADDR_EXP 51
12724: PUSH
12725: LD_INT 0
12727: ST_TO_ADDR
// sLevel := false ;
12728: LD_ADDR_EXP 55
12732: PUSH
12733: LD_INT 0
12735: ST_TO_ADDR
// sArmoury := false ;
12736: LD_ADDR_EXP 56
12740: PUSH
12741: LD_INT 0
12743: ST_TO_ADDR
// sRadar := false ;
12744: LD_ADDR_EXP 57
12748: PUSH
12749: LD_INT 0
12751: ST_TO_ADDR
// sBunker := false ;
12752: LD_ADDR_EXP 58
12756: PUSH
12757: LD_INT 0
12759: ST_TO_ADDR
// sHack := false ;
12760: LD_ADDR_EXP 59
12764: PUSH
12765: LD_INT 0
12767: ST_TO_ADDR
// sFire := false ;
12768: LD_ADDR_EXP 60
12772: PUSH
12773: LD_INT 0
12775: ST_TO_ADDR
// sRefresh := false ;
12776: LD_ADDR_EXP 61
12780: PUSH
12781: LD_INT 0
12783: ST_TO_ADDR
// sExp := false ;
12784: LD_ADDR_EXP 62
12788: PUSH
12789: LD_INT 0
12791: ST_TO_ADDR
// sDepot := false ;
12792: LD_ADDR_EXP 63
12796: PUSH
12797: LD_INT 0
12799: ST_TO_ADDR
// sFlag := false ;
12800: LD_ADDR_EXP 64
12804: PUSH
12805: LD_INT 0
12807: ST_TO_ADDR
// sKamikadze := false ;
12808: LD_ADDR_EXP 72
12812: PUSH
12813: LD_INT 0
12815: ST_TO_ADDR
// sTroll := false ;
12816: LD_ADDR_EXP 73
12820: PUSH
12821: LD_INT 0
12823: ST_TO_ADDR
// sSlow := false ;
12824: LD_ADDR_EXP 74
12828: PUSH
12829: LD_INT 0
12831: ST_TO_ADDR
// sLack := false ;
12832: LD_ADDR_EXP 75
12836: PUSH
12837: LD_INT 0
12839: ST_TO_ADDR
// sTank := false ;
12840: LD_ADDR_EXP 77
12844: PUSH
12845: LD_INT 0
12847: ST_TO_ADDR
// sRemote := false ;
12848: LD_ADDR_EXP 78
12852: PUSH
12853: LD_INT 0
12855: ST_TO_ADDR
// sPowell := false ;
12856: LD_ADDR_EXP 79
12860: PUSH
12861: LD_INT 0
12863: ST_TO_ADDR
// sTeleport := false ;
12864: LD_ADDR_EXP 82
12868: PUSH
12869: LD_INT 0
12871: ST_TO_ADDR
// sOilTower := false ;
12872: LD_ADDR_EXP 84
12876: PUSH
12877: LD_INT 0
12879: ST_TO_ADDR
// sShovel := false ;
12880: LD_ADDR_EXP 85
12884: PUSH
12885: LD_INT 0
12887: ST_TO_ADDR
// sSheik := false ;
12888: LD_ADDR_EXP 86
12892: PUSH
12893: LD_INT 0
12895: ST_TO_ADDR
// sEarthquake := false ;
12896: LD_ADDR_EXP 88
12900: PUSH
12901: LD_INT 0
12903: ST_TO_ADDR
// sAI := false ;
12904: LD_ADDR_EXP 89
12908: PUSH
12909: LD_INT 0
12911: ST_TO_ADDR
// sCargo := false ;
12912: LD_ADDR_EXP 92
12916: PUSH
12917: LD_INT 0
12919: ST_TO_ADDR
// sDLaser := false ;
12920: LD_ADDR_EXP 93
12924: PUSH
12925: LD_INT 0
12927: ST_TO_ADDR
// sExchange := false ;
12928: LD_ADDR_EXP 94
12932: PUSH
12933: LD_INT 0
12935: ST_TO_ADDR
// sFac := false ;
12936: LD_ADDR_EXP 95
12940: PUSH
12941: LD_INT 0
12943: ST_TO_ADDR
// sPower := false ;
12944: LD_ADDR_EXP 96
12948: PUSH
12949: LD_INT 0
12951: ST_TO_ADDR
// sRandom := false ;
12952: LD_ADDR_EXP 97
12956: PUSH
12957: LD_INT 0
12959: ST_TO_ADDR
// sShield := false ;
12960: LD_ADDR_EXP 98
12964: PUSH
12965: LD_INT 0
12967: ST_TO_ADDR
// sTime := false ;
12968: LD_ADDR_EXP 99
12972: PUSH
12973: LD_INT 0
12975: ST_TO_ADDR
// sTools := false ;
12976: LD_ADDR_EXP 100
12980: PUSH
12981: LD_INT 0
12983: ST_TO_ADDR
// sSold := false ;
12984: LD_ADDR_EXP 65
12988: PUSH
12989: LD_INT 0
12991: ST_TO_ADDR
// sDiff := false ;
12992: LD_ADDR_EXP 66
12996: PUSH
12997: LD_INT 0
12999: ST_TO_ADDR
// sFog := false ;
13000: LD_ADDR_EXP 69
13004: PUSH
13005: LD_INT 0
13007: ST_TO_ADDR
// sReset := false ;
13008: LD_ADDR_EXP 70
13012: PUSH
13013: LD_INT 0
13015: ST_TO_ADDR
// sSun := false ;
13016: LD_ADDR_EXP 71
13020: PUSH
13021: LD_INT 0
13023: ST_TO_ADDR
// sTiger := false ;
13024: LD_ADDR_EXP 67
13028: PUSH
13029: LD_INT 0
13031: ST_TO_ADDR
// sBomb := false ;
13032: LD_ADDR_EXP 68
13036: PUSH
13037: LD_INT 0
13039: ST_TO_ADDR
// sWound := false ;
13040: LD_ADDR_EXP 76
13044: PUSH
13045: LD_INT 0
13047: ST_TO_ADDR
// sBetray := false ;
13048: LD_ADDR_EXP 80
13052: PUSH
13053: LD_INT 0
13055: ST_TO_ADDR
// sContamin := false ;
13056: LD_ADDR_EXP 81
13060: PUSH
13061: LD_INT 0
13063: ST_TO_ADDR
// sOil := false ;
13064: LD_ADDR_EXP 83
13068: PUSH
13069: LD_INT 0
13071: ST_TO_ADDR
// sStu := false ;
13072: LD_ADDR_EXP 87
13076: PUSH
13077: LD_INT 0
13079: ST_TO_ADDR
// sBazooka := false ;
13080: LD_ADDR_EXP 90
13084: PUSH
13085: LD_INT 0
13087: ST_TO_ADDR
// sMortar := false ;
13088: LD_ADDR_EXP 91
13092: PUSH
13093: LD_INT 0
13095: ST_TO_ADDR
// sRanger := false ;
13096: LD_ADDR_EXP 101
13100: PUSH
13101: LD_INT 0
13103: ST_TO_ADDR
// sComputer := false ;
13104: LD_ADDR_EXP 102
13108: PUSH
13109: LD_INT 0
13111: ST_TO_ADDR
// s30 := false ;
13112: LD_ADDR_EXP 103
13116: PUSH
13117: LD_INT 0
13119: ST_TO_ADDR
// s60 := false ;
13120: LD_ADDR_EXP 104
13124: PUSH
13125: LD_INT 0
13127: ST_TO_ADDR
// end ;
13128: LD_VAR 0 1
13132: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13133: LD_INT 0
13135: PPUSH
13136: PPUSH
13137: PPUSH
13138: PPUSH
13139: PPUSH
13140: PPUSH
13141: PPUSH
// result := [ ] ;
13142: LD_ADDR_VAR 0 2
13146: PUSH
13147: EMPTY
13148: ST_TO_ADDR
// if campaign_id = 1 then
13149: LD_OWVAR 69
13153: PUSH
13154: LD_INT 1
13156: EQUAL
13157: IFFALSE 16323
// begin case mission_number of 1 :
13159: LD_OWVAR 70
13163: PUSH
13164: LD_INT 1
13166: DOUBLE
13167: EQUAL
13168: IFTRUE 13172
13170: GO 13248
13172: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13173: LD_ADDR_VAR 0 2
13177: PUSH
13178: LD_INT 2
13180: PUSH
13181: LD_INT 4
13183: PUSH
13184: LD_INT 11
13186: PUSH
13187: LD_INT 12
13189: PUSH
13190: LD_INT 15
13192: PUSH
13193: LD_INT 16
13195: PUSH
13196: LD_INT 22
13198: PUSH
13199: LD_INT 23
13201: PUSH
13202: LD_INT 26
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: PUSH
13216: LD_INT 101
13218: PUSH
13219: LD_INT 102
13221: PUSH
13222: LD_INT 106
13224: PUSH
13225: LD_INT 116
13227: PUSH
13228: LD_INT 117
13230: PUSH
13231: LD_INT 118
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: ST_TO_ADDR
13246: GO 16321
13248: LD_INT 2
13250: DOUBLE
13251: EQUAL
13252: IFTRUE 13256
13254: GO 13340
13256: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13257: LD_ADDR_VAR 0 2
13261: PUSH
13262: LD_INT 2
13264: PUSH
13265: LD_INT 4
13267: PUSH
13268: LD_INT 11
13270: PUSH
13271: LD_INT 12
13273: PUSH
13274: LD_INT 15
13276: PUSH
13277: LD_INT 16
13279: PUSH
13280: LD_INT 22
13282: PUSH
13283: LD_INT 23
13285: PUSH
13286: LD_INT 26
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: PUSH
13300: LD_INT 101
13302: PUSH
13303: LD_INT 102
13305: PUSH
13306: LD_INT 105
13308: PUSH
13309: LD_INT 106
13311: PUSH
13312: LD_INT 108
13314: PUSH
13315: LD_INT 116
13317: PUSH
13318: LD_INT 117
13320: PUSH
13321: LD_INT 118
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: ST_TO_ADDR
13338: GO 16321
13340: LD_INT 3
13342: DOUBLE
13343: EQUAL
13344: IFTRUE 13348
13346: GO 13436
13348: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13349: LD_ADDR_VAR 0 2
13353: PUSH
13354: LD_INT 2
13356: PUSH
13357: LD_INT 4
13359: PUSH
13360: LD_INT 5
13362: PUSH
13363: LD_INT 11
13365: PUSH
13366: LD_INT 12
13368: PUSH
13369: LD_INT 15
13371: PUSH
13372: LD_INT 16
13374: PUSH
13375: LD_INT 22
13377: PUSH
13378: LD_INT 26
13380: PUSH
13381: LD_INT 36
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 101
13398: PUSH
13399: LD_INT 102
13401: PUSH
13402: LD_INT 105
13404: PUSH
13405: LD_INT 106
13407: PUSH
13408: LD_INT 108
13410: PUSH
13411: LD_INT 116
13413: PUSH
13414: LD_INT 117
13416: PUSH
13417: LD_INT 118
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: ST_TO_ADDR
13434: GO 16321
13436: LD_INT 4
13438: DOUBLE
13439: EQUAL
13440: IFTRUE 13444
13442: GO 13540
13444: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13445: LD_ADDR_VAR 0 2
13449: PUSH
13450: LD_INT 2
13452: PUSH
13453: LD_INT 4
13455: PUSH
13456: LD_INT 5
13458: PUSH
13459: LD_INT 8
13461: PUSH
13462: LD_INT 11
13464: PUSH
13465: LD_INT 12
13467: PUSH
13468: LD_INT 15
13470: PUSH
13471: LD_INT 16
13473: PUSH
13474: LD_INT 22
13476: PUSH
13477: LD_INT 23
13479: PUSH
13480: LD_INT 26
13482: PUSH
13483: LD_INT 36
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 101
13502: PUSH
13503: LD_INT 102
13505: PUSH
13506: LD_INT 105
13508: PUSH
13509: LD_INT 106
13511: PUSH
13512: LD_INT 108
13514: PUSH
13515: LD_INT 116
13517: PUSH
13518: LD_INT 117
13520: PUSH
13521: LD_INT 118
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: ST_TO_ADDR
13538: GO 16321
13540: LD_INT 5
13542: DOUBLE
13543: EQUAL
13544: IFTRUE 13548
13546: GO 13660
13548: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13549: LD_ADDR_VAR 0 2
13553: PUSH
13554: LD_INT 2
13556: PUSH
13557: LD_INT 4
13559: PUSH
13560: LD_INT 5
13562: PUSH
13563: LD_INT 6
13565: PUSH
13566: LD_INT 8
13568: PUSH
13569: LD_INT 11
13571: PUSH
13572: LD_INT 12
13574: PUSH
13575: LD_INT 15
13577: PUSH
13578: LD_INT 16
13580: PUSH
13581: LD_INT 22
13583: PUSH
13584: LD_INT 23
13586: PUSH
13587: LD_INT 25
13589: PUSH
13590: LD_INT 26
13592: PUSH
13593: LD_INT 36
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: PUSH
13612: LD_INT 101
13614: PUSH
13615: LD_INT 102
13617: PUSH
13618: LD_INT 105
13620: PUSH
13621: LD_INT 106
13623: PUSH
13624: LD_INT 108
13626: PUSH
13627: LD_INT 109
13629: PUSH
13630: LD_INT 112
13632: PUSH
13633: LD_INT 116
13635: PUSH
13636: LD_INT 117
13638: PUSH
13639: LD_INT 118
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: ST_TO_ADDR
13658: GO 16321
13660: LD_INT 6
13662: DOUBLE
13663: EQUAL
13664: IFTRUE 13668
13666: GO 13800
13668: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13669: LD_ADDR_VAR 0 2
13673: PUSH
13674: LD_INT 2
13676: PUSH
13677: LD_INT 4
13679: PUSH
13680: LD_INT 5
13682: PUSH
13683: LD_INT 6
13685: PUSH
13686: LD_INT 8
13688: PUSH
13689: LD_INT 11
13691: PUSH
13692: LD_INT 12
13694: PUSH
13695: LD_INT 15
13697: PUSH
13698: LD_INT 16
13700: PUSH
13701: LD_INT 20
13703: PUSH
13704: LD_INT 21
13706: PUSH
13707: LD_INT 22
13709: PUSH
13710: LD_INT 23
13712: PUSH
13713: LD_INT 25
13715: PUSH
13716: LD_INT 26
13718: PUSH
13719: LD_INT 30
13721: PUSH
13722: LD_INT 31
13724: PUSH
13725: LD_INT 32
13727: PUSH
13728: LD_INT 36
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: LD_INT 101
13754: PUSH
13755: LD_INT 102
13757: PUSH
13758: LD_INT 105
13760: PUSH
13761: LD_INT 106
13763: PUSH
13764: LD_INT 108
13766: PUSH
13767: LD_INT 109
13769: PUSH
13770: LD_INT 112
13772: PUSH
13773: LD_INT 116
13775: PUSH
13776: LD_INT 117
13778: PUSH
13779: LD_INT 118
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: ST_TO_ADDR
13798: GO 16321
13800: LD_INT 7
13802: DOUBLE
13803: EQUAL
13804: IFTRUE 13808
13806: GO 13920
13808: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13809: LD_ADDR_VAR 0 2
13813: PUSH
13814: LD_INT 2
13816: PUSH
13817: LD_INT 4
13819: PUSH
13820: LD_INT 5
13822: PUSH
13823: LD_INT 7
13825: PUSH
13826: LD_INT 11
13828: PUSH
13829: LD_INT 12
13831: PUSH
13832: LD_INT 15
13834: PUSH
13835: LD_INT 16
13837: PUSH
13838: LD_INT 20
13840: PUSH
13841: LD_INT 21
13843: PUSH
13844: LD_INT 22
13846: PUSH
13847: LD_INT 23
13849: PUSH
13850: LD_INT 25
13852: PUSH
13853: LD_INT 26
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: PUSH
13872: LD_INT 101
13874: PUSH
13875: LD_INT 102
13877: PUSH
13878: LD_INT 103
13880: PUSH
13881: LD_INT 105
13883: PUSH
13884: LD_INT 106
13886: PUSH
13887: LD_INT 108
13889: PUSH
13890: LD_INT 112
13892: PUSH
13893: LD_INT 116
13895: PUSH
13896: LD_INT 117
13898: PUSH
13899: LD_INT 118
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: ST_TO_ADDR
13918: GO 16321
13920: LD_INT 8
13922: DOUBLE
13923: EQUAL
13924: IFTRUE 13928
13926: GO 14068
13928: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13929: LD_ADDR_VAR 0 2
13933: PUSH
13934: LD_INT 2
13936: PUSH
13937: LD_INT 4
13939: PUSH
13940: LD_INT 5
13942: PUSH
13943: LD_INT 6
13945: PUSH
13946: LD_INT 7
13948: PUSH
13949: LD_INT 8
13951: PUSH
13952: LD_INT 11
13954: PUSH
13955: LD_INT 12
13957: PUSH
13958: LD_INT 15
13960: PUSH
13961: LD_INT 16
13963: PUSH
13964: LD_INT 20
13966: PUSH
13967: LD_INT 21
13969: PUSH
13970: LD_INT 22
13972: PUSH
13973: LD_INT 23
13975: PUSH
13976: LD_INT 25
13978: PUSH
13979: LD_INT 26
13981: PUSH
13982: LD_INT 30
13984: PUSH
13985: LD_INT 31
13987: PUSH
13988: LD_INT 32
13990: PUSH
13991: LD_INT 36
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: PUSH
14016: LD_INT 101
14018: PUSH
14019: LD_INT 102
14021: PUSH
14022: LD_INT 103
14024: PUSH
14025: LD_INT 105
14027: PUSH
14028: LD_INT 106
14030: PUSH
14031: LD_INT 108
14033: PUSH
14034: LD_INT 109
14036: PUSH
14037: LD_INT 112
14039: PUSH
14040: LD_INT 116
14042: PUSH
14043: LD_INT 117
14045: PUSH
14046: LD_INT 118
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: ST_TO_ADDR
14066: GO 16321
14068: LD_INT 9
14070: DOUBLE
14071: EQUAL
14072: IFTRUE 14076
14074: GO 14224
14076: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14077: LD_ADDR_VAR 0 2
14081: PUSH
14082: LD_INT 2
14084: PUSH
14085: LD_INT 4
14087: PUSH
14088: LD_INT 5
14090: PUSH
14091: LD_INT 6
14093: PUSH
14094: LD_INT 7
14096: PUSH
14097: LD_INT 8
14099: PUSH
14100: LD_INT 11
14102: PUSH
14103: LD_INT 12
14105: PUSH
14106: LD_INT 15
14108: PUSH
14109: LD_INT 16
14111: PUSH
14112: LD_INT 20
14114: PUSH
14115: LD_INT 21
14117: PUSH
14118: LD_INT 22
14120: PUSH
14121: LD_INT 23
14123: PUSH
14124: LD_INT 25
14126: PUSH
14127: LD_INT 26
14129: PUSH
14130: LD_INT 28
14132: PUSH
14133: LD_INT 30
14135: PUSH
14136: LD_INT 31
14138: PUSH
14139: LD_INT 32
14141: PUSH
14142: LD_INT 36
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: PUSH
14168: LD_INT 101
14170: PUSH
14171: LD_INT 102
14173: PUSH
14174: LD_INT 103
14176: PUSH
14177: LD_INT 105
14179: PUSH
14180: LD_INT 106
14182: PUSH
14183: LD_INT 108
14185: PUSH
14186: LD_INT 109
14188: PUSH
14189: LD_INT 112
14191: PUSH
14192: LD_INT 114
14194: PUSH
14195: LD_INT 116
14197: PUSH
14198: LD_INT 117
14200: PUSH
14201: LD_INT 118
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: ST_TO_ADDR
14222: GO 16321
14224: LD_INT 10
14226: DOUBLE
14227: EQUAL
14228: IFTRUE 14232
14230: GO 14428
14232: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14233: LD_ADDR_VAR 0 2
14237: PUSH
14238: LD_INT 2
14240: PUSH
14241: LD_INT 4
14243: PUSH
14244: LD_INT 5
14246: PUSH
14247: LD_INT 6
14249: PUSH
14250: LD_INT 7
14252: PUSH
14253: LD_INT 8
14255: PUSH
14256: LD_INT 9
14258: PUSH
14259: LD_INT 10
14261: PUSH
14262: LD_INT 11
14264: PUSH
14265: LD_INT 12
14267: PUSH
14268: LD_INT 13
14270: PUSH
14271: LD_INT 14
14273: PUSH
14274: LD_INT 15
14276: PUSH
14277: LD_INT 16
14279: PUSH
14280: LD_INT 17
14282: PUSH
14283: LD_INT 18
14285: PUSH
14286: LD_INT 19
14288: PUSH
14289: LD_INT 20
14291: PUSH
14292: LD_INT 21
14294: PUSH
14295: LD_INT 22
14297: PUSH
14298: LD_INT 23
14300: PUSH
14301: LD_INT 24
14303: PUSH
14304: LD_INT 25
14306: PUSH
14307: LD_INT 26
14309: PUSH
14310: LD_INT 28
14312: PUSH
14313: LD_INT 30
14315: PUSH
14316: LD_INT 31
14318: PUSH
14319: LD_INT 32
14321: PUSH
14322: LD_INT 36
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: PUSH
14356: LD_INT 101
14358: PUSH
14359: LD_INT 102
14361: PUSH
14362: LD_INT 103
14364: PUSH
14365: LD_INT 104
14367: PUSH
14368: LD_INT 105
14370: PUSH
14371: LD_INT 106
14373: PUSH
14374: LD_INT 107
14376: PUSH
14377: LD_INT 108
14379: PUSH
14380: LD_INT 109
14382: PUSH
14383: LD_INT 110
14385: PUSH
14386: LD_INT 111
14388: PUSH
14389: LD_INT 112
14391: PUSH
14392: LD_INT 114
14394: PUSH
14395: LD_INT 116
14397: PUSH
14398: LD_INT 117
14400: PUSH
14401: LD_INT 118
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: ST_TO_ADDR
14426: GO 16321
14428: LD_INT 11
14430: DOUBLE
14431: EQUAL
14432: IFTRUE 14436
14434: GO 14640
14436: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14437: LD_ADDR_VAR 0 2
14441: PUSH
14442: LD_INT 2
14444: PUSH
14445: LD_INT 3
14447: PUSH
14448: LD_INT 4
14450: PUSH
14451: LD_INT 5
14453: PUSH
14454: LD_INT 6
14456: PUSH
14457: LD_INT 7
14459: PUSH
14460: LD_INT 8
14462: PUSH
14463: LD_INT 9
14465: PUSH
14466: LD_INT 10
14468: PUSH
14469: LD_INT 11
14471: PUSH
14472: LD_INT 12
14474: PUSH
14475: LD_INT 13
14477: PUSH
14478: LD_INT 14
14480: PUSH
14481: LD_INT 15
14483: PUSH
14484: LD_INT 16
14486: PUSH
14487: LD_INT 17
14489: PUSH
14490: LD_INT 18
14492: PUSH
14493: LD_INT 19
14495: PUSH
14496: LD_INT 20
14498: PUSH
14499: LD_INT 21
14501: PUSH
14502: LD_INT 22
14504: PUSH
14505: LD_INT 23
14507: PUSH
14508: LD_INT 24
14510: PUSH
14511: LD_INT 25
14513: PUSH
14514: LD_INT 26
14516: PUSH
14517: LD_INT 28
14519: PUSH
14520: LD_INT 30
14522: PUSH
14523: LD_INT 31
14525: PUSH
14526: LD_INT 32
14528: PUSH
14529: LD_INT 34
14531: PUSH
14532: LD_INT 36
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: PUSH
14568: LD_INT 101
14570: PUSH
14571: LD_INT 102
14573: PUSH
14574: LD_INT 103
14576: PUSH
14577: LD_INT 104
14579: PUSH
14580: LD_INT 105
14582: PUSH
14583: LD_INT 106
14585: PUSH
14586: LD_INT 107
14588: PUSH
14589: LD_INT 108
14591: PUSH
14592: LD_INT 109
14594: PUSH
14595: LD_INT 110
14597: PUSH
14598: LD_INT 111
14600: PUSH
14601: LD_INT 112
14603: PUSH
14604: LD_INT 114
14606: PUSH
14607: LD_INT 116
14609: PUSH
14610: LD_INT 117
14612: PUSH
14613: LD_INT 118
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: ST_TO_ADDR
14638: GO 16321
14640: LD_INT 12
14642: DOUBLE
14643: EQUAL
14644: IFTRUE 14648
14646: GO 14868
14648: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14649: LD_ADDR_VAR 0 2
14653: PUSH
14654: LD_INT 1
14656: PUSH
14657: LD_INT 2
14659: PUSH
14660: LD_INT 3
14662: PUSH
14663: LD_INT 4
14665: PUSH
14666: LD_INT 5
14668: PUSH
14669: LD_INT 6
14671: PUSH
14672: LD_INT 7
14674: PUSH
14675: LD_INT 8
14677: PUSH
14678: LD_INT 9
14680: PUSH
14681: LD_INT 10
14683: PUSH
14684: LD_INT 11
14686: PUSH
14687: LD_INT 12
14689: PUSH
14690: LD_INT 13
14692: PUSH
14693: LD_INT 14
14695: PUSH
14696: LD_INT 15
14698: PUSH
14699: LD_INT 16
14701: PUSH
14702: LD_INT 17
14704: PUSH
14705: LD_INT 18
14707: PUSH
14708: LD_INT 19
14710: PUSH
14711: LD_INT 20
14713: PUSH
14714: LD_INT 21
14716: PUSH
14717: LD_INT 22
14719: PUSH
14720: LD_INT 23
14722: PUSH
14723: LD_INT 24
14725: PUSH
14726: LD_INT 25
14728: PUSH
14729: LD_INT 26
14731: PUSH
14732: LD_INT 27
14734: PUSH
14735: LD_INT 28
14737: PUSH
14738: LD_INT 30
14740: PUSH
14741: LD_INT 31
14743: PUSH
14744: LD_INT 32
14746: PUSH
14747: LD_INT 33
14749: PUSH
14750: LD_INT 34
14752: PUSH
14753: LD_INT 36
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: PUSH
14792: LD_INT 101
14794: PUSH
14795: LD_INT 102
14797: PUSH
14798: LD_INT 103
14800: PUSH
14801: LD_INT 104
14803: PUSH
14804: LD_INT 105
14806: PUSH
14807: LD_INT 106
14809: PUSH
14810: LD_INT 107
14812: PUSH
14813: LD_INT 108
14815: PUSH
14816: LD_INT 109
14818: PUSH
14819: LD_INT 110
14821: PUSH
14822: LD_INT 111
14824: PUSH
14825: LD_INT 112
14827: PUSH
14828: LD_INT 113
14830: PUSH
14831: LD_INT 114
14833: PUSH
14834: LD_INT 116
14836: PUSH
14837: LD_INT 117
14839: PUSH
14840: LD_INT 118
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: ST_TO_ADDR
14866: GO 16321
14868: LD_INT 13
14870: DOUBLE
14871: EQUAL
14872: IFTRUE 14876
14874: GO 15084
14876: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14877: LD_ADDR_VAR 0 2
14881: PUSH
14882: LD_INT 1
14884: PUSH
14885: LD_INT 2
14887: PUSH
14888: LD_INT 3
14890: PUSH
14891: LD_INT 4
14893: PUSH
14894: LD_INT 5
14896: PUSH
14897: LD_INT 8
14899: PUSH
14900: LD_INT 9
14902: PUSH
14903: LD_INT 10
14905: PUSH
14906: LD_INT 11
14908: PUSH
14909: LD_INT 12
14911: PUSH
14912: LD_INT 14
14914: PUSH
14915: LD_INT 15
14917: PUSH
14918: LD_INT 16
14920: PUSH
14921: LD_INT 17
14923: PUSH
14924: LD_INT 18
14926: PUSH
14927: LD_INT 19
14929: PUSH
14930: LD_INT 20
14932: PUSH
14933: LD_INT 21
14935: PUSH
14936: LD_INT 22
14938: PUSH
14939: LD_INT 23
14941: PUSH
14942: LD_INT 24
14944: PUSH
14945: LD_INT 25
14947: PUSH
14948: LD_INT 26
14950: PUSH
14951: LD_INT 27
14953: PUSH
14954: LD_INT 28
14956: PUSH
14957: LD_INT 30
14959: PUSH
14960: LD_INT 31
14962: PUSH
14963: LD_INT 32
14965: PUSH
14966: LD_INT 33
14968: PUSH
14969: LD_INT 34
14971: PUSH
14972: LD_INT 36
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: PUSH
15008: LD_INT 101
15010: PUSH
15011: LD_INT 102
15013: PUSH
15014: LD_INT 103
15016: PUSH
15017: LD_INT 104
15019: PUSH
15020: LD_INT 105
15022: PUSH
15023: LD_INT 106
15025: PUSH
15026: LD_INT 107
15028: PUSH
15029: LD_INT 108
15031: PUSH
15032: LD_INT 109
15034: PUSH
15035: LD_INT 110
15037: PUSH
15038: LD_INT 111
15040: PUSH
15041: LD_INT 112
15043: PUSH
15044: LD_INT 113
15046: PUSH
15047: LD_INT 114
15049: PUSH
15050: LD_INT 116
15052: PUSH
15053: LD_INT 117
15055: PUSH
15056: LD_INT 118
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: ST_TO_ADDR
15082: GO 16321
15084: LD_INT 14
15086: DOUBLE
15087: EQUAL
15088: IFTRUE 15092
15090: GO 15316
15092: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15093: LD_ADDR_VAR 0 2
15097: PUSH
15098: LD_INT 1
15100: PUSH
15101: LD_INT 2
15103: PUSH
15104: LD_INT 3
15106: PUSH
15107: LD_INT 4
15109: PUSH
15110: LD_INT 5
15112: PUSH
15113: LD_INT 6
15115: PUSH
15116: LD_INT 7
15118: PUSH
15119: LD_INT 8
15121: PUSH
15122: LD_INT 9
15124: PUSH
15125: LD_INT 10
15127: PUSH
15128: LD_INT 11
15130: PUSH
15131: LD_INT 12
15133: PUSH
15134: LD_INT 13
15136: PUSH
15137: LD_INT 14
15139: PUSH
15140: LD_INT 15
15142: PUSH
15143: LD_INT 16
15145: PUSH
15146: LD_INT 17
15148: PUSH
15149: LD_INT 18
15151: PUSH
15152: LD_INT 19
15154: PUSH
15155: LD_INT 20
15157: PUSH
15158: LD_INT 21
15160: PUSH
15161: LD_INT 22
15163: PUSH
15164: LD_INT 23
15166: PUSH
15167: LD_INT 24
15169: PUSH
15170: LD_INT 25
15172: PUSH
15173: LD_INT 26
15175: PUSH
15176: LD_INT 27
15178: PUSH
15179: LD_INT 28
15181: PUSH
15182: LD_INT 29
15184: PUSH
15185: LD_INT 30
15187: PUSH
15188: LD_INT 31
15190: PUSH
15191: LD_INT 32
15193: PUSH
15194: LD_INT 33
15196: PUSH
15197: LD_INT 34
15199: PUSH
15200: LD_INT 36
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: PUSH
15240: LD_INT 101
15242: PUSH
15243: LD_INT 102
15245: PUSH
15246: LD_INT 103
15248: PUSH
15249: LD_INT 104
15251: PUSH
15252: LD_INT 105
15254: PUSH
15255: LD_INT 106
15257: PUSH
15258: LD_INT 107
15260: PUSH
15261: LD_INT 108
15263: PUSH
15264: LD_INT 109
15266: PUSH
15267: LD_INT 110
15269: PUSH
15270: LD_INT 111
15272: PUSH
15273: LD_INT 112
15275: PUSH
15276: LD_INT 113
15278: PUSH
15279: LD_INT 114
15281: PUSH
15282: LD_INT 116
15284: PUSH
15285: LD_INT 117
15287: PUSH
15288: LD_INT 118
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: ST_TO_ADDR
15314: GO 16321
15316: LD_INT 15
15318: DOUBLE
15319: EQUAL
15320: IFTRUE 15324
15322: GO 15548
15324: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15325: LD_ADDR_VAR 0 2
15329: PUSH
15330: LD_INT 1
15332: PUSH
15333: LD_INT 2
15335: PUSH
15336: LD_INT 3
15338: PUSH
15339: LD_INT 4
15341: PUSH
15342: LD_INT 5
15344: PUSH
15345: LD_INT 6
15347: PUSH
15348: LD_INT 7
15350: PUSH
15351: LD_INT 8
15353: PUSH
15354: LD_INT 9
15356: PUSH
15357: LD_INT 10
15359: PUSH
15360: LD_INT 11
15362: PUSH
15363: LD_INT 12
15365: PUSH
15366: LD_INT 13
15368: PUSH
15369: LD_INT 14
15371: PUSH
15372: LD_INT 15
15374: PUSH
15375: LD_INT 16
15377: PUSH
15378: LD_INT 17
15380: PUSH
15381: LD_INT 18
15383: PUSH
15384: LD_INT 19
15386: PUSH
15387: LD_INT 20
15389: PUSH
15390: LD_INT 21
15392: PUSH
15393: LD_INT 22
15395: PUSH
15396: LD_INT 23
15398: PUSH
15399: LD_INT 24
15401: PUSH
15402: LD_INT 25
15404: PUSH
15405: LD_INT 26
15407: PUSH
15408: LD_INT 27
15410: PUSH
15411: LD_INT 28
15413: PUSH
15414: LD_INT 29
15416: PUSH
15417: LD_INT 30
15419: PUSH
15420: LD_INT 31
15422: PUSH
15423: LD_INT 32
15425: PUSH
15426: LD_INT 33
15428: PUSH
15429: LD_INT 34
15431: PUSH
15432: LD_INT 36
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: PUSH
15472: LD_INT 101
15474: PUSH
15475: LD_INT 102
15477: PUSH
15478: LD_INT 103
15480: PUSH
15481: LD_INT 104
15483: PUSH
15484: LD_INT 105
15486: PUSH
15487: LD_INT 106
15489: PUSH
15490: LD_INT 107
15492: PUSH
15493: LD_INT 108
15495: PUSH
15496: LD_INT 109
15498: PUSH
15499: LD_INT 110
15501: PUSH
15502: LD_INT 111
15504: PUSH
15505: LD_INT 112
15507: PUSH
15508: LD_INT 113
15510: PUSH
15511: LD_INT 114
15513: PUSH
15514: LD_INT 116
15516: PUSH
15517: LD_INT 117
15519: PUSH
15520: LD_INT 118
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: ST_TO_ADDR
15546: GO 16321
15548: LD_INT 16
15550: DOUBLE
15551: EQUAL
15552: IFTRUE 15556
15554: GO 15692
15556: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15557: LD_ADDR_VAR 0 2
15561: PUSH
15562: LD_INT 2
15564: PUSH
15565: LD_INT 4
15567: PUSH
15568: LD_INT 5
15570: PUSH
15571: LD_INT 7
15573: PUSH
15574: LD_INT 11
15576: PUSH
15577: LD_INT 12
15579: PUSH
15580: LD_INT 15
15582: PUSH
15583: LD_INT 16
15585: PUSH
15586: LD_INT 20
15588: PUSH
15589: LD_INT 21
15591: PUSH
15592: LD_INT 22
15594: PUSH
15595: LD_INT 23
15597: PUSH
15598: LD_INT 25
15600: PUSH
15601: LD_INT 26
15603: PUSH
15604: LD_INT 30
15606: PUSH
15607: LD_INT 31
15609: PUSH
15610: LD_INT 32
15612: PUSH
15613: LD_INT 33
15615: PUSH
15616: LD_INT 34
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: PUSH
15640: LD_INT 101
15642: PUSH
15643: LD_INT 102
15645: PUSH
15646: LD_INT 103
15648: PUSH
15649: LD_INT 106
15651: PUSH
15652: LD_INT 108
15654: PUSH
15655: LD_INT 112
15657: PUSH
15658: LD_INT 113
15660: PUSH
15661: LD_INT 114
15663: PUSH
15664: LD_INT 116
15666: PUSH
15667: LD_INT 117
15669: PUSH
15670: LD_INT 118
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: ST_TO_ADDR
15690: GO 16321
15692: LD_INT 17
15694: DOUBLE
15695: EQUAL
15696: IFTRUE 15700
15698: GO 15924
15700: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15701: LD_ADDR_VAR 0 2
15705: PUSH
15706: LD_INT 1
15708: PUSH
15709: LD_INT 2
15711: PUSH
15712: LD_INT 3
15714: PUSH
15715: LD_INT 4
15717: PUSH
15718: LD_INT 5
15720: PUSH
15721: LD_INT 6
15723: PUSH
15724: LD_INT 7
15726: PUSH
15727: LD_INT 8
15729: PUSH
15730: LD_INT 9
15732: PUSH
15733: LD_INT 10
15735: PUSH
15736: LD_INT 11
15738: PUSH
15739: LD_INT 12
15741: PUSH
15742: LD_INT 13
15744: PUSH
15745: LD_INT 14
15747: PUSH
15748: LD_INT 15
15750: PUSH
15751: LD_INT 16
15753: PUSH
15754: LD_INT 17
15756: PUSH
15757: LD_INT 18
15759: PUSH
15760: LD_INT 19
15762: PUSH
15763: LD_INT 20
15765: PUSH
15766: LD_INT 21
15768: PUSH
15769: LD_INT 22
15771: PUSH
15772: LD_INT 23
15774: PUSH
15775: LD_INT 24
15777: PUSH
15778: LD_INT 25
15780: PUSH
15781: LD_INT 26
15783: PUSH
15784: LD_INT 27
15786: PUSH
15787: LD_INT 28
15789: PUSH
15790: LD_INT 29
15792: PUSH
15793: LD_INT 30
15795: PUSH
15796: LD_INT 31
15798: PUSH
15799: LD_INT 32
15801: PUSH
15802: LD_INT 33
15804: PUSH
15805: LD_INT 34
15807: PUSH
15808: LD_INT 36
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: PUSH
15848: LD_INT 101
15850: PUSH
15851: LD_INT 102
15853: PUSH
15854: LD_INT 103
15856: PUSH
15857: LD_INT 104
15859: PUSH
15860: LD_INT 105
15862: PUSH
15863: LD_INT 106
15865: PUSH
15866: LD_INT 107
15868: PUSH
15869: LD_INT 108
15871: PUSH
15872: LD_INT 109
15874: PUSH
15875: LD_INT 110
15877: PUSH
15878: LD_INT 111
15880: PUSH
15881: LD_INT 112
15883: PUSH
15884: LD_INT 113
15886: PUSH
15887: LD_INT 114
15889: PUSH
15890: LD_INT 116
15892: PUSH
15893: LD_INT 117
15895: PUSH
15896: LD_INT 118
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: ST_TO_ADDR
15922: GO 16321
15924: LD_INT 18
15926: DOUBLE
15927: EQUAL
15928: IFTRUE 15932
15930: GO 16080
15932: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15933: LD_ADDR_VAR 0 2
15937: PUSH
15938: LD_INT 2
15940: PUSH
15941: LD_INT 4
15943: PUSH
15944: LD_INT 5
15946: PUSH
15947: LD_INT 7
15949: PUSH
15950: LD_INT 11
15952: PUSH
15953: LD_INT 12
15955: PUSH
15956: LD_INT 15
15958: PUSH
15959: LD_INT 16
15961: PUSH
15962: LD_INT 20
15964: PUSH
15965: LD_INT 21
15967: PUSH
15968: LD_INT 22
15970: PUSH
15971: LD_INT 23
15973: PUSH
15974: LD_INT 25
15976: PUSH
15977: LD_INT 26
15979: PUSH
15980: LD_INT 30
15982: PUSH
15983: LD_INT 31
15985: PUSH
15986: LD_INT 32
15988: PUSH
15989: LD_INT 33
15991: PUSH
15992: LD_INT 34
15994: PUSH
15995: LD_INT 35
15997: PUSH
15998: LD_INT 36
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 101
16026: PUSH
16027: LD_INT 102
16029: PUSH
16030: LD_INT 103
16032: PUSH
16033: LD_INT 106
16035: PUSH
16036: LD_INT 108
16038: PUSH
16039: LD_INT 112
16041: PUSH
16042: LD_INT 113
16044: PUSH
16045: LD_INT 114
16047: PUSH
16048: LD_INT 115
16050: PUSH
16051: LD_INT 116
16053: PUSH
16054: LD_INT 117
16056: PUSH
16057: LD_INT 118
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: ST_TO_ADDR
16078: GO 16321
16080: LD_INT 19
16082: DOUBLE
16083: EQUAL
16084: IFTRUE 16088
16086: GO 16320
16088: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16089: LD_ADDR_VAR 0 2
16093: PUSH
16094: LD_INT 1
16096: PUSH
16097: LD_INT 2
16099: PUSH
16100: LD_INT 3
16102: PUSH
16103: LD_INT 4
16105: PUSH
16106: LD_INT 5
16108: PUSH
16109: LD_INT 6
16111: PUSH
16112: LD_INT 7
16114: PUSH
16115: LD_INT 8
16117: PUSH
16118: LD_INT 9
16120: PUSH
16121: LD_INT 10
16123: PUSH
16124: LD_INT 11
16126: PUSH
16127: LD_INT 12
16129: PUSH
16130: LD_INT 13
16132: PUSH
16133: LD_INT 14
16135: PUSH
16136: LD_INT 15
16138: PUSH
16139: LD_INT 16
16141: PUSH
16142: LD_INT 17
16144: PUSH
16145: LD_INT 18
16147: PUSH
16148: LD_INT 19
16150: PUSH
16151: LD_INT 20
16153: PUSH
16154: LD_INT 21
16156: PUSH
16157: LD_INT 22
16159: PUSH
16160: LD_INT 23
16162: PUSH
16163: LD_INT 24
16165: PUSH
16166: LD_INT 25
16168: PUSH
16169: LD_INT 26
16171: PUSH
16172: LD_INT 27
16174: PUSH
16175: LD_INT 28
16177: PUSH
16178: LD_INT 29
16180: PUSH
16181: LD_INT 30
16183: PUSH
16184: LD_INT 31
16186: PUSH
16187: LD_INT 32
16189: PUSH
16190: LD_INT 33
16192: PUSH
16193: LD_INT 34
16195: PUSH
16196: LD_INT 35
16198: PUSH
16199: LD_INT 36
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 101
16242: PUSH
16243: LD_INT 102
16245: PUSH
16246: LD_INT 103
16248: PUSH
16249: LD_INT 104
16251: PUSH
16252: LD_INT 105
16254: PUSH
16255: LD_INT 106
16257: PUSH
16258: LD_INT 107
16260: PUSH
16261: LD_INT 108
16263: PUSH
16264: LD_INT 109
16266: PUSH
16267: LD_INT 110
16269: PUSH
16270: LD_INT 111
16272: PUSH
16273: LD_INT 112
16275: PUSH
16276: LD_INT 113
16278: PUSH
16279: LD_INT 114
16281: PUSH
16282: LD_INT 115
16284: PUSH
16285: LD_INT 116
16287: PUSH
16288: LD_INT 117
16290: PUSH
16291: LD_INT 118
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: ST_TO_ADDR
16318: GO 16321
16320: POP
// end else
16321: GO 16552
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16323: LD_ADDR_VAR 0 2
16327: PUSH
16328: LD_INT 1
16330: PUSH
16331: LD_INT 2
16333: PUSH
16334: LD_INT 3
16336: PUSH
16337: LD_INT 4
16339: PUSH
16340: LD_INT 5
16342: PUSH
16343: LD_INT 6
16345: PUSH
16346: LD_INT 7
16348: PUSH
16349: LD_INT 8
16351: PUSH
16352: LD_INT 9
16354: PUSH
16355: LD_INT 10
16357: PUSH
16358: LD_INT 11
16360: PUSH
16361: LD_INT 12
16363: PUSH
16364: LD_INT 13
16366: PUSH
16367: LD_INT 14
16369: PUSH
16370: LD_INT 15
16372: PUSH
16373: LD_INT 16
16375: PUSH
16376: LD_INT 17
16378: PUSH
16379: LD_INT 18
16381: PUSH
16382: LD_INT 19
16384: PUSH
16385: LD_INT 20
16387: PUSH
16388: LD_INT 21
16390: PUSH
16391: LD_INT 22
16393: PUSH
16394: LD_INT 23
16396: PUSH
16397: LD_INT 24
16399: PUSH
16400: LD_INT 25
16402: PUSH
16403: LD_INT 26
16405: PUSH
16406: LD_INT 27
16408: PUSH
16409: LD_INT 28
16411: PUSH
16412: LD_INT 29
16414: PUSH
16415: LD_INT 30
16417: PUSH
16418: LD_INT 31
16420: PUSH
16421: LD_INT 32
16423: PUSH
16424: LD_INT 33
16426: PUSH
16427: LD_INT 34
16429: PUSH
16430: LD_INT 35
16432: PUSH
16433: LD_INT 36
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: PUSH
16474: LD_INT 101
16476: PUSH
16477: LD_INT 102
16479: PUSH
16480: LD_INT 103
16482: PUSH
16483: LD_INT 104
16485: PUSH
16486: LD_INT 105
16488: PUSH
16489: LD_INT 106
16491: PUSH
16492: LD_INT 107
16494: PUSH
16495: LD_INT 108
16497: PUSH
16498: LD_INT 109
16500: PUSH
16501: LD_INT 110
16503: PUSH
16504: LD_INT 111
16506: PUSH
16507: LD_INT 112
16509: PUSH
16510: LD_INT 113
16512: PUSH
16513: LD_INT 114
16515: PUSH
16516: LD_INT 115
16518: PUSH
16519: LD_INT 116
16521: PUSH
16522: LD_INT 117
16524: PUSH
16525: LD_INT 118
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: ST_TO_ADDR
// if result then
16552: LD_VAR 0 2
16556: IFFALSE 17342
// begin normal :=  ;
16558: LD_ADDR_VAR 0 5
16562: PUSH
16563: LD_STRING 
16565: ST_TO_ADDR
// hardcore :=  ;
16566: LD_ADDR_VAR 0 6
16570: PUSH
16571: LD_STRING 
16573: ST_TO_ADDR
// active :=  ;
16574: LD_ADDR_VAR 0 7
16578: PUSH
16579: LD_STRING 
16581: ST_TO_ADDR
// for i = 1 to normalCounter do
16582: LD_ADDR_VAR 0 8
16586: PUSH
16587: DOUBLE
16588: LD_INT 1
16590: DEC
16591: ST_TO_ADDR
16592: LD_EXP 49
16596: PUSH
16597: FOR_TO
16598: IFFALSE 16699
// begin tmp := 0 ;
16600: LD_ADDR_VAR 0 3
16604: PUSH
16605: LD_STRING 0
16607: ST_TO_ADDR
// if result [ 1 ] then
16608: LD_VAR 0 2
16612: PUSH
16613: LD_INT 1
16615: ARRAY
16616: IFFALSE 16681
// if result [ 1 ] [ 1 ] = i then
16618: LD_VAR 0 2
16622: PUSH
16623: LD_INT 1
16625: ARRAY
16626: PUSH
16627: LD_INT 1
16629: ARRAY
16630: PUSH
16631: LD_VAR 0 8
16635: EQUAL
16636: IFFALSE 16681
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16638: LD_ADDR_VAR 0 2
16642: PUSH
16643: LD_VAR 0 2
16647: PPUSH
16648: LD_INT 1
16650: PPUSH
16651: LD_VAR 0 2
16655: PUSH
16656: LD_INT 1
16658: ARRAY
16659: PPUSH
16660: LD_INT 1
16662: PPUSH
16663: CALL_OW 3
16667: PPUSH
16668: CALL_OW 1
16672: ST_TO_ADDR
// tmp := 1 ;
16673: LD_ADDR_VAR 0 3
16677: PUSH
16678: LD_STRING 1
16680: ST_TO_ADDR
// end ; normal := normal & tmp ;
16681: LD_ADDR_VAR 0 5
16685: PUSH
16686: LD_VAR 0 5
16690: PUSH
16691: LD_VAR 0 3
16695: STR
16696: ST_TO_ADDR
// end ;
16697: GO 16597
16699: POP
16700: POP
// for i = 1 to hardcoreCounter do
16701: LD_ADDR_VAR 0 8
16705: PUSH
16706: DOUBLE
16707: LD_INT 1
16709: DEC
16710: ST_TO_ADDR
16711: LD_EXP 50
16715: PUSH
16716: FOR_TO
16717: IFFALSE 16822
// begin tmp := 0 ;
16719: LD_ADDR_VAR 0 3
16723: PUSH
16724: LD_STRING 0
16726: ST_TO_ADDR
// if result [ 2 ] then
16727: LD_VAR 0 2
16731: PUSH
16732: LD_INT 2
16734: ARRAY
16735: IFFALSE 16804
// if result [ 2 ] [ 1 ] = 100 + i then
16737: LD_VAR 0 2
16741: PUSH
16742: LD_INT 2
16744: ARRAY
16745: PUSH
16746: LD_INT 1
16748: ARRAY
16749: PUSH
16750: LD_INT 100
16752: PUSH
16753: LD_VAR 0 8
16757: PLUS
16758: EQUAL
16759: IFFALSE 16804
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16761: LD_ADDR_VAR 0 2
16765: PUSH
16766: LD_VAR 0 2
16770: PPUSH
16771: LD_INT 2
16773: PPUSH
16774: LD_VAR 0 2
16778: PUSH
16779: LD_INT 2
16781: ARRAY
16782: PPUSH
16783: LD_INT 1
16785: PPUSH
16786: CALL_OW 3
16790: PPUSH
16791: CALL_OW 1
16795: ST_TO_ADDR
// tmp := 1 ;
16796: LD_ADDR_VAR 0 3
16800: PUSH
16801: LD_STRING 1
16803: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16804: LD_ADDR_VAR 0 6
16808: PUSH
16809: LD_VAR 0 6
16813: PUSH
16814: LD_VAR 0 3
16818: STR
16819: ST_TO_ADDR
// end ;
16820: GO 16716
16822: POP
16823: POP
// if isGameLoad then
16824: LD_VAR 0 1
16828: IFFALSE 17303
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16830: LD_ADDR_VAR 0 4
16834: PUSH
16835: LD_EXP 53
16839: PUSH
16840: LD_EXP 52
16844: PUSH
16845: LD_EXP 54
16849: PUSH
16850: LD_EXP 51
16854: PUSH
16855: LD_EXP 55
16859: PUSH
16860: LD_EXP 56
16864: PUSH
16865: LD_EXP 57
16869: PUSH
16870: LD_EXP 58
16874: PUSH
16875: LD_EXP 59
16879: PUSH
16880: LD_EXP 60
16884: PUSH
16885: LD_EXP 61
16889: PUSH
16890: LD_EXP 62
16894: PUSH
16895: LD_EXP 63
16899: PUSH
16900: LD_EXP 64
16904: PUSH
16905: LD_EXP 72
16909: PUSH
16910: LD_EXP 73
16914: PUSH
16915: LD_EXP 74
16919: PUSH
16920: LD_EXP 75
16924: PUSH
16925: LD_EXP 77
16929: PUSH
16930: LD_EXP 78
16934: PUSH
16935: LD_EXP 79
16939: PUSH
16940: LD_EXP 82
16944: PUSH
16945: LD_EXP 84
16949: PUSH
16950: LD_EXP 85
16954: PUSH
16955: LD_EXP 86
16959: PUSH
16960: LD_EXP 88
16964: PUSH
16965: LD_EXP 89
16969: PUSH
16970: LD_EXP 92
16974: PUSH
16975: LD_EXP 93
16979: PUSH
16980: LD_EXP 94
16984: PUSH
16985: LD_EXP 95
16989: PUSH
16990: LD_EXP 96
16994: PUSH
16995: LD_EXP 97
16999: PUSH
17000: LD_EXP 98
17004: PUSH
17005: LD_EXP 99
17009: PUSH
17010: LD_EXP 100
17014: PUSH
17015: LD_EXP 65
17019: PUSH
17020: LD_EXP 66
17024: PUSH
17025: LD_EXP 69
17029: PUSH
17030: LD_EXP 70
17034: PUSH
17035: LD_EXP 71
17039: PUSH
17040: LD_EXP 67
17044: PUSH
17045: LD_EXP 68
17049: PUSH
17050: LD_EXP 76
17054: PUSH
17055: LD_EXP 80
17059: PUSH
17060: LD_EXP 81
17064: PUSH
17065: LD_EXP 83
17069: PUSH
17070: LD_EXP 87
17074: PUSH
17075: LD_EXP 90
17079: PUSH
17080: LD_EXP 91
17084: PUSH
17085: LD_EXP 101
17089: PUSH
17090: LD_EXP 102
17094: PUSH
17095: LD_EXP 103
17099: PUSH
17100: LD_EXP 104
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: ST_TO_ADDR
// tmp :=  ;
17161: LD_ADDR_VAR 0 3
17165: PUSH
17166: LD_STRING 
17168: ST_TO_ADDR
// for i = 1 to normalCounter do
17169: LD_ADDR_VAR 0 8
17173: PUSH
17174: DOUBLE
17175: LD_INT 1
17177: DEC
17178: ST_TO_ADDR
17179: LD_EXP 49
17183: PUSH
17184: FOR_TO
17185: IFFALSE 17221
// begin if flags [ i ] then
17187: LD_VAR 0 4
17191: PUSH
17192: LD_VAR 0 8
17196: ARRAY
17197: IFFALSE 17219
// tmp := tmp & i & ; ;
17199: LD_ADDR_VAR 0 3
17203: PUSH
17204: LD_VAR 0 3
17208: PUSH
17209: LD_VAR 0 8
17213: STR
17214: PUSH
17215: LD_STRING ;
17217: STR
17218: ST_TO_ADDR
// end ;
17219: GO 17184
17221: POP
17222: POP
// for i = 1 to hardcoreCounter do
17223: LD_ADDR_VAR 0 8
17227: PUSH
17228: DOUBLE
17229: LD_INT 1
17231: DEC
17232: ST_TO_ADDR
17233: LD_EXP 50
17237: PUSH
17238: FOR_TO
17239: IFFALSE 17285
// begin if flags [ normalCounter + i ] then
17241: LD_VAR 0 4
17245: PUSH
17246: LD_EXP 49
17250: PUSH
17251: LD_VAR 0 8
17255: PLUS
17256: ARRAY
17257: IFFALSE 17283
// tmp := tmp & ( 100 + i ) & ; ;
17259: LD_ADDR_VAR 0 3
17263: PUSH
17264: LD_VAR 0 3
17268: PUSH
17269: LD_INT 100
17271: PUSH
17272: LD_VAR 0 8
17276: PLUS
17277: STR
17278: PUSH
17279: LD_STRING ;
17281: STR
17282: ST_TO_ADDR
// end ;
17283: GO 17238
17285: POP
17286: POP
// if tmp then
17287: LD_VAR 0 3
17291: IFFALSE 17303
// active := tmp ;
17293: LD_ADDR_VAR 0 7
17297: PUSH
17298: LD_VAR 0 3
17302: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17303: LD_STRING getStreamItemsFromMission("
17305: PUSH
17306: LD_VAR 0 5
17310: STR
17311: PUSH
17312: LD_STRING ","
17314: STR
17315: PUSH
17316: LD_VAR 0 6
17320: STR
17321: PUSH
17322: LD_STRING ","
17324: STR
17325: PUSH
17326: LD_VAR 0 7
17330: STR
17331: PUSH
17332: LD_STRING ")
17334: STR
17335: PPUSH
17336: CALL_OW 559
// end else
17340: GO 17349
// ToLua ( getStreamItemsFromMission("","","") ) ;
17342: LD_STRING getStreamItemsFromMission("","","")
17344: PPUSH
17345: CALL_OW 559
// end ;
17349: LD_VAR 0 2
17353: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17354: LD_EXP 48
17358: IFFALSE 17366
17360: PUSH
17361: LD_EXP 53
17365: AND
17366: IFFALSE 17490
17368: GO 17370
17370: DISABLE
17371: LD_INT 0
17373: PPUSH
17374: PPUSH
// begin enable ;
17375: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17376: LD_ADDR_VAR 0 2
17380: PUSH
17381: LD_INT 22
17383: PUSH
17384: LD_OWVAR 2
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: LD_INT 2
17395: PUSH
17396: LD_INT 34
17398: PUSH
17399: LD_INT 7
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 34
17408: PUSH
17409: LD_INT 45
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PUSH
17416: LD_INT 34
17418: PUSH
17419: LD_INT 28
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: LD_INT 34
17428: PUSH
17429: LD_INT 47
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PPUSH
17447: CALL_OW 69
17451: ST_TO_ADDR
// if not tmp then
17452: LD_VAR 0 2
17456: NOT
17457: IFFALSE 17461
// exit ;
17459: GO 17490
// for i in tmp do
17461: LD_ADDR_VAR 0 1
17465: PUSH
17466: LD_VAR 0 2
17470: PUSH
17471: FOR_IN
17472: IFFALSE 17488
// begin SetLives ( i , 0 ) ;
17474: LD_VAR 0 1
17478: PPUSH
17479: LD_INT 0
17481: PPUSH
17482: CALL_OW 234
// end ;
17486: GO 17471
17488: POP
17489: POP
// end ;
17490: PPOPN 2
17492: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17493: LD_EXP 48
17497: IFFALSE 17505
17499: PUSH
17500: LD_EXP 54
17504: AND
17505: IFFALSE 17589
17507: GO 17509
17509: DISABLE
17510: LD_INT 0
17512: PPUSH
17513: PPUSH
// begin enable ;
17514: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17515: LD_ADDR_VAR 0 2
17519: PUSH
17520: LD_INT 22
17522: PUSH
17523: LD_OWVAR 2
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 32
17534: PUSH
17535: LD_INT 3
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PPUSH
17546: CALL_OW 69
17550: ST_TO_ADDR
// if not tmp then
17551: LD_VAR 0 2
17555: NOT
17556: IFFALSE 17560
// exit ;
17558: GO 17589
// for i in tmp do
17560: LD_ADDR_VAR 0 1
17564: PUSH
17565: LD_VAR 0 2
17569: PUSH
17570: FOR_IN
17571: IFFALSE 17587
// begin SetLives ( i , 0 ) ;
17573: LD_VAR 0 1
17577: PPUSH
17578: LD_INT 0
17580: PPUSH
17581: CALL_OW 234
// end ;
17585: GO 17570
17587: POP
17588: POP
// end ;
17589: PPOPN 2
17591: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17592: LD_EXP 48
17596: IFFALSE 17604
17598: PUSH
17599: LD_EXP 51
17603: AND
17604: IFFALSE 17697
17606: GO 17608
17608: DISABLE
17609: LD_INT 0
17611: PPUSH
// begin enable ;
17612: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17613: LD_ADDR_VAR 0 1
17617: PUSH
17618: LD_INT 22
17620: PUSH
17621: LD_OWVAR 2
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: LD_INT 2
17632: PUSH
17633: LD_INT 25
17635: PUSH
17636: LD_INT 5
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 25
17645: PUSH
17646: LD_INT 9
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 25
17655: PUSH
17656: LD_INT 8
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: PPUSH
17673: CALL_OW 69
17677: PUSH
17678: FOR_IN
17679: IFFALSE 17695
// begin SetClass ( i , 1 ) ;
17681: LD_VAR 0 1
17685: PPUSH
17686: LD_INT 1
17688: PPUSH
17689: CALL_OW 336
// end ;
17693: GO 17678
17695: POP
17696: POP
// end ;
17697: PPOPN 1
17699: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17700: LD_EXP 48
17704: IFFALSE 17712
17706: PUSH
17707: LD_EXP 52
17711: AND
17712: IFFALSE 17724
17714: PUSH
17715: LD_OWVAR 65
17719: PUSH
17720: LD_INT 7
17722: LESS
17723: AND
17724: IFFALSE 17738
17726: GO 17728
17728: DISABLE
// begin enable ;
17729: ENABLE
// game_speed := 7 ;
17730: LD_ADDR_OWVAR 65
17734: PUSH
17735: LD_INT 7
17737: ST_TO_ADDR
// end ;
17738: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17739: LD_EXP 48
17743: IFFALSE 17751
17745: PUSH
17746: LD_EXP 55
17750: AND
17751: IFFALSE 17953
17753: GO 17755
17755: DISABLE
17756: LD_INT 0
17758: PPUSH
17759: PPUSH
17760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17761: LD_ADDR_VAR 0 3
17765: PUSH
17766: LD_INT 81
17768: PUSH
17769: LD_OWVAR 2
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 21
17780: PUSH
17781: LD_INT 1
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PPUSH
17792: CALL_OW 69
17796: ST_TO_ADDR
// if not tmp then
17797: LD_VAR 0 3
17801: NOT
17802: IFFALSE 17806
// exit ;
17804: GO 17953
// if tmp > 5 then
17806: LD_VAR 0 3
17810: PUSH
17811: LD_INT 5
17813: GREATER
17814: IFFALSE 17826
// k := 5 else
17816: LD_ADDR_VAR 0 2
17820: PUSH
17821: LD_INT 5
17823: ST_TO_ADDR
17824: GO 17836
// k := tmp ;
17826: LD_ADDR_VAR 0 2
17830: PUSH
17831: LD_VAR 0 3
17835: ST_TO_ADDR
// for i := 1 to k do
17836: LD_ADDR_VAR 0 1
17840: PUSH
17841: DOUBLE
17842: LD_INT 1
17844: DEC
17845: ST_TO_ADDR
17846: LD_VAR 0 2
17850: PUSH
17851: FOR_TO
17852: IFFALSE 17951
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17854: LD_VAR 0 3
17858: PUSH
17859: LD_VAR 0 1
17863: ARRAY
17864: PPUSH
17865: LD_VAR 0 1
17869: PUSH
17870: LD_INT 4
17872: MOD
17873: PUSH
17874: LD_INT 1
17876: PLUS
17877: PPUSH
17878: CALL_OW 259
17882: PUSH
17883: LD_INT 10
17885: LESS
17886: IFFALSE 17949
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17888: LD_VAR 0 3
17892: PUSH
17893: LD_VAR 0 1
17897: ARRAY
17898: PPUSH
17899: LD_VAR 0 1
17903: PUSH
17904: LD_INT 4
17906: MOD
17907: PUSH
17908: LD_INT 1
17910: PLUS
17911: PPUSH
17912: LD_VAR 0 3
17916: PUSH
17917: LD_VAR 0 1
17921: ARRAY
17922: PPUSH
17923: LD_VAR 0 1
17927: PUSH
17928: LD_INT 4
17930: MOD
17931: PUSH
17932: LD_INT 1
17934: PLUS
17935: PPUSH
17936: CALL_OW 259
17940: PUSH
17941: LD_INT 1
17943: PLUS
17944: PPUSH
17945: CALL_OW 237
17949: GO 17851
17951: POP
17952: POP
// end ;
17953: PPOPN 3
17955: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17956: LD_EXP 48
17960: IFFALSE 17968
17962: PUSH
17963: LD_EXP 56
17967: AND
17968: IFFALSE 17988
17970: GO 17972
17972: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17973: LD_INT 4
17975: PPUSH
17976: LD_OWVAR 2
17980: PPUSH
17981: LD_INT 0
17983: PPUSH
17984: CALL_OW 324
17988: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17989: LD_EXP 48
17993: IFFALSE 18001
17995: PUSH
17996: LD_EXP 85
18000: AND
18001: IFFALSE 18021
18003: GO 18005
18005: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18006: LD_INT 19
18008: PPUSH
18009: LD_OWVAR 2
18013: PPUSH
18014: LD_INT 0
18016: PPUSH
18017: CALL_OW 324
18021: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18022: LD_EXP 48
18026: IFFALSE 18034
18028: PUSH
18029: LD_EXP 57
18033: AND
18034: IFFALSE 18136
18036: GO 18038
18038: DISABLE
18039: LD_INT 0
18041: PPUSH
18042: PPUSH
// begin enable ;
18043: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18044: LD_ADDR_VAR 0 2
18048: PUSH
18049: LD_INT 22
18051: PUSH
18052: LD_OWVAR 2
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 2
18063: PUSH
18064: LD_INT 34
18066: PUSH
18067: LD_INT 11
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: LD_INT 34
18076: PUSH
18077: LD_INT 30
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: LIST
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PPUSH
18093: CALL_OW 69
18097: ST_TO_ADDR
// if not tmp then
18098: LD_VAR 0 2
18102: NOT
18103: IFFALSE 18107
// exit ;
18105: GO 18136
// for i in tmp do
18107: LD_ADDR_VAR 0 1
18111: PUSH
18112: LD_VAR 0 2
18116: PUSH
18117: FOR_IN
18118: IFFALSE 18134
// begin SetLives ( i , 0 ) ;
18120: LD_VAR 0 1
18124: PPUSH
18125: LD_INT 0
18127: PPUSH
18128: CALL_OW 234
// end ;
18132: GO 18117
18134: POP
18135: POP
// end ;
18136: PPOPN 2
18138: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18139: LD_EXP 48
18143: IFFALSE 18151
18145: PUSH
18146: LD_EXP 58
18150: AND
18151: IFFALSE 18171
18153: GO 18155
18155: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18156: LD_INT 32
18158: PPUSH
18159: LD_OWVAR 2
18163: PPUSH
18164: LD_INT 0
18166: PPUSH
18167: CALL_OW 324
18171: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18172: LD_EXP 48
18176: IFFALSE 18184
18178: PUSH
18179: LD_EXP 59
18183: AND
18184: IFFALSE 18367
18186: GO 18188
18188: DISABLE
18189: LD_INT 0
18191: PPUSH
18192: PPUSH
18193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18194: LD_ADDR_VAR 0 2
18198: PUSH
18199: LD_INT 22
18201: PUSH
18202: LD_OWVAR 2
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 33
18213: PUSH
18214: LD_INT 3
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: PPUSH
18225: CALL_OW 69
18229: ST_TO_ADDR
// if not tmp then
18230: LD_VAR 0 2
18234: NOT
18235: IFFALSE 18239
// exit ;
18237: GO 18367
// side := 0 ;
18239: LD_ADDR_VAR 0 3
18243: PUSH
18244: LD_INT 0
18246: ST_TO_ADDR
// for i := 1 to 8 do
18247: LD_ADDR_VAR 0 1
18251: PUSH
18252: DOUBLE
18253: LD_INT 1
18255: DEC
18256: ST_TO_ADDR
18257: LD_INT 8
18259: PUSH
18260: FOR_TO
18261: IFFALSE 18311
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18263: LD_OWVAR 2
18267: PUSH
18268: LD_VAR 0 1
18272: NONEQUAL
18273: IFFALSE 18295
18275: PUSH
18276: LD_OWVAR 2
18280: PPUSH
18281: LD_VAR 0 1
18285: PPUSH
18286: CALL_OW 81
18290: PUSH
18291: LD_INT 2
18293: EQUAL
18294: AND
18295: IFFALSE 18309
// begin side := i ;
18297: LD_ADDR_VAR 0 3
18301: PUSH
18302: LD_VAR 0 1
18306: ST_TO_ADDR
// break ;
18307: GO 18311
// end ;
18309: GO 18260
18311: POP
18312: POP
// if not side then
18313: LD_VAR 0 3
18317: NOT
18318: IFFALSE 18322
// exit ;
18320: GO 18367
// for i := 1 to tmp do
18322: LD_ADDR_VAR 0 1
18326: PUSH
18327: DOUBLE
18328: LD_INT 1
18330: DEC
18331: ST_TO_ADDR
18332: LD_VAR 0 2
18336: PUSH
18337: FOR_TO
18338: IFFALSE 18365
// if Prob ( 60 ) then
18340: LD_INT 60
18342: PPUSH
18343: CALL_OW 13
18347: IFFALSE 18363
// SetSide ( i , side ) ;
18349: LD_VAR 0 1
18353: PPUSH
18354: LD_VAR 0 3
18358: PPUSH
18359: CALL_OW 235
18363: GO 18337
18365: POP
18366: POP
// end ;
18367: PPOPN 3
18369: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18370: LD_EXP 48
18374: IFFALSE 18382
18376: PUSH
18377: LD_EXP 61
18381: AND
18382: IFFALSE 18501
18384: GO 18386
18386: DISABLE
18387: LD_INT 0
18389: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18390: LD_ADDR_VAR 0 1
18394: PUSH
18395: LD_INT 22
18397: PUSH
18398: LD_OWVAR 2
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: LD_INT 21
18409: PUSH
18410: LD_INT 1
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 3
18419: PUSH
18420: LD_INT 23
18422: PUSH
18423: LD_INT 0
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: LIST
18438: PPUSH
18439: CALL_OW 69
18443: PUSH
18444: FOR_IN
18445: IFFALSE 18499
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18447: LD_VAR 0 1
18451: PPUSH
18452: CALL_OW 257
18456: PUSH
18457: LD_INT 1
18459: PUSH
18460: LD_INT 2
18462: PUSH
18463: LD_INT 3
18465: PUSH
18466: LD_INT 4
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: IN
18475: IFFALSE 18497
// SetClass ( un , rand ( 1 , 4 ) ) ;
18477: LD_VAR 0 1
18481: PPUSH
18482: LD_INT 1
18484: PPUSH
18485: LD_INT 4
18487: PPUSH
18488: CALL_OW 12
18492: PPUSH
18493: CALL_OW 336
18497: GO 18444
18499: POP
18500: POP
// end ;
18501: PPOPN 1
18503: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18504: LD_EXP 48
18508: IFFALSE 18516
18510: PUSH
18511: LD_EXP 60
18515: AND
18516: IFFALSE 18595
18518: GO 18520
18520: DISABLE
18521: LD_INT 0
18523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18524: LD_ADDR_VAR 0 1
18528: PUSH
18529: LD_INT 22
18531: PUSH
18532: LD_OWVAR 2
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 21
18543: PUSH
18544: LD_INT 3
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PPUSH
18555: CALL_OW 69
18559: ST_TO_ADDR
// if not tmp then
18560: LD_VAR 0 1
18564: NOT
18565: IFFALSE 18569
// exit ;
18567: GO 18595
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18569: LD_VAR 0 1
18573: PUSH
18574: LD_INT 1
18576: PPUSH
18577: LD_VAR 0 1
18581: PPUSH
18582: CALL_OW 12
18586: ARRAY
18587: PPUSH
18588: LD_INT 100
18590: PPUSH
18591: CALL_OW 234
// end ;
18595: PPOPN 1
18597: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18598: LD_EXP 48
18602: IFFALSE 18610
18604: PUSH
18605: LD_EXP 62
18609: AND
18610: IFFALSE 18708
18612: GO 18614
18614: DISABLE
18615: LD_INT 0
18617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18618: LD_ADDR_VAR 0 1
18622: PUSH
18623: LD_INT 22
18625: PUSH
18626: LD_OWVAR 2
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 21
18637: PUSH
18638: LD_INT 1
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PPUSH
18649: CALL_OW 69
18653: ST_TO_ADDR
// if not tmp then
18654: LD_VAR 0 1
18658: NOT
18659: IFFALSE 18663
// exit ;
18661: GO 18708
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18663: LD_VAR 0 1
18667: PUSH
18668: LD_INT 1
18670: PPUSH
18671: LD_VAR 0 1
18675: PPUSH
18676: CALL_OW 12
18680: ARRAY
18681: PPUSH
18682: LD_INT 1
18684: PPUSH
18685: LD_INT 4
18687: PPUSH
18688: CALL_OW 12
18692: PPUSH
18693: LD_INT 3000
18695: PPUSH
18696: LD_INT 9000
18698: PPUSH
18699: CALL_OW 12
18703: PPUSH
18704: CALL_OW 492
// end ;
18708: PPOPN 1
18710: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18711: LD_EXP 48
18715: IFFALSE 18723
18717: PUSH
18718: LD_EXP 63
18722: AND
18723: IFFALSE 18743
18725: GO 18727
18727: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18728: LD_INT 1
18730: PPUSH
18731: LD_OWVAR 2
18735: PPUSH
18736: LD_INT 0
18738: PPUSH
18739: CALL_OW 324
18743: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18744: LD_EXP 48
18748: IFFALSE 18756
18750: PUSH
18751: LD_EXP 64
18755: AND
18756: IFFALSE 18839
18758: GO 18760
18760: DISABLE
18761: LD_INT 0
18763: PPUSH
18764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18765: LD_ADDR_VAR 0 2
18769: PUSH
18770: LD_INT 22
18772: PUSH
18773: LD_OWVAR 2
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 21
18784: PUSH
18785: LD_INT 3
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PPUSH
18796: CALL_OW 69
18800: ST_TO_ADDR
// if not tmp then
18801: LD_VAR 0 2
18805: NOT
18806: IFFALSE 18810
// exit ;
18808: GO 18839
// for i in tmp do
18810: LD_ADDR_VAR 0 1
18814: PUSH
18815: LD_VAR 0 2
18819: PUSH
18820: FOR_IN
18821: IFFALSE 18837
// SetBLevel ( i , 10 ) ;
18823: LD_VAR 0 1
18827: PPUSH
18828: LD_INT 10
18830: PPUSH
18831: CALL_OW 241
18835: GO 18820
18837: POP
18838: POP
// end ;
18839: PPOPN 2
18841: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18842: LD_EXP 48
18846: IFFALSE 18854
18848: PUSH
18849: LD_EXP 65
18853: AND
18854: IFFALSE 18965
18856: GO 18858
18858: DISABLE
18859: LD_INT 0
18861: PPUSH
18862: PPUSH
18863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18864: LD_ADDR_VAR 0 3
18868: PUSH
18869: LD_INT 22
18871: PUSH
18872: LD_OWVAR 2
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: LD_INT 25
18883: PUSH
18884: LD_INT 1
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PPUSH
18895: CALL_OW 69
18899: ST_TO_ADDR
// if not tmp then
18900: LD_VAR 0 3
18904: NOT
18905: IFFALSE 18909
// exit ;
18907: GO 18965
// un := tmp [ rand ( 1 , tmp ) ] ;
18909: LD_ADDR_VAR 0 2
18913: PUSH
18914: LD_VAR 0 3
18918: PUSH
18919: LD_INT 1
18921: PPUSH
18922: LD_VAR 0 3
18926: PPUSH
18927: CALL_OW 12
18931: ARRAY
18932: ST_TO_ADDR
// if Crawls ( un ) then
18933: LD_VAR 0 2
18937: PPUSH
18938: CALL_OW 318
18942: IFFALSE 18953
// ComWalk ( un ) ;
18944: LD_VAR 0 2
18948: PPUSH
18949: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18953: LD_VAR 0 2
18957: PPUSH
18958: LD_INT 5
18960: PPUSH
18961: CALL_OW 336
// end ;
18965: PPOPN 3
18967: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18968: LD_EXP 48
18972: IFFALSE 18980
18974: PUSH
18975: LD_EXP 66
18979: AND
18980: IFFALSE 18992
18982: PUSH
18983: LD_OWVAR 67
18987: PUSH
18988: LD_INT 4
18990: LESS
18991: AND
18992: IFFALSE 19011
18994: GO 18996
18996: DISABLE
// begin Difficulty := Difficulty + 1 ;
18997: LD_ADDR_OWVAR 67
19001: PUSH
19002: LD_OWVAR 67
19006: PUSH
19007: LD_INT 1
19009: PLUS
19010: ST_TO_ADDR
// end ;
19011: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19012: LD_EXP 48
19016: IFFALSE 19024
19018: PUSH
19019: LD_EXP 67
19023: AND
19024: IFFALSE 19127
19026: GO 19028
19028: DISABLE
19029: LD_INT 0
19031: PPUSH
// begin for i := 1 to 5 do
19032: LD_ADDR_VAR 0 1
19036: PUSH
19037: DOUBLE
19038: LD_INT 1
19040: DEC
19041: ST_TO_ADDR
19042: LD_INT 5
19044: PUSH
19045: FOR_TO
19046: IFFALSE 19125
// begin uc_nation := nation_nature ;
19048: LD_ADDR_OWVAR 21
19052: PUSH
19053: LD_INT 0
19055: ST_TO_ADDR
// uc_side := 0 ;
19056: LD_ADDR_OWVAR 20
19060: PUSH
19061: LD_INT 0
19063: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19064: LD_ADDR_OWVAR 29
19068: PUSH
19069: LD_INT 12
19071: PUSH
19072: LD_INT 12
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: ST_TO_ADDR
// hc_agressivity := 20 ;
19079: LD_ADDR_OWVAR 35
19083: PUSH
19084: LD_INT 20
19086: ST_TO_ADDR
// hc_class := class_tiger ;
19087: LD_ADDR_OWVAR 28
19091: PUSH
19092: LD_INT 14
19094: ST_TO_ADDR
// hc_gallery :=  ;
19095: LD_ADDR_OWVAR 33
19099: PUSH
19100: LD_STRING 
19102: ST_TO_ADDR
// hc_name :=  ;
19103: LD_ADDR_OWVAR 26
19107: PUSH
19108: LD_STRING 
19110: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19111: CALL_OW 44
19115: PPUSH
19116: LD_INT 0
19118: PPUSH
19119: CALL_OW 51
// end ;
19123: GO 19045
19125: POP
19126: POP
// end ;
19127: PPOPN 1
19129: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19130: LD_EXP 48
19134: IFFALSE 19142
19136: PUSH
19137: LD_EXP 68
19141: AND
19142: IFFALSE 19151
19144: GO 19146
19146: DISABLE
// StreamSibBomb ;
19147: CALL 19152 0 0
19151: END
// export function StreamSibBomb ; var i , x , y ; begin
19152: LD_INT 0
19154: PPUSH
19155: PPUSH
19156: PPUSH
19157: PPUSH
// result := false ;
19158: LD_ADDR_VAR 0 1
19162: PUSH
19163: LD_INT 0
19165: ST_TO_ADDR
// for i := 1 to 16 do
19166: LD_ADDR_VAR 0 2
19170: PUSH
19171: DOUBLE
19172: LD_INT 1
19174: DEC
19175: ST_TO_ADDR
19176: LD_INT 16
19178: PUSH
19179: FOR_TO
19180: IFFALSE 19379
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19182: LD_ADDR_VAR 0 3
19186: PUSH
19187: LD_INT 10
19189: PUSH
19190: LD_INT 20
19192: PUSH
19193: LD_INT 30
19195: PUSH
19196: LD_INT 40
19198: PUSH
19199: LD_INT 50
19201: PUSH
19202: LD_INT 60
19204: PUSH
19205: LD_INT 70
19207: PUSH
19208: LD_INT 80
19210: PUSH
19211: LD_INT 90
19213: PUSH
19214: LD_INT 100
19216: PUSH
19217: LD_INT 110
19219: PUSH
19220: LD_INT 120
19222: PUSH
19223: LD_INT 130
19225: PUSH
19226: LD_INT 140
19228: PUSH
19229: LD_INT 150
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 1
19251: PPUSH
19252: LD_INT 15
19254: PPUSH
19255: CALL_OW 12
19259: ARRAY
19260: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19261: LD_ADDR_VAR 0 4
19265: PUSH
19266: LD_INT 10
19268: PUSH
19269: LD_INT 20
19271: PUSH
19272: LD_INT 30
19274: PUSH
19275: LD_INT 40
19277: PUSH
19278: LD_INT 50
19280: PUSH
19281: LD_INT 60
19283: PUSH
19284: LD_INT 70
19286: PUSH
19287: LD_INT 80
19289: PUSH
19290: LD_INT 90
19292: PUSH
19293: LD_INT 100
19295: PUSH
19296: LD_INT 110
19298: PUSH
19299: LD_INT 120
19301: PUSH
19302: LD_INT 130
19304: PUSH
19305: LD_INT 140
19307: PUSH
19308: LD_INT 150
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 1
19330: PPUSH
19331: LD_INT 15
19333: PPUSH
19334: CALL_OW 12
19338: ARRAY
19339: ST_TO_ADDR
// if ValidHex ( x , y ) then
19340: LD_VAR 0 3
19344: PPUSH
19345: LD_VAR 0 4
19349: PPUSH
19350: CALL_OW 488
19354: IFFALSE 19377
// begin result := [ x , y ] ;
19356: LD_ADDR_VAR 0 1
19360: PUSH
19361: LD_VAR 0 3
19365: PUSH
19366: LD_VAR 0 4
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: ST_TO_ADDR
// break ;
19375: GO 19379
// end ; end ;
19377: GO 19179
19379: POP
19380: POP
// if result then
19381: LD_VAR 0 1
19385: IFFALSE 19445
// begin ToLua ( playSibBomb() ) ;
19387: LD_STRING playSibBomb()
19389: PPUSH
19390: CALL_OW 559
// wait ( 0 0$14 ) ;
19394: LD_INT 490
19396: PPUSH
19397: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19401: LD_VAR 0 1
19405: PUSH
19406: LD_INT 1
19408: ARRAY
19409: PPUSH
19410: LD_VAR 0 1
19414: PUSH
19415: LD_INT 2
19417: ARRAY
19418: PPUSH
19419: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19423: LD_VAR 0 1
19427: PUSH
19428: LD_INT 1
19430: ARRAY
19431: PPUSH
19432: LD_VAR 0 1
19436: PUSH
19437: LD_INT 2
19439: ARRAY
19440: PPUSH
19441: CALL_OW 429
// end ; end ;
19445: LD_VAR 0 1
19449: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19450: LD_EXP 48
19454: IFFALSE 19462
19456: PUSH
19457: LD_EXP 70
19461: AND
19462: IFFALSE 19474
19464: GO 19466
19466: DISABLE
// YouLost (  ) ;
19467: LD_STRING 
19469: PPUSH
19470: CALL_OW 104
19474: END
// every 0 0$1 trigger StreamModeActive and sFog do
19475: LD_EXP 48
19479: IFFALSE 19487
19481: PUSH
19482: LD_EXP 69
19486: AND
19487: IFFALSE 19501
19489: GO 19491
19491: DISABLE
// FogOff ( your_side ) ;
19492: LD_OWVAR 2
19496: PPUSH
19497: CALL_OW 344
19501: END
// every 0 0$1 trigger StreamModeActive and sSun do
19502: LD_EXP 48
19506: IFFALSE 19514
19508: PUSH
19509: LD_EXP 71
19513: AND
19514: IFFALSE 19542
19516: GO 19518
19518: DISABLE
// begin solar_recharge_percent := 0 ;
19519: LD_ADDR_OWVAR 79
19523: PUSH
19524: LD_INT 0
19526: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19527: LD_INT 10500
19529: PPUSH
19530: CALL_OW 67
// solar_recharge_percent := 100 ;
19534: LD_ADDR_OWVAR 79
19538: PUSH
19539: LD_INT 100
19541: ST_TO_ADDR
// end ;
19542: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19543: LD_EXP 48
19547: IFFALSE 19555
19549: PUSH
19550: LD_EXP 72
19554: AND
19555: IFFALSE 19794
19557: GO 19559
19559: DISABLE
19560: LD_INT 0
19562: PPUSH
19563: PPUSH
19564: PPUSH
// begin tmp := [ ] ;
19565: LD_ADDR_VAR 0 3
19569: PUSH
19570: EMPTY
19571: ST_TO_ADDR
// for i := 1 to 6 do
19572: LD_ADDR_VAR 0 1
19576: PUSH
19577: DOUBLE
19578: LD_INT 1
19580: DEC
19581: ST_TO_ADDR
19582: LD_INT 6
19584: PUSH
19585: FOR_TO
19586: IFFALSE 19691
// begin uc_nation := nation_nature ;
19588: LD_ADDR_OWVAR 21
19592: PUSH
19593: LD_INT 0
19595: ST_TO_ADDR
// uc_side := 0 ;
19596: LD_ADDR_OWVAR 20
19600: PUSH
19601: LD_INT 0
19603: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19604: LD_ADDR_OWVAR 29
19608: PUSH
19609: LD_INT 12
19611: PUSH
19612: LD_INT 12
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: ST_TO_ADDR
// hc_agressivity := 20 ;
19619: LD_ADDR_OWVAR 35
19623: PUSH
19624: LD_INT 20
19626: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19627: LD_ADDR_OWVAR 28
19631: PUSH
19632: LD_INT 17
19634: ST_TO_ADDR
// hc_gallery :=  ;
19635: LD_ADDR_OWVAR 33
19639: PUSH
19640: LD_STRING 
19642: ST_TO_ADDR
// hc_name :=  ;
19643: LD_ADDR_OWVAR 26
19647: PUSH
19648: LD_STRING 
19650: ST_TO_ADDR
// un := CreateHuman ;
19651: LD_ADDR_VAR 0 2
19655: PUSH
19656: CALL_OW 44
19660: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19661: LD_VAR 0 2
19665: PPUSH
19666: LD_INT 1
19668: PPUSH
19669: CALL_OW 51
// tmp := tmp ^ un ;
19673: LD_ADDR_VAR 0 3
19677: PUSH
19678: LD_VAR 0 3
19682: PUSH
19683: LD_VAR 0 2
19687: ADD
19688: ST_TO_ADDR
// end ;
19689: GO 19585
19691: POP
19692: POP
// repeat wait ( 0 0$1 ) ;
19693: LD_INT 35
19695: PPUSH
19696: CALL_OW 67
// for un in tmp do
19700: LD_ADDR_VAR 0 2
19704: PUSH
19705: LD_VAR 0 3
19709: PUSH
19710: FOR_IN
19711: IFFALSE 19785
// begin if IsDead ( un ) then
19713: LD_VAR 0 2
19717: PPUSH
19718: CALL_OW 301
19722: IFFALSE 19742
// begin tmp := tmp diff un ;
19724: LD_ADDR_VAR 0 3
19728: PUSH
19729: LD_VAR 0 3
19733: PUSH
19734: LD_VAR 0 2
19738: DIFF
19739: ST_TO_ADDR
// continue ;
19740: GO 19710
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19742: LD_VAR 0 2
19746: PPUSH
19747: LD_INT 3
19749: PUSH
19750: LD_INT 22
19752: PUSH
19753: LD_INT 0
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PPUSH
19764: CALL_OW 69
19768: PPUSH
19769: LD_VAR 0 2
19773: PPUSH
19774: CALL_OW 74
19778: PPUSH
19779: CALL_OW 115
// end ;
19783: GO 19710
19785: POP
19786: POP
// until not tmp ;
19787: LD_VAR 0 3
19791: NOT
19792: IFFALSE 19693
// end ;
19794: PPOPN 3
19796: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19797: LD_EXP 48
19801: IFFALSE 19809
19803: PUSH
19804: LD_EXP 73
19808: AND
19809: IFFALSE 19863
19811: GO 19813
19813: DISABLE
// begin ToLua ( displayTroll(); ) ;
19814: LD_STRING displayTroll();
19816: PPUSH
19817: CALL_OW 559
// wait ( 3 3$00 ) ;
19821: LD_INT 6300
19823: PPUSH
19824: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19828: LD_STRING hideTroll();
19830: PPUSH
19831: CALL_OW 559
// wait ( 1 1$00 ) ;
19835: LD_INT 2100
19837: PPUSH
19838: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19842: LD_STRING displayTroll();
19844: PPUSH
19845: CALL_OW 559
// wait ( 1 1$00 ) ;
19849: LD_INT 2100
19851: PPUSH
19852: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19856: LD_STRING hideTroll();
19858: PPUSH
19859: CALL_OW 559
// end ;
19863: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19864: LD_EXP 48
19868: IFFALSE 19876
19870: PUSH
19871: LD_EXP 74
19875: AND
19876: IFFALSE 19939
19878: GO 19880
19880: DISABLE
19881: LD_INT 0
19883: PPUSH
// begin p := 0 ;
19884: LD_ADDR_VAR 0 1
19888: PUSH
19889: LD_INT 0
19891: ST_TO_ADDR
// repeat game_speed := 1 ;
19892: LD_ADDR_OWVAR 65
19896: PUSH
19897: LD_INT 1
19899: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19900: LD_INT 35
19902: PPUSH
19903: CALL_OW 67
// p := p + 1 ;
19907: LD_ADDR_VAR 0 1
19911: PUSH
19912: LD_VAR 0 1
19916: PUSH
19917: LD_INT 1
19919: PLUS
19920: ST_TO_ADDR
// until p >= 60 ;
19921: LD_VAR 0 1
19925: PUSH
19926: LD_INT 60
19928: GREATEREQUAL
19929: IFFALSE 19892
// game_speed := 4 ;
19931: LD_ADDR_OWVAR 65
19935: PUSH
19936: LD_INT 4
19938: ST_TO_ADDR
// end ;
19939: PPOPN 1
19941: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19942: LD_EXP 48
19946: IFFALSE 19954
19948: PUSH
19949: LD_EXP 75
19953: AND
19954: IFFALSE 20100
19956: GO 19958
19958: DISABLE
19959: LD_INT 0
19961: PPUSH
19962: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19963: LD_ADDR_VAR 0 1
19967: PUSH
19968: LD_INT 22
19970: PUSH
19971: LD_OWVAR 2
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 2
19982: PUSH
19983: LD_INT 30
19985: PUSH
19986: LD_INT 0
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 30
19995: PUSH
19996: LD_INT 1
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: LIST
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PPUSH
20012: CALL_OW 69
20016: ST_TO_ADDR
// if not depot then
20017: LD_VAR 0 1
20021: NOT
20022: IFFALSE 20026
// exit ;
20024: GO 20100
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20026: LD_ADDR_VAR 0 2
20030: PUSH
20031: LD_VAR 0 1
20035: PUSH
20036: LD_INT 1
20038: PPUSH
20039: LD_VAR 0 1
20043: PPUSH
20044: CALL_OW 12
20048: ARRAY
20049: PPUSH
20050: CALL_OW 274
20054: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20055: LD_VAR 0 2
20059: PPUSH
20060: LD_INT 1
20062: PPUSH
20063: LD_INT 0
20065: PPUSH
20066: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20070: LD_VAR 0 2
20074: PPUSH
20075: LD_INT 2
20077: PPUSH
20078: LD_INT 0
20080: PPUSH
20081: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20085: LD_VAR 0 2
20089: PPUSH
20090: LD_INT 3
20092: PPUSH
20093: LD_INT 0
20095: PPUSH
20096: CALL_OW 277
// end ;
20100: PPOPN 2
20102: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20103: LD_EXP 48
20107: IFFALSE 20115
20109: PUSH
20110: LD_EXP 76
20114: AND
20115: IFFALSE 20212
20117: GO 20119
20119: DISABLE
20120: LD_INT 0
20122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20123: LD_ADDR_VAR 0 1
20127: PUSH
20128: LD_INT 22
20130: PUSH
20131: LD_OWVAR 2
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 21
20142: PUSH
20143: LD_INT 1
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 3
20152: PUSH
20153: LD_INT 23
20155: PUSH
20156: LD_INT 0
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: LIST
20171: PPUSH
20172: CALL_OW 69
20176: ST_TO_ADDR
// if not tmp then
20177: LD_VAR 0 1
20181: NOT
20182: IFFALSE 20186
// exit ;
20184: GO 20212
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20186: LD_VAR 0 1
20190: PUSH
20191: LD_INT 1
20193: PPUSH
20194: LD_VAR 0 1
20198: PPUSH
20199: CALL_OW 12
20203: ARRAY
20204: PPUSH
20205: LD_INT 200
20207: PPUSH
20208: CALL_OW 234
// end ;
20212: PPOPN 1
20214: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20215: LD_EXP 48
20219: IFFALSE 20227
20221: PUSH
20222: LD_EXP 77
20226: AND
20227: IFFALSE 20306
20229: GO 20231
20231: DISABLE
20232: LD_INT 0
20234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20235: LD_ADDR_VAR 0 1
20239: PUSH
20240: LD_INT 22
20242: PUSH
20243: LD_OWVAR 2
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 21
20254: PUSH
20255: LD_INT 2
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PPUSH
20266: CALL_OW 69
20270: ST_TO_ADDR
// if not tmp then
20271: LD_VAR 0 1
20275: NOT
20276: IFFALSE 20280
// exit ;
20278: GO 20306
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20280: LD_VAR 0 1
20284: PUSH
20285: LD_INT 1
20287: PPUSH
20288: LD_VAR 0 1
20292: PPUSH
20293: CALL_OW 12
20297: ARRAY
20298: PPUSH
20299: LD_INT 60
20301: PPUSH
20302: CALL_OW 234
// end ;
20306: PPOPN 1
20308: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20309: LD_EXP 48
20313: IFFALSE 20321
20315: PUSH
20316: LD_EXP 78
20320: AND
20321: IFFALSE 20420
20323: GO 20325
20325: DISABLE
20326: LD_INT 0
20328: PPUSH
20329: PPUSH
// begin enable ;
20330: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20331: LD_ADDR_VAR 0 1
20335: PUSH
20336: LD_INT 22
20338: PUSH
20339: LD_OWVAR 2
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 61
20350: PUSH
20351: EMPTY
20352: LIST
20353: PUSH
20354: LD_INT 33
20356: PUSH
20357: LD_INT 2
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: LIST
20368: PPUSH
20369: CALL_OW 69
20373: ST_TO_ADDR
// if not tmp then
20374: LD_VAR 0 1
20378: NOT
20379: IFFALSE 20383
// exit ;
20381: GO 20420
// for i in tmp do
20383: LD_ADDR_VAR 0 2
20387: PUSH
20388: LD_VAR 0 1
20392: PUSH
20393: FOR_IN
20394: IFFALSE 20418
// if IsControledBy ( i ) then
20396: LD_VAR 0 2
20400: PPUSH
20401: CALL_OW 312
20405: IFFALSE 20416
// ComUnlink ( i ) ;
20407: LD_VAR 0 2
20411: PPUSH
20412: CALL_OW 136
20416: GO 20393
20418: POP
20419: POP
// end ;
20420: PPOPN 2
20422: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20423: LD_EXP 48
20427: IFFALSE 20435
20429: PUSH
20430: LD_EXP 79
20434: AND
20435: IFFALSE 20575
20437: GO 20439
20439: DISABLE
20440: LD_INT 0
20442: PPUSH
20443: PPUSH
// begin ToLua ( displayPowell(); ) ;
20444: LD_STRING displayPowell();
20446: PPUSH
20447: CALL_OW 559
// uc_side := 0 ;
20451: LD_ADDR_OWVAR 20
20455: PUSH
20456: LD_INT 0
20458: ST_TO_ADDR
// uc_nation := 2 ;
20459: LD_ADDR_OWVAR 21
20463: PUSH
20464: LD_INT 2
20466: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20467: LD_ADDR_OWVAR 37
20471: PUSH
20472: LD_INT 14
20474: ST_TO_ADDR
// vc_engine := engine_siberite ;
20475: LD_ADDR_OWVAR 39
20479: PUSH
20480: LD_INT 3
20482: ST_TO_ADDR
// vc_control := control_apeman ;
20483: LD_ADDR_OWVAR 38
20487: PUSH
20488: LD_INT 5
20490: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20491: LD_ADDR_OWVAR 40
20495: PUSH
20496: LD_INT 29
20498: ST_TO_ADDR
// un := CreateVehicle ;
20499: LD_ADDR_VAR 0 2
20503: PUSH
20504: CALL_OW 45
20508: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20509: LD_VAR 0 2
20513: PPUSH
20514: LD_INT 1
20516: PPUSH
20517: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20521: LD_INT 35
20523: PPUSH
20524: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20528: LD_VAR 0 2
20532: PPUSH
20533: LD_INT 22
20535: PUSH
20536: LD_OWVAR 2
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PPUSH
20545: CALL_OW 69
20549: PPUSH
20550: LD_VAR 0 2
20554: PPUSH
20555: CALL_OW 74
20559: PPUSH
20560: CALL_OW 115
// until IsDead ( un ) ;
20564: LD_VAR 0 2
20568: PPUSH
20569: CALL_OW 301
20573: IFFALSE 20521
// end ;
20575: PPOPN 2
20577: END
// every 0 0$1 trigger StreamModeActive and sStu do
20578: LD_EXP 48
20582: IFFALSE 20590
20584: PUSH
20585: LD_EXP 87
20589: AND
20590: IFFALSE 20606
20592: GO 20594
20594: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20595: LD_STRING displayStucuk();
20597: PPUSH
20598: CALL_OW 559
// ResetFog ;
20602: CALL_OW 335
// end ;
20606: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20607: LD_EXP 48
20611: IFFALSE 20619
20613: PUSH
20614: LD_EXP 80
20618: AND
20619: IFFALSE 20760
20621: GO 20623
20623: DISABLE
20624: LD_INT 0
20626: PPUSH
20627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20628: LD_ADDR_VAR 0 2
20632: PUSH
20633: LD_INT 22
20635: PUSH
20636: LD_OWVAR 2
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 21
20647: PUSH
20648: LD_INT 1
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PPUSH
20659: CALL_OW 69
20663: ST_TO_ADDR
// if not tmp then
20664: LD_VAR 0 2
20668: NOT
20669: IFFALSE 20673
// exit ;
20671: GO 20760
// un := tmp [ rand ( 1 , tmp ) ] ;
20673: LD_ADDR_VAR 0 1
20677: PUSH
20678: LD_VAR 0 2
20682: PUSH
20683: LD_INT 1
20685: PPUSH
20686: LD_VAR 0 2
20690: PPUSH
20691: CALL_OW 12
20695: ARRAY
20696: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20697: LD_VAR 0 1
20701: PPUSH
20702: LD_INT 0
20704: PPUSH
20705: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20709: LD_VAR 0 1
20713: PPUSH
20714: LD_OWVAR 3
20718: PUSH
20719: LD_VAR 0 1
20723: DIFF
20724: PPUSH
20725: LD_VAR 0 1
20729: PPUSH
20730: CALL_OW 74
20734: PPUSH
20735: CALL_OW 115
// wait ( 0 0$20 ) ;
20739: LD_INT 700
20741: PPUSH
20742: CALL_OW 67
// SetSide ( un , your_side ) ;
20746: LD_VAR 0 1
20750: PPUSH
20751: LD_OWVAR 2
20755: PPUSH
20756: CALL_OW 235
// end ;
20760: PPOPN 2
20762: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20763: LD_EXP 48
20767: IFFALSE 20775
20769: PUSH
20770: LD_EXP 81
20774: AND
20775: IFFALSE 20881
20777: GO 20779
20779: DISABLE
20780: LD_INT 0
20782: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20783: LD_ADDR_VAR 0 1
20787: PUSH
20788: LD_INT 22
20790: PUSH
20791: LD_OWVAR 2
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 2
20802: PUSH
20803: LD_INT 30
20805: PUSH
20806: LD_INT 0
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 30
20815: PUSH
20816: LD_INT 1
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: LIST
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PPUSH
20832: CALL_OW 69
20836: ST_TO_ADDR
// if not depot then
20837: LD_VAR 0 1
20841: NOT
20842: IFFALSE 20846
// exit ;
20844: GO 20881
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20846: LD_VAR 0 1
20850: PUSH
20851: LD_INT 1
20853: ARRAY
20854: PPUSH
20855: CALL_OW 250
20859: PPUSH
20860: LD_VAR 0 1
20864: PUSH
20865: LD_INT 1
20867: ARRAY
20868: PPUSH
20869: CALL_OW 251
20873: PPUSH
20874: LD_INT 70
20876: PPUSH
20877: CALL_OW 495
// end ;
20881: PPOPN 1
20883: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20884: LD_EXP 48
20888: IFFALSE 20896
20890: PUSH
20891: LD_EXP 82
20895: AND
20896: IFFALSE 21107
20898: GO 20900
20900: DISABLE
20901: LD_INT 0
20903: PPUSH
20904: PPUSH
20905: PPUSH
20906: PPUSH
20907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20908: LD_ADDR_VAR 0 5
20912: PUSH
20913: LD_INT 22
20915: PUSH
20916: LD_OWVAR 2
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 21
20927: PUSH
20928: LD_INT 1
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PPUSH
20939: CALL_OW 69
20943: ST_TO_ADDR
// if not tmp then
20944: LD_VAR 0 5
20948: NOT
20949: IFFALSE 20953
// exit ;
20951: GO 21107
// for i in tmp do
20953: LD_ADDR_VAR 0 1
20957: PUSH
20958: LD_VAR 0 5
20962: PUSH
20963: FOR_IN
20964: IFFALSE 21105
// begin d := rand ( 0 , 5 ) ;
20966: LD_ADDR_VAR 0 4
20970: PUSH
20971: LD_INT 0
20973: PPUSH
20974: LD_INT 5
20976: PPUSH
20977: CALL_OW 12
20981: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20982: LD_ADDR_VAR 0 2
20986: PUSH
20987: LD_VAR 0 1
20991: PPUSH
20992: CALL_OW 250
20996: PPUSH
20997: LD_VAR 0 4
21001: PPUSH
21002: LD_INT 3
21004: PPUSH
21005: LD_INT 12
21007: PPUSH
21008: CALL_OW 12
21012: PPUSH
21013: CALL_OW 272
21017: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21018: LD_ADDR_VAR 0 3
21022: PUSH
21023: LD_VAR 0 1
21027: PPUSH
21028: CALL_OW 251
21032: PPUSH
21033: LD_VAR 0 4
21037: PPUSH
21038: LD_INT 3
21040: PPUSH
21041: LD_INT 12
21043: PPUSH
21044: CALL_OW 12
21048: PPUSH
21049: CALL_OW 273
21053: ST_TO_ADDR
// if ValidHex ( x , y ) then
21054: LD_VAR 0 2
21058: PPUSH
21059: LD_VAR 0 3
21063: PPUSH
21064: CALL_OW 488
21068: IFFALSE 21103
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21070: LD_VAR 0 1
21074: PPUSH
21075: LD_VAR 0 2
21079: PPUSH
21080: LD_VAR 0 3
21084: PPUSH
21085: LD_INT 3
21087: PPUSH
21088: LD_INT 6
21090: PPUSH
21091: CALL_OW 12
21095: PPUSH
21096: LD_INT 1
21098: PPUSH
21099: CALL_OW 483
// end ;
21103: GO 20963
21105: POP
21106: POP
// end ;
21107: PPOPN 5
21109: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21110: LD_EXP 48
21114: IFFALSE 21122
21116: PUSH
21117: LD_EXP 83
21121: AND
21122: IFFALSE 21216
21124: GO 21126
21126: DISABLE
21127: LD_INT 0
21129: PPUSH
21130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21131: LD_ADDR_VAR 0 2
21135: PUSH
21136: LD_INT 22
21138: PUSH
21139: LD_OWVAR 2
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 32
21150: PUSH
21151: LD_INT 1
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 21
21160: PUSH
21161: LD_INT 2
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: LIST
21172: PPUSH
21173: CALL_OW 69
21177: ST_TO_ADDR
// if not tmp then
21178: LD_VAR 0 2
21182: NOT
21183: IFFALSE 21187
// exit ;
21185: GO 21216
// for i in tmp do
21187: LD_ADDR_VAR 0 1
21191: PUSH
21192: LD_VAR 0 2
21196: PUSH
21197: FOR_IN
21198: IFFALSE 21214
// SetFuel ( i , 0 ) ;
21200: LD_VAR 0 1
21204: PPUSH
21205: LD_INT 0
21207: PPUSH
21208: CALL_OW 240
21212: GO 21197
21214: POP
21215: POP
// end ;
21216: PPOPN 2
21218: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21219: LD_EXP 48
21223: IFFALSE 21231
21225: PUSH
21226: LD_EXP 84
21230: AND
21231: IFFALSE 21297
21233: GO 21235
21235: DISABLE
21236: LD_INT 0
21238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21239: LD_ADDR_VAR 0 1
21243: PUSH
21244: LD_INT 22
21246: PUSH
21247: LD_OWVAR 2
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 30
21258: PUSH
21259: LD_INT 29
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PPUSH
21270: CALL_OW 69
21274: ST_TO_ADDR
// if not tmp then
21275: LD_VAR 0 1
21279: NOT
21280: IFFALSE 21284
// exit ;
21282: GO 21297
// DestroyUnit ( tmp [ 1 ] ) ;
21284: LD_VAR 0 1
21288: PUSH
21289: LD_INT 1
21291: ARRAY
21292: PPUSH
21293: CALL_OW 65
// end ;
21297: PPOPN 1
21299: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21300: LD_EXP 48
21304: IFFALSE 21312
21306: PUSH
21307: LD_EXP 86
21311: AND
21312: IFFALSE 21441
21314: GO 21316
21316: DISABLE
21317: LD_INT 0
21319: PPUSH
// begin uc_side := 0 ;
21320: LD_ADDR_OWVAR 20
21324: PUSH
21325: LD_INT 0
21327: ST_TO_ADDR
// uc_nation := nation_arabian ;
21328: LD_ADDR_OWVAR 21
21332: PUSH
21333: LD_INT 2
21335: ST_TO_ADDR
// hc_gallery :=  ;
21336: LD_ADDR_OWVAR 33
21340: PUSH
21341: LD_STRING 
21343: ST_TO_ADDR
// hc_name :=  ;
21344: LD_ADDR_OWVAR 26
21348: PUSH
21349: LD_STRING 
21351: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21352: LD_INT 1
21354: PPUSH
21355: LD_INT 11
21357: PPUSH
21358: LD_INT 10
21360: PPUSH
21361: CALL_OW 380
// un := CreateHuman ;
21365: LD_ADDR_VAR 0 1
21369: PUSH
21370: CALL_OW 44
21374: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21375: LD_VAR 0 1
21379: PPUSH
21380: LD_INT 1
21382: PPUSH
21383: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21387: LD_INT 35
21389: PPUSH
21390: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21394: LD_VAR 0 1
21398: PPUSH
21399: LD_INT 22
21401: PUSH
21402: LD_OWVAR 2
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PPUSH
21411: CALL_OW 69
21415: PPUSH
21416: LD_VAR 0 1
21420: PPUSH
21421: CALL_OW 74
21425: PPUSH
21426: CALL_OW 115
// until IsDead ( un ) ;
21430: LD_VAR 0 1
21434: PPUSH
21435: CALL_OW 301
21439: IFFALSE 21387
// end ;
21441: PPOPN 1
21443: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21444: LD_EXP 48
21448: IFFALSE 21456
21450: PUSH
21451: LD_EXP 88
21455: AND
21456: IFFALSE 21468
21458: GO 21460
21460: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21461: LD_STRING earthquake(getX(game), 0, 32)
21463: PPUSH
21464: CALL_OW 559
21468: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21469: LD_EXP 48
21473: IFFALSE 21481
21475: PUSH
21476: LD_EXP 89
21480: AND
21481: IFFALSE 21572
21483: GO 21485
21485: DISABLE
21486: LD_INT 0
21488: PPUSH
// begin enable ;
21489: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21490: LD_ADDR_VAR 0 1
21494: PUSH
21495: LD_INT 22
21497: PUSH
21498: LD_OWVAR 2
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 21
21509: PUSH
21510: LD_INT 2
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 33
21519: PUSH
21520: LD_INT 3
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: LIST
21531: PPUSH
21532: CALL_OW 69
21536: ST_TO_ADDR
// if not tmp then
21537: LD_VAR 0 1
21541: NOT
21542: IFFALSE 21546
// exit ;
21544: GO 21572
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21546: LD_VAR 0 1
21550: PUSH
21551: LD_INT 1
21553: PPUSH
21554: LD_VAR 0 1
21558: PPUSH
21559: CALL_OW 12
21563: ARRAY
21564: PPUSH
21565: LD_INT 1
21567: PPUSH
21568: CALL_OW 234
// end ;
21572: PPOPN 1
21574: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21575: LD_EXP 48
21579: IFFALSE 21587
21581: PUSH
21582: LD_EXP 90
21586: AND
21587: IFFALSE 21728
21589: GO 21591
21591: DISABLE
21592: LD_INT 0
21594: PPUSH
21595: PPUSH
21596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21597: LD_ADDR_VAR 0 3
21601: PUSH
21602: LD_INT 22
21604: PUSH
21605: LD_OWVAR 2
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 25
21616: PUSH
21617: LD_INT 1
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PPUSH
21628: CALL_OW 69
21632: ST_TO_ADDR
// if not tmp then
21633: LD_VAR 0 3
21637: NOT
21638: IFFALSE 21642
// exit ;
21640: GO 21728
// un := tmp [ rand ( 1 , tmp ) ] ;
21642: LD_ADDR_VAR 0 2
21646: PUSH
21647: LD_VAR 0 3
21651: PUSH
21652: LD_INT 1
21654: PPUSH
21655: LD_VAR 0 3
21659: PPUSH
21660: CALL_OW 12
21664: ARRAY
21665: ST_TO_ADDR
// if Crawls ( un ) then
21666: LD_VAR 0 2
21670: PPUSH
21671: CALL_OW 318
21675: IFFALSE 21686
// ComWalk ( un ) ;
21677: LD_VAR 0 2
21681: PPUSH
21682: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21686: LD_VAR 0 2
21690: PPUSH
21691: LD_INT 9
21693: PPUSH
21694: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21698: LD_INT 28
21700: PPUSH
21701: LD_OWVAR 2
21705: PPUSH
21706: LD_INT 2
21708: PPUSH
21709: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21713: LD_INT 29
21715: PPUSH
21716: LD_OWVAR 2
21720: PPUSH
21721: LD_INT 2
21723: PPUSH
21724: CALL_OW 322
// end ;
21728: PPOPN 3
21730: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21731: LD_EXP 48
21735: IFFALSE 21743
21737: PUSH
21738: LD_EXP 91
21742: AND
21743: IFFALSE 21854
21745: GO 21747
21747: DISABLE
21748: LD_INT 0
21750: PPUSH
21751: PPUSH
21752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21753: LD_ADDR_VAR 0 3
21757: PUSH
21758: LD_INT 22
21760: PUSH
21761: LD_OWVAR 2
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 25
21772: PUSH
21773: LD_INT 1
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PPUSH
21784: CALL_OW 69
21788: ST_TO_ADDR
// if not tmp then
21789: LD_VAR 0 3
21793: NOT
21794: IFFALSE 21798
// exit ;
21796: GO 21854
// un := tmp [ rand ( 1 , tmp ) ] ;
21798: LD_ADDR_VAR 0 2
21802: PUSH
21803: LD_VAR 0 3
21807: PUSH
21808: LD_INT 1
21810: PPUSH
21811: LD_VAR 0 3
21815: PPUSH
21816: CALL_OW 12
21820: ARRAY
21821: ST_TO_ADDR
// if Crawls ( un ) then
21822: LD_VAR 0 2
21826: PPUSH
21827: CALL_OW 318
21831: IFFALSE 21842
// ComWalk ( un ) ;
21833: LD_VAR 0 2
21837: PPUSH
21838: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21842: LD_VAR 0 2
21846: PPUSH
21847: LD_INT 8
21849: PPUSH
21850: CALL_OW 336
// end ;
21854: PPOPN 3
21856: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21857: LD_EXP 48
21861: IFFALSE 21869
21863: PUSH
21864: LD_EXP 92
21868: AND
21869: IFFALSE 22013
21871: GO 21873
21873: DISABLE
21874: LD_INT 0
21876: PPUSH
21877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21878: LD_ADDR_VAR 0 2
21882: PUSH
21883: LD_INT 22
21885: PUSH
21886: LD_OWVAR 2
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: LD_INT 21
21897: PUSH
21898: LD_INT 2
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 2
21907: PUSH
21908: LD_INT 34
21910: PUSH
21911: LD_INT 12
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PUSH
21918: LD_INT 34
21920: PUSH
21921: LD_INT 51
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 34
21930: PUSH
21931: LD_INT 32
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: LIST
21948: PPUSH
21949: CALL_OW 69
21953: ST_TO_ADDR
// if not tmp then
21954: LD_VAR 0 2
21958: NOT
21959: IFFALSE 21963
// exit ;
21961: GO 22013
// for i in tmp do
21963: LD_ADDR_VAR 0 1
21967: PUSH
21968: LD_VAR 0 2
21972: PUSH
21973: FOR_IN
21974: IFFALSE 22011
// if GetCargo ( i , mat_artifact ) = 0 then
21976: LD_VAR 0 1
21980: PPUSH
21981: LD_INT 4
21983: PPUSH
21984: CALL_OW 289
21988: PUSH
21989: LD_INT 0
21991: EQUAL
21992: IFFALSE 22009
// SetCargo ( i , mat_siberit , 100 ) ;
21994: LD_VAR 0 1
21998: PPUSH
21999: LD_INT 3
22001: PPUSH
22002: LD_INT 100
22004: PPUSH
22005: CALL_OW 290
22009: GO 21973
22011: POP
22012: POP
// end ;
22013: PPOPN 2
22015: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22016: LD_EXP 48
22020: IFFALSE 22028
22022: PUSH
22023: LD_EXP 93
22027: AND
22028: IFFALSE 22211
22030: GO 22032
22032: DISABLE
22033: LD_INT 0
22035: PPUSH
22036: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22037: LD_ADDR_VAR 0 2
22041: PUSH
22042: LD_INT 22
22044: PUSH
22045: LD_OWVAR 2
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PPUSH
22054: CALL_OW 69
22058: ST_TO_ADDR
// if not tmp then
22059: LD_VAR 0 2
22063: NOT
22064: IFFALSE 22068
// exit ;
22066: GO 22211
// for i := 1 to 2 do
22068: LD_ADDR_VAR 0 1
22072: PUSH
22073: DOUBLE
22074: LD_INT 1
22076: DEC
22077: ST_TO_ADDR
22078: LD_INT 2
22080: PUSH
22081: FOR_TO
22082: IFFALSE 22209
// begin uc_side := your_side ;
22084: LD_ADDR_OWVAR 20
22088: PUSH
22089: LD_OWVAR 2
22093: ST_TO_ADDR
// uc_nation := nation_american ;
22094: LD_ADDR_OWVAR 21
22098: PUSH
22099: LD_INT 1
22101: ST_TO_ADDR
// vc_chassis := us_morphling ;
22102: LD_ADDR_OWVAR 37
22106: PUSH
22107: LD_INT 5
22109: ST_TO_ADDR
// vc_engine := engine_siberite ;
22110: LD_ADDR_OWVAR 39
22114: PUSH
22115: LD_INT 3
22117: ST_TO_ADDR
// vc_control := control_computer ;
22118: LD_ADDR_OWVAR 38
22122: PUSH
22123: LD_INT 3
22125: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22126: LD_ADDR_OWVAR 40
22130: PUSH
22131: LD_INT 10
22133: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22134: LD_VAR 0 2
22138: PUSH
22139: LD_INT 1
22141: ARRAY
22142: PPUSH
22143: CALL_OW 310
22147: NOT
22148: IFFALSE 22195
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22150: CALL_OW 45
22154: PPUSH
22155: LD_VAR 0 2
22159: PUSH
22160: LD_INT 1
22162: ARRAY
22163: PPUSH
22164: CALL_OW 250
22168: PPUSH
22169: LD_VAR 0 2
22173: PUSH
22174: LD_INT 1
22176: ARRAY
22177: PPUSH
22178: CALL_OW 251
22182: PPUSH
22183: LD_INT 12
22185: PPUSH
22186: LD_INT 1
22188: PPUSH
22189: CALL_OW 50
22193: GO 22207
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22195: CALL_OW 45
22199: PPUSH
22200: LD_INT 1
22202: PPUSH
22203: CALL_OW 51
// end ;
22207: GO 22081
22209: POP
22210: POP
// end ;
22211: PPOPN 2
22213: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22214: LD_EXP 48
22218: IFFALSE 22226
22220: PUSH
22221: LD_EXP 94
22225: AND
22226: IFFALSE 22448
22228: GO 22230
22230: DISABLE
22231: LD_INT 0
22233: PPUSH
22234: PPUSH
22235: PPUSH
22236: PPUSH
22237: PPUSH
22238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22239: LD_ADDR_VAR 0 6
22243: PUSH
22244: LD_INT 22
22246: PUSH
22247: LD_OWVAR 2
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 21
22258: PUSH
22259: LD_INT 1
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 3
22268: PUSH
22269: LD_INT 23
22271: PUSH
22272: LD_INT 0
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: LIST
22287: PPUSH
22288: CALL_OW 69
22292: ST_TO_ADDR
// if not tmp then
22293: LD_VAR 0 6
22297: NOT
22298: IFFALSE 22302
// exit ;
22300: GO 22448
// s1 := rand ( 1 , 4 ) ;
22302: LD_ADDR_VAR 0 2
22306: PUSH
22307: LD_INT 1
22309: PPUSH
22310: LD_INT 4
22312: PPUSH
22313: CALL_OW 12
22317: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22318: LD_ADDR_VAR 0 4
22322: PUSH
22323: LD_VAR 0 6
22327: PUSH
22328: LD_INT 1
22330: ARRAY
22331: PPUSH
22332: LD_VAR 0 2
22336: PPUSH
22337: CALL_OW 259
22341: ST_TO_ADDR
// if s1 = 1 then
22342: LD_VAR 0 2
22346: PUSH
22347: LD_INT 1
22349: EQUAL
22350: IFFALSE 22370
// s2 := rand ( 2 , 4 ) else
22352: LD_ADDR_VAR 0 3
22356: PUSH
22357: LD_INT 2
22359: PPUSH
22360: LD_INT 4
22362: PPUSH
22363: CALL_OW 12
22367: ST_TO_ADDR
22368: GO 22378
// s2 := 1 ;
22370: LD_ADDR_VAR 0 3
22374: PUSH
22375: LD_INT 1
22377: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22378: LD_ADDR_VAR 0 5
22382: PUSH
22383: LD_VAR 0 6
22387: PUSH
22388: LD_INT 1
22390: ARRAY
22391: PPUSH
22392: LD_VAR 0 3
22396: PPUSH
22397: CALL_OW 259
22401: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22402: LD_VAR 0 6
22406: PUSH
22407: LD_INT 1
22409: ARRAY
22410: PPUSH
22411: LD_VAR 0 2
22415: PPUSH
22416: LD_VAR 0 5
22420: PPUSH
22421: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22425: LD_VAR 0 6
22429: PUSH
22430: LD_INT 1
22432: ARRAY
22433: PPUSH
22434: LD_VAR 0 3
22438: PPUSH
22439: LD_VAR 0 4
22443: PPUSH
22444: CALL_OW 237
// end ;
22448: PPOPN 6
22450: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22451: LD_EXP 48
22455: IFFALSE 22463
22457: PUSH
22458: LD_EXP 95
22462: AND
22463: IFFALSE 22542
22465: GO 22467
22467: DISABLE
22468: LD_INT 0
22470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22471: LD_ADDR_VAR 0 1
22475: PUSH
22476: LD_INT 22
22478: PUSH
22479: LD_OWVAR 2
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 30
22490: PUSH
22491: LD_INT 3
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PPUSH
22502: CALL_OW 69
22506: ST_TO_ADDR
// if not tmp then
22507: LD_VAR 0 1
22511: NOT
22512: IFFALSE 22516
// exit ;
22514: GO 22542
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22516: LD_VAR 0 1
22520: PUSH
22521: LD_INT 1
22523: PPUSH
22524: LD_VAR 0 1
22528: PPUSH
22529: CALL_OW 12
22533: ARRAY
22534: PPUSH
22535: LD_INT 1
22537: PPUSH
22538: CALL_OW 234
// end ;
22542: PPOPN 1
22544: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22545: LD_EXP 48
22549: IFFALSE 22557
22551: PUSH
22552: LD_EXP 96
22556: AND
22557: IFFALSE 22669
22559: GO 22561
22561: DISABLE
22562: LD_INT 0
22564: PPUSH
22565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22566: LD_ADDR_VAR 0 2
22570: PUSH
22571: LD_INT 22
22573: PUSH
22574: LD_OWVAR 2
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 2
22585: PUSH
22586: LD_INT 30
22588: PUSH
22589: LD_INT 27
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: LD_INT 30
22598: PUSH
22599: LD_INT 26
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 30
22608: PUSH
22609: LD_INT 28
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PPUSH
22626: CALL_OW 69
22630: ST_TO_ADDR
// if not tmp then
22631: LD_VAR 0 2
22635: NOT
22636: IFFALSE 22640
// exit ;
22638: GO 22669
// for i in tmp do
22640: LD_ADDR_VAR 0 1
22644: PUSH
22645: LD_VAR 0 2
22649: PUSH
22650: FOR_IN
22651: IFFALSE 22667
// SetLives ( i , 1 ) ;
22653: LD_VAR 0 1
22657: PPUSH
22658: LD_INT 1
22660: PPUSH
22661: CALL_OW 234
22665: GO 22650
22667: POP
22668: POP
// end ;
22669: PPOPN 2
22671: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22672: LD_EXP 48
22676: IFFALSE 22684
22678: PUSH
22679: LD_EXP 97
22683: AND
22684: IFFALSE 22971
22686: GO 22688
22688: DISABLE
22689: LD_INT 0
22691: PPUSH
22692: PPUSH
22693: PPUSH
// begin i := rand ( 1 , 7 ) ;
22694: LD_ADDR_VAR 0 1
22698: PUSH
22699: LD_INT 1
22701: PPUSH
22702: LD_INT 7
22704: PPUSH
22705: CALL_OW 12
22709: ST_TO_ADDR
// case i of 1 :
22710: LD_VAR 0 1
22714: PUSH
22715: LD_INT 1
22717: DOUBLE
22718: EQUAL
22719: IFTRUE 22723
22721: GO 22733
22723: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22724: LD_STRING earthquake(getX(game), 0, 32)
22726: PPUSH
22727: CALL_OW 559
22731: GO 22971
22733: LD_INT 2
22735: DOUBLE
22736: EQUAL
22737: IFTRUE 22741
22739: GO 22755
22741: POP
// begin ToLua ( displayStucuk(); ) ;
22742: LD_STRING displayStucuk();
22744: PPUSH
22745: CALL_OW 559
// ResetFog ;
22749: CALL_OW 335
// end ; 3 :
22753: GO 22971
22755: LD_INT 3
22757: DOUBLE
22758: EQUAL
22759: IFTRUE 22763
22761: GO 22867
22763: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22764: LD_ADDR_VAR 0 2
22768: PUSH
22769: LD_INT 22
22771: PUSH
22772: LD_OWVAR 2
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 25
22783: PUSH
22784: LD_INT 1
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PPUSH
22795: CALL_OW 69
22799: ST_TO_ADDR
// if not tmp then
22800: LD_VAR 0 2
22804: NOT
22805: IFFALSE 22809
// exit ;
22807: GO 22971
// un := tmp [ rand ( 1 , tmp ) ] ;
22809: LD_ADDR_VAR 0 3
22813: PUSH
22814: LD_VAR 0 2
22818: PUSH
22819: LD_INT 1
22821: PPUSH
22822: LD_VAR 0 2
22826: PPUSH
22827: CALL_OW 12
22831: ARRAY
22832: ST_TO_ADDR
// if Crawls ( un ) then
22833: LD_VAR 0 3
22837: PPUSH
22838: CALL_OW 318
22842: IFFALSE 22853
// ComWalk ( un ) ;
22844: LD_VAR 0 3
22848: PPUSH
22849: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22853: LD_VAR 0 3
22857: PPUSH
22858: LD_INT 8
22860: PPUSH
22861: CALL_OW 336
// end ; 4 :
22865: GO 22971
22867: LD_INT 4
22869: DOUBLE
22870: EQUAL
22871: IFTRUE 22875
22873: GO 22949
22875: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22876: LD_ADDR_VAR 0 2
22880: PUSH
22881: LD_INT 22
22883: PUSH
22884: LD_OWVAR 2
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 30
22895: PUSH
22896: LD_INT 29
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PPUSH
22907: CALL_OW 69
22911: ST_TO_ADDR
// if not tmp then
22912: LD_VAR 0 2
22916: NOT
22917: IFFALSE 22921
// exit ;
22919: GO 22971
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22921: LD_VAR 0 2
22925: PUSH
22926: LD_INT 1
22928: ARRAY
22929: PPUSH
22930: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22934: LD_VAR 0 2
22938: PUSH
22939: LD_INT 1
22941: ARRAY
22942: PPUSH
22943: CALL_OW 65
// end ; 5 .. 7 :
22947: GO 22971
22949: LD_INT 5
22951: DOUBLE
22952: GREATEREQUAL
22953: IFFALSE 22961
22955: LD_INT 7
22957: DOUBLE
22958: LESSEQUAL
22959: IFTRUE 22963
22961: GO 22970
22963: POP
// StreamSibBomb ; end ;
22964: CALL 19152 0 0
22968: GO 22971
22970: POP
// end ;
22971: PPOPN 3
22973: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22974: LD_EXP 48
22978: IFFALSE 22986
22980: PUSH
22981: LD_EXP 98
22985: AND
22986: IFFALSE 23142
22988: GO 22990
22990: DISABLE
22991: LD_INT 0
22993: PPUSH
22994: PPUSH
22995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22996: LD_ADDR_VAR 0 2
23000: PUSH
23001: LD_INT 81
23003: PUSH
23004: LD_OWVAR 2
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 2
23015: PUSH
23016: LD_INT 21
23018: PUSH
23019: LD_INT 1
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 21
23028: PUSH
23029: LD_INT 2
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: LIST
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PPUSH
23045: CALL_OW 69
23049: ST_TO_ADDR
// if not tmp then
23050: LD_VAR 0 2
23054: NOT
23055: IFFALSE 23059
// exit ;
23057: GO 23142
// p := 0 ;
23059: LD_ADDR_VAR 0 3
23063: PUSH
23064: LD_INT 0
23066: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23067: LD_INT 35
23069: PPUSH
23070: CALL_OW 67
// p := p + 1 ;
23074: LD_ADDR_VAR 0 3
23078: PUSH
23079: LD_VAR 0 3
23083: PUSH
23084: LD_INT 1
23086: PLUS
23087: ST_TO_ADDR
// for i in tmp do
23088: LD_ADDR_VAR 0 1
23092: PUSH
23093: LD_VAR 0 2
23097: PUSH
23098: FOR_IN
23099: IFFALSE 23130
// if GetLives ( i ) < 1000 then
23101: LD_VAR 0 1
23105: PPUSH
23106: CALL_OW 256
23110: PUSH
23111: LD_INT 1000
23113: LESS
23114: IFFALSE 23128
// SetLives ( i , 1000 ) ;
23116: LD_VAR 0 1
23120: PPUSH
23121: LD_INT 1000
23123: PPUSH
23124: CALL_OW 234
23128: GO 23098
23130: POP
23131: POP
// until p > 20 ;
23132: LD_VAR 0 3
23136: PUSH
23137: LD_INT 20
23139: GREATER
23140: IFFALSE 23067
// end ;
23142: PPOPN 3
23144: END
// every 0 0$1 trigger StreamModeActive and sTime do
23145: LD_EXP 48
23149: IFFALSE 23157
23151: PUSH
23152: LD_EXP 99
23156: AND
23157: IFFALSE 23192
23159: GO 23161
23161: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23162: LD_INT 28
23164: PPUSH
23165: LD_OWVAR 2
23169: PPUSH
23170: LD_INT 2
23172: PPUSH
23173: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23177: LD_INT 30
23179: PPUSH
23180: LD_OWVAR 2
23184: PPUSH
23185: LD_INT 2
23187: PPUSH
23188: CALL_OW 322
// end ;
23192: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23193: LD_EXP 48
23197: IFFALSE 23205
23199: PUSH
23200: LD_EXP 100
23204: AND
23205: IFFALSE 23326
23207: GO 23209
23209: DISABLE
23210: LD_INT 0
23212: PPUSH
23213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23214: LD_ADDR_VAR 0 2
23218: PUSH
23219: LD_INT 22
23221: PUSH
23222: LD_OWVAR 2
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 21
23233: PUSH
23234: LD_INT 1
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 3
23243: PUSH
23244: LD_INT 23
23246: PUSH
23247: LD_INT 0
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: LIST
23262: PPUSH
23263: CALL_OW 69
23267: ST_TO_ADDR
// if not tmp then
23268: LD_VAR 0 2
23272: NOT
23273: IFFALSE 23277
// exit ;
23275: GO 23326
// for i in tmp do
23277: LD_ADDR_VAR 0 1
23281: PUSH
23282: LD_VAR 0 2
23286: PUSH
23287: FOR_IN
23288: IFFALSE 23324
// begin if Crawls ( i ) then
23290: LD_VAR 0 1
23294: PPUSH
23295: CALL_OW 318
23299: IFFALSE 23310
// ComWalk ( i ) ;
23301: LD_VAR 0 1
23305: PPUSH
23306: CALL_OW 138
// SetClass ( i , 2 ) ;
23310: LD_VAR 0 1
23314: PPUSH
23315: LD_INT 2
23317: PPUSH
23318: CALL_OW 336
// end ;
23322: GO 23287
23324: POP
23325: POP
// end ;
23326: PPOPN 2
23328: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23329: LD_EXP 48
23333: IFFALSE 23341
23335: PUSH
23336: LD_EXP 101
23340: AND
23341: IFFALSE 23631
23343: GO 23345
23345: DISABLE
23346: LD_INT 0
23348: PPUSH
23349: PPUSH
23350: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23351: LD_OWVAR 2
23355: PPUSH
23356: LD_INT 9
23358: PPUSH
23359: LD_INT 1
23361: PPUSH
23362: LD_INT 1
23364: PPUSH
23365: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23369: LD_INT 9
23371: PPUSH
23372: LD_OWVAR 2
23376: PPUSH
23377: CALL_OW 343
// uc_side := 9 ;
23381: LD_ADDR_OWVAR 20
23385: PUSH
23386: LD_INT 9
23388: ST_TO_ADDR
// uc_nation := 2 ;
23389: LD_ADDR_OWVAR 21
23393: PUSH
23394: LD_INT 2
23396: ST_TO_ADDR
// hc_name := Dark Warrior ;
23397: LD_ADDR_OWVAR 26
23401: PUSH
23402: LD_STRING Dark Warrior
23404: ST_TO_ADDR
// hc_gallery :=  ;
23405: LD_ADDR_OWVAR 33
23409: PUSH
23410: LD_STRING 
23412: ST_TO_ADDR
// hc_noskilllimit := true ;
23413: LD_ADDR_OWVAR 76
23417: PUSH
23418: LD_INT 1
23420: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23421: LD_ADDR_OWVAR 31
23425: PUSH
23426: LD_INT 30
23428: PUSH
23429: LD_INT 30
23431: PUSH
23432: LD_INT 30
23434: PUSH
23435: LD_INT 30
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: ST_TO_ADDR
// un := CreateHuman ;
23444: LD_ADDR_VAR 0 3
23448: PUSH
23449: CALL_OW 44
23453: ST_TO_ADDR
// hc_noskilllimit := false ;
23454: LD_ADDR_OWVAR 76
23458: PUSH
23459: LD_INT 0
23461: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23462: LD_VAR 0 3
23466: PPUSH
23467: LD_INT 1
23469: PPUSH
23470: CALL_OW 51
// ToLua ( playRanger() ) ;
23474: LD_STRING playRanger()
23476: PPUSH
23477: CALL_OW 559
// p := 0 ;
23481: LD_ADDR_VAR 0 2
23485: PUSH
23486: LD_INT 0
23488: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23489: LD_INT 35
23491: PPUSH
23492: CALL_OW 67
// p := p + 1 ;
23496: LD_ADDR_VAR 0 2
23500: PUSH
23501: LD_VAR 0 2
23505: PUSH
23506: LD_INT 1
23508: PLUS
23509: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23510: LD_VAR 0 3
23514: PPUSH
23515: CALL_OW 256
23519: PUSH
23520: LD_INT 1000
23522: LESS
23523: IFFALSE 23537
// SetLives ( un , 1000 ) ;
23525: LD_VAR 0 3
23529: PPUSH
23530: LD_INT 1000
23532: PPUSH
23533: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23537: LD_VAR 0 3
23541: PPUSH
23542: LD_INT 81
23544: PUSH
23545: LD_OWVAR 2
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 91
23556: PUSH
23557: LD_VAR 0 3
23561: PUSH
23562: LD_INT 30
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: LIST
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PPUSH
23574: CALL_OW 69
23578: PPUSH
23579: LD_VAR 0 3
23583: PPUSH
23584: CALL_OW 74
23588: PPUSH
23589: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23593: LD_VAR 0 2
23597: PUSH
23598: LD_INT 80
23600: GREATER
23601: IFTRUE 23614
23603: PUSH
23604: LD_VAR 0 3
23608: PPUSH
23609: CALL_OW 301
23613: OR
23614: IFFALSE 23489
// if un then
23616: LD_VAR 0 3
23620: IFFALSE 23631
// RemoveUnit ( un ) ;
23622: LD_VAR 0 3
23626: PPUSH
23627: CALL_OW 64
// end ;
23631: PPOPN 3
23633: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23634: LD_EXP 102
23638: IFFALSE 23754
23640: GO 23642
23642: DISABLE
23643: LD_INT 0
23645: PPUSH
23646: PPUSH
23647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23648: LD_ADDR_VAR 0 2
23652: PUSH
23653: LD_INT 81
23655: PUSH
23656: LD_OWVAR 2
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 21
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PPUSH
23679: CALL_OW 69
23683: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23684: LD_STRING playComputer()
23686: PPUSH
23687: CALL_OW 559
// if not tmp then
23691: LD_VAR 0 2
23695: NOT
23696: IFFALSE 23700
// exit ;
23698: GO 23754
// for i in tmp do
23700: LD_ADDR_VAR 0 1
23704: PUSH
23705: LD_VAR 0 2
23709: PUSH
23710: FOR_IN
23711: IFFALSE 23752
// for j := 1 to 4 do
23713: LD_ADDR_VAR 0 3
23717: PUSH
23718: DOUBLE
23719: LD_INT 1
23721: DEC
23722: ST_TO_ADDR
23723: LD_INT 4
23725: PUSH
23726: FOR_TO
23727: IFFALSE 23748
// SetSkill ( i , j , 10 ) ;
23729: LD_VAR 0 1
23733: PPUSH
23734: LD_VAR 0 3
23738: PPUSH
23739: LD_INT 10
23741: PPUSH
23742: CALL_OW 237
23746: GO 23726
23748: POP
23749: POP
23750: GO 23710
23752: POP
23753: POP
// end ;
23754: PPOPN 3
23756: END
// every 0 0$1 trigger s30 do var i , tmp ;
23757: LD_EXP 103
23761: IFFALSE 23830
23763: GO 23765
23765: DISABLE
23766: LD_INT 0
23768: PPUSH
23769: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23770: LD_ADDR_VAR 0 2
23774: PUSH
23775: LD_INT 22
23777: PUSH
23778: LD_OWVAR 2
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PPUSH
23787: CALL_OW 69
23791: ST_TO_ADDR
// if not tmp then
23792: LD_VAR 0 2
23796: NOT
23797: IFFALSE 23801
// exit ;
23799: GO 23830
// for i in tmp do
23801: LD_ADDR_VAR 0 1
23805: PUSH
23806: LD_VAR 0 2
23810: PUSH
23811: FOR_IN
23812: IFFALSE 23828
// SetLives ( i , 300 ) ;
23814: LD_VAR 0 1
23818: PPUSH
23819: LD_INT 300
23821: PPUSH
23822: CALL_OW 234
23826: GO 23811
23828: POP
23829: POP
// end ;
23830: PPOPN 2
23832: END
// every 0 0$1 trigger s60 do var i , tmp ;
23833: LD_EXP 104
23837: IFFALSE 23906
23839: GO 23841
23841: DISABLE
23842: LD_INT 0
23844: PPUSH
23845: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23846: LD_ADDR_VAR 0 2
23850: PUSH
23851: LD_INT 22
23853: PUSH
23854: LD_OWVAR 2
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PPUSH
23863: CALL_OW 69
23867: ST_TO_ADDR
// if not tmp then
23868: LD_VAR 0 2
23872: NOT
23873: IFFALSE 23877
// exit ;
23875: GO 23906
// for i in tmp do
23877: LD_ADDR_VAR 0 1
23881: PUSH
23882: LD_VAR 0 2
23886: PUSH
23887: FOR_IN
23888: IFFALSE 23904
// SetLives ( i , 600 ) ;
23890: LD_VAR 0 1
23894: PPUSH
23895: LD_INT 600
23897: PPUSH
23898: CALL_OW 234
23902: GO 23887
23904: POP
23905: POP
// end ;
23906: PPOPN 2
23908: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23909: LD_INT 0
23911: PPUSH
// case cmd of 301 :
23912: LD_VAR 0 1
23916: PUSH
23917: LD_INT 301
23919: DOUBLE
23920: EQUAL
23921: IFTRUE 23925
23923: GO 23957
23925: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23926: LD_VAR 0 6
23930: PPUSH
23931: LD_VAR 0 7
23935: PPUSH
23936: LD_VAR 0 8
23940: PPUSH
23941: LD_VAR 0 4
23945: PPUSH
23946: LD_VAR 0 5
23950: PPUSH
23951: CALL 25170 0 5
23955: GO 24078
23957: LD_INT 302
23959: DOUBLE
23960: EQUAL
23961: IFTRUE 23965
23963: GO 24002
23965: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23966: LD_VAR 0 6
23970: PPUSH
23971: LD_VAR 0 7
23975: PPUSH
23976: LD_VAR 0 8
23980: PPUSH
23981: LD_VAR 0 9
23985: PPUSH
23986: LD_VAR 0 4
23990: PPUSH
23991: LD_VAR 0 5
23995: PPUSH
23996: CALL 25261 0 6
24000: GO 24078
24002: LD_INT 303
24004: DOUBLE
24005: EQUAL
24006: IFTRUE 24010
24008: GO 24047
24010: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24011: LD_VAR 0 6
24015: PPUSH
24016: LD_VAR 0 7
24020: PPUSH
24021: LD_VAR 0 8
24025: PPUSH
24026: LD_VAR 0 9
24030: PPUSH
24031: LD_VAR 0 4
24035: PPUSH
24036: LD_VAR 0 5
24040: PPUSH
24041: CALL 24083 0 6
24045: GO 24078
24047: LD_INT 304
24049: DOUBLE
24050: EQUAL
24051: IFTRUE 24055
24053: GO 24077
24055: POP
// hHackTeleport ( unit , x , y ) ; end ;
24056: LD_VAR 0 2
24060: PPUSH
24061: LD_VAR 0 4
24065: PPUSH
24066: LD_VAR 0 5
24070: PPUSH
24071: CALL 25854 0 3
24075: GO 24078
24077: POP
// end ;
24078: LD_VAR 0 12
24082: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24083: LD_INT 0
24085: PPUSH
24086: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24087: LD_VAR 0 1
24091: PUSH
24092: LD_INT 1
24094: LESS
24095: IFTRUE 24107
24097: PUSH
24098: LD_VAR 0 1
24102: PUSH
24103: LD_INT 3
24105: GREATER
24106: OR
24107: IFTRUE 24125
24109: PUSH
24110: LD_VAR 0 5
24114: PPUSH
24115: LD_VAR 0 6
24119: PPUSH
24120: CALL_OW 428
24124: OR
24125: IFFALSE 24129
// exit ;
24127: GO 24857
// uc_side := your_side ;
24129: LD_ADDR_OWVAR 20
24133: PUSH
24134: LD_OWVAR 2
24138: ST_TO_ADDR
// uc_nation := nation ;
24139: LD_ADDR_OWVAR 21
24143: PUSH
24144: LD_VAR 0 1
24148: ST_TO_ADDR
// bc_level = 1 ;
24149: LD_ADDR_OWVAR 43
24153: PUSH
24154: LD_INT 1
24156: ST_TO_ADDR
// case btype of 1 :
24157: LD_VAR 0 2
24161: PUSH
24162: LD_INT 1
24164: DOUBLE
24165: EQUAL
24166: IFTRUE 24170
24168: GO 24181
24170: POP
// bc_type := b_depot ; 2 :
24171: LD_ADDR_OWVAR 42
24175: PUSH
24176: LD_INT 0
24178: ST_TO_ADDR
24179: GO 24801
24181: LD_INT 2
24183: DOUBLE
24184: EQUAL
24185: IFTRUE 24189
24187: GO 24200
24189: POP
// bc_type := b_warehouse ; 3 :
24190: LD_ADDR_OWVAR 42
24194: PUSH
24195: LD_INT 1
24197: ST_TO_ADDR
24198: GO 24801
24200: LD_INT 3
24202: DOUBLE
24203: EQUAL
24204: IFTRUE 24208
24206: GO 24219
24208: POP
// bc_type := b_lab ; 4 .. 9 :
24209: LD_ADDR_OWVAR 42
24213: PUSH
24214: LD_INT 6
24216: ST_TO_ADDR
24217: GO 24801
24219: LD_INT 4
24221: DOUBLE
24222: GREATEREQUAL
24223: IFFALSE 24231
24225: LD_INT 9
24227: DOUBLE
24228: LESSEQUAL
24229: IFTRUE 24233
24231: GO 24293
24233: POP
// begin bc_type := b_lab_half ;
24234: LD_ADDR_OWVAR 42
24238: PUSH
24239: LD_INT 7
24241: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24242: LD_ADDR_OWVAR 44
24246: PUSH
24247: LD_INT 10
24249: PUSH
24250: LD_INT 11
24252: PUSH
24253: LD_INT 12
24255: PUSH
24256: LD_INT 15
24258: PUSH
24259: LD_INT 14
24261: PUSH
24262: LD_INT 13
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: PUSH
24273: LD_VAR 0 2
24277: PUSH
24278: LD_INT 3
24280: MINUS
24281: ARRAY
24282: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
24283: LD_ADDR_OWVAR 45
24287: PUSH
24288: LD_INT 9
24290: ST_TO_ADDR
// end ; 10 .. 13 :
24291: GO 24801
24293: LD_INT 10
24295: DOUBLE
24296: GREATEREQUAL
24297: IFFALSE 24305
24299: LD_INT 13
24301: DOUBLE
24302: LESSEQUAL
24303: IFTRUE 24307
24305: GO 24384
24307: POP
// begin bc_type := b_lab_full ;
24308: LD_ADDR_OWVAR 42
24312: PUSH
24313: LD_INT 8
24315: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24316: LD_ADDR_OWVAR 44
24320: PUSH
24321: LD_INT 10
24323: PUSH
24324: LD_INT 12
24326: PUSH
24327: LD_INT 14
24329: PUSH
24330: LD_INT 13
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: PUSH
24339: LD_VAR 0 2
24343: PUSH
24344: LD_INT 9
24346: MINUS
24347: ARRAY
24348: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24349: LD_ADDR_OWVAR 45
24353: PUSH
24354: LD_INT 11
24356: PUSH
24357: LD_INT 15
24359: PUSH
24360: LD_INT 12
24362: PUSH
24363: LD_INT 15
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: PUSH
24372: LD_VAR 0 2
24376: PUSH
24377: LD_INT 9
24379: MINUS
24380: ARRAY
24381: ST_TO_ADDR
// end ; 14 :
24382: GO 24801
24384: LD_INT 14
24386: DOUBLE
24387: EQUAL
24388: IFTRUE 24392
24390: GO 24403
24392: POP
// bc_type := b_workshop ; 15 :
24393: LD_ADDR_OWVAR 42
24397: PUSH
24398: LD_INT 2
24400: ST_TO_ADDR
24401: GO 24801
24403: LD_INT 15
24405: DOUBLE
24406: EQUAL
24407: IFTRUE 24411
24409: GO 24422
24411: POP
// bc_type := b_factory ; 16 :
24412: LD_ADDR_OWVAR 42
24416: PUSH
24417: LD_INT 3
24419: ST_TO_ADDR
24420: GO 24801
24422: LD_INT 16
24424: DOUBLE
24425: EQUAL
24426: IFTRUE 24430
24428: GO 24441
24430: POP
// bc_type := b_ext_gun ; 17 :
24431: LD_ADDR_OWVAR 42
24435: PUSH
24436: LD_INT 17
24438: ST_TO_ADDR
24439: GO 24801
24441: LD_INT 17
24443: DOUBLE
24444: EQUAL
24445: IFTRUE 24449
24447: GO 24477
24449: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24450: LD_ADDR_OWVAR 42
24454: PUSH
24455: LD_INT 19
24457: PUSH
24458: LD_INT 23
24460: PUSH
24461: LD_INT 19
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: LIST
24468: PUSH
24469: LD_VAR 0 1
24473: ARRAY
24474: ST_TO_ADDR
24475: GO 24801
24477: LD_INT 18
24479: DOUBLE
24480: EQUAL
24481: IFTRUE 24485
24483: GO 24496
24485: POP
// bc_type := b_ext_radar ; 19 :
24486: LD_ADDR_OWVAR 42
24490: PUSH
24491: LD_INT 20
24493: ST_TO_ADDR
24494: GO 24801
24496: LD_INT 19
24498: DOUBLE
24499: EQUAL
24500: IFTRUE 24504
24502: GO 24515
24504: POP
// bc_type := b_ext_radio ; 20 :
24505: LD_ADDR_OWVAR 42
24509: PUSH
24510: LD_INT 22
24512: ST_TO_ADDR
24513: GO 24801
24515: LD_INT 20
24517: DOUBLE
24518: EQUAL
24519: IFTRUE 24523
24521: GO 24534
24523: POP
// bc_type := b_ext_siberium ; 21 :
24524: LD_ADDR_OWVAR 42
24528: PUSH
24529: LD_INT 21
24531: ST_TO_ADDR
24532: GO 24801
24534: LD_INT 21
24536: DOUBLE
24537: EQUAL
24538: IFTRUE 24542
24540: GO 24553
24542: POP
// bc_type := b_ext_computer ; 22 :
24543: LD_ADDR_OWVAR 42
24547: PUSH
24548: LD_INT 24
24550: ST_TO_ADDR
24551: GO 24801
24553: LD_INT 22
24555: DOUBLE
24556: EQUAL
24557: IFTRUE 24561
24559: GO 24572
24561: POP
// bc_type := b_ext_track ; 23 :
24562: LD_ADDR_OWVAR 42
24566: PUSH
24567: LD_INT 16
24569: ST_TO_ADDR
24570: GO 24801
24572: LD_INT 23
24574: DOUBLE
24575: EQUAL
24576: IFTRUE 24580
24578: GO 24591
24580: POP
// bc_type := b_ext_laser ; 24 :
24581: LD_ADDR_OWVAR 42
24585: PUSH
24586: LD_INT 25
24588: ST_TO_ADDR
24589: GO 24801
24591: LD_INT 24
24593: DOUBLE
24594: EQUAL
24595: IFTRUE 24599
24597: GO 24610
24599: POP
// bc_type := b_control_tower ; 25 :
24600: LD_ADDR_OWVAR 42
24604: PUSH
24605: LD_INT 36
24607: ST_TO_ADDR
24608: GO 24801
24610: LD_INT 25
24612: DOUBLE
24613: EQUAL
24614: IFTRUE 24618
24616: GO 24629
24618: POP
// bc_type := b_breastwork ; 26 :
24619: LD_ADDR_OWVAR 42
24623: PUSH
24624: LD_INT 31
24626: ST_TO_ADDR
24627: GO 24801
24629: LD_INT 26
24631: DOUBLE
24632: EQUAL
24633: IFTRUE 24637
24635: GO 24648
24637: POP
// bc_type := b_bunker ; 27 :
24638: LD_ADDR_OWVAR 42
24642: PUSH
24643: LD_INT 32
24645: ST_TO_ADDR
24646: GO 24801
24648: LD_INT 27
24650: DOUBLE
24651: EQUAL
24652: IFTRUE 24656
24654: GO 24667
24656: POP
// bc_type := b_turret ; 28 :
24657: LD_ADDR_OWVAR 42
24661: PUSH
24662: LD_INT 33
24664: ST_TO_ADDR
24665: GO 24801
24667: LD_INT 28
24669: DOUBLE
24670: EQUAL
24671: IFTRUE 24675
24673: GO 24686
24675: POP
// bc_type := b_armoury ; 29 :
24676: LD_ADDR_OWVAR 42
24680: PUSH
24681: LD_INT 4
24683: ST_TO_ADDR
24684: GO 24801
24686: LD_INT 29
24688: DOUBLE
24689: EQUAL
24690: IFTRUE 24694
24692: GO 24705
24694: POP
// bc_type := b_barracks ; 30 :
24695: LD_ADDR_OWVAR 42
24699: PUSH
24700: LD_INT 5
24702: ST_TO_ADDR
24703: GO 24801
24705: LD_INT 30
24707: DOUBLE
24708: EQUAL
24709: IFTRUE 24713
24711: GO 24724
24713: POP
// bc_type := b_solar_power ; 31 :
24714: LD_ADDR_OWVAR 42
24718: PUSH
24719: LD_INT 27
24721: ST_TO_ADDR
24722: GO 24801
24724: LD_INT 31
24726: DOUBLE
24727: EQUAL
24728: IFTRUE 24732
24730: GO 24743
24732: POP
// bc_type := b_oil_power ; 32 :
24733: LD_ADDR_OWVAR 42
24737: PUSH
24738: LD_INT 26
24740: ST_TO_ADDR
24741: GO 24801
24743: LD_INT 32
24745: DOUBLE
24746: EQUAL
24747: IFTRUE 24751
24749: GO 24762
24751: POP
// bc_type := b_siberite_power ; 33 :
24752: LD_ADDR_OWVAR 42
24756: PUSH
24757: LD_INT 28
24759: ST_TO_ADDR
24760: GO 24801
24762: LD_INT 33
24764: DOUBLE
24765: EQUAL
24766: IFTRUE 24770
24768: GO 24781
24770: POP
// bc_type := b_oil_mine ; 34 :
24771: LD_ADDR_OWVAR 42
24775: PUSH
24776: LD_INT 29
24778: ST_TO_ADDR
24779: GO 24801
24781: LD_INT 34
24783: DOUBLE
24784: EQUAL
24785: IFTRUE 24789
24787: GO 24800
24789: POP
// bc_type := b_siberite_mine ; end ;
24790: LD_ADDR_OWVAR 42
24794: PUSH
24795: LD_INT 30
24797: ST_TO_ADDR
24798: GO 24801
24800: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24801: LD_ADDR_VAR 0 8
24805: PUSH
24806: LD_VAR 0 5
24810: PPUSH
24811: LD_VAR 0 6
24815: PPUSH
24816: LD_VAR 0 3
24820: PPUSH
24821: CALL_OW 47
24825: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24826: LD_OWVAR 42
24830: PUSH
24831: LD_INT 32
24833: PUSH
24834: LD_INT 33
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: IN
24841: IFFALSE 24857
// PlaceWeaponTurret ( b , weapon ) ;
24843: LD_VAR 0 8
24847: PPUSH
24848: LD_VAR 0 4
24852: PPUSH
24853: CALL_OW 431
// end ;
24857: LD_VAR 0 7
24861: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24862: LD_INT 0
24864: PPUSH
24865: PPUSH
24866: PPUSH
24867: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24868: LD_ADDR_VAR 0 4
24872: PUSH
24873: LD_INT 22
24875: PUSH
24876: LD_OWVAR 2
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 2
24887: PUSH
24888: LD_INT 30
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 30
24900: PUSH
24901: LD_INT 1
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: LIST
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PPUSH
24917: CALL_OW 69
24921: ST_TO_ADDR
// if not tmp then
24922: LD_VAR 0 4
24926: NOT
24927: IFFALSE 24931
// exit ;
24929: GO 24990
// for i in tmp do
24931: LD_ADDR_VAR 0 2
24935: PUSH
24936: LD_VAR 0 4
24940: PUSH
24941: FOR_IN
24942: IFFALSE 24988
// for j = 1 to 3 do
24944: LD_ADDR_VAR 0 3
24948: PUSH
24949: DOUBLE
24950: LD_INT 1
24952: DEC
24953: ST_TO_ADDR
24954: LD_INT 3
24956: PUSH
24957: FOR_TO
24958: IFFALSE 24984
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24960: LD_VAR 0 2
24964: PPUSH
24965: CALL_OW 274
24969: PPUSH
24970: LD_VAR 0 3
24974: PPUSH
24975: LD_INT 99999
24977: PPUSH
24978: CALL_OW 277
24982: GO 24957
24984: POP
24985: POP
24986: GO 24941
24988: POP
24989: POP
// end ;
24990: LD_VAR 0 1
24994: RET
// export function hHackSetLevel10 ; var i , j ; begin
24995: LD_INT 0
24997: PPUSH
24998: PPUSH
24999: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25000: LD_ADDR_VAR 0 2
25004: PUSH
25005: LD_INT 21
25007: PUSH
25008: LD_INT 1
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PPUSH
25015: CALL_OW 69
25019: PUSH
25020: FOR_IN
25021: IFFALSE 25073
// if IsSelected ( i ) then
25023: LD_VAR 0 2
25027: PPUSH
25028: CALL_OW 306
25032: IFFALSE 25071
// begin for j := 1 to 4 do
25034: LD_ADDR_VAR 0 3
25038: PUSH
25039: DOUBLE
25040: LD_INT 1
25042: DEC
25043: ST_TO_ADDR
25044: LD_INT 4
25046: PUSH
25047: FOR_TO
25048: IFFALSE 25069
// SetSkill ( i , j , 10 ) ;
25050: LD_VAR 0 2
25054: PPUSH
25055: LD_VAR 0 3
25059: PPUSH
25060: LD_INT 10
25062: PPUSH
25063: CALL_OW 237
25067: GO 25047
25069: POP
25070: POP
// end ;
25071: GO 25020
25073: POP
25074: POP
// end ;
25075: LD_VAR 0 1
25079: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25080: LD_INT 0
25082: PPUSH
25083: PPUSH
25084: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25085: LD_ADDR_VAR 0 2
25089: PUSH
25090: LD_INT 22
25092: PUSH
25093: LD_OWVAR 2
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 21
25104: PUSH
25105: LD_INT 1
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PPUSH
25116: CALL_OW 69
25120: PUSH
25121: FOR_IN
25122: IFFALSE 25163
// begin for j := 1 to 4 do
25124: LD_ADDR_VAR 0 3
25128: PUSH
25129: DOUBLE
25130: LD_INT 1
25132: DEC
25133: ST_TO_ADDR
25134: LD_INT 4
25136: PUSH
25137: FOR_TO
25138: IFFALSE 25159
// SetSkill ( i , j , 10 ) ;
25140: LD_VAR 0 2
25144: PPUSH
25145: LD_VAR 0 3
25149: PPUSH
25150: LD_INT 10
25152: PPUSH
25153: CALL_OW 237
25157: GO 25137
25159: POP
25160: POP
// end ;
25161: GO 25121
25163: POP
25164: POP
// end ;
25165: LD_VAR 0 1
25169: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25170: LD_INT 0
25172: PPUSH
// uc_side := your_side ;
25173: LD_ADDR_OWVAR 20
25177: PUSH
25178: LD_OWVAR 2
25182: ST_TO_ADDR
// uc_nation := nation ;
25183: LD_ADDR_OWVAR 21
25187: PUSH
25188: LD_VAR 0 1
25192: ST_TO_ADDR
// InitHc ;
25193: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25197: LD_INT 0
25199: PPUSH
25200: LD_VAR 0 2
25204: PPUSH
25205: LD_VAR 0 3
25209: PPUSH
25210: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25214: LD_VAR 0 4
25218: PPUSH
25219: LD_VAR 0 5
25223: PPUSH
25224: CALL_OW 428
25228: PUSH
25229: LD_INT 0
25231: EQUAL
25232: IFFALSE 25256
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25234: CALL_OW 44
25238: PPUSH
25239: LD_VAR 0 4
25243: PPUSH
25244: LD_VAR 0 5
25248: PPUSH
25249: LD_INT 1
25251: PPUSH
25252: CALL_OW 48
// end ;
25256: LD_VAR 0 6
25260: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25261: LD_INT 0
25263: PPUSH
25264: PPUSH
// uc_side := your_side ;
25265: LD_ADDR_OWVAR 20
25269: PUSH
25270: LD_OWVAR 2
25274: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25275: LD_VAR 0 1
25279: PUSH
25280: LD_INT 1
25282: PUSH
25283: LD_INT 2
25285: PUSH
25286: LD_INT 3
25288: PUSH
25289: LD_INT 4
25291: PUSH
25292: LD_INT 5
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: IN
25302: IFFALSE 25314
// uc_nation := nation_american else
25304: LD_ADDR_OWVAR 21
25308: PUSH
25309: LD_INT 1
25311: ST_TO_ADDR
25312: GO 25357
// if chassis in [ 11 , 12 , 13 , 14 ] then
25314: LD_VAR 0 1
25318: PUSH
25319: LD_INT 11
25321: PUSH
25322: LD_INT 12
25324: PUSH
25325: LD_INT 13
25327: PUSH
25328: LD_INT 14
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: IN
25337: IFFALSE 25349
// uc_nation := nation_arabian else
25339: LD_ADDR_OWVAR 21
25343: PUSH
25344: LD_INT 2
25346: ST_TO_ADDR
25347: GO 25357
// uc_nation := nation_russian ;
25349: LD_ADDR_OWVAR 21
25353: PUSH
25354: LD_INT 3
25356: ST_TO_ADDR
// vc_chassis := chassis ;
25357: LD_ADDR_OWVAR 37
25361: PUSH
25362: LD_VAR 0 1
25366: ST_TO_ADDR
// vc_engine := engine ;
25367: LD_ADDR_OWVAR 39
25371: PUSH
25372: LD_VAR 0 2
25376: ST_TO_ADDR
// vc_control := control ;
25377: LD_ADDR_OWVAR 38
25381: PUSH
25382: LD_VAR 0 3
25386: ST_TO_ADDR
// vc_weapon := weapon ;
25387: LD_ADDR_OWVAR 40
25391: PUSH
25392: LD_VAR 0 4
25396: ST_TO_ADDR
// un := CreateVehicle ;
25397: LD_ADDR_VAR 0 8
25401: PUSH
25402: CALL_OW 45
25406: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25407: LD_VAR 0 8
25411: PPUSH
25412: LD_INT 0
25414: PPUSH
25415: LD_INT 5
25417: PPUSH
25418: CALL_OW 12
25422: PPUSH
25423: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25427: LD_VAR 0 8
25431: PPUSH
25432: LD_VAR 0 5
25436: PPUSH
25437: LD_VAR 0 6
25441: PPUSH
25442: LD_INT 1
25444: PPUSH
25445: CALL_OW 48
// end ;
25449: LD_VAR 0 7
25453: RET
// export hInvincible ; every 1 do
25454: GO 25456
25456: DISABLE
// hInvincible := [ ] ;
25457: LD_ADDR_EXP 105
25461: PUSH
25462: EMPTY
25463: ST_TO_ADDR
25464: END
// every 10 do var i ;
25465: GO 25467
25467: DISABLE
25468: LD_INT 0
25470: PPUSH
// begin enable ;
25471: ENABLE
// if not hInvincible then
25472: LD_EXP 105
25476: NOT
25477: IFFALSE 25481
// exit ;
25479: GO 25525
// for i in hInvincible do
25481: LD_ADDR_VAR 0 1
25485: PUSH
25486: LD_EXP 105
25490: PUSH
25491: FOR_IN
25492: IFFALSE 25523
// if GetLives ( i ) < 1000 then
25494: LD_VAR 0 1
25498: PPUSH
25499: CALL_OW 256
25503: PUSH
25504: LD_INT 1000
25506: LESS
25507: IFFALSE 25521
// SetLives ( i , 1000 ) ;
25509: LD_VAR 0 1
25513: PPUSH
25514: LD_INT 1000
25516: PPUSH
25517: CALL_OW 234
25521: GO 25491
25523: POP
25524: POP
// end ;
25525: PPOPN 1
25527: END
// export function hHackInvincible ; var i ; begin
25528: LD_INT 0
25530: PPUSH
25531: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25532: LD_ADDR_VAR 0 2
25536: PUSH
25537: LD_INT 2
25539: PUSH
25540: LD_INT 21
25542: PUSH
25543: LD_INT 1
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 21
25552: PUSH
25553: LD_INT 2
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: LIST
25564: PPUSH
25565: CALL_OW 69
25569: PUSH
25570: FOR_IN
25571: IFFALSE 25632
// if IsSelected ( i ) then
25573: LD_VAR 0 2
25577: PPUSH
25578: CALL_OW 306
25582: IFFALSE 25630
// begin if i in hInvincible then
25584: LD_VAR 0 2
25588: PUSH
25589: LD_EXP 105
25593: IN
25594: IFFALSE 25614
// hInvincible := hInvincible diff i else
25596: LD_ADDR_EXP 105
25600: PUSH
25601: LD_EXP 105
25605: PUSH
25606: LD_VAR 0 2
25610: DIFF
25611: ST_TO_ADDR
25612: GO 25630
// hInvincible := hInvincible union i ;
25614: LD_ADDR_EXP 105
25618: PUSH
25619: LD_EXP 105
25623: PUSH
25624: LD_VAR 0 2
25628: UNION
25629: ST_TO_ADDR
// end ;
25630: GO 25570
25632: POP
25633: POP
// end ;
25634: LD_VAR 0 1
25638: RET
// export function hHackInvisible ; var i , j ; begin
25639: LD_INT 0
25641: PPUSH
25642: PPUSH
25643: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25644: LD_ADDR_VAR 0 2
25648: PUSH
25649: LD_INT 21
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PPUSH
25659: CALL_OW 69
25663: PUSH
25664: FOR_IN
25665: IFFALSE 25689
// if IsSelected ( i ) then
25667: LD_VAR 0 2
25671: PPUSH
25672: CALL_OW 306
25676: IFFALSE 25687
// ComForceInvisible ( i ) ;
25678: LD_VAR 0 2
25682: PPUSH
25683: CALL_OW 496
25687: GO 25664
25689: POP
25690: POP
// end ;
25691: LD_VAR 0 1
25695: RET
// export function hHackChangeYourSide ; begin
25696: LD_INT 0
25698: PPUSH
// if your_side = 8 then
25699: LD_OWVAR 2
25703: PUSH
25704: LD_INT 8
25706: EQUAL
25707: IFFALSE 25719
// your_side := 0 else
25709: LD_ADDR_OWVAR 2
25713: PUSH
25714: LD_INT 0
25716: ST_TO_ADDR
25717: GO 25733
// your_side := your_side + 1 ;
25719: LD_ADDR_OWVAR 2
25723: PUSH
25724: LD_OWVAR 2
25728: PUSH
25729: LD_INT 1
25731: PLUS
25732: ST_TO_ADDR
// end ;
25733: LD_VAR 0 1
25737: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25738: LD_INT 0
25740: PPUSH
25741: PPUSH
25742: PPUSH
// for i in all_units do
25743: LD_ADDR_VAR 0 2
25747: PUSH
25748: LD_OWVAR 3
25752: PUSH
25753: FOR_IN
25754: IFFALSE 25832
// if IsSelected ( i ) then
25756: LD_VAR 0 2
25760: PPUSH
25761: CALL_OW 306
25765: IFFALSE 25830
// begin j := GetSide ( i ) ;
25767: LD_ADDR_VAR 0 3
25771: PUSH
25772: LD_VAR 0 2
25776: PPUSH
25777: CALL_OW 255
25781: ST_TO_ADDR
// if j = 8 then
25782: LD_VAR 0 3
25786: PUSH
25787: LD_INT 8
25789: EQUAL
25790: IFFALSE 25802
// j := 0 else
25792: LD_ADDR_VAR 0 3
25796: PUSH
25797: LD_INT 0
25799: ST_TO_ADDR
25800: GO 25816
// j := j + 1 ;
25802: LD_ADDR_VAR 0 3
25806: PUSH
25807: LD_VAR 0 3
25811: PUSH
25812: LD_INT 1
25814: PLUS
25815: ST_TO_ADDR
// SetSide ( i , j ) ;
25816: LD_VAR 0 2
25820: PPUSH
25821: LD_VAR 0 3
25825: PPUSH
25826: CALL_OW 235
// end ;
25830: GO 25753
25832: POP
25833: POP
// end ;
25834: LD_VAR 0 1
25838: RET
// export function hHackFog ; begin
25839: LD_INT 0
25841: PPUSH
// FogOff ( true ) ;
25842: LD_INT 1
25844: PPUSH
25845: CALL_OW 344
// end ;
25849: LD_VAR 0 1
25853: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25854: LD_INT 0
25856: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25857: LD_VAR 0 1
25861: PPUSH
25862: LD_VAR 0 2
25866: PPUSH
25867: LD_VAR 0 3
25871: PPUSH
25872: LD_INT 1
25874: PPUSH
25875: LD_INT 1
25877: PPUSH
25878: CALL_OW 483
// CenterOnXY ( x , y ) ;
25882: LD_VAR 0 2
25886: PPUSH
25887: LD_VAR 0 3
25891: PPUSH
25892: CALL_OW 84
// end ;
25896: LD_VAR 0 4
25900: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25901: LD_INT 0
25903: PPUSH
25904: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25905: LD_VAR 0 1
25909: NOT
25910: IFTRUE 25929
25912: PUSH
25913: LD_VAR 0 2
25917: PPUSH
25918: LD_VAR 0 3
25922: PPUSH
25923: CALL_OW 488
25927: NOT
25928: OR
25929: IFTRUE 25964
25931: PUSH
25932: LD_VAR 0 1
25936: PPUSH
25937: CALL_OW 266
25941: PUSH
25942: LD_INT 3
25944: NONEQUAL
25945: IFFALSE 25963
25947: PUSH
25948: LD_VAR 0 1
25952: PPUSH
25953: CALL_OW 247
25957: PUSH
25958: LD_INT 1
25960: EQUAL
25961: NOT
25962: AND
25963: OR
25964: IFFALSE 25968
// exit ;
25966: GO 26250
// if GetType ( factory ) = unit_human then
25968: LD_VAR 0 1
25972: PPUSH
25973: CALL_OW 247
25977: PUSH
25978: LD_INT 1
25980: EQUAL
25981: IFFALSE 25998
// factory := IsInUnit ( factory ) ;
25983: LD_ADDR_VAR 0 1
25987: PUSH
25988: LD_VAR 0 1
25992: PPUSH
25993: CALL_OW 310
25997: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25998: LD_VAR 0 1
26002: PPUSH
26003: CALL_OW 266
26007: PUSH
26008: LD_INT 3
26010: NONEQUAL
26011: IFFALSE 26015
// exit ;
26013: GO 26250
// for i := 1 to Count ( factoryWaypoints ) do
26015: LD_ADDR_VAR 0 5
26019: PUSH
26020: DOUBLE
26021: LD_INT 1
26023: DEC
26024: ST_TO_ADDR
26025: LD_EXP 106
26029: PPUSH
26030: CALL 35783 0 1
26034: PUSH
26035: FOR_TO
26036: IFFALSE 26198
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
26038: LD_VAR 0 2
26042: PPUSH
26043: LD_VAR 0 3
26047: PPUSH
26048: CALL_OW 428
26052: PUSH
26053: LD_EXP 106
26057: PUSH
26058: LD_VAR 0 5
26062: ARRAY
26063: PUSH
26064: LD_INT 2
26066: ARRAY
26067: EQUAL
26068: IFFALSE 26100
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26070: LD_ADDR_EXP 106
26074: PUSH
26075: LD_EXP 106
26079: PPUSH
26080: LD_VAR 0 5
26084: PPUSH
26085: CALL_OW 3
26089: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26090: CALL 26255 0 0
// exit ;
26094: POP
26095: POP
26096: GO 26250
// end else
26098: GO 26196
// if factory = factoryWaypoints [ i ] [ 2 ] then
26100: LD_VAR 0 1
26104: PUSH
26105: LD_EXP 106
26109: PUSH
26110: LD_VAR 0 5
26114: ARRAY
26115: PUSH
26116: LD_INT 2
26118: ARRAY
26119: EQUAL
26120: IFFALSE 26196
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26122: LD_ADDR_EXP 106
26126: PUSH
26127: LD_EXP 106
26131: PPUSH
26132: LD_VAR 0 5
26136: PPUSH
26137: CALL_OW 3
26141: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26142: LD_ADDR_EXP 106
26146: PUSH
26147: LD_EXP 106
26151: PPUSH
26152: LD_VAR 0 1
26156: PPUSH
26157: CALL_OW 255
26161: PUSH
26162: LD_VAR 0 1
26166: PUSH
26167: LD_VAR 0 2
26171: PUSH
26172: LD_VAR 0 3
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: PPUSH
26183: CALL 71715 0 2
26187: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26188: CALL 26255 0 0
// exit ;
26192: POP
26193: POP
26194: GO 26250
// end ; end ;
26196: GO 26035
26198: POP
26199: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26200: LD_ADDR_EXP 106
26204: PUSH
26205: LD_EXP 106
26209: PPUSH
26210: LD_VAR 0 1
26214: PPUSH
26215: CALL_OW 255
26219: PUSH
26220: LD_VAR 0 1
26224: PUSH
26225: LD_VAR 0 2
26229: PUSH
26230: LD_VAR 0 3
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: PPUSH
26241: CALL 71715 0 2
26245: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26246: CALL 26255 0 0
// end ;
26250: LD_VAR 0 4
26254: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26255: LD_INT 0
26257: PPUSH
26258: PPUSH
26259: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26260: LD_STRING resetFactoryWaypoint();
26262: PPUSH
26263: CALL_OW 559
// if factoryWaypoints then
26267: LD_EXP 106
26271: IFFALSE 26392
// begin list := factoryWaypoints ;
26273: LD_ADDR_VAR 0 3
26277: PUSH
26278: LD_EXP 106
26282: ST_TO_ADDR
// for i := 1 to list do
26283: LD_ADDR_VAR 0 2
26287: PUSH
26288: DOUBLE
26289: LD_INT 1
26291: DEC
26292: ST_TO_ADDR
26293: LD_VAR 0 3
26297: PUSH
26298: FOR_TO
26299: IFFALSE 26390
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26301: LD_STRING setFactoryWaypointXY(
26303: PUSH
26304: LD_VAR 0 3
26308: PUSH
26309: LD_VAR 0 2
26313: ARRAY
26314: PUSH
26315: LD_INT 1
26317: ARRAY
26318: STR
26319: PUSH
26320: LD_STRING ,
26322: STR
26323: PUSH
26324: LD_VAR 0 3
26328: PUSH
26329: LD_VAR 0 2
26333: ARRAY
26334: PUSH
26335: LD_INT 2
26337: ARRAY
26338: STR
26339: PUSH
26340: LD_STRING ,
26342: STR
26343: PUSH
26344: LD_VAR 0 3
26348: PUSH
26349: LD_VAR 0 2
26353: ARRAY
26354: PUSH
26355: LD_INT 3
26357: ARRAY
26358: STR
26359: PUSH
26360: LD_STRING ,
26362: STR
26363: PUSH
26364: LD_VAR 0 3
26368: PUSH
26369: LD_VAR 0 2
26373: ARRAY
26374: PUSH
26375: LD_INT 4
26377: ARRAY
26378: STR
26379: PUSH
26380: LD_STRING )
26382: STR
26383: PPUSH
26384: CALL_OW 559
26388: GO 26298
26390: POP
26391: POP
// end ; end ;
26392: LD_VAR 0 1
26396: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26397: LD_INT 0
26399: PPUSH
// if HexInfo ( x , y ) = warehouse then
26400: LD_VAR 0 2
26404: PPUSH
26405: LD_VAR 0 3
26409: PPUSH
26410: CALL_OW 428
26414: PUSH
26415: LD_VAR 0 1
26419: EQUAL
26420: IFFALSE 26447
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26422: LD_ADDR_EXP 108
26426: PUSH
26427: LD_EXP 108
26431: PPUSH
26432: LD_VAR 0 1
26436: PPUSH
26437: LD_INT 0
26439: PPUSH
26440: CALL_OW 1
26444: ST_TO_ADDR
26445: GO 26498
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26447: LD_ADDR_EXP 108
26451: PUSH
26452: LD_EXP 108
26456: PPUSH
26457: LD_VAR 0 1
26461: PPUSH
26462: LD_VAR 0 1
26466: PPUSH
26467: CALL_OW 255
26471: PUSH
26472: LD_VAR 0 1
26476: PUSH
26477: LD_VAR 0 2
26481: PUSH
26482: LD_VAR 0 3
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: PPUSH
26493: CALL_OW 1
26497: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26498: CALL 26507 0 0
// end ;
26502: LD_VAR 0 4
26506: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26507: LD_INT 0
26509: PPUSH
26510: PPUSH
26511: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26512: LD_STRING resetWarehouseGatheringPoints();
26514: PPUSH
26515: CALL_OW 559
// if warehouseGatheringPoints then
26519: LD_EXP 108
26523: IFFALSE 26649
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26525: LD_ADDR_VAR 0 3
26529: PUSH
26530: LD_EXP 108
26534: PPUSH
26535: CALL 75649 0 1
26539: ST_TO_ADDR
// for i := 1 to list do
26540: LD_ADDR_VAR 0 2
26544: PUSH
26545: DOUBLE
26546: LD_INT 1
26548: DEC
26549: ST_TO_ADDR
26550: LD_VAR 0 3
26554: PUSH
26555: FOR_TO
26556: IFFALSE 26647
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26558: LD_STRING setWarehouseGatheringPointXY(
26560: PUSH
26561: LD_VAR 0 3
26565: PUSH
26566: LD_VAR 0 2
26570: ARRAY
26571: PUSH
26572: LD_INT 1
26574: ARRAY
26575: STR
26576: PUSH
26577: LD_STRING ,
26579: STR
26580: PUSH
26581: LD_VAR 0 3
26585: PUSH
26586: LD_VAR 0 2
26590: ARRAY
26591: PUSH
26592: LD_INT 2
26594: ARRAY
26595: STR
26596: PUSH
26597: LD_STRING ,
26599: STR
26600: PUSH
26601: LD_VAR 0 3
26605: PUSH
26606: LD_VAR 0 2
26610: ARRAY
26611: PUSH
26612: LD_INT 3
26614: ARRAY
26615: STR
26616: PUSH
26617: LD_STRING ,
26619: STR
26620: PUSH
26621: LD_VAR 0 3
26625: PUSH
26626: LD_VAR 0 2
26630: ARRAY
26631: PUSH
26632: LD_INT 4
26634: ARRAY
26635: STR
26636: PUSH
26637: LD_STRING )
26639: STR
26640: PPUSH
26641: CALL_OW 559
26645: GO 26555
26647: POP
26648: POP
// end ; end ;
26649: LD_VAR 0 1
26653: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26654: LD_EXP 108
26658: IFFALSE 27353
26660: GO 26662
26662: DISABLE
26663: LD_INT 0
26665: PPUSH
26666: PPUSH
26667: PPUSH
26668: PPUSH
26669: PPUSH
26670: PPUSH
26671: PPUSH
26672: PPUSH
26673: PPUSH
// begin enable ;
26674: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26675: LD_ADDR_VAR 0 3
26679: PUSH
26680: LD_EXP 108
26684: PPUSH
26685: CALL 75649 0 1
26689: ST_TO_ADDR
// if not list then
26690: LD_VAR 0 3
26694: NOT
26695: IFFALSE 26699
// exit ;
26697: GO 27353
// for i := 1 to list do
26699: LD_ADDR_VAR 0 1
26703: PUSH
26704: DOUBLE
26705: LD_INT 1
26707: DEC
26708: ST_TO_ADDR
26709: LD_VAR 0 3
26713: PUSH
26714: FOR_TO
26715: IFFALSE 27351
// begin depot := list [ i ] [ 2 ] ;
26717: LD_ADDR_VAR 0 8
26721: PUSH
26722: LD_VAR 0 3
26726: PUSH
26727: LD_VAR 0 1
26731: ARRAY
26732: PUSH
26733: LD_INT 2
26735: ARRAY
26736: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26737: LD_ADDR_VAR 0 5
26741: PUSH
26742: LD_VAR 0 3
26746: PUSH
26747: LD_VAR 0 1
26751: ARRAY
26752: PUSH
26753: LD_INT 1
26755: ARRAY
26756: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26757: LD_VAR 0 8
26761: PPUSH
26762: CALL_OW 301
26766: IFTRUE 26785
26768: PUSH
26769: LD_VAR 0 5
26773: PUSH
26774: LD_VAR 0 8
26778: PPUSH
26779: CALL_OW 255
26783: NONEQUAL
26784: OR
26785: IFFALSE 26814
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26787: LD_ADDR_EXP 108
26791: PUSH
26792: LD_EXP 108
26796: PPUSH
26797: LD_VAR 0 8
26801: PPUSH
26802: LD_INT 0
26804: PPUSH
26805: CALL_OW 1
26809: ST_TO_ADDR
// exit ;
26810: POP
26811: POP
26812: GO 27353
// end ; x := list [ i ] [ 3 ] ;
26814: LD_ADDR_VAR 0 6
26818: PUSH
26819: LD_VAR 0 3
26823: PUSH
26824: LD_VAR 0 1
26828: ARRAY
26829: PUSH
26830: LD_INT 3
26832: ARRAY
26833: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26834: LD_ADDR_VAR 0 7
26838: PUSH
26839: LD_VAR 0 3
26843: PUSH
26844: LD_VAR 0 1
26848: ARRAY
26849: PUSH
26850: LD_INT 4
26852: ARRAY
26853: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26854: LD_ADDR_VAR 0 9
26858: PUSH
26859: LD_VAR 0 6
26863: PPUSH
26864: LD_VAR 0 7
26868: PPUSH
26869: LD_INT 16
26871: PPUSH
26872: CALL 74223 0 3
26876: ST_TO_ADDR
// if not cratesNearbyPoint then
26877: LD_VAR 0 9
26881: NOT
26882: IFFALSE 26888
// exit ;
26884: POP
26885: POP
26886: GO 27353
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26888: LD_ADDR_VAR 0 4
26892: PUSH
26893: LD_INT 22
26895: PUSH
26896: LD_VAR 0 5
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 3
26907: PUSH
26908: LD_INT 60
26910: PUSH
26911: EMPTY
26912: LIST
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 91
26920: PUSH
26921: LD_VAR 0 8
26925: PUSH
26926: LD_INT 6
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 2
26936: PUSH
26937: LD_INT 25
26939: PUSH
26940: LD_INT 2
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 25
26949: PUSH
26950: LD_INT 16
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: LIST
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: PPUSH
26968: CALL_OW 69
26972: PUSH
26973: LD_VAR 0 8
26977: PPUSH
26978: CALL_OW 313
26982: PPUSH
26983: LD_INT 3
26985: PUSH
26986: LD_INT 60
26988: PUSH
26989: EMPTY
26990: LIST
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 2
26998: PUSH
26999: LD_INT 25
27001: PUSH
27002: LD_INT 2
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 25
27011: PUSH
27012: LD_INT 16
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: LIST
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PPUSH
27028: CALL_OW 72
27032: UNION
27033: ST_TO_ADDR
// if tmp then
27034: LD_VAR 0 4
27038: IFFALSE 27118
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27040: LD_ADDR_VAR 0 4
27044: PUSH
27045: LD_VAR 0 4
27049: PPUSH
27050: LD_INT 3
27052: PPUSH
27053: CALL 72030 0 2
27057: ST_TO_ADDR
// for j in tmp do
27058: LD_ADDR_VAR 0 2
27062: PUSH
27063: LD_VAR 0 4
27067: PUSH
27068: FOR_IN
27069: IFFALSE 27112
// begin if IsInUnit ( j ) then
27071: LD_VAR 0 2
27075: PPUSH
27076: CALL_OW 310
27080: IFFALSE 27091
// ComExit ( j ) ;
27082: LD_VAR 0 2
27086: PPUSH
27087: CALL 72113 0 1
// AddComCollect ( j , x , y ) ;
27091: LD_VAR 0 2
27095: PPUSH
27096: LD_VAR 0 6
27100: PPUSH
27101: LD_VAR 0 7
27105: PPUSH
27106: CALL_OW 177
// end ;
27110: GO 27068
27112: POP
27113: POP
// exit ;
27114: POP
27115: POP
27116: GO 27353
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27118: LD_ADDR_VAR 0 4
27122: PUSH
27123: LD_INT 22
27125: PUSH
27126: LD_VAR 0 5
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 91
27137: PUSH
27138: LD_VAR 0 8
27142: PUSH
27143: LD_INT 8
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 2
27153: PUSH
27154: LD_INT 34
27156: PUSH
27157: LD_INT 12
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 34
27166: PUSH
27167: LD_INT 51
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 34
27176: PUSH
27177: LD_INT 32
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 34
27186: PUSH
27187: LD_INT 89
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: LIST
27205: PPUSH
27206: CALL_OW 69
27210: ST_TO_ADDR
// if tmp then
27211: LD_VAR 0 4
27215: IFFALSE 27349
// begin for j in tmp do
27217: LD_ADDR_VAR 0 2
27221: PUSH
27222: LD_VAR 0 4
27226: PUSH
27227: FOR_IN
27228: IFFALSE 27347
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27230: LD_VAR 0 2
27234: PPUSH
27235: CALL_OW 262
27239: PUSH
27240: LD_INT 3
27242: EQUAL
27243: IFTRUE 27260
27245: PUSH
27246: LD_VAR 0 2
27250: PPUSH
27251: CALL_OW 261
27255: PUSH
27256: LD_INT 20
27258: GREATER
27259: OR
27260: IFFALSE 27274
27262: PUSH
27263: LD_VAR 0 2
27267: PPUSH
27268: CALL_OW 314
27272: NOT
27273: AND
27274: IFFALSE 27304
27276: PUSH
27277: LD_VAR 0 2
27281: PPUSH
27282: CALL_OW 263
27286: PUSH
27287: LD_INT 1
27289: NONEQUAL
27290: IFTRUE 27303
27292: PUSH
27293: LD_VAR 0 2
27297: PPUSH
27298: CALL_OW 311
27302: OR
27303: AND
27304: IFFALSE 27345
// begin ComCollect ( j , x , y ) ;
27306: LD_VAR 0 2
27310: PPUSH
27311: LD_VAR 0 6
27315: PPUSH
27316: LD_VAR 0 7
27320: PPUSH
27321: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27325: LD_VAR 0 2
27329: PPUSH
27330: LD_VAR 0 8
27334: PPUSH
27335: CALL_OW 172
// exit ;
27339: POP
27340: POP
27341: POP
27342: POP
27343: GO 27353
// end ;
27345: GO 27227
27347: POP
27348: POP
// end ; end ;
27349: GO 26714
27351: POP
27352: POP
// end ; end_of_file
27353: PPOPN 9
27355: END
// export function SOS_UnitDestroyed ( un ) ; begin
27356: LD_INT 0
27358: PPUSH
// ComRadiation ( un ) ;
27359: LD_VAR 0 1
27363: PPUSH
27364: CALL 28445 0 1
// end ;
27368: LD_VAR 0 2
27372: RET
// export function SOS_UnitKamikazed ( un ) ; begin
27373: LD_INT 0
27375: PPUSH
// ComRadiation ( un ) ;
27376: LD_VAR 0 1
27380: PPUSH
27381: CALL 28445 0 1
// end ;
27385: LD_VAR 0 2
27389: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27390: LD_INT 0
27392: PPUSH
// end ;
27393: LD_VAR 0 4
27397: RET
// export function SOS_Command ( cmd ) ; begin
27398: LD_INT 0
27400: PPUSH
// end ;
27401: LD_VAR 0 2
27405: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27406: LD_INT 0
27408: PPUSH
// end ;
27409: LD_VAR 0 6
27413: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
27414: LD_INT 0
27416: PPUSH
27417: PPUSH
27418: PPUSH
27419: PPUSH
// if not vehicle or not factory then
27420: LD_VAR 0 1
27424: NOT
27425: IFTRUE 27434
27427: PUSH
27428: LD_VAR 0 2
27432: NOT
27433: OR
27434: IFFALSE 27438
// exit ;
27436: GO 28020
// if not factoryWaypoints then
27438: LD_EXP 106
27442: NOT
27443: IFFALSE 27447
// exit ;
27445: GO 28020
// for i := 1 to Count ( factoryWaypoints ) do
27447: LD_ADDR_VAR 0 4
27451: PUSH
27452: DOUBLE
27453: LD_INT 1
27455: DEC
27456: ST_TO_ADDR
27457: LD_EXP 106
27461: PPUSH
27462: CALL 35783 0 1
27466: PUSH
27467: FOR_TO
27468: IFFALSE 28018
// if factoryWaypoints [ i ] [ 2 ] = factory then
27470: LD_EXP 106
27474: PUSH
27475: LD_VAR 0 4
27479: ARRAY
27480: PUSH
27481: LD_INT 2
27483: ARRAY
27484: PUSH
27485: LD_VAR 0 2
27489: EQUAL
27490: IFFALSE 28016
// begin if GetControl ( vehicle ) = control_manual then
27492: LD_VAR 0 1
27496: PPUSH
27497: CALL_OW 263
27501: PUSH
27502: LD_INT 1
27504: EQUAL
27505: IFFALSE 27869
// begin driver := IsDrivenBy ( vehicle ) ;
27507: LD_ADDR_VAR 0 5
27511: PUSH
27512: LD_VAR 0 1
27516: PPUSH
27517: CALL_OW 311
27521: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
27522: LD_VAR 0 5
27526: PUSH
27527: LD_EXP 107
27531: IN
27532: IFTRUE 27546
27534: PUSH
27535: LD_VAR 0 1
27539: PUSH
27540: LD_EXP 107
27544: IN
27545: OR
27546: IFFALSE 27552
// exit ;
27548: POP
27549: POP
27550: GO 28020
// if not HasTask ( driver ) then
27552: LD_VAR 0 5
27556: PPUSH
27557: CALL_OW 314
27561: NOT
27562: IFFALSE 27867
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
27564: LD_ADDR_EXP 107
27568: PUSH
27569: LD_EXP 107
27573: PPUSH
27574: LD_VAR 0 5
27578: PPUSH
27579: CALL 71715 0 2
27583: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
27584: LD_ADDR_EXP 107
27588: PUSH
27589: LD_EXP 107
27593: PPUSH
27594: LD_VAR 0 1
27598: PPUSH
27599: CALL 71715 0 2
27603: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27604: LD_ADDR_VAR 0 6
27608: PUSH
27609: LD_EXP 106
27613: PUSH
27614: LD_VAR 0 4
27618: ARRAY
27619: PUSH
27620: LD_INT 3
27622: ARRAY
27623: PPUSH
27624: LD_EXP 106
27628: PUSH
27629: LD_VAR 0 4
27633: ARRAY
27634: PUSH
27635: LD_INT 4
27637: ARRAY
27638: PPUSH
27639: CALL_OW 428
27643: ST_TO_ADDR
// if hex then
27644: LD_VAR 0 6
27648: IFFALSE 27666
// ComMoveUnit ( driver , hex ) else
27650: LD_VAR 0 5
27654: PPUSH
27655: LD_VAR 0 6
27659: PPUSH
27660: CALL_OW 112
27664: GO 27750
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
27666: LD_VAR 0 1
27670: PPUSH
27671: LD_EXP 106
27675: PUSH
27676: LD_VAR 0 4
27680: ARRAY
27681: PUSH
27682: LD_INT 3
27684: ARRAY
27685: PPUSH
27686: LD_EXP 106
27690: PUSH
27691: LD_VAR 0 4
27695: ARRAY
27696: PUSH
27697: LD_INT 4
27699: ARRAY
27700: PPUSH
27701: CALL_OW 297
27705: PUSH
27706: LD_INT 0
27708: GREATER
27709: IFFALSE 27750
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27711: LD_VAR 0 5
27715: PPUSH
27716: LD_EXP 106
27720: PUSH
27721: LD_VAR 0 4
27725: ARRAY
27726: PUSH
27727: LD_INT 3
27729: ARRAY
27730: PPUSH
27731: LD_EXP 106
27735: PUSH
27736: LD_VAR 0 4
27740: ARRAY
27741: PUSH
27742: LD_INT 4
27744: ARRAY
27745: PPUSH
27746: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27750: LD_VAR 0 5
27754: PPUSH
27755: CALL_OW 181
// if Multiplayer then
27759: LD_OWVAR 4
27763: IFFALSE 27812
// begin repeat wait ( 10 ) ;
27765: LD_INT 10
27767: PPUSH
27768: CALL_OW 67
// until not IsInUnit ( driver ) ;
27772: LD_VAR 0 5
27776: PPUSH
27777: CALL_OW 310
27781: NOT
27782: IFFALSE 27765
// if not HasTask ( driver ) then
27784: LD_VAR 0 5
27788: PPUSH
27789: CALL_OW 314
27793: NOT
27794: IFFALSE 27810
// ComEnterUnit ( driver , factory ) ;
27796: LD_VAR 0 5
27800: PPUSH
27801: LD_VAR 0 2
27805: PPUSH
27806: CALL_OW 120
// end else
27810: GO 27826
// AddComEnterUnit ( driver , factory ) ;
27812: LD_VAR 0 5
27816: PPUSH
27817: LD_VAR 0 2
27821: PPUSH
27822: CALL_OW 180
// wait ( 0 0$1 ) ;
27826: LD_INT 35
27828: PPUSH
27829: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
27833: LD_ADDR_EXP 107
27837: PUSH
27838: LD_EXP 107
27842: PUSH
27843: LD_VAR 0 5
27847: DIFF
27848: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
27849: LD_ADDR_EXP 107
27853: PUSH
27854: LD_EXP 107
27858: PUSH
27859: LD_VAR 0 1
27863: DIFF
27864: ST_TO_ADDR
// break ;
27865: GO 28018
// end ; end else
27867: GO 28016
// if GetControl ( vehicle ) = control_remote then
27869: LD_VAR 0 1
27873: PPUSH
27874: CALL_OW 263
27878: PUSH
27879: LD_INT 2
27881: EQUAL
27882: IFFALSE 27968
// begin wait ( 0 0$2 ) ;
27884: LD_INT 70
27886: PPUSH
27887: CALL_OW 67
// repeat wait ( 10 ) ;
27891: LD_INT 10
27893: PPUSH
27894: CALL_OW 67
// Connect ( vehicle ) ;
27898: LD_VAR 0 1
27902: PPUSH
27903: CALL 42027 0 1
// until IsControledBy ( vehicle ) ;
27907: LD_VAR 0 1
27911: PPUSH
27912: CALL_OW 312
27916: IFFALSE 27891
// wait ( 10 ) ;
27918: LD_INT 10
27920: PPUSH
27921: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27925: LD_VAR 0 1
27929: PPUSH
27930: LD_EXP 106
27934: PUSH
27935: LD_VAR 0 4
27939: ARRAY
27940: PUSH
27941: LD_INT 3
27943: ARRAY
27944: PPUSH
27945: LD_EXP 106
27949: PUSH
27950: LD_VAR 0 4
27954: ARRAY
27955: PUSH
27956: LD_INT 4
27958: ARRAY
27959: PPUSH
27960: CALL_OW 111
// break ;
27964: GO 28018
// end else
27966: GO 28016
// begin wait ( 0 0$3 ) ;
27968: LD_INT 105
27970: PPUSH
27971: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27975: LD_VAR 0 1
27979: PPUSH
27980: LD_EXP 106
27984: PUSH
27985: LD_VAR 0 4
27989: ARRAY
27990: PUSH
27991: LD_INT 3
27993: ARRAY
27994: PPUSH
27995: LD_EXP 106
27999: PUSH
28000: LD_VAR 0 4
28004: ARRAY
28005: PUSH
28006: LD_INT 4
28008: ARRAY
28009: PPUSH
28010: CALL_OW 111
// break ;
28014: GO 28018
// end ; end ;
28016: GO 27467
28018: POP
28019: POP
// end ;
28020: LD_VAR 0 3
28024: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28025: LD_INT 0
28027: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28028: LD_VAR 0 1
28032: PUSH
28033: LD_INT 250
28035: EQUAL
28036: IFFALSE 28053
28038: PUSH
28039: LD_VAR 0 2
28043: PPUSH
28044: CALL_OW 264
28048: PUSH
28049: LD_INT 81
28051: EQUAL
28052: AND
28053: IFFALSE 28074
// MinerPlaceMine ( unit , x , y ) ;
28055: LD_VAR 0 2
28059: PPUSH
28060: LD_VAR 0 4
28064: PPUSH
28065: LD_VAR 0 5
28069: PPUSH
28070: CALL 31206 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28074: LD_VAR 0 1
28078: PUSH
28079: LD_INT 251
28081: EQUAL
28082: IFFALSE 28099
28084: PUSH
28085: LD_VAR 0 2
28089: PPUSH
28090: CALL_OW 264
28094: PUSH
28095: LD_INT 81
28097: EQUAL
28098: AND
28099: IFFALSE 28120
// MinerDetonateMine ( unit , x , y ) ;
28101: LD_VAR 0 2
28105: PPUSH
28106: LD_VAR 0 4
28110: PPUSH
28111: LD_VAR 0 5
28115: PPUSH
28116: CALL 31485 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28120: LD_VAR 0 1
28124: PUSH
28125: LD_INT 252
28127: EQUAL
28128: IFFALSE 28145
28130: PUSH
28131: LD_VAR 0 2
28135: PPUSH
28136: CALL_OW 264
28140: PUSH
28141: LD_INT 81
28143: EQUAL
28144: AND
28145: IFFALSE 28166
// MinerCreateMinefield ( unit , x , y ) ;
28147: LD_VAR 0 2
28151: PPUSH
28152: LD_VAR 0 4
28156: PPUSH
28157: LD_VAR 0 5
28161: PPUSH
28162: CALL 31904 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28166: LD_VAR 0 1
28170: PUSH
28171: LD_INT 253
28173: EQUAL
28174: IFFALSE 28191
28176: PUSH
28177: LD_VAR 0 2
28181: PPUSH
28182: CALL_OW 257
28186: PUSH
28187: LD_INT 5
28189: EQUAL
28190: AND
28191: IFFALSE 28212
// ComBinocular ( unit , x , y ) ;
28193: LD_VAR 0 2
28197: PPUSH
28198: LD_VAR 0 4
28202: PPUSH
28203: LD_VAR 0 5
28207: PPUSH
28208: CALL 32279 0 3
// if selectedUnit then
28212: LD_VAR 0 3
28216: IFFALSE 28276
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28218: LD_VAR 0 1
28222: PUSH
28223: LD_INT 254
28225: EQUAL
28226: IFFALSE 28243
28228: PUSH
28229: LD_VAR 0 2
28233: PPUSH
28234: CALL_OW 264
28238: PUSH
28239: LD_INT 99
28241: EQUAL
28242: AND
28243: IFFALSE 28260
28245: PUSH
28246: LD_VAR 0 3
28250: PPUSH
28251: CALL_OW 263
28255: PUSH
28256: LD_INT 3
28258: EQUAL
28259: AND
28260: IFFALSE 28276
// HackDestroyVehicle ( unit , selectedUnit ) ;
28262: LD_VAR 0 2
28266: PPUSH
28267: LD_VAR 0 3
28271: PPUSH
28272: CALL 30566 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28276: LD_VAR 0 1
28280: PUSH
28281: LD_INT 255
28283: EQUAL
28284: IFFALSE 28308
28286: PUSH
28287: LD_VAR 0 2
28291: PPUSH
28292: CALL_OW 264
28296: PUSH
28297: LD_INT 14
28299: PUSH
28300: LD_INT 53
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: IN
28307: AND
28308: IFFALSE 28326
28310: PUSH
28311: LD_VAR 0 4
28315: PPUSH
28316: LD_VAR 0 5
28320: PPUSH
28321: CALL_OW 488
28325: AND
28326: IFFALSE 28350
// CutTreeXYR ( unit , x , y , 12 ) ;
28328: LD_VAR 0 2
28332: PPUSH
28333: LD_VAR 0 4
28337: PPUSH
28338: LD_VAR 0 5
28342: PPUSH
28343: LD_INT 12
28345: PPUSH
28346: CALL 28541 0 4
// if cmd = 256 then
28350: LD_VAR 0 1
28354: PUSH
28355: LD_INT 256
28357: EQUAL
28358: IFFALSE 28379
// SetFactoryWaypoint ( unit , x , y ) ;
28360: LD_VAR 0 2
28364: PPUSH
28365: LD_VAR 0 4
28369: PPUSH
28370: LD_VAR 0 5
28374: PPUSH
28375: CALL 25901 0 3
// if cmd = 257 then
28379: LD_VAR 0 1
28383: PUSH
28384: LD_INT 257
28386: EQUAL
28387: IFFALSE 28408
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28389: LD_VAR 0 2
28393: PPUSH
28394: LD_VAR 0 4
28398: PPUSH
28399: LD_VAR 0 5
28403: PPUSH
28404: CALL 26397 0 3
// if cmd = 258 then
28408: LD_VAR 0 1
28412: PUSH
28413: LD_INT 258
28415: EQUAL
28416: IFFALSE 28440
// BurnTreeXYR ( unit , x , y , 8 ) ;
28418: LD_VAR 0 2
28422: PPUSH
28423: LD_VAR 0 4
28427: PPUSH
28428: LD_VAR 0 5
28432: PPUSH
28433: LD_INT 8
28435: PPUSH
28436: CALL 28941 0 4
// end ;
28440: LD_VAR 0 6
28444: RET
// export function ComRadiation ( un ) ; var eff ; begin
28445: LD_INT 0
28447: PPUSH
28448: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
28449: LD_VAR 0 1
28453: PPUSH
28454: CALL_OW 264
28458: PUSH
28459: LD_INT 91
28461: NONEQUAL
28462: IFFALSE 28466
// exit ;
28464: GO 28536
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28466: LD_INT 68
28468: PPUSH
28469: LD_VAR 0 1
28473: PPUSH
28474: CALL_OW 255
28478: PPUSH
28479: CALL_OW 321
28483: PUSH
28484: LD_INT 2
28486: EQUAL
28487: IFFALSE 28499
// eff := 50 else
28489: LD_ADDR_VAR 0 3
28493: PUSH
28494: LD_INT 50
28496: ST_TO_ADDR
28497: GO 28507
// eff := 25 ;
28499: LD_ADDR_VAR 0 3
28503: PUSH
28504: LD_INT 25
28506: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28507: LD_VAR 0 1
28511: PPUSH
28512: CALL_OW 250
28516: PPUSH
28517: LD_VAR 0 1
28521: PPUSH
28522: CALL_OW 251
28526: PPUSH
28527: LD_VAR 0 3
28531: PPUSH
28532: CALL_OW 495
// end ;
28536: LD_VAR 0 2
28540: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28541: LD_INT 0
28543: PPUSH
28544: PPUSH
28545: PPUSH
28546: PPUSH
28547: PPUSH
28548: PPUSH
28549: PPUSH
28550: PPUSH
28551: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28552: LD_VAR 0 1
28556: PPUSH
28557: CALL_OW 302
28561: NOT
28562: IFTRUE 28581
28564: PUSH
28565: LD_VAR 0 2
28569: PPUSH
28570: LD_VAR 0 3
28574: PPUSH
28575: CALL_OW 488
28579: NOT
28580: OR
28581: IFTRUE 28590
28583: PUSH
28584: LD_VAR 0 4
28588: NOT
28589: OR
28590: IFFALSE 28594
// exit ;
28592: GO 28936
// list := [ ] ;
28594: LD_ADDR_VAR 0 13
28598: PUSH
28599: EMPTY
28600: ST_TO_ADDR
// if x - r < 0 then
28601: LD_VAR 0 2
28605: PUSH
28606: LD_VAR 0 4
28610: MINUS
28611: PUSH
28612: LD_INT 0
28614: LESS
28615: IFFALSE 28627
// min_x := 0 else
28617: LD_ADDR_VAR 0 7
28621: PUSH
28622: LD_INT 0
28624: ST_TO_ADDR
28625: GO 28643
// min_x := x - r ;
28627: LD_ADDR_VAR 0 7
28631: PUSH
28632: LD_VAR 0 2
28636: PUSH
28637: LD_VAR 0 4
28641: MINUS
28642: ST_TO_ADDR
// if y - r < 0 then
28643: LD_VAR 0 3
28647: PUSH
28648: LD_VAR 0 4
28652: MINUS
28653: PUSH
28654: LD_INT 0
28656: LESS
28657: IFFALSE 28669
// min_y := 0 else
28659: LD_ADDR_VAR 0 8
28663: PUSH
28664: LD_INT 0
28666: ST_TO_ADDR
28667: GO 28685
// min_y := y - r ;
28669: LD_ADDR_VAR 0 8
28673: PUSH
28674: LD_VAR 0 3
28678: PUSH
28679: LD_VAR 0 4
28683: MINUS
28684: ST_TO_ADDR
// max_x := x + r ;
28685: LD_ADDR_VAR 0 9
28689: PUSH
28690: LD_VAR 0 2
28694: PUSH
28695: LD_VAR 0 4
28699: PLUS
28700: ST_TO_ADDR
// max_y := y + r ;
28701: LD_ADDR_VAR 0 10
28705: PUSH
28706: LD_VAR 0 3
28710: PUSH
28711: LD_VAR 0 4
28715: PLUS
28716: ST_TO_ADDR
// for _x = min_x to max_x do
28717: LD_ADDR_VAR 0 11
28721: PUSH
28722: DOUBLE
28723: LD_VAR 0 7
28727: DEC
28728: ST_TO_ADDR
28729: LD_VAR 0 9
28733: PUSH
28734: FOR_TO
28735: IFFALSE 28854
// for _y = min_y to max_y do
28737: LD_ADDR_VAR 0 12
28741: PUSH
28742: DOUBLE
28743: LD_VAR 0 8
28747: DEC
28748: ST_TO_ADDR
28749: LD_VAR 0 10
28753: PUSH
28754: FOR_TO
28755: IFFALSE 28850
// begin if not ValidHex ( _x , _y ) then
28757: LD_VAR 0 11
28761: PPUSH
28762: LD_VAR 0 12
28766: PPUSH
28767: CALL_OW 488
28771: NOT
28772: IFFALSE 28776
// continue ;
28774: GO 28754
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28776: LD_VAR 0 11
28780: PPUSH
28781: LD_VAR 0 12
28785: PPUSH
28786: CALL_OW 351
28790: IFFALSE 28808
28792: PUSH
28793: LD_VAR 0 11
28797: PPUSH
28798: LD_VAR 0 12
28802: PPUSH
28803: CALL_OW 554
28807: AND
28808: IFFALSE 28848
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28810: LD_ADDR_VAR 0 13
28814: PUSH
28815: LD_VAR 0 13
28819: PPUSH
28820: LD_VAR 0 13
28824: PUSH
28825: LD_INT 1
28827: PLUS
28828: PPUSH
28829: LD_VAR 0 11
28833: PUSH
28834: LD_VAR 0 12
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PPUSH
28843: CALL_OW 2
28847: ST_TO_ADDR
// end ;
28848: GO 28754
28850: POP
28851: POP
28852: GO 28734
28854: POP
28855: POP
// if not list then
28856: LD_VAR 0 13
28860: NOT
28861: IFFALSE 28865
// exit ;
28863: GO 28936
// for i in list do
28865: LD_ADDR_VAR 0 6
28869: PUSH
28870: LD_VAR 0 13
28874: PUSH
28875: FOR_IN
28876: IFFALSE 28934
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28878: LD_VAR 0 1
28882: PPUSH
28883: LD_STRING M
28885: PUSH
28886: LD_VAR 0 6
28890: PUSH
28891: LD_INT 1
28893: ARRAY
28894: PUSH
28895: LD_VAR 0 6
28899: PUSH
28900: LD_INT 2
28902: ARRAY
28903: PUSH
28904: LD_INT 0
28906: PUSH
28907: LD_INT 0
28909: PUSH
28910: LD_INT 0
28912: PUSH
28913: LD_INT 0
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: PUSH
28925: EMPTY
28926: LIST
28927: PPUSH
28928: CALL_OW 447
28932: GO 28875
28934: POP
28935: POP
// end ;
28936: LD_VAR 0 5
28940: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
28941: LD_INT 0
28943: PPUSH
28944: PPUSH
28945: PPUSH
28946: PPUSH
28947: PPUSH
28948: PPUSH
28949: PPUSH
28950: PPUSH
28951: PPUSH
28952: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
28953: LD_VAR 0 1
28957: PPUSH
28958: CALL_OW 302
28962: NOT
28963: IFTRUE 28982
28965: PUSH
28966: LD_VAR 0 2
28970: PPUSH
28971: LD_VAR 0 3
28975: PPUSH
28976: CALL_OW 488
28980: NOT
28981: OR
28982: IFTRUE 28991
28984: PUSH
28985: LD_VAR 0 4
28989: NOT
28990: OR
28991: IFFALSE 28995
// exit ;
28993: GO 29512
// list := [ ] ;
28995: LD_ADDR_VAR 0 13
28999: PUSH
29000: EMPTY
29001: ST_TO_ADDR
// if x - r < 0 then
29002: LD_VAR 0 2
29006: PUSH
29007: LD_VAR 0 4
29011: MINUS
29012: PUSH
29013: LD_INT 0
29015: LESS
29016: IFFALSE 29028
// min_x := 0 else
29018: LD_ADDR_VAR 0 7
29022: PUSH
29023: LD_INT 0
29025: ST_TO_ADDR
29026: GO 29044
// min_x := x - r ;
29028: LD_ADDR_VAR 0 7
29032: PUSH
29033: LD_VAR 0 2
29037: PUSH
29038: LD_VAR 0 4
29042: MINUS
29043: ST_TO_ADDR
// if y - r < 0 then
29044: LD_VAR 0 3
29048: PUSH
29049: LD_VAR 0 4
29053: MINUS
29054: PUSH
29055: LD_INT 0
29057: LESS
29058: IFFALSE 29070
// min_y := 0 else
29060: LD_ADDR_VAR 0 8
29064: PUSH
29065: LD_INT 0
29067: ST_TO_ADDR
29068: GO 29086
// min_y := y - r ;
29070: LD_ADDR_VAR 0 8
29074: PUSH
29075: LD_VAR 0 3
29079: PUSH
29080: LD_VAR 0 4
29084: MINUS
29085: ST_TO_ADDR
// max_x := x + r ;
29086: LD_ADDR_VAR 0 9
29090: PUSH
29091: LD_VAR 0 2
29095: PUSH
29096: LD_VAR 0 4
29100: PLUS
29101: ST_TO_ADDR
// max_y := y + r ;
29102: LD_ADDR_VAR 0 10
29106: PUSH
29107: LD_VAR 0 3
29111: PUSH
29112: LD_VAR 0 4
29116: PLUS
29117: ST_TO_ADDR
// for _x = min_x to max_x do
29118: LD_ADDR_VAR 0 11
29122: PUSH
29123: DOUBLE
29124: LD_VAR 0 7
29128: DEC
29129: ST_TO_ADDR
29130: LD_VAR 0 9
29134: PUSH
29135: FOR_TO
29136: IFFALSE 29255
// for _y = min_y to max_y do
29138: LD_ADDR_VAR 0 12
29142: PUSH
29143: DOUBLE
29144: LD_VAR 0 8
29148: DEC
29149: ST_TO_ADDR
29150: LD_VAR 0 10
29154: PUSH
29155: FOR_TO
29156: IFFALSE 29251
// begin if not ValidHex ( _x , _y ) then
29158: LD_VAR 0 11
29162: PPUSH
29163: LD_VAR 0 12
29167: PPUSH
29168: CALL_OW 488
29172: NOT
29173: IFFALSE 29177
// continue ;
29175: GO 29155
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29177: LD_VAR 0 11
29181: PPUSH
29182: LD_VAR 0 12
29186: PPUSH
29187: CALL_OW 351
29191: IFFALSE 29209
29193: PUSH
29194: LD_VAR 0 11
29198: PPUSH
29199: LD_VAR 0 12
29203: PPUSH
29204: CALL_OW 554
29208: AND
29209: IFFALSE 29249
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29211: LD_ADDR_VAR 0 13
29215: PUSH
29216: LD_VAR 0 13
29220: PPUSH
29221: LD_VAR 0 13
29225: PUSH
29226: LD_INT 1
29228: PLUS
29229: PPUSH
29230: LD_VAR 0 11
29234: PUSH
29235: LD_VAR 0 12
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PPUSH
29244: CALL_OW 2
29248: ST_TO_ADDR
// end ;
29249: GO 29155
29251: POP
29252: POP
29253: GO 29135
29255: POP
29256: POP
// if not list then
29257: LD_VAR 0 13
29261: NOT
29262: IFFALSE 29266
// exit ;
29264: GO 29512
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
29266: LD_ADDR_VAR 0 13
29270: PUSH
29271: LD_VAR 0 1
29275: PPUSH
29276: LD_VAR 0 13
29280: PPUSH
29281: LD_INT 1
29283: PPUSH
29284: LD_INT 1
29286: PPUSH
29287: CALL 39155 0 4
29291: ST_TO_ADDR
// ComStop ( flame ) ;
29292: LD_VAR 0 1
29296: PPUSH
29297: CALL_OW 141
// for i in list do
29301: LD_ADDR_VAR 0 6
29305: PUSH
29306: LD_VAR 0 13
29310: PUSH
29311: FOR_IN
29312: IFFALSE 29343
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
29314: LD_VAR 0 1
29318: PPUSH
29319: LD_VAR 0 6
29323: PUSH
29324: LD_INT 1
29326: ARRAY
29327: PPUSH
29328: LD_VAR 0 6
29332: PUSH
29333: LD_INT 2
29335: ARRAY
29336: PPUSH
29337: CALL_OW 176
29341: GO 29311
29343: POP
29344: POP
// repeat wait ( 0 0$1 ) ;
29345: LD_INT 35
29347: PPUSH
29348: CALL_OW 67
// task := GetTaskList ( flame ) ;
29352: LD_ADDR_VAR 0 14
29356: PUSH
29357: LD_VAR 0 1
29361: PPUSH
29362: CALL_OW 437
29366: ST_TO_ADDR
// if not task then
29367: LD_VAR 0 14
29371: NOT
29372: IFFALSE 29376
// exit ;
29374: GO 29512
// if task [ 1 ] [ 1 ] <> | then
29376: LD_VAR 0 14
29380: PUSH
29381: LD_INT 1
29383: ARRAY
29384: PUSH
29385: LD_INT 1
29387: ARRAY
29388: PUSH
29389: LD_STRING |
29391: NONEQUAL
29392: IFFALSE 29396
// exit ;
29394: GO 29512
// _x := task [ 1 ] [ 2 ] ;
29396: LD_ADDR_VAR 0 11
29400: PUSH
29401: LD_VAR 0 14
29405: PUSH
29406: LD_INT 1
29408: ARRAY
29409: PUSH
29410: LD_INT 2
29412: ARRAY
29413: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
29414: LD_ADDR_VAR 0 12
29418: PUSH
29419: LD_VAR 0 14
29423: PUSH
29424: LD_INT 1
29426: ARRAY
29427: PUSH
29428: LD_INT 3
29430: ARRAY
29431: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
29432: LD_VAR 0 11
29436: PPUSH
29437: LD_VAR 0 12
29441: PPUSH
29442: CALL_OW 351
29446: NOT
29447: IFTRUE 29466
29449: PUSH
29450: LD_VAR 0 11
29454: PPUSH
29455: LD_VAR 0 12
29459: PPUSH
29460: CALL_OW 554
29464: NOT
29465: OR
29466: IFFALSE 29500
// begin task := Delete ( task , 1 ) ;
29468: LD_ADDR_VAR 0 14
29472: PUSH
29473: LD_VAR 0 14
29477: PPUSH
29478: LD_INT 1
29480: PPUSH
29481: CALL_OW 3
29485: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
29486: LD_VAR 0 1
29490: PPUSH
29491: LD_VAR 0 14
29495: PPUSH
29496: CALL_OW 446
// end ; until not HasTask ( flame ) ;
29500: LD_VAR 0 1
29504: PPUSH
29505: CALL_OW 314
29509: NOT
29510: IFFALSE 29345
// end ;
29512: LD_VAR 0 5
29516: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29517: LD_EXP 110
29521: NOT
29522: IFFALSE 29572
29524: GO 29526
29526: DISABLE
// begin initHack := true ;
29527: LD_ADDR_EXP 110
29531: PUSH
29532: LD_INT 1
29534: ST_TO_ADDR
// hackTanks := [ ] ;
29535: LD_ADDR_EXP 111
29539: PUSH
29540: EMPTY
29541: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29542: LD_ADDR_EXP 112
29546: PUSH
29547: EMPTY
29548: ST_TO_ADDR
// hackLimit := 3 ;
29549: LD_ADDR_EXP 113
29553: PUSH
29554: LD_INT 3
29556: ST_TO_ADDR
// hackDist := 12 ;
29557: LD_ADDR_EXP 114
29561: PUSH
29562: LD_INT 12
29564: ST_TO_ADDR
// hackCounter := [ ] ;
29565: LD_ADDR_EXP 115
29569: PUSH
29570: EMPTY
29571: ST_TO_ADDR
// end ;
29572: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29573: LD_EXP 110
29577: IFFALSE 29595
29579: PUSH
29580: LD_INT 34
29582: PUSH
29583: LD_INT 99
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PPUSH
29590: CALL_OW 69
29594: AND
29595: IFFALSE 29848
29597: GO 29599
29599: DISABLE
29600: LD_INT 0
29602: PPUSH
29603: PPUSH
// begin enable ;
29604: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29605: LD_ADDR_VAR 0 1
29609: PUSH
29610: LD_INT 34
29612: PUSH
29613: LD_INT 99
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PPUSH
29620: CALL_OW 69
29624: PUSH
29625: FOR_IN
29626: IFFALSE 29846
// begin if not i in hackTanks then
29628: LD_VAR 0 1
29632: PUSH
29633: LD_EXP 111
29637: IN
29638: NOT
29639: IFFALSE 29722
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29641: LD_ADDR_EXP 111
29645: PUSH
29646: LD_EXP 111
29650: PPUSH
29651: LD_EXP 111
29655: PUSH
29656: LD_INT 1
29658: PLUS
29659: PPUSH
29660: LD_VAR 0 1
29664: PPUSH
29665: CALL_OW 1
29669: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29670: LD_ADDR_EXP 112
29674: PUSH
29675: LD_EXP 112
29679: PPUSH
29680: LD_EXP 112
29684: PUSH
29685: LD_INT 1
29687: PLUS
29688: PPUSH
29689: EMPTY
29690: PPUSH
29691: CALL_OW 1
29695: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29696: LD_ADDR_EXP 115
29700: PUSH
29701: LD_EXP 115
29705: PPUSH
29706: LD_EXP 115
29710: PUSH
29711: LD_INT 1
29713: PLUS
29714: PPUSH
29715: EMPTY
29716: PPUSH
29717: CALL_OW 1
29721: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29722: LD_VAR 0 1
29726: PPUSH
29727: CALL_OW 302
29731: NOT
29732: IFFALSE 29745
// begin HackUnlinkAll ( i ) ;
29734: LD_VAR 0 1
29738: PPUSH
29739: CALL 29851 0 1
// continue ;
29743: GO 29625
// end ; HackCheckCapturedStatus ( i ) ;
29745: LD_VAR 0 1
29749: PPUSH
29750: CALL 30296 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29754: LD_ADDR_VAR 0 2
29758: PUSH
29759: LD_INT 81
29761: PUSH
29762: LD_VAR 0 1
29766: PPUSH
29767: CALL_OW 255
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 33
29778: PUSH
29779: LD_INT 3
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 91
29788: PUSH
29789: LD_VAR 0 1
29793: PUSH
29794: LD_EXP 114
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 50
29806: PUSH
29807: EMPTY
29808: LIST
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: PPUSH
29816: CALL_OW 69
29820: ST_TO_ADDR
// if not tmp then
29821: LD_VAR 0 2
29825: NOT
29826: IFFALSE 29830
// continue ;
29828: GO 29625
// HackLink ( i , tmp ) ;
29830: LD_VAR 0 1
29834: PPUSH
29835: LD_VAR 0 2
29839: PPUSH
29840: CALL 29987 0 2
// end ;
29844: GO 29625
29846: POP
29847: POP
// end ;
29848: PPOPN 2
29850: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29851: LD_INT 0
29853: PPUSH
29854: PPUSH
29855: PPUSH
// if not hack in hackTanks then
29856: LD_VAR 0 1
29860: PUSH
29861: LD_EXP 111
29865: IN
29866: NOT
29867: IFFALSE 29871
// exit ;
29869: GO 29982
// index := GetElementIndex ( hackTanks , hack ) ;
29871: LD_ADDR_VAR 0 4
29875: PUSH
29876: LD_EXP 111
29880: PPUSH
29881: LD_VAR 0 1
29885: PPUSH
29886: CALL 38450 0 2
29890: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29891: LD_EXP 112
29895: PUSH
29896: LD_VAR 0 4
29900: ARRAY
29901: IFFALSE 29982
// begin for i in hackTanksCaptured [ index ] do
29903: LD_ADDR_VAR 0 3
29907: PUSH
29908: LD_EXP 112
29912: PUSH
29913: LD_VAR 0 4
29917: ARRAY
29918: PUSH
29919: FOR_IN
29920: IFFALSE 29946
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29922: LD_VAR 0 3
29926: PUSH
29927: LD_INT 1
29929: ARRAY
29930: PPUSH
29931: LD_VAR 0 3
29935: PUSH
29936: LD_INT 2
29938: ARRAY
29939: PPUSH
29940: CALL_OW 235
29944: GO 29919
29946: POP
29947: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29948: LD_ADDR_EXP 112
29952: PUSH
29953: LD_EXP 112
29957: PPUSH
29958: LD_VAR 0 4
29962: PPUSH
29963: EMPTY
29964: PPUSH
29965: CALL_OW 1
29969: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29970: LD_VAR 0 1
29974: PPUSH
29975: LD_INT 0
29977: PPUSH
29978: CALL_OW 505
// end ; end ;
29982: LD_VAR 0 2
29986: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29987: LD_INT 0
29989: PPUSH
29990: PPUSH
29991: PPUSH
// if not hack in hackTanks or not vehicles then
29992: LD_VAR 0 1
29996: PUSH
29997: LD_EXP 111
30001: IN
30002: NOT
30003: IFTRUE 30012
30005: PUSH
30006: LD_VAR 0 2
30010: NOT
30011: OR
30012: IFFALSE 30016
// exit ;
30014: GO 30291
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30016: LD_ADDR_VAR 0 2
30020: PUSH
30021: LD_VAR 0 1
30025: PPUSH
30026: LD_VAR 0 2
30030: PPUSH
30031: LD_INT 1
30033: PPUSH
30034: LD_INT 1
30036: PPUSH
30037: CALL 39102 0 4
30041: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30042: LD_ADDR_VAR 0 5
30046: PUSH
30047: LD_EXP 111
30051: PPUSH
30052: LD_VAR 0 1
30056: PPUSH
30057: CALL 38450 0 2
30061: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30062: LD_EXP 112
30066: PUSH
30067: LD_VAR 0 5
30071: ARRAY
30072: PUSH
30073: LD_EXP 113
30077: LESS
30078: IFFALSE 30267
// begin for i := 1 to vehicles do
30080: LD_ADDR_VAR 0 4
30084: PUSH
30085: DOUBLE
30086: LD_INT 1
30088: DEC
30089: ST_TO_ADDR
30090: LD_VAR 0 2
30094: PUSH
30095: FOR_TO
30096: IFFALSE 30265
// begin if hackTanksCaptured [ index ] = hackLimit then
30098: LD_EXP 112
30102: PUSH
30103: LD_VAR 0 5
30107: ARRAY
30108: PUSH
30109: LD_EXP 113
30113: EQUAL
30114: IFFALSE 30118
// break ;
30116: GO 30265
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30118: LD_ADDR_EXP 115
30122: PUSH
30123: LD_EXP 115
30127: PPUSH
30128: LD_VAR 0 5
30132: PPUSH
30133: LD_EXP 115
30137: PUSH
30138: LD_VAR 0 5
30142: ARRAY
30143: PUSH
30144: LD_INT 1
30146: PLUS
30147: PPUSH
30148: CALL_OW 1
30152: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30153: LD_ADDR_EXP 112
30157: PUSH
30158: LD_EXP 112
30162: PPUSH
30163: LD_VAR 0 5
30167: PUSH
30168: LD_EXP 112
30172: PUSH
30173: LD_VAR 0 5
30177: ARRAY
30178: PUSH
30179: LD_INT 1
30181: PLUS
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PPUSH
30187: LD_VAR 0 2
30191: PUSH
30192: LD_VAR 0 4
30196: ARRAY
30197: PUSH
30198: LD_VAR 0 2
30202: PUSH
30203: LD_VAR 0 4
30207: ARRAY
30208: PPUSH
30209: CALL_OW 255
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PPUSH
30218: CALL 38667 0 3
30222: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30223: LD_VAR 0 2
30227: PUSH
30228: LD_VAR 0 4
30232: ARRAY
30233: PPUSH
30234: LD_VAR 0 1
30238: PPUSH
30239: CALL_OW 255
30243: PPUSH
30244: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30248: LD_VAR 0 2
30252: PUSH
30253: LD_VAR 0 4
30257: ARRAY
30258: PPUSH
30259: CALL_OW 141
// end ;
30263: GO 30095
30265: POP
30266: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30267: LD_VAR 0 1
30271: PPUSH
30272: LD_EXP 112
30276: PUSH
30277: LD_VAR 0 5
30281: ARRAY
30282: PUSH
30283: LD_INT 0
30285: PLUS
30286: PPUSH
30287: CALL_OW 505
// end ;
30291: LD_VAR 0 3
30295: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30296: LD_INT 0
30298: PPUSH
30299: PPUSH
30300: PPUSH
30301: PPUSH
// if not hack in hackTanks then
30302: LD_VAR 0 1
30306: PUSH
30307: LD_EXP 111
30311: IN
30312: NOT
30313: IFFALSE 30317
// exit ;
30315: GO 30561
// index := GetElementIndex ( hackTanks , hack ) ;
30317: LD_ADDR_VAR 0 4
30321: PUSH
30322: LD_EXP 111
30326: PPUSH
30327: LD_VAR 0 1
30331: PPUSH
30332: CALL 38450 0 2
30336: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30337: LD_ADDR_VAR 0 3
30341: PUSH
30342: DOUBLE
30343: LD_EXP 112
30347: PUSH
30348: LD_VAR 0 4
30352: ARRAY
30353: INC
30354: ST_TO_ADDR
30355: LD_INT 1
30357: PUSH
30358: FOR_DOWNTO
30359: IFFALSE 30535
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30361: LD_ADDR_VAR 0 5
30365: PUSH
30366: LD_EXP 112
30370: PUSH
30371: LD_VAR 0 4
30375: ARRAY
30376: PUSH
30377: LD_VAR 0 3
30381: ARRAY
30382: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30383: LD_VAR 0 5
30387: PUSH
30388: LD_INT 1
30390: ARRAY
30391: PPUSH
30392: CALL_OW 302
30396: NOT
30397: IFTRUE 30425
30399: PUSH
30400: LD_VAR 0 5
30404: PUSH
30405: LD_INT 1
30407: ARRAY
30408: PPUSH
30409: CALL_OW 255
30413: PUSH
30414: LD_VAR 0 1
30418: PPUSH
30419: CALL_OW 255
30423: NONEQUAL
30424: OR
30425: IFFALSE 30533
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30427: LD_VAR 0 5
30431: PUSH
30432: LD_INT 1
30434: ARRAY
30435: PPUSH
30436: CALL_OW 305
30440: IFFALSE 30468
30442: PUSH
30443: LD_VAR 0 5
30447: PUSH
30448: LD_INT 1
30450: ARRAY
30451: PPUSH
30452: CALL_OW 255
30456: PUSH
30457: LD_VAR 0 1
30461: PPUSH
30462: CALL_OW 255
30466: EQUAL
30467: AND
30468: IFFALSE 30492
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30470: LD_VAR 0 5
30474: PUSH
30475: LD_INT 1
30477: ARRAY
30478: PPUSH
30479: LD_VAR 0 5
30483: PUSH
30484: LD_INT 2
30486: ARRAY
30487: PPUSH
30488: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30492: LD_ADDR_EXP 112
30496: PUSH
30497: LD_EXP 112
30501: PPUSH
30502: LD_VAR 0 4
30506: PPUSH
30507: LD_EXP 112
30511: PUSH
30512: LD_VAR 0 4
30516: ARRAY
30517: PPUSH
30518: LD_VAR 0 3
30522: PPUSH
30523: CALL_OW 3
30527: PPUSH
30528: CALL_OW 1
30532: ST_TO_ADDR
// end ; end ;
30533: GO 30358
30535: POP
30536: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30537: LD_VAR 0 1
30541: PPUSH
30542: LD_EXP 112
30546: PUSH
30547: LD_VAR 0 4
30551: ARRAY
30552: PUSH
30553: LD_INT 0
30555: PLUS
30556: PPUSH
30557: CALL_OW 505
// end ;
30561: LD_VAR 0 2
30565: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30566: LD_INT 0
30568: PPUSH
30569: PPUSH
30570: PPUSH
30571: PPUSH
// if not hack in hackTanks then
30572: LD_VAR 0 1
30576: PUSH
30577: LD_EXP 111
30581: IN
30582: NOT
30583: IFFALSE 30587
// exit ;
30585: GO 30672
// index := GetElementIndex ( hackTanks , hack ) ;
30587: LD_ADDR_VAR 0 5
30591: PUSH
30592: LD_EXP 111
30596: PPUSH
30597: LD_VAR 0 1
30601: PPUSH
30602: CALL 38450 0 2
30606: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30607: LD_ADDR_VAR 0 4
30611: PUSH
30612: DOUBLE
30613: LD_INT 1
30615: DEC
30616: ST_TO_ADDR
30617: LD_EXP 112
30621: PUSH
30622: LD_VAR 0 5
30626: ARRAY
30627: PUSH
30628: FOR_TO
30629: IFFALSE 30670
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30631: LD_EXP 112
30635: PUSH
30636: LD_VAR 0 5
30640: ARRAY
30641: PUSH
30642: LD_VAR 0 4
30646: ARRAY
30647: PUSH
30648: LD_INT 1
30650: ARRAY
30651: PUSH
30652: LD_VAR 0 2
30656: EQUAL
30657: IFFALSE 30668
// KillUnit ( vehicle ) ;
30659: LD_VAR 0 2
30663: PPUSH
30664: CALL_OW 66
30668: GO 30628
30670: POP
30671: POP
// end ;
30672: LD_VAR 0 3
30676: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30677: LD_EXP 116
30681: NOT
30682: IFFALSE 30717
30684: GO 30686
30686: DISABLE
// begin initMiner := true ;
30687: LD_ADDR_EXP 116
30691: PUSH
30692: LD_INT 1
30694: ST_TO_ADDR
// minersList := [ ] ;
30695: LD_ADDR_EXP 117
30699: PUSH
30700: EMPTY
30701: ST_TO_ADDR
// minerMinesList := [ ] ;
30702: LD_ADDR_EXP 118
30706: PUSH
30707: EMPTY
30708: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30709: LD_ADDR_EXP 119
30713: PUSH
30714: LD_INT 5
30716: ST_TO_ADDR
// end ;
30717: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30718: LD_EXP 116
30722: IFFALSE 30740
30724: PUSH
30725: LD_INT 34
30727: PUSH
30728: LD_INT 81
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PPUSH
30735: CALL_OW 69
30739: AND
30740: IFFALSE 31203
30742: GO 30744
30744: DISABLE
30745: LD_INT 0
30747: PPUSH
30748: PPUSH
30749: PPUSH
30750: PPUSH
// begin enable ;
30751: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30752: LD_ADDR_VAR 0 1
30756: PUSH
30757: LD_INT 34
30759: PUSH
30760: LD_INT 81
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PPUSH
30767: CALL_OW 69
30771: PUSH
30772: FOR_IN
30773: IFFALSE 30845
// begin if not i in minersList then
30775: LD_VAR 0 1
30779: PUSH
30780: LD_EXP 117
30784: IN
30785: NOT
30786: IFFALSE 30843
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30788: LD_ADDR_EXP 117
30792: PUSH
30793: LD_EXP 117
30797: PPUSH
30798: LD_EXP 117
30802: PUSH
30803: LD_INT 1
30805: PLUS
30806: PPUSH
30807: LD_VAR 0 1
30811: PPUSH
30812: CALL_OW 1
30816: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30817: LD_ADDR_EXP 118
30821: PUSH
30822: LD_EXP 118
30826: PPUSH
30827: LD_EXP 118
30831: PUSH
30832: LD_INT 1
30834: PLUS
30835: PPUSH
30836: EMPTY
30837: PPUSH
30838: CALL_OW 1
30842: ST_TO_ADDR
// end end ;
30843: GO 30772
30845: POP
30846: POP
// for i := minerMinesList downto 1 do
30847: LD_ADDR_VAR 0 1
30851: PUSH
30852: DOUBLE
30853: LD_EXP 118
30857: INC
30858: ST_TO_ADDR
30859: LD_INT 1
30861: PUSH
30862: FOR_DOWNTO
30863: IFFALSE 31201
// begin if IsLive ( minersList [ i ] ) then
30865: LD_EXP 117
30869: PUSH
30870: LD_VAR 0 1
30874: ARRAY
30875: PPUSH
30876: CALL_OW 300
30880: IFFALSE 30908
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30882: LD_EXP 117
30886: PUSH
30887: LD_VAR 0 1
30891: ARRAY
30892: PPUSH
30893: LD_EXP 118
30897: PUSH
30898: LD_VAR 0 1
30902: ARRAY
30903: PPUSH
30904: CALL_OW 505
// if not minerMinesList [ i ] then
30908: LD_EXP 118
30912: PUSH
30913: LD_VAR 0 1
30917: ARRAY
30918: NOT
30919: IFFALSE 30923
// continue ;
30921: GO 30862
// for j := minerMinesList [ i ] downto 1 do
30923: LD_ADDR_VAR 0 2
30927: PUSH
30928: DOUBLE
30929: LD_EXP 118
30933: PUSH
30934: LD_VAR 0 1
30938: ARRAY
30939: INC
30940: ST_TO_ADDR
30941: LD_INT 1
30943: PUSH
30944: FOR_DOWNTO
30945: IFFALSE 31197
// begin side := GetSide ( minersList [ i ] ) ;
30947: LD_ADDR_VAR 0 3
30951: PUSH
30952: LD_EXP 117
30956: PUSH
30957: LD_VAR 0 1
30961: ARRAY
30962: PPUSH
30963: CALL_OW 255
30967: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30968: LD_ADDR_VAR 0 4
30972: PUSH
30973: LD_EXP 118
30977: PUSH
30978: LD_VAR 0 1
30982: ARRAY
30983: PUSH
30984: LD_VAR 0 2
30988: ARRAY
30989: PUSH
30990: LD_INT 1
30992: ARRAY
30993: PPUSH
30994: LD_EXP 118
30998: PUSH
30999: LD_VAR 0 1
31003: ARRAY
31004: PUSH
31005: LD_VAR 0 2
31009: ARRAY
31010: PUSH
31011: LD_INT 2
31013: ARRAY
31014: PPUSH
31015: CALL_OW 428
31019: ST_TO_ADDR
// if not tmp then
31020: LD_VAR 0 4
31024: NOT
31025: IFFALSE 31029
// continue ;
31027: GO 30944
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31029: LD_VAR 0 4
31033: PUSH
31034: LD_INT 81
31036: PUSH
31037: LD_VAR 0 3
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PPUSH
31046: CALL_OW 69
31050: IN
31051: IFFALSE 31101
31053: PUSH
31054: LD_EXP 118
31058: PUSH
31059: LD_VAR 0 1
31063: ARRAY
31064: PUSH
31065: LD_VAR 0 2
31069: ARRAY
31070: PUSH
31071: LD_INT 1
31073: ARRAY
31074: PPUSH
31075: LD_EXP 118
31079: PUSH
31080: LD_VAR 0 1
31084: ARRAY
31085: PUSH
31086: LD_VAR 0 2
31090: ARRAY
31091: PUSH
31092: LD_INT 2
31094: ARRAY
31095: PPUSH
31096: CALL_OW 458
31100: AND
31101: IFFALSE 31195
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31103: LD_EXP 118
31107: PUSH
31108: LD_VAR 0 1
31112: ARRAY
31113: PUSH
31114: LD_VAR 0 2
31118: ARRAY
31119: PUSH
31120: LD_INT 1
31122: ARRAY
31123: PPUSH
31124: LD_EXP 118
31128: PUSH
31129: LD_VAR 0 1
31133: ARRAY
31134: PUSH
31135: LD_VAR 0 2
31139: ARRAY
31140: PUSH
31141: LD_INT 2
31143: ARRAY
31144: PPUSH
31145: LD_VAR 0 3
31149: PPUSH
31150: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31154: LD_ADDR_EXP 118
31158: PUSH
31159: LD_EXP 118
31163: PPUSH
31164: LD_VAR 0 1
31168: PPUSH
31169: LD_EXP 118
31173: PUSH
31174: LD_VAR 0 1
31178: ARRAY
31179: PPUSH
31180: LD_VAR 0 2
31184: PPUSH
31185: CALL_OW 3
31189: PPUSH
31190: CALL_OW 1
31194: ST_TO_ADDR
// end ; end ;
31195: GO 30944
31197: POP
31198: POP
// end ;
31199: GO 30862
31201: POP
31202: POP
// end ;
31203: PPOPN 4
31205: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31206: LD_INT 0
31208: PPUSH
31209: PPUSH
// result := false ;
31210: LD_ADDR_VAR 0 4
31214: PUSH
31215: LD_INT 0
31217: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31218: LD_VAR 0 1
31222: PPUSH
31223: CALL_OW 264
31227: PUSH
31228: LD_INT 81
31230: EQUAL
31231: NOT
31232: IFFALSE 31236
// exit ;
31234: GO 31480
// index := GetElementIndex ( minersList , unit ) ;
31236: LD_ADDR_VAR 0 5
31240: PUSH
31241: LD_EXP 117
31245: PPUSH
31246: LD_VAR 0 1
31250: PPUSH
31251: CALL 38450 0 2
31255: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31256: LD_EXP 118
31260: PUSH
31261: LD_VAR 0 5
31265: ARRAY
31266: PUSH
31267: LD_EXP 119
31271: GREATEREQUAL
31272: IFFALSE 31276
// exit ;
31274: GO 31480
// ComMoveXY ( unit , x , y ) ;
31276: LD_VAR 0 1
31280: PPUSH
31281: LD_VAR 0 2
31285: PPUSH
31286: LD_VAR 0 3
31290: PPUSH
31291: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31295: LD_INT 35
31297: PPUSH
31298: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31302: LD_VAR 0 1
31306: PPUSH
31307: LD_VAR 0 2
31311: PPUSH
31312: LD_VAR 0 3
31316: PPUSH
31317: CALL 70496 0 3
31321: NOT
31322: IFFALSE 31335
31324: PUSH
31325: LD_VAR 0 1
31329: PPUSH
31330: CALL_OW 314
31334: AND
31335: IFFALSE 31339
// exit ;
31337: GO 31480
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31339: LD_VAR 0 2
31343: PPUSH
31344: LD_VAR 0 3
31348: PPUSH
31349: CALL_OW 428
31353: PUSH
31354: LD_VAR 0 1
31358: EQUAL
31359: IFFALSE 31373
31361: PUSH
31362: LD_VAR 0 1
31366: PPUSH
31367: CALL_OW 314
31371: NOT
31372: AND
31373: IFFALSE 31295
// PlaySoundXY ( x , y , PlantMine ) ;
31375: LD_VAR 0 2
31379: PPUSH
31380: LD_VAR 0 3
31384: PPUSH
31385: LD_STRING PlantMine
31387: PPUSH
31388: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31392: LD_VAR 0 2
31396: PPUSH
31397: LD_VAR 0 3
31401: PPUSH
31402: LD_VAR 0 1
31406: PPUSH
31407: CALL_OW 255
31411: PPUSH
31412: LD_INT 0
31414: PPUSH
31415: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31419: LD_ADDR_EXP 118
31423: PUSH
31424: LD_EXP 118
31428: PPUSH
31429: LD_VAR 0 5
31433: PUSH
31434: LD_EXP 118
31438: PUSH
31439: LD_VAR 0 5
31443: ARRAY
31444: PUSH
31445: LD_INT 1
31447: PLUS
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PPUSH
31453: LD_VAR 0 2
31457: PUSH
31458: LD_VAR 0 3
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PPUSH
31467: CALL 38667 0 3
31471: ST_TO_ADDR
// result := true ;
31472: LD_ADDR_VAR 0 4
31476: PUSH
31477: LD_INT 1
31479: ST_TO_ADDR
// end ;
31480: LD_VAR 0 4
31484: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31485: LD_INT 0
31487: PPUSH
31488: PPUSH
31489: PPUSH
// if not unit in minersList then
31490: LD_VAR 0 1
31494: PUSH
31495: LD_EXP 117
31499: IN
31500: NOT
31501: IFFALSE 31505
// exit ;
31503: GO 31899
// index := GetElementIndex ( minersList , unit ) ;
31505: LD_ADDR_VAR 0 6
31509: PUSH
31510: LD_EXP 117
31514: PPUSH
31515: LD_VAR 0 1
31519: PPUSH
31520: CALL 38450 0 2
31524: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31525: LD_ADDR_VAR 0 5
31529: PUSH
31530: DOUBLE
31531: LD_EXP 118
31535: PUSH
31536: LD_VAR 0 6
31540: ARRAY
31541: INC
31542: ST_TO_ADDR
31543: LD_INT 1
31545: PUSH
31546: FOR_DOWNTO
31547: IFFALSE 31710
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31549: LD_EXP 118
31553: PUSH
31554: LD_VAR 0 6
31558: ARRAY
31559: PUSH
31560: LD_VAR 0 5
31564: ARRAY
31565: PUSH
31566: LD_INT 1
31568: ARRAY
31569: PUSH
31570: LD_VAR 0 2
31574: EQUAL
31575: IFFALSE 31605
31577: PUSH
31578: LD_EXP 118
31582: PUSH
31583: LD_VAR 0 6
31587: ARRAY
31588: PUSH
31589: LD_VAR 0 5
31593: ARRAY
31594: PUSH
31595: LD_INT 2
31597: ARRAY
31598: PUSH
31599: LD_VAR 0 3
31603: EQUAL
31604: AND
31605: IFFALSE 31708
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31607: LD_EXP 118
31611: PUSH
31612: LD_VAR 0 6
31616: ARRAY
31617: PUSH
31618: LD_VAR 0 5
31622: ARRAY
31623: PUSH
31624: LD_INT 1
31626: ARRAY
31627: PPUSH
31628: LD_EXP 118
31632: PUSH
31633: LD_VAR 0 6
31637: ARRAY
31638: PUSH
31639: LD_VAR 0 5
31643: ARRAY
31644: PUSH
31645: LD_INT 2
31647: ARRAY
31648: PPUSH
31649: LD_VAR 0 1
31653: PPUSH
31654: CALL_OW 255
31658: PPUSH
31659: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31663: LD_ADDR_EXP 118
31667: PUSH
31668: LD_EXP 118
31672: PPUSH
31673: LD_VAR 0 6
31677: PPUSH
31678: LD_EXP 118
31682: PUSH
31683: LD_VAR 0 6
31687: ARRAY
31688: PPUSH
31689: LD_VAR 0 5
31693: PPUSH
31694: CALL_OW 3
31698: PPUSH
31699: CALL_OW 1
31703: ST_TO_ADDR
// exit ;
31704: POP
31705: POP
31706: GO 31899
// end ; end ;
31708: GO 31546
31710: POP
31711: POP
// for i := minerMinesList [ index ] downto 1 do
31712: LD_ADDR_VAR 0 5
31716: PUSH
31717: DOUBLE
31718: LD_EXP 118
31722: PUSH
31723: LD_VAR 0 6
31727: ARRAY
31728: INC
31729: ST_TO_ADDR
31730: LD_INT 1
31732: PUSH
31733: FOR_DOWNTO
31734: IFFALSE 31897
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31736: LD_EXP 118
31740: PUSH
31741: LD_VAR 0 6
31745: ARRAY
31746: PUSH
31747: LD_VAR 0 5
31751: ARRAY
31752: PUSH
31753: LD_INT 1
31755: ARRAY
31756: PPUSH
31757: LD_EXP 118
31761: PUSH
31762: LD_VAR 0 6
31766: ARRAY
31767: PUSH
31768: LD_VAR 0 5
31772: ARRAY
31773: PUSH
31774: LD_INT 2
31776: ARRAY
31777: PPUSH
31778: LD_VAR 0 2
31782: PPUSH
31783: LD_VAR 0 3
31787: PPUSH
31788: CALL_OW 298
31792: PUSH
31793: LD_INT 6
31795: LESS
31796: IFFALSE 31895
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31798: LD_EXP 118
31802: PUSH
31803: LD_VAR 0 6
31807: ARRAY
31808: PUSH
31809: LD_VAR 0 5
31813: ARRAY
31814: PUSH
31815: LD_INT 1
31817: ARRAY
31818: PPUSH
31819: LD_EXP 118
31823: PUSH
31824: LD_VAR 0 6
31828: ARRAY
31829: PUSH
31830: LD_VAR 0 5
31834: ARRAY
31835: PUSH
31836: LD_INT 2
31838: ARRAY
31839: PPUSH
31840: LD_VAR 0 1
31844: PPUSH
31845: CALL_OW 255
31849: PPUSH
31850: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31854: LD_ADDR_EXP 118
31858: PUSH
31859: LD_EXP 118
31863: PPUSH
31864: LD_VAR 0 6
31868: PPUSH
31869: LD_EXP 118
31873: PUSH
31874: LD_VAR 0 6
31878: ARRAY
31879: PPUSH
31880: LD_VAR 0 5
31884: PPUSH
31885: CALL_OW 3
31889: PPUSH
31890: CALL_OW 1
31894: ST_TO_ADDR
// end ; end ;
31895: GO 31733
31897: POP
31898: POP
// end ;
31899: LD_VAR 0 4
31903: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31904: LD_INT 0
31906: PPUSH
31907: PPUSH
31908: PPUSH
31909: PPUSH
31910: PPUSH
31911: PPUSH
31912: PPUSH
31913: PPUSH
31914: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31915: LD_VAR 0 1
31919: PPUSH
31920: CALL_OW 264
31924: PUSH
31925: LD_INT 81
31927: EQUAL
31928: NOT
31929: IFTRUE 31944
31931: PUSH
31932: LD_VAR 0 1
31936: PUSH
31937: LD_EXP 117
31941: IN
31942: NOT
31943: OR
31944: IFFALSE 31948
// exit ;
31946: GO 32274
// index := GetElementIndex ( minersList , unit ) ;
31948: LD_ADDR_VAR 0 6
31952: PUSH
31953: LD_EXP 117
31957: PPUSH
31958: LD_VAR 0 1
31962: PPUSH
31963: CALL 38450 0 2
31967: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31968: LD_ADDR_VAR 0 8
31972: PUSH
31973: LD_EXP 119
31977: PUSH
31978: LD_EXP 118
31982: PUSH
31983: LD_VAR 0 6
31987: ARRAY
31988: MINUS
31989: ST_TO_ADDR
// if not minesFreeAmount then
31990: LD_VAR 0 8
31994: NOT
31995: IFFALSE 31999
// exit ;
31997: GO 32274
// tmp := [ ] ;
31999: LD_ADDR_VAR 0 7
32003: PUSH
32004: EMPTY
32005: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32006: LD_ADDR_VAR 0 5
32010: PUSH
32011: DOUBLE
32012: LD_INT 1
32014: DEC
32015: ST_TO_ADDR
32016: LD_VAR 0 8
32020: PUSH
32021: FOR_TO
32022: IFFALSE 32221
// begin _d := rand ( 0 , 5 ) ;
32024: LD_ADDR_VAR 0 11
32028: PUSH
32029: LD_INT 0
32031: PPUSH
32032: LD_INT 5
32034: PPUSH
32035: CALL_OW 12
32039: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32040: LD_ADDR_VAR 0 12
32044: PUSH
32045: LD_INT 2
32047: PPUSH
32048: LD_INT 6
32050: PPUSH
32051: CALL_OW 12
32055: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32056: LD_ADDR_VAR 0 9
32060: PUSH
32061: LD_VAR 0 2
32065: PPUSH
32066: LD_VAR 0 11
32070: PPUSH
32071: LD_VAR 0 12
32075: PPUSH
32076: CALL_OW 272
32080: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32081: LD_ADDR_VAR 0 10
32085: PUSH
32086: LD_VAR 0 3
32090: PPUSH
32091: LD_VAR 0 11
32095: PPUSH
32096: LD_VAR 0 12
32100: PPUSH
32101: CALL_OW 273
32105: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32106: LD_VAR 0 9
32110: PPUSH
32111: LD_VAR 0 10
32115: PPUSH
32116: CALL_OW 488
32120: IFFALSE 32144
32122: PUSH
32123: LD_VAR 0 9
32127: PUSH
32128: LD_VAR 0 10
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_VAR 0 7
32141: IN
32142: NOT
32143: AND
32144: IFFALSE 32163
32146: PUSH
32147: LD_VAR 0 9
32151: PPUSH
32152: LD_VAR 0 10
32156: PPUSH
32157: CALL_OW 458
32161: NOT
32162: AND
32163: IFFALSE 32205
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32165: LD_ADDR_VAR 0 7
32169: PUSH
32170: LD_VAR 0 7
32174: PPUSH
32175: LD_VAR 0 7
32179: PUSH
32180: LD_INT 1
32182: PLUS
32183: PPUSH
32184: LD_VAR 0 9
32188: PUSH
32189: LD_VAR 0 10
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PPUSH
32198: CALL_OW 1
32202: ST_TO_ADDR
32203: GO 32219
// i := i - 1 ;
32205: LD_ADDR_VAR 0 5
32209: PUSH
32210: LD_VAR 0 5
32214: PUSH
32215: LD_INT 1
32217: MINUS
32218: ST_TO_ADDR
// end ;
32219: GO 32021
32221: POP
32222: POP
// for i in tmp do
32223: LD_ADDR_VAR 0 5
32227: PUSH
32228: LD_VAR 0 7
32232: PUSH
32233: FOR_IN
32234: IFFALSE 32272
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32236: LD_VAR 0 1
32240: PPUSH
32241: LD_VAR 0 5
32245: PUSH
32246: LD_INT 1
32248: ARRAY
32249: PPUSH
32250: LD_VAR 0 5
32254: PUSH
32255: LD_INT 2
32257: ARRAY
32258: PPUSH
32259: CALL 31206 0 3
32263: NOT
32264: IFFALSE 32270
// exit ;
32266: POP
32267: POP
32268: GO 32274
32270: GO 32233
32272: POP
32273: POP
// end ;
32274: LD_VAR 0 4
32278: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
32279: LD_INT 0
32281: PPUSH
32282: PPUSH
32283: PPUSH
32284: PPUSH
32285: PPUSH
32286: PPUSH
32287: PPUSH
32288: PPUSH
32289: PPUSH
// if GetClass ( unit ) <> class_sniper then
32290: LD_VAR 0 1
32294: PPUSH
32295: CALL_OW 257
32299: PUSH
32300: LD_INT 5
32302: NONEQUAL
32303: IFFALSE 32307
// exit ;
32305: GO 32777
// dist := 8 ;
32307: LD_ADDR_VAR 0 5
32311: PUSH
32312: LD_INT 8
32314: ST_TO_ADDR
// viewRange := 12 ;
32315: LD_ADDR_VAR 0 8
32319: PUSH
32320: LD_INT 12
32322: ST_TO_ADDR
// side := GetSide ( unit ) ;
32323: LD_ADDR_VAR 0 6
32327: PUSH
32328: LD_VAR 0 1
32332: PPUSH
32333: CALL_OW 255
32337: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32338: LD_INT 61
32340: PPUSH
32341: LD_VAR 0 6
32345: PPUSH
32346: CALL_OW 321
32350: PUSH
32351: LD_INT 2
32353: EQUAL
32354: IFFALSE 32364
// viewRange := 16 ;
32356: LD_ADDR_VAR 0 8
32360: PUSH
32361: LD_INT 16
32363: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32364: LD_VAR 0 1
32368: PPUSH
32369: LD_VAR 0 2
32373: PPUSH
32374: LD_VAR 0 3
32378: PPUSH
32379: CALL_OW 297
32383: PUSH
32384: LD_VAR 0 5
32388: GREATER
32389: IFFALSE 32468
// begin ComMoveXY ( unit , x , y ) ;
32391: LD_VAR 0 1
32395: PPUSH
32396: LD_VAR 0 2
32400: PPUSH
32401: LD_VAR 0 3
32405: PPUSH
32406: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32410: LD_INT 35
32412: PPUSH
32413: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32417: LD_VAR 0 1
32421: PPUSH
32422: LD_VAR 0 2
32426: PPUSH
32427: LD_VAR 0 3
32431: PPUSH
32432: CALL 70496 0 3
32436: NOT
32437: IFFALSE 32441
// exit ;
32439: GO 32777
// until GetDistUnitXY ( unit , x , y ) < dist ;
32441: LD_VAR 0 1
32445: PPUSH
32446: LD_VAR 0 2
32450: PPUSH
32451: LD_VAR 0 3
32455: PPUSH
32456: CALL_OW 297
32460: PUSH
32461: LD_VAR 0 5
32465: LESS
32466: IFFALSE 32410
// end ; ComTurnXY ( unit , x , y ) ;
32468: LD_VAR 0 1
32472: PPUSH
32473: LD_VAR 0 2
32477: PPUSH
32478: LD_VAR 0 3
32482: PPUSH
32483: CALL_OW 118
// repeat if Multiplayer then
32487: LD_OWVAR 4
32491: IFFALSE 32502
// wait ( 35 ) else
32493: LD_INT 35
32495: PPUSH
32496: CALL_OW 67
32500: GO 32509
// wait ( 5 ) ;
32502: LD_INT 5
32504: PPUSH
32505: CALL_OW 67
// _d := GetDir ( unit ) ;
32509: LD_ADDR_VAR 0 11
32513: PUSH
32514: LD_VAR 0 1
32518: PPUSH
32519: CALL_OW 254
32523: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
32524: LD_ADDR_VAR 0 7
32528: PUSH
32529: LD_VAR 0 1
32533: PPUSH
32534: CALL_OW 250
32538: PPUSH
32539: LD_VAR 0 1
32543: PPUSH
32544: CALL_OW 251
32548: PPUSH
32549: LD_VAR 0 2
32553: PPUSH
32554: LD_VAR 0 3
32558: PPUSH
32559: CALL 73132 0 4
32563: ST_TO_ADDR
// until dir = _d ;
32564: LD_VAR 0 7
32568: PUSH
32569: LD_VAR 0 11
32573: EQUAL
32574: IFFALSE 32487
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
32576: LD_ADDR_VAR 0 9
32580: PUSH
32581: LD_VAR 0 1
32585: PPUSH
32586: CALL_OW 250
32590: PPUSH
32591: LD_VAR 0 7
32595: PPUSH
32596: LD_VAR 0 5
32600: PPUSH
32601: CALL_OW 272
32605: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
32606: LD_ADDR_VAR 0 10
32610: PUSH
32611: LD_VAR 0 1
32615: PPUSH
32616: CALL_OW 251
32620: PPUSH
32621: LD_VAR 0 7
32625: PPUSH
32626: LD_VAR 0 5
32630: PPUSH
32631: CALL_OW 273
32635: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32636: LD_VAR 0 9
32640: PPUSH
32641: LD_VAR 0 10
32645: PPUSH
32646: CALL_OW 488
32650: NOT
32651: IFFALSE 32655
// exit ;
32653: GO 32777
// ComAnimCustom ( unit , 1 ) ;
32655: LD_VAR 0 1
32659: PPUSH
32660: LD_INT 1
32662: PPUSH
32663: CALL_OW 592
// p := 0 ;
32667: LD_ADDR_VAR 0 12
32671: PUSH
32672: LD_INT 0
32674: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32675: LD_VAR 0 9
32679: PPUSH
32680: LD_VAR 0 10
32684: PPUSH
32685: LD_VAR 0 6
32689: PPUSH
32690: LD_VAR 0 8
32694: PPUSH
32695: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
32699: LD_INT 35
32701: PPUSH
32702: CALL_OW 67
// p := Inc ( p ) ;
32706: LD_ADDR_VAR 0 12
32710: PUSH
32711: LD_VAR 0 12
32715: PPUSH
32716: CALL 73088 0 1
32720: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
32721: LD_VAR 0 12
32725: PUSH
32726: LD_INT 3
32728: EQUAL
32729: IFTRUE 32743
32731: PUSH
32732: LD_VAR 0 1
32736: PPUSH
32737: CALL_OW 302
32741: NOT
32742: OR
32743: IFTRUE 32756
32745: PUSH
32746: LD_VAR 0 1
32750: PPUSH
32751: CALL_OW 301
32755: OR
32756: IFFALSE 32699
// RemoveSeeing ( _x , _y , side ) ;
32758: LD_VAR 0 9
32762: PPUSH
32763: LD_VAR 0 10
32767: PPUSH
32768: LD_VAR 0 6
32772: PPUSH
32773: CALL_OW 331
// end ;
32777: LD_VAR 0 4
32781: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
32782: LD_INT 0
32784: PPUSH
32785: PPUSH
32786: PPUSH
32787: PPUSH
32788: PPUSH
32789: PPUSH
32790: PPUSH
32791: PPUSH
32792: PPUSH
32793: PPUSH
32794: PPUSH
// if not unit then
32795: LD_VAR 0 1
32799: NOT
32800: IFFALSE 32804
// exit ;
32802: GO 33075
// side := GetSide ( unit ) ;
32804: LD_ADDR_VAR 0 3
32808: PUSH
32809: LD_VAR 0 1
32813: PPUSH
32814: CALL_OW 255
32818: ST_TO_ADDR
// x := GetX ( unit ) ;
32819: LD_ADDR_VAR 0 5
32823: PUSH
32824: LD_VAR 0 1
32828: PPUSH
32829: CALL_OW 250
32833: ST_TO_ADDR
// y := GetY ( unit ) ;
32834: LD_ADDR_VAR 0 6
32838: PUSH
32839: LD_VAR 0 1
32843: PPUSH
32844: CALL_OW 251
32848: ST_TO_ADDR
// r := 8 ;
32849: LD_ADDR_VAR 0 4
32853: PUSH
32854: LD_INT 8
32856: ST_TO_ADDR
// if x - r < 0 then
32857: LD_VAR 0 5
32861: PUSH
32862: LD_VAR 0 4
32866: MINUS
32867: PUSH
32868: LD_INT 0
32870: LESS
32871: IFFALSE 32883
// min_x := 0 else
32873: LD_ADDR_VAR 0 7
32877: PUSH
32878: LD_INT 0
32880: ST_TO_ADDR
32881: GO 32899
// min_x := x - r ;
32883: LD_ADDR_VAR 0 7
32887: PUSH
32888: LD_VAR 0 5
32892: PUSH
32893: LD_VAR 0 4
32897: MINUS
32898: ST_TO_ADDR
// if y - r < 0 then
32899: LD_VAR 0 6
32903: PUSH
32904: LD_VAR 0 4
32908: MINUS
32909: PUSH
32910: LD_INT 0
32912: LESS
32913: IFFALSE 32925
// min_y := 0 else
32915: LD_ADDR_VAR 0 8
32919: PUSH
32920: LD_INT 0
32922: ST_TO_ADDR
32923: GO 32941
// min_y := y - r ;
32925: LD_ADDR_VAR 0 8
32929: PUSH
32930: LD_VAR 0 6
32934: PUSH
32935: LD_VAR 0 4
32939: MINUS
32940: ST_TO_ADDR
// max_x := x + r ;
32941: LD_ADDR_VAR 0 9
32945: PUSH
32946: LD_VAR 0 5
32950: PUSH
32951: LD_VAR 0 4
32955: PLUS
32956: ST_TO_ADDR
// max_y := y + r ;
32957: LD_ADDR_VAR 0 10
32961: PUSH
32962: LD_VAR 0 6
32966: PUSH
32967: LD_VAR 0 4
32971: PLUS
32972: ST_TO_ADDR
// for _x = min_x to max_x do
32973: LD_ADDR_VAR 0 11
32977: PUSH
32978: DOUBLE
32979: LD_VAR 0 7
32983: DEC
32984: ST_TO_ADDR
32985: LD_VAR 0 9
32989: PUSH
32990: FOR_TO
32991: IFFALSE 33073
// for _y = min_y to max_y do
32993: LD_ADDR_VAR 0 12
32997: PUSH
32998: DOUBLE
32999: LD_VAR 0 8
33003: DEC
33004: ST_TO_ADDR
33005: LD_VAR 0 10
33009: PUSH
33010: FOR_TO
33011: IFFALSE 33069
// begin if not ValidHex ( _x , _y ) then
33013: LD_VAR 0 11
33017: PPUSH
33018: LD_VAR 0 12
33022: PPUSH
33023: CALL_OW 488
33027: NOT
33028: IFFALSE 33032
// continue ;
33030: GO 33010
// if MineAtPos ( _x , _y ) then
33032: LD_VAR 0 11
33036: PPUSH
33037: LD_VAR 0 12
33041: PPUSH
33042: CALL_OW 458
33046: IFFALSE 33067
// ViewMineAtPos ( _x , _y , side ) ;
33048: LD_VAR 0 11
33052: PPUSH
33053: LD_VAR 0 12
33057: PPUSH
33058: LD_VAR 0 3
33062: PPUSH
33063: CALL_OW 457
// end ;
33067: GO 33010
33069: POP
33070: POP
33071: GO 32990
33073: POP
33074: POP
// end ;
33075: LD_VAR 0 2
33079: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
33080: LD_INT 0
33082: PPUSH
33083: PPUSH
33084: PPUSH
33085: PPUSH
33086: PPUSH
33087: PPUSH
// if not units then
33088: LD_VAR 0 1
33092: NOT
33093: IFFALSE 33097
// exit ;
33095: GO 33527
// scaners := [ ] ;
33097: LD_ADDR_VAR 0 6
33101: PUSH
33102: EMPTY
33103: ST_TO_ADDR
// for i in units do
33104: LD_ADDR_VAR 0 3
33108: PUSH
33109: LD_VAR 0 1
33113: PUSH
33114: FOR_IN
33115: IFFALSE 33272
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
33117: LD_VAR 0 3
33121: PPUSH
33122: CALL_OW 264
33126: PUSH
33127: LD_INT 11
33129: NONEQUAL
33130: IFTRUE 33144
33132: PUSH
33133: LD_VAR 0 3
33137: PPUSH
33138: CALL_OW 302
33142: NOT
33143: OR
33144: IFTRUE 33161
33146: PUSH
33147: LD_VAR 0 3
33151: PPUSH
33152: CALL_OW 110
33156: PUSH
33157: LD_INT 502
33159: EQUAL
33160: OR
33161: IFFALSE 33165
// continue ;
33163: GO 33114
// ComStop ( i ) ;
33165: LD_VAR 0 3
33169: PPUSH
33170: CALL_OW 141
// x := GetX ( i ) ;
33174: LD_ADDR_VAR 0 4
33178: PUSH
33179: LD_VAR 0 3
33183: PPUSH
33184: CALL_OW 250
33188: ST_TO_ADDR
// y := GetY ( i ) ;
33189: LD_ADDR_VAR 0 5
33193: PUSH
33194: LD_VAR 0 3
33198: PPUSH
33199: CALL_OW 251
33203: ST_TO_ADDR
// if GetSide ( i ) = your_side then
33204: LD_VAR 0 3
33208: PPUSH
33209: CALL_OW 255
33213: PUSH
33214: LD_OWVAR 2
33218: EQUAL
33219: IFFALSE 33238
// PlaySoundXY ( x , y , mineDetector ) ;
33221: LD_VAR 0 4
33225: PPUSH
33226: LD_VAR 0 5
33230: PPUSH
33231: LD_STRING mineDetector
33233: PPUSH
33234: CALL_OW 366
// scaners := Join ( scaners , i ) ;
33238: LD_ADDR_VAR 0 6
33242: PUSH
33243: LD_VAR 0 6
33247: PPUSH
33248: LD_VAR 0 3
33252: PPUSH
33253: CALL 71715 0 2
33257: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
33258: LD_VAR 0 3
33262: PPUSH
33263: LD_INT 502
33265: PPUSH
33266: CALL_OW 109
// end ;
33270: GO 33114
33272: POP
33273: POP
// if not scaners then
33274: LD_VAR 0 6
33278: NOT
33279: IFFALSE 33283
// exit ;
33281: GO 33527
// wait ( 3 ) ;
33283: LD_INT 3
33285: PPUSH
33286: CALL_OW 67
// timer := 6 ;
33290: LD_ADDR_VAR 0 7
33294: PUSH
33295: LD_INT 6
33297: ST_TO_ADDR
// repeat for i in scaners do
33298: LD_ADDR_VAR 0 3
33302: PUSH
33303: LD_VAR 0 6
33307: PUSH
33308: FOR_IN
33309: IFFALSE 33425
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
33311: LD_VAR 0 3
33315: PPUSH
33316: CALL_OW 302
33320: NOT
33321: IFTRUE 33334
33323: PUSH
33324: LD_VAR 0 3
33328: PPUSH
33329: CALL_OW 314
33333: OR
33334: IFTRUE 33365
33336: PUSH
33337: LD_VAR 0 3
33341: PPUSH
33342: CALL_OW 263
33346: PUSH
33347: LD_INT 1
33349: EQUAL
33350: IFFALSE 33364
33352: PUSH
33353: LD_VAR 0 3
33357: PPUSH
33358: CALL_OW 311
33362: NOT
33363: AND
33364: OR
33365: IFFALSE 33409
// begin SetUnitDisplayNumber ( i , 0 ) ;
33367: LD_VAR 0 3
33371: PPUSH
33372: LD_INT 0
33374: PPUSH
33375: CALL_OW 505
// SetTag ( i , 0 ) ;
33379: LD_VAR 0 3
33383: PPUSH
33384: LD_INT 0
33386: PPUSH
33387: CALL_OW 109
// scaners := scaners diff i ;
33391: LD_ADDR_VAR 0 6
33395: PUSH
33396: LD_VAR 0 6
33400: PUSH
33401: LD_VAR 0 3
33405: DIFF
33406: ST_TO_ADDR
// continue ;
33407: GO 33308
// end ; SetUnitDisplayNumber ( i , timer ) ;
33409: LD_VAR 0 3
33413: PPUSH
33414: LD_VAR 0 7
33418: PPUSH
33419: CALL_OW 505
// end ;
33423: GO 33308
33425: POP
33426: POP
// if not scaners then
33427: LD_VAR 0 6
33431: NOT
33432: IFFALSE 33436
// exit ;
33434: GO 33527
// timer := Dec ( timer ) ;
33436: LD_ADDR_VAR 0 7
33440: PUSH
33441: LD_VAR 0 7
33445: PPUSH
33446: CALL 73110 0 1
33450: ST_TO_ADDR
// wait ( 0 0$1 ) ;
33451: LD_INT 35
33453: PPUSH
33454: CALL_OW 67
// until timer = 0 ;
33458: LD_VAR 0 7
33462: PUSH
33463: LD_INT 0
33465: EQUAL
33466: IFFALSE 33298
// if not scaners then
33468: LD_VAR 0 6
33472: NOT
33473: IFFALSE 33477
// exit ;
33475: GO 33527
// for i in scaners do
33477: LD_ADDR_VAR 0 3
33481: PUSH
33482: LD_VAR 0 6
33486: PUSH
33487: FOR_IN
33488: IFFALSE 33525
// begin SetUnitDisplayNumber ( i , 0 ) ;
33490: LD_VAR 0 3
33494: PPUSH
33495: LD_INT 0
33497: PPUSH
33498: CALL_OW 505
// SetTag ( i , 0 ) ;
33502: LD_VAR 0 3
33506: PPUSH
33507: LD_INT 0
33509: PPUSH
33510: CALL_OW 109
// RevealDetectorMine ( i ) ;
33514: LD_VAR 0 3
33518: PPUSH
33519: CALL 32782 0 1
// end ;
33523: GO 33487
33525: POP
33526: POP
// end ;
33527: LD_VAR 0 2
33531: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
33532: LD_INT 0
33534: PPUSH
// if p1 = mine_detector_mode then
33535: LD_VAR 0 2
33539: PUSH
33540: LD_INT 103
33542: EQUAL
33543: IFFALSE 33554
// DetectMine ( units ) ;
33545: LD_VAR 0 1
33549: PPUSH
33550: CALL 33080 0 1
// end ; end_of_file
33554: LD_VAR 0 7
33558: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33559: LD_INT 0
33561: PPUSH
33562: PPUSH
// if exist_mode then
33563: LD_VAR 0 2
33567: IFFALSE 33613
// begin unit := CreateCharacter ( prefix & ident ) ;
33569: LD_ADDR_VAR 0 5
33573: PUSH
33574: LD_VAR 0 3
33578: PUSH
33579: LD_VAR 0 1
33583: STR
33584: PPUSH
33585: CALL_OW 34
33589: ST_TO_ADDR
// if unit then
33590: LD_VAR 0 5
33594: IFFALSE 33611
// DeleteCharacters ( prefix & ident ) ;
33596: LD_VAR 0 3
33600: PUSH
33601: LD_VAR 0 1
33605: STR
33606: PPUSH
33607: CALL_OW 40
// end else
33611: GO 33628
// unit := NewCharacter ( ident ) ;
33613: LD_ADDR_VAR 0 5
33617: PUSH
33618: LD_VAR 0 1
33622: PPUSH
33623: CALL_OW 25
33627: ST_TO_ADDR
// result := unit ;
33628: LD_ADDR_VAR 0 4
33632: PUSH
33633: LD_VAR 0 5
33637: ST_TO_ADDR
// end ;
33638: LD_VAR 0 4
33642: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
33643: LD_INT 0
33645: PPUSH
33646: PPUSH
// if exist_mode then
33647: LD_VAR 0 2
33651: IFFALSE 33676
// unit := CreateCharacter ( prefix & ident ) else
33653: LD_ADDR_VAR 0 5
33657: PUSH
33658: LD_VAR 0 3
33662: PUSH
33663: LD_VAR 0 1
33667: STR
33668: PPUSH
33669: CALL_OW 34
33673: ST_TO_ADDR
33674: GO 33691
// unit := NewCharacter ( ident ) ;
33676: LD_ADDR_VAR 0 5
33680: PUSH
33681: LD_VAR 0 1
33685: PPUSH
33686: CALL_OW 25
33690: ST_TO_ADDR
// result := unit ;
33691: LD_ADDR_VAR 0 4
33695: PUSH
33696: LD_VAR 0 5
33700: ST_TO_ADDR
// end ;
33701: LD_VAR 0 4
33705: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33706: LD_INT 0
33708: PPUSH
33709: PPUSH
// if not side or not nation then
33710: LD_VAR 0 1
33714: NOT
33715: IFTRUE 33724
33717: PUSH
33718: LD_VAR 0 2
33722: NOT
33723: OR
33724: IFFALSE 33728
// exit ;
33726: GO 34522
// case nation of nation_american :
33728: LD_VAR 0 2
33732: PUSH
33733: LD_INT 1
33735: DOUBLE
33736: EQUAL
33737: IFTRUE 33741
33739: GO 33963
33741: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
33742: LD_ADDR_VAR 0 4
33746: PUSH
33747: LD_INT 35
33749: PUSH
33750: LD_INT 45
33752: PUSH
33753: LD_INT 46
33755: PUSH
33756: LD_INT 47
33758: PUSH
33759: LD_INT 82
33761: PUSH
33762: LD_INT 83
33764: PUSH
33765: LD_INT 84
33767: PUSH
33768: LD_INT 85
33770: PUSH
33771: LD_INT 86
33773: PUSH
33774: LD_INT 1
33776: PUSH
33777: LD_INT 2
33779: PUSH
33780: LD_INT 6
33782: PUSH
33783: LD_INT 15
33785: PUSH
33786: LD_INT 16
33788: PUSH
33789: LD_INT 7
33791: PUSH
33792: LD_INT 12
33794: PUSH
33795: LD_INT 13
33797: PUSH
33798: LD_INT 10
33800: PUSH
33801: LD_INT 14
33803: PUSH
33804: LD_INT 20
33806: PUSH
33807: LD_INT 21
33809: PUSH
33810: LD_INT 22
33812: PUSH
33813: LD_INT 25
33815: PUSH
33816: LD_INT 32
33818: PUSH
33819: LD_INT 27
33821: PUSH
33822: LD_INT 36
33824: PUSH
33825: LD_INT 69
33827: PUSH
33828: LD_INT 39
33830: PUSH
33831: LD_INT 34
33833: PUSH
33834: LD_INT 40
33836: PUSH
33837: LD_INT 48
33839: PUSH
33840: LD_INT 49
33842: PUSH
33843: LD_INT 50
33845: PUSH
33846: LD_INT 51
33848: PUSH
33849: LD_INT 52
33851: PUSH
33852: LD_INT 53
33854: PUSH
33855: LD_INT 54
33857: PUSH
33858: LD_INT 55
33860: PUSH
33861: LD_INT 56
33863: PUSH
33864: LD_INT 57
33866: PUSH
33867: LD_INT 58
33869: PUSH
33870: LD_INT 59
33872: PUSH
33873: LD_INT 60
33875: PUSH
33876: LD_INT 61
33878: PUSH
33879: LD_INT 62
33881: PUSH
33882: LD_INT 80
33884: PUSH
33885: LD_INT 82
33887: PUSH
33888: LD_INT 83
33890: PUSH
33891: LD_INT 84
33893: PUSH
33894: LD_INT 85
33896: PUSH
33897: LD_INT 86
33899: PUSH
33900: LD_INT 90
33902: PUSH
33903: LD_INT 93
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: ST_TO_ADDR
33961: GO 34444
33963: LD_INT 2
33965: DOUBLE
33966: EQUAL
33967: IFTRUE 33971
33969: GO 34205
33971: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
33972: LD_ADDR_VAR 0 4
33976: PUSH
33977: LD_INT 35
33979: PUSH
33980: LD_INT 45
33982: PUSH
33983: LD_INT 46
33985: PUSH
33986: LD_INT 47
33988: PUSH
33989: LD_INT 82
33991: PUSH
33992: LD_INT 83
33994: PUSH
33995: LD_INT 84
33997: PUSH
33998: LD_INT 85
34000: PUSH
34001: LD_INT 87
34003: PUSH
34004: LD_INT 70
34006: PUSH
34007: LD_INT 1
34009: PUSH
34010: LD_INT 11
34012: PUSH
34013: LD_INT 3
34015: PUSH
34016: LD_INT 4
34018: PUSH
34019: LD_INT 5
34021: PUSH
34022: LD_INT 6
34024: PUSH
34025: LD_INT 15
34027: PUSH
34028: LD_INT 18
34030: PUSH
34031: LD_INT 7
34033: PUSH
34034: LD_INT 17
34036: PUSH
34037: LD_INT 8
34039: PUSH
34040: LD_INT 20
34042: PUSH
34043: LD_INT 21
34045: PUSH
34046: LD_INT 22
34048: PUSH
34049: LD_INT 72
34051: PUSH
34052: LD_INT 26
34054: PUSH
34055: LD_INT 69
34057: PUSH
34058: LD_INT 39
34060: PUSH
34061: LD_INT 40
34063: PUSH
34064: LD_INT 41
34066: PUSH
34067: LD_INT 42
34069: PUSH
34070: LD_INT 43
34072: PUSH
34073: LD_INT 48
34075: PUSH
34076: LD_INT 49
34078: PUSH
34079: LD_INT 50
34081: PUSH
34082: LD_INT 51
34084: PUSH
34085: LD_INT 52
34087: PUSH
34088: LD_INT 53
34090: PUSH
34091: LD_INT 54
34093: PUSH
34094: LD_INT 55
34096: PUSH
34097: LD_INT 56
34099: PUSH
34100: LD_INT 60
34102: PUSH
34103: LD_INT 61
34105: PUSH
34106: LD_INT 62
34108: PUSH
34109: LD_INT 66
34111: PUSH
34112: LD_INT 67
34114: PUSH
34115: LD_INT 68
34117: PUSH
34118: LD_INT 81
34120: PUSH
34121: LD_INT 82
34123: PUSH
34124: LD_INT 83
34126: PUSH
34127: LD_INT 84
34129: PUSH
34130: LD_INT 85
34132: PUSH
34133: LD_INT 87
34135: PUSH
34136: LD_INT 88
34138: PUSH
34139: LD_INT 92
34141: PUSH
34142: LD_INT 94
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: ST_TO_ADDR
34203: GO 34444
34205: LD_INT 3
34207: DOUBLE
34208: EQUAL
34209: IFTRUE 34213
34211: GO 34443
34213: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
34214: LD_ADDR_VAR 0 4
34218: PUSH
34219: LD_INT 46
34221: PUSH
34222: LD_INT 47
34224: PUSH
34225: LD_INT 1
34227: PUSH
34228: LD_INT 2
34230: PUSH
34231: LD_INT 82
34233: PUSH
34234: LD_INT 83
34236: PUSH
34237: LD_INT 84
34239: PUSH
34240: LD_INT 85
34242: PUSH
34243: LD_INT 86
34245: PUSH
34246: LD_INT 11
34248: PUSH
34249: LD_INT 9
34251: PUSH
34252: LD_INT 20
34254: PUSH
34255: LD_INT 19
34257: PUSH
34258: LD_INT 21
34260: PUSH
34261: LD_INT 24
34263: PUSH
34264: LD_INT 22
34266: PUSH
34267: LD_INT 25
34269: PUSH
34270: LD_INT 28
34272: PUSH
34273: LD_INT 29
34275: PUSH
34276: LD_INT 30
34278: PUSH
34279: LD_INT 31
34281: PUSH
34282: LD_INT 37
34284: PUSH
34285: LD_INT 38
34287: PUSH
34288: LD_INT 32
34290: PUSH
34291: LD_INT 27
34293: PUSH
34294: LD_INT 33
34296: PUSH
34297: LD_INT 69
34299: PUSH
34300: LD_INT 39
34302: PUSH
34303: LD_INT 34
34305: PUSH
34306: LD_INT 40
34308: PUSH
34309: LD_INT 71
34311: PUSH
34312: LD_INT 23
34314: PUSH
34315: LD_INT 44
34317: PUSH
34318: LD_INT 48
34320: PUSH
34321: LD_INT 49
34323: PUSH
34324: LD_INT 50
34326: PUSH
34327: LD_INT 51
34329: PUSH
34330: LD_INT 52
34332: PUSH
34333: LD_INT 53
34335: PUSH
34336: LD_INT 54
34338: PUSH
34339: LD_INT 55
34341: PUSH
34342: LD_INT 56
34344: PUSH
34345: LD_INT 57
34347: PUSH
34348: LD_INT 58
34350: PUSH
34351: LD_INT 59
34353: PUSH
34354: LD_INT 63
34356: PUSH
34357: LD_INT 64
34359: PUSH
34360: LD_INT 65
34362: PUSH
34363: LD_INT 82
34365: PUSH
34366: LD_INT 83
34368: PUSH
34369: LD_INT 84
34371: PUSH
34372: LD_INT 85
34374: PUSH
34375: LD_INT 86
34377: PUSH
34378: LD_INT 89
34380: PUSH
34381: LD_INT 91
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: ST_TO_ADDR
34441: GO 34444
34443: POP
// if state > - 1 and state < 3 then
34444: LD_VAR 0 3
34448: PUSH
34449: LD_INT 1
34451: NEG
34452: GREATER
34453: IFFALSE 34465
34455: PUSH
34456: LD_VAR 0 3
34460: PUSH
34461: LD_INT 3
34463: LESS
34464: AND
34465: IFFALSE 34522
// for i in result do
34467: LD_ADDR_VAR 0 5
34471: PUSH
34472: LD_VAR 0 4
34476: PUSH
34477: FOR_IN
34478: IFFALSE 34520
// if GetTech ( i , side ) <> state then
34480: LD_VAR 0 5
34484: PPUSH
34485: LD_VAR 0 1
34489: PPUSH
34490: CALL_OW 321
34494: PUSH
34495: LD_VAR 0 3
34499: NONEQUAL
34500: IFFALSE 34518
// result := result diff i ;
34502: LD_ADDR_VAR 0 4
34506: PUSH
34507: LD_VAR 0 4
34511: PUSH
34512: LD_VAR 0 5
34516: DIFF
34517: ST_TO_ADDR
34518: GO 34477
34520: POP
34521: POP
// end ;
34522: LD_VAR 0 4
34526: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34527: LD_INT 0
34529: PPUSH
34530: PPUSH
34531: PPUSH
// result := true ;
34532: LD_ADDR_VAR 0 3
34536: PUSH
34537: LD_INT 1
34539: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34540: LD_ADDR_VAR 0 5
34544: PUSH
34545: LD_VAR 0 2
34549: PPUSH
34550: CALL_OW 480
34554: ST_TO_ADDR
// if not tmp then
34555: LD_VAR 0 5
34559: NOT
34560: IFFALSE 34564
// exit ;
34562: GO 34613
// for i in tmp do
34564: LD_ADDR_VAR 0 4
34568: PUSH
34569: LD_VAR 0 5
34573: PUSH
34574: FOR_IN
34575: IFFALSE 34611
// if GetTech ( i , side ) <> state_researched then
34577: LD_VAR 0 4
34581: PPUSH
34582: LD_VAR 0 1
34586: PPUSH
34587: CALL_OW 321
34591: PUSH
34592: LD_INT 2
34594: NONEQUAL
34595: IFFALSE 34609
// begin result := false ;
34597: LD_ADDR_VAR 0 3
34601: PUSH
34602: LD_INT 0
34604: ST_TO_ADDR
// exit ;
34605: POP
34606: POP
34607: GO 34613
// end ;
34609: GO 34574
34611: POP
34612: POP
// end ;
34613: LD_VAR 0 3
34617: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34618: LD_INT 0
34620: PPUSH
34621: PPUSH
34622: PPUSH
34623: PPUSH
34624: PPUSH
34625: PPUSH
34626: PPUSH
34627: PPUSH
34628: PPUSH
34629: PPUSH
34630: PPUSH
34631: PPUSH
34632: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34633: LD_VAR 0 1
34637: NOT
34638: IFTRUE 34655
34640: PUSH
34641: LD_VAR 0 1
34645: PPUSH
34646: CALL_OW 257
34650: PUSH
34651: LD_INT 9
34653: NONEQUAL
34654: OR
34655: IFFALSE 34659
// exit ;
34657: GO 35238
// side := GetSide ( unit ) ;
34659: LD_ADDR_VAR 0 9
34663: PUSH
34664: LD_VAR 0 1
34668: PPUSH
34669: CALL_OW 255
34673: ST_TO_ADDR
// tech_space := tech_spacanom ;
34674: LD_ADDR_VAR 0 12
34678: PUSH
34679: LD_INT 29
34681: ST_TO_ADDR
// tech_time := tech_taurad ;
34682: LD_ADDR_VAR 0 13
34686: PUSH
34687: LD_INT 28
34689: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34690: LD_ADDR_VAR 0 11
34694: PUSH
34695: LD_VAR 0 1
34699: PPUSH
34700: CALL_OW 310
34704: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34705: LD_VAR 0 11
34709: PPUSH
34710: CALL_OW 247
34714: PUSH
34715: LD_INT 2
34717: EQUAL
34718: IFFALSE 34722
// exit ;
34720: GO 35238
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34722: LD_ADDR_VAR 0 8
34726: PUSH
34727: LD_INT 81
34729: PUSH
34730: LD_VAR 0 9
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 3
34741: PUSH
34742: LD_INT 21
34744: PUSH
34745: LD_INT 3
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PPUSH
34760: CALL_OW 69
34764: ST_TO_ADDR
// if not tmp then
34765: LD_VAR 0 8
34769: NOT
34770: IFFALSE 34774
// exit ;
34772: GO 35238
// if in_unit then
34774: LD_VAR 0 11
34778: IFFALSE 34802
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34780: LD_ADDR_VAR 0 10
34784: PUSH
34785: LD_VAR 0 8
34789: PPUSH
34790: LD_VAR 0 11
34794: PPUSH
34795: CALL_OW 74
34799: ST_TO_ADDR
34800: GO 34822
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34802: LD_ADDR_VAR 0 10
34806: PUSH
34807: LD_VAR 0 8
34811: PPUSH
34812: LD_VAR 0 1
34816: PPUSH
34817: CALL_OW 74
34821: ST_TO_ADDR
// if not enemy then
34822: LD_VAR 0 10
34826: NOT
34827: IFFALSE 34831
// exit ;
34829: GO 35238
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34831: LD_VAR 0 11
34835: IFFALSE 34857
34837: PUSH
34838: LD_VAR 0 11
34842: PPUSH
34843: LD_VAR 0 10
34847: PPUSH
34848: CALL_OW 296
34852: PUSH
34853: LD_INT 13
34855: GREATER
34856: AND
34857: IFTRUE 34879
34859: PUSH
34860: LD_VAR 0 1
34864: PPUSH
34865: LD_VAR 0 10
34869: PPUSH
34870: CALL_OW 296
34874: PUSH
34875: LD_INT 12
34877: GREATER
34878: OR
34879: IFFALSE 34883
// exit ;
34881: GO 35238
// missile := [ 1 ] ;
34883: LD_ADDR_VAR 0 14
34887: PUSH
34888: LD_INT 1
34890: PUSH
34891: EMPTY
34892: LIST
34893: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34894: LD_VAR 0 9
34898: PPUSH
34899: LD_VAR 0 12
34903: PPUSH
34904: CALL_OW 325
34908: IFFALSE 34937
// missile := Replace ( missile , missile + 1 , 2 ) ;
34910: LD_ADDR_VAR 0 14
34914: PUSH
34915: LD_VAR 0 14
34919: PPUSH
34920: LD_VAR 0 14
34924: PUSH
34925: LD_INT 1
34927: PLUS
34928: PPUSH
34929: LD_INT 2
34931: PPUSH
34932: CALL_OW 1
34936: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34937: LD_VAR 0 9
34941: PPUSH
34942: LD_VAR 0 13
34946: PPUSH
34947: CALL_OW 325
34951: IFFALSE 34975
34953: PUSH
34954: LD_VAR 0 10
34958: PPUSH
34959: CALL_OW 255
34963: PPUSH
34964: LD_VAR 0 13
34968: PPUSH
34969: CALL_OW 325
34973: NOT
34974: AND
34975: IFFALSE 35004
// missile := Replace ( missile , missile + 1 , 3 ) ;
34977: LD_ADDR_VAR 0 14
34981: PUSH
34982: LD_VAR 0 14
34986: PPUSH
34987: LD_VAR 0 14
34991: PUSH
34992: LD_INT 1
34994: PLUS
34995: PPUSH
34996: LD_INT 3
34998: PPUSH
34999: CALL_OW 1
35003: ST_TO_ADDR
// if missile < 2 then
35004: LD_VAR 0 14
35008: PUSH
35009: LD_INT 2
35011: LESS
35012: IFFALSE 35016
// exit ;
35014: GO 35238
// x := GetX ( enemy ) ;
35016: LD_ADDR_VAR 0 4
35020: PUSH
35021: LD_VAR 0 10
35025: PPUSH
35026: CALL_OW 250
35030: ST_TO_ADDR
// y := GetY ( enemy ) ;
35031: LD_ADDR_VAR 0 5
35035: PUSH
35036: LD_VAR 0 10
35040: PPUSH
35041: CALL_OW 251
35045: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35046: LD_ADDR_VAR 0 6
35050: PUSH
35051: LD_VAR 0 4
35055: PUSH
35056: LD_INT 1
35058: NEG
35059: PPUSH
35060: LD_INT 1
35062: PPUSH
35063: CALL_OW 12
35067: PLUS
35068: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35069: LD_ADDR_VAR 0 7
35073: PUSH
35074: LD_VAR 0 5
35078: PUSH
35079: LD_INT 1
35081: NEG
35082: PPUSH
35083: LD_INT 1
35085: PPUSH
35086: CALL_OW 12
35090: PLUS
35091: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35092: LD_VAR 0 6
35096: PPUSH
35097: LD_VAR 0 7
35101: PPUSH
35102: CALL_OW 488
35106: NOT
35107: IFFALSE 35129
// begin _x := x ;
35109: LD_ADDR_VAR 0 6
35113: PUSH
35114: LD_VAR 0 4
35118: ST_TO_ADDR
// _y := y ;
35119: LD_ADDR_VAR 0 7
35123: PUSH
35124: LD_VAR 0 5
35128: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35129: LD_ADDR_VAR 0 3
35133: PUSH
35134: LD_INT 1
35136: PPUSH
35137: LD_VAR 0 14
35141: PPUSH
35142: CALL_OW 12
35146: ST_TO_ADDR
// case i of 1 :
35147: LD_VAR 0 3
35151: PUSH
35152: LD_INT 1
35154: DOUBLE
35155: EQUAL
35156: IFTRUE 35160
35158: GO 35177
35160: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35161: LD_VAR 0 1
35165: PPUSH
35166: LD_VAR 0 10
35170: PPUSH
35171: CALL_OW 115
35175: GO 35238
35177: LD_INT 2
35179: DOUBLE
35180: EQUAL
35181: IFTRUE 35185
35183: GO 35207
35185: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35186: LD_VAR 0 1
35190: PPUSH
35191: LD_VAR 0 6
35195: PPUSH
35196: LD_VAR 0 7
35200: PPUSH
35201: CALL_OW 153
35205: GO 35238
35207: LD_INT 3
35209: DOUBLE
35210: EQUAL
35211: IFTRUE 35215
35213: GO 35237
35215: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35216: LD_VAR 0 1
35220: PPUSH
35221: LD_VAR 0 6
35225: PPUSH
35226: LD_VAR 0 7
35230: PPUSH
35231: CALL_OW 154
35235: GO 35238
35237: POP
// end ;
35238: LD_VAR 0 2
35242: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35243: LD_INT 0
35245: PPUSH
35246: PPUSH
35247: PPUSH
35248: PPUSH
35249: PPUSH
35250: PPUSH
// if not unit or not building then
35251: LD_VAR 0 1
35255: NOT
35256: IFTRUE 35265
35258: PUSH
35259: LD_VAR 0 2
35263: NOT
35264: OR
35265: IFFALSE 35269
// exit ;
35267: GO 35427
// x := GetX ( building ) ;
35269: LD_ADDR_VAR 0 5
35273: PUSH
35274: LD_VAR 0 2
35278: PPUSH
35279: CALL_OW 250
35283: ST_TO_ADDR
// y := GetY ( building ) ;
35284: LD_ADDR_VAR 0 6
35288: PUSH
35289: LD_VAR 0 2
35293: PPUSH
35294: CALL_OW 251
35298: ST_TO_ADDR
// for i := 0 to 5 do
35299: LD_ADDR_VAR 0 4
35303: PUSH
35304: DOUBLE
35305: LD_INT 0
35307: DEC
35308: ST_TO_ADDR
35309: LD_INT 5
35311: PUSH
35312: FOR_TO
35313: IFFALSE 35425
// begin _x := ShiftX ( x , i , 3 ) ;
35315: LD_ADDR_VAR 0 7
35319: PUSH
35320: LD_VAR 0 5
35324: PPUSH
35325: LD_VAR 0 4
35329: PPUSH
35330: LD_INT 3
35332: PPUSH
35333: CALL_OW 272
35337: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35338: LD_ADDR_VAR 0 8
35342: PUSH
35343: LD_VAR 0 6
35347: PPUSH
35348: LD_VAR 0 4
35352: PPUSH
35353: LD_INT 3
35355: PPUSH
35356: CALL_OW 273
35360: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35361: LD_VAR 0 7
35365: PPUSH
35366: LD_VAR 0 8
35370: PPUSH
35371: CALL_OW 488
35375: NOT
35376: IFFALSE 35380
// continue ;
35378: GO 35312
// if HexInfo ( _x , _y ) = 0 then
35380: LD_VAR 0 7
35384: PPUSH
35385: LD_VAR 0 8
35389: PPUSH
35390: CALL_OW 428
35394: PUSH
35395: LD_INT 0
35397: EQUAL
35398: IFFALSE 35423
// begin ComMoveXY ( unit , _x , _y ) ;
35400: LD_VAR 0 1
35404: PPUSH
35405: LD_VAR 0 7
35409: PPUSH
35410: LD_VAR 0 8
35414: PPUSH
35415: CALL_OW 111
// exit ;
35419: POP
35420: POP
35421: GO 35427
// end ; end ;
35423: GO 35312
35425: POP
35426: POP
// end ;
35427: LD_VAR 0 3
35431: RET
// export function ScanBase ( side , base_area ) ; begin
35432: LD_INT 0
35434: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35435: LD_ADDR_VAR 0 3
35439: PUSH
35440: LD_VAR 0 2
35444: PPUSH
35445: LD_INT 81
35447: PUSH
35448: LD_VAR 0 1
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PPUSH
35457: CALL_OW 70
35461: ST_TO_ADDR
// end ;
35462: LD_VAR 0 3
35466: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35467: LD_INT 0
35469: PPUSH
35470: PPUSH
35471: PPUSH
35472: PPUSH
// result := false ;
35473: LD_ADDR_VAR 0 2
35477: PUSH
35478: LD_INT 0
35480: ST_TO_ADDR
// side := GetSide ( unit ) ;
35481: LD_ADDR_VAR 0 3
35485: PUSH
35486: LD_VAR 0 1
35490: PPUSH
35491: CALL_OW 255
35495: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35496: LD_ADDR_VAR 0 4
35500: PUSH
35501: LD_VAR 0 1
35505: PPUSH
35506: CALL_OW 248
35510: ST_TO_ADDR
// case nat of 1 :
35511: LD_VAR 0 4
35515: PUSH
35516: LD_INT 1
35518: DOUBLE
35519: EQUAL
35520: IFTRUE 35524
35522: GO 35535
35524: POP
// tech := tech_lassight ; 2 :
35525: LD_ADDR_VAR 0 5
35529: PUSH
35530: LD_INT 12
35532: ST_TO_ADDR
35533: GO 35574
35535: LD_INT 2
35537: DOUBLE
35538: EQUAL
35539: IFTRUE 35543
35541: GO 35554
35543: POP
// tech := tech_mortar ; 3 :
35544: LD_ADDR_VAR 0 5
35548: PUSH
35549: LD_INT 41
35551: ST_TO_ADDR
35552: GO 35574
35554: LD_INT 3
35556: DOUBLE
35557: EQUAL
35558: IFTRUE 35562
35560: GO 35573
35562: POP
// tech := tech_bazooka ; end ;
35563: LD_ADDR_VAR 0 5
35567: PUSH
35568: LD_INT 44
35570: ST_TO_ADDR
35571: GO 35574
35573: POP
// if Researched ( side , tech ) then
35574: LD_VAR 0 3
35578: PPUSH
35579: LD_VAR 0 5
35583: PPUSH
35584: CALL_OW 325
35588: IFFALSE 35615
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35590: LD_ADDR_VAR 0 2
35594: PUSH
35595: LD_INT 5
35597: PUSH
35598: LD_INT 8
35600: PUSH
35601: LD_INT 9
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: LIST
35608: PUSH
35609: LD_VAR 0 4
35613: ARRAY
35614: ST_TO_ADDR
// end ;
35615: LD_VAR 0 2
35619: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35620: LD_INT 0
35622: PPUSH
35623: PPUSH
35624: PPUSH
// if not mines then
35625: LD_VAR 0 2
35629: NOT
35630: IFFALSE 35634
// exit ;
35632: GO 35778
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35634: LD_ADDR_VAR 0 5
35638: PUSH
35639: LD_INT 81
35641: PUSH
35642: LD_VAR 0 1
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 3
35653: PUSH
35654: LD_INT 21
35656: PUSH
35657: LD_INT 3
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PPUSH
35672: CALL_OW 69
35676: ST_TO_ADDR
// for i in mines do
35677: LD_ADDR_VAR 0 4
35681: PUSH
35682: LD_VAR 0 2
35686: PUSH
35687: FOR_IN
35688: IFFALSE 35776
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35690: LD_VAR 0 4
35694: PUSH
35695: LD_INT 1
35697: ARRAY
35698: PPUSH
35699: LD_VAR 0 4
35703: PUSH
35704: LD_INT 2
35706: ARRAY
35707: PPUSH
35708: CALL_OW 458
35712: NOT
35713: IFFALSE 35717
// continue ;
35715: GO 35687
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35717: LD_VAR 0 4
35721: PUSH
35722: LD_INT 1
35724: ARRAY
35725: PPUSH
35726: LD_VAR 0 4
35730: PUSH
35731: LD_INT 2
35733: ARRAY
35734: PPUSH
35735: CALL_OW 428
35739: PUSH
35740: LD_VAR 0 5
35744: IN
35745: IFFALSE 35774
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35747: LD_VAR 0 4
35751: PUSH
35752: LD_INT 1
35754: ARRAY
35755: PPUSH
35756: LD_VAR 0 4
35760: PUSH
35761: LD_INT 2
35763: ARRAY
35764: PPUSH
35765: LD_VAR 0 1
35769: PPUSH
35770: CALL_OW 456
// end ;
35774: GO 35687
35776: POP
35777: POP
// end ;
35778: LD_VAR 0 3
35782: RET
// export function Count ( array ) ; begin
35783: LD_INT 0
35785: PPUSH
// result := array + 0 ;
35786: LD_ADDR_VAR 0 2
35790: PUSH
35791: LD_VAR 0 1
35795: PUSH
35796: LD_INT 0
35798: PLUS
35799: ST_TO_ADDR
// end ;
35800: LD_VAR 0 2
35804: RET
// export function IsEmpty ( building ) ; begin
35805: LD_INT 0
35807: PPUSH
// if not building then
35808: LD_VAR 0 1
35812: NOT
35813: IFFALSE 35817
// exit ;
35815: GO 35860
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35817: LD_ADDR_VAR 0 2
35821: PUSH
35822: LD_VAR 0 1
35826: PUSH
35827: LD_INT 22
35829: PUSH
35830: LD_VAR 0 1
35834: PPUSH
35835: CALL_OW 255
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 58
35846: PUSH
35847: EMPTY
35848: LIST
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PPUSH
35854: CALL_OW 69
35858: IN
35859: ST_TO_ADDR
// end ;
35860: LD_VAR 0 2
35864: RET
// export function IsNotFull ( building ) ; var places ; begin
35865: LD_INT 0
35867: PPUSH
35868: PPUSH
// if not building then
35869: LD_VAR 0 1
35873: NOT
35874: IFFALSE 35878
// exit ;
35876: GO 35906
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35878: LD_ADDR_VAR 0 2
35882: PUSH
35883: LD_VAR 0 1
35887: PPUSH
35888: LD_INT 3
35890: PUSH
35891: LD_INT 62
35893: PUSH
35894: EMPTY
35895: LIST
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PPUSH
35901: CALL_OW 72
35905: ST_TO_ADDR
// end ;
35906: LD_VAR 0 2
35910: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35911: LD_INT 0
35913: PPUSH
35914: PPUSH
35915: PPUSH
35916: PPUSH
// tmp := [ ] ;
35917: LD_ADDR_VAR 0 3
35921: PUSH
35922: EMPTY
35923: ST_TO_ADDR
// list := [ ] ;
35924: LD_ADDR_VAR 0 5
35928: PUSH
35929: EMPTY
35930: ST_TO_ADDR
// for i = 16 to 25 do
35931: LD_ADDR_VAR 0 4
35935: PUSH
35936: DOUBLE
35937: LD_INT 16
35939: DEC
35940: ST_TO_ADDR
35941: LD_INT 25
35943: PUSH
35944: FOR_TO
35945: IFFALSE 36018
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35947: LD_ADDR_VAR 0 3
35951: PUSH
35952: LD_VAR 0 3
35956: PUSH
35957: LD_INT 22
35959: PUSH
35960: LD_VAR 0 1
35964: PPUSH
35965: CALL_OW 255
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 91
35976: PUSH
35977: LD_VAR 0 1
35981: PUSH
35982: LD_INT 6
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 30
35992: PUSH
35993: LD_VAR 0 4
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: LIST
36006: PUSH
36007: EMPTY
36008: LIST
36009: PPUSH
36010: CALL_OW 69
36014: ADD
36015: ST_TO_ADDR
36016: GO 35944
36018: POP
36019: POP
// for i = 1 to tmp do
36020: LD_ADDR_VAR 0 4
36024: PUSH
36025: DOUBLE
36026: LD_INT 1
36028: DEC
36029: ST_TO_ADDR
36030: LD_VAR 0 3
36034: PUSH
36035: FOR_TO
36036: IFFALSE 36124
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36038: LD_ADDR_VAR 0 5
36042: PUSH
36043: LD_VAR 0 5
36047: PUSH
36048: LD_VAR 0 3
36052: PUSH
36053: LD_VAR 0 4
36057: ARRAY
36058: PPUSH
36059: CALL_OW 266
36063: PUSH
36064: LD_VAR 0 3
36068: PUSH
36069: LD_VAR 0 4
36073: ARRAY
36074: PPUSH
36075: CALL_OW 250
36079: PUSH
36080: LD_VAR 0 3
36084: PUSH
36085: LD_VAR 0 4
36089: ARRAY
36090: PPUSH
36091: CALL_OW 251
36095: PUSH
36096: LD_VAR 0 3
36100: PUSH
36101: LD_VAR 0 4
36105: ARRAY
36106: PPUSH
36107: CALL_OW 254
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: PUSH
36118: EMPTY
36119: LIST
36120: ADD
36121: ST_TO_ADDR
36122: GO 36035
36124: POP
36125: POP
// result := list ;
36126: LD_ADDR_VAR 0 2
36130: PUSH
36131: LD_VAR 0 5
36135: ST_TO_ADDR
// end ;
36136: LD_VAR 0 2
36140: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36141: LD_INT 0
36143: PPUSH
36144: PPUSH
36145: PPUSH
36146: PPUSH
36147: PPUSH
36148: PPUSH
36149: PPUSH
// if not factory then
36150: LD_VAR 0 1
36154: NOT
36155: IFFALSE 36159
// exit ;
36157: GO 36762
// if control = control_apeman then
36159: LD_VAR 0 4
36163: PUSH
36164: LD_INT 5
36166: EQUAL
36167: IFFALSE 36276
// begin tmp := UnitsInside ( factory ) ;
36169: LD_ADDR_VAR 0 8
36173: PUSH
36174: LD_VAR 0 1
36178: PPUSH
36179: CALL_OW 313
36183: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36184: LD_VAR 0 8
36188: PPUSH
36189: LD_INT 25
36191: PUSH
36192: LD_INT 12
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PPUSH
36199: CALL_OW 72
36203: NOT
36204: IFFALSE 36214
// control := control_manual ;
36206: LD_ADDR_VAR 0 4
36210: PUSH
36211: LD_INT 1
36213: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36214: LD_ADDR_VAR 0 8
36218: PUSH
36219: LD_VAR 0 1
36223: PPUSH
36224: CALL 35911 0 1
36228: ST_TO_ADDR
// if tmp then
36229: LD_VAR 0 8
36233: IFFALSE 36276
// begin for i in tmp do
36235: LD_ADDR_VAR 0 7
36239: PUSH
36240: LD_VAR 0 8
36244: PUSH
36245: FOR_IN
36246: IFFALSE 36274
// if i [ 1 ] = b_ext_radio then
36248: LD_VAR 0 7
36252: PUSH
36253: LD_INT 1
36255: ARRAY
36256: PUSH
36257: LD_INT 22
36259: EQUAL
36260: IFFALSE 36272
// begin control := control_remote ;
36262: LD_ADDR_VAR 0 4
36266: PUSH
36267: LD_INT 2
36269: ST_TO_ADDR
// break ;
36270: GO 36274
// end ;
36272: GO 36245
36274: POP
36275: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36276: LD_VAR 0 1
36280: PPUSH
36281: LD_VAR 0 2
36285: PPUSH
36286: LD_VAR 0 3
36290: PPUSH
36291: LD_VAR 0 4
36295: PPUSH
36296: LD_VAR 0 5
36300: PPUSH
36301: CALL_OW 448
36305: IFFALSE 36340
// begin result := [ chassis , engine , control , weapon ] ;
36307: LD_ADDR_VAR 0 6
36311: PUSH
36312: LD_VAR 0 2
36316: PUSH
36317: LD_VAR 0 3
36321: PUSH
36322: LD_VAR 0 4
36326: PUSH
36327: LD_VAR 0 5
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: ST_TO_ADDR
// exit ;
36338: GO 36762
// end ; _chassis := AvailableChassisList ( factory ) ;
36340: LD_ADDR_VAR 0 9
36344: PUSH
36345: LD_VAR 0 1
36349: PPUSH
36350: CALL_OW 475
36354: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36355: LD_ADDR_VAR 0 11
36359: PUSH
36360: LD_VAR 0 1
36364: PPUSH
36365: CALL_OW 476
36369: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36370: LD_ADDR_VAR 0 12
36374: PUSH
36375: LD_VAR 0 1
36379: PPUSH
36380: CALL_OW 477
36384: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36385: LD_ADDR_VAR 0 10
36389: PUSH
36390: LD_VAR 0 1
36394: PPUSH
36395: CALL_OW 478
36399: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36400: LD_VAR 0 9
36404: NOT
36405: IFTRUE 36414
36407: PUSH
36408: LD_VAR 0 11
36412: NOT
36413: OR
36414: IFTRUE 36423
36416: PUSH
36417: LD_VAR 0 12
36421: NOT
36422: OR
36423: IFTRUE 36432
36425: PUSH
36426: LD_VAR 0 10
36430: NOT
36431: OR
36432: IFFALSE 36467
// begin result := [ chassis , engine , control , weapon ] ;
36434: LD_ADDR_VAR 0 6
36438: PUSH
36439: LD_VAR 0 2
36443: PUSH
36444: LD_VAR 0 3
36448: PUSH
36449: LD_VAR 0 4
36453: PUSH
36454: LD_VAR 0 5
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: ST_TO_ADDR
// exit ;
36465: GO 36762
// end ; if not chassis in _chassis then
36467: LD_VAR 0 2
36471: PUSH
36472: LD_VAR 0 9
36476: IN
36477: NOT
36478: IFFALSE 36504
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36480: LD_ADDR_VAR 0 2
36484: PUSH
36485: LD_VAR 0 9
36489: PUSH
36490: LD_INT 1
36492: PPUSH
36493: LD_VAR 0 9
36497: PPUSH
36498: CALL_OW 12
36502: ARRAY
36503: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36504: LD_VAR 0 2
36508: PPUSH
36509: LD_VAR 0 3
36513: PPUSH
36514: CALL 36767 0 2
36518: NOT
36519: IFFALSE 36580
// repeat engine := _engine [ 1 ] ;
36521: LD_ADDR_VAR 0 3
36525: PUSH
36526: LD_VAR 0 11
36530: PUSH
36531: LD_INT 1
36533: ARRAY
36534: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36535: LD_ADDR_VAR 0 11
36539: PUSH
36540: LD_VAR 0 11
36544: PPUSH
36545: LD_INT 1
36547: PPUSH
36548: CALL_OW 3
36552: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36553: LD_VAR 0 2
36557: PPUSH
36558: LD_VAR 0 3
36562: PPUSH
36563: CALL 36767 0 2
36567: IFTRUE 36578
36569: PUSH
36570: LD_VAR 0 11
36574: PUSH
36575: EMPTY
36576: EQUAL
36577: OR
36578: IFFALSE 36521
// if not control in _control then
36580: LD_VAR 0 4
36584: PUSH
36585: LD_VAR 0 12
36589: IN
36590: NOT
36591: IFFALSE 36617
// control := _control [ rand ( 1 , _control ) ] ;
36593: LD_ADDR_VAR 0 4
36597: PUSH
36598: LD_VAR 0 12
36602: PUSH
36603: LD_INT 1
36605: PPUSH
36606: LD_VAR 0 12
36610: PPUSH
36611: CALL_OW 12
36615: ARRAY
36616: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36617: LD_VAR 0 2
36621: PPUSH
36622: LD_VAR 0 5
36626: PPUSH
36627: CALL 36989 0 2
36631: NOT
36632: IFFALSE 36693
// repeat weapon := _weapon [ 1 ] ;
36634: LD_ADDR_VAR 0 5
36638: PUSH
36639: LD_VAR 0 10
36643: PUSH
36644: LD_INT 1
36646: ARRAY
36647: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36648: LD_ADDR_VAR 0 10
36652: PUSH
36653: LD_VAR 0 10
36657: PPUSH
36658: LD_INT 1
36660: PPUSH
36661: CALL_OW 3
36665: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36666: LD_VAR 0 2
36670: PPUSH
36671: LD_VAR 0 5
36675: PPUSH
36676: CALL 36989 0 2
36680: IFTRUE 36691
36682: PUSH
36683: LD_VAR 0 10
36687: PUSH
36688: EMPTY
36689: EQUAL
36690: OR
36691: IFFALSE 36634
// result := [ ] ;
36693: LD_ADDR_VAR 0 6
36697: PUSH
36698: EMPTY
36699: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36700: LD_VAR 0 1
36704: PPUSH
36705: LD_VAR 0 2
36709: PPUSH
36710: LD_VAR 0 3
36714: PPUSH
36715: LD_VAR 0 4
36719: PPUSH
36720: LD_VAR 0 5
36724: PPUSH
36725: CALL_OW 448
36729: IFFALSE 36762
// result := [ chassis , engine , control , weapon ] ;
36731: LD_ADDR_VAR 0 6
36735: PUSH
36736: LD_VAR 0 2
36740: PUSH
36741: LD_VAR 0 3
36745: PUSH
36746: LD_VAR 0 4
36750: PUSH
36751: LD_VAR 0 5
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: ST_TO_ADDR
// end ;
36762: LD_VAR 0 6
36766: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36767: LD_INT 0
36769: PPUSH
// if not chassis or not engine then
36770: LD_VAR 0 1
36774: NOT
36775: IFTRUE 36784
36777: PUSH
36778: LD_VAR 0 2
36782: NOT
36783: OR
36784: IFFALSE 36788
// exit ;
36786: GO 36984
// case engine of engine_solar :
36788: LD_VAR 0 2
36792: PUSH
36793: LD_INT 2
36795: DOUBLE
36796: EQUAL
36797: IFTRUE 36801
36799: GO 36839
36801: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36802: LD_ADDR_VAR 0 3
36806: PUSH
36807: LD_INT 11
36809: PUSH
36810: LD_INT 12
36812: PUSH
36813: LD_INT 13
36815: PUSH
36816: LD_INT 14
36818: PUSH
36819: LD_INT 1
36821: PUSH
36822: LD_INT 2
36824: PUSH
36825: LD_INT 3
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: ST_TO_ADDR
36837: GO 36968
36839: LD_INT 1
36841: DOUBLE
36842: EQUAL
36843: IFTRUE 36847
36845: GO 36909
36847: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36848: LD_ADDR_VAR 0 3
36852: PUSH
36853: LD_INT 11
36855: PUSH
36856: LD_INT 12
36858: PUSH
36859: LD_INT 13
36861: PUSH
36862: LD_INT 14
36864: PUSH
36865: LD_INT 1
36867: PUSH
36868: LD_INT 2
36870: PUSH
36871: LD_INT 3
36873: PUSH
36874: LD_INT 4
36876: PUSH
36877: LD_INT 5
36879: PUSH
36880: LD_INT 21
36882: PUSH
36883: LD_INT 23
36885: PUSH
36886: LD_INT 22
36888: PUSH
36889: LD_INT 24
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: ST_TO_ADDR
36907: GO 36968
36909: LD_INT 3
36911: DOUBLE
36912: EQUAL
36913: IFTRUE 36917
36915: GO 36967
36917: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36918: LD_ADDR_VAR 0 3
36922: PUSH
36923: LD_INT 13
36925: PUSH
36926: LD_INT 14
36928: PUSH
36929: LD_INT 2
36931: PUSH
36932: LD_INT 3
36934: PUSH
36935: LD_INT 4
36937: PUSH
36938: LD_INT 5
36940: PUSH
36941: LD_INT 21
36943: PUSH
36944: LD_INT 22
36946: PUSH
36947: LD_INT 23
36949: PUSH
36950: LD_INT 24
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: ST_TO_ADDR
36965: GO 36968
36967: POP
// result := ( chassis in result ) ;
36968: LD_ADDR_VAR 0 3
36972: PUSH
36973: LD_VAR 0 1
36977: PUSH
36978: LD_VAR 0 3
36982: IN
36983: ST_TO_ADDR
// end ;
36984: LD_VAR 0 3
36988: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36989: LD_INT 0
36991: PPUSH
// if not chassis or not weapon then
36992: LD_VAR 0 1
36996: NOT
36997: IFTRUE 37006
36999: PUSH
37000: LD_VAR 0 2
37004: NOT
37005: OR
37006: IFFALSE 37010
// exit ;
37008: GO 38070
// case weapon of us_machine_gun :
37010: LD_VAR 0 2
37014: PUSH
37015: LD_INT 2
37017: DOUBLE
37018: EQUAL
37019: IFTRUE 37023
37021: GO 37053
37023: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37024: LD_ADDR_VAR 0 3
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: LD_INT 2
37034: PUSH
37035: LD_INT 3
37037: PUSH
37038: LD_INT 4
37040: PUSH
37041: LD_INT 5
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: ST_TO_ADDR
37051: GO 38054
37053: LD_INT 3
37055: DOUBLE
37056: EQUAL
37057: IFTRUE 37061
37059: GO 37091
37061: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37062: LD_ADDR_VAR 0 3
37066: PUSH
37067: LD_INT 1
37069: PUSH
37070: LD_INT 2
37072: PUSH
37073: LD_INT 3
37075: PUSH
37076: LD_INT 4
37078: PUSH
37079: LD_INT 5
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: ST_TO_ADDR
37089: GO 38054
37091: LD_INT 11
37093: DOUBLE
37094: EQUAL
37095: IFTRUE 37099
37097: GO 37129
37099: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37100: LD_ADDR_VAR 0 3
37104: PUSH
37105: LD_INT 1
37107: PUSH
37108: LD_INT 2
37110: PUSH
37111: LD_INT 3
37113: PUSH
37114: LD_INT 4
37116: PUSH
37117: LD_INT 5
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: ST_TO_ADDR
37127: GO 38054
37129: LD_INT 4
37131: DOUBLE
37132: EQUAL
37133: IFTRUE 37137
37135: GO 37163
37137: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37138: LD_ADDR_VAR 0 3
37142: PUSH
37143: LD_INT 2
37145: PUSH
37146: LD_INT 3
37148: PUSH
37149: LD_INT 4
37151: PUSH
37152: LD_INT 5
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: ST_TO_ADDR
37161: GO 38054
37163: LD_INT 5
37165: DOUBLE
37166: EQUAL
37167: IFTRUE 37171
37169: GO 37197
37171: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37172: LD_ADDR_VAR 0 3
37176: PUSH
37177: LD_INT 2
37179: PUSH
37180: LD_INT 3
37182: PUSH
37183: LD_INT 4
37185: PUSH
37186: LD_INT 5
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: ST_TO_ADDR
37195: GO 38054
37197: LD_INT 9
37199: DOUBLE
37200: EQUAL
37201: IFTRUE 37205
37203: GO 37231
37205: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37206: LD_ADDR_VAR 0 3
37210: PUSH
37211: LD_INT 2
37213: PUSH
37214: LD_INT 3
37216: PUSH
37217: LD_INT 4
37219: PUSH
37220: LD_INT 5
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: ST_TO_ADDR
37229: GO 38054
37231: LD_INT 7
37233: DOUBLE
37234: EQUAL
37235: IFTRUE 37239
37237: GO 37265
37239: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37240: LD_ADDR_VAR 0 3
37244: PUSH
37245: LD_INT 2
37247: PUSH
37248: LD_INT 3
37250: PUSH
37251: LD_INT 4
37253: PUSH
37254: LD_INT 5
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: ST_TO_ADDR
37263: GO 38054
37265: LD_INT 12
37267: DOUBLE
37268: EQUAL
37269: IFTRUE 37273
37271: GO 37299
37273: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37274: LD_ADDR_VAR 0 3
37278: PUSH
37279: LD_INT 2
37281: PUSH
37282: LD_INT 3
37284: PUSH
37285: LD_INT 4
37287: PUSH
37288: LD_INT 5
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: ST_TO_ADDR
37297: GO 38054
37299: LD_INT 13
37301: DOUBLE
37302: EQUAL
37303: IFTRUE 37307
37305: GO 37333
37307: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37308: LD_ADDR_VAR 0 3
37312: PUSH
37313: LD_INT 2
37315: PUSH
37316: LD_INT 3
37318: PUSH
37319: LD_INT 4
37321: PUSH
37322: LD_INT 5
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: ST_TO_ADDR
37331: GO 38054
37333: LD_INT 14
37335: DOUBLE
37336: EQUAL
37337: IFTRUE 37341
37339: GO 37359
37341: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37342: LD_ADDR_VAR 0 3
37346: PUSH
37347: LD_INT 4
37349: PUSH
37350: LD_INT 5
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: ST_TO_ADDR
37357: GO 38054
37359: LD_INT 6
37361: DOUBLE
37362: EQUAL
37363: IFTRUE 37367
37365: GO 37385
37367: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37368: LD_ADDR_VAR 0 3
37372: PUSH
37373: LD_INT 4
37375: PUSH
37376: LD_INT 5
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: ST_TO_ADDR
37383: GO 38054
37385: LD_INT 10
37387: DOUBLE
37388: EQUAL
37389: IFTRUE 37393
37391: GO 37411
37393: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37394: LD_ADDR_VAR 0 3
37398: PUSH
37399: LD_INT 4
37401: PUSH
37402: LD_INT 5
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: ST_TO_ADDR
37409: GO 38054
37411: LD_INT 22
37413: DOUBLE
37414: EQUAL
37415: IFTRUE 37419
37417: GO 37445
37419: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37420: LD_ADDR_VAR 0 3
37424: PUSH
37425: LD_INT 11
37427: PUSH
37428: LD_INT 12
37430: PUSH
37431: LD_INT 13
37433: PUSH
37434: LD_INT 14
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: ST_TO_ADDR
37443: GO 38054
37445: LD_INT 23
37447: DOUBLE
37448: EQUAL
37449: IFTRUE 37453
37451: GO 37479
37453: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37454: LD_ADDR_VAR 0 3
37458: PUSH
37459: LD_INT 11
37461: PUSH
37462: LD_INT 12
37464: PUSH
37465: LD_INT 13
37467: PUSH
37468: LD_INT 14
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: ST_TO_ADDR
37477: GO 38054
37479: LD_INT 24
37481: DOUBLE
37482: EQUAL
37483: IFTRUE 37487
37485: GO 37513
37487: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37488: LD_ADDR_VAR 0 3
37492: PUSH
37493: LD_INT 11
37495: PUSH
37496: LD_INT 12
37498: PUSH
37499: LD_INT 13
37501: PUSH
37502: LD_INT 14
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: ST_TO_ADDR
37511: GO 38054
37513: LD_INT 30
37515: DOUBLE
37516: EQUAL
37517: IFTRUE 37521
37519: GO 37547
37521: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37522: LD_ADDR_VAR 0 3
37526: PUSH
37527: LD_INT 11
37529: PUSH
37530: LD_INT 12
37532: PUSH
37533: LD_INT 13
37535: PUSH
37536: LD_INT 14
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: ST_TO_ADDR
37545: GO 38054
37547: LD_INT 25
37549: DOUBLE
37550: EQUAL
37551: IFTRUE 37555
37553: GO 37573
37555: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37556: LD_ADDR_VAR 0 3
37560: PUSH
37561: LD_INT 13
37563: PUSH
37564: LD_INT 14
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: ST_TO_ADDR
37571: GO 38054
37573: LD_INT 27
37575: DOUBLE
37576: EQUAL
37577: IFTRUE 37581
37579: GO 37599
37581: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37582: LD_ADDR_VAR 0 3
37586: PUSH
37587: LD_INT 13
37589: PUSH
37590: LD_INT 14
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: ST_TO_ADDR
37597: GO 38054
37599: LD_INT 92
37601: DOUBLE
37602: EQUAL
37603: IFTRUE 37607
37605: GO 37633
37607: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37608: LD_ADDR_VAR 0 3
37612: PUSH
37613: LD_INT 11
37615: PUSH
37616: LD_INT 12
37618: PUSH
37619: LD_INT 13
37621: PUSH
37622: LD_INT 14
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: ST_TO_ADDR
37631: GO 38054
37633: LD_INT 28
37635: DOUBLE
37636: EQUAL
37637: IFTRUE 37641
37639: GO 37659
37641: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37642: LD_ADDR_VAR 0 3
37646: PUSH
37647: LD_INT 13
37649: PUSH
37650: LD_INT 14
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: ST_TO_ADDR
37657: GO 38054
37659: LD_INT 29
37661: DOUBLE
37662: EQUAL
37663: IFTRUE 37667
37665: GO 37685
37667: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37668: LD_ADDR_VAR 0 3
37672: PUSH
37673: LD_INT 13
37675: PUSH
37676: LD_INT 14
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: ST_TO_ADDR
37683: GO 38054
37685: LD_INT 31
37687: DOUBLE
37688: EQUAL
37689: IFTRUE 37693
37691: GO 37711
37693: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37694: LD_ADDR_VAR 0 3
37698: PUSH
37699: LD_INT 13
37701: PUSH
37702: LD_INT 14
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: ST_TO_ADDR
37709: GO 38054
37711: LD_INT 26
37713: DOUBLE
37714: EQUAL
37715: IFTRUE 37719
37717: GO 37737
37719: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37720: LD_ADDR_VAR 0 3
37724: PUSH
37725: LD_INT 13
37727: PUSH
37728: LD_INT 14
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: ST_TO_ADDR
37735: GO 38054
37737: LD_INT 42
37739: DOUBLE
37740: EQUAL
37741: IFTRUE 37745
37743: GO 37771
37745: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37746: LD_ADDR_VAR 0 3
37750: PUSH
37751: LD_INT 21
37753: PUSH
37754: LD_INT 22
37756: PUSH
37757: LD_INT 23
37759: PUSH
37760: LD_INT 24
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: LIST
37767: LIST
37768: ST_TO_ADDR
37769: GO 38054
37771: LD_INT 43
37773: DOUBLE
37774: EQUAL
37775: IFTRUE 37779
37777: GO 37805
37779: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37780: LD_ADDR_VAR 0 3
37784: PUSH
37785: LD_INT 21
37787: PUSH
37788: LD_INT 22
37790: PUSH
37791: LD_INT 23
37793: PUSH
37794: LD_INT 24
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: ST_TO_ADDR
37803: GO 38054
37805: LD_INT 44
37807: DOUBLE
37808: EQUAL
37809: IFTRUE 37813
37811: GO 37839
37813: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37814: LD_ADDR_VAR 0 3
37818: PUSH
37819: LD_INT 21
37821: PUSH
37822: LD_INT 22
37824: PUSH
37825: LD_INT 23
37827: PUSH
37828: LD_INT 24
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: ST_TO_ADDR
37837: GO 38054
37839: LD_INT 45
37841: DOUBLE
37842: EQUAL
37843: IFTRUE 37847
37845: GO 37873
37847: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37848: LD_ADDR_VAR 0 3
37852: PUSH
37853: LD_INT 21
37855: PUSH
37856: LD_INT 22
37858: PUSH
37859: LD_INT 23
37861: PUSH
37862: LD_INT 24
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: ST_TO_ADDR
37871: GO 38054
37873: LD_INT 49
37875: DOUBLE
37876: EQUAL
37877: IFTRUE 37881
37879: GO 37907
37881: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37882: LD_ADDR_VAR 0 3
37886: PUSH
37887: LD_INT 21
37889: PUSH
37890: LD_INT 22
37892: PUSH
37893: LD_INT 23
37895: PUSH
37896: LD_INT 24
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: ST_TO_ADDR
37905: GO 38054
37907: LD_INT 51
37909: DOUBLE
37910: EQUAL
37911: IFTRUE 37915
37913: GO 37941
37915: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37916: LD_ADDR_VAR 0 3
37920: PUSH
37921: LD_INT 21
37923: PUSH
37924: LD_INT 22
37926: PUSH
37927: LD_INT 23
37929: PUSH
37930: LD_INT 24
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: ST_TO_ADDR
37939: GO 38054
37941: LD_INT 52
37943: DOUBLE
37944: EQUAL
37945: IFTRUE 37949
37947: GO 37975
37949: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37950: LD_ADDR_VAR 0 3
37954: PUSH
37955: LD_INT 21
37957: PUSH
37958: LD_INT 22
37960: PUSH
37961: LD_INT 23
37963: PUSH
37964: LD_INT 24
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: ST_TO_ADDR
37973: GO 38054
37975: LD_INT 53
37977: DOUBLE
37978: EQUAL
37979: IFTRUE 37983
37981: GO 38001
37983: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37984: LD_ADDR_VAR 0 3
37988: PUSH
37989: LD_INT 23
37991: PUSH
37992: LD_INT 24
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: ST_TO_ADDR
37999: GO 38054
38001: LD_INT 46
38003: DOUBLE
38004: EQUAL
38005: IFTRUE 38009
38007: GO 38027
38009: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38010: LD_ADDR_VAR 0 3
38014: PUSH
38015: LD_INT 23
38017: PUSH
38018: LD_INT 24
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: ST_TO_ADDR
38025: GO 38054
38027: LD_INT 47
38029: DOUBLE
38030: EQUAL
38031: IFTRUE 38035
38033: GO 38053
38035: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38036: LD_ADDR_VAR 0 3
38040: PUSH
38041: LD_INT 23
38043: PUSH
38044: LD_INT 24
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: ST_TO_ADDR
38051: GO 38054
38053: POP
// result := ( chassis in result ) ;
38054: LD_ADDR_VAR 0 3
38058: PUSH
38059: LD_VAR 0 1
38063: PUSH
38064: LD_VAR 0 3
38068: IN
38069: ST_TO_ADDR
// end ;
38070: LD_VAR 0 3
38074: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38075: LD_INT 0
38077: PPUSH
38078: PPUSH
38079: PPUSH
38080: PPUSH
38081: PPUSH
38082: PPUSH
38083: PPUSH
// result := array ;
38084: LD_ADDR_VAR 0 5
38088: PUSH
38089: LD_VAR 0 1
38093: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38094: LD_VAR 0 1
38098: NOT
38099: IFTRUE 38108
38101: PUSH
38102: LD_VAR 0 2
38106: NOT
38107: OR
38108: IFTRUE 38117
38110: PUSH
38111: LD_VAR 0 3
38115: NOT
38116: OR
38117: IFTRUE 38131
38119: PUSH
38120: LD_VAR 0 2
38124: PUSH
38125: LD_VAR 0 1
38129: GREATER
38130: OR
38131: IFTRUE 38145
38133: PUSH
38134: LD_VAR 0 3
38138: PUSH
38139: LD_VAR 0 1
38143: GREATER
38144: OR
38145: IFFALSE 38149
// exit ;
38147: GO 38445
// if direction then
38149: LD_VAR 0 4
38153: IFFALSE 38217
// begin d := 1 ;
38155: LD_ADDR_VAR 0 9
38159: PUSH
38160: LD_INT 1
38162: ST_TO_ADDR
// if i_from > i_to then
38163: LD_VAR 0 2
38167: PUSH
38168: LD_VAR 0 3
38172: GREATER
38173: IFFALSE 38199
// length := ( array - i_from ) + i_to else
38175: LD_ADDR_VAR 0 11
38179: PUSH
38180: LD_VAR 0 1
38184: PUSH
38185: LD_VAR 0 2
38189: MINUS
38190: PUSH
38191: LD_VAR 0 3
38195: PLUS
38196: ST_TO_ADDR
38197: GO 38215
// length := i_to - i_from ;
38199: LD_ADDR_VAR 0 11
38203: PUSH
38204: LD_VAR 0 3
38208: PUSH
38209: LD_VAR 0 2
38213: MINUS
38214: ST_TO_ADDR
// end else
38215: GO 38278
// begin d := - 1 ;
38217: LD_ADDR_VAR 0 9
38221: PUSH
38222: LD_INT 1
38224: NEG
38225: ST_TO_ADDR
// if i_from > i_to then
38226: LD_VAR 0 2
38230: PUSH
38231: LD_VAR 0 3
38235: GREATER
38236: IFFALSE 38256
// length := i_from - i_to else
38238: LD_ADDR_VAR 0 11
38242: PUSH
38243: LD_VAR 0 2
38247: PUSH
38248: LD_VAR 0 3
38252: MINUS
38253: ST_TO_ADDR
38254: GO 38278
// length := ( array - i_to ) + i_from ;
38256: LD_ADDR_VAR 0 11
38260: PUSH
38261: LD_VAR 0 1
38265: PUSH
38266: LD_VAR 0 3
38270: MINUS
38271: PUSH
38272: LD_VAR 0 2
38276: PLUS
38277: ST_TO_ADDR
// end ; if not length then
38278: LD_VAR 0 11
38282: NOT
38283: IFFALSE 38287
// exit ;
38285: GO 38445
// tmp := array ;
38287: LD_ADDR_VAR 0 10
38291: PUSH
38292: LD_VAR 0 1
38296: ST_TO_ADDR
// for i = 1 to length do
38297: LD_ADDR_VAR 0 6
38301: PUSH
38302: DOUBLE
38303: LD_INT 1
38305: DEC
38306: ST_TO_ADDR
38307: LD_VAR 0 11
38311: PUSH
38312: FOR_TO
38313: IFFALSE 38433
// begin for j = 1 to array do
38315: LD_ADDR_VAR 0 7
38319: PUSH
38320: DOUBLE
38321: LD_INT 1
38323: DEC
38324: ST_TO_ADDR
38325: LD_VAR 0 1
38329: PUSH
38330: FOR_TO
38331: IFFALSE 38419
// begin k := j + d ;
38333: LD_ADDR_VAR 0 8
38337: PUSH
38338: LD_VAR 0 7
38342: PUSH
38343: LD_VAR 0 9
38347: PLUS
38348: ST_TO_ADDR
// if k > array then
38349: LD_VAR 0 8
38353: PUSH
38354: LD_VAR 0 1
38358: GREATER
38359: IFFALSE 38369
// k := 1 ;
38361: LD_ADDR_VAR 0 8
38365: PUSH
38366: LD_INT 1
38368: ST_TO_ADDR
// if not k then
38369: LD_VAR 0 8
38373: NOT
38374: IFFALSE 38386
// k := array ;
38376: LD_ADDR_VAR 0 8
38380: PUSH
38381: LD_VAR 0 1
38385: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38386: LD_ADDR_VAR 0 10
38390: PUSH
38391: LD_VAR 0 10
38395: PPUSH
38396: LD_VAR 0 8
38400: PPUSH
38401: LD_VAR 0 1
38405: PUSH
38406: LD_VAR 0 7
38410: ARRAY
38411: PPUSH
38412: CALL_OW 1
38416: ST_TO_ADDR
// end ;
38417: GO 38330
38419: POP
38420: POP
// array := tmp ;
38421: LD_ADDR_VAR 0 1
38425: PUSH
38426: LD_VAR 0 10
38430: ST_TO_ADDR
// end ;
38431: GO 38312
38433: POP
38434: POP
// result := array ;
38435: LD_ADDR_VAR 0 5
38439: PUSH
38440: LD_VAR 0 1
38444: ST_TO_ADDR
// end ;
38445: LD_VAR 0 5
38449: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38450: LD_INT 0
38452: PPUSH
38453: PPUSH
// result := 0 ;
38454: LD_ADDR_VAR 0 3
38458: PUSH
38459: LD_INT 0
38461: ST_TO_ADDR
// if not array or not value in array then
38462: LD_VAR 0 1
38466: NOT
38467: IFTRUE 38482
38469: PUSH
38470: LD_VAR 0 2
38474: PUSH
38475: LD_VAR 0 1
38479: IN
38480: NOT
38481: OR
38482: IFFALSE 38486
// exit ;
38484: GO 38540
// for i = 1 to array do
38486: LD_ADDR_VAR 0 4
38490: PUSH
38491: DOUBLE
38492: LD_INT 1
38494: DEC
38495: ST_TO_ADDR
38496: LD_VAR 0 1
38500: PUSH
38501: FOR_TO
38502: IFFALSE 38538
// if value = array [ i ] then
38504: LD_VAR 0 2
38508: PUSH
38509: LD_VAR 0 1
38513: PUSH
38514: LD_VAR 0 4
38518: ARRAY
38519: EQUAL
38520: IFFALSE 38536
// begin result := i ;
38522: LD_ADDR_VAR 0 3
38526: PUSH
38527: LD_VAR 0 4
38531: ST_TO_ADDR
// exit ;
38532: POP
38533: POP
38534: GO 38540
// end ;
38536: GO 38501
38538: POP
38539: POP
// end ;
38540: LD_VAR 0 3
38544: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38545: LD_INT 0
38547: PPUSH
// vc_chassis := chassis ;
38548: LD_ADDR_OWVAR 37
38552: PUSH
38553: LD_VAR 0 1
38557: ST_TO_ADDR
// vc_engine := engine ;
38558: LD_ADDR_OWVAR 39
38562: PUSH
38563: LD_VAR 0 2
38567: ST_TO_ADDR
// vc_control := control ;
38568: LD_ADDR_OWVAR 38
38572: PUSH
38573: LD_VAR 0 3
38577: ST_TO_ADDR
// vc_weapon := weapon ;
38578: LD_ADDR_OWVAR 40
38582: PUSH
38583: LD_VAR 0 4
38587: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38588: LD_ADDR_OWVAR 41
38592: PUSH
38593: LD_VAR 0 5
38597: ST_TO_ADDR
// end ;
38598: LD_VAR 0 6
38602: RET
// export function WantPlant ( unit ) ; var task ; begin
38603: LD_INT 0
38605: PPUSH
38606: PPUSH
// result := false ;
38607: LD_ADDR_VAR 0 2
38611: PUSH
38612: LD_INT 0
38614: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38615: LD_ADDR_VAR 0 3
38619: PUSH
38620: LD_VAR 0 1
38624: PPUSH
38625: CALL_OW 437
38629: ST_TO_ADDR
// if task then
38630: LD_VAR 0 3
38634: IFFALSE 38662
// if task [ 1 ] [ 1 ] = p then
38636: LD_VAR 0 3
38640: PUSH
38641: LD_INT 1
38643: ARRAY
38644: PUSH
38645: LD_INT 1
38647: ARRAY
38648: PUSH
38649: LD_STRING p
38651: EQUAL
38652: IFFALSE 38662
// result := true ;
38654: LD_ADDR_VAR 0 2
38658: PUSH
38659: LD_INT 1
38661: ST_TO_ADDR
// end ;
38662: LD_VAR 0 2
38666: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38667: LD_INT 0
38669: PPUSH
38670: PPUSH
38671: PPUSH
38672: PPUSH
// if pos < 1 then
38673: LD_VAR 0 2
38677: PUSH
38678: LD_INT 1
38680: LESS
38681: IFFALSE 38685
// exit ;
38683: GO 38988
// if pos = 1 then
38685: LD_VAR 0 2
38689: PUSH
38690: LD_INT 1
38692: EQUAL
38693: IFFALSE 38726
// result := Replace ( arr , pos [ 1 ] , value ) else
38695: LD_ADDR_VAR 0 4
38699: PUSH
38700: LD_VAR 0 1
38704: PPUSH
38705: LD_VAR 0 2
38709: PUSH
38710: LD_INT 1
38712: ARRAY
38713: PPUSH
38714: LD_VAR 0 3
38718: PPUSH
38719: CALL_OW 1
38723: ST_TO_ADDR
38724: GO 38988
// begin tmp := arr ;
38726: LD_ADDR_VAR 0 6
38730: PUSH
38731: LD_VAR 0 1
38735: ST_TO_ADDR
// s_arr := [ tmp ] ;
38736: LD_ADDR_VAR 0 7
38740: PUSH
38741: LD_VAR 0 6
38745: PUSH
38746: EMPTY
38747: LIST
38748: ST_TO_ADDR
// for i = 1 to pos - 1 do
38749: LD_ADDR_VAR 0 5
38753: PUSH
38754: DOUBLE
38755: LD_INT 1
38757: DEC
38758: ST_TO_ADDR
38759: LD_VAR 0 2
38763: PUSH
38764: LD_INT 1
38766: MINUS
38767: PUSH
38768: FOR_TO
38769: IFFALSE 38814
// begin tmp := tmp [ pos [ i ] ] ;
38771: LD_ADDR_VAR 0 6
38775: PUSH
38776: LD_VAR 0 6
38780: PUSH
38781: LD_VAR 0 2
38785: PUSH
38786: LD_VAR 0 5
38790: ARRAY
38791: ARRAY
38792: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38793: LD_ADDR_VAR 0 7
38797: PUSH
38798: LD_VAR 0 7
38802: PUSH
38803: LD_VAR 0 6
38807: PUSH
38808: EMPTY
38809: LIST
38810: ADD
38811: ST_TO_ADDR
// end ;
38812: GO 38768
38814: POP
38815: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38816: LD_ADDR_VAR 0 6
38820: PUSH
38821: LD_VAR 0 6
38825: PPUSH
38826: LD_VAR 0 2
38830: PUSH
38831: LD_VAR 0 2
38835: ARRAY
38836: PPUSH
38837: LD_VAR 0 3
38841: PPUSH
38842: CALL_OW 1
38846: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38847: LD_ADDR_VAR 0 7
38851: PUSH
38852: LD_VAR 0 7
38856: PPUSH
38857: LD_VAR 0 7
38861: PPUSH
38862: LD_VAR 0 6
38866: PPUSH
38867: CALL_OW 1
38871: ST_TO_ADDR
// for i = s_arr downto 2 do
38872: LD_ADDR_VAR 0 5
38876: PUSH
38877: DOUBLE
38878: LD_VAR 0 7
38882: INC
38883: ST_TO_ADDR
38884: LD_INT 2
38886: PUSH
38887: FOR_DOWNTO
38888: IFFALSE 38972
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38890: LD_ADDR_VAR 0 6
38894: PUSH
38895: LD_VAR 0 7
38899: PUSH
38900: LD_VAR 0 5
38904: PUSH
38905: LD_INT 1
38907: MINUS
38908: ARRAY
38909: PPUSH
38910: LD_VAR 0 2
38914: PUSH
38915: LD_VAR 0 5
38919: PUSH
38920: LD_INT 1
38922: MINUS
38923: ARRAY
38924: PPUSH
38925: LD_VAR 0 7
38929: PUSH
38930: LD_VAR 0 5
38934: ARRAY
38935: PPUSH
38936: CALL_OW 1
38940: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38941: LD_ADDR_VAR 0 7
38945: PUSH
38946: LD_VAR 0 7
38950: PPUSH
38951: LD_VAR 0 5
38955: PUSH
38956: LD_INT 1
38958: MINUS
38959: PPUSH
38960: LD_VAR 0 6
38964: PPUSH
38965: CALL_OW 1
38969: ST_TO_ADDR
// end ;
38970: GO 38887
38972: POP
38973: POP
// result := s_arr [ 1 ] ;
38974: LD_ADDR_VAR 0 4
38978: PUSH
38979: LD_VAR 0 7
38983: PUSH
38984: LD_INT 1
38986: ARRAY
38987: ST_TO_ADDR
// end ; end ;
38988: LD_VAR 0 4
38992: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38993: LD_INT 0
38995: PPUSH
38996: PPUSH
// if not list then
38997: LD_VAR 0 1
39001: NOT
39002: IFFALSE 39006
// exit ;
39004: GO 39097
// i := list [ pos1 ] ;
39006: LD_ADDR_VAR 0 5
39010: PUSH
39011: LD_VAR 0 1
39015: PUSH
39016: LD_VAR 0 2
39020: ARRAY
39021: ST_TO_ADDR
// if not i then
39022: LD_VAR 0 5
39026: NOT
39027: IFFALSE 39031
// exit ;
39029: GO 39097
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39031: LD_ADDR_VAR 0 1
39035: PUSH
39036: LD_VAR 0 1
39040: PPUSH
39041: LD_VAR 0 2
39045: PPUSH
39046: LD_VAR 0 1
39050: PUSH
39051: LD_VAR 0 3
39055: ARRAY
39056: PPUSH
39057: CALL_OW 1
39061: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39062: LD_ADDR_VAR 0 1
39066: PUSH
39067: LD_VAR 0 1
39071: PPUSH
39072: LD_VAR 0 3
39076: PPUSH
39077: LD_VAR 0 5
39081: PPUSH
39082: CALL_OW 1
39086: ST_TO_ADDR
// result := list ;
39087: LD_ADDR_VAR 0 4
39091: PUSH
39092: LD_VAR 0 1
39096: ST_TO_ADDR
// end ;
39097: LD_VAR 0 4
39101: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39102: LD_INT 0
39104: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39105: LD_ADDR_VAR 0 5
39109: PUSH
39110: LD_VAR 0 1
39114: PPUSH
39115: CALL_OW 250
39119: PPUSH
39120: LD_VAR 0 1
39124: PPUSH
39125: CALL_OW 251
39129: PPUSH
39130: LD_VAR 0 2
39134: PPUSH
39135: LD_VAR 0 3
39139: PPUSH
39140: LD_VAR 0 4
39144: PPUSH
39145: CALL 39527 0 5
39149: ST_TO_ADDR
// end ;
39150: LD_VAR 0 5
39154: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
39155: LD_INT 0
39157: PPUSH
39158: PPUSH
39159: PPUSH
39160: PPUSH
// if not list or not unit then
39161: LD_VAR 0 2
39165: NOT
39166: IFTRUE 39175
39168: PUSH
39169: LD_VAR 0 1
39173: NOT
39174: OR
39175: IFFALSE 39179
// exit ;
39177: GO 39522
// result := [ ] ;
39179: LD_ADDR_VAR 0 5
39183: PUSH
39184: EMPTY
39185: ST_TO_ADDR
// for i in list do
39186: LD_ADDR_VAR 0 6
39190: PUSH
39191: LD_VAR 0 2
39195: PUSH
39196: FOR_IN
39197: IFFALSE 39415
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
39199: LD_ADDR_VAR 0 8
39203: PUSH
39204: LD_VAR 0 1
39208: PPUSH
39209: LD_VAR 0 6
39213: PUSH
39214: LD_INT 1
39216: ARRAY
39217: PPUSH
39218: LD_VAR 0 6
39222: PUSH
39223: LD_INT 2
39225: ARRAY
39226: PPUSH
39227: CALL_OW 297
39231: ST_TO_ADDR
// if not Count ( result ) then
39232: LD_VAR 0 5
39236: PPUSH
39237: CALL 35783 0 1
39241: NOT
39242: IFFALSE 39275
// begin result := Join ( result , [ i , tmp ] ) ;
39244: LD_ADDR_VAR 0 5
39248: PUSH
39249: LD_VAR 0 5
39253: PPUSH
39254: LD_VAR 0 6
39258: PUSH
39259: LD_VAR 0 8
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PPUSH
39268: CALL 71715 0 2
39272: ST_TO_ADDR
// continue ;
39273: GO 39196
// end ; if result [ result ] [ 2 ] <= tmp then
39275: LD_VAR 0 5
39279: PUSH
39280: LD_VAR 0 5
39284: ARRAY
39285: PUSH
39286: LD_INT 2
39288: ARRAY
39289: PUSH
39290: LD_VAR 0 8
39294: LESSEQUAL
39295: IFFALSE 39328
// result := Join ( result , [ i , tmp ] ) else
39297: LD_ADDR_VAR 0 5
39301: PUSH
39302: LD_VAR 0 5
39306: PPUSH
39307: LD_VAR 0 6
39311: PUSH
39312: LD_VAR 0 8
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PPUSH
39321: CALL 71715 0 2
39325: ST_TO_ADDR
39326: GO 39413
// begin for j := 1 to Count ( result ) do
39328: LD_ADDR_VAR 0 7
39332: PUSH
39333: DOUBLE
39334: LD_INT 1
39336: DEC
39337: ST_TO_ADDR
39338: LD_VAR 0 5
39342: PPUSH
39343: CALL 35783 0 1
39347: PUSH
39348: FOR_TO
39349: IFFALSE 39411
// begin if tmp < result [ j ] [ 2 ] then
39351: LD_VAR 0 8
39355: PUSH
39356: LD_VAR 0 5
39360: PUSH
39361: LD_VAR 0 7
39365: ARRAY
39366: PUSH
39367: LD_INT 2
39369: ARRAY
39370: LESS
39371: IFFALSE 39409
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39373: LD_ADDR_VAR 0 5
39377: PUSH
39378: LD_VAR 0 5
39382: PPUSH
39383: LD_VAR 0 7
39387: PPUSH
39388: LD_VAR 0 6
39392: PUSH
39393: LD_VAR 0 8
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PPUSH
39402: CALL_OW 2
39406: ST_TO_ADDR
// break ;
39407: GO 39411
// end ; end ;
39409: GO 39348
39411: POP
39412: POP
// end ; end ;
39413: GO 39196
39415: POP
39416: POP
// if result and not asc then
39417: LD_VAR 0 5
39421: IFFALSE 39430
39423: PUSH
39424: LD_VAR 0 3
39428: NOT
39429: AND
39430: IFFALSE 39447
// result := ReverseArray ( result ) ;
39432: LD_ADDR_VAR 0 5
39436: PUSH
39437: LD_VAR 0 5
39441: PPUSH
39442: CALL 66805 0 1
39446: ST_TO_ADDR
// tmp := [ ] ;
39447: LD_ADDR_VAR 0 8
39451: PUSH
39452: EMPTY
39453: ST_TO_ADDR
// if mode then
39454: LD_VAR 0 4
39458: IFFALSE 39522
// begin for i := 1 to result do
39460: LD_ADDR_VAR 0 6
39464: PUSH
39465: DOUBLE
39466: LD_INT 1
39468: DEC
39469: ST_TO_ADDR
39470: LD_VAR 0 5
39474: PUSH
39475: FOR_TO
39476: IFFALSE 39510
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
39478: LD_ADDR_VAR 0 8
39482: PUSH
39483: LD_VAR 0 8
39487: PPUSH
39488: LD_VAR 0 5
39492: PUSH
39493: LD_VAR 0 6
39497: ARRAY
39498: PUSH
39499: LD_INT 1
39501: ARRAY
39502: PPUSH
39503: CALL 71715 0 2
39507: ST_TO_ADDR
39508: GO 39475
39510: POP
39511: POP
// result := tmp ;
39512: LD_ADDR_VAR 0 5
39516: PUSH
39517: LD_VAR 0 8
39521: ST_TO_ADDR
// end ; end ;
39522: LD_VAR 0 5
39526: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39527: LD_INT 0
39529: PPUSH
39530: PPUSH
39531: PPUSH
39532: PPUSH
// if not list then
39533: LD_VAR 0 3
39537: NOT
39538: IFFALSE 39542
// exit ;
39540: GO 39932
// result := [ ] ;
39542: LD_ADDR_VAR 0 6
39546: PUSH
39547: EMPTY
39548: ST_TO_ADDR
// for i in list do
39549: LD_ADDR_VAR 0 7
39553: PUSH
39554: LD_VAR 0 3
39558: PUSH
39559: FOR_IN
39560: IFFALSE 39762
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39562: LD_ADDR_VAR 0 9
39566: PUSH
39567: LD_VAR 0 7
39571: PPUSH
39572: LD_VAR 0 1
39576: PPUSH
39577: LD_VAR 0 2
39581: PPUSH
39582: CALL_OW 297
39586: ST_TO_ADDR
// if not result then
39587: LD_VAR 0 6
39591: NOT
39592: IFFALSE 39618
// result := [ [ i , tmp ] ] else
39594: LD_ADDR_VAR 0 6
39598: PUSH
39599: LD_VAR 0 7
39603: PUSH
39604: LD_VAR 0 9
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: EMPTY
39614: LIST
39615: ST_TO_ADDR
39616: GO 39760
// begin if result [ result ] [ 2 ] <= tmp then
39618: LD_VAR 0 6
39622: PUSH
39623: LD_VAR 0 6
39627: ARRAY
39628: PUSH
39629: LD_INT 2
39631: ARRAY
39632: PUSH
39633: LD_VAR 0 9
39637: LESSEQUAL
39638: IFFALSE 39680
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39640: LD_ADDR_VAR 0 6
39644: PUSH
39645: LD_VAR 0 6
39649: PPUSH
39650: LD_VAR 0 6
39654: PUSH
39655: LD_INT 1
39657: PLUS
39658: PPUSH
39659: LD_VAR 0 7
39663: PUSH
39664: LD_VAR 0 9
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PPUSH
39673: CALL_OW 2
39677: ST_TO_ADDR
39678: GO 39760
// for j := 1 to result do
39680: LD_ADDR_VAR 0 8
39684: PUSH
39685: DOUBLE
39686: LD_INT 1
39688: DEC
39689: ST_TO_ADDR
39690: LD_VAR 0 6
39694: PUSH
39695: FOR_TO
39696: IFFALSE 39758
// begin if tmp < result [ j ] [ 2 ] then
39698: LD_VAR 0 9
39702: PUSH
39703: LD_VAR 0 6
39707: PUSH
39708: LD_VAR 0 8
39712: ARRAY
39713: PUSH
39714: LD_INT 2
39716: ARRAY
39717: LESS
39718: IFFALSE 39756
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39720: LD_ADDR_VAR 0 6
39724: PUSH
39725: LD_VAR 0 6
39729: PPUSH
39730: LD_VAR 0 8
39734: PPUSH
39735: LD_VAR 0 7
39739: PUSH
39740: LD_VAR 0 9
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PPUSH
39749: CALL_OW 2
39753: ST_TO_ADDR
// break ;
39754: GO 39758
// end ; end ;
39756: GO 39695
39758: POP
39759: POP
// end ; end ;
39760: GO 39559
39762: POP
39763: POP
// if result and not asc then
39764: LD_VAR 0 6
39768: IFFALSE 39777
39770: PUSH
39771: LD_VAR 0 4
39775: NOT
39776: AND
39777: IFFALSE 39852
// begin tmp := result ;
39779: LD_ADDR_VAR 0 9
39783: PUSH
39784: LD_VAR 0 6
39788: ST_TO_ADDR
// for i = tmp downto 1 do
39789: LD_ADDR_VAR 0 7
39793: PUSH
39794: DOUBLE
39795: LD_VAR 0 9
39799: INC
39800: ST_TO_ADDR
39801: LD_INT 1
39803: PUSH
39804: FOR_DOWNTO
39805: IFFALSE 39850
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39807: LD_ADDR_VAR 0 6
39811: PUSH
39812: LD_VAR 0 6
39816: PPUSH
39817: LD_VAR 0 9
39821: PUSH
39822: LD_VAR 0 7
39826: MINUS
39827: PUSH
39828: LD_INT 1
39830: PLUS
39831: PPUSH
39832: LD_VAR 0 9
39836: PUSH
39837: LD_VAR 0 7
39841: ARRAY
39842: PPUSH
39843: CALL_OW 1
39847: ST_TO_ADDR
39848: GO 39804
39850: POP
39851: POP
// end ; tmp := [ ] ;
39852: LD_ADDR_VAR 0 9
39856: PUSH
39857: EMPTY
39858: ST_TO_ADDR
// if mode then
39859: LD_VAR 0 5
39863: IFFALSE 39932
// begin for i = 1 to result do
39865: LD_ADDR_VAR 0 7
39869: PUSH
39870: DOUBLE
39871: LD_INT 1
39873: DEC
39874: ST_TO_ADDR
39875: LD_VAR 0 6
39879: PUSH
39880: FOR_TO
39881: IFFALSE 39920
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39883: LD_ADDR_VAR 0 9
39887: PUSH
39888: LD_VAR 0 9
39892: PPUSH
39893: LD_VAR 0 7
39897: PPUSH
39898: LD_VAR 0 6
39902: PUSH
39903: LD_VAR 0 7
39907: ARRAY
39908: PUSH
39909: LD_INT 1
39911: ARRAY
39912: PPUSH
39913: CALL_OW 1
39917: ST_TO_ADDR
39918: GO 39880
39920: POP
39921: POP
// result := tmp ;
39922: LD_ADDR_VAR 0 6
39926: PUSH
39927: LD_VAR 0 9
39931: ST_TO_ADDR
// end ; end ;
39932: LD_VAR 0 6
39936: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39937: LD_INT 0
39939: PPUSH
39940: PPUSH
39941: PPUSH
39942: PPUSH
39943: PPUSH
39944: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39945: LD_ADDR_VAR 0 5
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: LD_INT 0
39955: PUSH
39956: LD_INT 0
39958: PUSH
39959: EMPTY
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: ST_TO_ADDR
// if not x or not y then
39967: LD_VAR 0 2
39971: NOT
39972: IFTRUE 39981
39974: PUSH
39975: LD_VAR 0 3
39979: NOT
39980: OR
39981: IFFALSE 39985
// exit ;
39983: GO 41641
// if not range then
39985: LD_VAR 0 4
39989: NOT
39990: IFFALSE 40000
// range := 10 ;
39992: LD_ADDR_VAR 0 4
39996: PUSH
39997: LD_INT 10
39999: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40000: LD_ADDR_VAR 0 8
40004: PUSH
40005: LD_INT 81
40007: PUSH
40008: LD_VAR 0 1
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 92
40019: PUSH
40020: LD_VAR 0 2
40024: PUSH
40025: LD_VAR 0 3
40029: PUSH
40030: LD_VAR 0 4
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 3
40043: PUSH
40044: LD_INT 21
40046: PUSH
40047: LD_INT 3
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: LIST
40062: PPUSH
40063: CALL_OW 69
40067: ST_TO_ADDR
// if not tmp then
40068: LD_VAR 0 8
40072: NOT
40073: IFFALSE 40077
// exit ;
40075: GO 41641
// for i in tmp do
40077: LD_ADDR_VAR 0 6
40081: PUSH
40082: LD_VAR 0 8
40086: PUSH
40087: FOR_IN
40088: IFFALSE 41616
// begin points := [ 0 , 0 , 0 ] ;
40090: LD_ADDR_VAR 0 9
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: LD_INT 0
40100: PUSH
40101: LD_INT 0
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: LIST
40108: ST_TO_ADDR
// bpoints := 1 ;
40109: LD_ADDR_VAR 0 10
40113: PUSH
40114: LD_INT 1
40116: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40117: LD_VAR 0 6
40121: PPUSH
40122: CALL_OW 247
40126: PUSH
40127: LD_INT 1
40129: DOUBLE
40130: EQUAL
40131: IFTRUE 40135
40133: GO 40717
40135: POP
// begin if GetClass ( i ) = 1 then
40136: LD_VAR 0 6
40140: PPUSH
40141: CALL_OW 257
40145: PUSH
40146: LD_INT 1
40148: EQUAL
40149: IFFALSE 40170
// points := [ 10 , 5 , 3 ] ;
40151: LD_ADDR_VAR 0 9
40155: PUSH
40156: LD_INT 10
40158: PUSH
40159: LD_INT 5
40161: PUSH
40162: LD_INT 3
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: LIST
40169: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40170: LD_VAR 0 6
40174: PPUSH
40175: CALL_OW 257
40179: PUSH
40180: LD_INT 2
40182: PUSH
40183: LD_INT 3
40185: PUSH
40186: LD_INT 4
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: LIST
40193: IN
40194: IFFALSE 40215
// points := [ 3 , 2 , 1 ] ;
40196: LD_ADDR_VAR 0 9
40200: PUSH
40201: LD_INT 3
40203: PUSH
40204: LD_INT 2
40206: PUSH
40207: LD_INT 1
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: LIST
40214: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40215: LD_VAR 0 6
40219: PPUSH
40220: CALL_OW 257
40224: PUSH
40225: LD_INT 5
40227: EQUAL
40228: IFFALSE 40249
// points := [ 130 , 5 , 2 ] ;
40230: LD_ADDR_VAR 0 9
40234: PUSH
40235: LD_INT 130
40237: PUSH
40238: LD_INT 5
40240: PUSH
40241: LD_INT 2
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: LIST
40248: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40249: LD_VAR 0 6
40253: PPUSH
40254: CALL_OW 257
40258: PUSH
40259: LD_INT 8
40261: EQUAL
40262: IFFALSE 40283
// points := [ 35 , 35 , 30 ] ;
40264: LD_ADDR_VAR 0 9
40268: PUSH
40269: LD_INT 35
40271: PUSH
40272: LD_INT 35
40274: PUSH
40275: LD_INT 30
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: LIST
40282: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40283: LD_VAR 0 6
40287: PPUSH
40288: CALL_OW 257
40292: PUSH
40293: LD_INT 9
40295: EQUAL
40296: IFFALSE 40317
// points := [ 20 , 55 , 40 ] ;
40298: LD_ADDR_VAR 0 9
40302: PUSH
40303: LD_INT 20
40305: PUSH
40306: LD_INT 55
40308: PUSH
40309: LD_INT 40
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: LIST
40316: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40317: LD_VAR 0 6
40321: PPUSH
40322: CALL_OW 257
40326: PUSH
40327: LD_INT 12
40329: PUSH
40330: LD_INT 16
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: IN
40337: IFFALSE 40358
// points := [ 5 , 3 , 2 ] ;
40339: LD_ADDR_VAR 0 9
40343: PUSH
40344: LD_INT 5
40346: PUSH
40347: LD_INT 3
40349: PUSH
40350: LD_INT 2
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: LIST
40357: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40358: LD_VAR 0 6
40362: PPUSH
40363: CALL_OW 257
40367: PUSH
40368: LD_INT 17
40370: EQUAL
40371: IFFALSE 40392
// points := [ 100 , 50 , 75 ] ;
40373: LD_ADDR_VAR 0 9
40377: PUSH
40378: LD_INT 100
40380: PUSH
40381: LD_INT 50
40383: PUSH
40384: LD_INT 75
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: LIST
40391: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40392: LD_VAR 0 6
40396: PPUSH
40397: CALL_OW 257
40401: PUSH
40402: LD_INT 15
40404: EQUAL
40405: IFFALSE 40426
// points := [ 10 , 5 , 3 ] ;
40407: LD_ADDR_VAR 0 9
40411: PUSH
40412: LD_INT 10
40414: PUSH
40415: LD_INT 5
40417: PUSH
40418: LD_INT 3
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: LIST
40425: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40426: LD_VAR 0 6
40430: PPUSH
40431: CALL_OW 257
40435: PUSH
40436: LD_INT 14
40438: EQUAL
40439: IFFALSE 40460
// points := [ 10 , 0 , 0 ] ;
40441: LD_ADDR_VAR 0 9
40445: PUSH
40446: LD_INT 10
40448: PUSH
40449: LD_INT 0
40451: PUSH
40452: LD_INT 0
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: LIST
40459: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40460: LD_VAR 0 6
40464: PPUSH
40465: CALL_OW 257
40469: PUSH
40470: LD_INT 11
40472: EQUAL
40473: IFFALSE 40494
// points := [ 30 , 10 , 5 ] ;
40475: LD_ADDR_VAR 0 9
40479: PUSH
40480: LD_INT 30
40482: PUSH
40483: LD_INT 10
40485: PUSH
40486: LD_INT 5
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: LIST
40493: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40494: LD_VAR 0 1
40498: PPUSH
40499: LD_INT 5
40501: PPUSH
40502: CALL_OW 321
40506: PUSH
40507: LD_INT 2
40509: EQUAL
40510: IFFALSE 40527
// bpoints := bpoints * 1.8 ;
40512: LD_ADDR_VAR 0 10
40516: PUSH
40517: LD_VAR 0 10
40521: PUSH
40522: LD_REAL  1.80000000000000E+0000
40525: MUL
40526: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40527: LD_VAR 0 6
40531: PPUSH
40532: CALL_OW 257
40536: PUSH
40537: LD_INT 1
40539: PUSH
40540: LD_INT 2
40542: PUSH
40543: LD_INT 3
40545: PUSH
40546: LD_INT 4
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: IN
40555: IFFALSE 40575
40557: PUSH
40558: LD_VAR 0 1
40562: PPUSH
40563: LD_INT 51
40565: PPUSH
40566: CALL_OW 321
40570: PUSH
40571: LD_INT 2
40573: EQUAL
40574: AND
40575: IFFALSE 40592
// bpoints := bpoints * 1.2 ;
40577: LD_ADDR_VAR 0 10
40581: PUSH
40582: LD_VAR 0 10
40586: PUSH
40587: LD_REAL  1.20000000000000E+0000
40590: MUL
40591: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40592: LD_VAR 0 6
40596: PPUSH
40597: CALL_OW 257
40601: PUSH
40602: LD_INT 5
40604: PUSH
40605: LD_INT 7
40607: PUSH
40608: LD_INT 9
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: LIST
40615: IN
40616: IFFALSE 40636
40618: PUSH
40619: LD_VAR 0 1
40623: PPUSH
40624: LD_INT 52
40626: PPUSH
40627: CALL_OW 321
40631: PUSH
40632: LD_INT 2
40634: EQUAL
40635: AND
40636: IFFALSE 40653
// bpoints := bpoints * 1.5 ;
40638: LD_ADDR_VAR 0 10
40642: PUSH
40643: LD_VAR 0 10
40647: PUSH
40648: LD_REAL  1.50000000000000E+0000
40651: MUL
40652: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40653: LD_VAR 0 1
40657: PPUSH
40658: LD_INT 66
40660: PPUSH
40661: CALL_OW 321
40665: PUSH
40666: LD_INT 2
40668: EQUAL
40669: IFFALSE 40686
// bpoints := bpoints * 1.1 ;
40671: LD_ADDR_VAR 0 10
40675: PUSH
40676: LD_VAR 0 10
40680: PUSH
40681: LD_REAL  1.10000000000000E+0000
40684: MUL
40685: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40686: LD_ADDR_VAR 0 10
40690: PUSH
40691: LD_VAR 0 10
40695: PUSH
40696: LD_VAR 0 6
40700: PPUSH
40701: LD_INT 1
40703: PPUSH
40704: CALL_OW 259
40708: PUSH
40709: LD_REAL  1.15000000000000E+0000
40712: MUL
40713: MUL
40714: ST_TO_ADDR
// end ; unit_vehicle :
40715: GO 41545
40717: LD_INT 2
40719: DOUBLE
40720: EQUAL
40721: IFTRUE 40725
40723: GO 41533
40725: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40726: LD_VAR 0 6
40730: PPUSH
40731: CALL_OW 264
40735: PUSH
40736: LD_INT 2
40738: PUSH
40739: LD_INT 42
40741: PUSH
40742: LD_INT 24
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: LIST
40749: IN
40750: IFFALSE 40771
// points := [ 25 , 5 , 3 ] ;
40752: LD_ADDR_VAR 0 9
40756: PUSH
40757: LD_INT 25
40759: PUSH
40760: LD_INT 5
40762: PUSH
40763: LD_INT 3
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: LIST
40770: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40771: LD_VAR 0 6
40775: PPUSH
40776: CALL_OW 264
40780: PUSH
40781: LD_INT 4
40783: PUSH
40784: LD_INT 43
40786: PUSH
40787: LD_INT 25
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: LIST
40794: IN
40795: IFFALSE 40816
// points := [ 40 , 15 , 5 ] ;
40797: LD_ADDR_VAR 0 9
40801: PUSH
40802: LD_INT 40
40804: PUSH
40805: LD_INT 15
40807: PUSH
40808: LD_INT 5
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: LIST
40815: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40816: LD_VAR 0 6
40820: PPUSH
40821: CALL_OW 264
40825: PUSH
40826: LD_INT 3
40828: PUSH
40829: LD_INT 23
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: IN
40836: IFFALSE 40857
// points := [ 7 , 25 , 8 ] ;
40838: LD_ADDR_VAR 0 9
40842: PUSH
40843: LD_INT 7
40845: PUSH
40846: LD_INT 25
40848: PUSH
40849: LD_INT 8
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: LIST
40856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40857: LD_VAR 0 6
40861: PPUSH
40862: CALL_OW 264
40866: PUSH
40867: LD_INT 5
40869: PUSH
40870: LD_INT 27
40872: PUSH
40873: LD_INT 44
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: LIST
40880: IN
40881: IFFALSE 40902
// points := [ 14 , 50 , 16 ] ;
40883: LD_ADDR_VAR 0 9
40887: PUSH
40888: LD_INT 14
40890: PUSH
40891: LD_INT 50
40893: PUSH
40894: LD_INT 16
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: LIST
40901: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40902: LD_VAR 0 6
40906: PPUSH
40907: CALL_OW 264
40911: PUSH
40912: LD_INT 6
40914: PUSH
40915: LD_INT 46
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: IN
40922: IFFALSE 40943
// points := [ 32 , 120 , 70 ] ;
40924: LD_ADDR_VAR 0 9
40928: PUSH
40929: LD_INT 32
40931: PUSH
40932: LD_INT 120
40934: PUSH
40935: LD_INT 70
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: LIST
40942: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40943: LD_VAR 0 6
40947: PPUSH
40948: CALL_OW 264
40952: PUSH
40953: LD_INT 7
40955: PUSH
40956: LD_INT 28
40958: PUSH
40959: LD_INT 45
40961: PUSH
40962: LD_INT 92
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: IN
40971: IFFALSE 40992
// points := [ 35 , 20 , 45 ] ;
40973: LD_ADDR_VAR 0 9
40977: PUSH
40978: LD_INT 35
40980: PUSH
40981: LD_INT 20
40983: PUSH
40984: LD_INT 45
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: LIST
40991: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40992: LD_VAR 0 6
40996: PPUSH
40997: CALL_OW 264
41001: PUSH
41002: LD_INT 47
41004: PUSH
41005: EMPTY
41006: LIST
41007: IN
41008: IFFALSE 41029
// points := [ 67 , 45 , 75 ] ;
41010: LD_ADDR_VAR 0 9
41014: PUSH
41015: LD_INT 67
41017: PUSH
41018: LD_INT 45
41020: PUSH
41021: LD_INT 75
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: LIST
41028: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41029: LD_VAR 0 6
41033: PPUSH
41034: CALL_OW 264
41038: PUSH
41039: LD_INT 26
41041: PUSH
41042: EMPTY
41043: LIST
41044: IN
41045: IFFALSE 41066
// points := [ 120 , 30 , 80 ] ;
41047: LD_ADDR_VAR 0 9
41051: PUSH
41052: LD_INT 120
41054: PUSH
41055: LD_INT 30
41057: PUSH
41058: LD_INT 80
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: LIST
41065: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41066: LD_VAR 0 6
41070: PPUSH
41071: CALL_OW 264
41075: PUSH
41076: LD_INT 22
41078: PUSH
41079: EMPTY
41080: LIST
41081: IN
41082: IFFALSE 41103
// points := [ 40 , 1 , 1 ] ;
41084: LD_ADDR_VAR 0 9
41088: PUSH
41089: LD_INT 40
41091: PUSH
41092: LD_INT 1
41094: PUSH
41095: LD_INT 1
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: LIST
41102: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41103: LD_VAR 0 6
41107: PPUSH
41108: CALL_OW 264
41112: PUSH
41113: LD_INT 29
41115: PUSH
41116: EMPTY
41117: LIST
41118: IN
41119: IFFALSE 41140
// points := [ 70 , 200 , 400 ] ;
41121: LD_ADDR_VAR 0 9
41125: PUSH
41126: LD_INT 70
41128: PUSH
41129: LD_INT 200
41131: PUSH
41132: LD_INT 400
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: LIST
41139: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41140: LD_VAR 0 6
41144: PPUSH
41145: CALL_OW 264
41149: PUSH
41150: LD_INT 14
41152: PUSH
41153: LD_INT 53
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: IN
41160: IFFALSE 41181
// points := [ 40 , 10 , 20 ] ;
41162: LD_ADDR_VAR 0 9
41166: PUSH
41167: LD_INT 40
41169: PUSH
41170: LD_INT 10
41172: PUSH
41173: LD_INT 20
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: LIST
41180: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41181: LD_VAR 0 6
41185: PPUSH
41186: CALL_OW 264
41190: PUSH
41191: LD_INT 9
41193: PUSH
41194: EMPTY
41195: LIST
41196: IN
41197: IFFALSE 41218
// points := [ 5 , 70 , 20 ] ;
41199: LD_ADDR_VAR 0 9
41203: PUSH
41204: LD_INT 5
41206: PUSH
41207: LD_INT 70
41209: PUSH
41210: LD_INT 20
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: LIST
41217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41218: LD_VAR 0 6
41222: PPUSH
41223: CALL_OW 264
41227: PUSH
41228: LD_INT 10
41230: PUSH
41231: EMPTY
41232: LIST
41233: IN
41234: IFFALSE 41255
// points := [ 35 , 110 , 70 ] ;
41236: LD_ADDR_VAR 0 9
41240: PUSH
41241: LD_INT 35
41243: PUSH
41244: LD_INT 110
41246: PUSH
41247: LD_INT 70
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: LIST
41254: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41255: LD_VAR 0 6
41259: PPUSH
41260: CALL_OW 265
41264: PUSH
41265: LD_INT 25
41267: EQUAL
41268: IFFALSE 41289
// points := [ 80 , 65 , 100 ] ;
41270: LD_ADDR_VAR 0 9
41274: PUSH
41275: LD_INT 80
41277: PUSH
41278: LD_INT 65
41280: PUSH
41281: LD_INT 100
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: LIST
41288: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41289: LD_VAR 0 6
41293: PPUSH
41294: CALL_OW 263
41298: PUSH
41299: LD_INT 1
41301: EQUAL
41302: IFFALSE 41337
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41304: LD_ADDR_VAR 0 10
41308: PUSH
41309: LD_VAR 0 10
41313: PUSH
41314: LD_VAR 0 6
41318: PPUSH
41319: CALL_OW 311
41323: PPUSH
41324: LD_INT 3
41326: PPUSH
41327: CALL_OW 259
41331: PUSH
41332: LD_INT 4
41334: MUL
41335: MUL
41336: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41337: LD_VAR 0 6
41341: PPUSH
41342: CALL_OW 263
41346: PUSH
41347: LD_INT 2
41349: EQUAL
41350: IFFALSE 41401
// begin j := IsControledBy ( i ) ;
41352: LD_ADDR_VAR 0 7
41356: PUSH
41357: LD_VAR 0 6
41361: PPUSH
41362: CALL_OW 312
41366: ST_TO_ADDR
// if j then
41367: LD_VAR 0 7
41371: IFFALSE 41401
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41373: LD_ADDR_VAR 0 10
41377: PUSH
41378: LD_VAR 0 10
41382: PUSH
41383: LD_VAR 0 7
41387: PPUSH
41388: LD_INT 3
41390: PPUSH
41391: CALL_OW 259
41395: PUSH
41396: LD_INT 3
41398: MUL
41399: MUL
41400: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41401: LD_VAR 0 6
41405: PPUSH
41406: CALL_OW 264
41410: PUSH
41411: LD_INT 5
41413: PUSH
41414: LD_INT 6
41416: PUSH
41417: LD_INT 46
41419: PUSH
41420: LD_INT 44
41422: PUSH
41423: LD_INT 47
41425: PUSH
41426: LD_INT 45
41428: PUSH
41429: LD_INT 28
41431: PUSH
41432: LD_INT 7
41434: PUSH
41435: LD_INT 27
41437: PUSH
41438: LD_INT 29
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: IN
41453: IFFALSE 41473
41455: PUSH
41456: LD_VAR 0 1
41460: PPUSH
41461: LD_INT 52
41463: PPUSH
41464: CALL_OW 321
41468: PUSH
41469: LD_INT 2
41471: EQUAL
41472: AND
41473: IFFALSE 41490
// bpoints := bpoints * 1.2 ;
41475: LD_ADDR_VAR 0 10
41479: PUSH
41480: LD_VAR 0 10
41484: PUSH
41485: LD_REAL  1.20000000000000E+0000
41488: MUL
41489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41490: LD_VAR 0 6
41494: PPUSH
41495: CALL_OW 264
41499: PUSH
41500: LD_INT 6
41502: PUSH
41503: LD_INT 46
41505: PUSH
41506: LD_INT 47
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: LIST
41513: IN
41514: IFFALSE 41531
// bpoints := bpoints * 1.2 ;
41516: LD_ADDR_VAR 0 10
41520: PUSH
41521: LD_VAR 0 10
41525: PUSH
41526: LD_REAL  1.20000000000000E+0000
41529: MUL
41530: ST_TO_ADDR
// end ; unit_building :
41531: GO 41545
41533: LD_INT 3
41535: DOUBLE
41536: EQUAL
41537: IFTRUE 41541
41539: GO 41544
41541: POP
// ; end ;
41542: GO 41545
41544: POP
// for j = 1 to 3 do
41545: LD_ADDR_VAR 0 7
41549: PUSH
41550: DOUBLE
41551: LD_INT 1
41553: DEC
41554: ST_TO_ADDR
41555: LD_INT 3
41557: PUSH
41558: FOR_TO
41559: IFFALSE 41612
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41561: LD_ADDR_VAR 0 5
41565: PUSH
41566: LD_VAR 0 5
41570: PPUSH
41571: LD_VAR 0 7
41575: PPUSH
41576: LD_VAR 0 5
41580: PUSH
41581: LD_VAR 0 7
41585: ARRAY
41586: PUSH
41587: LD_VAR 0 9
41591: PUSH
41592: LD_VAR 0 7
41596: ARRAY
41597: PUSH
41598: LD_VAR 0 10
41602: MUL
41603: PLUS
41604: PPUSH
41605: CALL_OW 1
41609: ST_TO_ADDR
41610: GO 41558
41612: POP
41613: POP
// end ;
41614: GO 40087
41616: POP
41617: POP
// result := Replace ( result , 4 , tmp ) ;
41618: LD_ADDR_VAR 0 5
41622: PUSH
41623: LD_VAR 0 5
41627: PPUSH
41628: LD_INT 4
41630: PPUSH
41631: LD_VAR 0 8
41635: PPUSH
41636: CALL_OW 1
41640: ST_TO_ADDR
// end ;
41641: LD_VAR 0 5
41645: RET
// export function DangerAtRange ( unit , range ) ; begin
41646: LD_INT 0
41648: PPUSH
// if not unit then
41649: LD_VAR 0 1
41653: NOT
41654: IFFALSE 41658
// exit ;
41656: GO 41703
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41658: LD_ADDR_VAR 0 3
41662: PUSH
41663: LD_VAR 0 1
41667: PPUSH
41668: CALL_OW 255
41672: PPUSH
41673: LD_VAR 0 1
41677: PPUSH
41678: CALL_OW 250
41682: PPUSH
41683: LD_VAR 0 1
41687: PPUSH
41688: CALL_OW 251
41692: PPUSH
41693: LD_VAR 0 2
41697: PPUSH
41698: CALL 39937 0 4
41702: ST_TO_ADDR
// end ;
41703: LD_VAR 0 3
41707: RET
// export function DangerInArea ( side , area ) ; begin
41708: LD_INT 0
41710: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41711: LD_ADDR_VAR 0 3
41715: PUSH
41716: LD_VAR 0 2
41720: PPUSH
41721: LD_INT 81
41723: PUSH
41724: LD_VAR 0 1
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PPUSH
41733: CALL_OW 70
41737: ST_TO_ADDR
// end ;
41738: LD_VAR 0 3
41742: RET
// export function IsExtension ( b ) ; begin
41743: LD_INT 0
41745: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41746: LD_ADDR_VAR 0 2
41750: PUSH
41751: LD_VAR 0 1
41755: PUSH
41756: LD_INT 23
41758: PUSH
41759: LD_INT 20
41761: PUSH
41762: LD_INT 22
41764: PUSH
41765: LD_INT 17
41767: PUSH
41768: LD_INT 24
41770: PUSH
41771: LD_INT 21
41773: PUSH
41774: LD_INT 19
41776: PUSH
41777: LD_INT 16
41779: PUSH
41780: LD_INT 25
41782: PUSH
41783: LD_INT 18
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: IN
41798: ST_TO_ADDR
// end ;
41799: LD_VAR 0 2
41803: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41804: LD_INT 0
41806: PPUSH
41807: PPUSH
41808: PPUSH
// result := [ ] ;
41809: LD_ADDR_VAR 0 4
41813: PUSH
41814: EMPTY
41815: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41816: LD_ADDR_VAR 0 5
41820: PUSH
41821: LD_VAR 0 2
41825: PPUSH
41826: LD_INT 21
41828: PUSH
41829: LD_INT 3
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PPUSH
41836: CALL_OW 70
41840: ST_TO_ADDR
// if not tmp then
41841: LD_VAR 0 5
41845: NOT
41846: IFFALSE 41850
// exit ;
41848: GO 41914
// if checkLink then
41850: LD_VAR 0 3
41854: IFFALSE 41904
// begin for i in tmp do
41856: LD_ADDR_VAR 0 6
41860: PUSH
41861: LD_VAR 0 5
41865: PUSH
41866: FOR_IN
41867: IFFALSE 41902
// if GetBase ( i ) <> base then
41869: LD_VAR 0 6
41873: PPUSH
41874: CALL_OW 274
41878: PUSH
41879: LD_VAR 0 1
41883: NONEQUAL
41884: IFFALSE 41900
// ComLinkToBase ( base , i ) ;
41886: LD_VAR 0 1
41890: PPUSH
41891: LD_VAR 0 6
41895: PPUSH
41896: CALL_OW 169
41900: GO 41866
41902: POP
41903: POP
// end ; result := tmp ;
41904: LD_ADDR_VAR 0 4
41908: PUSH
41909: LD_VAR 0 5
41913: ST_TO_ADDR
// end ;
41914: LD_VAR 0 4
41918: RET
// export function ComComplete ( units , b ) ; var i ; begin
41919: LD_INT 0
41921: PPUSH
41922: PPUSH
// if not units then
41923: LD_VAR 0 1
41927: NOT
41928: IFFALSE 41932
// exit ;
41930: GO 42022
// for i in units do
41932: LD_ADDR_VAR 0 4
41936: PUSH
41937: LD_VAR 0 1
41941: PUSH
41942: FOR_IN
41943: IFFALSE 42020
// if BuildingStatus ( b ) = bs_build then
41945: LD_VAR 0 2
41949: PPUSH
41950: CALL_OW 461
41954: PUSH
41955: LD_INT 1
41957: EQUAL
41958: IFFALSE 42018
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41960: LD_VAR 0 4
41964: PPUSH
41965: LD_STRING h
41967: PUSH
41968: LD_VAR 0 2
41972: PPUSH
41973: CALL_OW 250
41977: PUSH
41978: LD_VAR 0 2
41982: PPUSH
41983: CALL_OW 251
41987: PUSH
41988: LD_VAR 0 2
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: LD_INT 0
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: PUSH
42011: EMPTY
42012: LIST
42013: PPUSH
42014: CALL_OW 446
42018: GO 41942
42020: POP
42021: POP
// end ;
42022: LD_VAR 0 3
42026: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42027: LD_INT 0
42029: PPUSH
42030: PPUSH
42031: PPUSH
42032: PPUSH
42033: PPUSH
42034: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42035: LD_VAR 0 1
42039: NOT
42040: IFTRUE 42057
42042: PUSH
42043: LD_VAR 0 1
42047: PPUSH
42048: CALL_OW 263
42052: PUSH
42053: LD_INT 2
42055: NONEQUAL
42056: OR
42057: IFFALSE 42061
// exit ;
42059: GO 42377
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42061: LD_ADDR_VAR 0 6
42065: PUSH
42066: LD_INT 22
42068: PUSH
42069: LD_VAR 0 1
42073: PPUSH
42074: CALL_OW 255
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 2
42085: PUSH
42086: LD_INT 30
42088: PUSH
42089: LD_INT 36
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 34
42098: PUSH
42099: LD_INT 31
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: LIST
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PPUSH
42115: CALL_OW 69
42119: ST_TO_ADDR
// if not tmp then
42120: LD_VAR 0 6
42124: NOT
42125: IFFALSE 42129
// exit ;
42127: GO 42377
// result := [ ] ;
42129: LD_ADDR_VAR 0 2
42133: PUSH
42134: EMPTY
42135: ST_TO_ADDR
// for i in tmp do
42136: LD_ADDR_VAR 0 3
42140: PUSH
42141: LD_VAR 0 6
42145: PUSH
42146: FOR_IN
42147: IFFALSE 42218
// begin t := UnitsInside ( i ) ;
42149: LD_ADDR_VAR 0 4
42153: PUSH
42154: LD_VAR 0 3
42158: PPUSH
42159: CALL_OW 313
42163: ST_TO_ADDR
// if t then
42164: LD_VAR 0 4
42168: IFFALSE 42216
// for j in t do
42170: LD_ADDR_VAR 0 7
42174: PUSH
42175: LD_VAR 0 4
42179: PUSH
42180: FOR_IN
42181: IFFALSE 42214
// result := Replace ( result , result + 1 , j ) ;
42183: LD_ADDR_VAR 0 2
42187: PUSH
42188: LD_VAR 0 2
42192: PPUSH
42193: LD_VAR 0 2
42197: PUSH
42198: LD_INT 1
42200: PLUS
42201: PPUSH
42202: LD_VAR 0 7
42206: PPUSH
42207: CALL_OW 1
42211: ST_TO_ADDR
42212: GO 42180
42214: POP
42215: POP
// end ;
42216: GO 42146
42218: POP
42219: POP
// if not result then
42220: LD_VAR 0 2
42224: NOT
42225: IFFALSE 42229
// exit ;
42227: GO 42377
// mech := result [ 1 ] ;
42229: LD_ADDR_VAR 0 5
42233: PUSH
42234: LD_VAR 0 2
42238: PUSH
42239: LD_INT 1
42241: ARRAY
42242: ST_TO_ADDR
// if result > 1 then
42243: LD_VAR 0 2
42247: PUSH
42248: LD_INT 1
42250: GREATER
42251: IFFALSE 42363
// begin for i = 2 to result do
42253: LD_ADDR_VAR 0 3
42257: PUSH
42258: DOUBLE
42259: LD_INT 2
42261: DEC
42262: ST_TO_ADDR
42263: LD_VAR 0 2
42267: PUSH
42268: FOR_TO
42269: IFFALSE 42361
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42271: LD_ADDR_VAR 0 4
42275: PUSH
42276: LD_VAR 0 2
42280: PUSH
42281: LD_VAR 0 3
42285: ARRAY
42286: PPUSH
42287: LD_INT 3
42289: PPUSH
42290: CALL_OW 259
42294: PUSH
42295: LD_VAR 0 2
42299: PUSH
42300: LD_VAR 0 3
42304: ARRAY
42305: PPUSH
42306: CALL_OW 432
42310: MINUS
42311: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42312: LD_VAR 0 4
42316: PUSH
42317: LD_VAR 0 5
42321: PPUSH
42322: LD_INT 3
42324: PPUSH
42325: CALL_OW 259
42329: PUSH
42330: LD_VAR 0 5
42334: PPUSH
42335: CALL_OW 432
42339: MINUS
42340: GREATEREQUAL
42341: IFFALSE 42359
// mech := result [ i ] ;
42343: LD_ADDR_VAR 0 5
42347: PUSH
42348: LD_VAR 0 2
42352: PUSH
42353: LD_VAR 0 3
42357: ARRAY
42358: ST_TO_ADDR
// end ;
42359: GO 42268
42361: POP
42362: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42363: LD_VAR 0 1
42367: PPUSH
42368: LD_VAR 0 5
42372: PPUSH
42373: CALL_OW 135
// end ;
42377: LD_VAR 0 2
42381: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42382: LD_INT 0
42384: PPUSH
42385: PPUSH
42386: PPUSH
42387: PPUSH
42388: PPUSH
42389: PPUSH
42390: PPUSH
42391: PPUSH
42392: PPUSH
42393: PPUSH
42394: PPUSH
42395: PPUSH
42396: PPUSH
// result := [ ] ;
42397: LD_ADDR_VAR 0 7
42401: PUSH
42402: EMPTY
42403: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42404: LD_VAR 0 1
42408: PPUSH
42409: CALL_OW 266
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: LD_INT 1
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: IN
42424: NOT
42425: IFFALSE 42429
// exit ;
42427: GO 44069
// if name then
42429: LD_VAR 0 3
42433: IFFALSE 42449
// SetBName ( base_dep , name ) ;
42435: LD_VAR 0 1
42439: PPUSH
42440: LD_VAR 0 3
42444: PPUSH
42445: CALL_OW 500
// base := GetBase ( base_dep ) ;
42449: LD_ADDR_VAR 0 15
42453: PUSH
42454: LD_VAR 0 1
42458: PPUSH
42459: CALL_OW 274
42463: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42464: LD_ADDR_VAR 0 16
42468: PUSH
42469: LD_VAR 0 1
42473: PPUSH
42474: CALL_OW 255
42478: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42479: LD_ADDR_VAR 0 17
42483: PUSH
42484: LD_VAR 0 1
42488: PPUSH
42489: CALL_OW 248
42493: ST_TO_ADDR
// if sources then
42494: LD_VAR 0 5
42498: IFFALSE 42545
// for i = 1 to 3 do
42500: LD_ADDR_VAR 0 8
42504: PUSH
42505: DOUBLE
42506: LD_INT 1
42508: DEC
42509: ST_TO_ADDR
42510: LD_INT 3
42512: PUSH
42513: FOR_TO
42514: IFFALSE 42543
// AddResourceType ( base , i , sources [ i ] ) ;
42516: LD_VAR 0 15
42520: PPUSH
42521: LD_VAR 0 8
42525: PPUSH
42526: LD_VAR 0 5
42530: PUSH
42531: LD_VAR 0 8
42535: ARRAY
42536: PPUSH
42537: CALL_OW 276
42541: GO 42513
42543: POP
42544: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42545: LD_ADDR_VAR 0 18
42549: PUSH
42550: LD_VAR 0 15
42554: PPUSH
42555: LD_VAR 0 2
42559: PPUSH
42560: LD_INT 1
42562: PPUSH
42563: CALL 41804 0 3
42567: ST_TO_ADDR
// InitHc ;
42568: CALL_OW 19
// InitUc ;
42572: CALL_OW 18
// uc_side := side ;
42576: LD_ADDR_OWVAR 20
42580: PUSH
42581: LD_VAR 0 16
42585: ST_TO_ADDR
// uc_nation := nation ;
42586: LD_ADDR_OWVAR 21
42590: PUSH
42591: LD_VAR 0 17
42595: ST_TO_ADDR
// if buildings then
42596: LD_VAR 0 18
42600: IFFALSE 43928
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42602: LD_ADDR_VAR 0 19
42606: PUSH
42607: LD_VAR 0 18
42611: PPUSH
42612: LD_INT 2
42614: PUSH
42615: LD_INT 30
42617: PUSH
42618: LD_INT 29
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 30
42627: PUSH
42628: LD_INT 30
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: LIST
42639: PPUSH
42640: CALL_OW 72
42644: ST_TO_ADDR
// if tmp then
42645: LD_VAR 0 19
42649: IFFALSE 42697
// for i in tmp do
42651: LD_ADDR_VAR 0 8
42655: PUSH
42656: LD_VAR 0 19
42660: PUSH
42661: FOR_IN
42662: IFFALSE 42695
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42664: LD_VAR 0 8
42668: PPUSH
42669: CALL_OW 250
42673: PPUSH
42674: LD_VAR 0 8
42678: PPUSH
42679: CALL_OW 251
42683: PPUSH
42684: LD_VAR 0 16
42688: PPUSH
42689: CALL_OW 441
42693: GO 42661
42695: POP
42696: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42697: LD_VAR 0 18
42701: PPUSH
42702: LD_INT 2
42704: PUSH
42705: LD_INT 30
42707: PUSH
42708: LD_INT 32
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 30
42717: PUSH
42718: LD_INT 33
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: LIST
42729: PPUSH
42730: CALL_OW 72
42734: IFFALSE 42822
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42736: LD_ADDR_VAR 0 8
42740: PUSH
42741: LD_VAR 0 18
42745: PPUSH
42746: LD_INT 2
42748: PUSH
42749: LD_INT 30
42751: PUSH
42752: LD_INT 32
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 30
42761: PUSH
42762: LD_INT 33
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: LIST
42773: PPUSH
42774: CALL_OW 72
42778: PUSH
42779: FOR_IN
42780: IFFALSE 42820
// begin if not GetBWeapon ( i ) then
42782: LD_VAR 0 8
42786: PPUSH
42787: CALL_OW 269
42791: NOT
42792: IFFALSE 42818
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42794: LD_VAR 0 8
42798: PPUSH
42799: LD_VAR 0 8
42803: PPUSH
42804: LD_VAR 0 2
42808: PPUSH
42809: CALL 44074 0 2
42813: PPUSH
42814: CALL_OW 431
// end ;
42818: GO 42779
42820: POP
42821: POP
// end ; for i = 1 to personel do
42822: LD_ADDR_VAR 0 8
42826: PUSH
42827: DOUBLE
42828: LD_INT 1
42830: DEC
42831: ST_TO_ADDR
42832: LD_VAR 0 6
42836: PUSH
42837: FOR_TO
42838: IFFALSE 43908
// begin if i > 4 then
42840: LD_VAR 0 8
42844: PUSH
42845: LD_INT 4
42847: GREATER
42848: IFFALSE 42852
// break ;
42850: GO 43908
// case i of 1 :
42852: LD_VAR 0 8
42856: PUSH
42857: LD_INT 1
42859: DOUBLE
42860: EQUAL
42861: IFTRUE 42865
42863: GO 42945
42865: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42866: LD_ADDR_VAR 0 12
42870: PUSH
42871: LD_VAR 0 18
42875: PPUSH
42876: LD_INT 22
42878: PUSH
42879: LD_VAR 0 16
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 58
42890: PUSH
42891: EMPTY
42892: LIST
42893: PUSH
42894: LD_INT 2
42896: PUSH
42897: LD_INT 30
42899: PUSH
42900: LD_INT 32
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 30
42909: PUSH
42910: LD_INT 4
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 30
42919: PUSH
42920: LD_INT 5
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: LIST
42937: PPUSH
42938: CALL_OW 72
42942: ST_TO_ADDR
42943: GO 43167
42945: LD_INT 2
42947: DOUBLE
42948: EQUAL
42949: IFTRUE 42953
42951: GO 43015
42953: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42954: LD_ADDR_VAR 0 12
42958: PUSH
42959: LD_VAR 0 18
42963: PPUSH
42964: LD_INT 22
42966: PUSH
42967: LD_VAR 0 16
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 2
42978: PUSH
42979: LD_INT 30
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 30
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: LIST
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PPUSH
43008: CALL_OW 72
43012: ST_TO_ADDR
43013: GO 43167
43015: LD_INT 3
43017: DOUBLE
43018: EQUAL
43019: IFTRUE 43023
43021: GO 43085
43023: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43024: LD_ADDR_VAR 0 12
43028: PUSH
43029: LD_VAR 0 18
43033: PPUSH
43034: LD_INT 22
43036: PUSH
43037: LD_VAR 0 16
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 2
43048: PUSH
43049: LD_INT 30
43051: PUSH
43052: LD_INT 2
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 30
43061: PUSH
43062: LD_INT 3
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: LIST
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PPUSH
43078: CALL_OW 72
43082: ST_TO_ADDR
43083: GO 43167
43085: LD_INT 4
43087: DOUBLE
43088: EQUAL
43089: IFTRUE 43093
43091: GO 43166
43093: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43094: LD_ADDR_VAR 0 12
43098: PUSH
43099: LD_VAR 0 18
43103: PPUSH
43104: LD_INT 22
43106: PUSH
43107: LD_VAR 0 16
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 2
43118: PUSH
43119: LD_INT 30
43121: PUSH
43122: LD_INT 6
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 30
43131: PUSH
43132: LD_INT 7
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 30
43141: PUSH
43142: LD_INT 8
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PPUSH
43159: CALL_OW 72
43163: ST_TO_ADDR
43164: GO 43167
43166: POP
// if i = 1 then
43167: LD_VAR 0 8
43171: PUSH
43172: LD_INT 1
43174: EQUAL
43175: IFFALSE 43286
// begin tmp := [ ] ;
43177: LD_ADDR_VAR 0 19
43181: PUSH
43182: EMPTY
43183: ST_TO_ADDR
// for j in f do
43184: LD_ADDR_VAR 0 9
43188: PUSH
43189: LD_VAR 0 12
43193: PUSH
43194: FOR_IN
43195: IFFALSE 43268
// if GetBType ( j ) = b_bunker then
43197: LD_VAR 0 9
43201: PPUSH
43202: CALL_OW 266
43206: PUSH
43207: LD_INT 32
43209: EQUAL
43210: IFFALSE 43237
// tmp := Insert ( tmp , 1 , j ) else
43212: LD_ADDR_VAR 0 19
43216: PUSH
43217: LD_VAR 0 19
43221: PPUSH
43222: LD_INT 1
43224: PPUSH
43225: LD_VAR 0 9
43229: PPUSH
43230: CALL_OW 2
43234: ST_TO_ADDR
43235: GO 43266
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43237: LD_ADDR_VAR 0 19
43241: PUSH
43242: LD_VAR 0 19
43246: PPUSH
43247: LD_VAR 0 19
43251: PUSH
43252: LD_INT 1
43254: PLUS
43255: PPUSH
43256: LD_VAR 0 9
43260: PPUSH
43261: CALL_OW 2
43265: ST_TO_ADDR
43266: GO 43194
43268: POP
43269: POP
// if tmp then
43270: LD_VAR 0 19
43274: IFFALSE 43286
// f := tmp ;
43276: LD_ADDR_VAR 0 12
43280: PUSH
43281: LD_VAR 0 19
43285: ST_TO_ADDR
// end ; x := personel [ i ] ;
43286: LD_ADDR_VAR 0 13
43290: PUSH
43291: LD_VAR 0 6
43295: PUSH
43296: LD_VAR 0 8
43300: ARRAY
43301: ST_TO_ADDR
// if x = - 1 then
43302: LD_VAR 0 13
43306: PUSH
43307: LD_INT 1
43309: NEG
43310: EQUAL
43311: IFFALSE 43522
// begin for j in f do
43313: LD_ADDR_VAR 0 9
43317: PUSH
43318: LD_VAR 0 12
43322: PUSH
43323: FOR_IN
43324: IFFALSE 43518
// repeat InitHc ;
43326: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43330: LD_VAR 0 9
43334: PPUSH
43335: CALL_OW 266
43339: PUSH
43340: LD_INT 5
43342: EQUAL
43343: IFFALSE 43413
// begin if UnitsInside ( j ) < 3 then
43345: LD_VAR 0 9
43349: PPUSH
43350: CALL_OW 313
43354: PUSH
43355: LD_INT 3
43357: LESS
43358: IFFALSE 43394
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43360: LD_INT 0
43362: PPUSH
43363: LD_INT 5
43365: PUSH
43366: LD_INT 8
43368: PUSH
43369: LD_INT 9
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: LIST
43376: PUSH
43377: LD_VAR 0 17
43381: ARRAY
43382: PPUSH
43383: LD_VAR 0 4
43387: PPUSH
43388: CALL_OW 380
43392: GO 43411
// PrepareHuman ( false , i , skill ) ;
43394: LD_INT 0
43396: PPUSH
43397: LD_VAR 0 8
43401: PPUSH
43402: LD_VAR 0 4
43406: PPUSH
43407: CALL_OW 380
// end else
43411: GO 43430
// PrepareHuman ( false , i , skill ) ;
43413: LD_INT 0
43415: PPUSH
43416: LD_VAR 0 8
43420: PPUSH
43421: LD_VAR 0 4
43425: PPUSH
43426: CALL_OW 380
// un := CreateHuman ;
43430: LD_ADDR_VAR 0 14
43434: PUSH
43435: CALL_OW 44
43439: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43440: LD_ADDR_VAR 0 7
43444: PUSH
43445: LD_VAR 0 7
43449: PPUSH
43450: LD_INT 1
43452: PPUSH
43453: LD_VAR 0 14
43457: PPUSH
43458: CALL_OW 2
43462: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43463: LD_VAR 0 14
43467: PPUSH
43468: LD_VAR 0 9
43472: PPUSH
43473: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43477: LD_VAR 0 9
43481: PPUSH
43482: CALL_OW 313
43486: PUSH
43487: LD_INT 6
43489: EQUAL
43490: IFTRUE 43514
43492: PUSH
43493: LD_VAR 0 9
43497: PPUSH
43498: CALL_OW 266
43502: PUSH
43503: LD_INT 32
43505: PUSH
43506: LD_INT 31
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: IN
43513: OR
43514: IFFALSE 43326
43516: GO 43323
43518: POP
43519: POP
// end else
43520: GO 43906
// for j = 1 to x do
43522: LD_ADDR_VAR 0 9
43526: PUSH
43527: DOUBLE
43528: LD_INT 1
43530: DEC
43531: ST_TO_ADDR
43532: LD_VAR 0 13
43536: PUSH
43537: FOR_TO
43538: IFFALSE 43904
// begin InitHc ;
43540: CALL_OW 19
// if not f then
43544: LD_VAR 0 12
43548: NOT
43549: IFFALSE 43638
// begin PrepareHuman ( false , i , skill ) ;
43551: LD_INT 0
43553: PPUSH
43554: LD_VAR 0 8
43558: PPUSH
43559: LD_VAR 0 4
43563: PPUSH
43564: CALL_OW 380
// un := CreateHuman ;
43568: LD_ADDR_VAR 0 14
43572: PUSH
43573: CALL_OW 44
43577: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43578: LD_ADDR_VAR 0 7
43582: PUSH
43583: LD_VAR 0 7
43587: PPUSH
43588: LD_INT 1
43590: PPUSH
43591: LD_VAR 0 14
43595: PPUSH
43596: CALL_OW 2
43600: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43601: LD_VAR 0 14
43605: PPUSH
43606: LD_VAR 0 1
43610: PPUSH
43611: CALL_OW 250
43615: PPUSH
43616: LD_VAR 0 1
43620: PPUSH
43621: CALL_OW 251
43625: PPUSH
43626: LD_INT 10
43628: PPUSH
43629: LD_INT 0
43631: PPUSH
43632: CALL_OW 50
// continue ;
43636: GO 43537
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43638: LD_VAR 0 12
43642: PUSH
43643: LD_INT 1
43645: ARRAY
43646: PPUSH
43647: CALL_OW 313
43651: IFFALSE 43679
43653: PUSH
43654: LD_VAR 0 12
43658: PUSH
43659: LD_INT 1
43661: ARRAY
43662: PPUSH
43663: CALL_OW 266
43667: PUSH
43668: LD_INT 32
43670: PUSH
43671: LD_INT 31
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: IN
43678: AND
43679: IFTRUE 43700
43681: PUSH
43682: LD_VAR 0 12
43686: PUSH
43687: LD_INT 1
43689: ARRAY
43690: PPUSH
43691: CALL_OW 313
43695: PUSH
43696: LD_INT 6
43698: EQUAL
43699: OR
43700: IFFALSE 43720
// f := Delete ( f , 1 ) ;
43702: LD_ADDR_VAR 0 12
43706: PUSH
43707: LD_VAR 0 12
43711: PPUSH
43712: LD_INT 1
43714: PPUSH
43715: CALL_OW 3
43719: ST_TO_ADDR
// if not f then
43720: LD_VAR 0 12
43724: NOT
43725: IFFALSE 43743
// begin x := x + 2 ;
43727: LD_ADDR_VAR 0 13
43731: PUSH
43732: LD_VAR 0 13
43736: PUSH
43737: LD_INT 2
43739: PLUS
43740: ST_TO_ADDR
// continue ;
43741: GO 43537
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43743: LD_VAR 0 12
43747: PUSH
43748: LD_INT 1
43750: ARRAY
43751: PPUSH
43752: CALL_OW 266
43756: PUSH
43757: LD_INT 5
43759: EQUAL
43760: IFFALSE 43834
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43762: LD_VAR 0 12
43766: PUSH
43767: LD_INT 1
43769: ARRAY
43770: PPUSH
43771: CALL_OW 313
43775: PUSH
43776: LD_INT 3
43778: LESS
43779: IFFALSE 43815
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43781: LD_INT 0
43783: PPUSH
43784: LD_INT 5
43786: PUSH
43787: LD_INT 8
43789: PUSH
43790: LD_INT 9
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: LIST
43797: PUSH
43798: LD_VAR 0 17
43802: ARRAY
43803: PPUSH
43804: LD_VAR 0 4
43808: PPUSH
43809: CALL_OW 380
43813: GO 43832
// PrepareHuman ( false , i , skill ) ;
43815: LD_INT 0
43817: PPUSH
43818: LD_VAR 0 8
43822: PPUSH
43823: LD_VAR 0 4
43827: PPUSH
43828: CALL_OW 380
// end else
43832: GO 43851
// PrepareHuman ( false , i , skill ) ;
43834: LD_INT 0
43836: PPUSH
43837: LD_VAR 0 8
43841: PPUSH
43842: LD_VAR 0 4
43846: PPUSH
43847: CALL_OW 380
// un := CreateHuman ;
43851: LD_ADDR_VAR 0 14
43855: PUSH
43856: CALL_OW 44
43860: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43861: LD_ADDR_VAR 0 7
43865: PUSH
43866: LD_VAR 0 7
43870: PPUSH
43871: LD_INT 1
43873: PPUSH
43874: LD_VAR 0 14
43878: PPUSH
43879: CALL_OW 2
43883: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43884: LD_VAR 0 14
43888: PPUSH
43889: LD_VAR 0 12
43893: PUSH
43894: LD_INT 1
43896: ARRAY
43897: PPUSH
43898: CALL_OW 52
// end ;
43902: GO 43537
43904: POP
43905: POP
// end ;
43906: GO 42837
43908: POP
43909: POP
// result := result ^ buildings ;
43910: LD_ADDR_VAR 0 7
43914: PUSH
43915: LD_VAR 0 7
43919: PUSH
43920: LD_VAR 0 18
43924: ADD
43925: ST_TO_ADDR
// end else
43926: GO 44069
// begin for i = 1 to personel do
43928: LD_ADDR_VAR 0 8
43932: PUSH
43933: DOUBLE
43934: LD_INT 1
43936: DEC
43937: ST_TO_ADDR
43938: LD_VAR 0 6
43942: PUSH
43943: FOR_TO
43944: IFFALSE 44067
// begin if i > 4 then
43946: LD_VAR 0 8
43950: PUSH
43951: LD_INT 4
43953: GREATER
43954: IFFALSE 43958
// break ;
43956: GO 44067
// x := personel [ i ] ;
43958: LD_ADDR_VAR 0 13
43962: PUSH
43963: LD_VAR 0 6
43967: PUSH
43968: LD_VAR 0 8
43972: ARRAY
43973: ST_TO_ADDR
// if x = - 1 then
43974: LD_VAR 0 13
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: EQUAL
43983: IFFALSE 43987
// continue ;
43985: GO 43943
// PrepareHuman ( false , i , skill ) ;
43987: LD_INT 0
43989: PPUSH
43990: LD_VAR 0 8
43994: PPUSH
43995: LD_VAR 0 4
43999: PPUSH
44000: CALL_OW 380
// un := CreateHuman ;
44004: LD_ADDR_VAR 0 14
44008: PUSH
44009: CALL_OW 44
44013: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44014: LD_VAR 0 14
44018: PPUSH
44019: LD_VAR 0 1
44023: PPUSH
44024: CALL_OW 250
44028: PPUSH
44029: LD_VAR 0 1
44033: PPUSH
44034: CALL_OW 251
44038: PPUSH
44039: LD_INT 10
44041: PPUSH
44042: LD_INT 0
44044: PPUSH
44045: CALL_OW 50
// result := result ^ un ;
44049: LD_ADDR_VAR 0 7
44053: PUSH
44054: LD_VAR 0 7
44058: PUSH
44059: LD_VAR 0 14
44063: ADD
44064: ST_TO_ADDR
// end ;
44065: GO 43943
44067: POP
44068: POP
// end ; end ;
44069: LD_VAR 0 7
44073: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44074: LD_INT 0
44076: PPUSH
44077: PPUSH
44078: PPUSH
44079: PPUSH
44080: PPUSH
44081: PPUSH
44082: PPUSH
44083: PPUSH
44084: PPUSH
44085: PPUSH
44086: PPUSH
44087: PPUSH
44088: PPUSH
44089: PPUSH
44090: PPUSH
44091: PPUSH
// result := false ;
44092: LD_ADDR_VAR 0 3
44096: PUSH
44097: LD_INT 0
44099: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44100: LD_VAR 0 1
44104: NOT
44105: IFTRUE 44130
44107: PUSH
44108: LD_VAR 0 1
44112: PPUSH
44113: CALL_OW 266
44117: PUSH
44118: LD_INT 32
44120: PUSH
44121: LD_INT 33
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: IN
44128: NOT
44129: OR
44130: IFFALSE 44134
// exit ;
44132: GO 45269
// nat := GetNation ( tower ) ;
44134: LD_ADDR_VAR 0 12
44138: PUSH
44139: LD_VAR 0 1
44143: PPUSH
44144: CALL_OW 248
44148: ST_TO_ADDR
// side := GetSide ( tower ) ;
44149: LD_ADDR_VAR 0 16
44153: PUSH
44154: LD_VAR 0 1
44158: PPUSH
44159: CALL_OW 255
44163: ST_TO_ADDR
// x := GetX ( tower ) ;
44164: LD_ADDR_VAR 0 10
44168: PUSH
44169: LD_VAR 0 1
44173: PPUSH
44174: CALL_OW 250
44178: ST_TO_ADDR
// y := GetY ( tower ) ;
44179: LD_ADDR_VAR 0 11
44183: PUSH
44184: LD_VAR 0 1
44188: PPUSH
44189: CALL_OW 251
44193: ST_TO_ADDR
// if not x or not y then
44194: LD_VAR 0 10
44198: NOT
44199: IFTRUE 44208
44201: PUSH
44202: LD_VAR 0 11
44206: NOT
44207: OR
44208: IFFALSE 44212
// exit ;
44210: GO 45269
// weapon := 0 ;
44212: LD_ADDR_VAR 0 18
44216: PUSH
44217: LD_INT 0
44219: ST_TO_ADDR
// fac_list := [ ] ;
44220: LD_ADDR_VAR 0 17
44224: PUSH
44225: EMPTY
44226: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44227: LD_ADDR_VAR 0 6
44231: PUSH
44232: LD_VAR 0 1
44236: PPUSH
44237: CALL_OW 274
44241: PPUSH
44242: LD_VAR 0 2
44246: PPUSH
44247: LD_INT 0
44249: PPUSH
44250: CALL 41804 0 3
44254: PPUSH
44255: LD_INT 30
44257: PUSH
44258: LD_INT 3
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PPUSH
44265: CALL_OW 72
44269: ST_TO_ADDR
// if not factories then
44270: LD_VAR 0 6
44274: NOT
44275: IFFALSE 44279
// exit ;
44277: GO 45269
// for i in factories do
44279: LD_ADDR_VAR 0 8
44283: PUSH
44284: LD_VAR 0 6
44288: PUSH
44289: FOR_IN
44290: IFFALSE 44315
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44292: LD_ADDR_VAR 0 17
44296: PUSH
44297: LD_VAR 0 17
44301: PUSH
44302: LD_VAR 0 8
44306: PPUSH
44307: CALL_OW 478
44311: UNION
44312: ST_TO_ADDR
44313: GO 44289
44315: POP
44316: POP
// if not fac_list then
44317: LD_VAR 0 17
44321: NOT
44322: IFFALSE 44326
// exit ;
44324: GO 45269
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44326: LD_ADDR_VAR 0 5
44330: PUSH
44331: LD_INT 4
44333: PUSH
44334: LD_INT 5
44336: PUSH
44337: LD_INT 9
44339: PUSH
44340: LD_INT 10
44342: PUSH
44343: LD_INT 6
44345: PUSH
44346: LD_INT 7
44348: PUSH
44349: LD_INT 11
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 27
44363: PUSH
44364: LD_INT 28
44366: PUSH
44367: LD_INT 26
44369: PUSH
44370: LD_INT 30
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 43
44381: PUSH
44382: LD_INT 44
44384: PUSH
44385: LD_INT 46
44387: PUSH
44388: LD_INT 45
44390: PUSH
44391: LD_INT 47
44393: PUSH
44394: LD_INT 49
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: LIST
44409: PUSH
44410: LD_VAR 0 12
44414: ARRAY
44415: ST_TO_ADDR
// list := list isect fac_list ;
44416: LD_ADDR_VAR 0 5
44420: PUSH
44421: LD_VAR 0 5
44425: PUSH
44426: LD_VAR 0 17
44430: ISECT
44431: ST_TO_ADDR
// if not list then
44432: LD_VAR 0 5
44436: NOT
44437: IFFALSE 44441
// exit ;
44439: GO 45269
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44441: LD_VAR 0 12
44445: PUSH
44446: LD_INT 3
44448: EQUAL
44449: IFFALSE 44461
44451: PUSH
44452: LD_INT 49
44454: PUSH
44455: LD_VAR 0 5
44459: IN
44460: AND
44461: IFFALSE 44481
44463: PUSH
44464: LD_INT 31
44466: PPUSH
44467: LD_VAR 0 16
44471: PPUSH
44472: CALL_OW 321
44476: PUSH
44477: LD_INT 2
44479: EQUAL
44480: AND
44481: IFFALSE 44541
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44483: LD_INT 22
44485: PUSH
44486: LD_VAR 0 16
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 35
44497: PUSH
44498: LD_INT 49
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 91
44507: PUSH
44508: LD_VAR 0 1
44512: PUSH
44513: LD_INT 10
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: LIST
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: LIST
44525: PPUSH
44526: CALL_OW 69
44530: NOT
44531: IFFALSE 44541
// weapon := ru_time_lapser ;
44533: LD_ADDR_VAR 0 18
44537: PUSH
44538: LD_INT 49
44540: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44541: LD_VAR 0 12
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: LD_INT 2
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: IN
44556: IFFALSE 44580
44558: PUSH
44559: LD_INT 11
44561: PUSH
44562: LD_VAR 0 5
44566: IN
44567: IFTRUE 44579
44569: PUSH
44570: LD_INT 30
44572: PUSH
44573: LD_VAR 0 5
44577: IN
44578: OR
44579: AND
44580: IFFALSE 44600
44582: PUSH
44583: LD_INT 6
44585: PPUSH
44586: LD_VAR 0 16
44590: PPUSH
44591: CALL_OW 321
44595: PUSH
44596: LD_INT 2
44598: EQUAL
44599: AND
44600: IFFALSE 44767
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44602: LD_INT 22
44604: PUSH
44605: LD_VAR 0 16
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 2
44616: PUSH
44617: LD_INT 35
44619: PUSH
44620: LD_INT 11
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 35
44629: PUSH
44630: LD_INT 30
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 91
44644: PUSH
44645: LD_VAR 0 1
44649: PUSH
44650: LD_INT 18
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: LIST
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: LIST
44662: PPUSH
44663: CALL_OW 69
44667: NOT
44668: IFFALSE 44744
44670: PUSH
44671: LD_INT 22
44673: PUSH
44674: LD_VAR 0 16
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 2
44685: PUSH
44686: LD_INT 30
44688: PUSH
44689: LD_INT 32
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 30
44698: PUSH
44699: LD_INT 33
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 91
44713: PUSH
44714: LD_VAR 0 1
44718: PUSH
44719: LD_INT 12
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: LIST
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: LIST
44731: PUSH
44732: EMPTY
44733: LIST
44734: PPUSH
44735: CALL_OW 69
44739: PUSH
44740: LD_INT 2
44742: GREATER
44743: AND
44744: IFFALSE 44767
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44746: LD_ADDR_VAR 0 18
44750: PUSH
44751: LD_INT 11
44753: PUSH
44754: LD_INT 30
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_VAR 0 12
44765: ARRAY
44766: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44767: LD_VAR 0 18
44771: NOT
44772: IFFALSE 44792
44774: PUSH
44775: LD_INT 40
44777: PPUSH
44778: LD_VAR 0 16
44782: PPUSH
44783: CALL_OW 321
44787: PUSH
44788: LD_INT 2
44790: EQUAL
44791: AND
44792: IFFALSE 44828
44794: PUSH
44795: LD_INT 7
44797: PUSH
44798: LD_VAR 0 5
44802: IN
44803: IFTRUE 44815
44805: PUSH
44806: LD_INT 28
44808: PUSH
44809: LD_VAR 0 5
44813: IN
44814: OR
44815: IFTRUE 44827
44817: PUSH
44818: LD_INT 45
44820: PUSH
44821: LD_VAR 0 5
44825: IN
44826: OR
44827: AND
44828: IFFALSE 45082
// begin hex := GetHexInfo ( x , y ) ;
44830: LD_ADDR_VAR 0 4
44834: PUSH
44835: LD_VAR 0 10
44839: PPUSH
44840: LD_VAR 0 11
44844: PPUSH
44845: CALL_OW 546
44849: ST_TO_ADDR
// if hex [ 1 ] then
44850: LD_VAR 0 4
44854: PUSH
44855: LD_INT 1
44857: ARRAY
44858: IFFALSE 44862
// exit ;
44860: GO 45269
// height := hex [ 2 ] ;
44862: LD_ADDR_VAR 0 15
44866: PUSH
44867: LD_VAR 0 4
44871: PUSH
44872: LD_INT 2
44874: ARRAY
44875: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44876: LD_ADDR_VAR 0 14
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: LD_INT 2
44886: PUSH
44887: LD_INT 3
44889: PUSH
44890: LD_INT 5
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: ST_TO_ADDR
// for i in tmp do
44899: LD_ADDR_VAR 0 8
44903: PUSH
44904: LD_VAR 0 14
44908: PUSH
44909: FOR_IN
44910: IFFALSE 45080
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44912: LD_ADDR_VAR 0 9
44916: PUSH
44917: LD_VAR 0 10
44921: PPUSH
44922: LD_VAR 0 8
44926: PPUSH
44927: LD_INT 5
44929: PPUSH
44930: CALL_OW 272
44934: PUSH
44935: LD_VAR 0 11
44939: PPUSH
44940: LD_VAR 0 8
44944: PPUSH
44945: LD_INT 5
44947: PPUSH
44948: CALL_OW 273
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44957: LD_VAR 0 9
44961: PUSH
44962: LD_INT 1
44964: ARRAY
44965: PPUSH
44966: LD_VAR 0 9
44970: PUSH
44971: LD_INT 2
44973: ARRAY
44974: PPUSH
44975: CALL_OW 488
44979: IFFALSE 45078
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44981: LD_ADDR_VAR 0 4
44985: PUSH
44986: LD_VAR 0 9
44990: PUSH
44991: LD_INT 1
44993: ARRAY
44994: PPUSH
44995: LD_VAR 0 9
44999: PUSH
45000: LD_INT 2
45002: ARRAY
45003: PPUSH
45004: CALL_OW 546
45008: ST_TO_ADDR
// if hex [ 1 ] then
45009: LD_VAR 0 4
45013: PUSH
45014: LD_INT 1
45016: ARRAY
45017: IFFALSE 45021
// continue ;
45019: GO 44909
// h := hex [ 2 ] ;
45021: LD_ADDR_VAR 0 13
45025: PUSH
45026: LD_VAR 0 4
45030: PUSH
45031: LD_INT 2
45033: ARRAY
45034: ST_TO_ADDR
// if h + 7 < height then
45035: LD_VAR 0 13
45039: PUSH
45040: LD_INT 7
45042: PLUS
45043: PUSH
45044: LD_VAR 0 15
45048: LESS
45049: IFFALSE 45078
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45051: LD_ADDR_VAR 0 18
45055: PUSH
45056: LD_INT 7
45058: PUSH
45059: LD_INT 28
45061: PUSH
45062: LD_INT 45
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: LIST
45069: PUSH
45070: LD_VAR 0 12
45074: ARRAY
45075: ST_TO_ADDR
// break ;
45076: GO 45080
// end ; end ; end ;
45078: GO 44909
45080: POP
45081: POP
// end ; if not weapon then
45082: LD_VAR 0 18
45086: NOT
45087: IFFALSE 45147
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45089: LD_ADDR_VAR 0 5
45093: PUSH
45094: LD_VAR 0 5
45098: PUSH
45099: LD_INT 11
45101: PUSH
45102: LD_INT 30
45104: PUSH
45105: LD_INT 49
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: LIST
45112: DIFF
45113: ST_TO_ADDR
// if not list then
45114: LD_VAR 0 5
45118: NOT
45119: IFFALSE 45123
// exit ;
45121: GO 45269
// weapon := list [ rand ( 1 , list ) ] ;
45123: LD_ADDR_VAR 0 18
45127: PUSH
45128: LD_VAR 0 5
45132: PUSH
45133: LD_INT 1
45135: PPUSH
45136: LD_VAR 0 5
45140: PPUSH
45141: CALL_OW 12
45145: ARRAY
45146: ST_TO_ADDR
// end ; if weapon then
45147: LD_VAR 0 18
45151: IFFALSE 45269
// begin tmp := CostOfWeapon ( weapon ) ;
45153: LD_ADDR_VAR 0 14
45157: PUSH
45158: LD_VAR 0 18
45162: PPUSH
45163: CALL_OW 451
45167: ST_TO_ADDR
// j := GetBase ( tower ) ;
45168: LD_ADDR_VAR 0 9
45172: PUSH
45173: LD_VAR 0 1
45177: PPUSH
45178: CALL_OW 274
45182: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45183: LD_VAR 0 9
45187: PPUSH
45188: LD_INT 1
45190: PPUSH
45191: CALL_OW 275
45195: PUSH
45196: LD_VAR 0 14
45200: PUSH
45201: LD_INT 1
45203: ARRAY
45204: GREATEREQUAL
45205: IFFALSE 45231
45207: PUSH
45208: LD_VAR 0 9
45212: PPUSH
45213: LD_INT 2
45215: PPUSH
45216: CALL_OW 275
45220: PUSH
45221: LD_VAR 0 14
45225: PUSH
45226: LD_INT 2
45228: ARRAY
45229: GREATEREQUAL
45230: AND
45231: IFFALSE 45257
45233: PUSH
45234: LD_VAR 0 9
45238: PPUSH
45239: LD_INT 3
45241: PPUSH
45242: CALL_OW 275
45246: PUSH
45247: LD_VAR 0 14
45251: PUSH
45252: LD_INT 3
45254: ARRAY
45255: GREATEREQUAL
45256: AND
45257: IFFALSE 45269
// result := weapon ;
45259: LD_ADDR_VAR 0 3
45263: PUSH
45264: LD_VAR 0 18
45268: ST_TO_ADDR
// end ; end ;
45269: LD_VAR 0 3
45273: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45274: LD_INT 0
45276: PPUSH
45277: PPUSH
// result := true ;
45278: LD_ADDR_VAR 0 3
45282: PUSH
45283: LD_INT 1
45285: ST_TO_ADDR
// if array1 = array2 then
45286: LD_VAR 0 1
45290: PUSH
45291: LD_VAR 0 2
45295: EQUAL
45296: IFFALSE 45356
// begin for i = 1 to array1 do
45298: LD_ADDR_VAR 0 4
45302: PUSH
45303: DOUBLE
45304: LD_INT 1
45306: DEC
45307: ST_TO_ADDR
45308: LD_VAR 0 1
45312: PUSH
45313: FOR_TO
45314: IFFALSE 45352
// if array1 [ i ] <> array2 [ i ] then
45316: LD_VAR 0 1
45320: PUSH
45321: LD_VAR 0 4
45325: ARRAY
45326: PUSH
45327: LD_VAR 0 2
45331: PUSH
45332: LD_VAR 0 4
45336: ARRAY
45337: NONEQUAL
45338: IFFALSE 45350
// begin result := false ;
45340: LD_ADDR_VAR 0 3
45344: PUSH
45345: LD_INT 0
45347: ST_TO_ADDR
// break ;
45348: GO 45352
// end ;
45350: GO 45313
45352: POP
45353: POP
// end else
45354: GO 45364
// result := false ;
45356: LD_ADDR_VAR 0 3
45360: PUSH
45361: LD_INT 0
45363: ST_TO_ADDR
// end ;
45364: LD_VAR 0 3
45368: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45369: LD_INT 0
45371: PPUSH
45372: PPUSH
// if not array1 or not array2 then
45373: LD_VAR 0 1
45377: NOT
45378: IFTRUE 45387
45380: PUSH
45381: LD_VAR 0 2
45385: NOT
45386: OR
45387: IFFALSE 45391
// exit ;
45389: GO 45455
// result := true ;
45391: LD_ADDR_VAR 0 3
45395: PUSH
45396: LD_INT 1
45398: ST_TO_ADDR
// for i = 1 to array1 do
45399: LD_ADDR_VAR 0 4
45403: PUSH
45404: DOUBLE
45405: LD_INT 1
45407: DEC
45408: ST_TO_ADDR
45409: LD_VAR 0 1
45413: PUSH
45414: FOR_TO
45415: IFFALSE 45453
// if array1 [ i ] <> array2 [ i ] then
45417: LD_VAR 0 1
45421: PUSH
45422: LD_VAR 0 4
45426: ARRAY
45427: PUSH
45428: LD_VAR 0 2
45432: PUSH
45433: LD_VAR 0 4
45437: ARRAY
45438: NONEQUAL
45439: IFFALSE 45451
// begin result := false ;
45441: LD_ADDR_VAR 0 3
45445: PUSH
45446: LD_INT 0
45448: ST_TO_ADDR
// break ;
45449: GO 45453
// end ;
45451: GO 45414
45453: POP
45454: POP
// end ;
45455: LD_VAR 0 3
45459: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45460: LD_INT 0
45462: PPUSH
45463: PPUSH
45464: PPUSH
// pom := GetBase ( fac ) ;
45465: LD_ADDR_VAR 0 5
45469: PUSH
45470: LD_VAR 0 1
45474: PPUSH
45475: CALL_OW 274
45479: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45480: LD_ADDR_VAR 0 4
45484: PUSH
45485: LD_VAR 0 2
45489: PUSH
45490: LD_INT 1
45492: ARRAY
45493: PPUSH
45494: LD_VAR 0 2
45498: PUSH
45499: LD_INT 2
45501: ARRAY
45502: PPUSH
45503: LD_VAR 0 2
45507: PUSH
45508: LD_INT 3
45510: ARRAY
45511: PPUSH
45512: LD_VAR 0 2
45516: PUSH
45517: LD_INT 4
45519: ARRAY
45520: PPUSH
45521: CALL_OW 449
45525: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45526: LD_ADDR_VAR 0 3
45530: PUSH
45531: LD_VAR 0 5
45535: PPUSH
45536: LD_INT 1
45538: PPUSH
45539: CALL_OW 275
45543: PUSH
45544: LD_VAR 0 4
45548: PUSH
45549: LD_INT 1
45551: ARRAY
45552: GREATEREQUAL
45553: IFFALSE 45579
45555: PUSH
45556: LD_VAR 0 5
45560: PPUSH
45561: LD_INT 2
45563: PPUSH
45564: CALL_OW 275
45568: PUSH
45569: LD_VAR 0 4
45573: PUSH
45574: LD_INT 2
45576: ARRAY
45577: GREATEREQUAL
45578: AND
45579: IFFALSE 45605
45581: PUSH
45582: LD_VAR 0 5
45586: PPUSH
45587: LD_INT 3
45589: PPUSH
45590: CALL_OW 275
45594: PUSH
45595: LD_VAR 0 4
45599: PUSH
45600: LD_INT 3
45602: ARRAY
45603: GREATEREQUAL
45604: AND
45605: ST_TO_ADDR
// end ;
45606: LD_VAR 0 3
45610: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45611: LD_INT 0
45613: PPUSH
45614: PPUSH
45615: PPUSH
45616: PPUSH
// pom := GetBase ( building ) ;
45617: LD_ADDR_VAR 0 3
45621: PUSH
45622: LD_VAR 0 1
45626: PPUSH
45627: CALL_OW 274
45631: ST_TO_ADDR
// if not pom then
45632: LD_VAR 0 3
45636: NOT
45637: IFFALSE 45641
// exit ;
45639: GO 45815
// btype := GetBType ( building ) ;
45641: LD_ADDR_VAR 0 5
45645: PUSH
45646: LD_VAR 0 1
45650: PPUSH
45651: CALL_OW 266
45655: ST_TO_ADDR
// if btype = b_armoury then
45656: LD_VAR 0 5
45660: PUSH
45661: LD_INT 4
45663: EQUAL
45664: IFFALSE 45674
// btype := b_barracks ;
45666: LD_ADDR_VAR 0 5
45670: PUSH
45671: LD_INT 5
45673: ST_TO_ADDR
// if btype = b_depot then
45674: LD_VAR 0 5
45678: PUSH
45679: LD_INT 0
45681: EQUAL
45682: IFFALSE 45692
// btype := b_warehouse ;
45684: LD_ADDR_VAR 0 5
45688: PUSH
45689: LD_INT 1
45691: ST_TO_ADDR
// if btype = b_workshop then
45692: LD_VAR 0 5
45696: PUSH
45697: LD_INT 2
45699: EQUAL
45700: IFFALSE 45710
// btype := b_factory ;
45702: LD_ADDR_VAR 0 5
45706: PUSH
45707: LD_INT 3
45709: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45710: LD_ADDR_VAR 0 4
45714: PUSH
45715: LD_VAR 0 5
45719: PPUSH
45720: LD_VAR 0 1
45724: PPUSH
45725: CALL_OW 248
45729: PPUSH
45730: CALL_OW 450
45734: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45735: LD_ADDR_VAR 0 2
45739: PUSH
45740: LD_VAR 0 3
45744: PPUSH
45745: LD_INT 1
45747: PPUSH
45748: CALL_OW 275
45752: PUSH
45753: LD_VAR 0 4
45757: PUSH
45758: LD_INT 1
45760: ARRAY
45761: GREATEREQUAL
45762: IFFALSE 45788
45764: PUSH
45765: LD_VAR 0 3
45769: PPUSH
45770: LD_INT 2
45772: PPUSH
45773: CALL_OW 275
45777: PUSH
45778: LD_VAR 0 4
45782: PUSH
45783: LD_INT 2
45785: ARRAY
45786: GREATEREQUAL
45787: AND
45788: IFFALSE 45814
45790: PUSH
45791: LD_VAR 0 3
45795: PPUSH
45796: LD_INT 3
45798: PPUSH
45799: CALL_OW 275
45803: PUSH
45804: LD_VAR 0 4
45808: PUSH
45809: LD_INT 3
45811: ARRAY
45812: GREATEREQUAL
45813: AND
45814: ST_TO_ADDR
// end ;
45815: LD_VAR 0 2
45819: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45820: LD_INT 0
45822: PPUSH
45823: PPUSH
45824: PPUSH
// pom := GetBase ( building ) ;
45825: LD_ADDR_VAR 0 4
45829: PUSH
45830: LD_VAR 0 1
45834: PPUSH
45835: CALL_OW 274
45839: ST_TO_ADDR
// if not pom then
45840: LD_VAR 0 4
45844: NOT
45845: IFFALSE 45849
// exit ;
45847: GO 45954
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45849: LD_ADDR_VAR 0 5
45853: PUSH
45854: LD_VAR 0 2
45858: PPUSH
45859: LD_VAR 0 1
45863: PPUSH
45864: CALL_OW 248
45868: PPUSH
45869: CALL_OW 450
45873: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45874: LD_ADDR_VAR 0 3
45878: PUSH
45879: LD_VAR 0 4
45883: PPUSH
45884: LD_INT 1
45886: PPUSH
45887: CALL_OW 275
45891: PUSH
45892: LD_VAR 0 5
45896: PUSH
45897: LD_INT 1
45899: ARRAY
45900: GREATEREQUAL
45901: IFFALSE 45927
45903: PUSH
45904: LD_VAR 0 4
45908: PPUSH
45909: LD_INT 2
45911: PPUSH
45912: CALL_OW 275
45916: PUSH
45917: LD_VAR 0 5
45921: PUSH
45922: LD_INT 2
45924: ARRAY
45925: GREATEREQUAL
45926: AND
45927: IFFALSE 45953
45929: PUSH
45930: LD_VAR 0 4
45934: PPUSH
45935: LD_INT 3
45937: PPUSH
45938: CALL_OW 275
45942: PUSH
45943: LD_VAR 0 5
45947: PUSH
45948: LD_INT 3
45950: ARRAY
45951: GREATEREQUAL
45952: AND
45953: ST_TO_ADDR
// end ;
45954: LD_VAR 0 3
45958: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45959: LD_INT 0
45961: PPUSH
45962: PPUSH
45963: PPUSH
45964: PPUSH
45965: PPUSH
45966: PPUSH
45967: PPUSH
45968: PPUSH
45969: PPUSH
45970: PPUSH
45971: PPUSH
// result := false ;
45972: LD_ADDR_VAR 0 8
45976: PUSH
45977: LD_INT 0
45979: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45980: LD_VAR 0 5
45984: NOT
45985: IFTRUE 45994
45987: PUSH
45988: LD_VAR 0 1
45992: NOT
45993: OR
45994: IFTRUE 46003
45996: PUSH
45997: LD_VAR 0 2
46001: NOT
46002: OR
46003: IFTRUE 46012
46005: PUSH
46006: LD_VAR 0 3
46010: NOT
46011: OR
46012: IFFALSE 46016
// exit ;
46014: GO 46842
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46016: LD_ADDR_VAR 0 14
46020: PUSH
46021: LD_VAR 0 1
46025: PPUSH
46026: LD_VAR 0 2
46030: PPUSH
46031: LD_VAR 0 3
46035: PPUSH
46036: LD_VAR 0 4
46040: PPUSH
46041: LD_VAR 0 5
46045: PUSH
46046: LD_INT 1
46048: ARRAY
46049: PPUSH
46050: CALL_OW 248
46054: PPUSH
46055: LD_INT 0
46057: PPUSH
46058: CALL 48123 0 6
46062: ST_TO_ADDR
// if not hexes then
46063: LD_VAR 0 14
46067: NOT
46068: IFFALSE 46072
// exit ;
46070: GO 46842
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46072: LD_ADDR_VAR 0 17
46076: PUSH
46077: LD_VAR 0 5
46081: PPUSH
46082: LD_INT 22
46084: PUSH
46085: LD_VAR 0 13
46089: PPUSH
46090: CALL_OW 255
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: LD_INT 30
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 30
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: LIST
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PPUSH
46131: CALL_OW 72
46135: ST_TO_ADDR
// for i = 1 to hexes do
46136: LD_ADDR_VAR 0 9
46140: PUSH
46141: DOUBLE
46142: LD_INT 1
46144: DEC
46145: ST_TO_ADDR
46146: LD_VAR 0 14
46150: PUSH
46151: FOR_TO
46152: IFFALSE 46840
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46154: LD_ADDR_VAR 0 13
46158: PUSH
46159: LD_VAR 0 14
46163: PUSH
46164: LD_VAR 0 9
46168: ARRAY
46169: PUSH
46170: LD_INT 1
46172: ARRAY
46173: PPUSH
46174: LD_VAR 0 14
46178: PUSH
46179: LD_VAR 0 9
46183: ARRAY
46184: PUSH
46185: LD_INT 2
46187: ARRAY
46188: PPUSH
46189: CALL_OW 428
46193: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46194: LD_VAR 0 14
46198: PUSH
46199: LD_VAR 0 9
46203: ARRAY
46204: PUSH
46205: LD_INT 1
46207: ARRAY
46208: PPUSH
46209: LD_VAR 0 14
46213: PUSH
46214: LD_VAR 0 9
46218: ARRAY
46219: PUSH
46220: LD_INT 2
46222: ARRAY
46223: PPUSH
46224: CALL_OW 351
46228: IFTRUE 46267
46230: PUSH
46231: LD_VAR 0 14
46235: PUSH
46236: LD_VAR 0 9
46240: ARRAY
46241: PUSH
46242: LD_INT 1
46244: ARRAY
46245: PPUSH
46246: LD_VAR 0 14
46250: PUSH
46251: LD_VAR 0 9
46255: ARRAY
46256: PUSH
46257: LD_INT 2
46259: ARRAY
46260: PPUSH
46261: CALL_OW 488
46265: NOT
46266: OR
46267: IFTRUE 46284
46269: PUSH
46270: LD_VAR 0 13
46274: PPUSH
46275: CALL_OW 247
46279: PUSH
46280: LD_INT 3
46282: EQUAL
46283: OR
46284: IFFALSE 46290
// exit ;
46286: POP
46287: POP
46288: GO 46842
// if not tmp then
46290: LD_VAR 0 13
46294: NOT
46295: IFFALSE 46299
// continue ;
46297: GO 46151
// result := true ;
46299: LD_ADDR_VAR 0 8
46303: PUSH
46304: LD_INT 1
46306: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46307: LD_VAR 0 6
46311: IFFALSE 46328
46313: PUSH
46314: LD_VAR 0 13
46318: PPUSH
46319: CALL_OW 247
46323: PUSH
46324: LD_INT 2
46326: EQUAL
46327: AND
46328: IFFALSE 46345
46330: PUSH
46331: LD_VAR 0 13
46335: PPUSH
46336: CALL_OW 263
46340: PUSH
46341: LD_INT 1
46343: EQUAL
46344: AND
46345: IFFALSE 46509
// begin if IsDrivenBy ( tmp ) then
46347: LD_VAR 0 13
46351: PPUSH
46352: CALL_OW 311
46356: IFFALSE 46360
// continue ;
46358: GO 46151
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46360: LD_VAR 0 6
46364: PPUSH
46365: LD_INT 3
46367: PUSH
46368: LD_INT 60
46370: PUSH
46371: EMPTY
46372: LIST
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 3
46380: PUSH
46381: LD_INT 55
46383: PUSH
46384: EMPTY
46385: LIST
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PPUSH
46395: CALL_OW 72
46399: IFFALSE 46507
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46401: LD_ADDR_VAR 0 18
46405: PUSH
46406: LD_VAR 0 6
46410: PPUSH
46411: LD_INT 3
46413: PUSH
46414: LD_INT 60
46416: PUSH
46417: EMPTY
46418: LIST
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 3
46426: PUSH
46427: LD_INT 55
46429: PUSH
46430: EMPTY
46431: LIST
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PPUSH
46441: CALL_OW 72
46445: PUSH
46446: LD_INT 1
46448: ARRAY
46449: ST_TO_ADDR
// if IsInUnit ( driver ) then
46450: LD_VAR 0 18
46454: PPUSH
46455: CALL_OW 310
46459: IFFALSE 46470
// ComExit ( driver ) ;
46461: LD_VAR 0 18
46465: PPUSH
46466: CALL 72113 0 1
// AddComEnterUnit ( driver , tmp ) ;
46470: LD_VAR 0 18
46474: PPUSH
46475: LD_VAR 0 13
46479: PPUSH
46480: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46484: LD_VAR 0 18
46488: PPUSH
46489: LD_VAR 0 7
46493: PPUSH
46494: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46498: LD_VAR 0 18
46502: PPUSH
46503: CALL_OW 181
// end ; continue ;
46507: GO 46151
// end ; if not cleaners or not tmp in cleaners then
46509: LD_VAR 0 6
46513: NOT
46514: IFTRUE 46529
46516: PUSH
46517: LD_VAR 0 13
46521: PUSH
46522: LD_VAR 0 6
46526: IN
46527: NOT
46528: OR
46529: IFFALSE 46838
// begin if dep then
46531: LD_VAR 0 17
46535: IFFALSE 46671
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46537: LD_ADDR_VAR 0 16
46541: PUSH
46542: LD_VAR 0 17
46546: PUSH
46547: LD_INT 1
46549: ARRAY
46550: PPUSH
46551: CALL_OW 250
46555: PPUSH
46556: LD_VAR 0 17
46560: PUSH
46561: LD_INT 1
46563: ARRAY
46564: PPUSH
46565: CALL_OW 254
46569: PPUSH
46570: LD_INT 5
46572: PPUSH
46573: CALL_OW 272
46577: PUSH
46578: LD_VAR 0 17
46582: PUSH
46583: LD_INT 1
46585: ARRAY
46586: PPUSH
46587: CALL_OW 251
46591: PPUSH
46592: LD_VAR 0 17
46596: PUSH
46597: LD_INT 1
46599: ARRAY
46600: PPUSH
46601: CALL_OW 254
46605: PPUSH
46606: LD_INT 5
46608: PPUSH
46609: CALL_OW 273
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46618: LD_VAR 0 16
46622: PUSH
46623: LD_INT 1
46625: ARRAY
46626: PPUSH
46627: LD_VAR 0 16
46631: PUSH
46632: LD_INT 2
46634: ARRAY
46635: PPUSH
46636: CALL_OW 488
46640: IFFALSE 46671
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46642: LD_VAR 0 13
46646: PPUSH
46647: LD_VAR 0 16
46651: PUSH
46652: LD_INT 1
46654: ARRAY
46655: PPUSH
46656: LD_VAR 0 16
46660: PUSH
46661: LD_INT 2
46663: ARRAY
46664: PPUSH
46665: CALL_OW 111
// continue ;
46669: GO 46151
// end ; end ; r := GetDir ( tmp ) ;
46671: LD_ADDR_VAR 0 15
46675: PUSH
46676: LD_VAR 0 13
46680: PPUSH
46681: CALL_OW 254
46685: ST_TO_ADDR
// if r = 5 then
46686: LD_VAR 0 15
46690: PUSH
46691: LD_INT 5
46693: EQUAL
46694: IFFALSE 46704
// r := 0 ;
46696: LD_ADDR_VAR 0 15
46700: PUSH
46701: LD_INT 0
46703: ST_TO_ADDR
// for j = r to 5 do
46704: LD_ADDR_VAR 0 10
46708: PUSH
46709: DOUBLE
46710: LD_VAR 0 15
46714: DEC
46715: ST_TO_ADDR
46716: LD_INT 5
46718: PUSH
46719: FOR_TO
46720: IFFALSE 46836
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46722: LD_ADDR_VAR 0 11
46726: PUSH
46727: LD_VAR 0 13
46731: PPUSH
46732: CALL_OW 250
46736: PPUSH
46737: LD_VAR 0 10
46741: PPUSH
46742: LD_INT 2
46744: PPUSH
46745: CALL_OW 272
46749: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46750: LD_ADDR_VAR 0 12
46754: PUSH
46755: LD_VAR 0 13
46759: PPUSH
46760: CALL_OW 251
46764: PPUSH
46765: LD_VAR 0 10
46769: PPUSH
46770: LD_INT 2
46772: PPUSH
46773: CALL_OW 273
46777: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46778: LD_VAR 0 11
46782: PPUSH
46783: LD_VAR 0 12
46787: PPUSH
46788: CALL_OW 488
46792: IFFALSE 46811
46794: PUSH
46795: LD_VAR 0 11
46799: PPUSH
46800: LD_VAR 0 12
46804: PPUSH
46805: CALL_OW 428
46809: NOT
46810: AND
46811: IFFALSE 46834
// begin ComMoveXY ( tmp , _x , _y ) ;
46813: LD_VAR 0 13
46817: PPUSH
46818: LD_VAR 0 11
46822: PPUSH
46823: LD_VAR 0 12
46827: PPUSH
46828: CALL_OW 111
// break ;
46832: GO 46836
// end ; end ;
46834: GO 46719
46836: POP
46837: POP
// end ; end ;
46838: GO 46151
46840: POP
46841: POP
// end ;
46842: LD_VAR 0 8
46846: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46847: LD_INT 0
46849: PPUSH
// result := true ;
46850: LD_ADDR_VAR 0 3
46854: PUSH
46855: LD_INT 1
46857: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46858: LD_VAR 0 2
46862: PUSH
46863: LD_INT 24
46865: DOUBLE
46866: EQUAL
46867: IFTRUE 46877
46869: LD_INT 33
46871: DOUBLE
46872: EQUAL
46873: IFTRUE 46877
46875: GO 46902
46877: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46878: LD_ADDR_VAR 0 3
46882: PUSH
46883: LD_INT 32
46885: PPUSH
46886: LD_VAR 0 1
46890: PPUSH
46891: CALL_OW 321
46895: PUSH
46896: LD_INT 2
46898: EQUAL
46899: ST_TO_ADDR
46900: GO 47218
46902: LD_INT 20
46904: DOUBLE
46905: EQUAL
46906: IFTRUE 46910
46908: GO 46935
46910: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46911: LD_ADDR_VAR 0 3
46915: PUSH
46916: LD_INT 6
46918: PPUSH
46919: LD_VAR 0 1
46923: PPUSH
46924: CALL_OW 321
46928: PUSH
46929: LD_INT 2
46931: EQUAL
46932: ST_TO_ADDR
46933: GO 47218
46935: LD_INT 22
46937: DOUBLE
46938: EQUAL
46939: IFTRUE 46949
46941: LD_INT 36
46943: DOUBLE
46944: EQUAL
46945: IFTRUE 46949
46947: GO 46974
46949: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46950: LD_ADDR_VAR 0 3
46954: PUSH
46955: LD_INT 15
46957: PPUSH
46958: LD_VAR 0 1
46962: PPUSH
46963: CALL_OW 321
46967: PUSH
46968: LD_INT 2
46970: EQUAL
46971: ST_TO_ADDR
46972: GO 47218
46974: LD_INT 30
46976: DOUBLE
46977: EQUAL
46978: IFTRUE 46982
46980: GO 47007
46982: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46983: LD_ADDR_VAR 0 3
46987: PUSH
46988: LD_INT 20
46990: PPUSH
46991: LD_VAR 0 1
46995: PPUSH
46996: CALL_OW 321
47000: PUSH
47001: LD_INT 2
47003: EQUAL
47004: ST_TO_ADDR
47005: GO 47218
47007: LD_INT 28
47009: DOUBLE
47010: EQUAL
47011: IFTRUE 47021
47013: LD_INT 21
47015: DOUBLE
47016: EQUAL
47017: IFTRUE 47021
47019: GO 47046
47021: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47022: LD_ADDR_VAR 0 3
47026: PUSH
47027: LD_INT 21
47029: PPUSH
47030: LD_VAR 0 1
47034: PPUSH
47035: CALL_OW 321
47039: PUSH
47040: LD_INT 2
47042: EQUAL
47043: ST_TO_ADDR
47044: GO 47218
47046: LD_INT 16
47048: DOUBLE
47049: EQUAL
47050: IFTRUE 47054
47052: GO 47079
47054: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47055: LD_ADDR_VAR 0 3
47059: PUSH
47060: LD_INT 84
47062: PPUSH
47063: LD_VAR 0 1
47067: PPUSH
47068: CALL_OW 321
47072: PUSH
47073: LD_INT 2
47075: EQUAL
47076: ST_TO_ADDR
47077: GO 47218
47079: LD_INT 19
47081: DOUBLE
47082: EQUAL
47083: IFTRUE 47093
47085: LD_INT 23
47087: DOUBLE
47088: EQUAL
47089: IFTRUE 47093
47091: GO 47118
47093: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47094: LD_ADDR_VAR 0 3
47098: PUSH
47099: LD_INT 83
47101: PPUSH
47102: LD_VAR 0 1
47106: PPUSH
47107: CALL_OW 321
47111: PUSH
47112: LD_INT 2
47114: EQUAL
47115: ST_TO_ADDR
47116: GO 47218
47118: LD_INT 17
47120: DOUBLE
47121: EQUAL
47122: IFTRUE 47126
47124: GO 47151
47126: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47127: LD_ADDR_VAR 0 3
47131: PUSH
47132: LD_INT 39
47134: PPUSH
47135: LD_VAR 0 1
47139: PPUSH
47140: CALL_OW 321
47144: PUSH
47145: LD_INT 2
47147: EQUAL
47148: ST_TO_ADDR
47149: GO 47218
47151: LD_INT 18
47153: DOUBLE
47154: EQUAL
47155: IFTRUE 47159
47157: GO 47184
47159: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47160: LD_ADDR_VAR 0 3
47164: PUSH
47165: LD_INT 40
47167: PPUSH
47168: LD_VAR 0 1
47172: PPUSH
47173: CALL_OW 321
47177: PUSH
47178: LD_INT 2
47180: EQUAL
47181: ST_TO_ADDR
47182: GO 47218
47184: LD_INT 27
47186: DOUBLE
47187: EQUAL
47188: IFTRUE 47192
47190: GO 47217
47192: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47193: LD_ADDR_VAR 0 3
47197: PUSH
47198: LD_INT 35
47200: PPUSH
47201: LD_VAR 0 1
47205: PPUSH
47206: CALL_OW 321
47210: PUSH
47211: LD_INT 2
47213: EQUAL
47214: ST_TO_ADDR
47215: GO 47218
47217: POP
// end ;
47218: LD_VAR 0 3
47222: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47223: LD_INT 0
47225: PPUSH
47226: PPUSH
47227: PPUSH
47228: PPUSH
47229: PPUSH
47230: PPUSH
47231: PPUSH
47232: PPUSH
47233: PPUSH
47234: PPUSH
47235: PPUSH
// result := false ;
47236: LD_ADDR_VAR 0 6
47240: PUSH
47241: LD_INT 0
47243: ST_TO_ADDR
// if btype = b_depot then
47244: LD_VAR 0 2
47248: PUSH
47249: LD_INT 0
47251: EQUAL
47252: IFFALSE 47264
// begin result := true ;
47254: LD_ADDR_VAR 0 6
47258: PUSH
47259: LD_INT 1
47261: ST_TO_ADDR
// exit ;
47262: GO 48118
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47264: LD_VAR 0 1
47268: NOT
47269: IFTRUE 47294
47271: PUSH
47272: LD_VAR 0 1
47276: PPUSH
47277: CALL_OW 266
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: IN
47292: NOT
47293: OR
47294: IFTRUE 47303
47296: PUSH
47297: LD_VAR 0 2
47301: NOT
47302: OR
47303: IFTRUE 47339
47305: PUSH
47306: LD_VAR 0 5
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 2
47319: PUSH
47320: LD_INT 3
47322: PUSH
47323: LD_INT 4
47325: PUSH
47326: LD_INT 5
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: IN
47337: NOT
47338: OR
47339: IFTRUE 47358
47341: PUSH
47342: LD_VAR 0 3
47346: PPUSH
47347: LD_VAR 0 4
47351: PPUSH
47352: CALL_OW 488
47356: NOT
47357: OR
47358: IFFALSE 47362
// exit ;
47360: GO 48118
// side := GetSide ( depot ) ;
47362: LD_ADDR_VAR 0 9
47366: PUSH
47367: LD_VAR 0 1
47371: PPUSH
47372: CALL_OW 255
47376: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47377: LD_VAR 0 9
47381: PPUSH
47382: LD_VAR 0 2
47386: PPUSH
47387: CALL 46847 0 2
47391: NOT
47392: IFFALSE 47396
// exit ;
47394: GO 48118
// pom := GetBase ( depot ) ;
47396: LD_ADDR_VAR 0 10
47400: PUSH
47401: LD_VAR 0 1
47405: PPUSH
47406: CALL_OW 274
47410: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47411: LD_ADDR_VAR 0 11
47415: PUSH
47416: LD_VAR 0 2
47420: PPUSH
47421: LD_VAR 0 1
47425: PPUSH
47426: CALL_OW 248
47430: PPUSH
47431: CALL_OW 450
47435: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47436: LD_VAR 0 10
47440: PPUSH
47441: LD_INT 1
47443: PPUSH
47444: CALL_OW 275
47448: PUSH
47449: LD_VAR 0 11
47453: PUSH
47454: LD_INT 1
47456: ARRAY
47457: GREATEREQUAL
47458: IFFALSE 47484
47460: PUSH
47461: LD_VAR 0 10
47465: PPUSH
47466: LD_INT 2
47468: PPUSH
47469: CALL_OW 275
47473: PUSH
47474: LD_VAR 0 11
47478: PUSH
47479: LD_INT 2
47481: ARRAY
47482: GREATEREQUAL
47483: AND
47484: IFFALSE 47510
47486: PUSH
47487: LD_VAR 0 10
47491: PPUSH
47492: LD_INT 3
47494: PPUSH
47495: CALL_OW 275
47499: PUSH
47500: LD_VAR 0 11
47504: PUSH
47505: LD_INT 3
47507: ARRAY
47508: GREATEREQUAL
47509: AND
47510: NOT
47511: IFFALSE 47515
// exit ;
47513: GO 48118
// if GetBType ( depot ) = b_depot then
47515: LD_VAR 0 1
47519: PPUSH
47520: CALL_OW 266
47524: PUSH
47525: LD_INT 0
47527: EQUAL
47528: IFFALSE 47540
// dist := 28 else
47530: LD_ADDR_VAR 0 14
47534: PUSH
47535: LD_INT 28
47537: ST_TO_ADDR
47538: GO 47548
// dist := 36 ;
47540: LD_ADDR_VAR 0 14
47544: PUSH
47545: LD_INT 36
47547: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47548: LD_VAR 0 1
47552: PPUSH
47553: LD_VAR 0 3
47557: PPUSH
47558: LD_VAR 0 4
47562: PPUSH
47563: CALL_OW 297
47567: PUSH
47568: LD_VAR 0 14
47572: GREATER
47573: IFFALSE 47577
// exit ;
47575: GO 48118
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47577: LD_ADDR_VAR 0 12
47581: PUSH
47582: LD_VAR 0 2
47586: PPUSH
47587: LD_VAR 0 3
47591: PPUSH
47592: LD_VAR 0 4
47596: PPUSH
47597: LD_VAR 0 5
47601: PPUSH
47602: LD_VAR 0 1
47606: PPUSH
47607: CALL_OW 248
47611: PPUSH
47612: LD_INT 0
47614: PPUSH
47615: CALL 48123 0 6
47619: ST_TO_ADDR
// if not hexes then
47620: LD_VAR 0 12
47624: NOT
47625: IFFALSE 47629
// exit ;
47627: GO 48118
// hex := GetHexInfo ( x , y ) ;
47629: LD_ADDR_VAR 0 15
47633: PUSH
47634: LD_VAR 0 3
47638: PPUSH
47639: LD_VAR 0 4
47643: PPUSH
47644: CALL_OW 546
47648: ST_TO_ADDR
// if hex [ 1 ] then
47649: LD_VAR 0 15
47653: PUSH
47654: LD_INT 1
47656: ARRAY
47657: IFFALSE 47661
// exit ;
47659: GO 48118
// height := hex [ 2 ] ;
47661: LD_ADDR_VAR 0 13
47665: PUSH
47666: LD_VAR 0 15
47670: PUSH
47671: LD_INT 2
47673: ARRAY
47674: ST_TO_ADDR
// for i = 1 to hexes do
47675: LD_ADDR_VAR 0 7
47679: PUSH
47680: DOUBLE
47681: LD_INT 1
47683: DEC
47684: ST_TO_ADDR
47685: LD_VAR 0 12
47689: PUSH
47690: FOR_TO
47691: IFFALSE 48035
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47693: LD_VAR 0 12
47697: PUSH
47698: LD_VAR 0 7
47702: ARRAY
47703: PUSH
47704: LD_INT 1
47706: ARRAY
47707: PPUSH
47708: LD_VAR 0 12
47712: PUSH
47713: LD_VAR 0 7
47717: ARRAY
47718: PUSH
47719: LD_INT 2
47721: ARRAY
47722: PPUSH
47723: CALL_OW 488
47727: NOT
47728: IFTRUE 47770
47730: PUSH
47731: LD_VAR 0 12
47735: PUSH
47736: LD_VAR 0 7
47740: ARRAY
47741: PUSH
47742: LD_INT 1
47744: ARRAY
47745: PPUSH
47746: LD_VAR 0 12
47750: PUSH
47751: LD_VAR 0 7
47755: ARRAY
47756: PUSH
47757: LD_INT 2
47759: ARRAY
47760: PPUSH
47761: CALL_OW 428
47765: PUSH
47766: LD_INT 0
47768: GREATER
47769: OR
47770: IFTRUE 47808
47772: PUSH
47773: LD_VAR 0 12
47777: PUSH
47778: LD_VAR 0 7
47782: ARRAY
47783: PUSH
47784: LD_INT 1
47786: ARRAY
47787: PPUSH
47788: LD_VAR 0 12
47792: PUSH
47793: LD_VAR 0 7
47797: ARRAY
47798: PUSH
47799: LD_INT 2
47801: ARRAY
47802: PPUSH
47803: CALL_OW 351
47807: OR
47808: IFFALSE 47814
// exit ;
47810: POP
47811: POP
47812: GO 48118
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47814: LD_ADDR_VAR 0 8
47818: PUSH
47819: LD_VAR 0 12
47823: PUSH
47824: LD_VAR 0 7
47828: ARRAY
47829: PUSH
47830: LD_INT 1
47832: ARRAY
47833: PPUSH
47834: LD_VAR 0 12
47838: PUSH
47839: LD_VAR 0 7
47843: ARRAY
47844: PUSH
47845: LD_INT 2
47847: ARRAY
47848: PPUSH
47849: CALL_OW 546
47853: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47854: LD_VAR 0 8
47858: PUSH
47859: LD_INT 1
47861: ARRAY
47862: IFTRUE 47884
47864: PUSH
47865: LD_VAR 0 8
47869: PUSH
47870: LD_INT 2
47872: ARRAY
47873: PUSH
47874: LD_VAR 0 13
47878: PUSH
47879: LD_INT 2
47881: PLUS
47882: GREATER
47883: OR
47884: IFTRUE 47906
47886: PUSH
47887: LD_VAR 0 8
47891: PUSH
47892: LD_INT 2
47894: ARRAY
47895: PUSH
47896: LD_VAR 0 13
47900: PUSH
47901: LD_INT 2
47903: MINUS
47904: LESS
47905: OR
47906: IFTRUE 47974
47908: PUSH
47909: LD_VAR 0 8
47913: PUSH
47914: LD_INT 3
47916: ARRAY
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: LD_INT 8
47923: PUSH
47924: LD_INT 9
47926: PUSH
47927: LD_INT 10
47929: PUSH
47930: LD_INT 11
47932: PUSH
47933: LD_INT 12
47935: PUSH
47936: LD_INT 13
47938: PUSH
47939: LD_INT 16
47941: PUSH
47942: LD_INT 17
47944: PUSH
47945: LD_INT 18
47947: PUSH
47948: LD_INT 19
47950: PUSH
47951: LD_INT 20
47953: PUSH
47954: LD_INT 21
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: IN
47972: NOT
47973: OR
47974: IFTRUE 47987
47976: PUSH
47977: LD_VAR 0 8
47981: PUSH
47982: LD_INT 5
47984: ARRAY
47985: NOT
47986: OR
47987: IFTRUE 48027
47989: PUSH
47990: LD_VAR 0 8
47994: PUSH
47995: LD_INT 6
47997: ARRAY
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: LD_INT 2
48004: PUSH
48005: LD_INT 7
48007: PUSH
48008: LD_INT 9
48010: PUSH
48011: LD_INT 10
48013: PUSH
48014: LD_INT 11
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: IN
48025: NOT
48026: OR
48027: IFFALSE 48033
// exit ;
48029: POP
48030: POP
48031: GO 48118
// end ;
48033: GO 47690
48035: POP
48036: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48037: LD_VAR 0 9
48041: PPUSH
48042: LD_VAR 0 3
48046: PPUSH
48047: LD_VAR 0 4
48051: PPUSH
48052: LD_INT 20
48054: PPUSH
48055: CALL 39937 0 4
48059: PUSH
48060: LD_INT 4
48062: ARRAY
48063: IFFALSE 48067
// exit ;
48065: GO 48118
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48067: LD_VAR 0 2
48071: PUSH
48072: LD_INT 29
48074: PUSH
48075: LD_INT 30
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: IN
48082: IFFALSE 48106
48084: PUSH
48085: LD_VAR 0 3
48089: PPUSH
48090: LD_VAR 0 4
48094: PPUSH
48095: LD_VAR 0 9
48099: PPUSH
48100: CALL_OW 440
48104: NOT
48105: AND
48106: IFFALSE 48110
// exit ;
48108: GO 48118
// result := true ;
48110: LD_ADDR_VAR 0 6
48114: PUSH
48115: LD_INT 1
48117: ST_TO_ADDR
// end ;
48118: LD_VAR 0 6
48122: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48123: LD_INT 0
48125: PPUSH
48126: PPUSH
48127: PPUSH
48128: PPUSH
48129: PPUSH
48130: PPUSH
48131: PPUSH
48132: PPUSH
48133: PPUSH
48134: PPUSH
48135: PPUSH
48136: PPUSH
48137: PPUSH
48138: PPUSH
48139: PPUSH
48140: PPUSH
48141: PPUSH
48142: PPUSH
48143: PPUSH
48144: PPUSH
48145: PPUSH
48146: PPUSH
48147: PPUSH
48148: PPUSH
48149: PPUSH
48150: PPUSH
48151: PPUSH
48152: PPUSH
48153: PPUSH
48154: PPUSH
48155: PPUSH
48156: PPUSH
48157: PPUSH
48158: PPUSH
48159: PPUSH
48160: PPUSH
48161: PPUSH
48162: PPUSH
48163: PPUSH
48164: PPUSH
48165: PPUSH
48166: PPUSH
48167: PPUSH
48168: PPUSH
48169: PPUSH
48170: PPUSH
48171: PPUSH
48172: PPUSH
48173: PPUSH
48174: PPUSH
48175: PPUSH
48176: PPUSH
48177: PPUSH
48178: PPUSH
48179: PPUSH
48180: PPUSH
48181: PPUSH
48182: PPUSH
// result = [ ] ;
48183: LD_ADDR_VAR 0 7
48187: PUSH
48188: EMPTY
48189: ST_TO_ADDR
// temp_list = [ ] ;
48190: LD_ADDR_VAR 0 9
48194: PUSH
48195: EMPTY
48196: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48197: LD_VAR 0 4
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: LD_INT 2
48210: PUSH
48211: LD_INT 3
48213: PUSH
48214: LD_INT 4
48216: PUSH
48217: LD_INT 5
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: IN
48228: NOT
48229: IFTRUE 48272
48231: PUSH
48232: LD_VAR 0 1
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: LD_INT 1
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: IN
48247: IFFALSE 48271
48249: PUSH
48250: LD_VAR 0 5
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: LD_INT 2
48260: PUSH
48261: LD_INT 3
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: LIST
48268: IN
48269: NOT
48270: AND
48271: OR
48272: IFFALSE 48276
// exit ;
48274: GO 66675
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48276: LD_VAR 0 1
48280: PUSH
48281: LD_INT 6
48283: PUSH
48284: LD_INT 7
48286: PUSH
48287: LD_INT 8
48289: PUSH
48290: LD_INT 13
48292: PUSH
48293: LD_INT 12
48295: PUSH
48296: LD_INT 15
48298: PUSH
48299: LD_INT 11
48301: PUSH
48302: LD_INT 14
48304: PUSH
48305: LD_INT 10
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: IN
48319: IFFALSE 48329
// btype = b_lab ;
48321: LD_ADDR_VAR 0 1
48325: PUSH
48326: LD_INT 6
48328: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48329: LD_VAR 0 6
48333: PUSH
48334: LD_INT 0
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: LIST
48347: IN
48348: NOT
48349: IFTRUE 48417
48351: PUSH
48352: LD_VAR 0 1
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: LD_INT 3
48368: PUSH
48369: LD_INT 6
48371: PUSH
48372: LD_INT 36
48374: PUSH
48375: LD_INT 4
48377: PUSH
48378: LD_INT 5
48380: PUSH
48381: LD_INT 31
48383: PUSH
48384: LD_INT 32
48386: PUSH
48387: LD_INT 33
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: IN
48403: NOT
48404: IFFALSE 48416
48406: PUSH
48407: LD_VAR 0 6
48411: PUSH
48412: LD_INT 1
48414: EQUAL
48415: AND
48416: OR
48417: IFTRUE 48449
48419: PUSH
48420: LD_VAR 0 1
48424: PUSH
48425: LD_INT 2
48427: PUSH
48428: LD_INT 3
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: IN
48435: NOT
48436: IFFALSE 48448
48438: PUSH
48439: LD_VAR 0 6
48443: PUSH
48444: LD_INT 2
48446: EQUAL
48447: AND
48448: OR
48449: IFFALSE 48459
// mode = 0 ;
48451: LD_ADDR_VAR 0 6
48455: PUSH
48456: LD_INT 0
48458: ST_TO_ADDR
// case mode of 0 :
48459: LD_VAR 0 6
48463: PUSH
48464: LD_INT 0
48466: DOUBLE
48467: EQUAL
48468: IFTRUE 48472
48470: GO 59925
48472: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48473: LD_ADDR_VAR 0 11
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: LD_INT 1
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: NEG
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: LD_INT 2
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 0
48566: PUSH
48567: LD_INT 2
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: LD_INT 1
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: LD_INT 2
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: LD_INT 2
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 1
48608: NEG
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: LD_INT 3
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: LD_INT 3
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: LD_INT 2
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48666: LD_ADDR_VAR 0 12
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: NEG
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 2
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 2
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: NEG
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: NEG
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 2
48800: NEG
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 2
48812: NEG
48813: PUSH
48814: LD_INT 1
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 3
48823: NEG
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 3
48834: NEG
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48862: LD_ADDR_VAR 0 13
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: LD_INT 1
48935: NEG
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: LD_INT 2
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 2
48965: PUSH
48966: LD_INT 2
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 2
48985: NEG
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: NEG
48998: PUSH
48999: LD_INT 2
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 2
49009: NEG
49010: PUSH
49011: LD_INT 3
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 3
49021: NEG
49022: PUSH
49023: LD_INT 2
49025: NEG
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 3
49033: NEG
49034: PUSH
49035: LD_INT 3
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49061: LD_ADDR_VAR 0 14
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 1
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: LD_INT 1
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: NEG
49143: PUSH
49144: LD_INT 2
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: LD_INT 2
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: LD_INT 2
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: LD_INT 2
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: NEG
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: LD_INT 3
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: LD_INT 3
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: LD_INT 2
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49257: LD_ADDR_VAR 0 15
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 2
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 2
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 2
49391: NEG
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 3
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 3
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49450: LD_ADDR_VAR 0 16
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: LD_INT 0
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: LD_INT 2
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: LD_INT 2
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 2
49573: NEG
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 2
49585: NEG
49586: PUSH
49587: LD_INT 2
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 3
49597: PUSH
49598: LD_INT 2
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 3
49607: PUSH
49608: LD_INT 3
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 2
49617: PUSH
49618: LD_INT 3
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49643: LD_ADDR_VAR 0 17
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: LD_INT 1
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 1
49701: NEG
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: LD_INT 2
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: LD_INT 2
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 2
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 2
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 2
49778: PUSH
49779: LD_INT 2
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: LD_INT 2
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: LD_INT 2
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: NEG
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 2
49819: NEG
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 2
49830: NEG
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 2
49842: NEG
49843: PUSH
49844: LD_INT 2
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49873: LD_ADDR_VAR 0 18
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: LD_INT 1
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: LD_INT 1
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 1
49931: NEG
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: NEG
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: LD_INT 2
49958: NEG
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: LD_INT 2
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: LD_INT 1
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 2
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 2
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 2
50008: PUSH
50009: LD_INT 2
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: LD_INT 2
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 2
50049: NEG
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: LD_INT 2
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50103: LD_ADDR_VAR 0 19
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: LD_INT 2
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: LD_INT 2
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 2
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 2
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 2
50238: PUSH
50239: LD_INT 2
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: LD_INT 2
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: LD_INT 2
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 2
50279: NEG
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 2
50290: NEG
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 2
50302: NEG
50303: PUSH
50304: LD_INT 2
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50333: LD_ADDR_VAR 0 20
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: NEG
50415: PUSH
50416: LD_INT 2
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: LD_INT 2
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 2
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 2
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 2
50468: PUSH
50469: LD_INT 2
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: LD_INT 2
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: LD_INT 2
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 2
50509: NEG
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 2
50520: NEG
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: NEG
50533: PUSH
50534: LD_INT 2
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50563: LD_ADDR_VAR 0 21
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 2
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: LD_INT 2
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 2
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 2
50698: PUSH
50699: LD_INT 2
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: LD_INT 2
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: LD_INT 2
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: NEG
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 2
50739: NEG
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 2
50750: NEG
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 2
50762: NEG
50763: PUSH
50764: LD_INT 2
50766: NEG
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50793: LD_ADDR_VAR 0 22
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: LD_INT 2
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: LD_INT 2
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 1
50897: PUSH
50898: LD_INT 1
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 2
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 2
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: LD_INT 2
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: LD_INT 2
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: LD_INT 2
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 2
50980: NEG
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 2
50992: NEG
50993: PUSH
50994: LD_INT 2
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51023: LD_ADDR_VAR 0 23
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: NEG
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: NEG
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: LD_INT 2
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: LD_INT 2
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 2
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 2
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 2
51158: PUSH
51159: LD_INT 2
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: LD_INT 2
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 2
51199: NEG
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: LD_INT 1
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 2
51222: NEG
51223: PUSH
51224: LD_INT 2
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 2
51234: NEG
51235: PUSH
51236: LD_INT 3
51238: NEG
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: LD_INT 3
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: LD_INT 2
51261: NEG
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 2
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51303: LD_ADDR_VAR 0 24
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 1
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 1
51384: NEG
51385: PUSH
51386: LD_INT 2
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: LD_INT 2
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 2
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 2
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: LD_INT 2
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: LD_INT 2
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 2
51479: NEG
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 2
51490: NEG
51491: PUSH
51492: LD_INT 1
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 2
51502: NEG
51503: PUSH
51504: LD_INT 2
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: LD_INT 2
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 3
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 3
51546: PUSH
51547: LD_INT 2
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51579: LD_ADDR_VAR 0 25
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: LD_INT 2
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: LD_INT 2
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 2
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 2
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: LD_INT 2
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: LD_INT 2
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 2
51755: NEG
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 2
51766: NEG
51767: PUSH
51768: LD_INT 1
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 2
51778: NEG
51779: PUSH
51780: LD_INT 2
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 3
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 3
51800: PUSH
51801: LD_INT 2
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 2
51810: PUSH
51811: LD_INT 3
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: LD_INT 3
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51853: LD_ADDR_VAR 0 26
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: NEG
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: LD_INT 2
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: LD_INT 2
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 2
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 2
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 2
51988: PUSH
51989: LD_INT 2
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 1
51998: PUSH
51999: LD_INT 2
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: LD_INT 2
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: LD_INT 1
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 2
52029: NEG
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 2
52040: NEG
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 2
52052: NEG
52053: PUSH
52054: LD_INT 2
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 2
52064: PUSH
52065: LD_INT 3
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: LD_INT 3
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: LD_INT 2
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 2
52095: NEG
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52129: LD_ADDR_VAR 0 27
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: LD_INT 1
52149: NEG
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: LD_INT 0
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: LD_INT 2
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: LD_INT 2
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 2
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 2
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 2
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: LD_INT 1
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 2
52305: NEG
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 2
52316: NEG
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 2
52328: NEG
52329: PUSH
52330: LD_INT 2
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: LD_INT 2
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 2
52351: NEG
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 3
52362: NEG
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 3
52374: NEG
52375: PUSH
52376: LD_INT 2
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52409: LD_ADDR_VAR 0 28
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: LD_INT 2
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: LD_INT 2
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 2
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 2
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 2
52544: PUSH
52545: LD_INT 2
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: LD_INT 2
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 2
52585: NEG
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: NEG
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: NEG
52609: PUSH
52610: LD_INT 2
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 2
52620: NEG
52621: PUSH
52622: LD_INT 3
52624: NEG
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: LD_INT 3
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 3
52644: NEG
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 3
52656: NEG
52657: PUSH
52658: LD_INT 2
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52691: LD_ADDR_VAR 0 29
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: NEG
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: LD_INT 2
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: LD_INT 2
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 2
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 2
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: LD_INT 2
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 2
52869: NEG
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 2
52881: NEG
52882: PUSH
52883: LD_INT 3
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: PUSH
52894: LD_INT 1
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 3
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: LD_INT 3
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: LD_INT 2
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 3
52935: NEG
52936: PUSH
52937: LD_INT 2
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52970: LD_ADDR_VAR 0 30
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: PUSH
53009: LD_INT 1
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: NEG
53052: PUSH
53053: LD_INT 2
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: LD_INT 2
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 2
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 2
53095: PUSH
53096: LD_INT 1
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 2
53105: PUSH
53106: LD_INT 2
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 1
53125: NEG
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 2
53136: NEG
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 2
53147: NEG
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: NEG
53160: PUSH
53161: LD_INT 3
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: LD_INT 2
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 3
53182: PUSH
53183: LD_INT 2
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 2
53192: PUSH
53193: LD_INT 3
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 2
53202: NEG
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 3
53213: NEG
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53248: LD_ADDR_VAR 0 31
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: LD_INT 1
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 2
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 2
53372: PUSH
53373: LD_INT 2
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: LD_INT 2
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: LD_INT 2
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 2
53413: NEG
53414: PUSH
53415: LD_INT 1
53417: NEG
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 2
53425: NEG
53426: PUSH
53427: LD_INT 2
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 2
53437: NEG
53438: PUSH
53439: LD_INT 3
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 2
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 3
53460: PUSH
53461: LD_INT 1
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: LD_INT 3
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: LD_INT 2
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 3
53491: NEG
53492: PUSH
53493: LD_INT 2
53495: NEG
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53526: LD_ADDR_VAR 0 32
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 1
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 1
53595: NEG
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: LD_INT 2
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: LD_INT 2
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: LD_INT 1
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 2
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 2
53651: PUSH
53652: LD_INT 2
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: LD_INT 2
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: LD_INT 2
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: LD_INT 1
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 2
53692: NEG
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 2
53703: NEG
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: LD_INT 3
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: LD_INT 2
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 3
53738: PUSH
53739: LD_INT 2
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 2
53748: PUSH
53749: LD_INT 3
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 2
53758: NEG
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 3
53769: NEG
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53804: LD_ADDR_VAR 0 33
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 0
53821: PUSH
53822: LD_INT 1
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: LD_INT 1
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: LD_INT 2
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: LD_INT 1
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 2
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 2
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: LD_INT 2
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: LD_INT 2
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 2
53959: NEG
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 2
53970: NEG
53971: PUSH
53972: LD_INT 1
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: NEG
53983: PUSH
53984: LD_INT 2
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 2
53994: NEG
53995: PUSH
53996: LD_INT 3
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 2
54006: PUSH
54007: LD_INT 1
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 3
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: LD_INT 3
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: LD_INT 2
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 3
54048: NEG
54049: PUSH
54050: LD_INT 2
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54083: LD_ADDR_VAR 0 34
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: NEG
54165: PUSH
54166: LD_INT 2
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: LD_INT 2
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 2
54198: PUSH
54199: LD_INT 1
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: LD_INT 2
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: LD_INT 1
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: NEG
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 2
54262: NEG
54263: PUSH
54264: LD_INT 2
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 1
54274: NEG
54275: PUSH
54276: LD_INT 3
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: LD_INT 2
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 3
54297: PUSH
54298: LD_INT 2
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: LD_INT 3
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 2
54317: NEG
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 3
54328: NEG
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54363: LD_ADDR_VAR 0 35
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: NEG
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 2
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 2
54454: NEG
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54475: LD_ADDR_VAR 0 36
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: LD_INT 1
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: NEG
54557: PUSH
54558: LD_INT 2
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: LD_INT 2
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54587: LD_ADDR_VAR 0 37
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: NEG
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: LD_INT 1
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 1
54679: NEG
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54699: LD_ADDR_VAR 0 38
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: LD_INT 1
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 2
54780: PUSH
54781: LD_INT 1
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 2
54790: NEG
54791: PUSH
54792: LD_INT 1
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54811: LD_ADDR_VAR 0 39
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: LD_INT 1
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: LD_INT 1
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 1
54892: NEG
54893: PUSH
54894: LD_INT 2
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: LD_INT 2
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54923: LD_ADDR_VAR 0 40
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: LD_INT 1
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55035: LD_ADDR_VAR 0 41
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: LD_INT 1
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: NEG
55117: PUSH
55118: LD_INT 2
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 2
55139: PUSH
55140: LD_INT 0
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: LD_INT 1
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 2
55159: PUSH
55160: LD_INT 2
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: LD_INT 2
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: NEG
55180: PUSH
55181: LD_INT 1
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 2
55190: NEG
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 2
55201: NEG
55202: PUSH
55203: LD_INT 1
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 2
55213: NEG
55214: PUSH
55215: LD_INT 2
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 2
55225: NEG
55226: PUSH
55227: LD_INT 3
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 2
55237: PUSH
55238: LD_INT 1
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 3
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 3
55258: PUSH
55259: LD_INT 1
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 3
55268: PUSH
55269: LD_INT 2
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 3
55278: PUSH
55279: LD_INT 3
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 2
55288: PUSH
55289: LD_INT 3
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 2
55298: NEG
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 3
55309: NEG
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 3
55320: NEG
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 3
55332: NEG
55333: PUSH
55334: LD_INT 2
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 3
55344: NEG
55345: PUSH
55346: LD_INT 3
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55385: LD_ADDR_VAR 0 42
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: LD_INT 2
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: LD_INT 2
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: LD_INT 1
55492: NEG
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 2
55500: PUSH
55501: LD_INT 1
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: LD_INT 2
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: LD_INT 2
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: LD_INT 2
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: LD_INT 1
55555: NEG
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 2
55563: NEG
55564: PUSH
55565: LD_INT 2
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 2
55575: NEG
55576: PUSH
55577: LD_INT 3
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: LD_INT 3
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: LD_INT 3
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: LD_INT 2
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 3
55621: PUSH
55622: LD_INT 2
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 3
55631: PUSH
55632: LD_INT 3
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: LD_INT 3
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: LD_INT 3
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: LD_INT 3
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: LD_INT 2
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 3
55682: NEG
55683: PUSH
55684: LD_INT 2
55686: NEG
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 3
55694: NEG
55695: PUSH
55696: LD_INT 3
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55735: LD_ADDR_VAR 0 43
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: LD_INT 1
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: LD_INT 2
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 0
55828: PUSH
55829: LD_INT 2
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 2
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 2
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: LD_INT 2
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: LD_INT 2
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 1
55890: NEG
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 2
55901: NEG
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 2
55912: NEG
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: LD_INT 3
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: LD_INT 3
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: LD_INT 2
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 2
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 3
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 3
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: PUSH
55990: LD_INT 3
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: LD_INT 3
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: NEG
56010: PUSH
56011: LD_INT 2
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 2
56020: NEG
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 3
56031: NEG
56032: PUSH
56033: LD_INT 0
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 3
56042: NEG
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56083: LD_ADDR_VAR 0 44
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 1
56141: NEG
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: LD_INT 2
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 2
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: LD_INT 1
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: LD_INT 2
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 1
56227: NEG
56228: PUSH
56229: LD_INT 1
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 2
56238: NEG
56239: PUSH
56240: LD_INT 0
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 2
56249: NEG
56250: PUSH
56251: LD_INT 1
56253: NEG
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 2
56261: NEG
56262: PUSH
56263: LD_INT 2
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 2
56273: NEG
56274: PUSH
56275: LD_INT 3
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 2
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 3
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 3
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 3
56316: PUSH
56317: LD_INT 2
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 3
56326: PUSH
56327: LD_INT 3
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 2
56336: PUSH
56337: LD_INT 3
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 2
56346: NEG
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 3
56357: NEG
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 3
56368: NEG
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 3
56380: NEG
56381: PUSH
56382: LD_INT 2
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 3
56392: NEG
56393: PUSH
56394: LD_INT 3
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56433: LD_ADDR_VAR 0 45
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: LD_INT 1
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: LD_INT 1
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: LD_INT 2
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: LD_INT 2
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 2
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 2
56558: PUSH
56559: LD_INT 2
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: LD_INT 2
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: LD_INT 2
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: NEG
56589: PUSH
56590: LD_INT 1
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 2
56599: NEG
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: LD_INT 2
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 2
56623: NEG
56624: PUSH
56625: LD_INT 3
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 1
56635: NEG
56636: PUSH
56637: LD_INT 3
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: LD_INT 3
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 3
56669: PUSH
56670: LD_INT 2
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 3
56679: PUSH
56680: LD_INT 3
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: LD_INT 3
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 1
56699: PUSH
56700: LD_INT 3
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: LD_INT 3
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: LD_INT 2
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 3
56730: NEG
56731: PUSH
56732: LD_INT 2
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 3
56742: NEG
56743: PUSH
56744: LD_INT 3
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56783: LD_ADDR_VAR 0 46
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: LD_INT 1
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: LD_INT 0
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: LD_INT 1
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: LD_INT 1
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: LD_INT 2
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: LD_INT 2
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 2
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 2
56908: PUSH
56909: LD_INT 1
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: LD_INT 2
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: LD_INT 2
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 2
56949: NEG
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 2
56960: NEG
56961: PUSH
56962: LD_INT 1
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 1
56972: NEG
56973: PUSH
56974: LD_INT 3
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: LD_INT 3
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: LD_INT 2
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 2
57006: PUSH
57007: LD_INT 1
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 3
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 3
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 1
57037: PUSH
57038: LD_INT 3
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 0
57047: PUSH
57048: LD_INT 3
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: LD_INT 2
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 2
57068: NEG
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 3
57079: NEG
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 3
57090: NEG
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57131: LD_ADDR_VAR 0 47
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 1
57159: PUSH
57160: LD_INT 0
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: LD_INT 1
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: NEG
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 1
57200: NEG
57201: PUSH
57202: LD_INT 1
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: LD_INT 2
57216: NEG
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: LD_INT 2
57227: NEG
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 2
57246: NEG
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 2
57258: NEG
57259: PUSH
57260: LD_INT 2
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57282: LD_ADDR_VAR 0 48
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: LD_INT 1
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 1
57351: NEG
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: NEG
57364: PUSH
57365: LD_INT 2
57367: NEG
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: LD_INT 2
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 2
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57429: LD_ADDR_VAR 0 49
57433: PUSH
57434: LD_INT 0
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: LD_INT 1
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: LD_INT 1
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 1
57510: PUSH
57511: LD_INT 1
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 2
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 2
57531: PUSH
57532: LD_INT 1
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 2
57541: PUSH
57542: LD_INT 2
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: LD_INT 2
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57573: LD_ADDR_VAR 0 50
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 0
57590: PUSH
57591: LD_INT 1
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: PUSH
57612: LD_INT 1
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: NEG
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 1
57642: NEG
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 2
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 2
57664: PUSH
57665: LD_INT 2
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 1
57674: PUSH
57675: LD_INT 2
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: LD_INT 2
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: NEG
57695: PUSH
57696: LD_INT 1
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57717: LD_ADDR_VAR 0 51
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: LD_INT 1
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 1
57745: PUSH
57746: LD_INT 0
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 1
57755: PUSH
57756: LD_INT 1
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 1
57775: NEG
57776: PUSH
57777: LD_INT 0
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 1
57786: NEG
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: LD_INT 2
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: LD_INT 2
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 2
57829: NEG
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 2
57840: NEG
57841: PUSH
57842: LD_INT 1
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57864: LD_ADDR_VAR 0 52
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: NEG
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: LD_INT 1
57937: NEG
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 1
57945: NEG
57946: PUSH
57947: LD_INT 2
57949: NEG
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 1
57957: NEG
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 2
57968: NEG
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 2
57979: NEG
57980: PUSH
57981: LD_INT 1
57983: NEG
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 2
57991: NEG
57992: PUSH
57993: LD_INT 2
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58015: LD_ADDR_VAR 0 53
58019: PUSH
58020: LD_INT 0
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 0
58032: PUSH
58033: LD_INT 1
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 1
58043: PUSH
58044: LD_INT 0
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: LD_INT 1
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: LD_INT 1
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: NEG
58074: PUSH
58075: LD_INT 0
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 1
58084: NEG
58085: PUSH
58086: LD_INT 1
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: LD_INT 2
58100: NEG
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: LD_INT 2
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 1
58119: PUSH
58120: LD_INT 1
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 2
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 2
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 2
58150: PUSH
58151: LD_INT 2
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: LD_INT 2
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: LD_INT 2
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: LD_INT 1
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 2
58191: NEG
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 2
58202: NEG
58203: PUSH
58204: LD_INT 1
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 2
58214: NEG
58215: PUSH
58216: LD_INT 2
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58245: LD_ADDR_VAR 0 54
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: LD_INT 1
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: LD_INT 1
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: LD_INT 2
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: LD_INT 2
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 1
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 2
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 2
58370: PUSH
58371: LD_INT 1
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 2
58380: PUSH
58381: LD_INT 2
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: LD_INT 2
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: LD_INT 2
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 1
58410: NEG
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 2
58421: NEG
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 2
58444: NEG
58445: PUSH
58446: LD_INT 2
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58475: LD_ADDR_VAR 0 55
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: LD_INT 1
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 1
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 1
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: LD_INT 1
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 1
58533: NEG
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 1
58556: NEG
58557: PUSH
58558: LD_INT 2
58560: NEG
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: LD_INT 2
58571: NEG
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 2
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 2
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 2
58610: PUSH
58611: LD_INT 2
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 1
58620: PUSH
58621: LD_INT 2
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: LD_INT 2
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 1
58640: NEG
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 2
58651: NEG
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 2
58662: NEG
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 2
58674: NEG
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58705: LD_ADDR_VAR 0 56
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: LD_INT 0
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 1
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: LD_INT 1
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: LD_INT 0
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: LD_INT 1
58778: NEG
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: LD_INT 2
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: LD_INT 2
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: LD_INT 1
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 2
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 2
58830: PUSH
58831: LD_INT 1
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: PUSH
58841: LD_INT 2
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: LD_INT 2
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: LD_INT 2
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: NEG
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 2
58881: NEG
58882: PUSH
58883: LD_INT 0
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: LD_INT 1
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 2
58904: NEG
58905: PUSH
58906: LD_INT 2
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58935: LD_ADDR_VAR 0 57
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: LD_INT 1
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: LD_INT 0
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 1
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 1
58993: NEG
58994: PUSH
58995: LD_INT 0
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 1
59004: NEG
59005: PUSH
59006: LD_INT 1
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: LD_INT 2
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: LD_INT 2
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 2
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 2
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 2
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: LD_INT 2
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: LD_INT 2
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: NEG
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 2
59111: NEG
59112: PUSH
59113: LD_INT 0
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 2
59122: NEG
59123: PUSH
59124: LD_INT 1
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 2
59134: NEG
59135: PUSH
59136: LD_INT 2
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59165: LD_ADDR_VAR 0 58
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: LD_INT 1
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: LD_INT 0
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 1
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 1
59223: NEG
59224: PUSH
59225: LD_INT 0
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: NEG
59235: PUSH
59236: LD_INT 1
59238: NEG
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: LD_INT 2
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 0
59258: PUSH
59259: LD_INT 2
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 1
59269: PUSH
59270: LD_INT 1
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 2
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: LD_INT 1
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 2
59300: PUSH
59301: LD_INT 2
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: LD_INT 2
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: LD_INT 2
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 1
59330: NEG
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 2
59341: NEG
59342: PUSH
59343: LD_INT 0
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 2
59352: NEG
59353: PUSH
59354: LD_INT 1
59356: NEG
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 2
59364: NEG
59365: PUSH
59366: LD_INT 2
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59395: LD_ADDR_VAR 0 59
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59483: LD_ADDR_VAR 0 60
59487: PUSH
59488: LD_INT 0
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: LD_INT 0
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: LD_INT 1
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 0
59531: PUSH
59532: LD_INT 1
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: NEG
59542: PUSH
59543: LD_INT 0
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: LD_INT 1
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59571: LD_ADDR_VAR 0 61
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: LD_INT 0
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: LD_INT 1
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: LD_INT 1
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 1
59629: NEG
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: NEG
59641: PUSH
59642: LD_INT 1
59644: NEG
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59659: LD_ADDR_VAR 0 62
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: LD_INT 0
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 0
59676: PUSH
59677: LD_INT 1
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: PUSH
59688: LD_INT 0
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 1
59697: PUSH
59698: LD_INT 1
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 0
59707: PUSH
59708: LD_INT 1
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 1
59717: NEG
59718: PUSH
59719: LD_INT 0
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: LD_INT 1
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59747: LD_ADDR_VAR 0 63
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: LD_INT 1
59767: NEG
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: LD_INT 0
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 1
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: NEG
59806: PUSH
59807: LD_INT 0
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 1
59816: NEG
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59835: LD_ADDR_VAR 0 64
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 0
59852: PUSH
59853: LD_INT 1
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 1
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 0
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 1
59893: NEG
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 1
59904: NEG
59905: PUSH
59906: LD_INT 1
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: ST_TO_ADDR
// end ; 1 :
59923: GO 65820
59925: LD_INT 1
59927: DOUBLE
59928: EQUAL
59929: IFTRUE 59933
59931: GO 62556
59933: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59934: LD_ADDR_VAR 0 11
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: LD_INT 3
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: LD_INT 3
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: LD_INT 2
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: LIST
59977: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59978: LD_ADDR_VAR 0 12
59982: PUSH
59983: LD_INT 2
59985: PUSH
59986: LD_INT 1
59988: NEG
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 3
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 3
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: LIST
60018: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60019: LD_ADDR_VAR 0 13
60023: PUSH
60024: LD_INT 3
60026: PUSH
60027: LD_INT 2
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 3
60036: PUSH
60037: LD_INT 3
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 2
60046: PUSH
60047: LD_INT 3
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: LIST
60058: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60059: LD_ADDR_VAR 0 14
60063: PUSH
60064: LD_INT 1
60066: PUSH
60067: LD_INT 3
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 0
60076: PUSH
60077: LD_INT 3
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: LD_INT 2
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: LIST
60099: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60100: LD_ADDR_VAR 0 15
60104: PUSH
60105: LD_INT 2
60107: NEG
60108: PUSH
60109: LD_INT 1
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 3
60118: NEG
60119: PUSH
60120: LD_INT 0
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 3
60129: NEG
60130: PUSH
60131: LD_INT 1
60133: NEG
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: LIST
60143: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60144: LD_ADDR_VAR 0 16
60148: PUSH
60149: LD_INT 2
60151: NEG
60152: PUSH
60153: LD_INT 3
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 3
60163: NEG
60164: PUSH
60165: LD_INT 2
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 3
60175: NEG
60176: PUSH
60177: LD_INT 3
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: LIST
60189: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60190: LD_ADDR_VAR 0 17
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: LD_INT 3
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: LD_INT 3
60212: NEG
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 1
60220: PUSH
60221: LD_INT 2
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: LIST
60233: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60234: LD_ADDR_VAR 0 18
60238: PUSH
60239: LD_INT 2
60241: PUSH
60242: LD_INT 1
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 3
60252: PUSH
60253: LD_INT 0
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 3
60262: PUSH
60263: LD_INT 1
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: LIST
60274: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60275: LD_ADDR_VAR 0 19
60279: PUSH
60280: LD_INT 3
60282: PUSH
60283: LD_INT 2
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 3
60292: PUSH
60293: LD_INT 3
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 2
60302: PUSH
60303: LD_INT 3
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: LIST
60314: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60315: LD_ADDR_VAR 0 20
60319: PUSH
60320: LD_INT 1
60322: PUSH
60323: LD_INT 3
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: LD_INT 3
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 1
60342: NEG
60343: PUSH
60344: LD_INT 2
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: LIST
60355: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60356: LD_ADDR_VAR 0 21
60360: PUSH
60361: LD_INT 2
60363: NEG
60364: PUSH
60365: LD_INT 1
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 3
60374: NEG
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 3
60385: NEG
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: LIST
60399: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60400: LD_ADDR_VAR 0 22
60404: PUSH
60405: LD_INT 2
60407: NEG
60408: PUSH
60409: LD_INT 3
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 3
60419: NEG
60420: PUSH
60421: LD_INT 2
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 3
60431: NEG
60432: PUSH
60433: LD_INT 3
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: LIST
60445: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60446: LD_ADDR_VAR 0 23
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: LD_INT 3
60456: NEG
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 1
60464: NEG
60465: PUSH
60466: LD_INT 4
60468: NEG
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: LD_INT 3
60479: NEG
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: LIST
60489: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60490: LD_ADDR_VAR 0 24
60494: PUSH
60495: LD_INT 3
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 3
60507: PUSH
60508: LD_INT 1
60510: NEG
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 4
60518: PUSH
60519: LD_INT 1
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: LIST
60530: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60531: LD_ADDR_VAR 0 25
60535: PUSH
60536: LD_INT 3
60538: PUSH
60539: LD_INT 3
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 4
60548: PUSH
60549: LD_INT 3
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 3
60558: PUSH
60559: LD_INT 4
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: LIST
60570: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60571: LD_ADDR_VAR 0 26
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: LD_INT 3
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: LD_INT 4
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 1
60598: NEG
60599: PUSH
60600: LD_INT 3
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: LIST
60611: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60612: LD_ADDR_VAR 0 27
60616: PUSH
60617: LD_INT 3
60619: NEG
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 3
60630: NEG
60631: PUSH
60632: LD_INT 1
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 4
60641: NEG
60642: PUSH
60643: LD_INT 1
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: LIST
60655: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60656: LD_ADDR_VAR 0 28
60660: PUSH
60661: LD_INT 3
60663: NEG
60664: PUSH
60665: LD_INT 3
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 3
60675: NEG
60676: PUSH
60677: LD_INT 4
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 4
60687: NEG
60688: PUSH
60689: LD_INT 3
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: LIST
60701: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60702: LD_ADDR_VAR 0 29
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: LD_INT 3
60713: NEG
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: LD_INT 3
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 1
60732: PUSH
60733: LD_INT 2
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 1
60743: NEG
60744: PUSH
60745: LD_INT 4
60747: NEG
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: LD_INT 4
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: LD_INT 3
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 1
60777: NEG
60778: PUSH
60779: LD_INT 5
60781: NEG
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 0
60789: PUSH
60790: LD_INT 5
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 1
60800: PUSH
60801: LD_INT 4
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 1
60811: NEG
60812: PUSH
60813: LD_INT 6
60815: NEG
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: LD_INT 6
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 1
60834: PUSH
60835: LD_INT 5
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60857: LD_ADDR_VAR 0 30
60861: PUSH
60862: LD_INT 2
60864: PUSH
60865: LD_INT 1
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 3
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 3
60885: PUSH
60886: LD_INT 1
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 3
60895: PUSH
60896: LD_INT 1
60898: NEG
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 4
60906: PUSH
60907: LD_INT 0
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 4
60916: PUSH
60917: LD_INT 1
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 4
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 5
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 5
60947: PUSH
60948: LD_INT 1
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 5
60957: PUSH
60958: LD_INT 1
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 6
60968: PUSH
60969: LD_INT 0
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 6
60978: PUSH
60979: LD_INT 1
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61000: LD_ADDR_VAR 0 31
61004: PUSH
61005: LD_INT 3
61007: PUSH
61008: LD_INT 2
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 3
61017: PUSH
61018: LD_INT 3
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 2
61027: PUSH
61028: LD_INT 3
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 4
61037: PUSH
61038: LD_INT 3
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 4
61047: PUSH
61048: LD_INT 4
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 3
61057: PUSH
61058: LD_INT 4
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 5
61067: PUSH
61068: LD_INT 4
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 5
61077: PUSH
61078: LD_INT 5
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 4
61087: PUSH
61088: LD_INT 5
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 6
61097: PUSH
61098: LD_INT 5
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 6
61107: PUSH
61108: LD_INT 6
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 5
61117: PUSH
61118: LD_INT 6
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61139: LD_ADDR_VAR 0 32
61143: PUSH
61144: LD_INT 1
61146: PUSH
61147: LD_INT 3
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 0
61156: PUSH
61157: LD_INT 3
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 1
61166: NEG
61167: PUSH
61168: LD_INT 2
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 1
61177: PUSH
61178: LD_INT 4
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 0
61187: PUSH
61188: LD_INT 4
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 1
61197: NEG
61198: PUSH
61199: LD_INT 3
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 1
61208: PUSH
61209: LD_INT 5
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 0
61218: PUSH
61219: LD_INT 5
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 1
61228: NEG
61229: PUSH
61230: LD_INT 4
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 1
61239: PUSH
61240: LD_INT 6
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: LD_INT 6
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 1
61259: NEG
61260: PUSH
61261: LD_INT 5
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61282: LD_ADDR_VAR 0 33
61286: PUSH
61287: LD_INT 2
61289: NEG
61290: PUSH
61291: LD_INT 1
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 3
61300: NEG
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 3
61311: NEG
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 3
61323: NEG
61324: PUSH
61325: LD_INT 1
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 4
61334: NEG
61335: PUSH
61336: LD_INT 0
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 4
61345: NEG
61346: PUSH
61347: LD_INT 1
61349: NEG
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 4
61357: NEG
61358: PUSH
61359: LD_INT 1
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 5
61368: NEG
61369: PUSH
61370: LD_INT 0
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 5
61379: NEG
61380: PUSH
61381: LD_INT 1
61383: NEG
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 5
61391: NEG
61392: PUSH
61393: LD_INT 1
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 6
61402: NEG
61403: PUSH
61404: LD_INT 0
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 6
61413: NEG
61414: PUSH
61415: LD_INT 1
61417: NEG
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61437: LD_ADDR_VAR 0 34
61441: PUSH
61442: LD_INT 2
61444: NEG
61445: PUSH
61446: LD_INT 3
61448: NEG
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 3
61456: NEG
61457: PUSH
61458: LD_INT 2
61460: NEG
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 3
61468: NEG
61469: PUSH
61470: LD_INT 3
61472: NEG
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 3
61480: NEG
61481: PUSH
61482: LD_INT 4
61484: NEG
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 4
61492: NEG
61493: PUSH
61494: LD_INT 3
61496: NEG
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 4
61504: NEG
61505: PUSH
61506: LD_INT 4
61508: NEG
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 4
61516: NEG
61517: PUSH
61518: LD_INT 5
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 5
61528: NEG
61529: PUSH
61530: LD_INT 4
61532: NEG
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 5
61540: NEG
61541: PUSH
61542: LD_INT 5
61544: NEG
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 5
61552: NEG
61553: PUSH
61554: LD_INT 6
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 6
61564: NEG
61565: PUSH
61566: LD_INT 5
61568: NEG
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 6
61576: NEG
61577: PUSH
61578: LD_INT 6
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61600: LD_ADDR_VAR 0 41
61604: PUSH
61605: LD_INT 0
61607: PUSH
61608: LD_INT 2
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 1
61618: NEG
61619: PUSH
61620: LD_INT 3
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: LD_INT 2
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: LIST
61643: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61644: LD_ADDR_VAR 0 42
61648: PUSH
61649: LD_INT 2
61651: PUSH
61652: LD_INT 0
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 2
61661: PUSH
61662: LD_INT 1
61664: NEG
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 3
61672: PUSH
61673: LD_INT 1
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: LIST
61684: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61685: LD_ADDR_VAR 0 43
61689: PUSH
61690: LD_INT 2
61692: PUSH
61693: LD_INT 2
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 3
61702: PUSH
61703: LD_INT 2
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 2
61712: PUSH
61713: LD_INT 3
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: LIST
61724: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61725: LD_ADDR_VAR 0 44
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: LD_INT 2
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 1
61742: PUSH
61743: LD_INT 3
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 1
61752: NEG
61753: PUSH
61754: LD_INT 2
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: LIST
61765: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61766: LD_ADDR_VAR 0 45
61770: PUSH
61771: LD_INT 2
61773: NEG
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 2
61784: NEG
61785: PUSH
61786: LD_INT 1
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 3
61795: NEG
61796: PUSH
61797: LD_INT 1
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: LIST
61809: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61810: LD_ADDR_VAR 0 46
61814: PUSH
61815: LD_INT 2
61817: NEG
61818: PUSH
61819: LD_INT 2
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 2
61829: NEG
61830: PUSH
61831: LD_INT 3
61833: NEG
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 3
61841: NEG
61842: PUSH
61843: LD_INT 2
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: LIST
61855: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61856: LD_ADDR_VAR 0 47
61860: PUSH
61861: LD_INT 2
61863: NEG
61864: PUSH
61865: LD_INT 3
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: LD_INT 3
61879: NEG
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61889: LD_ADDR_VAR 0 48
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: LD_INT 2
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 2
61907: PUSH
61908: LD_INT 1
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61920: LD_ADDR_VAR 0 49
61924: PUSH
61925: LD_INT 3
61927: PUSH
61928: LD_INT 1
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 3
61937: PUSH
61938: LD_INT 2
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61949: LD_ADDR_VAR 0 50
61953: PUSH
61954: LD_INT 2
61956: PUSH
61957: LD_INT 3
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 1
61966: PUSH
61967: LD_INT 3
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61978: LD_ADDR_VAR 0 51
61982: PUSH
61983: LD_INT 1
61985: NEG
61986: PUSH
61987: LD_INT 2
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 2
61996: NEG
61997: PUSH
61998: LD_INT 1
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62009: LD_ADDR_VAR 0 52
62013: PUSH
62014: LD_INT 3
62016: NEG
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 3
62028: NEG
62029: PUSH
62030: LD_INT 2
62032: NEG
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62042: LD_ADDR_VAR 0 53
62046: PUSH
62047: LD_INT 1
62049: NEG
62050: PUSH
62051: LD_INT 3
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: LD_INT 3
62064: NEG
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 1
62072: PUSH
62073: LD_INT 2
62075: NEG
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: LIST
62085: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62086: LD_ADDR_VAR 0 54
62090: PUSH
62091: LD_INT 2
62093: PUSH
62094: LD_INT 1
62096: NEG
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 3
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 3
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: LIST
62126: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62127: LD_ADDR_VAR 0 55
62131: PUSH
62132: LD_INT 3
62134: PUSH
62135: LD_INT 2
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 3
62144: PUSH
62145: LD_INT 3
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 2
62154: PUSH
62155: LD_INT 3
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: LIST
62166: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62167: LD_ADDR_VAR 0 56
62171: PUSH
62172: LD_INT 1
62174: PUSH
62175: LD_INT 3
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: LD_INT 3
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 1
62194: NEG
62195: PUSH
62196: LD_INT 2
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: LIST
62207: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62208: LD_ADDR_VAR 0 57
62212: PUSH
62213: LD_INT 2
62215: NEG
62216: PUSH
62217: LD_INT 1
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 3
62226: NEG
62227: PUSH
62228: LD_INT 0
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 3
62237: NEG
62238: PUSH
62239: LD_INT 1
62241: NEG
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: LIST
62251: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62252: LD_ADDR_VAR 0 58
62256: PUSH
62257: LD_INT 2
62259: NEG
62260: PUSH
62261: LD_INT 3
62263: NEG
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 3
62271: NEG
62272: PUSH
62273: LD_INT 2
62275: NEG
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 3
62283: NEG
62284: PUSH
62285: LD_INT 3
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: LIST
62297: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62298: LD_ADDR_VAR 0 59
62302: PUSH
62303: LD_INT 1
62305: NEG
62306: PUSH
62307: LD_INT 2
62309: NEG
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 0
62317: PUSH
62318: LD_INT 2
62320: NEG
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 1
62328: PUSH
62329: LD_INT 1
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: LIST
62341: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62342: LD_ADDR_VAR 0 60
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: LD_INT 1
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 2
62360: PUSH
62361: LD_INT 0
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 2
62370: PUSH
62371: LD_INT 1
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: LIST
62382: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62383: LD_ADDR_VAR 0 61
62387: PUSH
62388: LD_INT 2
62390: PUSH
62391: LD_INT 1
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 2
62400: PUSH
62401: LD_INT 2
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 1
62410: PUSH
62411: LD_INT 2
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: LIST
62422: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62423: LD_ADDR_VAR 0 62
62427: PUSH
62428: LD_INT 1
62430: PUSH
62431: LD_INT 2
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 0
62440: PUSH
62441: LD_INT 2
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 1
62450: NEG
62451: PUSH
62452: LD_INT 1
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: LIST
62463: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62464: LD_ADDR_VAR 0 63
62468: PUSH
62469: LD_INT 1
62471: NEG
62472: PUSH
62473: LD_INT 1
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 2
62482: NEG
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 2
62493: NEG
62494: PUSH
62495: LD_INT 1
62497: NEG
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: LIST
62507: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62508: LD_ADDR_VAR 0 64
62512: PUSH
62513: LD_INT 1
62515: NEG
62516: PUSH
62517: LD_INT 2
62519: NEG
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 2
62527: NEG
62528: PUSH
62529: LD_INT 1
62531: NEG
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 2
62539: NEG
62540: PUSH
62541: LD_INT 2
62543: NEG
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: LIST
62553: ST_TO_ADDR
// end ; 2 :
62554: GO 65820
62556: LD_INT 2
62558: DOUBLE
62559: EQUAL
62560: IFTRUE 62564
62562: GO 65819
62564: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62565: LD_ADDR_VAR 0 29
62569: PUSH
62570: LD_INT 4
62572: PUSH
62573: LD_INT 0
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 4
62582: PUSH
62583: LD_INT 1
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 5
62593: PUSH
62594: LD_INT 0
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 5
62603: PUSH
62604: LD_INT 1
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 4
62613: PUSH
62614: LD_INT 1
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 3
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 3
62633: PUSH
62634: LD_INT 1
62636: NEG
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 3
62644: PUSH
62645: LD_INT 2
62647: NEG
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 5
62655: PUSH
62656: LD_INT 2
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 3
62665: PUSH
62666: LD_INT 3
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 3
62675: PUSH
62676: LD_INT 2
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 4
62685: PUSH
62686: LD_INT 3
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 4
62695: PUSH
62696: LD_INT 4
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 3
62705: PUSH
62706: LD_INT 4
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 2
62715: PUSH
62716: LD_INT 3
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 2
62725: PUSH
62726: LD_INT 2
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 4
62735: PUSH
62736: LD_INT 2
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 2
62745: PUSH
62746: LD_INT 4
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 0
62755: PUSH
62756: LD_INT 4
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: LD_INT 3
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 1
62775: PUSH
62776: LD_INT 4
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 1
62785: PUSH
62786: LD_INT 5
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 0
62795: PUSH
62796: LD_INT 5
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 1
62805: NEG
62806: PUSH
62807: LD_INT 4
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 1
62816: NEG
62817: PUSH
62818: LD_INT 3
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 2
62827: PUSH
62828: LD_INT 5
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 2
62837: NEG
62838: PUSH
62839: LD_INT 3
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 3
62848: NEG
62849: PUSH
62850: LD_INT 0
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 3
62859: NEG
62860: PUSH
62861: LD_INT 1
62863: NEG
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 2
62871: NEG
62872: PUSH
62873: LD_INT 0
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 2
62882: NEG
62883: PUSH
62884: LD_INT 1
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 3
62893: NEG
62894: PUSH
62895: LD_INT 1
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 4
62904: NEG
62905: PUSH
62906: LD_INT 0
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 4
62915: NEG
62916: PUSH
62917: LD_INT 1
62919: NEG
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 4
62927: NEG
62928: PUSH
62929: LD_INT 2
62931: NEG
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 2
62939: NEG
62940: PUSH
62941: LD_INT 2
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 4
62950: NEG
62951: PUSH
62952: LD_INT 4
62954: NEG
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 4
62962: NEG
62963: PUSH
62964: LD_INT 5
62966: NEG
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 3
62974: NEG
62975: PUSH
62976: LD_INT 4
62978: NEG
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 3
62986: NEG
62987: PUSH
62988: LD_INT 3
62990: NEG
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 4
62998: NEG
62999: PUSH
63000: LD_INT 3
63002: NEG
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 5
63010: NEG
63011: PUSH
63012: LD_INT 4
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 5
63022: NEG
63023: PUSH
63024: LD_INT 5
63026: NEG
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 3
63034: NEG
63035: PUSH
63036: LD_INT 5
63038: NEG
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 5
63046: NEG
63047: PUSH
63048: LD_INT 3
63050: NEG
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63103: LD_ADDR_VAR 0 30
63107: PUSH
63108: LD_INT 4
63110: PUSH
63111: LD_INT 4
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 4
63120: PUSH
63121: LD_INT 3
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 5
63130: PUSH
63131: LD_INT 4
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 5
63140: PUSH
63141: LD_INT 5
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 4
63150: PUSH
63151: LD_INT 5
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 3
63160: PUSH
63161: LD_INT 4
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 3
63170: PUSH
63171: LD_INT 3
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 5
63180: PUSH
63181: LD_INT 3
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 3
63190: PUSH
63191: LD_INT 5
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 0
63200: PUSH
63201: LD_INT 3
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: LD_INT 2
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: LD_INT 3
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 1
63230: PUSH
63231: LD_INT 4
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 0
63240: PUSH
63241: LD_INT 4
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 1
63250: NEG
63251: PUSH
63252: LD_INT 3
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 1
63261: NEG
63262: PUSH
63263: LD_INT 2
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 2
63272: PUSH
63273: LD_INT 4
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 2
63282: NEG
63283: PUSH
63284: LD_INT 2
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 4
63293: NEG
63294: PUSH
63295: LD_INT 0
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 4
63304: NEG
63305: PUSH
63306: LD_INT 1
63308: NEG
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 3
63316: NEG
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 3
63327: NEG
63328: PUSH
63329: LD_INT 1
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 4
63338: NEG
63339: PUSH
63340: LD_INT 1
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 5
63349: NEG
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 5
63360: NEG
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 5
63372: NEG
63373: PUSH
63374: LD_INT 2
63376: NEG
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 3
63384: NEG
63385: PUSH
63386: LD_INT 2
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 3
63395: NEG
63396: PUSH
63397: LD_INT 3
63399: NEG
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 3
63407: NEG
63408: PUSH
63409: LD_INT 4
63411: NEG
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 2
63419: NEG
63420: PUSH
63421: LD_INT 3
63423: NEG
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 2
63431: NEG
63432: PUSH
63433: LD_INT 2
63435: NEG
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 3
63443: NEG
63444: PUSH
63445: LD_INT 2
63447: NEG
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 4
63455: NEG
63456: PUSH
63457: LD_INT 3
63459: NEG
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 4
63467: NEG
63468: PUSH
63469: LD_INT 4
63471: NEG
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 2
63479: NEG
63480: PUSH
63481: LD_INT 4
63483: NEG
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 4
63491: NEG
63492: PUSH
63493: LD_INT 2
63495: NEG
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: LD_INT 4
63506: NEG
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 0
63514: PUSH
63515: LD_INT 5
63517: NEG
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 1
63525: PUSH
63526: LD_INT 4
63528: NEG
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 1
63536: PUSH
63537: LD_INT 3
63539: NEG
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 0
63547: PUSH
63548: LD_INT 3
63550: NEG
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 1
63558: NEG
63559: PUSH
63560: LD_INT 4
63562: NEG
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 1
63570: NEG
63571: PUSH
63572: LD_INT 5
63574: NEG
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 2
63582: PUSH
63583: LD_INT 3
63585: NEG
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 2
63593: NEG
63594: PUSH
63595: LD_INT 5
63597: NEG
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63650: LD_ADDR_VAR 0 31
63654: PUSH
63655: LD_INT 0
63657: PUSH
63658: LD_INT 4
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: LD_INT 3
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 1
63677: PUSH
63678: LD_INT 4
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 1
63687: PUSH
63688: LD_INT 5
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 0
63697: PUSH
63698: LD_INT 5
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 1
63707: NEG
63708: PUSH
63709: LD_INT 4
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 1
63718: NEG
63719: PUSH
63720: LD_INT 3
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 2
63729: PUSH
63730: LD_INT 5
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 2
63739: NEG
63740: PUSH
63741: LD_INT 3
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 3
63750: NEG
63751: PUSH
63752: LD_INT 0
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 3
63761: NEG
63762: PUSH
63763: LD_INT 1
63765: NEG
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 2
63773: NEG
63774: PUSH
63775: LD_INT 0
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 2
63784: NEG
63785: PUSH
63786: LD_INT 1
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 3
63795: NEG
63796: PUSH
63797: LD_INT 1
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 4
63806: NEG
63807: PUSH
63808: LD_INT 0
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 4
63817: NEG
63818: PUSH
63819: LD_INT 1
63821: NEG
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 4
63829: NEG
63830: PUSH
63831: LD_INT 2
63833: NEG
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 2
63841: NEG
63842: PUSH
63843: LD_INT 2
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 4
63852: NEG
63853: PUSH
63854: LD_INT 4
63856: NEG
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 4
63864: NEG
63865: PUSH
63866: LD_INT 5
63868: NEG
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 3
63876: NEG
63877: PUSH
63878: LD_INT 4
63880: NEG
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 3
63888: NEG
63889: PUSH
63890: LD_INT 3
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 4
63900: NEG
63901: PUSH
63902: LD_INT 3
63904: NEG
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 5
63912: NEG
63913: PUSH
63914: LD_INT 4
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 5
63924: NEG
63925: PUSH
63926: LD_INT 5
63928: NEG
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 3
63936: NEG
63937: PUSH
63938: LD_INT 5
63940: NEG
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 5
63948: NEG
63949: PUSH
63950: LD_INT 3
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 0
63960: PUSH
63961: LD_INT 3
63963: NEG
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 0
63971: PUSH
63972: LD_INT 4
63974: NEG
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 1
63982: PUSH
63983: LD_INT 3
63985: NEG
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 1
63993: PUSH
63994: LD_INT 2
63996: NEG
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 0
64004: PUSH
64005: LD_INT 2
64007: NEG
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 1
64015: NEG
64016: PUSH
64017: LD_INT 3
64019: NEG
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 1
64027: NEG
64028: PUSH
64029: LD_INT 4
64031: NEG
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 2
64039: PUSH
64040: LD_INT 2
64042: NEG
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 2
64050: NEG
64051: PUSH
64052: LD_INT 4
64054: NEG
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 4
64062: PUSH
64063: LD_INT 0
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 4
64072: PUSH
64073: LD_INT 1
64075: NEG
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 5
64083: PUSH
64084: LD_INT 0
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 5
64093: PUSH
64094: LD_INT 1
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 4
64103: PUSH
64104: LD_INT 1
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 3
64113: PUSH
64114: LD_INT 0
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 3
64123: PUSH
64124: LD_INT 1
64126: NEG
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 3
64134: PUSH
64135: LD_INT 2
64137: NEG
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 5
64145: PUSH
64146: LD_INT 2
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64200: LD_ADDR_VAR 0 32
64204: PUSH
64205: LD_INT 4
64207: NEG
64208: PUSH
64209: LD_INT 0
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 4
64218: NEG
64219: PUSH
64220: LD_INT 1
64222: NEG
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 3
64230: NEG
64231: PUSH
64232: LD_INT 0
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 3
64241: NEG
64242: PUSH
64243: LD_INT 1
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 4
64252: NEG
64253: PUSH
64254: LD_INT 1
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 5
64263: NEG
64264: PUSH
64265: LD_INT 0
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 5
64274: NEG
64275: PUSH
64276: LD_INT 1
64278: NEG
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 5
64286: NEG
64287: PUSH
64288: LD_INT 2
64290: NEG
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 3
64298: NEG
64299: PUSH
64300: LD_INT 2
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 3
64309: NEG
64310: PUSH
64311: LD_INT 3
64313: NEG
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 3
64321: NEG
64322: PUSH
64323: LD_INT 4
64325: NEG
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 2
64333: NEG
64334: PUSH
64335: LD_INT 3
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 2
64345: NEG
64346: PUSH
64347: LD_INT 2
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 3
64357: NEG
64358: PUSH
64359: LD_INT 2
64361: NEG
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 4
64369: NEG
64370: PUSH
64371: LD_INT 3
64373: NEG
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 4
64381: NEG
64382: PUSH
64383: LD_INT 4
64385: NEG
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 2
64393: NEG
64394: PUSH
64395: LD_INT 4
64397: NEG
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 4
64405: NEG
64406: PUSH
64407: LD_INT 2
64409: NEG
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 0
64417: PUSH
64418: LD_INT 4
64420: NEG
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 0
64428: PUSH
64429: LD_INT 5
64431: NEG
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 1
64439: PUSH
64440: LD_INT 4
64442: NEG
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 1
64450: PUSH
64451: LD_INT 3
64453: NEG
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 0
64461: PUSH
64462: LD_INT 3
64464: NEG
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 1
64472: NEG
64473: PUSH
64474: LD_INT 4
64476: NEG
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 1
64484: NEG
64485: PUSH
64486: LD_INT 5
64488: NEG
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 2
64496: PUSH
64497: LD_INT 3
64499: NEG
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 2
64507: NEG
64508: PUSH
64509: LD_INT 5
64511: NEG
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 3
64519: PUSH
64520: LD_INT 0
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 3
64529: PUSH
64530: LD_INT 1
64532: NEG
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 4
64540: PUSH
64541: LD_INT 0
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 4
64550: PUSH
64551: LD_INT 1
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 3
64560: PUSH
64561: LD_INT 1
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 2
64570: PUSH
64571: LD_INT 0
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 2
64580: PUSH
64581: LD_INT 1
64583: NEG
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 2
64591: PUSH
64592: LD_INT 2
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 4
64602: PUSH
64603: LD_INT 2
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 4
64612: PUSH
64613: LD_INT 4
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 4
64622: PUSH
64623: LD_INT 3
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 5
64632: PUSH
64633: LD_INT 4
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 5
64642: PUSH
64643: LD_INT 5
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 4
64652: PUSH
64653: LD_INT 5
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 3
64662: PUSH
64663: LD_INT 4
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 3
64672: PUSH
64673: LD_INT 3
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 5
64682: PUSH
64683: LD_INT 3
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 3
64692: PUSH
64693: LD_INT 5
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64747: LD_ADDR_VAR 0 33
64751: PUSH
64752: LD_INT 4
64754: NEG
64755: PUSH
64756: LD_INT 4
64758: NEG
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 4
64766: NEG
64767: PUSH
64768: LD_INT 5
64770: NEG
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 3
64778: NEG
64779: PUSH
64780: LD_INT 4
64782: NEG
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 3
64790: NEG
64791: PUSH
64792: LD_INT 3
64794: NEG
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 4
64802: NEG
64803: PUSH
64804: LD_INT 3
64806: NEG
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 5
64814: NEG
64815: PUSH
64816: LD_INT 4
64818: NEG
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 5
64826: NEG
64827: PUSH
64828: LD_INT 5
64830: NEG
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 3
64838: NEG
64839: PUSH
64840: LD_INT 5
64842: NEG
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 5
64850: NEG
64851: PUSH
64852: LD_INT 3
64854: NEG
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: LD_INT 3
64865: NEG
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 0
64873: PUSH
64874: LD_INT 4
64876: NEG
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 1
64884: PUSH
64885: LD_INT 3
64887: NEG
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 1
64895: PUSH
64896: LD_INT 2
64898: NEG
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 0
64906: PUSH
64907: LD_INT 2
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 1
64917: NEG
64918: PUSH
64919: LD_INT 3
64921: NEG
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 1
64929: NEG
64930: PUSH
64931: LD_INT 4
64933: NEG
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 2
64941: PUSH
64942: LD_INT 2
64944: NEG
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 2
64952: NEG
64953: PUSH
64954: LD_INT 4
64956: NEG
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 4
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 4
64974: PUSH
64975: LD_INT 1
64977: NEG
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 5
64985: PUSH
64986: LD_INT 0
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 5
64995: PUSH
64996: LD_INT 1
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 4
65005: PUSH
65006: LD_INT 1
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 3
65015: PUSH
65016: LD_INT 0
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 3
65025: PUSH
65026: LD_INT 1
65028: NEG
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 3
65036: PUSH
65037: LD_INT 2
65039: NEG
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 5
65047: PUSH
65048: LD_INT 2
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 3
65057: PUSH
65058: LD_INT 3
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 3
65067: PUSH
65068: LD_INT 2
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 4
65077: PUSH
65078: LD_INT 3
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 4
65087: PUSH
65088: LD_INT 4
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 3
65097: PUSH
65098: LD_INT 4
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 2
65107: PUSH
65108: LD_INT 3
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 2
65117: PUSH
65118: LD_INT 2
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 4
65127: PUSH
65128: LD_INT 2
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 2
65137: PUSH
65138: LD_INT 4
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 0
65147: PUSH
65148: LD_INT 4
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 0
65157: PUSH
65158: LD_INT 3
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 1
65167: PUSH
65168: LD_INT 4
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 1
65177: PUSH
65178: LD_INT 5
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 0
65187: PUSH
65188: LD_INT 5
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 1
65197: NEG
65198: PUSH
65199: LD_INT 4
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 1
65208: NEG
65209: PUSH
65210: LD_INT 3
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 2
65219: PUSH
65220: LD_INT 5
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 2
65229: NEG
65230: PUSH
65231: LD_INT 3
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65285: LD_ADDR_VAR 0 34
65289: PUSH
65290: LD_INT 0
65292: PUSH
65293: LD_INT 4
65295: NEG
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 0
65303: PUSH
65304: LD_INT 5
65306: NEG
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 1
65314: PUSH
65315: LD_INT 4
65317: NEG
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 1
65325: PUSH
65326: LD_INT 3
65328: NEG
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 0
65336: PUSH
65337: LD_INT 3
65339: NEG
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 1
65347: NEG
65348: PUSH
65349: LD_INT 4
65351: NEG
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 1
65359: NEG
65360: PUSH
65361: LD_INT 5
65363: NEG
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 2
65371: PUSH
65372: LD_INT 3
65374: NEG
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 2
65382: NEG
65383: PUSH
65384: LD_INT 5
65386: NEG
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 3
65394: PUSH
65395: LD_INT 0
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 3
65404: PUSH
65405: LD_INT 1
65407: NEG
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 4
65415: PUSH
65416: LD_INT 0
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 4
65425: PUSH
65426: LD_INT 1
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 3
65435: PUSH
65436: LD_INT 1
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 2
65445: PUSH
65446: LD_INT 0
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 2
65455: PUSH
65456: LD_INT 1
65458: NEG
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 2
65466: PUSH
65467: LD_INT 2
65469: NEG
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 4
65477: PUSH
65478: LD_INT 2
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 4
65487: PUSH
65488: LD_INT 4
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 4
65497: PUSH
65498: LD_INT 3
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 5
65507: PUSH
65508: LD_INT 4
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 5
65517: PUSH
65518: LD_INT 5
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 4
65527: PUSH
65528: LD_INT 5
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 3
65537: PUSH
65538: LD_INT 4
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 3
65547: PUSH
65548: LD_INT 3
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 5
65557: PUSH
65558: LD_INT 3
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 3
65567: PUSH
65568: LD_INT 5
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 0
65577: PUSH
65578: LD_INT 3
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 0
65587: PUSH
65588: LD_INT 2
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 1
65597: PUSH
65598: LD_INT 3
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 1
65607: PUSH
65608: LD_INT 4
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 0
65617: PUSH
65618: LD_INT 4
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 1
65627: NEG
65628: PUSH
65629: LD_INT 3
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 1
65638: NEG
65639: PUSH
65640: LD_INT 2
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 2
65649: PUSH
65650: LD_INT 4
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 2
65659: NEG
65660: PUSH
65661: LD_INT 2
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 4
65670: NEG
65671: PUSH
65672: LD_INT 0
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 4
65681: NEG
65682: PUSH
65683: LD_INT 1
65685: NEG
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 3
65693: NEG
65694: PUSH
65695: LD_INT 0
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 3
65704: NEG
65705: PUSH
65706: LD_INT 1
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 4
65715: NEG
65716: PUSH
65717: LD_INT 1
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 5
65726: NEG
65727: PUSH
65728: LD_INT 0
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 5
65737: NEG
65738: PUSH
65739: LD_INT 1
65741: NEG
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 5
65749: NEG
65750: PUSH
65751: LD_INT 2
65753: NEG
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 3
65761: NEG
65762: PUSH
65763: LD_INT 2
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: ST_TO_ADDR
// end ; end ;
65817: GO 65820
65819: POP
// case btype of b_depot , b_warehouse :
65820: LD_VAR 0 1
65824: PUSH
65825: LD_INT 0
65827: DOUBLE
65828: EQUAL
65829: IFTRUE 65839
65831: LD_INT 1
65833: DOUBLE
65834: EQUAL
65835: IFTRUE 65839
65837: GO 66040
65839: POP
// case nation of nation_american :
65840: LD_VAR 0 5
65844: PUSH
65845: LD_INT 1
65847: DOUBLE
65848: EQUAL
65849: IFTRUE 65853
65851: GO 65909
65853: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65854: LD_ADDR_VAR 0 9
65858: PUSH
65859: LD_VAR 0 11
65863: PUSH
65864: LD_VAR 0 12
65868: PUSH
65869: LD_VAR 0 13
65873: PUSH
65874: LD_VAR 0 14
65878: PUSH
65879: LD_VAR 0 15
65883: PUSH
65884: LD_VAR 0 16
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: PUSH
65897: LD_VAR 0 4
65901: PUSH
65902: LD_INT 1
65904: PLUS
65905: ARRAY
65906: ST_TO_ADDR
65907: GO 66038
65909: LD_INT 2
65911: DOUBLE
65912: EQUAL
65913: IFTRUE 65917
65915: GO 65973
65917: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65918: LD_ADDR_VAR 0 9
65922: PUSH
65923: LD_VAR 0 17
65927: PUSH
65928: LD_VAR 0 18
65932: PUSH
65933: LD_VAR 0 19
65937: PUSH
65938: LD_VAR 0 20
65942: PUSH
65943: LD_VAR 0 21
65947: PUSH
65948: LD_VAR 0 22
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: PUSH
65961: LD_VAR 0 4
65965: PUSH
65966: LD_INT 1
65968: PLUS
65969: ARRAY
65970: ST_TO_ADDR
65971: GO 66038
65973: LD_INT 3
65975: DOUBLE
65976: EQUAL
65977: IFTRUE 65981
65979: GO 66037
65981: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65982: LD_ADDR_VAR 0 9
65986: PUSH
65987: LD_VAR 0 23
65991: PUSH
65992: LD_VAR 0 24
65996: PUSH
65997: LD_VAR 0 25
66001: PUSH
66002: LD_VAR 0 26
66006: PUSH
66007: LD_VAR 0 27
66011: PUSH
66012: LD_VAR 0 28
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: PUSH
66025: LD_VAR 0 4
66029: PUSH
66030: LD_INT 1
66032: PLUS
66033: ARRAY
66034: ST_TO_ADDR
66035: GO 66038
66037: POP
66038: GO 66593
66040: LD_INT 2
66042: DOUBLE
66043: EQUAL
66044: IFTRUE 66054
66046: LD_INT 3
66048: DOUBLE
66049: EQUAL
66050: IFTRUE 66054
66052: GO 66110
66054: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66055: LD_ADDR_VAR 0 9
66059: PUSH
66060: LD_VAR 0 29
66064: PUSH
66065: LD_VAR 0 30
66069: PUSH
66070: LD_VAR 0 31
66074: PUSH
66075: LD_VAR 0 32
66079: PUSH
66080: LD_VAR 0 33
66084: PUSH
66085: LD_VAR 0 34
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: PUSH
66098: LD_VAR 0 4
66102: PUSH
66103: LD_INT 1
66105: PLUS
66106: ARRAY
66107: ST_TO_ADDR
66108: GO 66593
66110: LD_INT 16
66112: DOUBLE
66113: EQUAL
66114: IFTRUE 66172
66116: LD_INT 17
66118: DOUBLE
66119: EQUAL
66120: IFTRUE 66172
66122: LD_INT 18
66124: DOUBLE
66125: EQUAL
66126: IFTRUE 66172
66128: LD_INT 19
66130: DOUBLE
66131: EQUAL
66132: IFTRUE 66172
66134: LD_INT 22
66136: DOUBLE
66137: EQUAL
66138: IFTRUE 66172
66140: LD_INT 20
66142: DOUBLE
66143: EQUAL
66144: IFTRUE 66172
66146: LD_INT 21
66148: DOUBLE
66149: EQUAL
66150: IFTRUE 66172
66152: LD_INT 23
66154: DOUBLE
66155: EQUAL
66156: IFTRUE 66172
66158: LD_INT 24
66160: DOUBLE
66161: EQUAL
66162: IFTRUE 66172
66164: LD_INT 25
66166: DOUBLE
66167: EQUAL
66168: IFTRUE 66172
66170: GO 66228
66172: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66173: LD_ADDR_VAR 0 9
66177: PUSH
66178: LD_VAR 0 35
66182: PUSH
66183: LD_VAR 0 36
66187: PUSH
66188: LD_VAR 0 37
66192: PUSH
66193: LD_VAR 0 38
66197: PUSH
66198: LD_VAR 0 39
66202: PUSH
66203: LD_VAR 0 40
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: PUSH
66216: LD_VAR 0 4
66220: PUSH
66221: LD_INT 1
66223: PLUS
66224: ARRAY
66225: ST_TO_ADDR
66226: GO 66593
66228: LD_INT 6
66230: DOUBLE
66231: EQUAL
66232: IFTRUE 66284
66234: LD_INT 7
66236: DOUBLE
66237: EQUAL
66238: IFTRUE 66284
66240: LD_INT 8
66242: DOUBLE
66243: EQUAL
66244: IFTRUE 66284
66246: LD_INT 13
66248: DOUBLE
66249: EQUAL
66250: IFTRUE 66284
66252: LD_INT 12
66254: DOUBLE
66255: EQUAL
66256: IFTRUE 66284
66258: LD_INT 15
66260: DOUBLE
66261: EQUAL
66262: IFTRUE 66284
66264: LD_INT 11
66266: DOUBLE
66267: EQUAL
66268: IFTRUE 66284
66270: LD_INT 14
66272: DOUBLE
66273: EQUAL
66274: IFTRUE 66284
66276: LD_INT 10
66278: DOUBLE
66279: EQUAL
66280: IFTRUE 66284
66282: GO 66340
66284: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66285: LD_ADDR_VAR 0 9
66289: PUSH
66290: LD_VAR 0 41
66294: PUSH
66295: LD_VAR 0 42
66299: PUSH
66300: LD_VAR 0 43
66304: PUSH
66305: LD_VAR 0 44
66309: PUSH
66310: LD_VAR 0 45
66314: PUSH
66315: LD_VAR 0 46
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: PUSH
66328: LD_VAR 0 4
66332: PUSH
66333: LD_INT 1
66335: PLUS
66336: ARRAY
66337: ST_TO_ADDR
66338: GO 66593
66340: LD_INT 36
66342: DOUBLE
66343: EQUAL
66344: IFTRUE 66348
66346: GO 66404
66348: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66349: LD_ADDR_VAR 0 9
66353: PUSH
66354: LD_VAR 0 47
66358: PUSH
66359: LD_VAR 0 48
66363: PUSH
66364: LD_VAR 0 49
66368: PUSH
66369: LD_VAR 0 50
66373: PUSH
66374: LD_VAR 0 51
66378: PUSH
66379: LD_VAR 0 52
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: PUSH
66392: LD_VAR 0 4
66396: PUSH
66397: LD_INT 1
66399: PLUS
66400: ARRAY
66401: ST_TO_ADDR
66402: GO 66593
66404: LD_INT 4
66406: DOUBLE
66407: EQUAL
66408: IFTRUE 66430
66410: LD_INT 5
66412: DOUBLE
66413: EQUAL
66414: IFTRUE 66430
66416: LD_INT 34
66418: DOUBLE
66419: EQUAL
66420: IFTRUE 66430
66422: LD_INT 37
66424: DOUBLE
66425: EQUAL
66426: IFTRUE 66430
66428: GO 66486
66430: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66431: LD_ADDR_VAR 0 9
66435: PUSH
66436: LD_VAR 0 53
66440: PUSH
66441: LD_VAR 0 54
66445: PUSH
66446: LD_VAR 0 55
66450: PUSH
66451: LD_VAR 0 56
66455: PUSH
66456: LD_VAR 0 57
66460: PUSH
66461: LD_VAR 0 58
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: PUSH
66474: LD_VAR 0 4
66478: PUSH
66479: LD_INT 1
66481: PLUS
66482: ARRAY
66483: ST_TO_ADDR
66484: GO 66593
66486: LD_INT 31
66488: DOUBLE
66489: EQUAL
66490: IFTRUE 66536
66492: LD_INT 32
66494: DOUBLE
66495: EQUAL
66496: IFTRUE 66536
66498: LD_INT 33
66500: DOUBLE
66501: EQUAL
66502: IFTRUE 66536
66504: LD_INT 27
66506: DOUBLE
66507: EQUAL
66508: IFTRUE 66536
66510: LD_INT 26
66512: DOUBLE
66513: EQUAL
66514: IFTRUE 66536
66516: LD_INT 28
66518: DOUBLE
66519: EQUAL
66520: IFTRUE 66536
66522: LD_INT 29
66524: DOUBLE
66525: EQUAL
66526: IFTRUE 66536
66528: LD_INT 30
66530: DOUBLE
66531: EQUAL
66532: IFTRUE 66536
66534: GO 66592
66536: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66537: LD_ADDR_VAR 0 9
66541: PUSH
66542: LD_VAR 0 59
66546: PUSH
66547: LD_VAR 0 60
66551: PUSH
66552: LD_VAR 0 61
66556: PUSH
66557: LD_VAR 0 62
66561: PUSH
66562: LD_VAR 0 63
66566: PUSH
66567: LD_VAR 0 64
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: PUSH
66580: LD_VAR 0 4
66584: PUSH
66585: LD_INT 1
66587: PLUS
66588: ARRAY
66589: ST_TO_ADDR
66590: GO 66593
66592: POP
// temp_list2 = [ ] ;
66593: LD_ADDR_VAR 0 10
66597: PUSH
66598: EMPTY
66599: ST_TO_ADDR
// for i in temp_list do
66600: LD_ADDR_VAR 0 8
66604: PUSH
66605: LD_VAR 0 9
66609: PUSH
66610: FOR_IN
66611: IFFALSE 66663
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66613: LD_ADDR_VAR 0 10
66617: PUSH
66618: LD_VAR 0 10
66622: PUSH
66623: LD_VAR 0 8
66627: PUSH
66628: LD_INT 1
66630: ARRAY
66631: PUSH
66632: LD_VAR 0 2
66636: PLUS
66637: PUSH
66638: LD_VAR 0 8
66642: PUSH
66643: LD_INT 2
66645: ARRAY
66646: PUSH
66647: LD_VAR 0 3
66651: PLUS
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: EMPTY
66658: LIST
66659: ADD
66660: ST_TO_ADDR
66661: GO 66610
66663: POP
66664: POP
// result = temp_list2 ;
66665: LD_ADDR_VAR 0 7
66669: PUSH
66670: LD_VAR 0 10
66674: ST_TO_ADDR
// end ;
66675: LD_VAR 0 7
66679: RET
// export function EnemyInRange ( unit , dist ) ; begin
66680: LD_INT 0
66682: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66683: LD_ADDR_VAR 0 3
66687: PUSH
66688: LD_VAR 0 1
66692: PPUSH
66693: CALL_OW 255
66697: PPUSH
66698: LD_VAR 0 1
66702: PPUSH
66703: CALL_OW 250
66707: PPUSH
66708: LD_VAR 0 1
66712: PPUSH
66713: CALL_OW 251
66717: PPUSH
66718: LD_VAR 0 2
66722: PPUSH
66723: CALL 39937 0 4
66727: PUSH
66728: LD_INT 4
66730: ARRAY
66731: ST_TO_ADDR
// end ;
66732: LD_VAR 0 3
66736: RET
// export function PlayerSeeMe ( unit ) ; begin
66737: LD_INT 0
66739: PPUSH
// result := See ( your_side , unit ) ;
66740: LD_ADDR_VAR 0 2
66744: PUSH
66745: LD_OWVAR 2
66749: PPUSH
66750: LD_VAR 0 1
66754: PPUSH
66755: CALL_OW 292
66759: ST_TO_ADDR
// end ;
66760: LD_VAR 0 2
66764: RET
// export function ReverseDir ( unit ) ; begin
66765: LD_INT 0
66767: PPUSH
// if not unit then
66768: LD_VAR 0 1
66772: NOT
66773: IFFALSE 66777
// exit ;
66775: GO 66800
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66777: LD_ADDR_VAR 0 2
66781: PUSH
66782: LD_VAR 0 1
66786: PPUSH
66787: CALL_OW 254
66791: PUSH
66792: LD_INT 3
66794: PLUS
66795: PUSH
66796: LD_INT 6
66798: MOD
66799: ST_TO_ADDR
// end ;
66800: LD_VAR 0 2
66804: RET
// export function ReverseArray ( array ) ; var i ; begin
66805: LD_INT 0
66807: PPUSH
66808: PPUSH
// if not array then
66809: LD_VAR 0 1
66813: NOT
66814: IFFALSE 66818
// exit ;
66816: GO 66873
// result := [ ] ;
66818: LD_ADDR_VAR 0 2
66822: PUSH
66823: EMPTY
66824: ST_TO_ADDR
// for i := array downto 1 do
66825: LD_ADDR_VAR 0 3
66829: PUSH
66830: DOUBLE
66831: LD_VAR 0 1
66835: INC
66836: ST_TO_ADDR
66837: LD_INT 1
66839: PUSH
66840: FOR_DOWNTO
66841: IFFALSE 66871
// result := Join ( result , array [ i ] ) ;
66843: LD_ADDR_VAR 0 2
66847: PUSH
66848: LD_VAR 0 2
66852: PPUSH
66853: LD_VAR 0 1
66857: PUSH
66858: LD_VAR 0 3
66862: ARRAY
66863: PPUSH
66864: CALL 71715 0 2
66868: ST_TO_ADDR
66869: GO 66840
66871: POP
66872: POP
// end ;
66873: LD_VAR 0 2
66877: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
66878: LD_INT 0
66880: PPUSH
66881: PPUSH
66882: PPUSH
66883: PPUSH
66884: PPUSH
66885: PPUSH
// if not unit or not hexes then
66886: LD_VAR 0 1
66890: NOT
66891: IFTRUE 66900
66893: PUSH
66894: LD_VAR 0 2
66898: NOT
66899: OR
66900: IFFALSE 66904
// exit ;
66902: GO 67027
// dist := 9999 ;
66904: LD_ADDR_VAR 0 5
66908: PUSH
66909: LD_INT 9999
66911: ST_TO_ADDR
// for i = 1 to hexes do
66912: LD_ADDR_VAR 0 4
66916: PUSH
66917: DOUBLE
66918: LD_INT 1
66920: DEC
66921: ST_TO_ADDR
66922: LD_VAR 0 2
66926: PUSH
66927: FOR_TO
66928: IFFALSE 67015
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66930: LD_ADDR_VAR 0 6
66934: PUSH
66935: LD_VAR 0 1
66939: PPUSH
66940: LD_VAR 0 2
66944: PUSH
66945: LD_VAR 0 4
66949: ARRAY
66950: PUSH
66951: LD_INT 1
66953: ARRAY
66954: PPUSH
66955: LD_VAR 0 2
66959: PUSH
66960: LD_VAR 0 4
66964: ARRAY
66965: PUSH
66966: LD_INT 2
66968: ARRAY
66969: PPUSH
66970: CALL_OW 297
66974: ST_TO_ADDR
// if tdist < dist then
66975: LD_VAR 0 6
66979: PUSH
66980: LD_VAR 0 5
66984: LESS
66985: IFFALSE 67013
// begin hex := hexes [ i ] ;
66987: LD_ADDR_VAR 0 8
66991: PUSH
66992: LD_VAR 0 2
66996: PUSH
66997: LD_VAR 0 4
67001: ARRAY
67002: ST_TO_ADDR
// dist := tdist ;
67003: LD_ADDR_VAR 0 5
67007: PUSH
67008: LD_VAR 0 6
67012: ST_TO_ADDR
// end ; end ;
67013: GO 66927
67015: POP
67016: POP
// result := hex ;
67017: LD_ADDR_VAR 0 3
67021: PUSH
67022: LD_VAR 0 8
67026: ST_TO_ADDR
// end ;
67027: LD_VAR 0 3
67031: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67032: LD_INT 0
67034: PPUSH
67035: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67036: LD_VAR 0 1
67040: NOT
67041: IFTRUE 67080
67043: PUSH
67044: LD_VAR 0 1
67048: PUSH
67049: LD_INT 21
67051: PUSH
67052: LD_INT 2
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 23
67061: PUSH
67062: LD_INT 2
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PPUSH
67073: CALL_OW 69
67077: IN
67078: NOT
67079: OR
67080: IFFALSE 67084
// exit ;
67082: GO 67131
// for i = 1 to 3 do
67084: LD_ADDR_VAR 0 3
67088: PUSH
67089: DOUBLE
67090: LD_INT 1
67092: DEC
67093: ST_TO_ADDR
67094: LD_INT 3
67096: PUSH
67097: FOR_TO
67098: IFFALSE 67129
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67100: LD_VAR 0 1
67104: PPUSH
67105: CALL_OW 250
67109: PPUSH
67110: LD_VAR 0 1
67114: PPUSH
67115: CALL_OW 251
67119: PPUSH
67120: LD_INT 1
67122: PPUSH
67123: CALL_OW 453
67127: GO 67097
67129: POP
67130: POP
// end ;
67131: LD_VAR 0 2
67135: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67136: LD_INT 0
67138: PPUSH
67139: PPUSH
67140: PPUSH
67141: PPUSH
67142: PPUSH
67143: PPUSH
// if not unit or not enemy_unit then
67144: LD_VAR 0 1
67148: NOT
67149: IFTRUE 67158
67151: PUSH
67152: LD_VAR 0 2
67156: NOT
67157: OR
67158: IFFALSE 67162
// exit ;
67160: GO 67633
// if GetLives ( i ) < 250 then
67162: LD_VAR 0 4
67166: PPUSH
67167: CALL_OW 256
67171: PUSH
67172: LD_INT 250
67174: LESS
67175: IFFALSE 67188
// begin ComAutodestruct ( i ) ;
67177: LD_VAR 0 4
67181: PPUSH
67182: CALL 67032 0 1
// exit ;
67186: GO 67633
// end ; x := GetX ( enemy_unit ) ;
67188: LD_ADDR_VAR 0 7
67192: PUSH
67193: LD_VAR 0 2
67197: PPUSH
67198: CALL_OW 250
67202: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67203: LD_ADDR_VAR 0 8
67207: PUSH
67208: LD_VAR 0 2
67212: PPUSH
67213: CALL_OW 251
67217: ST_TO_ADDR
// if not x or not y then
67218: LD_VAR 0 7
67222: NOT
67223: IFTRUE 67232
67225: PUSH
67226: LD_VAR 0 8
67230: NOT
67231: OR
67232: IFFALSE 67236
// exit ;
67234: GO 67633
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67236: LD_ADDR_VAR 0 6
67240: PUSH
67241: LD_VAR 0 7
67245: PPUSH
67246: LD_INT 0
67248: PPUSH
67249: LD_INT 4
67251: PPUSH
67252: CALL_OW 272
67256: PUSH
67257: LD_VAR 0 8
67261: PPUSH
67262: LD_INT 0
67264: PPUSH
67265: LD_INT 4
67267: PPUSH
67268: CALL_OW 273
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_VAR 0 7
67281: PPUSH
67282: LD_INT 1
67284: PPUSH
67285: LD_INT 4
67287: PPUSH
67288: CALL_OW 272
67292: PUSH
67293: LD_VAR 0 8
67297: PPUSH
67298: LD_INT 1
67300: PPUSH
67301: LD_INT 4
67303: PPUSH
67304: CALL_OW 273
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_VAR 0 7
67317: PPUSH
67318: LD_INT 2
67320: PPUSH
67321: LD_INT 4
67323: PPUSH
67324: CALL_OW 272
67328: PUSH
67329: LD_VAR 0 8
67333: PPUSH
67334: LD_INT 2
67336: PPUSH
67337: LD_INT 4
67339: PPUSH
67340: CALL_OW 273
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_VAR 0 7
67353: PPUSH
67354: LD_INT 3
67356: PPUSH
67357: LD_INT 4
67359: PPUSH
67360: CALL_OW 272
67364: PUSH
67365: LD_VAR 0 8
67369: PPUSH
67370: LD_INT 3
67372: PPUSH
67373: LD_INT 4
67375: PPUSH
67376: CALL_OW 273
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_VAR 0 7
67389: PPUSH
67390: LD_INT 4
67392: PPUSH
67393: LD_INT 4
67395: PPUSH
67396: CALL_OW 272
67400: PUSH
67401: LD_VAR 0 8
67405: PPUSH
67406: LD_INT 4
67408: PPUSH
67409: LD_INT 4
67411: PPUSH
67412: CALL_OW 273
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_VAR 0 7
67425: PPUSH
67426: LD_INT 5
67428: PPUSH
67429: LD_INT 4
67431: PPUSH
67432: CALL_OW 272
67436: PUSH
67437: LD_VAR 0 8
67441: PPUSH
67442: LD_INT 5
67444: PPUSH
67445: LD_INT 4
67447: PPUSH
67448: CALL_OW 273
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: LIST
67464: ST_TO_ADDR
// for i = tmp downto 1 do
67465: LD_ADDR_VAR 0 4
67469: PUSH
67470: DOUBLE
67471: LD_VAR 0 6
67475: INC
67476: ST_TO_ADDR
67477: LD_INT 1
67479: PUSH
67480: FOR_DOWNTO
67481: IFFALSE 67584
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67483: LD_VAR 0 6
67487: PUSH
67488: LD_VAR 0 4
67492: ARRAY
67493: PUSH
67494: LD_INT 1
67496: ARRAY
67497: PPUSH
67498: LD_VAR 0 6
67502: PUSH
67503: LD_VAR 0 4
67507: ARRAY
67508: PUSH
67509: LD_INT 2
67511: ARRAY
67512: PPUSH
67513: CALL_OW 488
67517: NOT
67518: IFTRUE 67560
67520: PUSH
67521: LD_VAR 0 6
67525: PUSH
67526: LD_VAR 0 4
67530: ARRAY
67531: PUSH
67532: LD_INT 1
67534: ARRAY
67535: PPUSH
67536: LD_VAR 0 6
67540: PUSH
67541: LD_VAR 0 4
67545: ARRAY
67546: PUSH
67547: LD_INT 2
67549: ARRAY
67550: PPUSH
67551: CALL_OW 428
67555: PUSH
67556: LD_INT 0
67558: NONEQUAL
67559: OR
67560: IFFALSE 67582
// tmp := Delete ( tmp , i ) ;
67562: LD_ADDR_VAR 0 6
67566: PUSH
67567: LD_VAR 0 6
67571: PPUSH
67572: LD_VAR 0 4
67576: PPUSH
67577: CALL_OW 3
67581: ST_TO_ADDR
67582: GO 67480
67584: POP
67585: POP
// j := GetClosestHex ( unit , tmp ) ;
67586: LD_ADDR_VAR 0 5
67590: PUSH
67591: LD_VAR 0 1
67595: PPUSH
67596: LD_VAR 0 6
67600: PPUSH
67601: CALL 66878 0 2
67605: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67606: LD_VAR 0 1
67610: PPUSH
67611: LD_VAR 0 5
67615: PUSH
67616: LD_INT 1
67618: ARRAY
67619: PPUSH
67620: LD_VAR 0 5
67624: PUSH
67625: LD_INT 2
67627: ARRAY
67628: PPUSH
67629: CALL_OW 111
// end ;
67633: LD_VAR 0 3
67637: RET
// export function PrepareApemanSoldier ( ) ; begin
67638: LD_INT 0
67640: PPUSH
// uc_nation := 0 ;
67641: LD_ADDR_OWVAR 21
67645: PUSH
67646: LD_INT 0
67648: ST_TO_ADDR
// hc_sex := sex_male ;
67649: LD_ADDR_OWVAR 27
67653: PUSH
67654: LD_INT 1
67656: ST_TO_ADDR
// hc_name :=  ;
67657: LD_ADDR_OWVAR 26
67661: PUSH
67662: LD_STRING 
67664: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67665: LD_ADDR_OWVAR 28
67669: PUSH
67670: LD_INT 15
67672: ST_TO_ADDR
// hc_gallery :=  ;
67673: LD_ADDR_OWVAR 33
67677: PUSH
67678: LD_STRING 
67680: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67681: LD_ADDR_OWVAR 31
67685: PUSH
67686: LD_INT 0
67688: PPUSH
67689: LD_INT 3
67691: PPUSH
67692: CALL_OW 12
67696: PUSH
67697: LD_INT 0
67699: PPUSH
67700: LD_INT 3
67702: PPUSH
67703: CALL_OW 12
67707: PUSH
67708: LD_INT 0
67710: PUSH
67711: LD_INT 0
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67720: LD_ADDR_OWVAR 29
67724: PUSH
67725: LD_INT 12
67727: PUSH
67728: LD_INT 12
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: ST_TO_ADDR
// end ;
67735: LD_VAR 0 1
67739: RET
// export function PrepareApemanEngineer ( ) ; begin
67740: LD_INT 0
67742: PPUSH
// uc_nation := 0 ;
67743: LD_ADDR_OWVAR 21
67747: PUSH
67748: LD_INT 0
67750: ST_TO_ADDR
// hc_sex := sex_male ;
67751: LD_ADDR_OWVAR 27
67755: PUSH
67756: LD_INT 1
67758: ST_TO_ADDR
// hc_name :=  ;
67759: LD_ADDR_OWVAR 26
67763: PUSH
67764: LD_STRING 
67766: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
67767: LD_ADDR_OWVAR 28
67771: PUSH
67772: LD_INT 16
67774: ST_TO_ADDR
// hc_gallery :=  ;
67775: LD_ADDR_OWVAR 33
67779: PUSH
67780: LD_STRING 
67782: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67783: LD_ADDR_OWVAR 31
67787: PUSH
67788: LD_INT 0
67790: PPUSH
67791: LD_INT 3
67793: PPUSH
67794: CALL_OW 12
67798: PUSH
67799: LD_INT 0
67801: PPUSH
67802: LD_INT 3
67804: PPUSH
67805: CALL_OW 12
67809: PUSH
67810: LD_INT 0
67812: PUSH
67813: LD_INT 0
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67822: LD_ADDR_OWVAR 29
67826: PUSH
67827: LD_INT 12
67829: PUSH
67830: LD_INT 12
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: ST_TO_ADDR
// end ;
67837: LD_VAR 0 1
67841: RET
// export function PrepareApeman ( agressivity ) ; begin
67842: LD_INT 0
67844: PPUSH
// uc_side := 0 ;
67845: LD_ADDR_OWVAR 20
67849: PUSH
67850: LD_INT 0
67852: ST_TO_ADDR
// uc_nation := 0 ;
67853: LD_ADDR_OWVAR 21
67857: PUSH
67858: LD_INT 0
67860: ST_TO_ADDR
// hc_sex := sex_male ;
67861: LD_ADDR_OWVAR 27
67865: PUSH
67866: LD_INT 1
67868: ST_TO_ADDR
// hc_class := class_apeman ;
67869: LD_ADDR_OWVAR 28
67873: PUSH
67874: LD_INT 12
67876: ST_TO_ADDR
// hc_gallery :=  ;
67877: LD_ADDR_OWVAR 33
67881: PUSH
67882: LD_STRING 
67884: ST_TO_ADDR
// hc_name :=  ;
67885: LD_ADDR_OWVAR 26
67889: PUSH
67890: LD_STRING 
67892: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67893: LD_ADDR_OWVAR 29
67897: PUSH
67898: LD_INT 12
67900: PUSH
67901: LD_INT 12
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: ST_TO_ADDR
// if agressivity = 0 then
67908: LD_VAR 0 1
67912: PUSH
67913: LD_INT 0
67915: EQUAL
67916: IFFALSE 67928
// hc_agressivity := 0 else
67918: LD_ADDR_OWVAR 35
67922: PUSH
67923: LD_INT 0
67925: ST_TO_ADDR
67926: GO 67949
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67928: LD_ADDR_OWVAR 35
67932: PUSH
67933: LD_VAR 0 1
67937: NEG
67938: PPUSH
67939: LD_VAR 0 1
67943: PPUSH
67944: CALL_OW 12
67948: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67949: LD_ADDR_OWVAR 31
67953: PUSH
67954: LD_INT 0
67956: PPUSH
67957: LD_INT 3
67959: PPUSH
67960: CALL_OW 12
67964: PUSH
67965: LD_INT 0
67967: PPUSH
67968: LD_INT 3
67970: PPUSH
67971: CALL_OW 12
67975: PUSH
67976: LD_INT 0
67978: PUSH
67979: LD_INT 0
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: ST_TO_ADDR
// end ;
67988: LD_VAR 0 2
67992: RET
// export function PrepareTiger ( agressivity ) ; begin
67993: LD_INT 0
67995: PPUSH
// uc_side := 0 ;
67996: LD_ADDR_OWVAR 20
68000: PUSH
68001: LD_INT 0
68003: ST_TO_ADDR
// uc_nation := 0 ;
68004: LD_ADDR_OWVAR 21
68008: PUSH
68009: LD_INT 0
68011: ST_TO_ADDR
// InitHc ;
68012: CALL_OW 19
// hc_class := class_tiger ;
68016: LD_ADDR_OWVAR 28
68020: PUSH
68021: LD_INT 14
68023: ST_TO_ADDR
// hc_gallery :=  ;
68024: LD_ADDR_OWVAR 33
68028: PUSH
68029: LD_STRING 
68031: ST_TO_ADDR
// hc_name :=  ;
68032: LD_ADDR_OWVAR 26
68036: PUSH
68037: LD_STRING 
68039: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68040: LD_ADDR_OWVAR 35
68044: PUSH
68045: LD_VAR 0 1
68049: NEG
68050: PPUSH
68051: LD_VAR 0 1
68055: PPUSH
68056: CALL_OW 12
68060: ST_TO_ADDR
// end ;
68061: LD_VAR 0 2
68065: RET
// export function PrepareEnchidna ( ) ; begin
68066: LD_INT 0
68068: PPUSH
// uc_side := 0 ;
68069: LD_ADDR_OWVAR 20
68073: PUSH
68074: LD_INT 0
68076: ST_TO_ADDR
// uc_nation := 0 ;
68077: LD_ADDR_OWVAR 21
68081: PUSH
68082: LD_INT 0
68084: ST_TO_ADDR
// InitHc ;
68085: CALL_OW 19
// hc_class := class_baggie ;
68089: LD_ADDR_OWVAR 28
68093: PUSH
68094: LD_INT 13
68096: ST_TO_ADDR
// hc_gallery :=  ;
68097: LD_ADDR_OWVAR 33
68101: PUSH
68102: LD_STRING 
68104: ST_TO_ADDR
// hc_name :=  ;
68105: LD_ADDR_OWVAR 26
68109: PUSH
68110: LD_STRING 
68112: ST_TO_ADDR
// end ;
68113: LD_VAR 0 1
68117: RET
// export function PrepareFrog ( ) ; begin
68118: LD_INT 0
68120: PPUSH
// uc_side := 0 ;
68121: LD_ADDR_OWVAR 20
68125: PUSH
68126: LD_INT 0
68128: ST_TO_ADDR
// uc_nation := 0 ;
68129: LD_ADDR_OWVAR 21
68133: PUSH
68134: LD_INT 0
68136: ST_TO_ADDR
// InitHc ;
68137: CALL_OW 19
// hc_class := class_frog ;
68141: LD_ADDR_OWVAR 28
68145: PUSH
68146: LD_INT 19
68148: ST_TO_ADDR
// hc_gallery :=  ;
68149: LD_ADDR_OWVAR 33
68153: PUSH
68154: LD_STRING 
68156: ST_TO_ADDR
// hc_name :=  ;
68157: LD_ADDR_OWVAR 26
68161: PUSH
68162: LD_STRING 
68164: ST_TO_ADDR
// end ;
68165: LD_VAR 0 1
68169: RET
// export function PrepareFish ( ) ; begin
68170: LD_INT 0
68172: PPUSH
// uc_side := 0 ;
68173: LD_ADDR_OWVAR 20
68177: PUSH
68178: LD_INT 0
68180: ST_TO_ADDR
// uc_nation := 0 ;
68181: LD_ADDR_OWVAR 21
68185: PUSH
68186: LD_INT 0
68188: ST_TO_ADDR
// InitHc ;
68189: CALL_OW 19
// hc_class := class_fish ;
68193: LD_ADDR_OWVAR 28
68197: PUSH
68198: LD_INT 20
68200: ST_TO_ADDR
// hc_gallery :=  ;
68201: LD_ADDR_OWVAR 33
68205: PUSH
68206: LD_STRING 
68208: ST_TO_ADDR
// hc_name :=  ;
68209: LD_ADDR_OWVAR 26
68213: PUSH
68214: LD_STRING 
68216: ST_TO_ADDR
// end ;
68217: LD_VAR 0 1
68221: RET
// export function PrepareBird ( ) ; begin
68222: LD_INT 0
68224: PPUSH
// uc_side := 0 ;
68225: LD_ADDR_OWVAR 20
68229: PUSH
68230: LD_INT 0
68232: ST_TO_ADDR
// uc_nation := 0 ;
68233: LD_ADDR_OWVAR 21
68237: PUSH
68238: LD_INT 0
68240: ST_TO_ADDR
// InitHc ;
68241: CALL_OW 19
// hc_class := class_phororhacos ;
68245: LD_ADDR_OWVAR 28
68249: PUSH
68250: LD_INT 18
68252: ST_TO_ADDR
// hc_gallery :=  ;
68253: LD_ADDR_OWVAR 33
68257: PUSH
68258: LD_STRING 
68260: ST_TO_ADDR
// hc_name :=  ;
68261: LD_ADDR_OWVAR 26
68265: PUSH
68266: LD_STRING 
68268: ST_TO_ADDR
// end ;
68269: LD_VAR 0 1
68273: RET
// export function PrepareHorse ( ) ; begin
68274: LD_INT 0
68276: PPUSH
// uc_side := 0 ;
68277: LD_ADDR_OWVAR 20
68281: PUSH
68282: LD_INT 0
68284: ST_TO_ADDR
// uc_nation := 0 ;
68285: LD_ADDR_OWVAR 21
68289: PUSH
68290: LD_INT 0
68292: ST_TO_ADDR
// InitHc ;
68293: CALL_OW 19
// hc_class := class_horse ;
68297: LD_ADDR_OWVAR 28
68301: PUSH
68302: LD_INT 21
68304: ST_TO_ADDR
// hc_gallery :=  ;
68305: LD_ADDR_OWVAR 33
68309: PUSH
68310: LD_STRING 
68312: ST_TO_ADDR
// hc_name :=  ;
68313: LD_ADDR_OWVAR 26
68317: PUSH
68318: LD_STRING 
68320: ST_TO_ADDR
// end ;
68321: LD_VAR 0 1
68325: RET
// export function PrepareMastodont ( ) ; begin
68326: LD_INT 0
68328: PPUSH
// uc_side := 0 ;
68329: LD_ADDR_OWVAR 20
68333: PUSH
68334: LD_INT 0
68336: ST_TO_ADDR
// uc_nation := 0 ;
68337: LD_ADDR_OWVAR 21
68341: PUSH
68342: LD_INT 0
68344: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68345: LD_ADDR_OWVAR 37
68349: PUSH
68350: LD_INT 31
68352: ST_TO_ADDR
// vc_control := control_rider ;
68353: LD_ADDR_OWVAR 38
68357: PUSH
68358: LD_INT 4
68360: ST_TO_ADDR
// end ;
68361: LD_VAR 0 1
68365: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68366: LD_INT 0
68368: PPUSH
68369: PPUSH
68370: PPUSH
// uc_side = 0 ;
68371: LD_ADDR_OWVAR 20
68375: PUSH
68376: LD_INT 0
68378: ST_TO_ADDR
// uc_nation = 0 ;
68379: LD_ADDR_OWVAR 21
68383: PUSH
68384: LD_INT 0
68386: ST_TO_ADDR
// InitHc_All ( ) ;
68387: CALL_OW 584
// InitVc ;
68391: CALL_OW 20
// if mastodonts then
68395: LD_VAR 0 6
68399: IFFALSE 68466
// for i = 1 to mastodonts do
68401: LD_ADDR_VAR 0 11
68405: PUSH
68406: DOUBLE
68407: LD_INT 1
68409: DEC
68410: ST_TO_ADDR
68411: LD_VAR 0 6
68415: PUSH
68416: FOR_TO
68417: IFFALSE 68464
// begin vc_chassis := 31 ;
68419: LD_ADDR_OWVAR 37
68423: PUSH
68424: LD_INT 31
68426: ST_TO_ADDR
// vc_control := control_rider ;
68427: LD_ADDR_OWVAR 38
68431: PUSH
68432: LD_INT 4
68434: ST_TO_ADDR
// animal := CreateVehicle ;
68435: LD_ADDR_VAR 0 12
68439: PUSH
68440: CALL_OW 45
68444: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68445: LD_VAR 0 12
68449: PPUSH
68450: LD_VAR 0 8
68454: PPUSH
68455: LD_INT 0
68457: PPUSH
68458: CALL 70608 0 3
// end ;
68462: GO 68416
68464: POP
68465: POP
// if horses then
68466: LD_VAR 0 5
68470: IFFALSE 68537
// for i = 1 to horses do
68472: LD_ADDR_VAR 0 11
68476: PUSH
68477: DOUBLE
68478: LD_INT 1
68480: DEC
68481: ST_TO_ADDR
68482: LD_VAR 0 5
68486: PUSH
68487: FOR_TO
68488: IFFALSE 68535
// begin hc_class := 21 ;
68490: LD_ADDR_OWVAR 28
68494: PUSH
68495: LD_INT 21
68497: ST_TO_ADDR
// hc_gallery :=  ;
68498: LD_ADDR_OWVAR 33
68502: PUSH
68503: LD_STRING 
68505: ST_TO_ADDR
// animal := CreateHuman ;
68506: LD_ADDR_VAR 0 12
68510: PUSH
68511: CALL_OW 44
68515: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68516: LD_VAR 0 12
68520: PPUSH
68521: LD_VAR 0 8
68525: PPUSH
68526: LD_INT 0
68528: PPUSH
68529: CALL 70608 0 3
// end ;
68533: GO 68487
68535: POP
68536: POP
// if birds then
68537: LD_VAR 0 1
68541: IFFALSE 68608
// for i = 1 to birds do
68543: LD_ADDR_VAR 0 11
68547: PUSH
68548: DOUBLE
68549: LD_INT 1
68551: DEC
68552: ST_TO_ADDR
68553: LD_VAR 0 1
68557: PUSH
68558: FOR_TO
68559: IFFALSE 68606
// begin hc_class := 18 ;
68561: LD_ADDR_OWVAR 28
68565: PUSH
68566: LD_INT 18
68568: ST_TO_ADDR
// hc_gallery =  ;
68569: LD_ADDR_OWVAR 33
68573: PUSH
68574: LD_STRING 
68576: ST_TO_ADDR
// animal := CreateHuman ;
68577: LD_ADDR_VAR 0 12
68581: PUSH
68582: CALL_OW 44
68586: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68587: LD_VAR 0 12
68591: PPUSH
68592: LD_VAR 0 8
68596: PPUSH
68597: LD_INT 0
68599: PPUSH
68600: CALL 70608 0 3
// end ;
68604: GO 68558
68606: POP
68607: POP
// if tigers then
68608: LD_VAR 0 2
68612: IFFALSE 68696
// for i = 1 to tigers do
68614: LD_ADDR_VAR 0 11
68618: PUSH
68619: DOUBLE
68620: LD_INT 1
68622: DEC
68623: ST_TO_ADDR
68624: LD_VAR 0 2
68628: PUSH
68629: FOR_TO
68630: IFFALSE 68694
// begin hc_class = class_tiger ;
68632: LD_ADDR_OWVAR 28
68636: PUSH
68637: LD_INT 14
68639: ST_TO_ADDR
// hc_gallery =  ;
68640: LD_ADDR_OWVAR 33
68644: PUSH
68645: LD_STRING 
68647: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68648: LD_ADDR_OWVAR 35
68652: PUSH
68653: LD_INT 7
68655: NEG
68656: PPUSH
68657: LD_INT 7
68659: PPUSH
68660: CALL_OW 12
68664: ST_TO_ADDR
// animal := CreateHuman ;
68665: LD_ADDR_VAR 0 12
68669: PUSH
68670: CALL_OW 44
68674: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68675: LD_VAR 0 12
68679: PPUSH
68680: LD_VAR 0 8
68684: PPUSH
68685: LD_INT 0
68687: PPUSH
68688: CALL 70608 0 3
// end ;
68692: GO 68629
68694: POP
68695: POP
// if apemans then
68696: LD_VAR 0 3
68700: IFFALSE 68823
// for i = 1 to apemans do
68702: LD_ADDR_VAR 0 11
68706: PUSH
68707: DOUBLE
68708: LD_INT 1
68710: DEC
68711: ST_TO_ADDR
68712: LD_VAR 0 3
68716: PUSH
68717: FOR_TO
68718: IFFALSE 68821
// begin hc_class = class_apeman ;
68720: LD_ADDR_OWVAR 28
68724: PUSH
68725: LD_INT 12
68727: ST_TO_ADDR
// hc_gallery =  ;
68728: LD_ADDR_OWVAR 33
68732: PUSH
68733: LD_STRING 
68735: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68736: LD_ADDR_OWVAR 35
68740: PUSH
68741: LD_INT 2
68743: NEG
68744: PPUSH
68745: LD_INT 2
68747: PPUSH
68748: CALL_OW 12
68752: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68753: LD_ADDR_OWVAR 31
68757: PUSH
68758: LD_INT 1
68760: PPUSH
68761: LD_INT 3
68763: PPUSH
68764: CALL_OW 12
68768: PUSH
68769: LD_INT 1
68771: PPUSH
68772: LD_INT 3
68774: PPUSH
68775: CALL_OW 12
68779: PUSH
68780: LD_INT 0
68782: PUSH
68783: LD_INT 0
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: LIST
68790: LIST
68791: ST_TO_ADDR
// animal := CreateHuman ;
68792: LD_ADDR_VAR 0 12
68796: PUSH
68797: CALL_OW 44
68801: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68802: LD_VAR 0 12
68806: PPUSH
68807: LD_VAR 0 8
68811: PPUSH
68812: LD_INT 0
68814: PPUSH
68815: CALL 70608 0 3
// end ;
68819: GO 68717
68821: POP
68822: POP
// if enchidnas then
68823: LD_VAR 0 4
68827: IFFALSE 68894
// for i = 1 to enchidnas do
68829: LD_ADDR_VAR 0 11
68833: PUSH
68834: DOUBLE
68835: LD_INT 1
68837: DEC
68838: ST_TO_ADDR
68839: LD_VAR 0 4
68843: PUSH
68844: FOR_TO
68845: IFFALSE 68892
// begin hc_class = 13 ;
68847: LD_ADDR_OWVAR 28
68851: PUSH
68852: LD_INT 13
68854: ST_TO_ADDR
// hc_gallery =  ;
68855: LD_ADDR_OWVAR 33
68859: PUSH
68860: LD_STRING 
68862: ST_TO_ADDR
// animal := CreateHuman ;
68863: LD_ADDR_VAR 0 12
68867: PUSH
68868: CALL_OW 44
68872: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68873: LD_VAR 0 12
68877: PPUSH
68878: LD_VAR 0 8
68882: PPUSH
68883: LD_INT 0
68885: PPUSH
68886: CALL 70608 0 3
// end ;
68890: GO 68844
68892: POP
68893: POP
// if fishes then
68894: LD_VAR 0 7
68898: IFFALSE 68965
// for i = 1 to fishes do
68900: LD_ADDR_VAR 0 11
68904: PUSH
68905: DOUBLE
68906: LD_INT 1
68908: DEC
68909: ST_TO_ADDR
68910: LD_VAR 0 7
68914: PUSH
68915: FOR_TO
68916: IFFALSE 68963
// begin hc_class = 20 ;
68918: LD_ADDR_OWVAR 28
68922: PUSH
68923: LD_INT 20
68925: ST_TO_ADDR
// hc_gallery =  ;
68926: LD_ADDR_OWVAR 33
68930: PUSH
68931: LD_STRING 
68933: ST_TO_ADDR
// animal := CreateHuman ;
68934: LD_ADDR_VAR 0 12
68938: PUSH
68939: CALL_OW 44
68943: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68944: LD_VAR 0 12
68948: PPUSH
68949: LD_VAR 0 9
68953: PPUSH
68954: LD_INT 0
68956: PPUSH
68957: CALL 70608 0 3
// end ;
68961: GO 68915
68963: POP
68964: POP
// end ;
68965: LD_VAR 0 10
68969: RET
// export function WantHeal ( sci , unit ) ; begin
68970: LD_INT 0
68972: PPUSH
// if GetTaskList ( sci ) > 0 then
68973: LD_VAR 0 1
68977: PPUSH
68978: CALL_OW 437
68982: PUSH
68983: LD_INT 0
68985: GREATER
68986: IFFALSE 69058
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68988: LD_VAR 0 1
68992: PPUSH
68993: CALL_OW 437
68997: PUSH
68998: LD_INT 1
69000: ARRAY
69001: PUSH
69002: LD_INT 1
69004: ARRAY
69005: PUSH
69006: LD_STRING l
69008: EQUAL
69009: IFFALSE 69036
69011: PUSH
69012: LD_VAR 0 1
69016: PPUSH
69017: CALL_OW 437
69021: PUSH
69022: LD_INT 1
69024: ARRAY
69025: PUSH
69026: LD_INT 4
69028: ARRAY
69029: PUSH
69030: LD_VAR 0 2
69034: EQUAL
69035: AND
69036: IFFALSE 69048
// result := true else
69038: LD_ADDR_VAR 0 3
69042: PUSH
69043: LD_INT 1
69045: ST_TO_ADDR
69046: GO 69056
// result := false ;
69048: LD_ADDR_VAR 0 3
69052: PUSH
69053: LD_INT 0
69055: ST_TO_ADDR
// end else
69056: GO 69066
// result := false ;
69058: LD_ADDR_VAR 0 3
69062: PUSH
69063: LD_INT 0
69065: ST_TO_ADDR
// end ;
69066: LD_VAR 0 3
69070: RET
// export function HealTarget ( sci ) ; begin
69071: LD_INT 0
69073: PPUSH
// if not sci then
69074: LD_VAR 0 1
69078: NOT
69079: IFFALSE 69083
// exit ;
69081: GO 69148
// result := 0 ;
69083: LD_ADDR_VAR 0 2
69087: PUSH
69088: LD_INT 0
69090: ST_TO_ADDR
// if GetTaskList ( sci ) then
69091: LD_VAR 0 1
69095: PPUSH
69096: CALL_OW 437
69100: IFFALSE 69148
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69102: LD_VAR 0 1
69106: PPUSH
69107: CALL_OW 437
69111: PUSH
69112: LD_INT 1
69114: ARRAY
69115: PUSH
69116: LD_INT 1
69118: ARRAY
69119: PUSH
69120: LD_STRING l
69122: EQUAL
69123: IFFALSE 69148
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69125: LD_ADDR_VAR 0 2
69129: PUSH
69130: LD_VAR 0 1
69134: PPUSH
69135: CALL_OW 437
69139: PUSH
69140: LD_INT 1
69142: ARRAY
69143: PUSH
69144: LD_INT 4
69146: ARRAY
69147: ST_TO_ADDR
// end ;
69148: LD_VAR 0 2
69152: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69153: LD_INT 0
69155: PPUSH
69156: PPUSH
69157: PPUSH
69158: PPUSH
// if not base_units then
69159: LD_VAR 0 1
69163: NOT
69164: IFFALSE 69168
// exit ;
69166: GO 69255
// result := false ;
69168: LD_ADDR_VAR 0 2
69172: PUSH
69173: LD_INT 0
69175: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69176: LD_ADDR_VAR 0 5
69180: PUSH
69181: LD_VAR 0 1
69185: PPUSH
69186: LD_INT 21
69188: PUSH
69189: LD_INT 3
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PPUSH
69196: CALL_OW 72
69200: ST_TO_ADDR
// if not tmp then
69201: LD_VAR 0 5
69205: NOT
69206: IFFALSE 69210
// exit ;
69208: GO 69255
// for i in tmp do
69210: LD_ADDR_VAR 0 3
69214: PUSH
69215: LD_VAR 0 5
69219: PUSH
69220: FOR_IN
69221: IFFALSE 69253
// begin result := EnemyInRange ( i , 22 ) ;
69223: LD_ADDR_VAR 0 2
69227: PUSH
69228: LD_VAR 0 3
69232: PPUSH
69233: LD_INT 22
69235: PPUSH
69236: CALL 66680 0 2
69240: ST_TO_ADDR
// if result then
69241: LD_VAR 0 2
69245: IFFALSE 69251
// exit ;
69247: POP
69248: POP
69249: GO 69255
// end ;
69251: GO 69220
69253: POP
69254: POP
// end ;
69255: LD_VAR 0 2
69259: RET
// export function FilterByTag ( units , tag ) ; begin
69260: LD_INT 0
69262: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69263: LD_ADDR_VAR 0 3
69267: PUSH
69268: LD_VAR 0 1
69272: PPUSH
69273: LD_INT 120
69275: PUSH
69276: LD_VAR 0 2
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PPUSH
69285: CALL_OW 72
69289: ST_TO_ADDR
// end ;
69290: LD_VAR 0 3
69294: RET
// export function IsDriver ( un ) ; begin
69295: LD_INT 0
69297: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69298: LD_ADDR_VAR 0 2
69302: PUSH
69303: LD_VAR 0 1
69307: PUSH
69308: LD_INT 55
69310: PUSH
69311: EMPTY
69312: LIST
69313: PPUSH
69314: CALL_OW 69
69318: IN
69319: ST_TO_ADDR
// end ;
69320: LD_VAR 0 2
69324: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69325: LD_INT 0
69327: PPUSH
69328: PPUSH
// list := [ ] ;
69329: LD_ADDR_VAR 0 5
69333: PUSH
69334: EMPTY
69335: ST_TO_ADDR
// case d of 0 :
69336: LD_VAR 0 3
69340: PUSH
69341: LD_INT 0
69343: DOUBLE
69344: EQUAL
69345: IFTRUE 69349
69347: GO 69482
69349: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69350: LD_ADDR_VAR 0 5
69354: PUSH
69355: LD_VAR 0 1
69359: PUSH
69360: LD_INT 4
69362: MINUS
69363: PUSH
69364: LD_VAR 0 2
69368: PUSH
69369: LD_INT 4
69371: MINUS
69372: PUSH
69373: LD_INT 2
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: LIST
69380: PUSH
69381: LD_VAR 0 1
69385: PUSH
69386: LD_INT 3
69388: MINUS
69389: PUSH
69390: LD_VAR 0 2
69394: PUSH
69395: LD_INT 1
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: LIST
69402: PUSH
69403: LD_VAR 0 1
69407: PUSH
69408: LD_INT 4
69410: PLUS
69411: PUSH
69412: LD_VAR 0 2
69416: PUSH
69417: LD_INT 4
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: LIST
69424: PUSH
69425: LD_VAR 0 1
69429: PUSH
69430: LD_INT 3
69432: PLUS
69433: PUSH
69434: LD_VAR 0 2
69438: PUSH
69439: LD_INT 3
69441: PLUS
69442: PUSH
69443: LD_INT 5
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: LIST
69450: PUSH
69451: LD_VAR 0 1
69455: PUSH
69456: LD_VAR 0 2
69460: PUSH
69461: LD_INT 4
69463: PLUS
69464: PUSH
69465: LD_INT 0
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: LIST
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: ST_TO_ADDR
// end ; 1 :
69480: GO 70180
69482: LD_INT 1
69484: DOUBLE
69485: EQUAL
69486: IFTRUE 69490
69488: GO 69623
69490: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69491: LD_ADDR_VAR 0 5
69495: PUSH
69496: LD_VAR 0 1
69500: PUSH
69501: LD_VAR 0 2
69505: PUSH
69506: LD_INT 4
69508: MINUS
69509: PUSH
69510: LD_INT 3
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: LIST
69517: PUSH
69518: LD_VAR 0 1
69522: PUSH
69523: LD_INT 3
69525: MINUS
69526: PUSH
69527: LD_VAR 0 2
69531: PUSH
69532: LD_INT 3
69534: MINUS
69535: PUSH
69536: LD_INT 2
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: LIST
69543: PUSH
69544: LD_VAR 0 1
69548: PUSH
69549: LD_INT 4
69551: MINUS
69552: PUSH
69553: LD_VAR 0 2
69557: PUSH
69558: LD_INT 1
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: LIST
69565: PUSH
69566: LD_VAR 0 1
69570: PUSH
69571: LD_VAR 0 2
69575: PUSH
69576: LD_INT 3
69578: PLUS
69579: PUSH
69580: LD_INT 0
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: LIST
69587: PUSH
69588: LD_VAR 0 1
69592: PUSH
69593: LD_INT 4
69595: PLUS
69596: PUSH
69597: LD_VAR 0 2
69601: PUSH
69602: LD_INT 4
69604: PLUS
69605: PUSH
69606: LD_INT 5
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: LIST
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: ST_TO_ADDR
// end ; 2 :
69621: GO 70180
69623: LD_INT 2
69625: DOUBLE
69626: EQUAL
69627: IFTRUE 69631
69629: GO 69760
69631: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69632: LD_ADDR_VAR 0 5
69636: PUSH
69637: LD_VAR 0 1
69641: PUSH
69642: LD_VAR 0 2
69646: PUSH
69647: LD_INT 3
69649: MINUS
69650: PUSH
69651: LD_INT 3
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: LIST
69658: PUSH
69659: LD_VAR 0 1
69663: PUSH
69664: LD_INT 4
69666: PLUS
69667: PUSH
69668: LD_VAR 0 2
69672: PUSH
69673: LD_INT 4
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: LIST
69680: PUSH
69681: LD_VAR 0 1
69685: PUSH
69686: LD_VAR 0 2
69690: PUSH
69691: LD_INT 4
69693: PLUS
69694: PUSH
69695: LD_INT 0
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: LIST
69702: PUSH
69703: LD_VAR 0 1
69707: PUSH
69708: LD_INT 3
69710: MINUS
69711: PUSH
69712: LD_VAR 0 2
69716: PUSH
69717: LD_INT 1
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: LIST
69724: PUSH
69725: LD_VAR 0 1
69729: PUSH
69730: LD_INT 4
69732: MINUS
69733: PUSH
69734: LD_VAR 0 2
69738: PUSH
69739: LD_INT 4
69741: MINUS
69742: PUSH
69743: LD_INT 2
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: LIST
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: ST_TO_ADDR
// end ; 3 :
69758: GO 70180
69760: LD_INT 3
69762: DOUBLE
69763: EQUAL
69764: IFTRUE 69768
69766: GO 69901
69768: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69769: LD_ADDR_VAR 0 5
69773: PUSH
69774: LD_VAR 0 1
69778: PUSH
69779: LD_INT 3
69781: PLUS
69782: PUSH
69783: LD_VAR 0 2
69787: PUSH
69788: LD_INT 4
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: LIST
69795: PUSH
69796: LD_VAR 0 1
69800: PUSH
69801: LD_INT 4
69803: PLUS
69804: PUSH
69805: LD_VAR 0 2
69809: PUSH
69810: LD_INT 4
69812: PLUS
69813: PUSH
69814: LD_INT 5
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: LIST
69821: PUSH
69822: LD_VAR 0 1
69826: PUSH
69827: LD_INT 4
69829: MINUS
69830: PUSH
69831: LD_VAR 0 2
69835: PUSH
69836: LD_INT 1
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: LIST
69843: PUSH
69844: LD_VAR 0 1
69848: PUSH
69849: LD_VAR 0 2
69853: PUSH
69854: LD_INT 4
69856: MINUS
69857: PUSH
69858: LD_INT 3
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: LIST
69865: PUSH
69866: LD_VAR 0 1
69870: PUSH
69871: LD_INT 3
69873: MINUS
69874: PUSH
69875: LD_VAR 0 2
69879: PUSH
69880: LD_INT 3
69882: MINUS
69883: PUSH
69884: LD_INT 2
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: LIST
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: LIST
69896: LIST
69897: LIST
69898: ST_TO_ADDR
// end ; 4 :
69899: GO 70180
69901: LD_INT 4
69903: DOUBLE
69904: EQUAL
69905: IFTRUE 69909
69907: GO 70042
69909: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69910: LD_ADDR_VAR 0 5
69914: PUSH
69915: LD_VAR 0 1
69919: PUSH
69920: LD_VAR 0 2
69924: PUSH
69925: LD_INT 4
69927: PLUS
69928: PUSH
69929: LD_INT 0
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: LIST
69936: PUSH
69937: LD_VAR 0 1
69941: PUSH
69942: LD_INT 3
69944: PLUS
69945: PUSH
69946: LD_VAR 0 2
69950: PUSH
69951: LD_INT 3
69953: PLUS
69954: PUSH
69955: LD_INT 5
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: LIST
69962: PUSH
69963: LD_VAR 0 1
69967: PUSH
69968: LD_INT 4
69970: PLUS
69971: PUSH
69972: LD_VAR 0 2
69976: PUSH
69977: LD_INT 4
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: LIST
69984: PUSH
69985: LD_VAR 0 1
69989: PUSH
69990: LD_VAR 0 2
69994: PUSH
69995: LD_INT 3
69997: MINUS
69998: PUSH
69999: LD_INT 3
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: LIST
70006: PUSH
70007: LD_VAR 0 1
70011: PUSH
70012: LD_INT 4
70014: MINUS
70015: PUSH
70016: LD_VAR 0 2
70020: PUSH
70021: LD_INT 4
70023: MINUS
70024: PUSH
70025: LD_INT 2
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: LIST
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: ST_TO_ADDR
// end ; 5 :
70040: GO 70180
70042: LD_INT 5
70044: DOUBLE
70045: EQUAL
70046: IFTRUE 70050
70048: GO 70179
70050: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70051: LD_ADDR_VAR 0 5
70055: PUSH
70056: LD_VAR 0 1
70060: PUSH
70061: LD_INT 4
70063: MINUS
70064: PUSH
70065: LD_VAR 0 2
70069: PUSH
70070: LD_INT 1
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: LIST
70077: PUSH
70078: LD_VAR 0 1
70082: PUSH
70083: LD_VAR 0 2
70087: PUSH
70088: LD_INT 4
70090: MINUS
70091: PUSH
70092: LD_INT 3
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: LIST
70099: PUSH
70100: LD_VAR 0 1
70104: PUSH
70105: LD_INT 4
70107: PLUS
70108: PUSH
70109: LD_VAR 0 2
70113: PUSH
70114: LD_INT 4
70116: PLUS
70117: PUSH
70118: LD_INT 5
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: LIST
70125: PUSH
70126: LD_VAR 0 1
70130: PUSH
70131: LD_INT 3
70133: PLUS
70134: PUSH
70135: LD_VAR 0 2
70139: PUSH
70140: LD_INT 4
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: LIST
70147: PUSH
70148: LD_VAR 0 1
70152: PUSH
70153: LD_VAR 0 2
70157: PUSH
70158: LD_INT 3
70160: PLUS
70161: PUSH
70162: LD_INT 0
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: LIST
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: ST_TO_ADDR
// end ; end ;
70177: GO 70180
70179: POP
// result := list ;
70180: LD_ADDR_VAR 0 4
70184: PUSH
70185: LD_VAR 0 5
70189: ST_TO_ADDR
// end ;
70190: LD_VAR 0 4
70194: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70195: LD_INT 0
70197: PPUSH
70198: PPUSH
70199: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70200: LD_VAR 0 1
70204: NOT
70205: IFTRUE 70233
70207: PUSH
70208: LD_VAR 0 2
70212: PUSH
70213: LD_INT 1
70215: PUSH
70216: LD_INT 2
70218: PUSH
70219: LD_INT 3
70221: PUSH
70222: LD_INT 4
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: IN
70231: NOT
70232: OR
70233: IFFALSE 70237
// exit ;
70235: GO 70320
// tmp := [ ] ;
70237: LD_ADDR_VAR 0 5
70241: PUSH
70242: EMPTY
70243: ST_TO_ADDR
// for i in units do
70244: LD_ADDR_VAR 0 4
70248: PUSH
70249: LD_VAR 0 1
70253: PUSH
70254: FOR_IN
70255: IFFALSE 70289
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
70257: LD_ADDR_VAR 0 5
70261: PUSH
70262: LD_VAR 0 5
70266: PPUSH
70267: LD_VAR 0 4
70271: PPUSH
70272: LD_VAR 0 2
70276: PPUSH
70277: CALL_OW 259
70281: PPUSH
70282: CALL 71715 0 2
70286: ST_TO_ADDR
70287: GO 70254
70289: POP
70290: POP
// if not tmp then
70291: LD_VAR 0 5
70295: NOT
70296: IFFALSE 70300
// exit ;
70298: GO 70320
// result := SortListByListDesc ( units , tmp ) ;
70300: LD_ADDR_VAR 0 3
70304: PUSH
70305: LD_VAR 0 1
70309: PPUSH
70310: LD_VAR 0 5
70314: PPUSH
70315: CALL_OW 77
70319: ST_TO_ADDR
// end ;
70320: LD_VAR 0 3
70324: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70325: LD_INT 0
70327: PPUSH
70328: PPUSH
70329: PPUSH
// result := false ;
70330: LD_ADDR_VAR 0 3
70334: PUSH
70335: LD_INT 0
70337: ST_TO_ADDR
// if not building then
70338: LD_VAR 0 2
70342: NOT
70343: IFFALSE 70347
// exit ;
70345: GO 70491
// x := GetX ( building ) ;
70347: LD_ADDR_VAR 0 4
70351: PUSH
70352: LD_VAR 0 2
70356: PPUSH
70357: CALL_OW 250
70361: ST_TO_ADDR
// y := GetY ( building ) ;
70362: LD_ADDR_VAR 0 5
70366: PUSH
70367: LD_VAR 0 2
70371: PPUSH
70372: CALL_OW 251
70376: ST_TO_ADDR
// if not x or not y then
70377: LD_VAR 0 4
70381: NOT
70382: IFTRUE 70391
70384: PUSH
70385: LD_VAR 0 5
70389: NOT
70390: OR
70391: IFFALSE 70395
// exit ;
70393: GO 70491
// if GetTaskList ( unit ) then
70395: LD_VAR 0 1
70399: PPUSH
70400: CALL_OW 437
70404: IFFALSE 70491
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70406: LD_STRING e
70408: PUSH
70409: LD_VAR 0 1
70413: PPUSH
70414: CALL_OW 437
70418: PUSH
70419: LD_INT 1
70421: ARRAY
70422: PUSH
70423: LD_INT 1
70425: ARRAY
70426: EQUAL
70427: IFFALSE 70454
70429: PUSH
70430: LD_VAR 0 4
70434: PUSH
70435: LD_VAR 0 1
70439: PPUSH
70440: CALL_OW 437
70444: PUSH
70445: LD_INT 1
70447: ARRAY
70448: PUSH
70449: LD_INT 2
70451: ARRAY
70452: EQUAL
70453: AND
70454: IFFALSE 70481
70456: PUSH
70457: LD_VAR 0 5
70461: PUSH
70462: LD_VAR 0 1
70466: PPUSH
70467: CALL_OW 437
70471: PUSH
70472: LD_INT 1
70474: ARRAY
70475: PUSH
70476: LD_INT 3
70478: ARRAY
70479: EQUAL
70480: AND
70481: IFFALSE 70491
// result := true end ;
70483: LD_ADDR_VAR 0 3
70487: PUSH
70488: LD_INT 1
70490: ST_TO_ADDR
// end ;
70491: LD_VAR 0 3
70495: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70496: LD_INT 0
70498: PPUSH
// result := false ;
70499: LD_ADDR_VAR 0 4
70503: PUSH
70504: LD_INT 0
70506: ST_TO_ADDR
// if GetTaskList ( unit ) then
70507: LD_VAR 0 1
70511: PPUSH
70512: CALL_OW 437
70516: IFFALSE 70603
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70518: LD_STRING M
70520: PUSH
70521: LD_VAR 0 1
70525: PPUSH
70526: CALL_OW 437
70530: PUSH
70531: LD_INT 1
70533: ARRAY
70534: PUSH
70535: LD_INT 1
70537: ARRAY
70538: EQUAL
70539: IFFALSE 70566
70541: PUSH
70542: LD_VAR 0 2
70546: PUSH
70547: LD_VAR 0 1
70551: PPUSH
70552: CALL_OW 437
70556: PUSH
70557: LD_INT 1
70559: ARRAY
70560: PUSH
70561: LD_INT 2
70563: ARRAY
70564: EQUAL
70565: AND
70566: IFFALSE 70593
70568: PUSH
70569: LD_VAR 0 3
70573: PUSH
70574: LD_VAR 0 1
70578: PPUSH
70579: CALL_OW 437
70583: PUSH
70584: LD_INT 1
70586: ARRAY
70587: PUSH
70588: LD_INT 3
70590: ARRAY
70591: EQUAL
70592: AND
70593: IFFALSE 70603
// result := true ;
70595: LD_ADDR_VAR 0 4
70599: PUSH
70600: LD_INT 1
70602: ST_TO_ADDR
// end ; end ;
70603: LD_VAR 0 4
70607: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70608: LD_INT 0
70610: PPUSH
70611: PPUSH
70612: PPUSH
70613: PPUSH
// if not unit or not area then
70614: LD_VAR 0 1
70618: NOT
70619: IFTRUE 70628
70621: PUSH
70622: LD_VAR 0 2
70626: NOT
70627: OR
70628: IFFALSE 70632
// exit ;
70630: GO 70808
// tmp := AreaToList ( area , i ) ;
70632: LD_ADDR_VAR 0 6
70636: PUSH
70637: LD_VAR 0 2
70641: PPUSH
70642: LD_VAR 0 5
70646: PPUSH
70647: CALL_OW 517
70651: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70652: LD_ADDR_VAR 0 5
70656: PUSH
70657: DOUBLE
70658: LD_INT 1
70660: DEC
70661: ST_TO_ADDR
70662: LD_VAR 0 6
70666: PUSH
70667: LD_INT 1
70669: ARRAY
70670: PUSH
70671: FOR_TO
70672: IFFALSE 70806
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70674: LD_ADDR_VAR 0 7
70678: PUSH
70679: LD_VAR 0 6
70683: PUSH
70684: LD_INT 1
70686: ARRAY
70687: PUSH
70688: LD_VAR 0 5
70692: ARRAY
70693: PUSH
70694: LD_VAR 0 6
70698: PUSH
70699: LD_INT 2
70701: ARRAY
70702: PUSH
70703: LD_VAR 0 5
70707: ARRAY
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
70713: LD_INT 92
70715: PUSH
70716: LD_VAR 0 7
70720: PUSH
70721: LD_INT 1
70723: ARRAY
70724: PUSH
70725: LD_VAR 0 7
70729: PUSH
70730: LD_INT 2
70732: ARRAY
70733: PUSH
70734: LD_INT 2
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: PPUSH
70743: CALL_OW 69
70747: PUSH
70748: LD_INT 0
70750: EQUAL
70751: IFFALSE 70804
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70753: LD_VAR 0 1
70757: PPUSH
70758: LD_VAR 0 7
70762: PUSH
70763: LD_INT 1
70765: ARRAY
70766: PPUSH
70767: LD_VAR 0 7
70771: PUSH
70772: LD_INT 2
70774: ARRAY
70775: PPUSH
70776: LD_VAR 0 3
70780: PPUSH
70781: CALL_OW 48
// result := IsPlaced ( unit ) ;
70785: LD_ADDR_VAR 0 4
70789: PUSH
70790: LD_VAR 0 1
70794: PPUSH
70795: CALL_OW 305
70799: ST_TO_ADDR
// exit ;
70800: POP
70801: POP
70802: GO 70808
// end ; end ;
70804: GO 70671
70806: POP
70807: POP
// end ;
70808: LD_VAR 0 4
70812: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70813: LD_INT 0
70815: PPUSH
70816: PPUSH
70817: PPUSH
// if not side or side > 8 then
70818: LD_VAR 0 1
70822: NOT
70823: IFTRUE 70835
70825: PUSH
70826: LD_VAR 0 1
70830: PUSH
70831: LD_INT 8
70833: GREATER
70834: OR
70835: IFFALSE 70839
// exit ;
70837: GO 71026
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70839: LD_ADDR_VAR 0 4
70843: PUSH
70844: LD_INT 22
70846: PUSH
70847: LD_VAR 0 1
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: PUSH
70856: LD_INT 21
70858: PUSH
70859: LD_INT 3
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PPUSH
70870: CALL_OW 69
70874: ST_TO_ADDR
// if not tmp then
70875: LD_VAR 0 4
70879: NOT
70880: IFFALSE 70884
// exit ;
70882: GO 71026
// enable_addtolog := true ;
70884: LD_ADDR_OWVAR 81
70888: PUSH
70889: LD_INT 1
70891: ST_TO_ADDR
// AddToLog ( [ ) ;
70892: LD_STRING [
70894: PPUSH
70895: CALL_OW 561
// for i in tmp do
70899: LD_ADDR_VAR 0 3
70903: PUSH
70904: LD_VAR 0 4
70908: PUSH
70909: FOR_IN
70910: IFFALSE 71017
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70912: LD_STRING [
70914: PUSH
70915: LD_VAR 0 3
70919: PPUSH
70920: CALL_OW 266
70924: STR
70925: PUSH
70926: LD_STRING , 
70928: STR
70929: PUSH
70930: LD_VAR 0 3
70934: PPUSH
70935: CALL_OW 250
70939: STR
70940: PUSH
70941: LD_STRING , 
70943: STR
70944: PUSH
70945: LD_VAR 0 3
70949: PPUSH
70950: CALL_OW 251
70954: STR
70955: PUSH
70956: LD_STRING , 
70958: STR
70959: PUSH
70960: LD_VAR 0 3
70964: PPUSH
70965: CALL_OW 254
70969: STR
70970: PUSH
70971: LD_STRING , 
70973: STR
70974: PUSH
70975: LD_VAR 0 3
70979: PPUSH
70980: LD_INT 1
70982: PPUSH
70983: CALL_OW 268
70987: STR
70988: PUSH
70989: LD_STRING , 
70991: STR
70992: PUSH
70993: LD_VAR 0 3
70997: PPUSH
70998: LD_INT 2
71000: PPUSH
71001: CALL_OW 268
71005: STR
71006: PUSH
71007: LD_STRING ],
71009: STR
71010: PPUSH
71011: CALL_OW 561
// end ;
71015: GO 70909
71017: POP
71018: POP
// AddToLog ( ]; ) ;
71019: LD_STRING ];
71021: PPUSH
71022: CALL_OW 561
// end ;
71026: LD_VAR 0 2
71030: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71031: LD_INT 0
71033: PPUSH
71034: PPUSH
71035: PPUSH
71036: PPUSH
71037: PPUSH
// if not area or not rate or not max then
71038: LD_VAR 0 1
71042: NOT
71043: IFTRUE 71052
71045: PUSH
71046: LD_VAR 0 2
71050: NOT
71051: OR
71052: IFTRUE 71061
71054: PUSH
71055: LD_VAR 0 4
71059: NOT
71060: OR
71061: IFFALSE 71065
// exit ;
71063: GO 71254
// while 1 do
71065: LD_INT 1
71067: IFFALSE 71254
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71069: LD_ADDR_VAR 0 9
71073: PUSH
71074: LD_VAR 0 1
71078: PPUSH
71079: LD_INT 1
71081: PPUSH
71082: CALL_OW 287
71086: PUSH
71087: LD_INT 10
71089: MUL
71090: ST_TO_ADDR
// r := rate / 10 ;
71091: LD_ADDR_VAR 0 7
71095: PUSH
71096: LD_VAR 0 2
71100: PUSH
71101: LD_INT 10
71103: DIVREAL
71104: ST_TO_ADDR
// time := 1 1$00 ;
71105: LD_ADDR_VAR 0 8
71109: PUSH
71110: LD_INT 2100
71112: ST_TO_ADDR
// if amount < min then
71113: LD_VAR 0 9
71117: PUSH
71118: LD_VAR 0 3
71122: LESS
71123: IFFALSE 71141
// r := r * 2 else
71125: LD_ADDR_VAR 0 7
71129: PUSH
71130: LD_VAR 0 7
71134: PUSH
71135: LD_INT 2
71137: MUL
71138: ST_TO_ADDR
71139: GO 71167
// if amount > max then
71141: LD_VAR 0 9
71145: PUSH
71146: LD_VAR 0 4
71150: GREATER
71151: IFFALSE 71167
// r := r / 2 ;
71153: LD_ADDR_VAR 0 7
71157: PUSH
71158: LD_VAR 0 7
71162: PUSH
71163: LD_INT 2
71165: DIVREAL
71166: ST_TO_ADDR
// time := time / r ;
71167: LD_ADDR_VAR 0 8
71171: PUSH
71172: LD_VAR 0 8
71176: PUSH
71177: LD_VAR 0 7
71181: DIVREAL
71182: ST_TO_ADDR
// if time < 0 then
71183: LD_VAR 0 8
71187: PUSH
71188: LD_INT 0
71190: LESS
71191: IFFALSE 71208
// time := time * - 1 ;
71193: LD_ADDR_VAR 0 8
71197: PUSH
71198: LD_VAR 0 8
71202: PUSH
71203: LD_INT 1
71205: NEG
71206: MUL
71207: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71208: LD_VAR 0 8
71212: PUSH
71213: LD_INT 35
71215: PPUSH
71216: LD_INT 875
71218: PPUSH
71219: CALL_OW 12
71223: PLUS
71224: PPUSH
71225: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71229: LD_INT 1
71231: PPUSH
71232: LD_INT 5
71234: PPUSH
71235: CALL_OW 12
71239: PPUSH
71240: LD_VAR 0 1
71244: PPUSH
71245: LD_INT 1
71247: PPUSH
71248: CALL_OW 55
// end ;
71252: GO 71065
// end ;
71254: LD_VAR 0 5
71258: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71259: LD_INT 0
71261: PPUSH
71262: PPUSH
71263: PPUSH
71264: PPUSH
71265: PPUSH
71266: PPUSH
71267: PPUSH
71268: PPUSH
// if not turrets or not factories then
71269: LD_VAR 0 1
71273: NOT
71274: IFTRUE 71283
71276: PUSH
71277: LD_VAR 0 2
71281: NOT
71282: OR
71283: IFFALSE 71287
// exit ;
71285: GO 71594
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71287: LD_ADDR_VAR 0 10
71291: PUSH
71292: LD_INT 5
71294: PUSH
71295: LD_INT 6
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: PUSH
71302: LD_INT 2
71304: PUSH
71305: LD_INT 4
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PUSH
71312: LD_INT 3
71314: PUSH
71315: LD_INT 5
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: LIST
71326: PUSH
71327: LD_INT 24
71329: PUSH
71330: LD_INT 25
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: PUSH
71337: LD_INT 23
71339: PUSH
71340: LD_INT 27
71342: PUSH
71343: EMPTY
71344: LIST
71345: LIST
71346: PUSH
71347: EMPTY
71348: LIST
71349: LIST
71350: PUSH
71351: LD_INT 42
71353: PUSH
71354: LD_INT 43
71356: PUSH
71357: EMPTY
71358: LIST
71359: LIST
71360: PUSH
71361: LD_INT 44
71363: PUSH
71364: LD_INT 46
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: PUSH
71371: LD_INT 45
71373: PUSH
71374: LD_INT 47
71376: PUSH
71377: EMPTY
71378: LIST
71379: LIST
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: LIST
71385: PUSH
71386: EMPTY
71387: LIST
71388: LIST
71389: LIST
71390: ST_TO_ADDR
// result := [ ] ;
71391: LD_ADDR_VAR 0 3
71395: PUSH
71396: EMPTY
71397: ST_TO_ADDR
// for i in turrets do
71398: LD_ADDR_VAR 0 4
71402: PUSH
71403: LD_VAR 0 1
71407: PUSH
71408: FOR_IN
71409: IFFALSE 71592
// begin nat := GetNation ( i ) ;
71411: LD_ADDR_VAR 0 7
71415: PUSH
71416: LD_VAR 0 4
71420: PPUSH
71421: CALL_OW 248
71425: ST_TO_ADDR
// weapon := 0 ;
71426: LD_ADDR_VAR 0 8
71430: PUSH
71431: LD_INT 0
71433: ST_TO_ADDR
// if not nat then
71434: LD_VAR 0 7
71438: NOT
71439: IFFALSE 71443
// continue ;
71441: GO 71408
// for j in list [ nat ] do
71443: LD_ADDR_VAR 0 5
71447: PUSH
71448: LD_VAR 0 10
71452: PUSH
71453: LD_VAR 0 7
71457: ARRAY
71458: PUSH
71459: FOR_IN
71460: IFFALSE 71501
// if GetBWeapon ( i ) = j [ 1 ] then
71462: LD_VAR 0 4
71466: PPUSH
71467: CALL_OW 269
71471: PUSH
71472: LD_VAR 0 5
71476: PUSH
71477: LD_INT 1
71479: ARRAY
71480: EQUAL
71481: IFFALSE 71499
// begin weapon := j [ 2 ] ;
71483: LD_ADDR_VAR 0 8
71487: PUSH
71488: LD_VAR 0 5
71492: PUSH
71493: LD_INT 2
71495: ARRAY
71496: ST_TO_ADDR
// break ;
71497: GO 71501
// end ;
71499: GO 71459
71501: POP
71502: POP
// if not weapon then
71503: LD_VAR 0 8
71507: NOT
71508: IFFALSE 71512
// continue ;
71510: GO 71408
// for k in factories do
71512: LD_ADDR_VAR 0 6
71516: PUSH
71517: LD_VAR 0 2
71521: PUSH
71522: FOR_IN
71523: IFFALSE 71588
// begin weapons := AvailableWeaponList ( k ) ;
71525: LD_ADDR_VAR 0 9
71529: PUSH
71530: LD_VAR 0 6
71534: PPUSH
71535: CALL_OW 478
71539: ST_TO_ADDR
// if not weapons then
71540: LD_VAR 0 9
71544: NOT
71545: IFFALSE 71549
// continue ;
71547: GO 71522
// if weapon in weapons then
71549: LD_VAR 0 8
71553: PUSH
71554: LD_VAR 0 9
71558: IN
71559: IFFALSE 71586
// begin result := [ i , weapon ] ;
71561: LD_ADDR_VAR 0 3
71565: PUSH
71566: LD_VAR 0 4
71570: PUSH
71571: LD_VAR 0 8
71575: PUSH
71576: EMPTY
71577: LIST
71578: LIST
71579: ST_TO_ADDR
// exit ;
71580: POP
71581: POP
71582: POP
71583: POP
71584: GO 71594
// end ; end ;
71586: GO 71522
71588: POP
71589: POP
// end ;
71590: GO 71408
71592: POP
71593: POP
// end ;
71594: LD_VAR 0 3
71598: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71599: LD_INT 0
71601: PPUSH
// if not side or side > 8 then
71602: LD_VAR 0 3
71606: NOT
71607: IFTRUE 71619
71609: PUSH
71610: LD_VAR 0 3
71614: PUSH
71615: LD_INT 8
71617: GREATER
71618: OR
71619: IFFALSE 71623
// exit ;
71621: GO 71682
// if not range then
71623: LD_VAR 0 4
71627: NOT
71628: IFFALSE 71639
// range := - 12 ;
71630: LD_ADDR_VAR 0 4
71634: PUSH
71635: LD_INT 12
71637: NEG
71638: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71639: LD_VAR 0 1
71643: PPUSH
71644: LD_VAR 0 2
71648: PPUSH
71649: LD_VAR 0 3
71653: PPUSH
71654: LD_VAR 0 4
71658: PPUSH
71659: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71663: LD_VAR 0 1
71667: PPUSH
71668: LD_VAR 0 2
71672: PPUSH
71673: LD_VAR 0 3
71677: PPUSH
71678: CALL_OW 331
// end ;
71682: LD_VAR 0 5
71686: RET
// export function Video ( mode ) ; begin
71687: LD_INT 0
71689: PPUSH
// ingame_video = mode ;
71690: LD_ADDR_OWVAR 52
71694: PUSH
71695: LD_VAR 0 1
71699: ST_TO_ADDR
// interface_hidden = mode ;
71700: LD_ADDR_OWVAR 54
71704: PUSH
71705: LD_VAR 0 1
71709: ST_TO_ADDR
// end ;
71710: LD_VAR 0 2
71714: RET
// export function Join ( array , element ) ; begin
71715: LD_INT 0
71717: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71718: LD_ADDR_VAR 0 3
71722: PUSH
71723: LD_VAR 0 1
71727: PPUSH
71728: LD_VAR 0 1
71732: PUSH
71733: LD_INT 1
71735: PLUS
71736: PPUSH
71737: LD_VAR 0 2
71741: PPUSH
71742: CALL_OW 1
71746: ST_TO_ADDR
// end ;
71747: LD_VAR 0 3
71751: RET
// export function JoinUnion ( array , element ) ; begin
71752: LD_INT 0
71754: PPUSH
// result := array union element ;
71755: LD_ADDR_VAR 0 3
71759: PUSH
71760: LD_VAR 0 1
71764: PUSH
71765: LD_VAR 0 2
71769: UNION
71770: ST_TO_ADDR
// end ;
71771: LD_VAR 0 3
71775: RET
// export function GetBehemoths ( side ) ; begin
71776: LD_INT 0
71778: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
71779: LD_ADDR_VAR 0 2
71783: PUSH
71784: LD_INT 22
71786: PUSH
71787: LD_VAR 0 1
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: PUSH
71796: LD_INT 31
71798: PUSH
71799: LD_INT 25
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: PPUSH
71810: CALL_OW 69
71814: ST_TO_ADDR
// end ;
71815: LD_VAR 0 2
71819: RET
// export function Shuffle ( array ) ; var i , index ; begin
71820: LD_INT 0
71822: PPUSH
71823: PPUSH
71824: PPUSH
// result := [ ] ;
71825: LD_ADDR_VAR 0 2
71829: PUSH
71830: EMPTY
71831: ST_TO_ADDR
// if not array then
71832: LD_VAR 0 1
71836: NOT
71837: IFFALSE 71841
// exit ;
71839: GO 71940
// Randomize ;
71841: CALL_OW 10
// for i = array downto 1 do
71845: LD_ADDR_VAR 0 3
71849: PUSH
71850: DOUBLE
71851: LD_VAR 0 1
71855: INC
71856: ST_TO_ADDR
71857: LD_INT 1
71859: PUSH
71860: FOR_DOWNTO
71861: IFFALSE 71938
// begin index := rand ( 1 , array ) ;
71863: LD_ADDR_VAR 0 4
71867: PUSH
71868: LD_INT 1
71870: PPUSH
71871: LD_VAR 0 1
71875: PPUSH
71876: CALL_OW 12
71880: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71881: LD_ADDR_VAR 0 2
71885: PUSH
71886: LD_VAR 0 2
71890: PPUSH
71891: LD_VAR 0 2
71895: PUSH
71896: LD_INT 1
71898: PLUS
71899: PPUSH
71900: LD_VAR 0 1
71904: PUSH
71905: LD_VAR 0 4
71909: ARRAY
71910: PPUSH
71911: CALL_OW 2
71915: ST_TO_ADDR
// array := Delete ( array , index ) ;
71916: LD_ADDR_VAR 0 1
71920: PUSH
71921: LD_VAR 0 1
71925: PPUSH
71926: LD_VAR 0 4
71930: PPUSH
71931: CALL_OW 3
71935: ST_TO_ADDR
// end ;
71936: GO 71860
71938: POP
71939: POP
// end ;
71940: LD_VAR 0 2
71944: RET
// export function GetBaseMaterials ( base ) ; begin
71945: LD_INT 0
71947: PPUSH
// result := [ 0 , 0 , 0 ] ;
71948: LD_ADDR_VAR 0 2
71952: PUSH
71953: LD_INT 0
71955: PUSH
71956: LD_INT 0
71958: PUSH
71959: LD_INT 0
71961: PUSH
71962: EMPTY
71963: LIST
71964: LIST
71965: LIST
71966: ST_TO_ADDR
// if not base then
71967: LD_VAR 0 1
71971: NOT
71972: IFFALSE 71976
// exit ;
71974: GO 72025
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71976: LD_ADDR_VAR 0 2
71980: PUSH
71981: LD_VAR 0 1
71985: PPUSH
71986: LD_INT 1
71988: PPUSH
71989: CALL_OW 275
71993: PUSH
71994: LD_VAR 0 1
71998: PPUSH
71999: LD_INT 2
72001: PPUSH
72002: CALL_OW 275
72006: PUSH
72007: LD_VAR 0 1
72011: PPUSH
72012: LD_INT 3
72014: PPUSH
72015: CALL_OW 275
72019: PUSH
72020: EMPTY
72021: LIST
72022: LIST
72023: LIST
72024: ST_TO_ADDR
// end ;
72025: LD_VAR 0 2
72029: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72030: LD_INT 0
72032: PPUSH
72033: PPUSH
// result := array ;
72034: LD_ADDR_VAR 0 3
72038: PUSH
72039: LD_VAR 0 1
72043: ST_TO_ADDR
// if size >= result then
72044: LD_VAR 0 2
72048: PUSH
72049: LD_VAR 0 3
72053: GREATEREQUAL
72054: IFFALSE 72058
// exit ;
72056: GO 72108
// if size then
72058: LD_VAR 0 2
72062: IFFALSE 72108
// for i := array downto size do
72064: LD_ADDR_VAR 0 4
72068: PUSH
72069: DOUBLE
72070: LD_VAR 0 1
72074: INC
72075: ST_TO_ADDR
72076: LD_VAR 0 2
72080: PUSH
72081: FOR_DOWNTO
72082: IFFALSE 72106
// result := Delete ( result , result ) ;
72084: LD_ADDR_VAR 0 3
72088: PUSH
72089: LD_VAR 0 3
72093: PPUSH
72094: LD_VAR 0 3
72098: PPUSH
72099: CALL_OW 3
72103: ST_TO_ADDR
72104: GO 72081
72106: POP
72107: POP
// end ;
72108: LD_VAR 0 3
72112: RET
// export function ComExit ( unit ) ; var tmp ; begin
72113: LD_INT 0
72115: PPUSH
72116: PPUSH
// if not IsInUnit ( unit ) then
72117: LD_VAR 0 1
72121: PPUSH
72122: CALL_OW 310
72126: NOT
72127: IFFALSE 72131
// exit ;
72129: GO 72191
// tmp := IsInUnit ( unit ) ;
72131: LD_ADDR_VAR 0 3
72135: PUSH
72136: LD_VAR 0 1
72140: PPUSH
72141: CALL_OW 310
72145: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72146: LD_VAR 0 3
72150: PPUSH
72151: CALL_OW 247
72155: PUSH
72156: LD_INT 2
72158: EQUAL
72159: IFFALSE 72172
// ComExitVehicle ( unit ) else
72161: LD_VAR 0 1
72165: PPUSH
72166: CALL_OW 121
72170: GO 72181
// ComExitBuilding ( unit ) ;
72172: LD_VAR 0 1
72176: PPUSH
72177: CALL_OW 122
// result := tmp ;
72181: LD_ADDR_VAR 0 2
72185: PUSH
72186: LD_VAR 0 3
72190: ST_TO_ADDR
// end ;
72191: LD_VAR 0 2
72195: RET
// export function ComExitAll ( units ) ; var i ; begin
72196: LD_INT 0
72198: PPUSH
72199: PPUSH
// if not units then
72200: LD_VAR 0 1
72204: NOT
72205: IFFALSE 72209
// exit ;
72207: GO 72235
// for i in units do
72209: LD_ADDR_VAR 0 3
72213: PUSH
72214: LD_VAR 0 1
72218: PUSH
72219: FOR_IN
72220: IFFALSE 72233
// ComExit ( i ) ;
72222: LD_VAR 0 3
72226: PPUSH
72227: CALL 72113 0 1
72231: GO 72219
72233: POP
72234: POP
// end ;
72235: LD_VAR 0 2
72239: RET
// export function ResetHc ; begin
72240: LD_INT 0
72242: PPUSH
// InitHc ;
72243: CALL_OW 19
// hc_importance := 0 ;
72247: LD_ADDR_OWVAR 32
72251: PUSH
72252: LD_INT 0
72254: ST_TO_ADDR
// end ;
72255: LD_VAR 0 1
72259: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72260: LD_INT 0
72262: PPUSH
72263: PPUSH
72264: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72265: LD_ADDR_VAR 0 6
72269: PUSH
72270: LD_VAR 0 1
72274: PUSH
72275: LD_VAR 0 3
72279: PLUS
72280: PUSH
72281: LD_INT 2
72283: DIV
72284: ST_TO_ADDR
// if _x < 0 then
72285: LD_VAR 0 6
72289: PUSH
72290: LD_INT 0
72292: LESS
72293: IFFALSE 72310
// _x := _x * - 1 ;
72295: LD_ADDR_VAR 0 6
72299: PUSH
72300: LD_VAR 0 6
72304: PUSH
72305: LD_INT 1
72307: NEG
72308: MUL
72309: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72310: LD_ADDR_VAR 0 7
72314: PUSH
72315: LD_VAR 0 2
72319: PUSH
72320: LD_VAR 0 4
72324: PLUS
72325: PUSH
72326: LD_INT 2
72328: DIV
72329: ST_TO_ADDR
// if _y < 0 then
72330: LD_VAR 0 7
72334: PUSH
72335: LD_INT 0
72337: LESS
72338: IFFALSE 72355
// _y := _y * - 1 ;
72340: LD_ADDR_VAR 0 7
72344: PUSH
72345: LD_VAR 0 7
72349: PUSH
72350: LD_INT 1
72352: NEG
72353: MUL
72354: ST_TO_ADDR
// result := [ _x , _y ] ;
72355: LD_ADDR_VAR 0 5
72359: PUSH
72360: LD_VAR 0 6
72364: PUSH
72365: LD_VAR 0 7
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: ST_TO_ADDR
// end ;
72374: LD_VAR 0 5
72378: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72379: LD_INT 0
72381: PPUSH
72382: PPUSH
72383: PPUSH
72384: PPUSH
// task := GetTaskList ( unit ) ;
72385: LD_ADDR_VAR 0 7
72389: PUSH
72390: LD_VAR 0 1
72394: PPUSH
72395: CALL_OW 437
72399: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72400: LD_VAR 0 7
72404: NOT
72405: IFFALSE 72424
72407: PUSH
72408: LD_VAR 0 1
72412: PPUSH
72413: LD_VAR 0 2
72417: PPUSH
72418: CALL_OW 308
72422: NOT
72423: AND
72424: IFFALSE 72428
// exit ;
72426: GO 72546
// if IsInArea ( unit , area ) then
72428: LD_VAR 0 1
72432: PPUSH
72433: LD_VAR 0 2
72437: PPUSH
72438: CALL_OW 308
72442: IFFALSE 72460
// begin ComMoveToArea ( unit , goAway ) ;
72444: LD_VAR 0 1
72448: PPUSH
72449: LD_VAR 0 3
72453: PPUSH
72454: CALL_OW 113
// exit ;
72458: GO 72546
// end ; if task [ 1 ] [ 1 ] <> M then
72460: LD_VAR 0 7
72464: PUSH
72465: LD_INT 1
72467: ARRAY
72468: PUSH
72469: LD_INT 1
72471: ARRAY
72472: PUSH
72473: LD_STRING M
72475: NONEQUAL
72476: IFFALSE 72480
// exit ;
72478: GO 72546
// x := task [ 1 ] [ 2 ] ;
72480: LD_ADDR_VAR 0 5
72484: PUSH
72485: LD_VAR 0 7
72489: PUSH
72490: LD_INT 1
72492: ARRAY
72493: PUSH
72494: LD_INT 2
72496: ARRAY
72497: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72498: LD_ADDR_VAR 0 6
72502: PUSH
72503: LD_VAR 0 7
72507: PUSH
72508: LD_INT 1
72510: ARRAY
72511: PUSH
72512: LD_INT 3
72514: ARRAY
72515: ST_TO_ADDR
// if InArea ( x , y , area ) then
72516: LD_VAR 0 5
72520: PPUSH
72521: LD_VAR 0 6
72525: PPUSH
72526: LD_VAR 0 2
72530: PPUSH
72531: CALL_OW 309
72535: IFFALSE 72546
// ComStop ( unit ) ;
72537: LD_VAR 0 1
72541: PPUSH
72542: CALL_OW 141
// end ;
72546: LD_VAR 0 4
72550: RET
// export function Abs ( value ) ; begin
72551: LD_INT 0
72553: PPUSH
// result := value ;
72554: LD_ADDR_VAR 0 2
72558: PUSH
72559: LD_VAR 0 1
72563: ST_TO_ADDR
// if value < 0 then
72564: LD_VAR 0 1
72568: PUSH
72569: LD_INT 0
72571: LESS
72572: IFFALSE 72589
// result := value * - 1 ;
72574: LD_ADDR_VAR 0 2
72578: PUSH
72579: LD_VAR 0 1
72583: PUSH
72584: LD_INT 1
72586: NEG
72587: MUL
72588: ST_TO_ADDR
// end ;
72589: LD_VAR 0 2
72593: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72594: LD_INT 0
72596: PPUSH
72597: PPUSH
72598: PPUSH
72599: PPUSH
72600: PPUSH
72601: PPUSH
72602: PPUSH
72603: PPUSH
// if not unit or not building then
72604: LD_VAR 0 1
72608: NOT
72609: IFTRUE 72618
72611: PUSH
72612: LD_VAR 0 2
72616: NOT
72617: OR
72618: IFFALSE 72622
// exit ;
72620: GO 72850
// x := GetX ( building ) ;
72622: LD_ADDR_VAR 0 4
72626: PUSH
72627: LD_VAR 0 2
72631: PPUSH
72632: CALL_OW 250
72636: ST_TO_ADDR
// y := GetY ( building ) ;
72637: LD_ADDR_VAR 0 6
72641: PUSH
72642: LD_VAR 0 2
72646: PPUSH
72647: CALL_OW 251
72651: ST_TO_ADDR
// d := GetDir ( building ) ;
72652: LD_ADDR_VAR 0 8
72656: PUSH
72657: LD_VAR 0 2
72661: PPUSH
72662: CALL_OW 254
72666: ST_TO_ADDR
// r := 4 ;
72667: LD_ADDR_VAR 0 9
72671: PUSH
72672: LD_INT 4
72674: ST_TO_ADDR
// for i := 1 to 5 do
72675: LD_ADDR_VAR 0 10
72679: PUSH
72680: DOUBLE
72681: LD_INT 1
72683: DEC
72684: ST_TO_ADDR
72685: LD_INT 5
72687: PUSH
72688: FOR_TO
72689: IFFALSE 72848
// begin _x := ShiftX ( x , d , r + i ) ;
72691: LD_ADDR_VAR 0 5
72695: PUSH
72696: LD_VAR 0 4
72700: PPUSH
72701: LD_VAR 0 8
72705: PPUSH
72706: LD_VAR 0 9
72710: PUSH
72711: LD_VAR 0 10
72715: PLUS
72716: PPUSH
72717: CALL_OW 272
72721: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72722: LD_ADDR_VAR 0 7
72726: PUSH
72727: LD_VAR 0 6
72731: PPUSH
72732: LD_VAR 0 8
72736: PPUSH
72737: LD_VAR 0 9
72741: PUSH
72742: LD_VAR 0 10
72746: PLUS
72747: PPUSH
72748: CALL_OW 273
72752: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72753: LD_VAR 0 5
72757: PPUSH
72758: LD_VAR 0 7
72762: PPUSH
72763: CALL_OW 488
72767: IFFALSE 72802
72769: PUSH
72770: LD_VAR 0 5
72774: PPUSH
72775: LD_VAR 0 7
72779: PPUSH
72780: CALL_OW 428
72784: PPUSH
72785: CALL_OW 247
72789: PUSH
72790: LD_INT 3
72792: PUSH
72793: LD_INT 2
72795: PUSH
72796: EMPTY
72797: LIST
72798: LIST
72799: IN
72800: NOT
72801: AND
72802: IFFALSE 72846
// begin ComMoveXY ( unit , _x , _y ) ;
72804: LD_VAR 0 1
72808: PPUSH
72809: LD_VAR 0 5
72813: PPUSH
72814: LD_VAR 0 7
72818: PPUSH
72819: CALL_OW 111
// result := [ _x , _y ] ;
72823: LD_ADDR_VAR 0 3
72827: PUSH
72828: LD_VAR 0 5
72832: PUSH
72833: LD_VAR 0 7
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: ST_TO_ADDR
// exit ;
72842: POP
72843: POP
72844: GO 72850
// end ; end ;
72846: GO 72688
72848: POP
72849: POP
// end ;
72850: LD_VAR 0 3
72854: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72855: LD_INT 0
72857: PPUSH
72858: PPUSH
72859: PPUSH
// result := 0 ;
72860: LD_ADDR_VAR 0 3
72864: PUSH
72865: LD_INT 0
72867: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72868: LD_VAR 0 1
72872: PUSH
72873: LD_INT 0
72875: LESS
72876: IFTRUE 72888
72878: PUSH
72879: LD_VAR 0 1
72883: PUSH
72884: LD_INT 8
72886: GREATER
72887: OR
72888: IFTRUE 72900
72890: PUSH
72891: LD_VAR 0 2
72895: PUSH
72896: LD_INT 0
72898: LESS
72899: OR
72900: IFTRUE 72912
72902: PUSH
72903: LD_VAR 0 2
72907: PUSH
72908: LD_INT 8
72910: GREATER
72911: OR
72912: IFFALSE 72916
// exit ;
72914: GO 72991
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72916: LD_ADDR_VAR 0 4
72920: PUSH
72921: LD_INT 22
72923: PUSH
72924: LD_VAR 0 2
72928: PUSH
72929: EMPTY
72930: LIST
72931: LIST
72932: PPUSH
72933: CALL_OW 69
72937: PUSH
72938: FOR_IN
72939: IFFALSE 72989
// begin un := UnitShoot ( i ) ;
72941: LD_ADDR_VAR 0 5
72945: PUSH
72946: LD_VAR 0 4
72950: PPUSH
72951: CALL_OW 504
72955: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72956: LD_VAR 0 5
72960: PPUSH
72961: CALL_OW 255
72965: PUSH
72966: LD_VAR 0 1
72970: EQUAL
72971: IFFALSE 72987
// begin result := un ;
72973: LD_ADDR_VAR 0 3
72977: PUSH
72978: LD_VAR 0 5
72982: ST_TO_ADDR
// exit ;
72983: POP
72984: POP
72985: GO 72991
// end ; end ;
72987: GO 72938
72989: POP
72990: POP
// end ;
72991: LD_VAR 0 3
72995: RET
// export function GetCargoBay ( units ) ; begin
72996: LD_INT 0
72998: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72999: LD_ADDR_VAR 0 2
73003: PUSH
73004: LD_VAR 0 1
73008: PPUSH
73009: LD_INT 2
73011: PUSH
73012: LD_INT 34
73014: PUSH
73015: LD_INT 12
73017: PUSH
73018: EMPTY
73019: LIST
73020: LIST
73021: PUSH
73022: LD_INT 34
73024: PUSH
73025: LD_INT 51
73027: PUSH
73028: EMPTY
73029: LIST
73030: LIST
73031: PUSH
73032: LD_INT 34
73034: PUSH
73035: LD_INT 32
73037: PUSH
73038: EMPTY
73039: LIST
73040: LIST
73041: PUSH
73042: LD_INT 34
73044: PUSH
73045: LD_INT 89
73047: PUSH
73048: EMPTY
73049: LIST
73050: LIST
73051: PUSH
73052: EMPTY
73053: LIST
73054: LIST
73055: LIST
73056: LIST
73057: LIST
73058: PPUSH
73059: CALL_OW 72
73063: ST_TO_ADDR
// end ;
73064: LD_VAR 0 2
73068: RET
// export function Negate ( value ) ; begin
73069: LD_INT 0
73071: PPUSH
// result := not value ;
73072: LD_ADDR_VAR 0 2
73076: PUSH
73077: LD_VAR 0 1
73081: NOT
73082: ST_TO_ADDR
// end ;
73083: LD_VAR 0 2
73087: RET
// export function Inc ( value ) ; begin
73088: LD_INT 0
73090: PPUSH
// result := value + 1 ;
73091: LD_ADDR_VAR 0 2
73095: PUSH
73096: LD_VAR 0 1
73100: PUSH
73101: LD_INT 1
73103: PLUS
73104: ST_TO_ADDR
// end ;
73105: LD_VAR 0 2
73109: RET
// export function Dec ( value ) ; begin
73110: LD_INT 0
73112: PPUSH
// result := value - 1 ;
73113: LD_ADDR_VAR 0 2
73117: PUSH
73118: LD_VAR 0 1
73122: PUSH
73123: LD_INT 1
73125: MINUS
73126: ST_TO_ADDR
// end ;
73127: LD_VAR 0 2
73131: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73132: LD_INT 0
73134: PPUSH
73135: PPUSH
73136: PPUSH
73137: PPUSH
73138: PPUSH
73139: PPUSH
73140: PPUSH
73141: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73142: LD_VAR 0 1
73146: PPUSH
73147: LD_VAR 0 2
73151: PPUSH
73152: CALL_OW 488
73156: NOT
73157: IFTRUE 73176
73159: PUSH
73160: LD_VAR 0 3
73164: PPUSH
73165: LD_VAR 0 4
73169: PPUSH
73170: CALL_OW 488
73174: NOT
73175: OR
73176: IFFALSE 73189
// begin result := - 1 ;
73178: LD_ADDR_VAR 0 5
73182: PUSH
73183: LD_INT 1
73185: NEG
73186: ST_TO_ADDR
// exit ;
73187: GO 73424
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73189: LD_ADDR_VAR 0 12
73193: PUSH
73194: LD_VAR 0 1
73198: PPUSH
73199: LD_VAR 0 2
73203: PPUSH
73204: LD_VAR 0 3
73208: PPUSH
73209: LD_VAR 0 4
73213: PPUSH
73214: CALL 72260 0 4
73218: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73219: LD_ADDR_VAR 0 11
73223: PUSH
73224: LD_VAR 0 1
73228: PPUSH
73229: LD_VAR 0 2
73233: PPUSH
73234: LD_VAR 0 12
73238: PUSH
73239: LD_INT 1
73241: ARRAY
73242: PPUSH
73243: LD_VAR 0 12
73247: PUSH
73248: LD_INT 2
73250: ARRAY
73251: PPUSH
73252: CALL_OW 298
73256: ST_TO_ADDR
// distance := 9999 ;
73257: LD_ADDR_VAR 0 10
73261: PUSH
73262: LD_INT 9999
73264: ST_TO_ADDR
// for i := 0 to 5 do
73265: LD_ADDR_VAR 0 6
73269: PUSH
73270: DOUBLE
73271: LD_INT 0
73273: DEC
73274: ST_TO_ADDR
73275: LD_INT 5
73277: PUSH
73278: FOR_TO
73279: IFFALSE 73422
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73281: LD_ADDR_VAR 0 7
73285: PUSH
73286: LD_VAR 0 1
73290: PPUSH
73291: LD_VAR 0 6
73295: PPUSH
73296: LD_VAR 0 11
73300: PPUSH
73301: CALL_OW 272
73305: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73306: LD_ADDR_VAR 0 8
73310: PUSH
73311: LD_VAR 0 2
73315: PPUSH
73316: LD_VAR 0 6
73320: PPUSH
73321: LD_VAR 0 11
73325: PPUSH
73326: CALL_OW 273
73330: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73331: LD_VAR 0 7
73335: PPUSH
73336: LD_VAR 0 8
73340: PPUSH
73341: CALL_OW 488
73345: NOT
73346: IFFALSE 73350
// continue ;
73348: GO 73278
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73350: LD_ADDR_VAR 0 9
73354: PUSH
73355: LD_VAR 0 12
73359: PUSH
73360: LD_INT 1
73362: ARRAY
73363: PPUSH
73364: LD_VAR 0 12
73368: PUSH
73369: LD_INT 2
73371: ARRAY
73372: PPUSH
73373: LD_VAR 0 7
73377: PPUSH
73378: LD_VAR 0 8
73382: PPUSH
73383: CALL_OW 298
73387: ST_TO_ADDR
// if tmp < distance then
73388: LD_VAR 0 9
73392: PUSH
73393: LD_VAR 0 10
73397: LESS
73398: IFFALSE 73420
// begin result := i ;
73400: LD_ADDR_VAR 0 5
73404: PUSH
73405: LD_VAR 0 6
73409: ST_TO_ADDR
// distance := tmp ;
73410: LD_ADDR_VAR 0 10
73414: PUSH
73415: LD_VAR 0 9
73419: ST_TO_ADDR
// end ; end ;
73420: GO 73278
73422: POP
73423: POP
// end ;
73424: LD_VAR 0 5
73428: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73429: LD_INT 0
73431: PPUSH
73432: PPUSH
// if not driver or not IsInUnit ( driver ) then
73433: LD_VAR 0 1
73437: NOT
73438: IFTRUE 73452
73440: PUSH
73441: LD_VAR 0 1
73445: PPUSH
73446: CALL_OW 310
73450: NOT
73451: OR
73452: IFFALSE 73456
// exit ;
73454: GO 73546
// vehicle := IsInUnit ( driver ) ;
73456: LD_ADDR_VAR 0 3
73460: PUSH
73461: LD_VAR 0 1
73465: PPUSH
73466: CALL_OW 310
73470: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73471: LD_VAR 0 1
73475: PPUSH
73476: LD_STRING \
73478: PUSH
73479: LD_INT 0
73481: PUSH
73482: LD_INT 0
73484: PUSH
73485: LD_INT 0
73487: PUSH
73488: LD_INT 0
73490: PUSH
73491: LD_INT 0
73493: PUSH
73494: LD_INT 0
73496: PUSH
73497: EMPTY
73498: LIST
73499: LIST
73500: LIST
73501: LIST
73502: LIST
73503: LIST
73504: LIST
73505: PUSH
73506: LD_STRING E
73508: PUSH
73509: LD_INT 0
73511: PUSH
73512: LD_INT 0
73514: PUSH
73515: LD_VAR 0 3
73519: PUSH
73520: LD_INT 0
73522: PUSH
73523: LD_INT 0
73525: PUSH
73526: LD_INT 0
73528: PUSH
73529: EMPTY
73530: LIST
73531: LIST
73532: LIST
73533: LIST
73534: LIST
73535: LIST
73536: LIST
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: PPUSH
73542: CALL_OW 446
// end ;
73546: LD_VAR 0 2
73550: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73551: LD_INT 0
73553: PPUSH
73554: PPUSH
// if not driver or not IsInUnit ( driver ) then
73555: LD_VAR 0 1
73559: NOT
73560: IFTRUE 73574
73562: PUSH
73563: LD_VAR 0 1
73567: PPUSH
73568: CALL_OW 310
73572: NOT
73573: OR
73574: IFFALSE 73578
// exit ;
73576: GO 73668
// vehicle := IsInUnit ( driver ) ;
73578: LD_ADDR_VAR 0 3
73582: PUSH
73583: LD_VAR 0 1
73587: PPUSH
73588: CALL_OW 310
73592: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73593: LD_VAR 0 1
73597: PPUSH
73598: LD_STRING \
73600: PUSH
73601: LD_INT 0
73603: PUSH
73604: LD_INT 0
73606: PUSH
73607: LD_INT 0
73609: PUSH
73610: LD_INT 0
73612: PUSH
73613: LD_INT 0
73615: PUSH
73616: LD_INT 0
73618: PUSH
73619: EMPTY
73620: LIST
73621: LIST
73622: LIST
73623: LIST
73624: LIST
73625: LIST
73626: LIST
73627: PUSH
73628: LD_STRING E
73630: PUSH
73631: LD_INT 0
73633: PUSH
73634: LD_INT 0
73636: PUSH
73637: LD_VAR 0 3
73641: PUSH
73642: LD_INT 0
73644: PUSH
73645: LD_INT 0
73647: PUSH
73648: LD_INT 0
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: LIST
73655: LIST
73656: LIST
73657: LIST
73658: LIST
73659: PUSH
73660: EMPTY
73661: LIST
73662: LIST
73663: PPUSH
73664: CALL_OW 447
// end ;
73668: LD_VAR 0 2
73672: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73673: LD_INT 0
73675: PPUSH
73676: PPUSH
73677: PPUSH
// tmp := [ ] ;
73678: LD_ADDR_VAR 0 5
73682: PUSH
73683: EMPTY
73684: ST_TO_ADDR
// for i in units do
73685: LD_ADDR_VAR 0 4
73689: PUSH
73690: LD_VAR 0 1
73694: PUSH
73695: FOR_IN
73696: IFFALSE 73734
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73698: LD_ADDR_VAR 0 5
73702: PUSH
73703: LD_VAR 0 5
73707: PPUSH
73708: LD_VAR 0 5
73712: PUSH
73713: LD_INT 1
73715: PLUS
73716: PPUSH
73717: LD_VAR 0 4
73721: PPUSH
73722: CALL_OW 256
73726: PPUSH
73727: CALL_OW 2
73731: ST_TO_ADDR
73732: GO 73695
73734: POP
73735: POP
// if not tmp then
73736: LD_VAR 0 5
73740: NOT
73741: IFFALSE 73745
// exit ;
73743: GO 73793
// if asc then
73745: LD_VAR 0 2
73749: IFFALSE 73773
// result := SortListByListAsc ( units , tmp ) else
73751: LD_ADDR_VAR 0 3
73755: PUSH
73756: LD_VAR 0 1
73760: PPUSH
73761: LD_VAR 0 5
73765: PPUSH
73766: CALL_OW 76
73770: ST_TO_ADDR
73771: GO 73793
// result := SortListByListDesc ( units , tmp ) ;
73773: LD_ADDR_VAR 0 3
73777: PUSH
73778: LD_VAR 0 1
73782: PPUSH
73783: LD_VAR 0 5
73787: PPUSH
73788: CALL_OW 77
73792: ST_TO_ADDR
// end ;
73793: LD_VAR 0 3
73797: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73798: LD_INT 0
73800: PPUSH
73801: PPUSH
// task := GetTaskList ( mech ) ;
73802: LD_ADDR_VAR 0 4
73806: PUSH
73807: LD_VAR 0 1
73811: PPUSH
73812: CALL_OW 437
73816: ST_TO_ADDR
// if not task then
73817: LD_VAR 0 4
73821: NOT
73822: IFFALSE 73826
// exit ;
73824: GO 73870
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73826: LD_ADDR_VAR 0 3
73830: PUSH
73831: LD_VAR 0 4
73835: PUSH
73836: LD_INT 1
73838: ARRAY
73839: PUSH
73840: LD_INT 1
73842: ARRAY
73843: PUSH
73844: LD_STRING r
73846: EQUAL
73847: IFFALSE 73869
73849: PUSH
73850: LD_VAR 0 4
73854: PUSH
73855: LD_INT 1
73857: ARRAY
73858: PUSH
73859: LD_INT 4
73861: ARRAY
73862: PUSH
73863: LD_VAR 0 2
73867: EQUAL
73868: AND
73869: ST_TO_ADDR
// end ;
73870: LD_VAR 0 3
73874: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73875: LD_INT 0
73877: PPUSH
// SetDir ( unit , d ) ;
73878: LD_VAR 0 1
73882: PPUSH
73883: LD_VAR 0 4
73887: PPUSH
73888: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
73892: LD_ADDR_VAR 0 6
73896: PUSH
73897: LD_VAR 0 1
73901: PPUSH
73902: LD_VAR 0 2
73906: PPUSH
73907: LD_VAR 0 3
73911: PPUSH
73912: LD_VAR 0 5
73916: PPUSH
73917: CALL_OW 48
73921: ST_TO_ADDR
// end ;
73922: LD_VAR 0 6
73926: RET
// export function ToNaturalNumber ( number ) ; begin
73927: LD_INT 0
73929: PPUSH
// result := number div 1 ;
73930: LD_ADDR_VAR 0 2
73934: PUSH
73935: LD_VAR 0 1
73939: PUSH
73940: LD_INT 1
73942: DIV
73943: ST_TO_ADDR
// if number < 0 then
73944: LD_VAR 0 1
73948: PUSH
73949: LD_INT 0
73951: LESS
73952: IFFALSE 73962
// result := 0 ;
73954: LD_ADDR_VAR 0 2
73958: PUSH
73959: LD_INT 0
73961: ST_TO_ADDR
// end ;
73962: LD_VAR 0 2
73966: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
73967: LD_INT 0
73969: PPUSH
73970: PPUSH
73971: PPUSH
// if not buildings then
73972: LD_VAR 0 1
73976: NOT
73977: IFFALSE 73981
// exit ;
73979: GO 74096
// tmp := [ ] ;
73981: LD_ADDR_VAR 0 5
73985: PUSH
73986: EMPTY
73987: ST_TO_ADDR
// for b in buildings do
73988: LD_ADDR_VAR 0 4
73992: PUSH
73993: LD_VAR 0 1
73997: PUSH
73998: FOR_IN
73999: IFFALSE 74037
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
74001: LD_ADDR_VAR 0 5
74005: PUSH
74006: LD_VAR 0 5
74010: PPUSH
74011: LD_VAR 0 5
74015: PUSH
74016: LD_INT 1
74018: PLUS
74019: PPUSH
74020: LD_VAR 0 4
74024: PPUSH
74025: CALL_OW 266
74029: PPUSH
74030: CALL_OW 1
74034: ST_TO_ADDR
74035: GO 73998
74037: POP
74038: POP
// if not tmp then
74039: LD_VAR 0 5
74043: NOT
74044: IFFALSE 74048
// exit ;
74046: GO 74096
// if asc then
74048: LD_VAR 0 2
74052: IFFALSE 74076
// result := SortListByListAsc ( buildings , tmp ) else
74054: LD_ADDR_VAR 0 3
74058: PUSH
74059: LD_VAR 0 1
74063: PPUSH
74064: LD_VAR 0 5
74068: PPUSH
74069: CALL_OW 76
74073: ST_TO_ADDR
74074: GO 74096
// result := SortListByListDesc ( buildings , tmp ) ;
74076: LD_ADDR_VAR 0 3
74080: PUSH
74081: LD_VAR 0 1
74085: PPUSH
74086: LD_VAR 0 5
74090: PPUSH
74091: CALL_OW 77
74095: ST_TO_ADDR
// end ;
74096: LD_VAR 0 3
74100: RET
// export function SortByClass ( units , class ) ; var un ; begin
74101: LD_INT 0
74103: PPUSH
74104: PPUSH
// if not units or not class then
74105: LD_VAR 0 1
74109: NOT
74110: IFTRUE 74119
74112: PUSH
74113: LD_VAR 0 2
74117: NOT
74118: OR
74119: IFFALSE 74123
// exit ;
74121: GO 74218
// result := [ ] ;
74123: LD_ADDR_VAR 0 3
74127: PUSH
74128: EMPTY
74129: ST_TO_ADDR
// for un in units do
74130: LD_ADDR_VAR 0 4
74134: PUSH
74135: LD_VAR 0 1
74139: PUSH
74140: FOR_IN
74141: IFFALSE 74216
// if GetClass ( un ) = class then
74143: LD_VAR 0 4
74147: PPUSH
74148: CALL_OW 257
74152: PUSH
74153: LD_VAR 0 2
74157: EQUAL
74158: IFFALSE 74185
// result := Insert ( result , 1 , un ) else
74160: LD_ADDR_VAR 0 3
74164: PUSH
74165: LD_VAR 0 3
74169: PPUSH
74170: LD_INT 1
74172: PPUSH
74173: LD_VAR 0 4
74177: PPUSH
74178: CALL_OW 2
74182: ST_TO_ADDR
74183: GO 74214
// result := Replace ( result , result + 1 , un ) ;
74185: LD_ADDR_VAR 0 3
74189: PUSH
74190: LD_VAR 0 3
74194: PPUSH
74195: LD_VAR 0 3
74199: PUSH
74200: LD_INT 1
74202: PLUS
74203: PPUSH
74204: LD_VAR 0 4
74208: PPUSH
74209: CALL_OW 1
74213: ST_TO_ADDR
74214: GO 74140
74216: POP
74217: POP
// end ;
74218: LD_VAR 0 3
74222: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74223: LD_INT 0
74225: PPUSH
74226: PPUSH
74227: PPUSH
74228: PPUSH
74229: PPUSH
74230: PPUSH
74231: PPUSH
// result := [ ] ;
74232: LD_ADDR_VAR 0 4
74236: PUSH
74237: EMPTY
74238: ST_TO_ADDR
// if x - r < 0 then
74239: LD_VAR 0 1
74243: PUSH
74244: LD_VAR 0 3
74248: MINUS
74249: PUSH
74250: LD_INT 0
74252: LESS
74253: IFFALSE 74265
// min_x := 0 else
74255: LD_ADDR_VAR 0 8
74259: PUSH
74260: LD_INT 0
74262: ST_TO_ADDR
74263: GO 74281
// min_x := x - r ;
74265: LD_ADDR_VAR 0 8
74269: PUSH
74270: LD_VAR 0 1
74274: PUSH
74275: LD_VAR 0 3
74279: MINUS
74280: ST_TO_ADDR
// if y - r < 0 then
74281: LD_VAR 0 2
74285: PUSH
74286: LD_VAR 0 3
74290: MINUS
74291: PUSH
74292: LD_INT 0
74294: LESS
74295: IFFALSE 74307
// min_y := 0 else
74297: LD_ADDR_VAR 0 7
74301: PUSH
74302: LD_INT 0
74304: ST_TO_ADDR
74305: GO 74323
// min_y := y - r ;
74307: LD_ADDR_VAR 0 7
74311: PUSH
74312: LD_VAR 0 2
74316: PUSH
74317: LD_VAR 0 3
74321: MINUS
74322: ST_TO_ADDR
// max_x := x + r ;
74323: LD_ADDR_VAR 0 9
74327: PUSH
74328: LD_VAR 0 1
74332: PUSH
74333: LD_VAR 0 3
74337: PLUS
74338: ST_TO_ADDR
// max_y := y + r ;
74339: LD_ADDR_VAR 0 10
74343: PUSH
74344: LD_VAR 0 2
74348: PUSH
74349: LD_VAR 0 3
74353: PLUS
74354: ST_TO_ADDR
// for _x = min_x to max_x do
74355: LD_ADDR_VAR 0 5
74359: PUSH
74360: DOUBLE
74361: LD_VAR 0 8
74365: DEC
74366: ST_TO_ADDR
74367: LD_VAR 0 9
74371: PUSH
74372: FOR_TO
74373: IFFALSE 74474
// for _y = min_y to max_y do
74375: LD_ADDR_VAR 0 6
74379: PUSH
74380: DOUBLE
74381: LD_VAR 0 7
74385: DEC
74386: ST_TO_ADDR
74387: LD_VAR 0 10
74391: PUSH
74392: FOR_TO
74393: IFFALSE 74470
// begin if not ValidHex ( _x , _y ) then
74395: LD_VAR 0 5
74399: PPUSH
74400: LD_VAR 0 6
74404: PPUSH
74405: CALL_OW 488
74409: NOT
74410: IFFALSE 74414
// continue ;
74412: GO 74392
// if GetResourceTypeXY ( _x , _y ) then
74414: LD_VAR 0 5
74418: PPUSH
74419: LD_VAR 0 6
74423: PPUSH
74424: CALL_OW 283
74428: IFFALSE 74468
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74430: LD_ADDR_VAR 0 4
74434: PUSH
74435: LD_VAR 0 4
74439: PPUSH
74440: LD_VAR 0 4
74444: PUSH
74445: LD_INT 1
74447: PLUS
74448: PPUSH
74449: LD_VAR 0 5
74453: PUSH
74454: LD_VAR 0 6
74458: PUSH
74459: EMPTY
74460: LIST
74461: LIST
74462: PPUSH
74463: CALL_OW 1
74467: ST_TO_ADDR
// end ;
74468: GO 74392
74470: POP
74471: POP
74472: GO 74372
74474: POP
74475: POP
// end ;
74476: LD_VAR 0 4
74480: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74481: LD_INT 0
74483: PPUSH
74484: PPUSH
74485: PPUSH
74486: PPUSH
74487: PPUSH
74488: PPUSH
74489: PPUSH
74490: PPUSH
// if not units then
74491: LD_VAR 0 1
74495: NOT
74496: IFFALSE 74500
// exit ;
74498: GO 75032
// result := UnitFilter ( units , [ f_ok ] ) ;
74500: LD_ADDR_VAR 0 3
74504: PUSH
74505: LD_VAR 0 1
74509: PPUSH
74510: LD_INT 50
74512: PUSH
74513: EMPTY
74514: LIST
74515: PPUSH
74516: CALL_OW 72
74520: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74521: LD_ADDR_VAR 0 8
74525: PUSH
74526: LD_VAR 0 1
74530: PUSH
74531: LD_INT 1
74533: ARRAY
74534: PPUSH
74535: CALL_OW 255
74539: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74540: LD_ADDR_VAR 0 10
74544: PUSH
74545: LD_INT 29
74547: PUSH
74548: LD_INT 91
74550: PUSH
74551: LD_INT 49
74553: PUSH
74554: EMPTY
74555: LIST
74556: LIST
74557: LIST
74558: ST_TO_ADDR
// if not result then
74559: LD_VAR 0 3
74563: NOT
74564: IFFALSE 74568
// exit ;
74566: GO 75032
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74568: LD_ADDR_VAR 0 5
74572: PUSH
74573: LD_INT 81
74575: PUSH
74576: LD_VAR 0 8
74580: PUSH
74581: EMPTY
74582: LIST
74583: LIST
74584: PPUSH
74585: CALL_OW 69
74589: ST_TO_ADDR
// for i in result do
74590: LD_ADDR_VAR 0 4
74594: PUSH
74595: LD_VAR 0 3
74599: PUSH
74600: FOR_IN
74601: IFFALSE 75030
// begin tag := GetTag ( i ) + 1 ;
74603: LD_ADDR_VAR 0 9
74607: PUSH
74608: LD_VAR 0 4
74612: PPUSH
74613: CALL_OW 110
74617: PUSH
74618: LD_INT 1
74620: PLUS
74621: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
74622: LD_ADDR_VAR 0 7
74626: PUSH
74627: LD_VAR 0 4
74631: PPUSH
74632: CALL_OW 250
74636: PPUSH
74637: LD_VAR 0 4
74641: PPUSH
74642: CALL_OW 251
74646: PPUSH
74647: LD_INT 4
74649: PPUSH
74650: CALL 74223 0 3
74654: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
74655: LD_VAR 0 4
74659: PPUSH
74660: CALL_OW 247
74664: PUSH
74665: LD_INT 2
74667: EQUAL
74668: IFFALSE 74680
74670: PUSH
74671: LD_VAR 0 7
74675: PUSH
74676: LD_INT 2
74678: GREATER
74679: AND
74680: IFFALSE 74700
74682: PUSH
74683: LD_VAR 0 4
74687: PPUSH
74688: CALL_OW 264
74692: PUSH
74693: LD_VAR 0 10
74697: IN
74698: NOT
74699: AND
74700: IFFALSE 74739
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74702: LD_VAR 0 4
74706: PPUSH
74707: LD_VAR 0 7
74711: PUSH
74712: LD_INT 1
74714: ARRAY
74715: PUSH
74716: LD_INT 1
74718: ARRAY
74719: PPUSH
74720: LD_VAR 0 7
74724: PUSH
74725: LD_INT 1
74727: ARRAY
74728: PUSH
74729: LD_INT 2
74731: ARRAY
74732: PPUSH
74733: CALL_OW 116
74737: GO 75028
// if path > tag then
74739: LD_VAR 0 2
74743: PUSH
74744: LD_VAR 0 9
74748: GREATER
74749: IFFALSE 74957
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74751: LD_ADDR_VAR 0 6
74755: PUSH
74756: LD_VAR 0 5
74760: PPUSH
74761: LD_INT 91
74763: PUSH
74764: LD_VAR 0 4
74768: PUSH
74769: LD_INT 8
74771: PUSH
74772: EMPTY
74773: LIST
74774: LIST
74775: LIST
74776: PPUSH
74777: CALL_OW 72
74781: ST_TO_ADDR
// if nearEnemy then
74782: LD_VAR 0 6
74786: IFFALSE 74855
// begin if GetWeapon ( i ) = ru_time_lapser then
74788: LD_VAR 0 4
74792: PPUSH
74793: CALL_OW 264
74797: PUSH
74798: LD_INT 49
74800: EQUAL
74801: IFFALSE 74829
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74803: LD_VAR 0 4
74807: PPUSH
74808: LD_VAR 0 6
74812: PPUSH
74813: LD_VAR 0 4
74817: PPUSH
74818: CALL_OW 74
74822: PPUSH
74823: CALL_OW 112
74827: GO 74853
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74829: LD_VAR 0 4
74833: PPUSH
74834: LD_VAR 0 6
74838: PPUSH
74839: LD_VAR 0 4
74843: PPUSH
74844: CALL_OW 74
74848: PPUSH
74849: CALL 76113 0 2
// end else
74853: GO 74955
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74855: LD_VAR 0 4
74859: PPUSH
74860: LD_VAR 0 2
74864: PUSH
74865: LD_VAR 0 9
74869: ARRAY
74870: PUSH
74871: LD_INT 1
74873: ARRAY
74874: PPUSH
74875: LD_VAR 0 2
74879: PUSH
74880: LD_VAR 0 9
74884: ARRAY
74885: PUSH
74886: LD_INT 2
74888: ARRAY
74889: PPUSH
74890: CALL_OW 297
74894: PUSH
74895: LD_INT 6
74897: GREATER
74898: IFFALSE 74941
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74900: LD_VAR 0 4
74904: PPUSH
74905: LD_VAR 0 2
74909: PUSH
74910: LD_VAR 0 9
74914: ARRAY
74915: PUSH
74916: LD_INT 1
74918: ARRAY
74919: PPUSH
74920: LD_VAR 0 2
74924: PUSH
74925: LD_VAR 0 9
74929: ARRAY
74930: PUSH
74931: LD_INT 2
74933: ARRAY
74934: PPUSH
74935: CALL_OW 114
74939: GO 74955
// SetTag ( i , tag ) ;
74941: LD_VAR 0 4
74945: PPUSH
74946: LD_VAR 0 9
74950: PPUSH
74951: CALL_OW 109
// end else
74955: GO 75028
// if enemy then
74957: LD_VAR 0 5
74961: IFFALSE 75028
// begin if GetWeapon ( i ) = ru_time_lapser then
74963: LD_VAR 0 4
74967: PPUSH
74968: CALL_OW 264
74972: PUSH
74973: LD_INT 49
74975: EQUAL
74976: IFFALSE 75004
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74978: LD_VAR 0 4
74982: PPUSH
74983: LD_VAR 0 5
74987: PPUSH
74988: LD_VAR 0 4
74992: PPUSH
74993: CALL_OW 74
74997: PPUSH
74998: CALL_OW 112
75002: GO 75028
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75004: LD_VAR 0 4
75008: PPUSH
75009: LD_VAR 0 5
75013: PPUSH
75014: LD_VAR 0 4
75018: PPUSH
75019: CALL_OW 74
75023: PPUSH
75024: CALL 76113 0 2
// end ; end ;
75028: GO 74600
75030: POP
75031: POP
// end ;
75032: LD_VAR 0 3
75036: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75037: LD_INT 0
75039: PPUSH
75040: PPUSH
75041: PPUSH
// if not unit or IsInUnit ( unit ) then
75042: LD_VAR 0 1
75046: NOT
75047: IFTRUE 75060
75049: PUSH
75050: LD_VAR 0 1
75054: PPUSH
75055: CALL_OW 310
75059: OR
75060: IFFALSE 75064
// exit ;
75062: GO 75155
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75064: LD_ADDR_VAR 0 4
75068: PUSH
75069: LD_VAR 0 1
75073: PPUSH
75074: CALL_OW 250
75078: PPUSH
75079: LD_VAR 0 2
75083: PPUSH
75084: LD_INT 1
75086: PPUSH
75087: CALL_OW 272
75091: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75092: LD_ADDR_VAR 0 5
75096: PUSH
75097: LD_VAR 0 1
75101: PPUSH
75102: CALL_OW 251
75106: PPUSH
75107: LD_VAR 0 2
75111: PPUSH
75112: LD_INT 1
75114: PPUSH
75115: CALL_OW 273
75119: ST_TO_ADDR
// if ValidHex ( x , y ) then
75120: LD_VAR 0 4
75124: PPUSH
75125: LD_VAR 0 5
75129: PPUSH
75130: CALL_OW 488
75134: IFFALSE 75155
// ComTurnXY ( unit , x , y ) ;
75136: LD_VAR 0 1
75140: PPUSH
75141: LD_VAR 0 4
75145: PPUSH
75146: LD_VAR 0 5
75150: PPUSH
75151: CALL_OW 118
// end ;
75155: LD_VAR 0 3
75159: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75160: LD_INT 0
75162: PPUSH
75163: PPUSH
// result := false ;
75164: LD_ADDR_VAR 0 3
75168: PUSH
75169: LD_INT 0
75171: ST_TO_ADDR
// if not units then
75172: LD_VAR 0 2
75176: NOT
75177: IFFALSE 75181
// exit ;
75179: GO 75226
// for i in units do
75181: LD_ADDR_VAR 0 4
75185: PUSH
75186: LD_VAR 0 2
75190: PUSH
75191: FOR_IN
75192: IFFALSE 75224
// if See ( side , i ) then
75194: LD_VAR 0 1
75198: PPUSH
75199: LD_VAR 0 4
75203: PPUSH
75204: CALL_OW 292
75208: IFFALSE 75222
// begin result := true ;
75210: LD_ADDR_VAR 0 3
75214: PUSH
75215: LD_INT 1
75217: ST_TO_ADDR
// exit ;
75218: POP
75219: POP
75220: GO 75226
// end ;
75222: GO 75191
75224: POP
75225: POP
// end ;
75226: LD_VAR 0 3
75230: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75231: LD_INT 0
75233: PPUSH
75234: PPUSH
75235: PPUSH
75236: PPUSH
// if not unit or not points then
75237: LD_VAR 0 1
75241: NOT
75242: IFTRUE 75251
75244: PUSH
75245: LD_VAR 0 2
75249: NOT
75250: OR
75251: IFFALSE 75255
// exit ;
75253: GO 75345
// dist := 99999 ;
75255: LD_ADDR_VAR 0 5
75259: PUSH
75260: LD_INT 99999
75262: ST_TO_ADDR
// for i in points do
75263: LD_ADDR_VAR 0 4
75267: PUSH
75268: LD_VAR 0 2
75272: PUSH
75273: FOR_IN
75274: IFFALSE 75343
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75276: LD_ADDR_VAR 0 6
75280: PUSH
75281: LD_VAR 0 1
75285: PPUSH
75286: LD_VAR 0 4
75290: PUSH
75291: LD_INT 1
75293: ARRAY
75294: PPUSH
75295: LD_VAR 0 4
75299: PUSH
75300: LD_INT 2
75302: ARRAY
75303: PPUSH
75304: CALL_OW 297
75308: ST_TO_ADDR
// if tmpDist < dist then
75309: LD_VAR 0 6
75313: PUSH
75314: LD_VAR 0 5
75318: LESS
75319: IFFALSE 75341
// begin result := i ;
75321: LD_ADDR_VAR 0 3
75325: PUSH
75326: LD_VAR 0 4
75330: ST_TO_ADDR
// dist := tmpDist ;
75331: LD_ADDR_VAR 0 5
75335: PUSH
75336: LD_VAR 0 6
75340: ST_TO_ADDR
// end ; end ;
75341: GO 75273
75343: POP
75344: POP
// end ;
75345: LD_VAR 0 3
75349: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75350: LD_INT 0
75352: PPUSH
// uc_side := side ;
75353: LD_ADDR_OWVAR 20
75357: PUSH
75358: LD_VAR 0 1
75362: ST_TO_ADDR
// uc_nation := 3 ;
75363: LD_ADDR_OWVAR 21
75367: PUSH
75368: LD_INT 3
75370: ST_TO_ADDR
// vc_chassis := 25 ;
75371: LD_ADDR_OWVAR 37
75375: PUSH
75376: LD_INT 25
75378: ST_TO_ADDR
// vc_engine := engine_siberite ;
75379: LD_ADDR_OWVAR 39
75383: PUSH
75384: LD_INT 3
75386: ST_TO_ADDR
// vc_control := control_computer ;
75387: LD_ADDR_OWVAR 38
75391: PUSH
75392: LD_INT 3
75394: ST_TO_ADDR
// vc_weapon := 59 ;
75395: LD_ADDR_OWVAR 40
75399: PUSH
75400: LD_INT 59
75402: ST_TO_ADDR
// result := CreateVehicle ;
75403: LD_ADDR_VAR 0 5
75407: PUSH
75408: CALL_OW 45
75412: ST_TO_ADDR
// SetDir ( result , d ) ;
75413: LD_VAR 0 5
75417: PPUSH
75418: LD_VAR 0 4
75422: PPUSH
75423: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75427: LD_VAR 0 5
75431: PPUSH
75432: LD_VAR 0 2
75436: PPUSH
75437: LD_VAR 0 3
75441: PPUSH
75442: LD_INT 0
75444: PPUSH
75445: CALL_OW 48
// end ;
75449: LD_VAR 0 5
75453: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75454: LD_INT 0
75456: PPUSH
75457: PPUSH
75458: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75459: LD_ADDR_VAR 0 2
75463: PUSH
75464: LD_INT 0
75466: PUSH
75467: LD_INT 0
75469: PUSH
75470: LD_INT 0
75472: PUSH
75473: LD_INT 0
75475: PUSH
75476: EMPTY
75477: LIST
75478: LIST
75479: LIST
75480: LIST
75481: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75482: LD_VAR 0 1
75486: NOT
75487: IFTRUE 75520
75489: PUSH
75490: LD_VAR 0 1
75494: PPUSH
75495: CALL_OW 264
75499: PUSH
75500: LD_INT 12
75502: PUSH
75503: LD_INT 51
75505: PUSH
75506: LD_INT 32
75508: PUSH
75509: LD_INT 89
75511: PUSH
75512: EMPTY
75513: LIST
75514: LIST
75515: LIST
75516: LIST
75517: IN
75518: NOT
75519: OR
75520: IFFALSE 75524
// exit ;
75522: GO 75622
// for i := 1 to 3 do
75524: LD_ADDR_VAR 0 3
75528: PUSH
75529: DOUBLE
75530: LD_INT 1
75532: DEC
75533: ST_TO_ADDR
75534: LD_INT 3
75536: PUSH
75537: FOR_TO
75538: IFFALSE 75620
// begin tmp := GetCargo ( cargo , i ) ;
75540: LD_ADDR_VAR 0 4
75544: PUSH
75545: LD_VAR 0 1
75549: PPUSH
75550: LD_VAR 0 3
75554: PPUSH
75555: CALL_OW 289
75559: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75560: LD_ADDR_VAR 0 2
75564: PUSH
75565: LD_VAR 0 2
75569: PPUSH
75570: LD_VAR 0 3
75574: PPUSH
75575: LD_VAR 0 4
75579: PPUSH
75580: CALL_OW 1
75584: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75585: LD_ADDR_VAR 0 2
75589: PUSH
75590: LD_VAR 0 2
75594: PPUSH
75595: LD_INT 4
75597: PPUSH
75598: LD_VAR 0 2
75602: PUSH
75603: LD_INT 4
75605: ARRAY
75606: PUSH
75607: LD_VAR 0 4
75611: PLUS
75612: PPUSH
75613: CALL_OW 1
75617: ST_TO_ADDR
// end ;
75618: GO 75537
75620: POP
75621: POP
// end ;
75622: LD_VAR 0 2
75626: RET
// export function Length ( array ) ; begin
75627: LD_INT 0
75629: PPUSH
// result := array + 0 ;
75630: LD_ADDR_VAR 0 2
75634: PUSH
75635: LD_VAR 0 1
75639: PUSH
75640: LD_INT 0
75642: PLUS
75643: ST_TO_ADDR
// end ;
75644: LD_VAR 0 2
75648: RET
// export function PrepareArray ( array ) ; begin
75649: LD_INT 0
75651: PPUSH
// result := array diff 0 ;
75652: LD_ADDR_VAR 0 2
75656: PUSH
75657: LD_VAR 0 1
75661: PUSH
75662: LD_INT 0
75664: DIFF
75665: ST_TO_ADDR
// if not result [ 1 ] then
75666: LD_VAR 0 2
75670: PUSH
75671: LD_INT 1
75673: ARRAY
75674: NOT
75675: IFFALSE 75695
// result := Delete ( result , 1 ) ;
75677: LD_ADDR_VAR 0 2
75681: PUSH
75682: LD_VAR 0 2
75686: PPUSH
75687: LD_INT 1
75689: PPUSH
75690: CALL_OW 3
75694: ST_TO_ADDR
// end ;
75695: LD_VAR 0 2
75699: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75700: LD_INT 0
75702: PPUSH
75703: PPUSH
75704: PPUSH
75705: PPUSH
// sibRocketRange := 25 ;
75706: LD_ADDR_VAR 0 6
75710: PUSH
75711: LD_INT 25
75713: ST_TO_ADDR
// result := false ;
75714: LD_ADDR_VAR 0 4
75718: PUSH
75719: LD_INT 0
75721: ST_TO_ADDR
// for i := 0 to 5 do
75722: LD_ADDR_VAR 0 5
75726: PUSH
75727: DOUBLE
75728: LD_INT 0
75730: DEC
75731: ST_TO_ADDR
75732: LD_INT 5
75734: PUSH
75735: FOR_TO
75736: IFFALSE 75803
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
75738: LD_VAR 0 1
75742: PPUSH
75743: LD_VAR 0 5
75747: PPUSH
75748: LD_VAR 0 6
75752: PPUSH
75753: CALL_OW 272
75757: PPUSH
75758: LD_VAR 0 2
75762: PPUSH
75763: LD_VAR 0 5
75767: PPUSH
75768: LD_VAR 0 6
75772: PPUSH
75773: CALL_OW 273
75777: PPUSH
75778: LD_VAR 0 3
75782: PPUSH
75783: CALL_OW 309
75787: IFFALSE 75801
// begin result := true ;
75789: LD_ADDR_VAR 0 4
75793: PUSH
75794: LD_INT 1
75796: ST_TO_ADDR
// exit ;
75797: POP
75798: POP
75799: GO 75805
// end ;
75801: GO 75735
75803: POP
75804: POP
// end ;
75805: LD_VAR 0 4
75809: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
75810: LD_INT 0
75812: PPUSH
75813: PPUSH
75814: PPUSH
// if btype = b_depot then
75815: LD_VAR 0 2
75819: PUSH
75820: LD_INT 0
75822: EQUAL
75823: IFFALSE 75835
// begin result := true ;
75825: LD_ADDR_VAR 0 3
75829: PUSH
75830: LD_INT 1
75832: ST_TO_ADDR
// exit ;
75833: GO 75955
// end ; pom := GetBase ( depot ) ;
75835: LD_ADDR_VAR 0 4
75839: PUSH
75840: LD_VAR 0 1
75844: PPUSH
75845: CALL_OW 274
75849: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
75850: LD_ADDR_VAR 0 5
75854: PUSH
75855: LD_VAR 0 2
75859: PPUSH
75860: LD_VAR 0 1
75864: PPUSH
75865: CALL_OW 248
75869: PPUSH
75870: CALL_OW 450
75874: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
75875: LD_ADDR_VAR 0 3
75879: PUSH
75880: LD_VAR 0 4
75884: PPUSH
75885: LD_INT 1
75887: PPUSH
75888: CALL_OW 275
75892: PUSH
75893: LD_VAR 0 5
75897: PUSH
75898: LD_INT 1
75900: ARRAY
75901: GREATEREQUAL
75902: IFFALSE 75928
75904: PUSH
75905: LD_VAR 0 4
75909: PPUSH
75910: LD_INT 2
75912: PPUSH
75913: CALL_OW 275
75917: PUSH
75918: LD_VAR 0 5
75922: PUSH
75923: LD_INT 2
75925: ARRAY
75926: GREATEREQUAL
75927: AND
75928: IFFALSE 75954
75930: PUSH
75931: LD_VAR 0 4
75935: PPUSH
75936: LD_INT 3
75938: PPUSH
75939: CALL_OW 275
75943: PUSH
75944: LD_VAR 0 5
75948: PUSH
75949: LD_INT 3
75951: ARRAY
75952: GREATEREQUAL
75953: AND
75954: ST_TO_ADDR
// end ;
75955: LD_VAR 0 3
75959: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
75960: LD_INT 0
75962: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
75963: LD_VAR 0 1
75967: PPUSH
75968: LD_VAR 0 2
75972: PPUSH
75973: LD_INT 0
75975: PPUSH
75976: LD_INT 0
75978: PPUSH
75979: LD_INT 1
75981: PPUSH
75982: LD_INT 0
75984: PPUSH
75985: CALL_OW 587
// end ;
75989: LD_VAR 0 3
75993: RET
// export function CenterOnNow ( unit ) ; begin
75994: LD_INT 0
75996: PPUSH
// result := IsInUnit ( unit ) ;
75997: LD_ADDR_VAR 0 2
76001: PUSH
76002: LD_VAR 0 1
76006: PPUSH
76007: CALL_OW 310
76011: ST_TO_ADDR
// if not result then
76012: LD_VAR 0 2
76016: NOT
76017: IFFALSE 76029
// result := unit ;
76019: LD_ADDR_VAR 0 2
76023: PUSH
76024: LD_VAR 0 1
76028: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
76029: LD_VAR 0 1
76033: PPUSH
76034: CALL_OW 87
// end ;
76038: LD_VAR 0 2
76042: RET
// export function ComMoveHex ( unit , hex ) ; begin
76043: LD_INT 0
76045: PPUSH
// if not hex then
76046: LD_VAR 0 2
76050: NOT
76051: IFFALSE 76055
// exit ;
76053: GO 76108
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
76055: LD_VAR 0 2
76059: PUSH
76060: LD_INT 1
76062: ARRAY
76063: PPUSH
76064: LD_VAR 0 2
76068: PUSH
76069: LD_INT 2
76071: ARRAY
76072: PPUSH
76073: CALL_OW 428
76077: IFFALSE 76081
// exit ;
76079: GO 76108
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
76081: LD_VAR 0 1
76085: PPUSH
76086: LD_VAR 0 2
76090: PUSH
76091: LD_INT 1
76093: ARRAY
76094: PPUSH
76095: LD_VAR 0 2
76099: PUSH
76100: LD_INT 2
76102: ARRAY
76103: PPUSH
76104: CALL_OW 111
// end ;
76108: LD_VAR 0 3
76112: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
76113: LD_INT 0
76115: PPUSH
76116: PPUSH
76117: PPUSH
// if not unit or not enemy then
76118: LD_VAR 0 1
76122: NOT
76123: IFTRUE 76132
76125: PUSH
76126: LD_VAR 0 2
76130: NOT
76131: OR
76132: IFFALSE 76136
// exit ;
76134: GO 76262
// x := GetX ( enemy ) ;
76136: LD_ADDR_VAR 0 4
76140: PUSH
76141: LD_VAR 0 2
76145: PPUSH
76146: CALL_OW 250
76150: ST_TO_ADDR
// y := GetY ( enemy ) ;
76151: LD_ADDR_VAR 0 5
76155: PUSH
76156: LD_VAR 0 2
76160: PPUSH
76161: CALL_OW 251
76165: ST_TO_ADDR
// if ValidHex ( x , y ) then
76166: LD_VAR 0 4
76170: PPUSH
76171: LD_VAR 0 5
76175: PPUSH
76176: CALL_OW 488
76180: IFFALSE 76262
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
76182: LD_VAR 0 2
76186: PPUSH
76187: CALL_OW 247
76191: PUSH
76192: LD_INT 3
76194: PUSH
76195: LD_INT 2
76197: PUSH
76198: EMPTY
76199: LIST
76200: LIST
76201: IN
76202: IFTRUE 76225
76204: PUSH
76205: LD_VAR 0 1
76209: PPUSH
76210: CALL_OW 255
76214: PPUSH
76215: LD_VAR 0 2
76219: PPUSH
76220: CALL_OW 292
76224: OR
76225: IFFALSE 76243
// ComAttackUnit ( unit , enemy ) else
76227: LD_VAR 0 1
76231: PPUSH
76232: LD_VAR 0 2
76236: PPUSH
76237: CALL_OW 115
76241: GO 76262
// ComAgressiveMove ( unit , x , y ) ;
76243: LD_VAR 0 1
76247: PPUSH
76248: LD_VAR 0 4
76252: PPUSH
76253: LD_VAR 0 5
76257: PPUSH
76258: CALL_OW 114
// end ;
76262: LD_VAR 0 3
76266: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
76267: LD_INT 0
76269: PPUSH
76270: PPUSH
76271: PPUSH
// list := AreaToList ( area , 0 ) ;
76272: LD_ADDR_VAR 0 5
76276: PUSH
76277: LD_VAR 0 1
76281: PPUSH
76282: LD_INT 0
76284: PPUSH
76285: CALL_OW 517
76289: ST_TO_ADDR
// if not list then
76290: LD_VAR 0 5
76294: NOT
76295: IFFALSE 76299
// exit ;
76297: GO 76429
// if all then
76299: LD_VAR 0 2
76303: IFFALSE 76391
// begin for i := 1 to list [ 1 ] do
76305: LD_ADDR_VAR 0 4
76309: PUSH
76310: DOUBLE
76311: LD_INT 1
76313: DEC
76314: ST_TO_ADDR
76315: LD_VAR 0 5
76319: PUSH
76320: LD_INT 1
76322: ARRAY
76323: PUSH
76324: FOR_TO
76325: IFFALSE 76387
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
76327: LD_ADDR_VAR 0 3
76331: PUSH
76332: LD_VAR 0 3
76336: PPUSH
76337: LD_VAR 0 3
76341: PUSH
76342: LD_INT 1
76344: PLUS
76345: PPUSH
76346: LD_VAR 0 5
76350: PUSH
76351: LD_INT 1
76353: ARRAY
76354: PUSH
76355: LD_VAR 0 4
76359: ARRAY
76360: PUSH
76361: LD_VAR 0 5
76365: PUSH
76366: LD_INT 2
76368: ARRAY
76369: PUSH
76370: LD_VAR 0 4
76374: ARRAY
76375: PUSH
76376: EMPTY
76377: LIST
76378: LIST
76379: PPUSH
76380: CALL_OW 1
76384: ST_TO_ADDR
76385: GO 76324
76387: POP
76388: POP
// exit ;
76389: GO 76429
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
76391: LD_ADDR_VAR 0 3
76395: PUSH
76396: LD_VAR 0 5
76400: PUSH
76401: LD_INT 1
76403: ARRAY
76404: PUSH
76405: LD_INT 1
76407: ARRAY
76408: PUSH
76409: LD_VAR 0 5
76413: PUSH
76414: LD_INT 2
76416: ARRAY
76417: PUSH
76418: LD_INT 1
76420: ARRAY
76421: PUSH
76422: EMPTY
76423: LIST
76424: LIST
76425: PUSH
76426: EMPTY
76427: LIST
76428: ST_TO_ADDR
// end ;
76429: LD_VAR 0 3
76433: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
76434: LD_INT 0
76436: PPUSH
76437: PPUSH
// list := AreaToList ( area , 0 ) ;
76438: LD_ADDR_VAR 0 4
76442: PUSH
76443: LD_VAR 0 1
76447: PPUSH
76448: LD_INT 0
76450: PPUSH
76451: CALL_OW 517
76455: ST_TO_ADDR
// if not list then
76456: LD_VAR 0 4
76460: NOT
76461: IFFALSE 76465
// exit ;
76463: GO 76506
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
76465: LD_ADDR_VAR 0 3
76469: PUSH
76470: LD_VAR 0 4
76474: PUSH
76475: LD_INT 1
76477: ARRAY
76478: PUSH
76479: LD_INT 1
76481: ARRAY
76482: PUSH
76483: LD_VAR 0 4
76487: PUSH
76488: LD_INT 2
76490: ARRAY
76491: PUSH
76492: LD_INT 1
76494: ARRAY
76495: PUSH
76496: LD_VAR 0 2
76500: PUSH
76501: EMPTY
76502: LIST
76503: LIST
76504: LIST
76505: ST_TO_ADDR
// end ;
76506: LD_VAR 0 3
76510: RET
// export function First ( array ) ; begin
76511: LD_INT 0
76513: PPUSH
// if not array then
76514: LD_VAR 0 1
76518: NOT
76519: IFFALSE 76523
// exit ;
76521: GO 76537
// result := array [ 1 ] ;
76523: LD_ADDR_VAR 0 2
76527: PUSH
76528: LD_VAR 0 1
76532: PUSH
76533: LD_INT 1
76535: ARRAY
76536: ST_TO_ADDR
// end ;
76537: LD_VAR 0 2
76541: RET
// export function Last ( array ) ; begin
76542: LD_INT 0
76544: PPUSH
// if not array then
76545: LD_VAR 0 1
76549: NOT
76550: IFFALSE 76554
// exit ;
76552: GO 76570
// result := array [ array ] ;
76554: LD_ADDR_VAR 0 2
76558: PUSH
76559: LD_VAR 0 1
76563: PUSH
76564: LD_VAR 0 1
76568: ARRAY
76569: ST_TO_ADDR
// end ;
76570: LD_VAR 0 2
76574: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
76575: LD_INT 0
76577: PPUSH
76578: PPUSH
// result := [ ] ;
76579: LD_ADDR_VAR 0 5
76583: PUSH
76584: EMPTY
76585: ST_TO_ADDR
// if not array then
76586: LD_VAR 0 1
76590: NOT
76591: IFFALSE 76595
// exit ;
76593: GO 76707
// for i := 1 to array do
76595: LD_ADDR_VAR 0 6
76599: PUSH
76600: DOUBLE
76601: LD_INT 1
76603: DEC
76604: ST_TO_ADDR
76605: LD_VAR 0 1
76609: PUSH
76610: FOR_TO
76611: IFFALSE 76705
// if array [ i ] [ index ] = value then
76613: LD_VAR 0 1
76617: PUSH
76618: LD_VAR 0 6
76622: ARRAY
76623: PUSH
76624: LD_VAR 0 2
76628: ARRAY
76629: PUSH
76630: LD_VAR 0 3
76634: EQUAL
76635: IFFALSE 76703
// begin if indexColumn then
76637: LD_VAR 0 4
76641: IFFALSE 76677
// result := Join ( result , array [ i ] [ indexColumn ] ) else
76643: LD_ADDR_VAR 0 5
76647: PUSH
76648: LD_VAR 0 5
76652: PPUSH
76653: LD_VAR 0 1
76657: PUSH
76658: LD_VAR 0 6
76662: ARRAY
76663: PUSH
76664: LD_VAR 0 4
76668: ARRAY
76669: PPUSH
76670: CALL 71715 0 2
76674: ST_TO_ADDR
76675: GO 76703
// result := Join ( result , array [ i ] ) ;
76677: LD_ADDR_VAR 0 5
76681: PUSH
76682: LD_VAR 0 5
76686: PPUSH
76687: LD_VAR 0 1
76691: PUSH
76692: LD_VAR 0 6
76696: ARRAY
76697: PPUSH
76698: CALL 71715 0 2
76702: ST_TO_ADDR
// end ;
76703: GO 76610
76705: POP
76706: POP
// end ;
76707: LD_VAR 0 5
76711: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
76712: LD_INT 0
76714: PPUSH
// if not vehicles or not parkingPoint then
76715: LD_VAR 0 1
76719: NOT
76720: IFTRUE 76729
76722: PUSH
76723: LD_VAR 0 2
76727: NOT
76728: OR
76729: IFFALSE 76733
// exit ;
76731: GO 76831
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
76733: LD_ADDR_VAR 0 1
76737: PUSH
76738: LD_VAR 0 1
76742: PPUSH
76743: LD_INT 50
76745: PUSH
76746: EMPTY
76747: LIST
76748: PUSH
76749: LD_INT 3
76751: PUSH
76752: LD_INT 92
76754: PUSH
76755: LD_VAR 0 2
76759: PUSH
76760: LD_INT 1
76762: ARRAY
76763: PUSH
76764: LD_VAR 0 2
76768: PUSH
76769: LD_INT 2
76771: ARRAY
76772: PUSH
76773: LD_INT 8
76775: PUSH
76776: EMPTY
76777: LIST
76778: LIST
76779: LIST
76780: LIST
76781: PUSH
76782: EMPTY
76783: LIST
76784: LIST
76785: PUSH
76786: EMPTY
76787: LIST
76788: LIST
76789: PPUSH
76790: CALL_OW 72
76794: ST_TO_ADDR
// if not vehicles then
76795: LD_VAR 0 1
76799: NOT
76800: IFFALSE 76804
// exit ;
76802: GO 76831
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
76804: LD_VAR 0 1
76808: PPUSH
76809: LD_VAR 0 2
76813: PUSH
76814: LD_INT 1
76816: ARRAY
76817: PPUSH
76818: LD_VAR 0 2
76822: PUSH
76823: LD_INT 2
76825: ARRAY
76826: PPUSH
76827: CALL_OW 111
// end ;
76831: LD_VAR 0 3
76835: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
76836: LD_INT 0
76838: PPUSH
76839: PPUSH
76840: PPUSH
// if not side or not area then
76841: LD_VAR 0 1
76845: NOT
76846: IFTRUE 76855
76848: PUSH
76849: LD_VAR 0 2
76853: NOT
76854: OR
76855: IFFALSE 76859
// exit ;
76857: GO 76978
// tmp := AreaToList ( area , 0 ) ;
76859: LD_ADDR_VAR 0 5
76863: PUSH
76864: LD_VAR 0 2
76868: PPUSH
76869: LD_INT 0
76871: PPUSH
76872: CALL_OW 517
76876: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
76877: LD_ADDR_VAR 0 4
76881: PUSH
76882: DOUBLE
76883: LD_INT 1
76885: DEC
76886: ST_TO_ADDR
76887: LD_VAR 0 5
76891: PUSH
76892: LD_INT 1
76894: ARRAY
76895: PUSH
76896: FOR_TO
76897: IFFALSE 76976
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
76899: LD_VAR 0 5
76903: PUSH
76904: LD_INT 1
76906: ARRAY
76907: PUSH
76908: LD_VAR 0 4
76912: ARRAY
76913: PPUSH
76914: LD_VAR 0 5
76918: PUSH
76919: LD_INT 2
76921: ARRAY
76922: PUSH
76923: LD_VAR 0 4
76927: ARRAY
76928: PPUSH
76929: CALL_OW 351
76933: IFFALSE 76974
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
76935: LD_VAR 0 5
76939: PUSH
76940: LD_INT 1
76942: ARRAY
76943: PUSH
76944: LD_VAR 0 4
76948: ARRAY
76949: PPUSH
76950: LD_VAR 0 5
76954: PUSH
76955: LD_INT 2
76957: ARRAY
76958: PUSH
76959: LD_VAR 0 4
76963: ARRAY
76964: PPUSH
76965: LD_VAR 0 1
76969: PPUSH
76970: CALL_OW 244
// end ;
76974: GO 76896
76976: POP
76977: POP
// end ;
76978: LD_VAR 0 3
76982: RET
// export function UniqueArray ( array ) ; var i ; begin
76983: LD_INT 0
76985: PPUSH
76986: PPUSH
// result := [ ] ;
76987: LD_ADDR_VAR 0 2
76991: PUSH
76992: EMPTY
76993: ST_TO_ADDR
// if not array then
76994: LD_VAR 0 1
76998: NOT
76999: IFFALSE 77003
// exit ;
77001: GO 77064
// for i := 1 to array do
77003: LD_ADDR_VAR 0 3
77007: PUSH
77008: DOUBLE
77009: LD_INT 1
77011: DEC
77012: ST_TO_ADDR
77013: LD_VAR 0 1
77017: PUSH
77018: FOR_TO
77019: IFFALSE 77062
// if not array [ i ] in result then
77021: LD_VAR 0 1
77025: PUSH
77026: LD_VAR 0 3
77030: ARRAY
77031: PUSH
77032: LD_VAR 0 2
77036: IN
77037: NOT
77038: IFFALSE 77060
// result := Join ( result , i ) ;
77040: LD_ADDR_VAR 0 2
77044: PUSH
77045: LD_VAR 0 2
77049: PPUSH
77050: LD_VAR 0 3
77054: PPUSH
77055: CALL 71715 0 2
77059: ST_TO_ADDR
77060: GO 77018
77062: POP
77063: POP
// end ; end_of_file
77064: LD_VAR 0 2
77068: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77069: LD_VAR 0 1
77073: PUSH
77074: LD_INT 200
77076: DOUBLE
77077: GREATEREQUAL
77078: IFFALSE 77086
77080: LD_INT 299
77082: DOUBLE
77083: LESSEQUAL
77084: IFTRUE 77088
77086: GO 77120
77088: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77089: LD_VAR 0 1
77093: PPUSH
77094: LD_VAR 0 2
77098: PPUSH
77099: LD_VAR 0 3
77103: PPUSH
77104: LD_VAR 0 4
77108: PPUSH
77109: LD_VAR 0 5
77113: PPUSH
77114: CALL 28025 0 5
77118: GO 77197
77120: LD_INT 300
77122: DOUBLE
77123: GREATEREQUAL
77124: IFFALSE 77132
77126: LD_INT 399
77128: DOUBLE
77129: LESSEQUAL
77130: IFTRUE 77134
77132: GO 77196
77134: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77135: LD_VAR 0 1
77139: PPUSH
77140: LD_VAR 0 2
77144: PPUSH
77145: LD_VAR 0 3
77149: PPUSH
77150: LD_VAR 0 4
77154: PPUSH
77155: LD_VAR 0 5
77159: PPUSH
77160: LD_VAR 0 6
77164: PPUSH
77165: LD_VAR 0 7
77169: PPUSH
77170: LD_VAR 0 8
77174: PPUSH
77175: LD_VAR 0 9
77179: PPUSH
77180: LD_VAR 0 10
77184: PPUSH
77185: LD_VAR 0 11
77189: PPUSH
77190: CALL 23909 0 11
77194: GO 77197
77196: POP
// end ;
77197: PPOPN 11
77199: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77200: LD_VAR 0 1
77204: PPUSH
77205: LD_VAR 0 2
77209: PPUSH
77210: LD_VAR 0 3
77214: PPUSH
77215: LD_VAR 0 4
77219: PPUSH
77220: LD_VAR 0 5
77224: PPUSH
77225: CALL 27406 0 5
// end ; end_of_file
77229: PPOPN 5
77231: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77232: LD_VAR 0 1
77236: PPUSH
77237: LD_VAR 0 2
77241: PPUSH
77242: LD_VAR 0 3
77246: PPUSH
77247: LD_VAR 0 4
77251: PPUSH
77252: LD_VAR 0 5
77256: PPUSH
77257: LD_VAR 0 6
77261: PPUSH
77262: CALL 11449 0 6
// end ;
77266: PPOPN 6
77268: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77269: LD_INT 0
77271: PPUSH
// begin if not units then
77272: LD_VAR 0 1
77276: NOT
77277: IFFALSE 77281
// exit ;
77279: GO 77315
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
77281: LD_VAR 0 1
77285: PPUSH
77286: LD_VAR 0 2
77290: PPUSH
77291: LD_VAR 0 3
77295: PPUSH
77296: LD_VAR 0 4
77300: PPUSH
77301: LD_VAR 0 5
77305: PPUSH
77306: LD_VAR 0 6
77310: PPUSH
77311: CALL 33532 0 6
// end ;
77315: PPOPN 7
77317: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77318: CALL 11336 0 0
// end ;
77322: PPOPN 1
77324: END
