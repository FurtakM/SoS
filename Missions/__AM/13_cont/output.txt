// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; export eventArabianAttack , eventRussianAttack , eventContaminate ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak := 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus := 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot := 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched := 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter := 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits := [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter := 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources := [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles := [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 := 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 := 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 := 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 := 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 := 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// eventArabianAttack := 1 ;
 154: LD_ADDR_EXP 43
 158: PUSH
 159: LD_INT 1
 161: ST_TO_ADDR
// eventRussianAttack := 2 ;
 162: LD_ADDR_EXP 44
 166: PUSH
 167: LD_INT 2
 169: ST_TO_ADDR
// eventContaminate := 3 ;
 170: LD_ADDR_EXP 45
 174: PUSH
 175: LD_INT 3
 177: ST_TO_ADDR
// mission_prefix := 13f_ ;
 178: LD_ADDR_EXP 34
 182: PUSH
 183: LD_STRING 13f_
 185: ST_TO_ADDR
// debugMode := 0 ;
 186: LD_ADDR_EXP 40
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// achivCounter := 0 ;
 194: LD_ADDR_EXP 41
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// if Difficulty = 1 then
 202: LD_OWVAR 67
 206: PUSH
 207: LD_INT 1
 209: EQUAL
 210: IFFALSE 219
// RemoveEnvironmentArea ( oilBlockArea ) ;
 212: LD_INT 15
 214: PPUSH
 215: CALL_OW 355
// PrepareVehicles ;
 219: CALL 1203 0 0
// PrepareHeroes ;
 223: CALL 460 0 0
// PrepareAmericansRandom ;
 227: CALL 1107 0 0
// PrepareDifficulty ;
 231: CALL 8411 0 0
// Action ;
 235: CALL 5275 0 0
// end ;
 239: END
// every 0 0$1 trigger debugMode do var i , j ;
 240: LD_EXP 40
 244: IFFALSE 415
 246: GO 248
 248: DISABLE
 249: LD_INT 0
 251: PPUSH
 252: PPUSH
// begin enable ;
 253: ENABLE
// FogOff ( true ) ;
 254: LD_INT 1
 256: PPUSH
 257: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 261: LD_ADDR_VAR 0 1
 265: PUSH
 266: LD_INT 22
 268: PUSH
 269: LD_INT 1
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PPUSH
 290: CALL_OW 69
 294: PUSH
 295: FOR_IN
 296: IFFALSE 312
// SetLives ( i , 1000 ) ;
 298: LD_VAR 0 1
 302: PPUSH
 303: LD_INT 1000
 305: PPUSH
 306: CALL_OW 234
 310: GO 295
 312: POP
 313: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 314: LD_ADDR_VAR 0 1
 318: PUSH
 319: LD_INT 22
 321: PUSH
 322: LD_INT 1
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: LD_INT 2
 331: PUSH
 332: LD_INT 30
 334: PUSH
 335: LD_INT 0
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 30
 344: PUSH
 345: LD_INT 1
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: LIST
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PPUSH
 361: CALL_OW 69
 365: PUSH
 366: FOR_IN
 367: IFFALSE 413
// for j := 1 to 3 do
 369: LD_ADDR_VAR 0 2
 373: PUSH
 374: DOUBLE
 375: LD_INT 1
 377: DEC
 378: ST_TO_ADDR
 379: LD_INT 3
 381: PUSH
 382: FOR_TO
 383: IFFALSE 409
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 385: LD_VAR 0 1
 389: PPUSH
 390: CALL_OW 274
 394: PPUSH
 395: LD_VAR 0 2
 399: PPUSH
 400: LD_INT 9999
 402: PPUSH
 403: CALL_OW 277
 407: GO 382
 409: POP
 410: POP
 411: GO 366
 413: POP
 414: POP
// end ;
 415: PPOPN 2
 417: END
// every 0 0$1 trigger achivCounter >= 2 do
 418: LD_EXP 41
 422: PUSH
 423: LD_INT 2
 425: GREATEREQUAL
 426: IFFALSE 438
 428: GO 430
 430: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 431: LD_STRING ACH_REMOTE
 433: PPUSH
 434: CALL_OW 543
 438: END
// every 0 0$1 trigger destroyCounter >= 30 do
 439: LD_EXP 42
 443: PUSH
 444: LD_INT 30
 446: GREATEREQUAL
 447: IFFALSE 459
 449: GO 451
 451: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 452: LD_STRING ACH_DEFMASTER
 454: PPUSH
 455: CALL_OW 543
 459: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 460: LD_INT 0
 462: PPUSH
 463: PPUSH
 464: PPUSH
 465: PPUSH
// uc_side = 1 ;
 466: LD_ADDR_OWVAR 20
 470: PUSH
 471: LD_INT 1
 473: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 474: LD_ADDR_EXP 1
 478: PUSH
 479: LD_STRING JMM
 481: PPUSH
 482: LD_EXP 40
 486: NOT
 487: PPUSH
 488: LD_STRING 13c_
 490: PPUSH
 491: CALL 31050 0 3
 495: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 496: LD_ADDR_EXP 2
 500: PUSH
 501: LD_STRING Stevens
 503: PPUSH
 504: LD_EXP 40
 508: NOT
 509: PPUSH
 510: LD_STRING 13c_
 512: PPUSH
 513: CALL 31050 0 3
 517: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 518: LD_ADDR_EXP 3
 522: PUSH
 523: LD_STRING Lisa
 525: PPUSH
 526: LD_EXP 40
 530: NOT
 531: PPUSH
 532: LD_STRING 13c_
 534: PPUSH
 535: CALL 31050 0 3
 539: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 540: LD_ADDR_EXP 4
 544: PUSH
 545: LD_STRING Donaldson
 547: PPUSH
 548: LD_EXP 40
 552: NOT
 553: PPUSH
 554: LD_STRING 13c_
 556: PPUSH
 557: CALL 31050 0 3
 561: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 562: LD_ADDR_EXP 5
 566: PUSH
 567: LD_STRING Bobby
 569: PPUSH
 570: LD_EXP 40
 574: NOT
 575: PPUSH
 576: LD_STRING 13c_
 578: PPUSH
 579: CALL 31050 0 3
 583: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 584: LD_ADDR_EXP 6
 588: PUSH
 589: LD_STRING Cyrus
 591: PPUSH
 592: LD_EXP 40
 596: NOT
 597: PPUSH
 598: LD_STRING 13c_
 600: PPUSH
 601: CALL 31050 0 3
 605: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 606: LD_ADDR_EXP 7
 610: PUSH
 611: LD_STRING Denis
 613: PPUSH
 614: LD_EXP 40
 618: NOT
 619: PPUSH
 620: LD_STRING 13c_
 622: PPUSH
 623: CALL 31050 0 3
 627: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 628: LD_ADDR_EXP 8
 632: PUSH
 633: LD_STRING Brown
 635: PPUSH
 636: LD_EXP 40
 640: NOT
 641: PPUSH
 642: LD_STRING 13c_
 644: PPUSH
 645: CALL 31050 0 3
 649: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true , 13c_ ) ;
 650: LD_ADDR_EXP 9
 654: PUSH
 655: LD_STRING Gladstone
 657: PPUSH
 658: LD_INT 1
 660: PPUSH
 661: LD_STRING 13c_
 663: PPUSH
 664: CALL 31050 0 3
 668: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true , 13c_ ) ;
 669: LD_ADDR_EXP 10
 673: PUSH
 674: LD_STRING Houten
 676: PPUSH
 677: LD_INT 1
 679: PPUSH
 680: LD_STRING 13c_
 682: PPUSH
 683: CALL 31050 0 3
 687: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , true , 13c_ ) ;
 688: LD_ADDR_EXP 11
 692: PUSH
 693: LD_STRING Cornel
 695: PPUSH
 696: LD_INT 1
 698: PPUSH
 699: LD_STRING 13c_
 701: PPUSH
 702: CALL 31050 0 3
 706: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true , 13c_ ) ;
 707: LD_ADDR_EXP 12
 711: PUSH
 712: LD_STRING Gary
 714: PPUSH
 715: LD_INT 1
 717: PPUSH
 718: LD_STRING 13c_
 720: PPUSH
 721: CALL 31050 0 3
 725: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 13c_ ) ;
 726: LD_ADDR_EXP 13
 730: PUSH
 731: LD_STRING Frank
 733: PPUSH
 734: LD_INT 1
 736: PPUSH
 737: LD_STRING 13c_
 739: PPUSH
 740: CALL 31050 0 3
 744: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true , 13c_ ) ;
 745: LD_ADDR_EXP 14
 749: PUSH
 750: LD_STRING Kikuchi
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: LD_STRING 13c_
 758: PPUSH
 759: CALL 31050 0 3
 763: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 764: LD_ADDR_EXP 15
 768: PUSH
 769: LD_STRING Powell
 771: PPUSH
 772: LD_INT 0
 774: PPUSH
 775: LD_STRING 
 777: PPUSH
 778: CALL 31050 0 3
 782: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 783: LD_ADDR_VAR 0 2
 787: PUSH
 788: LD_EXP 1
 792: PUSH
 793: LD_EXP 2
 797: PUSH
 798: LD_EXP 3
 802: PUSH
 803: LD_EXP 4
 807: PUSH
 808: LD_EXP 5
 812: PUSH
 813: LD_EXP 6
 817: PUSH
 818: LD_EXP 7
 822: PUSH
 823: LD_EXP 8
 827: PUSH
 828: LD_EXP 9
 832: PUSH
 833: LD_EXP 10
 837: PUSH
 838: LD_EXP 11
 842: PUSH
 843: LD_EXP 12
 847: PUSH
 848: LD_EXP 13
 852: PUSH
 853: LD_EXP 14
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 874: LD_ADDR_VAR 0 3
 878: PUSH
 879: LD_INT 22
 881: PUSH
 882: LD_INT 1
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: PUSH
 889: LD_INT 33
 891: PUSH
 892: LD_INT 1
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: LD_INT 21
 901: PUSH
 902: LD_INT 2
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: LIST
 913: PPUSH
 914: CALL_OW 69
 918: ST_TO_ADDR
// for i = tmp downto 1 do
 919: LD_ADDR_VAR 0 4
 923: PUSH
 924: DOUBLE
 925: LD_VAR 0 2
 929: INC
 930: ST_TO_ADDR
 931: LD_INT 1
 933: PUSH
 934: FOR_DOWNTO
 935: IFFALSE 972
// if not tmp [ i ] then
 937: LD_VAR 0 2
 941: PUSH
 942: LD_VAR 0 4
 946: ARRAY
 947: NOT
 948: IFFALSE 970
// tmp := Delete ( tmp , i ) ;
 950: LD_ADDR_VAR 0 2
 954: PUSH
 955: LD_VAR 0 2
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 3
 969: ST_TO_ADDR
 970: GO 934
 972: POP
 973: POP
// for i = 1 to tmp do
 974: LD_ADDR_VAR 0 4
 978: PUSH
 979: DOUBLE
 980: LD_INT 1
 982: DEC
 983: ST_TO_ADDR
 984: LD_VAR 0 2
 988: PUSH
 989: FOR_TO
 990: IFFALSE 1020
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
 992: LD_VAR 0 2
 996: PUSH
 997: LD_VAR 0 4
1001: ARRAY
1002: PPUSH
1003: LD_VAR 0 3
1007: PUSH
1008: LD_VAR 0 4
1012: ARRAY
1013: PPUSH
1014: CALL_OW 52
1018: GO 989
1020: POP
1021: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1022: LD_INT 22
1024: PUSH
1025: LD_INT 1
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 25
1034: PUSH
1035: LD_INT 2
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PPUSH
1046: CALL_OW 69
1050: PUSH
1051: LD_INT 0
1053: EQUAL
1054: PUSH
1055: LD_INT 22
1057: PUSH
1058: LD_INT 1
1060: PUSH
1061: EMPTY
1062: LIST
1063: LIST
1064: PUSH
1065: LD_INT 34
1067: PUSH
1068: LD_INT 13
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: PPUSH
1079: CALL_OW 69
1083: PUSH
1084: LD_INT 0
1086: EQUAL
1087: AND
1088: IFFALSE 1102
// SetClass ( JMM , 2 ) ;
1090: LD_EXP 1
1094: PPUSH
1095: LD_INT 2
1097: PPUSH
1098: CALL_OW 336
// end ;
1102: LD_VAR 0 1
1106: RET
// export function PrepareAmericansRandom ; var i ; begin
1107: LD_INT 0
1109: PPUSH
1110: PPUSH
// uc_side = 1 ;
1111: LD_ADDR_OWVAR 20
1115: PUSH
1116: LD_INT 1
1118: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1119: LD_ADDR_EXP 16
1123: PUSH
1124: LD_STRING 13c_others
1126: PPUSH
1127: CALL_OW 31
1131: ST_TO_ADDR
// for i in others13 do
1132: LD_ADDR_VAR 0 2
1136: PUSH
1137: LD_EXP 16
1141: PUSH
1142: FOR_IN
1143: IFFALSE 1196
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1145: LD_VAR 0 2
1149: PPUSH
1150: LD_INT 22
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PUSH
1160: LD_INT 21
1162: PUSH
1163: LD_INT 2
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: LD_INT 58
1172: PUSH
1173: EMPTY
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: PPUSH
1181: CALL_OW 69
1185: PUSH
1186: LD_INT 1
1188: ARRAY
1189: PPUSH
1190: CALL_OW 52
1194: GO 1142
1196: POP
1197: POP
// end ;
1198: LD_VAR 0 1
1202: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1203: LD_INT 0
1205: PPUSH
1206: PPUSH
1207: PPUSH
1208: PPUSH
1209: PPUSH
1210: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1211: LD_ADDR_VAR 0 5
1215: PUSH
1216: LD_STRING 13_VehiclesIn13_1
1218: PPUSH
1219: LD_INT 1
1221: PUSH
1222: LD_INT 5
1224: PUSH
1225: LD_INT 3
1227: PUSH
1228: LD_INT 1
1230: PUSH
1231: LD_INT 6
1233: PUSH
1234: LD_INT 100
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: PUSH
1245: LD_INT 1
1247: PUSH
1248: LD_INT 5
1250: PUSH
1251: LD_INT 3
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: LD_INT 6
1259: PUSH
1260: LD_INT 100
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 5
1276: PUSH
1277: LD_INT 3
1279: PUSH
1280: LD_INT 1
1282: PUSH
1283: LD_INT 6
1285: PUSH
1286: LD_INT 100
1288: PUSH
1289: EMPTY
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: PUSH
1297: LD_INT 1
1299: PUSH
1300: LD_INT 5
1302: PUSH
1303: LD_INT 3
1305: PUSH
1306: LD_INT 1
1308: PUSH
1309: LD_INT 6
1311: PUSH
1312: LD_INT 100
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: PUSH
1323: LD_INT 1
1325: PUSH
1326: LD_INT 5
1328: PUSH
1329: LD_INT 3
1331: PUSH
1332: LD_INT 1
1334: PUSH
1335: LD_INT 6
1337: PUSH
1338: LD_INT 100
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: LD_INT 5
1354: PUSH
1355: LD_INT 3
1357: PUSH
1358: LD_INT 1
1360: PUSH
1361: LD_INT 6
1363: PUSH
1364: LD_INT 100
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: PUSH
1375: LD_INT 1
1377: PUSH
1378: LD_INT 5
1380: PUSH
1381: LD_INT 3
1383: PUSH
1384: LD_INT 1
1386: PUSH
1387: LD_INT 6
1389: PUSH
1390: LD_INT 100
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: PUSH
1401: LD_INT 1
1403: PUSH
1404: LD_INT 5
1406: PUSH
1407: LD_INT 3
1409: PUSH
1410: LD_INT 1
1412: PUSH
1413: LD_INT 6
1415: PUSH
1416: LD_INT 100
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: PPUSH
1437: CALL_OW 30
1441: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1442: LD_ADDR_EXP 24
1446: PUSH
1447: LD_STRING 13_ResourcesInCargo13_1
1449: PPUSH
1450: EMPTY
1451: PPUSH
1452: CALL_OW 30
1456: ST_TO_ADDR
// cargoList = [ ] ;
1457: LD_ADDR_VAR 0 6
1461: PUSH
1462: EMPTY
1463: ST_TO_ADDR
// uc_side = 1 ;
1464: LD_ADDR_OWVAR 20
1468: PUSH
1469: LD_INT 1
1471: ST_TO_ADDR
// if vehicles then
1472: LD_VAR 0 5
1476: IFFALSE 1823
// begin for i := 1 to vehicles do
1478: LD_ADDR_VAR 0 2
1482: PUSH
1483: DOUBLE
1484: LD_INT 1
1486: DEC
1487: ST_TO_ADDR
1488: LD_VAR 0 5
1492: PUSH
1493: FOR_TO
1494: IFFALSE 1643
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1496: LD_ADDR_OWVAR 21
1500: PUSH
1501: LD_VAR 0 5
1505: PUSH
1506: LD_VAR 0 2
1510: ARRAY
1511: PUSH
1512: LD_INT 1
1514: ARRAY
1515: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1516: LD_ADDR_OWVAR 37
1520: PUSH
1521: LD_VAR 0 5
1525: PUSH
1526: LD_VAR 0 2
1530: ARRAY
1531: PUSH
1532: LD_INT 2
1534: ARRAY
1535: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1536: LD_ADDR_OWVAR 39
1540: PUSH
1541: LD_VAR 0 5
1545: PUSH
1546: LD_VAR 0 2
1550: ARRAY
1551: PUSH
1552: LD_INT 3
1554: ARRAY
1555: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1556: LD_ADDR_OWVAR 38
1560: PUSH
1561: LD_VAR 0 5
1565: PUSH
1566: LD_VAR 0 2
1570: ARRAY
1571: PUSH
1572: LD_INT 4
1574: ARRAY
1575: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1576: LD_ADDR_OWVAR 40
1580: PUSH
1581: LD_VAR 0 5
1585: PUSH
1586: LD_VAR 0 2
1590: ARRAY
1591: PUSH
1592: LD_INT 5
1594: ARRAY
1595: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1596: LD_ADDR_OWVAR 41
1600: PUSH
1601: LD_INT 40
1603: ST_TO_ADDR
// veh = CreateVehicle ;
1604: LD_ADDR_VAR 0 4
1608: PUSH
1609: CALL_OW 45
1613: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1614: LD_VAR 0 4
1618: PPUSH
1619: LD_INT 1
1621: PPUSH
1622: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_INT 2
1633: PPUSH
1634: LD_INT 0
1636: PPUSH
1637: CALL_OW 49
// end ;
1641: GO 1493
1643: POP
1644: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1645: LD_ADDR_VAR 0 6
1649: PUSH
1650: LD_INT 22
1652: PUSH
1653: LD_INT 1
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 21
1662: PUSH
1663: LD_INT 2
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 34
1672: PUSH
1673: LD_INT 12
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: PPUSH
1685: CALL_OW 69
1689: ST_TO_ADDR
// if cargoList then
1690: LD_VAR 0 6
1694: IFFALSE 1823
// for i = 1 to cargoList do
1696: LD_ADDR_VAR 0 2
1700: PUSH
1701: DOUBLE
1702: LD_INT 1
1704: DEC
1705: ST_TO_ADDR
1706: LD_VAR 0 6
1710: PUSH
1711: FOR_TO
1712: IFFALSE 1821
// begin if resources then
1714: LD_EXP 24
1718: IFFALSE 1819
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1720: LD_VAR 0 6
1724: PUSH
1725: LD_VAR 0 2
1729: ARRAY
1730: PPUSH
1731: LD_INT 1
1733: PPUSH
1734: LD_EXP 24
1738: PUSH
1739: LD_VAR 0 2
1743: ARRAY
1744: PUSH
1745: LD_INT 1
1747: ARRAY
1748: PPUSH
1749: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1753: LD_VAR 0 6
1757: PUSH
1758: LD_VAR 0 2
1762: ARRAY
1763: PPUSH
1764: LD_INT 2
1766: PPUSH
1767: LD_EXP 24
1771: PUSH
1772: LD_VAR 0 2
1776: ARRAY
1777: PUSH
1778: LD_INT 2
1780: ARRAY
1781: PPUSH
1782: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1786: LD_VAR 0 6
1790: PUSH
1791: LD_VAR 0 2
1795: ARRAY
1796: PPUSH
1797: LD_INT 3
1799: PPUSH
1800: LD_EXP 24
1804: PUSH
1805: LD_VAR 0 2
1809: ARRAY
1810: PUSH
1811: LD_INT 3
1813: ARRAY
1814: PPUSH
1815: CALL_OW 291
// end ; end ;
1819: GO 1711
1821: POP
1822: POP
// end ; end ;
1823: LD_VAR 0 1
1827: RET
// export function PowellSupport ; var i , veh , un ; begin
1828: LD_INT 0
1830: PPUSH
1831: PPUSH
1832: PPUSH
1833: PPUSH
// for i := 1 to [ 4 , 3 , 2 , 2 ] [ Difficulty ] do
1834: LD_ADDR_VAR 0 2
1838: PUSH
1839: DOUBLE
1840: LD_INT 1
1842: DEC
1843: ST_TO_ADDR
1844: LD_INT 4
1846: PUSH
1847: LD_INT 3
1849: PUSH
1850: LD_INT 2
1852: PUSH
1853: LD_INT 2
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: LD_OWVAR 67
1866: ARRAY
1867: PUSH
1868: FOR_TO
1869: IFFALSE 2133
// begin uc_nation := 1 ;
1871: LD_ADDR_OWVAR 21
1875: PUSH
1876: LD_INT 1
1878: ST_TO_ADDR
// uc_side := 1 ;
1879: LD_ADDR_OWVAR 20
1883: PUSH
1884: LD_INT 1
1886: ST_TO_ADDR
// vc_engine := engine_siberite ;
1887: LD_ADDR_OWVAR 39
1891: PUSH
1892: LD_INT 3
1894: ST_TO_ADDR
// vc_control := control_manual ;
1895: LD_ADDR_OWVAR 38
1899: PUSH
1900: LD_INT 1
1902: ST_TO_ADDR
// vc_weapon := [ us_laser , us_heavy_gun , us_laser , us_double_gun , us_double_gun ] [ Difficulty + rand ( 0 , 1 ) ] ;
1903: LD_ADDR_OWVAR 40
1907: PUSH
1908: LD_INT 9
1910: PUSH
1911: LD_INT 6
1913: PUSH
1914: LD_INT 9
1916: PUSH
1917: LD_INT 5
1919: PUSH
1920: LD_INT 5
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: PUSH
1930: LD_OWVAR 67
1934: PUSH
1935: LD_INT 0
1937: PPUSH
1938: LD_INT 1
1940: PPUSH
1941: CALL_OW 12
1945: PLUS
1946: ARRAY
1947: ST_TO_ADDR
// if vc_weapon = us_heavy_gun then
1948: LD_OWVAR 40
1952: PUSH
1953: LD_INT 6
1955: EQUAL
1956: IFFALSE 1985
// vc_chassis := [ us_morphling , us_heavy_tracked , us_heavy_tracked ] [ Difficulty ] else
1958: LD_ADDR_OWVAR 37
1962: PUSH
1963: LD_INT 5
1965: PUSH
1966: LD_INT 4
1968: PUSH
1969: LD_INT 4
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: PUSH
1977: LD_OWVAR 67
1981: ARRAY
1982: ST_TO_ADDR
1983: GO 2020
// vc_chassis := [ us_morphling , us_heavy_tracked , us_medium_tracked , us_medium_tracked ] [ rand ( 1 , 4 ) ] ;
1985: LD_ADDR_OWVAR 37
1989: PUSH
1990: LD_INT 5
1992: PUSH
1993: LD_INT 4
1995: PUSH
1996: LD_INT 3
1998: PUSH
1999: LD_INT 3
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 1
2010: PPUSH
2011: LD_INT 4
2013: PPUSH
2014: CALL_OW 12
2018: ARRAY
2019: ST_TO_ADDR
// veh = CreateVehicle ;
2020: LD_ADDR_VAR 0 3
2024: PUSH
2025: CALL_OW 45
2029: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2030: LD_VAR 0 3
2034: PPUSH
2035: LD_INT 2
2037: PPUSH
2038: LD_INT 0
2040: PPUSH
2041: CALL_OW 49
// SetDir ( veh , 1 ) ;
2045: LD_VAR 0 3
2049: PPUSH
2050: LD_INT 1
2052: PPUSH
2053: CALL_OW 233
// hc_gallery :=  ;
2057: LD_ADDR_OWVAR 33
2061: PUSH
2062: LD_STRING 
2064: ST_TO_ADDR
// hc_name :=  ;
2065: LD_ADDR_OWVAR 26
2069: PUSH
2070: LD_STRING 
2072: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2073: LD_INT 0
2075: PPUSH
2076: LD_INT 3
2078: PPUSH
2079: LD_INT 9
2081: PUSH
2082: LD_INT 8
2084: PUSH
2085: LD_INT 8
2087: PUSH
2088: LD_INT 7
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_OWVAR 67
2101: ARRAY
2102: PPUSH
2103: CALL_OW 380
// un := CreateHuman ;
2107: LD_ADDR_VAR 0 4
2111: PUSH
2112: CALL_OW 44
2116: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2117: LD_VAR 0 4
2121: PPUSH
2122: LD_VAR 0 3
2126: PPUSH
2127: CALL_OW 52
// end ;
2131: GO 1868
2133: POP
2134: POP
// for i := 1 to [ 2 , 2 , 2 , 1 ] [ Difficulty ] do
2135: LD_ADDR_VAR 0 2
2139: PUSH
2140: DOUBLE
2141: LD_INT 1
2143: DEC
2144: ST_TO_ADDR
2145: LD_INT 2
2147: PUSH
2148: LD_INT 2
2150: PUSH
2151: LD_INT 2
2153: PUSH
2154: LD_INT 1
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_OWVAR 67
2167: ARRAY
2168: PUSH
2169: FOR_TO
2170: IFFALSE 2245
// begin PrepareHuman ( false , class_soldier , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2172: LD_INT 0
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: LD_INT 9
2180: PUSH
2181: LD_INT 8
2183: PUSH
2184: LD_INT 8
2186: PUSH
2187: LD_INT 7
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PUSH
2196: LD_OWVAR 67
2200: ARRAY
2201: PPUSH
2202: CALL_OW 380
// un := CreateHuman ;
2206: LD_ADDR_VAR 0 4
2210: PUSH
2211: CALL_OW 44
2215: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2216: LD_VAR 0 4
2220: PPUSH
2221: LD_INT 1
2223: PPUSH
2224: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
2228: LD_VAR 0 4
2232: PPUSH
2233: LD_INT 2
2235: PPUSH
2236: LD_INT 0
2238: PPUSH
2239: CALL_OW 49
// end ;
2243: GO 2169
2245: POP
2246: POP
// end ; end_of_file
2247: LD_VAR 0 1
2251: RET
// export function PrepareBurlak ; begin
2252: LD_INT 0
2254: PPUSH
// uc_side := 7 ;
2255: LD_ADDR_OWVAR 20
2259: PUSH
2260: LD_INT 7
2262: ST_TO_ADDR
// uc_nation := 3 ;
2263: LD_ADDR_OWVAR 21
2267: PUSH
2268: LD_INT 3
2270: ST_TO_ADDR
// vc_engine := engine_siberite ;
2271: LD_ADDR_OWVAR 39
2275: PUSH
2276: LD_INT 3
2278: ST_TO_ADDR
// vc_control := control_manual ;
2279: LD_ADDR_OWVAR 38
2283: PUSH
2284: LD_INT 1
2286: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ Difficulty ] ;
2287: LD_ADDR_OWVAR 40
2291: PUSH
2292: LD_INT 44
2294: PUSH
2295: LD_INT 45
2297: PUSH
2298: LD_INT 46
2300: PUSH
2301: LD_INT 46
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: PUSH
2310: LD_OWVAR 67
2314: ARRAY
2315: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
2316: LD_ADDR_OWVAR 37
2320: PUSH
2321: LD_INT 24
2323: ST_TO_ADDR
// Masha := CreateVehicle ;
2324: LD_ADDR_EXP 18
2328: PUSH
2329: CALL_OW 45
2333: ST_TO_ADDR
// SetDir ( Masha , 2 ) ;
2334: LD_EXP 18
2338: PPUSH
2339: LD_INT 2
2341: PPUSH
2342: CALL_OW 233
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2346: LD_EXP 18
2350: PPUSH
2351: LD_INT 3
2353: PPUSH
2354: LD_INT 0
2356: PPUSH
2357: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2361: LD_EXP 18
2365: PPUSH
2366: LD_INT 1
2368: PPUSH
2369: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2373: LD_ADDR_EXP 17
2377: PUSH
2378: LD_STRING Burlak
2380: PPUSH
2381: LD_INT 0
2383: PPUSH
2384: LD_STRING 
2386: PPUSH
2387: CALL 31050 0 3
2391: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2392: LD_EXP 17
2396: PPUSH
2397: LD_EXP 18
2401: PPUSH
2402: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2406: LD_EXP 18
2410: PPUSH
2411: LD_INT 107
2413: PPUSH
2414: LD_INT 118
2416: PPUSH
2417: CALL_OW 114
// spawnBurlak := 1 ;
2421: LD_ADDR_EXP 27
2425: PUSH
2426: LD_INT 1
2428: ST_TO_ADDR
// end ;
2429: LD_VAR 0 1
2433: RET
// export function BurlakArmy ; var i , veh , tmp , bazooka ; begin
2434: LD_INT 0
2436: PPUSH
2437: PPUSH
2438: PPUSH
2439: PPUSH
2440: PPUSH
// uc_side := 7 ;
2441: LD_ADDR_OWVAR 20
2445: PUSH
2446: LD_INT 7
2448: ST_TO_ADDR
// uc_nation := 3 ;
2449: LD_ADDR_OWVAR 21
2453: PUSH
2454: LD_INT 3
2456: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
2457: LD_ADDR_EXP 19
2461: PUSH
2462: LD_STRING Gnyevko
2464: PPUSH
2465: LD_INT 0
2467: PPUSH
2468: LD_STRING 
2470: PPUSH
2471: CALL 31050 0 3
2475: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2476: LD_ADDR_EXP 20
2480: PUSH
2481: LD_STRING Titov
2483: PPUSH
2484: LD_INT 0
2486: PPUSH
2487: LD_STRING 
2489: PPUSH
2490: CALL 31050 0 3
2494: ST_TO_ADDR
// Xavier := PrepareUnit ( Xavier2 , false ,  ) ;
2495: LD_ADDR_EXP 21
2499: PUSH
2500: LD_STRING Xavier2
2502: PPUSH
2503: LD_INT 0
2505: PPUSH
2506: LD_STRING 
2508: PPUSH
2509: CALL 31050 0 3
2513: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
2514: LD_ADDR_EXP 22
2518: PUSH
2519: LD_STRING Belkov
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: LD_STRING 
2527: PPUSH
2528: CALL 31050 0 3
2532: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2533: LD_ADDR_EXP 23
2537: PUSH
2538: LD_STRING Lipshchin
2540: PPUSH
2541: LD_INT 0
2543: PPUSH
2544: LD_STRING 
2546: PPUSH
2547: CALL 31050 0 3
2551: ST_TO_ADDR
// for i = 1 to 5 do
2552: LD_ADDR_VAR 0 2
2556: PUSH
2557: DOUBLE
2558: LD_INT 1
2560: DEC
2561: ST_TO_ADDR
2562: LD_INT 5
2564: PUSH
2565: FOR_TO
2566: IFFALSE 2691
// begin vc_engine := engine_siberite ;
2568: LD_ADDR_OWVAR 39
2572: PUSH
2573: LD_INT 3
2575: ST_TO_ADDR
// vc_control := control_manual ;
2576: LD_ADDR_OWVAR 38
2580: PUSH
2581: LD_INT 1
2583: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun , ru_time_lapser ] [ rand ( 1 , 5 ) ] ;
2584: LD_ADDR_OWVAR 40
2588: PUSH
2589: LD_INT 43
2591: PUSH
2592: LD_INT 45
2594: PUSH
2595: LD_INT 45
2597: PUSH
2598: LD_INT 44
2600: PUSH
2601: LD_INT 49
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: PUSH
2611: LD_INT 1
2613: PPUSH
2614: LD_INT 5
2616: PPUSH
2617: CALL_OW 12
2621: ARRAY
2622: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] ;
2623: LD_ADDR_OWVAR 37
2627: PUSH
2628: LD_INT 22
2630: PUSH
2631: LD_INT 22
2633: PUSH
2634: LD_INT 24
2636: PUSH
2637: LD_INT 24
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: PUSH
2646: LD_OWVAR 67
2650: ARRAY
2651: ST_TO_ADDR
// veh = CreateVehicle ;
2652: LD_ADDR_VAR 0 3
2656: PUSH
2657: CALL_OW 45
2661: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2662: LD_VAR 0 3
2666: PPUSH
2667: LD_INT 2
2669: PPUSH
2670: CALL_OW 233
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2674: LD_VAR 0 3
2678: PPUSH
2679: LD_INT 3
2681: PPUSH
2682: LD_INT 0
2684: PPUSH
2685: CALL_OW 49
// end ;
2689: GO 2565
2691: POP
2692: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2693: LD_ADDR_VAR 0 4
2697: PUSH
2698: LD_INT 22
2700: PUSH
2701: LD_INT 7
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PUSH
2708: LD_INT 21
2710: PUSH
2711: LD_INT 2
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 58
2720: PUSH
2721: EMPTY
2722: LIST
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: LIST
2728: PPUSH
2729: CALL_OW 69
2733: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2734: LD_EXP 19
2738: PPUSH
2739: LD_VAR 0 4
2743: PUSH
2744: LD_INT 1
2746: ARRAY
2747: PPUSH
2748: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2752: LD_EXP 20
2756: PPUSH
2757: LD_VAR 0 4
2761: PUSH
2762: LD_INT 2
2764: ARRAY
2765: PPUSH
2766: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2770: LD_EXP 21
2774: PPUSH
2775: LD_VAR 0 4
2779: PUSH
2780: LD_INT 3
2782: ARRAY
2783: PPUSH
2784: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2788: LD_EXP 22
2792: PPUSH
2793: LD_VAR 0 4
2797: PUSH
2798: LD_INT 4
2800: ARRAY
2801: PPUSH
2802: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2806: LD_EXP 23
2810: PPUSH
2811: LD_VAR 0 4
2815: PUSH
2816: LD_INT 5
2818: ARRAY
2819: PPUSH
2820: CALL_OW 52
// SetClass ( Gnyevko , class_mechanic ) ;
2824: LD_EXP 19
2828: PPUSH
2829: LD_INT 3
2831: PPUSH
2832: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , class_bazooker ) ;
2836: LD_EXP 20
2840: PUSH
2841: LD_EXP 23
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PPUSH
2850: LD_INT 9
2852: PPUSH
2853: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2857: LD_ADDR_VAR 0 4
2861: PUSH
2862: LD_INT 22
2864: PUSH
2865: LD_INT 7
2867: PUSH
2868: EMPTY
2869: LIST
2870: LIST
2871: PPUSH
2872: CALL_OW 69
2876: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2877: LD_VAR 0 4
2881: PPUSH
2882: LD_INT 107
2884: PPUSH
2885: LD_INT 118
2887: PPUSH
2888: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2892: LD_INT 35
2894: PPUSH
2895: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) , Masha ) ;
2899: LD_VAR 0 4
2903: PPUSH
2904: LD_INT 34
2906: PUSH
2907: LD_INT 49
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PPUSH
2914: CALL_OW 72
2918: PPUSH
2919: LD_EXP 18
2923: PPUSH
2924: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , 107 , 118 ) ;
2928: LD_VAR 0 4
2932: PPUSH
2933: LD_INT 3
2935: PUSH
2936: LD_INT 34
2938: PUSH
2939: LD_INT 49
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: PUSH
2946: EMPTY
2947: LIST
2948: LIST
2949: PPUSH
2950: CALL_OW 72
2954: PPUSH
2955: LD_INT 107
2957: PPUSH
2958: LD_INT 118
2960: PPUSH
2961: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
2965: LD_ADDR_VAR 0 5
2969: PUSH
2970: LD_EXP 20
2974: PUSH
2975: LD_EXP 23
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: LD_INT 50
2986: PUSH
2987: EMPTY
2988: LIST
2989: PUSH
2990: LD_INT 3
2992: PUSH
2993: LD_INT 54
2995: PUSH
2996: EMPTY
2997: LIST
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PPUSH
3007: CALL_OW 72
3011: ST_TO_ADDR
// if bazooka then
3012: LD_VAR 0 5
3016: IFFALSE 3058
// begin for i in bazooka do
3018: LD_ADDR_VAR 0 2
3022: PUSH
3023: LD_VAR 0 5
3027: PUSH
3028: FOR_IN
3029: IFFALSE 3056
// if See ( 1 , i ) then
3031: LD_INT 1
3033: PPUSH
3034: LD_VAR 0 2
3038: PPUSH
3039: CALL_OW 292
3043: IFFALSE 3054
// ComSpaceTimeShoot ( i ) ;
3045: LD_VAR 0 2
3049: PPUSH
3050: CALL 31997 0 1
3054: GO 3028
3056: POP
3057: POP
// end ; until UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) = 0 or IsDying ( Masha ) ;
3058: LD_VAR 0 4
3062: PPUSH
3063: LD_INT 34
3065: PUSH
3066: LD_INT 49
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: PPUSH
3073: CALL_OW 72
3077: PUSH
3078: LD_INT 0
3080: EQUAL
3081: PUSH
3082: LD_EXP 18
3086: PPUSH
3087: CALL_OW 303
3091: OR
3092: IFFALSE 2892
// repeat wait ( 0 0$1 ) ;
3094: LD_INT 35
3096: PPUSH
3097: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
3101: LD_ADDR_VAR 0 4
3105: PUSH
3106: LD_INT 22
3108: PUSH
3109: LD_INT 7
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PPUSH
3116: CALL_OW 69
3120: PUSH
3121: LD_EXP 17
3125: DIFF
3126: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
3127: LD_VAR 0 4
3131: PPUSH
3132: LD_INT 107
3134: PPUSH
3135: LD_INT 118
3137: PPUSH
3138: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3142: LD_ADDR_VAR 0 5
3146: PUSH
3147: LD_EXP 20
3151: PUSH
3152: LD_EXP 23
3156: PUSH
3157: EMPTY
3158: LIST
3159: LIST
3160: PPUSH
3161: LD_INT 50
3163: PUSH
3164: EMPTY
3165: LIST
3166: PUSH
3167: LD_INT 3
3169: PUSH
3170: LD_INT 54
3172: PUSH
3173: EMPTY
3174: LIST
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: PPUSH
3184: CALL_OW 72
3188: ST_TO_ADDR
// if bazooka then
3189: LD_VAR 0 5
3193: IFFALSE 3235
// begin for i in bazooka do
3195: LD_ADDR_VAR 0 2
3199: PUSH
3200: LD_VAR 0 5
3204: PUSH
3205: FOR_IN
3206: IFFALSE 3233
// if See ( 1 , i ) then
3208: LD_INT 1
3210: PPUSH
3211: LD_VAR 0 2
3215: PPUSH
3216: CALL_OW 292
3220: IFFALSE 3231
// ComSpaceTimeShoot ( i ) ;
3222: LD_VAR 0 2
3226: PPUSH
3227: CALL 31997 0 1
3231: GO 3205
3233: POP
3234: POP
// end ; if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
3235: LD_EXP 17
3239: PPUSH
3240: CALL_OW 302
3244: PUSH
3245: LD_EXP 17
3249: PPUSH
3250: CALL_OW 310
3254: NOT
3255: AND
3256: IFFALSE 3273
// ComMoveXY ( Burlak , 107 , 118 ) ;
3258: LD_EXP 17
3262: PPUSH
3263: LD_INT 107
3265: PPUSH
3266: LD_INT 118
3268: PPUSH
3269: CALL_OW 111
// until not tmp ;
3273: LD_VAR 0 4
3277: NOT
3278: IFFALSE 3094
// end ;
3280: LD_VAR 0 1
3284: RET
// export function PrepareRussianAttack ; var i , un , veh , area , dir ; begin
3285: LD_INT 0
3287: PPUSH
3288: PPUSH
3289: PPUSH
3290: PPUSH
3291: PPUSH
3292: PPUSH
// result := [ ] ;
3293: LD_ADDR_VAR 0 1
3297: PUSH
3298: EMPTY
3299: ST_TO_ADDR
// dir := rand ( 1 , 2 ) ;
3300: LD_ADDR_VAR 0 6
3304: PUSH
3305: LD_INT 1
3307: PPUSH
3308: LD_INT 2
3310: PPUSH
3311: CALL_OW 12
3315: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
3316: LD_ADDR_VAR 0 5
3320: PUSH
3321: LD_INT 8
3323: PUSH
3324: LD_INT 9
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_VAR 0 6
3335: ARRAY
3336: ST_TO_ADDR
// for i := 1 to [ 6 , 8 , 10 , 11 ] [ Difficulty ] do
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_INT 6
3349: PUSH
3350: LD_INT 8
3352: PUSH
3353: LD_INT 10
3355: PUSH
3356: LD_INT 11
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: LD_OWVAR 67
3369: ARRAY
3370: PUSH
3371: FOR_TO
3372: IFFALSE 3610
// begin uc_side := 3 ;
3374: LD_ADDR_OWVAR 20
3378: PUSH
3379: LD_INT 3
3381: ST_TO_ADDR
// uc_nation := 3 ;
3382: LD_ADDR_OWVAR 21
3386: PUSH
3387: LD_INT 3
3389: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] , [ ru_heavy_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] [ rand ( 1 , 5 ) ] , 100 ) ;
3390: LD_INT 24
3392: PPUSH
3393: LD_INT 3
3395: PPUSH
3396: LD_INT 1
3398: PUSH
3399: LD_INT 3
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: PUSH
3406: LD_INT 1
3408: PPUSH
3409: LD_INT 2
3411: PPUSH
3412: CALL_OW 12
3416: ARRAY
3417: PPUSH
3418: LD_INT 46
3420: PUSH
3421: LD_INT 46
3423: PUSH
3424: LD_INT 45
3426: PUSH
3427: LD_INT 47
3429: PUSH
3430: LD_INT 49
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: LD_INT 1
3442: PPUSH
3443: LD_INT 5
3445: PPUSH
3446: CALL_OW 12
3450: ARRAY
3451: PPUSH
3452: LD_INT 100
3454: PPUSH
3455: CALL 36067 0 5
// veh := CreateVehicle ;
3459: LD_ADDR_VAR 0 4
3463: PUSH
3464: CALL_OW 45
3468: ST_TO_ADDR
// result := Join ( result , veh ) ;
3469: LD_ADDR_VAR 0 1
3473: PUSH
3474: LD_VAR 0 1
3478: PPUSH
3479: LD_VAR 0 4
3483: PPUSH
3484: CALL 68451 0 2
3488: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
3489: LD_VAR 0 4
3493: PPUSH
3494: LD_INT 3
3496: PUSH
3497: LD_INT 5
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PUSH
3504: LD_VAR 0 6
3508: ARRAY
3509: PPUSH
3510: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3514: LD_VAR 0 4
3518: PPUSH
3519: LD_VAR 0 5
3523: PPUSH
3524: LD_INT 0
3526: PPUSH
3527: CALL_OW 49
// if vc_control = control_manual then
3531: LD_OWVAR 38
3535: PUSH
3536: LD_INT 1
3538: EQUAL
3539: IFFALSE 3586
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3541: LD_INT 0
3543: PPUSH
3544: LD_INT 7
3546: PUSH
3547: LD_INT 8
3549: PUSH
3550: LD_INT 9
3552: PUSH
3553: LD_INT 10
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: PUSH
3562: LD_OWVAR 67
3566: ARRAY
3567: PPUSH
3568: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3572: CALL_OW 44
3576: PPUSH
3577: LD_VAR 0 4
3581: PPUSH
3582: CALL_OW 52
// end ; wait ( 0 0$0.5 ) ;
3586: LD_INT 18
3588: PPUSH
3589: CALL_OW 67
// ComAgressiveMove ( veh , 100 , 55 ) ;
3593: LD_VAR 0 4
3597: PPUSH
3598: LD_INT 100
3600: PPUSH
3601: LD_INT 55
3603: PPUSH
3604: CALL_OW 114
// end ;
3608: GO 3371
3610: POP
3611: POP
// for i in result do
3612: LD_ADDR_VAR 0 2
3616: PUSH
3617: LD_VAR 0 1
3621: PUSH
3622: FOR_IN
3623: IFFALSE 3639
// SetTag ( i , 10 ) ;
3625: LD_VAR 0 2
3629: PPUSH
3630: LD_INT 10
3632: PPUSH
3633: CALL_OW 109
3637: GO 3622
3639: POP
3640: POP
// RaiseSailEvent ( eventRussianAttack ) ;
3641: LD_EXP 44
3645: PPUSH
3646: CALL_OW 427
// end ; end_of_file
3650: LD_VAR 0 1
3654: RET
// export function DestroySibDeposit ; var un , rnd ; begin
3655: LD_INT 0
3657: PPUSH
3658: PPUSH
3659: PPUSH
// rnd := 0 ;
3660: LD_ADDR_VAR 0 3
3664: PUSH
3665: LD_INT 0
3667: ST_TO_ADDR
// uc_side := 8 ;
3668: LD_ADDR_OWVAR 20
3672: PUSH
3673: LD_INT 8
3675: ST_TO_ADDR
// uc_nation := 2 ;
3676: LD_ADDR_OWVAR 21
3680: PUSH
3681: LD_INT 2
3683: ST_TO_ADDR
// hc_name :=  ;
3684: LD_ADDR_OWVAR 26
3688: PUSH
3689: LD_STRING 
3691: ST_TO_ADDR
// hc_gallery :=  ;
3692: LD_ADDR_OWVAR 33
3696: PUSH
3697: LD_STRING 
3699: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 , 12 ] [ Difficulty ] , [ 10 , 11 , 12 , 12 ] [ Difficulty ] ] ;
3700: LD_ADDR_OWVAR 29
3704: PUSH
3705: LD_INT 10
3707: PUSH
3708: LD_INT 11
3710: PUSH
3711: LD_INT 12
3713: PUSH
3714: LD_INT 12
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: PUSH
3723: LD_OWVAR 67
3727: ARRAY
3728: PUSH
3729: LD_INT 10
3731: PUSH
3732: LD_INT 11
3734: PUSH
3735: LD_INT 12
3737: PUSH
3738: LD_INT 12
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: PUSH
3747: LD_OWVAR 67
3751: ARRAY
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: ST_TO_ADDR
// PrepareHuman ( false , 4 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3757: LD_INT 0
3759: PPUSH
3760: LD_INT 4
3762: PPUSH
3763: LD_INT 7
3765: PUSH
3766: LD_INT 8
3768: PUSH
3769: LD_INT 9
3771: PUSH
3772: LD_INT 10
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: PUSH
3781: LD_OWVAR 67
3785: ARRAY
3786: PPUSH
3787: CALL_OW 380
// un := CreateHuman ;
3791: LD_ADDR_VAR 0 2
3795: PUSH
3796: CALL_OW 44
3800: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3801: LD_VAR 0 2
3805: PPUSH
3806: LD_INT 8
3808: PUSH
3809: LD_INT 9
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: PUSH
3816: LD_INT 1
3818: PPUSH
3819: LD_INT 2
3821: PPUSH
3822: CALL_OW 12
3826: ARRAY
3827: PPUSH
3828: LD_INT 0
3830: PPUSH
3831: CALL_OW 49
// SetTag ( un , 1 ) ;
3835: LD_VAR 0 2
3839: PPUSH
3840: LD_INT 1
3842: PPUSH
3843: CALL_OW 109
// rnd := rand ( 1 , sibDeposits ) ;
3847: LD_ADDR_VAR 0 3
3851: PUSH
3852: LD_INT 1
3854: PPUSH
3855: LD_EXP 31
3859: PPUSH
3860: CALL_OW 12
3864: ST_TO_ADDR
// RaiseSailEventCustom ( eventContaminate , un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] , 0 , 0 , 0 ) ;
3865: LD_EXP 45
3869: PPUSH
3870: LD_VAR 0 2
3874: PPUSH
3875: LD_EXP 31
3879: PUSH
3880: LD_VAR 0 3
3884: ARRAY
3885: PUSH
3886: LD_INT 1
3888: ARRAY
3889: PPUSH
3890: LD_EXP 31
3894: PUSH
3895: LD_VAR 0 3
3899: ARRAY
3900: PUSH
3901: LD_INT 2
3903: ARRAY
3904: PPUSH
3905: LD_INT 0
3907: PPUSH
3908: LD_INT 0
3910: PPUSH
3911: LD_INT 0
3913: PPUSH
3914: CALL_OW 595
// end ;
3918: LD_VAR 0 1
3922: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do var i ;
3923: LD_INT 22
3925: PUSH
3926: LD_INT 8
3928: PUSH
3929: EMPTY
3930: LIST
3931: LIST
3932: PUSH
3933: LD_INT 3
3935: PUSH
3936: LD_INT 61
3938: PUSH
3939: EMPTY
3940: LIST
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: PUSH
3946: LD_INT 50
3948: PUSH
3949: EMPTY
3950: LIST
3951: PUSH
3952: LD_INT 33
3954: PUSH
3955: LD_INT 2
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: PPUSH
3968: CALL_OW 69
3972: IFFALSE 4059
3974: GO 3976
3976: DISABLE
3977: LD_INT 0
3979: PPUSH
// begin enable ;
3980: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do
3981: LD_ADDR_VAR 0 1
3985: PUSH
3986: LD_INT 22
3988: PUSH
3989: LD_INT 8
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: LD_INT 61
4001: PUSH
4002: EMPTY
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PUSH
4009: LD_INT 50
4011: PUSH
4012: EMPTY
4013: LIST
4014: PUSH
4015: LD_INT 33
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: PPUSH
4031: CALL_OW 69
4035: PUSH
4036: FOR_IN
4037: IFFALSE 4057
// begin wait ( 0 0$0.3 ) ;
4039: LD_INT 10
4041: PPUSH
4042: CALL_OW 67
// Connect ( i ) ;
4046: LD_VAR 0 1
4050: PPUSH
4051: CALL 39160 0 1
// end ;
4055: GO 4036
4057: POP
4058: POP
// end ;
4059: PPOPN 1
4061: END
// export function PrepareArabianAttack ; var i , veh , xy , un , area , counter , tmp , dir ; begin
4062: LD_INT 0
4064: PPUSH
4065: PPUSH
4066: PPUSH
4067: PPUSH
4068: PPUSH
4069: PPUSH
4070: PPUSH
4071: PPUSH
4072: PPUSH
// result := [ ] ;
4073: LD_ADDR_VAR 0 1
4077: PUSH
4078: EMPTY
4079: ST_TO_ADDR
// arabianAttacksCounter := arabianAttacksCounter + 1 ;
4080: LD_ADDR_EXP 33
4084: PUSH
4085: LD_EXP 33
4089: PUSH
4090: LD_INT 1
4092: PLUS
4093: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
4094: LD_INT 22
4096: PUSH
4097: LD_INT 8
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PUSH
4104: LD_INT 3
4106: PUSH
4107: LD_INT 58
4109: PUSH
4110: EMPTY
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PUSH
4117: LD_INT 34
4119: PUSH
4120: LD_INT 31
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: LIST
4131: PPUSH
4132: CALL_OW 69
4136: PUSH
4137: LD_INT 2
4139: LESS
4140: IFFALSE 4384
// begin uc_side := 8 ;
4142: LD_ADDR_OWVAR 20
4146: PUSH
4147: LD_INT 8
4149: ST_TO_ADDR
// uc_nation := 2 ;
4150: LD_ADDR_OWVAR 21
4154: PUSH
4155: LD_INT 2
4157: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
4158: LD_INT 14
4160: PPUSH
4161: LD_INT 3
4163: PPUSH
4164: LD_INT 1
4166: PPUSH
4167: LD_INT 31
4169: PPUSH
4170: LD_INT 100
4172: PPUSH
4173: CALL 36067 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
4177: LD_ADDR_VAR 0 2
4181: PUSH
4182: DOUBLE
4183: LD_INT 22
4185: PUSH
4186: LD_INT 8
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 3
4195: PUSH
4196: LD_INT 58
4198: PUSH
4199: EMPTY
4200: LIST
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: LD_INT 34
4208: PUSH
4209: LD_INT 31
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: LIST
4220: PPUSH
4221: CALL_OW 69
4225: PUSH
4226: LD_INT 1
4228: PLUS
4229: DEC
4230: ST_TO_ADDR
4231: LD_INT 2
4233: PUSH
4234: FOR_TO
4235: IFFALSE 4382
// begin veh := CreateVehicle ;
4237: LD_ADDR_VAR 0 3
4241: PUSH
4242: CALL_OW 45
4246: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
4247: LD_VAR 0 3
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
4259: LD_ADDR_VAR 0 4
4263: PUSH
4264: LD_INT 181
4266: PUSH
4267: LD_INT 105
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PUSH
4274: LD_INT 137
4276: PUSH
4277: LD_INT 6
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: PUSH
4288: LD_VAR 0 2
4292: PUSH
4293: LD_INT 2
4295: MOD
4296: PUSH
4297: LD_INT 1
4299: PLUS
4300: ARRAY
4301: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
4302: LD_VAR 0 3
4306: PPUSH
4307: LD_VAR 0 4
4311: PUSH
4312: LD_INT 1
4314: ARRAY
4315: PPUSH
4316: LD_VAR 0 4
4320: PUSH
4321: LD_INT 2
4323: ARRAY
4324: PPUSH
4325: LD_INT 12
4327: PPUSH
4328: LD_INT 0
4330: PPUSH
4331: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4335: LD_INT 0
4337: PPUSH
4338: LD_INT 7
4340: PUSH
4341: LD_INT 9
4343: PUSH
4344: LD_INT 10
4346: PUSH
4347: LD_INT 10
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: PUSH
4356: LD_OWVAR 67
4360: ARRAY
4361: PPUSH
4362: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4366: CALL_OW 44
4370: PPUSH
4371: LD_VAR 0 3
4375: PPUSH
4376: CALL_OW 52
// end ;
4380: GO 4234
4382: POP
4383: POP
// end ; dir := rand ( 1 , 2 ) ;
4384: LD_ADDR_VAR 0 9
4388: PUSH
4389: LD_INT 1
4391: PPUSH
4392: LD_INT 2
4394: PPUSH
4395: CALL_OW 12
4399: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
4400: LD_ADDR_VAR 0 6
4404: PUSH
4405: LD_INT 8
4407: PUSH
4408: LD_INT 9
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_VAR 0 9
4419: ARRAY
4420: ST_TO_ADDR
// counter := [ 6 , 8 , 10 , 11 ] [ Difficulty ] + arabianAttacksCounter ;
4421: LD_ADDR_VAR 0 7
4425: PUSH
4426: LD_INT 6
4428: PUSH
4429: LD_INT 8
4431: PUSH
4432: LD_INT 10
4434: PUSH
4435: LD_INT 11
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: PUSH
4444: LD_OWVAR 67
4448: ARRAY
4449: PUSH
4450: LD_EXP 33
4454: PLUS
4455: ST_TO_ADDR
// if counter > 20 then
4456: LD_VAR 0 7
4460: PUSH
4461: LD_INT 20
4463: GREATER
4464: IFFALSE 4474
// counter := 20 ;
4466: LD_ADDR_VAR 0 7
4470: PUSH
4471: LD_INT 20
4473: ST_TO_ADDR
// for i := 1 to counter do
4474: LD_ADDR_VAR 0 2
4478: PUSH
4479: DOUBLE
4480: LD_INT 1
4482: DEC
4483: ST_TO_ADDR
4484: LD_VAR 0 7
4488: PUSH
4489: FOR_TO
4490: IFFALSE 4825
// begin uc_side := 8 ;
4492: LD_ADDR_OWVAR 20
4496: PUSH
4497: LD_INT 8
4499: ST_TO_ADDR
// uc_nation := 2 ;
4500: LD_ADDR_OWVAR 21
4504: PUSH
4505: LD_INT 2
4507: ST_TO_ADDR
// PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] , [ ar_gun , ar_rocket_launcher , ar_gun , ar_mortar , ar_selfpropelled_bomb , ar_gatling_gun ] [ rand ( 1 , 6 ) ] , 100 ) ;
4508: LD_INT 13
4510: PUSH
4511: LD_INT 14
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 1
4520: PPUSH
4521: LD_INT 2
4523: PPUSH
4524: CALL_OW 12
4528: ARRAY
4529: PPUSH
4530: LD_INT 3
4532: PPUSH
4533: LD_INT 1
4535: PUSH
4536: LD_INT 2
4538: PUSH
4539: LD_INT 5
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: PUSH
4547: LD_INT 1
4549: PPUSH
4550: LD_INT 3
4552: PPUSH
4553: CALL_OW 12
4557: ARRAY
4558: PPUSH
4559: LD_INT 27
4561: PUSH
4562: LD_INT 28
4564: PUSH
4565: LD_INT 27
4567: PUSH
4568: LD_EXP 51
4572: PUSH
4573: LD_INT 29
4575: PUSH
4576: LD_INT 25
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: PUSH
4587: LD_INT 1
4589: PPUSH
4590: LD_INT 6
4592: PPUSH
4593: CALL_OW 12
4597: ARRAY
4598: PPUSH
4599: LD_INT 100
4601: PPUSH
4602: CALL 36067 0 5
// if vc_weapon = ar_selfpropelled_bomb then
4606: LD_OWVAR 40
4610: PUSH
4611: LD_INT 29
4613: EQUAL
4614: IFFALSE 4624
// vc_control := control_remote ;
4616: LD_ADDR_OWVAR 38
4620: PUSH
4621: LD_INT 2
4623: ST_TO_ADDR
// veh := CreateVehicle ;
4624: LD_ADDR_VAR 0 3
4628: PUSH
4629: CALL_OW 45
4633: ST_TO_ADDR
// result := Join ( result , veh ) ;
4634: LD_ADDR_VAR 0 1
4638: PUSH
4639: LD_VAR 0 1
4643: PPUSH
4644: LD_VAR 0 3
4648: PPUSH
4649: CALL 68451 0 2
4653: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
4654: LD_VAR 0 3
4658: PPUSH
4659: LD_INT 3
4661: PUSH
4662: LD_INT 5
4664: PUSH
4665: EMPTY
4666: LIST
4667: LIST
4668: PUSH
4669: LD_VAR 0 9
4673: ARRAY
4674: PPUSH
4675: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
4679: LD_VAR 0 3
4683: PPUSH
4684: LD_VAR 0 6
4688: PPUSH
4689: LD_INT 0
4691: PPUSH
4692: CALL_OW 49
// if vc_control = control_manual then
4696: LD_OWVAR 38
4700: PUSH
4701: LD_INT 1
4703: EQUAL
4704: IFFALSE 4751
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4706: LD_INT 0
4708: PPUSH
4709: LD_INT 7
4711: PUSH
4712: LD_INT 8
4714: PUSH
4715: LD_INT 9
4717: PUSH
4718: LD_INT 10
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: PUSH
4727: LD_OWVAR 67
4731: ARRAY
4732: PPUSH
4733: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4737: CALL_OW 44
4741: PPUSH
4742: LD_VAR 0 3
4746: PPUSH
4747: CALL_OW 52
// end ; wait ( 0 0$0.3 ) ;
4751: LD_INT 10
4753: PPUSH
4754: CALL_OW 67
// if GetControl ( veh ) = control_remote and not IsControledBy ( veh ) then
4758: LD_VAR 0 3
4762: PPUSH
4763: CALL_OW 263
4767: PUSH
4768: LD_INT 2
4770: EQUAL
4771: PUSH
4772: LD_VAR 0 3
4776: PPUSH
4777: CALL_OW 312
4781: NOT
4782: AND
4783: IFFALSE 4801
// begin Connect ( veh ) ;
4785: LD_VAR 0 3
4789: PPUSH
4790: CALL 39160 0 1
// wait ( 0 0$0.3 ) ;
4794: LD_INT 10
4796: PPUSH
4797: CALL_OW 67
// end ; ComAgressiveMove ( veh , 100 , 55 ) ;
4801: LD_VAR 0 3
4805: PPUSH
4806: LD_INT 100
4808: PPUSH
4809: LD_INT 55
4811: PPUSH
4812: CALL_OW 114
// wait ( 0 0$0.5 ) ;
4816: LD_INT 18
4818: PPUSH
4819: CALL_OW 67
// end ;
4823: GO 4489
4825: POP
4826: POP
// if arabianAttacksCounter = 1 then
4827: LD_EXP 33
4831: PUSH
4832: LD_INT 1
4834: EQUAL
4835: IFFALSE 4841
// DestroySibDeposit ;
4837: CALL 3655 0 0
// if arabianAttacksCounter mod [ 4 , 3 , 3 , 2 ] [ Difficulty ] = 0 then
4841: LD_EXP 33
4845: PUSH
4846: LD_INT 4
4848: PUSH
4849: LD_INT 3
4851: PUSH
4852: LD_INT 3
4854: PUSH
4855: LD_INT 2
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: PUSH
4864: LD_OWVAR 67
4868: ARRAY
4869: MOD
4870: PUSH
4871: LD_INT 0
4873: EQUAL
4874: IFFALSE 5232
// begin tmp := rand ( 0 , 2 ) ;
4876: LD_ADDR_VAR 0 8
4880: PUSH
4881: LD_INT 0
4883: PPUSH
4884: LD_INT 2
4886: PPUSH
4887: CALL_OW 12
4891: ST_TO_ADDR
// if not tmp then
4892: LD_VAR 0 8
4896: NOT
4897: IFFALSE 5058
// begin for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] do
4899: LD_ADDR_VAR 0 2
4903: PUSH
4904: DOUBLE
4905: LD_INT 1
4907: DEC
4908: ST_TO_ADDR
4909: LD_INT 3
4911: PUSH
4912: LD_INT 4
4914: PUSH
4915: LD_INT 4
4917: PUSH
4918: LD_INT 5
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: PUSH
4927: LD_OWVAR 67
4931: ARRAY
4932: PUSH
4933: FOR_TO
4934: IFFALSE 5054
// begin uc_side := 8 ;
4936: LD_ADDR_OWVAR 20
4940: PUSH
4941: LD_INT 8
4943: ST_TO_ADDR
// uc_nation := 2 ;
4944: LD_ADDR_OWVAR 21
4948: PUSH
4949: LD_INT 2
4951: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4952: LD_INT 0
4954: PPUSH
4955: LD_INT 1
4957: PPUSH
4958: LD_INT 7
4960: PUSH
4961: LD_INT 8
4963: PUSH
4964: LD_INT 9
4966: PUSH
4967: LD_INT 10
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: PUSH
4976: LD_OWVAR 67
4980: ARRAY
4981: PPUSH
4982: CALL_OW 380
// un := CreateHuman ;
4986: LD_ADDR_VAR 0 5
4990: PUSH
4991: CALL_OW 44
4995: ST_TO_ADDR
// result := Join ( result , un ) ;
4996: LD_ADDR_VAR 0 1
5000: PUSH
5001: LD_VAR 0 1
5005: PPUSH
5006: LD_VAR 0 5
5010: PPUSH
5011: CALL 68451 0 2
5015: ST_TO_ADDR
// if Prob ( 60 ) then
5016: LD_INT 60
5018: PPUSH
5019: CALL_OW 13
5023: IFFALSE 5037
// SetClass ( un , class_mortar ) ;
5025: LD_VAR 0 5
5029: PPUSH
5030: LD_INT 8
5032: PPUSH
5033: CALL_OW 336
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5037: LD_VAR 0 5
5041: PPUSH
5042: LD_INT 16
5044: PPUSH
5045: LD_INT 0
5047: PPUSH
5048: CALL_OW 49
// end ;
5052: GO 4933
5054: POP
5055: POP
// end else
5056: GO 5222
// begin for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
5058: LD_ADDR_VAR 0 2
5062: PUSH
5063: DOUBLE
5064: LD_INT 1
5066: DEC
5067: ST_TO_ADDR
5068: LD_INT 2
5070: PUSH
5071: LD_INT 3
5073: PUSH
5074: LD_INT 3
5076: PUSH
5077: LD_INT 4
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: PUSH
5086: LD_OWVAR 67
5090: ARRAY
5091: PUSH
5092: FOR_TO
5093: IFFALSE 5220
// begin uc_side := 8 ;
5095: LD_ADDR_OWVAR 20
5099: PUSH
5100: LD_INT 8
5102: ST_TO_ADDR
// uc_nation := 0 ;
5103: LD_ADDR_OWVAR 21
5107: PUSH
5108: LD_INT 0
5110: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
5111: LD_ADDR_OWVAR 28
5115: PUSH
5116: LD_INT 17
5118: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
5119: LD_ADDR_OWVAR 31
5123: PUSH
5124: LD_INT 3
5126: PUSH
5127: LD_INT 0
5129: PUSH
5130: LD_INT 0
5132: PUSH
5133: LD_INT 0
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5142: LD_ADDR_OWVAR 29
5146: PUSH
5147: LD_INT 10
5149: PUSH
5150: LD_INT 10
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: ST_TO_ADDR
// hc_gallery :=  ;
5157: LD_ADDR_OWVAR 33
5161: PUSH
5162: LD_STRING 
5164: ST_TO_ADDR
// hc_name :=  ;
5165: LD_ADDR_OWVAR 26
5169: PUSH
5170: LD_STRING 
5172: ST_TO_ADDR
// un := CreateHuman ;
5173: LD_ADDR_VAR 0 5
5177: PUSH
5178: CALL_OW 44
5182: ST_TO_ADDR
// result := Join ( result , un ) ;
5183: LD_ADDR_VAR 0 1
5187: PUSH
5188: LD_VAR 0 1
5192: PPUSH
5193: LD_VAR 0 5
5197: PPUSH
5198: CALL 68451 0 2
5202: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5203: LD_VAR 0 5
5207: PPUSH
5208: LD_INT 16
5210: PPUSH
5211: LD_INT 0
5213: PPUSH
5214: CALL_OW 49
// end ;
5218: GO 5092
5220: POP
5221: POP
// end ; if sibDeposits then
5222: LD_EXP 31
5226: IFFALSE 5232
// DestroySibDeposit ;
5228: CALL 3655 0 0
// end ; for i in result do
5232: LD_ADDR_VAR 0 2
5236: PUSH
5237: LD_VAR 0 1
5241: PUSH
5242: FOR_IN
5243: IFFALSE 5259
// SetTag ( i , 10 ) ;
5245: LD_VAR 0 2
5249: PPUSH
5250: LD_INT 10
5252: PPUSH
5253: CALL_OW 109
5257: GO 5242
5259: POP
5260: POP
// RaiseSailEvent ( eventArabianAttack ) ;
5261: LD_EXP 43
5265: PPUSH
5266: CALL_OW 427
// end ; end_of_file
5270: LD_VAR 0 1
5274: RET
// export function Action ; var tmp ; begin
5275: LD_INT 0
5277: PPUSH
5278: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
5279: LD_ADDR_VAR 0 2
5283: PUSH
5284: LD_INT 22
5286: PUSH
5287: LD_INT 1
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PUSH
5294: LD_INT 21
5296: PUSH
5297: LD_INT 2
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PPUSH
5308: CALL_OW 69
5312: ST_TO_ADDR
// InGameOn ;
5313: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
5317: LD_VAR 0 2
5321: PPUSH
5322: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
5326: LD_INT 22
5328: PUSH
5329: LD_INT 1
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PUSH
5336: LD_INT 21
5338: PUSH
5339: LD_INT 2
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: PPUSH
5350: CALL_OW 69
5354: PPUSH
5355: LD_INT 69
5357: PPUSH
5358: LD_INT 94
5360: PPUSH
5361: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
5365: LD_EXP 1
5369: PPUSH
5370: LD_STRING D2-JMM-1
5372: PPUSH
5373: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5377: LD_VAR 0 2
5381: PPUSH
5382: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
5386: LD_EXP 2
5390: PPUSH
5391: LD_STRING D2-Huck-1
5393: PPUSH
5394: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5398: LD_VAR 0 2
5402: PPUSH
5403: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
5407: LD_EXP 1
5411: PPUSH
5412: LD_STRING D2-JMM-2
5414: PPUSH
5415: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5419: LD_VAR 0 2
5423: PPUSH
5424: CALL_OW 87
// InGameOff ;
5428: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5432: LD_STRING M1
5434: PPUSH
5435: CALL_OW 337
// SaveForQuickRestart ;
5439: CALL_OW 22
// wait ( 10 10$00 ) ;
5443: LD_INT 21000
5445: PPUSH
5446: CALL_OW 67
// DialogueOn ;
5450: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
5454: LD_EXP 15
5458: PPUSH
5459: LD_STRING D3-Pow-1
5461: PPUSH
5462: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
5466: LD_EXP 1
5470: PPUSH
5471: LD_STRING D3-JMM-1
5473: PPUSH
5474: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
5478: LD_EXP 15
5482: PPUSH
5483: LD_STRING D3-Pow-2
5485: PPUSH
5486: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
5490: LD_EXP 1
5494: PPUSH
5495: LD_STRING D3-JMM-2
5497: PPUSH
5498: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
5502: LD_EXP 15
5506: PPUSH
5507: LD_STRING D3-Pow-3
5509: PPUSH
5510: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
5514: LD_EXP 1
5518: PPUSH
5519: LD_STRING D3-JMM-3
5521: PPUSH
5522: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
5526: LD_EXP 15
5530: PPUSH
5531: LD_STRING D3-Pow-4
5533: PPUSH
5534: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
5538: LD_EXP 1
5542: PPUSH
5543: LD_STRING D3-JMM-4
5545: PPUSH
5546: CALL_OW 88
// DialogueOff ;
5550: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5554: LD_STRING M2
5556: PPUSH
5557: CALL_OW 337
// wait ( 2 2$30 ) ;
5561: LD_INT 5250
5563: PPUSH
5564: CALL_OW 67
// PrepareBurlak ;
5568: CALL 2252 0 0
// BurlakArmy ;
5572: CALL 2434 0 0
// end ;
5576: LD_VAR 0 1
5580: RET
// every 0 0$1 trigger See ( 1 , Masha ) do
5581: LD_INT 1
5583: PPUSH
5584: LD_EXP 18
5588: PPUSH
5589: CALL_OW 292
5593: IFFALSE 5752
5595: GO 5597
5597: DISABLE
// begin DialogueOn ;
5598: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
5602: LD_EXP 18
5606: PPUSH
5607: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
5611: LD_INT 22
5613: PUSH
5614: LD_INT 1
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: LD_INT 26
5623: PUSH
5624: LD_INT 1
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: PUSH
5631: LD_INT 2
5633: PUSH
5634: LD_INT 25
5636: PUSH
5637: LD_INT 1
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: LD_INT 25
5646: PUSH
5647: LD_INT 2
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PUSH
5654: LD_INT 25
5656: PUSH
5657: LD_INT 3
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: PUSH
5664: LD_INT 25
5666: PUSH
5667: LD_INT 4
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PUSH
5674: LD_INT 25
5676: PUSH
5677: LD_INT 5
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: PUSH
5684: EMPTY
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: LIST
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: PPUSH
5697: CALL_OW 69
5701: PPUSH
5702: LD_STRING D5-Sol1-1
5704: PPUSH
5705: LD_STRING D5-FSol1-1
5707: PPUSH
5708: CALL 8210 0 3
// Say ( JMM , D5-JMM-1 ) ;
5712: LD_EXP 1
5716: PPUSH
5717: LD_STRING D5-JMM-1
5719: PPUSH
5720: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
5724: LD_EXP 17
5728: PPUSH
5729: LD_STRING DAmer-Bur-1
5731: PPUSH
5732: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
5736: LD_EXP 1
5740: PPUSH
5741: LD_STRING DAmer-JMM-1
5743: PPUSH
5744: CALL_OW 88
// DialogueOff ;
5748: CALL_OW 7
// end ;
5752: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
5753: LD_INT 4
5755: PPUSH
5756: LD_INT 22
5758: PUSH
5759: LD_INT 7
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: PPUSH
5766: CALL_OW 70
5770: IFFALSE 6169
5772: GO 5774
5774: DISABLE
5775: LD_INT 0
5777: PPUSH
// begin enable ;
5778: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
5779: LD_ADDR_VAR 0 1
5783: PUSH
5784: LD_INT 4
5786: PPUSH
5787: LD_INT 22
5789: PUSH
5790: LD_INT 7
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: PPUSH
5797: CALL_OW 70
5801: PUSH
5802: FOR_IN
5803: IFFALSE 6167
// begin if i = Burlak or i = Masha then
5805: LD_VAR 0 1
5809: PUSH
5810: LD_EXP 17
5814: EQUAL
5815: PUSH
5816: LD_VAR 0 1
5820: PUSH
5821: LD_EXP 18
5825: EQUAL
5826: OR
5827: IFFALSE 5974
// begin RemoveUnit ( i ) ;
5829: LD_VAR 0 1
5833: PPUSH
5834: CALL_OW 64
// DialogueOn ;
5838: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
5842: LD_EXP 1
5846: PPUSH
5847: LD_STRING D5a-JMM-1
5849: PPUSH
5850: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
5854: LD_INT 22
5856: PUSH
5857: LD_INT 1
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: LD_INT 26
5866: PUSH
5867: LD_INT 1
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PUSH
5874: LD_INT 2
5876: PUSH
5877: LD_INT 25
5879: PUSH
5880: LD_INT 1
5882: PUSH
5883: EMPTY
5884: LIST
5885: LIST
5886: PUSH
5887: LD_INT 25
5889: PUSH
5890: LD_INT 2
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: PUSH
5897: LD_INT 25
5899: PUSH
5900: LD_INT 3
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PUSH
5907: LD_INT 25
5909: PUSH
5910: LD_INT 4
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: PUSH
5917: LD_INT 25
5919: PUSH
5920: LD_INT 5
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: LIST
5939: PPUSH
5940: CALL_OW 69
5944: PPUSH
5945: LD_STRING D5a-Sol1-1
5947: PPUSH
5948: LD_STRING D5-FSol1-1
5950: PPUSH
5951: CALL 8210 0 3
// DialogueOff ;
5955: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
5959: LD_STRING M2b
5961: PPUSH
5962: CALL_OW 337
// spawnBurlak = 0 ;
5966: LD_ADDR_EXP 27
5970: PUSH
5971: LD_INT 0
5973: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
5974: LD_VAR 0 1
5978: PPUSH
5979: CALL_OW 247
5983: PUSH
5984: LD_INT 2
5986: EQUAL
5987: PUSH
5988: LD_VAR 0 1
5992: PPUSH
5993: CALL_OW 263
5997: PUSH
5998: LD_INT 1
6000: EQUAL
6001: AND
6002: IFFALSE 6130
// begin case IsDrivenBy ( i ) of Gnyevko :
6004: LD_VAR 0 1
6008: PPUSH
6009: CALL_OW 311
6013: PUSH
6014: LD_EXP 19
6018: DOUBLE
6019: EQUAL
6020: IFTRUE 6024
6022: GO 6037
6024: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
6025: LD_INT 1
6027: PPUSH
6028: LD_STRING 13_Gnyevko_1
6030: PPUSH
6031: CALL_OW 39
6035: GO 6130
6037: LD_EXP 20
6041: DOUBLE
6042: EQUAL
6043: IFTRUE 6047
6045: GO 6060
6047: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
6048: LD_INT 1
6050: PPUSH
6051: LD_STRING 13_Titov_1
6053: PPUSH
6054: CALL_OW 39
6058: GO 6130
6060: LD_EXP 21
6064: DOUBLE
6065: EQUAL
6066: IFTRUE 6070
6068: GO 6083
6070: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
6071: LD_INT 1
6073: PPUSH
6074: LD_STRING 13_Xavier_1
6076: PPUSH
6077: CALL_OW 39
6081: GO 6130
6083: LD_EXP 22
6087: DOUBLE
6088: EQUAL
6089: IFTRUE 6093
6091: GO 6106
6093: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
6094: LD_INT 1
6096: PPUSH
6097: LD_STRING 13_Belkov_1
6099: PPUSH
6100: CALL_OW 39
6104: GO 6130
6106: LD_EXP 23
6110: DOUBLE
6111: EQUAL
6112: IFTRUE 6116
6114: GO 6129
6116: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
6117: LD_INT 1
6119: PPUSH
6120: LD_STRING 13_Lipshchin_1
6122: PPUSH
6123: CALL_OW 39
6127: GO 6130
6129: POP
// end ; if GetWeapon ( i ) = ru_time_lapser then
6130: LD_VAR 0 1
6134: PPUSH
6135: CALL_OW 264
6139: PUSH
6140: LD_INT 49
6142: EQUAL
6143: IFFALSE 6156
// DestroyUnit ( i ) else
6145: LD_VAR 0 1
6149: PPUSH
6150: CALL_OW 65
6154: GO 6165
// RemoveUnit ( i ) ;
6156: LD_VAR 0 1
6160: PPUSH
6161: CALL_OW 64
// end ;
6165: GO 5802
6167: POP
6168: POP
// end ;
6169: PPOPN 1
6171: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
6172: LD_EXP 17
6176: PPUSH
6177: CALL_OW 302
6181: PUSH
6182: LD_EXP 18
6186: PPUSH
6187: CALL_OW 256
6191: PUSH
6192: LD_INT 500
6194: LESS
6195: AND
6196: PUSH
6197: LD_EXP 18
6201: PPUSH
6202: CALL_OW 255
6206: PUSH
6207: LD_INT 7
6209: EQUAL
6210: AND
6211: IFFALSE 6231
6213: GO 6215
6215: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
6216: LD_EXP 17
6220: PPUSH
6221: LD_INT 107
6223: PPUSH
6224: LD_INT 118
6226: PPUSH
6227: CALL_OW 111
6231: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
6232: LD_EXP 17
6236: PPUSH
6237: CALL_OW 301
6241: PUSH
6242: LD_EXP 27
6246: PUSH
6247: LD_INT 1
6249: EQUAL
6250: AND
6251: IFFALSE 6384
6253: GO 6255
6255: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
6256: LD_EXP 1
6260: PPUSH
6261: LD_STRING D5b-JMM-1
6263: PPUSH
6264: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
6268: LD_INT 22
6270: PUSH
6271: LD_INT 1
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PUSH
6278: LD_INT 26
6280: PUSH
6281: LD_INT 1
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 2
6290: PUSH
6291: LD_INT 25
6293: PUSH
6294: LD_INT 1
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PUSH
6301: LD_INT 25
6303: PUSH
6304: LD_INT 2
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 25
6313: PUSH
6314: LD_INT 3
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: LD_INT 25
6323: PUSH
6324: LD_INT 4
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: LD_INT 25
6333: PUSH
6334: LD_INT 5
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PUSH
6341: EMPTY
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: PPUSH
6354: CALL_OW 69
6358: PPUSH
6359: LD_STRING D5b-Sol1-1
6361: PPUSH
6362: LD_STRING 
6364: PPUSH
6365: CALL 8210 0 3
// ChangeMissionObjectives ( M2a ) ;
6369: LD_STRING M2a
6371: PPUSH
6372: CALL_OW 337
// burlakStatus := 1 ;
6376: LD_ADDR_EXP 28
6380: PUSH
6381: LD_INT 1
6383: ST_TO_ADDR
// end ;
6384: END
// every 0 0$1 trigger IsDead ( Stevens ) do
6385: LD_EXP 2
6389: PPUSH
6390: CALL_OW 301
6394: IFFALSE 6531
6396: GO 6398
6398: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
6399: LD_EXP 1
6403: PPUSH
6404: LD_STRING D6-JMM-1
6406: PPUSH
6407: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
6411: LD_INT 22
6413: PUSH
6414: LD_INT 1
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 26
6423: PUSH
6424: LD_INT 1
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 25
6436: PUSH
6437: LD_INT 1
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: LD_INT 25
6446: PUSH
6447: LD_INT 2
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 25
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 25
6466: PUSH
6467: LD_INT 4
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PUSH
6474: LD_INT 25
6476: PUSH
6477: LD_INT 5
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: LIST
6496: PPUSH
6497: CALL_OW 69
6501: PPUSH
6502: LD_STRING D6-Sol1-1
6504: PPUSH
6505: LD_STRING 
6507: PPUSH
6508: CALL 8210 0 3
// Say ( JMM , D6-JMM-2 ) ;
6512: LD_EXP 1
6516: PPUSH
6517: LD_STRING D6-JMM-2
6519: PPUSH
6520: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
6524: LD_STRING M1a
6526: PPUSH
6527: CALL_OW 337
// end ;
6531: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
6532: LD_INT 25
6534: PPUSH
6535: LD_INT 1
6537: PPUSH
6538: CALL_OW 321
6542: PUSH
6543: LD_INT 2
6545: EQUAL
6546: IFFALSE 6563
6548: GO 6550
6550: DISABLE
// Say ( Stevens , D6-Huck-2 ) ;
6551: LD_EXP 2
6555: PPUSH
6556: LD_STRING D6-Huck-2
6558: PPUSH
6559: CALL_OW 88
6563: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_warehouse ] , [ f_not , [ f_constructed ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] , [ f_not , [ f_constructed ] ] ] ) do
6564: LD_INT 22
6566: PUSH
6567: LD_INT 1
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PUSH
6574: LD_INT 2
6576: PUSH
6577: LD_INT 34
6579: PUSH
6580: LD_INT 8
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 35
6589: PUSH
6590: LD_INT 8
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: LIST
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PPUSH
6606: CALL_OW 69
6610: PUSH
6611: LD_INT 5
6613: PPUSH
6614: LD_INT 22
6616: PUSH
6617: LD_INT 1
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: PUSH
6624: LD_INT 21
6626: PUSH
6627: LD_INT 3
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: LD_INT 30
6636: PUSH
6637: LD_INT 1
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: LD_INT 3
6646: PUSH
6647: LD_INT 57
6649: PUSH
6650: EMPTY
6651: LIST
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: PPUSH
6663: CALL_OW 70
6667: AND
6668: PUSH
6669: LD_INT 5
6671: PPUSH
6672: LD_INT 22
6674: PUSH
6675: LD_INT 1
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: PUSH
6682: LD_INT 21
6684: PUSH
6685: LD_INT 3
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: PUSH
6692: LD_INT 30
6694: PUSH
6695: LD_INT 5
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: LD_INT 3
6704: PUSH
6705: LD_INT 57
6707: PUSH
6708: EMPTY
6709: LIST
6710: PUSH
6711: EMPTY
6712: LIST
6713: LIST
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: PPUSH
6721: CALL_OW 70
6725: AND
6726: IFFALSE 6768
6728: GO 6730
6730: DISABLE
// begin DialogueOn ;
6731: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6735: LD_EXP 1
6739: PPUSH
6740: LD_STRING D7-JMM-1
6742: PPUSH
6743: CALL_OW 88
// DialogueOff ;
6747: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
6751: LD_STRING M4
6753: PPUSH
6754: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
6758: LD_INT 5
6760: PPUSH
6761: LD_INT 0
6763: PPUSH
6764: CALL_OW 424
// end ;
6768: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) and eventVar3 = 1 and radationResearched = 0 do
6769: LD_INT 6
6771: PPUSH
6772: LD_INT 22
6774: PUSH
6775: LD_INT 1
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: PUSH
6782: LD_INT 25
6784: PUSH
6785: LD_INT 4
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PPUSH
6796: CALL_OW 70
6800: PUSH
6801: LD_EXP 37
6805: PUSH
6806: LD_INT 1
6808: EQUAL
6809: AND
6810: PUSH
6811: LD_EXP 29
6815: PUSH
6816: LD_INT 0
6818: EQUAL
6819: AND
6820: IFFALSE 6885
6822: GO 6824
6824: DISABLE
// begin enable ;
6825: ENABLE
// AmSciSib := FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
6826: LD_ADDR_EXP 26
6830: PUSH
6831: LD_INT 6
6833: PPUSH
6834: LD_INT 22
6836: PUSH
6837: LD_INT 1
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: PUSH
6844: LD_INT 25
6846: PUSH
6847: LD_INT 4
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PPUSH
6858: CALL_OW 70
6862: PUSH
6863: LD_INT 1
6865: ARRAY
6866: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
6867: LD_INT 6
6869: PPUSH
6870: LD_INT 0
6872: PPUSH
6873: CALL_OW 424
// radationResearched := 1 ;
6877: LD_ADDR_EXP 29
6881: PUSH
6882: LD_INT 1
6884: ST_TO_ADDR
// end ;
6885: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
6886: LD_EXP 26
6890: PPUSH
6891: CALL_OW 301
6895: PUSH
6896: LD_EXP 29
6900: PUSH
6901: LD_INT 1
6903: EQUAL
6904: AND
6905: IFFALSE 6941
6907: GO 6909
6909: DISABLE
// begin enable ;
6910: ENABLE
// radationResearched = 0 ;
6911: LD_ADDR_EXP 29
6915: PUSH
6916: LD_INT 0
6918: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
6919: LD_INT 6
6921: PPUSH
6922: LD_INT 1
6924: PPUSH
6925: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
6929: LD_EXP 1
6933: PPUSH
6934: LD_STRING D9a-JMM-1
6936: PPUSH
6937: CALL_OW 88
// end ; end_of_file
6941: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = us_siberium_rocket and eventVar1 = 0 then
6942: LD_VAR 0 5
6946: PUSH
6947: LD_INT 8
6949: EQUAL
6950: PUSH
6951: LD_EXP 35
6955: PUSH
6956: LD_INT 0
6958: EQUAL
6959: AND
6960: IFFALSE 7013
// begin eventVar1 := 1 ;
6962: LD_ADDR_EXP 35
6966: PUSH
6967: LD_INT 1
6969: ST_TO_ADDR
// DialogueOn ;
6970: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
6974: LD_EXP 1
6978: PPUSH
6979: LD_STRING D6a-JMM-1
6981: PPUSH
6982: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
6986: LD_EXP 15
6990: PPUSH
6991: LD_STRING D6a-Pow-1
6993: PPUSH
6994: CALL_OW 94
// DialogueOff ;
6998: CALL_OW 7
// wait ( 3 3$0 ) ;
7002: LD_INT 6300
7004: PPUSH
7005: CALL_OW 67
// PowellSupport ;
7009: CALL 1828 0 0
// end ; end ;
7013: PPOPN 5
7015: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7016: LD_VAR 0 1
7020: PPUSH
7021: CALL 26739 0 1
// if un = JMM then
7025: LD_VAR 0 1
7029: PUSH
7030: LD_EXP 1
7034: EQUAL
7035: IFFALSE 7044
// YouLost ( JMM ) ;
7037: LD_STRING JMM
7039: PPUSH
7040: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
7044: LD_VAR 0 1
7048: PPUSH
7049: CALL_OW 264
7053: PUSH
7054: LD_INT 31
7056: EQUAL
7057: IFFALSE 7073
// achivCounter := achivCounter + 1 ;
7059: LD_ADDR_EXP 41
7063: PUSH
7064: LD_EXP 41
7068: PUSH
7069: LD_INT 1
7071: PLUS
7072: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
7073: LD_VAR 0 1
7077: PPUSH
7078: CALL_OW 255
7082: PUSH
7083: LD_INT 1
7085: NONEQUAL
7086: PUSH
7087: LD_VAR 0 1
7091: PPUSH
7092: CALL_OW 247
7096: PUSH
7097: LD_INT 2
7099: EQUAL
7100: AND
7101: IFFALSE 7117
// destroyCounter := destroyCounter + 1 ;
7103: LD_ADDR_EXP 42
7107: PUSH
7108: LD_EXP 42
7112: PUSH
7113: LD_INT 1
7115: PLUS
7116: ST_TO_ADDR
// end ;
7117: PPOPN 1
7119: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
7120: LD_VAR 0 2
7124: PUSH
7125: LD_EXP 18
7129: EQUAL
7130: IFFALSE 7139
// SetAchievement ( ACH_MASHA ) ;
7132: LD_STRING ACH_MASHA
7134: PPUSH
7135: CALL_OW 543
// end ;
7139: PPOPN 4
7141: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
7142: LD_VAR 0 1
7146: PPUSH
7147: LD_VAR 0 2
7151: PPUSH
7152: CALL 26861 0 2
// if GetWeapon ( vehicle ) = us_siberium_rocket and eventVar2 = 0 then
7156: LD_VAR 0 1
7160: PPUSH
7161: CALL_OW 264
7165: PUSH
7166: LD_INT 8
7168: EQUAL
7169: PUSH
7170: LD_EXP 36
7174: PUSH
7175: LD_INT 0
7177: EQUAL
7178: AND
7179: IFFALSE 7248
// begin eventVar2 := 1 ;
7181: LD_ADDR_EXP 36
7185: PUSH
7186: LD_INT 1
7188: ST_TO_ADDR
// DialogueOn ;
7189: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
7193: LD_EXP 1
7197: PPUSH
7198: LD_STRING D6b-JMM-1
7200: PPUSH
7201: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
7205: LD_EXP 15
7209: PPUSH
7210: LD_STRING D6b-Pow-1
7212: PPUSH
7213: CALL_OW 94
// DialogueOff ;
7217: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
7221: LD_INT 5
7223: PPUSH
7224: LD_INT 1
7226: PPUSH
7227: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
7231: LD_INT 7
7233: PPUSH
7234: LD_INT 1
7236: PPUSH
7237: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
7241: LD_STRING M3
7243: PPUSH
7244: CALL_OW 337
// end ; end ;
7248: PPOPN 2
7250: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
7251: LD_VAR 0 2
7255: PPUSH
7256: LD_VAR 0 3
7260: PPUSH
7261: LD_INT 5
7263: PPUSH
7264: CALL_OW 309
7268: PUSH
7269: LD_EXP 37
7273: PUSH
7274: LD_INT 0
7276: EQUAL
7277: AND
7278: IFFALSE 7503
// begin eventVar3 := 1 ;
7280: LD_ADDR_EXP 37
7284: PUSH
7285: LD_INT 1
7287: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7288: LD_INT 175
7290: PPUSH
7291: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_radar ] ] ) then
7295: LD_INT 7
7297: PPUSH
7298: LD_INT 22
7300: PUSH
7301: LD_INT 1
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PUSH
7308: LD_INT 21
7310: PUSH
7311: LD_INT 2
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PUSH
7318: LD_INT 34
7320: PUSH
7321: LD_INT 11
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: PPUSH
7333: CALL_OW 70
7337: IFFALSE 7356
// begin radarOnSpot := 1 ;
7339: LD_ADDR_EXP 30
7343: PUSH
7344: LD_INT 1
7346: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
7347: LD_STRING M3a
7349: PPUSH
7350: CALL_OW 337
// end else
7354: GO 7363
// ChangeMissionObjectives ( M3b ) ;
7356: LD_STRING M3b
7358: PPUSH
7359: CALL_OW 337
// DialogueOn ;
7363: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
7367: LD_EXP 2
7371: PPUSH
7372: LD_STRING D8-Huck-1
7374: PPUSH
7375: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
7379: LD_EXP 1
7383: PPUSH
7384: LD_STRING D8-JMM-1
7386: PPUSH
7387: CALL_OW 88
// if IsOk ( Stevens ) then
7391: LD_EXP 2
7395: PPUSH
7396: CALL_OW 302
7400: IFFALSE 7462
// begin Say ( Stevens , D8-Huck-2 ) ;
7402: LD_EXP 2
7406: PPUSH
7407: LD_STRING D8-Huck-2
7409: PPUSH
7410: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
7414: LD_EXP 1
7418: PPUSH
7419: LD_STRING D8-JMM-2
7421: PPUSH
7422: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
7426: LD_EXP 2
7430: PPUSH
7431: LD_STRING D8-Huck-3
7433: PPUSH
7434: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
7438: LD_EXP 1
7442: PPUSH
7443: LD_STRING D8-JMM-3
7445: PPUSH
7446: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
7450: LD_EXP 2
7454: PPUSH
7455: LD_STRING D8-Huck-4
7457: PPUSH
7458: CALL_OW 88
// end ; DialogueOff ;
7462: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
7466: LD_INT 5
7468: PPUSH
7469: LD_INT 0
7471: PPUSH
7472: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
7476: LD_INT 7
7478: PPUSH
7479: LD_INT 0
7481: PPUSH
7482: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7486: LD_INT 6
7488: PPUSH
7489: LD_INT 1
7491: PPUSH
7492: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
7496: LD_STRING M5
7498: PPUSH
7499: CALL_OW 337
// end ; end ;
7503: PPOPN 3
7505: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 and ( GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium ) then
7506: LD_EXP 26
7510: PPUSH
7511: CALL_OW 302
7515: PUSH
7516: LD_VAR 0 2
7520: PUSH
7521: LD_EXP 26
7525: EQUAL
7526: AND
7527: PUSH
7528: LD_EXP 38
7532: PUSH
7533: LD_INT 0
7535: EQUAL
7536: AND
7537: PUSH
7538: LD_EXP 37
7542: PUSH
7543: LD_INT 1
7545: EQUAL
7546: AND
7547: PUSH
7548: LD_VAR 0 1
7552: PPUSH
7553: LD_INT 1
7555: PPUSH
7556: CALL_OW 268
7560: PUSH
7561: LD_INT 11
7563: EQUAL
7564: PUSH
7565: LD_VAR 0 1
7569: PPUSH
7570: LD_INT 2
7572: PPUSH
7573: CALL_OW 268
7577: PUSH
7578: LD_INT 11
7580: EQUAL
7581: OR
7582: AND
7583: IFFALSE 7593
// eventVar4 := 1 ;
7585: LD_ADDR_EXP 38
7589: PUSH
7590: LD_INT 1
7592: ST_TO_ADDR
// end ;
7593: PPOPN 2
7595: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
7596: LD_INT 0
7598: PPUSH
7599: PPUSH
// begin if GetNation ( unit ) = nation_arabian then
7600: LD_VAR 0 1
7604: PPUSH
7605: CALL_OW 248
7609: PUSH
7610: LD_INT 2
7612: EQUAL
7613: IFFALSE 7859
// begin sibDestroyedCounter := sibDestroyedCounter + 1 ;
7615: LD_ADDR_EXP 32
7619: PUSH
7620: LD_EXP 32
7624: PUSH
7625: LD_INT 1
7627: PLUS
7628: ST_TO_ADDR
// for i := sibDeposits downto 1 do
7629: LD_ADDR_VAR 0 4
7633: PUSH
7634: DOUBLE
7635: LD_EXP 31
7639: INC
7640: ST_TO_ADDR
7641: LD_INT 1
7643: PUSH
7644: FOR_DOWNTO
7645: IFFALSE 7715
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
7647: LD_EXP 31
7651: PUSH
7652: LD_VAR 0 4
7656: ARRAY
7657: PUSH
7658: LD_INT 1
7660: ARRAY
7661: PUSH
7662: LD_VAR 0 2
7666: EQUAL
7667: PUSH
7668: LD_EXP 31
7672: PUSH
7673: LD_VAR 0 4
7677: ARRAY
7678: PUSH
7679: LD_INT 2
7681: ARRAY
7682: PUSH
7683: LD_VAR 0 3
7687: EQUAL
7688: AND
7689: IFFALSE 7713
// begin sibDeposits := Delete ( sibDeposits , i ) ;
7691: LD_ADDR_EXP 31
7695: PUSH
7696: LD_EXP 31
7700: PPUSH
7701: LD_VAR 0 4
7705: PPUSH
7706: CALL_OW 3
7710: ST_TO_ADDR
// break ;
7711: GO 7715
// end ;
7713: GO 7644
7715: POP
7716: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
7717: LD_EXP 39
7721: PUSH
7722: LD_INT 0
7724: EQUAL
7725: PUSH
7726: LD_VAR 0 2
7730: PPUSH
7731: LD_VAR 0 3
7735: PPUSH
7736: CALL_OW 428
7740: PUSH
7741: LD_INT 22
7743: PUSH
7744: LD_INT 1
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PPUSH
7751: CALL_OW 69
7755: IN
7756: AND
7757: IFFALSE 7859
// begin eventVar5 := 1 ;
7759: LD_ADDR_EXP 39
7763: PUSH
7764: LD_INT 1
7766: ST_TO_ADDR
// DialogueOn ;
7767: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
7771: LD_EXP 2
7775: PPUSH
7776: LD_STRING D4-Sci1-1
7778: PPUSH
7779: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7783: LD_EXP 1
7787: PPUSH
7788: LD_STRING D4-JMM-1
7790: PPUSH
7791: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
7795: LD_EXP 2
7799: PPUSH
7800: LD_STRING D4-Sci1-2
7802: PPUSH
7803: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7807: LD_EXP 1
7811: PPUSH
7812: LD_STRING D4-JMM-2
7814: PPUSH
7815: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
7819: LD_EXP 2
7823: PPUSH
7824: LD_STRING D4-Sci1-3
7826: PPUSH
7827: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
7831: LD_EXP 1
7835: PPUSH
7836: LD_STRING D4-JMM-3
7838: PPUSH
7839: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
7843: LD_EXP 1
7847: PPUSH
7848: LD_STRING D4-JMM-3a
7850: PPUSH
7851: CALL_OW 88
// DialogueOff ;
7855: CALL_OW 7
// end ; end ; end ;
7859: PPOPN 5
7861: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = b_depot and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 1 then
7862: LD_VAR 0 1
7866: PPUSH
7867: CALL_OW 255
7871: PUSH
7872: LD_INT 1
7874: EQUAL
7875: PUSH
7876: LD_VAR 0 1
7880: PPUSH
7881: CALL_OW 266
7885: PUSH
7886: LD_INT 0
7888: EQUAL
7889: AND
7890: PUSH
7891: LD_INT 22
7893: PUSH
7894: LD_INT 1
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PUSH
7901: LD_INT 21
7903: PUSH
7904: LD_INT 3
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: PUSH
7911: LD_INT 2
7913: PUSH
7914: LD_INT 30
7916: PUSH
7917: LD_INT 0
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PUSH
7924: LD_INT 30
7926: PUSH
7927: LD_INT 1
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: LIST
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: LIST
7943: PPUSH
7944: CALL_OW 69
7948: PUSH
7949: LD_INT 1
7951: EQUAL
7952: AND
7953: IFFALSE 7967
// SetBName ( building , omega ) ;
7955: LD_VAR 0 1
7959: PPUSH
7960: LD_STRING omega
7962: PPUSH
7963: CALL_OW 500
// end ;
7967: PPOPN 2
7969: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7970: LD_VAR 0 1
7974: PPUSH
7975: CALL 26845 0 1
// end ;
7979: PPOPN 1
7981: END
// on SailEvent ( event ) do begin if event = eventArabianAttack then
7982: LD_VAR 0 1
7986: PUSH
7987: LD_EXP 43
7991: EQUAL
7992: IFFALSE 7998
// ArabianAttack ;
7994: CALL 10063 0 0
// if event = eventRussianAttack then
7998: LD_VAR 0 1
8002: PUSH
8003: LD_EXP 44
8007: EQUAL
8008: IFFALSE 8014
// RussianAttack ;
8010: CALL 10428 0 0
// end ;
8014: PPOPN 1
8016: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = eventContaminate then
8017: LD_VAR 0 1
8021: PUSH
8022: LD_EXP 45
8026: EQUAL
8027: IFFALSE 8121
// begin if IsOk ( p1 ) and ValidHex ( p2 , p3 ) then
8029: LD_VAR 0 2
8033: PPUSH
8034: CALL_OW 302
8038: PUSH
8039: LD_VAR 0 3
8043: PPUSH
8044: LD_VAR 0 4
8048: PPUSH
8049: CALL_OW 488
8053: AND
8054: IFFALSE 8121
// begin repeat wait ( 0 0$1 ) ;
8056: LD_INT 35
8058: PPUSH
8059: CALL_OW 67
// if not HasTask ( p1 ) then
8063: LD_VAR 0 2
8067: PPUSH
8068: CALL_OW 314
8072: NOT
8073: IFFALSE 8109
// begin ComContaminate ( p1 , p2 , p3 ) ;
8075: LD_VAR 0 2
8079: PPUSH
8080: LD_VAR 0 3
8084: PPUSH
8085: LD_VAR 0 4
8089: PPUSH
8090: CALL_OW 158
// AddComMoveXY ( p1 , 42 , 3 ) ;
8094: LD_VAR 0 2
8098: PPUSH
8099: LD_INT 42
8101: PPUSH
8102: LD_INT 3
8104: PPUSH
8105: CALL_OW 171
// end ; until not IsOk ( p1 ) ;
8109: LD_VAR 0 2
8113: PPUSH
8114: CALL_OW 302
8118: NOT
8119: IFFALSE 8056
// end ; end ; end ;
8121: PPOPN 7
8123: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 8 ] then
8124: LD_VAR 0 1
8128: PPUSH
8129: CALL_OW 255
8133: PUSH
8134: LD_INT 3
8136: PUSH
8137: LD_INT 8
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: IN
8144: IFFALSE 8207
// begin ComMoveXY ( driver , 41 , 2 ) ;
8146: LD_VAR 0 1
8150: PPUSH
8151: LD_INT 41
8153: PPUSH
8154: LD_INT 2
8156: PPUSH
8157: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8161: LD_INT 35
8163: PPUSH
8164: CALL_OW 67
// if IsDead ( driver ) then
8168: LD_VAR 0 1
8172: PPUSH
8173: CALL_OW 301
8177: IFFALSE 8181
// exit ;
8179: GO 8207
// until IsAt ( driver , 41 , 2 ) ;
8181: LD_VAR 0 1
8185: PPUSH
8186: LD_INT 41
8188: PPUSH
8189: LD_INT 2
8191: PPUSH
8192: CALL_OW 307
8196: IFFALSE 8161
// RemoveUnit ( driver ) ;
8198: LD_VAR 0 1
8202: PPUSH
8203: CALL_OW 64
// end ; end ; end_of_file
8207: PPOPN 4
8209: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
8210: LD_INT 0
8212: PPUSH
8213: PPUSH
8214: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
8215: LD_ADDR_VAR 0 1
8219: PUSH
8220: LD_VAR 0 1
8224: PUSH
8225: LD_EXP 1
8229: PUSH
8230: LD_EXP 2
8234: PUSH
8235: LD_EXP 3
8239: PUSH
8240: LD_EXP 4
8244: PUSH
8245: LD_EXP 5
8249: PUSH
8250: LD_EXP 6
8254: PUSH
8255: LD_EXP 7
8259: PUSH
8260: LD_EXP 8
8264: PUSH
8265: LD_EXP 9
8269: PUSH
8270: LD_EXP 10
8274: PUSH
8275: LD_EXP 11
8279: PUSH
8280: LD_EXP 12
8284: PUSH
8285: LD_EXP 13
8289: PUSH
8290: LD_EXP 14
8294: PUSH
8295: LD_EXP 15
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: DIFF
8317: ST_TO_ADDR
// if not characters then
8318: LD_VAR 0 1
8322: NOT
8323: IFFALSE 8327
// exit ;
8325: GO 8406
// speaker := characters [ rand ( 1 , characters ) ] ;
8327: LD_ADDR_VAR 0 6
8331: PUSH
8332: LD_VAR 0 1
8336: PUSH
8337: LD_INT 1
8339: PPUSH
8340: LD_VAR 0 1
8344: PPUSH
8345: CALL_OW 12
8349: ARRAY
8350: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
8351: LD_VAR 0 6
8355: PPUSH
8356: CALL_OW 258
8360: PUSH
8361: LD_INT 1
8363: EQUAL
8364: IFFALSE 8382
// Say ( speaker , dialogMID ) else
8366: LD_VAR 0 6
8370: PPUSH
8371: LD_VAR 0 2
8375: PPUSH
8376: CALL_OW 88
8380: GO 8396
// Say ( speaker , dialogFID ) ;
8382: LD_VAR 0 6
8386: PPUSH
8387: LD_VAR 0 3
8391: PPUSH
8392: CALL_OW 88
// result := speaker ;
8396: LD_ADDR_VAR 0 4
8400: PUSH
8401: LD_VAR 0 6
8405: ST_TO_ADDR
// end ;
8406: LD_VAR 0 4
8410: RET
// export function PrepareDifficulty ; begin
8411: LD_INT 0
8413: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
8414: LD_INT 5
8416: PPUSH
8417: LD_INT 8
8419: PPUSH
8420: LD_INT 2
8422: PPUSH
8423: CALL_OW 322
// if Difficulty = 1 then
8427: LD_OWVAR 67
8431: PUSH
8432: LD_INT 1
8434: EQUAL
8435: IFFALSE 8554
// begin SetTech ( 66 , 8 , state_researched ) ;
8437: LD_INT 66
8439: PPUSH
8440: LD_INT 8
8442: PPUSH
8443: LD_INT 2
8445: PPUSH
8446: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
8450: LD_INT 67
8452: PPUSH
8453: LD_INT 8
8455: PPUSH
8456: LD_INT 0
8458: PPUSH
8459: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8463: LD_INT 68
8465: PPUSH
8466: LD_INT 8
8468: PPUSH
8469: LD_INT 0
8471: PPUSH
8472: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8476: LD_INT 51
8478: PPUSH
8479: LD_INT 8
8481: PPUSH
8482: LD_INT 2
8484: PPUSH
8485: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
8489: LD_INT 52
8491: PPUSH
8492: LD_INT 8
8494: PPUSH
8495: LD_INT 0
8497: PPUSH
8498: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
8502: LD_INT 53
8504: PPUSH
8505: LD_INT 8
8507: PPUSH
8508: LD_INT 0
8510: PPUSH
8511: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8515: LD_INT 60
8517: PPUSH
8518: LD_INT 8
8520: PPUSH
8521: LD_INT 2
8523: PPUSH
8524: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
8528: LD_INT 61
8530: PPUSH
8531: LD_INT 8
8533: PPUSH
8534: LD_INT 0
8536: PPUSH
8537: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8541: LD_INT 62
8543: PPUSH
8544: LD_INT 8
8546: PPUSH
8547: LD_INT 0
8549: PPUSH
8550: CALL_OW 322
// end ; if Difficulty = 2 then
8554: LD_OWVAR 67
8558: PUSH
8559: LD_INT 2
8561: EQUAL
8562: IFFALSE 8681
// begin SetTech ( 66 , 8 , state_researched ) ;
8564: LD_INT 66
8566: PPUSH
8567: LD_INT 8
8569: PPUSH
8570: LD_INT 2
8572: PPUSH
8573: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8577: LD_INT 67
8579: PPUSH
8580: LD_INT 8
8582: PPUSH
8583: LD_INT 2
8585: PPUSH
8586: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8590: LD_INT 68
8592: PPUSH
8593: LD_INT 8
8595: PPUSH
8596: LD_INT 0
8598: PPUSH
8599: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8603: LD_INT 51
8605: PPUSH
8606: LD_INT 8
8608: PPUSH
8609: LD_INT 2
8611: PPUSH
8612: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8616: LD_INT 52
8618: PPUSH
8619: LD_INT 8
8621: PPUSH
8622: LD_INT 2
8624: PPUSH
8625: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8629: LD_INT 53
8631: PPUSH
8632: LD_INT 8
8634: PPUSH
8635: LD_INT 2
8637: PPUSH
8638: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8642: LD_INT 60
8644: PPUSH
8645: LD_INT 8
8647: PPUSH
8648: LD_INT 2
8650: PPUSH
8651: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8655: LD_INT 61
8657: PPUSH
8658: LD_INT 8
8660: PPUSH
8661: LD_INT 2
8663: PPUSH
8664: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8668: LD_INT 62
8670: PPUSH
8671: LD_INT 8
8673: PPUSH
8674: LD_INT 0
8676: PPUSH
8677: CALL_OW 322
// end ; if Difficulty >= 3 then
8681: LD_OWVAR 67
8685: PUSH
8686: LD_INT 3
8688: GREATEREQUAL
8689: IFFALSE 8808
// begin SetTech ( 66 , 8 , state_researched ) ;
8691: LD_INT 66
8693: PPUSH
8694: LD_INT 8
8696: PPUSH
8697: LD_INT 2
8699: PPUSH
8700: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8704: LD_INT 67
8706: PPUSH
8707: LD_INT 8
8709: PPUSH
8710: LD_INT 2
8712: PPUSH
8713: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8717: LD_INT 68
8719: PPUSH
8720: LD_INT 8
8722: PPUSH
8723: LD_INT 0
8725: PPUSH
8726: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8730: LD_INT 51
8732: PPUSH
8733: LD_INT 8
8735: PPUSH
8736: LD_INT 2
8738: PPUSH
8739: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8743: LD_INT 52
8745: PPUSH
8746: LD_INT 8
8748: PPUSH
8749: LD_INT 2
8751: PPUSH
8752: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8756: LD_INT 53
8758: PPUSH
8759: LD_INT 8
8761: PPUSH
8762: LD_INT 2
8764: PPUSH
8765: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8769: LD_INT 60
8771: PPUSH
8772: LD_INT 8
8774: PPUSH
8775: LD_INT 2
8777: PPUSH
8778: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8782: LD_INT 61
8784: PPUSH
8785: LD_INT 8
8787: PPUSH
8788: LD_INT 2
8790: PPUSH
8791: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8795: LD_INT 62
8797: PPUSH
8798: LD_INT 8
8800: PPUSH
8801: LD_INT 0
8803: PPUSH
8804: CALL_OW 322
// end ; end ;
8808: LD_VAR 0 1
8812: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8813: LD_INT 0
8815: PPUSH
8816: PPUSH
// for i in charactersList do
8817: LD_ADDR_VAR 0 4
8821: PUSH
8822: LD_VAR 0 1
8826: PUSH
8827: FOR_IN
8828: IFFALSE 8846
// SaveCharacters ( i , ident ) ;
8830: LD_VAR 0 4
8834: PPUSH
8835: LD_VAR 0 2
8839: PPUSH
8840: CALL_OW 38
8844: GO 8827
8846: POP
8847: POP
// end ; end_of_file
8848: LD_VAR 0 3
8852: RET
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
8853: LD_EXP 38
8857: PUSH
8858: LD_INT 1
8860: EQUAL
8861: IFFALSE 9767
8863: GO 8865
8865: DISABLE
8866: LD_INT 0
8868: PPUSH
8869: PPUSH
8870: PPUSH
// begin m1 := false ;
8871: LD_ADDR_VAR 0 1
8875: PUSH
8876: LD_INT 0
8878: ST_TO_ADDR
// m2 := false ;
8879: LD_ADDR_VAR 0 2
8883: PUSH
8884: LD_INT 0
8886: ST_TO_ADDR
// m3 := false ;
8887: LD_ADDR_VAR 0 3
8891: PUSH
8892: LD_INT 0
8894: ST_TO_ADDR
// DialogueOn ;
8895: CALL_OW 6
// Say ( JMM , D9b-JMM-1 ) ;
8899: LD_EXP 1
8903: PPUSH
8904: LD_STRING D9b-JMM-1
8906: PPUSH
8907: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
8911: LD_EXP 15
8915: PPUSH
8916: LD_STRING D9b-Pow-1
8918: PPUSH
8919: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
8923: LD_EXP 1
8927: PPUSH
8928: LD_STRING D9b-JMM-2
8930: PPUSH
8931: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
8935: LD_EXP 15
8939: PPUSH
8940: LD_STRING D9b-Pow-2
8942: PPUSH
8943: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
8947: LD_EXP 1
8951: PPUSH
8952: LD_STRING D9b-JMM-3
8954: PPUSH
8955: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
8959: LD_EXP 15
8963: PPUSH
8964: LD_STRING D9b-Pow-3
8966: PPUSH
8967: CALL_OW 94
// if tick <= 60 60$00 then
8971: LD_OWVAR 1
8975: PUSH
8976: LD_INT 126000
8978: LESSEQUAL
8979: IFFALSE 8988
// SetAchievement ( ACH_ASPEED_13 ) ;
8981: LD_STRING ACH_ASPEED_13
8983: PPUSH
8984: CALL_OW 543
// if burlakStatus = 1 then
8988: LD_EXP 28
8992: PUSH
8993: LD_INT 1
8995: EQUAL
8996: IFFALSE 9018
// begin m1 := true ;
8998: LD_ADDR_VAR 0 1
9002: PUSH
9003: LD_INT 1
9005: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
9006: LD_STRING Burlak
9008: PPUSH
9009: LD_INT 1
9011: PPUSH
9012: CALL_OW 101
// end else
9016: GO 9029
// begin AddMedal ( Burlak , - 1 ) ;
9018: LD_STRING Burlak
9020: PPUSH
9021: LD_INT 1
9023: NEG
9024: PPUSH
9025: CALL_OW 101
// end ; if IsOk ( Stevens ) then
9029: LD_EXP 2
9033: PPUSH
9034: CALL_OW 302
9038: IFFALSE 9060
// begin m2 := true ;
9040: LD_ADDR_VAR 0 2
9044: PUSH
9045: LD_INT 1
9047: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
9048: LD_STRING Stevens
9050: PPUSH
9051: LD_INT 1
9053: PPUSH
9054: CALL_OW 101
// end else
9058: GO 9071
// begin AddMedal ( Stevens , - 1 ) ;
9060: LD_STRING Stevens
9062: PPUSH
9063: LD_INT 1
9065: NEG
9066: PPUSH
9067: CALL_OW 101
// end ; if radarOnSpot = 1 then
9071: LD_EXP 30
9075: PUSH
9076: LD_INT 1
9078: EQUAL
9079: IFFALSE 9101
// begin m3 := true ;
9081: LD_ADDR_VAR 0 3
9085: PUSH
9086: LD_INT 1
9088: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
9089: LD_STRING Observation
9091: PPUSH
9092: LD_INT 1
9094: PPUSH
9095: CALL_OW 101
// end else
9099: GO 9112
// begin AddMedal ( Observation , - 1 ) ;
9101: LD_STRING Observation
9103: PPUSH
9104: LD_INT 1
9106: NEG
9107: PPUSH
9108: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
9112: LD_VAR 0 1
9116: PUSH
9117: LD_VAR 0 2
9121: AND
9122: PUSH
9123: LD_VAR 0 3
9127: AND
9128: PUSH
9129: LD_OWVAR 67
9133: PUSH
9134: LD_INT 3
9136: GREATEREQUAL
9137: AND
9138: IFFALSE 9150
// SetAchievementEX ( ACH_AMER , 13 ) ;
9140: LD_STRING ACH_AMER
9142: PPUSH
9143: LD_INT 13
9145: PPUSH
9146: CALL_OW 564
// GiveMedals ( MAIN ) ;
9150: LD_STRING MAIN
9152: PPUSH
9153: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
9157: LD_EXP 28
9161: PPUSH
9162: LD_STRING 13_BurlakStatus_1
9164: PPUSH
9165: CALL_OW 39
// if IsLive ( Stevens ) then
9169: LD_EXP 2
9173: PPUSH
9174: CALL_OW 300
9178: IFFALSE 9192
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
9180: LD_INT 1
9182: PPUSH
9183: LD_STRING 13_StevensStatus_1
9185: PPUSH
9186: CALL_OW 39
9190: GO 9202
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
9192: LD_INT 0
9194: PPUSH
9195: LD_STRING 13_StevensStatus_1
9197: PPUSH
9198: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
9202: LD_INT 22
9204: PUSH
9205: LD_INT 1
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PUSH
9212: LD_INT 21
9214: PUSH
9215: LD_INT 1
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PUSH
9222: LD_INT 2
9224: PUSH
9225: LD_INT 25
9227: PUSH
9228: LD_INT 1
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PUSH
9235: LD_INT 25
9237: PUSH
9238: LD_INT 2
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PUSH
9245: LD_INT 25
9247: PUSH
9248: LD_INT 3
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PUSH
9255: LD_INT 25
9257: PUSH
9258: LD_INT 4
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: PUSH
9265: LD_INT 25
9267: PUSH
9268: LD_INT 5
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: PUSH
9275: LD_INT 25
9277: PUSH
9278: LD_INT 8
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: LIST
9298: PPUSH
9299: CALL_OW 69
9303: PPUSH
9304: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
9308: LD_EXP 1
9312: PPUSH
9313: LD_EXP 34
9317: PUSH
9318: LD_STRING JMM
9320: STR
9321: PPUSH
9322: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9326: LD_EXP 8
9330: PPUSH
9331: LD_EXP 34
9335: PUSH
9336: LD_STRING Brown
9338: STR
9339: PPUSH
9340: CALL 8813 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9344: LD_EXP 4
9348: PPUSH
9349: LD_EXP 34
9353: PUSH
9354: LD_STRING Donaldson
9356: STR
9357: PPUSH
9358: CALL 8813 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9362: LD_EXP 5
9366: PPUSH
9367: LD_EXP 34
9371: PUSH
9372: LD_STRING Bobby
9374: STR
9375: PPUSH
9376: CALL 8813 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
9380: LD_EXP 6
9384: PPUSH
9385: LD_EXP 34
9389: PUSH
9390: LD_STRING Cyrus
9392: STR
9393: PPUSH
9394: CALL 8813 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
9398: LD_EXP 3
9402: PPUSH
9403: LD_EXP 34
9407: PUSH
9408: LD_STRING Lisa
9410: STR
9411: PPUSH
9412: CALL 8813 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
9416: LD_EXP 13
9420: PPUSH
9421: LD_EXP 34
9425: PUSH
9426: LD_STRING Frank
9428: STR
9429: PPUSH
9430: CALL 8813 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
9434: LD_EXP 14
9438: PPUSH
9439: LD_EXP 34
9443: PUSH
9444: LD_STRING Kikuchi
9446: STR
9447: PPUSH
9448: CALL 8813 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
9452: LD_EXP 10
9456: PPUSH
9457: LD_EXP 34
9461: PUSH
9462: LD_STRING Houten
9464: STR
9465: PPUSH
9466: CALL 8813 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
9470: LD_EXP 12
9474: PPUSH
9475: LD_EXP 34
9479: PUSH
9480: LD_STRING Gary
9482: STR
9483: PPUSH
9484: CALL 8813 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
9488: LD_EXP 11
9492: PPUSH
9493: LD_EXP 34
9497: PUSH
9498: LD_STRING Cornell
9500: STR
9501: PPUSH
9502: CALL 8813 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
9506: LD_EXP 7
9510: PPUSH
9511: LD_EXP 34
9515: PUSH
9516: LD_STRING Denis
9518: STR
9519: PPUSH
9520: CALL 8813 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
9524: LD_EXP 9
9528: PPUSH
9529: LD_EXP 34
9533: PUSH
9534: LD_STRING Gladstone
9536: STR
9537: PPUSH
9538: CALL 8813 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
9542: LD_EXP 2
9546: PPUSH
9547: LD_EXP 34
9551: PUSH
9552: LD_STRING Stevens
9554: STR
9555: PPUSH
9556: CALL 8813 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
9560: LD_INT 50
9562: PUSH
9563: EMPTY
9564: LIST
9565: PUSH
9566: LD_INT 22
9568: PUSH
9569: LD_INT 1
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: LD_INT 21
9578: PUSH
9579: LD_INT 1
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 2
9588: PUSH
9589: LD_INT 25
9591: PUSH
9592: LD_INT 1
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PUSH
9599: LD_INT 25
9601: PUSH
9602: LD_INT 2
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: LD_INT 25
9611: PUSH
9612: LD_INT 3
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PUSH
9619: LD_INT 25
9621: PUSH
9622: LD_INT 4
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PUSH
9629: LD_INT 25
9631: PUSH
9632: LD_INT 5
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PUSH
9639: LD_INT 25
9641: PUSH
9642: LD_INT 8
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: PPUSH
9664: CALL_OW 69
9668: PUSH
9669: LD_EXP 1
9673: PUSH
9674: LD_EXP 8
9678: PUSH
9679: LD_EXP 4
9683: PUSH
9684: LD_EXP 5
9688: PUSH
9689: LD_EXP 6
9693: PUSH
9694: LD_EXP 3
9698: PUSH
9699: LD_EXP 13
9703: PUSH
9704: LD_EXP 9
9708: PUSH
9709: LD_EXP 14
9713: PUSH
9714: LD_EXP 7
9718: PUSH
9719: LD_EXP 10
9723: PUSH
9724: LD_EXP 12
9728: PUSH
9729: LD_EXP 11
9733: PUSH
9734: LD_EXP 2
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: DIFF
9755: PPUSH
9756: LD_STRING 13_other_survivors
9758: PPUSH
9759: CALL_OW 38
// YouWin ;
9763: CALL_OW 103
// end ; end_of_file
9767: PPOPN 3
9769: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) and GetTech ( tech_SibFiss , 1 ) = state_enabled do var i , tmp , yourSiberite ;
9770: LD_EXP 32
9774: PUSH
9775: LD_INT 2
9777: EQUAL
9778: PUSH
9779: LD_INT 34
9781: PUSH
9782: LD_INT 8
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PPUSH
9789: CALL_OW 69
9793: NOT
9794: AND
9795: PUSH
9796: LD_INT 25
9798: PPUSH
9799: LD_INT 1
9801: PPUSH
9802: CALL_OW 321
9806: PUSH
9807: LD_INT 1
9809: EQUAL
9810: AND
9811: IFFALSE 9947
9813: GO 9815
9815: DISABLE
9816: LD_INT 0
9818: PPUSH
9819: PPUSH
9820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9821: LD_ADDR_VAR 0 2
9825: PUSH
9826: LD_INT 22
9828: PUSH
9829: LD_INT 1
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: PUSH
9836: LD_INT 21
9838: PUSH
9839: LD_INT 3
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 2
9848: PUSH
9849: LD_INT 30
9851: PUSH
9852: LD_INT 0
9854: PUSH
9855: EMPTY
9856: LIST
9857: LIST
9858: PUSH
9859: LD_INT 30
9861: PUSH
9862: LD_INT 1
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: LIST
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: LIST
9878: PPUSH
9879: CALL_OW 69
9883: ST_TO_ADDR
// for i in tmp do
9884: LD_ADDR_VAR 0 1
9888: PUSH
9889: LD_VAR 0 2
9893: PUSH
9894: FOR_IN
9895: IFFALSE 9928
// yourSiberite := yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
9897: LD_ADDR_VAR 0 3
9901: PUSH
9902: LD_VAR 0 3
9906: PUSH
9907: LD_VAR 0 1
9911: PPUSH
9912: CALL_OW 274
9916: PPUSH
9917: LD_INT 3
9919: PPUSH
9920: CALL_OW 275
9924: PLUS
9925: ST_TO_ADDR
9926: GO 9894
9928: POP
9929: POP
// if yourSiberite < 60 then
9930: LD_VAR 0 3
9934: PUSH
9935: LD_INT 60
9937: LESS
9938: IFFALSE 9947
// YouLost ( siberite ) ;
9940: LD_STRING siberite
9942: PPUSH
9943: CALL_OW 104
// end ; end_of_file
9947: PPOPN 3
9949: END
// every 8 8$00 + 8 8$00 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
9950: LD_INT 22
9952: PUSH
9953: LD_INT 8
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: LD_INT 21
9962: PUSH
9963: LD_INT 1
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PPUSH
9974: CALL_OW 69
9978: PUSH
9979: LD_INT 6
9981: LESS
9982: IFFALSE 9992
9984: GO 9986
9986: DISABLE
// begin enable ;
9987: ENABLE
// PrepareArabianAttack ;
9988: CALL 4062 0 0
// end ;
9992: END
// every 0 0$30 trigger eventVar1 = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
9993: LD_EXP 35
9997: PUSH
9998: LD_INT 1
10000: EQUAL
10001: PUSH
10002: LD_INT 22
10004: PUSH
10005: LD_INT 8
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: LD_INT 21
10014: PUSH
10015: LD_INT 1
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PPUSH
10026: CALL_OW 69
10030: PUSH
10031: LD_INT 6
10033: LESS
10034: AND
10035: IFFALSE 10062
10037: GO 10039
10039: DISABLE
// begin wait ( 4 4$00 ) ;
10040: LD_INT 8400
10042: PPUSH
10043: CALL_OW 67
// PrepareRussianAttack ;
10047: CALL 3285 0 0
// wait ( 12 12$00 ) ;
10051: LD_INT 25200
10053: PPUSH
10054: CALL_OW 67
// PrepareRussianAttack ;
10058: CALL 3285 0 0
// end ;
10062: END
// export function ArabianAttack ; var i , tmp , path , path2 , vehicles , infantry , units , apes ; begin
10063: LD_INT 0
10065: PPUSH
10066: PPUSH
10067: PPUSH
10068: PPUSH
10069: PPUSH
10070: PPUSH
10071: PPUSH
10072: PPUSH
10073: PPUSH
// units := FilterAllUnits ( [ [ f_side , 8 ] , [ f_tag , 10 ] ] ) ;
10074: LD_ADDR_VAR 0 8
10078: PUSH
10079: LD_INT 22
10081: PUSH
10082: LD_INT 8
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: PUSH
10089: LD_INT 120
10091: PUSH
10092: LD_INT 10
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PPUSH
10103: CALL_OW 69
10107: ST_TO_ADDR
// if not units then
10108: LD_VAR 0 8
10112: NOT
10113: IFFALSE 10117
// exit ;
10115: GO 10423
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10117: LD_ADDR_VAR 0 4
10121: PUSH
10122: LD_INT 80
10124: PUSH
10125: LD_INT 60
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PUSH
10132: LD_INT 54
10134: PUSH
10135: LD_INT 57
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PUSH
10142: LD_INT 55
10144: PUSH
10145: LD_INT 74
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: PUSH
10152: LD_INT 61
10154: PUSH
10155: LD_INT 85
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: ST_TO_ADDR
// path2 := [ [ 93 , 99 ] , [ 85 , 99 ] ] ;
10168: LD_ADDR_VAR 0 5
10172: PUSH
10173: LD_INT 93
10175: PUSH
10176: LD_INT 99
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: PUSH
10183: LD_INT 85
10185: PUSH
10186: LD_INT 99
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10197: LD_INT 35
10199: PPUSH
10200: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10204: LD_ADDR_VAR 0 6
10208: PUSH
10209: LD_VAR 0 8
10213: PPUSH
10214: LD_INT 21
10216: PUSH
10217: LD_INT 2
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PPUSH
10224: CALL_OW 72
10228: ST_TO_ADDR
// if vehicles then
10229: LD_VAR 0 6
10233: IFFALSE 10249
// AgressiveMove ( vehicles , path ) ;
10235: LD_VAR 0 6
10239: PPUSH
10240: LD_VAR 0 4
10244: PPUSH
10245: CALL 71057 0 2
// infantry := UnitFilter ( units , [ [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10249: LD_ADDR_VAR 0 7
10253: PUSH
10254: LD_VAR 0 8
10258: PPUSH
10259: LD_INT 23
10261: PUSH
10262: LD_INT 2
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PUSH
10269: LD_INT 21
10271: PUSH
10272: LD_INT 1
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PPUSH
10283: CALL_OW 72
10287: ST_TO_ADDR
// if infantry then
10288: LD_VAR 0 7
10292: IFFALSE 10308
// AgressiveMove ( infantry , path2 ) ;
10294: LD_VAR 0 7
10298: PPUSH
10299: LD_VAR 0 5
10303: PPUSH
10304: CALL 71057 0 2
// apes := UnitFilter ( units , [ [ f_nation , 0 ] , [ f_type , unit_human ] ] ) ;
10308: LD_ADDR_VAR 0 9
10312: PUSH
10313: LD_VAR 0 8
10317: PPUSH
10318: LD_INT 23
10320: PUSH
10321: LD_INT 0
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: LD_INT 21
10330: PUSH
10331: LD_INT 1
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: PPUSH
10342: CALL_OW 72
10346: ST_TO_ADDR
// if apes then
10347: LD_VAR 0 9
10351: IFFALSE 10395
// ComAttackUnit ( apes [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , apes [ 1 ] ) ) ;
10353: LD_VAR 0 9
10357: PUSH
10358: LD_INT 1
10360: ARRAY
10361: PPUSH
10362: LD_INT 22
10364: PUSH
10365: LD_INT 1
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PPUSH
10372: CALL_OW 69
10376: PPUSH
10377: LD_VAR 0 9
10381: PUSH
10382: LD_INT 1
10384: ARRAY
10385: PPUSH
10386: CALL_OW 74
10390: PPUSH
10391: CALL_OW 115
// units := UnitFilter ( units , [ f_ok ] ) ;
10395: LD_ADDR_VAR 0 8
10399: PUSH
10400: LD_VAR 0 8
10404: PPUSH
10405: LD_INT 50
10407: PUSH
10408: EMPTY
10409: LIST
10410: PPUSH
10411: CALL_OW 72
10415: ST_TO_ADDR
// until not units ;
10416: LD_VAR 0 8
10420: NOT
10421: IFFALSE 10197
// end ;
10423: LD_VAR 0 1
10427: RET
// export function RussianAttack ; var i , tmp , path , vehicles , units ; begin
10428: LD_INT 0
10430: PPUSH
10431: PPUSH
10432: PPUSH
10433: PPUSH
10434: PPUSH
10435: PPUSH
// units := FilterAllUnits ( [ [ f_side , 3 ] , [ f_tag , 10 ] ] ) ;
10436: LD_ADDR_VAR 0 6
10440: PUSH
10441: LD_INT 22
10443: PUSH
10444: LD_INT 3
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 120
10453: PUSH
10454: LD_INT 10
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PPUSH
10465: CALL_OW 69
10469: ST_TO_ADDR
// if not units then
10470: LD_VAR 0 6
10474: NOT
10475: IFFALSE 10479
// exit ;
10477: GO 10610
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10479: LD_ADDR_VAR 0 4
10483: PUSH
10484: LD_INT 80
10486: PUSH
10487: LD_INT 60
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 54
10496: PUSH
10497: LD_INT 57
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: LD_INT 55
10506: PUSH
10507: LD_INT 74
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PUSH
10514: LD_INT 61
10516: PUSH
10517: LD_INT 85
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10530: LD_INT 35
10532: PPUSH
10533: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10537: LD_ADDR_VAR 0 5
10541: PUSH
10542: LD_VAR 0 6
10546: PPUSH
10547: LD_INT 21
10549: PUSH
10550: LD_INT 2
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PPUSH
10557: CALL_OW 72
10561: ST_TO_ADDR
// if vehicles then
10562: LD_VAR 0 5
10566: IFFALSE 10582
// AgressiveMove ( vehicles , path ) ;
10568: LD_VAR 0 5
10572: PPUSH
10573: LD_VAR 0 4
10577: PPUSH
10578: CALL 71057 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10582: LD_ADDR_VAR 0 6
10586: PUSH
10587: LD_VAR 0 6
10591: PPUSH
10592: LD_INT 50
10594: PUSH
10595: EMPTY
10596: LIST
10597: PPUSH
10598: CALL_OW 72
10602: ST_TO_ADDR
// until not units ;
10603: LD_VAR 0 6
10607: NOT
10608: IFFALSE 10530
// end ; end_of_file
10610: LD_VAR 0 1
10614: RET
// every 0 0$01 do var i , cratesSpawned ;
10615: GO 10617
10617: DISABLE
10618: LD_INT 0
10620: PPUSH
10621: PPUSH
// begin cratesSpawned := 0 ;
10622: LD_ADDR_VAR 0 2
10626: PUSH
10627: LD_INT 0
10629: ST_TO_ADDR
// for i := 1 to 6 do
10630: LD_ADDR_VAR 0 1
10634: PUSH
10635: DOUBLE
10636: LD_INT 1
10638: DEC
10639: ST_TO_ADDR
10640: LD_INT 6
10642: PUSH
10643: FOR_TO
10644: IFFALSE 10669
// CreateCratesArea ( rand ( 2 , 5 ) , StartCratesArea , false ) ;
10646: LD_INT 2
10648: PPUSH
10649: LD_INT 5
10651: PPUSH
10652: CALL_OW 12
10656: PPUSH
10657: LD_INT 17
10659: PPUSH
10660: LD_INT 0
10662: PPUSH
10663: CALL_OW 55
10667: GO 10643
10669: POP
10670: POP
// wait ( 0 0$20 ) ;
10671: LD_INT 700
10673: PPUSH
10674: CALL_OW 67
// repeat wait ( 0 0$08 ) ;
10678: LD_INT 280
10680: PPUSH
10681: CALL_OW 67
// if cratesSpawned < 12 then
10685: LD_VAR 0 2
10689: PUSH
10690: LD_INT 12
10692: LESS
10693: IFFALSE 10745
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
10695: LD_INT 105
10697: PPUSH
10698: LD_INT 350
10700: PPUSH
10701: CALL_OW 12
10705: PPUSH
10706: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10710: LD_INT 3
10712: PPUSH
10713: LD_INT 5
10715: PPUSH
10716: CALL_OW 12
10720: PPUSH
10721: LD_INT 13
10723: PPUSH
10724: LD_INT 1
10726: PPUSH
10727: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10731: LD_ADDR_VAR 0 2
10735: PUSH
10736: LD_VAR 0 2
10740: PUSH
10741: LD_INT 1
10743: PLUS
10744: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
10745: LD_VAR 0 2
10749: PUSH
10750: LD_INT 12
10752: GREATEREQUAL
10753: PUSH
10754: LD_VAR 0 2
10758: PUSH
10759: LD_INT 32
10761: LESS
10762: AND
10763: IFFALSE 10815
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
10765: LD_INT 420
10767: PPUSH
10768: LD_INT 700
10770: PPUSH
10771: CALL_OW 12
10775: PPUSH
10776: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10780: LD_INT 3
10782: PPUSH
10783: LD_INT 5
10785: PPUSH
10786: CALL_OW 12
10790: PPUSH
10791: LD_INT 13
10793: PPUSH
10794: LD_INT 1
10796: PPUSH
10797: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10801: LD_ADDR_VAR 0 2
10805: PUSH
10806: LD_VAR 0 2
10810: PUSH
10811: LD_INT 1
10813: PLUS
10814: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
10815: LD_VAR 0 2
10819: PUSH
10820: LD_INT 32
10822: GREATEREQUAL
10823: IFFALSE 10897
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10825: LD_INT 13
10827: PPUSH
10828: CALL_OW 435
10832: PUSH
10833: LD_INT 14
10835: LESS
10836: IFFALSE 10847
// wait ( 0 0$20 ) else
10838: LD_INT 700
10840: PPUSH
10841: CALL_OW 67
10845: GO 10862
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
10847: LD_INT 1750
10849: PPUSH
10850: LD_INT 3150
10852: PPUSH
10853: CALL_OW 12
10857: PPUSH
10858: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
10862: LD_INT 2
10864: PPUSH
10865: LD_INT 5
10867: PPUSH
10868: CALL_OW 12
10872: PPUSH
10873: LD_INT 13
10875: PPUSH
10876: LD_INT 1
10878: PPUSH
10879: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10883: LD_ADDR_VAR 0 2
10887: PUSH
10888: LD_VAR 0 2
10892: PUSH
10893: LD_INT 1
10895: PLUS
10896: ST_TO_ADDR
// end ; if cratesSpawned >= 120 then
10897: LD_VAR 0 2
10901: PUSH
10902: LD_INT 120
10904: GREATEREQUAL
10905: IFFALSE 10979
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10907: LD_INT 13
10909: PPUSH
10910: CALL_OW 435
10914: PUSH
10915: LD_INT 14
10917: LESS
10918: IFFALSE 10929
// wait ( 0 0$40 ) else
10920: LD_INT 1400
10922: PPUSH
10923: CALL_OW 67
10927: GO 10944
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
10929: LD_INT 2450
10931: PPUSH
10932: LD_INT 3850
10934: PPUSH
10935: CALL_OW 12
10939: PPUSH
10940: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
10944: LD_INT 1
10946: PPUSH
10947: LD_INT 5
10949: PPUSH
10950: CALL_OW 12
10954: PPUSH
10955: LD_INT 13
10957: PPUSH
10958: LD_INT 1
10960: PPUSH
10961: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10965: LD_ADDR_VAR 0 2
10969: PUSH
10970: LD_VAR 0 2
10974: PUSH
10975: LD_INT 1
10977: PLUS
10978: ST_TO_ADDR
// end ; until false ;
10979: LD_INT 0
10981: IFFALSE 10678
// end ; end_of_file
10983: PPOPN 2
10985: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont ; export function InitGlobalVariables ; begin
10986: LD_INT 0
10988: PPUSH
// ar_miner := 81 ;
10989: LD_ADDR_EXP 53
10993: PUSH
10994: LD_INT 81
10996: ST_TO_ADDR
// ar_crane := 88 ;
10997: LD_ADDR_EXP 52
11001: PUSH
11002: LD_INT 88
11004: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11005: LD_ADDR_EXP 47
11009: PUSH
11010: LD_INT 89
11012: ST_TO_ADDR
// us_hack := 99 ;
11013: LD_ADDR_EXP 48
11017: PUSH
11018: LD_INT 99
11020: ST_TO_ADDR
// us_artillery := 97 ;
11021: LD_ADDR_EXP 49
11025: PUSH
11026: LD_INT 97
11028: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11029: LD_ADDR_EXP 50
11033: PUSH
11034: LD_INT 91
11036: ST_TO_ADDR
// ar_mortar := 92 ;
11037: LD_ADDR_EXP 51
11041: PUSH
11042: LD_INT 92
11044: ST_TO_ADDR
// ru_flamethrower := 93 ;
11045: LD_ADDR_EXP 54
11049: PUSH
11050: LD_INT 93
11052: ST_TO_ADDR
// ru_radar := 98 ;
11053: LD_ADDR_EXP 46
11057: PUSH
11058: LD_INT 98
11060: ST_TO_ADDR
// tech_Artillery := 80 ;
11061: LD_ADDR_EXP 55
11065: PUSH
11066: LD_INT 80
11068: ST_TO_ADDR
// tech_RadMat := 81 ;
11069: LD_ADDR_EXP 56
11073: PUSH
11074: LD_INT 81
11076: ST_TO_ADDR
// tech_BasicTools := 82 ;
11077: LD_ADDR_EXP 57
11081: PUSH
11082: LD_INT 82
11084: ST_TO_ADDR
// tech_Cargo := 83 ;
11085: LD_ADDR_EXP 58
11089: PUSH
11090: LD_INT 83
11092: ST_TO_ADDR
// tech_Track := 84 ;
11093: LD_ADDR_EXP 59
11097: PUSH
11098: LD_INT 84
11100: ST_TO_ADDR
// tech_Crane := 85 ;
11101: LD_ADDR_EXP 60
11105: PUSH
11106: LD_INT 85
11108: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11109: LD_ADDR_EXP 61
11113: PUSH
11114: LD_INT 86
11116: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11117: LD_ADDR_EXP 62
11121: PUSH
11122: LD_INT 87
11124: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
11125: LD_ADDR_EXP 63
11129: PUSH
11130: LD_INT 88
11132: ST_TO_ADDR
// class_mastodont := 31 ;
11133: LD_ADDR_EXP 64
11137: PUSH
11138: LD_INT 31
11140: ST_TO_ADDR
// end ;
11141: LD_VAR 0 1
11145: RET
// every 1 do
11146: GO 11148
11148: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11149: CALL 10986 0 0
11153: END
// every 0 0$1 do
11154: GO 11156
11156: DISABLE
// begin enable ;
11157: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11158: LD_STRING updateTimer(
11160: PUSH
11161: LD_OWVAR 1
11165: STR
11166: PUSH
11167: LD_STRING );
11169: STR
11170: PPUSH
11171: CALL_OW 559
// end ;
11175: END
// export function SOS_MapStart ( ) ; begin
11176: LD_INT 0
11178: PPUSH
// if streamModeActive then
11179: LD_EXP 65
11183: IFFALSE 11192
// DefineStreamItems ( true ) ;
11185: LD_INT 1
11187: PPUSH
11188: CALL 12846 0 1
// UpdateFactoryWaypoints ( ) ;
11192: CALL 25707 0 0
// UpdateWarhouseGatheringPoints ( ) ;
11196: CALL 25960 0 0
// end ;
11200: LD_VAR 0 1
11204: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11205: LD_INT 0
11207: PPUSH
// if p2 = 100 then
11208: LD_VAR 0 2
11212: PUSH
11213: LD_INT 100
11215: EQUAL
11216: IFFALSE 12219
// begin if not StreamModeActive then
11218: LD_EXP 65
11222: NOT
11223: IFFALSE 11233
// StreamModeActive := true ;
11225: LD_ADDR_EXP 65
11229: PUSH
11230: LD_INT 1
11232: ST_TO_ADDR
// if p3 = 0 then
11233: LD_VAR 0 3
11237: PUSH
11238: LD_INT 0
11240: EQUAL
11241: IFFALSE 11247
// InitStreamMode ;
11243: CALL 12382 0 0
// if p3 = 1 then
11247: LD_VAR 0 3
11251: PUSH
11252: LD_INT 1
11254: EQUAL
11255: IFFALSE 11265
// sRocket := true ;
11257: LD_ADDR_EXP 70
11261: PUSH
11262: LD_INT 1
11264: ST_TO_ADDR
// if p3 = 2 then
11265: LD_VAR 0 3
11269: PUSH
11270: LD_INT 2
11272: EQUAL
11273: IFFALSE 11283
// sSpeed := true ;
11275: LD_ADDR_EXP 69
11279: PUSH
11280: LD_INT 1
11282: ST_TO_ADDR
// if p3 = 3 then
11283: LD_VAR 0 3
11287: PUSH
11288: LD_INT 3
11290: EQUAL
11291: IFFALSE 11301
// sEngine := true ;
11293: LD_ADDR_EXP 71
11297: PUSH
11298: LD_INT 1
11300: ST_TO_ADDR
// if p3 = 4 then
11301: LD_VAR 0 3
11305: PUSH
11306: LD_INT 4
11308: EQUAL
11309: IFFALSE 11319
// sSpec := true ;
11311: LD_ADDR_EXP 68
11315: PUSH
11316: LD_INT 1
11318: ST_TO_ADDR
// if p3 = 5 then
11319: LD_VAR 0 3
11323: PUSH
11324: LD_INT 5
11326: EQUAL
11327: IFFALSE 11337
// sLevel := true ;
11329: LD_ADDR_EXP 72
11333: PUSH
11334: LD_INT 1
11336: ST_TO_ADDR
// if p3 = 6 then
11337: LD_VAR 0 3
11341: PUSH
11342: LD_INT 6
11344: EQUAL
11345: IFFALSE 11355
// sArmoury := true ;
11347: LD_ADDR_EXP 73
11351: PUSH
11352: LD_INT 1
11354: ST_TO_ADDR
// if p3 = 7 then
11355: LD_VAR 0 3
11359: PUSH
11360: LD_INT 7
11362: EQUAL
11363: IFFALSE 11373
// sRadar := true ;
11365: LD_ADDR_EXP 74
11369: PUSH
11370: LD_INT 1
11372: ST_TO_ADDR
// if p3 = 8 then
11373: LD_VAR 0 3
11377: PUSH
11378: LD_INT 8
11380: EQUAL
11381: IFFALSE 11391
// sBunker := true ;
11383: LD_ADDR_EXP 75
11387: PUSH
11388: LD_INT 1
11390: ST_TO_ADDR
// if p3 = 9 then
11391: LD_VAR 0 3
11395: PUSH
11396: LD_INT 9
11398: EQUAL
11399: IFFALSE 11409
// sHack := true ;
11401: LD_ADDR_EXP 76
11405: PUSH
11406: LD_INT 1
11408: ST_TO_ADDR
// if p3 = 10 then
11409: LD_VAR 0 3
11413: PUSH
11414: LD_INT 10
11416: EQUAL
11417: IFFALSE 11427
// sFire := true ;
11419: LD_ADDR_EXP 77
11423: PUSH
11424: LD_INT 1
11426: ST_TO_ADDR
// if p3 = 11 then
11427: LD_VAR 0 3
11431: PUSH
11432: LD_INT 11
11434: EQUAL
11435: IFFALSE 11445
// sRefresh := true ;
11437: LD_ADDR_EXP 78
11441: PUSH
11442: LD_INT 1
11444: ST_TO_ADDR
// if p3 = 12 then
11445: LD_VAR 0 3
11449: PUSH
11450: LD_INT 12
11452: EQUAL
11453: IFFALSE 11463
// sExp := true ;
11455: LD_ADDR_EXP 79
11459: PUSH
11460: LD_INT 1
11462: ST_TO_ADDR
// if p3 = 13 then
11463: LD_VAR 0 3
11467: PUSH
11468: LD_INT 13
11470: EQUAL
11471: IFFALSE 11481
// sDepot := true ;
11473: LD_ADDR_EXP 80
11477: PUSH
11478: LD_INT 1
11480: ST_TO_ADDR
// if p3 = 14 then
11481: LD_VAR 0 3
11485: PUSH
11486: LD_INT 14
11488: EQUAL
11489: IFFALSE 11499
// sFlag := true ;
11491: LD_ADDR_EXP 81
11495: PUSH
11496: LD_INT 1
11498: ST_TO_ADDR
// if p3 = 15 then
11499: LD_VAR 0 3
11503: PUSH
11504: LD_INT 15
11506: EQUAL
11507: IFFALSE 11517
// sKamikadze := true ;
11509: LD_ADDR_EXP 89
11513: PUSH
11514: LD_INT 1
11516: ST_TO_ADDR
// if p3 = 16 then
11517: LD_VAR 0 3
11521: PUSH
11522: LD_INT 16
11524: EQUAL
11525: IFFALSE 11535
// sTroll := true ;
11527: LD_ADDR_EXP 90
11531: PUSH
11532: LD_INT 1
11534: ST_TO_ADDR
// if p3 = 17 then
11535: LD_VAR 0 3
11539: PUSH
11540: LD_INT 17
11542: EQUAL
11543: IFFALSE 11553
// sSlow := true ;
11545: LD_ADDR_EXP 91
11549: PUSH
11550: LD_INT 1
11552: ST_TO_ADDR
// if p3 = 18 then
11553: LD_VAR 0 3
11557: PUSH
11558: LD_INT 18
11560: EQUAL
11561: IFFALSE 11571
// sLack := true ;
11563: LD_ADDR_EXP 92
11567: PUSH
11568: LD_INT 1
11570: ST_TO_ADDR
// if p3 = 19 then
11571: LD_VAR 0 3
11575: PUSH
11576: LD_INT 19
11578: EQUAL
11579: IFFALSE 11589
// sTank := true ;
11581: LD_ADDR_EXP 94
11585: PUSH
11586: LD_INT 1
11588: ST_TO_ADDR
// if p3 = 20 then
11589: LD_VAR 0 3
11593: PUSH
11594: LD_INT 20
11596: EQUAL
11597: IFFALSE 11607
// sRemote := true ;
11599: LD_ADDR_EXP 95
11603: PUSH
11604: LD_INT 1
11606: ST_TO_ADDR
// if p3 = 21 then
11607: LD_VAR 0 3
11611: PUSH
11612: LD_INT 21
11614: EQUAL
11615: IFFALSE 11625
// sPowell := true ;
11617: LD_ADDR_EXP 96
11621: PUSH
11622: LD_INT 1
11624: ST_TO_ADDR
// if p3 = 22 then
11625: LD_VAR 0 3
11629: PUSH
11630: LD_INT 22
11632: EQUAL
11633: IFFALSE 11643
// sTeleport := true ;
11635: LD_ADDR_EXP 99
11639: PUSH
11640: LD_INT 1
11642: ST_TO_ADDR
// if p3 = 23 then
11643: LD_VAR 0 3
11647: PUSH
11648: LD_INT 23
11650: EQUAL
11651: IFFALSE 11661
// sOilTower := true ;
11653: LD_ADDR_EXP 101
11657: PUSH
11658: LD_INT 1
11660: ST_TO_ADDR
// if p3 = 24 then
11661: LD_VAR 0 3
11665: PUSH
11666: LD_INT 24
11668: EQUAL
11669: IFFALSE 11679
// sShovel := true ;
11671: LD_ADDR_EXP 102
11675: PUSH
11676: LD_INT 1
11678: ST_TO_ADDR
// if p3 = 25 then
11679: LD_VAR 0 3
11683: PUSH
11684: LD_INT 25
11686: EQUAL
11687: IFFALSE 11697
// sSheik := true ;
11689: LD_ADDR_EXP 103
11693: PUSH
11694: LD_INT 1
11696: ST_TO_ADDR
// if p3 = 26 then
11697: LD_VAR 0 3
11701: PUSH
11702: LD_INT 26
11704: EQUAL
11705: IFFALSE 11715
// sEarthquake := true ;
11707: LD_ADDR_EXP 105
11711: PUSH
11712: LD_INT 1
11714: ST_TO_ADDR
// if p3 = 27 then
11715: LD_VAR 0 3
11719: PUSH
11720: LD_INT 27
11722: EQUAL
11723: IFFALSE 11733
// sAI := true ;
11725: LD_ADDR_EXP 106
11729: PUSH
11730: LD_INT 1
11732: ST_TO_ADDR
// if p3 = 28 then
11733: LD_VAR 0 3
11737: PUSH
11738: LD_INT 28
11740: EQUAL
11741: IFFALSE 11751
// sCargo := true ;
11743: LD_ADDR_EXP 109
11747: PUSH
11748: LD_INT 1
11750: ST_TO_ADDR
// if p3 = 29 then
11751: LD_VAR 0 3
11755: PUSH
11756: LD_INT 29
11758: EQUAL
11759: IFFALSE 11769
// sDLaser := true ;
11761: LD_ADDR_EXP 110
11765: PUSH
11766: LD_INT 1
11768: ST_TO_ADDR
// if p3 = 30 then
11769: LD_VAR 0 3
11773: PUSH
11774: LD_INT 30
11776: EQUAL
11777: IFFALSE 11787
// sExchange := true ;
11779: LD_ADDR_EXP 111
11783: PUSH
11784: LD_INT 1
11786: ST_TO_ADDR
// if p3 = 31 then
11787: LD_VAR 0 3
11791: PUSH
11792: LD_INT 31
11794: EQUAL
11795: IFFALSE 11805
// sFac := true ;
11797: LD_ADDR_EXP 112
11801: PUSH
11802: LD_INT 1
11804: ST_TO_ADDR
// if p3 = 32 then
11805: LD_VAR 0 3
11809: PUSH
11810: LD_INT 32
11812: EQUAL
11813: IFFALSE 11823
// sPower := true ;
11815: LD_ADDR_EXP 113
11819: PUSH
11820: LD_INT 1
11822: ST_TO_ADDR
// if p3 = 33 then
11823: LD_VAR 0 3
11827: PUSH
11828: LD_INT 33
11830: EQUAL
11831: IFFALSE 11841
// sRandom := true ;
11833: LD_ADDR_EXP 114
11837: PUSH
11838: LD_INT 1
11840: ST_TO_ADDR
// if p3 = 34 then
11841: LD_VAR 0 3
11845: PUSH
11846: LD_INT 34
11848: EQUAL
11849: IFFALSE 11859
// sShield := true ;
11851: LD_ADDR_EXP 115
11855: PUSH
11856: LD_INT 1
11858: ST_TO_ADDR
// if p3 = 35 then
11859: LD_VAR 0 3
11863: PUSH
11864: LD_INT 35
11866: EQUAL
11867: IFFALSE 11877
// sTime := true ;
11869: LD_ADDR_EXP 116
11873: PUSH
11874: LD_INT 1
11876: ST_TO_ADDR
// if p3 = 36 then
11877: LD_VAR 0 3
11881: PUSH
11882: LD_INT 36
11884: EQUAL
11885: IFFALSE 11895
// sTools := true ;
11887: LD_ADDR_EXP 117
11891: PUSH
11892: LD_INT 1
11894: ST_TO_ADDR
// if p3 = 101 then
11895: LD_VAR 0 3
11899: PUSH
11900: LD_INT 101
11902: EQUAL
11903: IFFALSE 11913
// sSold := true ;
11905: LD_ADDR_EXP 82
11909: PUSH
11910: LD_INT 1
11912: ST_TO_ADDR
// if p3 = 102 then
11913: LD_VAR 0 3
11917: PUSH
11918: LD_INT 102
11920: EQUAL
11921: IFFALSE 11931
// sDiff := true ;
11923: LD_ADDR_EXP 83
11927: PUSH
11928: LD_INT 1
11930: ST_TO_ADDR
// if p3 = 103 then
11931: LD_VAR 0 3
11935: PUSH
11936: LD_INT 103
11938: EQUAL
11939: IFFALSE 11949
// sFog := true ;
11941: LD_ADDR_EXP 86
11945: PUSH
11946: LD_INT 1
11948: ST_TO_ADDR
// if p3 = 104 then
11949: LD_VAR 0 3
11953: PUSH
11954: LD_INT 104
11956: EQUAL
11957: IFFALSE 11967
// sReset := true ;
11959: LD_ADDR_EXP 87
11963: PUSH
11964: LD_INT 1
11966: ST_TO_ADDR
// if p3 = 105 then
11967: LD_VAR 0 3
11971: PUSH
11972: LD_INT 105
11974: EQUAL
11975: IFFALSE 11985
// sSun := true ;
11977: LD_ADDR_EXP 88
11981: PUSH
11982: LD_INT 1
11984: ST_TO_ADDR
// if p3 = 106 then
11985: LD_VAR 0 3
11989: PUSH
11990: LD_INT 106
11992: EQUAL
11993: IFFALSE 12003
// sTiger := true ;
11995: LD_ADDR_EXP 84
11999: PUSH
12000: LD_INT 1
12002: ST_TO_ADDR
// if p3 = 107 then
12003: LD_VAR 0 3
12007: PUSH
12008: LD_INT 107
12010: EQUAL
12011: IFFALSE 12021
// sBomb := true ;
12013: LD_ADDR_EXP 85
12017: PUSH
12018: LD_INT 1
12020: ST_TO_ADDR
// if p3 = 108 then
12021: LD_VAR 0 3
12025: PUSH
12026: LD_INT 108
12028: EQUAL
12029: IFFALSE 12039
// sWound := true ;
12031: LD_ADDR_EXP 93
12035: PUSH
12036: LD_INT 1
12038: ST_TO_ADDR
// if p3 = 109 then
12039: LD_VAR 0 3
12043: PUSH
12044: LD_INT 109
12046: EQUAL
12047: IFFALSE 12057
// sBetray := true ;
12049: LD_ADDR_EXP 97
12053: PUSH
12054: LD_INT 1
12056: ST_TO_ADDR
// if p3 = 110 then
12057: LD_VAR 0 3
12061: PUSH
12062: LD_INT 110
12064: EQUAL
12065: IFFALSE 12075
// sContamin := true ;
12067: LD_ADDR_EXP 98
12071: PUSH
12072: LD_INT 1
12074: ST_TO_ADDR
// if p3 = 111 then
12075: LD_VAR 0 3
12079: PUSH
12080: LD_INT 111
12082: EQUAL
12083: IFFALSE 12093
// sOil := true ;
12085: LD_ADDR_EXP 100
12089: PUSH
12090: LD_INT 1
12092: ST_TO_ADDR
// if p3 = 112 then
12093: LD_VAR 0 3
12097: PUSH
12098: LD_INT 112
12100: EQUAL
12101: IFFALSE 12111
// sStu := true ;
12103: LD_ADDR_EXP 104
12107: PUSH
12108: LD_INT 1
12110: ST_TO_ADDR
// if p3 = 113 then
12111: LD_VAR 0 3
12115: PUSH
12116: LD_INT 113
12118: EQUAL
12119: IFFALSE 12129
// sBazooka := true ;
12121: LD_ADDR_EXP 107
12125: PUSH
12126: LD_INT 1
12128: ST_TO_ADDR
// if p3 = 114 then
12129: LD_VAR 0 3
12133: PUSH
12134: LD_INT 114
12136: EQUAL
12137: IFFALSE 12147
// sMortar := true ;
12139: LD_ADDR_EXP 108
12143: PUSH
12144: LD_INT 1
12146: ST_TO_ADDR
// if p3 = 115 then
12147: LD_VAR 0 3
12151: PUSH
12152: LD_INT 115
12154: EQUAL
12155: IFFALSE 12165
// sRanger := true ;
12157: LD_ADDR_EXP 118
12161: PUSH
12162: LD_INT 1
12164: ST_TO_ADDR
// if p3 = 116 then
12165: LD_VAR 0 3
12169: PUSH
12170: LD_INT 116
12172: EQUAL
12173: IFFALSE 12183
// sComputer := true ;
12175: LD_ADDR_EXP 119
12179: PUSH
12180: LD_INT 1
12182: ST_TO_ADDR
// if p3 = 117 then
12183: LD_VAR 0 3
12187: PUSH
12188: LD_INT 117
12190: EQUAL
12191: IFFALSE 12201
// s30 := true ;
12193: LD_ADDR_EXP 120
12197: PUSH
12198: LD_INT 1
12200: ST_TO_ADDR
// if p3 = 118 then
12201: LD_VAR 0 3
12205: PUSH
12206: LD_INT 118
12208: EQUAL
12209: IFFALSE 12219
// s60 := true ;
12211: LD_ADDR_EXP 121
12215: PUSH
12216: LD_INT 1
12218: ST_TO_ADDR
// end ; if p2 = 101 then
12219: LD_VAR 0 2
12223: PUSH
12224: LD_INT 101
12226: EQUAL
12227: IFFALSE 12355
// begin case p3 of 1 :
12229: LD_VAR 0 3
12233: PUSH
12234: LD_INT 1
12236: DOUBLE
12237: EQUAL
12238: IFTRUE 12242
12240: GO 12249
12242: POP
// hHackUnlimitedResources ; 2 :
12243: CALL 24453 0 0
12247: GO 12355
12249: LD_INT 2
12251: DOUBLE
12252: EQUAL
12253: IFTRUE 12257
12255: GO 12264
12257: POP
// hHackSetLevel10 ; 3 :
12258: CALL 24586 0 0
12262: GO 12355
12264: LD_INT 3
12266: DOUBLE
12267: EQUAL
12268: IFTRUE 12272
12270: GO 12279
12272: POP
// hHackSetLevel10YourUnits ; 4 :
12273: CALL 24671 0 0
12277: GO 12355
12279: LD_INT 4
12281: DOUBLE
12282: EQUAL
12283: IFTRUE 12287
12285: GO 12294
12287: POP
// hHackInvincible ; 5 :
12288: CALL 25119 0 0
12292: GO 12355
12294: LD_INT 5
12296: DOUBLE
12297: EQUAL
12298: IFTRUE 12302
12300: GO 12309
12302: POP
// hHackInvisible ; 6 :
12303: CALL 25230 0 0
12307: GO 12355
12309: LD_INT 6
12311: DOUBLE
12312: EQUAL
12313: IFTRUE 12317
12315: GO 12324
12317: POP
// hHackChangeYourSide ; 7 :
12318: CALL 25287 0 0
12322: GO 12355
12324: LD_INT 7
12326: DOUBLE
12327: EQUAL
12328: IFTRUE 12332
12330: GO 12339
12332: POP
// hHackChangeUnitSide ; 8 :
12333: CALL 25329 0 0
12337: GO 12355
12339: LD_INT 8
12341: DOUBLE
12342: EQUAL
12343: IFTRUE 12347
12345: GO 12354
12347: POP
// hHackFog ; end ;
12348: CALL 25430 0 0
12352: GO 12355
12354: POP
// end ; end ;
12355: LD_VAR 0 7
12359: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12360: GO 12362
12362: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12363: LD_STRING initStreamRollete();
12365: PPUSH
12366: CALL_OW 559
// InitStreamMode ;
12370: CALL 12382 0 0
// DefineStreamItems ( false ) ;
12374: LD_INT 0
12376: PPUSH
12377: CALL 12846 0 1
// end ;
12381: END
// function InitStreamMode ; begin
12382: LD_INT 0
12384: PPUSH
// streamModeActive := false ;
12385: LD_ADDR_EXP 65
12389: PUSH
12390: LD_INT 0
12392: ST_TO_ADDR
// normalCounter := 36 ;
12393: LD_ADDR_EXP 66
12397: PUSH
12398: LD_INT 36
12400: ST_TO_ADDR
// hardcoreCounter := 18 ;
12401: LD_ADDR_EXP 67
12405: PUSH
12406: LD_INT 18
12408: ST_TO_ADDR
// sRocket := false ;
12409: LD_ADDR_EXP 70
12413: PUSH
12414: LD_INT 0
12416: ST_TO_ADDR
// sSpeed := false ;
12417: LD_ADDR_EXP 69
12421: PUSH
12422: LD_INT 0
12424: ST_TO_ADDR
// sEngine := false ;
12425: LD_ADDR_EXP 71
12429: PUSH
12430: LD_INT 0
12432: ST_TO_ADDR
// sSpec := false ;
12433: LD_ADDR_EXP 68
12437: PUSH
12438: LD_INT 0
12440: ST_TO_ADDR
// sLevel := false ;
12441: LD_ADDR_EXP 72
12445: PUSH
12446: LD_INT 0
12448: ST_TO_ADDR
// sArmoury := false ;
12449: LD_ADDR_EXP 73
12453: PUSH
12454: LD_INT 0
12456: ST_TO_ADDR
// sRadar := false ;
12457: LD_ADDR_EXP 74
12461: PUSH
12462: LD_INT 0
12464: ST_TO_ADDR
// sBunker := false ;
12465: LD_ADDR_EXP 75
12469: PUSH
12470: LD_INT 0
12472: ST_TO_ADDR
// sHack := false ;
12473: LD_ADDR_EXP 76
12477: PUSH
12478: LD_INT 0
12480: ST_TO_ADDR
// sFire := false ;
12481: LD_ADDR_EXP 77
12485: PUSH
12486: LD_INT 0
12488: ST_TO_ADDR
// sRefresh := false ;
12489: LD_ADDR_EXP 78
12493: PUSH
12494: LD_INT 0
12496: ST_TO_ADDR
// sExp := false ;
12497: LD_ADDR_EXP 79
12501: PUSH
12502: LD_INT 0
12504: ST_TO_ADDR
// sDepot := false ;
12505: LD_ADDR_EXP 80
12509: PUSH
12510: LD_INT 0
12512: ST_TO_ADDR
// sFlag := false ;
12513: LD_ADDR_EXP 81
12517: PUSH
12518: LD_INT 0
12520: ST_TO_ADDR
// sKamikadze := false ;
12521: LD_ADDR_EXP 89
12525: PUSH
12526: LD_INT 0
12528: ST_TO_ADDR
// sTroll := false ;
12529: LD_ADDR_EXP 90
12533: PUSH
12534: LD_INT 0
12536: ST_TO_ADDR
// sSlow := false ;
12537: LD_ADDR_EXP 91
12541: PUSH
12542: LD_INT 0
12544: ST_TO_ADDR
// sLack := false ;
12545: LD_ADDR_EXP 92
12549: PUSH
12550: LD_INT 0
12552: ST_TO_ADDR
// sTank := false ;
12553: LD_ADDR_EXP 94
12557: PUSH
12558: LD_INT 0
12560: ST_TO_ADDR
// sRemote := false ;
12561: LD_ADDR_EXP 95
12565: PUSH
12566: LD_INT 0
12568: ST_TO_ADDR
// sPowell := false ;
12569: LD_ADDR_EXP 96
12573: PUSH
12574: LD_INT 0
12576: ST_TO_ADDR
// sTeleport := false ;
12577: LD_ADDR_EXP 99
12581: PUSH
12582: LD_INT 0
12584: ST_TO_ADDR
// sOilTower := false ;
12585: LD_ADDR_EXP 101
12589: PUSH
12590: LD_INT 0
12592: ST_TO_ADDR
// sShovel := false ;
12593: LD_ADDR_EXP 102
12597: PUSH
12598: LD_INT 0
12600: ST_TO_ADDR
// sSheik := false ;
12601: LD_ADDR_EXP 103
12605: PUSH
12606: LD_INT 0
12608: ST_TO_ADDR
// sEarthquake := false ;
12609: LD_ADDR_EXP 105
12613: PUSH
12614: LD_INT 0
12616: ST_TO_ADDR
// sAI := false ;
12617: LD_ADDR_EXP 106
12621: PUSH
12622: LD_INT 0
12624: ST_TO_ADDR
// sCargo := false ;
12625: LD_ADDR_EXP 109
12629: PUSH
12630: LD_INT 0
12632: ST_TO_ADDR
// sDLaser := false ;
12633: LD_ADDR_EXP 110
12637: PUSH
12638: LD_INT 0
12640: ST_TO_ADDR
// sExchange := false ;
12641: LD_ADDR_EXP 111
12645: PUSH
12646: LD_INT 0
12648: ST_TO_ADDR
// sFac := false ;
12649: LD_ADDR_EXP 112
12653: PUSH
12654: LD_INT 0
12656: ST_TO_ADDR
// sPower := false ;
12657: LD_ADDR_EXP 113
12661: PUSH
12662: LD_INT 0
12664: ST_TO_ADDR
// sRandom := false ;
12665: LD_ADDR_EXP 114
12669: PUSH
12670: LD_INT 0
12672: ST_TO_ADDR
// sShield := false ;
12673: LD_ADDR_EXP 115
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// sTime := false ;
12681: LD_ADDR_EXP 116
12685: PUSH
12686: LD_INT 0
12688: ST_TO_ADDR
// sTools := false ;
12689: LD_ADDR_EXP 117
12693: PUSH
12694: LD_INT 0
12696: ST_TO_ADDR
// sSold := false ;
12697: LD_ADDR_EXP 82
12701: PUSH
12702: LD_INT 0
12704: ST_TO_ADDR
// sDiff := false ;
12705: LD_ADDR_EXP 83
12709: PUSH
12710: LD_INT 0
12712: ST_TO_ADDR
// sFog := false ;
12713: LD_ADDR_EXP 86
12717: PUSH
12718: LD_INT 0
12720: ST_TO_ADDR
// sReset := false ;
12721: LD_ADDR_EXP 87
12725: PUSH
12726: LD_INT 0
12728: ST_TO_ADDR
// sSun := false ;
12729: LD_ADDR_EXP 88
12733: PUSH
12734: LD_INT 0
12736: ST_TO_ADDR
// sTiger := false ;
12737: LD_ADDR_EXP 84
12741: PUSH
12742: LD_INT 0
12744: ST_TO_ADDR
// sBomb := false ;
12745: LD_ADDR_EXP 85
12749: PUSH
12750: LD_INT 0
12752: ST_TO_ADDR
// sWound := false ;
12753: LD_ADDR_EXP 93
12757: PUSH
12758: LD_INT 0
12760: ST_TO_ADDR
// sBetray := false ;
12761: LD_ADDR_EXP 97
12765: PUSH
12766: LD_INT 0
12768: ST_TO_ADDR
// sContamin := false ;
12769: LD_ADDR_EXP 98
12773: PUSH
12774: LD_INT 0
12776: ST_TO_ADDR
// sOil := false ;
12777: LD_ADDR_EXP 100
12781: PUSH
12782: LD_INT 0
12784: ST_TO_ADDR
// sStu := false ;
12785: LD_ADDR_EXP 104
12789: PUSH
12790: LD_INT 0
12792: ST_TO_ADDR
// sBazooka := false ;
12793: LD_ADDR_EXP 107
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// sMortar := false ;
12801: LD_ADDR_EXP 108
12805: PUSH
12806: LD_INT 0
12808: ST_TO_ADDR
// sRanger := false ;
12809: LD_ADDR_EXP 118
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// sComputer := false ;
12817: LD_ADDR_EXP 119
12821: PUSH
12822: LD_INT 0
12824: ST_TO_ADDR
// s30 := false ;
12825: LD_ADDR_EXP 120
12829: PUSH
12830: LD_INT 0
12832: ST_TO_ADDR
// s60 := false ;
12833: LD_ADDR_EXP 121
12837: PUSH
12838: LD_INT 0
12840: ST_TO_ADDR
// end ;
12841: LD_VAR 0 1
12845: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12846: LD_INT 0
12848: PPUSH
12849: PPUSH
12850: PPUSH
12851: PPUSH
12852: PPUSH
12853: PPUSH
12854: PPUSH
// result := [ ] ;
12855: LD_ADDR_VAR 0 2
12859: PUSH
12860: EMPTY
12861: ST_TO_ADDR
// if campaign_id = 1 then
12862: LD_OWVAR 69
12866: PUSH
12867: LD_INT 1
12869: EQUAL
12870: IFFALSE 16036
// begin case mission_number of 1 :
12872: LD_OWVAR 70
12876: PUSH
12877: LD_INT 1
12879: DOUBLE
12880: EQUAL
12881: IFTRUE 12885
12883: GO 12961
12885: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12886: LD_ADDR_VAR 0 2
12890: PUSH
12891: LD_INT 2
12893: PUSH
12894: LD_INT 4
12896: PUSH
12897: LD_INT 11
12899: PUSH
12900: LD_INT 12
12902: PUSH
12903: LD_INT 15
12905: PUSH
12906: LD_INT 16
12908: PUSH
12909: LD_INT 22
12911: PUSH
12912: LD_INT 23
12914: PUSH
12915: LD_INT 26
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: PUSH
12929: LD_INT 101
12931: PUSH
12932: LD_INT 102
12934: PUSH
12935: LD_INT 106
12937: PUSH
12938: LD_INT 116
12940: PUSH
12941: LD_INT 117
12943: PUSH
12944: LD_INT 118
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: ST_TO_ADDR
12959: GO 16034
12961: LD_INT 2
12963: DOUBLE
12964: EQUAL
12965: IFTRUE 12969
12967: GO 13053
12969: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12970: LD_ADDR_VAR 0 2
12974: PUSH
12975: LD_INT 2
12977: PUSH
12978: LD_INT 4
12980: PUSH
12981: LD_INT 11
12983: PUSH
12984: LD_INT 12
12986: PUSH
12987: LD_INT 15
12989: PUSH
12990: LD_INT 16
12992: PUSH
12993: LD_INT 22
12995: PUSH
12996: LD_INT 23
12998: PUSH
12999: LD_INT 26
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 101
13015: PUSH
13016: LD_INT 102
13018: PUSH
13019: LD_INT 105
13021: PUSH
13022: LD_INT 106
13024: PUSH
13025: LD_INT 108
13027: PUSH
13028: LD_INT 116
13030: PUSH
13031: LD_INT 117
13033: PUSH
13034: LD_INT 118
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: ST_TO_ADDR
13051: GO 16034
13053: LD_INT 3
13055: DOUBLE
13056: EQUAL
13057: IFTRUE 13061
13059: GO 13149
13061: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13062: LD_ADDR_VAR 0 2
13066: PUSH
13067: LD_INT 2
13069: PUSH
13070: LD_INT 4
13072: PUSH
13073: LD_INT 5
13075: PUSH
13076: LD_INT 11
13078: PUSH
13079: LD_INT 12
13081: PUSH
13082: LD_INT 15
13084: PUSH
13085: LD_INT 16
13087: PUSH
13088: LD_INT 22
13090: PUSH
13091: LD_INT 26
13093: PUSH
13094: LD_INT 36
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 101
13111: PUSH
13112: LD_INT 102
13114: PUSH
13115: LD_INT 105
13117: PUSH
13118: LD_INT 106
13120: PUSH
13121: LD_INT 108
13123: PUSH
13124: LD_INT 116
13126: PUSH
13127: LD_INT 117
13129: PUSH
13130: LD_INT 118
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: ST_TO_ADDR
13147: GO 16034
13149: LD_INT 4
13151: DOUBLE
13152: EQUAL
13153: IFTRUE 13157
13155: GO 13253
13157: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13158: LD_ADDR_VAR 0 2
13162: PUSH
13163: LD_INT 2
13165: PUSH
13166: LD_INT 4
13168: PUSH
13169: LD_INT 5
13171: PUSH
13172: LD_INT 8
13174: PUSH
13175: LD_INT 11
13177: PUSH
13178: LD_INT 12
13180: PUSH
13181: LD_INT 15
13183: PUSH
13184: LD_INT 16
13186: PUSH
13187: LD_INT 22
13189: PUSH
13190: LD_INT 23
13192: PUSH
13193: LD_INT 26
13195: PUSH
13196: LD_INT 36
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 101
13215: PUSH
13216: LD_INT 102
13218: PUSH
13219: LD_INT 105
13221: PUSH
13222: LD_INT 106
13224: PUSH
13225: LD_INT 108
13227: PUSH
13228: LD_INT 116
13230: PUSH
13231: LD_INT 117
13233: PUSH
13234: LD_INT 118
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: ST_TO_ADDR
13251: GO 16034
13253: LD_INT 5
13255: DOUBLE
13256: EQUAL
13257: IFTRUE 13261
13259: GO 13373
13261: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13262: LD_ADDR_VAR 0 2
13266: PUSH
13267: LD_INT 2
13269: PUSH
13270: LD_INT 4
13272: PUSH
13273: LD_INT 5
13275: PUSH
13276: LD_INT 6
13278: PUSH
13279: LD_INT 8
13281: PUSH
13282: LD_INT 11
13284: PUSH
13285: LD_INT 12
13287: PUSH
13288: LD_INT 15
13290: PUSH
13291: LD_INT 16
13293: PUSH
13294: LD_INT 22
13296: PUSH
13297: LD_INT 23
13299: PUSH
13300: LD_INT 25
13302: PUSH
13303: LD_INT 26
13305: PUSH
13306: LD_INT 36
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: PUSH
13325: LD_INT 101
13327: PUSH
13328: LD_INT 102
13330: PUSH
13331: LD_INT 105
13333: PUSH
13334: LD_INT 106
13336: PUSH
13337: LD_INT 108
13339: PUSH
13340: LD_INT 109
13342: PUSH
13343: LD_INT 112
13345: PUSH
13346: LD_INT 116
13348: PUSH
13349: LD_INT 117
13351: PUSH
13352: LD_INT 118
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: ST_TO_ADDR
13371: GO 16034
13373: LD_INT 6
13375: DOUBLE
13376: EQUAL
13377: IFTRUE 13381
13379: GO 13513
13381: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13382: LD_ADDR_VAR 0 2
13386: PUSH
13387: LD_INT 2
13389: PUSH
13390: LD_INT 4
13392: PUSH
13393: LD_INT 5
13395: PUSH
13396: LD_INT 6
13398: PUSH
13399: LD_INT 8
13401: PUSH
13402: LD_INT 11
13404: PUSH
13405: LD_INT 12
13407: PUSH
13408: LD_INT 15
13410: PUSH
13411: LD_INT 16
13413: PUSH
13414: LD_INT 20
13416: PUSH
13417: LD_INT 21
13419: PUSH
13420: LD_INT 22
13422: PUSH
13423: LD_INT 23
13425: PUSH
13426: LD_INT 25
13428: PUSH
13429: LD_INT 26
13431: PUSH
13432: LD_INT 30
13434: PUSH
13435: LD_INT 31
13437: PUSH
13438: LD_INT 32
13440: PUSH
13441: LD_INT 36
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: PUSH
13465: LD_INT 101
13467: PUSH
13468: LD_INT 102
13470: PUSH
13471: LD_INT 105
13473: PUSH
13474: LD_INT 106
13476: PUSH
13477: LD_INT 108
13479: PUSH
13480: LD_INT 109
13482: PUSH
13483: LD_INT 112
13485: PUSH
13486: LD_INT 116
13488: PUSH
13489: LD_INT 117
13491: PUSH
13492: LD_INT 118
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: ST_TO_ADDR
13511: GO 16034
13513: LD_INT 7
13515: DOUBLE
13516: EQUAL
13517: IFTRUE 13521
13519: GO 13633
13521: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13522: LD_ADDR_VAR 0 2
13526: PUSH
13527: LD_INT 2
13529: PUSH
13530: LD_INT 4
13532: PUSH
13533: LD_INT 5
13535: PUSH
13536: LD_INT 7
13538: PUSH
13539: LD_INT 11
13541: PUSH
13542: LD_INT 12
13544: PUSH
13545: LD_INT 15
13547: PUSH
13548: LD_INT 16
13550: PUSH
13551: LD_INT 20
13553: PUSH
13554: LD_INT 21
13556: PUSH
13557: LD_INT 22
13559: PUSH
13560: LD_INT 23
13562: PUSH
13563: LD_INT 25
13565: PUSH
13566: LD_INT 26
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 101
13587: PUSH
13588: LD_INT 102
13590: PUSH
13591: LD_INT 103
13593: PUSH
13594: LD_INT 105
13596: PUSH
13597: LD_INT 106
13599: PUSH
13600: LD_INT 108
13602: PUSH
13603: LD_INT 112
13605: PUSH
13606: LD_INT 116
13608: PUSH
13609: LD_INT 117
13611: PUSH
13612: LD_INT 118
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: ST_TO_ADDR
13631: GO 16034
13633: LD_INT 8
13635: DOUBLE
13636: EQUAL
13637: IFTRUE 13641
13639: GO 13781
13641: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13642: LD_ADDR_VAR 0 2
13646: PUSH
13647: LD_INT 2
13649: PUSH
13650: LD_INT 4
13652: PUSH
13653: LD_INT 5
13655: PUSH
13656: LD_INT 6
13658: PUSH
13659: LD_INT 7
13661: PUSH
13662: LD_INT 8
13664: PUSH
13665: LD_INT 11
13667: PUSH
13668: LD_INT 12
13670: PUSH
13671: LD_INT 15
13673: PUSH
13674: LD_INT 16
13676: PUSH
13677: LD_INT 20
13679: PUSH
13680: LD_INT 21
13682: PUSH
13683: LD_INT 22
13685: PUSH
13686: LD_INT 23
13688: PUSH
13689: LD_INT 25
13691: PUSH
13692: LD_INT 26
13694: PUSH
13695: LD_INT 30
13697: PUSH
13698: LD_INT 31
13700: PUSH
13701: LD_INT 32
13703: PUSH
13704: LD_INT 36
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: PUSH
13729: LD_INT 101
13731: PUSH
13732: LD_INT 102
13734: PUSH
13735: LD_INT 103
13737: PUSH
13738: LD_INT 105
13740: PUSH
13741: LD_INT 106
13743: PUSH
13744: LD_INT 108
13746: PUSH
13747: LD_INT 109
13749: PUSH
13750: LD_INT 112
13752: PUSH
13753: LD_INT 116
13755: PUSH
13756: LD_INT 117
13758: PUSH
13759: LD_INT 118
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: ST_TO_ADDR
13779: GO 16034
13781: LD_INT 9
13783: DOUBLE
13784: EQUAL
13785: IFTRUE 13789
13787: GO 13937
13789: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13790: LD_ADDR_VAR 0 2
13794: PUSH
13795: LD_INT 2
13797: PUSH
13798: LD_INT 4
13800: PUSH
13801: LD_INT 5
13803: PUSH
13804: LD_INT 6
13806: PUSH
13807: LD_INT 7
13809: PUSH
13810: LD_INT 8
13812: PUSH
13813: LD_INT 11
13815: PUSH
13816: LD_INT 12
13818: PUSH
13819: LD_INT 15
13821: PUSH
13822: LD_INT 16
13824: PUSH
13825: LD_INT 20
13827: PUSH
13828: LD_INT 21
13830: PUSH
13831: LD_INT 22
13833: PUSH
13834: LD_INT 23
13836: PUSH
13837: LD_INT 25
13839: PUSH
13840: LD_INT 26
13842: PUSH
13843: LD_INT 28
13845: PUSH
13846: LD_INT 30
13848: PUSH
13849: LD_INT 31
13851: PUSH
13852: LD_INT 32
13854: PUSH
13855: LD_INT 36
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: PUSH
13881: LD_INT 101
13883: PUSH
13884: LD_INT 102
13886: PUSH
13887: LD_INT 103
13889: PUSH
13890: LD_INT 105
13892: PUSH
13893: LD_INT 106
13895: PUSH
13896: LD_INT 108
13898: PUSH
13899: LD_INT 109
13901: PUSH
13902: LD_INT 112
13904: PUSH
13905: LD_INT 114
13907: PUSH
13908: LD_INT 116
13910: PUSH
13911: LD_INT 117
13913: PUSH
13914: LD_INT 118
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: ST_TO_ADDR
13935: GO 16034
13937: LD_INT 10
13939: DOUBLE
13940: EQUAL
13941: IFTRUE 13945
13943: GO 14141
13945: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13946: LD_ADDR_VAR 0 2
13950: PUSH
13951: LD_INT 2
13953: PUSH
13954: LD_INT 4
13956: PUSH
13957: LD_INT 5
13959: PUSH
13960: LD_INT 6
13962: PUSH
13963: LD_INT 7
13965: PUSH
13966: LD_INT 8
13968: PUSH
13969: LD_INT 9
13971: PUSH
13972: LD_INT 10
13974: PUSH
13975: LD_INT 11
13977: PUSH
13978: LD_INT 12
13980: PUSH
13981: LD_INT 13
13983: PUSH
13984: LD_INT 14
13986: PUSH
13987: LD_INT 15
13989: PUSH
13990: LD_INT 16
13992: PUSH
13993: LD_INT 17
13995: PUSH
13996: LD_INT 18
13998: PUSH
13999: LD_INT 19
14001: PUSH
14002: LD_INT 20
14004: PUSH
14005: LD_INT 21
14007: PUSH
14008: LD_INT 22
14010: PUSH
14011: LD_INT 23
14013: PUSH
14014: LD_INT 24
14016: PUSH
14017: LD_INT 25
14019: PUSH
14020: LD_INT 26
14022: PUSH
14023: LD_INT 28
14025: PUSH
14026: LD_INT 30
14028: PUSH
14029: LD_INT 31
14031: PUSH
14032: LD_INT 32
14034: PUSH
14035: LD_INT 36
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 101
14071: PUSH
14072: LD_INT 102
14074: PUSH
14075: LD_INT 103
14077: PUSH
14078: LD_INT 104
14080: PUSH
14081: LD_INT 105
14083: PUSH
14084: LD_INT 106
14086: PUSH
14087: LD_INT 107
14089: PUSH
14090: LD_INT 108
14092: PUSH
14093: LD_INT 109
14095: PUSH
14096: LD_INT 110
14098: PUSH
14099: LD_INT 111
14101: PUSH
14102: LD_INT 112
14104: PUSH
14105: LD_INT 114
14107: PUSH
14108: LD_INT 116
14110: PUSH
14111: LD_INT 117
14113: PUSH
14114: LD_INT 118
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: ST_TO_ADDR
14139: GO 16034
14141: LD_INT 11
14143: DOUBLE
14144: EQUAL
14145: IFTRUE 14149
14147: GO 14353
14149: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14150: LD_ADDR_VAR 0 2
14154: PUSH
14155: LD_INT 2
14157: PUSH
14158: LD_INT 3
14160: PUSH
14161: LD_INT 4
14163: PUSH
14164: LD_INT 5
14166: PUSH
14167: LD_INT 6
14169: PUSH
14170: LD_INT 7
14172: PUSH
14173: LD_INT 8
14175: PUSH
14176: LD_INT 9
14178: PUSH
14179: LD_INT 10
14181: PUSH
14182: LD_INT 11
14184: PUSH
14185: LD_INT 12
14187: PUSH
14188: LD_INT 13
14190: PUSH
14191: LD_INT 14
14193: PUSH
14194: LD_INT 15
14196: PUSH
14197: LD_INT 16
14199: PUSH
14200: LD_INT 17
14202: PUSH
14203: LD_INT 18
14205: PUSH
14206: LD_INT 19
14208: PUSH
14209: LD_INT 20
14211: PUSH
14212: LD_INT 21
14214: PUSH
14215: LD_INT 22
14217: PUSH
14218: LD_INT 23
14220: PUSH
14221: LD_INT 24
14223: PUSH
14224: LD_INT 25
14226: PUSH
14227: LD_INT 26
14229: PUSH
14230: LD_INT 28
14232: PUSH
14233: LD_INT 30
14235: PUSH
14236: LD_INT 31
14238: PUSH
14239: LD_INT 32
14241: PUSH
14242: LD_INT 34
14244: PUSH
14245: LD_INT 36
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: PUSH
14281: LD_INT 101
14283: PUSH
14284: LD_INT 102
14286: PUSH
14287: LD_INT 103
14289: PUSH
14290: LD_INT 104
14292: PUSH
14293: LD_INT 105
14295: PUSH
14296: LD_INT 106
14298: PUSH
14299: LD_INT 107
14301: PUSH
14302: LD_INT 108
14304: PUSH
14305: LD_INT 109
14307: PUSH
14308: LD_INT 110
14310: PUSH
14311: LD_INT 111
14313: PUSH
14314: LD_INT 112
14316: PUSH
14317: LD_INT 114
14319: PUSH
14320: LD_INT 116
14322: PUSH
14323: LD_INT 117
14325: PUSH
14326: LD_INT 118
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: ST_TO_ADDR
14351: GO 16034
14353: LD_INT 12
14355: DOUBLE
14356: EQUAL
14357: IFTRUE 14361
14359: GO 14581
14361: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14362: LD_ADDR_VAR 0 2
14366: PUSH
14367: LD_INT 1
14369: PUSH
14370: LD_INT 2
14372: PUSH
14373: LD_INT 3
14375: PUSH
14376: LD_INT 4
14378: PUSH
14379: LD_INT 5
14381: PUSH
14382: LD_INT 6
14384: PUSH
14385: LD_INT 7
14387: PUSH
14388: LD_INT 8
14390: PUSH
14391: LD_INT 9
14393: PUSH
14394: LD_INT 10
14396: PUSH
14397: LD_INT 11
14399: PUSH
14400: LD_INT 12
14402: PUSH
14403: LD_INT 13
14405: PUSH
14406: LD_INT 14
14408: PUSH
14409: LD_INT 15
14411: PUSH
14412: LD_INT 16
14414: PUSH
14415: LD_INT 17
14417: PUSH
14418: LD_INT 18
14420: PUSH
14421: LD_INT 19
14423: PUSH
14424: LD_INT 20
14426: PUSH
14427: LD_INT 21
14429: PUSH
14430: LD_INT 22
14432: PUSH
14433: LD_INT 23
14435: PUSH
14436: LD_INT 24
14438: PUSH
14439: LD_INT 25
14441: PUSH
14442: LD_INT 26
14444: PUSH
14445: LD_INT 27
14447: PUSH
14448: LD_INT 28
14450: PUSH
14451: LD_INT 30
14453: PUSH
14454: LD_INT 31
14456: PUSH
14457: LD_INT 32
14459: PUSH
14460: LD_INT 33
14462: PUSH
14463: LD_INT 34
14465: PUSH
14466: LD_INT 36
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: PUSH
14505: LD_INT 101
14507: PUSH
14508: LD_INT 102
14510: PUSH
14511: LD_INT 103
14513: PUSH
14514: LD_INT 104
14516: PUSH
14517: LD_INT 105
14519: PUSH
14520: LD_INT 106
14522: PUSH
14523: LD_INT 107
14525: PUSH
14526: LD_INT 108
14528: PUSH
14529: LD_INT 109
14531: PUSH
14532: LD_INT 110
14534: PUSH
14535: LD_INT 111
14537: PUSH
14538: LD_INT 112
14540: PUSH
14541: LD_INT 113
14543: PUSH
14544: LD_INT 114
14546: PUSH
14547: LD_INT 116
14549: PUSH
14550: LD_INT 117
14552: PUSH
14553: LD_INT 118
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: ST_TO_ADDR
14579: GO 16034
14581: LD_INT 13
14583: DOUBLE
14584: EQUAL
14585: IFTRUE 14589
14587: GO 14797
14589: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14590: LD_ADDR_VAR 0 2
14594: PUSH
14595: LD_INT 1
14597: PUSH
14598: LD_INT 2
14600: PUSH
14601: LD_INT 3
14603: PUSH
14604: LD_INT 4
14606: PUSH
14607: LD_INT 5
14609: PUSH
14610: LD_INT 8
14612: PUSH
14613: LD_INT 9
14615: PUSH
14616: LD_INT 10
14618: PUSH
14619: LD_INT 11
14621: PUSH
14622: LD_INT 12
14624: PUSH
14625: LD_INT 14
14627: PUSH
14628: LD_INT 15
14630: PUSH
14631: LD_INT 16
14633: PUSH
14634: LD_INT 17
14636: PUSH
14637: LD_INT 18
14639: PUSH
14640: LD_INT 19
14642: PUSH
14643: LD_INT 20
14645: PUSH
14646: LD_INT 21
14648: PUSH
14649: LD_INT 22
14651: PUSH
14652: LD_INT 23
14654: PUSH
14655: LD_INT 24
14657: PUSH
14658: LD_INT 25
14660: PUSH
14661: LD_INT 26
14663: PUSH
14664: LD_INT 27
14666: PUSH
14667: LD_INT 28
14669: PUSH
14670: LD_INT 30
14672: PUSH
14673: LD_INT 31
14675: PUSH
14676: LD_INT 32
14678: PUSH
14679: LD_INT 33
14681: PUSH
14682: LD_INT 34
14684: PUSH
14685: LD_INT 36
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: PUSH
14721: LD_INT 101
14723: PUSH
14724: LD_INT 102
14726: PUSH
14727: LD_INT 103
14729: PUSH
14730: LD_INT 104
14732: PUSH
14733: LD_INT 105
14735: PUSH
14736: LD_INT 106
14738: PUSH
14739: LD_INT 107
14741: PUSH
14742: LD_INT 108
14744: PUSH
14745: LD_INT 109
14747: PUSH
14748: LD_INT 110
14750: PUSH
14751: LD_INT 111
14753: PUSH
14754: LD_INT 112
14756: PUSH
14757: LD_INT 113
14759: PUSH
14760: LD_INT 114
14762: PUSH
14763: LD_INT 116
14765: PUSH
14766: LD_INT 117
14768: PUSH
14769: LD_INT 118
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: ST_TO_ADDR
14795: GO 16034
14797: LD_INT 14
14799: DOUBLE
14800: EQUAL
14801: IFTRUE 14805
14803: GO 15029
14805: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14806: LD_ADDR_VAR 0 2
14810: PUSH
14811: LD_INT 1
14813: PUSH
14814: LD_INT 2
14816: PUSH
14817: LD_INT 3
14819: PUSH
14820: LD_INT 4
14822: PUSH
14823: LD_INT 5
14825: PUSH
14826: LD_INT 6
14828: PUSH
14829: LD_INT 7
14831: PUSH
14832: LD_INT 8
14834: PUSH
14835: LD_INT 9
14837: PUSH
14838: LD_INT 10
14840: PUSH
14841: LD_INT 11
14843: PUSH
14844: LD_INT 12
14846: PUSH
14847: LD_INT 13
14849: PUSH
14850: LD_INT 14
14852: PUSH
14853: LD_INT 15
14855: PUSH
14856: LD_INT 16
14858: PUSH
14859: LD_INT 17
14861: PUSH
14862: LD_INT 18
14864: PUSH
14865: LD_INT 19
14867: PUSH
14868: LD_INT 20
14870: PUSH
14871: LD_INT 21
14873: PUSH
14874: LD_INT 22
14876: PUSH
14877: LD_INT 23
14879: PUSH
14880: LD_INT 24
14882: PUSH
14883: LD_INT 25
14885: PUSH
14886: LD_INT 26
14888: PUSH
14889: LD_INT 27
14891: PUSH
14892: LD_INT 28
14894: PUSH
14895: LD_INT 29
14897: PUSH
14898: LD_INT 30
14900: PUSH
14901: LD_INT 31
14903: PUSH
14904: LD_INT 32
14906: PUSH
14907: LD_INT 33
14909: PUSH
14910: LD_INT 34
14912: PUSH
14913: LD_INT 36
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: PUSH
14953: LD_INT 101
14955: PUSH
14956: LD_INT 102
14958: PUSH
14959: LD_INT 103
14961: PUSH
14962: LD_INT 104
14964: PUSH
14965: LD_INT 105
14967: PUSH
14968: LD_INT 106
14970: PUSH
14971: LD_INT 107
14973: PUSH
14974: LD_INT 108
14976: PUSH
14977: LD_INT 109
14979: PUSH
14980: LD_INT 110
14982: PUSH
14983: LD_INT 111
14985: PUSH
14986: LD_INT 112
14988: PUSH
14989: LD_INT 113
14991: PUSH
14992: LD_INT 114
14994: PUSH
14995: LD_INT 116
14997: PUSH
14998: LD_INT 117
15000: PUSH
15001: LD_INT 118
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: ST_TO_ADDR
15027: GO 16034
15029: LD_INT 15
15031: DOUBLE
15032: EQUAL
15033: IFTRUE 15037
15035: GO 15261
15037: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15038: LD_ADDR_VAR 0 2
15042: PUSH
15043: LD_INT 1
15045: PUSH
15046: LD_INT 2
15048: PUSH
15049: LD_INT 3
15051: PUSH
15052: LD_INT 4
15054: PUSH
15055: LD_INT 5
15057: PUSH
15058: LD_INT 6
15060: PUSH
15061: LD_INT 7
15063: PUSH
15064: LD_INT 8
15066: PUSH
15067: LD_INT 9
15069: PUSH
15070: LD_INT 10
15072: PUSH
15073: LD_INT 11
15075: PUSH
15076: LD_INT 12
15078: PUSH
15079: LD_INT 13
15081: PUSH
15082: LD_INT 14
15084: PUSH
15085: LD_INT 15
15087: PUSH
15088: LD_INT 16
15090: PUSH
15091: LD_INT 17
15093: PUSH
15094: LD_INT 18
15096: PUSH
15097: LD_INT 19
15099: PUSH
15100: LD_INT 20
15102: PUSH
15103: LD_INT 21
15105: PUSH
15106: LD_INT 22
15108: PUSH
15109: LD_INT 23
15111: PUSH
15112: LD_INT 24
15114: PUSH
15115: LD_INT 25
15117: PUSH
15118: LD_INT 26
15120: PUSH
15121: LD_INT 27
15123: PUSH
15124: LD_INT 28
15126: PUSH
15127: LD_INT 29
15129: PUSH
15130: LD_INT 30
15132: PUSH
15133: LD_INT 31
15135: PUSH
15136: LD_INT 32
15138: PUSH
15139: LD_INT 33
15141: PUSH
15142: LD_INT 34
15144: PUSH
15145: LD_INT 36
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: PUSH
15185: LD_INT 101
15187: PUSH
15188: LD_INT 102
15190: PUSH
15191: LD_INT 103
15193: PUSH
15194: LD_INT 104
15196: PUSH
15197: LD_INT 105
15199: PUSH
15200: LD_INT 106
15202: PUSH
15203: LD_INT 107
15205: PUSH
15206: LD_INT 108
15208: PUSH
15209: LD_INT 109
15211: PUSH
15212: LD_INT 110
15214: PUSH
15215: LD_INT 111
15217: PUSH
15218: LD_INT 112
15220: PUSH
15221: LD_INT 113
15223: PUSH
15224: LD_INT 114
15226: PUSH
15227: LD_INT 116
15229: PUSH
15230: LD_INT 117
15232: PUSH
15233: LD_INT 118
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: ST_TO_ADDR
15259: GO 16034
15261: LD_INT 16
15263: DOUBLE
15264: EQUAL
15265: IFTRUE 15269
15267: GO 15405
15269: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15270: LD_ADDR_VAR 0 2
15274: PUSH
15275: LD_INT 2
15277: PUSH
15278: LD_INT 4
15280: PUSH
15281: LD_INT 5
15283: PUSH
15284: LD_INT 7
15286: PUSH
15287: LD_INT 11
15289: PUSH
15290: LD_INT 12
15292: PUSH
15293: LD_INT 15
15295: PUSH
15296: LD_INT 16
15298: PUSH
15299: LD_INT 20
15301: PUSH
15302: LD_INT 21
15304: PUSH
15305: LD_INT 22
15307: PUSH
15308: LD_INT 23
15310: PUSH
15311: LD_INT 25
15313: PUSH
15314: LD_INT 26
15316: PUSH
15317: LD_INT 30
15319: PUSH
15320: LD_INT 31
15322: PUSH
15323: LD_INT 32
15325: PUSH
15326: LD_INT 33
15328: PUSH
15329: LD_INT 34
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: PUSH
15353: LD_INT 101
15355: PUSH
15356: LD_INT 102
15358: PUSH
15359: LD_INT 103
15361: PUSH
15362: LD_INT 106
15364: PUSH
15365: LD_INT 108
15367: PUSH
15368: LD_INT 112
15370: PUSH
15371: LD_INT 113
15373: PUSH
15374: LD_INT 114
15376: PUSH
15377: LD_INT 116
15379: PUSH
15380: LD_INT 117
15382: PUSH
15383: LD_INT 118
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: ST_TO_ADDR
15403: GO 16034
15405: LD_INT 17
15407: DOUBLE
15408: EQUAL
15409: IFTRUE 15413
15411: GO 15637
15413: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15414: LD_ADDR_VAR 0 2
15418: PUSH
15419: LD_INT 1
15421: PUSH
15422: LD_INT 2
15424: PUSH
15425: LD_INT 3
15427: PUSH
15428: LD_INT 4
15430: PUSH
15431: LD_INT 5
15433: PUSH
15434: LD_INT 6
15436: PUSH
15437: LD_INT 7
15439: PUSH
15440: LD_INT 8
15442: PUSH
15443: LD_INT 9
15445: PUSH
15446: LD_INT 10
15448: PUSH
15449: LD_INT 11
15451: PUSH
15452: LD_INT 12
15454: PUSH
15455: LD_INT 13
15457: PUSH
15458: LD_INT 14
15460: PUSH
15461: LD_INT 15
15463: PUSH
15464: LD_INT 16
15466: PUSH
15467: LD_INT 17
15469: PUSH
15470: LD_INT 18
15472: PUSH
15473: LD_INT 19
15475: PUSH
15476: LD_INT 20
15478: PUSH
15479: LD_INT 21
15481: PUSH
15482: LD_INT 22
15484: PUSH
15485: LD_INT 23
15487: PUSH
15488: LD_INT 24
15490: PUSH
15491: LD_INT 25
15493: PUSH
15494: LD_INT 26
15496: PUSH
15497: LD_INT 27
15499: PUSH
15500: LD_INT 28
15502: PUSH
15503: LD_INT 29
15505: PUSH
15506: LD_INT 30
15508: PUSH
15509: LD_INT 31
15511: PUSH
15512: LD_INT 32
15514: PUSH
15515: LD_INT 33
15517: PUSH
15518: LD_INT 34
15520: PUSH
15521: LD_INT 36
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: PUSH
15561: LD_INT 101
15563: PUSH
15564: LD_INT 102
15566: PUSH
15567: LD_INT 103
15569: PUSH
15570: LD_INT 104
15572: PUSH
15573: LD_INT 105
15575: PUSH
15576: LD_INT 106
15578: PUSH
15579: LD_INT 107
15581: PUSH
15582: LD_INT 108
15584: PUSH
15585: LD_INT 109
15587: PUSH
15588: LD_INT 110
15590: PUSH
15591: LD_INT 111
15593: PUSH
15594: LD_INT 112
15596: PUSH
15597: LD_INT 113
15599: PUSH
15600: LD_INT 114
15602: PUSH
15603: LD_INT 116
15605: PUSH
15606: LD_INT 117
15608: PUSH
15609: LD_INT 118
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: ST_TO_ADDR
15635: GO 16034
15637: LD_INT 18
15639: DOUBLE
15640: EQUAL
15641: IFTRUE 15645
15643: GO 15793
15645: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15646: LD_ADDR_VAR 0 2
15650: PUSH
15651: LD_INT 2
15653: PUSH
15654: LD_INT 4
15656: PUSH
15657: LD_INT 5
15659: PUSH
15660: LD_INT 7
15662: PUSH
15663: LD_INT 11
15665: PUSH
15666: LD_INT 12
15668: PUSH
15669: LD_INT 15
15671: PUSH
15672: LD_INT 16
15674: PUSH
15675: LD_INT 20
15677: PUSH
15678: LD_INT 21
15680: PUSH
15681: LD_INT 22
15683: PUSH
15684: LD_INT 23
15686: PUSH
15687: LD_INT 25
15689: PUSH
15690: LD_INT 26
15692: PUSH
15693: LD_INT 30
15695: PUSH
15696: LD_INT 31
15698: PUSH
15699: LD_INT 32
15701: PUSH
15702: LD_INT 33
15704: PUSH
15705: LD_INT 34
15707: PUSH
15708: LD_INT 35
15710: PUSH
15711: LD_INT 36
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: PUSH
15737: LD_INT 101
15739: PUSH
15740: LD_INT 102
15742: PUSH
15743: LD_INT 103
15745: PUSH
15746: LD_INT 106
15748: PUSH
15749: LD_INT 108
15751: PUSH
15752: LD_INT 112
15754: PUSH
15755: LD_INT 113
15757: PUSH
15758: LD_INT 114
15760: PUSH
15761: LD_INT 115
15763: PUSH
15764: LD_INT 116
15766: PUSH
15767: LD_INT 117
15769: PUSH
15770: LD_INT 118
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: ST_TO_ADDR
15791: GO 16034
15793: LD_INT 19
15795: DOUBLE
15796: EQUAL
15797: IFTRUE 15801
15799: GO 16033
15801: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15802: LD_ADDR_VAR 0 2
15806: PUSH
15807: LD_INT 1
15809: PUSH
15810: LD_INT 2
15812: PUSH
15813: LD_INT 3
15815: PUSH
15816: LD_INT 4
15818: PUSH
15819: LD_INT 5
15821: PUSH
15822: LD_INT 6
15824: PUSH
15825: LD_INT 7
15827: PUSH
15828: LD_INT 8
15830: PUSH
15831: LD_INT 9
15833: PUSH
15834: LD_INT 10
15836: PUSH
15837: LD_INT 11
15839: PUSH
15840: LD_INT 12
15842: PUSH
15843: LD_INT 13
15845: PUSH
15846: LD_INT 14
15848: PUSH
15849: LD_INT 15
15851: PUSH
15852: LD_INT 16
15854: PUSH
15855: LD_INT 17
15857: PUSH
15858: LD_INT 18
15860: PUSH
15861: LD_INT 19
15863: PUSH
15864: LD_INT 20
15866: PUSH
15867: LD_INT 21
15869: PUSH
15870: LD_INT 22
15872: PUSH
15873: LD_INT 23
15875: PUSH
15876: LD_INT 24
15878: PUSH
15879: LD_INT 25
15881: PUSH
15882: LD_INT 26
15884: PUSH
15885: LD_INT 27
15887: PUSH
15888: LD_INT 28
15890: PUSH
15891: LD_INT 29
15893: PUSH
15894: LD_INT 30
15896: PUSH
15897: LD_INT 31
15899: PUSH
15900: LD_INT 32
15902: PUSH
15903: LD_INT 33
15905: PUSH
15906: LD_INT 34
15908: PUSH
15909: LD_INT 35
15911: PUSH
15912: LD_INT 36
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 101
15955: PUSH
15956: LD_INT 102
15958: PUSH
15959: LD_INT 103
15961: PUSH
15962: LD_INT 104
15964: PUSH
15965: LD_INT 105
15967: PUSH
15968: LD_INT 106
15970: PUSH
15971: LD_INT 107
15973: PUSH
15974: LD_INT 108
15976: PUSH
15977: LD_INT 109
15979: PUSH
15980: LD_INT 110
15982: PUSH
15983: LD_INT 111
15985: PUSH
15986: LD_INT 112
15988: PUSH
15989: LD_INT 113
15991: PUSH
15992: LD_INT 114
15994: PUSH
15995: LD_INT 115
15997: PUSH
15998: LD_INT 116
16000: PUSH
16001: LD_INT 117
16003: PUSH
16004: LD_INT 118
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: ST_TO_ADDR
16031: GO 16034
16033: POP
// end else
16034: GO 16265
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16036: LD_ADDR_VAR 0 2
16040: PUSH
16041: LD_INT 1
16043: PUSH
16044: LD_INT 2
16046: PUSH
16047: LD_INT 3
16049: PUSH
16050: LD_INT 4
16052: PUSH
16053: LD_INT 5
16055: PUSH
16056: LD_INT 6
16058: PUSH
16059: LD_INT 7
16061: PUSH
16062: LD_INT 8
16064: PUSH
16065: LD_INT 9
16067: PUSH
16068: LD_INT 10
16070: PUSH
16071: LD_INT 11
16073: PUSH
16074: LD_INT 12
16076: PUSH
16077: LD_INT 13
16079: PUSH
16080: LD_INT 14
16082: PUSH
16083: LD_INT 15
16085: PUSH
16086: LD_INT 16
16088: PUSH
16089: LD_INT 17
16091: PUSH
16092: LD_INT 18
16094: PUSH
16095: LD_INT 19
16097: PUSH
16098: LD_INT 20
16100: PUSH
16101: LD_INT 21
16103: PUSH
16104: LD_INT 22
16106: PUSH
16107: LD_INT 23
16109: PUSH
16110: LD_INT 24
16112: PUSH
16113: LD_INT 25
16115: PUSH
16116: LD_INT 26
16118: PUSH
16119: LD_INT 27
16121: PUSH
16122: LD_INT 28
16124: PUSH
16125: LD_INT 29
16127: PUSH
16128: LD_INT 30
16130: PUSH
16131: LD_INT 31
16133: PUSH
16134: LD_INT 32
16136: PUSH
16137: LD_INT 33
16139: PUSH
16140: LD_INT 34
16142: PUSH
16143: LD_INT 35
16145: PUSH
16146: LD_INT 36
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: PUSH
16187: LD_INT 101
16189: PUSH
16190: LD_INT 102
16192: PUSH
16193: LD_INT 103
16195: PUSH
16196: LD_INT 104
16198: PUSH
16199: LD_INT 105
16201: PUSH
16202: LD_INT 106
16204: PUSH
16205: LD_INT 107
16207: PUSH
16208: LD_INT 108
16210: PUSH
16211: LD_INT 109
16213: PUSH
16214: LD_INT 110
16216: PUSH
16217: LD_INT 111
16219: PUSH
16220: LD_INT 112
16222: PUSH
16223: LD_INT 113
16225: PUSH
16226: LD_INT 114
16228: PUSH
16229: LD_INT 115
16231: PUSH
16232: LD_INT 116
16234: PUSH
16235: LD_INT 117
16237: PUSH
16238: LD_INT 118
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: ST_TO_ADDR
// if result then
16265: LD_VAR 0 2
16269: IFFALSE 17055
// begin normal :=  ;
16271: LD_ADDR_VAR 0 5
16275: PUSH
16276: LD_STRING 
16278: ST_TO_ADDR
// hardcore :=  ;
16279: LD_ADDR_VAR 0 6
16283: PUSH
16284: LD_STRING 
16286: ST_TO_ADDR
// active :=  ;
16287: LD_ADDR_VAR 0 7
16291: PUSH
16292: LD_STRING 
16294: ST_TO_ADDR
// for i = 1 to normalCounter do
16295: LD_ADDR_VAR 0 8
16299: PUSH
16300: DOUBLE
16301: LD_INT 1
16303: DEC
16304: ST_TO_ADDR
16305: LD_EXP 66
16309: PUSH
16310: FOR_TO
16311: IFFALSE 16412
// begin tmp := 0 ;
16313: LD_ADDR_VAR 0 3
16317: PUSH
16318: LD_STRING 0
16320: ST_TO_ADDR
// if result [ 1 ] then
16321: LD_VAR 0 2
16325: PUSH
16326: LD_INT 1
16328: ARRAY
16329: IFFALSE 16394
// if result [ 1 ] [ 1 ] = i then
16331: LD_VAR 0 2
16335: PUSH
16336: LD_INT 1
16338: ARRAY
16339: PUSH
16340: LD_INT 1
16342: ARRAY
16343: PUSH
16344: LD_VAR 0 8
16348: EQUAL
16349: IFFALSE 16394
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16351: LD_ADDR_VAR 0 2
16355: PUSH
16356: LD_VAR 0 2
16360: PPUSH
16361: LD_INT 1
16363: PPUSH
16364: LD_VAR 0 2
16368: PUSH
16369: LD_INT 1
16371: ARRAY
16372: PPUSH
16373: LD_INT 1
16375: PPUSH
16376: CALL_OW 3
16380: PPUSH
16381: CALL_OW 1
16385: ST_TO_ADDR
// tmp := 1 ;
16386: LD_ADDR_VAR 0 3
16390: PUSH
16391: LD_STRING 1
16393: ST_TO_ADDR
// end ; normal := normal & tmp ;
16394: LD_ADDR_VAR 0 5
16398: PUSH
16399: LD_VAR 0 5
16403: PUSH
16404: LD_VAR 0 3
16408: STR
16409: ST_TO_ADDR
// end ;
16410: GO 16310
16412: POP
16413: POP
// for i = 1 to hardcoreCounter do
16414: LD_ADDR_VAR 0 8
16418: PUSH
16419: DOUBLE
16420: LD_INT 1
16422: DEC
16423: ST_TO_ADDR
16424: LD_EXP 67
16428: PUSH
16429: FOR_TO
16430: IFFALSE 16535
// begin tmp := 0 ;
16432: LD_ADDR_VAR 0 3
16436: PUSH
16437: LD_STRING 0
16439: ST_TO_ADDR
// if result [ 2 ] then
16440: LD_VAR 0 2
16444: PUSH
16445: LD_INT 2
16447: ARRAY
16448: IFFALSE 16517
// if result [ 2 ] [ 1 ] = 100 + i then
16450: LD_VAR 0 2
16454: PUSH
16455: LD_INT 2
16457: ARRAY
16458: PUSH
16459: LD_INT 1
16461: ARRAY
16462: PUSH
16463: LD_INT 100
16465: PUSH
16466: LD_VAR 0 8
16470: PLUS
16471: EQUAL
16472: IFFALSE 16517
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16474: LD_ADDR_VAR 0 2
16478: PUSH
16479: LD_VAR 0 2
16483: PPUSH
16484: LD_INT 2
16486: PPUSH
16487: LD_VAR 0 2
16491: PUSH
16492: LD_INT 2
16494: ARRAY
16495: PPUSH
16496: LD_INT 1
16498: PPUSH
16499: CALL_OW 3
16503: PPUSH
16504: CALL_OW 1
16508: ST_TO_ADDR
// tmp := 1 ;
16509: LD_ADDR_VAR 0 3
16513: PUSH
16514: LD_STRING 1
16516: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16517: LD_ADDR_VAR 0 6
16521: PUSH
16522: LD_VAR 0 6
16526: PUSH
16527: LD_VAR 0 3
16531: STR
16532: ST_TO_ADDR
// end ;
16533: GO 16429
16535: POP
16536: POP
// if isGameLoad then
16537: LD_VAR 0 1
16541: IFFALSE 17016
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16543: LD_ADDR_VAR 0 4
16547: PUSH
16548: LD_EXP 70
16552: PUSH
16553: LD_EXP 69
16557: PUSH
16558: LD_EXP 71
16562: PUSH
16563: LD_EXP 68
16567: PUSH
16568: LD_EXP 72
16572: PUSH
16573: LD_EXP 73
16577: PUSH
16578: LD_EXP 74
16582: PUSH
16583: LD_EXP 75
16587: PUSH
16588: LD_EXP 76
16592: PUSH
16593: LD_EXP 77
16597: PUSH
16598: LD_EXP 78
16602: PUSH
16603: LD_EXP 79
16607: PUSH
16608: LD_EXP 80
16612: PUSH
16613: LD_EXP 81
16617: PUSH
16618: LD_EXP 89
16622: PUSH
16623: LD_EXP 90
16627: PUSH
16628: LD_EXP 91
16632: PUSH
16633: LD_EXP 92
16637: PUSH
16638: LD_EXP 94
16642: PUSH
16643: LD_EXP 95
16647: PUSH
16648: LD_EXP 96
16652: PUSH
16653: LD_EXP 99
16657: PUSH
16658: LD_EXP 101
16662: PUSH
16663: LD_EXP 102
16667: PUSH
16668: LD_EXP 103
16672: PUSH
16673: LD_EXP 105
16677: PUSH
16678: LD_EXP 106
16682: PUSH
16683: LD_EXP 109
16687: PUSH
16688: LD_EXP 110
16692: PUSH
16693: LD_EXP 111
16697: PUSH
16698: LD_EXP 112
16702: PUSH
16703: LD_EXP 113
16707: PUSH
16708: LD_EXP 114
16712: PUSH
16713: LD_EXP 115
16717: PUSH
16718: LD_EXP 116
16722: PUSH
16723: LD_EXP 117
16727: PUSH
16728: LD_EXP 82
16732: PUSH
16733: LD_EXP 83
16737: PUSH
16738: LD_EXP 86
16742: PUSH
16743: LD_EXP 87
16747: PUSH
16748: LD_EXP 88
16752: PUSH
16753: LD_EXP 84
16757: PUSH
16758: LD_EXP 85
16762: PUSH
16763: LD_EXP 93
16767: PUSH
16768: LD_EXP 97
16772: PUSH
16773: LD_EXP 98
16777: PUSH
16778: LD_EXP 100
16782: PUSH
16783: LD_EXP 104
16787: PUSH
16788: LD_EXP 107
16792: PUSH
16793: LD_EXP 108
16797: PUSH
16798: LD_EXP 118
16802: PUSH
16803: LD_EXP 119
16807: PUSH
16808: LD_EXP 120
16812: PUSH
16813: LD_EXP 121
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: ST_TO_ADDR
// tmp :=  ;
16874: LD_ADDR_VAR 0 3
16878: PUSH
16879: LD_STRING 
16881: ST_TO_ADDR
// for i = 1 to normalCounter do
16882: LD_ADDR_VAR 0 8
16886: PUSH
16887: DOUBLE
16888: LD_INT 1
16890: DEC
16891: ST_TO_ADDR
16892: LD_EXP 66
16896: PUSH
16897: FOR_TO
16898: IFFALSE 16934
// begin if flags [ i ] then
16900: LD_VAR 0 4
16904: PUSH
16905: LD_VAR 0 8
16909: ARRAY
16910: IFFALSE 16932
// tmp := tmp & i & ; ;
16912: LD_ADDR_VAR 0 3
16916: PUSH
16917: LD_VAR 0 3
16921: PUSH
16922: LD_VAR 0 8
16926: STR
16927: PUSH
16928: LD_STRING ;
16930: STR
16931: ST_TO_ADDR
// end ;
16932: GO 16897
16934: POP
16935: POP
// for i = 1 to hardcoreCounter do
16936: LD_ADDR_VAR 0 8
16940: PUSH
16941: DOUBLE
16942: LD_INT 1
16944: DEC
16945: ST_TO_ADDR
16946: LD_EXP 67
16950: PUSH
16951: FOR_TO
16952: IFFALSE 16998
// begin if flags [ normalCounter + i ] then
16954: LD_VAR 0 4
16958: PUSH
16959: LD_EXP 66
16963: PUSH
16964: LD_VAR 0 8
16968: PLUS
16969: ARRAY
16970: IFFALSE 16996
// tmp := tmp & ( 100 + i ) & ; ;
16972: LD_ADDR_VAR 0 3
16976: PUSH
16977: LD_VAR 0 3
16981: PUSH
16982: LD_INT 100
16984: PUSH
16985: LD_VAR 0 8
16989: PLUS
16990: STR
16991: PUSH
16992: LD_STRING ;
16994: STR
16995: ST_TO_ADDR
// end ;
16996: GO 16951
16998: POP
16999: POP
// if tmp then
17000: LD_VAR 0 3
17004: IFFALSE 17016
// active := tmp ;
17006: LD_ADDR_VAR 0 7
17010: PUSH
17011: LD_VAR 0 3
17015: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17016: LD_STRING getStreamItemsFromMission("
17018: PUSH
17019: LD_VAR 0 5
17023: STR
17024: PUSH
17025: LD_STRING ","
17027: STR
17028: PUSH
17029: LD_VAR 0 6
17033: STR
17034: PUSH
17035: LD_STRING ","
17037: STR
17038: PUSH
17039: LD_VAR 0 7
17043: STR
17044: PUSH
17045: LD_STRING ")
17047: STR
17048: PPUSH
17049: CALL_OW 559
// end else
17053: GO 17062
// ToLua ( getStreamItemsFromMission("","","") ) ;
17055: LD_STRING getStreamItemsFromMission("","","")
17057: PPUSH
17058: CALL_OW 559
// end ;
17062: LD_VAR 0 2
17066: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17067: LD_EXP 65
17071: PUSH
17072: LD_EXP 70
17076: AND
17077: IFFALSE 17201
17079: GO 17081
17081: DISABLE
17082: LD_INT 0
17084: PPUSH
17085: PPUSH
// begin enable ;
17086: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17087: LD_ADDR_VAR 0 2
17091: PUSH
17092: LD_INT 22
17094: PUSH
17095: LD_OWVAR 2
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 2
17106: PUSH
17107: LD_INT 34
17109: PUSH
17110: LD_INT 7
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 34
17119: PUSH
17120: LD_INT 45
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 34
17129: PUSH
17130: LD_INT 28
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 34
17139: PUSH
17140: LD_INT 47
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PPUSH
17158: CALL_OW 69
17162: ST_TO_ADDR
// if not tmp then
17163: LD_VAR 0 2
17167: NOT
17168: IFFALSE 17172
// exit ;
17170: GO 17201
// for i in tmp do
17172: LD_ADDR_VAR 0 1
17176: PUSH
17177: LD_VAR 0 2
17181: PUSH
17182: FOR_IN
17183: IFFALSE 17199
// begin SetLives ( i , 0 ) ;
17185: LD_VAR 0 1
17189: PPUSH
17190: LD_INT 0
17192: PPUSH
17193: CALL_OW 234
// end ;
17197: GO 17182
17199: POP
17200: POP
// end ;
17201: PPOPN 2
17203: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17204: LD_EXP 65
17208: PUSH
17209: LD_EXP 71
17213: AND
17214: IFFALSE 17298
17216: GO 17218
17218: DISABLE
17219: LD_INT 0
17221: PPUSH
17222: PPUSH
// begin enable ;
17223: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17224: LD_ADDR_VAR 0 2
17228: PUSH
17229: LD_INT 22
17231: PUSH
17232: LD_OWVAR 2
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PUSH
17241: LD_INT 32
17243: PUSH
17244: LD_INT 3
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PPUSH
17255: CALL_OW 69
17259: ST_TO_ADDR
// if not tmp then
17260: LD_VAR 0 2
17264: NOT
17265: IFFALSE 17269
// exit ;
17267: GO 17298
// for i in tmp do
17269: LD_ADDR_VAR 0 1
17273: PUSH
17274: LD_VAR 0 2
17278: PUSH
17279: FOR_IN
17280: IFFALSE 17296
// begin SetLives ( i , 0 ) ;
17282: LD_VAR 0 1
17286: PPUSH
17287: LD_INT 0
17289: PPUSH
17290: CALL_OW 234
// end ;
17294: GO 17279
17296: POP
17297: POP
// end ;
17298: PPOPN 2
17300: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17301: LD_EXP 65
17305: PUSH
17306: LD_EXP 68
17310: AND
17311: IFFALSE 17404
17313: GO 17315
17315: DISABLE
17316: LD_INT 0
17318: PPUSH
// begin enable ;
17319: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17320: LD_ADDR_VAR 0 1
17324: PUSH
17325: LD_INT 22
17327: PUSH
17328: LD_OWVAR 2
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 2
17339: PUSH
17340: LD_INT 25
17342: PUSH
17343: LD_INT 5
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PUSH
17350: LD_INT 25
17352: PUSH
17353: LD_INT 9
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 25
17362: PUSH
17363: LD_INT 8
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PPUSH
17380: CALL_OW 69
17384: PUSH
17385: FOR_IN
17386: IFFALSE 17402
// begin SetClass ( i , 1 ) ;
17388: LD_VAR 0 1
17392: PPUSH
17393: LD_INT 1
17395: PPUSH
17396: CALL_OW 336
// end ;
17400: GO 17385
17402: POP
17403: POP
// end ;
17404: PPOPN 1
17406: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17407: LD_EXP 65
17411: PUSH
17412: LD_EXP 69
17416: AND
17417: PUSH
17418: LD_OWVAR 65
17422: PUSH
17423: LD_INT 7
17425: LESS
17426: AND
17427: IFFALSE 17441
17429: GO 17431
17431: DISABLE
// begin enable ;
17432: ENABLE
// game_speed := 7 ;
17433: LD_ADDR_OWVAR 65
17437: PUSH
17438: LD_INT 7
17440: ST_TO_ADDR
// end ;
17441: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17442: LD_EXP 65
17446: PUSH
17447: LD_EXP 72
17451: AND
17452: IFFALSE 17654
17454: GO 17456
17456: DISABLE
17457: LD_INT 0
17459: PPUSH
17460: PPUSH
17461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17462: LD_ADDR_VAR 0 3
17466: PUSH
17467: LD_INT 81
17469: PUSH
17470: LD_OWVAR 2
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PUSH
17479: LD_INT 21
17481: PUSH
17482: LD_INT 1
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PPUSH
17493: CALL_OW 69
17497: ST_TO_ADDR
// if not tmp then
17498: LD_VAR 0 3
17502: NOT
17503: IFFALSE 17507
// exit ;
17505: GO 17654
// if tmp > 5 then
17507: LD_VAR 0 3
17511: PUSH
17512: LD_INT 5
17514: GREATER
17515: IFFALSE 17527
// k := 5 else
17517: LD_ADDR_VAR 0 2
17521: PUSH
17522: LD_INT 5
17524: ST_TO_ADDR
17525: GO 17537
// k := tmp ;
17527: LD_ADDR_VAR 0 2
17531: PUSH
17532: LD_VAR 0 3
17536: ST_TO_ADDR
// for i := 1 to k do
17537: LD_ADDR_VAR 0 1
17541: PUSH
17542: DOUBLE
17543: LD_INT 1
17545: DEC
17546: ST_TO_ADDR
17547: LD_VAR 0 2
17551: PUSH
17552: FOR_TO
17553: IFFALSE 17652
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17555: LD_VAR 0 3
17559: PUSH
17560: LD_VAR 0 1
17564: ARRAY
17565: PPUSH
17566: LD_VAR 0 1
17570: PUSH
17571: LD_INT 4
17573: MOD
17574: PUSH
17575: LD_INT 1
17577: PLUS
17578: PPUSH
17579: CALL_OW 259
17583: PUSH
17584: LD_INT 10
17586: LESS
17587: IFFALSE 17650
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17589: LD_VAR 0 3
17593: PUSH
17594: LD_VAR 0 1
17598: ARRAY
17599: PPUSH
17600: LD_VAR 0 1
17604: PUSH
17605: LD_INT 4
17607: MOD
17608: PUSH
17609: LD_INT 1
17611: PLUS
17612: PPUSH
17613: LD_VAR 0 3
17617: PUSH
17618: LD_VAR 0 1
17622: ARRAY
17623: PPUSH
17624: LD_VAR 0 1
17628: PUSH
17629: LD_INT 4
17631: MOD
17632: PUSH
17633: LD_INT 1
17635: PLUS
17636: PPUSH
17637: CALL_OW 259
17641: PUSH
17642: LD_INT 1
17644: PLUS
17645: PPUSH
17646: CALL_OW 237
17650: GO 17552
17652: POP
17653: POP
// end ;
17654: PPOPN 3
17656: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17657: LD_EXP 65
17661: PUSH
17662: LD_EXP 73
17666: AND
17667: IFFALSE 17687
17669: GO 17671
17671: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17672: LD_INT 4
17674: PPUSH
17675: LD_OWVAR 2
17679: PPUSH
17680: LD_INT 0
17682: PPUSH
17683: CALL_OW 324
17687: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17688: LD_EXP 65
17692: PUSH
17693: LD_EXP 102
17697: AND
17698: IFFALSE 17718
17700: GO 17702
17702: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17703: LD_INT 19
17705: PPUSH
17706: LD_OWVAR 2
17710: PPUSH
17711: LD_INT 0
17713: PPUSH
17714: CALL_OW 324
17718: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17719: LD_EXP 65
17723: PUSH
17724: LD_EXP 74
17728: AND
17729: IFFALSE 17831
17731: GO 17733
17733: DISABLE
17734: LD_INT 0
17736: PPUSH
17737: PPUSH
// begin enable ;
17738: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17739: LD_ADDR_VAR 0 2
17743: PUSH
17744: LD_INT 22
17746: PUSH
17747: LD_OWVAR 2
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PUSH
17756: LD_INT 2
17758: PUSH
17759: LD_INT 34
17761: PUSH
17762: LD_INT 11
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 34
17771: PUSH
17772: LD_INT 30
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: LIST
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PPUSH
17788: CALL_OW 69
17792: ST_TO_ADDR
// if not tmp then
17793: LD_VAR 0 2
17797: NOT
17798: IFFALSE 17802
// exit ;
17800: GO 17831
// for i in tmp do
17802: LD_ADDR_VAR 0 1
17806: PUSH
17807: LD_VAR 0 2
17811: PUSH
17812: FOR_IN
17813: IFFALSE 17829
// begin SetLives ( i , 0 ) ;
17815: LD_VAR 0 1
17819: PPUSH
17820: LD_INT 0
17822: PPUSH
17823: CALL_OW 234
// end ;
17827: GO 17812
17829: POP
17830: POP
// end ;
17831: PPOPN 2
17833: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17834: LD_EXP 65
17838: PUSH
17839: LD_EXP 75
17843: AND
17844: IFFALSE 17864
17846: GO 17848
17848: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17849: LD_INT 32
17851: PPUSH
17852: LD_OWVAR 2
17856: PPUSH
17857: LD_INT 0
17859: PPUSH
17860: CALL_OW 324
17864: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17865: LD_EXP 65
17869: PUSH
17870: LD_EXP 76
17874: AND
17875: IFFALSE 18056
17877: GO 17879
17879: DISABLE
17880: LD_INT 0
17882: PPUSH
17883: PPUSH
17884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17885: LD_ADDR_VAR 0 2
17889: PUSH
17890: LD_INT 22
17892: PUSH
17893: LD_OWVAR 2
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 33
17904: PUSH
17905: LD_INT 3
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PPUSH
17916: CALL_OW 69
17920: ST_TO_ADDR
// if not tmp then
17921: LD_VAR 0 2
17925: NOT
17926: IFFALSE 17930
// exit ;
17928: GO 18056
// side := 0 ;
17930: LD_ADDR_VAR 0 3
17934: PUSH
17935: LD_INT 0
17937: ST_TO_ADDR
// for i := 1 to 8 do
17938: LD_ADDR_VAR 0 1
17942: PUSH
17943: DOUBLE
17944: LD_INT 1
17946: DEC
17947: ST_TO_ADDR
17948: LD_INT 8
17950: PUSH
17951: FOR_TO
17952: IFFALSE 18000
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17954: LD_OWVAR 2
17958: PUSH
17959: LD_VAR 0 1
17963: NONEQUAL
17964: PUSH
17965: LD_OWVAR 2
17969: PPUSH
17970: LD_VAR 0 1
17974: PPUSH
17975: CALL_OW 81
17979: PUSH
17980: LD_INT 2
17982: EQUAL
17983: AND
17984: IFFALSE 17998
// begin side := i ;
17986: LD_ADDR_VAR 0 3
17990: PUSH
17991: LD_VAR 0 1
17995: ST_TO_ADDR
// break ;
17996: GO 18000
// end ;
17998: GO 17951
18000: POP
18001: POP
// if not side then
18002: LD_VAR 0 3
18006: NOT
18007: IFFALSE 18011
// exit ;
18009: GO 18056
// for i := 1 to tmp do
18011: LD_ADDR_VAR 0 1
18015: PUSH
18016: DOUBLE
18017: LD_INT 1
18019: DEC
18020: ST_TO_ADDR
18021: LD_VAR 0 2
18025: PUSH
18026: FOR_TO
18027: IFFALSE 18054
// if Prob ( 60 ) then
18029: LD_INT 60
18031: PPUSH
18032: CALL_OW 13
18036: IFFALSE 18052
// SetSide ( i , side ) ;
18038: LD_VAR 0 1
18042: PPUSH
18043: LD_VAR 0 3
18047: PPUSH
18048: CALL_OW 235
18052: GO 18026
18054: POP
18055: POP
// end ;
18056: PPOPN 3
18058: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18059: LD_EXP 65
18063: PUSH
18064: LD_EXP 78
18068: AND
18069: IFFALSE 18188
18071: GO 18073
18073: DISABLE
18074: LD_INT 0
18076: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18077: LD_ADDR_VAR 0 1
18081: PUSH
18082: LD_INT 22
18084: PUSH
18085: LD_OWVAR 2
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 21
18096: PUSH
18097: LD_INT 1
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 3
18106: PUSH
18107: LD_INT 23
18109: PUSH
18110: LD_INT 0
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: LIST
18125: PPUSH
18126: CALL_OW 69
18130: PUSH
18131: FOR_IN
18132: IFFALSE 18186
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18134: LD_VAR 0 1
18138: PPUSH
18139: CALL_OW 257
18143: PUSH
18144: LD_INT 1
18146: PUSH
18147: LD_INT 2
18149: PUSH
18150: LD_INT 3
18152: PUSH
18153: LD_INT 4
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: IN
18162: IFFALSE 18184
// SetClass ( un , rand ( 1 , 4 ) ) ;
18164: LD_VAR 0 1
18168: PPUSH
18169: LD_INT 1
18171: PPUSH
18172: LD_INT 4
18174: PPUSH
18175: CALL_OW 12
18179: PPUSH
18180: CALL_OW 336
18184: GO 18131
18186: POP
18187: POP
// end ;
18188: PPOPN 1
18190: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18191: LD_EXP 65
18195: PUSH
18196: LD_EXP 77
18200: AND
18201: IFFALSE 18280
18203: GO 18205
18205: DISABLE
18206: LD_INT 0
18208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18209: LD_ADDR_VAR 0 1
18213: PUSH
18214: LD_INT 22
18216: PUSH
18217: LD_OWVAR 2
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 21
18228: PUSH
18229: LD_INT 3
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PPUSH
18240: CALL_OW 69
18244: ST_TO_ADDR
// if not tmp then
18245: LD_VAR 0 1
18249: NOT
18250: IFFALSE 18254
// exit ;
18252: GO 18280
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18254: LD_VAR 0 1
18258: PUSH
18259: LD_INT 1
18261: PPUSH
18262: LD_VAR 0 1
18266: PPUSH
18267: CALL_OW 12
18271: ARRAY
18272: PPUSH
18273: LD_INT 100
18275: PPUSH
18276: CALL_OW 234
// end ;
18280: PPOPN 1
18282: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18283: LD_EXP 65
18287: PUSH
18288: LD_EXP 79
18292: AND
18293: IFFALSE 18391
18295: GO 18297
18297: DISABLE
18298: LD_INT 0
18300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18301: LD_ADDR_VAR 0 1
18305: PUSH
18306: LD_INT 22
18308: PUSH
18309: LD_OWVAR 2
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 21
18320: PUSH
18321: LD_INT 1
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PPUSH
18332: CALL_OW 69
18336: ST_TO_ADDR
// if not tmp then
18337: LD_VAR 0 1
18341: NOT
18342: IFFALSE 18346
// exit ;
18344: GO 18391
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18346: LD_VAR 0 1
18350: PUSH
18351: LD_INT 1
18353: PPUSH
18354: LD_VAR 0 1
18358: PPUSH
18359: CALL_OW 12
18363: ARRAY
18364: PPUSH
18365: LD_INT 1
18367: PPUSH
18368: LD_INT 4
18370: PPUSH
18371: CALL_OW 12
18375: PPUSH
18376: LD_INT 3000
18378: PPUSH
18379: LD_INT 9000
18381: PPUSH
18382: CALL_OW 12
18386: PPUSH
18387: CALL_OW 492
// end ;
18391: PPOPN 1
18393: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18394: LD_EXP 65
18398: PUSH
18399: LD_EXP 80
18403: AND
18404: IFFALSE 18424
18406: GO 18408
18408: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18409: LD_INT 1
18411: PPUSH
18412: LD_OWVAR 2
18416: PPUSH
18417: LD_INT 0
18419: PPUSH
18420: CALL_OW 324
18424: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18425: LD_EXP 65
18429: PUSH
18430: LD_EXP 81
18434: AND
18435: IFFALSE 18518
18437: GO 18439
18439: DISABLE
18440: LD_INT 0
18442: PPUSH
18443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18444: LD_ADDR_VAR 0 2
18448: PUSH
18449: LD_INT 22
18451: PUSH
18452: LD_OWVAR 2
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 21
18463: PUSH
18464: LD_INT 3
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PPUSH
18475: CALL_OW 69
18479: ST_TO_ADDR
// if not tmp then
18480: LD_VAR 0 2
18484: NOT
18485: IFFALSE 18489
// exit ;
18487: GO 18518
// for i in tmp do
18489: LD_ADDR_VAR 0 1
18493: PUSH
18494: LD_VAR 0 2
18498: PUSH
18499: FOR_IN
18500: IFFALSE 18516
// SetBLevel ( i , 10 ) ;
18502: LD_VAR 0 1
18506: PPUSH
18507: LD_INT 10
18509: PPUSH
18510: CALL_OW 241
18514: GO 18499
18516: POP
18517: POP
// end ;
18518: PPOPN 2
18520: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18521: LD_EXP 65
18525: PUSH
18526: LD_EXP 82
18530: AND
18531: IFFALSE 18642
18533: GO 18535
18535: DISABLE
18536: LD_INT 0
18538: PPUSH
18539: PPUSH
18540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18541: LD_ADDR_VAR 0 3
18545: PUSH
18546: LD_INT 22
18548: PUSH
18549: LD_OWVAR 2
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 25
18560: PUSH
18561: LD_INT 1
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PPUSH
18572: CALL_OW 69
18576: ST_TO_ADDR
// if not tmp then
18577: LD_VAR 0 3
18581: NOT
18582: IFFALSE 18586
// exit ;
18584: GO 18642
// un := tmp [ rand ( 1 , tmp ) ] ;
18586: LD_ADDR_VAR 0 2
18590: PUSH
18591: LD_VAR 0 3
18595: PUSH
18596: LD_INT 1
18598: PPUSH
18599: LD_VAR 0 3
18603: PPUSH
18604: CALL_OW 12
18608: ARRAY
18609: ST_TO_ADDR
// if Crawls ( un ) then
18610: LD_VAR 0 2
18614: PPUSH
18615: CALL_OW 318
18619: IFFALSE 18630
// ComWalk ( un ) ;
18621: LD_VAR 0 2
18625: PPUSH
18626: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18630: LD_VAR 0 2
18634: PPUSH
18635: LD_INT 5
18637: PPUSH
18638: CALL_OW 336
// end ;
18642: PPOPN 3
18644: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18645: LD_EXP 65
18649: PUSH
18650: LD_EXP 83
18654: AND
18655: PUSH
18656: LD_OWVAR 67
18660: PUSH
18661: LD_INT 4
18663: LESS
18664: AND
18665: IFFALSE 18684
18667: GO 18669
18669: DISABLE
// begin Difficulty := Difficulty + 1 ;
18670: LD_ADDR_OWVAR 67
18674: PUSH
18675: LD_OWVAR 67
18679: PUSH
18680: LD_INT 1
18682: PLUS
18683: ST_TO_ADDR
// end ;
18684: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18685: LD_EXP 65
18689: PUSH
18690: LD_EXP 84
18694: AND
18695: IFFALSE 18798
18697: GO 18699
18699: DISABLE
18700: LD_INT 0
18702: PPUSH
// begin for i := 1 to 5 do
18703: LD_ADDR_VAR 0 1
18707: PUSH
18708: DOUBLE
18709: LD_INT 1
18711: DEC
18712: ST_TO_ADDR
18713: LD_INT 5
18715: PUSH
18716: FOR_TO
18717: IFFALSE 18796
// begin uc_nation := nation_nature ;
18719: LD_ADDR_OWVAR 21
18723: PUSH
18724: LD_INT 0
18726: ST_TO_ADDR
// uc_side := 0 ;
18727: LD_ADDR_OWVAR 20
18731: PUSH
18732: LD_INT 0
18734: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18735: LD_ADDR_OWVAR 29
18739: PUSH
18740: LD_INT 12
18742: PUSH
18743: LD_INT 12
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: ST_TO_ADDR
// hc_agressivity := 20 ;
18750: LD_ADDR_OWVAR 35
18754: PUSH
18755: LD_INT 20
18757: ST_TO_ADDR
// hc_class := class_tiger ;
18758: LD_ADDR_OWVAR 28
18762: PUSH
18763: LD_INT 14
18765: ST_TO_ADDR
// hc_gallery :=  ;
18766: LD_ADDR_OWVAR 33
18770: PUSH
18771: LD_STRING 
18773: ST_TO_ADDR
// hc_name :=  ;
18774: LD_ADDR_OWVAR 26
18778: PUSH
18779: LD_STRING 
18781: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18782: CALL_OW 44
18786: PPUSH
18787: LD_INT 0
18789: PPUSH
18790: CALL_OW 51
// end ;
18794: GO 18716
18796: POP
18797: POP
// end ;
18798: PPOPN 1
18800: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18801: LD_EXP 65
18805: PUSH
18806: LD_EXP 85
18810: AND
18811: IFFALSE 18820
18813: GO 18815
18815: DISABLE
// StreamSibBomb ;
18816: CALL 18821 0 0
18820: END
// export function StreamSibBomb ; var i , x , y ; begin
18821: LD_INT 0
18823: PPUSH
18824: PPUSH
18825: PPUSH
18826: PPUSH
// result := false ;
18827: LD_ADDR_VAR 0 1
18831: PUSH
18832: LD_INT 0
18834: ST_TO_ADDR
// for i := 1 to 16 do
18835: LD_ADDR_VAR 0 2
18839: PUSH
18840: DOUBLE
18841: LD_INT 1
18843: DEC
18844: ST_TO_ADDR
18845: LD_INT 16
18847: PUSH
18848: FOR_TO
18849: IFFALSE 19048
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18851: LD_ADDR_VAR 0 3
18855: PUSH
18856: LD_INT 10
18858: PUSH
18859: LD_INT 20
18861: PUSH
18862: LD_INT 30
18864: PUSH
18865: LD_INT 40
18867: PUSH
18868: LD_INT 50
18870: PUSH
18871: LD_INT 60
18873: PUSH
18874: LD_INT 70
18876: PUSH
18877: LD_INT 80
18879: PUSH
18880: LD_INT 90
18882: PUSH
18883: LD_INT 100
18885: PUSH
18886: LD_INT 110
18888: PUSH
18889: LD_INT 120
18891: PUSH
18892: LD_INT 130
18894: PUSH
18895: LD_INT 140
18897: PUSH
18898: LD_INT 150
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 1
18920: PPUSH
18921: LD_INT 15
18923: PPUSH
18924: CALL_OW 12
18928: ARRAY
18929: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18930: LD_ADDR_VAR 0 4
18934: PUSH
18935: LD_INT 10
18937: PUSH
18938: LD_INT 20
18940: PUSH
18941: LD_INT 30
18943: PUSH
18944: LD_INT 40
18946: PUSH
18947: LD_INT 50
18949: PUSH
18950: LD_INT 60
18952: PUSH
18953: LD_INT 70
18955: PUSH
18956: LD_INT 80
18958: PUSH
18959: LD_INT 90
18961: PUSH
18962: LD_INT 100
18964: PUSH
18965: LD_INT 110
18967: PUSH
18968: LD_INT 120
18970: PUSH
18971: LD_INT 130
18973: PUSH
18974: LD_INT 140
18976: PUSH
18977: LD_INT 150
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 1
18999: PPUSH
19000: LD_INT 15
19002: PPUSH
19003: CALL_OW 12
19007: ARRAY
19008: ST_TO_ADDR
// if ValidHex ( x , y ) then
19009: LD_VAR 0 3
19013: PPUSH
19014: LD_VAR 0 4
19018: PPUSH
19019: CALL_OW 488
19023: IFFALSE 19046
// begin result := [ x , y ] ;
19025: LD_ADDR_VAR 0 1
19029: PUSH
19030: LD_VAR 0 3
19034: PUSH
19035: LD_VAR 0 4
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: ST_TO_ADDR
// break ;
19044: GO 19048
// end ; end ;
19046: GO 18848
19048: POP
19049: POP
// if result then
19050: LD_VAR 0 1
19054: IFFALSE 19114
// begin ToLua ( playSibBomb() ) ;
19056: LD_STRING playSibBomb()
19058: PPUSH
19059: CALL_OW 559
// wait ( 0 0$14 ) ;
19063: LD_INT 490
19065: PPUSH
19066: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19070: LD_VAR 0 1
19074: PUSH
19075: LD_INT 1
19077: ARRAY
19078: PPUSH
19079: LD_VAR 0 1
19083: PUSH
19084: LD_INT 2
19086: ARRAY
19087: PPUSH
19088: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19092: LD_VAR 0 1
19096: PUSH
19097: LD_INT 1
19099: ARRAY
19100: PPUSH
19101: LD_VAR 0 1
19105: PUSH
19106: LD_INT 2
19108: ARRAY
19109: PPUSH
19110: CALL_OW 429
// end ; end ;
19114: LD_VAR 0 1
19118: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19119: LD_EXP 65
19123: PUSH
19124: LD_EXP 87
19128: AND
19129: IFFALSE 19141
19131: GO 19133
19133: DISABLE
// YouLost (  ) ;
19134: LD_STRING 
19136: PPUSH
19137: CALL_OW 104
19141: END
// every 0 0$1 trigger StreamModeActive and sFog do
19142: LD_EXP 65
19146: PUSH
19147: LD_EXP 86
19151: AND
19152: IFFALSE 19166
19154: GO 19156
19156: DISABLE
// FogOff ( your_side ) ;
19157: LD_OWVAR 2
19161: PPUSH
19162: CALL_OW 344
19166: END
// every 0 0$1 trigger StreamModeActive and sSun do
19167: LD_EXP 65
19171: PUSH
19172: LD_EXP 88
19176: AND
19177: IFFALSE 19205
19179: GO 19181
19181: DISABLE
// begin solar_recharge_percent := 0 ;
19182: LD_ADDR_OWVAR 79
19186: PUSH
19187: LD_INT 0
19189: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19190: LD_INT 10500
19192: PPUSH
19193: CALL_OW 67
// solar_recharge_percent := 100 ;
19197: LD_ADDR_OWVAR 79
19201: PUSH
19202: LD_INT 100
19204: ST_TO_ADDR
// end ;
19205: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19206: LD_EXP 65
19210: PUSH
19211: LD_EXP 89
19215: AND
19216: IFFALSE 19455
19218: GO 19220
19220: DISABLE
19221: LD_INT 0
19223: PPUSH
19224: PPUSH
19225: PPUSH
// begin tmp := [ ] ;
19226: LD_ADDR_VAR 0 3
19230: PUSH
19231: EMPTY
19232: ST_TO_ADDR
// for i := 1 to 6 do
19233: LD_ADDR_VAR 0 1
19237: PUSH
19238: DOUBLE
19239: LD_INT 1
19241: DEC
19242: ST_TO_ADDR
19243: LD_INT 6
19245: PUSH
19246: FOR_TO
19247: IFFALSE 19352
// begin uc_nation := nation_nature ;
19249: LD_ADDR_OWVAR 21
19253: PUSH
19254: LD_INT 0
19256: ST_TO_ADDR
// uc_side := 0 ;
19257: LD_ADDR_OWVAR 20
19261: PUSH
19262: LD_INT 0
19264: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19265: LD_ADDR_OWVAR 29
19269: PUSH
19270: LD_INT 12
19272: PUSH
19273: LD_INT 12
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: ST_TO_ADDR
// hc_agressivity := 20 ;
19280: LD_ADDR_OWVAR 35
19284: PUSH
19285: LD_INT 20
19287: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19288: LD_ADDR_OWVAR 28
19292: PUSH
19293: LD_INT 17
19295: ST_TO_ADDR
// hc_gallery :=  ;
19296: LD_ADDR_OWVAR 33
19300: PUSH
19301: LD_STRING 
19303: ST_TO_ADDR
// hc_name :=  ;
19304: LD_ADDR_OWVAR 26
19308: PUSH
19309: LD_STRING 
19311: ST_TO_ADDR
// un := CreateHuman ;
19312: LD_ADDR_VAR 0 2
19316: PUSH
19317: CALL_OW 44
19321: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19322: LD_VAR 0 2
19326: PPUSH
19327: LD_INT 1
19329: PPUSH
19330: CALL_OW 51
// tmp := tmp ^ un ;
19334: LD_ADDR_VAR 0 3
19338: PUSH
19339: LD_VAR 0 3
19343: PUSH
19344: LD_VAR 0 2
19348: ADD
19349: ST_TO_ADDR
// end ;
19350: GO 19246
19352: POP
19353: POP
// repeat wait ( 0 0$1 ) ;
19354: LD_INT 35
19356: PPUSH
19357: CALL_OW 67
// for un in tmp do
19361: LD_ADDR_VAR 0 2
19365: PUSH
19366: LD_VAR 0 3
19370: PUSH
19371: FOR_IN
19372: IFFALSE 19446
// begin if IsDead ( un ) then
19374: LD_VAR 0 2
19378: PPUSH
19379: CALL_OW 301
19383: IFFALSE 19403
// begin tmp := tmp diff un ;
19385: LD_ADDR_VAR 0 3
19389: PUSH
19390: LD_VAR 0 3
19394: PUSH
19395: LD_VAR 0 2
19399: DIFF
19400: ST_TO_ADDR
// continue ;
19401: GO 19371
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19403: LD_VAR 0 2
19407: PPUSH
19408: LD_INT 3
19410: PUSH
19411: LD_INT 22
19413: PUSH
19414: LD_INT 0
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PPUSH
19425: CALL_OW 69
19429: PPUSH
19430: LD_VAR 0 2
19434: PPUSH
19435: CALL_OW 74
19439: PPUSH
19440: CALL_OW 115
// end ;
19444: GO 19371
19446: POP
19447: POP
// until not tmp ;
19448: LD_VAR 0 3
19452: NOT
19453: IFFALSE 19354
// end ;
19455: PPOPN 3
19457: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19458: LD_EXP 65
19462: PUSH
19463: LD_EXP 90
19467: AND
19468: IFFALSE 19522
19470: GO 19472
19472: DISABLE
// begin ToLua ( displayTroll(); ) ;
19473: LD_STRING displayTroll();
19475: PPUSH
19476: CALL_OW 559
// wait ( 3 3$00 ) ;
19480: LD_INT 6300
19482: PPUSH
19483: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19487: LD_STRING hideTroll();
19489: PPUSH
19490: CALL_OW 559
// wait ( 1 1$00 ) ;
19494: LD_INT 2100
19496: PPUSH
19497: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19501: LD_STRING displayTroll();
19503: PPUSH
19504: CALL_OW 559
// wait ( 1 1$00 ) ;
19508: LD_INT 2100
19510: PPUSH
19511: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19515: LD_STRING hideTroll();
19517: PPUSH
19518: CALL_OW 559
// end ;
19522: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19523: LD_EXP 65
19527: PUSH
19528: LD_EXP 91
19532: AND
19533: IFFALSE 19596
19535: GO 19537
19537: DISABLE
19538: LD_INT 0
19540: PPUSH
// begin p := 0 ;
19541: LD_ADDR_VAR 0 1
19545: PUSH
19546: LD_INT 0
19548: ST_TO_ADDR
// repeat game_speed := 1 ;
19549: LD_ADDR_OWVAR 65
19553: PUSH
19554: LD_INT 1
19556: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19557: LD_INT 35
19559: PPUSH
19560: CALL_OW 67
// p := p + 1 ;
19564: LD_ADDR_VAR 0 1
19568: PUSH
19569: LD_VAR 0 1
19573: PUSH
19574: LD_INT 1
19576: PLUS
19577: ST_TO_ADDR
// until p >= 60 ;
19578: LD_VAR 0 1
19582: PUSH
19583: LD_INT 60
19585: GREATEREQUAL
19586: IFFALSE 19549
// game_speed := 4 ;
19588: LD_ADDR_OWVAR 65
19592: PUSH
19593: LD_INT 4
19595: ST_TO_ADDR
// end ;
19596: PPOPN 1
19598: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19599: LD_EXP 65
19603: PUSH
19604: LD_EXP 92
19608: AND
19609: IFFALSE 19755
19611: GO 19613
19613: DISABLE
19614: LD_INT 0
19616: PPUSH
19617: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19618: LD_ADDR_VAR 0 1
19622: PUSH
19623: LD_INT 22
19625: PUSH
19626: LD_OWVAR 2
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 2
19637: PUSH
19638: LD_INT 30
19640: PUSH
19641: LD_INT 0
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 30
19650: PUSH
19651: LD_INT 1
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: LIST
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PPUSH
19667: CALL_OW 69
19671: ST_TO_ADDR
// if not depot then
19672: LD_VAR 0 1
19676: NOT
19677: IFFALSE 19681
// exit ;
19679: GO 19755
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19681: LD_ADDR_VAR 0 2
19685: PUSH
19686: LD_VAR 0 1
19690: PUSH
19691: LD_INT 1
19693: PPUSH
19694: LD_VAR 0 1
19698: PPUSH
19699: CALL_OW 12
19703: ARRAY
19704: PPUSH
19705: CALL_OW 274
19709: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19710: LD_VAR 0 2
19714: PPUSH
19715: LD_INT 1
19717: PPUSH
19718: LD_INT 0
19720: PPUSH
19721: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19725: LD_VAR 0 2
19729: PPUSH
19730: LD_INT 2
19732: PPUSH
19733: LD_INT 0
19735: PPUSH
19736: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19740: LD_VAR 0 2
19744: PPUSH
19745: LD_INT 3
19747: PPUSH
19748: LD_INT 0
19750: PPUSH
19751: CALL_OW 277
// end ;
19755: PPOPN 2
19757: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19758: LD_EXP 65
19762: PUSH
19763: LD_EXP 93
19767: AND
19768: IFFALSE 19865
19770: GO 19772
19772: DISABLE
19773: LD_INT 0
19775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19776: LD_ADDR_VAR 0 1
19780: PUSH
19781: LD_INT 22
19783: PUSH
19784: LD_OWVAR 2
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 21
19795: PUSH
19796: LD_INT 1
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 3
19805: PUSH
19806: LD_INT 23
19808: PUSH
19809: LD_INT 0
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: LIST
19824: PPUSH
19825: CALL_OW 69
19829: ST_TO_ADDR
// if not tmp then
19830: LD_VAR 0 1
19834: NOT
19835: IFFALSE 19839
// exit ;
19837: GO 19865
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19839: LD_VAR 0 1
19843: PUSH
19844: LD_INT 1
19846: PPUSH
19847: LD_VAR 0 1
19851: PPUSH
19852: CALL_OW 12
19856: ARRAY
19857: PPUSH
19858: LD_INT 200
19860: PPUSH
19861: CALL_OW 234
// end ;
19865: PPOPN 1
19867: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19868: LD_EXP 65
19872: PUSH
19873: LD_EXP 94
19877: AND
19878: IFFALSE 19957
19880: GO 19882
19882: DISABLE
19883: LD_INT 0
19885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19886: LD_ADDR_VAR 0 1
19890: PUSH
19891: LD_INT 22
19893: PUSH
19894: LD_OWVAR 2
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 21
19905: PUSH
19906: LD_INT 2
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PPUSH
19917: CALL_OW 69
19921: ST_TO_ADDR
// if not tmp then
19922: LD_VAR 0 1
19926: NOT
19927: IFFALSE 19931
// exit ;
19929: GO 19957
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19931: LD_VAR 0 1
19935: PUSH
19936: LD_INT 1
19938: PPUSH
19939: LD_VAR 0 1
19943: PPUSH
19944: CALL_OW 12
19948: ARRAY
19949: PPUSH
19950: LD_INT 60
19952: PPUSH
19953: CALL_OW 234
// end ;
19957: PPOPN 1
19959: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19960: LD_EXP 65
19964: PUSH
19965: LD_EXP 95
19969: AND
19970: IFFALSE 20069
19972: GO 19974
19974: DISABLE
19975: LD_INT 0
19977: PPUSH
19978: PPUSH
// begin enable ;
19979: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19980: LD_ADDR_VAR 0 1
19984: PUSH
19985: LD_INT 22
19987: PUSH
19988: LD_OWVAR 2
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 61
19999: PUSH
20000: EMPTY
20001: LIST
20002: PUSH
20003: LD_INT 33
20005: PUSH
20006: LD_INT 2
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: LIST
20017: PPUSH
20018: CALL_OW 69
20022: ST_TO_ADDR
// if not tmp then
20023: LD_VAR 0 1
20027: NOT
20028: IFFALSE 20032
// exit ;
20030: GO 20069
// for i in tmp do
20032: LD_ADDR_VAR 0 2
20036: PUSH
20037: LD_VAR 0 1
20041: PUSH
20042: FOR_IN
20043: IFFALSE 20067
// if IsControledBy ( i ) then
20045: LD_VAR 0 2
20049: PPUSH
20050: CALL_OW 312
20054: IFFALSE 20065
// ComUnlink ( i ) ;
20056: LD_VAR 0 2
20060: PPUSH
20061: CALL_OW 136
20065: GO 20042
20067: POP
20068: POP
// end ;
20069: PPOPN 2
20071: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20072: LD_EXP 65
20076: PUSH
20077: LD_EXP 96
20081: AND
20082: IFFALSE 20222
20084: GO 20086
20086: DISABLE
20087: LD_INT 0
20089: PPUSH
20090: PPUSH
// begin ToLua ( displayPowell(); ) ;
20091: LD_STRING displayPowell();
20093: PPUSH
20094: CALL_OW 559
// uc_side := 0 ;
20098: LD_ADDR_OWVAR 20
20102: PUSH
20103: LD_INT 0
20105: ST_TO_ADDR
// uc_nation := 2 ;
20106: LD_ADDR_OWVAR 21
20110: PUSH
20111: LD_INT 2
20113: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20114: LD_ADDR_OWVAR 37
20118: PUSH
20119: LD_INT 14
20121: ST_TO_ADDR
// vc_engine := engine_siberite ;
20122: LD_ADDR_OWVAR 39
20126: PUSH
20127: LD_INT 3
20129: ST_TO_ADDR
// vc_control := control_apeman ;
20130: LD_ADDR_OWVAR 38
20134: PUSH
20135: LD_INT 5
20137: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20138: LD_ADDR_OWVAR 40
20142: PUSH
20143: LD_INT 29
20145: ST_TO_ADDR
// un := CreateVehicle ;
20146: LD_ADDR_VAR 0 2
20150: PUSH
20151: CALL_OW 45
20155: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20156: LD_VAR 0 2
20160: PPUSH
20161: LD_INT 1
20163: PPUSH
20164: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20168: LD_INT 35
20170: PPUSH
20171: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20175: LD_VAR 0 2
20179: PPUSH
20180: LD_INT 22
20182: PUSH
20183: LD_OWVAR 2
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PPUSH
20192: CALL_OW 69
20196: PPUSH
20197: LD_VAR 0 2
20201: PPUSH
20202: CALL_OW 74
20206: PPUSH
20207: CALL_OW 115
// until IsDead ( un ) ;
20211: LD_VAR 0 2
20215: PPUSH
20216: CALL_OW 301
20220: IFFALSE 20168
// end ;
20222: PPOPN 2
20224: END
// every 0 0$1 trigger StreamModeActive and sStu do
20225: LD_EXP 65
20229: PUSH
20230: LD_EXP 104
20234: AND
20235: IFFALSE 20251
20237: GO 20239
20239: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20240: LD_STRING displayStucuk();
20242: PPUSH
20243: CALL_OW 559
// ResetFog ;
20247: CALL_OW 335
// end ;
20251: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20252: LD_EXP 65
20256: PUSH
20257: LD_EXP 97
20261: AND
20262: IFFALSE 20403
20264: GO 20266
20266: DISABLE
20267: LD_INT 0
20269: PPUSH
20270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20271: LD_ADDR_VAR 0 2
20275: PUSH
20276: LD_INT 22
20278: PUSH
20279: LD_OWVAR 2
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 21
20290: PUSH
20291: LD_INT 1
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PPUSH
20302: CALL_OW 69
20306: ST_TO_ADDR
// if not tmp then
20307: LD_VAR 0 2
20311: NOT
20312: IFFALSE 20316
// exit ;
20314: GO 20403
// un := tmp [ rand ( 1 , tmp ) ] ;
20316: LD_ADDR_VAR 0 1
20320: PUSH
20321: LD_VAR 0 2
20325: PUSH
20326: LD_INT 1
20328: PPUSH
20329: LD_VAR 0 2
20333: PPUSH
20334: CALL_OW 12
20338: ARRAY
20339: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20340: LD_VAR 0 1
20344: PPUSH
20345: LD_INT 0
20347: PPUSH
20348: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20352: LD_VAR 0 1
20356: PPUSH
20357: LD_OWVAR 3
20361: PUSH
20362: LD_VAR 0 1
20366: DIFF
20367: PPUSH
20368: LD_VAR 0 1
20372: PPUSH
20373: CALL_OW 74
20377: PPUSH
20378: CALL_OW 115
// wait ( 0 0$20 ) ;
20382: LD_INT 700
20384: PPUSH
20385: CALL_OW 67
// SetSide ( un , your_side ) ;
20389: LD_VAR 0 1
20393: PPUSH
20394: LD_OWVAR 2
20398: PPUSH
20399: CALL_OW 235
// end ;
20403: PPOPN 2
20405: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20406: LD_EXP 65
20410: PUSH
20411: LD_EXP 98
20415: AND
20416: IFFALSE 20522
20418: GO 20420
20420: DISABLE
20421: LD_INT 0
20423: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20424: LD_ADDR_VAR 0 1
20428: PUSH
20429: LD_INT 22
20431: PUSH
20432: LD_OWVAR 2
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 2
20443: PUSH
20444: LD_INT 30
20446: PUSH
20447: LD_INT 0
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 30
20456: PUSH
20457: LD_INT 1
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: LIST
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PPUSH
20473: CALL_OW 69
20477: ST_TO_ADDR
// if not depot then
20478: LD_VAR 0 1
20482: NOT
20483: IFFALSE 20487
// exit ;
20485: GO 20522
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20487: LD_VAR 0 1
20491: PUSH
20492: LD_INT 1
20494: ARRAY
20495: PPUSH
20496: CALL_OW 250
20500: PPUSH
20501: LD_VAR 0 1
20505: PUSH
20506: LD_INT 1
20508: ARRAY
20509: PPUSH
20510: CALL_OW 251
20514: PPUSH
20515: LD_INT 70
20517: PPUSH
20518: CALL_OW 495
// end ;
20522: PPOPN 1
20524: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20525: LD_EXP 65
20529: PUSH
20530: LD_EXP 99
20534: AND
20535: IFFALSE 20746
20537: GO 20539
20539: DISABLE
20540: LD_INT 0
20542: PPUSH
20543: PPUSH
20544: PPUSH
20545: PPUSH
20546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20547: LD_ADDR_VAR 0 5
20551: PUSH
20552: LD_INT 22
20554: PUSH
20555: LD_OWVAR 2
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 21
20566: PUSH
20567: LD_INT 1
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PPUSH
20578: CALL_OW 69
20582: ST_TO_ADDR
// if not tmp then
20583: LD_VAR 0 5
20587: NOT
20588: IFFALSE 20592
// exit ;
20590: GO 20746
// for i in tmp do
20592: LD_ADDR_VAR 0 1
20596: PUSH
20597: LD_VAR 0 5
20601: PUSH
20602: FOR_IN
20603: IFFALSE 20744
// begin d := rand ( 0 , 5 ) ;
20605: LD_ADDR_VAR 0 4
20609: PUSH
20610: LD_INT 0
20612: PPUSH
20613: LD_INT 5
20615: PPUSH
20616: CALL_OW 12
20620: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20621: LD_ADDR_VAR 0 2
20625: PUSH
20626: LD_VAR 0 1
20630: PPUSH
20631: CALL_OW 250
20635: PPUSH
20636: LD_VAR 0 4
20640: PPUSH
20641: LD_INT 3
20643: PPUSH
20644: LD_INT 12
20646: PPUSH
20647: CALL_OW 12
20651: PPUSH
20652: CALL_OW 272
20656: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20657: LD_ADDR_VAR 0 3
20661: PUSH
20662: LD_VAR 0 1
20666: PPUSH
20667: CALL_OW 251
20671: PPUSH
20672: LD_VAR 0 4
20676: PPUSH
20677: LD_INT 3
20679: PPUSH
20680: LD_INT 12
20682: PPUSH
20683: CALL_OW 12
20687: PPUSH
20688: CALL_OW 273
20692: ST_TO_ADDR
// if ValidHex ( x , y ) then
20693: LD_VAR 0 2
20697: PPUSH
20698: LD_VAR 0 3
20702: PPUSH
20703: CALL_OW 488
20707: IFFALSE 20742
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20709: LD_VAR 0 1
20713: PPUSH
20714: LD_VAR 0 2
20718: PPUSH
20719: LD_VAR 0 3
20723: PPUSH
20724: LD_INT 3
20726: PPUSH
20727: LD_INT 6
20729: PPUSH
20730: CALL_OW 12
20734: PPUSH
20735: LD_INT 1
20737: PPUSH
20738: CALL_OW 483
// end ;
20742: GO 20602
20744: POP
20745: POP
// end ;
20746: PPOPN 5
20748: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20749: LD_EXP 65
20753: PUSH
20754: LD_EXP 100
20758: AND
20759: IFFALSE 20853
20761: GO 20763
20763: DISABLE
20764: LD_INT 0
20766: PPUSH
20767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20768: LD_ADDR_VAR 0 2
20772: PUSH
20773: LD_INT 22
20775: PUSH
20776: LD_OWVAR 2
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 32
20787: PUSH
20788: LD_INT 1
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 21
20797: PUSH
20798: LD_INT 2
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: LIST
20809: PPUSH
20810: CALL_OW 69
20814: ST_TO_ADDR
// if not tmp then
20815: LD_VAR 0 2
20819: NOT
20820: IFFALSE 20824
// exit ;
20822: GO 20853
// for i in tmp do
20824: LD_ADDR_VAR 0 1
20828: PUSH
20829: LD_VAR 0 2
20833: PUSH
20834: FOR_IN
20835: IFFALSE 20851
// SetFuel ( i , 0 ) ;
20837: LD_VAR 0 1
20841: PPUSH
20842: LD_INT 0
20844: PPUSH
20845: CALL_OW 240
20849: GO 20834
20851: POP
20852: POP
// end ;
20853: PPOPN 2
20855: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20856: LD_EXP 65
20860: PUSH
20861: LD_EXP 101
20865: AND
20866: IFFALSE 20932
20868: GO 20870
20870: DISABLE
20871: LD_INT 0
20873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20874: LD_ADDR_VAR 0 1
20878: PUSH
20879: LD_INT 22
20881: PUSH
20882: LD_OWVAR 2
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 30
20893: PUSH
20894: LD_INT 29
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PPUSH
20905: CALL_OW 69
20909: ST_TO_ADDR
// if not tmp then
20910: LD_VAR 0 1
20914: NOT
20915: IFFALSE 20919
// exit ;
20917: GO 20932
// DestroyUnit ( tmp [ 1 ] ) ;
20919: LD_VAR 0 1
20923: PUSH
20924: LD_INT 1
20926: ARRAY
20927: PPUSH
20928: CALL_OW 65
// end ;
20932: PPOPN 1
20934: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20935: LD_EXP 65
20939: PUSH
20940: LD_EXP 103
20944: AND
20945: IFFALSE 21074
20947: GO 20949
20949: DISABLE
20950: LD_INT 0
20952: PPUSH
// begin uc_side := 0 ;
20953: LD_ADDR_OWVAR 20
20957: PUSH
20958: LD_INT 0
20960: ST_TO_ADDR
// uc_nation := nation_arabian ;
20961: LD_ADDR_OWVAR 21
20965: PUSH
20966: LD_INT 2
20968: ST_TO_ADDR
// hc_gallery :=  ;
20969: LD_ADDR_OWVAR 33
20973: PUSH
20974: LD_STRING 
20976: ST_TO_ADDR
// hc_name :=  ;
20977: LD_ADDR_OWVAR 26
20981: PUSH
20982: LD_STRING 
20984: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20985: LD_INT 1
20987: PPUSH
20988: LD_INT 11
20990: PPUSH
20991: LD_INT 10
20993: PPUSH
20994: CALL_OW 380
// un := CreateHuman ;
20998: LD_ADDR_VAR 0 1
21002: PUSH
21003: CALL_OW 44
21007: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21008: LD_VAR 0 1
21012: PPUSH
21013: LD_INT 1
21015: PPUSH
21016: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21020: LD_INT 35
21022: PPUSH
21023: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21027: LD_VAR 0 1
21031: PPUSH
21032: LD_INT 22
21034: PUSH
21035: LD_OWVAR 2
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PPUSH
21044: CALL_OW 69
21048: PPUSH
21049: LD_VAR 0 1
21053: PPUSH
21054: CALL_OW 74
21058: PPUSH
21059: CALL_OW 115
// until IsDead ( un ) ;
21063: LD_VAR 0 1
21067: PPUSH
21068: CALL_OW 301
21072: IFFALSE 21020
// end ;
21074: PPOPN 1
21076: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21077: LD_EXP 65
21081: PUSH
21082: LD_EXP 105
21086: AND
21087: IFFALSE 21099
21089: GO 21091
21091: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21092: LD_STRING earthquake(getX(game), 0, 32)
21094: PPUSH
21095: CALL_OW 559
21099: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21100: LD_EXP 65
21104: PUSH
21105: LD_EXP 106
21109: AND
21110: IFFALSE 21201
21112: GO 21114
21114: DISABLE
21115: LD_INT 0
21117: PPUSH
// begin enable ;
21118: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21119: LD_ADDR_VAR 0 1
21123: PUSH
21124: LD_INT 22
21126: PUSH
21127: LD_OWVAR 2
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 21
21138: PUSH
21139: LD_INT 2
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 33
21148: PUSH
21149: LD_INT 3
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: LIST
21160: PPUSH
21161: CALL_OW 69
21165: ST_TO_ADDR
// if not tmp then
21166: LD_VAR 0 1
21170: NOT
21171: IFFALSE 21175
// exit ;
21173: GO 21201
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21175: LD_VAR 0 1
21179: PUSH
21180: LD_INT 1
21182: PPUSH
21183: LD_VAR 0 1
21187: PPUSH
21188: CALL_OW 12
21192: ARRAY
21193: PPUSH
21194: LD_INT 1
21196: PPUSH
21197: CALL_OW 234
// end ;
21201: PPOPN 1
21203: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21204: LD_EXP 65
21208: PUSH
21209: LD_EXP 107
21213: AND
21214: IFFALSE 21355
21216: GO 21218
21218: DISABLE
21219: LD_INT 0
21221: PPUSH
21222: PPUSH
21223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21224: LD_ADDR_VAR 0 3
21228: PUSH
21229: LD_INT 22
21231: PUSH
21232: LD_OWVAR 2
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 25
21243: PUSH
21244: LD_INT 1
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PPUSH
21255: CALL_OW 69
21259: ST_TO_ADDR
// if not tmp then
21260: LD_VAR 0 3
21264: NOT
21265: IFFALSE 21269
// exit ;
21267: GO 21355
// un := tmp [ rand ( 1 , tmp ) ] ;
21269: LD_ADDR_VAR 0 2
21273: PUSH
21274: LD_VAR 0 3
21278: PUSH
21279: LD_INT 1
21281: PPUSH
21282: LD_VAR 0 3
21286: PPUSH
21287: CALL_OW 12
21291: ARRAY
21292: ST_TO_ADDR
// if Crawls ( un ) then
21293: LD_VAR 0 2
21297: PPUSH
21298: CALL_OW 318
21302: IFFALSE 21313
// ComWalk ( un ) ;
21304: LD_VAR 0 2
21308: PPUSH
21309: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21313: LD_VAR 0 2
21317: PPUSH
21318: LD_INT 9
21320: PPUSH
21321: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21325: LD_INT 28
21327: PPUSH
21328: LD_OWVAR 2
21332: PPUSH
21333: LD_INT 2
21335: PPUSH
21336: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21340: LD_INT 29
21342: PPUSH
21343: LD_OWVAR 2
21347: PPUSH
21348: LD_INT 2
21350: PPUSH
21351: CALL_OW 322
// end ;
21355: PPOPN 3
21357: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21358: LD_EXP 65
21362: PUSH
21363: LD_EXP 108
21367: AND
21368: IFFALSE 21479
21370: GO 21372
21372: DISABLE
21373: LD_INT 0
21375: PPUSH
21376: PPUSH
21377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21378: LD_ADDR_VAR 0 3
21382: PUSH
21383: LD_INT 22
21385: PUSH
21386: LD_OWVAR 2
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 25
21397: PUSH
21398: LD_INT 1
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PPUSH
21409: CALL_OW 69
21413: ST_TO_ADDR
// if not tmp then
21414: LD_VAR 0 3
21418: NOT
21419: IFFALSE 21423
// exit ;
21421: GO 21479
// un := tmp [ rand ( 1 , tmp ) ] ;
21423: LD_ADDR_VAR 0 2
21427: PUSH
21428: LD_VAR 0 3
21432: PUSH
21433: LD_INT 1
21435: PPUSH
21436: LD_VAR 0 3
21440: PPUSH
21441: CALL_OW 12
21445: ARRAY
21446: ST_TO_ADDR
// if Crawls ( un ) then
21447: LD_VAR 0 2
21451: PPUSH
21452: CALL_OW 318
21456: IFFALSE 21467
// ComWalk ( un ) ;
21458: LD_VAR 0 2
21462: PPUSH
21463: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21467: LD_VAR 0 2
21471: PPUSH
21472: LD_INT 8
21474: PPUSH
21475: CALL_OW 336
// end ;
21479: PPOPN 3
21481: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21482: LD_EXP 65
21486: PUSH
21487: LD_EXP 109
21491: AND
21492: IFFALSE 21636
21494: GO 21496
21496: DISABLE
21497: LD_INT 0
21499: PPUSH
21500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21501: LD_ADDR_VAR 0 2
21505: PUSH
21506: LD_INT 22
21508: PUSH
21509: LD_OWVAR 2
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: PUSH
21518: LD_INT 21
21520: PUSH
21521: LD_INT 2
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 2
21530: PUSH
21531: LD_INT 34
21533: PUSH
21534: LD_INT 12
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 34
21543: PUSH
21544: LD_INT 51
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 34
21553: PUSH
21554: LD_INT 32
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: LIST
21571: PPUSH
21572: CALL_OW 69
21576: ST_TO_ADDR
// if not tmp then
21577: LD_VAR 0 2
21581: NOT
21582: IFFALSE 21586
// exit ;
21584: GO 21636
// for i in tmp do
21586: LD_ADDR_VAR 0 1
21590: PUSH
21591: LD_VAR 0 2
21595: PUSH
21596: FOR_IN
21597: IFFALSE 21634
// if GetCargo ( i , mat_artifact ) = 0 then
21599: LD_VAR 0 1
21603: PPUSH
21604: LD_INT 4
21606: PPUSH
21607: CALL_OW 289
21611: PUSH
21612: LD_INT 0
21614: EQUAL
21615: IFFALSE 21632
// SetCargo ( i , mat_siberit , 100 ) ;
21617: LD_VAR 0 1
21621: PPUSH
21622: LD_INT 3
21624: PPUSH
21625: LD_INT 100
21627: PPUSH
21628: CALL_OW 290
21632: GO 21596
21634: POP
21635: POP
// end ;
21636: PPOPN 2
21638: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21639: LD_EXP 65
21643: PUSH
21644: LD_EXP 110
21648: AND
21649: IFFALSE 21832
21651: GO 21653
21653: DISABLE
21654: LD_INT 0
21656: PPUSH
21657: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21658: LD_ADDR_VAR 0 2
21662: PUSH
21663: LD_INT 22
21665: PUSH
21666: LD_OWVAR 2
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PPUSH
21675: CALL_OW 69
21679: ST_TO_ADDR
// if not tmp then
21680: LD_VAR 0 2
21684: NOT
21685: IFFALSE 21689
// exit ;
21687: GO 21832
// for i := 1 to 2 do
21689: LD_ADDR_VAR 0 1
21693: PUSH
21694: DOUBLE
21695: LD_INT 1
21697: DEC
21698: ST_TO_ADDR
21699: LD_INT 2
21701: PUSH
21702: FOR_TO
21703: IFFALSE 21830
// begin uc_side := your_side ;
21705: LD_ADDR_OWVAR 20
21709: PUSH
21710: LD_OWVAR 2
21714: ST_TO_ADDR
// uc_nation := nation_american ;
21715: LD_ADDR_OWVAR 21
21719: PUSH
21720: LD_INT 1
21722: ST_TO_ADDR
// vc_chassis := us_morphling ;
21723: LD_ADDR_OWVAR 37
21727: PUSH
21728: LD_INT 5
21730: ST_TO_ADDR
// vc_engine := engine_siberite ;
21731: LD_ADDR_OWVAR 39
21735: PUSH
21736: LD_INT 3
21738: ST_TO_ADDR
// vc_control := control_computer ;
21739: LD_ADDR_OWVAR 38
21743: PUSH
21744: LD_INT 3
21746: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21747: LD_ADDR_OWVAR 40
21751: PUSH
21752: LD_INT 10
21754: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21755: LD_VAR 0 2
21759: PUSH
21760: LD_INT 1
21762: ARRAY
21763: PPUSH
21764: CALL_OW 310
21768: NOT
21769: IFFALSE 21816
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21771: CALL_OW 45
21775: PPUSH
21776: LD_VAR 0 2
21780: PUSH
21781: LD_INT 1
21783: ARRAY
21784: PPUSH
21785: CALL_OW 250
21789: PPUSH
21790: LD_VAR 0 2
21794: PUSH
21795: LD_INT 1
21797: ARRAY
21798: PPUSH
21799: CALL_OW 251
21803: PPUSH
21804: LD_INT 12
21806: PPUSH
21807: LD_INT 1
21809: PPUSH
21810: CALL_OW 50
21814: GO 21828
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21816: CALL_OW 45
21820: PPUSH
21821: LD_INT 1
21823: PPUSH
21824: CALL_OW 51
// end ;
21828: GO 21702
21830: POP
21831: POP
// end ;
21832: PPOPN 2
21834: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21835: LD_EXP 65
21839: PUSH
21840: LD_EXP 111
21844: AND
21845: IFFALSE 22067
21847: GO 21849
21849: DISABLE
21850: LD_INT 0
21852: PPUSH
21853: PPUSH
21854: PPUSH
21855: PPUSH
21856: PPUSH
21857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21858: LD_ADDR_VAR 0 6
21862: PUSH
21863: LD_INT 22
21865: PUSH
21866: LD_OWVAR 2
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 21
21877: PUSH
21878: LD_INT 1
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 3
21887: PUSH
21888: LD_INT 23
21890: PUSH
21891: LD_INT 0
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: LIST
21906: PPUSH
21907: CALL_OW 69
21911: ST_TO_ADDR
// if not tmp then
21912: LD_VAR 0 6
21916: NOT
21917: IFFALSE 21921
// exit ;
21919: GO 22067
// s1 := rand ( 1 , 4 ) ;
21921: LD_ADDR_VAR 0 2
21925: PUSH
21926: LD_INT 1
21928: PPUSH
21929: LD_INT 4
21931: PPUSH
21932: CALL_OW 12
21936: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21937: LD_ADDR_VAR 0 4
21941: PUSH
21942: LD_VAR 0 6
21946: PUSH
21947: LD_INT 1
21949: ARRAY
21950: PPUSH
21951: LD_VAR 0 2
21955: PPUSH
21956: CALL_OW 259
21960: ST_TO_ADDR
// if s1 = 1 then
21961: LD_VAR 0 2
21965: PUSH
21966: LD_INT 1
21968: EQUAL
21969: IFFALSE 21989
// s2 := rand ( 2 , 4 ) else
21971: LD_ADDR_VAR 0 3
21975: PUSH
21976: LD_INT 2
21978: PPUSH
21979: LD_INT 4
21981: PPUSH
21982: CALL_OW 12
21986: ST_TO_ADDR
21987: GO 21997
// s2 := 1 ;
21989: LD_ADDR_VAR 0 3
21993: PUSH
21994: LD_INT 1
21996: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21997: LD_ADDR_VAR 0 5
22001: PUSH
22002: LD_VAR 0 6
22006: PUSH
22007: LD_INT 1
22009: ARRAY
22010: PPUSH
22011: LD_VAR 0 3
22015: PPUSH
22016: CALL_OW 259
22020: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22021: LD_VAR 0 6
22025: PUSH
22026: LD_INT 1
22028: ARRAY
22029: PPUSH
22030: LD_VAR 0 2
22034: PPUSH
22035: LD_VAR 0 5
22039: PPUSH
22040: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22044: LD_VAR 0 6
22048: PUSH
22049: LD_INT 1
22051: ARRAY
22052: PPUSH
22053: LD_VAR 0 3
22057: PPUSH
22058: LD_VAR 0 4
22062: PPUSH
22063: CALL_OW 237
// end ;
22067: PPOPN 6
22069: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22070: LD_EXP 65
22074: PUSH
22075: LD_EXP 112
22079: AND
22080: IFFALSE 22159
22082: GO 22084
22084: DISABLE
22085: LD_INT 0
22087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22088: LD_ADDR_VAR 0 1
22092: PUSH
22093: LD_INT 22
22095: PUSH
22096: LD_OWVAR 2
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 30
22107: PUSH
22108: LD_INT 3
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PPUSH
22119: CALL_OW 69
22123: ST_TO_ADDR
// if not tmp then
22124: LD_VAR 0 1
22128: NOT
22129: IFFALSE 22133
// exit ;
22131: GO 22159
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22133: LD_VAR 0 1
22137: PUSH
22138: LD_INT 1
22140: PPUSH
22141: LD_VAR 0 1
22145: PPUSH
22146: CALL_OW 12
22150: ARRAY
22151: PPUSH
22152: LD_INT 1
22154: PPUSH
22155: CALL_OW 234
// end ;
22159: PPOPN 1
22161: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22162: LD_EXP 65
22166: PUSH
22167: LD_EXP 113
22171: AND
22172: IFFALSE 22284
22174: GO 22176
22176: DISABLE
22177: LD_INT 0
22179: PPUSH
22180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22181: LD_ADDR_VAR 0 2
22185: PUSH
22186: LD_INT 22
22188: PUSH
22189: LD_OWVAR 2
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 2
22200: PUSH
22201: LD_INT 30
22203: PUSH
22204: LD_INT 27
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 30
22213: PUSH
22214: LD_INT 26
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 30
22223: PUSH
22224: LD_INT 28
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PPUSH
22241: CALL_OW 69
22245: ST_TO_ADDR
// if not tmp then
22246: LD_VAR 0 2
22250: NOT
22251: IFFALSE 22255
// exit ;
22253: GO 22284
// for i in tmp do
22255: LD_ADDR_VAR 0 1
22259: PUSH
22260: LD_VAR 0 2
22264: PUSH
22265: FOR_IN
22266: IFFALSE 22282
// SetLives ( i , 1 ) ;
22268: LD_VAR 0 1
22272: PPUSH
22273: LD_INT 1
22275: PPUSH
22276: CALL_OW 234
22280: GO 22265
22282: POP
22283: POP
// end ;
22284: PPOPN 2
22286: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22287: LD_EXP 65
22291: PUSH
22292: LD_EXP 114
22296: AND
22297: IFFALSE 22584
22299: GO 22301
22301: DISABLE
22302: LD_INT 0
22304: PPUSH
22305: PPUSH
22306: PPUSH
// begin i := rand ( 1 , 7 ) ;
22307: LD_ADDR_VAR 0 1
22311: PUSH
22312: LD_INT 1
22314: PPUSH
22315: LD_INT 7
22317: PPUSH
22318: CALL_OW 12
22322: ST_TO_ADDR
// case i of 1 :
22323: LD_VAR 0 1
22327: PUSH
22328: LD_INT 1
22330: DOUBLE
22331: EQUAL
22332: IFTRUE 22336
22334: GO 22346
22336: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22337: LD_STRING earthquake(getX(game), 0, 32)
22339: PPUSH
22340: CALL_OW 559
22344: GO 22584
22346: LD_INT 2
22348: DOUBLE
22349: EQUAL
22350: IFTRUE 22354
22352: GO 22368
22354: POP
// begin ToLua ( displayStucuk(); ) ;
22355: LD_STRING displayStucuk();
22357: PPUSH
22358: CALL_OW 559
// ResetFog ;
22362: CALL_OW 335
// end ; 3 :
22366: GO 22584
22368: LD_INT 3
22370: DOUBLE
22371: EQUAL
22372: IFTRUE 22376
22374: GO 22480
22376: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22377: LD_ADDR_VAR 0 2
22381: PUSH
22382: LD_INT 22
22384: PUSH
22385: LD_OWVAR 2
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 25
22396: PUSH
22397: LD_INT 1
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PPUSH
22408: CALL_OW 69
22412: ST_TO_ADDR
// if not tmp then
22413: LD_VAR 0 2
22417: NOT
22418: IFFALSE 22422
// exit ;
22420: GO 22584
// un := tmp [ rand ( 1 , tmp ) ] ;
22422: LD_ADDR_VAR 0 3
22426: PUSH
22427: LD_VAR 0 2
22431: PUSH
22432: LD_INT 1
22434: PPUSH
22435: LD_VAR 0 2
22439: PPUSH
22440: CALL_OW 12
22444: ARRAY
22445: ST_TO_ADDR
// if Crawls ( un ) then
22446: LD_VAR 0 3
22450: PPUSH
22451: CALL_OW 318
22455: IFFALSE 22466
// ComWalk ( un ) ;
22457: LD_VAR 0 3
22461: PPUSH
22462: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22466: LD_VAR 0 3
22470: PPUSH
22471: LD_INT 8
22473: PPUSH
22474: CALL_OW 336
// end ; 4 :
22478: GO 22584
22480: LD_INT 4
22482: DOUBLE
22483: EQUAL
22484: IFTRUE 22488
22486: GO 22562
22488: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22489: LD_ADDR_VAR 0 2
22493: PUSH
22494: LD_INT 22
22496: PUSH
22497: LD_OWVAR 2
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PUSH
22506: LD_INT 30
22508: PUSH
22509: LD_INT 29
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PPUSH
22520: CALL_OW 69
22524: ST_TO_ADDR
// if not tmp then
22525: LD_VAR 0 2
22529: NOT
22530: IFFALSE 22534
// exit ;
22532: GO 22584
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22534: LD_VAR 0 2
22538: PUSH
22539: LD_INT 1
22541: ARRAY
22542: PPUSH
22543: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22547: LD_VAR 0 2
22551: PUSH
22552: LD_INT 1
22554: ARRAY
22555: PPUSH
22556: CALL_OW 65
// end ; 5 .. 7 :
22560: GO 22584
22562: LD_INT 5
22564: DOUBLE
22565: GREATEREQUAL
22566: IFFALSE 22574
22568: LD_INT 7
22570: DOUBLE
22571: LESSEQUAL
22572: IFTRUE 22576
22574: GO 22583
22576: POP
// StreamSibBomb ; end ;
22577: CALL 18821 0 0
22581: GO 22584
22583: POP
// end ;
22584: PPOPN 3
22586: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22587: LD_EXP 65
22591: PUSH
22592: LD_EXP 115
22596: AND
22597: IFFALSE 22753
22599: GO 22601
22601: DISABLE
22602: LD_INT 0
22604: PPUSH
22605: PPUSH
22606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22607: LD_ADDR_VAR 0 2
22611: PUSH
22612: LD_INT 81
22614: PUSH
22615: LD_OWVAR 2
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 2
22626: PUSH
22627: LD_INT 21
22629: PUSH
22630: LD_INT 1
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 21
22639: PUSH
22640: LD_INT 2
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: LIST
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PPUSH
22656: CALL_OW 69
22660: ST_TO_ADDR
// if not tmp then
22661: LD_VAR 0 2
22665: NOT
22666: IFFALSE 22670
// exit ;
22668: GO 22753
// p := 0 ;
22670: LD_ADDR_VAR 0 3
22674: PUSH
22675: LD_INT 0
22677: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22678: LD_INT 35
22680: PPUSH
22681: CALL_OW 67
// p := p + 1 ;
22685: LD_ADDR_VAR 0 3
22689: PUSH
22690: LD_VAR 0 3
22694: PUSH
22695: LD_INT 1
22697: PLUS
22698: ST_TO_ADDR
// for i in tmp do
22699: LD_ADDR_VAR 0 1
22703: PUSH
22704: LD_VAR 0 2
22708: PUSH
22709: FOR_IN
22710: IFFALSE 22741
// if GetLives ( i ) < 1000 then
22712: LD_VAR 0 1
22716: PPUSH
22717: CALL_OW 256
22721: PUSH
22722: LD_INT 1000
22724: LESS
22725: IFFALSE 22739
// SetLives ( i , 1000 ) ;
22727: LD_VAR 0 1
22731: PPUSH
22732: LD_INT 1000
22734: PPUSH
22735: CALL_OW 234
22739: GO 22709
22741: POP
22742: POP
// until p > 20 ;
22743: LD_VAR 0 3
22747: PUSH
22748: LD_INT 20
22750: GREATER
22751: IFFALSE 22678
// end ;
22753: PPOPN 3
22755: END
// every 0 0$1 trigger StreamModeActive and sTime do
22756: LD_EXP 65
22760: PUSH
22761: LD_EXP 116
22765: AND
22766: IFFALSE 22801
22768: GO 22770
22770: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22771: LD_INT 28
22773: PPUSH
22774: LD_OWVAR 2
22778: PPUSH
22779: LD_INT 2
22781: PPUSH
22782: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22786: LD_INT 30
22788: PPUSH
22789: LD_OWVAR 2
22793: PPUSH
22794: LD_INT 2
22796: PPUSH
22797: CALL_OW 322
// end ;
22801: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22802: LD_EXP 65
22806: PUSH
22807: LD_EXP 117
22811: AND
22812: IFFALSE 22933
22814: GO 22816
22816: DISABLE
22817: LD_INT 0
22819: PPUSH
22820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22821: LD_ADDR_VAR 0 2
22825: PUSH
22826: LD_INT 22
22828: PUSH
22829: LD_OWVAR 2
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 21
22840: PUSH
22841: LD_INT 1
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 3
22850: PUSH
22851: LD_INT 23
22853: PUSH
22854: LD_INT 0
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: LIST
22869: PPUSH
22870: CALL_OW 69
22874: ST_TO_ADDR
// if not tmp then
22875: LD_VAR 0 2
22879: NOT
22880: IFFALSE 22884
// exit ;
22882: GO 22933
// for i in tmp do
22884: LD_ADDR_VAR 0 1
22888: PUSH
22889: LD_VAR 0 2
22893: PUSH
22894: FOR_IN
22895: IFFALSE 22931
// begin if Crawls ( i ) then
22897: LD_VAR 0 1
22901: PPUSH
22902: CALL_OW 318
22906: IFFALSE 22917
// ComWalk ( i ) ;
22908: LD_VAR 0 1
22912: PPUSH
22913: CALL_OW 138
// SetClass ( i , 2 ) ;
22917: LD_VAR 0 1
22921: PPUSH
22922: LD_INT 2
22924: PPUSH
22925: CALL_OW 336
// end ;
22929: GO 22894
22931: POP
22932: POP
// end ;
22933: PPOPN 2
22935: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22936: LD_EXP 65
22940: PUSH
22941: LD_EXP 118
22945: AND
22946: IFFALSE 23234
22948: GO 22950
22950: DISABLE
22951: LD_INT 0
22953: PPUSH
22954: PPUSH
22955: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22956: LD_OWVAR 2
22960: PPUSH
22961: LD_INT 9
22963: PPUSH
22964: LD_INT 1
22966: PPUSH
22967: LD_INT 1
22969: PPUSH
22970: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22974: LD_INT 9
22976: PPUSH
22977: LD_OWVAR 2
22981: PPUSH
22982: CALL_OW 343
// uc_side := 9 ;
22986: LD_ADDR_OWVAR 20
22990: PUSH
22991: LD_INT 9
22993: ST_TO_ADDR
// uc_nation := 2 ;
22994: LD_ADDR_OWVAR 21
22998: PUSH
22999: LD_INT 2
23001: ST_TO_ADDR
// hc_name := Dark Warrior ;
23002: LD_ADDR_OWVAR 26
23006: PUSH
23007: LD_STRING Dark Warrior
23009: ST_TO_ADDR
// hc_gallery :=  ;
23010: LD_ADDR_OWVAR 33
23014: PUSH
23015: LD_STRING 
23017: ST_TO_ADDR
// hc_noskilllimit := true ;
23018: LD_ADDR_OWVAR 76
23022: PUSH
23023: LD_INT 1
23025: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23026: LD_ADDR_OWVAR 31
23030: PUSH
23031: LD_INT 30
23033: PUSH
23034: LD_INT 30
23036: PUSH
23037: LD_INT 30
23039: PUSH
23040: LD_INT 30
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: ST_TO_ADDR
// un := CreateHuman ;
23049: LD_ADDR_VAR 0 3
23053: PUSH
23054: CALL_OW 44
23058: ST_TO_ADDR
// hc_noskilllimit := false ;
23059: LD_ADDR_OWVAR 76
23063: PUSH
23064: LD_INT 0
23066: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23067: LD_VAR 0 3
23071: PPUSH
23072: LD_INT 1
23074: PPUSH
23075: CALL_OW 51
// ToLua ( playRanger() ) ;
23079: LD_STRING playRanger()
23081: PPUSH
23082: CALL_OW 559
// p := 0 ;
23086: LD_ADDR_VAR 0 2
23090: PUSH
23091: LD_INT 0
23093: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23094: LD_INT 35
23096: PPUSH
23097: CALL_OW 67
// p := p + 1 ;
23101: LD_ADDR_VAR 0 2
23105: PUSH
23106: LD_VAR 0 2
23110: PUSH
23111: LD_INT 1
23113: PLUS
23114: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23115: LD_VAR 0 3
23119: PPUSH
23120: CALL_OW 256
23124: PUSH
23125: LD_INT 1000
23127: LESS
23128: IFFALSE 23142
// SetLives ( un , 1000 ) ;
23130: LD_VAR 0 3
23134: PPUSH
23135: LD_INT 1000
23137: PPUSH
23138: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23142: LD_VAR 0 3
23146: PPUSH
23147: LD_INT 81
23149: PUSH
23150: LD_OWVAR 2
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 91
23161: PUSH
23162: LD_VAR 0 3
23166: PUSH
23167: LD_INT 30
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: LIST
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PPUSH
23179: CALL_OW 69
23183: PPUSH
23184: LD_VAR 0 3
23188: PPUSH
23189: CALL_OW 74
23193: PPUSH
23194: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23198: LD_VAR 0 2
23202: PUSH
23203: LD_INT 80
23205: GREATER
23206: PUSH
23207: LD_VAR 0 3
23211: PPUSH
23212: CALL_OW 301
23216: OR
23217: IFFALSE 23094
// if un then
23219: LD_VAR 0 3
23223: IFFALSE 23234
// RemoveUnit ( un ) ;
23225: LD_VAR 0 3
23229: PPUSH
23230: CALL_OW 64
// end ;
23234: PPOPN 3
23236: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23237: LD_EXP 119
23241: IFFALSE 23357
23243: GO 23245
23245: DISABLE
23246: LD_INT 0
23248: PPUSH
23249: PPUSH
23250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23251: LD_ADDR_VAR 0 2
23255: PUSH
23256: LD_INT 81
23258: PUSH
23259: LD_OWVAR 2
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 21
23270: PUSH
23271: LD_INT 1
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PPUSH
23282: CALL_OW 69
23286: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23287: LD_STRING playComputer()
23289: PPUSH
23290: CALL_OW 559
// if not tmp then
23294: LD_VAR 0 2
23298: NOT
23299: IFFALSE 23303
// exit ;
23301: GO 23357
// for i in tmp do
23303: LD_ADDR_VAR 0 1
23307: PUSH
23308: LD_VAR 0 2
23312: PUSH
23313: FOR_IN
23314: IFFALSE 23355
// for j := 1 to 4 do
23316: LD_ADDR_VAR 0 3
23320: PUSH
23321: DOUBLE
23322: LD_INT 1
23324: DEC
23325: ST_TO_ADDR
23326: LD_INT 4
23328: PUSH
23329: FOR_TO
23330: IFFALSE 23351
// SetSkill ( i , j , 10 ) ;
23332: LD_VAR 0 1
23336: PPUSH
23337: LD_VAR 0 3
23341: PPUSH
23342: LD_INT 10
23344: PPUSH
23345: CALL_OW 237
23349: GO 23329
23351: POP
23352: POP
23353: GO 23313
23355: POP
23356: POP
// end ;
23357: PPOPN 3
23359: END
// every 0 0$1 trigger s30 do var i , tmp ;
23360: LD_EXP 120
23364: IFFALSE 23433
23366: GO 23368
23368: DISABLE
23369: LD_INT 0
23371: PPUSH
23372: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23373: LD_ADDR_VAR 0 2
23377: PUSH
23378: LD_INT 22
23380: PUSH
23381: LD_OWVAR 2
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PPUSH
23390: CALL_OW 69
23394: ST_TO_ADDR
// if not tmp then
23395: LD_VAR 0 2
23399: NOT
23400: IFFALSE 23404
// exit ;
23402: GO 23433
// for i in tmp do
23404: LD_ADDR_VAR 0 1
23408: PUSH
23409: LD_VAR 0 2
23413: PUSH
23414: FOR_IN
23415: IFFALSE 23431
// SetLives ( i , 300 ) ;
23417: LD_VAR 0 1
23421: PPUSH
23422: LD_INT 300
23424: PPUSH
23425: CALL_OW 234
23429: GO 23414
23431: POP
23432: POP
// end ;
23433: PPOPN 2
23435: END
// every 0 0$1 trigger s60 do var i , tmp ;
23436: LD_EXP 121
23440: IFFALSE 23509
23442: GO 23444
23444: DISABLE
23445: LD_INT 0
23447: PPUSH
23448: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23449: LD_ADDR_VAR 0 2
23453: PUSH
23454: LD_INT 22
23456: PUSH
23457: LD_OWVAR 2
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PPUSH
23466: CALL_OW 69
23470: ST_TO_ADDR
// if not tmp then
23471: LD_VAR 0 2
23475: NOT
23476: IFFALSE 23480
// exit ;
23478: GO 23509
// for i in tmp do
23480: LD_ADDR_VAR 0 1
23484: PUSH
23485: LD_VAR 0 2
23489: PUSH
23490: FOR_IN
23491: IFFALSE 23507
// SetLives ( i , 600 ) ;
23493: LD_VAR 0 1
23497: PPUSH
23498: LD_INT 600
23500: PPUSH
23501: CALL_OW 234
23505: GO 23490
23507: POP
23508: POP
// end ;
23509: PPOPN 2
23511: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23512: LD_INT 0
23514: PPUSH
// case cmd of 301 :
23515: LD_VAR 0 1
23519: PUSH
23520: LD_INT 301
23522: DOUBLE
23523: EQUAL
23524: IFTRUE 23528
23526: GO 23560
23528: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23529: LD_VAR 0 6
23533: PPUSH
23534: LD_VAR 0 7
23538: PPUSH
23539: LD_VAR 0 8
23543: PPUSH
23544: LD_VAR 0 4
23548: PPUSH
23549: LD_VAR 0 5
23553: PPUSH
23554: CALL 24761 0 5
23558: GO 23681
23560: LD_INT 302
23562: DOUBLE
23563: EQUAL
23564: IFTRUE 23568
23566: GO 23605
23568: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23569: LD_VAR 0 6
23573: PPUSH
23574: LD_VAR 0 7
23578: PPUSH
23579: LD_VAR 0 8
23583: PPUSH
23584: LD_VAR 0 9
23588: PPUSH
23589: LD_VAR 0 4
23593: PPUSH
23594: LD_VAR 0 5
23598: PPUSH
23599: CALL 24852 0 6
23603: GO 23681
23605: LD_INT 303
23607: DOUBLE
23608: EQUAL
23609: IFTRUE 23613
23611: GO 23650
23613: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23614: LD_VAR 0 6
23618: PPUSH
23619: LD_VAR 0 7
23623: PPUSH
23624: LD_VAR 0 8
23628: PPUSH
23629: LD_VAR 0 9
23633: PPUSH
23634: LD_VAR 0 4
23638: PPUSH
23639: LD_VAR 0 5
23643: PPUSH
23644: CALL 23686 0 6
23648: GO 23681
23650: LD_INT 304
23652: DOUBLE
23653: EQUAL
23654: IFTRUE 23658
23656: GO 23680
23658: POP
// hHackTeleport ( unit , x , y ) ; end ;
23659: LD_VAR 0 2
23663: PPUSH
23664: LD_VAR 0 4
23668: PPUSH
23669: LD_VAR 0 5
23673: PPUSH
23674: CALL 25445 0 3
23678: GO 23681
23680: POP
// end ;
23681: LD_VAR 0 12
23685: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23686: LD_INT 0
23688: PPUSH
23689: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23690: LD_VAR 0 1
23694: PUSH
23695: LD_INT 1
23697: LESS
23698: PUSH
23699: LD_VAR 0 1
23703: PUSH
23704: LD_INT 3
23706: GREATER
23707: OR
23708: PUSH
23709: LD_VAR 0 5
23713: PPUSH
23714: LD_VAR 0 6
23718: PPUSH
23719: CALL_OW 428
23723: OR
23724: IFFALSE 23728
// exit ;
23726: GO 24448
// uc_side := your_side ;
23728: LD_ADDR_OWVAR 20
23732: PUSH
23733: LD_OWVAR 2
23737: ST_TO_ADDR
// uc_nation := nation ;
23738: LD_ADDR_OWVAR 21
23742: PUSH
23743: LD_VAR 0 1
23747: ST_TO_ADDR
// bc_level = 1 ;
23748: LD_ADDR_OWVAR 43
23752: PUSH
23753: LD_INT 1
23755: ST_TO_ADDR
// case btype of 1 :
23756: LD_VAR 0 2
23760: PUSH
23761: LD_INT 1
23763: DOUBLE
23764: EQUAL
23765: IFTRUE 23769
23767: GO 23780
23769: POP
// bc_type := b_depot ; 2 :
23770: LD_ADDR_OWVAR 42
23774: PUSH
23775: LD_INT 0
23777: ST_TO_ADDR
23778: GO 24392
23780: LD_INT 2
23782: DOUBLE
23783: EQUAL
23784: IFTRUE 23788
23786: GO 23799
23788: POP
// bc_type := b_warehouse ; 3 :
23789: LD_ADDR_OWVAR 42
23793: PUSH
23794: LD_INT 1
23796: ST_TO_ADDR
23797: GO 24392
23799: LD_INT 3
23801: DOUBLE
23802: EQUAL
23803: IFTRUE 23807
23805: GO 23818
23807: POP
// bc_type := b_lab ; 4 .. 9 :
23808: LD_ADDR_OWVAR 42
23812: PUSH
23813: LD_INT 6
23815: ST_TO_ADDR
23816: GO 24392
23818: LD_INT 4
23820: DOUBLE
23821: GREATEREQUAL
23822: IFFALSE 23830
23824: LD_INT 9
23826: DOUBLE
23827: LESSEQUAL
23828: IFTRUE 23832
23830: GO 23884
23832: POP
// begin bc_type := b_lab_half ;
23833: LD_ADDR_OWVAR 42
23837: PUSH
23838: LD_INT 7
23840: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23841: LD_ADDR_OWVAR 44
23845: PUSH
23846: LD_INT 10
23848: PUSH
23849: LD_INT 11
23851: PUSH
23852: LD_INT 12
23854: PUSH
23855: LD_INT 15
23857: PUSH
23858: LD_INT 14
23860: PUSH
23861: LD_INT 13
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: PUSH
23872: LD_VAR 0 2
23876: PUSH
23877: LD_INT 3
23879: MINUS
23880: ARRAY
23881: ST_TO_ADDR
// end ; 10 .. 13 :
23882: GO 24392
23884: LD_INT 10
23886: DOUBLE
23887: GREATEREQUAL
23888: IFFALSE 23896
23890: LD_INT 13
23892: DOUBLE
23893: LESSEQUAL
23894: IFTRUE 23898
23896: GO 23975
23898: POP
// begin bc_type := b_lab_full ;
23899: LD_ADDR_OWVAR 42
23903: PUSH
23904: LD_INT 8
23906: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23907: LD_ADDR_OWVAR 44
23911: PUSH
23912: LD_INT 10
23914: PUSH
23915: LD_INT 12
23917: PUSH
23918: LD_INT 14
23920: PUSH
23921: LD_INT 13
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: PUSH
23930: LD_VAR 0 2
23934: PUSH
23935: LD_INT 9
23937: MINUS
23938: ARRAY
23939: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23940: LD_ADDR_OWVAR 45
23944: PUSH
23945: LD_INT 11
23947: PUSH
23948: LD_INT 15
23950: PUSH
23951: LD_INT 12
23953: PUSH
23954: LD_INT 15
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: PUSH
23963: LD_VAR 0 2
23967: PUSH
23968: LD_INT 9
23970: MINUS
23971: ARRAY
23972: ST_TO_ADDR
// end ; 14 :
23973: GO 24392
23975: LD_INT 14
23977: DOUBLE
23978: EQUAL
23979: IFTRUE 23983
23981: GO 23994
23983: POP
// bc_type := b_workshop ; 15 :
23984: LD_ADDR_OWVAR 42
23988: PUSH
23989: LD_INT 2
23991: ST_TO_ADDR
23992: GO 24392
23994: LD_INT 15
23996: DOUBLE
23997: EQUAL
23998: IFTRUE 24002
24000: GO 24013
24002: POP
// bc_type := b_factory ; 16 :
24003: LD_ADDR_OWVAR 42
24007: PUSH
24008: LD_INT 3
24010: ST_TO_ADDR
24011: GO 24392
24013: LD_INT 16
24015: DOUBLE
24016: EQUAL
24017: IFTRUE 24021
24019: GO 24032
24021: POP
// bc_type := b_ext_gun ; 17 :
24022: LD_ADDR_OWVAR 42
24026: PUSH
24027: LD_INT 17
24029: ST_TO_ADDR
24030: GO 24392
24032: LD_INT 17
24034: DOUBLE
24035: EQUAL
24036: IFTRUE 24040
24038: GO 24068
24040: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24041: LD_ADDR_OWVAR 42
24045: PUSH
24046: LD_INT 19
24048: PUSH
24049: LD_INT 23
24051: PUSH
24052: LD_INT 19
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: LIST
24059: PUSH
24060: LD_VAR 0 1
24064: ARRAY
24065: ST_TO_ADDR
24066: GO 24392
24068: LD_INT 18
24070: DOUBLE
24071: EQUAL
24072: IFTRUE 24076
24074: GO 24087
24076: POP
// bc_type := b_ext_radar ; 19 :
24077: LD_ADDR_OWVAR 42
24081: PUSH
24082: LD_INT 20
24084: ST_TO_ADDR
24085: GO 24392
24087: LD_INT 19
24089: DOUBLE
24090: EQUAL
24091: IFTRUE 24095
24093: GO 24106
24095: POP
// bc_type := b_ext_radio ; 20 :
24096: LD_ADDR_OWVAR 42
24100: PUSH
24101: LD_INT 22
24103: ST_TO_ADDR
24104: GO 24392
24106: LD_INT 20
24108: DOUBLE
24109: EQUAL
24110: IFTRUE 24114
24112: GO 24125
24114: POP
// bc_type := b_ext_siberium ; 21 :
24115: LD_ADDR_OWVAR 42
24119: PUSH
24120: LD_INT 21
24122: ST_TO_ADDR
24123: GO 24392
24125: LD_INT 21
24127: DOUBLE
24128: EQUAL
24129: IFTRUE 24133
24131: GO 24144
24133: POP
// bc_type := b_ext_computer ; 22 :
24134: LD_ADDR_OWVAR 42
24138: PUSH
24139: LD_INT 24
24141: ST_TO_ADDR
24142: GO 24392
24144: LD_INT 22
24146: DOUBLE
24147: EQUAL
24148: IFTRUE 24152
24150: GO 24163
24152: POP
// bc_type := b_ext_track ; 23 :
24153: LD_ADDR_OWVAR 42
24157: PUSH
24158: LD_INT 16
24160: ST_TO_ADDR
24161: GO 24392
24163: LD_INT 23
24165: DOUBLE
24166: EQUAL
24167: IFTRUE 24171
24169: GO 24182
24171: POP
// bc_type := b_ext_laser ; 24 :
24172: LD_ADDR_OWVAR 42
24176: PUSH
24177: LD_INT 25
24179: ST_TO_ADDR
24180: GO 24392
24182: LD_INT 24
24184: DOUBLE
24185: EQUAL
24186: IFTRUE 24190
24188: GO 24201
24190: POP
// bc_type := b_control_tower ; 25 :
24191: LD_ADDR_OWVAR 42
24195: PUSH
24196: LD_INT 36
24198: ST_TO_ADDR
24199: GO 24392
24201: LD_INT 25
24203: DOUBLE
24204: EQUAL
24205: IFTRUE 24209
24207: GO 24220
24209: POP
// bc_type := b_breastwork ; 26 :
24210: LD_ADDR_OWVAR 42
24214: PUSH
24215: LD_INT 31
24217: ST_TO_ADDR
24218: GO 24392
24220: LD_INT 26
24222: DOUBLE
24223: EQUAL
24224: IFTRUE 24228
24226: GO 24239
24228: POP
// bc_type := b_bunker ; 27 :
24229: LD_ADDR_OWVAR 42
24233: PUSH
24234: LD_INT 32
24236: ST_TO_ADDR
24237: GO 24392
24239: LD_INT 27
24241: DOUBLE
24242: EQUAL
24243: IFTRUE 24247
24245: GO 24258
24247: POP
// bc_type := b_turret ; 28 :
24248: LD_ADDR_OWVAR 42
24252: PUSH
24253: LD_INT 33
24255: ST_TO_ADDR
24256: GO 24392
24258: LD_INT 28
24260: DOUBLE
24261: EQUAL
24262: IFTRUE 24266
24264: GO 24277
24266: POP
// bc_type := b_armoury ; 29 :
24267: LD_ADDR_OWVAR 42
24271: PUSH
24272: LD_INT 4
24274: ST_TO_ADDR
24275: GO 24392
24277: LD_INT 29
24279: DOUBLE
24280: EQUAL
24281: IFTRUE 24285
24283: GO 24296
24285: POP
// bc_type := b_barracks ; 30 :
24286: LD_ADDR_OWVAR 42
24290: PUSH
24291: LD_INT 5
24293: ST_TO_ADDR
24294: GO 24392
24296: LD_INT 30
24298: DOUBLE
24299: EQUAL
24300: IFTRUE 24304
24302: GO 24315
24304: POP
// bc_type := b_solar_power ; 31 :
24305: LD_ADDR_OWVAR 42
24309: PUSH
24310: LD_INT 27
24312: ST_TO_ADDR
24313: GO 24392
24315: LD_INT 31
24317: DOUBLE
24318: EQUAL
24319: IFTRUE 24323
24321: GO 24334
24323: POP
// bc_type := b_oil_power ; 32 :
24324: LD_ADDR_OWVAR 42
24328: PUSH
24329: LD_INT 26
24331: ST_TO_ADDR
24332: GO 24392
24334: LD_INT 32
24336: DOUBLE
24337: EQUAL
24338: IFTRUE 24342
24340: GO 24353
24342: POP
// bc_type := b_siberite_power ; 33 :
24343: LD_ADDR_OWVAR 42
24347: PUSH
24348: LD_INT 28
24350: ST_TO_ADDR
24351: GO 24392
24353: LD_INT 33
24355: DOUBLE
24356: EQUAL
24357: IFTRUE 24361
24359: GO 24372
24361: POP
// bc_type := b_oil_mine ; 34 :
24362: LD_ADDR_OWVAR 42
24366: PUSH
24367: LD_INT 29
24369: ST_TO_ADDR
24370: GO 24392
24372: LD_INT 34
24374: DOUBLE
24375: EQUAL
24376: IFTRUE 24380
24378: GO 24391
24380: POP
// bc_type := b_siberite_mine ; end ;
24381: LD_ADDR_OWVAR 42
24385: PUSH
24386: LD_INT 30
24388: ST_TO_ADDR
24389: GO 24392
24391: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24392: LD_ADDR_VAR 0 8
24396: PUSH
24397: LD_VAR 0 5
24401: PPUSH
24402: LD_VAR 0 6
24406: PPUSH
24407: LD_VAR 0 3
24411: PPUSH
24412: CALL_OW 47
24416: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24417: LD_OWVAR 42
24421: PUSH
24422: LD_INT 32
24424: PUSH
24425: LD_INT 33
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: IN
24432: IFFALSE 24448
// PlaceWeaponTurret ( b , weapon ) ;
24434: LD_VAR 0 8
24438: PPUSH
24439: LD_VAR 0 4
24443: PPUSH
24444: CALL_OW 431
// end ;
24448: LD_VAR 0 7
24452: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24453: LD_INT 0
24455: PPUSH
24456: PPUSH
24457: PPUSH
24458: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24459: LD_ADDR_VAR 0 4
24463: PUSH
24464: LD_INT 22
24466: PUSH
24467: LD_OWVAR 2
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 2
24478: PUSH
24479: LD_INT 30
24481: PUSH
24482: LD_INT 0
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 30
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: LIST
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PPUSH
24508: CALL_OW 69
24512: ST_TO_ADDR
// if not tmp then
24513: LD_VAR 0 4
24517: NOT
24518: IFFALSE 24522
// exit ;
24520: GO 24581
// for i in tmp do
24522: LD_ADDR_VAR 0 2
24526: PUSH
24527: LD_VAR 0 4
24531: PUSH
24532: FOR_IN
24533: IFFALSE 24579
// for j = 1 to 3 do
24535: LD_ADDR_VAR 0 3
24539: PUSH
24540: DOUBLE
24541: LD_INT 1
24543: DEC
24544: ST_TO_ADDR
24545: LD_INT 3
24547: PUSH
24548: FOR_TO
24549: IFFALSE 24575
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24551: LD_VAR 0 2
24555: PPUSH
24556: CALL_OW 274
24560: PPUSH
24561: LD_VAR 0 3
24565: PPUSH
24566: LD_INT 99999
24568: PPUSH
24569: CALL_OW 277
24573: GO 24548
24575: POP
24576: POP
24577: GO 24532
24579: POP
24580: POP
// end ;
24581: LD_VAR 0 1
24585: RET
// export function hHackSetLevel10 ; var i , j ; begin
24586: LD_INT 0
24588: PPUSH
24589: PPUSH
24590: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24591: LD_ADDR_VAR 0 2
24595: PUSH
24596: LD_INT 21
24598: PUSH
24599: LD_INT 1
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PPUSH
24606: CALL_OW 69
24610: PUSH
24611: FOR_IN
24612: IFFALSE 24664
// if IsSelected ( i ) then
24614: LD_VAR 0 2
24618: PPUSH
24619: CALL_OW 306
24623: IFFALSE 24662
// begin for j := 1 to 4 do
24625: LD_ADDR_VAR 0 3
24629: PUSH
24630: DOUBLE
24631: LD_INT 1
24633: DEC
24634: ST_TO_ADDR
24635: LD_INT 4
24637: PUSH
24638: FOR_TO
24639: IFFALSE 24660
// SetSkill ( i , j , 10 ) ;
24641: LD_VAR 0 2
24645: PPUSH
24646: LD_VAR 0 3
24650: PPUSH
24651: LD_INT 10
24653: PPUSH
24654: CALL_OW 237
24658: GO 24638
24660: POP
24661: POP
// end ;
24662: GO 24611
24664: POP
24665: POP
// end ;
24666: LD_VAR 0 1
24670: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24671: LD_INT 0
24673: PPUSH
24674: PPUSH
24675: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24676: LD_ADDR_VAR 0 2
24680: PUSH
24681: LD_INT 22
24683: PUSH
24684: LD_OWVAR 2
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 21
24695: PUSH
24696: LD_INT 1
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PPUSH
24707: CALL_OW 69
24711: PUSH
24712: FOR_IN
24713: IFFALSE 24754
// begin for j := 1 to 4 do
24715: LD_ADDR_VAR 0 3
24719: PUSH
24720: DOUBLE
24721: LD_INT 1
24723: DEC
24724: ST_TO_ADDR
24725: LD_INT 4
24727: PUSH
24728: FOR_TO
24729: IFFALSE 24750
// SetSkill ( i , j , 10 ) ;
24731: LD_VAR 0 2
24735: PPUSH
24736: LD_VAR 0 3
24740: PPUSH
24741: LD_INT 10
24743: PPUSH
24744: CALL_OW 237
24748: GO 24728
24750: POP
24751: POP
// end ;
24752: GO 24712
24754: POP
24755: POP
// end ;
24756: LD_VAR 0 1
24760: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24761: LD_INT 0
24763: PPUSH
// uc_side := your_side ;
24764: LD_ADDR_OWVAR 20
24768: PUSH
24769: LD_OWVAR 2
24773: ST_TO_ADDR
// uc_nation := nation ;
24774: LD_ADDR_OWVAR 21
24778: PUSH
24779: LD_VAR 0 1
24783: ST_TO_ADDR
// InitHc ;
24784: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24788: LD_INT 0
24790: PPUSH
24791: LD_VAR 0 2
24795: PPUSH
24796: LD_VAR 0 3
24800: PPUSH
24801: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24805: LD_VAR 0 4
24809: PPUSH
24810: LD_VAR 0 5
24814: PPUSH
24815: CALL_OW 428
24819: PUSH
24820: LD_INT 0
24822: EQUAL
24823: IFFALSE 24847
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24825: CALL_OW 44
24829: PPUSH
24830: LD_VAR 0 4
24834: PPUSH
24835: LD_VAR 0 5
24839: PPUSH
24840: LD_INT 1
24842: PPUSH
24843: CALL_OW 48
// end ;
24847: LD_VAR 0 6
24851: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24852: LD_INT 0
24854: PPUSH
24855: PPUSH
// uc_side := your_side ;
24856: LD_ADDR_OWVAR 20
24860: PUSH
24861: LD_OWVAR 2
24865: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24866: LD_VAR 0 1
24870: PUSH
24871: LD_INT 1
24873: PUSH
24874: LD_INT 2
24876: PUSH
24877: LD_INT 3
24879: PUSH
24880: LD_INT 4
24882: PUSH
24883: LD_INT 5
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: IN
24893: IFFALSE 24905
// uc_nation := nation_american else
24895: LD_ADDR_OWVAR 21
24899: PUSH
24900: LD_INT 1
24902: ST_TO_ADDR
24903: GO 24948
// if chassis in [ 11 , 12 , 13 , 14 ] then
24905: LD_VAR 0 1
24909: PUSH
24910: LD_INT 11
24912: PUSH
24913: LD_INT 12
24915: PUSH
24916: LD_INT 13
24918: PUSH
24919: LD_INT 14
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: IN
24928: IFFALSE 24940
// uc_nation := nation_arabian else
24930: LD_ADDR_OWVAR 21
24934: PUSH
24935: LD_INT 2
24937: ST_TO_ADDR
24938: GO 24948
// uc_nation := nation_russian ;
24940: LD_ADDR_OWVAR 21
24944: PUSH
24945: LD_INT 3
24947: ST_TO_ADDR
// vc_chassis := chassis ;
24948: LD_ADDR_OWVAR 37
24952: PUSH
24953: LD_VAR 0 1
24957: ST_TO_ADDR
// vc_engine := engine ;
24958: LD_ADDR_OWVAR 39
24962: PUSH
24963: LD_VAR 0 2
24967: ST_TO_ADDR
// vc_control := control ;
24968: LD_ADDR_OWVAR 38
24972: PUSH
24973: LD_VAR 0 3
24977: ST_TO_ADDR
// vc_weapon := weapon ;
24978: LD_ADDR_OWVAR 40
24982: PUSH
24983: LD_VAR 0 4
24987: ST_TO_ADDR
// un := CreateVehicle ;
24988: LD_ADDR_VAR 0 8
24992: PUSH
24993: CALL_OW 45
24997: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24998: LD_VAR 0 8
25002: PPUSH
25003: LD_INT 0
25005: PPUSH
25006: LD_INT 5
25008: PPUSH
25009: CALL_OW 12
25013: PPUSH
25014: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25018: LD_VAR 0 8
25022: PPUSH
25023: LD_VAR 0 5
25027: PPUSH
25028: LD_VAR 0 6
25032: PPUSH
25033: LD_INT 1
25035: PPUSH
25036: CALL_OW 48
// end ;
25040: LD_VAR 0 7
25044: RET
// export hInvincible ; every 1 do
25045: GO 25047
25047: DISABLE
// hInvincible := [ ] ;
25048: LD_ADDR_EXP 122
25052: PUSH
25053: EMPTY
25054: ST_TO_ADDR
25055: END
// every 10 do var i ;
25056: GO 25058
25058: DISABLE
25059: LD_INT 0
25061: PPUSH
// begin enable ;
25062: ENABLE
// if not hInvincible then
25063: LD_EXP 122
25067: NOT
25068: IFFALSE 25072
// exit ;
25070: GO 25116
// for i in hInvincible do
25072: LD_ADDR_VAR 0 1
25076: PUSH
25077: LD_EXP 122
25081: PUSH
25082: FOR_IN
25083: IFFALSE 25114
// if GetLives ( i ) < 1000 then
25085: LD_VAR 0 1
25089: PPUSH
25090: CALL_OW 256
25094: PUSH
25095: LD_INT 1000
25097: LESS
25098: IFFALSE 25112
// SetLives ( i , 1000 ) ;
25100: LD_VAR 0 1
25104: PPUSH
25105: LD_INT 1000
25107: PPUSH
25108: CALL_OW 234
25112: GO 25082
25114: POP
25115: POP
// end ;
25116: PPOPN 1
25118: END
// export function hHackInvincible ; var i ; begin
25119: LD_INT 0
25121: PPUSH
25122: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25123: LD_ADDR_VAR 0 2
25127: PUSH
25128: LD_INT 2
25130: PUSH
25131: LD_INT 21
25133: PUSH
25134: LD_INT 1
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 21
25143: PUSH
25144: LD_INT 2
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: LIST
25155: PPUSH
25156: CALL_OW 69
25160: PUSH
25161: FOR_IN
25162: IFFALSE 25223
// if IsSelected ( i ) then
25164: LD_VAR 0 2
25168: PPUSH
25169: CALL_OW 306
25173: IFFALSE 25221
// begin if i in hInvincible then
25175: LD_VAR 0 2
25179: PUSH
25180: LD_EXP 122
25184: IN
25185: IFFALSE 25205
// hInvincible := hInvincible diff i else
25187: LD_ADDR_EXP 122
25191: PUSH
25192: LD_EXP 122
25196: PUSH
25197: LD_VAR 0 2
25201: DIFF
25202: ST_TO_ADDR
25203: GO 25221
// hInvincible := hInvincible union i ;
25205: LD_ADDR_EXP 122
25209: PUSH
25210: LD_EXP 122
25214: PUSH
25215: LD_VAR 0 2
25219: UNION
25220: ST_TO_ADDR
// end ;
25221: GO 25161
25223: POP
25224: POP
// end ;
25225: LD_VAR 0 1
25229: RET
// export function hHackInvisible ; var i , j ; begin
25230: LD_INT 0
25232: PPUSH
25233: PPUSH
25234: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25235: LD_ADDR_VAR 0 2
25239: PUSH
25240: LD_INT 21
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PPUSH
25250: CALL_OW 69
25254: PUSH
25255: FOR_IN
25256: IFFALSE 25280
// if IsSelected ( i ) then
25258: LD_VAR 0 2
25262: PPUSH
25263: CALL_OW 306
25267: IFFALSE 25278
// ComForceInvisible ( i ) ;
25269: LD_VAR 0 2
25273: PPUSH
25274: CALL_OW 496
25278: GO 25255
25280: POP
25281: POP
// end ;
25282: LD_VAR 0 1
25286: RET
// export function hHackChangeYourSide ; begin
25287: LD_INT 0
25289: PPUSH
// if your_side = 8 then
25290: LD_OWVAR 2
25294: PUSH
25295: LD_INT 8
25297: EQUAL
25298: IFFALSE 25310
// your_side := 0 else
25300: LD_ADDR_OWVAR 2
25304: PUSH
25305: LD_INT 0
25307: ST_TO_ADDR
25308: GO 25324
// your_side := your_side + 1 ;
25310: LD_ADDR_OWVAR 2
25314: PUSH
25315: LD_OWVAR 2
25319: PUSH
25320: LD_INT 1
25322: PLUS
25323: ST_TO_ADDR
// end ;
25324: LD_VAR 0 1
25328: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25329: LD_INT 0
25331: PPUSH
25332: PPUSH
25333: PPUSH
// for i in all_units do
25334: LD_ADDR_VAR 0 2
25338: PUSH
25339: LD_OWVAR 3
25343: PUSH
25344: FOR_IN
25345: IFFALSE 25423
// if IsSelected ( i ) then
25347: LD_VAR 0 2
25351: PPUSH
25352: CALL_OW 306
25356: IFFALSE 25421
// begin j := GetSide ( i ) ;
25358: LD_ADDR_VAR 0 3
25362: PUSH
25363: LD_VAR 0 2
25367: PPUSH
25368: CALL_OW 255
25372: ST_TO_ADDR
// if j = 8 then
25373: LD_VAR 0 3
25377: PUSH
25378: LD_INT 8
25380: EQUAL
25381: IFFALSE 25393
// j := 0 else
25383: LD_ADDR_VAR 0 3
25387: PUSH
25388: LD_INT 0
25390: ST_TO_ADDR
25391: GO 25407
// j := j + 1 ;
25393: LD_ADDR_VAR 0 3
25397: PUSH
25398: LD_VAR 0 3
25402: PUSH
25403: LD_INT 1
25405: PLUS
25406: ST_TO_ADDR
// SetSide ( i , j ) ;
25407: LD_VAR 0 2
25411: PPUSH
25412: LD_VAR 0 3
25416: PPUSH
25417: CALL_OW 235
// end ;
25421: GO 25344
25423: POP
25424: POP
// end ;
25425: LD_VAR 0 1
25429: RET
// export function hHackFog ; begin
25430: LD_INT 0
25432: PPUSH
// FogOff ( true ) ;
25433: LD_INT 1
25435: PPUSH
25436: CALL_OW 344
// end ;
25440: LD_VAR 0 1
25444: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25445: LD_INT 0
25447: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25448: LD_VAR 0 1
25452: PPUSH
25453: LD_VAR 0 2
25457: PPUSH
25458: LD_VAR 0 3
25462: PPUSH
25463: LD_INT 1
25465: PPUSH
25466: LD_INT 1
25468: PPUSH
25469: CALL_OW 483
// CenterOnXY ( x , y ) ;
25473: LD_VAR 0 2
25477: PPUSH
25478: LD_VAR 0 3
25482: PPUSH
25483: CALL_OW 84
// end ;
25487: LD_VAR 0 4
25491: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25492: LD_INT 0
25494: PPUSH
25495: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25496: LD_VAR 0 1
25500: NOT
25501: PUSH
25502: LD_VAR 0 2
25506: PPUSH
25507: LD_VAR 0 3
25511: PPUSH
25512: CALL_OW 488
25516: NOT
25517: OR
25518: PUSH
25519: LD_VAR 0 1
25523: PPUSH
25524: CALL_OW 266
25528: PUSH
25529: LD_INT 3
25531: NONEQUAL
25532: PUSH
25533: LD_VAR 0 1
25537: PPUSH
25538: CALL_OW 247
25542: PUSH
25543: LD_INT 1
25545: EQUAL
25546: NOT
25547: AND
25548: OR
25549: IFFALSE 25553
// exit ;
25551: GO 25702
// if GetType ( factory ) = unit_human then
25553: LD_VAR 0 1
25557: PPUSH
25558: CALL_OW 247
25562: PUSH
25563: LD_INT 1
25565: EQUAL
25566: IFFALSE 25583
// factory := IsInUnit ( factory ) ;
25568: LD_ADDR_VAR 0 1
25572: PUSH
25573: LD_VAR 0 1
25577: PPUSH
25578: CALL_OW 310
25582: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25583: LD_VAR 0 1
25587: PPUSH
25588: CALL_OW 266
25592: PUSH
25593: LD_INT 3
25595: NONEQUAL
25596: IFFALSE 25600
// exit ;
25598: GO 25702
// if HexInfo ( x , y ) = factory then
25600: LD_VAR 0 2
25604: PPUSH
25605: LD_VAR 0 3
25609: PPUSH
25610: CALL_OW 428
25614: PUSH
25615: LD_VAR 0 1
25619: EQUAL
25620: IFFALSE 25647
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25622: LD_ADDR_EXP 123
25626: PUSH
25627: LD_EXP 123
25631: PPUSH
25632: LD_VAR 0 1
25636: PPUSH
25637: LD_INT 0
25639: PPUSH
25640: CALL_OW 1
25644: ST_TO_ADDR
25645: GO 25698
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25647: LD_ADDR_EXP 123
25651: PUSH
25652: LD_EXP 123
25656: PPUSH
25657: LD_VAR 0 1
25661: PPUSH
25662: LD_VAR 0 1
25666: PPUSH
25667: CALL_OW 255
25671: PUSH
25672: LD_VAR 0 1
25676: PUSH
25677: LD_VAR 0 2
25681: PUSH
25682: LD_VAR 0 3
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: PPUSH
25693: CALL_OW 1
25697: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25698: CALL 25707 0 0
// end ;
25702: LD_VAR 0 4
25706: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
25707: LD_INT 0
25709: PPUSH
25710: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25711: LD_STRING resetFactoryWaypoint();
25713: PPUSH
25714: CALL_OW 559
// if factoryWaypoints then
25718: LD_EXP 123
25722: IFFALSE 25845
// begin for i := 1 to factoryWaypoints do
25724: LD_ADDR_VAR 0 2
25728: PUSH
25729: DOUBLE
25730: LD_INT 1
25732: DEC
25733: ST_TO_ADDR
25734: LD_EXP 123
25738: PUSH
25739: FOR_TO
25740: IFFALSE 25843
// if factoryWaypoints [ i ] then
25742: LD_EXP 123
25746: PUSH
25747: LD_VAR 0 2
25751: ARRAY
25752: IFFALSE 25841
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
25754: LD_STRING setFactoryWaypointXY(
25756: PUSH
25757: LD_EXP 123
25761: PUSH
25762: LD_VAR 0 2
25766: ARRAY
25767: PUSH
25768: LD_INT 1
25770: ARRAY
25771: STR
25772: PUSH
25773: LD_STRING ,
25775: STR
25776: PUSH
25777: LD_EXP 123
25781: PUSH
25782: LD_VAR 0 2
25786: ARRAY
25787: PUSH
25788: LD_INT 2
25790: ARRAY
25791: STR
25792: PUSH
25793: LD_STRING ,
25795: STR
25796: PUSH
25797: LD_EXP 123
25801: PUSH
25802: LD_VAR 0 2
25806: ARRAY
25807: PUSH
25808: LD_INT 3
25810: ARRAY
25811: STR
25812: PUSH
25813: LD_STRING ,
25815: STR
25816: PUSH
25817: LD_EXP 123
25821: PUSH
25822: LD_VAR 0 2
25826: ARRAY
25827: PUSH
25828: LD_INT 4
25830: ARRAY
25831: STR
25832: PUSH
25833: LD_STRING )
25835: STR
25836: PPUSH
25837: CALL_OW 559
25841: GO 25739
25843: POP
25844: POP
// end ; end ;
25845: LD_VAR 0 1
25849: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarhouseGatheringPoint ( warehouse , x , y ) ; begin
25850: LD_INT 0
25852: PPUSH
// if HexInfo ( x , y ) = warehouse then
25853: LD_VAR 0 2
25857: PPUSH
25858: LD_VAR 0 3
25862: PPUSH
25863: CALL_OW 428
25867: PUSH
25868: LD_VAR 0 1
25872: EQUAL
25873: IFFALSE 25900
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25875: LD_ADDR_EXP 124
25879: PUSH
25880: LD_EXP 124
25884: PPUSH
25885: LD_VAR 0 1
25889: PPUSH
25890: LD_INT 0
25892: PPUSH
25893: CALL_OW 1
25897: ST_TO_ADDR
25898: GO 25951
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25900: LD_ADDR_EXP 124
25904: PUSH
25905: LD_EXP 124
25909: PPUSH
25910: LD_VAR 0 1
25914: PPUSH
25915: LD_VAR 0 1
25919: PPUSH
25920: CALL_OW 255
25924: PUSH
25925: LD_VAR 0 1
25929: PUSH
25930: LD_VAR 0 2
25934: PUSH
25935: LD_VAR 0 3
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: PPUSH
25946: CALL_OW 1
25950: ST_TO_ADDR
// UpdateWarhouseGatheringPoints ;
25951: CALL 25960 0 0
// end ;
25955: LD_VAR 0 4
25959: RET
// export function UpdateWarhouseGatheringPoints ( ) ; var i ; begin
25960: LD_INT 0
25962: PPUSH
25963: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25964: LD_STRING resetWarehouseGatheringPoints();
25966: PPUSH
25967: CALL_OW 559
// if warehouseGatheringPoints then
25971: LD_EXP 124
25975: IFFALSE 26098
// begin for i := 1 to warehouseGatheringPoints do
25977: LD_ADDR_VAR 0 2
25981: PUSH
25982: DOUBLE
25983: LD_INT 1
25985: DEC
25986: ST_TO_ADDR
25987: LD_EXP 124
25991: PUSH
25992: FOR_TO
25993: IFFALSE 26096
// if warehouseGatheringPoints [ i ] then
25995: LD_EXP 124
25999: PUSH
26000: LD_VAR 0 2
26004: ARRAY
26005: IFFALSE 26094
// ToLua ( setWarhouseGatheringPointXY( & warehouseGatheringPoints [ i ] [ 1 ] & , & warehouseGatheringPoints [ i ] [ 2 ] & , & warehouseGatheringPoints [ i ] [ 3 ] & , & warehouseGatheringPoints [ i ] [ 4 ] & ) ) ;
26007: LD_STRING setWarhouseGatheringPointXY(
26009: PUSH
26010: LD_EXP 124
26014: PUSH
26015: LD_VAR 0 2
26019: ARRAY
26020: PUSH
26021: LD_INT 1
26023: ARRAY
26024: STR
26025: PUSH
26026: LD_STRING ,
26028: STR
26029: PUSH
26030: LD_EXP 124
26034: PUSH
26035: LD_VAR 0 2
26039: ARRAY
26040: PUSH
26041: LD_INT 2
26043: ARRAY
26044: STR
26045: PUSH
26046: LD_STRING ,
26048: STR
26049: PUSH
26050: LD_EXP 124
26054: PUSH
26055: LD_VAR 0 2
26059: ARRAY
26060: PUSH
26061: LD_INT 3
26063: ARRAY
26064: STR
26065: PUSH
26066: LD_STRING ,
26068: STR
26069: PUSH
26070: LD_EXP 124
26074: PUSH
26075: LD_VAR 0 2
26079: ARRAY
26080: PUSH
26081: LD_INT 4
26083: ARRAY
26084: STR
26085: PUSH
26086: LD_STRING )
26088: STR
26089: PPUSH
26090: CALL_OW 559
26094: GO 25992
26096: POP
26097: POP
// end ; end ;
26098: LD_VAR 0 1
26102: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26103: LD_EXP 124
26107: IFFALSE 26736
26109: GO 26111
26111: DISABLE
26112: LD_INT 0
26114: PPUSH
26115: PPUSH
26116: PPUSH
26117: PPUSH
26118: PPUSH
26119: PPUSH
26120: PPUSH
26121: PPUSH
26122: PPUSH
// begin enable ;
26123: ENABLE
// list := warehouseGatheringPoints diff 0 ;
26124: LD_ADDR_VAR 0 3
26128: PUSH
26129: LD_EXP 124
26133: PUSH
26134: LD_INT 0
26136: DIFF
26137: ST_TO_ADDR
// for i := 1 to list do
26138: LD_ADDR_VAR 0 1
26142: PUSH
26143: DOUBLE
26144: LD_INT 1
26146: DEC
26147: ST_TO_ADDR
26148: LD_VAR 0 3
26152: PUSH
26153: FOR_TO
26154: IFFALSE 26734
// begin if not list [ i ] then
26156: LD_VAR 0 3
26160: PUSH
26161: LD_VAR 0 1
26165: ARRAY
26166: NOT
26167: IFFALSE 26171
// continue ;
26169: GO 26153
// depot := list [ i ] [ 2 ] ;
26171: LD_ADDR_VAR 0 8
26175: PUSH
26176: LD_VAR 0 3
26180: PUSH
26181: LD_VAR 0 1
26185: ARRAY
26186: PUSH
26187: LD_INT 2
26189: ARRAY
26190: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26191: LD_ADDR_VAR 0 5
26195: PUSH
26196: LD_VAR 0 3
26200: PUSH
26201: LD_VAR 0 1
26205: ARRAY
26206: PUSH
26207: LD_INT 1
26209: ARRAY
26210: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26211: LD_VAR 0 8
26215: PPUSH
26216: CALL_OW 301
26220: PUSH
26221: LD_VAR 0 5
26225: PUSH
26226: LD_VAR 0 8
26230: PPUSH
26231: CALL_OW 255
26235: NONEQUAL
26236: OR
26237: IFFALSE 26266
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26239: LD_ADDR_EXP 124
26243: PUSH
26244: LD_EXP 124
26248: PPUSH
26249: LD_VAR 0 8
26253: PPUSH
26254: LD_INT 0
26256: PPUSH
26257: CALL_OW 1
26261: ST_TO_ADDR
// exit ;
26262: POP
26263: POP
26264: GO 26736
// end ; x := list [ i ] [ 3 ] ;
26266: LD_ADDR_VAR 0 6
26270: PUSH
26271: LD_VAR 0 3
26275: PUSH
26276: LD_VAR 0 1
26280: ARRAY
26281: PUSH
26282: LD_INT 3
26284: ARRAY
26285: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26286: LD_ADDR_VAR 0 7
26290: PUSH
26291: LD_VAR 0 3
26295: PUSH
26296: LD_VAR 0 1
26300: ARRAY
26301: PUSH
26302: LD_INT 4
26304: ARRAY
26305: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 12 ) ;
26306: LD_ADDR_VAR 0 9
26310: PUSH
26311: LD_VAR 0 6
26315: PPUSH
26316: LD_VAR 0 7
26320: PPUSH
26321: LD_INT 12
26323: PPUSH
26324: CALL 70799 0 3
26328: ST_TO_ADDR
// if not cratesNearbyPoint then
26329: LD_VAR 0 9
26333: NOT
26334: IFFALSE 26340
// exit ;
26336: POP
26337: POP
26338: GO 26736
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26340: LD_ADDR_VAR 0 4
26344: PUSH
26345: LD_INT 22
26347: PUSH
26348: LD_VAR 0 5
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 3
26359: PUSH
26360: LD_INT 60
26362: PUSH
26363: EMPTY
26364: LIST
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 2
26372: PUSH
26373: LD_INT 25
26375: PUSH
26376: LD_INT 2
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 25
26385: PUSH
26386: LD_INT 16
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: LIST
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: LIST
26402: PPUSH
26403: CALL_OW 69
26407: PUSH
26408: LD_VAR 0 8
26412: PPUSH
26413: CALL_OW 313
26417: PPUSH
26418: LD_INT 3
26420: PUSH
26421: LD_INT 60
26423: PUSH
26424: EMPTY
26425: LIST
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 2
26433: PUSH
26434: LD_INT 25
26436: PUSH
26437: LD_INT 2
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 25
26446: PUSH
26447: LD_INT 16
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: LIST
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PPUSH
26463: CALL_OW 72
26467: UNION
26468: ST_TO_ADDR
// if tmp then
26469: LD_VAR 0 4
26473: IFFALSE 26553
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26475: LD_ADDR_VAR 0 4
26479: PUSH
26480: LD_VAR 0 4
26484: PPUSH
26485: LD_INT 3
26487: PPUSH
26488: CALL 68766 0 2
26492: ST_TO_ADDR
// for j in tmp do
26493: LD_ADDR_VAR 0 2
26497: PUSH
26498: LD_VAR 0 4
26502: PUSH
26503: FOR_IN
26504: IFFALSE 26547
// begin if IsInUnit ( j ) then
26506: LD_VAR 0 2
26510: PPUSH
26511: CALL_OW 310
26515: IFFALSE 26526
// ComExit ( j ) ;
26517: LD_VAR 0 2
26521: PPUSH
26522: CALL 68849 0 1
// AddComCollect ( j , x , y ) ;
26526: LD_VAR 0 2
26530: PPUSH
26531: LD_VAR 0 6
26535: PPUSH
26536: LD_VAR 0 7
26540: PPUSH
26541: CALL_OW 177
// end ;
26545: GO 26503
26547: POP
26548: POP
// exit ;
26549: POP
26550: POP
26551: GO 26736
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26553: LD_ADDR_VAR 0 4
26557: PUSH
26558: LD_INT 22
26560: PUSH
26561: LD_VAR 0 5
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 2
26572: PUSH
26573: LD_INT 34
26575: PUSH
26576: LD_INT 12
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 34
26585: PUSH
26586: LD_INT 51
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 34
26595: PUSH
26596: LD_INT 32
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 34
26605: PUSH
26606: LD_EXP 47
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PPUSH
26626: CALL_OW 69
26630: ST_TO_ADDR
// if tmp then
26631: LD_VAR 0 4
26635: IFFALSE 26732
// begin for j in tmp do
26637: LD_ADDR_VAR 0 2
26641: PUSH
26642: LD_VAR 0 4
26646: PUSH
26647: FOR_IN
26648: IFFALSE 26730
// if GetFuel ( i ) > 20 and not HasTask ( i ) and ( GetControl ( i ) <> control_manual or IsDrivenBy ( i ) ) then
26650: LD_VAR 0 1
26654: PPUSH
26655: CALL_OW 261
26659: PUSH
26660: LD_INT 20
26662: GREATER
26663: PUSH
26664: LD_VAR 0 1
26668: PPUSH
26669: CALL_OW 314
26673: NOT
26674: AND
26675: PUSH
26676: LD_VAR 0 1
26680: PPUSH
26681: CALL_OW 263
26685: PUSH
26686: LD_INT 1
26688: NONEQUAL
26689: PUSH
26690: LD_VAR 0 1
26694: PPUSH
26695: CALL_OW 311
26699: OR
26700: AND
26701: IFFALSE 26728
// begin ComCollect ( j , x , y ) ;
26703: LD_VAR 0 2
26707: PPUSH
26708: LD_VAR 0 6
26712: PPUSH
26713: LD_VAR 0 7
26717: PPUSH
26718: CALL_OW 117
// exit ;
26722: POP
26723: POP
26724: POP
26725: POP
26726: GO 26736
// end ;
26728: GO 26647
26730: POP
26731: POP
// end ; end ;
26732: GO 26153
26734: POP
26735: POP
// end ; end_of_file
26736: PPOPN 9
26738: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26739: LD_INT 0
26741: PPUSH
26742: PPUSH
26743: PPUSH
26744: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26745: LD_VAR 0 1
26749: PPUSH
26750: CALL_OW 264
26754: PUSH
26755: LD_EXP 50
26759: EQUAL
26760: IFFALSE 26832
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26762: LD_INT 68
26764: PPUSH
26765: LD_VAR 0 1
26769: PPUSH
26770: CALL_OW 255
26774: PPUSH
26775: CALL_OW 321
26779: PUSH
26780: LD_INT 2
26782: EQUAL
26783: IFFALSE 26795
// eff := 70 else
26785: LD_ADDR_VAR 0 4
26789: PUSH
26790: LD_INT 70
26792: ST_TO_ADDR
26793: GO 26803
// eff := 30 ;
26795: LD_ADDR_VAR 0 4
26799: PUSH
26800: LD_INT 30
26802: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26803: LD_VAR 0 1
26807: PPUSH
26808: CALL_OW 250
26812: PPUSH
26813: LD_VAR 0 1
26817: PPUSH
26818: CALL_OW 251
26822: PPUSH
26823: LD_VAR 0 4
26827: PPUSH
26828: CALL_OW 495
// end ; end ;
26832: LD_VAR 0 2
26836: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26837: LD_INT 0
26839: PPUSH
// end ;
26840: LD_VAR 0 4
26844: RET
// export function SOS_Command ( cmd ) ; begin
26845: LD_INT 0
26847: PPUSH
// end ;
26848: LD_VAR 0 2
26852: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26853: LD_INT 0
26855: PPUSH
// end ;
26856: LD_VAR 0 6
26860: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26861: LD_INT 0
26863: PPUSH
26864: PPUSH
// if not vehicle or not factory then
26865: LD_VAR 0 1
26869: NOT
26870: PUSH
26871: LD_VAR 0 2
26875: NOT
26876: OR
26877: IFFALSE 26881
// exit ;
26879: GO 27112
// if factoryWaypoints >= factory then
26881: LD_EXP 123
26885: PUSH
26886: LD_VAR 0 2
26890: GREATEREQUAL
26891: IFFALSE 27112
// if factoryWaypoints [ factory ] then
26893: LD_EXP 123
26897: PUSH
26898: LD_VAR 0 2
26902: ARRAY
26903: IFFALSE 27112
// begin if GetControl ( vehicle ) = control_manual then
26905: LD_VAR 0 1
26909: PPUSH
26910: CALL_OW 263
26914: PUSH
26915: LD_INT 1
26917: EQUAL
26918: IFFALSE 26999
// begin driver := IsDrivenBy ( vehicle ) ;
26920: LD_ADDR_VAR 0 4
26924: PUSH
26925: LD_VAR 0 1
26929: PPUSH
26930: CALL_OW 311
26934: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26935: LD_VAR 0 4
26939: PPUSH
26940: LD_EXP 123
26944: PUSH
26945: LD_VAR 0 2
26949: ARRAY
26950: PUSH
26951: LD_INT 3
26953: ARRAY
26954: PPUSH
26955: LD_EXP 123
26959: PUSH
26960: LD_VAR 0 2
26964: ARRAY
26965: PUSH
26966: LD_INT 4
26968: ARRAY
26969: PPUSH
26970: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26974: LD_VAR 0 4
26978: PPUSH
26979: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26983: LD_VAR 0 4
26987: PPUSH
26988: LD_VAR 0 2
26992: PPUSH
26993: CALL_OW 180
// end else
26997: GO 27112
// if GetControl ( vehicle ) = control_remote then
26999: LD_VAR 0 1
27003: PPUSH
27004: CALL_OW 263
27008: PUSH
27009: LD_INT 2
27011: EQUAL
27012: IFFALSE 27073
// begin wait ( 0 0$2 ) ;
27014: LD_INT 70
27016: PPUSH
27017: CALL_OW 67
// if Connect ( vehicle ) then
27021: LD_VAR 0 1
27025: PPUSH
27026: CALL 39160 0 1
27030: IFFALSE 27071
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27032: LD_VAR 0 1
27036: PPUSH
27037: LD_EXP 123
27041: PUSH
27042: LD_VAR 0 2
27046: ARRAY
27047: PUSH
27048: LD_INT 3
27050: ARRAY
27051: PPUSH
27052: LD_EXP 123
27056: PUSH
27057: LD_VAR 0 2
27061: ARRAY
27062: PUSH
27063: LD_INT 4
27065: ARRAY
27066: PPUSH
27067: CALL_OW 171
// end else
27071: GO 27112
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27073: LD_VAR 0 1
27077: PPUSH
27078: LD_EXP 123
27082: PUSH
27083: LD_VAR 0 2
27087: ARRAY
27088: PUSH
27089: LD_INT 3
27091: ARRAY
27092: PPUSH
27093: LD_EXP 123
27097: PUSH
27098: LD_VAR 0 2
27102: ARRAY
27103: PUSH
27104: LD_INT 4
27106: ARRAY
27107: PPUSH
27108: CALL_OW 171
// end ; end ;
27112: LD_VAR 0 3
27116: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27117: LD_INT 0
27119: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27120: LD_VAR 0 1
27124: PUSH
27125: LD_INT 250
27127: EQUAL
27128: PUSH
27129: LD_VAR 0 2
27133: PPUSH
27134: CALL_OW 264
27138: PUSH
27139: LD_EXP 53
27143: EQUAL
27144: AND
27145: IFFALSE 27166
// MinerPlaceMine ( unit , x , y ) ;
27147: LD_VAR 0 2
27151: PPUSH
27152: LD_VAR 0 4
27156: PPUSH
27157: LD_VAR 0 5
27161: PPUSH
27162: CALL 29565 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27166: LD_VAR 0 1
27170: PUSH
27171: LD_INT 251
27173: EQUAL
27174: PUSH
27175: LD_VAR 0 2
27179: PPUSH
27180: CALL_OW 264
27184: PUSH
27185: LD_EXP 53
27189: EQUAL
27190: AND
27191: IFFALSE 27212
// MinerDetonateMine ( unit , x , y ) ;
27193: LD_VAR 0 2
27197: PPUSH
27198: LD_VAR 0 4
27202: PPUSH
27203: LD_VAR 0 5
27207: PPUSH
27208: CALL 29842 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27212: LD_VAR 0 1
27216: PUSH
27217: LD_INT 252
27219: EQUAL
27220: PUSH
27221: LD_VAR 0 2
27225: PPUSH
27226: CALL_OW 264
27230: PUSH
27231: LD_EXP 53
27235: EQUAL
27236: AND
27237: IFFALSE 27258
// MinerCreateMinefield ( unit , x , y ) ;
27239: LD_VAR 0 2
27243: PPUSH
27244: LD_VAR 0 4
27248: PPUSH
27249: LD_VAR 0 5
27253: PPUSH
27254: CALL 30259 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27258: LD_VAR 0 1
27262: PUSH
27263: LD_INT 253
27265: EQUAL
27266: PUSH
27267: LD_VAR 0 2
27271: PPUSH
27272: CALL_OW 257
27276: PUSH
27277: LD_INT 5
27279: EQUAL
27280: AND
27281: IFFALSE 27302
// ComBinocular ( unit , x , y ) ;
27283: LD_VAR 0 2
27287: PPUSH
27288: LD_VAR 0 4
27292: PPUSH
27293: LD_VAR 0 5
27297: PPUSH
27298: CALL 30630 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27302: LD_VAR 0 1
27306: PUSH
27307: LD_INT 254
27309: EQUAL
27310: PUSH
27311: LD_VAR 0 2
27315: PPUSH
27316: CALL_OW 264
27320: PUSH
27321: LD_EXP 48
27325: EQUAL
27326: AND
27327: PUSH
27328: LD_VAR 0 3
27332: PPUSH
27333: CALL_OW 263
27337: PUSH
27338: LD_INT 3
27340: EQUAL
27341: AND
27342: IFFALSE 27358
// HackDestroyVehicle ( unit , selectedUnit ) ;
27344: LD_VAR 0 2
27348: PPUSH
27349: LD_VAR 0 3
27353: PPUSH
27354: CALL 28925 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27358: LD_VAR 0 1
27362: PUSH
27363: LD_INT 255
27365: EQUAL
27366: PUSH
27367: LD_VAR 0 2
27371: PPUSH
27372: CALL_OW 264
27376: PUSH
27377: LD_INT 14
27379: PUSH
27380: LD_INT 53
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: IN
27387: AND
27388: PUSH
27389: LD_VAR 0 4
27393: PPUSH
27394: LD_VAR 0 5
27398: PPUSH
27399: CALL_OW 488
27403: AND
27404: IFFALSE 27428
// CutTreeXYR ( unit , x , y , 12 ) ;
27406: LD_VAR 0 2
27410: PPUSH
27411: LD_VAR 0 4
27415: PPUSH
27416: LD_VAR 0 5
27420: PPUSH
27421: LD_INT 12
27423: PPUSH
27424: CALL 27491 0 4
// if cmd = 256 then
27428: LD_VAR 0 1
27432: PUSH
27433: LD_INT 256
27435: EQUAL
27436: IFFALSE 27457
// SetFactoryWaypoint ( unit , x , y ) ;
27438: LD_VAR 0 2
27442: PPUSH
27443: LD_VAR 0 4
27447: PPUSH
27448: LD_VAR 0 5
27452: PPUSH
27453: CALL 25492 0 3
// if cmd = 257 then
27457: LD_VAR 0 1
27461: PUSH
27462: LD_INT 257
27464: EQUAL
27465: IFFALSE 27486
// SetWarhouseGatheringPoint ( unit , x , y ) ;
27467: LD_VAR 0 2
27471: PPUSH
27472: LD_VAR 0 4
27476: PPUSH
27477: LD_VAR 0 5
27481: PPUSH
27482: CALL 25850 0 3
// end ;
27486: LD_VAR 0 6
27490: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27491: LD_INT 0
27493: PPUSH
27494: PPUSH
27495: PPUSH
27496: PPUSH
27497: PPUSH
27498: PPUSH
27499: PPUSH
27500: PPUSH
27501: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27502: LD_VAR 0 1
27506: NOT
27507: PUSH
27508: LD_VAR 0 2
27512: PPUSH
27513: LD_VAR 0 3
27517: PPUSH
27518: CALL_OW 488
27522: NOT
27523: OR
27524: PUSH
27525: LD_VAR 0 4
27529: NOT
27530: OR
27531: IFFALSE 27535
// exit ;
27533: GO 27875
// list := [ ] ;
27535: LD_ADDR_VAR 0 13
27539: PUSH
27540: EMPTY
27541: ST_TO_ADDR
// if x - r < 0 then
27542: LD_VAR 0 2
27546: PUSH
27547: LD_VAR 0 4
27551: MINUS
27552: PUSH
27553: LD_INT 0
27555: LESS
27556: IFFALSE 27568
// min_x := 0 else
27558: LD_ADDR_VAR 0 7
27562: PUSH
27563: LD_INT 0
27565: ST_TO_ADDR
27566: GO 27584
// min_x := x - r ;
27568: LD_ADDR_VAR 0 7
27572: PUSH
27573: LD_VAR 0 2
27577: PUSH
27578: LD_VAR 0 4
27582: MINUS
27583: ST_TO_ADDR
// if y - r < 0 then
27584: LD_VAR 0 3
27588: PUSH
27589: LD_VAR 0 4
27593: MINUS
27594: PUSH
27595: LD_INT 0
27597: LESS
27598: IFFALSE 27610
// min_y := 0 else
27600: LD_ADDR_VAR 0 8
27604: PUSH
27605: LD_INT 0
27607: ST_TO_ADDR
27608: GO 27626
// min_y := y - r ;
27610: LD_ADDR_VAR 0 8
27614: PUSH
27615: LD_VAR 0 3
27619: PUSH
27620: LD_VAR 0 4
27624: MINUS
27625: ST_TO_ADDR
// max_x := x + r ;
27626: LD_ADDR_VAR 0 9
27630: PUSH
27631: LD_VAR 0 2
27635: PUSH
27636: LD_VAR 0 4
27640: PLUS
27641: ST_TO_ADDR
// max_y := y + r ;
27642: LD_ADDR_VAR 0 10
27646: PUSH
27647: LD_VAR 0 3
27651: PUSH
27652: LD_VAR 0 4
27656: PLUS
27657: ST_TO_ADDR
// for _x = min_x to max_x do
27658: LD_ADDR_VAR 0 11
27662: PUSH
27663: DOUBLE
27664: LD_VAR 0 7
27668: DEC
27669: ST_TO_ADDR
27670: LD_VAR 0 9
27674: PUSH
27675: FOR_TO
27676: IFFALSE 27793
// for _y = min_y to max_y do
27678: LD_ADDR_VAR 0 12
27682: PUSH
27683: DOUBLE
27684: LD_VAR 0 8
27688: DEC
27689: ST_TO_ADDR
27690: LD_VAR 0 10
27694: PUSH
27695: FOR_TO
27696: IFFALSE 27789
// begin if not ValidHex ( _x , _y ) then
27698: LD_VAR 0 11
27702: PPUSH
27703: LD_VAR 0 12
27707: PPUSH
27708: CALL_OW 488
27712: NOT
27713: IFFALSE 27717
// continue ;
27715: GO 27695
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27717: LD_VAR 0 11
27721: PPUSH
27722: LD_VAR 0 12
27726: PPUSH
27727: CALL_OW 351
27731: PUSH
27732: LD_VAR 0 11
27736: PPUSH
27737: LD_VAR 0 12
27741: PPUSH
27742: CALL_OW 554
27746: AND
27747: IFFALSE 27787
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27749: LD_ADDR_VAR 0 13
27753: PUSH
27754: LD_VAR 0 13
27758: PPUSH
27759: LD_VAR 0 13
27763: PUSH
27764: LD_INT 1
27766: PLUS
27767: PPUSH
27768: LD_VAR 0 11
27772: PUSH
27773: LD_VAR 0 12
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PPUSH
27782: CALL_OW 2
27786: ST_TO_ADDR
// end ;
27787: GO 27695
27789: POP
27790: POP
27791: GO 27675
27793: POP
27794: POP
// if not list then
27795: LD_VAR 0 13
27799: NOT
27800: IFFALSE 27804
// exit ;
27802: GO 27875
// for i in list do
27804: LD_ADDR_VAR 0 6
27808: PUSH
27809: LD_VAR 0 13
27813: PUSH
27814: FOR_IN
27815: IFFALSE 27873
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27817: LD_VAR 0 1
27821: PPUSH
27822: LD_STRING M
27824: PUSH
27825: LD_VAR 0 6
27829: PUSH
27830: LD_INT 1
27832: ARRAY
27833: PUSH
27834: LD_VAR 0 6
27838: PUSH
27839: LD_INT 2
27841: ARRAY
27842: PUSH
27843: LD_INT 0
27845: PUSH
27846: LD_INT 0
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: LD_INT 0
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: PUSH
27864: EMPTY
27865: LIST
27866: PPUSH
27867: CALL_OW 447
27871: GO 27814
27873: POP
27874: POP
// end ;
27875: LD_VAR 0 5
27879: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27880: LD_EXP 126
27884: NOT
27885: IFFALSE 27935
27887: GO 27889
27889: DISABLE
// begin initHack := true ;
27890: LD_ADDR_EXP 126
27894: PUSH
27895: LD_INT 1
27897: ST_TO_ADDR
// hackTanks := [ ] ;
27898: LD_ADDR_EXP 127
27902: PUSH
27903: EMPTY
27904: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27905: LD_ADDR_EXP 128
27909: PUSH
27910: EMPTY
27911: ST_TO_ADDR
// hackLimit := 3 ;
27912: LD_ADDR_EXP 129
27916: PUSH
27917: LD_INT 3
27919: ST_TO_ADDR
// hackDist := 12 ;
27920: LD_ADDR_EXP 130
27924: PUSH
27925: LD_INT 12
27927: ST_TO_ADDR
// hackCounter := [ ] ;
27928: LD_ADDR_EXP 131
27932: PUSH
27933: EMPTY
27934: ST_TO_ADDR
// end ;
27935: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27936: LD_EXP 126
27940: PUSH
27941: LD_INT 34
27943: PUSH
27944: LD_EXP 48
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PPUSH
27953: CALL_OW 69
27957: AND
27958: IFFALSE 28213
27960: GO 27962
27962: DISABLE
27963: LD_INT 0
27965: PPUSH
27966: PPUSH
// begin enable ;
27967: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27968: LD_ADDR_VAR 0 1
27972: PUSH
27973: LD_INT 34
27975: PUSH
27976: LD_EXP 48
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PPUSH
27985: CALL_OW 69
27989: PUSH
27990: FOR_IN
27991: IFFALSE 28211
// begin if not i in hackTanks then
27993: LD_VAR 0 1
27997: PUSH
27998: LD_EXP 127
28002: IN
28003: NOT
28004: IFFALSE 28087
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28006: LD_ADDR_EXP 127
28010: PUSH
28011: LD_EXP 127
28015: PPUSH
28016: LD_EXP 127
28020: PUSH
28021: LD_INT 1
28023: PLUS
28024: PPUSH
28025: LD_VAR 0 1
28029: PPUSH
28030: CALL_OW 1
28034: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28035: LD_ADDR_EXP 128
28039: PUSH
28040: LD_EXP 128
28044: PPUSH
28045: LD_EXP 128
28049: PUSH
28050: LD_INT 1
28052: PLUS
28053: PPUSH
28054: EMPTY
28055: PPUSH
28056: CALL_OW 1
28060: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28061: LD_ADDR_EXP 131
28065: PUSH
28066: LD_EXP 131
28070: PPUSH
28071: LD_EXP 131
28075: PUSH
28076: LD_INT 1
28078: PLUS
28079: PPUSH
28080: EMPTY
28081: PPUSH
28082: CALL_OW 1
28086: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28087: LD_VAR 0 1
28091: PPUSH
28092: CALL_OW 302
28096: NOT
28097: IFFALSE 28110
// begin HackUnlinkAll ( i ) ;
28099: LD_VAR 0 1
28103: PPUSH
28104: CALL 28216 0 1
// continue ;
28108: GO 27990
// end ; HackCheckCapturedStatus ( i ) ;
28110: LD_VAR 0 1
28114: PPUSH
28115: CALL 28659 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28119: LD_ADDR_VAR 0 2
28123: PUSH
28124: LD_INT 81
28126: PUSH
28127: LD_VAR 0 1
28131: PPUSH
28132: CALL_OW 255
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 33
28143: PUSH
28144: LD_INT 3
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 91
28153: PUSH
28154: LD_VAR 0 1
28158: PUSH
28159: LD_EXP 130
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 50
28171: PUSH
28172: EMPTY
28173: LIST
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: PPUSH
28181: CALL_OW 69
28185: ST_TO_ADDR
// if not tmp then
28186: LD_VAR 0 2
28190: NOT
28191: IFFALSE 28195
// continue ;
28193: GO 27990
// HackLink ( i , tmp ) ;
28195: LD_VAR 0 1
28199: PPUSH
28200: LD_VAR 0 2
28204: PPUSH
28205: CALL 28352 0 2
// end ;
28209: GO 27990
28211: POP
28212: POP
// end ;
28213: PPOPN 2
28215: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28216: LD_INT 0
28218: PPUSH
28219: PPUSH
28220: PPUSH
// if not hack in hackTanks then
28221: LD_VAR 0 1
28225: PUSH
28226: LD_EXP 127
28230: IN
28231: NOT
28232: IFFALSE 28236
// exit ;
28234: GO 28347
// index := GetElementIndex ( hackTanks , hack ) ;
28236: LD_ADDR_VAR 0 4
28240: PUSH
28241: LD_EXP 127
28245: PPUSH
28246: LD_VAR 0 1
28250: PPUSH
28251: CALL 35974 0 2
28255: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28256: LD_EXP 128
28260: PUSH
28261: LD_VAR 0 4
28265: ARRAY
28266: IFFALSE 28347
// begin for i in hackTanksCaptured [ index ] do
28268: LD_ADDR_VAR 0 3
28272: PUSH
28273: LD_EXP 128
28277: PUSH
28278: LD_VAR 0 4
28282: ARRAY
28283: PUSH
28284: FOR_IN
28285: IFFALSE 28311
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28287: LD_VAR 0 3
28291: PUSH
28292: LD_INT 1
28294: ARRAY
28295: PPUSH
28296: LD_VAR 0 3
28300: PUSH
28301: LD_INT 2
28303: ARRAY
28304: PPUSH
28305: CALL_OW 235
28309: GO 28284
28311: POP
28312: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28313: LD_ADDR_EXP 128
28317: PUSH
28318: LD_EXP 128
28322: PPUSH
28323: LD_VAR 0 4
28327: PPUSH
28328: EMPTY
28329: PPUSH
28330: CALL_OW 1
28334: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28335: LD_VAR 0 1
28339: PPUSH
28340: LD_INT 0
28342: PPUSH
28343: CALL_OW 505
// end ; end ;
28347: LD_VAR 0 2
28351: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28352: LD_INT 0
28354: PPUSH
28355: PPUSH
28356: PPUSH
// if not hack in hackTanks or not vehicles then
28357: LD_VAR 0 1
28361: PUSH
28362: LD_EXP 127
28366: IN
28367: NOT
28368: PUSH
28369: LD_VAR 0 2
28373: NOT
28374: OR
28375: IFFALSE 28379
// exit ;
28377: GO 28654
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28379: LD_ADDR_VAR 0 2
28383: PUSH
28384: LD_VAR 0 1
28388: PPUSH
28389: LD_VAR 0 2
28393: PPUSH
28394: LD_INT 1
28396: PPUSH
28397: LD_INT 1
28399: PPUSH
28400: CALL 36624 0 4
28404: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28405: LD_ADDR_VAR 0 5
28409: PUSH
28410: LD_EXP 127
28414: PPUSH
28415: LD_VAR 0 1
28419: PPUSH
28420: CALL 35974 0 2
28424: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28425: LD_EXP 128
28429: PUSH
28430: LD_VAR 0 5
28434: ARRAY
28435: PUSH
28436: LD_EXP 129
28440: LESS
28441: IFFALSE 28630
// begin for i := 1 to vehicles do
28443: LD_ADDR_VAR 0 4
28447: PUSH
28448: DOUBLE
28449: LD_INT 1
28451: DEC
28452: ST_TO_ADDR
28453: LD_VAR 0 2
28457: PUSH
28458: FOR_TO
28459: IFFALSE 28628
// begin if hackTanksCaptured [ index ] = hackLimit then
28461: LD_EXP 128
28465: PUSH
28466: LD_VAR 0 5
28470: ARRAY
28471: PUSH
28472: LD_EXP 129
28476: EQUAL
28477: IFFALSE 28481
// break ;
28479: GO 28628
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28481: LD_ADDR_EXP 131
28485: PUSH
28486: LD_EXP 131
28490: PPUSH
28491: LD_VAR 0 5
28495: PPUSH
28496: LD_EXP 131
28500: PUSH
28501: LD_VAR 0 5
28505: ARRAY
28506: PUSH
28507: LD_INT 1
28509: PLUS
28510: PPUSH
28511: CALL_OW 1
28515: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28516: LD_ADDR_EXP 128
28520: PUSH
28521: LD_EXP 128
28525: PPUSH
28526: LD_VAR 0 5
28530: PUSH
28531: LD_EXP 128
28535: PUSH
28536: LD_VAR 0 5
28540: ARRAY
28541: PUSH
28542: LD_INT 1
28544: PLUS
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PPUSH
28550: LD_VAR 0 2
28554: PUSH
28555: LD_VAR 0 4
28559: ARRAY
28560: PUSH
28561: LD_VAR 0 2
28565: PUSH
28566: LD_VAR 0 4
28570: ARRAY
28571: PPUSH
28572: CALL_OW 255
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PPUSH
28581: CALL 36189 0 3
28585: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28586: LD_VAR 0 2
28590: PUSH
28591: LD_VAR 0 4
28595: ARRAY
28596: PPUSH
28597: LD_VAR 0 1
28601: PPUSH
28602: CALL_OW 255
28606: PPUSH
28607: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28611: LD_VAR 0 2
28615: PUSH
28616: LD_VAR 0 4
28620: ARRAY
28621: PPUSH
28622: CALL_OW 141
// end ;
28626: GO 28458
28628: POP
28629: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28630: LD_VAR 0 1
28634: PPUSH
28635: LD_EXP 128
28639: PUSH
28640: LD_VAR 0 5
28644: ARRAY
28645: PUSH
28646: LD_INT 0
28648: PLUS
28649: PPUSH
28650: CALL_OW 505
// end ;
28654: LD_VAR 0 3
28658: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28659: LD_INT 0
28661: PPUSH
28662: PPUSH
28663: PPUSH
28664: PPUSH
// if not hack in hackTanks then
28665: LD_VAR 0 1
28669: PUSH
28670: LD_EXP 127
28674: IN
28675: NOT
28676: IFFALSE 28680
// exit ;
28678: GO 28920
// index := GetElementIndex ( hackTanks , hack ) ;
28680: LD_ADDR_VAR 0 4
28684: PUSH
28685: LD_EXP 127
28689: PPUSH
28690: LD_VAR 0 1
28694: PPUSH
28695: CALL 35974 0 2
28699: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28700: LD_ADDR_VAR 0 3
28704: PUSH
28705: DOUBLE
28706: LD_EXP 128
28710: PUSH
28711: LD_VAR 0 4
28715: ARRAY
28716: INC
28717: ST_TO_ADDR
28718: LD_INT 1
28720: PUSH
28721: FOR_DOWNTO
28722: IFFALSE 28894
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28724: LD_ADDR_VAR 0 5
28728: PUSH
28729: LD_EXP 128
28733: PUSH
28734: LD_VAR 0 4
28738: ARRAY
28739: PUSH
28740: LD_VAR 0 3
28744: ARRAY
28745: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28746: LD_VAR 0 5
28750: PUSH
28751: LD_INT 1
28753: ARRAY
28754: PPUSH
28755: CALL_OW 302
28759: NOT
28760: PUSH
28761: LD_VAR 0 5
28765: PUSH
28766: LD_INT 1
28768: ARRAY
28769: PPUSH
28770: CALL_OW 255
28774: PUSH
28775: LD_VAR 0 1
28779: PPUSH
28780: CALL_OW 255
28784: NONEQUAL
28785: OR
28786: IFFALSE 28892
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28788: LD_VAR 0 5
28792: PUSH
28793: LD_INT 1
28795: ARRAY
28796: PPUSH
28797: CALL_OW 305
28801: PUSH
28802: LD_VAR 0 5
28806: PUSH
28807: LD_INT 1
28809: ARRAY
28810: PPUSH
28811: CALL_OW 255
28815: PUSH
28816: LD_VAR 0 1
28820: PPUSH
28821: CALL_OW 255
28825: EQUAL
28826: AND
28827: IFFALSE 28851
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28829: LD_VAR 0 5
28833: PUSH
28834: LD_INT 1
28836: ARRAY
28837: PPUSH
28838: LD_VAR 0 5
28842: PUSH
28843: LD_INT 2
28845: ARRAY
28846: PPUSH
28847: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28851: LD_ADDR_EXP 128
28855: PUSH
28856: LD_EXP 128
28860: PPUSH
28861: LD_VAR 0 4
28865: PPUSH
28866: LD_EXP 128
28870: PUSH
28871: LD_VAR 0 4
28875: ARRAY
28876: PPUSH
28877: LD_VAR 0 3
28881: PPUSH
28882: CALL_OW 3
28886: PPUSH
28887: CALL_OW 1
28891: ST_TO_ADDR
// end ; end ;
28892: GO 28721
28894: POP
28895: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28896: LD_VAR 0 1
28900: PPUSH
28901: LD_EXP 128
28905: PUSH
28906: LD_VAR 0 4
28910: ARRAY
28911: PUSH
28912: LD_INT 0
28914: PLUS
28915: PPUSH
28916: CALL_OW 505
// end ;
28920: LD_VAR 0 2
28924: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28925: LD_INT 0
28927: PPUSH
28928: PPUSH
28929: PPUSH
28930: PPUSH
// if not hack in hackTanks then
28931: LD_VAR 0 1
28935: PUSH
28936: LD_EXP 127
28940: IN
28941: NOT
28942: IFFALSE 28946
// exit ;
28944: GO 29031
// index := GetElementIndex ( hackTanks , hack ) ;
28946: LD_ADDR_VAR 0 5
28950: PUSH
28951: LD_EXP 127
28955: PPUSH
28956: LD_VAR 0 1
28960: PPUSH
28961: CALL 35974 0 2
28965: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28966: LD_ADDR_VAR 0 4
28970: PUSH
28971: DOUBLE
28972: LD_INT 1
28974: DEC
28975: ST_TO_ADDR
28976: LD_EXP 128
28980: PUSH
28981: LD_VAR 0 5
28985: ARRAY
28986: PUSH
28987: FOR_TO
28988: IFFALSE 29029
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28990: LD_EXP 128
28994: PUSH
28995: LD_VAR 0 5
28999: ARRAY
29000: PUSH
29001: LD_VAR 0 4
29005: ARRAY
29006: PUSH
29007: LD_INT 1
29009: ARRAY
29010: PUSH
29011: LD_VAR 0 2
29015: EQUAL
29016: IFFALSE 29027
// KillUnit ( vehicle ) ;
29018: LD_VAR 0 2
29022: PPUSH
29023: CALL_OW 66
29027: GO 28987
29029: POP
29030: POP
// end ;
29031: LD_VAR 0 3
29035: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29036: LD_EXP 132
29040: NOT
29041: IFFALSE 29076
29043: GO 29045
29045: DISABLE
// begin initMiner := true ;
29046: LD_ADDR_EXP 132
29050: PUSH
29051: LD_INT 1
29053: ST_TO_ADDR
// minersList := [ ] ;
29054: LD_ADDR_EXP 133
29058: PUSH
29059: EMPTY
29060: ST_TO_ADDR
// minerMinesList := [ ] ;
29061: LD_ADDR_EXP 134
29065: PUSH
29066: EMPTY
29067: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29068: LD_ADDR_EXP 135
29072: PUSH
29073: LD_INT 5
29075: ST_TO_ADDR
// end ;
29076: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29077: LD_EXP 132
29081: PUSH
29082: LD_INT 34
29084: PUSH
29085: LD_EXP 53
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PPUSH
29094: CALL_OW 69
29098: AND
29099: IFFALSE 29562
29101: GO 29103
29103: DISABLE
29104: LD_INT 0
29106: PPUSH
29107: PPUSH
29108: PPUSH
29109: PPUSH
// begin enable ;
29110: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29111: LD_ADDR_VAR 0 1
29115: PUSH
29116: LD_INT 34
29118: PUSH
29119: LD_EXP 53
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PPUSH
29128: CALL_OW 69
29132: PUSH
29133: FOR_IN
29134: IFFALSE 29206
// begin if not i in minersList then
29136: LD_VAR 0 1
29140: PUSH
29141: LD_EXP 133
29145: IN
29146: NOT
29147: IFFALSE 29204
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29149: LD_ADDR_EXP 133
29153: PUSH
29154: LD_EXP 133
29158: PPUSH
29159: LD_EXP 133
29163: PUSH
29164: LD_INT 1
29166: PLUS
29167: PPUSH
29168: LD_VAR 0 1
29172: PPUSH
29173: CALL_OW 1
29177: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29178: LD_ADDR_EXP 134
29182: PUSH
29183: LD_EXP 134
29187: PPUSH
29188: LD_EXP 134
29192: PUSH
29193: LD_INT 1
29195: PLUS
29196: PPUSH
29197: EMPTY
29198: PPUSH
29199: CALL_OW 1
29203: ST_TO_ADDR
// end end ;
29204: GO 29133
29206: POP
29207: POP
// for i := minerMinesList downto 1 do
29208: LD_ADDR_VAR 0 1
29212: PUSH
29213: DOUBLE
29214: LD_EXP 134
29218: INC
29219: ST_TO_ADDR
29220: LD_INT 1
29222: PUSH
29223: FOR_DOWNTO
29224: IFFALSE 29560
// begin if IsLive ( minersList [ i ] ) then
29226: LD_EXP 133
29230: PUSH
29231: LD_VAR 0 1
29235: ARRAY
29236: PPUSH
29237: CALL_OW 300
29241: IFFALSE 29269
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29243: LD_EXP 133
29247: PUSH
29248: LD_VAR 0 1
29252: ARRAY
29253: PPUSH
29254: LD_EXP 134
29258: PUSH
29259: LD_VAR 0 1
29263: ARRAY
29264: PPUSH
29265: CALL_OW 505
// if not minerMinesList [ i ] then
29269: LD_EXP 134
29273: PUSH
29274: LD_VAR 0 1
29278: ARRAY
29279: NOT
29280: IFFALSE 29284
// continue ;
29282: GO 29223
// for j := minerMinesList [ i ] downto 1 do
29284: LD_ADDR_VAR 0 2
29288: PUSH
29289: DOUBLE
29290: LD_EXP 134
29294: PUSH
29295: LD_VAR 0 1
29299: ARRAY
29300: INC
29301: ST_TO_ADDR
29302: LD_INT 1
29304: PUSH
29305: FOR_DOWNTO
29306: IFFALSE 29556
// begin side := GetSide ( minersList [ i ] ) ;
29308: LD_ADDR_VAR 0 3
29312: PUSH
29313: LD_EXP 133
29317: PUSH
29318: LD_VAR 0 1
29322: ARRAY
29323: PPUSH
29324: CALL_OW 255
29328: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29329: LD_ADDR_VAR 0 4
29333: PUSH
29334: LD_EXP 134
29338: PUSH
29339: LD_VAR 0 1
29343: ARRAY
29344: PUSH
29345: LD_VAR 0 2
29349: ARRAY
29350: PUSH
29351: LD_INT 1
29353: ARRAY
29354: PPUSH
29355: LD_EXP 134
29359: PUSH
29360: LD_VAR 0 1
29364: ARRAY
29365: PUSH
29366: LD_VAR 0 2
29370: ARRAY
29371: PUSH
29372: LD_INT 2
29374: ARRAY
29375: PPUSH
29376: CALL_OW 428
29380: ST_TO_ADDR
// if not tmp then
29381: LD_VAR 0 4
29385: NOT
29386: IFFALSE 29390
// continue ;
29388: GO 29305
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29390: LD_VAR 0 4
29394: PUSH
29395: LD_INT 81
29397: PUSH
29398: LD_VAR 0 3
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PPUSH
29407: CALL_OW 69
29411: IN
29412: PUSH
29413: LD_EXP 134
29417: PUSH
29418: LD_VAR 0 1
29422: ARRAY
29423: PUSH
29424: LD_VAR 0 2
29428: ARRAY
29429: PUSH
29430: LD_INT 1
29432: ARRAY
29433: PPUSH
29434: LD_EXP 134
29438: PUSH
29439: LD_VAR 0 1
29443: ARRAY
29444: PUSH
29445: LD_VAR 0 2
29449: ARRAY
29450: PUSH
29451: LD_INT 2
29453: ARRAY
29454: PPUSH
29455: CALL_OW 458
29459: AND
29460: IFFALSE 29554
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29462: LD_EXP 134
29466: PUSH
29467: LD_VAR 0 1
29471: ARRAY
29472: PUSH
29473: LD_VAR 0 2
29477: ARRAY
29478: PUSH
29479: LD_INT 1
29481: ARRAY
29482: PPUSH
29483: LD_EXP 134
29487: PUSH
29488: LD_VAR 0 1
29492: ARRAY
29493: PUSH
29494: LD_VAR 0 2
29498: ARRAY
29499: PUSH
29500: LD_INT 2
29502: ARRAY
29503: PPUSH
29504: LD_VAR 0 3
29508: PPUSH
29509: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29513: LD_ADDR_EXP 134
29517: PUSH
29518: LD_EXP 134
29522: PPUSH
29523: LD_VAR 0 1
29527: PPUSH
29528: LD_EXP 134
29532: PUSH
29533: LD_VAR 0 1
29537: ARRAY
29538: PPUSH
29539: LD_VAR 0 2
29543: PPUSH
29544: CALL_OW 3
29548: PPUSH
29549: CALL_OW 1
29553: ST_TO_ADDR
// end ; end ;
29554: GO 29305
29556: POP
29557: POP
// end ;
29558: GO 29223
29560: POP
29561: POP
// end ;
29562: PPOPN 4
29564: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29565: LD_INT 0
29567: PPUSH
29568: PPUSH
// result := false ;
29569: LD_ADDR_VAR 0 4
29573: PUSH
29574: LD_INT 0
29576: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29577: LD_VAR 0 1
29581: PPUSH
29582: CALL_OW 264
29586: PUSH
29587: LD_EXP 53
29591: EQUAL
29592: NOT
29593: IFFALSE 29597
// exit ;
29595: GO 29837
// index := GetElementIndex ( minersList , unit ) ;
29597: LD_ADDR_VAR 0 5
29601: PUSH
29602: LD_EXP 133
29606: PPUSH
29607: LD_VAR 0 1
29611: PPUSH
29612: CALL 35974 0 2
29616: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29617: LD_EXP 134
29621: PUSH
29622: LD_VAR 0 5
29626: ARRAY
29627: PUSH
29628: LD_EXP 135
29632: GREATEREQUAL
29633: IFFALSE 29637
// exit ;
29635: GO 29837
// ComMoveXY ( unit , x , y ) ;
29637: LD_VAR 0 1
29641: PPUSH
29642: LD_VAR 0 2
29646: PPUSH
29647: LD_VAR 0 3
29651: PPUSH
29652: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29656: LD_INT 35
29658: PPUSH
29659: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29663: LD_VAR 0 1
29667: PPUSH
29668: LD_VAR 0 2
29672: PPUSH
29673: LD_VAR 0 3
29677: PPUSH
29678: CALL 67260 0 3
29682: NOT
29683: PUSH
29684: LD_VAR 0 1
29688: PPUSH
29689: CALL_OW 314
29693: AND
29694: IFFALSE 29698
// exit ;
29696: GO 29837
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29698: LD_VAR 0 2
29702: PPUSH
29703: LD_VAR 0 3
29707: PPUSH
29708: CALL_OW 428
29712: PUSH
29713: LD_VAR 0 1
29717: EQUAL
29718: PUSH
29719: LD_VAR 0 1
29723: PPUSH
29724: CALL_OW 314
29728: NOT
29729: AND
29730: IFFALSE 29656
// PlaySoundXY ( x , y , PlantMine ) ;
29732: LD_VAR 0 2
29736: PPUSH
29737: LD_VAR 0 3
29741: PPUSH
29742: LD_STRING PlantMine
29744: PPUSH
29745: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29749: LD_VAR 0 2
29753: PPUSH
29754: LD_VAR 0 3
29758: PPUSH
29759: LD_VAR 0 1
29763: PPUSH
29764: CALL_OW 255
29768: PPUSH
29769: LD_INT 0
29771: PPUSH
29772: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29776: LD_ADDR_EXP 134
29780: PUSH
29781: LD_EXP 134
29785: PPUSH
29786: LD_VAR 0 5
29790: PUSH
29791: LD_EXP 134
29795: PUSH
29796: LD_VAR 0 5
29800: ARRAY
29801: PUSH
29802: LD_INT 1
29804: PLUS
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PPUSH
29810: LD_VAR 0 2
29814: PUSH
29815: LD_VAR 0 3
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PPUSH
29824: CALL 36189 0 3
29828: ST_TO_ADDR
// result := true ;
29829: LD_ADDR_VAR 0 4
29833: PUSH
29834: LD_INT 1
29836: ST_TO_ADDR
// end ;
29837: LD_VAR 0 4
29841: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29842: LD_INT 0
29844: PPUSH
29845: PPUSH
29846: PPUSH
// if not unit in minersList then
29847: LD_VAR 0 1
29851: PUSH
29852: LD_EXP 133
29856: IN
29857: NOT
29858: IFFALSE 29862
// exit ;
29860: GO 30254
// index := GetElementIndex ( minersList , unit ) ;
29862: LD_ADDR_VAR 0 6
29866: PUSH
29867: LD_EXP 133
29871: PPUSH
29872: LD_VAR 0 1
29876: PPUSH
29877: CALL 35974 0 2
29881: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29882: LD_ADDR_VAR 0 5
29886: PUSH
29887: DOUBLE
29888: LD_EXP 134
29892: PUSH
29893: LD_VAR 0 6
29897: ARRAY
29898: INC
29899: ST_TO_ADDR
29900: LD_INT 1
29902: PUSH
29903: FOR_DOWNTO
29904: IFFALSE 30065
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29906: LD_EXP 134
29910: PUSH
29911: LD_VAR 0 6
29915: ARRAY
29916: PUSH
29917: LD_VAR 0 5
29921: ARRAY
29922: PUSH
29923: LD_INT 1
29925: ARRAY
29926: PUSH
29927: LD_VAR 0 2
29931: EQUAL
29932: PUSH
29933: LD_EXP 134
29937: PUSH
29938: LD_VAR 0 6
29942: ARRAY
29943: PUSH
29944: LD_VAR 0 5
29948: ARRAY
29949: PUSH
29950: LD_INT 2
29952: ARRAY
29953: PUSH
29954: LD_VAR 0 3
29958: EQUAL
29959: AND
29960: IFFALSE 30063
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29962: LD_EXP 134
29966: PUSH
29967: LD_VAR 0 6
29971: ARRAY
29972: PUSH
29973: LD_VAR 0 5
29977: ARRAY
29978: PUSH
29979: LD_INT 1
29981: ARRAY
29982: PPUSH
29983: LD_EXP 134
29987: PUSH
29988: LD_VAR 0 6
29992: ARRAY
29993: PUSH
29994: LD_VAR 0 5
29998: ARRAY
29999: PUSH
30000: LD_INT 2
30002: ARRAY
30003: PPUSH
30004: LD_VAR 0 1
30008: PPUSH
30009: CALL_OW 255
30013: PPUSH
30014: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30018: LD_ADDR_EXP 134
30022: PUSH
30023: LD_EXP 134
30027: PPUSH
30028: LD_VAR 0 6
30032: PPUSH
30033: LD_EXP 134
30037: PUSH
30038: LD_VAR 0 6
30042: ARRAY
30043: PPUSH
30044: LD_VAR 0 5
30048: PPUSH
30049: CALL_OW 3
30053: PPUSH
30054: CALL_OW 1
30058: ST_TO_ADDR
// exit ;
30059: POP
30060: POP
30061: GO 30254
// end ; end ;
30063: GO 29903
30065: POP
30066: POP
// for i := minerMinesList [ index ] downto 1 do
30067: LD_ADDR_VAR 0 5
30071: PUSH
30072: DOUBLE
30073: LD_EXP 134
30077: PUSH
30078: LD_VAR 0 6
30082: ARRAY
30083: INC
30084: ST_TO_ADDR
30085: LD_INT 1
30087: PUSH
30088: FOR_DOWNTO
30089: IFFALSE 30252
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30091: LD_EXP 134
30095: PUSH
30096: LD_VAR 0 6
30100: ARRAY
30101: PUSH
30102: LD_VAR 0 5
30106: ARRAY
30107: PUSH
30108: LD_INT 1
30110: ARRAY
30111: PPUSH
30112: LD_EXP 134
30116: PUSH
30117: LD_VAR 0 6
30121: ARRAY
30122: PUSH
30123: LD_VAR 0 5
30127: ARRAY
30128: PUSH
30129: LD_INT 2
30131: ARRAY
30132: PPUSH
30133: LD_VAR 0 2
30137: PPUSH
30138: LD_VAR 0 3
30142: PPUSH
30143: CALL_OW 298
30147: PUSH
30148: LD_INT 6
30150: LESS
30151: IFFALSE 30250
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30153: LD_EXP 134
30157: PUSH
30158: LD_VAR 0 6
30162: ARRAY
30163: PUSH
30164: LD_VAR 0 5
30168: ARRAY
30169: PUSH
30170: LD_INT 1
30172: ARRAY
30173: PPUSH
30174: LD_EXP 134
30178: PUSH
30179: LD_VAR 0 6
30183: ARRAY
30184: PUSH
30185: LD_VAR 0 5
30189: ARRAY
30190: PUSH
30191: LD_INT 2
30193: ARRAY
30194: PPUSH
30195: LD_VAR 0 1
30199: PPUSH
30200: CALL_OW 255
30204: PPUSH
30205: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30209: LD_ADDR_EXP 134
30213: PUSH
30214: LD_EXP 134
30218: PPUSH
30219: LD_VAR 0 6
30223: PPUSH
30224: LD_EXP 134
30228: PUSH
30229: LD_VAR 0 6
30233: ARRAY
30234: PPUSH
30235: LD_VAR 0 5
30239: PPUSH
30240: CALL_OW 3
30244: PPUSH
30245: CALL_OW 1
30249: ST_TO_ADDR
// end ; end ;
30250: GO 30088
30252: POP
30253: POP
// end ;
30254: LD_VAR 0 4
30258: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30259: LD_INT 0
30261: PPUSH
30262: PPUSH
30263: PPUSH
30264: PPUSH
30265: PPUSH
30266: PPUSH
30267: PPUSH
30268: PPUSH
30269: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30270: LD_VAR 0 1
30274: PPUSH
30275: CALL_OW 264
30279: PUSH
30280: LD_EXP 53
30284: EQUAL
30285: NOT
30286: PUSH
30287: LD_VAR 0 1
30291: PUSH
30292: LD_EXP 133
30296: IN
30297: NOT
30298: OR
30299: IFFALSE 30303
// exit ;
30301: GO 30625
// index := GetElementIndex ( minersList , unit ) ;
30303: LD_ADDR_VAR 0 6
30307: PUSH
30308: LD_EXP 133
30312: PPUSH
30313: LD_VAR 0 1
30317: PPUSH
30318: CALL 35974 0 2
30322: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30323: LD_ADDR_VAR 0 8
30327: PUSH
30328: LD_EXP 135
30332: PUSH
30333: LD_EXP 134
30337: PUSH
30338: LD_VAR 0 6
30342: ARRAY
30343: MINUS
30344: ST_TO_ADDR
// if not minesFreeAmount then
30345: LD_VAR 0 8
30349: NOT
30350: IFFALSE 30354
// exit ;
30352: GO 30625
// tmp := [ ] ;
30354: LD_ADDR_VAR 0 7
30358: PUSH
30359: EMPTY
30360: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30361: LD_ADDR_VAR 0 5
30365: PUSH
30366: DOUBLE
30367: LD_INT 1
30369: DEC
30370: ST_TO_ADDR
30371: LD_VAR 0 8
30375: PUSH
30376: FOR_TO
30377: IFFALSE 30572
// begin _d := rand ( 0 , 5 ) ;
30379: LD_ADDR_VAR 0 11
30383: PUSH
30384: LD_INT 0
30386: PPUSH
30387: LD_INT 5
30389: PPUSH
30390: CALL_OW 12
30394: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30395: LD_ADDR_VAR 0 12
30399: PUSH
30400: LD_INT 2
30402: PPUSH
30403: LD_INT 6
30405: PPUSH
30406: CALL_OW 12
30410: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30411: LD_ADDR_VAR 0 9
30415: PUSH
30416: LD_VAR 0 2
30420: PPUSH
30421: LD_VAR 0 11
30425: PPUSH
30426: LD_VAR 0 12
30430: PPUSH
30431: CALL_OW 272
30435: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30436: LD_ADDR_VAR 0 10
30440: PUSH
30441: LD_VAR 0 3
30445: PPUSH
30446: LD_VAR 0 11
30450: PPUSH
30451: LD_VAR 0 12
30455: PPUSH
30456: CALL_OW 273
30460: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30461: LD_VAR 0 9
30465: PPUSH
30466: LD_VAR 0 10
30470: PPUSH
30471: CALL_OW 488
30475: PUSH
30476: LD_VAR 0 9
30480: PUSH
30481: LD_VAR 0 10
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_VAR 0 7
30494: IN
30495: NOT
30496: AND
30497: PUSH
30498: LD_VAR 0 9
30502: PPUSH
30503: LD_VAR 0 10
30507: PPUSH
30508: CALL_OW 458
30512: NOT
30513: AND
30514: IFFALSE 30556
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30516: LD_ADDR_VAR 0 7
30520: PUSH
30521: LD_VAR 0 7
30525: PPUSH
30526: LD_VAR 0 7
30530: PUSH
30531: LD_INT 1
30533: PLUS
30534: PPUSH
30535: LD_VAR 0 9
30539: PUSH
30540: LD_VAR 0 10
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PPUSH
30549: CALL_OW 1
30553: ST_TO_ADDR
30554: GO 30570
// i := i - 1 ;
30556: LD_ADDR_VAR 0 5
30560: PUSH
30561: LD_VAR 0 5
30565: PUSH
30566: LD_INT 1
30568: MINUS
30569: ST_TO_ADDR
// end ;
30570: GO 30376
30572: POP
30573: POP
// for i in tmp do
30574: LD_ADDR_VAR 0 5
30578: PUSH
30579: LD_VAR 0 7
30583: PUSH
30584: FOR_IN
30585: IFFALSE 30623
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30587: LD_VAR 0 1
30591: PPUSH
30592: LD_VAR 0 5
30596: PUSH
30597: LD_INT 1
30599: ARRAY
30600: PPUSH
30601: LD_VAR 0 5
30605: PUSH
30606: LD_INT 2
30608: ARRAY
30609: PPUSH
30610: CALL 29565 0 3
30614: NOT
30615: IFFALSE 30621
// exit ;
30617: POP
30618: POP
30619: GO 30625
30621: GO 30584
30623: POP
30624: POP
// end ;
30625: LD_VAR 0 4
30629: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30630: LD_INT 0
30632: PPUSH
30633: PPUSH
30634: PPUSH
30635: PPUSH
30636: PPUSH
30637: PPUSH
30638: PPUSH
// if not GetClass ( unit ) = class_sniper then
30639: LD_VAR 0 1
30643: PPUSH
30644: CALL_OW 257
30648: PUSH
30649: LD_INT 5
30651: EQUAL
30652: NOT
30653: IFFALSE 30657
// exit ;
30655: GO 31045
// dist := 8 ;
30657: LD_ADDR_VAR 0 5
30661: PUSH
30662: LD_INT 8
30664: ST_TO_ADDR
// viewRange := 12 ;
30665: LD_ADDR_VAR 0 7
30669: PUSH
30670: LD_INT 12
30672: ST_TO_ADDR
// side := GetSide ( unit ) ;
30673: LD_ADDR_VAR 0 6
30677: PUSH
30678: LD_VAR 0 1
30682: PPUSH
30683: CALL_OW 255
30687: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30688: LD_INT 61
30690: PPUSH
30691: LD_VAR 0 6
30695: PPUSH
30696: CALL_OW 321
30700: PUSH
30701: LD_INT 2
30703: EQUAL
30704: IFFALSE 30714
// viewRange := 16 ;
30706: LD_ADDR_VAR 0 7
30710: PUSH
30711: LD_INT 16
30713: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30714: LD_VAR 0 1
30718: PPUSH
30719: LD_VAR 0 2
30723: PPUSH
30724: LD_VAR 0 3
30728: PPUSH
30729: CALL_OW 297
30733: PUSH
30734: LD_VAR 0 5
30738: GREATER
30739: IFFALSE 30818
// begin ComMoveXY ( unit , x , y ) ;
30741: LD_VAR 0 1
30745: PPUSH
30746: LD_VAR 0 2
30750: PPUSH
30751: LD_VAR 0 3
30755: PPUSH
30756: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30760: LD_INT 35
30762: PPUSH
30763: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30767: LD_VAR 0 1
30771: PPUSH
30772: LD_VAR 0 2
30776: PPUSH
30777: LD_VAR 0 3
30781: PPUSH
30782: CALL 67260 0 3
30786: NOT
30787: IFFALSE 30791
// exit ;
30789: GO 31045
// until GetDistUnitXY ( unit , x , y ) < dist ;
30791: LD_VAR 0 1
30795: PPUSH
30796: LD_VAR 0 2
30800: PPUSH
30801: LD_VAR 0 3
30805: PPUSH
30806: CALL_OW 297
30810: PUSH
30811: LD_VAR 0 5
30815: LESS
30816: IFFALSE 30760
// end ; ComTurnXY ( unit , x , y ) ;
30818: LD_VAR 0 1
30822: PPUSH
30823: LD_VAR 0 2
30827: PPUSH
30828: LD_VAR 0 3
30832: PPUSH
30833: CALL_OW 118
// wait ( 5 ) ;
30837: LD_INT 5
30839: PPUSH
30840: CALL_OW 67
// _d := GetDir ( unit ) ;
30844: LD_ADDR_VAR 0 10
30848: PUSH
30849: LD_VAR 0 1
30853: PPUSH
30854: CALL_OW 254
30858: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30859: LD_ADDR_VAR 0 8
30863: PUSH
30864: LD_VAR 0 1
30868: PPUSH
30869: CALL_OW 250
30873: PPUSH
30874: LD_VAR 0 10
30878: PPUSH
30879: LD_VAR 0 5
30883: PPUSH
30884: CALL_OW 272
30888: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30889: LD_ADDR_VAR 0 9
30893: PUSH
30894: LD_VAR 0 1
30898: PPUSH
30899: CALL_OW 251
30903: PPUSH
30904: LD_VAR 0 10
30908: PPUSH
30909: LD_VAR 0 5
30913: PPUSH
30914: CALL_OW 273
30918: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30919: LD_VAR 0 8
30923: PPUSH
30924: LD_VAR 0 9
30928: PPUSH
30929: CALL_OW 488
30933: NOT
30934: IFFALSE 30938
// exit ;
30936: GO 31045
// ComAnimCustom ( unit , 1 ) ;
30938: LD_VAR 0 1
30942: PPUSH
30943: LD_INT 1
30945: PPUSH
30946: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30950: LD_VAR 0 8
30954: PPUSH
30955: LD_VAR 0 9
30959: PPUSH
30960: LD_VAR 0 6
30964: PPUSH
30965: LD_VAR 0 7
30969: PPUSH
30970: CALL_OW 330
// repeat wait ( 1 ) ;
30974: LD_INT 1
30976: PPUSH
30977: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30981: LD_VAR 0 1
30985: PPUSH
30986: CALL_OW 316
30990: PUSH
30991: LD_VAR 0 1
30995: PPUSH
30996: CALL_OW 314
31000: OR
31001: PUSH
31002: LD_VAR 0 1
31006: PPUSH
31007: CALL_OW 302
31011: NOT
31012: OR
31013: PUSH
31014: LD_VAR 0 1
31018: PPUSH
31019: CALL_OW 301
31023: OR
31024: IFFALSE 30974
// RemoveSeeing ( _x , _y , side ) ;
31026: LD_VAR 0 8
31030: PPUSH
31031: LD_VAR 0 9
31035: PPUSH
31036: LD_VAR 0 6
31040: PPUSH
31041: CALL_OW 331
// end ; end_of_file
31045: LD_VAR 0 4
31049: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31050: LD_INT 0
31052: PPUSH
31053: PPUSH
// if exist_mode then
31054: LD_VAR 0 2
31058: IFFALSE 31083
// unit := CreateCharacter ( prefix & ident ) else
31060: LD_ADDR_VAR 0 5
31064: PUSH
31065: LD_VAR 0 3
31069: PUSH
31070: LD_VAR 0 1
31074: STR
31075: PPUSH
31076: CALL_OW 34
31080: ST_TO_ADDR
31081: GO 31098
// unit := NewCharacter ( ident ) ;
31083: LD_ADDR_VAR 0 5
31087: PUSH
31088: LD_VAR 0 1
31092: PPUSH
31093: CALL_OW 25
31097: ST_TO_ADDR
// result := unit ;
31098: LD_ADDR_VAR 0 4
31102: PUSH
31103: LD_VAR 0 5
31107: ST_TO_ADDR
// end ;
31108: LD_VAR 0 4
31112: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31113: LD_INT 0
31115: PPUSH
31116: PPUSH
// if not side or not nation then
31117: LD_VAR 0 1
31121: NOT
31122: PUSH
31123: LD_VAR 0 2
31127: NOT
31128: OR
31129: IFFALSE 31133
// exit ;
31131: GO 31901
// case nation of nation_american :
31133: LD_VAR 0 2
31137: PUSH
31138: LD_INT 1
31140: DOUBLE
31141: EQUAL
31142: IFTRUE 31146
31144: GO 31360
31146: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31147: LD_ADDR_VAR 0 4
31151: PUSH
31152: LD_INT 35
31154: PUSH
31155: LD_INT 45
31157: PUSH
31158: LD_INT 46
31160: PUSH
31161: LD_INT 47
31163: PUSH
31164: LD_INT 82
31166: PUSH
31167: LD_INT 83
31169: PUSH
31170: LD_INT 84
31172: PUSH
31173: LD_INT 85
31175: PUSH
31176: LD_INT 86
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: LD_INT 2
31184: PUSH
31185: LD_INT 6
31187: PUSH
31188: LD_INT 15
31190: PUSH
31191: LD_INT 16
31193: PUSH
31194: LD_INT 7
31196: PUSH
31197: LD_INT 12
31199: PUSH
31200: LD_INT 13
31202: PUSH
31203: LD_INT 10
31205: PUSH
31206: LD_INT 14
31208: PUSH
31209: LD_INT 20
31211: PUSH
31212: LD_INT 21
31214: PUSH
31215: LD_INT 22
31217: PUSH
31218: LD_INT 25
31220: PUSH
31221: LD_INT 32
31223: PUSH
31224: LD_INT 27
31226: PUSH
31227: LD_INT 36
31229: PUSH
31230: LD_INT 69
31232: PUSH
31233: LD_INT 39
31235: PUSH
31236: LD_INT 34
31238: PUSH
31239: LD_INT 40
31241: PUSH
31242: LD_INT 48
31244: PUSH
31245: LD_INT 49
31247: PUSH
31248: LD_INT 50
31250: PUSH
31251: LD_INT 51
31253: PUSH
31254: LD_INT 52
31256: PUSH
31257: LD_INT 53
31259: PUSH
31260: LD_INT 54
31262: PUSH
31263: LD_INT 55
31265: PUSH
31266: LD_INT 56
31268: PUSH
31269: LD_INT 57
31271: PUSH
31272: LD_INT 58
31274: PUSH
31275: LD_INT 59
31277: PUSH
31278: LD_INT 60
31280: PUSH
31281: LD_INT 61
31283: PUSH
31284: LD_INT 62
31286: PUSH
31287: LD_INT 80
31289: PUSH
31290: LD_INT 82
31292: PUSH
31293: LD_INT 83
31295: PUSH
31296: LD_INT 84
31298: PUSH
31299: LD_INT 85
31301: PUSH
31302: LD_INT 86
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: ST_TO_ADDR
31358: GO 31825
31360: LD_INT 2
31362: DOUBLE
31363: EQUAL
31364: IFTRUE 31368
31366: GO 31594
31368: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31369: LD_ADDR_VAR 0 4
31373: PUSH
31374: LD_INT 35
31376: PUSH
31377: LD_INT 45
31379: PUSH
31380: LD_INT 46
31382: PUSH
31383: LD_INT 47
31385: PUSH
31386: LD_INT 82
31388: PUSH
31389: LD_INT 83
31391: PUSH
31392: LD_INT 84
31394: PUSH
31395: LD_INT 85
31397: PUSH
31398: LD_INT 87
31400: PUSH
31401: LD_INT 70
31403: PUSH
31404: LD_INT 1
31406: PUSH
31407: LD_INT 11
31409: PUSH
31410: LD_INT 3
31412: PUSH
31413: LD_INT 4
31415: PUSH
31416: LD_INT 5
31418: PUSH
31419: LD_INT 6
31421: PUSH
31422: LD_INT 15
31424: PUSH
31425: LD_INT 18
31427: PUSH
31428: LD_INT 7
31430: PUSH
31431: LD_INT 17
31433: PUSH
31434: LD_INT 8
31436: PUSH
31437: LD_INT 20
31439: PUSH
31440: LD_INT 21
31442: PUSH
31443: LD_INT 22
31445: PUSH
31446: LD_INT 72
31448: PUSH
31449: LD_INT 26
31451: PUSH
31452: LD_INT 69
31454: PUSH
31455: LD_INT 39
31457: PUSH
31458: LD_INT 40
31460: PUSH
31461: LD_INT 41
31463: PUSH
31464: LD_INT 42
31466: PUSH
31467: LD_INT 43
31469: PUSH
31470: LD_INT 48
31472: PUSH
31473: LD_INT 49
31475: PUSH
31476: LD_INT 50
31478: PUSH
31479: LD_INT 51
31481: PUSH
31482: LD_INT 52
31484: PUSH
31485: LD_INT 53
31487: PUSH
31488: LD_INT 54
31490: PUSH
31491: LD_INT 55
31493: PUSH
31494: LD_INT 56
31496: PUSH
31497: LD_INT 60
31499: PUSH
31500: LD_INT 61
31502: PUSH
31503: LD_INT 62
31505: PUSH
31506: LD_INT 66
31508: PUSH
31509: LD_INT 67
31511: PUSH
31512: LD_INT 68
31514: PUSH
31515: LD_INT 81
31517: PUSH
31518: LD_INT 82
31520: PUSH
31521: LD_INT 83
31523: PUSH
31524: LD_INT 84
31526: PUSH
31527: LD_INT 85
31529: PUSH
31530: LD_INT 87
31532: PUSH
31533: LD_INT 88
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: ST_TO_ADDR
31592: GO 31825
31594: LD_INT 3
31596: DOUBLE
31597: EQUAL
31598: IFTRUE 31602
31600: GO 31824
31602: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31603: LD_ADDR_VAR 0 4
31607: PUSH
31608: LD_INT 46
31610: PUSH
31611: LD_INT 47
31613: PUSH
31614: LD_INT 1
31616: PUSH
31617: LD_INT 2
31619: PUSH
31620: LD_INT 82
31622: PUSH
31623: LD_INT 83
31625: PUSH
31626: LD_INT 84
31628: PUSH
31629: LD_INT 85
31631: PUSH
31632: LD_INT 86
31634: PUSH
31635: LD_INT 11
31637: PUSH
31638: LD_INT 9
31640: PUSH
31641: LD_INT 20
31643: PUSH
31644: LD_INT 19
31646: PUSH
31647: LD_INT 21
31649: PUSH
31650: LD_INT 24
31652: PUSH
31653: LD_INT 22
31655: PUSH
31656: LD_INT 25
31658: PUSH
31659: LD_INT 28
31661: PUSH
31662: LD_INT 29
31664: PUSH
31665: LD_INT 30
31667: PUSH
31668: LD_INT 31
31670: PUSH
31671: LD_INT 37
31673: PUSH
31674: LD_INT 38
31676: PUSH
31677: LD_INT 32
31679: PUSH
31680: LD_INT 27
31682: PUSH
31683: LD_INT 33
31685: PUSH
31686: LD_INT 69
31688: PUSH
31689: LD_INT 39
31691: PUSH
31692: LD_INT 34
31694: PUSH
31695: LD_INT 40
31697: PUSH
31698: LD_INT 71
31700: PUSH
31701: LD_INT 23
31703: PUSH
31704: LD_INT 44
31706: PUSH
31707: LD_INT 48
31709: PUSH
31710: LD_INT 49
31712: PUSH
31713: LD_INT 50
31715: PUSH
31716: LD_INT 51
31718: PUSH
31719: LD_INT 52
31721: PUSH
31722: LD_INT 53
31724: PUSH
31725: LD_INT 54
31727: PUSH
31728: LD_INT 55
31730: PUSH
31731: LD_INT 56
31733: PUSH
31734: LD_INT 57
31736: PUSH
31737: LD_INT 58
31739: PUSH
31740: LD_INT 59
31742: PUSH
31743: LD_INT 63
31745: PUSH
31746: LD_INT 64
31748: PUSH
31749: LD_INT 65
31751: PUSH
31752: LD_INT 82
31754: PUSH
31755: LD_INT 83
31757: PUSH
31758: LD_INT 84
31760: PUSH
31761: LD_INT 85
31763: PUSH
31764: LD_INT 86
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: ST_TO_ADDR
31822: GO 31825
31824: POP
// if state > - 1 and state < 3 then
31825: LD_VAR 0 3
31829: PUSH
31830: LD_INT 1
31832: NEG
31833: GREATER
31834: PUSH
31835: LD_VAR 0 3
31839: PUSH
31840: LD_INT 3
31842: LESS
31843: AND
31844: IFFALSE 31901
// for i in result do
31846: LD_ADDR_VAR 0 5
31850: PUSH
31851: LD_VAR 0 4
31855: PUSH
31856: FOR_IN
31857: IFFALSE 31899
// if GetTech ( i , side ) <> state then
31859: LD_VAR 0 5
31863: PPUSH
31864: LD_VAR 0 1
31868: PPUSH
31869: CALL_OW 321
31873: PUSH
31874: LD_VAR 0 3
31878: NONEQUAL
31879: IFFALSE 31897
// result := result diff i ;
31881: LD_ADDR_VAR 0 4
31885: PUSH
31886: LD_VAR 0 4
31890: PUSH
31891: LD_VAR 0 5
31895: DIFF
31896: ST_TO_ADDR
31897: GO 31856
31899: POP
31900: POP
// end ;
31901: LD_VAR 0 4
31905: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31906: LD_INT 0
31908: PPUSH
31909: PPUSH
31910: PPUSH
// result := true ;
31911: LD_ADDR_VAR 0 3
31915: PUSH
31916: LD_INT 1
31918: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31919: LD_ADDR_VAR 0 5
31923: PUSH
31924: LD_VAR 0 2
31928: PPUSH
31929: CALL_OW 480
31933: ST_TO_ADDR
// if not tmp then
31934: LD_VAR 0 5
31938: NOT
31939: IFFALSE 31943
// exit ;
31941: GO 31992
// for i in tmp do
31943: LD_ADDR_VAR 0 4
31947: PUSH
31948: LD_VAR 0 5
31952: PUSH
31953: FOR_IN
31954: IFFALSE 31990
// if GetTech ( i , side ) <> state_researched then
31956: LD_VAR 0 4
31960: PPUSH
31961: LD_VAR 0 1
31965: PPUSH
31966: CALL_OW 321
31970: PUSH
31971: LD_INT 2
31973: NONEQUAL
31974: IFFALSE 31988
// begin result := false ;
31976: LD_ADDR_VAR 0 3
31980: PUSH
31981: LD_INT 0
31983: ST_TO_ADDR
// exit ;
31984: POP
31985: POP
31986: GO 31992
// end ;
31988: GO 31953
31990: POP
31991: POP
// end ;
31992: LD_VAR 0 3
31996: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31997: LD_INT 0
31999: PPUSH
32000: PPUSH
32001: PPUSH
32002: PPUSH
32003: PPUSH
32004: PPUSH
32005: PPUSH
32006: PPUSH
32007: PPUSH
32008: PPUSH
32009: PPUSH
32010: PPUSH
32011: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32012: LD_VAR 0 1
32016: NOT
32017: PUSH
32018: LD_VAR 0 1
32022: PPUSH
32023: CALL_OW 257
32027: PUSH
32028: LD_INT 9
32030: NONEQUAL
32031: OR
32032: IFFALSE 32036
// exit ;
32034: GO 32609
// side := GetSide ( unit ) ;
32036: LD_ADDR_VAR 0 9
32040: PUSH
32041: LD_VAR 0 1
32045: PPUSH
32046: CALL_OW 255
32050: ST_TO_ADDR
// tech_space := tech_spacanom ;
32051: LD_ADDR_VAR 0 12
32055: PUSH
32056: LD_INT 29
32058: ST_TO_ADDR
// tech_time := tech_taurad ;
32059: LD_ADDR_VAR 0 13
32063: PUSH
32064: LD_INT 28
32066: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32067: LD_ADDR_VAR 0 11
32071: PUSH
32072: LD_VAR 0 1
32076: PPUSH
32077: CALL_OW 310
32081: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32082: LD_VAR 0 11
32086: PPUSH
32087: CALL_OW 247
32091: PUSH
32092: LD_INT 2
32094: EQUAL
32095: IFFALSE 32099
// exit ;
32097: GO 32609
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32099: LD_ADDR_VAR 0 8
32103: PUSH
32104: LD_INT 81
32106: PUSH
32107: LD_VAR 0 9
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 3
32118: PUSH
32119: LD_INT 21
32121: PUSH
32122: LD_INT 3
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PPUSH
32137: CALL_OW 69
32141: ST_TO_ADDR
// if not tmp then
32142: LD_VAR 0 8
32146: NOT
32147: IFFALSE 32151
// exit ;
32149: GO 32609
// if in_unit then
32151: LD_VAR 0 11
32155: IFFALSE 32179
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32157: LD_ADDR_VAR 0 10
32161: PUSH
32162: LD_VAR 0 8
32166: PPUSH
32167: LD_VAR 0 11
32171: PPUSH
32172: CALL_OW 74
32176: ST_TO_ADDR
32177: GO 32199
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32179: LD_ADDR_VAR 0 10
32183: PUSH
32184: LD_VAR 0 8
32188: PPUSH
32189: LD_VAR 0 1
32193: PPUSH
32194: CALL_OW 74
32198: ST_TO_ADDR
// if not enemy then
32199: LD_VAR 0 10
32203: NOT
32204: IFFALSE 32208
// exit ;
32206: GO 32609
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32208: LD_VAR 0 11
32212: PUSH
32213: LD_VAR 0 11
32217: PPUSH
32218: LD_VAR 0 10
32222: PPUSH
32223: CALL_OW 296
32227: PUSH
32228: LD_INT 13
32230: GREATER
32231: AND
32232: PUSH
32233: LD_VAR 0 1
32237: PPUSH
32238: LD_VAR 0 10
32242: PPUSH
32243: CALL_OW 296
32247: PUSH
32248: LD_INT 12
32250: GREATER
32251: OR
32252: IFFALSE 32256
// exit ;
32254: GO 32609
// missile := [ 1 ] ;
32256: LD_ADDR_VAR 0 14
32260: PUSH
32261: LD_INT 1
32263: PUSH
32264: EMPTY
32265: LIST
32266: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32267: LD_VAR 0 9
32271: PPUSH
32272: LD_VAR 0 12
32276: PPUSH
32277: CALL_OW 325
32281: IFFALSE 32310
// missile := Replace ( missile , missile + 1 , 2 ) ;
32283: LD_ADDR_VAR 0 14
32287: PUSH
32288: LD_VAR 0 14
32292: PPUSH
32293: LD_VAR 0 14
32297: PUSH
32298: LD_INT 1
32300: PLUS
32301: PPUSH
32302: LD_INT 2
32304: PPUSH
32305: CALL_OW 1
32309: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32310: LD_VAR 0 9
32314: PPUSH
32315: LD_VAR 0 13
32319: PPUSH
32320: CALL_OW 325
32324: PUSH
32325: LD_VAR 0 10
32329: PPUSH
32330: CALL_OW 255
32334: PPUSH
32335: LD_VAR 0 13
32339: PPUSH
32340: CALL_OW 325
32344: NOT
32345: AND
32346: IFFALSE 32375
// missile := Replace ( missile , missile + 1 , 3 ) ;
32348: LD_ADDR_VAR 0 14
32352: PUSH
32353: LD_VAR 0 14
32357: PPUSH
32358: LD_VAR 0 14
32362: PUSH
32363: LD_INT 1
32365: PLUS
32366: PPUSH
32367: LD_INT 3
32369: PPUSH
32370: CALL_OW 1
32374: ST_TO_ADDR
// if missile < 2 then
32375: LD_VAR 0 14
32379: PUSH
32380: LD_INT 2
32382: LESS
32383: IFFALSE 32387
// exit ;
32385: GO 32609
// x := GetX ( enemy ) ;
32387: LD_ADDR_VAR 0 4
32391: PUSH
32392: LD_VAR 0 10
32396: PPUSH
32397: CALL_OW 250
32401: ST_TO_ADDR
// y := GetY ( enemy ) ;
32402: LD_ADDR_VAR 0 5
32406: PUSH
32407: LD_VAR 0 10
32411: PPUSH
32412: CALL_OW 251
32416: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32417: LD_ADDR_VAR 0 6
32421: PUSH
32422: LD_VAR 0 4
32426: PUSH
32427: LD_INT 1
32429: NEG
32430: PPUSH
32431: LD_INT 1
32433: PPUSH
32434: CALL_OW 12
32438: PLUS
32439: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32440: LD_ADDR_VAR 0 7
32444: PUSH
32445: LD_VAR 0 5
32449: PUSH
32450: LD_INT 1
32452: NEG
32453: PPUSH
32454: LD_INT 1
32456: PPUSH
32457: CALL_OW 12
32461: PLUS
32462: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32463: LD_VAR 0 6
32467: PPUSH
32468: LD_VAR 0 7
32472: PPUSH
32473: CALL_OW 488
32477: NOT
32478: IFFALSE 32500
// begin _x := x ;
32480: LD_ADDR_VAR 0 6
32484: PUSH
32485: LD_VAR 0 4
32489: ST_TO_ADDR
// _y := y ;
32490: LD_ADDR_VAR 0 7
32494: PUSH
32495: LD_VAR 0 5
32499: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32500: LD_ADDR_VAR 0 3
32504: PUSH
32505: LD_INT 1
32507: PPUSH
32508: LD_VAR 0 14
32512: PPUSH
32513: CALL_OW 12
32517: ST_TO_ADDR
// case i of 1 :
32518: LD_VAR 0 3
32522: PUSH
32523: LD_INT 1
32525: DOUBLE
32526: EQUAL
32527: IFTRUE 32531
32529: GO 32548
32531: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32532: LD_VAR 0 1
32536: PPUSH
32537: LD_VAR 0 10
32541: PPUSH
32542: CALL_OW 115
32546: GO 32609
32548: LD_INT 2
32550: DOUBLE
32551: EQUAL
32552: IFTRUE 32556
32554: GO 32578
32556: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32557: LD_VAR 0 1
32561: PPUSH
32562: LD_VAR 0 6
32566: PPUSH
32567: LD_VAR 0 7
32571: PPUSH
32572: CALL_OW 153
32576: GO 32609
32578: LD_INT 3
32580: DOUBLE
32581: EQUAL
32582: IFTRUE 32586
32584: GO 32608
32586: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32587: LD_VAR 0 1
32591: PPUSH
32592: LD_VAR 0 6
32596: PPUSH
32597: LD_VAR 0 7
32601: PPUSH
32602: CALL_OW 154
32606: GO 32609
32608: POP
// end ;
32609: LD_VAR 0 2
32613: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32614: LD_INT 0
32616: PPUSH
32617: PPUSH
32618: PPUSH
32619: PPUSH
32620: PPUSH
32621: PPUSH
// if not unit or not building then
32622: LD_VAR 0 1
32626: NOT
32627: PUSH
32628: LD_VAR 0 2
32632: NOT
32633: OR
32634: IFFALSE 32638
// exit ;
32636: GO 32796
// x := GetX ( building ) ;
32638: LD_ADDR_VAR 0 5
32642: PUSH
32643: LD_VAR 0 2
32647: PPUSH
32648: CALL_OW 250
32652: ST_TO_ADDR
// y := GetY ( building ) ;
32653: LD_ADDR_VAR 0 6
32657: PUSH
32658: LD_VAR 0 2
32662: PPUSH
32663: CALL_OW 251
32667: ST_TO_ADDR
// for i = 0 to 5 do
32668: LD_ADDR_VAR 0 4
32672: PUSH
32673: DOUBLE
32674: LD_INT 0
32676: DEC
32677: ST_TO_ADDR
32678: LD_INT 5
32680: PUSH
32681: FOR_TO
32682: IFFALSE 32794
// begin _x := ShiftX ( x , i , 3 ) ;
32684: LD_ADDR_VAR 0 7
32688: PUSH
32689: LD_VAR 0 5
32693: PPUSH
32694: LD_VAR 0 4
32698: PPUSH
32699: LD_INT 3
32701: PPUSH
32702: CALL_OW 272
32706: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32707: LD_ADDR_VAR 0 8
32711: PUSH
32712: LD_VAR 0 6
32716: PPUSH
32717: LD_VAR 0 4
32721: PPUSH
32722: LD_INT 3
32724: PPUSH
32725: CALL_OW 273
32729: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32730: LD_VAR 0 7
32734: PPUSH
32735: LD_VAR 0 8
32739: PPUSH
32740: CALL_OW 488
32744: NOT
32745: IFFALSE 32749
// continue ;
32747: GO 32681
// if HexInfo ( _x , _y ) = 0 then
32749: LD_VAR 0 7
32753: PPUSH
32754: LD_VAR 0 8
32758: PPUSH
32759: CALL_OW 428
32763: PUSH
32764: LD_INT 0
32766: EQUAL
32767: IFFALSE 32792
// begin ComMoveXY ( unit , _x , _y ) ;
32769: LD_VAR 0 1
32773: PPUSH
32774: LD_VAR 0 7
32778: PPUSH
32779: LD_VAR 0 8
32783: PPUSH
32784: CALL_OW 111
// exit ;
32788: POP
32789: POP
32790: GO 32796
// end ; end ;
32792: GO 32681
32794: POP
32795: POP
// end ;
32796: LD_VAR 0 3
32800: RET
// export function ScanBase ( side , base_area ) ; begin
32801: LD_INT 0
32803: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32804: LD_ADDR_VAR 0 3
32808: PUSH
32809: LD_VAR 0 2
32813: PPUSH
32814: LD_INT 81
32816: PUSH
32817: LD_VAR 0 1
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PPUSH
32826: CALL_OW 70
32830: ST_TO_ADDR
// end ;
32831: LD_VAR 0 3
32835: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32836: LD_INT 0
32838: PPUSH
32839: PPUSH
32840: PPUSH
32841: PPUSH
// result := false ;
32842: LD_ADDR_VAR 0 2
32846: PUSH
32847: LD_INT 0
32849: ST_TO_ADDR
// side := GetSide ( unit ) ;
32850: LD_ADDR_VAR 0 3
32854: PUSH
32855: LD_VAR 0 1
32859: PPUSH
32860: CALL_OW 255
32864: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32865: LD_ADDR_VAR 0 4
32869: PUSH
32870: LD_VAR 0 1
32874: PPUSH
32875: CALL_OW 248
32879: ST_TO_ADDR
// case nat of 1 :
32880: LD_VAR 0 4
32884: PUSH
32885: LD_INT 1
32887: DOUBLE
32888: EQUAL
32889: IFTRUE 32893
32891: GO 32904
32893: POP
// tech := tech_lassight ; 2 :
32894: LD_ADDR_VAR 0 5
32898: PUSH
32899: LD_INT 12
32901: ST_TO_ADDR
32902: GO 32943
32904: LD_INT 2
32906: DOUBLE
32907: EQUAL
32908: IFTRUE 32912
32910: GO 32923
32912: POP
// tech := tech_mortar ; 3 :
32913: LD_ADDR_VAR 0 5
32917: PUSH
32918: LD_INT 41
32920: ST_TO_ADDR
32921: GO 32943
32923: LD_INT 3
32925: DOUBLE
32926: EQUAL
32927: IFTRUE 32931
32929: GO 32942
32931: POP
// tech := tech_bazooka ; end ;
32932: LD_ADDR_VAR 0 5
32936: PUSH
32937: LD_INT 44
32939: ST_TO_ADDR
32940: GO 32943
32942: POP
// if Researched ( side , tech ) then
32943: LD_VAR 0 3
32947: PPUSH
32948: LD_VAR 0 5
32952: PPUSH
32953: CALL_OW 325
32957: IFFALSE 32984
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32959: LD_ADDR_VAR 0 2
32963: PUSH
32964: LD_INT 5
32966: PUSH
32967: LD_INT 8
32969: PUSH
32970: LD_INT 9
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: LIST
32977: PUSH
32978: LD_VAR 0 4
32982: ARRAY
32983: ST_TO_ADDR
// end ;
32984: LD_VAR 0 2
32988: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32989: LD_INT 0
32991: PPUSH
32992: PPUSH
32993: PPUSH
// if not mines then
32994: LD_VAR 0 2
32998: NOT
32999: IFFALSE 33003
// exit ;
33001: GO 33147
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33003: LD_ADDR_VAR 0 5
33007: PUSH
33008: LD_INT 81
33010: PUSH
33011: LD_VAR 0 1
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 3
33022: PUSH
33023: LD_INT 21
33025: PUSH
33026: LD_INT 3
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PPUSH
33041: CALL_OW 69
33045: ST_TO_ADDR
// for i in mines do
33046: LD_ADDR_VAR 0 4
33050: PUSH
33051: LD_VAR 0 2
33055: PUSH
33056: FOR_IN
33057: IFFALSE 33145
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33059: LD_VAR 0 4
33063: PUSH
33064: LD_INT 1
33066: ARRAY
33067: PPUSH
33068: LD_VAR 0 4
33072: PUSH
33073: LD_INT 2
33075: ARRAY
33076: PPUSH
33077: CALL_OW 458
33081: NOT
33082: IFFALSE 33086
// continue ;
33084: GO 33056
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33086: LD_VAR 0 4
33090: PUSH
33091: LD_INT 1
33093: ARRAY
33094: PPUSH
33095: LD_VAR 0 4
33099: PUSH
33100: LD_INT 2
33102: ARRAY
33103: PPUSH
33104: CALL_OW 428
33108: PUSH
33109: LD_VAR 0 5
33113: IN
33114: IFFALSE 33143
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33116: LD_VAR 0 4
33120: PUSH
33121: LD_INT 1
33123: ARRAY
33124: PPUSH
33125: LD_VAR 0 4
33129: PUSH
33130: LD_INT 2
33132: ARRAY
33133: PPUSH
33134: LD_VAR 0 1
33138: PPUSH
33139: CALL_OW 456
// end ;
33143: GO 33056
33145: POP
33146: POP
// end ;
33147: LD_VAR 0 3
33151: RET
// export function Count ( array ) ; var i ; begin
33152: LD_INT 0
33154: PPUSH
33155: PPUSH
// result := 0 ;
33156: LD_ADDR_VAR 0 2
33160: PUSH
33161: LD_INT 0
33163: ST_TO_ADDR
// for i in array do
33164: LD_ADDR_VAR 0 3
33168: PUSH
33169: LD_VAR 0 1
33173: PUSH
33174: FOR_IN
33175: IFFALSE 33199
// if i then
33177: LD_VAR 0 3
33181: IFFALSE 33197
// result := result + 1 ;
33183: LD_ADDR_VAR 0 2
33187: PUSH
33188: LD_VAR 0 2
33192: PUSH
33193: LD_INT 1
33195: PLUS
33196: ST_TO_ADDR
33197: GO 33174
33199: POP
33200: POP
// end ;
33201: LD_VAR 0 2
33205: RET
// export function IsEmpty ( building ) ; begin
33206: LD_INT 0
33208: PPUSH
// if not building then
33209: LD_VAR 0 1
33213: NOT
33214: IFFALSE 33218
// exit ;
33216: GO 33261
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33218: LD_ADDR_VAR 0 2
33222: PUSH
33223: LD_VAR 0 1
33227: PUSH
33228: LD_INT 22
33230: PUSH
33231: LD_VAR 0 1
33235: PPUSH
33236: CALL_OW 255
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 58
33247: PUSH
33248: EMPTY
33249: LIST
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PPUSH
33255: CALL_OW 69
33259: IN
33260: ST_TO_ADDR
// end ;
33261: LD_VAR 0 2
33265: RET
// export function IsNotFull ( building ) ; var places ; begin
33266: LD_INT 0
33268: PPUSH
33269: PPUSH
// if not building then
33270: LD_VAR 0 1
33274: NOT
33275: IFFALSE 33279
// exit ;
33277: GO 33450
// result := false ;
33279: LD_ADDR_VAR 0 2
33283: PUSH
33284: LD_INT 0
33286: ST_TO_ADDR
// places := 0 ;
33287: LD_ADDR_VAR 0 3
33291: PUSH
33292: LD_INT 0
33294: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33295: LD_VAR 0 1
33299: PPUSH
33300: CALL_OW 266
33304: PUSH
33305: LD_INT 0
33307: DOUBLE
33308: EQUAL
33309: IFTRUE 33367
33311: LD_INT 1
33313: DOUBLE
33314: EQUAL
33315: IFTRUE 33367
33317: LD_INT 6
33319: DOUBLE
33320: EQUAL
33321: IFTRUE 33367
33323: LD_INT 7
33325: DOUBLE
33326: EQUAL
33327: IFTRUE 33367
33329: LD_INT 8
33331: DOUBLE
33332: EQUAL
33333: IFTRUE 33367
33335: LD_INT 4
33337: DOUBLE
33338: EQUAL
33339: IFTRUE 33367
33341: LD_INT 5
33343: DOUBLE
33344: EQUAL
33345: IFTRUE 33367
33347: LD_INT 2
33349: DOUBLE
33350: EQUAL
33351: IFTRUE 33367
33353: LD_INT 3
33355: DOUBLE
33356: EQUAL
33357: IFTRUE 33367
33359: LD_INT 35
33361: DOUBLE
33362: EQUAL
33363: IFTRUE 33367
33365: GO 33378
33367: POP
// places := 6 ; b_bunker , b_breastwork :
33368: LD_ADDR_VAR 0 3
33372: PUSH
33373: LD_INT 6
33375: ST_TO_ADDR
33376: GO 33423
33378: LD_INT 32
33380: DOUBLE
33381: EQUAL
33382: IFTRUE 33392
33384: LD_INT 31
33386: DOUBLE
33387: EQUAL
33388: IFTRUE 33392
33390: GO 33403
33392: POP
// places := 1 ; b_control_tower :
33393: LD_ADDR_VAR 0 3
33397: PUSH
33398: LD_INT 1
33400: ST_TO_ADDR
33401: GO 33423
33403: LD_INT 36
33405: DOUBLE
33406: EQUAL
33407: IFTRUE 33411
33409: GO 33422
33411: POP
// places := 3 ; end ;
33412: LD_ADDR_VAR 0 3
33416: PUSH
33417: LD_INT 3
33419: ST_TO_ADDR
33420: GO 33423
33422: POP
// if places then
33423: LD_VAR 0 3
33427: IFFALSE 33450
// result := UnitsInside ( building ) < places ;
33429: LD_ADDR_VAR 0 2
33433: PUSH
33434: LD_VAR 0 1
33438: PPUSH
33439: CALL_OW 313
33443: PUSH
33444: LD_VAR 0 3
33448: LESS
33449: ST_TO_ADDR
// end ;
33450: LD_VAR 0 2
33454: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33455: LD_INT 0
33457: PPUSH
33458: PPUSH
33459: PPUSH
33460: PPUSH
// tmp := [ ] ;
33461: LD_ADDR_VAR 0 3
33465: PUSH
33466: EMPTY
33467: ST_TO_ADDR
// list := [ ] ;
33468: LD_ADDR_VAR 0 5
33472: PUSH
33473: EMPTY
33474: ST_TO_ADDR
// for i = 16 to 25 do
33475: LD_ADDR_VAR 0 4
33479: PUSH
33480: DOUBLE
33481: LD_INT 16
33483: DEC
33484: ST_TO_ADDR
33485: LD_INT 25
33487: PUSH
33488: FOR_TO
33489: IFFALSE 33562
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33491: LD_ADDR_VAR 0 3
33495: PUSH
33496: LD_VAR 0 3
33500: PUSH
33501: LD_INT 22
33503: PUSH
33504: LD_VAR 0 1
33508: PPUSH
33509: CALL_OW 255
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 91
33520: PUSH
33521: LD_VAR 0 1
33525: PUSH
33526: LD_INT 6
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 30
33536: PUSH
33537: LD_VAR 0 4
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: LIST
33550: PUSH
33551: EMPTY
33552: LIST
33553: PPUSH
33554: CALL_OW 69
33558: ADD
33559: ST_TO_ADDR
33560: GO 33488
33562: POP
33563: POP
// for i = 1 to tmp do
33564: LD_ADDR_VAR 0 4
33568: PUSH
33569: DOUBLE
33570: LD_INT 1
33572: DEC
33573: ST_TO_ADDR
33574: LD_VAR 0 3
33578: PUSH
33579: FOR_TO
33580: IFFALSE 33668
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33582: LD_ADDR_VAR 0 5
33586: PUSH
33587: LD_VAR 0 5
33591: PUSH
33592: LD_VAR 0 3
33596: PUSH
33597: LD_VAR 0 4
33601: ARRAY
33602: PPUSH
33603: CALL_OW 266
33607: PUSH
33608: LD_VAR 0 3
33612: PUSH
33613: LD_VAR 0 4
33617: ARRAY
33618: PPUSH
33619: CALL_OW 250
33623: PUSH
33624: LD_VAR 0 3
33628: PUSH
33629: LD_VAR 0 4
33633: ARRAY
33634: PPUSH
33635: CALL_OW 251
33639: PUSH
33640: LD_VAR 0 3
33644: PUSH
33645: LD_VAR 0 4
33649: ARRAY
33650: PPUSH
33651: CALL_OW 254
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: PUSH
33662: EMPTY
33663: LIST
33664: ADD
33665: ST_TO_ADDR
33666: GO 33579
33668: POP
33669: POP
// result := list ;
33670: LD_ADDR_VAR 0 2
33674: PUSH
33675: LD_VAR 0 5
33679: ST_TO_ADDR
// end ;
33680: LD_VAR 0 2
33684: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33685: LD_INT 0
33687: PPUSH
33688: PPUSH
33689: PPUSH
33690: PPUSH
33691: PPUSH
33692: PPUSH
33693: PPUSH
// if not factory then
33694: LD_VAR 0 1
33698: NOT
33699: IFFALSE 33703
// exit ;
33701: GO 34296
// if control = control_apeman then
33703: LD_VAR 0 4
33707: PUSH
33708: LD_INT 5
33710: EQUAL
33711: IFFALSE 33820
// begin tmp := UnitsInside ( factory ) ;
33713: LD_ADDR_VAR 0 8
33717: PUSH
33718: LD_VAR 0 1
33722: PPUSH
33723: CALL_OW 313
33727: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33728: LD_VAR 0 8
33732: PPUSH
33733: LD_INT 25
33735: PUSH
33736: LD_INT 12
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PPUSH
33743: CALL_OW 72
33747: NOT
33748: IFFALSE 33758
// control := control_manual ;
33750: LD_ADDR_VAR 0 4
33754: PUSH
33755: LD_INT 1
33757: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33758: LD_ADDR_VAR 0 8
33762: PUSH
33763: LD_VAR 0 1
33767: PPUSH
33768: CALL 33455 0 1
33772: ST_TO_ADDR
// if tmp then
33773: LD_VAR 0 8
33777: IFFALSE 33820
// begin for i in tmp do
33779: LD_ADDR_VAR 0 7
33783: PUSH
33784: LD_VAR 0 8
33788: PUSH
33789: FOR_IN
33790: IFFALSE 33818
// if i [ 1 ] = b_ext_radio then
33792: LD_VAR 0 7
33796: PUSH
33797: LD_INT 1
33799: ARRAY
33800: PUSH
33801: LD_INT 22
33803: EQUAL
33804: IFFALSE 33816
// begin control := control_remote ;
33806: LD_ADDR_VAR 0 4
33810: PUSH
33811: LD_INT 2
33813: ST_TO_ADDR
// break ;
33814: GO 33818
// end ;
33816: GO 33789
33818: POP
33819: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33820: LD_VAR 0 1
33824: PPUSH
33825: LD_VAR 0 2
33829: PPUSH
33830: LD_VAR 0 3
33834: PPUSH
33835: LD_VAR 0 4
33839: PPUSH
33840: LD_VAR 0 5
33844: PPUSH
33845: CALL_OW 448
33849: IFFALSE 33884
// begin result := [ chassis , engine , control , weapon ] ;
33851: LD_ADDR_VAR 0 6
33855: PUSH
33856: LD_VAR 0 2
33860: PUSH
33861: LD_VAR 0 3
33865: PUSH
33866: LD_VAR 0 4
33870: PUSH
33871: LD_VAR 0 5
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: ST_TO_ADDR
// exit ;
33882: GO 34296
// end ; _chassis := AvailableChassisList ( factory ) ;
33884: LD_ADDR_VAR 0 9
33888: PUSH
33889: LD_VAR 0 1
33893: PPUSH
33894: CALL_OW 475
33898: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33899: LD_ADDR_VAR 0 11
33903: PUSH
33904: LD_VAR 0 1
33908: PPUSH
33909: CALL_OW 476
33913: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33914: LD_ADDR_VAR 0 12
33918: PUSH
33919: LD_VAR 0 1
33923: PPUSH
33924: CALL_OW 477
33928: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33929: LD_ADDR_VAR 0 10
33933: PUSH
33934: LD_VAR 0 1
33938: PPUSH
33939: CALL_OW 478
33943: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33944: LD_VAR 0 9
33948: NOT
33949: PUSH
33950: LD_VAR 0 11
33954: NOT
33955: OR
33956: PUSH
33957: LD_VAR 0 12
33961: NOT
33962: OR
33963: PUSH
33964: LD_VAR 0 10
33968: NOT
33969: OR
33970: IFFALSE 34005
// begin result := [ chassis , engine , control , weapon ] ;
33972: LD_ADDR_VAR 0 6
33976: PUSH
33977: LD_VAR 0 2
33981: PUSH
33982: LD_VAR 0 3
33986: PUSH
33987: LD_VAR 0 4
33991: PUSH
33992: LD_VAR 0 5
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: ST_TO_ADDR
// exit ;
34003: GO 34296
// end ; if not chassis in _chassis then
34005: LD_VAR 0 2
34009: PUSH
34010: LD_VAR 0 9
34014: IN
34015: NOT
34016: IFFALSE 34042
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34018: LD_ADDR_VAR 0 2
34022: PUSH
34023: LD_VAR 0 9
34027: PUSH
34028: LD_INT 1
34030: PPUSH
34031: LD_VAR 0 9
34035: PPUSH
34036: CALL_OW 12
34040: ARRAY
34041: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34042: LD_VAR 0 2
34046: PPUSH
34047: LD_VAR 0 3
34051: PPUSH
34052: CALL 34301 0 2
34056: NOT
34057: IFFALSE 34116
// repeat engine := _engine [ 1 ] ;
34059: LD_ADDR_VAR 0 3
34063: PUSH
34064: LD_VAR 0 11
34068: PUSH
34069: LD_INT 1
34071: ARRAY
34072: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34073: LD_ADDR_VAR 0 11
34077: PUSH
34078: LD_VAR 0 11
34082: PPUSH
34083: LD_INT 1
34085: PPUSH
34086: CALL_OW 3
34090: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34091: LD_VAR 0 2
34095: PPUSH
34096: LD_VAR 0 3
34100: PPUSH
34101: CALL 34301 0 2
34105: PUSH
34106: LD_VAR 0 11
34110: PUSH
34111: EMPTY
34112: EQUAL
34113: OR
34114: IFFALSE 34059
// if not control in _control then
34116: LD_VAR 0 4
34120: PUSH
34121: LD_VAR 0 12
34125: IN
34126: NOT
34127: IFFALSE 34153
// control := _control [ rand ( 1 , _control ) ] ;
34129: LD_ADDR_VAR 0 4
34133: PUSH
34134: LD_VAR 0 12
34138: PUSH
34139: LD_INT 1
34141: PPUSH
34142: LD_VAR 0 12
34146: PPUSH
34147: CALL_OW 12
34151: ARRAY
34152: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34153: LD_VAR 0 2
34157: PPUSH
34158: LD_VAR 0 5
34162: PPUSH
34163: CALL 34521 0 2
34167: NOT
34168: IFFALSE 34227
// repeat weapon := _weapon [ 1 ] ;
34170: LD_ADDR_VAR 0 5
34174: PUSH
34175: LD_VAR 0 10
34179: PUSH
34180: LD_INT 1
34182: ARRAY
34183: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34184: LD_ADDR_VAR 0 10
34188: PUSH
34189: LD_VAR 0 10
34193: PPUSH
34194: LD_INT 1
34196: PPUSH
34197: CALL_OW 3
34201: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34202: LD_VAR 0 2
34206: PPUSH
34207: LD_VAR 0 5
34211: PPUSH
34212: CALL 34521 0 2
34216: PUSH
34217: LD_VAR 0 10
34221: PUSH
34222: EMPTY
34223: EQUAL
34224: OR
34225: IFFALSE 34170
// result := [ ] ;
34227: LD_ADDR_VAR 0 6
34231: PUSH
34232: EMPTY
34233: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34234: LD_VAR 0 1
34238: PPUSH
34239: LD_VAR 0 2
34243: PPUSH
34244: LD_VAR 0 3
34248: PPUSH
34249: LD_VAR 0 4
34253: PPUSH
34254: LD_VAR 0 5
34258: PPUSH
34259: CALL_OW 448
34263: IFFALSE 34296
// result := [ chassis , engine , control , weapon ] ;
34265: LD_ADDR_VAR 0 6
34269: PUSH
34270: LD_VAR 0 2
34274: PUSH
34275: LD_VAR 0 3
34279: PUSH
34280: LD_VAR 0 4
34284: PUSH
34285: LD_VAR 0 5
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: ST_TO_ADDR
// end ;
34296: LD_VAR 0 6
34300: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34301: LD_INT 0
34303: PPUSH
// if not chassis or not engine then
34304: LD_VAR 0 1
34308: NOT
34309: PUSH
34310: LD_VAR 0 2
34314: NOT
34315: OR
34316: IFFALSE 34320
// exit ;
34318: GO 34516
// case engine of engine_solar :
34320: LD_VAR 0 2
34324: PUSH
34325: LD_INT 2
34327: DOUBLE
34328: EQUAL
34329: IFTRUE 34333
34331: GO 34371
34333: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34334: LD_ADDR_VAR 0 3
34338: PUSH
34339: LD_INT 11
34341: PUSH
34342: LD_INT 12
34344: PUSH
34345: LD_INT 13
34347: PUSH
34348: LD_INT 14
34350: PUSH
34351: LD_INT 1
34353: PUSH
34354: LD_INT 2
34356: PUSH
34357: LD_INT 3
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: ST_TO_ADDR
34369: GO 34500
34371: LD_INT 1
34373: DOUBLE
34374: EQUAL
34375: IFTRUE 34379
34377: GO 34441
34379: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34380: LD_ADDR_VAR 0 3
34384: PUSH
34385: LD_INT 11
34387: PUSH
34388: LD_INT 12
34390: PUSH
34391: LD_INT 13
34393: PUSH
34394: LD_INT 14
34396: PUSH
34397: LD_INT 1
34399: PUSH
34400: LD_INT 2
34402: PUSH
34403: LD_INT 3
34405: PUSH
34406: LD_INT 4
34408: PUSH
34409: LD_INT 5
34411: PUSH
34412: LD_INT 21
34414: PUSH
34415: LD_INT 23
34417: PUSH
34418: LD_INT 22
34420: PUSH
34421: LD_INT 24
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: ST_TO_ADDR
34439: GO 34500
34441: LD_INT 3
34443: DOUBLE
34444: EQUAL
34445: IFTRUE 34449
34447: GO 34499
34449: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34450: LD_ADDR_VAR 0 3
34454: PUSH
34455: LD_INT 13
34457: PUSH
34458: LD_INT 14
34460: PUSH
34461: LD_INT 2
34463: PUSH
34464: LD_INT 3
34466: PUSH
34467: LD_INT 4
34469: PUSH
34470: LD_INT 5
34472: PUSH
34473: LD_INT 21
34475: PUSH
34476: LD_INT 22
34478: PUSH
34479: LD_INT 23
34481: PUSH
34482: LD_INT 24
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: ST_TO_ADDR
34497: GO 34500
34499: POP
// result := ( chassis in result ) ;
34500: LD_ADDR_VAR 0 3
34504: PUSH
34505: LD_VAR 0 1
34509: PUSH
34510: LD_VAR 0 3
34514: IN
34515: ST_TO_ADDR
// end ;
34516: LD_VAR 0 3
34520: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34521: LD_INT 0
34523: PPUSH
// if not chassis or not weapon then
34524: LD_VAR 0 1
34528: NOT
34529: PUSH
34530: LD_VAR 0 2
34534: NOT
34535: OR
34536: IFFALSE 34540
// exit ;
34538: GO 35602
// case weapon of us_machine_gun :
34540: LD_VAR 0 2
34544: PUSH
34545: LD_INT 2
34547: DOUBLE
34548: EQUAL
34549: IFTRUE 34553
34551: GO 34583
34553: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34554: LD_ADDR_VAR 0 3
34558: PUSH
34559: LD_INT 1
34561: PUSH
34562: LD_INT 2
34564: PUSH
34565: LD_INT 3
34567: PUSH
34568: LD_INT 4
34570: PUSH
34571: LD_INT 5
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: ST_TO_ADDR
34581: GO 35586
34583: LD_INT 3
34585: DOUBLE
34586: EQUAL
34587: IFTRUE 34591
34589: GO 34621
34591: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34592: LD_ADDR_VAR 0 3
34596: PUSH
34597: LD_INT 1
34599: PUSH
34600: LD_INT 2
34602: PUSH
34603: LD_INT 3
34605: PUSH
34606: LD_INT 4
34608: PUSH
34609: LD_INT 5
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: ST_TO_ADDR
34619: GO 35586
34621: LD_INT 11
34623: DOUBLE
34624: EQUAL
34625: IFTRUE 34629
34627: GO 34659
34629: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34630: LD_ADDR_VAR 0 3
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: LD_INT 2
34640: PUSH
34641: LD_INT 3
34643: PUSH
34644: LD_INT 4
34646: PUSH
34647: LD_INT 5
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: ST_TO_ADDR
34657: GO 35586
34659: LD_INT 4
34661: DOUBLE
34662: EQUAL
34663: IFTRUE 34667
34665: GO 34693
34667: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34668: LD_ADDR_VAR 0 3
34672: PUSH
34673: LD_INT 2
34675: PUSH
34676: LD_INT 3
34678: PUSH
34679: LD_INT 4
34681: PUSH
34682: LD_INT 5
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: ST_TO_ADDR
34691: GO 35586
34693: LD_INT 5
34695: DOUBLE
34696: EQUAL
34697: IFTRUE 34701
34699: GO 34727
34701: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34702: LD_ADDR_VAR 0 3
34706: PUSH
34707: LD_INT 2
34709: PUSH
34710: LD_INT 3
34712: PUSH
34713: LD_INT 4
34715: PUSH
34716: LD_INT 5
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: ST_TO_ADDR
34725: GO 35586
34727: LD_INT 9
34729: DOUBLE
34730: EQUAL
34731: IFTRUE 34735
34733: GO 34761
34735: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34736: LD_ADDR_VAR 0 3
34740: PUSH
34741: LD_INT 2
34743: PUSH
34744: LD_INT 3
34746: PUSH
34747: LD_INT 4
34749: PUSH
34750: LD_INT 5
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: ST_TO_ADDR
34759: GO 35586
34761: LD_INT 7
34763: DOUBLE
34764: EQUAL
34765: IFTRUE 34769
34767: GO 34795
34769: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34770: LD_ADDR_VAR 0 3
34774: PUSH
34775: LD_INT 2
34777: PUSH
34778: LD_INT 3
34780: PUSH
34781: LD_INT 4
34783: PUSH
34784: LD_INT 5
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: ST_TO_ADDR
34793: GO 35586
34795: LD_INT 12
34797: DOUBLE
34798: EQUAL
34799: IFTRUE 34803
34801: GO 34829
34803: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34804: LD_ADDR_VAR 0 3
34808: PUSH
34809: LD_INT 2
34811: PUSH
34812: LD_INT 3
34814: PUSH
34815: LD_INT 4
34817: PUSH
34818: LD_INT 5
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: ST_TO_ADDR
34827: GO 35586
34829: LD_INT 13
34831: DOUBLE
34832: EQUAL
34833: IFTRUE 34837
34835: GO 34863
34837: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34838: LD_ADDR_VAR 0 3
34842: PUSH
34843: LD_INT 2
34845: PUSH
34846: LD_INT 3
34848: PUSH
34849: LD_INT 4
34851: PUSH
34852: LD_INT 5
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: ST_TO_ADDR
34861: GO 35586
34863: LD_INT 14
34865: DOUBLE
34866: EQUAL
34867: IFTRUE 34871
34869: GO 34889
34871: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34872: LD_ADDR_VAR 0 3
34876: PUSH
34877: LD_INT 4
34879: PUSH
34880: LD_INT 5
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: ST_TO_ADDR
34887: GO 35586
34889: LD_INT 6
34891: DOUBLE
34892: EQUAL
34893: IFTRUE 34897
34895: GO 34915
34897: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34898: LD_ADDR_VAR 0 3
34902: PUSH
34903: LD_INT 4
34905: PUSH
34906: LD_INT 5
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: ST_TO_ADDR
34913: GO 35586
34915: LD_INT 10
34917: DOUBLE
34918: EQUAL
34919: IFTRUE 34923
34921: GO 34941
34923: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34924: LD_ADDR_VAR 0 3
34928: PUSH
34929: LD_INT 4
34931: PUSH
34932: LD_INT 5
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: ST_TO_ADDR
34939: GO 35586
34941: LD_INT 22
34943: DOUBLE
34944: EQUAL
34945: IFTRUE 34949
34947: GO 34975
34949: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34950: LD_ADDR_VAR 0 3
34954: PUSH
34955: LD_INT 11
34957: PUSH
34958: LD_INT 12
34960: PUSH
34961: LD_INT 13
34963: PUSH
34964: LD_INT 14
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: ST_TO_ADDR
34973: GO 35586
34975: LD_INT 23
34977: DOUBLE
34978: EQUAL
34979: IFTRUE 34983
34981: GO 35009
34983: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34984: LD_ADDR_VAR 0 3
34988: PUSH
34989: LD_INT 11
34991: PUSH
34992: LD_INT 12
34994: PUSH
34995: LD_INT 13
34997: PUSH
34998: LD_INT 14
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: ST_TO_ADDR
35007: GO 35586
35009: LD_INT 24
35011: DOUBLE
35012: EQUAL
35013: IFTRUE 35017
35015: GO 35043
35017: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35018: LD_ADDR_VAR 0 3
35022: PUSH
35023: LD_INT 11
35025: PUSH
35026: LD_INT 12
35028: PUSH
35029: LD_INT 13
35031: PUSH
35032: LD_INT 14
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: ST_TO_ADDR
35041: GO 35586
35043: LD_INT 30
35045: DOUBLE
35046: EQUAL
35047: IFTRUE 35051
35049: GO 35077
35051: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35052: LD_ADDR_VAR 0 3
35056: PUSH
35057: LD_INT 11
35059: PUSH
35060: LD_INT 12
35062: PUSH
35063: LD_INT 13
35065: PUSH
35066: LD_INT 14
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: ST_TO_ADDR
35075: GO 35586
35077: LD_INT 25
35079: DOUBLE
35080: EQUAL
35081: IFTRUE 35085
35083: GO 35103
35085: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35086: LD_ADDR_VAR 0 3
35090: PUSH
35091: LD_INT 13
35093: PUSH
35094: LD_INT 14
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: ST_TO_ADDR
35101: GO 35586
35103: LD_INT 27
35105: DOUBLE
35106: EQUAL
35107: IFTRUE 35111
35109: GO 35129
35111: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35112: LD_ADDR_VAR 0 3
35116: PUSH
35117: LD_INT 13
35119: PUSH
35120: LD_INT 14
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: ST_TO_ADDR
35127: GO 35586
35129: LD_EXP 51
35133: DOUBLE
35134: EQUAL
35135: IFTRUE 35139
35137: GO 35165
35139: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35140: LD_ADDR_VAR 0 3
35144: PUSH
35145: LD_INT 11
35147: PUSH
35148: LD_INT 12
35150: PUSH
35151: LD_INT 13
35153: PUSH
35154: LD_INT 14
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: ST_TO_ADDR
35163: GO 35586
35165: LD_INT 28
35167: DOUBLE
35168: EQUAL
35169: IFTRUE 35173
35171: GO 35191
35173: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35174: LD_ADDR_VAR 0 3
35178: PUSH
35179: LD_INT 13
35181: PUSH
35182: LD_INT 14
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: ST_TO_ADDR
35189: GO 35586
35191: LD_INT 29
35193: DOUBLE
35194: EQUAL
35195: IFTRUE 35199
35197: GO 35217
35199: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35200: LD_ADDR_VAR 0 3
35204: PUSH
35205: LD_INT 13
35207: PUSH
35208: LD_INT 14
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: ST_TO_ADDR
35215: GO 35586
35217: LD_INT 31
35219: DOUBLE
35220: EQUAL
35221: IFTRUE 35225
35223: GO 35243
35225: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35226: LD_ADDR_VAR 0 3
35230: PUSH
35231: LD_INT 13
35233: PUSH
35234: LD_INT 14
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: ST_TO_ADDR
35241: GO 35586
35243: LD_INT 26
35245: DOUBLE
35246: EQUAL
35247: IFTRUE 35251
35249: GO 35269
35251: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35252: LD_ADDR_VAR 0 3
35256: PUSH
35257: LD_INT 13
35259: PUSH
35260: LD_INT 14
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: ST_TO_ADDR
35267: GO 35586
35269: LD_INT 42
35271: DOUBLE
35272: EQUAL
35273: IFTRUE 35277
35275: GO 35303
35277: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35278: LD_ADDR_VAR 0 3
35282: PUSH
35283: LD_INT 21
35285: PUSH
35286: LD_INT 22
35288: PUSH
35289: LD_INT 23
35291: PUSH
35292: LD_INT 24
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: ST_TO_ADDR
35301: GO 35586
35303: LD_INT 43
35305: DOUBLE
35306: EQUAL
35307: IFTRUE 35311
35309: GO 35337
35311: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35312: LD_ADDR_VAR 0 3
35316: PUSH
35317: LD_INT 21
35319: PUSH
35320: LD_INT 22
35322: PUSH
35323: LD_INT 23
35325: PUSH
35326: LD_INT 24
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: ST_TO_ADDR
35335: GO 35586
35337: LD_INT 44
35339: DOUBLE
35340: EQUAL
35341: IFTRUE 35345
35343: GO 35371
35345: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35346: LD_ADDR_VAR 0 3
35350: PUSH
35351: LD_INT 21
35353: PUSH
35354: LD_INT 22
35356: PUSH
35357: LD_INT 23
35359: PUSH
35360: LD_INT 24
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: ST_TO_ADDR
35369: GO 35586
35371: LD_INT 45
35373: DOUBLE
35374: EQUAL
35375: IFTRUE 35379
35377: GO 35405
35379: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35380: LD_ADDR_VAR 0 3
35384: PUSH
35385: LD_INT 21
35387: PUSH
35388: LD_INT 22
35390: PUSH
35391: LD_INT 23
35393: PUSH
35394: LD_INT 24
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: ST_TO_ADDR
35403: GO 35586
35405: LD_INT 49
35407: DOUBLE
35408: EQUAL
35409: IFTRUE 35413
35411: GO 35439
35413: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35414: LD_ADDR_VAR 0 3
35418: PUSH
35419: LD_INT 21
35421: PUSH
35422: LD_INT 22
35424: PUSH
35425: LD_INT 23
35427: PUSH
35428: LD_INT 24
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: ST_TO_ADDR
35437: GO 35586
35439: LD_INT 51
35441: DOUBLE
35442: EQUAL
35443: IFTRUE 35447
35445: GO 35473
35447: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35448: LD_ADDR_VAR 0 3
35452: PUSH
35453: LD_INT 21
35455: PUSH
35456: LD_INT 22
35458: PUSH
35459: LD_INT 23
35461: PUSH
35462: LD_INT 24
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: ST_TO_ADDR
35471: GO 35586
35473: LD_INT 52
35475: DOUBLE
35476: EQUAL
35477: IFTRUE 35481
35479: GO 35507
35481: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35482: LD_ADDR_VAR 0 3
35486: PUSH
35487: LD_INT 21
35489: PUSH
35490: LD_INT 22
35492: PUSH
35493: LD_INT 23
35495: PUSH
35496: LD_INT 24
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: ST_TO_ADDR
35505: GO 35586
35507: LD_INT 53
35509: DOUBLE
35510: EQUAL
35511: IFTRUE 35515
35513: GO 35533
35515: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35516: LD_ADDR_VAR 0 3
35520: PUSH
35521: LD_INT 23
35523: PUSH
35524: LD_INT 24
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: ST_TO_ADDR
35531: GO 35586
35533: LD_INT 46
35535: DOUBLE
35536: EQUAL
35537: IFTRUE 35541
35539: GO 35559
35541: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35542: LD_ADDR_VAR 0 3
35546: PUSH
35547: LD_INT 23
35549: PUSH
35550: LD_INT 24
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: ST_TO_ADDR
35557: GO 35586
35559: LD_INT 47
35561: DOUBLE
35562: EQUAL
35563: IFTRUE 35567
35565: GO 35585
35567: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35568: LD_ADDR_VAR 0 3
35572: PUSH
35573: LD_INT 23
35575: PUSH
35576: LD_INT 24
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: ST_TO_ADDR
35583: GO 35586
35585: POP
// result := ( chassis in result ) ;
35586: LD_ADDR_VAR 0 3
35590: PUSH
35591: LD_VAR 0 1
35595: PUSH
35596: LD_VAR 0 3
35600: IN
35601: ST_TO_ADDR
// end ;
35602: LD_VAR 0 3
35606: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35607: LD_INT 0
35609: PPUSH
35610: PPUSH
35611: PPUSH
35612: PPUSH
35613: PPUSH
35614: PPUSH
35615: PPUSH
// result := array ;
35616: LD_ADDR_VAR 0 5
35620: PUSH
35621: LD_VAR 0 1
35625: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35626: LD_VAR 0 1
35630: NOT
35631: PUSH
35632: LD_VAR 0 2
35636: NOT
35637: OR
35638: PUSH
35639: LD_VAR 0 3
35643: NOT
35644: OR
35645: PUSH
35646: LD_VAR 0 2
35650: PUSH
35651: LD_VAR 0 1
35655: GREATER
35656: OR
35657: PUSH
35658: LD_VAR 0 3
35662: PUSH
35663: LD_VAR 0 1
35667: GREATER
35668: OR
35669: IFFALSE 35673
// exit ;
35671: GO 35969
// if direction then
35673: LD_VAR 0 4
35677: IFFALSE 35741
// begin d := 1 ;
35679: LD_ADDR_VAR 0 9
35683: PUSH
35684: LD_INT 1
35686: ST_TO_ADDR
// if i_from > i_to then
35687: LD_VAR 0 2
35691: PUSH
35692: LD_VAR 0 3
35696: GREATER
35697: IFFALSE 35723
// length := ( array - i_from ) + i_to else
35699: LD_ADDR_VAR 0 11
35703: PUSH
35704: LD_VAR 0 1
35708: PUSH
35709: LD_VAR 0 2
35713: MINUS
35714: PUSH
35715: LD_VAR 0 3
35719: PLUS
35720: ST_TO_ADDR
35721: GO 35739
// length := i_to - i_from ;
35723: LD_ADDR_VAR 0 11
35727: PUSH
35728: LD_VAR 0 3
35732: PUSH
35733: LD_VAR 0 2
35737: MINUS
35738: ST_TO_ADDR
// end else
35739: GO 35802
// begin d := - 1 ;
35741: LD_ADDR_VAR 0 9
35745: PUSH
35746: LD_INT 1
35748: NEG
35749: ST_TO_ADDR
// if i_from > i_to then
35750: LD_VAR 0 2
35754: PUSH
35755: LD_VAR 0 3
35759: GREATER
35760: IFFALSE 35780
// length := i_from - i_to else
35762: LD_ADDR_VAR 0 11
35766: PUSH
35767: LD_VAR 0 2
35771: PUSH
35772: LD_VAR 0 3
35776: MINUS
35777: ST_TO_ADDR
35778: GO 35802
// length := ( array - i_to ) + i_from ;
35780: LD_ADDR_VAR 0 11
35784: PUSH
35785: LD_VAR 0 1
35789: PUSH
35790: LD_VAR 0 3
35794: MINUS
35795: PUSH
35796: LD_VAR 0 2
35800: PLUS
35801: ST_TO_ADDR
// end ; if not length then
35802: LD_VAR 0 11
35806: NOT
35807: IFFALSE 35811
// exit ;
35809: GO 35969
// tmp := array ;
35811: LD_ADDR_VAR 0 10
35815: PUSH
35816: LD_VAR 0 1
35820: ST_TO_ADDR
// for i = 1 to length do
35821: LD_ADDR_VAR 0 6
35825: PUSH
35826: DOUBLE
35827: LD_INT 1
35829: DEC
35830: ST_TO_ADDR
35831: LD_VAR 0 11
35835: PUSH
35836: FOR_TO
35837: IFFALSE 35957
// begin for j = 1 to array do
35839: LD_ADDR_VAR 0 7
35843: PUSH
35844: DOUBLE
35845: LD_INT 1
35847: DEC
35848: ST_TO_ADDR
35849: LD_VAR 0 1
35853: PUSH
35854: FOR_TO
35855: IFFALSE 35943
// begin k := j + d ;
35857: LD_ADDR_VAR 0 8
35861: PUSH
35862: LD_VAR 0 7
35866: PUSH
35867: LD_VAR 0 9
35871: PLUS
35872: ST_TO_ADDR
// if k > array then
35873: LD_VAR 0 8
35877: PUSH
35878: LD_VAR 0 1
35882: GREATER
35883: IFFALSE 35893
// k := 1 ;
35885: LD_ADDR_VAR 0 8
35889: PUSH
35890: LD_INT 1
35892: ST_TO_ADDR
// if not k then
35893: LD_VAR 0 8
35897: NOT
35898: IFFALSE 35910
// k := array ;
35900: LD_ADDR_VAR 0 8
35904: PUSH
35905: LD_VAR 0 1
35909: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35910: LD_ADDR_VAR 0 10
35914: PUSH
35915: LD_VAR 0 10
35919: PPUSH
35920: LD_VAR 0 8
35924: PPUSH
35925: LD_VAR 0 1
35929: PUSH
35930: LD_VAR 0 7
35934: ARRAY
35935: PPUSH
35936: CALL_OW 1
35940: ST_TO_ADDR
// end ;
35941: GO 35854
35943: POP
35944: POP
// array := tmp ;
35945: LD_ADDR_VAR 0 1
35949: PUSH
35950: LD_VAR 0 10
35954: ST_TO_ADDR
// end ;
35955: GO 35836
35957: POP
35958: POP
// result := array ;
35959: LD_ADDR_VAR 0 5
35963: PUSH
35964: LD_VAR 0 1
35968: ST_TO_ADDR
// end ;
35969: LD_VAR 0 5
35973: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35974: LD_INT 0
35976: PPUSH
35977: PPUSH
// result := 0 ;
35978: LD_ADDR_VAR 0 3
35982: PUSH
35983: LD_INT 0
35985: ST_TO_ADDR
// if not array or not value in array then
35986: LD_VAR 0 1
35990: NOT
35991: PUSH
35992: LD_VAR 0 2
35996: PUSH
35997: LD_VAR 0 1
36001: IN
36002: NOT
36003: OR
36004: IFFALSE 36008
// exit ;
36006: GO 36062
// for i = 1 to array do
36008: LD_ADDR_VAR 0 4
36012: PUSH
36013: DOUBLE
36014: LD_INT 1
36016: DEC
36017: ST_TO_ADDR
36018: LD_VAR 0 1
36022: PUSH
36023: FOR_TO
36024: IFFALSE 36060
// if value = array [ i ] then
36026: LD_VAR 0 2
36030: PUSH
36031: LD_VAR 0 1
36035: PUSH
36036: LD_VAR 0 4
36040: ARRAY
36041: EQUAL
36042: IFFALSE 36058
// begin result := i ;
36044: LD_ADDR_VAR 0 3
36048: PUSH
36049: LD_VAR 0 4
36053: ST_TO_ADDR
// exit ;
36054: POP
36055: POP
36056: GO 36062
// end ;
36058: GO 36023
36060: POP
36061: POP
// end ;
36062: LD_VAR 0 3
36066: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36067: LD_INT 0
36069: PPUSH
// vc_chassis := chassis ;
36070: LD_ADDR_OWVAR 37
36074: PUSH
36075: LD_VAR 0 1
36079: ST_TO_ADDR
// vc_engine := engine ;
36080: LD_ADDR_OWVAR 39
36084: PUSH
36085: LD_VAR 0 2
36089: ST_TO_ADDR
// vc_control := control ;
36090: LD_ADDR_OWVAR 38
36094: PUSH
36095: LD_VAR 0 3
36099: ST_TO_ADDR
// vc_weapon := weapon ;
36100: LD_ADDR_OWVAR 40
36104: PUSH
36105: LD_VAR 0 4
36109: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36110: LD_ADDR_OWVAR 41
36114: PUSH
36115: LD_VAR 0 5
36119: ST_TO_ADDR
// end ;
36120: LD_VAR 0 6
36124: RET
// export function WantPlant ( unit ) ; var task ; begin
36125: LD_INT 0
36127: PPUSH
36128: PPUSH
// result := false ;
36129: LD_ADDR_VAR 0 2
36133: PUSH
36134: LD_INT 0
36136: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36137: LD_ADDR_VAR 0 3
36141: PUSH
36142: LD_VAR 0 1
36146: PPUSH
36147: CALL_OW 437
36151: ST_TO_ADDR
// if task then
36152: LD_VAR 0 3
36156: IFFALSE 36184
// if task [ 1 ] [ 1 ] = p then
36158: LD_VAR 0 3
36162: PUSH
36163: LD_INT 1
36165: ARRAY
36166: PUSH
36167: LD_INT 1
36169: ARRAY
36170: PUSH
36171: LD_STRING p
36173: EQUAL
36174: IFFALSE 36184
// result := true ;
36176: LD_ADDR_VAR 0 2
36180: PUSH
36181: LD_INT 1
36183: ST_TO_ADDR
// end ;
36184: LD_VAR 0 2
36188: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36189: LD_INT 0
36191: PPUSH
36192: PPUSH
36193: PPUSH
36194: PPUSH
// if pos < 1 then
36195: LD_VAR 0 2
36199: PUSH
36200: LD_INT 1
36202: LESS
36203: IFFALSE 36207
// exit ;
36205: GO 36510
// if pos = 1 then
36207: LD_VAR 0 2
36211: PUSH
36212: LD_INT 1
36214: EQUAL
36215: IFFALSE 36248
// result := Replace ( arr , pos [ 1 ] , value ) else
36217: LD_ADDR_VAR 0 4
36221: PUSH
36222: LD_VAR 0 1
36226: PPUSH
36227: LD_VAR 0 2
36231: PUSH
36232: LD_INT 1
36234: ARRAY
36235: PPUSH
36236: LD_VAR 0 3
36240: PPUSH
36241: CALL_OW 1
36245: ST_TO_ADDR
36246: GO 36510
// begin tmp := arr ;
36248: LD_ADDR_VAR 0 6
36252: PUSH
36253: LD_VAR 0 1
36257: ST_TO_ADDR
// s_arr := [ tmp ] ;
36258: LD_ADDR_VAR 0 7
36262: PUSH
36263: LD_VAR 0 6
36267: PUSH
36268: EMPTY
36269: LIST
36270: ST_TO_ADDR
// for i = 1 to pos - 1 do
36271: LD_ADDR_VAR 0 5
36275: PUSH
36276: DOUBLE
36277: LD_INT 1
36279: DEC
36280: ST_TO_ADDR
36281: LD_VAR 0 2
36285: PUSH
36286: LD_INT 1
36288: MINUS
36289: PUSH
36290: FOR_TO
36291: IFFALSE 36336
// begin tmp := tmp [ pos [ i ] ] ;
36293: LD_ADDR_VAR 0 6
36297: PUSH
36298: LD_VAR 0 6
36302: PUSH
36303: LD_VAR 0 2
36307: PUSH
36308: LD_VAR 0 5
36312: ARRAY
36313: ARRAY
36314: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36315: LD_ADDR_VAR 0 7
36319: PUSH
36320: LD_VAR 0 7
36324: PUSH
36325: LD_VAR 0 6
36329: PUSH
36330: EMPTY
36331: LIST
36332: ADD
36333: ST_TO_ADDR
// end ;
36334: GO 36290
36336: POP
36337: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36338: LD_ADDR_VAR 0 6
36342: PUSH
36343: LD_VAR 0 6
36347: PPUSH
36348: LD_VAR 0 2
36352: PUSH
36353: LD_VAR 0 2
36357: ARRAY
36358: PPUSH
36359: LD_VAR 0 3
36363: PPUSH
36364: CALL_OW 1
36368: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36369: LD_ADDR_VAR 0 7
36373: PUSH
36374: LD_VAR 0 7
36378: PPUSH
36379: LD_VAR 0 7
36383: PPUSH
36384: LD_VAR 0 6
36388: PPUSH
36389: CALL_OW 1
36393: ST_TO_ADDR
// for i = s_arr downto 2 do
36394: LD_ADDR_VAR 0 5
36398: PUSH
36399: DOUBLE
36400: LD_VAR 0 7
36404: INC
36405: ST_TO_ADDR
36406: LD_INT 2
36408: PUSH
36409: FOR_DOWNTO
36410: IFFALSE 36494
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36412: LD_ADDR_VAR 0 6
36416: PUSH
36417: LD_VAR 0 7
36421: PUSH
36422: LD_VAR 0 5
36426: PUSH
36427: LD_INT 1
36429: MINUS
36430: ARRAY
36431: PPUSH
36432: LD_VAR 0 2
36436: PUSH
36437: LD_VAR 0 5
36441: PUSH
36442: LD_INT 1
36444: MINUS
36445: ARRAY
36446: PPUSH
36447: LD_VAR 0 7
36451: PUSH
36452: LD_VAR 0 5
36456: ARRAY
36457: PPUSH
36458: CALL_OW 1
36462: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36463: LD_ADDR_VAR 0 7
36467: PUSH
36468: LD_VAR 0 7
36472: PPUSH
36473: LD_VAR 0 5
36477: PUSH
36478: LD_INT 1
36480: MINUS
36481: PPUSH
36482: LD_VAR 0 6
36486: PPUSH
36487: CALL_OW 1
36491: ST_TO_ADDR
// end ;
36492: GO 36409
36494: POP
36495: POP
// result := s_arr [ 1 ] ;
36496: LD_ADDR_VAR 0 4
36500: PUSH
36501: LD_VAR 0 7
36505: PUSH
36506: LD_INT 1
36508: ARRAY
36509: ST_TO_ADDR
// end ; end ;
36510: LD_VAR 0 4
36514: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36515: LD_INT 0
36517: PPUSH
36518: PPUSH
// if not list then
36519: LD_VAR 0 1
36523: NOT
36524: IFFALSE 36528
// exit ;
36526: GO 36619
// i := list [ pos1 ] ;
36528: LD_ADDR_VAR 0 5
36532: PUSH
36533: LD_VAR 0 1
36537: PUSH
36538: LD_VAR 0 2
36542: ARRAY
36543: ST_TO_ADDR
// if not i then
36544: LD_VAR 0 5
36548: NOT
36549: IFFALSE 36553
// exit ;
36551: GO 36619
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36553: LD_ADDR_VAR 0 1
36557: PUSH
36558: LD_VAR 0 1
36562: PPUSH
36563: LD_VAR 0 2
36567: PPUSH
36568: LD_VAR 0 1
36572: PUSH
36573: LD_VAR 0 3
36577: ARRAY
36578: PPUSH
36579: CALL_OW 1
36583: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36584: LD_ADDR_VAR 0 1
36588: PUSH
36589: LD_VAR 0 1
36593: PPUSH
36594: LD_VAR 0 3
36598: PPUSH
36599: LD_VAR 0 5
36603: PPUSH
36604: CALL_OW 1
36608: ST_TO_ADDR
// result := list ;
36609: LD_ADDR_VAR 0 4
36613: PUSH
36614: LD_VAR 0 1
36618: ST_TO_ADDR
// end ;
36619: LD_VAR 0 4
36623: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36624: LD_INT 0
36626: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36627: LD_ADDR_VAR 0 5
36631: PUSH
36632: LD_VAR 0 1
36636: PPUSH
36637: CALL_OW 250
36641: PPUSH
36642: LD_VAR 0 1
36646: PPUSH
36647: CALL_OW 251
36651: PPUSH
36652: LD_VAR 0 2
36656: PPUSH
36657: LD_VAR 0 3
36661: PPUSH
36662: LD_VAR 0 4
36666: PPUSH
36667: CALL 36677 0 5
36671: ST_TO_ADDR
// end ;
36672: LD_VAR 0 5
36676: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36677: LD_INT 0
36679: PPUSH
36680: PPUSH
36681: PPUSH
36682: PPUSH
// if not list then
36683: LD_VAR 0 3
36687: NOT
36688: IFFALSE 36692
// exit ;
36690: GO 37080
// result := [ ] ;
36692: LD_ADDR_VAR 0 6
36696: PUSH
36697: EMPTY
36698: ST_TO_ADDR
// for i in list do
36699: LD_ADDR_VAR 0 7
36703: PUSH
36704: LD_VAR 0 3
36708: PUSH
36709: FOR_IN
36710: IFFALSE 36912
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36712: LD_ADDR_VAR 0 9
36716: PUSH
36717: LD_VAR 0 7
36721: PPUSH
36722: LD_VAR 0 1
36726: PPUSH
36727: LD_VAR 0 2
36731: PPUSH
36732: CALL_OW 297
36736: ST_TO_ADDR
// if not result then
36737: LD_VAR 0 6
36741: NOT
36742: IFFALSE 36768
// result := [ [ i , tmp ] ] else
36744: LD_ADDR_VAR 0 6
36748: PUSH
36749: LD_VAR 0 7
36753: PUSH
36754: LD_VAR 0 9
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: EMPTY
36764: LIST
36765: ST_TO_ADDR
36766: GO 36910
// begin if result [ result ] [ 2 ] < tmp then
36768: LD_VAR 0 6
36772: PUSH
36773: LD_VAR 0 6
36777: ARRAY
36778: PUSH
36779: LD_INT 2
36781: ARRAY
36782: PUSH
36783: LD_VAR 0 9
36787: LESS
36788: IFFALSE 36830
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36790: LD_ADDR_VAR 0 6
36794: PUSH
36795: LD_VAR 0 6
36799: PPUSH
36800: LD_VAR 0 6
36804: PUSH
36805: LD_INT 1
36807: PLUS
36808: PPUSH
36809: LD_VAR 0 7
36813: PUSH
36814: LD_VAR 0 9
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PPUSH
36823: CALL_OW 2
36827: ST_TO_ADDR
36828: GO 36910
// for j = 1 to result do
36830: LD_ADDR_VAR 0 8
36834: PUSH
36835: DOUBLE
36836: LD_INT 1
36838: DEC
36839: ST_TO_ADDR
36840: LD_VAR 0 6
36844: PUSH
36845: FOR_TO
36846: IFFALSE 36908
// begin if tmp < result [ j ] [ 2 ] then
36848: LD_VAR 0 9
36852: PUSH
36853: LD_VAR 0 6
36857: PUSH
36858: LD_VAR 0 8
36862: ARRAY
36863: PUSH
36864: LD_INT 2
36866: ARRAY
36867: LESS
36868: IFFALSE 36906
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36870: LD_ADDR_VAR 0 6
36874: PUSH
36875: LD_VAR 0 6
36879: PPUSH
36880: LD_VAR 0 8
36884: PPUSH
36885: LD_VAR 0 7
36889: PUSH
36890: LD_VAR 0 9
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PPUSH
36899: CALL_OW 2
36903: ST_TO_ADDR
// break ;
36904: GO 36908
// end ; end ;
36906: GO 36845
36908: POP
36909: POP
// end ; end ;
36910: GO 36709
36912: POP
36913: POP
// if result and not asc then
36914: LD_VAR 0 6
36918: PUSH
36919: LD_VAR 0 4
36923: NOT
36924: AND
36925: IFFALSE 37000
// begin tmp := result ;
36927: LD_ADDR_VAR 0 9
36931: PUSH
36932: LD_VAR 0 6
36936: ST_TO_ADDR
// for i = tmp downto 1 do
36937: LD_ADDR_VAR 0 7
36941: PUSH
36942: DOUBLE
36943: LD_VAR 0 9
36947: INC
36948: ST_TO_ADDR
36949: LD_INT 1
36951: PUSH
36952: FOR_DOWNTO
36953: IFFALSE 36998
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36955: LD_ADDR_VAR 0 6
36959: PUSH
36960: LD_VAR 0 6
36964: PPUSH
36965: LD_VAR 0 9
36969: PUSH
36970: LD_VAR 0 7
36974: MINUS
36975: PUSH
36976: LD_INT 1
36978: PLUS
36979: PPUSH
36980: LD_VAR 0 9
36984: PUSH
36985: LD_VAR 0 7
36989: ARRAY
36990: PPUSH
36991: CALL_OW 1
36995: ST_TO_ADDR
36996: GO 36952
36998: POP
36999: POP
// end ; tmp := [ ] ;
37000: LD_ADDR_VAR 0 9
37004: PUSH
37005: EMPTY
37006: ST_TO_ADDR
// if mode then
37007: LD_VAR 0 5
37011: IFFALSE 37080
// begin for i = 1 to result do
37013: LD_ADDR_VAR 0 7
37017: PUSH
37018: DOUBLE
37019: LD_INT 1
37021: DEC
37022: ST_TO_ADDR
37023: LD_VAR 0 6
37027: PUSH
37028: FOR_TO
37029: IFFALSE 37068
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37031: LD_ADDR_VAR 0 9
37035: PUSH
37036: LD_VAR 0 9
37040: PPUSH
37041: LD_VAR 0 7
37045: PPUSH
37046: LD_VAR 0 6
37050: PUSH
37051: LD_VAR 0 7
37055: ARRAY
37056: PUSH
37057: LD_INT 1
37059: ARRAY
37060: PPUSH
37061: CALL_OW 1
37065: ST_TO_ADDR
37066: GO 37028
37068: POP
37069: POP
// result := tmp ;
37070: LD_ADDR_VAR 0 6
37074: PUSH
37075: LD_VAR 0 9
37079: ST_TO_ADDR
// end ; end ;
37080: LD_VAR 0 6
37084: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37085: LD_INT 0
37087: PPUSH
37088: PPUSH
37089: PPUSH
37090: PPUSH
37091: PPUSH
37092: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37093: LD_ADDR_VAR 0 5
37097: PUSH
37098: LD_INT 0
37100: PUSH
37101: LD_INT 0
37103: PUSH
37104: LD_INT 0
37106: PUSH
37107: EMPTY
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: ST_TO_ADDR
// if not x or not y then
37115: LD_VAR 0 2
37119: NOT
37120: PUSH
37121: LD_VAR 0 3
37125: NOT
37126: OR
37127: IFFALSE 37131
// exit ;
37129: GO 38783
// if not range then
37131: LD_VAR 0 4
37135: NOT
37136: IFFALSE 37146
// range := 10 ;
37138: LD_ADDR_VAR 0 4
37142: PUSH
37143: LD_INT 10
37145: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37146: LD_ADDR_VAR 0 8
37150: PUSH
37151: LD_INT 81
37153: PUSH
37154: LD_VAR 0 1
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 92
37165: PUSH
37166: LD_VAR 0 2
37170: PUSH
37171: LD_VAR 0 3
37175: PUSH
37176: LD_VAR 0 4
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 3
37189: PUSH
37190: LD_INT 21
37192: PUSH
37193: LD_INT 3
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: LIST
37208: PPUSH
37209: CALL_OW 69
37213: ST_TO_ADDR
// if not tmp then
37214: LD_VAR 0 8
37218: NOT
37219: IFFALSE 37223
// exit ;
37221: GO 38783
// for i in tmp do
37223: LD_ADDR_VAR 0 6
37227: PUSH
37228: LD_VAR 0 8
37232: PUSH
37233: FOR_IN
37234: IFFALSE 38758
// begin points := [ 0 , 0 , 0 ] ;
37236: LD_ADDR_VAR 0 9
37240: PUSH
37241: LD_INT 0
37243: PUSH
37244: LD_INT 0
37246: PUSH
37247: LD_INT 0
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: LIST
37254: ST_TO_ADDR
// bpoints := 1 ;
37255: LD_ADDR_VAR 0 10
37259: PUSH
37260: LD_INT 1
37262: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37263: LD_VAR 0 6
37267: PPUSH
37268: CALL_OW 247
37272: PUSH
37273: LD_INT 1
37275: DOUBLE
37276: EQUAL
37277: IFTRUE 37281
37279: GO 37859
37281: POP
// begin if GetClass ( i ) = 1 then
37282: LD_VAR 0 6
37286: PPUSH
37287: CALL_OW 257
37291: PUSH
37292: LD_INT 1
37294: EQUAL
37295: IFFALSE 37316
// points := [ 10 , 5 , 3 ] ;
37297: LD_ADDR_VAR 0 9
37301: PUSH
37302: LD_INT 10
37304: PUSH
37305: LD_INT 5
37307: PUSH
37308: LD_INT 3
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: LIST
37315: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37316: LD_VAR 0 6
37320: PPUSH
37321: CALL_OW 257
37325: PUSH
37326: LD_INT 2
37328: PUSH
37329: LD_INT 3
37331: PUSH
37332: LD_INT 4
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: LIST
37339: IN
37340: IFFALSE 37361
// points := [ 3 , 2 , 1 ] ;
37342: LD_ADDR_VAR 0 9
37346: PUSH
37347: LD_INT 3
37349: PUSH
37350: LD_INT 2
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: LIST
37360: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37361: LD_VAR 0 6
37365: PPUSH
37366: CALL_OW 257
37370: PUSH
37371: LD_INT 5
37373: EQUAL
37374: IFFALSE 37395
// points := [ 130 , 5 , 2 ] ;
37376: LD_ADDR_VAR 0 9
37380: PUSH
37381: LD_INT 130
37383: PUSH
37384: LD_INT 5
37386: PUSH
37387: LD_INT 2
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: LIST
37394: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37395: LD_VAR 0 6
37399: PPUSH
37400: CALL_OW 257
37404: PUSH
37405: LD_INT 8
37407: EQUAL
37408: IFFALSE 37429
// points := [ 35 , 35 , 30 ] ;
37410: LD_ADDR_VAR 0 9
37414: PUSH
37415: LD_INT 35
37417: PUSH
37418: LD_INT 35
37420: PUSH
37421: LD_INT 30
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: LIST
37428: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37429: LD_VAR 0 6
37433: PPUSH
37434: CALL_OW 257
37438: PUSH
37439: LD_INT 9
37441: EQUAL
37442: IFFALSE 37463
// points := [ 20 , 55 , 40 ] ;
37444: LD_ADDR_VAR 0 9
37448: PUSH
37449: LD_INT 20
37451: PUSH
37452: LD_INT 55
37454: PUSH
37455: LD_INT 40
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: LIST
37462: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37463: LD_VAR 0 6
37467: PPUSH
37468: CALL_OW 257
37472: PUSH
37473: LD_INT 12
37475: PUSH
37476: LD_INT 16
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: IN
37483: IFFALSE 37504
// points := [ 5 , 3 , 2 ] ;
37485: LD_ADDR_VAR 0 9
37489: PUSH
37490: LD_INT 5
37492: PUSH
37493: LD_INT 3
37495: PUSH
37496: LD_INT 2
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: LIST
37503: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37504: LD_VAR 0 6
37508: PPUSH
37509: CALL_OW 257
37513: PUSH
37514: LD_INT 17
37516: EQUAL
37517: IFFALSE 37538
// points := [ 100 , 50 , 75 ] ;
37519: LD_ADDR_VAR 0 9
37523: PUSH
37524: LD_INT 100
37526: PUSH
37527: LD_INT 50
37529: PUSH
37530: LD_INT 75
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: LIST
37537: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37538: LD_VAR 0 6
37542: PPUSH
37543: CALL_OW 257
37547: PUSH
37548: LD_INT 15
37550: EQUAL
37551: IFFALSE 37572
// points := [ 10 , 5 , 3 ] ;
37553: LD_ADDR_VAR 0 9
37557: PUSH
37558: LD_INT 10
37560: PUSH
37561: LD_INT 5
37563: PUSH
37564: LD_INT 3
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: LIST
37571: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37572: LD_VAR 0 6
37576: PPUSH
37577: CALL_OW 257
37581: PUSH
37582: LD_INT 14
37584: EQUAL
37585: IFFALSE 37606
// points := [ 10 , 0 , 0 ] ;
37587: LD_ADDR_VAR 0 9
37591: PUSH
37592: LD_INT 10
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: LIST
37605: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37606: LD_VAR 0 6
37610: PPUSH
37611: CALL_OW 257
37615: PUSH
37616: LD_INT 11
37618: EQUAL
37619: IFFALSE 37640
// points := [ 30 , 10 , 5 ] ;
37621: LD_ADDR_VAR 0 9
37625: PUSH
37626: LD_INT 30
37628: PUSH
37629: LD_INT 10
37631: PUSH
37632: LD_INT 5
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: LIST
37639: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37640: LD_VAR 0 1
37644: PPUSH
37645: LD_INT 5
37647: PPUSH
37648: CALL_OW 321
37652: PUSH
37653: LD_INT 2
37655: EQUAL
37656: IFFALSE 37673
// bpoints := bpoints * 1.8 ;
37658: LD_ADDR_VAR 0 10
37662: PUSH
37663: LD_VAR 0 10
37667: PUSH
37668: LD_REAL  1.80000000000000E+0000
37671: MUL
37672: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37673: LD_VAR 0 6
37677: PPUSH
37678: CALL_OW 257
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: LD_INT 2
37688: PUSH
37689: LD_INT 3
37691: PUSH
37692: LD_INT 4
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: IN
37701: PUSH
37702: LD_VAR 0 1
37706: PPUSH
37707: LD_INT 51
37709: PPUSH
37710: CALL_OW 321
37714: PUSH
37715: LD_INT 2
37717: EQUAL
37718: AND
37719: IFFALSE 37736
// bpoints := bpoints * 1.2 ;
37721: LD_ADDR_VAR 0 10
37725: PUSH
37726: LD_VAR 0 10
37730: PUSH
37731: LD_REAL  1.20000000000000E+0000
37734: MUL
37735: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37736: LD_VAR 0 6
37740: PPUSH
37741: CALL_OW 257
37745: PUSH
37746: LD_INT 5
37748: PUSH
37749: LD_INT 7
37751: PUSH
37752: LD_INT 9
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: LIST
37759: IN
37760: PUSH
37761: LD_VAR 0 1
37765: PPUSH
37766: LD_INT 52
37768: PPUSH
37769: CALL_OW 321
37773: PUSH
37774: LD_INT 2
37776: EQUAL
37777: AND
37778: IFFALSE 37795
// bpoints := bpoints * 1.5 ;
37780: LD_ADDR_VAR 0 10
37784: PUSH
37785: LD_VAR 0 10
37789: PUSH
37790: LD_REAL  1.50000000000000E+0000
37793: MUL
37794: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37795: LD_VAR 0 1
37799: PPUSH
37800: LD_INT 66
37802: PPUSH
37803: CALL_OW 321
37807: PUSH
37808: LD_INT 2
37810: EQUAL
37811: IFFALSE 37828
// bpoints := bpoints * 1.1 ;
37813: LD_ADDR_VAR 0 10
37817: PUSH
37818: LD_VAR 0 10
37822: PUSH
37823: LD_REAL  1.10000000000000E+0000
37826: MUL
37827: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37828: LD_ADDR_VAR 0 10
37832: PUSH
37833: LD_VAR 0 10
37837: PUSH
37838: LD_VAR 0 6
37842: PPUSH
37843: LD_INT 1
37845: PPUSH
37846: CALL_OW 259
37850: PUSH
37851: LD_REAL  1.15000000000000E+0000
37854: MUL
37855: MUL
37856: ST_TO_ADDR
// end ; unit_vehicle :
37857: GO 38687
37859: LD_INT 2
37861: DOUBLE
37862: EQUAL
37863: IFTRUE 37867
37865: GO 38675
37867: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37868: LD_VAR 0 6
37872: PPUSH
37873: CALL_OW 264
37877: PUSH
37878: LD_INT 2
37880: PUSH
37881: LD_INT 42
37883: PUSH
37884: LD_INT 24
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: LIST
37891: IN
37892: IFFALSE 37913
// points := [ 25 , 5 , 3 ] ;
37894: LD_ADDR_VAR 0 9
37898: PUSH
37899: LD_INT 25
37901: PUSH
37902: LD_INT 5
37904: PUSH
37905: LD_INT 3
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: LIST
37912: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37913: LD_VAR 0 6
37917: PPUSH
37918: CALL_OW 264
37922: PUSH
37923: LD_INT 4
37925: PUSH
37926: LD_INT 43
37928: PUSH
37929: LD_INT 25
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: LIST
37936: IN
37937: IFFALSE 37958
// points := [ 40 , 15 , 5 ] ;
37939: LD_ADDR_VAR 0 9
37943: PUSH
37944: LD_INT 40
37946: PUSH
37947: LD_INT 15
37949: PUSH
37950: LD_INT 5
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: LIST
37957: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37958: LD_VAR 0 6
37962: PPUSH
37963: CALL_OW 264
37967: PUSH
37968: LD_INT 3
37970: PUSH
37971: LD_INT 23
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: IN
37978: IFFALSE 37999
// points := [ 7 , 25 , 8 ] ;
37980: LD_ADDR_VAR 0 9
37984: PUSH
37985: LD_INT 7
37987: PUSH
37988: LD_INT 25
37990: PUSH
37991: LD_INT 8
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: LIST
37998: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37999: LD_VAR 0 6
38003: PPUSH
38004: CALL_OW 264
38008: PUSH
38009: LD_INT 5
38011: PUSH
38012: LD_INT 27
38014: PUSH
38015: LD_INT 44
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: LIST
38022: IN
38023: IFFALSE 38044
// points := [ 14 , 50 , 16 ] ;
38025: LD_ADDR_VAR 0 9
38029: PUSH
38030: LD_INT 14
38032: PUSH
38033: LD_INT 50
38035: PUSH
38036: LD_INT 16
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: LIST
38043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38044: LD_VAR 0 6
38048: PPUSH
38049: CALL_OW 264
38053: PUSH
38054: LD_INT 6
38056: PUSH
38057: LD_INT 46
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: IN
38064: IFFALSE 38085
// points := [ 32 , 120 , 70 ] ;
38066: LD_ADDR_VAR 0 9
38070: PUSH
38071: LD_INT 32
38073: PUSH
38074: LD_INT 120
38076: PUSH
38077: LD_INT 70
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: LIST
38084: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38085: LD_VAR 0 6
38089: PPUSH
38090: CALL_OW 264
38094: PUSH
38095: LD_INT 7
38097: PUSH
38098: LD_INT 28
38100: PUSH
38101: LD_INT 45
38103: PUSH
38104: LD_EXP 51
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: IN
38115: IFFALSE 38136
// points := [ 35 , 20 , 45 ] ;
38117: LD_ADDR_VAR 0 9
38121: PUSH
38122: LD_INT 35
38124: PUSH
38125: LD_INT 20
38127: PUSH
38128: LD_INT 45
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: LIST
38135: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38136: LD_VAR 0 6
38140: PPUSH
38141: CALL_OW 264
38145: PUSH
38146: LD_INT 47
38148: PUSH
38149: EMPTY
38150: LIST
38151: IN
38152: IFFALSE 38173
// points := [ 67 , 45 , 75 ] ;
38154: LD_ADDR_VAR 0 9
38158: PUSH
38159: LD_INT 67
38161: PUSH
38162: LD_INT 45
38164: PUSH
38165: LD_INT 75
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: LIST
38172: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38173: LD_VAR 0 6
38177: PPUSH
38178: CALL_OW 264
38182: PUSH
38183: LD_INT 26
38185: PUSH
38186: EMPTY
38187: LIST
38188: IN
38189: IFFALSE 38210
// points := [ 120 , 30 , 80 ] ;
38191: LD_ADDR_VAR 0 9
38195: PUSH
38196: LD_INT 120
38198: PUSH
38199: LD_INT 30
38201: PUSH
38202: LD_INT 80
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: LIST
38209: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38210: LD_VAR 0 6
38214: PPUSH
38215: CALL_OW 264
38219: PUSH
38220: LD_INT 22
38222: PUSH
38223: EMPTY
38224: LIST
38225: IN
38226: IFFALSE 38247
// points := [ 40 , 1 , 1 ] ;
38228: LD_ADDR_VAR 0 9
38232: PUSH
38233: LD_INT 40
38235: PUSH
38236: LD_INT 1
38238: PUSH
38239: LD_INT 1
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: LIST
38246: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38247: LD_VAR 0 6
38251: PPUSH
38252: CALL_OW 264
38256: PUSH
38257: LD_INT 29
38259: PUSH
38260: EMPTY
38261: LIST
38262: IN
38263: IFFALSE 38284
// points := [ 70 , 200 , 400 ] ;
38265: LD_ADDR_VAR 0 9
38269: PUSH
38270: LD_INT 70
38272: PUSH
38273: LD_INT 200
38275: PUSH
38276: LD_INT 400
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: LIST
38283: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38284: LD_VAR 0 6
38288: PPUSH
38289: CALL_OW 264
38293: PUSH
38294: LD_INT 14
38296: PUSH
38297: LD_INT 53
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: IN
38304: IFFALSE 38325
// points := [ 40 , 10 , 20 ] ;
38306: LD_ADDR_VAR 0 9
38310: PUSH
38311: LD_INT 40
38313: PUSH
38314: LD_INT 10
38316: PUSH
38317: LD_INT 20
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: LIST
38324: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38325: LD_VAR 0 6
38329: PPUSH
38330: CALL_OW 264
38334: PUSH
38335: LD_INT 9
38337: PUSH
38338: EMPTY
38339: LIST
38340: IN
38341: IFFALSE 38362
// points := [ 5 , 70 , 20 ] ;
38343: LD_ADDR_VAR 0 9
38347: PUSH
38348: LD_INT 5
38350: PUSH
38351: LD_INT 70
38353: PUSH
38354: LD_INT 20
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: LIST
38361: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38362: LD_VAR 0 6
38366: PPUSH
38367: CALL_OW 264
38371: PUSH
38372: LD_INT 10
38374: PUSH
38375: EMPTY
38376: LIST
38377: IN
38378: IFFALSE 38399
// points := [ 35 , 110 , 70 ] ;
38380: LD_ADDR_VAR 0 9
38384: PUSH
38385: LD_INT 35
38387: PUSH
38388: LD_INT 110
38390: PUSH
38391: LD_INT 70
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: LIST
38398: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38399: LD_VAR 0 6
38403: PPUSH
38404: CALL_OW 265
38408: PUSH
38409: LD_INT 25
38411: EQUAL
38412: IFFALSE 38433
// points := [ 80 , 65 , 100 ] ;
38414: LD_ADDR_VAR 0 9
38418: PUSH
38419: LD_INT 80
38421: PUSH
38422: LD_INT 65
38424: PUSH
38425: LD_INT 100
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: LIST
38432: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38433: LD_VAR 0 6
38437: PPUSH
38438: CALL_OW 263
38442: PUSH
38443: LD_INT 1
38445: EQUAL
38446: IFFALSE 38481
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38448: LD_ADDR_VAR 0 10
38452: PUSH
38453: LD_VAR 0 10
38457: PUSH
38458: LD_VAR 0 6
38462: PPUSH
38463: CALL_OW 311
38467: PPUSH
38468: LD_INT 3
38470: PPUSH
38471: CALL_OW 259
38475: PUSH
38476: LD_INT 4
38478: MUL
38479: MUL
38480: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38481: LD_VAR 0 6
38485: PPUSH
38486: CALL_OW 263
38490: PUSH
38491: LD_INT 2
38493: EQUAL
38494: IFFALSE 38545
// begin j := IsControledBy ( i ) ;
38496: LD_ADDR_VAR 0 7
38500: PUSH
38501: LD_VAR 0 6
38505: PPUSH
38506: CALL_OW 312
38510: ST_TO_ADDR
// if j then
38511: LD_VAR 0 7
38515: IFFALSE 38545
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38517: LD_ADDR_VAR 0 10
38521: PUSH
38522: LD_VAR 0 10
38526: PUSH
38527: LD_VAR 0 7
38531: PPUSH
38532: LD_INT 3
38534: PPUSH
38535: CALL_OW 259
38539: PUSH
38540: LD_INT 3
38542: MUL
38543: MUL
38544: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38545: LD_VAR 0 6
38549: PPUSH
38550: CALL_OW 264
38554: PUSH
38555: LD_INT 5
38557: PUSH
38558: LD_INT 6
38560: PUSH
38561: LD_INT 46
38563: PUSH
38564: LD_INT 44
38566: PUSH
38567: LD_INT 47
38569: PUSH
38570: LD_INT 45
38572: PUSH
38573: LD_INT 28
38575: PUSH
38576: LD_INT 7
38578: PUSH
38579: LD_INT 27
38581: PUSH
38582: LD_INT 29
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: IN
38597: PUSH
38598: LD_VAR 0 1
38602: PPUSH
38603: LD_INT 52
38605: PPUSH
38606: CALL_OW 321
38610: PUSH
38611: LD_INT 2
38613: EQUAL
38614: AND
38615: IFFALSE 38632
// bpoints := bpoints * 1.2 ;
38617: LD_ADDR_VAR 0 10
38621: PUSH
38622: LD_VAR 0 10
38626: PUSH
38627: LD_REAL  1.20000000000000E+0000
38630: MUL
38631: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38632: LD_VAR 0 6
38636: PPUSH
38637: CALL_OW 264
38641: PUSH
38642: LD_INT 6
38644: PUSH
38645: LD_INT 46
38647: PUSH
38648: LD_INT 47
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: LIST
38655: IN
38656: IFFALSE 38673
// bpoints := bpoints * 1.2 ;
38658: LD_ADDR_VAR 0 10
38662: PUSH
38663: LD_VAR 0 10
38667: PUSH
38668: LD_REAL  1.20000000000000E+0000
38671: MUL
38672: ST_TO_ADDR
// end ; unit_building :
38673: GO 38687
38675: LD_INT 3
38677: DOUBLE
38678: EQUAL
38679: IFTRUE 38683
38681: GO 38686
38683: POP
// ; end ;
38684: GO 38687
38686: POP
// for j = 1 to 3 do
38687: LD_ADDR_VAR 0 7
38691: PUSH
38692: DOUBLE
38693: LD_INT 1
38695: DEC
38696: ST_TO_ADDR
38697: LD_INT 3
38699: PUSH
38700: FOR_TO
38701: IFFALSE 38754
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38703: LD_ADDR_VAR 0 5
38707: PUSH
38708: LD_VAR 0 5
38712: PPUSH
38713: LD_VAR 0 7
38717: PPUSH
38718: LD_VAR 0 5
38722: PUSH
38723: LD_VAR 0 7
38727: ARRAY
38728: PUSH
38729: LD_VAR 0 9
38733: PUSH
38734: LD_VAR 0 7
38738: ARRAY
38739: PUSH
38740: LD_VAR 0 10
38744: MUL
38745: PLUS
38746: PPUSH
38747: CALL_OW 1
38751: ST_TO_ADDR
38752: GO 38700
38754: POP
38755: POP
// end ;
38756: GO 37233
38758: POP
38759: POP
// result := Replace ( result , 4 , tmp ) ;
38760: LD_ADDR_VAR 0 5
38764: PUSH
38765: LD_VAR 0 5
38769: PPUSH
38770: LD_INT 4
38772: PPUSH
38773: LD_VAR 0 8
38777: PPUSH
38778: CALL_OW 1
38782: ST_TO_ADDR
// end ;
38783: LD_VAR 0 5
38787: RET
// export function DangerAtRange ( unit , range ) ; begin
38788: LD_INT 0
38790: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38791: LD_ADDR_VAR 0 3
38795: PUSH
38796: LD_VAR 0 1
38800: PPUSH
38801: CALL_OW 255
38805: PPUSH
38806: LD_VAR 0 1
38810: PPUSH
38811: CALL_OW 250
38815: PPUSH
38816: LD_VAR 0 1
38820: PPUSH
38821: CALL_OW 251
38825: PPUSH
38826: LD_VAR 0 2
38830: PPUSH
38831: CALL 37085 0 4
38835: ST_TO_ADDR
// end ;
38836: LD_VAR 0 3
38840: RET
// export function DangerInArea ( side , area ) ; begin
38841: LD_INT 0
38843: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38844: LD_ADDR_VAR 0 3
38848: PUSH
38849: LD_VAR 0 2
38853: PPUSH
38854: LD_INT 81
38856: PUSH
38857: LD_VAR 0 1
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PPUSH
38866: CALL_OW 70
38870: ST_TO_ADDR
// end ;
38871: LD_VAR 0 3
38875: RET
// export function IsExtension ( b ) ; begin
38876: LD_INT 0
38878: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38879: LD_ADDR_VAR 0 2
38883: PUSH
38884: LD_VAR 0 1
38888: PUSH
38889: LD_INT 23
38891: PUSH
38892: LD_INT 20
38894: PUSH
38895: LD_INT 22
38897: PUSH
38898: LD_INT 17
38900: PUSH
38901: LD_INT 24
38903: PUSH
38904: LD_INT 21
38906: PUSH
38907: LD_INT 19
38909: PUSH
38910: LD_INT 16
38912: PUSH
38913: LD_INT 25
38915: PUSH
38916: LD_INT 18
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: IN
38931: ST_TO_ADDR
// end ;
38932: LD_VAR 0 2
38936: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38937: LD_INT 0
38939: PPUSH
38940: PPUSH
38941: PPUSH
// result := [ ] ;
38942: LD_ADDR_VAR 0 4
38946: PUSH
38947: EMPTY
38948: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38949: LD_ADDR_VAR 0 5
38953: PUSH
38954: LD_VAR 0 2
38958: PPUSH
38959: LD_INT 21
38961: PUSH
38962: LD_INT 3
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PPUSH
38969: CALL_OW 70
38973: ST_TO_ADDR
// if not tmp then
38974: LD_VAR 0 5
38978: NOT
38979: IFFALSE 38983
// exit ;
38981: GO 39047
// if checkLink then
38983: LD_VAR 0 3
38987: IFFALSE 39037
// begin for i in tmp do
38989: LD_ADDR_VAR 0 6
38993: PUSH
38994: LD_VAR 0 5
38998: PUSH
38999: FOR_IN
39000: IFFALSE 39035
// if GetBase ( i ) <> base then
39002: LD_VAR 0 6
39006: PPUSH
39007: CALL_OW 274
39011: PUSH
39012: LD_VAR 0 1
39016: NONEQUAL
39017: IFFALSE 39033
// ComLinkToBase ( base , i ) ;
39019: LD_VAR 0 1
39023: PPUSH
39024: LD_VAR 0 6
39028: PPUSH
39029: CALL_OW 169
39033: GO 38999
39035: POP
39036: POP
// end ; result := tmp ;
39037: LD_ADDR_VAR 0 4
39041: PUSH
39042: LD_VAR 0 5
39046: ST_TO_ADDR
// end ;
39047: LD_VAR 0 4
39051: RET
// export function ComComplete ( units , b ) ; var i ; begin
39052: LD_INT 0
39054: PPUSH
39055: PPUSH
// if not units then
39056: LD_VAR 0 1
39060: NOT
39061: IFFALSE 39065
// exit ;
39063: GO 39155
// for i in units do
39065: LD_ADDR_VAR 0 4
39069: PUSH
39070: LD_VAR 0 1
39074: PUSH
39075: FOR_IN
39076: IFFALSE 39153
// if BuildingStatus ( b ) = bs_build then
39078: LD_VAR 0 2
39082: PPUSH
39083: CALL_OW 461
39087: PUSH
39088: LD_INT 1
39090: EQUAL
39091: IFFALSE 39151
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39093: LD_VAR 0 4
39097: PPUSH
39098: LD_STRING h
39100: PUSH
39101: LD_VAR 0 2
39105: PPUSH
39106: CALL_OW 250
39110: PUSH
39111: LD_VAR 0 2
39115: PPUSH
39116: CALL_OW 251
39120: PUSH
39121: LD_VAR 0 2
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: LD_INT 0
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: PUSH
39144: EMPTY
39145: LIST
39146: PPUSH
39147: CALL_OW 446
39151: GO 39075
39153: POP
39154: POP
// end ;
39155: LD_VAR 0 3
39159: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39160: LD_INT 0
39162: PPUSH
39163: PPUSH
39164: PPUSH
39165: PPUSH
39166: PPUSH
39167: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39168: LD_VAR 0 1
39172: NOT
39173: PUSH
39174: LD_VAR 0 1
39178: PPUSH
39179: CALL_OW 263
39183: PUSH
39184: LD_INT 2
39186: NONEQUAL
39187: OR
39188: IFFALSE 39192
// exit ;
39190: GO 39508
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39192: LD_ADDR_VAR 0 6
39196: PUSH
39197: LD_INT 22
39199: PUSH
39200: LD_VAR 0 1
39204: PPUSH
39205: CALL_OW 255
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 2
39216: PUSH
39217: LD_INT 30
39219: PUSH
39220: LD_INT 36
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 34
39229: PUSH
39230: LD_INT 31
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: LIST
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PPUSH
39246: CALL_OW 69
39250: ST_TO_ADDR
// if not tmp then
39251: LD_VAR 0 6
39255: NOT
39256: IFFALSE 39260
// exit ;
39258: GO 39508
// result := [ ] ;
39260: LD_ADDR_VAR 0 2
39264: PUSH
39265: EMPTY
39266: ST_TO_ADDR
// for i in tmp do
39267: LD_ADDR_VAR 0 3
39271: PUSH
39272: LD_VAR 0 6
39276: PUSH
39277: FOR_IN
39278: IFFALSE 39349
// begin t := UnitsInside ( i ) ;
39280: LD_ADDR_VAR 0 4
39284: PUSH
39285: LD_VAR 0 3
39289: PPUSH
39290: CALL_OW 313
39294: ST_TO_ADDR
// if t then
39295: LD_VAR 0 4
39299: IFFALSE 39347
// for j in t do
39301: LD_ADDR_VAR 0 7
39305: PUSH
39306: LD_VAR 0 4
39310: PUSH
39311: FOR_IN
39312: IFFALSE 39345
// result := Replace ( result , result + 1 , j ) ;
39314: LD_ADDR_VAR 0 2
39318: PUSH
39319: LD_VAR 0 2
39323: PPUSH
39324: LD_VAR 0 2
39328: PUSH
39329: LD_INT 1
39331: PLUS
39332: PPUSH
39333: LD_VAR 0 7
39337: PPUSH
39338: CALL_OW 1
39342: ST_TO_ADDR
39343: GO 39311
39345: POP
39346: POP
// end ;
39347: GO 39277
39349: POP
39350: POP
// if not result then
39351: LD_VAR 0 2
39355: NOT
39356: IFFALSE 39360
// exit ;
39358: GO 39508
// mech := result [ 1 ] ;
39360: LD_ADDR_VAR 0 5
39364: PUSH
39365: LD_VAR 0 2
39369: PUSH
39370: LD_INT 1
39372: ARRAY
39373: ST_TO_ADDR
// if result > 1 then
39374: LD_VAR 0 2
39378: PUSH
39379: LD_INT 1
39381: GREATER
39382: IFFALSE 39494
// begin for i = 2 to result do
39384: LD_ADDR_VAR 0 3
39388: PUSH
39389: DOUBLE
39390: LD_INT 2
39392: DEC
39393: ST_TO_ADDR
39394: LD_VAR 0 2
39398: PUSH
39399: FOR_TO
39400: IFFALSE 39492
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39402: LD_ADDR_VAR 0 4
39406: PUSH
39407: LD_VAR 0 2
39411: PUSH
39412: LD_VAR 0 3
39416: ARRAY
39417: PPUSH
39418: LD_INT 3
39420: PPUSH
39421: CALL_OW 259
39425: PUSH
39426: LD_VAR 0 2
39430: PUSH
39431: LD_VAR 0 3
39435: ARRAY
39436: PPUSH
39437: CALL_OW 432
39441: MINUS
39442: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39443: LD_VAR 0 4
39447: PUSH
39448: LD_VAR 0 5
39452: PPUSH
39453: LD_INT 3
39455: PPUSH
39456: CALL_OW 259
39460: PUSH
39461: LD_VAR 0 5
39465: PPUSH
39466: CALL_OW 432
39470: MINUS
39471: GREATEREQUAL
39472: IFFALSE 39490
// mech := result [ i ] ;
39474: LD_ADDR_VAR 0 5
39478: PUSH
39479: LD_VAR 0 2
39483: PUSH
39484: LD_VAR 0 3
39488: ARRAY
39489: ST_TO_ADDR
// end ;
39490: GO 39399
39492: POP
39493: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39494: LD_VAR 0 1
39498: PPUSH
39499: LD_VAR 0 5
39503: PPUSH
39504: CALL_OW 135
// end ;
39508: LD_VAR 0 2
39512: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39513: LD_INT 0
39515: PPUSH
39516: PPUSH
39517: PPUSH
39518: PPUSH
39519: PPUSH
39520: PPUSH
39521: PPUSH
39522: PPUSH
39523: PPUSH
39524: PPUSH
39525: PPUSH
39526: PPUSH
39527: PPUSH
// result := [ ] ;
39528: LD_ADDR_VAR 0 7
39532: PUSH
39533: EMPTY
39534: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39535: LD_VAR 0 1
39539: PPUSH
39540: CALL_OW 266
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: LD_INT 1
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: IN
39555: NOT
39556: IFFALSE 39560
// exit ;
39558: GO 41194
// if name then
39560: LD_VAR 0 3
39564: IFFALSE 39580
// SetBName ( base_dep , name ) ;
39566: LD_VAR 0 1
39570: PPUSH
39571: LD_VAR 0 3
39575: PPUSH
39576: CALL_OW 500
// base := GetBase ( base_dep ) ;
39580: LD_ADDR_VAR 0 15
39584: PUSH
39585: LD_VAR 0 1
39589: PPUSH
39590: CALL_OW 274
39594: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39595: LD_ADDR_VAR 0 16
39599: PUSH
39600: LD_VAR 0 1
39604: PPUSH
39605: CALL_OW 255
39609: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39610: LD_ADDR_VAR 0 17
39614: PUSH
39615: LD_VAR 0 1
39619: PPUSH
39620: CALL_OW 248
39624: ST_TO_ADDR
// if sources then
39625: LD_VAR 0 5
39629: IFFALSE 39676
// for i = 1 to 3 do
39631: LD_ADDR_VAR 0 8
39635: PUSH
39636: DOUBLE
39637: LD_INT 1
39639: DEC
39640: ST_TO_ADDR
39641: LD_INT 3
39643: PUSH
39644: FOR_TO
39645: IFFALSE 39674
// AddResourceType ( base , i , sources [ i ] ) ;
39647: LD_VAR 0 15
39651: PPUSH
39652: LD_VAR 0 8
39656: PPUSH
39657: LD_VAR 0 5
39661: PUSH
39662: LD_VAR 0 8
39666: ARRAY
39667: PPUSH
39668: CALL_OW 276
39672: GO 39644
39674: POP
39675: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39676: LD_ADDR_VAR 0 18
39680: PUSH
39681: LD_VAR 0 15
39685: PPUSH
39686: LD_VAR 0 2
39690: PPUSH
39691: LD_INT 1
39693: PPUSH
39694: CALL 38937 0 3
39698: ST_TO_ADDR
// InitHc ;
39699: CALL_OW 19
// InitUc ;
39703: CALL_OW 18
// uc_side := side ;
39707: LD_ADDR_OWVAR 20
39711: PUSH
39712: LD_VAR 0 16
39716: ST_TO_ADDR
// uc_nation := nation ;
39717: LD_ADDR_OWVAR 21
39721: PUSH
39722: LD_VAR 0 17
39726: ST_TO_ADDR
// if buildings then
39727: LD_VAR 0 18
39731: IFFALSE 41053
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39733: LD_ADDR_VAR 0 19
39737: PUSH
39738: LD_VAR 0 18
39742: PPUSH
39743: LD_INT 2
39745: PUSH
39746: LD_INT 30
39748: PUSH
39749: LD_INT 29
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 30
39758: PUSH
39759: LD_INT 30
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: LIST
39770: PPUSH
39771: CALL_OW 72
39775: ST_TO_ADDR
// if tmp then
39776: LD_VAR 0 19
39780: IFFALSE 39828
// for i in tmp do
39782: LD_ADDR_VAR 0 8
39786: PUSH
39787: LD_VAR 0 19
39791: PUSH
39792: FOR_IN
39793: IFFALSE 39826
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39795: LD_VAR 0 8
39799: PPUSH
39800: CALL_OW 250
39804: PPUSH
39805: LD_VAR 0 8
39809: PPUSH
39810: CALL_OW 251
39814: PPUSH
39815: LD_VAR 0 16
39819: PPUSH
39820: CALL_OW 441
39824: GO 39792
39826: POP
39827: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39828: LD_VAR 0 18
39832: PPUSH
39833: LD_INT 2
39835: PUSH
39836: LD_INT 30
39838: PUSH
39839: LD_INT 32
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 30
39848: PUSH
39849: LD_INT 33
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: LIST
39860: PPUSH
39861: CALL_OW 72
39865: IFFALSE 39953
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39867: LD_ADDR_VAR 0 8
39871: PUSH
39872: LD_VAR 0 18
39876: PPUSH
39877: LD_INT 2
39879: PUSH
39880: LD_INT 30
39882: PUSH
39883: LD_INT 32
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 30
39892: PUSH
39893: LD_INT 33
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: LIST
39904: PPUSH
39905: CALL_OW 72
39909: PUSH
39910: FOR_IN
39911: IFFALSE 39951
// begin if not GetBWeapon ( i ) then
39913: LD_VAR 0 8
39917: PPUSH
39918: CALL_OW 269
39922: NOT
39923: IFFALSE 39949
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39925: LD_VAR 0 8
39929: PPUSH
39930: LD_VAR 0 8
39934: PPUSH
39935: LD_VAR 0 2
39939: PPUSH
39940: CALL 41199 0 2
39944: PPUSH
39945: CALL_OW 431
// end ;
39949: GO 39910
39951: POP
39952: POP
// end ; for i = 1 to personel do
39953: LD_ADDR_VAR 0 8
39957: PUSH
39958: DOUBLE
39959: LD_INT 1
39961: DEC
39962: ST_TO_ADDR
39963: LD_VAR 0 6
39967: PUSH
39968: FOR_TO
39969: IFFALSE 41033
// begin if i > 4 then
39971: LD_VAR 0 8
39975: PUSH
39976: LD_INT 4
39978: GREATER
39979: IFFALSE 39983
// break ;
39981: GO 41033
// case i of 1 :
39983: LD_VAR 0 8
39987: PUSH
39988: LD_INT 1
39990: DOUBLE
39991: EQUAL
39992: IFTRUE 39996
39994: GO 40076
39996: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39997: LD_ADDR_VAR 0 12
40001: PUSH
40002: LD_VAR 0 18
40006: PPUSH
40007: LD_INT 22
40009: PUSH
40010: LD_VAR 0 16
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 58
40021: PUSH
40022: EMPTY
40023: LIST
40024: PUSH
40025: LD_INT 2
40027: PUSH
40028: LD_INT 30
40030: PUSH
40031: LD_INT 32
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 30
40040: PUSH
40041: LD_INT 4
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 30
40050: PUSH
40051: LD_INT 5
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: LIST
40068: PPUSH
40069: CALL_OW 72
40073: ST_TO_ADDR
40074: GO 40298
40076: LD_INT 2
40078: DOUBLE
40079: EQUAL
40080: IFTRUE 40084
40082: GO 40146
40084: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40085: LD_ADDR_VAR 0 12
40089: PUSH
40090: LD_VAR 0 18
40094: PPUSH
40095: LD_INT 22
40097: PUSH
40098: LD_VAR 0 16
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 2
40109: PUSH
40110: LD_INT 30
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 30
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: LIST
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PPUSH
40139: CALL_OW 72
40143: ST_TO_ADDR
40144: GO 40298
40146: LD_INT 3
40148: DOUBLE
40149: EQUAL
40150: IFTRUE 40154
40152: GO 40216
40154: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40155: LD_ADDR_VAR 0 12
40159: PUSH
40160: LD_VAR 0 18
40164: PPUSH
40165: LD_INT 22
40167: PUSH
40168: LD_VAR 0 16
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: LD_INT 30
40182: PUSH
40183: LD_INT 2
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 30
40192: PUSH
40193: LD_INT 3
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: LIST
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PPUSH
40209: CALL_OW 72
40213: ST_TO_ADDR
40214: GO 40298
40216: LD_INT 4
40218: DOUBLE
40219: EQUAL
40220: IFTRUE 40224
40222: GO 40297
40224: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40225: LD_ADDR_VAR 0 12
40229: PUSH
40230: LD_VAR 0 18
40234: PPUSH
40235: LD_INT 22
40237: PUSH
40238: LD_VAR 0 16
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 2
40249: PUSH
40250: LD_INT 30
40252: PUSH
40253: LD_INT 6
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 30
40262: PUSH
40263: LD_INT 7
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 30
40272: PUSH
40273: LD_INT 8
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PPUSH
40290: CALL_OW 72
40294: ST_TO_ADDR
40295: GO 40298
40297: POP
// if i = 1 then
40298: LD_VAR 0 8
40302: PUSH
40303: LD_INT 1
40305: EQUAL
40306: IFFALSE 40417
// begin tmp := [ ] ;
40308: LD_ADDR_VAR 0 19
40312: PUSH
40313: EMPTY
40314: ST_TO_ADDR
// for j in f do
40315: LD_ADDR_VAR 0 9
40319: PUSH
40320: LD_VAR 0 12
40324: PUSH
40325: FOR_IN
40326: IFFALSE 40399
// if GetBType ( j ) = b_bunker then
40328: LD_VAR 0 9
40332: PPUSH
40333: CALL_OW 266
40337: PUSH
40338: LD_INT 32
40340: EQUAL
40341: IFFALSE 40368
// tmp := Insert ( tmp , 1 , j ) else
40343: LD_ADDR_VAR 0 19
40347: PUSH
40348: LD_VAR 0 19
40352: PPUSH
40353: LD_INT 1
40355: PPUSH
40356: LD_VAR 0 9
40360: PPUSH
40361: CALL_OW 2
40365: ST_TO_ADDR
40366: GO 40397
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40368: LD_ADDR_VAR 0 19
40372: PUSH
40373: LD_VAR 0 19
40377: PPUSH
40378: LD_VAR 0 19
40382: PUSH
40383: LD_INT 1
40385: PLUS
40386: PPUSH
40387: LD_VAR 0 9
40391: PPUSH
40392: CALL_OW 2
40396: ST_TO_ADDR
40397: GO 40325
40399: POP
40400: POP
// if tmp then
40401: LD_VAR 0 19
40405: IFFALSE 40417
// f := tmp ;
40407: LD_ADDR_VAR 0 12
40411: PUSH
40412: LD_VAR 0 19
40416: ST_TO_ADDR
// end ; x := personel [ i ] ;
40417: LD_ADDR_VAR 0 13
40421: PUSH
40422: LD_VAR 0 6
40426: PUSH
40427: LD_VAR 0 8
40431: ARRAY
40432: ST_TO_ADDR
// if x = - 1 then
40433: LD_VAR 0 13
40437: PUSH
40438: LD_INT 1
40440: NEG
40441: EQUAL
40442: IFFALSE 40651
// begin for j in f do
40444: LD_ADDR_VAR 0 9
40448: PUSH
40449: LD_VAR 0 12
40453: PUSH
40454: FOR_IN
40455: IFFALSE 40647
// repeat InitHc ;
40457: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40461: LD_VAR 0 9
40465: PPUSH
40466: CALL_OW 266
40470: PUSH
40471: LD_INT 5
40473: EQUAL
40474: IFFALSE 40544
// begin if UnitsInside ( j ) < 3 then
40476: LD_VAR 0 9
40480: PPUSH
40481: CALL_OW 313
40485: PUSH
40486: LD_INT 3
40488: LESS
40489: IFFALSE 40525
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40491: LD_INT 0
40493: PPUSH
40494: LD_INT 5
40496: PUSH
40497: LD_INT 8
40499: PUSH
40500: LD_INT 9
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: LIST
40507: PUSH
40508: LD_VAR 0 17
40512: ARRAY
40513: PPUSH
40514: LD_VAR 0 4
40518: PPUSH
40519: CALL_OW 380
40523: GO 40542
// PrepareHuman ( false , i , skill ) ;
40525: LD_INT 0
40527: PPUSH
40528: LD_VAR 0 8
40532: PPUSH
40533: LD_VAR 0 4
40537: PPUSH
40538: CALL_OW 380
// end else
40542: GO 40561
// PrepareHuman ( false , i , skill ) ;
40544: LD_INT 0
40546: PPUSH
40547: LD_VAR 0 8
40551: PPUSH
40552: LD_VAR 0 4
40556: PPUSH
40557: CALL_OW 380
// un := CreateHuman ;
40561: LD_ADDR_VAR 0 14
40565: PUSH
40566: CALL_OW 44
40570: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40571: LD_ADDR_VAR 0 7
40575: PUSH
40576: LD_VAR 0 7
40580: PPUSH
40581: LD_INT 1
40583: PPUSH
40584: LD_VAR 0 14
40588: PPUSH
40589: CALL_OW 2
40593: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40594: LD_VAR 0 14
40598: PPUSH
40599: LD_VAR 0 9
40603: PPUSH
40604: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40608: LD_VAR 0 9
40612: PPUSH
40613: CALL_OW 313
40617: PUSH
40618: LD_INT 6
40620: EQUAL
40621: PUSH
40622: LD_VAR 0 9
40626: PPUSH
40627: CALL_OW 266
40631: PUSH
40632: LD_INT 32
40634: PUSH
40635: LD_INT 31
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: IN
40642: OR
40643: IFFALSE 40457
40645: GO 40454
40647: POP
40648: POP
// end else
40649: GO 41031
// for j = 1 to x do
40651: LD_ADDR_VAR 0 9
40655: PUSH
40656: DOUBLE
40657: LD_INT 1
40659: DEC
40660: ST_TO_ADDR
40661: LD_VAR 0 13
40665: PUSH
40666: FOR_TO
40667: IFFALSE 41029
// begin InitHc ;
40669: CALL_OW 19
// if not f then
40673: LD_VAR 0 12
40677: NOT
40678: IFFALSE 40767
// begin PrepareHuman ( false , i , skill ) ;
40680: LD_INT 0
40682: PPUSH
40683: LD_VAR 0 8
40687: PPUSH
40688: LD_VAR 0 4
40692: PPUSH
40693: CALL_OW 380
// un := CreateHuman ;
40697: LD_ADDR_VAR 0 14
40701: PUSH
40702: CALL_OW 44
40706: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40707: LD_ADDR_VAR 0 7
40711: PUSH
40712: LD_VAR 0 7
40716: PPUSH
40717: LD_INT 1
40719: PPUSH
40720: LD_VAR 0 14
40724: PPUSH
40725: CALL_OW 2
40729: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40730: LD_VAR 0 14
40734: PPUSH
40735: LD_VAR 0 1
40739: PPUSH
40740: CALL_OW 250
40744: PPUSH
40745: LD_VAR 0 1
40749: PPUSH
40750: CALL_OW 251
40754: PPUSH
40755: LD_INT 10
40757: PPUSH
40758: LD_INT 0
40760: PPUSH
40761: CALL_OW 50
// continue ;
40765: GO 40666
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40767: LD_VAR 0 12
40771: PUSH
40772: LD_INT 1
40774: ARRAY
40775: PPUSH
40776: CALL_OW 313
40780: PUSH
40781: LD_VAR 0 12
40785: PUSH
40786: LD_INT 1
40788: ARRAY
40789: PPUSH
40790: CALL_OW 266
40794: PUSH
40795: LD_INT 32
40797: PUSH
40798: LD_INT 31
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: IN
40805: AND
40806: PUSH
40807: LD_VAR 0 12
40811: PUSH
40812: LD_INT 1
40814: ARRAY
40815: PPUSH
40816: CALL_OW 313
40820: PUSH
40821: LD_INT 6
40823: EQUAL
40824: OR
40825: IFFALSE 40845
// f := Delete ( f , 1 ) ;
40827: LD_ADDR_VAR 0 12
40831: PUSH
40832: LD_VAR 0 12
40836: PPUSH
40837: LD_INT 1
40839: PPUSH
40840: CALL_OW 3
40844: ST_TO_ADDR
// if not f then
40845: LD_VAR 0 12
40849: NOT
40850: IFFALSE 40868
// begin x := x + 2 ;
40852: LD_ADDR_VAR 0 13
40856: PUSH
40857: LD_VAR 0 13
40861: PUSH
40862: LD_INT 2
40864: PLUS
40865: ST_TO_ADDR
// continue ;
40866: GO 40666
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40868: LD_VAR 0 12
40872: PUSH
40873: LD_INT 1
40875: ARRAY
40876: PPUSH
40877: CALL_OW 266
40881: PUSH
40882: LD_INT 5
40884: EQUAL
40885: IFFALSE 40959
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40887: LD_VAR 0 12
40891: PUSH
40892: LD_INT 1
40894: ARRAY
40895: PPUSH
40896: CALL_OW 313
40900: PUSH
40901: LD_INT 3
40903: LESS
40904: IFFALSE 40940
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40906: LD_INT 0
40908: PPUSH
40909: LD_INT 5
40911: PUSH
40912: LD_INT 8
40914: PUSH
40915: LD_INT 9
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: LIST
40922: PUSH
40923: LD_VAR 0 17
40927: ARRAY
40928: PPUSH
40929: LD_VAR 0 4
40933: PPUSH
40934: CALL_OW 380
40938: GO 40957
// PrepareHuman ( false , i , skill ) ;
40940: LD_INT 0
40942: PPUSH
40943: LD_VAR 0 8
40947: PPUSH
40948: LD_VAR 0 4
40952: PPUSH
40953: CALL_OW 380
// end else
40957: GO 40976
// PrepareHuman ( false , i , skill ) ;
40959: LD_INT 0
40961: PPUSH
40962: LD_VAR 0 8
40966: PPUSH
40967: LD_VAR 0 4
40971: PPUSH
40972: CALL_OW 380
// un := CreateHuman ;
40976: LD_ADDR_VAR 0 14
40980: PUSH
40981: CALL_OW 44
40985: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40986: LD_ADDR_VAR 0 7
40990: PUSH
40991: LD_VAR 0 7
40995: PPUSH
40996: LD_INT 1
40998: PPUSH
40999: LD_VAR 0 14
41003: PPUSH
41004: CALL_OW 2
41008: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41009: LD_VAR 0 14
41013: PPUSH
41014: LD_VAR 0 12
41018: PUSH
41019: LD_INT 1
41021: ARRAY
41022: PPUSH
41023: CALL_OW 52
// end ;
41027: GO 40666
41029: POP
41030: POP
// end ;
41031: GO 39968
41033: POP
41034: POP
// result := result ^ buildings ;
41035: LD_ADDR_VAR 0 7
41039: PUSH
41040: LD_VAR 0 7
41044: PUSH
41045: LD_VAR 0 18
41049: ADD
41050: ST_TO_ADDR
// end else
41051: GO 41194
// begin for i = 1 to personel do
41053: LD_ADDR_VAR 0 8
41057: PUSH
41058: DOUBLE
41059: LD_INT 1
41061: DEC
41062: ST_TO_ADDR
41063: LD_VAR 0 6
41067: PUSH
41068: FOR_TO
41069: IFFALSE 41192
// begin if i > 4 then
41071: LD_VAR 0 8
41075: PUSH
41076: LD_INT 4
41078: GREATER
41079: IFFALSE 41083
// break ;
41081: GO 41192
// x := personel [ i ] ;
41083: LD_ADDR_VAR 0 13
41087: PUSH
41088: LD_VAR 0 6
41092: PUSH
41093: LD_VAR 0 8
41097: ARRAY
41098: ST_TO_ADDR
// if x = - 1 then
41099: LD_VAR 0 13
41103: PUSH
41104: LD_INT 1
41106: NEG
41107: EQUAL
41108: IFFALSE 41112
// continue ;
41110: GO 41068
// PrepareHuman ( false , i , skill ) ;
41112: LD_INT 0
41114: PPUSH
41115: LD_VAR 0 8
41119: PPUSH
41120: LD_VAR 0 4
41124: PPUSH
41125: CALL_OW 380
// un := CreateHuman ;
41129: LD_ADDR_VAR 0 14
41133: PUSH
41134: CALL_OW 44
41138: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41139: LD_VAR 0 14
41143: PPUSH
41144: LD_VAR 0 1
41148: PPUSH
41149: CALL_OW 250
41153: PPUSH
41154: LD_VAR 0 1
41158: PPUSH
41159: CALL_OW 251
41163: PPUSH
41164: LD_INT 10
41166: PPUSH
41167: LD_INT 0
41169: PPUSH
41170: CALL_OW 50
// result := result ^ un ;
41174: LD_ADDR_VAR 0 7
41178: PUSH
41179: LD_VAR 0 7
41183: PUSH
41184: LD_VAR 0 14
41188: ADD
41189: ST_TO_ADDR
// end ;
41190: GO 41068
41192: POP
41193: POP
// end ; end ;
41194: LD_VAR 0 7
41198: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41199: LD_INT 0
41201: PPUSH
41202: PPUSH
41203: PPUSH
41204: PPUSH
41205: PPUSH
41206: PPUSH
41207: PPUSH
41208: PPUSH
41209: PPUSH
41210: PPUSH
41211: PPUSH
41212: PPUSH
41213: PPUSH
41214: PPUSH
41215: PPUSH
41216: PPUSH
// result := false ;
41217: LD_ADDR_VAR 0 3
41221: PUSH
41222: LD_INT 0
41224: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41225: LD_VAR 0 1
41229: NOT
41230: PUSH
41231: LD_VAR 0 1
41235: PPUSH
41236: CALL_OW 266
41240: PUSH
41241: LD_INT 32
41243: PUSH
41244: LD_INT 33
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: IN
41251: NOT
41252: OR
41253: IFFALSE 41257
// exit ;
41255: GO 42366
// nat := GetNation ( tower ) ;
41257: LD_ADDR_VAR 0 12
41261: PUSH
41262: LD_VAR 0 1
41266: PPUSH
41267: CALL_OW 248
41271: ST_TO_ADDR
// side := GetSide ( tower ) ;
41272: LD_ADDR_VAR 0 16
41276: PUSH
41277: LD_VAR 0 1
41281: PPUSH
41282: CALL_OW 255
41286: ST_TO_ADDR
// x := GetX ( tower ) ;
41287: LD_ADDR_VAR 0 10
41291: PUSH
41292: LD_VAR 0 1
41296: PPUSH
41297: CALL_OW 250
41301: ST_TO_ADDR
// y := GetY ( tower ) ;
41302: LD_ADDR_VAR 0 11
41306: PUSH
41307: LD_VAR 0 1
41311: PPUSH
41312: CALL_OW 251
41316: ST_TO_ADDR
// if not x or not y then
41317: LD_VAR 0 10
41321: NOT
41322: PUSH
41323: LD_VAR 0 11
41327: NOT
41328: OR
41329: IFFALSE 41333
// exit ;
41331: GO 42366
// weapon := 0 ;
41333: LD_ADDR_VAR 0 18
41337: PUSH
41338: LD_INT 0
41340: ST_TO_ADDR
// fac_list := [ ] ;
41341: LD_ADDR_VAR 0 17
41345: PUSH
41346: EMPTY
41347: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41348: LD_ADDR_VAR 0 6
41352: PUSH
41353: LD_VAR 0 1
41357: PPUSH
41358: CALL_OW 274
41362: PPUSH
41363: LD_VAR 0 2
41367: PPUSH
41368: LD_INT 0
41370: PPUSH
41371: CALL 38937 0 3
41375: PPUSH
41376: LD_INT 30
41378: PUSH
41379: LD_INT 3
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PPUSH
41386: CALL_OW 72
41390: ST_TO_ADDR
// if not factories then
41391: LD_VAR 0 6
41395: NOT
41396: IFFALSE 41400
// exit ;
41398: GO 42366
// for i in factories do
41400: LD_ADDR_VAR 0 8
41404: PUSH
41405: LD_VAR 0 6
41409: PUSH
41410: FOR_IN
41411: IFFALSE 41436
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41413: LD_ADDR_VAR 0 17
41417: PUSH
41418: LD_VAR 0 17
41422: PUSH
41423: LD_VAR 0 8
41427: PPUSH
41428: CALL_OW 478
41432: UNION
41433: ST_TO_ADDR
41434: GO 41410
41436: POP
41437: POP
// if not fac_list then
41438: LD_VAR 0 17
41442: NOT
41443: IFFALSE 41447
// exit ;
41445: GO 42366
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41447: LD_ADDR_VAR 0 5
41451: PUSH
41452: LD_INT 4
41454: PUSH
41455: LD_INT 5
41457: PUSH
41458: LD_INT 9
41460: PUSH
41461: LD_INT 10
41463: PUSH
41464: LD_INT 6
41466: PUSH
41467: LD_INT 7
41469: PUSH
41470: LD_INT 11
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 27
41484: PUSH
41485: LD_INT 28
41487: PUSH
41488: LD_INT 26
41490: PUSH
41491: LD_INT 30
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 43
41502: PUSH
41503: LD_INT 44
41505: PUSH
41506: LD_INT 46
41508: PUSH
41509: LD_INT 45
41511: PUSH
41512: LD_INT 47
41514: PUSH
41515: LD_INT 49
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: LIST
41530: PUSH
41531: LD_VAR 0 12
41535: ARRAY
41536: ST_TO_ADDR
// list := list isect fac_list ;
41537: LD_ADDR_VAR 0 5
41541: PUSH
41542: LD_VAR 0 5
41546: PUSH
41547: LD_VAR 0 17
41551: ISECT
41552: ST_TO_ADDR
// if not list then
41553: LD_VAR 0 5
41557: NOT
41558: IFFALSE 41562
// exit ;
41560: GO 42366
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41562: LD_VAR 0 12
41566: PUSH
41567: LD_INT 3
41569: EQUAL
41570: PUSH
41571: LD_INT 49
41573: PUSH
41574: LD_VAR 0 5
41578: IN
41579: AND
41580: PUSH
41581: LD_INT 31
41583: PPUSH
41584: LD_VAR 0 16
41588: PPUSH
41589: CALL_OW 321
41593: PUSH
41594: LD_INT 2
41596: EQUAL
41597: AND
41598: IFFALSE 41658
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41600: LD_INT 22
41602: PUSH
41603: LD_VAR 0 16
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 35
41614: PUSH
41615: LD_INT 49
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 91
41624: PUSH
41625: LD_VAR 0 1
41629: PUSH
41630: LD_INT 10
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: LIST
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: LIST
41642: PPUSH
41643: CALL_OW 69
41647: NOT
41648: IFFALSE 41658
// weapon := ru_time_lapser ;
41650: LD_ADDR_VAR 0 18
41654: PUSH
41655: LD_INT 49
41657: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41658: LD_VAR 0 12
41662: PUSH
41663: LD_INT 1
41665: PUSH
41666: LD_INT 2
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: IN
41673: PUSH
41674: LD_INT 11
41676: PUSH
41677: LD_VAR 0 5
41681: IN
41682: PUSH
41683: LD_INT 30
41685: PUSH
41686: LD_VAR 0 5
41690: IN
41691: OR
41692: AND
41693: PUSH
41694: LD_INT 6
41696: PPUSH
41697: LD_VAR 0 16
41701: PPUSH
41702: CALL_OW 321
41706: PUSH
41707: LD_INT 2
41709: EQUAL
41710: AND
41711: IFFALSE 41876
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41713: LD_INT 22
41715: PUSH
41716: LD_VAR 0 16
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 2
41727: PUSH
41728: LD_INT 35
41730: PUSH
41731: LD_INT 11
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 35
41740: PUSH
41741: LD_INT 30
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 91
41755: PUSH
41756: LD_VAR 0 1
41760: PUSH
41761: LD_INT 18
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: LIST
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: LIST
41773: PPUSH
41774: CALL_OW 69
41778: NOT
41779: PUSH
41780: LD_INT 22
41782: PUSH
41783: LD_VAR 0 16
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 2
41794: PUSH
41795: LD_INT 30
41797: PUSH
41798: LD_INT 32
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 30
41807: PUSH
41808: LD_INT 33
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 91
41822: PUSH
41823: LD_VAR 0 1
41827: PUSH
41828: LD_INT 12
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: LIST
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: LIST
41840: PUSH
41841: EMPTY
41842: LIST
41843: PPUSH
41844: CALL_OW 69
41848: PUSH
41849: LD_INT 2
41851: GREATER
41852: AND
41853: IFFALSE 41876
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41855: LD_ADDR_VAR 0 18
41859: PUSH
41860: LD_INT 11
41862: PUSH
41863: LD_INT 30
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_VAR 0 12
41874: ARRAY
41875: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41876: LD_VAR 0 18
41880: NOT
41881: PUSH
41882: LD_INT 40
41884: PPUSH
41885: LD_VAR 0 16
41889: PPUSH
41890: CALL_OW 321
41894: PUSH
41895: LD_INT 2
41897: EQUAL
41898: AND
41899: PUSH
41900: LD_INT 7
41902: PUSH
41903: LD_VAR 0 5
41907: IN
41908: PUSH
41909: LD_INT 28
41911: PUSH
41912: LD_VAR 0 5
41916: IN
41917: OR
41918: PUSH
41919: LD_INT 45
41921: PUSH
41922: LD_VAR 0 5
41926: IN
41927: OR
41928: AND
41929: IFFALSE 42183
// begin hex := GetHexInfo ( x , y ) ;
41931: LD_ADDR_VAR 0 4
41935: PUSH
41936: LD_VAR 0 10
41940: PPUSH
41941: LD_VAR 0 11
41945: PPUSH
41946: CALL_OW 546
41950: ST_TO_ADDR
// if hex [ 1 ] then
41951: LD_VAR 0 4
41955: PUSH
41956: LD_INT 1
41958: ARRAY
41959: IFFALSE 41963
// exit ;
41961: GO 42366
// height := hex [ 2 ] ;
41963: LD_ADDR_VAR 0 15
41967: PUSH
41968: LD_VAR 0 4
41972: PUSH
41973: LD_INT 2
41975: ARRAY
41976: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41977: LD_ADDR_VAR 0 14
41981: PUSH
41982: LD_INT 0
41984: PUSH
41985: LD_INT 2
41987: PUSH
41988: LD_INT 3
41990: PUSH
41991: LD_INT 5
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: ST_TO_ADDR
// for i in tmp do
42000: LD_ADDR_VAR 0 8
42004: PUSH
42005: LD_VAR 0 14
42009: PUSH
42010: FOR_IN
42011: IFFALSE 42181
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42013: LD_ADDR_VAR 0 9
42017: PUSH
42018: LD_VAR 0 10
42022: PPUSH
42023: LD_VAR 0 8
42027: PPUSH
42028: LD_INT 5
42030: PPUSH
42031: CALL_OW 272
42035: PUSH
42036: LD_VAR 0 11
42040: PPUSH
42041: LD_VAR 0 8
42045: PPUSH
42046: LD_INT 5
42048: PPUSH
42049: CALL_OW 273
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42058: LD_VAR 0 9
42062: PUSH
42063: LD_INT 1
42065: ARRAY
42066: PPUSH
42067: LD_VAR 0 9
42071: PUSH
42072: LD_INT 2
42074: ARRAY
42075: PPUSH
42076: CALL_OW 488
42080: IFFALSE 42179
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42082: LD_ADDR_VAR 0 4
42086: PUSH
42087: LD_VAR 0 9
42091: PUSH
42092: LD_INT 1
42094: ARRAY
42095: PPUSH
42096: LD_VAR 0 9
42100: PUSH
42101: LD_INT 2
42103: ARRAY
42104: PPUSH
42105: CALL_OW 546
42109: ST_TO_ADDR
// if hex [ 1 ] then
42110: LD_VAR 0 4
42114: PUSH
42115: LD_INT 1
42117: ARRAY
42118: IFFALSE 42122
// continue ;
42120: GO 42010
// h := hex [ 2 ] ;
42122: LD_ADDR_VAR 0 13
42126: PUSH
42127: LD_VAR 0 4
42131: PUSH
42132: LD_INT 2
42134: ARRAY
42135: ST_TO_ADDR
// if h + 7 < height then
42136: LD_VAR 0 13
42140: PUSH
42141: LD_INT 7
42143: PLUS
42144: PUSH
42145: LD_VAR 0 15
42149: LESS
42150: IFFALSE 42179
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42152: LD_ADDR_VAR 0 18
42156: PUSH
42157: LD_INT 7
42159: PUSH
42160: LD_INT 28
42162: PUSH
42163: LD_INT 45
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: LIST
42170: PUSH
42171: LD_VAR 0 12
42175: ARRAY
42176: ST_TO_ADDR
// break ;
42177: GO 42181
// end ; end ; end ;
42179: GO 42010
42181: POP
42182: POP
// end ; if not weapon then
42183: LD_VAR 0 18
42187: NOT
42188: IFFALSE 42248
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42190: LD_ADDR_VAR 0 5
42194: PUSH
42195: LD_VAR 0 5
42199: PUSH
42200: LD_INT 11
42202: PUSH
42203: LD_INT 30
42205: PUSH
42206: LD_INT 49
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: LIST
42213: DIFF
42214: ST_TO_ADDR
// if not list then
42215: LD_VAR 0 5
42219: NOT
42220: IFFALSE 42224
// exit ;
42222: GO 42366
// weapon := list [ rand ( 1 , list ) ] ;
42224: LD_ADDR_VAR 0 18
42228: PUSH
42229: LD_VAR 0 5
42233: PUSH
42234: LD_INT 1
42236: PPUSH
42237: LD_VAR 0 5
42241: PPUSH
42242: CALL_OW 12
42246: ARRAY
42247: ST_TO_ADDR
// end ; if weapon then
42248: LD_VAR 0 18
42252: IFFALSE 42366
// begin tmp := CostOfWeapon ( weapon ) ;
42254: LD_ADDR_VAR 0 14
42258: PUSH
42259: LD_VAR 0 18
42263: PPUSH
42264: CALL_OW 451
42268: ST_TO_ADDR
// j := GetBase ( tower ) ;
42269: LD_ADDR_VAR 0 9
42273: PUSH
42274: LD_VAR 0 1
42278: PPUSH
42279: CALL_OW 274
42283: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42284: LD_VAR 0 9
42288: PPUSH
42289: LD_INT 1
42291: PPUSH
42292: CALL_OW 275
42296: PUSH
42297: LD_VAR 0 14
42301: PUSH
42302: LD_INT 1
42304: ARRAY
42305: GREATEREQUAL
42306: PUSH
42307: LD_VAR 0 9
42311: PPUSH
42312: LD_INT 2
42314: PPUSH
42315: CALL_OW 275
42319: PUSH
42320: LD_VAR 0 14
42324: PUSH
42325: LD_INT 2
42327: ARRAY
42328: GREATEREQUAL
42329: AND
42330: PUSH
42331: LD_VAR 0 9
42335: PPUSH
42336: LD_INT 3
42338: PPUSH
42339: CALL_OW 275
42343: PUSH
42344: LD_VAR 0 14
42348: PUSH
42349: LD_INT 3
42351: ARRAY
42352: GREATEREQUAL
42353: AND
42354: IFFALSE 42366
// result := weapon ;
42356: LD_ADDR_VAR 0 3
42360: PUSH
42361: LD_VAR 0 18
42365: ST_TO_ADDR
// end ; end ;
42366: LD_VAR 0 3
42370: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42371: LD_INT 0
42373: PPUSH
42374: PPUSH
// result := true ;
42375: LD_ADDR_VAR 0 3
42379: PUSH
42380: LD_INT 1
42382: ST_TO_ADDR
// if array1 = array2 then
42383: LD_VAR 0 1
42387: PUSH
42388: LD_VAR 0 2
42392: EQUAL
42393: IFFALSE 42453
// begin for i = 1 to array1 do
42395: LD_ADDR_VAR 0 4
42399: PUSH
42400: DOUBLE
42401: LD_INT 1
42403: DEC
42404: ST_TO_ADDR
42405: LD_VAR 0 1
42409: PUSH
42410: FOR_TO
42411: IFFALSE 42449
// if array1 [ i ] <> array2 [ i ] then
42413: LD_VAR 0 1
42417: PUSH
42418: LD_VAR 0 4
42422: ARRAY
42423: PUSH
42424: LD_VAR 0 2
42428: PUSH
42429: LD_VAR 0 4
42433: ARRAY
42434: NONEQUAL
42435: IFFALSE 42447
// begin result := false ;
42437: LD_ADDR_VAR 0 3
42441: PUSH
42442: LD_INT 0
42444: ST_TO_ADDR
// break ;
42445: GO 42449
// end ;
42447: GO 42410
42449: POP
42450: POP
// end else
42451: GO 42461
// result := false ;
42453: LD_ADDR_VAR 0 3
42457: PUSH
42458: LD_INT 0
42460: ST_TO_ADDR
// end ;
42461: LD_VAR 0 3
42465: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42466: LD_INT 0
42468: PPUSH
42469: PPUSH
// if not array1 or not array2 then
42470: LD_VAR 0 1
42474: NOT
42475: PUSH
42476: LD_VAR 0 2
42480: NOT
42481: OR
42482: IFFALSE 42486
// exit ;
42484: GO 42550
// result := true ;
42486: LD_ADDR_VAR 0 3
42490: PUSH
42491: LD_INT 1
42493: ST_TO_ADDR
// for i = 1 to array1 do
42494: LD_ADDR_VAR 0 4
42498: PUSH
42499: DOUBLE
42500: LD_INT 1
42502: DEC
42503: ST_TO_ADDR
42504: LD_VAR 0 1
42508: PUSH
42509: FOR_TO
42510: IFFALSE 42548
// if array1 [ i ] <> array2 [ i ] then
42512: LD_VAR 0 1
42516: PUSH
42517: LD_VAR 0 4
42521: ARRAY
42522: PUSH
42523: LD_VAR 0 2
42527: PUSH
42528: LD_VAR 0 4
42532: ARRAY
42533: NONEQUAL
42534: IFFALSE 42546
// begin result := false ;
42536: LD_ADDR_VAR 0 3
42540: PUSH
42541: LD_INT 0
42543: ST_TO_ADDR
// break ;
42544: GO 42548
// end ;
42546: GO 42509
42548: POP
42549: POP
// end ;
42550: LD_VAR 0 3
42554: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42555: LD_INT 0
42557: PPUSH
42558: PPUSH
42559: PPUSH
// pom := GetBase ( fac ) ;
42560: LD_ADDR_VAR 0 5
42564: PUSH
42565: LD_VAR 0 1
42569: PPUSH
42570: CALL_OW 274
42574: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42575: LD_ADDR_VAR 0 4
42579: PUSH
42580: LD_VAR 0 2
42584: PUSH
42585: LD_INT 1
42587: ARRAY
42588: PPUSH
42589: LD_VAR 0 2
42593: PUSH
42594: LD_INT 2
42596: ARRAY
42597: PPUSH
42598: LD_VAR 0 2
42602: PUSH
42603: LD_INT 3
42605: ARRAY
42606: PPUSH
42607: LD_VAR 0 2
42611: PUSH
42612: LD_INT 4
42614: ARRAY
42615: PPUSH
42616: CALL_OW 449
42620: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42621: LD_ADDR_VAR 0 3
42625: PUSH
42626: LD_VAR 0 5
42630: PPUSH
42631: LD_INT 1
42633: PPUSH
42634: CALL_OW 275
42638: PUSH
42639: LD_VAR 0 4
42643: PUSH
42644: LD_INT 1
42646: ARRAY
42647: GREATEREQUAL
42648: PUSH
42649: LD_VAR 0 5
42653: PPUSH
42654: LD_INT 2
42656: PPUSH
42657: CALL_OW 275
42661: PUSH
42662: LD_VAR 0 4
42666: PUSH
42667: LD_INT 2
42669: ARRAY
42670: GREATEREQUAL
42671: AND
42672: PUSH
42673: LD_VAR 0 5
42677: PPUSH
42678: LD_INT 3
42680: PPUSH
42681: CALL_OW 275
42685: PUSH
42686: LD_VAR 0 4
42690: PUSH
42691: LD_INT 3
42693: ARRAY
42694: GREATEREQUAL
42695: AND
42696: ST_TO_ADDR
// end ;
42697: LD_VAR 0 3
42701: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42702: LD_INT 0
42704: PPUSH
42705: PPUSH
42706: PPUSH
42707: PPUSH
// pom := GetBase ( building ) ;
42708: LD_ADDR_VAR 0 3
42712: PUSH
42713: LD_VAR 0 1
42717: PPUSH
42718: CALL_OW 274
42722: ST_TO_ADDR
// if not pom then
42723: LD_VAR 0 3
42727: NOT
42728: IFFALSE 42732
// exit ;
42730: GO 42902
// btype := GetBType ( building ) ;
42732: LD_ADDR_VAR 0 5
42736: PUSH
42737: LD_VAR 0 1
42741: PPUSH
42742: CALL_OW 266
42746: ST_TO_ADDR
// if btype = b_armoury then
42747: LD_VAR 0 5
42751: PUSH
42752: LD_INT 4
42754: EQUAL
42755: IFFALSE 42765
// btype := b_barracks ;
42757: LD_ADDR_VAR 0 5
42761: PUSH
42762: LD_INT 5
42764: ST_TO_ADDR
// if btype = b_depot then
42765: LD_VAR 0 5
42769: PUSH
42770: LD_INT 0
42772: EQUAL
42773: IFFALSE 42783
// btype := b_warehouse ;
42775: LD_ADDR_VAR 0 5
42779: PUSH
42780: LD_INT 1
42782: ST_TO_ADDR
// if btype = b_workshop then
42783: LD_VAR 0 5
42787: PUSH
42788: LD_INT 2
42790: EQUAL
42791: IFFALSE 42801
// btype := b_factory ;
42793: LD_ADDR_VAR 0 5
42797: PUSH
42798: LD_INT 3
42800: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42801: LD_ADDR_VAR 0 4
42805: PUSH
42806: LD_VAR 0 5
42810: PPUSH
42811: LD_VAR 0 1
42815: PPUSH
42816: CALL_OW 248
42820: PPUSH
42821: CALL_OW 450
42825: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42826: LD_ADDR_VAR 0 2
42830: PUSH
42831: LD_VAR 0 3
42835: PPUSH
42836: LD_INT 1
42838: PPUSH
42839: CALL_OW 275
42843: PUSH
42844: LD_VAR 0 4
42848: PUSH
42849: LD_INT 1
42851: ARRAY
42852: GREATEREQUAL
42853: PUSH
42854: LD_VAR 0 3
42858: PPUSH
42859: LD_INT 2
42861: PPUSH
42862: CALL_OW 275
42866: PUSH
42867: LD_VAR 0 4
42871: PUSH
42872: LD_INT 2
42874: ARRAY
42875: GREATEREQUAL
42876: AND
42877: PUSH
42878: LD_VAR 0 3
42882: PPUSH
42883: LD_INT 3
42885: PPUSH
42886: CALL_OW 275
42890: PUSH
42891: LD_VAR 0 4
42895: PUSH
42896: LD_INT 3
42898: ARRAY
42899: GREATEREQUAL
42900: AND
42901: ST_TO_ADDR
// end ;
42902: LD_VAR 0 2
42906: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42907: LD_INT 0
42909: PPUSH
42910: PPUSH
42911: PPUSH
// pom := GetBase ( building ) ;
42912: LD_ADDR_VAR 0 4
42916: PUSH
42917: LD_VAR 0 1
42921: PPUSH
42922: CALL_OW 274
42926: ST_TO_ADDR
// if not pom then
42927: LD_VAR 0 4
42931: NOT
42932: IFFALSE 42936
// exit ;
42934: GO 43037
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42936: LD_ADDR_VAR 0 5
42940: PUSH
42941: LD_VAR 0 2
42945: PPUSH
42946: LD_VAR 0 1
42950: PPUSH
42951: CALL_OW 248
42955: PPUSH
42956: CALL_OW 450
42960: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42961: LD_ADDR_VAR 0 3
42965: PUSH
42966: LD_VAR 0 4
42970: PPUSH
42971: LD_INT 1
42973: PPUSH
42974: CALL_OW 275
42978: PUSH
42979: LD_VAR 0 5
42983: PUSH
42984: LD_INT 1
42986: ARRAY
42987: GREATEREQUAL
42988: PUSH
42989: LD_VAR 0 4
42993: PPUSH
42994: LD_INT 2
42996: PPUSH
42997: CALL_OW 275
43001: PUSH
43002: LD_VAR 0 5
43006: PUSH
43007: LD_INT 2
43009: ARRAY
43010: GREATEREQUAL
43011: AND
43012: PUSH
43013: LD_VAR 0 4
43017: PPUSH
43018: LD_INT 3
43020: PPUSH
43021: CALL_OW 275
43025: PUSH
43026: LD_VAR 0 5
43030: PUSH
43031: LD_INT 3
43033: ARRAY
43034: GREATEREQUAL
43035: AND
43036: ST_TO_ADDR
// end ;
43037: LD_VAR 0 3
43041: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43042: LD_INT 0
43044: PPUSH
43045: PPUSH
43046: PPUSH
43047: PPUSH
43048: PPUSH
43049: PPUSH
43050: PPUSH
43051: PPUSH
43052: PPUSH
43053: PPUSH
43054: PPUSH
// result := false ;
43055: LD_ADDR_VAR 0 8
43059: PUSH
43060: LD_INT 0
43062: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43063: LD_VAR 0 5
43067: NOT
43068: PUSH
43069: LD_VAR 0 1
43073: NOT
43074: OR
43075: PUSH
43076: LD_VAR 0 2
43080: NOT
43081: OR
43082: PUSH
43083: LD_VAR 0 3
43087: NOT
43088: OR
43089: IFFALSE 43093
// exit ;
43091: GO 43907
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43093: LD_ADDR_VAR 0 14
43097: PUSH
43098: LD_VAR 0 1
43102: PPUSH
43103: LD_VAR 0 2
43107: PPUSH
43108: LD_VAR 0 3
43112: PPUSH
43113: LD_VAR 0 4
43117: PPUSH
43118: LD_VAR 0 5
43122: PUSH
43123: LD_INT 1
43125: ARRAY
43126: PPUSH
43127: CALL_OW 248
43131: PPUSH
43132: LD_INT 0
43134: PPUSH
43135: CALL 45144 0 6
43139: ST_TO_ADDR
// if not hexes then
43140: LD_VAR 0 14
43144: NOT
43145: IFFALSE 43149
// exit ;
43147: GO 43907
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43149: LD_ADDR_VAR 0 17
43153: PUSH
43154: LD_VAR 0 5
43158: PPUSH
43159: LD_INT 22
43161: PUSH
43162: LD_VAR 0 13
43166: PPUSH
43167: CALL_OW 255
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 2
43178: PUSH
43179: LD_INT 30
43181: PUSH
43182: LD_INT 0
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 30
43191: PUSH
43192: LD_INT 1
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: LIST
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PPUSH
43208: CALL_OW 72
43212: ST_TO_ADDR
// for i = 1 to hexes do
43213: LD_ADDR_VAR 0 9
43217: PUSH
43218: DOUBLE
43219: LD_INT 1
43221: DEC
43222: ST_TO_ADDR
43223: LD_VAR 0 14
43227: PUSH
43228: FOR_TO
43229: IFFALSE 43905
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43231: LD_ADDR_VAR 0 13
43235: PUSH
43236: LD_VAR 0 14
43240: PUSH
43241: LD_VAR 0 9
43245: ARRAY
43246: PUSH
43247: LD_INT 1
43249: ARRAY
43250: PPUSH
43251: LD_VAR 0 14
43255: PUSH
43256: LD_VAR 0 9
43260: ARRAY
43261: PUSH
43262: LD_INT 2
43264: ARRAY
43265: PPUSH
43266: CALL_OW 428
43270: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43271: LD_VAR 0 14
43275: PUSH
43276: LD_VAR 0 9
43280: ARRAY
43281: PUSH
43282: LD_INT 1
43284: ARRAY
43285: PPUSH
43286: LD_VAR 0 14
43290: PUSH
43291: LD_VAR 0 9
43295: ARRAY
43296: PUSH
43297: LD_INT 2
43299: ARRAY
43300: PPUSH
43301: CALL_OW 351
43305: PUSH
43306: LD_VAR 0 14
43310: PUSH
43311: LD_VAR 0 9
43315: ARRAY
43316: PUSH
43317: LD_INT 1
43319: ARRAY
43320: PPUSH
43321: LD_VAR 0 14
43325: PUSH
43326: LD_VAR 0 9
43330: ARRAY
43331: PUSH
43332: LD_INT 2
43334: ARRAY
43335: PPUSH
43336: CALL_OW 488
43340: NOT
43341: OR
43342: PUSH
43343: LD_VAR 0 13
43347: PPUSH
43348: CALL_OW 247
43352: PUSH
43353: LD_INT 3
43355: EQUAL
43356: OR
43357: IFFALSE 43363
// exit ;
43359: POP
43360: POP
43361: GO 43907
// if not tmp then
43363: LD_VAR 0 13
43367: NOT
43368: IFFALSE 43372
// continue ;
43370: GO 43228
// result := true ;
43372: LD_ADDR_VAR 0 8
43376: PUSH
43377: LD_INT 1
43379: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43380: LD_VAR 0 6
43384: PUSH
43385: LD_VAR 0 13
43389: PPUSH
43390: CALL_OW 247
43394: PUSH
43395: LD_INT 2
43397: EQUAL
43398: AND
43399: PUSH
43400: LD_VAR 0 13
43404: PPUSH
43405: CALL_OW 263
43409: PUSH
43410: LD_INT 1
43412: EQUAL
43413: AND
43414: IFFALSE 43578
// begin if IsDrivenBy ( tmp ) then
43416: LD_VAR 0 13
43420: PPUSH
43421: CALL_OW 311
43425: IFFALSE 43429
// continue ;
43427: GO 43228
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43429: LD_VAR 0 6
43433: PPUSH
43434: LD_INT 3
43436: PUSH
43437: LD_INT 60
43439: PUSH
43440: EMPTY
43441: LIST
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 3
43449: PUSH
43450: LD_INT 55
43452: PUSH
43453: EMPTY
43454: LIST
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PPUSH
43464: CALL_OW 72
43468: IFFALSE 43576
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43470: LD_ADDR_VAR 0 18
43474: PUSH
43475: LD_VAR 0 6
43479: PPUSH
43480: LD_INT 3
43482: PUSH
43483: LD_INT 60
43485: PUSH
43486: EMPTY
43487: LIST
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 3
43495: PUSH
43496: LD_INT 55
43498: PUSH
43499: EMPTY
43500: LIST
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PPUSH
43510: CALL_OW 72
43514: PUSH
43515: LD_INT 1
43517: ARRAY
43518: ST_TO_ADDR
// if IsInUnit ( driver ) then
43519: LD_VAR 0 18
43523: PPUSH
43524: CALL_OW 310
43528: IFFALSE 43539
// ComExit ( driver ) ;
43530: LD_VAR 0 18
43534: PPUSH
43535: CALL 68849 0 1
// AddComEnterUnit ( driver , tmp ) ;
43539: LD_VAR 0 18
43543: PPUSH
43544: LD_VAR 0 13
43548: PPUSH
43549: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43553: LD_VAR 0 18
43557: PPUSH
43558: LD_VAR 0 7
43562: PPUSH
43563: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43567: LD_VAR 0 18
43571: PPUSH
43572: CALL_OW 181
// end ; continue ;
43576: GO 43228
// end ; if not cleaners or not tmp in cleaners then
43578: LD_VAR 0 6
43582: NOT
43583: PUSH
43584: LD_VAR 0 13
43588: PUSH
43589: LD_VAR 0 6
43593: IN
43594: NOT
43595: OR
43596: IFFALSE 43903
// begin if dep then
43598: LD_VAR 0 17
43602: IFFALSE 43738
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43604: LD_ADDR_VAR 0 16
43608: PUSH
43609: LD_VAR 0 17
43613: PUSH
43614: LD_INT 1
43616: ARRAY
43617: PPUSH
43618: CALL_OW 250
43622: PPUSH
43623: LD_VAR 0 17
43627: PUSH
43628: LD_INT 1
43630: ARRAY
43631: PPUSH
43632: CALL_OW 254
43636: PPUSH
43637: LD_INT 5
43639: PPUSH
43640: CALL_OW 272
43644: PUSH
43645: LD_VAR 0 17
43649: PUSH
43650: LD_INT 1
43652: ARRAY
43653: PPUSH
43654: CALL_OW 251
43658: PPUSH
43659: LD_VAR 0 17
43663: PUSH
43664: LD_INT 1
43666: ARRAY
43667: PPUSH
43668: CALL_OW 254
43672: PPUSH
43673: LD_INT 5
43675: PPUSH
43676: CALL_OW 273
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43685: LD_VAR 0 16
43689: PUSH
43690: LD_INT 1
43692: ARRAY
43693: PPUSH
43694: LD_VAR 0 16
43698: PUSH
43699: LD_INT 2
43701: ARRAY
43702: PPUSH
43703: CALL_OW 488
43707: IFFALSE 43738
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43709: LD_VAR 0 13
43713: PPUSH
43714: LD_VAR 0 16
43718: PUSH
43719: LD_INT 1
43721: ARRAY
43722: PPUSH
43723: LD_VAR 0 16
43727: PUSH
43728: LD_INT 2
43730: ARRAY
43731: PPUSH
43732: CALL_OW 111
// continue ;
43736: GO 43228
// end ; end ; r := GetDir ( tmp ) ;
43738: LD_ADDR_VAR 0 15
43742: PUSH
43743: LD_VAR 0 13
43747: PPUSH
43748: CALL_OW 254
43752: ST_TO_ADDR
// if r = 5 then
43753: LD_VAR 0 15
43757: PUSH
43758: LD_INT 5
43760: EQUAL
43761: IFFALSE 43771
// r := 0 ;
43763: LD_ADDR_VAR 0 15
43767: PUSH
43768: LD_INT 0
43770: ST_TO_ADDR
// for j = r to 5 do
43771: LD_ADDR_VAR 0 10
43775: PUSH
43776: DOUBLE
43777: LD_VAR 0 15
43781: DEC
43782: ST_TO_ADDR
43783: LD_INT 5
43785: PUSH
43786: FOR_TO
43787: IFFALSE 43901
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43789: LD_ADDR_VAR 0 11
43793: PUSH
43794: LD_VAR 0 13
43798: PPUSH
43799: CALL_OW 250
43803: PPUSH
43804: LD_VAR 0 10
43808: PPUSH
43809: LD_INT 2
43811: PPUSH
43812: CALL_OW 272
43816: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43817: LD_ADDR_VAR 0 12
43821: PUSH
43822: LD_VAR 0 13
43826: PPUSH
43827: CALL_OW 251
43831: PPUSH
43832: LD_VAR 0 10
43836: PPUSH
43837: LD_INT 2
43839: PPUSH
43840: CALL_OW 273
43844: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43845: LD_VAR 0 11
43849: PPUSH
43850: LD_VAR 0 12
43854: PPUSH
43855: CALL_OW 488
43859: PUSH
43860: LD_VAR 0 11
43864: PPUSH
43865: LD_VAR 0 12
43869: PPUSH
43870: CALL_OW 428
43874: NOT
43875: AND
43876: IFFALSE 43899
// begin ComMoveXY ( tmp , _x , _y ) ;
43878: LD_VAR 0 13
43882: PPUSH
43883: LD_VAR 0 11
43887: PPUSH
43888: LD_VAR 0 12
43892: PPUSH
43893: CALL_OW 111
// break ;
43897: GO 43901
// end ; end ;
43899: GO 43786
43901: POP
43902: POP
// end ; end ;
43903: GO 43228
43905: POP
43906: POP
// end ;
43907: LD_VAR 0 8
43911: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43912: LD_INT 0
43914: PPUSH
// result := true ;
43915: LD_ADDR_VAR 0 3
43919: PUSH
43920: LD_INT 1
43922: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43923: LD_VAR 0 2
43927: PUSH
43928: LD_INT 24
43930: DOUBLE
43931: EQUAL
43932: IFTRUE 43942
43934: LD_INT 33
43936: DOUBLE
43937: EQUAL
43938: IFTRUE 43942
43940: GO 43967
43942: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43943: LD_ADDR_VAR 0 3
43947: PUSH
43948: LD_INT 32
43950: PPUSH
43951: LD_VAR 0 1
43955: PPUSH
43956: CALL_OW 321
43960: PUSH
43961: LD_INT 2
43963: EQUAL
43964: ST_TO_ADDR
43965: GO 44287
43967: LD_INT 20
43969: DOUBLE
43970: EQUAL
43971: IFTRUE 43975
43973: GO 44000
43975: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43976: LD_ADDR_VAR 0 3
43980: PUSH
43981: LD_INT 6
43983: PPUSH
43984: LD_VAR 0 1
43988: PPUSH
43989: CALL_OW 321
43993: PUSH
43994: LD_INT 2
43996: EQUAL
43997: ST_TO_ADDR
43998: GO 44287
44000: LD_INT 22
44002: DOUBLE
44003: EQUAL
44004: IFTRUE 44014
44006: LD_INT 36
44008: DOUBLE
44009: EQUAL
44010: IFTRUE 44014
44012: GO 44039
44014: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44015: LD_ADDR_VAR 0 3
44019: PUSH
44020: LD_INT 15
44022: PPUSH
44023: LD_VAR 0 1
44027: PPUSH
44028: CALL_OW 321
44032: PUSH
44033: LD_INT 2
44035: EQUAL
44036: ST_TO_ADDR
44037: GO 44287
44039: LD_INT 30
44041: DOUBLE
44042: EQUAL
44043: IFTRUE 44047
44045: GO 44072
44047: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44048: LD_ADDR_VAR 0 3
44052: PUSH
44053: LD_INT 20
44055: PPUSH
44056: LD_VAR 0 1
44060: PPUSH
44061: CALL_OW 321
44065: PUSH
44066: LD_INT 2
44068: EQUAL
44069: ST_TO_ADDR
44070: GO 44287
44072: LD_INT 28
44074: DOUBLE
44075: EQUAL
44076: IFTRUE 44086
44078: LD_INT 21
44080: DOUBLE
44081: EQUAL
44082: IFTRUE 44086
44084: GO 44111
44086: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44087: LD_ADDR_VAR 0 3
44091: PUSH
44092: LD_INT 21
44094: PPUSH
44095: LD_VAR 0 1
44099: PPUSH
44100: CALL_OW 321
44104: PUSH
44105: LD_INT 2
44107: EQUAL
44108: ST_TO_ADDR
44109: GO 44287
44111: LD_INT 16
44113: DOUBLE
44114: EQUAL
44115: IFTRUE 44119
44117: GO 44146
44119: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44120: LD_ADDR_VAR 0 3
44124: PUSH
44125: LD_EXP 59
44129: PPUSH
44130: LD_VAR 0 1
44134: PPUSH
44135: CALL_OW 321
44139: PUSH
44140: LD_INT 2
44142: EQUAL
44143: ST_TO_ADDR
44144: GO 44287
44146: LD_INT 19
44148: DOUBLE
44149: EQUAL
44150: IFTRUE 44160
44152: LD_INT 23
44154: DOUBLE
44155: EQUAL
44156: IFTRUE 44160
44158: GO 44187
44160: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44161: LD_ADDR_VAR 0 3
44165: PUSH
44166: LD_EXP 58
44170: PPUSH
44171: LD_VAR 0 1
44175: PPUSH
44176: CALL_OW 321
44180: PUSH
44181: LD_INT 2
44183: EQUAL
44184: ST_TO_ADDR
44185: GO 44287
44187: LD_INT 17
44189: DOUBLE
44190: EQUAL
44191: IFTRUE 44195
44193: GO 44220
44195: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44196: LD_ADDR_VAR 0 3
44200: PUSH
44201: LD_INT 39
44203: PPUSH
44204: LD_VAR 0 1
44208: PPUSH
44209: CALL_OW 321
44213: PUSH
44214: LD_INT 2
44216: EQUAL
44217: ST_TO_ADDR
44218: GO 44287
44220: LD_INT 18
44222: DOUBLE
44223: EQUAL
44224: IFTRUE 44228
44226: GO 44253
44228: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44229: LD_ADDR_VAR 0 3
44233: PUSH
44234: LD_INT 40
44236: PPUSH
44237: LD_VAR 0 1
44241: PPUSH
44242: CALL_OW 321
44246: PUSH
44247: LD_INT 2
44249: EQUAL
44250: ST_TO_ADDR
44251: GO 44287
44253: LD_INT 27
44255: DOUBLE
44256: EQUAL
44257: IFTRUE 44261
44259: GO 44286
44261: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44262: LD_ADDR_VAR 0 3
44266: PUSH
44267: LD_INT 35
44269: PPUSH
44270: LD_VAR 0 1
44274: PPUSH
44275: CALL_OW 321
44279: PUSH
44280: LD_INT 2
44282: EQUAL
44283: ST_TO_ADDR
44284: GO 44287
44286: POP
// end ;
44287: LD_VAR 0 3
44291: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44292: LD_INT 0
44294: PPUSH
44295: PPUSH
44296: PPUSH
44297: PPUSH
44298: PPUSH
44299: PPUSH
44300: PPUSH
44301: PPUSH
44302: PPUSH
44303: PPUSH
44304: PPUSH
// result := false ;
44305: LD_ADDR_VAR 0 6
44309: PUSH
44310: LD_INT 0
44312: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44313: LD_VAR 0 1
44317: NOT
44318: PUSH
44319: LD_VAR 0 1
44323: PPUSH
44324: CALL_OW 266
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: LD_INT 1
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: IN
44339: NOT
44340: OR
44341: PUSH
44342: LD_VAR 0 2
44346: NOT
44347: OR
44348: PUSH
44349: LD_VAR 0 5
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: LD_INT 3
44365: PUSH
44366: LD_INT 4
44368: PUSH
44369: LD_INT 5
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: IN
44380: NOT
44381: OR
44382: PUSH
44383: LD_VAR 0 3
44387: PPUSH
44388: LD_VAR 0 4
44392: PPUSH
44393: CALL_OW 488
44397: NOT
44398: OR
44399: IFFALSE 44403
// exit ;
44401: GO 45139
// side := GetSide ( depot ) ;
44403: LD_ADDR_VAR 0 9
44407: PUSH
44408: LD_VAR 0 1
44412: PPUSH
44413: CALL_OW 255
44417: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44418: LD_VAR 0 9
44422: PPUSH
44423: LD_VAR 0 2
44427: PPUSH
44428: CALL 43912 0 2
44432: NOT
44433: IFFALSE 44437
// exit ;
44435: GO 45139
// pom := GetBase ( depot ) ;
44437: LD_ADDR_VAR 0 10
44441: PUSH
44442: LD_VAR 0 1
44446: PPUSH
44447: CALL_OW 274
44451: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44452: LD_ADDR_VAR 0 11
44456: PUSH
44457: LD_VAR 0 2
44461: PPUSH
44462: LD_VAR 0 1
44466: PPUSH
44467: CALL_OW 248
44471: PPUSH
44472: CALL_OW 450
44476: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44477: LD_VAR 0 10
44481: PPUSH
44482: LD_INT 1
44484: PPUSH
44485: CALL_OW 275
44489: PUSH
44490: LD_VAR 0 11
44494: PUSH
44495: LD_INT 1
44497: ARRAY
44498: GREATEREQUAL
44499: PUSH
44500: LD_VAR 0 10
44504: PPUSH
44505: LD_INT 2
44507: PPUSH
44508: CALL_OW 275
44512: PUSH
44513: LD_VAR 0 11
44517: PUSH
44518: LD_INT 2
44520: ARRAY
44521: GREATEREQUAL
44522: AND
44523: PUSH
44524: LD_VAR 0 10
44528: PPUSH
44529: LD_INT 3
44531: PPUSH
44532: CALL_OW 275
44536: PUSH
44537: LD_VAR 0 11
44541: PUSH
44542: LD_INT 3
44544: ARRAY
44545: GREATEREQUAL
44546: AND
44547: NOT
44548: IFFALSE 44552
// exit ;
44550: GO 45139
// if GetBType ( depot ) = b_depot then
44552: LD_VAR 0 1
44556: PPUSH
44557: CALL_OW 266
44561: PUSH
44562: LD_INT 0
44564: EQUAL
44565: IFFALSE 44577
// dist := 28 else
44567: LD_ADDR_VAR 0 14
44571: PUSH
44572: LD_INT 28
44574: ST_TO_ADDR
44575: GO 44585
// dist := 36 ;
44577: LD_ADDR_VAR 0 14
44581: PUSH
44582: LD_INT 36
44584: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44585: LD_VAR 0 1
44589: PPUSH
44590: LD_VAR 0 3
44594: PPUSH
44595: LD_VAR 0 4
44599: PPUSH
44600: CALL_OW 297
44604: PUSH
44605: LD_VAR 0 14
44609: GREATER
44610: IFFALSE 44614
// exit ;
44612: GO 45139
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44614: LD_ADDR_VAR 0 12
44618: PUSH
44619: LD_VAR 0 2
44623: PPUSH
44624: LD_VAR 0 3
44628: PPUSH
44629: LD_VAR 0 4
44633: PPUSH
44634: LD_VAR 0 5
44638: PPUSH
44639: LD_VAR 0 1
44643: PPUSH
44644: CALL_OW 248
44648: PPUSH
44649: LD_INT 0
44651: PPUSH
44652: CALL 45144 0 6
44656: ST_TO_ADDR
// if not hexes then
44657: LD_VAR 0 12
44661: NOT
44662: IFFALSE 44666
// exit ;
44664: GO 45139
// hex := GetHexInfo ( x , y ) ;
44666: LD_ADDR_VAR 0 15
44670: PUSH
44671: LD_VAR 0 3
44675: PPUSH
44676: LD_VAR 0 4
44680: PPUSH
44681: CALL_OW 546
44685: ST_TO_ADDR
// if hex [ 1 ] then
44686: LD_VAR 0 15
44690: PUSH
44691: LD_INT 1
44693: ARRAY
44694: IFFALSE 44698
// exit ;
44696: GO 45139
// height := hex [ 2 ] ;
44698: LD_ADDR_VAR 0 13
44702: PUSH
44703: LD_VAR 0 15
44707: PUSH
44708: LD_INT 2
44710: ARRAY
44711: ST_TO_ADDR
// for i = 1 to hexes do
44712: LD_ADDR_VAR 0 7
44716: PUSH
44717: DOUBLE
44718: LD_INT 1
44720: DEC
44721: ST_TO_ADDR
44722: LD_VAR 0 12
44726: PUSH
44727: FOR_TO
44728: IFFALSE 45058
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44730: LD_VAR 0 12
44734: PUSH
44735: LD_VAR 0 7
44739: ARRAY
44740: PUSH
44741: LD_INT 1
44743: ARRAY
44744: PPUSH
44745: LD_VAR 0 12
44749: PUSH
44750: LD_VAR 0 7
44754: ARRAY
44755: PUSH
44756: LD_INT 2
44758: ARRAY
44759: PPUSH
44760: CALL_OW 488
44764: NOT
44765: PUSH
44766: LD_VAR 0 12
44770: PUSH
44771: LD_VAR 0 7
44775: ARRAY
44776: PUSH
44777: LD_INT 1
44779: ARRAY
44780: PPUSH
44781: LD_VAR 0 12
44785: PUSH
44786: LD_VAR 0 7
44790: ARRAY
44791: PUSH
44792: LD_INT 2
44794: ARRAY
44795: PPUSH
44796: CALL_OW 428
44800: PUSH
44801: LD_INT 0
44803: GREATER
44804: OR
44805: PUSH
44806: LD_VAR 0 12
44810: PUSH
44811: LD_VAR 0 7
44815: ARRAY
44816: PUSH
44817: LD_INT 1
44819: ARRAY
44820: PPUSH
44821: LD_VAR 0 12
44825: PUSH
44826: LD_VAR 0 7
44830: ARRAY
44831: PUSH
44832: LD_INT 2
44834: ARRAY
44835: PPUSH
44836: CALL_OW 351
44840: OR
44841: IFFALSE 44847
// exit ;
44843: POP
44844: POP
44845: GO 45139
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44847: LD_ADDR_VAR 0 8
44851: PUSH
44852: LD_VAR 0 12
44856: PUSH
44857: LD_VAR 0 7
44861: ARRAY
44862: PUSH
44863: LD_INT 1
44865: ARRAY
44866: PPUSH
44867: LD_VAR 0 12
44871: PUSH
44872: LD_VAR 0 7
44876: ARRAY
44877: PUSH
44878: LD_INT 2
44880: ARRAY
44881: PPUSH
44882: CALL_OW 546
44886: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44887: LD_VAR 0 8
44891: PUSH
44892: LD_INT 1
44894: ARRAY
44895: PUSH
44896: LD_VAR 0 8
44900: PUSH
44901: LD_INT 2
44903: ARRAY
44904: PUSH
44905: LD_VAR 0 13
44909: PUSH
44910: LD_INT 2
44912: PLUS
44913: GREATER
44914: OR
44915: PUSH
44916: LD_VAR 0 8
44920: PUSH
44921: LD_INT 2
44923: ARRAY
44924: PUSH
44925: LD_VAR 0 13
44929: PUSH
44930: LD_INT 2
44932: MINUS
44933: LESS
44934: OR
44935: PUSH
44936: LD_VAR 0 8
44940: PUSH
44941: LD_INT 3
44943: ARRAY
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: LD_INT 8
44950: PUSH
44951: LD_INT 9
44953: PUSH
44954: LD_INT 10
44956: PUSH
44957: LD_INT 11
44959: PUSH
44960: LD_INT 12
44962: PUSH
44963: LD_INT 13
44965: PUSH
44966: LD_INT 16
44968: PUSH
44969: LD_INT 17
44971: PUSH
44972: LD_INT 18
44974: PUSH
44975: LD_INT 19
44977: PUSH
44978: LD_INT 20
44980: PUSH
44981: LD_INT 21
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: IN
44999: NOT
45000: OR
45001: PUSH
45002: LD_VAR 0 8
45006: PUSH
45007: LD_INT 5
45009: ARRAY
45010: NOT
45011: OR
45012: PUSH
45013: LD_VAR 0 8
45017: PUSH
45018: LD_INT 6
45020: ARRAY
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: LD_INT 2
45027: PUSH
45028: LD_INT 7
45030: PUSH
45031: LD_INT 9
45033: PUSH
45034: LD_INT 10
45036: PUSH
45037: LD_INT 11
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: IN
45048: NOT
45049: OR
45050: IFFALSE 45056
// exit ;
45052: POP
45053: POP
45054: GO 45139
// end ;
45056: GO 44727
45058: POP
45059: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45060: LD_VAR 0 9
45064: PPUSH
45065: LD_VAR 0 3
45069: PPUSH
45070: LD_VAR 0 4
45074: PPUSH
45075: LD_INT 20
45077: PPUSH
45078: CALL 37085 0 4
45082: PUSH
45083: LD_INT 4
45085: ARRAY
45086: IFFALSE 45090
// exit ;
45088: GO 45139
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45090: LD_VAR 0 2
45094: PUSH
45095: LD_INT 29
45097: PUSH
45098: LD_INT 30
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: IN
45105: PUSH
45106: LD_VAR 0 3
45110: PPUSH
45111: LD_VAR 0 4
45115: PPUSH
45116: LD_VAR 0 9
45120: PPUSH
45121: CALL_OW 440
45125: NOT
45126: AND
45127: IFFALSE 45131
// exit ;
45129: GO 45139
// result := true ;
45131: LD_ADDR_VAR 0 6
45135: PUSH
45136: LD_INT 1
45138: ST_TO_ADDR
// end ;
45139: LD_VAR 0 6
45143: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45144: LD_INT 0
45146: PPUSH
45147: PPUSH
45148: PPUSH
45149: PPUSH
45150: PPUSH
45151: PPUSH
45152: PPUSH
45153: PPUSH
45154: PPUSH
45155: PPUSH
45156: PPUSH
45157: PPUSH
45158: PPUSH
45159: PPUSH
45160: PPUSH
45161: PPUSH
45162: PPUSH
45163: PPUSH
45164: PPUSH
45165: PPUSH
45166: PPUSH
45167: PPUSH
45168: PPUSH
45169: PPUSH
45170: PPUSH
45171: PPUSH
45172: PPUSH
45173: PPUSH
45174: PPUSH
45175: PPUSH
45176: PPUSH
45177: PPUSH
45178: PPUSH
45179: PPUSH
45180: PPUSH
45181: PPUSH
45182: PPUSH
45183: PPUSH
45184: PPUSH
45185: PPUSH
45186: PPUSH
45187: PPUSH
45188: PPUSH
45189: PPUSH
45190: PPUSH
45191: PPUSH
45192: PPUSH
45193: PPUSH
45194: PPUSH
45195: PPUSH
45196: PPUSH
45197: PPUSH
45198: PPUSH
45199: PPUSH
45200: PPUSH
45201: PPUSH
45202: PPUSH
45203: PPUSH
// result = [ ] ;
45204: LD_ADDR_VAR 0 7
45208: PUSH
45209: EMPTY
45210: ST_TO_ADDR
// temp_list = [ ] ;
45211: LD_ADDR_VAR 0 9
45215: PUSH
45216: EMPTY
45217: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45218: LD_VAR 0 4
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: LD_INT 2
45231: PUSH
45232: LD_INT 3
45234: PUSH
45235: LD_INT 4
45237: PUSH
45238: LD_INT 5
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: IN
45249: NOT
45250: PUSH
45251: LD_VAR 0 1
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: IN
45266: PUSH
45267: LD_VAR 0 5
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: LD_INT 2
45277: PUSH
45278: LD_INT 3
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: LIST
45285: IN
45286: NOT
45287: AND
45288: OR
45289: IFFALSE 45293
// exit ;
45291: GO 63684
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45293: LD_VAR 0 1
45297: PUSH
45298: LD_INT 6
45300: PUSH
45301: LD_INT 7
45303: PUSH
45304: LD_INT 8
45306: PUSH
45307: LD_INT 13
45309: PUSH
45310: LD_INT 12
45312: PUSH
45313: LD_INT 15
45315: PUSH
45316: LD_INT 11
45318: PUSH
45319: LD_INT 14
45321: PUSH
45322: LD_INT 10
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: IN
45336: IFFALSE 45346
// btype = b_lab ;
45338: LD_ADDR_VAR 0 1
45342: PUSH
45343: LD_INT 6
45345: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45346: LD_VAR 0 6
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: LD_INT 2
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: LIST
45364: IN
45365: NOT
45366: PUSH
45367: LD_VAR 0 1
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: LD_INT 3
45383: PUSH
45384: LD_INT 6
45386: PUSH
45387: LD_INT 36
45389: PUSH
45390: LD_INT 4
45392: PUSH
45393: LD_INT 5
45395: PUSH
45396: LD_INT 31
45398: PUSH
45399: LD_INT 32
45401: PUSH
45402: LD_INT 33
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: IN
45418: NOT
45419: PUSH
45420: LD_VAR 0 6
45424: PUSH
45425: LD_INT 1
45427: EQUAL
45428: AND
45429: OR
45430: PUSH
45431: LD_VAR 0 1
45435: PUSH
45436: LD_INT 2
45438: PUSH
45439: LD_INT 3
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: IN
45446: NOT
45447: PUSH
45448: LD_VAR 0 6
45452: PUSH
45453: LD_INT 2
45455: EQUAL
45456: AND
45457: OR
45458: IFFALSE 45468
// mode = 0 ;
45460: LD_ADDR_VAR 0 6
45464: PUSH
45465: LD_INT 0
45467: ST_TO_ADDR
// case mode of 0 :
45468: LD_VAR 0 6
45472: PUSH
45473: LD_INT 0
45475: DOUBLE
45476: EQUAL
45477: IFTRUE 45481
45479: GO 56934
45481: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45482: LD_ADDR_VAR 0 11
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: LD_INT 1
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 1
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: NEG
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: NEG
45564: PUSH
45565: LD_INT 2
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: LD_INT 2
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: LD_INT 1
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: LD_INT 2
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: LD_INT 2
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: LD_INT 3
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: LD_INT 3
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45675: LD_ADDR_VAR 0 12
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 1
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: LD_INT 1
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 2
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 2
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 1
45787: NEG
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 2
45798: NEG
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 2
45809: NEG
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 2
45821: NEG
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 3
45832: NEG
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 3
45843: NEG
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45871: LD_ADDR_VAR 0 13
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: LD_INT 1
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: LD_INT 2
45956: NEG
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 2
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 2
45974: PUSH
45975: LD_INT 2
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: LD_INT 2
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 2
45994: NEG
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 2
46006: NEG
46007: PUSH
46008: LD_INT 2
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 2
46018: NEG
46019: PUSH
46020: LD_INT 3
46022: NEG
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 3
46030: NEG
46031: PUSH
46032: LD_INT 2
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 3
46042: NEG
46043: PUSH
46044: LD_INT 3
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46070: LD_ADDR_VAR 0 14
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: LD_INT 2
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: LD_INT 2
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: LD_INT 2
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 2
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: LD_INT 3
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 0
46228: PUSH
46229: LD_INT 3
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: LD_INT 2
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46266: LD_ADDR_VAR 0 15
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: LD_INT 1
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 2
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 2
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 2
46389: NEG
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 2
46400: NEG
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 2
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 3
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 3
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46459: LD_ADDR_VAR 0 16
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: LD_INT 1
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 2
46562: PUSH
46563: LD_INT 2
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: LD_INT 2
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 2
46582: NEG
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 2
46594: NEG
46595: PUSH
46596: LD_INT 2
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 3
46606: PUSH
46607: LD_INT 2
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 3
46616: PUSH
46617: LD_INT 3
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 2
46626: PUSH
46627: LD_INT 3
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46652: LD_ADDR_VAR 0 17
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: LD_INT 1
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: LD_INT 1
46725: NEG
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 1
46733: NEG
46734: PUSH
46735: LD_INT 2
46737: NEG
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: LD_INT 2
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: LD_INT 1
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 2
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 2
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 2
46787: PUSH
46788: LD_INT 2
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: LD_INT 2
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: LD_INT 2
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 2
46828: NEG
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 2
46839: NEG
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 2
46851: NEG
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46882: LD_ADDR_VAR 0 18
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: LD_INT 2
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: LD_INT 2
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 2
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 2
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 2
47058: NEG
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 2
47069: NEG
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 2
47081: NEG
47082: PUSH
47083: LD_INT 2
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47112: LD_ADDR_VAR 0 19
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: NEG
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: LD_INT 2
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: LD_INT 2
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 2
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: LD_INT 2
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: LD_INT 2
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: LD_INT 1
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 2
47288: NEG
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 2
47299: NEG
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 2
47311: NEG
47312: PUSH
47313: LD_INT 2
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47342: LD_ADDR_VAR 0 20
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: LD_INT 1
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: NEG
47424: PUSH
47425: LD_INT 2
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: LD_INT 2
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 2
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 2
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 2
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: LD_INT 2
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: LD_INT 2
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 2
47518: NEG
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 2
47529: NEG
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 2
47541: NEG
47542: PUSH
47543: LD_INT 2
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47572: LD_ADDR_VAR 0 21
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 1
47641: NEG
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: LD_INT 2
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 2
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 2
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 2
47707: PUSH
47708: LD_INT 2
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: LD_INT 2
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: LD_INT 2
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: NEG
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 2
47748: NEG
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 2
47759: NEG
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 2
47771: NEG
47772: PUSH
47773: LD_INT 2
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47802: LD_ADDR_VAR 0 22
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 0
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: NEG
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 1
47871: NEG
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: LD_INT 2
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: LD_INT 2
47898: NEG
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 2
47927: PUSH
47928: LD_INT 1
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 2
47937: PUSH
47938: LD_INT 2
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: LD_INT 2
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: LD_INT 2
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 2
47978: NEG
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 2
47989: NEG
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 2
48001: NEG
48002: PUSH
48003: LD_INT 2
48005: NEG
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48032: LD_ADDR_VAR 0 23
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: LD_INT 1
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: LD_INT 2
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: LD_INT 2
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 2
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: LD_INT 1
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 2
48167: PUSH
48168: LD_INT 2
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: LD_INT 2
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: LD_INT 2
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: NEG
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 2
48208: NEG
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 2
48219: NEG
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 2
48231: NEG
48232: PUSH
48233: LD_INT 2
48235: NEG
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 2
48243: NEG
48244: PUSH
48245: LD_INT 3
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: LD_INT 3
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: LD_INT 2
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 2
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48312: LD_ADDR_VAR 0 24
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: LD_INT 2
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 2
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 2
48488: NEG
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 2
48511: NEG
48512: PUSH
48513: LD_INT 2
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: LD_INT 2
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 2
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 3
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 3
48555: PUSH
48556: LD_INT 2
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48588: LD_ADDR_VAR 0 25
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 1
48608: NEG
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: LD_INT 2
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: LD_INT 2
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 2
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 2
48723: PUSH
48724: LD_INT 2
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: LD_INT 2
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: LD_INT 1
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 2
48764: NEG
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 2
48775: NEG
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: LD_INT 2
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 3
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 3
48809: PUSH
48810: LD_INT 2
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: LD_INT 3
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 1
48829: PUSH
48830: LD_INT 3
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48862: LD_ADDR_VAR 0 26
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: LD_INT 1
48935: NEG
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: LD_INT 2
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: LD_INT 2
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 2
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: LD_INT 2
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: LD_INT 2
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: LD_INT 1
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 2
49038: NEG
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 2
49049: NEG
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 2
49061: NEG
49062: PUSH
49063: LD_INT 2
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 2
49073: PUSH
49074: LD_INT 3
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: LD_INT 3
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: LD_INT 2
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 2
49104: NEG
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49138: LD_ADDR_VAR 0 27
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: LD_INT 1
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: NEG
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: LD_INT 2
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: LD_INT 2
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 2
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 2
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 2
49273: PUSH
49274: LD_INT 2
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: LD_INT 2
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: LD_INT 2
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 2
49314: NEG
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 2
49325: NEG
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 2
49337: NEG
49338: PUSH
49339: LD_INT 2
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: LD_INT 2
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: NEG
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 3
49371: NEG
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 3
49383: NEG
49384: PUSH
49385: LD_INT 2
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49418: LD_ADDR_VAR 0 28
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: LD_INT 1
49438: NEG
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 1
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: LD_INT 1
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: LD_INT 1
49491: NEG
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: LD_INT 2
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: LD_INT 2
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 2
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: LD_INT 2
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 2
49594: NEG
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 2
49605: NEG
49606: PUSH
49607: LD_INT 1
49609: NEG
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 2
49617: NEG
49618: PUSH
49619: LD_INT 2
49621: NEG
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 2
49629: NEG
49630: PUSH
49631: LD_INT 3
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: LD_INT 3
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 3
49653: NEG
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 3
49665: NEG
49666: PUSH
49667: LD_INT 2
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49700: LD_ADDR_VAR 0 29
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: LD_INT 1
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: LD_INT 1
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 1
49769: NEG
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: LD_INT 2
49785: NEG
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: LD_INT 2
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 1
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 2
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 2
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 2
49866: NEG
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 2
49878: NEG
49879: PUSH
49880: LD_INT 2
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 2
49890: NEG
49891: PUSH
49892: LD_INT 3
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 2
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 3
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: LD_INT 3
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: LD_INT 2
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 3
49944: NEG
49945: PUSH
49946: LD_INT 2
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49979: LD_ADDR_VAR 0 30
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: LD_INT 1
49999: NEG
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: LD_INT 2
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: LD_INT 2
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 2
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 2
50114: PUSH
50115: LD_INT 2
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: LD_INT 2
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 2
50145: NEG
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 2
50156: NEG
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: LD_INT 3
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: LD_INT 2
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 3
50191: PUSH
50192: LD_INT 2
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: LD_INT 3
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 2
50211: NEG
50212: PUSH
50213: LD_INT 1
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 3
50222: NEG
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50257: LD_ADDR_VAR 0 31
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 0
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: LD_INT 2
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 2
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 2
50381: PUSH
50382: LD_INT 2
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: LD_INT 2
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: LD_INT 1
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 2
50422: NEG
50423: PUSH
50424: LD_INT 1
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 2
50434: NEG
50435: PUSH
50436: LD_INT 2
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 2
50446: NEG
50447: PUSH
50448: LD_INT 3
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 2
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 3
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: LD_INT 3
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: LD_INT 2
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 3
50500: NEG
50501: PUSH
50502: LD_INT 2
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50535: LD_ADDR_VAR 0 32
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: NEG
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: LD_INT 2
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: LD_INT 2
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 2
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 2
50660: PUSH
50661: LD_INT 2
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: LD_INT 2
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 0
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 2
50701: NEG
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 2
50712: NEG
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: LD_INT 3
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: LD_INT 2
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 3
50747: PUSH
50748: LD_INT 2
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 2
50757: PUSH
50758: LD_INT 3
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 2
50767: NEG
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 3
50778: NEG
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50813: LD_ADDR_VAR 0 33
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: LD_INT 1
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: LD_INT 2
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 2
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 2
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: LD_INT 2
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: LD_INT 2
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: LD_INT 1
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 2
50968: NEG
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 2
50979: NEG
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: NEG
50992: PUSH
50993: LD_INT 2
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 2
51003: NEG
51004: PUSH
51005: LD_INT 3
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 2
51015: PUSH
51016: LD_INT 1
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 3
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: LD_INT 3
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: LD_INT 2
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 3
51057: NEG
51058: PUSH
51059: LD_INT 2
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51092: LD_ADDR_VAR 0 34
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: LD_INT 1
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: LD_INT 2
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: LD_INT 2
51188: NEG
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 2
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 2
51217: PUSH
51218: LD_INT 2
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: LD_INT 2
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 2
51248: NEG
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 2
51259: NEG
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 2
51271: NEG
51272: PUSH
51273: LD_INT 2
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: LD_INT 3
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: LD_INT 2
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 3
51306: PUSH
51307: LD_INT 2
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 2
51316: PUSH
51317: LD_INT 3
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 2
51326: NEG
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 3
51337: NEG
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51372: LD_ADDR_VAR 0 35
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 2
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 2
51463: NEG
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51484: LD_ADDR_VAR 0 36
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: NEG
51566: PUSH
51567: LD_INT 2
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: LD_INT 2
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51596: LD_ADDR_VAR 0 37
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: LD_INT 1
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51708: LD_ADDR_VAR 0 38
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 1
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 1
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: LD_INT 1
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: NEG
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 2
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 2
51799: NEG
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51820: LD_ADDR_VAR 0 39
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: LD_INT 1
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 1
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 0
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 1
51878: NEG
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: LD_INT 2
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51932: LD_ADDR_VAR 0 40
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52044: LD_ADDR_VAR 0 41
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: LD_INT 1
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: NEG
52114: PUSH
52115: LD_INT 1
52117: NEG
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: LD_INT 2
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: PUSH
52138: LD_INT 1
52140: NEG
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 2
52158: PUSH
52159: LD_INT 1
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: LD_INT 2
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 2
52199: NEG
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 2
52210: NEG
52211: PUSH
52212: LD_INT 1
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 2
52222: NEG
52223: PUSH
52224: LD_INT 2
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 2
52234: NEG
52235: PUSH
52236: LD_INT 3
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 2
52246: PUSH
52247: LD_INT 1
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 3
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 3
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 3
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 3
52287: PUSH
52288: LD_INT 3
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: LD_INT 3
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 2
52307: NEG
52308: PUSH
52309: LD_INT 1
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 3
52318: NEG
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 3
52329: NEG
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 3
52341: NEG
52342: PUSH
52343: LD_INT 2
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 3
52353: NEG
52354: PUSH
52355: LD_INT 3
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52394: LD_ADDR_VAR 0 42
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 0
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 1
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 1
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: LD_INT 1
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: LD_INT 2
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: LD_INT 2
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 2
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 2
52519: PUSH
52520: LD_INT 2
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: LD_INT 2
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: LD_INT 2
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 2
52560: NEG
52561: PUSH
52562: LD_INT 1
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 2
52572: NEG
52573: PUSH
52574: LD_INT 2
52576: NEG
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: NEG
52585: PUSH
52586: LD_INT 3
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: LD_INT 3
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: LD_INT 3
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: PUSH
52620: LD_INT 2
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 3
52630: PUSH
52631: LD_INT 2
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 3
52640: PUSH
52641: LD_INT 3
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 2
52650: PUSH
52651: LD_INT 3
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: LD_INT 3
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: LD_INT 3
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 1
52680: NEG
52681: PUSH
52682: LD_INT 2
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 3
52691: NEG
52692: PUSH
52693: LD_INT 2
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 3
52703: NEG
52704: PUSH
52705: LD_INT 3
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52744: LD_ADDR_VAR 0 43
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: PUSH
52783: LD_INT 1
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: NEG
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: LD_INT 1
52817: NEG
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: LD_INT 2
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 0
52837: PUSH
52838: LD_INT 2
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 2
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: LD_INT 2
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: LD_INT 2
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 2
52910: NEG
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 2
52921: NEG
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: LD_INT 3
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: LD_INT 3
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: LD_INT 2
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 2
52967: PUSH
52968: LD_INT 1
52970: NEG
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 3
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 3
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: LD_INT 3
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: LD_INT 3
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: LD_INT 2
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 2
53029: NEG
53030: PUSH
53031: LD_INT 1
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 3
53040: NEG
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 3
53051: NEG
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53092: LD_ADDR_VAR 0 44
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: LD_INT 2
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 2
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 2
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 2
53216: PUSH
53217: LD_INT 2
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: LD_INT 2
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: LD_INT 1
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 2
53247: NEG
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 2
53258: NEG
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 2
53270: NEG
53271: PUSH
53272: LD_INT 2
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 2
53282: NEG
53283: PUSH
53284: LD_INT 3
53286: NEG
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 3
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 3
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 3
53325: PUSH
53326: LD_INT 2
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 3
53335: PUSH
53336: LD_INT 3
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: PUSH
53346: LD_INT 3
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 2
53355: NEG
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 3
53366: NEG
53367: PUSH
53368: LD_INT 0
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 3
53377: NEG
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 3
53389: NEG
53390: PUSH
53391: LD_INT 2
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 3
53401: NEG
53402: PUSH
53403: LD_INT 3
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53442: LD_ADDR_VAR 0 45
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 1
53523: NEG
53524: PUSH
53525: LD_INT 2
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: LD_INT 2
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 2
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 2
53567: PUSH
53568: LD_INT 2
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: LD_INT 2
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: LD_INT 2
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 2
53608: NEG
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 2
53620: NEG
53621: PUSH
53622: LD_INT 2
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 2
53632: NEG
53633: PUSH
53634: LD_INT 3
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: LD_INT 3
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: LD_INT 3
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: LD_INT 2
53670: NEG
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 3
53678: PUSH
53679: LD_INT 2
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 3
53688: PUSH
53689: LD_INT 3
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 2
53698: PUSH
53699: LD_INT 3
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: LD_INT 3
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 0
53718: PUSH
53719: LD_INT 3
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: LD_INT 2
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 3
53739: NEG
53740: PUSH
53741: LD_INT 2
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 3
53751: NEG
53752: PUSH
53753: LD_INT 3
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53792: LD_ADDR_VAR 0 46
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: PUSH
53831: LD_INT 1
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: LD_INT 1
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: LD_INT 2
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: LD_INT 2
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 2
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 2
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: LD_INT 2
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 2
53958: NEG
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 2
53969: NEG
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: NEG
53982: PUSH
53983: LD_INT 3
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: LD_INT 3
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: LD_INT 2
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 2
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 3
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 3
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: LD_INT 3
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 3
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: LD_INT 2
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 2
54077: NEG
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 3
54088: NEG
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 3
54099: NEG
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54140: LD_ADDR_VAR 0 47
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: NEG
54222: PUSH
54223: LD_INT 2
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: LD_INT 2
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 1
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 2
54255: NEG
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 2
54267: NEG
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54291: LD_ADDR_VAR 0 48
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: LD_INT 1
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: LD_INT 2
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 2
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 2
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54438: LD_ADDR_VAR 0 49
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 1
54496: NEG
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 2
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 2
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 2
54550: PUSH
54551: LD_INT 2
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 1
54560: PUSH
54561: LD_INT 2
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54582: LD_ADDR_VAR 0 50
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 0
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: NEG
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 2
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 2
54673: PUSH
54674: LD_INT 2
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: LD_INT 2
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: LD_INT 2
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54726: LD_ADDR_VAR 0 51
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: LD_INT 1
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: LD_INT 1
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: LD_INT 2
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: LD_INT 2
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 2
54838: NEG
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 2
54849: NEG
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54873: LD_ADDR_VAR 0 52
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 0
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: LD_INT 2
54958: NEG
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 1
54966: NEG
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 2
54977: NEG
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 2
54988: NEG
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: LD_INT 2
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55024: LD_ADDR_VAR 0 53
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: LD_INT 2
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: LD_INT 2
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 2
55139: PUSH
55140: LD_INT 0
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: LD_INT 1
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 2
55159: PUSH
55160: LD_INT 2
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: LD_INT 2
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: LD_INT 2
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 2
55200: NEG
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 2
55211: NEG
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 2
55223: NEG
55224: PUSH
55225: LD_INT 2
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55254: LD_ADDR_VAR 0 54
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 1
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: NEG
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: LD_INT 2
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: LD_INT 2
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: LD_INT 1
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 2
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 2
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 2
55389: PUSH
55390: LD_INT 2
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: LD_INT 2
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 2
55430: NEG
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 2
55441: NEG
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 2
55453: NEG
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55484: LD_ADDR_VAR 0 55
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: NEG
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: LD_INT 2
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: LD_INT 2
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 2
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 2
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 2
55619: PUSH
55620: LD_INT 2
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 2
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: LD_INT 2
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 2
55660: NEG
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: NEG
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 2
55683: NEG
55684: PUSH
55685: LD_INT 2
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55714: LD_ADDR_VAR 0 56
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 1
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: LD_INT 1
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: LD_INT 2
55799: NEG
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: LD_INT 2
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 2
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: LD_INT 2
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: LD_INT 2
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: LD_INT 2
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 2
55890: NEG
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 2
55901: NEG
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 2
55913: NEG
55914: PUSH
55915: LD_INT 2
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55944: LD_ADDR_VAR 0 57
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: LD_INT 1
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: LD_INT 1
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: NEG
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: LD_INT 2
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: LD_INT 2
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 2
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 2
56069: PUSH
56070: LD_INT 1
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 2
56079: PUSH
56080: LD_INT 2
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: LD_INT 2
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: LD_INT 2
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 2
56120: NEG
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 2
56131: NEG
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 2
56143: NEG
56144: PUSH
56145: LD_INT 2
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56174: LD_ADDR_VAR 0 58
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: LD_INT 1
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: NEG
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: LD_INT 2
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: LD_INT 2
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 2
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 2
56299: PUSH
56300: LD_INT 1
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 2
56309: PUSH
56310: LD_INT 2
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: LD_INT 2
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: LD_INT 2
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: LD_INT 1
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 2
56350: NEG
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 2
56361: NEG
56362: PUSH
56363: LD_INT 1
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 2
56373: NEG
56374: PUSH
56375: LD_INT 2
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56404: LD_ADDR_VAR 0 59
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: LD_INT 1
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 1
56473: NEG
56474: PUSH
56475: LD_INT 1
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56492: LD_ADDR_VAR 0 60
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56580: LD_ADDR_VAR 0 61
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 1
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 1
56638: NEG
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: LD_INT 1
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56668: LD_ADDR_VAR 0 62
56672: PUSH
56673: LD_INT 0
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: LD_INT 1
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56756: LD_ADDR_VAR 0 63
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 0
56773: PUSH
56774: LD_INT 1
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: LD_INT 1
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 1
56825: NEG
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56844: LD_ADDR_VAR 0 64
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 0
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 1
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: LD_INT 0
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: NEG
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: ST_TO_ADDR
// end ; 1 :
56932: GO 62829
56934: LD_INT 1
56936: DOUBLE
56937: EQUAL
56938: IFTRUE 56942
56940: GO 59565
56942: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56943: LD_ADDR_VAR 0 11
56947: PUSH
56948: LD_INT 1
56950: NEG
56951: PUSH
56952: LD_INT 3
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: LD_INT 3
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: LD_INT 2
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: LIST
56986: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56987: LD_ADDR_VAR 0 12
56991: PUSH
56992: LD_INT 2
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 3
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 3
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: LIST
57027: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57028: LD_ADDR_VAR 0 13
57032: PUSH
57033: LD_INT 3
57035: PUSH
57036: LD_INT 2
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 3
57045: PUSH
57046: LD_INT 3
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 2
57055: PUSH
57056: LD_INT 3
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: LIST
57067: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57068: LD_ADDR_VAR 0 14
57072: PUSH
57073: LD_INT 1
57075: PUSH
57076: LD_INT 3
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: LD_INT 3
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: NEG
57096: PUSH
57097: LD_INT 2
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: LIST
57108: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57109: LD_ADDR_VAR 0 15
57113: PUSH
57114: LD_INT 2
57116: NEG
57117: PUSH
57118: LD_INT 1
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 3
57127: NEG
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 3
57138: NEG
57139: PUSH
57140: LD_INT 1
57142: NEG
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: LIST
57152: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57153: LD_ADDR_VAR 0 16
57157: PUSH
57158: LD_INT 2
57160: NEG
57161: PUSH
57162: LD_INT 3
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 3
57172: NEG
57173: PUSH
57174: LD_INT 2
57176: NEG
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 3
57184: NEG
57185: PUSH
57186: LD_INT 3
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: LIST
57198: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57199: LD_ADDR_VAR 0 17
57203: PUSH
57204: LD_INT 1
57206: NEG
57207: PUSH
57208: LD_INT 3
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: LD_INT 3
57221: NEG
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 1
57229: PUSH
57230: LD_INT 2
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: LIST
57242: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57243: LD_ADDR_VAR 0 18
57247: PUSH
57248: LD_INT 2
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 3
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 3
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: LIST
57283: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57284: LD_ADDR_VAR 0 19
57288: PUSH
57289: LD_INT 3
57291: PUSH
57292: LD_INT 2
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 3
57301: PUSH
57302: LD_INT 3
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 2
57311: PUSH
57312: LD_INT 3
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: LIST
57323: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57324: LD_ADDR_VAR 0 20
57328: PUSH
57329: LD_INT 1
57331: PUSH
57332: LD_INT 3
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: LD_INT 3
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 1
57351: NEG
57352: PUSH
57353: LD_INT 2
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: LIST
57364: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57365: LD_ADDR_VAR 0 21
57369: PUSH
57370: LD_INT 2
57372: NEG
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 3
57383: NEG
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 3
57394: NEG
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: LIST
57408: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57409: LD_ADDR_VAR 0 22
57413: PUSH
57414: LD_INT 2
57416: NEG
57417: PUSH
57418: LD_INT 3
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 3
57428: NEG
57429: PUSH
57430: LD_INT 2
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 3
57440: NEG
57441: PUSH
57442: LD_INT 3
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: LIST
57454: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57455: LD_ADDR_VAR 0 23
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: LD_INT 3
57465: NEG
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: LD_INT 4
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: LD_INT 3
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: LIST
57498: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57499: LD_ADDR_VAR 0 24
57503: PUSH
57504: LD_INT 3
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 3
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 4
57527: PUSH
57528: LD_INT 1
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: LIST
57539: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57540: LD_ADDR_VAR 0 25
57544: PUSH
57545: LD_INT 3
57547: PUSH
57548: LD_INT 3
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 4
57557: PUSH
57558: LD_INT 3
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 3
57567: PUSH
57568: LD_INT 4
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: LIST
57579: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57580: LD_ADDR_VAR 0 26
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: LD_INT 3
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: LD_INT 4
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 1
57607: NEG
57608: PUSH
57609: LD_INT 3
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: LIST
57620: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57621: LD_ADDR_VAR 0 27
57625: PUSH
57626: LD_INT 3
57628: NEG
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 3
57639: NEG
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 4
57650: NEG
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: LIST
57664: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57665: LD_ADDR_VAR 0 28
57669: PUSH
57670: LD_INT 3
57672: NEG
57673: PUSH
57674: LD_INT 3
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 3
57684: NEG
57685: PUSH
57686: LD_INT 4
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 4
57696: NEG
57697: PUSH
57698: LD_INT 3
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: LIST
57710: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57711: LD_ADDR_VAR 0 29
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: LD_INT 3
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 0
57730: PUSH
57731: LD_INT 3
57733: NEG
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 1
57741: PUSH
57742: LD_INT 2
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: LD_INT 4
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: LD_INT 4
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 1
57775: PUSH
57776: LD_INT 3
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 1
57786: NEG
57787: PUSH
57788: LD_INT 5
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: LD_INT 5
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: LD_INT 4
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: LD_INT 6
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 0
57832: PUSH
57833: LD_INT 6
57835: NEG
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 1
57843: PUSH
57844: LD_INT 5
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57866: LD_ADDR_VAR 0 30
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 3
57884: PUSH
57885: LD_INT 0
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 3
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 3
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 4
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 4
57925: PUSH
57926: LD_INT 1
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 4
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 5
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 5
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 5
57966: PUSH
57967: LD_INT 1
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 6
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 6
57987: PUSH
57988: LD_INT 1
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58009: LD_ADDR_VAR 0 31
58013: PUSH
58014: LD_INT 3
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 3
58026: PUSH
58027: LD_INT 3
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 2
58036: PUSH
58037: LD_INT 3
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 4
58046: PUSH
58047: LD_INT 3
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 4
58056: PUSH
58057: LD_INT 4
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 3
58066: PUSH
58067: LD_INT 4
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 5
58076: PUSH
58077: LD_INT 4
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 5
58086: PUSH
58087: LD_INT 5
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 4
58096: PUSH
58097: LD_INT 5
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 6
58106: PUSH
58107: LD_INT 5
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 6
58116: PUSH
58117: LD_INT 6
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 5
58126: PUSH
58127: LD_INT 6
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58148: LD_ADDR_VAR 0 32
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: LD_INT 3
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: LD_INT 3
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: LD_INT 2
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: LD_INT 4
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: LD_INT 4
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 1
58206: NEG
58207: PUSH
58208: LD_INT 3
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: LD_INT 5
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: LD_INT 5
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: LD_INT 4
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: LD_INT 6
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: LD_INT 6
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: LD_INT 5
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58291: LD_ADDR_VAR 0 33
58295: PUSH
58296: LD_INT 2
58298: NEG
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 3
58309: NEG
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 3
58320: NEG
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 3
58332: NEG
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 4
58343: NEG
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 4
58354: NEG
58355: PUSH
58356: LD_INT 1
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 4
58366: NEG
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 5
58377: NEG
58378: PUSH
58379: LD_INT 0
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 5
58388: NEG
58389: PUSH
58390: LD_INT 1
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 5
58400: NEG
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 6
58411: NEG
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 6
58422: NEG
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58446: LD_ADDR_VAR 0 34
58450: PUSH
58451: LD_INT 2
58453: NEG
58454: PUSH
58455: LD_INT 3
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 3
58465: NEG
58466: PUSH
58467: LD_INT 2
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 3
58477: NEG
58478: PUSH
58479: LD_INT 3
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 3
58489: NEG
58490: PUSH
58491: LD_INT 4
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 4
58501: NEG
58502: PUSH
58503: LD_INT 3
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 4
58513: NEG
58514: PUSH
58515: LD_INT 4
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 4
58525: NEG
58526: PUSH
58527: LD_INT 5
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 5
58537: NEG
58538: PUSH
58539: LD_INT 4
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 5
58549: NEG
58550: PUSH
58551: LD_INT 5
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 5
58561: NEG
58562: PUSH
58563: LD_INT 6
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 6
58573: NEG
58574: PUSH
58575: LD_INT 5
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 6
58585: NEG
58586: PUSH
58587: LD_INT 6
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58609: LD_ADDR_VAR 0 41
58613: PUSH
58614: LD_INT 0
58616: PUSH
58617: LD_INT 2
58619: NEG
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: LD_INT 3
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 1
58639: PUSH
58640: LD_INT 2
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: LIST
58652: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58653: LD_ADDR_VAR 0 42
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: LD_INT 0
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 2
58670: PUSH
58671: LD_INT 1
58673: NEG
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 3
58681: PUSH
58682: LD_INT 1
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: LIST
58693: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58694: LD_ADDR_VAR 0 43
58698: PUSH
58699: LD_INT 2
58701: PUSH
58702: LD_INT 2
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 3
58711: PUSH
58712: LD_INT 2
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 2
58721: PUSH
58722: LD_INT 3
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: LIST
58733: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58734: LD_ADDR_VAR 0 44
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: LD_INT 2
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: PUSH
58752: LD_INT 3
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 1
58761: NEG
58762: PUSH
58763: LD_INT 2
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: LIST
58774: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58775: LD_ADDR_VAR 0 45
58779: PUSH
58780: LD_INT 2
58782: NEG
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 2
58793: NEG
58794: PUSH
58795: LD_INT 1
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 3
58804: NEG
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: LIST
58818: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58819: LD_ADDR_VAR 0 46
58823: PUSH
58824: LD_INT 2
58826: NEG
58827: PUSH
58828: LD_INT 2
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 2
58838: NEG
58839: PUSH
58840: LD_INT 3
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 3
58850: NEG
58851: PUSH
58852: LD_INT 2
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: LIST
58864: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58865: LD_ADDR_VAR 0 47
58869: PUSH
58870: LD_INT 2
58872: NEG
58873: PUSH
58874: LD_INT 3
58876: NEG
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 1
58884: NEG
58885: PUSH
58886: LD_INT 3
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58898: LD_ADDR_VAR 0 48
58902: PUSH
58903: LD_INT 1
58905: PUSH
58906: LD_INT 2
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 2
58916: PUSH
58917: LD_INT 1
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58929: LD_ADDR_VAR 0 49
58933: PUSH
58934: LD_INT 3
58936: PUSH
58937: LD_INT 1
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 3
58946: PUSH
58947: LD_INT 2
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58958: LD_ADDR_VAR 0 50
58962: PUSH
58963: LD_INT 2
58965: PUSH
58966: LD_INT 3
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: LD_INT 3
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58987: LD_ADDR_VAR 0 51
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: LD_INT 2
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 2
59005: NEG
59006: PUSH
59007: LD_INT 1
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59018: LD_ADDR_VAR 0 52
59022: PUSH
59023: LD_INT 3
59025: NEG
59026: PUSH
59027: LD_INT 1
59029: NEG
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 3
59037: NEG
59038: PUSH
59039: LD_INT 2
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59051: LD_ADDR_VAR 0 53
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: LD_INT 3
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 0
59070: PUSH
59071: LD_INT 3
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 1
59081: PUSH
59082: LD_INT 2
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: LIST
59094: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59095: LD_ADDR_VAR 0 54
59099: PUSH
59100: LD_INT 2
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 3
59113: PUSH
59114: LD_INT 0
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 3
59123: PUSH
59124: LD_INT 1
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: LIST
59135: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59136: LD_ADDR_VAR 0 55
59140: PUSH
59141: LD_INT 3
59143: PUSH
59144: LD_INT 2
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 3
59153: PUSH
59154: LD_INT 3
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 2
59163: PUSH
59164: LD_INT 3
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: LIST
59175: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59176: LD_ADDR_VAR 0 56
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: LD_INT 3
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 0
59193: PUSH
59194: LD_INT 3
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 1
59203: NEG
59204: PUSH
59205: LD_INT 2
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: LIST
59216: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59217: LD_ADDR_VAR 0 57
59221: PUSH
59222: LD_INT 2
59224: NEG
59225: PUSH
59226: LD_INT 1
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 3
59235: NEG
59236: PUSH
59237: LD_INT 0
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 3
59246: NEG
59247: PUSH
59248: LD_INT 1
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: LIST
59260: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59261: LD_ADDR_VAR 0 58
59265: PUSH
59266: LD_INT 2
59268: NEG
59269: PUSH
59270: LD_INT 3
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 3
59280: NEG
59281: PUSH
59282: LD_INT 2
59284: NEG
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 3
59292: NEG
59293: PUSH
59294: LD_INT 3
59296: NEG
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: LIST
59306: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59307: LD_ADDR_VAR 0 59
59311: PUSH
59312: LD_INT 1
59314: NEG
59315: PUSH
59316: LD_INT 2
59318: NEG
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: LD_INT 2
59329: NEG
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: LIST
59350: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59351: LD_ADDR_VAR 0 60
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: LD_INT 1
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 2
59369: PUSH
59370: LD_INT 0
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 2
59379: PUSH
59380: LD_INT 1
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: LIST
59391: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59392: LD_ADDR_VAR 0 61
59396: PUSH
59397: LD_INT 2
59399: PUSH
59400: LD_INT 1
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 2
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 1
59419: PUSH
59420: LD_INT 2
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: LIST
59431: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59432: LD_ADDR_VAR 0 62
59436: PUSH
59437: LD_INT 1
59439: PUSH
59440: LD_INT 2
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: LD_INT 2
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: LD_INT 1
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: LIST
59472: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59473: LD_ADDR_VAR 0 63
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: LD_INT 1
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 2
59491: NEG
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 2
59502: NEG
59503: PUSH
59504: LD_INT 1
59506: NEG
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: LIST
59516: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59517: LD_ADDR_VAR 0 64
59521: PUSH
59522: LD_INT 1
59524: NEG
59525: PUSH
59526: LD_INT 2
59528: NEG
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 2
59536: NEG
59537: PUSH
59538: LD_INT 1
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 2
59548: NEG
59549: PUSH
59550: LD_INT 2
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: LIST
59562: ST_TO_ADDR
// end ; 2 :
59563: GO 62829
59565: LD_INT 2
59567: DOUBLE
59568: EQUAL
59569: IFTRUE 59573
59571: GO 62828
59573: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59574: LD_ADDR_VAR 0 29
59578: PUSH
59579: LD_INT 4
59581: PUSH
59582: LD_INT 0
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 4
59591: PUSH
59592: LD_INT 1
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 5
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 5
59612: PUSH
59613: LD_INT 1
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 4
59622: PUSH
59623: LD_INT 1
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 3
59632: PUSH
59633: LD_INT 0
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 3
59642: PUSH
59643: LD_INT 1
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 3
59653: PUSH
59654: LD_INT 2
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 5
59664: PUSH
59665: LD_INT 2
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 3
59674: PUSH
59675: LD_INT 3
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 3
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 4
59694: PUSH
59695: LD_INT 3
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 4
59704: PUSH
59705: LD_INT 4
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 3
59714: PUSH
59715: LD_INT 4
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 2
59724: PUSH
59725: LD_INT 3
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 2
59734: PUSH
59735: LD_INT 2
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 4
59744: PUSH
59745: LD_INT 2
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 2
59754: PUSH
59755: LD_INT 4
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: LD_INT 4
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: LD_INT 3
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 1
59784: PUSH
59785: LD_INT 4
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 1
59794: PUSH
59795: LD_INT 5
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: LD_INT 5
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: LD_INT 4
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: LD_INT 3
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 2
59836: PUSH
59837: LD_INT 5
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 2
59846: NEG
59847: PUSH
59848: LD_INT 3
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 3
59857: NEG
59858: PUSH
59859: LD_INT 0
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 3
59868: NEG
59869: PUSH
59870: LD_INT 1
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 2
59880: NEG
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 2
59891: NEG
59892: PUSH
59893: LD_INT 1
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 3
59902: NEG
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 4
59913: NEG
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 4
59924: NEG
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 4
59936: NEG
59937: PUSH
59938: LD_INT 2
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 2
59948: NEG
59949: PUSH
59950: LD_INT 2
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 4
59959: NEG
59960: PUSH
59961: LD_INT 4
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 4
59971: NEG
59972: PUSH
59973: LD_INT 5
59975: NEG
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 3
59983: NEG
59984: PUSH
59985: LD_INT 4
59987: NEG
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 3
59995: NEG
59996: PUSH
59997: LD_INT 3
59999: NEG
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 4
60007: NEG
60008: PUSH
60009: LD_INT 3
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 5
60019: NEG
60020: PUSH
60021: LD_INT 4
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 5
60031: NEG
60032: PUSH
60033: LD_INT 5
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 3
60043: NEG
60044: PUSH
60045: LD_INT 5
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 5
60055: NEG
60056: PUSH
60057: LD_INT 3
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60112: LD_ADDR_VAR 0 30
60116: PUSH
60117: LD_INT 4
60119: PUSH
60120: LD_INT 4
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 4
60129: PUSH
60130: LD_INT 3
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 5
60139: PUSH
60140: LD_INT 4
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 5
60149: PUSH
60150: LD_INT 5
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 4
60159: PUSH
60160: LD_INT 5
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 3
60169: PUSH
60170: LD_INT 4
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 3
60179: PUSH
60180: LD_INT 3
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 5
60189: PUSH
60190: LD_INT 3
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 3
60199: PUSH
60200: LD_INT 5
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: LD_INT 3
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 0
60219: PUSH
60220: LD_INT 2
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 1
60229: PUSH
60230: LD_INT 3
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 1
60239: PUSH
60240: LD_INT 4
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 0
60249: PUSH
60250: LD_INT 4
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 1
60259: NEG
60260: PUSH
60261: LD_INT 3
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 1
60270: NEG
60271: PUSH
60272: LD_INT 2
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 2
60281: PUSH
60282: LD_INT 4
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 2
60291: NEG
60292: PUSH
60293: LD_INT 2
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 4
60302: NEG
60303: PUSH
60304: LD_INT 0
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 4
60313: NEG
60314: PUSH
60315: LD_INT 1
60317: NEG
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 3
60325: NEG
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 3
60336: NEG
60337: PUSH
60338: LD_INT 1
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 4
60347: NEG
60348: PUSH
60349: LD_INT 1
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 5
60358: NEG
60359: PUSH
60360: LD_INT 0
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 5
60369: NEG
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 5
60381: NEG
60382: PUSH
60383: LD_INT 2
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 3
60393: NEG
60394: PUSH
60395: LD_INT 2
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 3
60404: NEG
60405: PUSH
60406: LD_INT 3
60408: NEG
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 3
60416: NEG
60417: PUSH
60418: LD_INT 4
60420: NEG
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 2
60428: NEG
60429: PUSH
60430: LD_INT 3
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 2
60440: NEG
60441: PUSH
60442: LD_INT 2
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 3
60452: NEG
60453: PUSH
60454: LD_INT 2
60456: NEG
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 4
60464: NEG
60465: PUSH
60466: LD_INT 3
60468: NEG
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 4
60476: NEG
60477: PUSH
60478: LD_INT 4
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 2
60488: NEG
60489: PUSH
60490: LD_INT 4
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 4
60500: NEG
60501: PUSH
60502: LD_INT 2
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: LD_INT 4
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 0
60523: PUSH
60524: LD_INT 5
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 1
60534: PUSH
60535: LD_INT 4
60537: NEG
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 1
60545: PUSH
60546: LD_INT 3
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 0
60556: PUSH
60557: LD_INT 3
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: NEG
60568: PUSH
60569: LD_INT 4
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 1
60579: NEG
60580: PUSH
60581: LD_INT 5
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 2
60591: PUSH
60592: LD_INT 3
60594: NEG
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 2
60602: NEG
60603: PUSH
60604: LD_INT 5
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60659: LD_ADDR_VAR 0 31
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 4
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: LD_INT 3
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 1
60686: PUSH
60687: LD_INT 4
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 1
60696: PUSH
60697: LD_INT 5
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: LD_INT 5
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 1
60716: NEG
60717: PUSH
60718: LD_INT 4
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: NEG
60728: PUSH
60729: LD_INT 3
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 2
60738: PUSH
60739: LD_INT 5
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 2
60748: NEG
60749: PUSH
60750: LD_INT 3
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 3
60759: NEG
60760: PUSH
60761: LD_INT 0
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 3
60770: NEG
60771: PUSH
60772: LD_INT 1
60774: NEG
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 2
60782: NEG
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 2
60793: NEG
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 3
60804: NEG
60805: PUSH
60806: LD_INT 1
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 4
60815: NEG
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 4
60826: NEG
60827: PUSH
60828: LD_INT 1
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 4
60838: NEG
60839: PUSH
60840: LD_INT 2
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 2
60850: NEG
60851: PUSH
60852: LD_INT 2
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 4
60861: NEG
60862: PUSH
60863: LD_INT 4
60865: NEG
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 4
60873: NEG
60874: PUSH
60875: LD_INT 5
60877: NEG
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 3
60885: NEG
60886: PUSH
60887: LD_INT 4
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 3
60897: NEG
60898: PUSH
60899: LD_INT 3
60901: NEG
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 4
60909: NEG
60910: PUSH
60911: LD_INT 3
60913: NEG
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 5
60921: NEG
60922: PUSH
60923: LD_INT 4
60925: NEG
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 5
60933: NEG
60934: PUSH
60935: LD_INT 5
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 3
60945: NEG
60946: PUSH
60947: LD_INT 5
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 5
60957: NEG
60958: PUSH
60959: LD_INT 3
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 0
60969: PUSH
60970: LD_INT 3
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: LD_INT 4
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 1
60991: PUSH
60992: LD_INT 3
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: LD_INT 2
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: LD_INT 2
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 1
61024: NEG
61025: PUSH
61026: LD_INT 3
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 1
61036: NEG
61037: PUSH
61038: LD_INT 4
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 2
61048: PUSH
61049: LD_INT 2
61051: NEG
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 2
61059: NEG
61060: PUSH
61061: LD_INT 4
61063: NEG
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 4
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 4
61081: PUSH
61082: LD_INT 1
61084: NEG
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 5
61092: PUSH
61093: LD_INT 0
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 5
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 4
61112: PUSH
61113: LD_INT 1
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 3
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 3
61132: PUSH
61133: LD_INT 1
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 3
61143: PUSH
61144: LD_INT 2
61146: NEG
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 5
61154: PUSH
61155: LD_INT 2
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61209: LD_ADDR_VAR 0 32
61213: PUSH
61214: LD_INT 4
61216: NEG
61217: PUSH
61218: LD_INT 0
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 4
61227: NEG
61228: PUSH
61229: LD_INT 1
61231: NEG
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 3
61239: NEG
61240: PUSH
61241: LD_INT 0
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 3
61250: NEG
61251: PUSH
61252: LD_INT 1
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 4
61261: NEG
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 5
61272: NEG
61273: PUSH
61274: LD_INT 0
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 5
61283: NEG
61284: PUSH
61285: LD_INT 1
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 5
61295: NEG
61296: PUSH
61297: LD_INT 2
61299: NEG
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 3
61307: NEG
61308: PUSH
61309: LD_INT 2
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 3
61318: NEG
61319: PUSH
61320: LD_INT 3
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 3
61330: NEG
61331: PUSH
61332: LD_INT 4
61334: NEG
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 2
61342: NEG
61343: PUSH
61344: LD_INT 3
61346: NEG
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 2
61354: NEG
61355: PUSH
61356: LD_INT 2
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 3
61366: NEG
61367: PUSH
61368: LD_INT 2
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 4
61378: NEG
61379: PUSH
61380: LD_INT 3
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 4
61390: NEG
61391: PUSH
61392: LD_INT 4
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 2
61402: NEG
61403: PUSH
61404: LD_INT 4
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 4
61414: NEG
61415: PUSH
61416: LD_INT 2
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: LD_INT 4
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 0
61437: PUSH
61438: LD_INT 5
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 1
61448: PUSH
61449: LD_INT 4
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: LD_INT 3
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: LD_INT 3
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 1
61481: NEG
61482: PUSH
61483: LD_INT 4
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 1
61493: NEG
61494: PUSH
61495: LD_INT 5
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 2
61505: PUSH
61506: LD_INT 3
61508: NEG
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 2
61516: NEG
61517: PUSH
61518: LD_INT 5
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 3
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 3
61538: PUSH
61539: LD_INT 1
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 4
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 4
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 3
61569: PUSH
61570: LD_INT 1
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 2
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 2
61589: PUSH
61590: LD_INT 1
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 2
61600: PUSH
61601: LD_INT 2
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 4
61611: PUSH
61612: LD_INT 2
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 4
61621: PUSH
61622: LD_INT 4
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 4
61631: PUSH
61632: LD_INT 3
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 5
61641: PUSH
61642: LD_INT 4
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 5
61651: PUSH
61652: LD_INT 5
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 4
61661: PUSH
61662: LD_INT 5
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 3
61671: PUSH
61672: LD_INT 4
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 3
61681: PUSH
61682: LD_INT 3
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 5
61691: PUSH
61692: LD_INT 3
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 3
61701: PUSH
61702: LD_INT 5
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61756: LD_ADDR_VAR 0 33
61760: PUSH
61761: LD_INT 4
61763: NEG
61764: PUSH
61765: LD_INT 4
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 4
61775: NEG
61776: PUSH
61777: LD_INT 5
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 3
61787: NEG
61788: PUSH
61789: LD_INT 4
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 3
61799: NEG
61800: PUSH
61801: LD_INT 3
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 4
61811: NEG
61812: PUSH
61813: LD_INT 3
61815: NEG
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 5
61823: NEG
61824: PUSH
61825: LD_INT 4
61827: NEG
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 5
61835: NEG
61836: PUSH
61837: LD_INT 5
61839: NEG
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 3
61847: NEG
61848: PUSH
61849: LD_INT 5
61851: NEG
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 5
61859: NEG
61860: PUSH
61861: LD_INT 3
61863: NEG
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 0
61871: PUSH
61872: LD_INT 3
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 0
61882: PUSH
61883: LD_INT 4
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: PUSH
61894: LD_INT 3
61896: NEG
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 1
61904: PUSH
61905: LD_INT 2
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 0
61915: PUSH
61916: LD_INT 2
61918: NEG
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 1
61926: NEG
61927: PUSH
61928: LD_INT 3
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 1
61938: NEG
61939: PUSH
61940: LD_INT 4
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 2
61950: PUSH
61951: LD_INT 2
61953: NEG
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 2
61961: NEG
61962: PUSH
61963: LD_INT 4
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 4
61973: PUSH
61974: LD_INT 0
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 4
61983: PUSH
61984: LD_INT 1
61986: NEG
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 5
61994: PUSH
61995: LD_INT 0
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 5
62004: PUSH
62005: LD_INT 1
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 4
62014: PUSH
62015: LD_INT 1
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 3
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 3
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 3
62045: PUSH
62046: LD_INT 2
62048: NEG
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 5
62056: PUSH
62057: LD_INT 2
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 3
62066: PUSH
62067: LD_INT 3
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 3
62076: PUSH
62077: LD_INT 2
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 4
62086: PUSH
62087: LD_INT 3
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 4
62096: PUSH
62097: LD_INT 4
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 3
62106: PUSH
62107: LD_INT 4
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 2
62116: PUSH
62117: LD_INT 3
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 2
62126: PUSH
62127: LD_INT 2
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 4
62136: PUSH
62137: LD_INT 2
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 2
62146: PUSH
62147: LD_INT 4
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: LD_INT 4
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 0
62166: PUSH
62167: LD_INT 3
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 1
62176: PUSH
62177: LD_INT 4
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 1
62186: PUSH
62187: LD_INT 5
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 0
62196: PUSH
62197: LD_INT 5
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: NEG
62207: PUSH
62208: LD_INT 4
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 1
62217: NEG
62218: PUSH
62219: LD_INT 3
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 2
62228: PUSH
62229: LD_INT 5
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 2
62238: NEG
62239: PUSH
62240: LD_INT 3
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62294: LD_ADDR_VAR 0 34
62298: PUSH
62299: LD_INT 0
62301: PUSH
62302: LD_INT 4
62304: NEG
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 0
62312: PUSH
62313: LD_INT 5
62315: NEG
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 1
62323: PUSH
62324: LD_INT 4
62326: NEG
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 1
62334: PUSH
62335: LD_INT 3
62337: NEG
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 0
62345: PUSH
62346: LD_INT 3
62348: NEG
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 1
62356: NEG
62357: PUSH
62358: LD_INT 4
62360: NEG
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 1
62368: NEG
62369: PUSH
62370: LD_INT 5
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 2
62380: PUSH
62381: LD_INT 3
62383: NEG
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 2
62391: NEG
62392: PUSH
62393: LD_INT 5
62395: NEG
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 3
62403: PUSH
62404: LD_INT 0
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 3
62413: PUSH
62414: LD_INT 1
62416: NEG
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 4
62424: PUSH
62425: LD_INT 0
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 4
62434: PUSH
62435: LD_INT 1
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 3
62444: PUSH
62445: LD_INT 1
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 2
62454: PUSH
62455: LD_INT 0
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 2
62464: PUSH
62465: LD_INT 1
62467: NEG
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 2
62475: PUSH
62476: LD_INT 2
62478: NEG
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 4
62486: PUSH
62487: LD_INT 2
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 4
62496: PUSH
62497: LD_INT 4
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 4
62506: PUSH
62507: LD_INT 3
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 5
62516: PUSH
62517: LD_INT 4
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 5
62526: PUSH
62527: LD_INT 5
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 4
62536: PUSH
62537: LD_INT 5
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 3
62546: PUSH
62547: LD_INT 4
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 3
62556: PUSH
62557: LD_INT 3
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 5
62566: PUSH
62567: LD_INT 3
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 3
62576: PUSH
62577: LD_INT 5
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: LD_INT 3
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 0
62596: PUSH
62597: LD_INT 2
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 1
62606: PUSH
62607: LD_INT 3
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 1
62616: PUSH
62617: LD_INT 4
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: LD_INT 4
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 1
62636: NEG
62637: PUSH
62638: LD_INT 3
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 1
62647: NEG
62648: PUSH
62649: LD_INT 2
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 2
62658: PUSH
62659: LD_INT 4
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 2
62668: NEG
62669: PUSH
62670: LD_INT 2
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 4
62679: NEG
62680: PUSH
62681: LD_INT 0
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 4
62690: NEG
62691: PUSH
62692: LD_INT 1
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 3
62702: NEG
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 3
62713: NEG
62714: PUSH
62715: LD_INT 1
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 4
62724: NEG
62725: PUSH
62726: LD_INT 1
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 5
62735: NEG
62736: PUSH
62737: LD_INT 0
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 5
62746: NEG
62747: PUSH
62748: LD_INT 1
62750: NEG
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 5
62758: NEG
62759: PUSH
62760: LD_INT 2
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 3
62770: NEG
62771: PUSH
62772: LD_INT 2
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: ST_TO_ADDR
// end ; end ;
62826: GO 62829
62828: POP
// case btype of b_depot , b_warehouse :
62829: LD_VAR 0 1
62833: PUSH
62834: LD_INT 0
62836: DOUBLE
62837: EQUAL
62838: IFTRUE 62848
62840: LD_INT 1
62842: DOUBLE
62843: EQUAL
62844: IFTRUE 62848
62846: GO 63049
62848: POP
// case nation of nation_american :
62849: LD_VAR 0 5
62853: PUSH
62854: LD_INT 1
62856: DOUBLE
62857: EQUAL
62858: IFTRUE 62862
62860: GO 62918
62862: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62863: LD_ADDR_VAR 0 9
62867: PUSH
62868: LD_VAR 0 11
62872: PUSH
62873: LD_VAR 0 12
62877: PUSH
62878: LD_VAR 0 13
62882: PUSH
62883: LD_VAR 0 14
62887: PUSH
62888: LD_VAR 0 15
62892: PUSH
62893: LD_VAR 0 16
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: PUSH
62906: LD_VAR 0 4
62910: PUSH
62911: LD_INT 1
62913: PLUS
62914: ARRAY
62915: ST_TO_ADDR
62916: GO 63047
62918: LD_INT 2
62920: DOUBLE
62921: EQUAL
62922: IFTRUE 62926
62924: GO 62982
62926: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62927: LD_ADDR_VAR 0 9
62931: PUSH
62932: LD_VAR 0 17
62936: PUSH
62937: LD_VAR 0 18
62941: PUSH
62942: LD_VAR 0 19
62946: PUSH
62947: LD_VAR 0 20
62951: PUSH
62952: LD_VAR 0 21
62956: PUSH
62957: LD_VAR 0 22
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: PUSH
62970: LD_VAR 0 4
62974: PUSH
62975: LD_INT 1
62977: PLUS
62978: ARRAY
62979: ST_TO_ADDR
62980: GO 63047
62982: LD_INT 3
62984: DOUBLE
62985: EQUAL
62986: IFTRUE 62990
62988: GO 63046
62990: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62991: LD_ADDR_VAR 0 9
62995: PUSH
62996: LD_VAR 0 23
63000: PUSH
63001: LD_VAR 0 24
63005: PUSH
63006: LD_VAR 0 25
63010: PUSH
63011: LD_VAR 0 26
63015: PUSH
63016: LD_VAR 0 27
63020: PUSH
63021: LD_VAR 0 28
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: PUSH
63034: LD_VAR 0 4
63038: PUSH
63039: LD_INT 1
63041: PLUS
63042: ARRAY
63043: ST_TO_ADDR
63044: GO 63047
63046: POP
63047: GO 63602
63049: LD_INT 2
63051: DOUBLE
63052: EQUAL
63053: IFTRUE 63063
63055: LD_INT 3
63057: DOUBLE
63058: EQUAL
63059: IFTRUE 63063
63061: GO 63119
63063: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63064: LD_ADDR_VAR 0 9
63068: PUSH
63069: LD_VAR 0 29
63073: PUSH
63074: LD_VAR 0 30
63078: PUSH
63079: LD_VAR 0 31
63083: PUSH
63084: LD_VAR 0 32
63088: PUSH
63089: LD_VAR 0 33
63093: PUSH
63094: LD_VAR 0 34
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: PUSH
63107: LD_VAR 0 4
63111: PUSH
63112: LD_INT 1
63114: PLUS
63115: ARRAY
63116: ST_TO_ADDR
63117: GO 63602
63119: LD_INT 16
63121: DOUBLE
63122: EQUAL
63123: IFTRUE 63181
63125: LD_INT 17
63127: DOUBLE
63128: EQUAL
63129: IFTRUE 63181
63131: LD_INT 18
63133: DOUBLE
63134: EQUAL
63135: IFTRUE 63181
63137: LD_INT 19
63139: DOUBLE
63140: EQUAL
63141: IFTRUE 63181
63143: LD_INT 22
63145: DOUBLE
63146: EQUAL
63147: IFTRUE 63181
63149: LD_INT 20
63151: DOUBLE
63152: EQUAL
63153: IFTRUE 63181
63155: LD_INT 21
63157: DOUBLE
63158: EQUAL
63159: IFTRUE 63181
63161: LD_INT 23
63163: DOUBLE
63164: EQUAL
63165: IFTRUE 63181
63167: LD_INT 24
63169: DOUBLE
63170: EQUAL
63171: IFTRUE 63181
63173: LD_INT 25
63175: DOUBLE
63176: EQUAL
63177: IFTRUE 63181
63179: GO 63237
63181: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63182: LD_ADDR_VAR 0 9
63186: PUSH
63187: LD_VAR 0 35
63191: PUSH
63192: LD_VAR 0 36
63196: PUSH
63197: LD_VAR 0 37
63201: PUSH
63202: LD_VAR 0 38
63206: PUSH
63207: LD_VAR 0 39
63211: PUSH
63212: LD_VAR 0 40
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: PUSH
63225: LD_VAR 0 4
63229: PUSH
63230: LD_INT 1
63232: PLUS
63233: ARRAY
63234: ST_TO_ADDR
63235: GO 63602
63237: LD_INT 6
63239: DOUBLE
63240: EQUAL
63241: IFTRUE 63293
63243: LD_INT 7
63245: DOUBLE
63246: EQUAL
63247: IFTRUE 63293
63249: LD_INT 8
63251: DOUBLE
63252: EQUAL
63253: IFTRUE 63293
63255: LD_INT 13
63257: DOUBLE
63258: EQUAL
63259: IFTRUE 63293
63261: LD_INT 12
63263: DOUBLE
63264: EQUAL
63265: IFTRUE 63293
63267: LD_INT 15
63269: DOUBLE
63270: EQUAL
63271: IFTRUE 63293
63273: LD_INT 11
63275: DOUBLE
63276: EQUAL
63277: IFTRUE 63293
63279: LD_INT 14
63281: DOUBLE
63282: EQUAL
63283: IFTRUE 63293
63285: LD_INT 10
63287: DOUBLE
63288: EQUAL
63289: IFTRUE 63293
63291: GO 63349
63293: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63294: LD_ADDR_VAR 0 9
63298: PUSH
63299: LD_VAR 0 41
63303: PUSH
63304: LD_VAR 0 42
63308: PUSH
63309: LD_VAR 0 43
63313: PUSH
63314: LD_VAR 0 44
63318: PUSH
63319: LD_VAR 0 45
63323: PUSH
63324: LD_VAR 0 46
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: PUSH
63337: LD_VAR 0 4
63341: PUSH
63342: LD_INT 1
63344: PLUS
63345: ARRAY
63346: ST_TO_ADDR
63347: GO 63602
63349: LD_INT 36
63351: DOUBLE
63352: EQUAL
63353: IFTRUE 63357
63355: GO 63413
63357: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63358: LD_ADDR_VAR 0 9
63362: PUSH
63363: LD_VAR 0 47
63367: PUSH
63368: LD_VAR 0 48
63372: PUSH
63373: LD_VAR 0 49
63377: PUSH
63378: LD_VAR 0 50
63382: PUSH
63383: LD_VAR 0 51
63387: PUSH
63388: LD_VAR 0 52
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: PUSH
63401: LD_VAR 0 4
63405: PUSH
63406: LD_INT 1
63408: PLUS
63409: ARRAY
63410: ST_TO_ADDR
63411: GO 63602
63413: LD_INT 4
63415: DOUBLE
63416: EQUAL
63417: IFTRUE 63439
63419: LD_INT 5
63421: DOUBLE
63422: EQUAL
63423: IFTRUE 63439
63425: LD_INT 34
63427: DOUBLE
63428: EQUAL
63429: IFTRUE 63439
63431: LD_INT 37
63433: DOUBLE
63434: EQUAL
63435: IFTRUE 63439
63437: GO 63495
63439: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63440: LD_ADDR_VAR 0 9
63444: PUSH
63445: LD_VAR 0 53
63449: PUSH
63450: LD_VAR 0 54
63454: PUSH
63455: LD_VAR 0 55
63459: PUSH
63460: LD_VAR 0 56
63464: PUSH
63465: LD_VAR 0 57
63469: PUSH
63470: LD_VAR 0 58
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: PUSH
63483: LD_VAR 0 4
63487: PUSH
63488: LD_INT 1
63490: PLUS
63491: ARRAY
63492: ST_TO_ADDR
63493: GO 63602
63495: LD_INT 31
63497: DOUBLE
63498: EQUAL
63499: IFTRUE 63545
63501: LD_INT 32
63503: DOUBLE
63504: EQUAL
63505: IFTRUE 63545
63507: LD_INT 33
63509: DOUBLE
63510: EQUAL
63511: IFTRUE 63545
63513: LD_INT 27
63515: DOUBLE
63516: EQUAL
63517: IFTRUE 63545
63519: LD_INT 26
63521: DOUBLE
63522: EQUAL
63523: IFTRUE 63545
63525: LD_INT 28
63527: DOUBLE
63528: EQUAL
63529: IFTRUE 63545
63531: LD_INT 29
63533: DOUBLE
63534: EQUAL
63535: IFTRUE 63545
63537: LD_INT 30
63539: DOUBLE
63540: EQUAL
63541: IFTRUE 63545
63543: GO 63601
63545: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63546: LD_ADDR_VAR 0 9
63550: PUSH
63551: LD_VAR 0 59
63555: PUSH
63556: LD_VAR 0 60
63560: PUSH
63561: LD_VAR 0 61
63565: PUSH
63566: LD_VAR 0 62
63570: PUSH
63571: LD_VAR 0 63
63575: PUSH
63576: LD_VAR 0 64
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: PUSH
63589: LD_VAR 0 4
63593: PUSH
63594: LD_INT 1
63596: PLUS
63597: ARRAY
63598: ST_TO_ADDR
63599: GO 63602
63601: POP
// temp_list2 = [ ] ;
63602: LD_ADDR_VAR 0 10
63606: PUSH
63607: EMPTY
63608: ST_TO_ADDR
// for i in temp_list do
63609: LD_ADDR_VAR 0 8
63613: PUSH
63614: LD_VAR 0 9
63618: PUSH
63619: FOR_IN
63620: IFFALSE 63672
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63622: LD_ADDR_VAR 0 10
63626: PUSH
63627: LD_VAR 0 10
63631: PUSH
63632: LD_VAR 0 8
63636: PUSH
63637: LD_INT 1
63639: ARRAY
63640: PUSH
63641: LD_VAR 0 2
63645: PLUS
63646: PUSH
63647: LD_VAR 0 8
63651: PUSH
63652: LD_INT 2
63654: ARRAY
63655: PUSH
63656: LD_VAR 0 3
63660: PLUS
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: EMPTY
63667: LIST
63668: ADD
63669: ST_TO_ADDR
63670: GO 63619
63672: POP
63673: POP
// result = temp_list2 ;
63674: LD_ADDR_VAR 0 7
63678: PUSH
63679: LD_VAR 0 10
63683: ST_TO_ADDR
// end ;
63684: LD_VAR 0 7
63688: RET
// export function EnemyInRange ( unit , dist ) ; begin
63689: LD_INT 0
63691: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63692: LD_ADDR_VAR 0 3
63696: PUSH
63697: LD_VAR 0 1
63701: PPUSH
63702: CALL_OW 255
63706: PPUSH
63707: LD_VAR 0 1
63711: PPUSH
63712: CALL_OW 250
63716: PPUSH
63717: LD_VAR 0 1
63721: PPUSH
63722: CALL_OW 251
63726: PPUSH
63727: LD_VAR 0 2
63731: PPUSH
63732: CALL 37085 0 4
63736: PUSH
63737: LD_INT 4
63739: ARRAY
63740: ST_TO_ADDR
// end ;
63741: LD_VAR 0 3
63745: RET
// export function PlayerSeeMe ( unit ) ; begin
63746: LD_INT 0
63748: PPUSH
// result := See ( your_side , unit ) ;
63749: LD_ADDR_VAR 0 2
63753: PUSH
63754: LD_OWVAR 2
63758: PPUSH
63759: LD_VAR 0 1
63763: PPUSH
63764: CALL_OW 292
63768: ST_TO_ADDR
// end ;
63769: LD_VAR 0 2
63773: RET
// export function ReverseDir ( unit ) ; begin
63774: LD_INT 0
63776: PPUSH
// if not unit then
63777: LD_VAR 0 1
63781: NOT
63782: IFFALSE 63786
// exit ;
63784: GO 63809
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63786: LD_ADDR_VAR 0 2
63790: PUSH
63791: LD_VAR 0 1
63795: PPUSH
63796: CALL_OW 254
63800: PUSH
63801: LD_INT 3
63803: PLUS
63804: PUSH
63805: LD_INT 6
63807: MOD
63808: ST_TO_ADDR
// end ;
63809: LD_VAR 0 2
63813: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63814: LD_INT 0
63816: PPUSH
63817: PPUSH
63818: PPUSH
63819: PPUSH
63820: PPUSH
// if not hexes then
63821: LD_VAR 0 2
63825: NOT
63826: IFFALSE 63830
// exit ;
63828: GO 63978
// dist := 9999 ;
63830: LD_ADDR_VAR 0 5
63834: PUSH
63835: LD_INT 9999
63837: ST_TO_ADDR
// for i = 1 to hexes do
63838: LD_ADDR_VAR 0 4
63842: PUSH
63843: DOUBLE
63844: LD_INT 1
63846: DEC
63847: ST_TO_ADDR
63848: LD_VAR 0 2
63852: PUSH
63853: FOR_TO
63854: IFFALSE 63966
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63856: LD_VAR 0 1
63860: PPUSH
63861: LD_VAR 0 2
63865: PUSH
63866: LD_VAR 0 4
63870: ARRAY
63871: PUSH
63872: LD_INT 1
63874: ARRAY
63875: PPUSH
63876: LD_VAR 0 2
63880: PUSH
63881: LD_VAR 0 4
63885: ARRAY
63886: PUSH
63887: LD_INT 2
63889: ARRAY
63890: PPUSH
63891: CALL_OW 297
63895: PUSH
63896: LD_VAR 0 5
63900: LESS
63901: IFFALSE 63964
// begin hex := hexes [ i ] ;
63903: LD_ADDR_VAR 0 7
63907: PUSH
63908: LD_VAR 0 2
63912: PUSH
63913: LD_VAR 0 4
63917: ARRAY
63918: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63919: LD_ADDR_VAR 0 5
63923: PUSH
63924: LD_VAR 0 1
63928: PPUSH
63929: LD_VAR 0 2
63933: PUSH
63934: LD_VAR 0 4
63938: ARRAY
63939: PUSH
63940: LD_INT 1
63942: ARRAY
63943: PPUSH
63944: LD_VAR 0 2
63948: PUSH
63949: LD_VAR 0 4
63953: ARRAY
63954: PUSH
63955: LD_INT 2
63957: ARRAY
63958: PPUSH
63959: CALL_OW 297
63963: ST_TO_ADDR
// end ; end ;
63964: GO 63853
63966: POP
63967: POP
// result := hex ;
63968: LD_ADDR_VAR 0 3
63972: PUSH
63973: LD_VAR 0 7
63977: ST_TO_ADDR
// end ;
63978: LD_VAR 0 3
63982: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63983: LD_INT 0
63985: PPUSH
63986: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63987: LD_VAR 0 1
63991: NOT
63992: PUSH
63993: LD_VAR 0 1
63997: PUSH
63998: LD_INT 21
64000: PUSH
64001: LD_INT 2
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 23
64010: PUSH
64011: LD_INT 2
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PPUSH
64022: CALL_OW 69
64026: IN
64027: NOT
64028: OR
64029: IFFALSE 64033
// exit ;
64031: GO 64080
// for i = 1 to 3 do
64033: LD_ADDR_VAR 0 3
64037: PUSH
64038: DOUBLE
64039: LD_INT 1
64041: DEC
64042: ST_TO_ADDR
64043: LD_INT 3
64045: PUSH
64046: FOR_TO
64047: IFFALSE 64078
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64049: LD_VAR 0 1
64053: PPUSH
64054: CALL_OW 250
64058: PPUSH
64059: LD_VAR 0 1
64063: PPUSH
64064: CALL_OW 251
64068: PPUSH
64069: LD_INT 1
64071: PPUSH
64072: CALL_OW 453
64076: GO 64046
64078: POP
64079: POP
// end ;
64080: LD_VAR 0 2
64084: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64085: LD_INT 0
64087: PPUSH
64088: PPUSH
64089: PPUSH
64090: PPUSH
64091: PPUSH
64092: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64093: LD_VAR 0 1
64097: NOT
64098: PUSH
64099: LD_VAR 0 2
64103: NOT
64104: OR
64105: PUSH
64106: LD_VAR 0 1
64110: PPUSH
64111: CALL_OW 314
64115: OR
64116: IFFALSE 64120
// exit ;
64118: GO 64561
// x := GetX ( enemy_unit ) ;
64120: LD_ADDR_VAR 0 7
64124: PUSH
64125: LD_VAR 0 2
64129: PPUSH
64130: CALL_OW 250
64134: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64135: LD_ADDR_VAR 0 8
64139: PUSH
64140: LD_VAR 0 2
64144: PPUSH
64145: CALL_OW 251
64149: ST_TO_ADDR
// if not x or not y then
64150: LD_VAR 0 7
64154: NOT
64155: PUSH
64156: LD_VAR 0 8
64160: NOT
64161: OR
64162: IFFALSE 64166
// exit ;
64164: GO 64561
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64166: LD_ADDR_VAR 0 6
64170: PUSH
64171: LD_VAR 0 7
64175: PPUSH
64176: LD_INT 0
64178: PPUSH
64179: LD_INT 4
64181: PPUSH
64182: CALL_OW 272
64186: PUSH
64187: LD_VAR 0 8
64191: PPUSH
64192: LD_INT 0
64194: PPUSH
64195: LD_INT 4
64197: PPUSH
64198: CALL_OW 273
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_VAR 0 7
64211: PPUSH
64212: LD_INT 1
64214: PPUSH
64215: LD_INT 4
64217: PPUSH
64218: CALL_OW 272
64222: PUSH
64223: LD_VAR 0 8
64227: PPUSH
64228: LD_INT 1
64230: PPUSH
64231: LD_INT 4
64233: PPUSH
64234: CALL_OW 273
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_VAR 0 7
64247: PPUSH
64248: LD_INT 2
64250: PPUSH
64251: LD_INT 4
64253: PPUSH
64254: CALL_OW 272
64258: PUSH
64259: LD_VAR 0 8
64263: PPUSH
64264: LD_INT 2
64266: PPUSH
64267: LD_INT 4
64269: PPUSH
64270: CALL_OW 273
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_VAR 0 7
64283: PPUSH
64284: LD_INT 3
64286: PPUSH
64287: LD_INT 4
64289: PPUSH
64290: CALL_OW 272
64294: PUSH
64295: LD_VAR 0 8
64299: PPUSH
64300: LD_INT 3
64302: PPUSH
64303: LD_INT 4
64305: PPUSH
64306: CALL_OW 273
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_VAR 0 7
64319: PPUSH
64320: LD_INT 4
64322: PPUSH
64323: LD_INT 4
64325: PPUSH
64326: CALL_OW 272
64330: PUSH
64331: LD_VAR 0 8
64335: PPUSH
64336: LD_INT 4
64338: PPUSH
64339: LD_INT 4
64341: PPUSH
64342: CALL_OW 273
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_VAR 0 7
64355: PPUSH
64356: LD_INT 5
64358: PPUSH
64359: LD_INT 4
64361: PPUSH
64362: CALL_OW 272
64366: PUSH
64367: LD_VAR 0 8
64371: PPUSH
64372: LD_INT 5
64374: PPUSH
64375: LD_INT 4
64377: PPUSH
64378: CALL_OW 273
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: ST_TO_ADDR
// for i = tmp downto 1 do
64395: LD_ADDR_VAR 0 4
64399: PUSH
64400: DOUBLE
64401: LD_VAR 0 6
64405: INC
64406: ST_TO_ADDR
64407: LD_INT 1
64409: PUSH
64410: FOR_DOWNTO
64411: IFFALSE 64512
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64413: LD_VAR 0 6
64417: PUSH
64418: LD_VAR 0 4
64422: ARRAY
64423: PUSH
64424: LD_INT 1
64426: ARRAY
64427: PPUSH
64428: LD_VAR 0 6
64432: PUSH
64433: LD_VAR 0 4
64437: ARRAY
64438: PUSH
64439: LD_INT 2
64441: ARRAY
64442: PPUSH
64443: CALL_OW 488
64447: NOT
64448: PUSH
64449: LD_VAR 0 6
64453: PUSH
64454: LD_VAR 0 4
64458: ARRAY
64459: PUSH
64460: LD_INT 1
64462: ARRAY
64463: PPUSH
64464: LD_VAR 0 6
64468: PUSH
64469: LD_VAR 0 4
64473: ARRAY
64474: PUSH
64475: LD_INT 2
64477: ARRAY
64478: PPUSH
64479: CALL_OW 428
64483: PUSH
64484: LD_INT 0
64486: NONEQUAL
64487: OR
64488: IFFALSE 64510
// tmp := Delete ( tmp , i ) ;
64490: LD_ADDR_VAR 0 6
64494: PUSH
64495: LD_VAR 0 6
64499: PPUSH
64500: LD_VAR 0 4
64504: PPUSH
64505: CALL_OW 3
64509: ST_TO_ADDR
64510: GO 64410
64512: POP
64513: POP
// j := GetClosestHex ( unit , tmp ) ;
64514: LD_ADDR_VAR 0 5
64518: PUSH
64519: LD_VAR 0 1
64523: PPUSH
64524: LD_VAR 0 6
64528: PPUSH
64529: CALL 63814 0 2
64533: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64534: LD_VAR 0 1
64538: PPUSH
64539: LD_VAR 0 5
64543: PUSH
64544: LD_INT 1
64546: ARRAY
64547: PPUSH
64548: LD_VAR 0 5
64552: PUSH
64553: LD_INT 2
64555: ARRAY
64556: PPUSH
64557: CALL_OW 111
// end ;
64561: LD_VAR 0 3
64565: RET
// export function PrepareApemanSoldier ( ) ; begin
64566: LD_INT 0
64568: PPUSH
// uc_nation := 0 ;
64569: LD_ADDR_OWVAR 21
64573: PUSH
64574: LD_INT 0
64576: ST_TO_ADDR
// hc_sex := sex_male ;
64577: LD_ADDR_OWVAR 27
64581: PUSH
64582: LD_INT 1
64584: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64585: LD_ADDR_OWVAR 28
64589: PUSH
64590: LD_INT 15
64592: ST_TO_ADDR
// hc_gallery :=  ;
64593: LD_ADDR_OWVAR 33
64597: PUSH
64598: LD_STRING 
64600: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64601: LD_ADDR_OWVAR 31
64605: PUSH
64606: LD_INT 0
64608: PPUSH
64609: LD_INT 3
64611: PPUSH
64612: CALL_OW 12
64616: PUSH
64617: LD_INT 0
64619: PPUSH
64620: LD_INT 3
64622: PPUSH
64623: CALL_OW 12
64627: PUSH
64628: LD_INT 0
64630: PUSH
64631: LD_INT 0
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: ST_TO_ADDR
// end ;
64640: LD_VAR 0 1
64644: RET
// export function PrepareApemanEngineer ( ) ; begin
64645: LD_INT 0
64647: PPUSH
// uc_nation := 0 ;
64648: LD_ADDR_OWVAR 21
64652: PUSH
64653: LD_INT 0
64655: ST_TO_ADDR
// hc_sex := sex_male ;
64656: LD_ADDR_OWVAR 27
64660: PUSH
64661: LD_INT 1
64663: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64664: LD_ADDR_OWVAR 28
64668: PUSH
64669: LD_INT 16
64671: ST_TO_ADDR
// hc_gallery :=  ;
64672: LD_ADDR_OWVAR 33
64676: PUSH
64677: LD_STRING 
64679: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64680: LD_ADDR_OWVAR 31
64684: PUSH
64685: LD_INT 0
64687: PPUSH
64688: LD_INT 3
64690: PPUSH
64691: CALL_OW 12
64695: PUSH
64696: LD_INT 0
64698: PPUSH
64699: LD_INT 3
64701: PPUSH
64702: CALL_OW 12
64706: PUSH
64707: LD_INT 0
64709: PUSH
64710: LD_INT 0
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: ST_TO_ADDR
// end ;
64719: LD_VAR 0 1
64723: RET
// export function PrepareApeman ( agressivity ) ; begin
64724: LD_INT 0
64726: PPUSH
// uc_side := 0 ;
64727: LD_ADDR_OWVAR 20
64731: PUSH
64732: LD_INT 0
64734: ST_TO_ADDR
// uc_nation := 0 ;
64735: LD_ADDR_OWVAR 21
64739: PUSH
64740: LD_INT 0
64742: ST_TO_ADDR
// hc_sex := sex_male ;
64743: LD_ADDR_OWVAR 27
64747: PUSH
64748: LD_INT 1
64750: ST_TO_ADDR
// hc_class := class_apeman ;
64751: LD_ADDR_OWVAR 28
64755: PUSH
64756: LD_INT 12
64758: ST_TO_ADDR
// hc_gallery :=  ;
64759: LD_ADDR_OWVAR 33
64763: PUSH
64764: LD_STRING 
64766: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64767: LD_ADDR_OWVAR 35
64771: PUSH
64772: LD_VAR 0 1
64776: NEG
64777: PPUSH
64778: LD_VAR 0 1
64782: PPUSH
64783: CALL_OW 12
64787: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64788: LD_ADDR_OWVAR 31
64792: PUSH
64793: LD_INT 0
64795: PPUSH
64796: LD_INT 3
64798: PPUSH
64799: CALL_OW 12
64803: PUSH
64804: LD_INT 0
64806: PPUSH
64807: LD_INT 3
64809: PPUSH
64810: CALL_OW 12
64814: PUSH
64815: LD_INT 0
64817: PUSH
64818: LD_INT 0
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: ST_TO_ADDR
// end ;
64827: LD_VAR 0 2
64831: RET
// export function PrepareTiger ( agressivity ) ; begin
64832: LD_INT 0
64834: PPUSH
// uc_side := 0 ;
64835: LD_ADDR_OWVAR 20
64839: PUSH
64840: LD_INT 0
64842: ST_TO_ADDR
// uc_nation := 0 ;
64843: LD_ADDR_OWVAR 21
64847: PUSH
64848: LD_INT 0
64850: ST_TO_ADDR
// hc_class := class_tiger ;
64851: LD_ADDR_OWVAR 28
64855: PUSH
64856: LD_INT 14
64858: ST_TO_ADDR
// hc_gallery :=  ;
64859: LD_ADDR_OWVAR 33
64863: PUSH
64864: LD_STRING 
64866: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64867: LD_ADDR_OWVAR 35
64871: PUSH
64872: LD_VAR 0 1
64876: NEG
64877: PPUSH
64878: LD_VAR 0 1
64882: PPUSH
64883: CALL_OW 12
64887: ST_TO_ADDR
// end ;
64888: LD_VAR 0 2
64892: RET
// export function PrepareEnchidna ( ) ; begin
64893: LD_INT 0
64895: PPUSH
// uc_side := 0 ;
64896: LD_ADDR_OWVAR 20
64900: PUSH
64901: LD_INT 0
64903: ST_TO_ADDR
// uc_nation := 0 ;
64904: LD_ADDR_OWVAR 21
64908: PUSH
64909: LD_INT 0
64911: ST_TO_ADDR
// hc_class := class_baggie ;
64912: LD_ADDR_OWVAR 28
64916: PUSH
64917: LD_INT 13
64919: ST_TO_ADDR
// hc_gallery :=  ;
64920: LD_ADDR_OWVAR 33
64924: PUSH
64925: LD_STRING 
64927: ST_TO_ADDR
// end ;
64928: LD_VAR 0 1
64932: RET
// export function PrepareFrog ( ) ; begin
64933: LD_INT 0
64935: PPUSH
// uc_side := 0 ;
64936: LD_ADDR_OWVAR 20
64940: PUSH
64941: LD_INT 0
64943: ST_TO_ADDR
// uc_nation := 0 ;
64944: LD_ADDR_OWVAR 21
64948: PUSH
64949: LD_INT 0
64951: ST_TO_ADDR
// hc_class := class_frog ;
64952: LD_ADDR_OWVAR 28
64956: PUSH
64957: LD_INT 19
64959: ST_TO_ADDR
// hc_gallery :=  ;
64960: LD_ADDR_OWVAR 33
64964: PUSH
64965: LD_STRING 
64967: ST_TO_ADDR
// end ;
64968: LD_VAR 0 1
64972: RET
// export function PrepareFish ( ) ; begin
64973: LD_INT 0
64975: PPUSH
// uc_side := 0 ;
64976: LD_ADDR_OWVAR 20
64980: PUSH
64981: LD_INT 0
64983: ST_TO_ADDR
// uc_nation := 0 ;
64984: LD_ADDR_OWVAR 21
64988: PUSH
64989: LD_INT 0
64991: ST_TO_ADDR
// hc_class := class_fish ;
64992: LD_ADDR_OWVAR 28
64996: PUSH
64997: LD_INT 20
64999: ST_TO_ADDR
// hc_gallery :=  ;
65000: LD_ADDR_OWVAR 33
65004: PUSH
65005: LD_STRING 
65007: ST_TO_ADDR
// end ;
65008: LD_VAR 0 1
65012: RET
// export function PrepareBird ( ) ; begin
65013: LD_INT 0
65015: PPUSH
// uc_side := 0 ;
65016: LD_ADDR_OWVAR 20
65020: PUSH
65021: LD_INT 0
65023: ST_TO_ADDR
// uc_nation := 0 ;
65024: LD_ADDR_OWVAR 21
65028: PUSH
65029: LD_INT 0
65031: ST_TO_ADDR
// hc_class := class_phororhacos ;
65032: LD_ADDR_OWVAR 28
65036: PUSH
65037: LD_INT 18
65039: ST_TO_ADDR
// hc_gallery :=  ;
65040: LD_ADDR_OWVAR 33
65044: PUSH
65045: LD_STRING 
65047: ST_TO_ADDR
// end ;
65048: LD_VAR 0 1
65052: RET
// export function PrepareHorse ( ) ; begin
65053: LD_INT 0
65055: PPUSH
// uc_side := 0 ;
65056: LD_ADDR_OWVAR 20
65060: PUSH
65061: LD_INT 0
65063: ST_TO_ADDR
// uc_nation := 0 ;
65064: LD_ADDR_OWVAR 21
65068: PUSH
65069: LD_INT 0
65071: ST_TO_ADDR
// hc_class := 21 ;
65072: LD_ADDR_OWVAR 28
65076: PUSH
65077: LD_INT 21
65079: ST_TO_ADDR
// hc_gallery :=  ;
65080: LD_ADDR_OWVAR 33
65084: PUSH
65085: LD_STRING 
65087: ST_TO_ADDR
// end ;
65088: LD_VAR 0 1
65092: RET
// export function PrepareMastodont ( ) ; begin
65093: LD_INT 0
65095: PPUSH
// uc_side := 0 ;
65096: LD_ADDR_OWVAR 20
65100: PUSH
65101: LD_INT 0
65103: ST_TO_ADDR
// uc_nation := 0 ;
65104: LD_ADDR_OWVAR 21
65108: PUSH
65109: LD_INT 0
65111: ST_TO_ADDR
// vc_chassis := 31 ;
65112: LD_ADDR_OWVAR 37
65116: PUSH
65117: LD_INT 31
65119: ST_TO_ADDR
// vc_control := control_rider ;
65120: LD_ADDR_OWVAR 38
65124: PUSH
65125: LD_INT 4
65127: ST_TO_ADDR
// end ;
65128: LD_VAR 0 1
65132: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65133: LD_INT 0
65135: PPUSH
65136: PPUSH
65137: PPUSH
// uc_side = 0 ;
65138: LD_ADDR_OWVAR 20
65142: PUSH
65143: LD_INT 0
65145: ST_TO_ADDR
// uc_nation = 0 ;
65146: LD_ADDR_OWVAR 21
65150: PUSH
65151: LD_INT 0
65153: ST_TO_ADDR
// InitHc_All ( ) ;
65154: CALL_OW 584
// InitVc ;
65158: CALL_OW 20
// if mastodonts then
65162: LD_VAR 0 6
65166: IFFALSE 65233
// for i = 1 to mastodonts do
65168: LD_ADDR_VAR 0 11
65172: PUSH
65173: DOUBLE
65174: LD_INT 1
65176: DEC
65177: ST_TO_ADDR
65178: LD_VAR 0 6
65182: PUSH
65183: FOR_TO
65184: IFFALSE 65231
// begin vc_chassis := 31 ;
65186: LD_ADDR_OWVAR 37
65190: PUSH
65191: LD_INT 31
65193: ST_TO_ADDR
// vc_control := control_rider ;
65194: LD_ADDR_OWVAR 38
65198: PUSH
65199: LD_INT 4
65201: ST_TO_ADDR
// animal := CreateVehicle ;
65202: LD_ADDR_VAR 0 12
65206: PUSH
65207: CALL_OW 45
65211: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65212: LD_VAR 0 12
65216: PPUSH
65217: LD_VAR 0 8
65221: PPUSH
65222: LD_INT 0
65224: PPUSH
65225: CALL 67368 0 3
// end ;
65229: GO 65183
65231: POP
65232: POP
// if horses then
65233: LD_VAR 0 5
65237: IFFALSE 65304
// for i = 1 to horses do
65239: LD_ADDR_VAR 0 11
65243: PUSH
65244: DOUBLE
65245: LD_INT 1
65247: DEC
65248: ST_TO_ADDR
65249: LD_VAR 0 5
65253: PUSH
65254: FOR_TO
65255: IFFALSE 65302
// begin hc_class := 21 ;
65257: LD_ADDR_OWVAR 28
65261: PUSH
65262: LD_INT 21
65264: ST_TO_ADDR
// hc_gallery :=  ;
65265: LD_ADDR_OWVAR 33
65269: PUSH
65270: LD_STRING 
65272: ST_TO_ADDR
// animal := CreateHuman ;
65273: LD_ADDR_VAR 0 12
65277: PUSH
65278: CALL_OW 44
65282: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65283: LD_VAR 0 12
65287: PPUSH
65288: LD_VAR 0 8
65292: PPUSH
65293: LD_INT 0
65295: PPUSH
65296: CALL 67368 0 3
// end ;
65300: GO 65254
65302: POP
65303: POP
// if birds then
65304: LD_VAR 0 1
65308: IFFALSE 65375
// for i = 1 to birds do
65310: LD_ADDR_VAR 0 11
65314: PUSH
65315: DOUBLE
65316: LD_INT 1
65318: DEC
65319: ST_TO_ADDR
65320: LD_VAR 0 1
65324: PUSH
65325: FOR_TO
65326: IFFALSE 65373
// begin hc_class = 18 ;
65328: LD_ADDR_OWVAR 28
65332: PUSH
65333: LD_INT 18
65335: ST_TO_ADDR
// hc_gallery =  ;
65336: LD_ADDR_OWVAR 33
65340: PUSH
65341: LD_STRING 
65343: ST_TO_ADDR
// animal := CreateHuman ;
65344: LD_ADDR_VAR 0 12
65348: PUSH
65349: CALL_OW 44
65353: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65354: LD_VAR 0 12
65358: PPUSH
65359: LD_VAR 0 8
65363: PPUSH
65364: LD_INT 0
65366: PPUSH
65367: CALL 67368 0 3
// end ;
65371: GO 65325
65373: POP
65374: POP
// if tigers then
65375: LD_VAR 0 2
65379: IFFALSE 65463
// for i = 1 to tigers do
65381: LD_ADDR_VAR 0 11
65385: PUSH
65386: DOUBLE
65387: LD_INT 1
65389: DEC
65390: ST_TO_ADDR
65391: LD_VAR 0 2
65395: PUSH
65396: FOR_TO
65397: IFFALSE 65461
// begin hc_class = class_tiger ;
65399: LD_ADDR_OWVAR 28
65403: PUSH
65404: LD_INT 14
65406: ST_TO_ADDR
// hc_gallery =  ;
65407: LD_ADDR_OWVAR 33
65411: PUSH
65412: LD_STRING 
65414: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65415: LD_ADDR_OWVAR 35
65419: PUSH
65420: LD_INT 7
65422: NEG
65423: PPUSH
65424: LD_INT 7
65426: PPUSH
65427: CALL_OW 12
65431: ST_TO_ADDR
// animal := CreateHuman ;
65432: LD_ADDR_VAR 0 12
65436: PUSH
65437: CALL_OW 44
65441: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65442: LD_VAR 0 12
65446: PPUSH
65447: LD_VAR 0 8
65451: PPUSH
65452: LD_INT 0
65454: PPUSH
65455: CALL 67368 0 3
// end ;
65459: GO 65396
65461: POP
65462: POP
// if apemans then
65463: LD_VAR 0 3
65467: IFFALSE 65590
// for i = 1 to apemans do
65469: LD_ADDR_VAR 0 11
65473: PUSH
65474: DOUBLE
65475: LD_INT 1
65477: DEC
65478: ST_TO_ADDR
65479: LD_VAR 0 3
65483: PUSH
65484: FOR_TO
65485: IFFALSE 65588
// begin hc_class = class_apeman ;
65487: LD_ADDR_OWVAR 28
65491: PUSH
65492: LD_INT 12
65494: ST_TO_ADDR
// hc_gallery =  ;
65495: LD_ADDR_OWVAR 33
65499: PUSH
65500: LD_STRING 
65502: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65503: LD_ADDR_OWVAR 35
65507: PUSH
65508: LD_INT 2
65510: NEG
65511: PPUSH
65512: LD_INT 2
65514: PPUSH
65515: CALL_OW 12
65519: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65520: LD_ADDR_OWVAR 31
65524: PUSH
65525: LD_INT 1
65527: PPUSH
65528: LD_INT 3
65530: PPUSH
65531: CALL_OW 12
65535: PUSH
65536: LD_INT 1
65538: PPUSH
65539: LD_INT 3
65541: PPUSH
65542: CALL_OW 12
65546: PUSH
65547: LD_INT 0
65549: PUSH
65550: LD_INT 0
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: ST_TO_ADDR
// animal := CreateHuman ;
65559: LD_ADDR_VAR 0 12
65563: PUSH
65564: CALL_OW 44
65568: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65569: LD_VAR 0 12
65573: PPUSH
65574: LD_VAR 0 8
65578: PPUSH
65579: LD_INT 0
65581: PPUSH
65582: CALL 67368 0 3
// end ;
65586: GO 65484
65588: POP
65589: POP
// if enchidnas then
65590: LD_VAR 0 4
65594: IFFALSE 65661
// for i = 1 to enchidnas do
65596: LD_ADDR_VAR 0 11
65600: PUSH
65601: DOUBLE
65602: LD_INT 1
65604: DEC
65605: ST_TO_ADDR
65606: LD_VAR 0 4
65610: PUSH
65611: FOR_TO
65612: IFFALSE 65659
// begin hc_class = 13 ;
65614: LD_ADDR_OWVAR 28
65618: PUSH
65619: LD_INT 13
65621: ST_TO_ADDR
// hc_gallery =  ;
65622: LD_ADDR_OWVAR 33
65626: PUSH
65627: LD_STRING 
65629: ST_TO_ADDR
// animal := CreateHuman ;
65630: LD_ADDR_VAR 0 12
65634: PUSH
65635: CALL_OW 44
65639: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65640: LD_VAR 0 12
65644: PPUSH
65645: LD_VAR 0 8
65649: PPUSH
65650: LD_INT 0
65652: PPUSH
65653: CALL 67368 0 3
// end ;
65657: GO 65611
65659: POP
65660: POP
// if fishes then
65661: LD_VAR 0 7
65665: IFFALSE 65732
// for i = 1 to fishes do
65667: LD_ADDR_VAR 0 11
65671: PUSH
65672: DOUBLE
65673: LD_INT 1
65675: DEC
65676: ST_TO_ADDR
65677: LD_VAR 0 7
65681: PUSH
65682: FOR_TO
65683: IFFALSE 65730
// begin hc_class = 20 ;
65685: LD_ADDR_OWVAR 28
65689: PUSH
65690: LD_INT 20
65692: ST_TO_ADDR
// hc_gallery =  ;
65693: LD_ADDR_OWVAR 33
65697: PUSH
65698: LD_STRING 
65700: ST_TO_ADDR
// animal := CreateHuman ;
65701: LD_ADDR_VAR 0 12
65705: PUSH
65706: CALL_OW 44
65710: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65711: LD_VAR 0 12
65715: PPUSH
65716: LD_VAR 0 9
65720: PPUSH
65721: LD_INT 0
65723: PPUSH
65724: CALL 67368 0 3
// end ;
65728: GO 65682
65730: POP
65731: POP
// end ;
65732: LD_VAR 0 10
65736: RET
// export function WantHeal ( sci , unit ) ; begin
65737: LD_INT 0
65739: PPUSH
// if GetTaskList ( sci ) > 0 then
65740: LD_VAR 0 1
65744: PPUSH
65745: CALL_OW 437
65749: PUSH
65750: LD_INT 0
65752: GREATER
65753: IFFALSE 65823
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65755: LD_VAR 0 1
65759: PPUSH
65760: CALL_OW 437
65764: PUSH
65765: LD_INT 1
65767: ARRAY
65768: PUSH
65769: LD_INT 1
65771: ARRAY
65772: PUSH
65773: LD_STRING l
65775: EQUAL
65776: PUSH
65777: LD_VAR 0 1
65781: PPUSH
65782: CALL_OW 437
65786: PUSH
65787: LD_INT 1
65789: ARRAY
65790: PUSH
65791: LD_INT 4
65793: ARRAY
65794: PUSH
65795: LD_VAR 0 2
65799: EQUAL
65800: AND
65801: IFFALSE 65813
// result := true else
65803: LD_ADDR_VAR 0 3
65807: PUSH
65808: LD_INT 1
65810: ST_TO_ADDR
65811: GO 65821
// result := false ;
65813: LD_ADDR_VAR 0 3
65817: PUSH
65818: LD_INT 0
65820: ST_TO_ADDR
// end else
65821: GO 65831
// result := false ;
65823: LD_ADDR_VAR 0 3
65827: PUSH
65828: LD_INT 0
65830: ST_TO_ADDR
// end ;
65831: LD_VAR 0 3
65835: RET
// export function HealTarget ( sci ) ; begin
65836: LD_INT 0
65838: PPUSH
// if not sci then
65839: LD_VAR 0 1
65843: NOT
65844: IFFALSE 65848
// exit ;
65846: GO 65913
// result := 0 ;
65848: LD_ADDR_VAR 0 2
65852: PUSH
65853: LD_INT 0
65855: ST_TO_ADDR
// if GetTaskList ( sci ) then
65856: LD_VAR 0 1
65860: PPUSH
65861: CALL_OW 437
65865: IFFALSE 65913
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65867: LD_VAR 0 1
65871: PPUSH
65872: CALL_OW 437
65876: PUSH
65877: LD_INT 1
65879: ARRAY
65880: PUSH
65881: LD_INT 1
65883: ARRAY
65884: PUSH
65885: LD_STRING l
65887: EQUAL
65888: IFFALSE 65913
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65890: LD_ADDR_VAR 0 2
65894: PUSH
65895: LD_VAR 0 1
65899: PPUSH
65900: CALL_OW 437
65904: PUSH
65905: LD_INT 1
65907: ARRAY
65908: PUSH
65909: LD_INT 4
65911: ARRAY
65912: ST_TO_ADDR
// end ;
65913: LD_VAR 0 2
65917: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65918: LD_INT 0
65920: PPUSH
65921: PPUSH
65922: PPUSH
65923: PPUSH
// if not base_units then
65924: LD_VAR 0 1
65928: NOT
65929: IFFALSE 65933
// exit ;
65931: GO 66020
// result := false ;
65933: LD_ADDR_VAR 0 2
65937: PUSH
65938: LD_INT 0
65940: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65941: LD_ADDR_VAR 0 5
65945: PUSH
65946: LD_VAR 0 1
65950: PPUSH
65951: LD_INT 21
65953: PUSH
65954: LD_INT 3
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PPUSH
65961: CALL_OW 72
65965: ST_TO_ADDR
// if not tmp then
65966: LD_VAR 0 5
65970: NOT
65971: IFFALSE 65975
// exit ;
65973: GO 66020
// for i in tmp do
65975: LD_ADDR_VAR 0 3
65979: PUSH
65980: LD_VAR 0 5
65984: PUSH
65985: FOR_IN
65986: IFFALSE 66018
// begin result := EnemyInRange ( i , 22 ) ;
65988: LD_ADDR_VAR 0 2
65992: PUSH
65993: LD_VAR 0 3
65997: PPUSH
65998: LD_INT 22
66000: PPUSH
66001: CALL 63689 0 2
66005: ST_TO_ADDR
// if result then
66006: LD_VAR 0 2
66010: IFFALSE 66016
// exit ;
66012: POP
66013: POP
66014: GO 66020
// end ;
66016: GO 65985
66018: POP
66019: POP
// end ;
66020: LD_VAR 0 2
66024: RET
// export function FilterByTag ( units , tag ) ; begin
66025: LD_INT 0
66027: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66028: LD_ADDR_VAR 0 3
66032: PUSH
66033: LD_VAR 0 1
66037: PPUSH
66038: LD_INT 120
66040: PUSH
66041: LD_VAR 0 2
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PPUSH
66050: CALL_OW 72
66054: ST_TO_ADDR
// end ;
66055: LD_VAR 0 3
66059: RET
// export function IsDriver ( un ) ; begin
66060: LD_INT 0
66062: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66063: LD_ADDR_VAR 0 2
66067: PUSH
66068: LD_VAR 0 1
66072: PUSH
66073: LD_INT 55
66075: PUSH
66076: EMPTY
66077: LIST
66078: PPUSH
66079: CALL_OW 69
66083: IN
66084: ST_TO_ADDR
// end ;
66085: LD_VAR 0 2
66089: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66090: LD_INT 0
66092: PPUSH
66093: PPUSH
// list := [ ] ;
66094: LD_ADDR_VAR 0 5
66098: PUSH
66099: EMPTY
66100: ST_TO_ADDR
// case d of 0 :
66101: LD_VAR 0 3
66105: PUSH
66106: LD_INT 0
66108: DOUBLE
66109: EQUAL
66110: IFTRUE 66114
66112: GO 66247
66114: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66115: LD_ADDR_VAR 0 5
66119: PUSH
66120: LD_VAR 0 1
66124: PUSH
66125: LD_INT 4
66127: MINUS
66128: PUSH
66129: LD_VAR 0 2
66133: PUSH
66134: LD_INT 4
66136: MINUS
66137: PUSH
66138: LD_INT 2
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: LIST
66145: PUSH
66146: LD_VAR 0 1
66150: PUSH
66151: LD_INT 3
66153: MINUS
66154: PUSH
66155: LD_VAR 0 2
66159: PUSH
66160: LD_INT 1
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: LIST
66167: PUSH
66168: LD_VAR 0 1
66172: PUSH
66173: LD_INT 4
66175: PLUS
66176: PUSH
66177: LD_VAR 0 2
66181: PUSH
66182: LD_INT 4
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: LIST
66189: PUSH
66190: LD_VAR 0 1
66194: PUSH
66195: LD_INT 3
66197: PLUS
66198: PUSH
66199: LD_VAR 0 2
66203: PUSH
66204: LD_INT 3
66206: PLUS
66207: PUSH
66208: LD_INT 5
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: LIST
66215: PUSH
66216: LD_VAR 0 1
66220: PUSH
66221: LD_VAR 0 2
66225: PUSH
66226: LD_INT 4
66228: PLUS
66229: PUSH
66230: LD_INT 0
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: LIST
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: ST_TO_ADDR
// end ; 1 :
66245: GO 66945
66247: LD_INT 1
66249: DOUBLE
66250: EQUAL
66251: IFTRUE 66255
66253: GO 66388
66255: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66256: LD_ADDR_VAR 0 5
66260: PUSH
66261: LD_VAR 0 1
66265: PUSH
66266: LD_VAR 0 2
66270: PUSH
66271: LD_INT 4
66273: MINUS
66274: PUSH
66275: LD_INT 3
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: LIST
66282: PUSH
66283: LD_VAR 0 1
66287: PUSH
66288: LD_INT 3
66290: MINUS
66291: PUSH
66292: LD_VAR 0 2
66296: PUSH
66297: LD_INT 3
66299: MINUS
66300: PUSH
66301: LD_INT 2
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: LIST
66308: PUSH
66309: LD_VAR 0 1
66313: PUSH
66314: LD_INT 4
66316: MINUS
66317: PUSH
66318: LD_VAR 0 2
66322: PUSH
66323: LD_INT 1
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: LIST
66330: PUSH
66331: LD_VAR 0 1
66335: PUSH
66336: LD_VAR 0 2
66340: PUSH
66341: LD_INT 3
66343: PLUS
66344: PUSH
66345: LD_INT 0
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: LIST
66352: PUSH
66353: LD_VAR 0 1
66357: PUSH
66358: LD_INT 4
66360: PLUS
66361: PUSH
66362: LD_VAR 0 2
66366: PUSH
66367: LD_INT 4
66369: PLUS
66370: PUSH
66371: LD_INT 5
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: LIST
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: ST_TO_ADDR
// end ; 2 :
66386: GO 66945
66388: LD_INT 2
66390: DOUBLE
66391: EQUAL
66392: IFTRUE 66396
66394: GO 66525
66396: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66397: LD_ADDR_VAR 0 5
66401: PUSH
66402: LD_VAR 0 1
66406: PUSH
66407: LD_VAR 0 2
66411: PUSH
66412: LD_INT 3
66414: MINUS
66415: PUSH
66416: LD_INT 3
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: LIST
66423: PUSH
66424: LD_VAR 0 1
66428: PUSH
66429: LD_INT 4
66431: PLUS
66432: PUSH
66433: LD_VAR 0 2
66437: PUSH
66438: LD_INT 4
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: LIST
66445: PUSH
66446: LD_VAR 0 1
66450: PUSH
66451: LD_VAR 0 2
66455: PUSH
66456: LD_INT 4
66458: PLUS
66459: PUSH
66460: LD_INT 0
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: LIST
66467: PUSH
66468: LD_VAR 0 1
66472: PUSH
66473: LD_INT 3
66475: MINUS
66476: PUSH
66477: LD_VAR 0 2
66481: PUSH
66482: LD_INT 1
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: LIST
66489: PUSH
66490: LD_VAR 0 1
66494: PUSH
66495: LD_INT 4
66497: MINUS
66498: PUSH
66499: LD_VAR 0 2
66503: PUSH
66504: LD_INT 4
66506: MINUS
66507: PUSH
66508: LD_INT 2
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: LIST
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: ST_TO_ADDR
// end ; 3 :
66523: GO 66945
66525: LD_INT 3
66527: DOUBLE
66528: EQUAL
66529: IFTRUE 66533
66531: GO 66666
66533: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66534: LD_ADDR_VAR 0 5
66538: PUSH
66539: LD_VAR 0 1
66543: PUSH
66544: LD_INT 3
66546: PLUS
66547: PUSH
66548: LD_VAR 0 2
66552: PUSH
66553: LD_INT 4
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: LIST
66560: PUSH
66561: LD_VAR 0 1
66565: PUSH
66566: LD_INT 4
66568: PLUS
66569: PUSH
66570: LD_VAR 0 2
66574: PUSH
66575: LD_INT 4
66577: PLUS
66578: PUSH
66579: LD_INT 5
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: LIST
66586: PUSH
66587: LD_VAR 0 1
66591: PUSH
66592: LD_INT 4
66594: MINUS
66595: PUSH
66596: LD_VAR 0 2
66600: PUSH
66601: LD_INT 1
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: LIST
66608: PUSH
66609: LD_VAR 0 1
66613: PUSH
66614: LD_VAR 0 2
66618: PUSH
66619: LD_INT 4
66621: MINUS
66622: PUSH
66623: LD_INT 3
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: LIST
66630: PUSH
66631: LD_VAR 0 1
66635: PUSH
66636: LD_INT 3
66638: MINUS
66639: PUSH
66640: LD_VAR 0 2
66644: PUSH
66645: LD_INT 3
66647: MINUS
66648: PUSH
66649: LD_INT 2
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: LIST
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: ST_TO_ADDR
// end ; 4 :
66664: GO 66945
66666: LD_INT 4
66668: DOUBLE
66669: EQUAL
66670: IFTRUE 66674
66672: GO 66807
66674: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66675: LD_ADDR_VAR 0 5
66679: PUSH
66680: LD_VAR 0 1
66684: PUSH
66685: LD_VAR 0 2
66689: PUSH
66690: LD_INT 4
66692: PLUS
66693: PUSH
66694: LD_INT 0
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: LIST
66701: PUSH
66702: LD_VAR 0 1
66706: PUSH
66707: LD_INT 3
66709: PLUS
66710: PUSH
66711: LD_VAR 0 2
66715: PUSH
66716: LD_INT 3
66718: PLUS
66719: PUSH
66720: LD_INT 5
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: LIST
66727: PUSH
66728: LD_VAR 0 1
66732: PUSH
66733: LD_INT 4
66735: PLUS
66736: PUSH
66737: LD_VAR 0 2
66741: PUSH
66742: LD_INT 4
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: LIST
66749: PUSH
66750: LD_VAR 0 1
66754: PUSH
66755: LD_VAR 0 2
66759: PUSH
66760: LD_INT 3
66762: MINUS
66763: PUSH
66764: LD_INT 3
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: LIST
66771: PUSH
66772: LD_VAR 0 1
66776: PUSH
66777: LD_INT 4
66779: MINUS
66780: PUSH
66781: LD_VAR 0 2
66785: PUSH
66786: LD_INT 4
66788: MINUS
66789: PUSH
66790: LD_INT 2
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: LIST
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: ST_TO_ADDR
// end ; 5 :
66805: GO 66945
66807: LD_INT 5
66809: DOUBLE
66810: EQUAL
66811: IFTRUE 66815
66813: GO 66944
66815: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66816: LD_ADDR_VAR 0 5
66820: PUSH
66821: LD_VAR 0 1
66825: PUSH
66826: LD_INT 4
66828: MINUS
66829: PUSH
66830: LD_VAR 0 2
66834: PUSH
66835: LD_INT 1
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: LIST
66842: PUSH
66843: LD_VAR 0 1
66847: PUSH
66848: LD_VAR 0 2
66852: PUSH
66853: LD_INT 4
66855: MINUS
66856: PUSH
66857: LD_INT 3
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: LIST
66864: PUSH
66865: LD_VAR 0 1
66869: PUSH
66870: LD_INT 4
66872: PLUS
66873: PUSH
66874: LD_VAR 0 2
66878: PUSH
66879: LD_INT 4
66881: PLUS
66882: PUSH
66883: LD_INT 5
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: LIST
66890: PUSH
66891: LD_VAR 0 1
66895: PUSH
66896: LD_INT 3
66898: PLUS
66899: PUSH
66900: LD_VAR 0 2
66904: PUSH
66905: LD_INT 4
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: LIST
66912: PUSH
66913: LD_VAR 0 1
66917: PUSH
66918: LD_VAR 0 2
66922: PUSH
66923: LD_INT 3
66925: PLUS
66926: PUSH
66927: LD_INT 0
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: LIST
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: ST_TO_ADDR
// end ; end ;
66942: GO 66945
66944: POP
// result := list ;
66945: LD_ADDR_VAR 0 4
66949: PUSH
66950: LD_VAR 0 5
66954: ST_TO_ADDR
// end ;
66955: LD_VAR 0 4
66959: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66960: LD_INT 0
66962: PPUSH
66963: PPUSH
66964: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66965: LD_VAR 0 1
66969: NOT
66970: PUSH
66971: LD_VAR 0 2
66975: PUSH
66976: LD_INT 1
66978: PUSH
66979: LD_INT 2
66981: PUSH
66982: LD_INT 3
66984: PUSH
66985: LD_INT 4
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: IN
66994: NOT
66995: OR
66996: IFFALSE 67000
// exit ;
66998: GO 67092
// tmp := [ ] ;
67000: LD_ADDR_VAR 0 5
67004: PUSH
67005: EMPTY
67006: ST_TO_ADDR
// for i in units do
67007: LD_ADDR_VAR 0 4
67011: PUSH
67012: LD_VAR 0 1
67016: PUSH
67017: FOR_IN
67018: IFFALSE 67061
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67020: LD_ADDR_VAR 0 5
67024: PUSH
67025: LD_VAR 0 5
67029: PPUSH
67030: LD_VAR 0 5
67034: PUSH
67035: LD_INT 1
67037: PLUS
67038: PPUSH
67039: LD_VAR 0 4
67043: PPUSH
67044: LD_VAR 0 2
67048: PPUSH
67049: CALL_OW 259
67053: PPUSH
67054: CALL_OW 2
67058: ST_TO_ADDR
67059: GO 67017
67061: POP
67062: POP
// if not tmp then
67063: LD_VAR 0 5
67067: NOT
67068: IFFALSE 67072
// exit ;
67070: GO 67092
// result := SortListByListDesc ( units , tmp ) ;
67072: LD_ADDR_VAR 0 3
67076: PUSH
67077: LD_VAR 0 1
67081: PPUSH
67082: LD_VAR 0 5
67086: PPUSH
67087: CALL_OW 77
67091: ST_TO_ADDR
// end ;
67092: LD_VAR 0 3
67096: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67097: LD_INT 0
67099: PPUSH
67100: PPUSH
67101: PPUSH
// result := false ;
67102: LD_ADDR_VAR 0 3
67106: PUSH
67107: LD_INT 0
67109: ST_TO_ADDR
// x := GetX ( building ) ;
67110: LD_ADDR_VAR 0 4
67114: PUSH
67115: LD_VAR 0 2
67119: PPUSH
67120: CALL_OW 250
67124: ST_TO_ADDR
// y := GetY ( building ) ;
67125: LD_ADDR_VAR 0 5
67129: PUSH
67130: LD_VAR 0 2
67134: PPUSH
67135: CALL_OW 251
67139: ST_TO_ADDR
// if not building or not x or not y then
67140: LD_VAR 0 2
67144: NOT
67145: PUSH
67146: LD_VAR 0 4
67150: NOT
67151: OR
67152: PUSH
67153: LD_VAR 0 5
67157: NOT
67158: OR
67159: IFFALSE 67163
// exit ;
67161: GO 67255
// if GetTaskList ( unit ) then
67163: LD_VAR 0 1
67167: PPUSH
67168: CALL_OW 437
67172: IFFALSE 67255
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67174: LD_STRING e
67176: PUSH
67177: LD_VAR 0 1
67181: PPUSH
67182: CALL_OW 437
67186: PUSH
67187: LD_INT 1
67189: ARRAY
67190: PUSH
67191: LD_INT 1
67193: ARRAY
67194: EQUAL
67195: PUSH
67196: LD_VAR 0 4
67200: PUSH
67201: LD_VAR 0 1
67205: PPUSH
67206: CALL_OW 437
67210: PUSH
67211: LD_INT 1
67213: ARRAY
67214: PUSH
67215: LD_INT 2
67217: ARRAY
67218: EQUAL
67219: AND
67220: PUSH
67221: LD_VAR 0 5
67225: PUSH
67226: LD_VAR 0 1
67230: PPUSH
67231: CALL_OW 437
67235: PUSH
67236: LD_INT 1
67238: ARRAY
67239: PUSH
67240: LD_INT 3
67242: ARRAY
67243: EQUAL
67244: AND
67245: IFFALSE 67255
// result := true end ;
67247: LD_ADDR_VAR 0 3
67251: PUSH
67252: LD_INT 1
67254: ST_TO_ADDR
// end ;
67255: LD_VAR 0 3
67259: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67260: LD_INT 0
67262: PPUSH
// result := false ;
67263: LD_ADDR_VAR 0 4
67267: PUSH
67268: LD_INT 0
67270: ST_TO_ADDR
// if GetTaskList ( unit ) then
67271: LD_VAR 0 1
67275: PPUSH
67276: CALL_OW 437
67280: IFFALSE 67363
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67282: LD_STRING M
67284: PUSH
67285: LD_VAR 0 1
67289: PPUSH
67290: CALL_OW 437
67294: PUSH
67295: LD_INT 1
67297: ARRAY
67298: PUSH
67299: LD_INT 1
67301: ARRAY
67302: EQUAL
67303: PUSH
67304: LD_VAR 0 2
67308: PUSH
67309: LD_VAR 0 1
67313: PPUSH
67314: CALL_OW 437
67318: PUSH
67319: LD_INT 1
67321: ARRAY
67322: PUSH
67323: LD_INT 2
67325: ARRAY
67326: EQUAL
67327: AND
67328: PUSH
67329: LD_VAR 0 3
67333: PUSH
67334: LD_VAR 0 1
67338: PPUSH
67339: CALL_OW 437
67343: PUSH
67344: LD_INT 1
67346: ARRAY
67347: PUSH
67348: LD_INT 3
67350: ARRAY
67351: EQUAL
67352: AND
67353: IFFALSE 67363
// result := true ;
67355: LD_ADDR_VAR 0 4
67359: PUSH
67360: LD_INT 1
67362: ST_TO_ADDR
// end ; end ;
67363: LD_VAR 0 4
67367: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67368: LD_INT 0
67370: PPUSH
67371: PPUSH
67372: PPUSH
67373: PPUSH
// if not unit or not area then
67374: LD_VAR 0 1
67378: NOT
67379: PUSH
67380: LD_VAR 0 2
67384: NOT
67385: OR
67386: IFFALSE 67390
// exit ;
67388: GO 67554
// tmp := AreaToList ( area , i ) ;
67390: LD_ADDR_VAR 0 6
67394: PUSH
67395: LD_VAR 0 2
67399: PPUSH
67400: LD_VAR 0 5
67404: PPUSH
67405: CALL_OW 517
67409: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67410: LD_ADDR_VAR 0 5
67414: PUSH
67415: DOUBLE
67416: LD_INT 1
67418: DEC
67419: ST_TO_ADDR
67420: LD_VAR 0 6
67424: PUSH
67425: LD_INT 1
67427: ARRAY
67428: PUSH
67429: FOR_TO
67430: IFFALSE 67552
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67432: LD_ADDR_VAR 0 7
67436: PUSH
67437: LD_VAR 0 6
67441: PUSH
67442: LD_INT 1
67444: ARRAY
67445: PUSH
67446: LD_VAR 0 5
67450: ARRAY
67451: PUSH
67452: LD_VAR 0 6
67456: PUSH
67457: LD_INT 2
67459: ARRAY
67460: PUSH
67461: LD_VAR 0 5
67465: ARRAY
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67471: LD_VAR 0 7
67475: PUSH
67476: LD_INT 1
67478: ARRAY
67479: PPUSH
67480: LD_VAR 0 7
67484: PUSH
67485: LD_INT 2
67487: ARRAY
67488: PPUSH
67489: CALL_OW 428
67493: PUSH
67494: LD_INT 0
67496: EQUAL
67497: IFFALSE 67550
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67499: LD_VAR 0 1
67503: PPUSH
67504: LD_VAR 0 7
67508: PUSH
67509: LD_INT 1
67511: ARRAY
67512: PPUSH
67513: LD_VAR 0 7
67517: PUSH
67518: LD_INT 2
67520: ARRAY
67521: PPUSH
67522: LD_VAR 0 3
67526: PPUSH
67527: CALL_OW 48
// result := IsPlaced ( unit ) ;
67531: LD_ADDR_VAR 0 4
67535: PUSH
67536: LD_VAR 0 1
67540: PPUSH
67541: CALL_OW 305
67545: ST_TO_ADDR
// exit ;
67546: POP
67547: POP
67548: GO 67554
// end ; end ;
67550: GO 67429
67552: POP
67553: POP
// end ;
67554: LD_VAR 0 4
67558: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67559: LD_INT 0
67561: PPUSH
67562: PPUSH
67563: PPUSH
// if not side or side > 8 then
67564: LD_VAR 0 1
67568: NOT
67569: PUSH
67570: LD_VAR 0 1
67574: PUSH
67575: LD_INT 8
67577: GREATER
67578: OR
67579: IFFALSE 67583
// exit ;
67581: GO 67770
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67583: LD_ADDR_VAR 0 4
67587: PUSH
67588: LD_INT 22
67590: PUSH
67591: LD_VAR 0 1
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 21
67602: PUSH
67603: LD_INT 3
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PPUSH
67614: CALL_OW 69
67618: ST_TO_ADDR
// if not tmp then
67619: LD_VAR 0 4
67623: NOT
67624: IFFALSE 67628
// exit ;
67626: GO 67770
// enable_addtolog := true ;
67628: LD_ADDR_OWVAR 81
67632: PUSH
67633: LD_INT 1
67635: ST_TO_ADDR
// AddToLog ( [ ) ;
67636: LD_STRING [
67638: PPUSH
67639: CALL_OW 561
// for i in tmp do
67643: LD_ADDR_VAR 0 3
67647: PUSH
67648: LD_VAR 0 4
67652: PUSH
67653: FOR_IN
67654: IFFALSE 67761
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67656: LD_STRING [
67658: PUSH
67659: LD_VAR 0 3
67663: PPUSH
67664: CALL_OW 266
67668: STR
67669: PUSH
67670: LD_STRING , 
67672: STR
67673: PUSH
67674: LD_VAR 0 3
67678: PPUSH
67679: CALL_OW 250
67683: STR
67684: PUSH
67685: LD_STRING , 
67687: STR
67688: PUSH
67689: LD_VAR 0 3
67693: PPUSH
67694: CALL_OW 251
67698: STR
67699: PUSH
67700: LD_STRING , 
67702: STR
67703: PUSH
67704: LD_VAR 0 3
67708: PPUSH
67709: CALL_OW 254
67713: STR
67714: PUSH
67715: LD_STRING , 
67717: STR
67718: PUSH
67719: LD_VAR 0 3
67723: PPUSH
67724: LD_INT 1
67726: PPUSH
67727: CALL_OW 268
67731: STR
67732: PUSH
67733: LD_STRING , 
67735: STR
67736: PUSH
67737: LD_VAR 0 3
67741: PPUSH
67742: LD_INT 2
67744: PPUSH
67745: CALL_OW 268
67749: STR
67750: PUSH
67751: LD_STRING ],
67753: STR
67754: PPUSH
67755: CALL_OW 561
// end ;
67759: GO 67653
67761: POP
67762: POP
// AddToLog ( ]; ) ;
67763: LD_STRING ];
67765: PPUSH
67766: CALL_OW 561
// end ;
67770: LD_VAR 0 2
67774: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67775: LD_INT 0
67777: PPUSH
67778: PPUSH
67779: PPUSH
67780: PPUSH
67781: PPUSH
// if not area or not rate or not max then
67782: LD_VAR 0 1
67786: NOT
67787: PUSH
67788: LD_VAR 0 2
67792: NOT
67793: OR
67794: PUSH
67795: LD_VAR 0 4
67799: NOT
67800: OR
67801: IFFALSE 67805
// exit ;
67803: GO 67994
// while 1 do
67805: LD_INT 1
67807: IFFALSE 67994
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67809: LD_ADDR_VAR 0 9
67813: PUSH
67814: LD_VAR 0 1
67818: PPUSH
67819: LD_INT 1
67821: PPUSH
67822: CALL_OW 287
67826: PUSH
67827: LD_INT 10
67829: MUL
67830: ST_TO_ADDR
// r := rate / 10 ;
67831: LD_ADDR_VAR 0 7
67835: PUSH
67836: LD_VAR 0 2
67840: PUSH
67841: LD_INT 10
67843: DIVREAL
67844: ST_TO_ADDR
// time := 1 1$00 ;
67845: LD_ADDR_VAR 0 8
67849: PUSH
67850: LD_INT 2100
67852: ST_TO_ADDR
// if amount < min then
67853: LD_VAR 0 9
67857: PUSH
67858: LD_VAR 0 3
67862: LESS
67863: IFFALSE 67881
// r := r * 2 else
67865: LD_ADDR_VAR 0 7
67869: PUSH
67870: LD_VAR 0 7
67874: PUSH
67875: LD_INT 2
67877: MUL
67878: ST_TO_ADDR
67879: GO 67907
// if amount > max then
67881: LD_VAR 0 9
67885: PUSH
67886: LD_VAR 0 4
67890: GREATER
67891: IFFALSE 67907
// r := r / 2 ;
67893: LD_ADDR_VAR 0 7
67897: PUSH
67898: LD_VAR 0 7
67902: PUSH
67903: LD_INT 2
67905: DIVREAL
67906: ST_TO_ADDR
// time := time / r ;
67907: LD_ADDR_VAR 0 8
67911: PUSH
67912: LD_VAR 0 8
67916: PUSH
67917: LD_VAR 0 7
67921: DIVREAL
67922: ST_TO_ADDR
// if time < 0 then
67923: LD_VAR 0 8
67927: PUSH
67928: LD_INT 0
67930: LESS
67931: IFFALSE 67948
// time := time * - 1 ;
67933: LD_ADDR_VAR 0 8
67937: PUSH
67938: LD_VAR 0 8
67942: PUSH
67943: LD_INT 1
67945: NEG
67946: MUL
67947: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67948: LD_VAR 0 8
67952: PUSH
67953: LD_INT 35
67955: PPUSH
67956: LD_INT 875
67958: PPUSH
67959: CALL_OW 12
67963: PLUS
67964: PPUSH
67965: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67969: LD_INT 1
67971: PPUSH
67972: LD_INT 5
67974: PPUSH
67975: CALL_OW 12
67979: PPUSH
67980: LD_VAR 0 1
67984: PPUSH
67985: LD_INT 1
67987: PPUSH
67988: CALL_OW 55
// end ;
67992: GO 67805
// end ;
67994: LD_VAR 0 5
67998: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67999: LD_INT 0
68001: PPUSH
68002: PPUSH
68003: PPUSH
68004: PPUSH
68005: PPUSH
68006: PPUSH
68007: PPUSH
68008: PPUSH
// if not turrets or not factories then
68009: LD_VAR 0 1
68013: NOT
68014: PUSH
68015: LD_VAR 0 2
68019: NOT
68020: OR
68021: IFFALSE 68025
// exit ;
68023: GO 68332
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68025: LD_ADDR_VAR 0 10
68029: PUSH
68030: LD_INT 5
68032: PUSH
68033: LD_INT 6
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 2
68042: PUSH
68043: LD_INT 4
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 3
68052: PUSH
68053: LD_INT 5
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 24
68067: PUSH
68068: LD_INT 25
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 23
68077: PUSH
68078: LD_INT 27
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 42
68091: PUSH
68092: LD_INT 43
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: LD_INT 44
68101: PUSH
68102: LD_INT 46
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 45
68111: PUSH
68112: LD_INT 47
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: LIST
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: LIST
68128: ST_TO_ADDR
// result := [ ] ;
68129: LD_ADDR_VAR 0 3
68133: PUSH
68134: EMPTY
68135: ST_TO_ADDR
// for i in turrets do
68136: LD_ADDR_VAR 0 4
68140: PUSH
68141: LD_VAR 0 1
68145: PUSH
68146: FOR_IN
68147: IFFALSE 68330
// begin nat := GetNation ( i ) ;
68149: LD_ADDR_VAR 0 7
68153: PUSH
68154: LD_VAR 0 4
68158: PPUSH
68159: CALL_OW 248
68163: ST_TO_ADDR
// weapon := 0 ;
68164: LD_ADDR_VAR 0 8
68168: PUSH
68169: LD_INT 0
68171: ST_TO_ADDR
// if not nat then
68172: LD_VAR 0 7
68176: NOT
68177: IFFALSE 68181
// continue ;
68179: GO 68146
// for j in list [ nat ] do
68181: LD_ADDR_VAR 0 5
68185: PUSH
68186: LD_VAR 0 10
68190: PUSH
68191: LD_VAR 0 7
68195: ARRAY
68196: PUSH
68197: FOR_IN
68198: IFFALSE 68239
// if GetBWeapon ( i ) = j [ 1 ] then
68200: LD_VAR 0 4
68204: PPUSH
68205: CALL_OW 269
68209: PUSH
68210: LD_VAR 0 5
68214: PUSH
68215: LD_INT 1
68217: ARRAY
68218: EQUAL
68219: IFFALSE 68237
// begin weapon := j [ 2 ] ;
68221: LD_ADDR_VAR 0 8
68225: PUSH
68226: LD_VAR 0 5
68230: PUSH
68231: LD_INT 2
68233: ARRAY
68234: ST_TO_ADDR
// break ;
68235: GO 68239
// end ;
68237: GO 68197
68239: POP
68240: POP
// if not weapon then
68241: LD_VAR 0 8
68245: NOT
68246: IFFALSE 68250
// continue ;
68248: GO 68146
// for k in factories do
68250: LD_ADDR_VAR 0 6
68254: PUSH
68255: LD_VAR 0 2
68259: PUSH
68260: FOR_IN
68261: IFFALSE 68326
// begin weapons := AvailableWeaponList ( k ) ;
68263: LD_ADDR_VAR 0 9
68267: PUSH
68268: LD_VAR 0 6
68272: PPUSH
68273: CALL_OW 478
68277: ST_TO_ADDR
// if not weapons then
68278: LD_VAR 0 9
68282: NOT
68283: IFFALSE 68287
// continue ;
68285: GO 68260
// if weapon in weapons then
68287: LD_VAR 0 8
68291: PUSH
68292: LD_VAR 0 9
68296: IN
68297: IFFALSE 68324
// begin result := [ i , weapon ] ;
68299: LD_ADDR_VAR 0 3
68303: PUSH
68304: LD_VAR 0 4
68308: PUSH
68309: LD_VAR 0 8
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: ST_TO_ADDR
// exit ;
68318: POP
68319: POP
68320: POP
68321: POP
68322: GO 68332
// end ; end ;
68324: GO 68260
68326: POP
68327: POP
// end ;
68328: GO 68146
68330: POP
68331: POP
// end ;
68332: LD_VAR 0 3
68336: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68337: LD_INT 0
68339: PPUSH
// if not side or side > 8 then
68340: LD_VAR 0 3
68344: NOT
68345: PUSH
68346: LD_VAR 0 3
68350: PUSH
68351: LD_INT 8
68353: GREATER
68354: OR
68355: IFFALSE 68359
// exit ;
68357: GO 68418
// if not range then
68359: LD_VAR 0 4
68363: NOT
68364: IFFALSE 68375
// range := - 12 ;
68366: LD_ADDR_VAR 0 4
68370: PUSH
68371: LD_INT 12
68373: NEG
68374: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68375: LD_VAR 0 1
68379: PPUSH
68380: LD_VAR 0 2
68384: PPUSH
68385: LD_VAR 0 3
68389: PPUSH
68390: LD_VAR 0 4
68394: PPUSH
68395: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68399: LD_VAR 0 1
68403: PPUSH
68404: LD_VAR 0 2
68408: PPUSH
68409: LD_VAR 0 3
68413: PPUSH
68414: CALL_OW 331
// end ;
68418: LD_VAR 0 5
68422: RET
// export function Video ( mode ) ; begin
68423: LD_INT 0
68425: PPUSH
// ingame_video = mode ;
68426: LD_ADDR_OWVAR 52
68430: PUSH
68431: LD_VAR 0 1
68435: ST_TO_ADDR
// interface_hidden = mode ;
68436: LD_ADDR_OWVAR 54
68440: PUSH
68441: LD_VAR 0 1
68445: ST_TO_ADDR
// end ;
68446: LD_VAR 0 2
68450: RET
// export function Join ( array , element ) ; begin
68451: LD_INT 0
68453: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68454: LD_ADDR_VAR 0 3
68458: PUSH
68459: LD_VAR 0 1
68463: PPUSH
68464: LD_VAR 0 1
68468: PUSH
68469: LD_INT 1
68471: PLUS
68472: PPUSH
68473: LD_VAR 0 2
68477: PPUSH
68478: CALL_OW 1
68482: ST_TO_ADDR
// end ;
68483: LD_VAR 0 3
68487: RET
// export function JoinUnion ( array , element ) ; begin
68488: LD_INT 0
68490: PPUSH
// result := array union element ;
68491: LD_ADDR_VAR 0 3
68495: PUSH
68496: LD_VAR 0 1
68500: PUSH
68501: LD_VAR 0 2
68505: UNION
68506: ST_TO_ADDR
// end ;
68507: LD_VAR 0 3
68511: RET
// export function GetBehemoths ( side ) ; begin
68512: LD_INT 0
68514: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
68515: LD_ADDR_VAR 0 2
68519: PUSH
68520: LD_INT 22
68522: PUSH
68523: LD_VAR 0 1
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 31
68534: PUSH
68535: LD_INT 25
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PPUSH
68546: CALL_OW 69
68550: ST_TO_ADDR
// end ;
68551: LD_VAR 0 2
68555: RET
// export function Shuffle ( array ) ; var i , index ; begin
68556: LD_INT 0
68558: PPUSH
68559: PPUSH
68560: PPUSH
// result := [ ] ;
68561: LD_ADDR_VAR 0 2
68565: PUSH
68566: EMPTY
68567: ST_TO_ADDR
// if not array then
68568: LD_VAR 0 1
68572: NOT
68573: IFFALSE 68577
// exit ;
68575: GO 68676
// Randomize ;
68577: CALL_OW 10
// for i = array downto 1 do
68581: LD_ADDR_VAR 0 3
68585: PUSH
68586: DOUBLE
68587: LD_VAR 0 1
68591: INC
68592: ST_TO_ADDR
68593: LD_INT 1
68595: PUSH
68596: FOR_DOWNTO
68597: IFFALSE 68674
// begin index := rand ( 1 , array ) ;
68599: LD_ADDR_VAR 0 4
68603: PUSH
68604: LD_INT 1
68606: PPUSH
68607: LD_VAR 0 1
68611: PPUSH
68612: CALL_OW 12
68616: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68617: LD_ADDR_VAR 0 2
68621: PUSH
68622: LD_VAR 0 2
68626: PPUSH
68627: LD_VAR 0 2
68631: PUSH
68632: LD_INT 1
68634: PLUS
68635: PPUSH
68636: LD_VAR 0 1
68640: PUSH
68641: LD_VAR 0 4
68645: ARRAY
68646: PPUSH
68647: CALL_OW 2
68651: ST_TO_ADDR
// array := Delete ( array , index ) ;
68652: LD_ADDR_VAR 0 1
68656: PUSH
68657: LD_VAR 0 1
68661: PPUSH
68662: LD_VAR 0 4
68666: PPUSH
68667: CALL_OW 3
68671: ST_TO_ADDR
// end ;
68672: GO 68596
68674: POP
68675: POP
// end ;
68676: LD_VAR 0 2
68680: RET
// export function GetBaseMaterials ( base ) ; begin
68681: LD_INT 0
68683: PPUSH
// result := [ 0 , 0 , 0 ] ;
68684: LD_ADDR_VAR 0 2
68688: PUSH
68689: LD_INT 0
68691: PUSH
68692: LD_INT 0
68694: PUSH
68695: LD_INT 0
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: LIST
68702: ST_TO_ADDR
// if not base then
68703: LD_VAR 0 1
68707: NOT
68708: IFFALSE 68712
// exit ;
68710: GO 68761
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68712: LD_ADDR_VAR 0 2
68716: PUSH
68717: LD_VAR 0 1
68721: PPUSH
68722: LD_INT 1
68724: PPUSH
68725: CALL_OW 275
68729: PUSH
68730: LD_VAR 0 1
68734: PPUSH
68735: LD_INT 2
68737: PPUSH
68738: CALL_OW 275
68742: PUSH
68743: LD_VAR 0 1
68747: PPUSH
68748: LD_INT 3
68750: PPUSH
68751: CALL_OW 275
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: LIST
68760: ST_TO_ADDR
// end ;
68761: LD_VAR 0 2
68765: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68766: LD_INT 0
68768: PPUSH
68769: PPUSH
// result := array ;
68770: LD_ADDR_VAR 0 3
68774: PUSH
68775: LD_VAR 0 1
68779: ST_TO_ADDR
// if size >= result then
68780: LD_VAR 0 2
68784: PUSH
68785: LD_VAR 0 3
68789: GREATEREQUAL
68790: IFFALSE 68794
// exit ;
68792: GO 68844
// if size then
68794: LD_VAR 0 2
68798: IFFALSE 68844
// for i := array downto size do
68800: LD_ADDR_VAR 0 4
68804: PUSH
68805: DOUBLE
68806: LD_VAR 0 1
68810: INC
68811: ST_TO_ADDR
68812: LD_VAR 0 2
68816: PUSH
68817: FOR_DOWNTO
68818: IFFALSE 68842
// result := Delete ( result , result ) ;
68820: LD_ADDR_VAR 0 3
68824: PUSH
68825: LD_VAR 0 3
68829: PPUSH
68830: LD_VAR 0 3
68834: PPUSH
68835: CALL_OW 3
68839: ST_TO_ADDR
68840: GO 68817
68842: POP
68843: POP
// end ;
68844: LD_VAR 0 3
68848: RET
// export function ComExit ( unit ) ; var tmp ; begin
68849: LD_INT 0
68851: PPUSH
68852: PPUSH
// if not IsInUnit ( unit ) then
68853: LD_VAR 0 1
68857: PPUSH
68858: CALL_OW 310
68862: NOT
68863: IFFALSE 68867
// exit ;
68865: GO 68927
// tmp := IsInUnit ( unit ) ;
68867: LD_ADDR_VAR 0 3
68871: PUSH
68872: LD_VAR 0 1
68876: PPUSH
68877: CALL_OW 310
68881: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68882: LD_VAR 0 3
68886: PPUSH
68887: CALL_OW 247
68891: PUSH
68892: LD_INT 2
68894: EQUAL
68895: IFFALSE 68908
// ComExitVehicle ( unit ) else
68897: LD_VAR 0 1
68901: PPUSH
68902: CALL_OW 121
68906: GO 68917
// ComExitBuilding ( unit ) ;
68908: LD_VAR 0 1
68912: PPUSH
68913: CALL_OW 122
// result := tmp ;
68917: LD_ADDR_VAR 0 2
68921: PUSH
68922: LD_VAR 0 3
68926: ST_TO_ADDR
// end ;
68927: LD_VAR 0 2
68931: RET
// export function ComExitAll ( units ) ; var i ; begin
68932: LD_INT 0
68934: PPUSH
68935: PPUSH
// if not units then
68936: LD_VAR 0 1
68940: NOT
68941: IFFALSE 68945
// exit ;
68943: GO 68971
// for i in units do
68945: LD_ADDR_VAR 0 3
68949: PUSH
68950: LD_VAR 0 1
68954: PUSH
68955: FOR_IN
68956: IFFALSE 68969
// ComExit ( i ) ;
68958: LD_VAR 0 3
68962: PPUSH
68963: CALL 68849 0 1
68967: GO 68955
68969: POP
68970: POP
// end ;
68971: LD_VAR 0 2
68975: RET
// export function ResetHc ; begin
68976: LD_INT 0
68978: PPUSH
// InitHc ;
68979: CALL_OW 19
// hc_importance := 0 ;
68983: LD_ADDR_OWVAR 32
68987: PUSH
68988: LD_INT 0
68990: ST_TO_ADDR
// end ;
68991: LD_VAR 0 1
68995: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68996: LD_INT 0
68998: PPUSH
68999: PPUSH
69000: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69001: LD_ADDR_VAR 0 6
69005: PUSH
69006: LD_VAR 0 1
69010: PUSH
69011: LD_VAR 0 3
69015: PLUS
69016: PUSH
69017: LD_INT 2
69019: DIV
69020: ST_TO_ADDR
// if _x < 0 then
69021: LD_VAR 0 6
69025: PUSH
69026: LD_INT 0
69028: LESS
69029: IFFALSE 69046
// _x := _x * - 1 ;
69031: LD_ADDR_VAR 0 6
69035: PUSH
69036: LD_VAR 0 6
69040: PUSH
69041: LD_INT 1
69043: NEG
69044: MUL
69045: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69046: LD_ADDR_VAR 0 7
69050: PUSH
69051: LD_VAR 0 2
69055: PUSH
69056: LD_VAR 0 4
69060: PLUS
69061: PUSH
69062: LD_INT 2
69064: DIV
69065: ST_TO_ADDR
// if _y < 0 then
69066: LD_VAR 0 7
69070: PUSH
69071: LD_INT 0
69073: LESS
69074: IFFALSE 69091
// _y := _y * - 1 ;
69076: LD_ADDR_VAR 0 7
69080: PUSH
69081: LD_VAR 0 7
69085: PUSH
69086: LD_INT 1
69088: NEG
69089: MUL
69090: ST_TO_ADDR
// result := [ _x , _y ] ;
69091: LD_ADDR_VAR 0 5
69095: PUSH
69096: LD_VAR 0 6
69100: PUSH
69101: LD_VAR 0 7
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: ST_TO_ADDR
// end ;
69110: LD_VAR 0 5
69114: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69115: LD_INT 0
69117: PPUSH
69118: PPUSH
69119: PPUSH
69120: PPUSH
// task := GetTaskList ( unit ) ;
69121: LD_ADDR_VAR 0 7
69125: PUSH
69126: LD_VAR 0 1
69130: PPUSH
69131: CALL_OW 437
69135: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69136: LD_VAR 0 7
69140: NOT
69141: PUSH
69142: LD_VAR 0 1
69146: PPUSH
69147: LD_VAR 0 2
69151: PPUSH
69152: CALL_OW 308
69156: NOT
69157: AND
69158: IFFALSE 69162
// exit ;
69160: GO 69280
// if IsInArea ( unit , area ) then
69162: LD_VAR 0 1
69166: PPUSH
69167: LD_VAR 0 2
69171: PPUSH
69172: CALL_OW 308
69176: IFFALSE 69194
// begin ComMoveToArea ( unit , goAway ) ;
69178: LD_VAR 0 1
69182: PPUSH
69183: LD_VAR 0 3
69187: PPUSH
69188: CALL_OW 113
// exit ;
69192: GO 69280
// end ; if task [ 1 ] [ 1 ] <> M then
69194: LD_VAR 0 7
69198: PUSH
69199: LD_INT 1
69201: ARRAY
69202: PUSH
69203: LD_INT 1
69205: ARRAY
69206: PUSH
69207: LD_STRING M
69209: NONEQUAL
69210: IFFALSE 69214
// exit ;
69212: GO 69280
// x := task [ 1 ] [ 2 ] ;
69214: LD_ADDR_VAR 0 5
69218: PUSH
69219: LD_VAR 0 7
69223: PUSH
69224: LD_INT 1
69226: ARRAY
69227: PUSH
69228: LD_INT 2
69230: ARRAY
69231: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69232: LD_ADDR_VAR 0 6
69236: PUSH
69237: LD_VAR 0 7
69241: PUSH
69242: LD_INT 1
69244: ARRAY
69245: PUSH
69246: LD_INT 3
69248: ARRAY
69249: ST_TO_ADDR
// if InArea ( x , y , area ) then
69250: LD_VAR 0 5
69254: PPUSH
69255: LD_VAR 0 6
69259: PPUSH
69260: LD_VAR 0 2
69264: PPUSH
69265: CALL_OW 309
69269: IFFALSE 69280
// ComStop ( unit ) ;
69271: LD_VAR 0 1
69275: PPUSH
69276: CALL_OW 141
// end ;
69280: LD_VAR 0 4
69284: RET
// export function Abs ( value ) ; begin
69285: LD_INT 0
69287: PPUSH
// result := value ;
69288: LD_ADDR_VAR 0 2
69292: PUSH
69293: LD_VAR 0 1
69297: ST_TO_ADDR
// if value < 0 then
69298: LD_VAR 0 1
69302: PUSH
69303: LD_INT 0
69305: LESS
69306: IFFALSE 69323
// result := value * - 1 ;
69308: LD_ADDR_VAR 0 2
69312: PUSH
69313: LD_VAR 0 1
69317: PUSH
69318: LD_INT 1
69320: NEG
69321: MUL
69322: ST_TO_ADDR
// end ;
69323: LD_VAR 0 2
69327: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69328: LD_INT 0
69330: PPUSH
69331: PPUSH
69332: PPUSH
69333: PPUSH
69334: PPUSH
69335: PPUSH
69336: PPUSH
69337: PPUSH
// if not unit or not building then
69338: LD_VAR 0 1
69342: NOT
69343: PUSH
69344: LD_VAR 0 2
69348: NOT
69349: OR
69350: IFFALSE 69354
// exit ;
69352: GO 69580
// x := GetX ( building ) ;
69354: LD_ADDR_VAR 0 4
69358: PUSH
69359: LD_VAR 0 2
69363: PPUSH
69364: CALL_OW 250
69368: ST_TO_ADDR
// y := GetY ( building ) ;
69369: LD_ADDR_VAR 0 6
69373: PUSH
69374: LD_VAR 0 2
69378: PPUSH
69379: CALL_OW 251
69383: ST_TO_ADDR
// d := GetDir ( building ) ;
69384: LD_ADDR_VAR 0 8
69388: PUSH
69389: LD_VAR 0 2
69393: PPUSH
69394: CALL_OW 254
69398: ST_TO_ADDR
// r := 4 ;
69399: LD_ADDR_VAR 0 9
69403: PUSH
69404: LD_INT 4
69406: ST_TO_ADDR
// for i := 1 to 5 do
69407: LD_ADDR_VAR 0 10
69411: PUSH
69412: DOUBLE
69413: LD_INT 1
69415: DEC
69416: ST_TO_ADDR
69417: LD_INT 5
69419: PUSH
69420: FOR_TO
69421: IFFALSE 69578
// begin _x := ShiftX ( x , d , r + i ) ;
69423: LD_ADDR_VAR 0 5
69427: PUSH
69428: LD_VAR 0 4
69432: PPUSH
69433: LD_VAR 0 8
69437: PPUSH
69438: LD_VAR 0 9
69442: PUSH
69443: LD_VAR 0 10
69447: PLUS
69448: PPUSH
69449: CALL_OW 272
69453: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69454: LD_ADDR_VAR 0 7
69458: PUSH
69459: LD_VAR 0 6
69463: PPUSH
69464: LD_VAR 0 8
69468: PPUSH
69469: LD_VAR 0 9
69473: PUSH
69474: LD_VAR 0 10
69478: PLUS
69479: PPUSH
69480: CALL_OW 273
69484: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69485: LD_VAR 0 5
69489: PPUSH
69490: LD_VAR 0 7
69494: PPUSH
69495: CALL_OW 488
69499: PUSH
69500: LD_VAR 0 5
69504: PPUSH
69505: LD_VAR 0 7
69509: PPUSH
69510: CALL_OW 428
69514: PPUSH
69515: CALL_OW 247
69519: PUSH
69520: LD_INT 3
69522: PUSH
69523: LD_INT 2
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: IN
69530: NOT
69531: AND
69532: IFFALSE 69576
// begin ComMoveXY ( unit , _x , _y ) ;
69534: LD_VAR 0 1
69538: PPUSH
69539: LD_VAR 0 5
69543: PPUSH
69544: LD_VAR 0 7
69548: PPUSH
69549: CALL_OW 111
// result := [ _x , _y ] ;
69553: LD_ADDR_VAR 0 3
69557: PUSH
69558: LD_VAR 0 5
69562: PUSH
69563: LD_VAR 0 7
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: ST_TO_ADDR
// exit ;
69572: POP
69573: POP
69574: GO 69580
// end ; end ;
69576: GO 69420
69578: POP
69579: POP
// end ;
69580: LD_VAR 0 3
69584: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69585: LD_INT 0
69587: PPUSH
69588: PPUSH
69589: PPUSH
// result := 0 ;
69590: LD_ADDR_VAR 0 3
69594: PUSH
69595: LD_INT 0
69597: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69598: LD_VAR 0 1
69602: PUSH
69603: LD_INT 0
69605: LESS
69606: PUSH
69607: LD_VAR 0 1
69611: PUSH
69612: LD_INT 8
69614: GREATER
69615: OR
69616: PUSH
69617: LD_VAR 0 2
69621: PUSH
69622: LD_INT 0
69624: LESS
69625: OR
69626: PUSH
69627: LD_VAR 0 2
69631: PUSH
69632: LD_INT 8
69634: GREATER
69635: OR
69636: IFFALSE 69640
// exit ;
69638: GO 69715
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69640: LD_ADDR_VAR 0 4
69644: PUSH
69645: LD_INT 22
69647: PUSH
69648: LD_VAR 0 2
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PPUSH
69657: CALL_OW 69
69661: PUSH
69662: FOR_IN
69663: IFFALSE 69713
// begin un := UnitShoot ( i ) ;
69665: LD_ADDR_VAR 0 5
69669: PUSH
69670: LD_VAR 0 4
69674: PPUSH
69675: CALL_OW 504
69679: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69680: LD_VAR 0 5
69684: PPUSH
69685: CALL_OW 255
69689: PUSH
69690: LD_VAR 0 1
69694: EQUAL
69695: IFFALSE 69711
// begin result := un ;
69697: LD_ADDR_VAR 0 3
69701: PUSH
69702: LD_VAR 0 5
69706: ST_TO_ADDR
// exit ;
69707: POP
69708: POP
69709: GO 69715
// end ; end ;
69711: GO 69662
69713: POP
69714: POP
// end ;
69715: LD_VAR 0 3
69719: RET
// export function GetCargoBay ( units ) ; begin
69720: LD_INT 0
69722: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69723: LD_ADDR_VAR 0 2
69727: PUSH
69728: LD_VAR 0 1
69732: PPUSH
69733: LD_INT 2
69735: PUSH
69736: LD_INT 34
69738: PUSH
69739: LD_INT 12
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 34
69748: PUSH
69749: LD_INT 51
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: LD_INT 34
69758: PUSH
69759: LD_INT 32
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 34
69768: PUSH
69769: LD_EXP 47
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: PPUSH
69785: CALL_OW 72
69789: ST_TO_ADDR
// end ;
69790: LD_VAR 0 2
69794: RET
// export function Negate ( value ) ; begin
69795: LD_INT 0
69797: PPUSH
// result := not value ;
69798: LD_ADDR_VAR 0 2
69802: PUSH
69803: LD_VAR 0 1
69807: NOT
69808: ST_TO_ADDR
// end ;
69809: LD_VAR 0 2
69813: RET
// export function Inc ( value ) ; begin
69814: LD_INT 0
69816: PPUSH
// result := value + 1 ;
69817: LD_ADDR_VAR 0 2
69821: PUSH
69822: LD_VAR 0 1
69826: PUSH
69827: LD_INT 1
69829: PLUS
69830: ST_TO_ADDR
// end ;
69831: LD_VAR 0 2
69835: RET
// export function Dec ( value ) ; begin
69836: LD_INT 0
69838: PPUSH
// result := value - 1 ;
69839: LD_ADDR_VAR 0 2
69843: PUSH
69844: LD_VAR 0 1
69848: PUSH
69849: LD_INT 1
69851: MINUS
69852: ST_TO_ADDR
// end ;
69853: LD_VAR 0 2
69857: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69858: LD_INT 0
69860: PPUSH
69861: PPUSH
69862: PPUSH
69863: PPUSH
69864: PPUSH
69865: PPUSH
69866: PPUSH
69867: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69868: LD_VAR 0 1
69872: PPUSH
69873: LD_VAR 0 2
69877: PPUSH
69878: CALL_OW 488
69882: NOT
69883: PUSH
69884: LD_VAR 0 3
69888: PPUSH
69889: LD_VAR 0 4
69893: PPUSH
69894: CALL_OW 488
69898: NOT
69899: OR
69900: IFFALSE 69913
// begin result := - 1 ;
69902: LD_ADDR_VAR 0 5
69906: PUSH
69907: LD_INT 1
69909: NEG
69910: ST_TO_ADDR
// exit ;
69911: GO 70148
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69913: LD_ADDR_VAR 0 12
69917: PUSH
69918: LD_VAR 0 1
69922: PPUSH
69923: LD_VAR 0 2
69927: PPUSH
69928: LD_VAR 0 3
69932: PPUSH
69933: LD_VAR 0 4
69937: PPUSH
69938: CALL 68996 0 4
69942: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69943: LD_ADDR_VAR 0 11
69947: PUSH
69948: LD_VAR 0 1
69952: PPUSH
69953: LD_VAR 0 2
69957: PPUSH
69958: LD_VAR 0 12
69962: PUSH
69963: LD_INT 1
69965: ARRAY
69966: PPUSH
69967: LD_VAR 0 12
69971: PUSH
69972: LD_INT 2
69974: ARRAY
69975: PPUSH
69976: CALL_OW 298
69980: ST_TO_ADDR
// distance := 9999 ;
69981: LD_ADDR_VAR 0 10
69985: PUSH
69986: LD_INT 9999
69988: ST_TO_ADDR
// for i := 0 to 5 do
69989: LD_ADDR_VAR 0 6
69993: PUSH
69994: DOUBLE
69995: LD_INT 0
69997: DEC
69998: ST_TO_ADDR
69999: LD_INT 5
70001: PUSH
70002: FOR_TO
70003: IFFALSE 70146
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70005: LD_ADDR_VAR 0 7
70009: PUSH
70010: LD_VAR 0 1
70014: PPUSH
70015: LD_VAR 0 6
70019: PPUSH
70020: LD_VAR 0 11
70024: PPUSH
70025: CALL_OW 272
70029: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70030: LD_ADDR_VAR 0 8
70034: PUSH
70035: LD_VAR 0 2
70039: PPUSH
70040: LD_VAR 0 6
70044: PPUSH
70045: LD_VAR 0 11
70049: PPUSH
70050: CALL_OW 273
70054: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70055: LD_VAR 0 7
70059: PPUSH
70060: LD_VAR 0 8
70064: PPUSH
70065: CALL_OW 488
70069: NOT
70070: IFFALSE 70074
// continue ;
70072: GO 70002
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70074: LD_ADDR_VAR 0 9
70078: PUSH
70079: LD_VAR 0 12
70083: PUSH
70084: LD_INT 1
70086: ARRAY
70087: PPUSH
70088: LD_VAR 0 12
70092: PUSH
70093: LD_INT 2
70095: ARRAY
70096: PPUSH
70097: LD_VAR 0 7
70101: PPUSH
70102: LD_VAR 0 8
70106: PPUSH
70107: CALL_OW 298
70111: ST_TO_ADDR
// if tmp < distance then
70112: LD_VAR 0 9
70116: PUSH
70117: LD_VAR 0 10
70121: LESS
70122: IFFALSE 70144
// begin result := i ;
70124: LD_ADDR_VAR 0 5
70128: PUSH
70129: LD_VAR 0 6
70133: ST_TO_ADDR
// distance := tmp ;
70134: LD_ADDR_VAR 0 10
70138: PUSH
70139: LD_VAR 0 9
70143: ST_TO_ADDR
// end ; end ;
70144: GO 70002
70146: POP
70147: POP
// end ;
70148: LD_VAR 0 5
70152: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70153: LD_INT 0
70155: PPUSH
70156: PPUSH
// if not driver or not IsInUnit ( driver ) then
70157: LD_VAR 0 1
70161: NOT
70162: PUSH
70163: LD_VAR 0 1
70167: PPUSH
70168: CALL_OW 310
70172: NOT
70173: OR
70174: IFFALSE 70178
// exit ;
70176: GO 70268
// vehicle := IsInUnit ( driver ) ;
70178: LD_ADDR_VAR 0 3
70182: PUSH
70183: LD_VAR 0 1
70187: PPUSH
70188: CALL_OW 310
70192: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70193: LD_VAR 0 1
70197: PPUSH
70198: LD_STRING \
70200: PUSH
70201: LD_INT 0
70203: PUSH
70204: LD_INT 0
70206: PUSH
70207: LD_INT 0
70209: PUSH
70210: LD_INT 0
70212: PUSH
70213: LD_INT 0
70215: PUSH
70216: LD_INT 0
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: LIST
70225: LIST
70226: LIST
70227: PUSH
70228: LD_STRING E
70230: PUSH
70231: LD_INT 0
70233: PUSH
70234: LD_INT 0
70236: PUSH
70237: LD_VAR 0 3
70241: PUSH
70242: LD_INT 0
70244: PUSH
70245: LD_INT 0
70247: PUSH
70248: LD_INT 0
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: PPUSH
70264: CALL_OW 446
// end ;
70268: LD_VAR 0 2
70272: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70273: LD_INT 0
70275: PPUSH
70276: PPUSH
// if not driver or not IsInUnit ( driver ) then
70277: LD_VAR 0 1
70281: NOT
70282: PUSH
70283: LD_VAR 0 1
70287: PPUSH
70288: CALL_OW 310
70292: NOT
70293: OR
70294: IFFALSE 70298
// exit ;
70296: GO 70388
// vehicle := IsInUnit ( driver ) ;
70298: LD_ADDR_VAR 0 3
70302: PUSH
70303: LD_VAR 0 1
70307: PPUSH
70308: CALL_OW 310
70312: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70313: LD_VAR 0 1
70317: PPUSH
70318: LD_STRING \
70320: PUSH
70321: LD_INT 0
70323: PUSH
70324: LD_INT 0
70326: PUSH
70327: LD_INT 0
70329: PUSH
70330: LD_INT 0
70332: PUSH
70333: LD_INT 0
70335: PUSH
70336: LD_INT 0
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: PUSH
70348: LD_STRING E
70350: PUSH
70351: LD_INT 0
70353: PUSH
70354: LD_INT 0
70356: PUSH
70357: LD_VAR 0 3
70361: PUSH
70362: LD_INT 0
70364: PUSH
70365: LD_INT 0
70367: PUSH
70368: LD_INT 0
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: LIST
70375: LIST
70376: LIST
70377: LIST
70378: LIST
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PPUSH
70384: CALL_OW 447
// end ;
70388: LD_VAR 0 2
70392: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70393: LD_INT 0
70395: PPUSH
70396: PPUSH
70397: PPUSH
// tmp := [ ] ;
70398: LD_ADDR_VAR 0 5
70402: PUSH
70403: EMPTY
70404: ST_TO_ADDR
// for i in units do
70405: LD_ADDR_VAR 0 4
70409: PUSH
70410: LD_VAR 0 1
70414: PUSH
70415: FOR_IN
70416: IFFALSE 70454
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70418: LD_ADDR_VAR 0 5
70422: PUSH
70423: LD_VAR 0 5
70427: PPUSH
70428: LD_VAR 0 5
70432: PUSH
70433: LD_INT 1
70435: PLUS
70436: PPUSH
70437: LD_VAR 0 4
70441: PPUSH
70442: CALL_OW 256
70446: PPUSH
70447: CALL_OW 2
70451: ST_TO_ADDR
70452: GO 70415
70454: POP
70455: POP
// if not tmp then
70456: LD_VAR 0 5
70460: NOT
70461: IFFALSE 70465
// exit ;
70463: GO 70513
// if asc then
70465: LD_VAR 0 2
70469: IFFALSE 70493
// result := SortListByListAsc ( units , tmp ) else
70471: LD_ADDR_VAR 0 3
70475: PUSH
70476: LD_VAR 0 1
70480: PPUSH
70481: LD_VAR 0 5
70485: PPUSH
70486: CALL_OW 76
70490: ST_TO_ADDR
70491: GO 70513
// result := SortListByListDesc ( units , tmp ) ;
70493: LD_ADDR_VAR 0 3
70497: PUSH
70498: LD_VAR 0 1
70502: PPUSH
70503: LD_VAR 0 5
70507: PPUSH
70508: CALL_OW 77
70512: ST_TO_ADDR
// end ;
70513: LD_VAR 0 3
70517: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70518: LD_INT 0
70520: PPUSH
70521: PPUSH
// task := GetTaskList ( mech ) ;
70522: LD_ADDR_VAR 0 4
70526: PUSH
70527: LD_VAR 0 1
70531: PPUSH
70532: CALL_OW 437
70536: ST_TO_ADDR
// if not task then
70537: LD_VAR 0 4
70541: NOT
70542: IFFALSE 70546
// exit ;
70544: GO 70588
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70546: LD_ADDR_VAR 0 3
70550: PUSH
70551: LD_VAR 0 4
70555: PUSH
70556: LD_INT 1
70558: ARRAY
70559: PUSH
70560: LD_INT 1
70562: ARRAY
70563: PUSH
70564: LD_STRING r
70566: EQUAL
70567: PUSH
70568: LD_VAR 0 4
70572: PUSH
70573: LD_INT 1
70575: ARRAY
70576: PUSH
70577: LD_INT 4
70579: ARRAY
70580: PUSH
70581: LD_VAR 0 2
70585: EQUAL
70586: AND
70587: ST_TO_ADDR
// end ;
70588: LD_VAR 0 3
70592: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70593: LD_INT 0
70595: PPUSH
// SetDir ( unit , d ) ;
70596: LD_VAR 0 1
70600: PPUSH
70601: LD_VAR 0 4
70605: PPUSH
70606: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70610: LD_VAR 0 1
70614: PPUSH
70615: LD_VAR 0 2
70619: PPUSH
70620: LD_VAR 0 3
70624: PPUSH
70625: LD_VAR 0 5
70629: PPUSH
70630: CALL_OW 48
// end ;
70634: LD_VAR 0 6
70638: RET
// export function ToNaturalNumber ( number ) ; begin
70639: LD_INT 0
70641: PPUSH
// result := number div 1 ;
70642: LD_ADDR_VAR 0 2
70646: PUSH
70647: LD_VAR 0 1
70651: PUSH
70652: LD_INT 1
70654: DIV
70655: ST_TO_ADDR
// if number < 0 then
70656: LD_VAR 0 1
70660: PUSH
70661: LD_INT 0
70663: LESS
70664: IFFALSE 70674
// result := 0 ;
70666: LD_ADDR_VAR 0 2
70670: PUSH
70671: LD_INT 0
70673: ST_TO_ADDR
// end ;
70674: LD_VAR 0 2
70678: RET
// export function SortByClass ( units , class ) ; var un ; begin
70679: LD_INT 0
70681: PPUSH
70682: PPUSH
// if not units or not class then
70683: LD_VAR 0 1
70687: NOT
70688: PUSH
70689: LD_VAR 0 2
70693: NOT
70694: OR
70695: IFFALSE 70699
// exit ;
70697: GO 70794
// result := [ ] ;
70699: LD_ADDR_VAR 0 3
70703: PUSH
70704: EMPTY
70705: ST_TO_ADDR
// for un in units do
70706: LD_ADDR_VAR 0 4
70710: PUSH
70711: LD_VAR 0 1
70715: PUSH
70716: FOR_IN
70717: IFFALSE 70792
// if GetClass ( un ) = class then
70719: LD_VAR 0 4
70723: PPUSH
70724: CALL_OW 257
70728: PUSH
70729: LD_VAR 0 2
70733: EQUAL
70734: IFFALSE 70761
// result := Insert ( result , 1 , un ) else
70736: LD_ADDR_VAR 0 3
70740: PUSH
70741: LD_VAR 0 3
70745: PPUSH
70746: LD_INT 1
70748: PPUSH
70749: LD_VAR 0 4
70753: PPUSH
70754: CALL_OW 2
70758: ST_TO_ADDR
70759: GO 70790
// result := Replace ( result , result + 1 , un ) ;
70761: LD_ADDR_VAR 0 3
70765: PUSH
70766: LD_VAR 0 3
70770: PPUSH
70771: LD_VAR 0 3
70775: PUSH
70776: LD_INT 1
70778: PLUS
70779: PPUSH
70780: LD_VAR 0 4
70784: PPUSH
70785: CALL_OW 1
70789: ST_TO_ADDR
70790: GO 70716
70792: POP
70793: POP
// end ;
70794: LD_VAR 0 3
70798: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70799: LD_INT 0
70801: PPUSH
70802: PPUSH
70803: PPUSH
70804: PPUSH
70805: PPUSH
70806: PPUSH
70807: PPUSH
// result := [ ] ;
70808: LD_ADDR_VAR 0 4
70812: PUSH
70813: EMPTY
70814: ST_TO_ADDR
// if x - r < 0 then
70815: LD_VAR 0 1
70819: PUSH
70820: LD_VAR 0 3
70824: MINUS
70825: PUSH
70826: LD_INT 0
70828: LESS
70829: IFFALSE 70841
// min_x := 0 else
70831: LD_ADDR_VAR 0 8
70835: PUSH
70836: LD_INT 0
70838: ST_TO_ADDR
70839: GO 70857
// min_x := x - r ;
70841: LD_ADDR_VAR 0 8
70845: PUSH
70846: LD_VAR 0 1
70850: PUSH
70851: LD_VAR 0 3
70855: MINUS
70856: ST_TO_ADDR
// if y - r < 0 then
70857: LD_VAR 0 2
70861: PUSH
70862: LD_VAR 0 3
70866: MINUS
70867: PUSH
70868: LD_INT 0
70870: LESS
70871: IFFALSE 70883
// min_y := 0 else
70873: LD_ADDR_VAR 0 7
70877: PUSH
70878: LD_INT 0
70880: ST_TO_ADDR
70881: GO 70899
// min_y := y - r ;
70883: LD_ADDR_VAR 0 7
70887: PUSH
70888: LD_VAR 0 2
70892: PUSH
70893: LD_VAR 0 3
70897: MINUS
70898: ST_TO_ADDR
// max_x := x + r ;
70899: LD_ADDR_VAR 0 9
70903: PUSH
70904: LD_VAR 0 1
70908: PUSH
70909: LD_VAR 0 3
70913: PLUS
70914: ST_TO_ADDR
// max_y := y + r ;
70915: LD_ADDR_VAR 0 10
70919: PUSH
70920: LD_VAR 0 2
70924: PUSH
70925: LD_VAR 0 3
70929: PLUS
70930: ST_TO_ADDR
// for _x = min_x to max_x do
70931: LD_ADDR_VAR 0 5
70935: PUSH
70936: DOUBLE
70937: LD_VAR 0 8
70941: DEC
70942: ST_TO_ADDR
70943: LD_VAR 0 9
70947: PUSH
70948: FOR_TO
70949: IFFALSE 71050
// for _y = min_y to max_y do
70951: LD_ADDR_VAR 0 6
70955: PUSH
70956: DOUBLE
70957: LD_VAR 0 7
70961: DEC
70962: ST_TO_ADDR
70963: LD_VAR 0 10
70967: PUSH
70968: FOR_TO
70969: IFFALSE 71046
// begin if not ValidHex ( _x , _y ) then
70971: LD_VAR 0 5
70975: PPUSH
70976: LD_VAR 0 6
70980: PPUSH
70981: CALL_OW 488
70985: NOT
70986: IFFALSE 70990
// continue ;
70988: GO 70968
// if GetResourceTypeXY ( _x , _y ) then
70990: LD_VAR 0 5
70994: PPUSH
70995: LD_VAR 0 6
70999: PPUSH
71000: CALL_OW 283
71004: IFFALSE 71044
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71006: LD_ADDR_VAR 0 4
71010: PUSH
71011: LD_VAR 0 4
71015: PPUSH
71016: LD_VAR 0 4
71020: PUSH
71021: LD_INT 1
71023: PLUS
71024: PPUSH
71025: LD_VAR 0 5
71029: PUSH
71030: LD_VAR 0 6
71034: PUSH
71035: EMPTY
71036: LIST
71037: LIST
71038: PPUSH
71039: CALL_OW 1
71043: ST_TO_ADDR
// end ;
71044: GO 70968
71046: POP
71047: POP
71048: GO 70948
71050: POP
71051: POP
// end ;
71052: LD_VAR 0 4
71056: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71057: LD_INT 0
71059: PPUSH
71060: PPUSH
71061: PPUSH
71062: PPUSH
71063: PPUSH
71064: PPUSH
71065: PPUSH
71066: PPUSH
// if not units then
71067: LD_VAR 0 1
71071: NOT
71072: IFFALSE 71076
// exit ;
71074: GO 71602
// result := UnitFilter ( units , [ f_ok ] ) ;
71076: LD_ADDR_VAR 0 3
71080: PUSH
71081: LD_VAR 0 1
71085: PPUSH
71086: LD_INT 50
71088: PUSH
71089: EMPTY
71090: LIST
71091: PPUSH
71092: CALL_OW 72
71096: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71097: LD_ADDR_VAR 0 8
71101: PUSH
71102: LD_VAR 0 1
71106: PUSH
71107: LD_INT 1
71109: ARRAY
71110: PPUSH
71111: CALL_OW 255
71115: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71116: LD_ADDR_VAR 0 10
71120: PUSH
71121: LD_INT 29
71123: PUSH
71124: LD_EXP 50
71128: PUSH
71129: LD_INT 49
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: LIST
71136: ST_TO_ADDR
// if not result then
71137: LD_VAR 0 3
71141: NOT
71142: IFFALSE 71146
// exit ;
71144: GO 71602
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71146: LD_ADDR_VAR 0 5
71150: PUSH
71151: LD_INT 81
71153: PUSH
71154: LD_VAR 0 8
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: PPUSH
71163: CALL_OW 69
71167: ST_TO_ADDR
// for i in result do
71168: LD_ADDR_VAR 0 4
71172: PUSH
71173: LD_VAR 0 3
71177: PUSH
71178: FOR_IN
71179: IFFALSE 71600
// begin tag := GetTag ( i ) + 1 ;
71181: LD_ADDR_VAR 0 9
71185: PUSH
71186: LD_VAR 0 4
71190: PPUSH
71191: CALL_OW 110
71195: PUSH
71196: LD_INT 1
71198: PLUS
71199: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71200: LD_ADDR_VAR 0 7
71204: PUSH
71205: LD_VAR 0 4
71209: PPUSH
71210: CALL_OW 250
71214: PPUSH
71215: LD_VAR 0 4
71219: PPUSH
71220: CALL_OW 251
71224: PPUSH
71225: LD_INT 6
71227: PPUSH
71228: CALL 70799 0 3
71232: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71233: LD_VAR 0 4
71237: PPUSH
71238: CALL_OW 247
71242: PUSH
71243: LD_INT 2
71245: EQUAL
71246: PUSH
71247: LD_VAR 0 7
71251: AND
71252: PUSH
71253: LD_VAR 0 4
71257: PPUSH
71258: CALL_OW 264
71262: PUSH
71263: LD_VAR 0 10
71267: IN
71268: NOT
71269: AND
71270: IFFALSE 71309
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71272: LD_VAR 0 4
71276: PPUSH
71277: LD_VAR 0 7
71281: PUSH
71282: LD_INT 1
71284: ARRAY
71285: PUSH
71286: LD_INT 1
71288: ARRAY
71289: PPUSH
71290: LD_VAR 0 7
71294: PUSH
71295: LD_INT 1
71297: ARRAY
71298: PUSH
71299: LD_INT 2
71301: ARRAY
71302: PPUSH
71303: CALL_OW 116
71307: GO 71598
// if path > tag then
71309: LD_VAR 0 2
71313: PUSH
71314: LD_VAR 0 9
71318: GREATER
71319: IFFALSE 71527
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71321: LD_ADDR_VAR 0 6
71325: PUSH
71326: LD_VAR 0 5
71330: PPUSH
71331: LD_INT 91
71333: PUSH
71334: LD_VAR 0 4
71338: PUSH
71339: LD_INT 8
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: LIST
71346: PPUSH
71347: CALL_OW 72
71351: ST_TO_ADDR
// if nearEnemy then
71352: LD_VAR 0 6
71356: IFFALSE 71425
// begin if GetWeapon ( i ) = ru_time_lapser then
71358: LD_VAR 0 4
71362: PPUSH
71363: CALL_OW 264
71367: PUSH
71368: LD_INT 49
71370: EQUAL
71371: IFFALSE 71399
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71373: LD_VAR 0 4
71377: PPUSH
71378: LD_VAR 0 6
71382: PPUSH
71383: LD_VAR 0 4
71387: PPUSH
71388: CALL_OW 74
71392: PPUSH
71393: CALL_OW 112
71397: GO 71423
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71399: LD_VAR 0 4
71403: PPUSH
71404: LD_VAR 0 6
71408: PPUSH
71409: LD_VAR 0 4
71413: PPUSH
71414: CALL_OW 74
71418: PPUSH
71419: CALL_OW 115
// end else
71423: GO 71525
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71425: LD_VAR 0 4
71429: PPUSH
71430: LD_VAR 0 2
71434: PUSH
71435: LD_VAR 0 9
71439: ARRAY
71440: PUSH
71441: LD_INT 1
71443: ARRAY
71444: PPUSH
71445: LD_VAR 0 2
71449: PUSH
71450: LD_VAR 0 9
71454: ARRAY
71455: PUSH
71456: LD_INT 2
71458: ARRAY
71459: PPUSH
71460: CALL_OW 297
71464: PUSH
71465: LD_INT 6
71467: GREATER
71468: IFFALSE 71511
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71470: LD_VAR 0 4
71474: PPUSH
71475: LD_VAR 0 2
71479: PUSH
71480: LD_VAR 0 9
71484: ARRAY
71485: PUSH
71486: LD_INT 1
71488: ARRAY
71489: PPUSH
71490: LD_VAR 0 2
71494: PUSH
71495: LD_VAR 0 9
71499: ARRAY
71500: PUSH
71501: LD_INT 2
71503: ARRAY
71504: PPUSH
71505: CALL_OW 114
71509: GO 71525
// SetTag ( i , tag ) ;
71511: LD_VAR 0 4
71515: PPUSH
71516: LD_VAR 0 9
71520: PPUSH
71521: CALL_OW 109
// end else
71525: GO 71598
// if enemy then
71527: LD_VAR 0 5
71531: IFFALSE 71598
// begin if GetWeapon ( i ) = ru_time_lapser then
71533: LD_VAR 0 4
71537: PPUSH
71538: CALL_OW 264
71542: PUSH
71543: LD_INT 49
71545: EQUAL
71546: IFFALSE 71574
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71548: LD_VAR 0 4
71552: PPUSH
71553: LD_VAR 0 5
71557: PPUSH
71558: LD_VAR 0 4
71562: PPUSH
71563: CALL_OW 74
71567: PPUSH
71568: CALL_OW 112
71572: GO 71598
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71574: LD_VAR 0 4
71578: PPUSH
71579: LD_VAR 0 5
71583: PPUSH
71584: LD_VAR 0 4
71588: PPUSH
71589: CALL_OW 74
71593: PPUSH
71594: CALL_OW 115
// end ; end ;
71598: GO 71178
71600: POP
71601: POP
// end ;
71602: LD_VAR 0 3
71606: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71607: LD_INT 0
71609: PPUSH
71610: PPUSH
71611: PPUSH
// if not unit or IsInUnit ( unit ) then
71612: LD_VAR 0 1
71616: NOT
71617: PUSH
71618: LD_VAR 0 1
71622: PPUSH
71623: CALL_OW 310
71627: OR
71628: IFFALSE 71632
// exit ;
71630: GO 71723
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71632: LD_ADDR_VAR 0 4
71636: PUSH
71637: LD_VAR 0 1
71641: PPUSH
71642: CALL_OW 250
71646: PPUSH
71647: LD_VAR 0 2
71651: PPUSH
71652: LD_INT 1
71654: PPUSH
71655: CALL_OW 272
71659: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71660: LD_ADDR_VAR 0 5
71664: PUSH
71665: LD_VAR 0 1
71669: PPUSH
71670: CALL_OW 251
71674: PPUSH
71675: LD_VAR 0 2
71679: PPUSH
71680: LD_INT 1
71682: PPUSH
71683: CALL_OW 273
71687: ST_TO_ADDR
// if ValidHex ( x , y ) then
71688: LD_VAR 0 4
71692: PPUSH
71693: LD_VAR 0 5
71697: PPUSH
71698: CALL_OW 488
71702: IFFALSE 71723
// ComTurnXY ( unit , x , y ) ;
71704: LD_VAR 0 1
71708: PPUSH
71709: LD_VAR 0 4
71713: PPUSH
71714: LD_VAR 0 5
71718: PPUSH
71719: CALL_OW 118
// end ;
71723: LD_VAR 0 3
71727: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71728: LD_INT 0
71730: PPUSH
71731: PPUSH
// result := false ;
71732: LD_ADDR_VAR 0 3
71736: PUSH
71737: LD_INT 0
71739: ST_TO_ADDR
// if not units then
71740: LD_VAR 0 2
71744: NOT
71745: IFFALSE 71749
// exit ;
71747: GO 71794
// for i in units do
71749: LD_ADDR_VAR 0 4
71753: PUSH
71754: LD_VAR 0 2
71758: PUSH
71759: FOR_IN
71760: IFFALSE 71792
// if See ( side , i ) then
71762: LD_VAR 0 1
71766: PPUSH
71767: LD_VAR 0 4
71771: PPUSH
71772: CALL_OW 292
71776: IFFALSE 71790
// begin result := true ;
71778: LD_ADDR_VAR 0 3
71782: PUSH
71783: LD_INT 1
71785: ST_TO_ADDR
// exit ;
71786: POP
71787: POP
71788: GO 71794
// end ;
71790: GO 71759
71792: POP
71793: POP
// end ;
71794: LD_VAR 0 3
71798: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71799: LD_INT 0
71801: PPUSH
71802: PPUSH
71803: PPUSH
71804: PPUSH
// if not unit or not points then
71805: LD_VAR 0 1
71809: NOT
71810: PUSH
71811: LD_VAR 0 2
71815: NOT
71816: OR
71817: IFFALSE 71821
// exit ;
71819: GO 71911
// dist := 99999 ;
71821: LD_ADDR_VAR 0 5
71825: PUSH
71826: LD_INT 99999
71828: ST_TO_ADDR
// for i in points do
71829: LD_ADDR_VAR 0 4
71833: PUSH
71834: LD_VAR 0 2
71838: PUSH
71839: FOR_IN
71840: IFFALSE 71909
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71842: LD_ADDR_VAR 0 6
71846: PUSH
71847: LD_VAR 0 1
71851: PPUSH
71852: LD_VAR 0 4
71856: PUSH
71857: LD_INT 1
71859: ARRAY
71860: PPUSH
71861: LD_VAR 0 4
71865: PUSH
71866: LD_INT 2
71868: ARRAY
71869: PPUSH
71870: CALL_OW 297
71874: ST_TO_ADDR
// if tmpDist < dist then
71875: LD_VAR 0 6
71879: PUSH
71880: LD_VAR 0 5
71884: LESS
71885: IFFALSE 71907
// begin result := i ;
71887: LD_ADDR_VAR 0 3
71891: PUSH
71892: LD_VAR 0 4
71896: ST_TO_ADDR
// dist := tmpDist ;
71897: LD_ADDR_VAR 0 5
71901: PUSH
71902: LD_VAR 0 6
71906: ST_TO_ADDR
// end ; end ;
71907: GO 71839
71909: POP
71910: POP
// end ;
71911: LD_VAR 0 3
71915: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71916: LD_INT 0
71918: PPUSH
// uc_side := side ;
71919: LD_ADDR_OWVAR 20
71923: PUSH
71924: LD_VAR 0 1
71928: ST_TO_ADDR
// uc_nation := 3 ;
71929: LD_ADDR_OWVAR 21
71933: PUSH
71934: LD_INT 3
71936: ST_TO_ADDR
// vc_chassis := 25 ;
71937: LD_ADDR_OWVAR 37
71941: PUSH
71942: LD_INT 25
71944: ST_TO_ADDR
// vc_engine := engine_siberite ;
71945: LD_ADDR_OWVAR 39
71949: PUSH
71950: LD_INT 3
71952: ST_TO_ADDR
// vc_control := control_computer ;
71953: LD_ADDR_OWVAR 38
71957: PUSH
71958: LD_INT 3
71960: ST_TO_ADDR
// vc_weapon := 59 ;
71961: LD_ADDR_OWVAR 40
71965: PUSH
71966: LD_INT 59
71968: ST_TO_ADDR
// result := CreateVehicle ;
71969: LD_ADDR_VAR 0 5
71973: PUSH
71974: CALL_OW 45
71978: ST_TO_ADDR
// SetDir ( result , d ) ;
71979: LD_VAR 0 5
71983: PPUSH
71984: LD_VAR 0 4
71988: PPUSH
71989: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71993: LD_VAR 0 5
71997: PPUSH
71998: LD_VAR 0 2
72002: PPUSH
72003: LD_VAR 0 3
72007: PPUSH
72008: LD_INT 0
72010: PPUSH
72011: CALL_OW 48
// end ;
72015: LD_VAR 0 5
72019: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72020: LD_INT 0
72022: PPUSH
72023: PPUSH
72024: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72025: LD_ADDR_VAR 0 2
72029: PUSH
72030: LD_INT 0
72032: PUSH
72033: LD_INT 0
72035: PUSH
72036: LD_INT 0
72038: PUSH
72039: LD_INT 0
72041: PUSH
72042: EMPTY
72043: LIST
72044: LIST
72045: LIST
72046: LIST
72047: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72048: LD_VAR 0 1
72052: NOT
72053: PUSH
72054: LD_VAR 0 1
72058: PPUSH
72059: CALL_OW 264
72063: PUSH
72064: LD_INT 12
72066: PUSH
72067: LD_INT 51
72069: PUSH
72070: LD_INT 32
72072: PUSH
72073: LD_EXP 47
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: IN
72084: NOT
72085: OR
72086: IFFALSE 72090
// exit ;
72088: GO 72188
// for i := 1 to 3 do
72090: LD_ADDR_VAR 0 3
72094: PUSH
72095: DOUBLE
72096: LD_INT 1
72098: DEC
72099: ST_TO_ADDR
72100: LD_INT 3
72102: PUSH
72103: FOR_TO
72104: IFFALSE 72186
// begin tmp := GetCargo ( cargo , i ) ;
72106: LD_ADDR_VAR 0 4
72110: PUSH
72111: LD_VAR 0 1
72115: PPUSH
72116: LD_VAR 0 3
72120: PPUSH
72121: CALL_OW 289
72125: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72126: LD_ADDR_VAR 0 2
72130: PUSH
72131: LD_VAR 0 2
72135: PPUSH
72136: LD_VAR 0 3
72140: PPUSH
72141: LD_VAR 0 4
72145: PPUSH
72146: CALL_OW 1
72150: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72151: LD_ADDR_VAR 0 2
72155: PUSH
72156: LD_VAR 0 2
72160: PPUSH
72161: LD_INT 4
72163: PPUSH
72164: LD_VAR 0 2
72168: PUSH
72169: LD_INT 4
72171: ARRAY
72172: PUSH
72173: LD_VAR 0 4
72177: PLUS
72178: PPUSH
72179: CALL_OW 1
72183: ST_TO_ADDR
// end ;
72184: GO 72103
72186: POP
72187: POP
// end ;
72188: LD_VAR 0 2
72192: RET
// export function Length ( array ) ; begin
72193: LD_INT 0
72195: PPUSH
// result := array + 0 ;
72196: LD_ADDR_VAR 0 2
72200: PUSH
72201: LD_VAR 0 1
72205: PUSH
72206: LD_INT 0
72208: PLUS
72209: ST_TO_ADDR
// end ; end_of_file
72210: LD_VAR 0 2
72214: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72215: LD_VAR 0 1
72219: PUSH
72220: LD_INT 200
72222: DOUBLE
72223: GREATEREQUAL
72224: IFFALSE 72232
72226: LD_INT 299
72228: DOUBLE
72229: LESSEQUAL
72230: IFTRUE 72234
72232: GO 72266
72234: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72235: LD_VAR 0 1
72239: PPUSH
72240: LD_VAR 0 2
72244: PPUSH
72245: LD_VAR 0 3
72249: PPUSH
72250: LD_VAR 0 4
72254: PPUSH
72255: LD_VAR 0 5
72259: PPUSH
72260: CALL 27117 0 5
72264: GO 72343
72266: LD_INT 300
72268: DOUBLE
72269: GREATEREQUAL
72270: IFFALSE 72278
72272: LD_INT 399
72274: DOUBLE
72275: LESSEQUAL
72276: IFTRUE 72280
72278: GO 72342
72280: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72281: LD_VAR 0 1
72285: PPUSH
72286: LD_VAR 0 2
72290: PPUSH
72291: LD_VAR 0 3
72295: PPUSH
72296: LD_VAR 0 4
72300: PPUSH
72301: LD_VAR 0 5
72305: PPUSH
72306: LD_VAR 0 6
72310: PPUSH
72311: LD_VAR 0 7
72315: PPUSH
72316: LD_VAR 0 8
72320: PPUSH
72321: LD_VAR 0 9
72325: PPUSH
72326: LD_VAR 0 10
72330: PPUSH
72331: LD_VAR 0 11
72335: PPUSH
72336: CALL 23512 0 11
72340: GO 72343
72342: POP
// end ;
72343: PPOPN 11
72345: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72346: LD_VAR 0 1
72350: PPUSH
72351: LD_VAR 0 2
72355: PPUSH
72356: LD_VAR 0 3
72360: PPUSH
72361: LD_VAR 0 4
72365: PPUSH
72366: LD_VAR 0 5
72370: PPUSH
72371: CALL 26853 0 5
// end ; end_of_file
72375: PPOPN 5
72377: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72378: LD_VAR 0 1
72382: PPUSH
72383: LD_VAR 0 2
72387: PPUSH
72388: LD_VAR 0 3
72392: PPUSH
72393: LD_VAR 0 4
72397: PPUSH
72398: LD_VAR 0 5
72402: PPUSH
72403: LD_VAR 0 6
72407: PPUSH
72408: CALL 11205 0 6
// end ;
72412: PPOPN 6
72414: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72415: LD_INT 0
72417: PPUSH
// begin if not units then
72418: LD_VAR 0 1
72422: NOT
72423: IFFALSE 72427
// exit ;
72425: GO 72427
// end ;
72427: PPOPN 7
72429: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72430: CALL 11176 0 0
// end ;
72434: PPOPN 1
72436: END
