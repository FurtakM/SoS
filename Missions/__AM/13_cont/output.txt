// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak = 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus = 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot = 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched = 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources = [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles = [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 = 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 = 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 = 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 = 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 = 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// mission_prefix = 13f_ ;
 154: LD_ADDR_EXP 34
 158: PUSH
 159: LD_STRING 13f_
 161: ST_TO_ADDR
// debugMode = 0 ;
 162: LD_ADDR_EXP 40
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// achivCounter := 0 ;
 170: LD_ADDR_EXP 41
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// if Difficulty = 1 then
 178: LD_OWVAR 67
 182: PUSH
 183: LD_INT 1
 185: EQUAL
 186: IFFALSE 195
// RemoveEnvironmentArea ( oilBlockArea ) ;
 188: LD_INT 15
 190: PPUSH
 191: CALL_OW 355
// PrepareVehicles ;
 195: CALL 1314 0 0
// PrepareHeroes ;
 199: CALL 571 0 0
// PrepareAmericansRandom ;
 203: CALL 1218 0 0
// PrepareDifficulty ;
 207: CALL 6279 0 0
// end ;
 211: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 212: LD_EXP 40
 216: PUSH
 217: LD_INT 1
 219: EQUAL
 220: IFFALSE 526
 222: GO 224
 224: DISABLE
 225: LD_INT 0
 227: PPUSH
// begin enable ;
 228: ENABLE
// fogoff ( true ) ;
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 236: LD_ADDR_VAR 0 1
 240: PUSH
 241: LD_INT 22
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: LD_INT 21
 253: PUSH
 254: LD_INT 1
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: PPUSH
 265: CALL_OW 69
 269: PUSH
 270: FOR_IN
 271: IFFALSE 287
// SetLives ( i , 1000 ) ;
 273: LD_VAR 0 1
 277: PPUSH
 278: LD_INT 1000
 280: PPUSH
 281: CALL_OW 234
 285: GO 270
 287: POP
 288: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 22
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: LD_INT 2
 306: PUSH
 307: LD_INT 30
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 30
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 366
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: CALL_OW 274
 353: PPUSH
 354: LD_INT 1
 356: PPUSH
 357: LD_INT 9999
 359: PPUSH
 360: CALL_OW 277
 364: GO 341
 366: POP
 367: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 30
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 30
 398: PUSH
 399: LD_INT 1
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 2
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 30
 477: PUSH
 478: LD_INT 1
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PPUSH
 494: CALL_OW 69
 498: PUSH
 499: FOR_IN
 500: IFFALSE 524
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 502: LD_VAR 0 1
 506: PPUSH
 507: CALL_OW 274
 511: PPUSH
 512: LD_INT 3
 514: PPUSH
 515: LD_INT 9999
 517: PPUSH
 518: CALL_OW 277
 522: GO 499
 524: POP
 525: POP
// end ;
 526: PPOPN 1
 528: END
// every 0 0$1 trigger achivCounter >= 2 do
 529: LD_EXP 41
 533: PUSH
 534: LD_INT 2
 536: GREATEREQUAL
 537: IFFALSE 549
 539: GO 541
 541: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 542: LD_STRING ACH_REMOTE
 544: PPUSH
 545: CALL_OW 543
 549: END
// every 0 0$1 trigger destroyCounter >= 30 do
 550: LD_EXP 42
 554: PUSH
 555: LD_INT 30
 557: GREATEREQUAL
 558: IFFALSE 570
 560: GO 562
 562: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 563: LD_STRING ACH_DEFMASTER
 565: PPUSH
 566: CALL_OW 543
 570: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
// uc_side = 1 ;
 577: LD_ADDR_OWVAR 20
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 585: LD_ADDR_EXP 1
 589: PUSH
 590: LD_STRING JMM
 592: PPUSH
 593: LD_EXP 40
 597: NOT
 598: PPUSH
 599: LD_STRING 13c_
 601: PPUSH
 602: CALL 30259 0 3
 606: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 607: LD_ADDR_EXP 2
 611: PUSH
 612: LD_STRING Stevens
 614: PPUSH
 615: LD_EXP 40
 619: NOT
 620: PPUSH
 621: LD_STRING 13c_
 623: PPUSH
 624: CALL 30259 0 3
 628: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 629: LD_ADDR_EXP 3
 633: PUSH
 634: LD_STRING Lisa
 636: PPUSH
 637: LD_EXP 40
 641: NOT
 642: PPUSH
 643: LD_STRING 13c_
 645: PPUSH
 646: CALL 30259 0 3
 650: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 651: LD_ADDR_EXP 4
 655: PUSH
 656: LD_STRING Donaldson
 658: PPUSH
 659: LD_EXP 40
 663: NOT
 664: PPUSH
 665: LD_STRING 13c_
 667: PPUSH
 668: CALL 30259 0 3
 672: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 673: LD_ADDR_EXP 5
 677: PUSH
 678: LD_STRING Bobby
 680: PPUSH
 681: LD_EXP 40
 685: NOT
 686: PPUSH
 687: LD_STRING 13c_
 689: PPUSH
 690: CALL 30259 0 3
 694: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 695: LD_ADDR_EXP 6
 699: PUSH
 700: LD_STRING Cyrus
 702: PPUSH
 703: LD_EXP 40
 707: NOT
 708: PPUSH
 709: LD_STRING 13c_
 711: PPUSH
 712: CALL 30259 0 3
 716: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 717: LD_ADDR_EXP 7
 721: PUSH
 722: LD_STRING Denis
 724: PPUSH
 725: LD_EXP 40
 729: NOT
 730: PPUSH
 731: LD_STRING 13c_
 733: PPUSH
 734: CALL 30259 0 3
 738: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 739: LD_ADDR_EXP 8
 743: PUSH
 744: LD_STRING Brown
 746: PPUSH
 747: LD_EXP 40
 751: NOT
 752: PPUSH
 753: LD_STRING 13c_
 755: PPUSH
 756: CALL 30259 0 3
 760: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 13c_ ) ;
 761: LD_ADDR_EXP 9
 765: PUSH
 766: LD_STRING Gladstone
 768: PPUSH
 769: LD_INT 1
 771: PPUSH
 772: LD_STRING 13c_
 774: PPUSH
 775: CALL 30259 0 3
 779: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 13c_ ) ;
 780: LD_ADDR_EXP 10
 784: PUSH
 785: LD_STRING Houten
 787: PPUSH
 788: LD_INT 1
 790: PPUSH
 791: LD_STRING 13c_
 793: PPUSH
 794: CALL 30259 0 3
 798: ST_TO_ADDR
// Cornel = PrepareUnit ( Cornel , true , 13c_ ) ;
 799: LD_ADDR_EXP 11
 803: PUSH
 804: LD_STRING Cornel
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_STRING 13c_
 812: PPUSH
 813: CALL 30259 0 3
 817: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 13c_ ) ;
 818: LD_ADDR_EXP 12
 822: PUSH
 823: LD_STRING Gary
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_STRING 13c_
 831: PPUSH
 832: CALL 30259 0 3
 836: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 13c_ ) ;
 837: LD_ADDR_EXP 13
 841: PUSH
 842: LD_STRING Frank
 844: PPUSH
 845: LD_INT 1
 847: PPUSH
 848: LD_STRING 13c_
 850: PPUSH
 851: CALL 30259 0 3
 855: ST_TO_ADDR
// Kikuchi = PrepareUnit ( Kikuchi , true , 13c_ ) ;
 856: LD_ADDR_EXP 14
 860: PUSH
 861: LD_STRING Kikuchi
 863: PPUSH
 864: LD_INT 1
 866: PPUSH
 867: LD_STRING 13c_
 869: PPUSH
 870: CALL 30259 0 3
 874: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 875: LD_ADDR_EXP 15
 879: PUSH
 880: LD_STRING Powell
 882: PPUSH
 883: LD_INT 0
 885: PPUSH
 886: LD_STRING 
 888: PPUSH
 889: CALL 30259 0 3
 893: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 894: LD_ADDR_VAR 0 2
 898: PUSH
 899: LD_EXP 1
 903: PUSH
 904: LD_EXP 2
 908: PUSH
 909: LD_EXP 3
 913: PUSH
 914: LD_EXP 4
 918: PUSH
 919: LD_EXP 5
 923: PUSH
 924: LD_EXP 6
 928: PUSH
 929: LD_EXP 7
 933: PUSH
 934: LD_EXP 8
 938: PUSH
 939: LD_EXP 9
 943: PUSH
 944: LD_EXP 10
 948: PUSH
 949: LD_EXP 11
 953: PUSH
 954: LD_EXP 12
 958: PUSH
 959: LD_EXP 13
 963: PUSH
 964: LD_EXP 14
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 985: LD_ADDR_VAR 0 3
 989: PUSH
 990: LD_INT 22
 992: PUSH
 993: LD_INT 1
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 33
1002: PUSH
1003: LD_INT 1
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 21
1012: PUSH
1013: LD_INT 2
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: LIST
1024: PPUSH
1025: CALL_OW 69
1029: ST_TO_ADDR
// for i = tmp downto 1 do
1030: LD_ADDR_VAR 0 4
1034: PUSH
1035: DOUBLE
1036: LD_VAR 0 2
1040: INC
1041: ST_TO_ADDR
1042: LD_INT 1
1044: PUSH
1045: FOR_DOWNTO
1046: IFFALSE 1083
// if not tmp [ i ] then
1048: LD_VAR 0 2
1052: PUSH
1053: LD_VAR 0 4
1057: ARRAY
1058: NOT
1059: IFFALSE 1081
// tmp := Delete ( tmp , i ) ;
1061: LD_ADDR_VAR 0 2
1065: PUSH
1066: LD_VAR 0 2
1070: PPUSH
1071: LD_VAR 0 4
1075: PPUSH
1076: CALL_OW 3
1080: ST_TO_ADDR
1081: GO 1045
1083: POP
1084: POP
// for i = 1 to tmp do
1085: LD_ADDR_VAR 0 4
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_VAR 0 2
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1131
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1103: LD_VAR 0 2
1107: PUSH
1108: LD_VAR 0 4
1112: ARRAY
1113: PPUSH
1114: LD_VAR 0 3
1118: PUSH
1119: LD_VAR 0 4
1123: ARRAY
1124: PPUSH
1125: CALL_OW 52
1129: GO 1100
1131: POP
1132: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1133: LD_INT 22
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 25
1145: PUSH
1146: LD_INT 2
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: PPUSH
1157: CALL_OW 69
1161: PUSH
1162: LD_INT 0
1164: EQUAL
1165: PUSH
1166: LD_INT 22
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 34
1178: PUSH
1179: LD_INT 13
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PPUSH
1190: CALL_OW 69
1194: PUSH
1195: LD_INT 0
1197: EQUAL
1198: AND
1199: IFFALSE 1213
// SetClass ( JMM , 2 ) ;
1201: LD_EXP 1
1205: PPUSH
1206: LD_INT 2
1208: PPUSH
1209: CALL_OW 336
// end ;
1213: LD_VAR 0 1
1217: RET
// export function PrepareAmericansRandom ; var i ; begin
1218: LD_INT 0
1220: PPUSH
1221: PPUSH
// uc_side = 1 ;
1222: LD_ADDR_OWVAR 20
1226: PUSH
1227: LD_INT 1
1229: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1230: LD_ADDR_EXP 16
1234: PUSH
1235: LD_STRING 13c_others
1237: PPUSH
1238: CALL_OW 31
1242: ST_TO_ADDR
// for i in others13 do
1243: LD_ADDR_VAR 0 2
1247: PUSH
1248: LD_EXP 16
1252: PUSH
1253: FOR_IN
1254: IFFALSE 1307
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1256: LD_VAR 0 2
1260: PPUSH
1261: LD_INT 22
1263: PUSH
1264: LD_INT 1
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 21
1273: PUSH
1274: LD_INT 2
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: LD_INT 58
1283: PUSH
1284: EMPTY
1285: LIST
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 69
1296: PUSH
1297: LD_INT 1
1299: ARRAY
1300: PPUSH
1301: CALL_OW 52
1305: GO 1253
1307: POP
1308: POP
// end ;
1309: LD_VAR 0 1
1313: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1314: LD_INT 0
1316: PPUSH
1317: PPUSH
1318: PPUSH
1319: PPUSH
1320: PPUSH
1321: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1322: LD_ADDR_VAR 0 5
1326: PUSH
1327: LD_STRING 13_VehiclesIn13_1
1329: PPUSH
1330: LD_INT 1
1332: PUSH
1333: LD_INT 5
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: LD_INT 1
1341: PUSH
1342: LD_INT 6
1344: PUSH
1345: LD_INT 100
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 1
1358: PUSH
1359: LD_INT 5
1361: PUSH
1362: LD_INT 3
1364: PUSH
1365: LD_INT 1
1367: PUSH
1368: LD_INT 6
1370: PUSH
1371: LD_INT 100
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 1
1384: PUSH
1385: LD_INT 5
1387: PUSH
1388: LD_INT 3
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: LD_INT 6
1396: PUSH
1397: LD_INT 100
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 1
1410: PUSH
1411: LD_INT 5
1413: PUSH
1414: LD_INT 3
1416: PUSH
1417: LD_INT 1
1419: PUSH
1420: LD_INT 6
1422: PUSH
1423: LD_INT 100
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 1
1436: PUSH
1437: LD_INT 5
1439: PUSH
1440: LD_INT 3
1442: PUSH
1443: LD_INT 1
1445: PUSH
1446: LD_INT 6
1448: PUSH
1449: LD_INT 100
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 1
1462: PUSH
1463: LD_INT 5
1465: PUSH
1466: LD_INT 3
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: LD_INT 6
1474: PUSH
1475: LD_INT 100
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 1
1488: PUSH
1489: LD_INT 5
1491: PUSH
1492: LD_INT 3
1494: PUSH
1495: LD_INT 1
1497: PUSH
1498: LD_INT 6
1500: PUSH
1501: LD_INT 100
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 1
1514: PUSH
1515: LD_INT 5
1517: PUSH
1518: LD_INT 3
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 6
1526: PUSH
1527: LD_INT 100
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: PPUSH
1548: CALL_OW 30
1552: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1553: LD_ADDR_EXP 24
1557: PUSH
1558: LD_STRING 13_ResourcesInCargo13_1
1560: PPUSH
1561: EMPTY
1562: PPUSH
1563: CALL_OW 30
1567: ST_TO_ADDR
// cargoList = [ ] ;
1568: LD_ADDR_VAR 0 6
1572: PUSH
1573: EMPTY
1574: ST_TO_ADDR
// uc_side = 1 ;
1575: LD_ADDR_OWVAR 20
1579: PUSH
1580: LD_INT 1
1582: ST_TO_ADDR
// if vehicles then
1583: LD_VAR 0 5
1587: IFFALSE 1934
// begin for i := 1 to vehicles do
1589: LD_ADDR_VAR 0 2
1593: PUSH
1594: DOUBLE
1595: LD_INT 1
1597: DEC
1598: ST_TO_ADDR
1599: LD_VAR 0 5
1603: PUSH
1604: FOR_TO
1605: IFFALSE 1754
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1607: LD_ADDR_OWVAR 21
1611: PUSH
1612: LD_VAR 0 5
1616: PUSH
1617: LD_VAR 0 2
1621: ARRAY
1622: PUSH
1623: LD_INT 1
1625: ARRAY
1626: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1627: LD_ADDR_OWVAR 37
1631: PUSH
1632: LD_VAR 0 5
1636: PUSH
1637: LD_VAR 0 2
1641: ARRAY
1642: PUSH
1643: LD_INT 2
1645: ARRAY
1646: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1647: LD_ADDR_OWVAR 39
1651: PUSH
1652: LD_VAR 0 5
1656: PUSH
1657: LD_VAR 0 2
1661: ARRAY
1662: PUSH
1663: LD_INT 3
1665: ARRAY
1666: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1667: LD_ADDR_OWVAR 38
1671: PUSH
1672: LD_VAR 0 5
1676: PUSH
1677: LD_VAR 0 2
1681: ARRAY
1682: PUSH
1683: LD_INT 4
1685: ARRAY
1686: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1687: LD_ADDR_OWVAR 40
1691: PUSH
1692: LD_VAR 0 5
1696: PUSH
1697: LD_VAR 0 2
1701: ARRAY
1702: PUSH
1703: LD_INT 5
1705: ARRAY
1706: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1707: LD_ADDR_OWVAR 41
1711: PUSH
1712: LD_INT 40
1714: ST_TO_ADDR
// veh = CreateVehicle ;
1715: LD_ADDR_VAR 0 4
1719: PUSH
1720: CALL_OW 45
1724: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1725: LD_VAR 0 4
1729: PPUSH
1730: LD_INT 3
1732: PPUSH
1733: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1737: LD_VAR 0 4
1741: PPUSH
1742: LD_INT 2
1744: PPUSH
1745: LD_INT 0
1747: PPUSH
1748: CALL_OW 49
// end ;
1752: GO 1604
1754: POP
1755: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1756: LD_ADDR_VAR 0 6
1760: PUSH
1761: LD_INT 22
1763: PUSH
1764: LD_INT 1
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: PUSH
1771: LD_INT 21
1773: PUSH
1774: LD_INT 2
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 34
1783: PUSH
1784: LD_INT 12
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: PPUSH
1796: CALL_OW 69
1800: ST_TO_ADDR
// if cargoList then
1801: LD_VAR 0 6
1805: IFFALSE 1934
// for i = 1 to cargoList do
1807: LD_ADDR_VAR 0 2
1811: PUSH
1812: DOUBLE
1813: LD_INT 1
1815: DEC
1816: ST_TO_ADDR
1817: LD_VAR 0 6
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1932
// begin if resources then
1825: LD_EXP 24
1829: IFFALSE 1930
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1831: LD_VAR 0 6
1835: PUSH
1836: LD_VAR 0 2
1840: ARRAY
1841: PPUSH
1842: LD_INT 1
1844: PPUSH
1845: LD_EXP 24
1849: PUSH
1850: LD_VAR 0 2
1854: ARRAY
1855: PUSH
1856: LD_INT 1
1858: ARRAY
1859: PPUSH
1860: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1864: LD_VAR 0 6
1868: PUSH
1869: LD_VAR 0 2
1873: ARRAY
1874: PPUSH
1875: LD_INT 2
1877: PPUSH
1878: LD_EXP 24
1882: PUSH
1883: LD_VAR 0 2
1887: ARRAY
1888: PUSH
1889: LD_INT 2
1891: ARRAY
1892: PPUSH
1893: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1897: LD_VAR 0 6
1901: PUSH
1902: LD_VAR 0 2
1906: ARRAY
1907: PPUSH
1908: LD_INT 3
1910: PPUSH
1911: LD_EXP 24
1915: PUSH
1916: LD_VAR 0 2
1920: ARRAY
1921: PUSH
1922: LD_INT 3
1924: ARRAY
1925: PPUSH
1926: CALL_OW 291
// end ; end ;
1930: GO 1822
1932: POP
1933: POP
// end ; end ;
1934: LD_VAR 0 1
1938: RET
// export function PowellSupport ; var i , veh , un ; begin
1939: LD_INT 0
1941: PPUSH
1942: PPUSH
1943: PPUSH
1944: PPUSH
// for i = 1 to 3 do
1945: LD_ADDR_VAR 0 2
1949: PUSH
1950: DOUBLE
1951: LD_INT 1
1953: DEC
1954: ST_TO_ADDR
1955: LD_INT 3
1957: PUSH
1958: FOR_TO
1959: IFFALSE 2160
// begin uc_nation = 1 ;
1961: LD_ADDR_OWVAR 21
1965: PUSH
1966: LD_INT 1
1968: ST_TO_ADDR
// uc_side = 1 ;
1969: LD_ADDR_OWVAR 20
1973: PUSH
1974: LD_INT 1
1976: ST_TO_ADDR
// vc_engine = 3 ;
1977: LD_ADDR_OWVAR 39
1981: PUSH
1982: LD_INT 3
1984: ST_TO_ADDR
// vc_control = 1 ;
1985: LD_ADDR_OWVAR 38
1989: PUSH
1990: LD_INT 1
1992: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1993: LD_ADDR_OWVAR 40
1997: PUSH
1998: LD_INT 9
2000: PUSH
2001: LD_INT 5
2003: PUSH
2004: LD_INT 4
2006: PUSH
2007: LD_INT 7
2009: PUSH
2010: LD_INT 6
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 1
2022: PPUSH
2023: LD_INT 5
2025: PPUSH
2026: CALL_OW 12
2030: ARRAY
2031: ST_TO_ADDR
// if vc_weapon = 6 then
2032: LD_OWVAR 40
2036: PUSH
2037: LD_INT 6
2039: EQUAL
2040: IFFALSE 2052
// vc_chassis = 4 else
2042: LD_ADDR_OWVAR 37
2046: PUSH
2047: LD_INT 4
2049: ST_TO_ADDR
2050: GO 2060
// vc_chassis = 3 ;
2052: LD_ADDR_OWVAR 37
2056: PUSH
2057: LD_INT 3
2059: ST_TO_ADDR
// veh = CreateVehicle ;
2060: LD_ADDR_VAR 0 3
2064: PUSH
2065: CALL_OW 45
2069: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2070: LD_VAR 0 3
2074: PPUSH
2075: LD_INT 2
2077: PPUSH
2078: LD_INT 0
2080: PPUSH
2081: CALL_OW 49
// SetDir ( veh , 1 ) ;
2085: LD_VAR 0 3
2089: PPUSH
2090: LD_INT 1
2092: PPUSH
2093: CALL_OW 233
// hc_gallery =  ;
2097: LD_ADDR_OWVAR 33
2101: PUSH
2102: LD_STRING 
2104: ST_TO_ADDR
// hc_name =  ;
2105: LD_ADDR_OWVAR 26
2109: PUSH
2110: LD_STRING 
2112: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
2113: LD_INT 0
2115: PPUSH
2116: LD_INT 3
2118: PPUSH
2119: LD_INT 7
2121: PPUSH
2122: LD_INT 10
2124: PPUSH
2125: CALL_OW 12
2129: PPUSH
2130: CALL_OW 380
// un = CreateHuman ;
2134: LD_ADDR_VAR 0 4
2138: PUSH
2139: CALL_OW 44
2143: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2144: LD_VAR 0 4
2148: PPUSH
2149: LD_VAR 0 3
2153: PPUSH
2154: CALL_OW 52
// end ;
2158: GO 1958
2160: POP
2161: POP
// end ; end_of_file
2162: LD_VAR 0 1
2166: RET
// export function PrepareBurlak ; begin
2167: LD_INT 0
2169: PPUSH
// uc_side = 7 ;
2170: LD_ADDR_OWVAR 20
2174: PUSH
2175: LD_INT 7
2177: ST_TO_ADDR
// uc_nation = 3 ;
2178: LD_ADDR_OWVAR 21
2182: PUSH
2183: LD_INT 3
2185: ST_TO_ADDR
// vc_engine = 3 ;
2186: LD_ADDR_OWVAR 39
2190: PUSH
2191: LD_INT 3
2193: ST_TO_ADDR
// vc_control = 1 ;
2194: LD_ADDR_OWVAR 38
2198: PUSH
2199: LD_INT 1
2201: ST_TO_ADDR
// vc_weapon = 46 ;
2202: LD_ADDR_OWVAR 40
2206: PUSH
2207: LD_INT 46
2209: ST_TO_ADDR
// vc_chassis = 24 ;
2210: LD_ADDR_OWVAR 37
2214: PUSH
2215: LD_INT 24
2217: ST_TO_ADDR
// Masha = CreateVehicle ;
2218: LD_ADDR_EXP 18
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2228: LD_EXP 18
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: LD_INT 0
2238: PPUSH
2239: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2243: LD_EXP 18
2247: PPUSH
2248: LD_INT 1
2250: PPUSH
2251: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2255: LD_ADDR_EXP 17
2259: PUSH
2260: LD_STRING Burlak
2262: PPUSH
2263: LD_INT 0
2265: PPUSH
2266: LD_STRING 
2268: PPUSH
2269: CALL 30259 0 3
2273: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2274: LD_EXP 17
2278: PPUSH
2279: LD_EXP 18
2283: PPUSH
2284: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2288: LD_EXP 18
2292: PPUSH
2293: LD_INT 107
2295: PPUSH
2296: LD_INT 118
2298: PPUSH
2299: CALL_OW 114
// spawnBurlak = 1 ;
2303: LD_ADDR_EXP 27
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// end ;
2311: LD_VAR 0 1
2315: RET
// export function BurlakArmy ; var i , veh , tmp ; begin
2316: LD_INT 0
2318: PPUSH
2319: PPUSH
2320: PPUSH
2321: PPUSH
// uc_side = 7 ;
2322: LD_ADDR_OWVAR 20
2326: PUSH
2327: LD_INT 7
2329: ST_TO_ADDR
// uc_nation = 3 ;
2330: LD_ADDR_OWVAR 21
2334: PUSH
2335: LD_INT 3
2337: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ,  ) ;
2338: LD_ADDR_EXP 19
2342: PUSH
2343: LD_STRING Gnyevko
2345: PPUSH
2346: LD_INT 0
2348: PPUSH
2349: LD_STRING 
2351: PPUSH
2352: CALL 30259 0 3
2356: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ,  ) ;
2357: LD_ADDR_EXP 20
2361: PUSH
2362: LD_STRING Titov
2364: PPUSH
2365: LD_INT 0
2367: PPUSH
2368: LD_STRING 
2370: PPUSH
2371: CALL 30259 0 3
2375: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ,  ) ;
2376: LD_ADDR_EXP 21
2380: PUSH
2381: LD_STRING Xavier2
2383: PPUSH
2384: LD_INT 0
2386: PPUSH
2387: LD_STRING 
2389: PPUSH
2390: CALL 30259 0 3
2394: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ,  ) ;
2395: LD_ADDR_EXP 22
2399: PUSH
2400: LD_STRING Belkov
2402: PPUSH
2403: LD_INT 0
2405: PPUSH
2406: LD_STRING 
2408: PPUSH
2409: CALL 30259 0 3
2413: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ,  ) ;
2414: LD_ADDR_EXP 23
2418: PUSH
2419: LD_STRING Lipshchin
2421: PPUSH
2422: LD_INT 0
2424: PPUSH
2425: LD_STRING 
2427: PPUSH
2428: CALL 30259 0 3
2432: ST_TO_ADDR
// for i = 1 to 5 do
2433: LD_ADDR_VAR 0 2
2437: PUSH
2438: DOUBLE
2439: LD_INT 1
2441: DEC
2442: ST_TO_ADDR
2443: LD_INT 5
2445: PUSH
2446: FOR_TO
2447: IFFALSE 2535
// begin vc_engine = 3 ;
2449: LD_ADDR_OWVAR 39
2453: PUSH
2454: LD_INT 3
2456: ST_TO_ADDR
// vc_control = 1 ;
2457: LD_ADDR_OWVAR 38
2461: PUSH
2462: LD_INT 1
2464: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2465: LD_ADDR_OWVAR 40
2469: PUSH
2470: LD_INT 43
2472: PUSH
2473: LD_INT 44
2475: PUSH
2476: LD_INT 45
2478: PUSH
2479: LD_INT 49
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: PUSH
2488: LD_INT 1
2490: PPUSH
2491: LD_INT 4
2493: PPUSH
2494: CALL_OW 12
2498: ARRAY
2499: ST_TO_ADDR
// vc_chassis = 22 ;
2500: LD_ADDR_OWVAR 37
2504: PUSH
2505: LD_INT 22
2507: ST_TO_ADDR
// veh = CreateVehicle ;
2508: LD_ADDR_VAR 0 3
2512: PUSH
2513: CALL_OW 45
2517: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2518: LD_VAR 0 3
2522: PPUSH
2523: LD_INT 3
2525: PPUSH
2526: LD_INT 0
2528: PPUSH
2529: CALL_OW 49
// end ;
2533: GO 2446
2535: POP
2536: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2537: LD_ADDR_VAR 0 4
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 7
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 21
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 58
2564: PUSH
2565: EMPTY
2566: LIST
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: LIST
2572: PPUSH
2573: CALL_OW 69
2577: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2578: LD_EXP 19
2582: PPUSH
2583: LD_VAR 0 4
2587: PUSH
2588: LD_INT 1
2590: ARRAY
2591: PPUSH
2592: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2596: LD_EXP 20
2600: PPUSH
2601: LD_VAR 0 4
2605: PUSH
2606: LD_INT 2
2608: ARRAY
2609: PPUSH
2610: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2614: LD_EXP 21
2618: PPUSH
2619: LD_VAR 0 4
2623: PUSH
2624: LD_INT 3
2626: ARRAY
2627: PPUSH
2628: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2632: LD_EXP 22
2636: PPUSH
2637: LD_VAR 0 4
2641: PUSH
2642: LD_INT 4
2644: ARRAY
2645: PPUSH
2646: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2650: LD_EXP 23
2654: PPUSH
2655: LD_VAR 0 4
2659: PUSH
2660: LD_INT 5
2662: ARRAY
2663: PPUSH
2664: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2668: LD_EXP 19
2672: PPUSH
2673: LD_INT 3
2675: PPUSH
2676: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2680: LD_EXP 20
2684: PUSH
2685: LD_EXP 23
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: PPUSH
2694: LD_INT 9
2696: PPUSH
2697: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2701: LD_ADDR_VAR 0 4
2705: PUSH
2706: LD_INT 22
2708: PUSH
2709: LD_INT 7
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PPUSH
2716: CALL_OW 69
2720: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2721: LD_VAR 0 4
2725: PPUSH
2726: LD_INT 107
2728: PPUSH
2729: LD_INT 118
2731: PPUSH
2732: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2736: LD_INT 35
2738: PPUSH
2739: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , 49 ] ) , Masha ) ;
2743: LD_VAR 0 4
2747: PPUSH
2748: LD_INT 34
2750: PUSH
2751: LD_INT 49
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PPUSH
2758: CALL_OW 72
2762: PPUSH
2763: LD_EXP 18
2767: PPUSH
2768: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , 49 ] ] ) , 107 , 118 ) ;
2772: LD_VAR 0 4
2776: PPUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 34
2782: PUSH
2783: LD_INT 49
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: PPUSH
2794: CALL_OW 72
2798: PPUSH
2799: LD_INT 107
2801: PPUSH
2802: LD_INT 118
2804: PPUSH
2805: CALL_OW 114
// until UnitFilter ( tmp , [ f_weapon , 49 ] ) = 0 or IsDying ( Masha ) ;
2809: LD_VAR 0 4
2813: PPUSH
2814: LD_INT 34
2816: PUSH
2817: LD_INT 49
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PPUSH
2824: CALL_OW 72
2828: PUSH
2829: LD_INT 0
2831: EQUAL
2832: PUSH
2833: LD_EXP 18
2837: PPUSH
2838: CALL_OW 303
2842: OR
2843: IFFALSE 2736
// repeat wait ( 0 0$1 ) ;
2845: LD_INT 35
2847: PPUSH
2848: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
2852: LD_ADDR_VAR 0 4
2856: PUSH
2857: LD_INT 22
2859: PUSH
2860: LD_INT 7
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PPUSH
2867: CALL_OW 69
2871: PUSH
2872: LD_EXP 17
2876: DIFF
2877: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2878: LD_VAR 0 4
2882: PPUSH
2883: LD_INT 107
2885: PPUSH
2886: LD_INT 118
2888: PPUSH
2889: CALL_OW 114
// if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
2893: LD_EXP 17
2897: PPUSH
2898: CALL_OW 302
2902: PUSH
2903: LD_EXP 17
2907: PPUSH
2908: CALL_OW 310
2912: NOT
2913: AND
2914: IFFALSE 2931
// ComMoveXY ( Burlak , 107 , 118 ) ;
2916: LD_EXP 17
2920: PPUSH
2921: LD_INT 107
2923: PPUSH
2924: LD_INT 118
2926: PPUSH
2927: CALL_OW 111
// until not tmp ;
2931: LD_VAR 0 4
2935: NOT
2936: IFFALSE 2845
// end ; end_of_file
2938: LD_VAR 0 1
2942: RET
// every 15 15$0 trigger sibDeposits do var un , rnd ;
2943: LD_EXP 31
2947: IFFALSE 3123
2949: GO 2951
2951: DISABLE
2952: LD_INT 0
2954: PPUSH
2955: PPUSH
// begin enable ;
2956: ENABLE
// rnd = 0 ;
2957: LD_ADDR_VAR 0 2
2961: PUSH
2962: LD_INT 0
2964: ST_TO_ADDR
// uc_side = 8 ;
2965: LD_ADDR_OWVAR 20
2969: PUSH
2970: LD_INT 8
2972: ST_TO_ADDR
// uc_nation = 2 ;
2973: LD_ADDR_OWVAR 21
2977: PUSH
2978: LD_INT 2
2980: ST_TO_ADDR
// hc_name =  ;
2981: LD_ADDR_OWVAR 26
2985: PUSH
2986: LD_STRING 
2988: ST_TO_ADDR
// hc_gallery =  ;
2989: LD_ADDR_OWVAR 33
2993: PUSH
2994: LD_STRING 
2996: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
2997: LD_INT 0
2999: PPUSH
3000: LD_INT 4
3002: PPUSH
3003: LD_INT 10
3005: PPUSH
3006: CALL_OW 380
// un = CreateHuman ;
3010: LD_ADDR_VAR 0 1
3014: PUSH
3015: CALL_OW 44
3019: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3020: LD_VAR 0 1
3024: PPUSH
3025: LD_INT 8
3027: PUSH
3028: LD_INT 9
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 1
3037: PPUSH
3038: LD_INT 2
3040: PPUSH
3041: CALL_OW 12
3045: ARRAY
3046: PPUSH
3047: LD_INT 0
3049: PPUSH
3050: CALL_OW 49
// SetTag ( un , 1 ) ;
3054: LD_VAR 0 1
3058: PPUSH
3059: LD_INT 1
3061: PPUSH
3062: CALL_OW 109
// rnd = Rand ( 1 , sibDeposits ) ;
3066: LD_ADDR_VAR 0 2
3070: PUSH
3071: LD_INT 1
3073: PPUSH
3074: LD_EXP 31
3078: PPUSH
3079: CALL_OW 12
3083: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
3084: LD_VAR 0 1
3088: PPUSH
3089: LD_EXP 31
3093: PUSH
3094: LD_VAR 0 2
3098: ARRAY
3099: PUSH
3100: LD_INT 1
3102: ARRAY
3103: PPUSH
3104: LD_EXP 31
3108: PUSH
3109: LD_VAR 0 2
3113: ARRAY
3114: PUSH
3115: LD_INT 2
3117: ARRAY
3118: PPUSH
3119: CALL_OW 158
// end ;
3123: PPOPN 2
3125: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do var i ;
3126: LD_INT 22
3128: PUSH
3129: LD_INT 8
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 3
3138: PUSH
3139: LD_INT 61
3141: PUSH
3142: EMPTY
3143: LIST
3144: PUSH
3145: EMPTY
3146: LIST
3147: LIST
3148: PUSH
3149: LD_INT 33
3151: PUSH
3152: LD_INT 2
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PUSH
3159: EMPTY
3160: LIST
3161: LIST
3162: LIST
3163: PPUSH
3164: CALL_OW 69
3168: IFFALSE 3241
3170: GO 3172
3172: DISABLE
3173: LD_INT 0
3175: PPUSH
// begin enable ;
3176: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do
3177: LD_ADDR_VAR 0 1
3181: PUSH
3182: LD_INT 22
3184: PUSH
3185: LD_INT 8
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 61
3197: PUSH
3198: EMPTY
3199: LIST
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: LD_INT 33
3207: PUSH
3208: LD_INT 2
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: LIST
3219: PPUSH
3220: CALL_OW 69
3224: PUSH
3225: FOR_IN
3226: IFFALSE 3239
// Connect ( i ) ;
3228: LD_VAR 0 1
3232: PPUSH
3233: CALL 38170 0 1
3237: GO 3225
3239: POP
3240: POP
// end ; end_of_file
3241: PPOPN 1
3243: END
// every 1 do
3244: GO 3246
3246: DISABLE
// begin InGameOn ;
3247: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3251: LD_INT 22
3253: PUSH
3254: LD_INT 1
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 21
3263: PUSH
3264: LD_INT 2
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PPUSH
3275: CALL_OW 69
3279: PUSH
3280: LD_INT 1
3282: ARRAY
3283: PPUSH
3284: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
3288: LD_INT 22
3290: PUSH
3291: LD_INT 1
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PUSH
3298: LD_INT 21
3300: PUSH
3301: LD_INT 2
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PPUSH
3312: CALL_OW 69
3316: PPUSH
3317: LD_INT 69
3319: PPUSH
3320: LD_INT 94
3322: PPUSH
3323: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3327: LD_EXP 1
3331: PPUSH
3332: LD_STRING D2-JMM-1
3334: PPUSH
3335: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3339: LD_INT 22
3341: PUSH
3342: LD_INT 1
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 21
3351: PUSH
3352: LD_INT 2
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: LD_INT 1
3370: ARRAY
3371: PPUSH
3372: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3376: LD_EXP 2
3380: PPUSH
3381: LD_STRING D2-Huck-1
3383: PPUSH
3384: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3388: LD_INT 22
3390: PUSH
3391: LD_INT 1
3393: PUSH
3394: EMPTY
3395: LIST
3396: LIST
3397: PUSH
3398: LD_INT 21
3400: PUSH
3401: LD_INT 2
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PPUSH
3412: CALL_OW 69
3416: PUSH
3417: LD_INT 1
3419: ARRAY
3420: PPUSH
3421: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3425: LD_EXP 1
3429: PPUSH
3430: LD_STRING D2-JMM-2
3432: PPUSH
3433: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3437: LD_INT 22
3439: PUSH
3440: LD_INT 1
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: LD_INT 21
3449: PUSH
3450: LD_INT 2
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PPUSH
3461: CALL_OW 69
3465: PUSH
3466: LD_INT 1
3468: ARRAY
3469: PPUSH
3470: CALL_OW 87
// InGameOff ;
3474: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3478: LD_STRING M1
3480: PPUSH
3481: CALL_OW 337
// SaveForQuickRestart ;
3485: CALL_OW 22
// end ;
3489: END
// every 10 10$0 do
3490: GO 3492
3492: DISABLE
// begin DialogueOn ;
3493: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3497: LD_EXP 15
3501: PPUSH
3502: LD_STRING D3-Pow-1
3504: PPUSH
3505: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3509: LD_EXP 1
3513: PPUSH
3514: LD_STRING D3-JMM-1
3516: PPUSH
3517: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3521: LD_EXP 15
3525: PPUSH
3526: LD_STRING D3-Pow-2
3528: PPUSH
3529: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3533: LD_EXP 1
3537: PPUSH
3538: LD_STRING D3-JMM-2
3540: PPUSH
3541: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3545: LD_EXP 15
3549: PPUSH
3550: LD_STRING D3-Pow-3
3552: PPUSH
3553: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3557: LD_EXP 1
3561: PPUSH
3562: LD_STRING D3-JMM-3
3564: PPUSH
3565: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3569: LD_EXP 15
3573: PPUSH
3574: LD_STRING D3-Pow-4
3576: PPUSH
3577: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3581: LD_EXP 1
3585: PPUSH
3586: LD_STRING D3-JMM-4
3588: PPUSH
3589: CALL_OW 88
// DialogueOff ;
3593: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3597: LD_STRING M2
3599: PPUSH
3600: CALL_OW 337
// wait ( 2 2$30 ) ;
3604: LD_INT 5250
3606: PPUSH
3607: CALL_OW 67
// PrepareBurlak ;
3611: CALL 2167 0 0
// BurlakArmy ;
3615: CALL 2316 0 0
// end ;
3619: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3620: LD_INT 1
3622: PPUSH
3623: LD_EXP 18
3627: PPUSH
3628: CALL_OW 292
3632: IFFALSE 3791
3634: GO 3636
3636: DISABLE
// begin DialogueOn ;
3637: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3641: LD_EXP 18
3645: PPUSH
3646: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3650: LD_INT 22
3652: PUSH
3653: LD_INT 1
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: PUSH
3660: LD_INT 26
3662: PUSH
3663: LD_INT 1
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: PUSH
3670: LD_INT 2
3672: PUSH
3673: LD_INT 25
3675: PUSH
3676: LD_INT 1
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 25
3685: PUSH
3686: LD_INT 2
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: PUSH
3693: LD_INT 25
3695: PUSH
3696: LD_INT 3
3698: PUSH
3699: EMPTY
3700: LIST
3701: LIST
3702: PUSH
3703: LD_INT 25
3705: PUSH
3706: LD_INT 4
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: PUSH
3713: LD_INT 25
3715: PUSH
3716: LD_INT 5
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: PPUSH
3736: CALL_OW 69
3740: PPUSH
3741: LD_STRING D5-Sol1-1
3743: PPUSH
3744: LD_STRING D5-FSol1-1
3746: PPUSH
3747: CALL 6078 0 3
// Say ( JMM , D5-JMM-1 ) ;
3751: LD_EXP 1
3755: PPUSH
3756: LD_STRING D5-JMM-1
3758: PPUSH
3759: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3763: LD_EXP 17
3767: PPUSH
3768: LD_STRING DAmer-Bur-1
3770: PPUSH
3771: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3775: LD_EXP 1
3779: PPUSH
3780: LD_STRING DAmer-JMM-1
3782: PPUSH
3783: CALL_OW 88
// DialogueOff ;
3787: CALL_OW 7
// end ;
3791: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
3792: LD_INT 4
3794: PPUSH
3795: LD_INT 22
3797: PUSH
3798: LD_INT 7
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: PPUSH
3805: CALL_OW 70
3809: IFFALSE 4208
3811: GO 3813
3813: DISABLE
3814: LD_INT 0
3816: PPUSH
// begin enable ;
3817: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
3818: LD_ADDR_VAR 0 1
3822: PUSH
3823: LD_INT 4
3825: PPUSH
3826: LD_INT 22
3828: PUSH
3829: LD_INT 7
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PPUSH
3836: CALL_OW 70
3840: PUSH
3841: FOR_IN
3842: IFFALSE 4206
// begin if i = Burlak or i = Masha then
3844: LD_VAR 0 1
3848: PUSH
3849: LD_EXP 17
3853: EQUAL
3854: PUSH
3855: LD_VAR 0 1
3859: PUSH
3860: LD_EXP 18
3864: EQUAL
3865: OR
3866: IFFALSE 4013
// begin RemoveUnit ( i ) ;
3868: LD_VAR 0 1
3872: PPUSH
3873: CALL_OW 64
// DialogueOn ;
3877: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3881: LD_EXP 1
3885: PPUSH
3886: LD_STRING D5a-JMM-1
3888: PPUSH
3889: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3893: LD_INT 22
3895: PUSH
3896: LD_INT 1
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: PUSH
3903: LD_INT 26
3905: PUSH
3906: LD_INT 1
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: PUSH
3913: LD_INT 2
3915: PUSH
3916: LD_INT 25
3918: PUSH
3919: LD_INT 1
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: PUSH
3926: LD_INT 25
3928: PUSH
3929: LD_INT 2
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: PUSH
3936: LD_INT 25
3938: PUSH
3939: LD_INT 3
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: PUSH
3946: LD_INT 25
3948: PUSH
3949: LD_INT 4
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: PUSH
3956: LD_INT 25
3958: PUSH
3959: LD_INT 5
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: LIST
3978: PPUSH
3979: CALL_OW 69
3983: PPUSH
3984: LD_STRING D5a-Sol1-1
3986: PPUSH
3987: LD_STRING D5-FSol1-1
3989: PPUSH
3990: CALL 6078 0 3
// DialogueOff ;
3994: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
3998: LD_STRING M2b
4000: PPUSH
4001: CALL_OW 337
// spawnBurlak = 0 ;
4005: LD_ADDR_EXP 27
4009: PUSH
4010: LD_INT 0
4012: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
4013: LD_VAR 0 1
4017: PPUSH
4018: CALL_OW 247
4022: PUSH
4023: LD_INT 2
4025: EQUAL
4026: PUSH
4027: LD_VAR 0 1
4031: PPUSH
4032: CALL_OW 263
4036: PUSH
4037: LD_INT 1
4039: EQUAL
4040: AND
4041: IFFALSE 4169
// begin case IsDrivenBy ( i ) of Gnyevko :
4043: LD_VAR 0 1
4047: PPUSH
4048: CALL_OW 311
4052: PUSH
4053: LD_EXP 19
4057: DOUBLE
4058: EQUAL
4059: IFTRUE 4063
4061: GO 4076
4063: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
4064: LD_INT 1
4066: PPUSH
4067: LD_STRING 13_Gnyevko_1
4069: PPUSH
4070: CALL_OW 39
4074: GO 4169
4076: LD_EXP 20
4080: DOUBLE
4081: EQUAL
4082: IFTRUE 4086
4084: GO 4099
4086: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
4087: LD_INT 1
4089: PPUSH
4090: LD_STRING 13_Titov_1
4092: PPUSH
4093: CALL_OW 39
4097: GO 4169
4099: LD_EXP 21
4103: DOUBLE
4104: EQUAL
4105: IFTRUE 4109
4107: GO 4122
4109: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
4110: LD_INT 1
4112: PPUSH
4113: LD_STRING 13_Xavier_1
4115: PPUSH
4116: CALL_OW 39
4120: GO 4169
4122: LD_EXP 22
4126: DOUBLE
4127: EQUAL
4128: IFTRUE 4132
4130: GO 4145
4132: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
4133: LD_INT 1
4135: PPUSH
4136: LD_STRING 13_Belkov_1
4138: PPUSH
4139: CALL_OW 39
4143: GO 4169
4145: LD_EXP 23
4149: DOUBLE
4150: EQUAL
4151: IFTRUE 4155
4153: GO 4168
4155: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
4156: LD_INT 1
4158: PPUSH
4159: LD_STRING 13_Lipshchin_1
4161: PPUSH
4162: CALL_OW 39
4166: GO 4169
4168: POP
// end ; if GetWeapon ( i ) = 49 then
4169: LD_VAR 0 1
4173: PPUSH
4174: CALL_OW 264
4178: PUSH
4179: LD_INT 49
4181: EQUAL
4182: IFFALSE 4195
// DestroyUnit ( i ) else
4184: LD_VAR 0 1
4188: PPUSH
4189: CALL_OW 65
4193: GO 4204
// RemoveUnit ( i ) ;
4195: LD_VAR 0 1
4199: PPUSH
4200: CALL_OW 64
// end ;
4204: GO 3841
4206: POP
4207: POP
// end ;
4208: PPOPN 1
4210: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
4211: LD_EXP 17
4215: PPUSH
4216: CALL_OW 302
4220: PUSH
4221: LD_EXP 18
4225: PPUSH
4226: CALL_OW 256
4230: PUSH
4231: LD_INT 500
4233: LESS
4234: AND
4235: PUSH
4236: LD_EXP 18
4240: PPUSH
4241: CALL_OW 255
4245: PUSH
4246: LD_INT 7
4248: EQUAL
4249: AND
4250: IFFALSE 4270
4252: GO 4254
4254: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
4255: LD_EXP 17
4259: PPUSH
4260: LD_INT 107
4262: PPUSH
4263: LD_INT 118
4265: PPUSH
4266: CALL_OW 111
4270: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
4271: LD_EXP 17
4275: PPUSH
4276: CALL_OW 301
4280: PUSH
4281: LD_EXP 27
4285: PUSH
4286: LD_INT 1
4288: EQUAL
4289: AND
4290: IFFALSE 4423
4292: GO 4294
4294: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4295: LD_EXP 1
4299: PPUSH
4300: LD_STRING D5b-JMM-1
4302: PPUSH
4303: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
4307: LD_INT 22
4309: PUSH
4310: LD_INT 1
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: PUSH
4317: LD_INT 26
4319: PUSH
4320: LD_INT 1
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PUSH
4327: LD_INT 2
4329: PUSH
4330: LD_INT 25
4332: PUSH
4333: LD_INT 1
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: PUSH
4340: LD_INT 25
4342: PUSH
4343: LD_INT 2
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: PUSH
4350: LD_INT 25
4352: PUSH
4353: LD_INT 3
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: PUSH
4360: LD_INT 25
4362: PUSH
4363: LD_INT 4
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: PUSH
4370: LD_INT 25
4372: PUSH
4373: LD_INT 5
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: LIST
4392: PPUSH
4393: CALL_OW 69
4397: PPUSH
4398: LD_STRING D5b-Sol1-1
4400: PPUSH
4401: LD_STRING 
4403: PPUSH
4404: CALL 6078 0 3
// ChangeMissionObjectives ( M2a ) ;
4408: LD_STRING M2a
4410: PPUSH
4411: CALL_OW 337
// burlakStatus = 1 ;
4415: LD_ADDR_EXP 28
4419: PUSH
4420: LD_INT 1
4422: ST_TO_ADDR
// end ;
4423: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4424: LD_EXP 2
4428: PPUSH
4429: CALL_OW 301
4433: IFFALSE 4570
4435: GO 4437
4437: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4438: LD_EXP 1
4442: PPUSH
4443: LD_STRING D6-JMM-1
4445: PPUSH
4446: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
4450: LD_INT 22
4452: PUSH
4453: LD_INT 1
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 26
4462: PUSH
4463: LD_INT 1
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 2
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 1
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 25
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 25
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 25
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 25
4515: PUSH
4516: LD_INT 5
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 69
4540: PPUSH
4541: LD_STRING D6-Sol1-1
4543: PPUSH
4544: LD_STRING 
4546: PPUSH
4547: CALL 6078 0 3
// Say ( JMM , D6-JMM-2 ) ;
4551: LD_EXP 1
4555: PPUSH
4556: LD_STRING D6-JMM-2
4558: PPUSH
4559: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4563: LD_STRING M1a
4565: PPUSH
4566: CALL_OW 337
// end ;
4570: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4571: LD_INT 25
4573: PPUSH
4574: LD_INT 1
4576: PPUSH
4577: CALL_OW 321
4581: PUSH
4582: LD_INT 2
4584: EQUAL
4585: IFFALSE 4602
4587: GO 4589
4589: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4590: LD_EXP 2
4594: PPUSH
4595: LD_STRING D6-Huck-2
4597: PPUSH
4598: CALL_OW 88
// end ;
4602: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4603: LD_INT 22
4605: PUSH
4606: LD_INT 1
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: PUSH
4613: LD_INT 2
4615: PUSH
4616: LD_INT 34
4618: PUSH
4619: LD_INT 8
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: LD_INT 35
4628: PUSH
4629: LD_INT 8
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: LIST
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PPUSH
4645: CALL_OW 69
4649: PUSH
4650: LD_INT 0
4652: GREATER
4653: IFFALSE 4845
4655: GO 4657
4657: DISABLE
4658: LD_INT 0
4660: PPUSH
4661: PPUSH
// begin enable ;
4662: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4663: LD_ADDR_VAR 0 1
4667: PUSH
4668: LD_INT 5
4670: PPUSH
4671: LD_INT 22
4673: PUSH
4674: LD_INT 1
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: LD_INT 21
4683: PUSH
4684: LD_INT 3
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: LD_INT 30
4693: PUSH
4694: LD_INT 1
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: PUSH
4701: LD_INT 3
4703: PUSH
4704: LD_INT 57
4706: PUSH
4707: EMPTY
4708: LIST
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: PPUSH
4720: CALL_OW 70
4724: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4725: LD_ADDR_VAR 0 2
4729: PUSH
4730: LD_INT 5
4732: PPUSH
4733: LD_INT 22
4735: PUSH
4736: LD_INT 1
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: LD_INT 21
4745: PUSH
4746: LD_INT 3
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 30
4755: PUSH
4756: LD_INT 5
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 3
4765: PUSH
4766: LD_INT 57
4768: PUSH
4769: EMPTY
4770: LIST
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: PPUSH
4782: CALL_OW 70
4786: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4787: LD_VAR 0 1
4791: PUSH
4792: LD_INT 0
4794: GREATER
4795: PUSH
4796: LD_VAR 0 2
4800: PUSH
4801: LD_INT 0
4803: GREATER
4804: AND
4805: IFFALSE 4845
// begin disable ;
4807: DISABLE
// DialogueOn ;
4808: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4812: LD_EXP 1
4816: PPUSH
4817: LD_STRING D7-JMM-1
4819: PPUSH
4820: CALL_OW 88
// DialogueOff ;
4824: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4828: LD_STRING M4
4830: PPUSH
4831: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4835: LD_INT 5
4837: PPUSH
4838: LD_INT 0
4840: PPUSH
4841: CALL_OW 424
// end ; end ;
4845: PPOPN 2
4847: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4848: LD_INT 6
4850: PPUSH
4851: LD_INT 22
4853: PUSH
4854: LD_INT 1
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 25
4863: PUSH
4864: LD_INT 4
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PPUSH
4875: CALL_OW 70
4879: PUSH
4880: LD_INT 0
4882: GREATER
4883: PUSH
4884: LD_EXP 37
4888: PUSH
4889: LD_INT 1
4891: EQUAL
4892: AND
4893: PUSH
4894: LD_EXP 29
4898: PUSH
4899: LD_INT 0
4901: EQUAL
4902: AND
4903: IFFALSE 4968
4905: GO 4907
4907: DISABLE
// begin enable ;
4908: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4909: LD_ADDR_EXP 26
4913: PUSH
4914: LD_INT 6
4916: PPUSH
4917: LD_INT 22
4919: PUSH
4920: LD_INT 1
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: LD_INT 25
4929: PUSH
4930: LD_INT 4
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: PPUSH
4941: CALL_OW 70
4945: PUSH
4946: LD_INT 1
4948: ARRAY
4949: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4950: LD_INT 6
4952: PPUSH
4953: LD_INT 0
4955: PPUSH
4956: CALL_OW 424
// radationResearched = 1 ;
4960: LD_ADDR_EXP 29
4964: PUSH
4965: LD_INT 1
4967: ST_TO_ADDR
// end ;
4968: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4969: LD_EXP 26
4973: PPUSH
4974: CALL_OW 301
4978: PUSH
4979: LD_EXP 29
4983: PUSH
4984: LD_INT 1
4986: EQUAL
4987: AND
4988: IFFALSE 5024
4990: GO 4992
4992: DISABLE
// begin enable ;
4993: ENABLE
// radationResearched = 0 ;
4994: LD_ADDR_EXP 29
4998: PUSH
4999: LD_INT 0
5001: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5002: LD_INT 6
5004: PPUSH
5005: LD_INT 1
5007: PPUSH
5008: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
5012: LD_EXP 1
5016: PPUSH
5017: LD_STRING D9a-JMM-1
5019: PPUSH
5020: CALL_OW 88
// end ; end_of_file
5024: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
5025: LD_VAR 0 5
5029: PUSH
5030: LD_INT 8
5032: EQUAL
5033: PUSH
5034: LD_EXP 35
5038: PUSH
5039: LD_INT 0
5041: EQUAL
5042: AND
5043: IFFALSE 5096
// begin eventVar1 = 1 ;
5045: LD_ADDR_EXP 35
5049: PUSH
5050: LD_INT 1
5052: ST_TO_ADDR
// DialogueOn ;
5053: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
5057: LD_EXP 1
5061: PPUSH
5062: LD_STRING D6a-JMM-1
5064: PPUSH
5065: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
5069: LD_EXP 15
5073: PPUSH
5074: LD_STRING D6a-Pow-1
5076: PPUSH
5077: CALL_OW 94
// DialogueOff ;
5081: CALL_OW 7
// wait ( 3 3$0 ) ;
5085: LD_INT 6300
5087: PPUSH
5088: CALL_OW 67
// PowellSupport ;
5092: CALL 1939 0 0
// end ; end ;
5096: PPOPN 5
5098: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5099: LD_VAR 0 1
5103: PUSH
5104: LD_EXP 1
5108: EQUAL
5109: IFFALSE 5118
// YouLost ( JMM ) ;
5111: LD_STRING JMM
5113: PPUSH
5114: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
5118: LD_VAR 0 1
5122: PPUSH
5123: CALL_OW 264
5127: PUSH
5128: LD_INT 31
5130: EQUAL
5131: IFFALSE 5147
// achivCounter := achivCounter + 1 ;
5133: LD_ADDR_EXP 41
5137: PUSH
5138: LD_EXP 41
5142: PUSH
5143: LD_INT 1
5145: PLUS
5146: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
5147: LD_VAR 0 1
5151: PPUSH
5152: CALL_OW 255
5156: PUSH
5157: LD_INT 1
5159: NONEQUAL
5160: PUSH
5161: LD_VAR 0 1
5165: PPUSH
5166: CALL_OW 247
5170: PUSH
5171: LD_INT 2
5173: EQUAL
5174: AND
5175: IFFALSE 5191
// destroyCounter := destroyCounter + 1 ;
5177: LD_ADDR_EXP 42
5181: PUSH
5182: LD_EXP 42
5186: PUSH
5187: LD_INT 1
5189: PLUS
5190: ST_TO_ADDR
// end ;
5191: PPOPN 1
5193: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
5194: LD_VAR 0 2
5198: PUSH
5199: LD_EXP 18
5203: EQUAL
5204: IFFALSE 5213
// SetAchievement ( ACH_MASHA ) ;
5206: LD_STRING ACH_MASHA
5208: PPUSH
5209: CALL_OW 543
// end ;
5213: PPOPN 4
5215: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
5216: LD_VAR 0 1
5220: PPUSH
5221: CALL_OW 264
5225: PUSH
5226: LD_INT 8
5228: EQUAL
5229: PUSH
5230: LD_EXP 36
5234: PUSH
5235: LD_INT 0
5237: EQUAL
5238: AND
5239: IFFALSE 5308
// begin eventVar2 = 1 ;
5241: LD_ADDR_EXP 36
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// DialogueOn ;
5249: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
5253: LD_EXP 1
5257: PPUSH
5258: LD_STRING D6b-JMM-1
5260: PPUSH
5261: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
5265: LD_EXP 15
5269: PPUSH
5270: LD_STRING D6b-Pow-1
5272: PPUSH
5273: CALL_OW 94
// DialogueOff ;
5277: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
5281: LD_INT 5
5283: PPUSH
5284: LD_INT 1
5286: PPUSH
5287: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
5291: LD_INT 7
5293: PPUSH
5294: LD_INT 1
5296: PPUSH
5297: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
5301: LD_STRING M3
5303: PPUSH
5304: CALL_OW 337
// end ; end ;
5308: PPOPN 2
5310: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5311: LD_VAR 0 2
5315: PPUSH
5316: LD_VAR 0 3
5320: PPUSH
5321: LD_INT 5
5323: PPUSH
5324: CALL_OW 309
5328: PUSH
5329: LD_EXP 37
5333: PUSH
5334: LD_INT 0
5336: EQUAL
5337: AND
5338: IFFALSE 5567
// begin eventVar3 = 1 ;
5340: LD_ADDR_EXP 37
5344: PUSH
5345: LD_INT 1
5347: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5348: LD_INT 175
5350: PPUSH
5351: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5355: LD_INT 7
5357: PPUSH
5358: LD_INT 22
5360: PUSH
5361: LD_INT 1
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 21
5370: PUSH
5371: LD_INT 2
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: PUSH
5378: LD_INT 34
5380: PUSH
5381: LD_INT 11
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: LIST
5392: PPUSH
5393: CALL_OW 70
5397: PUSH
5398: LD_INT 0
5400: GREATER
5401: IFFALSE 5420
// begin radarOnSpot = 1 ;
5403: LD_ADDR_EXP 30
5407: PUSH
5408: LD_INT 1
5410: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5411: LD_STRING M3a
5413: PPUSH
5414: CALL_OW 337
// end else
5418: GO 5427
// begin ChangeMissionObjectives ( M3b ) ;
5420: LD_STRING M3b
5422: PPUSH
5423: CALL_OW 337
// end ; DialogueOn ;
5427: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5431: LD_EXP 2
5435: PPUSH
5436: LD_STRING D8-Huck-1
5438: PPUSH
5439: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5443: LD_EXP 1
5447: PPUSH
5448: LD_STRING D8-JMM-1
5450: PPUSH
5451: CALL_OW 88
// if IsOk ( Stevens ) then
5455: LD_EXP 2
5459: PPUSH
5460: CALL_OW 302
5464: IFFALSE 5526
// begin Say ( Stevens , D8-Huck-2 ) ;
5466: LD_EXP 2
5470: PPUSH
5471: LD_STRING D8-Huck-2
5473: PPUSH
5474: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5478: LD_EXP 1
5482: PPUSH
5483: LD_STRING D8-JMM-2
5485: PPUSH
5486: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5490: LD_EXP 2
5494: PPUSH
5495: LD_STRING D8-Huck-3
5497: PPUSH
5498: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5502: LD_EXP 1
5506: PPUSH
5507: LD_STRING D8-JMM-3
5509: PPUSH
5510: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5514: LD_EXP 2
5518: PPUSH
5519: LD_STRING D8-Huck-4
5521: PPUSH
5522: CALL_OW 88
// end ; DialogueOff ;
5526: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5530: LD_INT 5
5532: PPUSH
5533: LD_INT 0
5535: PPUSH
5536: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5540: LD_INT 7
5542: PPUSH
5543: LD_INT 0
5545: PPUSH
5546: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5550: LD_INT 6
5552: PPUSH
5553: LD_INT 1
5555: PPUSH
5556: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5560: LD_STRING M5
5562: PPUSH
5563: CALL_OW 337
// end ; end ;
5567: PPOPN 3
5569: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5570: LD_EXP 26
5574: PPUSH
5575: CALL_OW 302
5579: PUSH
5580: LD_VAR 0 2
5584: PUSH
5585: LD_EXP 26
5589: EQUAL
5590: AND
5591: PUSH
5592: LD_EXP 38
5596: PUSH
5597: LD_INT 0
5599: EQUAL
5600: AND
5601: PUSH
5602: LD_EXP 37
5606: PUSH
5607: LD_INT 1
5609: EQUAL
5610: AND
5611: IFFALSE 5657
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5613: LD_VAR 0 1
5617: PPUSH
5618: LD_INT 1
5620: PPUSH
5621: CALL_OW 268
5625: PUSH
5626: LD_INT 11
5628: EQUAL
5629: PUSH
5630: LD_VAR 0 1
5634: PPUSH
5635: LD_INT 2
5637: PPUSH
5638: CALL_OW 268
5642: PUSH
5643: LD_INT 11
5645: EQUAL
5646: OR
5647: IFFALSE 5657
// eventVar4 = 1 ;
5649: LD_ADDR_EXP 38
5653: PUSH
5654: LD_INT 1
5656: ST_TO_ADDR
// end ;
5657: PPOPN 2
5659: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5660: LD_INT 0
5662: PPUSH
5663: PPUSH
// begin if GetNation ( unit ) = 2 then
5664: LD_VAR 0 1
5668: PPUSH
5669: CALL_OW 248
5673: PUSH
5674: LD_INT 2
5676: EQUAL
5677: IFFALSE 5955
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5679: LD_ADDR_EXP 32
5683: PUSH
5684: LD_EXP 32
5688: PUSH
5689: LD_INT 1
5691: PLUS
5692: ST_TO_ADDR
// for i := 1 to sibDeposits do
5693: LD_ADDR_VAR 0 4
5697: PUSH
5698: DOUBLE
5699: LD_INT 1
5701: DEC
5702: ST_TO_ADDR
5703: LD_EXP 31
5707: PUSH
5708: FOR_TO
5709: IFFALSE 5811
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5711: LD_EXP 31
5715: PUSH
5716: LD_VAR 0 4
5720: ARRAY
5721: PUSH
5722: LD_INT 1
5724: ARRAY
5725: PUSH
5726: LD_VAR 0 2
5730: EQUAL
5731: PUSH
5732: LD_EXP 31
5736: PUSH
5737: LD_VAR 0 4
5741: ARRAY
5742: PUSH
5743: LD_INT 2
5745: ARRAY
5746: PUSH
5747: LD_VAR 0 3
5751: EQUAL
5752: AND
5753: IFFALSE 5809
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5755: LD_ADDR_EXP 31
5759: PUSH
5760: LD_EXP 31
5764: PPUSH
5765: LD_VAR 0 4
5769: PUSH
5770: EMPTY
5771: LIST
5772: PUSH
5773: LD_INT 1
5775: ARRAY
5776: PPUSH
5777: CALL_OW 3
5781: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5782: LD_ADDR_EXP 31
5786: PUSH
5787: LD_EXP 31
5791: PPUSH
5792: LD_VAR 0 4
5796: PUSH
5797: EMPTY
5798: LIST
5799: PUSH
5800: LD_INT 2
5802: ARRAY
5803: PPUSH
5804: CALL_OW 3
5808: ST_TO_ADDR
// end ;
5809: GO 5708
5811: POP
5812: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
5813: LD_EXP 39
5817: PUSH
5818: LD_INT 0
5820: EQUAL
5821: PUSH
5822: LD_VAR 0 2
5826: PPUSH
5827: LD_VAR 0 3
5831: PPUSH
5832: CALL_OW 428
5836: PUSH
5837: LD_INT 22
5839: PUSH
5840: LD_INT 1
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PPUSH
5847: CALL_OW 69
5851: IN
5852: AND
5853: IFFALSE 5955
// begin eventVar5 = 1 ;
5855: LD_ADDR_EXP 39
5859: PUSH
5860: LD_INT 1
5862: ST_TO_ADDR
// DialogueOn ;
5863: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5867: LD_EXP 2
5871: PPUSH
5872: LD_STRING D4-Sci1-1
5874: PPUSH
5875: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5879: LD_EXP 1
5883: PPUSH
5884: LD_STRING D4-JMM-1
5886: PPUSH
5887: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5891: LD_EXP 2
5895: PPUSH
5896: LD_STRING D4-Sci1-2
5898: PPUSH
5899: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5903: LD_EXP 1
5907: PPUSH
5908: LD_STRING D4-JMM-2
5910: PPUSH
5911: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5915: LD_EXP 2
5919: PPUSH
5920: LD_STRING D4-Sci1-3
5922: PPUSH
5923: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5927: LD_EXP 1
5931: PPUSH
5932: LD_STRING D4-JMM-3
5934: PPUSH
5935: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5939: LD_EXP 1
5943: PPUSH
5944: LD_STRING D4-JMM-3a
5946: PPUSH
5947: CALL_OW 88
// DialogueOff ;
5951: CALL_OW 7
// end ; end ; end ;
5955: PPOPN 5
5957: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
5958: LD_VAR 0 1
5962: PPUSH
5963: CALL_OW 255
5967: PUSH
5968: LD_INT 1
5970: EQUAL
5971: PUSH
5972: LD_VAR 0 1
5976: PPUSH
5977: CALL_OW 266
5981: PUSH
5982: LD_INT 0
5984: EQUAL
5985: AND
5986: PUSH
5987: LD_INT 22
5989: PUSH
5990: LD_INT 1
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PUSH
5997: LD_INT 21
5999: PUSH
6000: LD_INT 3
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: PUSH
6007: LD_INT 2
6009: PUSH
6010: LD_INT 30
6012: PUSH
6013: LD_INT 0
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: PUSH
6020: LD_INT 30
6022: PUSH
6023: LD_INT 1
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: LIST
6039: PPUSH
6040: CALL_OW 69
6044: PUSH
6045: LD_INT 1
6047: EQUAL
6048: AND
6049: IFFALSE 6063
// SetBName ( building , omega ) ;
6051: LD_VAR 0 1
6055: PPUSH
6056: LD_STRING omega
6058: PPUSH
6059: CALL_OW 500
// end ;
6063: PPOPN 2
6065: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6066: LD_VAR 0 1
6070: PPUSH
6071: CALL 26350 0 1
// end ; end_of_file
6075: PPOPN 1
6077: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6078: LD_INT 0
6080: PPUSH
6081: PPUSH
6082: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6083: LD_ADDR_VAR 0 1
6087: PUSH
6088: LD_VAR 0 1
6092: PUSH
6093: LD_EXP 1
6097: PUSH
6098: LD_EXP 2
6102: PUSH
6103: LD_EXP 3
6107: PUSH
6108: LD_EXP 4
6112: PUSH
6113: LD_EXP 5
6117: PUSH
6118: LD_EXP 6
6122: PUSH
6123: LD_EXP 7
6127: PUSH
6128: LD_EXP 8
6132: PUSH
6133: LD_EXP 9
6137: PUSH
6138: LD_EXP 10
6142: PUSH
6143: LD_EXP 11
6147: PUSH
6148: LD_EXP 12
6152: PUSH
6153: LD_EXP 13
6157: PUSH
6158: LD_EXP 14
6162: PUSH
6163: LD_EXP 15
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: DIFF
6185: ST_TO_ADDR
// if not characters then
6186: LD_VAR 0 1
6190: NOT
6191: IFFALSE 6195
// exit ;
6193: GO 6274
// speaker := characters [ rand ( 1 , characters ) ] ;
6195: LD_ADDR_VAR 0 6
6199: PUSH
6200: LD_VAR 0 1
6204: PUSH
6205: LD_INT 1
6207: PPUSH
6208: LD_VAR 0 1
6212: PPUSH
6213: CALL_OW 12
6217: ARRAY
6218: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6219: LD_VAR 0 6
6223: PPUSH
6224: CALL_OW 258
6228: PUSH
6229: LD_INT 1
6231: EQUAL
6232: IFFALSE 6250
// Say ( speaker , dialogMID ) else
6234: LD_VAR 0 6
6238: PPUSH
6239: LD_VAR 0 2
6243: PPUSH
6244: CALL_OW 88
6248: GO 6264
// Say ( speaker , dialogFID ) ;
6250: LD_VAR 0 6
6254: PPUSH
6255: LD_VAR 0 3
6259: PPUSH
6260: CALL_OW 88
// result := speaker ;
6264: LD_ADDR_VAR 0 4
6268: PUSH
6269: LD_VAR 0 6
6273: ST_TO_ADDR
// end ;
6274: LD_VAR 0 4
6278: RET
// export function PrepareDifficulty ; begin
6279: LD_INT 0
6281: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6282: LD_INT 5
6284: PPUSH
6285: LD_INT 8
6287: PPUSH
6288: LD_INT 2
6290: PPUSH
6291: CALL_OW 322
// if difficulty = 1 then
6295: LD_OWVAR 67
6299: PUSH
6300: LD_INT 1
6302: EQUAL
6303: IFFALSE 6422
// begin SetTech ( 66 , 8 , state_researched ) ;
6305: LD_INT 66
6307: PPUSH
6308: LD_INT 8
6310: PPUSH
6311: LD_INT 2
6313: PPUSH
6314: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6318: LD_INT 67
6320: PPUSH
6321: LD_INT 8
6323: PPUSH
6324: LD_INT 0
6326: PPUSH
6327: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6331: LD_INT 68
6333: PPUSH
6334: LD_INT 8
6336: PPUSH
6337: LD_INT 0
6339: PPUSH
6340: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6344: LD_INT 51
6346: PPUSH
6347: LD_INT 8
6349: PPUSH
6350: LD_INT 2
6352: PPUSH
6353: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6357: LD_INT 52
6359: PPUSH
6360: LD_INT 8
6362: PPUSH
6363: LD_INT 0
6365: PPUSH
6366: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6370: LD_INT 53
6372: PPUSH
6373: LD_INT 8
6375: PPUSH
6376: LD_INT 0
6378: PPUSH
6379: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6383: LD_INT 60
6385: PPUSH
6386: LD_INT 8
6388: PPUSH
6389: LD_INT 2
6391: PPUSH
6392: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6396: LD_INT 61
6398: PPUSH
6399: LD_INT 8
6401: PPUSH
6402: LD_INT 0
6404: PPUSH
6405: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6409: LD_INT 62
6411: PPUSH
6412: LD_INT 8
6414: PPUSH
6415: LD_INT 0
6417: PPUSH
6418: CALL_OW 322
// end ; if difficulty = 2 then
6422: LD_OWVAR 67
6426: PUSH
6427: LD_INT 2
6429: EQUAL
6430: IFFALSE 6549
// begin SetTech ( 66 , 8 , state_researched ) ;
6432: LD_INT 66
6434: PPUSH
6435: LD_INT 8
6437: PPUSH
6438: LD_INT 2
6440: PPUSH
6441: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6445: LD_INT 67
6447: PPUSH
6448: LD_INT 8
6450: PPUSH
6451: LD_INT 2
6453: PPUSH
6454: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6458: LD_INT 68
6460: PPUSH
6461: LD_INT 8
6463: PPUSH
6464: LD_INT 0
6466: PPUSH
6467: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6471: LD_INT 51
6473: PPUSH
6474: LD_INT 8
6476: PPUSH
6477: LD_INT 2
6479: PPUSH
6480: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6484: LD_INT 52
6486: PPUSH
6487: LD_INT 8
6489: PPUSH
6490: LD_INT 2
6492: PPUSH
6493: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6497: LD_INT 53
6499: PPUSH
6500: LD_INT 8
6502: PPUSH
6503: LD_INT 2
6505: PPUSH
6506: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6510: LD_INT 60
6512: PPUSH
6513: LD_INT 8
6515: PPUSH
6516: LD_INT 2
6518: PPUSH
6519: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6523: LD_INT 61
6525: PPUSH
6526: LD_INT 8
6528: PPUSH
6529: LD_INT 2
6531: PPUSH
6532: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6536: LD_INT 62
6538: PPUSH
6539: LD_INT 8
6541: PPUSH
6542: LD_INT 0
6544: PPUSH
6545: CALL_OW 322
// end ; if difficulty = 3 then
6549: LD_OWVAR 67
6553: PUSH
6554: LD_INT 3
6556: EQUAL
6557: IFFALSE 6676
// begin SetTech ( 66 , 8 , state_researched ) ;
6559: LD_INT 66
6561: PPUSH
6562: LD_INT 8
6564: PPUSH
6565: LD_INT 2
6567: PPUSH
6568: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6572: LD_INT 67
6574: PPUSH
6575: LD_INT 8
6577: PPUSH
6578: LD_INT 2
6580: PPUSH
6581: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6585: LD_INT 68
6587: PPUSH
6588: LD_INT 8
6590: PPUSH
6591: LD_INT 0
6593: PPUSH
6594: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6598: LD_INT 51
6600: PPUSH
6601: LD_INT 8
6603: PPUSH
6604: LD_INT 2
6606: PPUSH
6607: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6611: LD_INT 52
6613: PPUSH
6614: LD_INT 8
6616: PPUSH
6617: LD_INT 2
6619: PPUSH
6620: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6624: LD_INT 53
6626: PPUSH
6627: LD_INT 8
6629: PPUSH
6630: LD_INT 2
6632: PPUSH
6633: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6637: LD_INT 60
6639: PPUSH
6640: LD_INT 8
6642: PPUSH
6643: LD_INT 2
6645: PPUSH
6646: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6650: LD_INT 61
6652: PPUSH
6653: LD_INT 8
6655: PPUSH
6656: LD_INT 2
6658: PPUSH
6659: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6663: LD_INT 62
6665: PPUSH
6666: LD_INT 8
6668: PPUSH
6669: LD_INT 0
6671: PPUSH
6672: CALL_OW 322
// end ; end ;
6676: LD_VAR 0 1
6680: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6681: LD_INT 0
6683: PPUSH
6684: PPUSH
6685: PPUSH
6686: PPUSH
6687: PPUSH
6688: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6689: LD_ADDR_VAR 0 7
6693: PUSH
6694: LD_INT 22
6696: PUSH
6697: LD_VAR 0 1
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PUSH
6706: LD_INT 25
6708: PUSH
6709: LD_INT 9
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PPUSH
6720: CALL_OW 69
6724: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6725: LD_ADDR_VAR 0 8
6729: PUSH
6730: LD_INT 22
6732: PUSH
6733: LD_VAR 0 2
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: PUSH
6742: LD_INT 3
6744: PUSH
6745: LD_INT 21
6747: PUSH
6748: LD_INT 3
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: PPUSH
6763: CALL_OW 69
6767: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6768: LD_ADDR_VAR 0 5
6772: PUSH
6773: LD_INT 1
6775: PPUSH
6776: LD_INT 3
6778: PPUSH
6779: CALL_OW 12
6783: ST_TO_ADDR
// for i = 1 to list do
6784: LD_ADDR_VAR 0 6
6788: PUSH
6789: DOUBLE
6790: LD_INT 1
6792: DEC
6793: ST_TO_ADDR
6794: LD_VAR 0 7
6798: PUSH
6799: FOR_TO
6800: IFFALSE 6982
// for ta in filter do
6802: LD_ADDR_VAR 0 4
6806: PUSH
6807: LD_VAR 0 8
6811: PUSH
6812: FOR_IN
6813: IFFALSE 6978
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6815: LD_VAR 0 7
6819: PUSH
6820: LD_VAR 0 6
6824: ARRAY
6825: PPUSH
6826: LD_VAR 0 4
6830: PPUSH
6831: CALL_OW 296
6835: PUSH
6836: LD_INT 13
6838: LESSEQUAL
6839: IFFALSE 6976
// begin case c of 1 :
6841: LD_VAR 0 5
6845: PUSH
6846: LD_INT 1
6848: DOUBLE
6849: EQUAL
6850: IFTRUE 6854
6852: GO 6892
6854: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
6855: LD_VAR 0 7
6859: PUSH
6860: LD_VAR 0 6
6864: ARRAY
6865: PPUSH
6866: LD_VAR 0 4
6870: PPUSH
6871: CALL_OW 250
6875: PPUSH
6876: LD_VAR 0 4
6880: PPUSH
6881: CALL_OW 251
6885: PPUSH
6886: CALL_OW 154
6890: GO 6976
6892: LD_INT 2
6894: DOUBLE
6895: EQUAL
6896: IFTRUE 6900
6898: GO 6964
6900: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
6901: LD_VAR 0 7
6905: PUSH
6906: LD_VAR 0 6
6910: ARRAY
6911: PPUSH
6912: LD_VAR 0 4
6916: PPUSH
6917: CALL_OW 250
6921: PUSH
6922: LD_INT 1
6924: NEG
6925: PPUSH
6926: LD_INT 1
6928: PPUSH
6929: CALL_OW 12
6933: PLUS
6934: PPUSH
6935: LD_VAR 0 4
6939: PPUSH
6940: CALL_OW 251
6944: PUSH
6945: LD_INT 1
6947: NEG
6948: PPUSH
6949: LD_INT 1
6951: PPUSH
6952: CALL_OW 12
6956: PLUS
6957: PPUSH
6958: CALL_OW 153
6962: GO 6976
6964: LD_INT 3
6966: DOUBLE
6967: EQUAL
6968: IFTRUE 6972
6970: GO 6975
6972: POP
// ; end ;
6973: GO 6976
6975: POP
// end ; end ;
6976: GO 6812
6978: POP
6979: POP
6980: GO 6799
6982: POP
6983: POP
// end ;
6984: LD_VAR 0 3
6988: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6989: LD_INT 0
6991: PPUSH
6992: PPUSH
// for i in charactersList do
6993: LD_ADDR_VAR 0 4
6997: PUSH
6998: LD_VAR 0 1
7002: PUSH
7003: FOR_IN
7004: IFFALSE 7022
// SaveCharacters ( i , ident ) ;
7006: LD_VAR 0 4
7010: PPUSH
7011: LD_VAR 0 2
7015: PPUSH
7016: CALL_OW 38
7020: GO 7003
7022: POP
7023: POP
// end ;
7024: LD_VAR 0 3
7028: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7029: LD_INT 0
7031: PPUSH
7032: PPUSH
7033: PPUSH
7034: PPUSH
7035: PPUSH
7036: PPUSH
7037: PPUSH
7038: PPUSH
7039: PPUSH
7040: PPUSH
7041: PPUSH
// for i = 1 to medicCount do
7042: LD_ADDR_VAR 0 13
7046: PUSH
7047: DOUBLE
7048: LD_INT 1
7050: DEC
7051: ST_TO_ADDR
7052: LD_VAR 0 7
7056: PUSH
7057: FOR_TO
7058: IFFALSE 7140
// begin uc_side = side ;
7060: LD_ADDR_OWVAR 20
7064: PUSH
7065: LD_VAR 0 1
7069: ST_TO_ADDR
// uc_nation = nation ;
7070: LD_ADDR_OWVAR 21
7074: PUSH
7075: LD_VAR 0 2
7079: ST_TO_ADDR
// hc_name =  ;
7080: LD_ADDR_OWVAR 26
7084: PUSH
7085: LD_STRING 
7087: ST_TO_ADDR
// hc_gallery =  ;
7088: LD_ADDR_OWVAR 33
7092: PUSH
7093: LD_STRING 
7095: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7096: LD_INT 0
7098: PPUSH
7099: LD_INT 4
7101: PPUSH
7102: LD_VAR 0 8
7106: PPUSH
7107: CALL_OW 380
// un = CreateHuman ;
7111: LD_ADDR_VAR 0 15
7115: PUSH
7116: CALL_OW 44
7120: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7121: LD_VAR 0 15
7125: PPUSH
7126: LD_VAR 0 9
7130: PPUSH
7131: LD_INT 0
7133: PPUSH
7134: CALL_OW 49
// end ;
7138: GO 7057
7140: POP
7141: POP
// for i = 1 to soldierCount do
7142: LD_ADDR_VAR 0 13
7146: PUSH
7147: DOUBLE
7148: LD_INT 1
7150: DEC
7151: ST_TO_ADDR
7152: LD_VAR 0 3
7156: PUSH
7157: FOR_TO
7158: IFFALSE 7240
// begin uc_side = side ;
7160: LD_ADDR_OWVAR 20
7164: PUSH
7165: LD_VAR 0 1
7169: ST_TO_ADDR
// uc_nation = nation ;
7170: LD_ADDR_OWVAR 21
7174: PUSH
7175: LD_VAR 0 2
7179: ST_TO_ADDR
// hc_name =  ;
7180: LD_ADDR_OWVAR 26
7184: PUSH
7185: LD_STRING 
7187: ST_TO_ADDR
// hc_gallery =  ;
7188: LD_ADDR_OWVAR 33
7192: PUSH
7193: LD_STRING 
7195: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7196: LD_INT 0
7198: PPUSH
7199: LD_INT 1
7201: PPUSH
7202: LD_VAR 0 8
7206: PPUSH
7207: CALL_OW 380
// un = CreateHuman ;
7211: LD_ADDR_VAR 0 15
7215: PUSH
7216: CALL_OW 44
7220: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7221: LD_VAR 0 15
7225: PPUSH
7226: LD_VAR 0 9
7230: PPUSH
7231: LD_INT 0
7233: PPUSH
7234: CALL_OW 49
// end ;
7238: GO 7157
7240: POP
7241: POP
// for i = 1 to sniperCount do
7242: LD_ADDR_VAR 0 13
7246: PUSH
7247: DOUBLE
7248: LD_INT 1
7250: DEC
7251: ST_TO_ADDR
7252: LD_VAR 0 4
7256: PUSH
7257: FOR_TO
7258: IFFALSE 7340
// begin uc_side = side ;
7260: LD_ADDR_OWVAR 20
7264: PUSH
7265: LD_VAR 0 1
7269: ST_TO_ADDR
// uc_nation = nation ;
7270: LD_ADDR_OWVAR 21
7274: PUSH
7275: LD_VAR 0 2
7279: ST_TO_ADDR
// hc_name =  ;
7280: LD_ADDR_OWVAR 26
7284: PUSH
7285: LD_STRING 
7287: ST_TO_ADDR
// hc_gallery =  ;
7288: LD_ADDR_OWVAR 33
7292: PUSH
7293: LD_STRING 
7295: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7296: LD_INT 0
7298: PPUSH
7299: LD_INT 5
7301: PPUSH
7302: LD_VAR 0 8
7306: PPUSH
7307: CALL_OW 380
// un = CreateHuman ;
7311: LD_ADDR_VAR 0 15
7315: PUSH
7316: CALL_OW 44
7320: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7321: LD_VAR 0 15
7325: PPUSH
7326: LD_VAR 0 9
7330: PPUSH
7331: LD_INT 0
7333: PPUSH
7334: CALL_OW 49
// end ;
7338: GO 7257
7340: POP
7341: POP
// for i = 1 to bazookCount do
7342: LD_ADDR_VAR 0 13
7346: PUSH
7347: DOUBLE
7348: LD_INT 1
7350: DEC
7351: ST_TO_ADDR
7352: LD_VAR 0 5
7356: PUSH
7357: FOR_TO
7358: IFFALSE 7440
// begin uc_side = side ;
7360: LD_ADDR_OWVAR 20
7364: PUSH
7365: LD_VAR 0 1
7369: ST_TO_ADDR
// uc_nation = nation ;
7370: LD_ADDR_OWVAR 21
7374: PUSH
7375: LD_VAR 0 2
7379: ST_TO_ADDR
// hc_name =  ;
7380: LD_ADDR_OWVAR 26
7384: PUSH
7385: LD_STRING 
7387: ST_TO_ADDR
// hc_gallery =  ;
7388: LD_ADDR_OWVAR 33
7392: PUSH
7393: LD_STRING 
7395: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7396: LD_INT 0
7398: PPUSH
7399: LD_INT 9
7401: PPUSH
7402: LD_VAR 0 8
7406: PPUSH
7407: CALL_OW 380
// un = CreateHuman ;
7411: LD_ADDR_VAR 0 15
7415: PUSH
7416: CALL_OW 44
7420: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7421: LD_VAR 0 15
7425: PPUSH
7426: LD_VAR 0 9
7430: PPUSH
7431: LD_INT 0
7433: PPUSH
7434: CALL_OW 49
// end ;
7438: GO 7357
7440: POP
7441: POP
// for i = 1 to mortalCount do
7442: LD_ADDR_VAR 0 13
7446: PUSH
7447: DOUBLE
7448: LD_INT 1
7450: DEC
7451: ST_TO_ADDR
7452: LD_VAR 0 6
7456: PUSH
7457: FOR_TO
7458: IFFALSE 7540
// begin uc_side = side ;
7460: LD_ADDR_OWVAR 20
7464: PUSH
7465: LD_VAR 0 1
7469: ST_TO_ADDR
// uc_nation = nation ;
7470: LD_ADDR_OWVAR 21
7474: PUSH
7475: LD_VAR 0 2
7479: ST_TO_ADDR
// hc_name =  ;
7480: LD_ADDR_OWVAR 26
7484: PUSH
7485: LD_STRING 
7487: ST_TO_ADDR
// hc_gallery =  ;
7488: LD_ADDR_OWVAR 33
7492: PUSH
7493: LD_STRING 
7495: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7496: LD_INT 0
7498: PPUSH
7499: LD_INT 8
7501: PPUSH
7502: LD_VAR 0 8
7506: PPUSH
7507: CALL_OW 380
// un = CreateHuman ;
7511: LD_ADDR_VAR 0 15
7515: PUSH
7516: CALL_OW 44
7520: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7521: LD_VAR 0 15
7525: PPUSH
7526: LD_VAR 0 9
7530: PPUSH
7531: LD_INT 0
7533: PPUSH
7534: CALL_OW 49
// end ;
7538: GO 7457
7540: POP
7541: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7542: LD_ADDR_VAR 0 17
7546: PUSH
7547: LD_INT 22
7549: PUSH
7550: LD_VAR 0 1
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: PUSH
7559: LD_INT 25
7561: PUSH
7562: LD_INT 4
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PPUSH
7573: CALL_OW 69
7577: ST_TO_ADDR
// for i in medic_list do
7578: LD_ADDR_VAR 0 13
7582: PUSH
7583: LD_VAR 0 17
7587: PUSH
7588: FOR_IN
7589: IFFALSE 7624
// if GetTag ( i ) = 1 then
7591: LD_VAR 0 13
7595: PPUSH
7596: CALL_OW 110
7600: PUSH
7601: LD_INT 1
7603: EQUAL
7604: IFFALSE 7622
// medic_list := medic_list diff i ;
7606: LD_ADDR_VAR 0 17
7610: PUSH
7611: LD_VAR 0 17
7615: PUSH
7616: LD_VAR 0 13
7620: DIFF
7621: ST_TO_ADDR
7622: GO 7588
7624: POP
7625: POP
// for i in medic_list do
7626: LD_ADDR_VAR 0 13
7630: PUSH
7631: LD_VAR 0 17
7635: PUSH
7636: FOR_IN
7637: IFFALSE 7655
// ComMoveToArea ( i , healArea ) ;
7639: LD_VAR 0 13
7643: PPUSH
7644: LD_VAR 0 10
7648: PPUSH
7649: CALL_OW 113
7653: GO 7636
7655: POP
7656: POP
// repeat wait ( 0 0$1 ) ;
7657: LD_INT 35
7659: PPUSH
7660: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7664: LD_ADDR_VAR 0 16
7668: PUSH
7669: LD_INT 22
7671: PUSH
7672: LD_VAR 0 1
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: LD_INT 1
7683: PUSH
7684: LD_INT 3
7686: PUSH
7687: LD_INT 24
7689: PUSH
7690: LD_INT 550
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_INT 24
7703: PUSH
7704: LD_INT 250
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PUSH
7711: EMPTY
7712: LIST
7713: LIST
7714: LIST
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PPUSH
7720: CALL_OW 69
7724: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7725: LD_ADDR_VAR 0 18
7729: PUSH
7730: LD_INT 22
7732: PUSH
7733: LD_VAR 0 1
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: PUSH
7742: LD_INT 2
7744: PUSH
7745: LD_INT 25
7747: PUSH
7748: LD_INT 1
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PUSH
7755: LD_INT 25
7757: PUSH
7758: LD_INT 5
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PUSH
7765: LD_INT 25
7767: PUSH
7768: LD_INT 8
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PUSH
7775: LD_INT 25
7777: PUSH
7778: LD_INT 9
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 24
7794: PUSH
7795: LD_INT 1000
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: LIST
7806: PPUSH
7807: CALL_OW 69
7811: ST_TO_ADDR
// if medicCount > 0 then
7812: LD_VAR 0 7
7816: PUSH
7817: LD_INT 0
7819: GREATER
7820: IFFALSE 7894
// begin if damageUnit_list > 0 then
7822: LD_VAR 0 16
7826: PUSH
7827: LD_INT 0
7829: GREATER
7830: IFFALSE 7894
// begin for i in damageUnit_list do
7832: LD_ADDR_VAR 0 13
7836: PUSH
7837: LD_VAR 0 16
7841: PUSH
7842: FOR_IN
7843: IFFALSE 7892
// begin ComMoveToArea ( i , healArea ) ;
7845: LD_VAR 0 13
7849: PPUSH
7850: LD_VAR 0 10
7854: PPUSH
7855: CALL_OW 113
// for j in medic_list do
7859: LD_ADDR_VAR 0 14
7863: PUSH
7864: LD_VAR 0 17
7868: PUSH
7869: FOR_IN
7870: IFFALSE 7888
// AddComHeal ( j , i ) ;
7872: LD_VAR 0 14
7876: PPUSH
7877: LD_VAR 0 13
7881: PPUSH
7882: CALL_OW 188
7886: GO 7869
7888: POP
7889: POP
// end ;
7890: GO 7842
7892: POP
7893: POP
// end ; end ; for i in soldiersOK_list do
7894: LD_ADDR_VAR 0 13
7898: PUSH
7899: LD_VAR 0 18
7903: PUSH
7904: FOR_IN
7905: IFFALSE 8081
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7907: LD_ADDR_VAR 0 21
7911: PUSH
7912: LD_INT 22
7914: PUSH
7915: LD_VAR 0 11
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PPUSH
7924: CALL_OW 69
7928: PPUSH
7929: LD_VAR 0 13
7933: PPUSH
7934: CALL_OW 74
7938: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7939: LD_ADDR_VAR 0 22
7943: PUSH
7944: LD_INT 22
7946: PUSH
7947: LD_VAR 0 11
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: LD_INT 2
7958: PUSH
7959: LD_INT 59
7961: PUSH
7962: EMPTY
7963: LIST
7964: PUSH
7965: LD_INT 21
7967: PUSH
7968: LD_INT 1
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 21
7977: PUSH
7978: LD_INT 2
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: PUSH
7995: EMPTY
7996: LIST
7997: PPUSH
7998: CALL_OW 69
8002: PPUSH
8003: LD_VAR 0 13
8007: PPUSH
8008: CALL_OW 74
8012: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8013: LD_VAR 0 13
8017: PPUSH
8018: LD_VAR 0 21
8022: PPUSH
8023: CALL_OW 296
8027: PUSH
8028: LD_INT 8
8030: PLUS
8031: PUSH
8032: LD_VAR 0 13
8036: PPUSH
8037: LD_VAR 0 22
8041: PPUSH
8042: CALL_OW 296
8046: LESS
8047: IFFALSE 8065
// begin ComAttackUnit ( i , target1 ) ;
8049: LD_VAR 0 13
8053: PPUSH
8054: LD_VAR 0 21
8058: PPUSH
8059: CALL_OW 115
// end else
8063: GO 8079
// begin ComAttackUnit ( i , target2 ) ;
8065: LD_VAR 0 13
8069: PPUSH
8070: LD_VAR 0 22
8074: PPUSH
8075: CALL_OW 115
// end ; end ;
8079: GO 7904
8081: POP
8082: POP
// until soldiersOK_list = [ ] ;
8083: LD_VAR 0 18
8087: PUSH
8088: EMPTY
8089: EQUAL
8090: IFFALSE 7657
// end ;
8092: LD_VAR 0 12
8096: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8097: LD_INT 0
8099: PPUSH
8100: PPUSH
8101: PPUSH
8102: PPUSH
8103: PPUSH
8104: PPUSH
8105: PPUSH
8106: PPUSH
8107: PPUSH
8108: PPUSH
8109: PPUSH
// amChassisTab = [ ] ;
8110: LD_ADDR_VAR 0 19
8114: PUSH
8115: EMPTY
8116: ST_TO_ADDR
// arChassisTab = [ ] ;
8117: LD_ADDR_VAR 0 18
8121: PUSH
8122: EMPTY
8123: ST_TO_ADDR
// ruChassisTab = [ ] ;
8124: LD_ADDR_VAR 0 17
8128: PUSH
8129: EMPTY
8130: ST_TO_ADDR
// for i = 1 to vehCount do
8131: LD_ADDR_VAR 0 13
8135: PUSH
8136: DOUBLE
8137: LD_INT 1
8139: DEC
8140: ST_TO_ADDR
8141: LD_VAR 0 3
8145: PUSH
8146: FOR_TO
8147: IFFALSE 9571
// begin wait ( 0 0$01 ) ;
8149: LD_INT 35
8151: PPUSH
8152: CALL_OW 67
// if nation = 1 then
8156: LD_VAR 0 5
8160: PUSH
8161: LD_INT 1
8163: EQUAL
8164: IFFALSE 8645
// begin uc_side = side ;
8166: LD_ADDR_OWVAR 20
8170: PUSH
8171: LD_VAR 0 2
8175: ST_TO_ADDR
// uc_nation = nation ;
8176: LD_ADDR_OWVAR 21
8180: PUSH
8181: LD_VAR 0 5
8185: ST_TO_ADDR
// vc_engine = vehengine ;
8186: LD_ADDR_OWVAR 39
8190: PUSH
8191: LD_VAR 0 6
8195: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8196: LD_ADDR_OWVAR 40
8200: PUSH
8201: LD_VAR 0 10
8205: PUSH
8206: LD_INT 1
8208: PPUSH
8209: LD_VAR 0 10
8213: PPUSH
8214: CALL_OW 12
8218: ARRAY
8219: ST_TO_ADDR
// for j = 1 to AMWeapon do
8220: LD_ADDR_VAR 0 14
8224: PUSH
8225: DOUBLE
8226: LD_INT 1
8228: DEC
8229: ST_TO_ADDR
8230: LD_VAR 0 10
8234: PUSH
8235: FOR_TO
8236: IFFALSE 8537
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8238: LD_VAR 0 10
8242: PUSH
8243: LD_VAR 0 14
8247: ARRAY
8248: PUSH
8249: LD_INT 2
8251: EQUAL
8252: PUSH
8253: LD_VAR 0 10
8257: PUSH
8258: LD_VAR 0 14
8262: ARRAY
8263: PUSH
8264: LD_INT 3
8266: EQUAL
8267: OR
8268: IFFALSE 8321
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8270: LD_ADDR_VAR 0 19
8274: PUSH
8275: LD_INT 1
8277: PUSH
8278: LD_INT 2
8280: PUSH
8281: LD_INT 3
8283: PUSH
8284: LD_INT 4
8286: PUSH
8287: LD_INT 5
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8297: LD_ADDR_OWVAR 37
8301: PUSH
8302: LD_VAR 0 19
8306: PUSH
8307: LD_INT 1
8309: PPUSH
8310: LD_VAR 0 19
8314: PPUSH
8315: CALL_OW 12
8319: ARRAY
8320: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8321: LD_VAR 0 10
8325: PUSH
8326: LD_VAR 0 14
8330: ARRAY
8331: PUSH
8332: LD_INT 4
8334: EQUAL
8335: PUSH
8336: LD_VAR 0 10
8340: PUSH
8341: LD_VAR 0 14
8345: ARRAY
8346: PUSH
8347: LD_INT 5
8349: EQUAL
8350: OR
8351: PUSH
8352: LD_VAR 0 10
8356: PUSH
8357: LD_VAR 0 14
8361: ARRAY
8362: PUSH
8363: LD_INT 9
8365: EQUAL
8366: OR
8367: PUSH
8368: LD_VAR 0 10
8372: PUSH
8373: LD_VAR 0 14
8377: ARRAY
8378: PUSH
8379: LD_INT 11
8381: EQUAL
8382: OR
8383: PUSH
8384: LD_VAR 0 10
8388: PUSH
8389: LD_VAR 0 14
8393: ARRAY
8394: PUSH
8395: LD_INT 7
8397: EQUAL
8398: OR
8399: IFFALSE 8448
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8401: LD_ADDR_VAR 0 19
8405: PUSH
8406: LD_INT 2
8408: PUSH
8409: LD_INT 3
8411: PUSH
8412: LD_INT 4
8414: PUSH
8415: LD_INT 5
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8424: LD_ADDR_OWVAR 37
8428: PUSH
8429: LD_VAR 0 19
8433: PUSH
8434: LD_INT 1
8436: PPUSH
8437: LD_VAR 0 19
8441: PPUSH
8442: CALL_OW 12
8446: ARRAY
8447: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8448: LD_VAR 0 10
8452: PUSH
8453: LD_VAR 0 14
8457: ARRAY
8458: PUSH
8459: LD_INT 8
8461: EQUAL
8462: PUSH
8463: LD_VAR 0 10
8467: PUSH
8468: LD_VAR 0 14
8472: ARRAY
8473: PUSH
8474: LD_INT 6
8476: EQUAL
8477: OR
8478: PUSH
8479: LD_VAR 0 10
8483: PUSH
8484: LD_VAR 0 14
8488: ARRAY
8489: PUSH
8490: LD_INT 10
8492: EQUAL
8493: OR
8494: IFFALSE 8535
// begin amChassisTab = [ 4 , 5 ] ;
8496: LD_ADDR_VAR 0 19
8500: PUSH
8501: LD_INT 4
8503: PUSH
8504: LD_INT 5
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8511: LD_ADDR_OWVAR 37
8515: PUSH
8516: LD_VAR 0 19
8520: PUSH
8521: LD_INT 1
8523: PPUSH
8524: LD_VAR 0 19
8528: PPUSH
8529: CALL_OW 12
8533: ARRAY
8534: ST_TO_ADDR
// end ; end ;
8535: GO 8235
8537: POP
8538: POP
// veh = CreateVehicle ;
8539: LD_ADDR_VAR 0 16
8543: PUSH
8544: CALL_OW 45
8548: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8549: LD_VAR 0 16
8553: PPUSH
8554: LD_VAR 0 1
8558: PPUSH
8559: LD_INT 0
8561: PPUSH
8562: CALL_OW 49
// if vc_control = 1 then
8566: LD_OWVAR 38
8570: PUSH
8571: LD_INT 1
8573: EQUAL
8574: IFFALSE 8631
// begin hc_gallery =  ;
8576: LD_ADDR_OWVAR 33
8580: PUSH
8581: LD_STRING 
8583: ST_TO_ADDR
// hc_name =  ;
8584: LD_ADDR_OWVAR 26
8588: PUSH
8589: LD_STRING 
8591: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8592: LD_INT 0
8594: PPUSH
8595: LD_INT 3
8597: PPUSH
8598: LD_VAR 0 4
8602: PPUSH
8603: CALL_OW 380
// un = CreateHuman ;
8607: LD_ADDR_VAR 0 15
8611: PUSH
8612: CALL_OW 44
8616: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8617: LD_VAR 0 15
8621: PPUSH
8622: LD_VAR 0 16
8626: PPUSH
8627: CALL_OW 52
// end ; i = i + 1 ;
8631: LD_ADDR_VAR 0 13
8635: PUSH
8636: LD_VAR 0 13
8640: PUSH
8641: LD_INT 1
8643: PLUS
8644: ST_TO_ADDR
// end ; if nation = 2 then
8645: LD_VAR 0 5
8649: PUSH
8650: LD_INT 2
8652: EQUAL
8653: IFFALSE 9155
// begin uc_side = side ;
8655: LD_ADDR_OWVAR 20
8659: PUSH
8660: LD_VAR 0 2
8664: ST_TO_ADDR
// uc_nation = nation ;
8665: LD_ADDR_OWVAR 21
8669: PUSH
8670: LD_VAR 0 5
8674: ST_TO_ADDR
// vc_engine = vehengine ;
8675: LD_ADDR_OWVAR 39
8679: PUSH
8680: LD_VAR 0 6
8684: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8685: LD_INT 22
8687: PUSH
8688: LD_VAR 0 2
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: LD_INT 21
8699: PUSH
8700: LD_INT 2
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PUSH
8707: LD_INT 33
8709: PUSH
8710: LD_INT 2
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PUSH
8717: LD_INT 50
8719: PUSH
8720: EMPTY
8721: LIST
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: PPUSH
8729: CALL_OW 69
8733: PUSH
8734: LD_INT 8
8736: LESSEQUAL
8737: IFFALSE 8765
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8739: LD_ADDR_OWVAR 38
8743: PUSH
8744: LD_VAR 0 7
8748: PUSH
8749: LD_INT 1
8751: PPUSH
8752: LD_VAR 0 7
8756: PPUSH
8757: CALL_OW 12
8761: ARRAY
8762: ST_TO_ADDR
8763: GO 8773
// vc_control = control_apeman ;
8765: LD_ADDR_OWVAR 38
8769: PUSH
8770: LD_INT 5
8772: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8773: LD_ADDR_OWVAR 40
8777: PUSH
8778: LD_VAR 0 9
8782: PUSH
8783: LD_INT 1
8785: PPUSH
8786: LD_VAR 0 9
8790: PPUSH
8791: CALL_OW 12
8795: ARRAY
8796: ST_TO_ADDR
// for j = 1 to ARWeapons do
8797: LD_ADDR_VAR 0 14
8801: PUSH
8802: DOUBLE
8803: LD_INT 1
8805: DEC
8806: ST_TO_ADDR
8807: LD_VAR 0 9
8811: PUSH
8812: FOR_TO
8813: IFFALSE 9047
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8815: LD_VAR 0 9
8819: PUSH
8820: LD_VAR 0 14
8824: ARRAY
8825: PUSH
8826: LD_INT 24
8828: EQUAL
8829: PUSH
8830: LD_VAR 0 9
8834: PUSH
8835: LD_VAR 0 14
8839: ARRAY
8840: PUSH
8841: LD_INT 22
8843: EQUAL
8844: OR
8845: PUSH
8846: LD_VAR 0 9
8850: PUSH
8851: LD_VAR 0 14
8855: ARRAY
8856: PUSH
8857: LD_INT 23
8859: EQUAL
8860: OR
8861: PUSH
8862: LD_VAR 0 9
8866: PUSH
8867: LD_VAR 0 14
8871: ARRAY
8872: PUSH
8873: LD_INT 30
8875: EQUAL
8876: OR
8877: IFFALSE 8926
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8879: LD_ADDR_VAR 0 18
8883: PUSH
8884: LD_INT 11
8886: PUSH
8887: LD_INT 12
8889: PUSH
8890: LD_INT 13
8892: PUSH
8893: LD_INT 14
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8902: LD_ADDR_OWVAR 37
8906: PUSH
8907: LD_VAR 0 18
8911: PUSH
8912: LD_INT 1
8914: PPUSH
8915: LD_VAR 0 18
8919: PPUSH
8920: CALL_OW 12
8924: ARRAY
8925: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8926: LD_VAR 0 9
8930: PUSH
8931: LD_VAR 0 14
8935: ARRAY
8936: PUSH
8937: LD_INT 29
8939: EQUAL
8940: PUSH
8941: LD_VAR 0 9
8945: PUSH
8946: LD_VAR 0 14
8950: ARRAY
8951: PUSH
8952: LD_INT 28
8954: EQUAL
8955: OR
8956: PUSH
8957: LD_VAR 0 9
8961: PUSH
8962: LD_VAR 0 14
8966: ARRAY
8967: PUSH
8968: LD_INT 27
8970: EQUAL
8971: OR
8972: PUSH
8973: LD_VAR 0 9
8977: PUSH
8978: LD_VAR 0 14
8982: ARRAY
8983: PUSH
8984: LD_INT 26
8986: EQUAL
8987: OR
8988: PUSH
8989: LD_VAR 0 9
8993: PUSH
8994: LD_VAR 0 14
8998: ARRAY
8999: PUSH
9000: LD_INT 25
9002: EQUAL
9003: OR
9004: IFFALSE 9045
// begin arChassisTab = [ 13 , 14 ] ;
9006: LD_ADDR_VAR 0 18
9010: PUSH
9011: LD_INT 13
9013: PUSH
9014: LD_INT 14
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9021: LD_ADDR_OWVAR 37
9025: PUSH
9026: LD_VAR 0 18
9030: PUSH
9031: LD_INT 1
9033: PPUSH
9034: LD_VAR 0 18
9038: PPUSH
9039: CALL_OW 12
9043: ARRAY
9044: ST_TO_ADDR
// end ; end ;
9045: GO 8812
9047: POP
9048: POP
// veh = CreateVehicle ;
9049: LD_ADDR_VAR 0 16
9053: PUSH
9054: CALL_OW 45
9058: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9059: LD_VAR 0 16
9063: PPUSH
9064: LD_VAR 0 1
9068: PPUSH
9069: LD_INT 0
9071: PPUSH
9072: CALL_OW 49
// if vc_control = 1 then
9076: LD_OWVAR 38
9080: PUSH
9081: LD_INT 1
9083: EQUAL
9084: IFFALSE 9141
// begin hc_gallery =  ;
9086: LD_ADDR_OWVAR 33
9090: PUSH
9091: LD_STRING 
9093: ST_TO_ADDR
// hc_name =  ;
9094: LD_ADDR_OWVAR 26
9098: PUSH
9099: LD_STRING 
9101: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9102: LD_INT 0
9104: PPUSH
9105: LD_INT 3
9107: PPUSH
9108: LD_VAR 0 4
9112: PPUSH
9113: CALL_OW 380
// un = CreateHuman ;
9117: LD_ADDR_VAR 0 15
9121: PUSH
9122: CALL_OW 44
9126: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9127: LD_VAR 0 15
9131: PPUSH
9132: LD_VAR 0 16
9136: PPUSH
9137: CALL_OW 52
// end ; i = i + 1 ;
9141: LD_ADDR_VAR 0 13
9145: PUSH
9146: LD_VAR 0 13
9150: PUSH
9151: LD_INT 1
9153: PLUS
9154: ST_TO_ADDR
// end ; if nation = 3 then
9155: LD_VAR 0 5
9159: PUSH
9160: LD_INT 3
9162: EQUAL
9163: IFFALSE 9569
// begin uc_side = side ;
9165: LD_ADDR_OWVAR 20
9169: PUSH
9170: LD_VAR 0 2
9174: ST_TO_ADDR
// uc_nation = nation ;
9175: LD_ADDR_OWVAR 21
9179: PUSH
9180: LD_VAR 0 5
9184: ST_TO_ADDR
// vc_engine = vehengine ;
9185: LD_ADDR_OWVAR 39
9189: PUSH
9190: LD_VAR 0 6
9194: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
9195: LD_ADDR_OWVAR 38
9199: PUSH
9200: LD_VAR 0 7
9204: PUSH
9205: LD_INT 1
9207: PPUSH
9208: LD_VAR 0 7
9212: PPUSH
9213: CALL_OW 12
9217: ARRAY
9218: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9219: LD_ADDR_OWVAR 40
9223: PUSH
9224: LD_VAR 0 8
9228: PUSH
9229: LD_INT 1
9231: PPUSH
9232: LD_VAR 0 8
9236: PPUSH
9237: CALL_OW 12
9241: ARRAY
9242: ST_TO_ADDR
// for j = 1 to RuWeapons do
9243: LD_ADDR_VAR 0 14
9247: PUSH
9248: DOUBLE
9249: LD_INT 1
9251: DEC
9252: ST_TO_ADDR
9253: LD_VAR 0 8
9257: PUSH
9258: FOR_TO
9259: IFFALSE 9445
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9261: LD_VAR 0 8
9265: PUSH
9266: LD_VAR 0 14
9270: ARRAY
9271: PUSH
9272: LD_INT 42
9274: EQUAL
9275: PUSH
9276: LD_VAR 0 8
9280: PUSH
9281: LD_VAR 0 14
9285: ARRAY
9286: PUSH
9287: LD_INT 43
9289: EQUAL
9290: OR
9291: PUSH
9292: LD_VAR 0 8
9296: PUSH
9297: LD_VAR 0 14
9301: ARRAY
9302: PUSH
9303: LD_INT 44
9305: EQUAL
9306: OR
9307: PUSH
9308: LD_VAR 0 8
9312: PUSH
9313: LD_VAR 0 14
9317: ARRAY
9318: PUSH
9319: LD_INT 45
9321: EQUAL
9322: OR
9323: PUSH
9324: LD_VAR 0 8
9328: PUSH
9329: LD_VAR 0 14
9333: ARRAY
9334: PUSH
9335: LD_INT 49
9337: EQUAL
9338: OR
9339: IFFALSE 9376
// begin ruChassisTab = [ 24 ] ;
9341: LD_ADDR_VAR 0 17
9345: PUSH
9346: LD_INT 24
9348: PUSH
9349: EMPTY
9350: LIST
9351: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9352: LD_ADDR_OWVAR 37
9356: PUSH
9357: LD_VAR 0 17
9361: PUSH
9362: LD_INT 1
9364: PPUSH
9365: LD_VAR 0 17
9369: PPUSH
9370: CALL_OW 12
9374: ARRAY
9375: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9376: LD_VAR 0 8
9380: PUSH
9381: LD_VAR 0 14
9385: ARRAY
9386: PUSH
9387: LD_INT 46
9389: EQUAL
9390: PUSH
9391: LD_VAR 0 8
9395: PUSH
9396: LD_VAR 0 14
9400: ARRAY
9401: PUSH
9402: LD_INT 47
9404: EQUAL
9405: OR
9406: IFFALSE 9443
// begin ruChassisTab = [ 24 ] ;
9408: LD_ADDR_VAR 0 17
9412: PUSH
9413: LD_INT 24
9415: PUSH
9416: EMPTY
9417: LIST
9418: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9419: LD_ADDR_OWVAR 37
9423: PUSH
9424: LD_VAR 0 17
9428: PUSH
9429: LD_INT 1
9431: PPUSH
9432: LD_VAR 0 17
9436: PPUSH
9437: CALL_OW 12
9441: ARRAY
9442: ST_TO_ADDR
// end ; end ;
9443: GO 9258
9445: POP
9446: POP
// veh = CreateVehicle ;
9447: LD_ADDR_VAR 0 16
9451: PUSH
9452: CALL_OW 45
9456: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9457: LD_VAR 0 16
9461: PPUSH
9462: LD_VAR 0 1
9466: PPUSH
9467: LD_INT 0
9469: PPUSH
9470: CALL_OW 49
// if vc_control = 1 then
9474: LD_OWVAR 38
9478: PUSH
9479: LD_INT 1
9481: EQUAL
9482: IFFALSE 9569
// begin if uc_side = 8 then
9484: LD_OWVAR 20
9488: PUSH
9489: LD_INT 8
9491: EQUAL
9492: IFFALSE 9504
// uc_nation = 2 else
9494: LD_ADDR_OWVAR 21
9498: PUSH
9499: LD_INT 2
9501: ST_TO_ADDR
9502: GO 9514
// uc_nation = nation ;
9504: LD_ADDR_OWVAR 21
9508: PUSH
9509: LD_VAR 0 5
9513: ST_TO_ADDR
// hc_gallery =  ;
9514: LD_ADDR_OWVAR 33
9518: PUSH
9519: LD_STRING 
9521: ST_TO_ADDR
// hc_name =  ;
9522: LD_ADDR_OWVAR 26
9526: PUSH
9527: LD_STRING 
9529: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9530: LD_INT 0
9532: PPUSH
9533: LD_INT 3
9535: PPUSH
9536: LD_VAR 0 4
9540: PPUSH
9541: CALL_OW 380
// un = CreateHuman ;
9545: LD_ADDR_VAR 0 15
9549: PUSH
9550: CALL_OW 44
9554: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9555: LD_VAR 0 15
9559: PPUSH
9560: LD_VAR 0 16
9564: PPUSH
9565: CALL_OW 52
// end ; end ; end ;
9569: GO 8146
9571: POP
9572: POP
// repeat wait ( 0 0$1 ) ;
9573: LD_INT 35
9575: PPUSH
9576: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9580: LD_ADDR_VAR 0 20
9584: PUSH
9585: LD_INT 22
9587: PUSH
9588: LD_VAR 0 2
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 21
9599: PUSH
9600: LD_INT 2
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 24
9609: PUSH
9610: LD_INT 250
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 2
9619: PUSH
9620: LD_INT 34
9622: PUSH
9623: LD_INT 25
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 34
9632: PUSH
9633: LD_INT 26
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: LD_INT 34
9642: PUSH
9643: LD_INT 27
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PUSH
9650: LD_INT 34
9652: PUSH
9653: LD_INT 28
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 34
9662: PUSH
9663: LD_INT 29
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PUSH
9670: LD_INT 34
9672: PUSH
9673: LD_INT 46
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PUSH
9680: LD_INT 34
9682: PUSH
9683: LD_INT 44
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PUSH
9690: LD_INT 34
9692: PUSH
9693: LD_INT 45
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: PUSH
9700: LD_INT 34
9702: PUSH
9703: LD_INT 47
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: PPUSH
9728: CALL_OW 69
9732: ST_TO_ADDR
// if vehicleOK_list > 0 then
9733: LD_VAR 0 20
9737: PUSH
9738: LD_INT 0
9740: GREATER
9741: IFFALSE 9960
// begin for i in vehicleOK_list do
9743: LD_ADDR_VAR 0 13
9747: PUSH
9748: LD_VAR 0 20
9752: PUSH
9753: FOR_IN
9754: IFFALSE 9958
// begin if GetSide ( i ) <> side then
9756: LD_VAR 0 13
9760: PPUSH
9761: CALL_OW 255
9765: PUSH
9766: LD_VAR 0 2
9770: NONEQUAL
9771: IFFALSE 9784
// begin ComStop ( i ) ;
9773: LD_VAR 0 13
9777: PPUSH
9778: CALL_OW 141
// continue ;
9782: GO 9753
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9784: LD_ADDR_VAR 0 21
9788: PUSH
9789: LD_INT 22
9791: PUSH
9792: LD_VAR 0 11
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PPUSH
9801: CALL_OW 69
9805: PPUSH
9806: LD_VAR 0 13
9810: PPUSH
9811: CALL_OW 74
9815: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9816: LD_ADDR_VAR 0 22
9820: PUSH
9821: LD_INT 22
9823: PUSH
9824: LD_VAR 0 11
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 2
9835: PUSH
9836: LD_INT 59
9838: PUSH
9839: EMPTY
9840: LIST
9841: PUSH
9842: LD_INT 21
9844: PUSH
9845: LD_INT 1
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PUSH
9852: LD_INT 21
9854: PUSH
9855: LD_INT 2
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: EMPTY
9873: LIST
9874: PPUSH
9875: CALL_OW 69
9879: PPUSH
9880: LD_VAR 0 13
9884: PPUSH
9885: CALL_OW 74
9889: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9890: LD_VAR 0 13
9894: PPUSH
9895: LD_VAR 0 21
9899: PPUSH
9900: CALL_OW 296
9904: PUSH
9905: LD_INT 8
9907: PLUS
9908: PUSH
9909: LD_VAR 0 13
9913: PPUSH
9914: LD_VAR 0 22
9918: PPUSH
9919: CALL_OW 296
9923: LESS
9924: IFFALSE 9942
// begin ComAttackUnit ( i , target1 ) ;
9926: LD_VAR 0 13
9930: PPUSH
9931: LD_VAR 0 21
9935: PPUSH
9936: CALL_OW 115
// end else
9940: GO 9956
// begin ComAttackUnit ( i , target2 ) ;
9942: LD_VAR 0 13
9946: PPUSH
9947: LD_VAR 0 22
9951: PPUSH
9952: CALL_OW 115
// end ; end ;
9956: GO 9753
9958: POP
9959: POP
// end ; until vehicleOK_list = 0 ;
9960: LD_VAR 0 20
9964: PUSH
9965: LD_INT 0
9967: EQUAL
9968: IFFALSE 9573
// end ;
9970: LD_VAR 0 12
9974: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
9975: LD_INT 0
9977: PPUSH
9978: PPUSH
9979: PPUSH
9980: PPUSH
9981: PPUSH
9982: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
9983: LD_ADDR_VAR 0 6
9987: PUSH
9988: LD_INT 22
9990: PUSH
9991: LD_VAR 0 1
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: LD_INT 34
10002: PUSH
10003: LD_INT 29
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PPUSH
10014: CALL_OW 69
10018: ST_TO_ADDR
// if veh_list = 0 then
10019: LD_VAR 0 6
10023: PUSH
10024: LD_INT 0
10026: EQUAL
10027: IFFALSE 10031
// exit ;
10029: GO 10236
// if veh_list > 0 then
10031: LD_VAR 0 6
10035: PUSH
10036: LD_INT 0
10038: GREATER
10039: IFFALSE 10236
// begin for i in veh_List do
10041: LD_ADDR_VAR 0 4
10045: PUSH
10046: LD_VAR 0 6
10050: PUSH
10051: FOR_IN
10052: IFFALSE 10234
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10054: LD_ADDR_VAR 0 7
10058: PUSH
10059: LD_INT 22
10061: PUSH
10062: LD_VAR 0 2
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: LD_INT 24
10073: PUSH
10074: LD_INT 250
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: PUSH
10081: LD_INT 2
10083: PUSH
10084: LD_INT 59
10086: PUSH
10087: EMPTY
10088: LIST
10089: PUSH
10090: LD_INT 21
10092: PUSH
10093: LD_INT 1
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 21
10102: PUSH
10103: LD_INT 2
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: LIST
10120: PUSH
10121: EMPTY
10122: LIST
10123: PPUSH
10124: CALL_OW 69
10128: PPUSH
10129: LD_VAR 0 4
10133: PPUSH
10134: CALL_OW 74
10138: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
10139: LD_VAR 0 4
10143: PPUSH
10144: LD_VAR 0 7
10148: PPUSH
10149: CALL_OW 115
// if not HasTask ( i ) then
10153: LD_VAR 0 4
10157: PPUSH
10158: CALL_OW 314
10162: NOT
10163: IFFALSE 10232
// begin wait ( 0 0$0.1 ) ;
10165: LD_INT 4
10167: PPUSH
10168: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
10172: LD_ADDR_VAR 0 8
10176: PUSH
10177: LD_INT 22
10179: PUSH
10180: LD_VAR 0 2
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: PUSH
10189: LD_INT 24
10191: PUSH
10192: LD_INT 250
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PPUSH
10203: CALL_OW 69
10207: PPUSH
10208: LD_VAR 0 4
10212: PPUSH
10213: CALL_OW 74
10217: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
10218: LD_VAR 0 4
10222: PPUSH
10223: LD_VAR 0 8
10227: PPUSH
10228: CALL_OW 115
// end ; end ;
10232: GO 10051
10234: POP
10235: POP
// end ; end ; end_of_file
10236: LD_VAR 0 3
10240: RET
// every 0 0$1 do
10241: GO 10243
10243: DISABLE
// begin enable ;
10244: ENABLE
// IntBazooka ( 7 , 1 ) ;
10245: LD_INT 7
10247: PPUSH
10248: LD_INT 1
10250: PPUSH
10251: CALL 6681 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10255: LD_INT 8
10257: PPUSH
10258: LD_INT 1
10260: PPUSH
10261: CALL 9975 0 2
// end ;
10265: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10266: LD_INT 22
10268: PUSH
10269: LD_INT 3
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 21
10278: PUSH
10279: LD_INT 2
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: LD_INT 50
10288: PUSH
10289: EMPTY
10290: LIST
10291: PUSH
10292: LD_INT 2
10294: PUSH
10295: LD_INT 34
10297: PUSH
10298: LD_INT 46
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: LD_INT 34
10307: PUSH
10308: LD_INT 44
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PUSH
10315: LD_INT 34
10317: PUSH
10318: LD_INT 45
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PUSH
10325: LD_INT 34
10327: PUSH
10328: LD_INT 47
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: PPUSH
10348: CALL_OW 69
10352: PUSH
10353: LD_INT 0
10355: GREATER
10356: PUSH
10357: LD_INT 22
10359: PUSH
10360: LD_INT 3
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 21
10369: PUSH
10370: LD_INT 2
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 50
10379: PUSH
10380: EMPTY
10381: LIST
10382: PUSH
10383: LD_INT 34
10385: PUSH
10386: LD_INT 49
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: PPUSH
10399: CALL_OW 69
10403: PUSH
10404: LD_INT 0
10406: GREATER
10407: AND
10408: IFFALSE 10580
10410: GO 10412
10412: DISABLE
10413: LD_INT 0
10415: PPUSH
10416: PPUSH
// begin enable ;
10417: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10418: LD_ADDR_VAR 0 1
10422: PUSH
10423: LD_INT 22
10425: PUSH
10426: LD_INT 3
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: PUSH
10433: LD_INT 21
10435: PUSH
10436: LD_INT 2
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: PUSH
10443: LD_INT 50
10445: PUSH
10446: EMPTY
10447: LIST
10448: PUSH
10449: LD_INT 2
10451: PUSH
10452: LD_INT 34
10454: PUSH
10455: LD_INT 46
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: LD_INT 34
10464: PUSH
10465: LD_INT 44
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 34
10474: PUSH
10475: LD_INT 45
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 34
10484: PUSH
10485: LD_INT 47
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: PPUSH
10505: CALL_OW 69
10509: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10510: LD_ADDR_VAR 0 2
10514: PUSH
10515: LD_INT 22
10517: PUSH
10518: LD_INT 3
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PUSH
10525: LD_INT 21
10527: PUSH
10528: LD_INT 2
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 50
10537: PUSH
10538: EMPTY
10539: LIST
10540: PUSH
10541: LD_INT 34
10543: PUSH
10544: LD_INT 49
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: PPUSH
10557: CALL_OW 69
10561: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10562: LD_VAR 0 2
10566: PPUSH
10567: LD_VAR 0 1
10571: PUSH
10572: LD_INT 1
10574: ARRAY
10575: PPUSH
10576: CALL_OW 112
// end ; end_of_file
10580: PPOPN 2
10582: END
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
10583: LD_EXP 38
10587: PUSH
10588: LD_INT 1
10590: EQUAL
10591: IFFALSE 11493
10593: GO 10595
10595: DISABLE
10596: LD_INT 0
10598: PPUSH
10599: PPUSH
10600: PPUSH
// begin m1 := false ;
10601: LD_ADDR_VAR 0 1
10605: PUSH
10606: LD_INT 0
10608: ST_TO_ADDR
// m2 := false ;
10609: LD_ADDR_VAR 0 2
10613: PUSH
10614: LD_INT 0
10616: ST_TO_ADDR
// m3 := false ;
10617: LD_ADDR_VAR 0 3
10621: PUSH
10622: LD_INT 0
10624: ST_TO_ADDR
// Say ( JMM , D9b-JMM-1 ) ;
10625: LD_EXP 1
10629: PPUSH
10630: LD_STRING D9b-JMM-1
10632: PPUSH
10633: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10637: LD_EXP 15
10641: PPUSH
10642: LD_STRING D9b-Pow-1
10644: PPUSH
10645: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10649: LD_EXP 1
10653: PPUSH
10654: LD_STRING D9b-JMM-2
10656: PPUSH
10657: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10661: LD_EXP 15
10665: PPUSH
10666: LD_STRING D9b-Pow-2
10668: PPUSH
10669: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10673: LD_EXP 1
10677: PPUSH
10678: LD_STRING D9b-JMM-3
10680: PPUSH
10681: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10685: LD_EXP 15
10689: PPUSH
10690: LD_STRING D9b-Pow-3
10692: PPUSH
10693: CALL_OW 94
// if tick <= 60 60$00 then
10697: LD_OWVAR 1
10701: PUSH
10702: LD_INT 126000
10704: LESSEQUAL
10705: IFFALSE 10714
// SetAchievement ( ACH_ASPEED_13 ) ;
10707: LD_STRING ACH_ASPEED_13
10709: PPUSH
10710: CALL_OW 543
// if burlakStatus = 1 then
10714: LD_EXP 28
10718: PUSH
10719: LD_INT 1
10721: EQUAL
10722: IFFALSE 10744
// begin m1 := true ;
10724: LD_ADDR_VAR 0 1
10728: PUSH
10729: LD_INT 1
10731: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
10732: LD_STRING Burlak
10734: PPUSH
10735: LD_INT 1
10737: PPUSH
10738: CALL_OW 101
// end else
10742: GO 10755
// begin AddMedal ( Burlak , - 1 ) ;
10744: LD_STRING Burlak
10746: PPUSH
10747: LD_INT 1
10749: NEG
10750: PPUSH
10751: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10755: LD_EXP 2
10759: PPUSH
10760: CALL_OW 302
10764: IFFALSE 10786
// begin m2 := true ;
10766: LD_ADDR_VAR 0 2
10770: PUSH
10771: LD_INT 1
10773: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
10774: LD_STRING Stevens
10776: PPUSH
10777: LD_INT 1
10779: PPUSH
10780: CALL_OW 101
// end else
10784: GO 10797
// begin AddMedal ( Stevens , - 1 ) ;
10786: LD_STRING Stevens
10788: PPUSH
10789: LD_INT 1
10791: NEG
10792: PPUSH
10793: CALL_OW 101
// end ; if radarOnSpot = 1 then
10797: LD_EXP 30
10801: PUSH
10802: LD_INT 1
10804: EQUAL
10805: IFFALSE 10827
// begin m3 := true ;
10807: LD_ADDR_VAR 0 3
10811: PUSH
10812: LD_INT 1
10814: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
10815: LD_STRING Observation
10817: PPUSH
10818: LD_INT 1
10820: PPUSH
10821: CALL_OW 101
// end else
10825: GO 10838
// begin AddMedal ( Observation , - 1 ) ;
10827: LD_STRING Observation
10829: PPUSH
10830: LD_INT 1
10832: NEG
10833: PPUSH
10834: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
10838: LD_VAR 0 1
10842: PUSH
10843: LD_VAR 0 2
10847: AND
10848: PUSH
10849: LD_VAR 0 3
10853: AND
10854: PUSH
10855: LD_OWVAR 67
10859: PUSH
10860: LD_INT 3
10862: EQUAL
10863: AND
10864: IFFALSE 10876
// SetAchievementEX ( ACH_AMER , 13 ) ;
10866: LD_STRING ACH_AMER
10868: PPUSH
10869: LD_INT 13
10871: PPUSH
10872: CALL_OW 564
// GiveMedals ( MAIN ) ;
10876: LD_STRING MAIN
10878: PPUSH
10879: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
10883: LD_EXP 28
10887: PPUSH
10888: LD_STRING 13_BurlakStatus_1
10890: PPUSH
10891: CALL_OW 39
// if IsLive ( Stevens ) then
10895: LD_EXP 2
10899: PPUSH
10900: CALL_OW 300
10904: IFFALSE 10918
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
10906: LD_INT 1
10908: PPUSH
10909: LD_STRING 13_StevensStatus_1
10911: PPUSH
10912: CALL_OW 39
10916: GO 10928
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
10918: LD_INT 0
10920: PPUSH
10921: LD_STRING 13_StevensStatus_1
10923: PPUSH
10924: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
10928: LD_INT 22
10930: PUSH
10931: LD_INT 1
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 21
10940: PUSH
10941: LD_INT 1
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PUSH
10948: LD_INT 2
10950: PUSH
10951: LD_INT 25
10953: PUSH
10954: LD_INT 1
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PUSH
10961: LD_INT 25
10963: PUSH
10964: LD_INT 2
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 25
10973: PUSH
10974: LD_INT 3
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 25
10983: PUSH
10984: LD_INT 4
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: LD_INT 25
10993: PUSH
10994: LD_INT 5
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: PUSH
11001: LD_INT 25
11003: PUSH
11004: LD_INT 8
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: LIST
11024: PPUSH
11025: CALL_OW 69
11029: PPUSH
11030: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11034: LD_EXP 1
11038: PPUSH
11039: LD_EXP 34
11043: PUSH
11044: LD_STRING JMM
11046: STR
11047: PPUSH
11048: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
11052: LD_EXP 8
11056: PPUSH
11057: LD_EXP 34
11061: PUSH
11062: LD_STRING Brown
11064: STR
11065: PPUSH
11066: CALL 6989 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11070: LD_EXP 4
11074: PPUSH
11075: LD_EXP 34
11079: PUSH
11080: LD_STRING Donaldson
11082: STR
11083: PPUSH
11084: CALL 6989 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11088: LD_EXP 5
11092: PPUSH
11093: LD_EXP 34
11097: PUSH
11098: LD_STRING Bobby
11100: STR
11101: PPUSH
11102: CALL 6989 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11106: LD_EXP 6
11110: PPUSH
11111: LD_EXP 34
11115: PUSH
11116: LD_STRING Cyrus
11118: STR
11119: PPUSH
11120: CALL 6989 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11124: LD_EXP 3
11128: PPUSH
11129: LD_EXP 34
11133: PUSH
11134: LD_STRING Lisa
11136: STR
11137: PPUSH
11138: CALL 6989 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
11142: LD_EXP 13
11146: PPUSH
11147: LD_EXP 34
11151: PUSH
11152: LD_STRING Frank
11154: STR
11155: PPUSH
11156: CALL 6989 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11160: LD_EXP 14
11164: PPUSH
11165: LD_EXP 34
11169: PUSH
11170: LD_STRING Kikuchi
11172: STR
11173: PPUSH
11174: CALL 6989 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
11178: LD_EXP 10
11182: PPUSH
11183: LD_EXP 34
11187: PUSH
11188: LD_STRING Houten
11190: STR
11191: PPUSH
11192: CALL 6989 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
11196: LD_EXP 12
11200: PPUSH
11201: LD_EXP 34
11205: PUSH
11206: LD_STRING Gary
11208: STR
11209: PPUSH
11210: CALL 6989 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
11214: LD_EXP 11
11218: PPUSH
11219: LD_EXP 34
11223: PUSH
11224: LD_STRING Cornell
11226: STR
11227: PPUSH
11228: CALL 6989 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
11232: LD_EXP 7
11236: PPUSH
11237: LD_EXP 34
11241: PUSH
11242: LD_STRING Denis
11244: STR
11245: PPUSH
11246: CALL 6989 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11250: LD_EXP 9
11254: PPUSH
11255: LD_EXP 34
11259: PUSH
11260: LD_STRING Gladstone
11262: STR
11263: PPUSH
11264: CALL 6989 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
11268: LD_EXP 2
11272: PPUSH
11273: LD_EXP 34
11277: PUSH
11278: LD_STRING Stevens
11280: STR
11281: PPUSH
11282: CALL 6989 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
11286: LD_INT 50
11288: PUSH
11289: EMPTY
11290: LIST
11291: PUSH
11292: LD_INT 22
11294: PUSH
11295: LD_INT 1
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PUSH
11302: LD_INT 21
11304: PUSH
11305: LD_INT 1
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PUSH
11312: LD_INT 2
11314: PUSH
11315: LD_INT 25
11317: PUSH
11318: LD_INT 1
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 25
11327: PUSH
11328: LD_INT 2
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: LD_INT 25
11337: PUSH
11338: LD_INT 3
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: PUSH
11345: LD_INT 25
11347: PUSH
11348: LD_INT 4
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: PUSH
11355: LD_INT 25
11357: PUSH
11358: LD_INT 5
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 25
11367: PUSH
11368: LD_INT 8
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: PPUSH
11390: CALL_OW 69
11394: PUSH
11395: LD_EXP 1
11399: PUSH
11400: LD_EXP 8
11404: PUSH
11405: LD_EXP 4
11409: PUSH
11410: LD_EXP 5
11414: PUSH
11415: LD_EXP 6
11419: PUSH
11420: LD_EXP 3
11424: PUSH
11425: LD_EXP 13
11429: PUSH
11430: LD_EXP 9
11434: PUSH
11435: LD_EXP 14
11439: PUSH
11440: LD_EXP 7
11444: PUSH
11445: LD_EXP 10
11449: PUSH
11450: LD_EXP 12
11454: PUSH
11455: LD_EXP 11
11459: PUSH
11460: LD_EXP 2
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: DIFF
11481: PPUSH
11482: LD_STRING 13_other_survivors
11484: PPUSH
11485: CALL_OW 38
// YouWin ;
11489: CALL_OW 103
// end ; end_of_file
11493: PPOPN 3
11495: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do var i , tmp , yourSiberite ;
11496: LD_EXP 32
11500: PUSH
11501: LD_INT 2
11503: EQUAL
11504: PUSH
11505: LD_INT 34
11507: PUSH
11508: LD_INT 8
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PPUSH
11515: CALL_OW 69
11519: NOT
11520: AND
11521: IFFALSE 11657
11523: GO 11525
11525: DISABLE
11526: LD_INT 0
11528: PPUSH
11529: PPUSH
11530: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11531: LD_ADDR_VAR 0 2
11535: PUSH
11536: LD_INT 22
11538: PUSH
11539: LD_INT 1
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: PUSH
11546: LD_INT 21
11548: PUSH
11549: LD_INT 3
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 2
11558: PUSH
11559: LD_INT 30
11561: PUSH
11562: LD_INT 0
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 30
11571: PUSH
11572: LD_INT 1
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: LIST
11588: PPUSH
11589: CALL_OW 69
11593: ST_TO_ADDR
// for i in tmp do
11594: LD_ADDR_VAR 0 1
11598: PUSH
11599: LD_VAR 0 2
11603: PUSH
11604: FOR_IN
11605: IFFALSE 11638
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11607: LD_ADDR_VAR 0 3
11611: PUSH
11612: LD_VAR 0 3
11616: PUSH
11617: LD_VAR 0 1
11621: PPUSH
11622: CALL_OW 274
11626: PPUSH
11627: LD_INT 3
11629: PPUSH
11630: CALL_OW 275
11634: PLUS
11635: ST_TO_ADDR
11636: GO 11604
11638: POP
11639: POP
// if yourSiberite < 79 then
11640: LD_VAR 0 3
11644: PUSH
11645: LD_INT 79
11647: LESS
11648: IFFALSE 11657
// YouLost ( siberite ) ;
11650: LD_STRING siberite
11652: PPUSH
11653: CALL_OW 104
// end ; end_of_file
11657: PPOPN 3
11659: END
// every 8 8$0 + 7 7$0 do
11660: GO 11662
11662: DISABLE
// begin enable ;
11663: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 1 , 3 ) , 0 , 0 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11664: LD_INT 8
11666: PPUSH
11667: LD_INT 2
11669: PPUSH
11670: LD_INT 1
11672: PPUSH
11673: LD_INT 3
11675: PPUSH
11676: CALL_OW 12
11680: PPUSH
11681: LD_INT 0
11683: PPUSH
11684: LD_INT 0
11686: PPUSH
11687: LD_INT 2
11689: PUSH
11690: LD_INT 3
11692: PUSH
11693: LD_INT 4
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: LIST
11700: PUSH
11701: LD_OWVAR 67
11705: ARRAY
11706: PPUSH
11707: LD_INT 0
11709: PPUSH
11710: LD_INT 10
11712: PPUSH
11713: LD_INT 8
11715: PUSH
11716: LD_INT 9
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 1
11725: PPUSH
11726: LD_INT 2
11728: PPUSH
11729: CALL_OW 12
11733: ARRAY
11734: PPUSH
11735: LD_INT 12
11737: PPUSH
11738: LD_INT 1
11740: PPUSH
11741: CALL 7029 0 11
// end ;
11745: END
// every 8 8$00 + 7 7$0 do var i , veh , xy ;
11746: GO 11748
11748: DISABLE
11749: LD_INT 0
11751: PPUSH
11752: PPUSH
11753: PPUSH
// begin enable ;
11754: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11755: LD_ADDR_EXP 33
11759: PUSH
11760: LD_EXP 33
11764: PUSH
11765: LD_INT 1
11767: PLUS
11768: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
11769: LD_INT 22
11771: PUSH
11772: LD_INT 8
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PUSH
11779: LD_INT 3
11781: PUSH
11782: LD_INT 58
11784: PUSH
11785: EMPTY
11786: LIST
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: PUSH
11792: LD_INT 34
11794: PUSH
11795: LD_INT 31
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: LIST
11806: PPUSH
11807: CALL_OW 69
11811: PUSH
11812: LD_INT 2
11814: LESS
11815: IFFALSE 12055
// begin uc_side := 8 ;
11817: LD_ADDR_OWVAR 20
11821: PUSH
11822: LD_INT 8
11824: ST_TO_ADDR
// uc_nation := 2 ;
11825: LD_ADDR_OWVAR 21
11829: PUSH
11830: LD_INT 2
11832: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
11833: LD_INT 14
11835: PPUSH
11836: LD_INT 3
11838: PPUSH
11839: LD_INT 1
11841: PPUSH
11842: LD_INT 31
11844: PPUSH
11845: LD_INT 100
11847: PPUSH
11848: CALL 35083 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
11852: LD_ADDR_VAR 0 1
11856: PUSH
11857: DOUBLE
11858: LD_INT 22
11860: PUSH
11861: LD_INT 8
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PUSH
11868: LD_INT 3
11870: PUSH
11871: LD_INT 58
11873: PUSH
11874: EMPTY
11875: LIST
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: LD_INT 34
11883: PUSH
11884: LD_INT 31
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: LIST
11895: PPUSH
11896: CALL_OW 69
11900: PUSH
11901: LD_INT 1
11903: PLUS
11904: DEC
11905: ST_TO_ADDR
11906: LD_INT 2
11908: PUSH
11909: FOR_TO
11910: IFFALSE 12053
// begin veh := CreateVehicle ;
11912: LD_ADDR_VAR 0 2
11916: PUSH
11917: CALL_OW 45
11921: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11922: LD_VAR 0 2
11926: PPUSH
11927: LD_INT 5
11929: PPUSH
11930: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
11934: LD_ADDR_VAR 0 3
11938: PUSH
11939: LD_INT 181
11941: PUSH
11942: LD_INT 105
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: PUSH
11949: LD_INT 137
11951: PUSH
11952: LD_INT 6
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_VAR 0 1
11967: PUSH
11968: LD_INT 2
11970: MOD
11971: PUSH
11972: LD_INT 1
11974: PLUS
11975: ARRAY
11976: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
11977: LD_VAR 0 2
11981: PPUSH
11982: LD_VAR 0 3
11986: PUSH
11987: LD_INT 1
11989: ARRAY
11990: PPUSH
11991: LD_VAR 0 3
11995: PUSH
11996: LD_INT 2
11998: ARRAY
11999: PPUSH
12000: LD_INT 12
12002: PPUSH
12003: LD_INT 0
12005: PPUSH
12006: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 ] [ Difficulty ] ) ;
12010: LD_INT 0
12012: PPUSH
12013: LD_INT 7
12015: PUSH
12016: LD_INT 9
12018: PUSH
12019: LD_INT 10
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: LIST
12026: PUSH
12027: LD_OWVAR 67
12031: ARRAY
12032: PPUSH
12033: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12037: CALL_OW 44
12041: PPUSH
12042: LD_VAR 0 2
12046: PPUSH
12047: CALL_OW 52
// end ;
12051: GO 11909
12053: POP
12054: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 10 ) ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
12055: LD_INT 8
12057: PUSH
12058: LD_INT 9
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: LD_INT 1
12067: PPUSH
12068: LD_INT 2
12070: PPUSH
12071: CALL_OW 12
12075: ARRAY
12076: PPUSH
12077: LD_INT 8
12079: PPUSH
12080: LD_INT 4
12082: PPUSH
12083: LD_INT 6
12085: PPUSH
12086: CALL_OW 12
12090: PUSH
12091: LD_INT 6
12093: PPUSH
12094: LD_INT 9
12096: PPUSH
12097: CALL_OW 12
12101: PUSH
12102: LD_INT 7
12104: PPUSH
12105: LD_INT 10
12107: PPUSH
12108: CALL_OW 12
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: LIST
12117: PUSH
12118: LD_OWVAR 67
12122: ARRAY
12123: PPUSH
12124: LD_INT 10
12126: PPUSH
12127: LD_INT 2
12129: PPUSH
12130: LD_INT 3
12132: PPUSH
12133: LD_INT 5
12135: PUSH
12136: LD_INT 2
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PPUSH
12143: EMPTY
12144: PPUSH
12145: LD_INT 25
12147: PUSH
12148: LD_INT 26
12150: PUSH
12151: LD_INT 27
12153: PUSH
12154: LD_INT 28
12156: PUSH
12157: LD_INT 29
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: PPUSH
12167: EMPTY
12168: PPUSH
12169: LD_INT 1
12171: PPUSH
12172: CALL 8097 0 11
// end ;
12176: PPOPN 3
12178: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do var i , veh ;
12179: LD_EXP 33
12183: PUSH
12184: LD_INT 4
12186: GREATEREQUAL
12187: IFFALSE 12527
12189: GO 12191
12191: DISABLE
12192: LD_INT 0
12194: PPUSH
12195: PPUSH
// begin enable ;
12196: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
12197: LD_ADDR_EXP 33
12201: PUSH
12202: LD_EXP 33
12206: PUSH
12207: LD_INT 1
12209: PLUS
12210: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12211: LD_INT 22
12213: PUSH
12214: LD_INT 8
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: LD_INT 3
12223: PUSH
12224: LD_INT 58
12226: PUSH
12227: EMPTY
12228: LIST
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 34
12236: PUSH
12237: LD_INT 31
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: LIST
12248: PPUSH
12249: CALL_OW 69
12253: PUSH
12254: LD_INT 2
12256: LESS
12257: IFFALSE 12442
// begin uc_side := 8 ;
12259: LD_ADDR_OWVAR 20
12263: PUSH
12264: LD_INT 8
12266: ST_TO_ADDR
// uc_nation := 2 ;
12267: LD_ADDR_OWVAR 21
12271: PUSH
12272: LD_INT 2
12274: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12275: LD_INT 14
12277: PPUSH
12278: LD_INT 3
12280: PPUSH
12281: LD_INT 1
12283: PPUSH
12284: LD_INT 31
12286: PPUSH
12287: LD_INT 100
12289: PPUSH
12290: CALL 35083 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12294: LD_ADDR_VAR 0 1
12298: PUSH
12299: DOUBLE
12300: LD_INT 22
12302: PUSH
12303: LD_INT 8
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 3
12312: PUSH
12313: LD_INT 58
12315: PUSH
12316: EMPTY
12317: LIST
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 34
12325: PUSH
12326: LD_INT 31
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: LIST
12337: PPUSH
12338: CALL_OW 69
12342: PUSH
12343: LD_INT 1
12345: PLUS
12346: DEC
12347: ST_TO_ADDR
12348: LD_INT 2
12350: PUSH
12351: FOR_TO
12352: IFFALSE 12440
// begin veh := CreateVehicle ;
12354: LD_ADDR_VAR 0 2
12358: PUSH
12359: CALL_OW 45
12363: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12364: LD_VAR 0 2
12368: PPUSH
12369: LD_INT 5
12371: PPUSH
12372: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12376: LD_VAR 0 2
12380: PPUSH
12381: LD_INT 181
12383: PPUSH
12384: LD_INT 105
12386: PPUSH
12387: LD_INT 12
12389: PPUSH
12390: LD_INT 0
12392: PPUSH
12393: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
12397: LD_INT 0
12399: PPUSH
12400: LD_INT 8
12402: PUSH
12403: LD_INT 9
12405: PUSH
12406: LD_INT 10
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: LIST
12413: PUSH
12414: LD_OWVAR 67
12418: ARRAY
12419: PPUSH
12420: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12424: CALL_OW 44
12428: PPUSH
12429: LD_VAR 0 2
12433: PPUSH
12434: CALL_OW 52
// end ;
12438: GO 12351
12440: POP
12441: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
12442: LD_INT 8
12444: PUSH
12445: LD_INT 9
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PUSH
12452: LD_INT 1
12454: PPUSH
12455: LD_INT 2
12457: PPUSH
12458: CALL_OW 12
12462: ARRAY
12463: PPUSH
12464: LD_INT 8
12466: PPUSH
12467: LD_INT 1
12469: PUSH
12470: LD_INT 2
12472: PUSH
12473: LD_INT 3
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: LIST
12480: PUSH
12481: LD_OWVAR 67
12485: ARRAY
12486: PPUSH
12487: LD_INT 10
12489: PPUSH
12490: LD_INT 3
12492: PPUSH
12493: LD_INT 3
12495: PPUSH
12496: LD_INT 1
12498: PUSH
12499: LD_INT 1
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PPUSH
12506: LD_INT 47
12508: PUSH
12509: LD_INT 47
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PPUSH
12516: EMPTY
12517: PPUSH
12518: EMPTY
12519: PPUSH
12520: LD_INT 1
12522: PPUSH
12523: CALL 8097 0 11
// end ;
12527: PPOPN 2
12529: END
// every 1 1$0 trigger eventVar2 = 1 do var i , veh ;
12530: LD_EXP 36
12534: PUSH
12535: LD_INT 1
12537: EQUAL
12538: IFFALSE 12875
12540: GO 12542
12542: DISABLE
12543: LD_INT 0
12545: PPUSH
12546: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12547: LD_INT 22
12549: PUSH
12550: LD_INT 8
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: PUSH
12557: LD_INT 3
12559: PUSH
12560: LD_INT 58
12562: PUSH
12563: EMPTY
12564: LIST
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PUSH
12570: LD_INT 34
12572: PUSH
12573: LD_INT 31
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: LIST
12584: PPUSH
12585: CALL_OW 69
12589: PUSH
12590: LD_INT 2
12592: LESS
12593: IFFALSE 12778
// begin uc_side := 8 ;
12595: LD_ADDR_OWVAR 20
12599: PUSH
12600: LD_INT 8
12602: ST_TO_ADDR
// uc_nation := 2 ;
12603: LD_ADDR_OWVAR 21
12607: PUSH
12608: LD_INT 2
12610: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12611: LD_INT 14
12613: PPUSH
12614: LD_INT 3
12616: PPUSH
12617: LD_INT 1
12619: PPUSH
12620: LD_INT 31
12622: PPUSH
12623: LD_INT 100
12625: PPUSH
12626: CALL 35083 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12630: LD_ADDR_VAR 0 1
12634: PUSH
12635: DOUBLE
12636: LD_INT 22
12638: PUSH
12639: LD_INT 8
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: PUSH
12646: LD_INT 3
12648: PUSH
12649: LD_INT 58
12651: PUSH
12652: EMPTY
12653: LIST
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: PUSH
12659: LD_INT 34
12661: PUSH
12662: LD_INT 31
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: LIST
12673: PPUSH
12674: CALL_OW 69
12678: PUSH
12679: LD_INT 1
12681: PLUS
12682: DEC
12683: ST_TO_ADDR
12684: LD_INT 2
12686: PUSH
12687: FOR_TO
12688: IFFALSE 12776
// begin veh := CreateVehicle ;
12690: LD_ADDR_VAR 0 2
12694: PUSH
12695: CALL_OW 45
12699: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12700: LD_VAR 0 2
12704: PPUSH
12705: LD_INT 5
12707: PPUSH
12708: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12712: LD_VAR 0 2
12716: PPUSH
12717: LD_INT 181
12719: PPUSH
12720: LD_INT 105
12722: PPUSH
12723: LD_INT 12
12725: PPUSH
12726: LD_INT 0
12728: PPUSH
12729: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
12733: LD_INT 0
12735: PPUSH
12736: LD_INT 8
12738: PUSH
12739: LD_INT 9
12741: PUSH
12742: LD_INT 10
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: LIST
12749: PUSH
12750: LD_OWVAR 67
12754: ARRAY
12755: PPUSH
12756: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12760: CALL_OW 44
12764: PPUSH
12765: LD_VAR 0 2
12769: PPUSH
12770: CALL_OW 52
// end ;
12774: GO 12687
12776: POP
12777: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 5 , 7 , 8 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
12778: LD_INT 8
12780: PUSH
12781: LD_INT 9
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: PUSH
12788: LD_INT 1
12790: PPUSH
12791: LD_INT 2
12793: PPUSH
12794: CALL_OW 12
12798: ARRAY
12799: PPUSH
12800: LD_INT 3
12802: PPUSH
12803: LD_INT 5
12805: PUSH
12806: LD_INT 7
12808: PUSH
12809: LD_INT 8
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: LIST
12816: PUSH
12817: LD_OWVAR 67
12821: ARRAY
12822: PPUSH
12823: LD_INT 10
12825: PPUSH
12826: LD_INT 3
12828: PPUSH
12829: LD_INT 3
12831: PPUSH
12832: LD_INT 3
12834: PUSH
12835: LD_INT 3
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PPUSH
12842: LD_INT 46
12844: PUSH
12845: LD_INT 44
12847: PUSH
12848: LD_INT 45
12850: PUSH
12851: LD_INT 47
12853: PUSH
12854: LD_INT 49
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: PPUSH
12864: EMPTY
12865: PPUSH
12866: EMPTY
12867: PPUSH
12868: LD_INT 1
12870: PPUSH
12871: CALL 8097 0 11
// end ; end_of_file
12875: PPOPN 2
12877: END
// every 1 1$0 do
12878: GO 12880
12880: DISABLE
// begin enable ;
12881: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
12882: LD_INT 3
12884: PPUSH
12885: LD_INT 5
12887: PPUSH
12888: CALL_OW 12
12892: PPUSH
12893: LD_INT 13
12895: PPUSH
12896: LD_INT 1
12898: PPUSH
12899: CALL_OW 55
// end ; end_of_file
12903: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12904: LD_INT 0
12906: PPUSH
// ar_miner := 81 ;
12907: LD_ADDR_EXP 50
12911: PUSH
12912: LD_INT 81
12914: ST_TO_ADDR
// ar_crane := 88 ;
12915: LD_ADDR_EXP 49
12919: PUSH
12920: LD_INT 88
12922: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12923: LD_ADDR_EXP 44
12927: PUSH
12928: LD_INT 89
12930: ST_TO_ADDR
// us_hack := 99 ;
12931: LD_ADDR_EXP 45
12935: PUSH
12936: LD_INT 99
12938: ST_TO_ADDR
// us_artillery := 97 ;
12939: LD_ADDR_EXP 46
12943: PUSH
12944: LD_INT 97
12946: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12947: LD_ADDR_EXP 47
12951: PUSH
12952: LD_INT 91
12954: ST_TO_ADDR
// ar_mortar := 92 ;
12955: LD_ADDR_EXP 48
12959: PUSH
12960: LD_INT 92
12962: ST_TO_ADDR
// ru_radar := 98 ;
12963: LD_ADDR_EXP 43
12967: PUSH
12968: LD_INT 98
12970: ST_TO_ADDR
// tech_Artillery := 80 ;
12971: LD_ADDR_EXP 51
12975: PUSH
12976: LD_INT 80
12978: ST_TO_ADDR
// tech_RadMat := 81 ;
12979: LD_ADDR_EXP 52
12983: PUSH
12984: LD_INT 81
12986: ST_TO_ADDR
// tech_BasicTools := 82 ;
12987: LD_ADDR_EXP 53
12991: PUSH
12992: LD_INT 82
12994: ST_TO_ADDR
// tech_Cargo := 83 ;
12995: LD_ADDR_EXP 54
12999: PUSH
13000: LD_INT 83
13002: ST_TO_ADDR
// tech_Track := 84 ;
13003: LD_ADDR_EXP 55
13007: PUSH
13008: LD_INT 84
13010: ST_TO_ADDR
// tech_Crane := 85 ;
13011: LD_ADDR_EXP 56
13015: PUSH
13016: LD_INT 85
13018: ST_TO_ADDR
// tech_Bulldozer := 86 ;
13019: LD_ADDR_EXP 57
13023: PUSH
13024: LD_INT 86
13026: ST_TO_ADDR
// tech_Hovercraft := 87 ;
13027: LD_ADDR_EXP 58
13031: PUSH
13032: LD_INT 87
13034: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
13035: LD_ADDR_EXP 59
13039: PUSH
13040: LD_INT 88
13042: ST_TO_ADDR
// class_mastodont := 31 ;
13043: LD_ADDR_EXP 60
13047: PUSH
13048: LD_INT 31
13050: ST_TO_ADDR
// class_horse := 21 ;
13051: LD_ADDR_EXP 61
13055: PUSH
13056: LD_INT 21
13058: ST_TO_ADDR
// end ;
13059: LD_VAR 0 1
13063: RET
// every 1 do
13064: GO 13066
13066: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
13067: CALL 12904 0 0
13071: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13072: LD_INT 0
13074: PPUSH
// if p2 = 100 then
13075: LD_VAR 0 2
13079: PUSH
13080: LD_INT 100
13082: EQUAL
13083: IFFALSE 14032
// begin if not StreamModeActive then
13085: LD_EXP 62
13089: NOT
13090: IFFALSE 13100
// StreamModeActive := true ;
13092: LD_ADDR_EXP 62
13096: PUSH
13097: LD_INT 1
13099: ST_TO_ADDR
// if p3 = 0 then
13100: LD_VAR 0 3
13104: PUSH
13105: LD_INT 0
13107: EQUAL
13108: IFFALSE 13114
// InitStreamMode ;
13110: CALL 14192 0 0
// if p3 = 1 then
13114: LD_VAR 0 3
13118: PUSH
13119: LD_INT 1
13121: EQUAL
13122: IFFALSE 13132
// sRocket := true ;
13124: LD_ADDR_EXP 67
13128: PUSH
13129: LD_INT 1
13131: ST_TO_ADDR
// if p3 = 2 then
13132: LD_VAR 0 3
13136: PUSH
13137: LD_INT 2
13139: EQUAL
13140: IFFALSE 13150
// sSpeed := true ;
13142: LD_ADDR_EXP 66
13146: PUSH
13147: LD_INT 1
13149: ST_TO_ADDR
// if p3 = 3 then
13150: LD_VAR 0 3
13154: PUSH
13155: LD_INT 3
13157: EQUAL
13158: IFFALSE 13168
// sEngine := true ;
13160: LD_ADDR_EXP 68
13164: PUSH
13165: LD_INT 1
13167: ST_TO_ADDR
// if p3 = 4 then
13168: LD_VAR 0 3
13172: PUSH
13173: LD_INT 4
13175: EQUAL
13176: IFFALSE 13186
// sSpec := true ;
13178: LD_ADDR_EXP 65
13182: PUSH
13183: LD_INT 1
13185: ST_TO_ADDR
// if p3 = 5 then
13186: LD_VAR 0 3
13190: PUSH
13191: LD_INT 5
13193: EQUAL
13194: IFFALSE 13204
// sLevel := true ;
13196: LD_ADDR_EXP 69
13200: PUSH
13201: LD_INT 1
13203: ST_TO_ADDR
// if p3 = 6 then
13204: LD_VAR 0 3
13208: PUSH
13209: LD_INT 6
13211: EQUAL
13212: IFFALSE 13222
// sArmoury := true ;
13214: LD_ADDR_EXP 70
13218: PUSH
13219: LD_INT 1
13221: ST_TO_ADDR
// if p3 = 7 then
13222: LD_VAR 0 3
13226: PUSH
13227: LD_INT 7
13229: EQUAL
13230: IFFALSE 13240
// sRadar := true ;
13232: LD_ADDR_EXP 71
13236: PUSH
13237: LD_INT 1
13239: ST_TO_ADDR
// if p3 = 8 then
13240: LD_VAR 0 3
13244: PUSH
13245: LD_INT 8
13247: EQUAL
13248: IFFALSE 13258
// sBunker := true ;
13250: LD_ADDR_EXP 72
13254: PUSH
13255: LD_INT 1
13257: ST_TO_ADDR
// if p3 = 9 then
13258: LD_VAR 0 3
13262: PUSH
13263: LD_INT 9
13265: EQUAL
13266: IFFALSE 13276
// sHack := true ;
13268: LD_ADDR_EXP 73
13272: PUSH
13273: LD_INT 1
13275: ST_TO_ADDR
// if p3 = 10 then
13276: LD_VAR 0 3
13280: PUSH
13281: LD_INT 10
13283: EQUAL
13284: IFFALSE 13294
// sFire := true ;
13286: LD_ADDR_EXP 74
13290: PUSH
13291: LD_INT 1
13293: ST_TO_ADDR
// if p3 = 11 then
13294: LD_VAR 0 3
13298: PUSH
13299: LD_INT 11
13301: EQUAL
13302: IFFALSE 13312
// sRefresh := true ;
13304: LD_ADDR_EXP 75
13308: PUSH
13309: LD_INT 1
13311: ST_TO_ADDR
// if p3 = 12 then
13312: LD_VAR 0 3
13316: PUSH
13317: LD_INT 12
13319: EQUAL
13320: IFFALSE 13330
// sExp := true ;
13322: LD_ADDR_EXP 76
13326: PUSH
13327: LD_INT 1
13329: ST_TO_ADDR
// if p3 = 13 then
13330: LD_VAR 0 3
13334: PUSH
13335: LD_INT 13
13337: EQUAL
13338: IFFALSE 13348
// sDepot := true ;
13340: LD_ADDR_EXP 77
13344: PUSH
13345: LD_INT 1
13347: ST_TO_ADDR
// if p3 = 14 then
13348: LD_VAR 0 3
13352: PUSH
13353: LD_INT 14
13355: EQUAL
13356: IFFALSE 13366
// sFlag := true ;
13358: LD_ADDR_EXP 78
13362: PUSH
13363: LD_INT 1
13365: ST_TO_ADDR
// if p3 = 15 then
13366: LD_VAR 0 3
13370: PUSH
13371: LD_INT 15
13373: EQUAL
13374: IFFALSE 13384
// sKamikadze := true ;
13376: LD_ADDR_EXP 86
13380: PUSH
13381: LD_INT 1
13383: ST_TO_ADDR
// if p3 = 16 then
13384: LD_VAR 0 3
13388: PUSH
13389: LD_INT 16
13391: EQUAL
13392: IFFALSE 13402
// sTroll := true ;
13394: LD_ADDR_EXP 87
13398: PUSH
13399: LD_INT 1
13401: ST_TO_ADDR
// if p3 = 17 then
13402: LD_VAR 0 3
13406: PUSH
13407: LD_INT 17
13409: EQUAL
13410: IFFALSE 13420
// sSlow := true ;
13412: LD_ADDR_EXP 88
13416: PUSH
13417: LD_INT 1
13419: ST_TO_ADDR
// if p3 = 18 then
13420: LD_VAR 0 3
13424: PUSH
13425: LD_INT 18
13427: EQUAL
13428: IFFALSE 13438
// sLack := true ;
13430: LD_ADDR_EXP 89
13434: PUSH
13435: LD_INT 1
13437: ST_TO_ADDR
// if p3 = 19 then
13438: LD_VAR 0 3
13442: PUSH
13443: LD_INT 19
13445: EQUAL
13446: IFFALSE 13456
// sTank := true ;
13448: LD_ADDR_EXP 91
13452: PUSH
13453: LD_INT 1
13455: ST_TO_ADDR
// if p3 = 20 then
13456: LD_VAR 0 3
13460: PUSH
13461: LD_INT 20
13463: EQUAL
13464: IFFALSE 13474
// sRemote := true ;
13466: LD_ADDR_EXP 92
13470: PUSH
13471: LD_INT 1
13473: ST_TO_ADDR
// if p3 = 21 then
13474: LD_VAR 0 3
13478: PUSH
13479: LD_INT 21
13481: EQUAL
13482: IFFALSE 13492
// sPowell := true ;
13484: LD_ADDR_EXP 93
13488: PUSH
13489: LD_INT 1
13491: ST_TO_ADDR
// if p3 = 22 then
13492: LD_VAR 0 3
13496: PUSH
13497: LD_INT 22
13499: EQUAL
13500: IFFALSE 13510
// sTeleport := true ;
13502: LD_ADDR_EXP 96
13506: PUSH
13507: LD_INT 1
13509: ST_TO_ADDR
// if p3 = 23 then
13510: LD_VAR 0 3
13514: PUSH
13515: LD_INT 23
13517: EQUAL
13518: IFFALSE 13528
// sOilTower := true ;
13520: LD_ADDR_EXP 98
13524: PUSH
13525: LD_INT 1
13527: ST_TO_ADDR
// if p3 = 24 then
13528: LD_VAR 0 3
13532: PUSH
13533: LD_INT 24
13535: EQUAL
13536: IFFALSE 13546
// sShovel := true ;
13538: LD_ADDR_EXP 99
13542: PUSH
13543: LD_INT 1
13545: ST_TO_ADDR
// if p3 = 25 then
13546: LD_VAR 0 3
13550: PUSH
13551: LD_INT 25
13553: EQUAL
13554: IFFALSE 13564
// sSheik := true ;
13556: LD_ADDR_EXP 100
13560: PUSH
13561: LD_INT 1
13563: ST_TO_ADDR
// if p3 = 26 then
13564: LD_VAR 0 3
13568: PUSH
13569: LD_INT 26
13571: EQUAL
13572: IFFALSE 13582
// sEarthquake := true ;
13574: LD_ADDR_EXP 102
13578: PUSH
13579: LD_INT 1
13581: ST_TO_ADDR
// if p3 = 27 then
13582: LD_VAR 0 3
13586: PUSH
13587: LD_INT 27
13589: EQUAL
13590: IFFALSE 13600
// sAI := true ;
13592: LD_ADDR_EXP 103
13596: PUSH
13597: LD_INT 1
13599: ST_TO_ADDR
// if p3 = 28 then
13600: LD_VAR 0 3
13604: PUSH
13605: LD_INT 28
13607: EQUAL
13608: IFFALSE 13618
// sCargo := true ;
13610: LD_ADDR_EXP 106
13614: PUSH
13615: LD_INT 1
13617: ST_TO_ADDR
// if p3 = 29 then
13618: LD_VAR 0 3
13622: PUSH
13623: LD_INT 29
13625: EQUAL
13626: IFFALSE 13636
// sDLaser := true ;
13628: LD_ADDR_EXP 107
13632: PUSH
13633: LD_INT 1
13635: ST_TO_ADDR
// if p3 = 30 then
13636: LD_VAR 0 3
13640: PUSH
13641: LD_INT 30
13643: EQUAL
13644: IFFALSE 13654
// sExchange := true ;
13646: LD_ADDR_EXP 108
13650: PUSH
13651: LD_INT 1
13653: ST_TO_ADDR
// if p3 = 31 then
13654: LD_VAR 0 3
13658: PUSH
13659: LD_INT 31
13661: EQUAL
13662: IFFALSE 13672
// sFac := true ;
13664: LD_ADDR_EXP 109
13668: PUSH
13669: LD_INT 1
13671: ST_TO_ADDR
// if p3 = 32 then
13672: LD_VAR 0 3
13676: PUSH
13677: LD_INT 32
13679: EQUAL
13680: IFFALSE 13690
// sPower := true ;
13682: LD_ADDR_EXP 110
13686: PUSH
13687: LD_INT 1
13689: ST_TO_ADDR
// if p3 = 33 then
13690: LD_VAR 0 3
13694: PUSH
13695: LD_INT 33
13697: EQUAL
13698: IFFALSE 13708
// sRandom := true ;
13700: LD_ADDR_EXP 111
13704: PUSH
13705: LD_INT 1
13707: ST_TO_ADDR
// if p3 = 34 then
13708: LD_VAR 0 3
13712: PUSH
13713: LD_INT 34
13715: EQUAL
13716: IFFALSE 13726
// sShield := true ;
13718: LD_ADDR_EXP 112
13722: PUSH
13723: LD_INT 1
13725: ST_TO_ADDR
// if p3 = 35 then
13726: LD_VAR 0 3
13730: PUSH
13731: LD_INT 35
13733: EQUAL
13734: IFFALSE 13744
// sTime := true ;
13736: LD_ADDR_EXP 113
13740: PUSH
13741: LD_INT 1
13743: ST_TO_ADDR
// if p3 = 36 then
13744: LD_VAR 0 3
13748: PUSH
13749: LD_INT 36
13751: EQUAL
13752: IFFALSE 13762
// sTools := true ;
13754: LD_ADDR_EXP 114
13758: PUSH
13759: LD_INT 1
13761: ST_TO_ADDR
// if p3 = 101 then
13762: LD_VAR 0 3
13766: PUSH
13767: LD_INT 101
13769: EQUAL
13770: IFFALSE 13780
// sSold := true ;
13772: LD_ADDR_EXP 79
13776: PUSH
13777: LD_INT 1
13779: ST_TO_ADDR
// if p3 = 102 then
13780: LD_VAR 0 3
13784: PUSH
13785: LD_INT 102
13787: EQUAL
13788: IFFALSE 13798
// sDiff := true ;
13790: LD_ADDR_EXP 80
13794: PUSH
13795: LD_INT 1
13797: ST_TO_ADDR
// if p3 = 103 then
13798: LD_VAR 0 3
13802: PUSH
13803: LD_INT 103
13805: EQUAL
13806: IFFALSE 13816
// sFog := true ;
13808: LD_ADDR_EXP 83
13812: PUSH
13813: LD_INT 1
13815: ST_TO_ADDR
// if p3 = 104 then
13816: LD_VAR 0 3
13820: PUSH
13821: LD_INT 104
13823: EQUAL
13824: IFFALSE 13834
// sReset := true ;
13826: LD_ADDR_EXP 84
13830: PUSH
13831: LD_INT 1
13833: ST_TO_ADDR
// if p3 = 105 then
13834: LD_VAR 0 3
13838: PUSH
13839: LD_INT 105
13841: EQUAL
13842: IFFALSE 13852
// sSun := true ;
13844: LD_ADDR_EXP 85
13848: PUSH
13849: LD_INT 1
13851: ST_TO_ADDR
// if p3 = 106 then
13852: LD_VAR 0 3
13856: PUSH
13857: LD_INT 106
13859: EQUAL
13860: IFFALSE 13870
// sTiger := true ;
13862: LD_ADDR_EXP 81
13866: PUSH
13867: LD_INT 1
13869: ST_TO_ADDR
// if p3 = 107 then
13870: LD_VAR 0 3
13874: PUSH
13875: LD_INT 107
13877: EQUAL
13878: IFFALSE 13888
// sBomb := true ;
13880: LD_ADDR_EXP 82
13884: PUSH
13885: LD_INT 1
13887: ST_TO_ADDR
// if p3 = 108 then
13888: LD_VAR 0 3
13892: PUSH
13893: LD_INT 108
13895: EQUAL
13896: IFFALSE 13906
// sWound := true ;
13898: LD_ADDR_EXP 90
13902: PUSH
13903: LD_INT 1
13905: ST_TO_ADDR
// if p3 = 109 then
13906: LD_VAR 0 3
13910: PUSH
13911: LD_INT 109
13913: EQUAL
13914: IFFALSE 13924
// sBetray := true ;
13916: LD_ADDR_EXP 94
13920: PUSH
13921: LD_INT 1
13923: ST_TO_ADDR
// if p3 = 110 then
13924: LD_VAR 0 3
13928: PUSH
13929: LD_INT 110
13931: EQUAL
13932: IFFALSE 13942
// sContamin := true ;
13934: LD_ADDR_EXP 95
13938: PUSH
13939: LD_INT 1
13941: ST_TO_ADDR
// if p3 = 111 then
13942: LD_VAR 0 3
13946: PUSH
13947: LD_INT 111
13949: EQUAL
13950: IFFALSE 13960
// sOil := true ;
13952: LD_ADDR_EXP 97
13956: PUSH
13957: LD_INT 1
13959: ST_TO_ADDR
// if p3 = 112 then
13960: LD_VAR 0 3
13964: PUSH
13965: LD_INT 112
13967: EQUAL
13968: IFFALSE 13978
// sStu := true ;
13970: LD_ADDR_EXP 101
13974: PUSH
13975: LD_INT 1
13977: ST_TO_ADDR
// if p3 = 113 then
13978: LD_VAR 0 3
13982: PUSH
13983: LD_INT 113
13985: EQUAL
13986: IFFALSE 13996
// sBazooka := true ;
13988: LD_ADDR_EXP 104
13992: PUSH
13993: LD_INT 1
13995: ST_TO_ADDR
// if p3 = 114 then
13996: LD_VAR 0 3
14000: PUSH
14001: LD_INT 114
14003: EQUAL
14004: IFFALSE 14014
// sMortar := true ;
14006: LD_ADDR_EXP 105
14010: PUSH
14011: LD_INT 1
14013: ST_TO_ADDR
// if p3 = 115 then
14014: LD_VAR 0 3
14018: PUSH
14019: LD_INT 115
14021: EQUAL
14022: IFFALSE 14032
// sRanger := true ;
14024: LD_ADDR_EXP 115
14028: PUSH
14029: LD_INT 1
14031: ST_TO_ADDR
// end ; if p2 = 101 then
14032: LD_VAR 0 2
14036: PUSH
14037: LD_INT 101
14039: EQUAL
14040: IFFALSE 14168
// begin case p3 of 1 :
14042: LD_VAR 0 3
14046: PUSH
14047: LD_INT 1
14049: DOUBLE
14050: EQUAL
14051: IFTRUE 14055
14053: GO 14062
14055: POP
// hHackUnlimitedResources ; 2 :
14056: CALL 25205 0 0
14060: GO 14168
14062: LD_INT 2
14064: DOUBLE
14065: EQUAL
14066: IFTRUE 14070
14068: GO 14077
14070: POP
// hHackSetLevel10 ; 3 :
14071: CALL 25338 0 0
14075: GO 14168
14077: LD_INT 3
14079: DOUBLE
14080: EQUAL
14081: IFTRUE 14085
14083: GO 14092
14085: POP
// hHackSetLevel10YourUnits ; 4 :
14086: CALL 25423 0 0
14090: GO 14168
14092: LD_INT 4
14094: DOUBLE
14095: EQUAL
14096: IFTRUE 14100
14098: GO 14107
14100: POP
// hHackInvincible ; 5 :
14101: CALL 25871 0 0
14105: GO 14168
14107: LD_INT 5
14109: DOUBLE
14110: EQUAL
14111: IFTRUE 14115
14113: GO 14122
14115: POP
// hHackInvisible ; 6 :
14116: CALL 25982 0 0
14120: GO 14168
14122: LD_INT 6
14124: DOUBLE
14125: EQUAL
14126: IFTRUE 14130
14128: GO 14137
14130: POP
// hHackChangeYourSide ; 7 :
14131: CALL 26039 0 0
14135: GO 14168
14137: LD_INT 7
14139: DOUBLE
14140: EQUAL
14141: IFTRUE 14145
14143: GO 14152
14145: POP
// hHackChangeUnitSide ; 8 :
14146: CALL 26081 0 0
14150: GO 14168
14152: LD_INT 8
14154: DOUBLE
14155: EQUAL
14156: IFTRUE 14160
14158: GO 14167
14160: POP
// hHackFog ; end ;
14161: CALL 26182 0 0
14165: GO 14168
14167: POP
// end ; end ;
14168: LD_VAR 0 7
14172: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
14173: GO 14175
14175: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
14176: LD_STRING initStreamRollete();
14178: PPUSH
14179: CALL_OW 559
// InitStreamMode ;
14183: CALL 14192 0 0
// DefineStreamItems ( ) ;
14187: CALL 14632 0 0
// end ;
14191: END
// function InitStreamMode ; begin
14192: LD_INT 0
14194: PPUSH
// streamModeActive := false ;
14195: LD_ADDR_EXP 62
14199: PUSH
14200: LD_INT 0
14202: ST_TO_ADDR
// normalCounter := 36 ;
14203: LD_ADDR_EXP 63
14207: PUSH
14208: LD_INT 36
14210: ST_TO_ADDR
// hardcoreCounter := 16 ;
14211: LD_ADDR_EXP 64
14215: PUSH
14216: LD_INT 16
14218: ST_TO_ADDR
// sRocket := false ;
14219: LD_ADDR_EXP 67
14223: PUSH
14224: LD_INT 0
14226: ST_TO_ADDR
// sSpeed := false ;
14227: LD_ADDR_EXP 66
14231: PUSH
14232: LD_INT 0
14234: ST_TO_ADDR
// sEngine := false ;
14235: LD_ADDR_EXP 68
14239: PUSH
14240: LD_INT 0
14242: ST_TO_ADDR
// sSpec := false ;
14243: LD_ADDR_EXP 65
14247: PUSH
14248: LD_INT 0
14250: ST_TO_ADDR
// sLevel := false ;
14251: LD_ADDR_EXP 69
14255: PUSH
14256: LD_INT 0
14258: ST_TO_ADDR
// sArmoury := false ;
14259: LD_ADDR_EXP 70
14263: PUSH
14264: LD_INT 0
14266: ST_TO_ADDR
// sRadar := false ;
14267: LD_ADDR_EXP 71
14271: PUSH
14272: LD_INT 0
14274: ST_TO_ADDR
// sBunker := false ;
14275: LD_ADDR_EXP 72
14279: PUSH
14280: LD_INT 0
14282: ST_TO_ADDR
// sHack := false ;
14283: LD_ADDR_EXP 73
14287: PUSH
14288: LD_INT 0
14290: ST_TO_ADDR
// sFire := false ;
14291: LD_ADDR_EXP 74
14295: PUSH
14296: LD_INT 0
14298: ST_TO_ADDR
// sRefresh := false ;
14299: LD_ADDR_EXP 75
14303: PUSH
14304: LD_INT 0
14306: ST_TO_ADDR
// sExp := false ;
14307: LD_ADDR_EXP 76
14311: PUSH
14312: LD_INT 0
14314: ST_TO_ADDR
// sDepot := false ;
14315: LD_ADDR_EXP 77
14319: PUSH
14320: LD_INT 0
14322: ST_TO_ADDR
// sFlag := false ;
14323: LD_ADDR_EXP 78
14327: PUSH
14328: LD_INT 0
14330: ST_TO_ADDR
// sKamikadze := false ;
14331: LD_ADDR_EXP 86
14335: PUSH
14336: LD_INT 0
14338: ST_TO_ADDR
// sTroll := false ;
14339: LD_ADDR_EXP 87
14343: PUSH
14344: LD_INT 0
14346: ST_TO_ADDR
// sSlow := false ;
14347: LD_ADDR_EXP 88
14351: PUSH
14352: LD_INT 0
14354: ST_TO_ADDR
// sLack := false ;
14355: LD_ADDR_EXP 89
14359: PUSH
14360: LD_INT 0
14362: ST_TO_ADDR
// sTank := false ;
14363: LD_ADDR_EXP 91
14367: PUSH
14368: LD_INT 0
14370: ST_TO_ADDR
// sRemote := false ;
14371: LD_ADDR_EXP 92
14375: PUSH
14376: LD_INT 0
14378: ST_TO_ADDR
// sPowell := false ;
14379: LD_ADDR_EXP 93
14383: PUSH
14384: LD_INT 0
14386: ST_TO_ADDR
// sTeleport := false ;
14387: LD_ADDR_EXP 96
14391: PUSH
14392: LD_INT 0
14394: ST_TO_ADDR
// sOilTower := false ;
14395: LD_ADDR_EXP 98
14399: PUSH
14400: LD_INT 0
14402: ST_TO_ADDR
// sShovel := false ;
14403: LD_ADDR_EXP 99
14407: PUSH
14408: LD_INT 0
14410: ST_TO_ADDR
// sSheik := false ;
14411: LD_ADDR_EXP 100
14415: PUSH
14416: LD_INT 0
14418: ST_TO_ADDR
// sEarthquake := false ;
14419: LD_ADDR_EXP 102
14423: PUSH
14424: LD_INT 0
14426: ST_TO_ADDR
// sAI := false ;
14427: LD_ADDR_EXP 103
14431: PUSH
14432: LD_INT 0
14434: ST_TO_ADDR
// sCargo := false ;
14435: LD_ADDR_EXP 106
14439: PUSH
14440: LD_INT 0
14442: ST_TO_ADDR
// sDLaser := false ;
14443: LD_ADDR_EXP 107
14447: PUSH
14448: LD_INT 0
14450: ST_TO_ADDR
// sExchange := false ;
14451: LD_ADDR_EXP 108
14455: PUSH
14456: LD_INT 0
14458: ST_TO_ADDR
// sFac := false ;
14459: LD_ADDR_EXP 109
14463: PUSH
14464: LD_INT 0
14466: ST_TO_ADDR
// sPower := false ;
14467: LD_ADDR_EXP 110
14471: PUSH
14472: LD_INT 0
14474: ST_TO_ADDR
// sRandom := false ;
14475: LD_ADDR_EXP 111
14479: PUSH
14480: LD_INT 0
14482: ST_TO_ADDR
// sShield := false ;
14483: LD_ADDR_EXP 112
14487: PUSH
14488: LD_INT 0
14490: ST_TO_ADDR
// sTime := false ;
14491: LD_ADDR_EXP 113
14495: PUSH
14496: LD_INT 0
14498: ST_TO_ADDR
// sTools := false ;
14499: LD_ADDR_EXP 114
14503: PUSH
14504: LD_INT 0
14506: ST_TO_ADDR
// sSold := false ;
14507: LD_ADDR_EXP 79
14511: PUSH
14512: LD_INT 0
14514: ST_TO_ADDR
// sDiff := false ;
14515: LD_ADDR_EXP 80
14519: PUSH
14520: LD_INT 0
14522: ST_TO_ADDR
// sFog := false ;
14523: LD_ADDR_EXP 83
14527: PUSH
14528: LD_INT 0
14530: ST_TO_ADDR
// sReset := false ;
14531: LD_ADDR_EXP 84
14535: PUSH
14536: LD_INT 0
14538: ST_TO_ADDR
// sSun := false ;
14539: LD_ADDR_EXP 85
14543: PUSH
14544: LD_INT 0
14546: ST_TO_ADDR
// sTiger := false ;
14547: LD_ADDR_EXP 81
14551: PUSH
14552: LD_INT 0
14554: ST_TO_ADDR
// sBomb := false ;
14555: LD_ADDR_EXP 82
14559: PUSH
14560: LD_INT 0
14562: ST_TO_ADDR
// sWound := false ;
14563: LD_ADDR_EXP 90
14567: PUSH
14568: LD_INT 0
14570: ST_TO_ADDR
// sBetray := false ;
14571: LD_ADDR_EXP 94
14575: PUSH
14576: LD_INT 0
14578: ST_TO_ADDR
// sContamin := false ;
14579: LD_ADDR_EXP 95
14583: PUSH
14584: LD_INT 0
14586: ST_TO_ADDR
// sOil := false ;
14587: LD_ADDR_EXP 97
14591: PUSH
14592: LD_INT 0
14594: ST_TO_ADDR
// sStu := false ;
14595: LD_ADDR_EXP 101
14599: PUSH
14600: LD_INT 0
14602: ST_TO_ADDR
// sBazooka := false ;
14603: LD_ADDR_EXP 104
14607: PUSH
14608: LD_INT 0
14610: ST_TO_ADDR
// sMortar := false ;
14611: LD_ADDR_EXP 105
14615: PUSH
14616: LD_INT 0
14618: ST_TO_ADDR
// sRanger := false ;
14619: LD_ADDR_EXP 115
14623: PUSH
14624: LD_INT 0
14626: ST_TO_ADDR
// end ;
14627: LD_VAR 0 1
14631: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
14632: LD_INT 0
14634: PPUSH
14635: PPUSH
14636: PPUSH
14637: PPUSH
14638: PPUSH
// result := [ ] ;
14639: LD_ADDR_VAR 0 1
14643: PUSH
14644: EMPTY
14645: ST_TO_ADDR
// if campaign_id = 1 then
14646: LD_OWVAR 69
14650: PUSH
14651: LD_INT 1
14653: EQUAL
14654: IFFALSE 17592
// begin case mission_number of 1 :
14656: LD_OWVAR 70
14660: PUSH
14661: LD_INT 1
14663: DOUBLE
14664: EQUAL
14665: IFTRUE 14669
14667: GO 14733
14669: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
14670: LD_ADDR_VAR 0 1
14674: PUSH
14675: LD_INT 2
14677: PUSH
14678: LD_INT 4
14680: PUSH
14681: LD_INT 11
14683: PUSH
14684: LD_INT 12
14686: PUSH
14687: LD_INT 15
14689: PUSH
14690: LD_INT 16
14692: PUSH
14693: LD_INT 22
14695: PUSH
14696: LD_INT 23
14698: PUSH
14699: LD_INT 26
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: PUSH
14713: LD_INT 101
14715: PUSH
14716: LD_INT 102
14718: PUSH
14719: LD_INT 106
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: LIST
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: ST_TO_ADDR
14731: GO 17590
14733: LD_INT 2
14735: DOUBLE
14736: EQUAL
14737: IFTRUE 14741
14739: GO 14813
14741: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
14742: LD_ADDR_VAR 0 1
14746: PUSH
14747: LD_INT 2
14749: PUSH
14750: LD_INT 4
14752: PUSH
14753: LD_INT 11
14755: PUSH
14756: LD_INT 12
14758: PUSH
14759: LD_INT 15
14761: PUSH
14762: LD_INT 16
14764: PUSH
14765: LD_INT 22
14767: PUSH
14768: LD_INT 23
14770: PUSH
14771: LD_INT 26
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: PUSH
14785: LD_INT 101
14787: PUSH
14788: LD_INT 102
14790: PUSH
14791: LD_INT 105
14793: PUSH
14794: LD_INT 106
14796: PUSH
14797: LD_INT 108
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: ST_TO_ADDR
14811: GO 17590
14813: LD_INT 3
14815: DOUBLE
14816: EQUAL
14817: IFTRUE 14821
14819: GO 14897
14821: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
14822: LD_ADDR_VAR 0 1
14826: PUSH
14827: LD_INT 2
14829: PUSH
14830: LD_INT 4
14832: PUSH
14833: LD_INT 5
14835: PUSH
14836: LD_INT 11
14838: PUSH
14839: LD_INT 12
14841: PUSH
14842: LD_INT 15
14844: PUSH
14845: LD_INT 16
14847: PUSH
14848: LD_INT 22
14850: PUSH
14851: LD_INT 26
14853: PUSH
14854: LD_INT 36
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 101
14871: PUSH
14872: LD_INT 102
14874: PUSH
14875: LD_INT 105
14877: PUSH
14878: LD_INT 106
14880: PUSH
14881: LD_INT 108
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: ST_TO_ADDR
14895: GO 17590
14897: LD_INT 4
14899: DOUBLE
14900: EQUAL
14901: IFTRUE 14905
14903: GO 14989
14905: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
14906: LD_ADDR_VAR 0 1
14910: PUSH
14911: LD_INT 2
14913: PUSH
14914: LD_INT 4
14916: PUSH
14917: LD_INT 5
14919: PUSH
14920: LD_INT 8
14922: PUSH
14923: LD_INT 11
14925: PUSH
14926: LD_INT 12
14928: PUSH
14929: LD_INT 15
14931: PUSH
14932: LD_INT 16
14934: PUSH
14935: LD_INT 22
14937: PUSH
14938: LD_INT 23
14940: PUSH
14941: LD_INT 26
14943: PUSH
14944: LD_INT 36
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: PUSH
14961: LD_INT 101
14963: PUSH
14964: LD_INT 102
14966: PUSH
14967: LD_INT 105
14969: PUSH
14970: LD_INT 106
14972: PUSH
14973: LD_INT 108
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: ST_TO_ADDR
14987: GO 17590
14989: LD_INT 5
14991: DOUBLE
14992: EQUAL
14993: IFTRUE 14997
14995: GO 15097
14997: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
14998: LD_ADDR_VAR 0 1
15002: PUSH
15003: LD_INT 2
15005: PUSH
15006: LD_INT 4
15008: PUSH
15009: LD_INT 5
15011: PUSH
15012: LD_INT 6
15014: PUSH
15015: LD_INT 8
15017: PUSH
15018: LD_INT 11
15020: PUSH
15021: LD_INT 12
15023: PUSH
15024: LD_INT 15
15026: PUSH
15027: LD_INT 16
15029: PUSH
15030: LD_INT 22
15032: PUSH
15033: LD_INT 23
15035: PUSH
15036: LD_INT 25
15038: PUSH
15039: LD_INT 26
15041: PUSH
15042: LD_INT 36
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: PUSH
15061: LD_INT 101
15063: PUSH
15064: LD_INT 102
15066: PUSH
15067: LD_INT 105
15069: PUSH
15070: LD_INT 106
15072: PUSH
15073: LD_INT 108
15075: PUSH
15076: LD_INT 109
15078: PUSH
15079: LD_INT 112
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: ST_TO_ADDR
15095: GO 17590
15097: LD_INT 6
15099: DOUBLE
15100: EQUAL
15101: IFTRUE 15105
15103: GO 15225
15105: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
15106: LD_ADDR_VAR 0 1
15110: PUSH
15111: LD_INT 2
15113: PUSH
15114: LD_INT 4
15116: PUSH
15117: LD_INT 5
15119: PUSH
15120: LD_INT 6
15122: PUSH
15123: LD_INT 8
15125: PUSH
15126: LD_INT 11
15128: PUSH
15129: LD_INT 12
15131: PUSH
15132: LD_INT 15
15134: PUSH
15135: LD_INT 16
15137: PUSH
15138: LD_INT 20
15140: PUSH
15141: LD_INT 21
15143: PUSH
15144: LD_INT 22
15146: PUSH
15147: LD_INT 23
15149: PUSH
15150: LD_INT 25
15152: PUSH
15153: LD_INT 26
15155: PUSH
15156: LD_INT 30
15158: PUSH
15159: LD_INT 31
15161: PUSH
15162: LD_INT 32
15164: PUSH
15165: LD_INT 36
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: PUSH
15189: LD_INT 101
15191: PUSH
15192: LD_INT 102
15194: PUSH
15195: LD_INT 105
15197: PUSH
15198: LD_INT 106
15200: PUSH
15201: LD_INT 108
15203: PUSH
15204: LD_INT 109
15206: PUSH
15207: LD_INT 112
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: ST_TO_ADDR
15223: GO 17590
15225: LD_INT 7
15227: DOUBLE
15228: EQUAL
15229: IFTRUE 15233
15231: GO 15333
15233: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
15234: LD_ADDR_VAR 0 1
15238: PUSH
15239: LD_INT 2
15241: PUSH
15242: LD_INT 4
15244: PUSH
15245: LD_INT 5
15247: PUSH
15248: LD_INT 7
15250: PUSH
15251: LD_INT 11
15253: PUSH
15254: LD_INT 12
15256: PUSH
15257: LD_INT 15
15259: PUSH
15260: LD_INT 16
15262: PUSH
15263: LD_INT 20
15265: PUSH
15266: LD_INT 21
15268: PUSH
15269: LD_INT 22
15271: PUSH
15272: LD_INT 23
15274: PUSH
15275: LD_INT 25
15277: PUSH
15278: LD_INT 26
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: PUSH
15297: LD_INT 101
15299: PUSH
15300: LD_INT 102
15302: PUSH
15303: LD_INT 103
15305: PUSH
15306: LD_INT 105
15308: PUSH
15309: LD_INT 106
15311: PUSH
15312: LD_INT 108
15314: PUSH
15315: LD_INT 112
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: ST_TO_ADDR
15331: GO 17590
15333: LD_INT 8
15335: DOUBLE
15336: EQUAL
15337: IFTRUE 15341
15339: GO 15469
15341: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
15342: LD_ADDR_VAR 0 1
15346: PUSH
15347: LD_INT 2
15349: PUSH
15350: LD_INT 4
15352: PUSH
15353: LD_INT 5
15355: PUSH
15356: LD_INT 6
15358: PUSH
15359: LD_INT 7
15361: PUSH
15362: LD_INT 8
15364: PUSH
15365: LD_INT 11
15367: PUSH
15368: LD_INT 12
15370: PUSH
15371: LD_INT 15
15373: PUSH
15374: LD_INT 16
15376: PUSH
15377: LD_INT 20
15379: PUSH
15380: LD_INT 21
15382: PUSH
15383: LD_INT 22
15385: PUSH
15386: LD_INT 23
15388: PUSH
15389: LD_INT 25
15391: PUSH
15392: LD_INT 26
15394: PUSH
15395: LD_INT 30
15397: PUSH
15398: LD_INT 31
15400: PUSH
15401: LD_INT 32
15403: PUSH
15404: LD_INT 36
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: PUSH
15429: LD_INT 101
15431: PUSH
15432: LD_INT 102
15434: PUSH
15435: LD_INT 103
15437: PUSH
15438: LD_INT 105
15440: PUSH
15441: LD_INT 106
15443: PUSH
15444: LD_INT 108
15446: PUSH
15447: LD_INT 109
15449: PUSH
15450: LD_INT 112
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: ST_TO_ADDR
15467: GO 17590
15469: LD_INT 9
15471: DOUBLE
15472: EQUAL
15473: IFTRUE 15477
15475: GO 15613
15477: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
15478: LD_ADDR_VAR 0 1
15482: PUSH
15483: LD_INT 2
15485: PUSH
15486: LD_INT 4
15488: PUSH
15489: LD_INT 5
15491: PUSH
15492: LD_INT 6
15494: PUSH
15495: LD_INT 7
15497: PUSH
15498: LD_INT 8
15500: PUSH
15501: LD_INT 11
15503: PUSH
15504: LD_INT 12
15506: PUSH
15507: LD_INT 15
15509: PUSH
15510: LD_INT 16
15512: PUSH
15513: LD_INT 20
15515: PUSH
15516: LD_INT 21
15518: PUSH
15519: LD_INT 22
15521: PUSH
15522: LD_INT 23
15524: PUSH
15525: LD_INT 25
15527: PUSH
15528: LD_INT 26
15530: PUSH
15531: LD_INT 28
15533: PUSH
15534: LD_INT 30
15536: PUSH
15537: LD_INT 31
15539: PUSH
15540: LD_INT 32
15542: PUSH
15543: LD_INT 36
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: PUSH
15569: LD_INT 101
15571: PUSH
15572: LD_INT 102
15574: PUSH
15575: LD_INT 103
15577: PUSH
15578: LD_INT 105
15580: PUSH
15581: LD_INT 106
15583: PUSH
15584: LD_INT 108
15586: PUSH
15587: LD_INT 109
15589: PUSH
15590: LD_INT 112
15592: PUSH
15593: LD_INT 114
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: ST_TO_ADDR
15611: GO 17590
15613: LD_INT 10
15615: DOUBLE
15616: EQUAL
15617: IFTRUE 15621
15619: GO 15805
15621: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
15622: LD_ADDR_VAR 0 1
15626: PUSH
15627: LD_INT 2
15629: PUSH
15630: LD_INT 4
15632: PUSH
15633: LD_INT 5
15635: PUSH
15636: LD_INT 6
15638: PUSH
15639: LD_INT 7
15641: PUSH
15642: LD_INT 8
15644: PUSH
15645: LD_INT 9
15647: PUSH
15648: LD_INT 10
15650: PUSH
15651: LD_INT 11
15653: PUSH
15654: LD_INT 12
15656: PUSH
15657: LD_INT 13
15659: PUSH
15660: LD_INT 14
15662: PUSH
15663: LD_INT 15
15665: PUSH
15666: LD_INT 16
15668: PUSH
15669: LD_INT 17
15671: PUSH
15672: LD_INT 18
15674: PUSH
15675: LD_INT 19
15677: PUSH
15678: LD_INT 20
15680: PUSH
15681: LD_INT 21
15683: PUSH
15684: LD_INT 22
15686: PUSH
15687: LD_INT 23
15689: PUSH
15690: LD_INT 24
15692: PUSH
15693: LD_INT 25
15695: PUSH
15696: LD_INT 26
15698: PUSH
15699: LD_INT 28
15701: PUSH
15702: LD_INT 30
15704: PUSH
15705: LD_INT 31
15707: PUSH
15708: LD_INT 32
15710: PUSH
15711: LD_INT 36
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: PUSH
15745: LD_INT 101
15747: PUSH
15748: LD_INT 102
15750: PUSH
15751: LD_INT 103
15753: PUSH
15754: LD_INT 104
15756: PUSH
15757: LD_INT 105
15759: PUSH
15760: LD_INT 106
15762: PUSH
15763: LD_INT 107
15765: PUSH
15766: LD_INT 108
15768: PUSH
15769: LD_INT 109
15771: PUSH
15772: LD_INT 110
15774: PUSH
15775: LD_INT 111
15777: PUSH
15778: LD_INT 112
15780: PUSH
15781: LD_INT 114
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: ST_TO_ADDR
15803: GO 17590
15805: LD_INT 11
15807: DOUBLE
15808: EQUAL
15809: IFTRUE 15813
15811: GO 16005
15813: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
15814: LD_ADDR_VAR 0 1
15818: PUSH
15819: LD_INT 2
15821: PUSH
15822: LD_INT 3
15824: PUSH
15825: LD_INT 4
15827: PUSH
15828: LD_INT 5
15830: PUSH
15831: LD_INT 6
15833: PUSH
15834: LD_INT 7
15836: PUSH
15837: LD_INT 8
15839: PUSH
15840: LD_INT 9
15842: PUSH
15843: LD_INT 10
15845: PUSH
15846: LD_INT 11
15848: PUSH
15849: LD_INT 12
15851: PUSH
15852: LD_INT 13
15854: PUSH
15855: LD_INT 14
15857: PUSH
15858: LD_INT 15
15860: PUSH
15861: LD_INT 16
15863: PUSH
15864: LD_INT 17
15866: PUSH
15867: LD_INT 18
15869: PUSH
15870: LD_INT 19
15872: PUSH
15873: LD_INT 20
15875: PUSH
15876: LD_INT 21
15878: PUSH
15879: LD_INT 22
15881: PUSH
15882: LD_INT 23
15884: PUSH
15885: LD_INT 24
15887: PUSH
15888: LD_INT 25
15890: PUSH
15891: LD_INT 26
15893: PUSH
15894: LD_INT 28
15896: PUSH
15897: LD_INT 30
15899: PUSH
15900: LD_INT 31
15902: PUSH
15903: LD_INT 32
15905: PUSH
15906: LD_INT 34
15908: PUSH
15909: LD_INT 36
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: PUSH
15945: LD_INT 101
15947: PUSH
15948: LD_INT 102
15950: PUSH
15951: LD_INT 103
15953: PUSH
15954: LD_INT 104
15956: PUSH
15957: LD_INT 105
15959: PUSH
15960: LD_INT 106
15962: PUSH
15963: LD_INT 107
15965: PUSH
15966: LD_INT 108
15968: PUSH
15969: LD_INT 109
15971: PUSH
15972: LD_INT 110
15974: PUSH
15975: LD_INT 111
15977: PUSH
15978: LD_INT 112
15980: PUSH
15981: LD_INT 114
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: ST_TO_ADDR
16003: GO 17590
16005: LD_INT 12
16007: DOUBLE
16008: EQUAL
16009: IFTRUE 16013
16011: GO 16221
16013: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
16014: LD_ADDR_VAR 0 1
16018: PUSH
16019: LD_INT 1
16021: PUSH
16022: LD_INT 2
16024: PUSH
16025: LD_INT 3
16027: PUSH
16028: LD_INT 4
16030: PUSH
16031: LD_INT 5
16033: PUSH
16034: LD_INT 6
16036: PUSH
16037: LD_INT 7
16039: PUSH
16040: LD_INT 8
16042: PUSH
16043: LD_INT 9
16045: PUSH
16046: LD_INT 10
16048: PUSH
16049: LD_INT 11
16051: PUSH
16052: LD_INT 12
16054: PUSH
16055: LD_INT 13
16057: PUSH
16058: LD_INT 14
16060: PUSH
16061: LD_INT 15
16063: PUSH
16064: LD_INT 16
16066: PUSH
16067: LD_INT 17
16069: PUSH
16070: LD_INT 18
16072: PUSH
16073: LD_INT 19
16075: PUSH
16076: LD_INT 20
16078: PUSH
16079: LD_INT 21
16081: PUSH
16082: LD_INT 22
16084: PUSH
16085: LD_INT 23
16087: PUSH
16088: LD_INT 24
16090: PUSH
16091: LD_INT 25
16093: PUSH
16094: LD_INT 26
16096: PUSH
16097: LD_INT 27
16099: PUSH
16100: LD_INT 28
16102: PUSH
16103: LD_INT 30
16105: PUSH
16106: LD_INT 31
16108: PUSH
16109: LD_INT 32
16111: PUSH
16112: LD_INT 33
16114: PUSH
16115: LD_INT 34
16117: PUSH
16118: LD_INT 36
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: PUSH
16157: LD_INT 101
16159: PUSH
16160: LD_INT 102
16162: PUSH
16163: LD_INT 103
16165: PUSH
16166: LD_INT 104
16168: PUSH
16169: LD_INT 105
16171: PUSH
16172: LD_INT 106
16174: PUSH
16175: LD_INT 107
16177: PUSH
16178: LD_INT 108
16180: PUSH
16181: LD_INT 109
16183: PUSH
16184: LD_INT 110
16186: PUSH
16187: LD_INT 111
16189: PUSH
16190: LD_INT 112
16192: PUSH
16193: LD_INT 113
16195: PUSH
16196: LD_INT 114
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: ST_TO_ADDR
16219: GO 17590
16221: LD_INT 13
16223: DOUBLE
16224: EQUAL
16225: IFTRUE 16229
16227: GO 16425
16229: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
16230: LD_ADDR_VAR 0 1
16234: PUSH
16235: LD_INT 1
16237: PUSH
16238: LD_INT 2
16240: PUSH
16241: LD_INT 3
16243: PUSH
16244: LD_INT 4
16246: PUSH
16247: LD_INT 5
16249: PUSH
16250: LD_INT 8
16252: PUSH
16253: LD_INT 9
16255: PUSH
16256: LD_INT 10
16258: PUSH
16259: LD_INT 11
16261: PUSH
16262: LD_INT 12
16264: PUSH
16265: LD_INT 14
16267: PUSH
16268: LD_INT 15
16270: PUSH
16271: LD_INT 16
16273: PUSH
16274: LD_INT 17
16276: PUSH
16277: LD_INT 18
16279: PUSH
16280: LD_INT 19
16282: PUSH
16283: LD_INT 20
16285: PUSH
16286: LD_INT 21
16288: PUSH
16289: LD_INT 22
16291: PUSH
16292: LD_INT 23
16294: PUSH
16295: LD_INT 24
16297: PUSH
16298: LD_INT 25
16300: PUSH
16301: LD_INT 26
16303: PUSH
16304: LD_INT 27
16306: PUSH
16307: LD_INT 28
16309: PUSH
16310: LD_INT 30
16312: PUSH
16313: LD_INT 31
16315: PUSH
16316: LD_INT 32
16318: PUSH
16319: LD_INT 33
16321: PUSH
16322: LD_INT 34
16324: PUSH
16325: LD_INT 36
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: PUSH
16361: LD_INT 101
16363: PUSH
16364: LD_INT 102
16366: PUSH
16367: LD_INT 103
16369: PUSH
16370: LD_INT 104
16372: PUSH
16373: LD_INT 105
16375: PUSH
16376: LD_INT 106
16378: PUSH
16379: LD_INT 107
16381: PUSH
16382: LD_INT 108
16384: PUSH
16385: LD_INT 109
16387: PUSH
16388: LD_INT 110
16390: PUSH
16391: LD_INT 111
16393: PUSH
16394: LD_INT 112
16396: PUSH
16397: LD_INT 113
16399: PUSH
16400: LD_INT 114
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: ST_TO_ADDR
16423: GO 17590
16425: LD_INT 14
16427: DOUBLE
16428: EQUAL
16429: IFTRUE 16433
16431: GO 16645
16433: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
16434: LD_ADDR_VAR 0 1
16438: PUSH
16439: LD_INT 1
16441: PUSH
16442: LD_INT 2
16444: PUSH
16445: LD_INT 3
16447: PUSH
16448: LD_INT 4
16450: PUSH
16451: LD_INT 5
16453: PUSH
16454: LD_INT 6
16456: PUSH
16457: LD_INT 7
16459: PUSH
16460: LD_INT 8
16462: PUSH
16463: LD_INT 9
16465: PUSH
16466: LD_INT 10
16468: PUSH
16469: LD_INT 11
16471: PUSH
16472: LD_INT 12
16474: PUSH
16475: LD_INT 13
16477: PUSH
16478: LD_INT 14
16480: PUSH
16481: LD_INT 15
16483: PUSH
16484: LD_INT 16
16486: PUSH
16487: LD_INT 17
16489: PUSH
16490: LD_INT 18
16492: PUSH
16493: LD_INT 19
16495: PUSH
16496: LD_INT 20
16498: PUSH
16499: LD_INT 21
16501: PUSH
16502: LD_INT 22
16504: PUSH
16505: LD_INT 23
16507: PUSH
16508: LD_INT 24
16510: PUSH
16511: LD_INT 25
16513: PUSH
16514: LD_INT 26
16516: PUSH
16517: LD_INT 27
16519: PUSH
16520: LD_INT 28
16522: PUSH
16523: LD_INT 29
16525: PUSH
16526: LD_INT 30
16528: PUSH
16529: LD_INT 31
16531: PUSH
16532: LD_INT 32
16534: PUSH
16535: LD_INT 33
16537: PUSH
16538: LD_INT 34
16540: PUSH
16541: LD_INT 36
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 101
16583: PUSH
16584: LD_INT 102
16586: PUSH
16587: LD_INT 103
16589: PUSH
16590: LD_INT 104
16592: PUSH
16593: LD_INT 105
16595: PUSH
16596: LD_INT 106
16598: PUSH
16599: LD_INT 107
16601: PUSH
16602: LD_INT 108
16604: PUSH
16605: LD_INT 109
16607: PUSH
16608: LD_INT 110
16610: PUSH
16611: LD_INT 111
16613: PUSH
16614: LD_INT 112
16616: PUSH
16617: LD_INT 113
16619: PUSH
16620: LD_INT 114
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: ST_TO_ADDR
16643: GO 17590
16645: LD_INT 15
16647: DOUBLE
16648: EQUAL
16649: IFTRUE 16653
16651: GO 16865
16653: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
16654: LD_ADDR_VAR 0 1
16658: PUSH
16659: LD_INT 1
16661: PUSH
16662: LD_INT 2
16664: PUSH
16665: LD_INT 3
16667: PUSH
16668: LD_INT 4
16670: PUSH
16671: LD_INT 5
16673: PUSH
16674: LD_INT 6
16676: PUSH
16677: LD_INT 7
16679: PUSH
16680: LD_INT 8
16682: PUSH
16683: LD_INT 9
16685: PUSH
16686: LD_INT 10
16688: PUSH
16689: LD_INT 11
16691: PUSH
16692: LD_INT 12
16694: PUSH
16695: LD_INT 13
16697: PUSH
16698: LD_INT 14
16700: PUSH
16701: LD_INT 15
16703: PUSH
16704: LD_INT 16
16706: PUSH
16707: LD_INT 17
16709: PUSH
16710: LD_INT 18
16712: PUSH
16713: LD_INT 19
16715: PUSH
16716: LD_INT 20
16718: PUSH
16719: LD_INT 21
16721: PUSH
16722: LD_INT 22
16724: PUSH
16725: LD_INT 23
16727: PUSH
16728: LD_INT 24
16730: PUSH
16731: LD_INT 25
16733: PUSH
16734: LD_INT 26
16736: PUSH
16737: LD_INT 27
16739: PUSH
16740: LD_INT 28
16742: PUSH
16743: LD_INT 29
16745: PUSH
16746: LD_INT 30
16748: PUSH
16749: LD_INT 31
16751: PUSH
16752: LD_INT 32
16754: PUSH
16755: LD_INT 33
16757: PUSH
16758: LD_INT 34
16760: PUSH
16761: LD_INT 36
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 101
16803: PUSH
16804: LD_INT 102
16806: PUSH
16807: LD_INT 103
16809: PUSH
16810: LD_INT 104
16812: PUSH
16813: LD_INT 105
16815: PUSH
16816: LD_INT 106
16818: PUSH
16819: LD_INT 107
16821: PUSH
16822: LD_INT 108
16824: PUSH
16825: LD_INT 109
16827: PUSH
16828: LD_INT 110
16830: PUSH
16831: LD_INT 111
16833: PUSH
16834: LD_INT 112
16836: PUSH
16837: LD_INT 113
16839: PUSH
16840: LD_INT 114
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: ST_TO_ADDR
16863: GO 17590
16865: LD_INT 16
16867: DOUBLE
16868: EQUAL
16869: IFTRUE 16873
16871: GO 16997
16873: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
16874: LD_ADDR_VAR 0 1
16878: PUSH
16879: LD_INT 2
16881: PUSH
16882: LD_INT 4
16884: PUSH
16885: LD_INT 5
16887: PUSH
16888: LD_INT 7
16890: PUSH
16891: LD_INT 11
16893: PUSH
16894: LD_INT 12
16896: PUSH
16897: LD_INT 15
16899: PUSH
16900: LD_INT 16
16902: PUSH
16903: LD_INT 20
16905: PUSH
16906: LD_INT 21
16908: PUSH
16909: LD_INT 22
16911: PUSH
16912: LD_INT 23
16914: PUSH
16915: LD_INT 25
16917: PUSH
16918: LD_INT 26
16920: PUSH
16921: LD_INT 30
16923: PUSH
16924: LD_INT 31
16926: PUSH
16927: LD_INT 32
16929: PUSH
16930: LD_INT 33
16932: PUSH
16933: LD_INT 34
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: PUSH
16957: LD_INT 101
16959: PUSH
16960: LD_INT 102
16962: PUSH
16963: LD_INT 103
16965: PUSH
16966: LD_INT 106
16968: PUSH
16969: LD_INT 108
16971: PUSH
16972: LD_INT 112
16974: PUSH
16975: LD_INT 113
16977: PUSH
16978: LD_INT 114
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: ST_TO_ADDR
16995: GO 17590
16997: LD_INT 17
16999: DOUBLE
17000: EQUAL
17001: IFTRUE 17005
17003: GO 17217
17005: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
17006: LD_ADDR_VAR 0 1
17010: PUSH
17011: LD_INT 1
17013: PUSH
17014: LD_INT 2
17016: PUSH
17017: LD_INT 3
17019: PUSH
17020: LD_INT 4
17022: PUSH
17023: LD_INT 5
17025: PUSH
17026: LD_INT 6
17028: PUSH
17029: LD_INT 7
17031: PUSH
17032: LD_INT 8
17034: PUSH
17035: LD_INT 9
17037: PUSH
17038: LD_INT 10
17040: PUSH
17041: LD_INT 11
17043: PUSH
17044: LD_INT 12
17046: PUSH
17047: LD_INT 13
17049: PUSH
17050: LD_INT 14
17052: PUSH
17053: LD_INT 15
17055: PUSH
17056: LD_INT 16
17058: PUSH
17059: LD_INT 17
17061: PUSH
17062: LD_INT 18
17064: PUSH
17065: LD_INT 19
17067: PUSH
17068: LD_INT 20
17070: PUSH
17071: LD_INT 21
17073: PUSH
17074: LD_INT 22
17076: PUSH
17077: LD_INT 23
17079: PUSH
17080: LD_INT 24
17082: PUSH
17083: LD_INT 25
17085: PUSH
17086: LD_INT 26
17088: PUSH
17089: LD_INT 27
17091: PUSH
17092: LD_INT 28
17094: PUSH
17095: LD_INT 29
17097: PUSH
17098: LD_INT 30
17100: PUSH
17101: LD_INT 31
17103: PUSH
17104: LD_INT 32
17106: PUSH
17107: LD_INT 33
17109: PUSH
17110: LD_INT 34
17112: PUSH
17113: LD_INT 36
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: PUSH
17153: LD_INT 101
17155: PUSH
17156: LD_INT 102
17158: PUSH
17159: LD_INT 103
17161: PUSH
17162: LD_INT 104
17164: PUSH
17165: LD_INT 105
17167: PUSH
17168: LD_INT 106
17170: PUSH
17171: LD_INT 107
17173: PUSH
17174: LD_INT 108
17176: PUSH
17177: LD_INT 109
17179: PUSH
17180: LD_INT 110
17182: PUSH
17183: LD_INT 111
17185: PUSH
17186: LD_INT 112
17188: PUSH
17189: LD_INT 113
17191: PUSH
17192: LD_INT 114
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: ST_TO_ADDR
17215: GO 17590
17217: LD_INT 18
17219: DOUBLE
17220: EQUAL
17221: IFTRUE 17225
17223: GO 17361
17225: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
17226: LD_ADDR_VAR 0 1
17230: PUSH
17231: LD_INT 2
17233: PUSH
17234: LD_INT 4
17236: PUSH
17237: LD_INT 5
17239: PUSH
17240: LD_INT 7
17242: PUSH
17243: LD_INT 11
17245: PUSH
17246: LD_INT 12
17248: PUSH
17249: LD_INT 15
17251: PUSH
17252: LD_INT 16
17254: PUSH
17255: LD_INT 20
17257: PUSH
17258: LD_INT 21
17260: PUSH
17261: LD_INT 22
17263: PUSH
17264: LD_INT 23
17266: PUSH
17267: LD_INT 25
17269: PUSH
17270: LD_INT 26
17272: PUSH
17273: LD_INT 30
17275: PUSH
17276: LD_INT 31
17278: PUSH
17279: LD_INT 32
17281: PUSH
17282: LD_INT 33
17284: PUSH
17285: LD_INT 34
17287: PUSH
17288: LD_INT 35
17290: PUSH
17291: LD_INT 36
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 101
17319: PUSH
17320: LD_INT 102
17322: PUSH
17323: LD_INT 103
17325: PUSH
17326: LD_INT 106
17328: PUSH
17329: LD_INT 108
17331: PUSH
17332: LD_INT 112
17334: PUSH
17335: LD_INT 113
17337: PUSH
17338: LD_INT 114
17340: PUSH
17341: LD_INT 115
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: ST_TO_ADDR
17359: GO 17590
17361: LD_INT 19
17363: DOUBLE
17364: EQUAL
17365: IFTRUE 17369
17367: GO 17589
17369: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
17370: LD_ADDR_VAR 0 1
17374: PUSH
17375: LD_INT 1
17377: PUSH
17378: LD_INT 2
17380: PUSH
17381: LD_INT 3
17383: PUSH
17384: LD_INT 4
17386: PUSH
17387: LD_INT 5
17389: PUSH
17390: LD_INT 6
17392: PUSH
17393: LD_INT 7
17395: PUSH
17396: LD_INT 8
17398: PUSH
17399: LD_INT 9
17401: PUSH
17402: LD_INT 10
17404: PUSH
17405: LD_INT 11
17407: PUSH
17408: LD_INT 12
17410: PUSH
17411: LD_INT 13
17413: PUSH
17414: LD_INT 14
17416: PUSH
17417: LD_INT 15
17419: PUSH
17420: LD_INT 16
17422: PUSH
17423: LD_INT 17
17425: PUSH
17426: LD_INT 18
17428: PUSH
17429: LD_INT 19
17431: PUSH
17432: LD_INT 20
17434: PUSH
17435: LD_INT 21
17437: PUSH
17438: LD_INT 22
17440: PUSH
17441: LD_INT 23
17443: PUSH
17444: LD_INT 24
17446: PUSH
17447: LD_INT 25
17449: PUSH
17450: LD_INT 26
17452: PUSH
17453: LD_INT 27
17455: PUSH
17456: LD_INT 28
17458: PUSH
17459: LD_INT 29
17461: PUSH
17462: LD_INT 30
17464: PUSH
17465: LD_INT 31
17467: PUSH
17468: LD_INT 32
17470: PUSH
17471: LD_INT 33
17473: PUSH
17474: LD_INT 34
17476: PUSH
17477: LD_INT 35
17479: PUSH
17480: LD_INT 36
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 101
17523: PUSH
17524: LD_INT 102
17526: PUSH
17527: LD_INT 103
17529: PUSH
17530: LD_INT 104
17532: PUSH
17533: LD_INT 105
17535: PUSH
17536: LD_INT 106
17538: PUSH
17539: LD_INT 107
17541: PUSH
17542: LD_INT 108
17544: PUSH
17545: LD_INT 109
17547: PUSH
17548: LD_INT 110
17550: PUSH
17551: LD_INT 111
17553: PUSH
17554: LD_INT 112
17556: PUSH
17557: LD_INT 113
17559: PUSH
17560: LD_INT 114
17562: PUSH
17563: LD_INT 115
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: ST_TO_ADDR
17587: GO 17590
17589: POP
// end else
17590: GO 17809
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
17592: LD_ADDR_VAR 0 1
17596: PUSH
17597: LD_INT 1
17599: PUSH
17600: LD_INT 2
17602: PUSH
17603: LD_INT 3
17605: PUSH
17606: LD_INT 4
17608: PUSH
17609: LD_INT 5
17611: PUSH
17612: LD_INT 6
17614: PUSH
17615: LD_INT 7
17617: PUSH
17618: LD_INT 8
17620: PUSH
17621: LD_INT 9
17623: PUSH
17624: LD_INT 10
17626: PUSH
17627: LD_INT 11
17629: PUSH
17630: LD_INT 12
17632: PUSH
17633: LD_INT 13
17635: PUSH
17636: LD_INT 14
17638: PUSH
17639: LD_INT 15
17641: PUSH
17642: LD_INT 16
17644: PUSH
17645: LD_INT 17
17647: PUSH
17648: LD_INT 18
17650: PUSH
17651: LD_INT 19
17653: PUSH
17654: LD_INT 20
17656: PUSH
17657: LD_INT 21
17659: PUSH
17660: LD_INT 22
17662: PUSH
17663: LD_INT 23
17665: PUSH
17666: LD_INT 24
17668: PUSH
17669: LD_INT 25
17671: PUSH
17672: LD_INT 26
17674: PUSH
17675: LD_INT 27
17677: PUSH
17678: LD_INT 28
17680: PUSH
17681: LD_INT 29
17683: PUSH
17684: LD_INT 30
17686: PUSH
17687: LD_INT 31
17689: PUSH
17690: LD_INT 32
17692: PUSH
17693: LD_INT 33
17695: PUSH
17696: LD_INT 34
17698: PUSH
17699: LD_INT 35
17701: PUSH
17702: LD_INT 36
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: PUSH
17743: LD_INT 101
17745: PUSH
17746: LD_INT 102
17748: PUSH
17749: LD_INT 103
17751: PUSH
17752: LD_INT 104
17754: PUSH
17755: LD_INT 105
17757: PUSH
17758: LD_INT 106
17760: PUSH
17761: LD_INT 107
17763: PUSH
17764: LD_INT 108
17766: PUSH
17767: LD_INT 109
17769: PUSH
17770: LD_INT 110
17772: PUSH
17773: LD_INT 111
17775: PUSH
17776: LD_INT 112
17778: PUSH
17779: LD_INT 113
17781: PUSH
17782: LD_INT 114
17784: PUSH
17785: LD_INT 115
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: ST_TO_ADDR
// if result then
17809: LD_VAR 0 1
17813: IFFALSE 18102
// begin normal :=  ;
17815: LD_ADDR_VAR 0 3
17819: PUSH
17820: LD_STRING 
17822: ST_TO_ADDR
// hardcore :=  ;
17823: LD_ADDR_VAR 0 4
17827: PUSH
17828: LD_STRING 
17830: ST_TO_ADDR
// for i = 1 to normalCounter do
17831: LD_ADDR_VAR 0 5
17835: PUSH
17836: DOUBLE
17837: LD_INT 1
17839: DEC
17840: ST_TO_ADDR
17841: LD_EXP 63
17845: PUSH
17846: FOR_TO
17847: IFFALSE 17948
// begin tmp := 0 ;
17849: LD_ADDR_VAR 0 2
17853: PUSH
17854: LD_STRING 0
17856: ST_TO_ADDR
// if result [ 1 ] then
17857: LD_VAR 0 1
17861: PUSH
17862: LD_INT 1
17864: ARRAY
17865: IFFALSE 17930
// if result [ 1 ] [ 1 ] = i then
17867: LD_VAR 0 1
17871: PUSH
17872: LD_INT 1
17874: ARRAY
17875: PUSH
17876: LD_INT 1
17878: ARRAY
17879: PUSH
17880: LD_VAR 0 5
17884: EQUAL
17885: IFFALSE 17930
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17887: LD_ADDR_VAR 0 1
17891: PUSH
17892: LD_VAR 0 1
17896: PPUSH
17897: LD_INT 1
17899: PPUSH
17900: LD_VAR 0 1
17904: PUSH
17905: LD_INT 1
17907: ARRAY
17908: PPUSH
17909: LD_INT 1
17911: PPUSH
17912: CALL_OW 3
17916: PPUSH
17917: CALL_OW 1
17921: ST_TO_ADDR
// tmp := 1 ;
17922: LD_ADDR_VAR 0 2
17926: PUSH
17927: LD_STRING 1
17929: ST_TO_ADDR
// end ; normal := normal & tmp ;
17930: LD_ADDR_VAR 0 3
17934: PUSH
17935: LD_VAR 0 3
17939: PUSH
17940: LD_VAR 0 2
17944: STR
17945: ST_TO_ADDR
// end ;
17946: GO 17846
17948: POP
17949: POP
// for i = 1 to hardcoreCounter do
17950: LD_ADDR_VAR 0 5
17954: PUSH
17955: DOUBLE
17956: LD_INT 1
17958: DEC
17959: ST_TO_ADDR
17960: LD_EXP 64
17964: PUSH
17965: FOR_TO
17966: IFFALSE 18071
// begin tmp := 0 ;
17968: LD_ADDR_VAR 0 2
17972: PUSH
17973: LD_STRING 0
17975: ST_TO_ADDR
// if result [ 2 ] then
17976: LD_VAR 0 1
17980: PUSH
17981: LD_INT 2
17983: ARRAY
17984: IFFALSE 18053
// if result [ 2 ] [ 1 ] = 100 + i then
17986: LD_VAR 0 1
17990: PUSH
17991: LD_INT 2
17993: ARRAY
17994: PUSH
17995: LD_INT 1
17997: ARRAY
17998: PUSH
17999: LD_INT 100
18001: PUSH
18002: LD_VAR 0 5
18006: PLUS
18007: EQUAL
18008: IFFALSE 18053
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18010: LD_ADDR_VAR 0 1
18014: PUSH
18015: LD_VAR 0 1
18019: PPUSH
18020: LD_INT 2
18022: PPUSH
18023: LD_VAR 0 1
18027: PUSH
18028: LD_INT 2
18030: ARRAY
18031: PPUSH
18032: LD_INT 1
18034: PPUSH
18035: CALL_OW 3
18039: PPUSH
18040: CALL_OW 1
18044: ST_TO_ADDR
// tmp := 1 ;
18045: LD_ADDR_VAR 0 2
18049: PUSH
18050: LD_STRING 1
18052: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18053: LD_ADDR_VAR 0 4
18057: PUSH
18058: LD_VAR 0 4
18062: PUSH
18063: LD_VAR 0 2
18067: STR
18068: ST_TO_ADDR
// end ;
18069: GO 17965
18071: POP
18072: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
18073: LD_STRING getStreamItemsFromMission("
18075: PUSH
18076: LD_VAR 0 3
18080: STR
18081: PUSH
18082: LD_STRING ","
18084: STR
18085: PUSH
18086: LD_VAR 0 4
18090: STR
18091: PUSH
18092: LD_STRING ")
18094: STR
18095: PPUSH
18096: CALL_OW 559
// end else
18100: GO 18109
// ToLua ( getStreamItemsFromMission("","") ) ;
18102: LD_STRING getStreamItemsFromMission("","")
18104: PPUSH
18105: CALL_OW 559
// end ;
18109: LD_VAR 0 1
18113: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18114: LD_EXP 62
18118: PUSH
18119: LD_EXP 67
18123: AND
18124: IFFALSE 18248
18126: GO 18128
18128: DISABLE
18129: LD_INT 0
18131: PPUSH
18132: PPUSH
// begin enable ;
18133: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18134: LD_ADDR_VAR 0 2
18138: PUSH
18139: LD_INT 22
18141: PUSH
18142: LD_OWVAR 2
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: LD_INT 2
18153: PUSH
18154: LD_INT 34
18156: PUSH
18157: LD_INT 7
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 34
18166: PUSH
18167: LD_INT 45
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 34
18176: PUSH
18177: LD_INT 28
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 34
18186: PUSH
18187: LD_INT 47
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PPUSH
18205: CALL_OW 69
18209: ST_TO_ADDR
// if not tmp then
18210: LD_VAR 0 2
18214: NOT
18215: IFFALSE 18219
// exit ;
18217: GO 18248
// for i in tmp do
18219: LD_ADDR_VAR 0 1
18223: PUSH
18224: LD_VAR 0 2
18228: PUSH
18229: FOR_IN
18230: IFFALSE 18246
// begin SetLives ( i , 0 ) ;
18232: LD_VAR 0 1
18236: PPUSH
18237: LD_INT 0
18239: PPUSH
18240: CALL_OW 234
// end ;
18244: GO 18229
18246: POP
18247: POP
// end ;
18248: PPOPN 2
18250: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18251: LD_EXP 62
18255: PUSH
18256: LD_EXP 68
18260: AND
18261: IFFALSE 18345
18263: GO 18265
18265: DISABLE
18266: LD_INT 0
18268: PPUSH
18269: PPUSH
// begin enable ;
18270: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18271: LD_ADDR_VAR 0 2
18275: PUSH
18276: LD_INT 22
18278: PUSH
18279: LD_OWVAR 2
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 32
18290: PUSH
18291: LD_INT 3
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PPUSH
18302: CALL_OW 69
18306: ST_TO_ADDR
// if not tmp then
18307: LD_VAR 0 2
18311: NOT
18312: IFFALSE 18316
// exit ;
18314: GO 18345
// for i in tmp do
18316: LD_ADDR_VAR 0 1
18320: PUSH
18321: LD_VAR 0 2
18325: PUSH
18326: FOR_IN
18327: IFFALSE 18343
// begin SetLives ( i , 0 ) ;
18329: LD_VAR 0 1
18333: PPUSH
18334: LD_INT 0
18336: PPUSH
18337: CALL_OW 234
// end ;
18341: GO 18326
18343: POP
18344: POP
// end ;
18345: PPOPN 2
18347: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18348: LD_EXP 62
18352: PUSH
18353: LD_EXP 65
18357: AND
18358: IFFALSE 18451
18360: GO 18362
18362: DISABLE
18363: LD_INT 0
18365: PPUSH
// begin enable ;
18366: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18367: LD_ADDR_VAR 0 1
18371: PUSH
18372: LD_INT 22
18374: PUSH
18375: LD_OWVAR 2
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PUSH
18384: LD_INT 2
18386: PUSH
18387: LD_INT 25
18389: PUSH
18390: LD_INT 5
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 25
18399: PUSH
18400: LD_INT 9
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: LD_INT 25
18409: PUSH
18410: LD_INT 8
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PPUSH
18427: CALL_OW 69
18431: PUSH
18432: FOR_IN
18433: IFFALSE 18449
// begin SetClass ( i , 1 ) ;
18435: LD_VAR 0 1
18439: PPUSH
18440: LD_INT 1
18442: PPUSH
18443: CALL_OW 336
// end ;
18447: GO 18432
18449: POP
18450: POP
// end ;
18451: PPOPN 1
18453: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18454: LD_EXP 62
18458: PUSH
18459: LD_EXP 66
18463: AND
18464: PUSH
18465: LD_OWVAR 65
18469: PUSH
18470: LD_INT 7
18472: LESS
18473: AND
18474: IFFALSE 18488
18476: GO 18478
18478: DISABLE
// begin enable ;
18479: ENABLE
// game_speed := 7 ;
18480: LD_ADDR_OWVAR 65
18484: PUSH
18485: LD_INT 7
18487: ST_TO_ADDR
// end ;
18488: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18489: LD_EXP 62
18493: PUSH
18494: LD_EXP 69
18498: AND
18499: IFFALSE 18701
18501: GO 18503
18503: DISABLE
18504: LD_INT 0
18506: PPUSH
18507: PPUSH
18508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18509: LD_ADDR_VAR 0 3
18513: PUSH
18514: LD_INT 81
18516: PUSH
18517: LD_OWVAR 2
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 21
18528: PUSH
18529: LD_INT 1
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PPUSH
18540: CALL_OW 69
18544: ST_TO_ADDR
// if not tmp then
18545: LD_VAR 0 3
18549: NOT
18550: IFFALSE 18554
// exit ;
18552: GO 18701
// if tmp > 5 then
18554: LD_VAR 0 3
18558: PUSH
18559: LD_INT 5
18561: GREATER
18562: IFFALSE 18574
// k := 5 else
18564: LD_ADDR_VAR 0 2
18568: PUSH
18569: LD_INT 5
18571: ST_TO_ADDR
18572: GO 18584
// k := tmp ;
18574: LD_ADDR_VAR 0 2
18578: PUSH
18579: LD_VAR 0 3
18583: ST_TO_ADDR
// for i := 1 to k do
18584: LD_ADDR_VAR 0 1
18588: PUSH
18589: DOUBLE
18590: LD_INT 1
18592: DEC
18593: ST_TO_ADDR
18594: LD_VAR 0 2
18598: PUSH
18599: FOR_TO
18600: IFFALSE 18699
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18602: LD_VAR 0 3
18606: PUSH
18607: LD_VAR 0 1
18611: ARRAY
18612: PPUSH
18613: LD_VAR 0 1
18617: PUSH
18618: LD_INT 4
18620: MOD
18621: PUSH
18622: LD_INT 1
18624: PLUS
18625: PPUSH
18626: CALL_OW 259
18630: PUSH
18631: LD_INT 10
18633: LESS
18634: IFFALSE 18697
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18636: LD_VAR 0 3
18640: PUSH
18641: LD_VAR 0 1
18645: ARRAY
18646: PPUSH
18647: LD_VAR 0 1
18651: PUSH
18652: LD_INT 4
18654: MOD
18655: PUSH
18656: LD_INT 1
18658: PLUS
18659: PPUSH
18660: LD_VAR 0 3
18664: PUSH
18665: LD_VAR 0 1
18669: ARRAY
18670: PPUSH
18671: LD_VAR 0 1
18675: PUSH
18676: LD_INT 4
18678: MOD
18679: PUSH
18680: LD_INT 1
18682: PLUS
18683: PPUSH
18684: CALL_OW 259
18688: PUSH
18689: LD_INT 1
18691: PLUS
18692: PPUSH
18693: CALL_OW 237
18697: GO 18599
18699: POP
18700: POP
// end ;
18701: PPOPN 3
18703: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18704: LD_EXP 62
18708: PUSH
18709: LD_EXP 70
18713: AND
18714: IFFALSE 18734
18716: GO 18718
18718: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18719: LD_INT 4
18721: PPUSH
18722: LD_OWVAR 2
18726: PPUSH
18727: LD_INT 0
18729: PPUSH
18730: CALL_OW 324
18734: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18735: LD_EXP 62
18739: PUSH
18740: LD_EXP 99
18744: AND
18745: IFFALSE 18765
18747: GO 18749
18749: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18750: LD_INT 19
18752: PPUSH
18753: LD_OWVAR 2
18757: PPUSH
18758: LD_INT 0
18760: PPUSH
18761: CALL_OW 324
18765: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18766: LD_EXP 62
18770: PUSH
18771: LD_EXP 71
18775: AND
18776: IFFALSE 18878
18778: GO 18780
18780: DISABLE
18781: LD_INT 0
18783: PPUSH
18784: PPUSH
// begin enable ;
18785: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18786: LD_ADDR_VAR 0 2
18790: PUSH
18791: LD_INT 22
18793: PUSH
18794: LD_OWVAR 2
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 2
18805: PUSH
18806: LD_INT 34
18808: PUSH
18809: LD_INT 11
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 34
18818: PUSH
18819: LD_INT 30
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: LIST
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PPUSH
18835: CALL_OW 69
18839: ST_TO_ADDR
// if not tmp then
18840: LD_VAR 0 2
18844: NOT
18845: IFFALSE 18849
// exit ;
18847: GO 18878
// for i in tmp do
18849: LD_ADDR_VAR 0 1
18853: PUSH
18854: LD_VAR 0 2
18858: PUSH
18859: FOR_IN
18860: IFFALSE 18876
// begin SetLives ( i , 0 ) ;
18862: LD_VAR 0 1
18866: PPUSH
18867: LD_INT 0
18869: PPUSH
18870: CALL_OW 234
// end ;
18874: GO 18859
18876: POP
18877: POP
// end ;
18878: PPOPN 2
18880: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18881: LD_EXP 62
18885: PUSH
18886: LD_EXP 72
18890: AND
18891: IFFALSE 18911
18893: GO 18895
18895: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18896: LD_INT 32
18898: PPUSH
18899: LD_OWVAR 2
18903: PPUSH
18904: LD_INT 0
18906: PPUSH
18907: CALL_OW 324
18911: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18912: LD_EXP 62
18916: PUSH
18917: LD_EXP 73
18921: AND
18922: IFFALSE 19103
18924: GO 18926
18926: DISABLE
18927: LD_INT 0
18929: PPUSH
18930: PPUSH
18931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18932: LD_ADDR_VAR 0 2
18936: PUSH
18937: LD_INT 22
18939: PUSH
18940: LD_OWVAR 2
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 33
18951: PUSH
18952: LD_INT 3
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PPUSH
18963: CALL_OW 69
18967: ST_TO_ADDR
// if not tmp then
18968: LD_VAR 0 2
18972: NOT
18973: IFFALSE 18977
// exit ;
18975: GO 19103
// side := 0 ;
18977: LD_ADDR_VAR 0 3
18981: PUSH
18982: LD_INT 0
18984: ST_TO_ADDR
// for i := 1 to 8 do
18985: LD_ADDR_VAR 0 1
18989: PUSH
18990: DOUBLE
18991: LD_INT 1
18993: DEC
18994: ST_TO_ADDR
18995: LD_INT 8
18997: PUSH
18998: FOR_TO
18999: IFFALSE 19047
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19001: LD_OWVAR 2
19005: PUSH
19006: LD_VAR 0 1
19010: NONEQUAL
19011: PUSH
19012: LD_OWVAR 2
19016: PPUSH
19017: LD_VAR 0 1
19021: PPUSH
19022: CALL_OW 81
19026: PUSH
19027: LD_INT 2
19029: EQUAL
19030: AND
19031: IFFALSE 19045
// begin side := i ;
19033: LD_ADDR_VAR 0 3
19037: PUSH
19038: LD_VAR 0 1
19042: ST_TO_ADDR
// break ;
19043: GO 19047
// end ;
19045: GO 18998
19047: POP
19048: POP
// if not side then
19049: LD_VAR 0 3
19053: NOT
19054: IFFALSE 19058
// exit ;
19056: GO 19103
// for i := 1 to tmp do
19058: LD_ADDR_VAR 0 1
19062: PUSH
19063: DOUBLE
19064: LD_INT 1
19066: DEC
19067: ST_TO_ADDR
19068: LD_VAR 0 2
19072: PUSH
19073: FOR_TO
19074: IFFALSE 19101
// if Prob ( 60 ) then
19076: LD_INT 60
19078: PPUSH
19079: CALL_OW 13
19083: IFFALSE 19099
// SetSide ( i , side ) ;
19085: LD_VAR 0 1
19089: PPUSH
19090: LD_VAR 0 3
19094: PPUSH
19095: CALL_OW 235
19099: GO 19073
19101: POP
19102: POP
// end ;
19103: PPOPN 3
19105: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19106: LD_EXP 62
19110: PUSH
19111: LD_EXP 75
19115: AND
19116: IFFALSE 19235
19118: GO 19120
19120: DISABLE
19121: LD_INT 0
19123: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19124: LD_ADDR_VAR 0 1
19128: PUSH
19129: LD_INT 22
19131: PUSH
19132: LD_OWVAR 2
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 21
19143: PUSH
19144: LD_INT 1
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 3
19153: PUSH
19154: LD_INT 23
19156: PUSH
19157: LD_INT 0
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: LIST
19172: PPUSH
19173: CALL_OW 69
19177: PUSH
19178: FOR_IN
19179: IFFALSE 19233
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19181: LD_VAR 0 1
19185: PPUSH
19186: CALL_OW 257
19190: PUSH
19191: LD_INT 1
19193: PUSH
19194: LD_INT 2
19196: PUSH
19197: LD_INT 3
19199: PUSH
19200: LD_INT 4
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: IN
19209: IFFALSE 19231
// SetClass ( un , rand ( 1 , 4 ) ) ;
19211: LD_VAR 0 1
19215: PPUSH
19216: LD_INT 1
19218: PPUSH
19219: LD_INT 4
19221: PPUSH
19222: CALL_OW 12
19226: PPUSH
19227: CALL_OW 336
19231: GO 19178
19233: POP
19234: POP
// end ;
19235: PPOPN 1
19237: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19238: LD_EXP 62
19242: PUSH
19243: LD_EXP 74
19247: AND
19248: IFFALSE 19327
19250: GO 19252
19252: DISABLE
19253: LD_INT 0
19255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19256: LD_ADDR_VAR 0 1
19260: PUSH
19261: LD_INT 22
19263: PUSH
19264: LD_OWVAR 2
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 21
19275: PUSH
19276: LD_INT 3
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PPUSH
19287: CALL_OW 69
19291: ST_TO_ADDR
// if not tmp then
19292: LD_VAR 0 1
19296: NOT
19297: IFFALSE 19301
// exit ;
19299: GO 19327
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19301: LD_VAR 0 1
19305: PUSH
19306: LD_INT 1
19308: PPUSH
19309: LD_VAR 0 1
19313: PPUSH
19314: CALL_OW 12
19318: ARRAY
19319: PPUSH
19320: LD_INT 100
19322: PPUSH
19323: CALL_OW 234
// end ;
19327: PPOPN 1
19329: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19330: LD_EXP 62
19334: PUSH
19335: LD_EXP 76
19339: AND
19340: IFFALSE 19438
19342: GO 19344
19344: DISABLE
19345: LD_INT 0
19347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19348: LD_ADDR_VAR 0 1
19352: PUSH
19353: LD_INT 22
19355: PUSH
19356: LD_OWVAR 2
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 21
19367: PUSH
19368: LD_INT 1
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PPUSH
19379: CALL_OW 69
19383: ST_TO_ADDR
// if not tmp then
19384: LD_VAR 0 1
19388: NOT
19389: IFFALSE 19393
// exit ;
19391: GO 19438
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19393: LD_VAR 0 1
19397: PUSH
19398: LD_INT 1
19400: PPUSH
19401: LD_VAR 0 1
19405: PPUSH
19406: CALL_OW 12
19410: ARRAY
19411: PPUSH
19412: LD_INT 1
19414: PPUSH
19415: LD_INT 4
19417: PPUSH
19418: CALL_OW 12
19422: PPUSH
19423: LD_INT 3000
19425: PPUSH
19426: LD_INT 9000
19428: PPUSH
19429: CALL_OW 12
19433: PPUSH
19434: CALL_OW 492
// end ;
19438: PPOPN 1
19440: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19441: LD_EXP 62
19445: PUSH
19446: LD_EXP 77
19450: AND
19451: IFFALSE 19471
19453: GO 19455
19455: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19456: LD_INT 1
19458: PPUSH
19459: LD_OWVAR 2
19463: PPUSH
19464: LD_INT 0
19466: PPUSH
19467: CALL_OW 324
19471: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19472: LD_EXP 62
19476: PUSH
19477: LD_EXP 78
19481: AND
19482: IFFALSE 19565
19484: GO 19486
19486: DISABLE
19487: LD_INT 0
19489: PPUSH
19490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19491: LD_ADDR_VAR 0 2
19495: PUSH
19496: LD_INT 22
19498: PUSH
19499: LD_OWVAR 2
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 21
19510: PUSH
19511: LD_INT 3
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PPUSH
19522: CALL_OW 69
19526: ST_TO_ADDR
// if not tmp then
19527: LD_VAR 0 2
19531: NOT
19532: IFFALSE 19536
// exit ;
19534: GO 19565
// for i in tmp do
19536: LD_ADDR_VAR 0 1
19540: PUSH
19541: LD_VAR 0 2
19545: PUSH
19546: FOR_IN
19547: IFFALSE 19563
// SetBLevel ( i , 10 ) ;
19549: LD_VAR 0 1
19553: PPUSH
19554: LD_INT 10
19556: PPUSH
19557: CALL_OW 241
19561: GO 19546
19563: POP
19564: POP
// end ;
19565: PPOPN 2
19567: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19568: LD_EXP 62
19572: PUSH
19573: LD_EXP 79
19577: AND
19578: IFFALSE 19689
19580: GO 19582
19582: DISABLE
19583: LD_INT 0
19585: PPUSH
19586: PPUSH
19587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19588: LD_ADDR_VAR 0 3
19592: PUSH
19593: LD_INT 22
19595: PUSH
19596: LD_OWVAR 2
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 25
19607: PUSH
19608: LD_INT 1
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PPUSH
19619: CALL_OW 69
19623: ST_TO_ADDR
// if not tmp then
19624: LD_VAR 0 3
19628: NOT
19629: IFFALSE 19633
// exit ;
19631: GO 19689
// un := tmp [ rand ( 1 , tmp ) ] ;
19633: LD_ADDR_VAR 0 2
19637: PUSH
19638: LD_VAR 0 3
19642: PUSH
19643: LD_INT 1
19645: PPUSH
19646: LD_VAR 0 3
19650: PPUSH
19651: CALL_OW 12
19655: ARRAY
19656: ST_TO_ADDR
// if Crawls ( un ) then
19657: LD_VAR 0 2
19661: PPUSH
19662: CALL_OW 318
19666: IFFALSE 19677
// ComWalk ( un ) ;
19668: LD_VAR 0 2
19672: PPUSH
19673: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19677: LD_VAR 0 2
19681: PPUSH
19682: LD_INT 5
19684: PPUSH
19685: CALL_OW 336
// end ;
19689: PPOPN 3
19691: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
19692: LD_EXP 62
19696: PUSH
19697: LD_EXP 80
19701: AND
19702: PUSH
19703: LD_OWVAR 67
19707: PUSH
19708: LD_INT 3
19710: LESS
19711: AND
19712: IFFALSE 19731
19714: GO 19716
19716: DISABLE
// Difficulty := Difficulty + 1 ;
19717: LD_ADDR_OWVAR 67
19721: PUSH
19722: LD_OWVAR 67
19726: PUSH
19727: LD_INT 1
19729: PLUS
19730: ST_TO_ADDR
19731: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19732: LD_EXP 62
19736: PUSH
19737: LD_EXP 81
19741: AND
19742: IFFALSE 19845
19744: GO 19746
19746: DISABLE
19747: LD_INT 0
19749: PPUSH
// begin for i := 1 to 5 do
19750: LD_ADDR_VAR 0 1
19754: PUSH
19755: DOUBLE
19756: LD_INT 1
19758: DEC
19759: ST_TO_ADDR
19760: LD_INT 5
19762: PUSH
19763: FOR_TO
19764: IFFALSE 19843
// begin uc_nation := nation_nature ;
19766: LD_ADDR_OWVAR 21
19770: PUSH
19771: LD_INT 0
19773: ST_TO_ADDR
// uc_side := 0 ;
19774: LD_ADDR_OWVAR 20
19778: PUSH
19779: LD_INT 0
19781: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19782: LD_ADDR_OWVAR 29
19786: PUSH
19787: LD_INT 12
19789: PUSH
19790: LD_INT 12
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: ST_TO_ADDR
// hc_agressivity := 20 ;
19797: LD_ADDR_OWVAR 35
19801: PUSH
19802: LD_INT 20
19804: ST_TO_ADDR
// hc_class := class_tiger ;
19805: LD_ADDR_OWVAR 28
19809: PUSH
19810: LD_INT 14
19812: ST_TO_ADDR
// hc_gallery :=  ;
19813: LD_ADDR_OWVAR 33
19817: PUSH
19818: LD_STRING 
19820: ST_TO_ADDR
// hc_name :=  ;
19821: LD_ADDR_OWVAR 26
19825: PUSH
19826: LD_STRING 
19828: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19829: CALL_OW 44
19833: PPUSH
19834: LD_INT 0
19836: PPUSH
19837: CALL_OW 51
// end ;
19841: GO 19763
19843: POP
19844: POP
// end ;
19845: PPOPN 1
19847: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19848: LD_EXP 62
19852: PUSH
19853: LD_EXP 82
19857: AND
19858: IFFALSE 19867
19860: GO 19862
19862: DISABLE
// StreamSibBomb ;
19863: CALL 19868 0 0
19867: END
// export function StreamSibBomb ; var i , x , y ; begin
19868: LD_INT 0
19870: PPUSH
19871: PPUSH
19872: PPUSH
19873: PPUSH
// result := false ;
19874: LD_ADDR_VAR 0 1
19878: PUSH
19879: LD_INT 0
19881: ST_TO_ADDR
// for i := 1 to 16 do
19882: LD_ADDR_VAR 0 2
19886: PUSH
19887: DOUBLE
19888: LD_INT 1
19890: DEC
19891: ST_TO_ADDR
19892: LD_INT 16
19894: PUSH
19895: FOR_TO
19896: IFFALSE 20095
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19898: LD_ADDR_VAR 0 3
19902: PUSH
19903: LD_INT 10
19905: PUSH
19906: LD_INT 20
19908: PUSH
19909: LD_INT 30
19911: PUSH
19912: LD_INT 40
19914: PUSH
19915: LD_INT 50
19917: PUSH
19918: LD_INT 60
19920: PUSH
19921: LD_INT 70
19923: PUSH
19924: LD_INT 80
19926: PUSH
19927: LD_INT 90
19929: PUSH
19930: LD_INT 100
19932: PUSH
19933: LD_INT 110
19935: PUSH
19936: LD_INT 120
19938: PUSH
19939: LD_INT 130
19941: PUSH
19942: LD_INT 140
19944: PUSH
19945: LD_INT 150
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 1
19967: PPUSH
19968: LD_INT 15
19970: PPUSH
19971: CALL_OW 12
19975: ARRAY
19976: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19977: LD_ADDR_VAR 0 4
19981: PUSH
19982: LD_INT 10
19984: PUSH
19985: LD_INT 20
19987: PUSH
19988: LD_INT 30
19990: PUSH
19991: LD_INT 40
19993: PUSH
19994: LD_INT 50
19996: PUSH
19997: LD_INT 60
19999: PUSH
20000: LD_INT 70
20002: PUSH
20003: LD_INT 80
20005: PUSH
20006: LD_INT 90
20008: PUSH
20009: LD_INT 100
20011: PUSH
20012: LD_INT 110
20014: PUSH
20015: LD_INT 120
20017: PUSH
20018: LD_INT 130
20020: PUSH
20021: LD_INT 140
20023: PUSH
20024: LD_INT 150
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: PUSH
20044: LD_INT 1
20046: PPUSH
20047: LD_INT 15
20049: PPUSH
20050: CALL_OW 12
20054: ARRAY
20055: ST_TO_ADDR
// if ValidHex ( x , y ) then
20056: LD_VAR 0 3
20060: PPUSH
20061: LD_VAR 0 4
20065: PPUSH
20066: CALL_OW 488
20070: IFFALSE 20093
// begin result := [ x , y ] ;
20072: LD_ADDR_VAR 0 1
20076: PUSH
20077: LD_VAR 0 3
20081: PUSH
20082: LD_VAR 0 4
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: ST_TO_ADDR
// break ;
20091: GO 20095
// end ; end ;
20093: GO 19895
20095: POP
20096: POP
// if result then
20097: LD_VAR 0 1
20101: IFFALSE 20161
// begin ToLua ( playSibBomb() ) ;
20103: LD_STRING playSibBomb()
20105: PPUSH
20106: CALL_OW 559
// wait ( 0 0$14 ) ;
20110: LD_INT 490
20112: PPUSH
20113: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20117: LD_VAR 0 1
20121: PUSH
20122: LD_INT 1
20124: ARRAY
20125: PPUSH
20126: LD_VAR 0 1
20130: PUSH
20131: LD_INT 2
20133: ARRAY
20134: PPUSH
20135: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20139: LD_VAR 0 1
20143: PUSH
20144: LD_INT 1
20146: ARRAY
20147: PPUSH
20148: LD_VAR 0 1
20152: PUSH
20153: LD_INT 2
20155: ARRAY
20156: PPUSH
20157: CALL_OW 429
// end ; end ;
20161: LD_VAR 0 1
20165: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20166: LD_EXP 62
20170: PUSH
20171: LD_EXP 84
20175: AND
20176: IFFALSE 20188
20178: GO 20180
20180: DISABLE
// YouLost (  ) ;
20181: LD_STRING 
20183: PPUSH
20184: CALL_OW 104
20188: END
// every 0 0$1 trigger StreamModeActive and sFog do
20189: LD_EXP 62
20193: PUSH
20194: LD_EXP 83
20198: AND
20199: IFFALSE 20213
20201: GO 20203
20203: DISABLE
// FogOff ( your_side ) ;
20204: LD_OWVAR 2
20208: PPUSH
20209: CALL_OW 344
20213: END
// every 0 0$1 trigger StreamModeActive and sSun do
20214: LD_EXP 62
20218: PUSH
20219: LD_EXP 85
20223: AND
20224: IFFALSE 20252
20226: GO 20228
20228: DISABLE
// begin solar_recharge_percent := 0 ;
20229: LD_ADDR_OWVAR 79
20233: PUSH
20234: LD_INT 0
20236: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20237: LD_INT 10500
20239: PPUSH
20240: CALL_OW 67
// solar_recharge_percent := 100 ;
20244: LD_ADDR_OWVAR 79
20248: PUSH
20249: LD_INT 100
20251: ST_TO_ADDR
// end ;
20252: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20253: LD_EXP 62
20257: PUSH
20258: LD_EXP 86
20262: AND
20263: IFFALSE 20502
20265: GO 20267
20267: DISABLE
20268: LD_INT 0
20270: PPUSH
20271: PPUSH
20272: PPUSH
// begin tmp := [ ] ;
20273: LD_ADDR_VAR 0 3
20277: PUSH
20278: EMPTY
20279: ST_TO_ADDR
// for i := 1 to 6 do
20280: LD_ADDR_VAR 0 1
20284: PUSH
20285: DOUBLE
20286: LD_INT 1
20288: DEC
20289: ST_TO_ADDR
20290: LD_INT 6
20292: PUSH
20293: FOR_TO
20294: IFFALSE 20399
// begin uc_nation := nation_nature ;
20296: LD_ADDR_OWVAR 21
20300: PUSH
20301: LD_INT 0
20303: ST_TO_ADDR
// uc_side := 0 ;
20304: LD_ADDR_OWVAR 20
20308: PUSH
20309: LD_INT 0
20311: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20312: LD_ADDR_OWVAR 29
20316: PUSH
20317: LD_INT 12
20319: PUSH
20320: LD_INT 12
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: ST_TO_ADDR
// hc_agressivity := 20 ;
20327: LD_ADDR_OWVAR 35
20331: PUSH
20332: LD_INT 20
20334: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20335: LD_ADDR_OWVAR 28
20339: PUSH
20340: LD_INT 17
20342: ST_TO_ADDR
// hc_gallery :=  ;
20343: LD_ADDR_OWVAR 33
20347: PUSH
20348: LD_STRING 
20350: ST_TO_ADDR
// hc_name :=  ;
20351: LD_ADDR_OWVAR 26
20355: PUSH
20356: LD_STRING 
20358: ST_TO_ADDR
// un := CreateHuman ;
20359: LD_ADDR_VAR 0 2
20363: PUSH
20364: CALL_OW 44
20368: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20369: LD_VAR 0 2
20373: PPUSH
20374: LD_INT 1
20376: PPUSH
20377: CALL_OW 51
// tmp := tmp ^ un ;
20381: LD_ADDR_VAR 0 3
20385: PUSH
20386: LD_VAR 0 3
20390: PUSH
20391: LD_VAR 0 2
20395: ADD
20396: ST_TO_ADDR
// end ;
20397: GO 20293
20399: POP
20400: POP
// repeat wait ( 0 0$1 ) ;
20401: LD_INT 35
20403: PPUSH
20404: CALL_OW 67
// for un in tmp do
20408: LD_ADDR_VAR 0 2
20412: PUSH
20413: LD_VAR 0 3
20417: PUSH
20418: FOR_IN
20419: IFFALSE 20493
// begin if IsDead ( un ) then
20421: LD_VAR 0 2
20425: PPUSH
20426: CALL_OW 301
20430: IFFALSE 20450
// begin tmp := tmp diff un ;
20432: LD_ADDR_VAR 0 3
20436: PUSH
20437: LD_VAR 0 3
20441: PUSH
20442: LD_VAR 0 2
20446: DIFF
20447: ST_TO_ADDR
// continue ;
20448: GO 20418
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20450: LD_VAR 0 2
20454: PPUSH
20455: LD_INT 3
20457: PUSH
20458: LD_INT 22
20460: PUSH
20461: LD_INT 0
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PPUSH
20472: CALL_OW 69
20476: PPUSH
20477: LD_VAR 0 2
20481: PPUSH
20482: CALL_OW 74
20486: PPUSH
20487: CALL_OW 115
// end ;
20491: GO 20418
20493: POP
20494: POP
// until not tmp ;
20495: LD_VAR 0 3
20499: NOT
20500: IFFALSE 20401
// end ;
20502: PPOPN 3
20504: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20505: LD_EXP 62
20509: PUSH
20510: LD_EXP 87
20514: AND
20515: IFFALSE 20569
20517: GO 20519
20519: DISABLE
// begin ToLua ( displayTroll(); ) ;
20520: LD_STRING displayTroll();
20522: PPUSH
20523: CALL_OW 559
// wait ( 3 3$00 ) ;
20527: LD_INT 6300
20529: PPUSH
20530: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20534: LD_STRING hideTroll();
20536: PPUSH
20537: CALL_OW 559
// wait ( 1 1$00 ) ;
20541: LD_INT 2100
20543: PPUSH
20544: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20548: LD_STRING displayTroll();
20550: PPUSH
20551: CALL_OW 559
// wait ( 1 1$00 ) ;
20555: LD_INT 2100
20557: PPUSH
20558: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20562: LD_STRING hideTroll();
20564: PPUSH
20565: CALL_OW 559
// end ;
20569: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20570: LD_EXP 62
20574: PUSH
20575: LD_EXP 88
20579: AND
20580: IFFALSE 20643
20582: GO 20584
20584: DISABLE
20585: LD_INT 0
20587: PPUSH
// begin p := 0 ;
20588: LD_ADDR_VAR 0 1
20592: PUSH
20593: LD_INT 0
20595: ST_TO_ADDR
// repeat game_speed := 1 ;
20596: LD_ADDR_OWVAR 65
20600: PUSH
20601: LD_INT 1
20603: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20604: LD_INT 35
20606: PPUSH
20607: CALL_OW 67
// p := p + 1 ;
20611: LD_ADDR_VAR 0 1
20615: PUSH
20616: LD_VAR 0 1
20620: PUSH
20621: LD_INT 1
20623: PLUS
20624: ST_TO_ADDR
// until p >= 60 ;
20625: LD_VAR 0 1
20629: PUSH
20630: LD_INT 60
20632: GREATEREQUAL
20633: IFFALSE 20596
// game_speed := 4 ;
20635: LD_ADDR_OWVAR 65
20639: PUSH
20640: LD_INT 4
20642: ST_TO_ADDR
// end ;
20643: PPOPN 1
20645: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20646: LD_EXP 62
20650: PUSH
20651: LD_EXP 89
20655: AND
20656: IFFALSE 20802
20658: GO 20660
20660: DISABLE
20661: LD_INT 0
20663: PPUSH
20664: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20665: LD_ADDR_VAR 0 1
20669: PUSH
20670: LD_INT 22
20672: PUSH
20673: LD_OWVAR 2
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 2
20684: PUSH
20685: LD_INT 30
20687: PUSH
20688: LD_INT 0
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PUSH
20695: LD_INT 30
20697: PUSH
20698: LD_INT 1
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: LIST
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PPUSH
20714: CALL_OW 69
20718: ST_TO_ADDR
// if not depot then
20719: LD_VAR 0 1
20723: NOT
20724: IFFALSE 20728
// exit ;
20726: GO 20802
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20728: LD_ADDR_VAR 0 2
20732: PUSH
20733: LD_VAR 0 1
20737: PUSH
20738: LD_INT 1
20740: PPUSH
20741: LD_VAR 0 1
20745: PPUSH
20746: CALL_OW 12
20750: ARRAY
20751: PPUSH
20752: CALL_OW 274
20756: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20757: LD_VAR 0 2
20761: PPUSH
20762: LD_INT 1
20764: PPUSH
20765: LD_INT 0
20767: PPUSH
20768: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20772: LD_VAR 0 2
20776: PPUSH
20777: LD_INT 2
20779: PPUSH
20780: LD_INT 0
20782: PPUSH
20783: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20787: LD_VAR 0 2
20791: PPUSH
20792: LD_INT 3
20794: PPUSH
20795: LD_INT 0
20797: PPUSH
20798: CALL_OW 277
// end ;
20802: PPOPN 2
20804: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20805: LD_EXP 62
20809: PUSH
20810: LD_EXP 90
20814: AND
20815: IFFALSE 20912
20817: GO 20819
20819: DISABLE
20820: LD_INT 0
20822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20823: LD_ADDR_VAR 0 1
20827: PUSH
20828: LD_INT 22
20830: PUSH
20831: LD_OWVAR 2
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 21
20842: PUSH
20843: LD_INT 1
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 3
20852: PUSH
20853: LD_INT 23
20855: PUSH
20856: LD_INT 0
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: LIST
20871: PPUSH
20872: CALL_OW 69
20876: ST_TO_ADDR
// if not tmp then
20877: LD_VAR 0 1
20881: NOT
20882: IFFALSE 20886
// exit ;
20884: GO 20912
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20886: LD_VAR 0 1
20890: PUSH
20891: LD_INT 1
20893: PPUSH
20894: LD_VAR 0 1
20898: PPUSH
20899: CALL_OW 12
20903: ARRAY
20904: PPUSH
20905: LD_INT 200
20907: PPUSH
20908: CALL_OW 234
// end ;
20912: PPOPN 1
20914: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20915: LD_EXP 62
20919: PUSH
20920: LD_EXP 91
20924: AND
20925: IFFALSE 21004
20927: GO 20929
20929: DISABLE
20930: LD_INT 0
20932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20933: LD_ADDR_VAR 0 1
20937: PUSH
20938: LD_INT 22
20940: PUSH
20941: LD_OWVAR 2
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 21
20952: PUSH
20953: LD_INT 2
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PPUSH
20964: CALL_OW 69
20968: ST_TO_ADDR
// if not tmp then
20969: LD_VAR 0 1
20973: NOT
20974: IFFALSE 20978
// exit ;
20976: GO 21004
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20978: LD_VAR 0 1
20982: PUSH
20983: LD_INT 1
20985: PPUSH
20986: LD_VAR 0 1
20990: PPUSH
20991: CALL_OW 12
20995: ARRAY
20996: PPUSH
20997: LD_INT 60
20999: PPUSH
21000: CALL_OW 234
// end ;
21004: PPOPN 1
21006: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21007: LD_EXP 62
21011: PUSH
21012: LD_EXP 92
21016: AND
21017: IFFALSE 21116
21019: GO 21021
21021: DISABLE
21022: LD_INT 0
21024: PPUSH
21025: PPUSH
// begin enable ;
21026: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21027: LD_ADDR_VAR 0 1
21031: PUSH
21032: LD_INT 22
21034: PUSH
21035: LD_OWVAR 2
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 61
21046: PUSH
21047: EMPTY
21048: LIST
21049: PUSH
21050: LD_INT 33
21052: PUSH
21053: LD_INT 2
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: LIST
21064: PPUSH
21065: CALL_OW 69
21069: ST_TO_ADDR
// if not tmp then
21070: LD_VAR 0 1
21074: NOT
21075: IFFALSE 21079
// exit ;
21077: GO 21116
// for i in tmp do
21079: LD_ADDR_VAR 0 2
21083: PUSH
21084: LD_VAR 0 1
21088: PUSH
21089: FOR_IN
21090: IFFALSE 21114
// if IsControledBy ( i ) then
21092: LD_VAR 0 2
21096: PPUSH
21097: CALL_OW 312
21101: IFFALSE 21112
// ComUnlink ( i ) ;
21103: LD_VAR 0 2
21107: PPUSH
21108: CALL_OW 136
21112: GO 21089
21114: POP
21115: POP
// end ;
21116: PPOPN 2
21118: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21119: LD_EXP 62
21123: PUSH
21124: LD_EXP 93
21128: AND
21129: IFFALSE 21269
21131: GO 21133
21133: DISABLE
21134: LD_INT 0
21136: PPUSH
21137: PPUSH
// begin ToLua ( displayPowell(); ) ;
21138: LD_STRING displayPowell();
21140: PPUSH
21141: CALL_OW 559
// uc_side := 0 ;
21145: LD_ADDR_OWVAR 20
21149: PUSH
21150: LD_INT 0
21152: ST_TO_ADDR
// uc_nation := 2 ;
21153: LD_ADDR_OWVAR 21
21157: PUSH
21158: LD_INT 2
21160: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21161: LD_ADDR_OWVAR 37
21165: PUSH
21166: LD_INT 14
21168: ST_TO_ADDR
// vc_engine := engine_siberite ;
21169: LD_ADDR_OWVAR 39
21173: PUSH
21174: LD_INT 3
21176: ST_TO_ADDR
// vc_control := control_apeman ;
21177: LD_ADDR_OWVAR 38
21181: PUSH
21182: LD_INT 5
21184: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21185: LD_ADDR_OWVAR 40
21189: PUSH
21190: LD_INT 29
21192: ST_TO_ADDR
// un := CreateVehicle ;
21193: LD_ADDR_VAR 0 2
21197: PUSH
21198: CALL_OW 45
21202: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21203: LD_VAR 0 2
21207: PPUSH
21208: LD_INT 1
21210: PPUSH
21211: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21215: LD_INT 35
21217: PPUSH
21218: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21222: LD_VAR 0 2
21226: PPUSH
21227: LD_INT 22
21229: PUSH
21230: LD_OWVAR 2
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PPUSH
21239: CALL_OW 69
21243: PPUSH
21244: LD_VAR 0 2
21248: PPUSH
21249: CALL_OW 74
21253: PPUSH
21254: CALL_OW 115
// until IsDead ( un ) ;
21258: LD_VAR 0 2
21262: PPUSH
21263: CALL_OW 301
21267: IFFALSE 21215
// end ;
21269: PPOPN 2
21271: END
// every 0 0$1 trigger StreamModeActive and sStu do
21272: LD_EXP 62
21276: PUSH
21277: LD_EXP 101
21281: AND
21282: IFFALSE 21298
21284: GO 21286
21286: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21287: LD_STRING displayStucuk();
21289: PPUSH
21290: CALL_OW 559
// ResetFog ;
21294: CALL_OW 335
// end ;
21298: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21299: LD_EXP 62
21303: PUSH
21304: LD_EXP 94
21308: AND
21309: IFFALSE 21450
21311: GO 21313
21313: DISABLE
21314: LD_INT 0
21316: PPUSH
21317: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21318: LD_ADDR_VAR 0 2
21322: PUSH
21323: LD_INT 22
21325: PUSH
21326: LD_OWVAR 2
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 21
21337: PUSH
21338: LD_INT 1
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PPUSH
21349: CALL_OW 69
21353: ST_TO_ADDR
// if not tmp then
21354: LD_VAR 0 2
21358: NOT
21359: IFFALSE 21363
// exit ;
21361: GO 21450
// un := tmp [ rand ( 1 , tmp ) ] ;
21363: LD_ADDR_VAR 0 1
21367: PUSH
21368: LD_VAR 0 2
21372: PUSH
21373: LD_INT 1
21375: PPUSH
21376: LD_VAR 0 2
21380: PPUSH
21381: CALL_OW 12
21385: ARRAY
21386: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21387: LD_VAR 0 1
21391: PPUSH
21392: LD_INT 0
21394: PPUSH
21395: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21399: LD_VAR 0 1
21403: PPUSH
21404: LD_OWVAR 3
21408: PUSH
21409: LD_VAR 0 1
21413: DIFF
21414: PPUSH
21415: LD_VAR 0 1
21419: PPUSH
21420: CALL_OW 74
21424: PPUSH
21425: CALL_OW 115
// wait ( 0 0$20 ) ;
21429: LD_INT 700
21431: PPUSH
21432: CALL_OW 67
// SetSide ( un , your_side ) ;
21436: LD_VAR 0 1
21440: PPUSH
21441: LD_OWVAR 2
21445: PPUSH
21446: CALL_OW 235
// end ;
21450: PPOPN 2
21452: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21453: LD_EXP 62
21457: PUSH
21458: LD_EXP 95
21462: AND
21463: IFFALSE 21569
21465: GO 21467
21467: DISABLE
21468: LD_INT 0
21470: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21471: LD_ADDR_VAR 0 1
21475: PUSH
21476: LD_INT 22
21478: PUSH
21479: LD_OWVAR 2
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 2
21490: PUSH
21491: LD_INT 30
21493: PUSH
21494: LD_INT 0
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 30
21503: PUSH
21504: LD_INT 1
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: LIST
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PPUSH
21520: CALL_OW 69
21524: ST_TO_ADDR
// if not depot then
21525: LD_VAR 0 1
21529: NOT
21530: IFFALSE 21534
// exit ;
21532: GO 21569
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21534: LD_VAR 0 1
21538: PUSH
21539: LD_INT 1
21541: ARRAY
21542: PPUSH
21543: CALL_OW 250
21547: PPUSH
21548: LD_VAR 0 1
21552: PUSH
21553: LD_INT 1
21555: ARRAY
21556: PPUSH
21557: CALL_OW 251
21561: PPUSH
21562: LD_INT 70
21564: PPUSH
21565: CALL_OW 495
// end ;
21569: PPOPN 1
21571: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21572: LD_EXP 62
21576: PUSH
21577: LD_EXP 96
21581: AND
21582: IFFALSE 21793
21584: GO 21586
21586: DISABLE
21587: LD_INT 0
21589: PPUSH
21590: PPUSH
21591: PPUSH
21592: PPUSH
21593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21594: LD_ADDR_VAR 0 5
21598: PUSH
21599: LD_INT 22
21601: PUSH
21602: LD_OWVAR 2
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 21
21613: PUSH
21614: LD_INT 1
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PPUSH
21625: CALL_OW 69
21629: ST_TO_ADDR
// if not tmp then
21630: LD_VAR 0 5
21634: NOT
21635: IFFALSE 21639
// exit ;
21637: GO 21793
// for i in tmp do
21639: LD_ADDR_VAR 0 1
21643: PUSH
21644: LD_VAR 0 5
21648: PUSH
21649: FOR_IN
21650: IFFALSE 21791
// begin d := rand ( 0 , 5 ) ;
21652: LD_ADDR_VAR 0 4
21656: PUSH
21657: LD_INT 0
21659: PPUSH
21660: LD_INT 5
21662: PPUSH
21663: CALL_OW 12
21667: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21668: LD_ADDR_VAR 0 2
21672: PUSH
21673: LD_VAR 0 1
21677: PPUSH
21678: CALL_OW 250
21682: PPUSH
21683: LD_VAR 0 4
21687: PPUSH
21688: LD_INT 3
21690: PPUSH
21691: LD_INT 12
21693: PPUSH
21694: CALL_OW 12
21698: PPUSH
21699: CALL_OW 272
21703: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21704: LD_ADDR_VAR 0 3
21708: PUSH
21709: LD_VAR 0 1
21713: PPUSH
21714: CALL_OW 251
21718: PPUSH
21719: LD_VAR 0 4
21723: PPUSH
21724: LD_INT 3
21726: PPUSH
21727: LD_INT 12
21729: PPUSH
21730: CALL_OW 12
21734: PPUSH
21735: CALL_OW 273
21739: ST_TO_ADDR
// if ValidHex ( x , y ) then
21740: LD_VAR 0 2
21744: PPUSH
21745: LD_VAR 0 3
21749: PPUSH
21750: CALL_OW 488
21754: IFFALSE 21789
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21756: LD_VAR 0 1
21760: PPUSH
21761: LD_VAR 0 2
21765: PPUSH
21766: LD_VAR 0 3
21770: PPUSH
21771: LD_INT 3
21773: PPUSH
21774: LD_INT 6
21776: PPUSH
21777: CALL_OW 12
21781: PPUSH
21782: LD_INT 1
21784: PPUSH
21785: CALL_OW 483
// end ;
21789: GO 21649
21791: POP
21792: POP
// end ;
21793: PPOPN 5
21795: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21796: LD_EXP 62
21800: PUSH
21801: LD_EXP 97
21805: AND
21806: IFFALSE 21900
21808: GO 21810
21810: DISABLE
21811: LD_INT 0
21813: PPUSH
21814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21815: LD_ADDR_VAR 0 2
21819: PUSH
21820: LD_INT 22
21822: PUSH
21823: LD_OWVAR 2
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 32
21834: PUSH
21835: LD_INT 1
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 21
21844: PUSH
21845: LD_INT 2
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: LIST
21856: PPUSH
21857: CALL_OW 69
21861: ST_TO_ADDR
// if not tmp then
21862: LD_VAR 0 2
21866: NOT
21867: IFFALSE 21871
// exit ;
21869: GO 21900
// for i in tmp do
21871: LD_ADDR_VAR 0 1
21875: PUSH
21876: LD_VAR 0 2
21880: PUSH
21881: FOR_IN
21882: IFFALSE 21898
// SetFuel ( i , 0 ) ;
21884: LD_VAR 0 1
21888: PPUSH
21889: LD_INT 0
21891: PPUSH
21892: CALL_OW 240
21896: GO 21881
21898: POP
21899: POP
// end ;
21900: PPOPN 2
21902: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21903: LD_EXP 62
21907: PUSH
21908: LD_EXP 98
21912: AND
21913: IFFALSE 21979
21915: GO 21917
21917: DISABLE
21918: LD_INT 0
21920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21921: LD_ADDR_VAR 0 1
21925: PUSH
21926: LD_INT 22
21928: PUSH
21929: LD_OWVAR 2
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 30
21940: PUSH
21941: LD_INT 29
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PPUSH
21952: CALL_OW 69
21956: ST_TO_ADDR
// if not tmp then
21957: LD_VAR 0 1
21961: NOT
21962: IFFALSE 21966
// exit ;
21964: GO 21979
// DestroyUnit ( tmp [ 1 ] ) ;
21966: LD_VAR 0 1
21970: PUSH
21971: LD_INT 1
21973: ARRAY
21974: PPUSH
21975: CALL_OW 65
// end ;
21979: PPOPN 1
21981: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21982: LD_EXP 62
21986: PUSH
21987: LD_EXP 100
21991: AND
21992: IFFALSE 22121
21994: GO 21996
21996: DISABLE
21997: LD_INT 0
21999: PPUSH
// begin uc_side := 0 ;
22000: LD_ADDR_OWVAR 20
22004: PUSH
22005: LD_INT 0
22007: ST_TO_ADDR
// uc_nation := nation_arabian ;
22008: LD_ADDR_OWVAR 21
22012: PUSH
22013: LD_INT 2
22015: ST_TO_ADDR
// hc_gallery :=  ;
22016: LD_ADDR_OWVAR 33
22020: PUSH
22021: LD_STRING 
22023: ST_TO_ADDR
// hc_name :=  ;
22024: LD_ADDR_OWVAR 26
22028: PUSH
22029: LD_STRING 
22031: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22032: LD_INT 1
22034: PPUSH
22035: LD_INT 11
22037: PPUSH
22038: LD_INT 10
22040: PPUSH
22041: CALL_OW 380
// un := CreateHuman ;
22045: LD_ADDR_VAR 0 1
22049: PUSH
22050: CALL_OW 44
22054: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22055: LD_VAR 0 1
22059: PPUSH
22060: LD_INT 1
22062: PPUSH
22063: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22067: LD_INT 35
22069: PPUSH
22070: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22074: LD_VAR 0 1
22078: PPUSH
22079: LD_INT 22
22081: PUSH
22082: LD_OWVAR 2
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PPUSH
22091: CALL_OW 69
22095: PPUSH
22096: LD_VAR 0 1
22100: PPUSH
22101: CALL_OW 74
22105: PPUSH
22106: CALL_OW 115
// until IsDead ( un ) ;
22110: LD_VAR 0 1
22114: PPUSH
22115: CALL_OW 301
22119: IFFALSE 22067
// end ;
22121: PPOPN 1
22123: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22124: LD_EXP 62
22128: PUSH
22129: LD_EXP 102
22133: AND
22134: IFFALSE 22146
22136: GO 22138
22138: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22139: LD_STRING earthquake(getX(game), 0, 32)
22141: PPUSH
22142: CALL_OW 559
22146: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22147: LD_EXP 62
22151: PUSH
22152: LD_EXP 103
22156: AND
22157: IFFALSE 22248
22159: GO 22161
22161: DISABLE
22162: LD_INT 0
22164: PPUSH
// begin enable ;
22165: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22166: LD_ADDR_VAR 0 1
22170: PUSH
22171: LD_INT 22
22173: PUSH
22174: LD_OWVAR 2
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 21
22185: PUSH
22186: LD_INT 2
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 33
22195: PUSH
22196: LD_INT 3
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: LIST
22207: PPUSH
22208: CALL_OW 69
22212: ST_TO_ADDR
// if not tmp then
22213: LD_VAR 0 1
22217: NOT
22218: IFFALSE 22222
// exit ;
22220: GO 22248
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22222: LD_VAR 0 1
22226: PUSH
22227: LD_INT 1
22229: PPUSH
22230: LD_VAR 0 1
22234: PPUSH
22235: CALL_OW 12
22239: ARRAY
22240: PPUSH
22241: LD_INT 1
22243: PPUSH
22244: CALL_OW 234
// end ;
22248: PPOPN 1
22250: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22251: LD_EXP 62
22255: PUSH
22256: LD_EXP 104
22260: AND
22261: IFFALSE 22402
22263: GO 22265
22265: DISABLE
22266: LD_INT 0
22268: PPUSH
22269: PPUSH
22270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22271: LD_ADDR_VAR 0 3
22275: PUSH
22276: LD_INT 22
22278: PUSH
22279: LD_OWVAR 2
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 25
22290: PUSH
22291: LD_INT 1
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PPUSH
22302: CALL_OW 69
22306: ST_TO_ADDR
// if not tmp then
22307: LD_VAR 0 3
22311: NOT
22312: IFFALSE 22316
// exit ;
22314: GO 22402
// un := tmp [ rand ( 1 , tmp ) ] ;
22316: LD_ADDR_VAR 0 2
22320: PUSH
22321: LD_VAR 0 3
22325: PUSH
22326: LD_INT 1
22328: PPUSH
22329: LD_VAR 0 3
22333: PPUSH
22334: CALL_OW 12
22338: ARRAY
22339: ST_TO_ADDR
// if Crawls ( un ) then
22340: LD_VAR 0 2
22344: PPUSH
22345: CALL_OW 318
22349: IFFALSE 22360
// ComWalk ( un ) ;
22351: LD_VAR 0 2
22355: PPUSH
22356: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22360: LD_VAR 0 2
22364: PPUSH
22365: LD_INT 9
22367: PPUSH
22368: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22372: LD_INT 28
22374: PPUSH
22375: LD_OWVAR 2
22379: PPUSH
22380: LD_INT 2
22382: PPUSH
22383: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22387: LD_INT 29
22389: PPUSH
22390: LD_OWVAR 2
22394: PPUSH
22395: LD_INT 2
22397: PPUSH
22398: CALL_OW 322
// end ;
22402: PPOPN 3
22404: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22405: LD_EXP 62
22409: PUSH
22410: LD_EXP 105
22414: AND
22415: IFFALSE 22526
22417: GO 22419
22419: DISABLE
22420: LD_INT 0
22422: PPUSH
22423: PPUSH
22424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22425: LD_ADDR_VAR 0 3
22429: PUSH
22430: LD_INT 22
22432: PUSH
22433: LD_OWVAR 2
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 25
22444: PUSH
22445: LD_INT 1
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PPUSH
22456: CALL_OW 69
22460: ST_TO_ADDR
// if not tmp then
22461: LD_VAR 0 3
22465: NOT
22466: IFFALSE 22470
// exit ;
22468: GO 22526
// un := tmp [ rand ( 1 , tmp ) ] ;
22470: LD_ADDR_VAR 0 2
22474: PUSH
22475: LD_VAR 0 3
22479: PUSH
22480: LD_INT 1
22482: PPUSH
22483: LD_VAR 0 3
22487: PPUSH
22488: CALL_OW 12
22492: ARRAY
22493: ST_TO_ADDR
// if Crawls ( un ) then
22494: LD_VAR 0 2
22498: PPUSH
22499: CALL_OW 318
22503: IFFALSE 22514
// ComWalk ( un ) ;
22505: LD_VAR 0 2
22509: PPUSH
22510: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22514: LD_VAR 0 2
22518: PPUSH
22519: LD_INT 8
22521: PPUSH
22522: CALL_OW 336
// end ;
22526: PPOPN 3
22528: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22529: LD_EXP 62
22533: PUSH
22534: LD_EXP 106
22538: AND
22539: IFFALSE 22683
22541: GO 22543
22543: DISABLE
22544: LD_INT 0
22546: PPUSH
22547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22548: LD_ADDR_VAR 0 2
22552: PUSH
22553: LD_INT 22
22555: PUSH
22556: LD_OWVAR 2
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: LD_INT 21
22567: PUSH
22568: LD_INT 2
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: PUSH
22575: LD_INT 2
22577: PUSH
22578: LD_INT 34
22580: PUSH
22581: LD_INT 12
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 34
22590: PUSH
22591: LD_INT 51
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 34
22600: PUSH
22601: LD_INT 32
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: LIST
22618: PPUSH
22619: CALL_OW 69
22623: ST_TO_ADDR
// if not tmp then
22624: LD_VAR 0 2
22628: NOT
22629: IFFALSE 22633
// exit ;
22631: GO 22683
// for i in tmp do
22633: LD_ADDR_VAR 0 1
22637: PUSH
22638: LD_VAR 0 2
22642: PUSH
22643: FOR_IN
22644: IFFALSE 22681
// if GetCargo ( i , mat_artifact ) = 0 then
22646: LD_VAR 0 1
22650: PPUSH
22651: LD_INT 4
22653: PPUSH
22654: CALL_OW 289
22658: PUSH
22659: LD_INT 0
22661: EQUAL
22662: IFFALSE 22679
// SetCargo ( i , mat_siberit , 100 ) ;
22664: LD_VAR 0 1
22668: PPUSH
22669: LD_INT 3
22671: PPUSH
22672: LD_INT 100
22674: PPUSH
22675: CALL_OW 290
22679: GO 22643
22681: POP
22682: POP
// end ;
22683: PPOPN 2
22685: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22686: LD_EXP 62
22690: PUSH
22691: LD_EXP 107
22695: AND
22696: IFFALSE 22879
22698: GO 22700
22700: DISABLE
22701: LD_INT 0
22703: PPUSH
22704: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22705: LD_ADDR_VAR 0 2
22709: PUSH
22710: LD_INT 22
22712: PUSH
22713: LD_OWVAR 2
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PPUSH
22722: CALL_OW 69
22726: ST_TO_ADDR
// if not tmp then
22727: LD_VAR 0 2
22731: NOT
22732: IFFALSE 22736
// exit ;
22734: GO 22879
// for i := 1 to 2 do
22736: LD_ADDR_VAR 0 1
22740: PUSH
22741: DOUBLE
22742: LD_INT 1
22744: DEC
22745: ST_TO_ADDR
22746: LD_INT 2
22748: PUSH
22749: FOR_TO
22750: IFFALSE 22877
// begin uc_side := your_side ;
22752: LD_ADDR_OWVAR 20
22756: PUSH
22757: LD_OWVAR 2
22761: ST_TO_ADDR
// uc_nation := nation_american ;
22762: LD_ADDR_OWVAR 21
22766: PUSH
22767: LD_INT 1
22769: ST_TO_ADDR
// vc_chassis := us_morphling ;
22770: LD_ADDR_OWVAR 37
22774: PUSH
22775: LD_INT 5
22777: ST_TO_ADDR
// vc_engine := engine_siberite ;
22778: LD_ADDR_OWVAR 39
22782: PUSH
22783: LD_INT 3
22785: ST_TO_ADDR
// vc_control := control_computer ;
22786: LD_ADDR_OWVAR 38
22790: PUSH
22791: LD_INT 3
22793: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22794: LD_ADDR_OWVAR 40
22798: PUSH
22799: LD_INT 10
22801: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22802: LD_VAR 0 2
22806: PUSH
22807: LD_INT 1
22809: ARRAY
22810: PPUSH
22811: CALL_OW 310
22815: NOT
22816: IFFALSE 22863
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22818: CALL_OW 45
22822: PPUSH
22823: LD_VAR 0 2
22827: PUSH
22828: LD_INT 1
22830: ARRAY
22831: PPUSH
22832: CALL_OW 250
22836: PPUSH
22837: LD_VAR 0 2
22841: PUSH
22842: LD_INT 1
22844: ARRAY
22845: PPUSH
22846: CALL_OW 251
22850: PPUSH
22851: LD_INT 12
22853: PPUSH
22854: LD_INT 1
22856: PPUSH
22857: CALL_OW 50
22861: GO 22875
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22863: CALL_OW 45
22867: PPUSH
22868: LD_INT 1
22870: PPUSH
22871: CALL_OW 51
// end ;
22875: GO 22749
22877: POP
22878: POP
// end ;
22879: PPOPN 2
22881: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22882: LD_EXP 62
22886: PUSH
22887: LD_EXP 108
22891: AND
22892: IFFALSE 23114
22894: GO 22896
22896: DISABLE
22897: LD_INT 0
22899: PPUSH
22900: PPUSH
22901: PPUSH
22902: PPUSH
22903: PPUSH
22904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22905: LD_ADDR_VAR 0 6
22909: PUSH
22910: LD_INT 22
22912: PUSH
22913: LD_OWVAR 2
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 21
22924: PUSH
22925: LD_INT 1
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 3
22934: PUSH
22935: LD_INT 23
22937: PUSH
22938: LD_INT 0
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: LIST
22953: PPUSH
22954: CALL_OW 69
22958: ST_TO_ADDR
// if not tmp then
22959: LD_VAR 0 6
22963: NOT
22964: IFFALSE 22968
// exit ;
22966: GO 23114
// s1 := rand ( 1 , 4 ) ;
22968: LD_ADDR_VAR 0 2
22972: PUSH
22973: LD_INT 1
22975: PPUSH
22976: LD_INT 4
22978: PPUSH
22979: CALL_OW 12
22983: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22984: LD_ADDR_VAR 0 4
22988: PUSH
22989: LD_VAR 0 6
22993: PUSH
22994: LD_INT 1
22996: ARRAY
22997: PPUSH
22998: LD_VAR 0 2
23002: PPUSH
23003: CALL_OW 259
23007: ST_TO_ADDR
// if s1 = 1 then
23008: LD_VAR 0 2
23012: PUSH
23013: LD_INT 1
23015: EQUAL
23016: IFFALSE 23036
// s2 := rand ( 2 , 4 ) else
23018: LD_ADDR_VAR 0 3
23022: PUSH
23023: LD_INT 2
23025: PPUSH
23026: LD_INT 4
23028: PPUSH
23029: CALL_OW 12
23033: ST_TO_ADDR
23034: GO 23044
// s2 := 1 ;
23036: LD_ADDR_VAR 0 3
23040: PUSH
23041: LD_INT 1
23043: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23044: LD_ADDR_VAR 0 5
23048: PUSH
23049: LD_VAR 0 6
23053: PUSH
23054: LD_INT 1
23056: ARRAY
23057: PPUSH
23058: LD_VAR 0 3
23062: PPUSH
23063: CALL_OW 259
23067: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23068: LD_VAR 0 6
23072: PUSH
23073: LD_INT 1
23075: ARRAY
23076: PPUSH
23077: LD_VAR 0 2
23081: PPUSH
23082: LD_VAR 0 5
23086: PPUSH
23087: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23091: LD_VAR 0 6
23095: PUSH
23096: LD_INT 1
23098: ARRAY
23099: PPUSH
23100: LD_VAR 0 3
23104: PPUSH
23105: LD_VAR 0 4
23109: PPUSH
23110: CALL_OW 237
// end ;
23114: PPOPN 6
23116: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23117: LD_EXP 62
23121: PUSH
23122: LD_EXP 109
23126: AND
23127: IFFALSE 23206
23129: GO 23131
23131: DISABLE
23132: LD_INT 0
23134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23135: LD_ADDR_VAR 0 1
23139: PUSH
23140: LD_INT 22
23142: PUSH
23143: LD_OWVAR 2
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 30
23154: PUSH
23155: LD_INT 3
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PPUSH
23166: CALL_OW 69
23170: ST_TO_ADDR
// if not tmp then
23171: LD_VAR 0 1
23175: NOT
23176: IFFALSE 23180
// exit ;
23178: GO 23206
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23180: LD_VAR 0 1
23184: PUSH
23185: LD_INT 1
23187: PPUSH
23188: LD_VAR 0 1
23192: PPUSH
23193: CALL_OW 12
23197: ARRAY
23198: PPUSH
23199: LD_INT 1
23201: PPUSH
23202: CALL_OW 234
// end ;
23206: PPOPN 1
23208: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23209: LD_EXP 62
23213: PUSH
23214: LD_EXP 110
23218: AND
23219: IFFALSE 23331
23221: GO 23223
23223: DISABLE
23224: LD_INT 0
23226: PPUSH
23227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23228: LD_ADDR_VAR 0 2
23232: PUSH
23233: LD_INT 22
23235: PUSH
23236: LD_OWVAR 2
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 2
23247: PUSH
23248: LD_INT 30
23250: PUSH
23251: LD_INT 27
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 30
23260: PUSH
23261: LD_INT 26
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 30
23270: PUSH
23271: LD_INT 28
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PPUSH
23288: CALL_OW 69
23292: ST_TO_ADDR
// if not tmp then
23293: LD_VAR 0 2
23297: NOT
23298: IFFALSE 23302
// exit ;
23300: GO 23331
// for i in tmp do
23302: LD_ADDR_VAR 0 1
23306: PUSH
23307: LD_VAR 0 2
23311: PUSH
23312: FOR_IN
23313: IFFALSE 23329
// SetLives ( i , 1 ) ;
23315: LD_VAR 0 1
23319: PPUSH
23320: LD_INT 1
23322: PPUSH
23323: CALL_OW 234
23327: GO 23312
23329: POP
23330: POP
// end ;
23331: PPOPN 2
23333: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23334: LD_EXP 62
23338: PUSH
23339: LD_EXP 111
23343: AND
23344: IFFALSE 23618
23346: GO 23348
23348: DISABLE
23349: LD_INT 0
23351: PPUSH
23352: PPUSH
23353: PPUSH
// begin i := rand ( 1 , 7 ) ;
23354: LD_ADDR_VAR 0 1
23358: PUSH
23359: LD_INT 1
23361: PPUSH
23362: LD_INT 7
23364: PPUSH
23365: CALL_OW 12
23369: ST_TO_ADDR
// case i of 1 :
23370: LD_VAR 0 1
23374: PUSH
23375: LD_INT 1
23377: DOUBLE
23378: EQUAL
23379: IFTRUE 23383
23381: GO 23393
23383: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23384: LD_STRING earthquake(getX(game), 0, 32)
23386: PPUSH
23387: CALL_OW 559
23391: GO 23618
23393: LD_INT 2
23395: DOUBLE
23396: EQUAL
23397: IFTRUE 23401
23399: GO 23415
23401: POP
// begin ToLua ( displayStucuk(); ) ;
23402: LD_STRING displayStucuk();
23404: PPUSH
23405: CALL_OW 559
// ResetFog ;
23409: CALL_OW 335
// end ; 3 :
23413: GO 23618
23415: LD_INT 3
23417: DOUBLE
23418: EQUAL
23419: IFTRUE 23423
23421: GO 23527
23423: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23424: LD_ADDR_VAR 0 2
23428: PUSH
23429: LD_INT 22
23431: PUSH
23432: LD_OWVAR 2
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 25
23443: PUSH
23444: LD_INT 1
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PPUSH
23455: CALL_OW 69
23459: ST_TO_ADDR
// if not tmp then
23460: LD_VAR 0 2
23464: NOT
23465: IFFALSE 23469
// exit ;
23467: GO 23618
// un := tmp [ rand ( 1 , tmp ) ] ;
23469: LD_ADDR_VAR 0 3
23473: PUSH
23474: LD_VAR 0 2
23478: PUSH
23479: LD_INT 1
23481: PPUSH
23482: LD_VAR 0 2
23486: PPUSH
23487: CALL_OW 12
23491: ARRAY
23492: ST_TO_ADDR
// if Crawls ( un ) then
23493: LD_VAR 0 3
23497: PPUSH
23498: CALL_OW 318
23502: IFFALSE 23513
// ComWalk ( un ) ;
23504: LD_VAR 0 3
23508: PPUSH
23509: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23513: LD_VAR 0 3
23517: PPUSH
23518: LD_INT 8
23520: PPUSH
23521: CALL_OW 336
// end ; 4 :
23525: GO 23618
23527: LD_INT 4
23529: DOUBLE
23530: EQUAL
23531: IFTRUE 23535
23533: GO 23596
23535: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23536: LD_ADDR_VAR 0 2
23540: PUSH
23541: LD_INT 22
23543: PUSH
23544: LD_OWVAR 2
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 30
23555: PUSH
23556: LD_INT 29
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PPUSH
23567: CALL_OW 69
23571: ST_TO_ADDR
// if not tmp then
23572: LD_VAR 0 2
23576: NOT
23577: IFFALSE 23581
// exit ;
23579: GO 23618
// DestroyUnit ( tmp [ 1 ] ) ;
23581: LD_VAR 0 2
23585: PUSH
23586: LD_INT 1
23588: ARRAY
23589: PPUSH
23590: CALL_OW 65
// end ; 5 .. 7 :
23594: GO 23618
23596: LD_INT 5
23598: DOUBLE
23599: GREATEREQUAL
23600: IFFALSE 23608
23602: LD_INT 7
23604: DOUBLE
23605: LESSEQUAL
23606: IFTRUE 23610
23608: GO 23617
23610: POP
// StreamSibBomb ; end ;
23611: CALL 19868 0 0
23615: GO 23618
23617: POP
// end ;
23618: PPOPN 3
23620: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23621: LD_EXP 62
23625: PUSH
23626: LD_EXP 112
23630: AND
23631: IFFALSE 23787
23633: GO 23635
23635: DISABLE
23636: LD_INT 0
23638: PPUSH
23639: PPUSH
23640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23641: LD_ADDR_VAR 0 2
23645: PUSH
23646: LD_INT 81
23648: PUSH
23649: LD_OWVAR 2
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 2
23660: PUSH
23661: LD_INT 21
23663: PUSH
23664: LD_INT 1
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 21
23673: PUSH
23674: LD_INT 2
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: LIST
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PPUSH
23690: CALL_OW 69
23694: ST_TO_ADDR
// if not tmp then
23695: LD_VAR 0 2
23699: NOT
23700: IFFALSE 23704
// exit ;
23702: GO 23787
// p := 0 ;
23704: LD_ADDR_VAR 0 3
23708: PUSH
23709: LD_INT 0
23711: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23712: LD_INT 35
23714: PPUSH
23715: CALL_OW 67
// p := p + 1 ;
23719: LD_ADDR_VAR 0 3
23723: PUSH
23724: LD_VAR 0 3
23728: PUSH
23729: LD_INT 1
23731: PLUS
23732: ST_TO_ADDR
// for i in tmp do
23733: LD_ADDR_VAR 0 1
23737: PUSH
23738: LD_VAR 0 2
23742: PUSH
23743: FOR_IN
23744: IFFALSE 23775
// if GetLives ( i ) < 1000 then
23746: LD_VAR 0 1
23750: PPUSH
23751: CALL_OW 256
23755: PUSH
23756: LD_INT 1000
23758: LESS
23759: IFFALSE 23773
// SetLives ( i , 1000 ) ;
23761: LD_VAR 0 1
23765: PPUSH
23766: LD_INT 1000
23768: PPUSH
23769: CALL_OW 234
23773: GO 23743
23775: POP
23776: POP
// until p > 20 ;
23777: LD_VAR 0 3
23781: PUSH
23782: LD_INT 20
23784: GREATER
23785: IFFALSE 23712
// end ;
23787: PPOPN 3
23789: END
// every 0 0$1 trigger StreamModeActive and sTime do
23790: LD_EXP 62
23794: PUSH
23795: LD_EXP 113
23799: AND
23800: IFFALSE 23835
23802: GO 23804
23804: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23805: LD_INT 28
23807: PPUSH
23808: LD_OWVAR 2
23812: PPUSH
23813: LD_INT 2
23815: PPUSH
23816: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23820: LD_INT 30
23822: PPUSH
23823: LD_OWVAR 2
23827: PPUSH
23828: LD_INT 2
23830: PPUSH
23831: CALL_OW 322
// end ;
23835: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23836: LD_EXP 62
23840: PUSH
23841: LD_EXP 114
23845: AND
23846: IFFALSE 23967
23848: GO 23850
23850: DISABLE
23851: LD_INT 0
23853: PPUSH
23854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23855: LD_ADDR_VAR 0 2
23859: PUSH
23860: LD_INT 22
23862: PUSH
23863: LD_OWVAR 2
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: LD_INT 21
23874: PUSH
23875: LD_INT 1
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: LD_INT 3
23884: PUSH
23885: LD_INT 23
23887: PUSH
23888: LD_INT 0
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: LIST
23903: PPUSH
23904: CALL_OW 69
23908: ST_TO_ADDR
// if not tmp then
23909: LD_VAR 0 2
23913: NOT
23914: IFFALSE 23918
// exit ;
23916: GO 23967
// for i in tmp do
23918: LD_ADDR_VAR 0 1
23922: PUSH
23923: LD_VAR 0 2
23927: PUSH
23928: FOR_IN
23929: IFFALSE 23965
// begin if Crawls ( i ) then
23931: LD_VAR 0 1
23935: PPUSH
23936: CALL_OW 318
23940: IFFALSE 23951
// ComWalk ( i ) ;
23942: LD_VAR 0 1
23946: PPUSH
23947: CALL_OW 138
// SetClass ( i , 2 ) ;
23951: LD_VAR 0 1
23955: PPUSH
23956: LD_INT 2
23958: PPUSH
23959: CALL_OW 336
// end ;
23963: GO 23928
23965: POP
23966: POP
// end ;
23967: PPOPN 2
23969: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23970: LD_EXP 62
23974: PUSH
23975: LD_EXP 115
23979: AND
23980: IFFALSE 24261
23982: GO 23984
23984: DISABLE
23985: LD_INT 0
23987: PPUSH
23988: PPUSH
23989: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23990: LD_OWVAR 2
23994: PPUSH
23995: LD_INT 9
23997: PPUSH
23998: LD_INT 1
24000: PPUSH
24001: LD_INT 1
24003: PPUSH
24004: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24008: LD_INT 9
24010: PPUSH
24011: LD_OWVAR 2
24015: PPUSH
24016: CALL_OW 343
// uc_side := 9 ;
24020: LD_ADDR_OWVAR 20
24024: PUSH
24025: LD_INT 9
24027: ST_TO_ADDR
// uc_nation := 2 ;
24028: LD_ADDR_OWVAR 21
24032: PUSH
24033: LD_INT 2
24035: ST_TO_ADDR
// hc_name := Dark Warrior ;
24036: LD_ADDR_OWVAR 26
24040: PUSH
24041: LD_STRING Dark Warrior
24043: ST_TO_ADDR
// hc_gallery :=  ;
24044: LD_ADDR_OWVAR 33
24048: PUSH
24049: LD_STRING 
24051: ST_TO_ADDR
// hc_noskilllimit := true ;
24052: LD_ADDR_OWVAR 76
24056: PUSH
24057: LD_INT 1
24059: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24060: LD_ADDR_OWVAR 31
24064: PUSH
24065: LD_INT 30
24067: PUSH
24068: LD_INT 30
24070: PUSH
24071: LD_INT 30
24073: PUSH
24074: LD_INT 30
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: ST_TO_ADDR
// un := CreateHuman ;
24083: LD_ADDR_VAR 0 3
24087: PUSH
24088: CALL_OW 44
24092: ST_TO_ADDR
// hc_noskilllimit := false ;
24093: LD_ADDR_OWVAR 76
24097: PUSH
24098: LD_INT 0
24100: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24101: LD_VAR 0 3
24105: PPUSH
24106: LD_INT 1
24108: PPUSH
24109: CALL_OW 51
// p := 0 ;
24113: LD_ADDR_VAR 0 2
24117: PUSH
24118: LD_INT 0
24120: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24121: LD_INT 35
24123: PPUSH
24124: CALL_OW 67
// p := p + 1 ;
24128: LD_ADDR_VAR 0 2
24132: PUSH
24133: LD_VAR 0 2
24137: PUSH
24138: LD_INT 1
24140: PLUS
24141: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24142: LD_VAR 0 3
24146: PPUSH
24147: CALL_OW 256
24151: PUSH
24152: LD_INT 1000
24154: LESS
24155: IFFALSE 24169
// SetLives ( un , 1000 ) ;
24157: LD_VAR 0 3
24161: PPUSH
24162: LD_INT 1000
24164: PPUSH
24165: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24169: LD_VAR 0 3
24173: PPUSH
24174: LD_INT 81
24176: PUSH
24177: LD_OWVAR 2
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 91
24188: PUSH
24189: LD_VAR 0 3
24193: PUSH
24194: LD_INT 30
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: LIST
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PPUSH
24206: CALL_OW 69
24210: PPUSH
24211: LD_VAR 0 3
24215: PPUSH
24216: CALL_OW 74
24220: PPUSH
24221: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
24225: LD_VAR 0 2
24229: PUSH
24230: LD_INT 60
24232: GREATER
24233: PUSH
24234: LD_VAR 0 3
24238: PPUSH
24239: CALL_OW 301
24243: OR
24244: IFFALSE 24121
// if un then
24246: LD_VAR 0 3
24250: IFFALSE 24261
// RemoveUnit ( un ) ;
24252: LD_VAR 0 3
24256: PPUSH
24257: CALL_OW 64
// end ;
24261: PPOPN 3
24263: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24264: LD_INT 0
24266: PPUSH
// case cmd of 301 :
24267: LD_VAR 0 1
24271: PUSH
24272: LD_INT 301
24274: DOUBLE
24275: EQUAL
24276: IFTRUE 24280
24278: GO 24312
24280: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24281: LD_VAR 0 6
24285: PPUSH
24286: LD_VAR 0 7
24290: PPUSH
24291: LD_VAR 0 8
24295: PPUSH
24296: LD_VAR 0 4
24300: PPUSH
24301: LD_VAR 0 5
24305: PPUSH
24306: CALL 25513 0 5
24310: GO 24433
24312: LD_INT 302
24314: DOUBLE
24315: EQUAL
24316: IFTRUE 24320
24318: GO 24357
24320: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24321: LD_VAR 0 6
24325: PPUSH
24326: LD_VAR 0 7
24330: PPUSH
24331: LD_VAR 0 8
24335: PPUSH
24336: LD_VAR 0 9
24340: PPUSH
24341: LD_VAR 0 4
24345: PPUSH
24346: LD_VAR 0 5
24350: PPUSH
24351: CALL 25604 0 6
24355: GO 24433
24357: LD_INT 303
24359: DOUBLE
24360: EQUAL
24361: IFTRUE 24365
24363: GO 24402
24365: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24366: LD_VAR 0 6
24370: PPUSH
24371: LD_VAR 0 7
24375: PPUSH
24376: LD_VAR 0 8
24380: PPUSH
24381: LD_VAR 0 9
24385: PPUSH
24386: LD_VAR 0 4
24390: PPUSH
24391: LD_VAR 0 5
24395: PPUSH
24396: CALL 24438 0 6
24400: GO 24433
24402: LD_INT 304
24404: DOUBLE
24405: EQUAL
24406: IFTRUE 24410
24408: GO 24432
24410: POP
// hHackTeleport ( unit , x , y ) ; end ;
24411: LD_VAR 0 2
24415: PPUSH
24416: LD_VAR 0 4
24420: PPUSH
24421: LD_VAR 0 5
24425: PPUSH
24426: CALL 26197 0 3
24430: GO 24433
24432: POP
// end ;
24433: LD_VAR 0 12
24437: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24438: LD_INT 0
24440: PPUSH
24441: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24442: LD_VAR 0 1
24446: PUSH
24447: LD_INT 1
24449: LESS
24450: PUSH
24451: LD_VAR 0 1
24455: PUSH
24456: LD_INT 3
24458: GREATER
24459: OR
24460: PUSH
24461: LD_VAR 0 5
24465: PPUSH
24466: LD_VAR 0 6
24470: PPUSH
24471: CALL_OW 428
24475: OR
24476: IFFALSE 24480
// exit ;
24478: GO 25200
// uc_side := your_side ;
24480: LD_ADDR_OWVAR 20
24484: PUSH
24485: LD_OWVAR 2
24489: ST_TO_ADDR
// uc_nation := nation ;
24490: LD_ADDR_OWVAR 21
24494: PUSH
24495: LD_VAR 0 1
24499: ST_TO_ADDR
// bc_level = 1 ;
24500: LD_ADDR_OWVAR 43
24504: PUSH
24505: LD_INT 1
24507: ST_TO_ADDR
// case btype of 1 :
24508: LD_VAR 0 2
24512: PUSH
24513: LD_INT 1
24515: DOUBLE
24516: EQUAL
24517: IFTRUE 24521
24519: GO 24532
24521: POP
// bc_type := b_depot ; 2 :
24522: LD_ADDR_OWVAR 42
24526: PUSH
24527: LD_INT 0
24529: ST_TO_ADDR
24530: GO 25144
24532: LD_INT 2
24534: DOUBLE
24535: EQUAL
24536: IFTRUE 24540
24538: GO 24551
24540: POP
// bc_type := b_warehouse ; 3 :
24541: LD_ADDR_OWVAR 42
24545: PUSH
24546: LD_INT 1
24548: ST_TO_ADDR
24549: GO 25144
24551: LD_INT 3
24553: DOUBLE
24554: EQUAL
24555: IFTRUE 24559
24557: GO 24570
24559: POP
// bc_type := b_lab ; 4 .. 9 :
24560: LD_ADDR_OWVAR 42
24564: PUSH
24565: LD_INT 6
24567: ST_TO_ADDR
24568: GO 25144
24570: LD_INT 4
24572: DOUBLE
24573: GREATEREQUAL
24574: IFFALSE 24582
24576: LD_INT 9
24578: DOUBLE
24579: LESSEQUAL
24580: IFTRUE 24584
24582: GO 24636
24584: POP
// begin bc_type := b_lab_half ;
24585: LD_ADDR_OWVAR 42
24589: PUSH
24590: LD_INT 7
24592: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24593: LD_ADDR_OWVAR 44
24597: PUSH
24598: LD_INT 10
24600: PUSH
24601: LD_INT 11
24603: PUSH
24604: LD_INT 12
24606: PUSH
24607: LD_INT 15
24609: PUSH
24610: LD_INT 14
24612: PUSH
24613: LD_INT 13
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: PUSH
24624: LD_VAR 0 2
24628: PUSH
24629: LD_INT 3
24631: MINUS
24632: ARRAY
24633: ST_TO_ADDR
// end ; 10 .. 13 :
24634: GO 25144
24636: LD_INT 10
24638: DOUBLE
24639: GREATEREQUAL
24640: IFFALSE 24648
24642: LD_INT 13
24644: DOUBLE
24645: LESSEQUAL
24646: IFTRUE 24650
24648: GO 24727
24650: POP
// begin bc_type := b_lab_full ;
24651: LD_ADDR_OWVAR 42
24655: PUSH
24656: LD_INT 8
24658: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24659: LD_ADDR_OWVAR 44
24663: PUSH
24664: LD_INT 10
24666: PUSH
24667: LD_INT 12
24669: PUSH
24670: LD_INT 14
24672: PUSH
24673: LD_INT 13
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: PUSH
24682: LD_VAR 0 2
24686: PUSH
24687: LD_INT 9
24689: MINUS
24690: ARRAY
24691: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24692: LD_ADDR_OWVAR 45
24696: PUSH
24697: LD_INT 11
24699: PUSH
24700: LD_INT 15
24702: PUSH
24703: LD_INT 12
24705: PUSH
24706: LD_INT 15
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: PUSH
24715: LD_VAR 0 2
24719: PUSH
24720: LD_INT 9
24722: MINUS
24723: ARRAY
24724: ST_TO_ADDR
// end ; 14 :
24725: GO 25144
24727: LD_INT 14
24729: DOUBLE
24730: EQUAL
24731: IFTRUE 24735
24733: GO 24746
24735: POP
// bc_type := b_workshop ; 15 :
24736: LD_ADDR_OWVAR 42
24740: PUSH
24741: LD_INT 2
24743: ST_TO_ADDR
24744: GO 25144
24746: LD_INT 15
24748: DOUBLE
24749: EQUAL
24750: IFTRUE 24754
24752: GO 24765
24754: POP
// bc_type := b_factory ; 16 :
24755: LD_ADDR_OWVAR 42
24759: PUSH
24760: LD_INT 3
24762: ST_TO_ADDR
24763: GO 25144
24765: LD_INT 16
24767: DOUBLE
24768: EQUAL
24769: IFTRUE 24773
24771: GO 24784
24773: POP
// bc_type := b_ext_gun ; 17 :
24774: LD_ADDR_OWVAR 42
24778: PUSH
24779: LD_INT 17
24781: ST_TO_ADDR
24782: GO 25144
24784: LD_INT 17
24786: DOUBLE
24787: EQUAL
24788: IFTRUE 24792
24790: GO 24820
24792: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24793: LD_ADDR_OWVAR 42
24797: PUSH
24798: LD_INT 19
24800: PUSH
24801: LD_INT 23
24803: PUSH
24804: LD_INT 19
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: LIST
24811: PUSH
24812: LD_VAR 0 1
24816: ARRAY
24817: ST_TO_ADDR
24818: GO 25144
24820: LD_INT 18
24822: DOUBLE
24823: EQUAL
24824: IFTRUE 24828
24826: GO 24839
24828: POP
// bc_type := b_ext_radar ; 19 :
24829: LD_ADDR_OWVAR 42
24833: PUSH
24834: LD_INT 20
24836: ST_TO_ADDR
24837: GO 25144
24839: LD_INT 19
24841: DOUBLE
24842: EQUAL
24843: IFTRUE 24847
24845: GO 24858
24847: POP
// bc_type := b_ext_radio ; 20 :
24848: LD_ADDR_OWVAR 42
24852: PUSH
24853: LD_INT 22
24855: ST_TO_ADDR
24856: GO 25144
24858: LD_INT 20
24860: DOUBLE
24861: EQUAL
24862: IFTRUE 24866
24864: GO 24877
24866: POP
// bc_type := b_ext_siberium ; 21 :
24867: LD_ADDR_OWVAR 42
24871: PUSH
24872: LD_INT 21
24874: ST_TO_ADDR
24875: GO 25144
24877: LD_INT 21
24879: DOUBLE
24880: EQUAL
24881: IFTRUE 24885
24883: GO 24896
24885: POP
// bc_type := b_ext_computer ; 22 :
24886: LD_ADDR_OWVAR 42
24890: PUSH
24891: LD_INT 24
24893: ST_TO_ADDR
24894: GO 25144
24896: LD_INT 22
24898: DOUBLE
24899: EQUAL
24900: IFTRUE 24904
24902: GO 24915
24904: POP
// bc_type := b_ext_track ; 23 :
24905: LD_ADDR_OWVAR 42
24909: PUSH
24910: LD_INT 16
24912: ST_TO_ADDR
24913: GO 25144
24915: LD_INT 23
24917: DOUBLE
24918: EQUAL
24919: IFTRUE 24923
24921: GO 24934
24923: POP
// bc_type := b_ext_laser ; 24 :
24924: LD_ADDR_OWVAR 42
24928: PUSH
24929: LD_INT 25
24931: ST_TO_ADDR
24932: GO 25144
24934: LD_INT 24
24936: DOUBLE
24937: EQUAL
24938: IFTRUE 24942
24940: GO 24953
24942: POP
// bc_type := b_control_tower ; 25 :
24943: LD_ADDR_OWVAR 42
24947: PUSH
24948: LD_INT 36
24950: ST_TO_ADDR
24951: GO 25144
24953: LD_INT 25
24955: DOUBLE
24956: EQUAL
24957: IFTRUE 24961
24959: GO 24972
24961: POP
// bc_type := b_breastwork ; 26 :
24962: LD_ADDR_OWVAR 42
24966: PUSH
24967: LD_INT 31
24969: ST_TO_ADDR
24970: GO 25144
24972: LD_INT 26
24974: DOUBLE
24975: EQUAL
24976: IFTRUE 24980
24978: GO 24991
24980: POP
// bc_type := b_bunker ; 27 :
24981: LD_ADDR_OWVAR 42
24985: PUSH
24986: LD_INT 32
24988: ST_TO_ADDR
24989: GO 25144
24991: LD_INT 27
24993: DOUBLE
24994: EQUAL
24995: IFTRUE 24999
24997: GO 25010
24999: POP
// bc_type := b_turret ; 28 :
25000: LD_ADDR_OWVAR 42
25004: PUSH
25005: LD_INT 33
25007: ST_TO_ADDR
25008: GO 25144
25010: LD_INT 28
25012: DOUBLE
25013: EQUAL
25014: IFTRUE 25018
25016: GO 25029
25018: POP
// bc_type := b_armoury ; 29 :
25019: LD_ADDR_OWVAR 42
25023: PUSH
25024: LD_INT 4
25026: ST_TO_ADDR
25027: GO 25144
25029: LD_INT 29
25031: DOUBLE
25032: EQUAL
25033: IFTRUE 25037
25035: GO 25048
25037: POP
// bc_type := b_barracks ; 30 :
25038: LD_ADDR_OWVAR 42
25042: PUSH
25043: LD_INT 5
25045: ST_TO_ADDR
25046: GO 25144
25048: LD_INT 30
25050: DOUBLE
25051: EQUAL
25052: IFTRUE 25056
25054: GO 25067
25056: POP
// bc_type := b_solar_power ; 31 :
25057: LD_ADDR_OWVAR 42
25061: PUSH
25062: LD_INT 27
25064: ST_TO_ADDR
25065: GO 25144
25067: LD_INT 31
25069: DOUBLE
25070: EQUAL
25071: IFTRUE 25075
25073: GO 25086
25075: POP
// bc_type := b_oil_power ; 32 :
25076: LD_ADDR_OWVAR 42
25080: PUSH
25081: LD_INT 26
25083: ST_TO_ADDR
25084: GO 25144
25086: LD_INT 32
25088: DOUBLE
25089: EQUAL
25090: IFTRUE 25094
25092: GO 25105
25094: POP
// bc_type := b_siberite_power ; 33 :
25095: LD_ADDR_OWVAR 42
25099: PUSH
25100: LD_INT 28
25102: ST_TO_ADDR
25103: GO 25144
25105: LD_INT 33
25107: DOUBLE
25108: EQUAL
25109: IFTRUE 25113
25111: GO 25124
25113: POP
// bc_type := b_oil_mine ; 34 :
25114: LD_ADDR_OWVAR 42
25118: PUSH
25119: LD_INT 29
25121: ST_TO_ADDR
25122: GO 25144
25124: LD_INT 34
25126: DOUBLE
25127: EQUAL
25128: IFTRUE 25132
25130: GO 25143
25132: POP
// bc_type := b_siberite_mine ; end ;
25133: LD_ADDR_OWVAR 42
25137: PUSH
25138: LD_INT 30
25140: ST_TO_ADDR
25141: GO 25144
25143: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25144: LD_ADDR_VAR 0 8
25148: PUSH
25149: LD_VAR 0 5
25153: PPUSH
25154: LD_VAR 0 6
25158: PPUSH
25159: LD_VAR 0 3
25163: PPUSH
25164: CALL_OW 47
25168: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25169: LD_OWVAR 42
25173: PUSH
25174: LD_INT 32
25176: PUSH
25177: LD_INT 33
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: IN
25184: IFFALSE 25200
// PlaceWeaponTurret ( b , weapon ) ;
25186: LD_VAR 0 8
25190: PPUSH
25191: LD_VAR 0 4
25195: PPUSH
25196: CALL_OW 431
// end ;
25200: LD_VAR 0 7
25204: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25205: LD_INT 0
25207: PPUSH
25208: PPUSH
25209: PPUSH
25210: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25211: LD_ADDR_VAR 0 4
25215: PUSH
25216: LD_INT 22
25218: PUSH
25219: LD_OWVAR 2
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 2
25230: PUSH
25231: LD_INT 30
25233: PUSH
25234: LD_INT 0
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 30
25243: PUSH
25244: LD_INT 1
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: LIST
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PPUSH
25260: CALL_OW 69
25264: ST_TO_ADDR
// if not tmp then
25265: LD_VAR 0 4
25269: NOT
25270: IFFALSE 25274
// exit ;
25272: GO 25333
// for i in tmp do
25274: LD_ADDR_VAR 0 2
25278: PUSH
25279: LD_VAR 0 4
25283: PUSH
25284: FOR_IN
25285: IFFALSE 25331
// for j = 1 to 3 do
25287: LD_ADDR_VAR 0 3
25291: PUSH
25292: DOUBLE
25293: LD_INT 1
25295: DEC
25296: ST_TO_ADDR
25297: LD_INT 3
25299: PUSH
25300: FOR_TO
25301: IFFALSE 25327
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25303: LD_VAR 0 2
25307: PPUSH
25308: CALL_OW 274
25312: PPUSH
25313: LD_VAR 0 3
25317: PPUSH
25318: LD_INT 99999
25320: PPUSH
25321: CALL_OW 277
25325: GO 25300
25327: POP
25328: POP
25329: GO 25284
25331: POP
25332: POP
// end ;
25333: LD_VAR 0 1
25337: RET
// export function hHackSetLevel10 ; var i , j ; begin
25338: LD_INT 0
25340: PPUSH
25341: PPUSH
25342: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25343: LD_ADDR_VAR 0 2
25347: PUSH
25348: LD_INT 21
25350: PUSH
25351: LD_INT 1
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PPUSH
25358: CALL_OW 69
25362: PUSH
25363: FOR_IN
25364: IFFALSE 25416
// if IsSelected ( i ) then
25366: LD_VAR 0 2
25370: PPUSH
25371: CALL_OW 306
25375: IFFALSE 25414
// begin for j := 1 to 4 do
25377: LD_ADDR_VAR 0 3
25381: PUSH
25382: DOUBLE
25383: LD_INT 1
25385: DEC
25386: ST_TO_ADDR
25387: LD_INT 4
25389: PUSH
25390: FOR_TO
25391: IFFALSE 25412
// SetSkill ( i , j , 10 ) ;
25393: LD_VAR 0 2
25397: PPUSH
25398: LD_VAR 0 3
25402: PPUSH
25403: LD_INT 10
25405: PPUSH
25406: CALL_OW 237
25410: GO 25390
25412: POP
25413: POP
// end ;
25414: GO 25363
25416: POP
25417: POP
// end ;
25418: LD_VAR 0 1
25422: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25423: LD_INT 0
25425: PPUSH
25426: PPUSH
25427: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25428: LD_ADDR_VAR 0 2
25432: PUSH
25433: LD_INT 22
25435: PUSH
25436: LD_OWVAR 2
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 21
25447: PUSH
25448: LD_INT 1
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PPUSH
25459: CALL_OW 69
25463: PUSH
25464: FOR_IN
25465: IFFALSE 25506
// begin for j := 1 to 4 do
25467: LD_ADDR_VAR 0 3
25471: PUSH
25472: DOUBLE
25473: LD_INT 1
25475: DEC
25476: ST_TO_ADDR
25477: LD_INT 4
25479: PUSH
25480: FOR_TO
25481: IFFALSE 25502
// SetSkill ( i , j , 10 ) ;
25483: LD_VAR 0 2
25487: PPUSH
25488: LD_VAR 0 3
25492: PPUSH
25493: LD_INT 10
25495: PPUSH
25496: CALL_OW 237
25500: GO 25480
25502: POP
25503: POP
// end ;
25504: GO 25464
25506: POP
25507: POP
// end ;
25508: LD_VAR 0 1
25512: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25513: LD_INT 0
25515: PPUSH
// uc_side := your_side ;
25516: LD_ADDR_OWVAR 20
25520: PUSH
25521: LD_OWVAR 2
25525: ST_TO_ADDR
// uc_nation := nation ;
25526: LD_ADDR_OWVAR 21
25530: PUSH
25531: LD_VAR 0 1
25535: ST_TO_ADDR
// InitHc ;
25536: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25540: LD_INT 0
25542: PPUSH
25543: LD_VAR 0 2
25547: PPUSH
25548: LD_VAR 0 3
25552: PPUSH
25553: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25557: LD_VAR 0 4
25561: PPUSH
25562: LD_VAR 0 5
25566: PPUSH
25567: CALL_OW 428
25571: PUSH
25572: LD_INT 0
25574: EQUAL
25575: IFFALSE 25599
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25577: CALL_OW 44
25581: PPUSH
25582: LD_VAR 0 4
25586: PPUSH
25587: LD_VAR 0 5
25591: PPUSH
25592: LD_INT 1
25594: PPUSH
25595: CALL_OW 48
// end ;
25599: LD_VAR 0 6
25603: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25604: LD_INT 0
25606: PPUSH
25607: PPUSH
// uc_side := your_side ;
25608: LD_ADDR_OWVAR 20
25612: PUSH
25613: LD_OWVAR 2
25617: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25618: LD_VAR 0 1
25622: PUSH
25623: LD_INT 1
25625: PUSH
25626: LD_INT 2
25628: PUSH
25629: LD_INT 3
25631: PUSH
25632: LD_INT 4
25634: PUSH
25635: LD_INT 5
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: IN
25645: IFFALSE 25657
// uc_nation := nation_american else
25647: LD_ADDR_OWVAR 21
25651: PUSH
25652: LD_INT 1
25654: ST_TO_ADDR
25655: GO 25700
// if chassis in [ 11 , 12 , 13 , 14 ] then
25657: LD_VAR 0 1
25661: PUSH
25662: LD_INT 11
25664: PUSH
25665: LD_INT 12
25667: PUSH
25668: LD_INT 13
25670: PUSH
25671: LD_INT 14
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: IN
25680: IFFALSE 25692
// uc_nation := nation_arabian else
25682: LD_ADDR_OWVAR 21
25686: PUSH
25687: LD_INT 2
25689: ST_TO_ADDR
25690: GO 25700
// uc_nation := nation_russian ;
25692: LD_ADDR_OWVAR 21
25696: PUSH
25697: LD_INT 3
25699: ST_TO_ADDR
// vc_chassis := chassis ;
25700: LD_ADDR_OWVAR 37
25704: PUSH
25705: LD_VAR 0 1
25709: ST_TO_ADDR
// vc_engine := engine ;
25710: LD_ADDR_OWVAR 39
25714: PUSH
25715: LD_VAR 0 2
25719: ST_TO_ADDR
// vc_control := control ;
25720: LD_ADDR_OWVAR 38
25724: PUSH
25725: LD_VAR 0 3
25729: ST_TO_ADDR
// vc_weapon := weapon ;
25730: LD_ADDR_OWVAR 40
25734: PUSH
25735: LD_VAR 0 4
25739: ST_TO_ADDR
// un := CreateVehicle ;
25740: LD_ADDR_VAR 0 8
25744: PUSH
25745: CALL_OW 45
25749: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25750: LD_VAR 0 8
25754: PPUSH
25755: LD_INT 0
25757: PPUSH
25758: LD_INT 5
25760: PPUSH
25761: CALL_OW 12
25765: PPUSH
25766: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25770: LD_VAR 0 8
25774: PPUSH
25775: LD_VAR 0 5
25779: PPUSH
25780: LD_VAR 0 6
25784: PPUSH
25785: LD_INT 1
25787: PPUSH
25788: CALL_OW 48
// end ;
25792: LD_VAR 0 7
25796: RET
// export hInvincible ; every 1 do
25797: GO 25799
25799: DISABLE
// hInvincible := [ ] ;
25800: LD_ADDR_EXP 116
25804: PUSH
25805: EMPTY
25806: ST_TO_ADDR
25807: END
// every 10 do var i ;
25808: GO 25810
25810: DISABLE
25811: LD_INT 0
25813: PPUSH
// begin enable ;
25814: ENABLE
// if not hInvincible then
25815: LD_EXP 116
25819: NOT
25820: IFFALSE 25824
// exit ;
25822: GO 25868
// for i in hInvincible do
25824: LD_ADDR_VAR 0 1
25828: PUSH
25829: LD_EXP 116
25833: PUSH
25834: FOR_IN
25835: IFFALSE 25866
// if GetLives ( i ) < 1000 then
25837: LD_VAR 0 1
25841: PPUSH
25842: CALL_OW 256
25846: PUSH
25847: LD_INT 1000
25849: LESS
25850: IFFALSE 25864
// SetLives ( i , 1000 ) ;
25852: LD_VAR 0 1
25856: PPUSH
25857: LD_INT 1000
25859: PPUSH
25860: CALL_OW 234
25864: GO 25834
25866: POP
25867: POP
// end ;
25868: PPOPN 1
25870: END
// export function hHackInvincible ; var i ; begin
25871: LD_INT 0
25873: PPUSH
25874: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25875: LD_ADDR_VAR 0 2
25879: PUSH
25880: LD_INT 2
25882: PUSH
25883: LD_INT 21
25885: PUSH
25886: LD_INT 1
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 21
25895: PUSH
25896: LD_INT 2
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: LIST
25907: PPUSH
25908: CALL_OW 69
25912: PUSH
25913: FOR_IN
25914: IFFALSE 25975
// if IsSelected ( i ) then
25916: LD_VAR 0 2
25920: PPUSH
25921: CALL_OW 306
25925: IFFALSE 25973
// begin if i in hInvincible then
25927: LD_VAR 0 2
25931: PUSH
25932: LD_EXP 116
25936: IN
25937: IFFALSE 25957
// hInvincible := hInvincible diff i else
25939: LD_ADDR_EXP 116
25943: PUSH
25944: LD_EXP 116
25948: PUSH
25949: LD_VAR 0 2
25953: DIFF
25954: ST_TO_ADDR
25955: GO 25973
// hInvincible := hInvincible union i ;
25957: LD_ADDR_EXP 116
25961: PUSH
25962: LD_EXP 116
25966: PUSH
25967: LD_VAR 0 2
25971: UNION
25972: ST_TO_ADDR
// end ;
25973: GO 25913
25975: POP
25976: POP
// end ;
25977: LD_VAR 0 1
25981: RET
// export function hHackInvisible ; var i , j ; begin
25982: LD_INT 0
25984: PPUSH
25985: PPUSH
25986: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25987: LD_ADDR_VAR 0 2
25991: PUSH
25992: LD_INT 21
25994: PUSH
25995: LD_INT 1
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PPUSH
26002: CALL_OW 69
26006: PUSH
26007: FOR_IN
26008: IFFALSE 26032
// if IsSelected ( i ) then
26010: LD_VAR 0 2
26014: PPUSH
26015: CALL_OW 306
26019: IFFALSE 26030
// ComForceInvisible ( i ) ;
26021: LD_VAR 0 2
26025: PPUSH
26026: CALL_OW 496
26030: GO 26007
26032: POP
26033: POP
// end ;
26034: LD_VAR 0 1
26038: RET
// export function hHackChangeYourSide ; begin
26039: LD_INT 0
26041: PPUSH
// if your_side = 8 then
26042: LD_OWVAR 2
26046: PUSH
26047: LD_INT 8
26049: EQUAL
26050: IFFALSE 26062
// your_side := 0 else
26052: LD_ADDR_OWVAR 2
26056: PUSH
26057: LD_INT 0
26059: ST_TO_ADDR
26060: GO 26076
// your_side := your_side + 1 ;
26062: LD_ADDR_OWVAR 2
26066: PUSH
26067: LD_OWVAR 2
26071: PUSH
26072: LD_INT 1
26074: PLUS
26075: ST_TO_ADDR
// end ;
26076: LD_VAR 0 1
26080: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26081: LD_INT 0
26083: PPUSH
26084: PPUSH
26085: PPUSH
// for i in all_units do
26086: LD_ADDR_VAR 0 2
26090: PUSH
26091: LD_OWVAR 3
26095: PUSH
26096: FOR_IN
26097: IFFALSE 26175
// if IsSelected ( i ) then
26099: LD_VAR 0 2
26103: PPUSH
26104: CALL_OW 306
26108: IFFALSE 26173
// begin j := GetSide ( i ) ;
26110: LD_ADDR_VAR 0 3
26114: PUSH
26115: LD_VAR 0 2
26119: PPUSH
26120: CALL_OW 255
26124: ST_TO_ADDR
// if j = 8 then
26125: LD_VAR 0 3
26129: PUSH
26130: LD_INT 8
26132: EQUAL
26133: IFFALSE 26145
// j := 0 else
26135: LD_ADDR_VAR 0 3
26139: PUSH
26140: LD_INT 0
26142: ST_TO_ADDR
26143: GO 26159
// j := j + 1 ;
26145: LD_ADDR_VAR 0 3
26149: PUSH
26150: LD_VAR 0 3
26154: PUSH
26155: LD_INT 1
26157: PLUS
26158: ST_TO_ADDR
// SetSide ( i , j ) ;
26159: LD_VAR 0 2
26163: PPUSH
26164: LD_VAR 0 3
26168: PPUSH
26169: CALL_OW 235
// end ;
26173: GO 26096
26175: POP
26176: POP
// end ;
26177: LD_VAR 0 1
26181: RET
// export function hHackFog ; begin
26182: LD_INT 0
26184: PPUSH
// FogOff ( true ) ;
26185: LD_INT 1
26187: PPUSH
26188: CALL_OW 344
// end ;
26192: LD_VAR 0 1
26196: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26197: LD_INT 0
26199: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26200: LD_VAR 0 1
26204: PPUSH
26205: LD_VAR 0 2
26209: PPUSH
26210: LD_VAR 0 3
26214: PPUSH
26215: LD_INT 1
26217: PPUSH
26218: LD_INT 1
26220: PPUSH
26221: CALL_OW 483
// CenterOnXY ( x , y ) ;
26225: LD_VAR 0 2
26229: PPUSH
26230: LD_VAR 0 3
26234: PPUSH
26235: CALL_OW 84
// end ; end_of_file
26239: LD_VAR 0 4
26243: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26244: LD_INT 0
26246: PPUSH
26247: PPUSH
26248: PPUSH
26249: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26250: LD_VAR 0 1
26254: PPUSH
26255: CALL_OW 264
26259: PUSH
26260: LD_EXP 47
26264: EQUAL
26265: IFFALSE 26337
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26267: LD_INT 68
26269: PPUSH
26270: LD_VAR 0 1
26274: PPUSH
26275: CALL_OW 255
26279: PPUSH
26280: CALL_OW 321
26284: PUSH
26285: LD_INT 2
26287: EQUAL
26288: IFFALSE 26300
// eff := 70 else
26290: LD_ADDR_VAR 0 4
26294: PUSH
26295: LD_INT 70
26297: ST_TO_ADDR
26298: GO 26308
// eff := 30 ;
26300: LD_ADDR_VAR 0 4
26304: PUSH
26305: LD_INT 30
26307: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26308: LD_VAR 0 1
26312: PPUSH
26313: CALL_OW 250
26317: PPUSH
26318: LD_VAR 0 1
26322: PPUSH
26323: CALL_OW 251
26327: PPUSH
26328: LD_VAR 0 4
26332: PPUSH
26333: CALL_OW 495
// end ; end ;
26337: LD_VAR 0 2
26341: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26342: LD_INT 0
26344: PPUSH
// end ;
26345: LD_VAR 0 4
26349: RET
// export function SOS_Command ( cmd ) ; begin
26350: LD_INT 0
26352: PPUSH
// end ;
26353: LD_VAR 0 2
26357: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26358: LD_INT 0
26360: PPUSH
// if cmd = 121 then
26361: LD_VAR 0 1
26365: PUSH
26366: LD_INT 121
26368: EQUAL
26369: IFFALSE 26371
// end ;
26371: LD_VAR 0 6
26375: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26376: LD_INT 0
26378: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26379: LD_VAR 0 1
26383: PUSH
26384: LD_INT 250
26386: EQUAL
26387: PUSH
26388: LD_VAR 0 2
26392: PPUSH
26393: CALL_OW 264
26397: PUSH
26398: LD_EXP 50
26402: EQUAL
26403: AND
26404: IFFALSE 26425
// MinerPlaceMine ( unit , x , y ) ;
26406: LD_VAR 0 2
26410: PPUSH
26411: LD_VAR 0 4
26415: PPUSH
26416: LD_VAR 0 5
26420: PPUSH
26421: CALL 28774 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26425: LD_VAR 0 1
26429: PUSH
26430: LD_INT 251
26432: EQUAL
26433: PUSH
26434: LD_VAR 0 2
26438: PPUSH
26439: CALL_OW 264
26443: PUSH
26444: LD_EXP 50
26448: EQUAL
26449: AND
26450: IFFALSE 26471
// MinerDetonateMine ( unit , x , y ) ;
26452: LD_VAR 0 2
26456: PPUSH
26457: LD_VAR 0 4
26461: PPUSH
26462: LD_VAR 0 5
26466: PPUSH
26467: CALL 29051 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26471: LD_VAR 0 1
26475: PUSH
26476: LD_INT 252
26478: EQUAL
26479: PUSH
26480: LD_VAR 0 2
26484: PPUSH
26485: CALL_OW 264
26489: PUSH
26490: LD_EXP 50
26494: EQUAL
26495: AND
26496: IFFALSE 26517
// MinerCreateMinefield ( unit , x , y ) ;
26498: LD_VAR 0 2
26502: PPUSH
26503: LD_VAR 0 4
26507: PPUSH
26508: LD_VAR 0 5
26512: PPUSH
26513: CALL 29468 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26517: LD_VAR 0 1
26521: PUSH
26522: LD_INT 253
26524: EQUAL
26525: PUSH
26526: LD_VAR 0 2
26530: PPUSH
26531: CALL_OW 257
26535: PUSH
26536: LD_INT 5
26538: EQUAL
26539: AND
26540: IFFALSE 26561
// ComBinocular ( unit , x , y ) ;
26542: LD_VAR 0 2
26546: PPUSH
26547: LD_VAR 0 4
26551: PPUSH
26552: LD_VAR 0 5
26556: PPUSH
26557: CALL 29839 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26561: LD_VAR 0 1
26565: PUSH
26566: LD_INT 254
26568: EQUAL
26569: PUSH
26570: LD_VAR 0 2
26574: PPUSH
26575: CALL_OW 264
26579: PUSH
26580: LD_EXP 45
26584: EQUAL
26585: AND
26586: PUSH
26587: LD_VAR 0 3
26591: PPUSH
26592: CALL_OW 263
26596: PUSH
26597: LD_INT 3
26599: EQUAL
26600: AND
26601: IFFALSE 26617
// HackDestroyVehicle ( unit , selectedUnit ) ;
26603: LD_VAR 0 2
26607: PPUSH
26608: LD_VAR 0 3
26612: PPUSH
26613: CALL 28134 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26617: LD_VAR 0 1
26621: PUSH
26622: LD_INT 255
26624: EQUAL
26625: PUSH
26626: LD_VAR 0 2
26630: PPUSH
26631: CALL_OW 264
26635: PUSH
26636: LD_INT 14
26638: PUSH
26639: LD_INT 53
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: IN
26646: AND
26647: PUSH
26648: LD_VAR 0 4
26652: PPUSH
26653: LD_VAR 0 5
26657: PPUSH
26658: CALL_OW 488
26662: AND
26663: IFFALSE 26687
// CutTreeXYR ( unit , x , y , 12 ) ;
26665: LD_VAR 0 2
26669: PPUSH
26670: LD_VAR 0 4
26674: PPUSH
26675: LD_VAR 0 5
26679: PPUSH
26680: LD_INT 12
26682: PPUSH
26683: CALL 26700 0 4
// end ;
26687: LD_VAR 0 6
26691: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
26692: LD_INT 0
26694: PPUSH
// end ;
26695: LD_VAR 0 4
26699: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26700: LD_INT 0
26702: PPUSH
26703: PPUSH
26704: PPUSH
26705: PPUSH
26706: PPUSH
26707: PPUSH
26708: PPUSH
26709: PPUSH
26710: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26711: LD_VAR 0 1
26715: NOT
26716: PUSH
26717: LD_VAR 0 2
26721: PPUSH
26722: LD_VAR 0 3
26726: PPUSH
26727: CALL_OW 488
26731: NOT
26732: OR
26733: PUSH
26734: LD_VAR 0 4
26738: NOT
26739: OR
26740: IFFALSE 26744
// exit ;
26742: GO 27084
// list := [ ] ;
26744: LD_ADDR_VAR 0 13
26748: PUSH
26749: EMPTY
26750: ST_TO_ADDR
// if x - r < 0 then
26751: LD_VAR 0 2
26755: PUSH
26756: LD_VAR 0 4
26760: MINUS
26761: PUSH
26762: LD_INT 0
26764: LESS
26765: IFFALSE 26777
// min_x := 0 else
26767: LD_ADDR_VAR 0 7
26771: PUSH
26772: LD_INT 0
26774: ST_TO_ADDR
26775: GO 26793
// min_x := x - r ;
26777: LD_ADDR_VAR 0 7
26781: PUSH
26782: LD_VAR 0 2
26786: PUSH
26787: LD_VAR 0 4
26791: MINUS
26792: ST_TO_ADDR
// if y - r < 0 then
26793: LD_VAR 0 3
26797: PUSH
26798: LD_VAR 0 4
26802: MINUS
26803: PUSH
26804: LD_INT 0
26806: LESS
26807: IFFALSE 26819
// min_y := 0 else
26809: LD_ADDR_VAR 0 8
26813: PUSH
26814: LD_INT 0
26816: ST_TO_ADDR
26817: GO 26835
// min_y := y - r ;
26819: LD_ADDR_VAR 0 8
26823: PUSH
26824: LD_VAR 0 3
26828: PUSH
26829: LD_VAR 0 4
26833: MINUS
26834: ST_TO_ADDR
// max_x := x + r ;
26835: LD_ADDR_VAR 0 9
26839: PUSH
26840: LD_VAR 0 2
26844: PUSH
26845: LD_VAR 0 4
26849: PLUS
26850: ST_TO_ADDR
// max_y := y + r ;
26851: LD_ADDR_VAR 0 10
26855: PUSH
26856: LD_VAR 0 3
26860: PUSH
26861: LD_VAR 0 4
26865: PLUS
26866: ST_TO_ADDR
// for _x = min_x to max_x do
26867: LD_ADDR_VAR 0 11
26871: PUSH
26872: DOUBLE
26873: LD_VAR 0 7
26877: DEC
26878: ST_TO_ADDR
26879: LD_VAR 0 9
26883: PUSH
26884: FOR_TO
26885: IFFALSE 27002
// for _y = min_y to max_y do
26887: LD_ADDR_VAR 0 12
26891: PUSH
26892: DOUBLE
26893: LD_VAR 0 8
26897: DEC
26898: ST_TO_ADDR
26899: LD_VAR 0 10
26903: PUSH
26904: FOR_TO
26905: IFFALSE 26998
// begin if not ValidHex ( _x , _y ) then
26907: LD_VAR 0 11
26911: PPUSH
26912: LD_VAR 0 12
26916: PPUSH
26917: CALL_OW 488
26921: NOT
26922: IFFALSE 26926
// continue ;
26924: GO 26904
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26926: LD_VAR 0 11
26930: PPUSH
26931: LD_VAR 0 12
26935: PPUSH
26936: CALL_OW 351
26940: PUSH
26941: LD_VAR 0 11
26945: PPUSH
26946: LD_VAR 0 12
26950: PPUSH
26951: CALL_OW 554
26955: AND
26956: IFFALSE 26996
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26958: LD_ADDR_VAR 0 13
26962: PUSH
26963: LD_VAR 0 13
26967: PPUSH
26968: LD_VAR 0 13
26972: PUSH
26973: LD_INT 1
26975: PLUS
26976: PPUSH
26977: LD_VAR 0 11
26981: PUSH
26982: LD_VAR 0 12
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PPUSH
26991: CALL_OW 2
26995: ST_TO_ADDR
// end ;
26996: GO 26904
26998: POP
26999: POP
27000: GO 26884
27002: POP
27003: POP
// if not list then
27004: LD_VAR 0 13
27008: NOT
27009: IFFALSE 27013
// exit ;
27011: GO 27084
// for i in list do
27013: LD_ADDR_VAR 0 6
27017: PUSH
27018: LD_VAR 0 13
27022: PUSH
27023: FOR_IN
27024: IFFALSE 27082
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27026: LD_VAR 0 1
27030: PPUSH
27031: LD_STRING M
27033: PUSH
27034: LD_VAR 0 6
27038: PUSH
27039: LD_INT 1
27041: ARRAY
27042: PUSH
27043: LD_VAR 0 6
27047: PUSH
27048: LD_INT 2
27050: ARRAY
27051: PUSH
27052: LD_INT 0
27054: PUSH
27055: LD_INT 0
27057: PUSH
27058: LD_INT 0
27060: PUSH
27061: LD_INT 0
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: PUSH
27073: EMPTY
27074: LIST
27075: PPUSH
27076: CALL_OW 447
27080: GO 27023
27082: POP
27083: POP
// end ;
27084: LD_VAR 0 5
27088: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27089: LD_EXP 119
27093: NOT
27094: IFFALSE 27144
27096: GO 27098
27098: DISABLE
// begin initHack := true ;
27099: LD_ADDR_EXP 119
27103: PUSH
27104: LD_INT 1
27106: ST_TO_ADDR
// hackTanks := [ ] ;
27107: LD_ADDR_EXP 120
27111: PUSH
27112: EMPTY
27113: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27114: LD_ADDR_EXP 121
27118: PUSH
27119: EMPTY
27120: ST_TO_ADDR
// hackLimit := 3 ;
27121: LD_ADDR_EXP 122
27125: PUSH
27126: LD_INT 3
27128: ST_TO_ADDR
// hackDist := 12 ;
27129: LD_ADDR_EXP 123
27133: PUSH
27134: LD_INT 12
27136: ST_TO_ADDR
// hackCounter := [ ] ;
27137: LD_ADDR_EXP 124
27141: PUSH
27142: EMPTY
27143: ST_TO_ADDR
// end ;
27144: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27145: LD_EXP 119
27149: PUSH
27150: LD_INT 34
27152: PUSH
27153: LD_EXP 45
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PPUSH
27162: CALL_OW 69
27166: AND
27167: IFFALSE 27422
27169: GO 27171
27171: DISABLE
27172: LD_INT 0
27174: PPUSH
27175: PPUSH
// begin enable ;
27176: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27177: LD_ADDR_VAR 0 1
27181: PUSH
27182: LD_INT 34
27184: PUSH
27185: LD_EXP 45
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PPUSH
27194: CALL_OW 69
27198: PUSH
27199: FOR_IN
27200: IFFALSE 27420
// begin if not i in hackTanks then
27202: LD_VAR 0 1
27206: PUSH
27207: LD_EXP 120
27211: IN
27212: NOT
27213: IFFALSE 27296
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27215: LD_ADDR_EXP 120
27219: PUSH
27220: LD_EXP 120
27224: PPUSH
27225: LD_EXP 120
27229: PUSH
27230: LD_INT 1
27232: PLUS
27233: PPUSH
27234: LD_VAR 0 1
27238: PPUSH
27239: CALL_OW 1
27243: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27244: LD_ADDR_EXP 121
27248: PUSH
27249: LD_EXP 121
27253: PPUSH
27254: LD_EXP 121
27258: PUSH
27259: LD_INT 1
27261: PLUS
27262: PPUSH
27263: EMPTY
27264: PPUSH
27265: CALL_OW 1
27269: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27270: LD_ADDR_EXP 124
27274: PUSH
27275: LD_EXP 124
27279: PPUSH
27280: LD_EXP 124
27284: PUSH
27285: LD_INT 1
27287: PLUS
27288: PPUSH
27289: EMPTY
27290: PPUSH
27291: CALL_OW 1
27295: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27296: LD_VAR 0 1
27300: PPUSH
27301: CALL_OW 302
27305: NOT
27306: IFFALSE 27319
// begin HackUnlinkAll ( i ) ;
27308: LD_VAR 0 1
27312: PPUSH
27313: CALL 27425 0 1
// continue ;
27317: GO 27199
// end ; HackCheckCapturedStatus ( i ) ;
27319: LD_VAR 0 1
27323: PPUSH
27324: CALL 27868 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27328: LD_ADDR_VAR 0 2
27332: PUSH
27333: LD_INT 81
27335: PUSH
27336: LD_VAR 0 1
27340: PPUSH
27341: CALL_OW 255
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 33
27352: PUSH
27353: LD_INT 3
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 91
27362: PUSH
27363: LD_VAR 0 1
27367: PUSH
27368: LD_EXP 123
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 50
27380: PUSH
27381: EMPTY
27382: LIST
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: PPUSH
27390: CALL_OW 69
27394: ST_TO_ADDR
// if not tmp then
27395: LD_VAR 0 2
27399: NOT
27400: IFFALSE 27404
// continue ;
27402: GO 27199
// HackLink ( i , tmp ) ;
27404: LD_VAR 0 1
27408: PPUSH
27409: LD_VAR 0 2
27413: PPUSH
27414: CALL 27561 0 2
// end ;
27418: GO 27199
27420: POP
27421: POP
// end ;
27422: PPOPN 2
27424: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27425: LD_INT 0
27427: PPUSH
27428: PPUSH
27429: PPUSH
// if not hack in hackTanks then
27430: LD_VAR 0 1
27434: PUSH
27435: LD_EXP 120
27439: IN
27440: NOT
27441: IFFALSE 27445
// exit ;
27443: GO 27556
// index := GetElementIndex ( hackTanks , hack ) ;
27445: LD_ADDR_VAR 0 4
27449: PUSH
27450: LD_EXP 120
27454: PPUSH
27455: LD_VAR 0 1
27459: PPUSH
27460: CALL 34990 0 2
27464: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27465: LD_EXP 121
27469: PUSH
27470: LD_VAR 0 4
27474: ARRAY
27475: IFFALSE 27556
// begin for i in hackTanksCaptured [ index ] do
27477: LD_ADDR_VAR 0 3
27481: PUSH
27482: LD_EXP 121
27486: PUSH
27487: LD_VAR 0 4
27491: ARRAY
27492: PUSH
27493: FOR_IN
27494: IFFALSE 27520
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27496: LD_VAR 0 3
27500: PUSH
27501: LD_INT 1
27503: ARRAY
27504: PPUSH
27505: LD_VAR 0 3
27509: PUSH
27510: LD_INT 2
27512: ARRAY
27513: PPUSH
27514: CALL_OW 235
27518: GO 27493
27520: POP
27521: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27522: LD_ADDR_EXP 121
27526: PUSH
27527: LD_EXP 121
27531: PPUSH
27532: LD_VAR 0 4
27536: PPUSH
27537: EMPTY
27538: PPUSH
27539: CALL_OW 1
27543: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27544: LD_VAR 0 1
27548: PPUSH
27549: LD_INT 0
27551: PPUSH
27552: CALL_OW 505
// end ; end ;
27556: LD_VAR 0 2
27560: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27561: LD_INT 0
27563: PPUSH
27564: PPUSH
27565: PPUSH
// if not hack in hackTanks or not vehicles then
27566: LD_VAR 0 1
27570: PUSH
27571: LD_EXP 120
27575: IN
27576: NOT
27577: PUSH
27578: LD_VAR 0 2
27582: NOT
27583: OR
27584: IFFALSE 27588
// exit ;
27586: GO 27863
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27588: LD_ADDR_VAR 0 2
27592: PUSH
27593: LD_VAR 0 1
27597: PPUSH
27598: LD_VAR 0 2
27602: PPUSH
27603: LD_INT 1
27605: PPUSH
27606: LD_INT 1
27608: PPUSH
27609: CALL 35640 0 4
27613: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27614: LD_ADDR_VAR 0 5
27618: PUSH
27619: LD_EXP 120
27623: PPUSH
27624: LD_VAR 0 1
27628: PPUSH
27629: CALL 34990 0 2
27633: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27634: LD_EXP 121
27638: PUSH
27639: LD_VAR 0 5
27643: ARRAY
27644: PUSH
27645: LD_EXP 122
27649: LESS
27650: IFFALSE 27839
// begin for i := 1 to vehicles do
27652: LD_ADDR_VAR 0 4
27656: PUSH
27657: DOUBLE
27658: LD_INT 1
27660: DEC
27661: ST_TO_ADDR
27662: LD_VAR 0 2
27666: PUSH
27667: FOR_TO
27668: IFFALSE 27837
// begin if hackTanksCaptured [ index ] = hackLimit then
27670: LD_EXP 121
27674: PUSH
27675: LD_VAR 0 5
27679: ARRAY
27680: PUSH
27681: LD_EXP 122
27685: EQUAL
27686: IFFALSE 27690
// break ;
27688: GO 27837
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27690: LD_ADDR_EXP 124
27694: PUSH
27695: LD_EXP 124
27699: PPUSH
27700: LD_VAR 0 5
27704: PPUSH
27705: LD_EXP 124
27709: PUSH
27710: LD_VAR 0 5
27714: ARRAY
27715: PUSH
27716: LD_INT 1
27718: PLUS
27719: PPUSH
27720: CALL_OW 1
27724: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27725: LD_ADDR_EXP 121
27729: PUSH
27730: LD_EXP 121
27734: PPUSH
27735: LD_VAR 0 5
27739: PUSH
27740: LD_EXP 121
27744: PUSH
27745: LD_VAR 0 5
27749: ARRAY
27750: PUSH
27751: LD_INT 1
27753: PLUS
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PPUSH
27759: LD_VAR 0 2
27763: PUSH
27764: LD_VAR 0 4
27768: ARRAY
27769: PUSH
27770: LD_VAR 0 2
27774: PUSH
27775: LD_VAR 0 4
27779: ARRAY
27780: PPUSH
27781: CALL_OW 255
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PPUSH
27790: CALL 35205 0 3
27794: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27795: LD_VAR 0 2
27799: PUSH
27800: LD_VAR 0 4
27804: ARRAY
27805: PPUSH
27806: LD_VAR 0 1
27810: PPUSH
27811: CALL_OW 255
27815: PPUSH
27816: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27820: LD_VAR 0 2
27824: PUSH
27825: LD_VAR 0 4
27829: ARRAY
27830: PPUSH
27831: CALL_OW 141
// end ;
27835: GO 27667
27837: POP
27838: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27839: LD_VAR 0 1
27843: PPUSH
27844: LD_EXP 121
27848: PUSH
27849: LD_VAR 0 5
27853: ARRAY
27854: PUSH
27855: LD_INT 0
27857: PLUS
27858: PPUSH
27859: CALL_OW 505
// end ;
27863: LD_VAR 0 3
27867: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27868: LD_INT 0
27870: PPUSH
27871: PPUSH
27872: PPUSH
27873: PPUSH
// if not hack in hackTanks then
27874: LD_VAR 0 1
27878: PUSH
27879: LD_EXP 120
27883: IN
27884: NOT
27885: IFFALSE 27889
// exit ;
27887: GO 28129
// index := GetElementIndex ( hackTanks , hack ) ;
27889: LD_ADDR_VAR 0 4
27893: PUSH
27894: LD_EXP 120
27898: PPUSH
27899: LD_VAR 0 1
27903: PPUSH
27904: CALL 34990 0 2
27908: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27909: LD_ADDR_VAR 0 3
27913: PUSH
27914: DOUBLE
27915: LD_EXP 121
27919: PUSH
27920: LD_VAR 0 4
27924: ARRAY
27925: INC
27926: ST_TO_ADDR
27927: LD_INT 1
27929: PUSH
27930: FOR_DOWNTO
27931: IFFALSE 28103
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27933: LD_ADDR_VAR 0 5
27937: PUSH
27938: LD_EXP 121
27942: PUSH
27943: LD_VAR 0 4
27947: ARRAY
27948: PUSH
27949: LD_VAR 0 3
27953: ARRAY
27954: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27955: LD_VAR 0 5
27959: PUSH
27960: LD_INT 1
27962: ARRAY
27963: PPUSH
27964: CALL_OW 302
27968: NOT
27969: PUSH
27970: LD_VAR 0 5
27974: PUSH
27975: LD_INT 1
27977: ARRAY
27978: PPUSH
27979: CALL_OW 255
27983: PUSH
27984: LD_VAR 0 1
27988: PPUSH
27989: CALL_OW 255
27993: NONEQUAL
27994: OR
27995: IFFALSE 28101
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27997: LD_VAR 0 5
28001: PUSH
28002: LD_INT 1
28004: ARRAY
28005: PPUSH
28006: CALL_OW 305
28010: PUSH
28011: LD_VAR 0 5
28015: PUSH
28016: LD_INT 1
28018: ARRAY
28019: PPUSH
28020: CALL_OW 255
28024: PUSH
28025: LD_VAR 0 1
28029: PPUSH
28030: CALL_OW 255
28034: EQUAL
28035: AND
28036: IFFALSE 28060
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28038: LD_VAR 0 5
28042: PUSH
28043: LD_INT 1
28045: ARRAY
28046: PPUSH
28047: LD_VAR 0 5
28051: PUSH
28052: LD_INT 2
28054: ARRAY
28055: PPUSH
28056: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28060: LD_ADDR_EXP 121
28064: PUSH
28065: LD_EXP 121
28069: PPUSH
28070: LD_VAR 0 4
28074: PPUSH
28075: LD_EXP 121
28079: PUSH
28080: LD_VAR 0 4
28084: ARRAY
28085: PPUSH
28086: LD_VAR 0 3
28090: PPUSH
28091: CALL_OW 3
28095: PPUSH
28096: CALL_OW 1
28100: ST_TO_ADDR
// end ; end ;
28101: GO 27930
28103: POP
28104: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28105: LD_VAR 0 1
28109: PPUSH
28110: LD_EXP 121
28114: PUSH
28115: LD_VAR 0 4
28119: ARRAY
28120: PUSH
28121: LD_INT 0
28123: PLUS
28124: PPUSH
28125: CALL_OW 505
// end ;
28129: LD_VAR 0 2
28133: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28134: LD_INT 0
28136: PPUSH
28137: PPUSH
28138: PPUSH
28139: PPUSH
// if not hack in hackTanks then
28140: LD_VAR 0 1
28144: PUSH
28145: LD_EXP 120
28149: IN
28150: NOT
28151: IFFALSE 28155
// exit ;
28153: GO 28240
// index := GetElementIndex ( hackTanks , hack ) ;
28155: LD_ADDR_VAR 0 5
28159: PUSH
28160: LD_EXP 120
28164: PPUSH
28165: LD_VAR 0 1
28169: PPUSH
28170: CALL 34990 0 2
28174: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28175: LD_ADDR_VAR 0 4
28179: PUSH
28180: DOUBLE
28181: LD_INT 1
28183: DEC
28184: ST_TO_ADDR
28185: LD_EXP 121
28189: PUSH
28190: LD_VAR 0 5
28194: ARRAY
28195: PUSH
28196: FOR_TO
28197: IFFALSE 28238
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28199: LD_EXP 121
28203: PUSH
28204: LD_VAR 0 5
28208: ARRAY
28209: PUSH
28210: LD_VAR 0 4
28214: ARRAY
28215: PUSH
28216: LD_INT 1
28218: ARRAY
28219: PUSH
28220: LD_VAR 0 2
28224: EQUAL
28225: IFFALSE 28236
// KillUnit ( vehicle ) ;
28227: LD_VAR 0 2
28231: PPUSH
28232: CALL_OW 66
28236: GO 28196
28238: POP
28239: POP
// end ;
28240: LD_VAR 0 3
28244: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28245: LD_EXP 125
28249: NOT
28250: IFFALSE 28285
28252: GO 28254
28254: DISABLE
// begin initMiner := true ;
28255: LD_ADDR_EXP 125
28259: PUSH
28260: LD_INT 1
28262: ST_TO_ADDR
// minersList := [ ] ;
28263: LD_ADDR_EXP 126
28267: PUSH
28268: EMPTY
28269: ST_TO_ADDR
// minerMinesList := [ ] ;
28270: LD_ADDR_EXP 127
28274: PUSH
28275: EMPTY
28276: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28277: LD_ADDR_EXP 128
28281: PUSH
28282: LD_INT 5
28284: ST_TO_ADDR
// end ;
28285: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28286: LD_EXP 125
28290: PUSH
28291: LD_INT 34
28293: PUSH
28294: LD_EXP 50
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PPUSH
28303: CALL_OW 69
28307: AND
28308: IFFALSE 28771
28310: GO 28312
28312: DISABLE
28313: LD_INT 0
28315: PPUSH
28316: PPUSH
28317: PPUSH
28318: PPUSH
// begin enable ;
28319: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28320: LD_ADDR_VAR 0 1
28324: PUSH
28325: LD_INT 34
28327: PUSH
28328: LD_EXP 50
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PPUSH
28337: CALL_OW 69
28341: PUSH
28342: FOR_IN
28343: IFFALSE 28415
// begin if not i in minersList then
28345: LD_VAR 0 1
28349: PUSH
28350: LD_EXP 126
28354: IN
28355: NOT
28356: IFFALSE 28413
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28358: LD_ADDR_EXP 126
28362: PUSH
28363: LD_EXP 126
28367: PPUSH
28368: LD_EXP 126
28372: PUSH
28373: LD_INT 1
28375: PLUS
28376: PPUSH
28377: LD_VAR 0 1
28381: PPUSH
28382: CALL_OW 1
28386: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28387: LD_ADDR_EXP 127
28391: PUSH
28392: LD_EXP 127
28396: PPUSH
28397: LD_EXP 127
28401: PUSH
28402: LD_INT 1
28404: PLUS
28405: PPUSH
28406: EMPTY
28407: PPUSH
28408: CALL_OW 1
28412: ST_TO_ADDR
// end end ;
28413: GO 28342
28415: POP
28416: POP
// for i := minerMinesList downto 1 do
28417: LD_ADDR_VAR 0 1
28421: PUSH
28422: DOUBLE
28423: LD_EXP 127
28427: INC
28428: ST_TO_ADDR
28429: LD_INT 1
28431: PUSH
28432: FOR_DOWNTO
28433: IFFALSE 28769
// begin if IsLive ( minersList [ i ] ) then
28435: LD_EXP 126
28439: PUSH
28440: LD_VAR 0 1
28444: ARRAY
28445: PPUSH
28446: CALL_OW 300
28450: IFFALSE 28478
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28452: LD_EXP 126
28456: PUSH
28457: LD_VAR 0 1
28461: ARRAY
28462: PPUSH
28463: LD_EXP 127
28467: PUSH
28468: LD_VAR 0 1
28472: ARRAY
28473: PPUSH
28474: CALL_OW 505
// if not minerMinesList [ i ] then
28478: LD_EXP 127
28482: PUSH
28483: LD_VAR 0 1
28487: ARRAY
28488: NOT
28489: IFFALSE 28493
// continue ;
28491: GO 28432
// for j := minerMinesList [ i ] downto 1 do
28493: LD_ADDR_VAR 0 2
28497: PUSH
28498: DOUBLE
28499: LD_EXP 127
28503: PUSH
28504: LD_VAR 0 1
28508: ARRAY
28509: INC
28510: ST_TO_ADDR
28511: LD_INT 1
28513: PUSH
28514: FOR_DOWNTO
28515: IFFALSE 28765
// begin side := GetSide ( minersList [ i ] ) ;
28517: LD_ADDR_VAR 0 3
28521: PUSH
28522: LD_EXP 126
28526: PUSH
28527: LD_VAR 0 1
28531: ARRAY
28532: PPUSH
28533: CALL_OW 255
28537: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28538: LD_ADDR_VAR 0 4
28542: PUSH
28543: LD_EXP 127
28547: PUSH
28548: LD_VAR 0 1
28552: ARRAY
28553: PUSH
28554: LD_VAR 0 2
28558: ARRAY
28559: PUSH
28560: LD_INT 1
28562: ARRAY
28563: PPUSH
28564: LD_EXP 127
28568: PUSH
28569: LD_VAR 0 1
28573: ARRAY
28574: PUSH
28575: LD_VAR 0 2
28579: ARRAY
28580: PUSH
28581: LD_INT 2
28583: ARRAY
28584: PPUSH
28585: CALL_OW 428
28589: ST_TO_ADDR
// if not tmp then
28590: LD_VAR 0 4
28594: NOT
28595: IFFALSE 28599
// continue ;
28597: GO 28514
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28599: LD_VAR 0 4
28603: PUSH
28604: LD_INT 81
28606: PUSH
28607: LD_VAR 0 3
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PPUSH
28616: CALL_OW 69
28620: IN
28621: PUSH
28622: LD_EXP 127
28626: PUSH
28627: LD_VAR 0 1
28631: ARRAY
28632: PUSH
28633: LD_VAR 0 2
28637: ARRAY
28638: PUSH
28639: LD_INT 1
28641: ARRAY
28642: PPUSH
28643: LD_EXP 127
28647: PUSH
28648: LD_VAR 0 1
28652: ARRAY
28653: PUSH
28654: LD_VAR 0 2
28658: ARRAY
28659: PUSH
28660: LD_INT 2
28662: ARRAY
28663: PPUSH
28664: CALL_OW 458
28668: AND
28669: IFFALSE 28763
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28671: LD_EXP 127
28675: PUSH
28676: LD_VAR 0 1
28680: ARRAY
28681: PUSH
28682: LD_VAR 0 2
28686: ARRAY
28687: PUSH
28688: LD_INT 1
28690: ARRAY
28691: PPUSH
28692: LD_EXP 127
28696: PUSH
28697: LD_VAR 0 1
28701: ARRAY
28702: PUSH
28703: LD_VAR 0 2
28707: ARRAY
28708: PUSH
28709: LD_INT 2
28711: ARRAY
28712: PPUSH
28713: LD_VAR 0 3
28717: PPUSH
28718: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28722: LD_ADDR_EXP 127
28726: PUSH
28727: LD_EXP 127
28731: PPUSH
28732: LD_VAR 0 1
28736: PPUSH
28737: LD_EXP 127
28741: PUSH
28742: LD_VAR 0 1
28746: ARRAY
28747: PPUSH
28748: LD_VAR 0 2
28752: PPUSH
28753: CALL_OW 3
28757: PPUSH
28758: CALL_OW 1
28762: ST_TO_ADDR
// end ; end ;
28763: GO 28514
28765: POP
28766: POP
// end ;
28767: GO 28432
28769: POP
28770: POP
// end ;
28771: PPOPN 4
28773: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28774: LD_INT 0
28776: PPUSH
28777: PPUSH
// result := false ;
28778: LD_ADDR_VAR 0 4
28782: PUSH
28783: LD_INT 0
28785: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28786: LD_VAR 0 1
28790: PPUSH
28791: CALL_OW 264
28795: PUSH
28796: LD_EXP 50
28800: EQUAL
28801: NOT
28802: IFFALSE 28806
// exit ;
28804: GO 29046
// index := GetElementIndex ( minersList , unit ) ;
28806: LD_ADDR_VAR 0 5
28810: PUSH
28811: LD_EXP 126
28815: PPUSH
28816: LD_VAR 0 1
28820: PPUSH
28821: CALL 34990 0 2
28825: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28826: LD_EXP 127
28830: PUSH
28831: LD_VAR 0 5
28835: ARRAY
28836: PUSH
28837: LD_EXP 128
28841: GREATEREQUAL
28842: IFFALSE 28846
// exit ;
28844: GO 29046
// ComMoveXY ( unit , x , y ) ;
28846: LD_VAR 0 1
28850: PPUSH
28851: LD_VAR 0 2
28855: PPUSH
28856: LD_VAR 0 3
28860: PPUSH
28861: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28865: LD_INT 35
28867: PPUSH
28868: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28872: LD_VAR 0 1
28876: PPUSH
28877: LD_VAR 0 2
28881: PPUSH
28882: LD_VAR 0 3
28886: PPUSH
28887: CALL 65357 0 3
28891: NOT
28892: PUSH
28893: LD_VAR 0 1
28897: PPUSH
28898: CALL_OW 314
28902: AND
28903: IFFALSE 28907
// exit ;
28905: GO 29046
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28907: LD_VAR 0 2
28911: PPUSH
28912: LD_VAR 0 3
28916: PPUSH
28917: CALL_OW 428
28921: PUSH
28922: LD_VAR 0 1
28926: EQUAL
28927: PUSH
28928: LD_VAR 0 1
28932: PPUSH
28933: CALL_OW 314
28937: NOT
28938: AND
28939: IFFALSE 28865
// PlaySoundXY ( x , y , PlantMine ) ;
28941: LD_VAR 0 2
28945: PPUSH
28946: LD_VAR 0 3
28950: PPUSH
28951: LD_STRING PlantMine
28953: PPUSH
28954: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28958: LD_VAR 0 2
28962: PPUSH
28963: LD_VAR 0 3
28967: PPUSH
28968: LD_VAR 0 1
28972: PPUSH
28973: CALL_OW 255
28977: PPUSH
28978: LD_INT 0
28980: PPUSH
28981: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28985: LD_ADDR_EXP 127
28989: PUSH
28990: LD_EXP 127
28994: PPUSH
28995: LD_VAR 0 5
28999: PUSH
29000: LD_EXP 127
29004: PUSH
29005: LD_VAR 0 5
29009: ARRAY
29010: PUSH
29011: LD_INT 1
29013: PLUS
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PPUSH
29019: LD_VAR 0 2
29023: PUSH
29024: LD_VAR 0 3
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PPUSH
29033: CALL 35205 0 3
29037: ST_TO_ADDR
// result := true ;
29038: LD_ADDR_VAR 0 4
29042: PUSH
29043: LD_INT 1
29045: ST_TO_ADDR
// end ;
29046: LD_VAR 0 4
29050: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29051: LD_INT 0
29053: PPUSH
29054: PPUSH
29055: PPUSH
// if not unit in minersList then
29056: LD_VAR 0 1
29060: PUSH
29061: LD_EXP 126
29065: IN
29066: NOT
29067: IFFALSE 29071
// exit ;
29069: GO 29463
// index := GetElementIndex ( minersList , unit ) ;
29071: LD_ADDR_VAR 0 6
29075: PUSH
29076: LD_EXP 126
29080: PPUSH
29081: LD_VAR 0 1
29085: PPUSH
29086: CALL 34990 0 2
29090: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29091: LD_ADDR_VAR 0 5
29095: PUSH
29096: DOUBLE
29097: LD_EXP 127
29101: PUSH
29102: LD_VAR 0 6
29106: ARRAY
29107: INC
29108: ST_TO_ADDR
29109: LD_INT 1
29111: PUSH
29112: FOR_DOWNTO
29113: IFFALSE 29274
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29115: LD_EXP 127
29119: PUSH
29120: LD_VAR 0 6
29124: ARRAY
29125: PUSH
29126: LD_VAR 0 5
29130: ARRAY
29131: PUSH
29132: LD_INT 1
29134: ARRAY
29135: PUSH
29136: LD_VAR 0 2
29140: EQUAL
29141: PUSH
29142: LD_EXP 127
29146: PUSH
29147: LD_VAR 0 6
29151: ARRAY
29152: PUSH
29153: LD_VAR 0 5
29157: ARRAY
29158: PUSH
29159: LD_INT 2
29161: ARRAY
29162: PUSH
29163: LD_VAR 0 3
29167: EQUAL
29168: AND
29169: IFFALSE 29272
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29171: LD_EXP 127
29175: PUSH
29176: LD_VAR 0 6
29180: ARRAY
29181: PUSH
29182: LD_VAR 0 5
29186: ARRAY
29187: PUSH
29188: LD_INT 1
29190: ARRAY
29191: PPUSH
29192: LD_EXP 127
29196: PUSH
29197: LD_VAR 0 6
29201: ARRAY
29202: PUSH
29203: LD_VAR 0 5
29207: ARRAY
29208: PUSH
29209: LD_INT 2
29211: ARRAY
29212: PPUSH
29213: LD_VAR 0 1
29217: PPUSH
29218: CALL_OW 255
29222: PPUSH
29223: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29227: LD_ADDR_EXP 127
29231: PUSH
29232: LD_EXP 127
29236: PPUSH
29237: LD_VAR 0 6
29241: PPUSH
29242: LD_EXP 127
29246: PUSH
29247: LD_VAR 0 6
29251: ARRAY
29252: PPUSH
29253: LD_VAR 0 5
29257: PPUSH
29258: CALL_OW 3
29262: PPUSH
29263: CALL_OW 1
29267: ST_TO_ADDR
// exit ;
29268: POP
29269: POP
29270: GO 29463
// end ; end ;
29272: GO 29112
29274: POP
29275: POP
// for i := minerMinesList [ index ] downto 1 do
29276: LD_ADDR_VAR 0 5
29280: PUSH
29281: DOUBLE
29282: LD_EXP 127
29286: PUSH
29287: LD_VAR 0 6
29291: ARRAY
29292: INC
29293: ST_TO_ADDR
29294: LD_INT 1
29296: PUSH
29297: FOR_DOWNTO
29298: IFFALSE 29461
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29300: LD_EXP 127
29304: PUSH
29305: LD_VAR 0 6
29309: ARRAY
29310: PUSH
29311: LD_VAR 0 5
29315: ARRAY
29316: PUSH
29317: LD_INT 1
29319: ARRAY
29320: PPUSH
29321: LD_EXP 127
29325: PUSH
29326: LD_VAR 0 6
29330: ARRAY
29331: PUSH
29332: LD_VAR 0 5
29336: ARRAY
29337: PUSH
29338: LD_INT 2
29340: ARRAY
29341: PPUSH
29342: LD_VAR 0 2
29346: PPUSH
29347: LD_VAR 0 3
29351: PPUSH
29352: CALL_OW 298
29356: PUSH
29357: LD_INT 6
29359: LESS
29360: IFFALSE 29459
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29362: LD_EXP 127
29366: PUSH
29367: LD_VAR 0 6
29371: ARRAY
29372: PUSH
29373: LD_VAR 0 5
29377: ARRAY
29378: PUSH
29379: LD_INT 1
29381: ARRAY
29382: PPUSH
29383: LD_EXP 127
29387: PUSH
29388: LD_VAR 0 6
29392: ARRAY
29393: PUSH
29394: LD_VAR 0 5
29398: ARRAY
29399: PUSH
29400: LD_INT 2
29402: ARRAY
29403: PPUSH
29404: LD_VAR 0 1
29408: PPUSH
29409: CALL_OW 255
29413: PPUSH
29414: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29418: LD_ADDR_EXP 127
29422: PUSH
29423: LD_EXP 127
29427: PPUSH
29428: LD_VAR 0 6
29432: PPUSH
29433: LD_EXP 127
29437: PUSH
29438: LD_VAR 0 6
29442: ARRAY
29443: PPUSH
29444: LD_VAR 0 5
29448: PPUSH
29449: CALL_OW 3
29453: PPUSH
29454: CALL_OW 1
29458: ST_TO_ADDR
// end ; end ;
29459: GO 29297
29461: POP
29462: POP
// end ;
29463: LD_VAR 0 4
29467: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29468: LD_INT 0
29470: PPUSH
29471: PPUSH
29472: PPUSH
29473: PPUSH
29474: PPUSH
29475: PPUSH
29476: PPUSH
29477: PPUSH
29478: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29479: LD_VAR 0 1
29483: PPUSH
29484: CALL_OW 264
29488: PUSH
29489: LD_EXP 50
29493: EQUAL
29494: NOT
29495: PUSH
29496: LD_VAR 0 1
29500: PUSH
29501: LD_EXP 126
29505: IN
29506: NOT
29507: OR
29508: IFFALSE 29512
// exit ;
29510: GO 29834
// index := GetElementIndex ( minersList , unit ) ;
29512: LD_ADDR_VAR 0 6
29516: PUSH
29517: LD_EXP 126
29521: PPUSH
29522: LD_VAR 0 1
29526: PPUSH
29527: CALL 34990 0 2
29531: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29532: LD_ADDR_VAR 0 8
29536: PUSH
29537: LD_EXP 128
29541: PUSH
29542: LD_EXP 127
29546: PUSH
29547: LD_VAR 0 6
29551: ARRAY
29552: MINUS
29553: ST_TO_ADDR
// if not minesFreeAmount then
29554: LD_VAR 0 8
29558: NOT
29559: IFFALSE 29563
// exit ;
29561: GO 29834
// tmp := [ ] ;
29563: LD_ADDR_VAR 0 7
29567: PUSH
29568: EMPTY
29569: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29570: LD_ADDR_VAR 0 5
29574: PUSH
29575: DOUBLE
29576: LD_INT 1
29578: DEC
29579: ST_TO_ADDR
29580: LD_VAR 0 8
29584: PUSH
29585: FOR_TO
29586: IFFALSE 29781
// begin _d := rand ( 0 , 5 ) ;
29588: LD_ADDR_VAR 0 11
29592: PUSH
29593: LD_INT 0
29595: PPUSH
29596: LD_INT 5
29598: PPUSH
29599: CALL_OW 12
29603: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29604: LD_ADDR_VAR 0 12
29608: PUSH
29609: LD_INT 2
29611: PPUSH
29612: LD_INT 6
29614: PPUSH
29615: CALL_OW 12
29619: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29620: LD_ADDR_VAR 0 9
29624: PUSH
29625: LD_VAR 0 2
29629: PPUSH
29630: LD_VAR 0 11
29634: PPUSH
29635: LD_VAR 0 12
29639: PPUSH
29640: CALL_OW 272
29644: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29645: LD_ADDR_VAR 0 10
29649: PUSH
29650: LD_VAR 0 3
29654: PPUSH
29655: LD_VAR 0 11
29659: PPUSH
29660: LD_VAR 0 12
29664: PPUSH
29665: CALL_OW 273
29669: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29670: LD_VAR 0 9
29674: PPUSH
29675: LD_VAR 0 10
29679: PPUSH
29680: CALL_OW 488
29684: PUSH
29685: LD_VAR 0 9
29689: PUSH
29690: LD_VAR 0 10
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_VAR 0 7
29703: IN
29704: NOT
29705: AND
29706: PUSH
29707: LD_VAR 0 9
29711: PPUSH
29712: LD_VAR 0 10
29716: PPUSH
29717: CALL_OW 458
29721: NOT
29722: AND
29723: IFFALSE 29765
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29725: LD_ADDR_VAR 0 7
29729: PUSH
29730: LD_VAR 0 7
29734: PPUSH
29735: LD_VAR 0 7
29739: PUSH
29740: LD_INT 1
29742: PLUS
29743: PPUSH
29744: LD_VAR 0 9
29748: PUSH
29749: LD_VAR 0 10
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PPUSH
29758: CALL_OW 1
29762: ST_TO_ADDR
29763: GO 29779
// i := i - 1 ;
29765: LD_ADDR_VAR 0 5
29769: PUSH
29770: LD_VAR 0 5
29774: PUSH
29775: LD_INT 1
29777: MINUS
29778: ST_TO_ADDR
// end ;
29779: GO 29585
29781: POP
29782: POP
// for i in tmp do
29783: LD_ADDR_VAR 0 5
29787: PUSH
29788: LD_VAR 0 7
29792: PUSH
29793: FOR_IN
29794: IFFALSE 29832
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29796: LD_VAR 0 1
29800: PPUSH
29801: LD_VAR 0 5
29805: PUSH
29806: LD_INT 1
29808: ARRAY
29809: PPUSH
29810: LD_VAR 0 5
29814: PUSH
29815: LD_INT 2
29817: ARRAY
29818: PPUSH
29819: CALL 28774 0 3
29823: NOT
29824: IFFALSE 29830
// exit ;
29826: POP
29827: POP
29828: GO 29834
29830: GO 29793
29832: POP
29833: POP
// end ;
29834: LD_VAR 0 4
29838: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29839: LD_INT 0
29841: PPUSH
29842: PPUSH
29843: PPUSH
29844: PPUSH
29845: PPUSH
29846: PPUSH
29847: PPUSH
// if not GetClass ( unit ) = class_sniper then
29848: LD_VAR 0 1
29852: PPUSH
29853: CALL_OW 257
29857: PUSH
29858: LD_INT 5
29860: EQUAL
29861: NOT
29862: IFFALSE 29866
// exit ;
29864: GO 30254
// dist := 8 ;
29866: LD_ADDR_VAR 0 5
29870: PUSH
29871: LD_INT 8
29873: ST_TO_ADDR
// viewRange := 12 ;
29874: LD_ADDR_VAR 0 7
29878: PUSH
29879: LD_INT 12
29881: ST_TO_ADDR
// side := GetSide ( unit ) ;
29882: LD_ADDR_VAR 0 6
29886: PUSH
29887: LD_VAR 0 1
29891: PPUSH
29892: CALL_OW 255
29896: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29897: LD_INT 61
29899: PPUSH
29900: LD_VAR 0 6
29904: PPUSH
29905: CALL_OW 321
29909: PUSH
29910: LD_INT 2
29912: EQUAL
29913: IFFALSE 29923
// viewRange := 16 ;
29915: LD_ADDR_VAR 0 7
29919: PUSH
29920: LD_INT 16
29922: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29923: LD_VAR 0 1
29927: PPUSH
29928: LD_VAR 0 2
29932: PPUSH
29933: LD_VAR 0 3
29937: PPUSH
29938: CALL_OW 297
29942: PUSH
29943: LD_VAR 0 5
29947: GREATER
29948: IFFALSE 30027
// begin ComMoveXY ( unit , x , y ) ;
29950: LD_VAR 0 1
29954: PPUSH
29955: LD_VAR 0 2
29959: PPUSH
29960: LD_VAR 0 3
29964: PPUSH
29965: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29969: LD_INT 35
29971: PPUSH
29972: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29976: LD_VAR 0 1
29980: PPUSH
29981: LD_VAR 0 2
29985: PPUSH
29986: LD_VAR 0 3
29990: PPUSH
29991: CALL 65357 0 3
29995: NOT
29996: IFFALSE 30000
// exit ;
29998: GO 30254
// until GetDistUnitXY ( unit , x , y ) < dist ;
30000: LD_VAR 0 1
30004: PPUSH
30005: LD_VAR 0 2
30009: PPUSH
30010: LD_VAR 0 3
30014: PPUSH
30015: CALL_OW 297
30019: PUSH
30020: LD_VAR 0 5
30024: LESS
30025: IFFALSE 29969
// end ; ComTurnXY ( unit , x , y ) ;
30027: LD_VAR 0 1
30031: PPUSH
30032: LD_VAR 0 2
30036: PPUSH
30037: LD_VAR 0 3
30041: PPUSH
30042: CALL_OW 118
// wait ( 5 ) ;
30046: LD_INT 5
30048: PPUSH
30049: CALL_OW 67
// _d := GetDir ( unit ) ;
30053: LD_ADDR_VAR 0 10
30057: PUSH
30058: LD_VAR 0 1
30062: PPUSH
30063: CALL_OW 254
30067: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30068: LD_ADDR_VAR 0 8
30072: PUSH
30073: LD_VAR 0 1
30077: PPUSH
30078: CALL_OW 250
30082: PPUSH
30083: LD_VAR 0 10
30087: PPUSH
30088: LD_VAR 0 5
30092: PPUSH
30093: CALL_OW 272
30097: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30098: LD_ADDR_VAR 0 9
30102: PUSH
30103: LD_VAR 0 1
30107: PPUSH
30108: CALL_OW 251
30112: PPUSH
30113: LD_VAR 0 10
30117: PPUSH
30118: LD_VAR 0 5
30122: PPUSH
30123: CALL_OW 273
30127: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30128: LD_VAR 0 8
30132: PPUSH
30133: LD_VAR 0 9
30137: PPUSH
30138: CALL_OW 488
30142: NOT
30143: IFFALSE 30147
// exit ;
30145: GO 30254
// ComAnimCustom ( unit , 1 ) ;
30147: LD_VAR 0 1
30151: PPUSH
30152: LD_INT 1
30154: PPUSH
30155: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30159: LD_VAR 0 8
30163: PPUSH
30164: LD_VAR 0 9
30168: PPUSH
30169: LD_VAR 0 6
30173: PPUSH
30174: LD_VAR 0 7
30178: PPUSH
30179: CALL_OW 330
// repeat wait ( 1 ) ;
30183: LD_INT 1
30185: PPUSH
30186: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30190: LD_VAR 0 1
30194: PPUSH
30195: CALL_OW 316
30199: PUSH
30200: LD_VAR 0 1
30204: PPUSH
30205: CALL_OW 314
30209: OR
30210: PUSH
30211: LD_VAR 0 1
30215: PPUSH
30216: CALL_OW 302
30220: NOT
30221: OR
30222: PUSH
30223: LD_VAR 0 1
30227: PPUSH
30228: CALL_OW 301
30232: OR
30233: IFFALSE 30183
// RemoveSeeing ( _x , _y , side ) ;
30235: LD_VAR 0 8
30239: PPUSH
30240: LD_VAR 0 9
30244: PPUSH
30245: LD_VAR 0 6
30249: PPUSH
30250: CALL_OW 331
// end ; end_of_file
30254: LD_VAR 0 4
30258: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30259: LD_INT 0
30261: PPUSH
30262: PPUSH
// if exist_mode then
30263: LD_VAR 0 2
30267: IFFALSE 30292
// unit := CreateCharacter ( prefix & ident ) else
30269: LD_ADDR_VAR 0 5
30273: PUSH
30274: LD_VAR 0 3
30278: PUSH
30279: LD_VAR 0 1
30283: STR
30284: PPUSH
30285: CALL_OW 34
30289: ST_TO_ADDR
30290: GO 30307
// unit := NewCharacter ( ident ) ;
30292: LD_ADDR_VAR 0 5
30296: PUSH
30297: LD_VAR 0 1
30301: PPUSH
30302: CALL_OW 25
30306: ST_TO_ADDR
// result := unit ;
30307: LD_ADDR_VAR 0 4
30311: PUSH
30312: LD_VAR 0 5
30316: ST_TO_ADDR
// end ;
30317: LD_VAR 0 4
30321: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30322: LD_INT 0
30324: PPUSH
30325: PPUSH
// if not side or not nation then
30326: LD_VAR 0 1
30330: NOT
30331: PUSH
30332: LD_VAR 0 2
30336: NOT
30337: OR
30338: IFFALSE 30342
// exit ;
30340: GO 31106
// case nation of nation_american :
30342: LD_VAR 0 2
30346: PUSH
30347: LD_INT 1
30349: DOUBLE
30350: EQUAL
30351: IFTRUE 30355
30353: GO 30569
30355: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30356: LD_ADDR_VAR 0 4
30360: PUSH
30361: LD_INT 35
30363: PUSH
30364: LD_INT 45
30366: PUSH
30367: LD_INT 46
30369: PUSH
30370: LD_INT 47
30372: PUSH
30373: LD_INT 82
30375: PUSH
30376: LD_INT 83
30378: PUSH
30379: LD_INT 84
30381: PUSH
30382: LD_INT 85
30384: PUSH
30385: LD_INT 86
30387: PUSH
30388: LD_INT 1
30390: PUSH
30391: LD_INT 2
30393: PUSH
30394: LD_INT 6
30396: PUSH
30397: LD_INT 15
30399: PUSH
30400: LD_INT 16
30402: PUSH
30403: LD_INT 7
30405: PUSH
30406: LD_INT 12
30408: PUSH
30409: LD_INT 13
30411: PUSH
30412: LD_INT 10
30414: PUSH
30415: LD_INT 14
30417: PUSH
30418: LD_INT 20
30420: PUSH
30421: LD_INT 21
30423: PUSH
30424: LD_INT 22
30426: PUSH
30427: LD_INT 25
30429: PUSH
30430: LD_INT 32
30432: PUSH
30433: LD_INT 27
30435: PUSH
30436: LD_INT 36
30438: PUSH
30439: LD_INT 69
30441: PUSH
30442: LD_INT 39
30444: PUSH
30445: LD_INT 34
30447: PUSH
30448: LD_INT 40
30450: PUSH
30451: LD_INT 48
30453: PUSH
30454: LD_INT 49
30456: PUSH
30457: LD_INT 50
30459: PUSH
30460: LD_INT 51
30462: PUSH
30463: LD_INT 52
30465: PUSH
30466: LD_INT 53
30468: PUSH
30469: LD_INT 54
30471: PUSH
30472: LD_INT 55
30474: PUSH
30475: LD_INT 56
30477: PUSH
30478: LD_INT 57
30480: PUSH
30481: LD_INT 58
30483: PUSH
30484: LD_INT 59
30486: PUSH
30487: LD_INT 60
30489: PUSH
30490: LD_INT 61
30492: PUSH
30493: LD_INT 62
30495: PUSH
30496: LD_INT 80
30498: PUSH
30499: LD_INT 82
30501: PUSH
30502: LD_INT 83
30504: PUSH
30505: LD_INT 84
30507: PUSH
30508: LD_INT 85
30510: PUSH
30511: LD_INT 86
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: ST_TO_ADDR
30567: GO 31030
30569: LD_INT 2
30571: DOUBLE
30572: EQUAL
30573: IFTRUE 30577
30575: GO 30799
30577: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
30578: LD_ADDR_VAR 0 4
30582: PUSH
30583: LD_INT 35
30585: PUSH
30586: LD_INT 45
30588: PUSH
30589: LD_INT 46
30591: PUSH
30592: LD_INT 47
30594: PUSH
30595: LD_INT 82
30597: PUSH
30598: LD_INT 83
30600: PUSH
30601: LD_INT 84
30603: PUSH
30604: LD_INT 85
30606: PUSH
30607: LD_INT 87
30609: PUSH
30610: LD_INT 70
30612: PUSH
30613: LD_INT 1
30615: PUSH
30616: LD_INT 11
30618: PUSH
30619: LD_INT 3
30621: PUSH
30622: LD_INT 4
30624: PUSH
30625: LD_INT 5
30627: PUSH
30628: LD_INT 6
30630: PUSH
30631: LD_INT 15
30633: PUSH
30634: LD_INT 18
30636: PUSH
30637: LD_INT 7
30639: PUSH
30640: LD_INT 17
30642: PUSH
30643: LD_INT 8
30645: PUSH
30646: LD_INT 20
30648: PUSH
30649: LD_INT 21
30651: PUSH
30652: LD_INT 22
30654: PUSH
30655: LD_INT 72
30657: PUSH
30658: LD_INT 26
30660: PUSH
30661: LD_INT 69
30663: PUSH
30664: LD_INT 39
30666: PUSH
30667: LD_INT 40
30669: PUSH
30670: LD_INT 41
30672: PUSH
30673: LD_INT 42
30675: PUSH
30676: LD_INT 43
30678: PUSH
30679: LD_INT 48
30681: PUSH
30682: LD_INT 49
30684: PUSH
30685: LD_INT 50
30687: PUSH
30688: LD_INT 51
30690: PUSH
30691: LD_INT 52
30693: PUSH
30694: LD_INT 53
30696: PUSH
30697: LD_INT 54
30699: PUSH
30700: LD_INT 55
30702: PUSH
30703: LD_INT 56
30705: PUSH
30706: LD_INT 60
30708: PUSH
30709: LD_INT 61
30711: PUSH
30712: LD_INT 62
30714: PUSH
30715: LD_INT 66
30717: PUSH
30718: LD_INT 67
30720: PUSH
30721: LD_INT 68
30723: PUSH
30724: LD_INT 81
30726: PUSH
30727: LD_INT 82
30729: PUSH
30730: LD_INT 83
30732: PUSH
30733: LD_INT 84
30735: PUSH
30736: LD_INT 85
30738: PUSH
30739: LD_INT 87
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: ST_TO_ADDR
30797: GO 31030
30799: LD_INT 3
30801: DOUBLE
30802: EQUAL
30803: IFTRUE 30807
30805: GO 31029
30807: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30808: LD_ADDR_VAR 0 4
30812: PUSH
30813: LD_INT 46
30815: PUSH
30816: LD_INT 47
30818: PUSH
30819: LD_INT 1
30821: PUSH
30822: LD_INT 2
30824: PUSH
30825: LD_INT 82
30827: PUSH
30828: LD_INT 83
30830: PUSH
30831: LD_INT 84
30833: PUSH
30834: LD_INT 85
30836: PUSH
30837: LD_INT 86
30839: PUSH
30840: LD_INT 11
30842: PUSH
30843: LD_INT 9
30845: PUSH
30846: LD_INT 20
30848: PUSH
30849: LD_INT 19
30851: PUSH
30852: LD_INT 21
30854: PUSH
30855: LD_INT 24
30857: PUSH
30858: LD_INT 22
30860: PUSH
30861: LD_INT 25
30863: PUSH
30864: LD_INT 28
30866: PUSH
30867: LD_INT 29
30869: PUSH
30870: LD_INT 30
30872: PUSH
30873: LD_INT 31
30875: PUSH
30876: LD_INT 37
30878: PUSH
30879: LD_INT 38
30881: PUSH
30882: LD_INT 32
30884: PUSH
30885: LD_INT 27
30887: PUSH
30888: LD_INT 33
30890: PUSH
30891: LD_INT 69
30893: PUSH
30894: LD_INT 39
30896: PUSH
30897: LD_INT 34
30899: PUSH
30900: LD_INT 40
30902: PUSH
30903: LD_INT 71
30905: PUSH
30906: LD_INT 23
30908: PUSH
30909: LD_INT 44
30911: PUSH
30912: LD_INT 48
30914: PUSH
30915: LD_INT 49
30917: PUSH
30918: LD_INT 50
30920: PUSH
30921: LD_INT 51
30923: PUSH
30924: LD_INT 52
30926: PUSH
30927: LD_INT 53
30929: PUSH
30930: LD_INT 54
30932: PUSH
30933: LD_INT 55
30935: PUSH
30936: LD_INT 56
30938: PUSH
30939: LD_INT 57
30941: PUSH
30942: LD_INT 58
30944: PUSH
30945: LD_INT 59
30947: PUSH
30948: LD_INT 63
30950: PUSH
30951: LD_INT 64
30953: PUSH
30954: LD_INT 65
30956: PUSH
30957: LD_INT 82
30959: PUSH
30960: LD_INT 83
30962: PUSH
30963: LD_INT 84
30965: PUSH
30966: LD_INT 85
30968: PUSH
30969: LD_INT 86
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: ST_TO_ADDR
31027: GO 31030
31029: POP
// if state > - 1 and state < 3 then
31030: LD_VAR 0 3
31034: PUSH
31035: LD_INT 1
31037: NEG
31038: GREATER
31039: PUSH
31040: LD_VAR 0 3
31044: PUSH
31045: LD_INT 3
31047: LESS
31048: AND
31049: IFFALSE 31106
// for i in result do
31051: LD_ADDR_VAR 0 5
31055: PUSH
31056: LD_VAR 0 4
31060: PUSH
31061: FOR_IN
31062: IFFALSE 31104
// if GetTech ( i , side ) <> state then
31064: LD_VAR 0 5
31068: PPUSH
31069: LD_VAR 0 1
31073: PPUSH
31074: CALL_OW 321
31078: PUSH
31079: LD_VAR 0 3
31083: NONEQUAL
31084: IFFALSE 31102
// result := result diff i ;
31086: LD_ADDR_VAR 0 4
31090: PUSH
31091: LD_VAR 0 4
31095: PUSH
31096: LD_VAR 0 5
31100: DIFF
31101: ST_TO_ADDR
31102: GO 31061
31104: POP
31105: POP
// end ;
31106: LD_VAR 0 4
31110: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31111: LD_INT 0
31113: PPUSH
31114: PPUSH
31115: PPUSH
// result := true ;
31116: LD_ADDR_VAR 0 3
31120: PUSH
31121: LD_INT 1
31123: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31124: LD_ADDR_VAR 0 5
31128: PUSH
31129: LD_VAR 0 2
31133: PPUSH
31134: CALL_OW 480
31138: ST_TO_ADDR
// if not tmp then
31139: LD_VAR 0 5
31143: NOT
31144: IFFALSE 31148
// exit ;
31146: GO 31197
// for i in tmp do
31148: LD_ADDR_VAR 0 4
31152: PUSH
31153: LD_VAR 0 5
31157: PUSH
31158: FOR_IN
31159: IFFALSE 31195
// if GetTech ( i , side ) <> state_researched then
31161: LD_VAR 0 4
31165: PPUSH
31166: LD_VAR 0 1
31170: PPUSH
31171: CALL_OW 321
31175: PUSH
31176: LD_INT 2
31178: NONEQUAL
31179: IFFALSE 31193
// begin result := false ;
31181: LD_ADDR_VAR 0 3
31185: PUSH
31186: LD_INT 0
31188: ST_TO_ADDR
// exit ;
31189: POP
31190: POP
31191: GO 31197
// end ;
31193: GO 31158
31195: POP
31196: POP
// end ;
31197: LD_VAR 0 3
31201: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31202: LD_INT 0
31204: PPUSH
31205: PPUSH
31206: PPUSH
31207: PPUSH
31208: PPUSH
31209: PPUSH
31210: PPUSH
31211: PPUSH
31212: PPUSH
31213: PPUSH
31214: PPUSH
31215: PPUSH
31216: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31217: LD_VAR 0 1
31221: NOT
31222: PUSH
31223: LD_VAR 0 1
31227: PPUSH
31228: CALL_OW 257
31232: PUSH
31233: LD_INT 9
31235: NONEQUAL
31236: OR
31237: IFFALSE 31241
// exit ;
31239: GO 31814
// side := GetSide ( unit ) ;
31241: LD_ADDR_VAR 0 9
31245: PUSH
31246: LD_VAR 0 1
31250: PPUSH
31251: CALL_OW 255
31255: ST_TO_ADDR
// tech_space := tech_spacanom ;
31256: LD_ADDR_VAR 0 12
31260: PUSH
31261: LD_INT 29
31263: ST_TO_ADDR
// tech_time := tech_taurad ;
31264: LD_ADDR_VAR 0 13
31268: PUSH
31269: LD_INT 28
31271: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31272: LD_ADDR_VAR 0 11
31276: PUSH
31277: LD_VAR 0 1
31281: PPUSH
31282: CALL_OW 310
31286: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31287: LD_VAR 0 11
31291: PPUSH
31292: CALL_OW 247
31296: PUSH
31297: LD_INT 2
31299: EQUAL
31300: IFFALSE 31304
// exit ;
31302: GO 31814
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31304: LD_ADDR_VAR 0 8
31308: PUSH
31309: LD_INT 81
31311: PUSH
31312: LD_VAR 0 9
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 3
31323: PUSH
31324: LD_INT 21
31326: PUSH
31327: LD_INT 3
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PPUSH
31342: CALL_OW 69
31346: ST_TO_ADDR
// if not tmp then
31347: LD_VAR 0 8
31351: NOT
31352: IFFALSE 31356
// exit ;
31354: GO 31814
// if in_unit then
31356: LD_VAR 0 11
31360: IFFALSE 31384
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31362: LD_ADDR_VAR 0 10
31366: PUSH
31367: LD_VAR 0 8
31371: PPUSH
31372: LD_VAR 0 11
31376: PPUSH
31377: CALL_OW 74
31381: ST_TO_ADDR
31382: GO 31404
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31384: LD_ADDR_VAR 0 10
31388: PUSH
31389: LD_VAR 0 8
31393: PPUSH
31394: LD_VAR 0 1
31398: PPUSH
31399: CALL_OW 74
31403: ST_TO_ADDR
// if not enemy then
31404: LD_VAR 0 10
31408: NOT
31409: IFFALSE 31413
// exit ;
31411: GO 31814
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31413: LD_VAR 0 11
31417: PUSH
31418: LD_VAR 0 11
31422: PPUSH
31423: LD_VAR 0 10
31427: PPUSH
31428: CALL_OW 296
31432: PUSH
31433: LD_INT 13
31435: GREATER
31436: AND
31437: PUSH
31438: LD_VAR 0 1
31442: PPUSH
31443: LD_VAR 0 10
31447: PPUSH
31448: CALL_OW 296
31452: PUSH
31453: LD_INT 12
31455: GREATER
31456: OR
31457: IFFALSE 31461
// exit ;
31459: GO 31814
// missile := [ 1 ] ;
31461: LD_ADDR_VAR 0 14
31465: PUSH
31466: LD_INT 1
31468: PUSH
31469: EMPTY
31470: LIST
31471: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31472: LD_VAR 0 9
31476: PPUSH
31477: LD_VAR 0 12
31481: PPUSH
31482: CALL_OW 325
31486: IFFALSE 31515
// missile := Insert ( missile , missile + 1 , 2 ) ;
31488: LD_ADDR_VAR 0 14
31492: PUSH
31493: LD_VAR 0 14
31497: PPUSH
31498: LD_VAR 0 14
31502: PUSH
31503: LD_INT 1
31505: PLUS
31506: PPUSH
31507: LD_INT 2
31509: PPUSH
31510: CALL_OW 2
31514: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31515: LD_VAR 0 9
31519: PPUSH
31520: LD_VAR 0 13
31524: PPUSH
31525: CALL_OW 325
31529: PUSH
31530: LD_VAR 0 10
31534: PPUSH
31535: CALL_OW 255
31539: PPUSH
31540: LD_VAR 0 13
31544: PPUSH
31545: CALL_OW 325
31549: NOT
31550: AND
31551: IFFALSE 31580
// missile := Insert ( missile , missile + 1 , 3 ) ;
31553: LD_ADDR_VAR 0 14
31557: PUSH
31558: LD_VAR 0 14
31562: PPUSH
31563: LD_VAR 0 14
31567: PUSH
31568: LD_INT 1
31570: PLUS
31571: PPUSH
31572: LD_INT 3
31574: PPUSH
31575: CALL_OW 2
31579: ST_TO_ADDR
// if missile < 2 then
31580: LD_VAR 0 14
31584: PUSH
31585: LD_INT 2
31587: LESS
31588: IFFALSE 31592
// exit ;
31590: GO 31814
// x := GetX ( enemy ) ;
31592: LD_ADDR_VAR 0 4
31596: PUSH
31597: LD_VAR 0 10
31601: PPUSH
31602: CALL_OW 250
31606: ST_TO_ADDR
// y := GetY ( enemy ) ;
31607: LD_ADDR_VAR 0 5
31611: PUSH
31612: LD_VAR 0 10
31616: PPUSH
31617: CALL_OW 251
31621: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31622: LD_ADDR_VAR 0 6
31626: PUSH
31627: LD_VAR 0 4
31631: PUSH
31632: LD_INT 1
31634: NEG
31635: PPUSH
31636: LD_INT 1
31638: PPUSH
31639: CALL_OW 12
31643: PLUS
31644: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31645: LD_ADDR_VAR 0 7
31649: PUSH
31650: LD_VAR 0 5
31654: PUSH
31655: LD_INT 1
31657: NEG
31658: PPUSH
31659: LD_INT 1
31661: PPUSH
31662: CALL_OW 12
31666: PLUS
31667: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31668: LD_VAR 0 6
31672: PPUSH
31673: LD_VAR 0 7
31677: PPUSH
31678: CALL_OW 488
31682: NOT
31683: IFFALSE 31705
// begin _x := x ;
31685: LD_ADDR_VAR 0 6
31689: PUSH
31690: LD_VAR 0 4
31694: ST_TO_ADDR
// _y := y ;
31695: LD_ADDR_VAR 0 7
31699: PUSH
31700: LD_VAR 0 5
31704: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31705: LD_ADDR_VAR 0 3
31709: PUSH
31710: LD_INT 1
31712: PPUSH
31713: LD_VAR 0 14
31717: PPUSH
31718: CALL_OW 12
31722: ST_TO_ADDR
// case i of 1 :
31723: LD_VAR 0 3
31727: PUSH
31728: LD_INT 1
31730: DOUBLE
31731: EQUAL
31732: IFTRUE 31736
31734: GO 31753
31736: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31737: LD_VAR 0 1
31741: PPUSH
31742: LD_VAR 0 10
31746: PPUSH
31747: CALL_OW 115
31751: GO 31814
31753: LD_INT 2
31755: DOUBLE
31756: EQUAL
31757: IFTRUE 31761
31759: GO 31783
31761: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31762: LD_VAR 0 1
31766: PPUSH
31767: LD_VAR 0 6
31771: PPUSH
31772: LD_VAR 0 7
31776: PPUSH
31777: CALL_OW 153
31781: GO 31814
31783: LD_INT 3
31785: DOUBLE
31786: EQUAL
31787: IFTRUE 31791
31789: GO 31813
31791: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31792: LD_VAR 0 1
31796: PPUSH
31797: LD_VAR 0 6
31801: PPUSH
31802: LD_VAR 0 7
31806: PPUSH
31807: CALL_OW 154
31811: GO 31814
31813: POP
// end ;
31814: LD_VAR 0 2
31818: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31819: LD_INT 0
31821: PPUSH
31822: PPUSH
31823: PPUSH
31824: PPUSH
31825: PPUSH
31826: PPUSH
// if not unit or not building then
31827: LD_VAR 0 1
31831: NOT
31832: PUSH
31833: LD_VAR 0 2
31837: NOT
31838: OR
31839: IFFALSE 31843
// exit ;
31841: GO 32001
// x := GetX ( building ) ;
31843: LD_ADDR_VAR 0 5
31847: PUSH
31848: LD_VAR 0 2
31852: PPUSH
31853: CALL_OW 250
31857: ST_TO_ADDR
// y := GetY ( building ) ;
31858: LD_ADDR_VAR 0 6
31862: PUSH
31863: LD_VAR 0 2
31867: PPUSH
31868: CALL_OW 251
31872: ST_TO_ADDR
// for i = 0 to 5 do
31873: LD_ADDR_VAR 0 4
31877: PUSH
31878: DOUBLE
31879: LD_INT 0
31881: DEC
31882: ST_TO_ADDR
31883: LD_INT 5
31885: PUSH
31886: FOR_TO
31887: IFFALSE 31999
// begin _x := ShiftX ( x , i , 3 ) ;
31889: LD_ADDR_VAR 0 7
31893: PUSH
31894: LD_VAR 0 5
31898: PPUSH
31899: LD_VAR 0 4
31903: PPUSH
31904: LD_INT 3
31906: PPUSH
31907: CALL_OW 272
31911: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31912: LD_ADDR_VAR 0 8
31916: PUSH
31917: LD_VAR 0 6
31921: PPUSH
31922: LD_VAR 0 4
31926: PPUSH
31927: LD_INT 3
31929: PPUSH
31930: CALL_OW 273
31934: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31935: LD_VAR 0 7
31939: PPUSH
31940: LD_VAR 0 8
31944: PPUSH
31945: CALL_OW 488
31949: NOT
31950: IFFALSE 31954
// continue ;
31952: GO 31886
// if HexInfo ( _x , _y ) = 0 then
31954: LD_VAR 0 7
31958: PPUSH
31959: LD_VAR 0 8
31963: PPUSH
31964: CALL_OW 428
31968: PUSH
31969: LD_INT 0
31971: EQUAL
31972: IFFALSE 31997
// begin ComMoveXY ( unit , _x , _y ) ;
31974: LD_VAR 0 1
31978: PPUSH
31979: LD_VAR 0 7
31983: PPUSH
31984: LD_VAR 0 8
31988: PPUSH
31989: CALL_OW 111
// exit ;
31993: POP
31994: POP
31995: GO 32001
// end ; end ;
31997: GO 31886
31999: POP
32000: POP
// end ;
32001: LD_VAR 0 3
32005: RET
// export function ScanBase ( side , base_area ) ; begin
32006: LD_INT 0
32008: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32009: LD_ADDR_VAR 0 3
32013: PUSH
32014: LD_VAR 0 2
32018: PPUSH
32019: LD_INT 81
32021: PUSH
32022: LD_VAR 0 1
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PPUSH
32031: CALL_OW 70
32035: ST_TO_ADDR
// end ;
32036: LD_VAR 0 3
32040: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32041: LD_INT 0
32043: PPUSH
32044: PPUSH
32045: PPUSH
32046: PPUSH
// result := false ;
32047: LD_ADDR_VAR 0 2
32051: PUSH
32052: LD_INT 0
32054: ST_TO_ADDR
// side := GetSide ( unit ) ;
32055: LD_ADDR_VAR 0 3
32059: PUSH
32060: LD_VAR 0 1
32064: PPUSH
32065: CALL_OW 255
32069: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32070: LD_ADDR_VAR 0 4
32074: PUSH
32075: LD_VAR 0 1
32079: PPUSH
32080: CALL_OW 248
32084: ST_TO_ADDR
// case nat of 1 :
32085: LD_VAR 0 4
32089: PUSH
32090: LD_INT 1
32092: DOUBLE
32093: EQUAL
32094: IFTRUE 32098
32096: GO 32109
32098: POP
// tech := tech_lassight ; 2 :
32099: LD_ADDR_VAR 0 5
32103: PUSH
32104: LD_INT 12
32106: ST_TO_ADDR
32107: GO 32148
32109: LD_INT 2
32111: DOUBLE
32112: EQUAL
32113: IFTRUE 32117
32115: GO 32128
32117: POP
// tech := tech_mortar ; 3 :
32118: LD_ADDR_VAR 0 5
32122: PUSH
32123: LD_INT 41
32125: ST_TO_ADDR
32126: GO 32148
32128: LD_INT 3
32130: DOUBLE
32131: EQUAL
32132: IFTRUE 32136
32134: GO 32147
32136: POP
// tech := tech_bazooka ; end ;
32137: LD_ADDR_VAR 0 5
32141: PUSH
32142: LD_INT 44
32144: ST_TO_ADDR
32145: GO 32148
32147: POP
// if Researched ( side , tech ) then
32148: LD_VAR 0 3
32152: PPUSH
32153: LD_VAR 0 5
32157: PPUSH
32158: CALL_OW 325
32162: IFFALSE 32189
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32164: LD_ADDR_VAR 0 2
32168: PUSH
32169: LD_INT 5
32171: PUSH
32172: LD_INT 8
32174: PUSH
32175: LD_INT 9
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: LIST
32182: PUSH
32183: LD_VAR 0 4
32187: ARRAY
32188: ST_TO_ADDR
// end ;
32189: LD_VAR 0 2
32193: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32194: LD_INT 0
32196: PPUSH
32197: PPUSH
32198: PPUSH
// if not mines then
32199: LD_VAR 0 2
32203: NOT
32204: IFFALSE 32208
// exit ;
32206: GO 32352
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32208: LD_ADDR_VAR 0 5
32212: PUSH
32213: LD_INT 81
32215: PUSH
32216: LD_VAR 0 1
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 3
32227: PUSH
32228: LD_INT 21
32230: PUSH
32231: LD_INT 3
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PPUSH
32246: CALL_OW 69
32250: ST_TO_ADDR
// for i in mines do
32251: LD_ADDR_VAR 0 4
32255: PUSH
32256: LD_VAR 0 2
32260: PUSH
32261: FOR_IN
32262: IFFALSE 32350
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32264: LD_VAR 0 4
32268: PUSH
32269: LD_INT 1
32271: ARRAY
32272: PPUSH
32273: LD_VAR 0 4
32277: PUSH
32278: LD_INT 2
32280: ARRAY
32281: PPUSH
32282: CALL_OW 458
32286: NOT
32287: IFFALSE 32291
// continue ;
32289: GO 32261
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32291: LD_VAR 0 4
32295: PUSH
32296: LD_INT 1
32298: ARRAY
32299: PPUSH
32300: LD_VAR 0 4
32304: PUSH
32305: LD_INT 2
32307: ARRAY
32308: PPUSH
32309: CALL_OW 428
32313: PUSH
32314: LD_VAR 0 5
32318: IN
32319: IFFALSE 32348
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32321: LD_VAR 0 4
32325: PUSH
32326: LD_INT 1
32328: ARRAY
32329: PPUSH
32330: LD_VAR 0 4
32334: PUSH
32335: LD_INT 2
32337: ARRAY
32338: PPUSH
32339: LD_VAR 0 1
32343: PPUSH
32344: CALL_OW 456
// end ;
32348: GO 32261
32350: POP
32351: POP
// end ;
32352: LD_VAR 0 3
32356: RET
// export function Count ( array ) ; var i ; begin
32357: LD_INT 0
32359: PPUSH
32360: PPUSH
// result := 0 ;
32361: LD_ADDR_VAR 0 2
32365: PUSH
32366: LD_INT 0
32368: ST_TO_ADDR
// for i in array do
32369: LD_ADDR_VAR 0 3
32373: PUSH
32374: LD_VAR 0 1
32378: PUSH
32379: FOR_IN
32380: IFFALSE 32404
// if i then
32382: LD_VAR 0 3
32386: IFFALSE 32402
// result := result + 1 ;
32388: LD_ADDR_VAR 0 2
32392: PUSH
32393: LD_VAR 0 2
32397: PUSH
32398: LD_INT 1
32400: PLUS
32401: ST_TO_ADDR
32402: GO 32379
32404: POP
32405: POP
// end ;
32406: LD_VAR 0 2
32410: RET
// export function IsEmpty ( building ) ; begin
32411: LD_INT 0
32413: PPUSH
// if not building then
32414: LD_VAR 0 1
32418: NOT
32419: IFFALSE 32423
// exit ;
32421: GO 32466
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32423: LD_ADDR_VAR 0 2
32427: PUSH
32428: LD_VAR 0 1
32432: PUSH
32433: LD_INT 22
32435: PUSH
32436: LD_VAR 0 1
32440: PPUSH
32441: CALL_OW 255
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 58
32452: PUSH
32453: EMPTY
32454: LIST
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PPUSH
32460: CALL_OW 69
32464: IN
32465: ST_TO_ADDR
// end ;
32466: LD_VAR 0 2
32470: RET
// export function IsNotFull ( building ) ; begin
32471: LD_INT 0
32473: PPUSH
// if not building then
32474: LD_VAR 0 1
32478: NOT
32479: IFFALSE 32483
// exit ;
32481: GO 32502
// result := UnitsInside ( building ) < 6 ;
32483: LD_ADDR_VAR 0 2
32487: PUSH
32488: LD_VAR 0 1
32492: PPUSH
32493: CALL_OW 313
32497: PUSH
32498: LD_INT 6
32500: LESS
32501: ST_TO_ADDR
// end ;
32502: LD_VAR 0 2
32506: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32507: LD_INT 0
32509: PPUSH
32510: PPUSH
32511: PPUSH
32512: PPUSH
// tmp := [ ] ;
32513: LD_ADDR_VAR 0 3
32517: PUSH
32518: EMPTY
32519: ST_TO_ADDR
// list := [ ] ;
32520: LD_ADDR_VAR 0 5
32524: PUSH
32525: EMPTY
32526: ST_TO_ADDR
// for i = 16 to 25 do
32527: LD_ADDR_VAR 0 4
32531: PUSH
32532: DOUBLE
32533: LD_INT 16
32535: DEC
32536: ST_TO_ADDR
32537: LD_INT 25
32539: PUSH
32540: FOR_TO
32541: IFFALSE 32614
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32543: LD_ADDR_VAR 0 3
32547: PUSH
32548: LD_VAR 0 3
32552: PUSH
32553: LD_INT 22
32555: PUSH
32556: LD_VAR 0 1
32560: PPUSH
32561: CALL_OW 255
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 91
32572: PUSH
32573: LD_VAR 0 1
32577: PUSH
32578: LD_INT 6
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 30
32588: PUSH
32589: LD_VAR 0 4
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: LIST
32602: PUSH
32603: EMPTY
32604: LIST
32605: PPUSH
32606: CALL_OW 69
32610: ADD
32611: ST_TO_ADDR
32612: GO 32540
32614: POP
32615: POP
// for i = 1 to tmp do
32616: LD_ADDR_VAR 0 4
32620: PUSH
32621: DOUBLE
32622: LD_INT 1
32624: DEC
32625: ST_TO_ADDR
32626: LD_VAR 0 3
32630: PUSH
32631: FOR_TO
32632: IFFALSE 32720
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32634: LD_ADDR_VAR 0 5
32638: PUSH
32639: LD_VAR 0 5
32643: PUSH
32644: LD_VAR 0 3
32648: PUSH
32649: LD_VAR 0 4
32653: ARRAY
32654: PPUSH
32655: CALL_OW 266
32659: PUSH
32660: LD_VAR 0 3
32664: PUSH
32665: LD_VAR 0 4
32669: ARRAY
32670: PPUSH
32671: CALL_OW 250
32675: PUSH
32676: LD_VAR 0 3
32680: PUSH
32681: LD_VAR 0 4
32685: ARRAY
32686: PPUSH
32687: CALL_OW 251
32691: PUSH
32692: LD_VAR 0 3
32696: PUSH
32697: LD_VAR 0 4
32701: ARRAY
32702: PPUSH
32703: CALL_OW 254
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: PUSH
32714: EMPTY
32715: LIST
32716: ADD
32717: ST_TO_ADDR
32718: GO 32631
32720: POP
32721: POP
// result := list ;
32722: LD_ADDR_VAR 0 2
32726: PUSH
32727: LD_VAR 0 5
32731: ST_TO_ADDR
// end ;
32732: LD_VAR 0 2
32736: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32737: LD_INT 0
32739: PPUSH
32740: PPUSH
32741: PPUSH
32742: PPUSH
32743: PPUSH
32744: PPUSH
32745: PPUSH
// if not factory then
32746: LD_VAR 0 1
32750: NOT
32751: IFFALSE 32755
// exit ;
32753: GO 33348
// if control = control_apeman then
32755: LD_VAR 0 4
32759: PUSH
32760: LD_INT 5
32762: EQUAL
32763: IFFALSE 32872
// begin tmp := UnitsInside ( factory ) ;
32765: LD_ADDR_VAR 0 8
32769: PUSH
32770: LD_VAR 0 1
32774: PPUSH
32775: CALL_OW 313
32779: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32780: LD_VAR 0 8
32784: PPUSH
32785: LD_INT 25
32787: PUSH
32788: LD_INT 12
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PPUSH
32795: CALL_OW 72
32799: NOT
32800: IFFALSE 32810
// control := control_manual ;
32802: LD_ADDR_VAR 0 4
32806: PUSH
32807: LD_INT 1
32809: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32810: LD_ADDR_VAR 0 8
32814: PUSH
32815: LD_VAR 0 1
32819: PPUSH
32820: CALL 32507 0 1
32824: ST_TO_ADDR
// if tmp then
32825: LD_VAR 0 8
32829: IFFALSE 32872
// begin for i in tmp do
32831: LD_ADDR_VAR 0 7
32835: PUSH
32836: LD_VAR 0 8
32840: PUSH
32841: FOR_IN
32842: IFFALSE 32870
// if i [ 1 ] = b_ext_radio then
32844: LD_VAR 0 7
32848: PUSH
32849: LD_INT 1
32851: ARRAY
32852: PUSH
32853: LD_INT 22
32855: EQUAL
32856: IFFALSE 32868
// begin control := control_remote ;
32858: LD_ADDR_VAR 0 4
32862: PUSH
32863: LD_INT 2
32865: ST_TO_ADDR
// break ;
32866: GO 32870
// end ;
32868: GO 32841
32870: POP
32871: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32872: LD_VAR 0 1
32876: PPUSH
32877: LD_VAR 0 2
32881: PPUSH
32882: LD_VAR 0 3
32886: PPUSH
32887: LD_VAR 0 4
32891: PPUSH
32892: LD_VAR 0 5
32896: PPUSH
32897: CALL_OW 448
32901: IFFALSE 32936
// begin result := [ chassis , engine , control , weapon ] ;
32903: LD_ADDR_VAR 0 6
32907: PUSH
32908: LD_VAR 0 2
32912: PUSH
32913: LD_VAR 0 3
32917: PUSH
32918: LD_VAR 0 4
32922: PUSH
32923: LD_VAR 0 5
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: ST_TO_ADDR
// exit ;
32934: GO 33348
// end ; _chassis := AvailableChassisList ( factory ) ;
32936: LD_ADDR_VAR 0 9
32940: PUSH
32941: LD_VAR 0 1
32945: PPUSH
32946: CALL_OW 475
32950: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32951: LD_ADDR_VAR 0 11
32955: PUSH
32956: LD_VAR 0 1
32960: PPUSH
32961: CALL_OW 476
32965: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32966: LD_ADDR_VAR 0 12
32970: PUSH
32971: LD_VAR 0 1
32975: PPUSH
32976: CALL_OW 477
32980: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32981: LD_ADDR_VAR 0 10
32985: PUSH
32986: LD_VAR 0 1
32990: PPUSH
32991: CALL_OW 478
32995: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32996: LD_VAR 0 9
33000: NOT
33001: PUSH
33002: LD_VAR 0 11
33006: NOT
33007: OR
33008: PUSH
33009: LD_VAR 0 12
33013: NOT
33014: OR
33015: PUSH
33016: LD_VAR 0 10
33020: NOT
33021: OR
33022: IFFALSE 33057
// begin result := [ chassis , engine , control , weapon ] ;
33024: LD_ADDR_VAR 0 6
33028: PUSH
33029: LD_VAR 0 2
33033: PUSH
33034: LD_VAR 0 3
33038: PUSH
33039: LD_VAR 0 4
33043: PUSH
33044: LD_VAR 0 5
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: ST_TO_ADDR
// exit ;
33055: GO 33348
// end ; if not chassis in _chassis then
33057: LD_VAR 0 2
33061: PUSH
33062: LD_VAR 0 9
33066: IN
33067: NOT
33068: IFFALSE 33094
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33070: LD_ADDR_VAR 0 2
33074: PUSH
33075: LD_VAR 0 9
33079: PUSH
33080: LD_INT 1
33082: PPUSH
33083: LD_VAR 0 9
33087: PPUSH
33088: CALL_OW 12
33092: ARRAY
33093: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33094: LD_VAR 0 2
33098: PPUSH
33099: LD_VAR 0 3
33103: PPUSH
33104: CALL 33353 0 2
33108: NOT
33109: IFFALSE 33168
// repeat engine := _engine [ 1 ] ;
33111: LD_ADDR_VAR 0 3
33115: PUSH
33116: LD_VAR 0 11
33120: PUSH
33121: LD_INT 1
33123: ARRAY
33124: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33125: LD_ADDR_VAR 0 11
33129: PUSH
33130: LD_VAR 0 11
33134: PPUSH
33135: LD_INT 1
33137: PPUSH
33138: CALL_OW 3
33142: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33143: LD_VAR 0 2
33147: PPUSH
33148: LD_VAR 0 3
33152: PPUSH
33153: CALL 33353 0 2
33157: PUSH
33158: LD_VAR 0 11
33162: PUSH
33163: EMPTY
33164: EQUAL
33165: OR
33166: IFFALSE 33111
// if not control in _control then
33168: LD_VAR 0 4
33172: PUSH
33173: LD_VAR 0 12
33177: IN
33178: NOT
33179: IFFALSE 33205
// control := _control [ rand ( 1 , _control ) ] ;
33181: LD_ADDR_VAR 0 4
33185: PUSH
33186: LD_VAR 0 12
33190: PUSH
33191: LD_INT 1
33193: PPUSH
33194: LD_VAR 0 12
33198: PPUSH
33199: CALL_OW 12
33203: ARRAY
33204: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33205: LD_VAR 0 2
33209: PPUSH
33210: LD_VAR 0 5
33214: PPUSH
33215: CALL 33573 0 2
33219: NOT
33220: IFFALSE 33279
// repeat weapon := _weapon [ 1 ] ;
33222: LD_ADDR_VAR 0 5
33226: PUSH
33227: LD_VAR 0 10
33231: PUSH
33232: LD_INT 1
33234: ARRAY
33235: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33236: LD_ADDR_VAR 0 10
33240: PUSH
33241: LD_VAR 0 10
33245: PPUSH
33246: LD_INT 1
33248: PPUSH
33249: CALL_OW 3
33253: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33254: LD_VAR 0 2
33258: PPUSH
33259: LD_VAR 0 5
33263: PPUSH
33264: CALL 33573 0 2
33268: PUSH
33269: LD_VAR 0 10
33273: PUSH
33274: EMPTY
33275: EQUAL
33276: OR
33277: IFFALSE 33222
// result := [ ] ;
33279: LD_ADDR_VAR 0 6
33283: PUSH
33284: EMPTY
33285: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33286: LD_VAR 0 1
33290: PPUSH
33291: LD_VAR 0 2
33295: PPUSH
33296: LD_VAR 0 3
33300: PPUSH
33301: LD_VAR 0 4
33305: PPUSH
33306: LD_VAR 0 5
33310: PPUSH
33311: CALL_OW 448
33315: IFFALSE 33348
// result := [ chassis , engine , control , weapon ] ;
33317: LD_ADDR_VAR 0 6
33321: PUSH
33322: LD_VAR 0 2
33326: PUSH
33327: LD_VAR 0 3
33331: PUSH
33332: LD_VAR 0 4
33336: PUSH
33337: LD_VAR 0 5
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: ST_TO_ADDR
// end ;
33348: LD_VAR 0 6
33352: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33353: LD_INT 0
33355: PPUSH
// if not chassis or not engine then
33356: LD_VAR 0 1
33360: NOT
33361: PUSH
33362: LD_VAR 0 2
33366: NOT
33367: OR
33368: IFFALSE 33372
// exit ;
33370: GO 33568
// case engine of engine_solar :
33372: LD_VAR 0 2
33376: PUSH
33377: LD_INT 2
33379: DOUBLE
33380: EQUAL
33381: IFTRUE 33385
33383: GO 33423
33385: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33386: LD_ADDR_VAR 0 3
33390: PUSH
33391: LD_INT 11
33393: PUSH
33394: LD_INT 12
33396: PUSH
33397: LD_INT 13
33399: PUSH
33400: LD_INT 14
33402: PUSH
33403: LD_INT 1
33405: PUSH
33406: LD_INT 2
33408: PUSH
33409: LD_INT 3
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: ST_TO_ADDR
33421: GO 33552
33423: LD_INT 1
33425: DOUBLE
33426: EQUAL
33427: IFTRUE 33431
33429: GO 33493
33431: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33432: LD_ADDR_VAR 0 3
33436: PUSH
33437: LD_INT 11
33439: PUSH
33440: LD_INT 12
33442: PUSH
33443: LD_INT 13
33445: PUSH
33446: LD_INT 14
33448: PUSH
33449: LD_INT 1
33451: PUSH
33452: LD_INT 2
33454: PUSH
33455: LD_INT 3
33457: PUSH
33458: LD_INT 4
33460: PUSH
33461: LD_INT 5
33463: PUSH
33464: LD_INT 21
33466: PUSH
33467: LD_INT 23
33469: PUSH
33470: LD_INT 22
33472: PUSH
33473: LD_INT 24
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: ST_TO_ADDR
33491: GO 33552
33493: LD_INT 3
33495: DOUBLE
33496: EQUAL
33497: IFTRUE 33501
33499: GO 33551
33501: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33502: LD_ADDR_VAR 0 3
33506: PUSH
33507: LD_INT 13
33509: PUSH
33510: LD_INT 14
33512: PUSH
33513: LD_INT 2
33515: PUSH
33516: LD_INT 3
33518: PUSH
33519: LD_INT 4
33521: PUSH
33522: LD_INT 5
33524: PUSH
33525: LD_INT 21
33527: PUSH
33528: LD_INT 22
33530: PUSH
33531: LD_INT 23
33533: PUSH
33534: LD_INT 24
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: ST_TO_ADDR
33549: GO 33552
33551: POP
// result := ( chassis in result ) ;
33552: LD_ADDR_VAR 0 3
33556: PUSH
33557: LD_VAR 0 1
33561: PUSH
33562: LD_VAR 0 3
33566: IN
33567: ST_TO_ADDR
// end ;
33568: LD_VAR 0 3
33572: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33573: LD_INT 0
33575: PPUSH
// if not chassis or not weapon then
33576: LD_VAR 0 1
33580: NOT
33581: PUSH
33582: LD_VAR 0 2
33586: NOT
33587: OR
33588: IFFALSE 33592
// exit ;
33590: GO 34618
// case weapon of us_machine_gun :
33592: LD_VAR 0 2
33596: PUSH
33597: LD_INT 2
33599: DOUBLE
33600: EQUAL
33601: IFTRUE 33605
33603: GO 33635
33605: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33606: LD_ADDR_VAR 0 3
33610: PUSH
33611: LD_INT 1
33613: PUSH
33614: LD_INT 2
33616: PUSH
33617: LD_INT 3
33619: PUSH
33620: LD_INT 4
33622: PUSH
33623: LD_INT 5
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: ST_TO_ADDR
33633: GO 34602
33635: LD_INT 3
33637: DOUBLE
33638: EQUAL
33639: IFTRUE 33643
33641: GO 33673
33643: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33644: LD_ADDR_VAR 0 3
33648: PUSH
33649: LD_INT 1
33651: PUSH
33652: LD_INT 2
33654: PUSH
33655: LD_INT 3
33657: PUSH
33658: LD_INT 4
33660: PUSH
33661: LD_INT 5
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: ST_TO_ADDR
33671: GO 34602
33673: LD_INT 11
33675: DOUBLE
33676: EQUAL
33677: IFTRUE 33681
33679: GO 33711
33681: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33682: LD_ADDR_VAR 0 3
33686: PUSH
33687: LD_INT 1
33689: PUSH
33690: LD_INT 2
33692: PUSH
33693: LD_INT 3
33695: PUSH
33696: LD_INT 4
33698: PUSH
33699: LD_INT 5
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: ST_TO_ADDR
33709: GO 34602
33711: LD_INT 4
33713: DOUBLE
33714: EQUAL
33715: IFTRUE 33719
33717: GO 33745
33719: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33720: LD_ADDR_VAR 0 3
33724: PUSH
33725: LD_INT 2
33727: PUSH
33728: LD_INT 3
33730: PUSH
33731: LD_INT 4
33733: PUSH
33734: LD_INT 5
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: ST_TO_ADDR
33743: GO 34602
33745: LD_INT 5
33747: DOUBLE
33748: EQUAL
33749: IFTRUE 33753
33751: GO 33779
33753: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33754: LD_ADDR_VAR 0 3
33758: PUSH
33759: LD_INT 2
33761: PUSH
33762: LD_INT 3
33764: PUSH
33765: LD_INT 4
33767: PUSH
33768: LD_INT 5
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: ST_TO_ADDR
33777: GO 34602
33779: LD_INT 9
33781: DOUBLE
33782: EQUAL
33783: IFTRUE 33787
33785: GO 33813
33787: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33788: LD_ADDR_VAR 0 3
33792: PUSH
33793: LD_INT 2
33795: PUSH
33796: LD_INT 3
33798: PUSH
33799: LD_INT 4
33801: PUSH
33802: LD_INT 5
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: ST_TO_ADDR
33811: GO 34602
33813: LD_INT 7
33815: DOUBLE
33816: EQUAL
33817: IFTRUE 33821
33819: GO 33847
33821: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33822: LD_ADDR_VAR 0 3
33826: PUSH
33827: LD_INT 2
33829: PUSH
33830: LD_INT 3
33832: PUSH
33833: LD_INT 4
33835: PUSH
33836: LD_INT 5
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: ST_TO_ADDR
33845: GO 34602
33847: LD_INT 12
33849: DOUBLE
33850: EQUAL
33851: IFTRUE 33855
33853: GO 33881
33855: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33856: LD_ADDR_VAR 0 3
33860: PUSH
33861: LD_INT 2
33863: PUSH
33864: LD_INT 3
33866: PUSH
33867: LD_INT 4
33869: PUSH
33870: LD_INT 5
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: ST_TO_ADDR
33879: GO 34602
33881: LD_INT 13
33883: DOUBLE
33884: EQUAL
33885: IFTRUE 33889
33887: GO 33915
33889: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33890: LD_ADDR_VAR 0 3
33894: PUSH
33895: LD_INT 2
33897: PUSH
33898: LD_INT 3
33900: PUSH
33901: LD_INT 4
33903: PUSH
33904: LD_INT 5
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: ST_TO_ADDR
33913: GO 34602
33915: LD_INT 14
33917: DOUBLE
33918: EQUAL
33919: IFTRUE 33923
33921: GO 33941
33923: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33924: LD_ADDR_VAR 0 3
33928: PUSH
33929: LD_INT 4
33931: PUSH
33932: LD_INT 5
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: ST_TO_ADDR
33939: GO 34602
33941: LD_INT 6
33943: DOUBLE
33944: EQUAL
33945: IFTRUE 33949
33947: GO 33967
33949: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33950: LD_ADDR_VAR 0 3
33954: PUSH
33955: LD_INT 4
33957: PUSH
33958: LD_INT 5
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: ST_TO_ADDR
33965: GO 34602
33967: LD_INT 10
33969: DOUBLE
33970: EQUAL
33971: IFTRUE 33975
33973: GO 33993
33975: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33976: LD_ADDR_VAR 0 3
33980: PUSH
33981: LD_INT 4
33983: PUSH
33984: LD_INT 5
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: ST_TO_ADDR
33991: GO 34602
33993: LD_INT 22
33995: DOUBLE
33996: EQUAL
33997: IFTRUE 34001
33999: GO 34027
34001: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34002: LD_ADDR_VAR 0 3
34006: PUSH
34007: LD_INT 11
34009: PUSH
34010: LD_INT 12
34012: PUSH
34013: LD_INT 13
34015: PUSH
34016: LD_INT 14
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: ST_TO_ADDR
34025: GO 34602
34027: LD_INT 23
34029: DOUBLE
34030: EQUAL
34031: IFTRUE 34035
34033: GO 34061
34035: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34036: LD_ADDR_VAR 0 3
34040: PUSH
34041: LD_INT 11
34043: PUSH
34044: LD_INT 12
34046: PUSH
34047: LD_INT 13
34049: PUSH
34050: LD_INT 14
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: ST_TO_ADDR
34059: GO 34602
34061: LD_INT 24
34063: DOUBLE
34064: EQUAL
34065: IFTRUE 34069
34067: GO 34095
34069: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34070: LD_ADDR_VAR 0 3
34074: PUSH
34075: LD_INT 11
34077: PUSH
34078: LD_INT 12
34080: PUSH
34081: LD_INT 13
34083: PUSH
34084: LD_INT 14
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: ST_TO_ADDR
34093: GO 34602
34095: LD_INT 30
34097: DOUBLE
34098: EQUAL
34099: IFTRUE 34103
34101: GO 34129
34103: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34104: LD_ADDR_VAR 0 3
34108: PUSH
34109: LD_INT 11
34111: PUSH
34112: LD_INT 12
34114: PUSH
34115: LD_INT 13
34117: PUSH
34118: LD_INT 14
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: ST_TO_ADDR
34127: GO 34602
34129: LD_INT 25
34131: DOUBLE
34132: EQUAL
34133: IFTRUE 34137
34135: GO 34155
34137: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34138: LD_ADDR_VAR 0 3
34142: PUSH
34143: LD_INT 13
34145: PUSH
34146: LD_INT 14
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: ST_TO_ADDR
34153: GO 34602
34155: LD_INT 27
34157: DOUBLE
34158: EQUAL
34159: IFTRUE 34163
34161: GO 34181
34163: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34164: LD_ADDR_VAR 0 3
34168: PUSH
34169: LD_INT 13
34171: PUSH
34172: LD_INT 14
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: ST_TO_ADDR
34179: GO 34602
34181: LD_INT 28
34183: DOUBLE
34184: EQUAL
34185: IFTRUE 34189
34187: GO 34207
34189: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34190: LD_ADDR_VAR 0 3
34194: PUSH
34195: LD_INT 13
34197: PUSH
34198: LD_INT 14
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: ST_TO_ADDR
34205: GO 34602
34207: LD_INT 29
34209: DOUBLE
34210: EQUAL
34211: IFTRUE 34215
34213: GO 34233
34215: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34216: LD_ADDR_VAR 0 3
34220: PUSH
34221: LD_INT 13
34223: PUSH
34224: LD_INT 14
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: ST_TO_ADDR
34231: GO 34602
34233: LD_INT 31
34235: DOUBLE
34236: EQUAL
34237: IFTRUE 34241
34239: GO 34259
34241: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34242: LD_ADDR_VAR 0 3
34246: PUSH
34247: LD_INT 13
34249: PUSH
34250: LD_INT 14
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: ST_TO_ADDR
34257: GO 34602
34259: LD_INT 26
34261: DOUBLE
34262: EQUAL
34263: IFTRUE 34267
34265: GO 34285
34267: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34268: LD_ADDR_VAR 0 3
34272: PUSH
34273: LD_INT 13
34275: PUSH
34276: LD_INT 14
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: ST_TO_ADDR
34283: GO 34602
34285: LD_INT 42
34287: DOUBLE
34288: EQUAL
34289: IFTRUE 34293
34291: GO 34319
34293: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34294: LD_ADDR_VAR 0 3
34298: PUSH
34299: LD_INT 21
34301: PUSH
34302: LD_INT 22
34304: PUSH
34305: LD_INT 23
34307: PUSH
34308: LD_INT 24
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: ST_TO_ADDR
34317: GO 34602
34319: LD_INT 43
34321: DOUBLE
34322: EQUAL
34323: IFTRUE 34327
34325: GO 34353
34327: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34328: LD_ADDR_VAR 0 3
34332: PUSH
34333: LD_INT 21
34335: PUSH
34336: LD_INT 22
34338: PUSH
34339: LD_INT 23
34341: PUSH
34342: LD_INT 24
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: ST_TO_ADDR
34351: GO 34602
34353: LD_INT 44
34355: DOUBLE
34356: EQUAL
34357: IFTRUE 34361
34359: GO 34387
34361: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34362: LD_ADDR_VAR 0 3
34366: PUSH
34367: LD_INT 21
34369: PUSH
34370: LD_INT 22
34372: PUSH
34373: LD_INT 23
34375: PUSH
34376: LD_INT 24
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: ST_TO_ADDR
34385: GO 34602
34387: LD_INT 45
34389: DOUBLE
34390: EQUAL
34391: IFTRUE 34395
34393: GO 34421
34395: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34396: LD_ADDR_VAR 0 3
34400: PUSH
34401: LD_INT 21
34403: PUSH
34404: LD_INT 22
34406: PUSH
34407: LD_INT 23
34409: PUSH
34410: LD_INT 24
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: ST_TO_ADDR
34419: GO 34602
34421: LD_INT 49
34423: DOUBLE
34424: EQUAL
34425: IFTRUE 34429
34427: GO 34455
34429: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34430: LD_ADDR_VAR 0 3
34434: PUSH
34435: LD_INT 21
34437: PUSH
34438: LD_INT 22
34440: PUSH
34441: LD_INT 23
34443: PUSH
34444: LD_INT 24
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: ST_TO_ADDR
34453: GO 34602
34455: LD_INT 51
34457: DOUBLE
34458: EQUAL
34459: IFTRUE 34463
34461: GO 34489
34463: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34464: LD_ADDR_VAR 0 3
34468: PUSH
34469: LD_INT 21
34471: PUSH
34472: LD_INT 22
34474: PUSH
34475: LD_INT 23
34477: PUSH
34478: LD_INT 24
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: ST_TO_ADDR
34487: GO 34602
34489: LD_INT 52
34491: DOUBLE
34492: EQUAL
34493: IFTRUE 34497
34495: GO 34523
34497: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34498: LD_ADDR_VAR 0 3
34502: PUSH
34503: LD_INT 21
34505: PUSH
34506: LD_INT 22
34508: PUSH
34509: LD_INT 23
34511: PUSH
34512: LD_INT 24
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: ST_TO_ADDR
34521: GO 34602
34523: LD_INT 53
34525: DOUBLE
34526: EQUAL
34527: IFTRUE 34531
34529: GO 34549
34531: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34532: LD_ADDR_VAR 0 3
34536: PUSH
34537: LD_INT 23
34539: PUSH
34540: LD_INT 24
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: ST_TO_ADDR
34547: GO 34602
34549: LD_INT 46
34551: DOUBLE
34552: EQUAL
34553: IFTRUE 34557
34555: GO 34575
34557: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34558: LD_ADDR_VAR 0 3
34562: PUSH
34563: LD_INT 23
34565: PUSH
34566: LD_INT 24
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: ST_TO_ADDR
34573: GO 34602
34575: LD_INT 47
34577: DOUBLE
34578: EQUAL
34579: IFTRUE 34583
34581: GO 34601
34583: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34584: LD_ADDR_VAR 0 3
34588: PUSH
34589: LD_INT 23
34591: PUSH
34592: LD_INT 24
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: ST_TO_ADDR
34599: GO 34602
34601: POP
// result := ( chassis in result ) ;
34602: LD_ADDR_VAR 0 3
34606: PUSH
34607: LD_VAR 0 1
34611: PUSH
34612: LD_VAR 0 3
34616: IN
34617: ST_TO_ADDR
// end ;
34618: LD_VAR 0 3
34622: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34623: LD_INT 0
34625: PPUSH
34626: PPUSH
34627: PPUSH
34628: PPUSH
34629: PPUSH
34630: PPUSH
34631: PPUSH
// result := array ;
34632: LD_ADDR_VAR 0 5
34636: PUSH
34637: LD_VAR 0 1
34641: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34642: LD_VAR 0 1
34646: NOT
34647: PUSH
34648: LD_VAR 0 2
34652: NOT
34653: OR
34654: PUSH
34655: LD_VAR 0 3
34659: NOT
34660: OR
34661: PUSH
34662: LD_VAR 0 2
34666: PUSH
34667: LD_VAR 0 1
34671: GREATER
34672: OR
34673: PUSH
34674: LD_VAR 0 3
34678: PUSH
34679: LD_VAR 0 1
34683: GREATER
34684: OR
34685: IFFALSE 34689
// exit ;
34687: GO 34985
// if direction then
34689: LD_VAR 0 4
34693: IFFALSE 34757
// begin d := 1 ;
34695: LD_ADDR_VAR 0 9
34699: PUSH
34700: LD_INT 1
34702: ST_TO_ADDR
// if i_from > i_to then
34703: LD_VAR 0 2
34707: PUSH
34708: LD_VAR 0 3
34712: GREATER
34713: IFFALSE 34739
// length := ( array - i_from ) + i_to else
34715: LD_ADDR_VAR 0 11
34719: PUSH
34720: LD_VAR 0 1
34724: PUSH
34725: LD_VAR 0 2
34729: MINUS
34730: PUSH
34731: LD_VAR 0 3
34735: PLUS
34736: ST_TO_ADDR
34737: GO 34755
// length := i_to - i_from ;
34739: LD_ADDR_VAR 0 11
34743: PUSH
34744: LD_VAR 0 3
34748: PUSH
34749: LD_VAR 0 2
34753: MINUS
34754: ST_TO_ADDR
// end else
34755: GO 34818
// begin d := - 1 ;
34757: LD_ADDR_VAR 0 9
34761: PUSH
34762: LD_INT 1
34764: NEG
34765: ST_TO_ADDR
// if i_from > i_to then
34766: LD_VAR 0 2
34770: PUSH
34771: LD_VAR 0 3
34775: GREATER
34776: IFFALSE 34796
// length := i_from - i_to else
34778: LD_ADDR_VAR 0 11
34782: PUSH
34783: LD_VAR 0 2
34787: PUSH
34788: LD_VAR 0 3
34792: MINUS
34793: ST_TO_ADDR
34794: GO 34818
// length := ( array - i_to ) + i_from ;
34796: LD_ADDR_VAR 0 11
34800: PUSH
34801: LD_VAR 0 1
34805: PUSH
34806: LD_VAR 0 3
34810: MINUS
34811: PUSH
34812: LD_VAR 0 2
34816: PLUS
34817: ST_TO_ADDR
// end ; if not length then
34818: LD_VAR 0 11
34822: NOT
34823: IFFALSE 34827
// exit ;
34825: GO 34985
// tmp := array ;
34827: LD_ADDR_VAR 0 10
34831: PUSH
34832: LD_VAR 0 1
34836: ST_TO_ADDR
// for i = 1 to length do
34837: LD_ADDR_VAR 0 6
34841: PUSH
34842: DOUBLE
34843: LD_INT 1
34845: DEC
34846: ST_TO_ADDR
34847: LD_VAR 0 11
34851: PUSH
34852: FOR_TO
34853: IFFALSE 34973
// begin for j = 1 to array do
34855: LD_ADDR_VAR 0 7
34859: PUSH
34860: DOUBLE
34861: LD_INT 1
34863: DEC
34864: ST_TO_ADDR
34865: LD_VAR 0 1
34869: PUSH
34870: FOR_TO
34871: IFFALSE 34959
// begin k := j + d ;
34873: LD_ADDR_VAR 0 8
34877: PUSH
34878: LD_VAR 0 7
34882: PUSH
34883: LD_VAR 0 9
34887: PLUS
34888: ST_TO_ADDR
// if k > array then
34889: LD_VAR 0 8
34893: PUSH
34894: LD_VAR 0 1
34898: GREATER
34899: IFFALSE 34909
// k := 1 ;
34901: LD_ADDR_VAR 0 8
34905: PUSH
34906: LD_INT 1
34908: ST_TO_ADDR
// if not k then
34909: LD_VAR 0 8
34913: NOT
34914: IFFALSE 34926
// k := array ;
34916: LD_ADDR_VAR 0 8
34920: PUSH
34921: LD_VAR 0 1
34925: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34926: LD_ADDR_VAR 0 10
34930: PUSH
34931: LD_VAR 0 10
34935: PPUSH
34936: LD_VAR 0 8
34940: PPUSH
34941: LD_VAR 0 1
34945: PUSH
34946: LD_VAR 0 7
34950: ARRAY
34951: PPUSH
34952: CALL_OW 1
34956: ST_TO_ADDR
// end ;
34957: GO 34870
34959: POP
34960: POP
// array := tmp ;
34961: LD_ADDR_VAR 0 1
34965: PUSH
34966: LD_VAR 0 10
34970: ST_TO_ADDR
// end ;
34971: GO 34852
34973: POP
34974: POP
// result := array ;
34975: LD_ADDR_VAR 0 5
34979: PUSH
34980: LD_VAR 0 1
34984: ST_TO_ADDR
// end ;
34985: LD_VAR 0 5
34989: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34990: LD_INT 0
34992: PPUSH
34993: PPUSH
// result := 0 ;
34994: LD_ADDR_VAR 0 3
34998: PUSH
34999: LD_INT 0
35001: ST_TO_ADDR
// if not array or not value in array then
35002: LD_VAR 0 1
35006: NOT
35007: PUSH
35008: LD_VAR 0 2
35012: PUSH
35013: LD_VAR 0 1
35017: IN
35018: NOT
35019: OR
35020: IFFALSE 35024
// exit ;
35022: GO 35078
// for i = 1 to array do
35024: LD_ADDR_VAR 0 4
35028: PUSH
35029: DOUBLE
35030: LD_INT 1
35032: DEC
35033: ST_TO_ADDR
35034: LD_VAR 0 1
35038: PUSH
35039: FOR_TO
35040: IFFALSE 35076
// if value = array [ i ] then
35042: LD_VAR 0 2
35046: PUSH
35047: LD_VAR 0 1
35051: PUSH
35052: LD_VAR 0 4
35056: ARRAY
35057: EQUAL
35058: IFFALSE 35074
// begin result := i ;
35060: LD_ADDR_VAR 0 3
35064: PUSH
35065: LD_VAR 0 4
35069: ST_TO_ADDR
// exit ;
35070: POP
35071: POP
35072: GO 35078
// end ;
35074: GO 35039
35076: POP
35077: POP
// end ;
35078: LD_VAR 0 3
35082: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35083: LD_INT 0
35085: PPUSH
// vc_chassis := chassis ;
35086: LD_ADDR_OWVAR 37
35090: PUSH
35091: LD_VAR 0 1
35095: ST_TO_ADDR
// vc_engine := engine ;
35096: LD_ADDR_OWVAR 39
35100: PUSH
35101: LD_VAR 0 2
35105: ST_TO_ADDR
// vc_control := control ;
35106: LD_ADDR_OWVAR 38
35110: PUSH
35111: LD_VAR 0 3
35115: ST_TO_ADDR
// vc_weapon := weapon ;
35116: LD_ADDR_OWVAR 40
35120: PUSH
35121: LD_VAR 0 4
35125: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35126: LD_ADDR_OWVAR 41
35130: PUSH
35131: LD_VAR 0 5
35135: ST_TO_ADDR
// end ;
35136: LD_VAR 0 6
35140: RET
// export function WantPlant ( unit ) ; var task ; begin
35141: LD_INT 0
35143: PPUSH
35144: PPUSH
// result := false ;
35145: LD_ADDR_VAR 0 2
35149: PUSH
35150: LD_INT 0
35152: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35153: LD_ADDR_VAR 0 3
35157: PUSH
35158: LD_VAR 0 1
35162: PPUSH
35163: CALL_OW 437
35167: ST_TO_ADDR
// if task then
35168: LD_VAR 0 3
35172: IFFALSE 35200
// if task [ 1 ] [ 1 ] = p then
35174: LD_VAR 0 3
35178: PUSH
35179: LD_INT 1
35181: ARRAY
35182: PUSH
35183: LD_INT 1
35185: ARRAY
35186: PUSH
35187: LD_STRING p
35189: EQUAL
35190: IFFALSE 35200
// result := true ;
35192: LD_ADDR_VAR 0 2
35196: PUSH
35197: LD_INT 1
35199: ST_TO_ADDR
// end ;
35200: LD_VAR 0 2
35204: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35205: LD_INT 0
35207: PPUSH
35208: PPUSH
35209: PPUSH
35210: PPUSH
// if pos < 1 then
35211: LD_VAR 0 2
35215: PUSH
35216: LD_INT 1
35218: LESS
35219: IFFALSE 35223
// exit ;
35221: GO 35526
// if pos = 1 then
35223: LD_VAR 0 2
35227: PUSH
35228: LD_INT 1
35230: EQUAL
35231: IFFALSE 35264
// result := Replace ( arr , pos [ 1 ] , value ) else
35233: LD_ADDR_VAR 0 4
35237: PUSH
35238: LD_VAR 0 1
35242: PPUSH
35243: LD_VAR 0 2
35247: PUSH
35248: LD_INT 1
35250: ARRAY
35251: PPUSH
35252: LD_VAR 0 3
35256: PPUSH
35257: CALL_OW 1
35261: ST_TO_ADDR
35262: GO 35526
// begin tmp := arr ;
35264: LD_ADDR_VAR 0 6
35268: PUSH
35269: LD_VAR 0 1
35273: ST_TO_ADDR
// s_arr := [ tmp ] ;
35274: LD_ADDR_VAR 0 7
35278: PUSH
35279: LD_VAR 0 6
35283: PUSH
35284: EMPTY
35285: LIST
35286: ST_TO_ADDR
// for i = 1 to pos - 1 do
35287: LD_ADDR_VAR 0 5
35291: PUSH
35292: DOUBLE
35293: LD_INT 1
35295: DEC
35296: ST_TO_ADDR
35297: LD_VAR 0 2
35301: PUSH
35302: LD_INT 1
35304: MINUS
35305: PUSH
35306: FOR_TO
35307: IFFALSE 35352
// begin tmp := tmp [ pos [ i ] ] ;
35309: LD_ADDR_VAR 0 6
35313: PUSH
35314: LD_VAR 0 6
35318: PUSH
35319: LD_VAR 0 2
35323: PUSH
35324: LD_VAR 0 5
35328: ARRAY
35329: ARRAY
35330: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35331: LD_ADDR_VAR 0 7
35335: PUSH
35336: LD_VAR 0 7
35340: PUSH
35341: LD_VAR 0 6
35345: PUSH
35346: EMPTY
35347: LIST
35348: ADD
35349: ST_TO_ADDR
// end ;
35350: GO 35306
35352: POP
35353: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35354: LD_ADDR_VAR 0 6
35358: PUSH
35359: LD_VAR 0 6
35363: PPUSH
35364: LD_VAR 0 2
35368: PUSH
35369: LD_VAR 0 2
35373: ARRAY
35374: PPUSH
35375: LD_VAR 0 3
35379: PPUSH
35380: CALL_OW 1
35384: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35385: LD_ADDR_VAR 0 7
35389: PUSH
35390: LD_VAR 0 7
35394: PPUSH
35395: LD_VAR 0 7
35399: PPUSH
35400: LD_VAR 0 6
35404: PPUSH
35405: CALL_OW 1
35409: ST_TO_ADDR
// for i = s_arr downto 2 do
35410: LD_ADDR_VAR 0 5
35414: PUSH
35415: DOUBLE
35416: LD_VAR 0 7
35420: INC
35421: ST_TO_ADDR
35422: LD_INT 2
35424: PUSH
35425: FOR_DOWNTO
35426: IFFALSE 35510
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35428: LD_ADDR_VAR 0 6
35432: PUSH
35433: LD_VAR 0 7
35437: PUSH
35438: LD_VAR 0 5
35442: PUSH
35443: LD_INT 1
35445: MINUS
35446: ARRAY
35447: PPUSH
35448: LD_VAR 0 2
35452: PUSH
35453: LD_VAR 0 5
35457: PUSH
35458: LD_INT 1
35460: MINUS
35461: ARRAY
35462: PPUSH
35463: LD_VAR 0 7
35467: PUSH
35468: LD_VAR 0 5
35472: ARRAY
35473: PPUSH
35474: CALL_OW 1
35478: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35479: LD_ADDR_VAR 0 7
35483: PUSH
35484: LD_VAR 0 7
35488: PPUSH
35489: LD_VAR 0 5
35493: PUSH
35494: LD_INT 1
35496: MINUS
35497: PPUSH
35498: LD_VAR 0 6
35502: PPUSH
35503: CALL_OW 1
35507: ST_TO_ADDR
// end ;
35508: GO 35425
35510: POP
35511: POP
// result := s_arr [ 1 ] ;
35512: LD_ADDR_VAR 0 4
35516: PUSH
35517: LD_VAR 0 7
35521: PUSH
35522: LD_INT 1
35524: ARRAY
35525: ST_TO_ADDR
// end ; end ;
35526: LD_VAR 0 4
35530: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35531: LD_INT 0
35533: PPUSH
35534: PPUSH
// if not list then
35535: LD_VAR 0 1
35539: NOT
35540: IFFALSE 35544
// exit ;
35542: GO 35635
// i := list [ pos1 ] ;
35544: LD_ADDR_VAR 0 5
35548: PUSH
35549: LD_VAR 0 1
35553: PUSH
35554: LD_VAR 0 2
35558: ARRAY
35559: ST_TO_ADDR
// if not i then
35560: LD_VAR 0 5
35564: NOT
35565: IFFALSE 35569
// exit ;
35567: GO 35635
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35569: LD_ADDR_VAR 0 1
35573: PUSH
35574: LD_VAR 0 1
35578: PPUSH
35579: LD_VAR 0 2
35583: PPUSH
35584: LD_VAR 0 1
35588: PUSH
35589: LD_VAR 0 3
35593: ARRAY
35594: PPUSH
35595: CALL_OW 1
35599: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35600: LD_ADDR_VAR 0 1
35604: PUSH
35605: LD_VAR 0 1
35609: PPUSH
35610: LD_VAR 0 3
35614: PPUSH
35615: LD_VAR 0 5
35619: PPUSH
35620: CALL_OW 1
35624: ST_TO_ADDR
// result := list ;
35625: LD_ADDR_VAR 0 4
35629: PUSH
35630: LD_VAR 0 1
35634: ST_TO_ADDR
// end ;
35635: LD_VAR 0 4
35639: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35640: LD_INT 0
35642: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35643: LD_ADDR_VAR 0 5
35647: PUSH
35648: LD_VAR 0 1
35652: PPUSH
35653: CALL_OW 250
35657: PPUSH
35658: LD_VAR 0 1
35662: PPUSH
35663: CALL_OW 251
35667: PPUSH
35668: LD_VAR 0 2
35672: PPUSH
35673: LD_VAR 0 3
35677: PPUSH
35678: LD_VAR 0 4
35682: PPUSH
35683: CALL 35693 0 5
35687: ST_TO_ADDR
// end ;
35688: LD_VAR 0 5
35692: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35693: LD_INT 0
35695: PPUSH
35696: PPUSH
35697: PPUSH
35698: PPUSH
// if not list then
35699: LD_VAR 0 3
35703: NOT
35704: IFFALSE 35708
// exit ;
35706: GO 36096
// result := [ ] ;
35708: LD_ADDR_VAR 0 6
35712: PUSH
35713: EMPTY
35714: ST_TO_ADDR
// for i in list do
35715: LD_ADDR_VAR 0 7
35719: PUSH
35720: LD_VAR 0 3
35724: PUSH
35725: FOR_IN
35726: IFFALSE 35928
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35728: LD_ADDR_VAR 0 9
35732: PUSH
35733: LD_VAR 0 7
35737: PPUSH
35738: LD_VAR 0 1
35742: PPUSH
35743: LD_VAR 0 2
35747: PPUSH
35748: CALL_OW 297
35752: ST_TO_ADDR
// if not result then
35753: LD_VAR 0 6
35757: NOT
35758: IFFALSE 35784
// result := [ [ i , tmp ] ] else
35760: LD_ADDR_VAR 0 6
35764: PUSH
35765: LD_VAR 0 7
35769: PUSH
35770: LD_VAR 0 9
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: EMPTY
35780: LIST
35781: ST_TO_ADDR
35782: GO 35926
// begin if result [ result ] [ 2 ] < tmp then
35784: LD_VAR 0 6
35788: PUSH
35789: LD_VAR 0 6
35793: ARRAY
35794: PUSH
35795: LD_INT 2
35797: ARRAY
35798: PUSH
35799: LD_VAR 0 9
35803: LESS
35804: IFFALSE 35846
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35806: LD_ADDR_VAR 0 6
35810: PUSH
35811: LD_VAR 0 6
35815: PPUSH
35816: LD_VAR 0 6
35820: PUSH
35821: LD_INT 1
35823: PLUS
35824: PPUSH
35825: LD_VAR 0 7
35829: PUSH
35830: LD_VAR 0 9
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PPUSH
35839: CALL_OW 2
35843: ST_TO_ADDR
35844: GO 35926
// for j = 1 to result do
35846: LD_ADDR_VAR 0 8
35850: PUSH
35851: DOUBLE
35852: LD_INT 1
35854: DEC
35855: ST_TO_ADDR
35856: LD_VAR 0 6
35860: PUSH
35861: FOR_TO
35862: IFFALSE 35924
// begin if tmp < result [ j ] [ 2 ] then
35864: LD_VAR 0 9
35868: PUSH
35869: LD_VAR 0 6
35873: PUSH
35874: LD_VAR 0 8
35878: ARRAY
35879: PUSH
35880: LD_INT 2
35882: ARRAY
35883: LESS
35884: IFFALSE 35922
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35886: LD_ADDR_VAR 0 6
35890: PUSH
35891: LD_VAR 0 6
35895: PPUSH
35896: LD_VAR 0 8
35900: PPUSH
35901: LD_VAR 0 7
35905: PUSH
35906: LD_VAR 0 9
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PPUSH
35915: CALL_OW 2
35919: ST_TO_ADDR
// break ;
35920: GO 35924
// end ; end ;
35922: GO 35861
35924: POP
35925: POP
// end ; end ;
35926: GO 35725
35928: POP
35929: POP
// if result and not asc then
35930: LD_VAR 0 6
35934: PUSH
35935: LD_VAR 0 4
35939: NOT
35940: AND
35941: IFFALSE 36016
// begin tmp := result ;
35943: LD_ADDR_VAR 0 9
35947: PUSH
35948: LD_VAR 0 6
35952: ST_TO_ADDR
// for i = tmp downto 1 do
35953: LD_ADDR_VAR 0 7
35957: PUSH
35958: DOUBLE
35959: LD_VAR 0 9
35963: INC
35964: ST_TO_ADDR
35965: LD_INT 1
35967: PUSH
35968: FOR_DOWNTO
35969: IFFALSE 36014
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35971: LD_ADDR_VAR 0 6
35975: PUSH
35976: LD_VAR 0 6
35980: PPUSH
35981: LD_VAR 0 9
35985: PUSH
35986: LD_VAR 0 7
35990: MINUS
35991: PUSH
35992: LD_INT 1
35994: PLUS
35995: PPUSH
35996: LD_VAR 0 9
36000: PUSH
36001: LD_VAR 0 7
36005: ARRAY
36006: PPUSH
36007: CALL_OW 1
36011: ST_TO_ADDR
36012: GO 35968
36014: POP
36015: POP
// end ; tmp := [ ] ;
36016: LD_ADDR_VAR 0 9
36020: PUSH
36021: EMPTY
36022: ST_TO_ADDR
// if mode then
36023: LD_VAR 0 5
36027: IFFALSE 36096
// begin for i = 1 to result do
36029: LD_ADDR_VAR 0 7
36033: PUSH
36034: DOUBLE
36035: LD_INT 1
36037: DEC
36038: ST_TO_ADDR
36039: LD_VAR 0 6
36043: PUSH
36044: FOR_TO
36045: IFFALSE 36084
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36047: LD_ADDR_VAR 0 9
36051: PUSH
36052: LD_VAR 0 9
36056: PPUSH
36057: LD_VAR 0 7
36061: PPUSH
36062: LD_VAR 0 6
36066: PUSH
36067: LD_VAR 0 7
36071: ARRAY
36072: PUSH
36073: LD_INT 1
36075: ARRAY
36076: PPUSH
36077: CALL_OW 1
36081: ST_TO_ADDR
36082: GO 36044
36084: POP
36085: POP
// result := tmp ;
36086: LD_ADDR_VAR 0 6
36090: PUSH
36091: LD_VAR 0 9
36095: ST_TO_ADDR
// end ; end ;
36096: LD_VAR 0 6
36100: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36101: LD_INT 0
36103: PPUSH
36104: PPUSH
36105: PPUSH
36106: PPUSH
36107: PPUSH
36108: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36109: LD_ADDR_VAR 0 5
36113: PUSH
36114: LD_INT 0
36116: PUSH
36117: LD_INT 0
36119: PUSH
36120: LD_INT 0
36122: PUSH
36123: EMPTY
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: ST_TO_ADDR
// if not x or not y then
36131: LD_VAR 0 2
36135: NOT
36136: PUSH
36137: LD_VAR 0 3
36141: NOT
36142: OR
36143: IFFALSE 36147
// exit ;
36145: GO 37793
// if not range then
36147: LD_VAR 0 4
36151: NOT
36152: IFFALSE 36162
// range := 10 ;
36154: LD_ADDR_VAR 0 4
36158: PUSH
36159: LD_INT 10
36161: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36162: LD_ADDR_VAR 0 8
36166: PUSH
36167: LD_INT 81
36169: PUSH
36170: LD_VAR 0 1
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 92
36181: PUSH
36182: LD_VAR 0 2
36186: PUSH
36187: LD_VAR 0 3
36191: PUSH
36192: LD_VAR 0 4
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 3
36205: PUSH
36206: LD_INT 21
36208: PUSH
36209: LD_INT 3
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: LIST
36224: PPUSH
36225: CALL_OW 69
36229: ST_TO_ADDR
// if not tmp then
36230: LD_VAR 0 8
36234: NOT
36235: IFFALSE 36239
// exit ;
36237: GO 37793
// for i in tmp do
36239: LD_ADDR_VAR 0 6
36243: PUSH
36244: LD_VAR 0 8
36248: PUSH
36249: FOR_IN
36250: IFFALSE 37768
// begin points := [ 0 , 0 , 0 ] ;
36252: LD_ADDR_VAR 0 9
36256: PUSH
36257: LD_INT 0
36259: PUSH
36260: LD_INT 0
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: LIST
36270: ST_TO_ADDR
// bpoints := 1 ;
36271: LD_ADDR_VAR 0 10
36275: PUSH
36276: LD_INT 1
36278: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36279: LD_VAR 0 6
36283: PPUSH
36284: CALL_OW 247
36288: PUSH
36289: LD_INT 1
36291: DOUBLE
36292: EQUAL
36293: IFTRUE 36297
36295: GO 36875
36297: POP
// begin if GetClass ( i ) = 1 then
36298: LD_VAR 0 6
36302: PPUSH
36303: CALL_OW 257
36307: PUSH
36308: LD_INT 1
36310: EQUAL
36311: IFFALSE 36332
// points := [ 10 , 5 , 3 ] ;
36313: LD_ADDR_VAR 0 9
36317: PUSH
36318: LD_INT 10
36320: PUSH
36321: LD_INT 5
36323: PUSH
36324: LD_INT 3
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: LIST
36331: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36332: LD_VAR 0 6
36336: PPUSH
36337: CALL_OW 257
36341: PUSH
36342: LD_INT 2
36344: PUSH
36345: LD_INT 3
36347: PUSH
36348: LD_INT 4
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: LIST
36355: IN
36356: IFFALSE 36377
// points := [ 3 , 2 , 1 ] ;
36358: LD_ADDR_VAR 0 9
36362: PUSH
36363: LD_INT 3
36365: PUSH
36366: LD_INT 2
36368: PUSH
36369: LD_INT 1
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: LIST
36376: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36377: LD_VAR 0 6
36381: PPUSH
36382: CALL_OW 257
36386: PUSH
36387: LD_INT 5
36389: EQUAL
36390: IFFALSE 36411
// points := [ 130 , 5 , 2 ] ;
36392: LD_ADDR_VAR 0 9
36396: PUSH
36397: LD_INT 130
36399: PUSH
36400: LD_INT 5
36402: PUSH
36403: LD_INT 2
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: LIST
36410: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36411: LD_VAR 0 6
36415: PPUSH
36416: CALL_OW 257
36420: PUSH
36421: LD_INT 8
36423: EQUAL
36424: IFFALSE 36445
// points := [ 35 , 35 , 30 ] ;
36426: LD_ADDR_VAR 0 9
36430: PUSH
36431: LD_INT 35
36433: PUSH
36434: LD_INT 35
36436: PUSH
36437: LD_INT 30
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: LIST
36444: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36445: LD_VAR 0 6
36449: PPUSH
36450: CALL_OW 257
36454: PUSH
36455: LD_INT 9
36457: EQUAL
36458: IFFALSE 36479
// points := [ 20 , 55 , 40 ] ;
36460: LD_ADDR_VAR 0 9
36464: PUSH
36465: LD_INT 20
36467: PUSH
36468: LD_INT 55
36470: PUSH
36471: LD_INT 40
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: LIST
36478: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36479: LD_VAR 0 6
36483: PPUSH
36484: CALL_OW 257
36488: PUSH
36489: LD_INT 12
36491: PUSH
36492: LD_INT 16
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: IN
36499: IFFALSE 36520
// points := [ 5 , 3 , 2 ] ;
36501: LD_ADDR_VAR 0 9
36505: PUSH
36506: LD_INT 5
36508: PUSH
36509: LD_INT 3
36511: PUSH
36512: LD_INT 2
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: LIST
36519: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36520: LD_VAR 0 6
36524: PPUSH
36525: CALL_OW 257
36529: PUSH
36530: LD_INT 17
36532: EQUAL
36533: IFFALSE 36554
// points := [ 100 , 50 , 75 ] ;
36535: LD_ADDR_VAR 0 9
36539: PUSH
36540: LD_INT 100
36542: PUSH
36543: LD_INT 50
36545: PUSH
36546: LD_INT 75
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: LIST
36553: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36554: LD_VAR 0 6
36558: PPUSH
36559: CALL_OW 257
36563: PUSH
36564: LD_INT 15
36566: EQUAL
36567: IFFALSE 36588
// points := [ 10 , 5 , 3 ] ;
36569: LD_ADDR_VAR 0 9
36573: PUSH
36574: LD_INT 10
36576: PUSH
36577: LD_INT 5
36579: PUSH
36580: LD_INT 3
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: LIST
36587: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36588: LD_VAR 0 6
36592: PPUSH
36593: CALL_OW 257
36597: PUSH
36598: LD_INT 14
36600: EQUAL
36601: IFFALSE 36622
// points := [ 10 , 0 , 0 ] ;
36603: LD_ADDR_VAR 0 9
36607: PUSH
36608: LD_INT 10
36610: PUSH
36611: LD_INT 0
36613: PUSH
36614: LD_INT 0
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: LIST
36621: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36622: LD_VAR 0 6
36626: PPUSH
36627: CALL_OW 257
36631: PUSH
36632: LD_INT 11
36634: EQUAL
36635: IFFALSE 36656
// points := [ 30 , 10 , 5 ] ;
36637: LD_ADDR_VAR 0 9
36641: PUSH
36642: LD_INT 30
36644: PUSH
36645: LD_INT 10
36647: PUSH
36648: LD_INT 5
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: LIST
36655: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36656: LD_VAR 0 1
36660: PPUSH
36661: LD_INT 5
36663: PPUSH
36664: CALL_OW 321
36668: PUSH
36669: LD_INT 2
36671: EQUAL
36672: IFFALSE 36689
// bpoints := bpoints * 1.8 ;
36674: LD_ADDR_VAR 0 10
36678: PUSH
36679: LD_VAR 0 10
36683: PUSH
36684: LD_REAL  1.80000000000000E+0000
36687: MUL
36688: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36689: LD_VAR 0 6
36693: PPUSH
36694: CALL_OW 257
36698: PUSH
36699: LD_INT 1
36701: PUSH
36702: LD_INT 2
36704: PUSH
36705: LD_INT 3
36707: PUSH
36708: LD_INT 4
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: IN
36717: PUSH
36718: LD_VAR 0 1
36722: PPUSH
36723: LD_INT 51
36725: PPUSH
36726: CALL_OW 321
36730: PUSH
36731: LD_INT 2
36733: EQUAL
36734: AND
36735: IFFALSE 36752
// bpoints := bpoints * 1.2 ;
36737: LD_ADDR_VAR 0 10
36741: PUSH
36742: LD_VAR 0 10
36746: PUSH
36747: LD_REAL  1.20000000000000E+0000
36750: MUL
36751: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36752: LD_VAR 0 6
36756: PPUSH
36757: CALL_OW 257
36761: PUSH
36762: LD_INT 5
36764: PUSH
36765: LD_INT 7
36767: PUSH
36768: LD_INT 9
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: LIST
36775: IN
36776: PUSH
36777: LD_VAR 0 1
36781: PPUSH
36782: LD_INT 52
36784: PPUSH
36785: CALL_OW 321
36789: PUSH
36790: LD_INT 2
36792: EQUAL
36793: AND
36794: IFFALSE 36811
// bpoints := bpoints * 1.5 ;
36796: LD_ADDR_VAR 0 10
36800: PUSH
36801: LD_VAR 0 10
36805: PUSH
36806: LD_REAL  1.50000000000000E+0000
36809: MUL
36810: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36811: LD_VAR 0 1
36815: PPUSH
36816: LD_INT 66
36818: PPUSH
36819: CALL_OW 321
36823: PUSH
36824: LD_INT 2
36826: EQUAL
36827: IFFALSE 36844
// bpoints := bpoints * 1.1 ;
36829: LD_ADDR_VAR 0 10
36833: PUSH
36834: LD_VAR 0 10
36838: PUSH
36839: LD_REAL  1.10000000000000E+0000
36842: MUL
36843: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36844: LD_ADDR_VAR 0 10
36848: PUSH
36849: LD_VAR 0 10
36853: PUSH
36854: LD_VAR 0 6
36858: PPUSH
36859: LD_INT 1
36861: PPUSH
36862: CALL_OW 259
36866: PUSH
36867: LD_REAL  1.15000000000000E+0000
36870: MUL
36871: MUL
36872: ST_TO_ADDR
// end ; unit_vehicle :
36873: GO 37697
36875: LD_INT 2
36877: DOUBLE
36878: EQUAL
36879: IFTRUE 36883
36881: GO 37685
36883: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36884: LD_VAR 0 6
36888: PPUSH
36889: CALL_OW 264
36893: PUSH
36894: LD_INT 2
36896: PUSH
36897: LD_INT 42
36899: PUSH
36900: LD_INT 24
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: LIST
36907: IN
36908: IFFALSE 36929
// points := [ 25 , 5 , 3 ] ;
36910: LD_ADDR_VAR 0 9
36914: PUSH
36915: LD_INT 25
36917: PUSH
36918: LD_INT 5
36920: PUSH
36921: LD_INT 3
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: LIST
36928: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36929: LD_VAR 0 6
36933: PPUSH
36934: CALL_OW 264
36938: PUSH
36939: LD_INT 4
36941: PUSH
36942: LD_INT 43
36944: PUSH
36945: LD_INT 25
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: LIST
36952: IN
36953: IFFALSE 36974
// points := [ 40 , 15 , 5 ] ;
36955: LD_ADDR_VAR 0 9
36959: PUSH
36960: LD_INT 40
36962: PUSH
36963: LD_INT 15
36965: PUSH
36966: LD_INT 5
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: LIST
36973: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36974: LD_VAR 0 6
36978: PPUSH
36979: CALL_OW 264
36983: PUSH
36984: LD_INT 3
36986: PUSH
36987: LD_INT 23
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: IN
36994: IFFALSE 37015
// points := [ 7 , 25 , 8 ] ;
36996: LD_ADDR_VAR 0 9
37000: PUSH
37001: LD_INT 7
37003: PUSH
37004: LD_INT 25
37006: PUSH
37007: LD_INT 8
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: LIST
37014: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37015: LD_VAR 0 6
37019: PPUSH
37020: CALL_OW 264
37024: PUSH
37025: LD_INT 5
37027: PUSH
37028: LD_INT 27
37030: PUSH
37031: LD_INT 44
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: LIST
37038: IN
37039: IFFALSE 37060
// points := [ 14 , 50 , 16 ] ;
37041: LD_ADDR_VAR 0 9
37045: PUSH
37046: LD_INT 14
37048: PUSH
37049: LD_INT 50
37051: PUSH
37052: LD_INT 16
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: LIST
37059: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37060: LD_VAR 0 6
37064: PPUSH
37065: CALL_OW 264
37069: PUSH
37070: LD_INT 6
37072: PUSH
37073: LD_INT 46
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: IN
37080: IFFALSE 37101
// points := [ 32 , 120 , 70 ] ;
37082: LD_ADDR_VAR 0 9
37086: PUSH
37087: LD_INT 32
37089: PUSH
37090: LD_INT 120
37092: PUSH
37093: LD_INT 70
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: LIST
37100: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
37101: LD_VAR 0 6
37105: PPUSH
37106: CALL_OW 264
37110: PUSH
37111: LD_INT 7
37113: PUSH
37114: LD_INT 28
37116: PUSH
37117: LD_INT 45
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: LIST
37124: IN
37125: IFFALSE 37146
// points := [ 35 , 20 , 45 ] ;
37127: LD_ADDR_VAR 0 9
37131: PUSH
37132: LD_INT 35
37134: PUSH
37135: LD_INT 20
37137: PUSH
37138: LD_INT 45
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: LIST
37145: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37146: LD_VAR 0 6
37150: PPUSH
37151: CALL_OW 264
37155: PUSH
37156: LD_INT 47
37158: PUSH
37159: EMPTY
37160: LIST
37161: IN
37162: IFFALSE 37183
// points := [ 67 , 45 , 75 ] ;
37164: LD_ADDR_VAR 0 9
37168: PUSH
37169: LD_INT 67
37171: PUSH
37172: LD_INT 45
37174: PUSH
37175: LD_INT 75
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: LIST
37182: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37183: LD_VAR 0 6
37187: PPUSH
37188: CALL_OW 264
37192: PUSH
37193: LD_INT 26
37195: PUSH
37196: EMPTY
37197: LIST
37198: IN
37199: IFFALSE 37220
// points := [ 120 , 30 , 80 ] ;
37201: LD_ADDR_VAR 0 9
37205: PUSH
37206: LD_INT 120
37208: PUSH
37209: LD_INT 30
37211: PUSH
37212: LD_INT 80
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: LIST
37219: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37220: LD_VAR 0 6
37224: PPUSH
37225: CALL_OW 264
37229: PUSH
37230: LD_INT 22
37232: PUSH
37233: EMPTY
37234: LIST
37235: IN
37236: IFFALSE 37257
// points := [ 40 , 1 , 1 ] ;
37238: LD_ADDR_VAR 0 9
37242: PUSH
37243: LD_INT 40
37245: PUSH
37246: LD_INT 1
37248: PUSH
37249: LD_INT 1
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: LIST
37256: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37257: LD_VAR 0 6
37261: PPUSH
37262: CALL_OW 264
37266: PUSH
37267: LD_INT 29
37269: PUSH
37270: EMPTY
37271: LIST
37272: IN
37273: IFFALSE 37294
// points := [ 70 , 200 , 400 ] ;
37275: LD_ADDR_VAR 0 9
37279: PUSH
37280: LD_INT 70
37282: PUSH
37283: LD_INT 200
37285: PUSH
37286: LD_INT 400
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: LIST
37293: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37294: LD_VAR 0 6
37298: PPUSH
37299: CALL_OW 264
37303: PUSH
37304: LD_INT 14
37306: PUSH
37307: LD_INT 53
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: IN
37314: IFFALSE 37335
// points := [ 40 , 10 , 20 ] ;
37316: LD_ADDR_VAR 0 9
37320: PUSH
37321: LD_INT 40
37323: PUSH
37324: LD_INT 10
37326: PUSH
37327: LD_INT 20
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: LIST
37334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37335: LD_VAR 0 6
37339: PPUSH
37340: CALL_OW 264
37344: PUSH
37345: LD_INT 9
37347: PUSH
37348: EMPTY
37349: LIST
37350: IN
37351: IFFALSE 37372
// points := [ 5 , 70 , 20 ] ;
37353: LD_ADDR_VAR 0 9
37357: PUSH
37358: LD_INT 5
37360: PUSH
37361: LD_INT 70
37363: PUSH
37364: LD_INT 20
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: LIST
37371: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37372: LD_VAR 0 6
37376: PPUSH
37377: CALL_OW 264
37381: PUSH
37382: LD_INT 10
37384: PUSH
37385: EMPTY
37386: LIST
37387: IN
37388: IFFALSE 37409
// points := [ 35 , 110 , 70 ] ;
37390: LD_ADDR_VAR 0 9
37394: PUSH
37395: LD_INT 35
37397: PUSH
37398: LD_INT 110
37400: PUSH
37401: LD_INT 70
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: LIST
37408: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37409: LD_VAR 0 6
37413: PPUSH
37414: CALL_OW 265
37418: PUSH
37419: LD_INT 25
37421: EQUAL
37422: IFFALSE 37443
// points := [ 80 , 65 , 100 ] ;
37424: LD_ADDR_VAR 0 9
37428: PUSH
37429: LD_INT 80
37431: PUSH
37432: LD_INT 65
37434: PUSH
37435: LD_INT 100
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: LIST
37442: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37443: LD_VAR 0 6
37447: PPUSH
37448: CALL_OW 263
37452: PUSH
37453: LD_INT 1
37455: EQUAL
37456: IFFALSE 37491
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37458: LD_ADDR_VAR 0 10
37462: PUSH
37463: LD_VAR 0 10
37467: PUSH
37468: LD_VAR 0 6
37472: PPUSH
37473: CALL_OW 311
37477: PPUSH
37478: LD_INT 3
37480: PPUSH
37481: CALL_OW 259
37485: PUSH
37486: LD_INT 4
37488: MUL
37489: MUL
37490: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37491: LD_VAR 0 6
37495: PPUSH
37496: CALL_OW 263
37500: PUSH
37501: LD_INT 2
37503: EQUAL
37504: IFFALSE 37555
// begin j := IsControledBy ( i ) ;
37506: LD_ADDR_VAR 0 7
37510: PUSH
37511: LD_VAR 0 6
37515: PPUSH
37516: CALL_OW 312
37520: ST_TO_ADDR
// if j then
37521: LD_VAR 0 7
37525: IFFALSE 37555
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37527: LD_ADDR_VAR 0 10
37531: PUSH
37532: LD_VAR 0 10
37536: PUSH
37537: LD_VAR 0 7
37541: PPUSH
37542: LD_INT 3
37544: PPUSH
37545: CALL_OW 259
37549: PUSH
37550: LD_INT 3
37552: MUL
37553: MUL
37554: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37555: LD_VAR 0 6
37559: PPUSH
37560: CALL_OW 264
37564: PUSH
37565: LD_INT 5
37567: PUSH
37568: LD_INT 6
37570: PUSH
37571: LD_INT 46
37573: PUSH
37574: LD_INT 44
37576: PUSH
37577: LD_INT 47
37579: PUSH
37580: LD_INT 45
37582: PUSH
37583: LD_INT 28
37585: PUSH
37586: LD_INT 7
37588: PUSH
37589: LD_INT 27
37591: PUSH
37592: LD_INT 29
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: IN
37607: PUSH
37608: LD_VAR 0 1
37612: PPUSH
37613: LD_INT 52
37615: PPUSH
37616: CALL_OW 321
37620: PUSH
37621: LD_INT 2
37623: EQUAL
37624: AND
37625: IFFALSE 37642
// bpoints := bpoints * 1.2 ;
37627: LD_ADDR_VAR 0 10
37631: PUSH
37632: LD_VAR 0 10
37636: PUSH
37637: LD_REAL  1.20000000000000E+0000
37640: MUL
37641: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37642: LD_VAR 0 6
37646: PPUSH
37647: CALL_OW 264
37651: PUSH
37652: LD_INT 6
37654: PUSH
37655: LD_INT 46
37657: PUSH
37658: LD_INT 47
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: LIST
37665: IN
37666: IFFALSE 37683
// bpoints := bpoints * 1.2 ;
37668: LD_ADDR_VAR 0 10
37672: PUSH
37673: LD_VAR 0 10
37677: PUSH
37678: LD_REAL  1.20000000000000E+0000
37681: MUL
37682: ST_TO_ADDR
// end ; unit_building :
37683: GO 37697
37685: LD_INT 3
37687: DOUBLE
37688: EQUAL
37689: IFTRUE 37693
37691: GO 37696
37693: POP
// ; end ;
37694: GO 37697
37696: POP
// for j = 1 to 3 do
37697: LD_ADDR_VAR 0 7
37701: PUSH
37702: DOUBLE
37703: LD_INT 1
37705: DEC
37706: ST_TO_ADDR
37707: LD_INT 3
37709: PUSH
37710: FOR_TO
37711: IFFALSE 37764
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37713: LD_ADDR_VAR 0 5
37717: PUSH
37718: LD_VAR 0 5
37722: PPUSH
37723: LD_VAR 0 7
37727: PPUSH
37728: LD_VAR 0 5
37732: PUSH
37733: LD_VAR 0 7
37737: ARRAY
37738: PUSH
37739: LD_VAR 0 9
37743: PUSH
37744: LD_VAR 0 7
37748: ARRAY
37749: PUSH
37750: LD_VAR 0 10
37754: MUL
37755: PLUS
37756: PPUSH
37757: CALL_OW 1
37761: ST_TO_ADDR
37762: GO 37710
37764: POP
37765: POP
// end ;
37766: GO 36249
37768: POP
37769: POP
// result := Replace ( result , 4 , tmp ) ;
37770: LD_ADDR_VAR 0 5
37774: PUSH
37775: LD_VAR 0 5
37779: PPUSH
37780: LD_INT 4
37782: PPUSH
37783: LD_VAR 0 8
37787: PPUSH
37788: CALL_OW 1
37792: ST_TO_ADDR
// end ;
37793: LD_VAR 0 5
37797: RET
// export function DangerAtRange ( unit , range ) ; begin
37798: LD_INT 0
37800: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37801: LD_ADDR_VAR 0 3
37805: PUSH
37806: LD_VAR 0 1
37810: PPUSH
37811: CALL_OW 255
37815: PPUSH
37816: LD_VAR 0 1
37820: PPUSH
37821: CALL_OW 250
37825: PPUSH
37826: LD_VAR 0 1
37830: PPUSH
37831: CALL_OW 251
37835: PPUSH
37836: LD_VAR 0 2
37840: PPUSH
37841: CALL 36101 0 4
37845: ST_TO_ADDR
// end ;
37846: LD_VAR 0 3
37850: RET
// export function DangerInArea ( side , area ) ; begin
37851: LD_INT 0
37853: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37854: LD_ADDR_VAR 0 3
37858: PUSH
37859: LD_VAR 0 2
37863: PPUSH
37864: LD_INT 81
37866: PUSH
37867: LD_VAR 0 1
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PPUSH
37876: CALL_OW 70
37880: ST_TO_ADDR
// end ;
37881: LD_VAR 0 3
37885: RET
// export function IsExtension ( b ) ; begin
37886: LD_INT 0
37888: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37889: LD_ADDR_VAR 0 2
37893: PUSH
37894: LD_VAR 0 1
37898: PUSH
37899: LD_INT 23
37901: PUSH
37902: LD_INT 20
37904: PUSH
37905: LD_INT 22
37907: PUSH
37908: LD_INT 17
37910: PUSH
37911: LD_INT 24
37913: PUSH
37914: LD_INT 21
37916: PUSH
37917: LD_INT 19
37919: PUSH
37920: LD_INT 16
37922: PUSH
37923: LD_INT 25
37925: PUSH
37926: LD_INT 18
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: IN
37941: ST_TO_ADDR
// end ;
37942: LD_VAR 0 2
37946: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37947: LD_INT 0
37949: PPUSH
37950: PPUSH
37951: PPUSH
// result := [ ] ;
37952: LD_ADDR_VAR 0 4
37956: PUSH
37957: EMPTY
37958: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37959: LD_ADDR_VAR 0 5
37963: PUSH
37964: LD_VAR 0 2
37968: PPUSH
37969: LD_INT 21
37971: PUSH
37972: LD_INT 3
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PPUSH
37979: CALL_OW 70
37983: ST_TO_ADDR
// if not tmp then
37984: LD_VAR 0 5
37988: NOT
37989: IFFALSE 37993
// exit ;
37991: GO 38057
// if checkLink then
37993: LD_VAR 0 3
37997: IFFALSE 38047
// begin for i in tmp do
37999: LD_ADDR_VAR 0 6
38003: PUSH
38004: LD_VAR 0 5
38008: PUSH
38009: FOR_IN
38010: IFFALSE 38045
// if GetBase ( i ) <> base then
38012: LD_VAR 0 6
38016: PPUSH
38017: CALL_OW 274
38021: PUSH
38022: LD_VAR 0 1
38026: NONEQUAL
38027: IFFALSE 38043
// ComLinkToBase ( base , i ) ;
38029: LD_VAR 0 1
38033: PPUSH
38034: LD_VAR 0 6
38038: PPUSH
38039: CALL_OW 169
38043: GO 38009
38045: POP
38046: POP
// end ; result := tmp ;
38047: LD_ADDR_VAR 0 4
38051: PUSH
38052: LD_VAR 0 5
38056: ST_TO_ADDR
// end ;
38057: LD_VAR 0 4
38061: RET
// export function ComComplete ( units , b ) ; var i ; begin
38062: LD_INT 0
38064: PPUSH
38065: PPUSH
// if not units then
38066: LD_VAR 0 1
38070: NOT
38071: IFFALSE 38075
// exit ;
38073: GO 38165
// for i in units do
38075: LD_ADDR_VAR 0 4
38079: PUSH
38080: LD_VAR 0 1
38084: PUSH
38085: FOR_IN
38086: IFFALSE 38163
// if BuildingStatus ( b ) = bs_build then
38088: LD_VAR 0 2
38092: PPUSH
38093: CALL_OW 461
38097: PUSH
38098: LD_INT 1
38100: EQUAL
38101: IFFALSE 38161
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38103: LD_VAR 0 4
38107: PPUSH
38108: LD_STRING h
38110: PUSH
38111: LD_VAR 0 2
38115: PPUSH
38116: CALL_OW 250
38120: PUSH
38121: LD_VAR 0 2
38125: PPUSH
38126: CALL_OW 251
38130: PUSH
38131: LD_VAR 0 2
38135: PUSH
38136: LD_INT 0
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: LD_INT 0
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: PUSH
38154: EMPTY
38155: LIST
38156: PPUSH
38157: CALL_OW 446
38161: GO 38085
38163: POP
38164: POP
// end ;
38165: LD_VAR 0 3
38169: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38170: LD_INT 0
38172: PPUSH
38173: PPUSH
38174: PPUSH
38175: PPUSH
38176: PPUSH
38177: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
38178: LD_VAR 0 1
38182: NOT
38183: PUSH
38184: LD_VAR 0 1
38188: PPUSH
38189: CALL_OW 263
38193: PUSH
38194: LD_INT 2
38196: EQUAL
38197: NOT
38198: OR
38199: IFFALSE 38203
// exit ;
38201: GO 38519
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38203: LD_ADDR_VAR 0 6
38207: PUSH
38208: LD_INT 22
38210: PUSH
38211: LD_VAR 0 1
38215: PPUSH
38216: CALL_OW 255
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 2
38227: PUSH
38228: LD_INT 30
38230: PUSH
38231: LD_INT 36
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 34
38240: PUSH
38241: LD_INT 31
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: LIST
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PPUSH
38257: CALL_OW 69
38261: ST_TO_ADDR
// if not tmp then
38262: LD_VAR 0 6
38266: NOT
38267: IFFALSE 38271
// exit ;
38269: GO 38519
// result := [ ] ;
38271: LD_ADDR_VAR 0 2
38275: PUSH
38276: EMPTY
38277: ST_TO_ADDR
// for i in tmp do
38278: LD_ADDR_VAR 0 3
38282: PUSH
38283: LD_VAR 0 6
38287: PUSH
38288: FOR_IN
38289: IFFALSE 38360
// begin t := UnitsInside ( i ) ;
38291: LD_ADDR_VAR 0 4
38295: PUSH
38296: LD_VAR 0 3
38300: PPUSH
38301: CALL_OW 313
38305: ST_TO_ADDR
// if t then
38306: LD_VAR 0 4
38310: IFFALSE 38358
// for j in t do
38312: LD_ADDR_VAR 0 7
38316: PUSH
38317: LD_VAR 0 4
38321: PUSH
38322: FOR_IN
38323: IFFALSE 38356
// result := Insert ( result , result + 1 , j ) ;
38325: LD_ADDR_VAR 0 2
38329: PUSH
38330: LD_VAR 0 2
38334: PPUSH
38335: LD_VAR 0 2
38339: PUSH
38340: LD_INT 1
38342: PLUS
38343: PPUSH
38344: LD_VAR 0 7
38348: PPUSH
38349: CALL_OW 2
38353: ST_TO_ADDR
38354: GO 38322
38356: POP
38357: POP
// end ;
38358: GO 38288
38360: POP
38361: POP
// if not result then
38362: LD_VAR 0 2
38366: NOT
38367: IFFALSE 38371
// exit ;
38369: GO 38519
// mech := result [ 1 ] ;
38371: LD_ADDR_VAR 0 5
38375: PUSH
38376: LD_VAR 0 2
38380: PUSH
38381: LD_INT 1
38383: ARRAY
38384: ST_TO_ADDR
// if result > 1 then
38385: LD_VAR 0 2
38389: PUSH
38390: LD_INT 1
38392: GREATER
38393: IFFALSE 38505
// for i = 2 to result do
38395: LD_ADDR_VAR 0 3
38399: PUSH
38400: DOUBLE
38401: LD_INT 2
38403: DEC
38404: ST_TO_ADDR
38405: LD_VAR 0 2
38409: PUSH
38410: FOR_TO
38411: IFFALSE 38503
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38413: LD_ADDR_VAR 0 4
38417: PUSH
38418: LD_VAR 0 2
38422: PUSH
38423: LD_VAR 0 3
38427: ARRAY
38428: PPUSH
38429: LD_INT 3
38431: PPUSH
38432: CALL_OW 259
38436: PUSH
38437: LD_VAR 0 2
38441: PUSH
38442: LD_VAR 0 3
38446: ARRAY
38447: PPUSH
38448: CALL_OW 432
38452: MINUS
38453: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38454: LD_VAR 0 4
38458: PUSH
38459: LD_VAR 0 5
38463: PPUSH
38464: LD_INT 3
38466: PPUSH
38467: CALL_OW 259
38471: PUSH
38472: LD_VAR 0 5
38476: PPUSH
38477: CALL_OW 432
38481: MINUS
38482: GREATEREQUAL
38483: IFFALSE 38501
// mech := result [ i ] ;
38485: LD_ADDR_VAR 0 5
38489: PUSH
38490: LD_VAR 0 2
38494: PUSH
38495: LD_VAR 0 3
38499: ARRAY
38500: ST_TO_ADDR
// end ;
38501: GO 38410
38503: POP
38504: POP
// ComLinkTo ( vehicle , mech ) ;
38505: LD_VAR 0 1
38509: PPUSH
38510: LD_VAR 0 5
38514: PPUSH
38515: CALL_OW 135
// end ;
38519: LD_VAR 0 2
38523: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38524: LD_INT 0
38526: PPUSH
38527: PPUSH
38528: PPUSH
38529: PPUSH
38530: PPUSH
38531: PPUSH
38532: PPUSH
38533: PPUSH
38534: PPUSH
38535: PPUSH
38536: PPUSH
38537: PPUSH
38538: PPUSH
// result := [ ] ;
38539: LD_ADDR_VAR 0 7
38543: PUSH
38544: EMPTY
38545: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38546: LD_VAR 0 1
38550: PPUSH
38551: CALL_OW 266
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: LD_INT 1
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: IN
38566: NOT
38567: IFFALSE 38571
// exit ;
38569: GO 40205
// if name then
38571: LD_VAR 0 3
38575: IFFALSE 38591
// SetBName ( base_dep , name ) ;
38577: LD_VAR 0 1
38581: PPUSH
38582: LD_VAR 0 3
38586: PPUSH
38587: CALL_OW 500
// base := GetBase ( base_dep ) ;
38591: LD_ADDR_VAR 0 15
38595: PUSH
38596: LD_VAR 0 1
38600: PPUSH
38601: CALL_OW 274
38605: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38606: LD_ADDR_VAR 0 16
38610: PUSH
38611: LD_VAR 0 1
38615: PPUSH
38616: CALL_OW 255
38620: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38621: LD_ADDR_VAR 0 17
38625: PUSH
38626: LD_VAR 0 1
38630: PPUSH
38631: CALL_OW 248
38635: ST_TO_ADDR
// if sources then
38636: LD_VAR 0 5
38640: IFFALSE 38687
// for i = 1 to 3 do
38642: LD_ADDR_VAR 0 8
38646: PUSH
38647: DOUBLE
38648: LD_INT 1
38650: DEC
38651: ST_TO_ADDR
38652: LD_INT 3
38654: PUSH
38655: FOR_TO
38656: IFFALSE 38685
// AddResourceType ( base , i , sources [ i ] ) ;
38658: LD_VAR 0 15
38662: PPUSH
38663: LD_VAR 0 8
38667: PPUSH
38668: LD_VAR 0 5
38672: PUSH
38673: LD_VAR 0 8
38677: ARRAY
38678: PPUSH
38679: CALL_OW 276
38683: GO 38655
38685: POP
38686: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38687: LD_ADDR_VAR 0 18
38691: PUSH
38692: LD_VAR 0 15
38696: PPUSH
38697: LD_VAR 0 2
38701: PPUSH
38702: LD_INT 1
38704: PPUSH
38705: CALL 37947 0 3
38709: ST_TO_ADDR
// InitHc ;
38710: CALL_OW 19
// InitUc ;
38714: CALL_OW 18
// uc_side := side ;
38718: LD_ADDR_OWVAR 20
38722: PUSH
38723: LD_VAR 0 16
38727: ST_TO_ADDR
// uc_nation := nation ;
38728: LD_ADDR_OWVAR 21
38732: PUSH
38733: LD_VAR 0 17
38737: ST_TO_ADDR
// if buildings then
38738: LD_VAR 0 18
38742: IFFALSE 40064
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38744: LD_ADDR_VAR 0 19
38748: PUSH
38749: LD_VAR 0 18
38753: PPUSH
38754: LD_INT 2
38756: PUSH
38757: LD_INT 30
38759: PUSH
38760: LD_INT 29
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 30
38769: PUSH
38770: LD_INT 30
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: LIST
38781: PPUSH
38782: CALL_OW 72
38786: ST_TO_ADDR
// if tmp then
38787: LD_VAR 0 19
38791: IFFALSE 38839
// for i in tmp do
38793: LD_ADDR_VAR 0 8
38797: PUSH
38798: LD_VAR 0 19
38802: PUSH
38803: FOR_IN
38804: IFFALSE 38837
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38806: LD_VAR 0 8
38810: PPUSH
38811: CALL_OW 250
38815: PPUSH
38816: LD_VAR 0 8
38820: PPUSH
38821: CALL_OW 251
38825: PPUSH
38826: LD_VAR 0 16
38830: PPUSH
38831: CALL_OW 441
38835: GO 38803
38837: POP
38838: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38839: LD_VAR 0 18
38843: PPUSH
38844: LD_INT 2
38846: PUSH
38847: LD_INT 30
38849: PUSH
38850: LD_INT 32
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 30
38859: PUSH
38860: LD_INT 33
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: LIST
38871: PPUSH
38872: CALL_OW 72
38876: IFFALSE 38964
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38878: LD_ADDR_VAR 0 8
38882: PUSH
38883: LD_VAR 0 18
38887: PPUSH
38888: LD_INT 2
38890: PUSH
38891: LD_INT 30
38893: PUSH
38894: LD_INT 32
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 30
38903: PUSH
38904: LD_INT 33
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: LIST
38915: PPUSH
38916: CALL_OW 72
38920: PUSH
38921: FOR_IN
38922: IFFALSE 38962
// begin if not GetBWeapon ( i ) then
38924: LD_VAR 0 8
38928: PPUSH
38929: CALL_OW 269
38933: NOT
38934: IFFALSE 38960
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38936: LD_VAR 0 8
38940: PPUSH
38941: LD_VAR 0 8
38945: PPUSH
38946: LD_VAR 0 2
38950: PPUSH
38951: CALL 40210 0 2
38955: PPUSH
38956: CALL_OW 431
// end ;
38960: GO 38921
38962: POP
38963: POP
// end ; for i = 1 to personel do
38964: LD_ADDR_VAR 0 8
38968: PUSH
38969: DOUBLE
38970: LD_INT 1
38972: DEC
38973: ST_TO_ADDR
38974: LD_VAR 0 6
38978: PUSH
38979: FOR_TO
38980: IFFALSE 40044
// begin if i > 4 then
38982: LD_VAR 0 8
38986: PUSH
38987: LD_INT 4
38989: GREATER
38990: IFFALSE 38994
// break ;
38992: GO 40044
// case i of 1 :
38994: LD_VAR 0 8
38998: PUSH
38999: LD_INT 1
39001: DOUBLE
39002: EQUAL
39003: IFTRUE 39007
39005: GO 39087
39007: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39008: LD_ADDR_VAR 0 12
39012: PUSH
39013: LD_VAR 0 18
39017: PPUSH
39018: LD_INT 22
39020: PUSH
39021: LD_VAR 0 16
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 58
39032: PUSH
39033: EMPTY
39034: LIST
39035: PUSH
39036: LD_INT 2
39038: PUSH
39039: LD_INT 30
39041: PUSH
39042: LD_INT 32
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 30
39051: PUSH
39052: LD_INT 4
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 30
39061: PUSH
39062: LD_INT 5
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: LIST
39079: PPUSH
39080: CALL_OW 72
39084: ST_TO_ADDR
39085: GO 39309
39087: LD_INT 2
39089: DOUBLE
39090: EQUAL
39091: IFTRUE 39095
39093: GO 39157
39095: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39096: LD_ADDR_VAR 0 12
39100: PUSH
39101: LD_VAR 0 18
39105: PPUSH
39106: LD_INT 22
39108: PUSH
39109: LD_VAR 0 16
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 2
39120: PUSH
39121: LD_INT 30
39123: PUSH
39124: LD_INT 0
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 30
39133: PUSH
39134: LD_INT 1
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: LIST
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PPUSH
39150: CALL_OW 72
39154: ST_TO_ADDR
39155: GO 39309
39157: LD_INT 3
39159: DOUBLE
39160: EQUAL
39161: IFTRUE 39165
39163: GO 39227
39165: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39166: LD_ADDR_VAR 0 12
39170: PUSH
39171: LD_VAR 0 18
39175: PPUSH
39176: LD_INT 22
39178: PUSH
39179: LD_VAR 0 16
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 2
39190: PUSH
39191: LD_INT 30
39193: PUSH
39194: LD_INT 2
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 30
39203: PUSH
39204: LD_INT 3
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: LIST
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PPUSH
39220: CALL_OW 72
39224: ST_TO_ADDR
39225: GO 39309
39227: LD_INT 4
39229: DOUBLE
39230: EQUAL
39231: IFTRUE 39235
39233: GO 39308
39235: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39236: LD_ADDR_VAR 0 12
39240: PUSH
39241: LD_VAR 0 18
39245: PPUSH
39246: LD_INT 22
39248: PUSH
39249: LD_VAR 0 16
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 2
39260: PUSH
39261: LD_INT 30
39263: PUSH
39264: LD_INT 6
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 30
39273: PUSH
39274: LD_INT 7
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 30
39283: PUSH
39284: LD_INT 8
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PPUSH
39301: CALL_OW 72
39305: ST_TO_ADDR
39306: GO 39309
39308: POP
// if i = 1 then
39309: LD_VAR 0 8
39313: PUSH
39314: LD_INT 1
39316: EQUAL
39317: IFFALSE 39428
// begin tmp := [ ] ;
39319: LD_ADDR_VAR 0 19
39323: PUSH
39324: EMPTY
39325: ST_TO_ADDR
// for j in f do
39326: LD_ADDR_VAR 0 9
39330: PUSH
39331: LD_VAR 0 12
39335: PUSH
39336: FOR_IN
39337: IFFALSE 39410
// if GetBType ( j ) = b_bunker then
39339: LD_VAR 0 9
39343: PPUSH
39344: CALL_OW 266
39348: PUSH
39349: LD_INT 32
39351: EQUAL
39352: IFFALSE 39379
// tmp := Insert ( tmp , 1 , j ) else
39354: LD_ADDR_VAR 0 19
39358: PUSH
39359: LD_VAR 0 19
39363: PPUSH
39364: LD_INT 1
39366: PPUSH
39367: LD_VAR 0 9
39371: PPUSH
39372: CALL_OW 2
39376: ST_TO_ADDR
39377: GO 39408
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39379: LD_ADDR_VAR 0 19
39383: PUSH
39384: LD_VAR 0 19
39388: PPUSH
39389: LD_VAR 0 19
39393: PUSH
39394: LD_INT 1
39396: PLUS
39397: PPUSH
39398: LD_VAR 0 9
39402: PPUSH
39403: CALL_OW 2
39407: ST_TO_ADDR
39408: GO 39336
39410: POP
39411: POP
// if tmp then
39412: LD_VAR 0 19
39416: IFFALSE 39428
// f := tmp ;
39418: LD_ADDR_VAR 0 12
39422: PUSH
39423: LD_VAR 0 19
39427: ST_TO_ADDR
// end ; x := personel [ i ] ;
39428: LD_ADDR_VAR 0 13
39432: PUSH
39433: LD_VAR 0 6
39437: PUSH
39438: LD_VAR 0 8
39442: ARRAY
39443: ST_TO_ADDR
// if x = - 1 then
39444: LD_VAR 0 13
39448: PUSH
39449: LD_INT 1
39451: NEG
39452: EQUAL
39453: IFFALSE 39662
// begin for j in f do
39455: LD_ADDR_VAR 0 9
39459: PUSH
39460: LD_VAR 0 12
39464: PUSH
39465: FOR_IN
39466: IFFALSE 39658
// repeat InitHc ;
39468: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39472: LD_VAR 0 9
39476: PPUSH
39477: CALL_OW 266
39481: PUSH
39482: LD_INT 5
39484: EQUAL
39485: IFFALSE 39555
// begin if UnitsInside ( j ) < 3 then
39487: LD_VAR 0 9
39491: PPUSH
39492: CALL_OW 313
39496: PUSH
39497: LD_INT 3
39499: LESS
39500: IFFALSE 39536
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39502: LD_INT 0
39504: PPUSH
39505: LD_INT 5
39507: PUSH
39508: LD_INT 8
39510: PUSH
39511: LD_INT 9
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: LIST
39518: PUSH
39519: LD_VAR 0 17
39523: ARRAY
39524: PPUSH
39525: LD_VAR 0 4
39529: PPUSH
39530: CALL_OW 380
39534: GO 39553
// PrepareHuman ( false , i , skill ) ;
39536: LD_INT 0
39538: PPUSH
39539: LD_VAR 0 8
39543: PPUSH
39544: LD_VAR 0 4
39548: PPUSH
39549: CALL_OW 380
// end else
39553: GO 39572
// PrepareHuman ( false , i , skill ) ;
39555: LD_INT 0
39557: PPUSH
39558: LD_VAR 0 8
39562: PPUSH
39563: LD_VAR 0 4
39567: PPUSH
39568: CALL_OW 380
// un := CreateHuman ;
39572: LD_ADDR_VAR 0 14
39576: PUSH
39577: CALL_OW 44
39581: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39582: LD_ADDR_VAR 0 7
39586: PUSH
39587: LD_VAR 0 7
39591: PPUSH
39592: LD_INT 1
39594: PPUSH
39595: LD_VAR 0 14
39599: PPUSH
39600: CALL_OW 2
39604: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39605: LD_VAR 0 14
39609: PPUSH
39610: LD_VAR 0 9
39614: PPUSH
39615: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39619: LD_VAR 0 9
39623: PPUSH
39624: CALL_OW 313
39628: PUSH
39629: LD_INT 6
39631: EQUAL
39632: PUSH
39633: LD_VAR 0 9
39637: PPUSH
39638: CALL_OW 266
39642: PUSH
39643: LD_INT 32
39645: PUSH
39646: LD_INT 31
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: IN
39653: OR
39654: IFFALSE 39468
39656: GO 39465
39658: POP
39659: POP
// end else
39660: GO 40042
// for j = 1 to x do
39662: LD_ADDR_VAR 0 9
39666: PUSH
39667: DOUBLE
39668: LD_INT 1
39670: DEC
39671: ST_TO_ADDR
39672: LD_VAR 0 13
39676: PUSH
39677: FOR_TO
39678: IFFALSE 40040
// begin InitHc ;
39680: CALL_OW 19
// if not f then
39684: LD_VAR 0 12
39688: NOT
39689: IFFALSE 39778
// begin PrepareHuman ( false , i , skill ) ;
39691: LD_INT 0
39693: PPUSH
39694: LD_VAR 0 8
39698: PPUSH
39699: LD_VAR 0 4
39703: PPUSH
39704: CALL_OW 380
// un := CreateHuman ;
39708: LD_ADDR_VAR 0 14
39712: PUSH
39713: CALL_OW 44
39717: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39718: LD_ADDR_VAR 0 7
39722: PUSH
39723: LD_VAR 0 7
39727: PPUSH
39728: LD_INT 1
39730: PPUSH
39731: LD_VAR 0 14
39735: PPUSH
39736: CALL_OW 2
39740: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39741: LD_VAR 0 14
39745: PPUSH
39746: LD_VAR 0 1
39750: PPUSH
39751: CALL_OW 250
39755: PPUSH
39756: LD_VAR 0 1
39760: PPUSH
39761: CALL_OW 251
39765: PPUSH
39766: LD_INT 10
39768: PPUSH
39769: LD_INT 0
39771: PPUSH
39772: CALL_OW 50
// continue ;
39776: GO 39677
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39778: LD_VAR 0 12
39782: PUSH
39783: LD_INT 1
39785: ARRAY
39786: PPUSH
39787: CALL_OW 313
39791: PUSH
39792: LD_VAR 0 12
39796: PUSH
39797: LD_INT 1
39799: ARRAY
39800: PPUSH
39801: CALL_OW 266
39805: PUSH
39806: LD_INT 32
39808: PUSH
39809: LD_INT 31
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: IN
39816: AND
39817: PUSH
39818: LD_VAR 0 12
39822: PUSH
39823: LD_INT 1
39825: ARRAY
39826: PPUSH
39827: CALL_OW 313
39831: PUSH
39832: LD_INT 6
39834: EQUAL
39835: OR
39836: IFFALSE 39856
// f := Delete ( f , 1 ) ;
39838: LD_ADDR_VAR 0 12
39842: PUSH
39843: LD_VAR 0 12
39847: PPUSH
39848: LD_INT 1
39850: PPUSH
39851: CALL_OW 3
39855: ST_TO_ADDR
// if not f then
39856: LD_VAR 0 12
39860: NOT
39861: IFFALSE 39879
// begin x := x + 2 ;
39863: LD_ADDR_VAR 0 13
39867: PUSH
39868: LD_VAR 0 13
39872: PUSH
39873: LD_INT 2
39875: PLUS
39876: ST_TO_ADDR
// continue ;
39877: GO 39677
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39879: LD_VAR 0 12
39883: PUSH
39884: LD_INT 1
39886: ARRAY
39887: PPUSH
39888: CALL_OW 266
39892: PUSH
39893: LD_INT 5
39895: EQUAL
39896: IFFALSE 39970
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39898: LD_VAR 0 12
39902: PUSH
39903: LD_INT 1
39905: ARRAY
39906: PPUSH
39907: CALL_OW 313
39911: PUSH
39912: LD_INT 3
39914: LESS
39915: IFFALSE 39951
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39917: LD_INT 0
39919: PPUSH
39920: LD_INT 5
39922: PUSH
39923: LD_INT 8
39925: PUSH
39926: LD_INT 9
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: LIST
39933: PUSH
39934: LD_VAR 0 17
39938: ARRAY
39939: PPUSH
39940: LD_VAR 0 4
39944: PPUSH
39945: CALL_OW 380
39949: GO 39968
// PrepareHuman ( false , i , skill ) ;
39951: LD_INT 0
39953: PPUSH
39954: LD_VAR 0 8
39958: PPUSH
39959: LD_VAR 0 4
39963: PPUSH
39964: CALL_OW 380
// end else
39968: GO 39987
// PrepareHuman ( false , i , skill ) ;
39970: LD_INT 0
39972: PPUSH
39973: LD_VAR 0 8
39977: PPUSH
39978: LD_VAR 0 4
39982: PPUSH
39983: CALL_OW 380
// un := CreateHuman ;
39987: LD_ADDR_VAR 0 14
39991: PUSH
39992: CALL_OW 44
39996: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39997: LD_ADDR_VAR 0 7
40001: PUSH
40002: LD_VAR 0 7
40006: PPUSH
40007: LD_INT 1
40009: PPUSH
40010: LD_VAR 0 14
40014: PPUSH
40015: CALL_OW 2
40019: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40020: LD_VAR 0 14
40024: PPUSH
40025: LD_VAR 0 12
40029: PUSH
40030: LD_INT 1
40032: ARRAY
40033: PPUSH
40034: CALL_OW 52
// end ;
40038: GO 39677
40040: POP
40041: POP
// end ;
40042: GO 38979
40044: POP
40045: POP
// result := result ^ buildings ;
40046: LD_ADDR_VAR 0 7
40050: PUSH
40051: LD_VAR 0 7
40055: PUSH
40056: LD_VAR 0 18
40060: ADD
40061: ST_TO_ADDR
// end else
40062: GO 40205
// begin for i = 1 to personel do
40064: LD_ADDR_VAR 0 8
40068: PUSH
40069: DOUBLE
40070: LD_INT 1
40072: DEC
40073: ST_TO_ADDR
40074: LD_VAR 0 6
40078: PUSH
40079: FOR_TO
40080: IFFALSE 40203
// begin if i > 4 then
40082: LD_VAR 0 8
40086: PUSH
40087: LD_INT 4
40089: GREATER
40090: IFFALSE 40094
// break ;
40092: GO 40203
// x := personel [ i ] ;
40094: LD_ADDR_VAR 0 13
40098: PUSH
40099: LD_VAR 0 6
40103: PUSH
40104: LD_VAR 0 8
40108: ARRAY
40109: ST_TO_ADDR
// if x = - 1 then
40110: LD_VAR 0 13
40114: PUSH
40115: LD_INT 1
40117: NEG
40118: EQUAL
40119: IFFALSE 40123
// continue ;
40121: GO 40079
// PrepareHuman ( false , i , skill ) ;
40123: LD_INT 0
40125: PPUSH
40126: LD_VAR 0 8
40130: PPUSH
40131: LD_VAR 0 4
40135: PPUSH
40136: CALL_OW 380
// un := CreateHuman ;
40140: LD_ADDR_VAR 0 14
40144: PUSH
40145: CALL_OW 44
40149: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40150: LD_VAR 0 14
40154: PPUSH
40155: LD_VAR 0 1
40159: PPUSH
40160: CALL_OW 250
40164: PPUSH
40165: LD_VAR 0 1
40169: PPUSH
40170: CALL_OW 251
40174: PPUSH
40175: LD_INT 10
40177: PPUSH
40178: LD_INT 0
40180: PPUSH
40181: CALL_OW 50
// result := result ^ un ;
40185: LD_ADDR_VAR 0 7
40189: PUSH
40190: LD_VAR 0 7
40194: PUSH
40195: LD_VAR 0 14
40199: ADD
40200: ST_TO_ADDR
// end ;
40201: GO 40079
40203: POP
40204: POP
// end ; end ;
40205: LD_VAR 0 7
40209: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40210: LD_INT 0
40212: PPUSH
40213: PPUSH
40214: PPUSH
40215: PPUSH
40216: PPUSH
40217: PPUSH
40218: PPUSH
40219: PPUSH
40220: PPUSH
40221: PPUSH
40222: PPUSH
40223: PPUSH
40224: PPUSH
40225: PPUSH
40226: PPUSH
40227: PPUSH
// result := false ;
40228: LD_ADDR_VAR 0 3
40232: PUSH
40233: LD_INT 0
40235: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40236: LD_VAR 0 1
40240: NOT
40241: PUSH
40242: LD_VAR 0 1
40246: PPUSH
40247: CALL_OW 266
40251: PUSH
40252: LD_INT 32
40254: PUSH
40255: LD_INT 33
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: IN
40262: NOT
40263: OR
40264: IFFALSE 40268
// exit ;
40266: GO 41377
// nat := GetNation ( tower ) ;
40268: LD_ADDR_VAR 0 12
40272: PUSH
40273: LD_VAR 0 1
40277: PPUSH
40278: CALL_OW 248
40282: ST_TO_ADDR
// side := GetSide ( tower ) ;
40283: LD_ADDR_VAR 0 16
40287: PUSH
40288: LD_VAR 0 1
40292: PPUSH
40293: CALL_OW 255
40297: ST_TO_ADDR
// x := GetX ( tower ) ;
40298: LD_ADDR_VAR 0 10
40302: PUSH
40303: LD_VAR 0 1
40307: PPUSH
40308: CALL_OW 250
40312: ST_TO_ADDR
// y := GetY ( tower ) ;
40313: LD_ADDR_VAR 0 11
40317: PUSH
40318: LD_VAR 0 1
40322: PPUSH
40323: CALL_OW 251
40327: ST_TO_ADDR
// if not x or not y then
40328: LD_VAR 0 10
40332: NOT
40333: PUSH
40334: LD_VAR 0 11
40338: NOT
40339: OR
40340: IFFALSE 40344
// exit ;
40342: GO 41377
// weapon := 0 ;
40344: LD_ADDR_VAR 0 18
40348: PUSH
40349: LD_INT 0
40351: ST_TO_ADDR
// fac_list := [ ] ;
40352: LD_ADDR_VAR 0 17
40356: PUSH
40357: EMPTY
40358: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40359: LD_ADDR_VAR 0 6
40363: PUSH
40364: LD_VAR 0 1
40368: PPUSH
40369: CALL_OW 274
40373: PPUSH
40374: LD_VAR 0 2
40378: PPUSH
40379: LD_INT 0
40381: PPUSH
40382: CALL 37947 0 3
40386: PPUSH
40387: LD_INT 30
40389: PUSH
40390: LD_INT 3
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PPUSH
40397: CALL_OW 72
40401: ST_TO_ADDR
// if not factories then
40402: LD_VAR 0 6
40406: NOT
40407: IFFALSE 40411
// exit ;
40409: GO 41377
// for i in factories do
40411: LD_ADDR_VAR 0 8
40415: PUSH
40416: LD_VAR 0 6
40420: PUSH
40421: FOR_IN
40422: IFFALSE 40447
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40424: LD_ADDR_VAR 0 17
40428: PUSH
40429: LD_VAR 0 17
40433: PUSH
40434: LD_VAR 0 8
40438: PPUSH
40439: CALL_OW 478
40443: UNION
40444: ST_TO_ADDR
40445: GO 40421
40447: POP
40448: POP
// if not fac_list then
40449: LD_VAR 0 17
40453: NOT
40454: IFFALSE 40458
// exit ;
40456: GO 41377
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40458: LD_ADDR_VAR 0 5
40462: PUSH
40463: LD_INT 4
40465: PUSH
40466: LD_INT 5
40468: PUSH
40469: LD_INT 9
40471: PUSH
40472: LD_INT 10
40474: PUSH
40475: LD_INT 6
40477: PUSH
40478: LD_INT 7
40480: PUSH
40481: LD_INT 11
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 27
40495: PUSH
40496: LD_INT 28
40498: PUSH
40499: LD_INT 26
40501: PUSH
40502: LD_INT 30
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 43
40513: PUSH
40514: LD_INT 44
40516: PUSH
40517: LD_INT 46
40519: PUSH
40520: LD_INT 45
40522: PUSH
40523: LD_INT 47
40525: PUSH
40526: LD_INT 49
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: LIST
40541: PUSH
40542: LD_VAR 0 12
40546: ARRAY
40547: ST_TO_ADDR
// list := list isect fac_list ;
40548: LD_ADDR_VAR 0 5
40552: PUSH
40553: LD_VAR 0 5
40557: PUSH
40558: LD_VAR 0 17
40562: ISECT
40563: ST_TO_ADDR
// if not list then
40564: LD_VAR 0 5
40568: NOT
40569: IFFALSE 40573
// exit ;
40571: GO 41377
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40573: LD_VAR 0 12
40577: PUSH
40578: LD_INT 3
40580: EQUAL
40581: PUSH
40582: LD_INT 49
40584: PUSH
40585: LD_VAR 0 5
40589: IN
40590: AND
40591: PUSH
40592: LD_INT 31
40594: PPUSH
40595: LD_VAR 0 16
40599: PPUSH
40600: CALL_OW 321
40604: PUSH
40605: LD_INT 2
40607: EQUAL
40608: AND
40609: IFFALSE 40669
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40611: LD_INT 22
40613: PUSH
40614: LD_VAR 0 16
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 35
40625: PUSH
40626: LD_INT 49
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 91
40635: PUSH
40636: LD_VAR 0 1
40640: PUSH
40641: LD_INT 10
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: LIST
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: LIST
40653: PPUSH
40654: CALL_OW 69
40658: NOT
40659: IFFALSE 40669
// weapon := ru_time_lapser ;
40661: LD_ADDR_VAR 0 18
40665: PUSH
40666: LD_INT 49
40668: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40669: LD_VAR 0 12
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: LD_INT 2
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: IN
40684: PUSH
40685: LD_INT 11
40687: PUSH
40688: LD_VAR 0 5
40692: IN
40693: PUSH
40694: LD_INT 30
40696: PUSH
40697: LD_VAR 0 5
40701: IN
40702: OR
40703: AND
40704: PUSH
40705: LD_INT 6
40707: PPUSH
40708: LD_VAR 0 16
40712: PPUSH
40713: CALL_OW 321
40717: PUSH
40718: LD_INT 2
40720: EQUAL
40721: AND
40722: IFFALSE 40887
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40724: LD_INT 22
40726: PUSH
40727: LD_VAR 0 16
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 2
40738: PUSH
40739: LD_INT 35
40741: PUSH
40742: LD_INT 11
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 35
40751: PUSH
40752: LD_INT 30
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 91
40766: PUSH
40767: LD_VAR 0 1
40771: PUSH
40772: LD_INT 18
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: LIST
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: LIST
40784: PPUSH
40785: CALL_OW 69
40789: NOT
40790: PUSH
40791: LD_INT 22
40793: PUSH
40794: LD_VAR 0 16
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 2
40805: PUSH
40806: LD_INT 30
40808: PUSH
40809: LD_INT 32
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 30
40818: PUSH
40819: LD_INT 33
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 91
40833: PUSH
40834: LD_VAR 0 1
40838: PUSH
40839: LD_INT 12
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: LIST
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: LIST
40851: PUSH
40852: EMPTY
40853: LIST
40854: PPUSH
40855: CALL_OW 69
40859: PUSH
40860: LD_INT 2
40862: GREATER
40863: AND
40864: IFFALSE 40887
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40866: LD_ADDR_VAR 0 18
40870: PUSH
40871: LD_INT 11
40873: PUSH
40874: LD_INT 30
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_VAR 0 12
40885: ARRAY
40886: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40887: LD_VAR 0 18
40891: NOT
40892: PUSH
40893: LD_INT 40
40895: PPUSH
40896: LD_VAR 0 16
40900: PPUSH
40901: CALL_OW 321
40905: PUSH
40906: LD_INT 2
40908: EQUAL
40909: AND
40910: PUSH
40911: LD_INT 7
40913: PUSH
40914: LD_VAR 0 5
40918: IN
40919: PUSH
40920: LD_INT 28
40922: PUSH
40923: LD_VAR 0 5
40927: IN
40928: OR
40929: PUSH
40930: LD_INT 45
40932: PUSH
40933: LD_VAR 0 5
40937: IN
40938: OR
40939: AND
40940: IFFALSE 41194
// begin hex := GetHexInfo ( x , y ) ;
40942: LD_ADDR_VAR 0 4
40946: PUSH
40947: LD_VAR 0 10
40951: PPUSH
40952: LD_VAR 0 11
40956: PPUSH
40957: CALL_OW 546
40961: ST_TO_ADDR
// if hex [ 1 ] then
40962: LD_VAR 0 4
40966: PUSH
40967: LD_INT 1
40969: ARRAY
40970: IFFALSE 40974
// exit ;
40972: GO 41377
// height := hex [ 2 ] ;
40974: LD_ADDR_VAR 0 15
40978: PUSH
40979: LD_VAR 0 4
40983: PUSH
40984: LD_INT 2
40986: ARRAY
40987: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40988: LD_ADDR_VAR 0 14
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 2
40998: PUSH
40999: LD_INT 3
41001: PUSH
41002: LD_INT 5
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: ST_TO_ADDR
// for i in tmp do
41011: LD_ADDR_VAR 0 8
41015: PUSH
41016: LD_VAR 0 14
41020: PUSH
41021: FOR_IN
41022: IFFALSE 41192
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41024: LD_ADDR_VAR 0 9
41028: PUSH
41029: LD_VAR 0 10
41033: PPUSH
41034: LD_VAR 0 8
41038: PPUSH
41039: LD_INT 5
41041: PPUSH
41042: CALL_OW 272
41046: PUSH
41047: LD_VAR 0 11
41051: PPUSH
41052: LD_VAR 0 8
41056: PPUSH
41057: LD_INT 5
41059: PPUSH
41060: CALL_OW 273
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41069: LD_VAR 0 9
41073: PUSH
41074: LD_INT 1
41076: ARRAY
41077: PPUSH
41078: LD_VAR 0 9
41082: PUSH
41083: LD_INT 2
41085: ARRAY
41086: PPUSH
41087: CALL_OW 488
41091: IFFALSE 41190
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41093: LD_ADDR_VAR 0 4
41097: PUSH
41098: LD_VAR 0 9
41102: PUSH
41103: LD_INT 1
41105: ARRAY
41106: PPUSH
41107: LD_VAR 0 9
41111: PUSH
41112: LD_INT 2
41114: ARRAY
41115: PPUSH
41116: CALL_OW 546
41120: ST_TO_ADDR
// if hex [ 1 ] then
41121: LD_VAR 0 4
41125: PUSH
41126: LD_INT 1
41128: ARRAY
41129: IFFALSE 41133
// continue ;
41131: GO 41021
// h := hex [ 2 ] ;
41133: LD_ADDR_VAR 0 13
41137: PUSH
41138: LD_VAR 0 4
41142: PUSH
41143: LD_INT 2
41145: ARRAY
41146: ST_TO_ADDR
// if h + 7 < height then
41147: LD_VAR 0 13
41151: PUSH
41152: LD_INT 7
41154: PLUS
41155: PUSH
41156: LD_VAR 0 15
41160: LESS
41161: IFFALSE 41190
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41163: LD_ADDR_VAR 0 18
41167: PUSH
41168: LD_INT 7
41170: PUSH
41171: LD_INT 28
41173: PUSH
41174: LD_INT 45
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: LIST
41181: PUSH
41182: LD_VAR 0 12
41186: ARRAY
41187: ST_TO_ADDR
// break ;
41188: GO 41192
// end ; end ; end ;
41190: GO 41021
41192: POP
41193: POP
// end ; if not weapon then
41194: LD_VAR 0 18
41198: NOT
41199: IFFALSE 41259
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41201: LD_ADDR_VAR 0 5
41205: PUSH
41206: LD_VAR 0 5
41210: PUSH
41211: LD_INT 11
41213: PUSH
41214: LD_INT 30
41216: PUSH
41217: LD_INT 49
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: LIST
41224: DIFF
41225: ST_TO_ADDR
// if not list then
41226: LD_VAR 0 5
41230: NOT
41231: IFFALSE 41235
// exit ;
41233: GO 41377
// weapon := list [ rand ( 1 , list ) ] ;
41235: LD_ADDR_VAR 0 18
41239: PUSH
41240: LD_VAR 0 5
41244: PUSH
41245: LD_INT 1
41247: PPUSH
41248: LD_VAR 0 5
41252: PPUSH
41253: CALL_OW 12
41257: ARRAY
41258: ST_TO_ADDR
// end ; if weapon then
41259: LD_VAR 0 18
41263: IFFALSE 41377
// begin tmp := CostOfWeapon ( weapon ) ;
41265: LD_ADDR_VAR 0 14
41269: PUSH
41270: LD_VAR 0 18
41274: PPUSH
41275: CALL_OW 451
41279: ST_TO_ADDR
// j := GetBase ( tower ) ;
41280: LD_ADDR_VAR 0 9
41284: PUSH
41285: LD_VAR 0 1
41289: PPUSH
41290: CALL_OW 274
41294: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41295: LD_VAR 0 9
41299: PPUSH
41300: LD_INT 1
41302: PPUSH
41303: CALL_OW 275
41307: PUSH
41308: LD_VAR 0 14
41312: PUSH
41313: LD_INT 1
41315: ARRAY
41316: GREATEREQUAL
41317: PUSH
41318: LD_VAR 0 9
41322: PPUSH
41323: LD_INT 2
41325: PPUSH
41326: CALL_OW 275
41330: PUSH
41331: LD_VAR 0 14
41335: PUSH
41336: LD_INT 2
41338: ARRAY
41339: GREATEREQUAL
41340: AND
41341: PUSH
41342: LD_VAR 0 9
41346: PPUSH
41347: LD_INT 3
41349: PPUSH
41350: CALL_OW 275
41354: PUSH
41355: LD_VAR 0 14
41359: PUSH
41360: LD_INT 3
41362: ARRAY
41363: GREATEREQUAL
41364: AND
41365: IFFALSE 41377
// result := weapon ;
41367: LD_ADDR_VAR 0 3
41371: PUSH
41372: LD_VAR 0 18
41376: ST_TO_ADDR
// end ; end ;
41377: LD_VAR 0 3
41381: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41382: LD_INT 0
41384: PPUSH
41385: PPUSH
// result := true ;
41386: LD_ADDR_VAR 0 3
41390: PUSH
41391: LD_INT 1
41393: ST_TO_ADDR
// if array1 = array2 then
41394: LD_VAR 0 1
41398: PUSH
41399: LD_VAR 0 2
41403: EQUAL
41404: IFFALSE 41464
// begin for i = 1 to array1 do
41406: LD_ADDR_VAR 0 4
41410: PUSH
41411: DOUBLE
41412: LD_INT 1
41414: DEC
41415: ST_TO_ADDR
41416: LD_VAR 0 1
41420: PUSH
41421: FOR_TO
41422: IFFALSE 41460
// if array1 [ i ] <> array2 [ i ] then
41424: LD_VAR 0 1
41428: PUSH
41429: LD_VAR 0 4
41433: ARRAY
41434: PUSH
41435: LD_VAR 0 2
41439: PUSH
41440: LD_VAR 0 4
41444: ARRAY
41445: NONEQUAL
41446: IFFALSE 41458
// begin result := false ;
41448: LD_ADDR_VAR 0 3
41452: PUSH
41453: LD_INT 0
41455: ST_TO_ADDR
// break ;
41456: GO 41460
// end ;
41458: GO 41421
41460: POP
41461: POP
// end else
41462: GO 41472
// result := false ;
41464: LD_ADDR_VAR 0 3
41468: PUSH
41469: LD_INT 0
41471: ST_TO_ADDR
// end ;
41472: LD_VAR 0 3
41476: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41477: LD_INT 0
41479: PPUSH
41480: PPUSH
// if not array1 or not array2 then
41481: LD_VAR 0 1
41485: NOT
41486: PUSH
41487: LD_VAR 0 2
41491: NOT
41492: OR
41493: IFFALSE 41497
// exit ;
41495: GO 41561
// result := true ;
41497: LD_ADDR_VAR 0 3
41501: PUSH
41502: LD_INT 1
41504: ST_TO_ADDR
// for i = 1 to array1 do
41505: LD_ADDR_VAR 0 4
41509: PUSH
41510: DOUBLE
41511: LD_INT 1
41513: DEC
41514: ST_TO_ADDR
41515: LD_VAR 0 1
41519: PUSH
41520: FOR_TO
41521: IFFALSE 41559
// if array1 [ i ] <> array2 [ i ] then
41523: LD_VAR 0 1
41527: PUSH
41528: LD_VAR 0 4
41532: ARRAY
41533: PUSH
41534: LD_VAR 0 2
41538: PUSH
41539: LD_VAR 0 4
41543: ARRAY
41544: NONEQUAL
41545: IFFALSE 41557
// begin result := false ;
41547: LD_ADDR_VAR 0 3
41551: PUSH
41552: LD_INT 0
41554: ST_TO_ADDR
// break ;
41555: GO 41559
// end ;
41557: GO 41520
41559: POP
41560: POP
// end ;
41561: LD_VAR 0 3
41565: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41566: LD_INT 0
41568: PPUSH
41569: PPUSH
41570: PPUSH
// pom := GetBase ( fac ) ;
41571: LD_ADDR_VAR 0 5
41575: PUSH
41576: LD_VAR 0 1
41580: PPUSH
41581: CALL_OW 274
41585: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41586: LD_ADDR_VAR 0 4
41590: PUSH
41591: LD_VAR 0 2
41595: PUSH
41596: LD_INT 1
41598: ARRAY
41599: PPUSH
41600: LD_VAR 0 2
41604: PUSH
41605: LD_INT 2
41607: ARRAY
41608: PPUSH
41609: LD_VAR 0 2
41613: PUSH
41614: LD_INT 3
41616: ARRAY
41617: PPUSH
41618: LD_VAR 0 2
41622: PUSH
41623: LD_INT 4
41625: ARRAY
41626: PPUSH
41627: CALL_OW 449
41631: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41632: LD_ADDR_VAR 0 3
41636: PUSH
41637: LD_VAR 0 5
41641: PPUSH
41642: LD_INT 1
41644: PPUSH
41645: CALL_OW 275
41649: PUSH
41650: LD_VAR 0 4
41654: PUSH
41655: LD_INT 1
41657: ARRAY
41658: GREATEREQUAL
41659: PUSH
41660: LD_VAR 0 5
41664: PPUSH
41665: LD_INT 2
41667: PPUSH
41668: CALL_OW 275
41672: PUSH
41673: LD_VAR 0 4
41677: PUSH
41678: LD_INT 2
41680: ARRAY
41681: GREATEREQUAL
41682: AND
41683: PUSH
41684: LD_VAR 0 5
41688: PPUSH
41689: LD_INT 3
41691: PPUSH
41692: CALL_OW 275
41696: PUSH
41697: LD_VAR 0 4
41701: PUSH
41702: LD_INT 3
41704: ARRAY
41705: GREATEREQUAL
41706: AND
41707: ST_TO_ADDR
// end ;
41708: LD_VAR 0 3
41712: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41713: LD_INT 0
41715: PPUSH
41716: PPUSH
41717: PPUSH
41718: PPUSH
// pom := GetBase ( building ) ;
41719: LD_ADDR_VAR 0 3
41723: PUSH
41724: LD_VAR 0 1
41728: PPUSH
41729: CALL_OW 274
41733: ST_TO_ADDR
// if not pom then
41734: LD_VAR 0 3
41738: NOT
41739: IFFALSE 41743
// exit ;
41741: GO 41913
// btype := GetBType ( building ) ;
41743: LD_ADDR_VAR 0 5
41747: PUSH
41748: LD_VAR 0 1
41752: PPUSH
41753: CALL_OW 266
41757: ST_TO_ADDR
// if btype = b_armoury then
41758: LD_VAR 0 5
41762: PUSH
41763: LD_INT 4
41765: EQUAL
41766: IFFALSE 41776
// btype := b_barracks ;
41768: LD_ADDR_VAR 0 5
41772: PUSH
41773: LD_INT 5
41775: ST_TO_ADDR
// if btype = b_depot then
41776: LD_VAR 0 5
41780: PUSH
41781: LD_INT 0
41783: EQUAL
41784: IFFALSE 41794
// btype := b_warehouse ;
41786: LD_ADDR_VAR 0 5
41790: PUSH
41791: LD_INT 1
41793: ST_TO_ADDR
// if btype = b_workshop then
41794: LD_VAR 0 5
41798: PUSH
41799: LD_INT 2
41801: EQUAL
41802: IFFALSE 41812
// btype := b_factory ;
41804: LD_ADDR_VAR 0 5
41808: PUSH
41809: LD_INT 3
41811: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41812: LD_ADDR_VAR 0 4
41816: PUSH
41817: LD_VAR 0 5
41821: PPUSH
41822: LD_VAR 0 1
41826: PPUSH
41827: CALL_OW 248
41831: PPUSH
41832: CALL_OW 450
41836: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41837: LD_ADDR_VAR 0 2
41841: PUSH
41842: LD_VAR 0 3
41846: PPUSH
41847: LD_INT 1
41849: PPUSH
41850: CALL_OW 275
41854: PUSH
41855: LD_VAR 0 4
41859: PUSH
41860: LD_INT 1
41862: ARRAY
41863: GREATEREQUAL
41864: PUSH
41865: LD_VAR 0 3
41869: PPUSH
41870: LD_INT 2
41872: PPUSH
41873: CALL_OW 275
41877: PUSH
41878: LD_VAR 0 4
41882: PUSH
41883: LD_INT 2
41885: ARRAY
41886: GREATEREQUAL
41887: AND
41888: PUSH
41889: LD_VAR 0 3
41893: PPUSH
41894: LD_INT 3
41896: PPUSH
41897: CALL_OW 275
41901: PUSH
41902: LD_VAR 0 4
41906: PUSH
41907: LD_INT 3
41909: ARRAY
41910: GREATEREQUAL
41911: AND
41912: ST_TO_ADDR
// end ;
41913: LD_VAR 0 2
41917: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41918: LD_INT 0
41920: PPUSH
41921: PPUSH
41922: PPUSH
// pom := GetBase ( building ) ;
41923: LD_ADDR_VAR 0 4
41927: PUSH
41928: LD_VAR 0 1
41932: PPUSH
41933: CALL_OW 274
41937: ST_TO_ADDR
// if not pom then
41938: LD_VAR 0 4
41942: NOT
41943: IFFALSE 41947
// exit ;
41945: GO 42048
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41947: LD_ADDR_VAR 0 5
41951: PUSH
41952: LD_VAR 0 2
41956: PPUSH
41957: LD_VAR 0 1
41961: PPUSH
41962: CALL_OW 248
41966: PPUSH
41967: CALL_OW 450
41971: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41972: LD_ADDR_VAR 0 3
41976: PUSH
41977: LD_VAR 0 4
41981: PPUSH
41982: LD_INT 1
41984: PPUSH
41985: CALL_OW 275
41989: PUSH
41990: LD_VAR 0 5
41994: PUSH
41995: LD_INT 1
41997: ARRAY
41998: GREATEREQUAL
41999: PUSH
42000: LD_VAR 0 4
42004: PPUSH
42005: LD_INT 2
42007: PPUSH
42008: CALL_OW 275
42012: PUSH
42013: LD_VAR 0 5
42017: PUSH
42018: LD_INT 2
42020: ARRAY
42021: GREATEREQUAL
42022: AND
42023: PUSH
42024: LD_VAR 0 4
42028: PPUSH
42029: LD_INT 3
42031: PPUSH
42032: CALL_OW 275
42036: PUSH
42037: LD_VAR 0 5
42041: PUSH
42042: LD_INT 3
42044: ARRAY
42045: GREATEREQUAL
42046: AND
42047: ST_TO_ADDR
// end ;
42048: LD_VAR 0 3
42052: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42053: LD_INT 0
42055: PPUSH
42056: PPUSH
42057: PPUSH
42058: PPUSH
42059: PPUSH
42060: PPUSH
42061: PPUSH
42062: PPUSH
42063: PPUSH
42064: PPUSH
42065: PPUSH
// result := false ;
42066: LD_ADDR_VAR 0 8
42070: PUSH
42071: LD_INT 0
42073: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42074: LD_VAR 0 5
42078: NOT
42079: PUSH
42080: LD_VAR 0 1
42084: NOT
42085: OR
42086: PUSH
42087: LD_VAR 0 2
42091: NOT
42092: OR
42093: PUSH
42094: LD_VAR 0 3
42098: NOT
42099: OR
42100: IFFALSE 42104
// exit ;
42102: GO 42918
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42104: LD_ADDR_VAR 0 14
42108: PUSH
42109: LD_VAR 0 1
42113: PPUSH
42114: LD_VAR 0 2
42118: PPUSH
42119: LD_VAR 0 3
42123: PPUSH
42124: LD_VAR 0 4
42128: PPUSH
42129: LD_VAR 0 5
42133: PUSH
42134: LD_INT 1
42136: ARRAY
42137: PPUSH
42138: CALL_OW 248
42142: PPUSH
42143: LD_INT 0
42145: PPUSH
42146: CALL 43755 0 6
42150: ST_TO_ADDR
// if not hexes then
42151: LD_VAR 0 14
42155: NOT
42156: IFFALSE 42160
// exit ;
42158: GO 42918
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42160: LD_ADDR_VAR 0 17
42164: PUSH
42165: LD_VAR 0 5
42169: PPUSH
42170: LD_INT 22
42172: PUSH
42173: LD_VAR 0 13
42177: PPUSH
42178: CALL_OW 255
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 2
42189: PUSH
42190: LD_INT 30
42192: PUSH
42193: LD_INT 0
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 30
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: LIST
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PPUSH
42219: CALL_OW 72
42223: ST_TO_ADDR
// for i = 1 to hexes do
42224: LD_ADDR_VAR 0 9
42228: PUSH
42229: DOUBLE
42230: LD_INT 1
42232: DEC
42233: ST_TO_ADDR
42234: LD_VAR 0 14
42238: PUSH
42239: FOR_TO
42240: IFFALSE 42916
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42242: LD_ADDR_VAR 0 13
42246: PUSH
42247: LD_VAR 0 14
42251: PUSH
42252: LD_VAR 0 9
42256: ARRAY
42257: PUSH
42258: LD_INT 1
42260: ARRAY
42261: PPUSH
42262: LD_VAR 0 14
42266: PUSH
42267: LD_VAR 0 9
42271: ARRAY
42272: PUSH
42273: LD_INT 2
42275: ARRAY
42276: PPUSH
42277: CALL_OW 428
42281: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42282: LD_VAR 0 14
42286: PUSH
42287: LD_VAR 0 9
42291: ARRAY
42292: PUSH
42293: LD_INT 1
42295: ARRAY
42296: PPUSH
42297: LD_VAR 0 14
42301: PUSH
42302: LD_VAR 0 9
42306: ARRAY
42307: PUSH
42308: LD_INT 2
42310: ARRAY
42311: PPUSH
42312: CALL_OW 351
42316: PUSH
42317: LD_VAR 0 14
42321: PUSH
42322: LD_VAR 0 9
42326: ARRAY
42327: PUSH
42328: LD_INT 1
42330: ARRAY
42331: PPUSH
42332: LD_VAR 0 14
42336: PUSH
42337: LD_VAR 0 9
42341: ARRAY
42342: PUSH
42343: LD_INT 2
42345: ARRAY
42346: PPUSH
42347: CALL_OW 488
42351: NOT
42352: OR
42353: PUSH
42354: LD_VAR 0 13
42358: PPUSH
42359: CALL_OW 247
42363: PUSH
42364: LD_INT 3
42366: EQUAL
42367: OR
42368: IFFALSE 42374
// exit ;
42370: POP
42371: POP
42372: GO 42918
// if not tmp then
42374: LD_VAR 0 13
42378: NOT
42379: IFFALSE 42383
// continue ;
42381: GO 42239
// result := true ;
42383: LD_ADDR_VAR 0 8
42387: PUSH
42388: LD_INT 1
42390: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42391: LD_VAR 0 6
42395: PUSH
42396: LD_VAR 0 13
42400: PPUSH
42401: CALL_OW 247
42405: PUSH
42406: LD_INT 2
42408: EQUAL
42409: AND
42410: PUSH
42411: LD_VAR 0 13
42415: PPUSH
42416: CALL_OW 263
42420: PUSH
42421: LD_INT 1
42423: EQUAL
42424: AND
42425: IFFALSE 42589
// begin if IsDrivenBy ( tmp ) then
42427: LD_VAR 0 13
42431: PPUSH
42432: CALL_OW 311
42436: IFFALSE 42440
// continue ;
42438: GO 42239
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42440: LD_VAR 0 6
42444: PPUSH
42445: LD_INT 3
42447: PUSH
42448: LD_INT 60
42450: PUSH
42451: EMPTY
42452: LIST
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 3
42460: PUSH
42461: LD_INT 55
42463: PUSH
42464: EMPTY
42465: LIST
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PPUSH
42475: CALL_OW 72
42479: IFFALSE 42587
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42481: LD_ADDR_VAR 0 18
42485: PUSH
42486: LD_VAR 0 6
42490: PPUSH
42491: LD_INT 3
42493: PUSH
42494: LD_INT 60
42496: PUSH
42497: EMPTY
42498: LIST
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 3
42506: PUSH
42507: LD_INT 55
42509: PUSH
42510: EMPTY
42511: LIST
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PPUSH
42521: CALL_OW 72
42525: PUSH
42526: LD_INT 1
42528: ARRAY
42529: ST_TO_ADDR
// if IsInUnit ( driver ) then
42530: LD_VAR 0 18
42534: PPUSH
42535: CALL_OW 310
42539: IFFALSE 42550
// ComExit ( driver ) ;
42541: LD_VAR 0 18
42545: PPUSH
42546: CALL 66939 0 1
// AddComEnterUnit ( driver , tmp ) ;
42550: LD_VAR 0 18
42554: PPUSH
42555: LD_VAR 0 13
42559: PPUSH
42560: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42564: LD_VAR 0 18
42568: PPUSH
42569: LD_VAR 0 7
42573: PPUSH
42574: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42578: LD_VAR 0 18
42582: PPUSH
42583: CALL_OW 181
// end ; continue ;
42587: GO 42239
// end ; if not cleaners or not tmp in cleaners then
42589: LD_VAR 0 6
42593: NOT
42594: PUSH
42595: LD_VAR 0 13
42599: PUSH
42600: LD_VAR 0 6
42604: IN
42605: NOT
42606: OR
42607: IFFALSE 42914
// begin if dep then
42609: LD_VAR 0 17
42613: IFFALSE 42749
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42615: LD_ADDR_VAR 0 16
42619: PUSH
42620: LD_VAR 0 17
42624: PUSH
42625: LD_INT 1
42627: ARRAY
42628: PPUSH
42629: CALL_OW 250
42633: PPUSH
42634: LD_VAR 0 17
42638: PUSH
42639: LD_INT 1
42641: ARRAY
42642: PPUSH
42643: CALL_OW 254
42647: PPUSH
42648: LD_INT 5
42650: PPUSH
42651: CALL_OW 272
42655: PUSH
42656: LD_VAR 0 17
42660: PUSH
42661: LD_INT 1
42663: ARRAY
42664: PPUSH
42665: CALL_OW 251
42669: PPUSH
42670: LD_VAR 0 17
42674: PUSH
42675: LD_INT 1
42677: ARRAY
42678: PPUSH
42679: CALL_OW 254
42683: PPUSH
42684: LD_INT 5
42686: PPUSH
42687: CALL_OW 273
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42696: LD_VAR 0 16
42700: PUSH
42701: LD_INT 1
42703: ARRAY
42704: PPUSH
42705: LD_VAR 0 16
42709: PUSH
42710: LD_INT 2
42712: ARRAY
42713: PPUSH
42714: CALL_OW 488
42718: IFFALSE 42749
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42720: LD_VAR 0 13
42724: PPUSH
42725: LD_VAR 0 16
42729: PUSH
42730: LD_INT 1
42732: ARRAY
42733: PPUSH
42734: LD_VAR 0 16
42738: PUSH
42739: LD_INT 2
42741: ARRAY
42742: PPUSH
42743: CALL_OW 111
// continue ;
42747: GO 42239
// end ; end ; r := GetDir ( tmp ) ;
42749: LD_ADDR_VAR 0 15
42753: PUSH
42754: LD_VAR 0 13
42758: PPUSH
42759: CALL_OW 254
42763: ST_TO_ADDR
// if r = 5 then
42764: LD_VAR 0 15
42768: PUSH
42769: LD_INT 5
42771: EQUAL
42772: IFFALSE 42782
// r := 0 ;
42774: LD_ADDR_VAR 0 15
42778: PUSH
42779: LD_INT 0
42781: ST_TO_ADDR
// for j = r to 5 do
42782: LD_ADDR_VAR 0 10
42786: PUSH
42787: DOUBLE
42788: LD_VAR 0 15
42792: DEC
42793: ST_TO_ADDR
42794: LD_INT 5
42796: PUSH
42797: FOR_TO
42798: IFFALSE 42912
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42800: LD_ADDR_VAR 0 11
42804: PUSH
42805: LD_VAR 0 13
42809: PPUSH
42810: CALL_OW 250
42814: PPUSH
42815: LD_VAR 0 10
42819: PPUSH
42820: LD_INT 2
42822: PPUSH
42823: CALL_OW 272
42827: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42828: LD_ADDR_VAR 0 12
42832: PUSH
42833: LD_VAR 0 13
42837: PPUSH
42838: CALL_OW 251
42842: PPUSH
42843: LD_VAR 0 10
42847: PPUSH
42848: LD_INT 2
42850: PPUSH
42851: CALL_OW 273
42855: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42856: LD_VAR 0 11
42860: PPUSH
42861: LD_VAR 0 12
42865: PPUSH
42866: CALL_OW 488
42870: PUSH
42871: LD_VAR 0 11
42875: PPUSH
42876: LD_VAR 0 12
42880: PPUSH
42881: CALL_OW 428
42885: NOT
42886: AND
42887: IFFALSE 42910
// begin ComMoveXY ( tmp , _x , _y ) ;
42889: LD_VAR 0 13
42893: PPUSH
42894: LD_VAR 0 11
42898: PPUSH
42899: LD_VAR 0 12
42903: PPUSH
42904: CALL_OW 111
// break ;
42908: GO 42912
// end ; end ;
42910: GO 42797
42912: POP
42913: POP
// end ; end ;
42914: GO 42239
42916: POP
42917: POP
// end ;
42918: LD_VAR 0 8
42922: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
42923: LD_INT 0
42925: PPUSH
42926: PPUSH
42927: PPUSH
42928: PPUSH
42929: PPUSH
42930: PPUSH
42931: PPUSH
42932: PPUSH
42933: PPUSH
42934: PPUSH
// result := false ;
42935: LD_ADDR_VAR 0 6
42939: PUSH
42940: LD_INT 0
42942: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42943: LD_VAR 0 1
42947: NOT
42948: PUSH
42949: LD_VAR 0 1
42953: PPUSH
42954: CALL_OW 266
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: IN
42969: NOT
42970: OR
42971: PUSH
42972: LD_VAR 0 2
42976: NOT
42977: OR
42978: PUSH
42979: LD_VAR 0 5
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: LD_INT 2
42992: PUSH
42993: LD_INT 3
42995: PUSH
42996: LD_INT 4
42998: PUSH
42999: LD_INT 5
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: IN
43010: NOT
43011: OR
43012: PUSH
43013: LD_VAR 0 3
43017: PPUSH
43018: LD_VAR 0 4
43022: PPUSH
43023: CALL_OW 488
43027: NOT
43028: OR
43029: IFFALSE 43033
// exit ;
43031: GO 43750
// pom := GetBase ( depot ) ;
43033: LD_ADDR_VAR 0 10
43037: PUSH
43038: LD_VAR 0 1
43042: PPUSH
43043: CALL_OW 274
43047: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43048: LD_ADDR_VAR 0 11
43052: PUSH
43053: LD_VAR 0 2
43057: PPUSH
43058: LD_VAR 0 1
43062: PPUSH
43063: CALL_OW 248
43067: PPUSH
43068: CALL_OW 450
43072: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43073: LD_VAR 0 10
43077: PPUSH
43078: LD_INT 1
43080: PPUSH
43081: CALL_OW 275
43085: PUSH
43086: LD_VAR 0 11
43090: PUSH
43091: LD_INT 1
43093: ARRAY
43094: GREATEREQUAL
43095: PUSH
43096: LD_VAR 0 10
43100: PPUSH
43101: LD_INT 2
43103: PPUSH
43104: CALL_OW 275
43108: PUSH
43109: LD_VAR 0 11
43113: PUSH
43114: LD_INT 2
43116: ARRAY
43117: GREATEREQUAL
43118: AND
43119: PUSH
43120: LD_VAR 0 10
43124: PPUSH
43125: LD_INT 3
43127: PPUSH
43128: CALL_OW 275
43132: PUSH
43133: LD_VAR 0 11
43137: PUSH
43138: LD_INT 3
43140: ARRAY
43141: GREATEREQUAL
43142: AND
43143: NOT
43144: IFFALSE 43148
// exit ;
43146: GO 43750
// if GetBType ( depot ) = b_depot then
43148: LD_VAR 0 1
43152: PPUSH
43153: CALL_OW 266
43157: PUSH
43158: LD_INT 0
43160: EQUAL
43161: IFFALSE 43173
// dist := 28 else
43163: LD_ADDR_VAR 0 14
43167: PUSH
43168: LD_INT 28
43170: ST_TO_ADDR
43171: GO 43181
// dist := 36 ;
43173: LD_ADDR_VAR 0 14
43177: PUSH
43178: LD_INT 36
43180: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43181: LD_VAR 0 1
43185: PPUSH
43186: LD_VAR 0 3
43190: PPUSH
43191: LD_VAR 0 4
43195: PPUSH
43196: CALL_OW 297
43200: PUSH
43201: LD_VAR 0 14
43205: GREATER
43206: IFFALSE 43210
// exit ;
43208: GO 43750
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43210: LD_ADDR_VAR 0 12
43214: PUSH
43215: LD_VAR 0 2
43219: PPUSH
43220: LD_VAR 0 3
43224: PPUSH
43225: LD_VAR 0 4
43229: PPUSH
43230: LD_VAR 0 5
43234: PPUSH
43235: LD_VAR 0 1
43239: PPUSH
43240: CALL_OW 248
43244: PPUSH
43245: LD_INT 0
43247: PPUSH
43248: CALL 43755 0 6
43252: ST_TO_ADDR
// if not hexes then
43253: LD_VAR 0 12
43257: NOT
43258: IFFALSE 43262
// exit ;
43260: GO 43750
// hex := GetHexInfo ( x , y ) ;
43262: LD_ADDR_VAR 0 15
43266: PUSH
43267: LD_VAR 0 3
43271: PPUSH
43272: LD_VAR 0 4
43276: PPUSH
43277: CALL_OW 546
43281: ST_TO_ADDR
// if hex [ 1 ] then
43282: LD_VAR 0 15
43286: PUSH
43287: LD_INT 1
43289: ARRAY
43290: IFFALSE 43294
// exit ;
43292: GO 43750
// height := hex [ 2 ] ;
43294: LD_ADDR_VAR 0 13
43298: PUSH
43299: LD_VAR 0 15
43303: PUSH
43304: LD_INT 2
43306: ARRAY
43307: ST_TO_ADDR
// for i = 1 to hexes do
43308: LD_ADDR_VAR 0 7
43312: PUSH
43313: DOUBLE
43314: LD_INT 1
43316: DEC
43317: ST_TO_ADDR
43318: LD_VAR 0 12
43322: PUSH
43323: FOR_TO
43324: IFFALSE 43654
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43326: LD_VAR 0 12
43330: PUSH
43331: LD_VAR 0 7
43335: ARRAY
43336: PUSH
43337: LD_INT 1
43339: ARRAY
43340: PPUSH
43341: LD_VAR 0 12
43345: PUSH
43346: LD_VAR 0 7
43350: ARRAY
43351: PUSH
43352: LD_INT 2
43354: ARRAY
43355: PPUSH
43356: CALL_OW 488
43360: NOT
43361: PUSH
43362: LD_VAR 0 12
43366: PUSH
43367: LD_VAR 0 7
43371: ARRAY
43372: PUSH
43373: LD_INT 1
43375: ARRAY
43376: PPUSH
43377: LD_VAR 0 12
43381: PUSH
43382: LD_VAR 0 7
43386: ARRAY
43387: PUSH
43388: LD_INT 2
43390: ARRAY
43391: PPUSH
43392: CALL_OW 428
43396: PUSH
43397: LD_INT 0
43399: GREATER
43400: OR
43401: PUSH
43402: LD_VAR 0 12
43406: PUSH
43407: LD_VAR 0 7
43411: ARRAY
43412: PUSH
43413: LD_INT 1
43415: ARRAY
43416: PPUSH
43417: LD_VAR 0 12
43421: PUSH
43422: LD_VAR 0 7
43426: ARRAY
43427: PUSH
43428: LD_INT 2
43430: ARRAY
43431: PPUSH
43432: CALL_OW 351
43436: OR
43437: IFFALSE 43443
// exit ;
43439: POP
43440: POP
43441: GO 43750
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43443: LD_ADDR_VAR 0 8
43447: PUSH
43448: LD_VAR 0 12
43452: PUSH
43453: LD_VAR 0 7
43457: ARRAY
43458: PUSH
43459: LD_INT 1
43461: ARRAY
43462: PPUSH
43463: LD_VAR 0 12
43467: PUSH
43468: LD_VAR 0 7
43472: ARRAY
43473: PUSH
43474: LD_INT 2
43476: ARRAY
43477: PPUSH
43478: CALL_OW 546
43482: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43483: LD_VAR 0 8
43487: PUSH
43488: LD_INT 1
43490: ARRAY
43491: PUSH
43492: LD_VAR 0 8
43496: PUSH
43497: LD_INT 2
43499: ARRAY
43500: PUSH
43501: LD_VAR 0 13
43505: PUSH
43506: LD_INT 2
43508: PLUS
43509: GREATER
43510: OR
43511: PUSH
43512: LD_VAR 0 8
43516: PUSH
43517: LD_INT 2
43519: ARRAY
43520: PUSH
43521: LD_VAR 0 13
43525: PUSH
43526: LD_INT 2
43528: MINUS
43529: LESS
43530: OR
43531: PUSH
43532: LD_VAR 0 8
43536: PUSH
43537: LD_INT 3
43539: ARRAY
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: LD_INT 8
43546: PUSH
43547: LD_INT 9
43549: PUSH
43550: LD_INT 10
43552: PUSH
43553: LD_INT 11
43555: PUSH
43556: LD_INT 12
43558: PUSH
43559: LD_INT 13
43561: PUSH
43562: LD_INT 16
43564: PUSH
43565: LD_INT 17
43567: PUSH
43568: LD_INT 18
43570: PUSH
43571: LD_INT 19
43573: PUSH
43574: LD_INT 20
43576: PUSH
43577: LD_INT 21
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: IN
43595: NOT
43596: OR
43597: PUSH
43598: LD_VAR 0 8
43602: PUSH
43603: LD_INT 5
43605: ARRAY
43606: NOT
43607: OR
43608: PUSH
43609: LD_VAR 0 8
43613: PUSH
43614: LD_INT 6
43616: ARRAY
43617: PUSH
43618: LD_INT 1
43620: PUSH
43621: LD_INT 2
43623: PUSH
43624: LD_INT 7
43626: PUSH
43627: LD_INT 9
43629: PUSH
43630: LD_INT 10
43632: PUSH
43633: LD_INT 11
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: IN
43644: NOT
43645: OR
43646: IFFALSE 43652
// exit ;
43648: POP
43649: POP
43650: GO 43750
// end ;
43652: GO 43323
43654: POP
43655: POP
// side := GetSide ( depot ) ;
43656: LD_ADDR_VAR 0 9
43660: PUSH
43661: LD_VAR 0 1
43665: PPUSH
43666: CALL_OW 255
43670: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43671: LD_VAR 0 9
43675: PPUSH
43676: LD_VAR 0 3
43680: PPUSH
43681: LD_VAR 0 4
43685: PPUSH
43686: LD_INT 20
43688: PPUSH
43689: CALL 36101 0 4
43693: PUSH
43694: LD_INT 4
43696: ARRAY
43697: IFFALSE 43701
// exit ;
43699: GO 43750
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43701: LD_VAR 0 2
43705: PUSH
43706: LD_INT 29
43708: PUSH
43709: LD_INT 30
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: IN
43716: PUSH
43717: LD_VAR 0 3
43721: PPUSH
43722: LD_VAR 0 4
43726: PPUSH
43727: LD_VAR 0 9
43731: PPUSH
43732: CALL_OW 440
43736: NOT
43737: AND
43738: IFFALSE 43742
// exit ;
43740: GO 43750
// result := true ;
43742: LD_ADDR_VAR 0 6
43746: PUSH
43747: LD_INT 1
43749: ST_TO_ADDR
// end ;
43750: LD_VAR 0 6
43754: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43755: LD_INT 0
43757: PPUSH
43758: PPUSH
43759: PPUSH
43760: PPUSH
43761: PPUSH
43762: PPUSH
43763: PPUSH
43764: PPUSH
43765: PPUSH
43766: PPUSH
43767: PPUSH
43768: PPUSH
43769: PPUSH
43770: PPUSH
43771: PPUSH
43772: PPUSH
43773: PPUSH
43774: PPUSH
43775: PPUSH
43776: PPUSH
43777: PPUSH
43778: PPUSH
43779: PPUSH
43780: PPUSH
43781: PPUSH
43782: PPUSH
43783: PPUSH
43784: PPUSH
43785: PPUSH
43786: PPUSH
43787: PPUSH
43788: PPUSH
43789: PPUSH
43790: PPUSH
43791: PPUSH
43792: PPUSH
43793: PPUSH
43794: PPUSH
43795: PPUSH
43796: PPUSH
43797: PPUSH
43798: PPUSH
43799: PPUSH
43800: PPUSH
43801: PPUSH
43802: PPUSH
43803: PPUSH
43804: PPUSH
43805: PPUSH
43806: PPUSH
43807: PPUSH
43808: PPUSH
43809: PPUSH
43810: PPUSH
43811: PPUSH
43812: PPUSH
43813: PPUSH
43814: PPUSH
// result = [ ] ;
43815: LD_ADDR_VAR 0 7
43819: PUSH
43820: EMPTY
43821: ST_TO_ADDR
// temp_list = [ ] ;
43822: LD_ADDR_VAR 0 9
43826: PUSH
43827: EMPTY
43828: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43829: LD_VAR 0 4
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: LD_INT 1
43839: PUSH
43840: LD_INT 2
43842: PUSH
43843: LD_INT 3
43845: PUSH
43846: LD_INT 4
43848: PUSH
43849: LD_INT 5
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: IN
43860: NOT
43861: PUSH
43862: LD_VAR 0 1
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: LD_INT 1
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: IN
43877: PUSH
43878: LD_VAR 0 5
43882: PUSH
43883: LD_INT 1
43885: PUSH
43886: LD_INT 2
43888: PUSH
43889: LD_INT 3
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: LIST
43896: IN
43897: NOT
43898: AND
43899: OR
43900: IFFALSE 43904
// exit ;
43902: GO 62295
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43904: LD_VAR 0 1
43908: PUSH
43909: LD_INT 6
43911: PUSH
43912: LD_INT 7
43914: PUSH
43915: LD_INT 8
43917: PUSH
43918: LD_INT 13
43920: PUSH
43921: LD_INT 12
43923: PUSH
43924: LD_INT 15
43926: PUSH
43927: LD_INT 11
43929: PUSH
43930: LD_INT 14
43932: PUSH
43933: LD_INT 10
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: IN
43947: IFFALSE 43957
// btype = b_lab ;
43949: LD_ADDR_VAR 0 1
43953: PUSH
43954: LD_INT 6
43956: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43957: LD_VAR 0 6
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: LD_INT 1
43967: PUSH
43968: LD_INT 2
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: LIST
43975: IN
43976: NOT
43977: PUSH
43978: LD_VAR 0 1
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: LD_INT 1
43988: PUSH
43989: LD_INT 2
43991: PUSH
43992: LD_INT 3
43994: PUSH
43995: LD_INT 6
43997: PUSH
43998: LD_INT 36
44000: PUSH
44001: LD_INT 4
44003: PUSH
44004: LD_INT 5
44006: PUSH
44007: LD_INT 31
44009: PUSH
44010: LD_INT 32
44012: PUSH
44013: LD_INT 33
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: IN
44029: NOT
44030: PUSH
44031: LD_VAR 0 6
44035: PUSH
44036: LD_INT 1
44038: EQUAL
44039: AND
44040: OR
44041: PUSH
44042: LD_VAR 0 1
44046: PUSH
44047: LD_INT 2
44049: PUSH
44050: LD_INT 3
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: IN
44057: NOT
44058: PUSH
44059: LD_VAR 0 6
44063: PUSH
44064: LD_INT 2
44066: EQUAL
44067: AND
44068: OR
44069: IFFALSE 44079
// mode = 0 ;
44071: LD_ADDR_VAR 0 6
44075: PUSH
44076: LD_INT 0
44078: ST_TO_ADDR
// case mode of 0 :
44079: LD_VAR 0 6
44083: PUSH
44084: LD_INT 0
44086: DOUBLE
44087: EQUAL
44088: IFTRUE 44092
44090: GO 55545
44092: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44093: LD_ADDR_VAR 0 11
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: LD_INT 1
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: LD_INT 1
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: LD_INT 1
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: LD_INT 2
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 0
44186: PUSH
44187: LD_INT 2
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: PUSH
44198: LD_INT 1
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: LD_INT 2
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 0
44218: PUSH
44219: LD_INT 2
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 1
44228: NEG
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: LD_INT 3
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: LD_INT 3
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 1
44259: NEG
44260: PUSH
44261: LD_INT 2
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44286: LD_ADDR_VAR 0 12
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 0
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 1
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: LD_INT 1
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 1
44344: NEG
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: LD_INT 1
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 2
44378: PUSH
44379: LD_INT 0
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 2
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: NEG
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 2
44420: NEG
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 2
44432: NEG
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 3
44443: NEG
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 3
44454: NEG
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44482: LD_ADDR_VAR 0 13
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 1
44510: PUSH
44511: LD_INT 0
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 1
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 1
44551: NEG
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: LD_INT 2
44567: NEG
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 2
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: LD_INT 2
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 2
44605: NEG
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 2
44617: NEG
44618: PUSH
44619: LD_INT 2
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 2
44629: NEG
44630: PUSH
44631: LD_INT 3
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 3
44641: NEG
44642: PUSH
44643: LD_INT 2
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 3
44653: NEG
44654: PUSH
44655: LD_INT 3
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44681: LD_ADDR_VAR 0 14
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 0
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 1
44750: NEG
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: LD_INT 2
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: LD_INT 2
44777: NEG
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: LD_INT 1
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 1
44796: PUSH
44797: LD_INT 2
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 0
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 1
44827: NEG
44828: PUSH
44829: LD_INT 3
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: LD_INT 3
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: LD_INT 2
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44877: LD_ADDR_VAR 0 15
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: LD_INT 1
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 2
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 2
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 2
45000: NEG
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 2
45011: NEG
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: LD_INT 1
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 3
45034: PUSH
45035: LD_INT 0
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 3
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45070: LD_ADDR_VAR 0 16
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 1
45128: NEG
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: NEG
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: LD_INT 2
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 2
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 2
45173: PUSH
45174: LD_INT 2
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: LD_INT 2
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 2
45193: NEG
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 2
45205: NEG
45206: PUSH
45207: LD_INT 2
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 3
45217: PUSH
45218: LD_INT 2
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 3
45227: PUSH
45228: LD_INT 3
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 2
45237: PUSH
45238: LD_INT 3
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45263: LD_ADDR_VAR 0 17
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 1
45332: NEG
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: LD_INT 2
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 2
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 2
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 2
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 2
45398: PUSH
45399: LD_INT 2
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: PUSH
45409: LD_INT 2
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: NEG
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 2
45439: NEG
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 2
45450: NEG
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 2
45462: NEG
45463: PUSH
45464: LD_INT 2
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45493: LD_ADDR_VAR 0 18
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: NEG
45575: PUSH
45576: LD_INT 2
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: LD_INT 2
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 2
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 2
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: LD_INT 2
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: LD_INT 2
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: NEG
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 2
45669: NEG
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 2
45680: NEG
45681: PUSH
45682: LD_INT 1
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 2
45692: NEG
45693: PUSH
45694: LD_INT 2
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45723: LD_ADDR_VAR 0 19
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: PUSH
45806: LD_INT 2
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 2
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 2
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 2
45858: PUSH
45859: LD_INT 2
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: LD_INT 2
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: LD_INT 2
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 2
45899: NEG
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 2
45910: NEG
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 2
45922: NEG
45923: PUSH
45924: LD_INT 2
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45953: LD_ADDR_VAR 0 20
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 1
46034: NEG
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 2
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 2
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: LD_INT 2
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 2
46129: NEG
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 2
46140: NEG
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 2
46152: NEG
46153: PUSH
46154: LD_INT 2
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46183: LD_ADDR_VAR 0 21
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: LD_INT 2
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 2
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 2
46318: PUSH
46319: LD_INT 2
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: LD_INT 2
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 2
46359: NEG
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 2
46370: NEG
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 2
46382: NEG
46383: PUSH
46384: LD_INT 2
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46413: LD_ADDR_VAR 0 22
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: NEG
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: LD_INT 2
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 2
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: LD_INT 1
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 2
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 2
46538: PUSH
46539: LD_INT 1
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 2
46548: PUSH
46549: LD_INT 2
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: LD_INT 2
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: LD_INT 2
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 2
46589: NEG
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 2
46600: NEG
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 2
46612: NEG
46613: PUSH
46614: LD_INT 2
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46643: LD_ADDR_VAR 0 23
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: NEG
46725: PUSH
46726: LD_INT 2
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: LD_INT 2
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 2
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 2
46778: PUSH
46779: LD_INT 2
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: LD_INT 2
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: LD_INT 2
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 2
46819: NEG
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 2
46830: NEG
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 2
46842: NEG
46843: PUSH
46844: LD_INT 2
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: NEG
46855: PUSH
46856: LD_INT 3
46858: NEG
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: LD_INT 3
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: LD_INT 2
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 2
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46923: LD_ADDR_VAR 0 24
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 1
46992: NEG
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: LD_INT 2
47008: NEG
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: LD_INT 2
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 2
47058: PUSH
47059: LD_INT 2
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: NEG
47089: PUSH
47090: LD_INT 1
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 2
47099: NEG
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 2
47122: NEG
47123: PUSH
47124: LD_INT 2
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: LD_INT 2
47137: NEG
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 2
47145: PUSH
47146: LD_INT 1
47148: NEG
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 3
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 3
47166: PUSH
47167: LD_INT 2
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47199: LD_ADDR_VAR 0 25
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 1
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: LD_INT 2
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 2
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 2
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: LD_INT 2
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: LD_INT 2
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: LD_INT 2
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 2
47386: NEG
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PUSH
47400: LD_INT 2
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 3
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 3
47420: PUSH
47421: LD_INT 2
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 2
47430: PUSH
47431: LD_INT 3
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: LD_INT 3
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47473: LD_ADDR_VAR 0 26
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 1
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: LD_INT 2
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: LD_INT 2
47569: NEG
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 2
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 2
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: LD_INT 2
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 1
47618: PUSH
47619: LD_INT 2
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 0
47628: PUSH
47629: LD_INT 2
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 2
47649: NEG
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 2
47660: NEG
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 2
47672: NEG
47673: PUSH
47674: LD_INT 2
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 2
47684: PUSH
47685: LD_INT 3
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: LD_INT 3
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 2
47715: NEG
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47749: LD_ADDR_VAR 0 27
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: LD_INT 1
47769: NEG
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: LD_INT 2
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 2
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 2
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 2
47884: PUSH
47885: LD_INT 2
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: LD_INT 2
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: LD_INT 2
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 2
47925: NEG
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 2
47936: NEG
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 2
47948: NEG
47949: PUSH
47950: LD_INT 2
47952: NEG
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: LD_INT 2
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 2
47971: NEG
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 3
47982: NEG
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 3
47994: NEG
47995: PUSH
47996: LD_INT 2
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48029: LD_ADDR_VAR 0 28
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: LD_INT 2
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: PUSH
48165: LD_INT 2
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: LD_INT 2
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: LD_INT 2
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 2
48205: NEG
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 2
48216: NEG
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 2
48228: NEG
48229: PUSH
48230: LD_INT 2
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 2
48240: NEG
48241: PUSH
48242: LD_INT 3
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: LD_INT 3
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 3
48264: NEG
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 3
48276: NEG
48277: PUSH
48278: LD_INT 2
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48311: LD_ADDR_VAR 0 29
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: LD_INT 0
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: LD_INT 1
48384: NEG
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 1
48392: NEG
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: LD_INT 2
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 2
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 2
48436: PUSH
48437: LD_INT 1
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 2
48477: NEG
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 2
48489: NEG
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 2
48501: NEG
48502: PUSH
48503: LD_INT 3
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 2
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 3
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: PUSH
48535: LD_INT 3
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: LD_INT 2
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 3
48555: NEG
48556: PUSH
48557: LD_INT 2
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48590: LD_ADDR_VAR 0 30
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: LD_INT 2
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: LD_INT 1
48697: NEG
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 2
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 2
48725: PUSH
48726: LD_INT 2
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 1
48735: PUSH
48736: LD_INT 2
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: LD_INT 1
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 2
48756: NEG
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: LD_INT 3
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: LD_INT 2
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 3
48802: PUSH
48803: LD_INT 2
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 2
48812: PUSH
48813: LD_INT 3
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 2
48822: NEG
48823: PUSH
48824: LD_INT 1
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 3
48833: NEG
48834: PUSH
48835: LD_INT 1
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48868: LD_ADDR_VAR 0 31
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: LD_INT 1
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: NEG
48950: PUSH
48951: LD_INT 2
48953: NEG
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 2
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: LD_INT 2
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 2
49033: NEG
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: LD_INT 2
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 2
49057: NEG
49058: PUSH
49059: LD_INT 3
49061: NEG
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 2
49069: PUSH
49070: LD_INT 1
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 3
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: LD_INT 3
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 1
49100: NEG
49101: PUSH
49102: LD_INT 2
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 3
49111: NEG
49112: PUSH
49113: LD_INT 2
49115: NEG
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49146: LD_ADDR_VAR 0 32
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 0
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: NEG
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 1
49227: NEG
49228: PUSH
49229: LD_INT 2
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: LD_INT 2
49242: NEG
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: LD_INT 1
49253: NEG
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 2
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: LD_INT 2
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 2
49312: NEG
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 2
49323: NEG
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: LD_INT 3
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: LD_INT 2
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 3
49358: PUSH
49359: LD_INT 2
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 2
49368: PUSH
49369: LD_INT 3
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 2
49378: NEG
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 3
49389: NEG
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49424: LD_ADDR_VAR 0 33
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: PUSH
49507: LD_INT 2
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 2
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 2
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: LD_INT 2
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: LD_INT 2
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 1
49568: NEG
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 2
49579: NEG
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 2
49590: NEG
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 2
49602: NEG
49603: PUSH
49604: LD_INT 2
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 2
49614: NEG
49615: PUSH
49616: LD_INT 3
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 2
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 3
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: LD_INT 3
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: LD_INT 2
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 3
49668: NEG
49669: PUSH
49670: LD_INT 2
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49703: LD_ADDR_VAR 0 34
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: LD_INT 2
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: LD_INT 2
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 2
49818: PUSH
49819: LD_INT 1
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: LD_INT 2
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: LD_INT 2
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 2
49859: NEG
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 2
49870: NEG
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 2
49882: NEG
49883: PUSH
49884: LD_INT 2
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: LD_INT 3
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: LD_INT 2
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 3
49917: PUSH
49918: LD_INT 2
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 2
49927: PUSH
49928: LD_INT 3
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 2
49937: NEG
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 3
49948: NEG
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49983: LD_ADDR_VAR 0 35
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: NEG
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 2
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 2
50074: NEG
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50095: LD_ADDR_VAR 0 36
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: NEG
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: LD_INT 2
50180: NEG
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: LD_INT 2
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50207: LD_ADDR_VAR 0 37
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50319: LD_ADDR_VAR 0 38
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: LD_INT 1
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 2
50410: NEG
50411: PUSH
50412: LD_INT 1
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50431: LD_ADDR_VAR 0 39
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: NEG
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: LD_INT 2
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 1
50524: PUSH
50525: LD_INT 2
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50543: LD_ADDR_VAR 0 40
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 1
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: LD_INT 1
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 1
50601: NEG
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50655: LD_ADDR_VAR 0 41
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 1
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: LD_INT 1
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: LD_INT 2
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: LD_INT 1
50751: NEG
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 2
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 2
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 2
50779: PUSH
50780: LD_INT 2
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: LD_INT 2
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: LD_INT 1
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 2
50810: NEG
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 2
50821: NEG
50822: PUSH
50823: LD_INT 1
50825: NEG
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 2
50833: NEG
50834: PUSH
50835: LD_INT 2
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 2
50845: NEG
50846: PUSH
50847: LD_INT 3
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 2
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 3
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 3
50878: PUSH
50879: LD_INT 1
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 3
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 3
50898: PUSH
50899: LD_INT 3
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 2
50908: PUSH
50909: LD_INT 3
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 2
50918: NEG
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 3
50929: NEG
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 3
50940: NEG
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 3
50952: NEG
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 3
50964: NEG
50965: PUSH
50966: LD_INT 3
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51005: LD_ADDR_VAR 0 42
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: LD_INT 2
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: LD_INT 2
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 2
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 2
51130: PUSH
51131: LD_INT 2
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: PUSH
51141: LD_INT 2
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: LD_INT 2
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 2
51171: NEG
51172: PUSH
51173: LD_INT 1
51175: NEG
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 2
51183: NEG
51184: PUSH
51185: LD_INT 2
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 2
51195: NEG
51196: PUSH
51197: LD_INT 3
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: LD_INT 3
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: LD_INT 3
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: LD_INT 2
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 3
51241: PUSH
51242: LD_INT 2
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 3
51251: PUSH
51252: LD_INT 3
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 2
51261: PUSH
51262: LD_INT 3
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: LD_INT 3
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: LD_INT 3
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: LD_INT 2
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 3
51302: NEG
51303: PUSH
51304: LD_INT 2
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 3
51314: NEG
51315: PUSH
51316: LD_INT 3
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51355: LD_ADDR_VAR 0 43
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 1
51436: NEG
51437: PUSH
51438: LD_INT 2
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: LD_INT 2
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 2
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 2
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: LD_INT 2
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: LD_INT 2
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 2
51521: NEG
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 2
51532: NEG
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: NEG
51545: PUSH
51546: LD_INT 3
51548: NEG
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: LD_INT 3
51559: NEG
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: LD_INT 2
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 2
51578: PUSH
51579: LD_INT 1
51581: NEG
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 3
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 3
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: LD_INT 3
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 3
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: LD_INT 2
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 2
51640: NEG
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 3
51651: NEG
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 3
51662: NEG
51663: PUSH
51664: LD_INT 1
51666: NEG
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51703: LD_ADDR_VAR 0 44
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: LD_INT 1
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: LD_INT 1
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: NEG
51785: PUSH
51786: LD_INT 2
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: LD_INT 1
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 2
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 2
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 2
51827: PUSH
51828: LD_INT 2
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 1
51837: PUSH
51838: LD_INT 2
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 2
51858: NEG
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 2
51869: NEG
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 2
51881: NEG
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 2
51893: NEG
51894: PUSH
51895: LD_INT 3
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 2
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 3
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 3
51926: PUSH
51927: LD_INT 1
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 3
51936: PUSH
51937: LD_INT 2
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 3
51946: PUSH
51947: LD_INT 3
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 2
51956: PUSH
51957: LD_INT 3
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 2
51966: NEG
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 3
51977: NEG
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 3
51988: NEG
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 3
52000: NEG
52001: PUSH
52002: LD_INT 2
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 3
52012: NEG
52013: PUSH
52014: LD_INT 3
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52053: LD_ADDR_VAR 0 45
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: LD_INT 2
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: LD_INT 2
52149: NEG
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 2
52178: PUSH
52179: LD_INT 2
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 0
52198: PUSH
52199: LD_INT 2
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 1
52208: NEG
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 2
52219: NEG
52220: PUSH
52221: LD_INT 1
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 2
52231: NEG
52232: PUSH
52233: LD_INT 2
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 2
52243: NEG
52244: PUSH
52245: LD_INT 3
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: LD_INT 3
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: LD_INT 3
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 3
52289: PUSH
52290: LD_INT 2
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 3
52299: PUSH
52300: LD_INT 3
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 2
52309: PUSH
52310: LD_INT 3
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: LD_INT 3
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: LD_INT 3
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: LD_INT 2
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 3
52350: NEG
52351: PUSH
52352: LD_INT 2
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 3
52362: NEG
52363: PUSH
52364: LD_INT 3
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52403: LD_ADDR_VAR 0 46
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 1
52461: NEG
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: LD_INT 2
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: LD_INT 2
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 2
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 2
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: LD_INT 2
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: LD_INT 2
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: LD_INT 1
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 2
52569: NEG
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: LD_INT 3
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 0
52604: PUSH
52605: LD_INT 3
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: LD_INT 2
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 2
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 3
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 3
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: LD_INT 3
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: LD_INT 3
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 1
52677: NEG
52678: PUSH
52679: LD_INT 2
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 2
52688: NEG
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 3
52699: NEG
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 3
52710: NEG
52711: PUSH
52712: LD_INT 1
52714: NEG
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52751: LD_ADDR_VAR 0 47
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: LD_INT 0
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: LD_INT 1
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: NEG
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: LD_INT 1
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: LD_INT 2
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: LD_INT 2
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 2
52866: NEG
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 2
52878: NEG
52879: PUSH
52880: LD_INT 2
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52902: LD_ADDR_VAR 0 48
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: LD_INT 2
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: LD_INT 2
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: LD_INT 1
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 2
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53049: LD_ADDR_VAR 0 49
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: LD_INT 0
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 1
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 2
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: LD_INT 2
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53193: LD_ADDR_VAR 0 50
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: LD_INT 1
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 2
53274: PUSH
53275: LD_INT 1
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 2
53284: PUSH
53285: LD_INT 2
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: LD_INT 2
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53337: LD_ADDR_VAR 0 51
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 0
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 0
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 1
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: LD_INT 2
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 2
53449: NEG
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 2
53460: NEG
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53484: LD_ADDR_VAR 0 52
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: LD_INT 1
53504: NEG
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 1
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: LD_INT 1
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: LD_INT 0
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 1
53565: NEG
53566: PUSH
53567: LD_INT 2
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: LD_INT 1
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 2
53588: NEG
53589: PUSH
53590: LD_INT 0
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 2
53599: NEG
53600: PUSH
53601: LD_INT 1
53603: NEG
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 2
53611: NEG
53612: PUSH
53613: LD_INT 2
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53635: LD_ADDR_VAR 0 53
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: LD_INT 1
53655: NEG
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 1
53704: NEG
53705: PUSH
53706: LD_INT 1
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: LD_INT 2
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: LD_INT 2
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 1
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 2
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 2
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 2
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: LD_INT 2
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 0
53790: PUSH
53791: LD_INT 2
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 1
53800: NEG
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 2
53811: NEG
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 2
53822: NEG
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: LD_INT 2
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53865: LD_ADDR_VAR 0 54
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: LD_INT 2
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: LD_INT 2
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 1
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 2
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: LD_INT 2
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: PUSH
54032: LD_INT 1
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 2
54041: NEG
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 2
54052: NEG
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 2
54064: NEG
54065: PUSH
54066: LD_INT 2
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54095: LD_ADDR_VAR 0 55
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: NEG
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 1
54176: NEG
54177: PUSH
54178: LD_INT 2
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: LD_INT 2
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 2
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 2
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 2
54230: PUSH
54231: LD_INT 2
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: LD_INT 2
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 2
54282: NEG
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 2
54294: NEG
54295: PUSH
54296: LD_INT 2
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54325: LD_ADDR_VAR 0 56
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: NEG
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: LD_INT 2
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: LD_INT 2
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: LD_INT 1
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 2
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 2
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 2
54460: PUSH
54461: LD_INT 2
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: LD_INT 2
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: LD_INT 2
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 2
54501: NEG
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 2
54512: NEG
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 2
54524: NEG
54525: PUSH
54526: LD_INT 2
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54555: LD_ADDR_VAR 0 57
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 1
54636: NEG
54637: PUSH
54638: LD_INT 2
54640: NEG
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: LD_INT 2
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: LD_INT 1
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 2
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 2
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 2
54690: PUSH
54691: LD_INT 2
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: LD_INT 2
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: LD_INT 2
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 1
54720: NEG
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 2
54731: NEG
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 2
54742: NEG
54743: PUSH
54744: LD_INT 1
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 2
54754: NEG
54755: PUSH
54756: LD_INT 2
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54785: LD_ADDR_VAR 0 58
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 1
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 1
54843: NEG
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: LD_INT 1
54858: NEG
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: LD_INT 2
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: LD_INT 2
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: LD_INT 1
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 2
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 2
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 2
54920: PUSH
54921: LD_INT 2
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: LD_INT 2
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 2
54961: NEG
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 2
54972: NEG
54973: PUSH
54974: LD_INT 1
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 2
54984: NEG
54985: PUSH
54986: LD_INT 2
54988: NEG
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55015: LD_ADDR_VAR 0 59
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55103: LD_ADDR_VAR 0 60
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55191: LD_ADDR_VAR 0 61
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55279: LD_ADDR_VAR 0 62
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: LD_INT 1
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55367: LD_ADDR_VAR 0 63
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: LD_INT 1
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: LD_INT 1
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 1
55425: NEG
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: LD_INT 1
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55455: LD_ADDR_VAR 0 64
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: LD_INT 1
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: ST_TO_ADDR
// end ; 1 :
55543: GO 61440
55545: LD_INT 1
55547: DOUBLE
55548: EQUAL
55549: IFTRUE 55553
55551: GO 58176
55553: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55554: LD_ADDR_VAR 0 11
55558: PUSH
55559: LD_INT 1
55561: NEG
55562: PUSH
55563: LD_INT 3
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: LD_INT 3
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: LD_INT 2
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: LIST
55597: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55598: LD_ADDR_VAR 0 12
55602: PUSH
55603: LD_INT 2
55605: PUSH
55606: LD_INT 1
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 3
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 3
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: LIST
55638: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55639: LD_ADDR_VAR 0 13
55643: PUSH
55644: LD_INT 3
55646: PUSH
55647: LD_INT 2
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 3
55656: PUSH
55657: LD_INT 3
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 2
55666: PUSH
55667: LD_INT 3
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: LIST
55678: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55679: LD_ADDR_VAR 0 14
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: LD_INT 3
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: LD_INT 3
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: LD_INT 2
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: LIST
55719: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55720: LD_ADDR_VAR 0 15
55724: PUSH
55725: LD_INT 2
55727: NEG
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 3
55738: NEG
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 3
55749: NEG
55750: PUSH
55751: LD_INT 1
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: LIST
55763: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55764: LD_ADDR_VAR 0 16
55768: PUSH
55769: LD_INT 2
55771: NEG
55772: PUSH
55773: LD_INT 3
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 3
55783: NEG
55784: PUSH
55785: LD_INT 2
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 3
55795: NEG
55796: PUSH
55797: LD_INT 3
55799: NEG
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: LIST
55809: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55810: LD_ADDR_VAR 0 17
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: LD_INT 3
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: LD_INT 3
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: LD_INT 2
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: LIST
55853: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55854: LD_ADDR_VAR 0 18
55858: PUSH
55859: LD_INT 2
55861: PUSH
55862: LD_INT 1
55864: NEG
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 3
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 3
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: LIST
55894: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55895: LD_ADDR_VAR 0 19
55899: PUSH
55900: LD_INT 3
55902: PUSH
55903: LD_INT 2
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 3
55912: PUSH
55913: LD_INT 3
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 2
55922: PUSH
55923: LD_INT 3
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: LIST
55934: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55935: LD_ADDR_VAR 0 20
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: LD_INT 3
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: LD_INT 3
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: LIST
55975: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55976: LD_ADDR_VAR 0 21
55980: PUSH
55981: LD_INT 2
55983: NEG
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 3
55994: NEG
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 3
56005: NEG
56006: PUSH
56007: LD_INT 1
56009: NEG
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: LIST
56019: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56020: LD_ADDR_VAR 0 22
56024: PUSH
56025: LD_INT 2
56027: NEG
56028: PUSH
56029: LD_INT 3
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 3
56039: NEG
56040: PUSH
56041: LD_INT 2
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 3
56051: NEG
56052: PUSH
56053: LD_INT 3
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: LIST
56065: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56066: LD_ADDR_VAR 0 23
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: LD_INT 3
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: LD_INT 4
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: LD_INT 3
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: LIST
56109: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56110: LD_ADDR_VAR 0 24
56114: PUSH
56115: LD_INT 3
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 3
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 4
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: LIST
56150: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56151: LD_ADDR_VAR 0 25
56155: PUSH
56156: LD_INT 3
56158: PUSH
56159: LD_INT 3
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 4
56168: PUSH
56169: LD_INT 3
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 3
56178: PUSH
56179: LD_INT 4
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: LIST
56190: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56191: LD_ADDR_VAR 0 26
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 3
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: PUSH
56209: LD_INT 4
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: LD_INT 3
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: LIST
56231: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56232: LD_ADDR_VAR 0 27
56236: PUSH
56237: LD_INT 3
56239: NEG
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 3
56250: NEG
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 4
56261: NEG
56262: PUSH
56263: LD_INT 1
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: LIST
56275: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56276: LD_ADDR_VAR 0 28
56280: PUSH
56281: LD_INT 3
56283: NEG
56284: PUSH
56285: LD_INT 3
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 3
56295: NEG
56296: PUSH
56297: LD_INT 4
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 4
56307: NEG
56308: PUSH
56309: LD_INT 3
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: LIST
56321: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56322: LD_ADDR_VAR 0 29
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: LD_INT 3
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: LD_INT 3
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: LD_INT 2
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: LD_INT 4
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: LD_INT 4
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: LD_INT 3
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 1
56397: NEG
56398: PUSH
56399: LD_INT 5
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: LD_INT 5
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 1
56420: PUSH
56421: LD_INT 4
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: LD_INT 6
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: LD_INT 6
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: LD_INT 5
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56477: LD_ADDR_VAR 0 30
56481: PUSH
56482: LD_INT 2
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 3
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 3
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 3
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 4
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 4
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 4
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 5
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 5
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 5
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 6
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 6
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56620: LD_ADDR_VAR 0 31
56624: PUSH
56625: LD_INT 3
56627: PUSH
56628: LD_INT 2
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 3
56637: PUSH
56638: LD_INT 3
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 2
56647: PUSH
56648: LD_INT 3
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 4
56657: PUSH
56658: LD_INT 3
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 4
56667: PUSH
56668: LD_INT 4
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 3
56677: PUSH
56678: LD_INT 4
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 5
56687: PUSH
56688: LD_INT 4
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 5
56697: PUSH
56698: LD_INT 5
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 4
56707: PUSH
56708: LD_INT 5
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 6
56717: PUSH
56718: LD_INT 5
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 6
56727: PUSH
56728: LD_INT 6
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 5
56737: PUSH
56738: LD_INT 6
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56759: LD_ADDR_VAR 0 32
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: LD_INT 3
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: LD_INT 3
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: LD_INT 4
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: LD_INT 4
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: LD_INT 3
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: LD_INT 5
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 5
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: LD_INT 4
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: LD_INT 6
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: LD_INT 6
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: LD_INT 5
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56902: LD_ADDR_VAR 0 33
56906: PUSH
56907: LD_INT 2
56909: NEG
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 3
56920: NEG
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 3
56931: NEG
56932: PUSH
56933: LD_INT 1
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 3
56943: NEG
56944: PUSH
56945: LD_INT 1
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 4
56954: NEG
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 4
56965: NEG
56966: PUSH
56967: LD_INT 1
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 4
56977: NEG
56978: PUSH
56979: LD_INT 1
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 5
56988: NEG
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 5
56999: NEG
57000: PUSH
57001: LD_INT 1
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 5
57011: NEG
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 6
57022: NEG
57023: PUSH
57024: LD_INT 0
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 6
57033: NEG
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57057: LD_ADDR_VAR 0 34
57061: PUSH
57062: LD_INT 2
57064: NEG
57065: PUSH
57066: LD_INT 3
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 3
57076: NEG
57077: PUSH
57078: LD_INT 2
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 3
57088: NEG
57089: PUSH
57090: LD_INT 3
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 3
57100: NEG
57101: PUSH
57102: LD_INT 4
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 4
57112: NEG
57113: PUSH
57114: LD_INT 3
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 4
57124: NEG
57125: PUSH
57126: LD_INT 4
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 4
57136: NEG
57137: PUSH
57138: LD_INT 5
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 5
57148: NEG
57149: PUSH
57150: LD_INT 4
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 5
57160: NEG
57161: PUSH
57162: LD_INT 5
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 5
57172: NEG
57173: PUSH
57174: LD_INT 6
57176: NEG
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 6
57184: NEG
57185: PUSH
57186: LD_INT 5
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 6
57196: NEG
57197: PUSH
57198: LD_INT 6
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57220: LD_ADDR_VAR 0 41
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: LD_INT 2
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: LD_INT 3
57242: NEG
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: LD_INT 2
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: LIST
57263: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57264: LD_ADDR_VAR 0 42
57268: PUSH
57269: LD_INT 2
57271: PUSH
57272: LD_INT 0
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 2
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 3
57292: PUSH
57293: LD_INT 1
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: LIST
57304: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57305: LD_ADDR_VAR 0 43
57309: PUSH
57310: LD_INT 2
57312: PUSH
57313: LD_INT 2
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 3
57322: PUSH
57323: LD_INT 2
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: LD_INT 3
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: LIST
57344: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57345: LD_ADDR_VAR 0 44
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: LD_INT 2
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: LD_INT 3
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: LD_INT 2
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: LIST
57385: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57386: LD_ADDR_VAR 0 45
57390: PUSH
57391: LD_INT 2
57393: NEG
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 3
57415: NEG
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: LIST
57429: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57430: LD_ADDR_VAR 0 46
57434: PUSH
57435: LD_INT 2
57437: NEG
57438: PUSH
57439: LD_INT 2
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 2
57449: NEG
57450: PUSH
57451: LD_INT 3
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 3
57461: NEG
57462: PUSH
57463: LD_INT 2
57465: NEG
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: LIST
57475: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57476: LD_ADDR_VAR 0 47
57480: PUSH
57481: LD_INT 2
57483: NEG
57484: PUSH
57485: LD_INT 3
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: LD_INT 3
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57509: LD_ADDR_VAR 0 48
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: LD_INT 2
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 2
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57540: LD_ADDR_VAR 0 49
57544: PUSH
57545: LD_INT 3
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 3
57557: PUSH
57558: LD_INT 2
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57569: LD_ADDR_VAR 0 50
57573: PUSH
57574: LD_INT 2
57576: PUSH
57577: LD_INT 3
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: LD_INT 3
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57598: LD_ADDR_VAR 0 51
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: LD_INT 2
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 2
57616: NEG
57617: PUSH
57618: LD_INT 1
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57629: LD_ADDR_VAR 0 52
57633: PUSH
57634: LD_INT 3
57636: NEG
57637: PUSH
57638: LD_INT 1
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 3
57648: NEG
57649: PUSH
57650: LD_INT 2
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57662: LD_ADDR_VAR 0 53
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: LD_INT 3
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: LD_INT 3
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: LD_INT 2
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: LIST
57705: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57706: LD_ADDR_VAR 0 54
57710: PUSH
57711: LD_INT 2
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 3
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 3
57734: PUSH
57735: LD_INT 1
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: LIST
57746: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57747: LD_ADDR_VAR 0 55
57751: PUSH
57752: LD_INT 3
57754: PUSH
57755: LD_INT 2
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 3
57764: PUSH
57765: LD_INT 3
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 2
57774: PUSH
57775: LD_INT 3
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: LIST
57786: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57787: LD_ADDR_VAR 0 56
57791: PUSH
57792: LD_INT 1
57794: PUSH
57795: LD_INT 3
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 0
57804: PUSH
57805: LD_INT 3
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 1
57814: NEG
57815: PUSH
57816: LD_INT 2
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: LIST
57827: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57828: LD_ADDR_VAR 0 57
57832: PUSH
57833: LD_INT 2
57835: NEG
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 3
57846: NEG
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 3
57857: NEG
57858: PUSH
57859: LD_INT 1
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: LIST
57871: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57872: LD_ADDR_VAR 0 58
57876: PUSH
57877: LD_INT 2
57879: NEG
57880: PUSH
57881: LD_INT 3
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 3
57891: NEG
57892: PUSH
57893: LD_INT 2
57895: NEG
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 3
57903: NEG
57904: PUSH
57905: LD_INT 3
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: LIST
57917: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57918: LD_ADDR_VAR 0 59
57922: PUSH
57923: LD_INT 1
57925: NEG
57926: PUSH
57927: LD_INT 2
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 0
57937: PUSH
57938: LD_INT 2
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: LIST
57961: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57962: LD_ADDR_VAR 0 60
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: LD_INT 1
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 2
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 2
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: LIST
58002: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58003: LD_ADDR_VAR 0 61
58007: PUSH
58008: LD_INT 2
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 2
58020: PUSH
58021: LD_INT 2
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: LIST
58042: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58043: LD_ADDR_VAR 0 62
58047: PUSH
58048: LD_INT 1
58050: PUSH
58051: LD_INT 2
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 0
58060: PUSH
58061: LD_INT 2
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: NEG
58071: PUSH
58072: LD_INT 1
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: LIST
58083: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58084: LD_ADDR_VAR 0 63
58088: PUSH
58089: LD_INT 1
58091: NEG
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 2
58113: NEG
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: LIST
58127: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58128: LD_ADDR_VAR 0 64
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: LD_INT 2
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 2
58147: NEG
58148: PUSH
58149: LD_INT 1
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 2
58159: NEG
58160: PUSH
58161: LD_INT 2
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: LIST
58173: ST_TO_ADDR
// end ; 2 :
58174: GO 61440
58176: LD_INT 2
58178: DOUBLE
58179: EQUAL
58180: IFTRUE 58184
58182: GO 61439
58184: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58185: LD_ADDR_VAR 0 29
58189: PUSH
58190: LD_INT 4
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 4
58202: PUSH
58203: LD_INT 1
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 5
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 5
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 4
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 3
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 3
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 3
58264: PUSH
58265: LD_INT 2
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 5
58275: PUSH
58276: LD_INT 2
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 3
58285: PUSH
58286: LD_INT 3
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 3
58295: PUSH
58296: LD_INT 2
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 4
58305: PUSH
58306: LD_INT 3
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 4
58315: PUSH
58316: LD_INT 4
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 3
58325: PUSH
58326: LD_INT 4
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 2
58335: PUSH
58336: LD_INT 3
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 4
58355: PUSH
58356: LD_INT 2
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 2
58365: PUSH
58366: LD_INT 4
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: LD_INT 4
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: LD_INT 3
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: LD_INT 4
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 1
58405: PUSH
58406: LD_INT 5
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: LD_INT 5
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: NEG
58426: PUSH
58427: LD_INT 4
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: LD_INT 3
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 2
58447: PUSH
58448: LD_INT 5
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 2
58457: NEG
58458: PUSH
58459: LD_INT 3
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 3
58468: NEG
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 3
58479: NEG
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 2
58491: NEG
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 2
58502: NEG
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 3
58513: NEG
58514: PUSH
58515: LD_INT 1
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 4
58524: NEG
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 4
58535: NEG
58536: PUSH
58537: LD_INT 1
58539: NEG
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 4
58547: NEG
58548: PUSH
58549: LD_INT 2
58551: NEG
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 2
58559: NEG
58560: PUSH
58561: LD_INT 2
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 4
58570: NEG
58571: PUSH
58572: LD_INT 4
58574: NEG
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 4
58582: NEG
58583: PUSH
58584: LD_INT 5
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 3
58594: NEG
58595: PUSH
58596: LD_INT 4
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 3
58606: NEG
58607: PUSH
58608: LD_INT 3
58610: NEG
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 4
58618: NEG
58619: PUSH
58620: LD_INT 3
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 5
58630: NEG
58631: PUSH
58632: LD_INT 4
58634: NEG
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 5
58642: NEG
58643: PUSH
58644: LD_INT 5
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 3
58654: NEG
58655: PUSH
58656: LD_INT 5
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 5
58666: NEG
58667: PUSH
58668: LD_INT 3
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58723: LD_ADDR_VAR 0 30
58727: PUSH
58728: LD_INT 4
58730: PUSH
58731: LD_INT 4
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 4
58740: PUSH
58741: LD_INT 3
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 5
58750: PUSH
58751: LD_INT 4
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 5
58760: PUSH
58761: LD_INT 5
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 4
58770: PUSH
58771: LD_INT 5
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 3
58780: PUSH
58781: LD_INT 4
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 3
58790: PUSH
58791: LD_INT 3
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 5
58800: PUSH
58801: LD_INT 3
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 3
58810: PUSH
58811: LD_INT 5
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: LD_INT 3
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: LD_INT 2
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: LD_INT 3
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: LD_INT 4
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: LD_INT 4
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: NEG
58871: PUSH
58872: LD_INT 3
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: LD_INT 2
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 2
58892: PUSH
58893: LD_INT 4
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 2
58902: NEG
58903: PUSH
58904: LD_INT 2
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 4
58913: NEG
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 4
58924: NEG
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 3
58936: NEG
58937: PUSH
58938: LD_INT 0
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 3
58947: NEG
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 4
58958: NEG
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 5
58969: NEG
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 5
58980: NEG
58981: PUSH
58982: LD_INT 1
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 5
58992: NEG
58993: PUSH
58994: LD_INT 2
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 3
59004: NEG
59005: PUSH
59006: LD_INT 2
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 3
59015: NEG
59016: PUSH
59017: LD_INT 3
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 3
59027: NEG
59028: PUSH
59029: LD_INT 4
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 2
59039: NEG
59040: PUSH
59041: LD_INT 3
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 2
59051: NEG
59052: PUSH
59053: LD_INT 2
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 3
59063: NEG
59064: PUSH
59065: LD_INT 2
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 4
59075: NEG
59076: PUSH
59077: LD_INT 3
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 4
59087: NEG
59088: PUSH
59089: LD_INT 4
59091: NEG
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 2
59099: NEG
59100: PUSH
59101: LD_INT 4
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 4
59111: NEG
59112: PUSH
59113: LD_INT 2
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 0
59123: PUSH
59124: LD_INT 4
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: LD_INT 5
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: PUSH
59146: LD_INT 4
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 1
59156: PUSH
59157: LD_INT 3
59159: NEG
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: LD_INT 3
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: LD_INT 4
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 1
59190: NEG
59191: PUSH
59192: LD_INT 5
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 2
59202: PUSH
59203: LD_INT 3
59205: NEG
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 2
59213: NEG
59214: PUSH
59215: LD_INT 5
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59270: LD_ADDR_VAR 0 31
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: LD_INT 4
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 0
59287: PUSH
59288: LD_INT 3
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: LD_INT 4
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: LD_INT 5
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: LD_INT 5
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: LD_INT 4
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 1
59338: NEG
59339: PUSH
59340: LD_INT 3
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 2
59349: PUSH
59350: LD_INT 5
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 2
59359: NEG
59360: PUSH
59361: LD_INT 3
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 3
59370: NEG
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 3
59381: NEG
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 2
59393: NEG
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 2
59404: NEG
59405: PUSH
59406: LD_INT 1
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 3
59415: NEG
59416: PUSH
59417: LD_INT 1
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 4
59426: NEG
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 4
59437: NEG
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 4
59449: NEG
59450: PUSH
59451: LD_INT 2
59453: NEG
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 2
59461: NEG
59462: PUSH
59463: LD_INT 2
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 4
59472: NEG
59473: PUSH
59474: LD_INT 4
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 4
59484: NEG
59485: PUSH
59486: LD_INT 5
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 3
59496: NEG
59497: PUSH
59498: LD_INT 4
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 3
59508: NEG
59509: PUSH
59510: LD_INT 3
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 4
59520: NEG
59521: PUSH
59522: LD_INT 3
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 5
59532: NEG
59533: PUSH
59534: LD_INT 4
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 5
59544: NEG
59545: PUSH
59546: LD_INT 5
59548: NEG
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 3
59556: NEG
59557: PUSH
59558: LD_INT 5
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 5
59568: NEG
59569: PUSH
59570: LD_INT 3
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: LD_INT 3
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 0
59591: PUSH
59592: LD_INT 4
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 1
59602: PUSH
59603: LD_INT 3
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: LD_INT 2
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 0
59624: PUSH
59625: LD_INT 2
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: LD_INT 3
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: NEG
59648: PUSH
59649: LD_INT 4
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 2
59659: PUSH
59660: LD_INT 2
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 2
59670: NEG
59671: PUSH
59672: LD_INT 4
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 4
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 4
59692: PUSH
59693: LD_INT 1
59695: NEG
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 5
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 5
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 4
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 3
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 3
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 3
59754: PUSH
59755: LD_INT 2
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 5
59765: PUSH
59766: LD_INT 2
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59820: LD_ADDR_VAR 0 32
59824: PUSH
59825: LD_INT 4
59827: NEG
59828: PUSH
59829: LD_INT 0
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 4
59838: NEG
59839: PUSH
59840: LD_INT 1
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 3
59850: NEG
59851: PUSH
59852: LD_INT 0
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 3
59861: NEG
59862: PUSH
59863: LD_INT 1
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 4
59872: NEG
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 5
59883: NEG
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 5
59894: NEG
59895: PUSH
59896: LD_INT 1
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 5
59906: NEG
59907: PUSH
59908: LD_INT 2
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 3
59918: NEG
59919: PUSH
59920: LD_INT 2
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 3
59929: NEG
59930: PUSH
59931: LD_INT 3
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 3
59941: NEG
59942: PUSH
59943: LD_INT 4
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 2
59953: NEG
59954: PUSH
59955: LD_INT 3
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 2
59965: NEG
59966: PUSH
59967: LD_INT 2
59969: NEG
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 3
59977: NEG
59978: PUSH
59979: LD_INT 2
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 4
59989: NEG
59990: PUSH
59991: LD_INT 3
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 4
60001: NEG
60002: PUSH
60003: LD_INT 4
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 2
60013: NEG
60014: PUSH
60015: LD_INT 4
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 4
60025: NEG
60026: PUSH
60027: LD_INT 2
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 0
60037: PUSH
60038: LD_INT 4
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: LD_INT 5
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 1
60059: PUSH
60060: LD_INT 4
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 1
60070: PUSH
60071: LD_INT 3
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: LD_INT 3
60084: NEG
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 1
60092: NEG
60093: PUSH
60094: LD_INT 4
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 1
60104: NEG
60105: PUSH
60106: LD_INT 5
60108: NEG
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 2
60116: PUSH
60117: LD_INT 3
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 2
60127: NEG
60128: PUSH
60129: LD_INT 5
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 3
60139: PUSH
60140: LD_INT 0
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 3
60149: PUSH
60150: LD_INT 1
60152: NEG
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 4
60160: PUSH
60161: LD_INT 0
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 4
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 3
60180: PUSH
60181: LD_INT 1
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 2
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 2
60200: PUSH
60201: LD_INT 1
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 2
60211: PUSH
60212: LD_INT 2
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 4
60222: PUSH
60223: LD_INT 2
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 4
60232: PUSH
60233: LD_INT 4
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 4
60242: PUSH
60243: LD_INT 3
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 5
60252: PUSH
60253: LD_INT 4
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 5
60262: PUSH
60263: LD_INT 5
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 4
60272: PUSH
60273: LD_INT 5
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 3
60282: PUSH
60283: LD_INT 4
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 3
60292: PUSH
60293: LD_INT 3
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 5
60302: PUSH
60303: LD_INT 3
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 3
60312: PUSH
60313: LD_INT 5
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60367: LD_ADDR_VAR 0 33
60371: PUSH
60372: LD_INT 4
60374: NEG
60375: PUSH
60376: LD_INT 4
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 4
60386: NEG
60387: PUSH
60388: LD_INT 5
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 3
60398: NEG
60399: PUSH
60400: LD_INT 4
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 3
60410: NEG
60411: PUSH
60412: LD_INT 3
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 4
60422: NEG
60423: PUSH
60424: LD_INT 3
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 5
60434: NEG
60435: PUSH
60436: LD_INT 4
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 5
60446: NEG
60447: PUSH
60448: LD_INT 5
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 3
60458: NEG
60459: PUSH
60460: LD_INT 5
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 5
60470: NEG
60471: PUSH
60472: LD_INT 3
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: LD_INT 3
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: LD_INT 4
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: LD_INT 3
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 1
60515: PUSH
60516: LD_INT 2
60518: NEG
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: LD_INT 2
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 1
60537: NEG
60538: PUSH
60539: LD_INT 3
60541: NEG
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: LD_INT 4
60553: NEG
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 2
60561: PUSH
60562: LD_INT 2
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 2
60572: NEG
60573: PUSH
60574: LD_INT 4
60576: NEG
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 4
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 4
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 5
60605: PUSH
60606: LD_INT 0
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 5
60615: PUSH
60616: LD_INT 1
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 4
60625: PUSH
60626: LD_INT 1
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 3
60635: PUSH
60636: LD_INT 0
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 3
60645: PUSH
60646: LD_INT 1
60648: NEG
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 3
60656: PUSH
60657: LD_INT 2
60659: NEG
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 5
60667: PUSH
60668: LD_INT 2
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 3
60677: PUSH
60678: LD_INT 3
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 3
60687: PUSH
60688: LD_INT 2
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 4
60697: PUSH
60698: LD_INT 3
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 4
60707: PUSH
60708: LD_INT 4
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 3
60717: PUSH
60718: LD_INT 4
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 2
60727: PUSH
60728: LD_INT 3
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 2
60737: PUSH
60738: LD_INT 2
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 4
60747: PUSH
60748: LD_INT 2
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 2
60757: PUSH
60758: LD_INT 4
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: LD_INT 4
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 0
60777: PUSH
60778: LD_INT 3
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 1
60787: PUSH
60788: LD_INT 4
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: LD_INT 5
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: LD_INT 5
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 1
60817: NEG
60818: PUSH
60819: LD_INT 4
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 1
60828: NEG
60829: PUSH
60830: LD_INT 3
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 2
60839: PUSH
60840: LD_INT 5
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 2
60849: NEG
60850: PUSH
60851: LD_INT 3
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60905: LD_ADDR_VAR 0 34
60909: PUSH
60910: LD_INT 0
60912: PUSH
60913: LD_INT 4
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: LD_INT 5
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 1
60934: PUSH
60935: LD_INT 4
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 1
60945: PUSH
60946: LD_INT 3
60948: NEG
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 0
60956: PUSH
60957: LD_INT 3
60959: NEG
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 1
60967: NEG
60968: PUSH
60969: LD_INT 4
60971: NEG
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 1
60979: NEG
60980: PUSH
60981: LD_INT 5
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 2
60991: PUSH
60992: LD_INT 3
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 2
61002: NEG
61003: PUSH
61004: LD_INT 5
61006: NEG
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 3
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 3
61024: PUSH
61025: LD_INT 1
61027: NEG
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 4
61035: PUSH
61036: LD_INT 0
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 4
61045: PUSH
61046: LD_INT 1
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 3
61055: PUSH
61056: LD_INT 1
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 2
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 2
61075: PUSH
61076: LD_INT 1
61078: NEG
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 2
61086: PUSH
61087: LD_INT 2
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 4
61097: PUSH
61098: LD_INT 2
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 4
61107: PUSH
61108: LD_INT 4
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 4
61117: PUSH
61118: LD_INT 3
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 5
61127: PUSH
61128: LD_INT 4
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 5
61137: PUSH
61138: LD_INT 5
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 4
61147: PUSH
61148: LD_INT 5
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 3
61157: PUSH
61158: LD_INT 4
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 3
61167: PUSH
61168: LD_INT 3
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 5
61177: PUSH
61178: LD_INT 3
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 3
61187: PUSH
61188: LD_INT 5
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 0
61197: PUSH
61198: LD_INT 3
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 0
61207: PUSH
61208: LD_INT 2
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 1
61217: PUSH
61218: LD_INT 3
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 1
61227: PUSH
61228: LD_INT 4
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 0
61237: PUSH
61238: LD_INT 4
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 1
61247: NEG
61248: PUSH
61249: LD_INT 3
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 1
61258: NEG
61259: PUSH
61260: LD_INT 2
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 2
61269: PUSH
61270: LD_INT 4
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 2
61279: NEG
61280: PUSH
61281: LD_INT 2
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 4
61290: NEG
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 4
61301: NEG
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 3
61313: NEG
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 3
61324: NEG
61325: PUSH
61326: LD_INT 1
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 4
61335: NEG
61336: PUSH
61337: LD_INT 1
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 5
61346: NEG
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 5
61357: NEG
61358: PUSH
61359: LD_INT 1
61361: NEG
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 5
61369: NEG
61370: PUSH
61371: LD_INT 2
61373: NEG
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 3
61381: NEG
61382: PUSH
61383: LD_INT 2
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: ST_TO_ADDR
// end ; end ;
61437: GO 61440
61439: POP
// case btype of b_depot , b_warehouse :
61440: LD_VAR 0 1
61444: PUSH
61445: LD_INT 0
61447: DOUBLE
61448: EQUAL
61449: IFTRUE 61459
61451: LD_INT 1
61453: DOUBLE
61454: EQUAL
61455: IFTRUE 61459
61457: GO 61660
61459: POP
// case nation of nation_american :
61460: LD_VAR 0 5
61464: PUSH
61465: LD_INT 1
61467: DOUBLE
61468: EQUAL
61469: IFTRUE 61473
61471: GO 61529
61473: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61474: LD_ADDR_VAR 0 9
61478: PUSH
61479: LD_VAR 0 11
61483: PUSH
61484: LD_VAR 0 12
61488: PUSH
61489: LD_VAR 0 13
61493: PUSH
61494: LD_VAR 0 14
61498: PUSH
61499: LD_VAR 0 15
61503: PUSH
61504: LD_VAR 0 16
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: PUSH
61517: LD_VAR 0 4
61521: PUSH
61522: LD_INT 1
61524: PLUS
61525: ARRAY
61526: ST_TO_ADDR
61527: GO 61658
61529: LD_INT 2
61531: DOUBLE
61532: EQUAL
61533: IFTRUE 61537
61535: GO 61593
61537: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61538: LD_ADDR_VAR 0 9
61542: PUSH
61543: LD_VAR 0 17
61547: PUSH
61548: LD_VAR 0 18
61552: PUSH
61553: LD_VAR 0 19
61557: PUSH
61558: LD_VAR 0 20
61562: PUSH
61563: LD_VAR 0 21
61567: PUSH
61568: LD_VAR 0 22
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: PUSH
61581: LD_VAR 0 4
61585: PUSH
61586: LD_INT 1
61588: PLUS
61589: ARRAY
61590: ST_TO_ADDR
61591: GO 61658
61593: LD_INT 3
61595: DOUBLE
61596: EQUAL
61597: IFTRUE 61601
61599: GO 61657
61601: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61602: LD_ADDR_VAR 0 9
61606: PUSH
61607: LD_VAR 0 23
61611: PUSH
61612: LD_VAR 0 24
61616: PUSH
61617: LD_VAR 0 25
61621: PUSH
61622: LD_VAR 0 26
61626: PUSH
61627: LD_VAR 0 27
61631: PUSH
61632: LD_VAR 0 28
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: PUSH
61645: LD_VAR 0 4
61649: PUSH
61650: LD_INT 1
61652: PLUS
61653: ARRAY
61654: ST_TO_ADDR
61655: GO 61658
61657: POP
61658: GO 62213
61660: LD_INT 2
61662: DOUBLE
61663: EQUAL
61664: IFTRUE 61674
61666: LD_INT 3
61668: DOUBLE
61669: EQUAL
61670: IFTRUE 61674
61672: GO 61730
61674: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61675: LD_ADDR_VAR 0 9
61679: PUSH
61680: LD_VAR 0 29
61684: PUSH
61685: LD_VAR 0 30
61689: PUSH
61690: LD_VAR 0 31
61694: PUSH
61695: LD_VAR 0 32
61699: PUSH
61700: LD_VAR 0 33
61704: PUSH
61705: LD_VAR 0 34
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: PUSH
61718: LD_VAR 0 4
61722: PUSH
61723: LD_INT 1
61725: PLUS
61726: ARRAY
61727: ST_TO_ADDR
61728: GO 62213
61730: LD_INT 16
61732: DOUBLE
61733: EQUAL
61734: IFTRUE 61792
61736: LD_INT 17
61738: DOUBLE
61739: EQUAL
61740: IFTRUE 61792
61742: LD_INT 18
61744: DOUBLE
61745: EQUAL
61746: IFTRUE 61792
61748: LD_INT 19
61750: DOUBLE
61751: EQUAL
61752: IFTRUE 61792
61754: LD_INT 22
61756: DOUBLE
61757: EQUAL
61758: IFTRUE 61792
61760: LD_INT 20
61762: DOUBLE
61763: EQUAL
61764: IFTRUE 61792
61766: LD_INT 21
61768: DOUBLE
61769: EQUAL
61770: IFTRUE 61792
61772: LD_INT 23
61774: DOUBLE
61775: EQUAL
61776: IFTRUE 61792
61778: LD_INT 24
61780: DOUBLE
61781: EQUAL
61782: IFTRUE 61792
61784: LD_INT 25
61786: DOUBLE
61787: EQUAL
61788: IFTRUE 61792
61790: GO 61848
61792: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61793: LD_ADDR_VAR 0 9
61797: PUSH
61798: LD_VAR 0 35
61802: PUSH
61803: LD_VAR 0 36
61807: PUSH
61808: LD_VAR 0 37
61812: PUSH
61813: LD_VAR 0 38
61817: PUSH
61818: LD_VAR 0 39
61822: PUSH
61823: LD_VAR 0 40
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: PUSH
61836: LD_VAR 0 4
61840: PUSH
61841: LD_INT 1
61843: PLUS
61844: ARRAY
61845: ST_TO_ADDR
61846: GO 62213
61848: LD_INT 6
61850: DOUBLE
61851: EQUAL
61852: IFTRUE 61904
61854: LD_INT 7
61856: DOUBLE
61857: EQUAL
61858: IFTRUE 61904
61860: LD_INT 8
61862: DOUBLE
61863: EQUAL
61864: IFTRUE 61904
61866: LD_INT 13
61868: DOUBLE
61869: EQUAL
61870: IFTRUE 61904
61872: LD_INT 12
61874: DOUBLE
61875: EQUAL
61876: IFTRUE 61904
61878: LD_INT 15
61880: DOUBLE
61881: EQUAL
61882: IFTRUE 61904
61884: LD_INT 11
61886: DOUBLE
61887: EQUAL
61888: IFTRUE 61904
61890: LD_INT 14
61892: DOUBLE
61893: EQUAL
61894: IFTRUE 61904
61896: LD_INT 10
61898: DOUBLE
61899: EQUAL
61900: IFTRUE 61904
61902: GO 61960
61904: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61905: LD_ADDR_VAR 0 9
61909: PUSH
61910: LD_VAR 0 41
61914: PUSH
61915: LD_VAR 0 42
61919: PUSH
61920: LD_VAR 0 43
61924: PUSH
61925: LD_VAR 0 44
61929: PUSH
61930: LD_VAR 0 45
61934: PUSH
61935: LD_VAR 0 46
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: PUSH
61948: LD_VAR 0 4
61952: PUSH
61953: LD_INT 1
61955: PLUS
61956: ARRAY
61957: ST_TO_ADDR
61958: GO 62213
61960: LD_INT 36
61962: DOUBLE
61963: EQUAL
61964: IFTRUE 61968
61966: GO 62024
61968: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61969: LD_ADDR_VAR 0 9
61973: PUSH
61974: LD_VAR 0 47
61978: PUSH
61979: LD_VAR 0 48
61983: PUSH
61984: LD_VAR 0 49
61988: PUSH
61989: LD_VAR 0 50
61993: PUSH
61994: LD_VAR 0 51
61998: PUSH
61999: LD_VAR 0 52
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: PUSH
62012: LD_VAR 0 4
62016: PUSH
62017: LD_INT 1
62019: PLUS
62020: ARRAY
62021: ST_TO_ADDR
62022: GO 62213
62024: LD_INT 4
62026: DOUBLE
62027: EQUAL
62028: IFTRUE 62050
62030: LD_INT 5
62032: DOUBLE
62033: EQUAL
62034: IFTRUE 62050
62036: LD_INT 34
62038: DOUBLE
62039: EQUAL
62040: IFTRUE 62050
62042: LD_INT 37
62044: DOUBLE
62045: EQUAL
62046: IFTRUE 62050
62048: GO 62106
62050: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62051: LD_ADDR_VAR 0 9
62055: PUSH
62056: LD_VAR 0 53
62060: PUSH
62061: LD_VAR 0 54
62065: PUSH
62066: LD_VAR 0 55
62070: PUSH
62071: LD_VAR 0 56
62075: PUSH
62076: LD_VAR 0 57
62080: PUSH
62081: LD_VAR 0 58
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: PUSH
62094: LD_VAR 0 4
62098: PUSH
62099: LD_INT 1
62101: PLUS
62102: ARRAY
62103: ST_TO_ADDR
62104: GO 62213
62106: LD_INT 31
62108: DOUBLE
62109: EQUAL
62110: IFTRUE 62156
62112: LD_INT 32
62114: DOUBLE
62115: EQUAL
62116: IFTRUE 62156
62118: LD_INT 33
62120: DOUBLE
62121: EQUAL
62122: IFTRUE 62156
62124: LD_INT 27
62126: DOUBLE
62127: EQUAL
62128: IFTRUE 62156
62130: LD_INT 26
62132: DOUBLE
62133: EQUAL
62134: IFTRUE 62156
62136: LD_INT 28
62138: DOUBLE
62139: EQUAL
62140: IFTRUE 62156
62142: LD_INT 29
62144: DOUBLE
62145: EQUAL
62146: IFTRUE 62156
62148: LD_INT 30
62150: DOUBLE
62151: EQUAL
62152: IFTRUE 62156
62154: GO 62212
62156: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62157: LD_ADDR_VAR 0 9
62161: PUSH
62162: LD_VAR 0 59
62166: PUSH
62167: LD_VAR 0 60
62171: PUSH
62172: LD_VAR 0 61
62176: PUSH
62177: LD_VAR 0 62
62181: PUSH
62182: LD_VAR 0 63
62186: PUSH
62187: LD_VAR 0 64
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: PUSH
62200: LD_VAR 0 4
62204: PUSH
62205: LD_INT 1
62207: PLUS
62208: ARRAY
62209: ST_TO_ADDR
62210: GO 62213
62212: POP
// temp_list2 = [ ] ;
62213: LD_ADDR_VAR 0 10
62217: PUSH
62218: EMPTY
62219: ST_TO_ADDR
// for i in temp_list do
62220: LD_ADDR_VAR 0 8
62224: PUSH
62225: LD_VAR 0 9
62229: PUSH
62230: FOR_IN
62231: IFFALSE 62283
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62233: LD_ADDR_VAR 0 10
62237: PUSH
62238: LD_VAR 0 10
62242: PUSH
62243: LD_VAR 0 8
62247: PUSH
62248: LD_INT 1
62250: ARRAY
62251: PUSH
62252: LD_VAR 0 2
62256: PLUS
62257: PUSH
62258: LD_VAR 0 8
62262: PUSH
62263: LD_INT 2
62265: ARRAY
62266: PUSH
62267: LD_VAR 0 3
62271: PLUS
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: EMPTY
62278: LIST
62279: ADD
62280: ST_TO_ADDR
62281: GO 62230
62283: POP
62284: POP
// result = temp_list2 ;
62285: LD_ADDR_VAR 0 7
62289: PUSH
62290: LD_VAR 0 10
62294: ST_TO_ADDR
// end ;
62295: LD_VAR 0 7
62299: RET
// export function EnemyInRange ( unit , dist ) ; begin
62300: LD_INT 0
62302: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62303: LD_ADDR_VAR 0 3
62307: PUSH
62308: LD_VAR 0 1
62312: PPUSH
62313: CALL_OW 255
62317: PPUSH
62318: LD_VAR 0 1
62322: PPUSH
62323: CALL_OW 250
62327: PPUSH
62328: LD_VAR 0 1
62332: PPUSH
62333: CALL_OW 251
62337: PPUSH
62338: LD_VAR 0 2
62342: PPUSH
62343: CALL 36101 0 4
62347: PUSH
62348: LD_INT 4
62350: ARRAY
62351: ST_TO_ADDR
// end ;
62352: LD_VAR 0 3
62356: RET
// export function PlayerSeeMe ( unit ) ; begin
62357: LD_INT 0
62359: PPUSH
// result := See ( your_side , unit ) ;
62360: LD_ADDR_VAR 0 2
62364: PUSH
62365: LD_OWVAR 2
62369: PPUSH
62370: LD_VAR 0 1
62374: PPUSH
62375: CALL_OW 292
62379: ST_TO_ADDR
// end ;
62380: LD_VAR 0 2
62384: RET
// export function ReverseDir ( unit ) ; begin
62385: LD_INT 0
62387: PPUSH
// if not unit then
62388: LD_VAR 0 1
62392: NOT
62393: IFFALSE 62397
// exit ;
62395: GO 62420
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62397: LD_ADDR_VAR 0 2
62401: PUSH
62402: LD_VAR 0 1
62406: PPUSH
62407: CALL_OW 254
62411: PUSH
62412: LD_INT 3
62414: PLUS
62415: PUSH
62416: LD_INT 6
62418: MOD
62419: ST_TO_ADDR
// end ;
62420: LD_VAR 0 2
62424: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62425: LD_INT 0
62427: PPUSH
62428: PPUSH
62429: PPUSH
62430: PPUSH
62431: PPUSH
// if not hexes then
62432: LD_VAR 0 2
62436: NOT
62437: IFFALSE 62441
// exit ;
62439: GO 62589
// dist := 9999 ;
62441: LD_ADDR_VAR 0 5
62445: PUSH
62446: LD_INT 9999
62448: ST_TO_ADDR
// for i = 1 to hexes do
62449: LD_ADDR_VAR 0 4
62453: PUSH
62454: DOUBLE
62455: LD_INT 1
62457: DEC
62458: ST_TO_ADDR
62459: LD_VAR 0 2
62463: PUSH
62464: FOR_TO
62465: IFFALSE 62577
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62467: LD_VAR 0 1
62471: PPUSH
62472: LD_VAR 0 2
62476: PUSH
62477: LD_VAR 0 4
62481: ARRAY
62482: PUSH
62483: LD_INT 1
62485: ARRAY
62486: PPUSH
62487: LD_VAR 0 2
62491: PUSH
62492: LD_VAR 0 4
62496: ARRAY
62497: PUSH
62498: LD_INT 2
62500: ARRAY
62501: PPUSH
62502: CALL_OW 297
62506: PUSH
62507: LD_VAR 0 5
62511: LESS
62512: IFFALSE 62575
// begin hex := hexes [ i ] ;
62514: LD_ADDR_VAR 0 7
62518: PUSH
62519: LD_VAR 0 2
62523: PUSH
62524: LD_VAR 0 4
62528: ARRAY
62529: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62530: LD_ADDR_VAR 0 5
62534: PUSH
62535: LD_VAR 0 1
62539: PPUSH
62540: LD_VAR 0 2
62544: PUSH
62545: LD_VAR 0 4
62549: ARRAY
62550: PUSH
62551: LD_INT 1
62553: ARRAY
62554: PPUSH
62555: LD_VAR 0 2
62559: PUSH
62560: LD_VAR 0 4
62564: ARRAY
62565: PUSH
62566: LD_INT 2
62568: ARRAY
62569: PPUSH
62570: CALL_OW 297
62574: ST_TO_ADDR
// end ; end ;
62575: GO 62464
62577: POP
62578: POP
// result := hex ;
62579: LD_ADDR_VAR 0 3
62583: PUSH
62584: LD_VAR 0 7
62588: ST_TO_ADDR
// end ;
62589: LD_VAR 0 3
62593: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62594: LD_INT 0
62596: PPUSH
62597: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62598: LD_VAR 0 1
62602: NOT
62603: PUSH
62604: LD_VAR 0 1
62608: PUSH
62609: LD_INT 21
62611: PUSH
62612: LD_INT 2
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 23
62621: PUSH
62622: LD_INT 2
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PPUSH
62633: CALL_OW 69
62637: IN
62638: NOT
62639: OR
62640: IFFALSE 62644
// exit ;
62642: GO 62691
// for i = 1 to 3 do
62644: LD_ADDR_VAR 0 3
62648: PUSH
62649: DOUBLE
62650: LD_INT 1
62652: DEC
62653: ST_TO_ADDR
62654: LD_INT 3
62656: PUSH
62657: FOR_TO
62658: IFFALSE 62689
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62660: LD_VAR 0 1
62664: PPUSH
62665: CALL_OW 250
62669: PPUSH
62670: LD_VAR 0 1
62674: PPUSH
62675: CALL_OW 251
62679: PPUSH
62680: LD_INT 1
62682: PPUSH
62683: CALL_OW 453
62687: GO 62657
62689: POP
62690: POP
// end ;
62691: LD_VAR 0 2
62695: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62696: LD_INT 0
62698: PPUSH
62699: PPUSH
62700: PPUSH
62701: PPUSH
62702: PPUSH
62703: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62704: LD_VAR 0 1
62708: NOT
62709: PUSH
62710: LD_VAR 0 2
62714: NOT
62715: OR
62716: PUSH
62717: LD_VAR 0 1
62721: PPUSH
62722: CALL_OW 314
62726: OR
62727: IFFALSE 62731
// exit ;
62729: GO 63172
// x := GetX ( enemy_unit ) ;
62731: LD_ADDR_VAR 0 7
62735: PUSH
62736: LD_VAR 0 2
62740: PPUSH
62741: CALL_OW 250
62745: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62746: LD_ADDR_VAR 0 8
62750: PUSH
62751: LD_VAR 0 2
62755: PPUSH
62756: CALL_OW 251
62760: ST_TO_ADDR
// if not x or not y then
62761: LD_VAR 0 7
62765: NOT
62766: PUSH
62767: LD_VAR 0 8
62771: NOT
62772: OR
62773: IFFALSE 62777
// exit ;
62775: GO 63172
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62777: LD_ADDR_VAR 0 6
62781: PUSH
62782: LD_VAR 0 7
62786: PPUSH
62787: LD_INT 0
62789: PPUSH
62790: LD_INT 4
62792: PPUSH
62793: CALL_OW 272
62797: PUSH
62798: LD_VAR 0 8
62802: PPUSH
62803: LD_INT 0
62805: PPUSH
62806: LD_INT 4
62808: PPUSH
62809: CALL_OW 273
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_VAR 0 7
62822: PPUSH
62823: LD_INT 1
62825: PPUSH
62826: LD_INT 4
62828: PPUSH
62829: CALL_OW 272
62833: PUSH
62834: LD_VAR 0 8
62838: PPUSH
62839: LD_INT 1
62841: PPUSH
62842: LD_INT 4
62844: PPUSH
62845: CALL_OW 273
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_VAR 0 7
62858: PPUSH
62859: LD_INT 2
62861: PPUSH
62862: LD_INT 4
62864: PPUSH
62865: CALL_OW 272
62869: PUSH
62870: LD_VAR 0 8
62874: PPUSH
62875: LD_INT 2
62877: PPUSH
62878: LD_INT 4
62880: PPUSH
62881: CALL_OW 273
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_VAR 0 7
62894: PPUSH
62895: LD_INT 3
62897: PPUSH
62898: LD_INT 4
62900: PPUSH
62901: CALL_OW 272
62905: PUSH
62906: LD_VAR 0 8
62910: PPUSH
62911: LD_INT 3
62913: PPUSH
62914: LD_INT 4
62916: PPUSH
62917: CALL_OW 273
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_VAR 0 7
62930: PPUSH
62931: LD_INT 4
62933: PPUSH
62934: LD_INT 4
62936: PPUSH
62937: CALL_OW 272
62941: PUSH
62942: LD_VAR 0 8
62946: PPUSH
62947: LD_INT 4
62949: PPUSH
62950: LD_INT 4
62952: PPUSH
62953: CALL_OW 273
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_VAR 0 7
62966: PPUSH
62967: LD_INT 5
62969: PPUSH
62970: LD_INT 4
62972: PPUSH
62973: CALL_OW 272
62977: PUSH
62978: LD_VAR 0 8
62982: PPUSH
62983: LD_INT 5
62985: PPUSH
62986: LD_INT 4
62988: PPUSH
62989: CALL_OW 273
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: ST_TO_ADDR
// for i = tmp downto 1 do
63006: LD_ADDR_VAR 0 4
63010: PUSH
63011: DOUBLE
63012: LD_VAR 0 6
63016: INC
63017: ST_TO_ADDR
63018: LD_INT 1
63020: PUSH
63021: FOR_DOWNTO
63022: IFFALSE 63123
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63024: LD_VAR 0 6
63028: PUSH
63029: LD_VAR 0 4
63033: ARRAY
63034: PUSH
63035: LD_INT 1
63037: ARRAY
63038: PPUSH
63039: LD_VAR 0 6
63043: PUSH
63044: LD_VAR 0 4
63048: ARRAY
63049: PUSH
63050: LD_INT 2
63052: ARRAY
63053: PPUSH
63054: CALL_OW 488
63058: NOT
63059: PUSH
63060: LD_VAR 0 6
63064: PUSH
63065: LD_VAR 0 4
63069: ARRAY
63070: PUSH
63071: LD_INT 1
63073: ARRAY
63074: PPUSH
63075: LD_VAR 0 6
63079: PUSH
63080: LD_VAR 0 4
63084: ARRAY
63085: PUSH
63086: LD_INT 2
63088: ARRAY
63089: PPUSH
63090: CALL_OW 428
63094: PUSH
63095: LD_INT 0
63097: NONEQUAL
63098: OR
63099: IFFALSE 63121
// tmp := Delete ( tmp , i ) ;
63101: LD_ADDR_VAR 0 6
63105: PUSH
63106: LD_VAR 0 6
63110: PPUSH
63111: LD_VAR 0 4
63115: PPUSH
63116: CALL_OW 3
63120: ST_TO_ADDR
63121: GO 63021
63123: POP
63124: POP
// j := GetClosestHex ( unit , tmp ) ;
63125: LD_ADDR_VAR 0 5
63129: PUSH
63130: LD_VAR 0 1
63134: PPUSH
63135: LD_VAR 0 6
63139: PPUSH
63140: CALL 62425 0 2
63144: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63145: LD_VAR 0 1
63149: PPUSH
63150: LD_VAR 0 5
63154: PUSH
63155: LD_INT 1
63157: ARRAY
63158: PPUSH
63159: LD_VAR 0 5
63163: PUSH
63164: LD_INT 2
63166: ARRAY
63167: PPUSH
63168: CALL_OW 111
// end ;
63172: LD_VAR 0 3
63176: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63177: LD_INT 0
63179: PPUSH
63180: PPUSH
63181: PPUSH
// uc_side = 0 ;
63182: LD_ADDR_OWVAR 20
63186: PUSH
63187: LD_INT 0
63189: ST_TO_ADDR
// uc_nation = 0 ;
63190: LD_ADDR_OWVAR 21
63194: PUSH
63195: LD_INT 0
63197: ST_TO_ADDR
// InitHc_All ( ) ;
63198: CALL_OW 584
// InitVc ;
63202: CALL_OW 20
// if mastodonts then
63206: LD_VAR 0 6
63210: IFFALSE 63277
// for i = 1 to mastodonts do
63212: LD_ADDR_VAR 0 11
63216: PUSH
63217: DOUBLE
63218: LD_INT 1
63220: DEC
63221: ST_TO_ADDR
63222: LD_VAR 0 6
63226: PUSH
63227: FOR_TO
63228: IFFALSE 63275
// begin vc_chassis := 31 ;
63230: LD_ADDR_OWVAR 37
63234: PUSH
63235: LD_INT 31
63237: ST_TO_ADDR
// vc_control := control_rider ;
63238: LD_ADDR_OWVAR 38
63242: PUSH
63243: LD_INT 4
63245: ST_TO_ADDR
// animal := CreateVehicle ;
63246: LD_ADDR_VAR 0 12
63250: PUSH
63251: CALL_OW 45
63255: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63256: LD_VAR 0 12
63260: PPUSH
63261: LD_VAR 0 8
63265: PPUSH
63266: LD_INT 0
63268: PPUSH
63269: CALL 65465 0 3
// end ;
63273: GO 63227
63275: POP
63276: POP
// if horses then
63277: LD_VAR 0 5
63281: IFFALSE 63348
// for i = 1 to horses do
63283: LD_ADDR_VAR 0 11
63287: PUSH
63288: DOUBLE
63289: LD_INT 1
63291: DEC
63292: ST_TO_ADDR
63293: LD_VAR 0 5
63297: PUSH
63298: FOR_TO
63299: IFFALSE 63346
// begin hc_class := 21 ;
63301: LD_ADDR_OWVAR 28
63305: PUSH
63306: LD_INT 21
63308: ST_TO_ADDR
// hc_gallery :=  ;
63309: LD_ADDR_OWVAR 33
63313: PUSH
63314: LD_STRING 
63316: ST_TO_ADDR
// animal := CreateHuman ;
63317: LD_ADDR_VAR 0 12
63321: PUSH
63322: CALL_OW 44
63326: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63327: LD_VAR 0 12
63331: PPUSH
63332: LD_VAR 0 8
63336: PPUSH
63337: LD_INT 0
63339: PPUSH
63340: CALL 65465 0 3
// end ;
63344: GO 63298
63346: POP
63347: POP
// if birds then
63348: LD_VAR 0 1
63352: IFFALSE 63419
// for i = 1 to birds do
63354: LD_ADDR_VAR 0 11
63358: PUSH
63359: DOUBLE
63360: LD_INT 1
63362: DEC
63363: ST_TO_ADDR
63364: LD_VAR 0 1
63368: PUSH
63369: FOR_TO
63370: IFFALSE 63417
// begin hc_class = 18 ;
63372: LD_ADDR_OWVAR 28
63376: PUSH
63377: LD_INT 18
63379: ST_TO_ADDR
// hc_gallery =  ;
63380: LD_ADDR_OWVAR 33
63384: PUSH
63385: LD_STRING 
63387: ST_TO_ADDR
// animal := CreateHuman ;
63388: LD_ADDR_VAR 0 12
63392: PUSH
63393: CALL_OW 44
63397: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63398: LD_VAR 0 12
63402: PPUSH
63403: LD_VAR 0 8
63407: PPUSH
63408: LD_INT 0
63410: PPUSH
63411: CALL 65465 0 3
// end ;
63415: GO 63369
63417: POP
63418: POP
// if tigers then
63419: LD_VAR 0 2
63423: IFFALSE 63507
// for i = 1 to tigers do
63425: LD_ADDR_VAR 0 11
63429: PUSH
63430: DOUBLE
63431: LD_INT 1
63433: DEC
63434: ST_TO_ADDR
63435: LD_VAR 0 2
63439: PUSH
63440: FOR_TO
63441: IFFALSE 63505
// begin hc_class = class_tiger ;
63443: LD_ADDR_OWVAR 28
63447: PUSH
63448: LD_INT 14
63450: ST_TO_ADDR
// hc_gallery =  ;
63451: LD_ADDR_OWVAR 33
63455: PUSH
63456: LD_STRING 
63458: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63459: LD_ADDR_OWVAR 35
63463: PUSH
63464: LD_INT 7
63466: NEG
63467: PPUSH
63468: LD_INT 7
63470: PPUSH
63471: CALL_OW 12
63475: ST_TO_ADDR
// animal := CreateHuman ;
63476: LD_ADDR_VAR 0 12
63480: PUSH
63481: CALL_OW 44
63485: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63486: LD_VAR 0 12
63490: PPUSH
63491: LD_VAR 0 8
63495: PPUSH
63496: LD_INT 0
63498: PPUSH
63499: CALL 65465 0 3
// end ;
63503: GO 63440
63505: POP
63506: POP
// if apemans then
63507: LD_VAR 0 3
63511: IFFALSE 63634
// for i = 1 to apemans do
63513: LD_ADDR_VAR 0 11
63517: PUSH
63518: DOUBLE
63519: LD_INT 1
63521: DEC
63522: ST_TO_ADDR
63523: LD_VAR 0 3
63527: PUSH
63528: FOR_TO
63529: IFFALSE 63632
// begin hc_class = class_apeman ;
63531: LD_ADDR_OWVAR 28
63535: PUSH
63536: LD_INT 12
63538: ST_TO_ADDR
// hc_gallery =  ;
63539: LD_ADDR_OWVAR 33
63543: PUSH
63544: LD_STRING 
63546: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
63547: LD_ADDR_OWVAR 35
63551: PUSH
63552: LD_INT 5
63554: NEG
63555: PPUSH
63556: LD_INT 5
63558: PPUSH
63559: CALL_OW 12
63563: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63564: LD_ADDR_OWVAR 31
63568: PUSH
63569: LD_INT 1
63571: PPUSH
63572: LD_INT 3
63574: PPUSH
63575: CALL_OW 12
63579: PUSH
63580: LD_INT 1
63582: PPUSH
63583: LD_INT 3
63585: PPUSH
63586: CALL_OW 12
63590: PUSH
63591: LD_INT 0
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: ST_TO_ADDR
// animal := CreateHuman ;
63603: LD_ADDR_VAR 0 12
63607: PUSH
63608: CALL_OW 44
63612: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63613: LD_VAR 0 12
63617: PPUSH
63618: LD_VAR 0 8
63622: PPUSH
63623: LD_INT 0
63625: PPUSH
63626: CALL 65465 0 3
// end ;
63630: GO 63528
63632: POP
63633: POP
// if enchidnas then
63634: LD_VAR 0 4
63638: IFFALSE 63705
// for i = 1 to enchidnas do
63640: LD_ADDR_VAR 0 11
63644: PUSH
63645: DOUBLE
63646: LD_INT 1
63648: DEC
63649: ST_TO_ADDR
63650: LD_VAR 0 4
63654: PUSH
63655: FOR_TO
63656: IFFALSE 63703
// begin hc_class = 13 ;
63658: LD_ADDR_OWVAR 28
63662: PUSH
63663: LD_INT 13
63665: ST_TO_ADDR
// hc_gallery =  ;
63666: LD_ADDR_OWVAR 33
63670: PUSH
63671: LD_STRING 
63673: ST_TO_ADDR
// animal := CreateHuman ;
63674: LD_ADDR_VAR 0 12
63678: PUSH
63679: CALL_OW 44
63683: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63684: LD_VAR 0 12
63688: PPUSH
63689: LD_VAR 0 8
63693: PPUSH
63694: LD_INT 0
63696: PPUSH
63697: CALL 65465 0 3
// end ;
63701: GO 63655
63703: POP
63704: POP
// if fishes then
63705: LD_VAR 0 7
63709: IFFALSE 63776
// for i = 1 to fishes do
63711: LD_ADDR_VAR 0 11
63715: PUSH
63716: DOUBLE
63717: LD_INT 1
63719: DEC
63720: ST_TO_ADDR
63721: LD_VAR 0 7
63725: PUSH
63726: FOR_TO
63727: IFFALSE 63774
// begin hc_class = 20 ;
63729: LD_ADDR_OWVAR 28
63733: PUSH
63734: LD_INT 20
63736: ST_TO_ADDR
// hc_gallery =  ;
63737: LD_ADDR_OWVAR 33
63741: PUSH
63742: LD_STRING 
63744: ST_TO_ADDR
// animal := CreateHuman ;
63745: LD_ADDR_VAR 0 12
63749: PUSH
63750: CALL_OW 44
63754: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63755: LD_VAR 0 12
63759: PPUSH
63760: LD_VAR 0 9
63764: PPUSH
63765: LD_INT 0
63767: PPUSH
63768: CALL 65465 0 3
// end ;
63772: GO 63726
63774: POP
63775: POP
// end ;
63776: LD_VAR 0 10
63780: RET
// export function WantHeal ( sci , unit ) ; begin
63781: LD_INT 0
63783: PPUSH
// if GetTaskList ( sci ) > 0 then
63784: LD_VAR 0 1
63788: PPUSH
63789: CALL_OW 437
63793: PUSH
63794: LD_INT 0
63796: GREATER
63797: IFFALSE 63867
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63799: LD_VAR 0 1
63803: PPUSH
63804: CALL_OW 437
63808: PUSH
63809: LD_INT 1
63811: ARRAY
63812: PUSH
63813: LD_INT 1
63815: ARRAY
63816: PUSH
63817: LD_STRING l
63819: EQUAL
63820: PUSH
63821: LD_VAR 0 1
63825: PPUSH
63826: CALL_OW 437
63830: PUSH
63831: LD_INT 1
63833: ARRAY
63834: PUSH
63835: LD_INT 4
63837: ARRAY
63838: PUSH
63839: LD_VAR 0 2
63843: EQUAL
63844: AND
63845: IFFALSE 63857
// result := true else
63847: LD_ADDR_VAR 0 3
63851: PUSH
63852: LD_INT 1
63854: ST_TO_ADDR
63855: GO 63865
// result := false ;
63857: LD_ADDR_VAR 0 3
63861: PUSH
63862: LD_INT 0
63864: ST_TO_ADDR
// end else
63865: GO 63875
// result := false ;
63867: LD_ADDR_VAR 0 3
63871: PUSH
63872: LD_INT 0
63874: ST_TO_ADDR
// end ;
63875: LD_VAR 0 3
63879: RET
// export function HealTarget ( sci ) ; begin
63880: LD_INT 0
63882: PPUSH
// if not sci then
63883: LD_VAR 0 1
63887: NOT
63888: IFFALSE 63892
// exit ;
63890: GO 63957
// result := 0 ;
63892: LD_ADDR_VAR 0 2
63896: PUSH
63897: LD_INT 0
63899: ST_TO_ADDR
// if GetTaskList ( sci ) then
63900: LD_VAR 0 1
63904: PPUSH
63905: CALL_OW 437
63909: IFFALSE 63957
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63911: LD_VAR 0 1
63915: PPUSH
63916: CALL_OW 437
63920: PUSH
63921: LD_INT 1
63923: ARRAY
63924: PUSH
63925: LD_INT 1
63927: ARRAY
63928: PUSH
63929: LD_STRING l
63931: EQUAL
63932: IFFALSE 63957
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63934: LD_ADDR_VAR 0 2
63938: PUSH
63939: LD_VAR 0 1
63943: PPUSH
63944: CALL_OW 437
63948: PUSH
63949: LD_INT 1
63951: ARRAY
63952: PUSH
63953: LD_INT 4
63955: ARRAY
63956: ST_TO_ADDR
// end ;
63957: LD_VAR 0 2
63961: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63962: LD_INT 0
63964: PPUSH
63965: PPUSH
63966: PPUSH
63967: PPUSH
// if not base_units then
63968: LD_VAR 0 1
63972: NOT
63973: IFFALSE 63977
// exit ;
63975: GO 64064
// result := false ;
63977: LD_ADDR_VAR 0 2
63981: PUSH
63982: LD_INT 0
63984: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63985: LD_ADDR_VAR 0 5
63989: PUSH
63990: LD_VAR 0 1
63994: PPUSH
63995: LD_INT 21
63997: PUSH
63998: LD_INT 3
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PPUSH
64005: CALL_OW 72
64009: ST_TO_ADDR
// if not tmp then
64010: LD_VAR 0 5
64014: NOT
64015: IFFALSE 64019
// exit ;
64017: GO 64064
// for i in tmp do
64019: LD_ADDR_VAR 0 3
64023: PUSH
64024: LD_VAR 0 5
64028: PUSH
64029: FOR_IN
64030: IFFALSE 64062
// begin result := EnemyInRange ( i , 22 ) ;
64032: LD_ADDR_VAR 0 2
64036: PUSH
64037: LD_VAR 0 3
64041: PPUSH
64042: LD_INT 22
64044: PPUSH
64045: CALL 62300 0 2
64049: ST_TO_ADDR
// if result then
64050: LD_VAR 0 2
64054: IFFALSE 64060
// exit ;
64056: POP
64057: POP
64058: GO 64064
// end ;
64060: GO 64029
64062: POP
64063: POP
// end ;
64064: LD_VAR 0 2
64068: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
64069: LD_INT 0
64071: PPUSH
64072: PPUSH
// if not units then
64073: LD_VAR 0 1
64077: NOT
64078: IFFALSE 64082
// exit ;
64080: GO 64152
// result := [ ] ;
64082: LD_ADDR_VAR 0 3
64086: PUSH
64087: EMPTY
64088: ST_TO_ADDR
// for i in units do
64089: LD_ADDR_VAR 0 4
64093: PUSH
64094: LD_VAR 0 1
64098: PUSH
64099: FOR_IN
64100: IFFALSE 64150
// if GetTag ( i ) = tag then
64102: LD_VAR 0 4
64106: PPUSH
64107: CALL_OW 110
64111: PUSH
64112: LD_VAR 0 2
64116: EQUAL
64117: IFFALSE 64148
// result := Insert ( result , result + 1 , i ) ;
64119: LD_ADDR_VAR 0 3
64123: PUSH
64124: LD_VAR 0 3
64128: PPUSH
64129: LD_VAR 0 3
64133: PUSH
64134: LD_INT 1
64136: PLUS
64137: PPUSH
64138: LD_VAR 0 4
64142: PPUSH
64143: CALL_OW 2
64147: ST_TO_ADDR
64148: GO 64099
64150: POP
64151: POP
// end ;
64152: LD_VAR 0 3
64156: RET
// export function IsDriver ( un ) ; begin
64157: LD_INT 0
64159: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64160: LD_ADDR_VAR 0 2
64164: PUSH
64165: LD_VAR 0 1
64169: PUSH
64170: LD_INT 55
64172: PUSH
64173: EMPTY
64174: LIST
64175: PPUSH
64176: CALL_OW 69
64180: IN
64181: ST_TO_ADDR
// end ;
64182: LD_VAR 0 2
64186: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64187: LD_INT 0
64189: PPUSH
64190: PPUSH
// list := [ ] ;
64191: LD_ADDR_VAR 0 5
64195: PUSH
64196: EMPTY
64197: ST_TO_ADDR
// case d of 0 :
64198: LD_VAR 0 3
64202: PUSH
64203: LD_INT 0
64205: DOUBLE
64206: EQUAL
64207: IFTRUE 64211
64209: GO 64344
64211: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64212: LD_ADDR_VAR 0 5
64216: PUSH
64217: LD_VAR 0 1
64221: PUSH
64222: LD_INT 4
64224: MINUS
64225: PUSH
64226: LD_VAR 0 2
64230: PUSH
64231: LD_INT 4
64233: MINUS
64234: PUSH
64235: LD_INT 2
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: LIST
64242: PUSH
64243: LD_VAR 0 1
64247: PUSH
64248: LD_INT 3
64250: MINUS
64251: PUSH
64252: LD_VAR 0 2
64256: PUSH
64257: LD_INT 1
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: LIST
64264: PUSH
64265: LD_VAR 0 1
64269: PUSH
64270: LD_INT 4
64272: PLUS
64273: PUSH
64274: LD_VAR 0 2
64278: PUSH
64279: LD_INT 4
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: LIST
64286: PUSH
64287: LD_VAR 0 1
64291: PUSH
64292: LD_INT 3
64294: PLUS
64295: PUSH
64296: LD_VAR 0 2
64300: PUSH
64301: LD_INT 3
64303: PLUS
64304: PUSH
64305: LD_INT 5
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: LIST
64312: PUSH
64313: LD_VAR 0 1
64317: PUSH
64318: LD_VAR 0 2
64322: PUSH
64323: LD_INT 4
64325: PLUS
64326: PUSH
64327: LD_INT 0
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: LIST
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: ST_TO_ADDR
// end ; 1 :
64342: GO 65042
64344: LD_INT 1
64346: DOUBLE
64347: EQUAL
64348: IFTRUE 64352
64350: GO 64485
64352: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64353: LD_ADDR_VAR 0 5
64357: PUSH
64358: LD_VAR 0 1
64362: PUSH
64363: LD_VAR 0 2
64367: PUSH
64368: LD_INT 4
64370: MINUS
64371: PUSH
64372: LD_INT 3
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: LIST
64379: PUSH
64380: LD_VAR 0 1
64384: PUSH
64385: LD_INT 3
64387: MINUS
64388: PUSH
64389: LD_VAR 0 2
64393: PUSH
64394: LD_INT 3
64396: MINUS
64397: PUSH
64398: LD_INT 2
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: LIST
64405: PUSH
64406: LD_VAR 0 1
64410: PUSH
64411: LD_INT 4
64413: MINUS
64414: PUSH
64415: LD_VAR 0 2
64419: PUSH
64420: LD_INT 1
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: LIST
64427: PUSH
64428: LD_VAR 0 1
64432: PUSH
64433: LD_VAR 0 2
64437: PUSH
64438: LD_INT 3
64440: PLUS
64441: PUSH
64442: LD_INT 0
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: LIST
64449: PUSH
64450: LD_VAR 0 1
64454: PUSH
64455: LD_INT 4
64457: PLUS
64458: PUSH
64459: LD_VAR 0 2
64463: PUSH
64464: LD_INT 4
64466: PLUS
64467: PUSH
64468: LD_INT 5
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: LIST
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: ST_TO_ADDR
// end ; 2 :
64483: GO 65042
64485: LD_INT 2
64487: DOUBLE
64488: EQUAL
64489: IFTRUE 64493
64491: GO 64622
64493: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64494: LD_ADDR_VAR 0 5
64498: PUSH
64499: LD_VAR 0 1
64503: PUSH
64504: LD_VAR 0 2
64508: PUSH
64509: LD_INT 3
64511: MINUS
64512: PUSH
64513: LD_INT 3
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: LIST
64520: PUSH
64521: LD_VAR 0 1
64525: PUSH
64526: LD_INT 4
64528: PLUS
64529: PUSH
64530: LD_VAR 0 2
64534: PUSH
64535: LD_INT 4
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: LIST
64542: PUSH
64543: LD_VAR 0 1
64547: PUSH
64548: LD_VAR 0 2
64552: PUSH
64553: LD_INT 4
64555: PLUS
64556: PUSH
64557: LD_INT 0
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: LIST
64564: PUSH
64565: LD_VAR 0 1
64569: PUSH
64570: LD_INT 3
64572: MINUS
64573: PUSH
64574: LD_VAR 0 2
64578: PUSH
64579: LD_INT 1
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: LIST
64586: PUSH
64587: LD_VAR 0 1
64591: PUSH
64592: LD_INT 4
64594: MINUS
64595: PUSH
64596: LD_VAR 0 2
64600: PUSH
64601: LD_INT 4
64603: MINUS
64604: PUSH
64605: LD_INT 2
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: LIST
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: ST_TO_ADDR
// end ; 3 :
64620: GO 65042
64622: LD_INT 3
64624: DOUBLE
64625: EQUAL
64626: IFTRUE 64630
64628: GO 64763
64630: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64631: LD_ADDR_VAR 0 5
64635: PUSH
64636: LD_VAR 0 1
64640: PUSH
64641: LD_INT 3
64643: PLUS
64644: PUSH
64645: LD_VAR 0 2
64649: PUSH
64650: LD_INT 4
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: LIST
64657: PUSH
64658: LD_VAR 0 1
64662: PUSH
64663: LD_INT 4
64665: PLUS
64666: PUSH
64667: LD_VAR 0 2
64671: PUSH
64672: LD_INT 4
64674: PLUS
64675: PUSH
64676: LD_INT 5
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: LIST
64683: PUSH
64684: LD_VAR 0 1
64688: PUSH
64689: LD_INT 4
64691: MINUS
64692: PUSH
64693: LD_VAR 0 2
64697: PUSH
64698: LD_INT 1
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: LIST
64705: PUSH
64706: LD_VAR 0 1
64710: PUSH
64711: LD_VAR 0 2
64715: PUSH
64716: LD_INT 4
64718: MINUS
64719: PUSH
64720: LD_INT 3
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: LIST
64727: PUSH
64728: LD_VAR 0 1
64732: PUSH
64733: LD_INT 3
64735: MINUS
64736: PUSH
64737: LD_VAR 0 2
64741: PUSH
64742: LD_INT 3
64744: MINUS
64745: PUSH
64746: LD_INT 2
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: LIST
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: ST_TO_ADDR
// end ; 4 :
64761: GO 65042
64763: LD_INT 4
64765: DOUBLE
64766: EQUAL
64767: IFTRUE 64771
64769: GO 64904
64771: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64772: LD_ADDR_VAR 0 5
64776: PUSH
64777: LD_VAR 0 1
64781: PUSH
64782: LD_VAR 0 2
64786: PUSH
64787: LD_INT 4
64789: PLUS
64790: PUSH
64791: LD_INT 0
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: LIST
64798: PUSH
64799: LD_VAR 0 1
64803: PUSH
64804: LD_INT 3
64806: PLUS
64807: PUSH
64808: LD_VAR 0 2
64812: PUSH
64813: LD_INT 3
64815: PLUS
64816: PUSH
64817: LD_INT 5
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: LIST
64824: PUSH
64825: LD_VAR 0 1
64829: PUSH
64830: LD_INT 4
64832: PLUS
64833: PUSH
64834: LD_VAR 0 2
64838: PUSH
64839: LD_INT 4
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: LIST
64846: PUSH
64847: LD_VAR 0 1
64851: PUSH
64852: LD_VAR 0 2
64856: PUSH
64857: LD_INT 3
64859: MINUS
64860: PUSH
64861: LD_INT 3
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: LIST
64868: PUSH
64869: LD_VAR 0 1
64873: PUSH
64874: LD_INT 4
64876: MINUS
64877: PUSH
64878: LD_VAR 0 2
64882: PUSH
64883: LD_INT 4
64885: MINUS
64886: PUSH
64887: LD_INT 2
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: LIST
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: ST_TO_ADDR
// end ; 5 :
64902: GO 65042
64904: LD_INT 5
64906: DOUBLE
64907: EQUAL
64908: IFTRUE 64912
64910: GO 65041
64912: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64913: LD_ADDR_VAR 0 5
64917: PUSH
64918: LD_VAR 0 1
64922: PUSH
64923: LD_INT 4
64925: MINUS
64926: PUSH
64927: LD_VAR 0 2
64931: PUSH
64932: LD_INT 1
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: LIST
64939: PUSH
64940: LD_VAR 0 1
64944: PUSH
64945: LD_VAR 0 2
64949: PUSH
64950: LD_INT 4
64952: MINUS
64953: PUSH
64954: LD_INT 3
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: LIST
64961: PUSH
64962: LD_VAR 0 1
64966: PUSH
64967: LD_INT 4
64969: PLUS
64970: PUSH
64971: LD_VAR 0 2
64975: PUSH
64976: LD_INT 4
64978: PLUS
64979: PUSH
64980: LD_INT 5
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: LIST
64987: PUSH
64988: LD_VAR 0 1
64992: PUSH
64993: LD_INT 3
64995: PLUS
64996: PUSH
64997: LD_VAR 0 2
65001: PUSH
65002: LD_INT 4
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: LIST
65009: PUSH
65010: LD_VAR 0 1
65014: PUSH
65015: LD_VAR 0 2
65019: PUSH
65020: LD_INT 3
65022: PLUS
65023: PUSH
65024: LD_INT 0
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: LIST
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: ST_TO_ADDR
// end ; end ;
65039: GO 65042
65041: POP
// result := list ;
65042: LD_ADDR_VAR 0 4
65046: PUSH
65047: LD_VAR 0 5
65051: ST_TO_ADDR
// end ;
65052: LD_VAR 0 4
65056: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65057: LD_INT 0
65059: PPUSH
65060: PPUSH
65061: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65062: LD_VAR 0 1
65066: NOT
65067: PUSH
65068: LD_VAR 0 2
65072: PUSH
65073: LD_INT 1
65075: PUSH
65076: LD_INT 2
65078: PUSH
65079: LD_INT 3
65081: PUSH
65082: LD_INT 4
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: IN
65091: NOT
65092: OR
65093: IFFALSE 65097
// exit ;
65095: GO 65189
// tmp := [ ] ;
65097: LD_ADDR_VAR 0 5
65101: PUSH
65102: EMPTY
65103: ST_TO_ADDR
// for i in units do
65104: LD_ADDR_VAR 0 4
65108: PUSH
65109: LD_VAR 0 1
65113: PUSH
65114: FOR_IN
65115: IFFALSE 65158
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65117: LD_ADDR_VAR 0 5
65121: PUSH
65122: LD_VAR 0 5
65126: PPUSH
65127: LD_VAR 0 5
65131: PUSH
65132: LD_INT 1
65134: PLUS
65135: PPUSH
65136: LD_VAR 0 4
65140: PPUSH
65141: LD_VAR 0 2
65145: PPUSH
65146: CALL_OW 259
65150: PPUSH
65151: CALL_OW 2
65155: ST_TO_ADDR
65156: GO 65114
65158: POP
65159: POP
// if not tmp then
65160: LD_VAR 0 5
65164: NOT
65165: IFFALSE 65169
// exit ;
65167: GO 65189
// result := SortListByListDesc ( units , tmp ) ;
65169: LD_ADDR_VAR 0 3
65173: PUSH
65174: LD_VAR 0 1
65178: PPUSH
65179: LD_VAR 0 5
65183: PPUSH
65184: CALL_OW 77
65188: ST_TO_ADDR
// end ;
65189: LD_VAR 0 3
65193: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65194: LD_INT 0
65196: PPUSH
65197: PPUSH
65198: PPUSH
// result := false ;
65199: LD_ADDR_VAR 0 3
65203: PUSH
65204: LD_INT 0
65206: ST_TO_ADDR
// x := GetX ( building ) ;
65207: LD_ADDR_VAR 0 4
65211: PUSH
65212: LD_VAR 0 2
65216: PPUSH
65217: CALL_OW 250
65221: ST_TO_ADDR
// y := GetY ( building ) ;
65222: LD_ADDR_VAR 0 5
65226: PUSH
65227: LD_VAR 0 2
65231: PPUSH
65232: CALL_OW 251
65236: ST_TO_ADDR
// if not building or not x or not y then
65237: LD_VAR 0 2
65241: NOT
65242: PUSH
65243: LD_VAR 0 4
65247: NOT
65248: OR
65249: PUSH
65250: LD_VAR 0 5
65254: NOT
65255: OR
65256: IFFALSE 65260
// exit ;
65258: GO 65352
// if GetTaskList ( unit ) then
65260: LD_VAR 0 1
65264: PPUSH
65265: CALL_OW 437
65269: IFFALSE 65352
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65271: LD_STRING e
65273: PUSH
65274: LD_VAR 0 1
65278: PPUSH
65279: CALL_OW 437
65283: PUSH
65284: LD_INT 1
65286: ARRAY
65287: PUSH
65288: LD_INT 1
65290: ARRAY
65291: EQUAL
65292: PUSH
65293: LD_VAR 0 4
65297: PUSH
65298: LD_VAR 0 1
65302: PPUSH
65303: CALL_OW 437
65307: PUSH
65308: LD_INT 1
65310: ARRAY
65311: PUSH
65312: LD_INT 2
65314: ARRAY
65315: EQUAL
65316: AND
65317: PUSH
65318: LD_VAR 0 5
65322: PUSH
65323: LD_VAR 0 1
65327: PPUSH
65328: CALL_OW 437
65332: PUSH
65333: LD_INT 1
65335: ARRAY
65336: PUSH
65337: LD_INT 3
65339: ARRAY
65340: EQUAL
65341: AND
65342: IFFALSE 65352
// result := true end ;
65344: LD_ADDR_VAR 0 3
65348: PUSH
65349: LD_INT 1
65351: ST_TO_ADDR
// end ;
65352: LD_VAR 0 3
65356: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65357: LD_INT 0
65359: PPUSH
// result := false ;
65360: LD_ADDR_VAR 0 4
65364: PUSH
65365: LD_INT 0
65367: ST_TO_ADDR
// if GetTaskList ( unit ) then
65368: LD_VAR 0 1
65372: PPUSH
65373: CALL_OW 437
65377: IFFALSE 65460
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65379: LD_STRING M
65381: PUSH
65382: LD_VAR 0 1
65386: PPUSH
65387: CALL_OW 437
65391: PUSH
65392: LD_INT 1
65394: ARRAY
65395: PUSH
65396: LD_INT 1
65398: ARRAY
65399: EQUAL
65400: PUSH
65401: LD_VAR 0 2
65405: PUSH
65406: LD_VAR 0 1
65410: PPUSH
65411: CALL_OW 437
65415: PUSH
65416: LD_INT 1
65418: ARRAY
65419: PUSH
65420: LD_INT 2
65422: ARRAY
65423: EQUAL
65424: AND
65425: PUSH
65426: LD_VAR 0 3
65430: PUSH
65431: LD_VAR 0 1
65435: PPUSH
65436: CALL_OW 437
65440: PUSH
65441: LD_INT 1
65443: ARRAY
65444: PUSH
65445: LD_INT 3
65447: ARRAY
65448: EQUAL
65449: AND
65450: IFFALSE 65460
// result := true ;
65452: LD_ADDR_VAR 0 4
65456: PUSH
65457: LD_INT 1
65459: ST_TO_ADDR
// end ; end ;
65460: LD_VAR 0 4
65464: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65465: LD_INT 0
65467: PPUSH
65468: PPUSH
65469: PPUSH
65470: PPUSH
// if not unit or not area then
65471: LD_VAR 0 1
65475: NOT
65476: PUSH
65477: LD_VAR 0 2
65481: NOT
65482: OR
65483: IFFALSE 65487
// exit ;
65485: GO 65651
// tmp := AreaToList ( area , i ) ;
65487: LD_ADDR_VAR 0 6
65491: PUSH
65492: LD_VAR 0 2
65496: PPUSH
65497: LD_VAR 0 5
65501: PPUSH
65502: CALL_OW 517
65506: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65507: LD_ADDR_VAR 0 5
65511: PUSH
65512: DOUBLE
65513: LD_INT 1
65515: DEC
65516: ST_TO_ADDR
65517: LD_VAR 0 6
65521: PUSH
65522: LD_INT 1
65524: ARRAY
65525: PUSH
65526: FOR_TO
65527: IFFALSE 65649
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65529: LD_ADDR_VAR 0 7
65533: PUSH
65534: LD_VAR 0 6
65538: PUSH
65539: LD_INT 1
65541: ARRAY
65542: PUSH
65543: LD_VAR 0 5
65547: ARRAY
65548: PUSH
65549: LD_VAR 0 6
65553: PUSH
65554: LD_INT 2
65556: ARRAY
65557: PUSH
65558: LD_VAR 0 5
65562: ARRAY
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65568: LD_VAR 0 7
65572: PUSH
65573: LD_INT 1
65575: ARRAY
65576: PPUSH
65577: LD_VAR 0 7
65581: PUSH
65582: LD_INT 2
65584: ARRAY
65585: PPUSH
65586: CALL_OW 428
65590: PUSH
65591: LD_INT 0
65593: EQUAL
65594: IFFALSE 65647
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65596: LD_VAR 0 1
65600: PPUSH
65601: LD_VAR 0 7
65605: PUSH
65606: LD_INT 1
65608: ARRAY
65609: PPUSH
65610: LD_VAR 0 7
65614: PUSH
65615: LD_INT 2
65617: ARRAY
65618: PPUSH
65619: LD_VAR 0 3
65623: PPUSH
65624: CALL_OW 48
// result := IsPlaced ( unit ) ;
65628: LD_ADDR_VAR 0 4
65632: PUSH
65633: LD_VAR 0 1
65637: PPUSH
65638: CALL_OW 305
65642: ST_TO_ADDR
// exit ;
65643: POP
65644: POP
65645: GO 65651
// end ; end ;
65647: GO 65526
65649: POP
65650: POP
// end ;
65651: LD_VAR 0 4
65655: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65656: LD_INT 0
65658: PPUSH
65659: PPUSH
65660: PPUSH
// if not side or side > 8 then
65661: LD_VAR 0 1
65665: NOT
65666: PUSH
65667: LD_VAR 0 1
65671: PUSH
65672: LD_INT 8
65674: GREATER
65675: OR
65676: IFFALSE 65680
// exit ;
65678: GO 65867
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65680: LD_ADDR_VAR 0 4
65684: PUSH
65685: LD_INT 22
65687: PUSH
65688: LD_VAR 0 1
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 21
65699: PUSH
65700: LD_INT 3
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PPUSH
65711: CALL_OW 69
65715: ST_TO_ADDR
// if not tmp then
65716: LD_VAR 0 4
65720: NOT
65721: IFFALSE 65725
// exit ;
65723: GO 65867
// enable_addtolog := true ;
65725: LD_ADDR_OWVAR 81
65729: PUSH
65730: LD_INT 1
65732: ST_TO_ADDR
// AddToLog ( [ ) ;
65733: LD_STRING [
65735: PPUSH
65736: CALL_OW 561
// for i in tmp do
65740: LD_ADDR_VAR 0 3
65744: PUSH
65745: LD_VAR 0 4
65749: PUSH
65750: FOR_IN
65751: IFFALSE 65858
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65753: LD_STRING [
65755: PUSH
65756: LD_VAR 0 3
65760: PPUSH
65761: CALL_OW 266
65765: STR
65766: PUSH
65767: LD_STRING , 
65769: STR
65770: PUSH
65771: LD_VAR 0 3
65775: PPUSH
65776: CALL_OW 250
65780: STR
65781: PUSH
65782: LD_STRING , 
65784: STR
65785: PUSH
65786: LD_VAR 0 3
65790: PPUSH
65791: CALL_OW 251
65795: STR
65796: PUSH
65797: LD_STRING , 
65799: STR
65800: PUSH
65801: LD_VAR 0 3
65805: PPUSH
65806: CALL_OW 254
65810: STR
65811: PUSH
65812: LD_STRING , 
65814: STR
65815: PUSH
65816: LD_VAR 0 3
65820: PPUSH
65821: LD_INT 1
65823: PPUSH
65824: CALL_OW 268
65828: STR
65829: PUSH
65830: LD_STRING , 
65832: STR
65833: PUSH
65834: LD_VAR 0 3
65838: PPUSH
65839: LD_INT 2
65841: PPUSH
65842: CALL_OW 268
65846: STR
65847: PUSH
65848: LD_STRING ],
65850: STR
65851: PPUSH
65852: CALL_OW 561
// end ;
65856: GO 65750
65858: POP
65859: POP
// AddToLog ( ]; ) ;
65860: LD_STRING ];
65862: PPUSH
65863: CALL_OW 561
// end ;
65867: LD_VAR 0 2
65871: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65872: LD_INT 0
65874: PPUSH
65875: PPUSH
65876: PPUSH
65877: PPUSH
65878: PPUSH
// if not area or not rate or not max then
65879: LD_VAR 0 1
65883: NOT
65884: PUSH
65885: LD_VAR 0 2
65889: NOT
65890: OR
65891: PUSH
65892: LD_VAR 0 4
65896: NOT
65897: OR
65898: IFFALSE 65902
// exit ;
65900: GO 66094
// while 1 do
65902: LD_INT 1
65904: IFFALSE 66094
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65906: LD_ADDR_VAR 0 9
65910: PUSH
65911: LD_VAR 0 1
65915: PPUSH
65916: LD_INT 1
65918: PPUSH
65919: CALL_OW 287
65923: PUSH
65924: LD_INT 10
65926: MUL
65927: ST_TO_ADDR
// r := rate / 10 ;
65928: LD_ADDR_VAR 0 7
65932: PUSH
65933: LD_VAR 0 2
65937: PUSH
65938: LD_INT 10
65940: DIVREAL
65941: ST_TO_ADDR
// time := 1 1$00 ;
65942: LD_ADDR_VAR 0 8
65946: PUSH
65947: LD_INT 2100
65949: ST_TO_ADDR
// if amount < min then
65950: LD_VAR 0 9
65954: PUSH
65955: LD_VAR 0 3
65959: LESS
65960: IFFALSE 65978
// r := r * 2 else
65962: LD_ADDR_VAR 0 7
65966: PUSH
65967: LD_VAR 0 7
65971: PUSH
65972: LD_INT 2
65974: MUL
65975: ST_TO_ADDR
65976: GO 66004
// if amount > max then
65978: LD_VAR 0 9
65982: PUSH
65983: LD_VAR 0 4
65987: GREATER
65988: IFFALSE 66004
// r := r / 2 ;
65990: LD_ADDR_VAR 0 7
65994: PUSH
65995: LD_VAR 0 7
65999: PUSH
66000: LD_INT 2
66002: DIVREAL
66003: ST_TO_ADDR
// time := time / r ;
66004: LD_ADDR_VAR 0 8
66008: PUSH
66009: LD_VAR 0 8
66013: PUSH
66014: LD_VAR 0 7
66018: DIVREAL
66019: ST_TO_ADDR
// if time < 0 then
66020: LD_VAR 0 8
66024: PUSH
66025: LD_INT 0
66027: LESS
66028: IFFALSE 66045
// time := time * - 1 ;
66030: LD_ADDR_VAR 0 8
66034: PUSH
66035: LD_VAR 0 8
66039: PUSH
66040: LD_INT 1
66042: NEG
66043: MUL
66044: ST_TO_ADDR
// wait ( time ) ;
66045: LD_VAR 0 8
66049: PPUSH
66050: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66054: LD_INT 35
66056: PPUSH
66057: LD_INT 875
66059: PPUSH
66060: CALL_OW 12
66064: PPUSH
66065: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66069: LD_INT 1
66071: PPUSH
66072: LD_INT 5
66074: PPUSH
66075: CALL_OW 12
66079: PPUSH
66080: LD_VAR 0 1
66084: PPUSH
66085: LD_INT 1
66087: PPUSH
66088: CALL_OW 55
// end ;
66092: GO 65902
// end ;
66094: LD_VAR 0 5
66098: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66099: LD_INT 0
66101: PPUSH
66102: PPUSH
66103: PPUSH
66104: PPUSH
66105: PPUSH
66106: PPUSH
66107: PPUSH
66108: PPUSH
// if not turrets or not factories then
66109: LD_VAR 0 1
66113: NOT
66114: PUSH
66115: LD_VAR 0 2
66119: NOT
66120: OR
66121: IFFALSE 66125
// exit ;
66123: GO 66432
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66125: LD_ADDR_VAR 0 10
66129: PUSH
66130: LD_INT 5
66132: PUSH
66133: LD_INT 6
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 2
66142: PUSH
66143: LD_INT 4
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 3
66152: PUSH
66153: LD_INT 5
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 24
66167: PUSH
66168: LD_INT 25
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 23
66177: PUSH
66178: LD_INT 27
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 42
66191: PUSH
66192: LD_INT 43
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 44
66201: PUSH
66202: LD_INT 46
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 45
66211: PUSH
66212: LD_INT 47
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: LIST
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: LIST
66228: ST_TO_ADDR
// result := [ ] ;
66229: LD_ADDR_VAR 0 3
66233: PUSH
66234: EMPTY
66235: ST_TO_ADDR
// for i in turrets do
66236: LD_ADDR_VAR 0 4
66240: PUSH
66241: LD_VAR 0 1
66245: PUSH
66246: FOR_IN
66247: IFFALSE 66430
// begin nat := GetNation ( i ) ;
66249: LD_ADDR_VAR 0 7
66253: PUSH
66254: LD_VAR 0 4
66258: PPUSH
66259: CALL_OW 248
66263: ST_TO_ADDR
// weapon := 0 ;
66264: LD_ADDR_VAR 0 8
66268: PUSH
66269: LD_INT 0
66271: ST_TO_ADDR
// if not nat then
66272: LD_VAR 0 7
66276: NOT
66277: IFFALSE 66281
// continue ;
66279: GO 66246
// for j in list [ nat ] do
66281: LD_ADDR_VAR 0 5
66285: PUSH
66286: LD_VAR 0 10
66290: PUSH
66291: LD_VAR 0 7
66295: ARRAY
66296: PUSH
66297: FOR_IN
66298: IFFALSE 66339
// if GetBWeapon ( i ) = j [ 1 ] then
66300: LD_VAR 0 4
66304: PPUSH
66305: CALL_OW 269
66309: PUSH
66310: LD_VAR 0 5
66314: PUSH
66315: LD_INT 1
66317: ARRAY
66318: EQUAL
66319: IFFALSE 66337
// begin weapon := j [ 2 ] ;
66321: LD_ADDR_VAR 0 8
66325: PUSH
66326: LD_VAR 0 5
66330: PUSH
66331: LD_INT 2
66333: ARRAY
66334: ST_TO_ADDR
// break ;
66335: GO 66339
// end ;
66337: GO 66297
66339: POP
66340: POP
// if not weapon then
66341: LD_VAR 0 8
66345: NOT
66346: IFFALSE 66350
// continue ;
66348: GO 66246
// for k in factories do
66350: LD_ADDR_VAR 0 6
66354: PUSH
66355: LD_VAR 0 2
66359: PUSH
66360: FOR_IN
66361: IFFALSE 66426
// begin weapons := AvailableWeaponList ( k ) ;
66363: LD_ADDR_VAR 0 9
66367: PUSH
66368: LD_VAR 0 6
66372: PPUSH
66373: CALL_OW 478
66377: ST_TO_ADDR
// if not weapons then
66378: LD_VAR 0 9
66382: NOT
66383: IFFALSE 66387
// continue ;
66385: GO 66360
// if weapon in weapons then
66387: LD_VAR 0 8
66391: PUSH
66392: LD_VAR 0 9
66396: IN
66397: IFFALSE 66424
// begin result := [ i , weapon ] ;
66399: LD_ADDR_VAR 0 3
66403: PUSH
66404: LD_VAR 0 4
66408: PUSH
66409: LD_VAR 0 8
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: ST_TO_ADDR
// exit ;
66418: POP
66419: POP
66420: POP
66421: POP
66422: GO 66432
// end ; end ;
66424: GO 66360
66426: POP
66427: POP
// end ;
66428: GO 66246
66430: POP
66431: POP
// end ;
66432: LD_VAR 0 3
66436: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66437: LD_INT 0
66439: PPUSH
// if not side or side > 8 then
66440: LD_VAR 0 3
66444: NOT
66445: PUSH
66446: LD_VAR 0 3
66450: PUSH
66451: LD_INT 8
66453: GREATER
66454: OR
66455: IFFALSE 66459
// exit ;
66457: GO 66518
// if not range then
66459: LD_VAR 0 4
66463: NOT
66464: IFFALSE 66475
// range := - 12 ;
66466: LD_ADDR_VAR 0 4
66470: PUSH
66471: LD_INT 12
66473: NEG
66474: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66475: LD_VAR 0 1
66479: PPUSH
66480: LD_VAR 0 2
66484: PPUSH
66485: LD_VAR 0 3
66489: PPUSH
66490: LD_VAR 0 4
66494: PPUSH
66495: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66499: LD_VAR 0 1
66503: PPUSH
66504: LD_VAR 0 2
66508: PPUSH
66509: LD_VAR 0 3
66513: PPUSH
66514: CALL_OW 331
// end ;
66518: LD_VAR 0 5
66522: RET
// export function Video ( mode ) ; begin
66523: LD_INT 0
66525: PPUSH
// ingame_video = mode ;
66526: LD_ADDR_OWVAR 52
66530: PUSH
66531: LD_VAR 0 1
66535: ST_TO_ADDR
// interface_hidden = mode ;
66536: LD_ADDR_OWVAR 54
66540: PUSH
66541: LD_VAR 0 1
66545: ST_TO_ADDR
// end ;
66546: LD_VAR 0 2
66550: RET
// export function Join ( array , element ) ; begin
66551: LD_INT 0
66553: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66554: LD_ADDR_VAR 0 3
66558: PUSH
66559: LD_VAR 0 1
66563: PPUSH
66564: LD_VAR 0 1
66568: PUSH
66569: LD_INT 1
66571: PLUS
66572: PPUSH
66573: LD_VAR 0 2
66577: PPUSH
66578: CALL_OW 1
66582: ST_TO_ADDR
// end ;
66583: LD_VAR 0 3
66587: RET
// export function JoinUnion ( array , element ) ; begin
66588: LD_INT 0
66590: PPUSH
// result := array union element ;
66591: LD_ADDR_VAR 0 3
66595: PUSH
66596: LD_VAR 0 1
66600: PUSH
66601: LD_VAR 0 2
66605: UNION
66606: ST_TO_ADDR
// end ;
66607: LD_VAR 0 3
66611: RET
// export function GetBehemoths ( side ) ; begin
66612: LD_INT 0
66614: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66615: LD_ADDR_VAR 0 2
66619: PUSH
66620: LD_INT 22
66622: PUSH
66623: LD_VAR 0 1
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 31
66634: PUSH
66635: LD_INT 25
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PPUSH
66646: CALL_OW 69
66650: ST_TO_ADDR
// end ;
66651: LD_VAR 0 2
66655: RET
// export function Shuffle ( array ) ; var i , index ; begin
66656: LD_INT 0
66658: PPUSH
66659: PPUSH
66660: PPUSH
// result := [ ] ;
66661: LD_ADDR_VAR 0 2
66665: PUSH
66666: EMPTY
66667: ST_TO_ADDR
// if not array then
66668: LD_VAR 0 1
66672: NOT
66673: IFFALSE 66677
// exit ;
66675: GO 66776
// Randomize ;
66677: CALL_OW 10
// for i = array downto 1 do
66681: LD_ADDR_VAR 0 3
66685: PUSH
66686: DOUBLE
66687: LD_VAR 0 1
66691: INC
66692: ST_TO_ADDR
66693: LD_INT 1
66695: PUSH
66696: FOR_DOWNTO
66697: IFFALSE 66774
// begin index := rand ( 1 , array ) ;
66699: LD_ADDR_VAR 0 4
66703: PUSH
66704: LD_INT 1
66706: PPUSH
66707: LD_VAR 0 1
66711: PPUSH
66712: CALL_OW 12
66716: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66717: LD_ADDR_VAR 0 2
66721: PUSH
66722: LD_VAR 0 2
66726: PPUSH
66727: LD_VAR 0 2
66731: PUSH
66732: LD_INT 1
66734: PLUS
66735: PPUSH
66736: LD_VAR 0 1
66740: PUSH
66741: LD_VAR 0 4
66745: ARRAY
66746: PPUSH
66747: CALL_OW 2
66751: ST_TO_ADDR
// array := Delete ( array , index ) ;
66752: LD_ADDR_VAR 0 1
66756: PUSH
66757: LD_VAR 0 1
66761: PPUSH
66762: LD_VAR 0 4
66766: PPUSH
66767: CALL_OW 3
66771: ST_TO_ADDR
// end ;
66772: GO 66696
66774: POP
66775: POP
// end ;
66776: LD_VAR 0 2
66780: RET
// export function GetBaseMaterials ( base ) ; begin
66781: LD_INT 0
66783: PPUSH
// result := [ 0 , 0 , 0 ] ;
66784: LD_ADDR_VAR 0 2
66788: PUSH
66789: LD_INT 0
66791: PUSH
66792: LD_INT 0
66794: PUSH
66795: LD_INT 0
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: LIST
66802: ST_TO_ADDR
// if not base then
66803: LD_VAR 0 1
66807: NOT
66808: IFFALSE 66812
// exit ;
66810: GO 66861
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66812: LD_ADDR_VAR 0 2
66816: PUSH
66817: LD_VAR 0 1
66821: PPUSH
66822: LD_INT 1
66824: PPUSH
66825: CALL_OW 275
66829: PUSH
66830: LD_VAR 0 1
66834: PPUSH
66835: LD_INT 2
66837: PPUSH
66838: CALL_OW 275
66842: PUSH
66843: LD_VAR 0 1
66847: PPUSH
66848: LD_INT 3
66850: PPUSH
66851: CALL_OW 275
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: LIST
66860: ST_TO_ADDR
// end ;
66861: LD_VAR 0 2
66865: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66866: LD_INT 0
66868: PPUSH
66869: PPUSH
// result := array ;
66870: LD_ADDR_VAR 0 3
66874: PUSH
66875: LD_VAR 0 1
66879: ST_TO_ADDR
// if size > 0 then
66880: LD_VAR 0 2
66884: PUSH
66885: LD_INT 0
66887: GREATER
66888: IFFALSE 66934
// for i := array downto size do
66890: LD_ADDR_VAR 0 4
66894: PUSH
66895: DOUBLE
66896: LD_VAR 0 1
66900: INC
66901: ST_TO_ADDR
66902: LD_VAR 0 2
66906: PUSH
66907: FOR_DOWNTO
66908: IFFALSE 66932
// result := Delete ( result , result ) ;
66910: LD_ADDR_VAR 0 3
66914: PUSH
66915: LD_VAR 0 3
66919: PPUSH
66920: LD_VAR 0 3
66924: PPUSH
66925: CALL_OW 3
66929: ST_TO_ADDR
66930: GO 66907
66932: POP
66933: POP
// end ;
66934: LD_VAR 0 3
66938: RET
// export function ComExit ( unit ) ; var tmp ; begin
66939: LD_INT 0
66941: PPUSH
66942: PPUSH
// if not IsInUnit ( unit ) then
66943: LD_VAR 0 1
66947: PPUSH
66948: CALL_OW 310
66952: NOT
66953: IFFALSE 66957
// exit ;
66955: GO 67017
// tmp := IsInUnit ( unit ) ;
66957: LD_ADDR_VAR 0 3
66961: PUSH
66962: LD_VAR 0 1
66966: PPUSH
66967: CALL_OW 310
66971: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66972: LD_VAR 0 3
66976: PPUSH
66977: CALL_OW 247
66981: PUSH
66982: LD_INT 2
66984: EQUAL
66985: IFFALSE 66998
// ComExitVehicle ( unit ) else
66987: LD_VAR 0 1
66991: PPUSH
66992: CALL_OW 121
66996: GO 67007
// ComExitBuilding ( unit ) ;
66998: LD_VAR 0 1
67002: PPUSH
67003: CALL_OW 122
// result := tmp ;
67007: LD_ADDR_VAR 0 2
67011: PUSH
67012: LD_VAR 0 3
67016: ST_TO_ADDR
// end ;
67017: LD_VAR 0 2
67021: RET
// export function ComExitAll ( units ) ; var i ; begin
67022: LD_INT 0
67024: PPUSH
67025: PPUSH
// if not units then
67026: LD_VAR 0 1
67030: NOT
67031: IFFALSE 67035
// exit ;
67033: GO 67061
// for i in units do
67035: LD_ADDR_VAR 0 3
67039: PUSH
67040: LD_VAR 0 1
67044: PUSH
67045: FOR_IN
67046: IFFALSE 67059
// ComExit ( i ) ;
67048: LD_VAR 0 3
67052: PPUSH
67053: CALL 66939 0 1
67057: GO 67045
67059: POP
67060: POP
// end ;
67061: LD_VAR 0 2
67065: RET
// export function ResetHc ; begin
67066: LD_INT 0
67068: PPUSH
// InitHc ;
67069: CALL_OW 19
// hc_importance := 0 ;
67073: LD_ADDR_OWVAR 32
67077: PUSH
67078: LD_INT 0
67080: ST_TO_ADDR
// end ;
67081: LD_VAR 0 1
67085: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67086: LD_INT 0
67088: PPUSH
67089: PPUSH
67090: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67091: LD_ADDR_VAR 0 6
67095: PUSH
67096: LD_VAR 0 1
67100: PUSH
67101: LD_VAR 0 3
67105: PLUS
67106: PUSH
67107: LD_INT 2
67109: DIV
67110: ST_TO_ADDR
// if _x < 0 then
67111: LD_VAR 0 6
67115: PUSH
67116: LD_INT 0
67118: LESS
67119: IFFALSE 67136
// _x := _x * - 1 ;
67121: LD_ADDR_VAR 0 6
67125: PUSH
67126: LD_VAR 0 6
67130: PUSH
67131: LD_INT 1
67133: NEG
67134: MUL
67135: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67136: LD_ADDR_VAR 0 7
67140: PUSH
67141: LD_VAR 0 2
67145: PUSH
67146: LD_VAR 0 4
67150: PLUS
67151: PUSH
67152: LD_INT 2
67154: DIV
67155: ST_TO_ADDR
// if _y < 0 then
67156: LD_VAR 0 7
67160: PUSH
67161: LD_INT 0
67163: LESS
67164: IFFALSE 67181
// _y := _y * - 1 ;
67166: LD_ADDR_VAR 0 7
67170: PUSH
67171: LD_VAR 0 7
67175: PUSH
67176: LD_INT 1
67178: NEG
67179: MUL
67180: ST_TO_ADDR
// result := [ _x , _y ] ;
67181: LD_ADDR_VAR 0 5
67185: PUSH
67186: LD_VAR 0 6
67190: PUSH
67191: LD_VAR 0 7
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: ST_TO_ADDR
// end ;
67200: LD_VAR 0 5
67204: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67205: LD_INT 0
67207: PPUSH
67208: PPUSH
67209: PPUSH
67210: PPUSH
// task := GetTaskList ( unit ) ;
67211: LD_ADDR_VAR 0 7
67215: PUSH
67216: LD_VAR 0 1
67220: PPUSH
67221: CALL_OW 437
67225: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67226: LD_VAR 0 7
67230: NOT
67231: PUSH
67232: LD_VAR 0 1
67236: PPUSH
67237: LD_VAR 0 2
67241: PPUSH
67242: CALL_OW 308
67246: NOT
67247: AND
67248: IFFALSE 67252
// exit ;
67250: GO 67370
// if IsInArea ( unit , area ) then
67252: LD_VAR 0 1
67256: PPUSH
67257: LD_VAR 0 2
67261: PPUSH
67262: CALL_OW 308
67266: IFFALSE 67284
// begin ComMoveToArea ( unit , goAway ) ;
67268: LD_VAR 0 1
67272: PPUSH
67273: LD_VAR 0 3
67277: PPUSH
67278: CALL_OW 113
// exit ;
67282: GO 67370
// end ; if task [ 1 ] [ 1 ] <> M then
67284: LD_VAR 0 7
67288: PUSH
67289: LD_INT 1
67291: ARRAY
67292: PUSH
67293: LD_INT 1
67295: ARRAY
67296: PUSH
67297: LD_STRING M
67299: NONEQUAL
67300: IFFALSE 67304
// exit ;
67302: GO 67370
// x := task [ 1 ] [ 2 ] ;
67304: LD_ADDR_VAR 0 5
67308: PUSH
67309: LD_VAR 0 7
67313: PUSH
67314: LD_INT 1
67316: ARRAY
67317: PUSH
67318: LD_INT 2
67320: ARRAY
67321: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67322: LD_ADDR_VAR 0 6
67326: PUSH
67327: LD_VAR 0 7
67331: PUSH
67332: LD_INT 1
67334: ARRAY
67335: PUSH
67336: LD_INT 3
67338: ARRAY
67339: ST_TO_ADDR
// if InArea ( x , y , area ) then
67340: LD_VAR 0 5
67344: PPUSH
67345: LD_VAR 0 6
67349: PPUSH
67350: LD_VAR 0 2
67354: PPUSH
67355: CALL_OW 309
67359: IFFALSE 67370
// ComStop ( unit ) ;
67361: LD_VAR 0 1
67365: PPUSH
67366: CALL_OW 141
// end ;
67370: LD_VAR 0 4
67374: RET
// export function Abs ( value ) ; begin
67375: LD_INT 0
67377: PPUSH
// result := value ;
67378: LD_ADDR_VAR 0 2
67382: PUSH
67383: LD_VAR 0 1
67387: ST_TO_ADDR
// if value < 0 then
67388: LD_VAR 0 1
67392: PUSH
67393: LD_INT 0
67395: LESS
67396: IFFALSE 67413
// result := value * - 1 ;
67398: LD_ADDR_VAR 0 2
67402: PUSH
67403: LD_VAR 0 1
67407: PUSH
67408: LD_INT 1
67410: NEG
67411: MUL
67412: ST_TO_ADDR
// end ;
67413: LD_VAR 0 2
67417: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67418: LD_INT 0
67420: PPUSH
67421: PPUSH
67422: PPUSH
67423: PPUSH
67424: PPUSH
67425: PPUSH
67426: PPUSH
67427: PPUSH
// if not unit or not building then
67428: LD_VAR 0 1
67432: NOT
67433: PUSH
67434: LD_VAR 0 2
67438: NOT
67439: OR
67440: IFFALSE 67444
// exit ;
67442: GO 67670
// x := GetX ( building ) ;
67444: LD_ADDR_VAR 0 4
67448: PUSH
67449: LD_VAR 0 2
67453: PPUSH
67454: CALL_OW 250
67458: ST_TO_ADDR
// y := GetY ( building ) ;
67459: LD_ADDR_VAR 0 6
67463: PUSH
67464: LD_VAR 0 2
67468: PPUSH
67469: CALL_OW 251
67473: ST_TO_ADDR
// d := GetDir ( building ) ;
67474: LD_ADDR_VAR 0 8
67478: PUSH
67479: LD_VAR 0 2
67483: PPUSH
67484: CALL_OW 254
67488: ST_TO_ADDR
// r := 4 ;
67489: LD_ADDR_VAR 0 9
67493: PUSH
67494: LD_INT 4
67496: ST_TO_ADDR
// for i := 1 to 5 do
67497: LD_ADDR_VAR 0 10
67501: PUSH
67502: DOUBLE
67503: LD_INT 1
67505: DEC
67506: ST_TO_ADDR
67507: LD_INT 5
67509: PUSH
67510: FOR_TO
67511: IFFALSE 67668
// begin _x := ShiftX ( x , d , r + i ) ;
67513: LD_ADDR_VAR 0 5
67517: PUSH
67518: LD_VAR 0 4
67522: PPUSH
67523: LD_VAR 0 8
67527: PPUSH
67528: LD_VAR 0 9
67532: PUSH
67533: LD_VAR 0 10
67537: PLUS
67538: PPUSH
67539: CALL_OW 272
67543: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67544: LD_ADDR_VAR 0 7
67548: PUSH
67549: LD_VAR 0 6
67553: PPUSH
67554: LD_VAR 0 8
67558: PPUSH
67559: LD_VAR 0 9
67563: PUSH
67564: LD_VAR 0 10
67568: PLUS
67569: PPUSH
67570: CALL_OW 273
67574: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67575: LD_VAR 0 5
67579: PPUSH
67580: LD_VAR 0 7
67584: PPUSH
67585: CALL_OW 488
67589: PUSH
67590: LD_VAR 0 5
67594: PPUSH
67595: LD_VAR 0 7
67599: PPUSH
67600: CALL_OW 428
67604: PPUSH
67605: CALL_OW 247
67609: PUSH
67610: LD_INT 3
67612: PUSH
67613: LD_INT 2
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: IN
67620: NOT
67621: AND
67622: IFFALSE 67666
// begin ComMoveXY ( unit , _x , _y ) ;
67624: LD_VAR 0 1
67628: PPUSH
67629: LD_VAR 0 5
67633: PPUSH
67634: LD_VAR 0 7
67638: PPUSH
67639: CALL_OW 111
// result := [ _x , _y ] ;
67643: LD_ADDR_VAR 0 3
67647: PUSH
67648: LD_VAR 0 5
67652: PUSH
67653: LD_VAR 0 7
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: ST_TO_ADDR
// exit ;
67662: POP
67663: POP
67664: GO 67670
// end ; end ;
67666: GO 67510
67668: POP
67669: POP
// end ;
67670: LD_VAR 0 3
67674: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67675: LD_INT 0
67677: PPUSH
67678: PPUSH
67679: PPUSH
// result := 0 ;
67680: LD_ADDR_VAR 0 3
67684: PUSH
67685: LD_INT 0
67687: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67688: LD_VAR 0 1
67692: PUSH
67693: LD_INT 0
67695: LESS
67696: PUSH
67697: LD_VAR 0 1
67701: PUSH
67702: LD_INT 8
67704: GREATER
67705: OR
67706: PUSH
67707: LD_VAR 0 2
67711: PUSH
67712: LD_INT 0
67714: LESS
67715: OR
67716: PUSH
67717: LD_VAR 0 2
67721: PUSH
67722: LD_INT 8
67724: GREATER
67725: OR
67726: IFFALSE 67730
// exit ;
67728: GO 67805
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67730: LD_ADDR_VAR 0 4
67734: PUSH
67735: LD_INT 22
67737: PUSH
67738: LD_VAR 0 2
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PPUSH
67747: CALL_OW 69
67751: PUSH
67752: FOR_IN
67753: IFFALSE 67803
// begin un := UnitShoot ( i ) ;
67755: LD_ADDR_VAR 0 5
67759: PUSH
67760: LD_VAR 0 4
67764: PPUSH
67765: CALL_OW 504
67769: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67770: LD_VAR 0 5
67774: PPUSH
67775: CALL_OW 255
67779: PUSH
67780: LD_VAR 0 1
67784: EQUAL
67785: IFFALSE 67801
// begin result := un ;
67787: LD_ADDR_VAR 0 3
67791: PUSH
67792: LD_VAR 0 5
67796: ST_TO_ADDR
// exit ;
67797: POP
67798: POP
67799: GO 67805
// end ; end ;
67801: GO 67752
67803: POP
67804: POP
// end ;
67805: LD_VAR 0 3
67809: RET
// export function GetCargoBay ( units ) ; begin
67810: LD_INT 0
67812: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67813: LD_ADDR_VAR 0 2
67817: PUSH
67818: LD_VAR 0 1
67822: PPUSH
67823: LD_INT 2
67825: PUSH
67826: LD_INT 34
67828: PUSH
67829: LD_INT 12
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 34
67838: PUSH
67839: LD_INT 51
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 34
67848: PUSH
67849: LD_INT 32
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 34
67858: PUSH
67859: LD_EXP 44
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: PPUSH
67875: CALL_OW 72
67879: ST_TO_ADDR
// end ; end_of_file
67880: LD_VAR 0 2
67884: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67885: LD_VAR 0 1
67889: PUSH
67890: LD_INT 200
67892: DOUBLE
67893: GREATEREQUAL
67894: IFFALSE 67902
67896: LD_INT 299
67898: DOUBLE
67899: LESSEQUAL
67900: IFTRUE 67904
67902: GO 67936
67904: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67905: LD_VAR 0 1
67909: PPUSH
67910: LD_VAR 0 2
67914: PPUSH
67915: LD_VAR 0 3
67919: PPUSH
67920: LD_VAR 0 4
67924: PPUSH
67925: LD_VAR 0 5
67929: PPUSH
67930: CALL 26376 0 5
67934: GO 68013
67936: LD_INT 300
67938: DOUBLE
67939: GREATEREQUAL
67940: IFFALSE 67948
67942: LD_INT 399
67944: DOUBLE
67945: LESSEQUAL
67946: IFTRUE 67950
67948: GO 68012
67950: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67951: LD_VAR 0 1
67955: PPUSH
67956: LD_VAR 0 2
67960: PPUSH
67961: LD_VAR 0 3
67965: PPUSH
67966: LD_VAR 0 4
67970: PPUSH
67971: LD_VAR 0 5
67975: PPUSH
67976: LD_VAR 0 6
67980: PPUSH
67981: LD_VAR 0 7
67985: PPUSH
67986: LD_VAR 0 8
67990: PPUSH
67991: LD_VAR 0 9
67995: PPUSH
67996: LD_VAR 0 10
68000: PPUSH
68001: LD_VAR 0 11
68005: PPUSH
68006: CALL 24264 0 11
68010: GO 68013
68012: POP
// end ;
68013: PPOPN 11
68015: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68016: LD_VAR 0 1
68020: PPUSH
68021: LD_VAR 0 2
68025: PPUSH
68026: LD_VAR 0 3
68030: PPUSH
68031: LD_VAR 0 4
68035: PPUSH
68036: LD_VAR 0 5
68040: PPUSH
68041: CALL 26358 0 5
// end ; end_of_file
68045: PPOPN 5
68047: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68048: LD_VAR 0 1
68052: PPUSH
68053: LD_VAR 0 2
68057: PPUSH
68058: LD_VAR 0 3
68062: PPUSH
68063: LD_VAR 0 4
68067: PPUSH
68068: LD_VAR 0 5
68072: PPUSH
68073: LD_VAR 0 6
68077: PPUSH
68078: CALL 13072 0 6
// end ;
68082: PPOPN 6
68084: END
