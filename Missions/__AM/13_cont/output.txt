// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; export eventArabianAttack , eventRussianAttack ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak := 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus := 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot := 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched := 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter := 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits := [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter := 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources := [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles := [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 := 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 := 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 := 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 := 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 := 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// eventArabianAttack := 1 ;
 154: LD_ADDR_EXP 43
 158: PUSH
 159: LD_INT 1
 161: ST_TO_ADDR
// eventRussianAttack := 2 ;
 162: LD_ADDR_EXP 44
 166: PUSH
 167: LD_INT 2
 169: ST_TO_ADDR
// mission_prefix := 13f_ ;
 170: LD_ADDR_EXP 34
 174: PUSH
 175: LD_STRING 13f_
 177: ST_TO_ADDR
// debugMode := 0 ;
 178: LD_ADDR_EXP 40
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// achivCounter := 0 ;
 186: LD_ADDR_EXP 41
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// if Difficulty = 1 then
 194: LD_OWVAR 67
 198: PUSH
 199: LD_INT 1
 201: EQUAL
 202: IFFALSE 211
// RemoveEnvironmentArea ( oilBlockArea ) ;
 204: LD_INT 15
 206: PPUSH
 207: CALL_OW 355
// PrepareVehicles ;
 211: CALL 1195 0 0
// PrepareHeroes ;
 215: CALL 452 0 0
// PrepareAmericansRandom ;
 219: CALL 1099 0 0
// PrepareDifficulty ;
 223: CALL 8260 0 0
// Action ;
 227: CALL 5231 0 0
// end ;
 231: END
// every 0 0$1 trigger debugMode do var i , j ;
 232: LD_EXP 40
 236: IFFALSE 407
 238: GO 240
 240: DISABLE
 241: LD_INT 0
 243: PPUSH
 244: PPUSH
// begin enable ;
 245: ENABLE
// FogOff ( true ) ;
 246: LD_INT 1
 248: PPUSH
 249: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 253: LD_ADDR_VAR 0 1
 257: PUSH
 258: LD_INT 22
 260: PUSH
 261: LD_INT 1
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PUSH
 268: LD_INT 21
 270: PUSH
 271: LD_INT 1
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: PPUSH
 282: CALL_OW 69
 286: PUSH
 287: FOR_IN
 288: IFFALSE 304
// SetLives ( i , 1000 ) ;
 290: LD_VAR 0 1
 294: PPUSH
 295: LD_INT 1000
 297: PPUSH
 298: CALL_OW 234
 302: GO 287
 304: POP
 305: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 306: LD_ADDR_VAR 0 1
 310: PUSH
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 2
 323: PUSH
 324: LD_INT 30
 326: PUSH
 327: LD_INT 0
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: PUSH
 334: LD_INT 30
 336: PUSH
 337: LD_INT 1
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: LIST
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: PPUSH
 353: CALL_OW 69
 357: PUSH
 358: FOR_IN
 359: IFFALSE 405
// for j := 1 to 3 do
 361: LD_ADDR_VAR 0 2
 365: PUSH
 366: DOUBLE
 367: LD_INT 1
 369: DEC
 370: ST_TO_ADDR
 371: LD_INT 3
 373: PUSH
 374: FOR_TO
 375: IFFALSE 401
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 377: LD_VAR 0 1
 381: PPUSH
 382: CALL_OW 274
 386: PPUSH
 387: LD_VAR 0 2
 391: PPUSH
 392: LD_INT 9999
 394: PPUSH
 395: CALL_OW 277
 399: GO 374
 401: POP
 402: POP
 403: GO 358
 405: POP
 406: POP
// end ;
 407: PPOPN 2
 409: END
// every 0 0$1 trigger achivCounter >= 2 do
 410: LD_EXP 41
 414: PUSH
 415: LD_INT 2
 417: GREATEREQUAL
 418: IFFALSE 430
 420: GO 422
 422: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 423: LD_STRING ACH_REMOTE
 425: PPUSH
 426: CALL_OW 543
 430: END
// every 0 0$1 trigger destroyCounter >= 30 do
 431: LD_EXP 42
 435: PUSH
 436: LD_INT 30
 438: GREATEREQUAL
 439: IFFALSE 451
 441: GO 443
 443: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 444: LD_STRING ACH_DEFMASTER
 446: PPUSH
 447: CALL_OW 543
 451: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 452: LD_INT 0
 454: PPUSH
 455: PPUSH
 456: PPUSH
 457: PPUSH
// uc_side = 1 ;
 458: LD_ADDR_OWVAR 20
 462: PUSH
 463: LD_INT 1
 465: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 466: LD_ADDR_EXP 1
 470: PUSH
 471: LD_STRING JMM
 473: PPUSH
 474: LD_EXP 40
 478: NOT
 479: PPUSH
 480: LD_STRING 13c_
 482: PPUSH
 483: CALL 29969 0 3
 487: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 488: LD_ADDR_EXP 2
 492: PUSH
 493: LD_STRING Stevens
 495: PPUSH
 496: LD_EXP 40
 500: NOT
 501: PPUSH
 502: LD_STRING 13c_
 504: PPUSH
 505: CALL 29969 0 3
 509: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 510: LD_ADDR_EXP 3
 514: PUSH
 515: LD_STRING Lisa
 517: PPUSH
 518: LD_EXP 40
 522: NOT
 523: PPUSH
 524: LD_STRING 13c_
 526: PPUSH
 527: CALL 29969 0 3
 531: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 532: LD_ADDR_EXP 4
 536: PUSH
 537: LD_STRING Donaldson
 539: PPUSH
 540: LD_EXP 40
 544: NOT
 545: PPUSH
 546: LD_STRING 13c_
 548: PPUSH
 549: CALL 29969 0 3
 553: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 554: LD_ADDR_EXP 5
 558: PUSH
 559: LD_STRING Bobby
 561: PPUSH
 562: LD_EXP 40
 566: NOT
 567: PPUSH
 568: LD_STRING 13c_
 570: PPUSH
 571: CALL 29969 0 3
 575: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 576: LD_ADDR_EXP 6
 580: PUSH
 581: LD_STRING Cyrus
 583: PPUSH
 584: LD_EXP 40
 588: NOT
 589: PPUSH
 590: LD_STRING 13c_
 592: PPUSH
 593: CALL 29969 0 3
 597: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 598: LD_ADDR_EXP 7
 602: PUSH
 603: LD_STRING Denis
 605: PPUSH
 606: LD_EXP 40
 610: NOT
 611: PPUSH
 612: LD_STRING 13c_
 614: PPUSH
 615: CALL 29969 0 3
 619: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 620: LD_ADDR_EXP 8
 624: PUSH
 625: LD_STRING Brown
 627: PPUSH
 628: LD_EXP 40
 632: NOT
 633: PPUSH
 634: LD_STRING 13c_
 636: PPUSH
 637: CALL 29969 0 3
 641: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true , 13c_ ) ;
 642: LD_ADDR_EXP 9
 646: PUSH
 647: LD_STRING Gladstone
 649: PPUSH
 650: LD_INT 1
 652: PPUSH
 653: LD_STRING 13c_
 655: PPUSH
 656: CALL 29969 0 3
 660: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true , 13c_ ) ;
 661: LD_ADDR_EXP 10
 665: PUSH
 666: LD_STRING Houten
 668: PPUSH
 669: LD_INT 1
 671: PPUSH
 672: LD_STRING 13c_
 674: PPUSH
 675: CALL 29969 0 3
 679: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , true , 13c_ ) ;
 680: LD_ADDR_EXP 11
 684: PUSH
 685: LD_STRING Cornel
 687: PPUSH
 688: LD_INT 1
 690: PPUSH
 691: LD_STRING 13c_
 693: PPUSH
 694: CALL 29969 0 3
 698: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true , 13c_ ) ;
 699: LD_ADDR_EXP 12
 703: PUSH
 704: LD_STRING Gary
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: LD_STRING 13c_
 712: PPUSH
 713: CALL 29969 0 3
 717: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 13c_ ) ;
 718: LD_ADDR_EXP 13
 722: PUSH
 723: LD_STRING Frank
 725: PPUSH
 726: LD_INT 1
 728: PPUSH
 729: LD_STRING 13c_
 731: PPUSH
 732: CALL 29969 0 3
 736: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true , 13c_ ) ;
 737: LD_ADDR_EXP 14
 741: PUSH
 742: LD_STRING Kikuchi
 744: PPUSH
 745: LD_INT 1
 747: PPUSH
 748: LD_STRING 13c_
 750: PPUSH
 751: CALL 29969 0 3
 755: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 756: LD_ADDR_EXP 15
 760: PUSH
 761: LD_STRING Powell
 763: PPUSH
 764: LD_INT 0
 766: PPUSH
 767: LD_STRING 
 769: PPUSH
 770: CALL 29969 0 3
 774: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 775: LD_ADDR_VAR 0 2
 779: PUSH
 780: LD_EXP 1
 784: PUSH
 785: LD_EXP 2
 789: PUSH
 790: LD_EXP 3
 794: PUSH
 795: LD_EXP 4
 799: PUSH
 800: LD_EXP 5
 804: PUSH
 805: LD_EXP 6
 809: PUSH
 810: LD_EXP 7
 814: PUSH
 815: LD_EXP 8
 819: PUSH
 820: LD_EXP 9
 824: PUSH
 825: LD_EXP 10
 829: PUSH
 830: LD_EXP 11
 834: PUSH
 835: LD_EXP 12
 839: PUSH
 840: LD_EXP 13
 844: PUSH
 845: LD_EXP 14
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: LIST
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 866: LD_ADDR_VAR 0 3
 870: PUSH
 871: LD_INT 22
 873: PUSH
 874: LD_INT 1
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 33
 883: PUSH
 884: LD_INT 1
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: PUSH
 891: LD_INT 21
 893: PUSH
 894: LD_INT 2
 896: PUSH
 897: EMPTY
 898: LIST
 899: LIST
 900: PUSH
 901: EMPTY
 902: LIST
 903: LIST
 904: LIST
 905: PPUSH
 906: CALL_OW 69
 910: ST_TO_ADDR
// for i = tmp downto 1 do
 911: LD_ADDR_VAR 0 4
 915: PUSH
 916: DOUBLE
 917: LD_VAR 0 2
 921: INC
 922: ST_TO_ADDR
 923: LD_INT 1
 925: PUSH
 926: FOR_DOWNTO
 927: IFFALSE 964
// if not tmp [ i ] then
 929: LD_VAR 0 2
 933: PUSH
 934: LD_VAR 0 4
 938: ARRAY
 939: NOT
 940: IFFALSE 962
// tmp := Delete ( tmp , i ) ;
 942: LD_ADDR_VAR 0 2
 946: PUSH
 947: LD_VAR 0 2
 951: PPUSH
 952: LD_VAR 0 4
 956: PPUSH
 957: CALL_OW 3
 961: ST_TO_ADDR
 962: GO 926
 964: POP
 965: POP
// for i = 1 to tmp do
 966: LD_ADDR_VAR 0 4
 970: PUSH
 971: DOUBLE
 972: LD_INT 1
 974: DEC
 975: ST_TO_ADDR
 976: LD_VAR 0 2
 980: PUSH
 981: FOR_TO
 982: IFFALSE 1012
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
 984: LD_VAR 0 2
 988: PUSH
 989: LD_VAR 0 4
 993: ARRAY
 994: PPUSH
 995: LD_VAR 0 3
 999: PUSH
1000: LD_VAR 0 4
1004: ARRAY
1005: PPUSH
1006: CALL_OW 52
1010: GO 981
1012: POP
1013: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1014: LD_INT 22
1016: PUSH
1017: LD_INT 1
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 25
1026: PUSH
1027: LD_INT 2
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: PPUSH
1038: CALL_OW 69
1042: PUSH
1043: LD_INT 0
1045: EQUAL
1046: PUSH
1047: LD_INT 22
1049: PUSH
1050: LD_INT 1
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: PUSH
1057: LD_INT 34
1059: PUSH
1060: LD_INT 13
1062: PUSH
1063: EMPTY
1064: LIST
1065: LIST
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PPUSH
1071: CALL_OW 69
1075: PUSH
1076: LD_INT 0
1078: EQUAL
1079: AND
1080: IFFALSE 1094
// SetClass ( JMM , 2 ) ;
1082: LD_EXP 1
1086: PPUSH
1087: LD_INT 2
1089: PPUSH
1090: CALL_OW 336
// end ;
1094: LD_VAR 0 1
1098: RET
// export function PrepareAmericansRandom ; var i ; begin
1099: LD_INT 0
1101: PPUSH
1102: PPUSH
// uc_side = 1 ;
1103: LD_ADDR_OWVAR 20
1107: PUSH
1108: LD_INT 1
1110: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1111: LD_ADDR_EXP 16
1115: PUSH
1116: LD_STRING 13c_others
1118: PPUSH
1119: CALL_OW 31
1123: ST_TO_ADDR
// for i in others13 do
1124: LD_ADDR_VAR 0 2
1128: PUSH
1129: LD_EXP 16
1133: PUSH
1134: FOR_IN
1135: IFFALSE 1188
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1137: LD_VAR 0 2
1141: PPUSH
1142: LD_INT 22
1144: PUSH
1145: LD_INT 1
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 21
1154: PUSH
1155: LD_INT 2
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: PUSH
1162: LD_INT 58
1164: PUSH
1165: EMPTY
1166: LIST
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: PPUSH
1173: CALL_OW 69
1177: PUSH
1178: LD_INT 1
1180: ARRAY
1181: PPUSH
1182: CALL_OW 52
1186: GO 1134
1188: POP
1189: POP
// end ;
1190: LD_VAR 0 1
1194: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1195: LD_INT 0
1197: PPUSH
1198: PPUSH
1199: PPUSH
1200: PPUSH
1201: PPUSH
1202: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1203: LD_ADDR_VAR 0 5
1207: PUSH
1208: LD_STRING 13_VehiclesIn13_1
1210: PPUSH
1211: LD_INT 1
1213: PUSH
1214: LD_INT 5
1216: PUSH
1217: LD_INT 3
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 6
1225: PUSH
1226: LD_INT 100
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 3
1245: PUSH
1246: LD_INT 1
1248: PUSH
1249: LD_INT 6
1251: PUSH
1252: LD_INT 100
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: PUSH
1263: LD_INT 1
1265: PUSH
1266: LD_INT 5
1268: PUSH
1269: LD_INT 3
1271: PUSH
1272: LD_INT 1
1274: PUSH
1275: LD_INT 6
1277: PUSH
1278: LD_INT 100
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_INT 1
1291: PUSH
1292: LD_INT 5
1294: PUSH
1295: LD_INT 3
1297: PUSH
1298: LD_INT 1
1300: PUSH
1301: LD_INT 6
1303: PUSH
1304: LD_INT 100
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: LIST
1314: PUSH
1315: LD_INT 1
1317: PUSH
1318: LD_INT 5
1320: PUSH
1321: LD_INT 3
1323: PUSH
1324: LD_INT 1
1326: PUSH
1327: LD_INT 6
1329: PUSH
1330: LD_INT 100
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: PUSH
1341: LD_INT 1
1343: PUSH
1344: LD_INT 5
1346: PUSH
1347: LD_INT 3
1349: PUSH
1350: LD_INT 1
1352: PUSH
1353: LD_INT 6
1355: PUSH
1356: LD_INT 100
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: PUSH
1367: LD_INT 1
1369: PUSH
1370: LD_INT 5
1372: PUSH
1373: LD_INT 3
1375: PUSH
1376: LD_INT 1
1378: PUSH
1379: LD_INT 6
1381: PUSH
1382: LD_INT 100
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 1
1395: PUSH
1396: LD_INT 5
1398: PUSH
1399: LD_INT 3
1401: PUSH
1402: LD_INT 1
1404: PUSH
1405: LD_INT 6
1407: PUSH
1408: LD_INT 100
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: PPUSH
1429: CALL_OW 30
1433: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1434: LD_ADDR_EXP 24
1438: PUSH
1439: LD_STRING 13_ResourcesInCargo13_1
1441: PPUSH
1442: EMPTY
1443: PPUSH
1444: CALL_OW 30
1448: ST_TO_ADDR
// cargoList = [ ] ;
1449: LD_ADDR_VAR 0 6
1453: PUSH
1454: EMPTY
1455: ST_TO_ADDR
// uc_side = 1 ;
1456: LD_ADDR_OWVAR 20
1460: PUSH
1461: LD_INT 1
1463: ST_TO_ADDR
// if vehicles then
1464: LD_VAR 0 5
1468: IFFALSE 1815
// begin for i := 1 to vehicles do
1470: LD_ADDR_VAR 0 2
1474: PUSH
1475: DOUBLE
1476: LD_INT 1
1478: DEC
1479: ST_TO_ADDR
1480: LD_VAR 0 5
1484: PUSH
1485: FOR_TO
1486: IFFALSE 1635
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1488: LD_ADDR_OWVAR 21
1492: PUSH
1493: LD_VAR 0 5
1497: PUSH
1498: LD_VAR 0 2
1502: ARRAY
1503: PUSH
1504: LD_INT 1
1506: ARRAY
1507: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1508: LD_ADDR_OWVAR 37
1512: PUSH
1513: LD_VAR 0 5
1517: PUSH
1518: LD_VAR 0 2
1522: ARRAY
1523: PUSH
1524: LD_INT 2
1526: ARRAY
1527: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1528: LD_ADDR_OWVAR 39
1532: PUSH
1533: LD_VAR 0 5
1537: PUSH
1538: LD_VAR 0 2
1542: ARRAY
1543: PUSH
1544: LD_INT 3
1546: ARRAY
1547: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1548: LD_ADDR_OWVAR 38
1552: PUSH
1553: LD_VAR 0 5
1557: PUSH
1558: LD_VAR 0 2
1562: ARRAY
1563: PUSH
1564: LD_INT 4
1566: ARRAY
1567: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1568: LD_ADDR_OWVAR 40
1572: PUSH
1573: LD_VAR 0 5
1577: PUSH
1578: LD_VAR 0 2
1582: ARRAY
1583: PUSH
1584: LD_INT 5
1586: ARRAY
1587: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1588: LD_ADDR_OWVAR 41
1592: PUSH
1593: LD_INT 40
1595: ST_TO_ADDR
// veh = CreateVehicle ;
1596: LD_ADDR_VAR 0 4
1600: PUSH
1601: CALL_OW 45
1605: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1606: LD_VAR 0 4
1610: PPUSH
1611: LD_INT 1
1613: PPUSH
1614: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1618: LD_VAR 0 4
1622: PPUSH
1623: LD_INT 2
1625: PPUSH
1626: LD_INT 0
1628: PPUSH
1629: CALL_OW 49
// end ;
1633: GO 1485
1635: POP
1636: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1637: LD_ADDR_VAR 0 6
1641: PUSH
1642: LD_INT 22
1644: PUSH
1645: LD_INT 1
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: LD_INT 21
1654: PUSH
1655: LD_INT 2
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PUSH
1662: LD_INT 34
1664: PUSH
1665: LD_INT 12
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: LIST
1676: PPUSH
1677: CALL_OW 69
1681: ST_TO_ADDR
// if cargoList then
1682: LD_VAR 0 6
1686: IFFALSE 1815
// for i = 1 to cargoList do
1688: LD_ADDR_VAR 0 2
1692: PUSH
1693: DOUBLE
1694: LD_INT 1
1696: DEC
1697: ST_TO_ADDR
1698: LD_VAR 0 6
1702: PUSH
1703: FOR_TO
1704: IFFALSE 1813
// begin if resources then
1706: LD_EXP 24
1710: IFFALSE 1811
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1712: LD_VAR 0 6
1716: PUSH
1717: LD_VAR 0 2
1721: ARRAY
1722: PPUSH
1723: LD_INT 1
1725: PPUSH
1726: LD_EXP 24
1730: PUSH
1731: LD_VAR 0 2
1735: ARRAY
1736: PUSH
1737: LD_INT 1
1739: ARRAY
1740: PPUSH
1741: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1745: LD_VAR 0 6
1749: PUSH
1750: LD_VAR 0 2
1754: ARRAY
1755: PPUSH
1756: LD_INT 2
1758: PPUSH
1759: LD_EXP 24
1763: PUSH
1764: LD_VAR 0 2
1768: ARRAY
1769: PUSH
1770: LD_INT 2
1772: ARRAY
1773: PPUSH
1774: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1778: LD_VAR 0 6
1782: PUSH
1783: LD_VAR 0 2
1787: ARRAY
1788: PPUSH
1789: LD_INT 3
1791: PPUSH
1792: LD_EXP 24
1796: PUSH
1797: LD_VAR 0 2
1801: ARRAY
1802: PUSH
1803: LD_INT 3
1805: ARRAY
1806: PPUSH
1807: CALL_OW 291
// end ; end ;
1811: GO 1703
1813: POP
1814: POP
// end ; end ;
1815: LD_VAR 0 1
1819: RET
// export function PowellSupport ; var i , veh , un ; begin
1820: LD_INT 0
1822: PPUSH
1823: PPUSH
1824: PPUSH
1825: PPUSH
// for i := 1 to [ 4 , 3 , 2 , 2 ] [ Difficulty ] do
1826: LD_ADDR_VAR 0 2
1830: PUSH
1831: DOUBLE
1832: LD_INT 1
1834: DEC
1835: ST_TO_ADDR
1836: LD_INT 4
1838: PUSH
1839: LD_INT 3
1841: PUSH
1842: LD_INT 2
1844: PUSH
1845: LD_INT 2
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: PUSH
1854: LD_OWVAR 67
1858: ARRAY
1859: PUSH
1860: FOR_TO
1861: IFFALSE 2125
// begin uc_nation := 1 ;
1863: LD_ADDR_OWVAR 21
1867: PUSH
1868: LD_INT 1
1870: ST_TO_ADDR
// uc_side := 1 ;
1871: LD_ADDR_OWVAR 20
1875: PUSH
1876: LD_INT 1
1878: ST_TO_ADDR
// vc_engine := engine_siberite ;
1879: LD_ADDR_OWVAR 39
1883: PUSH
1884: LD_INT 3
1886: ST_TO_ADDR
// vc_control := control_manual ;
1887: LD_ADDR_OWVAR 38
1891: PUSH
1892: LD_INT 1
1894: ST_TO_ADDR
// vc_weapon := [ us_laser , us_heavy_gun , us_laser , us_double_gun , us_double_gun ] [ Difficulty + rand ( 0 , 1 ) ] ;
1895: LD_ADDR_OWVAR 40
1899: PUSH
1900: LD_INT 9
1902: PUSH
1903: LD_INT 6
1905: PUSH
1906: LD_INT 9
1908: PUSH
1909: LD_INT 5
1911: PUSH
1912: LD_INT 5
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: PUSH
1922: LD_OWVAR 67
1926: PUSH
1927: LD_INT 0
1929: PPUSH
1930: LD_INT 1
1932: PPUSH
1933: CALL_OW 12
1937: PLUS
1938: ARRAY
1939: ST_TO_ADDR
// if vc_weapon = us_heavy_gun then
1940: LD_OWVAR 40
1944: PUSH
1945: LD_INT 6
1947: EQUAL
1948: IFFALSE 1977
// vc_chassis := [ us_morphling , us_heavy_tracked , us_heavy_tracked ] [ Difficulty ] else
1950: LD_ADDR_OWVAR 37
1954: PUSH
1955: LD_INT 5
1957: PUSH
1958: LD_INT 4
1960: PUSH
1961: LD_INT 4
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: LIST
1968: PUSH
1969: LD_OWVAR 67
1973: ARRAY
1974: ST_TO_ADDR
1975: GO 2012
// vc_chassis := [ us_morphling , us_heavy_tracked , us_medium_tracked , us_medium_tracked ] [ rand ( 1 , 4 ) ] ;
1977: LD_ADDR_OWVAR 37
1981: PUSH
1982: LD_INT 5
1984: PUSH
1985: LD_INT 4
1987: PUSH
1988: LD_INT 3
1990: PUSH
1991: LD_INT 3
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: PUSH
2000: LD_INT 1
2002: PPUSH
2003: LD_INT 4
2005: PPUSH
2006: CALL_OW 12
2010: ARRAY
2011: ST_TO_ADDR
// veh = CreateVehicle ;
2012: LD_ADDR_VAR 0 3
2016: PUSH
2017: CALL_OW 45
2021: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2022: LD_VAR 0 3
2026: PPUSH
2027: LD_INT 2
2029: PPUSH
2030: LD_INT 0
2032: PPUSH
2033: CALL_OW 49
// SetDir ( veh , 1 ) ;
2037: LD_VAR 0 3
2041: PPUSH
2042: LD_INT 1
2044: PPUSH
2045: CALL_OW 233
// hc_gallery :=  ;
2049: LD_ADDR_OWVAR 33
2053: PUSH
2054: LD_STRING 
2056: ST_TO_ADDR
// hc_name :=  ;
2057: LD_ADDR_OWVAR 26
2061: PUSH
2062: LD_STRING 
2064: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2065: LD_INT 0
2067: PPUSH
2068: LD_INT 3
2070: PPUSH
2071: LD_INT 9
2073: PUSH
2074: LD_INT 8
2076: PUSH
2077: LD_INT 8
2079: PUSH
2080: LD_INT 7
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: PUSH
2089: LD_OWVAR 67
2093: ARRAY
2094: PPUSH
2095: CALL_OW 380
// un := CreateHuman ;
2099: LD_ADDR_VAR 0 4
2103: PUSH
2104: CALL_OW 44
2108: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2109: LD_VAR 0 4
2113: PPUSH
2114: LD_VAR 0 3
2118: PPUSH
2119: CALL_OW 52
// end ;
2123: GO 1860
2125: POP
2126: POP
// for i := 1 to [ 2 , 2 , 2 , 1 ] [ Difficulty ] do
2127: LD_ADDR_VAR 0 2
2131: PUSH
2132: DOUBLE
2133: LD_INT 1
2135: DEC
2136: ST_TO_ADDR
2137: LD_INT 2
2139: PUSH
2140: LD_INT 2
2142: PUSH
2143: LD_INT 2
2145: PUSH
2146: LD_INT 1
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: PUSH
2155: LD_OWVAR 67
2159: ARRAY
2160: PUSH
2161: FOR_TO
2162: IFFALSE 2237
// begin PrepareHuman ( false , class_soldier , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2164: LD_INT 0
2166: PPUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_INT 9
2172: PUSH
2173: LD_INT 8
2175: PUSH
2176: LD_INT 8
2178: PUSH
2179: LD_INT 7
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: PUSH
2188: LD_OWVAR 67
2192: ARRAY
2193: PPUSH
2194: CALL_OW 380
// un := CreateHuman ;
2198: LD_ADDR_VAR 0 4
2202: PUSH
2203: CALL_OW 44
2207: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2208: LD_VAR 0 4
2212: PPUSH
2213: LD_INT 1
2215: PPUSH
2216: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
2220: LD_VAR 0 4
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
// end ;
2235: GO 2161
2237: POP
2238: POP
// end ; end_of_file
2239: LD_VAR 0 1
2243: RET
// export function PrepareBurlak ; begin
2244: LD_INT 0
2246: PPUSH
// uc_side := 7 ;
2247: LD_ADDR_OWVAR 20
2251: PUSH
2252: LD_INT 7
2254: ST_TO_ADDR
// uc_nation := 3 ;
2255: LD_ADDR_OWVAR 21
2259: PUSH
2260: LD_INT 3
2262: ST_TO_ADDR
// vc_engine := engine_siberite ;
2263: LD_ADDR_OWVAR 39
2267: PUSH
2268: LD_INT 3
2270: ST_TO_ADDR
// vc_control := control_manual ;
2271: LD_ADDR_OWVAR 38
2275: PUSH
2276: LD_INT 1
2278: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ Difficulty ] ;
2279: LD_ADDR_OWVAR 40
2283: PUSH
2284: LD_INT 44
2286: PUSH
2287: LD_INT 45
2289: PUSH
2290: LD_INT 46
2292: PUSH
2293: LD_INT 46
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: LIST
2300: LIST
2301: PUSH
2302: LD_OWVAR 67
2306: ARRAY
2307: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
2308: LD_ADDR_OWVAR 37
2312: PUSH
2313: LD_INT 24
2315: ST_TO_ADDR
// Masha := CreateVehicle ;
2316: LD_ADDR_EXP 18
2320: PUSH
2321: CALL_OW 45
2325: ST_TO_ADDR
// SetDir ( Masha , 2 ) ;
2326: LD_EXP 18
2330: PPUSH
2331: LD_INT 2
2333: PPUSH
2334: CALL_OW 233
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2338: LD_EXP 18
2342: PPUSH
2343: LD_INT 3
2345: PPUSH
2346: LD_INT 0
2348: PPUSH
2349: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2353: LD_EXP 18
2357: PPUSH
2358: LD_INT 1
2360: PPUSH
2361: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2365: LD_ADDR_EXP 17
2369: PUSH
2370: LD_STRING Burlak
2372: PPUSH
2373: LD_INT 0
2375: PPUSH
2376: LD_STRING 
2378: PPUSH
2379: CALL 29969 0 3
2383: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2384: LD_EXP 17
2388: PPUSH
2389: LD_EXP 18
2393: PPUSH
2394: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2398: LD_EXP 18
2402: PPUSH
2403: LD_INT 107
2405: PPUSH
2406: LD_INT 118
2408: PPUSH
2409: CALL_OW 114
// spawnBurlak := 1 ;
2413: LD_ADDR_EXP 27
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// end ;
2421: LD_VAR 0 1
2425: RET
// export function BurlakArmy ; var i , veh , tmp , bazooka ; begin
2426: LD_INT 0
2428: PPUSH
2429: PPUSH
2430: PPUSH
2431: PPUSH
2432: PPUSH
// uc_side := 7 ;
2433: LD_ADDR_OWVAR 20
2437: PUSH
2438: LD_INT 7
2440: ST_TO_ADDR
// uc_nation := 3 ;
2441: LD_ADDR_OWVAR 21
2445: PUSH
2446: LD_INT 3
2448: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
2449: LD_ADDR_EXP 19
2453: PUSH
2454: LD_STRING Gnyevko
2456: PPUSH
2457: LD_INT 0
2459: PPUSH
2460: LD_STRING 
2462: PPUSH
2463: CALL 29969 0 3
2467: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2468: LD_ADDR_EXP 20
2472: PUSH
2473: LD_STRING Titov
2475: PPUSH
2476: LD_INT 0
2478: PPUSH
2479: LD_STRING 
2481: PPUSH
2482: CALL 29969 0 3
2486: ST_TO_ADDR
// Xavier := PrepareUnit ( Xavier2 , false ,  ) ;
2487: LD_ADDR_EXP 21
2491: PUSH
2492: LD_STRING Xavier2
2494: PPUSH
2495: LD_INT 0
2497: PPUSH
2498: LD_STRING 
2500: PPUSH
2501: CALL 29969 0 3
2505: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
2506: LD_ADDR_EXP 22
2510: PUSH
2511: LD_STRING Belkov
2513: PPUSH
2514: LD_INT 0
2516: PPUSH
2517: LD_STRING 
2519: PPUSH
2520: CALL 29969 0 3
2524: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2525: LD_ADDR_EXP 23
2529: PUSH
2530: LD_STRING Lipshchin
2532: PPUSH
2533: LD_INT 0
2535: PPUSH
2536: LD_STRING 
2538: PPUSH
2539: CALL 29969 0 3
2543: ST_TO_ADDR
// for i = 1 to 5 do
2544: LD_ADDR_VAR 0 2
2548: PUSH
2549: DOUBLE
2550: LD_INT 1
2552: DEC
2553: ST_TO_ADDR
2554: LD_INT 5
2556: PUSH
2557: FOR_TO
2558: IFFALSE 2683
// begin vc_engine := engine_siberite ;
2560: LD_ADDR_OWVAR 39
2564: PUSH
2565: LD_INT 3
2567: ST_TO_ADDR
// vc_control := control_manual ;
2568: LD_ADDR_OWVAR 38
2572: PUSH
2573: LD_INT 1
2575: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun , ru_time_lapser ] [ rand ( 1 , 5 ) ] ;
2576: LD_ADDR_OWVAR 40
2580: PUSH
2581: LD_INT 43
2583: PUSH
2584: LD_INT 45
2586: PUSH
2587: LD_INT 45
2589: PUSH
2590: LD_INT 44
2592: PUSH
2593: LD_INT 49
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: LIST
2600: LIST
2601: LIST
2602: PUSH
2603: LD_INT 1
2605: PPUSH
2606: LD_INT 5
2608: PPUSH
2609: CALL_OW 12
2613: ARRAY
2614: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] ;
2615: LD_ADDR_OWVAR 37
2619: PUSH
2620: LD_INT 22
2622: PUSH
2623: LD_INT 22
2625: PUSH
2626: LD_INT 24
2628: PUSH
2629: LD_INT 24
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: LIST
2636: LIST
2637: PUSH
2638: LD_OWVAR 67
2642: ARRAY
2643: ST_TO_ADDR
// veh = CreateVehicle ;
2644: LD_ADDR_VAR 0 3
2648: PUSH
2649: CALL_OW 45
2653: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2654: LD_VAR 0 3
2658: PPUSH
2659: LD_INT 2
2661: PPUSH
2662: CALL_OW 233
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2666: LD_VAR 0 3
2670: PPUSH
2671: LD_INT 3
2673: PPUSH
2674: LD_INT 0
2676: PPUSH
2677: CALL_OW 49
// end ;
2681: GO 2557
2683: POP
2684: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2685: LD_ADDR_VAR 0 4
2689: PUSH
2690: LD_INT 22
2692: PUSH
2693: LD_INT 7
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PUSH
2700: LD_INT 21
2702: PUSH
2703: LD_INT 2
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 58
2712: PUSH
2713: EMPTY
2714: LIST
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: LIST
2720: PPUSH
2721: CALL_OW 69
2725: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2726: LD_EXP 19
2730: PPUSH
2731: LD_VAR 0 4
2735: PUSH
2736: LD_INT 1
2738: ARRAY
2739: PPUSH
2740: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2744: LD_EXP 20
2748: PPUSH
2749: LD_VAR 0 4
2753: PUSH
2754: LD_INT 2
2756: ARRAY
2757: PPUSH
2758: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2762: LD_EXP 21
2766: PPUSH
2767: LD_VAR 0 4
2771: PUSH
2772: LD_INT 3
2774: ARRAY
2775: PPUSH
2776: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2780: LD_EXP 22
2784: PPUSH
2785: LD_VAR 0 4
2789: PUSH
2790: LD_INT 4
2792: ARRAY
2793: PPUSH
2794: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2798: LD_EXP 23
2802: PPUSH
2803: LD_VAR 0 4
2807: PUSH
2808: LD_INT 5
2810: ARRAY
2811: PPUSH
2812: CALL_OW 52
// SetClass ( Gnyevko , class_mechanic ) ;
2816: LD_EXP 19
2820: PPUSH
2821: LD_INT 3
2823: PPUSH
2824: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , class_bazooker ) ;
2828: LD_EXP 20
2832: PUSH
2833: LD_EXP 23
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PPUSH
2842: LD_INT 9
2844: PPUSH
2845: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2849: LD_ADDR_VAR 0 4
2853: PUSH
2854: LD_INT 22
2856: PUSH
2857: LD_INT 7
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PPUSH
2864: CALL_OW 69
2868: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2869: LD_VAR 0 4
2873: PPUSH
2874: LD_INT 107
2876: PPUSH
2877: LD_INT 118
2879: PPUSH
2880: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2884: LD_INT 35
2886: PPUSH
2887: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) , Masha ) ;
2891: LD_VAR 0 4
2895: PPUSH
2896: LD_INT 34
2898: PUSH
2899: LD_INT 49
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 72
2910: PPUSH
2911: LD_EXP 18
2915: PPUSH
2916: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , 107 , 118 ) ;
2920: LD_VAR 0 4
2924: PPUSH
2925: LD_INT 3
2927: PUSH
2928: LD_INT 34
2930: PUSH
2931: LD_INT 49
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PPUSH
2942: CALL_OW 72
2946: PPUSH
2947: LD_INT 107
2949: PPUSH
2950: LD_INT 118
2952: PPUSH
2953: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
2957: LD_ADDR_VAR 0 5
2961: PUSH
2962: LD_EXP 20
2966: PUSH
2967: LD_EXP 23
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PPUSH
2976: LD_INT 50
2978: PUSH
2979: EMPTY
2980: LIST
2981: PUSH
2982: LD_INT 3
2984: PUSH
2985: LD_INT 54
2987: PUSH
2988: EMPTY
2989: LIST
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PPUSH
2999: CALL_OW 72
3003: ST_TO_ADDR
// if bazooka then
3004: LD_VAR 0 5
3008: IFFALSE 3050
// begin for i in bazooka do
3010: LD_ADDR_VAR 0 2
3014: PUSH
3015: LD_VAR 0 5
3019: PUSH
3020: FOR_IN
3021: IFFALSE 3048
// if See ( 1 , i ) then
3023: LD_INT 1
3025: PPUSH
3026: LD_VAR 0 2
3030: PPUSH
3031: CALL_OW 292
3035: IFFALSE 3046
// ComSpaceTimeShoot ( i ) ;
3037: LD_VAR 0 2
3041: PPUSH
3042: CALL 30916 0 1
3046: GO 3020
3048: POP
3049: POP
// end ; until UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) = 0 or IsDying ( Masha ) ;
3050: LD_VAR 0 4
3054: PPUSH
3055: LD_INT 34
3057: PUSH
3058: LD_INT 49
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PPUSH
3065: CALL_OW 72
3069: PUSH
3070: LD_INT 0
3072: EQUAL
3073: PUSH
3074: LD_EXP 18
3078: PPUSH
3079: CALL_OW 303
3083: OR
3084: IFFALSE 2884
// repeat wait ( 0 0$1 ) ;
3086: LD_INT 35
3088: PPUSH
3089: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
3093: LD_ADDR_VAR 0 4
3097: PUSH
3098: LD_INT 22
3100: PUSH
3101: LD_INT 7
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PPUSH
3108: CALL_OW 69
3112: PUSH
3113: LD_EXP 17
3117: DIFF
3118: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
3119: LD_VAR 0 4
3123: PPUSH
3124: LD_INT 107
3126: PPUSH
3127: LD_INT 118
3129: PPUSH
3130: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3134: LD_ADDR_VAR 0 5
3138: PUSH
3139: LD_EXP 20
3143: PUSH
3144: LD_EXP 23
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: PPUSH
3153: LD_INT 50
3155: PUSH
3156: EMPTY
3157: LIST
3158: PUSH
3159: LD_INT 3
3161: PUSH
3162: LD_INT 54
3164: PUSH
3165: EMPTY
3166: LIST
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 72
3180: ST_TO_ADDR
// if bazooka then
3181: LD_VAR 0 5
3185: IFFALSE 3227
// begin for i in bazooka do
3187: LD_ADDR_VAR 0 2
3191: PUSH
3192: LD_VAR 0 5
3196: PUSH
3197: FOR_IN
3198: IFFALSE 3225
// if See ( 1 , i ) then
3200: LD_INT 1
3202: PPUSH
3203: LD_VAR 0 2
3207: PPUSH
3208: CALL_OW 292
3212: IFFALSE 3223
// ComSpaceTimeShoot ( i ) ;
3214: LD_VAR 0 2
3218: PPUSH
3219: CALL 30916 0 1
3223: GO 3197
3225: POP
3226: POP
// end ; if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
3227: LD_EXP 17
3231: PPUSH
3232: CALL_OW 302
3236: PUSH
3237: LD_EXP 17
3241: PPUSH
3242: CALL_OW 310
3246: NOT
3247: AND
3248: IFFALSE 3265
// ComMoveXY ( Burlak , 107 , 118 ) ;
3250: LD_EXP 17
3254: PPUSH
3255: LD_INT 107
3257: PPUSH
3258: LD_INT 118
3260: PPUSH
3261: CALL_OW 111
// until not tmp ;
3265: LD_VAR 0 4
3269: NOT
3270: IFFALSE 3086
// end ;
3272: LD_VAR 0 1
3276: RET
// export function PrepareRussianAttack ; var i , un , veh , area , dir ; begin
3277: LD_INT 0
3279: PPUSH
3280: PPUSH
3281: PPUSH
3282: PPUSH
3283: PPUSH
3284: PPUSH
// result := [ ] ;
3285: LD_ADDR_VAR 0 1
3289: PUSH
3290: EMPTY
3291: ST_TO_ADDR
// dir := rand ( 1 , 2 ) ;
3292: LD_ADDR_VAR 0 6
3296: PUSH
3297: LD_INT 1
3299: PPUSH
3300: LD_INT 2
3302: PPUSH
3303: CALL_OW 12
3307: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
3308: LD_ADDR_VAR 0 5
3312: PUSH
3313: LD_INT 8
3315: PUSH
3316: LD_INT 9
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PUSH
3323: LD_VAR 0 6
3327: ARRAY
3328: ST_TO_ADDR
// for i := 1 to [ 6 , 8 , 10 , 11 ] [ Difficulty ] do
3329: LD_ADDR_VAR 0 2
3333: PUSH
3334: DOUBLE
3335: LD_INT 1
3337: DEC
3338: ST_TO_ADDR
3339: LD_INT 6
3341: PUSH
3342: LD_INT 8
3344: PUSH
3345: LD_INT 10
3347: PUSH
3348: LD_INT 11
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: PUSH
3357: LD_OWVAR 67
3361: ARRAY
3362: PUSH
3363: FOR_TO
3364: IFFALSE 3580
// begin uc_side := 3 ;
3366: LD_ADDR_OWVAR 20
3370: PUSH
3371: LD_INT 3
3373: ST_TO_ADDR
// uc_nation := 3 ;
3374: LD_ADDR_OWVAR 21
3378: PUSH
3379: LD_INT 3
3381: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] , [ ru_heavy_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] [ rand ( 1 , 5 ) ] , 100 ) ;
3382: LD_INT 24
3384: PPUSH
3385: LD_INT 3
3387: PPUSH
3388: LD_INT 1
3390: PUSH
3391: LD_INT 3
3393: PUSH
3394: EMPTY
3395: LIST
3396: LIST
3397: PUSH
3398: LD_INT 1
3400: PPUSH
3401: LD_INT 2
3403: PPUSH
3404: CALL_OW 12
3408: ARRAY
3409: PPUSH
3410: LD_INT 46
3412: PUSH
3413: LD_INT 46
3415: PUSH
3416: LD_INT 45
3418: PUSH
3419: LD_INT 47
3421: PUSH
3422: LD_INT 49
3424: PUSH
3425: EMPTY
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: PUSH
3432: LD_INT 1
3434: PPUSH
3435: LD_INT 5
3437: PPUSH
3438: CALL_OW 12
3442: ARRAY
3443: PPUSH
3444: LD_INT 100
3446: PPUSH
3447: CALL 34986 0 5
// veh := CreateVehicle ;
3451: LD_ADDR_VAR 0 4
3455: PUSH
3456: CALL_OW 45
3460: ST_TO_ADDR
// result := Join ( result , veh ) ;
3461: LD_ADDR_VAR 0 1
3465: PUSH
3466: LD_VAR 0 1
3470: PPUSH
3471: LD_VAR 0 4
3475: PPUSH
3476: CALL 66803 0 2
3480: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
3481: LD_VAR 0 4
3485: PPUSH
3486: LD_INT 3
3488: PUSH
3489: LD_INT 5
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: PUSH
3496: LD_VAR 0 6
3500: ARRAY
3501: PPUSH
3502: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3506: LD_VAR 0 4
3510: PPUSH
3511: LD_VAR 0 5
3515: PPUSH
3516: LD_INT 0
3518: PPUSH
3519: CALL_OW 49
// if vc_control = control_manual then
3523: LD_OWVAR 38
3527: PUSH
3528: LD_INT 1
3530: EQUAL
3531: IFFALSE 3578
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3533: LD_INT 0
3535: PPUSH
3536: LD_INT 7
3538: PUSH
3539: LD_INT 8
3541: PUSH
3542: LD_INT 9
3544: PUSH
3545: LD_INT 10
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: PUSH
3554: LD_OWVAR 67
3558: ARRAY
3559: PPUSH
3560: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3564: CALL_OW 44
3568: PPUSH
3569: LD_VAR 0 4
3573: PPUSH
3574: CALL_OW 52
// end ; end ;
3578: GO 3363
3580: POP
3581: POP
// for i in result do
3582: LD_ADDR_VAR 0 2
3586: PUSH
3587: LD_VAR 0 1
3591: PUSH
3592: FOR_IN
3593: IFFALSE 3609
// SetTag ( i , 10 ) ;
3595: LD_VAR 0 2
3599: PPUSH
3600: LD_INT 10
3602: PPUSH
3603: CALL_OW 109
3607: GO 3592
3609: POP
3610: POP
// RaiseSailEvent ( eventRussianAttack ) ;
3611: LD_EXP 44
3615: PPUSH
3616: CALL_OW 427
// end ; end_of_file
3620: LD_VAR 0 1
3624: RET
// export function DestroySibDeposit ; var un , rnd ; begin
3625: LD_INT 0
3627: PPUSH
3628: PPUSH
3629: PPUSH
// rnd := 0 ;
3630: LD_ADDR_VAR 0 3
3634: PUSH
3635: LD_INT 0
3637: ST_TO_ADDR
// uc_side := 8 ;
3638: LD_ADDR_OWVAR 20
3642: PUSH
3643: LD_INT 8
3645: ST_TO_ADDR
// uc_nation := 2 ;
3646: LD_ADDR_OWVAR 21
3650: PUSH
3651: LD_INT 2
3653: ST_TO_ADDR
// hc_name :=  ;
3654: LD_ADDR_OWVAR 26
3658: PUSH
3659: LD_STRING 
3661: ST_TO_ADDR
// hc_gallery :=  ;
3662: LD_ADDR_OWVAR 33
3666: PUSH
3667: LD_STRING 
3669: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 , 12 ] [ Difficulty ] , [ 10 , 11 , 12 , 12 ] [ Difficulty ] ] ;
3670: LD_ADDR_OWVAR 29
3674: PUSH
3675: LD_INT 10
3677: PUSH
3678: LD_INT 11
3680: PUSH
3681: LD_INT 12
3683: PUSH
3684: LD_INT 12
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: PUSH
3693: LD_OWVAR 67
3697: ARRAY
3698: PUSH
3699: LD_INT 10
3701: PUSH
3702: LD_INT 11
3704: PUSH
3705: LD_INT 12
3707: PUSH
3708: LD_INT 12
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: PUSH
3717: LD_OWVAR 67
3721: ARRAY
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: ST_TO_ADDR
// PrepareHuman ( false , 4 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3727: LD_INT 0
3729: PPUSH
3730: LD_INT 4
3732: PPUSH
3733: LD_INT 7
3735: PUSH
3736: LD_INT 8
3738: PUSH
3739: LD_INT 9
3741: PUSH
3742: LD_INT 10
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: PUSH
3751: LD_OWVAR 67
3755: ARRAY
3756: PPUSH
3757: CALL_OW 380
// un := CreateHuman ;
3761: LD_ADDR_VAR 0 2
3765: PUSH
3766: CALL_OW 44
3770: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3771: LD_VAR 0 2
3775: PPUSH
3776: LD_INT 8
3778: PUSH
3779: LD_INT 9
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: PUSH
3786: LD_INT 1
3788: PPUSH
3789: LD_INT 2
3791: PPUSH
3792: CALL_OW 12
3796: ARRAY
3797: PPUSH
3798: LD_INT 0
3800: PPUSH
3801: CALL_OW 49
// SetTag ( un , 1 ) ;
3805: LD_VAR 0 2
3809: PPUSH
3810: LD_INT 1
3812: PPUSH
3813: CALL_OW 109
// rnd := rand ( 1 , sibDeposits ) ;
3817: LD_ADDR_VAR 0 3
3821: PUSH
3822: LD_INT 1
3824: PPUSH
3825: LD_EXP 31
3829: PPUSH
3830: CALL_OW 12
3834: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
3835: LD_VAR 0 2
3839: PPUSH
3840: LD_EXP 31
3844: PUSH
3845: LD_VAR 0 3
3849: ARRAY
3850: PUSH
3851: LD_INT 1
3853: ARRAY
3854: PPUSH
3855: LD_EXP 31
3859: PUSH
3860: LD_VAR 0 3
3864: ARRAY
3865: PUSH
3866: LD_INT 2
3868: ARRAY
3869: PPUSH
3870: CALL_OW 158
// end ;
3874: LD_VAR 0 1
3878: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do var i ;
3879: LD_INT 22
3881: PUSH
3882: LD_INT 8
3884: PUSH
3885: EMPTY
3886: LIST
3887: LIST
3888: PUSH
3889: LD_INT 3
3891: PUSH
3892: LD_INT 61
3894: PUSH
3895: EMPTY
3896: LIST
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PUSH
3902: LD_INT 50
3904: PUSH
3905: EMPTY
3906: LIST
3907: PUSH
3908: LD_INT 33
3910: PUSH
3911: LD_INT 2
3913: PUSH
3914: EMPTY
3915: LIST
3916: LIST
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: PPUSH
3924: CALL_OW 69
3928: IFFALSE 4015
3930: GO 3932
3932: DISABLE
3933: LD_INT 0
3935: PPUSH
// begin enable ;
3936: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do
3937: LD_ADDR_VAR 0 1
3941: PUSH
3942: LD_INT 22
3944: PUSH
3945: LD_INT 8
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: PUSH
3952: LD_INT 3
3954: PUSH
3955: LD_INT 61
3957: PUSH
3958: EMPTY
3959: LIST
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PUSH
3965: LD_INT 50
3967: PUSH
3968: EMPTY
3969: LIST
3970: PUSH
3971: LD_INT 33
3973: PUSH
3974: LD_INT 2
3976: PUSH
3977: EMPTY
3978: LIST
3979: LIST
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: LIST
3985: LIST
3986: PPUSH
3987: CALL_OW 69
3991: PUSH
3992: FOR_IN
3993: IFFALSE 4013
// begin wait ( 0 0$0.3 ) ;
3995: LD_INT 10
3997: PPUSH
3998: CALL_OW 67
// Connect ( i ) ;
4002: LD_VAR 0 1
4006: PPUSH
4007: CALL 38079 0 1
// end ;
4011: GO 3992
4013: POP
4014: POP
// end ;
4015: PPOPN 1
4017: END
// export function PrepareArabianAttack ; var i , veh , xy , un , area , counter , tmp , dir ; begin
4018: LD_INT 0
4020: PPUSH
4021: PPUSH
4022: PPUSH
4023: PPUSH
4024: PPUSH
4025: PPUSH
4026: PPUSH
4027: PPUSH
4028: PPUSH
// result := [ ] ;
4029: LD_ADDR_VAR 0 1
4033: PUSH
4034: EMPTY
4035: ST_TO_ADDR
// arabianAttacksCounter := arabianAttacksCounter + 1 ;
4036: LD_ADDR_EXP 33
4040: PUSH
4041: LD_EXP 33
4045: PUSH
4046: LD_INT 1
4048: PLUS
4049: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
4050: LD_INT 22
4052: PUSH
4053: LD_INT 8
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PUSH
4060: LD_INT 3
4062: PUSH
4063: LD_INT 58
4065: PUSH
4066: EMPTY
4067: LIST
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: PUSH
4073: LD_INT 34
4075: PUSH
4076: LD_INT 31
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: LIST
4087: PPUSH
4088: CALL_OW 69
4092: PUSH
4093: LD_INT 2
4095: LESS
4096: IFFALSE 4340
// begin uc_side := 8 ;
4098: LD_ADDR_OWVAR 20
4102: PUSH
4103: LD_INT 8
4105: ST_TO_ADDR
// uc_nation := 2 ;
4106: LD_ADDR_OWVAR 21
4110: PUSH
4111: LD_INT 2
4113: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
4114: LD_INT 14
4116: PPUSH
4117: LD_INT 3
4119: PPUSH
4120: LD_INT 1
4122: PPUSH
4123: LD_INT 31
4125: PPUSH
4126: LD_INT 100
4128: PPUSH
4129: CALL 34986 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
4133: LD_ADDR_VAR 0 2
4137: PUSH
4138: DOUBLE
4139: LD_INT 22
4141: PUSH
4142: LD_INT 8
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: PUSH
4149: LD_INT 3
4151: PUSH
4152: LD_INT 58
4154: PUSH
4155: EMPTY
4156: LIST
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 34
4164: PUSH
4165: LD_INT 31
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: LIST
4176: PPUSH
4177: CALL_OW 69
4181: PUSH
4182: LD_INT 1
4184: PLUS
4185: DEC
4186: ST_TO_ADDR
4187: LD_INT 2
4189: PUSH
4190: FOR_TO
4191: IFFALSE 4338
// begin veh := CreateVehicle ;
4193: LD_ADDR_VAR 0 3
4197: PUSH
4198: CALL_OW 45
4202: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
4203: LD_VAR 0 3
4207: PPUSH
4208: LD_INT 5
4210: PPUSH
4211: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
4215: LD_ADDR_VAR 0 4
4219: PUSH
4220: LD_INT 181
4222: PUSH
4223: LD_INT 105
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: LD_INT 137
4232: PUSH
4233: LD_INT 6
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PUSH
4244: LD_VAR 0 2
4248: PUSH
4249: LD_INT 2
4251: MOD
4252: PUSH
4253: LD_INT 1
4255: PLUS
4256: ARRAY
4257: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
4258: LD_VAR 0 3
4262: PPUSH
4263: LD_VAR 0 4
4267: PUSH
4268: LD_INT 1
4270: ARRAY
4271: PPUSH
4272: LD_VAR 0 4
4276: PUSH
4277: LD_INT 2
4279: ARRAY
4280: PPUSH
4281: LD_INT 12
4283: PPUSH
4284: LD_INT 0
4286: PPUSH
4287: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4291: LD_INT 0
4293: PPUSH
4294: LD_INT 7
4296: PUSH
4297: LD_INT 9
4299: PUSH
4300: LD_INT 10
4302: PUSH
4303: LD_INT 10
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: PUSH
4312: LD_OWVAR 67
4316: ARRAY
4317: PPUSH
4318: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4322: CALL_OW 44
4326: PPUSH
4327: LD_VAR 0 3
4331: PPUSH
4332: CALL_OW 52
// end ;
4336: GO 4190
4338: POP
4339: POP
// end ; dir := rand ( 1 , 2 ) ;
4340: LD_ADDR_VAR 0 9
4344: PUSH
4345: LD_INT 1
4347: PPUSH
4348: LD_INT 2
4350: PPUSH
4351: CALL_OW 12
4355: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
4356: LD_ADDR_VAR 0 6
4360: PUSH
4361: LD_INT 8
4363: PUSH
4364: LD_INT 9
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: LD_VAR 0 9
4375: ARRAY
4376: ST_TO_ADDR
// counter := [ 6 , 8 , 10 , 11 ] [ Difficulty ] + arabianAttacksCounter ;
4377: LD_ADDR_VAR 0 7
4381: PUSH
4382: LD_INT 6
4384: PUSH
4385: LD_INT 8
4387: PUSH
4388: LD_INT 10
4390: PUSH
4391: LD_INT 11
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: PUSH
4400: LD_OWVAR 67
4404: ARRAY
4405: PUSH
4406: LD_EXP 33
4410: PLUS
4411: ST_TO_ADDR
// if counter > 20 then
4412: LD_VAR 0 7
4416: PUSH
4417: LD_INT 20
4419: GREATER
4420: IFFALSE 4430
// counter := 20 ;
4422: LD_ADDR_VAR 0 7
4426: PUSH
4427: LD_INT 20
4429: ST_TO_ADDR
// for i := 1 to counter do
4430: LD_ADDR_VAR 0 2
4434: PUSH
4435: DOUBLE
4436: LD_INT 1
4438: DEC
4439: ST_TO_ADDR
4440: LD_VAR 0 7
4444: PUSH
4445: FOR_TO
4446: IFFALSE 4781
// begin uc_side := 8 ;
4448: LD_ADDR_OWVAR 20
4452: PUSH
4453: LD_INT 8
4455: ST_TO_ADDR
// uc_nation := 2 ;
4456: LD_ADDR_OWVAR 21
4460: PUSH
4461: LD_INT 2
4463: ST_TO_ADDR
// PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] , [ ar_gun , ar_rocket_launcher , ar_gun , ar_mortar , ar_selfpropelled_bomb , ar_gatling_gun ] [ rand ( 1 , 6 ) ] , 100 ) ;
4464: LD_INT 13
4466: PUSH
4467: LD_INT 14
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: PUSH
4474: LD_INT 1
4476: PPUSH
4477: LD_INT 2
4479: PPUSH
4480: CALL_OW 12
4484: ARRAY
4485: PPUSH
4486: LD_INT 3
4488: PPUSH
4489: LD_INT 1
4491: PUSH
4492: LD_INT 2
4494: PUSH
4495: LD_INT 5
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 1
4505: PPUSH
4506: LD_INT 3
4508: PPUSH
4509: CALL_OW 12
4513: ARRAY
4514: PPUSH
4515: LD_INT 27
4517: PUSH
4518: LD_INT 28
4520: PUSH
4521: LD_INT 27
4523: PUSH
4524: LD_EXP 50
4528: PUSH
4529: LD_INT 29
4531: PUSH
4532: LD_INT 25
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 1
4545: PPUSH
4546: LD_INT 6
4548: PPUSH
4549: CALL_OW 12
4553: ARRAY
4554: PPUSH
4555: LD_INT 100
4557: PPUSH
4558: CALL 34986 0 5
// if vc_weapon = ar_selfpropelled_bomb then
4562: LD_OWVAR 40
4566: PUSH
4567: LD_INT 29
4569: EQUAL
4570: IFFALSE 4580
// vc_control := control_remote ;
4572: LD_ADDR_OWVAR 38
4576: PUSH
4577: LD_INT 2
4579: ST_TO_ADDR
// veh := CreateVehicle ;
4580: LD_ADDR_VAR 0 3
4584: PUSH
4585: CALL_OW 45
4589: ST_TO_ADDR
// result := Join ( result , veh ) ;
4590: LD_ADDR_VAR 0 1
4594: PUSH
4595: LD_VAR 0 1
4599: PPUSH
4600: LD_VAR 0 3
4604: PPUSH
4605: CALL 66803 0 2
4609: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
4610: LD_VAR 0 3
4614: PPUSH
4615: LD_INT 3
4617: PUSH
4618: LD_INT 5
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: PUSH
4625: LD_VAR 0 9
4629: ARRAY
4630: PPUSH
4631: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
4635: LD_VAR 0 3
4639: PPUSH
4640: LD_VAR 0 6
4644: PPUSH
4645: LD_INT 0
4647: PPUSH
4648: CALL_OW 49
// if vc_control = control_manual then
4652: LD_OWVAR 38
4656: PUSH
4657: LD_INT 1
4659: EQUAL
4660: IFFALSE 4707
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4662: LD_INT 0
4664: PPUSH
4665: LD_INT 7
4667: PUSH
4668: LD_INT 8
4670: PUSH
4671: LD_INT 9
4673: PUSH
4674: LD_INT 10
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: PUSH
4683: LD_OWVAR 67
4687: ARRAY
4688: PPUSH
4689: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4693: CALL_OW 44
4697: PPUSH
4698: LD_VAR 0 3
4702: PPUSH
4703: CALL_OW 52
// end ; wait ( 0 0$0.3 ) ;
4707: LD_INT 10
4709: PPUSH
4710: CALL_OW 67
// if GetControl ( veh ) = control_remote and not IsControledBy ( veh ) then
4714: LD_VAR 0 3
4718: PPUSH
4719: CALL_OW 263
4723: PUSH
4724: LD_INT 2
4726: EQUAL
4727: PUSH
4728: LD_VAR 0 3
4732: PPUSH
4733: CALL_OW 312
4737: NOT
4738: AND
4739: IFFALSE 4757
// begin Connect ( veh ) ;
4741: LD_VAR 0 3
4745: PPUSH
4746: CALL 38079 0 1
// wait ( 0 0$0.3 ) ;
4750: LD_INT 10
4752: PPUSH
4753: CALL_OW 67
// end ; ComAgressiveMove ( veh , 100 , 55 ) ;
4757: LD_VAR 0 3
4761: PPUSH
4762: LD_INT 100
4764: PPUSH
4765: LD_INT 55
4767: PPUSH
4768: CALL_OW 114
// wait ( 0 0$0.3 ) ;
4772: LD_INT 10
4774: PPUSH
4775: CALL_OW 67
// end ;
4779: GO 4445
4781: POP
4782: POP
// if arabianAttacksCounter = 1 then
4783: LD_EXP 33
4787: PUSH
4788: LD_INT 1
4790: EQUAL
4791: IFFALSE 4797
// DestroySibDeposit ;
4793: CALL 3625 0 0
// if sibDeposits and arabianAttacksCounter mod [ 4 , 3 , 3 , 2 ] [ Difficulty ] = 0 then
4797: LD_EXP 31
4801: PUSH
4802: LD_EXP 33
4806: PUSH
4807: LD_INT 4
4809: PUSH
4810: LD_INT 3
4812: PUSH
4813: LD_INT 3
4815: PUSH
4816: LD_INT 2
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: PUSH
4825: LD_OWVAR 67
4829: ARRAY
4830: MOD
4831: PUSH
4832: LD_INT 0
4834: EQUAL
4835: AND
4836: IFFALSE 5188
// begin tmp := rand ( 0 , 2 ) ;
4838: LD_ADDR_VAR 0 8
4842: PUSH
4843: LD_INT 0
4845: PPUSH
4846: LD_INT 2
4848: PPUSH
4849: CALL_OW 12
4853: ST_TO_ADDR
// if not tmp then
4854: LD_VAR 0 8
4858: NOT
4859: IFFALSE 5020
// begin for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] do
4861: LD_ADDR_VAR 0 2
4865: PUSH
4866: DOUBLE
4867: LD_INT 1
4869: DEC
4870: ST_TO_ADDR
4871: LD_INT 3
4873: PUSH
4874: LD_INT 4
4876: PUSH
4877: LD_INT 4
4879: PUSH
4880: LD_INT 5
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: PUSH
4889: LD_OWVAR 67
4893: ARRAY
4894: PUSH
4895: FOR_TO
4896: IFFALSE 5016
// begin uc_side := 8 ;
4898: LD_ADDR_OWVAR 20
4902: PUSH
4903: LD_INT 8
4905: ST_TO_ADDR
// uc_nation := 2 ;
4906: LD_ADDR_OWVAR 21
4910: PUSH
4911: LD_INT 2
4913: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4914: LD_INT 0
4916: PPUSH
4917: LD_INT 1
4919: PPUSH
4920: LD_INT 7
4922: PUSH
4923: LD_INT 8
4925: PUSH
4926: LD_INT 9
4928: PUSH
4929: LD_INT 10
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: PUSH
4938: LD_OWVAR 67
4942: ARRAY
4943: PPUSH
4944: CALL_OW 380
// un := CreateHuman ;
4948: LD_ADDR_VAR 0 5
4952: PUSH
4953: CALL_OW 44
4957: ST_TO_ADDR
// result := Join ( result , un ) ;
4958: LD_ADDR_VAR 0 1
4962: PUSH
4963: LD_VAR 0 1
4967: PPUSH
4968: LD_VAR 0 5
4972: PPUSH
4973: CALL 66803 0 2
4977: ST_TO_ADDR
// if Prob ( 60 ) then
4978: LD_INT 60
4980: PPUSH
4981: CALL_OW 13
4985: IFFALSE 4999
// SetClass ( un , class_mortar ) ;
4987: LD_VAR 0 5
4991: PPUSH
4992: LD_INT 8
4994: PPUSH
4995: CALL_OW 336
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
4999: LD_VAR 0 5
5003: PPUSH
5004: LD_INT 16
5006: PPUSH
5007: LD_INT 0
5009: PPUSH
5010: CALL_OW 49
// end ;
5014: GO 4895
5016: POP
5017: POP
// end else
5018: GO 5184
// begin for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
5020: LD_ADDR_VAR 0 2
5024: PUSH
5025: DOUBLE
5026: LD_INT 1
5028: DEC
5029: ST_TO_ADDR
5030: LD_INT 2
5032: PUSH
5033: LD_INT 3
5035: PUSH
5036: LD_INT 3
5038: PUSH
5039: LD_INT 4
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: PUSH
5048: LD_OWVAR 67
5052: ARRAY
5053: PUSH
5054: FOR_TO
5055: IFFALSE 5182
// begin uc_side := 8 ;
5057: LD_ADDR_OWVAR 20
5061: PUSH
5062: LD_INT 8
5064: ST_TO_ADDR
// uc_nation := 0 ;
5065: LD_ADDR_OWVAR 21
5069: PUSH
5070: LD_INT 0
5072: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
5073: LD_ADDR_OWVAR 28
5077: PUSH
5078: LD_INT 17
5080: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
5081: LD_ADDR_OWVAR 31
5085: PUSH
5086: LD_INT 3
5088: PUSH
5089: LD_INT 0
5091: PUSH
5092: LD_INT 0
5094: PUSH
5095: LD_INT 0
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5104: LD_ADDR_OWVAR 29
5108: PUSH
5109: LD_INT 10
5111: PUSH
5112: LD_INT 10
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: ST_TO_ADDR
// hc_gallery :=  ;
5119: LD_ADDR_OWVAR 33
5123: PUSH
5124: LD_STRING 
5126: ST_TO_ADDR
// hc_name :=  ;
5127: LD_ADDR_OWVAR 26
5131: PUSH
5132: LD_STRING 
5134: ST_TO_ADDR
// un := CreateHuman ;
5135: LD_ADDR_VAR 0 5
5139: PUSH
5140: CALL_OW 44
5144: ST_TO_ADDR
// result := Join ( result , un ) ;
5145: LD_ADDR_VAR 0 1
5149: PUSH
5150: LD_VAR 0 1
5154: PPUSH
5155: LD_VAR 0 5
5159: PPUSH
5160: CALL 66803 0 2
5164: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5165: LD_VAR 0 5
5169: PPUSH
5170: LD_INT 16
5172: PPUSH
5173: LD_INT 0
5175: PPUSH
5176: CALL_OW 49
// end ;
5180: GO 5054
5182: POP
5183: POP
// end ; DestroySibDeposit ;
5184: CALL 3625 0 0
// end ; for i in result do
5188: LD_ADDR_VAR 0 2
5192: PUSH
5193: LD_VAR 0 1
5197: PUSH
5198: FOR_IN
5199: IFFALSE 5215
// SetTag ( i , 10 ) ;
5201: LD_VAR 0 2
5205: PPUSH
5206: LD_INT 10
5208: PPUSH
5209: CALL_OW 109
5213: GO 5198
5215: POP
5216: POP
// RaiseSailEvent ( eventArabianAttack ) ;
5217: LD_EXP 43
5221: PPUSH
5222: CALL_OW 427
// end ; end_of_file
5226: LD_VAR 0 1
5230: RET
// export function Action ; var tmp ; begin
5231: LD_INT 0
5233: PPUSH
5234: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
5235: LD_ADDR_VAR 0 2
5239: PUSH
5240: LD_INT 22
5242: PUSH
5243: LD_INT 1
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PUSH
5250: LD_INT 21
5252: PUSH
5253: LD_INT 2
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: PPUSH
5264: CALL_OW 69
5268: ST_TO_ADDR
// InGameOn ;
5269: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
5273: LD_VAR 0 2
5277: PPUSH
5278: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
5282: LD_INT 22
5284: PUSH
5285: LD_INT 1
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: PUSH
5292: LD_INT 21
5294: PUSH
5295: LD_INT 2
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: PUSH
5302: EMPTY
5303: LIST
5304: LIST
5305: PPUSH
5306: CALL_OW 69
5310: PPUSH
5311: LD_INT 69
5313: PPUSH
5314: LD_INT 94
5316: PPUSH
5317: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
5321: LD_EXP 1
5325: PPUSH
5326: LD_STRING D2-JMM-1
5328: PPUSH
5329: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5333: LD_VAR 0 2
5337: PPUSH
5338: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
5342: LD_EXP 2
5346: PPUSH
5347: LD_STRING D2-Huck-1
5349: PPUSH
5350: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5354: LD_VAR 0 2
5358: PPUSH
5359: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
5363: LD_EXP 1
5367: PPUSH
5368: LD_STRING D2-JMM-2
5370: PPUSH
5371: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5375: LD_VAR 0 2
5379: PPUSH
5380: CALL_OW 87
// InGameOff ;
5384: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5388: LD_STRING M1
5390: PPUSH
5391: CALL_OW 337
// SaveForQuickRestart ;
5395: CALL_OW 22
// wait ( 10 10$00 ) ;
5399: LD_INT 21000
5401: PPUSH
5402: CALL_OW 67
// DialogueOn ;
5406: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
5410: LD_EXP 15
5414: PPUSH
5415: LD_STRING D3-Pow-1
5417: PPUSH
5418: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
5422: LD_EXP 1
5426: PPUSH
5427: LD_STRING D3-JMM-1
5429: PPUSH
5430: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
5434: LD_EXP 15
5438: PPUSH
5439: LD_STRING D3-Pow-2
5441: PPUSH
5442: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
5446: LD_EXP 1
5450: PPUSH
5451: LD_STRING D3-JMM-2
5453: PPUSH
5454: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
5458: LD_EXP 15
5462: PPUSH
5463: LD_STRING D3-Pow-3
5465: PPUSH
5466: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
5470: LD_EXP 1
5474: PPUSH
5475: LD_STRING D3-JMM-3
5477: PPUSH
5478: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
5482: LD_EXP 15
5486: PPUSH
5487: LD_STRING D3-Pow-4
5489: PPUSH
5490: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
5494: LD_EXP 1
5498: PPUSH
5499: LD_STRING D3-JMM-4
5501: PPUSH
5502: CALL_OW 88
// DialogueOff ;
5506: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5510: LD_STRING M2
5512: PPUSH
5513: CALL_OW 337
// wait ( 2 2$30 ) ;
5517: LD_INT 5250
5519: PPUSH
5520: CALL_OW 67
// PrepareBurlak ;
5524: CALL 2244 0 0
// BurlakArmy ;
5528: CALL 2426 0 0
// end ;
5532: LD_VAR 0 1
5536: RET
// every 0 0$1 trigger See ( 1 , Masha ) do
5537: LD_INT 1
5539: PPUSH
5540: LD_EXP 18
5544: PPUSH
5545: CALL_OW 292
5549: IFFALSE 5708
5551: GO 5553
5553: DISABLE
// begin DialogueOn ;
5554: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
5558: LD_EXP 18
5562: PPUSH
5563: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
5567: LD_INT 22
5569: PUSH
5570: LD_INT 1
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: PUSH
5577: LD_INT 26
5579: PUSH
5580: LD_INT 1
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: PUSH
5587: LD_INT 2
5589: PUSH
5590: LD_INT 25
5592: PUSH
5593: LD_INT 1
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: PUSH
5600: LD_INT 25
5602: PUSH
5603: LD_INT 2
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: PUSH
5610: LD_INT 25
5612: PUSH
5613: LD_INT 3
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: PUSH
5620: LD_INT 25
5622: PUSH
5623: LD_INT 4
5625: PUSH
5626: EMPTY
5627: LIST
5628: LIST
5629: PUSH
5630: LD_INT 25
5632: PUSH
5633: LD_INT 5
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: PUSH
5648: EMPTY
5649: LIST
5650: LIST
5651: LIST
5652: PPUSH
5653: CALL_OW 69
5657: PPUSH
5658: LD_STRING D5-Sol1-1
5660: PPUSH
5661: LD_STRING D5-FSol1-1
5663: PPUSH
5664: CALL 8059 0 3
// Say ( JMM , D5-JMM-1 ) ;
5668: LD_EXP 1
5672: PPUSH
5673: LD_STRING D5-JMM-1
5675: PPUSH
5676: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
5680: LD_EXP 17
5684: PPUSH
5685: LD_STRING DAmer-Bur-1
5687: PPUSH
5688: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
5692: LD_EXP 1
5696: PPUSH
5697: LD_STRING DAmer-JMM-1
5699: PPUSH
5700: CALL_OW 88
// DialogueOff ;
5704: CALL_OW 7
// end ;
5708: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
5709: LD_INT 4
5711: PPUSH
5712: LD_INT 22
5714: PUSH
5715: LD_INT 7
5717: PUSH
5718: EMPTY
5719: LIST
5720: LIST
5721: PPUSH
5722: CALL_OW 70
5726: IFFALSE 6125
5728: GO 5730
5730: DISABLE
5731: LD_INT 0
5733: PPUSH
// begin enable ;
5734: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
5735: LD_ADDR_VAR 0 1
5739: PUSH
5740: LD_INT 4
5742: PPUSH
5743: LD_INT 22
5745: PUSH
5746: LD_INT 7
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: PPUSH
5753: CALL_OW 70
5757: PUSH
5758: FOR_IN
5759: IFFALSE 6123
// begin if i = Burlak or i = Masha then
5761: LD_VAR 0 1
5765: PUSH
5766: LD_EXP 17
5770: EQUAL
5771: PUSH
5772: LD_VAR 0 1
5776: PUSH
5777: LD_EXP 18
5781: EQUAL
5782: OR
5783: IFFALSE 5930
// begin RemoveUnit ( i ) ;
5785: LD_VAR 0 1
5789: PPUSH
5790: CALL_OW 64
// DialogueOn ;
5794: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
5798: LD_EXP 1
5802: PPUSH
5803: LD_STRING D5a-JMM-1
5805: PPUSH
5806: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
5810: LD_INT 22
5812: PUSH
5813: LD_INT 1
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: LD_INT 26
5822: PUSH
5823: LD_INT 1
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PUSH
5830: LD_INT 2
5832: PUSH
5833: LD_INT 25
5835: PUSH
5836: LD_INT 1
5838: PUSH
5839: EMPTY
5840: LIST
5841: LIST
5842: PUSH
5843: LD_INT 25
5845: PUSH
5846: LD_INT 2
5848: PUSH
5849: EMPTY
5850: LIST
5851: LIST
5852: PUSH
5853: LD_INT 25
5855: PUSH
5856: LD_INT 3
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: PUSH
5863: LD_INT 25
5865: PUSH
5866: LD_INT 4
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: PUSH
5873: LD_INT 25
5875: PUSH
5876: LD_INT 5
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: PUSH
5883: EMPTY
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: LIST
5895: PPUSH
5896: CALL_OW 69
5900: PPUSH
5901: LD_STRING D5a-Sol1-1
5903: PPUSH
5904: LD_STRING D5-FSol1-1
5906: PPUSH
5907: CALL 8059 0 3
// DialogueOff ;
5911: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
5915: LD_STRING M2b
5917: PPUSH
5918: CALL_OW 337
// spawnBurlak = 0 ;
5922: LD_ADDR_EXP 27
5926: PUSH
5927: LD_INT 0
5929: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
5930: LD_VAR 0 1
5934: PPUSH
5935: CALL_OW 247
5939: PUSH
5940: LD_INT 2
5942: EQUAL
5943: PUSH
5944: LD_VAR 0 1
5948: PPUSH
5949: CALL_OW 263
5953: PUSH
5954: LD_INT 1
5956: EQUAL
5957: AND
5958: IFFALSE 6086
// begin case IsDrivenBy ( i ) of Gnyevko :
5960: LD_VAR 0 1
5964: PPUSH
5965: CALL_OW 311
5969: PUSH
5970: LD_EXP 19
5974: DOUBLE
5975: EQUAL
5976: IFTRUE 5980
5978: GO 5993
5980: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
5981: LD_INT 1
5983: PPUSH
5984: LD_STRING 13_Gnyevko_1
5986: PPUSH
5987: CALL_OW 39
5991: GO 6086
5993: LD_EXP 20
5997: DOUBLE
5998: EQUAL
5999: IFTRUE 6003
6001: GO 6016
6003: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
6004: LD_INT 1
6006: PPUSH
6007: LD_STRING 13_Titov_1
6009: PPUSH
6010: CALL_OW 39
6014: GO 6086
6016: LD_EXP 21
6020: DOUBLE
6021: EQUAL
6022: IFTRUE 6026
6024: GO 6039
6026: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
6027: LD_INT 1
6029: PPUSH
6030: LD_STRING 13_Xavier_1
6032: PPUSH
6033: CALL_OW 39
6037: GO 6086
6039: LD_EXP 22
6043: DOUBLE
6044: EQUAL
6045: IFTRUE 6049
6047: GO 6062
6049: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
6050: LD_INT 1
6052: PPUSH
6053: LD_STRING 13_Belkov_1
6055: PPUSH
6056: CALL_OW 39
6060: GO 6086
6062: LD_EXP 23
6066: DOUBLE
6067: EQUAL
6068: IFTRUE 6072
6070: GO 6085
6072: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
6073: LD_INT 1
6075: PPUSH
6076: LD_STRING 13_Lipshchin_1
6078: PPUSH
6079: CALL_OW 39
6083: GO 6086
6085: POP
// end ; if GetWeapon ( i ) = ru_time_lapser then
6086: LD_VAR 0 1
6090: PPUSH
6091: CALL_OW 264
6095: PUSH
6096: LD_INT 49
6098: EQUAL
6099: IFFALSE 6112
// DestroyUnit ( i ) else
6101: LD_VAR 0 1
6105: PPUSH
6106: CALL_OW 65
6110: GO 6121
// RemoveUnit ( i ) ;
6112: LD_VAR 0 1
6116: PPUSH
6117: CALL_OW 64
// end ;
6121: GO 5758
6123: POP
6124: POP
// end ;
6125: PPOPN 1
6127: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
6128: LD_EXP 17
6132: PPUSH
6133: CALL_OW 302
6137: PUSH
6138: LD_EXP 18
6142: PPUSH
6143: CALL_OW 256
6147: PUSH
6148: LD_INT 500
6150: LESS
6151: AND
6152: PUSH
6153: LD_EXP 18
6157: PPUSH
6158: CALL_OW 255
6162: PUSH
6163: LD_INT 7
6165: EQUAL
6166: AND
6167: IFFALSE 6187
6169: GO 6171
6171: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
6172: LD_EXP 17
6176: PPUSH
6177: LD_INT 107
6179: PPUSH
6180: LD_INT 118
6182: PPUSH
6183: CALL_OW 111
6187: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
6188: LD_EXP 17
6192: PPUSH
6193: CALL_OW 301
6197: PUSH
6198: LD_EXP 27
6202: PUSH
6203: LD_INT 1
6205: EQUAL
6206: AND
6207: IFFALSE 6340
6209: GO 6211
6211: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
6212: LD_EXP 1
6216: PPUSH
6217: LD_STRING D5b-JMM-1
6219: PPUSH
6220: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
6224: LD_INT 22
6226: PUSH
6227: LD_INT 1
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 26
6236: PUSH
6237: LD_INT 1
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: LD_INT 2
6246: PUSH
6247: LD_INT 25
6249: PUSH
6250: LD_INT 1
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PUSH
6257: LD_INT 25
6259: PUSH
6260: LD_INT 2
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 25
6269: PUSH
6270: LD_INT 3
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: PUSH
6277: LD_INT 25
6279: PUSH
6280: LD_INT 4
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 25
6289: PUSH
6290: LD_INT 5
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: LIST
6309: PPUSH
6310: CALL_OW 69
6314: PPUSH
6315: LD_STRING D5b-Sol1-1
6317: PPUSH
6318: LD_STRING 
6320: PPUSH
6321: CALL 8059 0 3
// ChangeMissionObjectives ( M2a ) ;
6325: LD_STRING M2a
6327: PPUSH
6328: CALL_OW 337
// burlakStatus := 1 ;
6332: LD_ADDR_EXP 28
6336: PUSH
6337: LD_INT 1
6339: ST_TO_ADDR
// end ;
6340: END
// every 0 0$1 trigger IsDead ( Stevens ) do
6341: LD_EXP 2
6345: PPUSH
6346: CALL_OW 301
6350: IFFALSE 6487
6352: GO 6354
6354: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
6355: LD_EXP 1
6359: PPUSH
6360: LD_STRING D6-JMM-1
6362: PPUSH
6363: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
6367: LD_INT 22
6369: PUSH
6370: LD_INT 1
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: LD_INT 26
6379: PUSH
6380: LD_INT 1
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: PUSH
6387: LD_INT 2
6389: PUSH
6390: LD_INT 25
6392: PUSH
6393: LD_INT 1
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: PUSH
6400: LD_INT 25
6402: PUSH
6403: LD_INT 2
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 25
6412: PUSH
6413: LD_INT 3
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: PUSH
6420: LD_INT 25
6422: PUSH
6423: LD_INT 4
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: PUSH
6430: LD_INT 25
6432: PUSH
6433: LD_INT 5
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: PPUSH
6453: CALL_OW 69
6457: PPUSH
6458: LD_STRING D6-Sol1-1
6460: PPUSH
6461: LD_STRING 
6463: PPUSH
6464: CALL 8059 0 3
// Say ( JMM , D6-JMM-2 ) ;
6468: LD_EXP 1
6472: PPUSH
6473: LD_STRING D6-JMM-2
6475: PPUSH
6476: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
6480: LD_STRING M1a
6482: PPUSH
6483: CALL_OW 337
// end ;
6487: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
6488: LD_INT 25
6490: PPUSH
6491: LD_INT 1
6493: PPUSH
6494: CALL_OW 321
6498: PUSH
6499: LD_INT 2
6501: EQUAL
6502: IFFALSE 6519
6504: GO 6506
6506: DISABLE
// Say ( Stevens , D6-Huck-2 ) ;
6507: LD_EXP 2
6511: PPUSH
6512: LD_STRING D6-Huck-2
6514: PPUSH
6515: CALL_OW 88
6519: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_warehouse ] , [ f_not , [ f_constructed ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] , [ f_not , [ f_constructed ] ] ] ) do
6520: LD_INT 22
6522: PUSH
6523: LD_INT 1
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PUSH
6530: LD_INT 2
6532: PUSH
6533: LD_INT 34
6535: PUSH
6536: LD_INT 8
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: PUSH
6543: LD_INT 35
6545: PUSH
6546: LD_INT 8
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: LIST
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PPUSH
6562: CALL_OW 69
6566: PUSH
6567: LD_INT 5
6569: PPUSH
6570: LD_INT 22
6572: PUSH
6573: LD_INT 1
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 21
6582: PUSH
6583: LD_INT 3
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: LD_INT 30
6592: PUSH
6593: LD_INT 1
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: LD_INT 57
6605: PUSH
6606: EMPTY
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: PPUSH
6619: CALL_OW 70
6623: AND
6624: PUSH
6625: LD_INT 5
6627: PPUSH
6628: LD_INT 22
6630: PUSH
6631: LD_INT 1
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: PUSH
6638: LD_INT 21
6640: PUSH
6641: LD_INT 3
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: PUSH
6648: LD_INT 30
6650: PUSH
6651: LD_INT 5
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: PUSH
6658: LD_INT 3
6660: PUSH
6661: LD_INT 57
6663: PUSH
6664: EMPTY
6665: LIST
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: PPUSH
6677: CALL_OW 70
6681: AND
6682: IFFALSE 6724
6684: GO 6686
6686: DISABLE
// begin DialogueOn ;
6687: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6691: LD_EXP 1
6695: PPUSH
6696: LD_STRING D7-JMM-1
6698: PPUSH
6699: CALL_OW 88
// DialogueOff ;
6703: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
6707: LD_STRING M4
6709: PPUSH
6710: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
6714: LD_INT 5
6716: PPUSH
6717: LD_INT 0
6719: PPUSH
6720: CALL_OW 424
// end ;
6724: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) and eventVar3 = 1 and radationResearched = 0 do
6725: LD_INT 6
6727: PPUSH
6728: LD_INT 22
6730: PUSH
6731: LD_INT 1
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: PUSH
6738: LD_INT 25
6740: PUSH
6741: LD_INT 4
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: PUSH
6748: EMPTY
6749: LIST
6750: LIST
6751: PPUSH
6752: CALL_OW 70
6756: PUSH
6757: LD_EXP 37
6761: PUSH
6762: LD_INT 1
6764: EQUAL
6765: AND
6766: PUSH
6767: LD_EXP 29
6771: PUSH
6772: LD_INT 0
6774: EQUAL
6775: AND
6776: IFFALSE 6841
6778: GO 6780
6780: DISABLE
// begin enable ;
6781: ENABLE
// AmSciSib := FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
6782: LD_ADDR_EXP 26
6786: PUSH
6787: LD_INT 6
6789: PPUSH
6790: LD_INT 22
6792: PUSH
6793: LD_INT 1
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PUSH
6800: LD_INT 25
6802: PUSH
6803: LD_INT 4
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PPUSH
6814: CALL_OW 70
6818: PUSH
6819: LD_INT 1
6821: ARRAY
6822: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
6823: LD_INT 6
6825: PPUSH
6826: LD_INT 0
6828: PPUSH
6829: CALL_OW 424
// radationResearched := 1 ;
6833: LD_ADDR_EXP 29
6837: PUSH
6838: LD_INT 1
6840: ST_TO_ADDR
// end ;
6841: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
6842: LD_EXP 26
6846: PPUSH
6847: CALL_OW 301
6851: PUSH
6852: LD_EXP 29
6856: PUSH
6857: LD_INT 1
6859: EQUAL
6860: AND
6861: IFFALSE 6897
6863: GO 6865
6865: DISABLE
// begin enable ;
6866: ENABLE
// radationResearched = 0 ;
6867: LD_ADDR_EXP 29
6871: PUSH
6872: LD_INT 0
6874: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
6875: LD_INT 6
6877: PPUSH
6878: LD_INT 1
6880: PPUSH
6881: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
6885: LD_EXP 1
6889: PPUSH
6890: LD_STRING D9a-JMM-1
6892: PPUSH
6893: CALL_OW 88
// end ; end_of_file
6897: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = us_siberium_rocket and eventVar1 = 0 then
6898: LD_VAR 0 5
6902: PUSH
6903: LD_INT 8
6905: EQUAL
6906: PUSH
6907: LD_EXP 35
6911: PUSH
6912: LD_INT 0
6914: EQUAL
6915: AND
6916: IFFALSE 6969
// begin eventVar1 := 1 ;
6918: LD_ADDR_EXP 35
6922: PUSH
6923: LD_INT 1
6925: ST_TO_ADDR
// DialogueOn ;
6926: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
6930: LD_EXP 1
6934: PPUSH
6935: LD_STRING D6a-JMM-1
6937: PPUSH
6938: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
6942: LD_EXP 15
6946: PPUSH
6947: LD_STRING D6a-Pow-1
6949: PPUSH
6950: CALL_OW 94
// DialogueOff ;
6954: CALL_OW 7
// wait ( 3 3$0 ) ;
6958: LD_INT 6300
6960: PPUSH
6961: CALL_OW 67
// PowellSupport ;
6965: CALL 1820 0 0
// end ; end ;
6969: PPOPN 5
6971: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6972: LD_VAR 0 1
6976: PPUSH
6977: CALL 25329 0 1
// if un = JMM then
6981: LD_VAR 0 1
6985: PUSH
6986: LD_EXP 1
6990: EQUAL
6991: IFFALSE 7000
// YouLost ( JMM ) ;
6993: LD_STRING JMM
6995: PPUSH
6996: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
7000: LD_VAR 0 1
7004: PPUSH
7005: CALL_OW 264
7009: PUSH
7010: LD_INT 31
7012: EQUAL
7013: IFFALSE 7029
// achivCounter := achivCounter + 1 ;
7015: LD_ADDR_EXP 41
7019: PUSH
7020: LD_EXP 41
7024: PUSH
7025: LD_INT 1
7027: PLUS
7028: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
7029: LD_VAR 0 1
7033: PPUSH
7034: CALL_OW 255
7038: PUSH
7039: LD_INT 1
7041: NONEQUAL
7042: PUSH
7043: LD_VAR 0 1
7047: PPUSH
7048: CALL_OW 247
7052: PUSH
7053: LD_INT 2
7055: EQUAL
7056: AND
7057: IFFALSE 7073
// destroyCounter := destroyCounter + 1 ;
7059: LD_ADDR_EXP 42
7063: PUSH
7064: LD_EXP 42
7068: PUSH
7069: LD_INT 1
7071: PLUS
7072: ST_TO_ADDR
// end ;
7073: PPOPN 1
7075: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
7076: LD_VAR 0 2
7080: PUSH
7081: LD_EXP 18
7085: EQUAL
7086: IFFALSE 7095
// SetAchievement ( ACH_MASHA ) ;
7088: LD_STRING ACH_MASHA
7090: PPUSH
7091: CALL_OW 543
// end ;
7095: PPOPN 4
7097: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
7098: LD_VAR 0 1
7102: PPUSH
7103: LD_VAR 0 2
7107: PPUSH
7108: CALL 25451 0 2
// if GetWeapon ( vehicle ) = us_siberium_rocket and eventVar2 = 0 then
7112: LD_VAR 0 1
7116: PPUSH
7117: CALL_OW 264
7121: PUSH
7122: LD_INT 8
7124: EQUAL
7125: PUSH
7126: LD_EXP 36
7130: PUSH
7131: LD_INT 0
7133: EQUAL
7134: AND
7135: IFFALSE 7204
// begin eventVar2 := 1 ;
7137: LD_ADDR_EXP 36
7141: PUSH
7142: LD_INT 1
7144: ST_TO_ADDR
// DialogueOn ;
7145: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
7149: LD_EXP 1
7153: PPUSH
7154: LD_STRING D6b-JMM-1
7156: PPUSH
7157: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
7161: LD_EXP 15
7165: PPUSH
7166: LD_STRING D6b-Pow-1
7168: PPUSH
7169: CALL_OW 94
// DialogueOff ;
7173: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
7177: LD_INT 5
7179: PPUSH
7180: LD_INT 1
7182: PPUSH
7183: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
7187: LD_INT 7
7189: PPUSH
7190: LD_INT 1
7192: PPUSH
7193: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
7197: LD_STRING M3
7199: PPUSH
7200: CALL_OW 337
// end ; end ;
7204: PPOPN 2
7206: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
7207: LD_VAR 0 2
7211: PPUSH
7212: LD_VAR 0 3
7216: PPUSH
7217: LD_INT 5
7219: PPUSH
7220: CALL_OW 309
7224: PUSH
7225: LD_EXP 37
7229: PUSH
7230: LD_INT 0
7232: EQUAL
7233: AND
7234: IFFALSE 7459
// begin eventVar3 := 1 ;
7236: LD_ADDR_EXP 37
7240: PUSH
7241: LD_INT 1
7243: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7244: LD_INT 175
7246: PPUSH
7247: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_radar ] ] ) then
7251: LD_INT 7
7253: PPUSH
7254: LD_INT 22
7256: PUSH
7257: LD_INT 1
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: LD_INT 21
7266: PUSH
7267: LD_INT 2
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PUSH
7274: LD_INT 34
7276: PUSH
7277: LD_INT 11
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: LIST
7288: PPUSH
7289: CALL_OW 70
7293: IFFALSE 7312
// begin radarOnSpot := 1 ;
7295: LD_ADDR_EXP 30
7299: PUSH
7300: LD_INT 1
7302: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
7303: LD_STRING M3a
7305: PPUSH
7306: CALL_OW 337
// end else
7310: GO 7319
// ChangeMissionObjectives ( M3b ) ;
7312: LD_STRING M3b
7314: PPUSH
7315: CALL_OW 337
// DialogueOn ;
7319: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
7323: LD_EXP 2
7327: PPUSH
7328: LD_STRING D8-Huck-1
7330: PPUSH
7331: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
7335: LD_EXP 1
7339: PPUSH
7340: LD_STRING D8-JMM-1
7342: PPUSH
7343: CALL_OW 88
// if IsOk ( Stevens ) then
7347: LD_EXP 2
7351: PPUSH
7352: CALL_OW 302
7356: IFFALSE 7418
// begin Say ( Stevens , D8-Huck-2 ) ;
7358: LD_EXP 2
7362: PPUSH
7363: LD_STRING D8-Huck-2
7365: PPUSH
7366: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
7370: LD_EXP 1
7374: PPUSH
7375: LD_STRING D8-JMM-2
7377: PPUSH
7378: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
7382: LD_EXP 2
7386: PPUSH
7387: LD_STRING D8-Huck-3
7389: PPUSH
7390: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
7394: LD_EXP 1
7398: PPUSH
7399: LD_STRING D8-JMM-3
7401: PPUSH
7402: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
7406: LD_EXP 2
7410: PPUSH
7411: LD_STRING D8-Huck-4
7413: PPUSH
7414: CALL_OW 88
// end ; DialogueOff ;
7418: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
7422: LD_INT 5
7424: PPUSH
7425: LD_INT 0
7427: PPUSH
7428: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
7432: LD_INT 7
7434: PPUSH
7435: LD_INT 0
7437: PPUSH
7438: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7442: LD_INT 6
7444: PPUSH
7445: LD_INT 1
7447: PPUSH
7448: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
7452: LD_STRING M5
7454: PPUSH
7455: CALL_OW 337
// end ; end ;
7459: PPOPN 3
7461: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 and ( GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium ) then
7462: LD_EXP 26
7466: PPUSH
7467: CALL_OW 302
7471: PUSH
7472: LD_VAR 0 2
7476: PUSH
7477: LD_EXP 26
7481: EQUAL
7482: AND
7483: PUSH
7484: LD_EXP 38
7488: PUSH
7489: LD_INT 0
7491: EQUAL
7492: AND
7493: PUSH
7494: LD_EXP 37
7498: PUSH
7499: LD_INT 1
7501: EQUAL
7502: AND
7503: PUSH
7504: LD_VAR 0 1
7508: PPUSH
7509: LD_INT 1
7511: PPUSH
7512: CALL_OW 268
7516: PUSH
7517: LD_INT 11
7519: EQUAL
7520: PUSH
7521: LD_VAR 0 1
7525: PPUSH
7526: LD_INT 2
7528: PPUSH
7529: CALL_OW 268
7533: PUSH
7534: LD_INT 11
7536: EQUAL
7537: OR
7538: AND
7539: IFFALSE 7549
// eventVar4 := 1 ;
7541: LD_ADDR_EXP 38
7545: PUSH
7546: LD_INT 1
7548: ST_TO_ADDR
// end ;
7549: PPOPN 2
7551: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
7552: LD_INT 0
7554: PPUSH
7555: PPUSH
// begin if GetNation ( unit ) = nation_arabian then
7556: LD_VAR 0 1
7560: PPUSH
7561: CALL_OW 248
7565: PUSH
7566: LD_INT 2
7568: EQUAL
7569: IFFALSE 7815
// begin sibDestroyedCounter := sibDestroyedCounter + 1 ;
7571: LD_ADDR_EXP 32
7575: PUSH
7576: LD_EXP 32
7580: PUSH
7581: LD_INT 1
7583: PLUS
7584: ST_TO_ADDR
// for i := sibDeposits downto 1 do
7585: LD_ADDR_VAR 0 4
7589: PUSH
7590: DOUBLE
7591: LD_EXP 31
7595: INC
7596: ST_TO_ADDR
7597: LD_INT 1
7599: PUSH
7600: FOR_DOWNTO
7601: IFFALSE 7671
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
7603: LD_EXP 31
7607: PUSH
7608: LD_VAR 0 4
7612: ARRAY
7613: PUSH
7614: LD_INT 1
7616: ARRAY
7617: PUSH
7618: LD_VAR 0 2
7622: EQUAL
7623: PUSH
7624: LD_EXP 31
7628: PUSH
7629: LD_VAR 0 4
7633: ARRAY
7634: PUSH
7635: LD_INT 2
7637: ARRAY
7638: PUSH
7639: LD_VAR 0 3
7643: EQUAL
7644: AND
7645: IFFALSE 7669
// begin sibDeposits := Delete ( sibDeposits , i ) ;
7647: LD_ADDR_EXP 31
7651: PUSH
7652: LD_EXP 31
7656: PPUSH
7657: LD_VAR 0 4
7661: PPUSH
7662: CALL_OW 3
7666: ST_TO_ADDR
// break ;
7667: GO 7671
// end ;
7669: GO 7600
7671: POP
7672: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
7673: LD_EXP 39
7677: PUSH
7678: LD_INT 0
7680: EQUAL
7681: PUSH
7682: LD_VAR 0 2
7686: PPUSH
7687: LD_VAR 0 3
7691: PPUSH
7692: CALL_OW 428
7696: PUSH
7697: LD_INT 22
7699: PUSH
7700: LD_INT 1
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PPUSH
7707: CALL_OW 69
7711: IN
7712: AND
7713: IFFALSE 7815
// begin eventVar5 := 1 ;
7715: LD_ADDR_EXP 39
7719: PUSH
7720: LD_INT 1
7722: ST_TO_ADDR
// DialogueOn ;
7723: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
7727: LD_EXP 2
7731: PPUSH
7732: LD_STRING D4-Sci1-1
7734: PPUSH
7735: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7739: LD_EXP 1
7743: PPUSH
7744: LD_STRING D4-JMM-1
7746: PPUSH
7747: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
7751: LD_EXP 2
7755: PPUSH
7756: LD_STRING D4-Sci1-2
7758: PPUSH
7759: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7763: LD_EXP 1
7767: PPUSH
7768: LD_STRING D4-JMM-2
7770: PPUSH
7771: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
7775: LD_EXP 2
7779: PPUSH
7780: LD_STRING D4-Sci1-3
7782: PPUSH
7783: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
7787: LD_EXP 1
7791: PPUSH
7792: LD_STRING D4-JMM-3
7794: PPUSH
7795: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
7799: LD_EXP 1
7803: PPUSH
7804: LD_STRING D4-JMM-3a
7806: PPUSH
7807: CALL_OW 88
// DialogueOff ;
7811: CALL_OW 7
// end ; end ; end ;
7815: PPOPN 5
7817: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = b_depot and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 1 then
7818: LD_VAR 0 1
7822: PPUSH
7823: CALL_OW 255
7827: PUSH
7828: LD_INT 1
7830: EQUAL
7831: PUSH
7832: LD_VAR 0 1
7836: PPUSH
7837: CALL_OW 266
7841: PUSH
7842: LD_INT 0
7844: EQUAL
7845: AND
7846: PUSH
7847: LD_INT 22
7849: PUSH
7850: LD_INT 1
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: LD_INT 21
7859: PUSH
7860: LD_INT 3
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: PUSH
7867: LD_INT 2
7869: PUSH
7870: LD_INT 30
7872: PUSH
7873: LD_INT 0
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 30
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: LIST
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: LIST
7899: PPUSH
7900: CALL_OW 69
7904: PUSH
7905: LD_INT 1
7907: EQUAL
7908: AND
7909: IFFALSE 7923
// SetBName ( building , omega ) ;
7911: LD_VAR 0 1
7915: PPUSH
7916: LD_STRING omega
7918: PPUSH
7919: CALL_OW 500
// end ;
7923: PPOPN 2
7925: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7926: LD_VAR 0 1
7930: PPUSH
7931: CALL 25435 0 1
// end ;
7935: PPOPN 1
7937: END
// on SailEvent ( event ) do begin if event = eventArabianAttack then
7938: LD_VAR 0 1
7942: PUSH
7943: LD_EXP 43
7947: EQUAL
7948: IFFALSE 7954
// ArabianAttack ;
7950: CALL 9896 0 0
// if event = eventRussianAttack then
7954: LD_VAR 0 1
7958: PUSH
7959: LD_EXP 44
7963: EQUAL
7964: IFFALSE 7970
// RussianAttack ;
7966: CALL 10261 0 0
// end ;
7970: PPOPN 1
7972: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 8 ] then
7973: LD_VAR 0 1
7977: PPUSH
7978: CALL_OW 255
7982: PUSH
7983: LD_INT 3
7985: PUSH
7986: LD_INT 8
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: IN
7993: IFFALSE 8056
// begin ComMoveXY ( driver , 41 , 2 ) ;
7995: LD_VAR 0 1
7999: PPUSH
8000: LD_INT 41
8002: PPUSH
8003: LD_INT 2
8005: PPUSH
8006: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8010: LD_INT 35
8012: PPUSH
8013: CALL_OW 67
// if IsDead ( driver ) then
8017: LD_VAR 0 1
8021: PPUSH
8022: CALL_OW 301
8026: IFFALSE 8030
// exit ;
8028: GO 8056
// until IsAt ( driver , 41 , 2 ) ;
8030: LD_VAR 0 1
8034: PPUSH
8035: LD_INT 41
8037: PPUSH
8038: LD_INT 2
8040: PPUSH
8041: CALL_OW 307
8045: IFFALSE 8010
// RemoveUnit ( driver ) ;
8047: LD_VAR 0 1
8051: PPUSH
8052: CALL_OW 64
// end ; end ; end_of_file
8056: PPOPN 4
8058: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
8059: LD_INT 0
8061: PPUSH
8062: PPUSH
8063: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
8064: LD_ADDR_VAR 0 1
8068: PUSH
8069: LD_VAR 0 1
8073: PUSH
8074: LD_EXP 1
8078: PUSH
8079: LD_EXP 2
8083: PUSH
8084: LD_EXP 3
8088: PUSH
8089: LD_EXP 4
8093: PUSH
8094: LD_EXP 5
8098: PUSH
8099: LD_EXP 6
8103: PUSH
8104: LD_EXP 7
8108: PUSH
8109: LD_EXP 8
8113: PUSH
8114: LD_EXP 9
8118: PUSH
8119: LD_EXP 10
8123: PUSH
8124: LD_EXP 11
8128: PUSH
8129: LD_EXP 12
8133: PUSH
8134: LD_EXP 13
8138: PUSH
8139: LD_EXP 14
8143: PUSH
8144: LD_EXP 15
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: DIFF
8166: ST_TO_ADDR
// if not characters then
8167: LD_VAR 0 1
8171: NOT
8172: IFFALSE 8176
// exit ;
8174: GO 8255
// speaker := characters [ rand ( 1 , characters ) ] ;
8176: LD_ADDR_VAR 0 6
8180: PUSH
8181: LD_VAR 0 1
8185: PUSH
8186: LD_INT 1
8188: PPUSH
8189: LD_VAR 0 1
8193: PPUSH
8194: CALL_OW 12
8198: ARRAY
8199: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
8200: LD_VAR 0 6
8204: PPUSH
8205: CALL_OW 258
8209: PUSH
8210: LD_INT 1
8212: EQUAL
8213: IFFALSE 8231
// Say ( speaker , dialogMID ) else
8215: LD_VAR 0 6
8219: PPUSH
8220: LD_VAR 0 2
8224: PPUSH
8225: CALL_OW 88
8229: GO 8245
// Say ( speaker , dialogFID ) ;
8231: LD_VAR 0 6
8235: PPUSH
8236: LD_VAR 0 3
8240: PPUSH
8241: CALL_OW 88
// result := speaker ;
8245: LD_ADDR_VAR 0 4
8249: PUSH
8250: LD_VAR 0 6
8254: ST_TO_ADDR
// end ;
8255: LD_VAR 0 4
8259: RET
// export function PrepareDifficulty ; begin
8260: LD_INT 0
8262: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
8263: LD_INT 5
8265: PPUSH
8266: LD_INT 8
8268: PPUSH
8269: LD_INT 2
8271: PPUSH
8272: CALL_OW 322
// if Difficulty = 1 then
8276: LD_OWVAR 67
8280: PUSH
8281: LD_INT 1
8283: EQUAL
8284: IFFALSE 8403
// begin SetTech ( 66 , 8 , state_researched ) ;
8286: LD_INT 66
8288: PPUSH
8289: LD_INT 8
8291: PPUSH
8292: LD_INT 2
8294: PPUSH
8295: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
8299: LD_INT 67
8301: PPUSH
8302: LD_INT 8
8304: PPUSH
8305: LD_INT 0
8307: PPUSH
8308: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8312: LD_INT 68
8314: PPUSH
8315: LD_INT 8
8317: PPUSH
8318: LD_INT 0
8320: PPUSH
8321: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8325: LD_INT 51
8327: PPUSH
8328: LD_INT 8
8330: PPUSH
8331: LD_INT 2
8333: PPUSH
8334: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
8338: LD_INT 52
8340: PPUSH
8341: LD_INT 8
8343: PPUSH
8344: LD_INT 0
8346: PPUSH
8347: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
8351: LD_INT 53
8353: PPUSH
8354: LD_INT 8
8356: PPUSH
8357: LD_INT 0
8359: PPUSH
8360: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8364: LD_INT 60
8366: PPUSH
8367: LD_INT 8
8369: PPUSH
8370: LD_INT 2
8372: PPUSH
8373: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
8377: LD_INT 61
8379: PPUSH
8380: LD_INT 8
8382: PPUSH
8383: LD_INT 0
8385: PPUSH
8386: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8390: LD_INT 62
8392: PPUSH
8393: LD_INT 8
8395: PPUSH
8396: LD_INT 0
8398: PPUSH
8399: CALL_OW 322
// end ; if Difficulty = 2 then
8403: LD_OWVAR 67
8407: PUSH
8408: LD_INT 2
8410: EQUAL
8411: IFFALSE 8530
// begin SetTech ( 66 , 8 , state_researched ) ;
8413: LD_INT 66
8415: PPUSH
8416: LD_INT 8
8418: PPUSH
8419: LD_INT 2
8421: PPUSH
8422: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8426: LD_INT 67
8428: PPUSH
8429: LD_INT 8
8431: PPUSH
8432: LD_INT 2
8434: PPUSH
8435: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8439: LD_INT 68
8441: PPUSH
8442: LD_INT 8
8444: PPUSH
8445: LD_INT 0
8447: PPUSH
8448: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8452: LD_INT 51
8454: PPUSH
8455: LD_INT 8
8457: PPUSH
8458: LD_INT 2
8460: PPUSH
8461: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8465: LD_INT 52
8467: PPUSH
8468: LD_INT 8
8470: PPUSH
8471: LD_INT 2
8473: PPUSH
8474: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8478: LD_INT 53
8480: PPUSH
8481: LD_INT 8
8483: PPUSH
8484: LD_INT 2
8486: PPUSH
8487: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8491: LD_INT 60
8493: PPUSH
8494: LD_INT 8
8496: PPUSH
8497: LD_INT 2
8499: PPUSH
8500: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8504: LD_INT 61
8506: PPUSH
8507: LD_INT 8
8509: PPUSH
8510: LD_INT 2
8512: PPUSH
8513: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8517: LD_INT 62
8519: PPUSH
8520: LD_INT 8
8522: PPUSH
8523: LD_INT 0
8525: PPUSH
8526: CALL_OW 322
// end ; if Difficulty >= 3 then
8530: LD_OWVAR 67
8534: PUSH
8535: LD_INT 3
8537: GREATEREQUAL
8538: IFFALSE 8657
// begin SetTech ( 66 , 8 , state_researched ) ;
8540: LD_INT 66
8542: PPUSH
8543: LD_INT 8
8545: PPUSH
8546: LD_INT 2
8548: PPUSH
8549: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8553: LD_INT 67
8555: PPUSH
8556: LD_INT 8
8558: PPUSH
8559: LD_INT 2
8561: PPUSH
8562: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8566: LD_INT 68
8568: PPUSH
8569: LD_INT 8
8571: PPUSH
8572: LD_INT 0
8574: PPUSH
8575: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8579: LD_INT 51
8581: PPUSH
8582: LD_INT 8
8584: PPUSH
8585: LD_INT 2
8587: PPUSH
8588: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8592: LD_INT 52
8594: PPUSH
8595: LD_INT 8
8597: PPUSH
8598: LD_INT 2
8600: PPUSH
8601: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8605: LD_INT 53
8607: PPUSH
8608: LD_INT 8
8610: PPUSH
8611: LD_INT 2
8613: PPUSH
8614: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8618: LD_INT 60
8620: PPUSH
8621: LD_INT 8
8623: PPUSH
8624: LD_INT 2
8626: PPUSH
8627: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8631: LD_INT 61
8633: PPUSH
8634: LD_INT 8
8636: PPUSH
8637: LD_INT 2
8639: PPUSH
8640: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8644: LD_INT 62
8646: PPUSH
8647: LD_INT 8
8649: PPUSH
8650: LD_INT 0
8652: PPUSH
8653: CALL_OW 322
// end ; end ;
8657: LD_VAR 0 1
8661: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8662: LD_INT 0
8664: PPUSH
8665: PPUSH
// for i in charactersList do
8666: LD_ADDR_VAR 0 4
8670: PUSH
8671: LD_VAR 0 1
8675: PUSH
8676: FOR_IN
8677: IFFALSE 8695
// SaveCharacters ( i , ident ) ;
8679: LD_VAR 0 4
8683: PPUSH
8684: LD_VAR 0 2
8688: PPUSH
8689: CALL_OW 38
8693: GO 8676
8695: POP
8696: POP
// end ; end_of_file
8697: LD_VAR 0 3
8701: RET
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
8702: LD_EXP 38
8706: PUSH
8707: LD_INT 1
8709: EQUAL
8710: IFFALSE 9616
8712: GO 8714
8714: DISABLE
8715: LD_INT 0
8717: PPUSH
8718: PPUSH
8719: PPUSH
// begin m1 := false ;
8720: LD_ADDR_VAR 0 1
8724: PUSH
8725: LD_INT 0
8727: ST_TO_ADDR
// m2 := false ;
8728: LD_ADDR_VAR 0 2
8732: PUSH
8733: LD_INT 0
8735: ST_TO_ADDR
// m3 := false ;
8736: LD_ADDR_VAR 0 3
8740: PUSH
8741: LD_INT 0
8743: ST_TO_ADDR
// DialogueOn ;
8744: CALL_OW 6
// Say ( JMM , D9b-JMM-1 ) ;
8748: LD_EXP 1
8752: PPUSH
8753: LD_STRING D9b-JMM-1
8755: PPUSH
8756: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
8760: LD_EXP 15
8764: PPUSH
8765: LD_STRING D9b-Pow-1
8767: PPUSH
8768: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
8772: LD_EXP 1
8776: PPUSH
8777: LD_STRING D9b-JMM-2
8779: PPUSH
8780: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
8784: LD_EXP 15
8788: PPUSH
8789: LD_STRING D9b-Pow-2
8791: PPUSH
8792: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
8796: LD_EXP 1
8800: PPUSH
8801: LD_STRING D9b-JMM-3
8803: PPUSH
8804: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
8808: LD_EXP 15
8812: PPUSH
8813: LD_STRING D9b-Pow-3
8815: PPUSH
8816: CALL_OW 94
// if tick <= 60 60$00 then
8820: LD_OWVAR 1
8824: PUSH
8825: LD_INT 126000
8827: LESSEQUAL
8828: IFFALSE 8837
// SetAchievement ( ACH_ASPEED_13 ) ;
8830: LD_STRING ACH_ASPEED_13
8832: PPUSH
8833: CALL_OW 543
// if burlakStatus = 1 then
8837: LD_EXP 28
8841: PUSH
8842: LD_INT 1
8844: EQUAL
8845: IFFALSE 8867
// begin m1 := true ;
8847: LD_ADDR_VAR 0 1
8851: PUSH
8852: LD_INT 1
8854: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
8855: LD_STRING Burlak
8857: PPUSH
8858: LD_INT 1
8860: PPUSH
8861: CALL_OW 101
// end else
8865: GO 8878
// begin AddMedal ( Burlak , - 1 ) ;
8867: LD_STRING Burlak
8869: PPUSH
8870: LD_INT 1
8872: NEG
8873: PPUSH
8874: CALL_OW 101
// end ; if IsOk ( Stevens ) then
8878: LD_EXP 2
8882: PPUSH
8883: CALL_OW 302
8887: IFFALSE 8909
// begin m2 := true ;
8889: LD_ADDR_VAR 0 2
8893: PUSH
8894: LD_INT 1
8896: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
8897: LD_STRING Stevens
8899: PPUSH
8900: LD_INT 1
8902: PPUSH
8903: CALL_OW 101
// end else
8907: GO 8920
// begin AddMedal ( Stevens , - 1 ) ;
8909: LD_STRING Stevens
8911: PPUSH
8912: LD_INT 1
8914: NEG
8915: PPUSH
8916: CALL_OW 101
// end ; if radarOnSpot = 1 then
8920: LD_EXP 30
8924: PUSH
8925: LD_INT 1
8927: EQUAL
8928: IFFALSE 8950
// begin m3 := true ;
8930: LD_ADDR_VAR 0 3
8934: PUSH
8935: LD_INT 1
8937: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
8938: LD_STRING Observation
8940: PPUSH
8941: LD_INT 1
8943: PPUSH
8944: CALL_OW 101
// end else
8948: GO 8961
// begin AddMedal ( Observation , - 1 ) ;
8950: LD_STRING Observation
8952: PPUSH
8953: LD_INT 1
8955: NEG
8956: PPUSH
8957: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
8961: LD_VAR 0 1
8965: PUSH
8966: LD_VAR 0 2
8970: AND
8971: PUSH
8972: LD_VAR 0 3
8976: AND
8977: PUSH
8978: LD_OWVAR 67
8982: PUSH
8983: LD_INT 3
8985: GREATEREQUAL
8986: AND
8987: IFFALSE 8999
// SetAchievementEX ( ACH_AMER , 13 ) ;
8989: LD_STRING ACH_AMER
8991: PPUSH
8992: LD_INT 13
8994: PPUSH
8995: CALL_OW 564
// GiveMedals ( MAIN ) ;
8999: LD_STRING MAIN
9001: PPUSH
9002: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
9006: LD_EXP 28
9010: PPUSH
9011: LD_STRING 13_BurlakStatus_1
9013: PPUSH
9014: CALL_OW 39
// if IsLive ( Stevens ) then
9018: LD_EXP 2
9022: PPUSH
9023: CALL_OW 300
9027: IFFALSE 9041
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
9029: LD_INT 1
9031: PPUSH
9032: LD_STRING 13_StevensStatus_1
9034: PPUSH
9035: CALL_OW 39
9039: GO 9051
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
9041: LD_INT 0
9043: PPUSH
9044: LD_STRING 13_StevensStatus_1
9046: PPUSH
9047: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
9051: LD_INT 22
9053: PUSH
9054: LD_INT 1
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: PUSH
9061: LD_INT 21
9063: PUSH
9064: LD_INT 1
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PUSH
9071: LD_INT 2
9073: PUSH
9074: LD_INT 25
9076: PUSH
9077: LD_INT 1
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PUSH
9084: LD_INT 25
9086: PUSH
9087: LD_INT 2
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: PUSH
9094: LD_INT 25
9096: PUSH
9097: LD_INT 3
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: PUSH
9104: LD_INT 25
9106: PUSH
9107: LD_INT 4
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PUSH
9114: LD_INT 25
9116: PUSH
9117: LD_INT 5
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: PUSH
9124: LD_INT 25
9126: PUSH
9127: LD_INT 8
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: LIST
9147: PPUSH
9148: CALL_OW 69
9152: PPUSH
9153: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
9157: LD_EXP 1
9161: PPUSH
9162: LD_EXP 34
9166: PUSH
9167: LD_STRING JMM
9169: STR
9170: PPUSH
9171: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9175: LD_EXP 8
9179: PPUSH
9180: LD_EXP 34
9184: PUSH
9185: LD_STRING Brown
9187: STR
9188: PPUSH
9189: CALL 8662 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9193: LD_EXP 4
9197: PPUSH
9198: LD_EXP 34
9202: PUSH
9203: LD_STRING Donaldson
9205: STR
9206: PPUSH
9207: CALL 8662 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9211: LD_EXP 5
9215: PPUSH
9216: LD_EXP 34
9220: PUSH
9221: LD_STRING Bobby
9223: STR
9224: PPUSH
9225: CALL 8662 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
9229: LD_EXP 6
9233: PPUSH
9234: LD_EXP 34
9238: PUSH
9239: LD_STRING Cyrus
9241: STR
9242: PPUSH
9243: CALL 8662 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
9247: LD_EXP 3
9251: PPUSH
9252: LD_EXP 34
9256: PUSH
9257: LD_STRING Lisa
9259: STR
9260: PPUSH
9261: CALL 8662 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
9265: LD_EXP 13
9269: PPUSH
9270: LD_EXP 34
9274: PUSH
9275: LD_STRING Frank
9277: STR
9278: PPUSH
9279: CALL 8662 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
9283: LD_EXP 14
9287: PPUSH
9288: LD_EXP 34
9292: PUSH
9293: LD_STRING Kikuchi
9295: STR
9296: PPUSH
9297: CALL 8662 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
9301: LD_EXP 10
9305: PPUSH
9306: LD_EXP 34
9310: PUSH
9311: LD_STRING Houten
9313: STR
9314: PPUSH
9315: CALL 8662 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
9319: LD_EXP 12
9323: PPUSH
9324: LD_EXP 34
9328: PUSH
9329: LD_STRING Gary
9331: STR
9332: PPUSH
9333: CALL 8662 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
9337: LD_EXP 11
9341: PPUSH
9342: LD_EXP 34
9346: PUSH
9347: LD_STRING Cornell
9349: STR
9350: PPUSH
9351: CALL 8662 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
9355: LD_EXP 7
9359: PPUSH
9360: LD_EXP 34
9364: PUSH
9365: LD_STRING Denis
9367: STR
9368: PPUSH
9369: CALL 8662 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
9373: LD_EXP 9
9377: PPUSH
9378: LD_EXP 34
9382: PUSH
9383: LD_STRING Gladstone
9385: STR
9386: PPUSH
9387: CALL 8662 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
9391: LD_EXP 2
9395: PPUSH
9396: LD_EXP 34
9400: PUSH
9401: LD_STRING Stevens
9403: STR
9404: PPUSH
9405: CALL 8662 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
9409: LD_INT 50
9411: PUSH
9412: EMPTY
9413: LIST
9414: PUSH
9415: LD_INT 22
9417: PUSH
9418: LD_INT 1
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 21
9427: PUSH
9428: LD_INT 1
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: LD_INT 2
9437: PUSH
9438: LD_INT 25
9440: PUSH
9441: LD_INT 1
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: LD_INT 25
9450: PUSH
9451: LD_INT 2
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: PUSH
9458: LD_INT 25
9460: PUSH
9461: LD_INT 3
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PUSH
9468: LD_INT 25
9470: PUSH
9471: LD_INT 4
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PUSH
9478: LD_INT 25
9480: PUSH
9481: LD_INT 5
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PUSH
9488: LD_INT 25
9490: PUSH
9491: LD_INT 8
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: PPUSH
9513: CALL_OW 69
9517: PUSH
9518: LD_EXP 1
9522: PUSH
9523: LD_EXP 8
9527: PUSH
9528: LD_EXP 4
9532: PUSH
9533: LD_EXP 5
9537: PUSH
9538: LD_EXP 6
9542: PUSH
9543: LD_EXP 3
9547: PUSH
9548: LD_EXP 13
9552: PUSH
9553: LD_EXP 9
9557: PUSH
9558: LD_EXP 14
9562: PUSH
9563: LD_EXP 7
9567: PUSH
9568: LD_EXP 10
9572: PUSH
9573: LD_EXP 12
9577: PUSH
9578: LD_EXP 11
9582: PUSH
9583: LD_EXP 2
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: DIFF
9604: PPUSH
9605: LD_STRING 13_other_survivors
9607: PPUSH
9608: CALL_OW 38
// YouWin ;
9612: CALL_OW 103
// end ; end_of_file
9616: PPOPN 3
9618: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do var i , tmp , yourSiberite ;
9619: LD_EXP 32
9623: PUSH
9624: LD_INT 2
9626: EQUAL
9627: PUSH
9628: LD_INT 34
9630: PUSH
9631: LD_INT 8
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PPUSH
9638: CALL_OW 69
9642: NOT
9643: AND
9644: IFFALSE 9780
9646: GO 9648
9648: DISABLE
9649: LD_INT 0
9651: PPUSH
9652: PPUSH
9653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9654: LD_ADDR_VAR 0 2
9658: PUSH
9659: LD_INT 22
9661: PUSH
9662: LD_INT 1
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: PUSH
9669: LD_INT 21
9671: PUSH
9672: LD_INT 3
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: PUSH
9679: LD_INT 2
9681: PUSH
9682: LD_INT 30
9684: PUSH
9685: LD_INT 0
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: PUSH
9692: LD_INT 30
9694: PUSH
9695: LD_INT 1
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: LIST
9711: PPUSH
9712: CALL_OW 69
9716: ST_TO_ADDR
// for i in tmp do
9717: LD_ADDR_VAR 0 1
9721: PUSH
9722: LD_VAR 0 2
9726: PUSH
9727: FOR_IN
9728: IFFALSE 9761
// yourSiberite := yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
9730: LD_ADDR_VAR 0 3
9734: PUSH
9735: LD_VAR 0 3
9739: PUSH
9740: LD_VAR 0 1
9744: PPUSH
9745: CALL_OW 274
9749: PPUSH
9750: LD_INT 3
9752: PPUSH
9753: CALL_OW 275
9757: PLUS
9758: ST_TO_ADDR
9759: GO 9727
9761: POP
9762: POP
// if yourSiberite < 60 then
9763: LD_VAR 0 3
9767: PUSH
9768: LD_INT 60
9770: LESS
9771: IFFALSE 9780
// YouLost ( siberite ) ;
9773: LD_STRING siberite
9775: PPUSH
9776: CALL_OW 104
// end ; end_of_file
9780: PPOPN 3
9782: END
// every 8 8$00 + 8 8$00 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
9783: LD_INT 22
9785: PUSH
9786: LD_INT 8
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: LD_INT 21
9795: PUSH
9796: LD_INT 1
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PPUSH
9807: CALL_OW 69
9811: PUSH
9812: LD_INT 6
9814: LESS
9815: IFFALSE 9825
9817: GO 9819
9819: DISABLE
// begin enable ;
9820: ENABLE
// PrepareArabianAttack ;
9821: CALL 4018 0 0
// end ;
9825: END
// every 0 0$30 trigger eventVar1 = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
9826: LD_EXP 35
9830: PUSH
9831: LD_INT 1
9833: EQUAL
9834: PUSH
9835: LD_INT 22
9837: PUSH
9838: LD_INT 8
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: PUSH
9845: LD_INT 21
9847: PUSH
9848: LD_INT 1
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: PUSH
9855: EMPTY
9856: LIST
9857: LIST
9858: PPUSH
9859: CALL_OW 69
9863: PUSH
9864: LD_INT 6
9866: LESS
9867: AND
9868: IFFALSE 9895
9870: GO 9872
9872: DISABLE
// begin wait ( 3 3$30 ) ;
9873: LD_INT 7350
9875: PPUSH
9876: CALL_OW 67
// PrepareRussianAttack ;
9880: CALL 3277 0 0
// wait ( 12 12$00 ) ;
9884: LD_INT 25200
9886: PPUSH
9887: CALL_OW 67
// PrepareRussianAttack ;
9891: CALL 3277 0 0
// end ;
9895: END
// export function ArabianAttack ; var i , tmp , path , path2 , vehicles , infantry , units , apes ; begin
9896: LD_INT 0
9898: PPUSH
9899: PPUSH
9900: PPUSH
9901: PPUSH
9902: PPUSH
9903: PPUSH
9904: PPUSH
9905: PPUSH
9906: PPUSH
// units := FilterAllUnits ( [ [ f_side , 8 ] , [ f_tag , 10 ] ] ) ;
9907: LD_ADDR_VAR 0 8
9911: PUSH
9912: LD_INT 22
9914: PUSH
9915: LD_INT 8
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: PUSH
9922: LD_INT 120
9924: PUSH
9925: LD_INT 10
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: PPUSH
9936: CALL_OW 69
9940: ST_TO_ADDR
// if not units then
9941: LD_VAR 0 8
9945: NOT
9946: IFFALSE 9950
// exit ;
9948: GO 10256
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
9950: LD_ADDR_VAR 0 4
9954: PUSH
9955: LD_INT 80
9957: PUSH
9958: LD_INT 60
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: PUSH
9965: LD_INT 54
9967: PUSH
9968: LD_INT 57
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PUSH
9975: LD_INT 55
9977: PUSH
9978: LD_INT 74
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PUSH
9985: LD_INT 61
9987: PUSH
9988: LD_INT 85
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: ST_TO_ADDR
// path2 := [ [ 93 , 99 ] , [ 85 , 99 ] ] ;
10001: LD_ADDR_VAR 0 5
10005: PUSH
10006: LD_INT 93
10008: PUSH
10009: LD_INT 99
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: LD_INT 85
10018: PUSH
10019: LD_INT 99
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10030: LD_INT 35
10032: PPUSH
10033: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10037: LD_ADDR_VAR 0 6
10041: PUSH
10042: LD_VAR 0 8
10046: PPUSH
10047: LD_INT 21
10049: PUSH
10050: LD_INT 2
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: PPUSH
10057: CALL_OW 72
10061: ST_TO_ADDR
// if vehicles then
10062: LD_VAR 0 6
10066: IFFALSE 10082
// AgressiveMove ( vehicles , path ) ;
10068: LD_VAR 0 6
10072: PPUSH
10073: LD_VAR 0 4
10077: PPUSH
10078: CALL 69399 0 2
// infantry := UnitFilter ( units , [ [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10082: LD_ADDR_VAR 0 7
10086: PUSH
10087: LD_VAR 0 8
10091: PPUSH
10092: LD_INT 23
10094: PUSH
10095: LD_INT 2
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PUSH
10102: LD_INT 21
10104: PUSH
10105: LD_INT 1
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PPUSH
10116: CALL_OW 72
10120: ST_TO_ADDR
// if infantry then
10121: LD_VAR 0 7
10125: IFFALSE 10141
// AgressiveMove ( infantry , path2 ) ;
10127: LD_VAR 0 7
10131: PPUSH
10132: LD_VAR 0 5
10136: PPUSH
10137: CALL 69399 0 2
// apes := UnitFilter ( units , [ [ f_nation , 0 ] , [ f_type , unit_human ] ] ) ;
10141: LD_ADDR_VAR 0 9
10145: PUSH
10146: LD_VAR 0 8
10150: PPUSH
10151: LD_INT 23
10153: PUSH
10154: LD_INT 0
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 21
10163: PUSH
10164: LD_INT 1
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: PPUSH
10175: CALL_OW 72
10179: ST_TO_ADDR
// if apes then
10180: LD_VAR 0 9
10184: IFFALSE 10228
// ComAttackUnit ( apes [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , apes [ 1 ] ) ) ;
10186: LD_VAR 0 9
10190: PUSH
10191: LD_INT 1
10193: ARRAY
10194: PPUSH
10195: LD_INT 22
10197: PUSH
10198: LD_INT 1
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: PPUSH
10205: CALL_OW 69
10209: PPUSH
10210: LD_VAR 0 9
10214: PUSH
10215: LD_INT 1
10217: ARRAY
10218: PPUSH
10219: CALL_OW 74
10223: PPUSH
10224: CALL_OW 115
// units := UnitFilter ( units , [ f_ok ] ) ;
10228: LD_ADDR_VAR 0 8
10232: PUSH
10233: LD_VAR 0 8
10237: PPUSH
10238: LD_INT 50
10240: PUSH
10241: EMPTY
10242: LIST
10243: PPUSH
10244: CALL_OW 72
10248: ST_TO_ADDR
// until not units ;
10249: LD_VAR 0 8
10253: NOT
10254: IFFALSE 10030
// end ;
10256: LD_VAR 0 1
10260: RET
// export function RussianAttack ; var i , tmp , path , vehicles , units ; begin
10261: LD_INT 0
10263: PPUSH
10264: PPUSH
10265: PPUSH
10266: PPUSH
10267: PPUSH
10268: PPUSH
// units := FilterAllUnits ( [ [ f_side , 3 ] , [ f_tag , 10 ] ] ) ;
10269: LD_ADDR_VAR 0 6
10273: PUSH
10274: LD_INT 22
10276: PUSH
10277: LD_INT 3
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PUSH
10284: LD_INT 120
10286: PUSH
10287: LD_INT 10
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 69
10302: ST_TO_ADDR
// if not units then
10303: LD_VAR 0 6
10307: NOT
10308: IFFALSE 10312
// exit ;
10310: GO 10443
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10312: LD_ADDR_VAR 0 4
10316: PUSH
10317: LD_INT 80
10319: PUSH
10320: LD_INT 60
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: PUSH
10327: LD_INT 54
10329: PUSH
10330: LD_INT 57
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 55
10339: PUSH
10340: LD_INT 74
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: LD_INT 61
10349: PUSH
10350: LD_INT 85
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10363: LD_INT 35
10365: PPUSH
10366: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10370: LD_ADDR_VAR 0 5
10374: PUSH
10375: LD_VAR 0 6
10379: PPUSH
10380: LD_INT 21
10382: PUSH
10383: LD_INT 2
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PPUSH
10390: CALL_OW 72
10394: ST_TO_ADDR
// if vehicles then
10395: LD_VAR 0 5
10399: IFFALSE 10415
// AgressiveMove ( vehicles , path ) ;
10401: LD_VAR 0 5
10405: PPUSH
10406: LD_VAR 0 4
10410: PPUSH
10411: CALL 69399 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10415: LD_ADDR_VAR 0 6
10419: PUSH
10420: LD_VAR 0 6
10424: PPUSH
10425: LD_INT 50
10427: PUSH
10428: EMPTY
10429: LIST
10430: PPUSH
10431: CALL_OW 72
10435: ST_TO_ADDR
// until not units ;
10436: LD_VAR 0 6
10440: NOT
10441: IFFALSE 10363
// end ; end_of_file
10443: LD_VAR 0 1
10447: RET
// every 0 0$01 do var i , cratesSpawned ;
10448: GO 10450
10450: DISABLE
10451: LD_INT 0
10453: PPUSH
10454: PPUSH
// begin cratesSpawned := 0 ;
10455: LD_ADDR_VAR 0 2
10459: PUSH
10460: LD_INT 0
10462: ST_TO_ADDR
// for i := 1 to 6 do
10463: LD_ADDR_VAR 0 1
10467: PUSH
10468: DOUBLE
10469: LD_INT 1
10471: DEC
10472: ST_TO_ADDR
10473: LD_INT 6
10475: PUSH
10476: FOR_TO
10477: IFFALSE 10502
// CreateCratesArea ( rand ( 2 , 5 ) , StartCratesArea , false ) ;
10479: LD_INT 2
10481: PPUSH
10482: LD_INT 5
10484: PPUSH
10485: CALL_OW 12
10489: PPUSH
10490: LD_INT 17
10492: PPUSH
10493: LD_INT 0
10495: PPUSH
10496: CALL_OW 55
10500: GO 10476
10502: POP
10503: POP
// wait ( 0 0$20 ) ;
10504: LD_INT 700
10506: PPUSH
10507: CALL_OW 67
// repeat wait ( 0 0$08 ) ;
10511: LD_INT 280
10513: PPUSH
10514: CALL_OW 67
// if cratesSpawned < 12 then
10518: LD_VAR 0 2
10522: PUSH
10523: LD_INT 12
10525: LESS
10526: IFFALSE 10578
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
10528: LD_INT 105
10530: PPUSH
10531: LD_INT 350
10533: PPUSH
10534: CALL_OW 12
10538: PPUSH
10539: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10543: LD_INT 3
10545: PPUSH
10546: LD_INT 5
10548: PPUSH
10549: CALL_OW 12
10553: PPUSH
10554: LD_INT 13
10556: PPUSH
10557: LD_INT 1
10559: PPUSH
10560: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10564: LD_ADDR_VAR 0 2
10568: PUSH
10569: LD_VAR 0 2
10573: PUSH
10574: LD_INT 1
10576: PLUS
10577: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
10578: LD_VAR 0 2
10582: PUSH
10583: LD_INT 12
10585: GREATEREQUAL
10586: PUSH
10587: LD_VAR 0 2
10591: PUSH
10592: LD_INT 32
10594: LESS
10595: AND
10596: IFFALSE 10648
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
10598: LD_INT 420
10600: PPUSH
10601: LD_INT 700
10603: PPUSH
10604: CALL_OW 12
10608: PPUSH
10609: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10613: LD_INT 3
10615: PPUSH
10616: LD_INT 5
10618: PPUSH
10619: CALL_OW 12
10623: PPUSH
10624: LD_INT 13
10626: PPUSH
10627: LD_INT 1
10629: PPUSH
10630: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10634: LD_ADDR_VAR 0 2
10638: PUSH
10639: LD_VAR 0 2
10643: PUSH
10644: LD_INT 1
10646: PLUS
10647: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
10648: LD_VAR 0 2
10652: PUSH
10653: LD_INT 32
10655: GREATEREQUAL
10656: IFFALSE 10730
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10658: LD_INT 13
10660: PPUSH
10661: CALL_OW 435
10665: PUSH
10666: LD_INT 14
10668: LESS
10669: IFFALSE 10680
// wait ( 0 0$20 ) else
10671: LD_INT 700
10673: PPUSH
10674: CALL_OW 67
10678: GO 10695
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
10680: LD_INT 1750
10682: PPUSH
10683: LD_INT 3150
10685: PPUSH
10686: CALL_OW 12
10690: PPUSH
10691: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
10695: LD_INT 2
10697: PPUSH
10698: LD_INT 5
10700: PPUSH
10701: CALL_OW 12
10705: PPUSH
10706: LD_INT 13
10708: PPUSH
10709: LD_INT 1
10711: PPUSH
10712: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10716: LD_ADDR_VAR 0 2
10720: PUSH
10721: LD_VAR 0 2
10725: PUSH
10726: LD_INT 1
10728: PLUS
10729: ST_TO_ADDR
// end ; if cratesSpawned >= 120 then
10730: LD_VAR 0 2
10734: PUSH
10735: LD_INT 120
10737: GREATEREQUAL
10738: IFFALSE 10812
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10740: LD_INT 13
10742: PPUSH
10743: CALL_OW 435
10747: PUSH
10748: LD_INT 14
10750: LESS
10751: IFFALSE 10762
// wait ( 0 0$40 ) else
10753: LD_INT 1400
10755: PPUSH
10756: CALL_OW 67
10760: GO 10777
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
10762: LD_INT 2450
10764: PPUSH
10765: LD_INT 3850
10767: PPUSH
10768: CALL_OW 12
10772: PPUSH
10773: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
10777: LD_INT 1
10779: PPUSH
10780: LD_INT 5
10782: PPUSH
10783: CALL_OW 12
10787: PPUSH
10788: LD_INT 13
10790: PPUSH
10791: LD_INT 1
10793: PPUSH
10794: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10798: LD_ADDR_VAR 0 2
10802: PUSH
10803: LD_VAR 0 2
10807: PUSH
10808: LD_INT 1
10810: PLUS
10811: ST_TO_ADDR
// end ; until false ;
10812: LD_INT 0
10814: IFFALSE 10511
// end ; end_of_file
10816: PPOPN 2
10818: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
10819: LD_INT 0
10821: PPUSH
// ar_miner := 81 ;
10822: LD_ADDR_EXP 52
10826: PUSH
10827: LD_INT 81
10829: ST_TO_ADDR
// ar_crane := 88 ;
10830: LD_ADDR_EXP 51
10834: PUSH
10835: LD_INT 88
10837: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10838: LD_ADDR_EXP 46
10842: PUSH
10843: LD_INT 89
10845: ST_TO_ADDR
// us_hack := 99 ;
10846: LD_ADDR_EXP 47
10850: PUSH
10851: LD_INT 99
10853: ST_TO_ADDR
// us_artillery := 97 ;
10854: LD_ADDR_EXP 48
10858: PUSH
10859: LD_INT 97
10861: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10862: LD_ADDR_EXP 49
10866: PUSH
10867: LD_INT 91
10869: ST_TO_ADDR
// ar_mortar := 92 ;
10870: LD_ADDR_EXP 50
10874: PUSH
10875: LD_INT 92
10877: ST_TO_ADDR
// ru_flamethrower := 93 ;
10878: LD_ADDR_EXP 53
10882: PUSH
10883: LD_INT 93
10885: ST_TO_ADDR
// ru_radar := 98 ;
10886: LD_ADDR_EXP 45
10890: PUSH
10891: LD_INT 98
10893: ST_TO_ADDR
// tech_Artillery := 80 ;
10894: LD_ADDR_EXP 54
10898: PUSH
10899: LD_INT 80
10901: ST_TO_ADDR
// tech_RadMat := 81 ;
10902: LD_ADDR_EXP 55
10906: PUSH
10907: LD_INT 81
10909: ST_TO_ADDR
// tech_BasicTools := 82 ;
10910: LD_ADDR_EXP 56
10914: PUSH
10915: LD_INT 82
10917: ST_TO_ADDR
// tech_Cargo := 83 ;
10918: LD_ADDR_EXP 57
10922: PUSH
10923: LD_INT 83
10925: ST_TO_ADDR
// tech_Track := 84 ;
10926: LD_ADDR_EXP 58
10930: PUSH
10931: LD_INT 84
10933: ST_TO_ADDR
// tech_Crane := 85 ;
10934: LD_ADDR_EXP 59
10938: PUSH
10939: LD_INT 85
10941: ST_TO_ADDR
// tech_Bulldozer := 86 ;
10942: LD_ADDR_EXP 60
10946: PUSH
10947: LD_INT 86
10949: ST_TO_ADDR
// tech_Hovercraft := 87 ;
10950: LD_ADDR_EXP 61
10954: PUSH
10955: LD_INT 87
10957: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
10958: LD_ADDR_EXP 62
10962: PUSH
10963: LD_INT 88
10965: ST_TO_ADDR
// class_mastodont := 31 ;
10966: LD_ADDR_EXP 63
10970: PUSH
10971: LD_INT 31
10973: ST_TO_ADDR
// class_horse := 21 ;
10974: LD_ADDR_EXP 64
10978: PUSH
10979: LD_INT 21
10981: ST_TO_ADDR
// end ;
10982: LD_VAR 0 1
10986: RET
// every 1 do
10987: GO 10989
10989: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
10990: CALL 10819 0 0
10994: END
// every 0 0$1 do
10995: GO 10997
10997: DISABLE
// begin enable ;
10998: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10999: LD_STRING updateTimer(
11001: PUSH
11002: LD_OWVAR 1
11006: STR
11007: PUSH
11008: LD_STRING );
11010: STR
11011: PPUSH
11012: CALL_OW 559
// end ;
11016: END
// export function SOS_MapStart ( ) ; begin
11017: LD_INT 0
11019: PPUSH
// if streamModeActive then
11020: LD_EXP 65
11024: IFFALSE 11033
// DefineStreamItems ( true ) ;
11026: LD_INT 1
11028: PPUSH
11029: CALL 12683 0 1
// UpdateFactoryWaypoints ( ) ;
11033: CALL 26267 0 0
// end ;
11037: LD_VAR 0 1
11041: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11042: LD_INT 0
11044: PPUSH
// if p2 = 100 then
11045: LD_VAR 0 2
11049: PUSH
11050: LD_INT 100
11052: EQUAL
11053: IFFALSE 12056
// begin if not StreamModeActive then
11055: LD_EXP 65
11059: NOT
11060: IFFALSE 11070
// StreamModeActive := true ;
11062: LD_ADDR_EXP 65
11066: PUSH
11067: LD_INT 1
11069: ST_TO_ADDR
// if p3 = 0 then
11070: LD_VAR 0 3
11074: PUSH
11075: LD_INT 0
11077: EQUAL
11078: IFFALSE 11084
// InitStreamMode ;
11080: CALL 12219 0 0
// if p3 = 1 then
11084: LD_VAR 0 3
11088: PUSH
11089: LD_INT 1
11091: EQUAL
11092: IFFALSE 11102
// sRocket := true ;
11094: LD_ADDR_EXP 70
11098: PUSH
11099: LD_INT 1
11101: ST_TO_ADDR
// if p3 = 2 then
11102: LD_VAR 0 3
11106: PUSH
11107: LD_INT 2
11109: EQUAL
11110: IFFALSE 11120
// sSpeed := true ;
11112: LD_ADDR_EXP 69
11116: PUSH
11117: LD_INT 1
11119: ST_TO_ADDR
// if p3 = 3 then
11120: LD_VAR 0 3
11124: PUSH
11125: LD_INT 3
11127: EQUAL
11128: IFFALSE 11138
// sEngine := true ;
11130: LD_ADDR_EXP 71
11134: PUSH
11135: LD_INT 1
11137: ST_TO_ADDR
// if p3 = 4 then
11138: LD_VAR 0 3
11142: PUSH
11143: LD_INT 4
11145: EQUAL
11146: IFFALSE 11156
// sSpec := true ;
11148: LD_ADDR_EXP 68
11152: PUSH
11153: LD_INT 1
11155: ST_TO_ADDR
// if p3 = 5 then
11156: LD_VAR 0 3
11160: PUSH
11161: LD_INT 5
11163: EQUAL
11164: IFFALSE 11174
// sLevel := true ;
11166: LD_ADDR_EXP 72
11170: PUSH
11171: LD_INT 1
11173: ST_TO_ADDR
// if p3 = 6 then
11174: LD_VAR 0 3
11178: PUSH
11179: LD_INT 6
11181: EQUAL
11182: IFFALSE 11192
// sArmoury := true ;
11184: LD_ADDR_EXP 73
11188: PUSH
11189: LD_INT 1
11191: ST_TO_ADDR
// if p3 = 7 then
11192: LD_VAR 0 3
11196: PUSH
11197: LD_INT 7
11199: EQUAL
11200: IFFALSE 11210
// sRadar := true ;
11202: LD_ADDR_EXP 74
11206: PUSH
11207: LD_INT 1
11209: ST_TO_ADDR
// if p3 = 8 then
11210: LD_VAR 0 3
11214: PUSH
11215: LD_INT 8
11217: EQUAL
11218: IFFALSE 11228
// sBunker := true ;
11220: LD_ADDR_EXP 75
11224: PUSH
11225: LD_INT 1
11227: ST_TO_ADDR
// if p3 = 9 then
11228: LD_VAR 0 3
11232: PUSH
11233: LD_INT 9
11235: EQUAL
11236: IFFALSE 11246
// sHack := true ;
11238: LD_ADDR_EXP 76
11242: PUSH
11243: LD_INT 1
11245: ST_TO_ADDR
// if p3 = 10 then
11246: LD_VAR 0 3
11250: PUSH
11251: LD_INT 10
11253: EQUAL
11254: IFFALSE 11264
// sFire := true ;
11256: LD_ADDR_EXP 77
11260: PUSH
11261: LD_INT 1
11263: ST_TO_ADDR
// if p3 = 11 then
11264: LD_VAR 0 3
11268: PUSH
11269: LD_INT 11
11271: EQUAL
11272: IFFALSE 11282
// sRefresh := true ;
11274: LD_ADDR_EXP 78
11278: PUSH
11279: LD_INT 1
11281: ST_TO_ADDR
// if p3 = 12 then
11282: LD_VAR 0 3
11286: PUSH
11287: LD_INT 12
11289: EQUAL
11290: IFFALSE 11300
// sExp := true ;
11292: LD_ADDR_EXP 79
11296: PUSH
11297: LD_INT 1
11299: ST_TO_ADDR
// if p3 = 13 then
11300: LD_VAR 0 3
11304: PUSH
11305: LD_INT 13
11307: EQUAL
11308: IFFALSE 11318
// sDepot := true ;
11310: LD_ADDR_EXP 80
11314: PUSH
11315: LD_INT 1
11317: ST_TO_ADDR
// if p3 = 14 then
11318: LD_VAR 0 3
11322: PUSH
11323: LD_INT 14
11325: EQUAL
11326: IFFALSE 11336
// sFlag := true ;
11328: LD_ADDR_EXP 81
11332: PUSH
11333: LD_INT 1
11335: ST_TO_ADDR
// if p3 = 15 then
11336: LD_VAR 0 3
11340: PUSH
11341: LD_INT 15
11343: EQUAL
11344: IFFALSE 11354
// sKamikadze := true ;
11346: LD_ADDR_EXP 89
11350: PUSH
11351: LD_INT 1
11353: ST_TO_ADDR
// if p3 = 16 then
11354: LD_VAR 0 3
11358: PUSH
11359: LD_INT 16
11361: EQUAL
11362: IFFALSE 11372
// sTroll := true ;
11364: LD_ADDR_EXP 90
11368: PUSH
11369: LD_INT 1
11371: ST_TO_ADDR
// if p3 = 17 then
11372: LD_VAR 0 3
11376: PUSH
11377: LD_INT 17
11379: EQUAL
11380: IFFALSE 11390
// sSlow := true ;
11382: LD_ADDR_EXP 91
11386: PUSH
11387: LD_INT 1
11389: ST_TO_ADDR
// if p3 = 18 then
11390: LD_VAR 0 3
11394: PUSH
11395: LD_INT 18
11397: EQUAL
11398: IFFALSE 11408
// sLack := true ;
11400: LD_ADDR_EXP 92
11404: PUSH
11405: LD_INT 1
11407: ST_TO_ADDR
// if p3 = 19 then
11408: LD_VAR 0 3
11412: PUSH
11413: LD_INT 19
11415: EQUAL
11416: IFFALSE 11426
// sTank := true ;
11418: LD_ADDR_EXP 94
11422: PUSH
11423: LD_INT 1
11425: ST_TO_ADDR
// if p3 = 20 then
11426: LD_VAR 0 3
11430: PUSH
11431: LD_INT 20
11433: EQUAL
11434: IFFALSE 11444
// sRemote := true ;
11436: LD_ADDR_EXP 95
11440: PUSH
11441: LD_INT 1
11443: ST_TO_ADDR
// if p3 = 21 then
11444: LD_VAR 0 3
11448: PUSH
11449: LD_INT 21
11451: EQUAL
11452: IFFALSE 11462
// sPowell := true ;
11454: LD_ADDR_EXP 96
11458: PUSH
11459: LD_INT 1
11461: ST_TO_ADDR
// if p3 = 22 then
11462: LD_VAR 0 3
11466: PUSH
11467: LD_INT 22
11469: EQUAL
11470: IFFALSE 11480
// sTeleport := true ;
11472: LD_ADDR_EXP 99
11476: PUSH
11477: LD_INT 1
11479: ST_TO_ADDR
// if p3 = 23 then
11480: LD_VAR 0 3
11484: PUSH
11485: LD_INT 23
11487: EQUAL
11488: IFFALSE 11498
// sOilTower := true ;
11490: LD_ADDR_EXP 101
11494: PUSH
11495: LD_INT 1
11497: ST_TO_ADDR
// if p3 = 24 then
11498: LD_VAR 0 3
11502: PUSH
11503: LD_INT 24
11505: EQUAL
11506: IFFALSE 11516
// sShovel := true ;
11508: LD_ADDR_EXP 102
11512: PUSH
11513: LD_INT 1
11515: ST_TO_ADDR
// if p3 = 25 then
11516: LD_VAR 0 3
11520: PUSH
11521: LD_INT 25
11523: EQUAL
11524: IFFALSE 11534
// sSheik := true ;
11526: LD_ADDR_EXP 103
11530: PUSH
11531: LD_INT 1
11533: ST_TO_ADDR
// if p3 = 26 then
11534: LD_VAR 0 3
11538: PUSH
11539: LD_INT 26
11541: EQUAL
11542: IFFALSE 11552
// sEarthquake := true ;
11544: LD_ADDR_EXP 105
11548: PUSH
11549: LD_INT 1
11551: ST_TO_ADDR
// if p3 = 27 then
11552: LD_VAR 0 3
11556: PUSH
11557: LD_INT 27
11559: EQUAL
11560: IFFALSE 11570
// sAI := true ;
11562: LD_ADDR_EXP 106
11566: PUSH
11567: LD_INT 1
11569: ST_TO_ADDR
// if p3 = 28 then
11570: LD_VAR 0 3
11574: PUSH
11575: LD_INT 28
11577: EQUAL
11578: IFFALSE 11588
// sCargo := true ;
11580: LD_ADDR_EXP 109
11584: PUSH
11585: LD_INT 1
11587: ST_TO_ADDR
// if p3 = 29 then
11588: LD_VAR 0 3
11592: PUSH
11593: LD_INT 29
11595: EQUAL
11596: IFFALSE 11606
// sDLaser := true ;
11598: LD_ADDR_EXP 110
11602: PUSH
11603: LD_INT 1
11605: ST_TO_ADDR
// if p3 = 30 then
11606: LD_VAR 0 3
11610: PUSH
11611: LD_INT 30
11613: EQUAL
11614: IFFALSE 11624
// sExchange := true ;
11616: LD_ADDR_EXP 111
11620: PUSH
11621: LD_INT 1
11623: ST_TO_ADDR
// if p3 = 31 then
11624: LD_VAR 0 3
11628: PUSH
11629: LD_INT 31
11631: EQUAL
11632: IFFALSE 11642
// sFac := true ;
11634: LD_ADDR_EXP 112
11638: PUSH
11639: LD_INT 1
11641: ST_TO_ADDR
// if p3 = 32 then
11642: LD_VAR 0 3
11646: PUSH
11647: LD_INT 32
11649: EQUAL
11650: IFFALSE 11660
// sPower := true ;
11652: LD_ADDR_EXP 113
11656: PUSH
11657: LD_INT 1
11659: ST_TO_ADDR
// if p3 = 33 then
11660: LD_VAR 0 3
11664: PUSH
11665: LD_INT 33
11667: EQUAL
11668: IFFALSE 11678
// sRandom := true ;
11670: LD_ADDR_EXP 114
11674: PUSH
11675: LD_INT 1
11677: ST_TO_ADDR
// if p3 = 34 then
11678: LD_VAR 0 3
11682: PUSH
11683: LD_INT 34
11685: EQUAL
11686: IFFALSE 11696
// sShield := true ;
11688: LD_ADDR_EXP 115
11692: PUSH
11693: LD_INT 1
11695: ST_TO_ADDR
// if p3 = 35 then
11696: LD_VAR 0 3
11700: PUSH
11701: LD_INT 35
11703: EQUAL
11704: IFFALSE 11714
// sTime := true ;
11706: LD_ADDR_EXP 116
11710: PUSH
11711: LD_INT 1
11713: ST_TO_ADDR
// if p3 = 36 then
11714: LD_VAR 0 3
11718: PUSH
11719: LD_INT 36
11721: EQUAL
11722: IFFALSE 11732
// sTools := true ;
11724: LD_ADDR_EXP 117
11728: PUSH
11729: LD_INT 1
11731: ST_TO_ADDR
// if p3 = 101 then
11732: LD_VAR 0 3
11736: PUSH
11737: LD_INT 101
11739: EQUAL
11740: IFFALSE 11750
// sSold := true ;
11742: LD_ADDR_EXP 82
11746: PUSH
11747: LD_INT 1
11749: ST_TO_ADDR
// if p3 = 102 then
11750: LD_VAR 0 3
11754: PUSH
11755: LD_INT 102
11757: EQUAL
11758: IFFALSE 11768
// sDiff := true ;
11760: LD_ADDR_EXP 83
11764: PUSH
11765: LD_INT 1
11767: ST_TO_ADDR
// if p3 = 103 then
11768: LD_VAR 0 3
11772: PUSH
11773: LD_INT 103
11775: EQUAL
11776: IFFALSE 11786
// sFog := true ;
11778: LD_ADDR_EXP 86
11782: PUSH
11783: LD_INT 1
11785: ST_TO_ADDR
// if p3 = 104 then
11786: LD_VAR 0 3
11790: PUSH
11791: LD_INT 104
11793: EQUAL
11794: IFFALSE 11804
// sReset := true ;
11796: LD_ADDR_EXP 87
11800: PUSH
11801: LD_INT 1
11803: ST_TO_ADDR
// if p3 = 105 then
11804: LD_VAR 0 3
11808: PUSH
11809: LD_INT 105
11811: EQUAL
11812: IFFALSE 11822
// sSun := true ;
11814: LD_ADDR_EXP 88
11818: PUSH
11819: LD_INT 1
11821: ST_TO_ADDR
// if p3 = 106 then
11822: LD_VAR 0 3
11826: PUSH
11827: LD_INT 106
11829: EQUAL
11830: IFFALSE 11840
// sTiger := true ;
11832: LD_ADDR_EXP 84
11836: PUSH
11837: LD_INT 1
11839: ST_TO_ADDR
// if p3 = 107 then
11840: LD_VAR 0 3
11844: PUSH
11845: LD_INT 107
11847: EQUAL
11848: IFFALSE 11858
// sBomb := true ;
11850: LD_ADDR_EXP 85
11854: PUSH
11855: LD_INT 1
11857: ST_TO_ADDR
// if p3 = 108 then
11858: LD_VAR 0 3
11862: PUSH
11863: LD_INT 108
11865: EQUAL
11866: IFFALSE 11876
// sWound := true ;
11868: LD_ADDR_EXP 93
11872: PUSH
11873: LD_INT 1
11875: ST_TO_ADDR
// if p3 = 109 then
11876: LD_VAR 0 3
11880: PUSH
11881: LD_INT 109
11883: EQUAL
11884: IFFALSE 11894
// sBetray := true ;
11886: LD_ADDR_EXP 97
11890: PUSH
11891: LD_INT 1
11893: ST_TO_ADDR
// if p3 = 110 then
11894: LD_VAR 0 3
11898: PUSH
11899: LD_INT 110
11901: EQUAL
11902: IFFALSE 11912
// sContamin := true ;
11904: LD_ADDR_EXP 98
11908: PUSH
11909: LD_INT 1
11911: ST_TO_ADDR
// if p3 = 111 then
11912: LD_VAR 0 3
11916: PUSH
11917: LD_INT 111
11919: EQUAL
11920: IFFALSE 11930
// sOil := true ;
11922: LD_ADDR_EXP 100
11926: PUSH
11927: LD_INT 1
11929: ST_TO_ADDR
// if p3 = 112 then
11930: LD_VAR 0 3
11934: PUSH
11935: LD_INT 112
11937: EQUAL
11938: IFFALSE 11948
// sStu := true ;
11940: LD_ADDR_EXP 104
11944: PUSH
11945: LD_INT 1
11947: ST_TO_ADDR
// if p3 = 113 then
11948: LD_VAR 0 3
11952: PUSH
11953: LD_INT 113
11955: EQUAL
11956: IFFALSE 11966
// sBazooka := true ;
11958: LD_ADDR_EXP 107
11962: PUSH
11963: LD_INT 1
11965: ST_TO_ADDR
// if p3 = 114 then
11966: LD_VAR 0 3
11970: PUSH
11971: LD_INT 114
11973: EQUAL
11974: IFFALSE 11984
// sMortar := true ;
11976: LD_ADDR_EXP 108
11980: PUSH
11981: LD_INT 1
11983: ST_TO_ADDR
// if p3 = 115 then
11984: LD_VAR 0 3
11988: PUSH
11989: LD_INT 115
11991: EQUAL
11992: IFFALSE 12002
// sRanger := true ;
11994: LD_ADDR_EXP 118
11998: PUSH
11999: LD_INT 1
12001: ST_TO_ADDR
// if p3 = 116 then
12002: LD_VAR 0 3
12006: PUSH
12007: LD_INT 116
12009: EQUAL
12010: IFFALSE 12020
// sComputer := true ;
12012: LD_ADDR_EXP 119
12016: PUSH
12017: LD_INT 1
12019: ST_TO_ADDR
// if p3 = 117 then
12020: LD_VAR 0 3
12024: PUSH
12025: LD_INT 117
12027: EQUAL
12028: IFFALSE 12038
// s30 := true ;
12030: LD_ADDR_EXP 120
12034: PUSH
12035: LD_INT 1
12037: ST_TO_ADDR
// if p3 = 118 then
12038: LD_VAR 0 3
12042: PUSH
12043: LD_INT 118
12045: EQUAL
12046: IFFALSE 12056
// s60 := true ;
12048: LD_ADDR_EXP 121
12052: PUSH
12053: LD_INT 1
12055: ST_TO_ADDR
// end ; if p2 = 101 then
12056: LD_VAR 0 2
12060: PUSH
12061: LD_INT 101
12063: EQUAL
12064: IFFALSE 12192
// begin case p3 of 1 :
12066: LD_VAR 0 3
12070: PUSH
12071: LD_INT 1
12073: DOUBLE
12074: EQUAL
12075: IFTRUE 12079
12077: GO 12086
12079: POP
// hHackUnlimitedResources ; 2 :
12080: CALL 24290 0 0
12084: GO 12192
12086: LD_INT 2
12088: DOUBLE
12089: EQUAL
12090: IFTRUE 12094
12092: GO 12101
12094: POP
// hHackSetLevel10 ; 3 :
12095: CALL 24423 0 0
12099: GO 12192
12101: LD_INT 3
12103: DOUBLE
12104: EQUAL
12105: IFTRUE 12109
12107: GO 12116
12109: POP
// hHackSetLevel10YourUnits ; 4 :
12110: CALL 24508 0 0
12114: GO 12192
12116: LD_INT 4
12118: DOUBLE
12119: EQUAL
12120: IFTRUE 12124
12122: GO 12131
12124: POP
// hHackInvincible ; 5 :
12125: CALL 24956 0 0
12129: GO 12192
12131: LD_INT 5
12133: DOUBLE
12134: EQUAL
12135: IFTRUE 12139
12137: GO 12146
12139: POP
// hHackInvisible ; 6 :
12140: CALL 25067 0 0
12144: GO 12192
12146: LD_INT 6
12148: DOUBLE
12149: EQUAL
12150: IFTRUE 12154
12152: GO 12161
12154: POP
// hHackChangeYourSide ; 7 :
12155: CALL 25124 0 0
12159: GO 12192
12161: LD_INT 7
12163: DOUBLE
12164: EQUAL
12165: IFTRUE 12169
12167: GO 12176
12169: POP
// hHackChangeUnitSide ; 8 :
12170: CALL 25166 0 0
12174: GO 12192
12176: LD_INT 8
12178: DOUBLE
12179: EQUAL
12180: IFTRUE 12184
12182: GO 12191
12184: POP
// hHackFog ; end ;
12185: CALL 25267 0 0
12189: GO 12192
12191: POP
// end ; end ;
12192: LD_VAR 0 7
12196: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12197: GO 12199
12199: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12200: LD_STRING initStreamRollete();
12202: PPUSH
12203: CALL_OW 559
// InitStreamMode ;
12207: CALL 12219 0 0
// DefineStreamItems ( false ) ;
12211: LD_INT 0
12213: PPUSH
12214: CALL 12683 0 1
// end ;
12218: END
// function InitStreamMode ; begin
12219: LD_INT 0
12221: PPUSH
// streamModeActive := false ;
12222: LD_ADDR_EXP 65
12226: PUSH
12227: LD_INT 0
12229: ST_TO_ADDR
// normalCounter := 36 ;
12230: LD_ADDR_EXP 66
12234: PUSH
12235: LD_INT 36
12237: ST_TO_ADDR
// hardcoreCounter := 18 ;
12238: LD_ADDR_EXP 67
12242: PUSH
12243: LD_INT 18
12245: ST_TO_ADDR
// sRocket := false ;
12246: LD_ADDR_EXP 70
12250: PUSH
12251: LD_INT 0
12253: ST_TO_ADDR
// sSpeed := false ;
12254: LD_ADDR_EXP 69
12258: PUSH
12259: LD_INT 0
12261: ST_TO_ADDR
// sEngine := false ;
12262: LD_ADDR_EXP 71
12266: PUSH
12267: LD_INT 0
12269: ST_TO_ADDR
// sSpec := false ;
12270: LD_ADDR_EXP 68
12274: PUSH
12275: LD_INT 0
12277: ST_TO_ADDR
// sLevel := false ;
12278: LD_ADDR_EXP 72
12282: PUSH
12283: LD_INT 0
12285: ST_TO_ADDR
// sArmoury := false ;
12286: LD_ADDR_EXP 73
12290: PUSH
12291: LD_INT 0
12293: ST_TO_ADDR
// sRadar := false ;
12294: LD_ADDR_EXP 74
12298: PUSH
12299: LD_INT 0
12301: ST_TO_ADDR
// sBunker := false ;
12302: LD_ADDR_EXP 75
12306: PUSH
12307: LD_INT 0
12309: ST_TO_ADDR
// sHack := false ;
12310: LD_ADDR_EXP 76
12314: PUSH
12315: LD_INT 0
12317: ST_TO_ADDR
// sFire := false ;
12318: LD_ADDR_EXP 77
12322: PUSH
12323: LD_INT 0
12325: ST_TO_ADDR
// sRefresh := false ;
12326: LD_ADDR_EXP 78
12330: PUSH
12331: LD_INT 0
12333: ST_TO_ADDR
// sExp := false ;
12334: LD_ADDR_EXP 79
12338: PUSH
12339: LD_INT 0
12341: ST_TO_ADDR
// sDepot := false ;
12342: LD_ADDR_EXP 80
12346: PUSH
12347: LD_INT 0
12349: ST_TO_ADDR
// sFlag := false ;
12350: LD_ADDR_EXP 81
12354: PUSH
12355: LD_INT 0
12357: ST_TO_ADDR
// sKamikadze := false ;
12358: LD_ADDR_EXP 89
12362: PUSH
12363: LD_INT 0
12365: ST_TO_ADDR
// sTroll := false ;
12366: LD_ADDR_EXP 90
12370: PUSH
12371: LD_INT 0
12373: ST_TO_ADDR
// sSlow := false ;
12374: LD_ADDR_EXP 91
12378: PUSH
12379: LD_INT 0
12381: ST_TO_ADDR
// sLack := false ;
12382: LD_ADDR_EXP 92
12386: PUSH
12387: LD_INT 0
12389: ST_TO_ADDR
// sTank := false ;
12390: LD_ADDR_EXP 94
12394: PUSH
12395: LD_INT 0
12397: ST_TO_ADDR
// sRemote := false ;
12398: LD_ADDR_EXP 95
12402: PUSH
12403: LD_INT 0
12405: ST_TO_ADDR
// sPowell := false ;
12406: LD_ADDR_EXP 96
12410: PUSH
12411: LD_INT 0
12413: ST_TO_ADDR
// sTeleport := false ;
12414: LD_ADDR_EXP 99
12418: PUSH
12419: LD_INT 0
12421: ST_TO_ADDR
// sOilTower := false ;
12422: LD_ADDR_EXP 101
12426: PUSH
12427: LD_INT 0
12429: ST_TO_ADDR
// sShovel := false ;
12430: LD_ADDR_EXP 102
12434: PUSH
12435: LD_INT 0
12437: ST_TO_ADDR
// sSheik := false ;
12438: LD_ADDR_EXP 103
12442: PUSH
12443: LD_INT 0
12445: ST_TO_ADDR
// sEarthquake := false ;
12446: LD_ADDR_EXP 105
12450: PUSH
12451: LD_INT 0
12453: ST_TO_ADDR
// sAI := false ;
12454: LD_ADDR_EXP 106
12458: PUSH
12459: LD_INT 0
12461: ST_TO_ADDR
// sCargo := false ;
12462: LD_ADDR_EXP 109
12466: PUSH
12467: LD_INT 0
12469: ST_TO_ADDR
// sDLaser := false ;
12470: LD_ADDR_EXP 110
12474: PUSH
12475: LD_INT 0
12477: ST_TO_ADDR
// sExchange := false ;
12478: LD_ADDR_EXP 111
12482: PUSH
12483: LD_INT 0
12485: ST_TO_ADDR
// sFac := false ;
12486: LD_ADDR_EXP 112
12490: PUSH
12491: LD_INT 0
12493: ST_TO_ADDR
// sPower := false ;
12494: LD_ADDR_EXP 113
12498: PUSH
12499: LD_INT 0
12501: ST_TO_ADDR
// sRandom := false ;
12502: LD_ADDR_EXP 114
12506: PUSH
12507: LD_INT 0
12509: ST_TO_ADDR
// sShield := false ;
12510: LD_ADDR_EXP 115
12514: PUSH
12515: LD_INT 0
12517: ST_TO_ADDR
// sTime := false ;
12518: LD_ADDR_EXP 116
12522: PUSH
12523: LD_INT 0
12525: ST_TO_ADDR
// sTools := false ;
12526: LD_ADDR_EXP 117
12530: PUSH
12531: LD_INT 0
12533: ST_TO_ADDR
// sSold := false ;
12534: LD_ADDR_EXP 82
12538: PUSH
12539: LD_INT 0
12541: ST_TO_ADDR
// sDiff := false ;
12542: LD_ADDR_EXP 83
12546: PUSH
12547: LD_INT 0
12549: ST_TO_ADDR
// sFog := false ;
12550: LD_ADDR_EXP 86
12554: PUSH
12555: LD_INT 0
12557: ST_TO_ADDR
// sReset := false ;
12558: LD_ADDR_EXP 87
12562: PUSH
12563: LD_INT 0
12565: ST_TO_ADDR
// sSun := false ;
12566: LD_ADDR_EXP 88
12570: PUSH
12571: LD_INT 0
12573: ST_TO_ADDR
// sTiger := false ;
12574: LD_ADDR_EXP 84
12578: PUSH
12579: LD_INT 0
12581: ST_TO_ADDR
// sBomb := false ;
12582: LD_ADDR_EXP 85
12586: PUSH
12587: LD_INT 0
12589: ST_TO_ADDR
// sWound := false ;
12590: LD_ADDR_EXP 93
12594: PUSH
12595: LD_INT 0
12597: ST_TO_ADDR
// sBetray := false ;
12598: LD_ADDR_EXP 97
12602: PUSH
12603: LD_INT 0
12605: ST_TO_ADDR
// sContamin := false ;
12606: LD_ADDR_EXP 98
12610: PUSH
12611: LD_INT 0
12613: ST_TO_ADDR
// sOil := false ;
12614: LD_ADDR_EXP 100
12618: PUSH
12619: LD_INT 0
12621: ST_TO_ADDR
// sStu := false ;
12622: LD_ADDR_EXP 104
12626: PUSH
12627: LD_INT 0
12629: ST_TO_ADDR
// sBazooka := false ;
12630: LD_ADDR_EXP 107
12634: PUSH
12635: LD_INT 0
12637: ST_TO_ADDR
// sMortar := false ;
12638: LD_ADDR_EXP 108
12642: PUSH
12643: LD_INT 0
12645: ST_TO_ADDR
// sRanger := false ;
12646: LD_ADDR_EXP 118
12650: PUSH
12651: LD_INT 0
12653: ST_TO_ADDR
// sComputer := false ;
12654: LD_ADDR_EXP 119
12658: PUSH
12659: LD_INT 0
12661: ST_TO_ADDR
// s30 := false ;
12662: LD_ADDR_EXP 120
12666: PUSH
12667: LD_INT 0
12669: ST_TO_ADDR
// s60 := false ;
12670: LD_ADDR_EXP 121
12674: PUSH
12675: LD_INT 0
12677: ST_TO_ADDR
// end ;
12678: LD_VAR 0 1
12682: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12683: LD_INT 0
12685: PPUSH
12686: PPUSH
12687: PPUSH
12688: PPUSH
12689: PPUSH
12690: PPUSH
12691: PPUSH
// result := [ ] ;
12692: LD_ADDR_VAR 0 2
12696: PUSH
12697: EMPTY
12698: ST_TO_ADDR
// if campaign_id = 1 then
12699: LD_OWVAR 69
12703: PUSH
12704: LD_INT 1
12706: EQUAL
12707: IFFALSE 15873
// begin case mission_number of 1 :
12709: LD_OWVAR 70
12713: PUSH
12714: LD_INT 1
12716: DOUBLE
12717: EQUAL
12718: IFTRUE 12722
12720: GO 12798
12722: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12723: LD_ADDR_VAR 0 2
12727: PUSH
12728: LD_INT 2
12730: PUSH
12731: LD_INT 4
12733: PUSH
12734: LD_INT 11
12736: PUSH
12737: LD_INT 12
12739: PUSH
12740: LD_INT 15
12742: PUSH
12743: LD_INT 16
12745: PUSH
12746: LD_INT 22
12748: PUSH
12749: LD_INT 23
12751: PUSH
12752: LD_INT 26
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: PUSH
12766: LD_INT 101
12768: PUSH
12769: LD_INT 102
12771: PUSH
12772: LD_INT 106
12774: PUSH
12775: LD_INT 116
12777: PUSH
12778: LD_INT 117
12780: PUSH
12781: LD_INT 118
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: ST_TO_ADDR
12796: GO 15871
12798: LD_INT 2
12800: DOUBLE
12801: EQUAL
12802: IFTRUE 12806
12804: GO 12890
12806: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12807: LD_ADDR_VAR 0 2
12811: PUSH
12812: LD_INT 2
12814: PUSH
12815: LD_INT 4
12817: PUSH
12818: LD_INT 11
12820: PUSH
12821: LD_INT 12
12823: PUSH
12824: LD_INT 15
12826: PUSH
12827: LD_INT 16
12829: PUSH
12830: LD_INT 22
12832: PUSH
12833: LD_INT 23
12835: PUSH
12836: LD_INT 26
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: PUSH
12850: LD_INT 101
12852: PUSH
12853: LD_INT 102
12855: PUSH
12856: LD_INT 105
12858: PUSH
12859: LD_INT 106
12861: PUSH
12862: LD_INT 108
12864: PUSH
12865: LD_INT 116
12867: PUSH
12868: LD_INT 117
12870: PUSH
12871: LD_INT 118
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: ST_TO_ADDR
12888: GO 15871
12890: LD_INT 3
12892: DOUBLE
12893: EQUAL
12894: IFTRUE 12898
12896: GO 12986
12898: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12899: LD_ADDR_VAR 0 2
12903: PUSH
12904: LD_INT 2
12906: PUSH
12907: LD_INT 4
12909: PUSH
12910: LD_INT 5
12912: PUSH
12913: LD_INT 11
12915: PUSH
12916: LD_INT 12
12918: PUSH
12919: LD_INT 15
12921: PUSH
12922: LD_INT 16
12924: PUSH
12925: LD_INT 22
12927: PUSH
12928: LD_INT 26
12930: PUSH
12931: LD_INT 36
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: PUSH
12946: LD_INT 101
12948: PUSH
12949: LD_INT 102
12951: PUSH
12952: LD_INT 105
12954: PUSH
12955: LD_INT 106
12957: PUSH
12958: LD_INT 108
12960: PUSH
12961: LD_INT 116
12963: PUSH
12964: LD_INT 117
12966: PUSH
12967: LD_INT 118
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: ST_TO_ADDR
12984: GO 15871
12986: LD_INT 4
12988: DOUBLE
12989: EQUAL
12990: IFTRUE 12994
12992: GO 13090
12994: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12995: LD_ADDR_VAR 0 2
12999: PUSH
13000: LD_INT 2
13002: PUSH
13003: LD_INT 4
13005: PUSH
13006: LD_INT 5
13008: PUSH
13009: LD_INT 8
13011: PUSH
13012: LD_INT 11
13014: PUSH
13015: LD_INT 12
13017: PUSH
13018: LD_INT 15
13020: PUSH
13021: LD_INT 16
13023: PUSH
13024: LD_INT 22
13026: PUSH
13027: LD_INT 23
13029: PUSH
13030: LD_INT 26
13032: PUSH
13033: LD_INT 36
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: PUSH
13050: LD_INT 101
13052: PUSH
13053: LD_INT 102
13055: PUSH
13056: LD_INT 105
13058: PUSH
13059: LD_INT 106
13061: PUSH
13062: LD_INT 108
13064: PUSH
13065: LD_INT 116
13067: PUSH
13068: LD_INT 117
13070: PUSH
13071: LD_INT 118
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: ST_TO_ADDR
13088: GO 15871
13090: LD_INT 5
13092: DOUBLE
13093: EQUAL
13094: IFTRUE 13098
13096: GO 13210
13098: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13099: LD_ADDR_VAR 0 2
13103: PUSH
13104: LD_INT 2
13106: PUSH
13107: LD_INT 4
13109: PUSH
13110: LD_INT 5
13112: PUSH
13113: LD_INT 6
13115: PUSH
13116: LD_INT 8
13118: PUSH
13119: LD_INT 11
13121: PUSH
13122: LD_INT 12
13124: PUSH
13125: LD_INT 15
13127: PUSH
13128: LD_INT 16
13130: PUSH
13131: LD_INT 22
13133: PUSH
13134: LD_INT 23
13136: PUSH
13137: LD_INT 25
13139: PUSH
13140: LD_INT 26
13142: PUSH
13143: LD_INT 36
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: PUSH
13162: LD_INT 101
13164: PUSH
13165: LD_INT 102
13167: PUSH
13168: LD_INT 105
13170: PUSH
13171: LD_INT 106
13173: PUSH
13174: LD_INT 108
13176: PUSH
13177: LD_INT 109
13179: PUSH
13180: LD_INT 112
13182: PUSH
13183: LD_INT 116
13185: PUSH
13186: LD_INT 117
13188: PUSH
13189: LD_INT 118
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: ST_TO_ADDR
13208: GO 15871
13210: LD_INT 6
13212: DOUBLE
13213: EQUAL
13214: IFTRUE 13218
13216: GO 13350
13218: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13219: LD_ADDR_VAR 0 2
13223: PUSH
13224: LD_INT 2
13226: PUSH
13227: LD_INT 4
13229: PUSH
13230: LD_INT 5
13232: PUSH
13233: LD_INT 6
13235: PUSH
13236: LD_INT 8
13238: PUSH
13239: LD_INT 11
13241: PUSH
13242: LD_INT 12
13244: PUSH
13245: LD_INT 15
13247: PUSH
13248: LD_INT 16
13250: PUSH
13251: LD_INT 20
13253: PUSH
13254: LD_INT 21
13256: PUSH
13257: LD_INT 22
13259: PUSH
13260: LD_INT 23
13262: PUSH
13263: LD_INT 25
13265: PUSH
13266: LD_INT 26
13268: PUSH
13269: LD_INT 30
13271: PUSH
13272: LD_INT 31
13274: PUSH
13275: LD_INT 32
13277: PUSH
13278: LD_INT 36
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: PUSH
13302: LD_INT 101
13304: PUSH
13305: LD_INT 102
13307: PUSH
13308: LD_INT 105
13310: PUSH
13311: LD_INT 106
13313: PUSH
13314: LD_INT 108
13316: PUSH
13317: LD_INT 109
13319: PUSH
13320: LD_INT 112
13322: PUSH
13323: LD_INT 116
13325: PUSH
13326: LD_INT 117
13328: PUSH
13329: LD_INT 118
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: ST_TO_ADDR
13348: GO 15871
13350: LD_INT 7
13352: DOUBLE
13353: EQUAL
13354: IFTRUE 13358
13356: GO 13470
13358: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13359: LD_ADDR_VAR 0 2
13363: PUSH
13364: LD_INT 2
13366: PUSH
13367: LD_INT 4
13369: PUSH
13370: LD_INT 5
13372: PUSH
13373: LD_INT 7
13375: PUSH
13376: LD_INT 11
13378: PUSH
13379: LD_INT 12
13381: PUSH
13382: LD_INT 15
13384: PUSH
13385: LD_INT 16
13387: PUSH
13388: LD_INT 20
13390: PUSH
13391: LD_INT 21
13393: PUSH
13394: LD_INT 22
13396: PUSH
13397: LD_INT 23
13399: PUSH
13400: LD_INT 25
13402: PUSH
13403: LD_INT 26
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 101
13424: PUSH
13425: LD_INT 102
13427: PUSH
13428: LD_INT 103
13430: PUSH
13431: LD_INT 105
13433: PUSH
13434: LD_INT 106
13436: PUSH
13437: LD_INT 108
13439: PUSH
13440: LD_INT 112
13442: PUSH
13443: LD_INT 116
13445: PUSH
13446: LD_INT 117
13448: PUSH
13449: LD_INT 118
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: ST_TO_ADDR
13468: GO 15871
13470: LD_INT 8
13472: DOUBLE
13473: EQUAL
13474: IFTRUE 13478
13476: GO 13618
13478: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13479: LD_ADDR_VAR 0 2
13483: PUSH
13484: LD_INT 2
13486: PUSH
13487: LD_INT 4
13489: PUSH
13490: LD_INT 5
13492: PUSH
13493: LD_INT 6
13495: PUSH
13496: LD_INT 7
13498: PUSH
13499: LD_INT 8
13501: PUSH
13502: LD_INT 11
13504: PUSH
13505: LD_INT 12
13507: PUSH
13508: LD_INT 15
13510: PUSH
13511: LD_INT 16
13513: PUSH
13514: LD_INT 20
13516: PUSH
13517: LD_INT 21
13519: PUSH
13520: LD_INT 22
13522: PUSH
13523: LD_INT 23
13525: PUSH
13526: LD_INT 25
13528: PUSH
13529: LD_INT 26
13531: PUSH
13532: LD_INT 30
13534: PUSH
13535: LD_INT 31
13537: PUSH
13538: LD_INT 32
13540: PUSH
13541: LD_INT 36
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: PUSH
13566: LD_INT 101
13568: PUSH
13569: LD_INT 102
13571: PUSH
13572: LD_INT 103
13574: PUSH
13575: LD_INT 105
13577: PUSH
13578: LD_INT 106
13580: PUSH
13581: LD_INT 108
13583: PUSH
13584: LD_INT 109
13586: PUSH
13587: LD_INT 112
13589: PUSH
13590: LD_INT 116
13592: PUSH
13593: LD_INT 117
13595: PUSH
13596: LD_INT 118
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: ST_TO_ADDR
13616: GO 15871
13618: LD_INT 9
13620: DOUBLE
13621: EQUAL
13622: IFTRUE 13626
13624: GO 13774
13626: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13627: LD_ADDR_VAR 0 2
13631: PUSH
13632: LD_INT 2
13634: PUSH
13635: LD_INT 4
13637: PUSH
13638: LD_INT 5
13640: PUSH
13641: LD_INT 6
13643: PUSH
13644: LD_INT 7
13646: PUSH
13647: LD_INT 8
13649: PUSH
13650: LD_INT 11
13652: PUSH
13653: LD_INT 12
13655: PUSH
13656: LD_INT 15
13658: PUSH
13659: LD_INT 16
13661: PUSH
13662: LD_INT 20
13664: PUSH
13665: LD_INT 21
13667: PUSH
13668: LD_INT 22
13670: PUSH
13671: LD_INT 23
13673: PUSH
13674: LD_INT 25
13676: PUSH
13677: LD_INT 26
13679: PUSH
13680: LD_INT 28
13682: PUSH
13683: LD_INT 30
13685: PUSH
13686: LD_INT 31
13688: PUSH
13689: LD_INT 32
13691: PUSH
13692: LD_INT 36
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: PUSH
13718: LD_INT 101
13720: PUSH
13721: LD_INT 102
13723: PUSH
13724: LD_INT 103
13726: PUSH
13727: LD_INT 105
13729: PUSH
13730: LD_INT 106
13732: PUSH
13733: LD_INT 108
13735: PUSH
13736: LD_INT 109
13738: PUSH
13739: LD_INT 112
13741: PUSH
13742: LD_INT 114
13744: PUSH
13745: LD_INT 116
13747: PUSH
13748: LD_INT 117
13750: PUSH
13751: LD_INT 118
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: ST_TO_ADDR
13772: GO 15871
13774: LD_INT 10
13776: DOUBLE
13777: EQUAL
13778: IFTRUE 13782
13780: GO 13978
13782: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13783: LD_ADDR_VAR 0 2
13787: PUSH
13788: LD_INT 2
13790: PUSH
13791: LD_INT 4
13793: PUSH
13794: LD_INT 5
13796: PUSH
13797: LD_INT 6
13799: PUSH
13800: LD_INT 7
13802: PUSH
13803: LD_INT 8
13805: PUSH
13806: LD_INT 9
13808: PUSH
13809: LD_INT 10
13811: PUSH
13812: LD_INT 11
13814: PUSH
13815: LD_INT 12
13817: PUSH
13818: LD_INT 13
13820: PUSH
13821: LD_INT 14
13823: PUSH
13824: LD_INT 15
13826: PUSH
13827: LD_INT 16
13829: PUSH
13830: LD_INT 17
13832: PUSH
13833: LD_INT 18
13835: PUSH
13836: LD_INT 19
13838: PUSH
13839: LD_INT 20
13841: PUSH
13842: LD_INT 21
13844: PUSH
13845: LD_INT 22
13847: PUSH
13848: LD_INT 23
13850: PUSH
13851: LD_INT 24
13853: PUSH
13854: LD_INT 25
13856: PUSH
13857: LD_INT 26
13859: PUSH
13860: LD_INT 28
13862: PUSH
13863: LD_INT 30
13865: PUSH
13866: LD_INT 31
13868: PUSH
13869: LD_INT 32
13871: PUSH
13872: LD_INT 36
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: PUSH
13906: LD_INT 101
13908: PUSH
13909: LD_INT 102
13911: PUSH
13912: LD_INT 103
13914: PUSH
13915: LD_INT 104
13917: PUSH
13918: LD_INT 105
13920: PUSH
13921: LD_INT 106
13923: PUSH
13924: LD_INT 107
13926: PUSH
13927: LD_INT 108
13929: PUSH
13930: LD_INT 109
13932: PUSH
13933: LD_INT 110
13935: PUSH
13936: LD_INT 111
13938: PUSH
13939: LD_INT 112
13941: PUSH
13942: LD_INT 114
13944: PUSH
13945: LD_INT 116
13947: PUSH
13948: LD_INT 117
13950: PUSH
13951: LD_INT 118
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: ST_TO_ADDR
13976: GO 15871
13978: LD_INT 11
13980: DOUBLE
13981: EQUAL
13982: IFTRUE 13986
13984: GO 14190
13986: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13987: LD_ADDR_VAR 0 2
13991: PUSH
13992: LD_INT 2
13994: PUSH
13995: LD_INT 3
13997: PUSH
13998: LD_INT 4
14000: PUSH
14001: LD_INT 5
14003: PUSH
14004: LD_INT 6
14006: PUSH
14007: LD_INT 7
14009: PUSH
14010: LD_INT 8
14012: PUSH
14013: LD_INT 9
14015: PUSH
14016: LD_INT 10
14018: PUSH
14019: LD_INT 11
14021: PUSH
14022: LD_INT 12
14024: PUSH
14025: LD_INT 13
14027: PUSH
14028: LD_INT 14
14030: PUSH
14031: LD_INT 15
14033: PUSH
14034: LD_INT 16
14036: PUSH
14037: LD_INT 17
14039: PUSH
14040: LD_INT 18
14042: PUSH
14043: LD_INT 19
14045: PUSH
14046: LD_INT 20
14048: PUSH
14049: LD_INT 21
14051: PUSH
14052: LD_INT 22
14054: PUSH
14055: LD_INT 23
14057: PUSH
14058: LD_INT 24
14060: PUSH
14061: LD_INT 25
14063: PUSH
14064: LD_INT 26
14066: PUSH
14067: LD_INT 28
14069: PUSH
14070: LD_INT 30
14072: PUSH
14073: LD_INT 31
14075: PUSH
14076: LD_INT 32
14078: PUSH
14079: LD_INT 34
14081: PUSH
14082: LD_INT 36
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: PUSH
14118: LD_INT 101
14120: PUSH
14121: LD_INT 102
14123: PUSH
14124: LD_INT 103
14126: PUSH
14127: LD_INT 104
14129: PUSH
14130: LD_INT 105
14132: PUSH
14133: LD_INT 106
14135: PUSH
14136: LD_INT 107
14138: PUSH
14139: LD_INT 108
14141: PUSH
14142: LD_INT 109
14144: PUSH
14145: LD_INT 110
14147: PUSH
14148: LD_INT 111
14150: PUSH
14151: LD_INT 112
14153: PUSH
14154: LD_INT 114
14156: PUSH
14157: LD_INT 116
14159: PUSH
14160: LD_INT 117
14162: PUSH
14163: LD_INT 118
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: ST_TO_ADDR
14188: GO 15871
14190: LD_INT 12
14192: DOUBLE
14193: EQUAL
14194: IFTRUE 14198
14196: GO 14418
14198: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14199: LD_ADDR_VAR 0 2
14203: PUSH
14204: LD_INT 1
14206: PUSH
14207: LD_INT 2
14209: PUSH
14210: LD_INT 3
14212: PUSH
14213: LD_INT 4
14215: PUSH
14216: LD_INT 5
14218: PUSH
14219: LD_INT 6
14221: PUSH
14222: LD_INT 7
14224: PUSH
14225: LD_INT 8
14227: PUSH
14228: LD_INT 9
14230: PUSH
14231: LD_INT 10
14233: PUSH
14234: LD_INT 11
14236: PUSH
14237: LD_INT 12
14239: PUSH
14240: LD_INT 13
14242: PUSH
14243: LD_INT 14
14245: PUSH
14246: LD_INT 15
14248: PUSH
14249: LD_INT 16
14251: PUSH
14252: LD_INT 17
14254: PUSH
14255: LD_INT 18
14257: PUSH
14258: LD_INT 19
14260: PUSH
14261: LD_INT 20
14263: PUSH
14264: LD_INT 21
14266: PUSH
14267: LD_INT 22
14269: PUSH
14270: LD_INT 23
14272: PUSH
14273: LD_INT 24
14275: PUSH
14276: LD_INT 25
14278: PUSH
14279: LD_INT 26
14281: PUSH
14282: LD_INT 27
14284: PUSH
14285: LD_INT 28
14287: PUSH
14288: LD_INT 30
14290: PUSH
14291: LD_INT 31
14293: PUSH
14294: LD_INT 32
14296: PUSH
14297: LD_INT 33
14299: PUSH
14300: LD_INT 34
14302: PUSH
14303: LD_INT 36
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: PUSH
14342: LD_INT 101
14344: PUSH
14345: LD_INT 102
14347: PUSH
14348: LD_INT 103
14350: PUSH
14351: LD_INT 104
14353: PUSH
14354: LD_INT 105
14356: PUSH
14357: LD_INT 106
14359: PUSH
14360: LD_INT 107
14362: PUSH
14363: LD_INT 108
14365: PUSH
14366: LD_INT 109
14368: PUSH
14369: LD_INT 110
14371: PUSH
14372: LD_INT 111
14374: PUSH
14375: LD_INT 112
14377: PUSH
14378: LD_INT 113
14380: PUSH
14381: LD_INT 114
14383: PUSH
14384: LD_INT 116
14386: PUSH
14387: LD_INT 117
14389: PUSH
14390: LD_INT 118
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: ST_TO_ADDR
14416: GO 15871
14418: LD_INT 13
14420: DOUBLE
14421: EQUAL
14422: IFTRUE 14426
14424: GO 14634
14426: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14427: LD_ADDR_VAR 0 2
14431: PUSH
14432: LD_INT 1
14434: PUSH
14435: LD_INT 2
14437: PUSH
14438: LD_INT 3
14440: PUSH
14441: LD_INT 4
14443: PUSH
14444: LD_INT 5
14446: PUSH
14447: LD_INT 8
14449: PUSH
14450: LD_INT 9
14452: PUSH
14453: LD_INT 10
14455: PUSH
14456: LD_INT 11
14458: PUSH
14459: LD_INT 12
14461: PUSH
14462: LD_INT 14
14464: PUSH
14465: LD_INT 15
14467: PUSH
14468: LD_INT 16
14470: PUSH
14471: LD_INT 17
14473: PUSH
14474: LD_INT 18
14476: PUSH
14477: LD_INT 19
14479: PUSH
14480: LD_INT 20
14482: PUSH
14483: LD_INT 21
14485: PUSH
14486: LD_INT 22
14488: PUSH
14489: LD_INT 23
14491: PUSH
14492: LD_INT 24
14494: PUSH
14495: LD_INT 25
14497: PUSH
14498: LD_INT 26
14500: PUSH
14501: LD_INT 27
14503: PUSH
14504: LD_INT 28
14506: PUSH
14507: LD_INT 30
14509: PUSH
14510: LD_INT 31
14512: PUSH
14513: LD_INT 32
14515: PUSH
14516: LD_INT 33
14518: PUSH
14519: LD_INT 34
14521: PUSH
14522: LD_INT 36
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: PUSH
14558: LD_INT 101
14560: PUSH
14561: LD_INT 102
14563: PUSH
14564: LD_INT 103
14566: PUSH
14567: LD_INT 104
14569: PUSH
14570: LD_INT 105
14572: PUSH
14573: LD_INT 106
14575: PUSH
14576: LD_INT 107
14578: PUSH
14579: LD_INT 108
14581: PUSH
14582: LD_INT 109
14584: PUSH
14585: LD_INT 110
14587: PUSH
14588: LD_INT 111
14590: PUSH
14591: LD_INT 112
14593: PUSH
14594: LD_INT 113
14596: PUSH
14597: LD_INT 114
14599: PUSH
14600: LD_INT 116
14602: PUSH
14603: LD_INT 117
14605: PUSH
14606: LD_INT 118
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: ST_TO_ADDR
14632: GO 15871
14634: LD_INT 14
14636: DOUBLE
14637: EQUAL
14638: IFTRUE 14642
14640: GO 14866
14642: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14643: LD_ADDR_VAR 0 2
14647: PUSH
14648: LD_INT 1
14650: PUSH
14651: LD_INT 2
14653: PUSH
14654: LD_INT 3
14656: PUSH
14657: LD_INT 4
14659: PUSH
14660: LD_INT 5
14662: PUSH
14663: LD_INT 6
14665: PUSH
14666: LD_INT 7
14668: PUSH
14669: LD_INT 8
14671: PUSH
14672: LD_INT 9
14674: PUSH
14675: LD_INT 10
14677: PUSH
14678: LD_INT 11
14680: PUSH
14681: LD_INT 12
14683: PUSH
14684: LD_INT 13
14686: PUSH
14687: LD_INT 14
14689: PUSH
14690: LD_INT 15
14692: PUSH
14693: LD_INT 16
14695: PUSH
14696: LD_INT 17
14698: PUSH
14699: LD_INT 18
14701: PUSH
14702: LD_INT 19
14704: PUSH
14705: LD_INT 20
14707: PUSH
14708: LD_INT 21
14710: PUSH
14711: LD_INT 22
14713: PUSH
14714: LD_INT 23
14716: PUSH
14717: LD_INT 24
14719: PUSH
14720: LD_INT 25
14722: PUSH
14723: LD_INT 26
14725: PUSH
14726: LD_INT 27
14728: PUSH
14729: LD_INT 28
14731: PUSH
14732: LD_INT 29
14734: PUSH
14735: LD_INT 30
14737: PUSH
14738: LD_INT 31
14740: PUSH
14741: LD_INT 32
14743: PUSH
14744: LD_INT 33
14746: PUSH
14747: LD_INT 34
14749: PUSH
14750: LD_INT 36
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: PUSH
14790: LD_INT 101
14792: PUSH
14793: LD_INT 102
14795: PUSH
14796: LD_INT 103
14798: PUSH
14799: LD_INT 104
14801: PUSH
14802: LD_INT 105
14804: PUSH
14805: LD_INT 106
14807: PUSH
14808: LD_INT 107
14810: PUSH
14811: LD_INT 108
14813: PUSH
14814: LD_INT 109
14816: PUSH
14817: LD_INT 110
14819: PUSH
14820: LD_INT 111
14822: PUSH
14823: LD_INT 112
14825: PUSH
14826: LD_INT 113
14828: PUSH
14829: LD_INT 114
14831: PUSH
14832: LD_INT 116
14834: PUSH
14835: LD_INT 117
14837: PUSH
14838: LD_INT 118
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: ST_TO_ADDR
14864: GO 15871
14866: LD_INT 15
14868: DOUBLE
14869: EQUAL
14870: IFTRUE 14874
14872: GO 15098
14874: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14875: LD_ADDR_VAR 0 2
14879: PUSH
14880: LD_INT 1
14882: PUSH
14883: LD_INT 2
14885: PUSH
14886: LD_INT 3
14888: PUSH
14889: LD_INT 4
14891: PUSH
14892: LD_INT 5
14894: PUSH
14895: LD_INT 6
14897: PUSH
14898: LD_INT 7
14900: PUSH
14901: LD_INT 8
14903: PUSH
14904: LD_INT 9
14906: PUSH
14907: LD_INT 10
14909: PUSH
14910: LD_INT 11
14912: PUSH
14913: LD_INT 12
14915: PUSH
14916: LD_INT 13
14918: PUSH
14919: LD_INT 14
14921: PUSH
14922: LD_INT 15
14924: PUSH
14925: LD_INT 16
14927: PUSH
14928: LD_INT 17
14930: PUSH
14931: LD_INT 18
14933: PUSH
14934: LD_INT 19
14936: PUSH
14937: LD_INT 20
14939: PUSH
14940: LD_INT 21
14942: PUSH
14943: LD_INT 22
14945: PUSH
14946: LD_INT 23
14948: PUSH
14949: LD_INT 24
14951: PUSH
14952: LD_INT 25
14954: PUSH
14955: LD_INT 26
14957: PUSH
14958: LD_INT 27
14960: PUSH
14961: LD_INT 28
14963: PUSH
14964: LD_INT 29
14966: PUSH
14967: LD_INT 30
14969: PUSH
14970: LD_INT 31
14972: PUSH
14973: LD_INT 32
14975: PUSH
14976: LD_INT 33
14978: PUSH
14979: LD_INT 34
14981: PUSH
14982: LD_INT 36
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: PUSH
15022: LD_INT 101
15024: PUSH
15025: LD_INT 102
15027: PUSH
15028: LD_INT 103
15030: PUSH
15031: LD_INT 104
15033: PUSH
15034: LD_INT 105
15036: PUSH
15037: LD_INT 106
15039: PUSH
15040: LD_INT 107
15042: PUSH
15043: LD_INT 108
15045: PUSH
15046: LD_INT 109
15048: PUSH
15049: LD_INT 110
15051: PUSH
15052: LD_INT 111
15054: PUSH
15055: LD_INT 112
15057: PUSH
15058: LD_INT 113
15060: PUSH
15061: LD_INT 114
15063: PUSH
15064: LD_INT 116
15066: PUSH
15067: LD_INT 117
15069: PUSH
15070: LD_INT 118
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: ST_TO_ADDR
15096: GO 15871
15098: LD_INT 16
15100: DOUBLE
15101: EQUAL
15102: IFTRUE 15106
15104: GO 15242
15106: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15107: LD_ADDR_VAR 0 2
15111: PUSH
15112: LD_INT 2
15114: PUSH
15115: LD_INT 4
15117: PUSH
15118: LD_INT 5
15120: PUSH
15121: LD_INT 7
15123: PUSH
15124: LD_INT 11
15126: PUSH
15127: LD_INT 12
15129: PUSH
15130: LD_INT 15
15132: PUSH
15133: LD_INT 16
15135: PUSH
15136: LD_INT 20
15138: PUSH
15139: LD_INT 21
15141: PUSH
15142: LD_INT 22
15144: PUSH
15145: LD_INT 23
15147: PUSH
15148: LD_INT 25
15150: PUSH
15151: LD_INT 26
15153: PUSH
15154: LD_INT 30
15156: PUSH
15157: LD_INT 31
15159: PUSH
15160: LD_INT 32
15162: PUSH
15163: LD_INT 33
15165: PUSH
15166: LD_INT 34
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: PUSH
15190: LD_INT 101
15192: PUSH
15193: LD_INT 102
15195: PUSH
15196: LD_INT 103
15198: PUSH
15199: LD_INT 106
15201: PUSH
15202: LD_INT 108
15204: PUSH
15205: LD_INT 112
15207: PUSH
15208: LD_INT 113
15210: PUSH
15211: LD_INT 114
15213: PUSH
15214: LD_INT 116
15216: PUSH
15217: LD_INT 117
15219: PUSH
15220: LD_INT 118
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: ST_TO_ADDR
15240: GO 15871
15242: LD_INT 17
15244: DOUBLE
15245: EQUAL
15246: IFTRUE 15250
15248: GO 15474
15250: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15251: LD_ADDR_VAR 0 2
15255: PUSH
15256: LD_INT 1
15258: PUSH
15259: LD_INT 2
15261: PUSH
15262: LD_INT 3
15264: PUSH
15265: LD_INT 4
15267: PUSH
15268: LD_INT 5
15270: PUSH
15271: LD_INT 6
15273: PUSH
15274: LD_INT 7
15276: PUSH
15277: LD_INT 8
15279: PUSH
15280: LD_INT 9
15282: PUSH
15283: LD_INT 10
15285: PUSH
15286: LD_INT 11
15288: PUSH
15289: LD_INT 12
15291: PUSH
15292: LD_INT 13
15294: PUSH
15295: LD_INT 14
15297: PUSH
15298: LD_INT 15
15300: PUSH
15301: LD_INT 16
15303: PUSH
15304: LD_INT 17
15306: PUSH
15307: LD_INT 18
15309: PUSH
15310: LD_INT 19
15312: PUSH
15313: LD_INT 20
15315: PUSH
15316: LD_INT 21
15318: PUSH
15319: LD_INT 22
15321: PUSH
15322: LD_INT 23
15324: PUSH
15325: LD_INT 24
15327: PUSH
15328: LD_INT 25
15330: PUSH
15331: LD_INT 26
15333: PUSH
15334: LD_INT 27
15336: PUSH
15337: LD_INT 28
15339: PUSH
15340: LD_INT 29
15342: PUSH
15343: LD_INT 30
15345: PUSH
15346: LD_INT 31
15348: PUSH
15349: LD_INT 32
15351: PUSH
15352: LD_INT 33
15354: PUSH
15355: LD_INT 34
15357: PUSH
15358: LD_INT 36
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: PUSH
15398: LD_INT 101
15400: PUSH
15401: LD_INT 102
15403: PUSH
15404: LD_INT 103
15406: PUSH
15407: LD_INT 104
15409: PUSH
15410: LD_INT 105
15412: PUSH
15413: LD_INT 106
15415: PUSH
15416: LD_INT 107
15418: PUSH
15419: LD_INT 108
15421: PUSH
15422: LD_INT 109
15424: PUSH
15425: LD_INT 110
15427: PUSH
15428: LD_INT 111
15430: PUSH
15431: LD_INT 112
15433: PUSH
15434: LD_INT 113
15436: PUSH
15437: LD_INT 114
15439: PUSH
15440: LD_INT 116
15442: PUSH
15443: LD_INT 117
15445: PUSH
15446: LD_INT 118
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: ST_TO_ADDR
15472: GO 15871
15474: LD_INT 18
15476: DOUBLE
15477: EQUAL
15478: IFTRUE 15482
15480: GO 15630
15482: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15483: LD_ADDR_VAR 0 2
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: LD_INT 4
15493: PUSH
15494: LD_INT 5
15496: PUSH
15497: LD_INT 7
15499: PUSH
15500: LD_INT 11
15502: PUSH
15503: LD_INT 12
15505: PUSH
15506: LD_INT 15
15508: PUSH
15509: LD_INT 16
15511: PUSH
15512: LD_INT 20
15514: PUSH
15515: LD_INT 21
15517: PUSH
15518: LD_INT 22
15520: PUSH
15521: LD_INT 23
15523: PUSH
15524: LD_INT 25
15526: PUSH
15527: LD_INT 26
15529: PUSH
15530: LD_INT 30
15532: PUSH
15533: LD_INT 31
15535: PUSH
15536: LD_INT 32
15538: PUSH
15539: LD_INT 33
15541: PUSH
15542: LD_INT 34
15544: PUSH
15545: LD_INT 35
15547: PUSH
15548: LD_INT 36
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: PUSH
15574: LD_INT 101
15576: PUSH
15577: LD_INT 102
15579: PUSH
15580: LD_INT 103
15582: PUSH
15583: LD_INT 106
15585: PUSH
15586: LD_INT 108
15588: PUSH
15589: LD_INT 112
15591: PUSH
15592: LD_INT 113
15594: PUSH
15595: LD_INT 114
15597: PUSH
15598: LD_INT 115
15600: PUSH
15601: LD_INT 116
15603: PUSH
15604: LD_INT 117
15606: PUSH
15607: LD_INT 118
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: ST_TO_ADDR
15628: GO 15871
15630: LD_INT 19
15632: DOUBLE
15633: EQUAL
15634: IFTRUE 15638
15636: GO 15870
15638: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15639: LD_ADDR_VAR 0 2
15643: PUSH
15644: LD_INT 1
15646: PUSH
15647: LD_INT 2
15649: PUSH
15650: LD_INT 3
15652: PUSH
15653: LD_INT 4
15655: PUSH
15656: LD_INT 5
15658: PUSH
15659: LD_INT 6
15661: PUSH
15662: LD_INT 7
15664: PUSH
15665: LD_INT 8
15667: PUSH
15668: LD_INT 9
15670: PUSH
15671: LD_INT 10
15673: PUSH
15674: LD_INT 11
15676: PUSH
15677: LD_INT 12
15679: PUSH
15680: LD_INT 13
15682: PUSH
15683: LD_INT 14
15685: PUSH
15686: LD_INT 15
15688: PUSH
15689: LD_INT 16
15691: PUSH
15692: LD_INT 17
15694: PUSH
15695: LD_INT 18
15697: PUSH
15698: LD_INT 19
15700: PUSH
15701: LD_INT 20
15703: PUSH
15704: LD_INT 21
15706: PUSH
15707: LD_INT 22
15709: PUSH
15710: LD_INT 23
15712: PUSH
15713: LD_INT 24
15715: PUSH
15716: LD_INT 25
15718: PUSH
15719: LD_INT 26
15721: PUSH
15722: LD_INT 27
15724: PUSH
15725: LD_INT 28
15727: PUSH
15728: LD_INT 29
15730: PUSH
15731: LD_INT 30
15733: PUSH
15734: LD_INT 31
15736: PUSH
15737: LD_INT 32
15739: PUSH
15740: LD_INT 33
15742: PUSH
15743: LD_INT 34
15745: PUSH
15746: LD_INT 35
15748: PUSH
15749: LD_INT 36
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: PUSH
15790: LD_INT 101
15792: PUSH
15793: LD_INT 102
15795: PUSH
15796: LD_INT 103
15798: PUSH
15799: LD_INT 104
15801: PUSH
15802: LD_INT 105
15804: PUSH
15805: LD_INT 106
15807: PUSH
15808: LD_INT 107
15810: PUSH
15811: LD_INT 108
15813: PUSH
15814: LD_INT 109
15816: PUSH
15817: LD_INT 110
15819: PUSH
15820: LD_INT 111
15822: PUSH
15823: LD_INT 112
15825: PUSH
15826: LD_INT 113
15828: PUSH
15829: LD_INT 114
15831: PUSH
15832: LD_INT 115
15834: PUSH
15835: LD_INT 116
15837: PUSH
15838: LD_INT 117
15840: PUSH
15841: LD_INT 118
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: ST_TO_ADDR
15868: GO 15871
15870: POP
// end else
15871: GO 16102
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15873: LD_ADDR_VAR 0 2
15877: PUSH
15878: LD_INT 1
15880: PUSH
15881: LD_INT 2
15883: PUSH
15884: LD_INT 3
15886: PUSH
15887: LD_INT 4
15889: PUSH
15890: LD_INT 5
15892: PUSH
15893: LD_INT 6
15895: PUSH
15896: LD_INT 7
15898: PUSH
15899: LD_INT 8
15901: PUSH
15902: LD_INT 9
15904: PUSH
15905: LD_INT 10
15907: PUSH
15908: LD_INT 11
15910: PUSH
15911: LD_INT 12
15913: PUSH
15914: LD_INT 13
15916: PUSH
15917: LD_INT 14
15919: PUSH
15920: LD_INT 15
15922: PUSH
15923: LD_INT 16
15925: PUSH
15926: LD_INT 17
15928: PUSH
15929: LD_INT 18
15931: PUSH
15932: LD_INT 19
15934: PUSH
15935: LD_INT 20
15937: PUSH
15938: LD_INT 21
15940: PUSH
15941: LD_INT 22
15943: PUSH
15944: LD_INT 23
15946: PUSH
15947: LD_INT 24
15949: PUSH
15950: LD_INT 25
15952: PUSH
15953: LD_INT 26
15955: PUSH
15956: LD_INT 27
15958: PUSH
15959: LD_INT 28
15961: PUSH
15962: LD_INT 29
15964: PUSH
15965: LD_INT 30
15967: PUSH
15968: LD_INT 31
15970: PUSH
15971: LD_INT 32
15973: PUSH
15974: LD_INT 33
15976: PUSH
15977: LD_INT 34
15979: PUSH
15980: LD_INT 35
15982: PUSH
15983: LD_INT 36
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 101
16026: PUSH
16027: LD_INT 102
16029: PUSH
16030: LD_INT 103
16032: PUSH
16033: LD_INT 104
16035: PUSH
16036: LD_INT 105
16038: PUSH
16039: LD_INT 106
16041: PUSH
16042: LD_INT 107
16044: PUSH
16045: LD_INT 108
16047: PUSH
16048: LD_INT 109
16050: PUSH
16051: LD_INT 110
16053: PUSH
16054: LD_INT 111
16056: PUSH
16057: LD_INT 112
16059: PUSH
16060: LD_INT 113
16062: PUSH
16063: LD_INT 114
16065: PUSH
16066: LD_INT 115
16068: PUSH
16069: LD_INT 116
16071: PUSH
16072: LD_INT 117
16074: PUSH
16075: LD_INT 118
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: ST_TO_ADDR
// if result then
16102: LD_VAR 0 2
16106: IFFALSE 16892
// begin normal :=  ;
16108: LD_ADDR_VAR 0 5
16112: PUSH
16113: LD_STRING 
16115: ST_TO_ADDR
// hardcore :=  ;
16116: LD_ADDR_VAR 0 6
16120: PUSH
16121: LD_STRING 
16123: ST_TO_ADDR
// active :=  ;
16124: LD_ADDR_VAR 0 7
16128: PUSH
16129: LD_STRING 
16131: ST_TO_ADDR
// for i = 1 to normalCounter do
16132: LD_ADDR_VAR 0 8
16136: PUSH
16137: DOUBLE
16138: LD_INT 1
16140: DEC
16141: ST_TO_ADDR
16142: LD_EXP 66
16146: PUSH
16147: FOR_TO
16148: IFFALSE 16249
// begin tmp := 0 ;
16150: LD_ADDR_VAR 0 3
16154: PUSH
16155: LD_STRING 0
16157: ST_TO_ADDR
// if result [ 1 ] then
16158: LD_VAR 0 2
16162: PUSH
16163: LD_INT 1
16165: ARRAY
16166: IFFALSE 16231
// if result [ 1 ] [ 1 ] = i then
16168: LD_VAR 0 2
16172: PUSH
16173: LD_INT 1
16175: ARRAY
16176: PUSH
16177: LD_INT 1
16179: ARRAY
16180: PUSH
16181: LD_VAR 0 8
16185: EQUAL
16186: IFFALSE 16231
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16188: LD_ADDR_VAR 0 2
16192: PUSH
16193: LD_VAR 0 2
16197: PPUSH
16198: LD_INT 1
16200: PPUSH
16201: LD_VAR 0 2
16205: PUSH
16206: LD_INT 1
16208: ARRAY
16209: PPUSH
16210: LD_INT 1
16212: PPUSH
16213: CALL_OW 3
16217: PPUSH
16218: CALL_OW 1
16222: ST_TO_ADDR
// tmp := 1 ;
16223: LD_ADDR_VAR 0 3
16227: PUSH
16228: LD_STRING 1
16230: ST_TO_ADDR
// end ; normal := normal & tmp ;
16231: LD_ADDR_VAR 0 5
16235: PUSH
16236: LD_VAR 0 5
16240: PUSH
16241: LD_VAR 0 3
16245: STR
16246: ST_TO_ADDR
// end ;
16247: GO 16147
16249: POP
16250: POP
// for i = 1 to hardcoreCounter do
16251: LD_ADDR_VAR 0 8
16255: PUSH
16256: DOUBLE
16257: LD_INT 1
16259: DEC
16260: ST_TO_ADDR
16261: LD_EXP 67
16265: PUSH
16266: FOR_TO
16267: IFFALSE 16372
// begin tmp := 0 ;
16269: LD_ADDR_VAR 0 3
16273: PUSH
16274: LD_STRING 0
16276: ST_TO_ADDR
// if result [ 2 ] then
16277: LD_VAR 0 2
16281: PUSH
16282: LD_INT 2
16284: ARRAY
16285: IFFALSE 16354
// if result [ 2 ] [ 1 ] = 100 + i then
16287: LD_VAR 0 2
16291: PUSH
16292: LD_INT 2
16294: ARRAY
16295: PUSH
16296: LD_INT 1
16298: ARRAY
16299: PUSH
16300: LD_INT 100
16302: PUSH
16303: LD_VAR 0 8
16307: PLUS
16308: EQUAL
16309: IFFALSE 16354
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16311: LD_ADDR_VAR 0 2
16315: PUSH
16316: LD_VAR 0 2
16320: PPUSH
16321: LD_INT 2
16323: PPUSH
16324: LD_VAR 0 2
16328: PUSH
16329: LD_INT 2
16331: ARRAY
16332: PPUSH
16333: LD_INT 1
16335: PPUSH
16336: CALL_OW 3
16340: PPUSH
16341: CALL_OW 1
16345: ST_TO_ADDR
// tmp := 1 ;
16346: LD_ADDR_VAR 0 3
16350: PUSH
16351: LD_STRING 1
16353: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16354: LD_ADDR_VAR 0 6
16358: PUSH
16359: LD_VAR 0 6
16363: PUSH
16364: LD_VAR 0 3
16368: STR
16369: ST_TO_ADDR
// end ;
16370: GO 16266
16372: POP
16373: POP
// if isGameLoad then
16374: LD_VAR 0 1
16378: IFFALSE 16853
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16380: LD_ADDR_VAR 0 4
16384: PUSH
16385: LD_EXP 70
16389: PUSH
16390: LD_EXP 69
16394: PUSH
16395: LD_EXP 71
16399: PUSH
16400: LD_EXP 68
16404: PUSH
16405: LD_EXP 72
16409: PUSH
16410: LD_EXP 73
16414: PUSH
16415: LD_EXP 74
16419: PUSH
16420: LD_EXP 75
16424: PUSH
16425: LD_EXP 76
16429: PUSH
16430: LD_EXP 77
16434: PUSH
16435: LD_EXP 78
16439: PUSH
16440: LD_EXP 79
16444: PUSH
16445: LD_EXP 80
16449: PUSH
16450: LD_EXP 81
16454: PUSH
16455: LD_EXP 89
16459: PUSH
16460: LD_EXP 90
16464: PUSH
16465: LD_EXP 91
16469: PUSH
16470: LD_EXP 92
16474: PUSH
16475: LD_EXP 94
16479: PUSH
16480: LD_EXP 95
16484: PUSH
16485: LD_EXP 96
16489: PUSH
16490: LD_EXP 99
16494: PUSH
16495: LD_EXP 101
16499: PUSH
16500: LD_EXP 102
16504: PUSH
16505: LD_EXP 103
16509: PUSH
16510: LD_EXP 105
16514: PUSH
16515: LD_EXP 106
16519: PUSH
16520: LD_EXP 109
16524: PUSH
16525: LD_EXP 110
16529: PUSH
16530: LD_EXP 111
16534: PUSH
16535: LD_EXP 112
16539: PUSH
16540: LD_EXP 113
16544: PUSH
16545: LD_EXP 114
16549: PUSH
16550: LD_EXP 115
16554: PUSH
16555: LD_EXP 116
16559: PUSH
16560: LD_EXP 117
16564: PUSH
16565: LD_EXP 82
16569: PUSH
16570: LD_EXP 83
16574: PUSH
16575: LD_EXP 86
16579: PUSH
16580: LD_EXP 87
16584: PUSH
16585: LD_EXP 88
16589: PUSH
16590: LD_EXP 84
16594: PUSH
16595: LD_EXP 85
16599: PUSH
16600: LD_EXP 93
16604: PUSH
16605: LD_EXP 97
16609: PUSH
16610: LD_EXP 98
16614: PUSH
16615: LD_EXP 100
16619: PUSH
16620: LD_EXP 104
16624: PUSH
16625: LD_EXP 107
16629: PUSH
16630: LD_EXP 108
16634: PUSH
16635: LD_EXP 118
16639: PUSH
16640: LD_EXP 119
16644: PUSH
16645: LD_EXP 120
16649: PUSH
16650: LD_EXP 121
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: ST_TO_ADDR
// tmp :=  ;
16711: LD_ADDR_VAR 0 3
16715: PUSH
16716: LD_STRING 
16718: ST_TO_ADDR
// for i = 1 to normalCounter do
16719: LD_ADDR_VAR 0 8
16723: PUSH
16724: DOUBLE
16725: LD_INT 1
16727: DEC
16728: ST_TO_ADDR
16729: LD_EXP 66
16733: PUSH
16734: FOR_TO
16735: IFFALSE 16771
// begin if flags [ i ] then
16737: LD_VAR 0 4
16741: PUSH
16742: LD_VAR 0 8
16746: ARRAY
16747: IFFALSE 16769
// tmp := tmp & i & ; ;
16749: LD_ADDR_VAR 0 3
16753: PUSH
16754: LD_VAR 0 3
16758: PUSH
16759: LD_VAR 0 8
16763: STR
16764: PUSH
16765: LD_STRING ;
16767: STR
16768: ST_TO_ADDR
// end ;
16769: GO 16734
16771: POP
16772: POP
// for i = 1 to hardcoreCounter do
16773: LD_ADDR_VAR 0 8
16777: PUSH
16778: DOUBLE
16779: LD_INT 1
16781: DEC
16782: ST_TO_ADDR
16783: LD_EXP 67
16787: PUSH
16788: FOR_TO
16789: IFFALSE 16835
// begin if flags [ normalCounter + i ] then
16791: LD_VAR 0 4
16795: PUSH
16796: LD_EXP 66
16800: PUSH
16801: LD_VAR 0 8
16805: PLUS
16806: ARRAY
16807: IFFALSE 16833
// tmp := tmp & ( 100 + i ) & ; ;
16809: LD_ADDR_VAR 0 3
16813: PUSH
16814: LD_VAR 0 3
16818: PUSH
16819: LD_INT 100
16821: PUSH
16822: LD_VAR 0 8
16826: PLUS
16827: STR
16828: PUSH
16829: LD_STRING ;
16831: STR
16832: ST_TO_ADDR
// end ;
16833: GO 16788
16835: POP
16836: POP
// if tmp then
16837: LD_VAR 0 3
16841: IFFALSE 16853
// active := tmp ;
16843: LD_ADDR_VAR 0 7
16847: PUSH
16848: LD_VAR 0 3
16852: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16853: LD_STRING getStreamItemsFromMission("
16855: PUSH
16856: LD_VAR 0 5
16860: STR
16861: PUSH
16862: LD_STRING ","
16864: STR
16865: PUSH
16866: LD_VAR 0 6
16870: STR
16871: PUSH
16872: LD_STRING ","
16874: STR
16875: PUSH
16876: LD_VAR 0 7
16880: STR
16881: PUSH
16882: LD_STRING ")
16884: STR
16885: PPUSH
16886: CALL_OW 559
// end else
16890: GO 16899
// ToLua ( getStreamItemsFromMission("","","") ) ;
16892: LD_STRING getStreamItemsFromMission("","","")
16894: PPUSH
16895: CALL_OW 559
// end ;
16899: LD_VAR 0 2
16903: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16904: LD_EXP 65
16908: PUSH
16909: LD_EXP 70
16913: AND
16914: IFFALSE 17038
16916: GO 16918
16918: DISABLE
16919: LD_INT 0
16921: PPUSH
16922: PPUSH
// begin enable ;
16923: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16924: LD_ADDR_VAR 0 2
16928: PUSH
16929: LD_INT 22
16931: PUSH
16932: LD_OWVAR 2
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 2
16943: PUSH
16944: LD_INT 34
16946: PUSH
16947: LD_INT 7
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 34
16956: PUSH
16957: LD_INT 45
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: LD_INT 34
16966: PUSH
16967: LD_INT 28
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 34
16976: PUSH
16977: LD_INT 47
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: PPUSH
16995: CALL_OW 69
16999: ST_TO_ADDR
// if not tmp then
17000: LD_VAR 0 2
17004: NOT
17005: IFFALSE 17009
// exit ;
17007: GO 17038
// for i in tmp do
17009: LD_ADDR_VAR 0 1
17013: PUSH
17014: LD_VAR 0 2
17018: PUSH
17019: FOR_IN
17020: IFFALSE 17036
// begin SetLives ( i , 0 ) ;
17022: LD_VAR 0 1
17026: PPUSH
17027: LD_INT 0
17029: PPUSH
17030: CALL_OW 234
// end ;
17034: GO 17019
17036: POP
17037: POP
// end ;
17038: PPOPN 2
17040: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17041: LD_EXP 65
17045: PUSH
17046: LD_EXP 71
17050: AND
17051: IFFALSE 17135
17053: GO 17055
17055: DISABLE
17056: LD_INT 0
17058: PPUSH
17059: PPUSH
// begin enable ;
17060: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17061: LD_ADDR_VAR 0 2
17065: PUSH
17066: LD_INT 22
17068: PUSH
17069: LD_OWVAR 2
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 32
17080: PUSH
17081: LD_INT 3
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PPUSH
17092: CALL_OW 69
17096: ST_TO_ADDR
// if not tmp then
17097: LD_VAR 0 2
17101: NOT
17102: IFFALSE 17106
// exit ;
17104: GO 17135
// for i in tmp do
17106: LD_ADDR_VAR 0 1
17110: PUSH
17111: LD_VAR 0 2
17115: PUSH
17116: FOR_IN
17117: IFFALSE 17133
// begin SetLives ( i , 0 ) ;
17119: LD_VAR 0 1
17123: PPUSH
17124: LD_INT 0
17126: PPUSH
17127: CALL_OW 234
// end ;
17131: GO 17116
17133: POP
17134: POP
// end ;
17135: PPOPN 2
17137: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17138: LD_EXP 65
17142: PUSH
17143: LD_EXP 68
17147: AND
17148: IFFALSE 17241
17150: GO 17152
17152: DISABLE
17153: LD_INT 0
17155: PPUSH
// begin enable ;
17156: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17157: LD_ADDR_VAR 0 1
17161: PUSH
17162: LD_INT 22
17164: PUSH
17165: LD_OWVAR 2
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 2
17176: PUSH
17177: LD_INT 25
17179: PUSH
17180: LD_INT 5
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 25
17189: PUSH
17190: LD_INT 9
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: LD_INT 25
17199: PUSH
17200: LD_INT 8
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PPUSH
17217: CALL_OW 69
17221: PUSH
17222: FOR_IN
17223: IFFALSE 17239
// begin SetClass ( i , 1 ) ;
17225: LD_VAR 0 1
17229: PPUSH
17230: LD_INT 1
17232: PPUSH
17233: CALL_OW 336
// end ;
17237: GO 17222
17239: POP
17240: POP
// end ;
17241: PPOPN 1
17243: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17244: LD_EXP 65
17248: PUSH
17249: LD_EXP 69
17253: AND
17254: PUSH
17255: LD_OWVAR 65
17259: PUSH
17260: LD_INT 7
17262: LESS
17263: AND
17264: IFFALSE 17278
17266: GO 17268
17268: DISABLE
// begin enable ;
17269: ENABLE
// game_speed := 7 ;
17270: LD_ADDR_OWVAR 65
17274: PUSH
17275: LD_INT 7
17277: ST_TO_ADDR
// end ;
17278: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17279: LD_EXP 65
17283: PUSH
17284: LD_EXP 72
17288: AND
17289: IFFALSE 17491
17291: GO 17293
17293: DISABLE
17294: LD_INT 0
17296: PPUSH
17297: PPUSH
17298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17299: LD_ADDR_VAR 0 3
17303: PUSH
17304: LD_INT 81
17306: PUSH
17307: LD_OWVAR 2
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: PUSH
17316: LD_INT 21
17318: PUSH
17319: LD_INT 1
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PPUSH
17330: CALL_OW 69
17334: ST_TO_ADDR
// if not tmp then
17335: LD_VAR 0 3
17339: NOT
17340: IFFALSE 17344
// exit ;
17342: GO 17491
// if tmp > 5 then
17344: LD_VAR 0 3
17348: PUSH
17349: LD_INT 5
17351: GREATER
17352: IFFALSE 17364
// k := 5 else
17354: LD_ADDR_VAR 0 2
17358: PUSH
17359: LD_INT 5
17361: ST_TO_ADDR
17362: GO 17374
// k := tmp ;
17364: LD_ADDR_VAR 0 2
17368: PUSH
17369: LD_VAR 0 3
17373: ST_TO_ADDR
// for i := 1 to k do
17374: LD_ADDR_VAR 0 1
17378: PUSH
17379: DOUBLE
17380: LD_INT 1
17382: DEC
17383: ST_TO_ADDR
17384: LD_VAR 0 2
17388: PUSH
17389: FOR_TO
17390: IFFALSE 17489
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17392: LD_VAR 0 3
17396: PUSH
17397: LD_VAR 0 1
17401: ARRAY
17402: PPUSH
17403: LD_VAR 0 1
17407: PUSH
17408: LD_INT 4
17410: MOD
17411: PUSH
17412: LD_INT 1
17414: PLUS
17415: PPUSH
17416: CALL_OW 259
17420: PUSH
17421: LD_INT 10
17423: LESS
17424: IFFALSE 17487
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17426: LD_VAR 0 3
17430: PUSH
17431: LD_VAR 0 1
17435: ARRAY
17436: PPUSH
17437: LD_VAR 0 1
17441: PUSH
17442: LD_INT 4
17444: MOD
17445: PUSH
17446: LD_INT 1
17448: PLUS
17449: PPUSH
17450: LD_VAR 0 3
17454: PUSH
17455: LD_VAR 0 1
17459: ARRAY
17460: PPUSH
17461: LD_VAR 0 1
17465: PUSH
17466: LD_INT 4
17468: MOD
17469: PUSH
17470: LD_INT 1
17472: PLUS
17473: PPUSH
17474: CALL_OW 259
17478: PUSH
17479: LD_INT 1
17481: PLUS
17482: PPUSH
17483: CALL_OW 237
17487: GO 17389
17489: POP
17490: POP
// end ;
17491: PPOPN 3
17493: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17494: LD_EXP 65
17498: PUSH
17499: LD_EXP 73
17503: AND
17504: IFFALSE 17524
17506: GO 17508
17508: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17509: LD_INT 4
17511: PPUSH
17512: LD_OWVAR 2
17516: PPUSH
17517: LD_INT 0
17519: PPUSH
17520: CALL_OW 324
17524: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17525: LD_EXP 65
17529: PUSH
17530: LD_EXP 102
17534: AND
17535: IFFALSE 17555
17537: GO 17539
17539: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17540: LD_INT 19
17542: PPUSH
17543: LD_OWVAR 2
17547: PPUSH
17548: LD_INT 0
17550: PPUSH
17551: CALL_OW 324
17555: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17556: LD_EXP 65
17560: PUSH
17561: LD_EXP 74
17565: AND
17566: IFFALSE 17668
17568: GO 17570
17570: DISABLE
17571: LD_INT 0
17573: PPUSH
17574: PPUSH
// begin enable ;
17575: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17576: LD_ADDR_VAR 0 2
17580: PUSH
17581: LD_INT 22
17583: PUSH
17584: LD_OWVAR 2
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PUSH
17593: LD_INT 2
17595: PUSH
17596: LD_INT 34
17598: PUSH
17599: LD_INT 11
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: PUSH
17606: LD_INT 34
17608: PUSH
17609: LD_INT 30
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: LIST
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PPUSH
17625: CALL_OW 69
17629: ST_TO_ADDR
// if not tmp then
17630: LD_VAR 0 2
17634: NOT
17635: IFFALSE 17639
// exit ;
17637: GO 17668
// for i in tmp do
17639: LD_ADDR_VAR 0 1
17643: PUSH
17644: LD_VAR 0 2
17648: PUSH
17649: FOR_IN
17650: IFFALSE 17666
// begin SetLives ( i , 0 ) ;
17652: LD_VAR 0 1
17656: PPUSH
17657: LD_INT 0
17659: PPUSH
17660: CALL_OW 234
// end ;
17664: GO 17649
17666: POP
17667: POP
// end ;
17668: PPOPN 2
17670: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17671: LD_EXP 65
17675: PUSH
17676: LD_EXP 75
17680: AND
17681: IFFALSE 17701
17683: GO 17685
17685: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17686: LD_INT 32
17688: PPUSH
17689: LD_OWVAR 2
17693: PPUSH
17694: LD_INT 0
17696: PPUSH
17697: CALL_OW 324
17701: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17702: LD_EXP 65
17706: PUSH
17707: LD_EXP 76
17711: AND
17712: IFFALSE 17893
17714: GO 17716
17716: DISABLE
17717: LD_INT 0
17719: PPUSH
17720: PPUSH
17721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17722: LD_ADDR_VAR 0 2
17726: PUSH
17727: LD_INT 22
17729: PUSH
17730: LD_OWVAR 2
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 33
17741: PUSH
17742: LD_INT 3
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PPUSH
17753: CALL_OW 69
17757: ST_TO_ADDR
// if not tmp then
17758: LD_VAR 0 2
17762: NOT
17763: IFFALSE 17767
// exit ;
17765: GO 17893
// side := 0 ;
17767: LD_ADDR_VAR 0 3
17771: PUSH
17772: LD_INT 0
17774: ST_TO_ADDR
// for i := 1 to 8 do
17775: LD_ADDR_VAR 0 1
17779: PUSH
17780: DOUBLE
17781: LD_INT 1
17783: DEC
17784: ST_TO_ADDR
17785: LD_INT 8
17787: PUSH
17788: FOR_TO
17789: IFFALSE 17837
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17791: LD_OWVAR 2
17795: PUSH
17796: LD_VAR 0 1
17800: NONEQUAL
17801: PUSH
17802: LD_OWVAR 2
17806: PPUSH
17807: LD_VAR 0 1
17811: PPUSH
17812: CALL_OW 81
17816: PUSH
17817: LD_INT 2
17819: EQUAL
17820: AND
17821: IFFALSE 17835
// begin side := i ;
17823: LD_ADDR_VAR 0 3
17827: PUSH
17828: LD_VAR 0 1
17832: ST_TO_ADDR
// break ;
17833: GO 17837
// end ;
17835: GO 17788
17837: POP
17838: POP
// if not side then
17839: LD_VAR 0 3
17843: NOT
17844: IFFALSE 17848
// exit ;
17846: GO 17893
// for i := 1 to tmp do
17848: LD_ADDR_VAR 0 1
17852: PUSH
17853: DOUBLE
17854: LD_INT 1
17856: DEC
17857: ST_TO_ADDR
17858: LD_VAR 0 2
17862: PUSH
17863: FOR_TO
17864: IFFALSE 17891
// if Prob ( 60 ) then
17866: LD_INT 60
17868: PPUSH
17869: CALL_OW 13
17873: IFFALSE 17889
// SetSide ( i , side ) ;
17875: LD_VAR 0 1
17879: PPUSH
17880: LD_VAR 0 3
17884: PPUSH
17885: CALL_OW 235
17889: GO 17863
17891: POP
17892: POP
// end ;
17893: PPOPN 3
17895: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17896: LD_EXP 65
17900: PUSH
17901: LD_EXP 78
17905: AND
17906: IFFALSE 18025
17908: GO 17910
17910: DISABLE
17911: LD_INT 0
17913: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17914: LD_ADDR_VAR 0 1
17918: PUSH
17919: LD_INT 22
17921: PUSH
17922: LD_OWVAR 2
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 21
17933: PUSH
17934: LD_INT 1
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: LD_INT 3
17943: PUSH
17944: LD_INT 23
17946: PUSH
17947: LD_INT 0
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: LIST
17962: PPUSH
17963: CALL_OW 69
17967: PUSH
17968: FOR_IN
17969: IFFALSE 18023
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17971: LD_VAR 0 1
17975: PPUSH
17976: CALL_OW 257
17980: PUSH
17981: LD_INT 1
17983: PUSH
17984: LD_INT 2
17986: PUSH
17987: LD_INT 3
17989: PUSH
17990: LD_INT 4
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: IN
17999: IFFALSE 18021
// SetClass ( un , rand ( 1 , 4 ) ) ;
18001: LD_VAR 0 1
18005: PPUSH
18006: LD_INT 1
18008: PPUSH
18009: LD_INT 4
18011: PPUSH
18012: CALL_OW 12
18016: PPUSH
18017: CALL_OW 336
18021: GO 17968
18023: POP
18024: POP
// end ;
18025: PPOPN 1
18027: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18028: LD_EXP 65
18032: PUSH
18033: LD_EXP 77
18037: AND
18038: IFFALSE 18117
18040: GO 18042
18042: DISABLE
18043: LD_INT 0
18045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18046: LD_ADDR_VAR 0 1
18050: PUSH
18051: LD_INT 22
18053: PUSH
18054: LD_OWVAR 2
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 21
18065: PUSH
18066: LD_INT 3
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PPUSH
18077: CALL_OW 69
18081: ST_TO_ADDR
// if not tmp then
18082: LD_VAR 0 1
18086: NOT
18087: IFFALSE 18091
// exit ;
18089: GO 18117
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18091: LD_VAR 0 1
18095: PUSH
18096: LD_INT 1
18098: PPUSH
18099: LD_VAR 0 1
18103: PPUSH
18104: CALL_OW 12
18108: ARRAY
18109: PPUSH
18110: LD_INT 100
18112: PPUSH
18113: CALL_OW 234
// end ;
18117: PPOPN 1
18119: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18120: LD_EXP 65
18124: PUSH
18125: LD_EXP 79
18129: AND
18130: IFFALSE 18228
18132: GO 18134
18134: DISABLE
18135: LD_INT 0
18137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18138: LD_ADDR_VAR 0 1
18142: PUSH
18143: LD_INT 22
18145: PUSH
18146: LD_OWVAR 2
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 21
18157: PUSH
18158: LD_INT 1
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PPUSH
18169: CALL_OW 69
18173: ST_TO_ADDR
// if not tmp then
18174: LD_VAR 0 1
18178: NOT
18179: IFFALSE 18183
// exit ;
18181: GO 18228
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18183: LD_VAR 0 1
18187: PUSH
18188: LD_INT 1
18190: PPUSH
18191: LD_VAR 0 1
18195: PPUSH
18196: CALL_OW 12
18200: ARRAY
18201: PPUSH
18202: LD_INT 1
18204: PPUSH
18205: LD_INT 4
18207: PPUSH
18208: CALL_OW 12
18212: PPUSH
18213: LD_INT 3000
18215: PPUSH
18216: LD_INT 9000
18218: PPUSH
18219: CALL_OW 12
18223: PPUSH
18224: CALL_OW 492
// end ;
18228: PPOPN 1
18230: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18231: LD_EXP 65
18235: PUSH
18236: LD_EXP 80
18240: AND
18241: IFFALSE 18261
18243: GO 18245
18245: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18246: LD_INT 1
18248: PPUSH
18249: LD_OWVAR 2
18253: PPUSH
18254: LD_INT 0
18256: PPUSH
18257: CALL_OW 324
18261: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18262: LD_EXP 65
18266: PUSH
18267: LD_EXP 81
18271: AND
18272: IFFALSE 18355
18274: GO 18276
18276: DISABLE
18277: LD_INT 0
18279: PPUSH
18280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18281: LD_ADDR_VAR 0 2
18285: PUSH
18286: LD_INT 22
18288: PUSH
18289: LD_OWVAR 2
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 21
18300: PUSH
18301: LD_INT 3
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PPUSH
18312: CALL_OW 69
18316: ST_TO_ADDR
// if not tmp then
18317: LD_VAR 0 2
18321: NOT
18322: IFFALSE 18326
// exit ;
18324: GO 18355
// for i in tmp do
18326: LD_ADDR_VAR 0 1
18330: PUSH
18331: LD_VAR 0 2
18335: PUSH
18336: FOR_IN
18337: IFFALSE 18353
// SetBLevel ( i , 10 ) ;
18339: LD_VAR 0 1
18343: PPUSH
18344: LD_INT 10
18346: PPUSH
18347: CALL_OW 241
18351: GO 18336
18353: POP
18354: POP
// end ;
18355: PPOPN 2
18357: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18358: LD_EXP 65
18362: PUSH
18363: LD_EXP 82
18367: AND
18368: IFFALSE 18479
18370: GO 18372
18372: DISABLE
18373: LD_INT 0
18375: PPUSH
18376: PPUSH
18377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18378: LD_ADDR_VAR 0 3
18382: PUSH
18383: LD_INT 22
18385: PUSH
18386: LD_OWVAR 2
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 25
18397: PUSH
18398: LD_INT 1
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PPUSH
18409: CALL_OW 69
18413: ST_TO_ADDR
// if not tmp then
18414: LD_VAR 0 3
18418: NOT
18419: IFFALSE 18423
// exit ;
18421: GO 18479
// un := tmp [ rand ( 1 , tmp ) ] ;
18423: LD_ADDR_VAR 0 2
18427: PUSH
18428: LD_VAR 0 3
18432: PUSH
18433: LD_INT 1
18435: PPUSH
18436: LD_VAR 0 3
18440: PPUSH
18441: CALL_OW 12
18445: ARRAY
18446: ST_TO_ADDR
// if Crawls ( un ) then
18447: LD_VAR 0 2
18451: PPUSH
18452: CALL_OW 318
18456: IFFALSE 18467
// ComWalk ( un ) ;
18458: LD_VAR 0 2
18462: PPUSH
18463: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18467: LD_VAR 0 2
18471: PPUSH
18472: LD_INT 5
18474: PPUSH
18475: CALL_OW 336
// end ;
18479: PPOPN 3
18481: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18482: LD_EXP 65
18486: PUSH
18487: LD_EXP 83
18491: AND
18492: PUSH
18493: LD_OWVAR 67
18497: PUSH
18498: LD_INT 4
18500: LESS
18501: AND
18502: IFFALSE 18521
18504: GO 18506
18506: DISABLE
// begin Difficulty := Difficulty + 1 ;
18507: LD_ADDR_OWVAR 67
18511: PUSH
18512: LD_OWVAR 67
18516: PUSH
18517: LD_INT 1
18519: PLUS
18520: ST_TO_ADDR
// end ;
18521: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18522: LD_EXP 65
18526: PUSH
18527: LD_EXP 84
18531: AND
18532: IFFALSE 18635
18534: GO 18536
18536: DISABLE
18537: LD_INT 0
18539: PPUSH
// begin for i := 1 to 5 do
18540: LD_ADDR_VAR 0 1
18544: PUSH
18545: DOUBLE
18546: LD_INT 1
18548: DEC
18549: ST_TO_ADDR
18550: LD_INT 5
18552: PUSH
18553: FOR_TO
18554: IFFALSE 18633
// begin uc_nation := nation_nature ;
18556: LD_ADDR_OWVAR 21
18560: PUSH
18561: LD_INT 0
18563: ST_TO_ADDR
// uc_side := 0 ;
18564: LD_ADDR_OWVAR 20
18568: PUSH
18569: LD_INT 0
18571: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18572: LD_ADDR_OWVAR 29
18576: PUSH
18577: LD_INT 12
18579: PUSH
18580: LD_INT 12
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: ST_TO_ADDR
// hc_agressivity := 20 ;
18587: LD_ADDR_OWVAR 35
18591: PUSH
18592: LD_INT 20
18594: ST_TO_ADDR
// hc_class := class_tiger ;
18595: LD_ADDR_OWVAR 28
18599: PUSH
18600: LD_INT 14
18602: ST_TO_ADDR
// hc_gallery :=  ;
18603: LD_ADDR_OWVAR 33
18607: PUSH
18608: LD_STRING 
18610: ST_TO_ADDR
// hc_name :=  ;
18611: LD_ADDR_OWVAR 26
18615: PUSH
18616: LD_STRING 
18618: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18619: CALL_OW 44
18623: PPUSH
18624: LD_INT 0
18626: PPUSH
18627: CALL_OW 51
// end ;
18631: GO 18553
18633: POP
18634: POP
// end ;
18635: PPOPN 1
18637: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18638: LD_EXP 65
18642: PUSH
18643: LD_EXP 85
18647: AND
18648: IFFALSE 18657
18650: GO 18652
18652: DISABLE
// StreamSibBomb ;
18653: CALL 18658 0 0
18657: END
// export function StreamSibBomb ; var i , x , y ; begin
18658: LD_INT 0
18660: PPUSH
18661: PPUSH
18662: PPUSH
18663: PPUSH
// result := false ;
18664: LD_ADDR_VAR 0 1
18668: PUSH
18669: LD_INT 0
18671: ST_TO_ADDR
// for i := 1 to 16 do
18672: LD_ADDR_VAR 0 2
18676: PUSH
18677: DOUBLE
18678: LD_INT 1
18680: DEC
18681: ST_TO_ADDR
18682: LD_INT 16
18684: PUSH
18685: FOR_TO
18686: IFFALSE 18885
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18688: LD_ADDR_VAR 0 3
18692: PUSH
18693: LD_INT 10
18695: PUSH
18696: LD_INT 20
18698: PUSH
18699: LD_INT 30
18701: PUSH
18702: LD_INT 40
18704: PUSH
18705: LD_INT 50
18707: PUSH
18708: LD_INT 60
18710: PUSH
18711: LD_INT 70
18713: PUSH
18714: LD_INT 80
18716: PUSH
18717: LD_INT 90
18719: PUSH
18720: LD_INT 100
18722: PUSH
18723: LD_INT 110
18725: PUSH
18726: LD_INT 120
18728: PUSH
18729: LD_INT 130
18731: PUSH
18732: LD_INT 140
18734: PUSH
18735: LD_INT 150
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 1
18757: PPUSH
18758: LD_INT 15
18760: PPUSH
18761: CALL_OW 12
18765: ARRAY
18766: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18767: LD_ADDR_VAR 0 4
18771: PUSH
18772: LD_INT 10
18774: PUSH
18775: LD_INT 20
18777: PUSH
18778: LD_INT 30
18780: PUSH
18781: LD_INT 40
18783: PUSH
18784: LD_INT 50
18786: PUSH
18787: LD_INT 60
18789: PUSH
18790: LD_INT 70
18792: PUSH
18793: LD_INT 80
18795: PUSH
18796: LD_INT 90
18798: PUSH
18799: LD_INT 100
18801: PUSH
18802: LD_INT 110
18804: PUSH
18805: LD_INT 120
18807: PUSH
18808: LD_INT 130
18810: PUSH
18811: LD_INT 140
18813: PUSH
18814: LD_INT 150
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 1
18836: PPUSH
18837: LD_INT 15
18839: PPUSH
18840: CALL_OW 12
18844: ARRAY
18845: ST_TO_ADDR
// if ValidHex ( x , y ) then
18846: LD_VAR 0 3
18850: PPUSH
18851: LD_VAR 0 4
18855: PPUSH
18856: CALL_OW 488
18860: IFFALSE 18883
// begin result := [ x , y ] ;
18862: LD_ADDR_VAR 0 1
18866: PUSH
18867: LD_VAR 0 3
18871: PUSH
18872: LD_VAR 0 4
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: ST_TO_ADDR
// break ;
18881: GO 18885
// end ; end ;
18883: GO 18685
18885: POP
18886: POP
// if result then
18887: LD_VAR 0 1
18891: IFFALSE 18951
// begin ToLua ( playSibBomb() ) ;
18893: LD_STRING playSibBomb()
18895: PPUSH
18896: CALL_OW 559
// wait ( 0 0$14 ) ;
18900: LD_INT 490
18902: PPUSH
18903: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18907: LD_VAR 0 1
18911: PUSH
18912: LD_INT 1
18914: ARRAY
18915: PPUSH
18916: LD_VAR 0 1
18920: PUSH
18921: LD_INT 2
18923: ARRAY
18924: PPUSH
18925: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18929: LD_VAR 0 1
18933: PUSH
18934: LD_INT 1
18936: ARRAY
18937: PPUSH
18938: LD_VAR 0 1
18942: PUSH
18943: LD_INT 2
18945: ARRAY
18946: PPUSH
18947: CALL_OW 429
// end ; end ;
18951: LD_VAR 0 1
18955: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18956: LD_EXP 65
18960: PUSH
18961: LD_EXP 87
18965: AND
18966: IFFALSE 18978
18968: GO 18970
18970: DISABLE
// YouLost (  ) ;
18971: LD_STRING 
18973: PPUSH
18974: CALL_OW 104
18978: END
// every 0 0$1 trigger StreamModeActive and sFog do
18979: LD_EXP 65
18983: PUSH
18984: LD_EXP 86
18988: AND
18989: IFFALSE 19003
18991: GO 18993
18993: DISABLE
// FogOff ( your_side ) ;
18994: LD_OWVAR 2
18998: PPUSH
18999: CALL_OW 344
19003: END
// every 0 0$1 trigger StreamModeActive and sSun do
19004: LD_EXP 65
19008: PUSH
19009: LD_EXP 88
19013: AND
19014: IFFALSE 19042
19016: GO 19018
19018: DISABLE
// begin solar_recharge_percent := 0 ;
19019: LD_ADDR_OWVAR 79
19023: PUSH
19024: LD_INT 0
19026: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19027: LD_INT 10500
19029: PPUSH
19030: CALL_OW 67
// solar_recharge_percent := 100 ;
19034: LD_ADDR_OWVAR 79
19038: PUSH
19039: LD_INT 100
19041: ST_TO_ADDR
// end ;
19042: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19043: LD_EXP 65
19047: PUSH
19048: LD_EXP 89
19052: AND
19053: IFFALSE 19292
19055: GO 19057
19057: DISABLE
19058: LD_INT 0
19060: PPUSH
19061: PPUSH
19062: PPUSH
// begin tmp := [ ] ;
19063: LD_ADDR_VAR 0 3
19067: PUSH
19068: EMPTY
19069: ST_TO_ADDR
// for i := 1 to 6 do
19070: LD_ADDR_VAR 0 1
19074: PUSH
19075: DOUBLE
19076: LD_INT 1
19078: DEC
19079: ST_TO_ADDR
19080: LD_INT 6
19082: PUSH
19083: FOR_TO
19084: IFFALSE 19189
// begin uc_nation := nation_nature ;
19086: LD_ADDR_OWVAR 21
19090: PUSH
19091: LD_INT 0
19093: ST_TO_ADDR
// uc_side := 0 ;
19094: LD_ADDR_OWVAR 20
19098: PUSH
19099: LD_INT 0
19101: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19102: LD_ADDR_OWVAR 29
19106: PUSH
19107: LD_INT 12
19109: PUSH
19110: LD_INT 12
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: ST_TO_ADDR
// hc_agressivity := 20 ;
19117: LD_ADDR_OWVAR 35
19121: PUSH
19122: LD_INT 20
19124: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19125: LD_ADDR_OWVAR 28
19129: PUSH
19130: LD_INT 17
19132: ST_TO_ADDR
// hc_gallery :=  ;
19133: LD_ADDR_OWVAR 33
19137: PUSH
19138: LD_STRING 
19140: ST_TO_ADDR
// hc_name :=  ;
19141: LD_ADDR_OWVAR 26
19145: PUSH
19146: LD_STRING 
19148: ST_TO_ADDR
// un := CreateHuman ;
19149: LD_ADDR_VAR 0 2
19153: PUSH
19154: CALL_OW 44
19158: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19159: LD_VAR 0 2
19163: PPUSH
19164: LD_INT 1
19166: PPUSH
19167: CALL_OW 51
// tmp := tmp ^ un ;
19171: LD_ADDR_VAR 0 3
19175: PUSH
19176: LD_VAR 0 3
19180: PUSH
19181: LD_VAR 0 2
19185: ADD
19186: ST_TO_ADDR
// end ;
19187: GO 19083
19189: POP
19190: POP
// repeat wait ( 0 0$1 ) ;
19191: LD_INT 35
19193: PPUSH
19194: CALL_OW 67
// for un in tmp do
19198: LD_ADDR_VAR 0 2
19202: PUSH
19203: LD_VAR 0 3
19207: PUSH
19208: FOR_IN
19209: IFFALSE 19283
// begin if IsDead ( un ) then
19211: LD_VAR 0 2
19215: PPUSH
19216: CALL_OW 301
19220: IFFALSE 19240
// begin tmp := tmp diff un ;
19222: LD_ADDR_VAR 0 3
19226: PUSH
19227: LD_VAR 0 3
19231: PUSH
19232: LD_VAR 0 2
19236: DIFF
19237: ST_TO_ADDR
// continue ;
19238: GO 19208
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19240: LD_VAR 0 2
19244: PPUSH
19245: LD_INT 3
19247: PUSH
19248: LD_INT 22
19250: PUSH
19251: LD_INT 0
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PPUSH
19262: CALL_OW 69
19266: PPUSH
19267: LD_VAR 0 2
19271: PPUSH
19272: CALL_OW 74
19276: PPUSH
19277: CALL_OW 115
// end ;
19281: GO 19208
19283: POP
19284: POP
// until not tmp ;
19285: LD_VAR 0 3
19289: NOT
19290: IFFALSE 19191
// end ;
19292: PPOPN 3
19294: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19295: LD_EXP 65
19299: PUSH
19300: LD_EXP 90
19304: AND
19305: IFFALSE 19359
19307: GO 19309
19309: DISABLE
// begin ToLua ( displayTroll(); ) ;
19310: LD_STRING displayTroll();
19312: PPUSH
19313: CALL_OW 559
// wait ( 3 3$00 ) ;
19317: LD_INT 6300
19319: PPUSH
19320: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19324: LD_STRING hideTroll();
19326: PPUSH
19327: CALL_OW 559
// wait ( 1 1$00 ) ;
19331: LD_INT 2100
19333: PPUSH
19334: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19338: LD_STRING displayTroll();
19340: PPUSH
19341: CALL_OW 559
// wait ( 1 1$00 ) ;
19345: LD_INT 2100
19347: PPUSH
19348: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19352: LD_STRING hideTroll();
19354: PPUSH
19355: CALL_OW 559
// end ;
19359: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19360: LD_EXP 65
19364: PUSH
19365: LD_EXP 91
19369: AND
19370: IFFALSE 19433
19372: GO 19374
19374: DISABLE
19375: LD_INT 0
19377: PPUSH
// begin p := 0 ;
19378: LD_ADDR_VAR 0 1
19382: PUSH
19383: LD_INT 0
19385: ST_TO_ADDR
// repeat game_speed := 1 ;
19386: LD_ADDR_OWVAR 65
19390: PUSH
19391: LD_INT 1
19393: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19394: LD_INT 35
19396: PPUSH
19397: CALL_OW 67
// p := p + 1 ;
19401: LD_ADDR_VAR 0 1
19405: PUSH
19406: LD_VAR 0 1
19410: PUSH
19411: LD_INT 1
19413: PLUS
19414: ST_TO_ADDR
// until p >= 60 ;
19415: LD_VAR 0 1
19419: PUSH
19420: LD_INT 60
19422: GREATEREQUAL
19423: IFFALSE 19386
// game_speed := 4 ;
19425: LD_ADDR_OWVAR 65
19429: PUSH
19430: LD_INT 4
19432: ST_TO_ADDR
// end ;
19433: PPOPN 1
19435: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19436: LD_EXP 65
19440: PUSH
19441: LD_EXP 92
19445: AND
19446: IFFALSE 19592
19448: GO 19450
19450: DISABLE
19451: LD_INT 0
19453: PPUSH
19454: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19455: LD_ADDR_VAR 0 1
19459: PUSH
19460: LD_INT 22
19462: PUSH
19463: LD_OWVAR 2
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 2
19474: PUSH
19475: LD_INT 30
19477: PUSH
19478: LD_INT 0
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 30
19487: PUSH
19488: LD_INT 1
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: LIST
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PPUSH
19504: CALL_OW 69
19508: ST_TO_ADDR
// if not depot then
19509: LD_VAR 0 1
19513: NOT
19514: IFFALSE 19518
// exit ;
19516: GO 19592
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19518: LD_ADDR_VAR 0 2
19522: PUSH
19523: LD_VAR 0 1
19527: PUSH
19528: LD_INT 1
19530: PPUSH
19531: LD_VAR 0 1
19535: PPUSH
19536: CALL_OW 12
19540: ARRAY
19541: PPUSH
19542: CALL_OW 274
19546: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19547: LD_VAR 0 2
19551: PPUSH
19552: LD_INT 1
19554: PPUSH
19555: LD_INT 0
19557: PPUSH
19558: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19562: LD_VAR 0 2
19566: PPUSH
19567: LD_INT 2
19569: PPUSH
19570: LD_INT 0
19572: PPUSH
19573: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19577: LD_VAR 0 2
19581: PPUSH
19582: LD_INT 3
19584: PPUSH
19585: LD_INT 0
19587: PPUSH
19588: CALL_OW 277
// end ;
19592: PPOPN 2
19594: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19595: LD_EXP 65
19599: PUSH
19600: LD_EXP 93
19604: AND
19605: IFFALSE 19702
19607: GO 19609
19609: DISABLE
19610: LD_INT 0
19612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19613: LD_ADDR_VAR 0 1
19617: PUSH
19618: LD_INT 22
19620: PUSH
19621: LD_OWVAR 2
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 21
19632: PUSH
19633: LD_INT 1
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 3
19642: PUSH
19643: LD_INT 23
19645: PUSH
19646: LD_INT 0
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: LIST
19661: PPUSH
19662: CALL_OW 69
19666: ST_TO_ADDR
// if not tmp then
19667: LD_VAR 0 1
19671: NOT
19672: IFFALSE 19676
// exit ;
19674: GO 19702
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19676: LD_VAR 0 1
19680: PUSH
19681: LD_INT 1
19683: PPUSH
19684: LD_VAR 0 1
19688: PPUSH
19689: CALL_OW 12
19693: ARRAY
19694: PPUSH
19695: LD_INT 200
19697: PPUSH
19698: CALL_OW 234
// end ;
19702: PPOPN 1
19704: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19705: LD_EXP 65
19709: PUSH
19710: LD_EXP 94
19714: AND
19715: IFFALSE 19794
19717: GO 19719
19719: DISABLE
19720: LD_INT 0
19722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19723: LD_ADDR_VAR 0 1
19727: PUSH
19728: LD_INT 22
19730: PUSH
19731: LD_OWVAR 2
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 21
19742: PUSH
19743: LD_INT 2
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PPUSH
19754: CALL_OW 69
19758: ST_TO_ADDR
// if not tmp then
19759: LD_VAR 0 1
19763: NOT
19764: IFFALSE 19768
// exit ;
19766: GO 19794
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19768: LD_VAR 0 1
19772: PUSH
19773: LD_INT 1
19775: PPUSH
19776: LD_VAR 0 1
19780: PPUSH
19781: CALL_OW 12
19785: ARRAY
19786: PPUSH
19787: LD_INT 60
19789: PPUSH
19790: CALL_OW 234
// end ;
19794: PPOPN 1
19796: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19797: LD_EXP 65
19801: PUSH
19802: LD_EXP 95
19806: AND
19807: IFFALSE 19906
19809: GO 19811
19811: DISABLE
19812: LD_INT 0
19814: PPUSH
19815: PPUSH
// begin enable ;
19816: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19817: LD_ADDR_VAR 0 1
19821: PUSH
19822: LD_INT 22
19824: PUSH
19825: LD_OWVAR 2
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 61
19836: PUSH
19837: EMPTY
19838: LIST
19839: PUSH
19840: LD_INT 33
19842: PUSH
19843: LD_INT 2
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: LIST
19854: PPUSH
19855: CALL_OW 69
19859: ST_TO_ADDR
// if not tmp then
19860: LD_VAR 0 1
19864: NOT
19865: IFFALSE 19869
// exit ;
19867: GO 19906
// for i in tmp do
19869: LD_ADDR_VAR 0 2
19873: PUSH
19874: LD_VAR 0 1
19878: PUSH
19879: FOR_IN
19880: IFFALSE 19904
// if IsControledBy ( i ) then
19882: LD_VAR 0 2
19886: PPUSH
19887: CALL_OW 312
19891: IFFALSE 19902
// ComUnlink ( i ) ;
19893: LD_VAR 0 2
19897: PPUSH
19898: CALL_OW 136
19902: GO 19879
19904: POP
19905: POP
// end ;
19906: PPOPN 2
19908: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19909: LD_EXP 65
19913: PUSH
19914: LD_EXP 96
19918: AND
19919: IFFALSE 20059
19921: GO 19923
19923: DISABLE
19924: LD_INT 0
19926: PPUSH
19927: PPUSH
// begin ToLua ( displayPowell(); ) ;
19928: LD_STRING displayPowell();
19930: PPUSH
19931: CALL_OW 559
// uc_side := 0 ;
19935: LD_ADDR_OWVAR 20
19939: PUSH
19940: LD_INT 0
19942: ST_TO_ADDR
// uc_nation := 2 ;
19943: LD_ADDR_OWVAR 21
19947: PUSH
19948: LD_INT 2
19950: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19951: LD_ADDR_OWVAR 37
19955: PUSH
19956: LD_INT 14
19958: ST_TO_ADDR
// vc_engine := engine_siberite ;
19959: LD_ADDR_OWVAR 39
19963: PUSH
19964: LD_INT 3
19966: ST_TO_ADDR
// vc_control := control_apeman ;
19967: LD_ADDR_OWVAR 38
19971: PUSH
19972: LD_INT 5
19974: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19975: LD_ADDR_OWVAR 40
19979: PUSH
19980: LD_INT 29
19982: ST_TO_ADDR
// un := CreateVehicle ;
19983: LD_ADDR_VAR 0 2
19987: PUSH
19988: CALL_OW 45
19992: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19993: LD_VAR 0 2
19997: PPUSH
19998: LD_INT 1
20000: PPUSH
20001: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20005: LD_INT 35
20007: PPUSH
20008: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20012: LD_VAR 0 2
20016: PPUSH
20017: LD_INT 22
20019: PUSH
20020: LD_OWVAR 2
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PPUSH
20029: CALL_OW 69
20033: PPUSH
20034: LD_VAR 0 2
20038: PPUSH
20039: CALL_OW 74
20043: PPUSH
20044: CALL_OW 115
// until IsDead ( un ) ;
20048: LD_VAR 0 2
20052: PPUSH
20053: CALL_OW 301
20057: IFFALSE 20005
// end ;
20059: PPOPN 2
20061: END
// every 0 0$1 trigger StreamModeActive and sStu do
20062: LD_EXP 65
20066: PUSH
20067: LD_EXP 104
20071: AND
20072: IFFALSE 20088
20074: GO 20076
20076: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20077: LD_STRING displayStucuk();
20079: PPUSH
20080: CALL_OW 559
// ResetFog ;
20084: CALL_OW 335
// end ;
20088: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20089: LD_EXP 65
20093: PUSH
20094: LD_EXP 97
20098: AND
20099: IFFALSE 20240
20101: GO 20103
20103: DISABLE
20104: LD_INT 0
20106: PPUSH
20107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20108: LD_ADDR_VAR 0 2
20112: PUSH
20113: LD_INT 22
20115: PUSH
20116: LD_OWVAR 2
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 21
20127: PUSH
20128: LD_INT 1
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PPUSH
20139: CALL_OW 69
20143: ST_TO_ADDR
// if not tmp then
20144: LD_VAR 0 2
20148: NOT
20149: IFFALSE 20153
// exit ;
20151: GO 20240
// un := tmp [ rand ( 1 , tmp ) ] ;
20153: LD_ADDR_VAR 0 1
20157: PUSH
20158: LD_VAR 0 2
20162: PUSH
20163: LD_INT 1
20165: PPUSH
20166: LD_VAR 0 2
20170: PPUSH
20171: CALL_OW 12
20175: ARRAY
20176: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20177: LD_VAR 0 1
20181: PPUSH
20182: LD_INT 0
20184: PPUSH
20185: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20189: LD_VAR 0 1
20193: PPUSH
20194: LD_OWVAR 3
20198: PUSH
20199: LD_VAR 0 1
20203: DIFF
20204: PPUSH
20205: LD_VAR 0 1
20209: PPUSH
20210: CALL_OW 74
20214: PPUSH
20215: CALL_OW 115
// wait ( 0 0$20 ) ;
20219: LD_INT 700
20221: PPUSH
20222: CALL_OW 67
// SetSide ( un , your_side ) ;
20226: LD_VAR 0 1
20230: PPUSH
20231: LD_OWVAR 2
20235: PPUSH
20236: CALL_OW 235
// end ;
20240: PPOPN 2
20242: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20243: LD_EXP 65
20247: PUSH
20248: LD_EXP 98
20252: AND
20253: IFFALSE 20359
20255: GO 20257
20257: DISABLE
20258: LD_INT 0
20260: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20261: LD_ADDR_VAR 0 1
20265: PUSH
20266: LD_INT 22
20268: PUSH
20269: LD_OWVAR 2
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 2
20280: PUSH
20281: LD_INT 30
20283: PUSH
20284: LD_INT 0
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 30
20293: PUSH
20294: LD_INT 1
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: LIST
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PPUSH
20310: CALL_OW 69
20314: ST_TO_ADDR
// if not depot then
20315: LD_VAR 0 1
20319: NOT
20320: IFFALSE 20324
// exit ;
20322: GO 20359
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20324: LD_VAR 0 1
20328: PUSH
20329: LD_INT 1
20331: ARRAY
20332: PPUSH
20333: CALL_OW 250
20337: PPUSH
20338: LD_VAR 0 1
20342: PUSH
20343: LD_INT 1
20345: ARRAY
20346: PPUSH
20347: CALL_OW 251
20351: PPUSH
20352: LD_INT 70
20354: PPUSH
20355: CALL_OW 495
// end ;
20359: PPOPN 1
20361: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20362: LD_EXP 65
20366: PUSH
20367: LD_EXP 99
20371: AND
20372: IFFALSE 20583
20374: GO 20376
20376: DISABLE
20377: LD_INT 0
20379: PPUSH
20380: PPUSH
20381: PPUSH
20382: PPUSH
20383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20384: LD_ADDR_VAR 0 5
20388: PUSH
20389: LD_INT 22
20391: PUSH
20392: LD_OWVAR 2
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 21
20403: PUSH
20404: LD_INT 1
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PPUSH
20415: CALL_OW 69
20419: ST_TO_ADDR
// if not tmp then
20420: LD_VAR 0 5
20424: NOT
20425: IFFALSE 20429
// exit ;
20427: GO 20583
// for i in tmp do
20429: LD_ADDR_VAR 0 1
20433: PUSH
20434: LD_VAR 0 5
20438: PUSH
20439: FOR_IN
20440: IFFALSE 20581
// begin d := rand ( 0 , 5 ) ;
20442: LD_ADDR_VAR 0 4
20446: PUSH
20447: LD_INT 0
20449: PPUSH
20450: LD_INT 5
20452: PPUSH
20453: CALL_OW 12
20457: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20458: LD_ADDR_VAR 0 2
20462: PUSH
20463: LD_VAR 0 1
20467: PPUSH
20468: CALL_OW 250
20472: PPUSH
20473: LD_VAR 0 4
20477: PPUSH
20478: LD_INT 3
20480: PPUSH
20481: LD_INT 12
20483: PPUSH
20484: CALL_OW 12
20488: PPUSH
20489: CALL_OW 272
20493: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20494: LD_ADDR_VAR 0 3
20498: PUSH
20499: LD_VAR 0 1
20503: PPUSH
20504: CALL_OW 251
20508: PPUSH
20509: LD_VAR 0 4
20513: PPUSH
20514: LD_INT 3
20516: PPUSH
20517: LD_INT 12
20519: PPUSH
20520: CALL_OW 12
20524: PPUSH
20525: CALL_OW 273
20529: ST_TO_ADDR
// if ValidHex ( x , y ) then
20530: LD_VAR 0 2
20534: PPUSH
20535: LD_VAR 0 3
20539: PPUSH
20540: CALL_OW 488
20544: IFFALSE 20579
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20546: LD_VAR 0 1
20550: PPUSH
20551: LD_VAR 0 2
20555: PPUSH
20556: LD_VAR 0 3
20560: PPUSH
20561: LD_INT 3
20563: PPUSH
20564: LD_INT 6
20566: PPUSH
20567: CALL_OW 12
20571: PPUSH
20572: LD_INT 1
20574: PPUSH
20575: CALL_OW 483
// end ;
20579: GO 20439
20581: POP
20582: POP
// end ;
20583: PPOPN 5
20585: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20586: LD_EXP 65
20590: PUSH
20591: LD_EXP 100
20595: AND
20596: IFFALSE 20690
20598: GO 20600
20600: DISABLE
20601: LD_INT 0
20603: PPUSH
20604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20605: LD_ADDR_VAR 0 2
20609: PUSH
20610: LD_INT 22
20612: PUSH
20613: LD_OWVAR 2
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 32
20624: PUSH
20625: LD_INT 1
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 21
20634: PUSH
20635: LD_INT 2
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: LIST
20646: PPUSH
20647: CALL_OW 69
20651: ST_TO_ADDR
// if not tmp then
20652: LD_VAR 0 2
20656: NOT
20657: IFFALSE 20661
// exit ;
20659: GO 20690
// for i in tmp do
20661: LD_ADDR_VAR 0 1
20665: PUSH
20666: LD_VAR 0 2
20670: PUSH
20671: FOR_IN
20672: IFFALSE 20688
// SetFuel ( i , 0 ) ;
20674: LD_VAR 0 1
20678: PPUSH
20679: LD_INT 0
20681: PPUSH
20682: CALL_OW 240
20686: GO 20671
20688: POP
20689: POP
// end ;
20690: PPOPN 2
20692: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20693: LD_EXP 65
20697: PUSH
20698: LD_EXP 101
20702: AND
20703: IFFALSE 20769
20705: GO 20707
20707: DISABLE
20708: LD_INT 0
20710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20711: LD_ADDR_VAR 0 1
20715: PUSH
20716: LD_INT 22
20718: PUSH
20719: LD_OWVAR 2
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 30
20730: PUSH
20731: LD_INT 29
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PPUSH
20742: CALL_OW 69
20746: ST_TO_ADDR
// if not tmp then
20747: LD_VAR 0 1
20751: NOT
20752: IFFALSE 20756
// exit ;
20754: GO 20769
// DestroyUnit ( tmp [ 1 ] ) ;
20756: LD_VAR 0 1
20760: PUSH
20761: LD_INT 1
20763: ARRAY
20764: PPUSH
20765: CALL_OW 65
// end ;
20769: PPOPN 1
20771: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20772: LD_EXP 65
20776: PUSH
20777: LD_EXP 103
20781: AND
20782: IFFALSE 20911
20784: GO 20786
20786: DISABLE
20787: LD_INT 0
20789: PPUSH
// begin uc_side := 0 ;
20790: LD_ADDR_OWVAR 20
20794: PUSH
20795: LD_INT 0
20797: ST_TO_ADDR
// uc_nation := nation_arabian ;
20798: LD_ADDR_OWVAR 21
20802: PUSH
20803: LD_INT 2
20805: ST_TO_ADDR
// hc_gallery :=  ;
20806: LD_ADDR_OWVAR 33
20810: PUSH
20811: LD_STRING 
20813: ST_TO_ADDR
// hc_name :=  ;
20814: LD_ADDR_OWVAR 26
20818: PUSH
20819: LD_STRING 
20821: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20822: LD_INT 1
20824: PPUSH
20825: LD_INT 11
20827: PPUSH
20828: LD_INT 10
20830: PPUSH
20831: CALL_OW 380
// un := CreateHuman ;
20835: LD_ADDR_VAR 0 1
20839: PUSH
20840: CALL_OW 44
20844: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20845: LD_VAR 0 1
20849: PPUSH
20850: LD_INT 1
20852: PPUSH
20853: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20857: LD_INT 35
20859: PPUSH
20860: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20864: LD_VAR 0 1
20868: PPUSH
20869: LD_INT 22
20871: PUSH
20872: LD_OWVAR 2
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PPUSH
20881: CALL_OW 69
20885: PPUSH
20886: LD_VAR 0 1
20890: PPUSH
20891: CALL_OW 74
20895: PPUSH
20896: CALL_OW 115
// until IsDead ( un ) ;
20900: LD_VAR 0 1
20904: PPUSH
20905: CALL_OW 301
20909: IFFALSE 20857
// end ;
20911: PPOPN 1
20913: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20914: LD_EXP 65
20918: PUSH
20919: LD_EXP 105
20923: AND
20924: IFFALSE 20936
20926: GO 20928
20928: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20929: LD_STRING earthquake(getX(game), 0, 32)
20931: PPUSH
20932: CALL_OW 559
20936: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20937: LD_EXP 65
20941: PUSH
20942: LD_EXP 106
20946: AND
20947: IFFALSE 21038
20949: GO 20951
20951: DISABLE
20952: LD_INT 0
20954: PPUSH
// begin enable ;
20955: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20956: LD_ADDR_VAR 0 1
20960: PUSH
20961: LD_INT 22
20963: PUSH
20964: LD_OWVAR 2
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 21
20975: PUSH
20976: LD_INT 2
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 33
20985: PUSH
20986: LD_INT 3
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: LIST
20997: PPUSH
20998: CALL_OW 69
21002: ST_TO_ADDR
// if not tmp then
21003: LD_VAR 0 1
21007: NOT
21008: IFFALSE 21012
// exit ;
21010: GO 21038
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21012: LD_VAR 0 1
21016: PUSH
21017: LD_INT 1
21019: PPUSH
21020: LD_VAR 0 1
21024: PPUSH
21025: CALL_OW 12
21029: ARRAY
21030: PPUSH
21031: LD_INT 1
21033: PPUSH
21034: CALL_OW 234
// end ;
21038: PPOPN 1
21040: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21041: LD_EXP 65
21045: PUSH
21046: LD_EXP 107
21050: AND
21051: IFFALSE 21192
21053: GO 21055
21055: DISABLE
21056: LD_INT 0
21058: PPUSH
21059: PPUSH
21060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21061: LD_ADDR_VAR 0 3
21065: PUSH
21066: LD_INT 22
21068: PUSH
21069: LD_OWVAR 2
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 25
21080: PUSH
21081: LD_INT 1
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PPUSH
21092: CALL_OW 69
21096: ST_TO_ADDR
// if not tmp then
21097: LD_VAR 0 3
21101: NOT
21102: IFFALSE 21106
// exit ;
21104: GO 21192
// un := tmp [ rand ( 1 , tmp ) ] ;
21106: LD_ADDR_VAR 0 2
21110: PUSH
21111: LD_VAR 0 3
21115: PUSH
21116: LD_INT 1
21118: PPUSH
21119: LD_VAR 0 3
21123: PPUSH
21124: CALL_OW 12
21128: ARRAY
21129: ST_TO_ADDR
// if Crawls ( un ) then
21130: LD_VAR 0 2
21134: PPUSH
21135: CALL_OW 318
21139: IFFALSE 21150
// ComWalk ( un ) ;
21141: LD_VAR 0 2
21145: PPUSH
21146: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21150: LD_VAR 0 2
21154: PPUSH
21155: LD_INT 9
21157: PPUSH
21158: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21162: LD_INT 28
21164: PPUSH
21165: LD_OWVAR 2
21169: PPUSH
21170: LD_INT 2
21172: PPUSH
21173: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21177: LD_INT 29
21179: PPUSH
21180: LD_OWVAR 2
21184: PPUSH
21185: LD_INT 2
21187: PPUSH
21188: CALL_OW 322
// end ;
21192: PPOPN 3
21194: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21195: LD_EXP 65
21199: PUSH
21200: LD_EXP 108
21204: AND
21205: IFFALSE 21316
21207: GO 21209
21209: DISABLE
21210: LD_INT 0
21212: PPUSH
21213: PPUSH
21214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21215: LD_ADDR_VAR 0 3
21219: PUSH
21220: LD_INT 22
21222: PUSH
21223: LD_OWVAR 2
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 25
21234: PUSH
21235: LD_INT 1
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PPUSH
21246: CALL_OW 69
21250: ST_TO_ADDR
// if not tmp then
21251: LD_VAR 0 3
21255: NOT
21256: IFFALSE 21260
// exit ;
21258: GO 21316
// un := tmp [ rand ( 1 , tmp ) ] ;
21260: LD_ADDR_VAR 0 2
21264: PUSH
21265: LD_VAR 0 3
21269: PUSH
21270: LD_INT 1
21272: PPUSH
21273: LD_VAR 0 3
21277: PPUSH
21278: CALL_OW 12
21282: ARRAY
21283: ST_TO_ADDR
// if Crawls ( un ) then
21284: LD_VAR 0 2
21288: PPUSH
21289: CALL_OW 318
21293: IFFALSE 21304
// ComWalk ( un ) ;
21295: LD_VAR 0 2
21299: PPUSH
21300: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21304: LD_VAR 0 2
21308: PPUSH
21309: LD_INT 8
21311: PPUSH
21312: CALL_OW 336
// end ;
21316: PPOPN 3
21318: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21319: LD_EXP 65
21323: PUSH
21324: LD_EXP 109
21328: AND
21329: IFFALSE 21473
21331: GO 21333
21333: DISABLE
21334: LD_INT 0
21336: PPUSH
21337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21338: LD_ADDR_VAR 0 2
21342: PUSH
21343: LD_INT 22
21345: PUSH
21346: LD_OWVAR 2
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 21
21357: PUSH
21358: LD_INT 2
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 2
21367: PUSH
21368: LD_INT 34
21370: PUSH
21371: LD_INT 12
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 34
21380: PUSH
21381: LD_INT 51
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 34
21390: PUSH
21391: LD_INT 32
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: LIST
21408: PPUSH
21409: CALL_OW 69
21413: ST_TO_ADDR
// if not tmp then
21414: LD_VAR 0 2
21418: NOT
21419: IFFALSE 21423
// exit ;
21421: GO 21473
// for i in tmp do
21423: LD_ADDR_VAR 0 1
21427: PUSH
21428: LD_VAR 0 2
21432: PUSH
21433: FOR_IN
21434: IFFALSE 21471
// if GetCargo ( i , mat_artifact ) = 0 then
21436: LD_VAR 0 1
21440: PPUSH
21441: LD_INT 4
21443: PPUSH
21444: CALL_OW 289
21448: PUSH
21449: LD_INT 0
21451: EQUAL
21452: IFFALSE 21469
// SetCargo ( i , mat_siberit , 100 ) ;
21454: LD_VAR 0 1
21458: PPUSH
21459: LD_INT 3
21461: PPUSH
21462: LD_INT 100
21464: PPUSH
21465: CALL_OW 290
21469: GO 21433
21471: POP
21472: POP
// end ;
21473: PPOPN 2
21475: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21476: LD_EXP 65
21480: PUSH
21481: LD_EXP 110
21485: AND
21486: IFFALSE 21669
21488: GO 21490
21490: DISABLE
21491: LD_INT 0
21493: PPUSH
21494: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21495: LD_ADDR_VAR 0 2
21499: PUSH
21500: LD_INT 22
21502: PUSH
21503: LD_OWVAR 2
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PPUSH
21512: CALL_OW 69
21516: ST_TO_ADDR
// if not tmp then
21517: LD_VAR 0 2
21521: NOT
21522: IFFALSE 21526
// exit ;
21524: GO 21669
// for i := 1 to 2 do
21526: LD_ADDR_VAR 0 1
21530: PUSH
21531: DOUBLE
21532: LD_INT 1
21534: DEC
21535: ST_TO_ADDR
21536: LD_INT 2
21538: PUSH
21539: FOR_TO
21540: IFFALSE 21667
// begin uc_side := your_side ;
21542: LD_ADDR_OWVAR 20
21546: PUSH
21547: LD_OWVAR 2
21551: ST_TO_ADDR
// uc_nation := nation_american ;
21552: LD_ADDR_OWVAR 21
21556: PUSH
21557: LD_INT 1
21559: ST_TO_ADDR
// vc_chassis := us_morphling ;
21560: LD_ADDR_OWVAR 37
21564: PUSH
21565: LD_INT 5
21567: ST_TO_ADDR
// vc_engine := engine_siberite ;
21568: LD_ADDR_OWVAR 39
21572: PUSH
21573: LD_INT 3
21575: ST_TO_ADDR
// vc_control := control_computer ;
21576: LD_ADDR_OWVAR 38
21580: PUSH
21581: LD_INT 3
21583: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21584: LD_ADDR_OWVAR 40
21588: PUSH
21589: LD_INT 10
21591: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21592: LD_VAR 0 2
21596: PUSH
21597: LD_INT 1
21599: ARRAY
21600: PPUSH
21601: CALL_OW 310
21605: NOT
21606: IFFALSE 21653
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21608: CALL_OW 45
21612: PPUSH
21613: LD_VAR 0 2
21617: PUSH
21618: LD_INT 1
21620: ARRAY
21621: PPUSH
21622: CALL_OW 250
21626: PPUSH
21627: LD_VAR 0 2
21631: PUSH
21632: LD_INT 1
21634: ARRAY
21635: PPUSH
21636: CALL_OW 251
21640: PPUSH
21641: LD_INT 12
21643: PPUSH
21644: LD_INT 1
21646: PPUSH
21647: CALL_OW 50
21651: GO 21665
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21653: CALL_OW 45
21657: PPUSH
21658: LD_INT 1
21660: PPUSH
21661: CALL_OW 51
// end ;
21665: GO 21539
21667: POP
21668: POP
// end ;
21669: PPOPN 2
21671: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21672: LD_EXP 65
21676: PUSH
21677: LD_EXP 111
21681: AND
21682: IFFALSE 21904
21684: GO 21686
21686: DISABLE
21687: LD_INT 0
21689: PPUSH
21690: PPUSH
21691: PPUSH
21692: PPUSH
21693: PPUSH
21694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21695: LD_ADDR_VAR 0 6
21699: PUSH
21700: LD_INT 22
21702: PUSH
21703: LD_OWVAR 2
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 21
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 3
21724: PUSH
21725: LD_INT 23
21727: PUSH
21728: LD_INT 0
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: LIST
21743: PPUSH
21744: CALL_OW 69
21748: ST_TO_ADDR
// if not tmp then
21749: LD_VAR 0 6
21753: NOT
21754: IFFALSE 21758
// exit ;
21756: GO 21904
// s1 := rand ( 1 , 4 ) ;
21758: LD_ADDR_VAR 0 2
21762: PUSH
21763: LD_INT 1
21765: PPUSH
21766: LD_INT 4
21768: PPUSH
21769: CALL_OW 12
21773: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21774: LD_ADDR_VAR 0 4
21778: PUSH
21779: LD_VAR 0 6
21783: PUSH
21784: LD_INT 1
21786: ARRAY
21787: PPUSH
21788: LD_VAR 0 2
21792: PPUSH
21793: CALL_OW 259
21797: ST_TO_ADDR
// if s1 = 1 then
21798: LD_VAR 0 2
21802: PUSH
21803: LD_INT 1
21805: EQUAL
21806: IFFALSE 21826
// s2 := rand ( 2 , 4 ) else
21808: LD_ADDR_VAR 0 3
21812: PUSH
21813: LD_INT 2
21815: PPUSH
21816: LD_INT 4
21818: PPUSH
21819: CALL_OW 12
21823: ST_TO_ADDR
21824: GO 21834
// s2 := 1 ;
21826: LD_ADDR_VAR 0 3
21830: PUSH
21831: LD_INT 1
21833: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21834: LD_ADDR_VAR 0 5
21838: PUSH
21839: LD_VAR 0 6
21843: PUSH
21844: LD_INT 1
21846: ARRAY
21847: PPUSH
21848: LD_VAR 0 3
21852: PPUSH
21853: CALL_OW 259
21857: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21858: LD_VAR 0 6
21862: PUSH
21863: LD_INT 1
21865: ARRAY
21866: PPUSH
21867: LD_VAR 0 2
21871: PPUSH
21872: LD_VAR 0 5
21876: PPUSH
21877: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21881: LD_VAR 0 6
21885: PUSH
21886: LD_INT 1
21888: ARRAY
21889: PPUSH
21890: LD_VAR 0 3
21894: PPUSH
21895: LD_VAR 0 4
21899: PPUSH
21900: CALL_OW 237
// end ;
21904: PPOPN 6
21906: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21907: LD_EXP 65
21911: PUSH
21912: LD_EXP 112
21916: AND
21917: IFFALSE 21996
21919: GO 21921
21921: DISABLE
21922: LD_INT 0
21924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21925: LD_ADDR_VAR 0 1
21929: PUSH
21930: LD_INT 22
21932: PUSH
21933: LD_OWVAR 2
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 30
21944: PUSH
21945: LD_INT 3
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PPUSH
21956: CALL_OW 69
21960: ST_TO_ADDR
// if not tmp then
21961: LD_VAR 0 1
21965: NOT
21966: IFFALSE 21970
// exit ;
21968: GO 21996
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21970: LD_VAR 0 1
21974: PUSH
21975: LD_INT 1
21977: PPUSH
21978: LD_VAR 0 1
21982: PPUSH
21983: CALL_OW 12
21987: ARRAY
21988: PPUSH
21989: LD_INT 1
21991: PPUSH
21992: CALL_OW 234
// end ;
21996: PPOPN 1
21998: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21999: LD_EXP 65
22003: PUSH
22004: LD_EXP 113
22008: AND
22009: IFFALSE 22121
22011: GO 22013
22013: DISABLE
22014: LD_INT 0
22016: PPUSH
22017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22018: LD_ADDR_VAR 0 2
22022: PUSH
22023: LD_INT 22
22025: PUSH
22026: LD_OWVAR 2
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 2
22037: PUSH
22038: LD_INT 30
22040: PUSH
22041: LD_INT 27
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 30
22050: PUSH
22051: LD_INT 26
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 30
22060: PUSH
22061: LD_INT 28
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PPUSH
22078: CALL_OW 69
22082: ST_TO_ADDR
// if not tmp then
22083: LD_VAR 0 2
22087: NOT
22088: IFFALSE 22092
// exit ;
22090: GO 22121
// for i in tmp do
22092: LD_ADDR_VAR 0 1
22096: PUSH
22097: LD_VAR 0 2
22101: PUSH
22102: FOR_IN
22103: IFFALSE 22119
// SetLives ( i , 1 ) ;
22105: LD_VAR 0 1
22109: PPUSH
22110: LD_INT 1
22112: PPUSH
22113: CALL_OW 234
22117: GO 22102
22119: POP
22120: POP
// end ;
22121: PPOPN 2
22123: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22124: LD_EXP 65
22128: PUSH
22129: LD_EXP 114
22133: AND
22134: IFFALSE 22421
22136: GO 22138
22138: DISABLE
22139: LD_INT 0
22141: PPUSH
22142: PPUSH
22143: PPUSH
// begin i := rand ( 1 , 7 ) ;
22144: LD_ADDR_VAR 0 1
22148: PUSH
22149: LD_INT 1
22151: PPUSH
22152: LD_INT 7
22154: PPUSH
22155: CALL_OW 12
22159: ST_TO_ADDR
// case i of 1 :
22160: LD_VAR 0 1
22164: PUSH
22165: LD_INT 1
22167: DOUBLE
22168: EQUAL
22169: IFTRUE 22173
22171: GO 22183
22173: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22174: LD_STRING earthquake(getX(game), 0, 32)
22176: PPUSH
22177: CALL_OW 559
22181: GO 22421
22183: LD_INT 2
22185: DOUBLE
22186: EQUAL
22187: IFTRUE 22191
22189: GO 22205
22191: POP
// begin ToLua ( displayStucuk(); ) ;
22192: LD_STRING displayStucuk();
22194: PPUSH
22195: CALL_OW 559
// ResetFog ;
22199: CALL_OW 335
// end ; 3 :
22203: GO 22421
22205: LD_INT 3
22207: DOUBLE
22208: EQUAL
22209: IFTRUE 22213
22211: GO 22317
22213: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22214: LD_ADDR_VAR 0 2
22218: PUSH
22219: LD_INT 22
22221: PUSH
22222: LD_OWVAR 2
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 25
22233: PUSH
22234: LD_INT 1
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PPUSH
22245: CALL_OW 69
22249: ST_TO_ADDR
// if not tmp then
22250: LD_VAR 0 2
22254: NOT
22255: IFFALSE 22259
// exit ;
22257: GO 22421
// un := tmp [ rand ( 1 , tmp ) ] ;
22259: LD_ADDR_VAR 0 3
22263: PUSH
22264: LD_VAR 0 2
22268: PUSH
22269: LD_INT 1
22271: PPUSH
22272: LD_VAR 0 2
22276: PPUSH
22277: CALL_OW 12
22281: ARRAY
22282: ST_TO_ADDR
// if Crawls ( un ) then
22283: LD_VAR 0 3
22287: PPUSH
22288: CALL_OW 318
22292: IFFALSE 22303
// ComWalk ( un ) ;
22294: LD_VAR 0 3
22298: PPUSH
22299: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22303: LD_VAR 0 3
22307: PPUSH
22308: LD_INT 8
22310: PPUSH
22311: CALL_OW 336
// end ; 4 :
22315: GO 22421
22317: LD_INT 4
22319: DOUBLE
22320: EQUAL
22321: IFTRUE 22325
22323: GO 22399
22325: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22326: LD_ADDR_VAR 0 2
22330: PUSH
22331: LD_INT 22
22333: PUSH
22334: LD_OWVAR 2
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 30
22345: PUSH
22346: LD_INT 29
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PPUSH
22357: CALL_OW 69
22361: ST_TO_ADDR
// if not tmp then
22362: LD_VAR 0 2
22366: NOT
22367: IFFALSE 22371
// exit ;
22369: GO 22421
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22371: LD_VAR 0 2
22375: PUSH
22376: LD_INT 1
22378: ARRAY
22379: PPUSH
22380: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22384: LD_VAR 0 2
22388: PUSH
22389: LD_INT 1
22391: ARRAY
22392: PPUSH
22393: CALL_OW 65
// end ; 5 .. 7 :
22397: GO 22421
22399: LD_INT 5
22401: DOUBLE
22402: GREATEREQUAL
22403: IFFALSE 22411
22405: LD_INT 7
22407: DOUBLE
22408: LESSEQUAL
22409: IFTRUE 22413
22411: GO 22420
22413: POP
// StreamSibBomb ; end ;
22414: CALL 18658 0 0
22418: GO 22421
22420: POP
// end ;
22421: PPOPN 3
22423: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22424: LD_EXP 65
22428: PUSH
22429: LD_EXP 115
22433: AND
22434: IFFALSE 22590
22436: GO 22438
22438: DISABLE
22439: LD_INT 0
22441: PPUSH
22442: PPUSH
22443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22444: LD_ADDR_VAR 0 2
22448: PUSH
22449: LD_INT 81
22451: PUSH
22452: LD_OWVAR 2
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 2
22463: PUSH
22464: LD_INT 21
22466: PUSH
22467: LD_INT 1
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 21
22476: PUSH
22477: LD_INT 2
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: LIST
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PPUSH
22493: CALL_OW 69
22497: ST_TO_ADDR
// if not tmp then
22498: LD_VAR 0 2
22502: NOT
22503: IFFALSE 22507
// exit ;
22505: GO 22590
// p := 0 ;
22507: LD_ADDR_VAR 0 3
22511: PUSH
22512: LD_INT 0
22514: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22515: LD_INT 35
22517: PPUSH
22518: CALL_OW 67
// p := p + 1 ;
22522: LD_ADDR_VAR 0 3
22526: PUSH
22527: LD_VAR 0 3
22531: PUSH
22532: LD_INT 1
22534: PLUS
22535: ST_TO_ADDR
// for i in tmp do
22536: LD_ADDR_VAR 0 1
22540: PUSH
22541: LD_VAR 0 2
22545: PUSH
22546: FOR_IN
22547: IFFALSE 22578
// if GetLives ( i ) < 1000 then
22549: LD_VAR 0 1
22553: PPUSH
22554: CALL_OW 256
22558: PUSH
22559: LD_INT 1000
22561: LESS
22562: IFFALSE 22576
// SetLives ( i , 1000 ) ;
22564: LD_VAR 0 1
22568: PPUSH
22569: LD_INT 1000
22571: PPUSH
22572: CALL_OW 234
22576: GO 22546
22578: POP
22579: POP
// until p > 20 ;
22580: LD_VAR 0 3
22584: PUSH
22585: LD_INT 20
22587: GREATER
22588: IFFALSE 22515
// end ;
22590: PPOPN 3
22592: END
// every 0 0$1 trigger StreamModeActive and sTime do
22593: LD_EXP 65
22597: PUSH
22598: LD_EXP 116
22602: AND
22603: IFFALSE 22638
22605: GO 22607
22607: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22608: LD_INT 28
22610: PPUSH
22611: LD_OWVAR 2
22615: PPUSH
22616: LD_INT 2
22618: PPUSH
22619: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22623: LD_INT 30
22625: PPUSH
22626: LD_OWVAR 2
22630: PPUSH
22631: LD_INT 2
22633: PPUSH
22634: CALL_OW 322
// end ;
22638: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22639: LD_EXP 65
22643: PUSH
22644: LD_EXP 117
22648: AND
22649: IFFALSE 22770
22651: GO 22653
22653: DISABLE
22654: LD_INT 0
22656: PPUSH
22657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22658: LD_ADDR_VAR 0 2
22662: PUSH
22663: LD_INT 22
22665: PUSH
22666: LD_OWVAR 2
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 21
22677: PUSH
22678: LD_INT 1
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 3
22687: PUSH
22688: LD_INT 23
22690: PUSH
22691: LD_INT 0
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: LIST
22706: PPUSH
22707: CALL_OW 69
22711: ST_TO_ADDR
// if not tmp then
22712: LD_VAR 0 2
22716: NOT
22717: IFFALSE 22721
// exit ;
22719: GO 22770
// for i in tmp do
22721: LD_ADDR_VAR 0 1
22725: PUSH
22726: LD_VAR 0 2
22730: PUSH
22731: FOR_IN
22732: IFFALSE 22768
// begin if Crawls ( i ) then
22734: LD_VAR 0 1
22738: PPUSH
22739: CALL_OW 318
22743: IFFALSE 22754
// ComWalk ( i ) ;
22745: LD_VAR 0 1
22749: PPUSH
22750: CALL_OW 138
// SetClass ( i , 2 ) ;
22754: LD_VAR 0 1
22758: PPUSH
22759: LD_INT 2
22761: PPUSH
22762: CALL_OW 336
// end ;
22766: GO 22731
22768: POP
22769: POP
// end ;
22770: PPOPN 2
22772: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22773: LD_EXP 65
22777: PUSH
22778: LD_EXP 118
22782: AND
22783: IFFALSE 23071
22785: GO 22787
22787: DISABLE
22788: LD_INT 0
22790: PPUSH
22791: PPUSH
22792: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22793: LD_OWVAR 2
22797: PPUSH
22798: LD_INT 9
22800: PPUSH
22801: LD_INT 1
22803: PPUSH
22804: LD_INT 1
22806: PPUSH
22807: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22811: LD_INT 9
22813: PPUSH
22814: LD_OWVAR 2
22818: PPUSH
22819: CALL_OW 343
// uc_side := 9 ;
22823: LD_ADDR_OWVAR 20
22827: PUSH
22828: LD_INT 9
22830: ST_TO_ADDR
// uc_nation := 2 ;
22831: LD_ADDR_OWVAR 21
22835: PUSH
22836: LD_INT 2
22838: ST_TO_ADDR
// hc_name := Dark Warrior ;
22839: LD_ADDR_OWVAR 26
22843: PUSH
22844: LD_STRING Dark Warrior
22846: ST_TO_ADDR
// hc_gallery :=  ;
22847: LD_ADDR_OWVAR 33
22851: PUSH
22852: LD_STRING 
22854: ST_TO_ADDR
// hc_noskilllimit := true ;
22855: LD_ADDR_OWVAR 76
22859: PUSH
22860: LD_INT 1
22862: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22863: LD_ADDR_OWVAR 31
22867: PUSH
22868: LD_INT 30
22870: PUSH
22871: LD_INT 30
22873: PUSH
22874: LD_INT 30
22876: PUSH
22877: LD_INT 30
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: ST_TO_ADDR
// un := CreateHuman ;
22886: LD_ADDR_VAR 0 3
22890: PUSH
22891: CALL_OW 44
22895: ST_TO_ADDR
// hc_noskilllimit := false ;
22896: LD_ADDR_OWVAR 76
22900: PUSH
22901: LD_INT 0
22903: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22904: LD_VAR 0 3
22908: PPUSH
22909: LD_INT 1
22911: PPUSH
22912: CALL_OW 51
// ToLua ( playRanger() ) ;
22916: LD_STRING playRanger()
22918: PPUSH
22919: CALL_OW 559
// p := 0 ;
22923: LD_ADDR_VAR 0 2
22927: PUSH
22928: LD_INT 0
22930: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22931: LD_INT 35
22933: PPUSH
22934: CALL_OW 67
// p := p + 1 ;
22938: LD_ADDR_VAR 0 2
22942: PUSH
22943: LD_VAR 0 2
22947: PUSH
22948: LD_INT 1
22950: PLUS
22951: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22952: LD_VAR 0 3
22956: PPUSH
22957: CALL_OW 256
22961: PUSH
22962: LD_INT 1000
22964: LESS
22965: IFFALSE 22979
// SetLives ( un , 1000 ) ;
22967: LD_VAR 0 3
22971: PPUSH
22972: LD_INT 1000
22974: PPUSH
22975: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22979: LD_VAR 0 3
22983: PPUSH
22984: LD_INT 81
22986: PUSH
22987: LD_OWVAR 2
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 91
22998: PUSH
22999: LD_VAR 0 3
23003: PUSH
23004: LD_INT 30
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: LIST
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PPUSH
23016: CALL_OW 69
23020: PPUSH
23021: LD_VAR 0 3
23025: PPUSH
23026: CALL_OW 74
23030: PPUSH
23031: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23035: LD_VAR 0 2
23039: PUSH
23040: LD_INT 80
23042: GREATER
23043: PUSH
23044: LD_VAR 0 3
23048: PPUSH
23049: CALL_OW 301
23053: OR
23054: IFFALSE 22931
// if un then
23056: LD_VAR 0 3
23060: IFFALSE 23071
// RemoveUnit ( un ) ;
23062: LD_VAR 0 3
23066: PPUSH
23067: CALL_OW 64
// end ;
23071: PPOPN 3
23073: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23074: LD_EXP 119
23078: IFFALSE 23194
23080: GO 23082
23082: DISABLE
23083: LD_INT 0
23085: PPUSH
23086: PPUSH
23087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23088: LD_ADDR_VAR 0 2
23092: PUSH
23093: LD_INT 81
23095: PUSH
23096: LD_OWVAR 2
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 21
23107: PUSH
23108: LD_INT 1
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PPUSH
23119: CALL_OW 69
23123: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23124: LD_STRING playComputer()
23126: PPUSH
23127: CALL_OW 559
// if not tmp then
23131: LD_VAR 0 2
23135: NOT
23136: IFFALSE 23140
// exit ;
23138: GO 23194
// for i in tmp do
23140: LD_ADDR_VAR 0 1
23144: PUSH
23145: LD_VAR 0 2
23149: PUSH
23150: FOR_IN
23151: IFFALSE 23192
// for j := 1 to 4 do
23153: LD_ADDR_VAR 0 3
23157: PUSH
23158: DOUBLE
23159: LD_INT 1
23161: DEC
23162: ST_TO_ADDR
23163: LD_INT 4
23165: PUSH
23166: FOR_TO
23167: IFFALSE 23188
// SetSkill ( i , j , 10 ) ;
23169: LD_VAR 0 1
23173: PPUSH
23174: LD_VAR 0 3
23178: PPUSH
23179: LD_INT 10
23181: PPUSH
23182: CALL_OW 237
23186: GO 23166
23188: POP
23189: POP
23190: GO 23150
23192: POP
23193: POP
// end ;
23194: PPOPN 3
23196: END
// every 0 0$1 trigger s30 do var i , tmp ;
23197: LD_EXP 120
23201: IFFALSE 23270
23203: GO 23205
23205: DISABLE
23206: LD_INT 0
23208: PPUSH
23209: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23210: LD_ADDR_VAR 0 2
23214: PUSH
23215: LD_INT 22
23217: PUSH
23218: LD_OWVAR 2
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PPUSH
23227: CALL_OW 69
23231: ST_TO_ADDR
// if not tmp then
23232: LD_VAR 0 2
23236: NOT
23237: IFFALSE 23241
// exit ;
23239: GO 23270
// for i in tmp do
23241: LD_ADDR_VAR 0 1
23245: PUSH
23246: LD_VAR 0 2
23250: PUSH
23251: FOR_IN
23252: IFFALSE 23268
// SetLives ( i , 300 ) ;
23254: LD_VAR 0 1
23258: PPUSH
23259: LD_INT 300
23261: PPUSH
23262: CALL_OW 234
23266: GO 23251
23268: POP
23269: POP
// end ;
23270: PPOPN 2
23272: END
// every 0 0$1 trigger s60 do var i , tmp ;
23273: LD_EXP 121
23277: IFFALSE 23346
23279: GO 23281
23281: DISABLE
23282: LD_INT 0
23284: PPUSH
23285: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23286: LD_ADDR_VAR 0 2
23290: PUSH
23291: LD_INT 22
23293: PUSH
23294: LD_OWVAR 2
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PPUSH
23303: CALL_OW 69
23307: ST_TO_ADDR
// if not tmp then
23308: LD_VAR 0 2
23312: NOT
23313: IFFALSE 23317
// exit ;
23315: GO 23346
// for i in tmp do
23317: LD_ADDR_VAR 0 1
23321: PUSH
23322: LD_VAR 0 2
23326: PUSH
23327: FOR_IN
23328: IFFALSE 23344
// SetLives ( i , 600 ) ;
23330: LD_VAR 0 1
23334: PPUSH
23335: LD_INT 600
23337: PPUSH
23338: CALL_OW 234
23342: GO 23327
23344: POP
23345: POP
// end ;
23346: PPOPN 2
23348: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23349: LD_INT 0
23351: PPUSH
// case cmd of 301 :
23352: LD_VAR 0 1
23356: PUSH
23357: LD_INT 301
23359: DOUBLE
23360: EQUAL
23361: IFTRUE 23365
23363: GO 23397
23365: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23366: LD_VAR 0 6
23370: PPUSH
23371: LD_VAR 0 7
23375: PPUSH
23376: LD_VAR 0 8
23380: PPUSH
23381: LD_VAR 0 4
23385: PPUSH
23386: LD_VAR 0 5
23390: PPUSH
23391: CALL 24598 0 5
23395: GO 23518
23397: LD_INT 302
23399: DOUBLE
23400: EQUAL
23401: IFTRUE 23405
23403: GO 23442
23405: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23406: LD_VAR 0 6
23410: PPUSH
23411: LD_VAR 0 7
23415: PPUSH
23416: LD_VAR 0 8
23420: PPUSH
23421: LD_VAR 0 9
23425: PPUSH
23426: LD_VAR 0 4
23430: PPUSH
23431: LD_VAR 0 5
23435: PPUSH
23436: CALL 24689 0 6
23440: GO 23518
23442: LD_INT 303
23444: DOUBLE
23445: EQUAL
23446: IFTRUE 23450
23448: GO 23487
23450: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23451: LD_VAR 0 6
23455: PPUSH
23456: LD_VAR 0 7
23460: PPUSH
23461: LD_VAR 0 8
23465: PPUSH
23466: LD_VAR 0 9
23470: PPUSH
23471: LD_VAR 0 4
23475: PPUSH
23476: LD_VAR 0 5
23480: PPUSH
23481: CALL 23523 0 6
23485: GO 23518
23487: LD_INT 304
23489: DOUBLE
23490: EQUAL
23491: IFTRUE 23495
23493: GO 23517
23495: POP
// hHackTeleport ( unit , x , y ) ; end ;
23496: LD_VAR 0 2
23500: PPUSH
23501: LD_VAR 0 4
23505: PPUSH
23506: LD_VAR 0 5
23510: PPUSH
23511: CALL 25282 0 3
23515: GO 23518
23517: POP
// end ;
23518: LD_VAR 0 12
23522: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23523: LD_INT 0
23525: PPUSH
23526: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23527: LD_VAR 0 1
23531: PUSH
23532: LD_INT 1
23534: LESS
23535: PUSH
23536: LD_VAR 0 1
23540: PUSH
23541: LD_INT 3
23543: GREATER
23544: OR
23545: PUSH
23546: LD_VAR 0 5
23550: PPUSH
23551: LD_VAR 0 6
23555: PPUSH
23556: CALL_OW 428
23560: OR
23561: IFFALSE 23565
// exit ;
23563: GO 24285
// uc_side := your_side ;
23565: LD_ADDR_OWVAR 20
23569: PUSH
23570: LD_OWVAR 2
23574: ST_TO_ADDR
// uc_nation := nation ;
23575: LD_ADDR_OWVAR 21
23579: PUSH
23580: LD_VAR 0 1
23584: ST_TO_ADDR
// bc_level = 1 ;
23585: LD_ADDR_OWVAR 43
23589: PUSH
23590: LD_INT 1
23592: ST_TO_ADDR
// case btype of 1 :
23593: LD_VAR 0 2
23597: PUSH
23598: LD_INT 1
23600: DOUBLE
23601: EQUAL
23602: IFTRUE 23606
23604: GO 23617
23606: POP
// bc_type := b_depot ; 2 :
23607: LD_ADDR_OWVAR 42
23611: PUSH
23612: LD_INT 0
23614: ST_TO_ADDR
23615: GO 24229
23617: LD_INT 2
23619: DOUBLE
23620: EQUAL
23621: IFTRUE 23625
23623: GO 23636
23625: POP
// bc_type := b_warehouse ; 3 :
23626: LD_ADDR_OWVAR 42
23630: PUSH
23631: LD_INT 1
23633: ST_TO_ADDR
23634: GO 24229
23636: LD_INT 3
23638: DOUBLE
23639: EQUAL
23640: IFTRUE 23644
23642: GO 23655
23644: POP
// bc_type := b_lab ; 4 .. 9 :
23645: LD_ADDR_OWVAR 42
23649: PUSH
23650: LD_INT 6
23652: ST_TO_ADDR
23653: GO 24229
23655: LD_INT 4
23657: DOUBLE
23658: GREATEREQUAL
23659: IFFALSE 23667
23661: LD_INT 9
23663: DOUBLE
23664: LESSEQUAL
23665: IFTRUE 23669
23667: GO 23721
23669: POP
// begin bc_type := b_lab_half ;
23670: LD_ADDR_OWVAR 42
23674: PUSH
23675: LD_INT 7
23677: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23678: LD_ADDR_OWVAR 44
23682: PUSH
23683: LD_INT 10
23685: PUSH
23686: LD_INT 11
23688: PUSH
23689: LD_INT 12
23691: PUSH
23692: LD_INT 15
23694: PUSH
23695: LD_INT 14
23697: PUSH
23698: LD_INT 13
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: PUSH
23709: LD_VAR 0 2
23713: PUSH
23714: LD_INT 3
23716: MINUS
23717: ARRAY
23718: ST_TO_ADDR
// end ; 10 .. 13 :
23719: GO 24229
23721: LD_INT 10
23723: DOUBLE
23724: GREATEREQUAL
23725: IFFALSE 23733
23727: LD_INT 13
23729: DOUBLE
23730: LESSEQUAL
23731: IFTRUE 23735
23733: GO 23812
23735: POP
// begin bc_type := b_lab_full ;
23736: LD_ADDR_OWVAR 42
23740: PUSH
23741: LD_INT 8
23743: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23744: LD_ADDR_OWVAR 44
23748: PUSH
23749: LD_INT 10
23751: PUSH
23752: LD_INT 12
23754: PUSH
23755: LD_INT 14
23757: PUSH
23758: LD_INT 13
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: PUSH
23767: LD_VAR 0 2
23771: PUSH
23772: LD_INT 9
23774: MINUS
23775: ARRAY
23776: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23777: LD_ADDR_OWVAR 45
23781: PUSH
23782: LD_INT 11
23784: PUSH
23785: LD_INT 15
23787: PUSH
23788: LD_INT 12
23790: PUSH
23791: LD_INT 15
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: PUSH
23800: LD_VAR 0 2
23804: PUSH
23805: LD_INT 9
23807: MINUS
23808: ARRAY
23809: ST_TO_ADDR
// end ; 14 :
23810: GO 24229
23812: LD_INT 14
23814: DOUBLE
23815: EQUAL
23816: IFTRUE 23820
23818: GO 23831
23820: POP
// bc_type := b_workshop ; 15 :
23821: LD_ADDR_OWVAR 42
23825: PUSH
23826: LD_INT 2
23828: ST_TO_ADDR
23829: GO 24229
23831: LD_INT 15
23833: DOUBLE
23834: EQUAL
23835: IFTRUE 23839
23837: GO 23850
23839: POP
// bc_type := b_factory ; 16 :
23840: LD_ADDR_OWVAR 42
23844: PUSH
23845: LD_INT 3
23847: ST_TO_ADDR
23848: GO 24229
23850: LD_INT 16
23852: DOUBLE
23853: EQUAL
23854: IFTRUE 23858
23856: GO 23869
23858: POP
// bc_type := b_ext_gun ; 17 :
23859: LD_ADDR_OWVAR 42
23863: PUSH
23864: LD_INT 17
23866: ST_TO_ADDR
23867: GO 24229
23869: LD_INT 17
23871: DOUBLE
23872: EQUAL
23873: IFTRUE 23877
23875: GO 23905
23877: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23878: LD_ADDR_OWVAR 42
23882: PUSH
23883: LD_INT 19
23885: PUSH
23886: LD_INT 23
23888: PUSH
23889: LD_INT 19
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: LIST
23896: PUSH
23897: LD_VAR 0 1
23901: ARRAY
23902: ST_TO_ADDR
23903: GO 24229
23905: LD_INT 18
23907: DOUBLE
23908: EQUAL
23909: IFTRUE 23913
23911: GO 23924
23913: POP
// bc_type := b_ext_radar ; 19 :
23914: LD_ADDR_OWVAR 42
23918: PUSH
23919: LD_INT 20
23921: ST_TO_ADDR
23922: GO 24229
23924: LD_INT 19
23926: DOUBLE
23927: EQUAL
23928: IFTRUE 23932
23930: GO 23943
23932: POP
// bc_type := b_ext_radio ; 20 :
23933: LD_ADDR_OWVAR 42
23937: PUSH
23938: LD_INT 22
23940: ST_TO_ADDR
23941: GO 24229
23943: LD_INT 20
23945: DOUBLE
23946: EQUAL
23947: IFTRUE 23951
23949: GO 23962
23951: POP
// bc_type := b_ext_siberium ; 21 :
23952: LD_ADDR_OWVAR 42
23956: PUSH
23957: LD_INT 21
23959: ST_TO_ADDR
23960: GO 24229
23962: LD_INT 21
23964: DOUBLE
23965: EQUAL
23966: IFTRUE 23970
23968: GO 23981
23970: POP
// bc_type := b_ext_computer ; 22 :
23971: LD_ADDR_OWVAR 42
23975: PUSH
23976: LD_INT 24
23978: ST_TO_ADDR
23979: GO 24229
23981: LD_INT 22
23983: DOUBLE
23984: EQUAL
23985: IFTRUE 23989
23987: GO 24000
23989: POP
// bc_type := b_ext_track ; 23 :
23990: LD_ADDR_OWVAR 42
23994: PUSH
23995: LD_INT 16
23997: ST_TO_ADDR
23998: GO 24229
24000: LD_INT 23
24002: DOUBLE
24003: EQUAL
24004: IFTRUE 24008
24006: GO 24019
24008: POP
// bc_type := b_ext_laser ; 24 :
24009: LD_ADDR_OWVAR 42
24013: PUSH
24014: LD_INT 25
24016: ST_TO_ADDR
24017: GO 24229
24019: LD_INT 24
24021: DOUBLE
24022: EQUAL
24023: IFTRUE 24027
24025: GO 24038
24027: POP
// bc_type := b_control_tower ; 25 :
24028: LD_ADDR_OWVAR 42
24032: PUSH
24033: LD_INT 36
24035: ST_TO_ADDR
24036: GO 24229
24038: LD_INT 25
24040: DOUBLE
24041: EQUAL
24042: IFTRUE 24046
24044: GO 24057
24046: POP
// bc_type := b_breastwork ; 26 :
24047: LD_ADDR_OWVAR 42
24051: PUSH
24052: LD_INT 31
24054: ST_TO_ADDR
24055: GO 24229
24057: LD_INT 26
24059: DOUBLE
24060: EQUAL
24061: IFTRUE 24065
24063: GO 24076
24065: POP
// bc_type := b_bunker ; 27 :
24066: LD_ADDR_OWVAR 42
24070: PUSH
24071: LD_INT 32
24073: ST_TO_ADDR
24074: GO 24229
24076: LD_INT 27
24078: DOUBLE
24079: EQUAL
24080: IFTRUE 24084
24082: GO 24095
24084: POP
// bc_type := b_turret ; 28 :
24085: LD_ADDR_OWVAR 42
24089: PUSH
24090: LD_INT 33
24092: ST_TO_ADDR
24093: GO 24229
24095: LD_INT 28
24097: DOUBLE
24098: EQUAL
24099: IFTRUE 24103
24101: GO 24114
24103: POP
// bc_type := b_armoury ; 29 :
24104: LD_ADDR_OWVAR 42
24108: PUSH
24109: LD_INT 4
24111: ST_TO_ADDR
24112: GO 24229
24114: LD_INT 29
24116: DOUBLE
24117: EQUAL
24118: IFTRUE 24122
24120: GO 24133
24122: POP
// bc_type := b_barracks ; 30 :
24123: LD_ADDR_OWVAR 42
24127: PUSH
24128: LD_INT 5
24130: ST_TO_ADDR
24131: GO 24229
24133: LD_INT 30
24135: DOUBLE
24136: EQUAL
24137: IFTRUE 24141
24139: GO 24152
24141: POP
// bc_type := b_solar_power ; 31 :
24142: LD_ADDR_OWVAR 42
24146: PUSH
24147: LD_INT 27
24149: ST_TO_ADDR
24150: GO 24229
24152: LD_INT 31
24154: DOUBLE
24155: EQUAL
24156: IFTRUE 24160
24158: GO 24171
24160: POP
// bc_type := b_oil_power ; 32 :
24161: LD_ADDR_OWVAR 42
24165: PUSH
24166: LD_INT 26
24168: ST_TO_ADDR
24169: GO 24229
24171: LD_INT 32
24173: DOUBLE
24174: EQUAL
24175: IFTRUE 24179
24177: GO 24190
24179: POP
// bc_type := b_siberite_power ; 33 :
24180: LD_ADDR_OWVAR 42
24184: PUSH
24185: LD_INT 28
24187: ST_TO_ADDR
24188: GO 24229
24190: LD_INT 33
24192: DOUBLE
24193: EQUAL
24194: IFTRUE 24198
24196: GO 24209
24198: POP
// bc_type := b_oil_mine ; 34 :
24199: LD_ADDR_OWVAR 42
24203: PUSH
24204: LD_INT 29
24206: ST_TO_ADDR
24207: GO 24229
24209: LD_INT 34
24211: DOUBLE
24212: EQUAL
24213: IFTRUE 24217
24215: GO 24228
24217: POP
// bc_type := b_siberite_mine ; end ;
24218: LD_ADDR_OWVAR 42
24222: PUSH
24223: LD_INT 30
24225: ST_TO_ADDR
24226: GO 24229
24228: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24229: LD_ADDR_VAR 0 8
24233: PUSH
24234: LD_VAR 0 5
24238: PPUSH
24239: LD_VAR 0 6
24243: PPUSH
24244: LD_VAR 0 3
24248: PPUSH
24249: CALL_OW 47
24253: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24254: LD_OWVAR 42
24258: PUSH
24259: LD_INT 32
24261: PUSH
24262: LD_INT 33
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: IN
24269: IFFALSE 24285
// PlaceWeaponTurret ( b , weapon ) ;
24271: LD_VAR 0 8
24275: PPUSH
24276: LD_VAR 0 4
24280: PPUSH
24281: CALL_OW 431
// end ;
24285: LD_VAR 0 7
24289: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24290: LD_INT 0
24292: PPUSH
24293: PPUSH
24294: PPUSH
24295: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24296: LD_ADDR_VAR 0 4
24300: PUSH
24301: LD_INT 22
24303: PUSH
24304: LD_OWVAR 2
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 2
24315: PUSH
24316: LD_INT 30
24318: PUSH
24319: LD_INT 0
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 30
24328: PUSH
24329: LD_INT 1
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: LIST
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PPUSH
24345: CALL_OW 69
24349: ST_TO_ADDR
// if not tmp then
24350: LD_VAR 0 4
24354: NOT
24355: IFFALSE 24359
// exit ;
24357: GO 24418
// for i in tmp do
24359: LD_ADDR_VAR 0 2
24363: PUSH
24364: LD_VAR 0 4
24368: PUSH
24369: FOR_IN
24370: IFFALSE 24416
// for j = 1 to 3 do
24372: LD_ADDR_VAR 0 3
24376: PUSH
24377: DOUBLE
24378: LD_INT 1
24380: DEC
24381: ST_TO_ADDR
24382: LD_INT 3
24384: PUSH
24385: FOR_TO
24386: IFFALSE 24412
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24388: LD_VAR 0 2
24392: PPUSH
24393: CALL_OW 274
24397: PPUSH
24398: LD_VAR 0 3
24402: PPUSH
24403: LD_INT 99999
24405: PPUSH
24406: CALL_OW 277
24410: GO 24385
24412: POP
24413: POP
24414: GO 24369
24416: POP
24417: POP
// end ;
24418: LD_VAR 0 1
24422: RET
// export function hHackSetLevel10 ; var i , j ; begin
24423: LD_INT 0
24425: PPUSH
24426: PPUSH
24427: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24428: LD_ADDR_VAR 0 2
24432: PUSH
24433: LD_INT 21
24435: PUSH
24436: LD_INT 1
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PPUSH
24443: CALL_OW 69
24447: PUSH
24448: FOR_IN
24449: IFFALSE 24501
// if IsSelected ( i ) then
24451: LD_VAR 0 2
24455: PPUSH
24456: CALL_OW 306
24460: IFFALSE 24499
// begin for j := 1 to 4 do
24462: LD_ADDR_VAR 0 3
24466: PUSH
24467: DOUBLE
24468: LD_INT 1
24470: DEC
24471: ST_TO_ADDR
24472: LD_INT 4
24474: PUSH
24475: FOR_TO
24476: IFFALSE 24497
// SetSkill ( i , j , 10 ) ;
24478: LD_VAR 0 2
24482: PPUSH
24483: LD_VAR 0 3
24487: PPUSH
24488: LD_INT 10
24490: PPUSH
24491: CALL_OW 237
24495: GO 24475
24497: POP
24498: POP
// end ;
24499: GO 24448
24501: POP
24502: POP
// end ;
24503: LD_VAR 0 1
24507: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24508: LD_INT 0
24510: PPUSH
24511: PPUSH
24512: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24513: LD_ADDR_VAR 0 2
24517: PUSH
24518: LD_INT 22
24520: PUSH
24521: LD_OWVAR 2
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 21
24532: PUSH
24533: LD_INT 1
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PPUSH
24544: CALL_OW 69
24548: PUSH
24549: FOR_IN
24550: IFFALSE 24591
// begin for j := 1 to 4 do
24552: LD_ADDR_VAR 0 3
24556: PUSH
24557: DOUBLE
24558: LD_INT 1
24560: DEC
24561: ST_TO_ADDR
24562: LD_INT 4
24564: PUSH
24565: FOR_TO
24566: IFFALSE 24587
// SetSkill ( i , j , 10 ) ;
24568: LD_VAR 0 2
24572: PPUSH
24573: LD_VAR 0 3
24577: PPUSH
24578: LD_INT 10
24580: PPUSH
24581: CALL_OW 237
24585: GO 24565
24587: POP
24588: POP
// end ;
24589: GO 24549
24591: POP
24592: POP
// end ;
24593: LD_VAR 0 1
24597: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24598: LD_INT 0
24600: PPUSH
// uc_side := your_side ;
24601: LD_ADDR_OWVAR 20
24605: PUSH
24606: LD_OWVAR 2
24610: ST_TO_ADDR
// uc_nation := nation ;
24611: LD_ADDR_OWVAR 21
24615: PUSH
24616: LD_VAR 0 1
24620: ST_TO_ADDR
// InitHc ;
24621: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24625: LD_INT 0
24627: PPUSH
24628: LD_VAR 0 2
24632: PPUSH
24633: LD_VAR 0 3
24637: PPUSH
24638: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24642: LD_VAR 0 4
24646: PPUSH
24647: LD_VAR 0 5
24651: PPUSH
24652: CALL_OW 428
24656: PUSH
24657: LD_INT 0
24659: EQUAL
24660: IFFALSE 24684
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24662: CALL_OW 44
24666: PPUSH
24667: LD_VAR 0 4
24671: PPUSH
24672: LD_VAR 0 5
24676: PPUSH
24677: LD_INT 1
24679: PPUSH
24680: CALL_OW 48
// end ;
24684: LD_VAR 0 6
24688: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24689: LD_INT 0
24691: PPUSH
24692: PPUSH
// uc_side := your_side ;
24693: LD_ADDR_OWVAR 20
24697: PUSH
24698: LD_OWVAR 2
24702: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24703: LD_VAR 0 1
24707: PUSH
24708: LD_INT 1
24710: PUSH
24711: LD_INT 2
24713: PUSH
24714: LD_INT 3
24716: PUSH
24717: LD_INT 4
24719: PUSH
24720: LD_INT 5
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: IN
24730: IFFALSE 24742
// uc_nation := nation_american else
24732: LD_ADDR_OWVAR 21
24736: PUSH
24737: LD_INT 1
24739: ST_TO_ADDR
24740: GO 24785
// if chassis in [ 11 , 12 , 13 , 14 ] then
24742: LD_VAR 0 1
24746: PUSH
24747: LD_INT 11
24749: PUSH
24750: LD_INT 12
24752: PUSH
24753: LD_INT 13
24755: PUSH
24756: LD_INT 14
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: IN
24765: IFFALSE 24777
// uc_nation := nation_arabian else
24767: LD_ADDR_OWVAR 21
24771: PUSH
24772: LD_INT 2
24774: ST_TO_ADDR
24775: GO 24785
// uc_nation := nation_russian ;
24777: LD_ADDR_OWVAR 21
24781: PUSH
24782: LD_INT 3
24784: ST_TO_ADDR
// vc_chassis := chassis ;
24785: LD_ADDR_OWVAR 37
24789: PUSH
24790: LD_VAR 0 1
24794: ST_TO_ADDR
// vc_engine := engine ;
24795: LD_ADDR_OWVAR 39
24799: PUSH
24800: LD_VAR 0 2
24804: ST_TO_ADDR
// vc_control := control ;
24805: LD_ADDR_OWVAR 38
24809: PUSH
24810: LD_VAR 0 3
24814: ST_TO_ADDR
// vc_weapon := weapon ;
24815: LD_ADDR_OWVAR 40
24819: PUSH
24820: LD_VAR 0 4
24824: ST_TO_ADDR
// un := CreateVehicle ;
24825: LD_ADDR_VAR 0 8
24829: PUSH
24830: CALL_OW 45
24834: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24835: LD_VAR 0 8
24839: PPUSH
24840: LD_INT 0
24842: PPUSH
24843: LD_INT 5
24845: PPUSH
24846: CALL_OW 12
24850: PPUSH
24851: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24855: LD_VAR 0 8
24859: PPUSH
24860: LD_VAR 0 5
24864: PPUSH
24865: LD_VAR 0 6
24869: PPUSH
24870: LD_INT 1
24872: PPUSH
24873: CALL_OW 48
// end ;
24877: LD_VAR 0 7
24881: RET
// export hInvincible ; every 1 do
24882: GO 24884
24884: DISABLE
// hInvincible := [ ] ;
24885: LD_ADDR_EXP 122
24889: PUSH
24890: EMPTY
24891: ST_TO_ADDR
24892: END
// every 10 do var i ;
24893: GO 24895
24895: DISABLE
24896: LD_INT 0
24898: PPUSH
// begin enable ;
24899: ENABLE
// if not hInvincible then
24900: LD_EXP 122
24904: NOT
24905: IFFALSE 24909
// exit ;
24907: GO 24953
// for i in hInvincible do
24909: LD_ADDR_VAR 0 1
24913: PUSH
24914: LD_EXP 122
24918: PUSH
24919: FOR_IN
24920: IFFALSE 24951
// if GetLives ( i ) < 1000 then
24922: LD_VAR 0 1
24926: PPUSH
24927: CALL_OW 256
24931: PUSH
24932: LD_INT 1000
24934: LESS
24935: IFFALSE 24949
// SetLives ( i , 1000 ) ;
24937: LD_VAR 0 1
24941: PPUSH
24942: LD_INT 1000
24944: PPUSH
24945: CALL_OW 234
24949: GO 24919
24951: POP
24952: POP
// end ;
24953: PPOPN 1
24955: END
// export function hHackInvincible ; var i ; begin
24956: LD_INT 0
24958: PPUSH
24959: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24960: LD_ADDR_VAR 0 2
24964: PUSH
24965: LD_INT 2
24967: PUSH
24968: LD_INT 21
24970: PUSH
24971: LD_INT 1
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 21
24980: PUSH
24981: LD_INT 2
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: LIST
24992: PPUSH
24993: CALL_OW 69
24997: PUSH
24998: FOR_IN
24999: IFFALSE 25060
// if IsSelected ( i ) then
25001: LD_VAR 0 2
25005: PPUSH
25006: CALL_OW 306
25010: IFFALSE 25058
// begin if i in hInvincible then
25012: LD_VAR 0 2
25016: PUSH
25017: LD_EXP 122
25021: IN
25022: IFFALSE 25042
// hInvincible := hInvincible diff i else
25024: LD_ADDR_EXP 122
25028: PUSH
25029: LD_EXP 122
25033: PUSH
25034: LD_VAR 0 2
25038: DIFF
25039: ST_TO_ADDR
25040: GO 25058
// hInvincible := hInvincible union i ;
25042: LD_ADDR_EXP 122
25046: PUSH
25047: LD_EXP 122
25051: PUSH
25052: LD_VAR 0 2
25056: UNION
25057: ST_TO_ADDR
// end ;
25058: GO 24998
25060: POP
25061: POP
// end ;
25062: LD_VAR 0 1
25066: RET
// export function hHackInvisible ; var i , j ; begin
25067: LD_INT 0
25069: PPUSH
25070: PPUSH
25071: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25072: LD_ADDR_VAR 0 2
25076: PUSH
25077: LD_INT 21
25079: PUSH
25080: LD_INT 1
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PPUSH
25087: CALL_OW 69
25091: PUSH
25092: FOR_IN
25093: IFFALSE 25117
// if IsSelected ( i ) then
25095: LD_VAR 0 2
25099: PPUSH
25100: CALL_OW 306
25104: IFFALSE 25115
// ComForceInvisible ( i ) ;
25106: LD_VAR 0 2
25110: PPUSH
25111: CALL_OW 496
25115: GO 25092
25117: POP
25118: POP
// end ;
25119: LD_VAR 0 1
25123: RET
// export function hHackChangeYourSide ; begin
25124: LD_INT 0
25126: PPUSH
// if your_side = 8 then
25127: LD_OWVAR 2
25131: PUSH
25132: LD_INT 8
25134: EQUAL
25135: IFFALSE 25147
// your_side := 0 else
25137: LD_ADDR_OWVAR 2
25141: PUSH
25142: LD_INT 0
25144: ST_TO_ADDR
25145: GO 25161
// your_side := your_side + 1 ;
25147: LD_ADDR_OWVAR 2
25151: PUSH
25152: LD_OWVAR 2
25156: PUSH
25157: LD_INT 1
25159: PLUS
25160: ST_TO_ADDR
// end ;
25161: LD_VAR 0 1
25165: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25166: LD_INT 0
25168: PPUSH
25169: PPUSH
25170: PPUSH
// for i in all_units do
25171: LD_ADDR_VAR 0 2
25175: PUSH
25176: LD_OWVAR 3
25180: PUSH
25181: FOR_IN
25182: IFFALSE 25260
// if IsSelected ( i ) then
25184: LD_VAR 0 2
25188: PPUSH
25189: CALL_OW 306
25193: IFFALSE 25258
// begin j := GetSide ( i ) ;
25195: LD_ADDR_VAR 0 3
25199: PUSH
25200: LD_VAR 0 2
25204: PPUSH
25205: CALL_OW 255
25209: ST_TO_ADDR
// if j = 8 then
25210: LD_VAR 0 3
25214: PUSH
25215: LD_INT 8
25217: EQUAL
25218: IFFALSE 25230
// j := 0 else
25220: LD_ADDR_VAR 0 3
25224: PUSH
25225: LD_INT 0
25227: ST_TO_ADDR
25228: GO 25244
// j := j + 1 ;
25230: LD_ADDR_VAR 0 3
25234: PUSH
25235: LD_VAR 0 3
25239: PUSH
25240: LD_INT 1
25242: PLUS
25243: ST_TO_ADDR
// SetSide ( i , j ) ;
25244: LD_VAR 0 2
25248: PPUSH
25249: LD_VAR 0 3
25253: PPUSH
25254: CALL_OW 235
// end ;
25258: GO 25181
25260: POP
25261: POP
// end ;
25262: LD_VAR 0 1
25266: RET
// export function hHackFog ; begin
25267: LD_INT 0
25269: PPUSH
// FogOff ( true ) ;
25270: LD_INT 1
25272: PPUSH
25273: CALL_OW 344
// end ;
25277: LD_VAR 0 1
25281: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25282: LD_INT 0
25284: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25285: LD_VAR 0 1
25289: PPUSH
25290: LD_VAR 0 2
25294: PPUSH
25295: LD_VAR 0 3
25299: PPUSH
25300: LD_INT 1
25302: PPUSH
25303: LD_INT 1
25305: PPUSH
25306: CALL_OW 483
// CenterOnXY ( x , y ) ;
25310: LD_VAR 0 2
25314: PPUSH
25315: LD_VAR 0 3
25319: PPUSH
25320: CALL_OW 84
// end ; end_of_file
25324: LD_VAR 0 4
25328: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25329: LD_INT 0
25331: PPUSH
25332: PPUSH
25333: PPUSH
25334: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25335: LD_VAR 0 1
25339: PPUSH
25340: CALL_OW 264
25344: PUSH
25345: LD_EXP 49
25349: EQUAL
25350: IFFALSE 25422
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25352: LD_INT 68
25354: PPUSH
25355: LD_VAR 0 1
25359: PPUSH
25360: CALL_OW 255
25364: PPUSH
25365: CALL_OW 321
25369: PUSH
25370: LD_INT 2
25372: EQUAL
25373: IFFALSE 25385
// eff := 70 else
25375: LD_ADDR_VAR 0 4
25379: PUSH
25380: LD_INT 70
25382: ST_TO_ADDR
25383: GO 25393
// eff := 30 ;
25385: LD_ADDR_VAR 0 4
25389: PUSH
25390: LD_INT 30
25392: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25393: LD_VAR 0 1
25397: PPUSH
25398: CALL_OW 250
25402: PPUSH
25403: LD_VAR 0 1
25407: PPUSH
25408: CALL_OW 251
25412: PPUSH
25413: LD_VAR 0 4
25417: PPUSH
25418: CALL_OW 495
// end ; end ;
25422: LD_VAR 0 2
25426: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25427: LD_INT 0
25429: PPUSH
// end ;
25430: LD_VAR 0 4
25434: RET
// export function SOS_Command ( cmd ) ; begin
25435: LD_INT 0
25437: PPUSH
// end ;
25438: LD_VAR 0 2
25442: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25443: LD_INT 0
25445: PPUSH
// end ;
25446: LD_VAR 0 6
25450: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25451: LD_INT 0
25453: PPUSH
25454: PPUSH
// if not vehicle or not factory then
25455: LD_VAR 0 1
25459: NOT
25460: PUSH
25461: LD_VAR 0 2
25465: NOT
25466: OR
25467: IFFALSE 25471
// exit ;
25469: GO 25702
// if factoryWaypoints >= factory then
25471: LD_EXP 123
25475: PUSH
25476: LD_VAR 0 2
25480: GREATEREQUAL
25481: IFFALSE 25702
// if factoryWaypoints [ factory ] then
25483: LD_EXP 123
25487: PUSH
25488: LD_VAR 0 2
25492: ARRAY
25493: IFFALSE 25702
// begin if GetControl ( vehicle ) = control_manual then
25495: LD_VAR 0 1
25499: PPUSH
25500: CALL_OW 263
25504: PUSH
25505: LD_INT 1
25507: EQUAL
25508: IFFALSE 25589
// begin driver := IsDrivenBy ( vehicle ) ;
25510: LD_ADDR_VAR 0 4
25514: PUSH
25515: LD_VAR 0 1
25519: PPUSH
25520: CALL_OW 311
25524: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25525: LD_VAR 0 4
25529: PPUSH
25530: LD_EXP 123
25534: PUSH
25535: LD_VAR 0 2
25539: ARRAY
25540: PUSH
25541: LD_INT 3
25543: ARRAY
25544: PPUSH
25545: LD_EXP 123
25549: PUSH
25550: LD_VAR 0 2
25554: ARRAY
25555: PUSH
25556: LD_INT 4
25558: ARRAY
25559: PPUSH
25560: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25564: LD_VAR 0 4
25568: PPUSH
25569: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25573: LD_VAR 0 4
25577: PPUSH
25578: LD_VAR 0 2
25582: PPUSH
25583: CALL_OW 180
// end else
25587: GO 25702
// if GetControl ( vehicle ) = control_remote then
25589: LD_VAR 0 1
25593: PPUSH
25594: CALL_OW 263
25598: PUSH
25599: LD_INT 2
25601: EQUAL
25602: IFFALSE 25663
// begin wait ( 0 0$2 ) ;
25604: LD_INT 70
25606: PPUSH
25607: CALL_OW 67
// if Connect ( vehicle ) then
25611: LD_VAR 0 1
25615: PPUSH
25616: CALL 38079 0 1
25620: IFFALSE 25661
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25622: LD_VAR 0 1
25626: PPUSH
25627: LD_EXP 123
25631: PUSH
25632: LD_VAR 0 2
25636: ARRAY
25637: PUSH
25638: LD_INT 3
25640: ARRAY
25641: PPUSH
25642: LD_EXP 123
25646: PUSH
25647: LD_VAR 0 2
25651: ARRAY
25652: PUSH
25653: LD_INT 4
25655: ARRAY
25656: PPUSH
25657: CALL_OW 171
// end else
25661: GO 25702
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25663: LD_VAR 0 1
25667: PPUSH
25668: LD_EXP 123
25672: PUSH
25673: LD_VAR 0 2
25677: ARRAY
25678: PUSH
25679: LD_INT 3
25681: ARRAY
25682: PPUSH
25683: LD_EXP 123
25687: PUSH
25688: LD_VAR 0 2
25692: ARRAY
25693: PUSH
25694: LD_INT 4
25696: ARRAY
25697: PPUSH
25698: CALL_OW 171
// end ; end ;
25702: LD_VAR 0 3
25706: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25707: LD_INT 0
25709: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25710: LD_VAR 0 1
25714: PUSH
25715: LD_INT 250
25717: EQUAL
25718: PUSH
25719: LD_VAR 0 2
25723: PPUSH
25724: CALL_OW 264
25728: PUSH
25729: LD_EXP 52
25733: EQUAL
25734: AND
25735: IFFALSE 25756
// MinerPlaceMine ( unit , x , y ) ;
25737: LD_VAR 0 2
25741: PPUSH
25742: LD_VAR 0 4
25746: PPUSH
25747: LD_VAR 0 5
25751: PPUSH
25752: CALL 28484 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25756: LD_VAR 0 1
25760: PUSH
25761: LD_INT 251
25763: EQUAL
25764: PUSH
25765: LD_VAR 0 2
25769: PPUSH
25770: CALL_OW 264
25774: PUSH
25775: LD_EXP 52
25779: EQUAL
25780: AND
25781: IFFALSE 25802
// MinerDetonateMine ( unit , x , y ) ;
25783: LD_VAR 0 2
25787: PPUSH
25788: LD_VAR 0 4
25792: PPUSH
25793: LD_VAR 0 5
25797: PPUSH
25798: CALL 28761 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25802: LD_VAR 0 1
25806: PUSH
25807: LD_INT 252
25809: EQUAL
25810: PUSH
25811: LD_VAR 0 2
25815: PPUSH
25816: CALL_OW 264
25820: PUSH
25821: LD_EXP 52
25825: EQUAL
25826: AND
25827: IFFALSE 25848
// MinerCreateMinefield ( unit , x , y ) ;
25829: LD_VAR 0 2
25833: PPUSH
25834: LD_VAR 0 4
25838: PPUSH
25839: LD_VAR 0 5
25843: PPUSH
25844: CALL 29178 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25848: LD_VAR 0 1
25852: PUSH
25853: LD_INT 253
25855: EQUAL
25856: PUSH
25857: LD_VAR 0 2
25861: PPUSH
25862: CALL_OW 257
25866: PUSH
25867: LD_INT 5
25869: EQUAL
25870: AND
25871: IFFALSE 25892
// ComBinocular ( unit , x , y ) ;
25873: LD_VAR 0 2
25877: PPUSH
25878: LD_VAR 0 4
25882: PPUSH
25883: LD_VAR 0 5
25887: PPUSH
25888: CALL 29549 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25892: LD_VAR 0 1
25896: PUSH
25897: LD_INT 254
25899: EQUAL
25900: PUSH
25901: LD_VAR 0 2
25905: PPUSH
25906: CALL_OW 264
25910: PUSH
25911: LD_EXP 47
25915: EQUAL
25916: AND
25917: PUSH
25918: LD_VAR 0 3
25922: PPUSH
25923: CALL_OW 263
25927: PUSH
25928: LD_INT 3
25930: EQUAL
25931: AND
25932: IFFALSE 25948
// HackDestroyVehicle ( unit , selectedUnit ) ;
25934: LD_VAR 0 2
25938: PPUSH
25939: LD_VAR 0 3
25943: PPUSH
25944: CALL 27844 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25948: LD_VAR 0 1
25952: PUSH
25953: LD_INT 255
25955: EQUAL
25956: PUSH
25957: LD_VAR 0 2
25961: PPUSH
25962: CALL_OW 264
25966: PUSH
25967: LD_INT 14
25969: PUSH
25970: LD_INT 53
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: IN
25977: AND
25978: PUSH
25979: LD_VAR 0 4
25983: PPUSH
25984: LD_VAR 0 5
25988: PPUSH
25989: CALL_OW 488
25993: AND
25994: IFFALSE 26018
// CutTreeXYR ( unit , x , y , 12 ) ;
25996: LD_VAR 0 2
26000: PPUSH
26001: LD_VAR 0 4
26005: PPUSH
26006: LD_VAR 0 5
26010: PPUSH
26011: LD_INT 12
26013: PPUSH
26014: CALL 26410 0 4
// if cmd = 256 then
26018: LD_VAR 0 1
26022: PUSH
26023: LD_INT 256
26025: EQUAL
26026: IFFALSE 26047
// SetFactoryWaypoint ( unit , x , y ) ;
26028: LD_VAR 0 2
26032: PPUSH
26033: LD_VAR 0 4
26037: PPUSH
26038: LD_VAR 0 5
26042: PPUSH
26043: CALL 26052 0 3
// end ;
26047: LD_VAR 0 6
26051: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26052: LD_INT 0
26054: PPUSH
26055: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26056: LD_VAR 0 1
26060: NOT
26061: PUSH
26062: LD_VAR 0 2
26066: PPUSH
26067: LD_VAR 0 3
26071: PPUSH
26072: CALL_OW 488
26076: NOT
26077: OR
26078: PUSH
26079: LD_VAR 0 1
26083: PPUSH
26084: CALL_OW 266
26088: PUSH
26089: LD_INT 3
26091: NONEQUAL
26092: PUSH
26093: LD_VAR 0 1
26097: PPUSH
26098: CALL_OW 247
26102: PUSH
26103: LD_INT 1
26105: EQUAL
26106: NOT
26107: AND
26108: OR
26109: IFFALSE 26113
// exit ;
26111: GO 26262
// if GetType ( factory ) = unit_human then
26113: LD_VAR 0 1
26117: PPUSH
26118: CALL_OW 247
26122: PUSH
26123: LD_INT 1
26125: EQUAL
26126: IFFALSE 26143
// factory := IsInUnit ( factory ) ;
26128: LD_ADDR_VAR 0 1
26132: PUSH
26133: LD_VAR 0 1
26137: PPUSH
26138: CALL_OW 310
26142: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26143: LD_VAR 0 1
26147: PPUSH
26148: CALL_OW 266
26152: PUSH
26153: LD_INT 3
26155: NONEQUAL
26156: IFFALSE 26160
// exit ;
26158: GO 26262
// if HexInfo ( x , y ) = factory then
26160: LD_VAR 0 2
26164: PPUSH
26165: LD_VAR 0 3
26169: PPUSH
26170: CALL_OW 428
26174: PUSH
26175: LD_VAR 0 1
26179: EQUAL
26180: IFFALSE 26207
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26182: LD_ADDR_EXP 123
26186: PUSH
26187: LD_EXP 123
26191: PPUSH
26192: LD_VAR 0 1
26196: PPUSH
26197: LD_INT 0
26199: PPUSH
26200: CALL_OW 1
26204: ST_TO_ADDR
26205: GO 26258
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26207: LD_ADDR_EXP 123
26211: PUSH
26212: LD_EXP 123
26216: PPUSH
26217: LD_VAR 0 1
26221: PPUSH
26222: LD_VAR 0 1
26226: PPUSH
26227: CALL_OW 255
26231: PUSH
26232: LD_VAR 0 1
26236: PUSH
26237: LD_VAR 0 2
26241: PUSH
26242: LD_VAR 0 3
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: PPUSH
26253: CALL_OW 1
26257: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26258: CALL 26267 0 0
// end ;
26262: LD_VAR 0 4
26266: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
26267: LD_INT 0
26269: PPUSH
26270: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26271: LD_STRING resetFactoryWaypoint();
26273: PPUSH
26274: CALL_OW 559
// if factoryWaypoints then
26278: LD_EXP 123
26282: IFFALSE 26405
// begin for i := 1 to factoryWaypoints do
26284: LD_ADDR_VAR 0 2
26288: PUSH
26289: DOUBLE
26290: LD_INT 1
26292: DEC
26293: ST_TO_ADDR
26294: LD_EXP 123
26298: PUSH
26299: FOR_TO
26300: IFFALSE 26403
// if factoryWaypoints [ i ] then
26302: LD_EXP 123
26306: PUSH
26307: LD_VAR 0 2
26311: ARRAY
26312: IFFALSE 26401
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
26314: LD_STRING setFactoryWaypointXY(
26316: PUSH
26317: LD_EXP 123
26321: PUSH
26322: LD_VAR 0 2
26326: ARRAY
26327: PUSH
26328: LD_INT 1
26330: ARRAY
26331: STR
26332: PUSH
26333: LD_STRING ,
26335: STR
26336: PUSH
26337: LD_EXP 123
26341: PUSH
26342: LD_VAR 0 2
26346: ARRAY
26347: PUSH
26348: LD_INT 2
26350: ARRAY
26351: STR
26352: PUSH
26353: LD_STRING ,
26355: STR
26356: PUSH
26357: LD_EXP 123
26361: PUSH
26362: LD_VAR 0 2
26366: ARRAY
26367: PUSH
26368: LD_INT 3
26370: ARRAY
26371: STR
26372: PUSH
26373: LD_STRING ,
26375: STR
26376: PUSH
26377: LD_EXP 123
26381: PUSH
26382: LD_VAR 0 2
26386: ARRAY
26387: PUSH
26388: LD_INT 4
26390: ARRAY
26391: STR
26392: PUSH
26393: LD_STRING )
26395: STR
26396: PPUSH
26397: CALL_OW 559
26401: GO 26299
26403: POP
26404: POP
// end ; end ;
26405: LD_VAR 0 1
26409: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26410: LD_INT 0
26412: PPUSH
26413: PPUSH
26414: PPUSH
26415: PPUSH
26416: PPUSH
26417: PPUSH
26418: PPUSH
26419: PPUSH
26420: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26421: LD_VAR 0 1
26425: NOT
26426: PUSH
26427: LD_VAR 0 2
26431: PPUSH
26432: LD_VAR 0 3
26436: PPUSH
26437: CALL_OW 488
26441: NOT
26442: OR
26443: PUSH
26444: LD_VAR 0 4
26448: NOT
26449: OR
26450: IFFALSE 26454
// exit ;
26452: GO 26794
// list := [ ] ;
26454: LD_ADDR_VAR 0 13
26458: PUSH
26459: EMPTY
26460: ST_TO_ADDR
// if x - r < 0 then
26461: LD_VAR 0 2
26465: PUSH
26466: LD_VAR 0 4
26470: MINUS
26471: PUSH
26472: LD_INT 0
26474: LESS
26475: IFFALSE 26487
// min_x := 0 else
26477: LD_ADDR_VAR 0 7
26481: PUSH
26482: LD_INT 0
26484: ST_TO_ADDR
26485: GO 26503
// min_x := x - r ;
26487: LD_ADDR_VAR 0 7
26491: PUSH
26492: LD_VAR 0 2
26496: PUSH
26497: LD_VAR 0 4
26501: MINUS
26502: ST_TO_ADDR
// if y - r < 0 then
26503: LD_VAR 0 3
26507: PUSH
26508: LD_VAR 0 4
26512: MINUS
26513: PUSH
26514: LD_INT 0
26516: LESS
26517: IFFALSE 26529
// min_y := 0 else
26519: LD_ADDR_VAR 0 8
26523: PUSH
26524: LD_INT 0
26526: ST_TO_ADDR
26527: GO 26545
// min_y := y - r ;
26529: LD_ADDR_VAR 0 8
26533: PUSH
26534: LD_VAR 0 3
26538: PUSH
26539: LD_VAR 0 4
26543: MINUS
26544: ST_TO_ADDR
// max_x := x + r ;
26545: LD_ADDR_VAR 0 9
26549: PUSH
26550: LD_VAR 0 2
26554: PUSH
26555: LD_VAR 0 4
26559: PLUS
26560: ST_TO_ADDR
// max_y := y + r ;
26561: LD_ADDR_VAR 0 10
26565: PUSH
26566: LD_VAR 0 3
26570: PUSH
26571: LD_VAR 0 4
26575: PLUS
26576: ST_TO_ADDR
// for _x = min_x to max_x do
26577: LD_ADDR_VAR 0 11
26581: PUSH
26582: DOUBLE
26583: LD_VAR 0 7
26587: DEC
26588: ST_TO_ADDR
26589: LD_VAR 0 9
26593: PUSH
26594: FOR_TO
26595: IFFALSE 26712
// for _y = min_y to max_y do
26597: LD_ADDR_VAR 0 12
26601: PUSH
26602: DOUBLE
26603: LD_VAR 0 8
26607: DEC
26608: ST_TO_ADDR
26609: LD_VAR 0 10
26613: PUSH
26614: FOR_TO
26615: IFFALSE 26708
// begin if not ValidHex ( _x , _y ) then
26617: LD_VAR 0 11
26621: PPUSH
26622: LD_VAR 0 12
26626: PPUSH
26627: CALL_OW 488
26631: NOT
26632: IFFALSE 26636
// continue ;
26634: GO 26614
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26636: LD_VAR 0 11
26640: PPUSH
26641: LD_VAR 0 12
26645: PPUSH
26646: CALL_OW 351
26650: PUSH
26651: LD_VAR 0 11
26655: PPUSH
26656: LD_VAR 0 12
26660: PPUSH
26661: CALL_OW 554
26665: AND
26666: IFFALSE 26706
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26668: LD_ADDR_VAR 0 13
26672: PUSH
26673: LD_VAR 0 13
26677: PPUSH
26678: LD_VAR 0 13
26682: PUSH
26683: LD_INT 1
26685: PLUS
26686: PPUSH
26687: LD_VAR 0 11
26691: PUSH
26692: LD_VAR 0 12
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PPUSH
26701: CALL_OW 2
26705: ST_TO_ADDR
// end ;
26706: GO 26614
26708: POP
26709: POP
26710: GO 26594
26712: POP
26713: POP
// if not list then
26714: LD_VAR 0 13
26718: NOT
26719: IFFALSE 26723
// exit ;
26721: GO 26794
// for i in list do
26723: LD_ADDR_VAR 0 6
26727: PUSH
26728: LD_VAR 0 13
26732: PUSH
26733: FOR_IN
26734: IFFALSE 26792
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26736: LD_VAR 0 1
26740: PPUSH
26741: LD_STRING M
26743: PUSH
26744: LD_VAR 0 6
26748: PUSH
26749: LD_INT 1
26751: ARRAY
26752: PUSH
26753: LD_VAR 0 6
26757: PUSH
26758: LD_INT 2
26760: ARRAY
26761: PUSH
26762: LD_INT 0
26764: PUSH
26765: LD_INT 0
26767: PUSH
26768: LD_INT 0
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: PUSH
26783: EMPTY
26784: LIST
26785: PPUSH
26786: CALL_OW 447
26790: GO 26733
26792: POP
26793: POP
// end ;
26794: LD_VAR 0 5
26798: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26799: LD_EXP 124
26803: NOT
26804: IFFALSE 26854
26806: GO 26808
26808: DISABLE
// begin initHack := true ;
26809: LD_ADDR_EXP 124
26813: PUSH
26814: LD_INT 1
26816: ST_TO_ADDR
// hackTanks := [ ] ;
26817: LD_ADDR_EXP 125
26821: PUSH
26822: EMPTY
26823: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26824: LD_ADDR_EXP 126
26828: PUSH
26829: EMPTY
26830: ST_TO_ADDR
// hackLimit := 3 ;
26831: LD_ADDR_EXP 127
26835: PUSH
26836: LD_INT 3
26838: ST_TO_ADDR
// hackDist := 12 ;
26839: LD_ADDR_EXP 128
26843: PUSH
26844: LD_INT 12
26846: ST_TO_ADDR
// hackCounter := [ ] ;
26847: LD_ADDR_EXP 129
26851: PUSH
26852: EMPTY
26853: ST_TO_ADDR
// end ;
26854: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26855: LD_EXP 124
26859: PUSH
26860: LD_INT 34
26862: PUSH
26863: LD_EXP 47
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PPUSH
26872: CALL_OW 69
26876: AND
26877: IFFALSE 27132
26879: GO 26881
26881: DISABLE
26882: LD_INT 0
26884: PPUSH
26885: PPUSH
// begin enable ;
26886: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26887: LD_ADDR_VAR 0 1
26891: PUSH
26892: LD_INT 34
26894: PUSH
26895: LD_EXP 47
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PPUSH
26904: CALL_OW 69
26908: PUSH
26909: FOR_IN
26910: IFFALSE 27130
// begin if not i in hackTanks then
26912: LD_VAR 0 1
26916: PUSH
26917: LD_EXP 125
26921: IN
26922: NOT
26923: IFFALSE 27006
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26925: LD_ADDR_EXP 125
26929: PUSH
26930: LD_EXP 125
26934: PPUSH
26935: LD_EXP 125
26939: PUSH
26940: LD_INT 1
26942: PLUS
26943: PPUSH
26944: LD_VAR 0 1
26948: PPUSH
26949: CALL_OW 1
26953: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26954: LD_ADDR_EXP 126
26958: PUSH
26959: LD_EXP 126
26963: PPUSH
26964: LD_EXP 126
26968: PUSH
26969: LD_INT 1
26971: PLUS
26972: PPUSH
26973: EMPTY
26974: PPUSH
26975: CALL_OW 1
26979: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26980: LD_ADDR_EXP 129
26984: PUSH
26985: LD_EXP 129
26989: PPUSH
26990: LD_EXP 129
26994: PUSH
26995: LD_INT 1
26997: PLUS
26998: PPUSH
26999: EMPTY
27000: PPUSH
27001: CALL_OW 1
27005: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27006: LD_VAR 0 1
27010: PPUSH
27011: CALL_OW 302
27015: NOT
27016: IFFALSE 27029
// begin HackUnlinkAll ( i ) ;
27018: LD_VAR 0 1
27022: PPUSH
27023: CALL 27135 0 1
// continue ;
27027: GO 26909
// end ; HackCheckCapturedStatus ( i ) ;
27029: LD_VAR 0 1
27033: PPUSH
27034: CALL 27578 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27038: LD_ADDR_VAR 0 2
27042: PUSH
27043: LD_INT 81
27045: PUSH
27046: LD_VAR 0 1
27050: PPUSH
27051: CALL_OW 255
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 33
27062: PUSH
27063: LD_INT 3
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 91
27072: PUSH
27073: LD_VAR 0 1
27077: PUSH
27078: LD_EXP 128
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 50
27090: PUSH
27091: EMPTY
27092: LIST
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: PPUSH
27100: CALL_OW 69
27104: ST_TO_ADDR
// if not tmp then
27105: LD_VAR 0 2
27109: NOT
27110: IFFALSE 27114
// continue ;
27112: GO 26909
// HackLink ( i , tmp ) ;
27114: LD_VAR 0 1
27118: PPUSH
27119: LD_VAR 0 2
27123: PPUSH
27124: CALL 27271 0 2
// end ;
27128: GO 26909
27130: POP
27131: POP
// end ;
27132: PPOPN 2
27134: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27135: LD_INT 0
27137: PPUSH
27138: PPUSH
27139: PPUSH
// if not hack in hackTanks then
27140: LD_VAR 0 1
27144: PUSH
27145: LD_EXP 125
27149: IN
27150: NOT
27151: IFFALSE 27155
// exit ;
27153: GO 27266
// index := GetElementIndex ( hackTanks , hack ) ;
27155: LD_ADDR_VAR 0 4
27159: PUSH
27160: LD_EXP 125
27164: PPUSH
27165: LD_VAR 0 1
27169: PPUSH
27170: CALL 34893 0 2
27174: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27175: LD_EXP 126
27179: PUSH
27180: LD_VAR 0 4
27184: ARRAY
27185: IFFALSE 27266
// begin for i in hackTanksCaptured [ index ] do
27187: LD_ADDR_VAR 0 3
27191: PUSH
27192: LD_EXP 126
27196: PUSH
27197: LD_VAR 0 4
27201: ARRAY
27202: PUSH
27203: FOR_IN
27204: IFFALSE 27230
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27206: LD_VAR 0 3
27210: PUSH
27211: LD_INT 1
27213: ARRAY
27214: PPUSH
27215: LD_VAR 0 3
27219: PUSH
27220: LD_INT 2
27222: ARRAY
27223: PPUSH
27224: CALL_OW 235
27228: GO 27203
27230: POP
27231: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27232: LD_ADDR_EXP 126
27236: PUSH
27237: LD_EXP 126
27241: PPUSH
27242: LD_VAR 0 4
27246: PPUSH
27247: EMPTY
27248: PPUSH
27249: CALL_OW 1
27253: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27254: LD_VAR 0 1
27258: PPUSH
27259: LD_INT 0
27261: PPUSH
27262: CALL_OW 505
// end ; end ;
27266: LD_VAR 0 2
27270: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27271: LD_INT 0
27273: PPUSH
27274: PPUSH
27275: PPUSH
// if not hack in hackTanks or not vehicles then
27276: LD_VAR 0 1
27280: PUSH
27281: LD_EXP 125
27285: IN
27286: NOT
27287: PUSH
27288: LD_VAR 0 2
27292: NOT
27293: OR
27294: IFFALSE 27298
// exit ;
27296: GO 27573
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27298: LD_ADDR_VAR 0 2
27302: PUSH
27303: LD_VAR 0 1
27307: PPUSH
27308: LD_VAR 0 2
27312: PPUSH
27313: LD_INT 1
27315: PPUSH
27316: LD_INT 1
27318: PPUSH
27319: CALL 35543 0 4
27323: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27324: LD_ADDR_VAR 0 5
27328: PUSH
27329: LD_EXP 125
27333: PPUSH
27334: LD_VAR 0 1
27338: PPUSH
27339: CALL 34893 0 2
27343: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27344: LD_EXP 126
27348: PUSH
27349: LD_VAR 0 5
27353: ARRAY
27354: PUSH
27355: LD_EXP 127
27359: LESS
27360: IFFALSE 27549
// begin for i := 1 to vehicles do
27362: LD_ADDR_VAR 0 4
27366: PUSH
27367: DOUBLE
27368: LD_INT 1
27370: DEC
27371: ST_TO_ADDR
27372: LD_VAR 0 2
27376: PUSH
27377: FOR_TO
27378: IFFALSE 27547
// begin if hackTanksCaptured [ index ] = hackLimit then
27380: LD_EXP 126
27384: PUSH
27385: LD_VAR 0 5
27389: ARRAY
27390: PUSH
27391: LD_EXP 127
27395: EQUAL
27396: IFFALSE 27400
// break ;
27398: GO 27547
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27400: LD_ADDR_EXP 129
27404: PUSH
27405: LD_EXP 129
27409: PPUSH
27410: LD_VAR 0 5
27414: PPUSH
27415: LD_EXP 129
27419: PUSH
27420: LD_VAR 0 5
27424: ARRAY
27425: PUSH
27426: LD_INT 1
27428: PLUS
27429: PPUSH
27430: CALL_OW 1
27434: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27435: LD_ADDR_EXP 126
27439: PUSH
27440: LD_EXP 126
27444: PPUSH
27445: LD_VAR 0 5
27449: PUSH
27450: LD_EXP 126
27454: PUSH
27455: LD_VAR 0 5
27459: ARRAY
27460: PUSH
27461: LD_INT 1
27463: PLUS
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PPUSH
27469: LD_VAR 0 2
27473: PUSH
27474: LD_VAR 0 4
27478: ARRAY
27479: PUSH
27480: LD_VAR 0 2
27484: PUSH
27485: LD_VAR 0 4
27489: ARRAY
27490: PPUSH
27491: CALL_OW 255
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PPUSH
27500: CALL 35108 0 3
27504: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27505: LD_VAR 0 2
27509: PUSH
27510: LD_VAR 0 4
27514: ARRAY
27515: PPUSH
27516: LD_VAR 0 1
27520: PPUSH
27521: CALL_OW 255
27525: PPUSH
27526: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27530: LD_VAR 0 2
27534: PUSH
27535: LD_VAR 0 4
27539: ARRAY
27540: PPUSH
27541: CALL_OW 141
// end ;
27545: GO 27377
27547: POP
27548: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27549: LD_VAR 0 1
27553: PPUSH
27554: LD_EXP 126
27558: PUSH
27559: LD_VAR 0 5
27563: ARRAY
27564: PUSH
27565: LD_INT 0
27567: PLUS
27568: PPUSH
27569: CALL_OW 505
// end ;
27573: LD_VAR 0 3
27577: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27578: LD_INT 0
27580: PPUSH
27581: PPUSH
27582: PPUSH
27583: PPUSH
// if not hack in hackTanks then
27584: LD_VAR 0 1
27588: PUSH
27589: LD_EXP 125
27593: IN
27594: NOT
27595: IFFALSE 27599
// exit ;
27597: GO 27839
// index := GetElementIndex ( hackTanks , hack ) ;
27599: LD_ADDR_VAR 0 4
27603: PUSH
27604: LD_EXP 125
27608: PPUSH
27609: LD_VAR 0 1
27613: PPUSH
27614: CALL 34893 0 2
27618: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27619: LD_ADDR_VAR 0 3
27623: PUSH
27624: DOUBLE
27625: LD_EXP 126
27629: PUSH
27630: LD_VAR 0 4
27634: ARRAY
27635: INC
27636: ST_TO_ADDR
27637: LD_INT 1
27639: PUSH
27640: FOR_DOWNTO
27641: IFFALSE 27813
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27643: LD_ADDR_VAR 0 5
27647: PUSH
27648: LD_EXP 126
27652: PUSH
27653: LD_VAR 0 4
27657: ARRAY
27658: PUSH
27659: LD_VAR 0 3
27663: ARRAY
27664: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27665: LD_VAR 0 5
27669: PUSH
27670: LD_INT 1
27672: ARRAY
27673: PPUSH
27674: CALL_OW 302
27678: NOT
27679: PUSH
27680: LD_VAR 0 5
27684: PUSH
27685: LD_INT 1
27687: ARRAY
27688: PPUSH
27689: CALL_OW 255
27693: PUSH
27694: LD_VAR 0 1
27698: PPUSH
27699: CALL_OW 255
27703: NONEQUAL
27704: OR
27705: IFFALSE 27811
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27707: LD_VAR 0 5
27711: PUSH
27712: LD_INT 1
27714: ARRAY
27715: PPUSH
27716: CALL_OW 305
27720: PUSH
27721: LD_VAR 0 5
27725: PUSH
27726: LD_INT 1
27728: ARRAY
27729: PPUSH
27730: CALL_OW 255
27734: PUSH
27735: LD_VAR 0 1
27739: PPUSH
27740: CALL_OW 255
27744: EQUAL
27745: AND
27746: IFFALSE 27770
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27748: LD_VAR 0 5
27752: PUSH
27753: LD_INT 1
27755: ARRAY
27756: PPUSH
27757: LD_VAR 0 5
27761: PUSH
27762: LD_INT 2
27764: ARRAY
27765: PPUSH
27766: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27770: LD_ADDR_EXP 126
27774: PUSH
27775: LD_EXP 126
27779: PPUSH
27780: LD_VAR 0 4
27784: PPUSH
27785: LD_EXP 126
27789: PUSH
27790: LD_VAR 0 4
27794: ARRAY
27795: PPUSH
27796: LD_VAR 0 3
27800: PPUSH
27801: CALL_OW 3
27805: PPUSH
27806: CALL_OW 1
27810: ST_TO_ADDR
// end ; end ;
27811: GO 27640
27813: POP
27814: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27815: LD_VAR 0 1
27819: PPUSH
27820: LD_EXP 126
27824: PUSH
27825: LD_VAR 0 4
27829: ARRAY
27830: PUSH
27831: LD_INT 0
27833: PLUS
27834: PPUSH
27835: CALL_OW 505
// end ;
27839: LD_VAR 0 2
27843: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27844: LD_INT 0
27846: PPUSH
27847: PPUSH
27848: PPUSH
27849: PPUSH
// if not hack in hackTanks then
27850: LD_VAR 0 1
27854: PUSH
27855: LD_EXP 125
27859: IN
27860: NOT
27861: IFFALSE 27865
// exit ;
27863: GO 27950
// index := GetElementIndex ( hackTanks , hack ) ;
27865: LD_ADDR_VAR 0 5
27869: PUSH
27870: LD_EXP 125
27874: PPUSH
27875: LD_VAR 0 1
27879: PPUSH
27880: CALL 34893 0 2
27884: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27885: LD_ADDR_VAR 0 4
27889: PUSH
27890: DOUBLE
27891: LD_INT 1
27893: DEC
27894: ST_TO_ADDR
27895: LD_EXP 126
27899: PUSH
27900: LD_VAR 0 5
27904: ARRAY
27905: PUSH
27906: FOR_TO
27907: IFFALSE 27948
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27909: LD_EXP 126
27913: PUSH
27914: LD_VAR 0 5
27918: ARRAY
27919: PUSH
27920: LD_VAR 0 4
27924: ARRAY
27925: PUSH
27926: LD_INT 1
27928: ARRAY
27929: PUSH
27930: LD_VAR 0 2
27934: EQUAL
27935: IFFALSE 27946
// KillUnit ( vehicle ) ;
27937: LD_VAR 0 2
27941: PPUSH
27942: CALL_OW 66
27946: GO 27906
27948: POP
27949: POP
// end ;
27950: LD_VAR 0 3
27954: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27955: LD_EXP 130
27959: NOT
27960: IFFALSE 27995
27962: GO 27964
27964: DISABLE
// begin initMiner := true ;
27965: LD_ADDR_EXP 130
27969: PUSH
27970: LD_INT 1
27972: ST_TO_ADDR
// minersList := [ ] ;
27973: LD_ADDR_EXP 131
27977: PUSH
27978: EMPTY
27979: ST_TO_ADDR
// minerMinesList := [ ] ;
27980: LD_ADDR_EXP 132
27984: PUSH
27985: EMPTY
27986: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27987: LD_ADDR_EXP 133
27991: PUSH
27992: LD_INT 5
27994: ST_TO_ADDR
// end ;
27995: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27996: LD_EXP 130
28000: PUSH
28001: LD_INT 34
28003: PUSH
28004: LD_EXP 52
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PPUSH
28013: CALL_OW 69
28017: AND
28018: IFFALSE 28481
28020: GO 28022
28022: DISABLE
28023: LD_INT 0
28025: PPUSH
28026: PPUSH
28027: PPUSH
28028: PPUSH
// begin enable ;
28029: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28030: LD_ADDR_VAR 0 1
28034: PUSH
28035: LD_INT 34
28037: PUSH
28038: LD_EXP 52
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PPUSH
28047: CALL_OW 69
28051: PUSH
28052: FOR_IN
28053: IFFALSE 28125
// begin if not i in minersList then
28055: LD_VAR 0 1
28059: PUSH
28060: LD_EXP 131
28064: IN
28065: NOT
28066: IFFALSE 28123
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28068: LD_ADDR_EXP 131
28072: PUSH
28073: LD_EXP 131
28077: PPUSH
28078: LD_EXP 131
28082: PUSH
28083: LD_INT 1
28085: PLUS
28086: PPUSH
28087: LD_VAR 0 1
28091: PPUSH
28092: CALL_OW 1
28096: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28097: LD_ADDR_EXP 132
28101: PUSH
28102: LD_EXP 132
28106: PPUSH
28107: LD_EXP 132
28111: PUSH
28112: LD_INT 1
28114: PLUS
28115: PPUSH
28116: EMPTY
28117: PPUSH
28118: CALL_OW 1
28122: ST_TO_ADDR
// end end ;
28123: GO 28052
28125: POP
28126: POP
// for i := minerMinesList downto 1 do
28127: LD_ADDR_VAR 0 1
28131: PUSH
28132: DOUBLE
28133: LD_EXP 132
28137: INC
28138: ST_TO_ADDR
28139: LD_INT 1
28141: PUSH
28142: FOR_DOWNTO
28143: IFFALSE 28479
// begin if IsLive ( minersList [ i ] ) then
28145: LD_EXP 131
28149: PUSH
28150: LD_VAR 0 1
28154: ARRAY
28155: PPUSH
28156: CALL_OW 300
28160: IFFALSE 28188
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28162: LD_EXP 131
28166: PUSH
28167: LD_VAR 0 1
28171: ARRAY
28172: PPUSH
28173: LD_EXP 132
28177: PUSH
28178: LD_VAR 0 1
28182: ARRAY
28183: PPUSH
28184: CALL_OW 505
// if not minerMinesList [ i ] then
28188: LD_EXP 132
28192: PUSH
28193: LD_VAR 0 1
28197: ARRAY
28198: NOT
28199: IFFALSE 28203
// continue ;
28201: GO 28142
// for j := minerMinesList [ i ] downto 1 do
28203: LD_ADDR_VAR 0 2
28207: PUSH
28208: DOUBLE
28209: LD_EXP 132
28213: PUSH
28214: LD_VAR 0 1
28218: ARRAY
28219: INC
28220: ST_TO_ADDR
28221: LD_INT 1
28223: PUSH
28224: FOR_DOWNTO
28225: IFFALSE 28475
// begin side := GetSide ( minersList [ i ] ) ;
28227: LD_ADDR_VAR 0 3
28231: PUSH
28232: LD_EXP 131
28236: PUSH
28237: LD_VAR 0 1
28241: ARRAY
28242: PPUSH
28243: CALL_OW 255
28247: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28248: LD_ADDR_VAR 0 4
28252: PUSH
28253: LD_EXP 132
28257: PUSH
28258: LD_VAR 0 1
28262: ARRAY
28263: PUSH
28264: LD_VAR 0 2
28268: ARRAY
28269: PUSH
28270: LD_INT 1
28272: ARRAY
28273: PPUSH
28274: LD_EXP 132
28278: PUSH
28279: LD_VAR 0 1
28283: ARRAY
28284: PUSH
28285: LD_VAR 0 2
28289: ARRAY
28290: PUSH
28291: LD_INT 2
28293: ARRAY
28294: PPUSH
28295: CALL_OW 428
28299: ST_TO_ADDR
// if not tmp then
28300: LD_VAR 0 4
28304: NOT
28305: IFFALSE 28309
// continue ;
28307: GO 28224
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28309: LD_VAR 0 4
28313: PUSH
28314: LD_INT 81
28316: PUSH
28317: LD_VAR 0 3
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PPUSH
28326: CALL_OW 69
28330: IN
28331: PUSH
28332: LD_EXP 132
28336: PUSH
28337: LD_VAR 0 1
28341: ARRAY
28342: PUSH
28343: LD_VAR 0 2
28347: ARRAY
28348: PUSH
28349: LD_INT 1
28351: ARRAY
28352: PPUSH
28353: LD_EXP 132
28357: PUSH
28358: LD_VAR 0 1
28362: ARRAY
28363: PUSH
28364: LD_VAR 0 2
28368: ARRAY
28369: PUSH
28370: LD_INT 2
28372: ARRAY
28373: PPUSH
28374: CALL_OW 458
28378: AND
28379: IFFALSE 28473
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28381: LD_EXP 132
28385: PUSH
28386: LD_VAR 0 1
28390: ARRAY
28391: PUSH
28392: LD_VAR 0 2
28396: ARRAY
28397: PUSH
28398: LD_INT 1
28400: ARRAY
28401: PPUSH
28402: LD_EXP 132
28406: PUSH
28407: LD_VAR 0 1
28411: ARRAY
28412: PUSH
28413: LD_VAR 0 2
28417: ARRAY
28418: PUSH
28419: LD_INT 2
28421: ARRAY
28422: PPUSH
28423: LD_VAR 0 3
28427: PPUSH
28428: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28432: LD_ADDR_EXP 132
28436: PUSH
28437: LD_EXP 132
28441: PPUSH
28442: LD_VAR 0 1
28446: PPUSH
28447: LD_EXP 132
28451: PUSH
28452: LD_VAR 0 1
28456: ARRAY
28457: PPUSH
28458: LD_VAR 0 2
28462: PPUSH
28463: CALL_OW 3
28467: PPUSH
28468: CALL_OW 1
28472: ST_TO_ADDR
// end ; end ;
28473: GO 28224
28475: POP
28476: POP
// end ;
28477: GO 28142
28479: POP
28480: POP
// end ;
28481: PPOPN 4
28483: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28484: LD_INT 0
28486: PPUSH
28487: PPUSH
// result := false ;
28488: LD_ADDR_VAR 0 4
28492: PUSH
28493: LD_INT 0
28495: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28496: LD_VAR 0 1
28500: PPUSH
28501: CALL_OW 264
28505: PUSH
28506: LD_EXP 52
28510: EQUAL
28511: NOT
28512: IFFALSE 28516
// exit ;
28514: GO 28756
// index := GetElementIndex ( minersList , unit ) ;
28516: LD_ADDR_VAR 0 5
28520: PUSH
28521: LD_EXP 131
28525: PPUSH
28526: LD_VAR 0 1
28530: PPUSH
28531: CALL 34893 0 2
28535: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28536: LD_EXP 132
28540: PUSH
28541: LD_VAR 0 5
28545: ARRAY
28546: PUSH
28547: LD_EXP 133
28551: GREATEREQUAL
28552: IFFALSE 28556
// exit ;
28554: GO 28756
// ComMoveXY ( unit , x , y ) ;
28556: LD_VAR 0 1
28560: PPUSH
28561: LD_VAR 0 2
28565: PPUSH
28566: LD_VAR 0 3
28570: PPUSH
28571: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28575: LD_INT 35
28577: PPUSH
28578: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28582: LD_VAR 0 1
28586: PPUSH
28587: LD_VAR 0 2
28591: PPUSH
28592: LD_VAR 0 3
28596: PPUSH
28597: CALL 65612 0 3
28601: NOT
28602: PUSH
28603: LD_VAR 0 1
28607: PPUSH
28608: CALL_OW 314
28612: AND
28613: IFFALSE 28617
// exit ;
28615: GO 28756
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28617: LD_VAR 0 2
28621: PPUSH
28622: LD_VAR 0 3
28626: PPUSH
28627: CALL_OW 428
28631: PUSH
28632: LD_VAR 0 1
28636: EQUAL
28637: PUSH
28638: LD_VAR 0 1
28642: PPUSH
28643: CALL_OW 314
28647: NOT
28648: AND
28649: IFFALSE 28575
// PlaySoundXY ( x , y , PlantMine ) ;
28651: LD_VAR 0 2
28655: PPUSH
28656: LD_VAR 0 3
28660: PPUSH
28661: LD_STRING PlantMine
28663: PPUSH
28664: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28668: LD_VAR 0 2
28672: PPUSH
28673: LD_VAR 0 3
28677: PPUSH
28678: LD_VAR 0 1
28682: PPUSH
28683: CALL_OW 255
28687: PPUSH
28688: LD_INT 0
28690: PPUSH
28691: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28695: LD_ADDR_EXP 132
28699: PUSH
28700: LD_EXP 132
28704: PPUSH
28705: LD_VAR 0 5
28709: PUSH
28710: LD_EXP 132
28714: PUSH
28715: LD_VAR 0 5
28719: ARRAY
28720: PUSH
28721: LD_INT 1
28723: PLUS
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PPUSH
28729: LD_VAR 0 2
28733: PUSH
28734: LD_VAR 0 3
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PPUSH
28743: CALL 35108 0 3
28747: ST_TO_ADDR
// result := true ;
28748: LD_ADDR_VAR 0 4
28752: PUSH
28753: LD_INT 1
28755: ST_TO_ADDR
// end ;
28756: LD_VAR 0 4
28760: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28761: LD_INT 0
28763: PPUSH
28764: PPUSH
28765: PPUSH
// if not unit in minersList then
28766: LD_VAR 0 1
28770: PUSH
28771: LD_EXP 131
28775: IN
28776: NOT
28777: IFFALSE 28781
// exit ;
28779: GO 29173
// index := GetElementIndex ( minersList , unit ) ;
28781: LD_ADDR_VAR 0 6
28785: PUSH
28786: LD_EXP 131
28790: PPUSH
28791: LD_VAR 0 1
28795: PPUSH
28796: CALL 34893 0 2
28800: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28801: LD_ADDR_VAR 0 5
28805: PUSH
28806: DOUBLE
28807: LD_EXP 132
28811: PUSH
28812: LD_VAR 0 6
28816: ARRAY
28817: INC
28818: ST_TO_ADDR
28819: LD_INT 1
28821: PUSH
28822: FOR_DOWNTO
28823: IFFALSE 28984
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28825: LD_EXP 132
28829: PUSH
28830: LD_VAR 0 6
28834: ARRAY
28835: PUSH
28836: LD_VAR 0 5
28840: ARRAY
28841: PUSH
28842: LD_INT 1
28844: ARRAY
28845: PUSH
28846: LD_VAR 0 2
28850: EQUAL
28851: PUSH
28852: LD_EXP 132
28856: PUSH
28857: LD_VAR 0 6
28861: ARRAY
28862: PUSH
28863: LD_VAR 0 5
28867: ARRAY
28868: PUSH
28869: LD_INT 2
28871: ARRAY
28872: PUSH
28873: LD_VAR 0 3
28877: EQUAL
28878: AND
28879: IFFALSE 28982
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28881: LD_EXP 132
28885: PUSH
28886: LD_VAR 0 6
28890: ARRAY
28891: PUSH
28892: LD_VAR 0 5
28896: ARRAY
28897: PUSH
28898: LD_INT 1
28900: ARRAY
28901: PPUSH
28902: LD_EXP 132
28906: PUSH
28907: LD_VAR 0 6
28911: ARRAY
28912: PUSH
28913: LD_VAR 0 5
28917: ARRAY
28918: PUSH
28919: LD_INT 2
28921: ARRAY
28922: PPUSH
28923: LD_VAR 0 1
28927: PPUSH
28928: CALL_OW 255
28932: PPUSH
28933: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28937: LD_ADDR_EXP 132
28941: PUSH
28942: LD_EXP 132
28946: PPUSH
28947: LD_VAR 0 6
28951: PPUSH
28952: LD_EXP 132
28956: PUSH
28957: LD_VAR 0 6
28961: ARRAY
28962: PPUSH
28963: LD_VAR 0 5
28967: PPUSH
28968: CALL_OW 3
28972: PPUSH
28973: CALL_OW 1
28977: ST_TO_ADDR
// exit ;
28978: POP
28979: POP
28980: GO 29173
// end ; end ;
28982: GO 28822
28984: POP
28985: POP
// for i := minerMinesList [ index ] downto 1 do
28986: LD_ADDR_VAR 0 5
28990: PUSH
28991: DOUBLE
28992: LD_EXP 132
28996: PUSH
28997: LD_VAR 0 6
29001: ARRAY
29002: INC
29003: ST_TO_ADDR
29004: LD_INT 1
29006: PUSH
29007: FOR_DOWNTO
29008: IFFALSE 29171
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29010: LD_EXP 132
29014: PUSH
29015: LD_VAR 0 6
29019: ARRAY
29020: PUSH
29021: LD_VAR 0 5
29025: ARRAY
29026: PUSH
29027: LD_INT 1
29029: ARRAY
29030: PPUSH
29031: LD_EXP 132
29035: PUSH
29036: LD_VAR 0 6
29040: ARRAY
29041: PUSH
29042: LD_VAR 0 5
29046: ARRAY
29047: PUSH
29048: LD_INT 2
29050: ARRAY
29051: PPUSH
29052: LD_VAR 0 2
29056: PPUSH
29057: LD_VAR 0 3
29061: PPUSH
29062: CALL_OW 298
29066: PUSH
29067: LD_INT 6
29069: LESS
29070: IFFALSE 29169
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29072: LD_EXP 132
29076: PUSH
29077: LD_VAR 0 6
29081: ARRAY
29082: PUSH
29083: LD_VAR 0 5
29087: ARRAY
29088: PUSH
29089: LD_INT 1
29091: ARRAY
29092: PPUSH
29093: LD_EXP 132
29097: PUSH
29098: LD_VAR 0 6
29102: ARRAY
29103: PUSH
29104: LD_VAR 0 5
29108: ARRAY
29109: PUSH
29110: LD_INT 2
29112: ARRAY
29113: PPUSH
29114: LD_VAR 0 1
29118: PPUSH
29119: CALL_OW 255
29123: PPUSH
29124: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29128: LD_ADDR_EXP 132
29132: PUSH
29133: LD_EXP 132
29137: PPUSH
29138: LD_VAR 0 6
29142: PPUSH
29143: LD_EXP 132
29147: PUSH
29148: LD_VAR 0 6
29152: ARRAY
29153: PPUSH
29154: LD_VAR 0 5
29158: PPUSH
29159: CALL_OW 3
29163: PPUSH
29164: CALL_OW 1
29168: ST_TO_ADDR
// end ; end ;
29169: GO 29007
29171: POP
29172: POP
// end ;
29173: LD_VAR 0 4
29177: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29178: LD_INT 0
29180: PPUSH
29181: PPUSH
29182: PPUSH
29183: PPUSH
29184: PPUSH
29185: PPUSH
29186: PPUSH
29187: PPUSH
29188: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29189: LD_VAR 0 1
29193: PPUSH
29194: CALL_OW 264
29198: PUSH
29199: LD_EXP 52
29203: EQUAL
29204: NOT
29205: PUSH
29206: LD_VAR 0 1
29210: PUSH
29211: LD_EXP 131
29215: IN
29216: NOT
29217: OR
29218: IFFALSE 29222
// exit ;
29220: GO 29544
// index := GetElementIndex ( minersList , unit ) ;
29222: LD_ADDR_VAR 0 6
29226: PUSH
29227: LD_EXP 131
29231: PPUSH
29232: LD_VAR 0 1
29236: PPUSH
29237: CALL 34893 0 2
29241: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29242: LD_ADDR_VAR 0 8
29246: PUSH
29247: LD_EXP 133
29251: PUSH
29252: LD_EXP 132
29256: PUSH
29257: LD_VAR 0 6
29261: ARRAY
29262: MINUS
29263: ST_TO_ADDR
// if not minesFreeAmount then
29264: LD_VAR 0 8
29268: NOT
29269: IFFALSE 29273
// exit ;
29271: GO 29544
// tmp := [ ] ;
29273: LD_ADDR_VAR 0 7
29277: PUSH
29278: EMPTY
29279: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29280: LD_ADDR_VAR 0 5
29284: PUSH
29285: DOUBLE
29286: LD_INT 1
29288: DEC
29289: ST_TO_ADDR
29290: LD_VAR 0 8
29294: PUSH
29295: FOR_TO
29296: IFFALSE 29491
// begin _d := rand ( 0 , 5 ) ;
29298: LD_ADDR_VAR 0 11
29302: PUSH
29303: LD_INT 0
29305: PPUSH
29306: LD_INT 5
29308: PPUSH
29309: CALL_OW 12
29313: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29314: LD_ADDR_VAR 0 12
29318: PUSH
29319: LD_INT 2
29321: PPUSH
29322: LD_INT 6
29324: PPUSH
29325: CALL_OW 12
29329: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29330: LD_ADDR_VAR 0 9
29334: PUSH
29335: LD_VAR 0 2
29339: PPUSH
29340: LD_VAR 0 11
29344: PPUSH
29345: LD_VAR 0 12
29349: PPUSH
29350: CALL_OW 272
29354: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29355: LD_ADDR_VAR 0 10
29359: PUSH
29360: LD_VAR 0 3
29364: PPUSH
29365: LD_VAR 0 11
29369: PPUSH
29370: LD_VAR 0 12
29374: PPUSH
29375: CALL_OW 273
29379: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29380: LD_VAR 0 9
29384: PPUSH
29385: LD_VAR 0 10
29389: PPUSH
29390: CALL_OW 488
29394: PUSH
29395: LD_VAR 0 9
29399: PUSH
29400: LD_VAR 0 10
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_VAR 0 7
29413: IN
29414: NOT
29415: AND
29416: PUSH
29417: LD_VAR 0 9
29421: PPUSH
29422: LD_VAR 0 10
29426: PPUSH
29427: CALL_OW 458
29431: NOT
29432: AND
29433: IFFALSE 29475
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29435: LD_ADDR_VAR 0 7
29439: PUSH
29440: LD_VAR 0 7
29444: PPUSH
29445: LD_VAR 0 7
29449: PUSH
29450: LD_INT 1
29452: PLUS
29453: PPUSH
29454: LD_VAR 0 9
29458: PUSH
29459: LD_VAR 0 10
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PPUSH
29468: CALL_OW 1
29472: ST_TO_ADDR
29473: GO 29489
// i := i - 1 ;
29475: LD_ADDR_VAR 0 5
29479: PUSH
29480: LD_VAR 0 5
29484: PUSH
29485: LD_INT 1
29487: MINUS
29488: ST_TO_ADDR
// end ;
29489: GO 29295
29491: POP
29492: POP
// for i in tmp do
29493: LD_ADDR_VAR 0 5
29497: PUSH
29498: LD_VAR 0 7
29502: PUSH
29503: FOR_IN
29504: IFFALSE 29542
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29506: LD_VAR 0 1
29510: PPUSH
29511: LD_VAR 0 5
29515: PUSH
29516: LD_INT 1
29518: ARRAY
29519: PPUSH
29520: LD_VAR 0 5
29524: PUSH
29525: LD_INT 2
29527: ARRAY
29528: PPUSH
29529: CALL 28484 0 3
29533: NOT
29534: IFFALSE 29540
// exit ;
29536: POP
29537: POP
29538: GO 29544
29540: GO 29503
29542: POP
29543: POP
// end ;
29544: LD_VAR 0 4
29548: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29549: LD_INT 0
29551: PPUSH
29552: PPUSH
29553: PPUSH
29554: PPUSH
29555: PPUSH
29556: PPUSH
29557: PPUSH
// if not GetClass ( unit ) = class_sniper then
29558: LD_VAR 0 1
29562: PPUSH
29563: CALL_OW 257
29567: PUSH
29568: LD_INT 5
29570: EQUAL
29571: NOT
29572: IFFALSE 29576
// exit ;
29574: GO 29964
// dist := 8 ;
29576: LD_ADDR_VAR 0 5
29580: PUSH
29581: LD_INT 8
29583: ST_TO_ADDR
// viewRange := 12 ;
29584: LD_ADDR_VAR 0 7
29588: PUSH
29589: LD_INT 12
29591: ST_TO_ADDR
// side := GetSide ( unit ) ;
29592: LD_ADDR_VAR 0 6
29596: PUSH
29597: LD_VAR 0 1
29601: PPUSH
29602: CALL_OW 255
29606: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29607: LD_INT 61
29609: PPUSH
29610: LD_VAR 0 6
29614: PPUSH
29615: CALL_OW 321
29619: PUSH
29620: LD_INT 2
29622: EQUAL
29623: IFFALSE 29633
// viewRange := 16 ;
29625: LD_ADDR_VAR 0 7
29629: PUSH
29630: LD_INT 16
29632: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29633: LD_VAR 0 1
29637: PPUSH
29638: LD_VAR 0 2
29642: PPUSH
29643: LD_VAR 0 3
29647: PPUSH
29648: CALL_OW 297
29652: PUSH
29653: LD_VAR 0 5
29657: GREATER
29658: IFFALSE 29737
// begin ComMoveXY ( unit , x , y ) ;
29660: LD_VAR 0 1
29664: PPUSH
29665: LD_VAR 0 2
29669: PPUSH
29670: LD_VAR 0 3
29674: PPUSH
29675: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29679: LD_INT 35
29681: PPUSH
29682: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29686: LD_VAR 0 1
29690: PPUSH
29691: LD_VAR 0 2
29695: PPUSH
29696: LD_VAR 0 3
29700: PPUSH
29701: CALL 65612 0 3
29705: NOT
29706: IFFALSE 29710
// exit ;
29708: GO 29964
// until GetDistUnitXY ( unit , x , y ) < dist ;
29710: LD_VAR 0 1
29714: PPUSH
29715: LD_VAR 0 2
29719: PPUSH
29720: LD_VAR 0 3
29724: PPUSH
29725: CALL_OW 297
29729: PUSH
29730: LD_VAR 0 5
29734: LESS
29735: IFFALSE 29679
// end ; ComTurnXY ( unit , x , y ) ;
29737: LD_VAR 0 1
29741: PPUSH
29742: LD_VAR 0 2
29746: PPUSH
29747: LD_VAR 0 3
29751: PPUSH
29752: CALL_OW 118
// wait ( 5 ) ;
29756: LD_INT 5
29758: PPUSH
29759: CALL_OW 67
// _d := GetDir ( unit ) ;
29763: LD_ADDR_VAR 0 10
29767: PUSH
29768: LD_VAR 0 1
29772: PPUSH
29773: CALL_OW 254
29777: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29778: LD_ADDR_VAR 0 8
29782: PUSH
29783: LD_VAR 0 1
29787: PPUSH
29788: CALL_OW 250
29792: PPUSH
29793: LD_VAR 0 10
29797: PPUSH
29798: LD_VAR 0 5
29802: PPUSH
29803: CALL_OW 272
29807: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29808: LD_ADDR_VAR 0 9
29812: PUSH
29813: LD_VAR 0 1
29817: PPUSH
29818: CALL_OW 251
29822: PPUSH
29823: LD_VAR 0 10
29827: PPUSH
29828: LD_VAR 0 5
29832: PPUSH
29833: CALL_OW 273
29837: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29838: LD_VAR 0 8
29842: PPUSH
29843: LD_VAR 0 9
29847: PPUSH
29848: CALL_OW 488
29852: NOT
29853: IFFALSE 29857
// exit ;
29855: GO 29964
// ComAnimCustom ( unit , 1 ) ;
29857: LD_VAR 0 1
29861: PPUSH
29862: LD_INT 1
29864: PPUSH
29865: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29869: LD_VAR 0 8
29873: PPUSH
29874: LD_VAR 0 9
29878: PPUSH
29879: LD_VAR 0 6
29883: PPUSH
29884: LD_VAR 0 7
29888: PPUSH
29889: CALL_OW 330
// repeat wait ( 1 ) ;
29893: LD_INT 1
29895: PPUSH
29896: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29900: LD_VAR 0 1
29904: PPUSH
29905: CALL_OW 316
29909: PUSH
29910: LD_VAR 0 1
29914: PPUSH
29915: CALL_OW 314
29919: OR
29920: PUSH
29921: LD_VAR 0 1
29925: PPUSH
29926: CALL_OW 302
29930: NOT
29931: OR
29932: PUSH
29933: LD_VAR 0 1
29937: PPUSH
29938: CALL_OW 301
29942: OR
29943: IFFALSE 29893
// RemoveSeeing ( _x , _y , side ) ;
29945: LD_VAR 0 8
29949: PPUSH
29950: LD_VAR 0 9
29954: PPUSH
29955: LD_VAR 0 6
29959: PPUSH
29960: CALL_OW 331
// end ; end_of_file
29964: LD_VAR 0 4
29968: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29969: LD_INT 0
29971: PPUSH
29972: PPUSH
// if exist_mode then
29973: LD_VAR 0 2
29977: IFFALSE 30002
// unit := CreateCharacter ( prefix & ident ) else
29979: LD_ADDR_VAR 0 5
29983: PUSH
29984: LD_VAR 0 3
29988: PUSH
29989: LD_VAR 0 1
29993: STR
29994: PPUSH
29995: CALL_OW 34
29999: ST_TO_ADDR
30000: GO 30017
// unit := NewCharacter ( ident ) ;
30002: LD_ADDR_VAR 0 5
30006: PUSH
30007: LD_VAR 0 1
30011: PPUSH
30012: CALL_OW 25
30016: ST_TO_ADDR
// result := unit ;
30017: LD_ADDR_VAR 0 4
30021: PUSH
30022: LD_VAR 0 5
30026: ST_TO_ADDR
// end ;
30027: LD_VAR 0 4
30031: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30032: LD_INT 0
30034: PPUSH
30035: PPUSH
// if not side or not nation then
30036: LD_VAR 0 1
30040: NOT
30041: PUSH
30042: LD_VAR 0 2
30046: NOT
30047: OR
30048: IFFALSE 30052
// exit ;
30050: GO 30820
// case nation of nation_american :
30052: LD_VAR 0 2
30056: PUSH
30057: LD_INT 1
30059: DOUBLE
30060: EQUAL
30061: IFTRUE 30065
30063: GO 30279
30065: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30066: LD_ADDR_VAR 0 4
30070: PUSH
30071: LD_INT 35
30073: PUSH
30074: LD_INT 45
30076: PUSH
30077: LD_INT 46
30079: PUSH
30080: LD_INT 47
30082: PUSH
30083: LD_INT 82
30085: PUSH
30086: LD_INT 83
30088: PUSH
30089: LD_INT 84
30091: PUSH
30092: LD_INT 85
30094: PUSH
30095: LD_INT 86
30097: PUSH
30098: LD_INT 1
30100: PUSH
30101: LD_INT 2
30103: PUSH
30104: LD_INT 6
30106: PUSH
30107: LD_INT 15
30109: PUSH
30110: LD_INT 16
30112: PUSH
30113: LD_INT 7
30115: PUSH
30116: LD_INT 12
30118: PUSH
30119: LD_INT 13
30121: PUSH
30122: LD_INT 10
30124: PUSH
30125: LD_INT 14
30127: PUSH
30128: LD_INT 20
30130: PUSH
30131: LD_INT 21
30133: PUSH
30134: LD_INT 22
30136: PUSH
30137: LD_INT 25
30139: PUSH
30140: LD_INT 32
30142: PUSH
30143: LD_INT 27
30145: PUSH
30146: LD_INT 36
30148: PUSH
30149: LD_INT 69
30151: PUSH
30152: LD_INT 39
30154: PUSH
30155: LD_INT 34
30157: PUSH
30158: LD_INT 40
30160: PUSH
30161: LD_INT 48
30163: PUSH
30164: LD_INT 49
30166: PUSH
30167: LD_INT 50
30169: PUSH
30170: LD_INT 51
30172: PUSH
30173: LD_INT 52
30175: PUSH
30176: LD_INT 53
30178: PUSH
30179: LD_INT 54
30181: PUSH
30182: LD_INT 55
30184: PUSH
30185: LD_INT 56
30187: PUSH
30188: LD_INT 57
30190: PUSH
30191: LD_INT 58
30193: PUSH
30194: LD_INT 59
30196: PUSH
30197: LD_INT 60
30199: PUSH
30200: LD_INT 61
30202: PUSH
30203: LD_INT 62
30205: PUSH
30206: LD_INT 80
30208: PUSH
30209: LD_INT 82
30211: PUSH
30212: LD_INT 83
30214: PUSH
30215: LD_INT 84
30217: PUSH
30218: LD_INT 85
30220: PUSH
30221: LD_INT 86
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: ST_TO_ADDR
30277: GO 30744
30279: LD_INT 2
30281: DOUBLE
30282: EQUAL
30283: IFTRUE 30287
30285: GO 30513
30287: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30288: LD_ADDR_VAR 0 4
30292: PUSH
30293: LD_INT 35
30295: PUSH
30296: LD_INT 45
30298: PUSH
30299: LD_INT 46
30301: PUSH
30302: LD_INT 47
30304: PUSH
30305: LD_INT 82
30307: PUSH
30308: LD_INT 83
30310: PUSH
30311: LD_INT 84
30313: PUSH
30314: LD_INT 85
30316: PUSH
30317: LD_INT 87
30319: PUSH
30320: LD_INT 70
30322: PUSH
30323: LD_INT 1
30325: PUSH
30326: LD_INT 11
30328: PUSH
30329: LD_INT 3
30331: PUSH
30332: LD_INT 4
30334: PUSH
30335: LD_INT 5
30337: PUSH
30338: LD_INT 6
30340: PUSH
30341: LD_INT 15
30343: PUSH
30344: LD_INT 18
30346: PUSH
30347: LD_INT 7
30349: PUSH
30350: LD_INT 17
30352: PUSH
30353: LD_INT 8
30355: PUSH
30356: LD_INT 20
30358: PUSH
30359: LD_INT 21
30361: PUSH
30362: LD_INT 22
30364: PUSH
30365: LD_INT 72
30367: PUSH
30368: LD_INT 26
30370: PUSH
30371: LD_INT 69
30373: PUSH
30374: LD_INT 39
30376: PUSH
30377: LD_INT 40
30379: PUSH
30380: LD_INT 41
30382: PUSH
30383: LD_INT 42
30385: PUSH
30386: LD_INT 43
30388: PUSH
30389: LD_INT 48
30391: PUSH
30392: LD_INT 49
30394: PUSH
30395: LD_INT 50
30397: PUSH
30398: LD_INT 51
30400: PUSH
30401: LD_INT 52
30403: PUSH
30404: LD_INT 53
30406: PUSH
30407: LD_INT 54
30409: PUSH
30410: LD_INT 55
30412: PUSH
30413: LD_INT 56
30415: PUSH
30416: LD_INT 60
30418: PUSH
30419: LD_INT 61
30421: PUSH
30422: LD_INT 62
30424: PUSH
30425: LD_INT 66
30427: PUSH
30428: LD_INT 67
30430: PUSH
30431: LD_INT 68
30433: PUSH
30434: LD_INT 81
30436: PUSH
30437: LD_INT 82
30439: PUSH
30440: LD_INT 83
30442: PUSH
30443: LD_INT 84
30445: PUSH
30446: LD_INT 85
30448: PUSH
30449: LD_INT 87
30451: PUSH
30452: LD_INT 88
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: ST_TO_ADDR
30511: GO 30744
30513: LD_INT 3
30515: DOUBLE
30516: EQUAL
30517: IFTRUE 30521
30519: GO 30743
30521: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30522: LD_ADDR_VAR 0 4
30526: PUSH
30527: LD_INT 46
30529: PUSH
30530: LD_INT 47
30532: PUSH
30533: LD_INT 1
30535: PUSH
30536: LD_INT 2
30538: PUSH
30539: LD_INT 82
30541: PUSH
30542: LD_INT 83
30544: PUSH
30545: LD_INT 84
30547: PUSH
30548: LD_INT 85
30550: PUSH
30551: LD_INT 86
30553: PUSH
30554: LD_INT 11
30556: PUSH
30557: LD_INT 9
30559: PUSH
30560: LD_INT 20
30562: PUSH
30563: LD_INT 19
30565: PUSH
30566: LD_INT 21
30568: PUSH
30569: LD_INT 24
30571: PUSH
30572: LD_INT 22
30574: PUSH
30575: LD_INT 25
30577: PUSH
30578: LD_INT 28
30580: PUSH
30581: LD_INT 29
30583: PUSH
30584: LD_INT 30
30586: PUSH
30587: LD_INT 31
30589: PUSH
30590: LD_INT 37
30592: PUSH
30593: LD_INT 38
30595: PUSH
30596: LD_INT 32
30598: PUSH
30599: LD_INT 27
30601: PUSH
30602: LD_INT 33
30604: PUSH
30605: LD_INT 69
30607: PUSH
30608: LD_INT 39
30610: PUSH
30611: LD_INT 34
30613: PUSH
30614: LD_INT 40
30616: PUSH
30617: LD_INT 71
30619: PUSH
30620: LD_INT 23
30622: PUSH
30623: LD_INT 44
30625: PUSH
30626: LD_INT 48
30628: PUSH
30629: LD_INT 49
30631: PUSH
30632: LD_INT 50
30634: PUSH
30635: LD_INT 51
30637: PUSH
30638: LD_INT 52
30640: PUSH
30641: LD_INT 53
30643: PUSH
30644: LD_INT 54
30646: PUSH
30647: LD_INT 55
30649: PUSH
30650: LD_INT 56
30652: PUSH
30653: LD_INT 57
30655: PUSH
30656: LD_INT 58
30658: PUSH
30659: LD_INT 59
30661: PUSH
30662: LD_INT 63
30664: PUSH
30665: LD_INT 64
30667: PUSH
30668: LD_INT 65
30670: PUSH
30671: LD_INT 82
30673: PUSH
30674: LD_INT 83
30676: PUSH
30677: LD_INT 84
30679: PUSH
30680: LD_INT 85
30682: PUSH
30683: LD_INT 86
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: ST_TO_ADDR
30741: GO 30744
30743: POP
// if state > - 1 and state < 3 then
30744: LD_VAR 0 3
30748: PUSH
30749: LD_INT 1
30751: NEG
30752: GREATER
30753: PUSH
30754: LD_VAR 0 3
30758: PUSH
30759: LD_INT 3
30761: LESS
30762: AND
30763: IFFALSE 30820
// for i in result do
30765: LD_ADDR_VAR 0 5
30769: PUSH
30770: LD_VAR 0 4
30774: PUSH
30775: FOR_IN
30776: IFFALSE 30818
// if GetTech ( i , side ) <> state then
30778: LD_VAR 0 5
30782: PPUSH
30783: LD_VAR 0 1
30787: PPUSH
30788: CALL_OW 321
30792: PUSH
30793: LD_VAR 0 3
30797: NONEQUAL
30798: IFFALSE 30816
// result := result diff i ;
30800: LD_ADDR_VAR 0 4
30804: PUSH
30805: LD_VAR 0 4
30809: PUSH
30810: LD_VAR 0 5
30814: DIFF
30815: ST_TO_ADDR
30816: GO 30775
30818: POP
30819: POP
// end ;
30820: LD_VAR 0 4
30824: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30825: LD_INT 0
30827: PPUSH
30828: PPUSH
30829: PPUSH
// result := true ;
30830: LD_ADDR_VAR 0 3
30834: PUSH
30835: LD_INT 1
30837: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30838: LD_ADDR_VAR 0 5
30842: PUSH
30843: LD_VAR 0 2
30847: PPUSH
30848: CALL_OW 480
30852: ST_TO_ADDR
// if not tmp then
30853: LD_VAR 0 5
30857: NOT
30858: IFFALSE 30862
// exit ;
30860: GO 30911
// for i in tmp do
30862: LD_ADDR_VAR 0 4
30866: PUSH
30867: LD_VAR 0 5
30871: PUSH
30872: FOR_IN
30873: IFFALSE 30909
// if GetTech ( i , side ) <> state_researched then
30875: LD_VAR 0 4
30879: PPUSH
30880: LD_VAR 0 1
30884: PPUSH
30885: CALL_OW 321
30889: PUSH
30890: LD_INT 2
30892: NONEQUAL
30893: IFFALSE 30907
// begin result := false ;
30895: LD_ADDR_VAR 0 3
30899: PUSH
30900: LD_INT 0
30902: ST_TO_ADDR
// exit ;
30903: POP
30904: POP
30905: GO 30911
// end ;
30907: GO 30872
30909: POP
30910: POP
// end ;
30911: LD_VAR 0 3
30915: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30916: LD_INT 0
30918: PPUSH
30919: PPUSH
30920: PPUSH
30921: PPUSH
30922: PPUSH
30923: PPUSH
30924: PPUSH
30925: PPUSH
30926: PPUSH
30927: PPUSH
30928: PPUSH
30929: PPUSH
30930: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30931: LD_VAR 0 1
30935: NOT
30936: PUSH
30937: LD_VAR 0 1
30941: PPUSH
30942: CALL_OW 257
30946: PUSH
30947: LD_INT 9
30949: NONEQUAL
30950: OR
30951: IFFALSE 30955
// exit ;
30953: GO 31528
// side := GetSide ( unit ) ;
30955: LD_ADDR_VAR 0 9
30959: PUSH
30960: LD_VAR 0 1
30964: PPUSH
30965: CALL_OW 255
30969: ST_TO_ADDR
// tech_space := tech_spacanom ;
30970: LD_ADDR_VAR 0 12
30974: PUSH
30975: LD_INT 29
30977: ST_TO_ADDR
// tech_time := tech_taurad ;
30978: LD_ADDR_VAR 0 13
30982: PUSH
30983: LD_INT 28
30985: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30986: LD_ADDR_VAR 0 11
30990: PUSH
30991: LD_VAR 0 1
30995: PPUSH
30996: CALL_OW 310
31000: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31001: LD_VAR 0 11
31005: PPUSH
31006: CALL_OW 247
31010: PUSH
31011: LD_INT 2
31013: EQUAL
31014: IFFALSE 31018
// exit ;
31016: GO 31528
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31018: LD_ADDR_VAR 0 8
31022: PUSH
31023: LD_INT 81
31025: PUSH
31026: LD_VAR 0 9
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 3
31037: PUSH
31038: LD_INT 21
31040: PUSH
31041: LD_INT 3
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PPUSH
31056: CALL_OW 69
31060: ST_TO_ADDR
// if not tmp then
31061: LD_VAR 0 8
31065: NOT
31066: IFFALSE 31070
// exit ;
31068: GO 31528
// if in_unit then
31070: LD_VAR 0 11
31074: IFFALSE 31098
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31076: LD_ADDR_VAR 0 10
31080: PUSH
31081: LD_VAR 0 8
31085: PPUSH
31086: LD_VAR 0 11
31090: PPUSH
31091: CALL_OW 74
31095: ST_TO_ADDR
31096: GO 31118
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31098: LD_ADDR_VAR 0 10
31102: PUSH
31103: LD_VAR 0 8
31107: PPUSH
31108: LD_VAR 0 1
31112: PPUSH
31113: CALL_OW 74
31117: ST_TO_ADDR
// if not enemy then
31118: LD_VAR 0 10
31122: NOT
31123: IFFALSE 31127
// exit ;
31125: GO 31528
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31127: LD_VAR 0 11
31131: PUSH
31132: LD_VAR 0 11
31136: PPUSH
31137: LD_VAR 0 10
31141: PPUSH
31142: CALL_OW 296
31146: PUSH
31147: LD_INT 13
31149: GREATER
31150: AND
31151: PUSH
31152: LD_VAR 0 1
31156: PPUSH
31157: LD_VAR 0 10
31161: PPUSH
31162: CALL_OW 296
31166: PUSH
31167: LD_INT 12
31169: GREATER
31170: OR
31171: IFFALSE 31175
// exit ;
31173: GO 31528
// missile := [ 1 ] ;
31175: LD_ADDR_VAR 0 14
31179: PUSH
31180: LD_INT 1
31182: PUSH
31183: EMPTY
31184: LIST
31185: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31186: LD_VAR 0 9
31190: PPUSH
31191: LD_VAR 0 12
31195: PPUSH
31196: CALL_OW 325
31200: IFFALSE 31229
// missile := Replace ( missile , missile + 1 , 2 ) ;
31202: LD_ADDR_VAR 0 14
31206: PUSH
31207: LD_VAR 0 14
31211: PPUSH
31212: LD_VAR 0 14
31216: PUSH
31217: LD_INT 1
31219: PLUS
31220: PPUSH
31221: LD_INT 2
31223: PPUSH
31224: CALL_OW 1
31228: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31229: LD_VAR 0 9
31233: PPUSH
31234: LD_VAR 0 13
31238: PPUSH
31239: CALL_OW 325
31243: PUSH
31244: LD_VAR 0 10
31248: PPUSH
31249: CALL_OW 255
31253: PPUSH
31254: LD_VAR 0 13
31258: PPUSH
31259: CALL_OW 325
31263: NOT
31264: AND
31265: IFFALSE 31294
// missile := Replace ( missile , missile + 1 , 3 ) ;
31267: LD_ADDR_VAR 0 14
31271: PUSH
31272: LD_VAR 0 14
31276: PPUSH
31277: LD_VAR 0 14
31281: PUSH
31282: LD_INT 1
31284: PLUS
31285: PPUSH
31286: LD_INT 3
31288: PPUSH
31289: CALL_OW 1
31293: ST_TO_ADDR
// if missile < 2 then
31294: LD_VAR 0 14
31298: PUSH
31299: LD_INT 2
31301: LESS
31302: IFFALSE 31306
// exit ;
31304: GO 31528
// x := GetX ( enemy ) ;
31306: LD_ADDR_VAR 0 4
31310: PUSH
31311: LD_VAR 0 10
31315: PPUSH
31316: CALL_OW 250
31320: ST_TO_ADDR
// y := GetY ( enemy ) ;
31321: LD_ADDR_VAR 0 5
31325: PUSH
31326: LD_VAR 0 10
31330: PPUSH
31331: CALL_OW 251
31335: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31336: LD_ADDR_VAR 0 6
31340: PUSH
31341: LD_VAR 0 4
31345: PUSH
31346: LD_INT 1
31348: NEG
31349: PPUSH
31350: LD_INT 1
31352: PPUSH
31353: CALL_OW 12
31357: PLUS
31358: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31359: LD_ADDR_VAR 0 7
31363: PUSH
31364: LD_VAR 0 5
31368: PUSH
31369: LD_INT 1
31371: NEG
31372: PPUSH
31373: LD_INT 1
31375: PPUSH
31376: CALL_OW 12
31380: PLUS
31381: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31382: LD_VAR 0 6
31386: PPUSH
31387: LD_VAR 0 7
31391: PPUSH
31392: CALL_OW 488
31396: NOT
31397: IFFALSE 31419
// begin _x := x ;
31399: LD_ADDR_VAR 0 6
31403: PUSH
31404: LD_VAR 0 4
31408: ST_TO_ADDR
// _y := y ;
31409: LD_ADDR_VAR 0 7
31413: PUSH
31414: LD_VAR 0 5
31418: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31419: LD_ADDR_VAR 0 3
31423: PUSH
31424: LD_INT 1
31426: PPUSH
31427: LD_VAR 0 14
31431: PPUSH
31432: CALL_OW 12
31436: ST_TO_ADDR
// case i of 1 :
31437: LD_VAR 0 3
31441: PUSH
31442: LD_INT 1
31444: DOUBLE
31445: EQUAL
31446: IFTRUE 31450
31448: GO 31467
31450: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31451: LD_VAR 0 1
31455: PPUSH
31456: LD_VAR 0 10
31460: PPUSH
31461: CALL_OW 115
31465: GO 31528
31467: LD_INT 2
31469: DOUBLE
31470: EQUAL
31471: IFTRUE 31475
31473: GO 31497
31475: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31476: LD_VAR 0 1
31480: PPUSH
31481: LD_VAR 0 6
31485: PPUSH
31486: LD_VAR 0 7
31490: PPUSH
31491: CALL_OW 153
31495: GO 31528
31497: LD_INT 3
31499: DOUBLE
31500: EQUAL
31501: IFTRUE 31505
31503: GO 31527
31505: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31506: LD_VAR 0 1
31510: PPUSH
31511: LD_VAR 0 6
31515: PPUSH
31516: LD_VAR 0 7
31520: PPUSH
31521: CALL_OW 154
31525: GO 31528
31527: POP
// end ;
31528: LD_VAR 0 2
31532: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31533: LD_INT 0
31535: PPUSH
31536: PPUSH
31537: PPUSH
31538: PPUSH
31539: PPUSH
31540: PPUSH
// if not unit or not building then
31541: LD_VAR 0 1
31545: NOT
31546: PUSH
31547: LD_VAR 0 2
31551: NOT
31552: OR
31553: IFFALSE 31557
// exit ;
31555: GO 31715
// x := GetX ( building ) ;
31557: LD_ADDR_VAR 0 5
31561: PUSH
31562: LD_VAR 0 2
31566: PPUSH
31567: CALL_OW 250
31571: ST_TO_ADDR
// y := GetY ( building ) ;
31572: LD_ADDR_VAR 0 6
31576: PUSH
31577: LD_VAR 0 2
31581: PPUSH
31582: CALL_OW 251
31586: ST_TO_ADDR
// for i = 0 to 5 do
31587: LD_ADDR_VAR 0 4
31591: PUSH
31592: DOUBLE
31593: LD_INT 0
31595: DEC
31596: ST_TO_ADDR
31597: LD_INT 5
31599: PUSH
31600: FOR_TO
31601: IFFALSE 31713
// begin _x := ShiftX ( x , i , 3 ) ;
31603: LD_ADDR_VAR 0 7
31607: PUSH
31608: LD_VAR 0 5
31612: PPUSH
31613: LD_VAR 0 4
31617: PPUSH
31618: LD_INT 3
31620: PPUSH
31621: CALL_OW 272
31625: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31626: LD_ADDR_VAR 0 8
31630: PUSH
31631: LD_VAR 0 6
31635: PPUSH
31636: LD_VAR 0 4
31640: PPUSH
31641: LD_INT 3
31643: PPUSH
31644: CALL_OW 273
31648: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31649: LD_VAR 0 7
31653: PPUSH
31654: LD_VAR 0 8
31658: PPUSH
31659: CALL_OW 488
31663: NOT
31664: IFFALSE 31668
// continue ;
31666: GO 31600
// if HexInfo ( _x , _y ) = 0 then
31668: LD_VAR 0 7
31672: PPUSH
31673: LD_VAR 0 8
31677: PPUSH
31678: CALL_OW 428
31682: PUSH
31683: LD_INT 0
31685: EQUAL
31686: IFFALSE 31711
// begin ComMoveXY ( unit , _x , _y ) ;
31688: LD_VAR 0 1
31692: PPUSH
31693: LD_VAR 0 7
31697: PPUSH
31698: LD_VAR 0 8
31702: PPUSH
31703: CALL_OW 111
// exit ;
31707: POP
31708: POP
31709: GO 31715
// end ; end ;
31711: GO 31600
31713: POP
31714: POP
// end ;
31715: LD_VAR 0 3
31719: RET
// export function ScanBase ( side , base_area ) ; begin
31720: LD_INT 0
31722: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31723: LD_ADDR_VAR 0 3
31727: PUSH
31728: LD_VAR 0 2
31732: PPUSH
31733: LD_INT 81
31735: PUSH
31736: LD_VAR 0 1
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PPUSH
31745: CALL_OW 70
31749: ST_TO_ADDR
// end ;
31750: LD_VAR 0 3
31754: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31755: LD_INT 0
31757: PPUSH
31758: PPUSH
31759: PPUSH
31760: PPUSH
// result := false ;
31761: LD_ADDR_VAR 0 2
31765: PUSH
31766: LD_INT 0
31768: ST_TO_ADDR
// side := GetSide ( unit ) ;
31769: LD_ADDR_VAR 0 3
31773: PUSH
31774: LD_VAR 0 1
31778: PPUSH
31779: CALL_OW 255
31783: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31784: LD_ADDR_VAR 0 4
31788: PUSH
31789: LD_VAR 0 1
31793: PPUSH
31794: CALL_OW 248
31798: ST_TO_ADDR
// case nat of 1 :
31799: LD_VAR 0 4
31803: PUSH
31804: LD_INT 1
31806: DOUBLE
31807: EQUAL
31808: IFTRUE 31812
31810: GO 31823
31812: POP
// tech := tech_lassight ; 2 :
31813: LD_ADDR_VAR 0 5
31817: PUSH
31818: LD_INT 12
31820: ST_TO_ADDR
31821: GO 31862
31823: LD_INT 2
31825: DOUBLE
31826: EQUAL
31827: IFTRUE 31831
31829: GO 31842
31831: POP
// tech := tech_mortar ; 3 :
31832: LD_ADDR_VAR 0 5
31836: PUSH
31837: LD_INT 41
31839: ST_TO_ADDR
31840: GO 31862
31842: LD_INT 3
31844: DOUBLE
31845: EQUAL
31846: IFTRUE 31850
31848: GO 31861
31850: POP
// tech := tech_bazooka ; end ;
31851: LD_ADDR_VAR 0 5
31855: PUSH
31856: LD_INT 44
31858: ST_TO_ADDR
31859: GO 31862
31861: POP
// if Researched ( side , tech ) then
31862: LD_VAR 0 3
31866: PPUSH
31867: LD_VAR 0 5
31871: PPUSH
31872: CALL_OW 325
31876: IFFALSE 31903
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31878: LD_ADDR_VAR 0 2
31882: PUSH
31883: LD_INT 5
31885: PUSH
31886: LD_INT 8
31888: PUSH
31889: LD_INT 9
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: LIST
31896: PUSH
31897: LD_VAR 0 4
31901: ARRAY
31902: ST_TO_ADDR
// end ;
31903: LD_VAR 0 2
31907: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31908: LD_INT 0
31910: PPUSH
31911: PPUSH
31912: PPUSH
// if not mines then
31913: LD_VAR 0 2
31917: NOT
31918: IFFALSE 31922
// exit ;
31920: GO 32066
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31922: LD_ADDR_VAR 0 5
31926: PUSH
31927: LD_INT 81
31929: PUSH
31930: LD_VAR 0 1
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 3
31941: PUSH
31942: LD_INT 21
31944: PUSH
31945: LD_INT 3
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PPUSH
31960: CALL_OW 69
31964: ST_TO_ADDR
// for i in mines do
31965: LD_ADDR_VAR 0 4
31969: PUSH
31970: LD_VAR 0 2
31974: PUSH
31975: FOR_IN
31976: IFFALSE 32064
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31978: LD_VAR 0 4
31982: PUSH
31983: LD_INT 1
31985: ARRAY
31986: PPUSH
31987: LD_VAR 0 4
31991: PUSH
31992: LD_INT 2
31994: ARRAY
31995: PPUSH
31996: CALL_OW 458
32000: NOT
32001: IFFALSE 32005
// continue ;
32003: GO 31975
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32005: LD_VAR 0 4
32009: PUSH
32010: LD_INT 1
32012: ARRAY
32013: PPUSH
32014: LD_VAR 0 4
32018: PUSH
32019: LD_INT 2
32021: ARRAY
32022: PPUSH
32023: CALL_OW 428
32027: PUSH
32028: LD_VAR 0 5
32032: IN
32033: IFFALSE 32062
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32035: LD_VAR 0 4
32039: PUSH
32040: LD_INT 1
32042: ARRAY
32043: PPUSH
32044: LD_VAR 0 4
32048: PUSH
32049: LD_INT 2
32051: ARRAY
32052: PPUSH
32053: LD_VAR 0 1
32057: PPUSH
32058: CALL_OW 456
// end ;
32062: GO 31975
32064: POP
32065: POP
// end ;
32066: LD_VAR 0 3
32070: RET
// export function Count ( array ) ; var i ; begin
32071: LD_INT 0
32073: PPUSH
32074: PPUSH
// result := 0 ;
32075: LD_ADDR_VAR 0 2
32079: PUSH
32080: LD_INT 0
32082: ST_TO_ADDR
// for i in array do
32083: LD_ADDR_VAR 0 3
32087: PUSH
32088: LD_VAR 0 1
32092: PUSH
32093: FOR_IN
32094: IFFALSE 32118
// if i then
32096: LD_VAR 0 3
32100: IFFALSE 32116
// result := result + 1 ;
32102: LD_ADDR_VAR 0 2
32106: PUSH
32107: LD_VAR 0 2
32111: PUSH
32112: LD_INT 1
32114: PLUS
32115: ST_TO_ADDR
32116: GO 32093
32118: POP
32119: POP
// end ;
32120: LD_VAR 0 2
32124: RET
// export function IsEmpty ( building ) ; begin
32125: LD_INT 0
32127: PPUSH
// if not building then
32128: LD_VAR 0 1
32132: NOT
32133: IFFALSE 32137
// exit ;
32135: GO 32180
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32137: LD_ADDR_VAR 0 2
32141: PUSH
32142: LD_VAR 0 1
32146: PUSH
32147: LD_INT 22
32149: PUSH
32150: LD_VAR 0 1
32154: PPUSH
32155: CALL_OW 255
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 58
32166: PUSH
32167: EMPTY
32168: LIST
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PPUSH
32174: CALL_OW 69
32178: IN
32179: ST_TO_ADDR
// end ;
32180: LD_VAR 0 2
32184: RET
// export function IsNotFull ( building ) ; var places ; begin
32185: LD_INT 0
32187: PPUSH
32188: PPUSH
// if not building then
32189: LD_VAR 0 1
32193: NOT
32194: IFFALSE 32198
// exit ;
32196: GO 32369
// result := false ;
32198: LD_ADDR_VAR 0 2
32202: PUSH
32203: LD_INT 0
32205: ST_TO_ADDR
// places := 0 ;
32206: LD_ADDR_VAR 0 3
32210: PUSH
32211: LD_INT 0
32213: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32214: LD_VAR 0 1
32218: PPUSH
32219: CALL_OW 266
32223: PUSH
32224: LD_INT 0
32226: DOUBLE
32227: EQUAL
32228: IFTRUE 32286
32230: LD_INT 1
32232: DOUBLE
32233: EQUAL
32234: IFTRUE 32286
32236: LD_INT 6
32238: DOUBLE
32239: EQUAL
32240: IFTRUE 32286
32242: LD_INT 7
32244: DOUBLE
32245: EQUAL
32246: IFTRUE 32286
32248: LD_INT 8
32250: DOUBLE
32251: EQUAL
32252: IFTRUE 32286
32254: LD_INT 4
32256: DOUBLE
32257: EQUAL
32258: IFTRUE 32286
32260: LD_INT 5
32262: DOUBLE
32263: EQUAL
32264: IFTRUE 32286
32266: LD_INT 2
32268: DOUBLE
32269: EQUAL
32270: IFTRUE 32286
32272: LD_INT 3
32274: DOUBLE
32275: EQUAL
32276: IFTRUE 32286
32278: LD_INT 35
32280: DOUBLE
32281: EQUAL
32282: IFTRUE 32286
32284: GO 32297
32286: POP
// places := 6 ; b_bunker , b_breastwork :
32287: LD_ADDR_VAR 0 3
32291: PUSH
32292: LD_INT 6
32294: ST_TO_ADDR
32295: GO 32342
32297: LD_INT 32
32299: DOUBLE
32300: EQUAL
32301: IFTRUE 32311
32303: LD_INT 31
32305: DOUBLE
32306: EQUAL
32307: IFTRUE 32311
32309: GO 32322
32311: POP
// places := 1 ; b_control_tower :
32312: LD_ADDR_VAR 0 3
32316: PUSH
32317: LD_INT 1
32319: ST_TO_ADDR
32320: GO 32342
32322: LD_INT 36
32324: DOUBLE
32325: EQUAL
32326: IFTRUE 32330
32328: GO 32341
32330: POP
// places := 3 ; end ;
32331: LD_ADDR_VAR 0 3
32335: PUSH
32336: LD_INT 3
32338: ST_TO_ADDR
32339: GO 32342
32341: POP
// if places then
32342: LD_VAR 0 3
32346: IFFALSE 32369
// result := UnitsInside ( building ) < places ;
32348: LD_ADDR_VAR 0 2
32352: PUSH
32353: LD_VAR 0 1
32357: PPUSH
32358: CALL_OW 313
32362: PUSH
32363: LD_VAR 0 3
32367: LESS
32368: ST_TO_ADDR
// end ;
32369: LD_VAR 0 2
32373: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32374: LD_INT 0
32376: PPUSH
32377: PPUSH
32378: PPUSH
32379: PPUSH
// tmp := [ ] ;
32380: LD_ADDR_VAR 0 3
32384: PUSH
32385: EMPTY
32386: ST_TO_ADDR
// list := [ ] ;
32387: LD_ADDR_VAR 0 5
32391: PUSH
32392: EMPTY
32393: ST_TO_ADDR
// for i = 16 to 25 do
32394: LD_ADDR_VAR 0 4
32398: PUSH
32399: DOUBLE
32400: LD_INT 16
32402: DEC
32403: ST_TO_ADDR
32404: LD_INT 25
32406: PUSH
32407: FOR_TO
32408: IFFALSE 32481
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32410: LD_ADDR_VAR 0 3
32414: PUSH
32415: LD_VAR 0 3
32419: PUSH
32420: LD_INT 22
32422: PUSH
32423: LD_VAR 0 1
32427: PPUSH
32428: CALL_OW 255
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 91
32439: PUSH
32440: LD_VAR 0 1
32444: PUSH
32445: LD_INT 6
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 30
32455: PUSH
32456: LD_VAR 0 4
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: LIST
32469: PUSH
32470: EMPTY
32471: LIST
32472: PPUSH
32473: CALL_OW 69
32477: ADD
32478: ST_TO_ADDR
32479: GO 32407
32481: POP
32482: POP
// for i = 1 to tmp do
32483: LD_ADDR_VAR 0 4
32487: PUSH
32488: DOUBLE
32489: LD_INT 1
32491: DEC
32492: ST_TO_ADDR
32493: LD_VAR 0 3
32497: PUSH
32498: FOR_TO
32499: IFFALSE 32587
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32501: LD_ADDR_VAR 0 5
32505: PUSH
32506: LD_VAR 0 5
32510: PUSH
32511: LD_VAR 0 3
32515: PUSH
32516: LD_VAR 0 4
32520: ARRAY
32521: PPUSH
32522: CALL_OW 266
32526: PUSH
32527: LD_VAR 0 3
32531: PUSH
32532: LD_VAR 0 4
32536: ARRAY
32537: PPUSH
32538: CALL_OW 250
32542: PUSH
32543: LD_VAR 0 3
32547: PUSH
32548: LD_VAR 0 4
32552: ARRAY
32553: PPUSH
32554: CALL_OW 251
32558: PUSH
32559: LD_VAR 0 3
32563: PUSH
32564: LD_VAR 0 4
32568: ARRAY
32569: PPUSH
32570: CALL_OW 254
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: PUSH
32581: EMPTY
32582: LIST
32583: ADD
32584: ST_TO_ADDR
32585: GO 32498
32587: POP
32588: POP
// result := list ;
32589: LD_ADDR_VAR 0 2
32593: PUSH
32594: LD_VAR 0 5
32598: ST_TO_ADDR
// end ;
32599: LD_VAR 0 2
32603: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32604: LD_INT 0
32606: PPUSH
32607: PPUSH
32608: PPUSH
32609: PPUSH
32610: PPUSH
32611: PPUSH
32612: PPUSH
// if not factory then
32613: LD_VAR 0 1
32617: NOT
32618: IFFALSE 32622
// exit ;
32620: GO 33215
// if control = control_apeman then
32622: LD_VAR 0 4
32626: PUSH
32627: LD_INT 5
32629: EQUAL
32630: IFFALSE 32739
// begin tmp := UnitsInside ( factory ) ;
32632: LD_ADDR_VAR 0 8
32636: PUSH
32637: LD_VAR 0 1
32641: PPUSH
32642: CALL_OW 313
32646: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32647: LD_VAR 0 8
32651: PPUSH
32652: LD_INT 25
32654: PUSH
32655: LD_INT 12
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PPUSH
32662: CALL_OW 72
32666: NOT
32667: IFFALSE 32677
// control := control_manual ;
32669: LD_ADDR_VAR 0 4
32673: PUSH
32674: LD_INT 1
32676: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32677: LD_ADDR_VAR 0 8
32681: PUSH
32682: LD_VAR 0 1
32686: PPUSH
32687: CALL 32374 0 1
32691: ST_TO_ADDR
// if tmp then
32692: LD_VAR 0 8
32696: IFFALSE 32739
// begin for i in tmp do
32698: LD_ADDR_VAR 0 7
32702: PUSH
32703: LD_VAR 0 8
32707: PUSH
32708: FOR_IN
32709: IFFALSE 32737
// if i [ 1 ] = b_ext_radio then
32711: LD_VAR 0 7
32715: PUSH
32716: LD_INT 1
32718: ARRAY
32719: PUSH
32720: LD_INT 22
32722: EQUAL
32723: IFFALSE 32735
// begin control := control_remote ;
32725: LD_ADDR_VAR 0 4
32729: PUSH
32730: LD_INT 2
32732: ST_TO_ADDR
// break ;
32733: GO 32737
// end ;
32735: GO 32708
32737: POP
32738: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32739: LD_VAR 0 1
32743: PPUSH
32744: LD_VAR 0 2
32748: PPUSH
32749: LD_VAR 0 3
32753: PPUSH
32754: LD_VAR 0 4
32758: PPUSH
32759: LD_VAR 0 5
32763: PPUSH
32764: CALL_OW 448
32768: IFFALSE 32803
// begin result := [ chassis , engine , control , weapon ] ;
32770: LD_ADDR_VAR 0 6
32774: PUSH
32775: LD_VAR 0 2
32779: PUSH
32780: LD_VAR 0 3
32784: PUSH
32785: LD_VAR 0 4
32789: PUSH
32790: LD_VAR 0 5
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: ST_TO_ADDR
// exit ;
32801: GO 33215
// end ; _chassis := AvailableChassisList ( factory ) ;
32803: LD_ADDR_VAR 0 9
32807: PUSH
32808: LD_VAR 0 1
32812: PPUSH
32813: CALL_OW 475
32817: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32818: LD_ADDR_VAR 0 11
32822: PUSH
32823: LD_VAR 0 1
32827: PPUSH
32828: CALL_OW 476
32832: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32833: LD_ADDR_VAR 0 12
32837: PUSH
32838: LD_VAR 0 1
32842: PPUSH
32843: CALL_OW 477
32847: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32848: LD_ADDR_VAR 0 10
32852: PUSH
32853: LD_VAR 0 1
32857: PPUSH
32858: CALL_OW 478
32862: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32863: LD_VAR 0 9
32867: NOT
32868: PUSH
32869: LD_VAR 0 11
32873: NOT
32874: OR
32875: PUSH
32876: LD_VAR 0 12
32880: NOT
32881: OR
32882: PUSH
32883: LD_VAR 0 10
32887: NOT
32888: OR
32889: IFFALSE 32924
// begin result := [ chassis , engine , control , weapon ] ;
32891: LD_ADDR_VAR 0 6
32895: PUSH
32896: LD_VAR 0 2
32900: PUSH
32901: LD_VAR 0 3
32905: PUSH
32906: LD_VAR 0 4
32910: PUSH
32911: LD_VAR 0 5
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: ST_TO_ADDR
// exit ;
32922: GO 33215
// end ; if not chassis in _chassis then
32924: LD_VAR 0 2
32928: PUSH
32929: LD_VAR 0 9
32933: IN
32934: NOT
32935: IFFALSE 32961
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32937: LD_ADDR_VAR 0 2
32941: PUSH
32942: LD_VAR 0 9
32946: PUSH
32947: LD_INT 1
32949: PPUSH
32950: LD_VAR 0 9
32954: PPUSH
32955: CALL_OW 12
32959: ARRAY
32960: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32961: LD_VAR 0 2
32965: PPUSH
32966: LD_VAR 0 3
32970: PPUSH
32971: CALL 33220 0 2
32975: NOT
32976: IFFALSE 33035
// repeat engine := _engine [ 1 ] ;
32978: LD_ADDR_VAR 0 3
32982: PUSH
32983: LD_VAR 0 11
32987: PUSH
32988: LD_INT 1
32990: ARRAY
32991: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32992: LD_ADDR_VAR 0 11
32996: PUSH
32997: LD_VAR 0 11
33001: PPUSH
33002: LD_INT 1
33004: PPUSH
33005: CALL_OW 3
33009: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33010: LD_VAR 0 2
33014: PPUSH
33015: LD_VAR 0 3
33019: PPUSH
33020: CALL 33220 0 2
33024: PUSH
33025: LD_VAR 0 11
33029: PUSH
33030: EMPTY
33031: EQUAL
33032: OR
33033: IFFALSE 32978
// if not control in _control then
33035: LD_VAR 0 4
33039: PUSH
33040: LD_VAR 0 12
33044: IN
33045: NOT
33046: IFFALSE 33072
// control := _control [ rand ( 1 , _control ) ] ;
33048: LD_ADDR_VAR 0 4
33052: PUSH
33053: LD_VAR 0 12
33057: PUSH
33058: LD_INT 1
33060: PPUSH
33061: LD_VAR 0 12
33065: PPUSH
33066: CALL_OW 12
33070: ARRAY
33071: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33072: LD_VAR 0 2
33076: PPUSH
33077: LD_VAR 0 5
33081: PPUSH
33082: CALL 33440 0 2
33086: NOT
33087: IFFALSE 33146
// repeat weapon := _weapon [ 1 ] ;
33089: LD_ADDR_VAR 0 5
33093: PUSH
33094: LD_VAR 0 10
33098: PUSH
33099: LD_INT 1
33101: ARRAY
33102: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33103: LD_ADDR_VAR 0 10
33107: PUSH
33108: LD_VAR 0 10
33112: PPUSH
33113: LD_INT 1
33115: PPUSH
33116: CALL_OW 3
33120: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33121: LD_VAR 0 2
33125: PPUSH
33126: LD_VAR 0 5
33130: PPUSH
33131: CALL 33440 0 2
33135: PUSH
33136: LD_VAR 0 10
33140: PUSH
33141: EMPTY
33142: EQUAL
33143: OR
33144: IFFALSE 33089
// result := [ ] ;
33146: LD_ADDR_VAR 0 6
33150: PUSH
33151: EMPTY
33152: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33153: LD_VAR 0 1
33157: PPUSH
33158: LD_VAR 0 2
33162: PPUSH
33163: LD_VAR 0 3
33167: PPUSH
33168: LD_VAR 0 4
33172: PPUSH
33173: LD_VAR 0 5
33177: PPUSH
33178: CALL_OW 448
33182: IFFALSE 33215
// result := [ chassis , engine , control , weapon ] ;
33184: LD_ADDR_VAR 0 6
33188: PUSH
33189: LD_VAR 0 2
33193: PUSH
33194: LD_VAR 0 3
33198: PUSH
33199: LD_VAR 0 4
33203: PUSH
33204: LD_VAR 0 5
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: ST_TO_ADDR
// end ;
33215: LD_VAR 0 6
33219: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33220: LD_INT 0
33222: PPUSH
// if not chassis or not engine then
33223: LD_VAR 0 1
33227: NOT
33228: PUSH
33229: LD_VAR 0 2
33233: NOT
33234: OR
33235: IFFALSE 33239
// exit ;
33237: GO 33435
// case engine of engine_solar :
33239: LD_VAR 0 2
33243: PUSH
33244: LD_INT 2
33246: DOUBLE
33247: EQUAL
33248: IFTRUE 33252
33250: GO 33290
33252: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33253: LD_ADDR_VAR 0 3
33257: PUSH
33258: LD_INT 11
33260: PUSH
33261: LD_INT 12
33263: PUSH
33264: LD_INT 13
33266: PUSH
33267: LD_INT 14
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: LD_INT 2
33275: PUSH
33276: LD_INT 3
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: ST_TO_ADDR
33288: GO 33419
33290: LD_INT 1
33292: DOUBLE
33293: EQUAL
33294: IFTRUE 33298
33296: GO 33360
33298: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33299: LD_ADDR_VAR 0 3
33303: PUSH
33304: LD_INT 11
33306: PUSH
33307: LD_INT 12
33309: PUSH
33310: LD_INT 13
33312: PUSH
33313: LD_INT 14
33315: PUSH
33316: LD_INT 1
33318: PUSH
33319: LD_INT 2
33321: PUSH
33322: LD_INT 3
33324: PUSH
33325: LD_INT 4
33327: PUSH
33328: LD_INT 5
33330: PUSH
33331: LD_INT 21
33333: PUSH
33334: LD_INT 23
33336: PUSH
33337: LD_INT 22
33339: PUSH
33340: LD_INT 24
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: ST_TO_ADDR
33358: GO 33419
33360: LD_INT 3
33362: DOUBLE
33363: EQUAL
33364: IFTRUE 33368
33366: GO 33418
33368: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33369: LD_ADDR_VAR 0 3
33373: PUSH
33374: LD_INT 13
33376: PUSH
33377: LD_INT 14
33379: PUSH
33380: LD_INT 2
33382: PUSH
33383: LD_INT 3
33385: PUSH
33386: LD_INT 4
33388: PUSH
33389: LD_INT 5
33391: PUSH
33392: LD_INT 21
33394: PUSH
33395: LD_INT 22
33397: PUSH
33398: LD_INT 23
33400: PUSH
33401: LD_INT 24
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: ST_TO_ADDR
33416: GO 33419
33418: POP
// result := ( chassis in result ) ;
33419: LD_ADDR_VAR 0 3
33423: PUSH
33424: LD_VAR 0 1
33428: PUSH
33429: LD_VAR 0 3
33433: IN
33434: ST_TO_ADDR
// end ;
33435: LD_VAR 0 3
33439: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33440: LD_INT 0
33442: PPUSH
// if not chassis or not weapon then
33443: LD_VAR 0 1
33447: NOT
33448: PUSH
33449: LD_VAR 0 2
33453: NOT
33454: OR
33455: IFFALSE 33459
// exit ;
33457: GO 34521
// case weapon of us_machine_gun :
33459: LD_VAR 0 2
33463: PUSH
33464: LD_INT 2
33466: DOUBLE
33467: EQUAL
33468: IFTRUE 33472
33470: GO 33502
33472: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33473: LD_ADDR_VAR 0 3
33477: PUSH
33478: LD_INT 1
33480: PUSH
33481: LD_INT 2
33483: PUSH
33484: LD_INT 3
33486: PUSH
33487: LD_INT 4
33489: PUSH
33490: LD_INT 5
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: ST_TO_ADDR
33500: GO 34505
33502: LD_INT 3
33504: DOUBLE
33505: EQUAL
33506: IFTRUE 33510
33508: GO 33540
33510: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33511: LD_ADDR_VAR 0 3
33515: PUSH
33516: LD_INT 1
33518: PUSH
33519: LD_INT 2
33521: PUSH
33522: LD_INT 3
33524: PUSH
33525: LD_INT 4
33527: PUSH
33528: LD_INT 5
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: ST_TO_ADDR
33538: GO 34505
33540: LD_INT 11
33542: DOUBLE
33543: EQUAL
33544: IFTRUE 33548
33546: GO 33578
33548: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33549: LD_ADDR_VAR 0 3
33553: PUSH
33554: LD_INT 1
33556: PUSH
33557: LD_INT 2
33559: PUSH
33560: LD_INT 3
33562: PUSH
33563: LD_INT 4
33565: PUSH
33566: LD_INT 5
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: ST_TO_ADDR
33576: GO 34505
33578: LD_INT 4
33580: DOUBLE
33581: EQUAL
33582: IFTRUE 33586
33584: GO 33612
33586: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33587: LD_ADDR_VAR 0 3
33591: PUSH
33592: LD_INT 2
33594: PUSH
33595: LD_INT 3
33597: PUSH
33598: LD_INT 4
33600: PUSH
33601: LD_INT 5
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: ST_TO_ADDR
33610: GO 34505
33612: LD_INT 5
33614: DOUBLE
33615: EQUAL
33616: IFTRUE 33620
33618: GO 33646
33620: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33621: LD_ADDR_VAR 0 3
33625: PUSH
33626: LD_INT 2
33628: PUSH
33629: LD_INT 3
33631: PUSH
33632: LD_INT 4
33634: PUSH
33635: LD_INT 5
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: ST_TO_ADDR
33644: GO 34505
33646: LD_INT 9
33648: DOUBLE
33649: EQUAL
33650: IFTRUE 33654
33652: GO 33680
33654: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33655: LD_ADDR_VAR 0 3
33659: PUSH
33660: LD_INT 2
33662: PUSH
33663: LD_INT 3
33665: PUSH
33666: LD_INT 4
33668: PUSH
33669: LD_INT 5
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: ST_TO_ADDR
33678: GO 34505
33680: LD_INT 7
33682: DOUBLE
33683: EQUAL
33684: IFTRUE 33688
33686: GO 33714
33688: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33689: LD_ADDR_VAR 0 3
33693: PUSH
33694: LD_INT 2
33696: PUSH
33697: LD_INT 3
33699: PUSH
33700: LD_INT 4
33702: PUSH
33703: LD_INT 5
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: ST_TO_ADDR
33712: GO 34505
33714: LD_INT 12
33716: DOUBLE
33717: EQUAL
33718: IFTRUE 33722
33720: GO 33748
33722: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33723: LD_ADDR_VAR 0 3
33727: PUSH
33728: LD_INT 2
33730: PUSH
33731: LD_INT 3
33733: PUSH
33734: LD_INT 4
33736: PUSH
33737: LD_INT 5
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: ST_TO_ADDR
33746: GO 34505
33748: LD_INT 13
33750: DOUBLE
33751: EQUAL
33752: IFTRUE 33756
33754: GO 33782
33756: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33757: LD_ADDR_VAR 0 3
33761: PUSH
33762: LD_INT 2
33764: PUSH
33765: LD_INT 3
33767: PUSH
33768: LD_INT 4
33770: PUSH
33771: LD_INT 5
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: ST_TO_ADDR
33780: GO 34505
33782: LD_INT 14
33784: DOUBLE
33785: EQUAL
33786: IFTRUE 33790
33788: GO 33808
33790: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33791: LD_ADDR_VAR 0 3
33795: PUSH
33796: LD_INT 4
33798: PUSH
33799: LD_INT 5
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: ST_TO_ADDR
33806: GO 34505
33808: LD_INT 6
33810: DOUBLE
33811: EQUAL
33812: IFTRUE 33816
33814: GO 33834
33816: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33817: LD_ADDR_VAR 0 3
33821: PUSH
33822: LD_INT 4
33824: PUSH
33825: LD_INT 5
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: ST_TO_ADDR
33832: GO 34505
33834: LD_INT 10
33836: DOUBLE
33837: EQUAL
33838: IFTRUE 33842
33840: GO 33860
33842: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33843: LD_ADDR_VAR 0 3
33847: PUSH
33848: LD_INT 4
33850: PUSH
33851: LD_INT 5
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: ST_TO_ADDR
33858: GO 34505
33860: LD_INT 22
33862: DOUBLE
33863: EQUAL
33864: IFTRUE 33868
33866: GO 33894
33868: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33869: LD_ADDR_VAR 0 3
33873: PUSH
33874: LD_INT 11
33876: PUSH
33877: LD_INT 12
33879: PUSH
33880: LD_INT 13
33882: PUSH
33883: LD_INT 14
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: ST_TO_ADDR
33892: GO 34505
33894: LD_INT 23
33896: DOUBLE
33897: EQUAL
33898: IFTRUE 33902
33900: GO 33928
33902: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33903: LD_ADDR_VAR 0 3
33907: PUSH
33908: LD_INT 11
33910: PUSH
33911: LD_INT 12
33913: PUSH
33914: LD_INT 13
33916: PUSH
33917: LD_INT 14
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: ST_TO_ADDR
33926: GO 34505
33928: LD_INT 24
33930: DOUBLE
33931: EQUAL
33932: IFTRUE 33936
33934: GO 33962
33936: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33937: LD_ADDR_VAR 0 3
33941: PUSH
33942: LD_INT 11
33944: PUSH
33945: LD_INT 12
33947: PUSH
33948: LD_INT 13
33950: PUSH
33951: LD_INT 14
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: ST_TO_ADDR
33960: GO 34505
33962: LD_INT 30
33964: DOUBLE
33965: EQUAL
33966: IFTRUE 33970
33968: GO 33996
33970: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33971: LD_ADDR_VAR 0 3
33975: PUSH
33976: LD_INT 11
33978: PUSH
33979: LD_INT 12
33981: PUSH
33982: LD_INT 13
33984: PUSH
33985: LD_INT 14
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: ST_TO_ADDR
33994: GO 34505
33996: LD_INT 25
33998: DOUBLE
33999: EQUAL
34000: IFTRUE 34004
34002: GO 34022
34004: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34005: LD_ADDR_VAR 0 3
34009: PUSH
34010: LD_INT 13
34012: PUSH
34013: LD_INT 14
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: ST_TO_ADDR
34020: GO 34505
34022: LD_INT 27
34024: DOUBLE
34025: EQUAL
34026: IFTRUE 34030
34028: GO 34048
34030: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34031: LD_ADDR_VAR 0 3
34035: PUSH
34036: LD_INT 13
34038: PUSH
34039: LD_INT 14
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: ST_TO_ADDR
34046: GO 34505
34048: LD_EXP 50
34052: DOUBLE
34053: EQUAL
34054: IFTRUE 34058
34056: GO 34084
34058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34059: LD_ADDR_VAR 0 3
34063: PUSH
34064: LD_INT 11
34066: PUSH
34067: LD_INT 12
34069: PUSH
34070: LD_INT 13
34072: PUSH
34073: LD_INT 14
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: ST_TO_ADDR
34082: GO 34505
34084: LD_INT 28
34086: DOUBLE
34087: EQUAL
34088: IFTRUE 34092
34090: GO 34110
34092: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34093: LD_ADDR_VAR 0 3
34097: PUSH
34098: LD_INT 13
34100: PUSH
34101: LD_INT 14
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: ST_TO_ADDR
34108: GO 34505
34110: LD_INT 29
34112: DOUBLE
34113: EQUAL
34114: IFTRUE 34118
34116: GO 34136
34118: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34119: LD_ADDR_VAR 0 3
34123: PUSH
34124: LD_INT 13
34126: PUSH
34127: LD_INT 14
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: ST_TO_ADDR
34134: GO 34505
34136: LD_INT 31
34138: DOUBLE
34139: EQUAL
34140: IFTRUE 34144
34142: GO 34162
34144: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34145: LD_ADDR_VAR 0 3
34149: PUSH
34150: LD_INT 13
34152: PUSH
34153: LD_INT 14
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: ST_TO_ADDR
34160: GO 34505
34162: LD_INT 26
34164: DOUBLE
34165: EQUAL
34166: IFTRUE 34170
34168: GO 34188
34170: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34171: LD_ADDR_VAR 0 3
34175: PUSH
34176: LD_INT 13
34178: PUSH
34179: LD_INT 14
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: ST_TO_ADDR
34186: GO 34505
34188: LD_INT 42
34190: DOUBLE
34191: EQUAL
34192: IFTRUE 34196
34194: GO 34222
34196: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34197: LD_ADDR_VAR 0 3
34201: PUSH
34202: LD_INT 21
34204: PUSH
34205: LD_INT 22
34207: PUSH
34208: LD_INT 23
34210: PUSH
34211: LD_INT 24
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: ST_TO_ADDR
34220: GO 34505
34222: LD_INT 43
34224: DOUBLE
34225: EQUAL
34226: IFTRUE 34230
34228: GO 34256
34230: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34231: LD_ADDR_VAR 0 3
34235: PUSH
34236: LD_INT 21
34238: PUSH
34239: LD_INT 22
34241: PUSH
34242: LD_INT 23
34244: PUSH
34245: LD_INT 24
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: ST_TO_ADDR
34254: GO 34505
34256: LD_INT 44
34258: DOUBLE
34259: EQUAL
34260: IFTRUE 34264
34262: GO 34290
34264: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34265: LD_ADDR_VAR 0 3
34269: PUSH
34270: LD_INT 21
34272: PUSH
34273: LD_INT 22
34275: PUSH
34276: LD_INT 23
34278: PUSH
34279: LD_INT 24
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: ST_TO_ADDR
34288: GO 34505
34290: LD_INT 45
34292: DOUBLE
34293: EQUAL
34294: IFTRUE 34298
34296: GO 34324
34298: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34299: LD_ADDR_VAR 0 3
34303: PUSH
34304: LD_INT 21
34306: PUSH
34307: LD_INT 22
34309: PUSH
34310: LD_INT 23
34312: PUSH
34313: LD_INT 24
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: ST_TO_ADDR
34322: GO 34505
34324: LD_INT 49
34326: DOUBLE
34327: EQUAL
34328: IFTRUE 34332
34330: GO 34358
34332: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34333: LD_ADDR_VAR 0 3
34337: PUSH
34338: LD_INT 21
34340: PUSH
34341: LD_INT 22
34343: PUSH
34344: LD_INT 23
34346: PUSH
34347: LD_INT 24
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: ST_TO_ADDR
34356: GO 34505
34358: LD_INT 51
34360: DOUBLE
34361: EQUAL
34362: IFTRUE 34366
34364: GO 34392
34366: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34367: LD_ADDR_VAR 0 3
34371: PUSH
34372: LD_INT 21
34374: PUSH
34375: LD_INT 22
34377: PUSH
34378: LD_INT 23
34380: PUSH
34381: LD_INT 24
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: ST_TO_ADDR
34390: GO 34505
34392: LD_INT 52
34394: DOUBLE
34395: EQUAL
34396: IFTRUE 34400
34398: GO 34426
34400: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34401: LD_ADDR_VAR 0 3
34405: PUSH
34406: LD_INT 21
34408: PUSH
34409: LD_INT 22
34411: PUSH
34412: LD_INT 23
34414: PUSH
34415: LD_INT 24
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: ST_TO_ADDR
34424: GO 34505
34426: LD_INT 53
34428: DOUBLE
34429: EQUAL
34430: IFTRUE 34434
34432: GO 34452
34434: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34435: LD_ADDR_VAR 0 3
34439: PUSH
34440: LD_INT 23
34442: PUSH
34443: LD_INT 24
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: ST_TO_ADDR
34450: GO 34505
34452: LD_INT 46
34454: DOUBLE
34455: EQUAL
34456: IFTRUE 34460
34458: GO 34478
34460: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34461: LD_ADDR_VAR 0 3
34465: PUSH
34466: LD_INT 23
34468: PUSH
34469: LD_INT 24
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: ST_TO_ADDR
34476: GO 34505
34478: LD_INT 47
34480: DOUBLE
34481: EQUAL
34482: IFTRUE 34486
34484: GO 34504
34486: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34487: LD_ADDR_VAR 0 3
34491: PUSH
34492: LD_INT 23
34494: PUSH
34495: LD_INT 24
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: ST_TO_ADDR
34502: GO 34505
34504: POP
// result := ( chassis in result ) ;
34505: LD_ADDR_VAR 0 3
34509: PUSH
34510: LD_VAR 0 1
34514: PUSH
34515: LD_VAR 0 3
34519: IN
34520: ST_TO_ADDR
// end ;
34521: LD_VAR 0 3
34525: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34526: LD_INT 0
34528: PPUSH
34529: PPUSH
34530: PPUSH
34531: PPUSH
34532: PPUSH
34533: PPUSH
34534: PPUSH
// result := array ;
34535: LD_ADDR_VAR 0 5
34539: PUSH
34540: LD_VAR 0 1
34544: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34545: LD_VAR 0 1
34549: NOT
34550: PUSH
34551: LD_VAR 0 2
34555: NOT
34556: OR
34557: PUSH
34558: LD_VAR 0 3
34562: NOT
34563: OR
34564: PUSH
34565: LD_VAR 0 2
34569: PUSH
34570: LD_VAR 0 1
34574: GREATER
34575: OR
34576: PUSH
34577: LD_VAR 0 3
34581: PUSH
34582: LD_VAR 0 1
34586: GREATER
34587: OR
34588: IFFALSE 34592
// exit ;
34590: GO 34888
// if direction then
34592: LD_VAR 0 4
34596: IFFALSE 34660
// begin d := 1 ;
34598: LD_ADDR_VAR 0 9
34602: PUSH
34603: LD_INT 1
34605: ST_TO_ADDR
// if i_from > i_to then
34606: LD_VAR 0 2
34610: PUSH
34611: LD_VAR 0 3
34615: GREATER
34616: IFFALSE 34642
// length := ( array - i_from ) + i_to else
34618: LD_ADDR_VAR 0 11
34622: PUSH
34623: LD_VAR 0 1
34627: PUSH
34628: LD_VAR 0 2
34632: MINUS
34633: PUSH
34634: LD_VAR 0 3
34638: PLUS
34639: ST_TO_ADDR
34640: GO 34658
// length := i_to - i_from ;
34642: LD_ADDR_VAR 0 11
34646: PUSH
34647: LD_VAR 0 3
34651: PUSH
34652: LD_VAR 0 2
34656: MINUS
34657: ST_TO_ADDR
// end else
34658: GO 34721
// begin d := - 1 ;
34660: LD_ADDR_VAR 0 9
34664: PUSH
34665: LD_INT 1
34667: NEG
34668: ST_TO_ADDR
// if i_from > i_to then
34669: LD_VAR 0 2
34673: PUSH
34674: LD_VAR 0 3
34678: GREATER
34679: IFFALSE 34699
// length := i_from - i_to else
34681: LD_ADDR_VAR 0 11
34685: PUSH
34686: LD_VAR 0 2
34690: PUSH
34691: LD_VAR 0 3
34695: MINUS
34696: ST_TO_ADDR
34697: GO 34721
// length := ( array - i_to ) + i_from ;
34699: LD_ADDR_VAR 0 11
34703: PUSH
34704: LD_VAR 0 1
34708: PUSH
34709: LD_VAR 0 3
34713: MINUS
34714: PUSH
34715: LD_VAR 0 2
34719: PLUS
34720: ST_TO_ADDR
// end ; if not length then
34721: LD_VAR 0 11
34725: NOT
34726: IFFALSE 34730
// exit ;
34728: GO 34888
// tmp := array ;
34730: LD_ADDR_VAR 0 10
34734: PUSH
34735: LD_VAR 0 1
34739: ST_TO_ADDR
// for i = 1 to length do
34740: LD_ADDR_VAR 0 6
34744: PUSH
34745: DOUBLE
34746: LD_INT 1
34748: DEC
34749: ST_TO_ADDR
34750: LD_VAR 0 11
34754: PUSH
34755: FOR_TO
34756: IFFALSE 34876
// begin for j = 1 to array do
34758: LD_ADDR_VAR 0 7
34762: PUSH
34763: DOUBLE
34764: LD_INT 1
34766: DEC
34767: ST_TO_ADDR
34768: LD_VAR 0 1
34772: PUSH
34773: FOR_TO
34774: IFFALSE 34862
// begin k := j + d ;
34776: LD_ADDR_VAR 0 8
34780: PUSH
34781: LD_VAR 0 7
34785: PUSH
34786: LD_VAR 0 9
34790: PLUS
34791: ST_TO_ADDR
// if k > array then
34792: LD_VAR 0 8
34796: PUSH
34797: LD_VAR 0 1
34801: GREATER
34802: IFFALSE 34812
// k := 1 ;
34804: LD_ADDR_VAR 0 8
34808: PUSH
34809: LD_INT 1
34811: ST_TO_ADDR
// if not k then
34812: LD_VAR 0 8
34816: NOT
34817: IFFALSE 34829
// k := array ;
34819: LD_ADDR_VAR 0 8
34823: PUSH
34824: LD_VAR 0 1
34828: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34829: LD_ADDR_VAR 0 10
34833: PUSH
34834: LD_VAR 0 10
34838: PPUSH
34839: LD_VAR 0 8
34843: PPUSH
34844: LD_VAR 0 1
34848: PUSH
34849: LD_VAR 0 7
34853: ARRAY
34854: PPUSH
34855: CALL_OW 1
34859: ST_TO_ADDR
// end ;
34860: GO 34773
34862: POP
34863: POP
// array := tmp ;
34864: LD_ADDR_VAR 0 1
34868: PUSH
34869: LD_VAR 0 10
34873: ST_TO_ADDR
// end ;
34874: GO 34755
34876: POP
34877: POP
// result := array ;
34878: LD_ADDR_VAR 0 5
34882: PUSH
34883: LD_VAR 0 1
34887: ST_TO_ADDR
// end ;
34888: LD_VAR 0 5
34892: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34893: LD_INT 0
34895: PPUSH
34896: PPUSH
// result := 0 ;
34897: LD_ADDR_VAR 0 3
34901: PUSH
34902: LD_INT 0
34904: ST_TO_ADDR
// if not array or not value in array then
34905: LD_VAR 0 1
34909: NOT
34910: PUSH
34911: LD_VAR 0 2
34915: PUSH
34916: LD_VAR 0 1
34920: IN
34921: NOT
34922: OR
34923: IFFALSE 34927
// exit ;
34925: GO 34981
// for i = 1 to array do
34927: LD_ADDR_VAR 0 4
34931: PUSH
34932: DOUBLE
34933: LD_INT 1
34935: DEC
34936: ST_TO_ADDR
34937: LD_VAR 0 1
34941: PUSH
34942: FOR_TO
34943: IFFALSE 34979
// if value = array [ i ] then
34945: LD_VAR 0 2
34949: PUSH
34950: LD_VAR 0 1
34954: PUSH
34955: LD_VAR 0 4
34959: ARRAY
34960: EQUAL
34961: IFFALSE 34977
// begin result := i ;
34963: LD_ADDR_VAR 0 3
34967: PUSH
34968: LD_VAR 0 4
34972: ST_TO_ADDR
// exit ;
34973: POP
34974: POP
34975: GO 34981
// end ;
34977: GO 34942
34979: POP
34980: POP
// end ;
34981: LD_VAR 0 3
34985: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34986: LD_INT 0
34988: PPUSH
// vc_chassis := chassis ;
34989: LD_ADDR_OWVAR 37
34993: PUSH
34994: LD_VAR 0 1
34998: ST_TO_ADDR
// vc_engine := engine ;
34999: LD_ADDR_OWVAR 39
35003: PUSH
35004: LD_VAR 0 2
35008: ST_TO_ADDR
// vc_control := control ;
35009: LD_ADDR_OWVAR 38
35013: PUSH
35014: LD_VAR 0 3
35018: ST_TO_ADDR
// vc_weapon := weapon ;
35019: LD_ADDR_OWVAR 40
35023: PUSH
35024: LD_VAR 0 4
35028: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35029: LD_ADDR_OWVAR 41
35033: PUSH
35034: LD_VAR 0 5
35038: ST_TO_ADDR
// end ;
35039: LD_VAR 0 6
35043: RET
// export function WantPlant ( unit ) ; var task ; begin
35044: LD_INT 0
35046: PPUSH
35047: PPUSH
// result := false ;
35048: LD_ADDR_VAR 0 2
35052: PUSH
35053: LD_INT 0
35055: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35056: LD_ADDR_VAR 0 3
35060: PUSH
35061: LD_VAR 0 1
35065: PPUSH
35066: CALL_OW 437
35070: ST_TO_ADDR
// if task then
35071: LD_VAR 0 3
35075: IFFALSE 35103
// if task [ 1 ] [ 1 ] = p then
35077: LD_VAR 0 3
35081: PUSH
35082: LD_INT 1
35084: ARRAY
35085: PUSH
35086: LD_INT 1
35088: ARRAY
35089: PUSH
35090: LD_STRING p
35092: EQUAL
35093: IFFALSE 35103
// result := true ;
35095: LD_ADDR_VAR 0 2
35099: PUSH
35100: LD_INT 1
35102: ST_TO_ADDR
// end ;
35103: LD_VAR 0 2
35107: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35108: LD_INT 0
35110: PPUSH
35111: PPUSH
35112: PPUSH
35113: PPUSH
// if pos < 1 then
35114: LD_VAR 0 2
35118: PUSH
35119: LD_INT 1
35121: LESS
35122: IFFALSE 35126
// exit ;
35124: GO 35429
// if pos = 1 then
35126: LD_VAR 0 2
35130: PUSH
35131: LD_INT 1
35133: EQUAL
35134: IFFALSE 35167
// result := Replace ( arr , pos [ 1 ] , value ) else
35136: LD_ADDR_VAR 0 4
35140: PUSH
35141: LD_VAR 0 1
35145: PPUSH
35146: LD_VAR 0 2
35150: PUSH
35151: LD_INT 1
35153: ARRAY
35154: PPUSH
35155: LD_VAR 0 3
35159: PPUSH
35160: CALL_OW 1
35164: ST_TO_ADDR
35165: GO 35429
// begin tmp := arr ;
35167: LD_ADDR_VAR 0 6
35171: PUSH
35172: LD_VAR 0 1
35176: ST_TO_ADDR
// s_arr := [ tmp ] ;
35177: LD_ADDR_VAR 0 7
35181: PUSH
35182: LD_VAR 0 6
35186: PUSH
35187: EMPTY
35188: LIST
35189: ST_TO_ADDR
// for i = 1 to pos - 1 do
35190: LD_ADDR_VAR 0 5
35194: PUSH
35195: DOUBLE
35196: LD_INT 1
35198: DEC
35199: ST_TO_ADDR
35200: LD_VAR 0 2
35204: PUSH
35205: LD_INT 1
35207: MINUS
35208: PUSH
35209: FOR_TO
35210: IFFALSE 35255
// begin tmp := tmp [ pos [ i ] ] ;
35212: LD_ADDR_VAR 0 6
35216: PUSH
35217: LD_VAR 0 6
35221: PUSH
35222: LD_VAR 0 2
35226: PUSH
35227: LD_VAR 0 5
35231: ARRAY
35232: ARRAY
35233: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35234: LD_ADDR_VAR 0 7
35238: PUSH
35239: LD_VAR 0 7
35243: PUSH
35244: LD_VAR 0 6
35248: PUSH
35249: EMPTY
35250: LIST
35251: ADD
35252: ST_TO_ADDR
// end ;
35253: GO 35209
35255: POP
35256: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35257: LD_ADDR_VAR 0 6
35261: PUSH
35262: LD_VAR 0 6
35266: PPUSH
35267: LD_VAR 0 2
35271: PUSH
35272: LD_VAR 0 2
35276: ARRAY
35277: PPUSH
35278: LD_VAR 0 3
35282: PPUSH
35283: CALL_OW 1
35287: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35288: LD_ADDR_VAR 0 7
35292: PUSH
35293: LD_VAR 0 7
35297: PPUSH
35298: LD_VAR 0 7
35302: PPUSH
35303: LD_VAR 0 6
35307: PPUSH
35308: CALL_OW 1
35312: ST_TO_ADDR
// for i = s_arr downto 2 do
35313: LD_ADDR_VAR 0 5
35317: PUSH
35318: DOUBLE
35319: LD_VAR 0 7
35323: INC
35324: ST_TO_ADDR
35325: LD_INT 2
35327: PUSH
35328: FOR_DOWNTO
35329: IFFALSE 35413
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35331: LD_ADDR_VAR 0 6
35335: PUSH
35336: LD_VAR 0 7
35340: PUSH
35341: LD_VAR 0 5
35345: PUSH
35346: LD_INT 1
35348: MINUS
35349: ARRAY
35350: PPUSH
35351: LD_VAR 0 2
35355: PUSH
35356: LD_VAR 0 5
35360: PUSH
35361: LD_INT 1
35363: MINUS
35364: ARRAY
35365: PPUSH
35366: LD_VAR 0 7
35370: PUSH
35371: LD_VAR 0 5
35375: ARRAY
35376: PPUSH
35377: CALL_OW 1
35381: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35382: LD_ADDR_VAR 0 7
35386: PUSH
35387: LD_VAR 0 7
35391: PPUSH
35392: LD_VAR 0 5
35396: PUSH
35397: LD_INT 1
35399: MINUS
35400: PPUSH
35401: LD_VAR 0 6
35405: PPUSH
35406: CALL_OW 1
35410: ST_TO_ADDR
// end ;
35411: GO 35328
35413: POP
35414: POP
// result := s_arr [ 1 ] ;
35415: LD_ADDR_VAR 0 4
35419: PUSH
35420: LD_VAR 0 7
35424: PUSH
35425: LD_INT 1
35427: ARRAY
35428: ST_TO_ADDR
// end ; end ;
35429: LD_VAR 0 4
35433: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35434: LD_INT 0
35436: PPUSH
35437: PPUSH
// if not list then
35438: LD_VAR 0 1
35442: NOT
35443: IFFALSE 35447
// exit ;
35445: GO 35538
// i := list [ pos1 ] ;
35447: LD_ADDR_VAR 0 5
35451: PUSH
35452: LD_VAR 0 1
35456: PUSH
35457: LD_VAR 0 2
35461: ARRAY
35462: ST_TO_ADDR
// if not i then
35463: LD_VAR 0 5
35467: NOT
35468: IFFALSE 35472
// exit ;
35470: GO 35538
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35472: LD_ADDR_VAR 0 1
35476: PUSH
35477: LD_VAR 0 1
35481: PPUSH
35482: LD_VAR 0 2
35486: PPUSH
35487: LD_VAR 0 1
35491: PUSH
35492: LD_VAR 0 3
35496: ARRAY
35497: PPUSH
35498: CALL_OW 1
35502: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35503: LD_ADDR_VAR 0 1
35507: PUSH
35508: LD_VAR 0 1
35512: PPUSH
35513: LD_VAR 0 3
35517: PPUSH
35518: LD_VAR 0 5
35522: PPUSH
35523: CALL_OW 1
35527: ST_TO_ADDR
// result := list ;
35528: LD_ADDR_VAR 0 4
35532: PUSH
35533: LD_VAR 0 1
35537: ST_TO_ADDR
// end ;
35538: LD_VAR 0 4
35542: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35543: LD_INT 0
35545: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35546: LD_ADDR_VAR 0 5
35550: PUSH
35551: LD_VAR 0 1
35555: PPUSH
35556: CALL_OW 250
35560: PPUSH
35561: LD_VAR 0 1
35565: PPUSH
35566: CALL_OW 251
35570: PPUSH
35571: LD_VAR 0 2
35575: PPUSH
35576: LD_VAR 0 3
35580: PPUSH
35581: LD_VAR 0 4
35585: PPUSH
35586: CALL 35596 0 5
35590: ST_TO_ADDR
// end ;
35591: LD_VAR 0 5
35595: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35596: LD_INT 0
35598: PPUSH
35599: PPUSH
35600: PPUSH
35601: PPUSH
// if not list then
35602: LD_VAR 0 3
35606: NOT
35607: IFFALSE 35611
// exit ;
35609: GO 35999
// result := [ ] ;
35611: LD_ADDR_VAR 0 6
35615: PUSH
35616: EMPTY
35617: ST_TO_ADDR
// for i in list do
35618: LD_ADDR_VAR 0 7
35622: PUSH
35623: LD_VAR 0 3
35627: PUSH
35628: FOR_IN
35629: IFFALSE 35831
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35631: LD_ADDR_VAR 0 9
35635: PUSH
35636: LD_VAR 0 7
35640: PPUSH
35641: LD_VAR 0 1
35645: PPUSH
35646: LD_VAR 0 2
35650: PPUSH
35651: CALL_OW 297
35655: ST_TO_ADDR
// if not result then
35656: LD_VAR 0 6
35660: NOT
35661: IFFALSE 35687
// result := [ [ i , tmp ] ] else
35663: LD_ADDR_VAR 0 6
35667: PUSH
35668: LD_VAR 0 7
35672: PUSH
35673: LD_VAR 0 9
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: EMPTY
35683: LIST
35684: ST_TO_ADDR
35685: GO 35829
// begin if result [ result ] [ 2 ] < tmp then
35687: LD_VAR 0 6
35691: PUSH
35692: LD_VAR 0 6
35696: ARRAY
35697: PUSH
35698: LD_INT 2
35700: ARRAY
35701: PUSH
35702: LD_VAR 0 9
35706: LESS
35707: IFFALSE 35749
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35709: LD_ADDR_VAR 0 6
35713: PUSH
35714: LD_VAR 0 6
35718: PPUSH
35719: LD_VAR 0 6
35723: PUSH
35724: LD_INT 1
35726: PLUS
35727: PPUSH
35728: LD_VAR 0 7
35732: PUSH
35733: LD_VAR 0 9
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PPUSH
35742: CALL_OW 2
35746: ST_TO_ADDR
35747: GO 35829
// for j = 1 to result do
35749: LD_ADDR_VAR 0 8
35753: PUSH
35754: DOUBLE
35755: LD_INT 1
35757: DEC
35758: ST_TO_ADDR
35759: LD_VAR 0 6
35763: PUSH
35764: FOR_TO
35765: IFFALSE 35827
// begin if tmp < result [ j ] [ 2 ] then
35767: LD_VAR 0 9
35771: PUSH
35772: LD_VAR 0 6
35776: PUSH
35777: LD_VAR 0 8
35781: ARRAY
35782: PUSH
35783: LD_INT 2
35785: ARRAY
35786: LESS
35787: IFFALSE 35825
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35789: LD_ADDR_VAR 0 6
35793: PUSH
35794: LD_VAR 0 6
35798: PPUSH
35799: LD_VAR 0 8
35803: PPUSH
35804: LD_VAR 0 7
35808: PUSH
35809: LD_VAR 0 9
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PPUSH
35818: CALL_OW 2
35822: ST_TO_ADDR
// break ;
35823: GO 35827
// end ; end ;
35825: GO 35764
35827: POP
35828: POP
// end ; end ;
35829: GO 35628
35831: POP
35832: POP
// if result and not asc then
35833: LD_VAR 0 6
35837: PUSH
35838: LD_VAR 0 4
35842: NOT
35843: AND
35844: IFFALSE 35919
// begin tmp := result ;
35846: LD_ADDR_VAR 0 9
35850: PUSH
35851: LD_VAR 0 6
35855: ST_TO_ADDR
// for i = tmp downto 1 do
35856: LD_ADDR_VAR 0 7
35860: PUSH
35861: DOUBLE
35862: LD_VAR 0 9
35866: INC
35867: ST_TO_ADDR
35868: LD_INT 1
35870: PUSH
35871: FOR_DOWNTO
35872: IFFALSE 35917
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35874: LD_ADDR_VAR 0 6
35878: PUSH
35879: LD_VAR 0 6
35883: PPUSH
35884: LD_VAR 0 9
35888: PUSH
35889: LD_VAR 0 7
35893: MINUS
35894: PUSH
35895: LD_INT 1
35897: PLUS
35898: PPUSH
35899: LD_VAR 0 9
35903: PUSH
35904: LD_VAR 0 7
35908: ARRAY
35909: PPUSH
35910: CALL_OW 1
35914: ST_TO_ADDR
35915: GO 35871
35917: POP
35918: POP
// end ; tmp := [ ] ;
35919: LD_ADDR_VAR 0 9
35923: PUSH
35924: EMPTY
35925: ST_TO_ADDR
// if mode then
35926: LD_VAR 0 5
35930: IFFALSE 35999
// begin for i = 1 to result do
35932: LD_ADDR_VAR 0 7
35936: PUSH
35937: DOUBLE
35938: LD_INT 1
35940: DEC
35941: ST_TO_ADDR
35942: LD_VAR 0 6
35946: PUSH
35947: FOR_TO
35948: IFFALSE 35987
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35950: LD_ADDR_VAR 0 9
35954: PUSH
35955: LD_VAR 0 9
35959: PPUSH
35960: LD_VAR 0 7
35964: PPUSH
35965: LD_VAR 0 6
35969: PUSH
35970: LD_VAR 0 7
35974: ARRAY
35975: PUSH
35976: LD_INT 1
35978: ARRAY
35979: PPUSH
35980: CALL_OW 1
35984: ST_TO_ADDR
35985: GO 35947
35987: POP
35988: POP
// result := tmp ;
35989: LD_ADDR_VAR 0 6
35993: PUSH
35994: LD_VAR 0 9
35998: ST_TO_ADDR
// end ; end ;
35999: LD_VAR 0 6
36003: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36004: LD_INT 0
36006: PPUSH
36007: PPUSH
36008: PPUSH
36009: PPUSH
36010: PPUSH
36011: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36012: LD_ADDR_VAR 0 5
36016: PUSH
36017: LD_INT 0
36019: PUSH
36020: LD_INT 0
36022: PUSH
36023: LD_INT 0
36025: PUSH
36026: EMPTY
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: ST_TO_ADDR
// if not x or not y then
36034: LD_VAR 0 2
36038: NOT
36039: PUSH
36040: LD_VAR 0 3
36044: NOT
36045: OR
36046: IFFALSE 36050
// exit ;
36048: GO 37702
// if not range then
36050: LD_VAR 0 4
36054: NOT
36055: IFFALSE 36065
// range := 10 ;
36057: LD_ADDR_VAR 0 4
36061: PUSH
36062: LD_INT 10
36064: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36065: LD_ADDR_VAR 0 8
36069: PUSH
36070: LD_INT 81
36072: PUSH
36073: LD_VAR 0 1
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 92
36084: PUSH
36085: LD_VAR 0 2
36089: PUSH
36090: LD_VAR 0 3
36094: PUSH
36095: LD_VAR 0 4
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 3
36108: PUSH
36109: LD_INT 21
36111: PUSH
36112: LD_INT 3
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: LIST
36127: PPUSH
36128: CALL_OW 69
36132: ST_TO_ADDR
// if not tmp then
36133: LD_VAR 0 8
36137: NOT
36138: IFFALSE 36142
// exit ;
36140: GO 37702
// for i in tmp do
36142: LD_ADDR_VAR 0 6
36146: PUSH
36147: LD_VAR 0 8
36151: PUSH
36152: FOR_IN
36153: IFFALSE 37677
// begin points := [ 0 , 0 , 0 ] ;
36155: LD_ADDR_VAR 0 9
36159: PUSH
36160: LD_INT 0
36162: PUSH
36163: LD_INT 0
36165: PUSH
36166: LD_INT 0
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: LIST
36173: ST_TO_ADDR
// bpoints := 1 ;
36174: LD_ADDR_VAR 0 10
36178: PUSH
36179: LD_INT 1
36181: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36182: LD_VAR 0 6
36186: PPUSH
36187: CALL_OW 247
36191: PUSH
36192: LD_INT 1
36194: DOUBLE
36195: EQUAL
36196: IFTRUE 36200
36198: GO 36778
36200: POP
// begin if GetClass ( i ) = 1 then
36201: LD_VAR 0 6
36205: PPUSH
36206: CALL_OW 257
36210: PUSH
36211: LD_INT 1
36213: EQUAL
36214: IFFALSE 36235
// points := [ 10 , 5 , 3 ] ;
36216: LD_ADDR_VAR 0 9
36220: PUSH
36221: LD_INT 10
36223: PUSH
36224: LD_INT 5
36226: PUSH
36227: LD_INT 3
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: LIST
36234: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36235: LD_VAR 0 6
36239: PPUSH
36240: CALL_OW 257
36244: PUSH
36245: LD_INT 2
36247: PUSH
36248: LD_INT 3
36250: PUSH
36251: LD_INT 4
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: LIST
36258: IN
36259: IFFALSE 36280
// points := [ 3 , 2 , 1 ] ;
36261: LD_ADDR_VAR 0 9
36265: PUSH
36266: LD_INT 3
36268: PUSH
36269: LD_INT 2
36271: PUSH
36272: LD_INT 1
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: LIST
36279: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36280: LD_VAR 0 6
36284: PPUSH
36285: CALL_OW 257
36289: PUSH
36290: LD_INT 5
36292: EQUAL
36293: IFFALSE 36314
// points := [ 130 , 5 , 2 ] ;
36295: LD_ADDR_VAR 0 9
36299: PUSH
36300: LD_INT 130
36302: PUSH
36303: LD_INT 5
36305: PUSH
36306: LD_INT 2
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: LIST
36313: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36314: LD_VAR 0 6
36318: PPUSH
36319: CALL_OW 257
36323: PUSH
36324: LD_INT 8
36326: EQUAL
36327: IFFALSE 36348
// points := [ 35 , 35 , 30 ] ;
36329: LD_ADDR_VAR 0 9
36333: PUSH
36334: LD_INT 35
36336: PUSH
36337: LD_INT 35
36339: PUSH
36340: LD_INT 30
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: LIST
36347: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36348: LD_VAR 0 6
36352: PPUSH
36353: CALL_OW 257
36357: PUSH
36358: LD_INT 9
36360: EQUAL
36361: IFFALSE 36382
// points := [ 20 , 55 , 40 ] ;
36363: LD_ADDR_VAR 0 9
36367: PUSH
36368: LD_INT 20
36370: PUSH
36371: LD_INT 55
36373: PUSH
36374: LD_INT 40
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: LIST
36381: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36382: LD_VAR 0 6
36386: PPUSH
36387: CALL_OW 257
36391: PUSH
36392: LD_INT 12
36394: PUSH
36395: LD_INT 16
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: IN
36402: IFFALSE 36423
// points := [ 5 , 3 , 2 ] ;
36404: LD_ADDR_VAR 0 9
36408: PUSH
36409: LD_INT 5
36411: PUSH
36412: LD_INT 3
36414: PUSH
36415: LD_INT 2
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: LIST
36422: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36423: LD_VAR 0 6
36427: PPUSH
36428: CALL_OW 257
36432: PUSH
36433: LD_INT 17
36435: EQUAL
36436: IFFALSE 36457
// points := [ 100 , 50 , 75 ] ;
36438: LD_ADDR_VAR 0 9
36442: PUSH
36443: LD_INT 100
36445: PUSH
36446: LD_INT 50
36448: PUSH
36449: LD_INT 75
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: LIST
36456: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36457: LD_VAR 0 6
36461: PPUSH
36462: CALL_OW 257
36466: PUSH
36467: LD_INT 15
36469: EQUAL
36470: IFFALSE 36491
// points := [ 10 , 5 , 3 ] ;
36472: LD_ADDR_VAR 0 9
36476: PUSH
36477: LD_INT 10
36479: PUSH
36480: LD_INT 5
36482: PUSH
36483: LD_INT 3
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: LIST
36490: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36491: LD_VAR 0 6
36495: PPUSH
36496: CALL_OW 257
36500: PUSH
36501: LD_INT 14
36503: EQUAL
36504: IFFALSE 36525
// points := [ 10 , 0 , 0 ] ;
36506: LD_ADDR_VAR 0 9
36510: PUSH
36511: LD_INT 10
36513: PUSH
36514: LD_INT 0
36516: PUSH
36517: LD_INT 0
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: LIST
36524: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36525: LD_VAR 0 6
36529: PPUSH
36530: CALL_OW 257
36534: PUSH
36535: LD_INT 11
36537: EQUAL
36538: IFFALSE 36559
// points := [ 30 , 10 , 5 ] ;
36540: LD_ADDR_VAR 0 9
36544: PUSH
36545: LD_INT 30
36547: PUSH
36548: LD_INT 10
36550: PUSH
36551: LD_INT 5
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: LIST
36558: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36559: LD_VAR 0 1
36563: PPUSH
36564: LD_INT 5
36566: PPUSH
36567: CALL_OW 321
36571: PUSH
36572: LD_INT 2
36574: EQUAL
36575: IFFALSE 36592
// bpoints := bpoints * 1.8 ;
36577: LD_ADDR_VAR 0 10
36581: PUSH
36582: LD_VAR 0 10
36586: PUSH
36587: LD_REAL  1.80000000000000E+0000
36590: MUL
36591: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36592: LD_VAR 0 6
36596: PPUSH
36597: CALL_OW 257
36601: PUSH
36602: LD_INT 1
36604: PUSH
36605: LD_INT 2
36607: PUSH
36608: LD_INT 3
36610: PUSH
36611: LD_INT 4
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: IN
36620: PUSH
36621: LD_VAR 0 1
36625: PPUSH
36626: LD_INT 51
36628: PPUSH
36629: CALL_OW 321
36633: PUSH
36634: LD_INT 2
36636: EQUAL
36637: AND
36638: IFFALSE 36655
// bpoints := bpoints * 1.2 ;
36640: LD_ADDR_VAR 0 10
36644: PUSH
36645: LD_VAR 0 10
36649: PUSH
36650: LD_REAL  1.20000000000000E+0000
36653: MUL
36654: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36655: LD_VAR 0 6
36659: PPUSH
36660: CALL_OW 257
36664: PUSH
36665: LD_INT 5
36667: PUSH
36668: LD_INT 7
36670: PUSH
36671: LD_INT 9
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: LIST
36678: IN
36679: PUSH
36680: LD_VAR 0 1
36684: PPUSH
36685: LD_INT 52
36687: PPUSH
36688: CALL_OW 321
36692: PUSH
36693: LD_INT 2
36695: EQUAL
36696: AND
36697: IFFALSE 36714
// bpoints := bpoints * 1.5 ;
36699: LD_ADDR_VAR 0 10
36703: PUSH
36704: LD_VAR 0 10
36708: PUSH
36709: LD_REAL  1.50000000000000E+0000
36712: MUL
36713: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36714: LD_VAR 0 1
36718: PPUSH
36719: LD_INT 66
36721: PPUSH
36722: CALL_OW 321
36726: PUSH
36727: LD_INT 2
36729: EQUAL
36730: IFFALSE 36747
// bpoints := bpoints * 1.1 ;
36732: LD_ADDR_VAR 0 10
36736: PUSH
36737: LD_VAR 0 10
36741: PUSH
36742: LD_REAL  1.10000000000000E+0000
36745: MUL
36746: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36747: LD_ADDR_VAR 0 10
36751: PUSH
36752: LD_VAR 0 10
36756: PUSH
36757: LD_VAR 0 6
36761: PPUSH
36762: LD_INT 1
36764: PPUSH
36765: CALL_OW 259
36769: PUSH
36770: LD_REAL  1.15000000000000E+0000
36773: MUL
36774: MUL
36775: ST_TO_ADDR
// end ; unit_vehicle :
36776: GO 37606
36778: LD_INT 2
36780: DOUBLE
36781: EQUAL
36782: IFTRUE 36786
36784: GO 37594
36786: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36787: LD_VAR 0 6
36791: PPUSH
36792: CALL_OW 264
36796: PUSH
36797: LD_INT 2
36799: PUSH
36800: LD_INT 42
36802: PUSH
36803: LD_INT 24
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: LIST
36810: IN
36811: IFFALSE 36832
// points := [ 25 , 5 , 3 ] ;
36813: LD_ADDR_VAR 0 9
36817: PUSH
36818: LD_INT 25
36820: PUSH
36821: LD_INT 5
36823: PUSH
36824: LD_INT 3
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: LIST
36831: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36832: LD_VAR 0 6
36836: PPUSH
36837: CALL_OW 264
36841: PUSH
36842: LD_INT 4
36844: PUSH
36845: LD_INT 43
36847: PUSH
36848: LD_INT 25
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: LIST
36855: IN
36856: IFFALSE 36877
// points := [ 40 , 15 , 5 ] ;
36858: LD_ADDR_VAR 0 9
36862: PUSH
36863: LD_INT 40
36865: PUSH
36866: LD_INT 15
36868: PUSH
36869: LD_INT 5
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: LIST
36876: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36877: LD_VAR 0 6
36881: PPUSH
36882: CALL_OW 264
36886: PUSH
36887: LD_INT 3
36889: PUSH
36890: LD_INT 23
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: IN
36897: IFFALSE 36918
// points := [ 7 , 25 , 8 ] ;
36899: LD_ADDR_VAR 0 9
36903: PUSH
36904: LD_INT 7
36906: PUSH
36907: LD_INT 25
36909: PUSH
36910: LD_INT 8
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: LIST
36917: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36918: LD_VAR 0 6
36922: PPUSH
36923: CALL_OW 264
36927: PUSH
36928: LD_INT 5
36930: PUSH
36931: LD_INT 27
36933: PUSH
36934: LD_INT 44
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: LIST
36941: IN
36942: IFFALSE 36963
// points := [ 14 , 50 , 16 ] ;
36944: LD_ADDR_VAR 0 9
36948: PUSH
36949: LD_INT 14
36951: PUSH
36952: LD_INT 50
36954: PUSH
36955: LD_INT 16
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: LIST
36962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36963: LD_VAR 0 6
36967: PPUSH
36968: CALL_OW 264
36972: PUSH
36973: LD_INT 6
36975: PUSH
36976: LD_INT 46
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: IN
36983: IFFALSE 37004
// points := [ 32 , 120 , 70 ] ;
36985: LD_ADDR_VAR 0 9
36989: PUSH
36990: LD_INT 32
36992: PUSH
36993: LD_INT 120
36995: PUSH
36996: LD_INT 70
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: LIST
37003: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37004: LD_VAR 0 6
37008: PPUSH
37009: CALL_OW 264
37013: PUSH
37014: LD_INT 7
37016: PUSH
37017: LD_INT 28
37019: PUSH
37020: LD_INT 45
37022: PUSH
37023: LD_EXP 50
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: IN
37034: IFFALSE 37055
// points := [ 35 , 20 , 45 ] ;
37036: LD_ADDR_VAR 0 9
37040: PUSH
37041: LD_INT 35
37043: PUSH
37044: LD_INT 20
37046: PUSH
37047: LD_INT 45
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: LIST
37054: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37055: LD_VAR 0 6
37059: PPUSH
37060: CALL_OW 264
37064: PUSH
37065: LD_INT 47
37067: PUSH
37068: EMPTY
37069: LIST
37070: IN
37071: IFFALSE 37092
// points := [ 67 , 45 , 75 ] ;
37073: LD_ADDR_VAR 0 9
37077: PUSH
37078: LD_INT 67
37080: PUSH
37081: LD_INT 45
37083: PUSH
37084: LD_INT 75
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: LIST
37091: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37092: LD_VAR 0 6
37096: PPUSH
37097: CALL_OW 264
37101: PUSH
37102: LD_INT 26
37104: PUSH
37105: EMPTY
37106: LIST
37107: IN
37108: IFFALSE 37129
// points := [ 120 , 30 , 80 ] ;
37110: LD_ADDR_VAR 0 9
37114: PUSH
37115: LD_INT 120
37117: PUSH
37118: LD_INT 30
37120: PUSH
37121: LD_INT 80
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: LIST
37128: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37129: LD_VAR 0 6
37133: PPUSH
37134: CALL_OW 264
37138: PUSH
37139: LD_INT 22
37141: PUSH
37142: EMPTY
37143: LIST
37144: IN
37145: IFFALSE 37166
// points := [ 40 , 1 , 1 ] ;
37147: LD_ADDR_VAR 0 9
37151: PUSH
37152: LD_INT 40
37154: PUSH
37155: LD_INT 1
37157: PUSH
37158: LD_INT 1
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: LIST
37165: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37166: LD_VAR 0 6
37170: PPUSH
37171: CALL_OW 264
37175: PUSH
37176: LD_INT 29
37178: PUSH
37179: EMPTY
37180: LIST
37181: IN
37182: IFFALSE 37203
// points := [ 70 , 200 , 400 ] ;
37184: LD_ADDR_VAR 0 9
37188: PUSH
37189: LD_INT 70
37191: PUSH
37192: LD_INT 200
37194: PUSH
37195: LD_INT 400
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: LIST
37202: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37203: LD_VAR 0 6
37207: PPUSH
37208: CALL_OW 264
37212: PUSH
37213: LD_INT 14
37215: PUSH
37216: LD_INT 53
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: IN
37223: IFFALSE 37244
// points := [ 40 , 10 , 20 ] ;
37225: LD_ADDR_VAR 0 9
37229: PUSH
37230: LD_INT 40
37232: PUSH
37233: LD_INT 10
37235: PUSH
37236: LD_INT 20
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: LIST
37243: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37244: LD_VAR 0 6
37248: PPUSH
37249: CALL_OW 264
37253: PUSH
37254: LD_INT 9
37256: PUSH
37257: EMPTY
37258: LIST
37259: IN
37260: IFFALSE 37281
// points := [ 5 , 70 , 20 ] ;
37262: LD_ADDR_VAR 0 9
37266: PUSH
37267: LD_INT 5
37269: PUSH
37270: LD_INT 70
37272: PUSH
37273: LD_INT 20
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: LIST
37280: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37281: LD_VAR 0 6
37285: PPUSH
37286: CALL_OW 264
37290: PUSH
37291: LD_INT 10
37293: PUSH
37294: EMPTY
37295: LIST
37296: IN
37297: IFFALSE 37318
// points := [ 35 , 110 , 70 ] ;
37299: LD_ADDR_VAR 0 9
37303: PUSH
37304: LD_INT 35
37306: PUSH
37307: LD_INT 110
37309: PUSH
37310: LD_INT 70
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: LIST
37317: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37318: LD_VAR 0 6
37322: PPUSH
37323: CALL_OW 265
37327: PUSH
37328: LD_INT 25
37330: EQUAL
37331: IFFALSE 37352
// points := [ 80 , 65 , 100 ] ;
37333: LD_ADDR_VAR 0 9
37337: PUSH
37338: LD_INT 80
37340: PUSH
37341: LD_INT 65
37343: PUSH
37344: LD_INT 100
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: LIST
37351: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37352: LD_VAR 0 6
37356: PPUSH
37357: CALL_OW 263
37361: PUSH
37362: LD_INT 1
37364: EQUAL
37365: IFFALSE 37400
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37367: LD_ADDR_VAR 0 10
37371: PUSH
37372: LD_VAR 0 10
37376: PUSH
37377: LD_VAR 0 6
37381: PPUSH
37382: CALL_OW 311
37386: PPUSH
37387: LD_INT 3
37389: PPUSH
37390: CALL_OW 259
37394: PUSH
37395: LD_INT 4
37397: MUL
37398: MUL
37399: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37400: LD_VAR 0 6
37404: PPUSH
37405: CALL_OW 263
37409: PUSH
37410: LD_INT 2
37412: EQUAL
37413: IFFALSE 37464
// begin j := IsControledBy ( i ) ;
37415: LD_ADDR_VAR 0 7
37419: PUSH
37420: LD_VAR 0 6
37424: PPUSH
37425: CALL_OW 312
37429: ST_TO_ADDR
// if j then
37430: LD_VAR 0 7
37434: IFFALSE 37464
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37436: LD_ADDR_VAR 0 10
37440: PUSH
37441: LD_VAR 0 10
37445: PUSH
37446: LD_VAR 0 7
37450: PPUSH
37451: LD_INT 3
37453: PPUSH
37454: CALL_OW 259
37458: PUSH
37459: LD_INT 3
37461: MUL
37462: MUL
37463: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37464: LD_VAR 0 6
37468: PPUSH
37469: CALL_OW 264
37473: PUSH
37474: LD_INT 5
37476: PUSH
37477: LD_INT 6
37479: PUSH
37480: LD_INT 46
37482: PUSH
37483: LD_INT 44
37485: PUSH
37486: LD_INT 47
37488: PUSH
37489: LD_INT 45
37491: PUSH
37492: LD_INT 28
37494: PUSH
37495: LD_INT 7
37497: PUSH
37498: LD_INT 27
37500: PUSH
37501: LD_INT 29
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: IN
37516: PUSH
37517: LD_VAR 0 1
37521: PPUSH
37522: LD_INT 52
37524: PPUSH
37525: CALL_OW 321
37529: PUSH
37530: LD_INT 2
37532: EQUAL
37533: AND
37534: IFFALSE 37551
// bpoints := bpoints * 1.2 ;
37536: LD_ADDR_VAR 0 10
37540: PUSH
37541: LD_VAR 0 10
37545: PUSH
37546: LD_REAL  1.20000000000000E+0000
37549: MUL
37550: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37551: LD_VAR 0 6
37555: PPUSH
37556: CALL_OW 264
37560: PUSH
37561: LD_INT 6
37563: PUSH
37564: LD_INT 46
37566: PUSH
37567: LD_INT 47
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: LIST
37574: IN
37575: IFFALSE 37592
// bpoints := bpoints * 1.2 ;
37577: LD_ADDR_VAR 0 10
37581: PUSH
37582: LD_VAR 0 10
37586: PUSH
37587: LD_REAL  1.20000000000000E+0000
37590: MUL
37591: ST_TO_ADDR
// end ; unit_building :
37592: GO 37606
37594: LD_INT 3
37596: DOUBLE
37597: EQUAL
37598: IFTRUE 37602
37600: GO 37605
37602: POP
// ; end ;
37603: GO 37606
37605: POP
// for j = 1 to 3 do
37606: LD_ADDR_VAR 0 7
37610: PUSH
37611: DOUBLE
37612: LD_INT 1
37614: DEC
37615: ST_TO_ADDR
37616: LD_INT 3
37618: PUSH
37619: FOR_TO
37620: IFFALSE 37673
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37622: LD_ADDR_VAR 0 5
37626: PUSH
37627: LD_VAR 0 5
37631: PPUSH
37632: LD_VAR 0 7
37636: PPUSH
37637: LD_VAR 0 5
37641: PUSH
37642: LD_VAR 0 7
37646: ARRAY
37647: PUSH
37648: LD_VAR 0 9
37652: PUSH
37653: LD_VAR 0 7
37657: ARRAY
37658: PUSH
37659: LD_VAR 0 10
37663: MUL
37664: PLUS
37665: PPUSH
37666: CALL_OW 1
37670: ST_TO_ADDR
37671: GO 37619
37673: POP
37674: POP
// end ;
37675: GO 36152
37677: POP
37678: POP
// result := Replace ( result , 4 , tmp ) ;
37679: LD_ADDR_VAR 0 5
37683: PUSH
37684: LD_VAR 0 5
37688: PPUSH
37689: LD_INT 4
37691: PPUSH
37692: LD_VAR 0 8
37696: PPUSH
37697: CALL_OW 1
37701: ST_TO_ADDR
// end ;
37702: LD_VAR 0 5
37706: RET
// export function DangerAtRange ( unit , range ) ; begin
37707: LD_INT 0
37709: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37710: LD_ADDR_VAR 0 3
37714: PUSH
37715: LD_VAR 0 1
37719: PPUSH
37720: CALL_OW 255
37724: PPUSH
37725: LD_VAR 0 1
37729: PPUSH
37730: CALL_OW 250
37734: PPUSH
37735: LD_VAR 0 1
37739: PPUSH
37740: CALL_OW 251
37744: PPUSH
37745: LD_VAR 0 2
37749: PPUSH
37750: CALL 36004 0 4
37754: ST_TO_ADDR
// end ;
37755: LD_VAR 0 3
37759: RET
// export function DangerInArea ( side , area ) ; begin
37760: LD_INT 0
37762: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37763: LD_ADDR_VAR 0 3
37767: PUSH
37768: LD_VAR 0 2
37772: PPUSH
37773: LD_INT 81
37775: PUSH
37776: LD_VAR 0 1
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PPUSH
37785: CALL_OW 70
37789: ST_TO_ADDR
// end ;
37790: LD_VAR 0 3
37794: RET
// export function IsExtension ( b ) ; begin
37795: LD_INT 0
37797: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37798: LD_ADDR_VAR 0 2
37802: PUSH
37803: LD_VAR 0 1
37807: PUSH
37808: LD_INT 23
37810: PUSH
37811: LD_INT 20
37813: PUSH
37814: LD_INT 22
37816: PUSH
37817: LD_INT 17
37819: PUSH
37820: LD_INT 24
37822: PUSH
37823: LD_INT 21
37825: PUSH
37826: LD_INT 19
37828: PUSH
37829: LD_INT 16
37831: PUSH
37832: LD_INT 25
37834: PUSH
37835: LD_INT 18
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: IN
37850: ST_TO_ADDR
// end ;
37851: LD_VAR 0 2
37855: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37856: LD_INT 0
37858: PPUSH
37859: PPUSH
37860: PPUSH
// result := [ ] ;
37861: LD_ADDR_VAR 0 4
37865: PUSH
37866: EMPTY
37867: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37868: LD_ADDR_VAR 0 5
37872: PUSH
37873: LD_VAR 0 2
37877: PPUSH
37878: LD_INT 21
37880: PUSH
37881: LD_INT 3
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PPUSH
37888: CALL_OW 70
37892: ST_TO_ADDR
// if not tmp then
37893: LD_VAR 0 5
37897: NOT
37898: IFFALSE 37902
// exit ;
37900: GO 37966
// if checkLink then
37902: LD_VAR 0 3
37906: IFFALSE 37956
// begin for i in tmp do
37908: LD_ADDR_VAR 0 6
37912: PUSH
37913: LD_VAR 0 5
37917: PUSH
37918: FOR_IN
37919: IFFALSE 37954
// if GetBase ( i ) <> base then
37921: LD_VAR 0 6
37925: PPUSH
37926: CALL_OW 274
37930: PUSH
37931: LD_VAR 0 1
37935: NONEQUAL
37936: IFFALSE 37952
// ComLinkToBase ( base , i ) ;
37938: LD_VAR 0 1
37942: PPUSH
37943: LD_VAR 0 6
37947: PPUSH
37948: CALL_OW 169
37952: GO 37918
37954: POP
37955: POP
// end ; result := tmp ;
37956: LD_ADDR_VAR 0 4
37960: PUSH
37961: LD_VAR 0 5
37965: ST_TO_ADDR
// end ;
37966: LD_VAR 0 4
37970: RET
// export function ComComplete ( units , b ) ; var i ; begin
37971: LD_INT 0
37973: PPUSH
37974: PPUSH
// if not units then
37975: LD_VAR 0 1
37979: NOT
37980: IFFALSE 37984
// exit ;
37982: GO 38074
// for i in units do
37984: LD_ADDR_VAR 0 4
37988: PUSH
37989: LD_VAR 0 1
37993: PUSH
37994: FOR_IN
37995: IFFALSE 38072
// if BuildingStatus ( b ) = bs_build then
37997: LD_VAR 0 2
38001: PPUSH
38002: CALL_OW 461
38006: PUSH
38007: LD_INT 1
38009: EQUAL
38010: IFFALSE 38070
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38012: LD_VAR 0 4
38016: PPUSH
38017: LD_STRING h
38019: PUSH
38020: LD_VAR 0 2
38024: PPUSH
38025: CALL_OW 250
38029: PUSH
38030: LD_VAR 0 2
38034: PPUSH
38035: CALL_OW 251
38039: PUSH
38040: LD_VAR 0 2
38044: PUSH
38045: LD_INT 0
38047: PUSH
38048: LD_INT 0
38050: PUSH
38051: LD_INT 0
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: PUSH
38063: EMPTY
38064: LIST
38065: PPUSH
38066: CALL_OW 446
38070: GO 37994
38072: POP
38073: POP
// end ;
38074: LD_VAR 0 3
38078: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38079: LD_INT 0
38081: PPUSH
38082: PPUSH
38083: PPUSH
38084: PPUSH
38085: PPUSH
38086: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38087: LD_VAR 0 1
38091: NOT
38092: PUSH
38093: LD_VAR 0 1
38097: PPUSH
38098: CALL_OW 263
38102: PUSH
38103: LD_INT 2
38105: NONEQUAL
38106: OR
38107: IFFALSE 38111
// exit ;
38109: GO 38427
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38111: LD_ADDR_VAR 0 6
38115: PUSH
38116: LD_INT 22
38118: PUSH
38119: LD_VAR 0 1
38123: PPUSH
38124: CALL_OW 255
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 2
38135: PUSH
38136: LD_INT 30
38138: PUSH
38139: LD_INT 36
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 34
38148: PUSH
38149: LD_INT 31
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: LIST
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PPUSH
38165: CALL_OW 69
38169: ST_TO_ADDR
// if not tmp then
38170: LD_VAR 0 6
38174: NOT
38175: IFFALSE 38179
// exit ;
38177: GO 38427
// result := [ ] ;
38179: LD_ADDR_VAR 0 2
38183: PUSH
38184: EMPTY
38185: ST_TO_ADDR
// for i in tmp do
38186: LD_ADDR_VAR 0 3
38190: PUSH
38191: LD_VAR 0 6
38195: PUSH
38196: FOR_IN
38197: IFFALSE 38268
// begin t := UnitsInside ( i ) ;
38199: LD_ADDR_VAR 0 4
38203: PUSH
38204: LD_VAR 0 3
38208: PPUSH
38209: CALL_OW 313
38213: ST_TO_ADDR
// if t then
38214: LD_VAR 0 4
38218: IFFALSE 38266
// for j in t do
38220: LD_ADDR_VAR 0 7
38224: PUSH
38225: LD_VAR 0 4
38229: PUSH
38230: FOR_IN
38231: IFFALSE 38264
// result := Replace ( result , result + 1 , j ) ;
38233: LD_ADDR_VAR 0 2
38237: PUSH
38238: LD_VAR 0 2
38242: PPUSH
38243: LD_VAR 0 2
38247: PUSH
38248: LD_INT 1
38250: PLUS
38251: PPUSH
38252: LD_VAR 0 7
38256: PPUSH
38257: CALL_OW 1
38261: ST_TO_ADDR
38262: GO 38230
38264: POP
38265: POP
// end ;
38266: GO 38196
38268: POP
38269: POP
// if not result then
38270: LD_VAR 0 2
38274: NOT
38275: IFFALSE 38279
// exit ;
38277: GO 38427
// mech := result [ 1 ] ;
38279: LD_ADDR_VAR 0 5
38283: PUSH
38284: LD_VAR 0 2
38288: PUSH
38289: LD_INT 1
38291: ARRAY
38292: ST_TO_ADDR
// if result > 1 then
38293: LD_VAR 0 2
38297: PUSH
38298: LD_INT 1
38300: GREATER
38301: IFFALSE 38413
// begin for i = 2 to result do
38303: LD_ADDR_VAR 0 3
38307: PUSH
38308: DOUBLE
38309: LD_INT 2
38311: DEC
38312: ST_TO_ADDR
38313: LD_VAR 0 2
38317: PUSH
38318: FOR_TO
38319: IFFALSE 38411
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38321: LD_ADDR_VAR 0 4
38325: PUSH
38326: LD_VAR 0 2
38330: PUSH
38331: LD_VAR 0 3
38335: ARRAY
38336: PPUSH
38337: LD_INT 3
38339: PPUSH
38340: CALL_OW 259
38344: PUSH
38345: LD_VAR 0 2
38349: PUSH
38350: LD_VAR 0 3
38354: ARRAY
38355: PPUSH
38356: CALL_OW 432
38360: MINUS
38361: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38362: LD_VAR 0 4
38366: PUSH
38367: LD_VAR 0 5
38371: PPUSH
38372: LD_INT 3
38374: PPUSH
38375: CALL_OW 259
38379: PUSH
38380: LD_VAR 0 5
38384: PPUSH
38385: CALL_OW 432
38389: MINUS
38390: GREATEREQUAL
38391: IFFALSE 38409
// mech := result [ i ] ;
38393: LD_ADDR_VAR 0 5
38397: PUSH
38398: LD_VAR 0 2
38402: PUSH
38403: LD_VAR 0 3
38407: ARRAY
38408: ST_TO_ADDR
// end ;
38409: GO 38318
38411: POP
38412: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38413: LD_VAR 0 1
38417: PPUSH
38418: LD_VAR 0 5
38422: PPUSH
38423: CALL_OW 135
// end ;
38427: LD_VAR 0 2
38431: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38432: LD_INT 0
38434: PPUSH
38435: PPUSH
38436: PPUSH
38437: PPUSH
38438: PPUSH
38439: PPUSH
38440: PPUSH
38441: PPUSH
38442: PPUSH
38443: PPUSH
38444: PPUSH
38445: PPUSH
38446: PPUSH
// result := [ ] ;
38447: LD_ADDR_VAR 0 7
38451: PUSH
38452: EMPTY
38453: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38454: LD_VAR 0 1
38458: PPUSH
38459: CALL_OW 266
38463: PUSH
38464: LD_INT 0
38466: PUSH
38467: LD_INT 1
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: IN
38474: NOT
38475: IFFALSE 38479
// exit ;
38477: GO 40113
// if name then
38479: LD_VAR 0 3
38483: IFFALSE 38499
// SetBName ( base_dep , name ) ;
38485: LD_VAR 0 1
38489: PPUSH
38490: LD_VAR 0 3
38494: PPUSH
38495: CALL_OW 500
// base := GetBase ( base_dep ) ;
38499: LD_ADDR_VAR 0 15
38503: PUSH
38504: LD_VAR 0 1
38508: PPUSH
38509: CALL_OW 274
38513: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38514: LD_ADDR_VAR 0 16
38518: PUSH
38519: LD_VAR 0 1
38523: PPUSH
38524: CALL_OW 255
38528: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38529: LD_ADDR_VAR 0 17
38533: PUSH
38534: LD_VAR 0 1
38538: PPUSH
38539: CALL_OW 248
38543: ST_TO_ADDR
// if sources then
38544: LD_VAR 0 5
38548: IFFALSE 38595
// for i = 1 to 3 do
38550: LD_ADDR_VAR 0 8
38554: PUSH
38555: DOUBLE
38556: LD_INT 1
38558: DEC
38559: ST_TO_ADDR
38560: LD_INT 3
38562: PUSH
38563: FOR_TO
38564: IFFALSE 38593
// AddResourceType ( base , i , sources [ i ] ) ;
38566: LD_VAR 0 15
38570: PPUSH
38571: LD_VAR 0 8
38575: PPUSH
38576: LD_VAR 0 5
38580: PUSH
38581: LD_VAR 0 8
38585: ARRAY
38586: PPUSH
38587: CALL_OW 276
38591: GO 38563
38593: POP
38594: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38595: LD_ADDR_VAR 0 18
38599: PUSH
38600: LD_VAR 0 15
38604: PPUSH
38605: LD_VAR 0 2
38609: PPUSH
38610: LD_INT 1
38612: PPUSH
38613: CALL 37856 0 3
38617: ST_TO_ADDR
// InitHc ;
38618: CALL_OW 19
// InitUc ;
38622: CALL_OW 18
// uc_side := side ;
38626: LD_ADDR_OWVAR 20
38630: PUSH
38631: LD_VAR 0 16
38635: ST_TO_ADDR
// uc_nation := nation ;
38636: LD_ADDR_OWVAR 21
38640: PUSH
38641: LD_VAR 0 17
38645: ST_TO_ADDR
// if buildings then
38646: LD_VAR 0 18
38650: IFFALSE 39972
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38652: LD_ADDR_VAR 0 19
38656: PUSH
38657: LD_VAR 0 18
38661: PPUSH
38662: LD_INT 2
38664: PUSH
38665: LD_INT 30
38667: PUSH
38668: LD_INT 29
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 30
38677: PUSH
38678: LD_INT 30
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: LIST
38689: PPUSH
38690: CALL_OW 72
38694: ST_TO_ADDR
// if tmp then
38695: LD_VAR 0 19
38699: IFFALSE 38747
// for i in tmp do
38701: LD_ADDR_VAR 0 8
38705: PUSH
38706: LD_VAR 0 19
38710: PUSH
38711: FOR_IN
38712: IFFALSE 38745
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38714: LD_VAR 0 8
38718: PPUSH
38719: CALL_OW 250
38723: PPUSH
38724: LD_VAR 0 8
38728: PPUSH
38729: CALL_OW 251
38733: PPUSH
38734: LD_VAR 0 16
38738: PPUSH
38739: CALL_OW 441
38743: GO 38711
38745: POP
38746: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38747: LD_VAR 0 18
38751: PPUSH
38752: LD_INT 2
38754: PUSH
38755: LD_INT 30
38757: PUSH
38758: LD_INT 32
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 30
38767: PUSH
38768: LD_INT 33
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: LIST
38779: PPUSH
38780: CALL_OW 72
38784: IFFALSE 38872
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38786: LD_ADDR_VAR 0 8
38790: PUSH
38791: LD_VAR 0 18
38795: PPUSH
38796: LD_INT 2
38798: PUSH
38799: LD_INT 30
38801: PUSH
38802: LD_INT 32
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 30
38811: PUSH
38812: LD_INT 33
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: LIST
38823: PPUSH
38824: CALL_OW 72
38828: PUSH
38829: FOR_IN
38830: IFFALSE 38870
// begin if not GetBWeapon ( i ) then
38832: LD_VAR 0 8
38836: PPUSH
38837: CALL_OW 269
38841: NOT
38842: IFFALSE 38868
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38844: LD_VAR 0 8
38848: PPUSH
38849: LD_VAR 0 8
38853: PPUSH
38854: LD_VAR 0 2
38858: PPUSH
38859: CALL 40118 0 2
38863: PPUSH
38864: CALL_OW 431
// end ;
38868: GO 38829
38870: POP
38871: POP
// end ; for i = 1 to personel do
38872: LD_ADDR_VAR 0 8
38876: PUSH
38877: DOUBLE
38878: LD_INT 1
38880: DEC
38881: ST_TO_ADDR
38882: LD_VAR 0 6
38886: PUSH
38887: FOR_TO
38888: IFFALSE 39952
// begin if i > 4 then
38890: LD_VAR 0 8
38894: PUSH
38895: LD_INT 4
38897: GREATER
38898: IFFALSE 38902
// break ;
38900: GO 39952
// case i of 1 :
38902: LD_VAR 0 8
38906: PUSH
38907: LD_INT 1
38909: DOUBLE
38910: EQUAL
38911: IFTRUE 38915
38913: GO 38995
38915: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38916: LD_ADDR_VAR 0 12
38920: PUSH
38921: LD_VAR 0 18
38925: PPUSH
38926: LD_INT 22
38928: PUSH
38929: LD_VAR 0 16
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 58
38940: PUSH
38941: EMPTY
38942: LIST
38943: PUSH
38944: LD_INT 2
38946: PUSH
38947: LD_INT 30
38949: PUSH
38950: LD_INT 32
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 30
38959: PUSH
38960: LD_INT 4
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 30
38969: PUSH
38970: LD_INT 5
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: LIST
38987: PPUSH
38988: CALL_OW 72
38992: ST_TO_ADDR
38993: GO 39217
38995: LD_INT 2
38997: DOUBLE
38998: EQUAL
38999: IFTRUE 39003
39001: GO 39065
39003: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39004: LD_ADDR_VAR 0 12
39008: PUSH
39009: LD_VAR 0 18
39013: PPUSH
39014: LD_INT 22
39016: PUSH
39017: LD_VAR 0 16
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 2
39028: PUSH
39029: LD_INT 30
39031: PUSH
39032: LD_INT 0
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 30
39041: PUSH
39042: LD_INT 1
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: LIST
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PPUSH
39058: CALL_OW 72
39062: ST_TO_ADDR
39063: GO 39217
39065: LD_INT 3
39067: DOUBLE
39068: EQUAL
39069: IFTRUE 39073
39071: GO 39135
39073: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39074: LD_ADDR_VAR 0 12
39078: PUSH
39079: LD_VAR 0 18
39083: PPUSH
39084: LD_INT 22
39086: PUSH
39087: LD_VAR 0 16
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 2
39098: PUSH
39099: LD_INT 30
39101: PUSH
39102: LD_INT 2
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 30
39111: PUSH
39112: LD_INT 3
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: LIST
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PPUSH
39128: CALL_OW 72
39132: ST_TO_ADDR
39133: GO 39217
39135: LD_INT 4
39137: DOUBLE
39138: EQUAL
39139: IFTRUE 39143
39141: GO 39216
39143: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39144: LD_ADDR_VAR 0 12
39148: PUSH
39149: LD_VAR 0 18
39153: PPUSH
39154: LD_INT 22
39156: PUSH
39157: LD_VAR 0 16
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 2
39168: PUSH
39169: LD_INT 30
39171: PUSH
39172: LD_INT 6
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 30
39181: PUSH
39182: LD_INT 7
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 30
39191: PUSH
39192: LD_INT 8
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PPUSH
39209: CALL_OW 72
39213: ST_TO_ADDR
39214: GO 39217
39216: POP
// if i = 1 then
39217: LD_VAR 0 8
39221: PUSH
39222: LD_INT 1
39224: EQUAL
39225: IFFALSE 39336
// begin tmp := [ ] ;
39227: LD_ADDR_VAR 0 19
39231: PUSH
39232: EMPTY
39233: ST_TO_ADDR
// for j in f do
39234: LD_ADDR_VAR 0 9
39238: PUSH
39239: LD_VAR 0 12
39243: PUSH
39244: FOR_IN
39245: IFFALSE 39318
// if GetBType ( j ) = b_bunker then
39247: LD_VAR 0 9
39251: PPUSH
39252: CALL_OW 266
39256: PUSH
39257: LD_INT 32
39259: EQUAL
39260: IFFALSE 39287
// tmp := Insert ( tmp , 1 , j ) else
39262: LD_ADDR_VAR 0 19
39266: PUSH
39267: LD_VAR 0 19
39271: PPUSH
39272: LD_INT 1
39274: PPUSH
39275: LD_VAR 0 9
39279: PPUSH
39280: CALL_OW 2
39284: ST_TO_ADDR
39285: GO 39316
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39287: LD_ADDR_VAR 0 19
39291: PUSH
39292: LD_VAR 0 19
39296: PPUSH
39297: LD_VAR 0 19
39301: PUSH
39302: LD_INT 1
39304: PLUS
39305: PPUSH
39306: LD_VAR 0 9
39310: PPUSH
39311: CALL_OW 2
39315: ST_TO_ADDR
39316: GO 39244
39318: POP
39319: POP
// if tmp then
39320: LD_VAR 0 19
39324: IFFALSE 39336
// f := tmp ;
39326: LD_ADDR_VAR 0 12
39330: PUSH
39331: LD_VAR 0 19
39335: ST_TO_ADDR
// end ; x := personel [ i ] ;
39336: LD_ADDR_VAR 0 13
39340: PUSH
39341: LD_VAR 0 6
39345: PUSH
39346: LD_VAR 0 8
39350: ARRAY
39351: ST_TO_ADDR
// if x = - 1 then
39352: LD_VAR 0 13
39356: PUSH
39357: LD_INT 1
39359: NEG
39360: EQUAL
39361: IFFALSE 39570
// begin for j in f do
39363: LD_ADDR_VAR 0 9
39367: PUSH
39368: LD_VAR 0 12
39372: PUSH
39373: FOR_IN
39374: IFFALSE 39566
// repeat InitHc ;
39376: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39380: LD_VAR 0 9
39384: PPUSH
39385: CALL_OW 266
39389: PUSH
39390: LD_INT 5
39392: EQUAL
39393: IFFALSE 39463
// begin if UnitsInside ( j ) < 3 then
39395: LD_VAR 0 9
39399: PPUSH
39400: CALL_OW 313
39404: PUSH
39405: LD_INT 3
39407: LESS
39408: IFFALSE 39444
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39410: LD_INT 0
39412: PPUSH
39413: LD_INT 5
39415: PUSH
39416: LD_INT 8
39418: PUSH
39419: LD_INT 9
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: LIST
39426: PUSH
39427: LD_VAR 0 17
39431: ARRAY
39432: PPUSH
39433: LD_VAR 0 4
39437: PPUSH
39438: CALL_OW 380
39442: GO 39461
// PrepareHuman ( false , i , skill ) ;
39444: LD_INT 0
39446: PPUSH
39447: LD_VAR 0 8
39451: PPUSH
39452: LD_VAR 0 4
39456: PPUSH
39457: CALL_OW 380
// end else
39461: GO 39480
// PrepareHuman ( false , i , skill ) ;
39463: LD_INT 0
39465: PPUSH
39466: LD_VAR 0 8
39470: PPUSH
39471: LD_VAR 0 4
39475: PPUSH
39476: CALL_OW 380
// un := CreateHuman ;
39480: LD_ADDR_VAR 0 14
39484: PUSH
39485: CALL_OW 44
39489: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39490: LD_ADDR_VAR 0 7
39494: PUSH
39495: LD_VAR 0 7
39499: PPUSH
39500: LD_INT 1
39502: PPUSH
39503: LD_VAR 0 14
39507: PPUSH
39508: CALL_OW 2
39512: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39513: LD_VAR 0 14
39517: PPUSH
39518: LD_VAR 0 9
39522: PPUSH
39523: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39527: LD_VAR 0 9
39531: PPUSH
39532: CALL_OW 313
39536: PUSH
39537: LD_INT 6
39539: EQUAL
39540: PUSH
39541: LD_VAR 0 9
39545: PPUSH
39546: CALL_OW 266
39550: PUSH
39551: LD_INT 32
39553: PUSH
39554: LD_INT 31
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: IN
39561: OR
39562: IFFALSE 39376
39564: GO 39373
39566: POP
39567: POP
// end else
39568: GO 39950
// for j = 1 to x do
39570: LD_ADDR_VAR 0 9
39574: PUSH
39575: DOUBLE
39576: LD_INT 1
39578: DEC
39579: ST_TO_ADDR
39580: LD_VAR 0 13
39584: PUSH
39585: FOR_TO
39586: IFFALSE 39948
// begin InitHc ;
39588: CALL_OW 19
// if not f then
39592: LD_VAR 0 12
39596: NOT
39597: IFFALSE 39686
// begin PrepareHuman ( false , i , skill ) ;
39599: LD_INT 0
39601: PPUSH
39602: LD_VAR 0 8
39606: PPUSH
39607: LD_VAR 0 4
39611: PPUSH
39612: CALL_OW 380
// un := CreateHuman ;
39616: LD_ADDR_VAR 0 14
39620: PUSH
39621: CALL_OW 44
39625: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39626: LD_ADDR_VAR 0 7
39630: PUSH
39631: LD_VAR 0 7
39635: PPUSH
39636: LD_INT 1
39638: PPUSH
39639: LD_VAR 0 14
39643: PPUSH
39644: CALL_OW 2
39648: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39649: LD_VAR 0 14
39653: PPUSH
39654: LD_VAR 0 1
39658: PPUSH
39659: CALL_OW 250
39663: PPUSH
39664: LD_VAR 0 1
39668: PPUSH
39669: CALL_OW 251
39673: PPUSH
39674: LD_INT 10
39676: PPUSH
39677: LD_INT 0
39679: PPUSH
39680: CALL_OW 50
// continue ;
39684: GO 39585
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39686: LD_VAR 0 12
39690: PUSH
39691: LD_INT 1
39693: ARRAY
39694: PPUSH
39695: CALL_OW 313
39699: PUSH
39700: LD_VAR 0 12
39704: PUSH
39705: LD_INT 1
39707: ARRAY
39708: PPUSH
39709: CALL_OW 266
39713: PUSH
39714: LD_INT 32
39716: PUSH
39717: LD_INT 31
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: IN
39724: AND
39725: PUSH
39726: LD_VAR 0 12
39730: PUSH
39731: LD_INT 1
39733: ARRAY
39734: PPUSH
39735: CALL_OW 313
39739: PUSH
39740: LD_INT 6
39742: EQUAL
39743: OR
39744: IFFALSE 39764
// f := Delete ( f , 1 ) ;
39746: LD_ADDR_VAR 0 12
39750: PUSH
39751: LD_VAR 0 12
39755: PPUSH
39756: LD_INT 1
39758: PPUSH
39759: CALL_OW 3
39763: ST_TO_ADDR
// if not f then
39764: LD_VAR 0 12
39768: NOT
39769: IFFALSE 39787
// begin x := x + 2 ;
39771: LD_ADDR_VAR 0 13
39775: PUSH
39776: LD_VAR 0 13
39780: PUSH
39781: LD_INT 2
39783: PLUS
39784: ST_TO_ADDR
// continue ;
39785: GO 39585
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39787: LD_VAR 0 12
39791: PUSH
39792: LD_INT 1
39794: ARRAY
39795: PPUSH
39796: CALL_OW 266
39800: PUSH
39801: LD_INT 5
39803: EQUAL
39804: IFFALSE 39878
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39806: LD_VAR 0 12
39810: PUSH
39811: LD_INT 1
39813: ARRAY
39814: PPUSH
39815: CALL_OW 313
39819: PUSH
39820: LD_INT 3
39822: LESS
39823: IFFALSE 39859
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39825: LD_INT 0
39827: PPUSH
39828: LD_INT 5
39830: PUSH
39831: LD_INT 8
39833: PUSH
39834: LD_INT 9
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: LIST
39841: PUSH
39842: LD_VAR 0 17
39846: ARRAY
39847: PPUSH
39848: LD_VAR 0 4
39852: PPUSH
39853: CALL_OW 380
39857: GO 39876
// PrepareHuman ( false , i , skill ) ;
39859: LD_INT 0
39861: PPUSH
39862: LD_VAR 0 8
39866: PPUSH
39867: LD_VAR 0 4
39871: PPUSH
39872: CALL_OW 380
// end else
39876: GO 39895
// PrepareHuman ( false , i , skill ) ;
39878: LD_INT 0
39880: PPUSH
39881: LD_VAR 0 8
39885: PPUSH
39886: LD_VAR 0 4
39890: PPUSH
39891: CALL_OW 380
// un := CreateHuman ;
39895: LD_ADDR_VAR 0 14
39899: PUSH
39900: CALL_OW 44
39904: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39905: LD_ADDR_VAR 0 7
39909: PUSH
39910: LD_VAR 0 7
39914: PPUSH
39915: LD_INT 1
39917: PPUSH
39918: LD_VAR 0 14
39922: PPUSH
39923: CALL_OW 2
39927: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39928: LD_VAR 0 14
39932: PPUSH
39933: LD_VAR 0 12
39937: PUSH
39938: LD_INT 1
39940: ARRAY
39941: PPUSH
39942: CALL_OW 52
// end ;
39946: GO 39585
39948: POP
39949: POP
// end ;
39950: GO 38887
39952: POP
39953: POP
// result := result ^ buildings ;
39954: LD_ADDR_VAR 0 7
39958: PUSH
39959: LD_VAR 0 7
39963: PUSH
39964: LD_VAR 0 18
39968: ADD
39969: ST_TO_ADDR
// end else
39970: GO 40113
// begin for i = 1 to personel do
39972: LD_ADDR_VAR 0 8
39976: PUSH
39977: DOUBLE
39978: LD_INT 1
39980: DEC
39981: ST_TO_ADDR
39982: LD_VAR 0 6
39986: PUSH
39987: FOR_TO
39988: IFFALSE 40111
// begin if i > 4 then
39990: LD_VAR 0 8
39994: PUSH
39995: LD_INT 4
39997: GREATER
39998: IFFALSE 40002
// break ;
40000: GO 40111
// x := personel [ i ] ;
40002: LD_ADDR_VAR 0 13
40006: PUSH
40007: LD_VAR 0 6
40011: PUSH
40012: LD_VAR 0 8
40016: ARRAY
40017: ST_TO_ADDR
// if x = - 1 then
40018: LD_VAR 0 13
40022: PUSH
40023: LD_INT 1
40025: NEG
40026: EQUAL
40027: IFFALSE 40031
// continue ;
40029: GO 39987
// PrepareHuman ( false , i , skill ) ;
40031: LD_INT 0
40033: PPUSH
40034: LD_VAR 0 8
40038: PPUSH
40039: LD_VAR 0 4
40043: PPUSH
40044: CALL_OW 380
// un := CreateHuman ;
40048: LD_ADDR_VAR 0 14
40052: PUSH
40053: CALL_OW 44
40057: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40058: LD_VAR 0 14
40062: PPUSH
40063: LD_VAR 0 1
40067: PPUSH
40068: CALL_OW 250
40072: PPUSH
40073: LD_VAR 0 1
40077: PPUSH
40078: CALL_OW 251
40082: PPUSH
40083: LD_INT 10
40085: PPUSH
40086: LD_INT 0
40088: PPUSH
40089: CALL_OW 50
// result := result ^ un ;
40093: LD_ADDR_VAR 0 7
40097: PUSH
40098: LD_VAR 0 7
40102: PUSH
40103: LD_VAR 0 14
40107: ADD
40108: ST_TO_ADDR
// end ;
40109: GO 39987
40111: POP
40112: POP
// end ; end ;
40113: LD_VAR 0 7
40117: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40118: LD_INT 0
40120: PPUSH
40121: PPUSH
40122: PPUSH
40123: PPUSH
40124: PPUSH
40125: PPUSH
40126: PPUSH
40127: PPUSH
40128: PPUSH
40129: PPUSH
40130: PPUSH
40131: PPUSH
40132: PPUSH
40133: PPUSH
40134: PPUSH
40135: PPUSH
// result := false ;
40136: LD_ADDR_VAR 0 3
40140: PUSH
40141: LD_INT 0
40143: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40144: LD_VAR 0 1
40148: NOT
40149: PUSH
40150: LD_VAR 0 1
40154: PPUSH
40155: CALL_OW 266
40159: PUSH
40160: LD_INT 32
40162: PUSH
40163: LD_INT 33
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: IN
40170: NOT
40171: OR
40172: IFFALSE 40176
// exit ;
40174: GO 41285
// nat := GetNation ( tower ) ;
40176: LD_ADDR_VAR 0 12
40180: PUSH
40181: LD_VAR 0 1
40185: PPUSH
40186: CALL_OW 248
40190: ST_TO_ADDR
// side := GetSide ( tower ) ;
40191: LD_ADDR_VAR 0 16
40195: PUSH
40196: LD_VAR 0 1
40200: PPUSH
40201: CALL_OW 255
40205: ST_TO_ADDR
// x := GetX ( tower ) ;
40206: LD_ADDR_VAR 0 10
40210: PUSH
40211: LD_VAR 0 1
40215: PPUSH
40216: CALL_OW 250
40220: ST_TO_ADDR
// y := GetY ( tower ) ;
40221: LD_ADDR_VAR 0 11
40225: PUSH
40226: LD_VAR 0 1
40230: PPUSH
40231: CALL_OW 251
40235: ST_TO_ADDR
// if not x or not y then
40236: LD_VAR 0 10
40240: NOT
40241: PUSH
40242: LD_VAR 0 11
40246: NOT
40247: OR
40248: IFFALSE 40252
// exit ;
40250: GO 41285
// weapon := 0 ;
40252: LD_ADDR_VAR 0 18
40256: PUSH
40257: LD_INT 0
40259: ST_TO_ADDR
// fac_list := [ ] ;
40260: LD_ADDR_VAR 0 17
40264: PUSH
40265: EMPTY
40266: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40267: LD_ADDR_VAR 0 6
40271: PUSH
40272: LD_VAR 0 1
40276: PPUSH
40277: CALL_OW 274
40281: PPUSH
40282: LD_VAR 0 2
40286: PPUSH
40287: LD_INT 0
40289: PPUSH
40290: CALL 37856 0 3
40294: PPUSH
40295: LD_INT 30
40297: PUSH
40298: LD_INT 3
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PPUSH
40305: CALL_OW 72
40309: ST_TO_ADDR
// if not factories then
40310: LD_VAR 0 6
40314: NOT
40315: IFFALSE 40319
// exit ;
40317: GO 41285
// for i in factories do
40319: LD_ADDR_VAR 0 8
40323: PUSH
40324: LD_VAR 0 6
40328: PUSH
40329: FOR_IN
40330: IFFALSE 40355
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40332: LD_ADDR_VAR 0 17
40336: PUSH
40337: LD_VAR 0 17
40341: PUSH
40342: LD_VAR 0 8
40346: PPUSH
40347: CALL_OW 478
40351: UNION
40352: ST_TO_ADDR
40353: GO 40329
40355: POP
40356: POP
// if not fac_list then
40357: LD_VAR 0 17
40361: NOT
40362: IFFALSE 40366
// exit ;
40364: GO 41285
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40366: LD_ADDR_VAR 0 5
40370: PUSH
40371: LD_INT 4
40373: PUSH
40374: LD_INT 5
40376: PUSH
40377: LD_INT 9
40379: PUSH
40380: LD_INT 10
40382: PUSH
40383: LD_INT 6
40385: PUSH
40386: LD_INT 7
40388: PUSH
40389: LD_INT 11
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 27
40403: PUSH
40404: LD_INT 28
40406: PUSH
40407: LD_INT 26
40409: PUSH
40410: LD_INT 30
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 43
40421: PUSH
40422: LD_INT 44
40424: PUSH
40425: LD_INT 46
40427: PUSH
40428: LD_INT 45
40430: PUSH
40431: LD_INT 47
40433: PUSH
40434: LD_INT 49
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: LIST
40449: PUSH
40450: LD_VAR 0 12
40454: ARRAY
40455: ST_TO_ADDR
// list := list isect fac_list ;
40456: LD_ADDR_VAR 0 5
40460: PUSH
40461: LD_VAR 0 5
40465: PUSH
40466: LD_VAR 0 17
40470: ISECT
40471: ST_TO_ADDR
// if not list then
40472: LD_VAR 0 5
40476: NOT
40477: IFFALSE 40481
// exit ;
40479: GO 41285
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40481: LD_VAR 0 12
40485: PUSH
40486: LD_INT 3
40488: EQUAL
40489: PUSH
40490: LD_INT 49
40492: PUSH
40493: LD_VAR 0 5
40497: IN
40498: AND
40499: PUSH
40500: LD_INT 31
40502: PPUSH
40503: LD_VAR 0 16
40507: PPUSH
40508: CALL_OW 321
40512: PUSH
40513: LD_INT 2
40515: EQUAL
40516: AND
40517: IFFALSE 40577
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40519: LD_INT 22
40521: PUSH
40522: LD_VAR 0 16
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 35
40533: PUSH
40534: LD_INT 49
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 91
40543: PUSH
40544: LD_VAR 0 1
40548: PUSH
40549: LD_INT 10
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: LIST
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: LIST
40561: PPUSH
40562: CALL_OW 69
40566: NOT
40567: IFFALSE 40577
// weapon := ru_time_lapser ;
40569: LD_ADDR_VAR 0 18
40573: PUSH
40574: LD_INT 49
40576: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40577: LD_VAR 0 12
40581: PUSH
40582: LD_INT 1
40584: PUSH
40585: LD_INT 2
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: IN
40592: PUSH
40593: LD_INT 11
40595: PUSH
40596: LD_VAR 0 5
40600: IN
40601: PUSH
40602: LD_INT 30
40604: PUSH
40605: LD_VAR 0 5
40609: IN
40610: OR
40611: AND
40612: PUSH
40613: LD_INT 6
40615: PPUSH
40616: LD_VAR 0 16
40620: PPUSH
40621: CALL_OW 321
40625: PUSH
40626: LD_INT 2
40628: EQUAL
40629: AND
40630: IFFALSE 40795
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40632: LD_INT 22
40634: PUSH
40635: LD_VAR 0 16
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 2
40646: PUSH
40647: LD_INT 35
40649: PUSH
40650: LD_INT 11
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 35
40659: PUSH
40660: LD_INT 30
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 91
40674: PUSH
40675: LD_VAR 0 1
40679: PUSH
40680: LD_INT 18
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: LIST
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: LIST
40692: PPUSH
40693: CALL_OW 69
40697: NOT
40698: PUSH
40699: LD_INT 22
40701: PUSH
40702: LD_VAR 0 16
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 2
40713: PUSH
40714: LD_INT 30
40716: PUSH
40717: LD_INT 32
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 30
40726: PUSH
40727: LD_INT 33
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 91
40741: PUSH
40742: LD_VAR 0 1
40746: PUSH
40747: LD_INT 12
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: LIST
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: LIST
40759: PUSH
40760: EMPTY
40761: LIST
40762: PPUSH
40763: CALL_OW 69
40767: PUSH
40768: LD_INT 2
40770: GREATER
40771: AND
40772: IFFALSE 40795
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40774: LD_ADDR_VAR 0 18
40778: PUSH
40779: LD_INT 11
40781: PUSH
40782: LD_INT 30
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_VAR 0 12
40793: ARRAY
40794: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40795: LD_VAR 0 18
40799: NOT
40800: PUSH
40801: LD_INT 40
40803: PPUSH
40804: LD_VAR 0 16
40808: PPUSH
40809: CALL_OW 321
40813: PUSH
40814: LD_INT 2
40816: EQUAL
40817: AND
40818: PUSH
40819: LD_INT 7
40821: PUSH
40822: LD_VAR 0 5
40826: IN
40827: PUSH
40828: LD_INT 28
40830: PUSH
40831: LD_VAR 0 5
40835: IN
40836: OR
40837: PUSH
40838: LD_INT 45
40840: PUSH
40841: LD_VAR 0 5
40845: IN
40846: OR
40847: AND
40848: IFFALSE 41102
// begin hex := GetHexInfo ( x , y ) ;
40850: LD_ADDR_VAR 0 4
40854: PUSH
40855: LD_VAR 0 10
40859: PPUSH
40860: LD_VAR 0 11
40864: PPUSH
40865: CALL_OW 546
40869: ST_TO_ADDR
// if hex [ 1 ] then
40870: LD_VAR 0 4
40874: PUSH
40875: LD_INT 1
40877: ARRAY
40878: IFFALSE 40882
// exit ;
40880: GO 41285
// height := hex [ 2 ] ;
40882: LD_ADDR_VAR 0 15
40886: PUSH
40887: LD_VAR 0 4
40891: PUSH
40892: LD_INT 2
40894: ARRAY
40895: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40896: LD_ADDR_VAR 0 14
40900: PUSH
40901: LD_INT 0
40903: PUSH
40904: LD_INT 2
40906: PUSH
40907: LD_INT 3
40909: PUSH
40910: LD_INT 5
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: ST_TO_ADDR
// for i in tmp do
40919: LD_ADDR_VAR 0 8
40923: PUSH
40924: LD_VAR 0 14
40928: PUSH
40929: FOR_IN
40930: IFFALSE 41100
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40932: LD_ADDR_VAR 0 9
40936: PUSH
40937: LD_VAR 0 10
40941: PPUSH
40942: LD_VAR 0 8
40946: PPUSH
40947: LD_INT 5
40949: PPUSH
40950: CALL_OW 272
40954: PUSH
40955: LD_VAR 0 11
40959: PPUSH
40960: LD_VAR 0 8
40964: PPUSH
40965: LD_INT 5
40967: PPUSH
40968: CALL_OW 273
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40977: LD_VAR 0 9
40981: PUSH
40982: LD_INT 1
40984: ARRAY
40985: PPUSH
40986: LD_VAR 0 9
40990: PUSH
40991: LD_INT 2
40993: ARRAY
40994: PPUSH
40995: CALL_OW 488
40999: IFFALSE 41098
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41001: LD_ADDR_VAR 0 4
41005: PUSH
41006: LD_VAR 0 9
41010: PUSH
41011: LD_INT 1
41013: ARRAY
41014: PPUSH
41015: LD_VAR 0 9
41019: PUSH
41020: LD_INT 2
41022: ARRAY
41023: PPUSH
41024: CALL_OW 546
41028: ST_TO_ADDR
// if hex [ 1 ] then
41029: LD_VAR 0 4
41033: PUSH
41034: LD_INT 1
41036: ARRAY
41037: IFFALSE 41041
// continue ;
41039: GO 40929
// h := hex [ 2 ] ;
41041: LD_ADDR_VAR 0 13
41045: PUSH
41046: LD_VAR 0 4
41050: PUSH
41051: LD_INT 2
41053: ARRAY
41054: ST_TO_ADDR
// if h + 7 < height then
41055: LD_VAR 0 13
41059: PUSH
41060: LD_INT 7
41062: PLUS
41063: PUSH
41064: LD_VAR 0 15
41068: LESS
41069: IFFALSE 41098
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41071: LD_ADDR_VAR 0 18
41075: PUSH
41076: LD_INT 7
41078: PUSH
41079: LD_INT 28
41081: PUSH
41082: LD_INT 45
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: LIST
41089: PUSH
41090: LD_VAR 0 12
41094: ARRAY
41095: ST_TO_ADDR
// break ;
41096: GO 41100
// end ; end ; end ;
41098: GO 40929
41100: POP
41101: POP
// end ; if not weapon then
41102: LD_VAR 0 18
41106: NOT
41107: IFFALSE 41167
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41109: LD_ADDR_VAR 0 5
41113: PUSH
41114: LD_VAR 0 5
41118: PUSH
41119: LD_INT 11
41121: PUSH
41122: LD_INT 30
41124: PUSH
41125: LD_INT 49
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: LIST
41132: DIFF
41133: ST_TO_ADDR
// if not list then
41134: LD_VAR 0 5
41138: NOT
41139: IFFALSE 41143
// exit ;
41141: GO 41285
// weapon := list [ rand ( 1 , list ) ] ;
41143: LD_ADDR_VAR 0 18
41147: PUSH
41148: LD_VAR 0 5
41152: PUSH
41153: LD_INT 1
41155: PPUSH
41156: LD_VAR 0 5
41160: PPUSH
41161: CALL_OW 12
41165: ARRAY
41166: ST_TO_ADDR
// end ; if weapon then
41167: LD_VAR 0 18
41171: IFFALSE 41285
// begin tmp := CostOfWeapon ( weapon ) ;
41173: LD_ADDR_VAR 0 14
41177: PUSH
41178: LD_VAR 0 18
41182: PPUSH
41183: CALL_OW 451
41187: ST_TO_ADDR
// j := GetBase ( tower ) ;
41188: LD_ADDR_VAR 0 9
41192: PUSH
41193: LD_VAR 0 1
41197: PPUSH
41198: CALL_OW 274
41202: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41203: LD_VAR 0 9
41207: PPUSH
41208: LD_INT 1
41210: PPUSH
41211: CALL_OW 275
41215: PUSH
41216: LD_VAR 0 14
41220: PUSH
41221: LD_INT 1
41223: ARRAY
41224: GREATEREQUAL
41225: PUSH
41226: LD_VAR 0 9
41230: PPUSH
41231: LD_INT 2
41233: PPUSH
41234: CALL_OW 275
41238: PUSH
41239: LD_VAR 0 14
41243: PUSH
41244: LD_INT 2
41246: ARRAY
41247: GREATEREQUAL
41248: AND
41249: PUSH
41250: LD_VAR 0 9
41254: PPUSH
41255: LD_INT 3
41257: PPUSH
41258: CALL_OW 275
41262: PUSH
41263: LD_VAR 0 14
41267: PUSH
41268: LD_INT 3
41270: ARRAY
41271: GREATEREQUAL
41272: AND
41273: IFFALSE 41285
// result := weapon ;
41275: LD_ADDR_VAR 0 3
41279: PUSH
41280: LD_VAR 0 18
41284: ST_TO_ADDR
// end ; end ;
41285: LD_VAR 0 3
41289: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41290: LD_INT 0
41292: PPUSH
41293: PPUSH
// result := true ;
41294: LD_ADDR_VAR 0 3
41298: PUSH
41299: LD_INT 1
41301: ST_TO_ADDR
// if array1 = array2 then
41302: LD_VAR 0 1
41306: PUSH
41307: LD_VAR 0 2
41311: EQUAL
41312: IFFALSE 41372
// begin for i = 1 to array1 do
41314: LD_ADDR_VAR 0 4
41318: PUSH
41319: DOUBLE
41320: LD_INT 1
41322: DEC
41323: ST_TO_ADDR
41324: LD_VAR 0 1
41328: PUSH
41329: FOR_TO
41330: IFFALSE 41368
// if array1 [ i ] <> array2 [ i ] then
41332: LD_VAR 0 1
41336: PUSH
41337: LD_VAR 0 4
41341: ARRAY
41342: PUSH
41343: LD_VAR 0 2
41347: PUSH
41348: LD_VAR 0 4
41352: ARRAY
41353: NONEQUAL
41354: IFFALSE 41366
// begin result := false ;
41356: LD_ADDR_VAR 0 3
41360: PUSH
41361: LD_INT 0
41363: ST_TO_ADDR
// break ;
41364: GO 41368
// end ;
41366: GO 41329
41368: POP
41369: POP
// end else
41370: GO 41380
// result := false ;
41372: LD_ADDR_VAR 0 3
41376: PUSH
41377: LD_INT 0
41379: ST_TO_ADDR
// end ;
41380: LD_VAR 0 3
41384: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41385: LD_INT 0
41387: PPUSH
41388: PPUSH
// if not array1 or not array2 then
41389: LD_VAR 0 1
41393: NOT
41394: PUSH
41395: LD_VAR 0 2
41399: NOT
41400: OR
41401: IFFALSE 41405
// exit ;
41403: GO 41469
// result := true ;
41405: LD_ADDR_VAR 0 3
41409: PUSH
41410: LD_INT 1
41412: ST_TO_ADDR
// for i = 1 to array1 do
41413: LD_ADDR_VAR 0 4
41417: PUSH
41418: DOUBLE
41419: LD_INT 1
41421: DEC
41422: ST_TO_ADDR
41423: LD_VAR 0 1
41427: PUSH
41428: FOR_TO
41429: IFFALSE 41467
// if array1 [ i ] <> array2 [ i ] then
41431: LD_VAR 0 1
41435: PUSH
41436: LD_VAR 0 4
41440: ARRAY
41441: PUSH
41442: LD_VAR 0 2
41446: PUSH
41447: LD_VAR 0 4
41451: ARRAY
41452: NONEQUAL
41453: IFFALSE 41465
// begin result := false ;
41455: LD_ADDR_VAR 0 3
41459: PUSH
41460: LD_INT 0
41462: ST_TO_ADDR
// break ;
41463: GO 41467
// end ;
41465: GO 41428
41467: POP
41468: POP
// end ;
41469: LD_VAR 0 3
41473: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41474: LD_INT 0
41476: PPUSH
41477: PPUSH
41478: PPUSH
// pom := GetBase ( fac ) ;
41479: LD_ADDR_VAR 0 5
41483: PUSH
41484: LD_VAR 0 1
41488: PPUSH
41489: CALL_OW 274
41493: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41494: LD_ADDR_VAR 0 4
41498: PUSH
41499: LD_VAR 0 2
41503: PUSH
41504: LD_INT 1
41506: ARRAY
41507: PPUSH
41508: LD_VAR 0 2
41512: PUSH
41513: LD_INT 2
41515: ARRAY
41516: PPUSH
41517: LD_VAR 0 2
41521: PUSH
41522: LD_INT 3
41524: ARRAY
41525: PPUSH
41526: LD_VAR 0 2
41530: PUSH
41531: LD_INT 4
41533: ARRAY
41534: PPUSH
41535: CALL_OW 449
41539: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41540: LD_ADDR_VAR 0 3
41544: PUSH
41545: LD_VAR 0 5
41549: PPUSH
41550: LD_INT 1
41552: PPUSH
41553: CALL_OW 275
41557: PUSH
41558: LD_VAR 0 4
41562: PUSH
41563: LD_INT 1
41565: ARRAY
41566: GREATEREQUAL
41567: PUSH
41568: LD_VAR 0 5
41572: PPUSH
41573: LD_INT 2
41575: PPUSH
41576: CALL_OW 275
41580: PUSH
41581: LD_VAR 0 4
41585: PUSH
41586: LD_INT 2
41588: ARRAY
41589: GREATEREQUAL
41590: AND
41591: PUSH
41592: LD_VAR 0 5
41596: PPUSH
41597: LD_INT 3
41599: PPUSH
41600: CALL_OW 275
41604: PUSH
41605: LD_VAR 0 4
41609: PUSH
41610: LD_INT 3
41612: ARRAY
41613: GREATEREQUAL
41614: AND
41615: ST_TO_ADDR
// end ;
41616: LD_VAR 0 3
41620: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41621: LD_INT 0
41623: PPUSH
41624: PPUSH
41625: PPUSH
41626: PPUSH
// pom := GetBase ( building ) ;
41627: LD_ADDR_VAR 0 3
41631: PUSH
41632: LD_VAR 0 1
41636: PPUSH
41637: CALL_OW 274
41641: ST_TO_ADDR
// if not pom then
41642: LD_VAR 0 3
41646: NOT
41647: IFFALSE 41651
// exit ;
41649: GO 41821
// btype := GetBType ( building ) ;
41651: LD_ADDR_VAR 0 5
41655: PUSH
41656: LD_VAR 0 1
41660: PPUSH
41661: CALL_OW 266
41665: ST_TO_ADDR
// if btype = b_armoury then
41666: LD_VAR 0 5
41670: PUSH
41671: LD_INT 4
41673: EQUAL
41674: IFFALSE 41684
// btype := b_barracks ;
41676: LD_ADDR_VAR 0 5
41680: PUSH
41681: LD_INT 5
41683: ST_TO_ADDR
// if btype = b_depot then
41684: LD_VAR 0 5
41688: PUSH
41689: LD_INT 0
41691: EQUAL
41692: IFFALSE 41702
// btype := b_warehouse ;
41694: LD_ADDR_VAR 0 5
41698: PUSH
41699: LD_INT 1
41701: ST_TO_ADDR
// if btype = b_workshop then
41702: LD_VAR 0 5
41706: PUSH
41707: LD_INT 2
41709: EQUAL
41710: IFFALSE 41720
// btype := b_factory ;
41712: LD_ADDR_VAR 0 5
41716: PUSH
41717: LD_INT 3
41719: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41720: LD_ADDR_VAR 0 4
41724: PUSH
41725: LD_VAR 0 5
41729: PPUSH
41730: LD_VAR 0 1
41734: PPUSH
41735: CALL_OW 248
41739: PPUSH
41740: CALL_OW 450
41744: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41745: LD_ADDR_VAR 0 2
41749: PUSH
41750: LD_VAR 0 3
41754: PPUSH
41755: LD_INT 1
41757: PPUSH
41758: CALL_OW 275
41762: PUSH
41763: LD_VAR 0 4
41767: PUSH
41768: LD_INT 1
41770: ARRAY
41771: GREATEREQUAL
41772: PUSH
41773: LD_VAR 0 3
41777: PPUSH
41778: LD_INT 2
41780: PPUSH
41781: CALL_OW 275
41785: PUSH
41786: LD_VAR 0 4
41790: PUSH
41791: LD_INT 2
41793: ARRAY
41794: GREATEREQUAL
41795: AND
41796: PUSH
41797: LD_VAR 0 3
41801: PPUSH
41802: LD_INT 3
41804: PPUSH
41805: CALL_OW 275
41809: PUSH
41810: LD_VAR 0 4
41814: PUSH
41815: LD_INT 3
41817: ARRAY
41818: GREATEREQUAL
41819: AND
41820: ST_TO_ADDR
// end ;
41821: LD_VAR 0 2
41825: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41826: LD_INT 0
41828: PPUSH
41829: PPUSH
41830: PPUSH
// pom := GetBase ( building ) ;
41831: LD_ADDR_VAR 0 4
41835: PUSH
41836: LD_VAR 0 1
41840: PPUSH
41841: CALL_OW 274
41845: ST_TO_ADDR
// if not pom then
41846: LD_VAR 0 4
41850: NOT
41851: IFFALSE 41855
// exit ;
41853: GO 41956
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41855: LD_ADDR_VAR 0 5
41859: PUSH
41860: LD_VAR 0 2
41864: PPUSH
41865: LD_VAR 0 1
41869: PPUSH
41870: CALL_OW 248
41874: PPUSH
41875: CALL_OW 450
41879: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41880: LD_ADDR_VAR 0 3
41884: PUSH
41885: LD_VAR 0 4
41889: PPUSH
41890: LD_INT 1
41892: PPUSH
41893: CALL_OW 275
41897: PUSH
41898: LD_VAR 0 5
41902: PUSH
41903: LD_INT 1
41905: ARRAY
41906: GREATEREQUAL
41907: PUSH
41908: LD_VAR 0 4
41912: PPUSH
41913: LD_INT 2
41915: PPUSH
41916: CALL_OW 275
41920: PUSH
41921: LD_VAR 0 5
41925: PUSH
41926: LD_INT 2
41928: ARRAY
41929: GREATEREQUAL
41930: AND
41931: PUSH
41932: LD_VAR 0 4
41936: PPUSH
41937: LD_INT 3
41939: PPUSH
41940: CALL_OW 275
41944: PUSH
41945: LD_VAR 0 5
41949: PUSH
41950: LD_INT 3
41952: ARRAY
41953: GREATEREQUAL
41954: AND
41955: ST_TO_ADDR
// end ;
41956: LD_VAR 0 3
41960: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41961: LD_INT 0
41963: PPUSH
41964: PPUSH
41965: PPUSH
41966: PPUSH
41967: PPUSH
41968: PPUSH
41969: PPUSH
41970: PPUSH
41971: PPUSH
41972: PPUSH
41973: PPUSH
// result := false ;
41974: LD_ADDR_VAR 0 8
41978: PUSH
41979: LD_INT 0
41981: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41982: LD_VAR 0 5
41986: NOT
41987: PUSH
41988: LD_VAR 0 1
41992: NOT
41993: OR
41994: PUSH
41995: LD_VAR 0 2
41999: NOT
42000: OR
42001: PUSH
42002: LD_VAR 0 3
42006: NOT
42007: OR
42008: IFFALSE 42012
// exit ;
42010: GO 42826
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42012: LD_ADDR_VAR 0 14
42016: PUSH
42017: LD_VAR 0 1
42021: PPUSH
42022: LD_VAR 0 2
42026: PPUSH
42027: LD_VAR 0 3
42031: PPUSH
42032: LD_VAR 0 4
42036: PPUSH
42037: LD_VAR 0 5
42041: PUSH
42042: LD_INT 1
42044: ARRAY
42045: PPUSH
42046: CALL_OW 248
42050: PPUSH
42051: LD_INT 0
42053: PPUSH
42054: CALL 44063 0 6
42058: ST_TO_ADDR
// if not hexes then
42059: LD_VAR 0 14
42063: NOT
42064: IFFALSE 42068
// exit ;
42066: GO 42826
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42068: LD_ADDR_VAR 0 17
42072: PUSH
42073: LD_VAR 0 5
42077: PPUSH
42078: LD_INT 22
42080: PUSH
42081: LD_VAR 0 13
42085: PPUSH
42086: CALL_OW 255
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 2
42097: PUSH
42098: LD_INT 30
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 30
42110: PUSH
42111: LD_INT 1
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: LIST
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PPUSH
42127: CALL_OW 72
42131: ST_TO_ADDR
// for i = 1 to hexes do
42132: LD_ADDR_VAR 0 9
42136: PUSH
42137: DOUBLE
42138: LD_INT 1
42140: DEC
42141: ST_TO_ADDR
42142: LD_VAR 0 14
42146: PUSH
42147: FOR_TO
42148: IFFALSE 42824
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42150: LD_ADDR_VAR 0 13
42154: PUSH
42155: LD_VAR 0 14
42159: PUSH
42160: LD_VAR 0 9
42164: ARRAY
42165: PUSH
42166: LD_INT 1
42168: ARRAY
42169: PPUSH
42170: LD_VAR 0 14
42174: PUSH
42175: LD_VAR 0 9
42179: ARRAY
42180: PUSH
42181: LD_INT 2
42183: ARRAY
42184: PPUSH
42185: CALL_OW 428
42189: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42190: LD_VAR 0 14
42194: PUSH
42195: LD_VAR 0 9
42199: ARRAY
42200: PUSH
42201: LD_INT 1
42203: ARRAY
42204: PPUSH
42205: LD_VAR 0 14
42209: PUSH
42210: LD_VAR 0 9
42214: ARRAY
42215: PUSH
42216: LD_INT 2
42218: ARRAY
42219: PPUSH
42220: CALL_OW 351
42224: PUSH
42225: LD_VAR 0 14
42229: PUSH
42230: LD_VAR 0 9
42234: ARRAY
42235: PUSH
42236: LD_INT 1
42238: ARRAY
42239: PPUSH
42240: LD_VAR 0 14
42244: PUSH
42245: LD_VAR 0 9
42249: ARRAY
42250: PUSH
42251: LD_INT 2
42253: ARRAY
42254: PPUSH
42255: CALL_OW 488
42259: NOT
42260: OR
42261: PUSH
42262: LD_VAR 0 13
42266: PPUSH
42267: CALL_OW 247
42271: PUSH
42272: LD_INT 3
42274: EQUAL
42275: OR
42276: IFFALSE 42282
// exit ;
42278: POP
42279: POP
42280: GO 42826
// if not tmp then
42282: LD_VAR 0 13
42286: NOT
42287: IFFALSE 42291
// continue ;
42289: GO 42147
// result := true ;
42291: LD_ADDR_VAR 0 8
42295: PUSH
42296: LD_INT 1
42298: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42299: LD_VAR 0 6
42303: PUSH
42304: LD_VAR 0 13
42308: PPUSH
42309: CALL_OW 247
42313: PUSH
42314: LD_INT 2
42316: EQUAL
42317: AND
42318: PUSH
42319: LD_VAR 0 13
42323: PPUSH
42324: CALL_OW 263
42328: PUSH
42329: LD_INT 1
42331: EQUAL
42332: AND
42333: IFFALSE 42497
// begin if IsDrivenBy ( tmp ) then
42335: LD_VAR 0 13
42339: PPUSH
42340: CALL_OW 311
42344: IFFALSE 42348
// continue ;
42346: GO 42147
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42348: LD_VAR 0 6
42352: PPUSH
42353: LD_INT 3
42355: PUSH
42356: LD_INT 60
42358: PUSH
42359: EMPTY
42360: LIST
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 3
42368: PUSH
42369: LD_INT 55
42371: PUSH
42372: EMPTY
42373: LIST
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PPUSH
42383: CALL_OW 72
42387: IFFALSE 42495
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42389: LD_ADDR_VAR 0 18
42393: PUSH
42394: LD_VAR 0 6
42398: PPUSH
42399: LD_INT 3
42401: PUSH
42402: LD_INT 60
42404: PUSH
42405: EMPTY
42406: LIST
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 3
42414: PUSH
42415: LD_INT 55
42417: PUSH
42418: EMPTY
42419: LIST
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PPUSH
42429: CALL_OW 72
42433: PUSH
42434: LD_INT 1
42436: ARRAY
42437: ST_TO_ADDR
// if IsInUnit ( driver ) then
42438: LD_VAR 0 18
42442: PPUSH
42443: CALL_OW 310
42447: IFFALSE 42458
// ComExit ( driver ) ;
42449: LD_VAR 0 18
42453: PPUSH
42454: CALL 67191 0 1
// AddComEnterUnit ( driver , tmp ) ;
42458: LD_VAR 0 18
42462: PPUSH
42463: LD_VAR 0 13
42467: PPUSH
42468: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42472: LD_VAR 0 18
42476: PPUSH
42477: LD_VAR 0 7
42481: PPUSH
42482: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42486: LD_VAR 0 18
42490: PPUSH
42491: CALL_OW 181
// end ; continue ;
42495: GO 42147
// end ; if not cleaners or not tmp in cleaners then
42497: LD_VAR 0 6
42501: NOT
42502: PUSH
42503: LD_VAR 0 13
42507: PUSH
42508: LD_VAR 0 6
42512: IN
42513: NOT
42514: OR
42515: IFFALSE 42822
// begin if dep then
42517: LD_VAR 0 17
42521: IFFALSE 42657
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42523: LD_ADDR_VAR 0 16
42527: PUSH
42528: LD_VAR 0 17
42532: PUSH
42533: LD_INT 1
42535: ARRAY
42536: PPUSH
42537: CALL_OW 250
42541: PPUSH
42542: LD_VAR 0 17
42546: PUSH
42547: LD_INT 1
42549: ARRAY
42550: PPUSH
42551: CALL_OW 254
42555: PPUSH
42556: LD_INT 5
42558: PPUSH
42559: CALL_OW 272
42563: PUSH
42564: LD_VAR 0 17
42568: PUSH
42569: LD_INT 1
42571: ARRAY
42572: PPUSH
42573: CALL_OW 251
42577: PPUSH
42578: LD_VAR 0 17
42582: PUSH
42583: LD_INT 1
42585: ARRAY
42586: PPUSH
42587: CALL_OW 254
42591: PPUSH
42592: LD_INT 5
42594: PPUSH
42595: CALL_OW 273
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42604: LD_VAR 0 16
42608: PUSH
42609: LD_INT 1
42611: ARRAY
42612: PPUSH
42613: LD_VAR 0 16
42617: PUSH
42618: LD_INT 2
42620: ARRAY
42621: PPUSH
42622: CALL_OW 488
42626: IFFALSE 42657
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42628: LD_VAR 0 13
42632: PPUSH
42633: LD_VAR 0 16
42637: PUSH
42638: LD_INT 1
42640: ARRAY
42641: PPUSH
42642: LD_VAR 0 16
42646: PUSH
42647: LD_INT 2
42649: ARRAY
42650: PPUSH
42651: CALL_OW 111
// continue ;
42655: GO 42147
// end ; end ; r := GetDir ( tmp ) ;
42657: LD_ADDR_VAR 0 15
42661: PUSH
42662: LD_VAR 0 13
42666: PPUSH
42667: CALL_OW 254
42671: ST_TO_ADDR
// if r = 5 then
42672: LD_VAR 0 15
42676: PUSH
42677: LD_INT 5
42679: EQUAL
42680: IFFALSE 42690
// r := 0 ;
42682: LD_ADDR_VAR 0 15
42686: PUSH
42687: LD_INT 0
42689: ST_TO_ADDR
// for j = r to 5 do
42690: LD_ADDR_VAR 0 10
42694: PUSH
42695: DOUBLE
42696: LD_VAR 0 15
42700: DEC
42701: ST_TO_ADDR
42702: LD_INT 5
42704: PUSH
42705: FOR_TO
42706: IFFALSE 42820
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42708: LD_ADDR_VAR 0 11
42712: PUSH
42713: LD_VAR 0 13
42717: PPUSH
42718: CALL_OW 250
42722: PPUSH
42723: LD_VAR 0 10
42727: PPUSH
42728: LD_INT 2
42730: PPUSH
42731: CALL_OW 272
42735: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42736: LD_ADDR_VAR 0 12
42740: PUSH
42741: LD_VAR 0 13
42745: PPUSH
42746: CALL_OW 251
42750: PPUSH
42751: LD_VAR 0 10
42755: PPUSH
42756: LD_INT 2
42758: PPUSH
42759: CALL_OW 273
42763: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42764: LD_VAR 0 11
42768: PPUSH
42769: LD_VAR 0 12
42773: PPUSH
42774: CALL_OW 488
42778: PUSH
42779: LD_VAR 0 11
42783: PPUSH
42784: LD_VAR 0 12
42788: PPUSH
42789: CALL_OW 428
42793: NOT
42794: AND
42795: IFFALSE 42818
// begin ComMoveXY ( tmp , _x , _y ) ;
42797: LD_VAR 0 13
42801: PPUSH
42802: LD_VAR 0 11
42806: PPUSH
42807: LD_VAR 0 12
42811: PPUSH
42812: CALL_OW 111
// break ;
42816: GO 42820
// end ; end ;
42818: GO 42705
42820: POP
42821: POP
// end ; end ;
42822: GO 42147
42824: POP
42825: POP
// end ;
42826: LD_VAR 0 8
42830: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42831: LD_INT 0
42833: PPUSH
// result := true ;
42834: LD_ADDR_VAR 0 3
42838: PUSH
42839: LD_INT 1
42841: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42842: LD_VAR 0 2
42846: PUSH
42847: LD_INT 24
42849: DOUBLE
42850: EQUAL
42851: IFTRUE 42861
42853: LD_INT 33
42855: DOUBLE
42856: EQUAL
42857: IFTRUE 42861
42859: GO 42886
42861: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42862: LD_ADDR_VAR 0 3
42866: PUSH
42867: LD_INT 32
42869: PPUSH
42870: LD_VAR 0 1
42874: PPUSH
42875: CALL_OW 321
42879: PUSH
42880: LD_INT 2
42882: EQUAL
42883: ST_TO_ADDR
42884: GO 43206
42886: LD_INT 20
42888: DOUBLE
42889: EQUAL
42890: IFTRUE 42894
42892: GO 42919
42894: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42895: LD_ADDR_VAR 0 3
42899: PUSH
42900: LD_INT 6
42902: PPUSH
42903: LD_VAR 0 1
42907: PPUSH
42908: CALL_OW 321
42912: PUSH
42913: LD_INT 2
42915: EQUAL
42916: ST_TO_ADDR
42917: GO 43206
42919: LD_INT 22
42921: DOUBLE
42922: EQUAL
42923: IFTRUE 42933
42925: LD_INT 36
42927: DOUBLE
42928: EQUAL
42929: IFTRUE 42933
42931: GO 42958
42933: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42934: LD_ADDR_VAR 0 3
42938: PUSH
42939: LD_INT 15
42941: PPUSH
42942: LD_VAR 0 1
42946: PPUSH
42947: CALL_OW 321
42951: PUSH
42952: LD_INT 2
42954: EQUAL
42955: ST_TO_ADDR
42956: GO 43206
42958: LD_INT 30
42960: DOUBLE
42961: EQUAL
42962: IFTRUE 42966
42964: GO 42991
42966: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42967: LD_ADDR_VAR 0 3
42971: PUSH
42972: LD_INT 20
42974: PPUSH
42975: LD_VAR 0 1
42979: PPUSH
42980: CALL_OW 321
42984: PUSH
42985: LD_INT 2
42987: EQUAL
42988: ST_TO_ADDR
42989: GO 43206
42991: LD_INT 28
42993: DOUBLE
42994: EQUAL
42995: IFTRUE 43005
42997: LD_INT 21
42999: DOUBLE
43000: EQUAL
43001: IFTRUE 43005
43003: GO 43030
43005: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43006: LD_ADDR_VAR 0 3
43010: PUSH
43011: LD_INT 21
43013: PPUSH
43014: LD_VAR 0 1
43018: PPUSH
43019: CALL_OW 321
43023: PUSH
43024: LD_INT 2
43026: EQUAL
43027: ST_TO_ADDR
43028: GO 43206
43030: LD_INT 16
43032: DOUBLE
43033: EQUAL
43034: IFTRUE 43038
43036: GO 43065
43038: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43039: LD_ADDR_VAR 0 3
43043: PUSH
43044: LD_EXP 58
43048: PPUSH
43049: LD_VAR 0 1
43053: PPUSH
43054: CALL_OW 321
43058: PUSH
43059: LD_INT 2
43061: EQUAL
43062: ST_TO_ADDR
43063: GO 43206
43065: LD_INT 19
43067: DOUBLE
43068: EQUAL
43069: IFTRUE 43079
43071: LD_INT 23
43073: DOUBLE
43074: EQUAL
43075: IFTRUE 43079
43077: GO 43106
43079: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43080: LD_ADDR_VAR 0 3
43084: PUSH
43085: LD_EXP 57
43089: PPUSH
43090: LD_VAR 0 1
43094: PPUSH
43095: CALL_OW 321
43099: PUSH
43100: LD_INT 2
43102: EQUAL
43103: ST_TO_ADDR
43104: GO 43206
43106: LD_INT 17
43108: DOUBLE
43109: EQUAL
43110: IFTRUE 43114
43112: GO 43139
43114: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43115: LD_ADDR_VAR 0 3
43119: PUSH
43120: LD_INT 39
43122: PPUSH
43123: LD_VAR 0 1
43127: PPUSH
43128: CALL_OW 321
43132: PUSH
43133: LD_INT 2
43135: EQUAL
43136: ST_TO_ADDR
43137: GO 43206
43139: LD_INT 18
43141: DOUBLE
43142: EQUAL
43143: IFTRUE 43147
43145: GO 43172
43147: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43148: LD_ADDR_VAR 0 3
43152: PUSH
43153: LD_INT 40
43155: PPUSH
43156: LD_VAR 0 1
43160: PPUSH
43161: CALL_OW 321
43165: PUSH
43166: LD_INT 2
43168: EQUAL
43169: ST_TO_ADDR
43170: GO 43206
43172: LD_INT 27
43174: DOUBLE
43175: EQUAL
43176: IFTRUE 43180
43178: GO 43205
43180: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43181: LD_ADDR_VAR 0 3
43185: PUSH
43186: LD_INT 35
43188: PPUSH
43189: LD_VAR 0 1
43193: PPUSH
43194: CALL_OW 321
43198: PUSH
43199: LD_INT 2
43201: EQUAL
43202: ST_TO_ADDR
43203: GO 43206
43205: POP
// end ;
43206: LD_VAR 0 3
43210: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43211: LD_INT 0
43213: PPUSH
43214: PPUSH
43215: PPUSH
43216: PPUSH
43217: PPUSH
43218: PPUSH
43219: PPUSH
43220: PPUSH
43221: PPUSH
43222: PPUSH
43223: PPUSH
// result := false ;
43224: LD_ADDR_VAR 0 6
43228: PUSH
43229: LD_INT 0
43231: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43232: LD_VAR 0 1
43236: NOT
43237: PUSH
43238: LD_VAR 0 1
43242: PPUSH
43243: CALL_OW 266
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: LD_INT 1
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: IN
43258: NOT
43259: OR
43260: PUSH
43261: LD_VAR 0 2
43265: NOT
43266: OR
43267: PUSH
43268: LD_VAR 0 5
43272: PUSH
43273: LD_INT 0
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: LD_INT 2
43281: PUSH
43282: LD_INT 3
43284: PUSH
43285: LD_INT 4
43287: PUSH
43288: LD_INT 5
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: IN
43299: NOT
43300: OR
43301: PUSH
43302: LD_VAR 0 3
43306: PPUSH
43307: LD_VAR 0 4
43311: PPUSH
43312: CALL_OW 488
43316: NOT
43317: OR
43318: IFFALSE 43322
// exit ;
43320: GO 44058
// side := GetSide ( depot ) ;
43322: LD_ADDR_VAR 0 9
43326: PUSH
43327: LD_VAR 0 1
43331: PPUSH
43332: CALL_OW 255
43336: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43337: LD_VAR 0 9
43341: PPUSH
43342: LD_VAR 0 2
43346: PPUSH
43347: CALL 42831 0 2
43351: NOT
43352: IFFALSE 43356
// exit ;
43354: GO 44058
// pom := GetBase ( depot ) ;
43356: LD_ADDR_VAR 0 10
43360: PUSH
43361: LD_VAR 0 1
43365: PPUSH
43366: CALL_OW 274
43370: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43371: LD_ADDR_VAR 0 11
43375: PUSH
43376: LD_VAR 0 2
43380: PPUSH
43381: LD_VAR 0 1
43385: PPUSH
43386: CALL_OW 248
43390: PPUSH
43391: CALL_OW 450
43395: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43396: LD_VAR 0 10
43400: PPUSH
43401: LD_INT 1
43403: PPUSH
43404: CALL_OW 275
43408: PUSH
43409: LD_VAR 0 11
43413: PUSH
43414: LD_INT 1
43416: ARRAY
43417: GREATEREQUAL
43418: PUSH
43419: LD_VAR 0 10
43423: PPUSH
43424: LD_INT 2
43426: PPUSH
43427: CALL_OW 275
43431: PUSH
43432: LD_VAR 0 11
43436: PUSH
43437: LD_INT 2
43439: ARRAY
43440: GREATEREQUAL
43441: AND
43442: PUSH
43443: LD_VAR 0 10
43447: PPUSH
43448: LD_INT 3
43450: PPUSH
43451: CALL_OW 275
43455: PUSH
43456: LD_VAR 0 11
43460: PUSH
43461: LD_INT 3
43463: ARRAY
43464: GREATEREQUAL
43465: AND
43466: NOT
43467: IFFALSE 43471
// exit ;
43469: GO 44058
// if GetBType ( depot ) = b_depot then
43471: LD_VAR 0 1
43475: PPUSH
43476: CALL_OW 266
43480: PUSH
43481: LD_INT 0
43483: EQUAL
43484: IFFALSE 43496
// dist := 28 else
43486: LD_ADDR_VAR 0 14
43490: PUSH
43491: LD_INT 28
43493: ST_TO_ADDR
43494: GO 43504
// dist := 36 ;
43496: LD_ADDR_VAR 0 14
43500: PUSH
43501: LD_INT 36
43503: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43504: LD_VAR 0 1
43508: PPUSH
43509: LD_VAR 0 3
43513: PPUSH
43514: LD_VAR 0 4
43518: PPUSH
43519: CALL_OW 297
43523: PUSH
43524: LD_VAR 0 14
43528: GREATER
43529: IFFALSE 43533
// exit ;
43531: GO 44058
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43533: LD_ADDR_VAR 0 12
43537: PUSH
43538: LD_VAR 0 2
43542: PPUSH
43543: LD_VAR 0 3
43547: PPUSH
43548: LD_VAR 0 4
43552: PPUSH
43553: LD_VAR 0 5
43557: PPUSH
43558: LD_VAR 0 1
43562: PPUSH
43563: CALL_OW 248
43567: PPUSH
43568: LD_INT 0
43570: PPUSH
43571: CALL 44063 0 6
43575: ST_TO_ADDR
// if not hexes then
43576: LD_VAR 0 12
43580: NOT
43581: IFFALSE 43585
// exit ;
43583: GO 44058
// hex := GetHexInfo ( x , y ) ;
43585: LD_ADDR_VAR 0 15
43589: PUSH
43590: LD_VAR 0 3
43594: PPUSH
43595: LD_VAR 0 4
43599: PPUSH
43600: CALL_OW 546
43604: ST_TO_ADDR
// if hex [ 1 ] then
43605: LD_VAR 0 15
43609: PUSH
43610: LD_INT 1
43612: ARRAY
43613: IFFALSE 43617
// exit ;
43615: GO 44058
// height := hex [ 2 ] ;
43617: LD_ADDR_VAR 0 13
43621: PUSH
43622: LD_VAR 0 15
43626: PUSH
43627: LD_INT 2
43629: ARRAY
43630: ST_TO_ADDR
// for i = 1 to hexes do
43631: LD_ADDR_VAR 0 7
43635: PUSH
43636: DOUBLE
43637: LD_INT 1
43639: DEC
43640: ST_TO_ADDR
43641: LD_VAR 0 12
43645: PUSH
43646: FOR_TO
43647: IFFALSE 43977
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43649: LD_VAR 0 12
43653: PUSH
43654: LD_VAR 0 7
43658: ARRAY
43659: PUSH
43660: LD_INT 1
43662: ARRAY
43663: PPUSH
43664: LD_VAR 0 12
43668: PUSH
43669: LD_VAR 0 7
43673: ARRAY
43674: PUSH
43675: LD_INT 2
43677: ARRAY
43678: PPUSH
43679: CALL_OW 488
43683: NOT
43684: PUSH
43685: LD_VAR 0 12
43689: PUSH
43690: LD_VAR 0 7
43694: ARRAY
43695: PUSH
43696: LD_INT 1
43698: ARRAY
43699: PPUSH
43700: LD_VAR 0 12
43704: PUSH
43705: LD_VAR 0 7
43709: ARRAY
43710: PUSH
43711: LD_INT 2
43713: ARRAY
43714: PPUSH
43715: CALL_OW 428
43719: PUSH
43720: LD_INT 0
43722: GREATER
43723: OR
43724: PUSH
43725: LD_VAR 0 12
43729: PUSH
43730: LD_VAR 0 7
43734: ARRAY
43735: PUSH
43736: LD_INT 1
43738: ARRAY
43739: PPUSH
43740: LD_VAR 0 12
43744: PUSH
43745: LD_VAR 0 7
43749: ARRAY
43750: PUSH
43751: LD_INT 2
43753: ARRAY
43754: PPUSH
43755: CALL_OW 351
43759: OR
43760: IFFALSE 43766
// exit ;
43762: POP
43763: POP
43764: GO 44058
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43766: LD_ADDR_VAR 0 8
43770: PUSH
43771: LD_VAR 0 12
43775: PUSH
43776: LD_VAR 0 7
43780: ARRAY
43781: PUSH
43782: LD_INT 1
43784: ARRAY
43785: PPUSH
43786: LD_VAR 0 12
43790: PUSH
43791: LD_VAR 0 7
43795: ARRAY
43796: PUSH
43797: LD_INT 2
43799: ARRAY
43800: PPUSH
43801: CALL_OW 546
43805: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43806: LD_VAR 0 8
43810: PUSH
43811: LD_INT 1
43813: ARRAY
43814: PUSH
43815: LD_VAR 0 8
43819: PUSH
43820: LD_INT 2
43822: ARRAY
43823: PUSH
43824: LD_VAR 0 13
43828: PUSH
43829: LD_INT 2
43831: PLUS
43832: GREATER
43833: OR
43834: PUSH
43835: LD_VAR 0 8
43839: PUSH
43840: LD_INT 2
43842: ARRAY
43843: PUSH
43844: LD_VAR 0 13
43848: PUSH
43849: LD_INT 2
43851: MINUS
43852: LESS
43853: OR
43854: PUSH
43855: LD_VAR 0 8
43859: PUSH
43860: LD_INT 3
43862: ARRAY
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: LD_INT 8
43869: PUSH
43870: LD_INT 9
43872: PUSH
43873: LD_INT 10
43875: PUSH
43876: LD_INT 11
43878: PUSH
43879: LD_INT 12
43881: PUSH
43882: LD_INT 13
43884: PUSH
43885: LD_INT 16
43887: PUSH
43888: LD_INT 17
43890: PUSH
43891: LD_INT 18
43893: PUSH
43894: LD_INT 19
43896: PUSH
43897: LD_INT 20
43899: PUSH
43900: LD_INT 21
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: IN
43918: NOT
43919: OR
43920: PUSH
43921: LD_VAR 0 8
43925: PUSH
43926: LD_INT 5
43928: ARRAY
43929: NOT
43930: OR
43931: PUSH
43932: LD_VAR 0 8
43936: PUSH
43937: LD_INT 6
43939: ARRAY
43940: PUSH
43941: LD_INT 1
43943: PUSH
43944: LD_INT 2
43946: PUSH
43947: LD_INT 7
43949: PUSH
43950: LD_INT 9
43952: PUSH
43953: LD_INT 10
43955: PUSH
43956: LD_INT 11
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: IN
43967: NOT
43968: OR
43969: IFFALSE 43975
// exit ;
43971: POP
43972: POP
43973: GO 44058
// end ;
43975: GO 43646
43977: POP
43978: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43979: LD_VAR 0 9
43983: PPUSH
43984: LD_VAR 0 3
43988: PPUSH
43989: LD_VAR 0 4
43993: PPUSH
43994: LD_INT 20
43996: PPUSH
43997: CALL 36004 0 4
44001: PUSH
44002: LD_INT 4
44004: ARRAY
44005: IFFALSE 44009
// exit ;
44007: GO 44058
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44009: LD_VAR 0 2
44013: PUSH
44014: LD_INT 29
44016: PUSH
44017: LD_INT 30
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: IN
44024: PUSH
44025: LD_VAR 0 3
44029: PPUSH
44030: LD_VAR 0 4
44034: PPUSH
44035: LD_VAR 0 9
44039: PPUSH
44040: CALL_OW 440
44044: NOT
44045: AND
44046: IFFALSE 44050
// exit ;
44048: GO 44058
// result := true ;
44050: LD_ADDR_VAR 0 6
44054: PUSH
44055: LD_INT 1
44057: ST_TO_ADDR
// end ;
44058: LD_VAR 0 6
44062: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44063: LD_INT 0
44065: PPUSH
44066: PPUSH
44067: PPUSH
44068: PPUSH
44069: PPUSH
44070: PPUSH
44071: PPUSH
44072: PPUSH
44073: PPUSH
44074: PPUSH
44075: PPUSH
44076: PPUSH
44077: PPUSH
44078: PPUSH
44079: PPUSH
44080: PPUSH
44081: PPUSH
44082: PPUSH
44083: PPUSH
44084: PPUSH
44085: PPUSH
44086: PPUSH
44087: PPUSH
44088: PPUSH
44089: PPUSH
44090: PPUSH
44091: PPUSH
44092: PPUSH
44093: PPUSH
44094: PPUSH
44095: PPUSH
44096: PPUSH
44097: PPUSH
44098: PPUSH
44099: PPUSH
44100: PPUSH
44101: PPUSH
44102: PPUSH
44103: PPUSH
44104: PPUSH
44105: PPUSH
44106: PPUSH
44107: PPUSH
44108: PPUSH
44109: PPUSH
44110: PPUSH
44111: PPUSH
44112: PPUSH
44113: PPUSH
44114: PPUSH
44115: PPUSH
44116: PPUSH
44117: PPUSH
44118: PPUSH
44119: PPUSH
44120: PPUSH
44121: PPUSH
44122: PPUSH
// result = [ ] ;
44123: LD_ADDR_VAR 0 7
44127: PUSH
44128: EMPTY
44129: ST_TO_ADDR
// temp_list = [ ] ;
44130: LD_ADDR_VAR 0 9
44134: PUSH
44135: EMPTY
44136: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44137: LD_VAR 0 4
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: LD_INT 1
44147: PUSH
44148: LD_INT 2
44150: PUSH
44151: LD_INT 3
44153: PUSH
44154: LD_INT 4
44156: PUSH
44157: LD_INT 5
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: IN
44168: NOT
44169: PUSH
44170: LD_VAR 0 1
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: LD_INT 1
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: IN
44185: PUSH
44186: LD_VAR 0 5
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: LD_INT 2
44196: PUSH
44197: LD_INT 3
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: LIST
44204: IN
44205: NOT
44206: AND
44207: OR
44208: IFFALSE 44212
// exit ;
44210: GO 62603
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44212: LD_VAR 0 1
44216: PUSH
44217: LD_INT 6
44219: PUSH
44220: LD_INT 7
44222: PUSH
44223: LD_INT 8
44225: PUSH
44226: LD_INT 13
44228: PUSH
44229: LD_INT 12
44231: PUSH
44232: LD_INT 15
44234: PUSH
44235: LD_INT 11
44237: PUSH
44238: LD_INT 14
44240: PUSH
44241: LD_INT 10
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: IN
44255: IFFALSE 44265
// btype = b_lab ;
44257: LD_ADDR_VAR 0 1
44261: PUSH
44262: LD_INT 6
44264: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44265: LD_VAR 0 6
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: LD_INT 2
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: LIST
44283: IN
44284: NOT
44285: PUSH
44286: LD_VAR 0 1
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: LD_INT 1
44296: PUSH
44297: LD_INT 2
44299: PUSH
44300: LD_INT 3
44302: PUSH
44303: LD_INT 6
44305: PUSH
44306: LD_INT 36
44308: PUSH
44309: LD_INT 4
44311: PUSH
44312: LD_INT 5
44314: PUSH
44315: LD_INT 31
44317: PUSH
44318: LD_INT 32
44320: PUSH
44321: LD_INT 33
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: IN
44337: NOT
44338: PUSH
44339: LD_VAR 0 6
44343: PUSH
44344: LD_INT 1
44346: EQUAL
44347: AND
44348: OR
44349: PUSH
44350: LD_VAR 0 1
44354: PUSH
44355: LD_INT 2
44357: PUSH
44358: LD_INT 3
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: IN
44365: NOT
44366: PUSH
44367: LD_VAR 0 6
44371: PUSH
44372: LD_INT 2
44374: EQUAL
44375: AND
44376: OR
44377: IFFALSE 44387
// mode = 0 ;
44379: LD_ADDR_VAR 0 6
44383: PUSH
44384: LD_INT 0
44386: ST_TO_ADDR
// case mode of 0 :
44387: LD_VAR 0 6
44391: PUSH
44392: LD_INT 0
44394: DOUBLE
44395: EQUAL
44396: IFTRUE 44400
44398: GO 55853
44400: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44401: LD_ADDR_VAR 0 11
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: LD_INT 1
44421: NEG
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 1
44459: NEG
44460: PUSH
44461: LD_INT 0
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: LD_INT 1
44474: NEG
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: LD_INT 2
44486: NEG
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 0
44494: PUSH
44495: LD_INT 2
44497: NEG
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 1
44505: PUSH
44506: LD_INT 1
44508: NEG
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 1
44516: PUSH
44517: LD_INT 2
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: NEG
44537: PUSH
44538: LD_INT 1
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: LD_INT 3
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 3
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: LD_INT 2
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44594: LD_ADDR_VAR 0 12
44598: PUSH
44599: LD_INT 0
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 0
44611: PUSH
44612: LD_INT 1
44614: NEG
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 1
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: LD_INT 1
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: LD_INT 1
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 1
44663: NEG
44664: PUSH
44665: LD_INT 1
44667: NEG
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 1
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 2
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 2
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: LD_INT 1
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 2
44717: NEG
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 2
44728: NEG
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 2
44740: NEG
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 3
44751: NEG
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 3
44762: NEG
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44790: LD_ADDR_VAR 0 13
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: LD_INT 2
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 2
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 2
44893: PUSH
44894: LD_INT 2
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: LD_INT 2
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 2
44913: NEG
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 2
44925: NEG
44926: PUSH
44927: LD_INT 2
44929: NEG
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 2
44937: NEG
44938: PUSH
44939: LD_INT 3
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 3
44949: NEG
44950: PUSH
44951: LD_INT 2
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 3
44961: NEG
44962: PUSH
44963: LD_INT 3
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44989: LD_ADDR_VAR 0 14
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 0
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: LD_INT 0
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 1
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 0
45037: PUSH
45038: LD_INT 1
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: LD_INT 1
45062: NEG
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: NEG
45071: PUSH
45072: LD_INT 2
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: LD_INT 2
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: LD_INT 2
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: LD_INT 2
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: LD_INT 3
45139: NEG
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: LD_INT 3
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: LD_INT 2
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45185: LD_ADDR_VAR 0 15
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: LD_INT 1
45258: NEG
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 1
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 2
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 2
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 2
45308: NEG
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 2
45319: NEG
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 2
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 3
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 3
45352: PUSH
45353: LD_INT 1
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45378: LD_ADDR_VAR 0 16
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 1
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: LD_INT 1
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 1
45436: NEG
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: LD_INT 1
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 1
45459: NEG
45460: PUSH
45461: LD_INT 2
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 2
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 2
45481: PUSH
45482: LD_INT 2
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: LD_INT 2
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 2
45501: NEG
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 2
45513: NEG
45514: PUSH
45515: LD_INT 2
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 3
45525: PUSH
45526: LD_INT 2
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 3
45535: PUSH
45536: LD_INT 3
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 2
45545: PUSH
45546: LD_INT 3
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45571: LD_ADDR_VAR 0 17
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: NEG
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: LD_INT 2
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: LD_INT 2
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 2
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 2
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 2
45706: PUSH
45707: LD_INT 2
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: LD_INT 2
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 2
45747: NEG
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 2
45758: NEG
45759: PUSH
45760: LD_INT 1
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 2
45770: NEG
45771: PUSH
45772: LD_INT 2
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45801: LD_ADDR_VAR 0 18
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 0
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 1
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 1
45839: PUSH
45840: LD_INT 1
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: LD_INT 1
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: LD_INT 0
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 1
45870: NEG
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: NEG
45883: PUSH
45884: LD_INT 2
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 0
45894: PUSH
45895: LD_INT 2
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 2
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 2
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 2
45936: PUSH
45937: LD_INT 2
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: LD_INT 2
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: LD_INT 2
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: LD_INT 1
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 2
45977: NEG
45978: PUSH
45979: LD_INT 0
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 2
45988: NEG
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 2
46000: NEG
46001: PUSH
46002: LD_INT 2
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46031: LD_ADDR_VAR 0 19
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: LD_INT 0
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: LD_INT 1
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: LD_INT 0
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: LD_INT 1
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: LD_INT 0
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 1
46112: NEG
46113: PUSH
46114: LD_INT 2
46116: NEG
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: LD_INT 2
46127: NEG
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 2
46146: PUSH
46147: LD_INT 0
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 2
46156: PUSH
46157: LD_INT 1
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 2
46166: PUSH
46167: LD_INT 2
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: LD_INT 2
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 2
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 2
46207: NEG
46208: PUSH
46209: LD_INT 0
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 2
46218: NEG
46219: PUSH
46220: LD_INT 1
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 2
46230: NEG
46231: PUSH
46232: LD_INT 2
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46261: LD_ADDR_VAR 0 20
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: LD_INT 2
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: LD_INT 2
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 2
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 2
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 2
46396: PUSH
46397: LD_INT 2
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: LD_INT 2
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: LD_INT 2
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 2
46437: NEG
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 2
46448: NEG
46449: PUSH
46450: LD_INT 1
46452: NEG
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 2
46460: NEG
46461: PUSH
46462: LD_INT 2
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46491: LD_ADDR_VAR 0 21
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 1
46519: PUSH
46520: LD_INT 0
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: LD_INT 2
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: LD_INT 2
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 2
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 2
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 2
46626: PUSH
46627: LD_INT 2
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: LD_INT 2
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: LD_INT 2
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 2
46667: NEG
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 2
46678: NEG
46679: PUSH
46680: LD_INT 1
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 2
46690: NEG
46691: PUSH
46692: LD_INT 2
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46721: LD_ADDR_VAR 0 22
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: LD_INT 2
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: LD_INT 2
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 2
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 2
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 2
46856: PUSH
46857: LD_INT 2
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: LD_INT 2
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: LD_INT 2
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 2
46897: NEG
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 2
46908: NEG
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 2
46920: NEG
46921: PUSH
46922: LD_INT 2
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46951: LD_ADDR_VAR 0 23
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: LD_INT 0
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: LD_INT 2
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: LD_INT 2
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 2
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 2
47086: PUSH
47087: LD_INT 2
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: PUSH
47097: LD_INT 2
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: LD_INT 1
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 2
47138: NEG
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 2
47150: NEG
47151: PUSH
47152: LD_INT 2
47154: NEG
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 2
47162: NEG
47163: PUSH
47164: LD_INT 3
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: LD_INT 3
47178: NEG
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: LD_INT 2
47189: NEG
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 2
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47231: LD_ADDR_VAR 0 24
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: LD_INT 1
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: NEG
47313: PUSH
47314: LD_INT 2
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: LD_INT 2
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 2
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 2
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 2
47366: PUSH
47367: LD_INT 2
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: LD_INT 2
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 2
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: NEG
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 2
47430: NEG
47431: PUSH
47432: LD_INT 2
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: LD_INT 2
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 2
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 3
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 3
47474: PUSH
47475: LD_INT 2
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47507: LD_ADDR_VAR 0 25
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: LD_INT 1
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: LD_INT 1
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: NEG
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: LD_INT 2
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: LD_INT 2
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 2
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 2
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 2
47642: PUSH
47643: LD_INT 2
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: LD_INT 2
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: LD_INT 2
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 2
47683: NEG
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 2
47706: NEG
47707: PUSH
47708: LD_INT 2
47710: NEG
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 3
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 3
47728: PUSH
47729: LD_INT 2
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 2
47738: PUSH
47739: LD_INT 3
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: LD_INT 3
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47781: LD_ADDR_VAR 0 26
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: LD_INT 2
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: LD_INT 2
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 2
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 2
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: PUSH
47927: LD_INT 2
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: LD_INT 2
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 2
47957: NEG
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: PUSH
47993: LD_INT 3
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: LD_INT 3
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: LD_INT 2
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 2
48023: NEG
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48057: LD_ADDR_VAR 0 27
48061: PUSH
48062: LD_INT 0
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 0
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 1
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 1
48126: NEG
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: LD_INT 2
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: LD_INT 2
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: LD_INT 1
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 2
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 2
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 2
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: LD_INT 2
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: LD_INT 2
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: NEG
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 2
48244: NEG
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: LD_INT 2
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: LD_INT 2
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 2
48279: NEG
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 3
48290: NEG
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 3
48302: NEG
48303: PUSH
48304: LD_INT 2
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48337: LD_ADDR_VAR 0 28
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: PUSH
48366: LD_INT 0
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 1
48375: PUSH
48376: LD_INT 1
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: LD_INT 2
48422: NEG
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: LD_INT 2
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 2
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 2
48472: PUSH
48473: LD_INT 2
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: LD_INT 2
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 2
48513: NEG
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 2
48524: NEG
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 2
48536: NEG
48537: PUSH
48538: LD_INT 2
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 2
48548: NEG
48549: PUSH
48550: LD_INT 3
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: LD_INT 3
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 3
48572: NEG
48573: PUSH
48574: LD_INT 1
48576: NEG
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 3
48584: NEG
48585: PUSH
48586: LD_INT 2
48588: NEG
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48619: LD_ADDR_VAR 0 29
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: LD_INT 2
48704: NEG
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: LD_INT 2
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: LD_INT 1
48726: NEG
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 2
48734: PUSH
48735: LD_INT 0
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: LD_INT 2
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 2
48785: NEG
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 2
48797: NEG
48798: PUSH
48799: LD_INT 2
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: LD_INT 3
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 3
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: LD_INT 3
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: LD_INT 2
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 3
48863: NEG
48864: PUSH
48865: LD_INT 2
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48898: LD_ADDR_VAR 0 30
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: LD_INT 1
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 1
48956: NEG
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 2
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 2
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 2
49033: PUSH
49034: LD_INT 2
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: LD_INT 2
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 2
49064: NEG
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 2
49075: NEG
49076: PUSH
49077: LD_INT 1
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: LD_INT 3
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 1
49099: PUSH
49100: LD_INT 2
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 3
49110: PUSH
49111: LD_INT 2
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 2
49120: PUSH
49121: LD_INT 3
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 2
49130: NEG
49131: PUSH
49132: LD_INT 1
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 3
49141: NEG
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49176: LD_ADDR_VAR 0 31
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: LD_INT 1
49196: NEG
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: LD_INT 0
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: LD_INT 2
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 2
49300: PUSH
49301: LD_INT 2
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: LD_INT 2
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: LD_INT 2
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 2
49341: NEG
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 2
49353: NEG
49354: PUSH
49355: LD_INT 2
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 2
49365: NEG
49366: PUSH
49367: LD_INT 3
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 2
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 3
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 3
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 1
49408: NEG
49409: PUSH
49410: LD_INT 2
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 3
49419: NEG
49420: PUSH
49421: LD_INT 2
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49454: LD_ADDR_VAR 0 32
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: LD_INT 2
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: LD_INT 2
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 2
49579: PUSH
49580: LD_INT 2
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 1
49589: PUSH
49590: LD_INT 2
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: LD_INT 2
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: NEG
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 2
49620: NEG
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 2
49631: NEG
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: NEG
49644: PUSH
49645: LD_INT 3
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: LD_INT 2
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 3
49666: PUSH
49667: LD_INT 2
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 2
49676: PUSH
49677: LD_INT 3
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 2
49686: NEG
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 3
49697: NEG
49698: PUSH
49699: LD_INT 1
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49732: LD_ADDR_VAR 0 33
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: LD_INT 1
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: LD_INT 2
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 2
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 2
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: LD_INT 2
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: LD_INT 2
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 2
49887: NEG
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 2
49898: NEG
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 2
49910: NEG
49911: PUSH
49912: LD_INT 2
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 2
49922: NEG
49923: PUSH
49924: LD_INT 3
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 2
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 3
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: LD_INT 3
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: LD_INT 2
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 3
49976: NEG
49977: PUSH
49978: LD_INT 2
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50011: LD_ADDR_VAR 0 34
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 1
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: LD_INT 2
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: LD_INT 2
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: LD_INT 1
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 2
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: LD_INT 2
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 2
50167: NEG
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: LD_INT 2
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: LD_INT 3
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: LD_INT 2
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 3
50225: PUSH
50226: LD_INT 2
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: PUSH
50236: LD_INT 3
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 2
50245: NEG
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 3
50256: NEG
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50291: LD_ADDR_VAR 0 35
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: LD_INT 0
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: NEG
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50403: LD_ADDR_VAR 0 36
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: LD_INT 1
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: LD_INT 1
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: LD_INT 2
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: LD_INT 2
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50515: LD_ADDR_VAR 0 37
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: LD_INT 1
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: NEG
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50627: LD_ADDR_VAR 0 38
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 0
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 2
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 2
50718: NEG
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50739: LD_ADDR_VAR 0 39
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 1
50820: NEG
50821: PUSH
50822: LD_INT 2
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: LD_INT 2
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50851: LD_ADDR_VAR 0 40
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 0
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: LD_INT 1
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50963: LD_ADDR_VAR 0 41
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 1
51032: NEG
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: LD_INT 2
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 2
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 2
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 2
51087: PUSH
51088: LD_INT 2
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: LD_INT 2
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 2
51118: NEG
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 2
51129: NEG
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 2
51141: NEG
51142: PUSH
51143: LD_INT 2
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 2
51153: NEG
51154: PUSH
51155: LD_INT 3
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: LD_INT 1
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 3
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 3
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 3
51196: PUSH
51197: LD_INT 2
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 3
51206: PUSH
51207: LD_INT 3
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 2
51216: PUSH
51217: LD_INT 3
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 2
51226: NEG
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 3
51237: NEG
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 3
51248: NEG
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 3
51260: NEG
51261: PUSH
51262: LD_INT 2
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 3
51272: NEG
51273: PUSH
51274: LD_INT 3
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51313: LD_ADDR_VAR 0 42
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: LD_INT 2
51398: NEG
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: LD_INT 2
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 2
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: LD_INT 2
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: LD_INT 2
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 2
51479: NEG
51480: PUSH
51481: LD_INT 1
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 2
51491: NEG
51492: PUSH
51493: LD_INT 2
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 2
51503: NEG
51504: PUSH
51505: LD_INT 3
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: LD_INT 3
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: LD_INT 3
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: LD_INT 2
51541: NEG
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 3
51549: PUSH
51550: LD_INT 2
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 3
51559: PUSH
51560: LD_INT 3
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 2
51569: PUSH
51570: LD_INT 3
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: LD_INT 3
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: LD_INT 3
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: LD_INT 2
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 3
51610: NEG
51611: PUSH
51612: LD_INT 2
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 3
51622: NEG
51623: PUSH
51624: LD_INT 3
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51663: LD_ADDR_VAR 0 43
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: LD_INT 1
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: LD_INT 2
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: LD_INT 2
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: LD_INT 1
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 2
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 2
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: LD_INT 2
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: LD_INT 2
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 2
51829: NEG
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 2
51840: NEG
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: LD_INT 3
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: LD_INT 3
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: LD_INT 2
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 2
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 3
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 3
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: LD_INT 3
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: LD_INT 3
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 1
51937: NEG
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 2
51948: NEG
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 3
51959: NEG
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 3
51970: NEG
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52011: LD_ADDR_VAR 0 44
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 1
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 0
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 1
52069: NEG
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 1
52080: NEG
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: LD_INT 2
52096: NEG
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 2
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 2
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: LD_INT 2
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: LD_INT 1
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 2
52166: NEG
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 2
52177: NEG
52178: PUSH
52179: LD_INT 1
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 2
52189: NEG
52190: PUSH
52191: LD_INT 2
52193: NEG
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 2
52201: NEG
52202: PUSH
52203: LD_INT 3
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 2
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 3
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 3
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 3
52244: PUSH
52245: LD_INT 2
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 3
52254: PUSH
52255: LD_INT 3
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 2
52264: PUSH
52265: LD_INT 3
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 2
52274: NEG
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 3
52285: NEG
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 3
52296: NEG
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 3
52308: NEG
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 3
52320: NEG
52321: PUSH
52322: LD_INT 3
52324: NEG
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52361: LD_ADDR_VAR 0 45
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: LD_INT 2
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: LD_INT 2
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 2
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 2
52486: PUSH
52487: LD_INT 2
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: LD_INT 2
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: LD_INT 2
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 2
52527: NEG
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 2
52539: NEG
52540: PUSH
52541: LD_INT 2
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 2
52551: NEG
52552: PUSH
52553: LD_INT 3
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: LD_INT 3
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: LD_INT 3
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: LD_INT 2
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 3
52597: PUSH
52598: LD_INT 2
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 3
52607: PUSH
52608: LD_INT 3
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 2
52617: PUSH
52618: LD_INT 3
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 1
52627: PUSH
52628: LD_INT 3
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: LD_INT 3
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: LD_INT 2
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 3
52658: NEG
52659: PUSH
52660: LD_INT 2
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 3
52670: NEG
52671: PUSH
52672: LD_INT 3
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52711: LD_ADDR_VAR 0 46
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: LD_INT 2
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: LD_INT 2
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 2
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 2
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: LD_INT 2
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 2
52877: NEG
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 2
52888: NEG
52889: PUSH
52890: LD_INT 1
52892: NEG
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: LD_INT 3
52904: NEG
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: LD_INT 3
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 1
52923: PUSH
52924: LD_INT 2
52926: NEG
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 2
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 3
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 3
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: LD_INT 3
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: LD_INT 3
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 1
52985: NEG
52986: PUSH
52987: LD_INT 2
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 2
52996: NEG
52997: PUSH
52998: LD_INT 1
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 3
53007: NEG
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 3
53018: NEG
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53059: LD_ADDR_VAR 0 47
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: LD_INT 0
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: NEG
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: LD_INT 1
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: LD_INT 2
53144: NEG
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: LD_INT 2
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 2
53174: NEG
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 2
53186: NEG
53187: PUSH
53188: LD_INT 2
53190: NEG
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53210: LD_ADDR_VAR 0 48
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: NEG
53292: PUSH
53293: LD_INT 2
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 2
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 2
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53357: LD_ADDR_VAR 0 49
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: LD_INT 1
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: NEG
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 1
53426: NEG
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 2
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 2
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 2
53469: PUSH
53470: LD_INT 2
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: PUSH
53480: LD_INT 2
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53501: LD_ADDR_VAR 0 50
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 2
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 2
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: LD_INT 2
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53645: LD_ADDR_VAR 0 51
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 1
53726: PUSH
53727: LD_INT 2
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: LD_INT 2
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 2
53757: NEG
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 2
53768: NEG
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53792: LD_ADDR_VAR 0 52
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: PUSH
53831: LD_INT 1
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: LD_INT 1
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: LD_INT 2
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 2
53896: NEG
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 2
53907: NEG
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 2
53919: NEG
53920: PUSH
53921: LD_INT 2
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53943: LD_ADDR_VAR 0 53
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 1
54001: NEG
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: LD_INT 2
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: LD_INT 2
54039: NEG
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 1
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 2
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 2
54068: PUSH
54069: LD_INT 1
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 2
54078: PUSH
54079: LD_INT 2
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: LD_INT 2
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: LD_INT 2
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 2
54119: NEG
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 2
54130: NEG
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 2
54142: NEG
54143: PUSH
54144: LD_INT 2
54146: NEG
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54173: LD_ADDR_VAR 0 54
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: LD_INT 1
54246: NEG
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: LD_INT 2
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: LD_INT 2
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 2
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 2
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 2
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: LD_INT 2
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: LD_INT 2
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 2
54349: NEG
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 2
54360: NEG
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 2
54372: NEG
54373: PUSH
54374: LD_INT 2
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54403: LD_ADDR_VAR 0 55
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 1
54472: NEG
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: LD_INT 2
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: LD_INT 2
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 2
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 2
54538: PUSH
54539: LD_INT 2
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: LD_INT 2
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: LD_INT 2
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: NEG
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 2
54579: NEG
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 2
54590: NEG
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 2
54602: NEG
54603: PUSH
54604: LD_INT 2
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54633: LD_ADDR_VAR 0 56
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: LD_INT 2
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: LD_INT 2
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 2
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 2
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 2
54768: PUSH
54769: LD_INT 2
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: LD_INT 2
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 2
54809: NEG
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: LD_INT 1
54824: NEG
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 2
54832: NEG
54833: PUSH
54834: LD_INT 2
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54863: LD_ADDR_VAR 0 57
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: NEG
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: LD_INT 2
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 2
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 2
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 2
54998: PUSH
54999: LD_INT 2
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: LD_INT 2
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 2
55039: NEG
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 2
55050: NEG
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 2
55062: NEG
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55093: LD_ADDR_VAR 0 58
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: LD_INT 1
55113: NEG
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: LD_INT 2
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: LD_INT 2
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 1
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 2
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 2
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 2
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: LD_INT 2
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: LD_INT 2
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: LD_INT 1
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 2
55269: NEG
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 2
55280: NEG
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 2
55292: NEG
55293: PUSH
55294: LD_INT 2
55296: NEG
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55323: LD_ADDR_VAR 0 59
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: LD_INT 1
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 1
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: LD_INT 1
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 1
55392: NEG
55393: PUSH
55394: LD_INT 1
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55411: LD_ADDR_VAR 0 60
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: LD_INT 1
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55499: LD_ADDR_VAR 0 61
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: LD_INT 1
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: LD_INT 1
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 1
55568: NEG
55569: PUSH
55570: LD_INT 1
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55587: LD_ADDR_VAR 0 62
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: LD_INT 1
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: LD_INT 1
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 1
55656: NEG
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55675: LD_ADDR_VAR 0 63
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 1
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55763: LD_ADDR_VAR 0 64
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 1
55832: NEG
55833: PUSH
55834: LD_INT 1
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: ST_TO_ADDR
// end ; 1 :
55851: GO 61748
55853: LD_INT 1
55855: DOUBLE
55856: EQUAL
55857: IFTRUE 55861
55859: GO 58484
55861: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55862: LD_ADDR_VAR 0 11
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: LD_INT 3
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: LD_INT 3
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: LD_INT 2
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: LIST
55905: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55906: LD_ADDR_VAR 0 12
55910: PUSH
55911: LD_INT 2
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 3
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 3
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: LIST
55946: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55947: LD_ADDR_VAR 0 13
55951: PUSH
55952: LD_INT 3
55954: PUSH
55955: LD_INT 2
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 3
55964: PUSH
55965: LD_INT 3
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 2
55974: PUSH
55975: LD_INT 3
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: LIST
55986: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55987: LD_ADDR_VAR 0 14
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: LD_INT 3
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: LD_INT 3
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 2
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: LIST
56027: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56028: LD_ADDR_VAR 0 15
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 3
56046: NEG
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 3
56057: NEG
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: LIST
56071: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56072: LD_ADDR_VAR 0 16
56076: PUSH
56077: LD_INT 2
56079: NEG
56080: PUSH
56081: LD_INT 3
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 3
56091: NEG
56092: PUSH
56093: LD_INT 2
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 3
56103: NEG
56104: PUSH
56105: LD_INT 3
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: LIST
56117: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56118: LD_ADDR_VAR 0 17
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: LD_INT 3
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: LD_INT 3
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: LD_INT 2
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: LIST
56161: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56162: LD_ADDR_VAR 0 18
56166: PUSH
56167: LD_INT 2
56169: PUSH
56170: LD_INT 1
56172: NEG
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 3
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 3
56190: PUSH
56191: LD_INT 1
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: LIST
56202: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56203: LD_ADDR_VAR 0 19
56207: PUSH
56208: LD_INT 3
56210: PUSH
56211: LD_INT 2
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 3
56220: PUSH
56221: LD_INT 3
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 2
56230: PUSH
56231: LD_INT 3
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: LIST
56242: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56243: LD_ADDR_VAR 0 20
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: LD_INT 3
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: LD_INT 3
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: LD_INT 2
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: LIST
56283: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56284: LD_ADDR_VAR 0 21
56288: PUSH
56289: LD_INT 2
56291: NEG
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 3
56302: NEG
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 3
56313: NEG
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: LIST
56327: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56328: LD_ADDR_VAR 0 22
56332: PUSH
56333: LD_INT 2
56335: NEG
56336: PUSH
56337: LD_INT 3
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 3
56347: NEG
56348: PUSH
56349: LD_INT 2
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 3
56359: NEG
56360: PUSH
56361: LD_INT 3
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: LIST
56373: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56374: LD_ADDR_VAR 0 23
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: LD_INT 3
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 1
56392: NEG
56393: PUSH
56394: LD_INT 4
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: PUSH
56405: LD_INT 3
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: LIST
56417: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56418: LD_ADDR_VAR 0 24
56422: PUSH
56423: LD_INT 3
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 3
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 4
56446: PUSH
56447: LD_INT 1
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: LIST
56458: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56459: LD_ADDR_VAR 0 25
56463: PUSH
56464: LD_INT 3
56466: PUSH
56467: LD_INT 3
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 4
56476: PUSH
56477: LD_INT 3
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 3
56486: PUSH
56487: LD_INT 4
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: LIST
56498: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56499: LD_ADDR_VAR 0 26
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: LD_INT 3
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: LD_INT 4
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: LD_INT 3
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: LIST
56539: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56540: LD_ADDR_VAR 0 27
56544: PUSH
56545: LD_INT 3
56547: NEG
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 3
56558: NEG
56559: PUSH
56560: LD_INT 1
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 4
56569: NEG
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: LIST
56583: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56584: LD_ADDR_VAR 0 28
56588: PUSH
56589: LD_INT 3
56591: NEG
56592: PUSH
56593: LD_INT 3
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 3
56603: NEG
56604: PUSH
56605: LD_INT 4
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 4
56615: NEG
56616: PUSH
56617: LD_INT 3
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: LIST
56629: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56630: LD_ADDR_VAR 0 29
56634: PUSH
56635: LD_INT 1
56637: NEG
56638: PUSH
56639: LD_INT 3
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 3
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: LD_INT 2
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 1
56671: NEG
56672: PUSH
56673: LD_INT 4
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: LD_INT 4
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: LD_INT 3
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: LD_INT 5
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: LD_INT 5
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: PUSH
56729: LD_INT 4
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 1
56739: NEG
56740: PUSH
56741: LD_INT 6
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: LD_INT 6
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: PUSH
56763: LD_INT 5
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56785: LD_ADDR_VAR 0 30
56789: PUSH
56790: LD_INT 2
56792: PUSH
56793: LD_INT 1
56795: NEG
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 3
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 3
56813: PUSH
56814: LD_INT 1
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 3
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 4
56834: PUSH
56835: LD_INT 0
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 4
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 4
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 5
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 5
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 5
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 6
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 6
56906: PUSH
56907: LD_INT 1
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56928: LD_ADDR_VAR 0 31
56932: PUSH
56933: LD_INT 3
56935: PUSH
56936: LD_INT 2
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 3
56945: PUSH
56946: LD_INT 3
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 2
56955: PUSH
56956: LD_INT 3
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 4
56965: PUSH
56966: LD_INT 3
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 4
56975: PUSH
56976: LD_INT 4
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 3
56985: PUSH
56986: LD_INT 4
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 5
56995: PUSH
56996: LD_INT 4
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 5
57005: PUSH
57006: LD_INT 5
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 4
57015: PUSH
57016: LD_INT 5
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 6
57025: PUSH
57026: LD_INT 5
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 6
57035: PUSH
57036: LD_INT 6
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 5
57045: PUSH
57046: LD_INT 6
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57067: LD_ADDR_VAR 0 32
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: LD_INT 3
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: LD_INT 3
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: LD_INT 2
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: LD_INT 4
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: LD_INT 4
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 1
57125: NEG
57126: PUSH
57127: LD_INT 3
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: LD_INT 5
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: LD_INT 5
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: LD_INT 4
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: PUSH
57168: LD_INT 6
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: LD_INT 6
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 1
57187: NEG
57188: PUSH
57189: LD_INT 5
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57210: LD_ADDR_VAR 0 33
57214: PUSH
57215: LD_INT 2
57217: NEG
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 3
57228: NEG
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 3
57239: NEG
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 3
57251: NEG
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 4
57262: NEG
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 4
57273: NEG
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 4
57285: NEG
57286: PUSH
57287: LD_INT 1
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 5
57296: NEG
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 5
57307: NEG
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 5
57319: NEG
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 6
57330: NEG
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 6
57341: NEG
57342: PUSH
57343: LD_INT 1
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57365: LD_ADDR_VAR 0 34
57369: PUSH
57370: LD_INT 2
57372: NEG
57373: PUSH
57374: LD_INT 3
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 3
57384: NEG
57385: PUSH
57386: LD_INT 2
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 3
57396: NEG
57397: PUSH
57398: LD_INT 3
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 3
57408: NEG
57409: PUSH
57410: LD_INT 4
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 4
57420: NEG
57421: PUSH
57422: LD_INT 3
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 4
57432: NEG
57433: PUSH
57434: LD_INT 4
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 4
57444: NEG
57445: PUSH
57446: LD_INT 5
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 5
57456: NEG
57457: PUSH
57458: LD_INT 4
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 5
57468: NEG
57469: PUSH
57470: LD_INT 5
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 5
57480: NEG
57481: PUSH
57482: LD_INT 6
57484: NEG
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 6
57492: NEG
57493: PUSH
57494: LD_INT 5
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 6
57504: NEG
57505: PUSH
57506: LD_INT 6
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57528: LD_ADDR_VAR 0 41
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: LD_INT 2
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: LD_INT 3
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: LD_INT 2
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: LIST
57571: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57572: LD_ADDR_VAR 0 42
57576: PUSH
57577: LD_INT 2
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 2
57589: PUSH
57590: LD_INT 1
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 3
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: LIST
57612: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57613: LD_ADDR_VAR 0 43
57617: PUSH
57618: LD_INT 2
57620: PUSH
57621: LD_INT 2
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 3
57630: PUSH
57631: LD_INT 2
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 2
57640: PUSH
57641: LD_INT 3
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: LIST
57652: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57653: LD_ADDR_VAR 0 44
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: LD_INT 2
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 1
57670: PUSH
57671: LD_INT 3
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: LD_INT 2
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: LIST
57693: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57694: LD_ADDR_VAR 0 45
57698: PUSH
57699: LD_INT 2
57701: NEG
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 2
57712: NEG
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 3
57723: NEG
57724: PUSH
57725: LD_INT 1
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: LIST
57737: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57738: LD_ADDR_VAR 0 46
57742: PUSH
57743: LD_INT 2
57745: NEG
57746: PUSH
57747: LD_INT 2
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 2
57757: NEG
57758: PUSH
57759: LD_INT 3
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 3
57769: NEG
57770: PUSH
57771: LD_INT 2
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: LIST
57783: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57784: LD_ADDR_VAR 0 47
57788: PUSH
57789: LD_INT 2
57791: NEG
57792: PUSH
57793: LD_INT 3
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: NEG
57804: PUSH
57805: LD_INT 3
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57817: LD_ADDR_VAR 0 48
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: LD_INT 2
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 2
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57848: LD_ADDR_VAR 0 49
57852: PUSH
57853: LD_INT 3
57855: PUSH
57856: LD_INT 1
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 3
57865: PUSH
57866: LD_INT 2
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57877: LD_ADDR_VAR 0 50
57881: PUSH
57882: LD_INT 2
57884: PUSH
57885: LD_INT 3
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: LD_INT 3
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57906: LD_ADDR_VAR 0 51
57910: PUSH
57911: LD_INT 1
57913: NEG
57914: PUSH
57915: LD_INT 2
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: LD_INT 1
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57937: LD_ADDR_VAR 0 52
57941: PUSH
57942: LD_INT 3
57944: NEG
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 3
57956: NEG
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57970: LD_ADDR_VAR 0 53
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: LD_INT 3
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: LD_INT 3
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: PUSH
58001: LD_INT 2
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: LIST
58013: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58014: LD_ADDR_VAR 0 54
58018: PUSH
58019: LD_INT 2
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 3
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 3
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: LIST
58054: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58055: LD_ADDR_VAR 0 55
58059: PUSH
58060: LD_INT 3
58062: PUSH
58063: LD_INT 2
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 3
58072: PUSH
58073: LD_INT 3
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 2
58082: PUSH
58083: LD_INT 3
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: LIST
58094: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58095: LD_ADDR_VAR 0 56
58099: PUSH
58100: LD_INT 1
58102: PUSH
58103: LD_INT 3
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: LD_INT 3
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 1
58122: NEG
58123: PUSH
58124: LD_INT 2
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: LIST
58135: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58136: LD_ADDR_VAR 0 57
58140: PUSH
58141: LD_INT 2
58143: NEG
58144: PUSH
58145: LD_INT 1
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 3
58154: NEG
58155: PUSH
58156: LD_INT 0
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 3
58165: NEG
58166: PUSH
58167: LD_INT 1
58169: NEG
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: LIST
58179: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58180: LD_ADDR_VAR 0 58
58184: PUSH
58185: LD_INT 2
58187: NEG
58188: PUSH
58189: LD_INT 3
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 3
58199: NEG
58200: PUSH
58201: LD_INT 2
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 3
58211: NEG
58212: PUSH
58213: LD_INT 3
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: LIST
58225: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58226: LD_ADDR_VAR 0 59
58230: PUSH
58231: LD_INT 1
58233: NEG
58234: PUSH
58235: LD_INT 2
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: LD_INT 2
58248: NEG
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: LIST
58269: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58270: LD_ADDR_VAR 0 60
58274: PUSH
58275: LD_INT 1
58277: PUSH
58278: LD_INT 1
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 2
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 2
58298: PUSH
58299: LD_INT 1
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: LIST
58310: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58311: LD_ADDR_VAR 0 61
58315: PUSH
58316: LD_INT 2
58318: PUSH
58319: LD_INT 1
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 2
58328: PUSH
58329: LD_INT 2
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 1
58338: PUSH
58339: LD_INT 2
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: LIST
58350: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58351: LD_ADDR_VAR 0 62
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: LD_INT 2
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: LD_INT 2
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 1
58378: NEG
58379: PUSH
58380: LD_INT 1
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: LIST
58391: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58392: LD_ADDR_VAR 0 63
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 2
58410: NEG
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 2
58421: NEG
58422: PUSH
58423: LD_INT 1
58425: NEG
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: LIST
58435: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58436: LD_ADDR_VAR 0 64
58440: PUSH
58441: LD_INT 1
58443: NEG
58444: PUSH
58445: LD_INT 2
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 2
58467: NEG
58468: PUSH
58469: LD_INT 2
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: LIST
58481: ST_TO_ADDR
// end ; 2 :
58482: GO 61748
58484: LD_INT 2
58486: DOUBLE
58487: EQUAL
58488: IFTRUE 58492
58490: GO 61747
58492: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58493: LD_ADDR_VAR 0 29
58497: PUSH
58498: LD_INT 4
58500: PUSH
58501: LD_INT 0
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 4
58510: PUSH
58511: LD_INT 1
58513: NEG
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 5
58521: PUSH
58522: LD_INT 0
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 5
58531: PUSH
58532: LD_INT 1
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 4
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 3
58551: PUSH
58552: LD_INT 0
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 3
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 3
58572: PUSH
58573: LD_INT 2
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 5
58583: PUSH
58584: LD_INT 2
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 3
58593: PUSH
58594: LD_INT 3
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 3
58603: PUSH
58604: LD_INT 2
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 4
58613: PUSH
58614: LD_INT 3
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 4
58623: PUSH
58624: LD_INT 4
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 3
58633: PUSH
58634: LD_INT 4
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 2
58643: PUSH
58644: LD_INT 3
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 2
58653: PUSH
58654: LD_INT 2
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 4
58663: PUSH
58664: LD_INT 2
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 2
58673: PUSH
58674: LD_INT 4
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: LD_INT 4
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: LD_INT 3
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: LD_INT 4
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: LD_INT 5
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: LD_INT 5
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 1
58733: NEG
58734: PUSH
58735: LD_INT 4
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 1
58744: NEG
58745: PUSH
58746: LD_INT 3
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 2
58755: PUSH
58756: LD_INT 5
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 2
58765: NEG
58766: PUSH
58767: LD_INT 3
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 3
58776: NEG
58777: PUSH
58778: LD_INT 0
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 3
58787: NEG
58788: PUSH
58789: LD_INT 1
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 2
58799: NEG
58800: PUSH
58801: LD_INT 0
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 2
58810: NEG
58811: PUSH
58812: LD_INT 1
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 3
58821: NEG
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 4
58832: NEG
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 4
58843: NEG
58844: PUSH
58845: LD_INT 1
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 4
58855: NEG
58856: PUSH
58857: LD_INT 2
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 2
58867: NEG
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 4
58878: NEG
58879: PUSH
58880: LD_INT 4
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 4
58890: NEG
58891: PUSH
58892: LD_INT 5
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 3
58902: NEG
58903: PUSH
58904: LD_INT 4
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 3
58914: NEG
58915: PUSH
58916: LD_INT 3
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 4
58926: NEG
58927: PUSH
58928: LD_INT 3
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 5
58938: NEG
58939: PUSH
58940: LD_INT 4
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 5
58950: NEG
58951: PUSH
58952: LD_INT 5
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 3
58962: NEG
58963: PUSH
58964: LD_INT 5
58966: NEG
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 5
58974: NEG
58975: PUSH
58976: LD_INT 3
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59031: LD_ADDR_VAR 0 30
59035: PUSH
59036: LD_INT 4
59038: PUSH
59039: LD_INT 4
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 4
59048: PUSH
59049: LD_INT 3
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 5
59058: PUSH
59059: LD_INT 4
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 5
59068: PUSH
59069: LD_INT 5
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 4
59078: PUSH
59079: LD_INT 5
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 3
59088: PUSH
59089: LD_INT 4
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 3
59098: PUSH
59099: LD_INT 3
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 5
59108: PUSH
59109: LD_INT 3
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 3
59118: PUSH
59119: LD_INT 5
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: LD_INT 3
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 0
59138: PUSH
59139: LD_INT 2
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 1
59148: PUSH
59149: LD_INT 3
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 1
59158: PUSH
59159: LD_INT 4
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 0
59168: PUSH
59169: LD_INT 4
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: LD_INT 3
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 1
59189: NEG
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 2
59200: PUSH
59201: LD_INT 4
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 2
59210: NEG
59211: PUSH
59212: LD_INT 2
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 4
59221: NEG
59222: PUSH
59223: LD_INT 0
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 4
59232: NEG
59233: PUSH
59234: LD_INT 1
59236: NEG
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 3
59244: NEG
59245: PUSH
59246: LD_INT 0
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 3
59255: NEG
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 4
59266: NEG
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 5
59277: NEG
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 5
59288: NEG
59289: PUSH
59290: LD_INT 1
59292: NEG
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 5
59300: NEG
59301: PUSH
59302: LD_INT 2
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 3
59312: NEG
59313: PUSH
59314: LD_INT 2
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 3
59323: NEG
59324: PUSH
59325: LD_INT 3
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 3
59335: NEG
59336: PUSH
59337: LD_INT 4
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 2
59347: NEG
59348: PUSH
59349: LD_INT 3
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 2
59359: NEG
59360: PUSH
59361: LD_INT 2
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 3
59371: NEG
59372: PUSH
59373: LD_INT 2
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 4
59383: NEG
59384: PUSH
59385: LD_INT 3
59387: NEG
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 4
59395: NEG
59396: PUSH
59397: LD_INT 4
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 2
59407: NEG
59408: PUSH
59409: LD_INT 4
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 4
59419: NEG
59420: PUSH
59421: LD_INT 2
59423: NEG
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: LD_INT 4
59434: NEG
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: LD_INT 5
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: LD_INT 4
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 1
59464: PUSH
59465: LD_INT 3
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: LD_INT 3
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 1
59486: NEG
59487: PUSH
59488: LD_INT 4
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: LD_INT 5
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 2
59510: PUSH
59511: LD_INT 3
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 2
59521: NEG
59522: PUSH
59523: LD_INT 5
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59578: LD_ADDR_VAR 0 31
59582: PUSH
59583: LD_INT 0
59585: PUSH
59586: LD_INT 4
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: LD_INT 3
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 1
59605: PUSH
59606: LD_INT 4
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: PUSH
59616: LD_INT 5
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: LD_INT 5
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: LD_INT 4
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: LD_INT 3
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 2
59657: PUSH
59658: LD_INT 5
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 2
59667: NEG
59668: PUSH
59669: LD_INT 3
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 3
59678: NEG
59679: PUSH
59680: LD_INT 0
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 3
59689: NEG
59690: PUSH
59691: LD_INT 1
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 2
59701: NEG
59702: PUSH
59703: LD_INT 0
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 2
59712: NEG
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 3
59723: NEG
59724: PUSH
59725: LD_INT 1
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 4
59734: NEG
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 4
59745: NEG
59746: PUSH
59747: LD_INT 1
59749: NEG
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 4
59757: NEG
59758: PUSH
59759: LD_INT 2
59761: NEG
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 2
59769: NEG
59770: PUSH
59771: LD_INT 2
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 4
59780: NEG
59781: PUSH
59782: LD_INT 4
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 4
59792: NEG
59793: PUSH
59794: LD_INT 5
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 3
59804: NEG
59805: PUSH
59806: LD_INT 4
59808: NEG
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 3
59816: NEG
59817: PUSH
59818: LD_INT 3
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 4
59828: NEG
59829: PUSH
59830: LD_INT 3
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 5
59840: NEG
59841: PUSH
59842: LD_INT 4
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 5
59852: NEG
59853: PUSH
59854: LD_INT 5
59856: NEG
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 3
59864: NEG
59865: PUSH
59866: LD_INT 5
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 5
59876: NEG
59877: PUSH
59878: LD_INT 3
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 0
59888: PUSH
59889: LD_INT 3
59891: NEG
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: LD_INT 4
59902: NEG
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: LD_INT 3
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: LD_INT 2
59924: NEG
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 0
59932: PUSH
59933: LD_INT 2
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: LD_INT 3
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 1
59955: NEG
59956: PUSH
59957: LD_INT 4
59959: NEG
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: LD_INT 2
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 2
59978: NEG
59979: PUSH
59980: LD_INT 4
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 4
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 4
60000: PUSH
60001: LD_INT 1
60003: NEG
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 5
60011: PUSH
60012: LD_INT 0
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 5
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 4
60031: PUSH
60032: LD_INT 1
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 3
60041: PUSH
60042: LD_INT 0
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 3
60051: PUSH
60052: LD_INT 1
60054: NEG
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 3
60062: PUSH
60063: LD_INT 2
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 5
60073: PUSH
60074: LD_INT 2
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60128: LD_ADDR_VAR 0 32
60132: PUSH
60133: LD_INT 4
60135: NEG
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 4
60146: NEG
60147: PUSH
60148: LD_INT 1
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 3
60158: NEG
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 3
60169: NEG
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 4
60180: NEG
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 5
60191: NEG
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 5
60202: NEG
60203: PUSH
60204: LD_INT 1
60206: NEG
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 5
60214: NEG
60215: PUSH
60216: LD_INT 2
60218: NEG
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 3
60226: NEG
60227: PUSH
60228: LD_INT 2
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 3
60237: NEG
60238: PUSH
60239: LD_INT 3
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 3
60249: NEG
60250: PUSH
60251: LD_INT 4
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 2
60261: NEG
60262: PUSH
60263: LD_INT 3
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 2
60273: NEG
60274: PUSH
60275: LD_INT 2
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 3
60285: NEG
60286: PUSH
60287: LD_INT 2
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 4
60297: NEG
60298: PUSH
60299: LD_INT 3
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 4
60309: NEG
60310: PUSH
60311: LD_INT 4
60313: NEG
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 2
60321: NEG
60322: PUSH
60323: LD_INT 4
60325: NEG
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 4
60333: NEG
60334: PUSH
60335: LD_INT 2
60337: NEG
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: LD_INT 4
60348: NEG
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: LD_INT 5
60359: NEG
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: PUSH
60368: LD_INT 4
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: LD_INT 3
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 0
60389: PUSH
60390: LD_INT 3
60392: NEG
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: LD_INT 4
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: LD_INT 5
60416: NEG
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 2
60424: PUSH
60425: LD_INT 3
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 2
60435: NEG
60436: PUSH
60437: LD_INT 5
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 3
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 3
60457: PUSH
60458: LD_INT 1
60460: NEG
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 4
60468: PUSH
60469: LD_INT 0
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 4
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 3
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 2
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 2
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 2
60519: PUSH
60520: LD_INT 2
60522: NEG
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 4
60530: PUSH
60531: LD_INT 2
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 4
60540: PUSH
60541: LD_INT 4
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 4
60550: PUSH
60551: LD_INT 3
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 5
60560: PUSH
60561: LD_INT 4
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 5
60570: PUSH
60571: LD_INT 5
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 4
60580: PUSH
60581: LD_INT 5
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 3
60590: PUSH
60591: LD_INT 4
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 3
60600: PUSH
60601: LD_INT 3
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 5
60610: PUSH
60611: LD_INT 3
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 3
60620: PUSH
60621: LD_INT 5
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60675: LD_ADDR_VAR 0 33
60679: PUSH
60680: LD_INT 4
60682: NEG
60683: PUSH
60684: LD_INT 4
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 4
60694: NEG
60695: PUSH
60696: LD_INT 5
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 3
60706: NEG
60707: PUSH
60708: LD_INT 4
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 3
60718: NEG
60719: PUSH
60720: LD_INT 3
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 4
60730: NEG
60731: PUSH
60732: LD_INT 3
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 5
60742: NEG
60743: PUSH
60744: LD_INT 4
60746: NEG
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 5
60754: NEG
60755: PUSH
60756: LD_INT 5
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 3
60766: NEG
60767: PUSH
60768: LD_INT 5
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 5
60778: NEG
60779: PUSH
60780: LD_INT 3
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: LD_INT 3
60793: NEG
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 0
60801: PUSH
60802: LD_INT 4
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 1
60812: PUSH
60813: LD_INT 3
60815: NEG
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 1
60823: PUSH
60824: LD_INT 2
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 0
60834: PUSH
60835: LD_INT 2
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 1
60845: NEG
60846: PUSH
60847: LD_INT 3
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 1
60857: NEG
60858: PUSH
60859: LD_INT 4
60861: NEG
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 2
60869: PUSH
60870: LD_INT 2
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 2
60880: NEG
60881: PUSH
60882: LD_INT 4
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 4
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 4
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 5
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 5
60923: PUSH
60924: LD_INT 1
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 4
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 3
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 3
60953: PUSH
60954: LD_INT 1
60956: NEG
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 3
60964: PUSH
60965: LD_INT 2
60967: NEG
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 5
60975: PUSH
60976: LD_INT 2
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 3
60985: PUSH
60986: LD_INT 3
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 3
60995: PUSH
60996: LD_INT 2
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 4
61005: PUSH
61006: LD_INT 3
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 4
61015: PUSH
61016: LD_INT 4
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 3
61025: PUSH
61026: LD_INT 4
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 2
61035: PUSH
61036: LD_INT 3
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 2
61045: PUSH
61046: LD_INT 2
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 4
61055: PUSH
61056: LD_INT 2
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 2
61065: PUSH
61066: LD_INT 4
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: LD_INT 4
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: LD_INT 3
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 1
61095: PUSH
61096: LD_INT 4
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: LD_INT 5
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 0
61115: PUSH
61116: LD_INT 5
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 1
61125: NEG
61126: PUSH
61127: LD_INT 4
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 1
61136: NEG
61137: PUSH
61138: LD_INT 3
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 2
61147: PUSH
61148: LD_INT 5
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 2
61157: NEG
61158: PUSH
61159: LD_INT 3
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61213: LD_ADDR_VAR 0 34
61217: PUSH
61218: LD_INT 0
61220: PUSH
61221: LD_INT 4
61223: NEG
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: LD_INT 5
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 1
61242: PUSH
61243: LD_INT 4
61245: NEG
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 1
61253: PUSH
61254: LD_INT 3
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 0
61264: PUSH
61265: LD_INT 3
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 1
61275: NEG
61276: PUSH
61277: LD_INT 4
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 1
61287: NEG
61288: PUSH
61289: LD_INT 5
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 2
61299: PUSH
61300: LD_INT 3
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 2
61310: NEG
61311: PUSH
61312: LD_INT 5
61314: NEG
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 3
61322: PUSH
61323: LD_INT 0
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 3
61332: PUSH
61333: LD_INT 1
61335: NEG
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 4
61343: PUSH
61344: LD_INT 0
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 4
61353: PUSH
61354: LD_INT 1
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 3
61363: PUSH
61364: LD_INT 1
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 2
61373: PUSH
61374: LD_INT 0
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 2
61383: PUSH
61384: LD_INT 1
61386: NEG
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 2
61394: PUSH
61395: LD_INT 2
61397: NEG
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 4
61405: PUSH
61406: LD_INT 2
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 4
61415: PUSH
61416: LD_INT 4
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 4
61425: PUSH
61426: LD_INT 3
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 5
61435: PUSH
61436: LD_INT 4
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 5
61445: PUSH
61446: LD_INT 5
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 4
61455: PUSH
61456: LD_INT 5
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 3
61465: PUSH
61466: LD_INT 4
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 3
61475: PUSH
61476: LD_INT 3
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 5
61485: PUSH
61486: LD_INT 3
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 3
61495: PUSH
61496: LD_INT 5
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: LD_INT 3
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 0
61515: PUSH
61516: LD_INT 2
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: LD_INT 3
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 1
61535: PUSH
61536: LD_INT 4
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: LD_INT 4
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 1
61555: NEG
61556: PUSH
61557: LD_INT 3
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: NEG
61567: PUSH
61568: LD_INT 2
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 2
61577: PUSH
61578: LD_INT 4
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 2
61587: NEG
61588: PUSH
61589: LD_INT 2
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 4
61598: NEG
61599: PUSH
61600: LD_INT 0
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 4
61609: NEG
61610: PUSH
61611: LD_INT 1
61613: NEG
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 3
61621: NEG
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 3
61632: NEG
61633: PUSH
61634: LD_INT 1
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 4
61643: NEG
61644: PUSH
61645: LD_INT 1
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 5
61654: NEG
61655: PUSH
61656: LD_INT 0
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 5
61665: NEG
61666: PUSH
61667: LD_INT 1
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 5
61677: NEG
61678: PUSH
61679: LD_INT 2
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 3
61689: NEG
61690: PUSH
61691: LD_INT 2
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: ST_TO_ADDR
// end ; end ;
61745: GO 61748
61747: POP
// case btype of b_depot , b_warehouse :
61748: LD_VAR 0 1
61752: PUSH
61753: LD_INT 0
61755: DOUBLE
61756: EQUAL
61757: IFTRUE 61767
61759: LD_INT 1
61761: DOUBLE
61762: EQUAL
61763: IFTRUE 61767
61765: GO 61968
61767: POP
// case nation of nation_american :
61768: LD_VAR 0 5
61772: PUSH
61773: LD_INT 1
61775: DOUBLE
61776: EQUAL
61777: IFTRUE 61781
61779: GO 61837
61781: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61782: LD_ADDR_VAR 0 9
61786: PUSH
61787: LD_VAR 0 11
61791: PUSH
61792: LD_VAR 0 12
61796: PUSH
61797: LD_VAR 0 13
61801: PUSH
61802: LD_VAR 0 14
61806: PUSH
61807: LD_VAR 0 15
61811: PUSH
61812: LD_VAR 0 16
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: PUSH
61825: LD_VAR 0 4
61829: PUSH
61830: LD_INT 1
61832: PLUS
61833: ARRAY
61834: ST_TO_ADDR
61835: GO 61966
61837: LD_INT 2
61839: DOUBLE
61840: EQUAL
61841: IFTRUE 61845
61843: GO 61901
61845: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61846: LD_ADDR_VAR 0 9
61850: PUSH
61851: LD_VAR 0 17
61855: PUSH
61856: LD_VAR 0 18
61860: PUSH
61861: LD_VAR 0 19
61865: PUSH
61866: LD_VAR 0 20
61870: PUSH
61871: LD_VAR 0 21
61875: PUSH
61876: LD_VAR 0 22
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: PUSH
61889: LD_VAR 0 4
61893: PUSH
61894: LD_INT 1
61896: PLUS
61897: ARRAY
61898: ST_TO_ADDR
61899: GO 61966
61901: LD_INT 3
61903: DOUBLE
61904: EQUAL
61905: IFTRUE 61909
61907: GO 61965
61909: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61910: LD_ADDR_VAR 0 9
61914: PUSH
61915: LD_VAR 0 23
61919: PUSH
61920: LD_VAR 0 24
61924: PUSH
61925: LD_VAR 0 25
61929: PUSH
61930: LD_VAR 0 26
61934: PUSH
61935: LD_VAR 0 27
61939: PUSH
61940: LD_VAR 0 28
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: PUSH
61953: LD_VAR 0 4
61957: PUSH
61958: LD_INT 1
61960: PLUS
61961: ARRAY
61962: ST_TO_ADDR
61963: GO 61966
61965: POP
61966: GO 62521
61968: LD_INT 2
61970: DOUBLE
61971: EQUAL
61972: IFTRUE 61982
61974: LD_INT 3
61976: DOUBLE
61977: EQUAL
61978: IFTRUE 61982
61980: GO 62038
61982: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61983: LD_ADDR_VAR 0 9
61987: PUSH
61988: LD_VAR 0 29
61992: PUSH
61993: LD_VAR 0 30
61997: PUSH
61998: LD_VAR 0 31
62002: PUSH
62003: LD_VAR 0 32
62007: PUSH
62008: LD_VAR 0 33
62012: PUSH
62013: LD_VAR 0 34
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: PUSH
62026: LD_VAR 0 4
62030: PUSH
62031: LD_INT 1
62033: PLUS
62034: ARRAY
62035: ST_TO_ADDR
62036: GO 62521
62038: LD_INT 16
62040: DOUBLE
62041: EQUAL
62042: IFTRUE 62100
62044: LD_INT 17
62046: DOUBLE
62047: EQUAL
62048: IFTRUE 62100
62050: LD_INT 18
62052: DOUBLE
62053: EQUAL
62054: IFTRUE 62100
62056: LD_INT 19
62058: DOUBLE
62059: EQUAL
62060: IFTRUE 62100
62062: LD_INT 22
62064: DOUBLE
62065: EQUAL
62066: IFTRUE 62100
62068: LD_INT 20
62070: DOUBLE
62071: EQUAL
62072: IFTRUE 62100
62074: LD_INT 21
62076: DOUBLE
62077: EQUAL
62078: IFTRUE 62100
62080: LD_INT 23
62082: DOUBLE
62083: EQUAL
62084: IFTRUE 62100
62086: LD_INT 24
62088: DOUBLE
62089: EQUAL
62090: IFTRUE 62100
62092: LD_INT 25
62094: DOUBLE
62095: EQUAL
62096: IFTRUE 62100
62098: GO 62156
62100: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62101: LD_ADDR_VAR 0 9
62105: PUSH
62106: LD_VAR 0 35
62110: PUSH
62111: LD_VAR 0 36
62115: PUSH
62116: LD_VAR 0 37
62120: PUSH
62121: LD_VAR 0 38
62125: PUSH
62126: LD_VAR 0 39
62130: PUSH
62131: LD_VAR 0 40
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: PUSH
62144: LD_VAR 0 4
62148: PUSH
62149: LD_INT 1
62151: PLUS
62152: ARRAY
62153: ST_TO_ADDR
62154: GO 62521
62156: LD_INT 6
62158: DOUBLE
62159: EQUAL
62160: IFTRUE 62212
62162: LD_INT 7
62164: DOUBLE
62165: EQUAL
62166: IFTRUE 62212
62168: LD_INT 8
62170: DOUBLE
62171: EQUAL
62172: IFTRUE 62212
62174: LD_INT 13
62176: DOUBLE
62177: EQUAL
62178: IFTRUE 62212
62180: LD_INT 12
62182: DOUBLE
62183: EQUAL
62184: IFTRUE 62212
62186: LD_INT 15
62188: DOUBLE
62189: EQUAL
62190: IFTRUE 62212
62192: LD_INT 11
62194: DOUBLE
62195: EQUAL
62196: IFTRUE 62212
62198: LD_INT 14
62200: DOUBLE
62201: EQUAL
62202: IFTRUE 62212
62204: LD_INT 10
62206: DOUBLE
62207: EQUAL
62208: IFTRUE 62212
62210: GO 62268
62212: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62213: LD_ADDR_VAR 0 9
62217: PUSH
62218: LD_VAR 0 41
62222: PUSH
62223: LD_VAR 0 42
62227: PUSH
62228: LD_VAR 0 43
62232: PUSH
62233: LD_VAR 0 44
62237: PUSH
62238: LD_VAR 0 45
62242: PUSH
62243: LD_VAR 0 46
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: PUSH
62256: LD_VAR 0 4
62260: PUSH
62261: LD_INT 1
62263: PLUS
62264: ARRAY
62265: ST_TO_ADDR
62266: GO 62521
62268: LD_INT 36
62270: DOUBLE
62271: EQUAL
62272: IFTRUE 62276
62274: GO 62332
62276: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62277: LD_ADDR_VAR 0 9
62281: PUSH
62282: LD_VAR 0 47
62286: PUSH
62287: LD_VAR 0 48
62291: PUSH
62292: LD_VAR 0 49
62296: PUSH
62297: LD_VAR 0 50
62301: PUSH
62302: LD_VAR 0 51
62306: PUSH
62307: LD_VAR 0 52
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: PUSH
62320: LD_VAR 0 4
62324: PUSH
62325: LD_INT 1
62327: PLUS
62328: ARRAY
62329: ST_TO_ADDR
62330: GO 62521
62332: LD_INT 4
62334: DOUBLE
62335: EQUAL
62336: IFTRUE 62358
62338: LD_INT 5
62340: DOUBLE
62341: EQUAL
62342: IFTRUE 62358
62344: LD_INT 34
62346: DOUBLE
62347: EQUAL
62348: IFTRUE 62358
62350: LD_INT 37
62352: DOUBLE
62353: EQUAL
62354: IFTRUE 62358
62356: GO 62414
62358: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62359: LD_ADDR_VAR 0 9
62363: PUSH
62364: LD_VAR 0 53
62368: PUSH
62369: LD_VAR 0 54
62373: PUSH
62374: LD_VAR 0 55
62378: PUSH
62379: LD_VAR 0 56
62383: PUSH
62384: LD_VAR 0 57
62388: PUSH
62389: LD_VAR 0 58
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: PUSH
62402: LD_VAR 0 4
62406: PUSH
62407: LD_INT 1
62409: PLUS
62410: ARRAY
62411: ST_TO_ADDR
62412: GO 62521
62414: LD_INT 31
62416: DOUBLE
62417: EQUAL
62418: IFTRUE 62464
62420: LD_INT 32
62422: DOUBLE
62423: EQUAL
62424: IFTRUE 62464
62426: LD_INT 33
62428: DOUBLE
62429: EQUAL
62430: IFTRUE 62464
62432: LD_INT 27
62434: DOUBLE
62435: EQUAL
62436: IFTRUE 62464
62438: LD_INT 26
62440: DOUBLE
62441: EQUAL
62442: IFTRUE 62464
62444: LD_INT 28
62446: DOUBLE
62447: EQUAL
62448: IFTRUE 62464
62450: LD_INT 29
62452: DOUBLE
62453: EQUAL
62454: IFTRUE 62464
62456: LD_INT 30
62458: DOUBLE
62459: EQUAL
62460: IFTRUE 62464
62462: GO 62520
62464: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62465: LD_ADDR_VAR 0 9
62469: PUSH
62470: LD_VAR 0 59
62474: PUSH
62475: LD_VAR 0 60
62479: PUSH
62480: LD_VAR 0 61
62484: PUSH
62485: LD_VAR 0 62
62489: PUSH
62490: LD_VAR 0 63
62494: PUSH
62495: LD_VAR 0 64
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: PUSH
62508: LD_VAR 0 4
62512: PUSH
62513: LD_INT 1
62515: PLUS
62516: ARRAY
62517: ST_TO_ADDR
62518: GO 62521
62520: POP
// temp_list2 = [ ] ;
62521: LD_ADDR_VAR 0 10
62525: PUSH
62526: EMPTY
62527: ST_TO_ADDR
// for i in temp_list do
62528: LD_ADDR_VAR 0 8
62532: PUSH
62533: LD_VAR 0 9
62537: PUSH
62538: FOR_IN
62539: IFFALSE 62591
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62541: LD_ADDR_VAR 0 10
62545: PUSH
62546: LD_VAR 0 10
62550: PUSH
62551: LD_VAR 0 8
62555: PUSH
62556: LD_INT 1
62558: ARRAY
62559: PUSH
62560: LD_VAR 0 2
62564: PLUS
62565: PUSH
62566: LD_VAR 0 8
62570: PUSH
62571: LD_INT 2
62573: ARRAY
62574: PUSH
62575: LD_VAR 0 3
62579: PLUS
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: EMPTY
62586: LIST
62587: ADD
62588: ST_TO_ADDR
62589: GO 62538
62591: POP
62592: POP
// result = temp_list2 ;
62593: LD_ADDR_VAR 0 7
62597: PUSH
62598: LD_VAR 0 10
62602: ST_TO_ADDR
// end ;
62603: LD_VAR 0 7
62607: RET
// export function EnemyInRange ( unit , dist ) ; begin
62608: LD_INT 0
62610: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62611: LD_ADDR_VAR 0 3
62615: PUSH
62616: LD_VAR 0 1
62620: PPUSH
62621: CALL_OW 255
62625: PPUSH
62626: LD_VAR 0 1
62630: PPUSH
62631: CALL_OW 250
62635: PPUSH
62636: LD_VAR 0 1
62640: PPUSH
62641: CALL_OW 251
62645: PPUSH
62646: LD_VAR 0 2
62650: PPUSH
62651: CALL 36004 0 4
62655: PUSH
62656: LD_INT 4
62658: ARRAY
62659: ST_TO_ADDR
// end ;
62660: LD_VAR 0 3
62664: RET
// export function PlayerSeeMe ( unit ) ; begin
62665: LD_INT 0
62667: PPUSH
// result := See ( your_side , unit ) ;
62668: LD_ADDR_VAR 0 2
62672: PUSH
62673: LD_OWVAR 2
62677: PPUSH
62678: LD_VAR 0 1
62682: PPUSH
62683: CALL_OW 292
62687: ST_TO_ADDR
// end ;
62688: LD_VAR 0 2
62692: RET
// export function ReverseDir ( unit ) ; begin
62693: LD_INT 0
62695: PPUSH
// if not unit then
62696: LD_VAR 0 1
62700: NOT
62701: IFFALSE 62705
// exit ;
62703: GO 62728
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62705: LD_ADDR_VAR 0 2
62709: PUSH
62710: LD_VAR 0 1
62714: PPUSH
62715: CALL_OW 254
62719: PUSH
62720: LD_INT 3
62722: PLUS
62723: PUSH
62724: LD_INT 6
62726: MOD
62727: ST_TO_ADDR
// end ;
62728: LD_VAR 0 2
62732: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62733: LD_INT 0
62735: PPUSH
62736: PPUSH
62737: PPUSH
62738: PPUSH
62739: PPUSH
// if not hexes then
62740: LD_VAR 0 2
62744: NOT
62745: IFFALSE 62749
// exit ;
62747: GO 62897
// dist := 9999 ;
62749: LD_ADDR_VAR 0 5
62753: PUSH
62754: LD_INT 9999
62756: ST_TO_ADDR
// for i = 1 to hexes do
62757: LD_ADDR_VAR 0 4
62761: PUSH
62762: DOUBLE
62763: LD_INT 1
62765: DEC
62766: ST_TO_ADDR
62767: LD_VAR 0 2
62771: PUSH
62772: FOR_TO
62773: IFFALSE 62885
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62775: LD_VAR 0 1
62779: PPUSH
62780: LD_VAR 0 2
62784: PUSH
62785: LD_VAR 0 4
62789: ARRAY
62790: PUSH
62791: LD_INT 1
62793: ARRAY
62794: PPUSH
62795: LD_VAR 0 2
62799: PUSH
62800: LD_VAR 0 4
62804: ARRAY
62805: PUSH
62806: LD_INT 2
62808: ARRAY
62809: PPUSH
62810: CALL_OW 297
62814: PUSH
62815: LD_VAR 0 5
62819: LESS
62820: IFFALSE 62883
// begin hex := hexes [ i ] ;
62822: LD_ADDR_VAR 0 7
62826: PUSH
62827: LD_VAR 0 2
62831: PUSH
62832: LD_VAR 0 4
62836: ARRAY
62837: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62838: LD_ADDR_VAR 0 5
62842: PUSH
62843: LD_VAR 0 1
62847: PPUSH
62848: LD_VAR 0 2
62852: PUSH
62853: LD_VAR 0 4
62857: ARRAY
62858: PUSH
62859: LD_INT 1
62861: ARRAY
62862: PPUSH
62863: LD_VAR 0 2
62867: PUSH
62868: LD_VAR 0 4
62872: ARRAY
62873: PUSH
62874: LD_INT 2
62876: ARRAY
62877: PPUSH
62878: CALL_OW 297
62882: ST_TO_ADDR
// end ; end ;
62883: GO 62772
62885: POP
62886: POP
// result := hex ;
62887: LD_ADDR_VAR 0 3
62891: PUSH
62892: LD_VAR 0 7
62896: ST_TO_ADDR
// end ;
62897: LD_VAR 0 3
62901: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62902: LD_INT 0
62904: PPUSH
62905: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62906: LD_VAR 0 1
62910: NOT
62911: PUSH
62912: LD_VAR 0 1
62916: PUSH
62917: LD_INT 21
62919: PUSH
62920: LD_INT 2
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 23
62929: PUSH
62930: LD_INT 2
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PPUSH
62941: CALL_OW 69
62945: IN
62946: NOT
62947: OR
62948: IFFALSE 62952
// exit ;
62950: GO 62999
// for i = 1 to 3 do
62952: LD_ADDR_VAR 0 3
62956: PUSH
62957: DOUBLE
62958: LD_INT 1
62960: DEC
62961: ST_TO_ADDR
62962: LD_INT 3
62964: PUSH
62965: FOR_TO
62966: IFFALSE 62997
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62968: LD_VAR 0 1
62972: PPUSH
62973: CALL_OW 250
62977: PPUSH
62978: LD_VAR 0 1
62982: PPUSH
62983: CALL_OW 251
62987: PPUSH
62988: LD_INT 1
62990: PPUSH
62991: CALL_OW 453
62995: GO 62965
62997: POP
62998: POP
// end ;
62999: LD_VAR 0 2
63003: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63004: LD_INT 0
63006: PPUSH
63007: PPUSH
63008: PPUSH
63009: PPUSH
63010: PPUSH
63011: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63012: LD_VAR 0 1
63016: NOT
63017: PUSH
63018: LD_VAR 0 2
63022: NOT
63023: OR
63024: PUSH
63025: LD_VAR 0 1
63029: PPUSH
63030: CALL_OW 314
63034: OR
63035: IFFALSE 63039
// exit ;
63037: GO 63480
// x := GetX ( enemy_unit ) ;
63039: LD_ADDR_VAR 0 7
63043: PUSH
63044: LD_VAR 0 2
63048: PPUSH
63049: CALL_OW 250
63053: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63054: LD_ADDR_VAR 0 8
63058: PUSH
63059: LD_VAR 0 2
63063: PPUSH
63064: CALL_OW 251
63068: ST_TO_ADDR
// if not x or not y then
63069: LD_VAR 0 7
63073: NOT
63074: PUSH
63075: LD_VAR 0 8
63079: NOT
63080: OR
63081: IFFALSE 63085
// exit ;
63083: GO 63480
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63085: LD_ADDR_VAR 0 6
63089: PUSH
63090: LD_VAR 0 7
63094: PPUSH
63095: LD_INT 0
63097: PPUSH
63098: LD_INT 4
63100: PPUSH
63101: CALL_OW 272
63105: PUSH
63106: LD_VAR 0 8
63110: PPUSH
63111: LD_INT 0
63113: PPUSH
63114: LD_INT 4
63116: PPUSH
63117: CALL_OW 273
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_VAR 0 7
63130: PPUSH
63131: LD_INT 1
63133: PPUSH
63134: LD_INT 4
63136: PPUSH
63137: CALL_OW 272
63141: PUSH
63142: LD_VAR 0 8
63146: PPUSH
63147: LD_INT 1
63149: PPUSH
63150: LD_INT 4
63152: PPUSH
63153: CALL_OW 273
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_VAR 0 7
63166: PPUSH
63167: LD_INT 2
63169: PPUSH
63170: LD_INT 4
63172: PPUSH
63173: CALL_OW 272
63177: PUSH
63178: LD_VAR 0 8
63182: PPUSH
63183: LD_INT 2
63185: PPUSH
63186: LD_INT 4
63188: PPUSH
63189: CALL_OW 273
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_VAR 0 7
63202: PPUSH
63203: LD_INT 3
63205: PPUSH
63206: LD_INT 4
63208: PPUSH
63209: CALL_OW 272
63213: PUSH
63214: LD_VAR 0 8
63218: PPUSH
63219: LD_INT 3
63221: PPUSH
63222: LD_INT 4
63224: PPUSH
63225: CALL_OW 273
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_VAR 0 7
63238: PPUSH
63239: LD_INT 4
63241: PPUSH
63242: LD_INT 4
63244: PPUSH
63245: CALL_OW 272
63249: PUSH
63250: LD_VAR 0 8
63254: PPUSH
63255: LD_INT 4
63257: PPUSH
63258: LD_INT 4
63260: PPUSH
63261: CALL_OW 273
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_VAR 0 7
63274: PPUSH
63275: LD_INT 5
63277: PPUSH
63278: LD_INT 4
63280: PPUSH
63281: CALL_OW 272
63285: PUSH
63286: LD_VAR 0 8
63290: PPUSH
63291: LD_INT 5
63293: PPUSH
63294: LD_INT 4
63296: PPUSH
63297: CALL_OW 273
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: ST_TO_ADDR
// for i = tmp downto 1 do
63314: LD_ADDR_VAR 0 4
63318: PUSH
63319: DOUBLE
63320: LD_VAR 0 6
63324: INC
63325: ST_TO_ADDR
63326: LD_INT 1
63328: PUSH
63329: FOR_DOWNTO
63330: IFFALSE 63431
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63332: LD_VAR 0 6
63336: PUSH
63337: LD_VAR 0 4
63341: ARRAY
63342: PUSH
63343: LD_INT 1
63345: ARRAY
63346: PPUSH
63347: LD_VAR 0 6
63351: PUSH
63352: LD_VAR 0 4
63356: ARRAY
63357: PUSH
63358: LD_INT 2
63360: ARRAY
63361: PPUSH
63362: CALL_OW 488
63366: NOT
63367: PUSH
63368: LD_VAR 0 6
63372: PUSH
63373: LD_VAR 0 4
63377: ARRAY
63378: PUSH
63379: LD_INT 1
63381: ARRAY
63382: PPUSH
63383: LD_VAR 0 6
63387: PUSH
63388: LD_VAR 0 4
63392: ARRAY
63393: PUSH
63394: LD_INT 2
63396: ARRAY
63397: PPUSH
63398: CALL_OW 428
63402: PUSH
63403: LD_INT 0
63405: NONEQUAL
63406: OR
63407: IFFALSE 63429
// tmp := Delete ( tmp , i ) ;
63409: LD_ADDR_VAR 0 6
63413: PUSH
63414: LD_VAR 0 6
63418: PPUSH
63419: LD_VAR 0 4
63423: PPUSH
63424: CALL_OW 3
63428: ST_TO_ADDR
63429: GO 63329
63431: POP
63432: POP
// j := GetClosestHex ( unit , tmp ) ;
63433: LD_ADDR_VAR 0 5
63437: PUSH
63438: LD_VAR 0 1
63442: PPUSH
63443: LD_VAR 0 6
63447: PPUSH
63448: CALL 62733 0 2
63452: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63453: LD_VAR 0 1
63457: PPUSH
63458: LD_VAR 0 5
63462: PUSH
63463: LD_INT 1
63465: ARRAY
63466: PPUSH
63467: LD_VAR 0 5
63471: PUSH
63472: LD_INT 2
63474: ARRAY
63475: PPUSH
63476: CALL_OW 111
// end ;
63480: LD_VAR 0 3
63484: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63485: LD_INT 0
63487: PPUSH
63488: PPUSH
63489: PPUSH
// uc_side = 0 ;
63490: LD_ADDR_OWVAR 20
63494: PUSH
63495: LD_INT 0
63497: ST_TO_ADDR
// uc_nation = 0 ;
63498: LD_ADDR_OWVAR 21
63502: PUSH
63503: LD_INT 0
63505: ST_TO_ADDR
// InitHc_All ( ) ;
63506: CALL_OW 584
// InitVc ;
63510: CALL_OW 20
// if mastodonts then
63514: LD_VAR 0 6
63518: IFFALSE 63585
// for i = 1 to mastodonts do
63520: LD_ADDR_VAR 0 11
63524: PUSH
63525: DOUBLE
63526: LD_INT 1
63528: DEC
63529: ST_TO_ADDR
63530: LD_VAR 0 6
63534: PUSH
63535: FOR_TO
63536: IFFALSE 63583
// begin vc_chassis := 31 ;
63538: LD_ADDR_OWVAR 37
63542: PUSH
63543: LD_INT 31
63545: ST_TO_ADDR
// vc_control := control_rider ;
63546: LD_ADDR_OWVAR 38
63550: PUSH
63551: LD_INT 4
63553: ST_TO_ADDR
// animal := CreateVehicle ;
63554: LD_ADDR_VAR 0 12
63558: PUSH
63559: CALL_OW 45
63563: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63564: LD_VAR 0 12
63568: PPUSH
63569: LD_VAR 0 8
63573: PPUSH
63574: LD_INT 0
63576: PPUSH
63577: CALL 65720 0 3
// end ;
63581: GO 63535
63583: POP
63584: POP
// if horses then
63585: LD_VAR 0 5
63589: IFFALSE 63656
// for i = 1 to horses do
63591: LD_ADDR_VAR 0 11
63595: PUSH
63596: DOUBLE
63597: LD_INT 1
63599: DEC
63600: ST_TO_ADDR
63601: LD_VAR 0 5
63605: PUSH
63606: FOR_TO
63607: IFFALSE 63654
// begin hc_class := 21 ;
63609: LD_ADDR_OWVAR 28
63613: PUSH
63614: LD_INT 21
63616: ST_TO_ADDR
// hc_gallery :=  ;
63617: LD_ADDR_OWVAR 33
63621: PUSH
63622: LD_STRING 
63624: ST_TO_ADDR
// animal := CreateHuman ;
63625: LD_ADDR_VAR 0 12
63629: PUSH
63630: CALL_OW 44
63634: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63635: LD_VAR 0 12
63639: PPUSH
63640: LD_VAR 0 8
63644: PPUSH
63645: LD_INT 0
63647: PPUSH
63648: CALL 65720 0 3
// end ;
63652: GO 63606
63654: POP
63655: POP
// if birds then
63656: LD_VAR 0 1
63660: IFFALSE 63727
// for i = 1 to birds do
63662: LD_ADDR_VAR 0 11
63666: PUSH
63667: DOUBLE
63668: LD_INT 1
63670: DEC
63671: ST_TO_ADDR
63672: LD_VAR 0 1
63676: PUSH
63677: FOR_TO
63678: IFFALSE 63725
// begin hc_class = 18 ;
63680: LD_ADDR_OWVAR 28
63684: PUSH
63685: LD_INT 18
63687: ST_TO_ADDR
// hc_gallery =  ;
63688: LD_ADDR_OWVAR 33
63692: PUSH
63693: LD_STRING 
63695: ST_TO_ADDR
// animal := CreateHuman ;
63696: LD_ADDR_VAR 0 12
63700: PUSH
63701: CALL_OW 44
63705: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63706: LD_VAR 0 12
63710: PPUSH
63711: LD_VAR 0 8
63715: PPUSH
63716: LD_INT 0
63718: PPUSH
63719: CALL 65720 0 3
// end ;
63723: GO 63677
63725: POP
63726: POP
// if tigers then
63727: LD_VAR 0 2
63731: IFFALSE 63815
// for i = 1 to tigers do
63733: LD_ADDR_VAR 0 11
63737: PUSH
63738: DOUBLE
63739: LD_INT 1
63741: DEC
63742: ST_TO_ADDR
63743: LD_VAR 0 2
63747: PUSH
63748: FOR_TO
63749: IFFALSE 63813
// begin hc_class = class_tiger ;
63751: LD_ADDR_OWVAR 28
63755: PUSH
63756: LD_INT 14
63758: ST_TO_ADDR
// hc_gallery =  ;
63759: LD_ADDR_OWVAR 33
63763: PUSH
63764: LD_STRING 
63766: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63767: LD_ADDR_OWVAR 35
63771: PUSH
63772: LD_INT 7
63774: NEG
63775: PPUSH
63776: LD_INT 7
63778: PPUSH
63779: CALL_OW 12
63783: ST_TO_ADDR
// animal := CreateHuman ;
63784: LD_ADDR_VAR 0 12
63788: PUSH
63789: CALL_OW 44
63793: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63794: LD_VAR 0 12
63798: PPUSH
63799: LD_VAR 0 8
63803: PPUSH
63804: LD_INT 0
63806: PPUSH
63807: CALL 65720 0 3
// end ;
63811: GO 63748
63813: POP
63814: POP
// if apemans then
63815: LD_VAR 0 3
63819: IFFALSE 63942
// for i = 1 to apemans do
63821: LD_ADDR_VAR 0 11
63825: PUSH
63826: DOUBLE
63827: LD_INT 1
63829: DEC
63830: ST_TO_ADDR
63831: LD_VAR 0 3
63835: PUSH
63836: FOR_TO
63837: IFFALSE 63940
// begin hc_class = class_apeman ;
63839: LD_ADDR_OWVAR 28
63843: PUSH
63844: LD_INT 12
63846: ST_TO_ADDR
// hc_gallery =  ;
63847: LD_ADDR_OWVAR 33
63851: PUSH
63852: LD_STRING 
63854: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63855: LD_ADDR_OWVAR 35
63859: PUSH
63860: LD_INT 2
63862: NEG
63863: PPUSH
63864: LD_INT 2
63866: PPUSH
63867: CALL_OW 12
63871: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63872: LD_ADDR_OWVAR 31
63876: PUSH
63877: LD_INT 1
63879: PPUSH
63880: LD_INT 3
63882: PPUSH
63883: CALL_OW 12
63887: PUSH
63888: LD_INT 1
63890: PPUSH
63891: LD_INT 3
63893: PPUSH
63894: CALL_OW 12
63898: PUSH
63899: LD_INT 0
63901: PUSH
63902: LD_INT 0
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: ST_TO_ADDR
// animal := CreateHuman ;
63911: LD_ADDR_VAR 0 12
63915: PUSH
63916: CALL_OW 44
63920: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63921: LD_VAR 0 12
63925: PPUSH
63926: LD_VAR 0 8
63930: PPUSH
63931: LD_INT 0
63933: PPUSH
63934: CALL 65720 0 3
// end ;
63938: GO 63836
63940: POP
63941: POP
// if enchidnas then
63942: LD_VAR 0 4
63946: IFFALSE 64013
// for i = 1 to enchidnas do
63948: LD_ADDR_VAR 0 11
63952: PUSH
63953: DOUBLE
63954: LD_INT 1
63956: DEC
63957: ST_TO_ADDR
63958: LD_VAR 0 4
63962: PUSH
63963: FOR_TO
63964: IFFALSE 64011
// begin hc_class = 13 ;
63966: LD_ADDR_OWVAR 28
63970: PUSH
63971: LD_INT 13
63973: ST_TO_ADDR
// hc_gallery =  ;
63974: LD_ADDR_OWVAR 33
63978: PUSH
63979: LD_STRING 
63981: ST_TO_ADDR
// animal := CreateHuman ;
63982: LD_ADDR_VAR 0 12
63986: PUSH
63987: CALL_OW 44
63991: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63992: LD_VAR 0 12
63996: PPUSH
63997: LD_VAR 0 8
64001: PPUSH
64002: LD_INT 0
64004: PPUSH
64005: CALL 65720 0 3
// end ;
64009: GO 63963
64011: POP
64012: POP
// if fishes then
64013: LD_VAR 0 7
64017: IFFALSE 64084
// for i = 1 to fishes do
64019: LD_ADDR_VAR 0 11
64023: PUSH
64024: DOUBLE
64025: LD_INT 1
64027: DEC
64028: ST_TO_ADDR
64029: LD_VAR 0 7
64033: PUSH
64034: FOR_TO
64035: IFFALSE 64082
// begin hc_class = 20 ;
64037: LD_ADDR_OWVAR 28
64041: PUSH
64042: LD_INT 20
64044: ST_TO_ADDR
// hc_gallery =  ;
64045: LD_ADDR_OWVAR 33
64049: PUSH
64050: LD_STRING 
64052: ST_TO_ADDR
// animal := CreateHuman ;
64053: LD_ADDR_VAR 0 12
64057: PUSH
64058: CALL_OW 44
64062: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64063: LD_VAR 0 12
64067: PPUSH
64068: LD_VAR 0 9
64072: PPUSH
64073: LD_INT 0
64075: PPUSH
64076: CALL 65720 0 3
// end ;
64080: GO 64034
64082: POP
64083: POP
// end ;
64084: LD_VAR 0 10
64088: RET
// export function WantHeal ( sci , unit ) ; begin
64089: LD_INT 0
64091: PPUSH
// if GetTaskList ( sci ) > 0 then
64092: LD_VAR 0 1
64096: PPUSH
64097: CALL_OW 437
64101: PUSH
64102: LD_INT 0
64104: GREATER
64105: IFFALSE 64175
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64107: LD_VAR 0 1
64111: PPUSH
64112: CALL_OW 437
64116: PUSH
64117: LD_INT 1
64119: ARRAY
64120: PUSH
64121: LD_INT 1
64123: ARRAY
64124: PUSH
64125: LD_STRING l
64127: EQUAL
64128: PUSH
64129: LD_VAR 0 1
64133: PPUSH
64134: CALL_OW 437
64138: PUSH
64139: LD_INT 1
64141: ARRAY
64142: PUSH
64143: LD_INT 4
64145: ARRAY
64146: PUSH
64147: LD_VAR 0 2
64151: EQUAL
64152: AND
64153: IFFALSE 64165
// result := true else
64155: LD_ADDR_VAR 0 3
64159: PUSH
64160: LD_INT 1
64162: ST_TO_ADDR
64163: GO 64173
// result := false ;
64165: LD_ADDR_VAR 0 3
64169: PUSH
64170: LD_INT 0
64172: ST_TO_ADDR
// end else
64173: GO 64183
// result := false ;
64175: LD_ADDR_VAR 0 3
64179: PUSH
64180: LD_INT 0
64182: ST_TO_ADDR
// end ;
64183: LD_VAR 0 3
64187: RET
// export function HealTarget ( sci ) ; begin
64188: LD_INT 0
64190: PPUSH
// if not sci then
64191: LD_VAR 0 1
64195: NOT
64196: IFFALSE 64200
// exit ;
64198: GO 64265
// result := 0 ;
64200: LD_ADDR_VAR 0 2
64204: PUSH
64205: LD_INT 0
64207: ST_TO_ADDR
// if GetTaskList ( sci ) then
64208: LD_VAR 0 1
64212: PPUSH
64213: CALL_OW 437
64217: IFFALSE 64265
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64219: LD_VAR 0 1
64223: PPUSH
64224: CALL_OW 437
64228: PUSH
64229: LD_INT 1
64231: ARRAY
64232: PUSH
64233: LD_INT 1
64235: ARRAY
64236: PUSH
64237: LD_STRING l
64239: EQUAL
64240: IFFALSE 64265
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64242: LD_ADDR_VAR 0 2
64246: PUSH
64247: LD_VAR 0 1
64251: PPUSH
64252: CALL_OW 437
64256: PUSH
64257: LD_INT 1
64259: ARRAY
64260: PUSH
64261: LD_INT 4
64263: ARRAY
64264: ST_TO_ADDR
// end ;
64265: LD_VAR 0 2
64269: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64270: LD_INT 0
64272: PPUSH
64273: PPUSH
64274: PPUSH
64275: PPUSH
// if not base_units then
64276: LD_VAR 0 1
64280: NOT
64281: IFFALSE 64285
// exit ;
64283: GO 64372
// result := false ;
64285: LD_ADDR_VAR 0 2
64289: PUSH
64290: LD_INT 0
64292: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64293: LD_ADDR_VAR 0 5
64297: PUSH
64298: LD_VAR 0 1
64302: PPUSH
64303: LD_INT 21
64305: PUSH
64306: LD_INT 3
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PPUSH
64313: CALL_OW 72
64317: ST_TO_ADDR
// if not tmp then
64318: LD_VAR 0 5
64322: NOT
64323: IFFALSE 64327
// exit ;
64325: GO 64372
// for i in tmp do
64327: LD_ADDR_VAR 0 3
64331: PUSH
64332: LD_VAR 0 5
64336: PUSH
64337: FOR_IN
64338: IFFALSE 64370
// begin result := EnemyInRange ( i , 22 ) ;
64340: LD_ADDR_VAR 0 2
64344: PUSH
64345: LD_VAR 0 3
64349: PPUSH
64350: LD_INT 22
64352: PPUSH
64353: CALL 62608 0 2
64357: ST_TO_ADDR
// if result then
64358: LD_VAR 0 2
64362: IFFALSE 64368
// exit ;
64364: POP
64365: POP
64366: GO 64372
// end ;
64368: GO 64337
64370: POP
64371: POP
// end ;
64372: LD_VAR 0 2
64376: RET
// export function FilterByTag ( units , tag ) ; begin
64377: LD_INT 0
64379: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64380: LD_ADDR_VAR 0 3
64384: PUSH
64385: LD_VAR 0 1
64389: PPUSH
64390: LD_INT 120
64392: PUSH
64393: LD_VAR 0 2
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PPUSH
64402: CALL_OW 72
64406: ST_TO_ADDR
// end ;
64407: LD_VAR 0 3
64411: RET
// export function IsDriver ( un ) ; begin
64412: LD_INT 0
64414: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64415: LD_ADDR_VAR 0 2
64419: PUSH
64420: LD_VAR 0 1
64424: PUSH
64425: LD_INT 55
64427: PUSH
64428: EMPTY
64429: LIST
64430: PPUSH
64431: CALL_OW 69
64435: IN
64436: ST_TO_ADDR
// end ;
64437: LD_VAR 0 2
64441: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64442: LD_INT 0
64444: PPUSH
64445: PPUSH
// list := [ ] ;
64446: LD_ADDR_VAR 0 5
64450: PUSH
64451: EMPTY
64452: ST_TO_ADDR
// case d of 0 :
64453: LD_VAR 0 3
64457: PUSH
64458: LD_INT 0
64460: DOUBLE
64461: EQUAL
64462: IFTRUE 64466
64464: GO 64599
64466: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64467: LD_ADDR_VAR 0 5
64471: PUSH
64472: LD_VAR 0 1
64476: PUSH
64477: LD_INT 4
64479: MINUS
64480: PUSH
64481: LD_VAR 0 2
64485: PUSH
64486: LD_INT 4
64488: MINUS
64489: PUSH
64490: LD_INT 2
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: LIST
64497: PUSH
64498: LD_VAR 0 1
64502: PUSH
64503: LD_INT 3
64505: MINUS
64506: PUSH
64507: LD_VAR 0 2
64511: PUSH
64512: LD_INT 1
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: LIST
64519: PUSH
64520: LD_VAR 0 1
64524: PUSH
64525: LD_INT 4
64527: PLUS
64528: PUSH
64529: LD_VAR 0 2
64533: PUSH
64534: LD_INT 4
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: LIST
64541: PUSH
64542: LD_VAR 0 1
64546: PUSH
64547: LD_INT 3
64549: PLUS
64550: PUSH
64551: LD_VAR 0 2
64555: PUSH
64556: LD_INT 3
64558: PLUS
64559: PUSH
64560: LD_INT 5
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: LIST
64567: PUSH
64568: LD_VAR 0 1
64572: PUSH
64573: LD_VAR 0 2
64577: PUSH
64578: LD_INT 4
64580: PLUS
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: LIST
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: ST_TO_ADDR
// end ; 1 :
64597: GO 65297
64599: LD_INT 1
64601: DOUBLE
64602: EQUAL
64603: IFTRUE 64607
64605: GO 64740
64607: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64608: LD_ADDR_VAR 0 5
64612: PUSH
64613: LD_VAR 0 1
64617: PUSH
64618: LD_VAR 0 2
64622: PUSH
64623: LD_INT 4
64625: MINUS
64626: PUSH
64627: LD_INT 3
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: LIST
64634: PUSH
64635: LD_VAR 0 1
64639: PUSH
64640: LD_INT 3
64642: MINUS
64643: PUSH
64644: LD_VAR 0 2
64648: PUSH
64649: LD_INT 3
64651: MINUS
64652: PUSH
64653: LD_INT 2
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: LIST
64660: PUSH
64661: LD_VAR 0 1
64665: PUSH
64666: LD_INT 4
64668: MINUS
64669: PUSH
64670: LD_VAR 0 2
64674: PUSH
64675: LD_INT 1
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: LIST
64682: PUSH
64683: LD_VAR 0 1
64687: PUSH
64688: LD_VAR 0 2
64692: PUSH
64693: LD_INT 3
64695: PLUS
64696: PUSH
64697: LD_INT 0
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: LIST
64704: PUSH
64705: LD_VAR 0 1
64709: PUSH
64710: LD_INT 4
64712: PLUS
64713: PUSH
64714: LD_VAR 0 2
64718: PUSH
64719: LD_INT 4
64721: PLUS
64722: PUSH
64723: LD_INT 5
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: LIST
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: ST_TO_ADDR
// end ; 2 :
64738: GO 65297
64740: LD_INT 2
64742: DOUBLE
64743: EQUAL
64744: IFTRUE 64748
64746: GO 64877
64748: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64749: LD_ADDR_VAR 0 5
64753: PUSH
64754: LD_VAR 0 1
64758: PUSH
64759: LD_VAR 0 2
64763: PUSH
64764: LD_INT 3
64766: MINUS
64767: PUSH
64768: LD_INT 3
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: LIST
64775: PUSH
64776: LD_VAR 0 1
64780: PUSH
64781: LD_INT 4
64783: PLUS
64784: PUSH
64785: LD_VAR 0 2
64789: PUSH
64790: LD_INT 4
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: LIST
64797: PUSH
64798: LD_VAR 0 1
64802: PUSH
64803: LD_VAR 0 2
64807: PUSH
64808: LD_INT 4
64810: PLUS
64811: PUSH
64812: LD_INT 0
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: LIST
64819: PUSH
64820: LD_VAR 0 1
64824: PUSH
64825: LD_INT 3
64827: MINUS
64828: PUSH
64829: LD_VAR 0 2
64833: PUSH
64834: LD_INT 1
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: LIST
64841: PUSH
64842: LD_VAR 0 1
64846: PUSH
64847: LD_INT 4
64849: MINUS
64850: PUSH
64851: LD_VAR 0 2
64855: PUSH
64856: LD_INT 4
64858: MINUS
64859: PUSH
64860: LD_INT 2
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: LIST
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: LIST
64872: LIST
64873: LIST
64874: ST_TO_ADDR
// end ; 3 :
64875: GO 65297
64877: LD_INT 3
64879: DOUBLE
64880: EQUAL
64881: IFTRUE 64885
64883: GO 65018
64885: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64886: LD_ADDR_VAR 0 5
64890: PUSH
64891: LD_VAR 0 1
64895: PUSH
64896: LD_INT 3
64898: PLUS
64899: PUSH
64900: LD_VAR 0 2
64904: PUSH
64905: LD_INT 4
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: LIST
64912: PUSH
64913: LD_VAR 0 1
64917: PUSH
64918: LD_INT 4
64920: PLUS
64921: PUSH
64922: LD_VAR 0 2
64926: PUSH
64927: LD_INT 4
64929: PLUS
64930: PUSH
64931: LD_INT 5
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: LIST
64938: PUSH
64939: LD_VAR 0 1
64943: PUSH
64944: LD_INT 4
64946: MINUS
64947: PUSH
64948: LD_VAR 0 2
64952: PUSH
64953: LD_INT 1
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: LIST
64960: PUSH
64961: LD_VAR 0 1
64965: PUSH
64966: LD_VAR 0 2
64970: PUSH
64971: LD_INT 4
64973: MINUS
64974: PUSH
64975: LD_INT 3
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: LIST
64982: PUSH
64983: LD_VAR 0 1
64987: PUSH
64988: LD_INT 3
64990: MINUS
64991: PUSH
64992: LD_VAR 0 2
64996: PUSH
64997: LD_INT 3
64999: MINUS
65000: PUSH
65001: LD_INT 2
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: LIST
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: ST_TO_ADDR
// end ; 4 :
65016: GO 65297
65018: LD_INT 4
65020: DOUBLE
65021: EQUAL
65022: IFTRUE 65026
65024: GO 65159
65026: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65027: LD_ADDR_VAR 0 5
65031: PUSH
65032: LD_VAR 0 1
65036: PUSH
65037: LD_VAR 0 2
65041: PUSH
65042: LD_INT 4
65044: PLUS
65045: PUSH
65046: LD_INT 0
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: LIST
65053: PUSH
65054: LD_VAR 0 1
65058: PUSH
65059: LD_INT 3
65061: PLUS
65062: PUSH
65063: LD_VAR 0 2
65067: PUSH
65068: LD_INT 3
65070: PLUS
65071: PUSH
65072: LD_INT 5
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: LIST
65079: PUSH
65080: LD_VAR 0 1
65084: PUSH
65085: LD_INT 4
65087: PLUS
65088: PUSH
65089: LD_VAR 0 2
65093: PUSH
65094: LD_INT 4
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: LIST
65101: PUSH
65102: LD_VAR 0 1
65106: PUSH
65107: LD_VAR 0 2
65111: PUSH
65112: LD_INT 3
65114: MINUS
65115: PUSH
65116: LD_INT 3
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: LIST
65123: PUSH
65124: LD_VAR 0 1
65128: PUSH
65129: LD_INT 4
65131: MINUS
65132: PUSH
65133: LD_VAR 0 2
65137: PUSH
65138: LD_INT 4
65140: MINUS
65141: PUSH
65142: LD_INT 2
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: LIST
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: ST_TO_ADDR
// end ; 5 :
65157: GO 65297
65159: LD_INT 5
65161: DOUBLE
65162: EQUAL
65163: IFTRUE 65167
65165: GO 65296
65167: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65168: LD_ADDR_VAR 0 5
65172: PUSH
65173: LD_VAR 0 1
65177: PUSH
65178: LD_INT 4
65180: MINUS
65181: PUSH
65182: LD_VAR 0 2
65186: PUSH
65187: LD_INT 1
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: LIST
65194: PUSH
65195: LD_VAR 0 1
65199: PUSH
65200: LD_VAR 0 2
65204: PUSH
65205: LD_INT 4
65207: MINUS
65208: PUSH
65209: LD_INT 3
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: LIST
65216: PUSH
65217: LD_VAR 0 1
65221: PUSH
65222: LD_INT 4
65224: PLUS
65225: PUSH
65226: LD_VAR 0 2
65230: PUSH
65231: LD_INT 4
65233: PLUS
65234: PUSH
65235: LD_INT 5
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: LIST
65242: PUSH
65243: LD_VAR 0 1
65247: PUSH
65248: LD_INT 3
65250: PLUS
65251: PUSH
65252: LD_VAR 0 2
65256: PUSH
65257: LD_INT 4
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: LIST
65264: PUSH
65265: LD_VAR 0 1
65269: PUSH
65270: LD_VAR 0 2
65274: PUSH
65275: LD_INT 3
65277: PLUS
65278: PUSH
65279: LD_INT 0
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: LIST
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: ST_TO_ADDR
// end ; end ;
65294: GO 65297
65296: POP
// result := list ;
65297: LD_ADDR_VAR 0 4
65301: PUSH
65302: LD_VAR 0 5
65306: ST_TO_ADDR
// end ;
65307: LD_VAR 0 4
65311: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65312: LD_INT 0
65314: PPUSH
65315: PPUSH
65316: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65317: LD_VAR 0 1
65321: NOT
65322: PUSH
65323: LD_VAR 0 2
65327: PUSH
65328: LD_INT 1
65330: PUSH
65331: LD_INT 2
65333: PUSH
65334: LD_INT 3
65336: PUSH
65337: LD_INT 4
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: IN
65346: NOT
65347: OR
65348: IFFALSE 65352
// exit ;
65350: GO 65444
// tmp := [ ] ;
65352: LD_ADDR_VAR 0 5
65356: PUSH
65357: EMPTY
65358: ST_TO_ADDR
// for i in units do
65359: LD_ADDR_VAR 0 4
65363: PUSH
65364: LD_VAR 0 1
65368: PUSH
65369: FOR_IN
65370: IFFALSE 65413
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65372: LD_ADDR_VAR 0 5
65376: PUSH
65377: LD_VAR 0 5
65381: PPUSH
65382: LD_VAR 0 5
65386: PUSH
65387: LD_INT 1
65389: PLUS
65390: PPUSH
65391: LD_VAR 0 4
65395: PPUSH
65396: LD_VAR 0 2
65400: PPUSH
65401: CALL_OW 259
65405: PPUSH
65406: CALL_OW 2
65410: ST_TO_ADDR
65411: GO 65369
65413: POP
65414: POP
// if not tmp then
65415: LD_VAR 0 5
65419: NOT
65420: IFFALSE 65424
// exit ;
65422: GO 65444
// result := SortListByListDesc ( units , tmp ) ;
65424: LD_ADDR_VAR 0 3
65428: PUSH
65429: LD_VAR 0 1
65433: PPUSH
65434: LD_VAR 0 5
65438: PPUSH
65439: CALL_OW 77
65443: ST_TO_ADDR
// end ;
65444: LD_VAR 0 3
65448: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65449: LD_INT 0
65451: PPUSH
65452: PPUSH
65453: PPUSH
// result := false ;
65454: LD_ADDR_VAR 0 3
65458: PUSH
65459: LD_INT 0
65461: ST_TO_ADDR
// x := GetX ( building ) ;
65462: LD_ADDR_VAR 0 4
65466: PUSH
65467: LD_VAR 0 2
65471: PPUSH
65472: CALL_OW 250
65476: ST_TO_ADDR
// y := GetY ( building ) ;
65477: LD_ADDR_VAR 0 5
65481: PUSH
65482: LD_VAR 0 2
65486: PPUSH
65487: CALL_OW 251
65491: ST_TO_ADDR
// if not building or not x or not y then
65492: LD_VAR 0 2
65496: NOT
65497: PUSH
65498: LD_VAR 0 4
65502: NOT
65503: OR
65504: PUSH
65505: LD_VAR 0 5
65509: NOT
65510: OR
65511: IFFALSE 65515
// exit ;
65513: GO 65607
// if GetTaskList ( unit ) then
65515: LD_VAR 0 1
65519: PPUSH
65520: CALL_OW 437
65524: IFFALSE 65607
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65526: LD_STRING e
65528: PUSH
65529: LD_VAR 0 1
65533: PPUSH
65534: CALL_OW 437
65538: PUSH
65539: LD_INT 1
65541: ARRAY
65542: PUSH
65543: LD_INT 1
65545: ARRAY
65546: EQUAL
65547: PUSH
65548: LD_VAR 0 4
65552: PUSH
65553: LD_VAR 0 1
65557: PPUSH
65558: CALL_OW 437
65562: PUSH
65563: LD_INT 1
65565: ARRAY
65566: PUSH
65567: LD_INT 2
65569: ARRAY
65570: EQUAL
65571: AND
65572: PUSH
65573: LD_VAR 0 5
65577: PUSH
65578: LD_VAR 0 1
65582: PPUSH
65583: CALL_OW 437
65587: PUSH
65588: LD_INT 1
65590: ARRAY
65591: PUSH
65592: LD_INT 3
65594: ARRAY
65595: EQUAL
65596: AND
65597: IFFALSE 65607
// result := true end ;
65599: LD_ADDR_VAR 0 3
65603: PUSH
65604: LD_INT 1
65606: ST_TO_ADDR
// end ;
65607: LD_VAR 0 3
65611: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65612: LD_INT 0
65614: PPUSH
// result := false ;
65615: LD_ADDR_VAR 0 4
65619: PUSH
65620: LD_INT 0
65622: ST_TO_ADDR
// if GetTaskList ( unit ) then
65623: LD_VAR 0 1
65627: PPUSH
65628: CALL_OW 437
65632: IFFALSE 65715
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65634: LD_STRING M
65636: PUSH
65637: LD_VAR 0 1
65641: PPUSH
65642: CALL_OW 437
65646: PUSH
65647: LD_INT 1
65649: ARRAY
65650: PUSH
65651: LD_INT 1
65653: ARRAY
65654: EQUAL
65655: PUSH
65656: LD_VAR 0 2
65660: PUSH
65661: LD_VAR 0 1
65665: PPUSH
65666: CALL_OW 437
65670: PUSH
65671: LD_INT 1
65673: ARRAY
65674: PUSH
65675: LD_INT 2
65677: ARRAY
65678: EQUAL
65679: AND
65680: PUSH
65681: LD_VAR 0 3
65685: PUSH
65686: LD_VAR 0 1
65690: PPUSH
65691: CALL_OW 437
65695: PUSH
65696: LD_INT 1
65698: ARRAY
65699: PUSH
65700: LD_INT 3
65702: ARRAY
65703: EQUAL
65704: AND
65705: IFFALSE 65715
// result := true ;
65707: LD_ADDR_VAR 0 4
65711: PUSH
65712: LD_INT 1
65714: ST_TO_ADDR
// end ; end ;
65715: LD_VAR 0 4
65719: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65720: LD_INT 0
65722: PPUSH
65723: PPUSH
65724: PPUSH
65725: PPUSH
// if not unit or not area then
65726: LD_VAR 0 1
65730: NOT
65731: PUSH
65732: LD_VAR 0 2
65736: NOT
65737: OR
65738: IFFALSE 65742
// exit ;
65740: GO 65906
// tmp := AreaToList ( area , i ) ;
65742: LD_ADDR_VAR 0 6
65746: PUSH
65747: LD_VAR 0 2
65751: PPUSH
65752: LD_VAR 0 5
65756: PPUSH
65757: CALL_OW 517
65761: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65762: LD_ADDR_VAR 0 5
65766: PUSH
65767: DOUBLE
65768: LD_INT 1
65770: DEC
65771: ST_TO_ADDR
65772: LD_VAR 0 6
65776: PUSH
65777: LD_INT 1
65779: ARRAY
65780: PUSH
65781: FOR_TO
65782: IFFALSE 65904
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65784: LD_ADDR_VAR 0 7
65788: PUSH
65789: LD_VAR 0 6
65793: PUSH
65794: LD_INT 1
65796: ARRAY
65797: PUSH
65798: LD_VAR 0 5
65802: ARRAY
65803: PUSH
65804: LD_VAR 0 6
65808: PUSH
65809: LD_INT 2
65811: ARRAY
65812: PUSH
65813: LD_VAR 0 5
65817: ARRAY
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65823: LD_VAR 0 7
65827: PUSH
65828: LD_INT 1
65830: ARRAY
65831: PPUSH
65832: LD_VAR 0 7
65836: PUSH
65837: LD_INT 2
65839: ARRAY
65840: PPUSH
65841: CALL_OW 428
65845: PUSH
65846: LD_INT 0
65848: EQUAL
65849: IFFALSE 65902
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65851: LD_VAR 0 1
65855: PPUSH
65856: LD_VAR 0 7
65860: PUSH
65861: LD_INT 1
65863: ARRAY
65864: PPUSH
65865: LD_VAR 0 7
65869: PUSH
65870: LD_INT 2
65872: ARRAY
65873: PPUSH
65874: LD_VAR 0 3
65878: PPUSH
65879: CALL_OW 48
// result := IsPlaced ( unit ) ;
65883: LD_ADDR_VAR 0 4
65887: PUSH
65888: LD_VAR 0 1
65892: PPUSH
65893: CALL_OW 305
65897: ST_TO_ADDR
// exit ;
65898: POP
65899: POP
65900: GO 65906
// end ; end ;
65902: GO 65781
65904: POP
65905: POP
// end ;
65906: LD_VAR 0 4
65910: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65911: LD_INT 0
65913: PPUSH
65914: PPUSH
65915: PPUSH
// if not side or side > 8 then
65916: LD_VAR 0 1
65920: NOT
65921: PUSH
65922: LD_VAR 0 1
65926: PUSH
65927: LD_INT 8
65929: GREATER
65930: OR
65931: IFFALSE 65935
// exit ;
65933: GO 66122
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65935: LD_ADDR_VAR 0 4
65939: PUSH
65940: LD_INT 22
65942: PUSH
65943: LD_VAR 0 1
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 21
65954: PUSH
65955: LD_INT 3
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PPUSH
65966: CALL_OW 69
65970: ST_TO_ADDR
// if not tmp then
65971: LD_VAR 0 4
65975: NOT
65976: IFFALSE 65980
// exit ;
65978: GO 66122
// enable_addtolog := true ;
65980: LD_ADDR_OWVAR 81
65984: PUSH
65985: LD_INT 1
65987: ST_TO_ADDR
// AddToLog ( [ ) ;
65988: LD_STRING [
65990: PPUSH
65991: CALL_OW 561
// for i in tmp do
65995: LD_ADDR_VAR 0 3
65999: PUSH
66000: LD_VAR 0 4
66004: PUSH
66005: FOR_IN
66006: IFFALSE 66113
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66008: LD_STRING [
66010: PUSH
66011: LD_VAR 0 3
66015: PPUSH
66016: CALL_OW 266
66020: STR
66021: PUSH
66022: LD_STRING , 
66024: STR
66025: PUSH
66026: LD_VAR 0 3
66030: PPUSH
66031: CALL_OW 250
66035: STR
66036: PUSH
66037: LD_STRING , 
66039: STR
66040: PUSH
66041: LD_VAR 0 3
66045: PPUSH
66046: CALL_OW 251
66050: STR
66051: PUSH
66052: LD_STRING , 
66054: STR
66055: PUSH
66056: LD_VAR 0 3
66060: PPUSH
66061: CALL_OW 254
66065: STR
66066: PUSH
66067: LD_STRING , 
66069: STR
66070: PUSH
66071: LD_VAR 0 3
66075: PPUSH
66076: LD_INT 1
66078: PPUSH
66079: CALL_OW 268
66083: STR
66084: PUSH
66085: LD_STRING , 
66087: STR
66088: PUSH
66089: LD_VAR 0 3
66093: PPUSH
66094: LD_INT 2
66096: PPUSH
66097: CALL_OW 268
66101: STR
66102: PUSH
66103: LD_STRING ],
66105: STR
66106: PPUSH
66107: CALL_OW 561
// end ;
66111: GO 66005
66113: POP
66114: POP
// AddToLog ( ]; ) ;
66115: LD_STRING ];
66117: PPUSH
66118: CALL_OW 561
// end ;
66122: LD_VAR 0 2
66126: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66127: LD_INT 0
66129: PPUSH
66130: PPUSH
66131: PPUSH
66132: PPUSH
66133: PPUSH
// if not area or not rate or not max then
66134: LD_VAR 0 1
66138: NOT
66139: PUSH
66140: LD_VAR 0 2
66144: NOT
66145: OR
66146: PUSH
66147: LD_VAR 0 4
66151: NOT
66152: OR
66153: IFFALSE 66157
// exit ;
66155: GO 66346
// while 1 do
66157: LD_INT 1
66159: IFFALSE 66346
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66161: LD_ADDR_VAR 0 9
66165: PUSH
66166: LD_VAR 0 1
66170: PPUSH
66171: LD_INT 1
66173: PPUSH
66174: CALL_OW 287
66178: PUSH
66179: LD_INT 10
66181: MUL
66182: ST_TO_ADDR
// r := rate / 10 ;
66183: LD_ADDR_VAR 0 7
66187: PUSH
66188: LD_VAR 0 2
66192: PUSH
66193: LD_INT 10
66195: DIVREAL
66196: ST_TO_ADDR
// time := 1 1$00 ;
66197: LD_ADDR_VAR 0 8
66201: PUSH
66202: LD_INT 2100
66204: ST_TO_ADDR
// if amount < min then
66205: LD_VAR 0 9
66209: PUSH
66210: LD_VAR 0 3
66214: LESS
66215: IFFALSE 66233
// r := r * 2 else
66217: LD_ADDR_VAR 0 7
66221: PUSH
66222: LD_VAR 0 7
66226: PUSH
66227: LD_INT 2
66229: MUL
66230: ST_TO_ADDR
66231: GO 66259
// if amount > max then
66233: LD_VAR 0 9
66237: PUSH
66238: LD_VAR 0 4
66242: GREATER
66243: IFFALSE 66259
// r := r / 2 ;
66245: LD_ADDR_VAR 0 7
66249: PUSH
66250: LD_VAR 0 7
66254: PUSH
66255: LD_INT 2
66257: DIVREAL
66258: ST_TO_ADDR
// time := time / r ;
66259: LD_ADDR_VAR 0 8
66263: PUSH
66264: LD_VAR 0 8
66268: PUSH
66269: LD_VAR 0 7
66273: DIVREAL
66274: ST_TO_ADDR
// if time < 0 then
66275: LD_VAR 0 8
66279: PUSH
66280: LD_INT 0
66282: LESS
66283: IFFALSE 66300
// time := time * - 1 ;
66285: LD_ADDR_VAR 0 8
66289: PUSH
66290: LD_VAR 0 8
66294: PUSH
66295: LD_INT 1
66297: NEG
66298: MUL
66299: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66300: LD_VAR 0 8
66304: PUSH
66305: LD_INT 35
66307: PPUSH
66308: LD_INT 875
66310: PPUSH
66311: CALL_OW 12
66315: PLUS
66316: PPUSH
66317: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66321: LD_INT 1
66323: PPUSH
66324: LD_INT 5
66326: PPUSH
66327: CALL_OW 12
66331: PPUSH
66332: LD_VAR 0 1
66336: PPUSH
66337: LD_INT 1
66339: PPUSH
66340: CALL_OW 55
// end ;
66344: GO 66157
// end ;
66346: LD_VAR 0 5
66350: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66351: LD_INT 0
66353: PPUSH
66354: PPUSH
66355: PPUSH
66356: PPUSH
66357: PPUSH
66358: PPUSH
66359: PPUSH
66360: PPUSH
// if not turrets or not factories then
66361: LD_VAR 0 1
66365: NOT
66366: PUSH
66367: LD_VAR 0 2
66371: NOT
66372: OR
66373: IFFALSE 66377
// exit ;
66375: GO 66684
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66377: LD_ADDR_VAR 0 10
66381: PUSH
66382: LD_INT 5
66384: PUSH
66385: LD_INT 6
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 2
66394: PUSH
66395: LD_INT 4
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 3
66404: PUSH
66405: LD_INT 5
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 24
66419: PUSH
66420: LD_INT 25
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 23
66429: PUSH
66430: LD_INT 27
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 42
66443: PUSH
66444: LD_INT 43
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 44
66453: PUSH
66454: LD_INT 46
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 45
66463: PUSH
66464: LD_INT 47
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: LIST
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: LIST
66480: ST_TO_ADDR
// result := [ ] ;
66481: LD_ADDR_VAR 0 3
66485: PUSH
66486: EMPTY
66487: ST_TO_ADDR
// for i in turrets do
66488: LD_ADDR_VAR 0 4
66492: PUSH
66493: LD_VAR 0 1
66497: PUSH
66498: FOR_IN
66499: IFFALSE 66682
// begin nat := GetNation ( i ) ;
66501: LD_ADDR_VAR 0 7
66505: PUSH
66506: LD_VAR 0 4
66510: PPUSH
66511: CALL_OW 248
66515: ST_TO_ADDR
// weapon := 0 ;
66516: LD_ADDR_VAR 0 8
66520: PUSH
66521: LD_INT 0
66523: ST_TO_ADDR
// if not nat then
66524: LD_VAR 0 7
66528: NOT
66529: IFFALSE 66533
// continue ;
66531: GO 66498
// for j in list [ nat ] do
66533: LD_ADDR_VAR 0 5
66537: PUSH
66538: LD_VAR 0 10
66542: PUSH
66543: LD_VAR 0 7
66547: ARRAY
66548: PUSH
66549: FOR_IN
66550: IFFALSE 66591
// if GetBWeapon ( i ) = j [ 1 ] then
66552: LD_VAR 0 4
66556: PPUSH
66557: CALL_OW 269
66561: PUSH
66562: LD_VAR 0 5
66566: PUSH
66567: LD_INT 1
66569: ARRAY
66570: EQUAL
66571: IFFALSE 66589
// begin weapon := j [ 2 ] ;
66573: LD_ADDR_VAR 0 8
66577: PUSH
66578: LD_VAR 0 5
66582: PUSH
66583: LD_INT 2
66585: ARRAY
66586: ST_TO_ADDR
// break ;
66587: GO 66591
// end ;
66589: GO 66549
66591: POP
66592: POP
// if not weapon then
66593: LD_VAR 0 8
66597: NOT
66598: IFFALSE 66602
// continue ;
66600: GO 66498
// for k in factories do
66602: LD_ADDR_VAR 0 6
66606: PUSH
66607: LD_VAR 0 2
66611: PUSH
66612: FOR_IN
66613: IFFALSE 66678
// begin weapons := AvailableWeaponList ( k ) ;
66615: LD_ADDR_VAR 0 9
66619: PUSH
66620: LD_VAR 0 6
66624: PPUSH
66625: CALL_OW 478
66629: ST_TO_ADDR
// if not weapons then
66630: LD_VAR 0 9
66634: NOT
66635: IFFALSE 66639
// continue ;
66637: GO 66612
// if weapon in weapons then
66639: LD_VAR 0 8
66643: PUSH
66644: LD_VAR 0 9
66648: IN
66649: IFFALSE 66676
// begin result := [ i , weapon ] ;
66651: LD_ADDR_VAR 0 3
66655: PUSH
66656: LD_VAR 0 4
66660: PUSH
66661: LD_VAR 0 8
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: ST_TO_ADDR
// exit ;
66670: POP
66671: POP
66672: POP
66673: POP
66674: GO 66684
// end ; end ;
66676: GO 66612
66678: POP
66679: POP
// end ;
66680: GO 66498
66682: POP
66683: POP
// end ;
66684: LD_VAR 0 3
66688: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66689: LD_INT 0
66691: PPUSH
// if not side or side > 8 then
66692: LD_VAR 0 3
66696: NOT
66697: PUSH
66698: LD_VAR 0 3
66702: PUSH
66703: LD_INT 8
66705: GREATER
66706: OR
66707: IFFALSE 66711
// exit ;
66709: GO 66770
// if not range then
66711: LD_VAR 0 4
66715: NOT
66716: IFFALSE 66727
// range := - 12 ;
66718: LD_ADDR_VAR 0 4
66722: PUSH
66723: LD_INT 12
66725: NEG
66726: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66727: LD_VAR 0 1
66731: PPUSH
66732: LD_VAR 0 2
66736: PPUSH
66737: LD_VAR 0 3
66741: PPUSH
66742: LD_VAR 0 4
66746: PPUSH
66747: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66751: LD_VAR 0 1
66755: PPUSH
66756: LD_VAR 0 2
66760: PPUSH
66761: LD_VAR 0 3
66765: PPUSH
66766: CALL_OW 331
// end ;
66770: LD_VAR 0 5
66774: RET
// export function Video ( mode ) ; begin
66775: LD_INT 0
66777: PPUSH
// ingame_video = mode ;
66778: LD_ADDR_OWVAR 52
66782: PUSH
66783: LD_VAR 0 1
66787: ST_TO_ADDR
// interface_hidden = mode ;
66788: LD_ADDR_OWVAR 54
66792: PUSH
66793: LD_VAR 0 1
66797: ST_TO_ADDR
// end ;
66798: LD_VAR 0 2
66802: RET
// export function Join ( array , element ) ; begin
66803: LD_INT 0
66805: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66806: LD_ADDR_VAR 0 3
66810: PUSH
66811: LD_VAR 0 1
66815: PPUSH
66816: LD_VAR 0 1
66820: PUSH
66821: LD_INT 1
66823: PLUS
66824: PPUSH
66825: LD_VAR 0 2
66829: PPUSH
66830: CALL_OW 1
66834: ST_TO_ADDR
// end ;
66835: LD_VAR 0 3
66839: RET
// export function JoinUnion ( array , element ) ; begin
66840: LD_INT 0
66842: PPUSH
// result := array union element ;
66843: LD_ADDR_VAR 0 3
66847: PUSH
66848: LD_VAR 0 1
66852: PUSH
66853: LD_VAR 0 2
66857: UNION
66858: ST_TO_ADDR
// end ;
66859: LD_VAR 0 3
66863: RET
// export function GetBehemoths ( side ) ; begin
66864: LD_INT 0
66866: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66867: LD_ADDR_VAR 0 2
66871: PUSH
66872: LD_INT 22
66874: PUSH
66875: LD_VAR 0 1
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 31
66886: PUSH
66887: LD_INT 25
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PPUSH
66898: CALL_OW 69
66902: ST_TO_ADDR
// end ;
66903: LD_VAR 0 2
66907: RET
// export function Shuffle ( array ) ; var i , index ; begin
66908: LD_INT 0
66910: PPUSH
66911: PPUSH
66912: PPUSH
// result := [ ] ;
66913: LD_ADDR_VAR 0 2
66917: PUSH
66918: EMPTY
66919: ST_TO_ADDR
// if not array then
66920: LD_VAR 0 1
66924: NOT
66925: IFFALSE 66929
// exit ;
66927: GO 67028
// Randomize ;
66929: CALL_OW 10
// for i = array downto 1 do
66933: LD_ADDR_VAR 0 3
66937: PUSH
66938: DOUBLE
66939: LD_VAR 0 1
66943: INC
66944: ST_TO_ADDR
66945: LD_INT 1
66947: PUSH
66948: FOR_DOWNTO
66949: IFFALSE 67026
// begin index := rand ( 1 , array ) ;
66951: LD_ADDR_VAR 0 4
66955: PUSH
66956: LD_INT 1
66958: PPUSH
66959: LD_VAR 0 1
66963: PPUSH
66964: CALL_OW 12
66968: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66969: LD_ADDR_VAR 0 2
66973: PUSH
66974: LD_VAR 0 2
66978: PPUSH
66979: LD_VAR 0 2
66983: PUSH
66984: LD_INT 1
66986: PLUS
66987: PPUSH
66988: LD_VAR 0 1
66992: PUSH
66993: LD_VAR 0 4
66997: ARRAY
66998: PPUSH
66999: CALL_OW 2
67003: ST_TO_ADDR
// array := Delete ( array , index ) ;
67004: LD_ADDR_VAR 0 1
67008: PUSH
67009: LD_VAR 0 1
67013: PPUSH
67014: LD_VAR 0 4
67018: PPUSH
67019: CALL_OW 3
67023: ST_TO_ADDR
// end ;
67024: GO 66948
67026: POP
67027: POP
// end ;
67028: LD_VAR 0 2
67032: RET
// export function GetBaseMaterials ( base ) ; begin
67033: LD_INT 0
67035: PPUSH
// result := [ 0 , 0 , 0 ] ;
67036: LD_ADDR_VAR 0 2
67040: PUSH
67041: LD_INT 0
67043: PUSH
67044: LD_INT 0
67046: PUSH
67047: LD_INT 0
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: LIST
67054: ST_TO_ADDR
// if not base then
67055: LD_VAR 0 1
67059: NOT
67060: IFFALSE 67064
// exit ;
67062: GO 67113
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67064: LD_ADDR_VAR 0 2
67068: PUSH
67069: LD_VAR 0 1
67073: PPUSH
67074: LD_INT 1
67076: PPUSH
67077: CALL_OW 275
67081: PUSH
67082: LD_VAR 0 1
67086: PPUSH
67087: LD_INT 2
67089: PPUSH
67090: CALL_OW 275
67094: PUSH
67095: LD_VAR 0 1
67099: PPUSH
67100: LD_INT 3
67102: PPUSH
67103: CALL_OW 275
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: LIST
67112: ST_TO_ADDR
// end ;
67113: LD_VAR 0 2
67117: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67118: LD_INT 0
67120: PPUSH
67121: PPUSH
// result := array ;
67122: LD_ADDR_VAR 0 3
67126: PUSH
67127: LD_VAR 0 1
67131: ST_TO_ADDR
// if size > 0 then
67132: LD_VAR 0 2
67136: PUSH
67137: LD_INT 0
67139: GREATER
67140: IFFALSE 67186
// for i := array downto size do
67142: LD_ADDR_VAR 0 4
67146: PUSH
67147: DOUBLE
67148: LD_VAR 0 1
67152: INC
67153: ST_TO_ADDR
67154: LD_VAR 0 2
67158: PUSH
67159: FOR_DOWNTO
67160: IFFALSE 67184
// result := Delete ( result , result ) ;
67162: LD_ADDR_VAR 0 3
67166: PUSH
67167: LD_VAR 0 3
67171: PPUSH
67172: LD_VAR 0 3
67176: PPUSH
67177: CALL_OW 3
67181: ST_TO_ADDR
67182: GO 67159
67184: POP
67185: POP
// end ;
67186: LD_VAR 0 3
67190: RET
// export function ComExit ( unit ) ; var tmp ; begin
67191: LD_INT 0
67193: PPUSH
67194: PPUSH
// if not IsInUnit ( unit ) then
67195: LD_VAR 0 1
67199: PPUSH
67200: CALL_OW 310
67204: NOT
67205: IFFALSE 67209
// exit ;
67207: GO 67269
// tmp := IsInUnit ( unit ) ;
67209: LD_ADDR_VAR 0 3
67213: PUSH
67214: LD_VAR 0 1
67218: PPUSH
67219: CALL_OW 310
67223: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67224: LD_VAR 0 3
67228: PPUSH
67229: CALL_OW 247
67233: PUSH
67234: LD_INT 2
67236: EQUAL
67237: IFFALSE 67250
// ComExitVehicle ( unit ) else
67239: LD_VAR 0 1
67243: PPUSH
67244: CALL_OW 121
67248: GO 67259
// ComExitBuilding ( unit ) ;
67250: LD_VAR 0 1
67254: PPUSH
67255: CALL_OW 122
// result := tmp ;
67259: LD_ADDR_VAR 0 2
67263: PUSH
67264: LD_VAR 0 3
67268: ST_TO_ADDR
// end ;
67269: LD_VAR 0 2
67273: RET
// export function ComExitAll ( units ) ; var i ; begin
67274: LD_INT 0
67276: PPUSH
67277: PPUSH
// if not units then
67278: LD_VAR 0 1
67282: NOT
67283: IFFALSE 67287
// exit ;
67285: GO 67313
// for i in units do
67287: LD_ADDR_VAR 0 3
67291: PUSH
67292: LD_VAR 0 1
67296: PUSH
67297: FOR_IN
67298: IFFALSE 67311
// ComExit ( i ) ;
67300: LD_VAR 0 3
67304: PPUSH
67305: CALL 67191 0 1
67309: GO 67297
67311: POP
67312: POP
// end ;
67313: LD_VAR 0 2
67317: RET
// export function ResetHc ; begin
67318: LD_INT 0
67320: PPUSH
// InitHc ;
67321: CALL_OW 19
// hc_importance := 0 ;
67325: LD_ADDR_OWVAR 32
67329: PUSH
67330: LD_INT 0
67332: ST_TO_ADDR
// end ;
67333: LD_VAR 0 1
67337: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67338: LD_INT 0
67340: PPUSH
67341: PPUSH
67342: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67343: LD_ADDR_VAR 0 6
67347: PUSH
67348: LD_VAR 0 1
67352: PUSH
67353: LD_VAR 0 3
67357: PLUS
67358: PUSH
67359: LD_INT 2
67361: DIV
67362: ST_TO_ADDR
// if _x < 0 then
67363: LD_VAR 0 6
67367: PUSH
67368: LD_INT 0
67370: LESS
67371: IFFALSE 67388
// _x := _x * - 1 ;
67373: LD_ADDR_VAR 0 6
67377: PUSH
67378: LD_VAR 0 6
67382: PUSH
67383: LD_INT 1
67385: NEG
67386: MUL
67387: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67388: LD_ADDR_VAR 0 7
67392: PUSH
67393: LD_VAR 0 2
67397: PUSH
67398: LD_VAR 0 4
67402: PLUS
67403: PUSH
67404: LD_INT 2
67406: DIV
67407: ST_TO_ADDR
// if _y < 0 then
67408: LD_VAR 0 7
67412: PUSH
67413: LD_INT 0
67415: LESS
67416: IFFALSE 67433
// _y := _y * - 1 ;
67418: LD_ADDR_VAR 0 7
67422: PUSH
67423: LD_VAR 0 7
67427: PUSH
67428: LD_INT 1
67430: NEG
67431: MUL
67432: ST_TO_ADDR
// result := [ _x , _y ] ;
67433: LD_ADDR_VAR 0 5
67437: PUSH
67438: LD_VAR 0 6
67442: PUSH
67443: LD_VAR 0 7
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: ST_TO_ADDR
// end ;
67452: LD_VAR 0 5
67456: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67457: LD_INT 0
67459: PPUSH
67460: PPUSH
67461: PPUSH
67462: PPUSH
// task := GetTaskList ( unit ) ;
67463: LD_ADDR_VAR 0 7
67467: PUSH
67468: LD_VAR 0 1
67472: PPUSH
67473: CALL_OW 437
67477: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67478: LD_VAR 0 7
67482: NOT
67483: PUSH
67484: LD_VAR 0 1
67488: PPUSH
67489: LD_VAR 0 2
67493: PPUSH
67494: CALL_OW 308
67498: NOT
67499: AND
67500: IFFALSE 67504
// exit ;
67502: GO 67622
// if IsInArea ( unit , area ) then
67504: LD_VAR 0 1
67508: PPUSH
67509: LD_VAR 0 2
67513: PPUSH
67514: CALL_OW 308
67518: IFFALSE 67536
// begin ComMoveToArea ( unit , goAway ) ;
67520: LD_VAR 0 1
67524: PPUSH
67525: LD_VAR 0 3
67529: PPUSH
67530: CALL_OW 113
// exit ;
67534: GO 67622
// end ; if task [ 1 ] [ 1 ] <> M then
67536: LD_VAR 0 7
67540: PUSH
67541: LD_INT 1
67543: ARRAY
67544: PUSH
67545: LD_INT 1
67547: ARRAY
67548: PUSH
67549: LD_STRING M
67551: NONEQUAL
67552: IFFALSE 67556
// exit ;
67554: GO 67622
// x := task [ 1 ] [ 2 ] ;
67556: LD_ADDR_VAR 0 5
67560: PUSH
67561: LD_VAR 0 7
67565: PUSH
67566: LD_INT 1
67568: ARRAY
67569: PUSH
67570: LD_INT 2
67572: ARRAY
67573: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67574: LD_ADDR_VAR 0 6
67578: PUSH
67579: LD_VAR 0 7
67583: PUSH
67584: LD_INT 1
67586: ARRAY
67587: PUSH
67588: LD_INT 3
67590: ARRAY
67591: ST_TO_ADDR
// if InArea ( x , y , area ) then
67592: LD_VAR 0 5
67596: PPUSH
67597: LD_VAR 0 6
67601: PPUSH
67602: LD_VAR 0 2
67606: PPUSH
67607: CALL_OW 309
67611: IFFALSE 67622
// ComStop ( unit ) ;
67613: LD_VAR 0 1
67617: PPUSH
67618: CALL_OW 141
// end ;
67622: LD_VAR 0 4
67626: RET
// export function Abs ( value ) ; begin
67627: LD_INT 0
67629: PPUSH
// result := value ;
67630: LD_ADDR_VAR 0 2
67634: PUSH
67635: LD_VAR 0 1
67639: ST_TO_ADDR
// if value < 0 then
67640: LD_VAR 0 1
67644: PUSH
67645: LD_INT 0
67647: LESS
67648: IFFALSE 67665
// result := value * - 1 ;
67650: LD_ADDR_VAR 0 2
67654: PUSH
67655: LD_VAR 0 1
67659: PUSH
67660: LD_INT 1
67662: NEG
67663: MUL
67664: ST_TO_ADDR
// end ;
67665: LD_VAR 0 2
67669: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67670: LD_INT 0
67672: PPUSH
67673: PPUSH
67674: PPUSH
67675: PPUSH
67676: PPUSH
67677: PPUSH
67678: PPUSH
67679: PPUSH
// if not unit or not building then
67680: LD_VAR 0 1
67684: NOT
67685: PUSH
67686: LD_VAR 0 2
67690: NOT
67691: OR
67692: IFFALSE 67696
// exit ;
67694: GO 67922
// x := GetX ( building ) ;
67696: LD_ADDR_VAR 0 4
67700: PUSH
67701: LD_VAR 0 2
67705: PPUSH
67706: CALL_OW 250
67710: ST_TO_ADDR
// y := GetY ( building ) ;
67711: LD_ADDR_VAR 0 6
67715: PUSH
67716: LD_VAR 0 2
67720: PPUSH
67721: CALL_OW 251
67725: ST_TO_ADDR
// d := GetDir ( building ) ;
67726: LD_ADDR_VAR 0 8
67730: PUSH
67731: LD_VAR 0 2
67735: PPUSH
67736: CALL_OW 254
67740: ST_TO_ADDR
// r := 4 ;
67741: LD_ADDR_VAR 0 9
67745: PUSH
67746: LD_INT 4
67748: ST_TO_ADDR
// for i := 1 to 5 do
67749: LD_ADDR_VAR 0 10
67753: PUSH
67754: DOUBLE
67755: LD_INT 1
67757: DEC
67758: ST_TO_ADDR
67759: LD_INT 5
67761: PUSH
67762: FOR_TO
67763: IFFALSE 67920
// begin _x := ShiftX ( x , d , r + i ) ;
67765: LD_ADDR_VAR 0 5
67769: PUSH
67770: LD_VAR 0 4
67774: PPUSH
67775: LD_VAR 0 8
67779: PPUSH
67780: LD_VAR 0 9
67784: PUSH
67785: LD_VAR 0 10
67789: PLUS
67790: PPUSH
67791: CALL_OW 272
67795: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67796: LD_ADDR_VAR 0 7
67800: PUSH
67801: LD_VAR 0 6
67805: PPUSH
67806: LD_VAR 0 8
67810: PPUSH
67811: LD_VAR 0 9
67815: PUSH
67816: LD_VAR 0 10
67820: PLUS
67821: PPUSH
67822: CALL_OW 273
67826: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67827: LD_VAR 0 5
67831: PPUSH
67832: LD_VAR 0 7
67836: PPUSH
67837: CALL_OW 488
67841: PUSH
67842: LD_VAR 0 5
67846: PPUSH
67847: LD_VAR 0 7
67851: PPUSH
67852: CALL_OW 428
67856: PPUSH
67857: CALL_OW 247
67861: PUSH
67862: LD_INT 3
67864: PUSH
67865: LD_INT 2
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: IN
67872: NOT
67873: AND
67874: IFFALSE 67918
// begin ComMoveXY ( unit , _x , _y ) ;
67876: LD_VAR 0 1
67880: PPUSH
67881: LD_VAR 0 5
67885: PPUSH
67886: LD_VAR 0 7
67890: PPUSH
67891: CALL_OW 111
// result := [ _x , _y ] ;
67895: LD_ADDR_VAR 0 3
67899: PUSH
67900: LD_VAR 0 5
67904: PUSH
67905: LD_VAR 0 7
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: ST_TO_ADDR
// exit ;
67914: POP
67915: POP
67916: GO 67922
// end ; end ;
67918: GO 67762
67920: POP
67921: POP
// end ;
67922: LD_VAR 0 3
67926: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67927: LD_INT 0
67929: PPUSH
67930: PPUSH
67931: PPUSH
// result := 0 ;
67932: LD_ADDR_VAR 0 3
67936: PUSH
67937: LD_INT 0
67939: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67940: LD_VAR 0 1
67944: PUSH
67945: LD_INT 0
67947: LESS
67948: PUSH
67949: LD_VAR 0 1
67953: PUSH
67954: LD_INT 8
67956: GREATER
67957: OR
67958: PUSH
67959: LD_VAR 0 2
67963: PUSH
67964: LD_INT 0
67966: LESS
67967: OR
67968: PUSH
67969: LD_VAR 0 2
67973: PUSH
67974: LD_INT 8
67976: GREATER
67977: OR
67978: IFFALSE 67982
// exit ;
67980: GO 68057
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67982: LD_ADDR_VAR 0 4
67986: PUSH
67987: LD_INT 22
67989: PUSH
67990: LD_VAR 0 2
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PPUSH
67999: CALL_OW 69
68003: PUSH
68004: FOR_IN
68005: IFFALSE 68055
// begin un := UnitShoot ( i ) ;
68007: LD_ADDR_VAR 0 5
68011: PUSH
68012: LD_VAR 0 4
68016: PPUSH
68017: CALL_OW 504
68021: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68022: LD_VAR 0 5
68026: PPUSH
68027: CALL_OW 255
68031: PUSH
68032: LD_VAR 0 1
68036: EQUAL
68037: IFFALSE 68053
// begin result := un ;
68039: LD_ADDR_VAR 0 3
68043: PUSH
68044: LD_VAR 0 5
68048: ST_TO_ADDR
// exit ;
68049: POP
68050: POP
68051: GO 68057
// end ; end ;
68053: GO 68004
68055: POP
68056: POP
// end ;
68057: LD_VAR 0 3
68061: RET
// export function GetCargoBay ( units ) ; begin
68062: LD_INT 0
68064: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68065: LD_ADDR_VAR 0 2
68069: PUSH
68070: LD_VAR 0 1
68074: PPUSH
68075: LD_INT 2
68077: PUSH
68078: LD_INT 34
68080: PUSH
68081: LD_INT 12
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 34
68090: PUSH
68091: LD_INT 51
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 34
68100: PUSH
68101: LD_INT 32
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 34
68110: PUSH
68111: LD_EXP 46
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: PPUSH
68127: CALL_OW 72
68131: ST_TO_ADDR
// end ;
68132: LD_VAR 0 2
68136: RET
// export function Negate ( value ) ; begin
68137: LD_INT 0
68139: PPUSH
// result := not value ;
68140: LD_ADDR_VAR 0 2
68144: PUSH
68145: LD_VAR 0 1
68149: NOT
68150: ST_TO_ADDR
// end ;
68151: LD_VAR 0 2
68155: RET
// export function Inc ( value ) ; begin
68156: LD_INT 0
68158: PPUSH
// result := value + 1 ;
68159: LD_ADDR_VAR 0 2
68163: PUSH
68164: LD_VAR 0 1
68168: PUSH
68169: LD_INT 1
68171: PLUS
68172: ST_TO_ADDR
// end ;
68173: LD_VAR 0 2
68177: RET
// export function Dec ( value ) ; begin
68178: LD_INT 0
68180: PPUSH
// result := value - 1 ;
68181: LD_ADDR_VAR 0 2
68185: PUSH
68186: LD_VAR 0 1
68190: PUSH
68191: LD_INT 1
68193: MINUS
68194: ST_TO_ADDR
// end ;
68195: LD_VAR 0 2
68199: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68200: LD_INT 0
68202: PPUSH
68203: PPUSH
68204: PPUSH
68205: PPUSH
68206: PPUSH
68207: PPUSH
68208: PPUSH
68209: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68210: LD_VAR 0 1
68214: PPUSH
68215: LD_VAR 0 2
68219: PPUSH
68220: CALL_OW 488
68224: NOT
68225: PUSH
68226: LD_VAR 0 3
68230: PPUSH
68231: LD_VAR 0 4
68235: PPUSH
68236: CALL_OW 488
68240: NOT
68241: OR
68242: IFFALSE 68255
// begin result := - 1 ;
68244: LD_ADDR_VAR 0 5
68248: PUSH
68249: LD_INT 1
68251: NEG
68252: ST_TO_ADDR
// exit ;
68253: GO 68490
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68255: LD_ADDR_VAR 0 12
68259: PUSH
68260: LD_VAR 0 1
68264: PPUSH
68265: LD_VAR 0 2
68269: PPUSH
68270: LD_VAR 0 3
68274: PPUSH
68275: LD_VAR 0 4
68279: PPUSH
68280: CALL 67338 0 4
68284: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68285: LD_ADDR_VAR 0 11
68289: PUSH
68290: LD_VAR 0 1
68294: PPUSH
68295: LD_VAR 0 2
68299: PPUSH
68300: LD_VAR 0 12
68304: PUSH
68305: LD_INT 1
68307: ARRAY
68308: PPUSH
68309: LD_VAR 0 12
68313: PUSH
68314: LD_INT 2
68316: ARRAY
68317: PPUSH
68318: CALL_OW 298
68322: ST_TO_ADDR
// distance := 9999 ;
68323: LD_ADDR_VAR 0 10
68327: PUSH
68328: LD_INT 9999
68330: ST_TO_ADDR
// for i := 0 to 5 do
68331: LD_ADDR_VAR 0 6
68335: PUSH
68336: DOUBLE
68337: LD_INT 0
68339: DEC
68340: ST_TO_ADDR
68341: LD_INT 5
68343: PUSH
68344: FOR_TO
68345: IFFALSE 68488
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68347: LD_ADDR_VAR 0 7
68351: PUSH
68352: LD_VAR 0 1
68356: PPUSH
68357: LD_VAR 0 6
68361: PPUSH
68362: LD_VAR 0 11
68366: PPUSH
68367: CALL_OW 272
68371: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68372: LD_ADDR_VAR 0 8
68376: PUSH
68377: LD_VAR 0 2
68381: PPUSH
68382: LD_VAR 0 6
68386: PPUSH
68387: LD_VAR 0 11
68391: PPUSH
68392: CALL_OW 273
68396: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68397: LD_VAR 0 7
68401: PPUSH
68402: LD_VAR 0 8
68406: PPUSH
68407: CALL_OW 488
68411: NOT
68412: IFFALSE 68416
// continue ;
68414: GO 68344
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68416: LD_ADDR_VAR 0 9
68420: PUSH
68421: LD_VAR 0 12
68425: PUSH
68426: LD_INT 1
68428: ARRAY
68429: PPUSH
68430: LD_VAR 0 12
68434: PUSH
68435: LD_INT 2
68437: ARRAY
68438: PPUSH
68439: LD_VAR 0 7
68443: PPUSH
68444: LD_VAR 0 8
68448: PPUSH
68449: CALL_OW 298
68453: ST_TO_ADDR
// if tmp < distance then
68454: LD_VAR 0 9
68458: PUSH
68459: LD_VAR 0 10
68463: LESS
68464: IFFALSE 68486
// begin result := i ;
68466: LD_ADDR_VAR 0 5
68470: PUSH
68471: LD_VAR 0 6
68475: ST_TO_ADDR
// distance := tmp ;
68476: LD_ADDR_VAR 0 10
68480: PUSH
68481: LD_VAR 0 9
68485: ST_TO_ADDR
// end ; end ;
68486: GO 68344
68488: POP
68489: POP
// end ;
68490: LD_VAR 0 5
68494: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68495: LD_INT 0
68497: PPUSH
68498: PPUSH
// if not driver or not IsInUnit ( driver ) then
68499: LD_VAR 0 1
68503: NOT
68504: PUSH
68505: LD_VAR 0 1
68509: PPUSH
68510: CALL_OW 310
68514: NOT
68515: OR
68516: IFFALSE 68520
// exit ;
68518: GO 68610
// vehicle := IsInUnit ( driver ) ;
68520: LD_ADDR_VAR 0 3
68524: PUSH
68525: LD_VAR 0 1
68529: PPUSH
68530: CALL_OW 310
68534: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68535: LD_VAR 0 1
68539: PPUSH
68540: LD_STRING \
68542: PUSH
68543: LD_INT 0
68545: PUSH
68546: LD_INT 0
68548: PUSH
68549: LD_INT 0
68551: PUSH
68552: LD_INT 0
68554: PUSH
68555: LD_INT 0
68557: PUSH
68558: LD_INT 0
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: PUSH
68570: LD_STRING E
68572: PUSH
68573: LD_INT 0
68575: PUSH
68576: LD_INT 0
68578: PUSH
68579: LD_VAR 0 3
68583: PUSH
68584: LD_INT 0
68586: PUSH
68587: LD_INT 0
68589: PUSH
68590: LD_INT 0
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PPUSH
68606: CALL_OW 446
// end ;
68610: LD_VAR 0 2
68614: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68615: LD_INT 0
68617: PPUSH
68618: PPUSH
// if not driver or not IsInUnit ( driver ) then
68619: LD_VAR 0 1
68623: NOT
68624: PUSH
68625: LD_VAR 0 1
68629: PPUSH
68630: CALL_OW 310
68634: NOT
68635: OR
68636: IFFALSE 68640
// exit ;
68638: GO 68730
// vehicle := IsInUnit ( driver ) ;
68640: LD_ADDR_VAR 0 3
68644: PUSH
68645: LD_VAR 0 1
68649: PPUSH
68650: CALL_OW 310
68654: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68655: LD_VAR 0 1
68659: PPUSH
68660: LD_STRING \
68662: PUSH
68663: LD_INT 0
68665: PUSH
68666: LD_INT 0
68668: PUSH
68669: LD_INT 0
68671: PUSH
68672: LD_INT 0
68674: PUSH
68675: LD_INT 0
68677: PUSH
68678: LD_INT 0
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: PUSH
68690: LD_STRING E
68692: PUSH
68693: LD_INT 0
68695: PUSH
68696: LD_INT 0
68698: PUSH
68699: LD_VAR 0 3
68703: PUSH
68704: LD_INT 0
68706: PUSH
68707: LD_INT 0
68709: PUSH
68710: LD_INT 0
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: PPUSH
68726: CALL_OW 447
// end ;
68730: LD_VAR 0 2
68734: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68735: LD_INT 0
68737: PPUSH
68738: PPUSH
68739: PPUSH
// tmp := [ ] ;
68740: LD_ADDR_VAR 0 5
68744: PUSH
68745: EMPTY
68746: ST_TO_ADDR
// for i in units do
68747: LD_ADDR_VAR 0 4
68751: PUSH
68752: LD_VAR 0 1
68756: PUSH
68757: FOR_IN
68758: IFFALSE 68796
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68760: LD_ADDR_VAR 0 5
68764: PUSH
68765: LD_VAR 0 5
68769: PPUSH
68770: LD_VAR 0 5
68774: PUSH
68775: LD_INT 1
68777: PLUS
68778: PPUSH
68779: LD_VAR 0 4
68783: PPUSH
68784: CALL_OW 256
68788: PPUSH
68789: CALL_OW 2
68793: ST_TO_ADDR
68794: GO 68757
68796: POP
68797: POP
// if not tmp then
68798: LD_VAR 0 5
68802: NOT
68803: IFFALSE 68807
// exit ;
68805: GO 68855
// if asc then
68807: LD_VAR 0 2
68811: IFFALSE 68835
// result := SortListByListAsc ( units , tmp ) else
68813: LD_ADDR_VAR 0 3
68817: PUSH
68818: LD_VAR 0 1
68822: PPUSH
68823: LD_VAR 0 5
68827: PPUSH
68828: CALL_OW 76
68832: ST_TO_ADDR
68833: GO 68855
// result := SortListByListDesc ( units , tmp ) ;
68835: LD_ADDR_VAR 0 3
68839: PUSH
68840: LD_VAR 0 1
68844: PPUSH
68845: LD_VAR 0 5
68849: PPUSH
68850: CALL_OW 77
68854: ST_TO_ADDR
// end ;
68855: LD_VAR 0 3
68859: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68860: LD_INT 0
68862: PPUSH
68863: PPUSH
// task := GetTaskList ( mech ) ;
68864: LD_ADDR_VAR 0 4
68868: PUSH
68869: LD_VAR 0 1
68873: PPUSH
68874: CALL_OW 437
68878: ST_TO_ADDR
// if not task then
68879: LD_VAR 0 4
68883: NOT
68884: IFFALSE 68888
// exit ;
68886: GO 68930
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68888: LD_ADDR_VAR 0 3
68892: PUSH
68893: LD_VAR 0 4
68897: PUSH
68898: LD_INT 1
68900: ARRAY
68901: PUSH
68902: LD_INT 1
68904: ARRAY
68905: PUSH
68906: LD_STRING r
68908: EQUAL
68909: PUSH
68910: LD_VAR 0 4
68914: PUSH
68915: LD_INT 1
68917: ARRAY
68918: PUSH
68919: LD_INT 4
68921: ARRAY
68922: PUSH
68923: LD_VAR 0 2
68927: EQUAL
68928: AND
68929: ST_TO_ADDR
// end ;
68930: LD_VAR 0 3
68934: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68935: LD_INT 0
68937: PPUSH
// SetDir ( unit , d ) ;
68938: LD_VAR 0 1
68942: PPUSH
68943: LD_VAR 0 4
68947: PPUSH
68948: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68952: LD_VAR 0 1
68956: PPUSH
68957: LD_VAR 0 2
68961: PPUSH
68962: LD_VAR 0 3
68966: PPUSH
68967: LD_VAR 0 5
68971: PPUSH
68972: CALL_OW 48
// end ;
68976: LD_VAR 0 6
68980: RET
// export function ToNaturalNumber ( number ) ; begin
68981: LD_INT 0
68983: PPUSH
// result := number div 1 ;
68984: LD_ADDR_VAR 0 2
68988: PUSH
68989: LD_VAR 0 1
68993: PUSH
68994: LD_INT 1
68996: DIV
68997: ST_TO_ADDR
// if number < 0 then
68998: LD_VAR 0 1
69002: PUSH
69003: LD_INT 0
69005: LESS
69006: IFFALSE 69016
// result := 0 ;
69008: LD_ADDR_VAR 0 2
69012: PUSH
69013: LD_INT 0
69015: ST_TO_ADDR
// end ;
69016: LD_VAR 0 2
69020: RET
// export function SortByClass ( units , class ) ; var un ; begin
69021: LD_INT 0
69023: PPUSH
69024: PPUSH
// if not units or not class then
69025: LD_VAR 0 1
69029: NOT
69030: PUSH
69031: LD_VAR 0 2
69035: NOT
69036: OR
69037: IFFALSE 69041
// exit ;
69039: GO 69136
// result := [ ] ;
69041: LD_ADDR_VAR 0 3
69045: PUSH
69046: EMPTY
69047: ST_TO_ADDR
// for un in units do
69048: LD_ADDR_VAR 0 4
69052: PUSH
69053: LD_VAR 0 1
69057: PUSH
69058: FOR_IN
69059: IFFALSE 69134
// if GetClass ( un ) = class then
69061: LD_VAR 0 4
69065: PPUSH
69066: CALL_OW 257
69070: PUSH
69071: LD_VAR 0 2
69075: EQUAL
69076: IFFALSE 69103
// result := Insert ( result , 1 , un ) else
69078: LD_ADDR_VAR 0 3
69082: PUSH
69083: LD_VAR 0 3
69087: PPUSH
69088: LD_INT 1
69090: PPUSH
69091: LD_VAR 0 4
69095: PPUSH
69096: CALL_OW 2
69100: ST_TO_ADDR
69101: GO 69132
// result := Replace ( result , result + 1 , un ) ;
69103: LD_ADDR_VAR 0 3
69107: PUSH
69108: LD_VAR 0 3
69112: PPUSH
69113: LD_VAR 0 3
69117: PUSH
69118: LD_INT 1
69120: PLUS
69121: PPUSH
69122: LD_VAR 0 4
69126: PPUSH
69127: CALL_OW 1
69131: ST_TO_ADDR
69132: GO 69058
69134: POP
69135: POP
// end ;
69136: LD_VAR 0 3
69140: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69141: LD_INT 0
69143: PPUSH
69144: PPUSH
69145: PPUSH
69146: PPUSH
69147: PPUSH
69148: PPUSH
69149: PPUSH
// result := [ ] ;
69150: LD_ADDR_VAR 0 4
69154: PUSH
69155: EMPTY
69156: ST_TO_ADDR
// if x - r < 0 then
69157: LD_VAR 0 1
69161: PUSH
69162: LD_VAR 0 3
69166: MINUS
69167: PUSH
69168: LD_INT 0
69170: LESS
69171: IFFALSE 69183
// min_x := 0 else
69173: LD_ADDR_VAR 0 8
69177: PUSH
69178: LD_INT 0
69180: ST_TO_ADDR
69181: GO 69199
// min_x := x - r ;
69183: LD_ADDR_VAR 0 8
69187: PUSH
69188: LD_VAR 0 1
69192: PUSH
69193: LD_VAR 0 3
69197: MINUS
69198: ST_TO_ADDR
// if y - r < 0 then
69199: LD_VAR 0 2
69203: PUSH
69204: LD_VAR 0 3
69208: MINUS
69209: PUSH
69210: LD_INT 0
69212: LESS
69213: IFFALSE 69225
// min_y := 0 else
69215: LD_ADDR_VAR 0 7
69219: PUSH
69220: LD_INT 0
69222: ST_TO_ADDR
69223: GO 69241
// min_y := y - r ;
69225: LD_ADDR_VAR 0 7
69229: PUSH
69230: LD_VAR 0 2
69234: PUSH
69235: LD_VAR 0 3
69239: MINUS
69240: ST_TO_ADDR
// max_x := x + r ;
69241: LD_ADDR_VAR 0 9
69245: PUSH
69246: LD_VAR 0 1
69250: PUSH
69251: LD_VAR 0 3
69255: PLUS
69256: ST_TO_ADDR
// max_y := y + r ;
69257: LD_ADDR_VAR 0 10
69261: PUSH
69262: LD_VAR 0 2
69266: PUSH
69267: LD_VAR 0 3
69271: PLUS
69272: ST_TO_ADDR
// for _x = min_x to max_x do
69273: LD_ADDR_VAR 0 5
69277: PUSH
69278: DOUBLE
69279: LD_VAR 0 8
69283: DEC
69284: ST_TO_ADDR
69285: LD_VAR 0 9
69289: PUSH
69290: FOR_TO
69291: IFFALSE 69392
// for _y = min_y to max_y do
69293: LD_ADDR_VAR 0 6
69297: PUSH
69298: DOUBLE
69299: LD_VAR 0 7
69303: DEC
69304: ST_TO_ADDR
69305: LD_VAR 0 10
69309: PUSH
69310: FOR_TO
69311: IFFALSE 69388
// begin if not ValidHex ( _x , _y ) then
69313: LD_VAR 0 5
69317: PPUSH
69318: LD_VAR 0 6
69322: PPUSH
69323: CALL_OW 488
69327: NOT
69328: IFFALSE 69332
// continue ;
69330: GO 69310
// if GetResourceTypeXY ( _x , _y ) then
69332: LD_VAR 0 5
69336: PPUSH
69337: LD_VAR 0 6
69341: PPUSH
69342: CALL_OW 283
69346: IFFALSE 69386
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69348: LD_ADDR_VAR 0 4
69352: PUSH
69353: LD_VAR 0 4
69357: PPUSH
69358: LD_VAR 0 4
69362: PUSH
69363: LD_INT 1
69365: PLUS
69366: PPUSH
69367: LD_VAR 0 5
69371: PUSH
69372: LD_VAR 0 6
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PPUSH
69381: CALL_OW 1
69385: ST_TO_ADDR
// end ;
69386: GO 69310
69388: POP
69389: POP
69390: GO 69290
69392: POP
69393: POP
// end ;
69394: LD_VAR 0 4
69398: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69399: LD_INT 0
69401: PPUSH
69402: PPUSH
69403: PPUSH
69404: PPUSH
69405: PPUSH
69406: PPUSH
69407: PPUSH
69408: PPUSH
// if not units then
69409: LD_VAR 0 1
69413: NOT
69414: IFFALSE 69418
// exit ;
69416: GO 69944
// result := UnitFilter ( units , [ f_ok ] ) ;
69418: LD_ADDR_VAR 0 3
69422: PUSH
69423: LD_VAR 0 1
69427: PPUSH
69428: LD_INT 50
69430: PUSH
69431: EMPTY
69432: LIST
69433: PPUSH
69434: CALL_OW 72
69438: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69439: LD_ADDR_VAR 0 8
69443: PUSH
69444: LD_VAR 0 1
69448: PUSH
69449: LD_INT 1
69451: ARRAY
69452: PPUSH
69453: CALL_OW 255
69457: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69458: LD_ADDR_VAR 0 10
69462: PUSH
69463: LD_INT 29
69465: PUSH
69466: LD_EXP 49
69470: PUSH
69471: LD_INT 49
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: LIST
69478: ST_TO_ADDR
// if not result then
69479: LD_VAR 0 3
69483: NOT
69484: IFFALSE 69488
// exit ;
69486: GO 69944
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69488: LD_ADDR_VAR 0 5
69492: PUSH
69493: LD_INT 81
69495: PUSH
69496: LD_VAR 0 8
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PPUSH
69505: CALL_OW 69
69509: ST_TO_ADDR
// for i in result do
69510: LD_ADDR_VAR 0 4
69514: PUSH
69515: LD_VAR 0 3
69519: PUSH
69520: FOR_IN
69521: IFFALSE 69942
// begin tag := GetTag ( i ) + 1 ;
69523: LD_ADDR_VAR 0 9
69527: PUSH
69528: LD_VAR 0 4
69532: PPUSH
69533: CALL_OW 110
69537: PUSH
69538: LD_INT 1
69540: PLUS
69541: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69542: LD_ADDR_VAR 0 7
69546: PUSH
69547: LD_VAR 0 4
69551: PPUSH
69552: CALL_OW 250
69556: PPUSH
69557: LD_VAR 0 4
69561: PPUSH
69562: CALL_OW 251
69566: PPUSH
69567: LD_INT 6
69569: PPUSH
69570: CALL 69141 0 3
69574: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69575: LD_VAR 0 4
69579: PPUSH
69580: CALL_OW 247
69584: PUSH
69585: LD_INT 2
69587: EQUAL
69588: PUSH
69589: LD_VAR 0 7
69593: AND
69594: PUSH
69595: LD_VAR 0 4
69599: PPUSH
69600: CALL_OW 264
69604: PUSH
69605: LD_VAR 0 10
69609: IN
69610: NOT
69611: AND
69612: IFFALSE 69651
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69614: LD_VAR 0 4
69618: PPUSH
69619: LD_VAR 0 7
69623: PUSH
69624: LD_INT 1
69626: ARRAY
69627: PUSH
69628: LD_INT 1
69630: ARRAY
69631: PPUSH
69632: LD_VAR 0 7
69636: PUSH
69637: LD_INT 1
69639: ARRAY
69640: PUSH
69641: LD_INT 2
69643: ARRAY
69644: PPUSH
69645: CALL_OW 116
69649: GO 69940
// if path > tag then
69651: LD_VAR 0 2
69655: PUSH
69656: LD_VAR 0 9
69660: GREATER
69661: IFFALSE 69869
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69663: LD_ADDR_VAR 0 6
69667: PUSH
69668: LD_VAR 0 5
69672: PPUSH
69673: LD_INT 91
69675: PUSH
69676: LD_VAR 0 4
69680: PUSH
69681: LD_INT 8
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: LIST
69688: PPUSH
69689: CALL_OW 72
69693: ST_TO_ADDR
// if nearEnemy then
69694: LD_VAR 0 6
69698: IFFALSE 69767
// begin if GetWeapon ( i ) = ru_time_lapser then
69700: LD_VAR 0 4
69704: PPUSH
69705: CALL_OW 264
69709: PUSH
69710: LD_INT 49
69712: EQUAL
69713: IFFALSE 69741
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69715: LD_VAR 0 4
69719: PPUSH
69720: LD_VAR 0 6
69724: PPUSH
69725: LD_VAR 0 4
69729: PPUSH
69730: CALL_OW 74
69734: PPUSH
69735: CALL_OW 112
69739: GO 69765
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69741: LD_VAR 0 4
69745: PPUSH
69746: LD_VAR 0 6
69750: PPUSH
69751: LD_VAR 0 4
69755: PPUSH
69756: CALL_OW 74
69760: PPUSH
69761: CALL_OW 115
// end else
69765: GO 69867
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69767: LD_VAR 0 4
69771: PPUSH
69772: LD_VAR 0 2
69776: PUSH
69777: LD_VAR 0 9
69781: ARRAY
69782: PUSH
69783: LD_INT 1
69785: ARRAY
69786: PPUSH
69787: LD_VAR 0 2
69791: PUSH
69792: LD_VAR 0 9
69796: ARRAY
69797: PUSH
69798: LD_INT 2
69800: ARRAY
69801: PPUSH
69802: CALL_OW 297
69806: PUSH
69807: LD_INT 6
69809: GREATER
69810: IFFALSE 69853
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69812: LD_VAR 0 4
69816: PPUSH
69817: LD_VAR 0 2
69821: PUSH
69822: LD_VAR 0 9
69826: ARRAY
69827: PUSH
69828: LD_INT 1
69830: ARRAY
69831: PPUSH
69832: LD_VAR 0 2
69836: PUSH
69837: LD_VAR 0 9
69841: ARRAY
69842: PUSH
69843: LD_INT 2
69845: ARRAY
69846: PPUSH
69847: CALL_OW 114
69851: GO 69867
// SetTag ( i , tag ) ;
69853: LD_VAR 0 4
69857: PPUSH
69858: LD_VAR 0 9
69862: PPUSH
69863: CALL_OW 109
// end else
69867: GO 69940
// if enemy then
69869: LD_VAR 0 5
69873: IFFALSE 69940
// begin if GetWeapon ( i ) = ru_time_lapser then
69875: LD_VAR 0 4
69879: PPUSH
69880: CALL_OW 264
69884: PUSH
69885: LD_INT 49
69887: EQUAL
69888: IFFALSE 69916
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69890: LD_VAR 0 4
69894: PPUSH
69895: LD_VAR 0 5
69899: PPUSH
69900: LD_VAR 0 4
69904: PPUSH
69905: CALL_OW 74
69909: PPUSH
69910: CALL_OW 112
69914: GO 69940
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69916: LD_VAR 0 4
69920: PPUSH
69921: LD_VAR 0 5
69925: PPUSH
69926: LD_VAR 0 4
69930: PPUSH
69931: CALL_OW 74
69935: PPUSH
69936: CALL_OW 115
// end ; end ;
69940: GO 69520
69942: POP
69943: POP
// end ;
69944: LD_VAR 0 3
69948: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69949: LD_INT 0
69951: PPUSH
69952: PPUSH
69953: PPUSH
// if not unit or IsInUnit ( unit ) then
69954: LD_VAR 0 1
69958: NOT
69959: PUSH
69960: LD_VAR 0 1
69964: PPUSH
69965: CALL_OW 310
69969: OR
69970: IFFALSE 69974
// exit ;
69972: GO 70065
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69974: LD_ADDR_VAR 0 4
69978: PUSH
69979: LD_VAR 0 1
69983: PPUSH
69984: CALL_OW 250
69988: PPUSH
69989: LD_VAR 0 2
69993: PPUSH
69994: LD_INT 1
69996: PPUSH
69997: CALL_OW 272
70001: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70002: LD_ADDR_VAR 0 5
70006: PUSH
70007: LD_VAR 0 1
70011: PPUSH
70012: CALL_OW 251
70016: PPUSH
70017: LD_VAR 0 2
70021: PPUSH
70022: LD_INT 1
70024: PPUSH
70025: CALL_OW 273
70029: ST_TO_ADDR
// if ValidHex ( x , y ) then
70030: LD_VAR 0 4
70034: PPUSH
70035: LD_VAR 0 5
70039: PPUSH
70040: CALL_OW 488
70044: IFFALSE 70065
// ComTurnXY ( unit , x , y ) ;
70046: LD_VAR 0 1
70050: PPUSH
70051: LD_VAR 0 4
70055: PPUSH
70056: LD_VAR 0 5
70060: PPUSH
70061: CALL_OW 118
// end ;
70065: LD_VAR 0 3
70069: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70070: LD_INT 0
70072: PPUSH
70073: PPUSH
// result := false ;
70074: LD_ADDR_VAR 0 3
70078: PUSH
70079: LD_INT 0
70081: ST_TO_ADDR
// if not units then
70082: LD_VAR 0 2
70086: NOT
70087: IFFALSE 70091
// exit ;
70089: GO 70136
// for i in units do
70091: LD_ADDR_VAR 0 4
70095: PUSH
70096: LD_VAR 0 2
70100: PUSH
70101: FOR_IN
70102: IFFALSE 70134
// if See ( side , i ) then
70104: LD_VAR 0 1
70108: PPUSH
70109: LD_VAR 0 4
70113: PPUSH
70114: CALL_OW 292
70118: IFFALSE 70132
// begin result := true ;
70120: LD_ADDR_VAR 0 3
70124: PUSH
70125: LD_INT 1
70127: ST_TO_ADDR
// exit ;
70128: POP
70129: POP
70130: GO 70136
// end ;
70132: GO 70101
70134: POP
70135: POP
// end ;
70136: LD_VAR 0 3
70140: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70141: LD_INT 0
70143: PPUSH
70144: PPUSH
70145: PPUSH
70146: PPUSH
// if not unit or not points then
70147: LD_VAR 0 1
70151: NOT
70152: PUSH
70153: LD_VAR 0 2
70157: NOT
70158: OR
70159: IFFALSE 70163
// exit ;
70161: GO 70253
// dist := 99999 ;
70163: LD_ADDR_VAR 0 5
70167: PUSH
70168: LD_INT 99999
70170: ST_TO_ADDR
// for i in points do
70171: LD_ADDR_VAR 0 4
70175: PUSH
70176: LD_VAR 0 2
70180: PUSH
70181: FOR_IN
70182: IFFALSE 70251
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70184: LD_ADDR_VAR 0 6
70188: PUSH
70189: LD_VAR 0 1
70193: PPUSH
70194: LD_VAR 0 4
70198: PUSH
70199: LD_INT 1
70201: ARRAY
70202: PPUSH
70203: LD_VAR 0 4
70207: PUSH
70208: LD_INT 2
70210: ARRAY
70211: PPUSH
70212: CALL_OW 297
70216: ST_TO_ADDR
// if tmpDist < dist then
70217: LD_VAR 0 6
70221: PUSH
70222: LD_VAR 0 5
70226: LESS
70227: IFFALSE 70249
// begin result := i ;
70229: LD_ADDR_VAR 0 3
70233: PUSH
70234: LD_VAR 0 4
70238: ST_TO_ADDR
// dist := tmpDist ;
70239: LD_ADDR_VAR 0 5
70243: PUSH
70244: LD_VAR 0 6
70248: ST_TO_ADDR
// end ; end ;
70249: GO 70181
70251: POP
70252: POP
// end ;
70253: LD_VAR 0 3
70257: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70258: LD_INT 0
70260: PPUSH
// uc_side := side ;
70261: LD_ADDR_OWVAR 20
70265: PUSH
70266: LD_VAR 0 1
70270: ST_TO_ADDR
// uc_nation := 3 ;
70271: LD_ADDR_OWVAR 21
70275: PUSH
70276: LD_INT 3
70278: ST_TO_ADDR
// vc_chassis := 25 ;
70279: LD_ADDR_OWVAR 37
70283: PUSH
70284: LD_INT 25
70286: ST_TO_ADDR
// vc_engine := engine_siberite ;
70287: LD_ADDR_OWVAR 39
70291: PUSH
70292: LD_INT 3
70294: ST_TO_ADDR
// vc_control := control_computer ;
70295: LD_ADDR_OWVAR 38
70299: PUSH
70300: LD_INT 3
70302: ST_TO_ADDR
// vc_weapon := 59 ;
70303: LD_ADDR_OWVAR 40
70307: PUSH
70308: LD_INT 59
70310: ST_TO_ADDR
// result := CreateVehicle ;
70311: LD_ADDR_VAR 0 5
70315: PUSH
70316: CALL_OW 45
70320: ST_TO_ADDR
// SetDir ( result , d ) ;
70321: LD_VAR 0 5
70325: PPUSH
70326: LD_VAR 0 4
70330: PPUSH
70331: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70335: LD_VAR 0 5
70339: PPUSH
70340: LD_VAR 0 2
70344: PPUSH
70345: LD_VAR 0 3
70349: PPUSH
70350: LD_INT 0
70352: PPUSH
70353: CALL_OW 48
// end ;
70357: LD_VAR 0 5
70361: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70362: LD_INT 0
70364: PPUSH
70365: PPUSH
70366: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70367: LD_ADDR_VAR 0 2
70371: PUSH
70372: LD_INT 0
70374: PUSH
70375: LD_INT 0
70377: PUSH
70378: LD_INT 0
70380: PUSH
70381: LD_INT 0
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70390: LD_VAR 0 1
70394: NOT
70395: PUSH
70396: LD_VAR 0 1
70400: PPUSH
70401: CALL_OW 264
70405: PUSH
70406: LD_INT 12
70408: PUSH
70409: LD_INT 51
70411: PUSH
70412: LD_INT 32
70414: PUSH
70415: LD_EXP 46
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: LIST
70424: LIST
70425: IN
70426: NOT
70427: OR
70428: IFFALSE 70432
// exit ;
70430: GO 70530
// for i := 1 to 3 do
70432: LD_ADDR_VAR 0 3
70436: PUSH
70437: DOUBLE
70438: LD_INT 1
70440: DEC
70441: ST_TO_ADDR
70442: LD_INT 3
70444: PUSH
70445: FOR_TO
70446: IFFALSE 70528
// begin tmp := GetCargo ( cargo , i ) ;
70448: LD_ADDR_VAR 0 4
70452: PUSH
70453: LD_VAR 0 1
70457: PPUSH
70458: LD_VAR 0 3
70462: PPUSH
70463: CALL_OW 289
70467: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70468: LD_ADDR_VAR 0 2
70472: PUSH
70473: LD_VAR 0 2
70477: PPUSH
70478: LD_VAR 0 3
70482: PPUSH
70483: LD_VAR 0 4
70487: PPUSH
70488: CALL_OW 1
70492: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70493: LD_ADDR_VAR 0 2
70497: PUSH
70498: LD_VAR 0 2
70502: PPUSH
70503: LD_INT 4
70505: PPUSH
70506: LD_VAR 0 2
70510: PUSH
70511: LD_INT 4
70513: ARRAY
70514: PUSH
70515: LD_VAR 0 4
70519: PLUS
70520: PPUSH
70521: CALL_OW 1
70525: ST_TO_ADDR
// end ;
70526: GO 70445
70528: POP
70529: POP
// end ;
70530: LD_VAR 0 2
70534: RET
// export function Length ( array ) ; begin
70535: LD_INT 0
70537: PPUSH
// result := array + 0 ;
70538: LD_ADDR_VAR 0 2
70542: PUSH
70543: LD_VAR 0 1
70547: PUSH
70548: LD_INT 0
70550: PLUS
70551: ST_TO_ADDR
// end ; end_of_file
70552: LD_VAR 0 2
70556: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70557: LD_VAR 0 1
70561: PUSH
70562: LD_INT 200
70564: DOUBLE
70565: GREATEREQUAL
70566: IFFALSE 70574
70568: LD_INT 299
70570: DOUBLE
70571: LESSEQUAL
70572: IFTRUE 70576
70574: GO 70608
70576: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70577: LD_VAR 0 1
70581: PPUSH
70582: LD_VAR 0 2
70586: PPUSH
70587: LD_VAR 0 3
70591: PPUSH
70592: LD_VAR 0 4
70596: PPUSH
70597: LD_VAR 0 5
70601: PPUSH
70602: CALL 25707 0 5
70606: GO 70685
70608: LD_INT 300
70610: DOUBLE
70611: GREATEREQUAL
70612: IFFALSE 70620
70614: LD_INT 399
70616: DOUBLE
70617: LESSEQUAL
70618: IFTRUE 70622
70620: GO 70684
70622: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70623: LD_VAR 0 1
70627: PPUSH
70628: LD_VAR 0 2
70632: PPUSH
70633: LD_VAR 0 3
70637: PPUSH
70638: LD_VAR 0 4
70642: PPUSH
70643: LD_VAR 0 5
70647: PPUSH
70648: LD_VAR 0 6
70652: PPUSH
70653: LD_VAR 0 7
70657: PPUSH
70658: LD_VAR 0 8
70662: PPUSH
70663: LD_VAR 0 9
70667: PPUSH
70668: LD_VAR 0 10
70672: PPUSH
70673: LD_VAR 0 11
70677: PPUSH
70678: CALL 23349 0 11
70682: GO 70685
70684: POP
// end ;
70685: PPOPN 11
70687: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70688: LD_VAR 0 1
70692: PPUSH
70693: LD_VAR 0 2
70697: PPUSH
70698: LD_VAR 0 3
70702: PPUSH
70703: LD_VAR 0 4
70707: PPUSH
70708: LD_VAR 0 5
70712: PPUSH
70713: CALL 25443 0 5
// end ; end_of_file
70717: PPOPN 5
70719: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70720: LD_VAR 0 1
70724: PPUSH
70725: LD_VAR 0 2
70729: PPUSH
70730: LD_VAR 0 3
70734: PPUSH
70735: LD_VAR 0 4
70739: PPUSH
70740: LD_VAR 0 5
70744: PPUSH
70745: LD_VAR 0 6
70749: PPUSH
70750: CALL 11042 0 6
// end ;
70754: PPOPN 6
70756: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70757: LD_INT 0
70759: PPUSH
// begin if not units then
70760: LD_VAR 0 1
70764: NOT
70765: IFFALSE 70769
// exit ;
70767: GO 70857
// if p1 = 1 then
70769: LD_VAR 0 2
70773: PUSH
70774: LD_INT 1
70776: EQUAL
70777: IFFALSE 70857
// begin if p2 = 1 then
70779: LD_VAR 0 3
70783: PUSH
70784: LD_INT 1
70786: EQUAL
70787: IFFALSE 70818
// begin for i in units do
70789: LD_ADDR_VAR 0 7
70793: PUSH
70794: LD_VAR 0 1
70798: PUSH
70799: FOR_IN
70800: IFFALSE 70816
// begin SetUnitAttackType ( i , 3 ) ;
70802: LD_VAR 0 7
70806: PPUSH
70807: LD_INT 3
70809: PPUSH
70810: CALL_OW 603
// end ;
70814: GO 70799
70816: POP
70817: POP
// end ; if p2 = 2 then
70818: LD_VAR 0 3
70822: PUSH
70823: LD_INT 2
70825: EQUAL
70826: IFFALSE 70857
// begin for i in units do
70828: LD_ADDR_VAR 0 7
70832: PUSH
70833: LD_VAR 0 1
70837: PUSH
70838: FOR_IN
70839: IFFALSE 70855
// begin SetUnitAttackType ( i , 1 ) ;
70841: LD_VAR 0 7
70845: PPUSH
70846: LD_INT 1
70848: PPUSH
70849: CALL_OW 603
// end ;
70853: GO 70838
70855: POP
70856: POP
// end ; end ; end ;
70857: PPOPN 7
70859: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70860: CALL 11017 0 0
// end ;
70864: PPOPN 1
70866: END
