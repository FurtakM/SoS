// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , DeltaDoctor ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; export eventArabianAttack , eventRussianAttack , eventContaminate ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak := 0 ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus := 0 ;
  23: LD_ADDR_EXP 29
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot := 0 ;
  31: LD_ADDR_EXP 31
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched := 0 ;
  39: LD_ADDR_EXP 30
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter := 0 ;
  47: LD_ADDR_EXP 33
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits := [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 32
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter := 0 ;
  84: LD_ADDR_EXP 34
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 43
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources := [ ] ;
 100: LD_ADDR_EXP 25
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles := [ ] ;
 107: LD_ADDR_EXP 26
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 := 0 ;
 114: LD_ADDR_EXP 36
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 := 0 ;
 122: LD_ADDR_EXP 37
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 := 0 ;
 130: LD_ADDR_EXP 38
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 := 0 ;
 138: LD_ADDR_EXP 39
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 := 0 ;
 146: LD_ADDR_EXP 40
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// eventArabianAttack := 1 ;
 154: LD_ADDR_EXP 44
 158: PUSH
 159: LD_INT 1
 161: ST_TO_ADDR
// eventRussianAttack := 2 ;
 162: LD_ADDR_EXP 45
 166: PUSH
 167: LD_INT 2
 169: ST_TO_ADDR
// eventContaminate := 3 ;
 170: LD_ADDR_EXP 46
 174: PUSH
 175: LD_INT 3
 177: ST_TO_ADDR
// mission_prefix := 13f_ ;
 178: LD_ADDR_EXP 35
 182: PUSH
 183: LD_STRING 13f_
 185: ST_TO_ADDR
// debugMode := 0 ;
 186: LD_ADDR_EXP 41
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// achivCounter := 0 ;
 194: LD_ADDR_EXP 42
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// if Difficulty = 1 then
 202: LD_OWVAR 67
 206: PUSH
 207: LD_INT 1
 209: EQUAL
 210: IFFALSE 219
// RemoveEnvironmentArea ( oilBlockArea ) ;
 212: LD_INT 15
 214: PPUSH
 215: CALL_OW 355
// if Difficulty < 4 then
 219: LD_OWVAR 67
 223: PUSH
 224: LD_INT 4
 226: LESS
 227: IFFALSE 236
// RemoveEnvironmentArea ( sibBlockArea ) ;
 229: LD_INT 18
 231: PPUSH
 232: CALL_OW 355
// PrepareVehicles ;
 236: CALL 1245 0 0
// PrepareHeroes ;
 240: CALL 477 0 0
// PrepareAmericansRandom ;
 244: CALL 1149 0 0
// PrepareDifficulty ;
 248: CALL 8539 0 0
// Action ;
 252: CALL 5399 0 0
// end ;
 256: END
// every 0 0$1 trigger debugMode do var i , j ;
 257: LD_EXP 41
 261: IFFALSE 432
 263: GO 265
 265: DISABLE
 266: LD_INT 0
 268: PPUSH
 269: PPUSH
// begin enable ;
 270: ENABLE
// FogOff ( true ) ;
 271: LD_INT 1
 273: PPUSH
 274: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 278: LD_ADDR_VAR 0 1
 282: PUSH
 283: LD_INT 22
 285: PUSH
 286: LD_INT 1
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: LD_INT 21
 295: PUSH
 296: LD_INT 1
 298: PUSH
 299: EMPTY
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 329
// SetLives ( i , 1000 ) ;
 315: LD_VAR 0 1
 319: PPUSH
 320: LD_INT 1000
 322: PPUSH
 323: CALL_OW 234
 327: GO 312
 329: POP
 330: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 331: LD_ADDR_VAR 0 1
 335: PUSH
 336: LD_INT 22
 338: PUSH
 339: LD_INT 1
 341: PUSH
 342: EMPTY
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: LD_INT 30
 351: PUSH
 352: LD_INT 0
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 30
 361: PUSH
 362: LD_INT 1
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: PPUSH
 378: CALL_OW 69
 382: PUSH
 383: FOR_IN
 384: IFFALSE 430
// for j := 1 to 3 do
 386: LD_ADDR_VAR 0 2
 390: PUSH
 391: DOUBLE
 392: LD_INT 1
 394: DEC
 395: ST_TO_ADDR
 396: LD_INT 3
 398: PUSH
 399: FOR_TO
 400: IFFALSE 426
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 274
 411: PPUSH
 412: LD_VAR 0 2
 416: PPUSH
 417: LD_INT 9999
 419: PPUSH
 420: CALL_OW 277
 424: GO 399
 426: POP
 427: POP
 428: GO 383
 430: POP
 431: POP
// end ;
 432: PPOPN 2
 434: END
// every 0 0$1 trigger achivCounter >= 2 do
 435: LD_EXP 42
 439: PUSH
 440: LD_INT 2
 442: GREATEREQUAL
 443: IFFALSE 455
 445: GO 447
 447: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 448: LD_STRING ACH_REMOTE
 450: PPUSH
 451: CALL_OW 543
 455: END
// every 0 0$1 trigger destroyCounter >= 30 do
 456: LD_EXP 43
 460: PUSH
 461: LD_INT 30
 463: GREATEREQUAL
 464: IFFALSE 476
 466: GO 468
 468: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 469: LD_STRING ACH_DEFMASTER
 471: PPUSH
 472: CALL_OW 543
 476: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 477: LD_INT 0
 479: PPUSH
 480: PPUSH
 481: PPUSH
 482: PPUSH
// uc_side = 1 ;
 483: LD_ADDR_OWVAR 20
 487: PUSH
 488: LD_INT 1
 490: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 491: LD_ADDR_EXP 1
 495: PUSH
 496: LD_STRING JMM
 498: PPUSH
 499: LD_EXP 41
 503: NOT
 504: PPUSH
 505: LD_STRING 13c_
 507: PPUSH
 508: CALL 32420 0 3
 512: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 513: LD_ADDR_EXP 2
 517: PUSH
 518: LD_STRING Stevens
 520: PPUSH
 521: LD_EXP 41
 525: NOT
 526: PPUSH
 527: LD_STRING 13c_
 529: PPUSH
 530: CALL 32420 0 3
 534: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 535: LD_ADDR_EXP 3
 539: PUSH
 540: LD_STRING Lisa
 542: PPUSH
 543: LD_EXP 41
 547: NOT
 548: PPUSH
 549: LD_STRING 13c_
 551: PPUSH
 552: CALL 32420 0 3
 556: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 557: LD_ADDR_EXP 4
 561: PUSH
 562: LD_STRING Donaldson
 564: PPUSH
 565: LD_EXP 41
 569: NOT
 570: PPUSH
 571: LD_STRING 13c_
 573: PPUSH
 574: CALL 32420 0 3
 578: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 579: LD_ADDR_EXP 5
 583: PUSH
 584: LD_STRING Bobby
 586: PPUSH
 587: LD_EXP 41
 591: NOT
 592: PPUSH
 593: LD_STRING 13c_
 595: PPUSH
 596: CALL 32420 0 3
 600: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 601: LD_ADDR_EXP 6
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_EXP 41
 613: NOT
 614: PPUSH
 615: LD_STRING 13c_
 617: PPUSH
 618: CALL 32420 0 3
 622: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 623: LD_ADDR_EXP 7
 627: PUSH
 628: LD_STRING Denis
 630: PPUSH
 631: LD_EXP 41
 635: NOT
 636: PPUSH
 637: LD_STRING 13c_
 639: PPUSH
 640: CALL 32420 0 3
 644: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 645: LD_ADDR_EXP 8
 649: PUSH
 650: LD_STRING Brown
 652: PPUSH
 653: LD_EXP 41
 657: NOT
 658: PPUSH
 659: LD_STRING 13c_
 661: PPUSH
 662: CALL 32420 0 3
 666: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true , 13c_ ) ;
 667: LD_ADDR_EXP 9
 671: PUSH
 672: LD_STRING Gladstone
 674: PPUSH
 675: LD_INT 1
 677: PPUSH
 678: LD_STRING 13c_
 680: PPUSH
 681: CALL 32420 0 3
 685: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true , 13c_ ) ;
 686: LD_ADDR_EXP 10
 690: PUSH
 691: LD_STRING Houten
 693: PPUSH
 694: LD_INT 1
 696: PPUSH
 697: LD_STRING 13c_
 699: PPUSH
 700: CALL 32420 0 3
 704: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , true , 13c_ ) ;
 705: LD_ADDR_EXP 11
 709: PUSH
 710: LD_STRING Cornel
 712: PPUSH
 713: LD_INT 1
 715: PPUSH
 716: LD_STRING 13c_
 718: PPUSH
 719: CALL 32420 0 3
 723: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true , 13c_ ) ;
 724: LD_ADDR_EXP 12
 728: PUSH
 729: LD_STRING Gary
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_STRING 13c_
 737: PPUSH
 738: CALL 32420 0 3
 742: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 13c_ ) ;
 743: LD_ADDR_EXP 13
 747: PUSH
 748: LD_STRING Frank
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_STRING 13c_
 756: PPUSH
 757: CALL 32420 0 3
 761: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true , 13c_ ) ;
 762: LD_ADDR_EXP 14
 766: PUSH
 767: LD_STRING Kikuchi
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: LD_STRING 13c_
 775: PPUSH
 776: CALL 32420 0 3
 780: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , true , 13c_ ) ;
 781: LD_ADDR_EXP 15
 785: PUSH
 786: LD_STRING DeltaDoctor
 788: PPUSH
 789: LD_INT 1
 791: PPUSH
 792: LD_STRING 13c_
 794: PPUSH
 795: CALL 32420 0 3
 799: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 800: LD_ADDR_EXP 16
 804: PUSH
 805: LD_STRING Powell
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: LD_STRING 
 813: PPUSH
 814: CALL 32420 0 3
 818: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , DeltaDoctor ] ;
 819: LD_ADDR_VAR 0 2
 823: PUSH
 824: LD_EXP 1
 828: PUSH
 829: LD_EXP 2
 833: PUSH
 834: LD_EXP 3
 838: PUSH
 839: LD_EXP 4
 843: PUSH
 844: LD_EXP 5
 848: PUSH
 849: LD_EXP 6
 853: PUSH
 854: LD_EXP 7
 858: PUSH
 859: LD_EXP 8
 863: PUSH
 864: LD_EXP 9
 868: PUSH
 869: LD_EXP 10
 873: PUSH
 874: LD_EXP 11
 878: PUSH
 879: LD_EXP 12
 883: PUSH
 884: LD_EXP 13
 888: PUSH
 889: LD_EXP 14
 893: PUSH
 894: LD_EXP 15
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 916: LD_ADDR_VAR 0 3
 920: PUSH
 921: LD_INT 22
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 33
 933: PUSH
 934: LD_INT 1
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 21
 943: PUSH
 944: LD_INT 2
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: LIST
 955: PPUSH
 956: CALL_OW 69
 960: ST_TO_ADDR
// for i = tmp downto 1 do
 961: LD_ADDR_VAR 0 4
 965: PUSH
 966: DOUBLE
 967: LD_VAR 0 2
 971: INC
 972: ST_TO_ADDR
 973: LD_INT 1
 975: PUSH
 976: FOR_DOWNTO
 977: IFFALSE 1014
// if not tmp [ i ] then
 979: LD_VAR 0 2
 983: PUSH
 984: LD_VAR 0 4
 988: ARRAY
 989: NOT
 990: IFFALSE 1012
// tmp := Delete ( tmp , i ) ;
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: LD_VAR 0 2
1001: PPUSH
1002: LD_VAR 0 4
1006: PPUSH
1007: CALL_OW 3
1011: ST_TO_ADDR
1012: GO 976
1014: POP
1015: POP
// for i = 1 to tmp do
1016: LD_ADDR_VAR 0 4
1020: PUSH
1021: DOUBLE
1022: LD_INT 1
1024: DEC
1025: ST_TO_ADDR
1026: LD_VAR 0 2
1030: PUSH
1031: FOR_TO
1032: IFFALSE 1062
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1034: LD_VAR 0 2
1038: PUSH
1039: LD_VAR 0 4
1043: ARRAY
1044: PPUSH
1045: LD_VAR 0 3
1049: PUSH
1050: LD_VAR 0 4
1054: ARRAY
1055: PPUSH
1056: CALL_OW 52
1060: GO 1031
1062: POP
1063: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1064: LD_INT 22
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PUSH
1074: LD_INT 25
1076: PUSH
1077: LD_INT 2
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PPUSH
1088: CALL_OW 69
1092: PUSH
1093: LD_INT 0
1095: EQUAL
1096: PUSH
1097: LD_INT 22
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: PUSH
1107: LD_INT 34
1109: PUSH
1110: LD_INT 13
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PPUSH
1121: CALL_OW 69
1125: PUSH
1126: LD_INT 0
1128: EQUAL
1129: AND
1130: IFFALSE 1144
// SetClass ( JMM , 2 ) ;
1132: LD_EXP 1
1136: PPUSH
1137: LD_INT 2
1139: PPUSH
1140: CALL_OW 336
// end ;
1144: LD_VAR 0 1
1148: RET
// export function PrepareAmericansRandom ; var i ; begin
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
// uc_side = 1 ;
1153: LD_ADDR_OWVAR 20
1157: PUSH
1158: LD_INT 1
1160: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1161: LD_ADDR_EXP 17
1165: PUSH
1166: LD_STRING 13c_others
1168: PPUSH
1169: CALL_OW 31
1173: ST_TO_ADDR
// for i in others13 do
1174: LD_ADDR_VAR 0 2
1178: PUSH
1179: LD_EXP 17
1183: PUSH
1184: FOR_IN
1185: IFFALSE 1238
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1187: LD_VAR 0 2
1191: PPUSH
1192: LD_INT 22
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: PUSH
1202: LD_INT 21
1204: PUSH
1205: LD_INT 2
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 58
1214: PUSH
1215: EMPTY
1216: LIST
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: LIST
1222: PPUSH
1223: CALL_OW 69
1227: PUSH
1228: LD_INT 1
1230: ARRAY
1231: PPUSH
1232: CALL_OW 52
1236: GO 1184
1238: POP
1239: POP
// end ;
1240: LD_VAR 0 1
1244: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1245: LD_INT 0
1247: PPUSH
1248: PPUSH
1249: PPUSH
1250: PPUSH
1251: PPUSH
1252: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_STRING 13_VehiclesIn13_1
1260: PPUSH
1261: LD_INT 1
1263: PUSH
1264: LD_INT 5
1266: PUSH
1267: LD_INT 3
1269: PUSH
1270: LD_INT 1
1272: PUSH
1273: LD_INT 6
1275: PUSH
1276: LD_INT 100
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: PUSH
1287: LD_INT 1
1289: PUSH
1290: LD_INT 5
1292: PUSH
1293: LD_INT 3
1295: PUSH
1296: LD_INT 1
1298: PUSH
1299: LD_INT 6
1301: PUSH
1302: LD_INT 100
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: PUSH
1313: LD_INT 1
1315: PUSH
1316: LD_INT 5
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: LD_INT 1
1324: PUSH
1325: LD_INT 6
1327: PUSH
1328: LD_INT 100
1330: PUSH
1331: EMPTY
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 1
1341: PUSH
1342: LD_INT 5
1344: PUSH
1345: LD_INT 3
1347: PUSH
1348: LD_INT 1
1350: PUSH
1351: LD_INT 6
1353: PUSH
1354: LD_INT 100
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: PUSH
1365: LD_INT 1
1367: PUSH
1368: LD_INT 5
1370: PUSH
1371: LD_INT 3
1373: PUSH
1374: LD_INT 1
1376: PUSH
1377: LD_INT 6
1379: PUSH
1380: LD_INT 100
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: LD_INT 5
1396: PUSH
1397: LD_INT 3
1399: PUSH
1400: LD_INT 1
1402: PUSH
1403: LD_INT 6
1405: PUSH
1406: LD_INT 100
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 1
1419: PUSH
1420: LD_INT 5
1422: PUSH
1423: LD_INT 3
1425: PUSH
1426: LD_INT 1
1428: PUSH
1429: LD_INT 6
1431: PUSH
1432: LD_INT 100
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_INT 1
1445: PUSH
1446: LD_INT 5
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 1
1454: PUSH
1455: LD_INT 6
1457: PUSH
1458: LD_INT 100
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: PPUSH
1479: CALL_OW 30
1483: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1484: LD_ADDR_EXP 25
1488: PUSH
1489: LD_STRING 13_ResourcesInCargo13_1
1491: PPUSH
1492: EMPTY
1493: PPUSH
1494: CALL_OW 30
1498: ST_TO_ADDR
// cargoList = [ ] ;
1499: LD_ADDR_VAR 0 6
1503: PUSH
1504: EMPTY
1505: ST_TO_ADDR
// uc_side = 1 ;
1506: LD_ADDR_OWVAR 20
1510: PUSH
1511: LD_INT 1
1513: ST_TO_ADDR
// if vehicles then
1514: LD_VAR 0 5
1518: IFFALSE 1865
// begin for i := 1 to vehicles do
1520: LD_ADDR_VAR 0 2
1524: PUSH
1525: DOUBLE
1526: LD_INT 1
1528: DEC
1529: ST_TO_ADDR
1530: LD_VAR 0 5
1534: PUSH
1535: FOR_TO
1536: IFFALSE 1685
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1538: LD_ADDR_OWVAR 21
1542: PUSH
1543: LD_VAR 0 5
1547: PUSH
1548: LD_VAR 0 2
1552: ARRAY
1553: PUSH
1554: LD_INT 1
1556: ARRAY
1557: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1558: LD_ADDR_OWVAR 37
1562: PUSH
1563: LD_VAR 0 5
1567: PUSH
1568: LD_VAR 0 2
1572: ARRAY
1573: PUSH
1574: LD_INT 2
1576: ARRAY
1577: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1578: LD_ADDR_OWVAR 39
1582: PUSH
1583: LD_VAR 0 5
1587: PUSH
1588: LD_VAR 0 2
1592: ARRAY
1593: PUSH
1594: LD_INT 3
1596: ARRAY
1597: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1598: LD_ADDR_OWVAR 38
1602: PUSH
1603: LD_VAR 0 5
1607: PUSH
1608: LD_VAR 0 2
1612: ARRAY
1613: PUSH
1614: LD_INT 4
1616: ARRAY
1617: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1618: LD_ADDR_OWVAR 40
1622: PUSH
1623: LD_VAR 0 5
1627: PUSH
1628: LD_VAR 0 2
1632: ARRAY
1633: PUSH
1634: LD_INT 5
1636: ARRAY
1637: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1638: LD_ADDR_OWVAR 41
1642: PUSH
1643: LD_INT 40
1645: ST_TO_ADDR
// veh = CreateVehicle ;
1646: LD_ADDR_VAR 0 4
1650: PUSH
1651: CALL_OW 45
1655: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1656: LD_VAR 0 4
1660: PPUSH
1661: LD_INT 1
1663: PPUSH
1664: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1668: LD_VAR 0 4
1672: PPUSH
1673: LD_INT 2
1675: PPUSH
1676: LD_INT 0
1678: PPUSH
1679: CALL_OW 49
// end ;
1683: GO 1535
1685: POP
1686: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1687: LD_ADDR_VAR 0 6
1691: PUSH
1692: LD_INT 22
1694: PUSH
1695: LD_INT 1
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: LD_INT 21
1704: PUSH
1705: LD_INT 2
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PUSH
1712: LD_INT 34
1714: PUSH
1715: LD_INT 12
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: LIST
1726: PPUSH
1727: CALL_OW 69
1731: ST_TO_ADDR
// if cargoList then
1732: LD_VAR 0 6
1736: IFFALSE 1865
// for i = 1 to cargoList do
1738: LD_ADDR_VAR 0 2
1742: PUSH
1743: DOUBLE
1744: LD_INT 1
1746: DEC
1747: ST_TO_ADDR
1748: LD_VAR 0 6
1752: PUSH
1753: FOR_TO
1754: IFFALSE 1863
// begin if resources then
1756: LD_EXP 25
1760: IFFALSE 1861
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1762: LD_VAR 0 6
1766: PUSH
1767: LD_VAR 0 2
1771: ARRAY
1772: PPUSH
1773: LD_INT 1
1775: PPUSH
1776: LD_EXP 25
1780: PUSH
1781: LD_VAR 0 2
1785: ARRAY
1786: PUSH
1787: LD_INT 1
1789: ARRAY
1790: PPUSH
1791: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1795: LD_VAR 0 6
1799: PUSH
1800: LD_VAR 0 2
1804: ARRAY
1805: PPUSH
1806: LD_INT 2
1808: PPUSH
1809: LD_EXP 25
1813: PUSH
1814: LD_VAR 0 2
1818: ARRAY
1819: PUSH
1820: LD_INT 2
1822: ARRAY
1823: PPUSH
1824: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1828: LD_VAR 0 6
1832: PUSH
1833: LD_VAR 0 2
1837: ARRAY
1838: PPUSH
1839: LD_INT 3
1841: PPUSH
1842: LD_EXP 25
1846: PUSH
1847: LD_VAR 0 2
1851: ARRAY
1852: PUSH
1853: LD_INT 3
1855: ARRAY
1856: PPUSH
1857: CALL_OW 291
// end ; end ;
1861: GO 1753
1863: POP
1864: POP
// end ; end ;
1865: LD_VAR 0 1
1869: RET
// export function PowellSupport ; var i , veh , un ; begin
1870: LD_INT 0
1872: PPUSH
1873: PPUSH
1874: PPUSH
1875: PPUSH
// for i := 1 to [ 4 , 3 , 2 , 2 ] [ Difficulty ] do
1876: LD_ADDR_VAR 0 2
1880: PUSH
1881: DOUBLE
1882: LD_INT 1
1884: DEC
1885: ST_TO_ADDR
1886: LD_INT 4
1888: PUSH
1889: LD_INT 3
1891: PUSH
1892: LD_INT 2
1894: PUSH
1895: LD_INT 2
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: LD_OWVAR 67
1908: ARRAY
1909: PUSH
1910: FOR_TO
1911: IFFALSE 2175
// begin uc_nation := 1 ;
1913: LD_ADDR_OWVAR 21
1917: PUSH
1918: LD_INT 1
1920: ST_TO_ADDR
// uc_side := 1 ;
1921: LD_ADDR_OWVAR 20
1925: PUSH
1926: LD_INT 1
1928: ST_TO_ADDR
// vc_engine := engine_siberite ;
1929: LD_ADDR_OWVAR 39
1933: PUSH
1934: LD_INT 3
1936: ST_TO_ADDR
// vc_control := control_manual ;
1937: LD_ADDR_OWVAR 38
1941: PUSH
1942: LD_INT 1
1944: ST_TO_ADDR
// vc_weapon := [ us_laser , us_heavy_gun , us_laser , us_double_gun , us_double_gun ] [ Difficulty + rand ( 0 , 1 ) ] ;
1945: LD_ADDR_OWVAR 40
1949: PUSH
1950: LD_INT 9
1952: PUSH
1953: LD_INT 6
1955: PUSH
1956: LD_INT 9
1958: PUSH
1959: LD_INT 5
1961: PUSH
1962: LD_INT 5
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: PUSH
1972: LD_OWVAR 67
1976: PUSH
1977: LD_INT 0
1979: PPUSH
1980: LD_INT 1
1982: PPUSH
1983: CALL_OW 12
1987: PLUS
1988: ARRAY
1989: ST_TO_ADDR
// if vc_weapon = us_heavy_gun then
1990: LD_OWVAR 40
1994: PUSH
1995: LD_INT 6
1997: EQUAL
1998: IFFALSE 2027
// vc_chassis := [ us_morphling , us_heavy_tracked , us_heavy_tracked ] [ Difficulty ] else
2000: LD_ADDR_OWVAR 37
2004: PUSH
2005: LD_INT 5
2007: PUSH
2008: LD_INT 4
2010: PUSH
2011: LD_INT 4
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: PUSH
2019: LD_OWVAR 67
2023: ARRAY
2024: ST_TO_ADDR
2025: GO 2062
// vc_chassis := [ us_morphling , us_heavy_tracked , us_medium_tracked , us_medium_tracked ] [ rand ( 1 , 4 ) ] ;
2027: LD_ADDR_OWVAR 37
2031: PUSH
2032: LD_INT 5
2034: PUSH
2035: LD_INT 4
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: LD_INT 3
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: LD_INT 1
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: CALL_OW 12
2060: ARRAY
2061: ST_TO_ADDR
// veh = CreateVehicle ;
2062: LD_ADDR_VAR 0 3
2066: PUSH
2067: CALL_OW 45
2071: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2072: LD_VAR 0 3
2076: PPUSH
2077: LD_INT 2
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// SetDir ( veh , 1 ) ;
2087: LD_VAR 0 3
2091: PPUSH
2092: LD_INT 1
2094: PPUSH
2095: CALL_OW 233
// hc_gallery :=  ;
2099: LD_ADDR_OWVAR 33
2103: PUSH
2104: LD_STRING 
2106: ST_TO_ADDR
// hc_name :=  ;
2107: LD_ADDR_OWVAR 26
2111: PUSH
2112: LD_STRING 
2114: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2115: LD_INT 0
2117: PPUSH
2118: LD_INT 3
2120: PPUSH
2121: LD_INT 9
2123: PUSH
2124: LD_INT 8
2126: PUSH
2127: LD_INT 8
2129: PUSH
2130: LD_INT 7
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: PUSH
2139: LD_OWVAR 67
2143: ARRAY
2144: PPUSH
2145: CALL_OW 380
// un := CreateHuman ;
2149: LD_ADDR_VAR 0 4
2153: PUSH
2154: CALL_OW 44
2158: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2159: LD_VAR 0 4
2163: PPUSH
2164: LD_VAR 0 3
2168: PPUSH
2169: CALL_OW 52
// end ;
2173: GO 1910
2175: POP
2176: POP
// for i := 1 to [ 2 , 2 , 2 , 1 ] [ Difficulty ] do
2177: LD_ADDR_VAR 0 2
2181: PUSH
2182: DOUBLE
2183: LD_INT 1
2185: DEC
2186: ST_TO_ADDR
2187: LD_INT 2
2189: PUSH
2190: LD_INT 2
2192: PUSH
2193: LD_INT 2
2195: PUSH
2196: LD_INT 1
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_OWVAR 67
2209: ARRAY
2210: PUSH
2211: FOR_TO
2212: IFFALSE 2287
// begin PrepareHuman ( false , class_soldier , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2214: LD_INT 0
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: LD_INT 9
2222: PUSH
2223: LD_INT 8
2225: PUSH
2226: LD_INT 8
2228: PUSH
2229: LD_INT 7
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: LIST
2237: PUSH
2238: LD_OWVAR 67
2242: ARRAY
2243: PPUSH
2244: CALL_OW 380
// un := CreateHuman ;
2248: LD_ADDR_VAR 0 4
2252: PUSH
2253: CALL_OW 44
2257: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2258: LD_VAR 0 4
2262: PPUSH
2263: LD_INT 1
2265: PPUSH
2266: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
2270: LD_VAR 0 4
2274: PPUSH
2275: LD_INT 2
2277: PPUSH
2278: LD_INT 0
2280: PPUSH
2281: CALL_OW 49
// end ;
2285: GO 2211
2287: POP
2288: POP
// end ; end_of_file
2289: LD_VAR 0 1
2293: RET
// export function PrepareBurlak ; begin
2294: LD_INT 0
2296: PPUSH
// uc_side := 7 ;
2297: LD_ADDR_OWVAR 20
2301: PUSH
2302: LD_INT 7
2304: ST_TO_ADDR
// uc_nation := 3 ;
2305: LD_ADDR_OWVAR 21
2309: PUSH
2310: LD_INT 3
2312: ST_TO_ADDR
// vc_engine := engine_siberite ;
2313: LD_ADDR_OWVAR 39
2317: PUSH
2318: LD_INT 3
2320: ST_TO_ADDR
// vc_control := control_manual ;
2321: LD_ADDR_OWVAR 38
2325: PUSH
2326: LD_INT 1
2328: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ Difficulty ] ;
2329: LD_ADDR_OWVAR 40
2333: PUSH
2334: LD_INT 44
2336: PUSH
2337: LD_INT 45
2339: PUSH
2340: LD_INT 46
2342: PUSH
2343: LD_INT 46
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: PUSH
2352: LD_OWVAR 67
2356: ARRAY
2357: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
2358: LD_ADDR_OWVAR 37
2362: PUSH
2363: LD_INT 24
2365: ST_TO_ADDR
// Masha := CreateVehicle ;
2366: LD_ADDR_EXP 19
2370: PUSH
2371: CALL_OW 45
2375: ST_TO_ADDR
// SetDir ( Masha , 2 ) ;
2376: LD_EXP 19
2380: PPUSH
2381: LD_INT 2
2383: PPUSH
2384: CALL_OW 233
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2388: LD_EXP 19
2392: PPUSH
2393: LD_INT 3
2395: PPUSH
2396: LD_INT 0
2398: PPUSH
2399: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2403: LD_EXP 19
2407: PPUSH
2408: LD_INT 1
2410: PPUSH
2411: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2415: LD_ADDR_EXP 18
2419: PUSH
2420: LD_STRING Burlak
2422: PPUSH
2423: LD_INT 0
2425: PPUSH
2426: LD_STRING 
2428: PPUSH
2429: CALL 32420 0 3
2433: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2434: LD_EXP 18
2438: PPUSH
2439: LD_EXP 19
2443: PPUSH
2444: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2448: LD_EXP 19
2452: PPUSH
2453: LD_INT 107
2455: PPUSH
2456: LD_INT 118
2458: PPUSH
2459: CALL_OW 114
// spawnBurlak := 1 ;
2463: LD_ADDR_EXP 28
2467: PUSH
2468: LD_INT 1
2470: ST_TO_ADDR
// end ;
2471: LD_VAR 0 1
2475: RET
// export function BurlakArmy ; var i , veh , tmp , bazooka ; begin
2476: LD_INT 0
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
// uc_side := 7 ;
2483: LD_ADDR_OWVAR 20
2487: PUSH
2488: LD_INT 7
2490: ST_TO_ADDR
// uc_nation := 3 ;
2491: LD_ADDR_OWVAR 21
2495: PUSH
2496: LD_INT 3
2498: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
2499: LD_ADDR_EXP 20
2503: PUSH
2504: LD_STRING Gnyevko
2506: PPUSH
2507: LD_INT 0
2509: PPUSH
2510: LD_STRING 
2512: PPUSH
2513: CALL 32420 0 3
2517: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2518: LD_ADDR_EXP 21
2522: PUSH
2523: LD_STRING Titov
2525: PPUSH
2526: LD_INT 0
2528: PPUSH
2529: LD_STRING 
2531: PPUSH
2532: CALL 32420 0 3
2536: ST_TO_ADDR
// Xavier := PrepareUnit ( Xavier2 , false ,  ) ;
2537: LD_ADDR_EXP 22
2541: PUSH
2542: LD_STRING Xavier2
2544: PPUSH
2545: LD_INT 0
2547: PPUSH
2548: LD_STRING 
2550: PPUSH
2551: CALL 32420 0 3
2555: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
2556: LD_ADDR_EXP 23
2560: PUSH
2561: LD_STRING Belkov
2563: PPUSH
2564: LD_INT 0
2566: PPUSH
2567: LD_STRING 
2569: PPUSH
2570: CALL 32420 0 3
2574: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2575: LD_ADDR_EXP 24
2579: PUSH
2580: LD_STRING Lipshchin
2582: PPUSH
2583: LD_INT 0
2585: PPUSH
2586: LD_STRING 
2588: PPUSH
2589: CALL 32420 0 3
2593: ST_TO_ADDR
// for i = 1 to 5 do
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: DOUBLE
2600: LD_INT 1
2602: DEC
2603: ST_TO_ADDR
2604: LD_INT 5
2606: PUSH
2607: FOR_TO
2608: IFFALSE 2733
// begin vc_engine := engine_siberite ;
2610: LD_ADDR_OWVAR 39
2614: PUSH
2615: LD_INT 3
2617: ST_TO_ADDR
// vc_control := control_manual ;
2618: LD_ADDR_OWVAR 38
2622: PUSH
2623: LD_INT 1
2625: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun , ru_time_lapser ] [ rand ( 1 , 5 ) ] ;
2626: LD_ADDR_OWVAR 40
2630: PUSH
2631: LD_INT 43
2633: PUSH
2634: LD_INT 45
2636: PUSH
2637: LD_INT 45
2639: PUSH
2640: LD_INT 44
2642: PUSH
2643: LD_INT 49
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: LIST
2652: PUSH
2653: LD_INT 1
2655: PPUSH
2656: LD_INT 5
2658: PPUSH
2659: CALL_OW 12
2663: ARRAY
2664: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] ;
2665: LD_ADDR_OWVAR 37
2669: PUSH
2670: LD_INT 22
2672: PUSH
2673: LD_INT 22
2675: PUSH
2676: LD_INT 24
2678: PUSH
2679: LD_INT 24
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: LIST
2686: LIST
2687: PUSH
2688: LD_OWVAR 67
2692: ARRAY
2693: ST_TO_ADDR
// veh = CreateVehicle ;
2694: LD_ADDR_VAR 0 3
2698: PUSH
2699: CALL_OW 45
2703: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2704: LD_VAR 0 3
2708: PPUSH
2709: LD_INT 2
2711: PPUSH
2712: CALL_OW 233
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2716: LD_VAR 0 3
2720: PPUSH
2721: LD_INT 3
2723: PPUSH
2724: LD_INT 0
2726: PPUSH
2727: CALL_OW 49
// end ;
2731: GO 2607
2733: POP
2734: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2735: LD_ADDR_VAR 0 4
2739: PUSH
2740: LD_INT 22
2742: PUSH
2743: LD_INT 7
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: PUSH
2750: LD_INT 21
2752: PUSH
2753: LD_INT 2
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: PUSH
2760: LD_INT 58
2762: PUSH
2763: EMPTY
2764: LIST
2765: PUSH
2766: EMPTY
2767: LIST
2768: LIST
2769: LIST
2770: PPUSH
2771: CALL_OW 69
2775: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2776: LD_EXP 20
2780: PPUSH
2781: LD_VAR 0 4
2785: PUSH
2786: LD_INT 1
2788: ARRAY
2789: PPUSH
2790: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2794: LD_EXP 21
2798: PPUSH
2799: LD_VAR 0 4
2803: PUSH
2804: LD_INT 2
2806: ARRAY
2807: PPUSH
2808: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2812: LD_EXP 22
2816: PPUSH
2817: LD_VAR 0 4
2821: PUSH
2822: LD_INT 3
2824: ARRAY
2825: PPUSH
2826: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2830: LD_EXP 23
2834: PPUSH
2835: LD_VAR 0 4
2839: PUSH
2840: LD_INT 4
2842: ARRAY
2843: PPUSH
2844: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2848: LD_EXP 24
2852: PPUSH
2853: LD_VAR 0 4
2857: PUSH
2858: LD_INT 5
2860: ARRAY
2861: PPUSH
2862: CALL_OW 52
// SetClass ( Gnyevko , class_mechanic ) ;
2866: LD_EXP 20
2870: PPUSH
2871: LD_INT 3
2873: PPUSH
2874: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , class_bazooker ) ;
2878: LD_EXP 21
2882: PUSH
2883: LD_EXP 24
2887: PUSH
2888: EMPTY
2889: LIST
2890: LIST
2891: PPUSH
2892: LD_INT 9
2894: PPUSH
2895: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2899: LD_ADDR_VAR 0 4
2903: PUSH
2904: LD_INT 22
2906: PUSH
2907: LD_INT 7
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PPUSH
2914: CALL_OW 69
2918: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2919: LD_VAR 0 4
2923: PPUSH
2924: LD_INT 107
2926: PPUSH
2927: LD_INT 118
2929: PPUSH
2930: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2934: LD_INT 35
2936: PPUSH
2937: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) , Masha ) ;
2941: LD_VAR 0 4
2945: PPUSH
2946: LD_INT 34
2948: PUSH
2949: LD_INT 49
2951: PUSH
2952: EMPTY
2953: LIST
2954: LIST
2955: PPUSH
2956: CALL_OW 72
2960: PPUSH
2961: LD_EXP 19
2965: PPUSH
2966: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , 107 , 118 ) ;
2970: LD_VAR 0 4
2974: PPUSH
2975: LD_INT 3
2977: PUSH
2978: LD_INT 34
2980: PUSH
2981: LD_INT 49
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: PPUSH
2992: CALL_OW 72
2996: PPUSH
2997: LD_INT 107
2999: PPUSH
3000: LD_INT 118
3002: PPUSH
3003: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3007: LD_ADDR_VAR 0 5
3011: PUSH
3012: LD_EXP 21
3016: PUSH
3017: LD_EXP 24
3021: PUSH
3022: EMPTY
3023: LIST
3024: LIST
3025: PPUSH
3026: LD_INT 50
3028: PUSH
3029: EMPTY
3030: LIST
3031: PUSH
3032: LD_INT 3
3034: PUSH
3035: LD_INT 54
3037: PUSH
3038: EMPTY
3039: LIST
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 72
3053: ST_TO_ADDR
// if bazooka then
3054: LD_VAR 0 5
3058: IFFALSE 3100
// begin for i in bazooka do
3060: LD_ADDR_VAR 0 2
3064: PUSH
3065: LD_VAR 0 5
3069: PUSH
3070: FOR_IN
3071: IFFALSE 3098
// if See ( 1 , i ) then
3073: LD_INT 1
3075: PPUSH
3076: LD_VAR 0 2
3080: PPUSH
3081: CALL_OW 292
3085: IFFALSE 3096
// ComSpaceTimeShoot ( i ) ;
3087: LD_VAR 0 2
3091: PPUSH
3092: CALL 33388 0 1
3096: GO 3070
3098: POP
3099: POP
// end ; until UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) = 0 or IsDying ( Masha ) ;
3100: LD_VAR 0 4
3104: PPUSH
3105: LD_INT 34
3107: PUSH
3108: LD_INT 49
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: PPUSH
3115: CALL_OW 72
3119: PUSH
3120: LD_INT 0
3122: EQUAL
3123: PUSH
3124: LD_EXP 19
3128: PPUSH
3129: CALL_OW 303
3133: OR
3134: IFFALSE 2934
// repeat wait ( 0 0$1 ) ;
3136: LD_INT 35
3138: PPUSH
3139: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
3143: LD_ADDR_VAR 0 4
3147: PUSH
3148: LD_INT 22
3150: PUSH
3151: LD_INT 7
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PPUSH
3158: CALL_OW 69
3162: PUSH
3163: LD_EXP 18
3167: DIFF
3168: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
3169: LD_VAR 0 4
3173: PPUSH
3174: LD_INT 107
3176: PPUSH
3177: LD_INT 118
3179: PPUSH
3180: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3184: LD_ADDR_VAR 0 5
3188: PUSH
3189: LD_EXP 21
3193: PUSH
3194: LD_EXP 24
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PPUSH
3203: LD_INT 50
3205: PUSH
3206: EMPTY
3207: LIST
3208: PUSH
3209: LD_INT 3
3211: PUSH
3212: LD_INT 54
3214: PUSH
3215: EMPTY
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PPUSH
3226: CALL_OW 72
3230: ST_TO_ADDR
// if bazooka then
3231: LD_VAR 0 5
3235: IFFALSE 3277
// begin for i in bazooka do
3237: LD_ADDR_VAR 0 2
3241: PUSH
3242: LD_VAR 0 5
3246: PUSH
3247: FOR_IN
3248: IFFALSE 3275
// if See ( 1 , i ) then
3250: LD_INT 1
3252: PPUSH
3253: LD_VAR 0 2
3257: PPUSH
3258: CALL_OW 292
3262: IFFALSE 3273
// ComSpaceTimeShoot ( i ) ;
3264: LD_VAR 0 2
3268: PPUSH
3269: CALL 33388 0 1
3273: GO 3247
3275: POP
3276: POP
// end ; if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
3277: LD_EXP 18
3281: PPUSH
3282: CALL_OW 302
3286: PUSH
3287: LD_EXP 18
3291: PPUSH
3292: CALL_OW 310
3296: NOT
3297: AND
3298: IFFALSE 3315
// ComMoveXY ( Burlak , 107 , 118 ) ;
3300: LD_EXP 18
3304: PPUSH
3305: LD_INT 107
3307: PPUSH
3308: LD_INT 118
3310: PPUSH
3311: CALL_OW 111
// until not tmp ;
3315: LD_VAR 0 4
3319: NOT
3320: IFFALSE 3136
// end ;
3322: LD_VAR 0 1
3326: RET
// export function PrepareRussianAttack ; var i , un , veh , area , dir ; begin
3327: LD_INT 0
3329: PPUSH
3330: PPUSH
3331: PPUSH
3332: PPUSH
3333: PPUSH
3334: PPUSH
// result := [ ] ;
3335: LD_ADDR_VAR 0 1
3339: PUSH
3340: EMPTY
3341: ST_TO_ADDR
// dir := rand ( 1 , 2 ) ;
3342: LD_ADDR_VAR 0 6
3346: PUSH
3347: LD_INT 1
3349: PPUSH
3350: LD_INT 2
3352: PPUSH
3353: CALL_OW 12
3357: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
3358: LD_ADDR_VAR 0 5
3362: PUSH
3363: LD_INT 8
3365: PUSH
3366: LD_INT 9
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: PUSH
3373: LD_VAR 0 6
3377: ARRAY
3378: ST_TO_ADDR
// for i := 1 to [ 6 , 8 , 10 , 11 ] [ Difficulty ] do
3379: LD_ADDR_VAR 0 2
3383: PUSH
3384: DOUBLE
3385: LD_INT 1
3387: DEC
3388: ST_TO_ADDR
3389: LD_INT 6
3391: PUSH
3392: LD_INT 8
3394: PUSH
3395: LD_INT 10
3397: PUSH
3398: LD_INT 11
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: PUSH
3407: LD_OWVAR 67
3411: ARRAY
3412: PUSH
3413: FOR_TO
3414: IFFALSE 3652
// begin uc_side := 3 ;
3416: LD_ADDR_OWVAR 20
3420: PUSH
3421: LD_INT 3
3423: ST_TO_ADDR
// uc_nation := 3 ;
3424: LD_ADDR_OWVAR 21
3428: PUSH
3429: LD_INT 3
3431: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] , [ ru_heavy_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] [ rand ( 1 , 5 ) ] , 100 ) ;
3432: LD_INT 24
3434: PPUSH
3435: LD_INT 3
3437: PPUSH
3438: LD_INT 1
3440: PUSH
3441: LD_INT 3
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: LD_INT 1
3450: PPUSH
3451: LD_INT 2
3453: PPUSH
3454: CALL_OW 12
3458: ARRAY
3459: PPUSH
3460: LD_INT 46
3462: PUSH
3463: LD_INT 46
3465: PUSH
3466: LD_INT 45
3468: PUSH
3469: LD_INT 47
3471: PUSH
3472: LD_INT 49
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: PUSH
3482: LD_INT 1
3484: PPUSH
3485: LD_INT 5
3487: PPUSH
3488: CALL_OW 12
3492: ARRAY
3493: PPUSH
3494: LD_INT 100
3496: PPUSH
3497: CALL 37281 0 5
// veh := CreateVehicle ;
3501: LD_ADDR_VAR 0 4
3505: PUSH
3506: CALL_OW 45
3510: ST_TO_ADDR
// result := Join ( result , veh ) ;
3511: LD_ADDR_VAR 0 1
3515: PUSH
3516: LD_VAR 0 1
3520: PPUSH
3521: LD_VAR 0 4
3525: PPUSH
3526: CALL 70152 0 2
3530: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
3531: LD_VAR 0 4
3535: PPUSH
3536: LD_INT 3
3538: PUSH
3539: LD_INT 5
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: PUSH
3546: LD_VAR 0 6
3550: ARRAY
3551: PPUSH
3552: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3556: LD_VAR 0 4
3560: PPUSH
3561: LD_VAR 0 5
3565: PPUSH
3566: LD_INT 0
3568: PPUSH
3569: CALL_OW 49
// if vc_control = control_manual then
3573: LD_OWVAR 38
3577: PUSH
3578: LD_INT 1
3580: EQUAL
3581: IFFALSE 3628
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3583: LD_INT 0
3585: PPUSH
3586: LD_INT 7
3588: PUSH
3589: LD_INT 8
3591: PUSH
3592: LD_INT 9
3594: PUSH
3595: LD_INT 10
3597: PUSH
3598: EMPTY
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: PUSH
3604: LD_OWVAR 67
3608: ARRAY
3609: PPUSH
3610: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3614: CALL_OW 44
3618: PPUSH
3619: LD_VAR 0 4
3623: PPUSH
3624: CALL_OW 52
// end ; wait ( 0 0$0.5 ) ;
3628: LD_INT 18
3630: PPUSH
3631: CALL_OW 67
// ComAgressiveMove ( veh , 100 , 55 ) ;
3635: LD_VAR 0 4
3639: PPUSH
3640: LD_INT 100
3642: PPUSH
3643: LD_INT 55
3645: PPUSH
3646: CALL_OW 114
// end ;
3650: GO 3413
3652: POP
3653: POP
// for i in result do
3654: LD_ADDR_VAR 0 2
3658: PUSH
3659: LD_VAR 0 1
3663: PUSH
3664: FOR_IN
3665: IFFALSE 3681
// SetTag ( i , 10 ) ;
3667: LD_VAR 0 2
3671: PPUSH
3672: LD_INT 10
3674: PPUSH
3675: CALL_OW 109
3679: GO 3664
3681: POP
3682: POP
// RaiseSailEvent ( eventRussianAttack ) ;
3683: LD_EXP 45
3687: PPUSH
3688: CALL_OW 427
// end ; end_of_file
3692: LD_VAR 0 1
3696: RET
// export function DestroySibDeposit ; var un , rnd ; begin
3697: LD_INT 0
3699: PPUSH
3700: PPUSH
3701: PPUSH
// rnd := 0 ;
3702: LD_ADDR_VAR 0 3
3706: PUSH
3707: LD_INT 0
3709: ST_TO_ADDR
// uc_side := 8 ;
3710: LD_ADDR_OWVAR 20
3714: PUSH
3715: LD_INT 8
3717: ST_TO_ADDR
// uc_nation := 2 ;
3718: LD_ADDR_OWVAR 21
3722: PUSH
3723: LD_INT 2
3725: ST_TO_ADDR
// hc_name :=  ;
3726: LD_ADDR_OWVAR 26
3730: PUSH
3731: LD_STRING 
3733: ST_TO_ADDR
// hc_gallery :=  ;
3734: LD_ADDR_OWVAR 33
3738: PUSH
3739: LD_STRING 
3741: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 , 12 ] [ Difficulty ] , [ 10 , 11 , 12 , 12 ] [ Difficulty ] ] ;
3742: LD_ADDR_OWVAR 29
3746: PUSH
3747: LD_INT 10
3749: PUSH
3750: LD_INT 11
3752: PUSH
3753: LD_INT 12
3755: PUSH
3756: LD_INT 12
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: PUSH
3765: LD_OWVAR 67
3769: ARRAY
3770: PUSH
3771: LD_INT 10
3773: PUSH
3774: LD_INT 11
3776: PUSH
3777: LD_INT 12
3779: PUSH
3780: LD_INT 12
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: PUSH
3789: LD_OWVAR 67
3793: ARRAY
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: ST_TO_ADDR
// PrepareHuman ( false , 4 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3799: LD_INT 0
3801: PPUSH
3802: LD_INT 4
3804: PPUSH
3805: LD_INT 7
3807: PUSH
3808: LD_INT 8
3810: PUSH
3811: LD_INT 9
3813: PUSH
3814: LD_INT 10
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: PUSH
3823: LD_OWVAR 67
3827: ARRAY
3828: PPUSH
3829: CALL_OW 380
// un := CreateHuman ;
3833: LD_ADDR_VAR 0 2
3837: PUSH
3838: CALL_OW 44
3842: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3843: LD_VAR 0 2
3847: PPUSH
3848: LD_INT 8
3850: PUSH
3851: LD_INT 9
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: PUSH
3858: LD_INT 1
3860: PPUSH
3861: LD_INT 2
3863: PPUSH
3864: CALL_OW 12
3868: ARRAY
3869: PPUSH
3870: LD_INT 0
3872: PPUSH
3873: CALL_OW 49
// SetTag ( un , 1 ) ;
3877: LD_VAR 0 2
3881: PPUSH
3882: LD_INT 1
3884: PPUSH
3885: CALL_OW 109
// rnd := rand ( 1 , sibDeposits ) ;
3889: LD_ADDR_VAR 0 3
3893: PUSH
3894: LD_INT 1
3896: PPUSH
3897: LD_EXP 32
3901: PPUSH
3902: CALL_OW 12
3906: ST_TO_ADDR
// RaiseSailEventCustom ( eventContaminate , un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] , 0 , 0 , 0 ) ;
3907: LD_EXP 46
3911: PPUSH
3912: LD_VAR 0 2
3916: PPUSH
3917: LD_EXP 32
3921: PUSH
3922: LD_VAR 0 3
3926: ARRAY
3927: PUSH
3928: LD_INT 1
3930: ARRAY
3931: PPUSH
3932: LD_EXP 32
3936: PUSH
3937: LD_VAR 0 3
3941: ARRAY
3942: PUSH
3943: LD_INT 2
3945: ARRAY
3946: PPUSH
3947: LD_INT 0
3949: PPUSH
3950: LD_INT 0
3952: PPUSH
3953: LD_INT 0
3955: PPUSH
3956: CALL_OW 595
// end ;
3960: LD_VAR 0 1
3964: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do var i ;
3965: LD_INT 22
3967: PUSH
3968: LD_INT 8
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PUSH
3975: LD_INT 3
3977: PUSH
3978: LD_INT 61
3980: PUSH
3981: EMPTY
3982: LIST
3983: PUSH
3984: EMPTY
3985: LIST
3986: LIST
3987: PUSH
3988: LD_INT 50
3990: PUSH
3991: EMPTY
3992: LIST
3993: PUSH
3994: LD_INT 33
3996: PUSH
3997: LD_INT 2
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: PPUSH
4010: CALL_OW 69
4014: IFFALSE 4101
4016: GO 4018
4018: DISABLE
4019: LD_INT 0
4021: PPUSH
// begin enable ;
4022: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do
4023: LD_ADDR_VAR 0 1
4027: PUSH
4028: LD_INT 22
4030: PUSH
4031: LD_INT 8
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PUSH
4038: LD_INT 3
4040: PUSH
4041: LD_INT 61
4043: PUSH
4044: EMPTY
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: LD_INT 50
4053: PUSH
4054: EMPTY
4055: LIST
4056: PUSH
4057: LD_INT 33
4059: PUSH
4060: LD_INT 2
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: PPUSH
4073: CALL_OW 69
4077: PUSH
4078: FOR_IN
4079: IFFALSE 4099
// begin wait ( 0 0$0.3 ) ;
4081: LD_INT 10
4083: PPUSH
4084: CALL_OW 67
// Connect ( i ) ;
4088: LD_VAR 0 1
4092: PPUSH
4093: CALL 40749 0 1
// end ;
4097: GO 4078
4099: POP
4100: POP
// end ;
4101: PPOPN 1
4103: END
// export function PrepareArabianAttack ; var i , veh , xy , un , area , counter , tmp , dir ; begin
4104: LD_INT 0
4106: PPUSH
4107: PPUSH
4108: PPUSH
4109: PPUSH
4110: PPUSH
4111: PPUSH
4112: PPUSH
4113: PPUSH
4114: PPUSH
// result := [ ] ;
4115: LD_ADDR_VAR 0 1
4119: PUSH
4120: EMPTY
4121: ST_TO_ADDR
// arabianAttacksCounter := arabianAttacksCounter + 1 ;
4122: LD_ADDR_EXP 34
4126: PUSH
4127: LD_EXP 34
4131: PUSH
4132: LD_INT 1
4134: PLUS
4135: ST_TO_ADDR
// xy := [ ctArea1 , ctArea2 , ctArea3 , ctArea4 ] ;
4136: LD_ADDR_VAR 0 4
4140: PUSH
4141: LD_INT 19
4143: PUSH
4144: LD_INT 20
4146: PUSH
4147: LD_INT 21
4149: PUSH
4150: LD_INT 22
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
4159: LD_INT 22
4161: PUSH
4162: LD_INT 8
4164: PUSH
4165: EMPTY
4166: LIST
4167: LIST
4168: PUSH
4169: LD_INT 3
4171: PUSH
4172: LD_INT 58
4174: PUSH
4175: EMPTY
4176: LIST
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: PUSH
4182: LD_INT 34
4184: PUSH
4185: LD_INT 31
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: LIST
4196: PPUSH
4197: CALL_OW 69
4201: PUSH
4202: LD_INT 2
4204: LESS
4205: IFFALSE 4510
// begin uc_side := 8 ;
4207: LD_ADDR_OWVAR 20
4211: PUSH
4212: LD_INT 8
4214: ST_TO_ADDR
// uc_nation := 2 ;
4215: LD_ADDR_OWVAR 21
4219: PUSH
4220: LD_INT 2
4222: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
4223: LD_INT 14
4225: PPUSH
4226: LD_INT 3
4228: PPUSH
4229: LD_INT 1
4231: PPUSH
4232: LD_INT 31
4234: PPUSH
4235: LD_INT 100
4237: PPUSH
4238: CALL 37281 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
4242: LD_ADDR_VAR 0 2
4246: PUSH
4247: DOUBLE
4248: LD_INT 22
4250: PUSH
4251: LD_INT 8
4253: PUSH
4254: EMPTY
4255: LIST
4256: LIST
4257: PUSH
4258: LD_INT 3
4260: PUSH
4261: LD_INT 58
4263: PUSH
4264: EMPTY
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PUSH
4271: LD_INT 34
4273: PUSH
4274: LD_INT 31
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: LIST
4285: PPUSH
4286: CALL_OW 69
4290: PUSH
4291: LD_INT 1
4293: PLUS
4294: DEC
4295: ST_TO_ADDR
4296: LD_INT 2
4298: PUSH
4299: FOR_TO
4300: IFFALSE 4508
// begin veh := CreateVehicle ;
4302: LD_ADDR_VAR 0 3
4306: PUSH
4307: CALL_OW 45
4311: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
4312: LD_VAR 0 3
4316: PPUSH
4317: LD_INT 0
4319: PPUSH
4320: LD_INT 5
4322: PPUSH
4323: CALL_OW 12
4327: PPUSH
4328: CALL_OW 233
// xy := Delete ( xy , rand ( 1 , Count ( xy ) ) ) ;
4332: LD_ADDR_VAR 0 4
4336: PUSH
4337: LD_VAR 0 4
4341: PPUSH
4342: LD_INT 1
4344: PPUSH
4345: LD_VAR 0 4
4349: PPUSH
4350: CALL 34543 0 1
4354: PPUSH
4355: CALL_OW 12
4359: PPUSH
4360: CALL_OW 3
4364: ST_TO_ADDR
// area := xy [ rand ( 1 , Count ( xy ) ) ] ;
4365: LD_ADDR_VAR 0 6
4369: PUSH
4370: LD_VAR 0 4
4374: PUSH
4375: LD_INT 1
4377: PPUSH
4378: LD_VAR 0 4
4382: PPUSH
4383: CALL 34543 0 1
4387: PPUSH
4388: CALL_OW 12
4392: ARRAY
4393: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_ok ] ) then
4394: LD_VAR 0 6
4398: PPUSH
4399: LD_INT 50
4401: PUSH
4402: EMPTY
4403: LIST
4404: PPUSH
4405: CALL_OW 70
4409: IFFALSE 4419
// area := ctAreaExtra ;
4411: LD_ADDR_VAR 0 6
4415: PUSH
4416: LD_INT 23
4418: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4419: LD_VAR 0 3
4423: PPUSH
4424: LD_VAR 0 6
4428: PPUSH
4429: LD_INT 0
4431: PPUSH
4432: CALL_OW 49
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4436: LD_INT 0
4438: PPUSH
4439: LD_INT 7
4441: PUSH
4442: LD_INT 9
4444: PUSH
4445: LD_INT 10
4447: PUSH
4448: LD_INT 10
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PPUSH
4463: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4467: CALL_OW 44
4471: PPUSH
4472: LD_VAR 0 3
4476: PPUSH
4477: CALL_OW 52
// if area = ctAreaExtra then
4481: LD_VAR 0 6
4485: PUSH
4486: LD_INT 23
4488: EQUAL
4489: IFFALSE 4506
// ComMoveXY ( veh , 73 , 21 ) ;
4491: LD_VAR 0 3
4495: PPUSH
4496: LD_INT 73
4498: PPUSH
4499: LD_INT 21
4501: PPUSH
4502: CALL_OW 111
// end ;
4506: GO 4299
4508: POP
4509: POP
// end ; dir := rand ( 1 , 2 ) ;
4510: LD_ADDR_VAR 0 9
4514: PUSH
4515: LD_INT 1
4517: PPUSH
4518: LD_INT 2
4520: PPUSH
4521: CALL_OW 12
4525: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
4526: LD_ADDR_VAR 0 6
4530: PUSH
4531: LD_INT 8
4533: PUSH
4534: LD_INT 9
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: PUSH
4541: LD_VAR 0 9
4545: ARRAY
4546: ST_TO_ADDR
// counter := [ 6 , 8 , 10 , 11 ] [ Difficulty ] + arabianAttacksCounter ;
4547: LD_ADDR_VAR 0 7
4551: PUSH
4552: LD_INT 6
4554: PUSH
4555: LD_INT 8
4557: PUSH
4558: LD_INT 10
4560: PUSH
4561: LD_INT 11
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: PUSH
4570: LD_OWVAR 67
4574: ARRAY
4575: PUSH
4576: LD_EXP 34
4580: PLUS
4581: ST_TO_ADDR
// if counter > 20 then
4582: LD_VAR 0 7
4586: PUSH
4587: LD_INT 20
4589: GREATER
4590: IFFALSE 4600
// counter := 20 ;
4592: LD_ADDR_VAR 0 7
4596: PUSH
4597: LD_INT 20
4599: ST_TO_ADDR
// for i := 1 to counter do
4600: LD_ADDR_VAR 0 2
4604: PUSH
4605: DOUBLE
4606: LD_INT 1
4608: DEC
4609: ST_TO_ADDR
4610: LD_VAR 0 7
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4949
// begin uc_side := 8 ;
4618: LD_ADDR_OWVAR 20
4622: PUSH
4623: LD_INT 8
4625: ST_TO_ADDR
// uc_nation := 2 ;
4626: LD_ADDR_OWVAR 21
4630: PUSH
4631: LD_INT 2
4633: ST_TO_ADDR
// PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] , [ ar_gun , ar_rocket_launcher , ar_gun , ar_mortar , ar_selfpropelled_bomb , ar_gatling_gun ] [ rand ( 1 , 6 ) ] , 100 ) ;
4634: LD_INT 13
4636: PUSH
4637: LD_INT 14
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: PUSH
4644: LD_INT 1
4646: PPUSH
4647: LD_INT 2
4649: PPUSH
4650: CALL_OW 12
4654: ARRAY
4655: PPUSH
4656: LD_INT 3
4658: PPUSH
4659: LD_INT 1
4661: PUSH
4662: LD_INT 2
4664: PUSH
4665: LD_INT 5
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: LIST
4672: PUSH
4673: LD_INT 1
4675: PPUSH
4676: LD_INT 3
4678: PPUSH
4679: CALL_OW 12
4683: ARRAY
4684: PPUSH
4685: LD_INT 27
4687: PUSH
4688: LD_INT 28
4690: PUSH
4691: LD_INT 27
4693: PUSH
4694: LD_INT 92
4696: PUSH
4697: LD_INT 29
4699: PUSH
4700: LD_INT 25
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: PUSH
4711: LD_INT 1
4713: PPUSH
4714: LD_INT 6
4716: PPUSH
4717: CALL_OW 12
4721: ARRAY
4722: PPUSH
4723: LD_INT 100
4725: PPUSH
4726: CALL 37281 0 5
// if vc_weapon = ar_selfpropelled_bomb then
4730: LD_OWVAR 40
4734: PUSH
4735: LD_INT 29
4737: EQUAL
4738: IFFALSE 4748
// vc_control := control_remote ;
4740: LD_ADDR_OWVAR 38
4744: PUSH
4745: LD_INT 2
4747: ST_TO_ADDR
// veh := CreateVehicle ;
4748: LD_ADDR_VAR 0 3
4752: PUSH
4753: CALL_OW 45
4757: ST_TO_ADDR
// result := Join ( result , veh ) ;
4758: LD_ADDR_VAR 0 1
4762: PUSH
4763: LD_VAR 0 1
4767: PPUSH
4768: LD_VAR 0 3
4772: PPUSH
4773: CALL 70152 0 2
4777: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
4778: LD_VAR 0 3
4782: PPUSH
4783: LD_INT 3
4785: PUSH
4786: LD_INT 5
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: LD_VAR 0 9
4797: ARRAY
4798: PPUSH
4799: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
4803: LD_VAR 0 3
4807: PPUSH
4808: LD_VAR 0 6
4812: PPUSH
4813: LD_INT 0
4815: PPUSH
4816: CALL_OW 49
// if vc_control = control_manual then
4820: LD_OWVAR 38
4824: PUSH
4825: LD_INT 1
4827: EQUAL
4828: IFFALSE 4875
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4830: LD_INT 0
4832: PPUSH
4833: LD_INT 7
4835: PUSH
4836: LD_INT 8
4838: PUSH
4839: LD_INT 9
4841: PUSH
4842: LD_INT 10
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: PUSH
4851: LD_OWVAR 67
4855: ARRAY
4856: PPUSH
4857: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4861: CALL_OW 44
4865: PPUSH
4866: LD_VAR 0 3
4870: PPUSH
4871: CALL_OW 52
// end ; wait ( 0 0$0.3 ) ;
4875: LD_INT 10
4877: PPUSH
4878: CALL_OW 67
// if GetControl ( veh ) = control_remote and not IsControledBy ( veh ) then
4882: LD_VAR 0 3
4886: PPUSH
4887: CALL_OW 263
4891: PUSH
4892: LD_INT 2
4894: EQUAL
4895: PUSH
4896: LD_VAR 0 3
4900: PPUSH
4901: CALL_OW 312
4905: NOT
4906: AND
4907: IFFALSE 4925
// begin Connect ( veh ) ;
4909: LD_VAR 0 3
4913: PPUSH
4914: CALL 40749 0 1
// wait ( 0 0$0.3 ) ;
4918: LD_INT 10
4920: PPUSH
4921: CALL_OW 67
// end ; ComAgressiveMove ( veh , 100 , 55 ) ;
4925: LD_VAR 0 3
4929: PPUSH
4930: LD_INT 100
4932: PPUSH
4933: LD_INT 55
4935: PPUSH
4936: CALL_OW 114
// wait ( 0 0$0.5 ) ;
4940: LD_INT 18
4942: PPUSH
4943: CALL_OW 67
// end ;
4947: GO 4615
4949: POP
4950: POP
// if arabianAttacksCounter = 1 then
4951: LD_EXP 34
4955: PUSH
4956: LD_INT 1
4958: EQUAL
4959: IFFALSE 4965
// DestroySibDeposit ;
4961: CALL 3697 0 0
// if arabianAttacksCounter mod [ 4 , 3 , 3 , 2 ] [ Difficulty ] = 0 then
4965: LD_EXP 34
4969: PUSH
4970: LD_INT 4
4972: PUSH
4973: LD_INT 3
4975: PUSH
4976: LD_INT 3
4978: PUSH
4979: LD_INT 2
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: PUSH
4988: LD_OWVAR 67
4992: ARRAY
4993: MOD
4994: PUSH
4995: LD_INT 0
4997: EQUAL
4998: IFFALSE 5356
// begin tmp := rand ( 0 , 2 ) ;
5000: LD_ADDR_VAR 0 8
5004: PUSH
5005: LD_INT 0
5007: PPUSH
5008: LD_INT 2
5010: PPUSH
5011: CALL_OW 12
5015: ST_TO_ADDR
// if not tmp then
5016: LD_VAR 0 8
5020: NOT
5021: IFFALSE 5182
// begin for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] do
5023: LD_ADDR_VAR 0 2
5027: PUSH
5028: DOUBLE
5029: LD_INT 1
5031: DEC
5032: ST_TO_ADDR
5033: LD_INT 3
5035: PUSH
5036: LD_INT 4
5038: PUSH
5039: LD_INT 4
5041: PUSH
5042: LD_INT 5
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: PUSH
5051: LD_OWVAR 67
5055: ARRAY
5056: PUSH
5057: FOR_TO
5058: IFFALSE 5178
// begin uc_side := 8 ;
5060: LD_ADDR_OWVAR 20
5064: PUSH
5065: LD_INT 8
5067: ST_TO_ADDR
// uc_nation := 2 ;
5068: LD_ADDR_OWVAR 21
5072: PUSH
5073: LD_INT 2
5075: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5076: LD_INT 0
5078: PPUSH
5079: LD_INT 1
5081: PPUSH
5082: LD_INT 7
5084: PUSH
5085: LD_INT 8
5087: PUSH
5088: LD_INT 9
5090: PUSH
5091: LD_INT 10
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: PUSH
5100: LD_OWVAR 67
5104: ARRAY
5105: PPUSH
5106: CALL_OW 380
// un := CreateHuman ;
5110: LD_ADDR_VAR 0 5
5114: PUSH
5115: CALL_OW 44
5119: ST_TO_ADDR
// result := Join ( result , un ) ;
5120: LD_ADDR_VAR 0 1
5124: PUSH
5125: LD_VAR 0 1
5129: PPUSH
5130: LD_VAR 0 5
5134: PPUSH
5135: CALL 70152 0 2
5139: ST_TO_ADDR
// if Prob ( 60 ) then
5140: LD_INT 60
5142: PPUSH
5143: CALL_OW 13
5147: IFFALSE 5161
// SetClass ( un , class_mortar ) ;
5149: LD_VAR 0 5
5153: PPUSH
5154: LD_INT 8
5156: PPUSH
5157: CALL_OW 336
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5161: LD_VAR 0 5
5165: PPUSH
5166: LD_INT 16
5168: PPUSH
5169: LD_INT 0
5171: PPUSH
5172: CALL_OW 49
// end ;
5176: GO 5057
5178: POP
5179: POP
// end else
5180: GO 5346
// begin for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
5182: LD_ADDR_VAR 0 2
5186: PUSH
5187: DOUBLE
5188: LD_INT 1
5190: DEC
5191: ST_TO_ADDR
5192: LD_INT 2
5194: PUSH
5195: LD_INT 3
5197: PUSH
5198: LD_INT 3
5200: PUSH
5201: LD_INT 4
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: PUSH
5210: LD_OWVAR 67
5214: ARRAY
5215: PUSH
5216: FOR_TO
5217: IFFALSE 5344
// begin uc_side := 8 ;
5219: LD_ADDR_OWVAR 20
5223: PUSH
5224: LD_INT 8
5226: ST_TO_ADDR
// uc_nation := 0 ;
5227: LD_ADDR_OWVAR 21
5231: PUSH
5232: LD_INT 0
5234: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
5235: LD_ADDR_OWVAR 28
5239: PUSH
5240: LD_INT 17
5242: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
5243: LD_ADDR_OWVAR 31
5247: PUSH
5248: LD_INT 3
5250: PUSH
5251: LD_INT 0
5253: PUSH
5254: LD_INT 0
5256: PUSH
5257: LD_INT 0
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5266: LD_ADDR_OWVAR 29
5270: PUSH
5271: LD_INT 10
5273: PUSH
5274: LD_INT 10
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: ST_TO_ADDR
// hc_gallery :=  ;
5281: LD_ADDR_OWVAR 33
5285: PUSH
5286: LD_STRING 
5288: ST_TO_ADDR
// hc_name :=  ;
5289: LD_ADDR_OWVAR 26
5293: PUSH
5294: LD_STRING 
5296: ST_TO_ADDR
// un := CreateHuman ;
5297: LD_ADDR_VAR 0 5
5301: PUSH
5302: CALL_OW 44
5306: ST_TO_ADDR
// result := Join ( result , un ) ;
5307: LD_ADDR_VAR 0 1
5311: PUSH
5312: LD_VAR 0 1
5316: PPUSH
5317: LD_VAR 0 5
5321: PPUSH
5322: CALL 70152 0 2
5326: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5327: LD_VAR 0 5
5331: PPUSH
5332: LD_INT 16
5334: PPUSH
5335: LD_INT 0
5337: PPUSH
5338: CALL_OW 49
// end ;
5342: GO 5216
5344: POP
5345: POP
// end ; if sibDeposits then
5346: LD_EXP 32
5350: IFFALSE 5356
// DestroySibDeposit ;
5352: CALL 3697 0 0
// end ; for i in result do
5356: LD_ADDR_VAR 0 2
5360: PUSH
5361: LD_VAR 0 1
5365: PUSH
5366: FOR_IN
5367: IFFALSE 5383
// SetTag ( i , 10 ) ;
5369: LD_VAR 0 2
5373: PPUSH
5374: LD_INT 10
5376: PPUSH
5377: CALL_OW 109
5381: GO 5366
5383: POP
5384: POP
// RaiseSailEvent ( eventArabianAttack ) ;
5385: LD_EXP 44
5389: PPUSH
5390: CALL_OW 427
// end ; end_of_file
5394: LD_VAR 0 1
5398: RET
// export function Action ; var tmp ; begin
5399: LD_INT 0
5401: PPUSH
5402: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
5403: LD_ADDR_VAR 0 2
5407: PUSH
5408: LD_INT 22
5410: PUSH
5411: LD_INT 1
5413: PUSH
5414: EMPTY
5415: LIST
5416: LIST
5417: PUSH
5418: LD_INT 21
5420: PUSH
5421: LD_INT 2
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PPUSH
5432: CALL_OW 69
5436: ST_TO_ADDR
// InGameOn ;
5437: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
5441: LD_VAR 0 2
5445: PPUSH
5446: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
5450: LD_INT 22
5452: PUSH
5453: LD_INT 1
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: PUSH
5460: LD_INT 21
5462: PUSH
5463: LD_INT 2
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: PPUSH
5474: CALL_OW 69
5478: PPUSH
5479: LD_INT 69
5481: PPUSH
5482: LD_INT 94
5484: PPUSH
5485: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
5489: LD_EXP 1
5493: PPUSH
5494: LD_STRING D2-JMM-1
5496: PPUSH
5497: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5501: LD_VAR 0 2
5505: PPUSH
5506: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
5510: LD_EXP 2
5514: PPUSH
5515: LD_STRING D2-Huck-1
5517: PPUSH
5518: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5522: LD_VAR 0 2
5526: PPUSH
5527: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
5531: LD_EXP 1
5535: PPUSH
5536: LD_STRING D2-JMM-2
5538: PPUSH
5539: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5543: LD_VAR 0 2
5547: PPUSH
5548: CALL_OW 87
// InGameOff ;
5552: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5556: LD_STRING M1
5558: PPUSH
5559: CALL_OW 337
// SaveForQuickRestart ;
5563: CALL_OW 22
// wait ( 10 10$00 ) ;
5567: LD_INT 21000
5569: PPUSH
5570: CALL_OW 67
// DialogueOn ;
5574: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
5578: LD_EXP 16
5582: PPUSH
5583: LD_STRING D3-Pow-1
5585: PPUSH
5586: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
5590: LD_EXP 1
5594: PPUSH
5595: LD_STRING D3-JMM-1
5597: PPUSH
5598: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
5602: LD_EXP 16
5606: PPUSH
5607: LD_STRING D3-Pow-2
5609: PPUSH
5610: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
5614: LD_EXP 1
5618: PPUSH
5619: LD_STRING D3-JMM-2
5621: PPUSH
5622: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
5626: LD_EXP 16
5630: PPUSH
5631: LD_STRING D3-Pow-3
5633: PPUSH
5634: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
5638: LD_EXP 1
5642: PPUSH
5643: LD_STRING D3-JMM-3
5645: PPUSH
5646: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
5650: LD_EXP 16
5654: PPUSH
5655: LD_STRING D3-Pow-4
5657: PPUSH
5658: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
5662: LD_EXP 1
5666: PPUSH
5667: LD_STRING D3-JMM-4
5669: PPUSH
5670: CALL_OW 88
// DialogueOff ;
5674: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5678: LD_STRING M2
5680: PPUSH
5681: CALL_OW 337
// wait ( 2 2$30 ) ;
5685: LD_INT 5250
5687: PPUSH
5688: CALL_OW 67
// PrepareBurlak ;
5692: CALL 2294 0 0
// BurlakArmy ;
5696: CALL 2476 0 0
// end ;
5700: LD_VAR 0 1
5704: RET
// every 0 0$1 trigger See ( 1 , Masha ) do
5705: LD_INT 1
5707: PPUSH
5708: LD_EXP 19
5712: PPUSH
5713: CALL_OW 292
5717: IFFALSE 5876
5719: GO 5721
5721: DISABLE
// begin DialogueOn ;
5722: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
5726: LD_EXP 19
5730: PPUSH
5731: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
5735: LD_INT 22
5737: PUSH
5738: LD_INT 1
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PUSH
5745: LD_INT 26
5747: PUSH
5748: LD_INT 1
5750: PUSH
5751: EMPTY
5752: LIST
5753: LIST
5754: PUSH
5755: LD_INT 2
5757: PUSH
5758: LD_INT 25
5760: PUSH
5761: LD_INT 1
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: PUSH
5768: LD_INT 25
5770: PUSH
5771: LD_INT 2
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PUSH
5778: LD_INT 25
5780: PUSH
5781: LD_INT 3
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: PUSH
5788: LD_INT 25
5790: PUSH
5791: LD_INT 4
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PUSH
5798: LD_INT 25
5800: PUSH
5801: LD_INT 5
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: LIST
5820: PPUSH
5821: CALL_OW 69
5825: PPUSH
5826: LD_STRING D5-Sol1-1
5828: PPUSH
5829: LD_STRING D5-FSol1-1
5831: PPUSH
5832: CALL 8338 0 3
// Say ( JMM , D5-JMM-1 ) ;
5836: LD_EXP 1
5840: PPUSH
5841: LD_STRING D5-JMM-1
5843: PPUSH
5844: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
5848: LD_EXP 18
5852: PPUSH
5853: LD_STRING DAmer-Bur-1
5855: PPUSH
5856: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
5860: LD_EXP 1
5864: PPUSH
5865: LD_STRING DAmer-JMM-1
5867: PPUSH
5868: CALL_OW 88
// DialogueOff ;
5872: CALL_OW 7
// end ;
5876: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
5877: LD_INT 4
5879: PPUSH
5880: LD_INT 22
5882: PUSH
5883: LD_INT 7
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: PPUSH
5890: CALL_OW 70
5894: IFFALSE 6293
5896: GO 5898
5898: DISABLE
5899: LD_INT 0
5901: PPUSH
// begin enable ;
5902: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
5903: LD_ADDR_VAR 0 1
5907: PUSH
5908: LD_INT 4
5910: PPUSH
5911: LD_INT 22
5913: PUSH
5914: LD_INT 7
5916: PUSH
5917: EMPTY
5918: LIST
5919: LIST
5920: PPUSH
5921: CALL_OW 70
5925: PUSH
5926: FOR_IN
5927: IFFALSE 6291
// begin if i = Burlak or i = Masha then
5929: LD_VAR 0 1
5933: PUSH
5934: LD_EXP 18
5938: EQUAL
5939: PUSH
5940: LD_VAR 0 1
5944: PUSH
5945: LD_EXP 19
5949: EQUAL
5950: OR
5951: IFFALSE 6098
// begin RemoveUnit ( i ) ;
5953: LD_VAR 0 1
5957: PPUSH
5958: CALL_OW 64
// DialogueOn ;
5962: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
5966: LD_EXP 1
5970: PPUSH
5971: LD_STRING D5a-JMM-1
5973: PPUSH
5974: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
5978: LD_INT 22
5980: PUSH
5981: LD_INT 1
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: PUSH
5988: LD_INT 26
5990: PUSH
5991: LD_INT 1
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 2
6000: PUSH
6001: LD_INT 25
6003: PUSH
6004: LD_INT 1
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 25
6013: PUSH
6014: LD_INT 2
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: PUSH
6021: LD_INT 25
6023: PUSH
6024: LD_INT 3
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: PUSH
6031: LD_INT 25
6033: PUSH
6034: LD_INT 4
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: PUSH
6041: LD_INT 25
6043: PUSH
6044: LD_INT 5
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: LIST
6063: PPUSH
6064: CALL_OW 69
6068: PPUSH
6069: LD_STRING D5a-Sol1-1
6071: PPUSH
6072: LD_STRING D5-FSol1-1
6074: PPUSH
6075: CALL 8338 0 3
// DialogueOff ;
6079: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
6083: LD_STRING M2b
6085: PPUSH
6086: CALL_OW 337
// spawnBurlak = 0 ;
6090: LD_ADDR_EXP 28
6094: PUSH
6095: LD_INT 0
6097: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
6098: LD_VAR 0 1
6102: PPUSH
6103: CALL_OW 247
6107: PUSH
6108: LD_INT 2
6110: EQUAL
6111: PUSH
6112: LD_VAR 0 1
6116: PPUSH
6117: CALL_OW 263
6121: PUSH
6122: LD_INT 1
6124: EQUAL
6125: AND
6126: IFFALSE 6254
// begin case IsDrivenBy ( i ) of Gnyevko :
6128: LD_VAR 0 1
6132: PPUSH
6133: CALL_OW 311
6137: PUSH
6138: LD_EXP 20
6142: DOUBLE
6143: EQUAL
6144: IFTRUE 6148
6146: GO 6161
6148: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
6149: LD_INT 1
6151: PPUSH
6152: LD_STRING 13_Gnyevko_1
6154: PPUSH
6155: CALL_OW 39
6159: GO 6254
6161: LD_EXP 21
6165: DOUBLE
6166: EQUAL
6167: IFTRUE 6171
6169: GO 6184
6171: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
6172: LD_INT 1
6174: PPUSH
6175: LD_STRING 13_Titov_1
6177: PPUSH
6178: CALL_OW 39
6182: GO 6254
6184: LD_EXP 22
6188: DOUBLE
6189: EQUAL
6190: IFTRUE 6194
6192: GO 6207
6194: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
6195: LD_INT 1
6197: PPUSH
6198: LD_STRING 13_Xavier_1
6200: PPUSH
6201: CALL_OW 39
6205: GO 6254
6207: LD_EXP 23
6211: DOUBLE
6212: EQUAL
6213: IFTRUE 6217
6215: GO 6230
6217: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
6218: LD_INT 1
6220: PPUSH
6221: LD_STRING 13_Belkov_1
6223: PPUSH
6224: CALL_OW 39
6228: GO 6254
6230: LD_EXP 24
6234: DOUBLE
6235: EQUAL
6236: IFTRUE 6240
6238: GO 6253
6240: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
6241: LD_INT 1
6243: PPUSH
6244: LD_STRING 13_Lipshchin_1
6246: PPUSH
6247: CALL_OW 39
6251: GO 6254
6253: POP
// end ; if GetWeapon ( i ) = ru_time_lapser then
6254: LD_VAR 0 1
6258: PPUSH
6259: CALL_OW 264
6263: PUSH
6264: LD_INT 49
6266: EQUAL
6267: IFFALSE 6280
// DestroyUnit ( i ) else
6269: LD_VAR 0 1
6273: PPUSH
6274: CALL_OW 65
6278: GO 6289
// RemoveUnit ( i ) ;
6280: LD_VAR 0 1
6284: PPUSH
6285: CALL_OW 64
// end ;
6289: GO 5926
6291: POP
6292: POP
// end ;
6293: PPOPN 1
6295: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
6296: LD_EXP 18
6300: PPUSH
6301: CALL_OW 302
6305: PUSH
6306: LD_EXP 19
6310: PPUSH
6311: CALL_OW 256
6315: PUSH
6316: LD_INT 500
6318: LESS
6319: AND
6320: PUSH
6321: LD_EXP 19
6325: PPUSH
6326: CALL_OW 255
6330: PUSH
6331: LD_INT 7
6333: EQUAL
6334: AND
6335: IFFALSE 6355
6337: GO 6339
6339: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
6340: LD_EXP 18
6344: PPUSH
6345: LD_INT 107
6347: PPUSH
6348: LD_INT 118
6350: PPUSH
6351: CALL_OW 111
6355: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
6356: LD_EXP 18
6360: PPUSH
6361: CALL_OW 301
6365: PUSH
6366: LD_EXP 28
6370: PUSH
6371: LD_INT 1
6373: EQUAL
6374: AND
6375: IFFALSE 6508
6377: GO 6379
6379: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
6380: LD_EXP 1
6384: PPUSH
6385: LD_STRING D5b-JMM-1
6387: PPUSH
6388: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
6392: LD_INT 22
6394: PUSH
6395: LD_INT 1
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: PUSH
6402: LD_INT 26
6404: PUSH
6405: LD_INT 1
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: PUSH
6412: LD_INT 2
6414: PUSH
6415: LD_INT 25
6417: PUSH
6418: LD_INT 1
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 25
6427: PUSH
6428: LD_INT 2
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: PUSH
6435: LD_INT 25
6437: PUSH
6438: LD_INT 3
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: PUSH
6445: LD_INT 25
6447: PUSH
6448: LD_INT 4
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: PUSH
6455: LD_INT 25
6457: PUSH
6458: LD_INT 5
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: LIST
6477: PPUSH
6478: CALL_OW 69
6482: PPUSH
6483: LD_STRING D5b-Sol1-1
6485: PPUSH
6486: LD_STRING 
6488: PPUSH
6489: CALL 8338 0 3
// ChangeMissionObjectives ( M2a ) ;
6493: LD_STRING M2a
6495: PPUSH
6496: CALL_OW 337
// burlakStatus := 1 ;
6500: LD_ADDR_EXP 29
6504: PUSH
6505: LD_INT 1
6507: ST_TO_ADDR
// end ;
6508: END
// every 0 0$1 trigger IsDead ( Stevens ) do
6509: LD_EXP 2
6513: PPUSH
6514: CALL_OW 301
6518: IFFALSE 6655
6520: GO 6522
6522: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
6523: LD_EXP 1
6527: PPUSH
6528: LD_STRING D6-JMM-1
6530: PPUSH
6531: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
6535: LD_INT 22
6537: PUSH
6538: LD_INT 1
6540: PUSH
6541: EMPTY
6542: LIST
6543: LIST
6544: PUSH
6545: LD_INT 26
6547: PUSH
6548: LD_INT 1
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PUSH
6555: LD_INT 2
6557: PUSH
6558: LD_INT 25
6560: PUSH
6561: LD_INT 1
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PUSH
6568: LD_INT 25
6570: PUSH
6571: LD_INT 2
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: LD_INT 25
6580: PUSH
6581: LD_INT 3
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: LD_INT 25
6590: PUSH
6591: LD_INT 4
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PUSH
6598: LD_INT 25
6600: PUSH
6601: LD_INT 5
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: PPUSH
6621: CALL_OW 69
6625: PPUSH
6626: LD_STRING D6-Sol1-1
6628: PPUSH
6629: LD_STRING 
6631: PPUSH
6632: CALL 8338 0 3
// Say ( JMM , D6-JMM-2 ) ;
6636: LD_EXP 1
6640: PPUSH
6641: LD_STRING D6-JMM-2
6643: PPUSH
6644: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
6648: LD_STRING M1a
6650: PPUSH
6651: CALL_OW 337
// end ;
6655: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
6656: LD_INT 25
6658: PPUSH
6659: LD_INT 1
6661: PPUSH
6662: CALL_OW 321
6666: PUSH
6667: LD_INT 2
6669: EQUAL
6670: IFFALSE 6687
6672: GO 6674
6674: DISABLE
// Say ( Stevens , D6-Huck-2 ) ;
6675: LD_EXP 2
6679: PPUSH
6680: LD_STRING D6-Huck-2
6682: PPUSH
6683: CALL_OW 88
6687: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_warehouse ] , [ f_not , [ f_constructed ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] , [ f_not , [ f_constructed ] ] ] ) do
6688: LD_INT 22
6690: PUSH
6691: LD_INT 1
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PUSH
6698: LD_INT 2
6700: PUSH
6701: LD_INT 34
6703: PUSH
6704: LD_INT 8
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: PUSH
6711: LD_INT 35
6713: PUSH
6714: LD_INT 8
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: LIST
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PPUSH
6730: CALL_OW 69
6734: PUSH
6735: LD_INT 5
6737: PPUSH
6738: LD_INT 22
6740: PUSH
6741: LD_INT 1
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: PUSH
6748: LD_INT 21
6750: PUSH
6751: LD_INT 3
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PUSH
6758: LD_INT 30
6760: PUSH
6761: LD_INT 1
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: PUSH
6768: LD_INT 3
6770: PUSH
6771: LD_INT 57
6773: PUSH
6774: EMPTY
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: PPUSH
6787: CALL_OW 70
6791: AND
6792: PUSH
6793: LD_INT 5
6795: PPUSH
6796: LD_INT 22
6798: PUSH
6799: LD_INT 1
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 21
6808: PUSH
6809: LD_INT 3
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PUSH
6816: LD_INT 30
6818: PUSH
6819: LD_INT 5
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 3
6828: PUSH
6829: LD_INT 57
6831: PUSH
6832: EMPTY
6833: LIST
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: PPUSH
6845: CALL_OW 70
6849: AND
6850: IFFALSE 6892
6852: GO 6854
6854: DISABLE
// begin DialogueOn ;
6855: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6859: LD_EXP 1
6863: PPUSH
6864: LD_STRING D7-JMM-1
6866: PPUSH
6867: CALL_OW 88
// DialogueOff ;
6871: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
6875: LD_STRING M4
6877: PPUSH
6878: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
6882: LD_INT 5
6884: PPUSH
6885: LD_INT 0
6887: PPUSH
6888: CALL_OW 424
// end ;
6892: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) and eventVar3 = 1 and radationResearched = 0 do
6893: LD_INT 6
6895: PPUSH
6896: LD_INT 22
6898: PUSH
6899: LD_INT 1
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: LD_INT 25
6908: PUSH
6909: LD_INT 4
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PPUSH
6920: CALL_OW 70
6924: PUSH
6925: LD_EXP 38
6929: PUSH
6930: LD_INT 1
6932: EQUAL
6933: AND
6934: PUSH
6935: LD_EXP 30
6939: PUSH
6940: LD_INT 0
6942: EQUAL
6943: AND
6944: IFFALSE 7009
6946: GO 6948
6948: DISABLE
// begin enable ;
6949: ENABLE
// AmSciSib := FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
6950: LD_ADDR_EXP 27
6954: PUSH
6955: LD_INT 6
6957: PPUSH
6958: LD_INT 22
6960: PUSH
6961: LD_INT 1
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PUSH
6968: LD_INT 25
6970: PUSH
6971: LD_INT 4
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PPUSH
6982: CALL_OW 70
6986: PUSH
6987: LD_INT 1
6989: ARRAY
6990: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
6991: LD_INT 6
6993: PPUSH
6994: LD_INT 0
6996: PPUSH
6997: CALL_OW 424
// radationResearched := 1 ;
7001: LD_ADDR_EXP 30
7005: PUSH
7006: LD_INT 1
7008: ST_TO_ADDR
// end ;
7009: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
7010: LD_EXP 27
7014: PPUSH
7015: CALL_OW 301
7019: PUSH
7020: LD_EXP 30
7024: PUSH
7025: LD_INT 1
7027: EQUAL
7028: AND
7029: IFFALSE 7065
7031: GO 7033
7033: DISABLE
// begin enable ;
7034: ENABLE
// radationResearched = 0 ;
7035: LD_ADDR_EXP 30
7039: PUSH
7040: LD_INT 0
7042: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7043: LD_INT 6
7045: PPUSH
7046: LD_INT 1
7048: PPUSH
7049: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
7053: LD_EXP 1
7057: PPUSH
7058: LD_STRING D9a-JMM-1
7060: PPUSH
7061: CALL_OW 88
// end ; end_of_file
7065: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = us_siberium_rocket and eventVar1 = 0 then
7066: LD_VAR 0 5
7070: PUSH
7071: LD_INT 8
7073: EQUAL
7074: PUSH
7075: LD_EXP 36
7079: PUSH
7080: LD_INT 0
7082: EQUAL
7083: AND
7084: IFFALSE 7137
// begin eventVar1 := 1 ;
7086: LD_ADDR_EXP 36
7090: PUSH
7091: LD_INT 1
7093: ST_TO_ADDR
// DialogueOn ;
7094: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
7098: LD_EXP 1
7102: PPUSH
7103: LD_STRING D6a-JMM-1
7105: PPUSH
7106: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
7110: LD_EXP 16
7114: PPUSH
7115: LD_STRING D6a-Pow-1
7117: PPUSH
7118: CALL_OW 94
// DialogueOff ;
7122: CALL_OW 7
// wait ( 3 3$0 ) ;
7126: LD_INT 6300
7128: PPUSH
7129: CALL_OW 67
// PowellSupport ;
7133: CALL 1870 0 0
// end ; end ;
7137: PPOPN 5
7139: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7140: LD_VAR 0 1
7144: PPUSH
7145: CALL 27136 0 1
// if un = JMM then
7149: LD_VAR 0 1
7153: PUSH
7154: LD_EXP 1
7158: EQUAL
7159: IFFALSE 7168
// YouLost ( JMM ) ;
7161: LD_STRING JMM
7163: PPUSH
7164: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
7168: LD_VAR 0 1
7172: PPUSH
7173: CALL_OW 264
7177: PUSH
7178: LD_INT 31
7180: EQUAL
7181: IFFALSE 7197
// achivCounter := achivCounter + 1 ;
7183: LD_ADDR_EXP 42
7187: PUSH
7188: LD_EXP 42
7192: PUSH
7193: LD_INT 1
7195: PLUS
7196: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
7197: LD_VAR 0 1
7201: PPUSH
7202: CALL_OW 255
7206: PUSH
7207: LD_INT 1
7209: NONEQUAL
7210: PUSH
7211: LD_VAR 0 1
7215: PPUSH
7216: CALL_OW 247
7220: PUSH
7221: LD_INT 2
7223: EQUAL
7224: AND
7225: IFFALSE 7241
// destroyCounter := destroyCounter + 1 ;
7227: LD_ADDR_EXP 43
7231: PUSH
7232: LD_EXP 43
7236: PUSH
7237: LD_INT 1
7239: PLUS
7240: ST_TO_ADDR
// end ;
7241: PPOPN 1
7243: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
7244: LD_VAR 0 2
7248: PUSH
7249: LD_EXP 19
7253: EQUAL
7254: IFFALSE 7263
// SetAchievement ( ACH_MASHA ) ;
7256: LD_STRING ACH_MASHA
7258: PPUSH
7259: CALL_OW 543
// end ;
7263: PPOPN 4
7265: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
7266: LD_VAR 0 1
7270: PPUSH
7271: LD_VAR 0 2
7275: PPUSH
7276: CALL 27194 0 2
// if GetWeapon ( vehicle ) = us_siberium_rocket and eventVar2 = 0 then
7280: LD_VAR 0 1
7284: PPUSH
7285: CALL_OW 264
7289: PUSH
7290: LD_INT 8
7292: EQUAL
7293: PUSH
7294: LD_EXP 37
7298: PUSH
7299: LD_INT 0
7301: EQUAL
7302: AND
7303: IFFALSE 7372
// begin eventVar2 := 1 ;
7305: LD_ADDR_EXP 37
7309: PUSH
7310: LD_INT 1
7312: ST_TO_ADDR
// DialogueOn ;
7313: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
7317: LD_EXP 1
7321: PPUSH
7322: LD_STRING D6b-JMM-1
7324: PPUSH
7325: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
7329: LD_EXP 16
7333: PPUSH
7334: LD_STRING D6b-Pow-1
7336: PPUSH
7337: CALL_OW 94
// DialogueOff ;
7341: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
7345: LD_INT 5
7347: PPUSH
7348: LD_INT 1
7350: PPUSH
7351: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
7355: LD_INT 7
7357: PPUSH
7358: LD_INT 1
7360: PPUSH
7361: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
7365: LD_STRING M3
7367: PPUSH
7368: CALL_OW 337
// end ; end ;
7372: PPOPN 2
7374: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
7375: LD_VAR 0 2
7379: PPUSH
7380: LD_VAR 0 3
7384: PPUSH
7385: LD_INT 5
7387: PPUSH
7388: CALL_OW 309
7392: PUSH
7393: LD_EXP 38
7397: PUSH
7398: LD_INT 0
7400: EQUAL
7401: AND
7402: IFFALSE 7627
// begin eventVar3 := 1 ;
7404: LD_ADDR_EXP 38
7408: PUSH
7409: LD_INT 1
7411: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7412: LD_INT 175
7414: PPUSH
7415: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_radar ] ] ) then
7419: LD_INT 7
7421: PPUSH
7422: LD_INT 22
7424: PUSH
7425: LD_INT 1
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PUSH
7432: LD_INT 21
7434: PUSH
7435: LD_INT 2
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PUSH
7442: LD_INT 34
7444: PUSH
7445: LD_INT 11
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: LIST
7456: PPUSH
7457: CALL_OW 70
7461: IFFALSE 7480
// begin radarOnSpot := 1 ;
7463: LD_ADDR_EXP 31
7467: PUSH
7468: LD_INT 1
7470: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
7471: LD_STRING M3a
7473: PPUSH
7474: CALL_OW 337
// end else
7478: GO 7487
// ChangeMissionObjectives ( M3b ) ;
7480: LD_STRING M3b
7482: PPUSH
7483: CALL_OW 337
// DialogueOn ;
7487: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
7491: LD_EXP 2
7495: PPUSH
7496: LD_STRING D8-Huck-1
7498: PPUSH
7499: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
7503: LD_EXP 1
7507: PPUSH
7508: LD_STRING D8-JMM-1
7510: PPUSH
7511: CALL_OW 88
// if IsOk ( Stevens ) then
7515: LD_EXP 2
7519: PPUSH
7520: CALL_OW 302
7524: IFFALSE 7586
// begin Say ( Stevens , D8-Huck-2 ) ;
7526: LD_EXP 2
7530: PPUSH
7531: LD_STRING D8-Huck-2
7533: PPUSH
7534: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
7538: LD_EXP 1
7542: PPUSH
7543: LD_STRING D8-JMM-2
7545: PPUSH
7546: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
7550: LD_EXP 2
7554: PPUSH
7555: LD_STRING D8-Huck-3
7557: PPUSH
7558: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
7562: LD_EXP 1
7566: PPUSH
7567: LD_STRING D8-JMM-3
7569: PPUSH
7570: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
7574: LD_EXP 2
7578: PPUSH
7579: LD_STRING D8-Huck-4
7581: PPUSH
7582: CALL_OW 88
// end ; DialogueOff ;
7586: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
7590: LD_INT 5
7592: PPUSH
7593: LD_INT 0
7595: PPUSH
7596: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
7600: LD_INT 7
7602: PPUSH
7603: LD_INT 0
7605: PPUSH
7606: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7610: LD_INT 6
7612: PPUSH
7613: LD_INT 1
7615: PPUSH
7616: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
7620: LD_STRING M5
7622: PPUSH
7623: CALL_OW 337
// end ; end ;
7627: PPOPN 3
7629: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 and ( GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium ) then
7630: LD_EXP 27
7634: PPUSH
7635: CALL_OW 302
7639: PUSH
7640: LD_VAR 0 2
7644: PUSH
7645: LD_EXP 27
7649: EQUAL
7650: AND
7651: PUSH
7652: LD_EXP 39
7656: PUSH
7657: LD_INT 0
7659: EQUAL
7660: AND
7661: PUSH
7662: LD_EXP 38
7666: PUSH
7667: LD_INT 1
7669: EQUAL
7670: AND
7671: PUSH
7672: LD_VAR 0 1
7676: PPUSH
7677: LD_INT 1
7679: PPUSH
7680: CALL_OW 268
7684: PUSH
7685: LD_INT 11
7687: EQUAL
7688: PUSH
7689: LD_VAR 0 1
7693: PPUSH
7694: LD_INT 2
7696: PPUSH
7697: CALL_OW 268
7701: PUSH
7702: LD_INT 11
7704: EQUAL
7705: OR
7706: AND
7707: IFFALSE 7717
// eventVar4 := 1 ;
7709: LD_ADDR_EXP 39
7713: PUSH
7714: LD_INT 1
7716: ST_TO_ADDR
// end ;
7717: PPOPN 2
7719: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
7720: LD_INT 0
7722: PPUSH
7723: PPUSH
// begin if GetNation ( unit ) = nation_arabian then
7724: LD_VAR 0 1
7728: PPUSH
7729: CALL_OW 248
7733: PUSH
7734: LD_INT 2
7736: EQUAL
7737: IFFALSE 7969
// begin for i := sibDeposits downto 1 do
7739: LD_ADDR_VAR 0 4
7743: PUSH
7744: DOUBLE
7745: LD_EXP 32
7749: INC
7750: ST_TO_ADDR
7751: LD_INT 1
7753: PUSH
7754: FOR_DOWNTO
7755: IFFALSE 7825
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
7757: LD_EXP 32
7761: PUSH
7762: LD_VAR 0 4
7766: ARRAY
7767: PUSH
7768: LD_INT 1
7770: ARRAY
7771: PUSH
7772: LD_VAR 0 2
7776: EQUAL
7777: PUSH
7778: LD_EXP 32
7782: PUSH
7783: LD_VAR 0 4
7787: ARRAY
7788: PUSH
7789: LD_INT 2
7791: ARRAY
7792: PUSH
7793: LD_VAR 0 3
7797: EQUAL
7798: AND
7799: IFFALSE 7823
// begin sibDeposits := Delete ( sibDeposits , i ) ;
7801: LD_ADDR_EXP 32
7805: PUSH
7806: LD_EXP 32
7810: PPUSH
7811: LD_VAR 0 4
7815: PPUSH
7816: CALL_OW 3
7820: ST_TO_ADDR
// break ;
7821: GO 7825
// end ;
7823: GO 7754
7825: POP
7826: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
7827: LD_EXP 40
7831: PUSH
7832: LD_INT 0
7834: EQUAL
7835: PUSH
7836: LD_VAR 0 2
7840: PPUSH
7841: LD_VAR 0 3
7845: PPUSH
7846: CALL_OW 428
7850: PUSH
7851: LD_INT 22
7853: PUSH
7854: LD_INT 1
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: PPUSH
7861: CALL_OW 69
7865: IN
7866: AND
7867: IFFALSE 7969
// begin eventVar5 := 1 ;
7869: LD_ADDR_EXP 40
7873: PUSH
7874: LD_INT 1
7876: ST_TO_ADDR
// DialogueOn ;
7877: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
7881: LD_EXP 2
7885: PPUSH
7886: LD_STRING D4-Sci1-1
7888: PPUSH
7889: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7893: LD_EXP 1
7897: PPUSH
7898: LD_STRING D4-JMM-1
7900: PPUSH
7901: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
7905: LD_EXP 2
7909: PPUSH
7910: LD_STRING D4-Sci1-2
7912: PPUSH
7913: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7917: LD_EXP 1
7921: PPUSH
7922: LD_STRING D4-JMM-2
7924: PPUSH
7925: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
7929: LD_EXP 2
7933: PPUSH
7934: LD_STRING D4-Sci1-3
7936: PPUSH
7937: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
7941: LD_EXP 1
7945: PPUSH
7946: LD_STRING D4-JMM-3
7948: PPUSH
7949: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
7953: LD_EXP 1
7957: PPUSH
7958: LD_STRING D4-JMM-3a
7960: PPUSH
7961: CALL_OW 88
// DialogueOff ;
7965: CALL_OW 7
// end ; end ; end ;
7969: PPOPN 5
7971: END
// on SiberiteDepositDestroyed ( x , y ) do begin sibDestroyedCounter := Inc ( sibDestroyedCounter ) ;
7972: LD_ADDR_EXP 33
7976: PUSH
7977: LD_EXP 33
7981: PPUSH
7982: CALL 71513 0 1
7986: ST_TO_ADDR
// end ;
7987: PPOPN 2
7989: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = b_depot and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 1 then
7990: LD_VAR 0 1
7994: PPUSH
7995: CALL_OW 255
7999: PUSH
8000: LD_INT 1
8002: EQUAL
8003: PUSH
8004: LD_VAR 0 1
8008: PPUSH
8009: CALL_OW 266
8013: PUSH
8014: LD_INT 0
8016: EQUAL
8017: AND
8018: PUSH
8019: LD_INT 22
8021: PUSH
8022: LD_INT 1
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PUSH
8029: LD_INT 21
8031: PUSH
8032: LD_INT 3
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: PUSH
8039: LD_INT 2
8041: PUSH
8042: LD_INT 30
8044: PUSH
8045: LD_INT 0
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: PUSH
8052: LD_INT 30
8054: PUSH
8055: LD_INT 1
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: LIST
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: LIST
8071: PPUSH
8072: CALL_OW 69
8076: PUSH
8077: LD_INT 1
8079: EQUAL
8080: AND
8081: IFFALSE 8095
// SetBName ( building , omega ) ;
8083: LD_VAR 0 1
8087: PPUSH
8088: LD_STRING omega
8090: PPUSH
8091: CALL_OW 500
// end ;
8095: PPOPN 2
8097: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
8098: LD_VAR 0 1
8102: PPUSH
8103: CALL 27178 0 1
// end ;
8107: PPOPN 1
8109: END
// on SailEvent ( event ) do begin if event = eventArabianAttack then
8110: LD_VAR 0 1
8114: PUSH
8115: LD_EXP 44
8119: EQUAL
8120: IFFALSE 8126
// ArabianAttack ;
8122: CALL 10266 0 0
// if event = eventRussianAttack then
8126: LD_VAR 0 1
8130: PUSH
8131: LD_EXP 45
8135: EQUAL
8136: IFFALSE 8142
// RussianAttack ;
8138: CALL 10631 0 0
// end ;
8142: PPOPN 1
8144: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = eventContaminate then
8145: LD_VAR 0 1
8149: PUSH
8150: LD_EXP 46
8154: EQUAL
8155: IFFALSE 8249
// begin if IsOk ( p1 ) and ValidHex ( p2 , p3 ) then
8157: LD_VAR 0 2
8161: PPUSH
8162: CALL_OW 302
8166: PUSH
8167: LD_VAR 0 3
8171: PPUSH
8172: LD_VAR 0 4
8176: PPUSH
8177: CALL_OW 488
8181: AND
8182: IFFALSE 8249
// begin repeat wait ( 0 0$1 ) ;
8184: LD_INT 35
8186: PPUSH
8187: CALL_OW 67
// if not HasTask ( p1 ) then
8191: LD_VAR 0 2
8195: PPUSH
8196: CALL_OW 314
8200: NOT
8201: IFFALSE 8237
// begin ComContaminate ( p1 , p2 , p3 ) ;
8203: LD_VAR 0 2
8207: PPUSH
8208: LD_VAR 0 3
8212: PPUSH
8213: LD_VAR 0 4
8217: PPUSH
8218: CALL_OW 158
// AddComMoveXY ( p1 , 42 , 3 ) ;
8222: LD_VAR 0 2
8226: PPUSH
8227: LD_INT 42
8229: PPUSH
8230: LD_INT 3
8232: PPUSH
8233: CALL_OW 171
// end ; until not IsOk ( p1 ) ;
8237: LD_VAR 0 2
8241: PPUSH
8242: CALL_OW 302
8246: NOT
8247: IFFALSE 8184
// end ; end ; end ;
8249: PPOPN 7
8251: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 8 ] then
8252: LD_VAR 0 1
8256: PPUSH
8257: CALL_OW 255
8261: PUSH
8262: LD_INT 3
8264: PUSH
8265: LD_INT 8
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: IN
8272: IFFALSE 8335
// begin ComMoveXY ( driver , 41 , 2 ) ;
8274: LD_VAR 0 1
8278: PPUSH
8279: LD_INT 41
8281: PPUSH
8282: LD_INT 2
8284: PPUSH
8285: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8289: LD_INT 35
8291: PPUSH
8292: CALL_OW 67
// if IsDead ( driver ) then
8296: LD_VAR 0 1
8300: PPUSH
8301: CALL_OW 301
8305: IFFALSE 8309
// exit ;
8307: GO 8335
// until IsAt ( driver , 41 , 2 ) ;
8309: LD_VAR 0 1
8313: PPUSH
8314: LD_INT 41
8316: PPUSH
8317: LD_INT 2
8319: PPUSH
8320: CALL_OW 307
8324: IFFALSE 8289
// RemoveUnit ( driver ) ;
8326: LD_VAR 0 1
8330: PPUSH
8331: CALL_OW 64
// end ; end ; end_of_file
8335: PPOPN 4
8337: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
8338: LD_INT 0
8340: PPUSH
8341: PPUSH
8342: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
8343: LD_ADDR_VAR 0 1
8347: PUSH
8348: LD_VAR 0 1
8352: PUSH
8353: LD_EXP 1
8357: PUSH
8358: LD_EXP 2
8362: PUSH
8363: LD_EXP 3
8367: PUSH
8368: LD_EXP 4
8372: PUSH
8373: LD_EXP 5
8377: PUSH
8378: LD_EXP 6
8382: PUSH
8383: LD_EXP 7
8387: PUSH
8388: LD_EXP 8
8392: PUSH
8393: LD_EXP 9
8397: PUSH
8398: LD_EXP 10
8402: PUSH
8403: LD_EXP 11
8407: PUSH
8408: LD_EXP 12
8412: PUSH
8413: LD_EXP 13
8417: PUSH
8418: LD_EXP 14
8422: PUSH
8423: LD_EXP 16
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: DIFF
8445: ST_TO_ADDR
// if not characters then
8446: LD_VAR 0 1
8450: NOT
8451: IFFALSE 8455
// exit ;
8453: GO 8534
// speaker := characters [ rand ( 1 , characters ) ] ;
8455: LD_ADDR_VAR 0 6
8459: PUSH
8460: LD_VAR 0 1
8464: PUSH
8465: LD_INT 1
8467: PPUSH
8468: LD_VAR 0 1
8472: PPUSH
8473: CALL_OW 12
8477: ARRAY
8478: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
8479: LD_VAR 0 6
8483: PPUSH
8484: CALL_OW 258
8488: PUSH
8489: LD_INT 1
8491: EQUAL
8492: IFFALSE 8510
// Say ( speaker , dialogMID ) else
8494: LD_VAR 0 6
8498: PPUSH
8499: LD_VAR 0 2
8503: PPUSH
8504: CALL_OW 88
8508: GO 8524
// Say ( speaker , dialogFID ) ;
8510: LD_VAR 0 6
8514: PPUSH
8515: LD_VAR 0 3
8519: PPUSH
8520: CALL_OW 88
// result := speaker ;
8524: LD_ADDR_VAR 0 4
8528: PUSH
8529: LD_VAR 0 6
8533: ST_TO_ADDR
// end ;
8534: LD_VAR 0 4
8538: RET
// export function PrepareDifficulty ; begin
8539: LD_INT 0
8541: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
8542: LD_INT 5
8544: PPUSH
8545: LD_INT 8
8547: PPUSH
8548: LD_INT 2
8550: PPUSH
8551: CALL_OW 322
// if Difficulty = 1 then
8555: LD_OWVAR 67
8559: PUSH
8560: LD_INT 1
8562: EQUAL
8563: IFFALSE 8682
// begin SetTech ( 66 , 8 , state_researched ) ;
8565: LD_INT 66
8567: PPUSH
8568: LD_INT 8
8570: PPUSH
8571: LD_INT 2
8573: PPUSH
8574: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
8578: LD_INT 67
8580: PPUSH
8581: LD_INT 8
8583: PPUSH
8584: LD_INT 0
8586: PPUSH
8587: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8591: LD_INT 68
8593: PPUSH
8594: LD_INT 8
8596: PPUSH
8597: LD_INT 0
8599: PPUSH
8600: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8604: LD_INT 51
8606: PPUSH
8607: LD_INT 8
8609: PPUSH
8610: LD_INT 2
8612: PPUSH
8613: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
8617: LD_INT 52
8619: PPUSH
8620: LD_INT 8
8622: PPUSH
8623: LD_INT 0
8625: PPUSH
8626: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
8630: LD_INT 53
8632: PPUSH
8633: LD_INT 8
8635: PPUSH
8636: LD_INT 0
8638: PPUSH
8639: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8643: LD_INT 60
8645: PPUSH
8646: LD_INT 8
8648: PPUSH
8649: LD_INT 2
8651: PPUSH
8652: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
8656: LD_INT 61
8658: PPUSH
8659: LD_INT 8
8661: PPUSH
8662: LD_INT 0
8664: PPUSH
8665: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8669: LD_INT 62
8671: PPUSH
8672: LD_INT 8
8674: PPUSH
8675: LD_INT 0
8677: PPUSH
8678: CALL_OW 322
// end ; if Difficulty = 2 then
8682: LD_OWVAR 67
8686: PUSH
8687: LD_INT 2
8689: EQUAL
8690: IFFALSE 8809
// begin SetTech ( 66 , 8 , state_researched ) ;
8692: LD_INT 66
8694: PPUSH
8695: LD_INT 8
8697: PPUSH
8698: LD_INT 2
8700: PPUSH
8701: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8705: LD_INT 67
8707: PPUSH
8708: LD_INT 8
8710: PPUSH
8711: LD_INT 2
8713: PPUSH
8714: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8718: LD_INT 68
8720: PPUSH
8721: LD_INT 8
8723: PPUSH
8724: LD_INT 0
8726: PPUSH
8727: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8731: LD_INT 51
8733: PPUSH
8734: LD_INT 8
8736: PPUSH
8737: LD_INT 2
8739: PPUSH
8740: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8744: LD_INT 52
8746: PPUSH
8747: LD_INT 8
8749: PPUSH
8750: LD_INT 2
8752: PPUSH
8753: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8757: LD_INT 53
8759: PPUSH
8760: LD_INT 8
8762: PPUSH
8763: LD_INT 2
8765: PPUSH
8766: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8770: LD_INT 60
8772: PPUSH
8773: LD_INT 8
8775: PPUSH
8776: LD_INT 2
8778: PPUSH
8779: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8783: LD_INT 61
8785: PPUSH
8786: LD_INT 8
8788: PPUSH
8789: LD_INT 2
8791: PPUSH
8792: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8796: LD_INT 62
8798: PPUSH
8799: LD_INT 8
8801: PPUSH
8802: LD_INT 0
8804: PPUSH
8805: CALL_OW 322
// end ; if Difficulty >= 3 then
8809: LD_OWVAR 67
8813: PUSH
8814: LD_INT 3
8816: GREATEREQUAL
8817: IFFALSE 8936
// begin SetTech ( 66 , 8 , state_researched ) ;
8819: LD_INT 66
8821: PPUSH
8822: LD_INT 8
8824: PPUSH
8825: LD_INT 2
8827: PPUSH
8828: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8832: LD_INT 67
8834: PPUSH
8835: LD_INT 8
8837: PPUSH
8838: LD_INT 2
8840: PPUSH
8841: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8845: LD_INT 68
8847: PPUSH
8848: LD_INT 8
8850: PPUSH
8851: LD_INT 0
8853: PPUSH
8854: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8858: LD_INT 51
8860: PPUSH
8861: LD_INT 8
8863: PPUSH
8864: LD_INT 2
8866: PPUSH
8867: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8871: LD_INT 52
8873: PPUSH
8874: LD_INT 8
8876: PPUSH
8877: LD_INT 2
8879: PPUSH
8880: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8884: LD_INT 53
8886: PPUSH
8887: LD_INT 8
8889: PPUSH
8890: LD_INT 2
8892: PPUSH
8893: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8897: LD_INT 60
8899: PPUSH
8900: LD_INT 8
8902: PPUSH
8903: LD_INT 2
8905: PPUSH
8906: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8910: LD_INT 61
8912: PPUSH
8913: LD_INT 8
8915: PPUSH
8916: LD_INT 2
8918: PPUSH
8919: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8923: LD_INT 62
8925: PPUSH
8926: LD_INT 8
8928: PPUSH
8929: LD_INT 0
8931: PPUSH
8932: CALL_OW 322
// end ; end ;
8936: LD_VAR 0 1
8940: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8941: LD_INT 0
8943: PPUSH
8944: PPUSH
// for i in charactersList do
8945: LD_ADDR_VAR 0 4
8949: PUSH
8950: LD_VAR 0 1
8954: PUSH
8955: FOR_IN
8956: IFFALSE 8974
// SaveCharacters ( i , ident ) ;
8958: LD_VAR 0 4
8962: PPUSH
8963: LD_VAR 0 2
8967: PPUSH
8968: CALL_OW 38
8972: GO 8955
8974: POP
8975: POP
// end ; end_of_file
8976: LD_VAR 0 3
8980: RET
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
8981: LD_EXP 39
8985: PUSH
8986: LD_INT 1
8988: EQUAL
8989: IFFALSE 9961
8991: GO 8993
8993: DISABLE
8994: LD_INT 0
8996: PPUSH
8997: PPUSH
8998: PPUSH
// begin m1 := false ;
8999: LD_ADDR_VAR 0 1
9003: PUSH
9004: LD_INT 0
9006: ST_TO_ADDR
// m2 := false ;
9007: LD_ADDR_VAR 0 2
9011: PUSH
9012: LD_INT 0
9014: ST_TO_ADDR
// m3 := false ;
9015: LD_ADDR_VAR 0 3
9019: PUSH
9020: LD_INT 0
9022: ST_TO_ADDR
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
9023: LD_INT 22
9025: PUSH
9026: LD_INT 1
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PUSH
9033: LD_INT 21
9035: PUSH
9036: LD_INT 1
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PUSH
9043: LD_INT 23
9045: PUSH
9046: LD_INT 1
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: PUSH
9053: LD_INT 50
9055: PUSH
9056: EMPTY
9057: LIST
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: PPUSH
9065: CALL_OW 69
9069: PPUSH
9070: CALL 34543 0 1
9074: PUSH
9075: LD_INT 5
9077: LESS
9078: IFFALSE 9089
// begin YouLost ( Troops ) ;
9080: LD_STRING Troops
9082: PPUSH
9083: CALL_OW 104
// exit ;
9087: GO 9961
// end ; DialogueOn ;
9089: CALL_OW 6
// Say ( JMM , D9b-JMM-1 ) ;
9093: LD_EXP 1
9097: PPUSH
9098: LD_STRING D9b-JMM-1
9100: PPUSH
9101: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
9105: LD_EXP 16
9109: PPUSH
9110: LD_STRING D9b-Pow-1
9112: PPUSH
9113: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
9117: LD_EXP 1
9121: PPUSH
9122: LD_STRING D9b-JMM-2
9124: PPUSH
9125: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
9129: LD_EXP 16
9133: PPUSH
9134: LD_STRING D9b-Pow-2
9136: PPUSH
9137: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
9141: LD_EXP 1
9145: PPUSH
9146: LD_STRING D9b-JMM-3
9148: PPUSH
9149: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
9153: LD_EXP 16
9157: PPUSH
9158: LD_STRING D9b-Pow-3
9160: PPUSH
9161: CALL_OW 94
// if tick <= 60 60$00 then
9165: LD_OWVAR 1
9169: PUSH
9170: LD_INT 126000
9172: LESSEQUAL
9173: IFFALSE 9182
// SetAchievement ( ACH_ASPEED_13 ) ;
9175: LD_STRING ACH_ASPEED_13
9177: PPUSH
9178: CALL_OW 543
// if burlakStatus = 1 then
9182: LD_EXP 29
9186: PUSH
9187: LD_INT 1
9189: EQUAL
9190: IFFALSE 9212
// begin m1 := true ;
9192: LD_ADDR_VAR 0 1
9196: PUSH
9197: LD_INT 1
9199: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
9200: LD_STRING Burlak
9202: PPUSH
9203: LD_INT 1
9205: PPUSH
9206: CALL_OW 101
// end else
9210: GO 9223
// begin AddMedal ( Burlak , - 1 ) ;
9212: LD_STRING Burlak
9214: PPUSH
9215: LD_INT 1
9217: NEG
9218: PPUSH
9219: CALL_OW 101
// end ; if IsOk ( Stevens ) then
9223: LD_EXP 2
9227: PPUSH
9228: CALL_OW 302
9232: IFFALSE 9254
// begin m2 := true ;
9234: LD_ADDR_VAR 0 2
9238: PUSH
9239: LD_INT 1
9241: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
9242: LD_STRING Stevens
9244: PPUSH
9245: LD_INT 1
9247: PPUSH
9248: CALL_OW 101
// end else
9252: GO 9265
// begin AddMedal ( Stevens , - 1 ) ;
9254: LD_STRING Stevens
9256: PPUSH
9257: LD_INT 1
9259: NEG
9260: PPUSH
9261: CALL_OW 101
// end ; if radarOnSpot = 1 then
9265: LD_EXP 31
9269: PUSH
9270: LD_INT 1
9272: EQUAL
9273: IFFALSE 9295
// begin m3 := true ;
9275: LD_ADDR_VAR 0 3
9279: PUSH
9280: LD_INT 1
9282: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
9283: LD_STRING Observation
9285: PPUSH
9286: LD_INT 1
9288: PPUSH
9289: CALL_OW 101
// end else
9293: GO 9306
// begin AddMedal ( Observation , - 1 ) ;
9295: LD_STRING Observation
9297: PPUSH
9298: LD_INT 1
9300: NEG
9301: PPUSH
9302: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
9306: LD_VAR 0 1
9310: PUSH
9311: LD_VAR 0 2
9315: AND
9316: PUSH
9317: LD_VAR 0 3
9321: AND
9322: PUSH
9323: LD_OWVAR 67
9327: PUSH
9328: LD_INT 3
9330: GREATEREQUAL
9331: AND
9332: IFFALSE 9344
// SetAchievementEX ( ACH_AMER , 13 ) ;
9334: LD_STRING ACH_AMER
9336: PPUSH
9337: LD_INT 13
9339: PPUSH
9340: CALL_OW 564
// GiveMedals ( MAIN ) ;
9344: LD_STRING MAIN
9346: PPUSH
9347: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
9351: LD_EXP 29
9355: PPUSH
9356: LD_STRING 13_BurlakStatus_1
9358: PPUSH
9359: CALL_OW 39
// if IsLive ( Stevens ) then
9363: LD_EXP 2
9367: PPUSH
9368: CALL_OW 300
9372: IFFALSE 9386
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
9374: LD_INT 1
9376: PPUSH
9377: LD_STRING 13_StevensStatus_1
9379: PPUSH
9380: CALL_OW 39
9384: GO 9396
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
9386: LD_INT 0
9388: PPUSH
9389: LD_STRING 13_StevensStatus_1
9391: PPUSH
9392: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
9396: LD_INT 22
9398: PUSH
9399: LD_INT 1
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 21
9408: PUSH
9409: LD_INT 1
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: LD_INT 2
9418: PUSH
9419: LD_INT 25
9421: PUSH
9422: LD_INT 1
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PUSH
9429: LD_INT 25
9431: PUSH
9432: LD_INT 2
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: PUSH
9439: LD_INT 25
9441: PUSH
9442: LD_INT 3
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PUSH
9449: LD_INT 25
9451: PUSH
9452: LD_INT 4
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: LD_INT 25
9461: PUSH
9462: LD_INT 5
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 25
9471: PUSH
9472: LD_INT 8
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: LIST
9492: PPUSH
9493: CALL_OW 69
9497: PPUSH
9498: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
9502: LD_EXP 1
9506: PPUSH
9507: LD_EXP 35
9511: PUSH
9512: LD_STRING JMM
9514: STR
9515: PPUSH
9516: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9520: LD_EXP 8
9524: PPUSH
9525: LD_EXP 35
9529: PUSH
9530: LD_STRING Brown
9532: STR
9533: PPUSH
9534: CALL 8941 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9538: LD_EXP 4
9542: PPUSH
9543: LD_EXP 35
9547: PUSH
9548: LD_STRING Donaldson
9550: STR
9551: PPUSH
9552: CALL 8941 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9556: LD_EXP 5
9560: PPUSH
9561: LD_EXP 35
9565: PUSH
9566: LD_STRING Bobby
9568: STR
9569: PPUSH
9570: CALL 8941 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
9574: LD_EXP 6
9578: PPUSH
9579: LD_EXP 35
9583: PUSH
9584: LD_STRING Cyrus
9586: STR
9587: PPUSH
9588: CALL 8941 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
9592: LD_EXP 3
9596: PPUSH
9597: LD_EXP 35
9601: PUSH
9602: LD_STRING Lisa
9604: STR
9605: PPUSH
9606: CALL 8941 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
9610: LD_EXP 13
9614: PPUSH
9615: LD_EXP 35
9619: PUSH
9620: LD_STRING Frank
9622: STR
9623: PPUSH
9624: CALL 8941 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
9628: LD_EXP 14
9632: PPUSH
9633: LD_EXP 35
9637: PUSH
9638: LD_STRING Kikuchi
9640: STR
9641: PPUSH
9642: CALL 8941 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
9646: LD_EXP 10
9650: PPUSH
9651: LD_EXP 35
9655: PUSH
9656: LD_STRING Houten
9658: STR
9659: PPUSH
9660: CALL 8941 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
9664: LD_EXP 12
9668: PPUSH
9669: LD_EXP 35
9673: PUSH
9674: LD_STRING Gary
9676: STR
9677: PPUSH
9678: CALL 8941 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
9682: LD_EXP 11
9686: PPUSH
9687: LD_EXP 35
9691: PUSH
9692: LD_STRING Cornell
9694: STR
9695: PPUSH
9696: CALL 8941 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
9700: LD_EXP 7
9704: PPUSH
9705: LD_EXP 35
9709: PUSH
9710: LD_STRING Denis
9712: STR
9713: PPUSH
9714: CALL 8941 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
9718: LD_EXP 9
9722: PPUSH
9723: LD_EXP 35
9727: PUSH
9728: LD_STRING Gladstone
9730: STR
9731: PPUSH
9732: CALL 8941 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
9736: LD_EXP 2
9740: PPUSH
9741: LD_EXP 35
9745: PUSH
9746: LD_STRING Stevens
9748: STR
9749: PPUSH
9750: CALL 8941 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
9754: LD_INT 50
9756: PUSH
9757: EMPTY
9758: LIST
9759: PUSH
9760: LD_INT 22
9762: PUSH
9763: LD_INT 1
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PUSH
9770: LD_INT 21
9772: PUSH
9773: LD_INT 1
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PUSH
9780: LD_INT 2
9782: PUSH
9783: LD_INT 25
9785: PUSH
9786: LD_INT 1
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: LD_INT 25
9795: PUSH
9796: LD_INT 2
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PUSH
9803: LD_INT 25
9805: PUSH
9806: LD_INT 3
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PUSH
9813: LD_INT 25
9815: PUSH
9816: LD_INT 4
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: PUSH
9823: LD_INT 25
9825: PUSH
9826: LD_INT 5
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 25
9835: PUSH
9836: LD_INT 8
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: PPUSH
9858: CALL_OW 69
9862: PUSH
9863: LD_EXP 1
9867: PUSH
9868: LD_EXP 8
9872: PUSH
9873: LD_EXP 4
9877: PUSH
9878: LD_EXP 5
9882: PUSH
9883: LD_EXP 6
9887: PUSH
9888: LD_EXP 3
9892: PUSH
9893: LD_EXP 13
9897: PUSH
9898: LD_EXP 9
9902: PUSH
9903: LD_EXP 14
9907: PUSH
9908: LD_EXP 7
9912: PUSH
9913: LD_EXP 10
9917: PUSH
9918: LD_EXP 12
9922: PUSH
9923: LD_EXP 11
9927: PUSH
9928: LD_EXP 2
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: DIFF
9949: PPUSH
9950: LD_STRING 13_other_survivors
9952: PPUSH
9953: CALL_OW 38
// YouWin ;
9957: CALL_OW 103
// end ; end_of_file
9961: PPOPN 3
9963: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) and GetTech ( tech_SibFiss , 1 ) = state_enabled do var i , tmp , yourSiberite ;
9964: LD_EXP 33
9968: PUSH
9969: LD_INT 2
9971: EQUAL
9972: PUSH
9973: LD_INT 34
9975: PUSH
9976: LD_INT 8
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PPUSH
9983: CALL_OW 69
9987: NOT
9988: AND
9989: PUSH
9990: LD_INT 25
9992: PPUSH
9993: LD_INT 1
9995: PPUSH
9996: CALL_OW 321
10000: PUSH
10001: LD_INT 1
10003: EQUAL
10004: AND
10005: IFFALSE 10150
10007: GO 10009
10009: DISABLE
10010: LD_INT 0
10012: PPUSH
10013: PPUSH
10014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10015: LD_ADDR_VAR 0 2
10019: PUSH
10020: LD_INT 22
10022: PUSH
10023: LD_INT 1
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: LD_INT 21
10032: PUSH
10033: LD_INT 3
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: LD_INT 2
10042: PUSH
10043: LD_INT 30
10045: PUSH
10046: LD_INT 0
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: LD_INT 30
10055: PUSH
10056: LD_INT 1
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: LIST
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: LIST
10072: PPUSH
10073: CALL_OW 69
10077: ST_TO_ADDR
// for i in tmp do
10078: LD_ADDR_VAR 0 1
10082: PUSH
10083: LD_VAR 0 2
10087: PUSH
10088: FOR_IN
10089: IFFALSE 10122
// yourSiberite := yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
10091: LD_ADDR_VAR 0 3
10095: PUSH
10096: LD_VAR 0 3
10100: PUSH
10101: LD_VAR 0 1
10105: PPUSH
10106: CALL_OW 274
10110: PPUSH
10111: LD_INT 3
10113: PPUSH
10114: CALL_OW 275
10118: PLUS
10119: ST_TO_ADDR
10120: GO 10088
10122: POP
10123: POP
// if yourSiberite < CostOfWeapon ( us_siberium_rocket ) [ 3 ] then
10124: LD_VAR 0 3
10128: PUSH
10129: LD_INT 8
10131: PPUSH
10132: CALL_OW 451
10136: PUSH
10137: LD_INT 3
10139: ARRAY
10140: LESS
10141: IFFALSE 10150
// YouLost ( siberite ) ;
10143: LD_STRING siberite
10145: PPUSH
10146: CALL_OW 104
// end ; end_of_file
10150: PPOPN 3
10152: END
// every 8 8$00 + 8 8$00 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
10153: LD_INT 22
10155: PUSH
10156: LD_INT 8
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PUSH
10163: LD_INT 21
10165: PUSH
10166: LD_INT 1
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PPUSH
10177: CALL_OW 69
10181: PUSH
10182: LD_INT 6
10184: LESS
10185: IFFALSE 10195
10187: GO 10189
10189: DISABLE
// begin enable ;
10190: ENABLE
// PrepareArabianAttack ;
10191: CALL 4104 0 0
// end ;
10195: END
// every 0 0$30 trigger eventVar1 = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
10196: LD_EXP 36
10200: PUSH
10201: LD_INT 1
10203: EQUAL
10204: PUSH
10205: LD_INT 22
10207: PUSH
10208: LD_INT 8
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: PUSH
10215: LD_INT 21
10217: PUSH
10218: LD_INT 1
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PPUSH
10229: CALL_OW 69
10233: PUSH
10234: LD_INT 6
10236: LESS
10237: AND
10238: IFFALSE 10265
10240: GO 10242
10242: DISABLE
// begin wait ( 4 4$00 ) ;
10243: LD_INT 8400
10245: PPUSH
10246: CALL_OW 67
// PrepareRussianAttack ;
10250: CALL 3327 0 0
// wait ( 12 12$00 ) ;
10254: LD_INT 25200
10256: PPUSH
10257: CALL_OW 67
// PrepareRussianAttack ;
10261: CALL 3327 0 0
// end ;
10265: END
// export function ArabianAttack ; var i , tmp , path , path2 , vehicles , infantry , units , apes ; begin
10266: LD_INT 0
10268: PPUSH
10269: PPUSH
10270: PPUSH
10271: PPUSH
10272: PPUSH
10273: PPUSH
10274: PPUSH
10275: PPUSH
10276: PPUSH
// units := FilterAllUnits ( [ [ f_side , 8 ] , [ f_tag , 10 ] ] ) ;
10277: LD_ADDR_VAR 0 8
10281: PUSH
10282: LD_INT 22
10284: PUSH
10285: LD_INT 8
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 120
10294: PUSH
10295: LD_INT 10
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: PPUSH
10306: CALL_OW 69
10310: ST_TO_ADDR
// if not units then
10311: LD_VAR 0 8
10315: NOT
10316: IFFALSE 10320
// exit ;
10318: GO 10626
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10320: LD_ADDR_VAR 0 4
10324: PUSH
10325: LD_INT 80
10327: PUSH
10328: LD_INT 60
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 54
10337: PUSH
10338: LD_INT 57
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: LD_INT 55
10347: PUSH
10348: LD_INT 74
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 61
10357: PUSH
10358: LD_INT 85
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: ST_TO_ADDR
// path2 := [ [ 93 , 99 ] , [ 85 , 99 ] ] ;
10371: LD_ADDR_VAR 0 5
10375: PUSH
10376: LD_INT 93
10378: PUSH
10379: LD_INT 99
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PUSH
10386: LD_INT 85
10388: PUSH
10389: LD_INT 99
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10400: LD_INT 35
10402: PPUSH
10403: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10407: LD_ADDR_VAR 0 6
10411: PUSH
10412: LD_VAR 0 8
10416: PPUSH
10417: LD_INT 21
10419: PUSH
10420: LD_INT 2
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PPUSH
10427: CALL_OW 72
10431: ST_TO_ADDR
// if vehicles then
10432: LD_VAR 0 6
10436: IFFALSE 10452
// AgressiveMove ( vehicles , path ) ;
10438: LD_VAR 0 6
10442: PPUSH
10443: LD_VAR 0 4
10447: PPUSH
10448: CALL 72756 0 2
// infantry := UnitFilter ( units , [ [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10452: LD_ADDR_VAR 0 7
10456: PUSH
10457: LD_VAR 0 8
10461: PPUSH
10462: LD_INT 23
10464: PUSH
10465: LD_INT 2
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 21
10474: PUSH
10475: LD_INT 1
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PPUSH
10486: CALL_OW 72
10490: ST_TO_ADDR
// if infantry then
10491: LD_VAR 0 7
10495: IFFALSE 10511
// AgressiveMove ( infantry , path2 ) ;
10497: LD_VAR 0 7
10501: PPUSH
10502: LD_VAR 0 5
10506: PPUSH
10507: CALL 72756 0 2
// apes := UnitFilter ( units , [ [ f_nation , 0 ] , [ f_type , unit_human ] ] ) ;
10511: LD_ADDR_VAR 0 9
10515: PUSH
10516: LD_VAR 0 8
10520: PPUSH
10521: LD_INT 23
10523: PUSH
10524: LD_INT 0
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 21
10533: PUSH
10534: LD_INT 1
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PPUSH
10545: CALL_OW 72
10549: ST_TO_ADDR
// if apes then
10550: LD_VAR 0 9
10554: IFFALSE 10598
// ComAttackUnit ( apes [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , apes [ 1 ] ) ) ;
10556: LD_VAR 0 9
10560: PUSH
10561: LD_INT 1
10563: ARRAY
10564: PPUSH
10565: LD_INT 22
10567: PUSH
10568: LD_INT 1
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PPUSH
10575: CALL_OW 69
10579: PPUSH
10580: LD_VAR 0 9
10584: PUSH
10585: LD_INT 1
10587: ARRAY
10588: PPUSH
10589: CALL_OW 74
10593: PPUSH
10594: CALL_OW 115
// units := UnitFilter ( units , [ f_ok ] ) ;
10598: LD_ADDR_VAR 0 8
10602: PUSH
10603: LD_VAR 0 8
10607: PPUSH
10608: LD_INT 50
10610: PUSH
10611: EMPTY
10612: LIST
10613: PPUSH
10614: CALL_OW 72
10618: ST_TO_ADDR
// until not units ;
10619: LD_VAR 0 8
10623: NOT
10624: IFFALSE 10400
// end ;
10626: LD_VAR 0 1
10630: RET
// export function RussianAttack ; var i , tmp , path , vehicles , units ; begin
10631: LD_INT 0
10633: PPUSH
10634: PPUSH
10635: PPUSH
10636: PPUSH
10637: PPUSH
10638: PPUSH
// units := FilterAllUnits ( [ [ f_side , 3 ] , [ f_tag , 10 ] ] ) ;
10639: LD_ADDR_VAR 0 6
10643: PUSH
10644: LD_INT 22
10646: PUSH
10647: LD_INT 3
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: LD_INT 120
10656: PUSH
10657: LD_INT 10
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PPUSH
10668: CALL_OW 69
10672: ST_TO_ADDR
// if not units then
10673: LD_VAR 0 6
10677: NOT
10678: IFFALSE 10682
// exit ;
10680: GO 10813
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10682: LD_ADDR_VAR 0 4
10686: PUSH
10687: LD_INT 80
10689: PUSH
10690: LD_INT 60
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 54
10699: PUSH
10700: LD_INT 57
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: LD_INT 55
10709: PUSH
10710: LD_INT 74
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: LD_INT 61
10719: PUSH
10720: LD_INT 85
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10733: LD_INT 35
10735: PPUSH
10736: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10740: LD_ADDR_VAR 0 5
10744: PUSH
10745: LD_VAR 0 6
10749: PPUSH
10750: LD_INT 21
10752: PUSH
10753: LD_INT 2
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: PPUSH
10760: CALL_OW 72
10764: ST_TO_ADDR
// if vehicles then
10765: LD_VAR 0 5
10769: IFFALSE 10785
// AgressiveMove ( vehicles , path ) ;
10771: LD_VAR 0 5
10775: PPUSH
10776: LD_VAR 0 4
10780: PPUSH
10781: CALL 72756 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10785: LD_ADDR_VAR 0 6
10789: PUSH
10790: LD_VAR 0 6
10794: PPUSH
10795: LD_INT 50
10797: PUSH
10798: EMPTY
10799: LIST
10800: PPUSH
10801: CALL_OW 72
10805: ST_TO_ADDR
// until not units ;
10806: LD_VAR 0 6
10810: NOT
10811: IFFALSE 10733
// end ; end_of_file
10813: LD_VAR 0 1
10817: RET
// every 0 0$01 do var i , cratesSpawned ;
10818: GO 10820
10820: DISABLE
10821: LD_INT 0
10823: PPUSH
10824: PPUSH
// begin cratesSpawned := 0 ;
10825: LD_ADDR_VAR 0 2
10829: PUSH
10830: LD_INT 0
10832: ST_TO_ADDR
// for i := 1 to 6 do
10833: LD_ADDR_VAR 0 1
10837: PUSH
10838: DOUBLE
10839: LD_INT 1
10841: DEC
10842: ST_TO_ADDR
10843: LD_INT 6
10845: PUSH
10846: FOR_TO
10847: IFFALSE 10872
// CreateCratesArea ( rand ( 2 , 5 ) , StartCratesArea , false ) ;
10849: LD_INT 2
10851: PPUSH
10852: LD_INT 5
10854: PPUSH
10855: CALL_OW 12
10859: PPUSH
10860: LD_INT 17
10862: PPUSH
10863: LD_INT 0
10865: PPUSH
10866: CALL_OW 55
10870: GO 10846
10872: POP
10873: POP
// wait ( 0 0$20 ) ;
10874: LD_INT 700
10876: PPUSH
10877: CALL_OW 67
// repeat wait ( 0 0$08 ) ;
10881: LD_INT 280
10883: PPUSH
10884: CALL_OW 67
// if cratesSpawned < 12 then
10888: LD_VAR 0 2
10892: PUSH
10893: LD_INT 12
10895: LESS
10896: IFFALSE 10948
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
10898: LD_INT 105
10900: PPUSH
10901: LD_INT 350
10903: PPUSH
10904: CALL_OW 12
10908: PPUSH
10909: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10913: LD_INT 3
10915: PPUSH
10916: LD_INT 5
10918: PPUSH
10919: CALL_OW 12
10923: PPUSH
10924: LD_INT 13
10926: PPUSH
10927: LD_INT 1
10929: PPUSH
10930: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10934: LD_ADDR_VAR 0 2
10938: PUSH
10939: LD_VAR 0 2
10943: PUSH
10944: LD_INT 1
10946: PLUS
10947: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
10948: LD_VAR 0 2
10952: PUSH
10953: LD_INT 12
10955: GREATEREQUAL
10956: PUSH
10957: LD_VAR 0 2
10961: PUSH
10962: LD_INT 32
10964: LESS
10965: AND
10966: IFFALSE 11018
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
10968: LD_INT 420
10970: PPUSH
10971: LD_INT 700
10973: PPUSH
10974: CALL_OW 12
10978: PPUSH
10979: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10983: LD_INT 3
10985: PPUSH
10986: LD_INT 5
10988: PPUSH
10989: CALL_OW 12
10993: PPUSH
10994: LD_INT 13
10996: PPUSH
10997: LD_INT 1
10999: PPUSH
11000: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11004: LD_ADDR_VAR 0 2
11008: PUSH
11009: LD_VAR 0 2
11013: PUSH
11014: LD_INT 1
11016: PLUS
11017: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
11018: LD_VAR 0 2
11022: PUSH
11023: LD_INT 32
11025: GREATEREQUAL
11026: IFFALSE 11100
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
11028: LD_INT 13
11030: PPUSH
11031: CALL_OW 435
11035: PUSH
11036: LD_INT 14
11038: LESS
11039: IFFALSE 11050
// wait ( 0 0$20 ) else
11041: LD_INT 700
11043: PPUSH
11044: CALL_OW 67
11048: GO 11065
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
11050: LD_INT 1750
11052: PPUSH
11053: LD_INT 3150
11055: PPUSH
11056: CALL_OW 12
11060: PPUSH
11061: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
11065: LD_INT 2
11067: PPUSH
11068: LD_INT 5
11070: PPUSH
11071: CALL_OW 12
11075: PPUSH
11076: LD_INT 13
11078: PPUSH
11079: LD_INT 1
11081: PPUSH
11082: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11086: LD_ADDR_VAR 0 2
11090: PUSH
11091: LD_VAR 0 2
11095: PUSH
11096: LD_INT 1
11098: PLUS
11099: ST_TO_ADDR
// end ; if cratesSpawned >= 120 then
11100: LD_VAR 0 2
11104: PUSH
11105: LD_INT 120
11107: GREATEREQUAL
11108: IFFALSE 11182
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
11110: LD_INT 13
11112: PPUSH
11113: CALL_OW 435
11117: PUSH
11118: LD_INT 14
11120: LESS
11121: IFFALSE 11132
// wait ( 0 0$40 ) else
11123: LD_INT 1400
11125: PPUSH
11126: CALL_OW 67
11130: GO 11147
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
11132: LD_INT 2450
11134: PPUSH
11135: LD_INT 3850
11137: PPUSH
11138: CALL_OW 12
11142: PPUSH
11143: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
11147: LD_INT 1
11149: PPUSH
11150: LD_INT 5
11152: PPUSH
11153: CALL_OW 12
11157: PPUSH
11158: LD_INT 13
11160: PPUSH
11161: LD_INT 1
11163: PPUSH
11164: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11168: LD_ADDR_VAR 0 2
11172: PUSH
11173: LD_VAR 0 2
11177: PUSH
11178: LD_INT 1
11180: PLUS
11181: ST_TO_ADDR
// end ; until false ;
11182: LD_INT 0
11184: IFFALSE 10881
// end ; end_of_file end_of_file
11186: PPOPN 2
11188: END
// export globalGameSaveCounter ; every 0 0$1 do
11189: GO 11191
11191: DISABLE
// begin enable ;
11192: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11193: LD_STRING updateTimer(
11195: PUSH
11196: LD_OWVAR 1
11200: STR
11201: PUSH
11202: LD_STRING );
11204: STR
11205: PPUSH
11206: CALL_OW 559
// end ;
11210: END
// every 0 0$1 do
11211: GO 11213
11213: DISABLE
// begin globalGameSaveCounter := 0 ;
11214: LD_ADDR_EXP 47
11218: PUSH
11219: LD_INT 0
11221: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11222: LD_STRING setGameSaveCounter(0)
11224: PPUSH
11225: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11229: LD_STRING initStreamRollete();
11231: PPUSH
11232: CALL_OW 559
// InitStreamMode ;
11236: CALL 12579 0 0
// DefineStreamItems ( false ) ;
11240: LD_INT 0
11242: PPUSH
11243: CALL 13043 0 1
// end ;
11247: END
// export function SOS_MapStart ( ) ; begin
11248: LD_INT 0
11250: PPUSH
// if streamModeActive then
11251: LD_EXP 48
11255: IFFALSE 11264
// DefineStreamItems ( true ) ;
11257: LD_INT 1
11259: PPUSH
11260: CALL 13043 0 1
// UpdateLuaVariables ( ) ;
11264: CALL 11281 0 0
// UpdateFactoryWaypoints ( ) ;
11268: CALL 26045 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11272: CALL 26297 0 0
// end ;
11276: LD_VAR 0 1
11280: RET
// function UpdateLuaVariables ( ) ; begin
11281: LD_INT 0
11283: PPUSH
// if globalGameSaveCounter then
11284: LD_EXP 47
11288: IFFALSE 11322
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11290: LD_ADDR_EXP 47
11294: PUSH
11295: LD_EXP 47
11299: PPUSH
11300: CALL 71513 0 1
11304: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11305: LD_STRING setGameSaveCounter(
11307: PUSH
11308: LD_EXP 47
11312: STR
11313: PUSH
11314: LD_STRING )
11316: STR
11317: PPUSH
11318: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11322: LD_STRING setGameDifficulty(
11324: PUSH
11325: LD_OWVAR 67
11329: STR
11330: PUSH
11331: LD_STRING )
11333: STR
11334: PPUSH
11335: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
11339: LD_STRING displayDifficulty(
11341: PUSH
11342: LD_OWVAR 67
11346: STR
11347: PUSH
11348: LD_STRING )
11350: STR
11351: PPUSH
11352: CALL_OW 559
// end ;
11356: LD_VAR 0 1
11360: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11361: LD_INT 0
11363: PPUSH
// if p2 = stream_mode then
11364: LD_VAR 0 2
11368: PUSH
11369: LD_INT 100
11371: EQUAL
11372: IFFALSE 12375
// begin if not StreamModeActive then
11374: LD_EXP 48
11378: NOT
11379: IFFALSE 11389
// StreamModeActive := true ;
11381: LD_ADDR_EXP 48
11385: PUSH
11386: LD_INT 1
11388: ST_TO_ADDR
// if p3 = 0 then
11389: LD_VAR 0 3
11393: PUSH
11394: LD_INT 0
11396: EQUAL
11397: IFFALSE 11403
// InitStreamMode ;
11399: CALL 12579 0 0
// if p3 = 1 then
11403: LD_VAR 0 3
11407: PUSH
11408: LD_INT 1
11410: EQUAL
11411: IFFALSE 11421
// sRocket := true ;
11413: LD_ADDR_EXP 53
11417: PUSH
11418: LD_INT 1
11420: ST_TO_ADDR
// if p3 = 2 then
11421: LD_VAR 0 3
11425: PUSH
11426: LD_INT 2
11428: EQUAL
11429: IFFALSE 11439
// sSpeed := true ;
11431: LD_ADDR_EXP 52
11435: PUSH
11436: LD_INT 1
11438: ST_TO_ADDR
// if p3 = 3 then
11439: LD_VAR 0 3
11443: PUSH
11444: LD_INT 3
11446: EQUAL
11447: IFFALSE 11457
// sEngine := true ;
11449: LD_ADDR_EXP 54
11453: PUSH
11454: LD_INT 1
11456: ST_TO_ADDR
// if p3 = 4 then
11457: LD_VAR 0 3
11461: PUSH
11462: LD_INT 4
11464: EQUAL
11465: IFFALSE 11475
// sSpec := true ;
11467: LD_ADDR_EXP 51
11471: PUSH
11472: LD_INT 1
11474: ST_TO_ADDR
// if p3 = 5 then
11475: LD_VAR 0 3
11479: PUSH
11480: LD_INT 5
11482: EQUAL
11483: IFFALSE 11493
// sLevel := true ;
11485: LD_ADDR_EXP 55
11489: PUSH
11490: LD_INT 1
11492: ST_TO_ADDR
// if p3 = 6 then
11493: LD_VAR 0 3
11497: PUSH
11498: LD_INT 6
11500: EQUAL
11501: IFFALSE 11511
// sArmoury := true ;
11503: LD_ADDR_EXP 56
11507: PUSH
11508: LD_INT 1
11510: ST_TO_ADDR
// if p3 = 7 then
11511: LD_VAR 0 3
11515: PUSH
11516: LD_INT 7
11518: EQUAL
11519: IFFALSE 11529
// sRadar := true ;
11521: LD_ADDR_EXP 57
11525: PUSH
11526: LD_INT 1
11528: ST_TO_ADDR
// if p3 = 8 then
11529: LD_VAR 0 3
11533: PUSH
11534: LD_INT 8
11536: EQUAL
11537: IFFALSE 11547
// sBunker := true ;
11539: LD_ADDR_EXP 58
11543: PUSH
11544: LD_INT 1
11546: ST_TO_ADDR
// if p3 = 9 then
11547: LD_VAR 0 3
11551: PUSH
11552: LD_INT 9
11554: EQUAL
11555: IFFALSE 11565
// sHack := true ;
11557: LD_ADDR_EXP 59
11561: PUSH
11562: LD_INT 1
11564: ST_TO_ADDR
// if p3 = 10 then
11565: LD_VAR 0 3
11569: PUSH
11570: LD_INT 10
11572: EQUAL
11573: IFFALSE 11583
// sFire := true ;
11575: LD_ADDR_EXP 60
11579: PUSH
11580: LD_INT 1
11582: ST_TO_ADDR
// if p3 = 11 then
11583: LD_VAR 0 3
11587: PUSH
11588: LD_INT 11
11590: EQUAL
11591: IFFALSE 11601
// sRefresh := true ;
11593: LD_ADDR_EXP 61
11597: PUSH
11598: LD_INT 1
11600: ST_TO_ADDR
// if p3 = 12 then
11601: LD_VAR 0 3
11605: PUSH
11606: LD_INT 12
11608: EQUAL
11609: IFFALSE 11619
// sExp := true ;
11611: LD_ADDR_EXP 62
11615: PUSH
11616: LD_INT 1
11618: ST_TO_ADDR
// if p3 = 13 then
11619: LD_VAR 0 3
11623: PUSH
11624: LD_INT 13
11626: EQUAL
11627: IFFALSE 11637
// sDepot := true ;
11629: LD_ADDR_EXP 63
11633: PUSH
11634: LD_INT 1
11636: ST_TO_ADDR
// if p3 = 14 then
11637: LD_VAR 0 3
11641: PUSH
11642: LD_INT 14
11644: EQUAL
11645: IFFALSE 11655
// sFlag := true ;
11647: LD_ADDR_EXP 64
11651: PUSH
11652: LD_INT 1
11654: ST_TO_ADDR
// if p3 = 15 then
11655: LD_VAR 0 3
11659: PUSH
11660: LD_INT 15
11662: EQUAL
11663: IFFALSE 11673
// sKamikadze := true ;
11665: LD_ADDR_EXP 72
11669: PUSH
11670: LD_INT 1
11672: ST_TO_ADDR
// if p3 = 16 then
11673: LD_VAR 0 3
11677: PUSH
11678: LD_INT 16
11680: EQUAL
11681: IFFALSE 11691
// sTroll := true ;
11683: LD_ADDR_EXP 73
11687: PUSH
11688: LD_INT 1
11690: ST_TO_ADDR
// if p3 = 17 then
11691: LD_VAR 0 3
11695: PUSH
11696: LD_INT 17
11698: EQUAL
11699: IFFALSE 11709
// sSlow := true ;
11701: LD_ADDR_EXP 74
11705: PUSH
11706: LD_INT 1
11708: ST_TO_ADDR
// if p3 = 18 then
11709: LD_VAR 0 3
11713: PUSH
11714: LD_INT 18
11716: EQUAL
11717: IFFALSE 11727
// sLack := true ;
11719: LD_ADDR_EXP 75
11723: PUSH
11724: LD_INT 1
11726: ST_TO_ADDR
// if p3 = 19 then
11727: LD_VAR 0 3
11731: PUSH
11732: LD_INT 19
11734: EQUAL
11735: IFFALSE 11745
// sTank := true ;
11737: LD_ADDR_EXP 77
11741: PUSH
11742: LD_INT 1
11744: ST_TO_ADDR
// if p3 = 20 then
11745: LD_VAR 0 3
11749: PUSH
11750: LD_INT 20
11752: EQUAL
11753: IFFALSE 11763
// sRemote := true ;
11755: LD_ADDR_EXP 78
11759: PUSH
11760: LD_INT 1
11762: ST_TO_ADDR
// if p3 = 21 then
11763: LD_VAR 0 3
11767: PUSH
11768: LD_INT 21
11770: EQUAL
11771: IFFALSE 11781
// sPowell := true ;
11773: LD_ADDR_EXP 79
11777: PUSH
11778: LD_INT 1
11780: ST_TO_ADDR
// if p3 = 22 then
11781: LD_VAR 0 3
11785: PUSH
11786: LD_INT 22
11788: EQUAL
11789: IFFALSE 11799
// sTeleport := true ;
11791: LD_ADDR_EXP 82
11795: PUSH
11796: LD_INT 1
11798: ST_TO_ADDR
// if p3 = 23 then
11799: LD_VAR 0 3
11803: PUSH
11804: LD_INT 23
11806: EQUAL
11807: IFFALSE 11817
// sOilTower := true ;
11809: LD_ADDR_EXP 84
11813: PUSH
11814: LD_INT 1
11816: ST_TO_ADDR
// if p3 = 24 then
11817: LD_VAR 0 3
11821: PUSH
11822: LD_INT 24
11824: EQUAL
11825: IFFALSE 11835
// sShovel := true ;
11827: LD_ADDR_EXP 85
11831: PUSH
11832: LD_INT 1
11834: ST_TO_ADDR
// if p3 = 25 then
11835: LD_VAR 0 3
11839: PUSH
11840: LD_INT 25
11842: EQUAL
11843: IFFALSE 11853
// sSheik := true ;
11845: LD_ADDR_EXP 86
11849: PUSH
11850: LD_INT 1
11852: ST_TO_ADDR
// if p3 = 26 then
11853: LD_VAR 0 3
11857: PUSH
11858: LD_INT 26
11860: EQUAL
11861: IFFALSE 11871
// sEarthquake := true ;
11863: LD_ADDR_EXP 88
11867: PUSH
11868: LD_INT 1
11870: ST_TO_ADDR
// if p3 = 27 then
11871: LD_VAR 0 3
11875: PUSH
11876: LD_INT 27
11878: EQUAL
11879: IFFALSE 11889
// sAI := true ;
11881: LD_ADDR_EXP 89
11885: PUSH
11886: LD_INT 1
11888: ST_TO_ADDR
// if p3 = 28 then
11889: LD_VAR 0 3
11893: PUSH
11894: LD_INT 28
11896: EQUAL
11897: IFFALSE 11907
// sCargo := true ;
11899: LD_ADDR_EXP 92
11903: PUSH
11904: LD_INT 1
11906: ST_TO_ADDR
// if p3 = 29 then
11907: LD_VAR 0 3
11911: PUSH
11912: LD_INT 29
11914: EQUAL
11915: IFFALSE 11925
// sDLaser := true ;
11917: LD_ADDR_EXP 93
11921: PUSH
11922: LD_INT 1
11924: ST_TO_ADDR
// if p3 = 30 then
11925: LD_VAR 0 3
11929: PUSH
11930: LD_INT 30
11932: EQUAL
11933: IFFALSE 11943
// sExchange := true ;
11935: LD_ADDR_EXP 94
11939: PUSH
11940: LD_INT 1
11942: ST_TO_ADDR
// if p3 = 31 then
11943: LD_VAR 0 3
11947: PUSH
11948: LD_INT 31
11950: EQUAL
11951: IFFALSE 11961
// sFac := true ;
11953: LD_ADDR_EXP 95
11957: PUSH
11958: LD_INT 1
11960: ST_TO_ADDR
// if p3 = 32 then
11961: LD_VAR 0 3
11965: PUSH
11966: LD_INT 32
11968: EQUAL
11969: IFFALSE 11979
// sPower := true ;
11971: LD_ADDR_EXP 96
11975: PUSH
11976: LD_INT 1
11978: ST_TO_ADDR
// if p3 = 33 then
11979: LD_VAR 0 3
11983: PUSH
11984: LD_INT 33
11986: EQUAL
11987: IFFALSE 11997
// sRandom := true ;
11989: LD_ADDR_EXP 97
11993: PUSH
11994: LD_INT 1
11996: ST_TO_ADDR
// if p3 = 34 then
11997: LD_VAR 0 3
12001: PUSH
12002: LD_INT 34
12004: EQUAL
12005: IFFALSE 12015
// sShield := true ;
12007: LD_ADDR_EXP 98
12011: PUSH
12012: LD_INT 1
12014: ST_TO_ADDR
// if p3 = 35 then
12015: LD_VAR 0 3
12019: PUSH
12020: LD_INT 35
12022: EQUAL
12023: IFFALSE 12033
// sTime := true ;
12025: LD_ADDR_EXP 99
12029: PUSH
12030: LD_INT 1
12032: ST_TO_ADDR
// if p3 = 36 then
12033: LD_VAR 0 3
12037: PUSH
12038: LD_INT 36
12040: EQUAL
12041: IFFALSE 12051
// sTools := true ;
12043: LD_ADDR_EXP 100
12047: PUSH
12048: LD_INT 1
12050: ST_TO_ADDR
// if p3 = 101 then
12051: LD_VAR 0 3
12055: PUSH
12056: LD_INT 101
12058: EQUAL
12059: IFFALSE 12069
// sSold := true ;
12061: LD_ADDR_EXP 65
12065: PUSH
12066: LD_INT 1
12068: ST_TO_ADDR
// if p3 = 102 then
12069: LD_VAR 0 3
12073: PUSH
12074: LD_INT 102
12076: EQUAL
12077: IFFALSE 12087
// sDiff := true ;
12079: LD_ADDR_EXP 66
12083: PUSH
12084: LD_INT 1
12086: ST_TO_ADDR
// if p3 = 103 then
12087: LD_VAR 0 3
12091: PUSH
12092: LD_INT 103
12094: EQUAL
12095: IFFALSE 12105
// sFog := true ;
12097: LD_ADDR_EXP 69
12101: PUSH
12102: LD_INT 1
12104: ST_TO_ADDR
// if p3 = 104 then
12105: LD_VAR 0 3
12109: PUSH
12110: LD_INT 104
12112: EQUAL
12113: IFFALSE 12123
// sReset := true ;
12115: LD_ADDR_EXP 70
12119: PUSH
12120: LD_INT 1
12122: ST_TO_ADDR
// if p3 = 105 then
12123: LD_VAR 0 3
12127: PUSH
12128: LD_INT 105
12130: EQUAL
12131: IFFALSE 12141
// sSun := true ;
12133: LD_ADDR_EXP 71
12137: PUSH
12138: LD_INT 1
12140: ST_TO_ADDR
// if p3 = 106 then
12141: LD_VAR 0 3
12145: PUSH
12146: LD_INT 106
12148: EQUAL
12149: IFFALSE 12159
// sTiger := true ;
12151: LD_ADDR_EXP 67
12155: PUSH
12156: LD_INT 1
12158: ST_TO_ADDR
// if p3 = 107 then
12159: LD_VAR 0 3
12163: PUSH
12164: LD_INT 107
12166: EQUAL
12167: IFFALSE 12177
// sBomb := true ;
12169: LD_ADDR_EXP 68
12173: PUSH
12174: LD_INT 1
12176: ST_TO_ADDR
// if p3 = 108 then
12177: LD_VAR 0 3
12181: PUSH
12182: LD_INT 108
12184: EQUAL
12185: IFFALSE 12195
// sWound := true ;
12187: LD_ADDR_EXP 76
12191: PUSH
12192: LD_INT 1
12194: ST_TO_ADDR
// if p3 = 109 then
12195: LD_VAR 0 3
12199: PUSH
12200: LD_INT 109
12202: EQUAL
12203: IFFALSE 12213
// sBetray := true ;
12205: LD_ADDR_EXP 80
12209: PUSH
12210: LD_INT 1
12212: ST_TO_ADDR
// if p3 = 110 then
12213: LD_VAR 0 3
12217: PUSH
12218: LD_INT 110
12220: EQUAL
12221: IFFALSE 12231
// sContamin := true ;
12223: LD_ADDR_EXP 81
12227: PUSH
12228: LD_INT 1
12230: ST_TO_ADDR
// if p3 = 111 then
12231: LD_VAR 0 3
12235: PUSH
12236: LD_INT 111
12238: EQUAL
12239: IFFALSE 12249
// sOil := true ;
12241: LD_ADDR_EXP 83
12245: PUSH
12246: LD_INT 1
12248: ST_TO_ADDR
// if p3 = 112 then
12249: LD_VAR 0 3
12253: PUSH
12254: LD_INT 112
12256: EQUAL
12257: IFFALSE 12267
// sStu := true ;
12259: LD_ADDR_EXP 87
12263: PUSH
12264: LD_INT 1
12266: ST_TO_ADDR
// if p3 = 113 then
12267: LD_VAR 0 3
12271: PUSH
12272: LD_INT 113
12274: EQUAL
12275: IFFALSE 12285
// sBazooka := true ;
12277: LD_ADDR_EXP 90
12281: PUSH
12282: LD_INT 1
12284: ST_TO_ADDR
// if p3 = 114 then
12285: LD_VAR 0 3
12289: PUSH
12290: LD_INT 114
12292: EQUAL
12293: IFFALSE 12303
// sMortar := true ;
12295: LD_ADDR_EXP 91
12299: PUSH
12300: LD_INT 1
12302: ST_TO_ADDR
// if p3 = 115 then
12303: LD_VAR 0 3
12307: PUSH
12308: LD_INT 115
12310: EQUAL
12311: IFFALSE 12321
// sRanger := true ;
12313: LD_ADDR_EXP 101
12317: PUSH
12318: LD_INT 1
12320: ST_TO_ADDR
// if p3 = 116 then
12321: LD_VAR 0 3
12325: PUSH
12326: LD_INT 116
12328: EQUAL
12329: IFFALSE 12339
// sComputer := true ;
12331: LD_ADDR_EXP 102
12335: PUSH
12336: LD_INT 1
12338: ST_TO_ADDR
// if p3 = 117 then
12339: LD_VAR 0 3
12343: PUSH
12344: LD_INT 117
12346: EQUAL
12347: IFFALSE 12357
// s30 := true ;
12349: LD_ADDR_EXP 103
12353: PUSH
12354: LD_INT 1
12356: ST_TO_ADDR
// if p3 = 118 then
12357: LD_VAR 0 3
12361: PUSH
12362: LD_INT 118
12364: EQUAL
12365: IFFALSE 12375
// s60 := true ;
12367: LD_ADDR_EXP 104
12371: PUSH
12372: LD_INT 1
12374: ST_TO_ADDR
// end ; if p2 = hack_mode then
12375: LD_VAR 0 2
12379: PUSH
12380: LD_INT 101
12382: EQUAL
12383: IFFALSE 12511
// begin case p3 of 1 :
12385: LD_VAR 0 3
12389: PUSH
12390: LD_INT 1
12392: DOUBLE
12393: EQUAL
12394: IFTRUE 12398
12396: GO 12405
12398: POP
// hHackUnlimitedResources ; 2 :
12399: CALL 24658 0 0
12403: GO 12511
12405: LD_INT 2
12407: DOUBLE
12408: EQUAL
12409: IFTRUE 12413
12411: GO 12420
12413: POP
// hHackSetLevel10 ; 3 :
12414: CALL 24791 0 0
12418: GO 12511
12420: LD_INT 3
12422: DOUBLE
12423: EQUAL
12424: IFTRUE 12428
12426: GO 12435
12428: POP
// hHackSetLevel10YourUnits ; 4 :
12429: CALL 24876 0 0
12433: GO 12511
12435: LD_INT 4
12437: DOUBLE
12438: EQUAL
12439: IFTRUE 12443
12441: GO 12450
12443: POP
// hHackInvincible ; 5 :
12444: CALL 25324 0 0
12448: GO 12511
12450: LD_INT 5
12452: DOUBLE
12453: EQUAL
12454: IFTRUE 12458
12456: GO 12465
12458: POP
// hHackInvisible ; 6 :
12459: CALL 25435 0 0
12463: GO 12511
12465: LD_INT 6
12467: DOUBLE
12468: EQUAL
12469: IFTRUE 12473
12471: GO 12480
12473: POP
// hHackChangeYourSide ; 7 :
12474: CALL 25492 0 0
12478: GO 12511
12480: LD_INT 7
12482: DOUBLE
12483: EQUAL
12484: IFTRUE 12488
12486: GO 12495
12488: POP
// hHackChangeUnitSide ; 8 :
12489: CALL 25534 0 0
12493: GO 12511
12495: LD_INT 8
12497: DOUBLE
12498: EQUAL
12499: IFTRUE 12503
12501: GO 12510
12503: POP
// hHackFog ; end ;
12504: CALL 25635 0 0
12508: GO 12511
12510: POP
// end ; if p2 = game_save_mode then
12511: LD_VAR 0 2
12515: PUSH
12516: LD_INT 102
12518: EQUAL
12519: IFFALSE 12574
// begin if p3 = 1 then
12521: LD_VAR 0 3
12525: PUSH
12526: LD_INT 1
12528: EQUAL
12529: IFFALSE 12541
// globalGameSaveCounter := p4 ;
12531: LD_ADDR_EXP 47
12535: PUSH
12536: LD_VAR 0 4
12540: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12541: LD_VAR 0 3
12545: PUSH
12546: LD_INT 2
12548: EQUAL
12549: PUSH
12550: LD_EXP 47
12554: AND
12555: IFFALSE 12574
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12557: LD_STRING setGameSaveCounter(
12559: PUSH
12560: LD_EXP 47
12564: STR
12565: PUSH
12566: LD_STRING )
12568: STR
12569: PPUSH
12570: CALL_OW 559
// end ; end ;
12574: LD_VAR 0 7
12578: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12579: LD_INT 0
12581: PPUSH
// streamModeActive := false ;
12582: LD_ADDR_EXP 48
12586: PUSH
12587: LD_INT 0
12589: ST_TO_ADDR
// normalCounter := 36 ;
12590: LD_ADDR_EXP 49
12594: PUSH
12595: LD_INT 36
12597: ST_TO_ADDR
// hardcoreCounter := 18 ;
12598: LD_ADDR_EXP 50
12602: PUSH
12603: LD_INT 18
12605: ST_TO_ADDR
// sRocket := false ;
12606: LD_ADDR_EXP 53
12610: PUSH
12611: LD_INT 0
12613: ST_TO_ADDR
// sSpeed := false ;
12614: LD_ADDR_EXP 52
12618: PUSH
12619: LD_INT 0
12621: ST_TO_ADDR
// sEngine := false ;
12622: LD_ADDR_EXP 54
12626: PUSH
12627: LD_INT 0
12629: ST_TO_ADDR
// sSpec := false ;
12630: LD_ADDR_EXP 51
12634: PUSH
12635: LD_INT 0
12637: ST_TO_ADDR
// sLevel := false ;
12638: LD_ADDR_EXP 55
12642: PUSH
12643: LD_INT 0
12645: ST_TO_ADDR
// sArmoury := false ;
12646: LD_ADDR_EXP 56
12650: PUSH
12651: LD_INT 0
12653: ST_TO_ADDR
// sRadar := false ;
12654: LD_ADDR_EXP 57
12658: PUSH
12659: LD_INT 0
12661: ST_TO_ADDR
// sBunker := false ;
12662: LD_ADDR_EXP 58
12666: PUSH
12667: LD_INT 0
12669: ST_TO_ADDR
// sHack := false ;
12670: LD_ADDR_EXP 59
12674: PUSH
12675: LD_INT 0
12677: ST_TO_ADDR
// sFire := false ;
12678: LD_ADDR_EXP 60
12682: PUSH
12683: LD_INT 0
12685: ST_TO_ADDR
// sRefresh := false ;
12686: LD_ADDR_EXP 61
12690: PUSH
12691: LD_INT 0
12693: ST_TO_ADDR
// sExp := false ;
12694: LD_ADDR_EXP 62
12698: PUSH
12699: LD_INT 0
12701: ST_TO_ADDR
// sDepot := false ;
12702: LD_ADDR_EXP 63
12706: PUSH
12707: LD_INT 0
12709: ST_TO_ADDR
// sFlag := false ;
12710: LD_ADDR_EXP 64
12714: PUSH
12715: LD_INT 0
12717: ST_TO_ADDR
// sKamikadze := false ;
12718: LD_ADDR_EXP 72
12722: PUSH
12723: LD_INT 0
12725: ST_TO_ADDR
// sTroll := false ;
12726: LD_ADDR_EXP 73
12730: PUSH
12731: LD_INT 0
12733: ST_TO_ADDR
// sSlow := false ;
12734: LD_ADDR_EXP 74
12738: PUSH
12739: LD_INT 0
12741: ST_TO_ADDR
// sLack := false ;
12742: LD_ADDR_EXP 75
12746: PUSH
12747: LD_INT 0
12749: ST_TO_ADDR
// sTank := false ;
12750: LD_ADDR_EXP 77
12754: PUSH
12755: LD_INT 0
12757: ST_TO_ADDR
// sRemote := false ;
12758: LD_ADDR_EXP 78
12762: PUSH
12763: LD_INT 0
12765: ST_TO_ADDR
// sPowell := false ;
12766: LD_ADDR_EXP 79
12770: PUSH
12771: LD_INT 0
12773: ST_TO_ADDR
// sTeleport := false ;
12774: LD_ADDR_EXP 82
12778: PUSH
12779: LD_INT 0
12781: ST_TO_ADDR
// sOilTower := false ;
12782: LD_ADDR_EXP 84
12786: PUSH
12787: LD_INT 0
12789: ST_TO_ADDR
// sShovel := false ;
12790: LD_ADDR_EXP 85
12794: PUSH
12795: LD_INT 0
12797: ST_TO_ADDR
// sSheik := false ;
12798: LD_ADDR_EXP 86
12802: PUSH
12803: LD_INT 0
12805: ST_TO_ADDR
// sEarthquake := false ;
12806: LD_ADDR_EXP 88
12810: PUSH
12811: LD_INT 0
12813: ST_TO_ADDR
// sAI := false ;
12814: LD_ADDR_EXP 89
12818: PUSH
12819: LD_INT 0
12821: ST_TO_ADDR
// sCargo := false ;
12822: LD_ADDR_EXP 92
12826: PUSH
12827: LD_INT 0
12829: ST_TO_ADDR
// sDLaser := false ;
12830: LD_ADDR_EXP 93
12834: PUSH
12835: LD_INT 0
12837: ST_TO_ADDR
// sExchange := false ;
12838: LD_ADDR_EXP 94
12842: PUSH
12843: LD_INT 0
12845: ST_TO_ADDR
// sFac := false ;
12846: LD_ADDR_EXP 95
12850: PUSH
12851: LD_INT 0
12853: ST_TO_ADDR
// sPower := false ;
12854: LD_ADDR_EXP 96
12858: PUSH
12859: LD_INT 0
12861: ST_TO_ADDR
// sRandom := false ;
12862: LD_ADDR_EXP 97
12866: PUSH
12867: LD_INT 0
12869: ST_TO_ADDR
// sShield := false ;
12870: LD_ADDR_EXP 98
12874: PUSH
12875: LD_INT 0
12877: ST_TO_ADDR
// sTime := false ;
12878: LD_ADDR_EXP 99
12882: PUSH
12883: LD_INT 0
12885: ST_TO_ADDR
// sTools := false ;
12886: LD_ADDR_EXP 100
12890: PUSH
12891: LD_INT 0
12893: ST_TO_ADDR
// sSold := false ;
12894: LD_ADDR_EXP 65
12898: PUSH
12899: LD_INT 0
12901: ST_TO_ADDR
// sDiff := false ;
12902: LD_ADDR_EXP 66
12906: PUSH
12907: LD_INT 0
12909: ST_TO_ADDR
// sFog := false ;
12910: LD_ADDR_EXP 69
12914: PUSH
12915: LD_INT 0
12917: ST_TO_ADDR
// sReset := false ;
12918: LD_ADDR_EXP 70
12922: PUSH
12923: LD_INT 0
12925: ST_TO_ADDR
// sSun := false ;
12926: LD_ADDR_EXP 71
12930: PUSH
12931: LD_INT 0
12933: ST_TO_ADDR
// sTiger := false ;
12934: LD_ADDR_EXP 67
12938: PUSH
12939: LD_INT 0
12941: ST_TO_ADDR
// sBomb := false ;
12942: LD_ADDR_EXP 68
12946: PUSH
12947: LD_INT 0
12949: ST_TO_ADDR
// sWound := false ;
12950: LD_ADDR_EXP 76
12954: PUSH
12955: LD_INT 0
12957: ST_TO_ADDR
// sBetray := false ;
12958: LD_ADDR_EXP 80
12962: PUSH
12963: LD_INT 0
12965: ST_TO_ADDR
// sContamin := false ;
12966: LD_ADDR_EXP 81
12970: PUSH
12971: LD_INT 0
12973: ST_TO_ADDR
// sOil := false ;
12974: LD_ADDR_EXP 83
12978: PUSH
12979: LD_INT 0
12981: ST_TO_ADDR
// sStu := false ;
12982: LD_ADDR_EXP 87
12986: PUSH
12987: LD_INT 0
12989: ST_TO_ADDR
// sBazooka := false ;
12990: LD_ADDR_EXP 90
12994: PUSH
12995: LD_INT 0
12997: ST_TO_ADDR
// sMortar := false ;
12998: LD_ADDR_EXP 91
13002: PUSH
13003: LD_INT 0
13005: ST_TO_ADDR
// sRanger := false ;
13006: LD_ADDR_EXP 101
13010: PUSH
13011: LD_INT 0
13013: ST_TO_ADDR
// sComputer := false ;
13014: LD_ADDR_EXP 102
13018: PUSH
13019: LD_INT 0
13021: ST_TO_ADDR
// s30 := false ;
13022: LD_ADDR_EXP 103
13026: PUSH
13027: LD_INT 0
13029: ST_TO_ADDR
// s60 := false ;
13030: LD_ADDR_EXP 104
13034: PUSH
13035: LD_INT 0
13037: ST_TO_ADDR
// end ;
13038: LD_VAR 0 1
13042: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13043: LD_INT 0
13045: PPUSH
13046: PPUSH
13047: PPUSH
13048: PPUSH
13049: PPUSH
13050: PPUSH
13051: PPUSH
// result := [ ] ;
13052: LD_ADDR_VAR 0 2
13056: PUSH
13057: EMPTY
13058: ST_TO_ADDR
// if campaign_id = 1 then
13059: LD_OWVAR 69
13063: PUSH
13064: LD_INT 1
13066: EQUAL
13067: IFFALSE 16233
// begin case mission_number of 1 :
13069: LD_OWVAR 70
13073: PUSH
13074: LD_INT 1
13076: DOUBLE
13077: EQUAL
13078: IFTRUE 13082
13080: GO 13158
13082: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13083: LD_ADDR_VAR 0 2
13087: PUSH
13088: LD_INT 2
13090: PUSH
13091: LD_INT 4
13093: PUSH
13094: LD_INT 11
13096: PUSH
13097: LD_INT 12
13099: PUSH
13100: LD_INT 15
13102: PUSH
13103: LD_INT 16
13105: PUSH
13106: LD_INT 22
13108: PUSH
13109: LD_INT 23
13111: PUSH
13112: LD_INT 26
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: PUSH
13126: LD_INT 101
13128: PUSH
13129: LD_INT 102
13131: PUSH
13132: LD_INT 106
13134: PUSH
13135: LD_INT 116
13137: PUSH
13138: LD_INT 117
13140: PUSH
13141: LD_INT 118
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: ST_TO_ADDR
13156: GO 16231
13158: LD_INT 2
13160: DOUBLE
13161: EQUAL
13162: IFTRUE 13166
13164: GO 13250
13166: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13167: LD_ADDR_VAR 0 2
13171: PUSH
13172: LD_INT 2
13174: PUSH
13175: LD_INT 4
13177: PUSH
13178: LD_INT 11
13180: PUSH
13181: LD_INT 12
13183: PUSH
13184: LD_INT 15
13186: PUSH
13187: LD_INT 16
13189: PUSH
13190: LD_INT 22
13192: PUSH
13193: LD_INT 23
13195: PUSH
13196: LD_INT 26
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: PUSH
13210: LD_INT 101
13212: PUSH
13213: LD_INT 102
13215: PUSH
13216: LD_INT 105
13218: PUSH
13219: LD_INT 106
13221: PUSH
13222: LD_INT 108
13224: PUSH
13225: LD_INT 116
13227: PUSH
13228: LD_INT 117
13230: PUSH
13231: LD_INT 118
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: ST_TO_ADDR
13248: GO 16231
13250: LD_INT 3
13252: DOUBLE
13253: EQUAL
13254: IFTRUE 13258
13256: GO 13346
13258: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13259: LD_ADDR_VAR 0 2
13263: PUSH
13264: LD_INT 2
13266: PUSH
13267: LD_INT 4
13269: PUSH
13270: LD_INT 5
13272: PUSH
13273: LD_INT 11
13275: PUSH
13276: LD_INT 12
13278: PUSH
13279: LD_INT 15
13281: PUSH
13282: LD_INT 16
13284: PUSH
13285: LD_INT 22
13287: PUSH
13288: LD_INT 26
13290: PUSH
13291: LD_INT 36
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: PUSH
13306: LD_INT 101
13308: PUSH
13309: LD_INT 102
13311: PUSH
13312: LD_INT 105
13314: PUSH
13315: LD_INT 106
13317: PUSH
13318: LD_INT 108
13320: PUSH
13321: LD_INT 116
13323: PUSH
13324: LD_INT 117
13326: PUSH
13327: LD_INT 118
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: ST_TO_ADDR
13344: GO 16231
13346: LD_INT 4
13348: DOUBLE
13349: EQUAL
13350: IFTRUE 13354
13352: GO 13450
13354: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13355: LD_ADDR_VAR 0 2
13359: PUSH
13360: LD_INT 2
13362: PUSH
13363: LD_INT 4
13365: PUSH
13366: LD_INT 5
13368: PUSH
13369: LD_INT 8
13371: PUSH
13372: LD_INT 11
13374: PUSH
13375: LD_INT 12
13377: PUSH
13378: LD_INT 15
13380: PUSH
13381: LD_INT 16
13383: PUSH
13384: LD_INT 22
13386: PUSH
13387: LD_INT 23
13389: PUSH
13390: LD_INT 26
13392: PUSH
13393: LD_INT 36
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: PUSH
13410: LD_INT 101
13412: PUSH
13413: LD_INT 102
13415: PUSH
13416: LD_INT 105
13418: PUSH
13419: LD_INT 106
13421: PUSH
13422: LD_INT 108
13424: PUSH
13425: LD_INT 116
13427: PUSH
13428: LD_INT 117
13430: PUSH
13431: LD_INT 118
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: ST_TO_ADDR
13448: GO 16231
13450: LD_INT 5
13452: DOUBLE
13453: EQUAL
13454: IFTRUE 13458
13456: GO 13570
13458: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13459: LD_ADDR_VAR 0 2
13463: PUSH
13464: LD_INT 2
13466: PUSH
13467: LD_INT 4
13469: PUSH
13470: LD_INT 5
13472: PUSH
13473: LD_INT 6
13475: PUSH
13476: LD_INT 8
13478: PUSH
13479: LD_INT 11
13481: PUSH
13482: LD_INT 12
13484: PUSH
13485: LD_INT 15
13487: PUSH
13488: LD_INT 16
13490: PUSH
13491: LD_INT 22
13493: PUSH
13494: LD_INT 23
13496: PUSH
13497: LD_INT 25
13499: PUSH
13500: LD_INT 26
13502: PUSH
13503: LD_INT 36
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: PUSH
13522: LD_INT 101
13524: PUSH
13525: LD_INT 102
13527: PUSH
13528: LD_INT 105
13530: PUSH
13531: LD_INT 106
13533: PUSH
13534: LD_INT 108
13536: PUSH
13537: LD_INT 109
13539: PUSH
13540: LD_INT 112
13542: PUSH
13543: LD_INT 116
13545: PUSH
13546: LD_INT 117
13548: PUSH
13549: LD_INT 118
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: ST_TO_ADDR
13568: GO 16231
13570: LD_INT 6
13572: DOUBLE
13573: EQUAL
13574: IFTRUE 13578
13576: GO 13710
13578: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13579: LD_ADDR_VAR 0 2
13583: PUSH
13584: LD_INT 2
13586: PUSH
13587: LD_INT 4
13589: PUSH
13590: LD_INT 5
13592: PUSH
13593: LD_INT 6
13595: PUSH
13596: LD_INT 8
13598: PUSH
13599: LD_INT 11
13601: PUSH
13602: LD_INT 12
13604: PUSH
13605: LD_INT 15
13607: PUSH
13608: LD_INT 16
13610: PUSH
13611: LD_INT 20
13613: PUSH
13614: LD_INT 21
13616: PUSH
13617: LD_INT 22
13619: PUSH
13620: LD_INT 23
13622: PUSH
13623: LD_INT 25
13625: PUSH
13626: LD_INT 26
13628: PUSH
13629: LD_INT 30
13631: PUSH
13632: LD_INT 31
13634: PUSH
13635: LD_INT 32
13637: PUSH
13638: LD_INT 36
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 101
13664: PUSH
13665: LD_INT 102
13667: PUSH
13668: LD_INT 105
13670: PUSH
13671: LD_INT 106
13673: PUSH
13674: LD_INT 108
13676: PUSH
13677: LD_INT 109
13679: PUSH
13680: LD_INT 112
13682: PUSH
13683: LD_INT 116
13685: PUSH
13686: LD_INT 117
13688: PUSH
13689: LD_INT 118
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: ST_TO_ADDR
13708: GO 16231
13710: LD_INT 7
13712: DOUBLE
13713: EQUAL
13714: IFTRUE 13718
13716: GO 13830
13718: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13719: LD_ADDR_VAR 0 2
13723: PUSH
13724: LD_INT 2
13726: PUSH
13727: LD_INT 4
13729: PUSH
13730: LD_INT 5
13732: PUSH
13733: LD_INT 7
13735: PUSH
13736: LD_INT 11
13738: PUSH
13739: LD_INT 12
13741: PUSH
13742: LD_INT 15
13744: PUSH
13745: LD_INT 16
13747: PUSH
13748: LD_INT 20
13750: PUSH
13751: LD_INT 21
13753: PUSH
13754: LD_INT 22
13756: PUSH
13757: LD_INT 23
13759: PUSH
13760: LD_INT 25
13762: PUSH
13763: LD_INT 26
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: PUSH
13782: LD_INT 101
13784: PUSH
13785: LD_INT 102
13787: PUSH
13788: LD_INT 103
13790: PUSH
13791: LD_INT 105
13793: PUSH
13794: LD_INT 106
13796: PUSH
13797: LD_INT 108
13799: PUSH
13800: LD_INT 112
13802: PUSH
13803: LD_INT 116
13805: PUSH
13806: LD_INT 117
13808: PUSH
13809: LD_INT 118
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: ST_TO_ADDR
13828: GO 16231
13830: LD_INT 8
13832: DOUBLE
13833: EQUAL
13834: IFTRUE 13838
13836: GO 13978
13838: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13839: LD_ADDR_VAR 0 2
13843: PUSH
13844: LD_INT 2
13846: PUSH
13847: LD_INT 4
13849: PUSH
13850: LD_INT 5
13852: PUSH
13853: LD_INT 6
13855: PUSH
13856: LD_INT 7
13858: PUSH
13859: LD_INT 8
13861: PUSH
13862: LD_INT 11
13864: PUSH
13865: LD_INT 12
13867: PUSH
13868: LD_INT 15
13870: PUSH
13871: LD_INT 16
13873: PUSH
13874: LD_INT 20
13876: PUSH
13877: LD_INT 21
13879: PUSH
13880: LD_INT 22
13882: PUSH
13883: LD_INT 23
13885: PUSH
13886: LD_INT 25
13888: PUSH
13889: LD_INT 26
13891: PUSH
13892: LD_INT 30
13894: PUSH
13895: LD_INT 31
13897: PUSH
13898: LD_INT 32
13900: PUSH
13901: LD_INT 36
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: PUSH
13926: LD_INT 101
13928: PUSH
13929: LD_INT 102
13931: PUSH
13932: LD_INT 103
13934: PUSH
13935: LD_INT 105
13937: PUSH
13938: LD_INT 106
13940: PUSH
13941: LD_INT 108
13943: PUSH
13944: LD_INT 109
13946: PUSH
13947: LD_INT 112
13949: PUSH
13950: LD_INT 116
13952: PUSH
13953: LD_INT 117
13955: PUSH
13956: LD_INT 118
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: ST_TO_ADDR
13976: GO 16231
13978: LD_INT 9
13980: DOUBLE
13981: EQUAL
13982: IFTRUE 13986
13984: GO 14134
13986: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13987: LD_ADDR_VAR 0 2
13991: PUSH
13992: LD_INT 2
13994: PUSH
13995: LD_INT 4
13997: PUSH
13998: LD_INT 5
14000: PUSH
14001: LD_INT 6
14003: PUSH
14004: LD_INT 7
14006: PUSH
14007: LD_INT 8
14009: PUSH
14010: LD_INT 11
14012: PUSH
14013: LD_INT 12
14015: PUSH
14016: LD_INT 15
14018: PUSH
14019: LD_INT 16
14021: PUSH
14022: LD_INT 20
14024: PUSH
14025: LD_INT 21
14027: PUSH
14028: LD_INT 22
14030: PUSH
14031: LD_INT 23
14033: PUSH
14034: LD_INT 25
14036: PUSH
14037: LD_INT 26
14039: PUSH
14040: LD_INT 28
14042: PUSH
14043: LD_INT 30
14045: PUSH
14046: LD_INT 31
14048: PUSH
14049: LD_INT 32
14051: PUSH
14052: LD_INT 36
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: PUSH
14078: LD_INT 101
14080: PUSH
14081: LD_INT 102
14083: PUSH
14084: LD_INT 103
14086: PUSH
14087: LD_INT 105
14089: PUSH
14090: LD_INT 106
14092: PUSH
14093: LD_INT 108
14095: PUSH
14096: LD_INT 109
14098: PUSH
14099: LD_INT 112
14101: PUSH
14102: LD_INT 114
14104: PUSH
14105: LD_INT 116
14107: PUSH
14108: LD_INT 117
14110: PUSH
14111: LD_INT 118
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: ST_TO_ADDR
14132: GO 16231
14134: LD_INT 10
14136: DOUBLE
14137: EQUAL
14138: IFTRUE 14142
14140: GO 14338
14142: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14143: LD_ADDR_VAR 0 2
14147: PUSH
14148: LD_INT 2
14150: PUSH
14151: LD_INT 4
14153: PUSH
14154: LD_INT 5
14156: PUSH
14157: LD_INT 6
14159: PUSH
14160: LD_INT 7
14162: PUSH
14163: LD_INT 8
14165: PUSH
14166: LD_INT 9
14168: PUSH
14169: LD_INT 10
14171: PUSH
14172: LD_INT 11
14174: PUSH
14175: LD_INT 12
14177: PUSH
14178: LD_INT 13
14180: PUSH
14181: LD_INT 14
14183: PUSH
14184: LD_INT 15
14186: PUSH
14187: LD_INT 16
14189: PUSH
14190: LD_INT 17
14192: PUSH
14193: LD_INT 18
14195: PUSH
14196: LD_INT 19
14198: PUSH
14199: LD_INT 20
14201: PUSH
14202: LD_INT 21
14204: PUSH
14205: LD_INT 22
14207: PUSH
14208: LD_INT 23
14210: PUSH
14211: LD_INT 24
14213: PUSH
14214: LD_INT 25
14216: PUSH
14217: LD_INT 26
14219: PUSH
14220: LD_INT 28
14222: PUSH
14223: LD_INT 30
14225: PUSH
14226: LD_INT 31
14228: PUSH
14229: LD_INT 32
14231: PUSH
14232: LD_INT 36
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: PUSH
14266: LD_INT 101
14268: PUSH
14269: LD_INT 102
14271: PUSH
14272: LD_INT 103
14274: PUSH
14275: LD_INT 104
14277: PUSH
14278: LD_INT 105
14280: PUSH
14281: LD_INT 106
14283: PUSH
14284: LD_INT 107
14286: PUSH
14287: LD_INT 108
14289: PUSH
14290: LD_INT 109
14292: PUSH
14293: LD_INT 110
14295: PUSH
14296: LD_INT 111
14298: PUSH
14299: LD_INT 112
14301: PUSH
14302: LD_INT 114
14304: PUSH
14305: LD_INT 116
14307: PUSH
14308: LD_INT 117
14310: PUSH
14311: LD_INT 118
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: ST_TO_ADDR
14336: GO 16231
14338: LD_INT 11
14340: DOUBLE
14341: EQUAL
14342: IFTRUE 14346
14344: GO 14550
14346: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14347: LD_ADDR_VAR 0 2
14351: PUSH
14352: LD_INT 2
14354: PUSH
14355: LD_INT 3
14357: PUSH
14358: LD_INT 4
14360: PUSH
14361: LD_INT 5
14363: PUSH
14364: LD_INT 6
14366: PUSH
14367: LD_INT 7
14369: PUSH
14370: LD_INT 8
14372: PUSH
14373: LD_INT 9
14375: PUSH
14376: LD_INT 10
14378: PUSH
14379: LD_INT 11
14381: PUSH
14382: LD_INT 12
14384: PUSH
14385: LD_INT 13
14387: PUSH
14388: LD_INT 14
14390: PUSH
14391: LD_INT 15
14393: PUSH
14394: LD_INT 16
14396: PUSH
14397: LD_INT 17
14399: PUSH
14400: LD_INT 18
14402: PUSH
14403: LD_INT 19
14405: PUSH
14406: LD_INT 20
14408: PUSH
14409: LD_INT 21
14411: PUSH
14412: LD_INT 22
14414: PUSH
14415: LD_INT 23
14417: PUSH
14418: LD_INT 24
14420: PUSH
14421: LD_INT 25
14423: PUSH
14424: LD_INT 26
14426: PUSH
14427: LD_INT 28
14429: PUSH
14430: LD_INT 30
14432: PUSH
14433: LD_INT 31
14435: PUSH
14436: LD_INT 32
14438: PUSH
14439: LD_INT 34
14441: PUSH
14442: LD_INT 36
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: PUSH
14478: LD_INT 101
14480: PUSH
14481: LD_INT 102
14483: PUSH
14484: LD_INT 103
14486: PUSH
14487: LD_INT 104
14489: PUSH
14490: LD_INT 105
14492: PUSH
14493: LD_INT 106
14495: PUSH
14496: LD_INT 107
14498: PUSH
14499: LD_INT 108
14501: PUSH
14502: LD_INT 109
14504: PUSH
14505: LD_INT 110
14507: PUSH
14508: LD_INT 111
14510: PUSH
14511: LD_INT 112
14513: PUSH
14514: LD_INT 114
14516: PUSH
14517: LD_INT 116
14519: PUSH
14520: LD_INT 117
14522: PUSH
14523: LD_INT 118
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: ST_TO_ADDR
14548: GO 16231
14550: LD_INT 12
14552: DOUBLE
14553: EQUAL
14554: IFTRUE 14558
14556: GO 14778
14558: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14559: LD_ADDR_VAR 0 2
14563: PUSH
14564: LD_INT 1
14566: PUSH
14567: LD_INT 2
14569: PUSH
14570: LD_INT 3
14572: PUSH
14573: LD_INT 4
14575: PUSH
14576: LD_INT 5
14578: PUSH
14579: LD_INT 6
14581: PUSH
14582: LD_INT 7
14584: PUSH
14585: LD_INT 8
14587: PUSH
14588: LD_INT 9
14590: PUSH
14591: LD_INT 10
14593: PUSH
14594: LD_INT 11
14596: PUSH
14597: LD_INT 12
14599: PUSH
14600: LD_INT 13
14602: PUSH
14603: LD_INT 14
14605: PUSH
14606: LD_INT 15
14608: PUSH
14609: LD_INT 16
14611: PUSH
14612: LD_INT 17
14614: PUSH
14615: LD_INT 18
14617: PUSH
14618: LD_INT 19
14620: PUSH
14621: LD_INT 20
14623: PUSH
14624: LD_INT 21
14626: PUSH
14627: LD_INT 22
14629: PUSH
14630: LD_INT 23
14632: PUSH
14633: LD_INT 24
14635: PUSH
14636: LD_INT 25
14638: PUSH
14639: LD_INT 26
14641: PUSH
14642: LD_INT 27
14644: PUSH
14645: LD_INT 28
14647: PUSH
14648: LD_INT 30
14650: PUSH
14651: LD_INT 31
14653: PUSH
14654: LD_INT 32
14656: PUSH
14657: LD_INT 33
14659: PUSH
14660: LD_INT 34
14662: PUSH
14663: LD_INT 36
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: PUSH
14702: LD_INT 101
14704: PUSH
14705: LD_INT 102
14707: PUSH
14708: LD_INT 103
14710: PUSH
14711: LD_INT 104
14713: PUSH
14714: LD_INT 105
14716: PUSH
14717: LD_INT 106
14719: PUSH
14720: LD_INT 107
14722: PUSH
14723: LD_INT 108
14725: PUSH
14726: LD_INT 109
14728: PUSH
14729: LD_INT 110
14731: PUSH
14732: LD_INT 111
14734: PUSH
14735: LD_INT 112
14737: PUSH
14738: LD_INT 113
14740: PUSH
14741: LD_INT 114
14743: PUSH
14744: LD_INT 116
14746: PUSH
14747: LD_INT 117
14749: PUSH
14750: LD_INT 118
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: ST_TO_ADDR
14776: GO 16231
14778: LD_INT 13
14780: DOUBLE
14781: EQUAL
14782: IFTRUE 14786
14784: GO 14994
14786: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14787: LD_ADDR_VAR 0 2
14791: PUSH
14792: LD_INT 1
14794: PUSH
14795: LD_INT 2
14797: PUSH
14798: LD_INT 3
14800: PUSH
14801: LD_INT 4
14803: PUSH
14804: LD_INT 5
14806: PUSH
14807: LD_INT 8
14809: PUSH
14810: LD_INT 9
14812: PUSH
14813: LD_INT 10
14815: PUSH
14816: LD_INT 11
14818: PUSH
14819: LD_INT 12
14821: PUSH
14822: LD_INT 14
14824: PUSH
14825: LD_INT 15
14827: PUSH
14828: LD_INT 16
14830: PUSH
14831: LD_INT 17
14833: PUSH
14834: LD_INT 18
14836: PUSH
14837: LD_INT 19
14839: PUSH
14840: LD_INT 20
14842: PUSH
14843: LD_INT 21
14845: PUSH
14846: LD_INT 22
14848: PUSH
14849: LD_INT 23
14851: PUSH
14852: LD_INT 24
14854: PUSH
14855: LD_INT 25
14857: PUSH
14858: LD_INT 26
14860: PUSH
14861: LD_INT 27
14863: PUSH
14864: LD_INT 28
14866: PUSH
14867: LD_INT 30
14869: PUSH
14870: LD_INT 31
14872: PUSH
14873: LD_INT 32
14875: PUSH
14876: LD_INT 33
14878: PUSH
14879: LD_INT 34
14881: PUSH
14882: LD_INT 36
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: PUSH
14918: LD_INT 101
14920: PUSH
14921: LD_INT 102
14923: PUSH
14924: LD_INT 103
14926: PUSH
14927: LD_INT 104
14929: PUSH
14930: LD_INT 105
14932: PUSH
14933: LD_INT 106
14935: PUSH
14936: LD_INT 107
14938: PUSH
14939: LD_INT 108
14941: PUSH
14942: LD_INT 109
14944: PUSH
14945: LD_INT 110
14947: PUSH
14948: LD_INT 111
14950: PUSH
14951: LD_INT 112
14953: PUSH
14954: LD_INT 113
14956: PUSH
14957: LD_INT 114
14959: PUSH
14960: LD_INT 116
14962: PUSH
14963: LD_INT 117
14965: PUSH
14966: LD_INT 118
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: ST_TO_ADDR
14992: GO 16231
14994: LD_INT 14
14996: DOUBLE
14997: EQUAL
14998: IFTRUE 15002
15000: GO 15226
15002: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15003: LD_ADDR_VAR 0 2
15007: PUSH
15008: LD_INT 1
15010: PUSH
15011: LD_INT 2
15013: PUSH
15014: LD_INT 3
15016: PUSH
15017: LD_INT 4
15019: PUSH
15020: LD_INT 5
15022: PUSH
15023: LD_INT 6
15025: PUSH
15026: LD_INT 7
15028: PUSH
15029: LD_INT 8
15031: PUSH
15032: LD_INT 9
15034: PUSH
15035: LD_INT 10
15037: PUSH
15038: LD_INT 11
15040: PUSH
15041: LD_INT 12
15043: PUSH
15044: LD_INT 13
15046: PUSH
15047: LD_INT 14
15049: PUSH
15050: LD_INT 15
15052: PUSH
15053: LD_INT 16
15055: PUSH
15056: LD_INT 17
15058: PUSH
15059: LD_INT 18
15061: PUSH
15062: LD_INT 19
15064: PUSH
15065: LD_INT 20
15067: PUSH
15068: LD_INT 21
15070: PUSH
15071: LD_INT 22
15073: PUSH
15074: LD_INT 23
15076: PUSH
15077: LD_INT 24
15079: PUSH
15080: LD_INT 25
15082: PUSH
15083: LD_INT 26
15085: PUSH
15086: LD_INT 27
15088: PUSH
15089: LD_INT 28
15091: PUSH
15092: LD_INT 29
15094: PUSH
15095: LD_INT 30
15097: PUSH
15098: LD_INT 31
15100: PUSH
15101: LD_INT 32
15103: PUSH
15104: LD_INT 33
15106: PUSH
15107: LD_INT 34
15109: PUSH
15110: LD_INT 36
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: PUSH
15150: LD_INT 101
15152: PUSH
15153: LD_INT 102
15155: PUSH
15156: LD_INT 103
15158: PUSH
15159: LD_INT 104
15161: PUSH
15162: LD_INT 105
15164: PUSH
15165: LD_INT 106
15167: PUSH
15168: LD_INT 107
15170: PUSH
15171: LD_INT 108
15173: PUSH
15174: LD_INT 109
15176: PUSH
15177: LD_INT 110
15179: PUSH
15180: LD_INT 111
15182: PUSH
15183: LD_INT 112
15185: PUSH
15186: LD_INT 113
15188: PUSH
15189: LD_INT 114
15191: PUSH
15192: LD_INT 116
15194: PUSH
15195: LD_INT 117
15197: PUSH
15198: LD_INT 118
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: ST_TO_ADDR
15224: GO 16231
15226: LD_INT 15
15228: DOUBLE
15229: EQUAL
15230: IFTRUE 15234
15232: GO 15458
15234: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15235: LD_ADDR_VAR 0 2
15239: PUSH
15240: LD_INT 1
15242: PUSH
15243: LD_INT 2
15245: PUSH
15246: LD_INT 3
15248: PUSH
15249: LD_INT 4
15251: PUSH
15252: LD_INT 5
15254: PUSH
15255: LD_INT 6
15257: PUSH
15258: LD_INT 7
15260: PUSH
15261: LD_INT 8
15263: PUSH
15264: LD_INT 9
15266: PUSH
15267: LD_INT 10
15269: PUSH
15270: LD_INT 11
15272: PUSH
15273: LD_INT 12
15275: PUSH
15276: LD_INT 13
15278: PUSH
15279: LD_INT 14
15281: PUSH
15282: LD_INT 15
15284: PUSH
15285: LD_INT 16
15287: PUSH
15288: LD_INT 17
15290: PUSH
15291: LD_INT 18
15293: PUSH
15294: LD_INT 19
15296: PUSH
15297: LD_INT 20
15299: PUSH
15300: LD_INT 21
15302: PUSH
15303: LD_INT 22
15305: PUSH
15306: LD_INT 23
15308: PUSH
15309: LD_INT 24
15311: PUSH
15312: LD_INT 25
15314: PUSH
15315: LD_INT 26
15317: PUSH
15318: LD_INT 27
15320: PUSH
15321: LD_INT 28
15323: PUSH
15324: LD_INT 29
15326: PUSH
15327: LD_INT 30
15329: PUSH
15330: LD_INT 31
15332: PUSH
15333: LD_INT 32
15335: PUSH
15336: LD_INT 33
15338: PUSH
15339: LD_INT 34
15341: PUSH
15342: LD_INT 36
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: PUSH
15382: LD_INT 101
15384: PUSH
15385: LD_INT 102
15387: PUSH
15388: LD_INT 103
15390: PUSH
15391: LD_INT 104
15393: PUSH
15394: LD_INT 105
15396: PUSH
15397: LD_INT 106
15399: PUSH
15400: LD_INT 107
15402: PUSH
15403: LD_INT 108
15405: PUSH
15406: LD_INT 109
15408: PUSH
15409: LD_INT 110
15411: PUSH
15412: LD_INT 111
15414: PUSH
15415: LD_INT 112
15417: PUSH
15418: LD_INT 113
15420: PUSH
15421: LD_INT 114
15423: PUSH
15424: LD_INT 116
15426: PUSH
15427: LD_INT 117
15429: PUSH
15430: LD_INT 118
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: ST_TO_ADDR
15456: GO 16231
15458: LD_INT 16
15460: DOUBLE
15461: EQUAL
15462: IFTRUE 15466
15464: GO 15602
15466: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15467: LD_ADDR_VAR 0 2
15471: PUSH
15472: LD_INT 2
15474: PUSH
15475: LD_INT 4
15477: PUSH
15478: LD_INT 5
15480: PUSH
15481: LD_INT 7
15483: PUSH
15484: LD_INT 11
15486: PUSH
15487: LD_INT 12
15489: PUSH
15490: LD_INT 15
15492: PUSH
15493: LD_INT 16
15495: PUSH
15496: LD_INT 20
15498: PUSH
15499: LD_INT 21
15501: PUSH
15502: LD_INT 22
15504: PUSH
15505: LD_INT 23
15507: PUSH
15508: LD_INT 25
15510: PUSH
15511: LD_INT 26
15513: PUSH
15514: LD_INT 30
15516: PUSH
15517: LD_INT 31
15519: PUSH
15520: LD_INT 32
15522: PUSH
15523: LD_INT 33
15525: PUSH
15526: LD_INT 34
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: PUSH
15550: LD_INT 101
15552: PUSH
15553: LD_INT 102
15555: PUSH
15556: LD_INT 103
15558: PUSH
15559: LD_INT 106
15561: PUSH
15562: LD_INT 108
15564: PUSH
15565: LD_INT 112
15567: PUSH
15568: LD_INT 113
15570: PUSH
15571: LD_INT 114
15573: PUSH
15574: LD_INT 116
15576: PUSH
15577: LD_INT 117
15579: PUSH
15580: LD_INT 118
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: ST_TO_ADDR
15600: GO 16231
15602: LD_INT 17
15604: DOUBLE
15605: EQUAL
15606: IFTRUE 15610
15608: GO 15834
15610: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15611: LD_ADDR_VAR 0 2
15615: PUSH
15616: LD_INT 1
15618: PUSH
15619: LD_INT 2
15621: PUSH
15622: LD_INT 3
15624: PUSH
15625: LD_INT 4
15627: PUSH
15628: LD_INT 5
15630: PUSH
15631: LD_INT 6
15633: PUSH
15634: LD_INT 7
15636: PUSH
15637: LD_INT 8
15639: PUSH
15640: LD_INT 9
15642: PUSH
15643: LD_INT 10
15645: PUSH
15646: LD_INT 11
15648: PUSH
15649: LD_INT 12
15651: PUSH
15652: LD_INT 13
15654: PUSH
15655: LD_INT 14
15657: PUSH
15658: LD_INT 15
15660: PUSH
15661: LD_INT 16
15663: PUSH
15664: LD_INT 17
15666: PUSH
15667: LD_INT 18
15669: PUSH
15670: LD_INT 19
15672: PUSH
15673: LD_INT 20
15675: PUSH
15676: LD_INT 21
15678: PUSH
15679: LD_INT 22
15681: PUSH
15682: LD_INT 23
15684: PUSH
15685: LD_INT 24
15687: PUSH
15688: LD_INT 25
15690: PUSH
15691: LD_INT 26
15693: PUSH
15694: LD_INT 27
15696: PUSH
15697: LD_INT 28
15699: PUSH
15700: LD_INT 29
15702: PUSH
15703: LD_INT 30
15705: PUSH
15706: LD_INT 31
15708: PUSH
15709: LD_INT 32
15711: PUSH
15712: LD_INT 33
15714: PUSH
15715: LD_INT 34
15717: PUSH
15718: LD_INT 36
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: PUSH
15758: LD_INT 101
15760: PUSH
15761: LD_INT 102
15763: PUSH
15764: LD_INT 103
15766: PUSH
15767: LD_INT 104
15769: PUSH
15770: LD_INT 105
15772: PUSH
15773: LD_INT 106
15775: PUSH
15776: LD_INT 107
15778: PUSH
15779: LD_INT 108
15781: PUSH
15782: LD_INT 109
15784: PUSH
15785: LD_INT 110
15787: PUSH
15788: LD_INT 111
15790: PUSH
15791: LD_INT 112
15793: PUSH
15794: LD_INT 113
15796: PUSH
15797: LD_INT 114
15799: PUSH
15800: LD_INT 116
15802: PUSH
15803: LD_INT 117
15805: PUSH
15806: LD_INT 118
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: ST_TO_ADDR
15832: GO 16231
15834: LD_INT 18
15836: DOUBLE
15837: EQUAL
15838: IFTRUE 15842
15840: GO 15990
15842: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15843: LD_ADDR_VAR 0 2
15847: PUSH
15848: LD_INT 2
15850: PUSH
15851: LD_INT 4
15853: PUSH
15854: LD_INT 5
15856: PUSH
15857: LD_INT 7
15859: PUSH
15860: LD_INT 11
15862: PUSH
15863: LD_INT 12
15865: PUSH
15866: LD_INT 15
15868: PUSH
15869: LD_INT 16
15871: PUSH
15872: LD_INT 20
15874: PUSH
15875: LD_INT 21
15877: PUSH
15878: LD_INT 22
15880: PUSH
15881: LD_INT 23
15883: PUSH
15884: LD_INT 25
15886: PUSH
15887: LD_INT 26
15889: PUSH
15890: LD_INT 30
15892: PUSH
15893: LD_INT 31
15895: PUSH
15896: LD_INT 32
15898: PUSH
15899: LD_INT 33
15901: PUSH
15902: LD_INT 34
15904: PUSH
15905: LD_INT 35
15907: PUSH
15908: LD_INT 36
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 101
15936: PUSH
15937: LD_INT 102
15939: PUSH
15940: LD_INT 103
15942: PUSH
15943: LD_INT 106
15945: PUSH
15946: LD_INT 108
15948: PUSH
15949: LD_INT 112
15951: PUSH
15952: LD_INT 113
15954: PUSH
15955: LD_INT 114
15957: PUSH
15958: LD_INT 115
15960: PUSH
15961: LD_INT 116
15963: PUSH
15964: LD_INT 117
15966: PUSH
15967: LD_INT 118
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: ST_TO_ADDR
15988: GO 16231
15990: LD_INT 19
15992: DOUBLE
15993: EQUAL
15994: IFTRUE 15998
15996: GO 16230
15998: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15999: LD_ADDR_VAR 0 2
16003: PUSH
16004: LD_INT 1
16006: PUSH
16007: LD_INT 2
16009: PUSH
16010: LD_INT 3
16012: PUSH
16013: LD_INT 4
16015: PUSH
16016: LD_INT 5
16018: PUSH
16019: LD_INT 6
16021: PUSH
16022: LD_INT 7
16024: PUSH
16025: LD_INT 8
16027: PUSH
16028: LD_INT 9
16030: PUSH
16031: LD_INT 10
16033: PUSH
16034: LD_INT 11
16036: PUSH
16037: LD_INT 12
16039: PUSH
16040: LD_INT 13
16042: PUSH
16043: LD_INT 14
16045: PUSH
16046: LD_INT 15
16048: PUSH
16049: LD_INT 16
16051: PUSH
16052: LD_INT 17
16054: PUSH
16055: LD_INT 18
16057: PUSH
16058: LD_INT 19
16060: PUSH
16061: LD_INT 20
16063: PUSH
16064: LD_INT 21
16066: PUSH
16067: LD_INT 22
16069: PUSH
16070: LD_INT 23
16072: PUSH
16073: LD_INT 24
16075: PUSH
16076: LD_INT 25
16078: PUSH
16079: LD_INT 26
16081: PUSH
16082: LD_INT 27
16084: PUSH
16085: LD_INT 28
16087: PUSH
16088: LD_INT 29
16090: PUSH
16091: LD_INT 30
16093: PUSH
16094: LD_INT 31
16096: PUSH
16097: LD_INT 32
16099: PUSH
16100: LD_INT 33
16102: PUSH
16103: LD_INT 34
16105: PUSH
16106: LD_INT 35
16108: PUSH
16109: LD_INT 36
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: PUSH
16150: LD_INT 101
16152: PUSH
16153: LD_INT 102
16155: PUSH
16156: LD_INT 103
16158: PUSH
16159: LD_INT 104
16161: PUSH
16162: LD_INT 105
16164: PUSH
16165: LD_INT 106
16167: PUSH
16168: LD_INT 107
16170: PUSH
16171: LD_INT 108
16173: PUSH
16174: LD_INT 109
16176: PUSH
16177: LD_INT 110
16179: PUSH
16180: LD_INT 111
16182: PUSH
16183: LD_INT 112
16185: PUSH
16186: LD_INT 113
16188: PUSH
16189: LD_INT 114
16191: PUSH
16192: LD_INT 115
16194: PUSH
16195: LD_INT 116
16197: PUSH
16198: LD_INT 117
16200: PUSH
16201: LD_INT 118
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: ST_TO_ADDR
16228: GO 16231
16230: POP
// end else
16231: GO 16462
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16233: LD_ADDR_VAR 0 2
16237: PUSH
16238: LD_INT 1
16240: PUSH
16241: LD_INT 2
16243: PUSH
16244: LD_INT 3
16246: PUSH
16247: LD_INT 4
16249: PUSH
16250: LD_INT 5
16252: PUSH
16253: LD_INT 6
16255: PUSH
16256: LD_INT 7
16258: PUSH
16259: LD_INT 8
16261: PUSH
16262: LD_INT 9
16264: PUSH
16265: LD_INT 10
16267: PUSH
16268: LD_INT 11
16270: PUSH
16271: LD_INT 12
16273: PUSH
16274: LD_INT 13
16276: PUSH
16277: LD_INT 14
16279: PUSH
16280: LD_INT 15
16282: PUSH
16283: LD_INT 16
16285: PUSH
16286: LD_INT 17
16288: PUSH
16289: LD_INT 18
16291: PUSH
16292: LD_INT 19
16294: PUSH
16295: LD_INT 20
16297: PUSH
16298: LD_INT 21
16300: PUSH
16301: LD_INT 22
16303: PUSH
16304: LD_INT 23
16306: PUSH
16307: LD_INT 24
16309: PUSH
16310: LD_INT 25
16312: PUSH
16313: LD_INT 26
16315: PUSH
16316: LD_INT 27
16318: PUSH
16319: LD_INT 28
16321: PUSH
16322: LD_INT 29
16324: PUSH
16325: LD_INT 30
16327: PUSH
16328: LD_INT 31
16330: PUSH
16331: LD_INT 32
16333: PUSH
16334: LD_INT 33
16336: PUSH
16337: LD_INT 34
16339: PUSH
16340: LD_INT 35
16342: PUSH
16343: LD_INT 36
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 101
16386: PUSH
16387: LD_INT 102
16389: PUSH
16390: LD_INT 103
16392: PUSH
16393: LD_INT 104
16395: PUSH
16396: LD_INT 105
16398: PUSH
16399: LD_INT 106
16401: PUSH
16402: LD_INT 107
16404: PUSH
16405: LD_INT 108
16407: PUSH
16408: LD_INT 109
16410: PUSH
16411: LD_INT 110
16413: PUSH
16414: LD_INT 111
16416: PUSH
16417: LD_INT 112
16419: PUSH
16420: LD_INT 113
16422: PUSH
16423: LD_INT 114
16425: PUSH
16426: LD_INT 115
16428: PUSH
16429: LD_INT 116
16431: PUSH
16432: LD_INT 117
16434: PUSH
16435: LD_INT 118
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: ST_TO_ADDR
// if result then
16462: LD_VAR 0 2
16466: IFFALSE 17252
// begin normal :=  ;
16468: LD_ADDR_VAR 0 5
16472: PUSH
16473: LD_STRING 
16475: ST_TO_ADDR
// hardcore :=  ;
16476: LD_ADDR_VAR 0 6
16480: PUSH
16481: LD_STRING 
16483: ST_TO_ADDR
// active :=  ;
16484: LD_ADDR_VAR 0 7
16488: PUSH
16489: LD_STRING 
16491: ST_TO_ADDR
// for i = 1 to normalCounter do
16492: LD_ADDR_VAR 0 8
16496: PUSH
16497: DOUBLE
16498: LD_INT 1
16500: DEC
16501: ST_TO_ADDR
16502: LD_EXP 49
16506: PUSH
16507: FOR_TO
16508: IFFALSE 16609
// begin tmp := 0 ;
16510: LD_ADDR_VAR 0 3
16514: PUSH
16515: LD_STRING 0
16517: ST_TO_ADDR
// if result [ 1 ] then
16518: LD_VAR 0 2
16522: PUSH
16523: LD_INT 1
16525: ARRAY
16526: IFFALSE 16591
// if result [ 1 ] [ 1 ] = i then
16528: LD_VAR 0 2
16532: PUSH
16533: LD_INT 1
16535: ARRAY
16536: PUSH
16537: LD_INT 1
16539: ARRAY
16540: PUSH
16541: LD_VAR 0 8
16545: EQUAL
16546: IFFALSE 16591
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16548: LD_ADDR_VAR 0 2
16552: PUSH
16553: LD_VAR 0 2
16557: PPUSH
16558: LD_INT 1
16560: PPUSH
16561: LD_VAR 0 2
16565: PUSH
16566: LD_INT 1
16568: ARRAY
16569: PPUSH
16570: LD_INT 1
16572: PPUSH
16573: CALL_OW 3
16577: PPUSH
16578: CALL_OW 1
16582: ST_TO_ADDR
// tmp := 1 ;
16583: LD_ADDR_VAR 0 3
16587: PUSH
16588: LD_STRING 1
16590: ST_TO_ADDR
// end ; normal := normal & tmp ;
16591: LD_ADDR_VAR 0 5
16595: PUSH
16596: LD_VAR 0 5
16600: PUSH
16601: LD_VAR 0 3
16605: STR
16606: ST_TO_ADDR
// end ;
16607: GO 16507
16609: POP
16610: POP
// for i = 1 to hardcoreCounter do
16611: LD_ADDR_VAR 0 8
16615: PUSH
16616: DOUBLE
16617: LD_INT 1
16619: DEC
16620: ST_TO_ADDR
16621: LD_EXP 50
16625: PUSH
16626: FOR_TO
16627: IFFALSE 16732
// begin tmp := 0 ;
16629: LD_ADDR_VAR 0 3
16633: PUSH
16634: LD_STRING 0
16636: ST_TO_ADDR
// if result [ 2 ] then
16637: LD_VAR 0 2
16641: PUSH
16642: LD_INT 2
16644: ARRAY
16645: IFFALSE 16714
// if result [ 2 ] [ 1 ] = 100 + i then
16647: LD_VAR 0 2
16651: PUSH
16652: LD_INT 2
16654: ARRAY
16655: PUSH
16656: LD_INT 1
16658: ARRAY
16659: PUSH
16660: LD_INT 100
16662: PUSH
16663: LD_VAR 0 8
16667: PLUS
16668: EQUAL
16669: IFFALSE 16714
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16671: LD_ADDR_VAR 0 2
16675: PUSH
16676: LD_VAR 0 2
16680: PPUSH
16681: LD_INT 2
16683: PPUSH
16684: LD_VAR 0 2
16688: PUSH
16689: LD_INT 2
16691: ARRAY
16692: PPUSH
16693: LD_INT 1
16695: PPUSH
16696: CALL_OW 3
16700: PPUSH
16701: CALL_OW 1
16705: ST_TO_ADDR
// tmp := 1 ;
16706: LD_ADDR_VAR 0 3
16710: PUSH
16711: LD_STRING 1
16713: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16714: LD_ADDR_VAR 0 6
16718: PUSH
16719: LD_VAR 0 6
16723: PUSH
16724: LD_VAR 0 3
16728: STR
16729: ST_TO_ADDR
// end ;
16730: GO 16626
16732: POP
16733: POP
// if isGameLoad then
16734: LD_VAR 0 1
16738: IFFALSE 17213
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16740: LD_ADDR_VAR 0 4
16744: PUSH
16745: LD_EXP 53
16749: PUSH
16750: LD_EXP 52
16754: PUSH
16755: LD_EXP 54
16759: PUSH
16760: LD_EXP 51
16764: PUSH
16765: LD_EXP 55
16769: PUSH
16770: LD_EXP 56
16774: PUSH
16775: LD_EXP 57
16779: PUSH
16780: LD_EXP 58
16784: PUSH
16785: LD_EXP 59
16789: PUSH
16790: LD_EXP 60
16794: PUSH
16795: LD_EXP 61
16799: PUSH
16800: LD_EXP 62
16804: PUSH
16805: LD_EXP 63
16809: PUSH
16810: LD_EXP 64
16814: PUSH
16815: LD_EXP 72
16819: PUSH
16820: LD_EXP 73
16824: PUSH
16825: LD_EXP 74
16829: PUSH
16830: LD_EXP 75
16834: PUSH
16835: LD_EXP 77
16839: PUSH
16840: LD_EXP 78
16844: PUSH
16845: LD_EXP 79
16849: PUSH
16850: LD_EXP 82
16854: PUSH
16855: LD_EXP 84
16859: PUSH
16860: LD_EXP 85
16864: PUSH
16865: LD_EXP 86
16869: PUSH
16870: LD_EXP 88
16874: PUSH
16875: LD_EXP 89
16879: PUSH
16880: LD_EXP 92
16884: PUSH
16885: LD_EXP 93
16889: PUSH
16890: LD_EXP 94
16894: PUSH
16895: LD_EXP 95
16899: PUSH
16900: LD_EXP 96
16904: PUSH
16905: LD_EXP 97
16909: PUSH
16910: LD_EXP 98
16914: PUSH
16915: LD_EXP 99
16919: PUSH
16920: LD_EXP 100
16924: PUSH
16925: LD_EXP 65
16929: PUSH
16930: LD_EXP 66
16934: PUSH
16935: LD_EXP 69
16939: PUSH
16940: LD_EXP 70
16944: PUSH
16945: LD_EXP 71
16949: PUSH
16950: LD_EXP 67
16954: PUSH
16955: LD_EXP 68
16959: PUSH
16960: LD_EXP 76
16964: PUSH
16965: LD_EXP 80
16969: PUSH
16970: LD_EXP 81
16974: PUSH
16975: LD_EXP 83
16979: PUSH
16980: LD_EXP 87
16984: PUSH
16985: LD_EXP 90
16989: PUSH
16990: LD_EXP 91
16994: PUSH
16995: LD_EXP 101
16999: PUSH
17000: LD_EXP 102
17004: PUSH
17005: LD_EXP 103
17009: PUSH
17010: LD_EXP 104
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: ST_TO_ADDR
// tmp :=  ;
17071: LD_ADDR_VAR 0 3
17075: PUSH
17076: LD_STRING 
17078: ST_TO_ADDR
// for i = 1 to normalCounter do
17079: LD_ADDR_VAR 0 8
17083: PUSH
17084: DOUBLE
17085: LD_INT 1
17087: DEC
17088: ST_TO_ADDR
17089: LD_EXP 49
17093: PUSH
17094: FOR_TO
17095: IFFALSE 17131
// begin if flags [ i ] then
17097: LD_VAR 0 4
17101: PUSH
17102: LD_VAR 0 8
17106: ARRAY
17107: IFFALSE 17129
// tmp := tmp & i & ; ;
17109: LD_ADDR_VAR 0 3
17113: PUSH
17114: LD_VAR 0 3
17118: PUSH
17119: LD_VAR 0 8
17123: STR
17124: PUSH
17125: LD_STRING ;
17127: STR
17128: ST_TO_ADDR
// end ;
17129: GO 17094
17131: POP
17132: POP
// for i = 1 to hardcoreCounter do
17133: LD_ADDR_VAR 0 8
17137: PUSH
17138: DOUBLE
17139: LD_INT 1
17141: DEC
17142: ST_TO_ADDR
17143: LD_EXP 50
17147: PUSH
17148: FOR_TO
17149: IFFALSE 17195
// begin if flags [ normalCounter + i ] then
17151: LD_VAR 0 4
17155: PUSH
17156: LD_EXP 49
17160: PUSH
17161: LD_VAR 0 8
17165: PLUS
17166: ARRAY
17167: IFFALSE 17193
// tmp := tmp & ( 100 + i ) & ; ;
17169: LD_ADDR_VAR 0 3
17173: PUSH
17174: LD_VAR 0 3
17178: PUSH
17179: LD_INT 100
17181: PUSH
17182: LD_VAR 0 8
17186: PLUS
17187: STR
17188: PUSH
17189: LD_STRING ;
17191: STR
17192: ST_TO_ADDR
// end ;
17193: GO 17148
17195: POP
17196: POP
// if tmp then
17197: LD_VAR 0 3
17201: IFFALSE 17213
// active := tmp ;
17203: LD_ADDR_VAR 0 7
17207: PUSH
17208: LD_VAR 0 3
17212: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17213: LD_STRING getStreamItemsFromMission("
17215: PUSH
17216: LD_VAR 0 5
17220: STR
17221: PUSH
17222: LD_STRING ","
17224: STR
17225: PUSH
17226: LD_VAR 0 6
17230: STR
17231: PUSH
17232: LD_STRING ","
17234: STR
17235: PUSH
17236: LD_VAR 0 7
17240: STR
17241: PUSH
17242: LD_STRING ")
17244: STR
17245: PPUSH
17246: CALL_OW 559
// end else
17250: GO 17259
// ToLua ( getStreamItemsFromMission("","","") ) ;
17252: LD_STRING getStreamItemsFromMission("","","")
17254: PPUSH
17255: CALL_OW 559
// end ;
17259: LD_VAR 0 2
17263: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17264: LD_EXP 48
17268: PUSH
17269: LD_EXP 53
17273: AND
17274: IFFALSE 17398
17276: GO 17278
17278: DISABLE
17279: LD_INT 0
17281: PPUSH
17282: PPUSH
// begin enable ;
17283: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17284: LD_ADDR_VAR 0 2
17288: PUSH
17289: LD_INT 22
17291: PUSH
17292: LD_OWVAR 2
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: LD_INT 2
17303: PUSH
17304: LD_INT 34
17306: PUSH
17307: LD_INT 7
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 34
17316: PUSH
17317: LD_INT 45
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 34
17326: PUSH
17327: LD_INT 28
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: LD_INT 34
17336: PUSH
17337: LD_INT 47
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PPUSH
17355: CALL_OW 69
17359: ST_TO_ADDR
// if not tmp then
17360: LD_VAR 0 2
17364: NOT
17365: IFFALSE 17369
// exit ;
17367: GO 17398
// for i in tmp do
17369: LD_ADDR_VAR 0 1
17373: PUSH
17374: LD_VAR 0 2
17378: PUSH
17379: FOR_IN
17380: IFFALSE 17396
// begin SetLives ( i , 0 ) ;
17382: LD_VAR 0 1
17386: PPUSH
17387: LD_INT 0
17389: PPUSH
17390: CALL_OW 234
// end ;
17394: GO 17379
17396: POP
17397: POP
// end ;
17398: PPOPN 2
17400: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17401: LD_EXP 48
17405: PUSH
17406: LD_EXP 54
17410: AND
17411: IFFALSE 17495
17413: GO 17415
17415: DISABLE
17416: LD_INT 0
17418: PPUSH
17419: PPUSH
// begin enable ;
17420: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17421: LD_ADDR_VAR 0 2
17425: PUSH
17426: LD_INT 22
17428: PUSH
17429: LD_OWVAR 2
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PUSH
17438: LD_INT 32
17440: PUSH
17441: LD_INT 3
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PPUSH
17452: CALL_OW 69
17456: ST_TO_ADDR
// if not tmp then
17457: LD_VAR 0 2
17461: NOT
17462: IFFALSE 17466
// exit ;
17464: GO 17495
// for i in tmp do
17466: LD_ADDR_VAR 0 1
17470: PUSH
17471: LD_VAR 0 2
17475: PUSH
17476: FOR_IN
17477: IFFALSE 17493
// begin SetLives ( i , 0 ) ;
17479: LD_VAR 0 1
17483: PPUSH
17484: LD_INT 0
17486: PPUSH
17487: CALL_OW 234
// end ;
17491: GO 17476
17493: POP
17494: POP
// end ;
17495: PPOPN 2
17497: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17498: LD_EXP 48
17502: PUSH
17503: LD_EXP 51
17507: AND
17508: IFFALSE 17601
17510: GO 17512
17512: DISABLE
17513: LD_INT 0
17515: PPUSH
// begin enable ;
17516: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17517: LD_ADDR_VAR 0 1
17521: PUSH
17522: LD_INT 22
17524: PUSH
17525: LD_OWVAR 2
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 2
17536: PUSH
17537: LD_INT 25
17539: PUSH
17540: LD_INT 5
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 25
17549: PUSH
17550: LD_INT 9
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 25
17559: PUSH
17560: LD_INT 8
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PPUSH
17577: CALL_OW 69
17581: PUSH
17582: FOR_IN
17583: IFFALSE 17599
// begin SetClass ( i , 1 ) ;
17585: LD_VAR 0 1
17589: PPUSH
17590: LD_INT 1
17592: PPUSH
17593: CALL_OW 336
// end ;
17597: GO 17582
17599: POP
17600: POP
// end ;
17601: PPOPN 1
17603: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17604: LD_EXP 48
17608: PUSH
17609: LD_EXP 52
17613: AND
17614: PUSH
17615: LD_OWVAR 65
17619: PUSH
17620: LD_INT 7
17622: LESS
17623: AND
17624: IFFALSE 17638
17626: GO 17628
17628: DISABLE
// begin enable ;
17629: ENABLE
// game_speed := 7 ;
17630: LD_ADDR_OWVAR 65
17634: PUSH
17635: LD_INT 7
17637: ST_TO_ADDR
// end ;
17638: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17639: LD_EXP 48
17643: PUSH
17644: LD_EXP 55
17648: AND
17649: IFFALSE 17851
17651: GO 17653
17653: DISABLE
17654: LD_INT 0
17656: PPUSH
17657: PPUSH
17658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17659: LD_ADDR_VAR 0 3
17663: PUSH
17664: LD_INT 81
17666: PUSH
17667: LD_OWVAR 2
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: LD_INT 21
17678: PUSH
17679: LD_INT 1
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PPUSH
17690: CALL_OW 69
17694: ST_TO_ADDR
// if not tmp then
17695: LD_VAR 0 3
17699: NOT
17700: IFFALSE 17704
// exit ;
17702: GO 17851
// if tmp > 5 then
17704: LD_VAR 0 3
17708: PUSH
17709: LD_INT 5
17711: GREATER
17712: IFFALSE 17724
// k := 5 else
17714: LD_ADDR_VAR 0 2
17718: PUSH
17719: LD_INT 5
17721: ST_TO_ADDR
17722: GO 17734
// k := tmp ;
17724: LD_ADDR_VAR 0 2
17728: PUSH
17729: LD_VAR 0 3
17733: ST_TO_ADDR
// for i := 1 to k do
17734: LD_ADDR_VAR 0 1
17738: PUSH
17739: DOUBLE
17740: LD_INT 1
17742: DEC
17743: ST_TO_ADDR
17744: LD_VAR 0 2
17748: PUSH
17749: FOR_TO
17750: IFFALSE 17849
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17752: LD_VAR 0 3
17756: PUSH
17757: LD_VAR 0 1
17761: ARRAY
17762: PPUSH
17763: LD_VAR 0 1
17767: PUSH
17768: LD_INT 4
17770: MOD
17771: PUSH
17772: LD_INT 1
17774: PLUS
17775: PPUSH
17776: CALL_OW 259
17780: PUSH
17781: LD_INT 10
17783: LESS
17784: IFFALSE 17847
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17786: LD_VAR 0 3
17790: PUSH
17791: LD_VAR 0 1
17795: ARRAY
17796: PPUSH
17797: LD_VAR 0 1
17801: PUSH
17802: LD_INT 4
17804: MOD
17805: PUSH
17806: LD_INT 1
17808: PLUS
17809: PPUSH
17810: LD_VAR 0 3
17814: PUSH
17815: LD_VAR 0 1
17819: ARRAY
17820: PPUSH
17821: LD_VAR 0 1
17825: PUSH
17826: LD_INT 4
17828: MOD
17829: PUSH
17830: LD_INT 1
17832: PLUS
17833: PPUSH
17834: CALL_OW 259
17838: PUSH
17839: LD_INT 1
17841: PLUS
17842: PPUSH
17843: CALL_OW 237
17847: GO 17749
17849: POP
17850: POP
// end ;
17851: PPOPN 3
17853: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17854: LD_EXP 48
17858: PUSH
17859: LD_EXP 56
17863: AND
17864: IFFALSE 17884
17866: GO 17868
17868: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17869: LD_INT 4
17871: PPUSH
17872: LD_OWVAR 2
17876: PPUSH
17877: LD_INT 0
17879: PPUSH
17880: CALL_OW 324
17884: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17885: LD_EXP 48
17889: PUSH
17890: LD_EXP 85
17894: AND
17895: IFFALSE 17915
17897: GO 17899
17899: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17900: LD_INT 19
17902: PPUSH
17903: LD_OWVAR 2
17907: PPUSH
17908: LD_INT 0
17910: PPUSH
17911: CALL_OW 324
17915: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17916: LD_EXP 48
17920: PUSH
17921: LD_EXP 57
17925: AND
17926: IFFALSE 18028
17928: GO 17930
17930: DISABLE
17931: LD_INT 0
17933: PPUSH
17934: PPUSH
// begin enable ;
17935: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17936: LD_ADDR_VAR 0 2
17940: PUSH
17941: LD_INT 22
17943: PUSH
17944: LD_OWVAR 2
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 2
17955: PUSH
17956: LD_INT 34
17958: PUSH
17959: LD_INT 11
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 34
17968: PUSH
17969: LD_INT 30
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: LIST
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PPUSH
17985: CALL_OW 69
17989: ST_TO_ADDR
// if not tmp then
17990: LD_VAR 0 2
17994: NOT
17995: IFFALSE 17999
// exit ;
17997: GO 18028
// for i in tmp do
17999: LD_ADDR_VAR 0 1
18003: PUSH
18004: LD_VAR 0 2
18008: PUSH
18009: FOR_IN
18010: IFFALSE 18026
// begin SetLives ( i , 0 ) ;
18012: LD_VAR 0 1
18016: PPUSH
18017: LD_INT 0
18019: PPUSH
18020: CALL_OW 234
// end ;
18024: GO 18009
18026: POP
18027: POP
// end ;
18028: PPOPN 2
18030: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18031: LD_EXP 48
18035: PUSH
18036: LD_EXP 58
18040: AND
18041: IFFALSE 18061
18043: GO 18045
18045: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18046: LD_INT 32
18048: PPUSH
18049: LD_OWVAR 2
18053: PPUSH
18054: LD_INT 0
18056: PPUSH
18057: CALL_OW 324
18061: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18062: LD_EXP 48
18066: PUSH
18067: LD_EXP 59
18071: AND
18072: IFFALSE 18253
18074: GO 18076
18076: DISABLE
18077: LD_INT 0
18079: PPUSH
18080: PPUSH
18081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18082: LD_ADDR_VAR 0 2
18086: PUSH
18087: LD_INT 22
18089: PUSH
18090: LD_OWVAR 2
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: PUSH
18099: LD_INT 33
18101: PUSH
18102: LD_INT 3
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PPUSH
18113: CALL_OW 69
18117: ST_TO_ADDR
// if not tmp then
18118: LD_VAR 0 2
18122: NOT
18123: IFFALSE 18127
// exit ;
18125: GO 18253
// side := 0 ;
18127: LD_ADDR_VAR 0 3
18131: PUSH
18132: LD_INT 0
18134: ST_TO_ADDR
// for i := 1 to 8 do
18135: LD_ADDR_VAR 0 1
18139: PUSH
18140: DOUBLE
18141: LD_INT 1
18143: DEC
18144: ST_TO_ADDR
18145: LD_INT 8
18147: PUSH
18148: FOR_TO
18149: IFFALSE 18197
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18151: LD_OWVAR 2
18155: PUSH
18156: LD_VAR 0 1
18160: NONEQUAL
18161: PUSH
18162: LD_OWVAR 2
18166: PPUSH
18167: LD_VAR 0 1
18171: PPUSH
18172: CALL_OW 81
18176: PUSH
18177: LD_INT 2
18179: EQUAL
18180: AND
18181: IFFALSE 18195
// begin side := i ;
18183: LD_ADDR_VAR 0 3
18187: PUSH
18188: LD_VAR 0 1
18192: ST_TO_ADDR
// break ;
18193: GO 18197
// end ;
18195: GO 18148
18197: POP
18198: POP
// if not side then
18199: LD_VAR 0 3
18203: NOT
18204: IFFALSE 18208
// exit ;
18206: GO 18253
// for i := 1 to tmp do
18208: LD_ADDR_VAR 0 1
18212: PUSH
18213: DOUBLE
18214: LD_INT 1
18216: DEC
18217: ST_TO_ADDR
18218: LD_VAR 0 2
18222: PUSH
18223: FOR_TO
18224: IFFALSE 18251
// if Prob ( 60 ) then
18226: LD_INT 60
18228: PPUSH
18229: CALL_OW 13
18233: IFFALSE 18249
// SetSide ( i , side ) ;
18235: LD_VAR 0 1
18239: PPUSH
18240: LD_VAR 0 3
18244: PPUSH
18245: CALL_OW 235
18249: GO 18223
18251: POP
18252: POP
// end ;
18253: PPOPN 3
18255: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18256: LD_EXP 48
18260: PUSH
18261: LD_EXP 61
18265: AND
18266: IFFALSE 18385
18268: GO 18270
18270: DISABLE
18271: LD_INT 0
18273: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18274: LD_ADDR_VAR 0 1
18278: PUSH
18279: LD_INT 22
18281: PUSH
18282: LD_OWVAR 2
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 21
18293: PUSH
18294: LD_INT 1
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: LD_INT 3
18303: PUSH
18304: LD_INT 23
18306: PUSH
18307: LD_INT 0
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: LIST
18322: PPUSH
18323: CALL_OW 69
18327: PUSH
18328: FOR_IN
18329: IFFALSE 18383
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18331: LD_VAR 0 1
18335: PPUSH
18336: CALL_OW 257
18340: PUSH
18341: LD_INT 1
18343: PUSH
18344: LD_INT 2
18346: PUSH
18347: LD_INT 3
18349: PUSH
18350: LD_INT 4
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: IN
18359: IFFALSE 18381
// SetClass ( un , rand ( 1 , 4 ) ) ;
18361: LD_VAR 0 1
18365: PPUSH
18366: LD_INT 1
18368: PPUSH
18369: LD_INT 4
18371: PPUSH
18372: CALL_OW 12
18376: PPUSH
18377: CALL_OW 336
18381: GO 18328
18383: POP
18384: POP
// end ;
18385: PPOPN 1
18387: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18388: LD_EXP 48
18392: PUSH
18393: LD_EXP 60
18397: AND
18398: IFFALSE 18477
18400: GO 18402
18402: DISABLE
18403: LD_INT 0
18405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18406: LD_ADDR_VAR 0 1
18410: PUSH
18411: LD_INT 22
18413: PUSH
18414: LD_OWVAR 2
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 21
18425: PUSH
18426: LD_INT 3
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PPUSH
18437: CALL_OW 69
18441: ST_TO_ADDR
// if not tmp then
18442: LD_VAR 0 1
18446: NOT
18447: IFFALSE 18451
// exit ;
18449: GO 18477
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18451: LD_VAR 0 1
18455: PUSH
18456: LD_INT 1
18458: PPUSH
18459: LD_VAR 0 1
18463: PPUSH
18464: CALL_OW 12
18468: ARRAY
18469: PPUSH
18470: LD_INT 100
18472: PPUSH
18473: CALL_OW 234
// end ;
18477: PPOPN 1
18479: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18480: LD_EXP 48
18484: PUSH
18485: LD_EXP 62
18489: AND
18490: IFFALSE 18588
18492: GO 18494
18494: DISABLE
18495: LD_INT 0
18497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18498: LD_ADDR_VAR 0 1
18502: PUSH
18503: LD_INT 22
18505: PUSH
18506: LD_OWVAR 2
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 21
18517: PUSH
18518: LD_INT 1
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PPUSH
18529: CALL_OW 69
18533: ST_TO_ADDR
// if not tmp then
18534: LD_VAR 0 1
18538: NOT
18539: IFFALSE 18543
// exit ;
18541: GO 18588
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18543: LD_VAR 0 1
18547: PUSH
18548: LD_INT 1
18550: PPUSH
18551: LD_VAR 0 1
18555: PPUSH
18556: CALL_OW 12
18560: ARRAY
18561: PPUSH
18562: LD_INT 1
18564: PPUSH
18565: LD_INT 4
18567: PPUSH
18568: CALL_OW 12
18572: PPUSH
18573: LD_INT 3000
18575: PPUSH
18576: LD_INT 9000
18578: PPUSH
18579: CALL_OW 12
18583: PPUSH
18584: CALL_OW 492
// end ;
18588: PPOPN 1
18590: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18591: LD_EXP 48
18595: PUSH
18596: LD_EXP 63
18600: AND
18601: IFFALSE 18621
18603: GO 18605
18605: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18606: LD_INT 1
18608: PPUSH
18609: LD_OWVAR 2
18613: PPUSH
18614: LD_INT 0
18616: PPUSH
18617: CALL_OW 324
18621: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18622: LD_EXP 48
18626: PUSH
18627: LD_EXP 64
18631: AND
18632: IFFALSE 18715
18634: GO 18636
18636: DISABLE
18637: LD_INT 0
18639: PPUSH
18640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18641: LD_ADDR_VAR 0 2
18645: PUSH
18646: LD_INT 22
18648: PUSH
18649: LD_OWVAR 2
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 21
18660: PUSH
18661: LD_INT 3
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PPUSH
18672: CALL_OW 69
18676: ST_TO_ADDR
// if not tmp then
18677: LD_VAR 0 2
18681: NOT
18682: IFFALSE 18686
// exit ;
18684: GO 18715
// for i in tmp do
18686: LD_ADDR_VAR 0 1
18690: PUSH
18691: LD_VAR 0 2
18695: PUSH
18696: FOR_IN
18697: IFFALSE 18713
// SetBLevel ( i , 10 ) ;
18699: LD_VAR 0 1
18703: PPUSH
18704: LD_INT 10
18706: PPUSH
18707: CALL_OW 241
18711: GO 18696
18713: POP
18714: POP
// end ;
18715: PPOPN 2
18717: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18718: LD_EXP 48
18722: PUSH
18723: LD_EXP 65
18727: AND
18728: IFFALSE 18839
18730: GO 18732
18732: DISABLE
18733: LD_INT 0
18735: PPUSH
18736: PPUSH
18737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18738: LD_ADDR_VAR 0 3
18742: PUSH
18743: LD_INT 22
18745: PUSH
18746: LD_OWVAR 2
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 25
18757: PUSH
18758: LD_INT 1
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PPUSH
18769: CALL_OW 69
18773: ST_TO_ADDR
// if not tmp then
18774: LD_VAR 0 3
18778: NOT
18779: IFFALSE 18783
// exit ;
18781: GO 18839
// un := tmp [ rand ( 1 , tmp ) ] ;
18783: LD_ADDR_VAR 0 2
18787: PUSH
18788: LD_VAR 0 3
18792: PUSH
18793: LD_INT 1
18795: PPUSH
18796: LD_VAR 0 3
18800: PPUSH
18801: CALL_OW 12
18805: ARRAY
18806: ST_TO_ADDR
// if Crawls ( un ) then
18807: LD_VAR 0 2
18811: PPUSH
18812: CALL_OW 318
18816: IFFALSE 18827
// ComWalk ( un ) ;
18818: LD_VAR 0 2
18822: PPUSH
18823: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18827: LD_VAR 0 2
18831: PPUSH
18832: LD_INT 5
18834: PPUSH
18835: CALL_OW 336
// end ;
18839: PPOPN 3
18841: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18842: LD_EXP 48
18846: PUSH
18847: LD_EXP 66
18851: AND
18852: PUSH
18853: LD_OWVAR 67
18857: PUSH
18858: LD_INT 4
18860: LESS
18861: AND
18862: IFFALSE 18881
18864: GO 18866
18866: DISABLE
// begin Difficulty := Difficulty + 1 ;
18867: LD_ADDR_OWVAR 67
18871: PUSH
18872: LD_OWVAR 67
18876: PUSH
18877: LD_INT 1
18879: PLUS
18880: ST_TO_ADDR
// end ;
18881: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18882: LD_EXP 48
18886: PUSH
18887: LD_EXP 67
18891: AND
18892: IFFALSE 18995
18894: GO 18896
18896: DISABLE
18897: LD_INT 0
18899: PPUSH
// begin for i := 1 to 5 do
18900: LD_ADDR_VAR 0 1
18904: PUSH
18905: DOUBLE
18906: LD_INT 1
18908: DEC
18909: ST_TO_ADDR
18910: LD_INT 5
18912: PUSH
18913: FOR_TO
18914: IFFALSE 18993
// begin uc_nation := nation_nature ;
18916: LD_ADDR_OWVAR 21
18920: PUSH
18921: LD_INT 0
18923: ST_TO_ADDR
// uc_side := 0 ;
18924: LD_ADDR_OWVAR 20
18928: PUSH
18929: LD_INT 0
18931: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18932: LD_ADDR_OWVAR 29
18936: PUSH
18937: LD_INT 12
18939: PUSH
18940: LD_INT 12
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: ST_TO_ADDR
// hc_agressivity := 20 ;
18947: LD_ADDR_OWVAR 35
18951: PUSH
18952: LD_INT 20
18954: ST_TO_ADDR
// hc_class := class_tiger ;
18955: LD_ADDR_OWVAR 28
18959: PUSH
18960: LD_INT 14
18962: ST_TO_ADDR
// hc_gallery :=  ;
18963: LD_ADDR_OWVAR 33
18967: PUSH
18968: LD_STRING 
18970: ST_TO_ADDR
// hc_name :=  ;
18971: LD_ADDR_OWVAR 26
18975: PUSH
18976: LD_STRING 
18978: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18979: CALL_OW 44
18983: PPUSH
18984: LD_INT 0
18986: PPUSH
18987: CALL_OW 51
// end ;
18991: GO 18913
18993: POP
18994: POP
// end ;
18995: PPOPN 1
18997: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18998: LD_EXP 48
19002: PUSH
19003: LD_EXP 68
19007: AND
19008: IFFALSE 19017
19010: GO 19012
19012: DISABLE
// StreamSibBomb ;
19013: CALL 19018 0 0
19017: END
// export function StreamSibBomb ; var i , x , y ; begin
19018: LD_INT 0
19020: PPUSH
19021: PPUSH
19022: PPUSH
19023: PPUSH
// result := false ;
19024: LD_ADDR_VAR 0 1
19028: PUSH
19029: LD_INT 0
19031: ST_TO_ADDR
// for i := 1 to 16 do
19032: LD_ADDR_VAR 0 2
19036: PUSH
19037: DOUBLE
19038: LD_INT 1
19040: DEC
19041: ST_TO_ADDR
19042: LD_INT 16
19044: PUSH
19045: FOR_TO
19046: IFFALSE 19245
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19048: LD_ADDR_VAR 0 3
19052: PUSH
19053: LD_INT 10
19055: PUSH
19056: LD_INT 20
19058: PUSH
19059: LD_INT 30
19061: PUSH
19062: LD_INT 40
19064: PUSH
19065: LD_INT 50
19067: PUSH
19068: LD_INT 60
19070: PUSH
19071: LD_INT 70
19073: PUSH
19074: LD_INT 80
19076: PUSH
19077: LD_INT 90
19079: PUSH
19080: LD_INT 100
19082: PUSH
19083: LD_INT 110
19085: PUSH
19086: LD_INT 120
19088: PUSH
19089: LD_INT 130
19091: PUSH
19092: LD_INT 140
19094: PUSH
19095: LD_INT 150
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 1
19117: PPUSH
19118: LD_INT 15
19120: PPUSH
19121: CALL_OW 12
19125: ARRAY
19126: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19127: LD_ADDR_VAR 0 4
19131: PUSH
19132: LD_INT 10
19134: PUSH
19135: LD_INT 20
19137: PUSH
19138: LD_INT 30
19140: PUSH
19141: LD_INT 40
19143: PUSH
19144: LD_INT 50
19146: PUSH
19147: LD_INT 60
19149: PUSH
19150: LD_INT 70
19152: PUSH
19153: LD_INT 80
19155: PUSH
19156: LD_INT 90
19158: PUSH
19159: LD_INT 100
19161: PUSH
19162: LD_INT 110
19164: PUSH
19165: LD_INT 120
19167: PUSH
19168: LD_INT 130
19170: PUSH
19171: LD_INT 140
19173: PUSH
19174: LD_INT 150
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 1
19196: PPUSH
19197: LD_INT 15
19199: PPUSH
19200: CALL_OW 12
19204: ARRAY
19205: ST_TO_ADDR
// if ValidHex ( x , y ) then
19206: LD_VAR 0 3
19210: PPUSH
19211: LD_VAR 0 4
19215: PPUSH
19216: CALL_OW 488
19220: IFFALSE 19243
// begin result := [ x , y ] ;
19222: LD_ADDR_VAR 0 1
19226: PUSH
19227: LD_VAR 0 3
19231: PUSH
19232: LD_VAR 0 4
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: ST_TO_ADDR
// break ;
19241: GO 19245
// end ; end ;
19243: GO 19045
19245: POP
19246: POP
// if result then
19247: LD_VAR 0 1
19251: IFFALSE 19311
// begin ToLua ( playSibBomb() ) ;
19253: LD_STRING playSibBomb()
19255: PPUSH
19256: CALL_OW 559
// wait ( 0 0$14 ) ;
19260: LD_INT 490
19262: PPUSH
19263: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19267: LD_VAR 0 1
19271: PUSH
19272: LD_INT 1
19274: ARRAY
19275: PPUSH
19276: LD_VAR 0 1
19280: PUSH
19281: LD_INT 2
19283: ARRAY
19284: PPUSH
19285: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19289: LD_VAR 0 1
19293: PUSH
19294: LD_INT 1
19296: ARRAY
19297: PPUSH
19298: LD_VAR 0 1
19302: PUSH
19303: LD_INT 2
19305: ARRAY
19306: PPUSH
19307: CALL_OW 429
// end ; end ;
19311: LD_VAR 0 1
19315: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19316: LD_EXP 48
19320: PUSH
19321: LD_EXP 70
19325: AND
19326: IFFALSE 19338
19328: GO 19330
19330: DISABLE
// YouLost (  ) ;
19331: LD_STRING 
19333: PPUSH
19334: CALL_OW 104
19338: END
// every 0 0$1 trigger StreamModeActive and sFog do
19339: LD_EXP 48
19343: PUSH
19344: LD_EXP 69
19348: AND
19349: IFFALSE 19363
19351: GO 19353
19353: DISABLE
// FogOff ( your_side ) ;
19354: LD_OWVAR 2
19358: PPUSH
19359: CALL_OW 344
19363: END
// every 0 0$1 trigger StreamModeActive and sSun do
19364: LD_EXP 48
19368: PUSH
19369: LD_EXP 71
19373: AND
19374: IFFALSE 19402
19376: GO 19378
19378: DISABLE
// begin solar_recharge_percent := 0 ;
19379: LD_ADDR_OWVAR 79
19383: PUSH
19384: LD_INT 0
19386: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19387: LD_INT 10500
19389: PPUSH
19390: CALL_OW 67
// solar_recharge_percent := 100 ;
19394: LD_ADDR_OWVAR 79
19398: PUSH
19399: LD_INT 100
19401: ST_TO_ADDR
// end ;
19402: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19403: LD_EXP 48
19407: PUSH
19408: LD_EXP 72
19412: AND
19413: IFFALSE 19652
19415: GO 19417
19417: DISABLE
19418: LD_INT 0
19420: PPUSH
19421: PPUSH
19422: PPUSH
// begin tmp := [ ] ;
19423: LD_ADDR_VAR 0 3
19427: PUSH
19428: EMPTY
19429: ST_TO_ADDR
// for i := 1 to 6 do
19430: LD_ADDR_VAR 0 1
19434: PUSH
19435: DOUBLE
19436: LD_INT 1
19438: DEC
19439: ST_TO_ADDR
19440: LD_INT 6
19442: PUSH
19443: FOR_TO
19444: IFFALSE 19549
// begin uc_nation := nation_nature ;
19446: LD_ADDR_OWVAR 21
19450: PUSH
19451: LD_INT 0
19453: ST_TO_ADDR
// uc_side := 0 ;
19454: LD_ADDR_OWVAR 20
19458: PUSH
19459: LD_INT 0
19461: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19462: LD_ADDR_OWVAR 29
19466: PUSH
19467: LD_INT 12
19469: PUSH
19470: LD_INT 12
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: ST_TO_ADDR
// hc_agressivity := 20 ;
19477: LD_ADDR_OWVAR 35
19481: PUSH
19482: LD_INT 20
19484: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19485: LD_ADDR_OWVAR 28
19489: PUSH
19490: LD_INT 17
19492: ST_TO_ADDR
// hc_gallery :=  ;
19493: LD_ADDR_OWVAR 33
19497: PUSH
19498: LD_STRING 
19500: ST_TO_ADDR
// hc_name :=  ;
19501: LD_ADDR_OWVAR 26
19505: PUSH
19506: LD_STRING 
19508: ST_TO_ADDR
// un := CreateHuman ;
19509: LD_ADDR_VAR 0 2
19513: PUSH
19514: CALL_OW 44
19518: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19519: LD_VAR 0 2
19523: PPUSH
19524: LD_INT 1
19526: PPUSH
19527: CALL_OW 51
// tmp := tmp ^ un ;
19531: LD_ADDR_VAR 0 3
19535: PUSH
19536: LD_VAR 0 3
19540: PUSH
19541: LD_VAR 0 2
19545: ADD
19546: ST_TO_ADDR
// end ;
19547: GO 19443
19549: POP
19550: POP
// repeat wait ( 0 0$1 ) ;
19551: LD_INT 35
19553: PPUSH
19554: CALL_OW 67
// for un in tmp do
19558: LD_ADDR_VAR 0 2
19562: PUSH
19563: LD_VAR 0 3
19567: PUSH
19568: FOR_IN
19569: IFFALSE 19643
// begin if IsDead ( un ) then
19571: LD_VAR 0 2
19575: PPUSH
19576: CALL_OW 301
19580: IFFALSE 19600
// begin tmp := tmp diff un ;
19582: LD_ADDR_VAR 0 3
19586: PUSH
19587: LD_VAR 0 3
19591: PUSH
19592: LD_VAR 0 2
19596: DIFF
19597: ST_TO_ADDR
// continue ;
19598: GO 19568
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19600: LD_VAR 0 2
19604: PPUSH
19605: LD_INT 3
19607: PUSH
19608: LD_INT 22
19610: PUSH
19611: LD_INT 0
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PPUSH
19622: CALL_OW 69
19626: PPUSH
19627: LD_VAR 0 2
19631: PPUSH
19632: CALL_OW 74
19636: PPUSH
19637: CALL_OW 115
// end ;
19641: GO 19568
19643: POP
19644: POP
// until not tmp ;
19645: LD_VAR 0 3
19649: NOT
19650: IFFALSE 19551
// end ;
19652: PPOPN 3
19654: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19655: LD_EXP 48
19659: PUSH
19660: LD_EXP 73
19664: AND
19665: IFFALSE 19719
19667: GO 19669
19669: DISABLE
// begin ToLua ( displayTroll(); ) ;
19670: LD_STRING displayTroll();
19672: PPUSH
19673: CALL_OW 559
// wait ( 3 3$00 ) ;
19677: LD_INT 6300
19679: PPUSH
19680: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19684: LD_STRING hideTroll();
19686: PPUSH
19687: CALL_OW 559
// wait ( 1 1$00 ) ;
19691: LD_INT 2100
19693: PPUSH
19694: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19698: LD_STRING displayTroll();
19700: PPUSH
19701: CALL_OW 559
// wait ( 1 1$00 ) ;
19705: LD_INT 2100
19707: PPUSH
19708: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19712: LD_STRING hideTroll();
19714: PPUSH
19715: CALL_OW 559
// end ;
19719: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19720: LD_EXP 48
19724: PUSH
19725: LD_EXP 74
19729: AND
19730: IFFALSE 19793
19732: GO 19734
19734: DISABLE
19735: LD_INT 0
19737: PPUSH
// begin p := 0 ;
19738: LD_ADDR_VAR 0 1
19742: PUSH
19743: LD_INT 0
19745: ST_TO_ADDR
// repeat game_speed := 1 ;
19746: LD_ADDR_OWVAR 65
19750: PUSH
19751: LD_INT 1
19753: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19754: LD_INT 35
19756: PPUSH
19757: CALL_OW 67
// p := p + 1 ;
19761: LD_ADDR_VAR 0 1
19765: PUSH
19766: LD_VAR 0 1
19770: PUSH
19771: LD_INT 1
19773: PLUS
19774: ST_TO_ADDR
// until p >= 60 ;
19775: LD_VAR 0 1
19779: PUSH
19780: LD_INT 60
19782: GREATEREQUAL
19783: IFFALSE 19746
// game_speed := 4 ;
19785: LD_ADDR_OWVAR 65
19789: PUSH
19790: LD_INT 4
19792: ST_TO_ADDR
// end ;
19793: PPOPN 1
19795: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19796: LD_EXP 48
19800: PUSH
19801: LD_EXP 75
19805: AND
19806: IFFALSE 19952
19808: GO 19810
19810: DISABLE
19811: LD_INT 0
19813: PPUSH
19814: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19815: LD_ADDR_VAR 0 1
19819: PUSH
19820: LD_INT 22
19822: PUSH
19823: LD_OWVAR 2
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: LD_INT 2
19834: PUSH
19835: LD_INT 30
19837: PUSH
19838: LD_INT 0
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 30
19847: PUSH
19848: LD_INT 1
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: LIST
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PPUSH
19864: CALL_OW 69
19868: ST_TO_ADDR
// if not depot then
19869: LD_VAR 0 1
19873: NOT
19874: IFFALSE 19878
// exit ;
19876: GO 19952
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19878: LD_ADDR_VAR 0 2
19882: PUSH
19883: LD_VAR 0 1
19887: PUSH
19888: LD_INT 1
19890: PPUSH
19891: LD_VAR 0 1
19895: PPUSH
19896: CALL_OW 12
19900: ARRAY
19901: PPUSH
19902: CALL_OW 274
19906: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19907: LD_VAR 0 2
19911: PPUSH
19912: LD_INT 1
19914: PPUSH
19915: LD_INT 0
19917: PPUSH
19918: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19922: LD_VAR 0 2
19926: PPUSH
19927: LD_INT 2
19929: PPUSH
19930: LD_INT 0
19932: PPUSH
19933: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19937: LD_VAR 0 2
19941: PPUSH
19942: LD_INT 3
19944: PPUSH
19945: LD_INT 0
19947: PPUSH
19948: CALL_OW 277
// end ;
19952: PPOPN 2
19954: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19955: LD_EXP 48
19959: PUSH
19960: LD_EXP 76
19964: AND
19965: IFFALSE 20062
19967: GO 19969
19969: DISABLE
19970: LD_INT 0
19972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19973: LD_ADDR_VAR 0 1
19977: PUSH
19978: LD_INT 22
19980: PUSH
19981: LD_OWVAR 2
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 21
19992: PUSH
19993: LD_INT 1
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 3
20002: PUSH
20003: LD_INT 23
20005: PUSH
20006: LD_INT 0
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: LIST
20021: PPUSH
20022: CALL_OW 69
20026: ST_TO_ADDR
// if not tmp then
20027: LD_VAR 0 1
20031: NOT
20032: IFFALSE 20036
// exit ;
20034: GO 20062
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20036: LD_VAR 0 1
20040: PUSH
20041: LD_INT 1
20043: PPUSH
20044: LD_VAR 0 1
20048: PPUSH
20049: CALL_OW 12
20053: ARRAY
20054: PPUSH
20055: LD_INT 200
20057: PPUSH
20058: CALL_OW 234
// end ;
20062: PPOPN 1
20064: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20065: LD_EXP 48
20069: PUSH
20070: LD_EXP 77
20074: AND
20075: IFFALSE 20154
20077: GO 20079
20079: DISABLE
20080: LD_INT 0
20082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20083: LD_ADDR_VAR 0 1
20087: PUSH
20088: LD_INT 22
20090: PUSH
20091: LD_OWVAR 2
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 21
20102: PUSH
20103: LD_INT 2
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PPUSH
20114: CALL_OW 69
20118: ST_TO_ADDR
// if not tmp then
20119: LD_VAR 0 1
20123: NOT
20124: IFFALSE 20128
// exit ;
20126: GO 20154
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20128: LD_VAR 0 1
20132: PUSH
20133: LD_INT 1
20135: PPUSH
20136: LD_VAR 0 1
20140: PPUSH
20141: CALL_OW 12
20145: ARRAY
20146: PPUSH
20147: LD_INT 60
20149: PPUSH
20150: CALL_OW 234
// end ;
20154: PPOPN 1
20156: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20157: LD_EXP 48
20161: PUSH
20162: LD_EXP 78
20166: AND
20167: IFFALSE 20266
20169: GO 20171
20171: DISABLE
20172: LD_INT 0
20174: PPUSH
20175: PPUSH
// begin enable ;
20176: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20177: LD_ADDR_VAR 0 1
20181: PUSH
20182: LD_INT 22
20184: PUSH
20185: LD_OWVAR 2
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 61
20196: PUSH
20197: EMPTY
20198: LIST
20199: PUSH
20200: LD_INT 33
20202: PUSH
20203: LD_INT 2
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: LIST
20214: PPUSH
20215: CALL_OW 69
20219: ST_TO_ADDR
// if not tmp then
20220: LD_VAR 0 1
20224: NOT
20225: IFFALSE 20229
// exit ;
20227: GO 20266
// for i in tmp do
20229: LD_ADDR_VAR 0 2
20233: PUSH
20234: LD_VAR 0 1
20238: PUSH
20239: FOR_IN
20240: IFFALSE 20264
// if IsControledBy ( i ) then
20242: LD_VAR 0 2
20246: PPUSH
20247: CALL_OW 312
20251: IFFALSE 20262
// ComUnlink ( i ) ;
20253: LD_VAR 0 2
20257: PPUSH
20258: CALL_OW 136
20262: GO 20239
20264: POP
20265: POP
// end ;
20266: PPOPN 2
20268: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20269: LD_EXP 48
20273: PUSH
20274: LD_EXP 79
20278: AND
20279: IFFALSE 20419
20281: GO 20283
20283: DISABLE
20284: LD_INT 0
20286: PPUSH
20287: PPUSH
// begin ToLua ( displayPowell(); ) ;
20288: LD_STRING displayPowell();
20290: PPUSH
20291: CALL_OW 559
// uc_side := 0 ;
20295: LD_ADDR_OWVAR 20
20299: PUSH
20300: LD_INT 0
20302: ST_TO_ADDR
// uc_nation := 2 ;
20303: LD_ADDR_OWVAR 21
20307: PUSH
20308: LD_INT 2
20310: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20311: LD_ADDR_OWVAR 37
20315: PUSH
20316: LD_INT 14
20318: ST_TO_ADDR
// vc_engine := engine_siberite ;
20319: LD_ADDR_OWVAR 39
20323: PUSH
20324: LD_INT 3
20326: ST_TO_ADDR
// vc_control := control_apeman ;
20327: LD_ADDR_OWVAR 38
20331: PUSH
20332: LD_INT 5
20334: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20335: LD_ADDR_OWVAR 40
20339: PUSH
20340: LD_INT 29
20342: ST_TO_ADDR
// un := CreateVehicle ;
20343: LD_ADDR_VAR 0 2
20347: PUSH
20348: CALL_OW 45
20352: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20353: LD_VAR 0 2
20357: PPUSH
20358: LD_INT 1
20360: PPUSH
20361: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20365: LD_INT 35
20367: PPUSH
20368: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20372: LD_VAR 0 2
20376: PPUSH
20377: LD_INT 22
20379: PUSH
20380: LD_OWVAR 2
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PPUSH
20389: CALL_OW 69
20393: PPUSH
20394: LD_VAR 0 2
20398: PPUSH
20399: CALL_OW 74
20403: PPUSH
20404: CALL_OW 115
// until IsDead ( un ) ;
20408: LD_VAR 0 2
20412: PPUSH
20413: CALL_OW 301
20417: IFFALSE 20365
// end ;
20419: PPOPN 2
20421: END
// every 0 0$1 trigger StreamModeActive and sStu do
20422: LD_EXP 48
20426: PUSH
20427: LD_EXP 87
20431: AND
20432: IFFALSE 20448
20434: GO 20436
20436: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20437: LD_STRING displayStucuk();
20439: PPUSH
20440: CALL_OW 559
// ResetFog ;
20444: CALL_OW 335
// end ;
20448: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20449: LD_EXP 48
20453: PUSH
20454: LD_EXP 80
20458: AND
20459: IFFALSE 20600
20461: GO 20463
20463: DISABLE
20464: LD_INT 0
20466: PPUSH
20467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20468: LD_ADDR_VAR 0 2
20472: PUSH
20473: LD_INT 22
20475: PUSH
20476: LD_OWVAR 2
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 21
20487: PUSH
20488: LD_INT 1
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PPUSH
20499: CALL_OW 69
20503: ST_TO_ADDR
// if not tmp then
20504: LD_VAR 0 2
20508: NOT
20509: IFFALSE 20513
// exit ;
20511: GO 20600
// un := tmp [ rand ( 1 , tmp ) ] ;
20513: LD_ADDR_VAR 0 1
20517: PUSH
20518: LD_VAR 0 2
20522: PUSH
20523: LD_INT 1
20525: PPUSH
20526: LD_VAR 0 2
20530: PPUSH
20531: CALL_OW 12
20535: ARRAY
20536: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20537: LD_VAR 0 1
20541: PPUSH
20542: LD_INT 0
20544: PPUSH
20545: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20549: LD_VAR 0 1
20553: PPUSH
20554: LD_OWVAR 3
20558: PUSH
20559: LD_VAR 0 1
20563: DIFF
20564: PPUSH
20565: LD_VAR 0 1
20569: PPUSH
20570: CALL_OW 74
20574: PPUSH
20575: CALL_OW 115
// wait ( 0 0$20 ) ;
20579: LD_INT 700
20581: PPUSH
20582: CALL_OW 67
// SetSide ( un , your_side ) ;
20586: LD_VAR 0 1
20590: PPUSH
20591: LD_OWVAR 2
20595: PPUSH
20596: CALL_OW 235
// end ;
20600: PPOPN 2
20602: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20603: LD_EXP 48
20607: PUSH
20608: LD_EXP 81
20612: AND
20613: IFFALSE 20719
20615: GO 20617
20617: DISABLE
20618: LD_INT 0
20620: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20621: LD_ADDR_VAR 0 1
20625: PUSH
20626: LD_INT 22
20628: PUSH
20629: LD_OWVAR 2
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 2
20640: PUSH
20641: LD_INT 30
20643: PUSH
20644: LD_INT 0
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 30
20653: PUSH
20654: LD_INT 1
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: LIST
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PPUSH
20670: CALL_OW 69
20674: ST_TO_ADDR
// if not depot then
20675: LD_VAR 0 1
20679: NOT
20680: IFFALSE 20684
// exit ;
20682: GO 20719
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20684: LD_VAR 0 1
20688: PUSH
20689: LD_INT 1
20691: ARRAY
20692: PPUSH
20693: CALL_OW 250
20697: PPUSH
20698: LD_VAR 0 1
20702: PUSH
20703: LD_INT 1
20705: ARRAY
20706: PPUSH
20707: CALL_OW 251
20711: PPUSH
20712: LD_INT 70
20714: PPUSH
20715: CALL_OW 495
// end ;
20719: PPOPN 1
20721: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20722: LD_EXP 48
20726: PUSH
20727: LD_EXP 82
20731: AND
20732: IFFALSE 20943
20734: GO 20736
20736: DISABLE
20737: LD_INT 0
20739: PPUSH
20740: PPUSH
20741: PPUSH
20742: PPUSH
20743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20744: LD_ADDR_VAR 0 5
20748: PUSH
20749: LD_INT 22
20751: PUSH
20752: LD_OWVAR 2
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 21
20763: PUSH
20764: LD_INT 1
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PPUSH
20775: CALL_OW 69
20779: ST_TO_ADDR
// if not tmp then
20780: LD_VAR 0 5
20784: NOT
20785: IFFALSE 20789
// exit ;
20787: GO 20943
// for i in tmp do
20789: LD_ADDR_VAR 0 1
20793: PUSH
20794: LD_VAR 0 5
20798: PUSH
20799: FOR_IN
20800: IFFALSE 20941
// begin d := rand ( 0 , 5 ) ;
20802: LD_ADDR_VAR 0 4
20806: PUSH
20807: LD_INT 0
20809: PPUSH
20810: LD_INT 5
20812: PPUSH
20813: CALL_OW 12
20817: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20818: LD_ADDR_VAR 0 2
20822: PUSH
20823: LD_VAR 0 1
20827: PPUSH
20828: CALL_OW 250
20832: PPUSH
20833: LD_VAR 0 4
20837: PPUSH
20838: LD_INT 3
20840: PPUSH
20841: LD_INT 12
20843: PPUSH
20844: CALL_OW 12
20848: PPUSH
20849: CALL_OW 272
20853: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20854: LD_ADDR_VAR 0 3
20858: PUSH
20859: LD_VAR 0 1
20863: PPUSH
20864: CALL_OW 251
20868: PPUSH
20869: LD_VAR 0 4
20873: PPUSH
20874: LD_INT 3
20876: PPUSH
20877: LD_INT 12
20879: PPUSH
20880: CALL_OW 12
20884: PPUSH
20885: CALL_OW 273
20889: ST_TO_ADDR
// if ValidHex ( x , y ) then
20890: LD_VAR 0 2
20894: PPUSH
20895: LD_VAR 0 3
20899: PPUSH
20900: CALL_OW 488
20904: IFFALSE 20939
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20906: LD_VAR 0 1
20910: PPUSH
20911: LD_VAR 0 2
20915: PPUSH
20916: LD_VAR 0 3
20920: PPUSH
20921: LD_INT 3
20923: PPUSH
20924: LD_INT 6
20926: PPUSH
20927: CALL_OW 12
20931: PPUSH
20932: LD_INT 1
20934: PPUSH
20935: CALL_OW 483
// end ;
20939: GO 20799
20941: POP
20942: POP
// end ;
20943: PPOPN 5
20945: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20946: LD_EXP 48
20950: PUSH
20951: LD_EXP 83
20955: AND
20956: IFFALSE 21050
20958: GO 20960
20960: DISABLE
20961: LD_INT 0
20963: PPUSH
20964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20965: LD_ADDR_VAR 0 2
20969: PUSH
20970: LD_INT 22
20972: PUSH
20973: LD_OWVAR 2
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 32
20984: PUSH
20985: LD_INT 1
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 21
20994: PUSH
20995: LD_INT 2
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: LIST
21006: PPUSH
21007: CALL_OW 69
21011: ST_TO_ADDR
// if not tmp then
21012: LD_VAR 0 2
21016: NOT
21017: IFFALSE 21021
// exit ;
21019: GO 21050
// for i in tmp do
21021: LD_ADDR_VAR 0 1
21025: PUSH
21026: LD_VAR 0 2
21030: PUSH
21031: FOR_IN
21032: IFFALSE 21048
// SetFuel ( i , 0 ) ;
21034: LD_VAR 0 1
21038: PPUSH
21039: LD_INT 0
21041: PPUSH
21042: CALL_OW 240
21046: GO 21031
21048: POP
21049: POP
// end ;
21050: PPOPN 2
21052: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21053: LD_EXP 48
21057: PUSH
21058: LD_EXP 84
21062: AND
21063: IFFALSE 21129
21065: GO 21067
21067: DISABLE
21068: LD_INT 0
21070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21071: LD_ADDR_VAR 0 1
21075: PUSH
21076: LD_INT 22
21078: PUSH
21079: LD_OWVAR 2
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 30
21090: PUSH
21091: LD_INT 29
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PPUSH
21102: CALL_OW 69
21106: ST_TO_ADDR
// if not tmp then
21107: LD_VAR 0 1
21111: NOT
21112: IFFALSE 21116
// exit ;
21114: GO 21129
// DestroyUnit ( tmp [ 1 ] ) ;
21116: LD_VAR 0 1
21120: PUSH
21121: LD_INT 1
21123: ARRAY
21124: PPUSH
21125: CALL_OW 65
// end ;
21129: PPOPN 1
21131: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21132: LD_EXP 48
21136: PUSH
21137: LD_EXP 86
21141: AND
21142: IFFALSE 21271
21144: GO 21146
21146: DISABLE
21147: LD_INT 0
21149: PPUSH
// begin uc_side := 0 ;
21150: LD_ADDR_OWVAR 20
21154: PUSH
21155: LD_INT 0
21157: ST_TO_ADDR
// uc_nation := nation_arabian ;
21158: LD_ADDR_OWVAR 21
21162: PUSH
21163: LD_INT 2
21165: ST_TO_ADDR
// hc_gallery :=  ;
21166: LD_ADDR_OWVAR 33
21170: PUSH
21171: LD_STRING 
21173: ST_TO_ADDR
// hc_name :=  ;
21174: LD_ADDR_OWVAR 26
21178: PUSH
21179: LD_STRING 
21181: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21182: LD_INT 1
21184: PPUSH
21185: LD_INT 11
21187: PPUSH
21188: LD_INT 10
21190: PPUSH
21191: CALL_OW 380
// un := CreateHuman ;
21195: LD_ADDR_VAR 0 1
21199: PUSH
21200: CALL_OW 44
21204: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21205: LD_VAR 0 1
21209: PPUSH
21210: LD_INT 1
21212: PPUSH
21213: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21217: LD_INT 35
21219: PPUSH
21220: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21224: LD_VAR 0 1
21228: PPUSH
21229: LD_INT 22
21231: PUSH
21232: LD_OWVAR 2
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PPUSH
21241: CALL_OW 69
21245: PPUSH
21246: LD_VAR 0 1
21250: PPUSH
21251: CALL_OW 74
21255: PPUSH
21256: CALL_OW 115
// until IsDead ( un ) ;
21260: LD_VAR 0 1
21264: PPUSH
21265: CALL_OW 301
21269: IFFALSE 21217
// end ;
21271: PPOPN 1
21273: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21274: LD_EXP 48
21278: PUSH
21279: LD_EXP 88
21283: AND
21284: IFFALSE 21296
21286: GO 21288
21288: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21289: LD_STRING earthquake(getX(game), 0, 32)
21291: PPUSH
21292: CALL_OW 559
21296: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21297: LD_EXP 48
21301: PUSH
21302: LD_EXP 89
21306: AND
21307: IFFALSE 21398
21309: GO 21311
21311: DISABLE
21312: LD_INT 0
21314: PPUSH
// begin enable ;
21315: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21316: LD_ADDR_VAR 0 1
21320: PUSH
21321: LD_INT 22
21323: PUSH
21324: LD_OWVAR 2
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 21
21335: PUSH
21336: LD_INT 2
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 33
21345: PUSH
21346: LD_INT 3
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: LIST
21357: PPUSH
21358: CALL_OW 69
21362: ST_TO_ADDR
// if not tmp then
21363: LD_VAR 0 1
21367: NOT
21368: IFFALSE 21372
// exit ;
21370: GO 21398
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21372: LD_VAR 0 1
21376: PUSH
21377: LD_INT 1
21379: PPUSH
21380: LD_VAR 0 1
21384: PPUSH
21385: CALL_OW 12
21389: ARRAY
21390: PPUSH
21391: LD_INT 1
21393: PPUSH
21394: CALL_OW 234
// end ;
21398: PPOPN 1
21400: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21401: LD_EXP 48
21405: PUSH
21406: LD_EXP 90
21410: AND
21411: IFFALSE 21552
21413: GO 21415
21415: DISABLE
21416: LD_INT 0
21418: PPUSH
21419: PPUSH
21420: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21421: LD_ADDR_VAR 0 3
21425: PUSH
21426: LD_INT 22
21428: PUSH
21429: LD_OWVAR 2
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 25
21440: PUSH
21441: LD_INT 1
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PPUSH
21452: CALL_OW 69
21456: ST_TO_ADDR
// if not tmp then
21457: LD_VAR 0 3
21461: NOT
21462: IFFALSE 21466
// exit ;
21464: GO 21552
// un := tmp [ rand ( 1 , tmp ) ] ;
21466: LD_ADDR_VAR 0 2
21470: PUSH
21471: LD_VAR 0 3
21475: PUSH
21476: LD_INT 1
21478: PPUSH
21479: LD_VAR 0 3
21483: PPUSH
21484: CALL_OW 12
21488: ARRAY
21489: ST_TO_ADDR
// if Crawls ( un ) then
21490: LD_VAR 0 2
21494: PPUSH
21495: CALL_OW 318
21499: IFFALSE 21510
// ComWalk ( un ) ;
21501: LD_VAR 0 2
21505: PPUSH
21506: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21510: LD_VAR 0 2
21514: PPUSH
21515: LD_INT 9
21517: PPUSH
21518: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21522: LD_INT 28
21524: PPUSH
21525: LD_OWVAR 2
21529: PPUSH
21530: LD_INT 2
21532: PPUSH
21533: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21537: LD_INT 29
21539: PPUSH
21540: LD_OWVAR 2
21544: PPUSH
21545: LD_INT 2
21547: PPUSH
21548: CALL_OW 322
// end ;
21552: PPOPN 3
21554: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21555: LD_EXP 48
21559: PUSH
21560: LD_EXP 91
21564: AND
21565: IFFALSE 21676
21567: GO 21569
21569: DISABLE
21570: LD_INT 0
21572: PPUSH
21573: PPUSH
21574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21575: LD_ADDR_VAR 0 3
21579: PUSH
21580: LD_INT 22
21582: PUSH
21583: LD_OWVAR 2
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 25
21594: PUSH
21595: LD_INT 1
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PPUSH
21606: CALL_OW 69
21610: ST_TO_ADDR
// if not tmp then
21611: LD_VAR 0 3
21615: NOT
21616: IFFALSE 21620
// exit ;
21618: GO 21676
// un := tmp [ rand ( 1 , tmp ) ] ;
21620: LD_ADDR_VAR 0 2
21624: PUSH
21625: LD_VAR 0 3
21629: PUSH
21630: LD_INT 1
21632: PPUSH
21633: LD_VAR 0 3
21637: PPUSH
21638: CALL_OW 12
21642: ARRAY
21643: ST_TO_ADDR
// if Crawls ( un ) then
21644: LD_VAR 0 2
21648: PPUSH
21649: CALL_OW 318
21653: IFFALSE 21664
// ComWalk ( un ) ;
21655: LD_VAR 0 2
21659: PPUSH
21660: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21664: LD_VAR 0 2
21668: PPUSH
21669: LD_INT 8
21671: PPUSH
21672: CALL_OW 336
// end ;
21676: PPOPN 3
21678: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21679: LD_EXP 48
21683: PUSH
21684: LD_EXP 92
21688: AND
21689: IFFALSE 21833
21691: GO 21693
21693: DISABLE
21694: LD_INT 0
21696: PPUSH
21697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21698: LD_ADDR_VAR 0 2
21702: PUSH
21703: LD_INT 22
21705: PUSH
21706: LD_OWVAR 2
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 21
21717: PUSH
21718: LD_INT 2
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 2
21727: PUSH
21728: LD_INT 34
21730: PUSH
21731: LD_INT 12
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 34
21740: PUSH
21741: LD_INT 51
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: PUSH
21748: LD_INT 34
21750: PUSH
21751: LD_INT 32
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: LIST
21768: PPUSH
21769: CALL_OW 69
21773: ST_TO_ADDR
// if not tmp then
21774: LD_VAR 0 2
21778: NOT
21779: IFFALSE 21783
// exit ;
21781: GO 21833
// for i in tmp do
21783: LD_ADDR_VAR 0 1
21787: PUSH
21788: LD_VAR 0 2
21792: PUSH
21793: FOR_IN
21794: IFFALSE 21831
// if GetCargo ( i , mat_artifact ) = 0 then
21796: LD_VAR 0 1
21800: PPUSH
21801: LD_INT 4
21803: PPUSH
21804: CALL_OW 289
21808: PUSH
21809: LD_INT 0
21811: EQUAL
21812: IFFALSE 21829
// SetCargo ( i , mat_siberit , 100 ) ;
21814: LD_VAR 0 1
21818: PPUSH
21819: LD_INT 3
21821: PPUSH
21822: LD_INT 100
21824: PPUSH
21825: CALL_OW 290
21829: GO 21793
21831: POP
21832: POP
// end ;
21833: PPOPN 2
21835: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21836: LD_EXP 48
21840: PUSH
21841: LD_EXP 93
21845: AND
21846: IFFALSE 22029
21848: GO 21850
21850: DISABLE
21851: LD_INT 0
21853: PPUSH
21854: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21855: LD_ADDR_VAR 0 2
21859: PUSH
21860: LD_INT 22
21862: PUSH
21863: LD_OWVAR 2
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PPUSH
21872: CALL_OW 69
21876: ST_TO_ADDR
// if not tmp then
21877: LD_VAR 0 2
21881: NOT
21882: IFFALSE 21886
// exit ;
21884: GO 22029
// for i := 1 to 2 do
21886: LD_ADDR_VAR 0 1
21890: PUSH
21891: DOUBLE
21892: LD_INT 1
21894: DEC
21895: ST_TO_ADDR
21896: LD_INT 2
21898: PUSH
21899: FOR_TO
21900: IFFALSE 22027
// begin uc_side := your_side ;
21902: LD_ADDR_OWVAR 20
21906: PUSH
21907: LD_OWVAR 2
21911: ST_TO_ADDR
// uc_nation := nation_american ;
21912: LD_ADDR_OWVAR 21
21916: PUSH
21917: LD_INT 1
21919: ST_TO_ADDR
// vc_chassis := us_morphling ;
21920: LD_ADDR_OWVAR 37
21924: PUSH
21925: LD_INT 5
21927: ST_TO_ADDR
// vc_engine := engine_siberite ;
21928: LD_ADDR_OWVAR 39
21932: PUSH
21933: LD_INT 3
21935: ST_TO_ADDR
// vc_control := control_computer ;
21936: LD_ADDR_OWVAR 38
21940: PUSH
21941: LD_INT 3
21943: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21944: LD_ADDR_OWVAR 40
21948: PUSH
21949: LD_INT 10
21951: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21952: LD_VAR 0 2
21956: PUSH
21957: LD_INT 1
21959: ARRAY
21960: PPUSH
21961: CALL_OW 310
21965: NOT
21966: IFFALSE 22013
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21968: CALL_OW 45
21972: PPUSH
21973: LD_VAR 0 2
21977: PUSH
21978: LD_INT 1
21980: ARRAY
21981: PPUSH
21982: CALL_OW 250
21986: PPUSH
21987: LD_VAR 0 2
21991: PUSH
21992: LD_INT 1
21994: ARRAY
21995: PPUSH
21996: CALL_OW 251
22000: PPUSH
22001: LD_INT 12
22003: PPUSH
22004: LD_INT 1
22006: PPUSH
22007: CALL_OW 50
22011: GO 22025
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22013: CALL_OW 45
22017: PPUSH
22018: LD_INT 1
22020: PPUSH
22021: CALL_OW 51
// end ;
22025: GO 21899
22027: POP
22028: POP
// end ;
22029: PPOPN 2
22031: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22032: LD_EXP 48
22036: PUSH
22037: LD_EXP 94
22041: AND
22042: IFFALSE 22264
22044: GO 22046
22046: DISABLE
22047: LD_INT 0
22049: PPUSH
22050: PPUSH
22051: PPUSH
22052: PPUSH
22053: PPUSH
22054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22055: LD_ADDR_VAR 0 6
22059: PUSH
22060: LD_INT 22
22062: PUSH
22063: LD_OWVAR 2
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 21
22074: PUSH
22075: LD_INT 1
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 3
22084: PUSH
22085: LD_INT 23
22087: PUSH
22088: LD_INT 0
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: LIST
22103: PPUSH
22104: CALL_OW 69
22108: ST_TO_ADDR
// if not tmp then
22109: LD_VAR 0 6
22113: NOT
22114: IFFALSE 22118
// exit ;
22116: GO 22264
// s1 := rand ( 1 , 4 ) ;
22118: LD_ADDR_VAR 0 2
22122: PUSH
22123: LD_INT 1
22125: PPUSH
22126: LD_INT 4
22128: PPUSH
22129: CALL_OW 12
22133: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22134: LD_ADDR_VAR 0 4
22138: PUSH
22139: LD_VAR 0 6
22143: PUSH
22144: LD_INT 1
22146: ARRAY
22147: PPUSH
22148: LD_VAR 0 2
22152: PPUSH
22153: CALL_OW 259
22157: ST_TO_ADDR
// if s1 = 1 then
22158: LD_VAR 0 2
22162: PUSH
22163: LD_INT 1
22165: EQUAL
22166: IFFALSE 22186
// s2 := rand ( 2 , 4 ) else
22168: LD_ADDR_VAR 0 3
22172: PUSH
22173: LD_INT 2
22175: PPUSH
22176: LD_INT 4
22178: PPUSH
22179: CALL_OW 12
22183: ST_TO_ADDR
22184: GO 22194
// s2 := 1 ;
22186: LD_ADDR_VAR 0 3
22190: PUSH
22191: LD_INT 1
22193: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22194: LD_ADDR_VAR 0 5
22198: PUSH
22199: LD_VAR 0 6
22203: PUSH
22204: LD_INT 1
22206: ARRAY
22207: PPUSH
22208: LD_VAR 0 3
22212: PPUSH
22213: CALL_OW 259
22217: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22218: LD_VAR 0 6
22222: PUSH
22223: LD_INT 1
22225: ARRAY
22226: PPUSH
22227: LD_VAR 0 2
22231: PPUSH
22232: LD_VAR 0 5
22236: PPUSH
22237: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22241: LD_VAR 0 6
22245: PUSH
22246: LD_INT 1
22248: ARRAY
22249: PPUSH
22250: LD_VAR 0 3
22254: PPUSH
22255: LD_VAR 0 4
22259: PPUSH
22260: CALL_OW 237
// end ;
22264: PPOPN 6
22266: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22267: LD_EXP 48
22271: PUSH
22272: LD_EXP 95
22276: AND
22277: IFFALSE 22356
22279: GO 22281
22281: DISABLE
22282: LD_INT 0
22284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22285: LD_ADDR_VAR 0 1
22289: PUSH
22290: LD_INT 22
22292: PUSH
22293: LD_OWVAR 2
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 30
22304: PUSH
22305: LD_INT 3
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PPUSH
22316: CALL_OW 69
22320: ST_TO_ADDR
// if not tmp then
22321: LD_VAR 0 1
22325: NOT
22326: IFFALSE 22330
// exit ;
22328: GO 22356
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22330: LD_VAR 0 1
22334: PUSH
22335: LD_INT 1
22337: PPUSH
22338: LD_VAR 0 1
22342: PPUSH
22343: CALL_OW 12
22347: ARRAY
22348: PPUSH
22349: LD_INT 1
22351: PPUSH
22352: CALL_OW 234
// end ;
22356: PPOPN 1
22358: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22359: LD_EXP 48
22363: PUSH
22364: LD_EXP 96
22368: AND
22369: IFFALSE 22481
22371: GO 22373
22373: DISABLE
22374: LD_INT 0
22376: PPUSH
22377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22378: LD_ADDR_VAR 0 2
22382: PUSH
22383: LD_INT 22
22385: PUSH
22386: LD_OWVAR 2
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 2
22397: PUSH
22398: LD_INT 30
22400: PUSH
22401: LD_INT 27
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 30
22410: PUSH
22411: LD_INT 26
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 30
22420: PUSH
22421: LD_INT 28
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PPUSH
22438: CALL_OW 69
22442: ST_TO_ADDR
// if not tmp then
22443: LD_VAR 0 2
22447: NOT
22448: IFFALSE 22452
// exit ;
22450: GO 22481
// for i in tmp do
22452: LD_ADDR_VAR 0 1
22456: PUSH
22457: LD_VAR 0 2
22461: PUSH
22462: FOR_IN
22463: IFFALSE 22479
// SetLives ( i , 1 ) ;
22465: LD_VAR 0 1
22469: PPUSH
22470: LD_INT 1
22472: PPUSH
22473: CALL_OW 234
22477: GO 22462
22479: POP
22480: POP
// end ;
22481: PPOPN 2
22483: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22484: LD_EXP 48
22488: PUSH
22489: LD_EXP 97
22493: AND
22494: IFFALSE 22781
22496: GO 22498
22498: DISABLE
22499: LD_INT 0
22501: PPUSH
22502: PPUSH
22503: PPUSH
// begin i := rand ( 1 , 7 ) ;
22504: LD_ADDR_VAR 0 1
22508: PUSH
22509: LD_INT 1
22511: PPUSH
22512: LD_INT 7
22514: PPUSH
22515: CALL_OW 12
22519: ST_TO_ADDR
// case i of 1 :
22520: LD_VAR 0 1
22524: PUSH
22525: LD_INT 1
22527: DOUBLE
22528: EQUAL
22529: IFTRUE 22533
22531: GO 22543
22533: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22534: LD_STRING earthquake(getX(game), 0, 32)
22536: PPUSH
22537: CALL_OW 559
22541: GO 22781
22543: LD_INT 2
22545: DOUBLE
22546: EQUAL
22547: IFTRUE 22551
22549: GO 22565
22551: POP
// begin ToLua ( displayStucuk(); ) ;
22552: LD_STRING displayStucuk();
22554: PPUSH
22555: CALL_OW 559
// ResetFog ;
22559: CALL_OW 335
// end ; 3 :
22563: GO 22781
22565: LD_INT 3
22567: DOUBLE
22568: EQUAL
22569: IFTRUE 22573
22571: GO 22677
22573: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22574: LD_ADDR_VAR 0 2
22578: PUSH
22579: LD_INT 22
22581: PUSH
22582: LD_OWVAR 2
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 25
22593: PUSH
22594: LD_INT 1
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PPUSH
22605: CALL_OW 69
22609: ST_TO_ADDR
// if not tmp then
22610: LD_VAR 0 2
22614: NOT
22615: IFFALSE 22619
// exit ;
22617: GO 22781
// un := tmp [ rand ( 1 , tmp ) ] ;
22619: LD_ADDR_VAR 0 3
22623: PUSH
22624: LD_VAR 0 2
22628: PUSH
22629: LD_INT 1
22631: PPUSH
22632: LD_VAR 0 2
22636: PPUSH
22637: CALL_OW 12
22641: ARRAY
22642: ST_TO_ADDR
// if Crawls ( un ) then
22643: LD_VAR 0 3
22647: PPUSH
22648: CALL_OW 318
22652: IFFALSE 22663
// ComWalk ( un ) ;
22654: LD_VAR 0 3
22658: PPUSH
22659: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22663: LD_VAR 0 3
22667: PPUSH
22668: LD_INT 8
22670: PPUSH
22671: CALL_OW 336
// end ; 4 :
22675: GO 22781
22677: LD_INT 4
22679: DOUBLE
22680: EQUAL
22681: IFTRUE 22685
22683: GO 22759
22685: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22686: LD_ADDR_VAR 0 2
22690: PUSH
22691: LD_INT 22
22693: PUSH
22694: LD_OWVAR 2
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 30
22705: PUSH
22706: LD_INT 29
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PPUSH
22717: CALL_OW 69
22721: ST_TO_ADDR
// if not tmp then
22722: LD_VAR 0 2
22726: NOT
22727: IFFALSE 22731
// exit ;
22729: GO 22781
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22731: LD_VAR 0 2
22735: PUSH
22736: LD_INT 1
22738: ARRAY
22739: PPUSH
22740: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22744: LD_VAR 0 2
22748: PUSH
22749: LD_INT 1
22751: ARRAY
22752: PPUSH
22753: CALL_OW 65
// end ; 5 .. 7 :
22757: GO 22781
22759: LD_INT 5
22761: DOUBLE
22762: GREATEREQUAL
22763: IFFALSE 22771
22765: LD_INT 7
22767: DOUBLE
22768: LESSEQUAL
22769: IFTRUE 22773
22771: GO 22780
22773: POP
// StreamSibBomb ; end ;
22774: CALL 19018 0 0
22778: GO 22781
22780: POP
// end ;
22781: PPOPN 3
22783: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22784: LD_EXP 48
22788: PUSH
22789: LD_EXP 98
22793: AND
22794: IFFALSE 22950
22796: GO 22798
22798: DISABLE
22799: LD_INT 0
22801: PPUSH
22802: PPUSH
22803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22804: LD_ADDR_VAR 0 2
22808: PUSH
22809: LD_INT 81
22811: PUSH
22812: LD_OWVAR 2
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 2
22823: PUSH
22824: LD_INT 21
22826: PUSH
22827: LD_INT 1
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 21
22836: PUSH
22837: LD_INT 2
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: LIST
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PPUSH
22853: CALL_OW 69
22857: ST_TO_ADDR
// if not tmp then
22858: LD_VAR 0 2
22862: NOT
22863: IFFALSE 22867
// exit ;
22865: GO 22950
// p := 0 ;
22867: LD_ADDR_VAR 0 3
22871: PUSH
22872: LD_INT 0
22874: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22875: LD_INT 35
22877: PPUSH
22878: CALL_OW 67
// p := p + 1 ;
22882: LD_ADDR_VAR 0 3
22886: PUSH
22887: LD_VAR 0 3
22891: PUSH
22892: LD_INT 1
22894: PLUS
22895: ST_TO_ADDR
// for i in tmp do
22896: LD_ADDR_VAR 0 1
22900: PUSH
22901: LD_VAR 0 2
22905: PUSH
22906: FOR_IN
22907: IFFALSE 22938
// if GetLives ( i ) < 1000 then
22909: LD_VAR 0 1
22913: PPUSH
22914: CALL_OW 256
22918: PUSH
22919: LD_INT 1000
22921: LESS
22922: IFFALSE 22936
// SetLives ( i , 1000 ) ;
22924: LD_VAR 0 1
22928: PPUSH
22929: LD_INT 1000
22931: PPUSH
22932: CALL_OW 234
22936: GO 22906
22938: POP
22939: POP
// until p > 20 ;
22940: LD_VAR 0 3
22944: PUSH
22945: LD_INT 20
22947: GREATER
22948: IFFALSE 22875
// end ;
22950: PPOPN 3
22952: END
// every 0 0$1 trigger StreamModeActive and sTime do
22953: LD_EXP 48
22957: PUSH
22958: LD_EXP 99
22962: AND
22963: IFFALSE 22998
22965: GO 22967
22967: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22968: LD_INT 28
22970: PPUSH
22971: LD_OWVAR 2
22975: PPUSH
22976: LD_INT 2
22978: PPUSH
22979: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22983: LD_INT 30
22985: PPUSH
22986: LD_OWVAR 2
22990: PPUSH
22991: LD_INT 2
22993: PPUSH
22994: CALL_OW 322
// end ;
22998: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22999: LD_EXP 48
23003: PUSH
23004: LD_EXP 100
23008: AND
23009: IFFALSE 23130
23011: GO 23013
23013: DISABLE
23014: LD_INT 0
23016: PPUSH
23017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23018: LD_ADDR_VAR 0 2
23022: PUSH
23023: LD_INT 22
23025: PUSH
23026: LD_OWVAR 2
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 21
23037: PUSH
23038: LD_INT 1
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 3
23047: PUSH
23048: LD_INT 23
23050: PUSH
23051: LD_INT 0
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: LIST
23066: PPUSH
23067: CALL_OW 69
23071: ST_TO_ADDR
// if not tmp then
23072: LD_VAR 0 2
23076: NOT
23077: IFFALSE 23081
// exit ;
23079: GO 23130
// for i in tmp do
23081: LD_ADDR_VAR 0 1
23085: PUSH
23086: LD_VAR 0 2
23090: PUSH
23091: FOR_IN
23092: IFFALSE 23128
// begin if Crawls ( i ) then
23094: LD_VAR 0 1
23098: PPUSH
23099: CALL_OW 318
23103: IFFALSE 23114
// ComWalk ( i ) ;
23105: LD_VAR 0 1
23109: PPUSH
23110: CALL_OW 138
// SetClass ( i , 2 ) ;
23114: LD_VAR 0 1
23118: PPUSH
23119: LD_INT 2
23121: PPUSH
23122: CALL_OW 336
// end ;
23126: GO 23091
23128: POP
23129: POP
// end ;
23130: PPOPN 2
23132: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23133: LD_EXP 48
23137: PUSH
23138: LD_EXP 101
23142: AND
23143: IFFALSE 23431
23145: GO 23147
23147: DISABLE
23148: LD_INT 0
23150: PPUSH
23151: PPUSH
23152: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23153: LD_OWVAR 2
23157: PPUSH
23158: LD_INT 9
23160: PPUSH
23161: LD_INT 1
23163: PPUSH
23164: LD_INT 1
23166: PPUSH
23167: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23171: LD_INT 9
23173: PPUSH
23174: LD_OWVAR 2
23178: PPUSH
23179: CALL_OW 343
// uc_side := 9 ;
23183: LD_ADDR_OWVAR 20
23187: PUSH
23188: LD_INT 9
23190: ST_TO_ADDR
// uc_nation := 2 ;
23191: LD_ADDR_OWVAR 21
23195: PUSH
23196: LD_INT 2
23198: ST_TO_ADDR
// hc_name := Dark Warrior ;
23199: LD_ADDR_OWVAR 26
23203: PUSH
23204: LD_STRING Dark Warrior
23206: ST_TO_ADDR
// hc_gallery :=  ;
23207: LD_ADDR_OWVAR 33
23211: PUSH
23212: LD_STRING 
23214: ST_TO_ADDR
// hc_noskilllimit := true ;
23215: LD_ADDR_OWVAR 76
23219: PUSH
23220: LD_INT 1
23222: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23223: LD_ADDR_OWVAR 31
23227: PUSH
23228: LD_INT 30
23230: PUSH
23231: LD_INT 30
23233: PUSH
23234: LD_INT 30
23236: PUSH
23237: LD_INT 30
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: ST_TO_ADDR
// un := CreateHuman ;
23246: LD_ADDR_VAR 0 3
23250: PUSH
23251: CALL_OW 44
23255: ST_TO_ADDR
// hc_noskilllimit := false ;
23256: LD_ADDR_OWVAR 76
23260: PUSH
23261: LD_INT 0
23263: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23264: LD_VAR 0 3
23268: PPUSH
23269: LD_INT 1
23271: PPUSH
23272: CALL_OW 51
// ToLua ( playRanger() ) ;
23276: LD_STRING playRanger()
23278: PPUSH
23279: CALL_OW 559
// p := 0 ;
23283: LD_ADDR_VAR 0 2
23287: PUSH
23288: LD_INT 0
23290: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23291: LD_INT 35
23293: PPUSH
23294: CALL_OW 67
// p := p + 1 ;
23298: LD_ADDR_VAR 0 2
23302: PUSH
23303: LD_VAR 0 2
23307: PUSH
23308: LD_INT 1
23310: PLUS
23311: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23312: LD_VAR 0 3
23316: PPUSH
23317: CALL_OW 256
23321: PUSH
23322: LD_INT 1000
23324: LESS
23325: IFFALSE 23339
// SetLives ( un , 1000 ) ;
23327: LD_VAR 0 3
23331: PPUSH
23332: LD_INT 1000
23334: PPUSH
23335: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23339: LD_VAR 0 3
23343: PPUSH
23344: LD_INT 81
23346: PUSH
23347: LD_OWVAR 2
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 91
23358: PUSH
23359: LD_VAR 0 3
23363: PUSH
23364: LD_INT 30
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: LIST
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PPUSH
23376: CALL_OW 69
23380: PPUSH
23381: LD_VAR 0 3
23385: PPUSH
23386: CALL_OW 74
23390: PPUSH
23391: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23395: LD_VAR 0 2
23399: PUSH
23400: LD_INT 80
23402: GREATER
23403: PUSH
23404: LD_VAR 0 3
23408: PPUSH
23409: CALL_OW 301
23413: OR
23414: IFFALSE 23291
// if un then
23416: LD_VAR 0 3
23420: IFFALSE 23431
// RemoveUnit ( un ) ;
23422: LD_VAR 0 3
23426: PPUSH
23427: CALL_OW 64
// end ;
23431: PPOPN 3
23433: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23434: LD_EXP 102
23438: IFFALSE 23554
23440: GO 23442
23442: DISABLE
23443: LD_INT 0
23445: PPUSH
23446: PPUSH
23447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23448: LD_ADDR_VAR 0 2
23452: PUSH
23453: LD_INT 81
23455: PUSH
23456: LD_OWVAR 2
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 21
23467: PUSH
23468: LD_INT 1
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PPUSH
23479: CALL_OW 69
23483: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23484: LD_STRING playComputer()
23486: PPUSH
23487: CALL_OW 559
// if not tmp then
23491: LD_VAR 0 2
23495: NOT
23496: IFFALSE 23500
// exit ;
23498: GO 23554
// for i in tmp do
23500: LD_ADDR_VAR 0 1
23504: PUSH
23505: LD_VAR 0 2
23509: PUSH
23510: FOR_IN
23511: IFFALSE 23552
// for j := 1 to 4 do
23513: LD_ADDR_VAR 0 3
23517: PUSH
23518: DOUBLE
23519: LD_INT 1
23521: DEC
23522: ST_TO_ADDR
23523: LD_INT 4
23525: PUSH
23526: FOR_TO
23527: IFFALSE 23548
// SetSkill ( i , j , 10 ) ;
23529: LD_VAR 0 1
23533: PPUSH
23534: LD_VAR 0 3
23538: PPUSH
23539: LD_INT 10
23541: PPUSH
23542: CALL_OW 237
23546: GO 23526
23548: POP
23549: POP
23550: GO 23510
23552: POP
23553: POP
// end ;
23554: PPOPN 3
23556: END
// every 0 0$1 trigger s30 do var i , tmp ;
23557: LD_EXP 103
23561: IFFALSE 23630
23563: GO 23565
23565: DISABLE
23566: LD_INT 0
23568: PPUSH
23569: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23570: LD_ADDR_VAR 0 2
23574: PUSH
23575: LD_INT 22
23577: PUSH
23578: LD_OWVAR 2
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PPUSH
23587: CALL_OW 69
23591: ST_TO_ADDR
// if not tmp then
23592: LD_VAR 0 2
23596: NOT
23597: IFFALSE 23601
// exit ;
23599: GO 23630
// for i in tmp do
23601: LD_ADDR_VAR 0 1
23605: PUSH
23606: LD_VAR 0 2
23610: PUSH
23611: FOR_IN
23612: IFFALSE 23628
// SetLives ( i , 300 ) ;
23614: LD_VAR 0 1
23618: PPUSH
23619: LD_INT 300
23621: PPUSH
23622: CALL_OW 234
23626: GO 23611
23628: POP
23629: POP
// end ;
23630: PPOPN 2
23632: END
// every 0 0$1 trigger s60 do var i , tmp ;
23633: LD_EXP 104
23637: IFFALSE 23706
23639: GO 23641
23641: DISABLE
23642: LD_INT 0
23644: PPUSH
23645: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23646: LD_ADDR_VAR 0 2
23650: PUSH
23651: LD_INT 22
23653: PUSH
23654: LD_OWVAR 2
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PPUSH
23663: CALL_OW 69
23667: ST_TO_ADDR
// if not tmp then
23668: LD_VAR 0 2
23672: NOT
23673: IFFALSE 23677
// exit ;
23675: GO 23706
// for i in tmp do
23677: LD_ADDR_VAR 0 1
23681: PUSH
23682: LD_VAR 0 2
23686: PUSH
23687: FOR_IN
23688: IFFALSE 23704
// SetLives ( i , 600 ) ;
23690: LD_VAR 0 1
23694: PPUSH
23695: LD_INT 600
23697: PPUSH
23698: CALL_OW 234
23702: GO 23687
23704: POP
23705: POP
// end ;
23706: PPOPN 2
23708: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23709: LD_INT 0
23711: PPUSH
// case cmd of 301 :
23712: LD_VAR 0 1
23716: PUSH
23717: LD_INT 301
23719: DOUBLE
23720: EQUAL
23721: IFTRUE 23725
23723: GO 23757
23725: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23726: LD_VAR 0 6
23730: PPUSH
23731: LD_VAR 0 7
23735: PPUSH
23736: LD_VAR 0 8
23740: PPUSH
23741: LD_VAR 0 4
23745: PPUSH
23746: LD_VAR 0 5
23750: PPUSH
23751: CALL 24966 0 5
23755: GO 23878
23757: LD_INT 302
23759: DOUBLE
23760: EQUAL
23761: IFTRUE 23765
23763: GO 23802
23765: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23766: LD_VAR 0 6
23770: PPUSH
23771: LD_VAR 0 7
23775: PPUSH
23776: LD_VAR 0 8
23780: PPUSH
23781: LD_VAR 0 9
23785: PPUSH
23786: LD_VAR 0 4
23790: PPUSH
23791: LD_VAR 0 5
23795: PPUSH
23796: CALL 25057 0 6
23800: GO 23878
23802: LD_INT 303
23804: DOUBLE
23805: EQUAL
23806: IFTRUE 23810
23808: GO 23847
23810: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23811: LD_VAR 0 6
23815: PPUSH
23816: LD_VAR 0 7
23820: PPUSH
23821: LD_VAR 0 8
23825: PPUSH
23826: LD_VAR 0 9
23830: PPUSH
23831: LD_VAR 0 4
23835: PPUSH
23836: LD_VAR 0 5
23840: PPUSH
23841: CALL 23883 0 6
23845: GO 23878
23847: LD_INT 304
23849: DOUBLE
23850: EQUAL
23851: IFTRUE 23855
23853: GO 23877
23855: POP
// hHackTeleport ( unit , x , y ) ; end ;
23856: LD_VAR 0 2
23860: PPUSH
23861: LD_VAR 0 4
23865: PPUSH
23866: LD_VAR 0 5
23870: PPUSH
23871: CALL 25650 0 3
23875: GO 23878
23877: POP
// end ;
23878: LD_VAR 0 12
23882: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23883: LD_INT 0
23885: PPUSH
23886: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23887: LD_VAR 0 1
23891: PUSH
23892: LD_INT 1
23894: LESS
23895: PUSH
23896: LD_VAR 0 1
23900: PUSH
23901: LD_INT 3
23903: GREATER
23904: OR
23905: PUSH
23906: LD_VAR 0 5
23910: PPUSH
23911: LD_VAR 0 6
23915: PPUSH
23916: CALL_OW 428
23920: OR
23921: IFFALSE 23925
// exit ;
23923: GO 24653
// uc_side := your_side ;
23925: LD_ADDR_OWVAR 20
23929: PUSH
23930: LD_OWVAR 2
23934: ST_TO_ADDR
// uc_nation := nation ;
23935: LD_ADDR_OWVAR 21
23939: PUSH
23940: LD_VAR 0 1
23944: ST_TO_ADDR
// bc_level = 1 ;
23945: LD_ADDR_OWVAR 43
23949: PUSH
23950: LD_INT 1
23952: ST_TO_ADDR
// case btype of 1 :
23953: LD_VAR 0 2
23957: PUSH
23958: LD_INT 1
23960: DOUBLE
23961: EQUAL
23962: IFTRUE 23966
23964: GO 23977
23966: POP
// bc_type := b_depot ; 2 :
23967: LD_ADDR_OWVAR 42
23971: PUSH
23972: LD_INT 0
23974: ST_TO_ADDR
23975: GO 24597
23977: LD_INT 2
23979: DOUBLE
23980: EQUAL
23981: IFTRUE 23985
23983: GO 23996
23985: POP
// bc_type := b_warehouse ; 3 :
23986: LD_ADDR_OWVAR 42
23990: PUSH
23991: LD_INT 1
23993: ST_TO_ADDR
23994: GO 24597
23996: LD_INT 3
23998: DOUBLE
23999: EQUAL
24000: IFTRUE 24004
24002: GO 24015
24004: POP
// bc_type := b_lab ; 4 .. 9 :
24005: LD_ADDR_OWVAR 42
24009: PUSH
24010: LD_INT 6
24012: ST_TO_ADDR
24013: GO 24597
24015: LD_INT 4
24017: DOUBLE
24018: GREATEREQUAL
24019: IFFALSE 24027
24021: LD_INT 9
24023: DOUBLE
24024: LESSEQUAL
24025: IFTRUE 24029
24027: GO 24089
24029: POP
// begin bc_type := b_lab_half ;
24030: LD_ADDR_OWVAR 42
24034: PUSH
24035: LD_INT 7
24037: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24038: LD_ADDR_OWVAR 44
24042: PUSH
24043: LD_INT 10
24045: PUSH
24046: LD_INT 11
24048: PUSH
24049: LD_INT 12
24051: PUSH
24052: LD_INT 15
24054: PUSH
24055: LD_INT 14
24057: PUSH
24058: LD_INT 13
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: PUSH
24069: LD_VAR 0 2
24073: PUSH
24074: LD_INT 3
24076: MINUS
24077: ARRAY
24078: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
24079: LD_ADDR_OWVAR 45
24083: PUSH
24084: LD_INT 9
24086: ST_TO_ADDR
// end ; 10 .. 13 :
24087: GO 24597
24089: LD_INT 10
24091: DOUBLE
24092: GREATEREQUAL
24093: IFFALSE 24101
24095: LD_INT 13
24097: DOUBLE
24098: LESSEQUAL
24099: IFTRUE 24103
24101: GO 24180
24103: POP
// begin bc_type := b_lab_full ;
24104: LD_ADDR_OWVAR 42
24108: PUSH
24109: LD_INT 8
24111: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24112: LD_ADDR_OWVAR 44
24116: PUSH
24117: LD_INT 10
24119: PUSH
24120: LD_INT 12
24122: PUSH
24123: LD_INT 14
24125: PUSH
24126: LD_INT 13
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: PUSH
24135: LD_VAR 0 2
24139: PUSH
24140: LD_INT 9
24142: MINUS
24143: ARRAY
24144: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24145: LD_ADDR_OWVAR 45
24149: PUSH
24150: LD_INT 11
24152: PUSH
24153: LD_INT 15
24155: PUSH
24156: LD_INT 12
24158: PUSH
24159: LD_INT 15
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: PUSH
24168: LD_VAR 0 2
24172: PUSH
24173: LD_INT 9
24175: MINUS
24176: ARRAY
24177: ST_TO_ADDR
// end ; 14 :
24178: GO 24597
24180: LD_INT 14
24182: DOUBLE
24183: EQUAL
24184: IFTRUE 24188
24186: GO 24199
24188: POP
// bc_type := b_workshop ; 15 :
24189: LD_ADDR_OWVAR 42
24193: PUSH
24194: LD_INT 2
24196: ST_TO_ADDR
24197: GO 24597
24199: LD_INT 15
24201: DOUBLE
24202: EQUAL
24203: IFTRUE 24207
24205: GO 24218
24207: POP
// bc_type := b_factory ; 16 :
24208: LD_ADDR_OWVAR 42
24212: PUSH
24213: LD_INT 3
24215: ST_TO_ADDR
24216: GO 24597
24218: LD_INT 16
24220: DOUBLE
24221: EQUAL
24222: IFTRUE 24226
24224: GO 24237
24226: POP
// bc_type := b_ext_gun ; 17 :
24227: LD_ADDR_OWVAR 42
24231: PUSH
24232: LD_INT 17
24234: ST_TO_ADDR
24235: GO 24597
24237: LD_INT 17
24239: DOUBLE
24240: EQUAL
24241: IFTRUE 24245
24243: GO 24273
24245: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24246: LD_ADDR_OWVAR 42
24250: PUSH
24251: LD_INT 19
24253: PUSH
24254: LD_INT 23
24256: PUSH
24257: LD_INT 19
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: LIST
24264: PUSH
24265: LD_VAR 0 1
24269: ARRAY
24270: ST_TO_ADDR
24271: GO 24597
24273: LD_INT 18
24275: DOUBLE
24276: EQUAL
24277: IFTRUE 24281
24279: GO 24292
24281: POP
// bc_type := b_ext_radar ; 19 :
24282: LD_ADDR_OWVAR 42
24286: PUSH
24287: LD_INT 20
24289: ST_TO_ADDR
24290: GO 24597
24292: LD_INT 19
24294: DOUBLE
24295: EQUAL
24296: IFTRUE 24300
24298: GO 24311
24300: POP
// bc_type := b_ext_radio ; 20 :
24301: LD_ADDR_OWVAR 42
24305: PUSH
24306: LD_INT 22
24308: ST_TO_ADDR
24309: GO 24597
24311: LD_INT 20
24313: DOUBLE
24314: EQUAL
24315: IFTRUE 24319
24317: GO 24330
24319: POP
// bc_type := b_ext_siberium ; 21 :
24320: LD_ADDR_OWVAR 42
24324: PUSH
24325: LD_INT 21
24327: ST_TO_ADDR
24328: GO 24597
24330: LD_INT 21
24332: DOUBLE
24333: EQUAL
24334: IFTRUE 24338
24336: GO 24349
24338: POP
// bc_type := b_ext_computer ; 22 :
24339: LD_ADDR_OWVAR 42
24343: PUSH
24344: LD_INT 24
24346: ST_TO_ADDR
24347: GO 24597
24349: LD_INT 22
24351: DOUBLE
24352: EQUAL
24353: IFTRUE 24357
24355: GO 24368
24357: POP
// bc_type := b_ext_track ; 23 :
24358: LD_ADDR_OWVAR 42
24362: PUSH
24363: LD_INT 16
24365: ST_TO_ADDR
24366: GO 24597
24368: LD_INT 23
24370: DOUBLE
24371: EQUAL
24372: IFTRUE 24376
24374: GO 24387
24376: POP
// bc_type := b_ext_laser ; 24 :
24377: LD_ADDR_OWVAR 42
24381: PUSH
24382: LD_INT 25
24384: ST_TO_ADDR
24385: GO 24597
24387: LD_INT 24
24389: DOUBLE
24390: EQUAL
24391: IFTRUE 24395
24393: GO 24406
24395: POP
// bc_type := b_control_tower ; 25 :
24396: LD_ADDR_OWVAR 42
24400: PUSH
24401: LD_INT 36
24403: ST_TO_ADDR
24404: GO 24597
24406: LD_INT 25
24408: DOUBLE
24409: EQUAL
24410: IFTRUE 24414
24412: GO 24425
24414: POP
// bc_type := b_breastwork ; 26 :
24415: LD_ADDR_OWVAR 42
24419: PUSH
24420: LD_INT 31
24422: ST_TO_ADDR
24423: GO 24597
24425: LD_INT 26
24427: DOUBLE
24428: EQUAL
24429: IFTRUE 24433
24431: GO 24444
24433: POP
// bc_type := b_bunker ; 27 :
24434: LD_ADDR_OWVAR 42
24438: PUSH
24439: LD_INT 32
24441: ST_TO_ADDR
24442: GO 24597
24444: LD_INT 27
24446: DOUBLE
24447: EQUAL
24448: IFTRUE 24452
24450: GO 24463
24452: POP
// bc_type := b_turret ; 28 :
24453: LD_ADDR_OWVAR 42
24457: PUSH
24458: LD_INT 33
24460: ST_TO_ADDR
24461: GO 24597
24463: LD_INT 28
24465: DOUBLE
24466: EQUAL
24467: IFTRUE 24471
24469: GO 24482
24471: POP
// bc_type := b_armoury ; 29 :
24472: LD_ADDR_OWVAR 42
24476: PUSH
24477: LD_INT 4
24479: ST_TO_ADDR
24480: GO 24597
24482: LD_INT 29
24484: DOUBLE
24485: EQUAL
24486: IFTRUE 24490
24488: GO 24501
24490: POP
// bc_type := b_barracks ; 30 :
24491: LD_ADDR_OWVAR 42
24495: PUSH
24496: LD_INT 5
24498: ST_TO_ADDR
24499: GO 24597
24501: LD_INT 30
24503: DOUBLE
24504: EQUAL
24505: IFTRUE 24509
24507: GO 24520
24509: POP
// bc_type := b_solar_power ; 31 :
24510: LD_ADDR_OWVAR 42
24514: PUSH
24515: LD_INT 27
24517: ST_TO_ADDR
24518: GO 24597
24520: LD_INT 31
24522: DOUBLE
24523: EQUAL
24524: IFTRUE 24528
24526: GO 24539
24528: POP
// bc_type := b_oil_power ; 32 :
24529: LD_ADDR_OWVAR 42
24533: PUSH
24534: LD_INT 26
24536: ST_TO_ADDR
24537: GO 24597
24539: LD_INT 32
24541: DOUBLE
24542: EQUAL
24543: IFTRUE 24547
24545: GO 24558
24547: POP
// bc_type := b_siberite_power ; 33 :
24548: LD_ADDR_OWVAR 42
24552: PUSH
24553: LD_INT 28
24555: ST_TO_ADDR
24556: GO 24597
24558: LD_INT 33
24560: DOUBLE
24561: EQUAL
24562: IFTRUE 24566
24564: GO 24577
24566: POP
// bc_type := b_oil_mine ; 34 :
24567: LD_ADDR_OWVAR 42
24571: PUSH
24572: LD_INT 29
24574: ST_TO_ADDR
24575: GO 24597
24577: LD_INT 34
24579: DOUBLE
24580: EQUAL
24581: IFTRUE 24585
24583: GO 24596
24585: POP
// bc_type := b_siberite_mine ; end ;
24586: LD_ADDR_OWVAR 42
24590: PUSH
24591: LD_INT 30
24593: ST_TO_ADDR
24594: GO 24597
24596: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24597: LD_ADDR_VAR 0 8
24601: PUSH
24602: LD_VAR 0 5
24606: PPUSH
24607: LD_VAR 0 6
24611: PPUSH
24612: LD_VAR 0 3
24616: PPUSH
24617: CALL_OW 47
24621: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24622: LD_OWVAR 42
24626: PUSH
24627: LD_INT 32
24629: PUSH
24630: LD_INT 33
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: IN
24637: IFFALSE 24653
// PlaceWeaponTurret ( b , weapon ) ;
24639: LD_VAR 0 8
24643: PPUSH
24644: LD_VAR 0 4
24648: PPUSH
24649: CALL_OW 431
// end ;
24653: LD_VAR 0 7
24657: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24658: LD_INT 0
24660: PPUSH
24661: PPUSH
24662: PPUSH
24663: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24664: LD_ADDR_VAR 0 4
24668: PUSH
24669: LD_INT 22
24671: PUSH
24672: LD_OWVAR 2
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 2
24683: PUSH
24684: LD_INT 30
24686: PUSH
24687: LD_INT 0
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 30
24696: PUSH
24697: LD_INT 1
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: LIST
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PPUSH
24713: CALL_OW 69
24717: ST_TO_ADDR
// if not tmp then
24718: LD_VAR 0 4
24722: NOT
24723: IFFALSE 24727
// exit ;
24725: GO 24786
// for i in tmp do
24727: LD_ADDR_VAR 0 2
24731: PUSH
24732: LD_VAR 0 4
24736: PUSH
24737: FOR_IN
24738: IFFALSE 24784
// for j = 1 to 3 do
24740: LD_ADDR_VAR 0 3
24744: PUSH
24745: DOUBLE
24746: LD_INT 1
24748: DEC
24749: ST_TO_ADDR
24750: LD_INT 3
24752: PUSH
24753: FOR_TO
24754: IFFALSE 24780
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24756: LD_VAR 0 2
24760: PPUSH
24761: CALL_OW 274
24765: PPUSH
24766: LD_VAR 0 3
24770: PPUSH
24771: LD_INT 99999
24773: PPUSH
24774: CALL_OW 277
24778: GO 24753
24780: POP
24781: POP
24782: GO 24737
24784: POP
24785: POP
// end ;
24786: LD_VAR 0 1
24790: RET
// export function hHackSetLevel10 ; var i , j ; begin
24791: LD_INT 0
24793: PPUSH
24794: PPUSH
24795: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24796: LD_ADDR_VAR 0 2
24800: PUSH
24801: LD_INT 21
24803: PUSH
24804: LD_INT 1
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PPUSH
24811: CALL_OW 69
24815: PUSH
24816: FOR_IN
24817: IFFALSE 24869
// if IsSelected ( i ) then
24819: LD_VAR 0 2
24823: PPUSH
24824: CALL_OW 306
24828: IFFALSE 24867
// begin for j := 1 to 4 do
24830: LD_ADDR_VAR 0 3
24834: PUSH
24835: DOUBLE
24836: LD_INT 1
24838: DEC
24839: ST_TO_ADDR
24840: LD_INT 4
24842: PUSH
24843: FOR_TO
24844: IFFALSE 24865
// SetSkill ( i , j , 10 ) ;
24846: LD_VAR 0 2
24850: PPUSH
24851: LD_VAR 0 3
24855: PPUSH
24856: LD_INT 10
24858: PPUSH
24859: CALL_OW 237
24863: GO 24843
24865: POP
24866: POP
// end ;
24867: GO 24816
24869: POP
24870: POP
// end ;
24871: LD_VAR 0 1
24875: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24876: LD_INT 0
24878: PPUSH
24879: PPUSH
24880: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24881: LD_ADDR_VAR 0 2
24885: PUSH
24886: LD_INT 22
24888: PUSH
24889: LD_OWVAR 2
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 21
24900: PUSH
24901: LD_INT 1
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PPUSH
24912: CALL_OW 69
24916: PUSH
24917: FOR_IN
24918: IFFALSE 24959
// begin for j := 1 to 4 do
24920: LD_ADDR_VAR 0 3
24924: PUSH
24925: DOUBLE
24926: LD_INT 1
24928: DEC
24929: ST_TO_ADDR
24930: LD_INT 4
24932: PUSH
24933: FOR_TO
24934: IFFALSE 24955
// SetSkill ( i , j , 10 ) ;
24936: LD_VAR 0 2
24940: PPUSH
24941: LD_VAR 0 3
24945: PPUSH
24946: LD_INT 10
24948: PPUSH
24949: CALL_OW 237
24953: GO 24933
24955: POP
24956: POP
// end ;
24957: GO 24917
24959: POP
24960: POP
// end ;
24961: LD_VAR 0 1
24965: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24966: LD_INT 0
24968: PPUSH
// uc_side := your_side ;
24969: LD_ADDR_OWVAR 20
24973: PUSH
24974: LD_OWVAR 2
24978: ST_TO_ADDR
// uc_nation := nation ;
24979: LD_ADDR_OWVAR 21
24983: PUSH
24984: LD_VAR 0 1
24988: ST_TO_ADDR
// InitHc ;
24989: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24993: LD_INT 0
24995: PPUSH
24996: LD_VAR 0 2
25000: PPUSH
25001: LD_VAR 0 3
25005: PPUSH
25006: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25010: LD_VAR 0 4
25014: PPUSH
25015: LD_VAR 0 5
25019: PPUSH
25020: CALL_OW 428
25024: PUSH
25025: LD_INT 0
25027: EQUAL
25028: IFFALSE 25052
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25030: CALL_OW 44
25034: PPUSH
25035: LD_VAR 0 4
25039: PPUSH
25040: LD_VAR 0 5
25044: PPUSH
25045: LD_INT 1
25047: PPUSH
25048: CALL_OW 48
// end ;
25052: LD_VAR 0 6
25056: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25057: LD_INT 0
25059: PPUSH
25060: PPUSH
// uc_side := your_side ;
25061: LD_ADDR_OWVAR 20
25065: PUSH
25066: LD_OWVAR 2
25070: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25071: LD_VAR 0 1
25075: PUSH
25076: LD_INT 1
25078: PUSH
25079: LD_INT 2
25081: PUSH
25082: LD_INT 3
25084: PUSH
25085: LD_INT 4
25087: PUSH
25088: LD_INT 5
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: IN
25098: IFFALSE 25110
// uc_nation := nation_american else
25100: LD_ADDR_OWVAR 21
25104: PUSH
25105: LD_INT 1
25107: ST_TO_ADDR
25108: GO 25153
// if chassis in [ 11 , 12 , 13 , 14 ] then
25110: LD_VAR 0 1
25114: PUSH
25115: LD_INT 11
25117: PUSH
25118: LD_INT 12
25120: PUSH
25121: LD_INT 13
25123: PUSH
25124: LD_INT 14
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: IN
25133: IFFALSE 25145
// uc_nation := nation_arabian else
25135: LD_ADDR_OWVAR 21
25139: PUSH
25140: LD_INT 2
25142: ST_TO_ADDR
25143: GO 25153
// uc_nation := nation_russian ;
25145: LD_ADDR_OWVAR 21
25149: PUSH
25150: LD_INT 3
25152: ST_TO_ADDR
// vc_chassis := chassis ;
25153: LD_ADDR_OWVAR 37
25157: PUSH
25158: LD_VAR 0 1
25162: ST_TO_ADDR
// vc_engine := engine ;
25163: LD_ADDR_OWVAR 39
25167: PUSH
25168: LD_VAR 0 2
25172: ST_TO_ADDR
// vc_control := control ;
25173: LD_ADDR_OWVAR 38
25177: PUSH
25178: LD_VAR 0 3
25182: ST_TO_ADDR
// vc_weapon := weapon ;
25183: LD_ADDR_OWVAR 40
25187: PUSH
25188: LD_VAR 0 4
25192: ST_TO_ADDR
// un := CreateVehicle ;
25193: LD_ADDR_VAR 0 8
25197: PUSH
25198: CALL_OW 45
25202: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25203: LD_VAR 0 8
25207: PPUSH
25208: LD_INT 0
25210: PPUSH
25211: LD_INT 5
25213: PPUSH
25214: CALL_OW 12
25218: PPUSH
25219: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25223: LD_VAR 0 8
25227: PPUSH
25228: LD_VAR 0 5
25232: PPUSH
25233: LD_VAR 0 6
25237: PPUSH
25238: LD_INT 1
25240: PPUSH
25241: CALL_OW 48
// end ;
25245: LD_VAR 0 7
25249: RET
// export hInvincible ; every 1 do
25250: GO 25252
25252: DISABLE
// hInvincible := [ ] ;
25253: LD_ADDR_EXP 105
25257: PUSH
25258: EMPTY
25259: ST_TO_ADDR
25260: END
// every 10 do var i ;
25261: GO 25263
25263: DISABLE
25264: LD_INT 0
25266: PPUSH
// begin enable ;
25267: ENABLE
// if not hInvincible then
25268: LD_EXP 105
25272: NOT
25273: IFFALSE 25277
// exit ;
25275: GO 25321
// for i in hInvincible do
25277: LD_ADDR_VAR 0 1
25281: PUSH
25282: LD_EXP 105
25286: PUSH
25287: FOR_IN
25288: IFFALSE 25319
// if GetLives ( i ) < 1000 then
25290: LD_VAR 0 1
25294: PPUSH
25295: CALL_OW 256
25299: PUSH
25300: LD_INT 1000
25302: LESS
25303: IFFALSE 25317
// SetLives ( i , 1000 ) ;
25305: LD_VAR 0 1
25309: PPUSH
25310: LD_INT 1000
25312: PPUSH
25313: CALL_OW 234
25317: GO 25287
25319: POP
25320: POP
// end ;
25321: PPOPN 1
25323: END
// export function hHackInvincible ; var i ; begin
25324: LD_INT 0
25326: PPUSH
25327: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25328: LD_ADDR_VAR 0 2
25332: PUSH
25333: LD_INT 2
25335: PUSH
25336: LD_INT 21
25338: PUSH
25339: LD_INT 1
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 21
25348: PUSH
25349: LD_INT 2
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: LIST
25360: PPUSH
25361: CALL_OW 69
25365: PUSH
25366: FOR_IN
25367: IFFALSE 25428
// if IsSelected ( i ) then
25369: LD_VAR 0 2
25373: PPUSH
25374: CALL_OW 306
25378: IFFALSE 25426
// begin if i in hInvincible then
25380: LD_VAR 0 2
25384: PUSH
25385: LD_EXP 105
25389: IN
25390: IFFALSE 25410
// hInvincible := hInvincible diff i else
25392: LD_ADDR_EXP 105
25396: PUSH
25397: LD_EXP 105
25401: PUSH
25402: LD_VAR 0 2
25406: DIFF
25407: ST_TO_ADDR
25408: GO 25426
// hInvincible := hInvincible union i ;
25410: LD_ADDR_EXP 105
25414: PUSH
25415: LD_EXP 105
25419: PUSH
25420: LD_VAR 0 2
25424: UNION
25425: ST_TO_ADDR
// end ;
25426: GO 25366
25428: POP
25429: POP
// end ;
25430: LD_VAR 0 1
25434: RET
// export function hHackInvisible ; var i , j ; begin
25435: LD_INT 0
25437: PPUSH
25438: PPUSH
25439: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25440: LD_ADDR_VAR 0 2
25444: PUSH
25445: LD_INT 21
25447: PUSH
25448: LD_INT 1
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PPUSH
25455: CALL_OW 69
25459: PUSH
25460: FOR_IN
25461: IFFALSE 25485
// if IsSelected ( i ) then
25463: LD_VAR 0 2
25467: PPUSH
25468: CALL_OW 306
25472: IFFALSE 25483
// ComForceInvisible ( i ) ;
25474: LD_VAR 0 2
25478: PPUSH
25479: CALL_OW 496
25483: GO 25460
25485: POP
25486: POP
// end ;
25487: LD_VAR 0 1
25491: RET
// export function hHackChangeYourSide ; begin
25492: LD_INT 0
25494: PPUSH
// if your_side = 8 then
25495: LD_OWVAR 2
25499: PUSH
25500: LD_INT 8
25502: EQUAL
25503: IFFALSE 25515
// your_side := 0 else
25505: LD_ADDR_OWVAR 2
25509: PUSH
25510: LD_INT 0
25512: ST_TO_ADDR
25513: GO 25529
// your_side := your_side + 1 ;
25515: LD_ADDR_OWVAR 2
25519: PUSH
25520: LD_OWVAR 2
25524: PUSH
25525: LD_INT 1
25527: PLUS
25528: ST_TO_ADDR
// end ;
25529: LD_VAR 0 1
25533: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25534: LD_INT 0
25536: PPUSH
25537: PPUSH
25538: PPUSH
// for i in all_units do
25539: LD_ADDR_VAR 0 2
25543: PUSH
25544: LD_OWVAR 3
25548: PUSH
25549: FOR_IN
25550: IFFALSE 25628
// if IsSelected ( i ) then
25552: LD_VAR 0 2
25556: PPUSH
25557: CALL_OW 306
25561: IFFALSE 25626
// begin j := GetSide ( i ) ;
25563: LD_ADDR_VAR 0 3
25567: PUSH
25568: LD_VAR 0 2
25572: PPUSH
25573: CALL_OW 255
25577: ST_TO_ADDR
// if j = 8 then
25578: LD_VAR 0 3
25582: PUSH
25583: LD_INT 8
25585: EQUAL
25586: IFFALSE 25598
// j := 0 else
25588: LD_ADDR_VAR 0 3
25592: PUSH
25593: LD_INT 0
25595: ST_TO_ADDR
25596: GO 25612
// j := j + 1 ;
25598: LD_ADDR_VAR 0 3
25602: PUSH
25603: LD_VAR 0 3
25607: PUSH
25608: LD_INT 1
25610: PLUS
25611: ST_TO_ADDR
// SetSide ( i , j ) ;
25612: LD_VAR 0 2
25616: PPUSH
25617: LD_VAR 0 3
25621: PPUSH
25622: CALL_OW 235
// end ;
25626: GO 25549
25628: POP
25629: POP
// end ;
25630: LD_VAR 0 1
25634: RET
// export function hHackFog ; begin
25635: LD_INT 0
25637: PPUSH
// FogOff ( true ) ;
25638: LD_INT 1
25640: PPUSH
25641: CALL_OW 344
// end ;
25645: LD_VAR 0 1
25649: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25650: LD_INT 0
25652: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25653: LD_VAR 0 1
25657: PPUSH
25658: LD_VAR 0 2
25662: PPUSH
25663: LD_VAR 0 3
25667: PPUSH
25668: LD_INT 1
25670: PPUSH
25671: LD_INT 1
25673: PPUSH
25674: CALL_OW 483
// CenterOnXY ( x , y ) ;
25678: LD_VAR 0 2
25682: PPUSH
25683: LD_VAR 0 3
25687: PPUSH
25688: CALL_OW 84
// end ;
25692: LD_VAR 0 4
25696: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25697: LD_INT 0
25699: PPUSH
25700: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25701: LD_VAR 0 1
25705: NOT
25706: PUSH
25707: LD_VAR 0 2
25711: PPUSH
25712: LD_VAR 0 3
25716: PPUSH
25717: CALL_OW 488
25721: NOT
25722: OR
25723: PUSH
25724: LD_VAR 0 1
25728: PPUSH
25729: CALL_OW 266
25733: PUSH
25734: LD_INT 3
25736: NONEQUAL
25737: PUSH
25738: LD_VAR 0 1
25742: PPUSH
25743: CALL_OW 247
25747: PUSH
25748: LD_INT 1
25750: EQUAL
25751: NOT
25752: AND
25753: OR
25754: IFFALSE 25758
// exit ;
25756: GO 26040
// if GetType ( factory ) = unit_human then
25758: LD_VAR 0 1
25762: PPUSH
25763: CALL_OW 247
25767: PUSH
25768: LD_INT 1
25770: EQUAL
25771: IFFALSE 25788
// factory := IsInUnit ( factory ) ;
25773: LD_ADDR_VAR 0 1
25777: PUSH
25778: LD_VAR 0 1
25782: PPUSH
25783: CALL_OW 310
25787: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25788: LD_VAR 0 1
25792: PPUSH
25793: CALL_OW 266
25797: PUSH
25798: LD_INT 3
25800: NONEQUAL
25801: IFFALSE 25805
// exit ;
25803: GO 26040
// for i := 1 to Count ( factoryWaypoints ) do
25805: LD_ADDR_VAR 0 5
25809: PUSH
25810: DOUBLE
25811: LD_INT 1
25813: DEC
25814: ST_TO_ADDR
25815: LD_EXP 106
25819: PPUSH
25820: CALL 34543 0 1
25824: PUSH
25825: FOR_TO
25826: IFFALSE 25988
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
25828: LD_VAR 0 2
25832: PPUSH
25833: LD_VAR 0 3
25837: PPUSH
25838: CALL_OW 428
25842: PUSH
25843: LD_EXP 106
25847: PUSH
25848: LD_VAR 0 5
25852: ARRAY
25853: PUSH
25854: LD_INT 2
25856: ARRAY
25857: EQUAL
25858: IFFALSE 25890
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
25860: LD_ADDR_EXP 106
25864: PUSH
25865: LD_EXP 106
25869: PPUSH
25870: LD_VAR 0 5
25874: PPUSH
25875: CALL_OW 3
25879: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25880: CALL 26045 0 0
// exit ;
25884: POP
25885: POP
25886: GO 26040
// end else
25888: GO 25986
// if factory = factoryWaypoints [ i ] [ 2 ] then
25890: LD_VAR 0 1
25894: PUSH
25895: LD_EXP 106
25899: PUSH
25900: LD_VAR 0 5
25904: ARRAY
25905: PUSH
25906: LD_INT 2
25908: ARRAY
25909: EQUAL
25910: IFFALSE 25986
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
25912: LD_ADDR_EXP 106
25916: PUSH
25917: LD_EXP 106
25921: PPUSH
25922: LD_VAR 0 5
25926: PPUSH
25927: CALL_OW 3
25931: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
25932: LD_ADDR_EXP 106
25936: PUSH
25937: LD_EXP 106
25941: PPUSH
25942: LD_VAR 0 1
25946: PPUSH
25947: CALL_OW 255
25951: PUSH
25952: LD_VAR 0 1
25956: PUSH
25957: LD_VAR 0 2
25961: PUSH
25962: LD_VAR 0 3
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: PPUSH
25973: CALL 70152 0 2
25977: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25978: CALL 26045 0 0
// exit ;
25982: POP
25983: POP
25984: GO 26040
// end ; end ;
25986: GO 25825
25988: POP
25989: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
25990: LD_ADDR_EXP 106
25994: PUSH
25995: LD_EXP 106
25999: PPUSH
26000: LD_VAR 0 1
26004: PPUSH
26005: CALL_OW 255
26009: PUSH
26010: LD_VAR 0 1
26014: PUSH
26015: LD_VAR 0 2
26019: PUSH
26020: LD_VAR 0 3
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: PPUSH
26031: CALL 70152 0 2
26035: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26036: CALL 26045 0 0
// end ;
26040: LD_VAR 0 4
26044: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26045: LD_INT 0
26047: PPUSH
26048: PPUSH
26049: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26050: LD_STRING resetFactoryWaypoint();
26052: PPUSH
26053: CALL_OW 559
// if factoryWaypoints then
26057: LD_EXP 106
26061: IFFALSE 26182
// begin list := factoryWaypoints ;
26063: LD_ADDR_VAR 0 3
26067: PUSH
26068: LD_EXP 106
26072: ST_TO_ADDR
// for i := 1 to list do
26073: LD_ADDR_VAR 0 2
26077: PUSH
26078: DOUBLE
26079: LD_INT 1
26081: DEC
26082: ST_TO_ADDR
26083: LD_VAR 0 3
26087: PUSH
26088: FOR_TO
26089: IFFALSE 26180
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26091: LD_STRING setFactoryWaypointXY(
26093: PUSH
26094: LD_VAR 0 3
26098: PUSH
26099: LD_VAR 0 2
26103: ARRAY
26104: PUSH
26105: LD_INT 1
26107: ARRAY
26108: STR
26109: PUSH
26110: LD_STRING ,
26112: STR
26113: PUSH
26114: LD_VAR 0 3
26118: PUSH
26119: LD_VAR 0 2
26123: ARRAY
26124: PUSH
26125: LD_INT 2
26127: ARRAY
26128: STR
26129: PUSH
26130: LD_STRING ,
26132: STR
26133: PUSH
26134: LD_VAR 0 3
26138: PUSH
26139: LD_VAR 0 2
26143: ARRAY
26144: PUSH
26145: LD_INT 3
26147: ARRAY
26148: STR
26149: PUSH
26150: LD_STRING ,
26152: STR
26153: PUSH
26154: LD_VAR 0 3
26158: PUSH
26159: LD_VAR 0 2
26163: ARRAY
26164: PUSH
26165: LD_INT 4
26167: ARRAY
26168: STR
26169: PUSH
26170: LD_STRING )
26172: STR
26173: PPUSH
26174: CALL_OW 559
26178: GO 26088
26180: POP
26181: POP
// end ; end ;
26182: LD_VAR 0 1
26186: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26187: LD_INT 0
26189: PPUSH
// if HexInfo ( x , y ) = warehouse then
26190: LD_VAR 0 2
26194: PPUSH
26195: LD_VAR 0 3
26199: PPUSH
26200: CALL_OW 428
26204: PUSH
26205: LD_VAR 0 1
26209: EQUAL
26210: IFFALSE 26237
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26212: LD_ADDR_EXP 107
26216: PUSH
26217: LD_EXP 107
26221: PPUSH
26222: LD_VAR 0 1
26226: PPUSH
26227: LD_INT 0
26229: PPUSH
26230: CALL_OW 1
26234: ST_TO_ADDR
26235: GO 26288
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26237: LD_ADDR_EXP 107
26241: PUSH
26242: LD_EXP 107
26246: PPUSH
26247: LD_VAR 0 1
26251: PPUSH
26252: LD_VAR 0 1
26256: PPUSH
26257: CALL_OW 255
26261: PUSH
26262: LD_VAR 0 1
26266: PUSH
26267: LD_VAR 0 2
26271: PUSH
26272: LD_VAR 0 3
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: PPUSH
26283: CALL_OW 1
26287: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26288: CALL 26297 0 0
// end ;
26292: LD_VAR 0 4
26296: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26297: LD_INT 0
26299: PPUSH
26300: PPUSH
26301: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26302: LD_STRING resetWarehouseGatheringPoints();
26304: PPUSH
26305: CALL_OW 559
// if warehouseGatheringPoints then
26309: LD_EXP 107
26313: IFFALSE 26439
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26315: LD_ADDR_VAR 0 3
26319: PUSH
26320: LD_EXP 107
26324: PPUSH
26325: CALL 73914 0 1
26329: ST_TO_ADDR
// for i := 1 to list do
26330: LD_ADDR_VAR 0 2
26334: PUSH
26335: DOUBLE
26336: LD_INT 1
26338: DEC
26339: ST_TO_ADDR
26340: LD_VAR 0 3
26344: PUSH
26345: FOR_TO
26346: IFFALSE 26437
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26348: LD_STRING setWarehouseGatheringPointXY(
26350: PUSH
26351: LD_VAR 0 3
26355: PUSH
26356: LD_VAR 0 2
26360: ARRAY
26361: PUSH
26362: LD_INT 1
26364: ARRAY
26365: STR
26366: PUSH
26367: LD_STRING ,
26369: STR
26370: PUSH
26371: LD_VAR 0 3
26375: PUSH
26376: LD_VAR 0 2
26380: ARRAY
26381: PUSH
26382: LD_INT 2
26384: ARRAY
26385: STR
26386: PUSH
26387: LD_STRING ,
26389: STR
26390: PUSH
26391: LD_VAR 0 3
26395: PUSH
26396: LD_VAR 0 2
26400: ARRAY
26401: PUSH
26402: LD_INT 3
26404: ARRAY
26405: STR
26406: PUSH
26407: LD_STRING ,
26409: STR
26410: PUSH
26411: LD_VAR 0 3
26415: PUSH
26416: LD_VAR 0 2
26420: ARRAY
26421: PUSH
26422: LD_INT 4
26424: ARRAY
26425: STR
26426: PUSH
26427: LD_STRING )
26429: STR
26430: PPUSH
26431: CALL_OW 559
26435: GO 26345
26437: POP
26438: POP
// end ; end ;
26439: LD_VAR 0 1
26443: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26444: LD_EXP 107
26448: IFFALSE 27133
26450: GO 26452
26452: DISABLE
26453: LD_INT 0
26455: PPUSH
26456: PPUSH
26457: PPUSH
26458: PPUSH
26459: PPUSH
26460: PPUSH
26461: PPUSH
26462: PPUSH
26463: PPUSH
// begin enable ;
26464: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26465: LD_ADDR_VAR 0 3
26469: PUSH
26470: LD_EXP 107
26474: PPUSH
26475: CALL 73914 0 1
26479: ST_TO_ADDR
// if not list then
26480: LD_VAR 0 3
26484: NOT
26485: IFFALSE 26489
// exit ;
26487: GO 27133
// for i := 1 to list do
26489: LD_ADDR_VAR 0 1
26493: PUSH
26494: DOUBLE
26495: LD_INT 1
26497: DEC
26498: ST_TO_ADDR
26499: LD_VAR 0 3
26503: PUSH
26504: FOR_TO
26505: IFFALSE 27131
// begin depot := list [ i ] [ 2 ] ;
26507: LD_ADDR_VAR 0 8
26511: PUSH
26512: LD_VAR 0 3
26516: PUSH
26517: LD_VAR 0 1
26521: ARRAY
26522: PUSH
26523: LD_INT 2
26525: ARRAY
26526: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26527: LD_ADDR_VAR 0 5
26531: PUSH
26532: LD_VAR 0 3
26536: PUSH
26537: LD_VAR 0 1
26541: ARRAY
26542: PUSH
26543: LD_INT 1
26545: ARRAY
26546: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26547: LD_VAR 0 8
26551: PPUSH
26552: CALL_OW 301
26556: PUSH
26557: LD_VAR 0 5
26561: PUSH
26562: LD_VAR 0 8
26566: PPUSH
26567: CALL_OW 255
26571: NONEQUAL
26572: OR
26573: IFFALSE 26602
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26575: LD_ADDR_EXP 107
26579: PUSH
26580: LD_EXP 107
26584: PPUSH
26585: LD_VAR 0 8
26589: PPUSH
26590: LD_INT 0
26592: PPUSH
26593: CALL_OW 1
26597: ST_TO_ADDR
// exit ;
26598: POP
26599: POP
26600: GO 27133
// end ; x := list [ i ] [ 3 ] ;
26602: LD_ADDR_VAR 0 6
26606: PUSH
26607: LD_VAR 0 3
26611: PUSH
26612: LD_VAR 0 1
26616: ARRAY
26617: PUSH
26618: LD_INT 3
26620: ARRAY
26621: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26622: LD_ADDR_VAR 0 7
26626: PUSH
26627: LD_VAR 0 3
26631: PUSH
26632: LD_VAR 0 1
26636: ARRAY
26637: PUSH
26638: LD_INT 4
26640: ARRAY
26641: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26642: LD_ADDR_VAR 0 9
26646: PUSH
26647: LD_VAR 0 6
26651: PPUSH
26652: LD_VAR 0 7
26656: PPUSH
26657: LD_INT 16
26659: PPUSH
26660: CALL 72498 0 3
26664: ST_TO_ADDR
// if not cratesNearbyPoint then
26665: LD_VAR 0 9
26669: NOT
26670: IFFALSE 26676
// exit ;
26672: POP
26673: POP
26674: GO 27133
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26676: LD_ADDR_VAR 0 4
26680: PUSH
26681: LD_INT 22
26683: PUSH
26684: LD_VAR 0 5
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 3
26695: PUSH
26696: LD_INT 60
26698: PUSH
26699: EMPTY
26700: LIST
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 91
26708: PUSH
26709: LD_VAR 0 8
26713: PUSH
26714: LD_INT 6
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 2
26724: PUSH
26725: LD_INT 25
26727: PUSH
26728: LD_INT 2
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 25
26737: PUSH
26738: LD_INT 16
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: LIST
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: PPUSH
26756: CALL_OW 69
26760: PUSH
26761: LD_VAR 0 8
26765: PPUSH
26766: CALL_OW 313
26770: PPUSH
26771: LD_INT 3
26773: PUSH
26774: LD_INT 60
26776: PUSH
26777: EMPTY
26778: LIST
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 2
26786: PUSH
26787: LD_INT 25
26789: PUSH
26790: LD_INT 2
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 25
26799: PUSH
26800: LD_INT 16
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: LIST
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PPUSH
26816: CALL_OW 72
26820: UNION
26821: ST_TO_ADDR
// if tmp then
26822: LD_VAR 0 4
26826: IFFALSE 26906
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26828: LD_ADDR_VAR 0 4
26832: PUSH
26833: LD_VAR 0 4
26837: PPUSH
26838: LD_INT 3
26840: PPUSH
26841: CALL 70467 0 2
26845: ST_TO_ADDR
// for j in tmp do
26846: LD_ADDR_VAR 0 2
26850: PUSH
26851: LD_VAR 0 4
26855: PUSH
26856: FOR_IN
26857: IFFALSE 26900
// begin if IsInUnit ( j ) then
26859: LD_VAR 0 2
26863: PPUSH
26864: CALL_OW 310
26868: IFFALSE 26879
// ComExit ( j ) ;
26870: LD_VAR 0 2
26874: PPUSH
26875: CALL 70550 0 1
// AddComCollect ( j , x , y ) ;
26879: LD_VAR 0 2
26883: PPUSH
26884: LD_VAR 0 6
26888: PPUSH
26889: LD_VAR 0 7
26893: PPUSH
26894: CALL_OW 177
// end ;
26898: GO 26856
26900: POP
26901: POP
// exit ;
26902: POP
26903: POP
26904: GO 27133
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26906: LD_ADDR_VAR 0 4
26910: PUSH
26911: LD_INT 22
26913: PUSH
26914: LD_VAR 0 5
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 91
26925: PUSH
26926: LD_VAR 0 8
26930: PUSH
26931: LD_INT 8
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 2
26941: PUSH
26942: LD_INT 34
26944: PUSH
26945: LD_INT 12
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 34
26954: PUSH
26955: LD_INT 51
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 34
26964: PUSH
26965: LD_INT 32
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 34
26974: PUSH
26975: LD_INT 89
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: LIST
26993: PPUSH
26994: CALL_OW 69
26998: ST_TO_ADDR
// if tmp then
26999: LD_VAR 0 4
27003: IFFALSE 27129
// begin for j in tmp do
27005: LD_ADDR_VAR 0 2
27009: PUSH
27010: LD_VAR 0 4
27014: PUSH
27015: FOR_IN
27016: IFFALSE 27127
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27018: LD_VAR 0 2
27022: PPUSH
27023: CALL_OW 262
27027: PUSH
27028: LD_INT 3
27030: EQUAL
27031: PUSH
27032: LD_VAR 0 2
27036: PPUSH
27037: CALL_OW 261
27041: PUSH
27042: LD_INT 20
27044: GREATER
27045: OR
27046: PUSH
27047: LD_VAR 0 2
27051: PPUSH
27052: CALL_OW 314
27056: NOT
27057: AND
27058: PUSH
27059: LD_VAR 0 2
27063: PPUSH
27064: CALL_OW 263
27068: PUSH
27069: LD_INT 1
27071: NONEQUAL
27072: PUSH
27073: LD_VAR 0 2
27077: PPUSH
27078: CALL_OW 311
27082: OR
27083: AND
27084: IFFALSE 27125
// begin ComCollect ( j , x , y ) ;
27086: LD_VAR 0 2
27090: PPUSH
27091: LD_VAR 0 6
27095: PPUSH
27096: LD_VAR 0 7
27100: PPUSH
27101: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27105: LD_VAR 0 2
27109: PPUSH
27110: LD_VAR 0 8
27114: PPUSH
27115: CALL_OW 172
// exit ;
27119: POP
27120: POP
27121: POP
27122: POP
27123: GO 27133
// end ;
27125: GO 27015
27127: POP
27128: POP
// end ; end ;
27129: GO 26504
27131: POP
27132: POP
// end ; end_of_file
27133: PPOPN 9
27135: END
// export function SOS_UnitDestroyed ( un ) ; begin
27136: LD_INT 0
27138: PPUSH
// ComRadiation ( un ) ;
27139: LD_VAR 0 1
27143: PPUSH
27144: CALL 28125 0 1
// end ;
27148: LD_VAR 0 2
27152: RET
// export function SOS_UnitKamikazed ( un ) ; begin
27153: LD_INT 0
27155: PPUSH
// ComRadiation ( un ) ;
27156: LD_VAR 0 1
27160: PPUSH
27161: CALL 28125 0 1
// end ;
27165: LD_VAR 0 2
27169: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27170: LD_INT 0
27172: PPUSH
// end ;
27173: LD_VAR 0 4
27177: RET
// export function SOS_Command ( cmd ) ; begin
27178: LD_INT 0
27180: PPUSH
// end ;
27181: LD_VAR 0 2
27185: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27186: LD_INT 0
27188: PPUSH
// end ;
27189: LD_VAR 0 6
27193: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
27194: LD_INT 0
27196: PPUSH
27197: PPUSH
27198: PPUSH
27199: PPUSH
27200: PPUSH
// if not vehicle or not factory then
27201: LD_VAR 0 1
27205: NOT
27206: PUSH
27207: LD_VAR 0 2
27211: NOT
27212: OR
27213: IFFALSE 27217
// exit ;
27215: GO 27716
// if not factoryWaypoints then
27217: LD_EXP 106
27221: NOT
27222: IFFALSE 27226
// exit ;
27224: GO 27716
// for i := 1 to Count ( factoryWaypoints ) do
27226: LD_ADDR_VAR 0 4
27230: PUSH
27231: DOUBLE
27232: LD_INT 1
27234: DEC
27235: ST_TO_ADDR
27236: LD_EXP 106
27240: PPUSH
27241: CALL 34543 0 1
27245: PUSH
27246: FOR_TO
27247: IFFALSE 27714
// if factoryWaypoints [ i ] [ 2 ] = factory then
27249: LD_EXP 106
27253: PUSH
27254: LD_VAR 0 4
27258: ARRAY
27259: PUSH
27260: LD_INT 2
27262: ARRAY
27263: PUSH
27264: LD_VAR 0 2
27268: EQUAL
27269: IFFALSE 27712
// begin if GetControl ( vehicle ) = control_manual then
27271: LD_VAR 0 1
27275: PPUSH
27276: CALL_OW 263
27280: PUSH
27281: LD_INT 1
27283: EQUAL
27284: IFFALSE 27595
// begin driver := IsDrivenBy ( vehicle ) ;
27286: LD_ADDR_VAR 0 6
27290: PUSH
27291: LD_VAR 0 1
27295: PPUSH
27296: CALL_OW 311
27300: ST_TO_ADDR
// tag := GetTag ( driver ) ;
27301: LD_ADDR_VAR 0 5
27305: PUSH
27306: LD_VAR 0 6
27310: PPUSH
27311: CALL_OW 110
27315: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
27316: LD_VAR 0 5
27320: PUSH
27321: LD_INT 501
27323: EQUAL
27324: PUSH
27325: LD_VAR 0 1
27329: PPUSH
27330: CALL_OW 110
27334: PUSH
27335: LD_INT 501
27337: EQUAL
27338: OR
27339: IFFALSE 27345
// exit ;
27341: POP
27342: POP
27343: GO 27716
// if not HasTask ( driver ) then
27345: LD_VAR 0 6
27349: PPUSH
27350: CALL_OW 314
27354: NOT
27355: IFFALSE 27593
// begin SetTag ( driver , tDriver ) ;
27357: LD_VAR 0 6
27361: PPUSH
27362: LD_INT 501
27364: PPUSH
27365: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
27369: LD_VAR 0 1
27373: PPUSH
27374: LD_INT 501
27376: PPUSH
27377: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27381: LD_ADDR_VAR 0 7
27385: PUSH
27386: LD_EXP 106
27390: PUSH
27391: LD_VAR 0 4
27395: ARRAY
27396: PUSH
27397: LD_INT 3
27399: ARRAY
27400: PPUSH
27401: LD_EXP 106
27405: PUSH
27406: LD_VAR 0 4
27410: ARRAY
27411: PUSH
27412: LD_INT 4
27414: ARRAY
27415: PPUSH
27416: CALL_OW 428
27420: ST_TO_ADDR
// if hex then
27421: LD_VAR 0 7
27425: IFFALSE 27443
// ComMoveUnit ( driver , hex ) else
27427: LD_VAR 0 6
27431: PPUSH
27432: LD_VAR 0 7
27436: PPUSH
27437: CALL_OW 112
27441: GO 27482
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27443: LD_VAR 0 6
27447: PPUSH
27448: LD_EXP 106
27452: PUSH
27453: LD_VAR 0 4
27457: ARRAY
27458: PUSH
27459: LD_INT 3
27461: ARRAY
27462: PPUSH
27463: LD_EXP 106
27467: PUSH
27468: LD_VAR 0 4
27472: ARRAY
27473: PUSH
27474: LD_INT 4
27476: ARRAY
27477: PPUSH
27478: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27482: LD_VAR 0 6
27486: PPUSH
27487: CALL_OW 181
// if Multiplayer then
27491: LD_OWVAR 4
27495: IFFALSE 27544
// begin repeat wait ( 10 ) ;
27497: LD_INT 10
27499: PPUSH
27500: CALL_OW 67
// until not IsInUnit ( driver ) ;
27504: LD_VAR 0 6
27508: PPUSH
27509: CALL_OW 310
27513: NOT
27514: IFFALSE 27497
// if not HasTask ( driver ) then
27516: LD_VAR 0 6
27520: PPUSH
27521: CALL_OW 314
27525: NOT
27526: IFFALSE 27542
// ComEnterUnit ( driver , factory ) ;
27528: LD_VAR 0 6
27532: PPUSH
27533: LD_VAR 0 2
27537: PPUSH
27538: CALL_OW 120
// end else
27542: GO 27558
// AddComEnterUnit ( driver , factory ) ;
27544: LD_VAR 0 6
27548: PPUSH
27549: LD_VAR 0 2
27553: PPUSH
27554: CALL_OW 180
// wait ( 0 0$1 ) ;
27558: LD_INT 35
27560: PPUSH
27561: CALL_OW 67
// SetTag ( driver , tag ) ;
27565: LD_VAR 0 6
27569: PPUSH
27570: LD_VAR 0 5
27574: PPUSH
27575: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
27579: LD_VAR 0 1
27583: PPUSH
27584: LD_INT 0
27586: PPUSH
27587: CALL_OW 109
// break ;
27591: GO 27714
// end ; end else
27593: GO 27712
// if GetControl ( vehicle ) = control_remote then
27595: LD_VAR 0 1
27599: PPUSH
27600: CALL_OW 263
27604: PUSH
27605: LD_INT 2
27607: EQUAL
27608: IFFALSE 27671
// begin wait ( 0 0$2 ) ;
27610: LD_INT 70
27612: PPUSH
27613: CALL_OW 67
// if Connect ( vehicle ) then
27617: LD_VAR 0 1
27621: PPUSH
27622: CALL 40749 0 1
27626: IFFALSE 27667
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27628: LD_VAR 0 1
27632: PPUSH
27633: LD_EXP 106
27637: PUSH
27638: LD_VAR 0 4
27642: ARRAY
27643: PUSH
27644: LD_INT 3
27646: ARRAY
27647: PPUSH
27648: LD_EXP 106
27652: PUSH
27653: LD_VAR 0 4
27657: ARRAY
27658: PUSH
27659: LD_INT 4
27661: ARRAY
27662: PPUSH
27663: CALL_OW 171
// break ;
27667: GO 27714
// end else
27669: GO 27712
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27671: LD_VAR 0 1
27675: PPUSH
27676: LD_EXP 106
27680: PUSH
27681: LD_VAR 0 4
27685: ARRAY
27686: PUSH
27687: LD_INT 3
27689: ARRAY
27690: PPUSH
27691: LD_EXP 106
27695: PUSH
27696: LD_VAR 0 4
27700: ARRAY
27701: PUSH
27702: LD_INT 4
27704: ARRAY
27705: PPUSH
27706: CALL_OW 171
// break ;
27710: GO 27714
// end ; end ;
27712: GO 27246
27714: POP
27715: POP
// end ;
27716: LD_VAR 0 3
27720: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27721: LD_INT 0
27723: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27724: LD_VAR 0 1
27728: PUSH
27729: LD_INT 250
27731: EQUAL
27732: PUSH
27733: LD_VAR 0 2
27737: PPUSH
27738: CALL_OW 264
27742: PUSH
27743: LD_INT 81
27745: EQUAL
27746: AND
27747: IFFALSE 27768
// MinerPlaceMine ( unit , x , y ) ;
27749: LD_VAR 0 2
27753: PPUSH
27754: LD_VAR 0 4
27758: PPUSH
27759: LD_VAR 0 5
27763: PPUSH
27764: CALL 30860 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27768: LD_VAR 0 1
27772: PUSH
27773: LD_INT 251
27775: EQUAL
27776: PUSH
27777: LD_VAR 0 2
27781: PPUSH
27782: CALL_OW 264
27786: PUSH
27787: LD_INT 81
27789: EQUAL
27790: AND
27791: IFFALSE 27812
// MinerDetonateMine ( unit , x , y ) ;
27793: LD_VAR 0 2
27797: PPUSH
27798: LD_VAR 0 4
27802: PPUSH
27803: LD_VAR 0 5
27807: PPUSH
27808: CALL 31135 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27812: LD_VAR 0 1
27816: PUSH
27817: LD_INT 252
27819: EQUAL
27820: PUSH
27821: LD_VAR 0 2
27825: PPUSH
27826: CALL_OW 264
27830: PUSH
27831: LD_INT 81
27833: EQUAL
27834: AND
27835: IFFALSE 27856
// MinerCreateMinefield ( unit , x , y ) ;
27837: LD_VAR 0 2
27841: PPUSH
27842: LD_VAR 0 4
27846: PPUSH
27847: LD_VAR 0 5
27851: PPUSH
27852: CALL 31552 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27856: LD_VAR 0 1
27860: PUSH
27861: LD_INT 253
27863: EQUAL
27864: PUSH
27865: LD_VAR 0 2
27869: PPUSH
27870: CALL_OW 257
27874: PUSH
27875: LD_INT 5
27877: EQUAL
27878: AND
27879: IFFALSE 27900
// ComBinocular ( unit , x , y ) ;
27881: LD_VAR 0 2
27885: PPUSH
27886: LD_VAR 0 4
27890: PPUSH
27891: LD_VAR 0 5
27895: PPUSH
27896: CALL 31921 0 3
// if selectedUnit then
27900: LD_VAR 0 3
27904: IFFALSE 27960
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27906: LD_VAR 0 1
27910: PUSH
27911: LD_INT 254
27913: EQUAL
27914: PUSH
27915: LD_VAR 0 2
27919: PPUSH
27920: CALL_OW 264
27924: PUSH
27925: LD_INT 99
27927: EQUAL
27928: AND
27929: PUSH
27930: LD_VAR 0 3
27934: PPUSH
27935: CALL_OW 263
27939: PUSH
27940: LD_INT 3
27942: EQUAL
27943: AND
27944: IFFALSE 27960
// HackDestroyVehicle ( unit , selectedUnit ) ;
27946: LD_VAR 0 2
27950: PPUSH
27951: LD_VAR 0 3
27955: PPUSH
27956: CALL 30224 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27960: LD_VAR 0 1
27964: PUSH
27965: LD_INT 255
27967: EQUAL
27968: PUSH
27969: LD_VAR 0 2
27973: PPUSH
27974: CALL_OW 264
27978: PUSH
27979: LD_INT 14
27981: PUSH
27982: LD_INT 53
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: IN
27989: AND
27990: PUSH
27991: LD_VAR 0 4
27995: PPUSH
27996: LD_VAR 0 5
28000: PPUSH
28001: CALL_OW 488
28005: AND
28006: IFFALSE 28030
// CutTreeXYR ( unit , x , y , 12 ) ;
28008: LD_VAR 0 2
28012: PPUSH
28013: LD_VAR 0 4
28017: PPUSH
28018: LD_VAR 0 5
28022: PPUSH
28023: LD_INT 12
28025: PPUSH
28026: CALL 28221 0 4
// if cmd = 256 then
28030: LD_VAR 0 1
28034: PUSH
28035: LD_INT 256
28037: EQUAL
28038: IFFALSE 28059
// SetFactoryWaypoint ( unit , x , y ) ;
28040: LD_VAR 0 2
28044: PPUSH
28045: LD_VAR 0 4
28049: PPUSH
28050: LD_VAR 0 5
28054: PPUSH
28055: CALL 25697 0 3
// if cmd = 257 then
28059: LD_VAR 0 1
28063: PUSH
28064: LD_INT 257
28066: EQUAL
28067: IFFALSE 28088
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28069: LD_VAR 0 2
28073: PPUSH
28074: LD_VAR 0 4
28078: PPUSH
28079: LD_VAR 0 5
28083: PPUSH
28084: CALL 26187 0 3
// if cmd = 258 then
28088: LD_VAR 0 1
28092: PUSH
28093: LD_INT 258
28095: EQUAL
28096: IFFALSE 28120
// BurnTreeXYR ( unit , x , y , 8 ) ;
28098: LD_VAR 0 2
28102: PPUSH
28103: LD_VAR 0 4
28107: PPUSH
28108: LD_VAR 0 5
28112: PPUSH
28113: LD_INT 8
28115: PPUSH
28116: CALL 28615 0 4
// end ;
28120: LD_VAR 0 6
28124: RET
// export function ComRadiation ( un ) ; var eff ; begin
28125: LD_INT 0
28127: PPUSH
28128: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
28129: LD_VAR 0 1
28133: PPUSH
28134: CALL_OW 264
28138: PUSH
28139: LD_INT 91
28141: NONEQUAL
28142: IFFALSE 28146
// exit ;
28144: GO 28216
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28146: LD_INT 68
28148: PPUSH
28149: LD_VAR 0 1
28153: PPUSH
28154: CALL_OW 255
28158: PPUSH
28159: CALL_OW 321
28163: PUSH
28164: LD_INT 2
28166: EQUAL
28167: IFFALSE 28179
// eff := 70 else
28169: LD_ADDR_VAR 0 3
28173: PUSH
28174: LD_INT 70
28176: ST_TO_ADDR
28177: GO 28187
// eff := 30 ;
28179: LD_ADDR_VAR 0 3
28183: PUSH
28184: LD_INT 30
28186: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28187: LD_VAR 0 1
28191: PPUSH
28192: CALL_OW 250
28196: PPUSH
28197: LD_VAR 0 1
28201: PPUSH
28202: CALL_OW 251
28206: PPUSH
28207: LD_VAR 0 3
28211: PPUSH
28212: CALL_OW 495
// end ;
28216: LD_VAR 0 2
28220: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28221: LD_INT 0
28223: PPUSH
28224: PPUSH
28225: PPUSH
28226: PPUSH
28227: PPUSH
28228: PPUSH
28229: PPUSH
28230: PPUSH
28231: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28232: LD_VAR 0 1
28236: PPUSH
28237: CALL_OW 302
28241: NOT
28242: PUSH
28243: LD_VAR 0 2
28247: PPUSH
28248: LD_VAR 0 3
28252: PPUSH
28253: CALL_OW 488
28257: NOT
28258: OR
28259: PUSH
28260: LD_VAR 0 4
28264: NOT
28265: OR
28266: IFFALSE 28270
// exit ;
28268: GO 28610
// list := [ ] ;
28270: LD_ADDR_VAR 0 13
28274: PUSH
28275: EMPTY
28276: ST_TO_ADDR
// if x - r < 0 then
28277: LD_VAR 0 2
28281: PUSH
28282: LD_VAR 0 4
28286: MINUS
28287: PUSH
28288: LD_INT 0
28290: LESS
28291: IFFALSE 28303
// min_x := 0 else
28293: LD_ADDR_VAR 0 7
28297: PUSH
28298: LD_INT 0
28300: ST_TO_ADDR
28301: GO 28319
// min_x := x - r ;
28303: LD_ADDR_VAR 0 7
28307: PUSH
28308: LD_VAR 0 2
28312: PUSH
28313: LD_VAR 0 4
28317: MINUS
28318: ST_TO_ADDR
// if y - r < 0 then
28319: LD_VAR 0 3
28323: PUSH
28324: LD_VAR 0 4
28328: MINUS
28329: PUSH
28330: LD_INT 0
28332: LESS
28333: IFFALSE 28345
// min_y := 0 else
28335: LD_ADDR_VAR 0 8
28339: PUSH
28340: LD_INT 0
28342: ST_TO_ADDR
28343: GO 28361
// min_y := y - r ;
28345: LD_ADDR_VAR 0 8
28349: PUSH
28350: LD_VAR 0 3
28354: PUSH
28355: LD_VAR 0 4
28359: MINUS
28360: ST_TO_ADDR
// max_x := x + r ;
28361: LD_ADDR_VAR 0 9
28365: PUSH
28366: LD_VAR 0 2
28370: PUSH
28371: LD_VAR 0 4
28375: PLUS
28376: ST_TO_ADDR
// max_y := y + r ;
28377: LD_ADDR_VAR 0 10
28381: PUSH
28382: LD_VAR 0 3
28386: PUSH
28387: LD_VAR 0 4
28391: PLUS
28392: ST_TO_ADDR
// for _x = min_x to max_x do
28393: LD_ADDR_VAR 0 11
28397: PUSH
28398: DOUBLE
28399: LD_VAR 0 7
28403: DEC
28404: ST_TO_ADDR
28405: LD_VAR 0 9
28409: PUSH
28410: FOR_TO
28411: IFFALSE 28528
// for _y = min_y to max_y do
28413: LD_ADDR_VAR 0 12
28417: PUSH
28418: DOUBLE
28419: LD_VAR 0 8
28423: DEC
28424: ST_TO_ADDR
28425: LD_VAR 0 10
28429: PUSH
28430: FOR_TO
28431: IFFALSE 28524
// begin if not ValidHex ( _x , _y ) then
28433: LD_VAR 0 11
28437: PPUSH
28438: LD_VAR 0 12
28442: PPUSH
28443: CALL_OW 488
28447: NOT
28448: IFFALSE 28452
// continue ;
28450: GO 28430
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28452: LD_VAR 0 11
28456: PPUSH
28457: LD_VAR 0 12
28461: PPUSH
28462: CALL_OW 351
28466: PUSH
28467: LD_VAR 0 11
28471: PPUSH
28472: LD_VAR 0 12
28476: PPUSH
28477: CALL_OW 554
28481: AND
28482: IFFALSE 28522
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28484: LD_ADDR_VAR 0 13
28488: PUSH
28489: LD_VAR 0 13
28493: PPUSH
28494: LD_VAR 0 13
28498: PUSH
28499: LD_INT 1
28501: PLUS
28502: PPUSH
28503: LD_VAR 0 11
28507: PUSH
28508: LD_VAR 0 12
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PPUSH
28517: CALL_OW 2
28521: ST_TO_ADDR
// end ;
28522: GO 28430
28524: POP
28525: POP
28526: GO 28410
28528: POP
28529: POP
// if not list then
28530: LD_VAR 0 13
28534: NOT
28535: IFFALSE 28539
// exit ;
28537: GO 28610
// for i in list do
28539: LD_ADDR_VAR 0 6
28543: PUSH
28544: LD_VAR 0 13
28548: PUSH
28549: FOR_IN
28550: IFFALSE 28608
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28552: LD_VAR 0 1
28556: PPUSH
28557: LD_STRING M
28559: PUSH
28560: LD_VAR 0 6
28564: PUSH
28565: LD_INT 1
28567: ARRAY
28568: PUSH
28569: LD_VAR 0 6
28573: PUSH
28574: LD_INT 2
28576: ARRAY
28577: PUSH
28578: LD_INT 0
28580: PUSH
28581: LD_INT 0
28583: PUSH
28584: LD_INT 0
28586: PUSH
28587: LD_INT 0
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: PUSH
28599: EMPTY
28600: LIST
28601: PPUSH
28602: CALL_OW 447
28606: GO 28549
28608: POP
28609: POP
// end ;
28610: LD_VAR 0 5
28614: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
28615: LD_INT 0
28617: PPUSH
28618: PPUSH
28619: PPUSH
28620: PPUSH
28621: PPUSH
28622: PPUSH
28623: PPUSH
28624: PPUSH
28625: PPUSH
28626: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
28627: LD_VAR 0 1
28631: PPUSH
28632: CALL_OW 302
28636: NOT
28637: PUSH
28638: LD_VAR 0 2
28642: PPUSH
28643: LD_VAR 0 3
28647: PPUSH
28648: CALL_OW 488
28652: NOT
28653: OR
28654: PUSH
28655: LD_VAR 0 4
28659: NOT
28660: OR
28661: IFFALSE 28665
// exit ;
28663: GO 29178
// list := [ ] ;
28665: LD_ADDR_VAR 0 13
28669: PUSH
28670: EMPTY
28671: ST_TO_ADDR
// if x - r < 0 then
28672: LD_VAR 0 2
28676: PUSH
28677: LD_VAR 0 4
28681: MINUS
28682: PUSH
28683: LD_INT 0
28685: LESS
28686: IFFALSE 28698
// min_x := 0 else
28688: LD_ADDR_VAR 0 7
28692: PUSH
28693: LD_INT 0
28695: ST_TO_ADDR
28696: GO 28714
// min_x := x - r ;
28698: LD_ADDR_VAR 0 7
28702: PUSH
28703: LD_VAR 0 2
28707: PUSH
28708: LD_VAR 0 4
28712: MINUS
28713: ST_TO_ADDR
// if y - r < 0 then
28714: LD_VAR 0 3
28718: PUSH
28719: LD_VAR 0 4
28723: MINUS
28724: PUSH
28725: LD_INT 0
28727: LESS
28728: IFFALSE 28740
// min_y := 0 else
28730: LD_ADDR_VAR 0 8
28734: PUSH
28735: LD_INT 0
28737: ST_TO_ADDR
28738: GO 28756
// min_y := y - r ;
28740: LD_ADDR_VAR 0 8
28744: PUSH
28745: LD_VAR 0 3
28749: PUSH
28750: LD_VAR 0 4
28754: MINUS
28755: ST_TO_ADDR
// max_x := x + r ;
28756: LD_ADDR_VAR 0 9
28760: PUSH
28761: LD_VAR 0 2
28765: PUSH
28766: LD_VAR 0 4
28770: PLUS
28771: ST_TO_ADDR
// max_y := y + r ;
28772: LD_ADDR_VAR 0 10
28776: PUSH
28777: LD_VAR 0 3
28781: PUSH
28782: LD_VAR 0 4
28786: PLUS
28787: ST_TO_ADDR
// for _x = min_x to max_x do
28788: LD_ADDR_VAR 0 11
28792: PUSH
28793: DOUBLE
28794: LD_VAR 0 7
28798: DEC
28799: ST_TO_ADDR
28800: LD_VAR 0 9
28804: PUSH
28805: FOR_TO
28806: IFFALSE 28923
// for _y = min_y to max_y do
28808: LD_ADDR_VAR 0 12
28812: PUSH
28813: DOUBLE
28814: LD_VAR 0 8
28818: DEC
28819: ST_TO_ADDR
28820: LD_VAR 0 10
28824: PUSH
28825: FOR_TO
28826: IFFALSE 28919
// begin if not ValidHex ( _x , _y ) then
28828: LD_VAR 0 11
28832: PPUSH
28833: LD_VAR 0 12
28837: PPUSH
28838: CALL_OW 488
28842: NOT
28843: IFFALSE 28847
// continue ;
28845: GO 28825
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28847: LD_VAR 0 11
28851: PPUSH
28852: LD_VAR 0 12
28856: PPUSH
28857: CALL_OW 351
28861: PUSH
28862: LD_VAR 0 11
28866: PPUSH
28867: LD_VAR 0 12
28871: PPUSH
28872: CALL_OW 554
28876: AND
28877: IFFALSE 28917
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28879: LD_ADDR_VAR 0 13
28883: PUSH
28884: LD_VAR 0 13
28888: PPUSH
28889: LD_VAR 0 13
28893: PUSH
28894: LD_INT 1
28896: PLUS
28897: PPUSH
28898: LD_VAR 0 11
28902: PUSH
28903: LD_VAR 0 12
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PPUSH
28912: CALL_OW 2
28916: ST_TO_ADDR
// end ;
28917: GO 28825
28919: POP
28920: POP
28921: GO 28805
28923: POP
28924: POP
// if not list then
28925: LD_VAR 0 13
28929: NOT
28930: IFFALSE 28934
// exit ;
28932: GO 29178
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
28934: LD_ADDR_VAR 0 13
28938: PUSH
28939: LD_VAR 0 1
28943: PPUSH
28944: LD_VAR 0 13
28948: PPUSH
28949: LD_INT 1
28951: PPUSH
28952: LD_INT 1
28954: PPUSH
28955: CALL 37891 0 4
28959: ST_TO_ADDR
// ComStop ( flame ) ;
28960: LD_VAR 0 1
28964: PPUSH
28965: CALL_OW 141
// for i in list do
28969: LD_ADDR_VAR 0 6
28973: PUSH
28974: LD_VAR 0 13
28978: PUSH
28979: FOR_IN
28980: IFFALSE 29011
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
28982: LD_VAR 0 1
28986: PPUSH
28987: LD_VAR 0 6
28991: PUSH
28992: LD_INT 1
28994: ARRAY
28995: PPUSH
28996: LD_VAR 0 6
29000: PUSH
29001: LD_INT 2
29003: ARRAY
29004: PPUSH
29005: CALL_OW 176
29009: GO 28979
29011: POP
29012: POP
// repeat wait ( 0 0$1 ) ;
29013: LD_INT 35
29015: PPUSH
29016: CALL_OW 67
// task := GetTaskList ( flame ) ;
29020: LD_ADDR_VAR 0 14
29024: PUSH
29025: LD_VAR 0 1
29029: PPUSH
29030: CALL_OW 437
29034: ST_TO_ADDR
// if not task then
29035: LD_VAR 0 14
29039: NOT
29040: IFFALSE 29044
// exit ;
29042: GO 29178
// if task [ 1 ] [ 1 ] <> | then
29044: LD_VAR 0 14
29048: PUSH
29049: LD_INT 1
29051: ARRAY
29052: PUSH
29053: LD_INT 1
29055: ARRAY
29056: PUSH
29057: LD_STRING |
29059: NONEQUAL
29060: IFFALSE 29064
// exit ;
29062: GO 29178
// _x := task [ 1 ] [ 2 ] ;
29064: LD_ADDR_VAR 0 11
29068: PUSH
29069: LD_VAR 0 14
29073: PUSH
29074: LD_INT 1
29076: ARRAY
29077: PUSH
29078: LD_INT 2
29080: ARRAY
29081: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
29082: LD_ADDR_VAR 0 12
29086: PUSH
29087: LD_VAR 0 14
29091: PUSH
29092: LD_INT 1
29094: ARRAY
29095: PUSH
29096: LD_INT 3
29098: ARRAY
29099: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
29100: LD_VAR 0 11
29104: PPUSH
29105: LD_VAR 0 12
29109: PPUSH
29110: CALL_OW 351
29114: NOT
29115: PUSH
29116: LD_VAR 0 11
29120: PPUSH
29121: LD_VAR 0 12
29125: PPUSH
29126: CALL_OW 554
29130: NOT
29131: OR
29132: IFFALSE 29166
// begin task := Delete ( task , 1 ) ;
29134: LD_ADDR_VAR 0 14
29138: PUSH
29139: LD_VAR 0 14
29143: PPUSH
29144: LD_INT 1
29146: PPUSH
29147: CALL_OW 3
29151: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
29152: LD_VAR 0 1
29156: PPUSH
29157: LD_VAR 0 14
29161: PPUSH
29162: CALL_OW 446
// end ; until not HasTask ( flame ) ;
29166: LD_VAR 0 1
29170: PPUSH
29171: CALL_OW 314
29175: NOT
29176: IFFALSE 29013
// end ;
29178: LD_VAR 0 5
29182: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29183: LD_EXP 109
29187: NOT
29188: IFFALSE 29238
29190: GO 29192
29192: DISABLE
// begin initHack := true ;
29193: LD_ADDR_EXP 109
29197: PUSH
29198: LD_INT 1
29200: ST_TO_ADDR
// hackTanks := [ ] ;
29201: LD_ADDR_EXP 110
29205: PUSH
29206: EMPTY
29207: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29208: LD_ADDR_EXP 111
29212: PUSH
29213: EMPTY
29214: ST_TO_ADDR
// hackLimit := 3 ;
29215: LD_ADDR_EXP 112
29219: PUSH
29220: LD_INT 3
29222: ST_TO_ADDR
// hackDist := 12 ;
29223: LD_ADDR_EXP 113
29227: PUSH
29228: LD_INT 12
29230: ST_TO_ADDR
// hackCounter := [ ] ;
29231: LD_ADDR_EXP 114
29235: PUSH
29236: EMPTY
29237: ST_TO_ADDR
// end ;
29238: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29239: LD_EXP 109
29243: PUSH
29244: LD_INT 34
29246: PUSH
29247: LD_INT 99
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PPUSH
29254: CALL_OW 69
29258: AND
29259: IFFALSE 29512
29261: GO 29263
29263: DISABLE
29264: LD_INT 0
29266: PPUSH
29267: PPUSH
// begin enable ;
29268: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29269: LD_ADDR_VAR 0 1
29273: PUSH
29274: LD_INT 34
29276: PUSH
29277: LD_INT 99
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PPUSH
29284: CALL_OW 69
29288: PUSH
29289: FOR_IN
29290: IFFALSE 29510
// begin if not i in hackTanks then
29292: LD_VAR 0 1
29296: PUSH
29297: LD_EXP 110
29301: IN
29302: NOT
29303: IFFALSE 29386
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29305: LD_ADDR_EXP 110
29309: PUSH
29310: LD_EXP 110
29314: PPUSH
29315: LD_EXP 110
29319: PUSH
29320: LD_INT 1
29322: PLUS
29323: PPUSH
29324: LD_VAR 0 1
29328: PPUSH
29329: CALL_OW 1
29333: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29334: LD_ADDR_EXP 111
29338: PUSH
29339: LD_EXP 111
29343: PPUSH
29344: LD_EXP 111
29348: PUSH
29349: LD_INT 1
29351: PLUS
29352: PPUSH
29353: EMPTY
29354: PPUSH
29355: CALL_OW 1
29359: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29360: LD_ADDR_EXP 114
29364: PUSH
29365: LD_EXP 114
29369: PPUSH
29370: LD_EXP 114
29374: PUSH
29375: LD_INT 1
29377: PLUS
29378: PPUSH
29379: EMPTY
29380: PPUSH
29381: CALL_OW 1
29385: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29386: LD_VAR 0 1
29390: PPUSH
29391: CALL_OW 302
29395: NOT
29396: IFFALSE 29409
// begin HackUnlinkAll ( i ) ;
29398: LD_VAR 0 1
29402: PPUSH
29403: CALL 29515 0 1
// continue ;
29407: GO 29289
// end ; HackCheckCapturedStatus ( i ) ;
29409: LD_VAR 0 1
29413: PPUSH
29414: CALL 29958 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29418: LD_ADDR_VAR 0 2
29422: PUSH
29423: LD_INT 81
29425: PUSH
29426: LD_VAR 0 1
29430: PPUSH
29431: CALL_OW 255
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 33
29442: PUSH
29443: LD_INT 3
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 91
29452: PUSH
29453: LD_VAR 0 1
29457: PUSH
29458: LD_EXP 113
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 50
29470: PUSH
29471: EMPTY
29472: LIST
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: PPUSH
29480: CALL_OW 69
29484: ST_TO_ADDR
// if not tmp then
29485: LD_VAR 0 2
29489: NOT
29490: IFFALSE 29494
// continue ;
29492: GO 29289
// HackLink ( i , tmp ) ;
29494: LD_VAR 0 1
29498: PPUSH
29499: LD_VAR 0 2
29503: PPUSH
29504: CALL 29651 0 2
// end ;
29508: GO 29289
29510: POP
29511: POP
// end ;
29512: PPOPN 2
29514: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29515: LD_INT 0
29517: PPUSH
29518: PPUSH
29519: PPUSH
// if not hack in hackTanks then
29520: LD_VAR 0 1
29524: PUSH
29525: LD_EXP 110
29529: IN
29530: NOT
29531: IFFALSE 29535
// exit ;
29533: GO 29646
// index := GetElementIndex ( hackTanks , hack ) ;
29535: LD_ADDR_VAR 0 4
29539: PUSH
29540: LD_EXP 110
29544: PPUSH
29545: LD_VAR 0 1
29549: PPUSH
29550: CALL 37188 0 2
29554: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29555: LD_EXP 111
29559: PUSH
29560: LD_VAR 0 4
29564: ARRAY
29565: IFFALSE 29646
// begin for i in hackTanksCaptured [ index ] do
29567: LD_ADDR_VAR 0 3
29571: PUSH
29572: LD_EXP 111
29576: PUSH
29577: LD_VAR 0 4
29581: ARRAY
29582: PUSH
29583: FOR_IN
29584: IFFALSE 29610
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29586: LD_VAR 0 3
29590: PUSH
29591: LD_INT 1
29593: ARRAY
29594: PPUSH
29595: LD_VAR 0 3
29599: PUSH
29600: LD_INT 2
29602: ARRAY
29603: PPUSH
29604: CALL_OW 235
29608: GO 29583
29610: POP
29611: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29612: LD_ADDR_EXP 111
29616: PUSH
29617: LD_EXP 111
29621: PPUSH
29622: LD_VAR 0 4
29626: PPUSH
29627: EMPTY
29628: PPUSH
29629: CALL_OW 1
29633: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29634: LD_VAR 0 1
29638: PPUSH
29639: LD_INT 0
29641: PPUSH
29642: CALL_OW 505
// end ; end ;
29646: LD_VAR 0 2
29650: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29651: LD_INT 0
29653: PPUSH
29654: PPUSH
29655: PPUSH
// if not hack in hackTanks or not vehicles then
29656: LD_VAR 0 1
29660: PUSH
29661: LD_EXP 110
29665: IN
29666: NOT
29667: PUSH
29668: LD_VAR 0 2
29672: NOT
29673: OR
29674: IFFALSE 29678
// exit ;
29676: GO 29953
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29678: LD_ADDR_VAR 0 2
29682: PUSH
29683: LD_VAR 0 1
29687: PPUSH
29688: LD_VAR 0 2
29692: PPUSH
29693: LD_INT 1
29695: PPUSH
29696: LD_INT 1
29698: PPUSH
29699: CALL 37838 0 4
29703: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29704: LD_ADDR_VAR 0 5
29708: PUSH
29709: LD_EXP 110
29713: PPUSH
29714: LD_VAR 0 1
29718: PPUSH
29719: CALL 37188 0 2
29723: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29724: LD_EXP 111
29728: PUSH
29729: LD_VAR 0 5
29733: ARRAY
29734: PUSH
29735: LD_EXP 112
29739: LESS
29740: IFFALSE 29929
// begin for i := 1 to vehicles do
29742: LD_ADDR_VAR 0 4
29746: PUSH
29747: DOUBLE
29748: LD_INT 1
29750: DEC
29751: ST_TO_ADDR
29752: LD_VAR 0 2
29756: PUSH
29757: FOR_TO
29758: IFFALSE 29927
// begin if hackTanksCaptured [ index ] = hackLimit then
29760: LD_EXP 111
29764: PUSH
29765: LD_VAR 0 5
29769: ARRAY
29770: PUSH
29771: LD_EXP 112
29775: EQUAL
29776: IFFALSE 29780
// break ;
29778: GO 29927
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29780: LD_ADDR_EXP 114
29784: PUSH
29785: LD_EXP 114
29789: PPUSH
29790: LD_VAR 0 5
29794: PPUSH
29795: LD_EXP 114
29799: PUSH
29800: LD_VAR 0 5
29804: ARRAY
29805: PUSH
29806: LD_INT 1
29808: PLUS
29809: PPUSH
29810: CALL_OW 1
29814: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29815: LD_ADDR_EXP 111
29819: PUSH
29820: LD_EXP 111
29824: PPUSH
29825: LD_VAR 0 5
29829: PUSH
29830: LD_EXP 111
29834: PUSH
29835: LD_VAR 0 5
29839: ARRAY
29840: PUSH
29841: LD_INT 1
29843: PLUS
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PPUSH
29849: LD_VAR 0 2
29853: PUSH
29854: LD_VAR 0 4
29858: ARRAY
29859: PUSH
29860: LD_VAR 0 2
29864: PUSH
29865: LD_VAR 0 4
29869: ARRAY
29870: PPUSH
29871: CALL_OW 255
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PPUSH
29880: CALL 37403 0 3
29884: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29885: LD_VAR 0 2
29889: PUSH
29890: LD_VAR 0 4
29894: ARRAY
29895: PPUSH
29896: LD_VAR 0 1
29900: PPUSH
29901: CALL_OW 255
29905: PPUSH
29906: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29910: LD_VAR 0 2
29914: PUSH
29915: LD_VAR 0 4
29919: ARRAY
29920: PPUSH
29921: CALL_OW 141
// end ;
29925: GO 29757
29927: POP
29928: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29929: LD_VAR 0 1
29933: PPUSH
29934: LD_EXP 111
29938: PUSH
29939: LD_VAR 0 5
29943: ARRAY
29944: PUSH
29945: LD_INT 0
29947: PLUS
29948: PPUSH
29949: CALL_OW 505
// end ;
29953: LD_VAR 0 3
29957: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29958: LD_INT 0
29960: PPUSH
29961: PPUSH
29962: PPUSH
29963: PPUSH
// if not hack in hackTanks then
29964: LD_VAR 0 1
29968: PUSH
29969: LD_EXP 110
29973: IN
29974: NOT
29975: IFFALSE 29979
// exit ;
29977: GO 30219
// index := GetElementIndex ( hackTanks , hack ) ;
29979: LD_ADDR_VAR 0 4
29983: PUSH
29984: LD_EXP 110
29988: PPUSH
29989: LD_VAR 0 1
29993: PPUSH
29994: CALL 37188 0 2
29998: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29999: LD_ADDR_VAR 0 3
30003: PUSH
30004: DOUBLE
30005: LD_EXP 111
30009: PUSH
30010: LD_VAR 0 4
30014: ARRAY
30015: INC
30016: ST_TO_ADDR
30017: LD_INT 1
30019: PUSH
30020: FOR_DOWNTO
30021: IFFALSE 30193
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30023: LD_ADDR_VAR 0 5
30027: PUSH
30028: LD_EXP 111
30032: PUSH
30033: LD_VAR 0 4
30037: ARRAY
30038: PUSH
30039: LD_VAR 0 3
30043: ARRAY
30044: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30045: LD_VAR 0 5
30049: PUSH
30050: LD_INT 1
30052: ARRAY
30053: PPUSH
30054: CALL_OW 302
30058: NOT
30059: PUSH
30060: LD_VAR 0 5
30064: PUSH
30065: LD_INT 1
30067: ARRAY
30068: PPUSH
30069: CALL_OW 255
30073: PUSH
30074: LD_VAR 0 1
30078: PPUSH
30079: CALL_OW 255
30083: NONEQUAL
30084: OR
30085: IFFALSE 30191
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30087: LD_VAR 0 5
30091: PUSH
30092: LD_INT 1
30094: ARRAY
30095: PPUSH
30096: CALL_OW 305
30100: PUSH
30101: LD_VAR 0 5
30105: PUSH
30106: LD_INT 1
30108: ARRAY
30109: PPUSH
30110: CALL_OW 255
30114: PUSH
30115: LD_VAR 0 1
30119: PPUSH
30120: CALL_OW 255
30124: EQUAL
30125: AND
30126: IFFALSE 30150
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30128: LD_VAR 0 5
30132: PUSH
30133: LD_INT 1
30135: ARRAY
30136: PPUSH
30137: LD_VAR 0 5
30141: PUSH
30142: LD_INT 2
30144: ARRAY
30145: PPUSH
30146: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30150: LD_ADDR_EXP 111
30154: PUSH
30155: LD_EXP 111
30159: PPUSH
30160: LD_VAR 0 4
30164: PPUSH
30165: LD_EXP 111
30169: PUSH
30170: LD_VAR 0 4
30174: ARRAY
30175: PPUSH
30176: LD_VAR 0 3
30180: PPUSH
30181: CALL_OW 3
30185: PPUSH
30186: CALL_OW 1
30190: ST_TO_ADDR
// end ; end ;
30191: GO 30020
30193: POP
30194: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30195: LD_VAR 0 1
30199: PPUSH
30200: LD_EXP 111
30204: PUSH
30205: LD_VAR 0 4
30209: ARRAY
30210: PUSH
30211: LD_INT 0
30213: PLUS
30214: PPUSH
30215: CALL_OW 505
// end ;
30219: LD_VAR 0 2
30223: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30224: LD_INT 0
30226: PPUSH
30227: PPUSH
30228: PPUSH
30229: PPUSH
// if not hack in hackTanks then
30230: LD_VAR 0 1
30234: PUSH
30235: LD_EXP 110
30239: IN
30240: NOT
30241: IFFALSE 30245
// exit ;
30243: GO 30330
// index := GetElementIndex ( hackTanks , hack ) ;
30245: LD_ADDR_VAR 0 5
30249: PUSH
30250: LD_EXP 110
30254: PPUSH
30255: LD_VAR 0 1
30259: PPUSH
30260: CALL 37188 0 2
30264: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30265: LD_ADDR_VAR 0 4
30269: PUSH
30270: DOUBLE
30271: LD_INT 1
30273: DEC
30274: ST_TO_ADDR
30275: LD_EXP 111
30279: PUSH
30280: LD_VAR 0 5
30284: ARRAY
30285: PUSH
30286: FOR_TO
30287: IFFALSE 30328
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30289: LD_EXP 111
30293: PUSH
30294: LD_VAR 0 5
30298: ARRAY
30299: PUSH
30300: LD_VAR 0 4
30304: ARRAY
30305: PUSH
30306: LD_INT 1
30308: ARRAY
30309: PUSH
30310: LD_VAR 0 2
30314: EQUAL
30315: IFFALSE 30326
// KillUnit ( vehicle ) ;
30317: LD_VAR 0 2
30321: PPUSH
30322: CALL_OW 66
30326: GO 30286
30328: POP
30329: POP
// end ;
30330: LD_VAR 0 3
30334: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30335: LD_EXP 115
30339: NOT
30340: IFFALSE 30375
30342: GO 30344
30344: DISABLE
// begin initMiner := true ;
30345: LD_ADDR_EXP 115
30349: PUSH
30350: LD_INT 1
30352: ST_TO_ADDR
// minersList := [ ] ;
30353: LD_ADDR_EXP 116
30357: PUSH
30358: EMPTY
30359: ST_TO_ADDR
// minerMinesList := [ ] ;
30360: LD_ADDR_EXP 117
30364: PUSH
30365: EMPTY
30366: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30367: LD_ADDR_EXP 118
30371: PUSH
30372: LD_INT 5
30374: ST_TO_ADDR
// end ;
30375: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30376: LD_EXP 115
30380: PUSH
30381: LD_INT 34
30383: PUSH
30384: LD_INT 81
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PPUSH
30391: CALL_OW 69
30395: AND
30396: IFFALSE 30857
30398: GO 30400
30400: DISABLE
30401: LD_INT 0
30403: PPUSH
30404: PPUSH
30405: PPUSH
30406: PPUSH
// begin enable ;
30407: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30408: LD_ADDR_VAR 0 1
30412: PUSH
30413: LD_INT 34
30415: PUSH
30416: LD_INT 81
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PPUSH
30423: CALL_OW 69
30427: PUSH
30428: FOR_IN
30429: IFFALSE 30501
// begin if not i in minersList then
30431: LD_VAR 0 1
30435: PUSH
30436: LD_EXP 116
30440: IN
30441: NOT
30442: IFFALSE 30499
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30444: LD_ADDR_EXP 116
30448: PUSH
30449: LD_EXP 116
30453: PPUSH
30454: LD_EXP 116
30458: PUSH
30459: LD_INT 1
30461: PLUS
30462: PPUSH
30463: LD_VAR 0 1
30467: PPUSH
30468: CALL_OW 1
30472: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30473: LD_ADDR_EXP 117
30477: PUSH
30478: LD_EXP 117
30482: PPUSH
30483: LD_EXP 117
30487: PUSH
30488: LD_INT 1
30490: PLUS
30491: PPUSH
30492: EMPTY
30493: PPUSH
30494: CALL_OW 1
30498: ST_TO_ADDR
// end end ;
30499: GO 30428
30501: POP
30502: POP
// for i := minerMinesList downto 1 do
30503: LD_ADDR_VAR 0 1
30507: PUSH
30508: DOUBLE
30509: LD_EXP 117
30513: INC
30514: ST_TO_ADDR
30515: LD_INT 1
30517: PUSH
30518: FOR_DOWNTO
30519: IFFALSE 30855
// begin if IsLive ( minersList [ i ] ) then
30521: LD_EXP 116
30525: PUSH
30526: LD_VAR 0 1
30530: ARRAY
30531: PPUSH
30532: CALL_OW 300
30536: IFFALSE 30564
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30538: LD_EXP 116
30542: PUSH
30543: LD_VAR 0 1
30547: ARRAY
30548: PPUSH
30549: LD_EXP 117
30553: PUSH
30554: LD_VAR 0 1
30558: ARRAY
30559: PPUSH
30560: CALL_OW 505
// if not minerMinesList [ i ] then
30564: LD_EXP 117
30568: PUSH
30569: LD_VAR 0 1
30573: ARRAY
30574: NOT
30575: IFFALSE 30579
// continue ;
30577: GO 30518
// for j := minerMinesList [ i ] downto 1 do
30579: LD_ADDR_VAR 0 2
30583: PUSH
30584: DOUBLE
30585: LD_EXP 117
30589: PUSH
30590: LD_VAR 0 1
30594: ARRAY
30595: INC
30596: ST_TO_ADDR
30597: LD_INT 1
30599: PUSH
30600: FOR_DOWNTO
30601: IFFALSE 30851
// begin side := GetSide ( minersList [ i ] ) ;
30603: LD_ADDR_VAR 0 3
30607: PUSH
30608: LD_EXP 116
30612: PUSH
30613: LD_VAR 0 1
30617: ARRAY
30618: PPUSH
30619: CALL_OW 255
30623: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30624: LD_ADDR_VAR 0 4
30628: PUSH
30629: LD_EXP 117
30633: PUSH
30634: LD_VAR 0 1
30638: ARRAY
30639: PUSH
30640: LD_VAR 0 2
30644: ARRAY
30645: PUSH
30646: LD_INT 1
30648: ARRAY
30649: PPUSH
30650: LD_EXP 117
30654: PUSH
30655: LD_VAR 0 1
30659: ARRAY
30660: PUSH
30661: LD_VAR 0 2
30665: ARRAY
30666: PUSH
30667: LD_INT 2
30669: ARRAY
30670: PPUSH
30671: CALL_OW 428
30675: ST_TO_ADDR
// if not tmp then
30676: LD_VAR 0 4
30680: NOT
30681: IFFALSE 30685
// continue ;
30683: GO 30600
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30685: LD_VAR 0 4
30689: PUSH
30690: LD_INT 81
30692: PUSH
30693: LD_VAR 0 3
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PPUSH
30702: CALL_OW 69
30706: IN
30707: PUSH
30708: LD_EXP 117
30712: PUSH
30713: LD_VAR 0 1
30717: ARRAY
30718: PUSH
30719: LD_VAR 0 2
30723: ARRAY
30724: PUSH
30725: LD_INT 1
30727: ARRAY
30728: PPUSH
30729: LD_EXP 117
30733: PUSH
30734: LD_VAR 0 1
30738: ARRAY
30739: PUSH
30740: LD_VAR 0 2
30744: ARRAY
30745: PUSH
30746: LD_INT 2
30748: ARRAY
30749: PPUSH
30750: CALL_OW 458
30754: AND
30755: IFFALSE 30849
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30757: LD_EXP 117
30761: PUSH
30762: LD_VAR 0 1
30766: ARRAY
30767: PUSH
30768: LD_VAR 0 2
30772: ARRAY
30773: PUSH
30774: LD_INT 1
30776: ARRAY
30777: PPUSH
30778: LD_EXP 117
30782: PUSH
30783: LD_VAR 0 1
30787: ARRAY
30788: PUSH
30789: LD_VAR 0 2
30793: ARRAY
30794: PUSH
30795: LD_INT 2
30797: ARRAY
30798: PPUSH
30799: LD_VAR 0 3
30803: PPUSH
30804: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30808: LD_ADDR_EXP 117
30812: PUSH
30813: LD_EXP 117
30817: PPUSH
30818: LD_VAR 0 1
30822: PPUSH
30823: LD_EXP 117
30827: PUSH
30828: LD_VAR 0 1
30832: ARRAY
30833: PPUSH
30834: LD_VAR 0 2
30838: PPUSH
30839: CALL_OW 3
30843: PPUSH
30844: CALL_OW 1
30848: ST_TO_ADDR
// end ; end ;
30849: GO 30600
30851: POP
30852: POP
// end ;
30853: GO 30518
30855: POP
30856: POP
// end ;
30857: PPOPN 4
30859: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30860: LD_INT 0
30862: PPUSH
30863: PPUSH
// result := false ;
30864: LD_ADDR_VAR 0 4
30868: PUSH
30869: LD_INT 0
30871: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30872: LD_VAR 0 1
30876: PPUSH
30877: CALL_OW 264
30881: PUSH
30882: LD_INT 81
30884: EQUAL
30885: NOT
30886: IFFALSE 30890
// exit ;
30888: GO 31130
// index := GetElementIndex ( minersList , unit ) ;
30890: LD_ADDR_VAR 0 5
30894: PUSH
30895: LD_EXP 116
30899: PPUSH
30900: LD_VAR 0 1
30904: PPUSH
30905: CALL 37188 0 2
30909: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30910: LD_EXP 117
30914: PUSH
30915: LD_VAR 0 5
30919: ARRAY
30920: PUSH
30921: LD_EXP 118
30925: GREATEREQUAL
30926: IFFALSE 30930
// exit ;
30928: GO 31130
// ComMoveXY ( unit , x , y ) ;
30930: LD_VAR 0 1
30934: PPUSH
30935: LD_VAR 0 2
30939: PPUSH
30940: LD_VAR 0 3
30944: PPUSH
30945: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30949: LD_INT 35
30951: PPUSH
30952: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30956: LD_VAR 0 1
30960: PPUSH
30961: LD_VAR 0 2
30965: PPUSH
30966: LD_VAR 0 3
30970: PPUSH
30971: CALL 68949 0 3
30975: NOT
30976: PUSH
30977: LD_VAR 0 1
30981: PPUSH
30982: CALL_OW 314
30986: AND
30987: IFFALSE 30991
// exit ;
30989: GO 31130
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30991: LD_VAR 0 2
30995: PPUSH
30996: LD_VAR 0 3
31000: PPUSH
31001: CALL_OW 428
31005: PUSH
31006: LD_VAR 0 1
31010: EQUAL
31011: PUSH
31012: LD_VAR 0 1
31016: PPUSH
31017: CALL_OW 314
31021: NOT
31022: AND
31023: IFFALSE 30949
// PlaySoundXY ( x , y , PlantMine ) ;
31025: LD_VAR 0 2
31029: PPUSH
31030: LD_VAR 0 3
31034: PPUSH
31035: LD_STRING PlantMine
31037: PPUSH
31038: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31042: LD_VAR 0 2
31046: PPUSH
31047: LD_VAR 0 3
31051: PPUSH
31052: LD_VAR 0 1
31056: PPUSH
31057: CALL_OW 255
31061: PPUSH
31062: LD_INT 0
31064: PPUSH
31065: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31069: LD_ADDR_EXP 117
31073: PUSH
31074: LD_EXP 117
31078: PPUSH
31079: LD_VAR 0 5
31083: PUSH
31084: LD_EXP 117
31088: PUSH
31089: LD_VAR 0 5
31093: ARRAY
31094: PUSH
31095: LD_INT 1
31097: PLUS
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PPUSH
31103: LD_VAR 0 2
31107: PUSH
31108: LD_VAR 0 3
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PPUSH
31117: CALL 37403 0 3
31121: ST_TO_ADDR
// result := true ;
31122: LD_ADDR_VAR 0 4
31126: PUSH
31127: LD_INT 1
31129: ST_TO_ADDR
// end ;
31130: LD_VAR 0 4
31134: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31135: LD_INT 0
31137: PPUSH
31138: PPUSH
31139: PPUSH
// if not unit in minersList then
31140: LD_VAR 0 1
31144: PUSH
31145: LD_EXP 116
31149: IN
31150: NOT
31151: IFFALSE 31155
// exit ;
31153: GO 31547
// index := GetElementIndex ( minersList , unit ) ;
31155: LD_ADDR_VAR 0 6
31159: PUSH
31160: LD_EXP 116
31164: PPUSH
31165: LD_VAR 0 1
31169: PPUSH
31170: CALL 37188 0 2
31174: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31175: LD_ADDR_VAR 0 5
31179: PUSH
31180: DOUBLE
31181: LD_EXP 117
31185: PUSH
31186: LD_VAR 0 6
31190: ARRAY
31191: INC
31192: ST_TO_ADDR
31193: LD_INT 1
31195: PUSH
31196: FOR_DOWNTO
31197: IFFALSE 31358
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31199: LD_EXP 117
31203: PUSH
31204: LD_VAR 0 6
31208: ARRAY
31209: PUSH
31210: LD_VAR 0 5
31214: ARRAY
31215: PUSH
31216: LD_INT 1
31218: ARRAY
31219: PUSH
31220: LD_VAR 0 2
31224: EQUAL
31225: PUSH
31226: LD_EXP 117
31230: PUSH
31231: LD_VAR 0 6
31235: ARRAY
31236: PUSH
31237: LD_VAR 0 5
31241: ARRAY
31242: PUSH
31243: LD_INT 2
31245: ARRAY
31246: PUSH
31247: LD_VAR 0 3
31251: EQUAL
31252: AND
31253: IFFALSE 31356
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31255: LD_EXP 117
31259: PUSH
31260: LD_VAR 0 6
31264: ARRAY
31265: PUSH
31266: LD_VAR 0 5
31270: ARRAY
31271: PUSH
31272: LD_INT 1
31274: ARRAY
31275: PPUSH
31276: LD_EXP 117
31280: PUSH
31281: LD_VAR 0 6
31285: ARRAY
31286: PUSH
31287: LD_VAR 0 5
31291: ARRAY
31292: PUSH
31293: LD_INT 2
31295: ARRAY
31296: PPUSH
31297: LD_VAR 0 1
31301: PPUSH
31302: CALL_OW 255
31306: PPUSH
31307: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31311: LD_ADDR_EXP 117
31315: PUSH
31316: LD_EXP 117
31320: PPUSH
31321: LD_VAR 0 6
31325: PPUSH
31326: LD_EXP 117
31330: PUSH
31331: LD_VAR 0 6
31335: ARRAY
31336: PPUSH
31337: LD_VAR 0 5
31341: PPUSH
31342: CALL_OW 3
31346: PPUSH
31347: CALL_OW 1
31351: ST_TO_ADDR
// exit ;
31352: POP
31353: POP
31354: GO 31547
// end ; end ;
31356: GO 31196
31358: POP
31359: POP
// for i := minerMinesList [ index ] downto 1 do
31360: LD_ADDR_VAR 0 5
31364: PUSH
31365: DOUBLE
31366: LD_EXP 117
31370: PUSH
31371: LD_VAR 0 6
31375: ARRAY
31376: INC
31377: ST_TO_ADDR
31378: LD_INT 1
31380: PUSH
31381: FOR_DOWNTO
31382: IFFALSE 31545
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31384: LD_EXP 117
31388: PUSH
31389: LD_VAR 0 6
31393: ARRAY
31394: PUSH
31395: LD_VAR 0 5
31399: ARRAY
31400: PUSH
31401: LD_INT 1
31403: ARRAY
31404: PPUSH
31405: LD_EXP 117
31409: PUSH
31410: LD_VAR 0 6
31414: ARRAY
31415: PUSH
31416: LD_VAR 0 5
31420: ARRAY
31421: PUSH
31422: LD_INT 2
31424: ARRAY
31425: PPUSH
31426: LD_VAR 0 2
31430: PPUSH
31431: LD_VAR 0 3
31435: PPUSH
31436: CALL_OW 298
31440: PUSH
31441: LD_INT 6
31443: LESS
31444: IFFALSE 31543
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31446: LD_EXP 117
31450: PUSH
31451: LD_VAR 0 6
31455: ARRAY
31456: PUSH
31457: LD_VAR 0 5
31461: ARRAY
31462: PUSH
31463: LD_INT 1
31465: ARRAY
31466: PPUSH
31467: LD_EXP 117
31471: PUSH
31472: LD_VAR 0 6
31476: ARRAY
31477: PUSH
31478: LD_VAR 0 5
31482: ARRAY
31483: PUSH
31484: LD_INT 2
31486: ARRAY
31487: PPUSH
31488: LD_VAR 0 1
31492: PPUSH
31493: CALL_OW 255
31497: PPUSH
31498: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31502: LD_ADDR_EXP 117
31506: PUSH
31507: LD_EXP 117
31511: PPUSH
31512: LD_VAR 0 6
31516: PPUSH
31517: LD_EXP 117
31521: PUSH
31522: LD_VAR 0 6
31526: ARRAY
31527: PPUSH
31528: LD_VAR 0 5
31532: PPUSH
31533: CALL_OW 3
31537: PPUSH
31538: CALL_OW 1
31542: ST_TO_ADDR
// end ; end ;
31543: GO 31381
31545: POP
31546: POP
// end ;
31547: LD_VAR 0 4
31551: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31552: LD_INT 0
31554: PPUSH
31555: PPUSH
31556: PPUSH
31557: PPUSH
31558: PPUSH
31559: PPUSH
31560: PPUSH
31561: PPUSH
31562: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31563: LD_VAR 0 1
31567: PPUSH
31568: CALL_OW 264
31572: PUSH
31573: LD_INT 81
31575: EQUAL
31576: NOT
31577: PUSH
31578: LD_VAR 0 1
31582: PUSH
31583: LD_EXP 116
31587: IN
31588: NOT
31589: OR
31590: IFFALSE 31594
// exit ;
31592: GO 31916
// index := GetElementIndex ( minersList , unit ) ;
31594: LD_ADDR_VAR 0 6
31598: PUSH
31599: LD_EXP 116
31603: PPUSH
31604: LD_VAR 0 1
31608: PPUSH
31609: CALL 37188 0 2
31613: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31614: LD_ADDR_VAR 0 8
31618: PUSH
31619: LD_EXP 118
31623: PUSH
31624: LD_EXP 117
31628: PUSH
31629: LD_VAR 0 6
31633: ARRAY
31634: MINUS
31635: ST_TO_ADDR
// if not minesFreeAmount then
31636: LD_VAR 0 8
31640: NOT
31641: IFFALSE 31645
// exit ;
31643: GO 31916
// tmp := [ ] ;
31645: LD_ADDR_VAR 0 7
31649: PUSH
31650: EMPTY
31651: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31652: LD_ADDR_VAR 0 5
31656: PUSH
31657: DOUBLE
31658: LD_INT 1
31660: DEC
31661: ST_TO_ADDR
31662: LD_VAR 0 8
31666: PUSH
31667: FOR_TO
31668: IFFALSE 31863
// begin _d := rand ( 0 , 5 ) ;
31670: LD_ADDR_VAR 0 11
31674: PUSH
31675: LD_INT 0
31677: PPUSH
31678: LD_INT 5
31680: PPUSH
31681: CALL_OW 12
31685: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31686: LD_ADDR_VAR 0 12
31690: PUSH
31691: LD_INT 2
31693: PPUSH
31694: LD_INT 6
31696: PPUSH
31697: CALL_OW 12
31701: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31702: LD_ADDR_VAR 0 9
31706: PUSH
31707: LD_VAR 0 2
31711: PPUSH
31712: LD_VAR 0 11
31716: PPUSH
31717: LD_VAR 0 12
31721: PPUSH
31722: CALL_OW 272
31726: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31727: LD_ADDR_VAR 0 10
31731: PUSH
31732: LD_VAR 0 3
31736: PPUSH
31737: LD_VAR 0 11
31741: PPUSH
31742: LD_VAR 0 12
31746: PPUSH
31747: CALL_OW 273
31751: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31752: LD_VAR 0 9
31756: PPUSH
31757: LD_VAR 0 10
31761: PPUSH
31762: CALL_OW 488
31766: PUSH
31767: LD_VAR 0 9
31771: PUSH
31772: LD_VAR 0 10
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_VAR 0 7
31785: IN
31786: NOT
31787: AND
31788: PUSH
31789: LD_VAR 0 9
31793: PPUSH
31794: LD_VAR 0 10
31798: PPUSH
31799: CALL_OW 458
31803: NOT
31804: AND
31805: IFFALSE 31847
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31807: LD_ADDR_VAR 0 7
31811: PUSH
31812: LD_VAR 0 7
31816: PPUSH
31817: LD_VAR 0 7
31821: PUSH
31822: LD_INT 1
31824: PLUS
31825: PPUSH
31826: LD_VAR 0 9
31830: PUSH
31831: LD_VAR 0 10
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PPUSH
31840: CALL_OW 1
31844: ST_TO_ADDR
31845: GO 31861
// i := i - 1 ;
31847: LD_ADDR_VAR 0 5
31851: PUSH
31852: LD_VAR 0 5
31856: PUSH
31857: LD_INT 1
31859: MINUS
31860: ST_TO_ADDR
// end ;
31861: GO 31667
31863: POP
31864: POP
// for i in tmp do
31865: LD_ADDR_VAR 0 5
31869: PUSH
31870: LD_VAR 0 7
31874: PUSH
31875: FOR_IN
31876: IFFALSE 31914
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31878: LD_VAR 0 1
31882: PPUSH
31883: LD_VAR 0 5
31887: PUSH
31888: LD_INT 1
31890: ARRAY
31891: PPUSH
31892: LD_VAR 0 5
31896: PUSH
31897: LD_INT 2
31899: ARRAY
31900: PPUSH
31901: CALL 30860 0 3
31905: NOT
31906: IFFALSE 31912
// exit ;
31908: POP
31909: POP
31910: GO 31916
31912: GO 31875
31914: POP
31915: POP
// end ;
31916: LD_VAR 0 4
31920: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
31921: LD_INT 0
31923: PPUSH
31924: PPUSH
31925: PPUSH
31926: PPUSH
31927: PPUSH
31928: PPUSH
31929: PPUSH
31930: PPUSH
31931: PPUSH
// if GetClass ( unit ) <> class_sniper then
31932: LD_VAR 0 1
31936: PPUSH
31937: CALL_OW 257
31941: PUSH
31942: LD_INT 5
31944: NONEQUAL
31945: IFFALSE 31949
// exit ;
31947: GO 32415
// dist := 8 ;
31949: LD_ADDR_VAR 0 5
31953: PUSH
31954: LD_INT 8
31956: ST_TO_ADDR
// viewRange := 12 ;
31957: LD_ADDR_VAR 0 8
31961: PUSH
31962: LD_INT 12
31964: ST_TO_ADDR
// side := GetSide ( unit ) ;
31965: LD_ADDR_VAR 0 6
31969: PUSH
31970: LD_VAR 0 1
31974: PPUSH
31975: CALL_OW 255
31979: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31980: LD_INT 61
31982: PPUSH
31983: LD_VAR 0 6
31987: PPUSH
31988: CALL_OW 321
31992: PUSH
31993: LD_INT 2
31995: EQUAL
31996: IFFALSE 32006
// viewRange := 16 ;
31998: LD_ADDR_VAR 0 8
32002: PUSH
32003: LD_INT 16
32005: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32006: LD_VAR 0 1
32010: PPUSH
32011: LD_VAR 0 2
32015: PPUSH
32016: LD_VAR 0 3
32020: PPUSH
32021: CALL_OW 297
32025: PUSH
32026: LD_VAR 0 5
32030: GREATER
32031: IFFALSE 32110
// begin ComMoveXY ( unit , x , y ) ;
32033: LD_VAR 0 1
32037: PPUSH
32038: LD_VAR 0 2
32042: PPUSH
32043: LD_VAR 0 3
32047: PPUSH
32048: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32052: LD_INT 35
32054: PPUSH
32055: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32059: LD_VAR 0 1
32063: PPUSH
32064: LD_VAR 0 2
32068: PPUSH
32069: LD_VAR 0 3
32073: PPUSH
32074: CALL 68949 0 3
32078: NOT
32079: IFFALSE 32083
// exit ;
32081: GO 32415
// until GetDistUnitXY ( unit , x , y ) < dist ;
32083: LD_VAR 0 1
32087: PPUSH
32088: LD_VAR 0 2
32092: PPUSH
32093: LD_VAR 0 3
32097: PPUSH
32098: CALL_OW 297
32102: PUSH
32103: LD_VAR 0 5
32107: LESS
32108: IFFALSE 32052
// end ; ComTurnXY ( unit , x , y ) ;
32110: LD_VAR 0 1
32114: PPUSH
32115: LD_VAR 0 2
32119: PPUSH
32120: LD_VAR 0 3
32124: PPUSH
32125: CALL_OW 118
// repeat if Multiplayer then
32129: LD_OWVAR 4
32133: IFFALSE 32144
// wait ( 35 ) else
32135: LD_INT 35
32137: PPUSH
32138: CALL_OW 67
32142: GO 32151
// wait ( 5 ) ;
32144: LD_INT 5
32146: PPUSH
32147: CALL_OW 67
// _d := GetDir ( unit ) ;
32151: LD_ADDR_VAR 0 11
32155: PUSH
32156: LD_VAR 0 1
32160: PPUSH
32161: CALL_OW 254
32165: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
32166: LD_ADDR_VAR 0 7
32170: PUSH
32171: LD_VAR 0 1
32175: PPUSH
32176: CALL_OW 250
32180: PPUSH
32181: LD_VAR 0 1
32185: PPUSH
32186: CALL_OW 251
32190: PPUSH
32191: LD_VAR 0 2
32195: PPUSH
32196: LD_VAR 0 3
32200: PPUSH
32201: CALL 71557 0 4
32205: ST_TO_ADDR
// until dir = _d ;
32206: LD_VAR 0 7
32210: PUSH
32211: LD_VAR 0 11
32215: EQUAL
32216: IFFALSE 32129
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
32218: LD_ADDR_VAR 0 9
32222: PUSH
32223: LD_VAR 0 1
32227: PPUSH
32228: CALL_OW 250
32232: PPUSH
32233: LD_VAR 0 7
32237: PPUSH
32238: LD_VAR 0 5
32242: PPUSH
32243: CALL_OW 272
32247: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
32248: LD_ADDR_VAR 0 10
32252: PUSH
32253: LD_VAR 0 1
32257: PPUSH
32258: CALL_OW 251
32262: PPUSH
32263: LD_VAR 0 7
32267: PPUSH
32268: LD_VAR 0 5
32272: PPUSH
32273: CALL_OW 273
32277: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32278: LD_VAR 0 9
32282: PPUSH
32283: LD_VAR 0 10
32287: PPUSH
32288: CALL_OW 488
32292: NOT
32293: IFFALSE 32297
// exit ;
32295: GO 32415
// ComAnimCustom ( unit , 1 ) ;
32297: LD_VAR 0 1
32301: PPUSH
32302: LD_INT 1
32304: PPUSH
32305: CALL_OW 592
// p := 0 ;
32309: LD_ADDR_VAR 0 12
32313: PUSH
32314: LD_INT 0
32316: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32317: LD_VAR 0 9
32321: PPUSH
32322: LD_VAR 0 10
32326: PPUSH
32327: LD_VAR 0 6
32331: PPUSH
32332: LD_VAR 0 8
32336: PPUSH
32337: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
32341: LD_INT 35
32343: PPUSH
32344: CALL_OW 67
// p := Inc ( p ) ;
32348: LD_ADDR_VAR 0 12
32352: PUSH
32353: LD_VAR 0 12
32357: PPUSH
32358: CALL 71513 0 1
32362: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
32363: LD_VAR 0 12
32367: PUSH
32368: LD_INT 3
32370: EQUAL
32371: PUSH
32372: LD_VAR 0 1
32376: PPUSH
32377: CALL_OW 302
32381: NOT
32382: OR
32383: PUSH
32384: LD_VAR 0 1
32388: PPUSH
32389: CALL_OW 301
32393: OR
32394: IFFALSE 32341
// RemoveSeeing ( _x , _y , side ) ;
32396: LD_VAR 0 9
32400: PPUSH
32401: LD_VAR 0 10
32405: PPUSH
32406: LD_VAR 0 6
32410: PPUSH
32411: CALL_OW 331
// end ; end_of_file
32415: LD_VAR 0 4
32419: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32420: LD_INT 0
32422: PPUSH
32423: PPUSH
// if exist_mode then
32424: LD_VAR 0 2
32428: IFFALSE 32474
// begin unit := CreateCharacter ( prefix & ident ) ;
32430: LD_ADDR_VAR 0 5
32434: PUSH
32435: LD_VAR 0 3
32439: PUSH
32440: LD_VAR 0 1
32444: STR
32445: PPUSH
32446: CALL_OW 34
32450: ST_TO_ADDR
// if unit then
32451: LD_VAR 0 5
32455: IFFALSE 32472
// DeleteCharacters ( prefix & ident ) ;
32457: LD_VAR 0 3
32461: PUSH
32462: LD_VAR 0 1
32466: STR
32467: PPUSH
32468: CALL_OW 40
// end else
32472: GO 32489
// unit := NewCharacter ( ident ) ;
32474: LD_ADDR_VAR 0 5
32478: PUSH
32479: LD_VAR 0 1
32483: PPUSH
32484: CALL_OW 25
32488: ST_TO_ADDR
// result := unit ;
32489: LD_ADDR_VAR 0 4
32493: PUSH
32494: LD_VAR 0 5
32498: ST_TO_ADDR
// end ;
32499: LD_VAR 0 4
32503: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32504: LD_INT 0
32506: PPUSH
32507: PPUSH
// if not side or not nation then
32508: LD_VAR 0 1
32512: NOT
32513: PUSH
32514: LD_VAR 0 2
32518: NOT
32519: OR
32520: IFFALSE 32524
// exit ;
32522: GO 33292
// case nation of nation_american :
32524: LD_VAR 0 2
32528: PUSH
32529: LD_INT 1
32531: DOUBLE
32532: EQUAL
32533: IFTRUE 32537
32535: GO 32751
32537: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32538: LD_ADDR_VAR 0 4
32542: PUSH
32543: LD_INT 35
32545: PUSH
32546: LD_INT 45
32548: PUSH
32549: LD_INT 46
32551: PUSH
32552: LD_INT 47
32554: PUSH
32555: LD_INT 82
32557: PUSH
32558: LD_INT 83
32560: PUSH
32561: LD_INT 84
32563: PUSH
32564: LD_INT 85
32566: PUSH
32567: LD_INT 86
32569: PUSH
32570: LD_INT 1
32572: PUSH
32573: LD_INT 2
32575: PUSH
32576: LD_INT 6
32578: PUSH
32579: LD_INT 15
32581: PUSH
32582: LD_INT 16
32584: PUSH
32585: LD_INT 7
32587: PUSH
32588: LD_INT 12
32590: PUSH
32591: LD_INT 13
32593: PUSH
32594: LD_INT 10
32596: PUSH
32597: LD_INT 14
32599: PUSH
32600: LD_INT 20
32602: PUSH
32603: LD_INT 21
32605: PUSH
32606: LD_INT 22
32608: PUSH
32609: LD_INT 25
32611: PUSH
32612: LD_INT 32
32614: PUSH
32615: LD_INT 27
32617: PUSH
32618: LD_INT 36
32620: PUSH
32621: LD_INT 69
32623: PUSH
32624: LD_INT 39
32626: PUSH
32627: LD_INT 34
32629: PUSH
32630: LD_INT 40
32632: PUSH
32633: LD_INT 48
32635: PUSH
32636: LD_INT 49
32638: PUSH
32639: LD_INT 50
32641: PUSH
32642: LD_INT 51
32644: PUSH
32645: LD_INT 52
32647: PUSH
32648: LD_INT 53
32650: PUSH
32651: LD_INT 54
32653: PUSH
32654: LD_INT 55
32656: PUSH
32657: LD_INT 56
32659: PUSH
32660: LD_INT 57
32662: PUSH
32663: LD_INT 58
32665: PUSH
32666: LD_INT 59
32668: PUSH
32669: LD_INT 60
32671: PUSH
32672: LD_INT 61
32674: PUSH
32675: LD_INT 62
32677: PUSH
32678: LD_INT 80
32680: PUSH
32681: LD_INT 82
32683: PUSH
32684: LD_INT 83
32686: PUSH
32687: LD_INT 84
32689: PUSH
32690: LD_INT 85
32692: PUSH
32693: LD_INT 86
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: ST_TO_ADDR
32749: GO 33216
32751: LD_INT 2
32753: DOUBLE
32754: EQUAL
32755: IFTRUE 32759
32757: GO 32985
32759: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32760: LD_ADDR_VAR 0 4
32764: PUSH
32765: LD_INT 35
32767: PUSH
32768: LD_INT 45
32770: PUSH
32771: LD_INT 46
32773: PUSH
32774: LD_INT 47
32776: PUSH
32777: LD_INT 82
32779: PUSH
32780: LD_INT 83
32782: PUSH
32783: LD_INT 84
32785: PUSH
32786: LD_INT 85
32788: PUSH
32789: LD_INT 87
32791: PUSH
32792: LD_INT 70
32794: PUSH
32795: LD_INT 1
32797: PUSH
32798: LD_INT 11
32800: PUSH
32801: LD_INT 3
32803: PUSH
32804: LD_INT 4
32806: PUSH
32807: LD_INT 5
32809: PUSH
32810: LD_INT 6
32812: PUSH
32813: LD_INT 15
32815: PUSH
32816: LD_INT 18
32818: PUSH
32819: LD_INT 7
32821: PUSH
32822: LD_INT 17
32824: PUSH
32825: LD_INT 8
32827: PUSH
32828: LD_INT 20
32830: PUSH
32831: LD_INT 21
32833: PUSH
32834: LD_INT 22
32836: PUSH
32837: LD_INT 72
32839: PUSH
32840: LD_INT 26
32842: PUSH
32843: LD_INT 69
32845: PUSH
32846: LD_INT 39
32848: PUSH
32849: LD_INT 40
32851: PUSH
32852: LD_INT 41
32854: PUSH
32855: LD_INT 42
32857: PUSH
32858: LD_INT 43
32860: PUSH
32861: LD_INT 48
32863: PUSH
32864: LD_INT 49
32866: PUSH
32867: LD_INT 50
32869: PUSH
32870: LD_INT 51
32872: PUSH
32873: LD_INT 52
32875: PUSH
32876: LD_INT 53
32878: PUSH
32879: LD_INT 54
32881: PUSH
32882: LD_INT 55
32884: PUSH
32885: LD_INT 56
32887: PUSH
32888: LD_INT 60
32890: PUSH
32891: LD_INT 61
32893: PUSH
32894: LD_INT 62
32896: PUSH
32897: LD_INT 66
32899: PUSH
32900: LD_INT 67
32902: PUSH
32903: LD_INT 68
32905: PUSH
32906: LD_INT 81
32908: PUSH
32909: LD_INT 82
32911: PUSH
32912: LD_INT 83
32914: PUSH
32915: LD_INT 84
32917: PUSH
32918: LD_INT 85
32920: PUSH
32921: LD_INT 87
32923: PUSH
32924: LD_INT 88
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: ST_TO_ADDR
32983: GO 33216
32985: LD_INT 3
32987: DOUBLE
32988: EQUAL
32989: IFTRUE 32993
32991: GO 33215
32993: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32994: LD_ADDR_VAR 0 4
32998: PUSH
32999: LD_INT 46
33001: PUSH
33002: LD_INT 47
33004: PUSH
33005: LD_INT 1
33007: PUSH
33008: LD_INT 2
33010: PUSH
33011: LD_INT 82
33013: PUSH
33014: LD_INT 83
33016: PUSH
33017: LD_INT 84
33019: PUSH
33020: LD_INT 85
33022: PUSH
33023: LD_INT 86
33025: PUSH
33026: LD_INT 11
33028: PUSH
33029: LD_INT 9
33031: PUSH
33032: LD_INT 20
33034: PUSH
33035: LD_INT 19
33037: PUSH
33038: LD_INT 21
33040: PUSH
33041: LD_INT 24
33043: PUSH
33044: LD_INT 22
33046: PUSH
33047: LD_INT 25
33049: PUSH
33050: LD_INT 28
33052: PUSH
33053: LD_INT 29
33055: PUSH
33056: LD_INT 30
33058: PUSH
33059: LD_INT 31
33061: PUSH
33062: LD_INT 37
33064: PUSH
33065: LD_INT 38
33067: PUSH
33068: LD_INT 32
33070: PUSH
33071: LD_INT 27
33073: PUSH
33074: LD_INT 33
33076: PUSH
33077: LD_INT 69
33079: PUSH
33080: LD_INT 39
33082: PUSH
33083: LD_INT 34
33085: PUSH
33086: LD_INT 40
33088: PUSH
33089: LD_INT 71
33091: PUSH
33092: LD_INT 23
33094: PUSH
33095: LD_INT 44
33097: PUSH
33098: LD_INT 48
33100: PUSH
33101: LD_INT 49
33103: PUSH
33104: LD_INT 50
33106: PUSH
33107: LD_INT 51
33109: PUSH
33110: LD_INT 52
33112: PUSH
33113: LD_INT 53
33115: PUSH
33116: LD_INT 54
33118: PUSH
33119: LD_INT 55
33121: PUSH
33122: LD_INT 56
33124: PUSH
33125: LD_INT 57
33127: PUSH
33128: LD_INT 58
33130: PUSH
33131: LD_INT 59
33133: PUSH
33134: LD_INT 63
33136: PUSH
33137: LD_INT 64
33139: PUSH
33140: LD_INT 65
33142: PUSH
33143: LD_INT 82
33145: PUSH
33146: LD_INT 83
33148: PUSH
33149: LD_INT 84
33151: PUSH
33152: LD_INT 85
33154: PUSH
33155: LD_INT 86
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: ST_TO_ADDR
33213: GO 33216
33215: POP
// if state > - 1 and state < 3 then
33216: LD_VAR 0 3
33220: PUSH
33221: LD_INT 1
33223: NEG
33224: GREATER
33225: PUSH
33226: LD_VAR 0 3
33230: PUSH
33231: LD_INT 3
33233: LESS
33234: AND
33235: IFFALSE 33292
// for i in result do
33237: LD_ADDR_VAR 0 5
33241: PUSH
33242: LD_VAR 0 4
33246: PUSH
33247: FOR_IN
33248: IFFALSE 33290
// if GetTech ( i , side ) <> state then
33250: LD_VAR 0 5
33254: PPUSH
33255: LD_VAR 0 1
33259: PPUSH
33260: CALL_OW 321
33264: PUSH
33265: LD_VAR 0 3
33269: NONEQUAL
33270: IFFALSE 33288
// result := result diff i ;
33272: LD_ADDR_VAR 0 4
33276: PUSH
33277: LD_VAR 0 4
33281: PUSH
33282: LD_VAR 0 5
33286: DIFF
33287: ST_TO_ADDR
33288: GO 33247
33290: POP
33291: POP
// end ;
33292: LD_VAR 0 4
33296: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33297: LD_INT 0
33299: PPUSH
33300: PPUSH
33301: PPUSH
// result := true ;
33302: LD_ADDR_VAR 0 3
33306: PUSH
33307: LD_INT 1
33309: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33310: LD_ADDR_VAR 0 5
33314: PUSH
33315: LD_VAR 0 2
33319: PPUSH
33320: CALL_OW 480
33324: ST_TO_ADDR
// if not tmp then
33325: LD_VAR 0 5
33329: NOT
33330: IFFALSE 33334
// exit ;
33332: GO 33383
// for i in tmp do
33334: LD_ADDR_VAR 0 4
33338: PUSH
33339: LD_VAR 0 5
33343: PUSH
33344: FOR_IN
33345: IFFALSE 33381
// if GetTech ( i , side ) <> state_researched then
33347: LD_VAR 0 4
33351: PPUSH
33352: LD_VAR 0 1
33356: PPUSH
33357: CALL_OW 321
33361: PUSH
33362: LD_INT 2
33364: NONEQUAL
33365: IFFALSE 33379
// begin result := false ;
33367: LD_ADDR_VAR 0 3
33371: PUSH
33372: LD_INT 0
33374: ST_TO_ADDR
// exit ;
33375: POP
33376: POP
33377: GO 33383
// end ;
33379: GO 33344
33381: POP
33382: POP
// end ;
33383: LD_VAR 0 3
33387: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33388: LD_INT 0
33390: PPUSH
33391: PPUSH
33392: PPUSH
33393: PPUSH
33394: PPUSH
33395: PPUSH
33396: PPUSH
33397: PPUSH
33398: PPUSH
33399: PPUSH
33400: PPUSH
33401: PPUSH
33402: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33403: LD_VAR 0 1
33407: NOT
33408: PUSH
33409: LD_VAR 0 1
33413: PPUSH
33414: CALL_OW 257
33418: PUSH
33419: LD_INT 9
33421: NONEQUAL
33422: OR
33423: IFFALSE 33427
// exit ;
33425: GO 34000
// side := GetSide ( unit ) ;
33427: LD_ADDR_VAR 0 9
33431: PUSH
33432: LD_VAR 0 1
33436: PPUSH
33437: CALL_OW 255
33441: ST_TO_ADDR
// tech_space := tech_spacanom ;
33442: LD_ADDR_VAR 0 12
33446: PUSH
33447: LD_INT 29
33449: ST_TO_ADDR
// tech_time := tech_taurad ;
33450: LD_ADDR_VAR 0 13
33454: PUSH
33455: LD_INT 28
33457: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33458: LD_ADDR_VAR 0 11
33462: PUSH
33463: LD_VAR 0 1
33467: PPUSH
33468: CALL_OW 310
33472: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33473: LD_VAR 0 11
33477: PPUSH
33478: CALL_OW 247
33482: PUSH
33483: LD_INT 2
33485: EQUAL
33486: IFFALSE 33490
// exit ;
33488: GO 34000
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33490: LD_ADDR_VAR 0 8
33494: PUSH
33495: LD_INT 81
33497: PUSH
33498: LD_VAR 0 9
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 3
33509: PUSH
33510: LD_INT 21
33512: PUSH
33513: LD_INT 3
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PPUSH
33528: CALL_OW 69
33532: ST_TO_ADDR
// if not tmp then
33533: LD_VAR 0 8
33537: NOT
33538: IFFALSE 33542
// exit ;
33540: GO 34000
// if in_unit then
33542: LD_VAR 0 11
33546: IFFALSE 33570
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33548: LD_ADDR_VAR 0 10
33552: PUSH
33553: LD_VAR 0 8
33557: PPUSH
33558: LD_VAR 0 11
33562: PPUSH
33563: CALL_OW 74
33567: ST_TO_ADDR
33568: GO 33590
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33570: LD_ADDR_VAR 0 10
33574: PUSH
33575: LD_VAR 0 8
33579: PPUSH
33580: LD_VAR 0 1
33584: PPUSH
33585: CALL_OW 74
33589: ST_TO_ADDR
// if not enemy then
33590: LD_VAR 0 10
33594: NOT
33595: IFFALSE 33599
// exit ;
33597: GO 34000
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33599: LD_VAR 0 11
33603: PUSH
33604: LD_VAR 0 11
33608: PPUSH
33609: LD_VAR 0 10
33613: PPUSH
33614: CALL_OW 296
33618: PUSH
33619: LD_INT 13
33621: GREATER
33622: AND
33623: PUSH
33624: LD_VAR 0 1
33628: PPUSH
33629: LD_VAR 0 10
33633: PPUSH
33634: CALL_OW 296
33638: PUSH
33639: LD_INT 12
33641: GREATER
33642: OR
33643: IFFALSE 33647
// exit ;
33645: GO 34000
// missile := [ 1 ] ;
33647: LD_ADDR_VAR 0 14
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: EMPTY
33656: LIST
33657: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33658: LD_VAR 0 9
33662: PPUSH
33663: LD_VAR 0 12
33667: PPUSH
33668: CALL_OW 325
33672: IFFALSE 33701
// missile := Replace ( missile , missile + 1 , 2 ) ;
33674: LD_ADDR_VAR 0 14
33678: PUSH
33679: LD_VAR 0 14
33683: PPUSH
33684: LD_VAR 0 14
33688: PUSH
33689: LD_INT 1
33691: PLUS
33692: PPUSH
33693: LD_INT 2
33695: PPUSH
33696: CALL_OW 1
33700: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33701: LD_VAR 0 9
33705: PPUSH
33706: LD_VAR 0 13
33710: PPUSH
33711: CALL_OW 325
33715: PUSH
33716: LD_VAR 0 10
33720: PPUSH
33721: CALL_OW 255
33725: PPUSH
33726: LD_VAR 0 13
33730: PPUSH
33731: CALL_OW 325
33735: NOT
33736: AND
33737: IFFALSE 33766
// missile := Replace ( missile , missile + 1 , 3 ) ;
33739: LD_ADDR_VAR 0 14
33743: PUSH
33744: LD_VAR 0 14
33748: PPUSH
33749: LD_VAR 0 14
33753: PUSH
33754: LD_INT 1
33756: PLUS
33757: PPUSH
33758: LD_INT 3
33760: PPUSH
33761: CALL_OW 1
33765: ST_TO_ADDR
// if missile < 2 then
33766: LD_VAR 0 14
33770: PUSH
33771: LD_INT 2
33773: LESS
33774: IFFALSE 33778
// exit ;
33776: GO 34000
// x := GetX ( enemy ) ;
33778: LD_ADDR_VAR 0 4
33782: PUSH
33783: LD_VAR 0 10
33787: PPUSH
33788: CALL_OW 250
33792: ST_TO_ADDR
// y := GetY ( enemy ) ;
33793: LD_ADDR_VAR 0 5
33797: PUSH
33798: LD_VAR 0 10
33802: PPUSH
33803: CALL_OW 251
33807: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33808: LD_ADDR_VAR 0 6
33812: PUSH
33813: LD_VAR 0 4
33817: PUSH
33818: LD_INT 1
33820: NEG
33821: PPUSH
33822: LD_INT 1
33824: PPUSH
33825: CALL_OW 12
33829: PLUS
33830: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33831: LD_ADDR_VAR 0 7
33835: PUSH
33836: LD_VAR 0 5
33840: PUSH
33841: LD_INT 1
33843: NEG
33844: PPUSH
33845: LD_INT 1
33847: PPUSH
33848: CALL_OW 12
33852: PLUS
33853: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33854: LD_VAR 0 6
33858: PPUSH
33859: LD_VAR 0 7
33863: PPUSH
33864: CALL_OW 488
33868: NOT
33869: IFFALSE 33891
// begin _x := x ;
33871: LD_ADDR_VAR 0 6
33875: PUSH
33876: LD_VAR 0 4
33880: ST_TO_ADDR
// _y := y ;
33881: LD_ADDR_VAR 0 7
33885: PUSH
33886: LD_VAR 0 5
33890: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33891: LD_ADDR_VAR 0 3
33895: PUSH
33896: LD_INT 1
33898: PPUSH
33899: LD_VAR 0 14
33903: PPUSH
33904: CALL_OW 12
33908: ST_TO_ADDR
// case i of 1 :
33909: LD_VAR 0 3
33913: PUSH
33914: LD_INT 1
33916: DOUBLE
33917: EQUAL
33918: IFTRUE 33922
33920: GO 33939
33922: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33923: LD_VAR 0 1
33927: PPUSH
33928: LD_VAR 0 10
33932: PPUSH
33933: CALL_OW 115
33937: GO 34000
33939: LD_INT 2
33941: DOUBLE
33942: EQUAL
33943: IFTRUE 33947
33945: GO 33969
33947: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33948: LD_VAR 0 1
33952: PPUSH
33953: LD_VAR 0 6
33957: PPUSH
33958: LD_VAR 0 7
33962: PPUSH
33963: CALL_OW 153
33967: GO 34000
33969: LD_INT 3
33971: DOUBLE
33972: EQUAL
33973: IFTRUE 33977
33975: GO 33999
33977: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33978: LD_VAR 0 1
33982: PPUSH
33983: LD_VAR 0 6
33987: PPUSH
33988: LD_VAR 0 7
33992: PPUSH
33993: CALL_OW 154
33997: GO 34000
33999: POP
// end ;
34000: LD_VAR 0 2
34004: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34005: LD_INT 0
34007: PPUSH
34008: PPUSH
34009: PPUSH
34010: PPUSH
34011: PPUSH
34012: PPUSH
// if not unit or not building then
34013: LD_VAR 0 1
34017: NOT
34018: PUSH
34019: LD_VAR 0 2
34023: NOT
34024: OR
34025: IFFALSE 34029
// exit ;
34027: GO 34187
// x := GetX ( building ) ;
34029: LD_ADDR_VAR 0 5
34033: PUSH
34034: LD_VAR 0 2
34038: PPUSH
34039: CALL_OW 250
34043: ST_TO_ADDR
// y := GetY ( building ) ;
34044: LD_ADDR_VAR 0 6
34048: PUSH
34049: LD_VAR 0 2
34053: PPUSH
34054: CALL_OW 251
34058: ST_TO_ADDR
// for i = 0 to 5 do
34059: LD_ADDR_VAR 0 4
34063: PUSH
34064: DOUBLE
34065: LD_INT 0
34067: DEC
34068: ST_TO_ADDR
34069: LD_INT 5
34071: PUSH
34072: FOR_TO
34073: IFFALSE 34185
// begin _x := ShiftX ( x , i , 3 ) ;
34075: LD_ADDR_VAR 0 7
34079: PUSH
34080: LD_VAR 0 5
34084: PPUSH
34085: LD_VAR 0 4
34089: PPUSH
34090: LD_INT 3
34092: PPUSH
34093: CALL_OW 272
34097: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34098: LD_ADDR_VAR 0 8
34102: PUSH
34103: LD_VAR 0 6
34107: PPUSH
34108: LD_VAR 0 4
34112: PPUSH
34113: LD_INT 3
34115: PPUSH
34116: CALL_OW 273
34120: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34121: LD_VAR 0 7
34125: PPUSH
34126: LD_VAR 0 8
34130: PPUSH
34131: CALL_OW 488
34135: NOT
34136: IFFALSE 34140
// continue ;
34138: GO 34072
// if HexInfo ( _x , _y ) = 0 then
34140: LD_VAR 0 7
34144: PPUSH
34145: LD_VAR 0 8
34149: PPUSH
34150: CALL_OW 428
34154: PUSH
34155: LD_INT 0
34157: EQUAL
34158: IFFALSE 34183
// begin ComMoveXY ( unit , _x , _y ) ;
34160: LD_VAR 0 1
34164: PPUSH
34165: LD_VAR 0 7
34169: PPUSH
34170: LD_VAR 0 8
34174: PPUSH
34175: CALL_OW 111
// exit ;
34179: POP
34180: POP
34181: GO 34187
// end ; end ;
34183: GO 34072
34185: POP
34186: POP
// end ;
34187: LD_VAR 0 3
34191: RET
// export function ScanBase ( side , base_area ) ; begin
34192: LD_INT 0
34194: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34195: LD_ADDR_VAR 0 3
34199: PUSH
34200: LD_VAR 0 2
34204: PPUSH
34205: LD_INT 81
34207: PUSH
34208: LD_VAR 0 1
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PPUSH
34217: CALL_OW 70
34221: ST_TO_ADDR
// end ;
34222: LD_VAR 0 3
34226: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34227: LD_INT 0
34229: PPUSH
34230: PPUSH
34231: PPUSH
34232: PPUSH
// result := false ;
34233: LD_ADDR_VAR 0 2
34237: PUSH
34238: LD_INT 0
34240: ST_TO_ADDR
// side := GetSide ( unit ) ;
34241: LD_ADDR_VAR 0 3
34245: PUSH
34246: LD_VAR 0 1
34250: PPUSH
34251: CALL_OW 255
34255: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34256: LD_ADDR_VAR 0 4
34260: PUSH
34261: LD_VAR 0 1
34265: PPUSH
34266: CALL_OW 248
34270: ST_TO_ADDR
// case nat of 1 :
34271: LD_VAR 0 4
34275: PUSH
34276: LD_INT 1
34278: DOUBLE
34279: EQUAL
34280: IFTRUE 34284
34282: GO 34295
34284: POP
// tech := tech_lassight ; 2 :
34285: LD_ADDR_VAR 0 5
34289: PUSH
34290: LD_INT 12
34292: ST_TO_ADDR
34293: GO 34334
34295: LD_INT 2
34297: DOUBLE
34298: EQUAL
34299: IFTRUE 34303
34301: GO 34314
34303: POP
// tech := tech_mortar ; 3 :
34304: LD_ADDR_VAR 0 5
34308: PUSH
34309: LD_INT 41
34311: ST_TO_ADDR
34312: GO 34334
34314: LD_INT 3
34316: DOUBLE
34317: EQUAL
34318: IFTRUE 34322
34320: GO 34333
34322: POP
// tech := tech_bazooka ; end ;
34323: LD_ADDR_VAR 0 5
34327: PUSH
34328: LD_INT 44
34330: ST_TO_ADDR
34331: GO 34334
34333: POP
// if Researched ( side , tech ) then
34334: LD_VAR 0 3
34338: PPUSH
34339: LD_VAR 0 5
34343: PPUSH
34344: CALL_OW 325
34348: IFFALSE 34375
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34350: LD_ADDR_VAR 0 2
34354: PUSH
34355: LD_INT 5
34357: PUSH
34358: LD_INT 8
34360: PUSH
34361: LD_INT 9
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: LIST
34368: PUSH
34369: LD_VAR 0 4
34373: ARRAY
34374: ST_TO_ADDR
// end ;
34375: LD_VAR 0 2
34379: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34380: LD_INT 0
34382: PPUSH
34383: PPUSH
34384: PPUSH
// if not mines then
34385: LD_VAR 0 2
34389: NOT
34390: IFFALSE 34394
// exit ;
34392: GO 34538
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34394: LD_ADDR_VAR 0 5
34398: PUSH
34399: LD_INT 81
34401: PUSH
34402: LD_VAR 0 1
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 3
34413: PUSH
34414: LD_INT 21
34416: PUSH
34417: LD_INT 3
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PPUSH
34432: CALL_OW 69
34436: ST_TO_ADDR
// for i in mines do
34437: LD_ADDR_VAR 0 4
34441: PUSH
34442: LD_VAR 0 2
34446: PUSH
34447: FOR_IN
34448: IFFALSE 34536
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34450: LD_VAR 0 4
34454: PUSH
34455: LD_INT 1
34457: ARRAY
34458: PPUSH
34459: LD_VAR 0 4
34463: PUSH
34464: LD_INT 2
34466: ARRAY
34467: PPUSH
34468: CALL_OW 458
34472: NOT
34473: IFFALSE 34477
// continue ;
34475: GO 34447
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34477: LD_VAR 0 4
34481: PUSH
34482: LD_INT 1
34484: ARRAY
34485: PPUSH
34486: LD_VAR 0 4
34490: PUSH
34491: LD_INT 2
34493: ARRAY
34494: PPUSH
34495: CALL_OW 428
34499: PUSH
34500: LD_VAR 0 5
34504: IN
34505: IFFALSE 34534
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34507: LD_VAR 0 4
34511: PUSH
34512: LD_INT 1
34514: ARRAY
34515: PPUSH
34516: LD_VAR 0 4
34520: PUSH
34521: LD_INT 2
34523: ARRAY
34524: PPUSH
34525: LD_VAR 0 1
34529: PPUSH
34530: CALL_OW 456
// end ;
34534: GO 34447
34536: POP
34537: POP
// end ;
34538: LD_VAR 0 3
34542: RET
// export function Count ( array ) ; begin
34543: LD_INT 0
34545: PPUSH
// result := array + 0 ;
34546: LD_ADDR_VAR 0 2
34550: PUSH
34551: LD_VAR 0 1
34555: PUSH
34556: LD_INT 0
34558: PLUS
34559: ST_TO_ADDR
// end ;
34560: LD_VAR 0 2
34564: RET
// export function IsEmpty ( building ) ; begin
34565: LD_INT 0
34567: PPUSH
// if not building then
34568: LD_VAR 0 1
34572: NOT
34573: IFFALSE 34577
// exit ;
34575: GO 34620
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34577: LD_ADDR_VAR 0 2
34581: PUSH
34582: LD_VAR 0 1
34586: PUSH
34587: LD_INT 22
34589: PUSH
34590: LD_VAR 0 1
34594: PPUSH
34595: CALL_OW 255
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 58
34606: PUSH
34607: EMPTY
34608: LIST
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PPUSH
34614: CALL_OW 69
34618: IN
34619: ST_TO_ADDR
// end ;
34620: LD_VAR 0 2
34624: RET
// export function IsNotFull ( building ) ; var places ; begin
34625: LD_INT 0
34627: PPUSH
34628: PPUSH
// if not building then
34629: LD_VAR 0 1
34633: NOT
34634: IFFALSE 34638
// exit ;
34636: GO 34666
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
34638: LD_ADDR_VAR 0 2
34642: PUSH
34643: LD_VAR 0 1
34647: PPUSH
34648: LD_INT 3
34650: PUSH
34651: LD_INT 62
34653: PUSH
34654: EMPTY
34655: LIST
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PPUSH
34661: CALL_OW 72
34665: ST_TO_ADDR
// end ;
34666: LD_VAR 0 2
34670: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34671: LD_INT 0
34673: PPUSH
34674: PPUSH
34675: PPUSH
34676: PPUSH
// tmp := [ ] ;
34677: LD_ADDR_VAR 0 3
34681: PUSH
34682: EMPTY
34683: ST_TO_ADDR
// list := [ ] ;
34684: LD_ADDR_VAR 0 5
34688: PUSH
34689: EMPTY
34690: ST_TO_ADDR
// for i = 16 to 25 do
34691: LD_ADDR_VAR 0 4
34695: PUSH
34696: DOUBLE
34697: LD_INT 16
34699: DEC
34700: ST_TO_ADDR
34701: LD_INT 25
34703: PUSH
34704: FOR_TO
34705: IFFALSE 34778
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34707: LD_ADDR_VAR 0 3
34711: PUSH
34712: LD_VAR 0 3
34716: PUSH
34717: LD_INT 22
34719: PUSH
34720: LD_VAR 0 1
34724: PPUSH
34725: CALL_OW 255
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 91
34736: PUSH
34737: LD_VAR 0 1
34741: PUSH
34742: LD_INT 6
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 30
34752: PUSH
34753: LD_VAR 0 4
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: LIST
34766: PUSH
34767: EMPTY
34768: LIST
34769: PPUSH
34770: CALL_OW 69
34774: ADD
34775: ST_TO_ADDR
34776: GO 34704
34778: POP
34779: POP
// for i = 1 to tmp do
34780: LD_ADDR_VAR 0 4
34784: PUSH
34785: DOUBLE
34786: LD_INT 1
34788: DEC
34789: ST_TO_ADDR
34790: LD_VAR 0 3
34794: PUSH
34795: FOR_TO
34796: IFFALSE 34884
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34798: LD_ADDR_VAR 0 5
34802: PUSH
34803: LD_VAR 0 5
34807: PUSH
34808: LD_VAR 0 3
34812: PUSH
34813: LD_VAR 0 4
34817: ARRAY
34818: PPUSH
34819: CALL_OW 266
34823: PUSH
34824: LD_VAR 0 3
34828: PUSH
34829: LD_VAR 0 4
34833: ARRAY
34834: PPUSH
34835: CALL_OW 250
34839: PUSH
34840: LD_VAR 0 3
34844: PUSH
34845: LD_VAR 0 4
34849: ARRAY
34850: PPUSH
34851: CALL_OW 251
34855: PUSH
34856: LD_VAR 0 3
34860: PUSH
34861: LD_VAR 0 4
34865: ARRAY
34866: PPUSH
34867: CALL_OW 254
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: PUSH
34878: EMPTY
34879: LIST
34880: ADD
34881: ST_TO_ADDR
34882: GO 34795
34884: POP
34885: POP
// result := list ;
34886: LD_ADDR_VAR 0 2
34890: PUSH
34891: LD_VAR 0 5
34895: ST_TO_ADDR
// end ;
34896: LD_VAR 0 2
34900: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34901: LD_INT 0
34903: PPUSH
34904: PPUSH
34905: PPUSH
34906: PPUSH
34907: PPUSH
34908: PPUSH
34909: PPUSH
// if not factory then
34910: LD_VAR 0 1
34914: NOT
34915: IFFALSE 34919
// exit ;
34917: GO 35512
// if control = control_apeman then
34919: LD_VAR 0 4
34923: PUSH
34924: LD_INT 5
34926: EQUAL
34927: IFFALSE 35036
// begin tmp := UnitsInside ( factory ) ;
34929: LD_ADDR_VAR 0 8
34933: PUSH
34934: LD_VAR 0 1
34938: PPUSH
34939: CALL_OW 313
34943: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34944: LD_VAR 0 8
34948: PPUSH
34949: LD_INT 25
34951: PUSH
34952: LD_INT 12
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PPUSH
34959: CALL_OW 72
34963: NOT
34964: IFFALSE 34974
// control := control_manual ;
34966: LD_ADDR_VAR 0 4
34970: PUSH
34971: LD_INT 1
34973: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34974: LD_ADDR_VAR 0 8
34978: PUSH
34979: LD_VAR 0 1
34983: PPUSH
34984: CALL 34671 0 1
34988: ST_TO_ADDR
// if tmp then
34989: LD_VAR 0 8
34993: IFFALSE 35036
// begin for i in tmp do
34995: LD_ADDR_VAR 0 7
34999: PUSH
35000: LD_VAR 0 8
35004: PUSH
35005: FOR_IN
35006: IFFALSE 35034
// if i [ 1 ] = b_ext_radio then
35008: LD_VAR 0 7
35012: PUSH
35013: LD_INT 1
35015: ARRAY
35016: PUSH
35017: LD_INT 22
35019: EQUAL
35020: IFFALSE 35032
// begin control := control_remote ;
35022: LD_ADDR_VAR 0 4
35026: PUSH
35027: LD_INT 2
35029: ST_TO_ADDR
// break ;
35030: GO 35034
// end ;
35032: GO 35005
35034: POP
35035: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35036: LD_VAR 0 1
35040: PPUSH
35041: LD_VAR 0 2
35045: PPUSH
35046: LD_VAR 0 3
35050: PPUSH
35051: LD_VAR 0 4
35055: PPUSH
35056: LD_VAR 0 5
35060: PPUSH
35061: CALL_OW 448
35065: IFFALSE 35100
// begin result := [ chassis , engine , control , weapon ] ;
35067: LD_ADDR_VAR 0 6
35071: PUSH
35072: LD_VAR 0 2
35076: PUSH
35077: LD_VAR 0 3
35081: PUSH
35082: LD_VAR 0 4
35086: PUSH
35087: LD_VAR 0 5
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: ST_TO_ADDR
// exit ;
35098: GO 35512
// end ; _chassis := AvailableChassisList ( factory ) ;
35100: LD_ADDR_VAR 0 9
35104: PUSH
35105: LD_VAR 0 1
35109: PPUSH
35110: CALL_OW 475
35114: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35115: LD_ADDR_VAR 0 11
35119: PUSH
35120: LD_VAR 0 1
35124: PPUSH
35125: CALL_OW 476
35129: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35130: LD_ADDR_VAR 0 12
35134: PUSH
35135: LD_VAR 0 1
35139: PPUSH
35140: CALL_OW 477
35144: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35145: LD_ADDR_VAR 0 10
35149: PUSH
35150: LD_VAR 0 1
35154: PPUSH
35155: CALL_OW 478
35159: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35160: LD_VAR 0 9
35164: NOT
35165: PUSH
35166: LD_VAR 0 11
35170: NOT
35171: OR
35172: PUSH
35173: LD_VAR 0 12
35177: NOT
35178: OR
35179: PUSH
35180: LD_VAR 0 10
35184: NOT
35185: OR
35186: IFFALSE 35221
// begin result := [ chassis , engine , control , weapon ] ;
35188: LD_ADDR_VAR 0 6
35192: PUSH
35193: LD_VAR 0 2
35197: PUSH
35198: LD_VAR 0 3
35202: PUSH
35203: LD_VAR 0 4
35207: PUSH
35208: LD_VAR 0 5
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: ST_TO_ADDR
// exit ;
35219: GO 35512
// end ; if not chassis in _chassis then
35221: LD_VAR 0 2
35225: PUSH
35226: LD_VAR 0 9
35230: IN
35231: NOT
35232: IFFALSE 35258
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35234: LD_ADDR_VAR 0 2
35238: PUSH
35239: LD_VAR 0 9
35243: PUSH
35244: LD_INT 1
35246: PPUSH
35247: LD_VAR 0 9
35251: PPUSH
35252: CALL_OW 12
35256: ARRAY
35257: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35258: LD_VAR 0 2
35262: PPUSH
35263: LD_VAR 0 3
35267: PPUSH
35268: CALL 35517 0 2
35272: NOT
35273: IFFALSE 35332
// repeat engine := _engine [ 1 ] ;
35275: LD_ADDR_VAR 0 3
35279: PUSH
35280: LD_VAR 0 11
35284: PUSH
35285: LD_INT 1
35287: ARRAY
35288: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35289: LD_ADDR_VAR 0 11
35293: PUSH
35294: LD_VAR 0 11
35298: PPUSH
35299: LD_INT 1
35301: PPUSH
35302: CALL_OW 3
35306: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35307: LD_VAR 0 2
35311: PPUSH
35312: LD_VAR 0 3
35316: PPUSH
35317: CALL 35517 0 2
35321: PUSH
35322: LD_VAR 0 11
35326: PUSH
35327: EMPTY
35328: EQUAL
35329: OR
35330: IFFALSE 35275
// if not control in _control then
35332: LD_VAR 0 4
35336: PUSH
35337: LD_VAR 0 12
35341: IN
35342: NOT
35343: IFFALSE 35369
// control := _control [ rand ( 1 , _control ) ] ;
35345: LD_ADDR_VAR 0 4
35349: PUSH
35350: LD_VAR 0 12
35354: PUSH
35355: LD_INT 1
35357: PPUSH
35358: LD_VAR 0 12
35362: PPUSH
35363: CALL_OW 12
35367: ARRAY
35368: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35369: LD_VAR 0 2
35373: PPUSH
35374: LD_VAR 0 5
35378: PPUSH
35379: CALL 35737 0 2
35383: NOT
35384: IFFALSE 35443
// repeat weapon := _weapon [ 1 ] ;
35386: LD_ADDR_VAR 0 5
35390: PUSH
35391: LD_VAR 0 10
35395: PUSH
35396: LD_INT 1
35398: ARRAY
35399: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35400: LD_ADDR_VAR 0 10
35404: PUSH
35405: LD_VAR 0 10
35409: PPUSH
35410: LD_INT 1
35412: PPUSH
35413: CALL_OW 3
35417: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35418: LD_VAR 0 2
35422: PPUSH
35423: LD_VAR 0 5
35427: PPUSH
35428: CALL 35737 0 2
35432: PUSH
35433: LD_VAR 0 10
35437: PUSH
35438: EMPTY
35439: EQUAL
35440: OR
35441: IFFALSE 35386
// result := [ ] ;
35443: LD_ADDR_VAR 0 6
35447: PUSH
35448: EMPTY
35449: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35450: LD_VAR 0 1
35454: PPUSH
35455: LD_VAR 0 2
35459: PPUSH
35460: LD_VAR 0 3
35464: PPUSH
35465: LD_VAR 0 4
35469: PPUSH
35470: LD_VAR 0 5
35474: PPUSH
35475: CALL_OW 448
35479: IFFALSE 35512
// result := [ chassis , engine , control , weapon ] ;
35481: LD_ADDR_VAR 0 6
35485: PUSH
35486: LD_VAR 0 2
35490: PUSH
35491: LD_VAR 0 3
35495: PUSH
35496: LD_VAR 0 4
35500: PUSH
35501: LD_VAR 0 5
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: ST_TO_ADDR
// end ;
35512: LD_VAR 0 6
35516: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35517: LD_INT 0
35519: PPUSH
// if not chassis or not engine then
35520: LD_VAR 0 1
35524: NOT
35525: PUSH
35526: LD_VAR 0 2
35530: NOT
35531: OR
35532: IFFALSE 35536
// exit ;
35534: GO 35732
// case engine of engine_solar :
35536: LD_VAR 0 2
35540: PUSH
35541: LD_INT 2
35543: DOUBLE
35544: EQUAL
35545: IFTRUE 35549
35547: GO 35587
35549: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35550: LD_ADDR_VAR 0 3
35554: PUSH
35555: LD_INT 11
35557: PUSH
35558: LD_INT 12
35560: PUSH
35561: LD_INT 13
35563: PUSH
35564: LD_INT 14
35566: PUSH
35567: LD_INT 1
35569: PUSH
35570: LD_INT 2
35572: PUSH
35573: LD_INT 3
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: ST_TO_ADDR
35585: GO 35716
35587: LD_INT 1
35589: DOUBLE
35590: EQUAL
35591: IFTRUE 35595
35593: GO 35657
35595: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35596: LD_ADDR_VAR 0 3
35600: PUSH
35601: LD_INT 11
35603: PUSH
35604: LD_INT 12
35606: PUSH
35607: LD_INT 13
35609: PUSH
35610: LD_INT 14
35612: PUSH
35613: LD_INT 1
35615: PUSH
35616: LD_INT 2
35618: PUSH
35619: LD_INT 3
35621: PUSH
35622: LD_INT 4
35624: PUSH
35625: LD_INT 5
35627: PUSH
35628: LD_INT 21
35630: PUSH
35631: LD_INT 23
35633: PUSH
35634: LD_INT 22
35636: PUSH
35637: LD_INT 24
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: ST_TO_ADDR
35655: GO 35716
35657: LD_INT 3
35659: DOUBLE
35660: EQUAL
35661: IFTRUE 35665
35663: GO 35715
35665: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35666: LD_ADDR_VAR 0 3
35670: PUSH
35671: LD_INT 13
35673: PUSH
35674: LD_INT 14
35676: PUSH
35677: LD_INT 2
35679: PUSH
35680: LD_INT 3
35682: PUSH
35683: LD_INT 4
35685: PUSH
35686: LD_INT 5
35688: PUSH
35689: LD_INT 21
35691: PUSH
35692: LD_INT 22
35694: PUSH
35695: LD_INT 23
35697: PUSH
35698: LD_INT 24
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: ST_TO_ADDR
35713: GO 35716
35715: POP
// result := ( chassis in result ) ;
35716: LD_ADDR_VAR 0 3
35720: PUSH
35721: LD_VAR 0 1
35725: PUSH
35726: LD_VAR 0 3
35730: IN
35731: ST_TO_ADDR
// end ;
35732: LD_VAR 0 3
35736: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35737: LD_INT 0
35739: PPUSH
// if not chassis or not weapon then
35740: LD_VAR 0 1
35744: NOT
35745: PUSH
35746: LD_VAR 0 2
35750: NOT
35751: OR
35752: IFFALSE 35756
// exit ;
35754: GO 36816
// case weapon of us_machine_gun :
35756: LD_VAR 0 2
35760: PUSH
35761: LD_INT 2
35763: DOUBLE
35764: EQUAL
35765: IFTRUE 35769
35767: GO 35799
35769: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35770: LD_ADDR_VAR 0 3
35774: PUSH
35775: LD_INT 1
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: LD_INT 3
35783: PUSH
35784: LD_INT 4
35786: PUSH
35787: LD_INT 5
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: ST_TO_ADDR
35797: GO 36800
35799: LD_INT 3
35801: DOUBLE
35802: EQUAL
35803: IFTRUE 35807
35805: GO 35837
35807: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35808: LD_ADDR_VAR 0 3
35812: PUSH
35813: LD_INT 1
35815: PUSH
35816: LD_INT 2
35818: PUSH
35819: LD_INT 3
35821: PUSH
35822: LD_INT 4
35824: PUSH
35825: LD_INT 5
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: ST_TO_ADDR
35835: GO 36800
35837: LD_INT 11
35839: DOUBLE
35840: EQUAL
35841: IFTRUE 35845
35843: GO 35875
35845: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35846: LD_ADDR_VAR 0 3
35850: PUSH
35851: LD_INT 1
35853: PUSH
35854: LD_INT 2
35856: PUSH
35857: LD_INT 3
35859: PUSH
35860: LD_INT 4
35862: PUSH
35863: LD_INT 5
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: ST_TO_ADDR
35873: GO 36800
35875: LD_INT 4
35877: DOUBLE
35878: EQUAL
35879: IFTRUE 35883
35881: GO 35909
35883: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35884: LD_ADDR_VAR 0 3
35888: PUSH
35889: LD_INT 2
35891: PUSH
35892: LD_INT 3
35894: PUSH
35895: LD_INT 4
35897: PUSH
35898: LD_INT 5
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: ST_TO_ADDR
35907: GO 36800
35909: LD_INT 5
35911: DOUBLE
35912: EQUAL
35913: IFTRUE 35917
35915: GO 35943
35917: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35918: LD_ADDR_VAR 0 3
35922: PUSH
35923: LD_INT 2
35925: PUSH
35926: LD_INT 3
35928: PUSH
35929: LD_INT 4
35931: PUSH
35932: LD_INT 5
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: ST_TO_ADDR
35941: GO 36800
35943: LD_INT 9
35945: DOUBLE
35946: EQUAL
35947: IFTRUE 35951
35949: GO 35977
35951: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35952: LD_ADDR_VAR 0 3
35956: PUSH
35957: LD_INT 2
35959: PUSH
35960: LD_INT 3
35962: PUSH
35963: LD_INT 4
35965: PUSH
35966: LD_INT 5
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: ST_TO_ADDR
35975: GO 36800
35977: LD_INT 7
35979: DOUBLE
35980: EQUAL
35981: IFTRUE 35985
35983: GO 36011
35985: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35986: LD_ADDR_VAR 0 3
35990: PUSH
35991: LD_INT 2
35993: PUSH
35994: LD_INT 3
35996: PUSH
35997: LD_INT 4
35999: PUSH
36000: LD_INT 5
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: ST_TO_ADDR
36009: GO 36800
36011: LD_INT 12
36013: DOUBLE
36014: EQUAL
36015: IFTRUE 36019
36017: GO 36045
36019: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36020: LD_ADDR_VAR 0 3
36024: PUSH
36025: LD_INT 2
36027: PUSH
36028: LD_INT 3
36030: PUSH
36031: LD_INT 4
36033: PUSH
36034: LD_INT 5
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: ST_TO_ADDR
36043: GO 36800
36045: LD_INT 13
36047: DOUBLE
36048: EQUAL
36049: IFTRUE 36053
36051: GO 36079
36053: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36054: LD_ADDR_VAR 0 3
36058: PUSH
36059: LD_INT 2
36061: PUSH
36062: LD_INT 3
36064: PUSH
36065: LD_INT 4
36067: PUSH
36068: LD_INT 5
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: ST_TO_ADDR
36077: GO 36800
36079: LD_INT 14
36081: DOUBLE
36082: EQUAL
36083: IFTRUE 36087
36085: GO 36105
36087: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36088: LD_ADDR_VAR 0 3
36092: PUSH
36093: LD_INT 4
36095: PUSH
36096: LD_INT 5
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: ST_TO_ADDR
36103: GO 36800
36105: LD_INT 6
36107: DOUBLE
36108: EQUAL
36109: IFTRUE 36113
36111: GO 36131
36113: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36114: LD_ADDR_VAR 0 3
36118: PUSH
36119: LD_INT 4
36121: PUSH
36122: LD_INT 5
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: ST_TO_ADDR
36129: GO 36800
36131: LD_INT 10
36133: DOUBLE
36134: EQUAL
36135: IFTRUE 36139
36137: GO 36157
36139: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36140: LD_ADDR_VAR 0 3
36144: PUSH
36145: LD_INT 4
36147: PUSH
36148: LD_INT 5
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: ST_TO_ADDR
36155: GO 36800
36157: LD_INT 22
36159: DOUBLE
36160: EQUAL
36161: IFTRUE 36165
36163: GO 36191
36165: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36166: LD_ADDR_VAR 0 3
36170: PUSH
36171: LD_INT 11
36173: PUSH
36174: LD_INT 12
36176: PUSH
36177: LD_INT 13
36179: PUSH
36180: LD_INT 14
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: ST_TO_ADDR
36189: GO 36800
36191: LD_INT 23
36193: DOUBLE
36194: EQUAL
36195: IFTRUE 36199
36197: GO 36225
36199: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36200: LD_ADDR_VAR 0 3
36204: PUSH
36205: LD_INT 11
36207: PUSH
36208: LD_INT 12
36210: PUSH
36211: LD_INT 13
36213: PUSH
36214: LD_INT 14
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: ST_TO_ADDR
36223: GO 36800
36225: LD_INT 24
36227: DOUBLE
36228: EQUAL
36229: IFTRUE 36233
36231: GO 36259
36233: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36234: LD_ADDR_VAR 0 3
36238: PUSH
36239: LD_INT 11
36241: PUSH
36242: LD_INT 12
36244: PUSH
36245: LD_INT 13
36247: PUSH
36248: LD_INT 14
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: ST_TO_ADDR
36257: GO 36800
36259: LD_INT 30
36261: DOUBLE
36262: EQUAL
36263: IFTRUE 36267
36265: GO 36293
36267: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36268: LD_ADDR_VAR 0 3
36272: PUSH
36273: LD_INT 11
36275: PUSH
36276: LD_INT 12
36278: PUSH
36279: LD_INT 13
36281: PUSH
36282: LD_INT 14
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: ST_TO_ADDR
36291: GO 36800
36293: LD_INT 25
36295: DOUBLE
36296: EQUAL
36297: IFTRUE 36301
36299: GO 36319
36301: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36302: LD_ADDR_VAR 0 3
36306: PUSH
36307: LD_INT 13
36309: PUSH
36310: LD_INT 14
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: ST_TO_ADDR
36317: GO 36800
36319: LD_INT 27
36321: DOUBLE
36322: EQUAL
36323: IFTRUE 36327
36325: GO 36345
36327: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36328: LD_ADDR_VAR 0 3
36332: PUSH
36333: LD_INT 13
36335: PUSH
36336: LD_INT 14
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: ST_TO_ADDR
36343: GO 36800
36345: LD_INT 92
36347: DOUBLE
36348: EQUAL
36349: IFTRUE 36353
36351: GO 36379
36353: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36354: LD_ADDR_VAR 0 3
36358: PUSH
36359: LD_INT 11
36361: PUSH
36362: LD_INT 12
36364: PUSH
36365: LD_INT 13
36367: PUSH
36368: LD_INT 14
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: ST_TO_ADDR
36377: GO 36800
36379: LD_INT 28
36381: DOUBLE
36382: EQUAL
36383: IFTRUE 36387
36385: GO 36405
36387: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36388: LD_ADDR_VAR 0 3
36392: PUSH
36393: LD_INT 13
36395: PUSH
36396: LD_INT 14
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: ST_TO_ADDR
36403: GO 36800
36405: LD_INT 29
36407: DOUBLE
36408: EQUAL
36409: IFTRUE 36413
36411: GO 36431
36413: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36414: LD_ADDR_VAR 0 3
36418: PUSH
36419: LD_INT 13
36421: PUSH
36422: LD_INT 14
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: ST_TO_ADDR
36429: GO 36800
36431: LD_INT 31
36433: DOUBLE
36434: EQUAL
36435: IFTRUE 36439
36437: GO 36457
36439: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36440: LD_ADDR_VAR 0 3
36444: PUSH
36445: LD_INT 13
36447: PUSH
36448: LD_INT 14
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: ST_TO_ADDR
36455: GO 36800
36457: LD_INT 26
36459: DOUBLE
36460: EQUAL
36461: IFTRUE 36465
36463: GO 36483
36465: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36466: LD_ADDR_VAR 0 3
36470: PUSH
36471: LD_INT 13
36473: PUSH
36474: LD_INT 14
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: ST_TO_ADDR
36481: GO 36800
36483: LD_INT 42
36485: DOUBLE
36486: EQUAL
36487: IFTRUE 36491
36489: GO 36517
36491: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36492: LD_ADDR_VAR 0 3
36496: PUSH
36497: LD_INT 21
36499: PUSH
36500: LD_INT 22
36502: PUSH
36503: LD_INT 23
36505: PUSH
36506: LD_INT 24
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: ST_TO_ADDR
36515: GO 36800
36517: LD_INT 43
36519: DOUBLE
36520: EQUAL
36521: IFTRUE 36525
36523: GO 36551
36525: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36526: LD_ADDR_VAR 0 3
36530: PUSH
36531: LD_INT 21
36533: PUSH
36534: LD_INT 22
36536: PUSH
36537: LD_INT 23
36539: PUSH
36540: LD_INT 24
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: ST_TO_ADDR
36549: GO 36800
36551: LD_INT 44
36553: DOUBLE
36554: EQUAL
36555: IFTRUE 36559
36557: GO 36585
36559: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36560: LD_ADDR_VAR 0 3
36564: PUSH
36565: LD_INT 21
36567: PUSH
36568: LD_INT 22
36570: PUSH
36571: LD_INT 23
36573: PUSH
36574: LD_INT 24
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: ST_TO_ADDR
36583: GO 36800
36585: LD_INT 45
36587: DOUBLE
36588: EQUAL
36589: IFTRUE 36593
36591: GO 36619
36593: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36594: LD_ADDR_VAR 0 3
36598: PUSH
36599: LD_INT 21
36601: PUSH
36602: LD_INT 22
36604: PUSH
36605: LD_INT 23
36607: PUSH
36608: LD_INT 24
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: ST_TO_ADDR
36617: GO 36800
36619: LD_INT 49
36621: DOUBLE
36622: EQUAL
36623: IFTRUE 36627
36625: GO 36653
36627: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36628: LD_ADDR_VAR 0 3
36632: PUSH
36633: LD_INT 21
36635: PUSH
36636: LD_INT 22
36638: PUSH
36639: LD_INT 23
36641: PUSH
36642: LD_INT 24
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: ST_TO_ADDR
36651: GO 36800
36653: LD_INT 51
36655: DOUBLE
36656: EQUAL
36657: IFTRUE 36661
36659: GO 36687
36661: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36662: LD_ADDR_VAR 0 3
36666: PUSH
36667: LD_INT 21
36669: PUSH
36670: LD_INT 22
36672: PUSH
36673: LD_INT 23
36675: PUSH
36676: LD_INT 24
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: ST_TO_ADDR
36685: GO 36800
36687: LD_INT 52
36689: DOUBLE
36690: EQUAL
36691: IFTRUE 36695
36693: GO 36721
36695: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36696: LD_ADDR_VAR 0 3
36700: PUSH
36701: LD_INT 21
36703: PUSH
36704: LD_INT 22
36706: PUSH
36707: LD_INT 23
36709: PUSH
36710: LD_INT 24
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: ST_TO_ADDR
36719: GO 36800
36721: LD_INT 53
36723: DOUBLE
36724: EQUAL
36725: IFTRUE 36729
36727: GO 36747
36729: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36730: LD_ADDR_VAR 0 3
36734: PUSH
36735: LD_INT 23
36737: PUSH
36738: LD_INT 24
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: ST_TO_ADDR
36745: GO 36800
36747: LD_INT 46
36749: DOUBLE
36750: EQUAL
36751: IFTRUE 36755
36753: GO 36773
36755: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36756: LD_ADDR_VAR 0 3
36760: PUSH
36761: LD_INT 23
36763: PUSH
36764: LD_INT 24
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: ST_TO_ADDR
36771: GO 36800
36773: LD_INT 47
36775: DOUBLE
36776: EQUAL
36777: IFTRUE 36781
36779: GO 36799
36781: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36782: LD_ADDR_VAR 0 3
36786: PUSH
36787: LD_INT 23
36789: PUSH
36790: LD_INT 24
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: ST_TO_ADDR
36797: GO 36800
36799: POP
// result := ( chassis in result ) ;
36800: LD_ADDR_VAR 0 3
36804: PUSH
36805: LD_VAR 0 1
36809: PUSH
36810: LD_VAR 0 3
36814: IN
36815: ST_TO_ADDR
// end ;
36816: LD_VAR 0 3
36820: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36821: LD_INT 0
36823: PPUSH
36824: PPUSH
36825: PPUSH
36826: PPUSH
36827: PPUSH
36828: PPUSH
36829: PPUSH
// result := array ;
36830: LD_ADDR_VAR 0 5
36834: PUSH
36835: LD_VAR 0 1
36839: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36840: LD_VAR 0 1
36844: NOT
36845: PUSH
36846: LD_VAR 0 2
36850: NOT
36851: OR
36852: PUSH
36853: LD_VAR 0 3
36857: NOT
36858: OR
36859: PUSH
36860: LD_VAR 0 2
36864: PUSH
36865: LD_VAR 0 1
36869: GREATER
36870: OR
36871: PUSH
36872: LD_VAR 0 3
36876: PUSH
36877: LD_VAR 0 1
36881: GREATER
36882: OR
36883: IFFALSE 36887
// exit ;
36885: GO 37183
// if direction then
36887: LD_VAR 0 4
36891: IFFALSE 36955
// begin d := 1 ;
36893: LD_ADDR_VAR 0 9
36897: PUSH
36898: LD_INT 1
36900: ST_TO_ADDR
// if i_from > i_to then
36901: LD_VAR 0 2
36905: PUSH
36906: LD_VAR 0 3
36910: GREATER
36911: IFFALSE 36937
// length := ( array - i_from ) + i_to else
36913: LD_ADDR_VAR 0 11
36917: PUSH
36918: LD_VAR 0 1
36922: PUSH
36923: LD_VAR 0 2
36927: MINUS
36928: PUSH
36929: LD_VAR 0 3
36933: PLUS
36934: ST_TO_ADDR
36935: GO 36953
// length := i_to - i_from ;
36937: LD_ADDR_VAR 0 11
36941: PUSH
36942: LD_VAR 0 3
36946: PUSH
36947: LD_VAR 0 2
36951: MINUS
36952: ST_TO_ADDR
// end else
36953: GO 37016
// begin d := - 1 ;
36955: LD_ADDR_VAR 0 9
36959: PUSH
36960: LD_INT 1
36962: NEG
36963: ST_TO_ADDR
// if i_from > i_to then
36964: LD_VAR 0 2
36968: PUSH
36969: LD_VAR 0 3
36973: GREATER
36974: IFFALSE 36994
// length := i_from - i_to else
36976: LD_ADDR_VAR 0 11
36980: PUSH
36981: LD_VAR 0 2
36985: PUSH
36986: LD_VAR 0 3
36990: MINUS
36991: ST_TO_ADDR
36992: GO 37016
// length := ( array - i_to ) + i_from ;
36994: LD_ADDR_VAR 0 11
36998: PUSH
36999: LD_VAR 0 1
37003: PUSH
37004: LD_VAR 0 3
37008: MINUS
37009: PUSH
37010: LD_VAR 0 2
37014: PLUS
37015: ST_TO_ADDR
// end ; if not length then
37016: LD_VAR 0 11
37020: NOT
37021: IFFALSE 37025
// exit ;
37023: GO 37183
// tmp := array ;
37025: LD_ADDR_VAR 0 10
37029: PUSH
37030: LD_VAR 0 1
37034: ST_TO_ADDR
// for i = 1 to length do
37035: LD_ADDR_VAR 0 6
37039: PUSH
37040: DOUBLE
37041: LD_INT 1
37043: DEC
37044: ST_TO_ADDR
37045: LD_VAR 0 11
37049: PUSH
37050: FOR_TO
37051: IFFALSE 37171
// begin for j = 1 to array do
37053: LD_ADDR_VAR 0 7
37057: PUSH
37058: DOUBLE
37059: LD_INT 1
37061: DEC
37062: ST_TO_ADDR
37063: LD_VAR 0 1
37067: PUSH
37068: FOR_TO
37069: IFFALSE 37157
// begin k := j + d ;
37071: LD_ADDR_VAR 0 8
37075: PUSH
37076: LD_VAR 0 7
37080: PUSH
37081: LD_VAR 0 9
37085: PLUS
37086: ST_TO_ADDR
// if k > array then
37087: LD_VAR 0 8
37091: PUSH
37092: LD_VAR 0 1
37096: GREATER
37097: IFFALSE 37107
// k := 1 ;
37099: LD_ADDR_VAR 0 8
37103: PUSH
37104: LD_INT 1
37106: ST_TO_ADDR
// if not k then
37107: LD_VAR 0 8
37111: NOT
37112: IFFALSE 37124
// k := array ;
37114: LD_ADDR_VAR 0 8
37118: PUSH
37119: LD_VAR 0 1
37123: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37124: LD_ADDR_VAR 0 10
37128: PUSH
37129: LD_VAR 0 10
37133: PPUSH
37134: LD_VAR 0 8
37138: PPUSH
37139: LD_VAR 0 1
37143: PUSH
37144: LD_VAR 0 7
37148: ARRAY
37149: PPUSH
37150: CALL_OW 1
37154: ST_TO_ADDR
// end ;
37155: GO 37068
37157: POP
37158: POP
// array := tmp ;
37159: LD_ADDR_VAR 0 1
37163: PUSH
37164: LD_VAR 0 10
37168: ST_TO_ADDR
// end ;
37169: GO 37050
37171: POP
37172: POP
// result := array ;
37173: LD_ADDR_VAR 0 5
37177: PUSH
37178: LD_VAR 0 1
37182: ST_TO_ADDR
// end ;
37183: LD_VAR 0 5
37187: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37188: LD_INT 0
37190: PPUSH
37191: PPUSH
// result := 0 ;
37192: LD_ADDR_VAR 0 3
37196: PUSH
37197: LD_INT 0
37199: ST_TO_ADDR
// if not array or not value in array then
37200: LD_VAR 0 1
37204: NOT
37205: PUSH
37206: LD_VAR 0 2
37210: PUSH
37211: LD_VAR 0 1
37215: IN
37216: NOT
37217: OR
37218: IFFALSE 37222
// exit ;
37220: GO 37276
// for i = 1 to array do
37222: LD_ADDR_VAR 0 4
37226: PUSH
37227: DOUBLE
37228: LD_INT 1
37230: DEC
37231: ST_TO_ADDR
37232: LD_VAR 0 1
37236: PUSH
37237: FOR_TO
37238: IFFALSE 37274
// if value = array [ i ] then
37240: LD_VAR 0 2
37244: PUSH
37245: LD_VAR 0 1
37249: PUSH
37250: LD_VAR 0 4
37254: ARRAY
37255: EQUAL
37256: IFFALSE 37272
// begin result := i ;
37258: LD_ADDR_VAR 0 3
37262: PUSH
37263: LD_VAR 0 4
37267: ST_TO_ADDR
// exit ;
37268: POP
37269: POP
37270: GO 37276
// end ;
37272: GO 37237
37274: POP
37275: POP
// end ;
37276: LD_VAR 0 3
37280: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37281: LD_INT 0
37283: PPUSH
// vc_chassis := chassis ;
37284: LD_ADDR_OWVAR 37
37288: PUSH
37289: LD_VAR 0 1
37293: ST_TO_ADDR
// vc_engine := engine ;
37294: LD_ADDR_OWVAR 39
37298: PUSH
37299: LD_VAR 0 2
37303: ST_TO_ADDR
// vc_control := control ;
37304: LD_ADDR_OWVAR 38
37308: PUSH
37309: LD_VAR 0 3
37313: ST_TO_ADDR
// vc_weapon := weapon ;
37314: LD_ADDR_OWVAR 40
37318: PUSH
37319: LD_VAR 0 4
37323: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37324: LD_ADDR_OWVAR 41
37328: PUSH
37329: LD_VAR 0 5
37333: ST_TO_ADDR
// end ;
37334: LD_VAR 0 6
37338: RET
// export function WantPlant ( unit ) ; var task ; begin
37339: LD_INT 0
37341: PPUSH
37342: PPUSH
// result := false ;
37343: LD_ADDR_VAR 0 2
37347: PUSH
37348: LD_INT 0
37350: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37351: LD_ADDR_VAR 0 3
37355: PUSH
37356: LD_VAR 0 1
37360: PPUSH
37361: CALL_OW 437
37365: ST_TO_ADDR
// if task then
37366: LD_VAR 0 3
37370: IFFALSE 37398
// if task [ 1 ] [ 1 ] = p then
37372: LD_VAR 0 3
37376: PUSH
37377: LD_INT 1
37379: ARRAY
37380: PUSH
37381: LD_INT 1
37383: ARRAY
37384: PUSH
37385: LD_STRING p
37387: EQUAL
37388: IFFALSE 37398
// result := true ;
37390: LD_ADDR_VAR 0 2
37394: PUSH
37395: LD_INT 1
37397: ST_TO_ADDR
// end ;
37398: LD_VAR 0 2
37402: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37403: LD_INT 0
37405: PPUSH
37406: PPUSH
37407: PPUSH
37408: PPUSH
// if pos < 1 then
37409: LD_VAR 0 2
37413: PUSH
37414: LD_INT 1
37416: LESS
37417: IFFALSE 37421
// exit ;
37419: GO 37724
// if pos = 1 then
37421: LD_VAR 0 2
37425: PUSH
37426: LD_INT 1
37428: EQUAL
37429: IFFALSE 37462
// result := Replace ( arr , pos [ 1 ] , value ) else
37431: LD_ADDR_VAR 0 4
37435: PUSH
37436: LD_VAR 0 1
37440: PPUSH
37441: LD_VAR 0 2
37445: PUSH
37446: LD_INT 1
37448: ARRAY
37449: PPUSH
37450: LD_VAR 0 3
37454: PPUSH
37455: CALL_OW 1
37459: ST_TO_ADDR
37460: GO 37724
// begin tmp := arr ;
37462: LD_ADDR_VAR 0 6
37466: PUSH
37467: LD_VAR 0 1
37471: ST_TO_ADDR
// s_arr := [ tmp ] ;
37472: LD_ADDR_VAR 0 7
37476: PUSH
37477: LD_VAR 0 6
37481: PUSH
37482: EMPTY
37483: LIST
37484: ST_TO_ADDR
// for i = 1 to pos - 1 do
37485: LD_ADDR_VAR 0 5
37489: PUSH
37490: DOUBLE
37491: LD_INT 1
37493: DEC
37494: ST_TO_ADDR
37495: LD_VAR 0 2
37499: PUSH
37500: LD_INT 1
37502: MINUS
37503: PUSH
37504: FOR_TO
37505: IFFALSE 37550
// begin tmp := tmp [ pos [ i ] ] ;
37507: LD_ADDR_VAR 0 6
37511: PUSH
37512: LD_VAR 0 6
37516: PUSH
37517: LD_VAR 0 2
37521: PUSH
37522: LD_VAR 0 5
37526: ARRAY
37527: ARRAY
37528: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37529: LD_ADDR_VAR 0 7
37533: PUSH
37534: LD_VAR 0 7
37538: PUSH
37539: LD_VAR 0 6
37543: PUSH
37544: EMPTY
37545: LIST
37546: ADD
37547: ST_TO_ADDR
// end ;
37548: GO 37504
37550: POP
37551: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37552: LD_ADDR_VAR 0 6
37556: PUSH
37557: LD_VAR 0 6
37561: PPUSH
37562: LD_VAR 0 2
37566: PUSH
37567: LD_VAR 0 2
37571: ARRAY
37572: PPUSH
37573: LD_VAR 0 3
37577: PPUSH
37578: CALL_OW 1
37582: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37583: LD_ADDR_VAR 0 7
37587: PUSH
37588: LD_VAR 0 7
37592: PPUSH
37593: LD_VAR 0 7
37597: PPUSH
37598: LD_VAR 0 6
37602: PPUSH
37603: CALL_OW 1
37607: ST_TO_ADDR
// for i = s_arr downto 2 do
37608: LD_ADDR_VAR 0 5
37612: PUSH
37613: DOUBLE
37614: LD_VAR 0 7
37618: INC
37619: ST_TO_ADDR
37620: LD_INT 2
37622: PUSH
37623: FOR_DOWNTO
37624: IFFALSE 37708
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37626: LD_ADDR_VAR 0 6
37630: PUSH
37631: LD_VAR 0 7
37635: PUSH
37636: LD_VAR 0 5
37640: PUSH
37641: LD_INT 1
37643: MINUS
37644: ARRAY
37645: PPUSH
37646: LD_VAR 0 2
37650: PUSH
37651: LD_VAR 0 5
37655: PUSH
37656: LD_INT 1
37658: MINUS
37659: ARRAY
37660: PPUSH
37661: LD_VAR 0 7
37665: PUSH
37666: LD_VAR 0 5
37670: ARRAY
37671: PPUSH
37672: CALL_OW 1
37676: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37677: LD_ADDR_VAR 0 7
37681: PUSH
37682: LD_VAR 0 7
37686: PPUSH
37687: LD_VAR 0 5
37691: PUSH
37692: LD_INT 1
37694: MINUS
37695: PPUSH
37696: LD_VAR 0 6
37700: PPUSH
37701: CALL_OW 1
37705: ST_TO_ADDR
// end ;
37706: GO 37623
37708: POP
37709: POP
// result := s_arr [ 1 ] ;
37710: LD_ADDR_VAR 0 4
37714: PUSH
37715: LD_VAR 0 7
37719: PUSH
37720: LD_INT 1
37722: ARRAY
37723: ST_TO_ADDR
// end ; end ;
37724: LD_VAR 0 4
37728: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37729: LD_INT 0
37731: PPUSH
37732: PPUSH
// if not list then
37733: LD_VAR 0 1
37737: NOT
37738: IFFALSE 37742
// exit ;
37740: GO 37833
// i := list [ pos1 ] ;
37742: LD_ADDR_VAR 0 5
37746: PUSH
37747: LD_VAR 0 1
37751: PUSH
37752: LD_VAR 0 2
37756: ARRAY
37757: ST_TO_ADDR
// if not i then
37758: LD_VAR 0 5
37762: NOT
37763: IFFALSE 37767
// exit ;
37765: GO 37833
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37767: LD_ADDR_VAR 0 1
37771: PUSH
37772: LD_VAR 0 1
37776: PPUSH
37777: LD_VAR 0 2
37781: PPUSH
37782: LD_VAR 0 1
37786: PUSH
37787: LD_VAR 0 3
37791: ARRAY
37792: PPUSH
37793: CALL_OW 1
37797: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37798: LD_ADDR_VAR 0 1
37802: PUSH
37803: LD_VAR 0 1
37807: PPUSH
37808: LD_VAR 0 3
37812: PPUSH
37813: LD_VAR 0 5
37817: PPUSH
37818: CALL_OW 1
37822: ST_TO_ADDR
// result := list ;
37823: LD_ADDR_VAR 0 4
37827: PUSH
37828: LD_VAR 0 1
37832: ST_TO_ADDR
// end ;
37833: LD_VAR 0 4
37837: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37838: LD_INT 0
37840: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37841: LD_ADDR_VAR 0 5
37845: PUSH
37846: LD_VAR 0 1
37850: PPUSH
37851: CALL_OW 250
37855: PPUSH
37856: LD_VAR 0 1
37860: PPUSH
37861: CALL_OW 251
37865: PPUSH
37866: LD_VAR 0 2
37870: PPUSH
37871: LD_VAR 0 3
37875: PPUSH
37876: LD_VAR 0 4
37880: PPUSH
37881: CALL 38259 0 5
37885: ST_TO_ADDR
// end ;
37886: LD_VAR 0 5
37890: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
37891: LD_INT 0
37893: PPUSH
37894: PPUSH
37895: PPUSH
37896: PPUSH
// if not list or not unit then
37897: LD_VAR 0 2
37901: NOT
37902: PUSH
37903: LD_VAR 0 1
37907: NOT
37908: OR
37909: IFFALSE 37913
// exit ;
37911: GO 38254
// result := [ ] ;
37913: LD_ADDR_VAR 0 5
37917: PUSH
37918: EMPTY
37919: ST_TO_ADDR
// for i in list do
37920: LD_ADDR_VAR 0 6
37924: PUSH
37925: LD_VAR 0 2
37929: PUSH
37930: FOR_IN
37931: IFFALSE 38149
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
37933: LD_ADDR_VAR 0 8
37937: PUSH
37938: LD_VAR 0 1
37942: PPUSH
37943: LD_VAR 0 6
37947: PUSH
37948: LD_INT 1
37950: ARRAY
37951: PPUSH
37952: LD_VAR 0 6
37956: PUSH
37957: LD_INT 2
37959: ARRAY
37960: PPUSH
37961: CALL_OW 297
37965: ST_TO_ADDR
// if not Count ( result ) then
37966: LD_VAR 0 5
37970: PPUSH
37971: CALL 34543 0 1
37975: NOT
37976: IFFALSE 38009
// begin result := Join ( result , [ i , tmp ] ) ;
37978: LD_ADDR_VAR 0 5
37982: PUSH
37983: LD_VAR 0 5
37987: PPUSH
37988: LD_VAR 0 6
37992: PUSH
37993: LD_VAR 0 8
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PPUSH
38002: CALL 70152 0 2
38006: ST_TO_ADDR
// continue ;
38007: GO 37930
// end ; if result [ result ] [ 2 ] <= tmp then
38009: LD_VAR 0 5
38013: PUSH
38014: LD_VAR 0 5
38018: ARRAY
38019: PUSH
38020: LD_INT 2
38022: ARRAY
38023: PUSH
38024: LD_VAR 0 8
38028: LESSEQUAL
38029: IFFALSE 38062
// result := Join ( result , [ i , tmp ] ) else
38031: LD_ADDR_VAR 0 5
38035: PUSH
38036: LD_VAR 0 5
38040: PPUSH
38041: LD_VAR 0 6
38045: PUSH
38046: LD_VAR 0 8
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PPUSH
38055: CALL 70152 0 2
38059: ST_TO_ADDR
38060: GO 38147
// begin for j := 1 to Count ( result ) do
38062: LD_ADDR_VAR 0 7
38066: PUSH
38067: DOUBLE
38068: LD_INT 1
38070: DEC
38071: ST_TO_ADDR
38072: LD_VAR 0 5
38076: PPUSH
38077: CALL 34543 0 1
38081: PUSH
38082: FOR_TO
38083: IFFALSE 38145
// begin if tmp < result [ j ] [ 2 ] then
38085: LD_VAR 0 8
38089: PUSH
38090: LD_VAR 0 5
38094: PUSH
38095: LD_VAR 0 7
38099: ARRAY
38100: PUSH
38101: LD_INT 2
38103: ARRAY
38104: LESS
38105: IFFALSE 38143
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38107: LD_ADDR_VAR 0 5
38111: PUSH
38112: LD_VAR 0 5
38116: PPUSH
38117: LD_VAR 0 7
38121: PPUSH
38122: LD_VAR 0 6
38126: PUSH
38127: LD_VAR 0 8
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PPUSH
38136: CALL_OW 2
38140: ST_TO_ADDR
// break ;
38141: GO 38145
// end ; end ;
38143: GO 38082
38145: POP
38146: POP
// end ; end ;
38147: GO 37930
38149: POP
38150: POP
// if result and not asc then
38151: LD_VAR 0 5
38155: PUSH
38156: LD_VAR 0 3
38160: NOT
38161: AND
38162: IFFALSE 38179
// result := ReverseArray ( result ) ;
38164: LD_ADDR_VAR 0 5
38168: PUSH
38169: LD_VAR 0 5
38173: PPUSH
38174: CALL 65419 0 1
38178: ST_TO_ADDR
// tmp := [ ] ;
38179: LD_ADDR_VAR 0 8
38183: PUSH
38184: EMPTY
38185: ST_TO_ADDR
// if mode then
38186: LD_VAR 0 4
38190: IFFALSE 38254
// begin for i := 1 to result do
38192: LD_ADDR_VAR 0 6
38196: PUSH
38197: DOUBLE
38198: LD_INT 1
38200: DEC
38201: ST_TO_ADDR
38202: LD_VAR 0 5
38206: PUSH
38207: FOR_TO
38208: IFFALSE 38242
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
38210: LD_ADDR_VAR 0 8
38214: PUSH
38215: LD_VAR 0 8
38219: PPUSH
38220: LD_VAR 0 5
38224: PUSH
38225: LD_VAR 0 6
38229: ARRAY
38230: PUSH
38231: LD_INT 1
38233: ARRAY
38234: PPUSH
38235: CALL 70152 0 2
38239: ST_TO_ADDR
38240: GO 38207
38242: POP
38243: POP
// result := tmp ;
38244: LD_ADDR_VAR 0 5
38248: PUSH
38249: LD_VAR 0 8
38253: ST_TO_ADDR
// end ; end ;
38254: LD_VAR 0 5
38258: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38259: LD_INT 0
38261: PPUSH
38262: PPUSH
38263: PPUSH
38264: PPUSH
// if not list then
38265: LD_VAR 0 3
38269: NOT
38270: IFFALSE 38274
// exit ;
38272: GO 38662
// result := [ ] ;
38274: LD_ADDR_VAR 0 6
38278: PUSH
38279: EMPTY
38280: ST_TO_ADDR
// for i in list do
38281: LD_ADDR_VAR 0 7
38285: PUSH
38286: LD_VAR 0 3
38290: PUSH
38291: FOR_IN
38292: IFFALSE 38494
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38294: LD_ADDR_VAR 0 9
38298: PUSH
38299: LD_VAR 0 7
38303: PPUSH
38304: LD_VAR 0 1
38308: PPUSH
38309: LD_VAR 0 2
38313: PPUSH
38314: CALL_OW 297
38318: ST_TO_ADDR
// if not result then
38319: LD_VAR 0 6
38323: NOT
38324: IFFALSE 38350
// result := [ [ i , tmp ] ] else
38326: LD_ADDR_VAR 0 6
38330: PUSH
38331: LD_VAR 0 7
38335: PUSH
38336: LD_VAR 0 9
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: EMPTY
38346: LIST
38347: ST_TO_ADDR
38348: GO 38492
// begin if result [ result ] [ 2 ] <= tmp then
38350: LD_VAR 0 6
38354: PUSH
38355: LD_VAR 0 6
38359: ARRAY
38360: PUSH
38361: LD_INT 2
38363: ARRAY
38364: PUSH
38365: LD_VAR 0 9
38369: LESSEQUAL
38370: IFFALSE 38412
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38372: LD_ADDR_VAR 0 6
38376: PUSH
38377: LD_VAR 0 6
38381: PPUSH
38382: LD_VAR 0 6
38386: PUSH
38387: LD_INT 1
38389: PLUS
38390: PPUSH
38391: LD_VAR 0 7
38395: PUSH
38396: LD_VAR 0 9
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PPUSH
38405: CALL_OW 2
38409: ST_TO_ADDR
38410: GO 38492
// for j := 1 to result do
38412: LD_ADDR_VAR 0 8
38416: PUSH
38417: DOUBLE
38418: LD_INT 1
38420: DEC
38421: ST_TO_ADDR
38422: LD_VAR 0 6
38426: PUSH
38427: FOR_TO
38428: IFFALSE 38490
// begin if tmp < result [ j ] [ 2 ] then
38430: LD_VAR 0 9
38434: PUSH
38435: LD_VAR 0 6
38439: PUSH
38440: LD_VAR 0 8
38444: ARRAY
38445: PUSH
38446: LD_INT 2
38448: ARRAY
38449: LESS
38450: IFFALSE 38488
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38452: LD_ADDR_VAR 0 6
38456: PUSH
38457: LD_VAR 0 6
38461: PPUSH
38462: LD_VAR 0 8
38466: PPUSH
38467: LD_VAR 0 7
38471: PUSH
38472: LD_VAR 0 9
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PPUSH
38481: CALL_OW 2
38485: ST_TO_ADDR
// break ;
38486: GO 38490
// end ; end ;
38488: GO 38427
38490: POP
38491: POP
// end ; end ;
38492: GO 38291
38494: POP
38495: POP
// if result and not asc then
38496: LD_VAR 0 6
38500: PUSH
38501: LD_VAR 0 4
38505: NOT
38506: AND
38507: IFFALSE 38582
// begin tmp := result ;
38509: LD_ADDR_VAR 0 9
38513: PUSH
38514: LD_VAR 0 6
38518: ST_TO_ADDR
// for i = tmp downto 1 do
38519: LD_ADDR_VAR 0 7
38523: PUSH
38524: DOUBLE
38525: LD_VAR 0 9
38529: INC
38530: ST_TO_ADDR
38531: LD_INT 1
38533: PUSH
38534: FOR_DOWNTO
38535: IFFALSE 38580
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38537: LD_ADDR_VAR 0 6
38541: PUSH
38542: LD_VAR 0 6
38546: PPUSH
38547: LD_VAR 0 9
38551: PUSH
38552: LD_VAR 0 7
38556: MINUS
38557: PUSH
38558: LD_INT 1
38560: PLUS
38561: PPUSH
38562: LD_VAR 0 9
38566: PUSH
38567: LD_VAR 0 7
38571: ARRAY
38572: PPUSH
38573: CALL_OW 1
38577: ST_TO_ADDR
38578: GO 38534
38580: POP
38581: POP
// end ; tmp := [ ] ;
38582: LD_ADDR_VAR 0 9
38586: PUSH
38587: EMPTY
38588: ST_TO_ADDR
// if mode then
38589: LD_VAR 0 5
38593: IFFALSE 38662
// begin for i = 1 to result do
38595: LD_ADDR_VAR 0 7
38599: PUSH
38600: DOUBLE
38601: LD_INT 1
38603: DEC
38604: ST_TO_ADDR
38605: LD_VAR 0 6
38609: PUSH
38610: FOR_TO
38611: IFFALSE 38650
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38613: LD_ADDR_VAR 0 9
38617: PUSH
38618: LD_VAR 0 9
38622: PPUSH
38623: LD_VAR 0 7
38627: PPUSH
38628: LD_VAR 0 6
38632: PUSH
38633: LD_VAR 0 7
38637: ARRAY
38638: PUSH
38639: LD_INT 1
38641: ARRAY
38642: PPUSH
38643: CALL_OW 1
38647: ST_TO_ADDR
38648: GO 38610
38650: POP
38651: POP
// result := tmp ;
38652: LD_ADDR_VAR 0 6
38656: PUSH
38657: LD_VAR 0 9
38661: ST_TO_ADDR
// end ; end ;
38662: LD_VAR 0 6
38666: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38667: LD_INT 0
38669: PPUSH
38670: PPUSH
38671: PPUSH
38672: PPUSH
38673: PPUSH
38674: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38675: LD_ADDR_VAR 0 5
38679: PUSH
38680: LD_INT 0
38682: PUSH
38683: LD_INT 0
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: EMPTY
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: ST_TO_ADDR
// if not x or not y then
38697: LD_VAR 0 2
38701: NOT
38702: PUSH
38703: LD_VAR 0 3
38707: NOT
38708: OR
38709: IFFALSE 38713
// exit ;
38711: GO 40363
// if not range then
38713: LD_VAR 0 4
38717: NOT
38718: IFFALSE 38728
// range := 10 ;
38720: LD_ADDR_VAR 0 4
38724: PUSH
38725: LD_INT 10
38727: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38728: LD_ADDR_VAR 0 8
38732: PUSH
38733: LD_INT 81
38735: PUSH
38736: LD_VAR 0 1
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 92
38747: PUSH
38748: LD_VAR 0 2
38752: PUSH
38753: LD_VAR 0 3
38757: PUSH
38758: LD_VAR 0 4
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 3
38771: PUSH
38772: LD_INT 21
38774: PUSH
38775: LD_INT 3
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: LIST
38790: PPUSH
38791: CALL_OW 69
38795: ST_TO_ADDR
// if not tmp then
38796: LD_VAR 0 8
38800: NOT
38801: IFFALSE 38805
// exit ;
38803: GO 40363
// for i in tmp do
38805: LD_ADDR_VAR 0 6
38809: PUSH
38810: LD_VAR 0 8
38814: PUSH
38815: FOR_IN
38816: IFFALSE 40338
// begin points := [ 0 , 0 , 0 ] ;
38818: LD_ADDR_VAR 0 9
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: LD_INT 0
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: LIST
38836: ST_TO_ADDR
// bpoints := 1 ;
38837: LD_ADDR_VAR 0 10
38841: PUSH
38842: LD_INT 1
38844: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38845: LD_VAR 0 6
38849: PPUSH
38850: CALL_OW 247
38854: PUSH
38855: LD_INT 1
38857: DOUBLE
38858: EQUAL
38859: IFTRUE 38863
38861: GO 39441
38863: POP
// begin if GetClass ( i ) = 1 then
38864: LD_VAR 0 6
38868: PPUSH
38869: CALL_OW 257
38873: PUSH
38874: LD_INT 1
38876: EQUAL
38877: IFFALSE 38898
// points := [ 10 , 5 , 3 ] ;
38879: LD_ADDR_VAR 0 9
38883: PUSH
38884: LD_INT 10
38886: PUSH
38887: LD_INT 5
38889: PUSH
38890: LD_INT 3
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: LIST
38897: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38898: LD_VAR 0 6
38902: PPUSH
38903: CALL_OW 257
38907: PUSH
38908: LD_INT 2
38910: PUSH
38911: LD_INT 3
38913: PUSH
38914: LD_INT 4
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: LIST
38921: IN
38922: IFFALSE 38943
// points := [ 3 , 2 , 1 ] ;
38924: LD_ADDR_VAR 0 9
38928: PUSH
38929: LD_INT 3
38931: PUSH
38932: LD_INT 2
38934: PUSH
38935: LD_INT 1
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: LIST
38942: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38943: LD_VAR 0 6
38947: PPUSH
38948: CALL_OW 257
38952: PUSH
38953: LD_INT 5
38955: EQUAL
38956: IFFALSE 38977
// points := [ 130 , 5 , 2 ] ;
38958: LD_ADDR_VAR 0 9
38962: PUSH
38963: LD_INT 130
38965: PUSH
38966: LD_INT 5
38968: PUSH
38969: LD_INT 2
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: LIST
38976: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38977: LD_VAR 0 6
38981: PPUSH
38982: CALL_OW 257
38986: PUSH
38987: LD_INT 8
38989: EQUAL
38990: IFFALSE 39011
// points := [ 35 , 35 , 30 ] ;
38992: LD_ADDR_VAR 0 9
38996: PUSH
38997: LD_INT 35
38999: PUSH
39000: LD_INT 35
39002: PUSH
39003: LD_INT 30
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: LIST
39010: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39011: LD_VAR 0 6
39015: PPUSH
39016: CALL_OW 257
39020: PUSH
39021: LD_INT 9
39023: EQUAL
39024: IFFALSE 39045
// points := [ 20 , 55 , 40 ] ;
39026: LD_ADDR_VAR 0 9
39030: PUSH
39031: LD_INT 20
39033: PUSH
39034: LD_INT 55
39036: PUSH
39037: LD_INT 40
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: LIST
39044: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39045: LD_VAR 0 6
39049: PPUSH
39050: CALL_OW 257
39054: PUSH
39055: LD_INT 12
39057: PUSH
39058: LD_INT 16
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: IN
39065: IFFALSE 39086
// points := [ 5 , 3 , 2 ] ;
39067: LD_ADDR_VAR 0 9
39071: PUSH
39072: LD_INT 5
39074: PUSH
39075: LD_INT 3
39077: PUSH
39078: LD_INT 2
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: LIST
39085: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39086: LD_VAR 0 6
39090: PPUSH
39091: CALL_OW 257
39095: PUSH
39096: LD_INT 17
39098: EQUAL
39099: IFFALSE 39120
// points := [ 100 , 50 , 75 ] ;
39101: LD_ADDR_VAR 0 9
39105: PUSH
39106: LD_INT 100
39108: PUSH
39109: LD_INT 50
39111: PUSH
39112: LD_INT 75
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: LIST
39119: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39120: LD_VAR 0 6
39124: PPUSH
39125: CALL_OW 257
39129: PUSH
39130: LD_INT 15
39132: EQUAL
39133: IFFALSE 39154
// points := [ 10 , 5 , 3 ] ;
39135: LD_ADDR_VAR 0 9
39139: PUSH
39140: LD_INT 10
39142: PUSH
39143: LD_INT 5
39145: PUSH
39146: LD_INT 3
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: LIST
39153: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39154: LD_VAR 0 6
39158: PPUSH
39159: CALL_OW 257
39163: PUSH
39164: LD_INT 14
39166: EQUAL
39167: IFFALSE 39188
// points := [ 10 , 0 , 0 ] ;
39169: LD_ADDR_VAR 0 9
39173: PUSH
39174: LD_INT 10
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: LD_INT 0
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: LIST
39187: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39188: LD_VAR 0 6
39192: PPUSH
39193: CALL_OW 257
39197: PUSH
39198: LD_INT 11
39200: EQUAL
39201: IFFALSE 39222
// points := [ 30 , 10 , 5 ] ;
39203: LD_ADDR_VAR 0 9
39207: PUSH
39208: LD_INT 30
39210: PUSH
39211: LD_INT 10
39213: PUSH
39214: LD_INT 5
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: LIST
39221: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39222: LD_VAR 0 1
39226: PPUSH
39227: LD_INT 5
39229: PPUSH
39230: CALL_OW 321
39234: PUSH
39235: LD_INT 2
39237: EQUAL
39238: IFFALSE 39255
// bpoints := bpoints * 1.8 ;
39240: LD_ADDR_VAR 0 10
39244: PUSH
39245: LD_VAR 0 10
39249: PUSH
39250: LD_REAL  1.80000000000000E+0000
39253: MUL
39254: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39255: LD_VAR 0 6
39259: PPUSH
39260: CALL_OW 257
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: LD_INT 2
39270: PUSH
39271: LD_INT 3
39273: PUSH
39274: LD_INT 4
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: IN
39283: PUSH
39284: LD_VAR 0 1
39288: PPUSH
39289: LD_INT 51
39291: PPUSH
39292: CALL_OW 321
39296: PUSH
39297: LD_INT 2
39299: EQUAL
39300: AND
39301: IFFALSE 39318
// bpoints := bpoints * 1.2 ;
39303: LD_ADDR_VAR 0 10
39307: PUSH
39308: LD_VAR 0 10
39312: PUSH
39313: LD_REAL  1.20000000000000E+0000
39316: MUL
39317: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39318: LD_VAR 0 6
39322: PPUSH
39323: CALL_OW 257
39327: PUSH
39328: LD_INT 5
39330: PUSH
39331: LD_INT 7
39333: PUSH
39334: LD_INT 9
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: LIST
39341: IN
39342: PUSH
39343: LD_VAR 0 1
39347: PPUSH
39348: LD_INT 52
39350: PPUSH
39351: CALL_OW 321
39355: PUSH
39356: LD_INT 2
39358: EQUAL
39359: AND
39360: IFFALSE 39377
// bpoints := bpoints * 1.5 ;
39362: LD_ADDR_VAR 0 10
39366: PUSH
39367: LD_VAR 0 10
39371: PUSH
39372: LD_REAL  1.50000000000000E+0000
39375: MUL
39376: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39377: LD_VAR 0 1
39381: PPUSH
39382: LD_INT 66
39384: PPUSH
39385: CALL_OW 321
39389: PUSH
39390: LD_INT 2
39392: EQUAL
39393: IFFALSE 39410
// bpoints := bpoints * 1.1 ;
39395: LD_ADDR_VAR 0 10
39399: PUSH
39400: LD_VAR 0 10
39404: PUSH
39405: LD_REAL  1.10000000000000E+0000
39408: MUL
39409: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39410: LD_ADDR_VAR 0 10
39414: PUSH
39415: LD_VAR 0 10
39419: PUSH
39420: LD_VAR 0 6
39424: PPUSH
39425: LD_INT 1
39427: PPUSH
39428: CALL_OW 259
39432: PUSH
39433: LD_REAL  1.15000000000000E+0000
39436: MUL
39437: MUL
39438: ST_TO_ADDR
// end ; unit_vehicle :
39439: GO 40267
39441: LD_INT 2
39443: DOUBLE
39444: EQUAL
39445: IFTRUE 39449
39447: GO 40255
39449: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39450: LD_VAR 0 6
39454: PPUSH
39455: CALL_OW 264
39459: PUSH
39460: LD_INT 2
39462: PUSH
39463: LD_INT 42
39465: PUSH
39466: LD_INT 24
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: LIST
39473: IN
39474: IFFALSE 39495
// points := [ 25 , 5 , 3 ] ;
39476: LD_ADDR_VAR 0 9
39480: PUSH
39481: LD_INT 25
39483: PUSH
39484: LD_INT 5
39486: PUSH
39487: LD_INT 3
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: LIST
39494: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39495: LD_VAR 0 6
39499: PPUSH
39500: CALL_OW 264
39504: PUSH
39505: LD_INT 4
39507: PUSH
39508: LD_INT 43
39510: PUSH
39511: LD_INT 25
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: LIST
39518: IN
39519: IFFALSE 39540
// points := [ 40 , 15 , 5 ] ;
39521: LD_ADDR_VAR 0 9
39525: PUSH
39526: LD_INT 40
39528: PUSH
39529: LD_INT 15
39531: PUSH
39532: LD_INT 5
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: LIST
39539: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39540: LD_VAR 0 6
39544: PPUSH
39545: CALL_OW 264
39549: PUSH
39550: LD_INT 3
39552: PUSH
39553: LD_INT 23
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: IN
39560: IFFALSE 39581
// points := [ 7 , 25 , 8 ] ;
39562: LD_ADDR_VAR 0 9
39566: PUSH
39567: LD_INT 7
39569: PUSH
39570: LD_INT 25
39572: PUSH
39573: LD_INT 8
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: LIST
39580: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39581: LD_VAR 0 6
39585: PPUSH
39586: CALL_OW 264
39590: PUSH
39591: LD_INT 5
39593: PUSH
39594: LD_INT 27
39596: PUSH
39597: LD_INT 44
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: LIST
39604: IN
39605: IFFALSE 39626
// points := [ 14 , 50 , 16 ] ;
39607: LD_ADDR_VAR 0 9
39611: PUSH
39612: LD_INT 14
39614: PUSH
39615: LD_INT 50
39617: PUSH
39618: LD_INT 16
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: LIST
39625: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39626: LD_VAR 0 6
39630: PPUSH
39631: CALL_OW 264
39635: PUSH
39636: LD_INT 6
39638: PUSH
39639: LD_INT 46
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: IN
39646: IFFALSE 39667
// points := [ 32 , 120 , 70 ] ;
39648: LD_ADDR_VAR 0 9
39652: PUSH
39653: LD_INT 32
39655: PUSH
39656: LD_INT 120
39658: PUSH
39659: LD_INT 70
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: LIST
39666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39667: LD_VAR 0 6
39671: PPUSH
39672: CALL_OW 264
39676: PUSH
39677: LD_INT 7
39679: PUSH
39680: LD_INT 28
39682: PUSH
39683: LD_INT 45
39685: PUSH
39686: LD_INT 92
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: IN
39695: IFFALSE 39716
// points := [ 35 , 20 , 45 ] ;
39697: LD_ADDR_VAR 0 9
39701: PUSH
39702: LD_INT 35
39704: PUSH
39705: LD_INT 20
39707: PUSH
39708: LD_INT 45
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: LIST
39715: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39716: LD_VAR 0 6
39720: PPUSH
39721: CALL_OW 264
39725: PUSH
39726: LD_INT 47
39728: PUSH
39729: EMPTY
39730: LIST
39731: IN
39732: IFFALSE 39753
// points := [ 67 , 45 , 75 ] ;
39734: LD_ADDR_VAR 0 9
39738: PUSH
39739: LD_INT 67
39741: PUSH
39742: LD_INT 45
39744: PUSH
39745: LD_INT 75
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: LIST
39752: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39753: LD_VAR 0 6
39757: PPUSH
39758: CALL_OW 264
39762: PUSH
39763: LD_INT 26
39765: PUSH
39766: EMPTY
39767: LIST
39768: IN
39769: IFFALSE 39790
// points := [ 120 , 30 , 80 ] ;
39771: LD_ADDR_VAR 0 9
39775: PUSH
39776: LD_INT 120
39778: PUSH
39779: LD_INT 30
39781: PUSH
39782: LD_INT 80
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: LIST
39789: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39790: LD_VAR 0 6
39794: PPUSH
39795: CALL_OW 264
39799: PUSH
39800: LD_INT 22
39802: PUSH
39803: EMPTY
39804: LIST
39805: IN
39806: IFFALSE 39827
// points := [ 40 , 1 , 1 ] ;
39808: LD_ADDR_VAR 0 9
39812: PUSH
39813: LD_INT 40
39815: PUSH
39816: LD_INT 1
39818: PUSH
39819: LD_INT 1
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: LIST
39826: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39827: LD_VAR 0 6
39831: PPUSH
39832: CALL_OW 264
39836: PUSH
39837: LD_INT 29
39839: PUSH
39840: EMPTY
39841: LIST
39842: IN
39843: IFFALSE 39864
// points := [ 70 , 200 , 400 ] ;
39845: LD_ADDR_VAR 0 9
39849: PUSH
39850: LD_INT 70
39852: PUSH
39853: LD_INT 200
39855: PUSH
39856: LD_INT 400
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: LIST
39863: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39864: LD_VAR 0 6
39868: PPUSH
39869: CALL_OW 264
39873: PUSH
39874: LD_INT 14
39876: PUSH
39877: LD_INT 53
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: IN
39884: IFFALSE 39905
// points := [ 40 , 10 , 20 ] ;
39886: LD_ADDR_VAR 0 9
39890: PUSH
39891: LD_INT 40
39893: PUSH
39894: LD_INT 10
39896: PUSH
39897: LD_INT 20
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: LIST
39904: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39905: LD_VAR 0 6
39909: PPUSH
39910: CALL_OW 264
39914: PUSH
39915: LD_INT 9
39917: PUSH
39918: EMPTY
39919: LIST
39920: IN
39921: IFFALSE 39942
// points := [ 5 , 70 , 20 ] ;
39923: LD_ADDR_VAR 0 9
39927: PUSH
39928: LD_INT 5
39930: PUSH
39931: LD_INT 70
39933: PUSH
39934: LD_INT 20
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: LIST
39941: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39942: LD_VAR 0 6
39946: PPUSH
39947: CALL_OW 264
39951: PUSH
39952: LD_INT 10
39954: PUSH
39955: EMPTY
39956: LIST
39957: IN
39958: IFFALSE 39979
// points := [ 35 , 110 , 70 ] ;
39960: LD_ADDR_VAR 0 9
39964: PUSH
39965: LD_INT 35
39967: PUSH
39968: LD_INT 110
39970: PUSH
39971: LD_INT 70
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: LIST
39978: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39979: LD_VAR 0 6
39983: PPUSH
39984: CALL_OW 265
39988: PUSH
39989: LD_INT 25
39991: EQUAL
39992: IFFALSE 40013
// points := [ 80 , 65 , 100 ] ;
39994: LD_ADDR_VAR 0 9
39998: PUSH
39999: LD_INT 80
40001: PUSH
40002: LD_INT 65
40004: PUSH
40005: LD_INT 100
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: LIST
40012: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40013: LD_VAR 0 6
40017: PPUSH
40018: CALL_OW 263
40022: PUSH
40023: LD_INT 1
40025: EQUAL
40026: IFFALSE 40061
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40028: LD_ADDR_VAR 0 10
40032: PUSH
40033: LD_VAR 0 10
40037: PUSH
40038: LD_VAR 0 6
40042: PPUSH
40043: CALL_OW 311
40047: PPUSH
40048: LD_INT 3
40050: PPUSH
40051: CALL_OW 259
40055: PUSH
40056: LD_INT 4
40058: MUL
40059: MUL
40060: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40061: LD_VAR 0 6
40065: PPUSH
40066: CALL_OW 263
40070: PUSH
40071: LD_INT 2
40073: EQUAL
40074: IFFALSE 40125
// begin j := IsControledBy ( i ) ;
40076: LD_ADDR_VAR 0 7
40080: PUSH
40081: LD_VAR 0 6
40085: PPUSH
40086: CALL_OW 312
40090: ST_TO_ADDR
// if j then
40091: LD_VAR 0 7
40095: IFFALSE 40125
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40097: LD_ADDR_VAR 0 10
40101: PUSH
40102: LD_VAR 0 10
40106: PUSH
40107: LD_VAR 0 7
40111: PPUSH
40112: LD_INT 3
40114: PPUSH
40115: CALL_OW 259
40119: PUSH
40120: LD_INT 3
40122: MUL
40123: MUL
40124: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40125: LD_VAR 0 6
40129: PPUSH
40130: CALL_OW 264
40134: PUSH
40135: LD_INT 5
40137: PUSH
40138: LD_INT 6
40140: PUSH
40141: LD_INT 46
40143: PUSH
40144: LD_INT 44
40146: PUSH
40147: LD_INT 47
40149: PUSH
40150: LD_INT 45
40152: PUSH
40153: LD_INT 28
40155: PUSH
40156: LD_INT 7
40158: PUSH
40159: LD_INT 27
40161: PUSH
40162: LD_INT 29
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: IN
40177: PUSH
40178: LD_VAR 0 1
40182: PPUSH
40183: LD_INT 52
40185: PPUSH
40186: CALL_OW 321
40190: PUSH
40191: LD_INT 2
40193: EQUAL
40194: AND
40195: IFFALSE 40212
// bpoints := bpoints * 1.2 ;
40197: LD_ADDR_VAR 0 10
40201: PUSH
40202: LD_VAR 0 10
40206: PUSH
40207: LD_REAL  1.20000000000000E+0000
40210: MUL
40211: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40212: LD_VAR 0 6
40216: PPUSH
40217: CALL_OW 264
40221: PUSH
40222: LD_INT 6
40224: PUSH
40225: LD_INT 46
40227: PUSH
40228: LD_INT 47
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: LIST
40235: IN
40236: IFFALSE 40253
// bpoints := bpoints * 1.2 ;
40238: LD_ADDR_VAR 0 10
40242: PUSH
40243: LD_VAR 0 10
40247: PUSH
40248: LD_REAL  1.20000000000000E+0000
40251: MUL
40252: ST_TO_ADDR
// end ; unit_building :
40253: GO 40267
40255: LD_INT 3
40257: DOUBLE
40258: EQUAL
40259: IFTRUE 40263
40261: GO 40266
40263: POP
// ; end ;
40264: GO 40267
40266: POP
// for j = 1 to 3 do
40267: LD_ADDR_VAR 0 7
40271: PUSH
40272: DOUBLE
40273: LD_INT 1
40275: DEC
40276: ST_TO_ADDR
40277: LD_INT 3
40279: PUSH
40280: FOR_TO
40281: IFFALSE 40334
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40283: LD_ADDR_VAR 0 5
40287: PUSH
40288: LD_VAR 0 5
40292: PPUSH
40293: LD_VAR 0 7
40297: PPUSH
40298: LD_VAR 0 5
40302: PUSH
40303: LD_VAR 0 7
40307: ARRAY
40308: PUSH
40309: LD_VAR 0 9
40313: PUSH
40314: LD_VAR 0 7
40318: ARRAY
40319: PUSH
40320: LD_VAR 0 10
40324: MUL
40325: PLUS
40326: PPUSH
40327: CALL_OW 1
40331: ST_TO_ADDR
40332: GO 40280
40334: POP
40335: POP
// end ;
40336: GO 38815
40338: POP
40339: POP
// result := Replace ( result , 4 , tmp ) ;
40340: LD_ADDR_VAR 0 5
40344: PUSH
40345: LD_VAR 0 5
40349: PPUSH
40350: LD_INT 4
40352: PPUSH
40353: LD_VAR 0 8
40357: PPUSH
40358: CALL_OW 1
40362: ST_TO_ADDR
// end ;
40363: LD_VAR 0 5
40367: RET
// export function DangerAtRange ( unit , range ) ; begin
40368: LD_INT 0
40370: PPUSH
// if not unit then
40371: LD_VAR 0 1
40375: NOT
40376: IFFALSE 40380
// exit ;
40378: GO 40425
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40380: LD_ADDR_VAR 0 3
40384: PUSH
40385: LD_VAR 0 1
40389: PPUSH
40390: CALL_OW 255
40394: PPUSH
40395: LD_VAR 0 1
40399: PPUSH
40400: CALL_OW 250
40404: PPUSH
40405: LD_VAR 0 1
40409: PPUSH
40410: CALL_OW 251
40414: PPUSH
40415: LD_VAR 0 2
40419: PPUSH
40420: CALL 38667 0 4
40424: ST_TO_ADDR
// end ;
40425: LD_VAR 0 3
40429: RET
// export function DangerInArea ( side , area ) ; begin
40430: LD_INT 0
40432: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40433: LD_ADDR_VAR 0 3
40437: PUSH
40438: LD_VAR 0 2
40442: PPUSH
40443: LD_INT 81
40445: PUSH
40446: LD_VAR 0 1
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PPUSH
40455: CALL_OW 70
40459: ST_TO_ADDR
// end ;
40460: LD_VAR 0 3
40464: RET
// export function IsExtension ( b ) ; begin
40465: LD_INT 0
40467: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40468: LD_ADDR_VAR 0 2
40472: PUSH
40473: LD_VAR 0 1
40477: PUSH
40478: LD_INT 23
40480: PUSH
40481: LD_INT 20
40483: PUSH
40484: LD_INT 22
40486: PUSH
40487: LD_INT 17
40489: PUSH
40490: LD_INT 24
40492: PUSH
40493: LD_INT 21
40495: PUSH
40496: LD_INT 19
40498: PUSH
40499: LD_INT 16
40501: PUSH
40502: LD_INT 25
40504: PUSH
40505: LD_INT 18
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: IN
40520: ST_TO_ADDR
// end ;
40521: LD_VAR 0 2
40525: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40526: LD_INT 0
40528: PPUSH
40529: PPUSH
40530: PPUSH
// result := [ ] ;
40531: LD_ADDR_VAR 0 4
40535: PUSH
40536: EMPTY
40537: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40538: LD_ADDR_VAR 0 5
40542: PUSH
40543: LD_VAR 0 2
40547: PPUSH
40548: LD_INT 21
40550: PUSH
40551: LD_INT 3
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PPUSH
40558: CALL_OW 70
40562: ST_TO_ADDR
// if not tmp then
40563: LD_VAR 0 5
40567: NOT
40568: IFFALSE 40572
// exit ;
40570: GO 40636
// if checkLink then
40572: LD_VAR 0 3
40576: IFFALSE 40626
// begin for i in tmp do
40578: LD_ADDR_VAR 0 6
40582: PUSH
40583: LD_VAR 0 5
40587: PUSH
40588: FOR_IN
40589: IFFALSE 40624
// if GetBase ( i ) <> base then
40591: LD_VAR 0 6
40595: PPUSH
40596: CALL_OW 274
40600: PUSH
40601: LD_VAR 0 1
40605: NONEQUAL
40606: IFFALSE 40622
// ComLinkToBase ( base , i ) ;
40608: LD_VAR 0 1
40612: PPUSH
40613: LD_VAR 0 6
40617: PPUSH
40618: CALL_OW 169
40622: GO 40588
40624: POP
40625: POP
// end ; result := tmp ;
40626: LD_ADDR_VAR 0 4
40630: PUSH
40631: LD_VAR 0 5
40635: ST_TO_ADDR
// end ;
40636: LD_VAR 0 4
40640: RET
// export function ComComplete ( units , b ) ; var i ; begin
40641: LD_INT 0
40643: PPUSH
40644: PPUSH
// if not units then
40645: LD_VAR 0 1
40649: NOT
40650: IFFALSE 40654
// exit ;
40652: GO 40744
// for i in units do
40654: LD_ADDR_VAR 0 4
40658: PUSH
40659: LD_VAR 0 1
40663: PUSH
40664: FOR_IN
40665: IFFALSE 40742
// if BuildingStatus ( b ) = bs_build then
40667: LD_VAR 0 2
40671: PPUSH
40672: CALL_OW 461
40676: PUSH
40677: LD_INT 1
40679: EQUAL
40680: IFFALSE 40740
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40682: LD_VAR 0 4
40686: PPUSH
40687: LD_STRING h
40689: PUSH
40690: LD_VAR 0 2
40694: PPUSH
40695: CALL_OW 250
40699: PUSH
40700: LD_VAR 0 2
40704: PPUSH
40705: CALL_OW 251
40709: PUSH
40710: LD_VAR 0 2
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: PUSH
40733: EMPTY
40734: LIST
40735: PPUSH
40736: CALL_OW 446
40740: GO 40664
40742: POP
40743: POP
// end ;
40744: LD_VAR 0 3
40748: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40749: LD_INT 0
40751: PPUSH
40752: PPUSH
40753: PPUSH
40754: PPUSH
40755: PPUSH
40756: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40757: LD_VAR 0 1
40761: NOT
40762: PUSH
40763: LD_VAR 0 1
40767: PPUSH
40768: CALL_OW 263
40772: PUSH
40773: LD_INT 2
40775: NONEQUAL
40776: OR
40777: IFFALSE 40781
// exit ;
40779: GO 41097
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40781: LD_ADDR_VAR 0 6
40785: PUSH
40786: LD_INT 22
40788: PUSH
40789: LD_VAR 0 1
40793: PPUSH
40794: CALL_OW 255
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 2
40805: PUSH
40806: LD_INT 30
40808: PUSH
40809: LD_INT 36
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 34
40818: PUSH
40819: LD_INT 31
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: LIST
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PPUSH
40835: CALL_OW 69
40839: ST_TO_ADDR
// if not tmp then
40840: LD_VAR 0 6
40844: NOT
40845: IFFALSE 40849
// exit ;
40847: GO 41097
// result := [ ] ;
40849: LD_ADDR_VAR 0 2
40853: PUSH
40854: EMPTY
40855: ST_TO_ADDR
// for i in tmp do
40856: LD_ADDR_VAR 0 3
40860: PUSH
40861: LD_VAR 0 6
40865: PUSH
40866: FOR_IN
40867: IFFALSE 40938
// begin t := UnitsInside ( i ) ;
40869: LD_ADDR_VAR 0 4
40873: PUSH
40874: LD_VAR 0 3
40878: PPUSH
40879: CALL_OW 313
40883: ST_TO_ADDR
// if t then
40884: LD_VAR 0 4
40888: IFFALSE 40936
// for j in t do
40890: LD_ADDR_VAR 0 7
40894: PUSH
40895: LD_VAR 0 4
40899: PUSH
40900: FOR_IN
40901: IFFALSE 40934
// result := Replace ( result , result + 1 , j ) ;
40903: LD_ADDR_VAR 0 2
40907: PUSH
40908: LD_VAR 0 2
40912: PPUSH
40913: LD_VAR 0 2
40917: PUSH
40918: LD_INT 1
40920: PLUS
40921: PPUSH
40922: LD_VAR 0 7
40926: PPUSH
40927: CALL_OW 1
40931: ST_TO_ADDR
40932: GO 40900
40934: POP
40935: POP
// end ;
40936: GO 40866
40938: POP
40939: POP
// if not result then
40940: LD_VAR 0 2
40944: NOT
40945: IFFALSE 40949
// exit ;
40947: GO 41097
// mech := result [ 1 ] ;
40949: LD_ADDR_VAR 0 5
40953: PUSH
40954: LD_VAR 0 2
40958: PUSH
40959: LD_INT 1
40961: ARRAY
40962: ST_TO_ADDR
// if result > 1 then
40963: LD_VAR 0 2
40967: PUSH
40968: LD_INT 1
40970: GREATER
40971: IFFALSE 41083
// begin for i = 2 to result do
40973: LD_ADDR_VAR 0 3
40977: PUSH
40978: DOUBLE
40979: LD_INT 2
40981: DEC
40982: ST_TO_ADDR
40983: LD_VAR 0 2
40987: PUSH
40988: FOR_TO
40989: IFFALSE 41081
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40991: LD_ADDR_VAR 0 4
40995: PUSH
40996: LD_VAR 0 2
41000: PUSH
41001: LD_VAR 0 3
41005: ARRAY
41006: PPUSH
41007: LD_INT 3
41009: PPUSH
41010: CALL_OW 259
41014: PUSH
41015: LD_VAR 0 2
41019: PUSH
41020: LD_VAR 0 3
41024: ARRAY
41025: PPUSH
41026: CALL_OW 432
41030: MINUS
41031: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41032: LD_VAR 0 4
41036: PUSH
41037: LD_VAR 0 5
41041: PPUSH
41042: LD_INT 3
41044: PPUSH
41045: CALL_OW 259
41049: PUSH
41050: LD_VAR 0 5
41054: PPUSH
41055: CALL_OW 432
41059: MINUS
41060: GREATEREQUAL
41061: IFFALSE 41079
// mech := result [ i ] ;
41063: LD_ADDR_VAR 0 5
41067: PUSH
41068: LD_VAR 0 2
41072: PUSH
41073: LD_VAR 0 3
41077: ARRAY
41078: ST_TO_ADDR
// end ;
41079: GO 40988
41081: POP
41082: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41083: LD_VAR 0 1
41087: PPUSH
41088: LD_VAR 0 5
41092: PPUSH
41093: CALL_OW 135
// end ;
41097: LD_VAR 0 2
41101: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41102: LD_INT 0
41104: PPUSH
41105: PPUSH
41106: PPUSH
41107: PPUSH
41108: PPUSH
41109: PPUSH
41110: PPUSH
41111: PPUSH
41112: PPUSH
41113: PPUSH
41114: PPUSH
41115: PPUSH
41116: PPUSH
// result := [ ] ;
41117: LD_ADDR_VAR 0 7
41121: PUSH
41122: EMPTY
41123: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41124: LD_VAR 0 1
41128: PPUSH
41129: CALL_OW 266
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: LD_INT 1
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: IN
41144: NOT
41145: IFFALSE 41149
// exit ;
41147: GO 42783
// if name then
41149: LD_VAR 0 3
41153: IFFALSE 41169
// SetBName ( base_dep , name ) ;
41155: LD_VAR 0 1
41159: PPUSH
41160: LD_VAR 0 3
41164: PPUSH
41165: CALL_OW 500
// base := GetBase ( base_dep ) ;
41169: LD_ADDR_VAR 0 15
41173: PUSH
41174: LD_VAR 0 1
41178: PPUSH
41179: CALL_OW 274
41183: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41184: LD_ADDR_VAR 0 16
41188: PUSH
41189: LD_VAR 0 1
41193: PPUSH
41194: CALL_OW 255
41198: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41199: LD_ADDR_VAR 0 17
41203: PUSH
41204: LD_VAR 0 1
41208: PPUSH
41209: CALL_OW 248
41213: ST_TO_ADDR
// if sources then
41214: LD_VAR 0 5
41218: IFFALSE 41265
// for i = 1 to 3 do
41220: LD_ADDR_VAR 0 8
41224: PUSH
41225: DOUBLE
41226: LD_INT 1
41228: DEC
41229: ST_TO_ADDR
41230: LD_INT 3
41232: PUSH
41233: FOR_TO
41234: IFFALSE 41263
// AddResourceType ( base , i , sources [ i ] ) ;
41236: LD_VAR 0 15
41240: PPUSH
41241: LD_VAR 0 8
41245: PPUSH
41246: LD_VAR 0 5
41250: PUSH
41251: LD_VAR 0 8
41255: ARRAY
41256: PPUSH
41257: CALL_OW 276
41261: GO 41233
41263: POP
41264: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41265: LD_ADDR_VAR 0 18
41269: PUSH
41270: LD_VAR 0 15
41274: PPUSH
41275: LD_VAR 0 2
41279: PPUSH
41280: LD_INT 1
41282: PPUSH
41283: CALL 40526 0 3
41287: ST_TO_ADDR
// InitHc ;
41288: CALL_OW 19
// InitUc ;
41292: CALL_OW 18
// uc_side := side ;
41296: LD_ADDR_OWVAR 20
41300: PUSH
41301: LD_VAR 0 16
41305: ST_TO_ADDR
// uc_nation := nation ;
41306: LD_ADDR_OWVAR 21
41310: PUSH
41311: LD_VAR 0 17
41315: ST_TO_ADDR
// if buildings then
41316: LD_VAR 0 18
41320: IFFALSE 42642
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41322: LD_ADDR_VAR 0 19
41326: PUSH
41327: LD_VAR 0 18
41331: PPUSH
41332: LD_INT 2
41334: PUSH
41335: LD_INT 30
41337: PUSH
41338: LD_INT 29
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 30
41347: PUSH
41348: LD_INT 30
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: LIST
41359: PPUSH
41360: CALL_OW 72
41364: ST_TO_ADDR
// if tmp then
41365: LD_VAR 0 19
41369: IFFALSE 41417
// for i in tmp do
41371: LD_ADDR_VAR 0 8
41375: PUSH
41376: LD_VAR 0 19
41380: PUSH
41381: FOR_IN
41382: IFFALSE 41415
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41384: LD_VAR 0 8
41388: PPUSH
41389: CALL_OW 250
41393: PPUSH
41394: LD_VAR 0 8
41398: PPUSH
41399: CALL_OW 251
41403: PPUSH
41404: LD_VAR 0 16
41408: PPUSH
41409: CALL_OW 441
41413: GO 41381
41415: POP
41416: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41417: LD_VAR 0 18
41421: PPUSH
41422: LD_INT 2
41424: PUSH
41425: LD_INT 30
41427: PUSH
41428: LD_INT 32
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 30
41437: PUSH
41438: LD_INT 33
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: LIST
41449: PPUSH
41450: CALL_OW 72
41454: IFFALSE 41542
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41456: LD_ADDR_VAR 0 8
41460: PUSH
41461: LD_VAR 0 18
41465: PPUSH
41466: LD_INT 2
41468: PUSH
41469: LD_INT 30
41471: PUSH
41472: LD_INT 32
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 30
41481: PUSH
41482: LD_INT 33
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: LIST
41493: PPUSH
41494: CALL_OW 72
41498: PUSH
41499: FOR_IN
41500: IFFALSE 41540
// begin if not GetBWeapon ( i ) then
41502: LD_VAR 0 8
41506: PPUSH
41507: CALL_OW 269
41511: NOT
41512: IFFALSE 41538
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41514: LD_VAR 0 8
41518: PPUSH
41519: LD_VAR 0 8
41523: PPUSH
41524: LD_VAR 0 2
41528: PPUSH
41529: CALL 42788 0 2
41533: PPUSH
41534: CALL_OW 431
// end ;
41538: GO 41499
41540: POP
41541: POP
// end ; for i = 1 to personel do
41542: LD_ADDR_VAR 0 8
41546: PUSH
41547: DOUBLE
41548: LD_INT 1
41550: DEC
41551: ST_TO_ADDR
41552: LD_VAR 0 6
41556: PUSH
41557: FOR_TO
41558: IFFALSE 42622
// begin if i > 4 then
41560: LD_VAR 0 8
41564: PUSH
41565: LD_INT 4
41567: GREATER
41568: IFFALSE 41572
// break ;
41570: GO 42622
// case i of 1 :
41572: LD_VAR 0 8
41576: PUSH
41577: LD_INT 1
41579: DOUBLE
41580: EQUAL
41581: IFTRUE 41585
41583: GO 41665
41585: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41586: LD_ADDR_VAR 0 12
41590: PUSH
41591: LD_VAR 0 18
41595: PPUSH
41596: LD_INT 22
41598: PUSH
41599: LD_VAR 0 16
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 58
41610: PUSH
41611: EMPTY
41612: LIST
41613: PUSH
41614: LD_INT 2
41616: PUSH
41617: LD_INT 30
41619: PUSH
41620: LD_INT 32
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 30
41629: PUSH
41630: LD_INT 4
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 30
41639: PUSH
41640: LD_INT 5
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: LIST
41657: PPUSH
41658: CALL_OW 72
41662: ST_TO_ADDR
41663: GO 41887
41665: LD_INT 2
41667: DOUBLE
41668: EQUAL
41669: IFTRUE 41673
41671: GO 41735
41673: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41674: LD_ADDR_VAR 0 12
41678: PUSH
41679: LD_VAR 0 18
41683: PPUSH
41684: LD_INT 22
41686: PUSH
41687: LD_VAR 0 16
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 2
41698: PUSH
41699: LD_INT 30
41701: PUSH
41702: LD_INT 0
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 30
41711: PUSH
41712: LD_INT 1
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: LIST
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PPUSH
41728: CALL_OW 72
41732: ST_TO_ADDR
41733: GO 41887
41735: LD_INT 3
41737: DOUBLE
41738: EQUAL
41739: IFTRUE 41743
41741: GO 41805
41743: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41744: LD_ADDR_VAR 0 12
41748: PUSH
41749: LD_VAR 0 18
41753: PPUSH
41754: LD_INT 22
41756: PUSH
41757: LD_VAR 0 16
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 2
41768: PUSH
41769: LD_INT 30
41771: PUSH
41772: LD_INT 2
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 30
41781: PUSH
41782: LD_INT 3
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: LIST
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PPUSH
41798: CALL_OW 72
41802: ST_TO_ADDR
41803: GO 41887
41805: LD_INT 4
41807: DOUBLE
41808: EQUAL
41809: IFTRUE 41813
41811: GO 41886
41813: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41814: LD_ADDR_VAR 0 12
41818: PUSH
41819: LD_VAR 0 18
41823: PPUSH
41824: LD_INT 22
41826: PUSH
41827: LD_VAR 0 16
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 2
41838: PUSH
41839: LD_INT 30
41841: PUSH
41842: LD_INT 6
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 30
41851: PUSH
41852: LD_INT 7
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 30
41861: PUSH
41862: LD_INT 8
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PPUSH
41879: CALL_OW 72
41883: ST_TO_ADDR
41884: GO 41887
41886: POP
// if i = 1 then
41887: LD_VAR 0 8
41891: PUSH
41892: LD_INT 1
41894: EQUAL
41895: IFFALSE 42006
// begin tmp := [ ] ;
41897: LD_ADDR_VAR 0 19
41901: PUSH
41902: EMPTY
41903: ST_TO_ADDR
// for j in f do
41904: LD_ADDR_VAR 0 9
41908: PUSH
41909: LD_VAR 0 12
41913: PUSH
41914: FOR_IN
41915: IFFALSE 41988
// if GetBType ( j ) = b_bunker then
41917: LD_VAR 0 9
41921: PPUSH
41922: CALL_OW 266
41926: PUSH
41927: LD_INT 32
41929: EQUAL
41930: IFFALSE 41957
// tmp := Insert ( tmp , 1 , j ) else
41932: LD_ADDR_VAR 0 19
41936: PUSH
41937: LD_VAR 0 19
41941: PPUSH
41942: LD_INT 1
41944: PPUSH
41945: LD_VAR 0 9
41949: PPUSH
41950: CALL_OW 2
41954: ST_TO_ADDR
41955: GO 41986
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41957: LD_ADDR_VAR 0 19
41961: PUSH
41962: LD_VAR 0 19
41966: PPUSH
41967: LD_VAR 0 19
41971: PUSH
41972: LD_INT 1
41974: PLUS
41975: PPUSH
41976: LD_VAR 0 9
41980: PPUSH
41981: CALL_OW 2
41985: ST_TO_ADDR
41986: GO 41914
41988: POP
41989: POP
// if tmp then
41990: LD_VAR 0 19
41994: IFFALSE 42006
// f := tmp ;
41996: LD_ADDR_VAR 0 12
42000: PUSH
42001: LD_VAR 0 19
42005: ST_TO_ADDR
// end ; x := personel [ i ] ;
42006: LD_ADDR_VAR 0 13
42010: PUSH
42011: LD_VAR 0 6
42015: PUSH
42016: LD_VAR 0 8
42020: ARRAY
42021: ST_TO_ADDR
// if x = - 1 then
42022: LD_VAR 0 13
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: EQUAL
42031: IFFALSE 42240
// begin for j in f do
42033: LD_ADDR_VAR 0 9
42037: PUSH
42038: LD_VAR 0 12
42042: PUSH
42043: FOR_IN
42044: IFFALSE 42236
// repeat InitHc ;
42046: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42050: LD_VAR 0 9
42054: PPUSH
42055: CALL_OW 266
42059: PUSH
42060: LD_INT 5
42062: EQUAL
42063: IFFALSE 42133
// begin if UnitsInside ( j ) < 3 then
42065: LD_VAR 0 9
42069: PPUSH
42070: CALL_OW 313
42074: PUSH
42075: LD_INT 3
42077: LESS
42078: IFFALSE 42114
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42080: LD_INT 0
42082: PPUSH
42083: LD_INT 5
42085: PUSH
42086: LD_INT 8
42088: PUSH
42089: LD_INT 9
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: LIST
42096: PUSH
42097: LD_VAR 0 17
42101: ARRAY
42102: PPUSH
42103: LD_VAR 0 4
42107: PPUSH
42108: CALL_OW 380
42112: GO 42131
// PrepareHuman ( false , i , skill ) ;
42114: LD_INT 0
42116: PPUSH
42117: LD_VAR 0 8
42121: PPUSH
42122: LD_VAR 0 4
42126: PPUSH
42127: CALL_OW 380
// end else
42131: GO 42150
// PrepareHuman ( false , i , skill ) ;
42133: LD_INT 0
42135: PPUSH
42136: LD_VAR 0 8
42140: PPUSH
42141: LD_VAR 0 4
42145: PPUSH
42146: CALL_OW 380
// un := CreateHuman ;
42150: LD_ADDR_VAR 0 14
42154: PUSH
42155: CALL_OW 44
42159: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42160: LD_ADDR_VAR 0 7
42164: PUSH
42165: LD_VAR 0 7
42169: PPUSH
42170: LD_INT 1
42172: PPUSH
42173: LD_VAR 0 14
42177: PPUSH
42178: CALL_OW 2
42182: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42183: LD_VAR 0 14
42187: PPUSH
42188: LD_VAR 0 9
42192: PPUSH
42193: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42197: LD_VAR 0 9
42201: PPUSH
42202: CALL_OW 313
42206: PUSH
42207: LD_INT 6
42209: EQUAL
42210: PUSH
42211: LD_VAR 0 9
42215: PPUSH
42216: CALL_OW 266
42220: PUSH
42221: LD_INT 32
42223: PUSH
42224: LD_INT 31
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: IN
42231: OR
42232: IFFALSE 42046
42234: GO 42043
42236: POP
42237: POP
// end else
42238: GO 42620
// for j = 1 to x do
42240: LD_ADDR_VAR 0 9
42244: PUSH
42245: DOUBLE
42246: LD_INT 1
42248: DEC
42249: ST_TO_ADDR
42250: LD_VAR 0 13
42254: PUSH
42255: FOR_TO
42256: IFFALSE 42618
// begin InitHc ;
42258: CALL_OW 19
// if not f then
42262: LD_VAR 0 12
42266: NOT
42267: IFFALSE 42356
// begin PrepareHuman ( false , i , skill ) ;
42269: LD_INT 0
42271: PPUSH
42272: LD_VAR 0 8
42276: PPUSH
42277: LD_VAR 0 4
42281: PPUSH
42282: CALL_OW 380
// un := CreateHuman ;
42286: LD_ADDR_VAR 0 14
42290: PUSH
42291: CALL_OW 44
42295: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42296: LD_ADDR_VAR 0 7
42300: PUSH
42301: LD_VAR 0 7
42305: PPUSH
42306: LD_INT 1
42308: PPUSH
42309: LD_VAR 0 14
42313: PPUSH
42314: CALL_OW 2
42318: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42319: LD_VAR 0 14
42323: PPUSH
42324: LD_VAR 0 1
42328: PPUSH
42329: CALL_OW 250
42333: PPUSH
42334: LD_VAR 0 1
42338: PPUSH
42339: CALL_OW 251
42343: PPUSH
42344: LD_INT 10
42346: PPUSH
42347: LD_INT 0
42349: PPUSH
42350: CALL_OW 50
// continue ;
42354: GO 42255
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42356: LD_VAR 0 12
42360: PUSH
42361: LD_INT 1
42363: ARRAY
42364: PPUSH
42365: CALL_OW 313
42369: PUSH
42370: LD_VAR 0 12
42374: PUSH
42375: LD_INT 1
42377: ARRAY
42378: PPUSH
42379: CALL_OW 266
42383: PUSH
42384: LD_INT 32
42386: PUSH
42387: LD_INT 31
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: IN
42394: AND
42395: PUSH
42396: LD_VAR 0 12
42400: PUSH
42401: LD_INT 1
42403: ARRAY
42404: PPUSH
42405: CALL_OW 313
42409: PUSH
42410: LD_INT 6
42412: EQUAL
42413: OR
42414: IFFALSE 42434
// f := Delete ( f , 1 ) ;
42416: LD_ADDR_VAR 0 12
42420: PUSH
42421: LD_VAR 0 12
42425: PPUSH
42426: LD_INT 1
42428: PPUSH
42429: CALL_OW 3
42433: ST_TO_ADDR
// if not f then
42434: LD_VAR 0 12
42438: NOT
42439: IFFALSE 42457
// begin x := x + 2 ;
42441: LD_ADDR_VAR 0 13
42445: PUSH
42446: LD_VAR 0 13
42450: PUSH
42451: LD_INT 2
42453: PLUS
42454: ST_TO_ADDR
// continue ;
42455: GO 42255
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42457: LD_VAR 0 12
42461: PUSH
42462: LD_INT 1
42464: ARRAY
42465: PPUSH
42466: CALL_OW 266
42470: PUSH
42471: LD_INT 5
42473: EQUAL
42474: IFFALSE 42548
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42476: LD_VAR 0 12
42480: PUSH
42481: LD_INT 1
42483: ARRAY
42484: PPUSH
42485: CALL_OW 313
42489: PUSH
42490: LD_INT 3
42492: LESS
42493: IFFALSE 42529
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42495: LD_INT 0
42497: PPUSH
42498: LD_INT 5
42500: PUSH
42501: LD_INT 8
42503: PUSH
42504: LD_INT 9
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: LIST
42511: PUSH
42512: LD_VAR 0 17
42516: ARRAY
42517: PPUSH
42518: LD_VAR 0 4
42522: PPUSH
42523: CALL_OW 380
42527: GO 42546
// PrepareHuman ( false , i , skill ) ;
42529: LD_INT 0
42531: PPUSH
42532: LD_VAR 0 8
42536: PPUSH
42537: LD_VAR 0 4
42541: PPUSH
42542: CALL_OW 380
// end else
42546: GO 42565
// PrepareHuman ( false , i , skill ) ;
42548: LD_INT 0
42550: PPUSH
42551: LD_VAR 0 8
42555: PPUSH
42556: LD_VAR 0 4
42560: PPUSH
42561: CALL_OW 380
// un := CreateHuman ;
42565: LD_ADDR_VAR 0 14
42569: PUSH
42570: CALL_OW 44
42574: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42575: LD_ADDR_VAR 0 7
42579: PUSH
42580: LD_VAR 0 7
42584: PPUSH
42585: LD_INT 1
42587: PPUSH
42588: LD_VAR 0 14
42592: PPUSH
42593: CALL_OW 2
42597: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42598: LD_VAR 0 14
42602: PPUSH
42603: LD_VAR 0 12
42607: PUSH
42608: LD_INT 1
42610: ARRAY
42611: PPUSH
42612: CALL_OW 52
// end ;
42616: GO 42255
42618: POP
42619: POP
// end ;
42620: GO 41557
42622: POP
42623: POP
// result := result ^ buildings ;
42624: LD_ADDR_VAR 0 7
42628: PUSH
42629: LD_VAR 0 7
42633: PUSH
42634: LD_VAR 0 18
42638: ADD
42639: ST_TO_ADDR
// end else
42640: GO 42783
// begin for i = 1 to personel do
42642: LD_ADDR_VAR 0 8
42646: PUSH
42647: DOUBLE
42648: LD_INT 1
42650: DEC
42651: ST_TO_ADDR
42652: LD_VAR 0 6
42656: PUSH
42657: FOR_TO
42658: IFFALSE 42781
// begin if i > 4 then
42660: LD_VAR 0 8
42664: PUSH
42665: LD_INT 4
42667: GREATER
42668: IFFALSE 42672
// break ;
42670: GO 42781
// x := personel [ i ] ;
42672: LD_ADDR_VAR 0 13
42676: PUSH
42677: LD_VAR 0 6
42681: PUSH
42682: LD_VAR 0 8
42686: ARRAY
42687: ST_TO_ADDR
// if x = - 1 then
42688: LD_VAR 0 13
42692: PUSH
42693: LD_INT 1
42695: NEG
42696: EQUAL
42697: IFFALSE 42701
// continue ;
42699: GO 42657
// PrepareHuman ( false , i , skill ) ;
42701: LD_INT 0
42703: PPUSH
42704: LD_VAR 0 8
42708: PPUSH
42709: LD_VAR 0 4
42713: PPUSH
42714: CALL_OW 380
// un := CreateHuman ;
42718: LD_ADDR_VAR 0 14
42722: PUSH
42723: CALL_OW 44
42727: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42728: LD_VAR 0 14
42732: PPUSH
42733: LD_VAR 0 1
42737: PPUSH
42738: CALL_OW 250
42742: PPUSH
42743: LD_VAR 0 1
42747: PPUSH
42748: CALL_OW 251
42752: PPUSH
42753: LD_INT 10
42755: PPUSH
42756: LD_INT 0
42758: PPUSH
42759: CALL_OW 50
// result := result ^ un ;
42763: LD_ADDR_VAR 0 7
42767: PUSH
42768: LD_VAR 0 7
42772: PUSH
42773: LD_VAR 0 14
42777: ADD
42778: ST_TO_ADDR
// end ;
42779: GO 42657
42781: POP
42782: POP
// end ; end ;
42783: LD_VAR 0 7
42787: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42788: LD_INT 0
42790: PPUSH
42791: PPUSH
42792: PPUSH
42793: PPUSH
42794: PPUSH
42795: PPUSH
42796: PPUSH
42797: PPUSH
42798: PPUSH
42799: PPUSH
42800: PPUSH
42801: PPUSH
42802: PPUSH
42803: PPUSH
42804: PPUSH
42805: PPUSH
// result := false ;
42806: LD_ADDR_VAR 0 3
42810: PUSH
42811: LD_INT 0
42813: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42814: LD_VAR 0 1
42818: NOT
42819: PUSH
42820: LD_VAR 0 1
42824: PPUSH
42825: CALL_OW 266
42829: PUSH
42830: LD_INT 32
42832: PUSH
42833: LD_INT 33
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: IN
42840: NOT
42841: OR
42842: IFFALSE 42846
// exit ;
42844: GO 43955
// nat := GetNation ( tower ) ;
42846: LD_ADDR_VAR 0 12
42850: PUSH
42851: LD_VAR 0 1
42855: PPUSH
42856: CALL_OW 248
42860: ST_TO_ADDR
// side := GetSide ( tower ) ;
42861: LD_ADDR_VAR 0 16
42865: PUSH
42866: LD_VAR 0 1
42870: PPUSH
42871: CALL_OW 255
42875: ST_TO_ADDR
// x := GetX ( tower ) ;
42876: LD_ADDR_VAR 0 10
42880: PUSH
42881: LD_VAR 0 1
42885: PPUSH
42886: CALL_OW 250
42890: ST_TO_ADDR
// y := GetY ( tower ) ;
42891: LD_ADDR_VAR 0 11
42895: PUSH
42896: LD_VAR 0 1
42900: PPUSH
42901: CALL_OW 251
42905: ST_TO_ADDR
// if not x or not y then
42906: LD_VAR 0 10
42910: NOT
42911: PUSH
42912: LD_VAR 0 11
42916: NOT
42917: OR
42918: IFFALSE 42922
// exit ;
42920: GO 43955
// weapon := 0 ;
42922: LD_ADDR_VAR 0 18
42926: PUSH
42927: LD_INT 0
42929: ST_TO_ADDR
// fac_list := [ ] ;
42930: LD_ADDR_VAR 0 17
42934: PUSH
42935: EMPTY
42936: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42937: LD_ADDR_VAR 0 6
42941: PUSH
42942: LD_VAR 0 1
42946: PPUSH
42947: CALL_OW 274
42951: PPUSH
42952: LD_VAR 0 2
42956: PPUSH
42957: LD_INT 0
42959: PPUSH
42960: CALL 40526 0 3
42964: PPUSH
42965: LD_INT 30
42967: PUSH
42968: LD_INT 3
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PPUSH
42975: CALL_OW 72
42979: ST_TO_ADDR
// if not factories then
42980: LD_VAR 0 6
42984: NOT
42985: IFFALSE 42989
// exit ;
42987: GO 43955
// for i in factories do
42989: LD_ADDR_VAR 0 8
42993: PUSH
42994: LD_VAR 0 6
42998: PUSH
42999: FOR_IN
43000: IFFALSE 43025
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43002: LD_ADDR_VAR 0 17
43006: PUSH
43007: LD_VAR 0 17
43011: PUSH
43012: LD_VAR 0 8
43016: PPUSH
43017: CALL_OW 478
43021: UNION
43022: ST_TO_ADDR
43023: GO 42999
43025: POP
43026: POP
// if not fac_list then
43027: LD_VAR 0 17
43031: NOT
43032: IFFALSE 43036
// exit ;
43034: GO 43955
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43036: LD_ADDR_VAR 0 5
43040: PUSH
43041: LD_INT 4
43043: PUSH
43044: LD_INT 5
43046: PUSH
43047: LD_INT 9
43049: PUSH
43050: LD_INT 10
43052: PUSH
43053: LD_INT 6
43055: PUSH
43056: LD_INT 7
43058: PUSH
43059: LD_INT 11
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 27
43073: PUSH
43074: LD_INT 28
43076: PUSH
43077: LD_INT 26
43079: PUSH
43080: LD_INT 30
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 43
43091: PUSH
43092: LD_INT 44
43094: PUSH
43095: LD_INT 46
43097: PUSH
43098: LD_INT 45
43100: PUSH
43101: LD_INT 47
43103: PUSH
43104: LD_INT 49
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: LIST
43119: PUSH
43120: LD_VAR 0 12
43124: ARRAY
43125: ST_TO_ADDR
// list := list isect fac_list ;
43126: LD_ADDR_VAR 0 5
43130: PUSH
43131: LD_VAR 0 5
43135: PUSH
43136: LD_VAR 0 17
43140: ISECT
43141: ST_TO_ADDR
// if not list then
43142: LD_VAR 0 5
43146: NOT
43147: IFFALSE 43151
// exit ;
43149: GO 43955
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43151: LD_VAR 0 12
43155: PUSH
43156: LD_INT 3
43158: EQUAL
43159: PUSH
43160: LD_INT 49
43162: PUSH
43163: LD_VAR 0 5
43167: IN
43168: AND
43169: PUSH
43170: LD_INT 31
43172: PPUSH
43173: LD_VAR 0 16
43177: PPUSH
43178: CALL_OW 321
43182: PUSH
43183: LD_INT 2
43185: EQUAL
43186: AND
43187: IFFALSE 43247
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43189: LD_INT 22
43191: PUSH
43192: LD_VAR 0 16
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 35
43203: PUSH
43204: LD_INT 49
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 91
43213: PUSH
43214: LD_VAR 0 1
43218: PUSH
43219: LD_INT 10
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: LIST
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: LIST
43231: PPUSH
43232: CALL_OW 69
43236: NOT
43237: IFFALSE 43247
// weapon := ru_time_lapser ;
43239: LD_ADDR_VAR 0 18
43243: PUSH
43244: LD_INT 49
43246: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43247: LD_VAR 0 12
43251: PUSH
43252: LD_INT 1
43254: PUSH
43255: LD_INT 2
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: IN
43262: PUSH
43263: LD_INT 11
43265: PUSH
43266: LD_VAR 0 5
43270: IN
43271: PUSH
43272: LD_INT 30
43274: PUSH
43275: LD_VAR 0 5
43279: IN
43280: OR
43281: AND
43282: PUSH
43283: LD_INT 6
43285: PPUSH
43286: LD_VAR 0 16
43290: PPUSH
43291: CALL_OW 321
43295: PUSH
43296: LD_INT 2
43298: EQUAL
43299: AND
43300: IFFALSE 43465
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43302: LD_INT 22
43304: PUSH
43305: LD_VAR 0 16
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 2
43316: PUSH
43317: LD_INT 35
43319: PUSH
43320: LD_INT 11
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 35
43329: PUSH
43330: LD_INT 30
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 91
43344: PUSH
43345: LD_VAR 0 1
43349: PUSH
43350: LD_INT 18
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: LIST
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: LIST
43362: PPUSH
43363: CALL_OW 69
43367: NOT
43368: PUSH
43369: LD_INT 22
43371: PUSH
43372: LD_VAR 0 16
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 2
43383: PUSH
43384: LD_INT 30
43386: PUSH
43387: LD_INT 32
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 30
43396: PUSH
43397: LD_INT 33
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 91
43411: PUSH
43412: LD_VAR 0 1
43416: PUSH
43417: LD_INT 12
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: LIST
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: LIST
43429: PUSH
43430: EMPTY
43431: LIST
43432: PPUSH
43433: CALL_OW 69
43437: PUSH
43438: LD_INT 2
43440: GREATER
43441: AND
43442: IFFALSE 43465
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43444: LD_ADDR_VAR 0 18
43448: PUSH
43449: LD_INT 11
43451: PUSH
43452: LD_INT 30
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_VAR 0 12
43463: ARRAY
43464: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43465: LD_VAR 0 18
43469: NOT
43470: PUSH
43471: LD_INT 40
43473: PPUSH
43474: LD_VAR 0 16
43478: PPUSH
43479: CALL_OW 321
43483: PUSH
43484: LD_INT 2
43486: EQUAL
43487: AND
43488: PUSH
43489: LD_INT 7
43491: PUSH
43492: LD_VAR 0 5
43496: IN
43497: PUSH
43498: LD_INT 28
43500: PUSH
43501: LD_VAR 0 5
43505: IN
43506: OR
43507: PUSH
43508: LD_INT 45
43510: PUSH
43511: LD_VAR 0 5
43515: IN
43516: OR
43517: AND
43518: IFFALSE 43772
// begin hex := GetHexInfo ( x , y ) ;
43520: LD_ADDR_VAR 0 4
43524: PUSH
43525: LD_VAR 0 10
43529: PPUSH
43530: LD_VAR 0 11
43534: PPUSH
43535: CALL_OW 546
43539: ST_TO_ADDR
// if hex [ 1 ] then
43540: LD_VAR 0 4
43544: PUSH
43545: LD_INT 1
43547: ARRAY
43548: IFFALSE 43552
// exit ;
43550: GO 43955
// height := hex [ 2 ] ;
43552: LD_ADDR_VAR 0 15
43556: PUSH
43557: LD_VAR 0 4
43561: PUSH
43562: LD_INT 2
43564: ARRAY
43565: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43566: LD_ADDR_VAR 0 14
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: LD_INT 2
43576: PUSH
43577: LD_INT 3
43579: PUSH
43580: LD_INT 5
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: ST_TO_ADDR
// for i in tmp do
43589: LD_ADDR_VAR 0 8
43593: PUSH
43594: LD_VAR 0 14
43598: PUSH
43599: FOR_IN
43600: IFFALSE 43770
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43602: LD_ADDR_VAR 0 9
43606: PUSH
43607: LD_VAR 0 10
43611: PPUSH
43612: LD_VAR 0 8
43616: PPUSH
43617: LD_INT 5
43619: PPUSH
43620: CALL_OW 272
43624: PUSH
43625: LD_VAR 0 11
43629: PPUSH
43630: LD_VAR 0 8
43634: PPUSH
43635: LD_INT 5
43637: PPUSH
43638: CALL_OW 273
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43647: LD_VAR 0 9
43651: PUSH
43652: LD_INT 1
43654: ARRAY
43655: PPUSH
43656: LD_VAR 0 9
43660: PUSH
43661: LD_INT 2
43663: ARRAY
43664: PPUSH
43665: CALL_OW 488
43669: IFFALSE 43768
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43671: LD_ADDR_VAR 0 4
43675: PUSH
43676: LD_VAR 0 9
43680: PUSH
43681: LD_INT 1
43683: ARRAY
43684: PPUSH
43685: LD_VAR 0 9
43689: PUSH
43690: LD_INT 2
43692: ARRAY
43693: PPUSH
43694: CALL_OW 546
43698: ST_TO_ADDR
// if hex [ 1 ] then
43699: LD_VAR 0 4
43703: PUSH
43704: LD_INT 1
43706: ARRAY
43707: IFFALSE 43711
// continue ;
43709: GO 43599
// h := hex [ 2 ] ;
43711: LD_ADDR_VAR 0 13
43715: PUSH
43716: LD_VAR 0 4
43720: PUSH
43721: LD_INT 2
43723: ARRAY
43724: ST_TO_ADDR
// if h + 7 < height then
43725: LD_VAR 0 13
43729: PUSH
43730: LD_INT 7
43732: PLUS
43733: PUSH
43734: LD_VAR 0 15
43738: LESS
43739: IFFALSE 43768
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43741: LD_ADDR_VAR 0 18
43745: PUSH
43746: LD_INT 7
43748: PUSH
43749: LD_INT 28
43751: PUSH
43752: LD_INT 45
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: LIST
43759: PUSH
43760: LD_VAR 0 12
43764: ARRAY
43765: ST_TO_ADDR
// break ;
43766: GO 43770
// end ; end ; end ;
43768: GO 43599
43770: POP
43771: POP
// end ; if not weapon then
43772: LD_VAR 0 18
43776: NOT
43777: IFFALSE 43837
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43779: LD_ADDR_VAR 0 5
43783: PUSH
43784: LD_VAR 0 5
43788: PUSH
43789: LD_INT 11
43791: PUSH
43792: LD_INT 30
43794: PUSH
43795: LD_INT 49
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: LIST
43802: DIFF
43803: ST_TO_ADDR
// if not list then
43804: LD_VAR 0 5
43808: NOT
43809: IFFALSE 43813
// exit ;
43811: GO 43955
// weapon := list [ rand ( 1 , list ) ] ;
43813: LD_ADDR_VAR 0 18
43817: PUSH
43818: LD_VAR 0 5
43822: PUSH
43823: LD_INT 1
43825: PPUSH
43826: LD_VAR 0 5
43830: PPUSH
43831: CALL_OW 12
43835: ARRAY
43836: ST_TO_ADDR
// end ; if weapon then
43837: LD_VAR 0 18
43841: IFFALSE 43955
// begin tmp := CostOfWeapon ( weapon ) ;
43843: LD_ADDR_VAR 0 14
43847: PUSH
43848: LD_VAR 0 18
43852: PPUSH
43853: CALL_OW 451
43857: ST_TO_ADDR
// j := GetBase ( tower ) ;
43858: LD_ADDR_VAR 0 9
43862: PUSH
43863: LD_VAR 0 1
43867: PPUSH
43868: CALL_OW 274
43872: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43873: LD_VAR 0 9
43877: PPUSH
43878: LD_INT 1
43880: PPUSH
43881: CALL_OW 275
43885: PUSH
43886: LD_VAR 0 14
43890: PUSH
43891: LD_INT 1
43893: ARRAY
43894: GREATEREQUAL
43895: PUSH
43896: LD_VAR 0 9
43900: PPUSH
43901: LD_INT 2
43903: PPUSH
43904: CALL_OW 275
43908: PUSH
43909: LD_VAR 0 14
43913: PUSH
43914: LD_INT 2
43916: ARRAY
43917: GREATEREQUAL
43918: AND
43919: PUSH
43920: LD_VAR 0 9
43924: PPUSH
43925: LD_INT 3
43927: PPUSH
43928: CALL_OW 275
43932: PUSH
43933: LD_VAR 0 14
43937: PUSH
43938: LD_INT 3
43940: ARRAY
43941: GREATEREQUAL
43942: AND
43943: IFFALSE 43955
// result := weapon ;
43945: LD_ADDR_VAR 0 3
43949: PUSH
43950: LD_VAR 0 18
43954: ST_TO_ADDR
// end ; end ;
43955: LD_VAR 0 3
43959: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43960: LD_INT 0
43962: PPUSH
43963: PPUSH
// result := true ;
43964: LD_ADDR_VAR 0 3
43968: PUSH
43969: LD_INT 1
43971: ST_TO_ADDR
// if array1 = array2 then
43972: LD_VAR 0 1
43976: PUSH
43977: LD_VAR 0 2
43981: EQUAL
43982: IFFALSE 44042
// begin for i = 1 to array1 do
43984: LD_ADDR_VAR 0 4
43988: PUSH
43989: DOUBLE
43990: LD_INT 1
43992: DEC
43993: ST_TO_ADDR
43994: LD_VAR 0 1
43998: PUSH
43999: FOR_TO
44000: IFFALSE 44038
// if array1 [ i ] <> array2 [ i ] then
44002: LD_VAR 0 1
44006: PUSH
44007: LD_VAR 0 4
44011: ARRAY
44012: PUSH
44013: LD_VAR 0 2
44017: PUSH
44018: LD_VAR 0 4
44022: ARRAY
44023: NONEQUAL
44024: IFFALSE 44036
// begin result := false ;
44026: LD_ADDR_VAR 0 3
44030: PUSH
44031: LD_INT 0
44033: ST_TO_ADDR
// break ;
44034: GO 44038
// end ;
44036: GO 43999
44038: POP
44039: POP
// end else
44040: GO 44050
// result := false ;
44042: LD_ADDR_VAR 0 3
44046: PUSH
44047: LD_INT 0
44049: ST_TO_ADDR
// end ;
44050: LD_VAR 0 3
44054: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44055: LD_INT 0
44057: PPUSH
44058: PPUSH
// if not array1 or not array2 then
44059: LD_VAR 0 1
44063: NOT
44064: PUSH
44065: LD_VAR 0 2
44069: NOT
44070: OR
44071: IFFALSE 44075
// exit ;
44073: GO 44139
// result := true ;
44075: LD_ADDR_VAR 0 3
44079: PUSH
44080: LD_INT 1
44082: ST_TO_ADDR
// for i = 1 to array1 do
44083: LD_ADDR_VAR 0 4
44087: PUSH
44088: DOUBLE
44089: LD_INT 1
44091: DEC
44092: ST_TO_ADDR
44093: LD_VAR 0 1
44097: PUSH
44098: FOR_TO
44099: IFFALSE 44137
// if array1 [ i ] <> array2 [ i ] then
44101: LD_VAR 0 1
44105: PUSH
44106: LD_VAR 0 4
44110: ARRAY
44111: PUSH
44112: LD_VAR 0 2
44116: PUSH
44117: LD_VAR 0 4
44121: ARRAY
44122: NONEQUAL
44123: IFFALSE 44135
// begin result := false ;
44125: LD_ADDR_VAR 0 3
44129: PUSH
44130: LD_INT 0
44132: ST_TO_ADDR
// break ;
44133: GO 44137
// end ;
44135: GO 44098
44137: POP
44138: POP
// end ;
44139: LD_VAR 0 3
44143: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44144: LD_INT 0
44146: PPUSH
44147: PPUSH
44148: PPUSH
// pom := GetBase ( fac ) ;
44149: LD_ADDR_VAR 0 5
44153: PUSH
44154: LD_VAR 0 1
44158: PPUSH
44159: CALL_OW 274
44163: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44164: LD_ADDR_VAR 0 4
44168: PUSH
44169: LD_VAR 0 2
44173: PUSH
44174: LD_INT 1
44176: ARRAY
44177: PPUSH
44178: LD_VAR 0 2
44182: PUSH
44183: LD_INT 2
44185: ARRAY
44186: PPUSH
44187: LD_VAR 0 2
44191: PUSH
44192: LD_INT 3
44194: ARRAY
44195: PPUSH
44196: LD_VAR 0 2
44200: PUSH
44201: LD_INT 4
44203: ARRAY
44204: PPUSH
44205: CALL_OW 449
44209: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44210: LD_ADDR_VAR 0 3
44214: PUSH
44215: LD_VAR 0 5
44219: PPUSH
44220: LD_INT 1
44222: PPUSH
44223: CALL_OW 275
44227: PUSH
44228: LD_VAR 0 4
44232: PUSH
44233: LD_INT 1
44235: ARRAY
44236: GREATEREQUAL
44237: PUSH
44238: LD_VAR 0 5
44242: PPUSH
44243: LD_INT 2
44245: PPUSH
44246: CALL_OW 275
44250: PUSH
44251: LD_VAR 0 4
44255: PUSH
44256: LD_INT 2
44258: ARRAY
44259: GREATEREQUAL
44260: AND
44261: PUSH
44262: LD_VAR 0 5
44266: PPUSH
44267: LD_INT 3
44269: PPUSH
44270: CALL_OW 275
44274: PUSH
44275: LD_VAR 0 4
44279: PUSH
44280: LD_INT 3
44282: ARRAY
44283: GREATEREQUAL
44284: AND
44285: ST_TO_ADDR
// end ;
44286: LD_VAR 0 3
44290: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44291: LD_INT 0
44293: PPUSH
44294: PPUSH
44295: PPUSH
44296: PPUSH
// pom := GetBase ( building ) ;
44297: LD_ADDR_VAR 0 3
44301: PUSH
44302: LD_VAR 0 1
44306: PPUSH
44307: CALL_OW 274
44311: ST_TO_ADDR
// if not pom then
44312: LD_VAR 0 3
44316: NOT
44317: IFFALSE 44321
// exit ;
44319: GO 44491
// btype := GetBType ( building ) ;
44321: LD_ADDR_VAR 0 5
44325: PUSH
44326: LD_VAR 0 1
44330: PPUSH
44331: CALL_OW 266
44335: ST_TO_ADDR
// if btype = b_armoury then
44336: LD_VAR 0 5
44340: PUSH
44341: LD_INT 4
44343: EQUAL
44344: IFFALSE 44354
// btype := b_barracks ;
44346: LD_ADDR_VAR 0 5
44350: PUSH
44351: LD_INT 5
44353: ST_TO_ADDR
// if btype = b_depot then
44354: LD_VAR 0 5
44358: PUSH
44359: LD_INT 0
44361: EQUAL
44362: IFFALSE 44372
// btype := b_warehouse ;
44364: LD_ADDR_VAR 0 5
44368: PUSH
44369: LD_INT 1
44371: ST_TO_ADDR
// if btype = b_workshop then
44372: LD_VAR 0 5
44376: PUSH
44377: LD_INT 2
44379: EQUAL
44380: IFFALSE 44390
// btype := b_factory ;
44382: LD_ADDR_VAR 0 5
44386: PUSH
44387: LD_INT 3
44389: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44390: LD_ADDR_VAR 0 4
44394: PUSH
44395: LD_VAR 0 5
44399: PPUSH
44400: LD_VAR 0 1
44404: PPUSH
44405: CALL_OW 248
44409: PPUSH
44410: CALL_OW 450
44414: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44415: LD_ADDR_VAR 0 2
44419: PUSH
44420: LD_VAR 0 3
44424: PPUSH
44425: LD_INT 1
44427: PPUSH
44428: CALL_OW 275
44432: PUSH
44433: LD_VAR 0 4
44437: PUSH
44438: LD_INT 1
44440: ARRAY
44441: GREATEREQUAL
44442: PUSH
44443: LD_VAR 0 3
44447: PPUSH
44448: LD_INT 2
44450: PPUSH
44451: CALL_OW 275
44455: PUSH
44456: LD_VAR 0 4
44460: PUSH
44461: LD_INT 2
44463: ARRAY
44464: GREATEREQUAL
44465: AND
44466: PUSH
44467: LD_VAR 0 3
44471: PPUSH
44472: LD_INT 3
44474: PPUSH
44475: CALL_OW 275
44479: PUSH
44480: LD_VAR 0 4
44484: PUSH
44485: LD_INT 3
44487: ARRAY
44488: GREATEREQUAL
44489: AND
44490: ST_TO_ADDR
// end ;
44491: LD_VAR 0 2
44495: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44496: LD_INT 0
44498: PPUSH
44499: PPUSH
44500: PPUSH
// pom := GetBase ( building ) ;
44501: LD_ADDR_VAR 0 4
44505: PUSH
44506: LD_VAR 0 1
44510: PPUSH
44511: CALL_OW 274
44515: ST_TO_ADDR
// if not pom then
44516: LD_VAR 0 4
44520: NOT
44521: IFFALSE 44525
// exit ;
44523: GO 44626
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44525: LD_ADDR_VAR 0 5
44529: PUSH
44530: LD_VAR 0 2
44534: PPUSH
44535: LD_VAR 0 1
44539: PPUSH
44540: CALL_OW 248
44544: PPUSH
44545: CALL_OW 450
44549: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44550: LD_ADDR_VAR 0 3
44554: PUSH
44555: LD_VAR 0 4
44559: PPUSH
44560: LD_INT 1
44562: PPUSH
44563: CALL_OW 275
44567: PUSH
44568: LD_VAR 0 5
44572: PUSH
44573: LD_INT 1
44575: ARRAY
44576: GREATEREQUAL
44577: PUSH
44578: LD_VAR 0 4
44582: PPUSH
44583: LD_INT 2
44585: PPUSH
44586: CALL_OW 275
44590: PUSH
44591: LD_VAR 0 5
44595: PUSH
44596: LD_INT 2
44598: ARRAY
44599: GREATEREQUAL
44600: AND
44601: PUSH
44602: LD_VAR 0 4
44606: PPUSH
44607: LD_INT 3
44609: PPUSH
44610: CALL_OW 275
44614: PUSH
44615: LD_VAR 0 5
44619: PUSH
44620: LD_INT 3
44622: ARRAY
44623: GREATEREQUAL
44624: AND
44625: ST_TO_ADDR
// end ;
44626: LD_VAR 0 3
44630: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44631: LD_INT 0
44633: PPUSH
44634: PPUSH
44635: PPUSH
44636: PPUSH
44637: PPUSH
44638: PPUSH
44639: PPUSH
44640: PPUSH
44641: PPUSH
44642: PPUSH
44643: PPUSH
// result := false ;
44644: LD_ADDR_VAR 0 8
44648: PUSH
44649: LD_INT 0
44651: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44652: LD_VAR 0 5
44656: NOT
44657: PUSH
44658: LD_VAR 0 1
44662: NOT
44663: OR
44664: PUSH
44665: LD_VAR 0 2
44669: NOT
44670: OR
44671: PUSH
44672: LD_VAR 0 3
44676: NOT
44677: OR
44678: IFFALSE 44682
// exit ;
44680: GO 45496
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44682: LD_ADDR_VAR 0 14
44686: PUSH
44687: LD_VAR 0 1
44691: PPUSH
44692: LD_VAR 0 2
44696: PPUSH
44697: LD_VAR 0 3
44701: PPUSH
44702: LD_VAR 0 4
44706: PPUSH
44707: LD_VAR 0 5
44711: PUSH
44712: LD_INT 1
44714: ARRAY
44715: PPUSH
44716: CALL_OW 248
44720: PPUSH
44721: LD_INT 0
44723: PPUSH
44724: CALL 46749 0 6
44728: ST_TO_ADDR
// if not hexes then
44729: LD_VAR 0 14
44733: NOT
44734: IFFALSE 44738
// exit ;
44736: GO 45496
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44738: LD_ADDR_VAR 0 17
44742: PUSH
44743: LD_VAR 0 5
44747: PPUSH
44748: LD_INT 22
44750: PUSH
44751: LD_VAR 0 13
44755: PPUSH
44756: CALL_OW 255
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 2
44767: PUSH
44768: LD_INT 30
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 30
44780: PUSH
44781: LD_INT 1
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: LIST
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PPUSH
44797: CALL_OW 72
44801: ST_TO_ADDR
// for i = 1 to hexes do
44802: LD_ADDR_VAR 0 9
44806: PUSH
44807: DOUBLE
44808: LD_INT 1
44810: DEC
44811: ST_TO_ADDR
44812: LD_VAR 0 14
44816: PUSH
44817: FOR_TO
44818: IFFALSE 45494
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44820: LD_ADDR_VAR 0 13
44824: PUSH
44825: LD_VAR 0 14
44829: PUSH
44830: LD_VAR 0 9
44834: ARRAY
44835: PUSH
44836: LD_INT 1
44838: ARRAY
44839: PPUSH
44840: LD_VAR 0 14
44844: PUSH
44845: LD_VAR 0 9
44849: ARRAY
44850: PUSH
44851: LD_INT 2
44853: ARRAY
44854: PPUSH
44855: CALL_OW 428
44859: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44860: LD_VAR 0 14
44864: PUSH
44865: LD_VAR 0 9
44869: ARRAY
44870: PUSH
44871: LD_INT 1
44873: ARRAY
44874: PPUSH
44875: LD_VAR 0 14
44879: PUSH
44880: LD_VAR 0 9
44884: ARRAY
44885: PUSH
44886: LD_INT 2
44888: ARRAY
44889: PPUSH
44890: CALL_OW 351
44894: PUSH
44895: LD_VAR 0 14
44899: PUSH
44900: LD_VAR 0 9
44904: ARRAY
44905: PUSH
44906: LD_INT 1
44908: ARRAY
44909: PPUSH
44910: LD_VAR 0 14
44914: PUSH
44915: LD_VAR 0 9
44919: ARRAY
44920: PUSH
44921: LD_INT 2
44923: ARRAY
44924: PPUSH
44925: CALL_OW 488
44929: NOT
44930: OR
44931: PUSH
44932: LD_VAR 0 13
44936: PPUSH
44937: CALL_OW 247
44941: PUSH
44942: LD_INT 3
44944: EQUAL
44945: OR
44946: IFFALSE 44952
// exit ;
44948: POP
44949: POP
44950: GO 45496
// if not tmp then
44952: LD_VAR 0 13
44956: NOT
44957: IFFALSE 44961
// continue ;
44959: GO 44817
// result := true ;
44961: LD_ADDR_VAR 0 8
44965: PUSH
44966: LD_INT 1
44968: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44969: LD_VAR 0 6
44973: PUSH
44974: LD_VAR 0 13
44978: PPUSH
44979: CALL_OW 247
44983: PUSH
44984: LD_INT 2
44986: EQUAL
44987: AND
44988: PUSH
44989: LD_VAR 0 13
44993: PPUSH
44994: CALL_OW 263
44998: PUSH
44999: LD_INT 1
45001: EQUAL
45002: AND
45003: IFFALSE 45167
// begin if IsDrivenBy ( tmp ) then
45005: LD_VAR 0 13
45009: PPUSH
45010: CALL_OW 311
45014: IFFALSE 45018
// continue ;
45016: GO 44817
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45018: LD_VAR 0 6
45022: PPUSH
45023: LD_INT 3
45025: PUSH
45026: LD_INT 60
45028: PUSH
45029: EMPTY
45030: LIST
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 3
45038: PUSH
45039: LD_INT 55
45041: PUSH
45042: EMPTY
45043: LIST
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PPUSH
45053: CALL_OW 72
45057: IFFALSE 45165
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45059: LD_ADDR_VAR 0 18
45063: PUSH
45064: LD_VAR 0 6
45068: PPUSH
45069: LD_INT 3
45071: PUSH
45072: LD_INT 60
45074: PUSH
45075: EMPTY
45076: LIST
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 3
45084: PUSH
45085: LD_INT 55
45087: PUSH
45088: EMPTY
45089: LIST
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PPUSH
45099: CALL_OW 72
45103: PUSH
45104: LD_INT 1
45106: ARRAY
45107: ST_TO_ADDR
// if IsInUnit ( driver ) then
45108: LD_VAR 0 18
45112: PPUSH
45113: CALL_OW 310
45117: IFFALSE 45128
// ComExit ( driver ) ;
45119: LD_VAR 0 18
45123: PPUSH
45124: CALL 70550 0 1
// AddComEnterUnit ( driver , tmp ) ;
45128: LD_VAR 0 18
45132: PPUSH
45133: LD_VAR 0 13
45137: PPUSH
45138: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45142: LD_VAR 0 18
45146: PPUSH
45147: LD_VAR 0 7
45151: PPUSH
45152: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45156: LD_VAR 0 18
45160: PPUSH
45161: CALL_OW 181
// end ; continue ;
45165: GO 44817
// end ; if not cleaners or not tmp in cleaners then
45167: LD_VAR 0 6
45171: NOT
45172: PUSH
45173: LD_VAR 0 13
45177: PUSH
45178: LD_VAR 0 6
45182: IN
45183: NOT
45184: OR
45185: IFFALSE 45492
// begin if dep then
45187: LD_VAR 0 17
45191: IFFALSE 45327
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45193: LD_ADDR_VAR 0 16
45197: PUSH
45198: LD_VAR 0 17
45202: PUSH
45203: LD_INT 1
45205: ARRAY
45206: PPUSH
45207: CALL_OW 250
45211: PPUSH
45212: LD_VAR 0 17
45216: PUSH
45217: LD_INT 1
45219: ARRAY
45220: PPUSH
45221: CALL_OW 254
45225: PPUSH
45226: LD_INT 5
45228: PPUSH
45229: CALL_OW 272
45233: PUSH
45234: LD_VAR 0 17
45238: PUSH
45239: LD_INT 1
45241: ARRAY
45242: PPUSH
45243: CALL_OW 251
45247: PPUSH
45248: LD_VAR 0 17
45252: PUSH
45253: LD_INT 1
45255: ARRAY
45256: PPUSH
45257: CALL_OW 254
45261: PPUSH
45262: LD_INT 5
45264: PPUSH
45265: CALL_OW 273
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45274: LD_VAR 0 16
45278: PUSH
45279: LD_INT 1
45281: ARRAY
45282: PPUSH
45283: LD_VAR 0 16
45287: PUSH
45288: LD_INT 2
45290: ARRAY
45291: PPUSH
45292: CALL_OW 488
45296: IFFALSE 45327
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45298: LD_VAR 0 13
45302: PPUSH
45303: LD_VAR 0 16
45307: PUSH
45308: LD_INT 1
45310: ARRAY
45311: PPUSH
45312: LD_VAR 0 16
45316: PUSH
45317: LD_INT 2
45319: ARRAY
45320: PPUSH
45321: CALL_OW 111
// continue ;
45325: GO 44817
// end ; end ; r := GetDir ( tmp ) ;
45327: LD_ADDR_VAR 0 15
45331: PUSH
45332: LD_VAR 0 13
45336: PPUSH
45337: CALL_OW 254
45341: ST_TO_ADDR
// if r = 5 then
45342: LD_VAR 0 15
45346: PUSH
45347: LD_INT 5
45349: EQUAL
45350: IFFALSE 45360
// r := 0 ;
45352: LD_ADDR_VAR 0 15
45356: PUSH
45357: LD_INT 0
45359: ST_TO_ADDR
// for j = r to 5 do
45360: LD_ADDR_VAR 0 10
45364: PUSH
45365: DOUBLE
45366: LD_VAR 0 15
45370: DEC
45371: ST_TO_ADDR
45372: LD_INT 5
45374: PUSH
45375: FOR_TO
45376: IFFALSE 45490
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45378: LD_ADDR_VAR 0 11
45382: PUSH
45383: LD_VAR 0 13
45387: PPUSH
45388: CALL_OW 250
45392: PPUSH
45393: LD_VAR 0 10
45397: PPUSH
45398: LD_INT 2
45400: PPUSH
45401: CALL_OW 272
45405: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45406: LD_ADDR_VAR 0 12
45410: PUSH
45411: LD_VAR 0 13
45415: PPUSH
45416: CALL_OW 251
45420: PPUSH
45421: LD_VAR 0 10
45425: PPUSH
45426: LD_INT 2
45428: PPUSH
45429: CALL_OW 273
45433: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45434: LD_VAR 0 11
45438: PPUSH
45439: LD_VAR 0 12
45443: PPUSH
45444: CALL_OW 488
45448: PUSH
45449: LD_VAR 0 11
45453: PPUSH
45454: LD_VAR 0 12
45458: PPUSH
45459: CALL_OW 428
45463: NOT
45464: AND
45465: IFFALSE 45488
// begin ComMoveXY ( tmp , _x , _y ) ;
45467: LD_VAR 0 13
45471: PPUSH
45472: LD_VAR 0 11
45476: PPUSH
45477: LD_VAR 0 12
45481: PPUSH
45482: CALL_OW 111
// break ;
45486: GO 45490
// end ; end ;
45488: GO 45375
45490: POP
45491: POP
// end ; end ;
45492: GO 44817
45494: POP
45495: POP
// end ;
45496: LD_VAR 0 8
45500: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45501: LD_INT 0
45503: PPUSH
// result := true ;
45504: LD_ADDR_VAR 0 3
45508: PUSH
45509: LD_INT 1
45511: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45512: LD_VAR 0 2
45516: PUSH
45517: LD_INT 24
45519: DOUBLE
45520: EQUAL
45521: IFTRUE 45531
45523: LD_INT 33
45525: DOUBLE
45526: EQUAL
45527: IFTRUE 45531
45529: GO 45556
45531: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45532: LD_ADDR_VAR 0 3
45536: PUSH
45537: LD_INT 32
45539: PPUSH
45540: LD_VAR 0 1
45544: PPUSH
45545: CALL_OW 321
45549: PUSH
45550: LD_INT 2
45552: EQUAL
45553: ST_TO_ADDR
45554: GO 45872
45556: LD_INT 20
45558: DOUBLE
45559: EQUAL
45560: IFTRUE 45564
45562: GO 45589
45564: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45565: LD_ADDR_VAR 0 3
45569: PUSH
45570: LD_INT 6
45572: PPUSH
45573: LD_VAR 0 1
45577: PPUSH
45578: CALL_OW 321
45582: PUSH
45583: LD_INT 2
45585: EQUAL
45586: ST_TO_ADDR
45587: GO 45872
45589: LD_INT 22
45591: DOUBLE
45592: EQUAL
45593: IFTRUE 45603
45595: LD_INT 36
45597: DOUBLE
45598: EQUAL
45599: IFTRUE 45603
45601: GO 45628
45603: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45604: LD_ADDR_VAR 0 3
45608: PUSH
45609: LD_INT 15
45611: PPUSH
45612: LD_VAR 0 1
45616: PPUSH
45617: CALL_OW 321
45621: PUSH
45622: LD_INT 2
45624: EQUAL
45625: ST_TO_ADDR
45626: GO 45872
45628: LD_INT 30
45630: DOUBLE
45631: EQUAL
45632: IFTRUE 45636
45634: GO 45661
45636: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45637: LD_ADDR_VAR 0 3
45641: PUSH
45642: LD_INT 20
45644: PPUSH
45645: LD_VAR 0 1
45649: PPUSH
45650: CALL_OW 321
45654: PUSH
45655: LD_INT 2
45657: EQUAL
45658: ST_TO_ADDR
45659: GO 45872
45661: LD_INT 28
45663: DOUBLE
45664: EQUAL
45665: IFTRUE 45675
45667: LD_INT 21
45669: DOUBLE
45670: EQUAL
45671: IFTRUE 45675
45673: GO 45700
45675: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45676: LD_ADDR_VAR 0 3
45680: PUSH
45681: LD_INT 21
45683: PPUSH
45684: LD_VAR 0 1
45688: PPUSH
45689: CALL_OW 321
45693: PUSH
45694: LD_INT 2
45696: EQUAL
45697: ST_TO_ADDR
45698: GO 45872
45700: LD_INT 16
45702: DOUBLE
45703: EQUAL
45704: IFTRUE 45708
45706: GO 45733
45708: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45709: LD_ADDR_VAR 0 3
45713: PUSH
45714: LD_INT 84
45716: PPUSH
45717: LD_VAR 0 1
45721: PPUSH
45722: CALL_OW 321
45726: PUSH
45727: LD_INT 2
45729: EQUAL
45730: ST_TO_ADDR
45731: GO 45872
45733: LD_INT 19
45735: DOUBLE
45736: EQUAL
45737: IFTRUE 45747
45739: LD_INT 23
45741: DOUBLE
45742: EQUAL
45743: IFTRUE 45747
45745: GO 45772
45747: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45748: LD_ADDR_VAR 0 3
45752: PUSH
45753: LD_INT 83
45755: PPUSH
45756: LD_VAR 0 1
45760: PPUSH
45761: CALL_OW 321
45765: PUSH
45766: LD_INT 2
45768: EQUAL
45769: ST_TO_ADDR
45770: GO 45872
45772: LD_INT 17
45774: DOUBLE
45775: EQUAL
45776: IFTRUE 45780
45778: GO 45805
45780: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45781: LD_ADDR_VAR 0 3
45785: PUSH
45786: LD_INT 39
45788: PPUSH
45789: LD_VAR 0 1
45793: PPUSH
45794: CALL_OW 321
45798: PUSH
45799: LD_INT 2
45801: EQUAL
45802: ST_TO_ADDR
45803: GO 45872
45805: LD_INT 18
45807: DOUBLE
45808: EQUAL
45809: IFTRUE 45813
45811: GO 45838
45813: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45814: LD_ADDR_VAR 0 3
45818: PUSH
45819: LD_INT 40
45821: PPUSH
45822: LD_VAR 0 1
45826: PPUSH
45827: CALL_OW 321
45831: PUSH
45832: LD_INT 2
45834: EQUAL
45835: ST_TO_ADDR
45836: GO 45872
45838: LD_INT 27
45840: DOUBLE
45841: EQUAL
45842: IFTRUE 45846
45844: GO 45871
45846: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45847: LD_ADDR_VAR 0 3
45851: PUSH
45852: LD_INT 35
45854: PPUSH
45855: LD_VAR 0 1
45859: PPUSH
45860: CALL_OW 321
45864: PUSH
45865: LD_INT 2
45867: EQUAL
45868: ST_TO_ADDR
45869: GO 45872
45871: POP
// end ;
45872: LD_VAR 0 3
45876: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45877: LD_INT 0
45879: PPUSH
45880: PPUSH
45881: PPUSH
45882: PPUSH
45883: PPUSH
45884: PPUSH
45885: PPUSH
45886: PPUSH
45887: PPUSH
45888: PPUSH
45889: PPUSH
// result := false ;
45890: LD_ADDR_VAR 0 6
45894: PUSH
45895: LD_INT 0
45897: ST_TO_ADDR
// if btype = b_depot then
45898: LD_VAR 0 2
45902: PUSH
45903: LD_INT 0
45905: EQUAL
45906: IFFALSE 45918
// begin result := true ;
45908: LD_ADDR_VAR 0 6
45912: PUSH
45913: LD_INT 1
45915: ST_TO_ADDR
// exit ;
45916: GO 46744
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45918: LD_VAR 0 1
45922: NOT
45923: PUSH
45924: LD_VAR 0 1
45928: PPUSH
45929: CALL_OW 266
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: IN
45944: NOT
45945: OR
45946: PUSH
45947: LD_VAR 0 2
45951: NOT
45952: OR
45953: PUSH
45954: LD_VAR 0 5
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: LD_INT 2
45967: PUSH
45968: LD_INT 3
45970: PUSH
45971: LD_INT 4
45973: PUSH
45974: LD_INT 5
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: IN
45985: NOT
45986: OR
45987: PUSH
45988: LD_VAR 0 3
45992: PPUSH
45993: LD_VAR 0 4
45997: PPUSH
45998: CALL_OW 488
46002: NOT
46003: OR
46004: IFFALSE 46008
// exit ;
46006: GO 46744
// side := GetSide ( depot ) ;
46008: LD_ADDR_VAR 0 9
46012: PUSH
46013: LD_VAR 0 1
46017: PPUSH
46018: CALL_OW 255
46022: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46023: LD_VAR 0 9
46027: PPUSH
46028: LD_VAR 0 2
46032: PPUSH
46033: CALL 45501 0 2
46037: NOT
46038: IFFALSE 46042
// exit ;
46040: GO 46744
// pom := GetBase ( depot ) ;
46042: LD_ADDR_VAR 0 10
46046: PUSH
46047: LD_VAR 0 1
46051: PPUSH
46052: CALL_OW 274
46056: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46057: LD_ADDR_VAR 0 11
46061: PUSH
46062: LD_VAR 0 2
46066: PPUSH
46067: LD_VAR 0 1
46071: PPUSH
46072: CALL_OW 248
46076: PPUSH
46077: CALL_OW 450
46081: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46082: LD_VAR 0 10
46086: PPUSH
46087: LD_INT 1
46089: PPUSH
46090: CALL_OW 275
46094: PUSH
46095: LD_VAR 0 11
46099: PUSH
46100: LD_INT 1
46102: ARRAY
46103: GREATEREQUAL
46104: PUSH
46105: LD_VAR 0 10
46109: PPUSH
46110: LD_INT 2
46112: PPUSH
46113: CALL_OW 275
46117: PUSH
46118: LD_VAR 0 11
46122: PUSH
46123: LD_INT 2
46125: ARRAY
46126: GREATEREQUAL
46127: AND
46128: PUSH
46129: LD_VAR 0 10
46133: PPUSH
46134: LD_INT 3
46136: PPUSH
46137: CALL_OW 275
46141: PUSH
46142: LD_VAR 0 11
46146: PUSH
46147: LD_INT 3
46149: ARRAY
46150: GREATEREQUAL
46151: AND
46152: NOT
46153: IFFALSE 46157
// exit ;
46155: GO 46744
// if GetBType ( depot ) = b_depot then
46157: LD_VAR 0 1
46161: PPUSH
46162: CALL_OW 266
46166: PUSH
46167: LD_INT 0
46169: EQUAL
46170: IFFALSE 46182
// dist := 28 else
46172: LD_ADDR_VAR 0 14
46176: PUSH
46177: LD_INT 28
46179: ST_TO_ADDR
46180: GO 46190
// dist := 36 ;
46182: LD_ADDR_VAR 0 14
46186: PUSH
46187: LD_INT 36
46189: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46190: LD_VAR 0 1
46194: PPUSH
46195: LD_VAR 0 3
46199: PPUSH
46200: LD_VAR 0 4
46204: PPUSH
46205: CALL_OW 297
46209: PUSH
46210: LD_VAR 0 14
46214: GREATER
46215: IFFALSE 46219
// exit ;
46217: GO 46744
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46219: LD_ADDR_VAR 0 12
46223: PUSH
46224: LD_VAR 0 2
46228: PPUSH
46229: LD_VAR 0 3
46233: PPUSH
46234: LD_VAR 0 4
46238: PPUSH
46239: LD_VAR 0 5
46243: PPUSH
46244: LD_VAR 0 1
46248: PPUSH
46249: CALL_OW 248
46253: PPUSH
46254: LD_INT 0
46256: PPUSH
46257: CALL 46749 0 6
46261: ST_TO_ADDR
// if not hexes then
46262: LD_VAR 0 12
46266: NOT
46267: IFFALSE 46271
// exit ;
46269: GO 46744
// hex := GetHexInfo ( x , y ) ;
46271: LD_ADDR_VAR 0 15
46275: PUSH
46276: LD_VAR 0 3
46280: PPUSH
46281: LD_VAR 0 4
46285: PPUSH
46286: CALL_OW 546
46290: ST_TO_ADDR
// if hex [ 1 ] then
46291: LD_VAR 0 15
46295: PUSH
46296: LD_INT 1
46298: ARRAY
46299: IFFALSE 46303
// exit ;
46301: GO 46744
// height := hex [ 2 ] ;
46303: LD_ADDR_VAR 0 13
46307: PUSH
46308: LD_VAR 0 15
46312: PUSH
46313: LD_INT 2
46315: ARRAY
46316: ST_TO_ADDR
// for i = 1 to hexes do
46317: LD_ADDR_VAR 0 7
46321: PUSH
46322: DOUBLE
46323: LD_INT 1
46325: DEC
46326: ST_TO_ADDR
46327: LD_VAR 0 12
46331: PUSH
46332: FOR_TO
46333: IFFALSE 46663
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46335: LD_VAR 0 12
46339: PUSH
46340: LD_VAR 0 7
46344: ARRAY
46345: PUSH
46346: LD_INT 1
46348: ARRAY
46349: PPUSH
46350: LD_VAR 0 12
46354: PUSH
46355: LD_VAR 0 7
46359: ARRAY
46360: PUSH
46361: LD_INT 2
46363: ARRAY
46364: PPUSH
46365: CALL_OW 488
46369: NOT
46370: PUSH
46371: LD_VAR 0 12
46375: PUSH
46376: LD_VAR 0 7
46380: ARRAY
46381: PUSH
46382: LD_INT 1
46384: ARRAY
46385: PPUSH
46386: LD_VAR 0 12
46390: PUSH
46391: LD_VAR 0 7
46395: ARRAY
46396: PUSH
46397: LD_INT 2
46399: ARRAY
46400: PPUSH
46401: CALL_OW 428
46405: PUSH
46406: LD_INT 0
46408: GREATER
46409: OR
46410: PUSH
46411: LD_VAR 0 12
46415: PUSH
46416: LD_VAR 0 7
46420: ARRAY
46421: PUSH
46422: LD_INT 1
46424: ARRAY
46425: PPUSH
46426: LD_VAR 0 12
46430: PUSH
46431: LD_VAR 0 7
46435: ARRAY
46436: PUSH
46437: LD_INT 2
46439: ARRAY
46440: PPUSH
46441: CALL_OW 351
46445: OR
46446: IFFALSE 46452
// exit ;
46448: POP
46449: POP
46450: GO 46744
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46452: LD_ADDR_VAR 0 8
46456: PUSH
46457: LD_VAR 0 12
46461: PUSH
46462: LD_VAR 0 7
46466: ARRAY
46467: PUSH
46468: LD_INT 1
46470: ARRAY
46471: PPUSH
46472: LD_VAR 0 12
46476: PUSH
46477: LD_VAR 0 7
46481: ARRAY
46482: PUSH
46483: LD_INT 2
46485: ARRAY
46486: PPUSH
46487: CALL_OW 546
46491: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46492: LD_VAR 0 8
46496: PUSH
46497: LD_INT 1
46499: ARRAY
46500: PUSH
46501: LD_VAR 0 8
46505: PUSH
46506: LD_INT 2
46508: ARRAY
46509: PUSH
46510: LD_VAR 0 13
46514: PUSH
46515: LD_INT 2
46517: PLUS
46518: GREATER
46519: OR
46520: PUSH
46521: LD_VAR 0 8
46525: PUSH
46526: LD_INT 2
46528: ARRAY
46529: PUSH
46530: LD_VAR 0 13
46534: PUSH
46535: LD_INT 2
46537: MINUS
46538: LESS
46539: OR
46540: PUSH
46541: LD_VAR 0 8
46545: PUSH
46546: LD_INT 3
46548: ARRAY
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: LD_INT 8
46555: PUSH
46556: LD_INT 9
46558: PUSH
46559: LD_INT 10
46561: PUSH
46562: LD_INT 11
46564: PUSH
46565: LD_INT 12
46567: PUSH
46568: LD_INT 13
46570: PUSH
46571: LD_INT 16
46573: PUSH
46574: LD_INT 17
46576: PUSH
46577: LD_INT 18
46579: PUSH
46580: LD_INT 19
46582: PUSH
46583: LD_INT 20
46585: PUSH
46586: LD_INT 21
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: IN
46604: NOT
46605: OR
46606: PUSH
46607: LD_VAR 0 8
46611: PUSH
46612: LD_INT 5
46614: ARRAY
46615: NOT
46616: OR
46617: PUSH
46618: LD_VAR 0 8
46622: PUSH
46623: LD_INT 6
46625: ARRAY
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: LD_INT 2
46632: PUSH
46633: LD_INT 7
46635: PUSH
46636: LD_INT 9
46638: PUSH
46639: LD_INT 10
46641: PUSH
46642: LD_INT 11
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: IN
46653: NOT
46654: OR
46655: IFFALSE 46661
// exit ;
46657: POP
46658: POP
46659: GO 46744
// end ;
46661: GO 46332
46663: POP
46664: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46665: LD_VAR 0 9
46669: PPUSH
46670: LD_VAR 0 3
46674: PPUSH
46675: LD_VAR 0 4
46679: PPUSH
46680: LD_INT 20
46682: PPUSH
46683: CALL 38667 0 4
46687: PUSH
46688: LD_INT 4
46690: ARRAY
46691: IFFALSE 46695
// exit ;
46693: GO 46744
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46695: LD_VAR 0 2
46699: PUSH
46700: LD_INT 29
46702: PUSH
46703: LD_INT 30
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: IN
46710: PUSH
46711: LD_VAR 0 3
46715: PPUSH
46716: LD_VAR 0 4
46720: PPUSH
46721: LD_VAR 0 9
46725: PPUSH
46726: CALL_OW 440
46730: NOT
46731: AND
46732: IFFALSE 46736
// exit ;
46734: GO 46744
// result := true ;
46736: LD_ADDR_VAR 0 6
46740: PUSH
46741: LD_INT 1
46743: ST_TO_ADDR
// end ;
46744: LD_VAR 0 6
46748: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46749: LD_INT 0
46751: PPUSH
46752: PPUSH
46753: PPUSH
46754: PPUSH
46755: PPUSH
46756: PPUSH
46757: PPUSH
46758: PPUSH
46759: PPUSH
46760: PPUSH
46761: PPUSH
46762: PPUSH
46763: PPUSH
46764: PPUSH
46765: PPUSH
46766: PPUSH
46767: PPUSH
46768: PPUSH
46769: PPUSH
46770: PPUSH
46771: PPUSH
46772: PPUSH
46773: PPUSH
46774: PPUSH
46775: PPUSH
46776: PPUSH
46777: PPUSH
46778: PPUSH
46779: PPUSH
46780: PPUSH
46781: PPUSH
46782: PPUSH
46783: PPUSH
46784: PPUSH
46785: PPUSH
46786: PPUSH
46787: PPUSH
46788: PPUSH
46789: PPUSH
46790: PPUSH
46791: PPUSH
46792: PPUSH
46793: PPUSH
46794: PPUSH
46795: PPUSH
46796: PPUSH
46797: PPUSH
46798: PPUSH
46799: PPUSH
46800: PPUSH
46801: PPUSH
46802: PPUSH
46803: PPUSH
46804: PPUSH
46805: PPUSH
46806: PPUSH
46807: PPUSH
46808: PPUSH
// result = [ ] ;
46809: LD_ADDR_VAR 0 7
46813: PUSH
46814: EMPTY
46815: ST_TO_ADDR
// temp_list = [ ] ;
46816: LD_ADDR_VAR 0 9
46820: PUSH
46821: EMPTY
46822: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46823: LD_VAR 0 4
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: LD_INT 2
46836: PUSH
46837: LD_INT 3
46839: PUSH
46840: LD_INT 4
46842: PUSH
46843: LD_INT 5
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: IN
46854: NOT
46855: PUSH
46856: LD_VAR 0 1
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: IN
46871: PUSH
46872: LD_VAR 0 5
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: LD_INT 2
46882: PUSH
46883: LD_INT 3
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: LIST
46890: IN
46891: NOT
46892: AND
46893: OR
46894: IFFALSE 46898
// exit ;
46896: GO 65289
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46898: LD_VAR 0 1
46902: PUSH
46903: LD_INT 6
46905: PUSH
46906: LD_INT 7
46908: PUSH
46909: LD_INT 8
46911: PUSH
46912: LD_INT 13
46914: PUSH
46915: LD_INT 12
46917: PUSH
46918: LD_INT 15
46920: PUSH
46921: LD_INT 11
46923: PUSH
46924: LD_INT 14
46926: PUSH
46927: LD_INT 10
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: IN
46941: IFFALSE 46951
// btype = b_lab ;
46943: LD_ADDR_VAR 0 1
46947: PUSH
46948: LD_INT 6
46950: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46951: LD_VAR 0 6
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: LD_INT 2
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: LIST
46969: IN
46970: NOT
46971: PUSH
46972: LD_VAR 0 1
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: LD_INT 2
46985: PUSH
46986: LD_INT 3
46988: PUSH
46989: LD_INT 6
46991: PUSH
46992: LD_INT 36
46994: PUSH
46995: LD_INT 4
46997: PUSH
46998: LD_INT 5
47000: PUSH
47001: LD_INT 31
47003: PUSH
47004: LD_INT 32
47006: PUSH
47007: LD_INT 33
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: IN
47023: NOT
47024: PUSH
47025: LD_VAR 0 6
47029: PUSH
47030: LD_INT 1
47032: EQUAL
47033: AND
47034: OR
47035: PUSH
47036: LD_VAR 0 1
47040: PUSH
47041: LD_INT 2
47043: PUSH
47044: LD_INT 3
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: IN
47051: NOT
47052: PUSH
47053: LD_VAR 0 6
47057: PUSH
47058: LD_INT 2
47060: EQUAL
47061: AND
47062: OR
47063: IFFALSE 47073
// mode = 0 ;
47065: LD_ADDR_VAR 0 6
47069: PUSH
47070: LD_INT 0
47072: ST_TO_ADDR
// case mode of 0 :
47073: LD_VAR 0 6
47077: PUSH
47078: LD_INT 0
47080: DOUBLE
47081: EQUAL
47082: IFTRUE 47086
47084: GO 58539
47086: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47087: LD_ADDR_VAR 0 11
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: LD_INT 2
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: LD_INT 2
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: LD_INT 2
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: LD_INT 2
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: NEG
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: LD_INT 3
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 0
47243: PUSH
47244: LD_INT 3
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: LD_INT 2
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47280: LD_ADDR_VAR 0 12
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 2
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 2
47403: NEG
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 2
47414: NEG
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 2
47426: NEG
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 3
47437: NEG
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 3
47448: NEG
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47476: LD_ADDR_VAR 0 13
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 1
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: LD_INT 2
47561: NEG
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 2
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 2
47579: PUSH
47580: LD_INT 2
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: LD_INT 2
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 2
47599: NEG
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 2
47611: NEG
47612: PUSH
47613: LD_INT 2
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 2
47623: NEG
47624: PUSH
47625: LD_INT 3
47627: NEG
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 3
47635: NEG
47636: PUSH
47637: LD_INT 2
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 3
47647: NEG
47648: PUSH
47649: LD_INT 3
47651: NEG
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47675: LD_ADDR_VAR 0 14
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: LD_INT 1
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 1
47744: NEG
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: LD_INT 2
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: LD_INT 2
47771: NEG
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: LD_INT 2
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: NEG
47822: PUSH
47823: LD_INT 3
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: LD_INT 3
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: LD_INT 2
47847: NEG
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47871: LD_ADDR_VAR 0 15
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: NEG
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: LD_INT 1
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: LD_INT 1
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 2
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 2
47994: NEG
47995: PUSH
47996: LD_INT 0
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 2
48005: NEG
48006: PUSH
48007: LD_INT 1
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 2
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 3
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 3
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48064: LD_ADDR_VAR 0 16
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: LD_INT 0
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 1
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: LD_INT 2
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: LD_INT 1
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 2
48167: PUSH
48168: LD_INT 2
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: LD_INT 2
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 2
48187: NEG
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 2
48199: NEG
48200: PUSH
48201: LD_INT 2
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 3
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 3
48221: PUSH
48222: LD_INT 3
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 2
48231: PUSH
48232: LD_INT 3
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48257: LD_ADDR_VAR 0 17
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: LD_INT 2
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: LD_INT 2
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 2
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: LD_INT 1
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: PUSH
48393: LD_INT 2
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: LD_INT 2
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 2
48433: NEG
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 2
48444: NEG
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 2
48456: NEG
48457: PUSH
48458: LD_INT 2
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48487: LD_ADDR_VAR 0 18
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: LD_INT 0
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: LD_INT 2
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: LD_INT 2
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 2
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 2
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: LD_INT 2
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 2
48674: NEG
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: LD_INT 2
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48717: LD_ADDR_VAR 0 19
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 1
48798: NEG
48799: PUSH
48800: LD_INT 2
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 2
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 2
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: LD_INT 2
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: LD_INT 2
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: LD_INT 2
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 2
48893: NEG
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 2
48904: NEG
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 2
48916: NEG
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48947: LD_ADDR_VAR 0 20
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: LD_INT 2
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 2
49062: PUSH
49063: LD_INT 0
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 2
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: LD_INT 2
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 2
49123: NEG
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 2
49134: NEG
49135: PUSH
49136: LD_INT 1
49138: NEG
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 2
49146: NEG
49147: PUSH
49148: LD_INT 2
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49177: LD_ADDR_VAR 0 21
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 0
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 1
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: LD_INT 2
49273: NEG
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 2
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 2
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 2
49312: PUSH
49313: LD_INT 2
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: LD_INT 2
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: LD_INT 2
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 2
49353: NEG
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 2
49364: NEG
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 2
49376: NEG
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49407: LD_ADDR_VAR 0 22
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: LD_INT 2
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 2
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 2
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 2
49542: PUSH
49543: LD_INT 2
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: LD_INT 2
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 2
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: LD_INT 1
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 2
49594: NEG
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 2
49606: NEG
49607: PUSH
49608: LD_INT 2
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49637: LD_ADDR_VAR 0 23
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: LD_INT 2
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: LD_INT 2
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: PUSH
49742: LD_INT 1
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 2
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 2
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 2
49772: PUSH
49773: LD_INT 2
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: LD_INT 2
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: LD_INT 2
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: LD_INT 1
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 2
49813: NEG
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 2
49824: NEG
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 2
49836: NEG
49837: PUSH
49838: LD_INT 2
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 2
49848: NEG
49849: PUSH
49850: LD_INT 3
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: LD_INT 3
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 2
49883: PUSH
49884: LD_INT 1
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49917: LD_ADDR_VAR 0 24
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 1
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 1
49986: NEG
49987: PUSH
49988: LD_INT 1
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: LD_INT 2
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: LD_INT 2
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 2
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 2
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: LD_INT 2
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: LD_INT 2
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 2
50093: NEG
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 2
50104: NEG
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 2
50116: NEG
50117: PUSH
50118: LD_INT 2
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: LD_INT 1
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 3
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 3
50160: PUSH
50161: LD_INT 2
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50193: LD_ADDR_VAR 0 25
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: LD_INT 2
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: LD_INT 2
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 2
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 2
50318: PUSH
50319: LD_INT 1
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 2
50328: PUSH
50329: LD_INT 2
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: LD_INT 2
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: LD_INT 2
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 2
50369: NEG
50370: PUSH
50371: LD_INT 0
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 2
50380: NEG
50381: PUSH
50382: LD_INT 1
50384: NEG
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 2
50392: NEG
50393: PUSH
50394: LD_INT 2
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 3
50404: PUSH
50405: LD_INT 1
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 3
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 2
50424: PUSH
50425: LD_INT 3
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: LD_INT 3
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50467: LD_ADDR_VAR 0 26
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: LD_INT 0
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: NEG
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: LD_INT 2
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: LD_INT 2
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 1
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 2
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 2
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: PUSH
50603: LD_INT 2
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: LD_INT 2
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 2
50643: NEG
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 2
50654: NEG
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: LD_INT 2
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: PUSH
50679: LD_INT 3
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: LD_INT 3
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: LD_INT 2
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 2
50709: NEG
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50743: LD_ADDR_VAR 0 27
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: NEG
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: LD_INT 2
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: LD_INT 2
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: LD_INT 1
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 2
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: PUSH
50869: LD_INT 1
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 2
50878: PUSH
50879: LD_INT 2
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: LD_INT 2
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: LD_INT 1
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 2
50919: NEG
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 2
50930: NEG
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 2
50942: NEG
50943: PUSH
50944: LD_INT 2
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: LD_INT 2
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 2
50965: NEG
50966: PUSH
50967: LD_INT 1
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 3
50976: NEG
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 3
50988: NEG
50989: PUSH
50990: LD_INT 2
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51023: LD_ADDR_VAR 0 28
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: NEG
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: NEG
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: LD_INT 2
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: LD_INT 2
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 2
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 2
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 2
51158: PUSH
51159: LD_INT 2
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: LD_INT 2
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 2
51199: NEG
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: LD_INT 1
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 2
51222: NEG
51223: PUSH
51224: LD_INT 2
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 2
51234: NEG
51235: PUSH
51236: LD_INT 3
51238: NEG
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: LD_INT 3
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 3
51258: NEG
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 3
51270: NEG
51271: PUSH
51272: LD_INT 2
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51305: LD_ADDR_VAR 0 29
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: LD_INT 1
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 1
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: LD_INT 1
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 1
51374: NEG
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: LD_INT 2
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: LD_INT 2
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 2
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 2
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: LD_INT 2
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 2
51471: NEG
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: LD_INT 2
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 2
51495: NEG
51496: PUSH
51497: LD_INT 3
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 2
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 3
51518: PUSH
51519: LD_INT 1
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: LD_INT 3
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: LD_INT 2
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 3
51549: NEG
51550: PUSH
51551: LD_INT 2
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51584: LD_ADDR_VAR 0 30
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: LD_INT 2
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: LD_INT 2
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 2
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: LD_INT 1
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 2
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: PUSH
51730: LD_INT 2
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 2
51750: NEG
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 2
51761: NEG
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: LD_INT 3
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: LD_INT 2
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 3
51796: PUSH
51797: LD_INT 2
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 2
51806: PUSH
51807: LD_INT 3
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 3
51827: NEG
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51862: LD_ADDR_VAR 0 31
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: LD_INT 2
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 2
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 2
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 2
51986: PUSH
51987: LD_INT 2
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: LD_INT 2
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: LD_INT 2
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 2
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 2
52039: NEG
52040: PUSH
52041: LD_INT 2
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: LD_INT 3
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 2
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 3
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: LD_INT 3
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: LD_INT 2
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 3
52105: NEG
52106: PUSH
52107: LD_INT 2
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52140: LD_ADDR_VAR 0 32
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: LD_INT 1
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: LD_INT 1
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 1
52209: NEG
52210: PUSH
52211: LD_INT 1
52213: NEG
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: LD_INT 2
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: LD_INT 2
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 2
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 2
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 1
52275: PUSH
52276: LD_INT 2
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: LD_INT 2
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: PUSH
52297: LD_INT 1
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 2
52306: NEG
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 2
52317: NEG
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 1
52329: NEG
52330: PUSH
52331: LD_INT 3
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 1
52341: PUSH
52342: LD_INT 2
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 3
52352: PUSH
52353: LD_INT 2
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 2
52362: PUSH
52363: LD_INT 3
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 2
52372: NEG
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 3
52383: NEG
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52418: LD_ADDR_VAR 0 33
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: LD_INT 1
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: LD_INT 2
52503: NEG
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 2
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 2
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: LD_INT 2
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: LD_INT 2
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 2
52573: NEG
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: NEG
52585: PUSH
52586: LD_INT 1
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: NEG
52597: PUSH
52598: LD_INT 2
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: NEG
52609: PUSH
52610: LD_INT 3
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 2
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 3
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: PUSH
52642: LD_INT 3
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: LD_INT 2
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 3
52662: NEG
52663: PUSH
52664: LD_INT 2
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52697: LD_ADDR_VAR 0 34
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: LD_INT 1
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: NEG
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: LD_INT 2
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: LD_INT 2
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 2
52822: PUSH
52823: LD_INT 2
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: LD_INT 2
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 1
52842: NEG
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 2
52864: NEG
52865: PUSH
52866: LD_INT 1
52868: NEG
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 2
52876: NEG
52877: PUSH
52878: LD_INT 2
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: NEG
52889: PUSH
52890: LD_INT 3
52892: NEG
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: LD_INT 2
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 3
52911: PUSH
52912: LD_INT 2
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 2
52921: PUSH
52922: LD_INT 3
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 2
52931: NEG
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 3
52942: NEG
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52977: LD_ADDR_VAR 0 35
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 2
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 2
53068: NEG
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53089: LD_ADDR_VAR 0 36
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: NEG
53171: PUSH
53172: LD_INT 2
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: LD_INT 2
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53201: LD_ADDR_VAR 0 37
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 0
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: LD_INT 1
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53313: LD_ADDR_VAR 0 38
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 0
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 1
53371: NEG
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 2
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 2
53404: NEG
53405: PUSH
53406: LD_INT 1
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53425: LD_ADDR_VAR 0 39
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 1
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: LD_INT 2
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53537: LD_ADDR_VAR 0 40
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: LD_INT 0
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 1
53595: NEG
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: LD_INT 1
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: NEG
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53649: LD_ADDR_VAR 0 41
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 2
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: LD_INT 2
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: LD_INT 2
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 2
53804: NEG
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 2
53815: NEG
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 2
53827: NEG
53828: PUSH
53829: LD_INT 2
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 2
53839: NEG
53840: PUSH
53841: LD_INT 3
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 2
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 3
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 3
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 3
53882: PUSH
53883: LD_INT 2
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 3
53892: PUSH
53893: LD_INT 3
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 2
53902: PUSH
53903: LD_INT 3
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 2
53912: NEG
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 3
53923: NEG
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 3
53934: NEG
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 3
53946: NEG
53947: PUSH
53948: LD_INT 2
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 3
53958: NEG
53959: PUSH
53960: LD_INT 3
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53999: LD_ADDR_VAR 0 42
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 0
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: LD_INT 2
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: LD_INT 2
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: PUSH
54104: LD_INT 1
54106: NEG
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 2
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 2
54124: PUSH
54125: LD_INT 2
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: LD_INT 2
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: LD_INT 2
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: NEG
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 2
54165: NEG
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 2
54177: NEG
54178: PUSH
54179: LD_INT 2
54181: NEG
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: LD_INT 3
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: LD_INT 3
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: LD_INT 3
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: LD_INT 2
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 3
54235: PUSH
54236: LD_INT 2
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 3
54245: PUSH
54246: LD_INT 3
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 2
54255: PUSH
54256: LD_INT 3
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: LD_INT 3
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: LD_INT 3
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: LD_INT 2
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 3
54296: NEG
54297: PUSH
54298: LD_INT 2
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 3
54308: NEG
54309: PUSH
54310: LD_INT 3
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54349: LD_ADDR_VAR 0 43
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: LD_INT 2
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: LD_INT 2
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: LD_INT 1
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: LD_INT 2
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: LD_INT 2
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 2
54515: NEG
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 2
54526: NEG
54527: PUSH
54528: LD_INT 1
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: LD_INT 3
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: LD_INT 3
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: LD_INT 2
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 2
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 3
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 3
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: LD_INT 3
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: LD_INT 3
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: LD_INT 2
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 2
54634: NEG
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 3
54645: NEG
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 3
54656: NEG
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54697: LD_ADDR_VAR 0 44
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: LD_INT 2
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 2
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 2
54852: NEG
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 2
54863: NEG
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 2
54875: NEG
54876: PUSH
54877: LD_INT 2
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 2
54887: NEG
54888: PUSH
54889: LD_INT 3
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 2
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 3
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 3
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 3
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 3
54940: PUSH
54941: LD_INT 3
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 2
54950: PUSH
54951: LD_INT 3
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 2
54960: NEG
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 3
54971: NEG
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 3
54982: NEG
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 3
54994: NEG
54995: PUSH
54996: LD_INT 2
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 3
55006: NEG
55007: PUSH
55008: LD_INT 3
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55047: LD_ADDR_VAR 0 45
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: NEG
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: LD_INT 2
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: LD_INT 2
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 2
55162: PUSH
55163: LD_INT 1
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 2
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: LD_INT 2
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: LD_INT 2
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 1
55202: NEG
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 2
55213: NEG
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 2
55225: NEG
55226: PUSH
55227: LD_INT 2
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 2
55237: NEG
55238: PUSH
55239: LD_INT 3
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 3
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 3
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: LD_INT 2
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 3
55283: PUSH
55284: LD_INT 2
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 3
55293: PUSH
55294: LD_INT 3
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 2
55303: PUSH
55304: LD_INT 3
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: LD_INT 3
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: LD_INT 3
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: NEG
55334: PUSH
55335: LD_INT 2
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 3
55344: NEG
55345: PUSH
55346: LD_INT 2
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 3
55356: NEG
55357: PUSH
55358: LD_INT 3
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55397: LD_ADDR_VAR 0 46
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: LD_INT 1
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 1
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 1
55455: NEG
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 1
55478: NEG
55479: PUSH
55480: LD_INT 2
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: LD_INT 2
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 2
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 2
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 1
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 0
55542: PUSH
55543: LD_INT 2
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 1
55552: NEG
55553: PUSH
55554: LD_INT 1
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 2
55563: NEG
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 2
55574: NEG
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 1
55586: NEG
55587: PUSH
55588: LD_INT 3
55590: NEG
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: LD_INT 3
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: LD_INT 2
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 2
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 3
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 3
55641: PUSH
55642: LD_INT 1
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: LD_INT 3
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: LD_INT 3
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: LD_INT 2
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 2
55682: NEG
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 3
55693: NEG
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 3
55704: NEG
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55745: LD_ADDR_VAR 0 47
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: LD_INT 1
55765: NEG
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 0
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 1
55814: NEG
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 1
55826: NEG
55827: PUSH
55828: LD_INT 2
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: LD_INT 2
55841: NEG
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: LD_INT 1
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 2
55860: NEG
55861: PUSH
55862: LD_INT 1
55864: NEG
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 2
55872: NEG
55873: PUSH
55874: LD_INT 2
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55896: LD_ADDR_VAR 0 48
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: LD_INT 1
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: LD_INT 2
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: LD_INT 2
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 2
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 2
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56043: LD_ADDR_VAR 0 49
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: LD_INT 0
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 1
56112: NEG
56113: PUSH
56114: LD_INT 1
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 2
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 2
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 2
56155: PUSH
56156: LD_INT 2
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: LD_INT 2
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56187: LD_ADDR_VAR 0 50
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: LD_INT 1
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: NEG
56257: PUSH
56258: LD_INT 1
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 2
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 2
56278: PUSH
56279: LD_INT 2
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: LD_INT 2
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 0
56298: PUSH
56299: LD_INT 2
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: LD_INT 1
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56331: LD_ADDR_VAR 0 51
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: LD_INT 1
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: LD_INT 2
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: LD_INT 2
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 2
56443: NEG
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: LD_INT 1
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56478: LD_ADDR_VAR 0 52
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: LD_INT 1
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: LD_INT 1
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: LD_INT 1
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 1
56547: NEG
56548: PUSH
56549: LD_INT 1
56551: NEG
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 1
56559: NEG
56560: PUSH
56561: LD_INT 2
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 2
56582: NEG
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 2
56593: NEG
56594: PUSH
56595: LD_INT 1
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 2
56605: NEG
56606: PUSH
56607: LD_INT 2
56609: NEG
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56629: LD_ADDR_VAR 0 53
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: LD_INT 0
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 1
56687: NEG
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: LD_INT 2
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: LD_INT 2
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 2
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 2
56754: PUSH
56755: LD_INT 1
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 2
56764: PUSH
56765: LD_INT 2
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: LD_INT 2
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 2
56805: NEG
56806: PUSH
56807: LD_INT 0
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 2
56816: NEG
56817: PUSH
56818: LD_INT 1
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 2
56828: NEG
56829: PUSH
56830: LD_INT 2
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56859: LD_ADDR_VAR 0 54
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: LD_INT 1
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: LD_INT 1
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: LD_INT 2
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: LD_INT 2
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 2
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 2
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 2
56994: PUSH
56995: LD_INT 2
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: LD_INT 2
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: NEG
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 2
57035: NEG
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 2
57046: NEG
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 2
57058: NEG
57059: PUSH
57060: LD_INT 2
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57089: LD_ADDR_VAR 0 55
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: LD_INT 2
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 0
57182: PUSH
57183: LD_INT 2
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 1
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 2
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 2
57214: PUSH
57215: LD_INT 1
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 2
57224: PUSH
57225: LD_INT 2
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: LD_INT 2
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 1
57254: NEG
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 2
57276: NEG
57277: PUSH
57278: LD_INT 1
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 2
57288: NEG
57289: PUSH
57290: LD_INT 2
57292: NEG
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57319: LD_ADDR_VAR 0 56
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: LD_INT 0
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: LD_INT 1
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: LD_INT 1
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: LD_INT 1
57392: NEG
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 1
57400: NEG
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 2
57434: PUSH
57435: LD_INT 0
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 2
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 2
57454: PUSH
57455: LD_INT 2
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: LD_INT 2
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 0
57474: PUSH
57475: LD_INT 2
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 1
57484: NEG
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 2
57495: NEG
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 2
57506: NEG
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 2
57518: NEG
57519: PUSH
57520: LD_INT 2
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57549: LD_ADDR_VAR 0 57
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: LD_INT 1
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: LD_INT 1
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 1
57607: NEG
57608: PUSH
57609: LD_INT 0
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 1
57630: NEG
57631: PUSH
57632: LD_INT 2
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: LD_INT 2
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: LD_INT 1
57656: NEG
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 2
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 2
57674: PUSH
57675: LD_INT 1
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 2
57684: PUSH
57685: LD_INT 2
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: PUSH
57695: LD_INT 2
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 0
57704: PUSH
57705: LD_INT 2
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 2
57725: NEG
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 2
57736: NEG
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 2
57748: NEG
57749: PUSH
57750: LD_INT 2
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57779: LD_ADDR_VAR 0 58
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 1
57837: NEG
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 1
57848: NEG
57849: PUSH
57850: LD_INT 1
57852: NEG
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: LD_INT 2
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 0
57872: PUSH
57873: LD_INT 2
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 2
57894: PUSH
57895: LD_INT 0
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 2
57904: PUSH
57905: LD_INT 1
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 2
57914: PUSH
57915: LD_INT 2
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: PUSH
57925: LD_INT 2
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 0
57934: PUSH
57935: LD_INT 2
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 1
57944: NEG
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 2
57955: NEG
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 2
57966: NEG
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 2
57978: NEG
57979: PUSH
57980: LD_INT 2
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58009: LD_ADDR_VAR 0 59
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: LD_INT 1
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: LD_INT 1
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 1
58078: NEG
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58097: LD_ADDR_VAR 0 60
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: LD_INT 0
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: LD_INT 1
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 0
58145: PUSH
58146: LD_INT 1
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 1
58155: NEG
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 1
58166: NEG
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58185: LD_ADDR_VAR 0 61
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: LD_INT 1
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 1
58243: NEG
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: LD_INT 1
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58273: LD_ADDR_VAR 0 62
58277: PUSH
58278: LD_INT 0
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 0
58290: PUSH
58291: LD_INT 1
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 1
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 1
58311: PUSH
58312: LD_INT 1
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 1
58331: NEG
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: NEG
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58361: LD_ADDR_VAR 0 63
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: LD_INT 0
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 1
58399: PUSH
58400: LD_INT 1
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: LD_INT 1
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 1
58430: NEG
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58449: LD_ADDR_VAR 0 64
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: LD_INT 1
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: ST_TO_ADDR
// end ; 1 :
58537: GO 64434
58539: LD_INT 1
58541: DOUBLE
58542: EQUAL
58543: IFTRUE 58547
58545: GO 61170
58547: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58548: LD_ADDR_VAR 0 11
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: LD_INT 3
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: LD_INT 3
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: LD_INT 2
58581: NEG
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: LIST
58591: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58592: LD_ADDR_VAR 0 12
58596: PUSH
58597: LD_INT 2
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 3
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 3
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: LIST
58632: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58633: LD_ADDR_VAR 0 13
58637: PUSH
58638: LD_INT 3
58640: PUSH
58641: LD_INT 2
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 3
58650: PUSH
58651: LD_INT 3
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: LD_INT 3
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: LIST
58672: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58673: LD_ADDR_VAR 0 14
58677: PUSH
58678: LD_INT 1
58680: PUSH
58681: LD_INT 3
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: LD_INT 3
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: LD_INT 2
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: LIST
58713: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58714: LD_ADDR_VAR 0 15
58718: PUSH
58719: LD_INT 2
58721: NEG
58722: PUSH
58723: LD_INT 1
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 3
58732: NEG
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 3
58743: NEG
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: LIST
58757: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58758: LD_ADDR_VAR 0 16
58762: PUSH
58763: LD_INT 2
58765: NEG
58766: PUSH
58767: LD_INT 3
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 3
58777: NEG
58778: PUSH
58779: LD_INT 2
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 3
58789: NEG
58790: PUSH
58791: LD_INT 3
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: LIST
58803: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58804: LD_ADDR_VAR 0 17
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: LD_INT 3
58815: NEG
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: LD_INT 3
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 1
58834: PUSH
58835: LD_INT 2
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: LIST
58847: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58848: LD_ADDR_VAR 0 18
58852: PUSH
58853: LD_INT 2
58855: PUSH
58856: LD_INT 1
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 3
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 3
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: LIST
58888: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58889: LD_ADDR_VAR 0 19
58893: PUSH
58894: LD_INT 3
58896: PUSH
58897: LD_INT 2
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 3
58906: PUSH
58907: LD_INT 3
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 2
58916: PUSH
58917: LD_INT 3
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: LIST
58928: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58929: LD_ADDR_VAR 0 20
58933: PUSH
58934: LD_INT 1
58936: PUSH
58937: LD_INT 3
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 0
58946: PUSH
58947: LD_INT 3
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 1
58956: NEG
58957: PUSH
58958: LD_INT 2
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: LIST
58969: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58970: LD_ADDR_VAR 0 21
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 3
58988: NEG
58989: PUSH
58990: LD_INT 0
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 3
58999: NEG
59000: PUSH
59001: LD_INT 1
59003: NEG
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: LIST
59013: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59014: LD_ADDR_VAR 0 22
59018: PUSH
59019: LD_INT 2
59021: NEG
59022: PUSH
59023: LD_INT 3
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 3
59033: NEG
59034: PUSH
59035: LD_INT 2
59037: NEG
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 3
59045: NEG
59046: PUSH
59047: LD_INT 3
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: LIST
59059: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59060: LD_ADDR_VAR 0 23
59064: PUSH
59065: LD_INT 0
59067: PUSH
59068: LD_INT 3
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 1
59078: NEG
59079: PUSH
59080: LD_INT 4
59082: NEG
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 1
59090: PUSH
59091: LD_INT 3
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: LIST
59103: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59104: LD_ADDR_VAR 0 24
59108: PUSH
59109: LD_INT 3
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 3
59121: PUSH
59122: LD_INT 1
59124: NEG
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 4
59132: PUSH
59133: LD_INT 1
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: LIST
59144: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59145: LD_ADDR_VAR 0 25
59149: PUSH
59150: LD_INT 3
59152: PUSH
59153: LD_INT 3
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 4
59162: PUSH
59163: LD_INT 3
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 3
59172: PUSH
59173: LD_INT 4
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: LIST
59184: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59185: LD_ADDR_VAR 0 26
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: LD_INT 3
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: PUSH
59203: LD_INT 4
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 1
59212: NEG
59213: PUSH
59214: LD_INT 3
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: LIST
59225: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59226: LD_ADDR_VAR 0 27
59230: PUSH
59231: LD_INT 3
59233: NEG
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 3
59244: NEG
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 4
59255: NEG
59256: PUSH
59257: LD_INT 1
59259: NEG
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: LIST
59269: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59270: LD_ADDR_VAR 0 28
59274: PUSH
59275: LD_INT 3
59277: NEG
59278: PUSH
59279: LD_INT 3
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 3
59289: NEG
59290: PUSH
59291: LD_INT 4
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 4
59301: NEG
59302: PUSH
59303: LD_INT 3
59305: NEG
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: LIST
59315: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59316: LD_ADDR_VAR 0 29
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: LD_INT 3
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: LD_INT 3
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 1
59346: PUSH
59347: LD_INT 2
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: LD_INT 4
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: LD_INT 4
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: LD_INT 3
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: LD_INT 5
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: LD_INT 5
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 1
59414: PUSH
59415: LD_INT 4
59417: NEG
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 1
59425: NEG
59426: PUSH
59427: LD_INT 6
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: LD_INT 6
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: LD_INT 5
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59471: LD_ADDR_VAR 0 30
59475: PUSH
59476: LD_INT 2
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 3
59489: PUSH
59490: LD_INT 0
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 3
59499: PUSH
59500: LD_INT 1
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 3
59509: PUSH
59510: LD_INT 1
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 4
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 4
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 4
59540: PUSH
59541: LD_INT 1
59543: NEG
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 5
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 5
59561: PUSH
59562: LD_INT 1
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 5
59571: PUSH
59572: LD_INT 1
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 6
59582: PUSH
59583: LD_INT 0
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 6
59592: PUSH
59593: LD_INT 1
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59614: LD_ADDR_VAR 0 31
59618: PUSH
59619: LD_INT 3
59621: PUSH
59622: LD_INT 2
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 3
59631: PUSH
59632: LD_INT 3
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 2
59641: PUSH
59642: LD_INT 3
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 4
59651: PUSH
59652: LD_INT 3
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 4
59661: PUSH
59662: LD_INT 4
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 3
59671: PUSH
59672: LD_INT 4
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 5
59681: PUSH
59682: LD_INT 4
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 5
59691: PUSH
59692: LD_INT 5
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 4
59701: PUSH
59702: LD_INT 5
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 6
59711: PUSH
59712: LD_INT 5
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 6
59721: PUSH
59722: LD_INT 6
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 5
59731: PUSH
59732: LD_INT 6
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59753: LD_ADDR_VAR 0 32
59757: PUSH
59758: LD_INT 1
59760: PUSH
59761: LD_INT 3
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: LD_INT 3
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: LD_INT 2
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 1
59791: PUSH
59792: LD_INT 4
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: LD_INT 4
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 1
59811: NEG
59812: PUSH
59813: LD_INT 3
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 1
59822: PUSH
59823: LD_INT 5
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: LD_INT 5
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 1
59842: NEG
59843: PUSH
59844: LD_INT 4
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: PUSH
59854: LD_INT 6
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: LD_INT 6
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 1
59873: NEG
59874: PUSH
59875: LD_INT 5
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59896: LD_ADDR_VAR 0 33
59900: PUSH
59901: LD_INT 2
59903: NEG
59904: PUSH
59905: LD_INT 1
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 3
59914: NEG
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 3
59925: NEG
59926: PUSH
59927: LD_INT 1
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 3
59937: NEG
59938: PUSH
59939: LD_INT 1
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 4
59948: NEG
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 4
59959: NEG
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 4
59971: NEG
59972: PUSH
59973: LD_INT 1
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 5
59982: NEG
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 5
59993: NEG
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 5
60005: NEG
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 6
60016: NEG
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 6
60027: NEG
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60051: LD_ADDR_VAR 0 34
60055: PUSH
60056: LD_INT 2
60058: NEG
60059: PUSH
60060: LD_INT 3
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 3
60070: NEG
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 3
60082: NEG
60083: PUSH
60084: LD_INT 3
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 3
60094: NEG
60095: PUSH
60096: LD_INT 4
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 4
60106: NEG
60107: PUSH
60108: LD_INT 3
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 4
60118: NEG
60119: PUSH
60120: LD_INT 4
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 4
60130: NEG
60131: PUSH
60132: LD_INT 5
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 5
60142: NEG
60143: PUSH
60144: LD_INT 4
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 5
60154: NEG
60155: PUSH
60156: LD_INT 5
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 5
60166: NEG
60167: PUSH
60168: LD_INT 6
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 6
60178: NEG
60179: PUSH
60180: LD_INT 5
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 6
60190: NEG
60191: PUSH
60192: LD_INT 6
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60214: LD_ADDR_VAR 0 41
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: LD_INT 2
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 1
60232: NEG
60233: PUSH
60234: LD_INT 3
60236: NEG
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: LD_INT 2
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: LIST
60257: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60258: LD_ADDR_VAR 0 42
60262: PUSH
60263: LD_INT 2
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 2
60275: PUSH
60276: LD_INT 1
60278: NEG
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 3
60286: PUSH
60287: LD_INT 1
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: LIST
60298: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60299: LD_ADDR_VAR 0 43
60303: PUSH
60304: LD_INT 2
60306: PUSH
60307: LD_INT 2
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 3
60316: PUSH
60317: LD_INT 2
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 2
60326: PUSH
60327: LD_INT 3
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: LIST
60338: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60339: LD_ADDR_VAR 0 44
60343: PUSH
60344: LD_INT 0
60346: PUSH
60347: LD_INT 2
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 1
60356: PUSH
60357: LD_INT 3
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 1
60366: NEG
60367: PUSH
60368: LD_INT 2
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: LIST
60379: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60380: LD_ADDR_VAR 0 45
60384: PUSH
60385: LD_INT 2
60387: NEG
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 2
60398: NEG
60399: PUSH
60400: LD_INT 1
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 3
60409: NEG
60410: PUSH
60411: LD_INT 1
60413: NEG
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: LIST
60423: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60424: LD_ADDR_VAR 0 46
60428: PUSH
60429: LD_INT 2
60431: NEG
60432: PUSH
60433: LD_INT 2
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 2
60443: NEG
60444: PUSH
60445: LD_INT 3
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 3
60455: NEG
60456: PUSH
60457: LD_INT 2
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: LIST
60469: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60470: LD_ADDR_VAR 0 47
60474: PUSH
60475: LD_INT 2
60477: NEG
60478: PUSH
60479: LD_INT 3
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 1
60489: NEG
60490: PUSH
60491: LD_INT 3
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60503: LD_ADDR_VAR 0 48
60507: PUSH
60508: LD_INT 1
60510: PUSH
60511: LD_INT 2
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 2
60521: PUSH
60522: LD_INT 1
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60534: LD_ADDR_VAR 0 49
60538: PUSH
60539: LD_INT 3
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 3
60551: PUSH
60552: LD_INT 2
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60563: LD_ADDR_VAR 0 50
60567: PUSH
60568: LD_INT 2
60570: PUSH
60571: LD_INT 3
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 1
60580: PUSH
60581: LD_INT 3
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60592: LD_ADDR_VAR 0 51
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: LD_INT 2
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 2
60610: NEG
60611: PUSH
60612: LD_INT 1
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60623: LD_ADDR_VAR 0 52
60627: PUSH
60628: LD_INT 3
60630: NEG
60631: PUSH
60632: LD_INT 1
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 3
60642: NEG
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60656: LD_ADDR_VAR 0 53
60660: PUSH
60661: LD_INT 1
60663: NEG
60664: PUSH
60665: LD_INT 3
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: LD_INT 3
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 1
60686: PUSH
60687: LD_INT 2
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: LIST
60699: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60700: LD_ADDR_VAR 0 54
60704: PUSH
60705: LD_INT 2
60707: PUSH
60708: LD_INT 1
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 3
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 3
60728: PUSH
60729: LD_INT 1
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: LIST
60740: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60741: LD_ADDR_VAR 0 55
60745: PUSH
60746: LD_INT 3
60748: PUSH
60749: LD_INT 2
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 3
60758: PUSH
60759: LD_INT 3
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 2
60768: PUSH
60769: LD_INT 3
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: LIST
60780: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60781: LD_ADDR_VAR 0 56
60785: PUSH
60786: LD_INT 1
60788: PUSH
60789: LD_INT 3
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: LD_INT 3
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 1
60808: NEG
60809: PUSH
60810: LD_INT 2
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: LIST
60821: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60822: LD_ADDR_VAR 0 57
60826: PUSH
60827: LD_INT 2
60829: NEG
60830: PUSH
60831: LD_INT 1
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 3
60840: NEG
60841: PUSH
60842: LD_INT 0
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 3
60851: NEG
60852: PUSH
60853: LD_INT 1
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: LIST
60865: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60866: LD_ADDR_VAR 0 58
60870: PUSH
60871: LD_INT 2
60873: NEG
60874: PUSH
60875: LD_INT 3
60877: NEG
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 3
60885: NEG
60886: PUSH
60887: LD_INT 2
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 3
60897: NEG
60898: PUSH
60899: LD_INT 3
60901: NEG
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: LIST
60911: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60912: LD_ADDR_VAR 0 59
60916: PUSH
60917: LD_INT 1
60919: NEG
60920: PUSH
60921: LD_INT 2
60923: NEG
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: LD_INT 2
60934: NEG
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 1
60942: PUSH
60943: LD_INT 1
60945: NEG
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: LIST
60955: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60956: LD_ADDR_VAR 0 60
60960: PUSH
60961: LD_INT 1
60963: PUSH
60964: LD_INT 1
60966: NEG
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 2
60974: PUSH
60975: LD_INT 0
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 2
60984: PUSH
60985: LD_INT 1
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: LIST
60996: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60997: LD_ADDR_VAR 0 61
61001: PUSH
61002: LD_INT 2
61004: PUSH
61005: LD_INT 1
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 2
61014: PUSH
61015: LD_INT 2
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 1
61024: PUSH
61025: LD_INT 2
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: LIST
61036: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61037: LD_ADDR_VAR 0 62
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: LD_INT 2
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 0
61054: PUSH
61055: LD_INT 2
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: LD_INT 1
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: LIST
61077: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61078: LD_ADDR_VAR 0 63
61082: PUSH
61083: LD_INT 1
61085: NEG
61086: PUSH
61087: LD_INT 1
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 2
61096: NEG
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 2
61107: NEG
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: LIST
61121: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61122: LD_ADDR_VAR 0 64
61126: PUSH
61127: LD_INT 1
61129: NEG
61130: PUSH
61131: LD_INT 2
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 2
61141: NEG
61142: PUSH
61143: LD_INT 1
61145: NEG
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 2
61153: NEG
61154: PUSH
61155: LD_INT 2
61157: NEG
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: LIST
61167: ST_TO_ADDR
// end ; 2 :
61168: GO 64434
61170: LD_INT 2
61172: DOUBLE
61173: EQUAL
61174: IFTRUE 61178
61176: GO 64433
61178: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61179: LD_ADDR_VAR 0 29
61183: PUSH
61184: LD_INT 4
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 4
61196: PUSH
61197: LD_INT 1
61199: NEG
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 5
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 5
61217: PUSH
61218: LD_INT 1
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 4
61227: PUSH
61228: LD_INT 1
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 3
61237: PUSH
61238: LD_INT 0
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 3
61247: PUSH
61248: LD_INT 1
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 3
61258: PUSH
61259: LD_INT 2
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 5
61269: PUSH
61270: LD_INT 2
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 3
61279: PUSH
61280: LD_INT 3
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 3
61289: PUSH
61290: LD_INT 2
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 4
61299: PUSH
61300: LD_INT 3
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 4
61309: PUSH
61310: LD_INT 4
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 3
61319: PUSH
61320: LD_INT 4
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 2
61329: PUSH
61330: LD_INT 3
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 2
61339: PUSH
61340: LD_INT 2
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 4
61349: PUSH
61350: LD_INT 2
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 2
61359: PUSH
61360: LD_INT 4
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 0
61369: PUSH
61370: LD_INT 4
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: LD_INT 3
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 1
61389: PUSH
61390: LD_INT 4
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 1
61399: PUSH
61400: LD_INT 5
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: LD_INT 5
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 1
61419: NEG
61420: PUSH
61421: LD_INT 4
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: NEG
61431: PUSH
61432: LD_INT 3
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 2
61441: PUSH
61442: LD_INT 5
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 2
61451: NEG
61452: PUSH
61453: LD_INT 3
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 3
61462: NEG
61463: PUSH
61464: LD_INT 0
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 3
61473: NEG
61474: PUSH
61475: LD_INT 1
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 2
61485: NEG
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 2
61496: NEG
61497: PUSH
61498: LD_INT 1
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 3
61507: NEG
61508: PUSH
61509: LD_INT 1
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 4
61518: NEG
61519: PUSH
61520: LD_INT 0
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 4
61529: NEG
61530: PUSH
61531: LD_INT 1
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 4
61541: NEG
61542: PUSH
61543: LD_INT 2
61545: NEG
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 2
61553: NEG
61554: PUSH
61555: LD_INT 2
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 4
61564: NEG
61565: PUSH
61566: LD_INT 4
61568: NEG
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 4
61576: NEG
61577: PUSH
61578: LD_INT 5
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 3
61588: NEG
61589: PUSH
61590: LD_INT 4
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 3
61600: NEG
61601: PUSH
61602: LD_INT 3
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 4
61612: NEG
61613: PUSH
61614: LD_INT 3
61616: NEG
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 5
61624: NEG
61625: PUSH
61626: LD_INT 4
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 5
61636: NEG
61637: PUSH
61638: LD_INT 5
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 3
61648: NEG
61649: PUSH
61650: LD_INT 5
61652: NEG
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 5
61660: NEG
61661: PUSH
61662: LD_INT 3
61664: NEG
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61717: LD_ADDR_VAR 0 30
61721: PUSH
61722: LD_INT 4
61724: PUSH
61725: LD_INT 4
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 4
61734: PUSH
61735: LD_INT 3
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 5
61744: PUSH
61745: LD_INT 4
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 5
61754: PUSH
61755: LD_INT 5
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 4
61764: PUSH
61765: LD_INT 5
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 3
61774: PUSH
61775: LD_INT 4
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 3
61784: PUSH
61785: LD_INT 3
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 5
61794: PUSH
61795: LD_INT 3
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 3
61804: PUSH
61805: LD_INT 5
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: LD_INT 3
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 0
61824: PUSH
61825: LD_INT 2
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: LD_INT 3
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 1
61844: PUSH
61845: LD_INT 4
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 0
61854: PUSH
61855: LD_INT 4
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 1
61864: NEG
61865: PUSH
61866: LD_INT 3
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: LD_INT 2
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 2
61886: PUSH
61887: LD_INT 4
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 2
61896: NEG
61897: PUSH
61898: LD_INT 2
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 4
61907: NEG
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 4
61918: NEG
61919: PUSH
61920: LD_INT 1
61922: NEG
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 3
61930: NEG
61931: PUSH
61932: LD_INT 0
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 3
61941: NEG
61942: PUSH
61943: LD_INT 1
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 4
61952: NEG
61953: PUSH
61954: LD_INT 1
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 5
61963: NEG
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 5
61974: NEG
61975: PUSH
61976: LD_INT 1
61978: NEG
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 5
61986: NEG
61987: PUSH
61988: LD_INT 2
61990: NEG
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 3
61998: NEG
61999: PUSH
62000: LD_INT 2
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 3
62009: NEG
62010: PUSH
62011: LD_INT 3
62013: NEG
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 3
62021: NEG
62022: PUSH
62023: LD_INT 4
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 2
62033: NEG
62034: PUSH
62035: LD_INT 3
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 2
62045: NEG
62046: PUSH
62047: LD_INT 2
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 3
62057: NEG
62058: PUSH
62059: LD_INT 2
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 4
62069: NEG
62070: PUSH
62071: LD_INT 3
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 4
62081: NEG
62082: PUSH
62083: LD_INT 4
62085: NEG
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 2
62093: NEG
62094: PUSH
62095: LD_INT 4
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 4
62105: NEG
62106: PUSH
62107: LD_INT 2
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 0
62117: PUSH
62118: LD_INT 4
62120: NEG
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: LD_INT 5
62131: NEG
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 1
62139: PUSH
62140: LD_INT 4
62142: NEG
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 1
62150: PUSH
62151: LD_INT 3
62153: NEG
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 0
62161: PUSH
62162: LD_INT 3
62164: NEG
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 1
62172: NEG
62173: PUSH
62174: LD_INT 4
62176: NEG
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 1
62184: NEG
62185: PUSH
62186: LD_INT 5
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 2
62196: PUSH
62197: LD_INT 3
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 2
62207: NEG
62208: PUSH
62209: LD_INT 5
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62264: LD_ADDR_VAR 0 31
62268: PUSH
62269: LD_INT 0
62271: PUSH
62272: LD_INT 4
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: LD_INT 3
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 1
62291: PUSH
62292: LD_INT 4
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: PUSH
62302: LD_INT 5
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 0
62311: PUSH
62312: LD_INT 5
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 1
62321: NEG
62322: PUSH
62323: LD_INT 4
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: PUSH
62334: LD_INT 3
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 2
62343: PUSH
62344: LD_INT 5
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 2
62353: NEG
62354: PUSH
62355: LD_INT 3
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 3
62364: NEG
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 3
62375: NEG
62376: PUSH
62377: LD_INT 1
62379: NEG
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 2
62387: NEG
62388: PUSH
62389: LD_INT 0
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 2
62398: NEG
62399: PUSH
62400: LD_INT 1
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 3
62409: NEG
62410: PUSH
62411: LD_INT 1
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 4
62420: NEG
62421: PUSH
62422: LD_INT 0
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 4
62431: NEG
62432: PUSH
62433: LD_INT 1
62435: NEG
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 4
62443: NEG
62444: PUSH
62445: LD_INT 2
62447: NEG
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 2
62455: NEG
62456: PUSH
62457: LD_INT 2
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 4
62466: NEG
62467: PUSH
62468: LD_INT 4
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 4
62478: NEG
62479: PUSH
62480: LD_INT 5
62482: NEG
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 3
62490: NEG
62491: PUSH
62492: LD_INT 4
62494: NEG
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 3
62502: NEG
62503: PUSH
62504: LD_INT 3
62506: NEG
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 4
62514: NEG
62515: PUSH
62516: LD_INT 3
62518: NEG
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 5
62526: NEG
62527: PUSH
62528: LD_INT 4
62530: NEG
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 5
62538: NEG
62539: PUSH
62540: LD_INT 5
62542: NEG
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 3
62550: NEG
62551: PUSH
62552: LD_INT 5
62554: NEG
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 5
62562: NEG
62563: PUSH
62564: LD_INT 3
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: LD_INT 3
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 0
62585: PUSH
62586: LD_INT 4
62588: NEG
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 1
62596: PUSH
62597: LD_INT 3
62599: NEG
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 1
62607: PUSH
62608: LD_INT 2
62610: NEG
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: LD_INT 2
62621: NEG
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 1
62629: NEG
62630: PUSH
62631: LD_INT 3
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 1
62641: NEG
62642: PUSH
62643: LD_INT 4
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 2
62653: PUSH
62654: LD_INT 2
62656: NEG
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 2
62664: NEG
62665: PUSH
62666: LD_INT 4
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 4
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 4
62686: PUSH
62687: LD_INT 1
62689: NEG
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 5
62697: PUSH
62698: LD_INT 0
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 5
62707: PUSH
62708: LD_INT 1
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 4
62717: PUSH
62718: LD_INT 1
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 3
62727: PUSH
62728: LD_INT 0
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 3
62737: PUSH
62738: LD_INT 1
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 3
62748: PUSH
62749: LD_INT 2
62751: NEG
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 5
62759: PUSH
62760: LD_INT 2
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62814: LD_ADDR_VAR 0 32
62818: PUSH
62819: LD_INT 4
62821: NEG
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 4
62832: NEG
62833: PUSH
62834: LD_INT 1
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 3
62844: NEG
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 3
62855: NEG
62856: PUSH
62857: LD_INT 1
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 4
62866: NEG
62867: PUSH
62868: LD_INT 1
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 5
62877: NEG
62878: PUSH
62879: LD_INT 0
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 5
62888: NEG
62889: PUSH
62890: LD_INT 1
62892: NEG
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 5
62900: NEG
62901: PUSH
62902: LD_INT 2
62904: NEG
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 3
62912: NEG
62913: PUSH
62914: LD_INT 2
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 3
62923: NEG
62924: PUSH
62925: LD_INT 3
62927: NEG
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 3
62935: NEG
62936: PUSH
62937: LD_INT 4
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 2
62947: NEG
62948: PUSH
62949: LD_INT 3
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 2
62959: NEG
62960: PUSH
62961: LD_INT 2
62963: NEG
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 3
62971: NEG
62972: PUSH
62973: LD_INT 2
62975: NEG
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 4
62983: NEG
62984: PUSH
62985: LD_INT 3
62987: NEG
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 4
62995: NEG
62996: PUSH
62997: LD_INT 4
62999: NEG
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 2
63007: NEG
63008: PUSH
63009: LD_INT 4
63011: NEG
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 4
63019: NEG
63020: PUSH
63021: LD_INT 2
63023: NEG
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: LD_INT 4
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 0
63042: PUSH
63043: LD_INT 5
63045: NEG
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 1
63053: PUSH
63054: LD_INT 4
63056: NEG
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 1
63064: PUSH
63065: LD_INT 3
63067: NEG
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: LD_INT 3
63078: NEG
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 1
63086: NEG
63087: PUSH
63088: LD_INT 4
63090: NEG
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 1
63098: NEG
63099: PUSH
63100: LD_INT 5
63102: NEG
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 2
63110: PUSH
63111: LD_INT 3
63113: NEG
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 2
63121: NEG
63122: PUSH
63123: LD_INT 5
63125: NEG
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 3
63133: PUSH
63134: LD_INT 0
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 3
63143: PUSH
63144: LD_INT 1
63146: NEG
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 4
63154: PUSH
63155: LD_INT 0
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 4
63164: PUSH
63165: LD_INT 1
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 3
63174: PUSH
63175: LD_INT 1
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 2
63184: PUSH
63185: LD_INT 0
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 2
63194: PUSH
63195: LD_INT 1
63197: NEG
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 2
63205: PUSH
63206: LD_INT 2
63208: NEG
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 4
63216: PUSH
63217: LD_INT 2
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 4
63226: PUSH
63227: LD_INT 4
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 4
63236: PUSH
63237: LD_INT 3
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 5
63246: PUSH
63247: LD_INT 4
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 5
63256: PUSH
63257: LD_INT 5
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 4
63266: PUSH
63267: LD_INT 5
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 3
63276: PUSH
63277: LD_INT 4
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 3
63286: PUSH
63287: LD_INT 3
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 5
63296: PUSH
63297: LD_INT 3
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 3
63306: PUSH
63307: LD_INT 5
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63361: LD_ADDR_VAR 0 33
63365: PUSH
63366: LD_INT 4
63368: NEG
63369: PUSH
63370: LD_INT 4
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 4
63380: NEG
63381: PUSH
63382: LD_INT 5
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 3
63392: NEG
63393: PUSH
63394: LD_INT 4
63396: NEG
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 3
63404: NEG
63405: PUSH
63406: LD_INT 3
63408: NEG
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 4
63416: NEG
63417: PUSH
63418: LD_INT 3
63420: NEG
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 5
63428: NEG
63429: PUSH
63430: LD_INT 4
63432: NEG
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 5
63440: NEG
63441: PUSH
63442: LD_INT 5
63444: NEG
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 3
63452: NEG
63453: PUSH
63454: LD_INT 5
63456: NEG
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 5
63464: NEG
63465: PUSH
63466: LD_INT 3
63468: NEG
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 0
63476: PUSH
63477: LD_INT 3
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 0
63487: PUSH
63488: LD_INT 4
63490: NEG
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 1
63498: PUSH
63499: LD_INT 3
63501: NEG
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 1
63509: PUSH
63510: LD_INT 2
63512: NEG
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: LD_INT 2
63523: NEG
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 1
63531: NEG
63532: PUSH
63533: LD_INT 3
63535: NEG
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 1
63543: NEG
63544: PUSH
63545: LD_INT 4
63547: NEG
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 2
63555: PUSH
63556: LD_INT 2
63558: NEG
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 2
63566: NEG
63567: PUSH
63568: LD_INT 4
63570: NEG
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 4
63578: PUSH
63579: LD_INT 0
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 4
63588: PUSH
63589: LD_INT 1
63591: NEG
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 5
63599: PUSH
63600: LD_INT 0
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 5
63609: PUSH
63610: LD_INT 1
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 4
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 3
63629: PUSH
63630: LD_INT 0
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 3
63639: PUSH
63640: LD_INT 1
63642: NEG
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 3
63650: PUSH
63651: LD_INT 2
63653: NEG
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 5
63661: PUSH
63662: LD_INT 2
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 3
63671: PUSH
63672: LD_INT 3
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 3
63681: PUSH
63682: LD_INT 2
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 4
63691: PUSH
63692: LD_INT 3
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 4
63701: PUSH
63702: LD_INT 4
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 3
63711: PUSH
63712: LD_INT 4
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 2
63721: PUSH
63722: LD_INT 3
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 2
63731: PUSH
63732: LD_INT 2
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 4
63741: PUSH
63742: LD_INT 2
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 2
63751: PUSH
63752: LD_INT 4
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 0
63761: PUSH
63762: LD_INT 4
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 0
63771: PUSH
63772: LD_INT 3
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 1
63781: PUSH
63782: LD_INT 4
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 1
63791: PUSH
63792: LD_INT 5
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 0
63801: PUSH
63802: LD_INT 5
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 1
63811: NEG
63812: PUSH
63813: LD_INT 4
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 1
63822: NEG
63823: PUSH
63824: LD_INT 3
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 2
63833: PUSH
63834: LD_INT 5
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 2
63843: NEG
63844: PUSH
63845: LD_INT 3
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63899: LD_ADDR_VAR 0 34
63903: PUSH
63904: LD_INT 0
63906: PUSH
63907: LD_INT 4
63909: NEG
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: LD_INT 5
63920: NEG
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 1
63928: PUSH
63929: LD_INT 4
63931: NEG
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 1
63939: PUSH
63940: LD_INT 3
63942: NEG
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 0
63950: PUSH
63951: LD_INT 3
63953: NEG
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 1
63961: NEG
63962: PUSH
63963: LD_INT 4
63965: NEG
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 1
63973: NEG
63974: PUSH
63975: LD_INT 5
63977: NEG
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 2
63985: PUSH
63986: LD_INT 3
63988: NEG
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 2
63996: NEG
63997: PUSH
63998: LD_INT 5
64000: NEG
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 3
64008: PUSH
64009: LD_INT 0
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 3
64018: PUSH
64019: LD_INT 1
64021: NEG
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 4
64029: PUSH
64030: LD_INT 0
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 4
64039: PUSH
64040: LD_INT 1
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 3
64049: PUSH
64050: LD_INT 1
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 2
64059: PUSH
64060: LD_INT 0
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 2
64069: PUSH
64070: LD_INT 1
64072: NEG
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 2
64080: PUSH
64081: LD_INT 2
64083: NEG
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 4
64091: PUSH
64092: LD_INT 2
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 4
64101: PUSH
64102: LD_INT 4
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 4
64111: PUSH
64112: LD_INT 3
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 5
64121: PUSH
64122: LD_INT 4
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 5
64131: PUSH
64132: LD_INT 5
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 4
64141: PUSH
64142: LD_INT 5
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 3
64151: PUSH
64152: LD_INT 4
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 3
64161: PUSH
64162: LD_INT 3
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 5
64171: PUSH
64172: LD_INT 3
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 3
64181: PUSH
64182: LD_INT 5
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 0
64191: PUSH
64192: LD_INT 3
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 0
64201: PUSH
64202: LD_INT 2
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 1
64211: PUSH
64212: LD_INT 3
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 1
64221: PUSH
64222: LD_INT 4
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 0
64231: PUSH
64232: LD_INT 4
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 1
64241: NEG
64242: PUSH
64243: LD_INT 3
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 1
64252: NEG
64253: PUSH
64254: LD_INT 2
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 2
64263: PUSH
64264: LD_INT 4
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 2
64273: NEG
64274: PUSH
64275: LD_INT 2
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 4
64284: NEG
64285: PUSH
64286: LD_INT 0
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 4
64295: NEG
64296: PUSH
64297: LD_INT 1
64299: NEG
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 3
64307: NEG
64308: PUSH
64309: LD_INT 0
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 3
64318: NEG
64319: PUSH
64320: LD_INT 1
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 4
64329: NEG
64330: PUSH
64331: LD_INT 1
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 5
64340: NEG
64341: PUSH
64342: LD_INT 0
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 5
64351: NEG
64352: PUSH
64353: LD_INT 1
64355: NEG
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 5
64363: NEG
64364: PUSH
64365: LD_INT 2
64367: NEG
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 3
64375: NEG
64376: PUSH
64377: LD_INT 2
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: ST_TO_ADDR
// end ; end ;
64431: GO 64434
64433: POP
// case btype of b_depot , b_warehouse :
64434: LD_VAR 0 1
64438: PUSH
64439: LD_INT 0
64441: DOUBLE
64442: EQUAL
64443: IFTRUE 64453
64445: LD_INT 1
64447: DOUBLE
64448: EQUAL
64449: IFTRUE 64453
64451: GO 64654
64453: POP
// case nation of nation_american :
64454: LD_VAR 0 5
64458: PUSH
64459: LD_INT 1
64461: DOUBLE
64462: EQUAL
64463: IFTRUE 64467
64465: GO 64523
64467: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64468: LD_ADDR_VAR 0 9
64472: PUSH
64473: LD_VAR 0 11
64477: PUSH
64478: LD_VAR 0 12
64482: PUSH
64483: LD_VAR 0 13
64487: PUSH
64488: LD_VAR 0 14
64492: PUSH
64493: LD_VAR 0 15
64497: PUSH
64498: LD_VAR 0 16
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: PUSH
64511: LD_VAR 0 4
64515: PUSH
64516: LD_INT 1
64518: PLUS
64519: ARRAY
64520: ST_TO_ADDR
64521: GO 64652
64523: LD_INT 2
64525: DOUBLE
64526: EQUAL
64527: IFTRUE 64531
64529: GO 64587
64531: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64532: LD_ADDR_VAR 0 9
64536: PUSH
64537: LD_VAR 0 17
64541: PUSH
64542: LD_VAR 0 18
64546: PUSH
64547: LD_VAR 0 19
64551: PUSH
64552: LD_VAR 0 20
64556: PUSH
64557: LD_VAR 0 21
64561: PUSH
64562: LD_VAR 0 22
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: PUSH
64575: LD_VAR 0 4
64579: PUSH
64580: LD_INT 1
64582: PLUS
64583: ARRAY
64584: ST_TO_ADDR
64585: GO 64652
64587: LD_INT 3
64589: DOUBLE
64590: EQUAL
64591: IFTRUE 64595
64593: GO 64651
64595: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64596: LD_ADDR_VAR 0 9
64600: PUSH
64601: LD_VAR 0 23
64605: PUSH
64606: LD_VAR 0 24
64610: PUSH
64611: LD_VAR 0 25
64615: PUSH
64616: LD_VAR 0 26
64620: PUSH
64621: LD_VAR 0 27
64625: PUSH
64626: LD_VAR 0 28
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: PUSH
64639: LD_VAR 0 4
64643: PUSH
64644: LD_INT 1
64646: PLUS
64647: ARRAY
64648: ST_TO_ADDR
64649: GO 64652
64651: POP
64652: GO 65207
64654: LD_INT 2
64656: DOUBLE
64657: EQUAL
64658: IFTRUE 64668
64660: LD_INT 3
64662: DOUBLE
64663: EQUAL
64664: IFTRUE 64668
64666: GO 64724
64668: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64669: LD_ADDR_VAR 0 9
64673: PUSH
64674: LD_VAR 0 29
64678: PUSH
64679: LD_VAR 0 30
64683: PUSH
64684: LD_VAR 0 31
64688: PUSH
64689: LD_VAR 0 32
64693: PUSH
64694: LD_VAR 0 33
64698: PUSH
64699: LD_VAR 0 34
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: PUSH
64712: LD_VAR 0 4
64716: PUSH
64717: LD_INT 1
64719: PLUS
64720: ARRAY
64721: ST_TO_ADDR
64722: GO 65207
64724: LD_INT 16
64726: DOUBLE
64727: EQUAL
64728: IFTRUE 64786
64730: LD_INT 17
64732: DOUBLE
64733: EQUAL
64734: IFTRUE 64786
64736: LD_INT 18
64738: DOUBLE
64739: EQUAL
64740: IFTRUE 64786
64742: LD_INT 19
64744: DOUBLE
64745: EQUAL
64746: IFTRUE 64786
64748: LD_INT 22
64750: DOUBLE
64751: EQUAL
64752: IFTRUE 64786
64754: LD_INT 20
64756: DOUBLE
64757: EQUAL
64758: IFTRUE 64786
64760: LD_INT 21
64762: DOUBLE
64763: EQUAL
64764: IFTRUE 64786
64766: LD_INT 23
64768: DOUBLE
64769: EQUAL
64770: IFTRUE 64786
64772: LD_INT 24
64774: DOUBLE
64775: EQUAL
64776: IFTRUE 64786
64778: LD_INT 25
64780: DOUBLE
64781: EQUAL
64782: IFTRUE 64786
64784: GO 64842
64786: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64787: LD_ADDR_VAR 0 9
64791: PUSH
64792: LD_VAR 0 35
64796: PUSH
64797: LD_VAR 0 36
64801: PUSH
64802: LD_VAR 0 37
64806: PUSH
64807: LD_VAR 0 38
64811: PUSH
64812: LD_VAR 0 39
64816: PUSH
64817: LD_VAR 0 40
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: PUSH
64830: LD_VAR 0 4
64834: PUSH
64835: LD_INT 1
64837: PLUS
64838: ARRAY
64839: ST_TO_ADDR
64840: GO 65207
64842: LD_INT 6
64844: DOUBLE
64845: EQUAL
64846: IFTRUE 64898
64848: LD_INT 7
64850: DOUBLE
64851: EQUAL
64852: IFTRUE 64898
64854: LD_INT 8
64856: DOUBLE
64857: EQUAL
64858: IFTRUE 64898
64860: LD_INT 13
64862: DOUBLE
64863: EQUAL
64864: IFTRUE 64898
64866: LD_INT 12
64868: DOUBLE
64869: EQUAL
64870: IFTRUE 64898
64872: LD_INT 15
64874: DOUBLE
64875: EQUAL
64876: IFTRUE 64898
64878: LD_INT 11
64880: DOUBLE
64881: EQUAL
64882: IFTRUE 64898
64884: LD_INT 14
64886: DOUBLE
64887: EQUAL
64888: IFTRUE 64898
64890: LD_INT 10
64892: DOUBLE
64893: EQUAL
64894: IFTRUE 64898
64896: GO 64954
64898: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64899: LD_ADDR_VAR 0 9
64903: PUSH
64904: LD_VAR 0 41
64908: PUSH
64909: LD_VAR 0 42
64913: PUSH
64914: LD_VAR 0 43
64918: PUSH
64919: LD_VAR 0 44
64923: PUSH
64924: LD_VAR 0 45
64928: PUSH
64929: LD_VAR 0 46
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: PUSH
64942: LD_VAR 0 4
64946: PUSH
64947: LD_INT 1
64949: PLUS
64950: ARRAY
64951: ST_TO_ADDR
64952: GO 65207
64954: LD_INT 36
64956: DOUBLE
64957: EQUAL
64958: IFTRUE 64962
64960: GO 65018
64962: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64963: LD_ADDR_VAR 0 9
64967: PUSH
64968: LD_VAR 0 47
64972: PUSH
64973: LD_VAR 0 48
64977: PUSH
64978: LD_VAR 0 49
64982: PUSH
64983: LD_VAR 0 50
64987: PUSH
64988: LD_VAR 0 51
64992: PUSH
64993: LD_VAR 0 52
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: PUSH
65006: LD_VAR 0 4
65010: PUSH
65011: LD_INT 1
65013: PLUS
65014: ARRAY
65015: ST_TO_ADDR
65016: GO 65207
65018: LD_INT 4
65020: DOUBLE
65021: EQUAL
65022: IFTRUE 65044
65024: LD_INT 5
65026: DOUBLE
65027: EQUAL
65028: IFTRUE 65044
65030: LD_INT 34
65032: DOUBLE
65033: EQUAL
65034: IFTRUE 65044
65036: LD_INT 37
65038: DOUBLE
65039: EQUAL
65040: IFTRUE 65044
65042: GO 65100
65044: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65045: LD_ADDR_VAR 0 9
65049: PUSH
65050: LD_VAR 0 53
65054: PUSH
65055: LD_VAR 0 54
65059: PUSH
65060: LD_VAR 0 55
65064: PUSH
65065: LD_VAR 0 56
65069: PUSH
65070: LD_VAR 0 57
65074: PUSH
65075: LD_VAR 0 58
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: PUSH
65088: LD_VAR 0 4
65092: PUSH
65093: LD_INT 1
65095: PLUS
65096: ARRAY
65097: ST_TO_ADDR
65098: GO 65207
65100: LD_INT 31
65102: DOUBLE
65103: EQUAL
65104: IFTRUE 65150
65106: LD_INT 32
65108: DOUBLE
65109: EQUAL
65110: IFTRUE 65150
65112: LD_INT 33
65114: DOUBLE
65115: EQUAL
65116: IFTRUE 65150
65118: LD_INT 27
65120: DOUBLE
65121: EQUAL
65122: IFTRUE 65150
65124: LD_INT 26
65126: DOUBLE
65127: EQUAL
65128: IFTRUE 65150
65130: LD_INT 28
65132: DOUBLE
65133: EQUAL
65134: IFTRUE 65150
65136: LD_INT 29
65138: DOUBLE
65139: EQUAL
65140: IFTRUE 65150
65142: LD_INT 30
65144: DOUBLE
65145: EQUAL
65146: IFTRUE 65150
65148: GO 65206
65150: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65151: LD_ADDR_VAR 0 9
65155: PUSH
65156: LD_VAR 0 59
65160: PUSH
65161: LD_VAR 0 60
65165: PUSH
65166: LD_VAR 0 61
65170: PUSH
65171: LD_VAR 0 62
65175: PUSH
65176: LD_VAR 0 63
65180: PUSH
65181: LD_VAR 0 64
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: PUSH
65194: LD_VAR 0 4
65198: PUSH
65199: LD_INT 1
65201: PLUS
65202: ARRAY
65203: ST_TO_ADDR
65204: GO 65207
65206: POP
// temp_list2 = [ ] ;
65207: LD_ADDR_VAR 0 10
65211: PUSH
65212: EMPTY
65213: ST_TO_ADDR
// for i in temp_list do
65214: LD_ADDR_VAR 0 8
65218: PUSH
65219: LD_VAR 0 9
65223: PUSH
65224: FOR_IN
65225: IFFALSE 65277
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65227: LD_ADDR_VAR 0 10
65231: PUSH
65232: LD_VAR 0 10
65236: PUSH
65237: LD_VAR 0 8
65241: PUSH
65242: LD_INT 1
65244: ARRAY
65245: PUSH
65246: LD_VAR 0 2
65250: PLUS
65251: PUSH
65252: LD_VAR 0 8
65256: PUSH
65257: LD_INT 2
65259: ARRAY
65260: PUSH
65261: LD_VAR 0 3
65265: PLUS
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: EMPTY
65272: LIST
65273: ADD
65274: ST_TO_ADDR
65275: GO 65224
65277: POP
65278: POP
// result = temp_list2 ;
65279: LD_ADDR_VAR 0 7
65283: PUSH
65284: LD_VAR 0 10
65288: ST_TO_ADDR
// end ;
65289: LD_VAR 0 7
65293: RET
// export function EnemyInRange ( unit , dist ) ; begin
65294: LD_INT 0
65296: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65297: LD_ADDR_VAR 0 3
65301: PUSH
65302: LD_VAR 0 1
65306: PPUSH
65307: CALL_OW 255
65311: PPUSH
65312: LD_VAR 0 1
65316: PPUSH
65317: CALL_OW 250
65321: PPUSH
65322: LD_VAR 0 1
65326: PPUSH
65327: CALL_OW 251
65331: PPUSH
65332: LD_VAR 0 2
65336: PPUSH
65337: CALL 38667 0 4
65341: PUSH
65342: LD_INT 4
65344: ARRAY
65345: ST_TO_ADDR
// end ;
65346: LD_VAR 0 3
65350: RET
// export function PlayerSeeMe ( unit ) ; begin
65351: LD_INT 0
65353: PPUSH
// result := See ( your_side , unit ) ;
65354: LD_ADDR_VAR 0 2
65358: PUSH
65359: LD_OWVAR 2
65363: PPUSH
65364: LD_VAR 0 1
65368: PPUSH
65369: CALL_OW 292
65373: ST_TO_ADDR
// end ;
65374: LD_VAR 0 2
65378: RET
// export function ReverseDir ( unit ) ; begin
65379: LD_INT 0
65381: PPUSH
// if not unit then
65382: LD_VAR 0 1
65386: NOT
65387: IFFALSE 65391
// exit ;
65389: GO 65414
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65391: LD_ADDR_VAR 0 2
65395: PUSH
65396: LD_VAR 0 1
65400: PPUSH
65401: CALL_OW 254
65405: PUSH
65406: LD_INT 3
65408: PLUS
65409: PUSH
65410: LD_INT 6
65412: MOD
65413: ST_TO_ADDR
// end ;
65414: LD_VAR 0 2
65418: RET
// export function ReverseArray ( array ) ; var i ; begin
65419: LD_INT 0
65421: PPUSH
65422: PPUSH
// if not array then
65423: LD_VAR 0 1
65427: NOT
65428: IFFALSE 65432
// exit ;
65430: GO 65487
// result := [ ] ;
65432: LD_ADDR_VAR 0 2
65436: PUSH
65437: EMPTY
65438: ST_TO_ADDR
// for i := array downto 1 do
65439: LD_ADDR_VAR 0 3
65443: PUSH
65444: DOUBLE
65445: LD_VAR 0 1
65449: INC
65450: ST_TO_ADDR
65451: LD_INT 1
65453: PUSH
65454: FOR_DOWNTO
65455: IFFALSE 65485
// result := Join ( result , array [ i ] ) ;
65457: LD_ADDR_VAR 0 2
65461: PUSH
65462: LD_VAR 0 2
65466: PPUSH
65467: LD_VAR 0 1
65471: PUSH
65472: LD_VAR 0 3
65476: ARRAY
65477: PPUSH
65478: CALL 70152 0 2
65482: ST_TO_ADDR
65483: GO 65454
65485: POP
65486: POP
// end ;
65487: LD_VAR 0 2
65491: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65492: LD_INT 0
65494: PPUSH
65495: PPUSH
65496: PPUSH
65497: PPUSH
65498: PPUSH
65499: PPUSH
// if not unit or not hexes then
65500: LD_VAR 0 1
65504: NOT
65505: PUSH
65506: LD_VAR 0 2
65510: NOT
65511: OR
65512: IFFALSE 65516
// exit ;
65514: GO 65639
// dist := 9999 ;
65516: LD_ADDR_VAR 0 5
65520: PUSH
65521: LD_INT 9999
65523: ST_TO_ADDR
// for i = 1 to hexes do
65524: LD_ADDR_VAR 0 4
65528: PUSH
65529: DOUBLE
65530: LD_INT 1
65532: DEC
65533: ST_TO_ADDR
65534: LD_VAR 0 2
65538: PUSH
65539: FOR_TO
65540: IFFALSE 65627
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65542: LD_ADDR_VAR 0 6
65546: PUSH
65547: LD_VAR 0 1
65551: PPUSH
65552: LD_VAR 0 2
65556: PUSH
65557: LD_VAR 0 4
65561: ARRAY
65562: PUSH
65563: LD_INT 1
65565: ARRAY
65566: PPUSH
65567: LD_VAR 0 2
65571: PUSH
65572: LD_VAR 0 4
65576: ARRAY
65577: PUSH
65578: LD_INT 2
65580: ARRAY
65581: PPUSH
65582: CALL_OW 297
65586: ST_TO_ADDR
// if tdist < dist then
65587: LD_VAR 0 6
65591: PUSH
65592: LD_VAR 0 5
65596: LESS
65597: IFFALSE 65625
// begin hex := hexes [ i ] ;
65599: LD_ADDR_VAR 0 8
65603: PUSH
65604: LD_VAR 0 2
65608: PUSH
65609: LD_VAR 0 4
65613: ARRAY
65614: ST_TO_ADDR
// dist := tdist ;
65615: LD_ADDR_VAR 0 5
65619: PUSH
65620: LD_VAR 0 6
65624: ST_TO_ADDR
// end ; end ;
65625: GO 65539
65627: POP
65628: POP
// result := hex ;
65629: LD_ADDR_VAR 0 3
65633: PUSH
65634: LD_VAR 0 8
65638: ST_TO_ADDR
// end ;
65639: LD_VAR 0 3
65643: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65644: LD_INT 0
65646: PPUSH
65647: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65648: LD_VAR 0 1
65652: NOT
65653: PUSH
65654: LD_VAR 0 1
65658: PUSH
65659: LD_INT 21
65661: PUSH
65662: LD_INT 2
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 23
65671: PUSH
65672: LD_INT 2
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PPUSH
65683: CALL_OW 69
65687: IN
65688: NOT
65689: OR
65690: IFFALSE 65694
// exit ;
65692: GO 65741
// for i = 1 to 3 do
65694: LD_ADDR_VAR 0 3
65698: PUSH
65699: DOUBLE
65700: LD_INT 1
65702: DEC
65703: ST_TO_ADDR
65704: LD_INT 3
65706: PUSH
65707: FOR_TO
65708: IFFALSE 65739
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65710: LD_VAR 0 1
65714: PPUSH
65715: CALL_OW 250
65719: PPUSH
65720: LD_VAR 0 1
65724: PPUSH
65725: CALL_OW 251
65729: PPUSH
65730: LD_INT 1
65732: PPUSH
65733: CALL_OW 453
65737: GO 65707
65739: POP
65740: POP
// end ;
65741: LD_VAR 0 2
65745: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65746: LD_INT 0
65748: PPUSH
65749: PPUSH
65750: PPUSH
65751: PPUSH
65752: PPUSH
65753: PPUSH
// if not unit or not enemy_unit then
65754: LD_VAR 0 1
65758: NOT
65759: PUSH
65760: LD_VAR 0 2
65764: NOT
65765: OR
65766: IFFALSE 65770
// exit ;
65768: GO 66237
// if GetLives ( i ) < 250 then
65770: LD_VAR 0 4
65774: PPUSH
65775: CALL_OW 256
65779: PUSH
65780: LD_INT 250
65782: LESS
65783: IFFALSE 65796
// begin ComAutodestruct ( i ) ;
65785: LD_VAR 0 4
65789: PPUSH
65790: CALL 65644 0 1
// exit ;
65794: GO 66237
// end ; x := GetX ( enemy_unit ) ;
65796: LD_ADDR_VAR 0 7
65800: PUSH
65801: LD_VAR 0 2
65805: PPUSH
65806: CALL_OW 250
65810: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65811: LD_ADDR_VAR 0 8
65815: PUSH
65816: LD_VAR 0 2
65820: PPUSH
65821: CALL_OW 251
65825: ST_TO_ADDR
// if not x or not y then
65826: LD_VAR 0 7
65830: NOT
65831: PUSH
65832: LD_VAR 0 8
65836: NOT
65837: OR
65838: IFFALSE 65842
// exit ;
65840: GO 66237
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65842: LD_ADDR_VAR 0 6
65846: PUSH
65847: LD_VAR 0 7
65851: PPUSH
65852: LD_INT 0
65854: PPUSH
65855: LD_INT 4
65857: PPUSH
65858: CALL_OW 272
65862: PUSH
65863: LD_VAR 0 8
65867: PPUSH
65868: LD_INT 0
65870: PPUSH
65871: LD_INT 4
65873: PPUSH
65874: CALL_OW 273
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_VAR 0 7
65887: PPUSH
65888: LD_INT 1
65890: PPUSH
65891: LD_INT 4
65893: PPUSH
65894: CALL_OW 272
65898: PUSH
65899: LD_VAR 0 8
65903: PPUSH
65904: LD_INT 1
65906: PPUSH
65907: LD_INT 4
65909: PPUSH
65910: CALL_OW 273
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_VAR 0 7
65923: PPUSH
65924: LD_INT 2
65926: PPUSH
65927: LD_INT 4
65929: PPUSH
65930: CALL_OW 272
65934: PUSH
65935: LD_VAR 0 8
65939: PPUSH
65940: LD_INT 2
65942: PPUSH
65943: LD_INT 4
65945: PPUSH
65946: CALL_OW 273
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_VAR 0 7
65959: PPUSH
65960: LD_INT 3
65962: PPUSH
65963: LD_INT 4
65965: PPUSH
65966: CALL_OW 272
65970: PUSH
65971: LD_VAR 0 8
65975: PPUSH
65976: LD_INT 3
65978: PPUSH
65979: LD_INT 4
65981: PPUSH
65982: CALL_OW 273
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_VAR 0 7
65995: PPUSH
65996: LD_INT 4
65998: PPUSH
65999: LD_INT 4
66001: PPUSH
66002: CALL_OW 272
66006: PUSH
66007: LD_VAR 0 8
66011: PPUSH
66012: LD_INT 4
66014: PPUSH
66015: LD_INT 4
66017: PPUSH
66018: CALL_OW 273
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_VAR 0 7
66031: PPUSH
66032: LD_INT 5
66034: PPUSH
66035: LD_INT 4
66037: PPUSH
66038: CALL_OW 272
66042: PUSH
66043: LD_VAR 0 8
66047: PPUSH
66048: LD_INT 5
66050: PPUSH
66051: LD_INT 4
66053: PPUSH
66054: CALL_OW 273
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: ST_TO_ADDR
// for i = tmp downto 1 do
66071: LD_ADDR_VAR 0 4
66075: PUSH
66076: DOUBLE
66077: LD_VAR 0 6
66081: INC
66082: ST_TO_ADDR
66083: LD_INT 1
66085: PUSH
66086: FOR_DOWNTO
66087: IFFALSE 66188
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66089: LD_VAR 0 6
66093: PUSH
66094: LD_VAR 0 4
66098: ARRAY
66099: PUSH
66100: LD_INT 1
66102: ARRAY
66103: PPUSH
66104: LD_VAR 0 6
66108: PUSH
66109: LD_VAR 0 4
66113: ARRAY
66114: PUSH
66115: LD_INT 2
66117: ARRAY
66118: PPUSH
66119: CALL_OW 488
66123: NOT
66124: PUSH
66125: LD_VAR 0 6
66129: PUSH
66130: LD_VAR 0 4
66134: ARRAY
66135: PUSH
66136: LD_INT 1
66138: ARRAY
66139: PPUSH
66140: LD_VAR 0 6
66144: PUSH
66145: LD_VAR 0 4
66149: ARRAY
66150: PUSH
66151: LD_INT 2
66153: ARRAY
66154: PPUSH
66155: CALL_OW 428
66159: PUSH
66160: LD_INT 0
66162: NONEQUAL
66163: OR
66164: IFFALSE 66186
// tmp := Delete ( tmp , i ) ;
66166: LD_ADDR_VAR 0 6
66170: PUSH
66171: LD_VAR 0 6
66175: PPUSH
66176: LD_VAR 0 4
66180: PPUSH
66181: CALL_OW 3
66185: ST_TO_ADDR
66186: GO 66086
66188: POP
66189: POP
// j := GetClosestHex ( unit , tmp ) ;
66190: LD_ADDR_VAR 0 5
66194: PUSH
66195: LD_VAR 0 1
66199: PPUSH
66200: LD_VAR 0 6
66204: PPUSH
66205: CALL 65492 0 2
66209: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66210: LD_VAR 0 1
66214: PPUSH
66215: LD_VAR 0 5
66219: PUSH
66220: LD_INT 1
66222: ARRAY
66223: PPUSH
66224: LD_VAR 0 5
66228: PUSH
66229: LD_INT 2
66231: ARRAY
66232: PPUSH
66233: CALL_OW 111
// end ;
66237: LD_VAR 0 3
66241: RET
// export function PrepareApemanSoldier ( ) ; begin
66242: LD_INT 0
66244: PPUSH
// uc_nation := 0 ;
66245: LD_ADDR_OWVAR 21
66249: PUSH
66250: LD_INT 0
66252: ST_TO_ADDR
// hc_sex := sex_male ;
66253: LD_ADDR_OWVAR 27
66257: PUSH
66258: LD_INT 1
66260: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
66261: LD_ADDR_OWVAR 28
66265: PUSH
66266: LD_INT 15
66268: ST_TO_ADDR
// hc_gallery :=  ;
66269: LD_ADDR_OWVAR 33
66273: PUSH
66274: LD_STRING 
66276: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66277: LD_ADDR_OWVAR 31
66281: PUSH
66282: LD_INT 0
66284: PPUSH
66285: LD_INT 3
66287: PPUSH
66288: CALL_OW 12
66292: PUSH
66293: LD_INT 0
66295: PPUSH
66296: LD_INT 3
66298: PPUSH
66299: CALL_OW 12
66303: PUSH
66304: LD_INT 0
66306: PUSH
66307: LD_INT 0
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: ST_TO_ADDR
// end ;
66316: LD_VAR 0 1
66320: RET
// export function PrepareApemanEngineer ( ) ; begin
66321: LD_INT 0
66323: PPUSH
// uc_nation := 0 ;
66324: LD_ADDR_OWVAR 21
66328: PUSH
66329: LD_INT 0
66331: ST_TO_ADDR
// hc_sex := sex_male ;
66332: LD_ADDR_OWVAR 27
66336: PUSH
66337: LD_INT 1
66339: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66340: LD_ADDR_OWVAR 28
66344: PUSH
66345: LD_INT 16
66347: ST_TO_ADDR
// hc_gallery :=  ;
66348: LD_ADDR_OWVAR 33
66352: PUSH
66353: LD_STRING 
66355: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66356: LD_ADDR_OWVAR 31
66360: PUSH
66361: LD_INT 0
66363: PPUSH
66364: LD_INT 3
66366: PPUSH
66367: CALL_OW 12
66371: PUSH
66372: LD_INT 0
66374: PPUSH
66375: LD_INT 3
66377: PPUSH
66378: CALL_OW 12
66382: PUSH
66383: LD_INT 0
66385: PUSH
66386: LD_INT 0
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: ST_TO_ADDR
// end ;
66395: LD_VAR 0 1
66399: RET
// export function PrepareApeman ( agressivity ) ; begin
66400: LD_INT 0
66402: PPUSH
// uc_side := 0 ;
66403: LD_ADDR_OWVAR 20
66407: PUSH
66408: LD_INT 0
66410: ST_TO_ADDR
// uc_nation := 0 ;
66411: LD_ADDR_OWVAR 21
66415: PUSH
66416: LD_INT 0
66418: ST_TO_ADDR
// hc_sex := sex_male ;
66419: LD_ADDR_OWVAR 27
66423: PUSH
66424: LD_INT 1
66426: ST_TO_ADDR
// hc_class := class_apeman ;
66427: LD_ADDR_OWVAR 28
66431: PUSH
66432: LD_INT 12
66434: ST_TO_ADDR
// hc_gallery :=  ;
66435: LD_ADDR_OWVAR 33
66439: PUSH
66440: LD_STRING 
66442: ST_TO_ADDR
// if agressivity = 0 then
66443: LD_VAR 0 1
66447: PUSH
66448: LD_INT 0
66450: EQUAL
66451: IFFALSE 66463
// hc_agressivity := 0 else
66453: LD_ADDR_OWVAR 35
66457: PUSH
66458: LD_INT 0
66460: ST_TO_ADDR
66461: GO 66484
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66463: LD_ADDR_OWVAR 35
66467: PUSH
66468: LD_VAR 0 1
66472: NEG
66473: PPUSH
66474: LD_VAR 0 1
66478: PPUSH
66479: CALL_OW 12
66483: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66484: LD_ADDR_OWVAR 31
66488: PUSH
66489: LD_INT 0
66491: PPUSH
66492: LD_INT 3
66494: PPUSH
66495: CALL_OW 12
66499: PUSH
66500: LD_INT 0
66502: PPUSH
66503: LD_INT 3
66505: PPUSH
66506: CALL_OW 12
66510: PUSH
66511: LD_INT 0
66513: PUSH
66514: LD_INT 0
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: ST_TO_ADDR
// end ;
66523: LD_VAR 0 2
66527: RET
// export function PrepareTiger ( agressivity ) ; begin
66528: LD_INT 0
66530: PPUSH
// uc_side := 0 ;
66531: LD_ADDR_OWVAR 20
66535: PUSH
66536: LD_INT 0
66538: ST_TO_ADDR
// uc_nation := 0 ;
66539: LD_ADDR_OWVAR 21
66543: PUSH
66544: LD_INT 0
66546: ST_TO_ADDR
// hc_class := class_tiger ;
66547: LD_ADDR_OWVAR 28
66551: PUSH
66552: LD_INT 14
66554: ST_TO_ADDR
// hc_gallery :=  ;
66555: LD_ADDR_OWVAR 33
66559: PUSH
66560: LD_STRING 
66562: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66563: LD_ADDR_OWVAR 35
66567: PUSH
66568: LD_VAR 0 1
66572: NEG
66573: PPUSH
66574: LD_VAR 0 1
66578: PPUSH
66579: CALL_OW 12
66583: ST_TO_ADDR
// end ;
66584: LD_VAR 0 2
66588: RET
// export function PrepareEnchidna ( ) ; begin
66589: LD_INT 0
66591: PPUSH
// uc_side := 0 ;
66592: LD_ADDR_OWVAR 20
66596: PUSH
66597: LD_INT 0
66599: ST_TO_ADDR
// uc_nation := 0 ;
66600: LD_ADDR_OWVAR 21
66604: PUSH
66605: LD_INT 0
66607: ST_TO_ADDR
// hc_class := class_baggie ;
66608: LD_ADDR_OWVAR 28
66612: PUSH
66613: LD_INT 13
66615: ST_TO_ADDR
// hc_gallery :=  ;
66616: LD_ADDR_OWVAR 33
66620: PUSH
66621: LD_STRING 
66623: ST_TO_ADDR
// end ;
66624: LD_VAR 0 1
66628: RET
// export function PrepareFrog ( ) ; begin
66629: LD_INT 0
66631: PPUSH
// uc_side := 0 ;
66632: LD_ADDR_OWVAR 20
66636: PUSH
66637: LD_INT 0
66639: ST_TO_ADDR
// uc_nation := 0 ;
66640: LD_ADDR_OWVAR 21
66644: PUSH
66645: LD_INT 0
66647: ST_TO_ADDR
// hc_class := class_frog ;
66648: LD_ADDR_OWVAR 28
66652: PUSH
66653: LD_INT 19
66655: ST_TO_ADDR
// hc_gallery :=  ;
66656: LD_ADDR_OWVAR 33
66660: PUSH
66661: LD_STRING 
66663: ST_TO_ADDR
// end ;
66664: LD_VAR 0 1
66668: RET
// export function PrepareFish ( ) ; begin
66669: LD_INT 0
66671: PPUSH
// uc_side := 0 ;
66672: LD_ADDR_OWVAR 20
66676: PUSH
66677: LD_INT 0
66679: ST_TO_ADDR
// uc_nation := 0 ;
66680: LD_ADDR_OWVAR 21
66684: PUSH
66685: LD_INT 0
66687: ST_TO_ADDR
// hc_class := class_fish ;
66688: LD_ADDR_OWVAR 28
66692: PUSH
66693: LD_INT 20
66695: ST_TO_ADDR
// hc_gallery :=  ;
66696: LD_ADDR_OWVAR 33
66700: PUSH
66701: LD_STRING 
66703: ST_TO_ADDR
// end ;
66704: LD_VAR 0 1
66708: RET
// export function PrepareBird ( ) ; begin
66709: LD_INT 0
66711: PPUSH
// uc_side := 0 ;
66712: LD_ADDR_OWVAR 20
66716: PUSH
66717: LD_INT 0
66719: ST_TO_ADDR
// uc_nation := 0 ;
66720: LD_ADDR_OWVAR 21
66724: PUSH
66725: LD_INT 0
66727: ST_TO_ADDR
// hc_class := class_phororhacos ;
66728: LD_ADDR_OWVAR 28
66732: PUSH
66733: LD_INT 18
66735: ST_TO_ADDR
// hc_gallery :=  ;
66736: LD_ADDR_OWVAR 33
66740: PUSH
66741: LD_STRING 
66743: ST_TO_ADDR
// end ;
66744: LD_VAR 0 1
66748: RET
// export function PrepareHorse ( ) ; begin
66749: LD_INT 0
66751: PPUSH
// uc_side := 0 ;
66752: LD_ADDR_OWVAR 20
66756: PUSH
66757: LD_INT 0
66759: ST_TO_ADDR
// uc_nation := 0 ;
66760: LD_ADDR_OWVAR 21
66764: PUSH
66765: LD_INT 0
66767: ST_TO_ADDR
// hc_class := class_horse ;
66768: LD_ADDR_OWVAR 28
66772: PUSH
66773: LD_INT 21
66775: ST_TO_ADDR
// hc_gallery :=  ;
66776: LD_ADDR_OWVAR 33
66780: PUSH
66781: LD_STRING 
66783: ST_TO_ADDR
// end ;
66784: LD_VAR 0 1
66788: RET
// export function PrepareMastodont ( ) ; begin
66789: LD_INT 0
66791: PPUSH
// uc_side := 0 ;
66792: LD_ADDR_OWVAR 20
66796: PUSH
66797: LD_INT 0
66799: ST_TO_ADDR
// uc_nation := 0 ;
66800: LD_ADDR_OWVAR 21
66804: PUSH
66805: LD_INT 0
66807: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66808: LD_ADDR_OWVAR 37
66812: PUSH
66813: LD_INT 31
66815: ST_TO_ADDR
// vc_control := control_rider ;
66816: LD_ADDR_OWVAR 38
66820: PUSH
66821: LD_INT 4
66823: ST_TO_ADDR
// end ;
66824: LD_VAR 0 1
66828: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66829: LD_INT 0
66831: PPUSH
66832: PPUSH
66833: PPUSH
// uc_side = 0 ;
66834: LD_ADDR_OWVAR 20
66838: PUSH
66839: LD_INT 0
66841: ST_TO_ADDR
// uc_nation = 0 ;
66842: LD_ADDR_OWVAR 21
66846: PUSH
66847: LD_INT 0
66849: ST_TO_ADDR
// InitHc_All ( ) ;
66850: CALL_OW 584
// InitVc ;
66854: CALL_OW 20
// if mastodonts then
66858: LD_VAR 0 6
66862: IFFALSE 66929
// for i = 1 to mastodonts do
66864: LD_ADDR_VAR 0 11
66868: PUSH
66869: DOUBLE
66870: LD_INT 1
66872: DEC
66873: ST_TO_ADDR
66874: LD_VAR 0 6
66878: PUSH
66879: FOR_TO
66880: IFFALSE 66927
// begin vc_chassis := 31 ;
66882: LD_ADDR_OWVAR 37
66886: PUSH
66887: LD_INT 31
66889: ST_TO_ADDR
// vc_control := control_rider ;
66890: LD_ADDR_OWVAR 38
66894: PUSH
66895: LD_INT 4
66897: ST_TO_ADDR
// animal := CreateVehicle ;
66898: LD_ADDR_VAR 0 12
66902: PUSH
66903: CALL_OW 45
66907: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66908: LD_VAR 0 12
66912: PPUSH
66913: LD_VAR 0 8
66917: PPUSH
66918: LD_INT 0
66920: PPUSH
66921: CALL 69057 0 3
// end ;
66925: GO 66879
66927: POP
66928: POP
// if horses then
66929: LD_VAR 0 5
66933: IFFALSE 67000
// for i = 1 to horses do
66935: LD_ADDR_VAR 0 11
66939: PUSH
66940: DOUBLE
66941: LD_INT 1
66943: DEC
66944: ST_TO_ADDR
66945: LD_VAR 0 5
66949: PUSH
66950: FOR_TO
66951: IFFALSE 66998
// begin hc_class := 21 ;
66953: LD_ADDR_OWVAR 28
66957: PUSH
66958: LD_INT 21
66960: ST_TO_ADDR
// hc_gallery :=  ;
66961: LD_ADDR_OWVAR 33
66965: PUSH
66966: LD_STRING 
66968: ST_TO_ADDR
// animal := CreateHuman ;
66969: LD_ADDR_VAR 0 12
66973: PUSH
66974: CALL_OW 44
66978: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66979: LD_VAR 0 12
66983: PPUSH
66984: LD_VAR 0 8
66988: PPUSH
66989: LD_INT 0
66991: PPUSH
66992: CALL 69057 0 3
// end ;
66996: GO 66950
66998: POP
66999: POP
// if birds then
67000: LD_VAR 0 1
67004: IFFALSE 67071
// for i = 1 to birds do
67006: LD_ADDR_VAR 0 11
67010: PUSH
67011: DOUBLE
67012: LD_INT 1
67014: DEC
67015: ST_TO_ADDR
67016: LD_VAR 0 1
67020: PUSH
67021: FOR_TO
67022: IFFALSE 67069
// begin hc_class := 18 ;
67024: LD_ADDR_OWVAR 28
67028: PUSH
67029: LD_INT 18
67031: ST_TO_ADDR
// hc_gallery =  ;
67032: LD_ADDR_OWVAR 33
67036: PUSH
67037: LD_STRING 
67039: ST_TO_ADDR
// animal := CreateHuman ;
67040: LD_ADDR_VAR 0 12
67044: PUSH
67045: CALL_OW 44
67049: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67050: LD_VAR 0 12
67054: PPUSH
67055: LD_VAR 0 8
67059: PPUSH
67060: LD_INT 0
67062: PPUSH
67063: CALL 69057 0 3
// end ;
67067: GO 67021
67069: POP
67070: POP
// if tigers then
67071: LD_VAR 0 2
67075: IFFALSE 67159
// for i = 1 to tigers do
67077: LD_ADDR_VAR 0 11
67081: PUSH
67082: DOUBLE
67083: LD_INT 1
67085: DEC
67086: ST_TO_ADDR
67087: LD_VAR 0 2
67091: PUSH
67092: FOR_TO
67093: IFFALSE 67157
// begin hc_class = class_tiger ;
67095: LD_ADDR_OWVAR 28
67099: PUSH
67100: LD_INT 14
67102: ST_TO_ADDR
// hc_gallery =  ;
67103: LD_ADDR_OWVAR 33
67107: PUSH
67108: LD_STRING 
67110: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67111: LD_ADDR_OWVAR 35
67115: PUSH
67116: LD_INT 7
67118: NEG
67119: PPUSH
67120: LD_INT 7
67122: PPUSH
67123: CALL_OW 12
67127: ST_TO_ADDR
// animal := CreateHuman ;
67128: LD_ADDR_VAR 0 12
67132: PUSH
67133: CALL_OW 44
67137: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67138: LD_VAR 0 12
67142: PPUSH
67143: LD_VAR 0 8
67147: PPUSH
67148: LD_INT 0
67150: PPUSH
67151: CALL 69057 0 3
// end ;
67155: GO 67092
67157: POP
67158: POP
// if apemans then
67159: LD_VAR 0 3
67163: IFFALSE 67286
// for i = 1 to apemans do
67165: LD_ADDR_VAR 0 11
67169: PUSH
67170: DOUBLE
67171: LD_INT 1
67173: DEC
67174: ST_TO_ADDR
67175: LD_VAR 0 3
67179: PUSH
67180: FOR_TO
67181: IFFALSE 67284
// begin hc_class = class_apeman ;
67183: LD_ADDR_OWVAR 28
67187: PUSH
67188: LD_INT 12
67190: ST_TO_ADDR
// hc_gallery =  ;
67191: LD_ADDR_OWVAR 33
67195: PUSH
67196: LD_STRING 
67198: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67199: LD_ADDR_OWVAR 35
67203: PUSH
67204: LD_INT 2
67206: NEG
67207: PPUSH
67208: LD_INT 2
67210: PPUSH
67211: CALL_OW 12
67215: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67216: LD_ADDR_OWVAR 31
67220: PUSH
67221: LD_INT 1
67223: PPUSH
67224: LD_INT 3
67226: PPUSH
67227: CALL_OW 12
67231: PUSH
67232: LD_INT 1
67234: PPUSH
67235: LD_INT 3
67237: PPUSH
67238: CALL_OW 12
67242: PUSH
67243: LD_INT 0
67245: PUSH
67246: LD_INT 0
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: ST_TO_ADDR
// animal := CreateHuman ;
67255: LD_ADDR_VAR 0 12
67259: PUSH
67260: CALL_OW 44
67264: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67265: LD_VAR 0 12
67269: PPUSH
67270: LD_VAR 0 8
67274: PPUSH
67275: LD_INT 0
67277: PPUSH
67278: CALL 69057 0 3
// end ;
67282: GO 67180
67284: POP
67285: POP
// if enchidnas then
67286: LD_VAR 0 4
67290: IFFALSE 67357
// for i = 1 to enchidnas do
67292: LD_ADDR_VAR 0 11
67296: PUSH
67297: DOUBLE
67298: LD_INT 1
67300: DEC
67301: ST_TO_ADDR
67302: LD_VAR 0 4
67306: PUSH
67307: FOR_TO
67308: IFFALSE 67355
// begin hc_class = 13 ;
67310: LD_ADDR_OWVAR 28
67314: PUSH
67315: LD_INT 13
67317: ST_TO_ADDR
// hc_gallery =  ;
67318: LD_ADDR_OWVAR 33
67322: PUSH
67323: LD_STRING 
67325: ST_TO_ADDR
// animal := CreateHuman ;
67326: LD_ADDR_VAR 0 12
67330: PUSH
67331: CALL_OW 44
67335: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67336: LD_VAR 0 12
67340: PPUSH
67341: LD_VAR 0 8
67345: PPUSH
67346: LD_INT 0
67348: PPUSH
67349: CALL 69057 0 3
// end ;
67353: GO 67307
67355: POP
67356: POP
// if fishes then
67357: LD_VAR 0 7
67361: IFFALSE 67428
// for i = 1 to fishes do
67363: LD_ADDR_VAR 0 11
67367: PUSH
67368: DOUBLE
67369: LD_INT 1
67371: DEC
67372: ST_TO_ADDR
67373: LD_VAR 0 7
67377: PUSH
67378: FOR_TO
67379: IFFALSE 67426
// begin hc_class = 20 ;
67381: LD_ADDR_OWVAR 28
67385: PUSH
67386: LD_INT 20
67388: ST_TO_ADDR
// hc_gallery =  ;
67389: LD_ADDR_OWVAR 33
67393: PUSH
67394: LD_STRING 
67396: ST_TO_ADDR
// animal := CreateHuman ;
67397: LD_ADDR_VAR 0 12
67401: PUSH
67402: CALL_OW 44
67406: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67407: LD_VAR 0 12
67411: PPUSH
67412: LD_VAR 0 9
67416: PPUSH
67417: LD_INT 0
67419: PPUSH
67420: CALL 69057 0 3
// end ;
67424: GO 67378
67426: POP
67427: POP
// end ;
67428: LD_VAR 0 10
67432: RET
// export function WantHeal ( sci , unit ) ; begin
67433: LD_INT 0
67435: PPUSH
// if GetTaskList ( sci ) > 0 then
67436: LD_VAR 0 1
67440: PPUSH
67441: CALL_OW 437
67445: PUSH
67446: LD_INT 0
67448: GREATER
67449: IFFALSE 67519
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67451: LD_VAR 0 1
67455: PPUSH
67456: CALL_OW 437
67460: PUSH
67461: LD_INT 1
67463: ARRAY
67464: PUSH
67465: LD_INT 1
67467: ARRAY
67468: PUSH
67469: LD_STRING l
67471: EQUAL
67472: PUSH
67473: LD_VAR 0 1
67477: PPUSH
67478: CALL_OW 437
67482: PUSH
67483: LD_INT 1
67485: ARRAY
67486: PUSH
67487: LD_INT 4
67489: ARRAY
67490: PUSH
67491: LD_VAR 0 2
67495: EQUAL
67496: AND
67497: IFFALSE 67509
// result := true else
67499: LD_ADDR_VAR 0 3
67503: PUSH
67504: LD_INT 1
67506: ST_TO_ADDR
67507: GO 67517
// result := false ;
67509: LD_ADDR_VAR 0 3
67513: PUSH
67514: LD_INT 0
67516: ST_TO_ADDR
// end else
67517: GO 67527
// result := false ;
67519: LD_ADDR_VAR 0 3
67523: PUSH
67524: LD_INT 0
67526: ST_TO_ADDR
// end ;
67527: LD_VAR 0 3
67531: RET
// export function HealTarget ( sci ) ; begin
67532: LD_INT 0
67534: PPUSH
// if not sci then
67535: LD_VAR 0 1
67539: NOT
67540: IFFALSE 67544
// exit ;
67542: GO 67609
// result := 0 ;
67544: LD_ADDR_VAR 0 2
67548: PUSH
67549: LD_INT 0
67551: ST_TO_ADDR
// if GetTaskList ( sci ) then
67552: LD_VAR 0 1
67556: PPUSH
67557: CALL_OW 437
67561: IFFALSE 67609
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67563: LD_VAR 0 1
67567: PPUSH
67568: CALL_OW 437
67572: PUSH
67573: LD_INT 1
67575: ARRAY
67576: PUSH
67577: LD_INT 1
67579: ARRAY
67580: PUSH
67581: LD_STRING l
67583: EQUAL
67584: IFFALSE 67609
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67586: LD_ADDR_VAR 0 2
67590: PUSH
67591: LD_VAR 0 1
67595: PPUSH
67596: CALL_OW 437
67600: PUSH
67601: LD_INT 1
67603: ARRAY
67604: PUSH
67605: LD_INT 4
67607: ARRAY
67608: ST_TO_ADDR
// end ;
67609: LD_VAR 0 2
67613: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67614: LD_INT 0
67616: PPUSH
67617: PPUSH
67618: PPUSH
67619: PPUSH
// if not base_units then
67620: LD_VAR 0 1
67624: NOT
67625: IFFALSE 67629
// exit ;
67627: GO 67716
// result := false ;
67629: LD_ADDR_VAR 0 2
67633: PUSH
67634: LD_INT 0
67636: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67637: LD_ADDR_VAR 0 5
67641: PUSH
67642: LD_VAR 0 1
67646: PPUSH
67647: LD_INT 21
67649: PUSH
67650: LD_INT 3
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PPUSH
67657: CALL_OW 72
67661: ST_TO_ADDR
// if not tmp then
67662: LD_VAR 0 5
67666: NOT
67667: IFFALSE 67671
// exit ;
67669: GO 67716
// for i in tmp do
67671: LD_ADDR_VAR 0 3
67675: PUSH
67676: LD_VAR 0 5
67680: PUSH
67681: FOR_IN
67682: IFFALSE 67714
// begin result := EnemyInRange ( i , 22 ) ;
67684: LD_ADDR_VAR 0 2
67688: PUSH
67689: LD_VAR 0 3
67693: PPUSH
67694: LD_INT 22
67696: PPUSH
67697: CALL 65294 0 2
67701: ST_TO_ADDR
// if result then
67702: LD_VAR 0 2
67706: IFFALSE 67712
// exit ;
67708: POP
67709: POP
67710: GO 67716
// end ;
67712: GO 67681
67714: POP
67715: POP
// end ;
67716: LD_VAR 0 2
67720: RET
// export function FilterByTag ( units , tag ) ; begin
67721: LD_INT 0
67723: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67724: LD_ADDR_VAR 0 3
67728: PUSH
67729: LD_VAR 0 1
67733: PPUSH
67734: LD_INT 120
67736: PUSH
67737: LD_VAR 0 2
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PPUSH
67746: CALL_OW 72
67750: ST_TO_ADDR
// end ;
67751: LD_VAR 0 3
67755: RET
// export function IsDriver ( un ) ; begin
67756: LD_INT 0
67758: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67759: LD_ADDR_VAR 0 2
67763: PUSH
67764: LD_VAR 0 1
67768: PUSH
67769: LD_INT 55
67771: PUSH
67772: EMPTY
67773: LIST
67774: PPUSH
67775: CALL_OW 69
67779: IN
67780: ST_TO_ADDR
// end ;
67781: LD_VAR 0 2
67785: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67786: LD_INT 0
67788: PPUSH
67789: PPUSH
// list := [ ] ;
67790: LD_ADDR_VAR 0 5
67794: PUSH
67795: EMPTY
67796: ST_TO_ADDR
// case d of 0 :
67797: LD_VAR 0 3
67801: PUSH
67802: LD_INT 0
67804: DOUBLE
67805: EQUAL
67806: IFTRUE 67810
67808: GO 67943
67810: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67811: LD_ADDR_VAR 0 5
67815: PUSH
67816: LD_VAR 0 1
67820: PUSH
67821: LD_INT 4
67823: MINUS
67824: PUSH
67825: LD_VAR 0 2
67829: PUSH
67830: LD_INT 4
67832: MINUS
67833: PUSH
67834: LD_INT 2
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: LIST
67841: PUSH
67842: LD_VAR 0 1
67846: PUSH
67847: LD_INT 3
67849: MINUS
67850: PUSH
67851: LD_VAR 0 2
67855: PUSH
67856: LD_INT 1
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: LIST
67863: PUSH
67864: LD_VAR 0 1
67868: PUSH
67869: LD_INT 4
67871: PLUS
67872: PUSH
67873: LD_VAR 0 2
67877: PUSH
67878: LD_INT 4
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: LIST
67885: PUSH
67886: LD_VAR 0 1
67890: PUSH
67891: LD_INT 3
67893: PLUS
67894: PUSH
67895: LD_VAR 0 2
67899: PUSH
67900: LD_INT 3
67902: PLUS
67903: PUSH
67904: LD_INT 5
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: LIST
67911: PUSH
67912: LD_VAR 0 1
67916: PUSH
67917: LD_VAR 0 2
67921: PUSH
67922: LD_INT 4
67924: PLUS
67925: PUSH
67926: LD_INT 0
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: LIST
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: ST_TO_ADDR
// end ; 1 :
67941: GO 68641
67943: LD_INT 1
67945: DOUBLE
67946: EQUAL
67947: IFTRUE 67951
67949: GO 68084
67951: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67952: LD_ADDR_VAR 0 5
67956: PUSH
67957: LD_VAR 0 1
67961: PUSH
67962: LD_VAR 0 2
67966: PUSH
67967: LD_INT 4
67969: MINUS
67970: PUSH
67971: LD_INT 3
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: LIST
67978: PUSH
67979: LD_VAR 0 1
67983: PUSH
67984: LD_INT 3
67986: MINUS
67987: PUSH
67988: LD_VAR 0 2
67992: PUSH
67993: LD_INT 3
67995: MINUS
67996: PUSH
67997: LD_INT 2
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: LIST
68004: PUSH
68005: LD_VAR 0 1
68009: PUSH
68010: LD_INT 4
68012: MINUS
68013: PUSH
68014: LD_VAR 0 2
68018: PUSH
68019: LD_INT 1
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: LIST
68026: PUSH
68027: LD_VAR 0 1
68031: PUSH
68032: LD_VAR 0 2
68036: PUSH
68037: LD_INT 3
68039: PLUS
68040: PUSH
68041: LD_INT 0
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: LIST
68048: PUSH
68049: LD_VAR 0 1
68053: PUSH
68054: LD_INT 4
68056: PLUS
68057: PUSH
68058: LD_VAR 0 2
68062: PUSH
68063: LD_INT 4
68065: PLUS
68066: PUSH
68067: LD_INT 5
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: LIST
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: ST_TO_ADDR
// end ; 2 :
68082: GO 68641
68084: LD_INT 2
68086: DOUBLE
68087: EQUAL
68088: IFTRUE 68092
68090: GO 68221
68092: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68093: LD_ADDR_VAR 0 5
68097: PUSH
68098: LD_VAR 0 1
68102: PUSH
68103: LD_VAR 0 2
68107: PUSH
68108: LD_INT 3
68110: MINUS
68111: PUSH
68112: LD_INT 3
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: LIST
68119: PUSH
68120: LD_VAR 0 1
68124: PUSH
68125: LD_INT 4
68127: PLUS
68128: PUSH
68129: LD_VAR 0 2
68133: PUSH
68134: LD_INT 4
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: LIST
68141: PUSH
68142: LD_VAR 0 1
68146: PUSH
68147: LD_VAR 0 2
68151: PUSH
68152: LD_INT 4
68154: PLUS
68155: PUSH
68156: LD_INT 0
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: LIST
68163: PUSH
68164: LD_VAR 0 1
68168: PUSH
68169: LD_INT 3
68171: MINUS
68172: PUSH
68173: LD_VAR 0 2
68177: PUSH
68178: LD_INT 1
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: LIST
68185: PUSH
68186: LD_VAR 0 1
68190: PUSH
68191: LD_INT 4
68193: MINUS
68194: PUSH
68195: LD_VAR 0 2
68199: PUSH
68200: LD_INT 4
68202: MINUS
68203: PUSH
68204: LD_INT 2
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: LIST
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: ST_TO_ADDR
// end ; 3 :
68219: GO 68641
68221: LD_INT 3
68223: DOUBLE
68224: EQUAL
68225: IFTRUE 68229
68227: GO 68362
68229: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68230: LD_ADDR_VAR 0 5
68234: PUSH
68235: LD_VAR 0 1
68239: PUSH
68240: LD_INT 3
68242: PLUS
68243: PUSH
68244: LD_VAR 0 2
68248: PUSH
68249: LD_INT 4
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: LIST
68256: PUSH
68257: LD_VAR 0 1
68261: PUSH
68262: LD_INT 4
68264: PLUS
68265: PUSH
68266: LD_VAR 0 2
68270: PUSH
68271: LD_INT 4
68273: PLUS
68274: PUSH
68275: LD_INT 5
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: LIST
68282: PUSH
68283: LD_VAR 0 1
68287: PUSH
68288: LD_INT 4
68290: MINUS
68291: PUSH
68292: LD_VAR 0 2
68296: PUSH
68297: LD_INT 1
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: LIST
68304: PUSH
68305: LD_VAR 0 1
68309: PUSH
68310: LD_VAR 0 2
68314: PUSH
68315: LD_INT 4
68317: MINUS
68318: PUSH
68319: LD_INT 3
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: LIST
68326: PUSH
68327: LD_VAR 0 1
68331: PUSH
68332: LD_INT 3
68334: MINUS
68335: PUSH
68336: LD_VAR 0 2
68340: PUSH
68341: LD_INT 3
68343: MINUS
68344: PUSH
68345: LD_INT 2
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: LIST
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: ST_TO_ADDR
// end ; 4 :
68360: GO 68641
68362: LD_INT 4
68364: DOUBLE
68365: EQUAL
68366: IFTRUE 68370
68368: GO 68503
68370: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68371: LD_ADDR_VAR 0 5
68375: PUSH
68376: LD_VAR 0 1
68380: PUSH
68381: LD_VAR 0 2
68385: PUSH
68386: LD_INT 4
68388: PLUS
68389: PUSH
68390: LD_INT 0
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: LIST
68397: PUSH
68398: LD_VAR 0 1
68402: PUSH
68403: LD_INT 3
68405: PLUS
68406: PUSH
68407: LD_VAR 0 2
68411: PUSH
68412: LD_INT 3
68414: PLUS
68415: PUSH
68416: LD_INT 5
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: LIST
68423: PUSH
68424: LD_VAR 0 1
68428: PUSH
68429: LD_INT 4
68431: PLUS
68432: PUSH
68433: LD_VAR 0 2
68437: PUSH
68438: LD_INT 4
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: LIST
68445: PUSH
68446: LD_VAR 0 1
68450: PUSH
68451: LD_VAR 0 2
68455: PUSH
68456: LD_INT 3
68458: MINUS
68459: PUSH
68460: LD_INT 3
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: LIST
68467: PUSH
68468: LD_VAR 0 1
68472: PUSH
68473: LD_INT 4
68475: MINUS
68476: PUSH
68477: LD_VAR 0 2
68481: PUSH
68482: LD_INT 4
68484: MINUS
68485: PUSH
68486: LD_INT 2
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: LIST
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: ST_TO_ADDR
// end ; 5 :
68501: GO 68641
68503: LD_INT 5
68505: DOUBLE
68506: EQUAL
68507: IFTRUE 68511
68509: GO 68640
68511: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68512: LD_ADDR_VAR 0 5
68516: PUSH
68517: LD_VAR 0 1
68521: PUSH
68522: LD_INT 4
68524: MINUS
68525: PUSH
68526: LD_VAR 0 2
68530: PUSH
68531: LD_INT 1
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: LIST
68538: PUSH
68539: LD_VAR 0 1
68543: PUSH
68544: LD_VAR 0 2
68548: PUSH
68549: LD_INT 4
68551: MINUS
68552: PUSH
68553: LD_INT 3
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: LIST
68560: PUSH
68561: LD_VAR 0 1
68565: PUSH
68566: LD_INT 4
68568: PLUS
68569: PUSH
68570: LD_VAR 0 2
68574: PUSH
68575: LD_INT 4
68577: PLUS
68578: PUSH
68579: LD_INT 5
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: LIST
68586: PUSH
68587: LD_VAR 0 1
68591: PUSH
68592: LD_INT 3
68594: PLUS
68595: PUSH
68596: LD_VAR 0 2
68600: PUSH
68601: LD_INT 4
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: LIST
68608: PUSH
68609: LD_VAR 0 1
68613: PUSH
68614: LD_VAR 0 2
68618: PUSH
68619: LD_INT 3
68621: PLUS
68622: PUSH
68623: LD_INT 0
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: LIST
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: LIST
68635: LIST
68636: LIST
68637: ST_TO_ADDR
// end ; end ;
68638: GO 68641
68640: POP
// result := list ;
68641: LD_ADDR_VAR 0 4
68645: PUSH
68646: LD_VAR 0 5
68650: ST_TO_ADDR
// end ;
68651: LD_VAR 0 4
68655: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68656: LD_INT 0
68658: PPUSH
68659: PPUSH
68660: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68661: LD_VAR 0 1
68665: NOT
68666: PUSH
68667: LD_VAR 0 2
68671: PUSH
68672: LD_INT 1
68674: PUSH
68675: LD_INT 2
68677: PUSH
68678: LD_INT 3
68680: PUSH
68681: LD_INT 4
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: IN
68690: NOT
68691: OR
68692: IFFALSE 68696
// exit ;
68694: GO 68779
// tmp := [ ] ;
68696: LD_ADDR_VAR 0 5
68700: PUSH
68701: EMPTY
68702: ST_TO_ADDR
// for i in units do
68703: LD_ADDR_VAR 0 4
68707: PUSH
68708: LD_VAR 0 1
68712: PUSH
68713: FOR_IN
68714: IFFALSE 68748
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68716: LD_ADDR_VAR 0 5
68720: PUSH
68721: LD_VAR 0 5
68725: PPUSH
68726: LD_VAR 0 4
68730: PPUSH
68731: LD_VAR 0 2
68735: PPUSH
68736: CALL_OW 259
68740: PPUSH
68741: CALL 70152 0 2
68745: ST_TO_ADDR
68746: GO 68713
68748: POP
68749: POP
// if not tmp then
68750: LD_VAR 0 5
68754: NOT
68755: IFFALSE 68759
// exit ;
68757: GO 68779
// result := SortListByListDesc ( units , tmp ) ;
68759: LD_ADDR_VAR 0 3
68763: PUSH
68764: LD_VAR 0 1
68768: PPUSH
68769: LD_VAR 0 5
68773: PPUSH
68774: CALL_OW 77
68778: ST_TO_ADDR
// end ;
68779: LD_VAR 0 3
68783: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68784: LD_INT 0
68786: PPUSH
68787: PPUSH
68788: PPUSH
// result := false ;
68789: LD_ADDR_VAR 0 3
68793: PUSH
68794: LD_INT 0
68796: ST_TO_ADDR
// if not building then
68797: LD_VAR 0 2
68801: NOT
68802: IFFALSE 68806
// exit ;
68804: GO 68944
// x := GetX ( building ) ;
68806: LD_ADDR_VAR 0 4
68810: PUSH
68811: LD_VAR 0 2
68815: PPUSH
68816: CALL_OW 250
68820: ST_TO_ADDR
// y := GetY ( building ) ;
68821: LD_ADDR_VAR 0 5
68825: PUSH
68826: LD_VAR 0 2
68830: PPUSH
68831: CALL_OW 251
68835: ST_TO_ADDR
// if not x or not y then
68836: LD_VAR 0 4
68840: NOT
68841: PUSH
68842: LD_VAR 0 5
68846: NOT
68847: OR
68848: IFFALSE 68852
// exit ;
68850: GO 68944
// if GetTaskList ( unit ) then
68852: LD_VAR 0 1
68856: PPUSH
68857: CALL_OW 437
68861: IFFALSE 68944
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68863: LD_STRING e
68865: PUSH
68866: LD_VAR 0 1
68870: PPUSH
68871: CALL_OW 437
68875: PUSH
68876: LD_INT 1
68878: ARRAY
68879: PUSH
68880: LD_INT 1
68882: ARRAY
68883: EQUAL
68884: PUSH
68885: LD_VAR 0 4
68889: PUSH
68890: LD_VAR 0 1
68894: PPUSH
68895: CALL_OW 437
68899: PUSH
68900: LD_INT 1
68902: ARRAY
68903: PUSH
68904: LD_INT 2
68906: ARRAY
68907: EQUAL
68908: AND
68909: PUSH
68910: LD_VAR 0 5
68914: PUSH
68915: LD_VAR 0 1
68919: PPUSH
68920: CALL_OW 437
68924: PUSH
68925: LD_INT 1
68927: ARRAY
68928: PUSH
68929: LD_INT 3
68931: ARRAY
68932: EQUAL
68933: AND
68934: IFFALSE 68944
// result := true end ;
68936: LD_ADDR_VAR 0 3
68940: PUSH
68941: LD_INT 1
68943: ST_TO_ADDR
// end ;
68944: LD_VAR 0 3
68948: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68949: LD_INT 0
68951: PPUSH
// result := false ;
68952: LD_ADDR_VAR 0 4
68956: PUSH
68957: LD_INT 0
68959: ST_TO_ADDR
// if GetTaskList ( unit ) then
68960: LD_VAR 0 1
68964: PPUSH
68965: CALL_OW 437
68969: IFFALSE 69052
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68971: LD_STRING M
68973: PUSH
68974: LD_VAR 0 1
68978: PPUSH
68979: CALL_OW 437
68983: PUSH
68984: LD_INT 1
68986: ARRAY
68987: PUSH
68988: LD_INT 1
68990: ARRAY
68991: EQUAL
68992: PUSH
68993: LD_VAR 0 2
68997: PUSH
68998: LD_VAR 0 1
69002: PPUSH
69003: CALL_OW 437
69007: PUSH
69008: LD_INT 1
69010: ARRAY
69011: PUSH
69012: LD_INT 2
69014: ARRAY
69015: EQUAL
69016: AND
69017: PUSH
69018: LD_VAR 0 3
69022: PUSH
69023: LD_VAR 0 1
69027: PPUSH
69028: CALL_OW 437
69032: PUSH
69033: LD_INT 1
69035: ARRAY
69036: PUSH
69037: LD_INT 3
69039: ARRAY
69040: EQUAL
69041: AND
69042: IFFALSE 69052
// result := true ;
69044: LD_ADDR_VAR 0 4
69048: PUSH
69049: LD_INT 1
69051: ST_TO_ADDR
// end ; end ;
69052: LD_VAR 0 4
69056: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69057: LD_INT 0
69059: PPUSH
69060: PPUSH
69061: PPUSH
69062: PPUSH
// if not unit or not area then
69063: LD_VAR 0 1
69067: NOT
69068: PUSH
69069: LD_VAR 0 2
69073: NOT
69074: OR
69075: IFFALSE 69079
// exit ;
69077: GO 69255
// tmp := AreaToList ( area , i ) ;
69079: LD_ADDR_VAR 0 6
69083: PUSH
69084: LD_VAR 0 2
69088: PPUSH
69089: LD_VAR 0 5
69093: PPUSH
69094: CALL_OW 517
69098: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69099: LD_ADDR_VAR 0 5
69103: PUSH
69104: DOUBLE
69105: LD_INT 1
69107: DEC
69108: ST_TO_ADDR
69109: LD_VAR 0 6
69113: PUSH
69114: LD_INT 1
69116: ARRAY
69117: PUSH
69118: FOR_TO
69119: IFFALSE 69253
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69121: LD_ADDR_VAR 0 7
69125: PUSH
69126: LD_VAR 0 6
69130: PUSH
69131: LD_INT 1
69133: ARRAY
69134: PUSH
69135: LD_VAR 0 5
69139: ARRAY
69140: PUSH
69141: LD_VAR 0 6
69145: PUSH
69146: LD_INT 2
69148: ARRAY
69149: PUSH
69150: LD_VAR 0 5
69154: ARRAY
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
69160: LD_INT 92
69162: PUSH
69163: LD_VAR 0 7
69167: PUSH
69168: LD_INT 1
69170: ARRAY
69171: PUSH
69172: LD_VAR 0 7
69176: PUSH
69177: LD_INT 2
69179: ARRAY
69180: PUSH
69181: LD_INT 2
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: PPUSH
69190: CALL_OW 69
69194: PUSH
69195: LD_INT 0
69197: EQUAL
69198: IFFALSE 69251
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69200: LD_VAR 0 1
69204: PPUSH
69205: LD_VAR 0 7
69209: PUSH
69210: LD_INT 1
69212: ARRAY
69213: PPUSH
69214: LD_VAR 0 7
69218: PUSH
69219: LD_INT 2
69221: ARRAY
69222: PPUSH
69223: LD_VAR 0 3
69227: PPUSH
69228: CALL_OW 48
// result := IsPlaced ( unit ) ;
69232: LD_ADDR_VAR 0 4
69236: PUSH
69237: LD_VAR 0 1
69241: PPUSH
69242: CALL_OW 305
69246: ST_TO_ADDR
// exit ;
69247: POP
69248: POP
69249: GO 69255
// end ; end ;
69251: GO 69118
69253: POP
69254: POP
// end ;
69255: LD_VAR 0 4
69259: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69260: LD_INT 0
69262: PPUSH
69263: PPUSH
69264: PPUSH
// if not side or side > 8 then
69265: LD_VAR 0 1
69269: NOT
69270: PUSH
69271: LD_VAR 0 1
69275: PUSH
69276: LD_INT 8
69278: GREATER
69279: OR
69280: IFFALSE 69284
// exit ;
69282: GO 69471
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69284: LD_ADDR_VAR 0 4
69288: PUSH
69289: LD_INT 22
69291: PUSH
69292: LD_VAR 0 1
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 21
69303: PUSH
69304: LD_INT 3
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PPUSH
69315: CALL_OW 69
69319: ST_TO_ADDR
// if not tmp then
69320: LD_VAR 0 4
69324: NOT
69325: IFFALSE 69329
// exit ;
69327: GO 69471
// enable_addtolog := true ;
69329: LD_ADDR_OWVAR 81
69333: PUSH
69334: LD_INT 1
69336: ST_TO_ADDR
// AddToLog ( [ ) ;
69337: LD_STRING [
69339: PPUSH
69340: CALL_OW 561
// for i in tmp do
69344: LD_ADDR_VAR 0 3
69348: PUSH
69349: LD_VAR 0 4
69353: PUSH
69354: FOR_IN
69355: IFFALSE 69462
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69357: LD_STRING [
69359: PUSH
69360: LD_VAR 0 3
69364: PPUSH
69365: CALL_OW 266
69369: STR
69370: PUSH
69371: LD_STRING , 
69373: STR
69374: PUSH
69375: LD_VAR 0 3
69379: PPUSH
69380: CALL_OW 250
69384: STR
69385: PUSH
69386: LD_STRING , 
69388: STR
69389: PUSH
69390: LD_VAR 0 3
69394: PPUSH
69395: CALL_OW 251
69399: STR
69400: PUSH
69401: LD_STRING , 
69403: STR
69404: PUSH
69405: LD_VAR 0 3
69409: PPUSH
69410: CALL_OW 254
69414: STR
69415: PUSH
69416: LD_STRING , 
69418: STR
69419: PUSH
69420: LD_VAR 0 3
69424: PPUSH
69425: LD_INT 1
69427: PPUSH
69428: CALL_OW 268
69432: STR
69433: PUSH
69434: LD_STRING , 
69436: STR
69437: PUSH
69438: LD_VAR 0 3
69442: PPUSH
69443: LD_INT 2
69445: PPUSH
69446: CALL_OW 268
69450: STR
69451: PUSH
69452: LD_STRING ],
69454: STR
69455: PPUSH
69456: CALL_OW 561
// end ;
69460: GO 69354
69462: POP
69463: POP
// AddToLog ( ]; ) ;
69464: LD_STRING ];
69466: PPUSH
69467: CALL_OW 561
// end ;
69471: LD_VAR 0 2
69475: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69476: LD_INT 0
69478: PPUSH
69479: PPUSH
69480: PPUSH
69481: PPUSH
69482: PPUSH
// if not area or not rate or not max then
69483: LD_VAR 0 1
69487: NOT
69488: PUSH
69489: LD_VAR 0 2
69493: NOT
69494: OR
69495: PUSH
69496: LD_VAR 0 4
69500: NOT
69501: OR
69502: IFFALSE 69506
// exit ;
69504: GO 69695
// while 1 do
69506: LD_INT 1
69508: IFFALSE 69695
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69510: LD_ADDR_VAR 0 9
69514: PUSH
69515: LD_VAR 0 1
69519: PPUSH
69520: LD_INT 1
69522: PPUSH
69523: CALL_OW 287
69527: PUSH
69528: LD_INT 10
69530: MUL
69531: ST_TO_ADDR
// r := rate / 10 ;
69532: LD_ADDR_VAR 0 7
69536: PUSH
69537: LD_VAR 0 2
69541: PUSH
69542: LD_INT 10
69544: DIVREAL
69545: ST_TO_ADDR
// time := 1 1$00 ;
69546: LD_ADDR_VAR 0 8
69550: PUSH
69551: LD_INT 2100
69553: ST_TO_ADDR
// if amount < min then
69554: LD_VAR 0 9
69558: PUSH
69559: LD_VAR 0 3
69563: LESS
69564: IFFALSE 69582
// r := r * 2 else
69566: LD_ADDR_VAR 0 7
69570: PUSH
69571: LD_VAR 0 7
69575: PUSH
69576: LD_INT 2
69578: MUL
69579: ST_TO_ADDR
69580: GO 69608
// if amount > max then
69582: LD_VAR 0 9
69586: PUSH
69587: LD_VAR 0 4
69591: GREATER
69592: IFFALSE 69608
// r := r / 2 ;
69594: LD_ADDR_VAR 0 7
69598: PUSH
69599: LD_VAR 0 7
69603: PUSH
69604: LD_INT 2
69606: DIVREAL
69607: ST_TO_ADDR
// time := time / r ;
69608: LD_ADDR_VAR 0 8
69612: PUSH
69613: LD_VAR 0 8
69617: PUSH
69618: LD_VAR 0 7
69622: DIVREAL
69623: ST_TO_ADDR
// if time < 0 then
69624: LD_VAR 0 8
69628: PUSH
69629: LD_INT 0
69631: LESS
69632: IFFALSE 69649
// time := time * - 1 ;
69634: LD_ADDR_VAR 0 8
69638: PUSH
69639: LD_VAR 0 8
69643: PUSH
69644: LD_INT 1
69646: NEG
69647: MUL
69648: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69649: LD_VAR 0 8
69653: PUSH
69654: LD_INT 35
69656: PPUSH
69657: LD_INT 875
69659: PPUSH
69660: CALL_OW 12
69664: PLUS
69665: PPUSH
69666: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69670: LD_INT 1
69672: PPUSH
69673: LD_INT 5
69675: PPUSH
69676: CALL_OW 12
69680: PPUSH
69681: LD_VAR 0 1
69685: PPUSH
69686: LD_INT 1
69688: PPUSH
69689: CALL_OW 55
// end ;
69693: GO 69506
// end ;
69695: LD_VAR 0 5
69699: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69700: LD_INT 0
69702: PPUSH
69703: PPUSH
69704: PPUSH
69705: PPUSH
69706: PPUSH
69707: PPUSH
69708: PPUSH
69709: PPUSH
// if not turrets or not factories then
69710: LD_VAR 0 1
69714: NOT
69715: PUSH
69716: LD_VAR 0 2
69720: NOT
69721: OR
69722: IFFALSE 69726
// exit ;
69724: GO 70033
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69726: LD_ADDR_VAR 0 10
69730: PUSH
69731: LD_INT 5
69733: PUSH
69734: LD_INT 6
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 2
69743: PUSH
69744: LD_INT 4
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: LD_INT 3
69753: PUSH
69754: LD_INT 5
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 24
69768: PUSH
69769: LD_INT 25
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 23
69778: PUSH
69779: LD_INT 27
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 42
69792: PUSH
69793: LD_INT 43
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 44
69802: PUSH
69803: LD_INT 46
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 45
69812: PUSH
69813: LD_INT 47
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: LIST
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: LIST
69829: ST_TO_ADDR
// result := [ ] ;
69830: LD_ADDR_VAR 0 3
69834: PUSH
69835: EMPTY
69836: ST_TO_ADDR
// for i in turrets do
69837: LD_ADDR_VAR 0 4
69841: PUSH
69842: LD_VAR 0 1
69846: PUSH
69847: FOR_IN
69848: IFFALSE 70031
// begin nat := GetNation ( i ) ;
69850: LD_ADDR_VAR 0 7
69854: PUSH
69855: LD_VAR 0 4
69859: PPUSH
69860: CALL_OW 248
69864: ST_TO_ADDR
// weapon := 0 ;
69865: LD_ADDR_VAR 0 8
69869: PUSH
69870: LD_INT 0
69872: ST_TO_ADDR
// if not nat then
69873: LD_VAR 0 7
69877: NOT
69878: IFFALSE 69882
// continue ;
69880: GO 69847
// for j in list [ nat ] do
69882: LD_ADDR_VAR 0 5
69886: PUSH
69887: LD_VAR 0 10
69891: PUSH
69892: LD_VAR 0 7
69896: ARRAY
69897: PUSH
69898: FOR_IN
69899: IFFALSE 69940
// if GetBWeapon ( i ) = j [ 1 ] then
69901: LD_VAR 0 4
69905: PPUSH
69906: CALL_OW 269
69910: PUSH
69911: LD_VAR 0 5
69915: PUSH
69916: LD_INT 1
69918: ARRAY
69919: EQUAL
69920: IFFALSE 69938
// begin weapon := j [ 2 ] ;
69922: LD_ADDR_VAR 0 8
69926: PUSH
69927: LD_VAR 0 5
69931: PUSH
69932: LD_INT 2
69934: ARRAY
69935: ST_TO_ADDR
// break ;
69936: GO 69940
// end ;
69938: GO 69898
69940: POP
69941: POP
// if not weapon then
69942: LD_VAR 0 8
69946: NOT
69947: IFFALSE 69951
// continue ;
69949: GO 69847
// for k in factories do
69951: LD_ADDR_VAR 0 6
69955: PUSH
69956: LD_VAR 0 2
69960: PUSH
69961: FOR_IN
69962: IFFALSE 70027
// begin weapons := AvailableWeaponList ( k ) ;
69964: LD_ADDR_VAR 0 9
69968: PUSH
69969: LD_VAR 0 6
69973: PPUSH
69974: CALL_OW 478
69978: ST_TO_ADDR
// if not weapons then
69979: LD_VAR 0 9
69983: NOT
69984: IFFALSE 69988
// continue ;
69986: GO 69961
// if weapon in weapons then
69988: LD_VAR 0 8
69992: PUSH
69993: LD_VAR 0 9
69997: IN
69998: IFFALSE 70025
// begin result := [ i , weapon ] ;
70000: LD_ADDR_VAR 0 3
70004: PUSH
70005: LD_VAR 0 4
70009: PUSH
70010: LD_VAR 0 8
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: ST_TO_ADDR
// exit ;
70019: POP
70020: POP
70021: POP
70022: POP
70023: GO 70033
// end ; end ;
70025: GO 69961
70027: POP
70028: POP
// end ;
70029: GO 69847
70031: POP
70032: POP
// end ;
70033: LD_VAR 0 3
70037: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70038: LD_INT 0
70040: PPUSH
// if not side or side > 8 then
70041: LD_VAR 0 3
70045: NOT
70046: PUSH
70047: LD_VAR 0 3
70051: PUSH
70052: LD_INT 8
70054: GREATER
70055: OR
70056: IFFALSE 70060
// exit ;
70058: GO 70119
// if not range then
70060: LD_VAR 0 4
70064: NOT
70065: IFFALSE 70076
// range := - 12 ;
70067: LD_ADDR_VAR 0 4
70071: PUSH
70072: LD_INT 12
70074: NEG
70075: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70076: LD_VAR 0 1
70080: PPUSH
70081: LD_VAR 0 2
70085: PPUSH
70086: LD_VAR 0 3
70090: PPUSH
70091: LD_VAR 0 4
70095: PPUSH
70096: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70100: LD_VAR 0 1
70104: PPUSH
70105: LD_VAR 0 2
70109: PPUSH
70110: LD_VAR 0 3
70114: PPUSH
70115: CALL_OW 331
// end ;
70119: LD_VAR 0 5
70123: RET
// export function Video ( mode ) ; begin
70124: LD_INT 0
70126: PPUSH
// ingame_video = mode ;
70127: LD_ADDR_OWVAR 52
70131: PUSH
70132: LD_VAR 0 1
70136: ST_TO_ADDR
// interface_hidden = mode ;
70137: LD_ADDR_OWVAR 54
70141: PUSH
70142: LD_VAR 0 1
70146: ST_TO_ADDR
// end ;
70147: LD_VAR 0 2
70151: RET
// export function Join ( array , element ) ; begin
70152: LD_INT 0
70154: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70155: LD_ADDR_VAR 0 3
70159: PUSH
70160: LD_VAR 0 1
70164: PPUSH
70165: LD_VAR 0 1
70169: PUSH
70170: LD_INT 1
70172: PLUS
70173: PPUSH
70174: LD_VAR 0 2
70178: PPUSH
70179: CALL_OW 1
70183: ST_TO_ADDR
// end ;
70184: LD_VAR 0 3
70188: RET
// export function JoinUnion ( array , element ) ; begin
70189: LD_INT 0
70191: PPUSH
// result := array union element ;
70192: LD_ADDR_VAR 0 3
70196: PUSH
70197: LD_VAR 0 1
70201: PUSH
70202: LD_VAR 0 2
70206: UNION
70207: ST_TO_ADDR
// end ;
70208: LD_VAR 0 3
70212: RET
// export function GetBehemoths ( side ) ; begin
70213: LD_INT 0
70215: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
70216: LD_ADDR_VAR 0 2
70220: PUSH
70221: LD_INT 22
70223: PUSH
70224: LD_VAR 0 1
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: LD_INT 31
70235: PUSH
70236: LD_INT 25
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PPUSH
70247: CALL_OW 69
70251: ST_TO_ADDR
// end ;
70252: LD_VAR 0 2
70256: RET
// export function Shuffle ( array ) ; var i , index ; begin
70257: LD_INT 0
70259: PPUSH
70260: PPUSH
70261: PPUSH
// result := [ ] ;
70262: LD_ADDR_VAR 0 2
70266: PUSH
70267: EMPTY
70268: ST_TO_ADDR
// if not array then
70269: LD_VAR 0 1
70273: NOT
70274: IFFALSE 70278
// exit ;
70276: GO 70377
// Randomize ;
70278: CALL_OW 10
// for i = array downto 1 do
70282: LD_ADDR_VAR 0 3
70286: PUSH
70287: DOUBLE
70288: LD_VAR 0 1
70292: INC
70293: ST_TO_ADDR
70294: LD_INT 1
70296: PUSH
70297: FOR_DOWNTO
70298: IFFALSE 70375
// begin index := rand ( 1 , array ) ;
70300: LD_ADDR_VAR 0 4
70304: PUSH
70305: LD_INT 1
70307: PPUSH
70308: LD_VAR 0 1
70312: PPUSH
70313: CALL_OW 12
70317: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70318: LD_ADDR_VAR 0 2
70322: PUSH
70323: LD_VAR 0 2
70327: PPUSH
70328: LD_VAR 0 2
70332: PUSH
70333: LD_INT 1
70335: PLUS
70336: PPUSH
70337: LD_VAR 0 1
70341: PUSH
70342: LD_VAR 0 4
70346: ARRAY
70347: PPUSH
70348: CALL_OW 2
70352: ST_TO_ADDR
// array := Delete ( array , index ) ;
70353: LD_ADDR_VAR 0 1
70357: PUSH
70358: LD_VAR 0 1
70362: PPUSH
70363: LD_VAR 0 4
70367: PPUSH
70368: CALL_OW 3
70372: ST_TO_ADDR
// end ;
70373: GO 70297
70375: POP
70376: POP
// end ;
70377: LD_VAR 0 2
70381: RET
// export function GetBaseMaterials ( base ) ; begin
70382: LD_INT 0
70384: PPUSH
// result := [ 0 , 0 , 0 ] ;
70385: LD_ADDR_VAR 0 2
70389: PUSH
70390: LD_INT 0
70392: PUSH
70393: LD_INT 0
70395: PUSH
70396: LD_INT 0
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: LIST
70403: ST_TO_ADDR
// if not base then
70404: LD_VAR 0 1
70408: NOT
70409: IFFALSE 70413
// exit ;
70411: GO 70462
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70413: LD_ADDR_VAR 0 2
70417: PUSH
70418: LD_VAR 0 1
70422: PPUSH
70423: LD_INT 1
70425: PPUSH
70426: CALL_OW 275
70430: PUSH
70431: LD_VAR 0 1
70435: PPUSH
70436: LD_INT 2
70438: PPUSH
70439: CALL_OW 275
70443: PUSH
70444: LD_VAR 0 1
70448: PPUSH
70449: LD_INT 3
70451: PPUSH
70452: CALL_OW 275
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: LIST
70461: ST_TO_ADDR
// end ;
70462: LD_VAR 0 2
70466: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70467: LD_INT 0
70469: PPUSH
70470: PPUSH
// result := array ;
70471: LD_ADDR_VAR 0 3
70475: PUSH
70476: LD_VAR 0 1
70480: ST_TO_ADDR
// if size >= result then
70481: LD_VAR 0 2
70485: PUSH
70486: LD_VAR 0 3
70490: GREATEREQUAL
70491: IFFALSE 70495
// exit ;
70493: GO 70545
// if size then
70495: LD_VAR 0 2
70499: IFFALSE 70545
// for i := array downto size do
70501: LD_ADDR_VAR 0 4
70505: PUSH
70506: DOUBLE
70507: LD_VAR 0 1
70511: INC
70512: ST_TO_ADDR
70513: LD_VAR 0 2
70517: PUSH
70518: FOR_DOWNTO
70519: IFFALSE 70543
// result := Delete ( result , result ) ;
70521: LD_ADDR_VAR 0 3
70525: PUSH
70526: LD_VAR 0 3
70530: PPUSH
70531: LD_VAR 0 3
70535: PPUSH
70536: CALL_OW 3
70540: ST_TO_ADDR
70541: GO 70518
70543: POP
70544: POP
// end ;
70545: LD_VAR 0 3
70549: RET
// export function ComExit ( unit ) ; var tmp ; begin
70550: LD_INT 0
70552: PPUSH
70553: PPUSH
// if not IsInUnit ( unit ) then
70554: LD_VAR 0 1
70558: PPUSH
70559: CALL_OW 310
70563: NOT
70564: IFFALSE 70568
// exit ;
70566: GO 70628
// tmp := IsInUnit ( unit ) ;
70568: LD_ADDR_VAR 0 3
70572: PUSH
70573: LD_VAR 0 1
70577: PPUSH
70578: CALL_OW 310
70582: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70583: LD_VAR 0 3
70587: PPUSH
70588: CALL_OW 247
70592: PUSH
70593: LD_INT 2
70595: EQUAL
70596: IFFALSE 70609
// ComExitVehicle ( unit ) else
70598: LD_VAR 0 1
70602: PPUSH
70603: CALL_OW 121
70607: GO 70618
// ComExitBuilding ( unit ) ;
70609: LD_VAR 0 1
70613: PPUSH
70614: CALL_OW 122
// result := tmp ;
70618: LD_ADDR_VAR 0 2
70622: PUSH
70623: LD_VAR 0 3
70627: ST_TO_ADDR
// end ;
70628: LD_VAR 0 2
70632: RET
// export function ComExitAll ( units ) ; var i ; begin
70633: LD_INT 0
70635: PPUSH
70636: PPUSH
// if not units then
70637: LD_VAR 0 1
70641: NOT
70642: IFFALSE 70646
// exit ;
70644: GO 70672
// for i in units do
70646: LD_ADDR_VAR 0 3
70650: PUSH
70651: LD_VAR 0 1
70655: PUSH
70656: FOR_IN
70657: IFFALSE 70670
// ComExit ( i ) ;
70659: LD_VAR 0 3
70663: PPUSH
70664: CALL 70550 0 1
70668: GO 70656
70670: POP
70671: POP
// end ;
70672: LD_VAR 0 2
70676: RET
// export function ResetHc ; begin
70677: LD_INT 0
70679: PPUSH
// InitHc ;
70680: CALL_OW 19
// hc_importance := 0 ;
70684: LD_ADDR_OWVAR 32
70688: PUSH
70689: LD_INT 0
70691: ST_TO_ADDR
// end ;
70692: LD_VAR 0 1
70696: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70697: LD_INT 0
70699: PPUSH
70700: PPUSH
70701: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70702: LD_ADDR_VAR 0 6
70706: PUSH
70707: LD_VAR 0 1
70711: PUSH
70712: LD_VAR 0 3
70716: PLUS
70717: PUSH
70718: LD_INT 2
70720: DIV
70721: ST_TO_ADDR
// if _x < 0 then
70722: LD_VAR 0 6
70726: PUSH
70727: LD_INT 0
70729: LESS
70730: IFFALSE 70747
// _x := _x * - 1 ;
70732: LD_ADDR_VAR 0 6
70736: PUSH
70737: LD_VAR 0 6
70741: PUSH
70742: LD_INT 1
70744: NEG
70745: MUL
70746: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70747: LD_ADDR_VAR 0 7
70751: PUSH
70752: LD_VAR 0 2
70756: PUSH
70757: LD_VAR 0 4
70761: PLUS
70762: PUSH
70763: LD_INT 2
70765: DIV
70766: ST_TO_ADDR
// if _y < 0 then
70767: LD_VAR 0 7
70771: PUSH
70772: LD_INT 0
70774: LESS
70775: IFFALSE 70792
// _y := _y * - 1 ;
70777: LD_ADDR_VAR 0 7
70781: PUSH
70782: LD_VAR 0 7
70786: PUSH
70787: LD_INT 1
70789: NEG
70790: MUL
70791: ST_TO_ADDR
// result := [ _x , _y ] ;
70792: LD_ADDR_VAR 0 5
70796: PUSH
70797: LD_VAR 0 6
70801: PUSH
70802: LD_VAR 0 7
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: ST_TO_ADDR
// end ;
70811: LD_VAR 0 5
70815: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70816: LD_INT 0
70818: PPUSH
70819: PPUSH
70820: PPUSH
70821: PPUSH
// task := GetTaskList ( unit ) ;
70822: LD_ADDR_VAR 0 7
70826: PUSH
70827: LD_VAR 0 1
70831: PPUSH
70832: CALL_OW 437
70836: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70837: LD_VAR 0 7
70841: NOT
70842: PUSH
70843: LD_VAR 0 1
70847: PPUSH
70848: LD_VAR 0 2
70852: PPUSH
70853: CALL_OW 308
70857: NOT
70858: AND
70859: IFFALSE 70863
// exit ;
70861: GO 70981
// if IsInArea ( unit , area ) then
70863: LD_VAR 0 1
70867: PPUSH
70868: LD_VAR 0 2
70872: PPUSH
70873: CALL_OW 308
70877: IFFALSE 70895
// begin ComMoveToArea ( unit , goAway ) ;
70879: LD_VAR 0 1
70883: PPUSH
70884: LD_VAR 0 3
70888: PPUSH
70889: CALL_OW 113
// exit ;
70893: GO 70981
// end ; if task [ 1 ] [ 1 ] <> M then
70895: LD_VAR 0 7
70899: PUSH
70900: LD_INT 1
70902: ARRAY
70903: PUSH
70904: LD_INT 1
70906: ARRAY
70907: PUSH
70908: LD_STRING M
70910: NONEQUAL
70911: IFFALSE 70915
// exit ;
70913: GO 70981
// x := task [ 1 ] [ 2 ] ;
70915: LD_ADDR_VAR 0 5
70919: PUSH
70920: LD_VAR 0 7
70924: PUSH
70925: LD_INT 1
70927: ARRAY
70928: PUSH
70929: LD_INT 2
70931: ARRAY
70932: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70933: LD_ADDR_VAR 0 6
70937: PUSH
70938: LD_VAR 0 7
70942: PUSH
70943: LD_INT 1
70945: ARRAY
70946: PUSH
70947: LD_INT 3
70949: ARRAY
70950: ST_TO_ADDR
// if InArea ( x , y , area ) then
70951: LD_VAR 0 5
70955: PPUSH
70956: LD_VAR 0 6
70960: PPUSH
70961: LD_VAR 0 2
70965: PPUSH
70966: CALL_OW 309
70970: IFFALSE 70981
// ComStop ( unit ) ;
70972: LD_VAR 0 1
70976: PPUSH
70977: CALL_OW 141
// end ;
70981: LD_VAR 0 4
70985: RET
// export function Abs ( value ) ; begin
70986: LD_INT 0
70988: PPUSH
// result := value ;
70989: LD_ADDR_VAR 0 2
70993: PUSH
70994: LD_VAR 0 1
70998: ST_TO_ADDR
// if value < 0 then
70999: LD_VAR 0 1
71003: PUSH
71004: LD_INT 0
71006: LESS
71007: IFFALSE 71024
// result := value * - 1 ;
71009: LD_ADDR_VAR 0 2
71013: PUSH
71014: LD_VAR 0 1
71018: PUSH
71019: LD_INT 1
71021: NEG
71022: MUL
71023: ST_TO_ADDR
// end ;
71024: LD_VAR 0 2
71028: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71029: LD_INT 0
71031: PPUSH
71032: PPUSH
71033: PPUSH
71034: PPUSH
71035: PPUSH
71036: PPUSH
71037: PPUSH
71038: PPUSH
// if not unit or not building then
71039: LD_VAR 0 1
71043: NOT
71044: PUSH
71045: LD_VAR 0 2
71049: NOT
71050: OR
71051: IFFALSE 71055
// exit ;
71053: GO 71281
// x := GetX ( building ) ;
71055: LD_ADDR_VAR 0 4
71059: PUSH
71060: LD_VAR 0 2
71064: PPUSH
71065: CALL_OW 250
71069: ST_TO_ADDR
// y := GetY ( building ) ;
71070: LD_ADDR_VAR 0 6
71074: PUSH
71075: LD_VAR 0 2
71079: PPUSH
71080: CALL_OW 251
71084: ST_TO_ADDR
// d := GetDir ( building ) ;
71085: LD_ADDR_VAR 0 8
71089: PUSH
71090: LD_VAR 0 2
71094: PPUSH
71095: CALL_OW 254
71099: ST_TO_ADDR
// r := 4 ;
71100: LD_ADDR_VAR 0 9
71104: PUSH
71105: LD_INT 4
71107: ST_TO_ADDR
// for i := 1 to 5 do
71108: LD_ADDR_VAR 0 10
71112: PUSH
71113: DOUBLE
71114: LD_INT 1
71116: DEC
71117: ST_TO_ADDR
71118: LD_INT 5
71120: PUSH
71121: FOR_TO
71122: IFFALSE 71279
// begin _x := ShiftX ( x , d , r + i ) ;
71124: LD_ADDR_VAR 0 5
71128: PUSH
71129: LD_VAR 0 4
71133: PPUSH
71134: LD_VAR 0 8
71138: PPUSH
71139: LD_VAR 0 9
71143: PUSH
71144: LD_VAR 0 10
71148: PLUS
71149: PPUSH
71150: CALL_OW 272
71154: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71155: LD_ADDR_VAR 0 7
71159: PUSH
71160: LD_VAR 0 6
71164: PPUSH
71165: LD_VAR 0 8
71169: PPUSH
71170: LD_VAR 0 9
71174: PUSH
71175: LD_VAR 0 10
71179: PLUS
71180: PPUSH
71181: CALL_OW 273
71185: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71186: LD_VAR 0 5
71190: PPUSH
71191: LD_VAR 0 7
71195: PPUSH
71196: CALL_OW 488
71200: PUSH
71201: LD_VAR 0 5
71205: PPUSH
71206: LD_VAR 0 7
71210: PPUSH
71211: CALL_OW 428
71215: PPUSH
71216: CALL_OW 247
71220: PUSH
71221: LD_INT 3
71223: PUSH
71224: LD_INT 2
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: IN
71231: NOT
71232: AND
71233: IFFALSE 71277
// begin ComMoveXY ( unit , _x , _y ) ;
71235: LD_VAR 0 1
71239: PPUSH
71240: LD_VAR 0 5
71244: PPUSH
71245: LD_VAR 0 7
71249: PPUSH
71250: CALL_OW 111
// result := [ _x , _y ] ;
71254: LD_ADDR_VAR 0 3
71258: PUSH
71259: LD_VAR 0 5
71263: PUSH
71264: LD_VAR 0 7
71268: PUSH
71269: EMPTY
71270: LIST
71271: LIST
71272: ST_TO_ADDR
// exit ;
71273: POP
71274: POP
71275: GO 71281
// end ; end ;
71277: GO 71121
71279: POP
71280: POP
// end ;
71281: LD_VAR 0 3
71285: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71286: LD_INT 0
71288: PPUSH
71289: PPUSH
71290: PPUSH
// result := 0 ;
71291: LD_ADDR_VAR 0 3
71295: PUSH
71296: LD_INT 0
71298: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71299: LD_VAR 0 1
71303: PUSH
71304: LD_INT 0
71306: LESS
71307: PUSH
71308: LD_VAR 0 1
71312: PUSH
71313: LD_INT 8
71315: GREATER
71316: OR
71317: PUSH
71318: LD_VAR 0 2
71322: PUSH
71323: LD_INT 0
71325: LESS
71326: OR
71327: PUSH
71328: LD_VAR 0 2
71332: PUSH
71333: LD_INT 8
71335: GREATER
71336: OR
71337: IFFALSE 71341
// exit ;
71339: GO 71416
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71341: LD_ADDR_VAR 0 4
71345: PUSH
71346: LD_INT 22
71348: PUSH
71349: LD_VAR 0 2
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PPUSH
71358: CALL_OW 69
71362: PUSH
71363: FOR_IN
71364: IFFALSE 71414
// begin un := UnitShoot ( i ) ;
71366: LD_ADDR_VAR 0 5
71370: PUSH
71371: LD_VAR 0 4
71375: PPUSH
71376: CALL_OW 504
71380: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71381: LD_VAR 0 5
71385: PPUSH
71386: CALL_OW 255
71390: PUSH
71391: LD_VAR 0 1
71395: EQUAL
71396: IFFALSE 71412
// begin result := un ;
71398: LD_ADDR_VAR 0 3
71402: PUSH
71403: LD_VAR 0 5
71407: ST_TO_ADDR
// exit ;
71408: POP
71409: POP
71410: GO 71416
// end ; end ;
71412: GO 71363
71414: POP
71415: POP
// end ;
71416: LD_VAR 0 3
71420: RET
// export function GetCargoBay ( units ) ; begin
71421: LD_INT 0
71423: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71424: LD_ADDR_VAR 0 2
71428: PUSH
71429: LD_VAR 0 1
71433: PPUSH
71434: LD_INT 2
71436: PUSH
71437: LD_INT 34
71439: PUSH
71440: LD_INT 12
71442: PUSH
71443: EMPTY
71444: LIST
71445: LIST
71446: PUSH
71447: LD_INT 34
71449: PUSH
71450: LD_INT 51
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: PUSH
71457: LD_INT 34
71459: PUSH
71460: LD_INT 32
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: PUSH
71467: LD_INT 34
71469: PUSH
71470: LD_INT 89
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: PPUSH
71484: CALL_OW 72
71488: ST_TO_ADDR
// end ;
71489: LD_VAR 0 2
71493: RET
// export function Negate ( value ) ; begin
71494: LD_INT 0
71496: PPUSH
// result := not value ;
71497: LD_ADDR_VAR 0 2
71501: PUSH
71502: LD_VAR 0 1
71506: NOT
71507: ST_TO_ADDR
// end ;
71508: LD_VAR 0 2
71512: RET
// export function Inc ( value ) ; begin
71513: LD_INT 0
71515: PPUSH
// result := value + 1 ;
71516: LD_ADDR_VAR 0 2
71520: PUSH
71521: LD_VAR 0 1
71525: PUSH
71526: LD_INT 1
71528: PLUS
71529: ST_TO_ADDR
// end ;
71530: LD_VAR 0 2
71534: RET
// export function Dec ( value ) ; begin
71535: LD_INT 0
71537: PPUSH
// result := value - 1 ;
71538: LD_ADDR_VAR 0 2
71542: PUSH
71543: LD_VAR 0 1
71547: PUSH
71548: LD_INT 1
71550: MINUS
71551: ST_TO_ADDR
// end ;
71552: LD_VAR 0 2
71556: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71557: LD_INT 0
71559: PPUSH
71560: PPUSH
71561: PPUSH
71562: PPUSH
71563: PPUSH
71564: PPUSH
71565: PPUSH
71566: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71567: LD_VAR 0 1
71571: PPUSH
71572: LD_VAR 0 2
71576: PPUSH
71577: CALL_OW 488
71581: NOT
71582: PUSH
71583: LD_VAR 0 3
71587: PPUSH
71588: LD_VAR 0 4
71592: PPUSH
71593: CALL_OW 488
71597: NOT
71598: OR
71599: IFFALSE 71612
// begin result := - 1 ;
71601: LD_ADDR_VAR 0 5
71605: PUSH
71606: LD_INT 1
71608: NEG
71609: ST_TO_ADDR
// exit ;
71610: GO 71847
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71612: LD_ADDR_VAR 0 12
71616: PUSH
71617: LD_VAR 0 1
71621: PPUSH
71622: LD_VAR 0 2
71626: PPUSH
71627: LD_VAR 0 3
71631: PPUSH
71632: LD_VAR 0 4
71636: PPUSH
71637: CALL 70697 0 4
71641: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71642: LD_ADDR_VAR 0 11
71646: PUSH
71647: LD_VAR 0 1
71651: PPUSH
71652: LD_VAR 0 2
71656: PPUSH
71657: LD_VAR 0 12
71661: PUSH
71662: LD_INT 1
71664: ARRAY
71665: PPUSH
71666: LD_VAR 0 12
71670: PUSH
71671: LD_INT 2
71673: ARRAY
71674: PPUSH
71675: CALL_OW 298
71679: ST_TO_ADDR
// distance := 9999 ;
71680: LD_ADDR_VAR 0 10
71684: PUSH
71685: LD_INT 9999
71687: ST_TO_ADDR
// for i := 0 to 5 do
71688: LD_ADDR_VAR 0 6
71692: PUSH
71693: DOUBLE
71694: LD_INT 0
71696: DEC
71697: ST_TO_ADDR
71698: LD_INT 5
71700: PUSH
71701: FOR_TO
71702: IFFALSE 71845
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71704: LD_ADDR_VAR 0 7
71708: PUSH
71709: LD_VAR 0 1
71713: PPUSH
71714: LD_VAR 0 6
71718: PPUSH
71719: LD_VAR 0 11
71723: PPUSH
71724: CALL_OW 272
71728: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71729: LD_ADDR_VAR 0 8
71733: PUSH
71734: LD_VAR 0 2
71738: PPUSH
71739: LD_VAR 0 6
71743: PPUSH
71744: LD_VAR 0 11
71748: PPUSH
71749: CALL_OW 273
71753: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71754: LD_VAR 0 7
71758: PPUSH
71759: LD_VAR 0 8
71763: PPUSH
71764: CALL_OW 488
71768: NOT
71769: IFFALSE 71773
// continue ;
71771: GO 71701
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71773: LD_ADDR_VAR 0 9
71777: PUSH
71778: LD_VAR 0 12
71782: PUSH
71783: LD_INT 1
71785: ARRAY
71786: PPUSH
71787: LD_VAR 0 12
71791: PUSH
71792: LD_INT 2
71794: ARRAY
71795: PPUSH
71796: LD_VAR 0 7
71800: PPUSH
71801: LD_VAR 0 8
71805: PPUSH
71806: CALL_OW 298
71810: ST_TO_ADDR
// if tmp < distance then
71811: LD_VAR 0 9
71815: PUSH
71816: LD_VAR 0 10
71820: LESS
71821: IFFALSE 71843
// begin result := i ;
71823: LD_ADDR_VAR 0 5
71827: PUSH
71828: LD_VAR 0 6
71832: ST_TO_ADDR
// distance := tmp ;
71833: LD_ADDR_VAR 0 10
71837: PUSH
71838: LD_VAR 0 9
71842: ST_TO_ADDR
// end ; end ;
71843: GO 71701
71845: POP
71846: POP
// end ;
71847: LD_VAR 0 5
71851: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71852: LD_INT 0
71854: PPUSH
71855: PPUSH
// if not driver or not IsInUnit ( driver ) then
71856: LD_VAR 0 1
71860: NOT
71861: PUSH
71862: LD_VAR 0 1
71866: PPUSH
71867: CALL_OW 310
71871: NOT
71872: OR
71873: IFFALSE 71877
// exit ;
71875: GO 71967
// vehicle := IsInUnit ( driver ) ;
71877: LD_ADDR_VAR 0 3
71881: PUSH
71882: LD_VAR 0 1
71886: PPUSH
71887: CALL_OW 310
71891: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71892: LD_VAR 0 1
71896: PPUSH
71897: LD_STRING \
71899: PUSH
71900: LD_INT 0
71902: PUSH
71903: LD_INT 0
71905: PUSH
71906: LD_INT 0
71908: PUSH
71909: LD_INT 0
71911: PUSH
71912: LD_INT 0
71914: PUSH
71915: LD_INT 0
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: PUSH
71927: LD_STRING E
71929: PUSH
71930: LD_INT 0
71932: PUSH
71933: LD_INT 0
71935: PUSH
71936: LD_VAR 0 3
71940: PUSH
71941: LD_INT 0
71943: PUSH
71944: LD_INT 0
71946: PUSH
71947: LD_INT 0
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: PUSH
71959: EMPTY
71960: LIST
71961: LIST
71962: PPUSH
71963: CALL_OW 446
// end ;
71967: LD_VAR 0 2
71971: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71972: LD_INT 0
71974: PPUSH
71975: PPUSH
// if not driver or not IsInUnit ( driver ) then
71976: LD_VAR 0 1
71980: NOT
71981: PUSH
71982: LD_VAR 0 1
71986: PPUSH
71987: CALL_OW 310
71991: NOT
71992: OR
71993: IFFALSE 71997
// exit ;
71995: GO 72087
// vehicle := IsInUnit ( driver ) ;
71997: LD_ADDR_VAR 0 3
72001: PUSH
72002: LD_VAR 0 1
72006: PPUSH
72007: CALL_OW 310
72011: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72012: LD_VAR 0 1
72016: PPUSH
72017: LD_STRING \
72019: PUSH
72020: LD_INT 0
72022: PUSH
72023: LD_INT 0
72025: PUSH
72026: LD_INT 0
72028: PUSH
72029: LD_INT 0
72031: PUSH
72032: LD_INT 0
72034: PUSH
72035: LD_INT 0
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: LIST
72042: LIST
72043: LIST
72044: LIST
72045: LIST
72046: PUSH
72047: LD_STRING E
72049: PUSH
72050: LD_INT 0
72052: PUSH
72053: LD_INT 0
72055: PUSH
72056: LD_VAR 0 3
72060: PUSH
72061: LD_INT 0
72063: PUSH
72064: LD_INT 0
72066: PUSH
72067: LD_INT 0
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: LIST
72074: LIST
72075: LIST
72076: LIST
72077: LIST
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: PPUSH
72083: CALL_OW 447
// end ;
72087: LD_VAR 0 2
72091: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72092: LD_INT 0
72094: PPUSH
72095: PPUSH
72096: PPUSH
// tmp := [ ] ;
72097: LD_ADDR_VAR 0 5
72101: PUSH
72102: EMPTY
72103: ST_TO_ADDR
// for i in units do
72104: LD_ADDR_VAR 0 4
72108: PUSH
72109: LD_VAR 0 1
72113: PUSH
72114: FOR_IN
72115: IFFALSE 72153
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72117: LD_ADDR_VAR 0 5
72121: PUSH
72122: LD_VAR 0 5
72126: PPUSH
72127: LD_VAR 0 5
72131: PUSH
72132: LD_INT 1
72134: PLUS
72135: PPUSH
72136: LD_VAR 0 4
72140: PPUSH
72141: CALL_OW 256
72145: PPUSH
72146: CALL_OW 2
72150: ST_TO_ADDR
72151: GO 72114
72153: POP
72154: POP
// if not tmp then
72155: LD_VAR 0 5
72159: NOT
72160: IFFALSE 72164
// exit ;
72162: GO 72212
// if asc then
72164: LD_VAR 0 2
72168: IFFALSE 72192
// result := SortListByListAsc ( units , tmp ) else
72170: LD_ADDR_VAR 0 3
72174: PUSH
72175: LD_VAR 0 1
72179: PPUSH
72180: LD_VAR 0 5
72184: PPUSH
72185: CALL_OW 76
72189: ST_TO_ADDR
72190: GO 72212
// result := SortListByListDesc ( units , tmp ) ;
72192: LD_ADDR_VAR 0 3
72196: PUSH
72197: LD_VAR 0 1
72201: PPUSH
72202: LD_VAR 0 5
72206: PPUSH
72207: CALL_OW 77
72211: ST_TO_ADDR
// end ;
72212: LD_VAR 0 3
72216: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72217: LD_INT 0
72219: PPUSH
72220: PPUSH
// task := GetTaskList ( mech ) ;
72221: LD_ADDR_VAR 0 4
72225: PUSH
72226: LD_VAR 0 1
72230: PPUSH
72231: CALL_OW 437
72235: ST_TO_ADDR
// if not task then
72236: LD_VAR 0 4
72240: NOT
72241: IFFALSE 72245
// exit ;
72243: GO 72287
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72245: LD_ADDR_VAR 0 3
72249: PUSH
72250: LD_VAR 0 4
72254: PUSH
72255: LD_INT 1
72257: ARRAY
72258: PUSH
72259: LD_INT 1
72261: ARRAY
72262: PUSH
72263: LD_STRING r
72265: EQUAL
72266: PUSH
72267: LD_VAR 0 4
72271: PUSH
72272: LD_INT 1
72274: ARRAY
72275: PUSH
72276: LD_INT 4
72278: ARRAY
72279: PUSH
72280: LD_VAR 0 2
72284: EQUAL
72285: AND
72286: ST_TO_ADDR
// end ;
72287: LD_VAR 0 3
72291: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72292: LD_INT 0
72294: PPUSH
// SetDir ( unit , d ) ;
72295: LD_VAR 0 1
72299: PPUSH
72300: LD_VAR 0 4
72304: PPUSH
72305: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
72309: LD_VAR 0 1
72313: PPUSH
72314: LD_VAR 0 2
72318: PPUSH
72319: LD_VAR 0 3
72323: PPUSH
72324: LD_VAR 0 5
72328: PPUSH
72329: CALL_OW 48
// end ;
72333: LD_VAR 0 6
72337: RET
// export function ToNaturalNumber ( number ) ; begin
72338: LD_INT 0
72340: PPUSH
// result := number div 1 ;
72341: LD_ADDR_VAR 0 2
72345: PUSH
72346: LD_VAR 0 1
72350: PUSH
72351: LD_INT 1
72353: DIV
72354: ST_TO_ADDR
// if number < 0 then
72355: LD_VAR 0 1
72359: PUSH
72360: LD_INT 0
72362: LESS
72363: IFFALSE 72373
// result := 0 ;
72365: LD_ADDR_VAR 0 2
72369: PUSH
72370: LD_INT 0
72372: ST_TO_ADDR
// end ;
72373: LD_VAR 0 2
72377: RET
// export function SortByClass ( units , class ) ; var un ; begin
72378: LD_INT 0
72380: PPUSH
72381: PPUSH
// if not units or not class then
72382: LD_VAR 0 1
72386: NOT
72387: PUSH
72388: LD_VAR 0 2
72392: NOT
72393: OR
72394: IFFALSE 72398
// exit ;
72396: GO 72493
// result := [ ] ;
72398: LD_ADDR_VAR 0 3
72402: PUSH
72403: EMPTY
72404: ST_TO_ADDR
// for un in units do
72405: LD_ADDR_VAR 0 4
72409: PUSH
72410: LD_VAR 0 1
72414: PUSH
72415: FOR_IN
72416: IFFALSE 72491
// if GetClass ( un ) = class then
72418: LD_VAR 0 4
72422: PPUSH
72423: CALL_OW 257
72427: PUSH
72428: LD_VAR 0 2
72432: EQUAL
72433: IFFALSE 72460
// result := Insert ( result , 1 , un ) else
72435: LD_ADDR_VAR 0 3
72439: PUSH
72440: LD_VAR 0 3
72444: PPUSH
72445: LD_INT 1
72447: PPUSH
72448: LD_VAR 0 4
72452: PPUSH
72453: CALL_OW 2
72457: ST_TO_ADDR
72458: GO 72489
// result := Replace ( result , result + 1 , un ) ;
72460: LD_ADDR_VAR 0 3
72464: PUSH
72465: LD_VAR 0 3
72469: PPUSH
72470: LD_VAR 0 3
72474: PUSH
72475: LD_INT 1
72477: PLUS
72478: PPUSH
72479: LD_VAR 0 4
72483: PPUSH
72484: CALL_OW 1
72488: ST_TO_ADDR
72489: GO 72415
72491: POP
72492: POP
// end ;
72493: LD_VAR 0 3
72497: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72498: LD_INT 0
72500: PPUSH
72501: PPUSH
72502: PPUSH
72503: PPUSH
72504: PPUSH
72505: PPUSH
72506: PPUSH
// result := [ ] ;
72507: LD_ADDR_VAR 0 4
72511: PUSH
72512: EMPTY
72513: ST_TO_ADDR
// if x - r < 0 then
72514: LD_VAR 0 1
72518: PUSH
72519: LD_VAR 0 3
72523: MINUS
72524: PUSH
72525: LD_INT 0
72527: LESS
72528: IFFALSE 72540
// min_x := 0 else
72530: LD_ADDR_VAR 0 8
72534: PUSH
72535: LD_INT 0
72537: ST_TO_ADDR
72538: GO 72556
// min_x := x - r ;
72540: LD_ADDR_VAR 0 8
72544: PUSH
72545: LD_VAR 0 1
72549: PUSH
72550: LD_VAR 0 3
72554: MINUS
72555: ST_TO_ADDR
// if y - r < 0 then
72556: LD_VAR 0 2
72560: PUSH
72561: LD_VAR 0 3
72565: MINUS
72566: PUSH
72567: LD_INT 0
72569: LESS
72570: IFFALSE 72582
// min_y := 0 else
72572: LD_ADDR_VAR 0 7
72576: PUSH
72577: LD_INT 0
72579: ST_TO_ADDR
72580: GO 72598
// min_y := y - r ;
72582: LD_ADDR_VAR 0 7
72586: PUSH
72587: LD_VAR 0 2
72591: PUSH
72592: LD_VAR 0 3
72596: MINUS
72597: ST_TO_ADDR
// max_x := x + r ;
72598: LD_ADDR_VAR 0 9
72602: PUSH
72603: LD_VAR 0 1
72607: PUSH
72608: LD_VAR 0 3
72612: PLUS
72613: ST_TO_ADDR
// max_y := y + r ;
72614: LD_ADDR_VAR 0 10
72618: PUSH
72619: LD_VAR 0 2
72623: PUSH
72624: LD_VAR 0 3
72628: PLUS
72629: ST_TO_ADDR
// for _x = min_x to max_x do
72630: LD_ADDR_VAR 0 5
72634: PUSH
72635: DOUBLE
72636: LD_VAR 0 8
72640: DEC
72641: ST_TO_ADDR
72642: LD_VAR 0 9
72646: PUSH
72647: FOR_TO
72648: IFFALSE 72749
// for _y = min_y to max_y do
72650: LD_ADDR_VAR 0 6
72654: PUSH
72655: DOUBLE
72656: LD_VAR 0 7
72660: DEC
72661: ST_TO_ADDR
72662: LD_VAR 0 10
72666: PUSH
72667: FOR_TO
72668: IFFALSE 72745
// begin if not ValidHex ( _x , _y ) then
72670: LD_VAR 0 5
72674: PPUSH
72675: LD_VAR 0 6
72679: PPUSH
72680: CALL_OW 488
72684: NOT
72685: IFFALSE 72689
// continue ;
72687: GO 72667
// if GetResourceTypeXY ( _x , _y ) then
72689: LD_VAR 0 5
72693: PPUSH
72694: LD_VAR 0 6
72698: PPUSH
72699: CALL_OW 283
72703: IFFALSE 72743
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72705: LD_ADDR_VAR 0 4
72709: PUSH
72710: LD_VAR 0 4
72714: PPUSH
72715: LD_VAR 0 4
72719: PUSH
72720: LD_INT 1
72722: PLUS
72723: PPUSH
72724: LD_VAR 0 5
72728: PUSH
72729: LD_VAR 0 6
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: PPUSH
72738: CALL_OW 1
72742: ST_TO_ADDR
// end ;
72743: GO 72667
72745: POP
72746: POP
72747: GO 72647
72749: POP
72750: POP
// end ;
72751: LD_VAR 0 4
72755: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72756: LD_INT 0
72758: PPUSH
72759: PPUSH
72760: PPUSH
72761: PPUSH
72762: PPUSH
72763: PPUSH
72764: PPUSH
72765: PPUSH
// if not units then
72766: LD_VAR 0 1
72770: NOT
72771: IFFALSE 72775
// exit ;
72773: GO 73303
// result := UnitFilter ( units , [ f_ok ] ) ;
72775: LD_ADDR_VAR 0 3
72779: PUSH
72780: LD_VAR 0 1
72784: PPUSH
72785: LD_INT 50
72787: PUSH
72788: EMPTY
72789: LIST
72790: PPUSH
72791: CALL_OW 72
72795: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72796: LD_ADDR_VAR 0 8
72800: PUSH
72801: LD_VAR 0 1
72805: PUSH
72806: LD_INT 1
72808: ARRAY
72809: PPUSH
72810: CALL_OW 255
72814: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72815: LD_ADDR_VAR 0 10
72819: PUSH
72820: LD_INT 29
72822: PUSH
72823: LD_INT 91
72825: PUSH
72826: LD_INT 49
72828: PUSH
72829: EMPTY
72830: LIST
72831: LIST
72832: LIST
72833: ST_TO_ADDR
// if not result then
72834: LD_VAR 0 3
72838: NOT
72839: IFFALSE 72843
// exit ;
72841: GO 73303
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72843: LD_ADDR_VAR 0 5
72847: PUSH
72848: LD_INT 81
72850: PUSH
72851: LD_VAR 0 8
72855: PUSH
72856: EMPTY
72857: LIST
72858: LIST
72859: PPUSH
72860: CALL_OW 69
72864: ST_TO_ADDR
// for i in result do
72865: LD_ADDR_VAR 0 4
72869: PUSH
72870: LD_VAR 0 3
72874: PUSH
72875: FOR_IN
72876: IFFALSE 73301
// begin tag := GetTag ( i ) + 1 ;
72878: LD_ADDR_VAR 0 9
72882: PUSH
72883: LD_VAR 0 4
72887: PPUSH
72888: CALL_OW 110
72892: PUSH
72893: LD_INT 1
72895: PLUS
72896: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
72897: LD_ADDR_VAR 0 7
72901: PUSH
72902: LD_VAR 0 4
72906: PPUSH
72907: CALL_OW 250
72911: PPUSH
72912: LD_VAR 0 4
72916: PPUSH
72917: CALL_OW 251
72921: PPUSH
72922: LD_INT 4
72924: PPUSH
72925: CALL 72498 0 3
72929: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
72930: LD_VAR 0 4
72934: PPUSH
72935: CALL_OW 247
72939: PUSH
72940: LD_INT 2
72942: EQUAL
72943: PUSH
72944: LD_VAR 0 7
72948: PUSH
72949: LD_INT 2
72951: GREATER
72952: AND
72953: PUSH
72954: LD_VAR 0 4
72958: PPUSH
72959: CALL_OW 264
72963: PUSH
72964: LD_VAR 0 10
72968: IN
72969: NOT
72970: AND
72971: IFFALSE 73010
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72973: LD_VAR 0 4
72977: PPUSH
72978: LD_VAR 0 7
72982: PUSH
72983: LD_INT 1
72985: ARRAY
72986: PUSH
72987: LD_INT 1
72989: ARRAY
72990: PPUSH
72991: LD_VAR 0 7
72995: PUSH
72996: LD_INT 1
72998: ARRAY
72999: PUSH
73000: LD_INT 2
73002: ARRAY
73003: PPUSH
73004: CALL_OW 116
73008: GO 73299
// if path > tag then
73010: LD_VAR 0 2
73014: PUSH
73015: LD_VAR 0 9
73019: GREATER
73020: IFFALSE 73228
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
73022: LD_ADDR_VAR 0 6
73026: PUSH
73027: LD_VAR 0 5
73031: PPUSH
73032: LD_INT 91
73034: PUSH
73035: LD_VAR 0 4
73039: PUSH
73040: LD_INT 8
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: LIST
73047: PPUSH
73048: CALL_OW 72
73052: ST_TO_ADDR
// if nearEnemy then
73053: LD_VAR 0 6
73057: IFFALSE 73126
// begin if GetWeapon ( i ) = ru_time_lapser then
73059: LD_VAR 0 4
73063: PPUSH
73064: CALL_OW 264
73068: PUSH
73069: LD_INT 49
73071: EQUAL
73072: IFFALSE 73100
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73074: LD_VAR 0 4
73078: PPUSH
73079: LD_VAR 0 6
73083: PPUSH
73084: LD_VAR 0 4
73088: PPUSH
73089: CALL_OW 74
73093: PPUSH
73094: CALL_OW 112
73098: GO 73124
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73100: LD_VAR 0 4
73104: PPUSH
73105: LD_VAR 0 6
73109: PPUSH
73110: LD_VAR 0 4
73114: PPUSH
73115: CALL_OW 74
73119: PPUSH
73120: CALL 74374 0 2
// end else
73124: GO 73226
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73126: LD_VAR 0 4
73130: PPUSH
73131: LD_VAR 0 2
73135: PUSH
73136: LD_VAR 0 9
73140: ARRAY
73141: PUSH
73142: LD_INT 1
73144: ARRAY
73145: PPUSH
73146: LD_VAR 0 2
73150: PUSH
73151: LD_VAR 0 9
73155: ARRAY
73156: PUSH
73157: LD_INT 2
73159: ARRAY
73160: PPUSH
73161: CALL_OW 297
73165: PUSH
73166: LD_INT 6
73168: GREATER
73169: IFFALSE 73212
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73171: LD_VAR 0 4
73175: PPUSH
73176: LD_VAR 0 2
73180: PUSH
73181: LD_VAR 0 9
73185: ARRAY
73186: PUSH
73187: LD_INT 1
73189: ARRAY
73190: PPUSH
73191: LD_VAR 0 2
73195: PUSH
73196: LD_VAR 0 9
73200: ARRAY
73201: PUSH
73202: LD_INT 2
73204: ARRAY
73205: PPUSH
73206: CALL_OW 114
73210: GO 73226
// SetTag ( i , tag ) ;
73212: LD_VAR 0 4
73216: PPUSH
73217: LD_VAR 0 9
73221: PPUSH
73222: CALL_OW 109
// end else
73226: GO 73299
// if enemy then
73228: LD_VAR 0 5
73232: IFFALSE 73299
// begin if GetWeapon ( i ) = ru_time_lapser then
73234: LD_VAR 0 4
73238: PPUSH
73239: CALL_OW 264
73243: PUSH
73244: LD_INT 49
73246: EQUAL
73247: IFFALSE 73275
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73249: LD_VAR 0 4
73253: PPUSH
73254: LD_VAR 0 5
73258: PPUSH
73259: LD_VAR 0 4
73263: PPUSH
73264: CALL_OW 74
73268: PPUSH
73269: CALL_OW 112
73273: GO 73299
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73275: LD_VAR 0 4
73279: PPUSH
73280: LD_VAR 0 5
73284: PPUSH
73285: LD_VAR 0 4
73289: PPUSH
73290: CALL_OW 74
73294: PPUSH
73295: CALL 74374 0 2
// end ; end ;
73299: GO 72875
73301: POP
73302: POP
// end ;
73303: LD_VAR 0 3
73307: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73308: LD_INT 0
73310: PPUSH
73311: PPUSH
73312: PPUSH
// if not unit or IsInUnit ( unit ) then
73313: LD_VAR 0 1
73317: NOT
73318: PUSH
73319: LD_VAR 0 1
73323: PPUSH
73324: CALL_OW 310
73328: OR
73329: IFFALSE 73333
// exit ;
73331: GO 73424
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73333: LD_ADDR_VAR 0 4
73337: PUSH
73338: LD_VAR 0 1
73342: PPUSH
73343: CALL_OW 250
73347: PPUSH
73348: LD_VAR 0 2
73352: PPUSH
73353: LD_INT 1
73355: PPUSH
73356: CALL_OW 272
73360: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73361: LD_ADDR_VAR 0 5
73365: PUSH
73366: LD_VAR 0 1
73370: PPUSH
73371: CALL_OW 251
73375: PPUSH
73376: LD_VAR 0 2
73380: PPUSH
73381: LD_INT 1
73383: PPUSH
73384: CALL_OW 273
73388: ST_TO_ADDR
// if ValidHex ( x , y ) then
73389: LD_VAR 0 4
73393: PPUSH
73394: LD_VAR 0 5
73398: PPUSH
73399: CALL_OW 488
73403: IFFALSE 73424
// ComTurnXY ( unit , x , y ) ;
73405: LD_VAR 0 1
73409: PPUSH
73410: LD_VAR 0 4
73414: PPUSH
73415: LD_VAR 0 5
73419: PPUSH
73420: CALL_OW 118
// end ;
73424: LD_VAR 0 3
73428: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73429: LD_INT 0
73431: PPUSH
73432: PPUSH
// result := false ;
73433: LD_ADDR_VAR 0 3
73437: PUSH
73438: LD_INT 0
73440: ST_TO_ADDR
// if not units then
73441: LD_VAR 0 2
73445: NOT
73446: IFFALSE 73450
// exit ;
73448: GO 73495
// for i in units do
73450: LD_ADDR_VAR 0 4
73454: PUSH
73455: LD_VAR 0 2
73459: PUSH
73460: FOR_IN
73461: IFFALSE 73493
// if See ( side , i ) then
73463: LD_VAR 0 1
73467: PPUSH
73468: LD_VAR 0 4
73472: PPUSH
73473: CALL_OW 292
73477: IFFALSE 73491
// begin result := true ;
73479: LD_ADDR_VAR 0 3
73483: PUSH
73484: LD_INT 1
73486: ST_TO_ADDR
// exit ;
73487: POP
73488: POP
73489: GO 73495
// end ;
73491: GO 73460
73493: POP
73494: POP
// end ;
73495: LD_VAR 0 3
73499: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73500: LD_INT 0
73502: PPUSH
73503: PPUSH
73504: PPUSH
73505: PPUSH
// if not unit or not points then
73506: LD_VAR 0 1
73510: NOT
73511: PUSH
73512: LD_VAR 0 2
73516: NOT
73517: OR
73518: IFFALSE 73522
// exit ;
73520: GO 73612
// dist := 99999 ;
73522: LD_ADDR_VAR 0 5
73526: PUSH
73527: LD_INT 99999
73529: ST_TO_ADDR
// for i in points do
73530: LD_ADDR_VAR 0 4
73534: PUSH
73535: LD_VAR 0 2
73539: PUSH
73540: FOR_IN
73541: IFFALSE 73610
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73543: LD_ADDR_VAR 0 6
73547: PUSH
73548: LD_VAR 0 1
73552: PPUSH
73553: LD_VAR 0 4
73557: PUSH
73558: LD_INT 1
73560: ARRAY
73561: PPUSH
73562: LD_VAR 0 4
73566: PUSH
73567: LD_INT 2
73569: ARRAY
73570: PPUSH
73571: CALL_OW 297
73575: ST_TO_ADDR
// if tmpDist < dist then
73576: LD_VAR 0 6
73580: PUSH
73581: LD_VAR 0 5
73585: LESS
73586: IFFALSE 73608
// begin result := i ;
73588: LD_ADDR_VAR 0 3
73592: PUSH
73593: LD_VAR 0 4
73597: ST_TO_ADDR
// dist := tmpDist ;
73598: LD_ADDR_VAR 0 5
73602: PUSH
73603: LD_VAR 0 6
73607: ST_TO_ADDR
// end ; end ;
73608: GO 73540
73610: POP
73611: POP
// end ;
73612: LD_VAR 0 3
73616: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73617: LD_INT 0
73619: PPUSH
// uc_side := side ;
73620: LD_ADDR_OWVAR 20
73624: PUSH
73625: LD_VAR 0 1
73629: ST_TO_ADDR
// uc_nation := 3 ;
73630: LD_ADDR_OWVAR 21
73634: PUSH
73635: LD_INT 3
73637: ST_TO_ADDR
// vc_chassis := 25 ;
73638: LD_ADDR_OWVAR 37
73642: PUSH
73643: LD_INT 25
73645: ST_TO_ADDR
// vc_engine := engine_siberite ;
73646: LD_ADDR_OWVAR 39
73650: PUSH
73651: LD_INT 3
73653: ST_TO_ADDR
// vc_control := control_computer ;
73654: LD_ADDR_OWVAR 38
73658: PUSH
73659: LD_INT 3
73661: ST_TO_ADDR
// vc_weapon := 59 ;
73662: LD_ADDR_OWVAR 40
73666: PUSH
73667: LD_INT 59
73669: ST_TO_ADDR
// result := CreateVehicle ;
73670: LD_ADDR_VAR 0 5
73674: PUSH
73675: CALL_OW 45
73679: ST_TO_ADDR
// SetDir ( result , d ) ;
73680: LD_VAR 0 5
73684: PPUSH
73685: LD_VAR 0 4
73689: PPUSH
73690: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73694: LD_VAR 0 5
73698: PPUSH
73699: LD_VAR 0 2
73703: PPUSH
73704: LD_VAR 0 3
73708: PPUSH
73709: LD_INT 0
73711: PPUSH
73712: CALL_OW 48
// end ;
73716: LD_VAR 0 5
73720: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73721: LD_INT 0
73723: PPUSH
73724: PPUSH
73725: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73726: LD_ADDR_VAR 0 2
73730: PUSH
73731: LD_INT 0
73733: PUSH
73734: LD_INT 0
73736: PUSH
73737: LD_INT 0
73739: PUSH
73740: LD_INT 0
73742: PUSH
73743: EMPTY
73744: LIST
73745: LIST
73746: LIST
73747: LIST
73748: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73749: LD_VAR 0 1
73753: NOT
73754: PUSH
73755: LD_VAR 0 1
73759: PPUSH
73760: CALL_OW 264
73764: PUSH
73765: LD_INT 12
73767: PUSH
73768: LD_INT 51
73770: PUSH
73771: LD_INT 32
73773: PUSH
73774: LD_INT 89
73776: PUSH
73777: EMPTY
73778: LIST
73779: LIST
73780: LIST
73781: LIST
73782: IN
73783: NOT
73784: OR
73785: IFFALSE 73789
// exit ;
73787: GO 73887
// for i := 1 to 3 do
73789: LD_ADDR_VAR 0 3
73793: PUSH
73794: DOUBLE
73795: LD_INT 1
73797: DEC
73798: ST_TO_ADDR
73799: LD_INT 3
73801: PUSH
73802: FOR_TO
73803: IFFALSE 73885
// begin tmp := GetCargo ( cargo , i ) ;
73805: LD_ADDR_VAR 0 4
73809: PUSH
73810: LD_VAR 0 1
73814: PPUSH
73815: LD_VAR 0 3
73819: PPUSH
73820: CALL_OW 289
73824: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73825: LD_ADDR_VAR 0 2
73829: PUSH
73830: LD_VAR 0 2
73834: PPUSH
73835: LD_VAR 0 3
73839: PPUSH
73840: LD_VAR 0 4
73844: PPUSH
73845: CALL_OW 1
73849: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73850: LD_ADDR_VAR 0 2
73854: PUSH
73855: LD_VAR 0 2
73859: PPUSH
73860: LD_INT 4
73862: PPUSH
73863: LD_VAR 0 2
73867: PUSH
73868: LD_INT 4
73870: ARRAY
73871: PUSH
73872: LD_VAR 0 4
73876: PLUS
73877: PPUSH
73878: CALL_OW 1
73882: ST_TO_ADDR
// end ;
73883: GO 73802
73885: POP
73886: POP
// end ;
73887: LD_VAR 0 2
73891: RET
// export function Length ( array ) ; begin
73892: LD_INT 0
73894: PPUSH
// result := array + 0 ;
73895: LD_ADDR_VAR 0 2
73899: PUSH
73900: LD_VAR 0 1
73904: PUSH
73905: LD_INT 0
73907: PLUS
73908: ST_TO_ADDR
// end ;
73909: LD_VAR 0 2
73913: RET
// export function PrepareArray ( array ) ; begin
73914: LD_INT 0
73916: PPUSH
// result := array diff 0 ;
73917: LD_ADDR_VAR 0 2
73921: PUSH
73922: LD_VAR 0 1
73926: PUSH
73927: LD_INT 0
73929: DIFF
73930: ST_TO_ADDR
// if not result [ 1 ] then
73931: LD_VAR 0 2
73935: PUSH
73936: LD_INT 1
73938: ARRAY
73939: NOT
73940: IFFALSE 73960
// result := Delete ( result , 1 ) ;
73942: LD_ADDR_VAR 0 2
73946: PUSH
73947: LD_VAR 0 2
73951: PPUSH
73952: LD_INT 1
73954: PPUSH
73955: CALL_OW 3
73959: ST_TO_ADDR
// end ;
73960: LD_VAR 0 2
73964: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73965: LD_INT 0
73967: PPUSH
73968: PPUSH
73969: PPUSH
73970: PPUSH
// sibRocketRange := 25 ;
73971: LD_ADDR_VAR 0 6
73975: PUSH
73976: LD_INT 25
73978: ST_TO_ADDR
// result := false ;
73979: LD_ADDR_VAR 0 4
73983: PUSH
73984: LD_INT 0
73986: ST_TO_ADDR
// for i := 0 to 5 do
73987: LD_ADDR_VAR 0 5
73991: PUSH
73992: DOUBLE
73993: LD_INT 0
73995: DEC
73996: ST_TO_ADDR
73997: LD_INT 5
73999: PUSH
74000: FOR_TO
74001: IFFALSE 74068
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
74003: LD_VAR 0 1
74007: PPUSH
74008: LD_VAR 0 5
74012: PPUSH
74013: LD_VAR 0 6
74017: PPUSH
74018: CALL_OW 272
74022: PPUSH
74023: LD_VAR 0 2
74027: PPUSH
74028: LD_VAR 0 5
74032: PPUSH
74033: LD_VAR 0 6
74037: PPUSH
74038: CALL_OW 273
74042: PPUSH
74043: LD_VAR 0 3
74047: PPUSH
74048: CALL_OW 309
74052: IFFALSE 74066
// begin result := true ;
74054: LD_ADDR_VAR 0 4
74058: PUSH
74059: LD_INT 1
74061: ST_TO_ADDR
// exit ;
74062: POP
74063: POP
74064: GO 74070
// end ;
74066: GO 74000
74068: POP
74069: POP
// end ;
74070: LD_VAR 0 4
74074: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
74075: LD_INT 0
74077: PPUSH
74078: PPUSH
74079: PPUSH
// if btype = b_depot then
74080: LD_VAR 0 2
74084: PUSH
74085: LD_INT 0
74087: EQUAL
74088: IFFALSE 74100
// begin result := true ;
74090: LD_ADDR_VAR 0 3
74094: PUSH
74095: LD_INT 1
74097: ST_TO_ADDR
// exit ;
74098: GO 74216
// end ; pom := GetBase ( depot ) ;
74100: LD_ADDR_VAR 0 4
74104: PUSH
74105: LD_VAR 0 1
74109: PPUSH
74110: CALL_OW 274
74114: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
74115: LD_ADDR_VAR 0 5
74119: PUSH
74120: LD_VAR 0 2
74124: PPUSH
74125: LD_VAR 0 1
74129: PPUSH
74130: CALL_OW 248
74134: PPUSH
74135: CALL_OW 450
74139: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
74140: LD_ADDR_VAR 0 3
74144: PUSH
74145: LD_VAR 0 4
74149: PPUSH
74150: LD_INT 1
74152: PPUSH
74153: CALL_OW 275
74157: PUSH
74158: LD_VAR 0 5
74162: PUSH
74163: LD_INT 1
74165: ARRAY
74166: GREATEREQUAL
74167: PUSH
74168: LD_VAR 0 4
74172: PPUSH
74173: LD_INT 2
74175: PPUSH
74176: CALL_OW 275
74180: PUSH
74181: LD_VAR 0 5
74185: PUSH
74186: LD_INT 2
74188: ARRAY
74189: GREATEREQUAL
74190: AND
74191: PUSH
74192: LD_VAR 0 4
74196: PPUSH
74197: LD_INT 3
74199: PPUSH
74200: CALL_OW 275
74204: PUSH
74205: LD_VAR 0 5
74209: PUSH
74210: LD_INT 3
74212: ARRAY
74213: GREATEREQUAL
74214: AND
74215: ST_TO_ADDR
// end ;
74216: LD_VAR 0 3
74220: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
74221: LD_INT 0
74223: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
74224: LD_VAR 0 1
74228: PPUSH
74229: LD_VAR 0 2
74233: PPUSH
74234: LD_INT 0
74236: PPUSH
74237: LD_INT 0
74239: PPUSH
74240: LD_INT 1
74242: PPUSH
74243: LD_INT 0
74245: PPUSH
74246: CALL_OW 587
// end ;
74250: LD_VAR 0 3
74254: RET
// export function CenterOnNow ( unit ) ; begin
74255: LD_INT 0
74257: PPUSH
// result := IsInUnit ( unit ) ;
74258: LD_ADDR_VAR 0 2
74262: PUSH
74263: LD_VAR 0 1
74267: PPUSH
74268: CALL_OW 310
74272: ST_TO_ADDR
// if not result then
74273: LD_VAR 0 2
74277: NOT
74278: IFFALSE 74290
// result := unit ;
74280: LD_ADDR_VAR 0 2
74284: PUSH
74285: LD_VAR 0 1
74289: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
74290: LD_VAR 0 1
74294: PPUSH
74295: CALL_OW 87
// end ;
74299: LD_VAR 0 2
74303: RET
// export function ComMoveHex ( unit , hex ) ; begin
74304: LD_INT 0
74306: PPUSH
// if not hex then
74307: LD_VAR 0 2
74311: NOT
74312: IFFALSE 74316
// exit ;
74314: GO 74369
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
74316: LD_VAR 0 2
74320: PUSH
74321: LD_INT 1
74323: ARRAY
74324: PPUSH
74325: LD_VAR 0 2
74329: PUSH
74330: LD_INT 2
74332: ARRAY
74333: PPUSH
74334: CALL_OW 428
74338: IFFALSE 74342
// exit ;
74340: GO 74369
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
74342: LD_VAR 0 1
74346: PPUSH
74347: LD_VAR 0 2
74351: PUSH
74352: LD_INT 1
74354: ARRAY
74355: PPUSH
74356: LD_VAR 0 2
74360: PUSH
74361: LD_INT 2
74363: ARRAY
74364: PPUSH
74365: CALL_OW 111
// end ;
74369: LD_VAR 0 3
74373: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
74374: LD_INT 0
74376: PPUSH
74377: PPUSH
74378: PPUSH
// if not unit or not enemy then
74379: LD_VAR 0 1
74383: NOT
74384: PUSH
74385: LD_VAR 0 2
74389: NOT
74390: OR
74391: IFFALSE 74395
// exit ;
74393: GO 74519
// x := GetX ( enemy ) ;
74395: LD_ADDR_VAR 0 4
74399: PUSH
74400: LD_VAR 0 2
74404: PPUSH
74405: CALL_OW 250
74409: ST_TO_ADDR
// y := GetY ( enemy ) ;
74410: LD_ADDR_VAR 0 5
74414: PUSH
74415: LD_VAR 0 2
74419: PPUSH
74420: CALL_OW 251
74424: ST_TO_ADDR
// if ValidHex ( x , y ) then
74425: LD_VAR 0 4
74429: PPUSH
74430: LD_VAR 0 5
74434: PPUSH
74435: CALL_OW 488
74439: IFFALSE 74519
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
74441: LD_VAR 0 2
74445: PPUSH
74446: CALL_OW 247
74450: PUSH
74451: LD_INT 3
74453: PUSH
74454: LD_INT 2
74456: PUSH
74457: EMPTY
74458: LIST
74459: LIST
74460: IN
74461: PUSH
74462: LD_VAR 0 1
74466: PPUSH
74467: CALL_OW 255
74471: PPUSH
74472: LD_VAR 0 2
74476: PPUSH
74477: CALL_OW 292
74481: OR
74482: IFFALSE 74500
// ComAttackUnit ( unit , enemy ) else
74484: LD_VAR 0 1
74488: PPUSH
74489: LD_VAR 0 2
74493: PPUSH
74494: CALL_OW 115
74498: GO 74519
// ComAgressiveMove ( unit , x , y ) ;
74500: LD_VAR 0 1
74504: PPUSH
74505: LD_VAR 0 4
74509: PPUSH
74510: LD_VAR 0 5
74514: PPUSH
74515: CALL_OW 114
// end ;
74519: LD_VAR 0 3
74523: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
74524: LD_INT 0
74526: PPUSH
74527: PPUSH
74528: PPUSH
// list := AreaToList ( area , 0 ) ;
74529: LD_ADDR_VAR 0 5
74533: PUSH
74534: LD_VAR 0 1
74538: PPUSH
74539: LD_INT 0
74541: PPUSH
74542: CALL_OW 517
74546: ST_TO_ADDR
// if not list then
74547: LD_VAR 0 5
74551: NOT
74552: IFFALSE 74556
// exit ;
74554: GO 74686
// if all then
74556: LD_VAR 0 2
74560: IFFALSE 74648
// begin for i := 1 to list [ 1 ] do
74562: LD_ADDR_VAR 0 4
74566: PUSH
74567: DOUBLE
74568: LD_INT 1
74570: DEC
74571: ST_TO_ADDR
74572: LD_VAR 0 5
74576: PUSH
74577: LD_INT 1
74579: ARRAY
74580: PUSH
74581: FOR_TO
74582: IFFALSE 74644
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
74584: LD_ADDR_VAR 0 3
74588: PUSH
74589: LD_VAR 0 3
74593: PPUSH
74594: LD_VAR 0 3
74598: PUSH
74599: LD_INT 1
74601: PLUS
74602: PPUSH
74603: LD_VAR 0 5
74607: PUSH
74608: LD_INT 1
74610: ARRAY
74611: PUSH
74612: LD_VAR 0 4
74616: ARRAY
74617: PUSH
74618: LD_VAR 0 5
74622: PUSH
74623: LD_INT 2
74625: ARRAY
74626: PUSH
74627: LD_VAR 0 4
74631: ARRAY
74632: PUSH
74633: EMPTY
74634: LIST
74635: LIST
74636: PPUSH
74637: CALL_OW 1
74641: ST_TO_ADDR
74642: GO 74581
74644: POP
74645: POP
// exit ;
74646: GO 74686
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
74648: LD_ADDR_VAR 0 3
74652: PUSH
74653: LD_VAR 0 5
74657: PUSH
74658: LD_INT 1
74660: ARRAY
74661: PUSH
74662: LD_INT 1
74664: ARRAY
74665: PUSH
74666: LD_VAR 0 5
74670: PUSH
74671: LD_INT 2
74673: ARRAY
74674: PUSH
74675: LD_INT 1
74677: ARRAY
74678: PUSH
74679: EMPTY
74680: LIST
74681: LIST
74682: PUSH
74683: EMPTY
74684: LIST
74685: ST_TO_ADDR
// end ;
74686: LD_VAR 0 3
74690: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
74691: LD_INT 0
74693: PPUSH
74694: PPUSH
// list := AreaToList ( area , 0 ) ;
74695: LD_ADDR_VAR 0 4
74699: PUSH
74700: LD_VAR 0 1
74704: PPUSH
74705: LD_INT 0
74707: PPUSH
74708: CALL_OW 517
74712: ST_TO_ADDR
// if not list then
74713: LD_VAR 0 4
74717: NOT
74718: IFFALSE 74722
// exit ;
74720: GO 74763
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
74722: LD_ADDR_VAR 0 3
74726: PUSH
74727: LD_VAR 0 4
74731: PUSH
74732: LD_INT 1
74734: ARRAY
74735: PUSH
74736: LD_INT 1
74738: ARRAY
74739: PUSH
74740: LD_VAR 0 4
74744: PUSH
74745: LD_INT 2
74747: ARRAY
74748: PUSH
74749: LD_INT 1
74751: ARRAY
74752: PUSH
74753: LD_VAR 0 2
74757: PUSH
74758: EMPTY
74759: LIST
74760: LIST
74761: LIST
74762: ST_TO_ADDR
// end ;
74763: LD_VAR 0 3
74767: RET
// export function First ( array ) ; begin
74768: LD_INT 0
74770: PPUSH
// if not array then
74771: LD_VAR 0 1
74775: NOT
74776: IFFALSE 74780
// exit ;
74778: GO 74794
// result := array [ 1 ] ;
74780: LD_ADDR_VAR 0 2
74784: PUSH
74785: LD_VAR 0 1
74789: PUSH
74790: LD_INT 1
74792: ARRAY
74793: ST_TO_ADDR
// end ;
74794: LD_VAR 0 2
74798: RET
// export function Last ( array ) ; begin
74799: LD_INT 0
74801: PPUSH
// if not array then
74802: LD_VAR 0 1
74806: NOT
74807: IFFALSE 74811
// exit ;
74809: GO 74827
// result := array [ array ] ;
74811: LD_ADDR_VAR 0 2
74815: PUSH
74816: LD_VAR 0 1
74820: PUSH
74821: LD_VAR 0 1
74825: ARRAY
74826: ST_TO_ADDR
// end ;
74827: LD_VAR 0 2
74831: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
74832: LD_INT 0
74834: PPUSH
74835: PPUSH
// result := [ ] ;
74836: LD_ADDR_VAR 0 5
74840: PUSH
74841: EMPTY
74842: ST_TO_ADDR
// if not array then
74843: LD_VAR 0 1
74847: NOT
74848: IFFALSE 74852
// exit ;
74850: GO 74964
// for i := 1 to array do
74852: LD_ADDR_VAR 0 6
74856: PUSH
74857: DOUBLE
74858: LD_INT 1
74860: DEC
74861: ST_TO_ADDR
74862: LD_VAR 0 1
74866: PUSH
74867: FOR_TO
74868: IFFALSE 74962
// if array [ i ] [ index ] = value then
74870: LD_VAR 0 1
74874: PUSH
74875: LD_VAR 0 6
74879: ARRAY
74880: PUSH
74881: LD_VAR 0 2
74885: ARRAY
74886: PUSH
74887: LD_VAR 0 3
74891: EQUAL
74892: IFFALSE 74960
// begin if indexColumn then
74894: LD_VAR 0 4
74898: IFFALSE 74934
// result := Join ( result , array [ i ] [ indexColumn ] ) else
74900: LD_ADDR_VAR 0 5
74904: PUSH
74905: LD_VAR 0 5
74909: PPUSH
74910: LD_VAR 0 1
74914: PUSH
74915: LD_VAR 0 6
74919: ARRAY
74920: PUSH
74921: LD_VAR 0 4
74925: ARRAY
74926: PPUSH
74927: CALL 70152 0 2
74931: ST_TO_ADDR
74932: GO 74960
// result := Join ( result , array [ i ] ) ;
74934: LD_ADDR_VAR 0 5
74938: PUSH
74939: LD_VAR 0 5
74943: PPUSH
74944: LD_VAR 0 1
74948: PUSH
74949: LD_VAR 0 6
74953: ARRAY
74954: PPUSH
74955: CALL 70152 0 2
74959: ST_TO_ADDR
// end ;
74960: GO 74867
74962: POP
74963: POP
// end ;
74964: LD_VAR 0 5
74968: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
74969: LD_INT 0
74971: PPUSH
// if not vehicles or not parkingPoint then
74972: LD_VAR 0 1
74976: NOT
74977: PUSH
74978: LD_VAR 0 2
74982: NOT
74983: OR
74984: IFFALSE 74988
// exit ;
74986: GO 75086
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
74988: LD_ADDR_VAR 0 1
74992: PUSH
74993: LD_VAR 0 1
74997: PPUSH
74998: LD_INT 50
75000: PUSH
75001: EMPTY
75002: LIST
75003: PUSH
75004: LD_INT 3
75006: PUSH
75007: LD_INT 92
75009: PUSH
75010: LD_VAR 0 2
75014: PUSH
75015: LD_INT 1
75017: ARRAY
75018: PUSH
75019: LD_VAR 0 2
75023: PUSH
75024: LD_INT 2
75026: ARRAY
75027: PUSH
75028: LD_INT 8
75030: PUSH
75031: EMPTY
75032: LIST
75033: LIST
75034: LIST
75035: LIST
75036: PUSH
75037: EMPTY
75038: LIST
75039: LIST
75040: PUSH
75041: EMPTY
75042: LIST
75043: LIST
75044: PPUSH
75045: CALL_OW 72
75049: ST_TO_ADDR
// if not vehicles then
75050: LD_VAR 0 1
75054: NOT
75055: IFFALSE 75059
// exit ;
75057: GO 75086
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
75059: LD_VAR 0 1
75063: PPUSH
75064: LD_VAR 0 2
75068: PUSH
75069: LD_INT 1
75071: ARRAY
75072: PPUSH
75073: LD_VAR 0 2
75077: PUSH
75078: LD_INT 2
75080: ARRAY
75081: PPUSH
75082: CALL_OW 111
// end ;
75086: LD_VAR 0 3
75090: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
75091: LD_INT 0
75093: PPUSH
75094: PPUSH
75095: PPUSH
// if not side or not area then
75096: LD_VAR 0 1
75100: NOT
75101: PUSH
75102: LD_VAR 0 2
75106: NOT
75107: OR
75108: IFFALSE 75112
// exit ;
75110: GO 75231
// tmp := AreaToList ( area , 0 ) ;
75112: LD_ADDR_VAR 0 5
75116: PUSH
75117: LD_VAR 0 2
75121: PPUSH
75122: LD_INT 0
75124: PPUSH
75125: CALL_OW 517
75129: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
75130: LD_ADDR_VAR 0 4
75134: PUSH
75135: DOUBLE
75136: LD_INT 1
75138: DEC
75139: ST_TO_ADDR
75140: LD_VAR 0 5
75144: PUSH
75145: LD_INT 1
75147: ARRAY
75148: PUSH
75149: FOR_TO
75150: IFFALSE 75229
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
75152: LD_VAR 0 5
75156: PUSH
75157: LD_INT 1
75159: ARRAY
75160: PUSH
75161: LD_VAR 0 4
75165: ARRAY
75166: PPUSH
75167: LD_VAR 0 5
75171: PUSH
75172: LD_INT 2
75174: ARRAY
75175: PUSH
75176: LD_VAR 0 4
75180: ARRAY
75181: PPUSH
75182: CALL_OW 351
75186: IFFALSE 75227
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
75188: LD_VAR 0 5
75192: PUSH
75193: LD_INT 1
75195: ARRAY
75196: PUSH
75197: LD_VAR 0 4
75201: ARRAY
75202: PPUSH
75203: LD_VAR 0 5
75207: PUSH
75208: LD_INT 2
75210: ARRAY
75211: PUSH
75212: LD_VAR 0 4
75216: ARRAY
75217: PPUSH
75218: LD_VAR 0 1
75222: PPUSH
75223: CALL_OW 244
// end ;
75227: GO 75149
75229: POP
75230: POP
// end ; end_of_file
75231: LD_VAR 0 3
75235: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75236: LD_VAR 0 1
75240: PUSH
75241: LD_INT 200
75243: DOUBLE
75244: GREATEREQUAL
75245: IFFALSE 75253
75247: LD_INT 299
75249: DOUBLE
75250: LESSEQUAL
75251: IFTRUE 75255
75253: GO 75287
75255: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75256: LD_VAR 0 1
75260: PPUSH
75261: LD_VAR 0 2
75265: PPUSH
75266: LD_VAR 0 3
75270: PPUSH
75271: LD_VAR 0 4
75275: PPUSH
75276: LD_VAR 0 5
75280: PPUSH
75281: CALL 27721 0 5
75285: GO 75364
75287: LD_INT 300
75289: DOUBLE
75290: GREATEREQUAL
75291: IFFALSE 75299
75293: LD_INT 399
75295: DOUBLE
75296: LESSEQUAL
75297: IFTRUE 75301
75299: GO 75363
75301: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75302: LD_VAR 0 1
75306: PPUSH
75307: LD_VAR 0 2
75311: PPUSH
75312: LD_VAR 0 3
75316: PPUSH
75317: LD_VAR 0 4
75321: PPUSH
75322: LD_VAR 0 5
75326: PPUSH
75327: LD_VAR 0 6
75331: PPUSH
75332: LD_VAR 0 7
75336: PPUSH
75337: LD_VAR 0 8
75341: PPUSH
75342: LD_VAR 0 9
75346: PPUSH
75347: LD_VAR 0 10
75351: PPUSH
75352: LD_VAR 0 11
75356: PPUSH
75357: CALL 23709 0 11
75361: GO 75364
75363: POP
// end ;
75364: PPOPN 11
75366: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75367: LD_VAR 0 1
75371: PPUSH
75372: LD_VAR 0 2
75376: PPUSH
75377: LD_VAR 0 3
75381: PPUSH
75382: LD_VAR 0 4
75386: PPUSH
75387: LD_VAR 0 5
75391: PPUSH
75392: CALL 27186 0 5
// end ; end_of_file
75396: PPOPN 5
75398: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75399: LD_VAR 0 1
75403: PPUSH
75404: LD_VAR 0 2
75408: PPUSH
75409: LD_VAR 0 3
75413: PPUSH
75414: LD_VAR 0 4
75418: PPUSH
75419: LD_VAR 0 5
75423: PPUSH
75424: LD_VAR 0 6
75428: PPUSH
75429: CALL 11361 0 6
// end ;
75433: PPOPN 6
75435: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75436: LD_INT 0
75438: PPUSH
// begin if not units then
75439: LD_VAR 0 1
75443: NOT
75444: IFFALSE 75448
// exit ;
75446: GO 75448
// end ;
75448: PPOPN 7
75450: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75451: CALL 11248 0 0
// end ;
75455: PPOPN 1
75457: END
