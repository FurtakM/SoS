// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak = 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus = 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot = 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched = 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources = [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles = [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 = 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 = 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 = 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 = 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 = 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// mission_prefix = 13f_ ;
 154: LD_ADDR_EXP 34
 158: PUSH
 159: LD_STRING 13f_
 161: ST_TO_ADDR
// debugMode = 0 ;
 162: LD_ADDR_EXP 40
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// achivCounter := 0 ;
 170: LD_ADDR_EXP 41
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// if Difficulty = 1 then
 178: LD_OWVAR 67
 182: PUSH
 183: LD_INT 1
 185: EQUAL
 186: IFFALSE 195
// RemoveEnvironmentArea ( oilBlockArea ) ;
 188: LD_INT 15
 190: PPUSH
 191: CALL_OW 355
// PrepareVehicles ;
 195: CALL 1314 0 0
// PrepareHeroes ;
 199: CALL 571 0 0
// PrepareAmericansRandom ;
 203: CALL 1218 0 0
// PrepareDifficulty ;
 207: CALL 6279 0 0
// end ;
 211: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 212: LD_EXP 40
 216: PUSH
 217: LD_INT 1
 219: EQUAL
 220: IFFALSE 526
 222: GO 224
 224: DISABLE
 225: LD_INT 0
 227: PPUSH
// begin enable ;
 228: ENABLE
// fogoff ( true ) ;
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 236: LD_ADDR_VAR 0 1
 240: PUSH
 241: LD_INT 22
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: LD_INT 21
 253: PUSH
 254: LD_INT 1
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: PPUSH
 265: CALL_OW 69
 269: PUSH
 270: FOR_IN
 271: IFFALSE 287
// SetLives ( i , 1000 ) ;
 273: LD_VAR 0 1
 277: PPUSH
 278: LD_INT 1000
 280: PPUSH
 281: CALL_OW 234
 285: GO 270
 287: POP
 288: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 22
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: LD_INT 2
 306: PUSH
 307: LD_INT 30
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 30
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 366
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: CALL_OW 274
 353: PPUSH
 354: LD_INT 1
 356: PPUSH
 357: LD_INT 9999
 359: PPUSH
 360: CALL_OW 277
 364: GO 341
 366: POP
 367: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 30
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 30
 398: PUSH
 399: LD_INT 1
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 2
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 30
 477: PUSH
 478: LD_INT 1
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PPUSH
 494: CALL_OW 69
 498: PUSH
 499: FOR_IN
 500: IFFALSE 524
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 502: LD_VAR 0 1
 506: PPUSH
 507: CALL_OW 274
 511: PPUSH
 512: LD_INT 3
 514: PPUSH
 515: LD_INT 9999
 517: PPUSH
 518: CALL_OW 277
 522: GO 499
 524: POP
 525: POP
// end ;
 526: PPOPN 1
 528: END
// every 0 0$1 trigger achivCounter >= 2 do
 529: LD_EXP 41
 533: PUSH
 534: LD_INT 2
 536: GREATEREQUAL
 537: IFFALSE 549
 539: GO 541
 541: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 542: LD_STRING ACH_REMOTE
 544: PPUSH
 545: CALL_OW 543
 549: END
// every 0 0$1 trigger destroyCounter >= 30 do
 550: LD_EXP 42
 554: PUSH
 555: LD_INT 30
 557: GREATEREQUAL
 558: IFFALSE 570
 560: GO 562
 562: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 563: LD_STRING ACH_DEFMASTER
 565: PPUSH
 566: CALL_OW 543
 570: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
// uc_side = 1 ;
 577: LD_ADDR_OWVAR 20
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 585: LD_ADDR_EXP 1
 589: PUSH
 590: LD_STRING JMM
 592: PPUSH
 593: LD_EXP 40
 597: NOT
 598: PPUSH
 599: LD_STRING 13c_
 601: PPUSH
 602: CALL 32069 0 3
 606: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 607: LD_ADDR_EXP 2
 611: PUSH
 612: LD_STRING Stevens
 614: PPUSH
 615: LD_EXP 40
 619: NOT
 620: PPUSH
 621: LD_STRING 13c_
 623: PPUSH
 624: CALL 32069 0 3
 628: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 629: LD_ADDR_EXP 3
 633: PUSH
 634: LD_STRING Lisa
 636: PPUSH
 637: LD_EXP 40
 641: NOT
 642: PPUSH
 643: LD_STRING 13c_
 645: PPUSH
 646: CALL 32069 0 3
 650: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 651: LD_ADDR_EXP 4
 655: PUSH
 656: LD_STRING Donaldson
 658: PPUSH
 659: LD_EXP 40
 663: NOT
 664: PPUSH
 665: LD_STRING 13c_
 667: PPUSH
 668: CALL 32069 0 3
 672: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 673: LD_ADDR_EXP 5
 677: PUSH
 678: LD_STRING Bobby
 680: PPUSH
 681: LD_EXP 40
 685: NOT
 686: PPUSH
 687: LD_STRING 13c_
 689: PPUSH
 690: CALL 32069 0 3
 694: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 695: LD_ADDR_EXP 6
 699: PUSH
 700: LD_STRING Cyrus
 702: PPUSH
 703: LD_EXP 40
 707: NOT
 708: PPUSH
 709: LD_STRING 13c_
 711: PPUSH
 712: CALL 32069 0 3
 716: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 717: LD_ADDR_EXP 7
 721: PUSH
 722: LD_STRING Denis
 724: PPUSH
 725: LD_EXP 40
 729: NOT
 730: PPUSH
 731: LD_STRING 13c_
 733: PPUSH
 734: CALL 32069 0 3
 738: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 739: LD_ADDR_EXP 8
 743: PUSH
 744: LD_STRING Brown
 746: PPUSH
 747: LD_EXP 40
 751: NOT
 752: PPUSH
 753: LD_STRING 13c_
 755: PPUSH
 756: CALL 32069 0 3
 760: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 13c_ ) ;
 761: LD_ADDR_EXP 9
 765: PUSH
 766: LD_STRING Gladstone
 768: PPUSH
 769: LD_INT 1
 771: PPUSH
 772: LD_STRING 13c_
 774: PPUSH
 775: CALL 32069 0 3
 779: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 13c_ ) ;
 780: LD_ADDR_EXP 10
 784: PUSH
 785: LD_STRING Houten
 787: PPUSH
 788: LD_INT 1
 790: PPUSH
 791: LD_STRING 13c_
 793: PPUSH
 794: CALL 32069 0 3
 798: ST_TO_ADDR
// Cornel = PrepareUnit ( Cornel , true , 13c_ ) ;
 799: LD_ADDR_EXP 11
 803: PUSH
 804: LD_STRING Cornel
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_STRING 13c_
 812: PPUSH
 813: CALL 32069 0 3
 817: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 13c_ ) ;
 818: LD_ADDR_EXP 12
 822: PUSH
 823: LD_STRING Gary
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_STRING 13c_
 831: PPUSH
 832: CALL 32069 0 3
 836: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 13c_ ) ;
 837: LD_ADDR_EXP 13
 841: PUSH
 842: LD_STRING Frank
 844: PPUSH
 845: LD_INT 1
 847: PPUSH
 848: LD_STRING 13c_
 850: PPUSH
 851: CALL 32069 0 3
 855: ST_TO_ADDR
// Kikuchi = PrepareUnit ( Kikuchi , true , 13c_ ) ;
 856: LD_ADDR_EXP 14
 860: PUSH
 861: LD_STRING Kikuchi
 863: PPUSH
 864: LD_INT 1
 866: PPUSH
 867: LD_STRING 13c_
 869: PPUSH
 870: CALL 32069 0 3
 874: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 875: LD_ADDR_EXP 15
 879: PUSH
 880: LD_STRING Powell
 882: PPUSH
 883: LD_INT 0
 885: PPUSH
 886: LD_STRING 
 888: PPUSH
 889: CALL 32069 0 3
 893: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 894: LD_ADDR_VAR 0 2
 898: PUSH
 899: LD_EXP 1
 903: PUSH
 904: LD_EXP 2
 908: PUSH
 909: LD_EXP 3
 913: PUSH
 914: LD_EXP 4
 918: PUSH
 919: LD_EXP 5
 923: PUSH
 924: LD_EXP 6
 928: PUSH
 929: LD_EXP 7
 933: PUSH
 934: LD_EXP 8
 938: PUSH
 939: LD_EXP 9
 943: PUSH
 944: LD_EXP 10
 948: PUSH
 949: LD_EXP 11
 953: PUSH
 954: LD_EXP 12
 958: PUSH
 959: LD_EXP 13
 963: PUSH
 964: LD_EXP 14
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 985: LD_ADDR_VAR 0 3
 989: PUSH
 990: LD_INT 22
 992: PUSH
 993: LD_INT 1
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 33
1002: PUSH
1003: LD_INT 1
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 21
1012: PUSH
1013: LD_INT 2
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: LIST
1024: PPUSH
1025: CALL_OW 69
1029: ST_TO_ADDR
// for i = tmp downto 1 do
1030: LD_ADDR_VAR 0 4
1034: PUSH
1035: DOUBLE
1036: LD_VAR 0 2
1040: INC
1041: ST_TO_ADDR
1042: LD_INT 1
1044: PUSH
1045: FOR_DOWNTO
1046: IFFALSE 1083
// if not tmp [ i ] then
1048: LD_VAR 0 2
1052: PUSH
1053: LD_VAR 0 4
1057: ARRAY
1058: NOT
1059: IFFALSE 1081
// tmp := Delete ( tmp , i ) ;
1061: LD_ADDR_VAR 0 2
1065: PUSH
1066: LD_VAR 0 2
1070: PPUSH
1071: LD_VAR 0 4
1075: PPUSH
1076: CALL_OW 3
1080: ST_TO_ADDR
1081: GO 1045
1083: POP
1084: POP
// for i = 1 to tmp do
1085: LD_ADDR_VAR 0 4
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_VAR 0 2
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1131
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1103: LD_VAR 0 2
1107: PUSH
1108: LD_VAR 0 4
1112: ARRAY
1113: PPUSH
1114: LD_VAR 0 3
1118: PUSH
1119: LD_VAR 0 4
1123: ARRAY
1124: PPUSH
1125: CALL_OW 52
1129: GO 1100
1131: POP
1132: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1133: LD_INT 22
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 25
1145: PUSH
1146: LD_INT 2
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: PPUSH
1157: CALL_OW 69
1161: PUSH
1162: LD_INT 0
1164: EQUAL
1165: PUSH
1166: LD_INT 22
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 34
1178: PUSH
1179: LD_INT 13
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PPUSH
1190: CALL_OW 69
1194: PUSH
1195: LD_INT 0
1197: EQUAL
1198: AND
1199: IFFALSE 1213
// SetClass ( JMM , 2 ) ;
1201: LD_EXP 1
1205: PPUSH
1206: LD_INT 2
1208: PPUSH
1209: CALL_OW 336
// end ;
1213: LD_VAR 0 1
1217: RET
// export function PrepareAmericansRandom ; var i ; begin
1218: LD_INT 0
1220: PPUSH
1221: PPUSH
// uc_side = 1 ;
1222: LD_ADDR_OWVAR 20
1226: PUSH
1227: LD_INT 1
1229: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1230: LD_ADDR_EXP 16
1234: PUSH
1235: LD_STRING 13c_others
1237: PPUSH
1238: CALL_OW 31
1242: ST_TO_ADDR
// for i in others13 do
1243: LD_ADDR_VAR 0 2
1247: PUSH
1248: LD_EXP 16
1252: PUSH
1253: FOR_IN
1254: IFFALSE 1307
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1256: LD_VAR 0 2
1260: PPUSH
1261: LD_INT 22
1263: PUSH
1264: LD_INT 1
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 21
1273: PUSH
1274: LD_INT 2
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: LD_INT 58
1283: PUSH
1284: EMPTY
1285: LIST
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 69
1296: PUSH
1297: LD_INT 1
1299: ARRAY
1300: PPUSH
1301: CALL_OW 52
1305: GO 1253
1307: POP
1308: POP
// end ;
1309: LD_VAR 0 1
1313: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1314: LD_INT 0
1316: PPUSH
1317: PPUSH
1318: PPUSH
1319: PPUSH
1320: PPUSH
1321: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1322: LD_ADDR_VAR 0 5
1326: PUSH
1327: LD_STRING 13_VehiclesIn13_1
1329: PPUSH
1330: LD_INT 1
1332: PUSH
1333: LD_INT 5
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: LD_INT 1
1341: PUSH
1342: LD_INT 6
1344: PUSH
1345: LD_INT 100
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 1
1358: PUSH
1359: LD_INT 5
1361: PUSH
1362: LD_INT 3
1364: PUSH
1365: LD_INT 1
1367: PUSH
1368: LD_INT 6
1370: PUSH
1371: LD_INT 100
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 1
1384: PUSH
1385: LD_INT 5
1387: PUSH
1388: LD_INT 3
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: LD_INT 6
1396: PUSH
1397: LD_INT 100
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 1
1410: PUSH
1411: LD_INT 5
1413: PUSH
1414: LD_INT 3
1416: PUSH
1417: LD_INT 1
1419: PUSH
1420: LD_INT 6
1422: PUSH
1423: LD_INT 100
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 1
1436: PUSH
1437: LD_INT 5
1439: PUSH
1440: LD_INT 3
1442: PUSH
1443: LD_INT 1
1445: PUSH
1446: LD_INT 6
1448: PUSH
1449: LD_INT 100
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 1
1462: PUSH
1463: LD_INT 5
1465: PUSH
1466: LD_INT 3
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: LD_INT 6
1474: PUSH
1475: LD_INT 100
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 1
1488: PUSH
1489: LD_INT 5
1491: PUSH
1492: LD_INT 3
1494: PUSH
1495: LD_INT 1
1497: PUSH
1498: LD_INT 6
1500: PUSH
1501: LD_INT 100
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 1
1514: PUSH
1515: LD_INT 5
1517: PUSH
1518: LD_INT 3
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 6
1526: PUSH
1527: LD_INT 100
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: PPUSH
1548: CALL_OW 30
1552: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1553: LD_ADDR_EXP 24
1557: PUSH
1558: LD_STRING 13_ResourcesInCargo13_1
1560: PPUSH
1561: EMPTY
1562: PPUSH
1563: CALL_OW 30
1567: ST_TO_ADDR
// cargoList = [ ] ;
1568: LD_ADDR_VAR 0 6
1572: PUSH
1573: EMPTY
1574: ST_TO_ADDR
// uc_side = 1 ;
1575: LD_ADDR_OWVAR 20
1579: PUSH
1580: LD_INT 1
1582: ST_TO_ADDR
// if vehicles then
1583: LD_VAR 0 5
1587: IFFALSE 1934
// begin for i := 1 to vehicles do
1589: LD_ADDR_VAR 0 2
1593: PUSH
1594: DOUBLE
1595: LD_INT 1
1597: DEC
1598: ST_TO_ADDR
1599: LD_VAR 0 5
1603: PUSH
1604: FOR_TO
1605: IFFALSE 1754
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1607: LD_ADDR_OWVAR 21
1611: PUSH
1612: LD_VAR 0 5
1616: PUSH
1617: LD_VAR 0 2
1621: ARRAY
1622: PUSH
1623: LD_INT 1
1625: ARRAY
1626: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1627: LD_ADDR_OWVAR 37
1631: PUSH
1632: LD_VAR 0 5
1636: PUSH
1637: LD_VAR 0 2
1641: ARRAY
1642: PUSH
1643: LD_INT 2
1645: ARRAY
1646: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1647: LD_ADDR_OWVAR 39
1651: PUSH
1652: LD_VAR 0 5
1656: PUSH
1657: LD_VAR 0 2
1661: ARRAY
1662: PUSH
1663: LD_INT 3
1665: ARRAY
1666: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1667: LD_ADDR_OWVAR 38
1671: PUSH
1672: LD_VAR 0 5
1676: PUSH
1677: LD_VAR 0 2
1681: ARRAY
1682: PUSH
1683: LD_INT 4
1685: ARRAY
1686: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1687: LD_ADDR_OWVAR 40
1691: PUSH
1692: LD_VAR 0 5
1696: PUSH
1697: LD_VAR 0 2
1701: ARRAY
1702: PUSH
1703: LD_INT 5
1705: ARRAY
1706: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1707: LD_ADDR_OWVAR 41
1711: PUSH
1712: LD_INT 40
1714: ST_TO_ADDR
// veh = CreateVehicle ;
1715: LD_ADDR_VAR 0 4
1719: PUSH
1720: CALL_OW 45
1724: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1725: LD_VAR 0 4
1729: PPUSH
1730: LD_INT 3
1732: PPUSH
1733: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1737: LD_VAR 0 4
1741: PPUSH
1742: LD_INT 2
1744: PPUSH
1745: LD_INT 0
1747: PPUSH
1748: CALL_OW 49
// end ;
1752: GO 1604
1754: POP
1755: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1756: LD_ADDR_VAR 0 6
1760: PUSH
1761: LD_INT 22
1763: PUSH
1764: LD_INT 1
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: PUSH
1771: LD_INT 21
1773: PUSH
1774: LD_INT 2
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 34
1783: PUSH
1784: LD_INT 12
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: PPUSH
1796: CALL_OW 69
1800: ST_TO_ADDR
// if cargoList then
1801: LD_VAR 0 6
1805: IFFALSE 1934
// for i = 1 to cargoList do
1807: LD_ADDR_VAR 0 2
1811: PUSH
1812: DOUBLE
1813: LD_INT 1
1815: DEC
1816: ST_TO_ADDR
1817: LD_VAR 0 6
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1932
// begin if resources then
1825: LD_EXP 24
1829: IFFALSE 1930
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1831: LD_VAR 0 6
1835: PUSH
1836: LD_VAR 0 2
1840: ARRAY
1841: PPUSH
1842: LD_INT 1
1844: PPUSH
1845: LD_EXP 24
1849: PUSH
1850: LD_VAR 0 2
1854: ARRAY
1855: PUSH
1856: LD_INT 1
1858: ARRAY
1859: PPUSH
1860: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1864: LD_VAR 0 6
1868: PUSH
1869: LD_VAR 0 2
1873: ARRAY
1874: PPUSH
1875: LD_INT 2
1877: PPUSH
1878: LD_EXP 24
1882: PUSH
1883: LD_VAR 0 2
1887: ARRAY
1888: PUSH
1889: LD_INT 2
1891: ARRAY
1892: PPUSH
1893: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1897: LD_VAR 0 6
1901: PUSH
1902: LD_VAR 0 2
1906: ARRAY
1907: PPUSH
1908: LD_INT 3
1910: PPUSH
1911: LD_EXP 24
1915: PUSH
1916: LD_VAR 0 2
1920: ARRAY
1921: PUSH
1922: LD_INT 3
1924: ARRAY
1925: PPUSH
1926: CALL_OW 291
// end ; end ;
1930: GO 1822
1932: POP
1933: POP
// end ; end ;
1934: LD_VAR 0 1
1938: RET
// export function PowellSupport ; var i , veh , un ; begin
1939: LD_INT 0
1941: PPUSH
1942: PPUSH
1943: PPUSH
1944: PPUSH
// for i = 1 to 3 do
1945: LD_ADDR_VAR 0 2
1949: PUSH
1950: DOUBLE
1951: LD_INT 1
1953: DEC
1954: ST_TO_ADDR
1955: LD_INT 3
1957: PUSH
1958: FOR_TO
1959: IFFALSE 2160
// begin uc_nation = 1 ;
1961: LD_ADDR_OWVAR 21
1965: PUSH
1966: LD_INT 1
1968: ST_TO_ADDR
// uc_side = 1 ;
1969: LD_ADDR_OWVAR 20
1973: PUSH
1974: LD_INT 1
1976: ST_TO_ADDR
// vc_engine = 3 ;
1977: LD_ADDR_OWVAR 39
1981: PUSH
1982: LD_INT 3
1984: ST_TO_ADDR
// vc_control = 1 ;
1985: LD_ADDR_OWVAR 38
1989: PUSH
1990: LD_INT 1
1992: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1993: LD_ADDR_OWVAR 40
1997: PUSH
1998: LD_INT 9
2000: PUSH
2001: LD_INT 5
2003: PUSH
2004: LD_INT 4
2006: PUSH
2007: LD_INT 7
2009: PUSH
2010: LD_INT 6
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 1
2022: PPUSH
2023: LD_INT 5
2025: PPUSH
2026: CALL_OW 12
2030: ARRAY
2031: ST_TO_ADDR
// if vc_weapon = 6 then
2032: LD_OWVAR 40
2036: PUSH
2037: LD_INT 6
2039: EQUAL
2040: IFFALSE 2052
// vc_chassis = 4 else
2042: LD_ADDR_OWVAR 37
2046: PUSH
2047: LD_INT 4
2049: ST_TO_ADDR
2050: GO 2060
// vc_chassis = 3 ;
2052: LD_ADDR_OWVAR 37
2056: PUSH
2057: LD_INT 3
2059: ST_TO_ADDR
// veh = CreateVehicle ;
2060: LD_ADDR_VAR 0 3
2064: PUSH
2065: CALL_OW 45
2069: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2070: LD_VAR 0 3
2074: PPUSH
2075: LD_INT 2
2077: PPUSH
2078: LD_INT 0
2080: PPUSH
2081: CALL_OW 49
// SetDir ( veh , 1 ) ;
2085: LD_VAR 0 3
2089: PPUSH
2090: LD_INT 1
2092: PPUSH
2093: CALL_OW 233
// hc_gallery =  ;
2097: LD_ADDR_OWVAR 33
2101: PUSH
2102: LD_STRING 
2104: ST_TO_ADDR
// hc_name =  ;
2105: LD_ADDR_OWVAR 26
2109: PUSH
2110: LD_STRING 
2112: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
2113: LD_INT 0
2115: PPUSH
2116: LD_INT 3
2118: PPUSH
2119: LD_INT 7
2121: PPUSH
2122: LD_INT 10
2124: PPUSH
2125: CALL_OW 12
2129: PPUSH
2130: CALL_OW 380
// un = CreateHuman ;
2134: LD_ADDR_VAR 0 4
2138: PUSH
2139: CALL_OW 44
2143: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2144: LD_VAR 0 4
2148: PPUSH
2149: LD_VAR 0 3
2153: PPUSH
2154: CALL_OW 52
// end ;
2158: GO 1958
2160: POP
2161: POP
// end ; end_of_file
2162: LD_VAR 0 1
2166: RET
// export function PrepareBurlak ; begin
2167: LD_INT 0
2169: PPUSH
// uc_side = 7 ;
2170: LD_ADDR_OWVAR 20
2174: PUSH
2175: LD_INT 7
2177: ST_TO_ADDR
// uc_nation = 3 ;
2178: LD_ADDR_OWVAR 21
2182: PUSH
2183: LD_INT 3
2185: ST_TO_ADDR
// vc_engine = 3 ;
2186: LD_ADDR_OWVAR 39
2190: PUSH
2191: LD_INT 3
2193: ST_TO_ADDR
// vc_control = 1 ;
2194: LD_ADDR_OWVAR 38
2198: PUSH
2199: LD_INT 1
2201: ST_TO_ADDR
// vc_weapon = 46 ;
2202: LD_ADDR_OWVAR 40
2206: PUSH
2207: LD_INT 46
2209: ST_TO_ADDR
// vc_chassis = 24 ;
2210: LD_ADDR_OWVAR 37
2214: PUSH
2215: LD_INT 24
2217: ST_TO_ADDR
// Masha = CreateVehicle ;
2218: LD_ADDR_EXP 18
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2228: LD_EXP 18
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: LD_INT 0
2238: PPUSH
2239: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2243: LD_EXP 18
2247: PPUSH
2248: LD_INT 1
2250: PPUSH
2251: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2255: LD_ADDR_EXP 17
2259: PUSH
2260: LD_STRING Burlak
2262: PPUSH
2263: LD_INT 0
2265: PPUSH
2266: LD_STRING 
2268: PPUSH
2269: CALL 32069 0 3
2273: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2274: LD_EXP 17
2278: PPUSH
2279: LD_EXP 18
2283: PPUSH
2284: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2288: LD_EXP 18
2292: PPUSH
2293: LD_INT 107
2295: PPUSH
2296: LD_INT 118
2298: PPUSH
2299: CALL_OW 114
// spawnBurlak = 1 ;
2303: LD_ADDR_EXP 27
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// end ;
2311: LD_VAR 0 1
2315: RET
// export function BurlakArmy ; var i , veh , tmp ; begin
2316: LD_INT 0
2318: PPUSH
2319: PPUSH
2320: PPUSH
2321: PPUSH
// uc_side = 7 ;
2322: LD_ADDR_OWVAR 20
2326: PUSH
2327: LD_INT 7
2329: ST_TO_ADDR
// uc_nation = 3 ;
2330: LD_ADDR_OWVAR 21
2334: PUSH
2335: LD_INT 3
2337: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ,  ) ;
2338: LD_ADDR_EXP 19
2342: PUSH
2343: LD_STRING Gnyevko
2345: PPUSH
2346: LD_INT 0
2348: PPUSH
2349: LD_STRING 
2351: PPUSH
2352: CALL 32069 0 3
2356: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ,  ) ;
2357: LD_ADDR_EXP 20
2361: PUSH
2362: LD_STRING Titov
2364: PPUSH
2365: LD_INT 0
2367: PPUSH
2368: LD_STRING 
2370: PPUSH
2371: CALL 32069 0 3
2375: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ,  ) ;
2376: LD_ADDR_EXP 21
2380: PUSH
2381: LD_STRING Xavier2
2383: PPUSH
2384: LD_INT 0
2386: PPUSH
2387: LD_STRING 
2389: PPUSH
2390: CALL 32069 0 3
2394: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ,  ) ;
2395: LD_ADDR_EXP 22
2399: PUSH
2400: LD_STRING Belkov
2402: PPUSH
2403: LD_INT 0
2405: PPUSH
2406: LD_STRING 
2408: PPUSH
2409: CALL 32069 0 3
2413: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ,  ) ;
2414: LD_ADDR_EXP 23
2418: PUSH
2419: LD_STRING Lipshchin
2421: PPUSH
2422: LD_INT 0
2424: PPUSH
2425: LD_STRING 
2427: PPUSH
2428: CALL 32069 0 3
2432: ST_TO_ADDR
// for i = 1 to 5 do
2433: LD_ADDR_VAR 0 2
2437: PUSH
2438: DOUBLE
2439: LD_INT 1
2441: DEC
2442: ST_TO_ADDR
2443: LD_INT 5
2445: PUSH
2446: FOR_TO
2447: IFFALSE 2535
// begin vc_engine = 3 ;
2449: LD_ADDR_OWVAR 39
2453: PUSH
2454: LD_INT 3
2456: ST_TO_ADDR
// vc_control = 1 ;
2457: LD_ADDR_OWVAR 38
2461: PUSH
2462: LD_INT 1
2464: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2465: LD_ADDR_OWVAR 40
2469: PUSH
2470: LD_INT 43
2472: PUSH
2473: LD_INT 44
2475: PUSH
2476: LD_INT 45
2478: PUSH
2479: LD_INT 49
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: PUSH
2488: LD_INT 1
2490: PPUSH
2491: LD_INT 4
2493: PPUSH
2494: CALL_OW 12
2498: ARRAY
2499: ST_TO_ADDR
// vc_chassis = 22 ;
2500: LD_ADDR_OWVAR 37
2504: PUSH
2505: LD_INT 22
2507: ST_TO_ADDR
// veh = CreateVehicle ;
2508: LD_ADDR_VAR 0 3
2512: PUSH
2513: CALL_OW 45
2517: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2518: LD_VAR 0 3
2522: PPUSH
2523: LD_INT 3
2525: PPUSH
2526: LD_INT 0
2528: PPUSH
2529: CALL_OW 49
// end ;
2533: GO 2446
2535: POP
2536: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2537: LD_ADDR_VAR 0 4
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 7
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 21
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 58
2564: PUSH
2565: EMPTY
2566: LIST
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: LIST
2572: PPUSH
2573: CALL_OW 69
2577: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2578: LD_EXP 19
2582: PPUSH
2583: LD_VAR 0 4
2587: PUSH
2588: LD_INT 1
2590: ARRAY
2591: PPUSH
2592: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2596: LD_EXP 20
2600: PPUSH
2601: LD_VAR 0 4
2605: PUSH
2606: LD_INT 2
2608: ARRAY
2609: PPUSH
2610: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2614: LD_EXP 21
2618: PPUSH
2619: LD_VAR 0 4
2623: PUSH
2624: LD_INT 3
2626: ARRAY
2627: PPUSH
2628: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2632: LD_EXP 22
2636: PPUSH
2637: LD_VAR 0 4
2641: PUSH
2642: LD_INT 4
2644: ARRAY
2645: PPUSH
2646: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2650: LD_EXP 23
2654: PPUSH
2655: LD_VAR 0 4
2659: PUSH
2660: LD_INT 5
2662: ARRAY
2663: PPUSH
2664: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2668: LD_EXP 19
2672: PPUSH
2673: LD_INT 3
2675: PPUSH
2676: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2680: LD_EXP 20
2684: PUSH
2685: LD_EXP 23
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: PPUSH
2694: LD_INT 9
2696: PPUSH
2697: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2701: LD_ADDR_VAR 0 4
2705: PUSH
2706: LD_INT 22
2708: PUSH
2709: LD_INT 7
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PPUSH
2716: CALL_OW 69
2720: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2721: LD_VAR 0 4
2725: PPUSH
2726: LD_INT 107
2728: PPUSH
2729: LD_INT 118
2731: PPUSH
2732: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2736: LD_INT 35
2738: PPUSH
2739: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , 49 ] ) , Masha ) ;
2743: LD_VAR 0 4
2747: PPUSH
2748: LD_INT 34
2750: PUSH
2751: LD_INT 49
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PPUSH
2758: CALL_OW 72
2762: PPUSH
2763: LD_EXP 18
2767: PPUSH
2768: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , 49 ] ] ) , 107 , 118 ) ;
2772: LD_VAR 0 4
2776: PPUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 34
2782: PUSH
2783: LD_INT 49
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: PPUSH
2794: CALL_OW 72
2798: PPUSH
2799: LD_INT 107
2801: PPUSH
2802: LD_INT 118
2804: PPUSH
2805: CALL_OW 114
// until UnitFilter ( tmp , [ f_weapon , 49 ] ) = 0 or IsDying ( Masha ) ;
2809: LD_VAR 0 4
2813: PPUSH
2814: LD_INT 34
2816: PUSH
2817: LD_INT 49
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PPUSH
2824: CALL_OW 72
2828: PUSH
2829: LD_INT 0
2831: EQUAL
2832: PUSH
2833: LD_EXP 18
2837: PPUSH
2838: CALL_OW 303
2842: OR
2843: IFFALSE 2736
// repeat wait ( 0 0$1 ) ;
2845: LD_INT 35
2847: PPUSH
2848: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
2852: LD_ADDR_VAR 0 4
2856: PUSH
2857: LD_INT 22
2859: PUSH
2860: LD_INT 7
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PPUSH
2867: CALL_OW 69
2871: PUSH
2872: LD_EXP 17
2876: DIFF
2877: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2878: LD_VAR 0 4
2882: PPUSH
2883: LD_INT 107
2885: PPUSH
2886: LD_INT 118
2888: PPUSH
2889: CALL_OW 114
// if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
2893: LD_EXP 17
2897: PPUSH
2898: CALL_OW 302
2902: PUSH
2903: LD_EXP 17
2907: PPUSH
2908: CALL_OW 310
2912: NOT
2913: AND
2914: IFFALSE 2931
// ComMoveXY ( Burlak , 107 , 118 ) ;
2916: LD_EXP 17
2920: PPUSH
2921: LD_INT 107
2923: PPUSH
2924: LD_INT 118
2926: PPUSH
2927: CALL_OW 111
// until not tmp ;
2931: LD_VAR 0 4
2935: NOT
2936: IFFALSE 2845
// end ; end_of_file
2938: LD_VAR 0 1
2942: RET
// every 15 15$0 trigger sibDeposits do var un , rnd ;
2943: LD_EXP 31
2947: IFFALSE 3123
2949: GO 2951
2951: DISABLE
2952: LD_INT 0
2954: PPUSH
2955: PPUSH
// begin enable ;
2956: ENABLE
// rnd = 0 ;
2957: LD_ADDR_VAR 0 2
2961: PUSH
2962: LD_INT 0
2964: ST_TO_ADDR
// uc_side = 8 ;
2965: LD_ADDR_OWVAR 20
2969: PUSH
2970: LD_INT 8
2972: ST_TO_ADDR
// uc_nation = 2 ;
2973: LD_ADDR_OWVAR 21
2977: PUSH
2978: LD_INT 2
2980: ST_TO_ADDR
// hc_name =  ;
2981: LD_ADDR_OWVAR 26
2985: PUSH
2986: LD_STRING 
2988: ST_TO_ADDR
// hc_gallery =  ;
2989: LD_ADDR_OWVAR 33
2993: PUSH
2994: LD_STRING 
2996: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
2997: LD_INT 0
2999: PPUSH
3000: LD_INT 4
3002: PPUSH
3003: LD_INT 10
3005: PPUSH
3006: CALL_OW 380
// un = CreateHuman ;
3010: LD_ADDR_VAR 0 1
3014: PUSH
3015: CALL_OW 44
3019: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3020: LD_VAR 0 1
3024: PPUSH
3025: LD_INT 8
3027: PUSH
3028: LD_INT 9
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 1
3037: PPUSH
3038: LD_INT 2
3040: PPUSH
3041: CALL_OW 12
3045: ARRAY
3046: PPUSH
3047: LD_INT 0
3049: PPUSH
3050: CALL_OW 49
// SetTag ( un , 1 ) ;
3054: LD_VAR 0 1
3058: PPUSH
3059: LD_INT 1
3061: PPUSH
3062: CALL_OW 109
// rnd = Rand ( 1 , sibDeposits ) ;
3066: LD_ADDR_VAR 0 2
3070: PUSH
3071: LD_INT 1
3073: PPUSH
3074: LD_EXP 31
3078: PPUSH
3079: CALL_OW 12
3083: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
3084: LD_VAR 0 1
3088: PPUSH
3089: LD_EXP 31
3093: PUSH
3094: LD_VAR 0 2
3098: ARRAY
3099: PUSH
3100: LD_INT 1
3102: ARRAY
3103: PPUSH
3104: LD_EXP 31
3108: PUSH
3109: LD_VAR 0 2
3113: ARRAY
3114: PUSH
3115: LD_INT 2
3117: ARRAY
3118: PPUSH
3119: CALL_OW 158
// end ;
3123: PPOPN 2
3125: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do var i ;
3126: LD_INT 22
3128: PUSH
3129: LD_INT 8
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 3
3138: PUSH
3139: LD_INT 61
3141: PUSH
3142: EMPTY
3143: LIST
3144: PUSH
3145: EMPTY
3146: LIST
3147: LIST
3148: PUSH
3149: LD_INT 33
3151: PUSH
3152: LD_INT 2
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PUSH
3159: EMPTY
3160: LIST
3161: LIST
3162: LIST
3163: PPUSH
3164: CALL_OW 69
3168: IFFALSE 3241
3170: GO 3172
3172: DISABLE
3173: LD_INT 0
3175: PPUSH
// begin enable ;
3176: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do
3177: LD_ADDR_VAR 0 1
3181: PUSH
3182: LD_INT 22
3184: PUSH
3185: LD_INT 8
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 61
3197: PUSH
3198: EMPTY
3199: LIST
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: LD_INT 33
3207: PUSH
3208: LD_INT 2
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: LIST
3219: PPUSH
3220: CALL_OW 69
3224: PUSH
3225: FOR_IN
3226: IFFALSE 3239
// Connect ( i ) ;
3228: LD_VAR 0 1
3232: PPUSH
3233: CALL 40026 0 1
3237: GO 3225
3239: POP
3240: POP
// end ; end_of_file
3241: PPOPN 1
3243: END
// every 1 do
3244: GO 3246
3246: DISABLE
// begin InGameOn ;
3247: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3251: LD_INT 22
3253: PUSH
3254: LD_INT 1
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 21
3263: PUSH
3264: LD_INT 2
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PPUSH
3275: CALL_OW 69
3279: PUSH
3280: LD_INT 1
3282: ARRAY
3283: PPUSH
3284: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
3288: LD_INT 22
3290: PUSH
3291: LD_INT 1
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PUSH
3298: LD_INT 21
3300: PUSH
3301: LD_INT 2
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PPUSH
3312: CALL_OW 69
3316: PPUSH
3317: LD_INT 69
3319: PPUSH
3320: LD_INT 94
3322: PPUSH
3323: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3327: LD_EXP 1
3331: PPUSH
3332: LD_STRING D2-JMM-1
3334: PPUSH
3335: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3339: LD_INT 22
3341: PUSH
3342: LD_INT 1
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 21
3351: PUSH
3352: LD_INT 2
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: LD_INT 1
3370: ARRAY
3371: PPUSH
3372: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3376: LD_EXP 2
3380: PPUSH
3381: LD_STRING D2-Huck-1
3383: PPUSH
3384: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3388: LD_INT 22
3390: PUSH
3391: LD_INT 1
3393: PUSH
3394: EMPTY
3395: LIST
3396: LIST
3397: PUSH
3398: LD_INT 21
3400: PUSH
3401: LD_INT 2
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PPUSH
3412: CALL_OW 69
3416: PUSH
3417: LD_INT 1
3419: ARRAY
3420: PPUSH
3421: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3425: LD_EXP 1
3429: PPUSH
3430: LD_STRING D2-JMM-2
3432: PPUSH
3433: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3437: LD_INT 22
3439: PUSH
3440: LD_INT 1
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: LD_INT 21
3449: PUSH
3450: LD_INT 2
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PPUSH
3461: CALL_OW 69
3465: PUSH
3466: LD_INT 1
3468: ARRAY
3469: PPUSH
3470: CALL_OW 87
// InGameOff ;
3474: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3478: LD_STRING M1
3480: PPUSH
3481: CALL_OW 337
// SaveForQuickRestart ;
3485: CALL_OW 22
// end ;
3489: END
// every 10 10$0 do
3490: GO 3492
3492: DISABLE
// begin DialogueOn ;
3493: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3497: LD_EXP 15
3501: PPUSH
3502: LD_STRING D3-Pow-1
3504: PPUSH
3505: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3509: LD_EXP 1
3513: PPUSH
3514: LD_STRING D3-JMM-1
3516: PPUSH
3517: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3521: LD_EXP 15
3525: PPUSH
3526: LD_STRING D3-Pow-2
3528: PPUSH
3529: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3533: LD_EXP 1
3537: PPUSH
3538: LD_STRING D3-JMM-2
3540: PPUSH
3541: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3545: LD_EXP 15
3549: PPUSH
3550: LD_STRING D3-Pow-3
3552: PPUSH
3553: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3557: LD_EXP 1
3561: PPUSH
3562: LD_STRING D3-JMM-3
3564: PPUSH
3565: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3569: LD_EXP 15
3573: PPUSH
3574: LD_STRING D3-Pow-4
3576: PPUSH
3577: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3581: LD_EXP 1
3585: PPUSH
3586: LD_STRING D3-JMM-4
3588: PPUSH
3589: CALL_OW 88
// DialogueOff ;
3593: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3597: LD_STRING M2
3599: PPUSH
3600: CALL_OW 337
// wait ( 2 2$30 ) ;
3604: LD_INT 5250
3606: PPUSH
3607: CALL_OW 67
// PrepareBurlak ;
3611: CALL 2167 0 0
// BurlakArmy ;
3615: CALL 2316 0 0
// end ;
3619: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3620: LD_INT 1
3622: PPUSH
3623: LD_EXP 18
3627: PPUSH
3628: CALL_OW 292
3632: IFFALSE 3791
3634: GO 3636
3636: DISABLE
// begin DialogueOn ;
3637: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3641: LD_EXP 18
3645: PPUSH
3646: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3650: LD_INT 22
3652: PUSH
3653: LD_INT 1
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: PUSH
3660: LD_INT 26
3662: PUSH
3663: LD_INT 1
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: PUSH
3670: LD_INT 2
3672: PUSH
3673: LD_INT 25
3675: PUSH
3676: LD_INT 1
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 25
3685: PUSH
3686: LD_INT 2
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: PUSH
3693: LD_INT 25
3695: PUSH
3696: LD_INT 3
3698: PUSH
3699: EMPTY
3700: LIST
3701: LIST
3702: PUSH
3703: LD_INT 25
3705: PUSH
3706: LD_INT 4
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: PUSH
3713: LD_INT 25
3715: PUSH
3716: LD_INT 5
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: PPUSH
3736: CALL_OW 69
3740: PPUSH
3741: LD_STRING D5-Sol1-1
3743: PPUSH
3744: LD_STRING D5-FSol1-1
3746: PPUSH
3747: CALL 6078 0 3
// Say ( JMM , D5-JMM-1 ) ;
3751: LD_EXP 1
3755: PPUSH
3756: LD_STRING D5-JMM-1
3758: PPUSH
3759: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3763: LD_EXP 17
3767: PPUSH
3768: LD_STRING DAmer-Bur-1
3770: PPUSH
3771: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3775: LD_EXP 1
3779: PPUSH
3780: LD_STRING DAmer-JMM-1
3782: PPUSH
3783: CALL_OW 88
// DialogueOff ;
3787: CALL_OW 7
// end ;
3791: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
3792: LD_INT 4
3794: PPUSH
3795: LD_INT 22
3797: PUSH
3798: LD_INT 7
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: PPUSH
3805: CALL_OW 70
3809: IFFALSE 4208
3811: GO 3813
3813: DISABLE
3814: LD_INT 0
3816: PPUSH
// begin enable ;
3817: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
3818: LD_ADDR_VAR 0 1
3822: PUSH
3823: LD_INT 4
3825: PPUSH
3826: LD_INT 22
3828: PUSH
3829: LD_INT 7
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PPUSH
3836: CALL_OW 70
3840: PUSH
3841: FOR_IN
3842: IFFALSE 4206
// begin if i = Burlak or i = Masha then
3844: LD_VAR 0 1
3848: PUSH
3849: LD_EXP 17
3853: EQUAL
3854: PUSH
3855: LD_VAR 0 1
3859: PUSH
3860: LD_EXP 18
3864: EQUAL
3865: OR
3866: IFFALSE 4013
// begin RemoveUnit ( i ) ;
3868: LD_VAR 0 1
3872: PPUSH
3873: CALL_OW 64
// DialogueOn ;
3877: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3881: LD_EXP 1
3885: PPUSH
3886: LD_STRING D5a-JMM-1
3888: PPUSH
3889: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3893: LD_INT 22
3895: PUSH
3896: LD_INT 1
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: PUSH
3903: LD_INT 26
3905: PUSH
3906: LD_INT 1
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: PUSH
3913: LD_INT 2
3915: PUSH
3916: LD_INT 25
3918: PUSH
3919: LD_INT 1
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: PUSH
3926: LD_INT 25
3928: PUSH
3929: LD_INT 2
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: PUSH
3936: LD_INT 25
3938: PUSH
3939: LD_INT 3
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: PUSH
3946: LD_INT 25
3948: PUSH
3949: LD_INT 4
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: PUSH
3956: LD_INT 25
3958: PUSH
3959: LD_INT 5
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: LIST
3978: PPUSH
3979: CALL_OW 69
3983: PPUSH
3984: LD_STRING D5a-Sol1-1
3986: PPUSH
3987: LD_STRING D5-FSol1-1
3989: PPUSH
3990: CALL 6078 0 3
// DialogueOff ;
3994: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
3998: LD_STRING M2b
4000: PPUSH
4001: CALL_OW 337
// spawnBurlak = 0 ;
4005: LD_ADDR_EXP 27
4009: PUSH
4010: LD_INT 0
4012: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
4013: LD_VAR 0 1
4017: PPUSH
4018: CALL_OW 247
4022: PUSH
4023: LD_INT 2
4025: EQUAL
4026: PUSH
4027: LD_VAR 0 1
4031: PPUSH
4032: CALL_OW 263
4036: PUSH
4037: LD_INT 1
4039: EQUAL
4040: AND
4041: IFFALSE 4169
// begin case IsDrivenBy ( i ) of Gnyevko :
4043: LD_VAR 0 1
4047: PPUSH
4048: CALL_OW 311
4052: PUSH
4053: LD_EXP 19
4057: DOUBLE
4058: EQUAL
4059: IFTRUE 4063
4061: GO 4076
4063: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
4064: LD_INT 1
4066: PPUSH
4067: LD_STRING 13_Gnyevko_1
4069: PPUSH
4070: CALL_OW 39
4074: GO 4169
4076: LD_EXP 20
4080: DOUBLE
4081: EQUAL
4082: IFTRUE 4086
4084: GO 4099
4086: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
4087: LD_INT 1
4089: PPUSH
4090: LD_STRING 13_Titov_1
4092: PPUSH
4093: CALL_OW 39
4097: GO 4169
4099: LD_EXP 21
4103: DOUBLE
4104: EQUAL
4105: IFTRUE 4109
4107: GO 4122
4109: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
4110: LD_INT 1
4112: PPUSH
4113: LD_STRING 13_Xavier_1
4115: PPUSH
4116: CALL_OW 39
4120: GO 4169
4122: LD_EXP 22
4126: DOUBLE
4127: EQUAL
4128: IFTRUE 4132
4130: GO 4145
4132: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
4133: LD_INT 1
4135: PPUSH
4136: LD_STRING 13_Belkov_1
4138: PPUSH
4139: CALL_OW 39
4143: GO 4169
4145: LD_EXP 23
4149: DOUBLE
4150: EQUAL
4151: IFTRUE 4155
4153: GO 4168
4155: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
4156: LD_INT 1
4158: PPUSH
4159: LD_STRING 13_Lipshchin_1
4161: PPUSH
4162: CALL_OW 39
4166: GO 4169
4168: POP
// end ; if GetWeapon ( i ) = 49 then
4169: LD_VAR 0 1
4173: PPUSH
4174: CALL_OW 264
4178: PUSH
4179: LD_INT 49
4181: EQUAL
4182: IFFALSE 4195
// DestroyUnit ( i ) else
4184: LD_VAR 0 1
4188: PPUSH
4189: CALL_OW 65
4193: GO 4204
// RemoveUnit ( i ) ;
4195: LD_VAR 0 1
4199: PPUSH
4200: CALL_OW 64
// end ;
4204: GO 3841
4206: POP
4207: POP
// end ;
4208: PPOPN 1
4210: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
4211: LD_EXP 17
4215: PPUSH
4216: CALL_OW 302
4220: PUSH
4221: LD_EXP 18
4225: PPUSH
4226: CALL_OW 256
4230: PUSH
4231: LD_INT 500
4233: LESS
4234: AND
4235: PUSH
4236: LD_EXP 18
4240: PPUSH
4241: CALL_OW 255
4245: PUSH
4246: LD_INT 7
4248: EQUAL
4249: AND
4250: IFFALSE 4270
4252: GO 4254
4254: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
4255: LD_EXP 17
4259: PPUSH
4260: LD_INT 107
4262: PPUSH
4263: LD_INT 118
4265: PPUSH
4266: CALL_OW 111
4270: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
4271: LD_EXP 17
4275: PPUSH
4276: CALL_OW 301
4280: PUSH
4281: LD_EXP 27
4285: PUSH
4286: LD_INT 1
4288: EQUAL
4289: AND
4290: IFFALSE 4423
4292: GO 4294
4294: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4295: LD_EXP 1
4299: PPUSH
4300: LD_STRING D5b-JMM-1
4302: PPUSH
4303: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
4307: LD_INT 22
4309: PUSH
4310: LD_INT 1
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: PUSH
4317: LD_INT 26
4319: PUSH
4320: LD_INT 1
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PUSH
4327: LD_INT 2
4329: PUSH
4330: LD_INT 25
4332: PUSH
4333: LD_INT 1
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: PUSH
4340: LD_INT 25
4342: PUSH
4343: LD_INT 2
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: PUSH
4350: LD_INT 25
4352: PUSH
4353: LD_INT 3
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: PUSH
4360: LD_INT 25
4362: PUSH
4363: LD_INT 4
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: PUSH
4370: LD_INT 25
4372: PUSH
4373: LD_INT 5
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: LIST
4392: PPUSH
4393: CALL_OW 69
4397: PPUSH
4398: LD_STRING D5b-Sol1-1
4400: PPUSH
4401: LD_STRING 
4403: PPUSH
4404: CALL 6078 0 3
// ChangeMissionObjectives ( M2a ) ;
4408: LD_STRING M2a
4410: PPUSH
4411: CALL_OW 337
// burlakStatus = 1 ;
4415: LD_ADDR_EXP 28
4419: PUSH
4420: LD_INT 1
4422: ST_TO_ADDR
// end ;
4423: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4424: LD_EXP 2
4428: PPUSH
4429: CALL_OW 301
4433: IFFALSE 4570
4435: GO 4437
4437: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4438: LD_EXP 1
4442: PPUSH
4443: LD_STRING D6-JMM-1
4445: PPUSH
4446: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
4450: LD_INT 22
4452: PUSH
4453: LD_INT 1
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 26
4462: PUSH
4463: LD_INT 1
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 2
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 1
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 25
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 25
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 25
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 25
4515: PUSH
4516: LD_INT 5
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 69
4540: PPUSH
4541: LD_STRING D6-Sol1-1
4543: PPUSH
4544: LD_STRING 
4546: PPUSH
4547: CALL 6078 0 3
// Say ( JMM , D6-JMM-2 ) ;
4551: LD_EXP 1
4555: PPUSH
4556: LD_STRING D6-JMM-2
4558: PPUSH
4559: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4563: LD_STRING M1a
4565: PPUSH
4566: CALL_OW 337
// end ;
4570: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4571: LD_INT 25
4573: PPUSH
4574: LD_INT 1
4576: PPUSH
4577: CALL_OW 321
4581: PUSH
4582: LD_INT 2
4584: EQUAL
4585: IFFALSE 4602
4587: GO 4589
4589: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4590: LD_EXP 2
4594: PPUSH
4595: LD_STRING D6-Huck-2
4597: PPUSH
4598: CALL_OW 88
// end ;
4602: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4603: LD_INT 22
4605: PUSH
4606: LD_INT 1
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: PUSH
4613: LD_INT 2
4615: PUSH
4616: LD_INT 34
4618: PUSH
4619: LD_INT 8
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: LD_INT 35
4628: PUSH
4629: LD_INT 8
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: LIST
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PPUSH
4645: CALL_OW 69
4649: PUSH
4650: LD_INT 0
4652: GREATER
4653: IFFALSE 4845
4655: GO 4657
4657: DISABLE
4658: LD_INT 0
4660: PPUSH
4661: PPUSH
// begin enable ;
4662: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4663: LD_ADDR_VAR 0 1
4667: PUSH
4668: LD_INT 5
4670: PPUSH
4671: LD_INT 22
4673: PUSH
4674: LD_INT 1
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: LD_INT 21
4683: PUSH
4684: LD_INT 3
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: LD_INT 30
4693: PUSH
4694: LD_INT 1
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: PUSH
4701: LD_INT 3
4703: PUSH
4704: LD_INT 57
4706: PUSH
4707: EMPTY
4708: LIST
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: PPUSH
4720: CALL_OW 70
4724: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4725: LD_ADDR_VAR 0 2
4729: PUSH
4730: LD_INT 5
4732: PPUSH
4733: LD_INT 22
4735: PUSH
4736: LD_INT 1
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: LD_INT 21
4745: PUSH
4746: LD_INT 3
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 30
4755: PUSH
4756: LD_INT 5
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 3
4765: PUSH
4766: LD_INT 57
4768: PUSH
4769: EMPTY
4770: LIST
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: PPUSH
4782: CALL_OW 70
4786: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4787: LD_VAR 0 1
4791: PUSH
4792: LD_INT 0
4794: GREATER
4795: PUSH
4796: LD_VAR 0 2
4800: PUSH
4801: LD_INT 0
4803: GREATER
4804: AND
4805: IFFALSE 4845
// begin disable ;
4807: DISABLE
// DialogueOn ;
4808: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4812: LD_EXP 1
4816: PPUSH
4817: LD_STRING D7-JMM-1
4819: PPUSH
4820: CALL_OW 88
// DialogueOff ;
4824: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4828: LD_STRING M4
4830: PPUSH
4831: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4835: LD_INT 5
4837: PPUSH
4838: LD_INT 0
4840: PPUSH
4841: CALL_OW 424
// end ; end ;
4845: PPOPN 2
4847: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4848: LD_INT 6
4850: PPUSH
4851: LD_INT 22
4853: PUSH
4854: LD_INT 1
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 25
4863: PUSH
4864: LD_INT 4
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PPUSH
4875: CALL_OW 70
4879: PUSH
4880: LD_INT 0
4882: GREATER
4883: PUSH
4884: LD_EXP 37
4888: PUSH
4889: LD_INT 1
4891: EQUAL
4892: AND
4893: PUSH
4894: LD_EXP 29
4898: PUSH
4899: LD_INT 0
4901: EQUAL
4902: AND
4903: IFFALSE 4968
4905: GO 4907
4907: DISABLE
// begin enable ;
4908: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4909: LD_ADDR_EXP 26
4913: PUSH
4914: LD_INT 6
4916: PPUSH
4917: LD_INT 22
4919: PUSH
4920: LD_INT 1
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: LD_INT 25
4929: PUSH
4930: LD_INT 4
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: PPUSH
4941: CALL_OW 70
4945: PUSH
4946: LD_INT 1
4948: ARRAY
4949: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4950: LD_INT 6
4952: PPUSH
4953: LD_INT 0
4955: PPUSH
4956: CALL_OW 424
// radationResearched = 1 ;
4960: LD_ADDR_EXP 29
4964: PUSH
4965: LD_INT 1
4967: ST_TO_ADDR
// end ;
4968: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4969: LD_EXP 26
4973: PPUSH
4974: CALL_OW 301
4978: PUSH
4979: LD_EXP 29
4983: PUSH
4984: LD_INT 1
4986: EQUAL
4987: AND
4988: IFFALSE 5024
4990: GO 4992
4992: DISABLE
// begin enable ;
4993: ENABLE
// radationResearched = 0 ;
4994: LD_ADDR_EXP 29
4998: PUSH
4999: LD_INT 0
5001: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5002: LD_INT 6
5004: PPUSH
5005: LD_INT 1
5007: PPUSH
5008: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
5012: LD_EXP 1
5016: PPUSH
5017: LD_STRING D9a-JMM-1
5019: PPUSH
5020: CALL_OW 88
// end ; end_of_file
5024: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
5025: LD_VAR 0 5
5029: PUSH
5030: LD_INT 8
5032: EQUAL
5033: PUSH
5034: LD_EXP 35
5038: PUSH
5039: LD_INT 0
5041: EQUAL
5042: AND
5043: IFFALSE 5096
// begin eventVar1 = 1 ;
5045: LD_ADDR_EXP 35
5049: PUSH
5050: LD_INT 1
5052: ST_TO_ADDR
// DialogueOn ;
5053: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
5057: LD_EXP 1
5061: PPUSH
5062: LD_STRING D6a-JMM-1
5064: PPUSH
5065: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
5069: LD_EXP 15
5073: PPUSH
5074: LD_STRING D6a-Pow-1
5076: PPUSH
5077: CALL_OW 94
// DialogueOff ;
5081: CALL_OW 7
// wait ( 3 3$0 ) ;
5085: LD_INT 6300
5087: PPUSH
5088: CALL_OW 67
// PowellSupport ;
5092: CALL 1939 0 0
// end ; end ;
5096: PPOPN 5
5098: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5099: LD_VAR 0 1
5103: PUSH
5104: LD_EXP 1
5108: EQUAL
5109: IFFALSE 5118
// YouLost ( JMM ) ;
5111: LD_STRING JMM
5113: PPUSH
5114: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
5118: LD_VAR 0 1
5122: PPUSH
5123: CALL_OW 264
5127: PUSH
5128: LD_INT 31
5130: EQUAL
5131: IFFALSE 5147
// achivCounter := achivCounter + 1 ;
5133: LD_ADDR_EXP 41
5137: PUSH
5138: LD_EXP 41
5142: PUSH
5143: LD_INT 1
5145: PLUS
5146: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
5147: LD_VAR 0 1
5151: PPUSH
5152: CALL_OW 255
5156: PUSH
5157: LD_INT 1
5159: NONEQUAL
5160: PUSH
5161: LD_VAR 0 1
5165: PPUSH
5166: CALL_OW 247
5170: PUSH
5171: LD_INT 2
5173: EQUAL
5174: AND
5175: IFFALSE 5191
// destroyCounter := destroyCounter + 1 ;
5177: LD_ADDR_EXP 42
5181: PUSH
5182: LD_EXP 42
5186: PUSH
5187: LD_INT 1
5189: PLUS
5190: ST_TO_ADDR
// end ;
5191: PPOPN 1
5193: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
5194: LD_VAR 0 2
5198: PUSH
5199: LD_EXP 18
5203: EQUAL
5204: IFFALSE 5213
// SetAchievement ( ACH_MASHA ) ;
5206: LD_STRING ACH_MASHA
5208: PPUSH
5209: CALL_OW 543
// end ;
5213: PPOPN 4
5215: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
5216: LD_VAR 0 1
5220: PPUSH
5221: CALL_OW 264
5225: PUSH
5226: LD_INT 8
5228: EQUAL
5229: PUSH
5230: LD_EXP 36
5234: PUSH
5235: LD_INT 0
5237: EQUAL
5238: AND
5239: IFFALSE 5308
// begin eventVar2 = 1 ;
5241: LD_ADDR_EXP 36
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// DialogueOn ;
5249: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
5253: LD_EXP 1
5257: PPUSH
5258: LD_STRING D6b-JMM-1
5260: PPUSH
5261: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
5265: LD_EXP 15
5269: PPUSH
5270: LD_STRING D6b-Pow-1
5272: PPUSH
5273: CALL_OW 94
// DialogueOff ;
5277: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
5281: LD_INT 5
5283: PPUSH
5284: LD_INT 1
5286: PPUSH
5287: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
5291: LD_INT 7
5293: PPUSH
5294: LD_INT 1
5296: PPUSH
5297: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
5301: LD_STRING M3
5303: PPUSH
5304: CALL_OW 337
// end ; end ;
5308: PPOPN 2
5310: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5311: LD_VAR 0 2
5315: PPUSH
5316: LD_VAR 0 3
5320: PPUSH
5321: LD_INT 5
5323: PPUSH
5324: CALL_OW 309
5328: PUSH
5329: LD_EXP 37
5333: PUSH
5334: LD_INT 0
5336: EQUAL
5337: AND
5338: IFFALSE 5567
// begin eventVar3 = 1 ;
5340: LD_ADDR_EXP 37
5344: PUSH
5345: LD_INT 1
5347: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5348: LD_INT 175
5350: PPUSH
5351: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5355: LD_INT 7
5357: PPUSH
5358: LD_INT 22
5360: PUSH
5361: LD_INT 1
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 21
5370: PUSH
5371: LD_INT 2
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: PUSH
5378: LD_INT 34
5380: PUSH
5381: LD_INT 11
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: LIST
5392: PPUSH
5393: CALL_OW 70
5397: PUSH
5398: LD_INT 0
5400: GREATER
5401: IFFALSE 5420
// begin radarOnSpot = 1 ;
5403: LD_ADDR_EXP 30
5407: PUSH
5408: LD_INT 1
5410: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5411: LD_STRING M3a
5413: PPUSH
5414: CALL_OW 337
// end else
5418: GO 5427
// begin ChangeMissionObjectives ( M3b ) ;
5420: LD_STRING M3b
5422: PPUSH
5423: CALL_OW 337
// end ; DialogueOn ;
5427: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5431: LD_EXP 2
5435: PPUSH
5436: LD_STRING D8-Huck-1
5438: PPUSH
5439: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5443: LD_EXP 1
5447: PPUSH
5448: LD_STRING D8-JMM-1
5450: PPUSH
5451: CALL_OW 88
// if IsOk ( Stevens ) then
5455: LD_EXP 2
5459: PPUSH
5460: CALL_OW 302
5464: IFFALSE 5526
// begin Say ( Stevens , D8-Huck-2 ) ;
5466: LD_EXP 2
5470: PPUSH
5471: LD_STRING D8-Huck-2
5473: PPUSH
5474: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5478: LD_EXP 1
5482: PPUSH
5483: LD_STRING D8-JMM-2
5485: PPUSH
5486: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5490: LD_EXP 2
5494: PPUSH
5495: LD_STRING D8-Huck-3
5497: PPUSH
5498: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5502: LD_EXP 1
5506: PPUSH
5507: LD_STRING D8-JMM-3
5509: PPUSH
5510: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5514: LD_EXP 2
5518: PPUSH
5519: LD_STRING D8-Huck-4
5521: PPUSH
5522: CALL_OW 88
// end ; DialogueOff ;
5526: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5530: LD_INT 5
5532: PPUSH
5533: LD_INT 0
5535: PPUSH
5536: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5540: LD_INT 7
5542: PPUSH
5543: LD_INT 0
5545: PPUSH
5546: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5550: LD_INT 6
5552: PPUSH
5553: LD_INT 1
5555: PPUSH
5556: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5560: LD_STRING M5
5562: PPUSH
5563: CALL_OW 337
// end ; end ;
5567: PPOPN 3
5569: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5570: LD_EXP 26
5574: PPUSH
5575: CALL_OW 302
5579: PUSH
5580: LD_VAR 0 2
5584: PUSH
5585: LD_EXP 26
5589: EQUAL
5590: AND
5591: PUSH
5592: LD_EXP 38
5596: PUSH
5597: LD_INT 0
5599: EQUAL
5600: AND
5601: PUSH
5602: LD_EXP 37
5606: PUSH
5607: LD_INT 1
5609: EQUAL
5610: AND
5611: IFFALSE 5657
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5613: LD_VAR 0 1
5617: PPUSH
5618: LD_INT 1
5620: PPUSH
5621: CALL_OW 268
5625: PUSH
5626: LD_INT 11
5628: EQUAL
5629: PUSH
5630: LD_VAR 0 1
5634: PPUSH
5635: LD_INT 2
5637: PPUSH
5638: CALL_OW 268
5642: PUSH
5643: LD_INT 11
5645: EQUAL
5646: OR
5647: IFFALSE 5657
// eventVar4 = 1 ;
5649: LD_ADDR_EXP 38
5653: PUSH
5654: LD_INT 1
5656: ST_TO_ADDR
// end ;
5657: PPOPN 2
5659: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5660: LD_INT 0
5662: PPUSH
5663: PPUSH
// begin if GetNation ( unit ) = 2 then
5664: LD_VAR 0 1
5668: PPUSH
5669: CALL_OW 248
5673: PUSH
5674: LD_INT 2
5676: EQUAL
5677: IFFALSE 5955
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5679: LD_ADDR_EXP 32
5683: PUSH
5684: LD_EXP 32
5688: PUSH
5689: LD_INT 1
5691: PLUS
5692: ST_TO_ADDR
// for i := 1 to sibDeposits do
5693: LD_ADDR_VAR 0 4
5697: PUSH
5698: DOUBLE
5699: LD_INT 1
5701: DEC
5702: ST_TO_ADDR
5703: LD_EXP 31
5707: PUSH
5708: FOR_TO
5709: IFFALSE 5811
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5711: LD_EXP 31
5715: PUSH
5716: LD_VAR 0 4
5720: ARRAY
5721: PUSH
5722: LD_INT 1
5724: ARRAY
5725: PUSH
5726: LD_VAR 0 2
5730: EQUAL
5731: PUSH
5732: LD_EXP 31
5736: PUSH
5737: LD_VAR 0 4
5741: ARRAY
5742: PUSH
5743: LD_INT 2
5745: ARRAY
5746: PUSH
5747: LD_VAR 0 3
5751: EQUAL
5752: AND
5753: IFFALSE 5809
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5755: LD_ADDR_EXP 31
5759: PUSH
5760: LD_EXP 31
5764: PPUSH
5765: LD_VAR 0 4
5769: PUSH
5770: EMPTY
5771: LIST
5772: PUSH
5773: LD_INT 1
5775: ARRAY
5776: PPUSH
5777: CALL_OW 3
5781: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5782: LD_ADDR_EXP 31
5786: PUSH
5787: LD_EXP 31
5791: PPUSH
5792: LD_VAR 0 4
5796: PUSH
5797: EMPTY
5798: LIST
5799: PUSH
5800: LD_INT 2
5802: ARRAY
5803: PPUSH
5804: CALL_OW 3
5808: ST_TO_ADDR
// end ;
5809: GO 5708
5811: POP
5812: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
5813: LD_EXP 39
5817: PUSH
5818: LD_INT 0
5820: EQUAL
5821: PUSH
5822: LD_VAR 0 2
5826: PPUSH
5827: LD_VAR 0 3
5831: PPUSH
5832: CALL_OW 428
5836: PUSH
5837: LD_INT 22
5839: PUSH
5840: LD_INT 1
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PPUSH
5847: CALL_OW 69
5851: IN
5852: AND
5853: IFFALSE 5955
// begin eventVar5 = 1 ;
5855: LD_ADDR_EXP 39
5859: PUSH
5860: LD_INT 1
5862: ST_TO_ADDR
// DialogueOn ;
5863: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5867: LD_EXP 2
5871: PPUSH
5872: LD_STRING D4-Sci1-1
5874: PPUSH
5875: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5879: LD_EXP 1
5883: PPUSH
5884: LD_STRING D4-JMM-1
5886: PPUSH
5887: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5891: LD_EXP 2
5895: PPUSH
5896: LD_STRING D4-Sci1-2
5898: PPUSH
5899: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5903: LD_EXP 1
5907: PPUSH
5908: LD_STRING D4-JMM-2
5910: PPUSH
5911: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5915: LD_EXP 2
5919: PPUSH
5920: LD_STRING D4-Sci1-3
5922: PPUSH
5923: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5927: LD_EXP 1
5931: PPUSH
5932: LD_STRING D4-JMM-3
5934: PPUSH
5935: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5939: LD_EXP 1
5943: PPUSH
5944: LD_STRING D4-JMM-3a
5946: PPUSH
5947: CALL_OW 88
// DialogueOff ;
5951: CALL_OW 7
// end ; end ; end ;
5955: PPOPN 5
5957: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
5958: LD_VAR 0 1
5962: PPUSH
5963: CALL_OW 255
5967: PUSH
5968: LD_INT 1
5970: EQUAL
5971: PUSH
5972: LD_VAR 0 1
5976: PPUSH
5977: CALL_OW 266
5981: PUSH
5982: LD_INT 0
5984: EQUAL
5985: AND
5986: PUSH
5987: LD_INT 22
5989: PUSH
5990: LD_INT 1
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PUSH
5997: LD_INT 21
5999: PUSH
6000: LD_INT 3
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: PUSH
6007: LD_INT 2
6009: PUSH
6010: LD_INT 30
6012: PUSH
6013: LD_INT 0
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: PUSH
6020: LD_INT 30
6022: PUSH
6023: LD_INT 1
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: LIST
6039: PPUSH
6040: CALL_OW 69
6044: PUSH
6045: LD_INT 1
6047: EQUAL
6048: AND
6049: IFFALSE 6063
// SetBName ( building , omega ) ;
6051: LD_VAR 0 1
6055: PPUSH
6056: LD_STRING omega
6058: PPUSH
6059: CALL_OW 500
// end ;
6063: PPOPN 2
6065: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6066: LD_VAR 0 1
6070: PPUSH
6071: CALL 27535 0 1
// end ; end_of_file
6075: PPOPN 1
6077: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6078: LD_INT 0
6080: PPUSH
6081: PPUSH
6082: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6083: LD_ADDR_VAR 0 1
6087: PUSH
6088: LD_VAR 0 1
6092: PUSH
6093: LD_EXP 1
6097: PUSH
6098: LD_EXP 2
6102: PUSH
6103: LD_EXP 3
6107: PUSH
6108: LD_EXP 4
6112: PUSH
6113: LD_EXP 5
6117: PUSH
6118: LD_EXP 6
6122: PUSH
6123: LD_EXP 7
6127: PUSH
6128: LD_EXP 8
6132: PUSH
6133: LD_EXP 9
6137: PUSH
6138: LD_EXP 10
6142: PUSH
6143: LD_EXP 11
6147: PUSH
6148: LD_EXP 12
6152: PUSH
6153: LD_EXP 13
6157: PUSH
6158: LD_EXP 14
6162: PUSH
6163: LD_EXP 15
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: DIFF
6185: ST_TO_ADDR
// if not characters then
6186: LD_VAR 0 1
6190: NOT
6191: IFFALSE 6195
// exit ;
6193: GO 6274
// speaker := characters [ rand ( 1 , characters ) ] ;
6195: LD_ADDR_VAR 0 6
6199: PUSH
6200: LD_VAR 0 1
6204: PUSH
6205: LD_INT 1
6207: PPUSH
6208: LD_VAR 0 1
6212: PPUSH
6213: CALL_OW 12
6217: ARRAY
6218: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6219: LD_VAR 0 6
6223: PPUSH
6224: CALL_OW 258
6228: PUSH
6229: LD_INT 1
6231: EQUAL
6232: IFFALSE 6250
// Say ( speaker , dialogMID ) else
6234: LD_VAR 0 6
6238: PPUSH
6239: LD_VAR 0 2
6243: PPUSH
6244: CALL_OW 88
6248: GO 6264
// Say ( speaker , dialogFID ) ;
6250: LD_VAR 0 6
6254: PPUSH
6255: LD_VAR 0 3
6259: PPUSH
6260: CALL_OW 88
// result := speaker ;
6264: LD_ADDR_VAR 0 4
6268: PUSH
6269: LD_VAR 0 6
6273: ST_TO_ADDR
// end ;
6274: LD_VAR 0 4
6278: RET
// export function PrepareDifficulty ; begin
6279: LD_INT 0
6281: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6282: LD_INT 5
6284: PPUSH
6285: LD_INT 8
6287: PPUSH
6288: LD_INT 2
6290: PPUSH
6291: CALL_OW 322
// if difficulty = 1 then
6295: LD_OWVAR 67
6299: PUSH
6300: LD_INT 1
6302: EQUAL
6303: IFFALSE 6422
// begin SetTech ( 66 , 8 , state_researched ) ;
6305: LD_INT 66
6307: PPUSH
6308: LD_INT 8
6310: PPUSH
6311: LD_INT 2
6313: PPUSH
6314: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6318: LD_INT 67
6320: PPUSH
6321: LD_INT 8
6323: PPUSH
6324: LD_INT 0
6326: PPUSH
6327: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6331: LD_INT 68
6333: PPUSH
6334: LD_INT 8
6336: PPUSH
6337: LD_INT 0
6339: PPUSH
6340: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6344: LD_INT 51
6346: PPUSH
6347: LD_INT 8
6349: PPUSH
6350: LD_INT 2
6352: PPUSH
6353: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6357: LD_INT 52
6359: PPUSH
6360: LD_INT 8
6362: PPUSH
6363: LD_INT 0
6365: PPUSH
6366: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6370: LD_INT 53
6372: PPUSH
6373: LD_INT 8
6375: PPUSH
6376: LD_INT 0
6378: PPUSH
6379: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6383: LD_INT 60
6385: PPUSH
6386: LD_INT 8
6388: PPUSH
6389: LD_INT 2
6391: PPUSH
6392: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6396: LD_INT 61
6398: PPUSH
6399: LD_INT 8
6401: PPUSH
6402: LD_INT 0
6404: PPUSH
6405: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6409: LD_INT 62
6411: PPUSH
6412: LD_INT 8
6414: PPUSH
6415: LD_INT 0
6417: PPUSH
6418: CALL_OW 322
// end ; if difficulty = 2 then
6422: LD_OWVAR 67
6426: PUSH
6427: LD_INT 2
6429: EQUAL
6430: IFFALSE 6549
// begin SetTech ( 66 , 8 , state_researched ) ;
6432: LD_INT 66
6434: PPUSH
6435: LD_INT 8
6437: PPUSH
6438: LD_INT 2
6440: PPUSH
6441: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6445: LD_INT 67
6447: PPUSH
6448: LD_INT 8
6450: PPUSH
6451: LD_INT 2
6453: PPUSH
6454: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6458: LD_INT 68
6460: PPUSH
6461: LD_INT 8
6463: PPUSH
6464: LD_INT 0
6466: PPUSH
6467: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6471: LD_INT 51
6473: PPUSH
6474: LD_INT 8
6476: PPUSH
6477: LD_INT 2
6479: PPUSH
6480: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6484: LD_INT 52
6486: PPUSH
6487: LD_INT 8
6489: PPUSH
6490: LD_INT 2
6492: PPUSH
6493: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6497: LD_INT 53
6499: PPUSH
6500: LD_INT 8
6502: PPUSH
6503: LD_INT 2
6505: PPUSH
6506: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6510: LD_INT 60
6512: PPUSH
6513: LD_INT 8
6515: PPUSH
6516: LD_INT 2
6518: PPUSH
6519: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6523: LD_INT 61
6525: PPUSH
6526: LD_INT 8
6528: PPUSH
6529: LD_INT 2
6531: PPUSH
6532: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6536: LD_INT 62
6538: PPUSH
6539: LD_INT 8
6541: PPUSH
6542: LD_INT 0
6544: PPUSH
6545: CALL_OW 322
// end ; if difficulty >= 3 then
6549: LD_OWVAR 67
6553: PUSH
6554: LD_INT 3
6556: GREATEREQUAL
6557: IFFALSE 6676
// begin SetTech ( 66 , 8 , state_researched ) ;
6559: LD_INT 66
6561: PPUSH
6562: LD_INT 8
6564: PPUSH
6565: LD_INT 2
6567: PPUSH
6568: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6572: LD_INT 67
6574: PPUSH
6575: LD_INT 8
6577: PPUSH
6578: LD_INT 2
6580: PPUSH
6581: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6585: LD_INT 68
6587: PPUSH
6588: LD_INT 8
6590: PPUSH
6591: LD_INT 0
6593: PPUSH
6594: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6598: LD_INT 51
6600: PPUSH
6601: LD_INT 8
6603: PPUSH
6604: LD_INT 2
6606: PPUSH
6607: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6611: LD_INT 52
6613: PPUSH
6614: LD_INT 8
6616: PPUSH
6617: LD_INT 2
6619: PPUSH
6620: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6624: LD_INT 53
6626: PPUSH
6627: LD_INT 8
6629: PPUSH
6630: LD_INT 2
6632: PPUSH
6633: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6637: LD_INT 60
6639: PPUSH
6640: LD_INT 8
6642: PPUSH
6643: LD_INT 2
6645: PPUSH
6646: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6650: LD_INT 61
6652: PPUSH
6653: LD_INT 8
6655: PPUSH
6656: LD_INT 2
6658: PPUSH
6659: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6663: LD_INT 62
6665: PPUSH
6666: LD_INT 8
6668: PPUSH
6669: LD_INT 0
6671: PPUSH
6672: CALL_OW 322
// end ; end ;
6676: LD_VAR 0 1
6680: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6681: LD_INT 0
6683: PPUSH
6684: PPUSH
6685: PPUSH
6686: PPUSH
6687: PPUSH
6688: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6689: LD_ADDR_VAR 0 7
6693: PUSH
6694: LD_INT 22
6696: PUSH
6697: LD_VAR 0 1
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PUSH
6706: LD_INT 25
6708: PUSH
6709: LD_INT 9
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PPUSH
6720: CALL_OW 69
6724: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6725: LD_ADDR_VAR 0 8
6729: PUSH
6730: LD_INT 22
6732: PUSH
6733: LD_VAR 0 2
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: PUSH
6742: LD_INT 3
6744: PUSH
6745: LD_INT 21
6747: PUSH
6748: LD_INT 3
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: PPUSH
6763: CALL_OW 69
6767: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6768: LD_ADDR_VAR 0 5
6772: PUSH
6773: LD_INT 1
6775: PPUSH
6776: LD_INT 3
6778: PPUSH
6779: CALL_OW 12
6783: ST_TO_ADDR
// for i = 1 to list do
6784: LD_ADDR_VAR 0 6
6788: PUSH
6789: DOUBLE
6790: LD_INT 1
6792: DEC
6793: ST_TO_ADDR
6794: LD_VAR 0 7
6798: PUSH
6799: FOR_TO
6800: IFFALSE 6982
// for ta in filter do
6802: LD_ADDR_VAR 0 4
6806: PUSH
6807: LD_VAR 0 8
6811: PUSH
6812: FOR_IN
6813: IFFALSE 6978
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6815: LD_VAR 0 7
6819: PUSH
6820: LD_VAR 0 6
6824: ARRAY
6825: PPUSH
6826: LD_VAR 0 4
6830: PPUSH
6831: CALL_OW 296
6835: PUSH
6836: LD_INT 13
6838: LESSEQUAL
6839: IFFALSE 6976
// begin case c of 1 :
6841: LD_VAR 0 5
6845: PUSH
6846: LD_INT 1
6848: DOUBLE
6849: EQUAL
6850: IFTRUE 6854
6852: GO 6892
6854: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
6855: LD_VAR 0 7
6859: PUSH
6860: LD_VAR 0 6
6864: ARRAY
6865: PPUSH
6866: LD_VAR 0 4
6870: PPUSH
6871: CALL_OW 250
6875: PPUSH
6876: LD_VAR 0 4
6880: PPUSH
6881: CALL_OW 251
6885: PPUSH
6886: CALL_OW 154
6890: GO 6976
6892: LD_INT 2
6894: DOUBLE
6895: EQUAL
6896: IFTRUE 6900
6898: GO 6964
6900: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
6901: LD_VAR 0 7
6905: PUSH
6906: LD_VAR 0 6
6910: ARRAY
6911: PPUSH
6912: LD_VAR 0 4
6916: PPUSH
6917: CALL_OW 250
6921: PUSH
6922: LD_INT 1
6924: NEG
6925: PPUSH
6926: LD_INT 1
6928: PPUSH
6929: CALL_OW 12
6933: PLUS
6934: PPUSH
6935: LD_VAR 0 4
6939: PPUSH
6940: CALL_OW 251
6944: PUSH
6945: LD_INT 1
6947: NEG
6948: PPUSH
6949: LD_INT 1
6951: PPUSH
6952: CALL_OW 12
6956: PLUS
6957: PPUSH
6958: CALL_OW 153
6962: GO 6976
6964: LD_INT 3
6966: DOUBLE
6967: EQUAL
6968: IFTRUE 6972
6970: GO 6975
6972: POP
// ; end ;
6973: GO 6976
6975: POP
// end ; end ;
6976: GO 6812
6978: POP
6979: POP
6980: GO 6799
6982: POP
6983: POP
// end ;
6984: LD_VAR 0 3
6988: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6989: LD_INT 0
6991: PPUSH
6992: PPUSH
// for i in charactersList do
6993: LD_ADDR_VAR 0 4
6997: PUSH
6998: LD_VAR 0 1
7002: PUSH
7003: FOR_IN
7004: IFFALSE 7022
// SaveCharacters ( i , ident ) ;
7006: LD_VAR 0 4
7010: PPUSH
7011: LD_VAR 0 2
7015: PPUSH
7016: CALL_OW 38
7020: GO 7003
7022: POP
7023: POP
// end ;
7024: LD_VAR 0 3
7028: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7029: LD_INT 0
7031: PPUSH
7032: PPUSH
7033: PPUSH
7034: PPUSH
7035: PPUSH
7036: PPUSH
7037: PPUSH
7038: PPUSH
7039: PPUSH
7040: PPUSH
7041: PPUSH
// for i = 1 to medicCount do
7042: LD_ADDR_VAR 0 13
7046: PUSH
7047: DOUBLE
7048: LD_INT 1
7050: DEC
7051: ST_TO_ADDR
7052: LD_VAR 0 7
7056: PUSH
7057: FOR_TO
7058: IFFALSE 7140
// begin uc_side = side ;
7060: LD_ADDR_OWVAR 20
7064: PUSH
7065: LD_VAR 0 1
7069: ST_TO_ADDR
// uc_nation = nation ;
7070: LD_ADDR_OWVAR 21
7074: PUSH
7075: LD_VAR 0 2
7079: ST_TO_ADDR
// hc_name =  ;
7080: LD_ADDR_OWVAR 26
7084: PUSH
7085: LD_STRING 
7087: ST_TO_ADDR
// hc_gallery =  ;
7088: LD_ADDR_OWVAR 33
7092: PUSH
7093: LD_STRING 
7095: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7096: LD_INT 0
7098: PPUSH
7099: LD_INT 4
7101: PPUSH
7102: LD_VAR 0 8
7106: PPUSH
7107: CALL_OW 380
// un = CreateHuman ;
7111: LD_ADDR_VAR 0 15
7115: PUSH
7116: CALL_OW 44
7120: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7121: LD_VAR 0 15
7125: PPUSH
7126: LD_VAR 0 9
7130: PPUSH
7131: LD_INT 0
7133: PPUSH
7134: CALL_OW 49
// end ;
7138: GO 7057
7140: POP
7141: POP
// for i = 1 to soldierCount do
7142: LD_ADDR_VAR 0 13
7146: PUSH
7147: DOUBLE
7148: LD_INT 1
7150: DEC
7151: ST_TO_ADDR
7152: LD_VAR 0 3
7156: PUSH
7157: FOR_TO
7158: IFFALSE 7240
// begin uc_side = side ;
7160: LD_ADDR_OWVAR 20
7164: PUSH
7165: LD_VAR 0 1
7169: ST_TO_ADDR
// uc_nation = nation ;
7170: LD_ADDR_OWVAR 21
7174: PUSH
7175: LD_VAR 0 2
7179: ST_TO_ADDR
// hc_name =  ;
7180: LD_ADDR_OWVAR 26
7184: PUSH
7185: LD_STRING 
7187: ST_TO_ADDR
// hc_gallery =  ;
7188: LD_ADDR_OWVAR 33
7192: PUSH
7193: LD_STRING 
7195: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7196: LD_INT 0
7198: PPUSH
7199: LD_INT 1
7201: PPUSH
7202: LD_VAR 0 8
7206: PPUSH
7207: CALL_OW 380
// un = CreateHuman ;
7211: LD_ADDR_VAR 0 15
7215: PUSH
7216: CALL_OW 44
7220: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7221: LD_VAR 0 15
7225: PPUSH
7226: LD_VAR 0 9
7230: PPUSH
7231: LD_INT 0
7233: PPUSH
7234: CALL_OW 49
// end ;
7238: GO 7157
7240: POP
7241: POP
// for i = 1 to sniperCount do
7242: LD_ADDR_VAR 0 13
7246: PUSH
7247: DOUBLE
7248: LD_INT 1
7250: DEC
7251: ST_TO_ADDR
7252: LD_VAR 0 4
7256: PUSH
7257: FOR_TO
7258: IFFALSE 7340
// begin uc_side = side ;
7260: LD_ADDR_OWVAR 20
7264: PUSH
7265: LD_VAR 0 1
7269: ST_TO_ADDR
// uc_nation = nation ;
7270: LD_ADDR_OWVAR 21
7274: PUSH
7275: LD_VAR 0 2
7279: ST_TO_ADDR
// hc_name =  ;
7280: LD_ADDR_OWVAR 26
7284: PUSH
7285: LD_STRING 
7287: ST_TO_ADDR
// hc_gallery =  ;
7288: LD_ADDR_OWVAR 33
7292: PUSH
7293: LD_STRING 
7295: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7296: LD_INT 0
7298: PPUSH
7299: LD_INT 5
7301: PPUSH
7302: LD_VAR 0 8
7306: PPUSH
7307: CALL_OW 380
// un = CreateHuman ;
7311: LD_ADDR_VAR 0 15
7315: PUSH
7316: CALL_OW 44
7320: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7321: LD_VAR 0 15
7325: PPUSH
7326: LD_VAR 0 9
7330: PPUSH
7331: LD_INT 0
7333: PPUSH
7334: CALL_OW 49
// end ;
7338: GO 7257
7340: POP
7341: POP
// for i = 1 to bazookCount do
7342: LD_ADDR_VAR 0 13
7346: PUSH
7347: DOUBLE
7348: LD_INT 1
7350: DEC
7351: ST_TO_ADDR
7352: LD_VAR 0 5
7356: PUSH
7357: FOR_TO
7358: IFFALSE 7440
// begin uc_side = side ;
7360: LD_ADDR_OWVAR 20
7364: PUSH
7365: LD_VAR 0 1
7369: ST_TO_ADDR
// uc_nation = nation ;
7370: LD_ADDR_OWVAR 21
7374: PUSH
7375: LD_VAR 0 2
7379: ST_TO_ADDR
// hc_name =  ;
7380: LD_ADDR_OWVAR 26
7384: PUSH
7385: LD_STRING 
7387: ST_TO_ADDR
// hc_gallery =  ;
7388: LD_ADDR_OWVAR 33
7392: PUSH
7393: LD_STRING 
7395: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7396: LD_INT 0
7398: PPUSH
7399: LD_INT 9
7401: PPUSH
7402: LD_VAR 0 8
7406: PPUSH
7407: CALL_OW 380
// un = CreateHuman ;
7411: LD_ADDR_VAR 0 15
7415: PUSH
7416: CALL_OW 44
7420: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7421: LD_VAR 0 15
7425: PPUSH
7426: LD_VAR 0 9
7430: PPUSH
7431: LD_INT 0
7433: PPUSH
7434: CALL_OW 49
// end ;
7438: GO 7357
7440: POP
7441: POP
// for i = 1 to mortalCount do
7442: LD_ADDR_VAR 0 13
7446: PUSH
7447: DOUBLE
7448: LD_INT 1
7450: DEC
7451: ST_TO_ADDR
7452: LD_VAR 0 6
7456: PUSH
7457: FOR_TO
7458: IFFALSE 7540
// begin uc_side = side ;
7460: LD_ADDR_OWVAR 20
7464: PUSH
7465: LD_VAR 0 1
7469: ST_TO_ADDR
// uc_nation = nation ;
7470: LD_ADDR_OWVAR 21
7474: PUSH
7475: LD_VAR 0 2
7479: ST_TO_ADDR
// hc_name =  ;
7480: LD_ADDR_OWVAR 26
7484: PUSH
7485: LD_STRING 
7487: ST_TO_ADDR
// hc_gallery =  ;
7488: LD_ADDR_OWVAR 33
7492: PUSH
7493: LD_STRING 
7495: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7496: LD_INT 0
7498: PPUSH
7499: LD_INT 8
7501: PPUSH
7502: LD_VAR 0 8
7506: PPUSH
7507: CALL_OW 380
// un = CreateHuman ;
7511: LD_ADDR_VAR 0 15
7515: PUSH
7516: CALL_OW 44
7520: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7521: LD_VAR 0 15
7525: PPUSH
7526: LD_VAR 0 9
7530: PPUSH
7531: LD_INT 0
7533: PPUSH
7534: CALL_OW 49
// end ;
7538: GO 7457
7540: POP
7541: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7542: LD_ADDR_VAR 0 17
7546: PUSH
7547: LD_INT 22
7549: PUSH
7550: LD_VAR 0 1
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: PUSH
7559: LD_INT 25
7561: PUSH
7562: LD_INT 4
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PPUSH
7573: CALL_OW 69
7577: ST_TO_ADDR
// for i in medic_list do
7578: LD_ADDR_VAR 0 13
7582: PUSH
7583: LD_VAR 0 17
7587: PUSH
7588: FOR_IN
7589: IFFALSE 7624
// if GetTag ( i ) = 1 then
7591: LD_VAR 0 13
7595: PPUSH
7596: CALL_OW 110
7600: PUSH
7601: LD_INT 1
7603: EQUAL
7604: IFFALSE 7622
// medic_list := medic_list diff i ;
7606: LD_ADDR_VAR 0 17
7610: PUSH
7611: LD_VAR 0 17
7615: PUSH
7616: LD_VAR 0 13
7620: DIFF
7621: ST_TO_ADDR
7622: GO 7588
7624: POP
7625: POP
// for i in medic_list do
7626: LD_ADDR_VAR 0 13
7630: PUSH
7631: LD_VAR 0 17
7635: PUSH
7636: FOR_IN
7637: IFFALSE 7655
// ComMoveToArea ( i , healArea ) ;
7639: LD_VAR 0 13
7643: PPUSH
7644: LD_VAR 0 10
7648: PPUSH
7649: CALL_OW 113
7653: GO 7636
7655: POP
7656: POP
// repeat wait ( 0 0$1 ) ;
7657: LD_INT 35
7659: PPUSH
7660: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7664: LD_ADDR_VAR 0 16
7668: PUSH
7669: LD_INT 22
7671: PUSH
7672: LD_VAR 0 1
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: LD_INT 1
7683: PUSH
7684: LD_INT 3
7686: PUSH
7687: LD_INT 24
7689: PUSH
7690: LD_INT 550
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_INT 24
7703: PUSH
7704: LD_INT 250
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PUSH
7711: EMPTY
7712: LIST
7713: LIST
7714: LIST
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PPUSH
7720: CALL_OW 69
7724: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7725: LD_ADDR_VAR 0 18
7729: PUSH
7730: LD_INT 22
7732: PUSH
7733: LD_VAR 0 1
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: PUSH
7742: LD_INT 2
7744: PUSH
7745: LD_INT 25
7747: PUSH
7748: LD_INT 1
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PUSH
7755: LD_INT 25
7757: PUSH
7758: LD_INT 5
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PUSH
7765: LD_INT 25
7767: PUSH
7768: LD_INT 8
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PUSH
7775: LD_INT 25
7777: PUSH
7778: LD_INT 9
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 24
7794: PUSH
7795: LD_INT 1000
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: LIST
7806: PPUSH
7807: CALL_OW 69
7811: ST_TO_ADDR
// if medicCount > 0 then
7812: LD_VAR 0 7
7816: PUSH
7817: LD_INT 0
7819: GREATER
7820: IFFALSE 7894
// begin if damageUnit_list > 0 then
7822: LD_VAR 0 16
7826: PUSH
7827: LD_INT 0
7829: GREATER
7830: IFFALSE 7894
// begin for i in damageUnit_list do
7832: LD_ADDR_VAR 0 13
7836: PUSH
7837: LD_VAR 0 16
7841: PUSH
7842: FOR_IN
7843: IFFALSE 7892
// begin ComMoveToArea ( i , healArea ) ;
7845: LD_VAR 0 13
7849: PPUSH
7850: LD_VAR 0 10
7854: PPUSH
7855: CALL_OW 113
// for j in medic_list do
7859: LD_ADDR_VAR 0 14
7863: PUSH
7864: LD_VAR 0 17
7868: PUSH
7869: FOR_IN
7870: IFFALSE 7888
// AddComHeal ( j , i ) ;
7872: LD_VAR 0 14
7876: PPUSH
7877: LD_VAR 0 13
7881: PPUSH
7882: CALL_OW 188
7886: GO 7869
7888: POP
7889: POP
// end ;
7890: GO 7842
7892: POP
7893: POP
// end ; end ; for i in soldiersOK_list do
7894: LD_ADDR_VAR 0 13
7898: PUSH
7899: LD_VAR 0 18
7903: PUSH
7904: FOR_IN
7905: IFFALSE 8081
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7907: LD_ADDR_VAR 0 21
7911: PUSH
7912: LD_INT 22
7914: PUSH
7915: LD_VAR 0 11
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PPUSH
7924: CALL_OW 69
7928: PPUSH
7929: LD_VAR 0 13
7933: PPUSH
7934: CALL_OW 74
7938: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7939: LD_ADDR_VAR 0 22
7943: PUSH
7944: LD_INT 22
7946: PUSH
7947: LD_VAR 0 11
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: LD_INT 2
7958: PUSH
7959: LD_INT 59
7961: PUSH
7962: EMPTY
7963: LIST
7964: PUSH
7965: LD_INT 21
7967: PUSH
7968: LD_INT 1
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 21
7977: PUSH
7978: LD_INT 2
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: PUSH
7995: EMPTY
7996: LIST
7997: PPUSH
7998: CALL_OW 69
8002: PPUSH
8003: LD_VAR 0 13
8007: PPUSH
8008: CALL_OW 74
8012: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8013: LD_VAR 0 13
8017: PPUSH
8018: LD_VAR 0 21
8022: PPUSH
8023: CALL_OW 296
8027: PUSH
8028: LD_INT 8
8030: PLUS
8031: PUSH
8032: LD_VAR 0 13
8036: PPUSH
8037: LD_VAR 0 22
8041: PPUSH
8042: CALL_OW 296
8046: LESS
8047: IFFALSE 8065
// begin ComAttackUnit ( i , target1 ) ;
8049: LD_VAR 0 13
8053: PPUSH
8054: LD_VAR 0 21
8058: PPUSH
8059: CALL_OW 115
// end else
8063: GO 8079
// begin ComAttackUnit ( i , target2 ) ;
8065: LD_VAR 0 13
8069: PPUSH
8070: LD_VAR 0 22
8074: PPUSH
8075: CALL_OW 115
// end ; end ;
8079: GO 7904
8081: POP
8082: POP
// until soldiersOK_list = [ ] ;
8083: LD_VAR 0 18
8087: PUSH
8088: EMPTY
8089: EQUAL
8090: IFFALSE 7657
// end ;
8092: LD_VAR 0 12
8096: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8097: LD_INT 0
8099: PPUSH
8100: PPUSH
8101: PPUSH
8102: PPUSH
8103: PPUSH
8104: PPUSH
8105: PPUSH
8106: PPUSH
8107: PPUSH
8108: PPUSH
8109: PPUSH
// amChassisTab = [ ] ;
8110: LD_ADDR_VAR 0 19
8114: PUSH
8115: EMPTY
8116: ST_TO_ADDR
// arChassisTab = [ ] ;
8117: LD_ADDR_VAR 0 18
8121: PUSH
8122: EMPTY
8123: ST_TO_ADDR
// ruChassisTab = [ ] ;
8124: LD_ADDR_VAR 0 17
8128: PUSH
8129: EMPTY
8130: ST_TO_ADDR
// for i = 1 to vehCount do
8131: LD_ADDR_VAR 0 13
8135: PUSH
8136: DOUBLE
8137: LD_INT 1
8139: DEC
8140: ST_TO_ADDR
8141: LD_VAR 0 3
8145: PUSH
8146: FOR_TO
8147: IFFALSE 9571
// begin wait ( 0 0$01 ) ;
8149: LD_INT 35
8151: PPUSH
8152: CALL_OW 67
// if nation = 1 then
8156: LD_VAR 0 5
8160: PUSH
8161: LD_INT 1
8163: EQUAL
8164: IFFALSE 8645
// begin uc_side = side ;
8166: LD_ADDR_OWVAR 20
8170: PUSH
8171: LD_VAR 0 2
8175: ST_TO_ADDR
// uc_nation = nation ;
8176: LD_ADDR_OWVAR 21
8180: PUSH
8181: LD_VAR 0 5
8185: ST_TO_ADDR
// vc_engine = vehengine ;
8186: LD_ADDR_OWVAR 39
8190: PUSH
8191: LD_VAR 0 6
8195: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8196: LD_ADDR_OWVAR 40
8200: PUSH
8201: LD_VAR 0 10
8205: PUSH
8206: LD_INT 1
8208: PPUSH
8209: LD_VAR 0 10
8213: PPUSH
8214: CALL_OW 12
8218: ARRAY
8219: ST_TO_ADDR
// for j = 1 to AMWeapon do
8220: LD_ADDR_VAR 0 14
8224: PUSH
8225: DOUBLE
8226: LD_INT 1
8228: DEC
8229: ST_TO_ADDR
8230: LD_VAR 0 10
8234: PUSH
8235: FOR_TO
8236: IFFALSE 8537
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8238: LD_VAR 0 10
8242: PUSH
8243: LD_VAR 0 14
8247: ARRAY
8248: PUSH
8249: LD_INT 2
8251: EQUAL
8252: PUSH
8253: LD_VAR 0 10
8257: PUSH
8258: LD_VAR 0 14
8262: ARRAY
8263: PUSH
8264: LD_INT 3
8266: EQUAL
8267: OR
8268: IFFALSE 8321
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8270: LD_ADDR_VAR 0 19
8274: PUSH
8275: LD_INT 1
8277: PUSH
8278: LD_INT 2
8280: PUSH
8281: LD_INT 3
8283: PUSH
8284: LD_INT 4
8286: PUSH
8287: LD_INT 5
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8297: LD_ADDR_OWVAR 37
8301: PUSH
8302: LD_VAR 0 19
8306: PUSH
8307: LD_INT 1
8309: PPUSH
8310: LD_VAR 0 19
8314: PPUSH
8315: CALL_OW 12
8319: ARRAY
8320: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8321: LD_VAR 0 10
8325: PUSH
8326: LD_VAR 0 14
8330: ARRAY
8331: PUSH
8332: LD_INT 4
8334: EQUAL
8335: PUSH
8336: LD_VAR 0 10
8340: PUSH
8341: LD_VAR 0 14
8345: ARRAY
8346: PUSH
8347: LD_INT 5
8349: EQUAL
8350: OR
8351: PUSH
8352: LD_VAR 0 10
8356: PUSH
8357: LD_VAR 0 14
8361: ARRAY
8362: PUSH
8363: LD_INT 9
8365: EQUAL
8366: OR
8367: PUSH
8368: LD_VAR 0 10
8372: PUSH
8373: LD_VAR 0 14
8377: ARRAY
8378: PUSH
8379: LD_INT 11
8381: EQUAL
8382: OR
8383: PUSH
8384: LD_VAR 0 10
8388: PUSH
8389: LD_VAR 0 14
8393: ARRAY
8394: PUSH
8395: LD_INT 7
8397: EQUAL
8398: OR
8399: IFFALSE 8448
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8401: LD_ADDR_VAR 0 19
8405: PUSH
8406: LD_INT 2
8408: PUSH
8409: LD_INT 3
8411: PUSH
8412: LD_INT 4
8414: PUSH
8415: LD_INT 5
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8424: LD_ADDR_OWVAR 37
8428: PUSH
8429: LD_VAR 0 19
8433: PUSH
8434: LD_INT 1
8436: PPUSH
8437: LD_VAR 0 19
8441: PPUSH
8442: CALL_OW 12
8446: ARRAY
8447: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8448: LD_VAR 0 10
8452: PUSH
8453: LD_VAR 0 14
8457: ARRAY
8458: PUSH
8459: LD_INT 8
8461: EQUAL
8462: PUSH
8463: LD_VAR 0 10
8467: PUSH
8468: LD_VAR 0 14
8472: ARRAY
8473: PUSH
8474: LD_INT 6
8476: EQUAL
8477: OR
8478: PUSH
8479: LD_VAR 0 10
8483: PUSH
8484: LD_VAR 0 14
8488: ARRAY
8489: PUSH
8490: LD_INT 10
8492: EQUAL
8493: OR
8494: IFFALSE 8535
// begin amChassisTab = [ 4 , 5 ] ;
8496: LD_ADDR_VAR 0 19
8500: PUSH
8501: LD_INT 4
8503: PUSH
8504: LD_INT 5
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8511: LD_ADDR_OWVAR 37
8515: PUSH
8516: LD_VAR 0 19
8520: PUSH
8521: LD_INT 1
8523: PPUSH
8524: LD_VAR 0 19
8528: PPUSH
8529: CALL_OW 12
8533: ARRAY
8534: ST_TO_ADDR
// end ; end ;
8535: GO 8235
8537: POP
8538: POP
// veh = CreateVehicle ;
8539: LD_ADDR_VAR 0 16
8543: PUSH
8544: CALL_OW 45
8548: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8549: LD_VAR 0 16
8553: PPUSH
8554: LD_VAR 0 1
8558: PPUSH
8559: LD_INT 0
8561: PPUSH
8562: CALL_OW 49
// if vc_control = 1 then
8566: LD_OWVAR 38
8570: PUSH
8571: LD_INT 1
8573: EQUAL
8574: IFFALSE 8631
// begin hc_gallery =  ;
8576: LD_ADDR_OWVAR 33
8580: PUSH
8581: LD_STRING 
8583: ST_TO_ADDR
// hc_name =  ;
8584: LD_ADDR_OWVAR 26
8588: PUSH
8589: LD_STRING 
8591: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8592: LD_INT 0
8594: PPUSH
8595: LD_INT 3
8597: PPUSH
8598: LD_VAR 0 4
8602: PPUSH
8603: CALL_OW 380
// un = CreateHuman ;
8607: LD_ADDR_VAR 0 15
8611: PUSH
8612: CALL_OW 44
8616: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8617: LD_VAR 0 15
8621: PPUSH
8622: LD_VAR 0 16
8626: PPUSH
8627: CALL_OW 52
// end ; i = i + 1 ;
8631: LD_ADDR_VAR 0 13
8635: PUSH
8636: LD_VAR 0 13
8640: PUSH
8641: LD_INT 1
8643: PLUS
8644: ST_TO_ADDR
// end ; if nation = 2 then
8645: LD_VAR 0 5
8649: PUSH
8650: LD_INT 2
8652: EQUAL
8653: IFFALSE 9155
// begin uc_side = side ;
8655: LD_ADDR_OWVAR 20
8659: PUSH
8660: LD_VAR 0 2
8664: ST_TO_ADDR
// uc_nation = nation ;
8665: LD_ADDR_OWVAR 21
8669: PUSH
8670: LD_VAR 0 5
8674: ST_TO_ADDR
// vc_engine = vehengine ;
8675: LD_ADDR_OWVAR 39
8679: PUSH
8680: LD_VAR 0 6
8684: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8685: LD_INT 22
8687: PUSH
8688: LD_VAR 0 2
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: LD_INT 21
8699: PUSH
8700: LD_INT 2
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PUSH
8707: LD_INT 33
8709: PUSH
8710: LD_INT 2
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PUSH
8717: LD_INT 50
8719: PUSH
8720: EMPTY
8721: LIST
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: PPUSH
8729: CALL_OW 69
8733: PUSH
8734: LD_INT 8
8736: LESSEQUAL
8737: IFFALSE 8765
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8739: LD_ADDR_OWVAR 38
8743: PUSH
8744: LD_VAR 0 7
8748: PUSH
8749: LD_INT 1
8751: PPUSH
8752: LD_VAR 0 7
8756: PPUSH
8757: CALL_OW 12
8761: ARRAY
8762: ST_TO_ADDR
8763: GO 8773
// vc_control = control_apeman ;
8765: LD_ADDR_OWVAR 38
8769: PUSH
8770: LD_INT 5
8772: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8773: LD_ADDR_OWVAR 40
8777: PUSH
8778: LD_VAR 0 9
8782: PUSH
8783: LD_INT 1
8785: PPUSH
8786: LD_VAR 0 9
8790: PPUSH
8791: CALL_OW 12
8795: ARRAY
8796: ST_TO_ADDR
// for j = 1 to ARWeapons do
8797: LD_ADDR_VAR 0 14
8801: PUSH
8802: DOUBLE
8803: LD_INT 1
8805: DEC
8806: ST_TO_ADDR
8807: LD_VAR 0 9
8811: PUSH
8812: FOR_TO
8813: IFFALSE 9047
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8815: LD_VAR 0 9
8819: PUSH
8820: LD_VAR 0 14
8824: ARRAY
8825: PUSH
8826: LD_INT 24
8828: EQUAL
8829: PUSH
8830: LD_VAR 0 9
8834: PUSH
8835: LD_VAR 0 14
8839: ARRAY
8840: PUSH
8841: LD_INT 22
8843: EQUAL
8844: OR
8845: PUSH
8846: LD_VAR 0 9
8850: PUSH
8851: LD_VAR 0 14
8855: ARRAY
8856: PUSH
8857: LD_INT 23
8859: EQUAL
8860: OR
8861: PUSH
8862: LD_VAR 0 9
8866: PUSH
8867: LD_VAR 0 14
8871: ARRAY
8872: PUSH
8873: LD_INT 30
8875: EQUAL
8876: OR
8877: IFFALSE 8926
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8879: LD_ADDR_VAR 0 18
8883: PUSH
8884: LD_INT 11
8886: PUSH
8887: LD_INT 12
8889: PUSH
8890: LD_INT 13
8892: PUSH
8893: LD_INT 14
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8902: LD_ADDR_OWVAR 37
8906: PUSH
8907: LD_VAR 0 18
8911: PUSH
8912: LD_INT 1
8914: PPUSH
8915: LD_VAR 0 18
8919: PPUSH
8920: CALL_OW 12
8924: ARRAY
8925: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8926: LD_VAR 0 9
8930: PUSH
8931: LD_VAR 0 14
8935: ARRAY
8936: PUSH
8937: LD_INT 29
8939: EQUAL
8940: PUSH
8941: LD_VAR 0 9
8945: PUSH
8946: LD_VAR 0 14
8950: ARRAY
8951: PUSH
8952: LD_INT 28
8954: EQUAL
8955: OR
8956: PUSH
8957: LD_VAR 0 9
8961: PUSH
8962: LD_VAR 0 14
8966: ARRAY
8967: PUSH
8968: LD_INT 27
8970: EQUAL
8971: OR
8972: PUSH
8973: LD_VAR 0 9
8977: PUSH
8978: LD_VAR 0 14
8982: ARRAY
8983: PUSH
8984: LD_INT 26
8986: EQUAL
8987: OR
8988: PUSH
8989: LD_VAR 0 9
8993: PUSH
8994: LD_VAR 0 14
8998: ARRAY
8999: PUSH
9000: LD_INT 25
9002: EQUAL
9003: OR
9004: IFFALSE 9045
// begin arChassisTab = [ 13 , 14 ] ;
9006: LD_ADDR_VAR 0 18
9010: PUSH
9011: LD_INT 13
9013: PUSH
9014: LD_INT 14
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9021: LD_ADDR_OWVAR 37
9025: PUSH
9026: LD_VAR 0 18
9030: PUSH
9031: LD_INT 1
9033: PPUSH
9034: LD_VAR 0 18
9038: PPUSH
9039: CALL_OW 12
9043: ARRAY
9044: ST_TO_ADDR
// end ; end ;
9045: GO 8812
9047: POP
9048: POP
// veh = CreateVehicle ;
9049: LD_ADDR_VAR 0 16
9053: PUSH
9054: CALL_OW 45
9058: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9059: LD_VAR 0 16
9063: PPUSH
9064: LD_VAR 0 1
9068: PPUSH
9069: LD_INT 0
9071: PPUSH
9072: CALL_OW 49
// if vc_control = 1 then
9076: LD_OWVAR 38
9080: PUSH
9081: LD_INT 1
9083: EQUAL
9084: IFFALSE 9141
// begin hc_gallery =  ;
9086: LD_ADDR_OWVAR 33
9090: PUSH
9091: LD_STRING 
9093: ST_TO_ADDR
// hc_name =  ;
9094: LD_ADDR_OWVAR 26
9098: PUSH
9099: LD_STRING 
9101: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9102: LD_INT 0
9104: PPUSH
9105: LD_INT 3
9107: PPUSH
9108: LD_VAR 0 4
9112: PPUSH
9113: CALL_OW 380
// un = CreateHuman ;
9117: LD_ADDR_VAR 0 15
9121: PUSH
9122: CALL_OW 44
9126: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9127: LD_VAR 0 15
9131: PPUSH
9132: LD_VAR 0 16
9136: PPUSH
9137: CALL_OW 52
// end ; i = i + 1 ;
9141: LD_ADDR_VAR 0 13
9145: PUSH
9146: LD_VAR 0 13
9150: PUSH
9151: LD_INT 1
9153: PLUS
9154: ST_TO_ADDR
// end ; if nation = 3 then
9155: LD_VAR 0 5
9159: PUSH
9160: LD_INT 3
9162: EQUAL
9163: IFFALSE 9569
// begin uc_side = side ;
9165: LD_ADDR_OWVAR 20
9169: PUSH
9170: LD_VAR 0 2
9174: ST_TO_ADDR
// uc_nation = nation ;
9175: LD_ADDR_OWVAR 21
9179: PUSH
9180: LD_VAR 0 5
9184: ST_TO_ADDR
// vc_engine = vehengine ;
9185: LD_ADDR_OWVAR 39
9189: PUSH
9190: LD_VAR 0 6
9194: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
9195: LD_ADDR_OWVAR 38
9199: PUSH
9200: LD_VAR 0 7
9204: PUSH
9205: LD_INT 1
9207: PPUSH
9208: LD_VAR 0 7
9212: PPUSH
9213: CALL_OW 12
9217: ARRAY
9218: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9219: LD_ADDR_OWVAR 40
9223: PUSH
9224: LD_VAR 0 8
9228: PUSH
9229: LD_INT 1
9231: PPUSH
9232: LD_VAR 0 8
9236: PPUSH
9237: CALL_OW 12
9241: ARRAY
9242: ST_TO_ADDR
// for j = 1 to RuWeapons do
9243: LD_ADDR_VAR 0 14
9247: PUSH
9248: DOUBLE
9249: LD_INT 1
9251: DEC
9252: ST_TO_ADDR
9253: LD_VAR 0 8
9257: PUSH
9258: FOR_TO
9259: IFFALSE 9445
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9261: LD_VAR 0 8
9265: PUSH
9266: LD_VAR 0 14
9270: ARRAY
9271: PUSH
9272: LD_INT 42
9274: EQUAL
9275: PUSH
9276: LD_VAR 0 8
9280: PUSH
9281: LD_VAR 0 14
9285: ARRAY
9286: PUSH
9287: LD_INT 43
9289: EQUAL
9290: OR
9291: PUSH
9292: LD_VAR 0 8
9296: PUSH
9297: LD_VAR 0 14
9301: ARRAY
9302: PUSH
9303: LD_INT 44
9305: EQUAL
9306: OR
9307: PUSH
9308: LD_VAR 0 8
9312: PUSH
9313: LD_VAR 0 14
9317: ARRAY
9318: PUSH
9319: LD_INT 45
9321: EQUAL
9322: OR
9323: PUSH
9324: LD_VAR 0 8
9328: PUSH
9329: LD_VAR 0 14
9333: ARRAY
9334: PUSH
9335: LD_INT 49
9337: EQUAL
9338: OR
9339: IFFALSE 9376
// begin ruChassisTab = [ 24 ] ;
9341: LD_ADDR_VAR 0 17
9345: PUSH
9346: LD_INT 24
9348: PUSH
9349: EMPTY
9350: LIST
9351: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9352: LD_ADDR_OWVAR 37
9356: PUSH
9357: LD_VAR 0 17
9361: PUSH
9362: LD_INT 1
9364: PPUSH
9365: LD_VAR 0 17
9369: PPUSH
9370: CALL_OW 12
9374: ARRAY
9375: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9376: LD_VAR 0 8
9380: PUSH
9381: LD_VAR 0 14
9385: ARRAY
9386: PUSH
9387: LD_INT 46
9389: EQUAL
9390: PUSH
9391: LD_VAR 0 8
9395: PUSH
9396: LD_VAR 0 14
9400: ARRAY
9401: PUSH
9402: LD_INT 47
9404: EQUAL
9405: OR
9406: IFFALSE 9443
// begin ruChassisTab = [ 24 ] ;
9408: LD_ADDR_VAR 0 17
9412: PUSH
9413: LD_INT 24
9415: PUSH
9416: EMPTY
9417: LIST
9418: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9419: LD_ADDR_OWVAR 37
9423: PUSH
9424: LD_VAR 0 17
9428: PUSH
9429: LD_INT 1
9431: PPUSH
9432: LD_VAR 0 17
9436: PPUSH
9437: CALL_OW 12
9441: ARRAY
9442: ST_TO_ADDR
// end ; end ;
9443: GO 9258
9445: POP
9446: POP
// veh = CreateVehicle ;
9447: LD_ADDR_VAR 0 16
9451: PUSH
9452: CALL_OW 45
9456: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9457: LD_VAR 0 16
9461: PPUSH
9462: LD_VAR 0 1
9466: PPUSH
9467: LD_INT 0
9469: PPUSH
9470: CALL_OW 49
// if vc_control = 1 then
9474: LD_OWVAR 38
9478: PUSH
9479: LD_INT 1
9481: EQUAL
9482: IFFALSE 9569
// begin if uc_side = 8 then
9484: LD_OWVAR 20
9488: PUSH
9489: LD_INT 8
9491: EQUAL
9492: IFFALSE 9504
// uc_nation = 2 else
9494: LD_ADDR_OWVAR 21
9498: PUSH
9499: LD_INT 2
9501: ST_TO_ADDR
9502: GO 9514
// uc_nation = nation ;
9504: LD_ADDR_OWVAR 21
9508: PUSH
9509: LD_VAR 0 5
9513: ST_TO_ADDR
// hc_gallery =  ;
9514: LD_ADDR_OWVAR 33
9518: PUSH
9519: LD_STRING 
9521: ST_TO_ADDR
// hc_name =  ;
9522: LD_ADDR_OWVAR 26
9526: PUSH
9527: LD_STRING 
9529: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9530: LD_INT 0
9532: PPUSH
9533: LD_INT 3
9535: PPUSH
9536: LD_VAR 0 4
9540: PPUSH
9541: CALL_OW 380
// un = CreateHuman ;
9545: LD_ADDR_VAR 0 15
9549: PUSH
9550: CALL_OW 44
9554: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9555: LD_VAR 0 15
9559: PPUSH
9560: LD_VAR 0 16
9564: PPUSH
9565: CALL_OW 52
// end ; end ; end ;
9569: GO 8146
9571: POP
9572: POP
// repeat wait ( 0 0$1 ) ;
9573: LD_INT 35
9575: PPUSH
9576: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9580: LD_ADDR_VAR 0 20
9584: PUSH
9585: LD_INT 22
9587: PUSH
9588: LD_VAR 0 2
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 21
9599: PUSH
9600: LD_INT 2
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 24
9609: PUSH
9610: LD_INT 250
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 2
9619: PUSH
9620: LD_INT 34
9622: PUSH
9623: LD_INT 25
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 34
9632: PUSH
9633: LD_INT 26
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: LD_INT 34
9642: PUSH
9643: LD_INT 27
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PUSH
9650: LD_INT 34
9652: PUSH
9653: LD_INT 28
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 34
9662: PUSH
9663: LD_INT 29
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PUSH
9670: LD_INT 34
9672: PUSH
9673: LD_INT 46
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PUSH
9680: LD_INT 34
9682: PUSH
9683: LD_INT 44
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PUSH
9690: LD_INT 34
9692: PUSH
9693: LD_INT 45
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: PUSH
9700: LD_INT 34
9702: PUSH
9703: LD_INT 47
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: PPUSH
9728: CALL_OW 69
9732: ST_TO_ADDR
// if vehicleOK_list > 0 then
9733: LD_VAR 0 20
9737: PUSH
9738: LD_INT 0
9740: GREATER
9741: IFFALSE 9960
// begin for i in vehicleOK_list do
9743: LD_ADDR_VAR 0 13
9747: PUSH
9748: LD_VAR 0 20
9752: PUSH
9753: FOR_IN
9754: IFFALSE 9958
// begin if GetSide ( i ) <> side then
9756: LD_VAR 0 13
9760: PPUSH
9761: CALL_OW 255
9765: PUSH
9766: LD_VAR 0 2
9770: NONEQUAL
9771: IFFALSE 9784
// begin ComStop ( i ) ;
9773: LD_VAR 0 13
9777: PPUSH
9778: CALL_OW 141
// continue ;
9782: GO 9753
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9784: LD_ADDR_VAR 0 21
9788: PUSH
9789: LD_INT 22
9791: PUSH
9792: LD_VAR 0 11
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PPUSH
9801: CALL_OW 69
9805: PPUSH
9806: LD_VAR 0 13
9810: PPUSH
9811: CALL_OW 74
9815: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9816: LD_ADDR_VAR 0 22
9820: PUSH
9821: LD_INT 22
9823: PUSH
9824: LD_VAR 0 11
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 2
9835: PUSH
9836: LD_INT 59
9838: PUSH
9839: EMPTY
9840: LIST
9841: PUSH
9842: LD_INT 21
9844: PUSH
9845: LD_INT 1
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PUSH
9852: LD_INT 21
9854: PUSH
9855: LD_INT 2
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: EMPTY
9873: LIST
9874: PPUSH
9875: CALL_OW 69
9879: PPUSH
9880: LD_VAR 0 13
9884: PPUSH
9885: CALL_OW 74
9889: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9890: LD_VAR 0 13
9894: PPUSH
9895: LD_VAR 0 21
9899: PPUSH
9900: CALL_OW 296
9904: PUSH
9905: LD_INT 8
9907: PLUS
9908: PUSH
9909: LD_VAR 0 13
9913: PPUSH
9914: LD_VAR 0 22
9918: PPUSH
9919: CALL_OW 296
9923: LESS
9924: IFFALSE 9942
// begin ComAttackUnit ( i , target1 ) ;
9926: LD_VAR 0 13
9930: PPUSH
9931: LD_VAR 0 21
9935: PPUSH
9936: CALL_OW 115
// end else
9940: GO 9956
// begin ComAttackUnit ( i , target2 ) ;
9942: LD_VAR 0 13
9946: PPUSH
9947: LD_VAR 0 22
9951: PPUSH
9952: CALL_OW 115
// end ; end ;
9956: GO 9753
9958: POP
9959: POP
// end ; until vehicleOK_list = 0 ;
9960: LD_VAR 0 20
9964: PUSH
9965: LD_INT 0
9967: EQUAL
9968: IFFALSE 9573
// end ;
9970: LD_VAR 0 12
9974: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
9975: LD_INT 0
9977: PPUSH
9978: PPUSH
9979: PPUSH
9980: PPUSH
9981: PPUSH
9982: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
9983: LD_ADDR_VAR 0 6
9987: PUSH
9988: LD_INT 22
9990: PUSH
9991: LD_VAR 0 1
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: LD_INT 34
10002: PUSH
10003: LD_INT 29
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PPUSH
10014: CALL_OW 69
10018: ST_TO_ADDR
// if veh_list = 0 then
10019: LD_VAR 0 6
10023: PUSH
10024: LD_INT 0
10026: EQUAL
10027: IFFALSE 10031
// exit ;
10029: GO 10236
// if veh_list > 0 then
10031: LD_VAR 0 6
10035: PUSH
10036: LD_INT 0
10038: GREATER
10039: IFFALSE 10236
// begin for i in veh_List do
10041: LD_ADDR_VAR 0 4
10045: PUSH
10046: LD_VAR 0 6
10050: PUSH
10051: FOR_IN
10052: IFFALSE 10234
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10054: LD_ADDR_VAR 0 7
10058: PUSH
10059: LD_INT 22
10061: PUSH
10062: LD_VAR 0 2
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: LD_INT 24
10073: PUSH
10074: LD_INT 250
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: PUSH
10081: LD_INT 2
10083: PUSH
10084: LD_INT 59
10086: PUSH
10087: EMPTY
10088: LIST
10089: PUSH
10090: LD_INT 21
10092: PUSH
10093: LD_INT 1
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 21
10102: PUSH
10103: LD_INT 2
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: LIST
10120: PUSH
10121: EMPTY
10122: LIST
10123: PPUSH
10124: CALL_OW 69
10128: PPUSH
10129: LD_VAR 0 4
10133: PPUSH
10134: CALL_OW 74
10138: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
10139: LD_VAR 0 4
10143: PPUSH
10144: LD_VAR 0 7
10148: PPUSH
10149: CALL_OW 115
// if not HasTask ( i ) then
10153: LD_VAR 0 4
10157: PPUSH
10158: CALL_OW 314
10162: NOT
10163: IFFALSE 10232
// begin wait ( 0 0$0.1 ) ;
10165: LD_INT 4
10167: PPUSH
10168: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
10172: LD_ADDR_VAR 0 8
10176: PUSH
10177: LD_INT 22
10179: PUSH
10180: LD_VAR 0 2
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: PUSH
10189: LD_INT 24
10191: PUSH
10192: LD_INT 250
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PPUSH
10203: CALL_OW 69
10207: PPUSH
10208: LD_VAR 0 4
10212: PPUSH
10213: CALL_OW 74
10217: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
10218: LD_VAR 0 4
10222: PPUSH
10223: LD_VAR 0 8
10227: PPUSH
10228: CALL_OW 115
// end ; end ;
10232: GO 10051
10234: POP
10235: POP
// end ; end ; end_of_file
10236: LD_VAR 0 3
10240: RET
// every 0 0$1 do
10241: GO 10243
10243: DISABLE
// begin enable ;
10244: ENABLE
// IntBazooka ( 7 , 1 ) ;
10245: LD_INT 7
10247: PPUSH
10248: LD_INT 1
10250: PPUSH
10251: CALL 6681 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10255: LD_INT 8
10257: PPUSH
10258: LD_INT 1
10260: PPUSH
10261: CALL 9975 0 2
// end ;
10265: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10266: LD_INT 22
10268: PUSH
10269: LD_INT 3
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 21
10278: PUSH
10279: LD_INT 2
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: LD_INT 50
10288: PUSH
10289: EMPTY
10290: LIST
10291: PUSH
10292: LD_INT 2
10294: PUSH
10295: LD_INT 34
10297: PUSH
10298: LD_INT 46
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: LD_INT 34
10307: PUSH
10308: LD_INT 44
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PUSH
10315: LD_INT 34
10317: PUSH
10318: LD_INT 45
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PUSH
10325: LD_INT 34
10327: PUSH
10328: LD_INT 47
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: PPUSH
10348: CALL_OW 69
10352: PUSH
10353: LD_INT 0
10355: GREATER
10356: PUSH
10357: LD_INT 22
10359: PUSH
10360: LD_INT 3
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 21
10369: PUSH
10370: LD_INT 2
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 50
10379: PUSH
10380: EMPTY
10381: LIST
10382: PUSH
10383: LD_INT 34
10385: PUSH
10386: LD_INT 49
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: PPUSH
10399: CALL_OW 69
10403: PUSH
10404: LD_INT 0
10406: GREATER
10407: AND
10408: IFFALSE 10580
10410: GO 10412
10412: DISABLE
10413: LD_INT 0
10415: PPUSH
10416: PPUSH
// begin enable ;
10417: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10418: LD_ADDR_VAR 0 1
10422: PUSH
10423: LD_INT 22
10425: PUSH
10426: LD_INT 3
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: PUSH
10433: LD_INT 21
10435: PUSH
10436: LD_INT 2
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: PUSH
10443: LD_INT 50
10445: PUSH
10446: EMPTY
10447: LIST
10448: PUSH
10449: LD_INT 2
10451: PUSH
10452: LD_INT 34
10454: PUSH
10455: LD_INT 46
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: LD_INT 34
10464: PUSH
10465: LD_INT 44
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 34
10474: PUSH
10475: LD_INT 45
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 34
10484: PUSH
10485: LD_INT 47
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: PPUSH
10505: CALL_OW 69
10509: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10510: LD_ADDR_VAR 0 2
10514: PUSH
10515: LD_INT 22
10517: PUSH
10518: LD_INT 3
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PUSH
10525: LD_INT 21
10527: PUSH
10528: LD_INT 2
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 50
10537: PUSH
10538: EMPTY
10539: LIST
10540: PUSH
10541: LD_INT 34
10543: PUSH
10544: LD_INT 49
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: PPUSH
10557: CALL_OW 69
10561: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10562: LD_VAR 0 2
10566: PPUSH
10567: LD_VAR 0 1
10571: PUSH
10572: LD_INT 1
10574: ARRAY
10575: PPUSH
10576: CALL_OW 112
// end ; end_of_file
10580: PPOPN 2
10582: END
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
10583: LD_EXP 38
10587: PUSH
10588: LD_INT 1
10590: EQUAL
10591: IFFALSE 11493
10593: GO 10595
10595: DISABLE
10596: LD_INT 0
10598: PPUSH
10599: PPUSH
10600: PPUSH
// begin m1 := false ;
10601: LD_ADDR_VAR 0 1
10605: PUSH
10606: LD_INT 0
10608: ST_TO_ADDR
// m2 := false ;
10609: LD_ADDR_VAR 0 2
10613: PUSH
10614: LD_INT 0
10616: ST_TO_ADDR
// m3 := false ;
10617: LD_ADDR_VAR 0 3
10621: PUSH
10622: LD_INT 0
10624: ST_TO_ADDR
// Say ( JMM , D9b-JMM-1 ) ;
10625: LD_EXP 1
10629: PPUSH
10630: LD_STRING D9b-JMM-1
10632: PPUSH
10633: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10637: LD_EXP 15
10641: PPUSH
10642: LD_STRING D9b-Pow-1
10644: PPUSH
10645: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10649: LD_EXP 1
10653: PPUSH
10654: LD_STRING D9b-JMM-2
10656: PPUSH
10657: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10661: LD_EXP 15
10665: PPUSH
10666: LD_STRING D9b-Pow-2
10668: PPUSH
10669: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10673: LD_EXP 1
10677: PPUSH
10678: LD_STRING D9b-JMM-3
10680: PPUSH
10681: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10685: LD_EXP 15
10689: PPUSH
10690: LD_STRING D9b-Pow-3
10692: PPUSH
10693: CALL_OW 94
// if tick <= 60 60$00 then
10697: LD_OWVAR 1
10701: PUSH
10702: LD_INT 126000
10704: LESSEQUAL
10705: IFFALSE 10714
// SetAchievement ( ACH_ASPEED_13 ) ;
10707: LD_STRING ACH_ASPEED_13
10709: PPUSH
10710: CALL_OW 543
// if burlakStatus = 1 then
10714: LD_EXP 28
10718: PUSH
10719: LD_INT 1
10721: EQUAL
10722: IFFALSE 10744
// begin m1 := true ;
10724: LD_ADDR_VAR 0 1
10728: PUSH
10729: LD_INT 1
10731: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
10732: LD_STRING Burlak
10734: PPUSH
10735: LD_INT 1
10737: PPUSH
10738: CALL_OW 101
// end else
10742: GO 10755
// begin AddMedal ( Burlak , - 1 ) ;
10744: LD_STRING Burlak
10746: PPUSH
10747: LD_INT 1
10749: NEG
10750: PPUSH
10751: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10755: LD_EXP 2
10759: PPUSH
10760: CALL_OW 302
10764: IFFALSE 10786
// begin m2 := true ;
10766: LD_ADDR_VAR 0 2
10770: PUSH
10771: LD_INT 1
10773: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
10774: LD_STRING Stevens
10776: PPUSH
10777: LD_INT 1
10779: PPUSH
10780: CALL_OW 101
// end else
10784: GO 10797
// begin AddMedal ( Stevens , - 1 ) ;
10786: LD_STRING Stevens
10788: PPUSH
10789: LD_INT 1
10791: NEG
10792: PPUSH
10793: CALL_OW 101
// end ; if radarOnSpot = 1 then
10797: LD_EXP 30
10801: PUSH
10802: LD_INT 1
10804: EQUAL
10805: IFFALSE 10827
// begin m3 := true ;
10807: LD_ADDR_VAR 0 3
10811: PUSH
10812: LD_INT 1
10814: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
10815: LD_STRING Observation
10817: PPUSH
10818: LD_INT 1
10820: PPUSH
10821: CALL_OW 101
// end else
10825: GO 10838
// begin AddMedal ( Observation , - 1 ) ;
10827: LD_STRING Observation
10829: PPUSH
10830: LD_INT 1
10832: NEG
10833: PPUSH
10834: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10838: LD_VAR 0 1
10842: PUSH
10843: LD_VAR 0 2
10847: AND
10848: PUSH
10849: LD_VAR 0 3
10853: AND
10854: PUSH
10855: LD_OWVAR 67
10859: PUSH
10860: LD_INT 3
10862: GREATEREQUAL
10863: AND
10864: IFFALSE 10876
// SetAchievementEX ( ACH_AMER , 13 ) ;
10866: LD_STRING ACH_AMER
10868: PPUSH
10869: LD_INT 13
10871: PPUSH
10872: CALL_OW 564
// GiveMedals ( MAIN ) ;
10876: LD_STRING MAIN
10878: PPUSH
10879: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
10883: LD_EXP 28
10887: PPUSH
10888: LD_STRING 13_BurlakStatus_1
10890: PPUSH
10891: CALL_OW 39
// if IsLive ( Stevens ) then
10895: LD_EXP 2
10899: PPUSH
10900: CALL_OW 300
10904: IFFALSE 10918
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
10906: LD_INT 1
10908: PPUSH
10909: LD_STRING 13_StevensStatus_1
10911: PPUSH
10912: CALL_OW 39
10916: GO 10928
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
10918: LD_INT 0
10920: PPUSH
10921: LD_STRING 13_StevensStatus_1
10923: PPUSH
10924: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
10928: LD_INT 22
10930: PUSH
10931: LD_INT 1
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 21
10940: PUSH
10941: LD_INT 1
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PUSH
10948: LD_INT 2
10950: PUSH
10951: LD_INT 25
10953: PUSH
10954: LD_INT 1
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PUSH
10961: LD_INT 25
10963: PUSH
10964: LD_INT 2
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 25
10973: PUSH
10974: LD_INT 3
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 25
10983: PUSH
10984: LD_INT 4
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: LD_INT 25
10993: PUSH
10994: LD_INT 5
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: PUSH
11001: LD_INT 25
11003: PUSH
11004: LD_INT 8
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: LIST
11024: PPUSH
11025: CALL_OW 69
11029: PPUSH
11030: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11034: LD_EXP 1
11038: PPUSH
11039: LD_EXP 34
11043: PUSH
11044: LD_STRING JMM
11046: STR
11047: PPUSH
11048: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
11052: LD_EXP 8
11056: PPUSH
11057: LD_EXP 34
11061: PUSH
11062: LD_STRING Brown
11064: STR
11065: PPUSH
11066: CALL 6989 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11070: LD_EXP 4
11074: PPUSH
11075: LD_EXP 34
11079: PUSH
11080: LD_STRING Donaldson
11082: STR
11083: PPUSH
11084: CALL 6989 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11088: LD_EXP 5
11092: PPUSH
11093: LD_EXP 34
11097: PUSH
11098: LD_STRING Bobby
11100: STR
11101: PPUSH
11102: CALL 6989 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11106: LD_EXP 6
11110: PPUSH
11111: LD_EXP 34
11115: PUSH
11116: LD_STRING Cyrus
11118: STR
11119: PPUSH
11120: CALL 6989 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11124: LD_EXP 3
11128: PPUSH
11129: LD_EXP 34
11133: PUSH
11134: LD_STRING Lisa
11136: STR
11137: PPUSH
11138: CALL 6989 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
11142: LD_EXP 13
11146: PPUSH
11147: LD_EXP 34
11151: PUSH
11152: LD_STRING Frank
11154: STR
11155: PPUSH
11156: CALL 6989 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11160: LD_EXP 14
11164: PPUSH
11165: LD_EXP 34
11169: PUSH
11170: LD_STRING Kikuchi
11172: STR
11173: PPUSH
11174: CALL 6989 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
11178: LD_EXP 10
11182: PPUSH
11183: LD_EXP 34
11187: PUSH
11188: LD_STRING Houten
11190: STR
11191: PPUSH
11192: CALL 6989 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
11196: LD_EXP 12
11200: PPUSH
11201: LD_EXP 34
11205: PUSH
11206: LD_STRING Gary
11208: STR
11209: PPUSH
11210: CALL 6989 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
11214: LD_EXP 11
11218: PPUSH
11219: LD_EXP 34
11223: PUSH
11224: LD_STRING Cornell
11226: STR
11227: PPUSH
11228: CALL 6989 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
11232: LD_EXP 7
11236: PPUSH
11237: LD_EXP 34
11241: PUSH
11242: LD_STRING Denis
11244: STR
11245: PPUSH
11246: CALL 6989 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11250: LD_EXP 9
11254: PPUSH
11255: LD_EXP 34
11259: PUSH
11260: LD_STRING Gladstone
11262: STR
11263: PPUSH
11264: CALL 6989 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
11268: LD_EXP 2
11272: PPUSH
11273: LD_EXP 34
11277: PUSH
11278: LD_STRING Stevens
11280: STR
11281: PPUSH
11282: CALL 6989 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
11286: LD_INT 50
11288: PUSH
11289: EMPTY
11290: LIST
11291: PUSH
11292: LD_INT 22
11294: PUSH
11295: LD_INT 1
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PUSH
11302: LD_INT 21
11304: PUSH
11305: LD_INT 1
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PUSH
11312: LD_INT 2
11314: PUSH
11315: LD_INT 25
11317: PUSH
11318: LD_INT 1
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 25
11327: PUSH
11328: LD_INT 2
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: LD_INT 25
11337: PUSH
11338: LD_INT 3
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: PUSH
11345: LD_INT 25
11347: PUSH
11348: LD_INT 4
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: PUSH
11355: LD_INT 25
11357: PUSH
11358: LD_INT 5
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 25
11367: PUSH
11368: LD_INT 8
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: PPUSH
11390: CALL_OW 69
11394: PUSH
11395: LD_EXP 1
11399: PUSH
11400: LD_EXP 8
11404: PUSH
11405: LD_EXP 4
11409: PUSH
11410: LD_EXP 5
11414: PUSH
11415: LD_EXP 6
11419: PUSH
11420: LD_EXP 3
11424: PUSH
11425: LD_EXP 13
11429: PUSH
11430: LD_EXP 9
11434: PUSH
11435: LD_EXP 14
11439: PUSH
11440: LD_EXP 7
11444: PUSH
11445: LD_EXP 10
11449: PUSH
11450: LD_EXP 12
11454: PUSH
11455: LD_EXP 11
11459: PUSH
11460: LD_EXP 2
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: DIFF
11481: PPUSH
11482: LD_STRING 13_other_survivors
11484: PPUSH
11485: CALL_OW 38
// YouWin ;
11489: CALL_OW 103
// end ; end_of_file
11493: PPOPN 3
11495: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do var i , tmp , yourSiberite ;
11496: LD_EXP 32
11500: PUSH
11501: LD_INT 2
11503: EQUAL
11504: PUSH
11505: LD_INT 34
11507: PUSH
11508: LD_INT 8
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PPUSH
11515: CALL_OW 69
11519: NOT
11520: AND
11521: IFFALSE 11657
11523: GO 11525
11525: DISABLE
11526: LD_INT 0
11528: PPUSH
11529: PPUSH
11530: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11531: LD_ADDR_VAR 0 2
11535: PUSH
11536: LD_INT 22
11538: PUSH
11539: LD_INT 1
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: PUSH
11546: LD_INT 21
11548: PUSH
11549: LD_INT 3
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 2
11558: PUSH
11559: LD_INT 30
11561: PUSH
11562: LD_INT 0
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 30
11571: PUSH
11572: LD_INT 1
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: LIST
11588: PPUSH
11589: CALL_OW 69
11593: ST_TO_ADDR
// for i in tmp do
11594: LD_ADDR_VAR 0 1
11598: PUSH
11599: LD_VAR 0 2
11603: PUSH
11604: FOR_IN
11605: IFFALSE 11638
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11607: LD_ADDR_VAR 0 3
11611: PUSH
11612: LD_VAR 0 3
11616: PUSH
11617: LD_VAR 0 1
11621: PPUSH
11622: CALL_OW 274
11626: PPUSH
11627: LD_INT 3
11629: PPUSH
11630: CALL_OW 275
11634: PLUS
11635: ST_TO_ADDR
11636: GO 11604
11638: POP
11639: POP
// if yourSiberite < 79 then
11640: LD_VAR 0 3
11644: PUSH
11645: LD_INT 79
11647: LESS
11648: IFFALSE 11657
// YouLost ( siberite ) ;
11650: LD_STRING siberite
11652: PPUSH
11653: CALL_OW 104
// end ; end_of_file
11657: PPOPN 3
11659: END
// every 8 8$0 + 7 7$0 do
11660: GO 11662
11662: DISABLE
// begin enable ;
11663: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 1 , 3 ) , 0 , 0 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11664: LD_INT 8
11666: PPUSH
11667: LD_INT 2
11669: PPUSH
11670: LD_INT 1
11672: PPUSH
11673: LD_INT 3
11675: PPUSH
11676: CALL_OW 12
11680: PPUSH
11681: LD_INT 0
11683: PPUSH
11684: LD_INT 0
11686: PPUSH
11687: LD_INT 2
11689: PUSH
11690: LD_INT 3
11692: PUSH
11693: LD_INT 4
11695: PUSH
11696: LD_INT 5
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: PUSH
11705: LD_OWVAR 67
11709: ARRAY
11710: PPUSH
11711: LD_INT 0
11713: PPUSH
11714: LD_INT 10
11716: PPUSH
11717: LD_INT 8
11719: PUSH
11720: LD_INT 9
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 1
11729: PPUSH
11730: LD_INT 2
11732: PPUSH
11733: CALL_OW 12
11737: ARRAY
11738: PPUSH
11739: LD_INT 12
11741: PPUSH
11742: LD_INT 1
11744: PPUSH
11745: CALL 7029 0 11
// end ;
11749: END
// every 8 8$00 + 7 7$0 do var i , veh , xy ;
11750: GO 11752
11752: DISABLE
11753: LD_INT 0
11755: PPUSH
11756: PPUSH
11757: PPUSH
// begin enable ;
11758: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11759: LD_ADDR_EXP 33
11763: PUSH
11764: LD_EXP 33
11768: PUSH
11769: LD_INT 1
11771: PLUS
11772: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
11773: LD_INT 22
11775: PUSH
11776: LD_INT 8
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 3
11785: PUSH
11786: LD_INT 58
11788: PUSH
11789: EMPTY
11790: LIST
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: LD_INT 34
11798: PUSH
11799: LD_INT 31
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: LIST
11810: PPUSH
11811: CALL_OW 69
11815: PUSH
11816: LD_INT 2
11818: LESS
11819: IFFALSE 12063
// begin uc_side := 8 ;
11821: LD_ADDR_OWVAR 20
11825: PUSH
11826: LD_INT 8
11828: ST_TO_ADDR
// uc_nation := 2 ;
11829: LD_ADDR_OWVAR 21
11833: PUSH
11834: LD_INT 2
11836: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
11837: LD_INT 14
11839: PPUSH
11840: LD_INT 3
11842: PPUSH
11843: LD_INT 1
11845: PPUSH
11846: LD_INT 31
11848: PPUSH
11849: LD_INT 100
11851: PPUSH
11852: CALL 36933 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
11856: LD_ADDR_VAR 0 1
11860: PUSH
11861: DOUBLE
11862: LD_INT 22
11864: PUSH
11865: LD_INT 8
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: LD_INT 3
11874: PUSH
11875: LD_INT 58
11877: PUSH
11878: EMPTY
11879: LIST
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 34
11887: PUSH
11888: LD_INT 31
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: PPUSH
11900: CALL_OW 69
11904: PUSH
11905: LD_INT 1
11907: PLUS
11908: DEC
11909: ST_TO_ADDR
11910: LD_INT 2
11912: PUSH
11913: FOR_TO
11914: IFFALSE 12061
// begin veh := CreateVehicle ;
11916: LD_ADDR_VAR 0 2
11920: PUSH
11921: CALL_OW 45
11925: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11926: LD_VAR 0 2
11930: PPUSH
11931: LD_INT 5
11933: PPUSH
11934: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
11938: LD_ADDR_VAR 0 3
11942: PUSH
11943: LD_INT 181
11945: PUSH
11946: LD_INT 105
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 137
11955: PUSH
11956: LD_INT 6
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: LD_VAR 0 1
11971: PUSH
11972: LD_INT 2
11974: MOD
11975: PUSH
11976: LD_INT 1
11978: PLUS
11979: ARRAY
11980: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
11981: LD_VAR 0 2
11985: PPUSH
11986: LD_VAR 0 3
11990: PUSH
11991: LD_INT 1
11993: ARRAY
11994: PPUSH
11995: LD_VAR 0 3
11999: PUSH
12000: LD_INT 2
12002: ARRAY
12003: PPUSH
12004: LD_INT 12
12006: PPUSH
12007: LD_INT 0
12009: PPUSH
12010: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
12014: LD_INT 0
12016: PPUSH
12017: LD_INT 7
12019: PUSH
12020: LD_INT 9
12022: PUSH
12023: LD_INT 10
12025: PUSH
12026: LD_INT 10
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: PUSH
12035: LD_OWVAR 67
12039: ARRAY
12040: PPUSH
12041: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12045: CALL_OW 44
12049: PPUSH
12050: LD_VAR 0 2
12054: PPUSH
12055: CALL_OW 52
// end ;
12059: GO 11913
12061: POP
12062: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 10 ) , 10 ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
12063: LD_INT 8
12065: PUSH
12066: LD_INT 9
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PUSH
12073: LD_INT 1
12075: PPUSH
12076: LD_INT 2
12078: PPUSH
12079: CALL_OW 12
12083: ARRAY
12084: PPUSH
12085: LD_INT 8
12087: PPUSH
12088: LD_INT 4
12090: PPUSH
12091: LD_INT 6
12093: PPUSH
12094: CALL_OW 12
12098: PUSH
12099: LD_INT 6
12101: PPUSH
12102: LD_INT 9
12104: PPUSH
12105: CALL_OW 12
12109: PUSH
12110: LD_INT 7
12112: PPUSH
12113: LD_INT 10
12115: PPUSH
12116: CALL_OW 12
12120: PUSH
12121: LD_INT 10
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: PUSH
12130: LD_OWVAR 67
12134: ARRAY
12135: PPUSH
12136: LD_INT 10
12138: PPUSH
12139: LD_INT 2
12141: PPUSH
12142: LD_INT 3
12144: PPUSH
12145: LD_INT 5
12147: PUSH
12148: LD_INT 2
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: PPUSH
12155: EMPTY
12156: PPUSH
12157: LD_INT 25
12159: PUSH
12160: LD_INT 26
12162: PUSH
12163: LD_INT 27
12165: PUSH
12166: LD_INT 28
12168: PUSH
12169: LD_INT 29
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: PPUSH
12179: EMPTY
12180: PPUSH
12181: LD_INT 1
12183: PPUSH
12184: CALL 8097 0 11
// end ;
12188: PPOPN 3
12190: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do var i , veh ;
12191: LD_EXP 33
12195: PUSH
12196: LD_INT 4
12198: GREATEREQUAL
12199: IFFALSE 12547
12201: GO 12203
12203: DISABLE
12204: LD_INT 0
12206: PPUSH
12207: PPUSH
// begin enable ;
12208: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
12209: LD_ADDR_EXP 33
12213: PUSH
12214: LD_EXP 33
12218: PUSH
12219: LD_INT 1
12221: PLUS
12222: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12223: LD_INT 22
12225: PUSH
12226: LD_INT 8
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 3
12235: PUSH
12236: LD_INT 58
12238: PUSH
12239: EMPTY
12240: LIST
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: LD_INT 34
12248: PUSH
12249: LD_INT 31
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: LIST
12260: PPUSH
12261: CALL_OW 69
12265: PUSH
12266: LD_INT 2
12268: LESS
12269: IFFALSE 12458
// begin uc_side := 8 ;
12271: LD_ADDR_OWVAR 20
12275: PUSH
12276: LD_INT 8
12278: ST_TO_ADDR
// uc_nation := 2 ;
12279: LD_ADDR_OWVAR 21
12283: PUSH
12284: LD_INT 2
12286: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12287: LD_INT 14
12289: PPUSH
12290: LD_INT 3
12292: PPUSH
12293: LD_INT 1
12295: PPUSH
12296: LD_INT 31
12298: PPUSH
12299: LD_INT 100
12301: PPUSH
12302: CALL 36933 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12306: LD_ADDR_VAR 0 1
12310: PUSH
12311: DOUBLE
12312: LD_INT 22
12314: PUSH
12315: LD_INT 8
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 3
12324: PUSH
12325: LD_INT 58
12327: PUSH
12328: EMPTY
12329: LIST
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PUSH
12335: LD_INT 34
12337: PUSH
12338: LD_INT 31
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 69
12354: PUSH
12355: LD_INT 1
12357: PLUS
12358: DEC
12359: ST_TO_ADDR
12360: LD_INT 2
12362: PUSH
12363: FOR_TO
12364: IFFALSE 12456
// begin veh := CreateVehicle ;
12366: LD_ADDR_VAR 0 2
12370: PUSH
12371: CALL_OW 45
12375: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12376: LD_VAR 0 2
12380: PPUSH
12381: LD_INT 5
12383: PPUSH
12384: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12388: LD_VAR 0 2
12392: PPUSH
12393: LD_INT 181
12395: PPUSH
12396: LD_INT 105
12398: PPUSH
12399: LD_INT 12
12401: PPUSH
12402: LD_INT 0
12404: PPUSH
12405: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
12409: LD_INT 0
12411: PPUSH
12412: LD_INT 8
12414: PUSH
12415: LD_INT 9
12417: PUSH
12418: LD_INT 10
12420: PUSH
12421: LD_INT 10
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: PUSH
12430: LD_OWVAR 67
12434: ARRAY
12435: PPUSH
12436: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12440: CALL_OW 44
12444: PPUSH
12445: LD_VAR 0 2
12449: PPUSH
12450: CALL_OW 52
// end ;
12454: GO 12363
12456: POP
12457: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 , 4 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
12458: LD_INT 8
12460: PUSH
12461: LD_INT 9
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PUSH
12468: LD_INT 1
12470: PPUSH
12471: LD_INT 2
12473: PPUSH
12474: CALL_OW 12
12478: ARRAY
12479: PPUSH
12480: LD_INT 8
12482: PPUSH
12483: LD_INT 1
12485: PUSH
12486: LD_INT 2
12488: PUSH
12489: LD_INT 3
12491: PUSH
12492: LD_INT 4
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: PUSH
12501: LD_OWVAR 67
12505: ARRAY
12506: PPUSH
12507: LD_INT 10
12509: PPUSH
12510: LD_INT 3
12512: PPUSH
12513: LD_INT 3
12515: PPUSH
12516: LD_INT 1
12518: PUSH
12519: LD_INT 1
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PPUSH
12526: LD_INT 47
12528: PUSH
12529: LD_INT 47
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PPUSH
12536: EMPTY
12537: PPUSH
12538: EMPTY
12539: PPUSH
12540: LD_INT 1
12542: PPUSH
12543: CALL 8097 0 11
// end ;
12547: PPOPN 2
12549: END
// every 1 1$0 trigger eventVar2 = 1 do var i , veh ;
12550: LD_EXP 36
12554: PUSH
12555: LD_INT 1
12557: EQUAL
12558: IFFALSE 12903
12560: GO 12562
12562: DISABLE
12563: LD_INT 0
12565: PPUSH
12566: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12567: LD_INT 22
12569: PUSH
12570: LD_INT 8
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PUSH
12577: LD_INT 3
12579: PUSH
12580: LD_INT 58
12582: PUSH
12583: EMPTY
12584: LIST
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: LD_INT 34
12592: PUSH
12593: LD_INT 31
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: LIST
12604: PPUSH
12605: CALL_OW 69
12609: PUSH
12610: LD_INT 2
12612: LESS
12613: IFFALSE 12802
// begin uc_side := 8 ;
12615: LD_ADDR_OWVAR 20
12619: PUSH
12620: LD_INT 8
12622: ST_TO_ADDR
// uc_nation := 2 ;
12623: LD_ADDR_OWVAR 21
12627: PUSH
12628: LD_INT 2
12630: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12631: LD_INT 14
12633: PPUSH
12634: LD_INT 3
12636: PPUSH
12637: LD_INT 1
12639: PPUSH
12640: LD_INT 31
12642: PPUSH
12643: LD_INT 100
12645: PPUSH
12646: CALL 36933 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12650: LD_ADDR_VAR 0 1
12654: PUSH
12655: DOUBLE
12656: LD_INT 22
12658: PUSH
12659: LD_INT 8
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PUSH
12666: LD_INT 3
12668: PUSH
12669: LD_INT 58
12671: PUSH
12672: EMPTY
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PUSH
12679: LD_INT 34
12681: PUSH
12682: LD_INT 31
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: LIST
12693: PPUSH
12694: CALL_OW 69
12698: PUSH
12699: LD_INT 1
12701: PLUS
12702: DEC
12703: ST_TO_ADDR
12704: LD_INT 2
12706: PUSH
12707: FOR_TO
12708: IFFALSE 12800
// begin veh := CreateVehicle ;
12710: LD_ADDR_VAR 0 2
12714: PUSH
12715: CALL_OW 45
12719: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12720: LD_VAR 0 2
12724: PPUSH
12725: LD_INT 5
12727: PPUSH
12728: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12732: LD_VAR 0 2
12736: PPUSH
12737: LD_INT 181
12739: PPUSH
12740: LD_INT 105
12742: PPUSH
12743: LD_INT 12
12745: PPUSH
12746: LD_INT 0
12748: PPUSH
12749: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
12753: LD_INT 0
12755: PPUSH
12756: LD_INT 8
12758: PUSH
12759: LD_INT 9
12761: PUSH
12762: LD_INT 10
12764: PUSH
12765: LD_INT 10
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: PUSH
12774: LD_OWVAR 67
12778: ARRAY
12779: PPUSH
12780: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12784: CALL_OW 44
12788: PPUSH
12789: LD_VAR 0 2
12793: PPUSH
12794: CALL_OW 52
// end ;
12798: GO 12707
12800: POP
12801: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 5 , 7 , 8 , 9 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
12802: LD_INT 8
12804: PUSH
12805: LD_INT 9
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: LD_INT 1
12814: PPUSH
12815: LD_INT 2
12817: PPUSH
12818: CALL_OW 12
12822: ARRAY
12823: PPUSH
12824: LD_INT 3
12826: PPUSH
12827: LD_INT 5
12829: PUSH
12830: LD_INT 7
12832: PUSH
12833: LD_INT 8
12835: PUSH
12836: LD_INT 9
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: PUSH
12845: LD_OWVAR 67
12849: ARRAY
12850: PPUSH
12851: LD_INT 10
12853: PPUSH
12854: LD_INT 3
12856: PPUSH
12857: LD_INT 3
12859: PPUSH
12860: LD_INT 3
12862: PUSH
12863: LD_INT 3
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: PPUSH
12870: LD_INT 46
12872: PUSH
12873: LD_INT 44
12875: PUSH
12876: LD_INT 45
12878: PUSH
12879: LD_INT 47
12881: PUSH
12882: LD_INT 49
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: PPUSH
12892: EMPTY
12893: PPUSH
12894: EMPTY
12895: PPUSH
12896: LD_INT 1
12898: PPUSH
12899: CALL 8097 0 11
// end ; end_of_file
12903: PPOPN 2
12905: END
// every 1 1$0 do
12906: GO 12908
12908: DISABLE
// begin enable ;
12909: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
12910: LD_INT 3
12912: PPUSH
12913: LD_INT 5
12915: PPUSH
12916: CALL_OW 12
12920: PPUSH
12921: LD_INT 13
12923: PPUSH
12924: LD_INT 1
12926: PPUSH
12927: CALL_OW 55
// end ; end_of_file
12931: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12932: LD_INT 0
12934: PPUSH
// ar_miner := 81 ;
12935: LD_ADDR_EXP 50
12939: PUSH
12940: LD_INT 81
12942: ST_TO_ADDR
// ar_crane := 88 ;
12943: LD_ADDR_EXP 49
12947: PUSH
12948: LD_INT 88
12950: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12951: LD_ADDR_EXP 44
12955: PUSH
12956: LD_INT 89
12958: ST_TO_ADDR
// us_hack := 99 ;
12959: LD_ADDR_EXP 45
12963: PUSH
12964: LD_INT 99
12966: ST_TO_ADDR
// us_artillery := 97 ;
12967: LD_ADDR_EXP 46
12971: PUSH
12972: LD_INT 97
12974: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12975: LD_ADDR_EXP 47
12979: PUSH
12980: LD_INT 91
12982: ST_TO_ADDR
// ar_mortar := 92 ;
12983: LD_ADDR_EXP 48
12987: PUSH
12988: LD_INT 92
12990: ST_TO_ADDR
// ru_radar := 98 ;
12991: LD_ADDR_EXP 43
12995: PUSH
12996: LD_INT 98
12998: ST_TO_ADDR
// tech_Artillery := 80 ;
12999: LD_ADDR_EXP 51
13003: PUSH
13004: LD_INT 80
13006: ST_TO_ADDR
// tech_RadMat := 81 ;
13007: LD_ADDR_EXP 52
13011: PUSH
13012: LD_INT 81
13014: ST_TO_ADDR
// tech_BasicTools := 82 ;
13015: LD_ADDR_EXP 53
13019: PUSH
13020: LD_INT 82
13022: ST_TO_ADDR
// tech_Cargo := 83 ;
13023: LD_ADDR_EXP 54
13027: PUSH
13028: LD_INT 83
13030: ST_TO_ADDR
// tech_Track := 84 ;
13031: LD_ADDR_EXP 55
13035: PUSH
13036: LD_INT 84
13038: ST_TO_ADDR
// tech_Crane := 85 ;
13039: LD_ADDR_EXP 56
13043: PUSH
13044: LD_INT 85
13046: ST_TO_ADDR
// tech_Bulldozer := 86 ;
13047: LD_ADDR_EXP 57
13051: PUSH
13052: LD_INT 86
13054: ST_TO_ADDR
// tech_Hovercraft := 87 ;
13055: LD_ADDR_EXP 58
13059: PUSH
13060: LD_INT 87
13062: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
13063: LD_ADDR_EXP 59
13067: PUSH
13068: LD_INT 88
13070: ST_TO_ADDR
// class_mastodont := 31 ;
13071: LD_ADDR_EXP 60
13075: PUSH
13076: LD_INT 31
13078: ST_TO_ADDR
// class_horse := 21 ;
13079: LD_ADDR_EXP 61
13083: PUSH
13084: LD_INT 21
13086: ST_TO_ADDR
// end ;
13087: LD_VAR 0 1
13091: RET
// every 1 do
13092: GO 13094
13094: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
13095: CALL 12932 0 0
13099: END
// every 0 0$1 do
13100: GO 13102
13102: DISABLE
// begin enable ;
13103: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
13104: LD_STRING updateTimer(
13106: PUSH
13107: LD_OWVAR 1
13111: STR
13112: PUSH
13113: LD_STRING );
13115: STR
13116: PPUSH
13117: CALL_OW 559
// end ;
13121: END
// on MapStart ( p ) do begin if streamModeActive then
13122: LD_EXP 62
13126: IFFALSE 13135
// DefineStreamItems ( true ) ;
13128: LD_INT 1
13130: PPUSH
13131: CALL 14783 0 1
// UpdateFactoryWaypoints ( ) ;
13135: CALL 28367 0 0
// end ;
13139: PPOPN 1
13141: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13142: LD_INT 0
13144: PPUSH
// if p2 = 100 then
13145: LD_VAR 0 2
13149: PUSH
13150: LD_INT 100
13152: EQUAL
13153: IFFALSE 14156
// begin if not StreamModeActive then
13155: LD_EXP 62
13159: NOT
13160: IFFALSE 13170
// StreamModeActive := true ;
13162: LD_ADDR_EXP 62
13166: PUSH
13167: LD_INT 1
13169: ST_TO_ADDR
// if p3 = 0 then
13170: LD_VAR 0 3
13174: PUSH
13175: LD_INT 0
13177: EQUAL
13178: IFFALSE 13184
// InitStreamMode ;
13180: CALL 14319 0 0
// if p3 = 1 then
13184: LD_VAR 0 3
13188: PUSH
13189: LD_INT 1
13191: EQUAL
13192: IFFALSE 13202
// sRocket := true ;
13194: LD_ADDR_EXP 67
13198: PUSH
13199: LD_INT 1
13201: ST_TO_ADDR
// if p3 = 2 then
13202: LD_VAR 0 3
13206: PUSH
13207: LD_INT 2
13209: EQUAL
13210: IFFALSE 13220
// sSpeed := true ;
13212: LD_ADDR_EXP 66
13216: PUSH
13217: LD_INT 1
13219: ST_TO_ADDR
// if p3 = 3 then
13220: LD_VAR 0 3
13224: PUSH
13225: LD_INT 3
13227: EQUAL
13228: IFFALSE 13238
// sEngine := true ;
13230: LD_ADDR_EXP 68
13234: PUSH
13235: LD_INT 1
13237: ST_TO_ADDR
// if p3 = 4 then
13238: LD_VAR 0 3
13242: PUSH
13243: LD_INT 4
13245: EQUAL
13246: IFFALSE 13256
// sSpec := true ;
13248: LD_ADDR_EXP 65
13252: PUSH
13253: LD_INT 1
13255: ST_TO_ADDR
// if p3 = 5 then
13256: LD_VAR 0 3
13260: PUSH
13261: LD_INT 5
13263: EQUAL
13264: IFFALSE 13274
// sLevel := true ;
13266: LD_ADDR_EXP 69
13270: PUSH
13271: LD_INT 1
13273: ST_TO_ADDR
// if p3 = 6 then
13274: LD_VAR 0 3
13278: PUSH
13279: LD_INT 6
13281: EQUAL
13282: IFFALSE 13292
// sArmoury := true ;
13284: LD_ADDR_EXP 70
13288: PUSH
13289: LD_INT 1
13291: ST_TO_ADDR
// if p3 = 7 then
13292: LD_VAR 0 3
13296: PUSH
13297: LD_INT 7
13299: EQUAL
13300: IFFALSE 13310
// sRadar := true ;
13302: LD_ADDR_EXP 71
13306: PUSH
13307: LD_INT 1
13309: ST_TO_ADDR
// if p3 = 8 then
13310: LD_VAR 0 3
13314: PUSH
13315: LD_INT 8
13317: EQUAL
13318: IFFALSE 13328
// sBunker := true ;
13320: LD_ADDR_EXP 72
13324: PUSH
13325: LD_INT 1
13327: ST_TO_ADDR
// if p3 = 9 then
13328: LD_VAR 0 3
13332: PUSH
13333: LD_INT 9
13335: EQUAL
13336: IFFALSE 13346
// sHack := true ;
13338: LD_ADDR_EXP 73
13342: PUSH
13343: LD_INT 1
13345: ST_TO_ADDR
// if p3 = 10 then
13346: LD_VAR 0 3
13350: PUSH
13351: LD_INT 10
13353: EQUAL
13354: IFFALSE 13364
// sFire := true ;
13356: LD_ADDR_EXP 74
13360: PUSH
13361: LD_INT 1
13363: ST_TO_ADDR
// if p3 = 11 then
13364: LD_VAR 0 3
13368: PUSH
13369: LD_INT 11
13371: EQUAL
13372: IFFALSE 13382
// sRefresh := true ;
13374: LD_ADDR_EXP 75
13378: PUSH
13379: LD_INT 1
13381: ST_TO_ADDR
// if p3 = 12 then
13382: LD_VAR 0 3
13386: PUSH
13387: LD_INT 12
13389: EQUAL
13390: IFFALSE 13400
// sExp := true ;
13392: LD_ADDR_EXP 76
13396: PUSH
13397: LD_INT 1
13399: ST_TO_ADDR
// if p3 = 13 then
13400: LD_VAR 0 3
13404: PUSH
13405: LD_INT 13
13407: EQUAL
13408: IFFALSE 13418
// sDepot := true ;
13410: LD_ADDR_EXP 77
13414: PUSH
13415: LD_INT 1
13417: ST_TO_ADDR
// if p3 = 14 then
13418: LD_VAR 0 3
13422: PUSH
13423: LD_INT 14
13425: EQUAL
13426: IFFALSE 13436
// sFlag := true ;
13428: LD_ADDR_EXP 78
13432: PUSH
13433: LD_INT 1
13435: ST_TO_ADDR
// if p3 = 15 then
13436: LD_VAR 0 3
13440: PUSH
13441: LD_INT 15
13443: EQUAL
13444: IFFALSE 13454
// sKamikadze := true ;
13446: LD_ADDR_EXP 86
13450: PUSH
13451: LD_INT 1
13453: ST_TO_ADDR
// if p3 = 16 then
13454: LD_VAR 0 3
13458: PUSH
13459: LD_INT 16
13461: EQUAL
13462: IFFALSE 13472
// sTroll := true ;
13464: LD_ADDR_EXP 87
13468: PUSH
13469: LD_INT 1
13471: ST_TO_ADDR
// if p3 = 17 then
13472: LD_VAR 0 3
13476: PUSH
13477: LD_INT 17
13479: EQUAL
13480: IFFALSE 13490
// sSlow := true ;
13482: LD_ADDR_EXP 88
13486: PUSH
13487: LD_INT 1
13489: ST_TO_ADDR
// if p3 = 18 then
13490: LD_VAR 0 3
13494: PUSH
13495: LD_INT 18
13497: EQUAL
13498: IFFALSE 13508
// sLack := true ;
13500: LD_ADDR_EXP 89
13504: PUSH
13505: LD_INT 1
13507: ST_TO_ADDR
// if p3 = 19 then
13508: LD_VAR 0 3
13512: PUSH
13513: LD_INT 19
13515: EQUAL
13516: IFFALSE 13526
// sTank := true ;
13518: LD_ADDR_EXP 91
13522: PUSH
13523: LD_INT 1
13525: ST_TO_ADDR
// if p3 = 20 then
13526: LD_VAR 0 3
13530: PUSH
13531: LD_INT 20
13533: EQUAL
13534: IFFALSE 13544
// sRemote := true ;
13536: LD_ADDR_EXP 92
13540: PUSH
13541: LD_INT 1
13543: ST_TO_ADDR
// if p3 = 21 then
13544: LD_VAR 0 3
13548: PUSH
13549: LD_INT 21
13551: EQUAL
13552: IFFALSE 13562
// sPowell := true ;
13554: LD_ADDR_EXP 93
13558: PUSH
13559: LD_INT 1
13561: ST_TO_ADDR
// if p3 = 22 then
13562: LD_VAR 0 3
13566: PUSH
13567: LD_INT 22
13569: EQUAL
13570: IFFALSE 13580
// sTeleport := true ;
13572: LD_ADDR_EXP 96
13576: PUSH
13577: LD_INT 1
13579: ST_TO_ADDR
// if p3 = 23 then
13580: LD_VAR 0 3
13584: PUSH
13585: LD_INT 23
13587: EQUAL
13588: IFFALSE 13598
// sOilTower := true ;
13590: LD_ADDR_EXP 98
13594: PUSH
13595: LD_INT 1
13597: ST_TO_ADDR
// if p3 = 24 then
13598: LD_VAR 0 3
13602: PUSH
13603: LD_INT 24
13605: EQUAL
13606: IFFALSE 13616
// sShovel := true ;
13608: LD_ADDR_EXP 99
13612: PUSH
13613: LD_INT 1
13615: ST_TO_ADDR
// if p3 = 25 then
13616: LD_VAR 0 3
13620: PUSH
13621: LD_INT 25
13623: EQUAL
13624: IFFALSE 13634
// sSheik := true ;
13626: LD_ADDR_EXP 100
13630: PUSH
13631: LD_INT 1
13633: ST_TO_ADDR
// if p3 = 26 then
13634: LD_VAR 0 3
13638: PUSH
13639: LD_INT 26
13641: EQUAL
13642: IFFALSE 13652
// sEarthquake := true ;
13644: LD_ADDR_EXP 102
13648: PUSH
13649: LD_INT 1
13651: ST_TO_ADDR
// if p3 = 27 then
13652: LD_VAR 0 3
13656: PUSH
13657: LD_INT 27
13659: EQUAL
13660: IFFALSE 13670
// sAI := true ;
13662: LD_ADDR_EXP 103
13666: PUSH
13667: LD_INT 1
13669: ST_TO_ADDR
// if p3 = 28 then
13670: LD_VAR 0 3
13674: PUSH
13675: LD_INT 28
13677: EQUAL
13678: IFFALSE 13688
// sCargo := true ;
13680: LD_ADDR_EXP 106
13684: PUSH
13685: LD_INT 1
13687: ST_TO_ADDR
// if p3 = 29 then
13688: LD_VAR 0 3
13692: PUSH
13693: LD_INT 29
13695: EQUAL
13696: IFFALSE 13706
// sDLaser := true ;
13698: LD_ADDR_EXP 107
13702: PUSH
13703: LD_INT 1
13705: ST_TO_ADDR
// if p3 = 30 then
13706: LD_VAR 0 3
13710: PUSH
13711: LD_INT 30
13713: EQUAL
13714: IFFALSE 13724
// sExchange := true ;
13716: LD_ADDR_EXP 108
13720: PUSH
13721: LD_INT 1
13723: ST_TO_ADDR
// if p3 = 31 then
13724: LD_VAR 0 3
13728: PUSH
13729: LD_INT 31
13731: EQUAL
13732: IFFALSE 13742
// sFac := true ;
13734: LD_ADDR_EXP 109
13738: PUSH
13739: LD_INT 1
13741: ST_TO_ADDR
// if p3 = 32 then
13742: LD_VAR 0 3
13746: PUSH
13747: LD_INT 32
13749: EQUAL
13750: IFFALSE 13760
// sPower := true ;
13752: LD_ADDR_EXP 110
13756: PUSH
13757: LD_INT 1
13759: ST_TO_ADDR
// if p3 = 33 then
13760: LD_VAR 0 3
13764: PUSH
13765: LD_INT 33
13767: EQUAL
13768: IFFALSE 13778
// sRandom := true ;
13770: LD_ADDR_EXP 111
13774: PUSH
13775: LD_INT 1
13777: ST_TO_ADDR
// if p3 = 34 then
13778: LD_VAR 0 3
13782: PUSH
13783: LD_INT 34
13785: EQUAL
13786: IFFALSE 13796
// sShield := true ;
13788: LD_ADDR_EXP 112
13792: PUSH
13793: LD_INT 1
13795: ST_TO_ADDR
// if p3 = 35 then
13796: LD_VAR 0 3
13800: PUSH
13801: LD_INT 35
13803: EQUAL
13804: IFFALSE 13814
// sTime := true ;
13806: LD_ADDR_EXP 113
13810: PUSH
13811: LD_INT 1
13813: ST_TO_ADDR
// if p3 = 36 then
13814: LD_VAR 0 3
13818: PUSH
13819: LD_INT 36
13821: EQUAL
13822: IFFALSE 13832
// sTools := true ;
13824: LD_ADDR_EXP 114
13828: PUSH
13829: LD_INT 1
13831: ST_TO_ADDR
// if p3 = 101 then
13832: LD_VAR 0 3
13836: PUSH
13837: LD_INT 101
13839: EQUAL
13840: IFFALSE 13850
// sSold := true ;
13842: LD_ADDR_EXP 79
13846: PUSH
13847: LD_INT 1
13849: ST_TO_ADDR
// if p3 = 102 then
13850: LD_VAR 0 3
13854: PUSH
13855: LD_INT 102
13857: EQUAL
13858: IFFALSE 13868
// sDiff := true ;
13860: LD_ADDR_EXP 80
13864: PUSH
13865: LD_INT 1
13867: ST_TO_ADDR
// if p3 = 103 then
13868: LD_VAR 0 3
13872: PUSH
13873: LD_INT 103
13875: EQUAL
13876: IFFALSE 13886
// sFog := true ;
13878: LD_ADDR_EXP 83
13882: PUSH
13883: LD_INT 1
13885: ST_TO_ADDR
// if p3 = 104 then
13886: LD_VAR 0 3
13890: PUSH
13891: LD_INT 104
13893: EQUAL
13894: IFFALSE 13904
// sReset := true ;
13896: LD_ADDR_EXP 84
13900: PUSH
13901: LD_INT 1
13903: ST_TO_ADDR
// if p3 = 105 then
13904: LD_VAR 0 3
13908: PUSH
13909: LD_INT 105
13911: EQUAL
13912: IFFALSE 13922
// sSun := true ;
13914: LD_ADDR_EXP 85
13918: PUSH
13919: LD_INT 1
13921: ST_TO_ADDR
// if p3 = 106 then
13922: LD_VAR 0 3
13926: PUSH
13927: LD_INT 106
13929: EQUAL
13930: IFFALSE 13940
// sTiger := true ;
13932: LD_ADDR_EXP 81
13936: PUSH
13937: LD_INT 1
13939: ST_TO_ADDR
// if p3 = 107 then
13940: LD_VAR 0 3
13944: PUSH
13945: LD_INT 107
13947: EQUAL
13948: IFFALSE 13958
// sBomb := true ;
13950: LD_ADDR_EXP 82
13954: PUSH
13955: LD_INT 1
13957: ST_TO_ADDR
// if p3 = 108 then
13958: LD_VAR 0 3
13962: PUSH
13963: LD_INT 108
13965: EQUAL
13966: IFFALSE 13976
// sWound := true ;
13968: LD_ADDR_EXP 90
13972: PUSH
13973: LD_INT 1
13975: ST_TO_ADDR
// if p3 = 109 then
13976: LD_VAR 0 3
13980: PUSH
13981: LD_INT 109
13983: EQUAL
13984: IFFALSE 13994
// sBetray := true ;
13986: LD_ADDR_EXP 94
13990: PUSH
13991: LD_INT 1
13993: ST_TO_ADDR
// if p3 = 110 then
13994: LD_VAR 0 3
13998: PUSH
13999: LD_INT 110
14001: EQUAL
14002: IFFALSE 14012
// sContamin := true ;
14004: LD_ADDR_EXP 95
14008: PUSH
14009: LD_INT 1
14011: ST_TO_ADDR
// if p3 = 111 then
14012: LD_VAR 0 3
14016: PUSH
14017: LD_INT 111
14019: EQUAL
14020: IFFALSE 14030
// sOil := true ;
14022: LD_ADDR_EXP 97
14026: PUSH
14027: LD_INT 1
14029: ST_TO_ADDR
// if p3 = 112 then
14030: LD_VAR 0 3
14034: PUSH
14035: LD_INT 112
14037: EQUAL
14038: IFFALSE 14048
// sStu := true ;
14040: LD_ADDR_EXP 101
14044: PUSH
14045: LD_INT 1
14047: ST_TO_ADDR
// if p3 = 113 then
14048: LD_VAR 0 3
14052: PUSH
14053: LD_INT 113
14055: EQUAL
14056: IFFALSE 14066
// sBazooka := true ;
14058: LD_ADDR_EXP 104
14062: PUSH
14063: LD_INT 1
14065: ST_TO_ADDR
// if p3 = 114 then
14066: LD_VAR 0 3
14070: PUSH
14071: LD_INT 114
14073: EQUAL
14074: IFFALSE 14084
// sMortar := true ;
14076: LD_ADDR_EXP 105
14080: PUSH
14081: LD_INT 1
14083: ST_TO_ADDR
// if p3 = 115 then
14084: LD_VAR 0 3
14088: PUSH
14089: LD_INT 115
14091: EQUAL
14092: IFFALSE 14102
// sRanger := true ;
14094: LD_ADDR_EXP 115
14098: PUSH
14099: LD_INT 1
14101: ST_TO_ADDR
// if p3 = 116 then
14102: LD_VAR 0 3
14106: PUSH
14107: LD_INT 116
14109: EQUAL
14110: IFFALSE 14120
// sComputer := true ;
14112: LD_ADDR_EXP 116
14116: PUSH
14117: LD_INT 1
14119: ST_TO_ADDR
// if p3 = 117 then
14120: LD_VAR 0 3
14124: PUSH
14125: LD_INT 117
14127: EQUAL
14128: IFFALSE 14138
// s30 := true ;
14130: LD_ADDR_EXP 117
14134: PUSH
14135: LD_INT 1
14137: ST_TO_ADDR
// if p3 = 118 then
14138: LD_VAR 0 3
14142: PUSH
14143: LD_INT 118
14145: EQUAL
14146: IFFALSE 14156
// s60 := true ;
14148: LD_ADDR_EXP 118
14152: PUSH
14153: LD_INT 1
14155: ST_TO_ADDR
// end ; if p2 = 101 then
14156: LD_VAR 0 2
14160: PUSH
14161: LD_INT 101
14163: EQUAL
14164: IFFALSE 14292
// begin case p3 of 1 :
14166: LD_VAR 0 3
14170: PUSH
14171: LD_INT 1
14173: DOUBLE
14174: EQUAL
14175: IFTRUE 14179
14177: GO 14186
14179: POP
// hHackUnlimitedResources ; 2 :
14180: CALL 26390 0 0
14184: GO 14292
14186: LD_INT 2
14188: DOUBLE
14189: EQUAL
14190: IFTRUE 14194
14192: GO 14201
14194: POP
// hHackSetLevel10 ; 3 :
14195: CALL 26523 0 0
14199: GO 14292
14201: LD_INT 3
14203: DOUBLE
14204: EQUAL
14205: IFTRUE 14209
14207: GO 14216
14209: POP
// hHackSetLevel10YourUnits ; 4 :
14210: CALL 26608 0 0
14214: GO 14292
14216: LD_INT 4
14218: DOUBLE
14219: EQUAL
14220: IFTRUE 14224
14222: GO 14231
14224: POP
// hHackInvincible ; 5 :
14225: CALL 27056 0 0
14229: GO 14292
14231: LD_INT 5
14233: DOUBLE
14234: EQUAL
14235: IFTRUE 14239
14237: GO 14246
14239: POP
// hHackInvisible ; 6 :
14240: CALL 27167 0 0
14244: GO 14292
14246: LD_INT 6
14248: DOUBLE
14249: EQUAL
14250: IFTRUE 14254
14252: GO 14261
14254: POP
// hHackChangeYourSide ; 7 :
14255: CALL 27224 0 0
14259: GO 14292
14261: LD_INT 7
14263: DOUBLE
14264: EQUAL
14265: IFTRUE 14269
14267: GO 14276
14269: POP
// hHackChangeUnitSide ; 8 :
14270: CALL 27266 0 0
14274: GO 14292
14276: LD_INT 8
14278: DOUBLE
14279: EQUAL
14280: IFTRUE 14284
14282: GO 14291
14284: POP
// hHackFog ; end ;
14285: CALL 27367 0 0
14289: GO 14292
14291: POP
// end ; end ;
14292: LD_VAR 0 7
14296: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
14297: GO 14299
14299: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
14300: LD_STRING initStreamRollete();
14302: PPUSH
14303: CALL_OW 559
// InitStreamMode ;
14307: CALL 14319 0 0
// DefineStreamItems ( false ) ;
14311: LD_INT 0
14313: PPUSH
14314: CALL 14783 0 1
// end ;
14318: END
// function InitStreamMode ; begin
14319: LD_INT 0
14321: PPUSH
// streamModeActive := false ;
14322: LD_ADDR_EXP 62
14326: PUSH
14327: LD_INT 0
14329: ST_TO_ADDR
// normalCounter := 36 ;
14330: LD_ADDR_EXP 63
14334: PUSH
14335: LD_INT 36
14337: ST_TO_ADDR
// hardcoreCounter := 18 ;
14338: LD_ADDR_EXP 64
14342: PUSH
14343: LD_INT 18
14345: ST_TO_ADDR
// sRocket := false ;
14346: LD_ADDR_EXP 67
14350: PUSH
14351: LD_INT 0
14353: ST_TO_ADDR
// sSpeed := false ;
14354: LD_ADDR_EXP 66
14358: PUSH
14359: LD_INT 0
14361: ST_TO_ADDR
// sEngine := false ;
14362: LD_ADDR_EXP 68
14366: PUSH
14367: LD_INT 0
14369: ST_TO_ADDR
// sSpec := false ;
14370: LD_ADDR_EXP 65
14374: PUSH
14375: LD_INT 0
14377: ST_TO_ADDR
// sLevel := false ;
14378: LD_ADDR_EXP 69
14382: PUSH
14383: LD_INT 0
14385: ST_TO_ADDR
// sArmoury := false ;
14386: LD_ADDR_EXP 70
14390: PUSH
14391: LD_INT 0
14393: ST_TO_ADDR
// sRadar := false ;
14394: LD_ADDR_EXP 71
14398: PUSH
14399: LD_INT 0
14401: ST_TO_ADDR
// sBunker := false ;
14402: LD_ADDR_EXP 72
14406: PUSH
14407: LD_INT 0
14409: ST_TO_ADDR
// sHack := false ;
14410: LD_ADDR_EXP 73
14414: PUSH
14415: LD_INT 0
14417: ST_TO_ADDR
// sFire := false ;
14418: LD_ADDR_EXP 74
14422: PUSH
14423: LD_INT 0
14425: ST_TO_ADDR
// sRefresh := false ;
14426: LD_ADDR_EXP 75
14430: PUSH
14431: LD_INT 0
14433: ST_TO_ADDR
// sExp := false ;
14434: LD_ADDR_EXP 76
14438: PUSH
14439: LD_INT 0
14441: ST_TO_ADDR
// sDepot := false ;
14442: LD_ADDR_EXP 77
14446: PUSH
14447: LD_INT 0
14449: ST_TO_ADDR
// sFlag := false ;
14450: LD_ADDR_EXP 78
14454: PUSH
14455: LD_INT 0
14457: ST_TO_ADDR
// sKamikadze := false ;
14458: LD_ADDR_EXP 86
14462: PUSH
14463: LD_INT 0
14465: ST_TO_ADDR
// sTroll := false ;
14466: LD_ADDR_EXP 87
14470: PUSH
14471: LD_INT 0
14473: ST_TO_ADDR
// sSlow := false ;
14474: LD_ADDR_EXP 88
14478: PUSH
14479: LD_INT 0
14481: ST_TO_ADDR
// sLack := false ;
14482: LD_ADDR_EXP 89
14486: PUSH
14487: LD_INT 0
14489: ST_TO_ADDR
// sTank := false ;
14490: LD_ADDR_EXP 91
14494: PUSH
14495: LD_INT 0
14497: ST_TO_ADDR
// sRemote := false ;
14498: LD_ADDR_EXP 92
14502: PUSH
14503: LD_INT 0
14505: ST_TO_ADDR
// sPowell := false ;
14506: LD_ADDR_EXP 93
14510: PUSH
14511: LD_INT 0
14513: ST_TO_ADDR
// sTeleport := false ;
14514: LD_ADDR_EXP 96
14518: PUSH
14519: LD_INT 0
14521: ST_TO_ADDR
// sOilTower := false ;
14522: LD_ADDR_EXP 98
14526: PUSH
14527: LD_INT 0
14529: ST_TO_ADDR
// sShovel := false ;
14530: LD_ADDR_EXP 99
14534: PUSH
14535: LD_INT 0
14537: ST_TO_ADDR
// sSheik := false ;
14538: LD_ADDR_EXP 100
14542: PUSH
14543: LD_INT 0
14545: ST_TO_ADDR
// sEarthquake := false ;
14546: LD_ADDR_EXP 102
14550: PUSH
14551: LD_INT 0
14553: ST_TO_ADDR
// sAI := false ;
14554: LD_ADDR_EXP 103
14558: PUSH
14559: LD_INT 0
14561: ST_TO_ADDR
// sCargo := false ;
14562: LD_ADDR_EXP 106
14566: PUSH
14567: LD_INT 0
14569: ST_TO_ADDR
// sDLaser := false ;
14570: LD_ADDR_EXP 107
14574: PUSH
14575: LD_INT 0
14577: ST_TO_ADDR
// sExchange := false ;
14578: LD_ADDR_EXP 108
14582: PUSH
14583: LD_INT 0
14585: ST_TO_ADDR
// sFac := false ;
14586: LD_ADDR_EXP 109
14590: PUSH
14591: LD_INT 0
14593: ST_TO_ADDR
// sPower := false ;
14594: LD_ADDR_EXP 110
14598: PUSH
14599: LD_INT 0
14601: ST_TO_ADDR
// sRandom := false ;
14602: LD_ADDR_EXP 111
14606: PUSH
14607: LD_INT 0
14609: ST_TO_ADDR
// sShield := false ;
14610: LD_ADDR_EXP 112
14614: PUSH
14615: LD_INT 0
14617: ST_TO_ADDR
// sTime := false ;
14618: LD_ADDR_EXP 113
14622: PUSH
14623: LD_INT 0
14625: ST_TO_ADDR
// sTools := false ;
14626: LD_ADDR_EXP 114
14630: PUSH
14631: LD_INT 0
14633: ST_TO_ADDR
// sSold := false ;
14634: LD_ADDR_EXP 79
14638: PUSH
14639: LD_INT 0
14641: ST_TO_ADDR
// sDiff := false ;
14642: LD_ADDR_EXP 80
14646: PUSH
14647: LD_INT 0
14649: ST_TO_ADDR
// sFog := false ;
14650: LD_ADDR_EXP 83
14654: PUSH
14655: LD_INT 0
14657: ST_TO_ADDR
// sReset := false ;
14658: LD_ADDR_EXP 84
14662: PUSH
14663: LD_INT 0
14665: ST_TO_ADDR
// sSun := false ;
14666: LD_ADDR_EXP 85
14670: PUSH
14671: LD_INT 0
14673: ST_TO_ADDR
// sTiger := false ;
14674: LD_ADDR_EXP 81
14678: PUSH
14679: LD_INT 0
14681: ST_TO_ADDR
// sBomb := false ;
14682: LD_ADDR_EXP 82
14686: PUSH
14687: LD_INT 0
14689: ST_TO_ADDR
// sWound := false ;
14690: LD_ADDR_EXP 90
14694: PUSH
14695: LD_INT 0
14697: ST_TO_ADDR
// sBetray := false ;
14698: LD_ADDR_EXP 94
14702: PUSH
14703: LD_INT 0
14705: ST_TO_ADDR
// sContamin := false ;
14706: LD_ADDR_EXP 95
14710: PUSH
14711: LD_INT 0
14713: ST_TO_ADDR
// sOil := false ;
14714: LD_ADDR_EXP 97
14718: PUSH
14719: LD_INT 0
14721: ST_TO_ADDR
// sStu := false ;
14722: LD_ADDR_EXP 101
14726: PUSH
14727: LD_INT 0
14729: ST_TO_ADDR
// sBazooka := false ;
14730: LD_ADDR_EXP 104
14734: PUSH
14735: LD_INT 0
14737: ST_TO_ADDR
// sMortar := false ;
14738: LD_ADDR_EXP 105
14742: PUSH
14743: LD_INT 0
14745: ST_TO_ADDR
// sRanger := false ;
14746: LD_ADDR_EXP 115
14750: PUSH
14751: LD_INT 0
14753: ST_TO_ADDR
// sComputer := false ;
14754: LD_ADDR_EXP 116
14758: PUSH
14759: LD_INT 0
14761: ST_TO_ADDR
// s30 := false ;
14762: LD_ADDR_EXP 117
14766: PUSH
14767: LD_INT 0
14769: ST_TO_ADDR
// s60 := false ;
14770: LD_ADDR_EXP 118
14774: PUSH
14775: LD_INT 0
14777: ST_TO_ADDR
// end ;
14778: LD_VAR 0 1
14782: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14783: LD_INT 0
14785: PPUSH
14786: PPUSH
14787: PPUSH
14788: PPUSH
14789: PPUSH
14790: PPUSH
14791: PPUSH
// result := [ ] ;
14792: LD_ADDR_VAR 0 2
14796: PUSH
14797: EMPTY
14798: ST_TO_ADDR
// if campaign_id = 1 then
14799: LD_OWVAR 69
14803: PUSH
14804: LD_INT 1
14806: EQUAL
14807: IFFALSE 17973
// begin case mission_number of 1 :
14809: LD_OWVAR 70
14813: PUSH
14814: LD_INT 1
14816: DOUBLE
14817: EQUAL
14818: IFTRUE 14822
14820: GO 14898
14822: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14823: LD_ADDR_VAR 0 2
14827: PUSH
14828: LD_INT 2
14830: PUSH
14831: LD_INT 4
14833: PUSH
14834: LD_INT 11
14836: PUSH
14837: LD_INT 12
14839: PUSH
14840: LD_INT 15
14842: PUSH
14843: LD_INT 16
14845: PUSH
14846: LD_INT 22
14848: PUSH
14849: LD_INT 23
14851: PUSH
14852: LD_INT 26
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: PUSH
14866: LD_INT 101
14868: PUSH
14869: LD_INT 102
14871: PUSH
14872: LD_INT 106
14874: PUSH
14875: LD_INT 116
14877: PUSH
14878: LD_INT 117
14880: PUSH
14881: LD_INT 118
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: ST_TO_ADDR
14896: GO 17971
14898: LD_INT 2
14900: DOUBLE
14901: EQUAL
14902: IFTRUE 14906
14904: GO 14990
14906: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14907: LD_ADDR_VAR 0 2
14911: PUSH
14912: LD_INT 2
14914: PUSH
14915: LD_INT 4
14917: PUSH
14918: LD_INT 11
14920: PUSH
14921: LD_INT 12
14923: PUSH
14924: LD_INT 15
14926: PUSH
14927: LD_INT 16
14929: PUSH
14930: LD_INT 22
14932: PUSH
14933: LD_INT 23
14935: PUSH
14936: LD_INT 26
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: PUSH
14950: LD_INT 101
14952: PUSH
14953: LD_INT 102
14955: PUSH
14956: LD_INT 105
14958: PUSH
14959: LD_INT 106
14961: PUSH
14962: LD_INT 108
14964: PUSH
14965: LD_INT 116
14967: PUSH
14968: LD_INT 117
14970: PUSH
14971: LD_INT 118
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: ST_TO_ADDR
14988: GO 17971
14990: LD_INT 3
14992: DOUBLE
14993: EQUAL
14994: IFTRUE 14998
14996: GO 15086
14998: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14999: LD_ADDR_VAR 0 2
15003: PUSH
15004: LD_INT 2
15006: PUSH
15007: LD_INT 4
15009: PUSH
15010: LD_INT 5
15012: PUSH
15013: LD_INT 11
15015: PUSH
15016: LD_INT 12
15018: PUSH
15019: LD_INT 15
15021: PUSH
15022: LD_INT 16
15024: PUSH
15025: LD_INT 22
15027: PUSH
15028: LD_INT 26
15030: PUSH
15031: LD_INT 36
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: PUSH
15046: LD_INT 101
15048: PUSH
15049: LD_INT 102
15051: PUSH
15052: LD_INT 105
15054: PUSH
15055: LD_INT 106
15057: PUSH
15058: LD_INT 108
15060: PUSH
15061: LD_INT 116
15063: PUSH
15064: LD_INT 117
15066: PUSH
15067: LD_INT 118
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: ST_TO_ADDR
15084: GO 17971
15086: LD_INT 4
15088: DOUBLE
15089: EQUAL
15090: IFTRUE 15094
15092: GO 15190
15094: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
15095: LD_ADDR_VAR 0 2
15099: PUSH
15100: LD_INT 2
15102: PUSH
15103: LD_INT 4
15105: PUSH
15106: LD_INT 5
15108: PUSH
15109: LD_INT 8
15111: PUSH
15112: LD_INT 11
15114: PUSH
15115: LD_INT 12
15117: PUSH
15118: LD_INT 15
15120: PUSH
15121: LD_INT 16
15123: PUSH
15124: LD_INT 22
15126: PUSH
15127: LD_INT 23
15129: PUSH
15130: LD_INT 26
15132: PUSH
15133: LD_INT 36
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: PUSH
15150: LD_INT 101
15152: PUSH
15153: LD_INT 102
15155: PUSH
15156: LD_INT 105
15158: PUSH
15159: LD_INT 106
15161: PUSH
15162: LD_INT 108
15164: PUSH
15165: LD_INT 116
15167: PUSH
15168: LD_INT 117
15170: PUSH
15171: LD_INT 118
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: ST_TO_ADDR
15188: GO 17971
15190: LD_INT 5
15192: DOUBLE
15193: EQUAL
15194: IFTRUE 15198
15196: GO 15310
15198: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
15199: LD_ADDR_VAR 0 2
15203: PUSH
15204: LD_INT 2
15206: PUSH
15207: LD_INT 4
15209: PUSH
15210: LD_INT 5
15212: PUSH
15213: LD_INT 6
15215: PUSH
15216: LD_INT 8
15218: PUSH
15219: LD_INT 11
15221: PUSH
15222: LD_INT 12
15224: PUSH
15225: LD_INT 15
15227: PUSH
15228: LD_INT 16
15230: PUSH
15231: LD_INT 22
15233: PUSH
15234: LD_INT 23
15236: PUSH
15237: LD_INT 25
15239: PUSH
15240: LD_INT 26
15242: PUSH
15243: LD_INT 36
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: PUSH
15262: LD_INT 101
15264: PUSH
15265: LD_INT 102
15267: PUSH
15268: LD_INT 105
15270: PUSH
15271: LD_INT 106
15273: PUSH
15274: LD_INT 108
15276: PUSH
15277: LD_INT 109
15279: PUSH
15280: LD_INT 112
15282: PUSH
15283: LD_INT 116
15285: PUSH
15286: LD_INT 117
15288: PUSH
15289: LD_INT 118
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: ST_TO_ADDR
15308: GO 17971
15310: LD_INT 6
15312: DOUBLE
15313: EQUAL
15314: IFTRUE 15318
15316: GO 15450
15318: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
15319: LD_ADDR_VAR 0 2
15323: PUSH
15324: LD_INT 2
15326: PUSH
15327: LD_INT 4
15329: PUSH
15330: LD_INT 5
15332: PUSH
15333: LD_INT 6
15335: PUSH
15336: LD_INT 8
15338: PUSH
15339: LD_INT 11
15341: PUSH
15342: LD_INT 12
15344: PUSH
15345: LD_INT 15
15347: PUSH
15348: LD_INT 16
15350: PUSH
15351: LD_INT 20
15353: PUSH
15354: LD_INT 21
15356: PUSH
15357: LD_INT 22
15359: PUSH
15360: LD_INT 23
15362: PUSH
15363: LD_INT 25
15365: PUSH
15366: LD_INT 26
15368: PUSH
15369: LD_INT 30
15371: PUSH
15372: LD_INT 31
15374: PUSH
15375: LD_INT 32
15377: PUSH
15378: LD_INT 36
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: PUSH
15402: LD_INT 101
15404: PUSH
15405: LD_INT 102
15407: PUSH
15408: LD_INT 105
15410: PUSH
15411: LD_INT 106
15413: PUSH
15414: LD_INT 108
15416: PUSH
15417: LD_INT 109
15419: PUSH
15420: LD_INT 112
15422: PUSH
15423: LD_INT 116
15425: PUSH
15426: LD_INT 117
15428: PUSH
15429: LD_INT 118
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: ST_TO_ADDR
15448: GO 17971
15450: LD_INT 7
15452: DOUBLE
15453: EQUAL
15454: IFTRUE 15458
15456: GO 15570
15458: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
15459: LD_ADDR_VAR 0 2
15463: PUSH
15464: LD_INT 2
15466: PUSH
15467: LD_INT 4
15469: PUSH
15470: LD_INT 5
15472: PUSH
15473: LD_INT 7
15475: PUSH
15476: LD_INT 11
15478: PUSH
15479: LD_INT 12
15481: PUSH
15482: LD_INT 15
15484: PUSH
15485: LD_INT 16
15487: PUSH
15488: LD_INT 20
15490: PUSH
15491: LD_INT 21
15493: PUSH
15494: LD_INT 22
15496: PUSH
15497: LD_INT 23
15499: PUSH
15500: LD_INT 25
15502: PUSH
15503: LD_INT 26
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 101
15524: PUSH
15525: LD_INT 102
15527: PUSH
15528: LD_INT 103
15530: PUSH
15531: LD_INT 105
15533: PUSH
15534: LD_INT 106
15536: PUSH
15537: LD_INT 108
15539: PUSH
15540: LD_INT 112
15542: PUSH
15543: LD_INT 116
15545: PUSH
15546: LD_INT 117
15548: PUSH
15549: LD_INT 118
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: ST_TO_ADDR
15568: GO 17971
15570: LD_INT 8
15572: DOUBLE
15573: EQUAL
15574: IFTRUE 15578
15576: GO 15718
15578: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15579: LD_ADDR_VAR 0 2
15583: PUSH
15584: LD_INT 2
15586: PUSH
15587: LD_INT 4
15589: PUSH
15590: LD_INT 5
15592: PUSH
15593: LD_INT 6
15595: PUSH
15596: LD_INT 7
15598: PUSH
15599: LD_INT 8
15601: PUSH
15602: LD_INT 11
15604: PUSH
15605: LD_INT 12
15607: PUSH
15608: LD_INT 15
15610: PUSH
15611: LD_INT 16
15613: PUSH
15614: LD_INT 20
15616: PUSH
15617: LD_INT 21
15619: PUSH
15620: LD_INT 22
15622: PUSH
15623: LD_INT 23
15625: PUSH
15626: LD_INT 25
15628: PUSH
15629: LD_INT 26
15631: PUSH
15632: LD_INT 30
15634: PUSH
15635: LD_INT 31
15637: PUSH
15638: LD_INT 32
15640: PUSH
15641: LD_INT 36
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: PUSH
15666: LD_INT 101
15668: PUSH
15669: LD_INT 102
15671: PUSH
15672: LD_INT 103
15674: PUSH
15675: LD_INT 105
15677: PUSH
15678: LD_INT 106
15680: PUSH
15681: LD_INT 108
15683: PUSH
15684: LD_INT 109
15686: PUSH
15687: LD_INT 112
15689: PUSH
15690: LD_INT 116
15692: PUSH
15693: LD_INT 117
15695: PUSH
15696: LD_INT 118
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: ST_TO_ADDR
15716: GO 17971
15718: LD_INT 9
15720: DOUBLE
15721: EQUAL
15722: IFTRUE 15726
15724: GO 15874
15726: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15727: LD_ADDR_VAR 0 2
15731: PUSH
15732: LD_INT 2
15734: PUSH
15735: LD_INT 4
15737: PUSH
15738: LD_INT 5
15740: PUSH
15741: LD_INT 6
15743: PUSH
15744: LD_INT 7
15746: PUSH
15747: LD_INT 8
15749: PUSH
15750: LD_INT 11
15752: PUSH
15753: LD_INT 12
15755: PUSH
15756: LD_INT 15
15758: PUSH
15759: LD_INT 16
15761: PUSH
15762: LD_INT 20
15764: PUSH
15765: LD_INT 21
15767: PUSH
15768: LD_INT 22
15770: PUSH
15771: LD_INT 23
15773: PUSH
15774: LD_INT 25
15776: PUSH
15777: LD_INT 26
15779: PUSH
15780: LD_INT 28
15782: PUSH
15783: LD_INT 30
15785: PUSH
15786: LD_INT 31
15788: PUSH
15789: LD_INT 32
15791: PUSH
15792: LD_INT 36
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 101
15820: PUSH
15821: LD_INT 102
15823: PUSH
15824: LD_INT 103
15826: PUSH
15827: LD_INT 105
15829: PUSH
15830: LD_INT 106
15832: PUSH
15833: LD_INT 108
15835: PUSH
15836: LD_INT 109
15838: PUSH
15839: LD_INT 112
15841: PUSH
15842: LD_INT 114
15844: PUSH
15845: LD_INT 116
15847: PUSH
15848: LD_INT 117
15850: PUSH
15851: LD_INT 118
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: ST_TO_ADDR
15872: GO 17971
15874: LD_INT 10
15876: DOUBLE
15877: EQUAL
15878: IFTRUE 15882
15880: GO 16078
15882: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15883: LD_ADDR_VAR 0 2
15887: PUSH
15888: LD_INT 2
15890: PUSH
15891: LD_INT 4
15893: PUSH
15894: LD_INT 5
15896: PUSH
15897: LD_INT 6
15899: PUSH
15900: LD_INT 7
15902: PUSH
15903: LD_INT 8
15905: PUSH
15906: LD_INT 9
15908: PUSH
15909: LD_INT 10
15911: PUSH
15912: LD_INT 11
15914: PUSH
15915: LD_INT 12
15917: PUSH
15918: LD_INT 13
15920: PUSH
15921: LD_INT 14
15923: PUSH
15924: LD_INT 15
15926: PUSH
15927: LD_INT 16
15929: PUSH
15930: LD_INT 17
15932: PUSH
15933: LD_INT 18
15935: PUSH
15936: LD_INT 19
15938: PUSH
15939: LD_INT 20
15941: PUSH
15942: LD_INT 21
15944: PUSH
15945: LD_INT 22
15947: PUSH
15948: LD_INT 23
15950: PUSH
15951: LD_INT 24
15953: PUSH
15954: LD_INT 25
15956: PUSH
15957: LD_INT 26
15959: PUSH
15960: LD_INT 28
15962: PUSH
15963: LD_INT 30
15965: PUSH
15966: LD_INT 31
15968: PUSH
15969: LD_INT 32
15971: PUSH
15972: LD_INT 36
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: PUSH
16006: LD_INT 101
16008: PUSH
16009: LD_INT 102
16011: PUSH
16012: LD_INT 103
16014: PUSH
16015: LD_INT 104
16017: PUSH
16018: LD_INT 105
16020: PUSH
16021: LD_INT 106
16023: PUSH
16024: LD_INT 107
16026: PUSH
16027: LD_INT 108
16029: PUSH
16030: LD_INT 109
16032: PUSH
16033: LD_INT 110
16035: PUSH
16036: LD_INT 111
16038: PUSH
16039: LD_INT 112
16041: PUSH
16042: LD_INT 114
16044: PUSH
16045: LD_INT 116
16047: PUSH
16048: LD_INT 117
16050: PUSH
16051: LD_INT 118
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: ST_TO_ADDR
16076: GO 17971
16078: LD_INT 11
16080: DOUBLE
16081: EQUAL
16082: IFTRUE 16086
16084: GO 16290
16086: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
16087: LD_ADDR_VAR 0 2
16091: PUSH
16092: LD_INT 2
16094: PUSH
16095: LD_INT 3
16097: PUSH
16098: LD_INT 4
16100: PUSH
16101: LD_INT 5
16103: PUSH
16104: LD_INT 6
16106: PUSH
16107: LD_INT 7
16109: PUSH
16110: LD_INT 8
16112: PUSH
16113: LD_INT 9
16115: PUSH
16116: LD_INT 10
16118: PUSH
16119: LD_INT 11
16121: PUSH
16122: LD_INT 12
16124: PUSH
16125: LD_INT 13
16127: PUSH
16128: LD_INT 14
16130: PUSH
16131: LD_INT 15
16133: PUSH
16134: LD_INT 16
16136: PUSH
16137: LD_INT 17
16139: PUSH
16140: LD_INT 18
16142: PUSH
16143: LD_INT 19
16145: PUSH
16146: LD_INT 20
16148: PUSH
16149: LD_INT 21
16151: PUSH
16152: LD_INT 22
16154: PUSH
16155: LD_INT 23
16157: PUSH
16158: LD_INT 24
16160: PUSH
16161: LD_INT 25
16163: PUSH
16164: LD_INT 26
16166: PUSH
16167: LD_INT 28
16169: PUSH
16170: LD_INT 30
16172: PUSH
16173: LD_INT 31
16175: PUSH
16176: LD_INT 32
16178: PUSH
16179: LD_INT 34
16181: PUSH
16182: LD_INT 36
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 101
16220: PUSH
16221: LD_INT 102
16223: PUSH
16224: LD_INT 103
16226: PUSH
16227: LD_INT 104
16229: PUSH
16230: LD_INT 105
16232: PUSH
16233: LD_INT 106
16235: PUSH
16236: LD_INT 107
16238: PUSH
16239: LD_INT 108
16241: PUSH
16242: LD_INT 109
16244: PUSH
16245: LD_INT 110
16247: PUSH
16248: LD_INT 111
16250: PUSH
16251: LD_INT 112
16253: PUSH
16254: LD_INT 114
16256: PUSH
16257: LD_INT 116
16259: PUSH
16260: LD_INT 117
16262: PUSH
16263: LD_INT 118
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: ST_TO_ADDR
16288: GO 17971
16290: LD_INT 12
16292: DOUBLE
16293: EQUAL
16294: IFTRUE 16298
16296: GO 16518
16298: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
16299: LD_ADDR_VAR 0 2
16303: PUSH
16304: LD_INT 1
16306: PUSH
16307: LD_INT 2
16309: PUSH
16310: LD_INT 3
16312: PUSH
16313: LD_INT 4
16315: PUSH
16316: LD_INT 5
16318: PUSH
16319: LD_INT 6
16321: PUSH
16322: LD_INT 7
16324: PUSH
16325: LD_INT 8
16327: PUSH
16328: LD_INT 9
16330: PUSH
16331: LD_INT 10
16333: PUSH
16334: LD_INT 11
16336: PUSH
16337: LD_INT 12
16339: PUSH
16340: LD_INT 13
16342: PUSH
16343: LD_INT 14
16345: PUSH
16346: LD_INT 15
16348: PUSH
16349: LD_INT 16
16351: PUSH
16352: LD_INT 17
16354: PUSH
16355: LD_INT 18
16357: PUSH
16358: LD_INT 19
16360: PUSH
16361: LD_INT 20
16363: PUSH
16364: LD_INT 21
16366: PUSH
16367: LD_INT 22
16369: PUSH
16370: LD_INT 23
16372: PUSH
16373: LD_INT 24
16375: PUSH
16376: LD_INT 25
16378: PUSH
16379: LD_INT 26
16381: PUSH
16382: LD_INT 27
16384: PUSH
16385: LD_INT 28
16387: PUSH
16388: LD_INT 30
16390: PUSH
16391: LD_INT 31
16393: PUSH
16394: LD_INT 32
16396: PUSH
16397: LD_INT 33
16399: PUSH
16400: LD_INT 34
16402: PUSH
16403: LD_INT 36
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 101
16444: PUSH
16445: LD_INT 102
16447: PUSH
16448: LD_INT 103
16450: PUSH
16451: LD_INT 104
16453: PUSH
16454: LD_INT 105
16456: PUSH
16457: LD_INT 106
16459: PUSH
16460: LD_INT 107
16462: PUSH
16463: LD_INT 108
16465: PUSH
16466: LD_INT 109
16468: PUSH
16469: LD_INT 110
16471: PUSH
16472: LD_INT 111
16474: PUSH
16475: LD_INT 112
16477: PUSH
16478: LD_INT 113
16480: PUSH
16481: LD_INT 114
16483: PUSH
16484: LD_INT 116
16486: PUSH
16487: LD_INT 117
16489: PUSH
16490: LD_INT 118
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: ST_TO_ADDR
16516: GO 17971
16518: LD_INT 13
16520: DOUBLE
16521: EQUAL
16522: IFTRUE 16526
16524: GO 16734
16526: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16527: LD_ADDR_VAR 0 2
16531: PUSH
16532: LD_INT 1
16534: PUSH
16535: LD_INT 2
16537: PUSH
16538: LD_INT 3
16540: PUSH
16541: LD_INT 4
16543: PUSH
16544: LD_INT 5
16546: PUSH
16547: LD_INT 8
16549: PUSH
16550: LD_INT 9
16552: PUSH
16553: LD_INT 10
16555: PUSH
16556: LD_INT 11
16558: PUSH
16559: LD_INT 12
16561: PUSH
16562: LD_INT 14
16564: PUSH
16565: LD_INT 15
16567: PUSH
16568: LD_INT 16
16570: PUSH
16571: LD_INT 17
16573: PUSH
16574: LD_INT 18
16576: PUSH
16577: LD_INT 19
16579: PUSH
16580: LD_INT 20
16582: PUSH
16583: LD_INT 21
16585: PUSH
16586: LD_INT 22
16588: PUSH
16589: LD_INT 23
16591: PUSH
16592: LD_INT 24
16594: PUSH
16595: LD_INT 25
16597: PUSH
16598: LD_INT 26
16600: PUSH
16601: LD_INT 27
16603: PUSH
16604: LD_INT 28
16606: PUSH
16607: LD_INT 30
16609: PUSH
16610: LD_INT 31
16612: PUSH
16613: LD_INT 32
16615: PUSH
16616: LD_INT 33
16618: PUSH
16619: LD_INT 34
16621: PUSH
16622: LD_INT 36
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: PUSH
16658: LD_INT 101
16660: PUSH
16661: LD_INT 102
16663: PUSH
16664: LD_INT 103
16666: PUSH
16667: LD_INT 104
16669: PUSH
16670: LD_INT 105
16672: PUSH
16673: LD_INT 106
16675: PUSH
16676: LD_INT 107
16678: PUSH
16679: LD_INT 108
16681: PUSH
16682: LD_INT 109
16684: PUSH
16685: LD_INT 110
16687: PUSH
16688: LD_INT 111
16690: PUSH
16691: LD_INT 112
16693: PUSH
16694: LD_INT 113
16696: PUSH
16697: LD_INT 114
16699: PUSH
16700: LD_INT 116
16702: PUSH
16703: LD_INT 117
16705: PUSH
16706: LD_INT 118
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: ST_TO_ADDR
16732: GO 17971
16734: LD_INT 14
16736: DOUBLE
16737: EQUAL
16738: IFTRUE 16742
16740: GO 16966
16742: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16743: LD_ADDR_VAR 0 2
16747: PUSH
16748: LD_INT 1
16750: PUSH
16751: LD_INT 2
16753: PUSH
16754: LD_INT 3
16756: PUSH
16757: LD_INT 4
16759: PUSH
16760: LD_INT 5
16762: PUSH
16763: LD_INT 6
16765: PUSH
16766: LD_INT 7
16768: PUSH
16769: LD_INT 8
16771: PUSH
16772: LD_INT 9
16774: PUSH
16775: LD_INT 10
16777: PUSH
16778: LD_INT 11
16780: PUSH
16781: LD_INT 12
16783: PUSH
16784: LD_INT 13
16786: PUSH
16787: LD_INT 14
16789: PUSH
16790: LD_INT 15
16792: PUSH
16793: LD_INT 16
16795: PUSH
16796: LD_INT 17
16798: PUSH
16799: LD_INT 18
16801: PUSH
16802: LD_INT 19
16804: PUSH
16805: LD_INT 20
16807: PUSH
16808: LD_INT 21
16810: PUSH
16811: LD_INT 22
16813: PUSH
16814: LD_INT 23
16816: PUSH
16817: LD_INT 24
16819: PUSH
16820: LD_INT 25
16822: PUSH
16823: LD_INT 26
16825: PUSH
16826: LD_INT 27
16828: PUSH
16829: LD_INT 28
16831: PUSH
16832: LD_INT 29
16834: PUSH
16835: LD_INT 30
16837: PUSH
16838: LD_INT 31
16840: PUSH
16841: LD_INT 32
16843: PUSH
16844: LD_INT 33
16846: PUSH
16847: LD_INT 34
16849: PUSH
16850: LD_INT 36
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: PUSH
16890: LD_INT 101
16892: PUSH
16893: LD_INT 102
16895: PUSH
16896: LD_INT 103
16898: PUSH
16899: LD_INT 104
16901: PUSH
16902: LD_INT 105
16904: PUSH
16905: LD_INT 106
16907: PUSH
16908: LD_INT 107
16910: PUSH
16911: LD_INT 108
16913: PUSH
16914: LD_INT 109
16916: PUSH
16917: LD_INT 110
16919: PUSH
16920: LD_INT 111
16922: PUSH
16923: LD_INT 112
16925: PUSH
16926: LD_INT 113
16928: PUSH
16929: LD_INT 114
16931: PUSH
16932: LD_INT 116
16934: PUSH
16935: LD_INT 117
16937: PUSH
16938: LD_INT 118
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: ST_TO_ADDR
16964: GO 17971
16966: LD_INT 15
16968: DOUBLE
16969: EQUAL
16970: IFTRUE 16974
16972: GO 17198
16974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16975: LD_ADDR_VAR 0 2
16979: PUSH
16980: LD_INT 1
16982: PUSH
16983: LD_INT 2
16985: PUSH
16986: LD_INT 3
16988: PUSH
16989: LD_INT 4
16991: PUSH
16992: LD_INT 5
16994: PUSH
16995: LD_INT 6
16997: PUSH
16998: LD_INT 7
17000: PUSH
17001: LD_INT 8
17003: PUSH
17004: LD_INT 9
17006: PUSH
17007: LD_INT 10
17009: PUSH
17010: LD_INT 11
17012: PUSH
17013: LD_INT 12
17015: PUSH
17016: LD_INT 13
17018: PUSH
17019: LD_INT 14
17021: PUSH
17022: LD_INT 15
17024: PUSH
17025: LD_INT 16
17027: PUSH
17028: LD_INT 17
17030: PUSH
17031: LD_INT 18
17033: PUSH
17034: LD_INT 19
17036: PUSH
17037: LD_INT 20
17039: PUSH
17040: LD_INT 21
17042: PUSH
17043: LD_INT 22
17045: PUSH
17046: LD_INT 23
17048: PUSH
17049: LD_INT 24
17051: PUSH
17052: LD_INT 25
17054: PUSH
17055: LD_INT 26
17057: PUSH
17058: LD_INT 27
17060: PUSH
17061: LD_INT 28
17063: PUSH
17064: LD_INT 29
17066: PUSH
17067: LD_INT 30
17069: PUSH
17070: LD_INT 31
17072: PUSH
17073: LD_INT 32
17075: PUSH
17076: LD_INT 33
17078: PUSH
17079: LD_INT 34
17081: PUSH
17082: LD_INT 36
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 101
17124: PUSH
17125: LD_INT 102
17127: PUSH
17128: LD_INT 103
17130: PUSH
17131: LD_INT 104
17133: PUSH
17134: LD_INT 105
17136: PUSH
17137: LD_INT 106
17139: PUSH
17140: LD_INT 107
17142: PUSH
17143: LD_INT 108
17145: PUSH
17146: LD_INT 109
17148: PUSH
17149: LD_INT 110
17151: PUSH
17152: LD_INT 111
17154: PUSH
17155: LD_INT 112
17157: PUSH
17158: LD_INT 113
17160: PUSH
17161: LD_INT 114
17163: PUSH
17164: LD_INT 116
17166: PUSH
17167: LD_INT 117
17169: PUSH
17170: LD_INT 118
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: ST_TO_ADDR
17196: GO 17971
17198: LD_INT 16
17200: DOUBLE
17201: EQUAL
17202: IFTRUE 17206
17204: GO 17342
17206: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
17207: LD_ADDR_VAR 0 2
17211: PUSH
17212: LD_INT 2
17214: PUSH
17215: LD_INT 4
17217: PUSH
17218: LD_INT 5
17220: PUSH
17221: LD_INT 7
17223: PUSH
17224: LD_INT 11
17226: PUSH
17227: LD_INT 12
17229: PUSH
17230: LD_INT 15
17232: PUSH
17233: LD_INT 16
17235: PUSH
17236: LD_INT 20
17238: PUSH
17239: LD_INT 21
17241: PUSH
17242: LD_INT 22
17244: PUSH
17245: LD_INT 23
17247: PUSH
17248: LD_INT 25
17250: PUSH
17251: LD_INT 26
17253: PUSH
17254: LD_INT 30
17256: PUSH
17257: LD_INT 31
17259: PUSH
17260: LD_INT 32
17262: PUSH
17263: LD_INT 33
17265: PUSH
17266: LD_INT 34
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 101
17292: PUSH
17293: LD_INT 102
17295: PUSH
17296: LD_INT 103
17298: PUSH
17299: LD_INT 106
17301: PUSH
17302: LD_INT 108
17304: PUSH
17305: LD_INT 112
17307: PUSH
17308: LD_INT 113
17310: PUSH
17311: LD_INT 114
17313: PUSH
17314: LD_INT 116
17316: PUSH
17317: LD_INT 117
17319: PUSH
17320: LD_INT 118
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: ST_TO_ADDR
17340: GO 17971
17342: LD_INT 17
17344: DOUBLE
17345: EQUAL
17346: IFTRUE 17350
17348: GO 17574
17350: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
17351: LD_ADDR_VAR 0 2
17355: PUSH
17356: LD_INT 1
17358: PUSH
17359: LD_INT 2
17361: PUSH
17362: LD_INT 3
17364: PUSH
17365: LD_INT 4
17367: PUSH
17368: LD_INT 5
17370: PUSH
17371: LD_INT 6
17373: PUSH
17374: LD_INT 7
17376: PUSH
17377: LD_INT 8
17379: PUSH
17380: LD_INT 9
17382: PUSH
17383: LD_INT 10
17385: PUSH
17386: LD_INT 11
17388: PUSH
17389: LD_INT 12
17391: PUSH
17392: LD_INT 13
17394: PUSH
17395: LD_INT 14
17397: PUSH
17398: LD_INT 15
17400: PUSH
17401: LD_INT 16
17403: PUSH
17404: LD_INT 17
17406: PUSH
17407: LD_INT 18
17409: PUSH
17410: LD_INT 19
17412: PUSH
17413: LD_INT 20
17415: PUSH
17416: LD_INT 21
17418: PUSH
17419: LD_INT 22
17421: PUSH
17422: LD_INT 23
17424: PUSH
17425: LD_INT 24
17427: PUSH
17428: LD_INT 25
17430: PUSH
17431: LD_INT 26
17433: PUSH
17434: LD_INT 27
17436: PUSH
17437: LD_INT 28
17439: PUSH
17440: LD_INT 29
17442: PUSH
17443: LD_INT 30
17445: PUSH
17446: LD_INT 31
17448: PUSH
17449: LD_INT 32
17451: PUSH
17452: LD_INT 33
17454: PUSH
17455: LD_INT 34
17457: PUSH
17458: LD_INT 36
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 101
17500: PUSH
17501: LD_INT 102
17503: PUSH
17504: LD_INT 103
17506: PUSH
17507: LD_INT 104
17509: PUSH
17510: LD_INT 105
17512: PUSH
17513: LD_INT 106
17515: PUSH
17516: LD_INT 107
17518: PUSH
17519: LD_INT 108
17521: PUSH
17522: LD_INT 109
17524: PUSH
17525: LD_INT 110
17527: PUSH
17528: LD_INT 111
17530: PUSH
17531: LD_INT 112
17533: PUSH
17534: LD_INT 113
17536: PUSH
17537: LD_INT 114
17539: PUSH
17540: LD_INT 116
17542: PUSH
17543: LD_INT 117
17545: PUSH
17546: LD_INT 118
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: ST_TO_ADDR
17572: GO 17971
17574: LD_INT 18
17576: DOUBLE
17577: EQUAL
17578: IFTRUE 17582
17580: GO 17730
17582: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17583: LD_ADDR_VAR 0 2
17587: PUSH
17588: LD_INT 2
17590: PUSH
17591: LD_INT 4
17593: PUSH
17594: LD_INT 5
17596: PUSH
17597: LD_INT 7
17599: PUSH
17600: LD_INT 11
17602: PUSH
17603: LD_INT 12
17605: PUSH
17606: LD_INT 15
17608: PUSH
17609: LD_INT 16
17611: PUSH
17612: LD_INT 20
17614: PUSH
17615: LD_INT 21
17617: PUSH
17618: LD_INT 22
17620: PUSH
17621: LD_INT 23
17623: PUSH
17624: LD_INT 25
17626: PUSH
17627: LD_INT 26
17629: PUSH
17630: LD_INT 30
17632: PUSH
17633: LD_INT 31
17635: PUSH
17636: LD_INT 32
17638: PUSH
17639: LD_INT 33
17641: PUSH
17642: LD_INT 34
17644: PUSH
17645: LD_INT 35
17647: PUSH
17648: LD_INT 36
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: PUSH
17674: LD_INT 101
17676: PUSH
17677: LD_INT 102
17679: PUSH
17680: LD_INT 103
17682: PUSH
17683: LD_INT 106
17685: PUSH
17686: LD_INT 108
17688: PUSH
17689: LD_INT 112
17691: PUSH
17692: LD_INT 113
17694: PUSH
17695: LD_INT 114
17697: PUSH
17698: LD_INT 115
17700: PUSH
17701: LD_INT 116
17703: PUSH
17704: LD_INT 117
17706: PUSH
17707: LD_INT 118
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: ST_TO_ADDR
17728: GO 17971
17730: LD_INT 19
17732: DOUBLE
17733: EQUAL
17734: IFTRUE 17738
17736: GO 17970
17738: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17739: LD_ADDR_VAR 0 2
17743: PUSH
17744: LD_INT 1
17746: PUSH
17747: LD_INT 2
17749: PUSH
17750: LD_INT 3
17752: PUSH
17753: LD_INT 4
17755: PUSH
17756: LD_INT 5
17758: PUSH
17759: LD_INT 6
17761: PUSH
17762: LD_INT 7
17764: PUSH
17765: LD_INT 8
17767: PUSH
17768: LD_INT 9
17770: PUSH
17771: LD_INT 10
17773: PUSH
17774: LD_INT 11
17776: PUSH
17777: LD_INT 12
17779: PUSH
17780: LD_INT 13
17782: PUSH
17783: LD_INT 14
17785: PUSH
17786: LD_INT 15
17788: PUSH
17789: LD_INT 16
17791: PUSH
17792: LD_INT 17
17794: PUSH
17795: LD_INT 18
17797: PUSH
17798: LD_INT 19
17800: PUSH
17801: LD_INT 20
17803: PUSH
17804: LD_INT 21
17806: PUSH
17807: LD_INT 22
17809: PUSH
17810: LD_INT 23
17812: PUSH
17813: LD_INT 24
17815: PUSH
17816: LD_INT 25
17818: PUSH
17819: LD_INT 26
17821: PUSH
17822: LD_INT 27
17824: PUSH
17825: LD_INT 28
17827: PUSH
17828: LD_INT 29
17830: PUSH
17831: LD_INT 30
17833: PUSH
17834: LD_INT 31
17836: PUSH
17837: LD_INT 32
17839: PUSH
17840: LD_INT 33
17842: PUSH
17843: LD_INT 34
17845: PUSH
17846: LD_INT 35
17848: PUSH
17849: LD_INT 36
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 101
17892: PUSH
17893: LD_INT 102
17895: PUSH
17896: LD_INT 103
17898: PUSH
17899: LD_INT 104
17901: PUSH
17902: LD_INT 105
17904: PUSH
17905: LD_INT 106
17907: PUSH
17908: LD_INT 107
17910: PUSH
17911: LD_INT 108
17913: PUSH
17914: LD_INT 109
17916: PUSH
17917: LD_INT 110
17919: PUSH
17920: LD_INT 111
17922: PUSH
17923: LD_INT 112
17925: PUSH
17926: LD_INT 113
17928: PUSH
17929: LD_INT 114
17931: PUSH
17932: LD_INT 115
17934: PUSH
17935: LD_INT 116
17937: PUSH
17938: LD_INT 117
17940: PUSH
17941: LD_INT 118
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: ST_TO_ADDR
17968: GO 17971
17970: POP
// end else
17971: GO 18202
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17973: LD_ADDR_VAR 0 2
17977: PUSH
17978: LD_INT 1
17980: PUSH
17981: LD_INT 2
17983: PUSH
17984: LD_INT 3
17986: PUSH
17987: LD_INT 4
17989: PUSH
17990: LD_INT 5
17992: PUSH
17993: LD_INT 6
17995: PUSH
17996: LD_INT 7
17998: PUSH
17999: LD_INT 8
18001: PUSH
18002: LD_INT 9
18004: PUSH
18005: LD_INT 10
18007: PUSH
18008: LD_INT 11
18010: PUSH
18011: LD_INT 12
18013: PUSH
18014: LD_INT 13
18016: PUSH
18017: LD_INT 14
18019: PUSH
18020: LD_INT 15
18022: PUSH
18023: LD_INT 16
18025: PUSH
18026: LD_INT 17
18028: PUSH
18029: LD_INT 18
18031: PUSH
18032: LD_INT 19
18034: PUSH
18035: LD_INT 20
18037: PUSH
18038: LD_INT 21
18040: PUSH
18041: LD_INT 22
18043: PUSH
18044: LD_INT 23
18046: PUSH
18047: LD_INT 24
18049: PUSH
18050: LD_INT 25
18052: PUSH
18053: LD_INT 26
18055: PUSH
18056: LD_INT 27
18058: PUSH
18059: LD_INT 28
18061: PUSH
18062: LD_INT 29
18064: PUSH
18065: LD_INT 30
18067: PUSH
18068: LD_INT 31
18070: PUSH
18071: LD_INT 32
18073: PUSH
18074: LD_INT 33
18076: PUSH
18077: LD_INT 34
18079: PUSH
18080: LD_INT 35
18082: PUSH
18083: LD_INT 36
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 101
18126: PUSH
18127: LD_INT 102
18129: PUSH
18130: LD_INT 103
18132: PUSH
18133: LD_INT 104
18135: PUSH
18136: LD_INT 105
18138: PUSH
18139: LD_INT 106
18141: PUSH
18142: LD_INT 107
18144: PUSH
18145: LD_INT 108
18147: PUSH
18148: LD_INT 109
18150: PUSH
18151: LD_INT 110
18153: PUSH
18154: LD_INT 111
18156: PUSH
18157: LD_INT 112
18159: PUSH
18160: LD_INT 113
18162: PUSH
18163: LD_INT 114
18165: PUSH
18166: LD_INT 115
18168: PUSH
18169: LD_INT 116
18171: PUSH
18172: LD_INT 117
18174: PUSH
18175: LD_INT 118
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: ST_TO_ADDR
// if result then
18202: LD_VAR 0 2
18206: IFFALSE 18992
// begin normal :=  ;
18208: LD_ADDR_VAR 0 5
18212: PUSH
18213: LD_STRING 
18215: ST_TO_ADDR
// hardcore :=  ;
18216: LD_ADDR_VAR 0 6
18220: PUSH
18221: LD_STRING 
18223: ST_TO_ADDR
// active :=  ;
18224: LD_ADDR_VAR 0 7
18228: PUSH
18229: LD_STRING 
18231: ST_TO_ADDR
// for i = 1 to normalCounter do
18232: LD_ADDR_VAR 0 8
18236: PUSH
18237: DOUBLE
18238: LD_INT 1
18240: DEC
18241: ST_TO_ADDR
18242: LD_EXP 63
18246: PUSH
18247: FOR_TO
18248: IFFALSE 18349
// begin tmp := 0 ;
18250: LD_ADDR_VAR 0 3
18254: PUSH
18255: LD_STRING 0
18257: ST_TO_ADDR
// if result [ 1 ] then
18258: LD_VAR 0 2
18262: PUSH
18263: LD_INT 1
18265: ARRAY
18266: IFFALSE 18331
// if result [ 1 ] [ 1 ] = i then
18268: LD_VAR 0 2
18272: PUSH
18273: LD_INT 1
18275: ARRAY
18276: PUSH
18277: LD_INT 1
18279: ARRAY
18280: PUSH
18281: LD_VAR 0 8
18285: EQUAL
18286: IFFALSE 18331
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
18288: LD_ADDR_VAR 0 2
18292: PUSH
18293: LD_VAR 0 2
18297: PPUSH
18298: LD_INT 1
18300: PPUSH
18301: LD_VAR 0 2
18305: PUSH
18306: LD_INT 1
18308: ARRAY
18309: PPUSH
18310: LD_INT 1
18312: PPUSH
18313: CALL_OW 3
18317: PPUSH
18318: CALL_OW 1
18322: ST_TO_ADDR
// tmp := 1 ;
18323: LD_ADDR_VAR 0 3
18327: PUSH
18328: LD_STRING 1
18330: ST_TO_ADDR
// end ; normal := normal & tmp ;
18331: LD_ADDR_VAR 0 5
18335: PUSH
18336: LD_VAR 0 5
18340: PUSH
18341: LD_VAR 0 3
18345: STR
18346: ST_TO_ADDR
// end ;
18347: GO 18247
18349: POP
18350: POP
// for i = 1 to hardcoreCounter do
18351: LD_ADDR_VAR 0 8
18355: PUSH
18356: DOUBLE
18357: LD_INT 1
18359: DEC
18360: ST_TO_ADDR
18361: LD_EXP 64
18365: PUSH
18366: FOR_TO
18367: IFFALSE 18472
// begin tmp := 0 ;
18369: LD_ADDR_VAR 0 3
18373: PUSH
18374: LD_STRING 0
18376: ST_TO_ADDR
// if result [ 2 ] then
18377: LD_VAR 0 2
18381: PUSH
18382: LD_INT 2
18384: ARRAY
18385: IFFALSE 18454
// if result [ 2 ] [ 1 ] = 100 + i then
18387: LD_VAR 0 2
18391: PUSH
18392: LD_INT 2
18394: ARRAY
18395: PUSH
18396: LD_INT 1
18398: ARRAY
18399: PUSH
18400: LD_INT 100
18402: PUSH
18403: LD_VAR 0 8
18407: PLUS
18408: EQUAL
18409: IFFALSE 18454
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18411: LD_ADDR_VAR 0 2
18415: PUSH
18416: LD_VAR 0 2
18420: PPUSH
18421: LD_INT 2
18423: PPUSH
18424: LD_VAR 0 2
18428: PUSH
18429: LD_INT 2
18431: ARRAY
18432: PPUSH
18433: LD_INT 1
18435: PPUSH
18436: CALL_OW 3
18440: PPUSH
18441: CALL_OW 1
18445: ST_TO_ADDR
// tmp := 1 ;
18446: LD_ADDR_VAR 0 3
18450: PUSH
18451: LD_STRING 1
18453: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18454: LD_ADDR_VAR 0 6
18458: PUSH
18459: LD_VAR 0 6
18463: PUSH
18464: LD_VAR 0 3
18468: STR
18469: ST_TO_ADDR
// end ;
18470: GO 18366
18472: POP
18473: POP
// if isGameLoad then
18474: LD_VAR 0 1
18478: IFFALSE 18953
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
18480: LD_ADDR_VAR 0 4
18484: PUSH
18485: LD_EXP 67
18489: PUSH
18490: LD_EXP 66
18494: PUSH
18495: LD_EXP 68
18499: PUSH
18500: LD_EXP 65
18504: PUSH
18505: LD_EXP 69
18509: PUSH
18510: LD_EXP 70
18514: PUSH
18515: LD_EXP 71
18519: PUSH
18520: LD_EXP 72
18524: PUSH
18525: LD_EXP 73
18529: PUSH
18530: LD_EXP 74
18534: PUSH
18535: LD_EXP 75
18539: PUSH
18540: LD_EXP 76
18544: PUSH
18545: LD_EXP 77
18549: PUSH
18550: LD_EXP 78
18554: PUSH
18555: LD_EXP 86
18559: PUSH
18560: LD_EXP 87
18564: PUSH
18565: LD_EXP 88
18569: PUSH
18570: LD_EXP 89
18574: PUSH
18575: LD_EXP 91
18579: PUSH
18580: LD_EXP 92
18584: PUSH
18585: LD_EXP 93
18589: PUSH
18590: LD_EXP 96
18594: PUSH
18595: LD_EXP 98
18599: PUSH
18600: LD_EXP 99
18604: PUSH
18605: LD_EXP 100
18609: PUSH
18610: LD_EXP 102
18614: PUSH
18615: LD_EXP 103
18619: PUSH
18620: LD_EXP 106
18624: PUSH
18625: LD_EXP 107
18629: PUSH
18630: LD_EXP 108
18634: PUSH
18635: LD_EXP 109
18639: PUSH
18640: LD_EXP 110
18644: PUSH
18645: LD_EXP 111
18649: PUSH
18650: LD_EXP 112
18654: PUSH
18655: LD_EXP 113
18659: PUSH
18660: LD_EXP 114
18664: PUSH
18665: LD_EXP 79
18669: PUSH
18670: LD_EXP 80
18674: PUSH
18675: LD_EXP 83
18679: PUSH
18680: LD_EXP 84
18684: PUSH
18685: LD_EXP 85
18689: PUSH
18690: LD_EXP 81
18694: PUSH
18695: LD_EXP 82
18699: PUSH
18700: LD_EXP 90
18704: PUSH
18705: LD_EXP 94
18709: PUSH
18710: LD_EXP 95
18714: PUSH
18715: LD_EXP 97
18719: PUSH
18720: LD_EXP 101
18724: PUSH
18725: LD_EXP 104
18729: PUSH
18730: LD_EXP 105
18734: PUSH
18735: LD_EXP 115
18739: PUSH
18740: LD_EXP 116
18744: PUSH
18745: LD_EXP 117
18749: PUSH
18750: LD_EXP 118
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: ST_TO_ADDR
// tmp :=  ;
18811: LD_ADDR_VAR 0 3
18815: PUSH
18816: LD_STRING 
18818: ST_TO_ADDR
// for i = 1 to normalCounter do
18819: LD_ADDR_VAR 0 8
18823: PUSH
18824: DOUBLE
18825: LD_INT 1
18827: DEC
18828: ST_TO_ADDR
18829: LD_EXP 63
18833: PUSH
18834: FOR_TO
18835: IFFALSE 18871
// begin if flags [ i ] then
18837: LD_VAR 0 4
18841: PUSH
18842: LD_VAR 0 8
18846: ARRAY
18847: IFFALSE 18869
// tmp := tmp & i & ; ;
18849: LD_ADDR_VAR 0 3
18853: PUSH
18854: LD_VAR 0 3
18858: PUSH
18859: LD_VAR 0 8
18863: STR
18864: PUSH
18865: LD_STRING ;
18867: STR
18868: ST_TO_ADDR
// end ;
18869: GO 18834
18871: POP
18872: POP
// for i = 1 to hardcoreCounter do
18873: LD_ADDR_VAR 0 8
18877: PUSH
18878: DOUBLE
18879: LD_INT 1
18881: DEC
18882: ST_TO_ADDR
18883: LD_EXP 64
18887: PUSH
18888: FOR_TO
18889: IFFALSE 18935
// begin if flags [ normalCounter + i ] then
18891: LD_VAR 0 4
18895: PUSH
18896: LD_EXP 63
18900: PUSH
18901: LD_VAR 0 8
18905: PLUS
18906: ARRAY
18907: IFFALSE 18933
// tmp := tmp & ( 100 + i ) & ; ;
18909: LD_ADDR_VAR 0 3
18913: PUSH
18914: LD_VAR 0 3
18918: PUSH
18919: LD_INT 100
18921: PUSH
18922: LD_VAR 0 8
18926: PLUS
18927: STR
18928: PUSH
18929: LD_STRING ;
18931: STR
18932: ST_TO_ADDR
// end ;
18933: GO 18888
18935: POP
18936: POP
// if tmp then
18937: LD_VAR 0 3
18941: IFFALSE 18953
// active := tmp ;
18943: LD_ADDR_VAR 0 7
18947: PUSH
18948: LD_VAR 0 3
18952: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18953: LD_STRING getStreamItemsFromMission("
18955: PUSH
18956: LD_VAR 0 5
18960: STR
18961: PUSH
18962: LD_STRING ","
18964: STR
18965: PUSH
18966: LD_VAR 0 6
18970: STR
18971: PUSH
18972: LD_STRING ","
18974: STR
18975: PUSH
18976: LD_VAR 0 7
18980: STR
18981: PUSH
18982: LD_STRING ")
18984: STR
18985: PPUSH
18986: CALL_OW 559
// end else
18990: GO 18999
// ToLua ( getStreamItemsFromMission("","","") ) ;
18992: LD_STRING getStreamItemsFromMission("","","")
18994: PPUSH
18995: CALL_OW 559
// end ;
18999: LD_VAR 0 2
19003: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
19004: LD_EXP 62
19008: PUSH
19009: LD_EXP 67
19013: AND
19014: IFFALSE 19138
19016: GO 19018
19018: DISABLE
19019: LD_INT 0
19021: PPUSH
19022: PPUSH
// begin enable ;
19023: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
19024: LD_ADDR_VAR 0 2
19028: PUSH
19029: LD_INT 22
19031: PUSH
19032: LD_OWVAR 2
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 2
19043: PUSH
19044: LD_INT 34
19046: PUSH
19047: LD_INT 7
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 34
19056: PUSH
19057: LD_INT 45
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: LD_INT 34
19066: PUSH
19067: LD_INT 28
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 34
19076: PUSH
19077: LD_INT 47
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PPUSH
19095: CALL_OW 69
19099: ST_TO_ADDR
// if not tmp then
19100: LD_VAR 0 2
19104: NOT
19105: IFFALSE 19109
// exit ;
19107: GO 19138
// for i in tmp do
19109: LD_ADDR_VAR 0 1
19113: PUSH
19114: LD_VAR 0 2
19118: PUSH
19119: FOR_IN
19120: IFFALSE 19136
// begin SetLives ( i , 0 ) ;
19122: LD_VAR 0 1
19126: PPUSH
19127: LD_INT 0
19129: PPUSH
19130: CALL_OW 234
// end ;
19134: GO 19119
19136: POP
19137: POP
// end ;
19138: PPOPN 2
19140: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
19141: LD_EXP 62
19145: PUSH
19146: LD_EXP 68
19150: AND
19151: IFFALSE 19235
19153: GO 19155
19155: DISABLE
19156: LD_INT 0
19158: PPUSH
19159: PPUSH
// begin enable ;
19160: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
19161: LD_ADDR_VAR 0 2
19165: PUSH
19166: LD_INT 22
19168: PUSH
19169: LD_OWVAR 2
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PUSH
19178: LD_INT 32
19180: PUSH
19181: LD_INT 3
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PPUSH
19192: CALL_OW 69
19196: ST_TO_ADDR
// if not tmp then
19197: LD_VAR 0 2
19201: NOT
19202: IFFALSE 19206
// exit ;
19204: GO 19235
// for i in tmp do
19206: LD_ADDR_VAR 0 1
19210: PUSH
19211: LD_VAR 0 2
19215: PUSH
19216: FOR_IN
19217: IFFALSE 19233
// begin SetLives ( i , 0 ) ;
19219: LD_VAR 0 1
19223: PPUSH
19224: LD_INT 0
19226: PPUSH
19227: CALL_OW 234
// end ;
19231: GO 19216
19233: POP
19234: POP
// end ;
19235: PPOPN 2
19237: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19238: LD_EXP 62
19242: PUSH
19243: LD_EXP 65
19247: AND
19248: IFFALSE 19341
19250: GO 19252
19252: DISABLE
19253: LD_INT 0
19255: PPUSH
// begin enable ;
19256: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19257: LD_ADDR_VAR 0 1
19261: PUSH
19262: LD_INT 22
19264: PUSH
19265: LD_OWVAR 2
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 2
19276: PUSH
19277: LD_INT 25
19279: PUSH
19280: LD_INT 5
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 25
19289: PUSH
19290: LD_INT 9
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 25
19299: PUSH
19300: LD_INT 8
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PPUSH
19317: CALL_OW 69
19321: PUSH
19322: FOR_IN
19323: IFFALSE 19339
// begin SetClass ( i , 1 ) ;
19325: LD_VAR 0 1
19329: PPUSH
19330: LD_INT 1
19332: PPUSH
19333: CALL_OW 336
// end ;
19337: GO 19322
19339: POP
19340: POP
// end ;
19341: PPOPN 1
19343: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19344: LD_EXP 62
19348: PUSH
19349: LD_EXP 66
19353: AND
19354: PUSH
19355: LD_OWVAR 65
19359: PUSH
19360: LD_INT 7
19362: LESS
19363: AND
19364: IFFALSE 19378
19366: GO 19368
19368: DISABLE
// begin enable ;
19369: ENABLE
// game_speed := 7 ;
19370: LD_ADDR_OWVAR 65
19374: PUSH
19375: LD_INT 7
19377: ST_TO_ADDR
// end ;
19378: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19379: LD_EXP 62
19383: PUSH
19384: LD_EXP 69
19388: AND
19389: IFFALSE 19591
19391: GO 19393
19393: DISABLE
19394: LD_INT 0
19396: PPUSH
19397: PPUSH
19398: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19399: LD_ADDR_VAR 0 3
19403: PUSH
19404: LD_INT 81
19406: PUSH
19407: LD_OWVAR 2
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 21
19418: PUSH
19419: LD_INT 1
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PPUSH
19430: CALL_OW 69
19434: ST_TO_ADDR
// if not tmp then
19435: LD_VAR 0 3
19439: NOT
19440: IFFALSE 19444
// exit ;
19442: GO 19591
// if tmp > 5 then
19444: LD_VAR 0 3
19448: PUSH
19449: LD_INT 5
19451: GREATER
19452: IFFALSE 19464
// k := 5 else
19454: LD_ADDR_VAR 0 2
19458: PUSH
19459: LD_INT 5
19461: ST_TO_ADDR
19462: GO 19474
// k := tmp ;
19464: LD_ADDR_VAR 0 2
19468: PUSH
19469: LD_VAR 0 3
19473: ST_TO_ADDR
// for i := 1 to k do
19474: LD_ADDR_VAR 0 1
19478: PUSH
19479: DOUBLE
19480: LD_INT 1
19482: DEC
19483: ST_TO_ADDR
19484: LD_VAR 0 2
19488: PUSH
19489: FOR_TO
19490: IFFALSE 19589
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
19492: LD_VAR 0 3
19496: PUSH
19497: LD_VAR 0 1
19501: ARRAY
19502: PPUSH
19503: LD_VAR 0 1
19507: PUSH
19508: LD_INT 4
19510: MOD
19511: PUSH
19512: LD_INT 1
19514: PLUS
19515: PPUSH
19516: CALL_OW 259
19520: PUSH
19521: LD_INT 10
19523: LESS
19524: IFFALSE 19587
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19526: LD_VAR 0 3
19530: PUSH
19531: LD_VAR 0 1
19535: ARRAY
19536: PPUSH
19537: LD_VAR 0 1
19541: PUSH
19542: LD_INT 4
19544: MOD
19545: PUSH
19546: LD_INT 1
19548: PLUS
19549: PPUSH
19550: LD_VAR 0 3
19554: PUSH
19555: LD_VAR 0 1
19559: ARRAY
19560: PPUSH
19561: LD_VAR 0 1
19565: PUSH
19566: LD_INT 4
19568: MOD
19569: PUSH
19570: LD_INT 1
19572: PLUS
19573: PPUSH
19574: CALL_OW 259
19578: PUSH
19579: LD_INT 1
19581: PLUS
19582: PPUSH
19583: CALL_OW 237
19587: GO 19489
19589: POP
19590: POP
// end ;
19591: PPOPN 3
19593: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
19594: LD_EXP 62
19598: PUSH
19599: LD_EXP 70
19603: AND
19604: IFFALSE 19624
19606: GO 19608
19608: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
19609: LD_INT 4
19611: PPUSH
19612: LD_OWVAR 2
19616: PPUSH
19617: LD_INT 0
19619: PPUSH
19620: CALL_OW 324
19624: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19625: LD_EXP 62
19629: PUSH
19630: LD_EXP 99
19634: AND
19635: IFFALSE 19655
19637: GO 19639
19639: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19640: LD_INT 19
19642: PPUSH
19643: LD_OWVAR 2
19647: PPUSH
19648: LD_INT 0
19650: PPUSH
19651: CALL_OW 324
19655: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19656: LD_EXP 62
19660: PUSH
19661: LD_EXP 71
19665: AND
19666: IFFALSE 19768
19668: GO 19670
19670: DISABLE
19671: LD_INT 0
19673: PPUSH
19674: PPUSH
// begin enable ;
19675: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19676: LD_ADDR_VAR 0 2
19680: PUSH
19681: LD_INT 22
19683: PUSH
19684: LD_OWVAR 2
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 2
19695: PUSH
19696: LD_INT 34
19698: PUSH
19699: LD_INT 11
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 34
19708: PUSH
19709: LD_INT 30
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: LIST
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PPUSH
19725: CALL_OW 69
19729: ST_TO_ADDR
// if not tmp then
19730: LD_VAR 0 2
19734: NOT
19735: IFFALSE 19739
// exit ;
19737: GO 19768
// for i in tmp do
19739: LD_ADDR_VAR 0 1
19743: PUSH
19744: LD_VAR 0 2
19748: PUSH
19749: FOR_IN
19750: IFFALSE 19766
// begin SetLives ( i , 0 ) ;
19752: LD_VAR 0 1
19756: PPUSH
19757: LD_INT 0
19759: PPUSH
19760: CALL_OW 234
// end ;
19764: GO 19749
19766: POP
19767: POP
// end ;
19768: PPOPN 2
19770: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19771: LD_EXP 62
19775: PUSH
19776: LD_EXP 72
19780: AND
19781: IFFALSE 19801
19783: GO 19785
19785: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19786: LD_INT 32
19788: PPUSH
19789: LD_OWVAR 2
19793: PPUSH
19794: LD_INT 0
19796: PPUSH
19797: CALL_OW 324
19801: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19802: LD_EXP 62
19806: PUSH
19807: LD_EXP 73
19811: AND
19812: IFFALSE 19993
19814: GO 19816
19816: DISABLE
19817: LD_INT 0
19819: PPUSH
19820: PPUSH
19821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19822: LD_ADDR_VAR 0 2
19826: PUSH
19827: LD_INT 22
19829: PUSH
19830: LD_OWVAR 2
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 33
19841: PUSH
19842: LD_INT 3
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PPUSH
19853: CALL_OW 69
19857: ST_TO_ADDR
// if not tmp then
19858: LD_VAR 0 2
19862: NOT
19863: IFFALSE 19867
// exit ;
19865: GO 19993
// side := 0 ;
19867: LD_ADDR_VAR 0 3
19871: PUSH
19872: LD_INT 0
19874: ST_TO_ADDR
// for i := 1 to 8 do
19875: LD_ADDR_VAR 0 1
19879: PUSH
19880: DOUBLE
19881: LD_INT 1
19883: DEC
19884: ST_TO_ADDR
19885: LD_INT 8
19887: PUSH
19888: FOR_TO
19889: IFFALSE 19937
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19891: LD_OWVAR 2
19895: PUSH
19896: LD_VAR 0 1
19900: NONEQUAL
19901: PUSH
19902: LD_OWVAR 2
19906: PPUSH
19907: LD_VAR 0 1
19911: PPUSH
19912: CALL_OW 81
19916: PUSH
19917: LD_INT 2
19919: EQUAL
19920: AND
19921: IFFALSE 19935
// begin side := i ;
19923: LD_ADDR_VAR 0 3
19927: PUSH
19928: LD_VAR 0 1
19932: ST_TO_ADDR
// break ;
19933: GO 19937
// end ;
19935: GO 19888
19937: POP
19938: POP
// if not side then
19939: LD_VAR 0 3
19943: NOT
19944: IFFALSE 19948
// exit ;
19946: GO 19993
// for i := 1 to tmp do
19948: LD_ADDR_VAR 0 1
19952: PUSH
19953: DOUBLE
19954: LD_INT 1
19956: DEC
19957: ST_TO_ADDR
19958: LD_VAR 0 2
19962: PUSH
19963: FOR_TO
19964: IFFALSE 19991
// if Prob ( 60 ) then
19966: LD_INT 60
19968: PPUSH
19969: CALL_OW 13
19973: IFFALSE 19989
// SetSide ( i , side ) ;
19975: LD_VAR 0 1
19979: PPUSH
19980: LD_VAR 0 3
19984: PPUSH
19985: CALL_OW 235
19989: GO 19963
19991: POP
19992: POP
// end ;
19993: PPOPN 3
19995: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19996: LD_EXP 62
20000: PUSH
20001: LD_EXP 75
20005: AND
20006: IFFALSE 20125
20008: GO 20010
20010: DISABLE
20011: LD_INT 0
20013: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
20014: LD_ADDR_VAR 0 1
20018: PUSH
20019: LD_INT 22
20021: PUSH
20022: LD_OWVAR 2
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 21
20033: PUSH
20034: LD_INT 1
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 3
20043: PUSH
20044: LD_INT 23
20046: PUSH
20047: LD_INT 0
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: LIST
20062: PPUSH
20063: CALL_OW 69
20067: PUSH
20068: FOR_IN
20069: IFFALSE 20123
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
20071: LD_VAR 0 1
20075: PPUSH
20076: CALL_OW 257
20080: PUSH
20081: LD_INT 1
20083: PUSH
20084: LD_INT 2
20086: PUSH
20087: LD_INT 3
20089: PUSH
20090: LD_INT 4
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: IN
20099: IFFALSE 20121
// SetClass ( un , rand ( 1 , 4 ) ) ;
20101: LD_VAR 0 1
20105: PPUSH
20106: LD_INT 1
20108: PPUSH
20109: LD_INT 4
20111: PPUSH
20112: CALL_OW 12
20116: PPUSH
20117: CALL_OW 336
20121: GO 20068
20123: POP
20124: POP
// end ;
20125: PPOPN 1
20127: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
20128: LD_EXP 62
20132: PUSH
20133: LD_EXP 74
20137: AND
20138: IFFALSE 20217
20140: GO 20142
20142: DISABLE
20143: LD_INT 0
20145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20146: LD_ADDR_VAR 0 1
20150: PUSH
20151: LD_INT 22
20153: PUSH
20154: LD_OWVAR 2
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 21
20165: PUSH
20166: LD_INT 3
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PPUSH
20177: CALL_OW 69
20181: ST_TO_ADDR
// if not tmp then
20182: LD_VAR 0 1
20186: NOT
20187: IFFALSE 20191
// exit ;
20189: GO 20217
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20191: LD_VAR 0 1
20195: PUSH
20196: LD_INT 1
20198: PPUSH
20199: LD_VAR 0 1
20203: PPUSH
20204: CALL_OW 12
20208: ARRAY
20209: PPUSH
20210: LD_INT 100
20212: PPUSH
20213: CALL_OW 234
// end ;
20217: PPOPN 1
20219: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20220: LD_EXP 62
20224: PUSH
20225: LD_EXP 76
20229: AND
20230: IFFALSE 20328
20232: GO 20234
20234: DISABLE
20235: LD_INT 0
20237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20238: LD_ADDR_VAR 0 1
20242: PUSH
20243: LD_INT 22
20245: PUSH
20246: LD_OWVAR 2
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 21
20257: PUSH
20258: LD_INT 1
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PPUSH
20269: CALL_OW 69
20273: ST_TO_ADDR
// if not tmp then
20274: LD_VAR 0 1
20278: NOT
20279: IFFALSE 20283
// exit ;
20281: GO 20328
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20283: LD_VAR 0 1
20287: PUSH
20288: LD_INT 1
20290: PPUSH
20291: LD_VAR 0 1
20295: PPUSH
20296: CALL_OW 12
20300: ARRAY
20301: PPUSH
20302: LD_INT 1
20304: PPUSH
20305: LD_INT 4
20307: PPUSH
20308: CALL_OW 12
20312: PPUSH
20313: LD_INT 3000
20315: PPUSH
20316: LD_INT 9000
20318: PPUSH
20319: CALL_OW 12
20323: PPUSH
20324: CALL_OW 492
// end ;
20328: PPOPN 1
20330: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20331: LD_EXP 62
20335: PUSH
20336: LD_EXP 77
20340: AND
20341: IFFALSE 20361
20343: GO 20345
20345: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20346: LD_INT 1
20348: PPUSH
20349: LD_OWVAR 2
20353: PPUSH
20354: LD_INT 0
20356: PPUSH
20357: CALL_OW 324
20361: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20362: LD_EXP 62
20366: PUSH
20367: LD_EXP 78
20371: AND
20372: IFFALSE 20455
20374: GO 20376
20376: DISABLE
20377: LD_INT 0
20379: PPUSH
20380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20381: LD_ADDR_VAR 0 2
20385: PUSH
20386: LD_INT 22
20388: PUSH
20389: LD_OWVAR 2
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 21
20400: PUSH
20401: LD_INT 3
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PPUSH
20412: CALL_OW 69
20416: ST_TO_ADDR
// if not tmp then
20417: LD_VAR 0 2
20421: NOT
20422: IFFALSE 20426
// exit ;
20424: GO 20455
// for i in tmp do
20426: LD_ADDR_VAR 0 1
20430: PUSH
20431: LD_VAR 0 2
20435: PUSH
20436: FOR_IN
20437: IFFALSE 20453
// SetBLevel ( i , 10 ) ;
20439: LD_VAR 0 1
20443: PPUSH
20444: LD_INT 10
20446: PPUSH
20447: CALL_OW 241
20451: GO 20436
20453: POP
20454: POP
// end ;
20455: PPOPN 2
20457: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20458: LD_EXP 62
20462: PUSH
20463: LD_EXP 79
20467: AND
20468: IFFALSE 20579
20470: GO 20472
20472: DISABLE
20473: LD_INT 0
20475: PPUSH
20476: PPUSH
20477: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20478: LD_ADDR_VAR 0 3
20482: PUSH
20483: LD_INT 22
20485: PUSH
20486: LD_OWVAR 2
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 25
20497: PUSH
20498: LD_INT 1
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PPUSH
20509: CALL_OW 69
20513: ST_TO_ADDR
// if not tmp then
20514: LD_VAR 0 3
20518: NOT
20519: IFFALSE 20523
// exit ;
20521: GO 20579
// un := tmp [ rand ( 1 , tmp ) ] ;
20523: LD_ADDR_VAR 0 2
20527: PUSH
20528: LD_VAR 0 3
20532: PUSH
20533: LD_INT 1
20535: PPUSH
20536: LD_VAR 0 3
20540: PPUSH
20541: CALL_OW 12
20545: ARRAY
20546: ST_TO_ADDR
// if Crawls ( un ) then
20547: LD_VAR 0 2
20551: PPUSH
20552: CALL_OW 318
20556: IFFALSE 20567
// ComWalk ( un ) ;
20558: LD_VAR 0 2
20562: PPUSH
20563: CALL_OW 138
// SetClass ( un , class_sniper ) ;
20567: LD_VAR 0 2
20571: PPUSH
20572: LD_INT 5
20574: PPUSH
20575: CALL_OW 336
// end ;
20579: PPOPN 3
20581: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
20582: LD_EXP 62
20586: PUSH
20587: LD_EXP 80
20591: AND
20592: PUSH
20593: LD_OWVAR 67
20597: PUSH
20598: LD_INT 4
20600: LESS
20601: AND
20602: IFFALSE 20621
20604: GO 20606
20606: DISABLE
// begin Difficulty := Difficulty + 1 ;
20607: LD_ADDR_OWVAR 67
20611: PUSH
20612: LD_OWVAR 67
20616: PUSH
20617: LD_INT 1
20619: PLUS
20620: ST_TO_ADDR
// end ;
20621: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20622: LD_EXP 62
20626: PUSH
20627: LD_EXP 81
20631: AND
20632: IFFALSE 20735
20634: GO 20636
20636: DISABLE
20637: LD_INT 0
20639: PPUSH
// begin for i := 1 to 5 do
20640: LD_ADDR_VAR 0 1
20644: PUSH
20645: DOUBLE
20646: LD_INT 1
20648: DEC
20649: ST_TO_ADDR
20650: LD_INT 5
20652: PUSH
20653: FOR_TO
20654: IFFALSE 20733
// begin uc_nation := nation_nature ;
20656: LD_ADDR_OWVAR 21
20660: PUSH
20661: LD_INT 0
20663: ST_TO_ADDR
// uc_side := 0 ;
20664: LD_ADDR_OWVAR 20
20668: PUSH
20669: LD_INT 0
20671: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20672: LD_ADDR_OWVAR 29
20676: PUSH
20677: LD_INT 12
20679: PUSH
20680: LD_INT 12
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: ST_TO_ADDR
// hc_agressivity := 20 ;
20687: LD_ADDR_OWVAR 35
20691: PUSH
20692: LD_INT 20
20694: ST_TO_ADDR
// hc_class := class_tiger ;
20695: LD_ADDR_OWVAR 28
20699: PUSH
20700: LD_INT 14
20702: ST_TO_ADDR
// hc_gallery :=  ;
20703: LD_ADDR_OWVAR 33
20707: PUSH
20708: LD_STRING 
20710: ST_TO_ADDR
// hc_name :=  ;
20711: LD_ADDR_OWVAR 26
20715: PUSH
20716: LD_STRING 
20718: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20719: CALL_OW 44
20723: PPUSH
20724: LD_INT 0
20726: PPUSH
20727: CALL_OW 51
// end ;
20731: GO 20653
20733: POP
20734: POP
// end ;
20735: PPOPN 1
20737: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20738: LD_EXP 62
20742: PUSH
20743: LD_EXP 82
20747: AND
20748: IFFALSE 20757
20750: GO 20752
20752: DISABLE
// StreamSibBomb ;
20753: CALL 20758 0 0
20757: END
// export function StreamSibBomb ; var i , x , y ; begin
20758: LD_INT 0
20760: PPUSH
20761: PPUSH
20762: PPUSH
20763: PPUSH
// result := false ;
20764: LD_ADDR_VAR 0 1
20768: PUSH
20769: LD_INT 0
20771: ST_TO_ADDR
// for i := 1 to 16 do
20772: LD_ADDR_VAR 0 2
20776: PUSH
20777: DOUBLE
20778: LD_INT 1
20780: DEC
20781: ST_TO_ADDR
20782: LD_INT 16
20784: PUSH
20785: FOR_TO
20786: IFFALSE 20985
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20788: LD_ADDR_VAR 0 3
20792: PUSH
20793: LD_INT 10
20795: PUSH
20796: LD_INT 20
20798: PUSH
20799: LD_INT 30
20801: PUSH
20802: LD_INT 40
20804: PUSH
20805: LD_INT 50
20807: PUSH
20808: LD_INT 60
20810: PUSH
20811: LD_INT 70
20813: PUSH
20814: LD_INT 80
20816: PUSH
20817: LD_INT 90
20819: PUSH
20820: LD_INT 100
20822: PUSH
20823: LD_INT 110
20825: PUSH
20826: LD_INT 120
20828: PUSH
20829: LD_INT 130
20831: PUSH
20832: LD_INT 140
20834: PUSH
20835: LD_INT 150
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 1
20857: PPUSH
20858: LD_INT 15
20860: PPUSH
20861: CALL_OW 12
20865: ARRAY
20866: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20867: LD_ADDR_VAR 0 4
20871: PUSH
20872: LD_INT 10
20874: PUSH
20875: LD_INT 20
20877: PUSH
20878: LD_INT 30
20880: PUSH
20881: LD_INT 40
20883: PUSH
20884: LD_INT 50
20886: PUSH
20887: LD_INT 60
20889: PUSH
20890: LD_INT 70
20892: PUSH
20893: LD_INT 80
20895: PUSH
20896: LD_INT 90
20898: PUSH
20899: LD_INT 100
20901: PUSH
20902: LD_INT 110
20904: PUSH
20905: LD_INT 120
20907: PUSH
20908: LD_INT 130
20910: PUSH
20911: LD_INT 140
20913: PUSH
20914: LD_INT 150
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 1
20936: PPUSH
20937: LD_INT 15
20939: PPUSH
20940: CALL_OW 12
20944: ARRAY
20945: ST_TO_ADDR
// if ValidHex ( x , y ) then
20946: LD_VAR 0 3
20950: PPUSH
20951: LD_VAR 0 4
20955: PPUSH
20956: CALL_OW 488
20960: IFFALSE 20983
// begin result := [ x , y ] ;
20962: LD_ADDR_VAR 0 1
20966: PUSH
20967: LD_VAR 0 3
20971: PUSH
20972: LD_VAR 0 4
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: ST_TO_ADDR
// break ;
20981: GO 20985
// end ; end ;
20983: GO 20785
20985: POP
20986: POP
// if result then
20987: LD_VAR 0 1
20991: IFFALSE 21051
// begin ToLua ( playSibBomb() ) ;
20993: LD_STRING playSibBomb()
20995: PPUSH
20996: CALL_OW 559
// wait ( 0 0$14 ) ;
21000: LD_INT 490
21002: PPUSH
21003: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
21007: LD_VAR 0 1
21011: PUSH
21012: LD_INT 1
21014: ARRAY
21015: PPUSH
21016: LD_VAR 0 1
21020: PUSH
21021: LD_INT 2
21023: ARRAY
21024: PPUSH
21025: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
21029: LD_VAR 0 1
21033: PUSH
21034: LD_INT 1
21036: ARRAY
21037: PPUSH
21038: LD_VAR 0 1
21042: PUSH
21043: LD_INT 2
21045: ARRAY
21046: PPUSH
21047: CALL_OW 429
// end ; end ;
21051: LD_VAR 0 1
21055: RET
// every 0 0$1 trigger StreamModeActive and sReset do
21056: LD_EXP 62
21060: PUSH
21061: LD_EXP 84
21065: AND
21066: IFFALSE 21078
21068: GO 21070
21070: DISABLE
// YouLost (  ) ;
21071: LD_STRING 
21073: PPUSH
21074: CALL_OW 104
21078: END
// every 0 0$1 trigger StreamModeActive and sFog do
21079: LD_EXP 62
21083: PUSH
21084: LD_EXP 83
21088: AND
21089: IFFALSE 21103
21091: GO 21093
21093: DISABLE
// FogOff ( your_side ) ;
21094: LD_OWVAR 2
21098: PPUSH
21099: CALL_OW 344
21103: END
// every 0 0$1 trigger StreamModeActive and sSun do
21104: LD_EXP 62
21108: PUSH
21109: LD_EXP 85
21113: AND
21114: IFFALSE 21142
21116: GO 21118
21118: DISABLE
// begin solar_recharge_percent := 0 ;
21119: LD_ADDR_OWVAR 79
21123: PUSH
21124: LD_INT 0
21126: ST_TO_ADDR
// wait ( 5 5$00 ) ;
21127: LD_INT 10500
21129: PPUSH
21130: CALL_OW 67
// solar_recharge_percent := 100 ;
21134: LD_ADDR_OWVAR 79
21138: PUSH
21139: LD_INT 100
21141: ST_TO_ADDR
// end ;
21142: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
21143: LD_EXP 62
21147: PUSH
21148: LD_EXP 86
21152: AND
21153: IFFALSE 21392
21155: GO 21157
21157: DISABLE
21158: LD_INT 0
21160: PPUSH
21161: PPUSH
21162: PPUSH
// begin tmp := [ ] ;
21163: LD_ADDR_VAR 0 3
21167: PUSH
21168: EMPTY
21169: ST_TO_ADDR
// for i := 1 to 6 do
21170: LD_ADDR_VAR 0 1
21174: PUSH
21175: DOUBLE
21176: LD_INT 1
21178: DEC
21179: ST_TO_ADDR
21180: LD_INT 6
21182: PUSH
21183: FOR_TO
21184: IFFALSE 21289
// begin uc_nation := nation_nature ;
21186: LD_ADDR_OWVAR 21
21190: PUSH
21191: LD_INT 0
21193: ST_TO_ADDR
// uc_side := 0 ;
21194: LD_ADDR_OWVAR 20
21198: PUSH
21199: LD_INT 0
21201: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21202: LD_ADDR_OWVAR 29
21206: PUSH
21207: LD_INT 12
21209: PUSH
21210: LD_INT 12
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: ST_TO_ADDR
// hc_agressivity := 20 ;
21217: LD_ADDR_OWVAR 35
21221: PUSH
21222: LD_INT 20
21224: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21225: LD_ADDR_OWVAR 28
21229: PUSH
21230: LD_INT 17
21232: ST_TO_ADDR
// hc_gallery :=  ;
21233: LD_ADDR_OWVAR 33
21237: PUSH
21238: LD_STRING 
21240: ST_TO_ADDR
// hc_name :=  ;
21241: LD_ADDR_OWVAR 26
21245: PUSH
21246: LD_STRING 
21248: ST_TO_ADDR
// un := CreateHuman ;
21249: LD_ADDR_VAR 0 2
21253: PUSH
21254: CALL_OW 44
21258: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21259: LD_VAR 0 2
21263: PPUSH
21264: LD_INT 1
21266: PPUSH
21267: CALL_OW 51
// tmp := tmp ^ un ;
21271: LD_ADDR_VAR 0 3
21275: PUSH
21276: LD_VAR 0 3
21280: PUSH
21281: LD_VAR 0 2
21285: ADD
21286: ST_TO_ADDR
// end ;
21287: GO 21183
21289: POP
21290: POP
// repeat wait ( 0 0$1 ) ;
21291: LD_INT 35
21293: PPUSH
21294: CALL_OW 67
// for un in tmp do
21298: LD_ADDR_VAR 0 2
21302: PUSH
21303: LD_VAR 0 3
21307: PUSH
21308: FOR_IN
21309: IFFALSE 21383
// begin if IsDead ( un ) then
21311: LD_VAR 0 2
21315: PPUSH
21316: CALL_OW 301
21320: IFFALSE 21340
// begin tmp := tmp diff un ;
21322: LD_ADDR_VAR 0 3
21326: PUSH
21327: LD_VAR 0 3
21331: PUSH
21332: LD_VAR 0 2
21336: DIFF
21337: ST_TO_ADDR
// continue ;
21338: GO 21308
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21340: LD_VAR 0 2
21344: PPUSH
21345: LD_INT 3
21347: PUSH
21348: LD_INT 22
21350: PUSH
21351: LD_INT 0
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PPUSH
21362: CALL_OW 69
21366: PPUSH
21367: LD_VAR 0 2
21371: PPUSH
21372: CALL_OW 74
21376: PPUSH
21377: CALL_OW 115
// end ;
21381: GO 21308
21383: POP
21384: POP
// until not tmp ;
21385: LD_VAR 0 3
21389: NOT
21390: IFFALSE 21291
// end ;
21392: PPOPN 3
21394: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21395: LD_EXP 62
21399: PUSH
21400: LD_EXP 87
21404: AND
21405: IFFALSE 21459
21407: GO 21409
21409: DISABLE
// begin ToLua ( displayTroll(); ) ;
21410: LD_STRING displayTroll();
21412: PPUSH
21413: CALL_OW 559
// wait ( 3 3$00 ) ;
21417: LD_INT 6300
21419: PPUSH
21420: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21424: LD_STRING hideTroll();
21426: PPUSH
21427: CALL_OW 559
// wait ( 1 1$00 ) ;
21431: LD_INT 2100
21433: PPUSH
21434: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21438: LD_STRING displayTroll();
21440: PPUSH
21441: CALL_OW 559
// wait ( 1 1$00 ) ;
21445: LD_INT 2100
21447: PPUSH
21448: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21452: LD_STRING hideTroll();
21454: PPUSH
21455: CALL_OW 559
// end ;
21459: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21460: LD_EXP 62
21464: PUSH
21465: LD_EXP 88
21469: AND
21470: IFFALSE 21533
21472: GO 21474
21474: DISABLE
21475: LD_INT 0
21477: PPUSH
// begin p := 0 ;
21478: LD_ADDR_VAR 0 1
21482: PUSH
21483: LD_INT 0
21485: ST_TO_ADDR
// repeat game_speed := 1 ;
21486: LD_ADDR_OWVAR 65
21490: PUSH
21491: LD_INT 1
21493: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21494: LD_INT 35
21496: PPUSH
21497: CALL_OW 67
// p := p + 1 ;
21501: LD_ADDR_VAR 0 1
21505: PUSH
21506: LD_VAR 0 1
21510: PUSH
21511: LD_INT 1
21513: PLUS
21514: ST_TO_ADDR
// until p >= 60 ;
21515: LD_VAR 0 1
21519: PUSH
21520: LD_INT 60
21522: GREATEREQUAL
21523: IFFALSE 21486
// game_speed := 4 ;
21525: LD_ADDR_OWVAR 65
21529: PUSH
21530: LD_INT 4
21532: ST_TO_ADDR
// end ;
21533: PPOPN 1
21535: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21536: LD_EXP 62
21540: PUSH
21541: LD_EXP 89
21545: AND
21546: IFFALSE 21692
21548: GO 21550
21550: DISABLE
21551: LD_INT 0
21553: PPUSH
21554: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21555: LD_ADDR_VAR 0 1
21559: PUSH
21560: LD_INT 22
21562: PUSH
21563: LD_OWVAR 2
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 2
21574: PUSH
21575: LD_INT 30
21577: PUSH
21578: LD_INT 0
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 30
21587: PUSH
21588: LD_INT 1
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: LIST
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PPUSH
21604: CALL_OW 69
21608: ST_TO_ADDR
// if not depot then
21609: LD_VAR 0 1
21613: NOT
21614: IFFALSE 21618
// exit ;
21616: GO 21692
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
21618: LD_ADDR_VAR 0 2
21622: PUSH
21623: LD_VAR 0 1
21627: PUSH
21628: LD_INT 1
21630: PPUSH
21631: LD_VAR 0 1
21635: PPUSH
21636: CALL_OW 12
21640: ARRAY
21641: PPUSH
21642: CALL_OW 274
21646: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21647: LD_VAR 0 2
21651: PPUSH
21652: LD_INT 1
21654: PPUSH
21655: LD_INT 0
21657: PPUSH
21658: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21662: LD_VAR 0 2
21666: PPUSH
21667: LD_INT 2
21669: PPUSH
21670: LD_INT 0
21672: PPUSH
21673: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21677: LD_VAR 0 2
21681: PPUSH
21682: LD_INT 3
21684: PPUSH
21685: LD_INT 0
21687: PPUSH
21688: CALL_OW 277
// end ;
21692: PPOPN 2
21694: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21695: LD_EXP 62
21699: PUSH
21700: LD_EXP 90
21704: AND
21705: IFFALSE 21802
21707: GO 21709
21709: DISABLE
21710: LD_INT 0
21712: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21713: LD_ADDR_VAR 0 1
21717: PUSH
21718: LD_INT 22
21720: PUSH
21721: LD_OWVAR 2
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 21
21732: PUSH
21733: LD_INT 1
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 3
21742: PUSH
21743: LD_INT 23
21745: PUSH
21746: LD_INT 0
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: LIST
21761: PPUSH
21762: CALL_OW 69
21766: ST_TO_ADDR
// if not tmp then
21767: LD_VAR 0 1
21771: NOT
21772: IFFALSE 21776
// exit ;
21774: GO 21802
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21776: LD_VAR 0 1
21780: PUSH
21781: LD_INT 1
21783: PPUSH
21784: LD_VAR 0 1
21788: PPUSH
21789: CALL_OW 12
21793: ARRAY
21794: PPUSH
21795: LD_INT 200
21797: PPUSH
21798: CALL_OW 234
// end ;
21802: PPOPN 1
21804: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21805: LD_EXP 62
21809: PUSH
21810: LD_EXP 91
21814: AND
21815: IFFALSE 21894
21817: GO 21819
21819: DISABLE
21820: LD_INT 0
21822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21823: LD_ADDR_VAR 0 1
21827: PUSH
21828: LD_INT 22
21830: PUSH
21831: LD_OWVAR 2
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 21
21842: PUSH
21843: LD_INT 2
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PPUSH
21854: CALL_OW 69
21858: ST_TO_ADDR
// if not tmp then
21859: LD_VAR 0 1
21863: NOT
21864: IFFALSE 21868
// exit ;
21866: GO 21894
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21868: LD_VAR 0 1
21872: PUSH
21873: LD_INT 1
21875: PPUSH
21876: LD_VAR 0 1
21880: PPUSH
21881: CALL_OW 12
21885: ARRAY
21886: PPUSH
21887: LD_INT 60
21889: PPUSH
21890: CALL_OW 234
// end ;
21894: PPOPN 1
21896: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21897: LD_EXP 62
21901: PUSH
21902: LD_EXP 92
21906: AND
21907: IFFALSE 22006
21909: GO 21911
21911: DISABLE
21912: LD_INT 0
21914: PPUSH
21915: PPUSH
// begin enable ;
21916: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21917: LD_ADDR_VAR 0 1
21921: PUSH
21922: LD_INT 22
21924: PUSH
21925: LD_OWVAR 2
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 61
21936: PUSH
21937: EMPTY
21938: LIST
21939: PUSH
21940: LD_INT 33
21942: PUSH
21943: LD_INT 2
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: LIST
21954: PPUSH
21955: CALL_OW 69
21959: ST_TO_ADDR
// if not tmp then
21960: LD_VAR 0 1
21964: NOT
21965: IFFALSE 21969
// exit ;
21967: GO 22006
// for i in tmp do
21969: LD_ADDR_VAR 0 2
21973: PUSH
21974: LD_VAR 0 1
21978: PUSH
21979: FOR_IN
21980: IFFALSE 22004
// if IsControledBy ( i ) then
21982: LD_VAR 0 2
21986: PPUSH
21987: CALL_OW 312
21991: IFFALSE 22002
// ComUnlink ( i ) ;
21993: LD_VAR 0 2
21997: PPUSH
21998: CALL_OW 136
22002: GO 21979
22004: POP
22005: POP
// end ;
22006: PPOPN 2
22008: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
22009: LD_EXP 62
22013: PUSH
22014: LD_EXP 93
22018: AND
22019: IFFALSE 22159
22021: GO 22023
22023: DISABLE
22024: LD_INT 0
22026: PPUSH
22027: PPUSH
// begin ToLua ( displayPowell(); ) ;
22028: LD_STRING displayPowell();
22030: PPUSH
22031: CALL_OW 559
// uc_side := 0 ;
22035: LD_ADDR_OWVAR 20
22039: PUSH
22040: LD_INT 0
22042: ST_TO_ADDR
// uc_nation := 2 ;
22043: LD_ADDR_OWVAR 21
22047: PUSH
22048: LD_INT 2
22050: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
22051: LD_ADDR_OWVAR 37
22055: PUSH
22056: LD_INT 14
22058: ST_TO_ADDR
// vc_engine := engine_siberite ;
22059: LD_ADDR_OWVAR 39
22063: PUSH
22064: LD_INT 3
22066: ST_TO_ADDR
// vc_control := control_apeman ;
22067: LD_ADDR_OWVAR 38
22071: PUSH
22072: LD_INT 5
22074: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
22075: LD_ADDR_OWVAR 40
22079: PUSH
22080: LD_INT 29
22082: ST_TO_ADDR
// un := CreateVehicle ;
22083: LD_ADDR_VAR 0 2
22087: PUSH
22088: CALL_OW 45
22092: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22093: LD_VAR 0 2
22097: PPUSH
22098: LD_INT 1
22100: PPUSH
22101: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22105: LD_INT 35
22107: PPUSH
22108: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22112: LD_VAR 0 2
22116: PPUSH
22117: LD_INT 22
22119: PUSH
22120: LD_OWVAR 2
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PPUSH
22129: CALL_OW 69
22133: PPUSH
22134: LD_VAR 0 2
22138: PPUSH
22139: CALL_OW 74
22143: PPUSH
22144: CALL_OW 115
// until IsDead ( un ) ;
22148: LD_VAR 0 2
22152: PPUSH
22153: CALL_OW 301
22157: IFFALSE 22105
// end ;
22159: PPOPN 2
22161: END
// every 0 0$1 trigger StreamModeActive and sStu do
22162: LD_EXP 62
22166: PUSH
22167: LD_EXP 101
22171: AND
22172: IFFALSE 22188
22174: GO 22176
22176: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22177: LD_STRING displayStucuk();
22179: PPUSH
22180: CALL_OW 559
// ResetFog ;
22184: CALL_OW 335
// end ;
22188: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22189: LD_EXP 62
22193: PUSH
22194: LD_EXP 94
22198: AND
22199: IFFALSE 22340
22201: GO 22203
22203: DISABLE
22204: LD_INT 0
22206: PPUSH
22207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22208: LD_ADDR_VAR 0 2
22212: PUSH
22213: LD_INT 22
22215: PUSH
22216: LD_OWVAR 2
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 21
22227: PUSH
22228: LD_INT 1
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PPUSH
22239: CALL_OW 69
22243: ST_TO_ADDR
// if not tmp then
22244: LD_VAR 0 2
22248: NOT
22249: IFFALSE 22253
// exit ;
22251: GO 22340
// un := tmp [ rand ( 1 , tmp ) ] ;
22253: LD_ADDR_VAR 0 1
22257: PUSH
22258: LD_VAR 0 2
22262: PUSH
22263: LD_INT 1
22265: PPUSH
22266: LD_VAR 0 2
22270: PPUSH
22271: CALL_OW 12
22275: ARRAY
22276: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22277: LD_VAR 0 1
22281: PPUSH
22282: LD_INT 0
22284: PPUSH
22285: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22289: LD_VAR 0 1
22293: PPUSH
22294: LD_OWVAR 3
22298: PUSH
22299: LD_VAR 0 1
22303: DIFF
22304: PPUSH
22305: LD_VAR 0 1
22309: PPUSH
22310: CALL_OW 74
22314: PPUSH
22315: CALL_OW 115
// wait ( 0 0$20 ) ;
22319: LD_INT 700
22321: PPUSH
22322: CALL_OW 67
// SetSide ( un , your_side ) ;
22326: LD_VAR 0 1
22330: PPUSH
22331: LD_OWVAR 2
22335: PPUSH
22336: CALL_OW 235
// end ;
22340: PPOPN 2
22342: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22343: LD_EXP 62
22347: PUSH
22348: LD_EXP 95
22352: AND
22353: IFFALSE 22459
22355: GO 22357
22357: DISABLE
22358: LD_INT 0
22360: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22361: LD_ADDR_VAR 0 1
22365: PUSH
22366: LD_INT 22
22368: PUSH
22369: LD_OWVAR 2
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 2
22380: PUSH
22381: LD_INT 30
22383: PUSH
22384: LD_INT 0
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 30
22393: PUSH
22394: LD_INT 1
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: LIST
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: PPUSH
22410: CALL_OW 69
22414: ST_TO_ADDR
// if not depot then
22415: LD_VAR 0 1
22419: NOT
22420: IFFALSE 22424
// exit ;
22422: GO 22459
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22424: LD_VAR 0 1
22428: PUSH
22429: LD_INT 1
22431: ARRAY
22432: PPUSH
22433: CALL_OW 250
22437: PPUSH
22438: LD_VAR 0 1
22442: PUSH
22443: LD_INT 1
22445: ARRAY
22446: PPUSH
22447: CALL_OW 251
22451: PPUSH
22452: LD_INT 70
22454: PPUSH
22455: CALL_OW 495
// end ;
22459: PPOPN 1
22461: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22462: LD_EXP 62
22466: PUSH
22467: LD_EXP 96
22471: AND
22472: IFFALSE 22683
22474: GO 22476
22476: DISABLE
22477: LD_INT 0
22479: PPUSH
22480: PPUSH
22481: PPUSH
22482: PPUSH
22483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22484: LD_ADDR_VAR 0 5
22488: PUSH
22489: LD_INT 22
22491: PUSH
22492: LD_OWVAR 2
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 21
22503: PUSH
22504: LD_INT 1
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PPUSH
22515: CALL_OW 69
22519: ST_TO_ADDR
// if not tmp then
22520: LD_VAR 0 5
22524: NOT
22525: IFFALSE 22529
// exit ;
22527: GO 22683
// for i in tmp do
22529: LD_ADDR_VAR 0 1
22533: PUSH
22534: LD_VAR 0 5
22538: PUSH
22539: FOR_IN
22540: IFFALSE 22681
// begin d := rand ( 0 , 5 ) ;
22542: LD_ADDR_VAR 0 4
22546: PUSH
22547: LD_INT 0
22549: PPUSH
22550: LD_INT 5
22552: PPUSH
22553: CALL_OW 12
22557: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22558: LD_ADDR_VAR 0 2
22562: PUSH
22563: LD_VAR 0 1
22567: PPUSH
22568: CALL_OW 250
22572: PPUSH
22573: LD_VAR 0 4
22577: PPUSH
22578: LD_INT 3
22580: PPUSH
22581: LD_INT 12
22583: PPUSH
22584: CALL_OW 12
22588: PPUSH
22589: CALL_OW 272
22593: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22594: LD_ADDR_VAR 0 3
22598: PUSH
22599: LD_VAR 0 1
22603: PPUSH
22604: CALL_OW 251
22608: PPUSH
22609: LD_VAR 0 4
22613: PPUSH
22614: LD_INT 3
22616: PPUSH
22617: LD_INT 12
22619: PPUSH
22620: CALL_OW 12
22624: PPUSH
22625: CALL_OW 273
22629: ST_TO_ADDR
// if ValidHex ( x , y ) then
22630: LD_VAR 0 2
22634: PPUSH
22635: LD_VAR 0 3
22639: PPUSH
22640: CALL_OW 488
22644: IFFALSE 22679
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22646: LD_VAR 0 1
22650: PPUSH
22651: LD_VAR 0 2
22655: PPUSH
22656: LD_VAR 0 3
22660: PPUSH
22661: LD_INT 3
22663: PPUSH
22664: LD_INT 6
22666: PPUSH
22667: CALL_OW 12
22671: PPUSH
22672: LD_INT 1
22674: PPUSH
22675: CALL_OW 483
// end ;
22679: GO 22539
22681: POP
22682: POP
// end ;
22683: PPOPN 5
22685: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22686: LD_EXP 62
22690: PUSH
22691: LD_EXP 97
22695: AND
22696: IFFALSE 22790
22698: GO 22700
22700: DISABLE
22701: LD_INT 0
22703: PPUSH
22704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22705: LD_ADDR_VAR 0 2
22709: PUSH
22710: LD_INT 22
22712: PUSH
22713: LD_OWVAR 2
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 32
22724: PUSH
22725: LD_INT 1
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 21
22734: PUSH
22735: LD_INT 2
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: LIST
22746: PPUSH
22747: CALL_OW 69
22751: ST_TO_ADDR
// if not tmp then
22752: LD_VAR 0 2
22756: NOT
22757: IFFALSE 22761
// exit ;
22759: GO 22790
// for i in tmp do
22761: LD_ADDR_VAR 0 1
22765: PUSH
22766: LD_VAR 0 2
22770: PUSH
22771: FOR_IN
22772: IFFALSE 22788
// SetFuel ( i , 0 ) ;
22774: LD_VAR 0 1
22778: PPUSH
22779: LD_INT 0
22781: PPUSH
22782: CALL_OW 240
22786: GO 22771
22788: POP
22789: POP
// end ;
22790: PPOPN 2
22792: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22793: LD_EXP 62
22797: PUSH
22798: LD_EXP 98
22802: AND
22803: IFFALSE 22869
22805: GO 22807
22807: DISABLE
22808: LD_INT 0
22810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22811: LD_ADDR_VAR 0 1
22815: PUSH
22816: LD_INT 22
22818: PUSH
22819: LD_OWVAR 2
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 30
22830: PUSH
22831: LD_INT 29
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PPUSH
22842: CALL_OW 69
22846: ST_TO_ADDR
// if not tmp then
22847: LD_VAR 0 1
22851: NOT
22852: IFFALSE 22856
// exit ;
22854: GO 22869
// DestroyUnit ( tmp [ 1 ] ) ;
22856: LD_VAR 0 1
22860: PUSH
22861: LD_INT 1
22863: ARRAY
22864: PPUSH
22865: CALL_OW 65
// end ;
22869: PPOPN 1
22871: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22872: LD_EXP 62
22876: PUSH
22877: LD_EXP 100
22881: AND
22882: IFFALSE 23011
22884: GO 22886
22886: DISABLE
22887: LD_INT 0
22889: PPUSH
// begin uc_side := 0 ;
22890: LD_ADDR_OWVAR 20
22894: PUSH
22895: LD_INT 0
22897: ST_TO_ADDR
// uc_nation := nation_arabian ;
22898: LD_ADDR_OWVAR 21
22902: PUSH
22903: LD_INT 2
22905: ST_TO_ADDR
// hc_gallery :=  ;
22906: LD_ADDR_OWVAR 33
22910: PUSH
22911: LD_STRING 
22913: ST_TO_ADDR
// hc_name :=  ;
22914: LD_ADDR_OWVAR 26
22918: PUSH
22919: LD_STRING 
22921: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22922: LD_INT 1
22924: PPUSH
22925: LD_INT 11
22927: PPUSH
22928: LD_INT 10
22930: PPUSH
22931: CALL_OW 380
// un := CreateHuman ;
22935: LD_ADDR_VAR 0 1
22939: PUSH
22940: CALL_OW 44
22944: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22945: LD_VAR 0 1
22949: PPUSH
22950: LD_INT 1
22952: PPUSH
22953: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22957: LD_INT 35
22959: PPUSH
22960: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22964: LD_VAR 0 1
22968: PPUSH
22969: LD_INT 22
22971: PUSH
22972: LD_OWVAR 2
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PPUSH
22981: CALL_OW 69
22985: PPUSH
22986: LD_VAR 0 1
22990: PPUSH
22991: CALL_OW 74
22995: PPUSH
22996: CALL_OW 115
// until IsDead ( un ) ;
23000: LD_VAR 0 1
23004: PPUSH
23005: CALL_OW 301
23009: IFFALSE 22957
// end ;
23011: PPOPN 1
23013: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
23014: LD_EXP 62
23018: PUSH
23019: LD_EXP 102
23023: AND
23024: IFFALSE 23036
23026: GO 23028
23028: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
23029: LD_STRING earthquake(getX(game), 0, 32)
23031: PPUSH
23032: CALL_OW 559
23036: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
23037: LD_EXP 62
23041: PUSH
23042: LD_EXP 103
23046: AND
23047: IFFALSE 23138
23049: GO 23051
23051: DISABLE
23052: LD_INT 0
23054: PPUSH
// begin enable ;
23055: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
23056: LD_ADDR_VAR 0 1
23060: PUSH
23061: LD_INT 22
23063: PUSH
23064: LD_OWVAR 2
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 21
23075: PUSH
23076: LD_INT 2
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 33
23085: PUSH
23086: LD_INT 3
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: LIST
23097: PPUSH
23098: CALL_OW 69
23102: ST_TO_ADDR
// if not tmp then
23103: LD_VAR 0 1
23107: NOT
23108: IFFALSE 23112
// exit ;
23110: GO 23138
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23112: LD_VAR 0 1
23116: PUSH
23117: LD_INT 1
23119: PPUSH
23120: LD_VAR 0 1
23124: PPUSH
23125: CALL_OW 12
23129: ARRAY
23130: PPUSH
23131: LD_INT 1
23133: PPUSH
23134: CALL_OW 234
// end ;
23138: PPOPN 1
23140: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
23141: LD_EXP 62
23145: PUSH
23146: LD_EXP 104
23150: AND
23151: IFFALSE 23292
23153: GO 23155
23155: DISABLE
23156: LD_INT 0
23158: PPUSH
23159: PPUSH
23160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23161: LD_ADDR_VAR 0 3
23165: PUSH
23166: LD_INT 22
23168: PUSH
23169: LD_OWVAR 2
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 25
23180: PUSH
23181: LD_INT 1
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PPUSH
23192: CALL_OW 69
23196: ST_TO_ADDR
// if not tmp then
23197: LD_VAR 0 3
23201: NOT
23202: IFFALSE 23206
// exit ;
23204: GO 23292
// un := tmp [ rand ( 1 , tmp ) ] ;
23206: LD_ADDR_VAR 0 2
23210: PUSH
23211: LD_VAR 0 3
23215: PUSH
23216: LD_INT 1
23218: PPUSH
23219: LD_VAR 0 3
23223: PPUSH
23224: CALL_OW 12
23228: ARRAY
23229: ST_TO_ADDR
// if Crawls ( un ) then
23230: LD_VAR 0 2
23234: PPUSH
23235: CALL_OW 318
23239: IFFALSE 23250
// ComWalk ( un ) ;
23241: LD_VAR 0 2
23245: PPUSH
23246: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23250: LD_VAR 0 2
23254: PPUSH
23255: LD_INT 9
23257: PPUSH
23258: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23262: LD_INT 28
23264: PPUSH
23265: LD_OWVAR 2
23269: PPUSH
23270: LD_INT 2
23272: PPUSH
23273: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23277: LD_INT 29
23279: PPUSH
23280: LD_OWVAR 2
23284: PPUSH
23285: LD_INT 2
23287: PPUSH
23288: CALL_OW 322
// end ;
23292: PPOPN 3
23294: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23295: LD_EXP 62
23299: PUSH
23300: LD_EXP 105
23304: AND
23305: IFFALSE 23416
23307: GO 23309
23309: DISABLE
23310: LD_INT 0
23312: PPUSH
23313: PPUSH
23314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23315: LD_ADDR_VAR 0 3
23319: PUSH
23320: LD_INT 22
23322: PUSH
23323: LD_OWVAR 2
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 25
23334: PUSH
23335: LD_INT 1
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PPUSH
23346: CALL_OW 69
23350: ST_TO_ADDR
// if not tmp then
23351: LD_VAR 0 3
23355: NOT
23356: IFFALSE 23360
// exit ;
23358: GO 23416
// un := tmp [ rand ( 1 , tmp ) ] ;
23360: LD_ADDR_VAR 0 2
23364: PUSH
23365: LD_VAR 0 3
23369: PUSH
23370: LD_INT 1
23372: PPUSH
23373: LD_VAR 0 3
23377: PPUSH
23378: CALL_OW 12
23382: ARRAY
23383: ST_TO_ADDR
// if Crawls ( un ) then
23384: LD_VAR 0 2
23388: PPUSH
23389: CALL_OW 318
23393: IFFALSE 23404
// ComWalk ( un ) ;
23395: LD_VAR 0 2
23399: PPUSH
23400: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23404: LD_VAR 0 2
23408: PPUSH
23409: LD_INT 8
23411: PPUSH
23412: CALL_OW 336
// end ;
23416: PPOPN 3
23418: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23419: LD_EXP 62
23423: PUSH
23424: LD_EXP 106
23428: AND
23429: IFFALSE 23573
23431: GO 23433
23433: DISABLE
23434: LD_INT 0
23436: PPUSH
23437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23438: LD_ADDR_VAR 0 2
23442: PUSH
23443: LD_INT 22
23445: PUSH
23446: LD_OWVAR 2
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 21
23457: PUSH
23458: LD_INT 2
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 2
23467: PUSH
23468: LD_INT 34
23470: PUSH
23471: LD_INT 12
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PUSH
23478: LD_INT 34
23480: PUSH
23481: LD_INT 51
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 34
23490: PUSH
23491: LD_INT 32
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: LIST
23508: PPUSH
23509: CALL_OW 69
23513: ST_TO_ADDR
// if not tmp then
23514: LD_VAR 0 2
23518: NOT
23519: IFFALSE 23523
// exit ;
23521: GO 23573
// for i in tmp do
23523: LD_ADDR_VAR 0 1
23527: PUSH
23528: LD_VAR 0 2
23532: PUSH
23533: FOR_IN
23534: IFFALSE 23571
// if GetCargo ( i , mat_artifact ) = 0 then
23536: LD_VAR 0 1
23540: PPUSH
23541: LD_INT 4
23543: PPUSH
23544: CALL_OW 289
23548: PUSH
23549: LD_INT 0
23551: EQUAL
23552: IFFALSE 23569
// SetCargo ( i , mat_siberit , 100 ) ;
23554: LD_VAR 0 1
23558: PPUSH
23559: LD_INT 3
23561: PPUSH
23562: LD_INT 100
23564: PPUSH
23565: CALL_OW 290
23569: GO 23533
23571: POP
23572: POP
// end ;
23573: PPOPN 2
23575: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
23576: LD_EXP 62
23580: PUSH
23581: LD_EXP 107
23585: AND
23586: IFFALSE 23769
23588: GO 23590
23590: DISABLE
23591: LD_INT 0
23593: PPUSH
23594: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23595: LD_ADDR_VAR 0 2
23599: PUSH
23600: LD_INT 22
23602: PUSH
23603: LD_OWVAR 2
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PPUSH
23612: CALL_OW 69
23616: ST_TO_ADDR
// if not tmp then
23617: LD_VAR 0 2
23621: NOT
23622: IFFALSE 23626
// exit ;
23624: GO 23769
// for i := 1 to 2 do
23626: LD_ADDR_VAR 0 1
23630: PUSH
23631: DOUBLE
23632: LD_INT 1
23634: DEC
23635: ST_TO_ADDR
23636: LD_INT 2
23638: PUSH
23639: FOR_TO
23640: IFFALSE 23767
// begin uc_side := your_side ;
23642: LD_ADDR_OWVAR 20
23646: PUSH
23647: LD_OWVAR 2
23651: ST_TO_ADDR
// uc_nation := nation_american ;
23652: LD_ADDR_OWVAR 21
23656: PUSH
23657: LD_INT 1
23659: ST_TO_ADDR
// vc_chassis := us_morphling ;
23660: LD_ADDR_OWVAR 37
23664: PUSH
23665: LD_INT 5
23667: ST_TO_ADDR
// vc_engine := engine_siberite ;
23668: LD_ADDR_OWVAR 39
23672: PUSH
23673: LD_INT 3
23675: ST_TO_ADDR
// vc_control := control_computer ;
23676: LD_ADDR_OWVAR 38
23680: PUSH
23681: LD_INT 3
23683: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23684: LD_ADDR_OWVAR 40
23688: PUSH
23689: LD_INT 10
23691: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23692: LD_VAR 0 2
23696: PUSH
23697: LD_INT 1
23699: ARRAY
23700: PPUSH
23701: CALL_OW 310
23705: NOT
23706: IFFALSE 23753
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23708: CALL_OW 45
23712: PPUSH
23713: LD_VAR 0 2
23717: PUSH
23718: LD_INT 1
23720: ARRAY
23721: PPUSH
23722: CALL_OW 250
23726: PPUSH
23727: LD_VAR 0 2
23731: PUSH
23732: LD_INT 1
23734: ARRAY
23735: PPUSH
23736: CALL_OW 251
23740: PPUSH
23741: LD_INT 12
23743: PPUSH
23744: LD_INT 1
23746: PPUSH
23747: CALL_OW 50
23751: GO 23765
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23753: CALL_OW 45
23757: PPUSH
23758: LD_INT 1
23760: PPUSH
23761: CALL_OW 51
// end ;
23765: GO 23639
23767: POP
23768: POP
// end ;
23769: PPOPN 2
23771: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23772: LD_EXP 62
23776: PUSH
23777: LD_EXP 108
23781: AND
23782: IFFALSE 24004
23784: GO 23786
23786: DISABLE
23787: LD_INT 0
23789: PPUSH
23790: PPUSH
23791: PPUSH
23792: PPUSH
23793: PPUSH
23794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23795: LD_ADDR_VAR 0 6
23799: PUSH
23800: LD_INT 22
23802: PUSH
23803: LD_OWVAR 2
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 21
23814: PUSH
23815: LD_INT 1
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 3
23824: PUSH
23825: LD_INT 23
23827: PUSH
23828: LD_INT 0
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: LIST
23843: PPUSH
23844: CALL_OW 69
23848: ST_TO_ADDR
// if not tmp then
23849: LD_VAR 0 6
23853: NOT
23854: IFFALSE 23858
// exit ;
23856: GO 24004
// s1 := rand ( 1 , 4 ) ;
23858: LD_ADDR_VAR 0 2
23862: PUSH
23863: LD_INT 1
23865: PPUSH
23866: LD_INT 4
23868: PPUSH
23869: CALL_OW 12
23873: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23874: LD_ADDR_VAR 0 4
23878: PUSH
23879: LD_VAR 0 6
23883: PUSH
23884: LD_INT 1
23886: ARRAY
23887: PPUSH
23888: LD_VAR 0 2
23892: PPUSH
23893: CALL_OW 259
23897: ST_TO_ADDR
// if s1 = 1 then
23898: LD_VAR 0 2
23902: PUSH
23903: LD_INT 1
23905: EQUAL
23906: IFFALSE 23926
// s2 := rand ( 2 , 4 ) else
23908: LD_ADDR_VAR 0 3
23912: PUSH
23913: LD_INT 2
23915: PPUSH
23916: LD_INT 4
23918: PPUSH
23919: CALL_OW 12
23923: ST_TO_ADDR
23924: GO 23934
// s2 := 1 ;
23926: LD_ADDR_VAR 0 3
23930: PUSH
23931: LD_INT 1
23933: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23934: LD_ADDR_VAR 0 5
23938: PUSH
23939: LD_VAR 0 6
23943: PUSH
23944: LD_INT 1
23946: ARRAY
23947: PPUSH
23948: LD_VAR 0 3
23952: PPUSH
23953: CALL_OW 259
23957: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23958: LD_VAR 0 6
23962: PUSH
23963: LD_INT 1
23965: ARRAY
23966: PPUSH
23967: LD_VAR 0 2
23971: PPUSH
23972: LD_VAR 0 5
23976: PPUSH
23977: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23981: LD_VAR 0 6
23985: PUSH
23986: LD_INT 1
23988: ARRAY
23989: PPUSH
23990: LD_VAR 0 3
23994: PPUSH
23995: LD_VAR 0 4
23999: PPUSH
24000: CALL_OW 237
// end ;
24004: PPOPN 6
24006: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
24007: LD_EXP 62
24011: PUSH
24012: LD_EXP 109
24016: AND
24017: IFFALSE 24096
24019: GO 24021
24021: DISABLE
24022: LD_INT 0
24024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
24025: LD_ADDR_VAR 0 1
24029: PUSH
24030: LD_INT 22
24032: PUSH
24033: LD_OWVAR 2
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 30
24044: PUSH
24045: LD_INT 3
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PPUSH
24056: CALL_OW 69
24060: ST_TO_ADDR
// if not tmp then
24061: LD_VAR 0 1
24065: NOT
24066: IFFALSE 24070
// exit ;
24068: GO 24096
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24070: LD_VAR 0 1
24074: PUSH
24075: LD_INT 1
24077: PPUSH
24078: LD_VAR 0 1
24082: PPUSH
24083: CALL_OW 12
24087: ARRAY
24088: PPUSH
24089: LD_INT 1
24091: PPUSH
24092: CALL_OW 234
// end ;
24096: PPOPN 1
24098: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
24099: LD_EXP 62
24103: PUSH
24104: LD_EXP 110
24108: AND
24109: IFFALSE 24221
24111: GO 24113
24113: DISABLE
24114: LD_INT 0
24116: PPUSH
24117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
24118: LD_ADDR_VAR 0 2
24122: PUSH
24123: LD_INT 22
24125: PUSH
24126: LD_OWVAR 2
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 2
24137: PUSH
24138: LD_INT 30
24140: PUSH
24141: LD_INT 27
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 30
24150: PUSH
24151: LD_INT 26
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 30
24160: PUSH
24161: LD_INT 28
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PPUSH
24178: CALL_OW 69
24182: ST_TO_ADDR
// if not tmp then
24183: LD_VAR 0 2
24187: NOT
24188: IFFALSE 24192
// exit ;
24190: GO 24221
// for i in tmp do
24192: LD_ADDR_VAR 0 1
24196: PUSH
24197: LD_VAR 0 2
24201: PUSH
24202: FOR_IN
24203: IFFALSE 24219
// SetLives ( i , 1 ) ;
24205: LD_VAR 0 1
24209: PPUSH
24210: LD_INT 1
24212: PPUSH
24213: CALL_OW 234
24217: GO 24202
24219: POP
24220: POP
// end ;
24221: PPOPN 2
24223: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
24224: LD_EXP 62
24228: PUSH
24229: LD_EXP 111
24233: AND
24234: IFFALSE 24521
24236: GO 24238
24238: DISABLE
24239: LD_INT 0
24241: PPUSH
24242: PPUSH
24243: PPUSH
// begin i := rand ( 1 , 7 ) ;
24244: LD_ADDR_VAR 0 1
24248: PUSH
24249: LD_INT 1
24251: PPUSH
24252: LD_INT 7
24254: PPUSH
24255: CALL_OW 12
24259: ST_TO_ADDR
// case i of 1 :
24260: LD_VAR 0 1
24264: PUSH
24265: LD_INT 1
24267: DOUBLE
24268: EQUAL
24269: IFTRUE 24273
24271: GO 24283
24273: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24274: LD_STRING earthquake(getX(game), 0, 32)
24276: PPUSH
24277: CALL_OW 559
24281: GO 24521
24283: LD_INT 2
24285: DOUBLE
24286: EQUAL
24287: IFTRUE 24291
24289: GO 24305
24291: POP
// begin ToLua ( displayStucuk(); ) ;
24292: LD_STRING displayStucuk();
24294: PPUSH
24295: CALL_OW 559
// ResetFog ;
24299: CALL_OW 335
// end ; 3 :
24303: GO 24521
24305: LD_INT 3
24307: DOUBLE
24308: EQUAL
24309: IFTRUE 24313
24311: GO 24417
24313: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24314: LD_ADDR_VAR 0 2
24318: PUSH
24319: LD_INT 22
24321: PUSH
24322: LD_OWVAR 2
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 25
24333: PUSH
24334: LD_INT 1
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PPUSH
24345: CALL_OW 69
24349: ST_TO_ADDR
// if not tmp then
24350: LD_VAR 0 2
24354: NOT
24355: IFFALSE 24359
// exit ;
24357: GO 24521
// un := tmp [ rand ( 1 , tmp ) ] ;
24359: LD_ADDR_VAR 0 3
24363: PUSH
24364: LD_VAR 0 2
24368: PUSH
24369: LD_INT 1
24371: PPUSH
24372: LD_VAR 0 2
24376: PPUSH
24377: CALL_OW 12
24381: ARRAY
24382: ST_TO_ADDR
// if Crawls ( un ) then
24383: LD_VAR 0 3
24387: PPUSH
24388: CALL_OW 318
24392: IFFALSE 24403
// ComWalk ( un ) ;
24394: LD_VAR 0 3
24398: PPUSH
24399: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24403: LD_VAR 0 3
24407: PPUSH
24408: LD_INT 8
24410: PPUSH
24411: CALL_OW 336
// end ; 4 :
24415: GO 24521
24417: LD_INT 4
24419: DOUBLE
24420: EQUAL
24421: IFTRUE 24425
24423: GO 24499
24425: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24426: LD_ADDR_VAR 0 2
24430: PUSH
24431: LD_INT 22
24433: PUSH
24434: LD_OWVAR 2
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 30
24445: PUSH
24446: LD_INT 29
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PPUSH
24457: CALL_OW 69
24461: ST_TO_ADDR
// if not tmp then
24462: LD_VAR 0 2
24466: NOT
24467: IFFALSE 24471
// exit ;
24469: GO 24521
// CenterNowOnUnits ( tmp [ 1 ] ) ;
24471: LD_VAR 0 2
24475: PUSH
24476: LD_INT 1
24478: ARRAY
24479: PPUSH
24480: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
24484: LD_VAR 0 2
24488: PUSH
24489: LD_INT 1
24491: ARRAY
24492: PPUSH
24493: CALL_OW 65
// end ; 5 .. 7 :
24497: GO 24521
24499: LD_INT 5
24501: DOUBLE
24502: GREATEREQUAL
24503: IFFALSE 24511
24505: LD_INT 7
24507: DOUBLE
24508: LESSEQUAL
24509: IFTRUE 24513
24511: GO 24520
24513: POP
// StreamSibBomb ; end ;
24514: CALL 20758 0 0
24518: GO 24521
24520: POP
// end ;
24521: PPOPN 3
24523: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24524: LD_EXP 62
24528: PUSH
24529: LD_EXP 112
24533: AND
24534: IFFALSE 24690
24536: GO 24538
24538: DISABLE
24539: LD_INT 0
24541: PPUSH
24542: PPUSH
24543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24544: LD_ADDR_VAR 0 2
24548: PUSH
24549: LD_INT 81
24551: PUSH
24552: LD_OWVAR 2
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 2
24563: PUSH
24564: LD_INT 21
24566: PUSH
24567: LD_INT 1
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 21
24576: PUSH
24577: LD_INT 2
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: LIST
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PPUSH
24593: CALL_OW 69
24597: ST_TO_ADDR
// if not tmp then
24598: LD_VAR 0 2
24602: NOT
24603: IFFALSE 24607
// exit ;
24605: GO 24690
// p := 0 ;
24607: LD_ADDR_VAR 0 3
24611: PUSH
24612: LD_INT 0
24614: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24615: LD_INT 35
24617: PPUSH
24618: CALL_OW 67
// p := p + 1 ;
24622: LD_ADDR_VAR 0 3
24626: PUSH
24627: LD_VAR 0 3
24631: PUSH
24632: LD_INT 1
24634: PLUS
24635: ST_TO_ADDR
// for i in tmp do
24636: LD_ADDR_VAR 0 1
24640: PUSH
24641: LD_VAR 0 2
24645: PUSH
24646: FOR_IN
24647: IFFALSE 24678
// if GetLives ( i ) < 1000 then
24649: LD_VAR 0 1
24653: PPUSH
24654: CALL_OW 256
24658: PUSH
24659: LD_INT 1000
24661: LESS
24662: IFFALSE 24676
// SetLives ( i , 1000 ) ;
24664: LD_VAR 0 1
24668: PPUSH
24669: LD_INT 1000
24671: PPUSH
24672: CALL_OW 234
24676: GO 24646
24678: POP
24679: POP
// until p > 20 ;
24680: LD_VAR 0 3
24684: PUSH
24685: LD_INT 20
24687: GREATER
24688: IFFALSE 24615
// end ;
24690: PPOPN 3
24692: END
// every 0 0$1 trigger StreamModeActive and sTime do
24693: LD_EXP 62
24697: PUSH
24698: LD_EXP 113
24702: AND
24703: IFFALSE 24738
24705: GO 24707
24707: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24708: LD_INT 28
24710: PPUSH
24711: LD_OWVAR 2
24715: PPUSH
24716: LD_INT 2
24718: PPUSH
24719: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24723: LD_INT 30
24725: PPUSH
24726: LD_OWVAR 2
24730: PPUSH
24731: LD_INT 2
24733: PPUSH
24734: CALL_OW 322
// end ;
24738: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24739: LD_EXP 62
24743: PUSH
24744: LD_EXP 114
24748: AND
24749: IFFALSE 24870
24751: GO 24753
24753: DISABLE
24754: LD_INT 0
24756: PPUSH
24757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24758: LD_ADDR_VAR 0 2
24762: PUSH
24763: LD_INT 22
24765: PUSH
24766: LD_OWVAR 2
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 21
24777: PUSH
24778: LD_INT 1
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 3
24787: PUSH
24788: LD_INT 23
24790: PUSH
24791: LD_INT 0
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: LIST
24806: PPUSH
24807: CALL_OW 69
24811: ST_TO_ADDR
// if not tmp then
24812: LD_VAR 0 2
24816: NOT
24817: IFFALSE 24821
// exit ;
24819: GO 24870
// for i in tmp do
24821: LD_ADDR_VAR 0 1
24825: PUSH
24826: LD_VAR 0 2
24830: PUSH
24831: FOR_IN
24832: IFFALSE 24868
// begin if Crawls ( i ) then
24834: LD_VAR 0 1
24838: PPUSH
24839: CALL_OW 318
24843: IFFALSE 24854
// ComWalk ( i ) ;
24845: LD_VAR 0 1
24849: PPUSH
24850: CALL_OW 138
// SetClass ( i , 2 ) ;
24854: LD_VAR 0 1
24858: PPUSH
24859: LD_INT 2
24861: PPUSH
24862: CALL_OW 336
// end ;
24866: GO 24831
24868: POP
24869: POP
// end ;
24870: PPOPN 2
24872: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24873: LD_EXP 62
24877: PUSH
24878: LD_EXP 115
24882: AND
24883: IFFALSE 25171
24885: GO 24887
24887: DISABLE
24888: LD_INT 0
24890: PPUSH
24891: PPUSH
24892: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24893: LD_OWVAR 2
24897: PPUSH
24898: LD_INT 9
24900: PPUSH
24901: LD_INT 1
24903: PPUSH
24904: LD_INT 1
24906: PPUSH
24907: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24911: LD_INT 9
24913: PPUSH
24914: LD_OWVAR 2
24918: PPUSH
24919: CALL_OW 343
// uc_side := 9 ;
24923: LD_ADDR_OWVAR 20
24927: PUSH
24928: LD_INT 9
24930: ST_TO_ADDR
// uc_nation := 2 ;
24931: LD_ADDR_OWVAR 21
24935: PUSH
24936: LD_INT 2
24938: ST_TO_ADDR
// hc_name := Dark Warrior ;
24939: LD_ADDR_OWVAR 26
24943: PUSH
24944: LD_STRING Dark Warrior
24946: ST_TO_ADDR
// hc_gallery :=  ;
24947: LD_ADDR_OWVAR 33
24951: PUSH
24952: LD_STRING 
24954: ST_TO_ADDR
// hc_noskilllimit := true ;
24955: LD_ADDR_OWVAR 76
24959: PUSH
24960: LD_INT 1
24962: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24963: LD_ADDR_OWVAR 31
24967: PUSH
24968: LD_INT 30
24970: PUSH
24971: LD_INT 30
24973: PUSH
24974: LD_INT 30
24976: PUSH
24977: LD_INT 30
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: ST_TO_ADDR
// un := CreateHuman ;
24986: LD_ADDR_VAR 0 3
24990: PUSH
24991: CALL_OW 44
24995: ST_TO_ADDR
// hc_noskilllimit := false ;
24996: LD_ADDR_OWVAR 76
25000: PUSH
25001: LD_INT 0
25003: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25004: LD_VAR 0 3
25008: PPUSH
25009: LD_INT 1
25011: PPUSH
25012: CALL_OW 51
// ToLua ( playRanger() ) ;
25016: LD_STRING playRanger()
25018: PPUSH
25019: CALL_OW 559
// p := 0 ;
25023: LD_ADDR_VAR 0 2
25027: PUSH
25028: LD_INT 0
25030: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25031: LD_INT 35
25033: PPUSH
25034: CALL_OW 67
// p := p + 1 ;
25038: LD_ADDR_VAR 0 2
25042: PUSH
25043: LD_VAR 0 2
25047: PUSH
25048: LD_INT 1
25050: PLUS
25051: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
25052: LD_VAR 0 3
25056: PPUSH
25057: CALL_OW 256
25061: PUSH
25062: LD_INT 1000
25064: LESS
25065: IFFALSE 25079
// SetLives ( un , 1000 ) ;
25067: LD_VAR 0 3
25071: PPUSH
25072: LD_INT 1000
25074: PPUSH
25075: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
25079: LD_VAR 0 3
25083: PPUSH
25084: LD_INT 81
25086: PUSH
25087: LD_OWVAR 2
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 91
25098: PUSH
25099: LD_VAR 0 3
25103: PUSH
25104: LD_INT 30
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: LIST
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PPUSH
25116: CALL_OW 69
25120: PPUSH
25121: LD_VAR 0 3
25125: PPUSH
25126: CALL_OW 74
25130: PPUSH
25131: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
25135: LD_VAR 0 2
25139: PUSH
25140: LD_INT 80
25142: GREATER
25143: PUSH
25144: LD_VAR 0 3
25148: PPUSH
25149: CALL_OW 301
25153: OR
25154: IFFALSE 25031
// if un then
25156: LD_VAR 0 3
25160: IFFALSE 25171
// RemoveUnit ( un ) ;
25162: LD_VAR 0 3
25166: PPUSH
25167: CALL_OW 64
// end ;
25171: PPOPN 3
25173: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
25174: LD_EXP 116
25178: IFFALSE 25294
25180: GO 25182
25182: DISABLE
25183: LD_INT 0
25185: PPUSH
25186: PPUSH
25187: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25188: LD_ADDR_VAR 0 2
25192: PUSH
25193: LD_INT 81
25195: PUSH
25196: LD_OWVAR 2
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 21
25207: PUSH
25208: LD_INT 1
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PPUSH
25219: CALL_OW 69
25223: ST_TO_ADDR
// ToLua ( playComputer() ) ;
25224: LD_STRING playComputer()
25226: PPUSH
25227: CALL_OW 559
// if not tmp then
25231: LD_VAR 0 2
25235: NOT
25236: IFFALSE 25240
// exit ;
25238: GO 25294
// for i in tmp do
25240: LD_ADDR_VAR 0 1
25244: PUSH
25245: LD_VAR 0 2
25249: PUSH
25250: FOR_IN
25251: IFFALSE 25292
// for j := 1 to 4 do
25253: LD_ADDR_VAR 0 3
25257: PUSH
25258: DOUBLE
25259: LD_INT 1
25261: DEC
25262: ST_TO_ADDR
25263: LD_INT 4
25265: PUSH
25266: FOR_TO
25267: IFFALSE 25288
// SetSkill ( i , j , 10 ) ;
25269: LD_VAR 0 1
25273: PPUSH
25274: LD_VAR 0 3
25278: PPUSH
25279: LD_INT 10
25281: PPUSH
25282: CALL_OW 237
25286: GO 25266
25288: POP
25289: POP
25290: GO 25250
25292: POP
25293: POP
// end ;
25294: PPOPN 3
25296: END
// every 0 0$1 trigger s30 do var i , tmp ;
25297: LD_EXP 117
25301: IFFALSE 25370
25303: GO 25305
25305: DISABLE
25306: LD_INT 0
25308: PPUSH
25309: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25310: LD_ADDR_VAR 0 2
25314: PUSH
25315: LD_INT 22
25317: PUSH
25318: LD_OWVAR 2
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PPUSH
25327: CALL_OW 69
25331: ST_TO_ADDR
// if not tmp then
25332: LD_VAR 0 2
25336: NOT
25337: IFFALSE 25341
// exit ;
25339: GO 25370
// for i in tmp do
25341: LD_ADDR_VAR 0 1
25345: PUSH
25346: LD_VAR 0 2
25350: PUSH
25351: FOR_IN
25352: IFFALSE 25368
// SetLives ( i , 300 ) ;
25354: LD_VAR 0 1
25358: PPUSH
25359: LD_INT 300
25361: PPUSH
25362: CALL_OW 234
25366: GO 25351
25368: POP
25369: POP
// end ;
25370: PPOPN 2
25372: END
// every 0 0$1 trigger s60 do var i , tmp ;
25373: LD_EXP 118
25377: IFFALSE 25446
25379: GO 25381
25381: DISABLE
25382: LD_INT 0
25384: PPUSH
25385: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25386: LD_ADDR_VAR 0 2
25390: PUSH
25391: LD_INT 22
25393: PUSH
25394: LD_OWVAR 2
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PPUSH
25403: CALL_OW 69
25407: ST_TO_ADDR
// if not tmp then
25408: LD_VAR 0 2
25412: NOT
25413: IFFALSE 25417
// exit ;
25415: GO 25446
// for i in tmp do
25417: LD_ADDR_VAR 0 1
25421: PUSH
25422: LD_VAR 0 2
25426: PUSH
25427: FOR_IN
25428: IFFALSE 25444
// SetLives ( i , 600 ) ;
25430: LD_VAR 0 1
25434: PPUSH
25435: LD_INT 600
25437: PPUSH
25438: CALL_OW 234
25442: GO 25427
25444: POP
25445: POP
// end ;
25446: PPOPN 2
25448: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25449: LD_INT 0
25451: PPUSH
// case cmd of 301 :
25452: LD_VAR 0 1
25456: PUSH
25457: LD_INT 301
25459: DOUBLE
25460: EQUAL
25461: IFTRUE 25465
25463: GO 25497
25465: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25466: LD_VAR 0 6
25470: PPUSH
25471: LD_VAR 0 7
25475: PPUSH
25476: LD_VAR 0 8
25480: PPUSH
25481: LD_VAR 0 4
25485: PPUSH
25486: LD_VAR 0 5
25490: PPUSH
25491: CALL 26698 0 5
25495: GO 25618
25497: LD_INT 302
25499: DOUBLE
25500: EQUAL
25501: IFTRUE 25505
25503: GO 25542
25505: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25506: LD_VAR 0 6
25510: PPUSH
25511: LD_VAR 0 7
25515: PPUSH
25516: LD_VAR 0 8
25520: PPUSH
25521: LD_VAR 0 9
25525: PPUSH
25526: LD_VAR 0 4
25530: PPUSH
25531: LD_VAR 0 5
25535: PPUSH
25536: CALL 26789 0 6
25540: GO 25618
25542: LD_INT 303
25544: DOUBLE
25545: EQUAL
25546: IFTRUE 25550
25548: GO 25587
25550: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25551: LD_VAR 0 6
25555: PPUSH
25556: LD_VAR 0 7
25560: PPUSH
25561: LD_VAR 0 8
25565: PPUSH
25566: LD_VAR 0 9
25570: PPUSH
25571: LD_VAR 0 4
25575: PPUSH
25576: LD_VAR 0 5
25580: PPUSH
25581: CALL 25623 0 6
25585: GO 25618
25587: LD_INT 304
25589: DOUBLE
25590: EQUAL
25591: IFTRUE 25595
25593: GO 25617
25595: POP
// hHackTeleport ( unit , x , y ) ; end ;
25596: LD_VAR 0 2
25600: PPUSH
25601: LD_VAR 0 4
25605: PPUSH
25606: LD_VAR 0 5
25610: PPUSH
25611: CALL 27382 0 3
25615: GO 25618
25617: POP
// end ;
25618: LD_VAR 0 12
25622: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25623: LD_INT 0
25625: PPUSH
25626: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25627: LD_VAR 0 1
25631: PUSH
25632: LD_INT 1
25634: LESS
25635: PUSH
25636: LD_VAR 0 1
25640: PUSH
25641: LD_INT 3
25643: GREATER
25644: OR
25645: PUSH
25646: LD_VAR 0 5
25650: PPUSH
25651: LD_VAR 0 6
25655: PPUSH
25656: CALL_OW 428
25660: OR
25661: IFFALSE 25665
// exit ;
25663: GO 26385
// uc_side := your_side ;
25665: LD_ADDR_OWVAR 20
25669: PUSH
25670: LD_OWVAR 2
25674: ST_TO_ADDR
// uc_nation := nation ;
25675: LD_ADDR_OWVAR 21
25679: PUSH
25680: LD_VAR 0 1
25684: ST_TO_ADDR
// bc_level = 1 ;
25685: LD_ADDR_OWVAR 43
25689: PUSH
25690: LD_INT 1
25692: ST_TO_ADDR
// case btype of 1 :
25693: LD_VAR 0 2
25697: PUSH
25698: LD_INT 1
25700: DOUBLE
25701: EQUAL
25702: IFTRUE 25706
25704: GO 25717
25706: POP
// bc_type := b_depot ; 2 :
25707: LD_ADDR_OWVAR 42
25711: PUSH
25712: LD_INT 0
25714: ST_TO_ADDR
25715: GO 26329
25717: LD_INT 2
25719: DOUBLE
25720: EQUAL
25721: IFTRUE 25725
25723: GO 25736
25725: POP
// bc_type := b_warehouse ; 3 :
25726: LD_ADDR_OWVAR 42
25730: PUSH
25731: LD_INT 1
25733: ST_TO_ADDR
25734: GO 26329
25736: LD_INT 3
25738: DOUBLE
25739: EQUAL
25740: IFTRUE 25744
25742: GO 25755
25744: POP
// bc_type := b_lab ; 4 .. 9 :
25745: LD_ADDR_OWVAR 42
25749: PUSH
25750: LD_INT 6
25752: ST_TO_ADDR
25753: GO 26329
25755: LD_INT 4
25757: DOUBLE
25758: GREATEREQUAL
25759: IFFALSE 25767
25761: LD_INT 9
25763: DOUBLE
25764: LESSEQUAL
25765: IFTRUE 25769
25767: GO 25821
25769: POP
// begin bc_type := b_lab_half ;
25770: LD_ADDR_OWVAR 42
25774: PUSH
25775: LD_INT 7
25777: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25778: LD_ADDR_OWVAR 44
25782: PUSH
25783: LD_INT 10
25785: PUSH
25786: LD_INT 11
25788: PUSH
25789: LD_INT 12
25791: PUSH
25792: LD_INT 15
25794: PUSH
25795: LD_INT 14
25797: PUSH
25798: LD_INT 13
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: PUSH
25809: LD_VAR 0 2
25813: PUSH
25814: LD_INT 3
25816: MINUS
25817: ARRAY
25818: ST_TO_ADDR
// end ; 10 .. 13 :
25819: GO 26329
25821: LD_INT 10
25823: DOUBLE
25824: GREATEREQUAL
25825: IFFALSE 25833
25827: LD_INT 13
25829: DOUBLE
25830: LESSEQUAL
25831: IFTRUE 25835
25833: GO 25912
25835: POP
// begin bc_type := b_lab_full ;
25836: LD_ADDR_OWVAR 42
25840: PUSH
25841: LD_INT 8
25843: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25844: LD_ADDR_OWVAR 44
25848: PUSH
25849: LD_INT 10
25851: PUSH
25852: LD_INT 12
25854: PUSH
25855: LD_INT 14
25857: PUSH
25858: LD_INT 13
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: PUSH
25867: LD_VAR 0 2
25871: PUSH
25872: LD_INT 9
25874: MINUS
25875: ARRAY
25876: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25877: LD_ADDR_OWVAR 45
25881: PUSH
25882: LD_INT 11
25884: PUSH
25885: LD_INT 15
25887: PUSH
25888: LD_INT 12
25890: PUSH
25891: LD_INT 15
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: PUSH
25900: LD_VAR 0 2
25904: PUSH
25905: LD_INT 9
25907: MINUS
25908: ARRAY
25909: ST_TO_ADDR
// end ; 14 :
25910: GO 26329
25912: LD_INT 14
25914: DOUBLE
25915: EQUAL
25916: IFTRUE 25920
25918: GO 25931
25920: POP
// bc_type := b_workshop ; 15 :
25921: LD_ADDR_OWVAR 42
25925: PUSH
25926: LD_INT 2
25928: ST_TO_ADDR
25929: GO 26329
25931: LD_INT 15
25933: DOUBLE
25934: EQUAL
25935: IFTRUE 25939
25937: GO 25950
25939: POP
// bc_type := b_factory ; 16 :
25940: LD_ADDR_OWVAR 42
25944: PUSH
25945: LD_INT 3
25947: ST_TO_ADDR
25948: GO 26329
25950: LD_INT 16
25952: DOUBLE
25953: EQUAL
25954: IFTRUE 25958
25956: GO 25969
25958: POP
// bc_type := b_ext_gun ; 17 :
25959: LD_ADDR_OWVAR 42
25963: PUSH
25964: LD_INT 17
25966: ST_TO_ADDR
25967: GO 26329
25969: LD_INT 17
25971: DOUBLE
25972: EQUAL
25973: IFTRUE 25977
25975: GO 26005
25977: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25978: LD_ADDR_OWVAR 42
25982: PUSH
25983: LD_INT 19
25985: PUSH
25986: LD_INT 23
25988: PUSH
25989: LD_INT 19
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: LIST
25996: PUSH
25997: LD_VAR 0 1
26001: ARRAY
26002: ST_TO_ADDR
26003: GO 26329
26005: LD_INT 18
26007: DOUBLE
26008: EQUAL
26009: IFTRUE 26013
26011: GO 26024
26013: POP
// bc_type := b_ext_radar ; 19 :
26014: LD_ADDR_OWVAR 42
26018: PUSH
26019: LD_INT 20
26021: ST_TO_ADDR
26022: GO 26329
26024: LD_INT 19
26026: DOUBLE
26027: EQUAL
26028: IFTRUE 26032
26030: GO 26043
26032: POP
// bc_type := b_ext_radio ; 20 :
26033: LD_ADDR_OWVAR 42
26037: PUSH
26038: LD_INT 22
26040: ST_TO_ADDR
26041: GO 26329
26043: LD_INT 20
26045: DOUBLE
26046: EQUAL
26047: IFTRUE 26051
26049: GO 26062
26051: POP
// bc_type := b_ext_siberium ; 21 :
26052: LD_ADDR_OWVAR 42
26056: PUSH
26057: LD_INT 21
26059: ST_TO_ADDR
26060: GO 26329
26062: LD_INT 21
26064: DOUBLE
26065: EQUAL
26066: IFTRUE 26070
26068: GO 26081
26070: POP
// bc_type := b_ext_computer ; 22 :
26071: LD_ADDR_OWVAR 42
26075: PUSH
26076: LD_INT 24
26078: ST_TO_ADDR
26079: GO 26329
26081: LD_INT 22
26083: DOUBLE
26084: EQUAL
26085: IFTRUE 26089
26087: GO 26100
26089: POP
// bc_type := b_ext_track ; 23 :
26090: LD_ADDR_OWVAR 42
26094: PUSH
26095: LD_INT 16
26097: ST_TO_ADDR
26098: GO 26329
26100: LD_INT 23
26102: DOUBLE
26103: EQUAL
26104: IFTRUE 26108
26106: GO 26119
26108: POP
// bc_type := b_ext_laser ; 24 :
26109: LD_ADDR_OWVAR 42
26113: PUSH
26114: LD_INT 25
26116: ST_TO_ADDR
26117: GO 26329
26119: LD_INT 24
26121: DOUBLE
26122: EQUAL
26123: IFTRUE 26127
26125: GO 26138
26127: POP
// bc_type := b_control_tower ; 25 :
26128: LD_ADDR_OWVAR 42
26132: PUSH
26133: LD_INT 36
26135: ST_TO_ADDR
26136: GO 26329
26138: LD_INT 25
26140: DOUBLE
26141: EQUAL
26142: IFTRUE 26146
26144: GO 26157
26146: POP
// bc_type := b_breastwork ; 26 :
26147: LD_ADDR_OWVAR 42
26151: PUSH
26152: LD_INT 31
26154: ST_TO_ADDR
26155: GO 26329
26157: LD_INT 26
26159: DOUBLE
26160: EQUAL
26161: IFTRUE 26165
26163: GO 26176
26165: POP
// bc_type := b_bunker ; 27 :
26166: LD_ADDR_OWVAR 42
26170: PUSH
26171: LD_INT 32
26173: ST_TO_ADDR
26174: GO 26329
26176: LD_INT 27
26178: DOUBLE
26179: EQUAL
26180: IFTRUE 26184
26182: GO 26195
26184: POP
// bc_type := b_turret ; 28 :
26185: LD_ADDR_OWVAR 42
26189: PUSH
26190: LD_INT 33
26192: ST_TO_ADDR
26193: GO 26329
26195: LD_INT 28
26197: DOUBLE
26198: EQUAL
26199: IFTRUE 26203
26201: GO 26214
26203: POP
// bc_type := b_armoury ; 29 :
26204: LD_ADDR_OWVAR 42
26208: PUSH
26209: LD_INT 4
26211: ST_TO_ADDR
26212: GO 26329
26214: LD_INT 29
26216: DOUBLE
26217: EQUAL
26218: IFTRUE 26222
26220: GO 26233
26222: POP
// bc_type := b_barracks ; 30 :
26223: LD_ADDR_OWVAR 42
26227: PUSH
26228: LD_INT 5
26230: ST_TO_ADDR
26231: GO 26329
26233: LD_INT 30
26235: DOUBLE
26236: EQUAL
26237: IFTRUE 26241
26239: GO 26252
26241: POP
// bc_type := b_solar_power ; 31 :
26242: LD_ADDR_OWVAR 42
26246: PUSH
26247: LD_INT 27
26249: ST_TO_ADDR
26250: GO 26329
26252: LD_INT 31
26254: DOUBLE
26255: EQUAL
26256: IFTRUE 26260
26258: GO 26271
26260: POP
// bc_type := b_oil_power ; 32 :
26261: LD_ADDR_OWVAR 42
26265: PUSH
26266: LD_INT 26
26268: ST_TO_ADDR
26269: GO 26329
26271: LD_INT 32
26273: DOUBLE
26274: EQUAL
26275: IFTRUE 26279
26277: GO 26290
26279: POP
// bc_type := b_siberite_power ; 33 :
26280: LD_ADDR_OWVAR 42
26284: PUSH
26285: LD_INT 28
26287: ST_TO_ADDR
26288: GO 26329
26290: LD_INT 33
26292: DOUBLE
26293: EQUAL
26294: IFTRUE 26298
26296: GO 26309
26298: POP
// bc_type := b_oil_mine ; 34 :
26299: LD_ADDR_OWVAR 42
26303: PUSH
26304: LD_INT 29
26306: ST_TO_ADDR
26307: GO 26329
26309: LD_INT 34
26311: DOUBLE
26312: EQUAL
26313: IFTRUE 26317
26315: GO 26328
26317: POP
// bc_type := b_siberite_mine ; end ;
26318: LD_ADDR_OWVAR 42
26322: PUSH
26323: LD_INT 30
26325: ST_TO_ADDR
26326: GO 26329
26328: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
26329: LD_ADDR_VAR 0 8
26333: PUSH
26334: LD_VAR 0 5
26338: PPUSH
26339: LD_VAR 0 6
26343: PPUSH
26344: LD_VAR 0 3
26348: PPUSH
26349: CALL_OW 47
26353: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
26354: LD_OWVAR 42
26358: PUSH
26359: LD_INT 32
26361: PUSH
26362: LD_INT 33
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: IN
26369: IFFALSE 26385
// PlaceWeaponTurret ( b , weapon ) ;
26371: LD_VAR 0 8
26375: PPUSH
26376: LD_VAR 0 4
26380: PPUSH
26381: CALL_OW 431
// end ;
26385: LD_VAR 0 7
26389: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26390: LD_INT 0
26392: PPUSH
26393: PPUSH
26394: PPUSH
26395: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26396: LD_ADDR_VAR 0 4
26400: PUSH
26401: LD_INT 22
26403: PUSH
26404: LD_OWVAR 2
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 2
26415: PUSH
26416: LD_INT 30
26418: PUSH
26419: LD_INT 0
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: LD_INT 30
26428: PUSH
26429: LD_INT 1
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: LIST
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PPUSH
26445: CALL_OW 69
26449: ST_TO_ADDR
// if not tmp then
26450: LD_VAR 0 4
26454: NOT
26455: IFFALSE 26459
// exit ;
26457: GO 26518
// for i in tmp do
26459: LD_ADDR_VAR 0 2
26463: PUSH
26464: LD_VAR 0 4
26468: PUSH
26469: FOR_IN
26470: IFFALSE 26516
// for j = 1 to 3 do
26472: LD_ADDR_VAR 0 3
26476: PUSH
26477: DOUBLE
26478: LD_INT 1
26480: DEC
26481: ST_TO_ADDR
26482: LD_INT 3
26484: PUSH
26485: FOR_TO
26486: IFFALSE 26512
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26488: LD_VAR 0 2
26492: PPUSH
26493: CALL_OW 274
26497: PPUSH
26498: LD_VAR 0 3
26502: PPUSH
26503: LD_INT 99999
26505: PPUSH
26506: CALL_OW 277
26510: GO 26485
26512: POP
26513: POP
26514: GO 26469
26516: POP
26517: POP
// end ;
26518: LD_VAR 0 1
26522: RET
// export function hHackSetLevel10 ; var i , j ; begin
26523: LD_INT 0
26525: PPUSH
26526: PPUSH
26527: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26528: LD_ADDR_VAR 0 2
26532: PUSH
26533: LD_INT 21
26535: PUSH
26536: LD_INT 1
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PPUSH
26543: CALL_OW 69
26547: PUSH
26548: FOR_IN
26549: IFFALSE 26601
// if IsSelected ( i ) then
26551: LD_VAR 0 2
26555: PPUSH
26556: CALL_OW 306
26560: IFFALSE 26599
// begin for j := 1 to 4 do
26562: LD_ADDR_VAR 0 3
26566: PUSH
26567: DOUBLE
26568: LD_INT 1
26570: DEC
26571: ST_TO_ADDR
26572: LD_INT 4
26574: PUSH
26575: FOR_TO
26576: IFFALSE 26597
// SetSkill ( i , j , 10 ) ;
26578: LD_VAR 0 2
26582: PPUSH
26583: LD_VAR 0 3
26587: PPUSH
26588: LD_INT 10
26590: PPUSH
26591: CALL_OW 237
26595: GO 26575
26597: POP
26598: POP
// end ;
26599: GO 26548
26601: POP
26602: POP
// end ;
26603: LD_VAR 0 1
26607: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26608: LD_INT 0
26610: PPUSH
26611: PPUSH
26612: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26613: LD_ADDR_VAR 0 2
26617: PUSH
26618: LD_INT 22
26620: PUSH
26621: LD_OWVAR 2
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 21
26632: PUSH
26633: LD_INT 1
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PPUSH
26644: CALL_OW 69
26648: PUSH
26649: FOR_IN
26650: IFFALSE 26691
// begin for j := 1 to 4 do
26652: LD_ADDR_VAR 0 3
26656: PUSH
26657: DOUBLE
26658: LD_INT 1
26660: DEC
26661: ST_TO_ADDR
26662: LD_INT 4
26664: PUSH
26665: FOR_TO
26666: IFFALSE 26687
// SetSkill ( i , j , 10 ) ;
26668: LD_VAR 0 2
26672: PPUSH
26673: LD_VAR 0 3
26677: PPUSH
26678: LD_INT 10
26680: PPUSH
26681: CALL_OW 237
26685: GO 26665
26687: POP
26688: POP
// end ;
26689: GO 26649
26691: POP
26692: POP
// end ;
26693: LD_VAR 0 1
26697: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26698: LD_INT 0
26700: PPUSH
// uc_side := your_side ;
26701: LD_ADDR_OWVAR 20
26705: PUSH
26706: LD_OWVAR 2
26710: ST_TO_ADDR
// uc_nation := nation ;
26711: LD_ADDR_OWVAR 21
26715: PUSH
26716: LD_VAR 0 1
26720: ST_TO_ADDR
// InitHc ;
26721: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26725: LD_INT 0
26727: PPUSH
26728: LD_VAR 0 2
26732: PPUSH
26733: LD_VAR 0 3
26737: PPUSH
26738: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26742: LD_VAR 0 4
26746: PPUSH
26747: LD_VAR 0 5
26751: PPUSH
26752: CALL_OW 428
26756: PUSH
26757: LD_INT 0
26759: EQUAL
26760: IFFALSE 26784
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26762: CALL_OW 44
26766: PPUSH
26767: LD_VAR 0 4
26771: PPUSH
26772: LD_VAR 0 5
26776: PPUSH
26777: LD_INT 1
26779: PPUSH
26780: CALL_OW 48
// end ;
26784: LD_VAR 0 6
26788: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26789: LD_INT 0
26791: PPUSH
26792: PPUSH
// uc_side := your_side ;
26793: LD_ADDR_OWVAR 20
26797: PUSH
26798: LD_OWVAR 2
26802: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26803: LD_VAR 0 1
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: LD_INT 2
26813: PUSH
26814: LD_INT 3
26816: PUSH
26817: LD_INT 4
26819: PUSH
26820: LD_INT 5
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: IN
26830: IFFALSE 26842
// uc_nation := nation_american else
26832: LD_ADDR_OWVAR 21
26836: PUSH
26837: LD_INT 1
26839: ST_TO_ADDR
26840: GO 26885
// if chassis in [ 11 , 12 , 13 , 14 ] then
26842: LD_VAR 0 1
26846: PUSH
26847: LD_INT 11
26849: PUSH
26850: LD_INT 12
26852: PUSH
26853: LD_INT 13
26855: PUSH
26856: LD_INT 14
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: IN
26865: IFFALSE 26877
// uc_nation := nation_arabian else
26867: LD_ADDR_OWVAR 21
26871: PUSH
26872: LD_INT 2
26874: ST_TO_ADDR
26875: GO 26885
// uc_nation := nation_russian ;
26877: LD_ADDR_OWVAR 21
26881: PUSH
26882: LD_INT 3
26884: ST_TO_ADDR
// vc_chassis := chassis ;
26885: LD_ADDR_OWVAR 37
26889: PUSH
26890: LD_VAR 0 1
26894: ST_TO_ADDR
// vc_engine := engine ;
26895: LD_ADDR_OWVAR 39
26899: PUSH
26900: LD_VAR 0 2
26904: ST_TO_ADDR
// vc_control := control ;
26905: LD_ADDR_OWVAR 38
26909: PUSH
26910: LD_VAR 0 3
26914: ST_TO_ADDR
// vc_weapon := weapon ;
26915: LD_ADDR_OWVAR 40
26919: PUSH
26920: LD_VAR 0 4
26924: ST_TO_ADDR
// un := CreateVehicle ;
26925: LD_ADDR_VAR 0 8
26929: PUSH
26930: CALL_OW 45
26934: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26935: LD_VAR 0 8
26939: PPUSH
26940: LD_INT 0
26942: PPUSH
26943: LD_INT 5
26945: PPUSH
26946: CALL_OW 12
26950: PPUSH
26951: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26955: LD_VAR 0 8
26959: PPUSH
26960: LD_VAR 0 5
26964: PPUSH
26965: LD_VAR 0 6
26969: PPUSH
26970: LD_INT 1
26972: PPUSH
26973: CALL_OW 48
// end ;
26977: LD_VAR 0 7
26981: RET
// export hInvincible ; every 1 do
26982: GO 26984
26984: DISABLE
// hInvincible := [ ] ;
26985: LD_ADDR_EXP 119
26989: PUSH
26990: EMPTY
26991: ST_TO_ADDR
26992: END
// every 10 do var i ;
26993: GO 26995
26995: DISABLE
26996: LD_INT 0
26998: PPUSH
// begin enable ;
26999: ENABLE
// if not hInvincible then
27000: LD_EXP 119
27004: NOT
27005: IFFALSE 27009
// exit ;
27007: GO 27053
// for i in hInvincible do
27009: LD_ADDR_VAR 0 1
27013: PUSH
27014: LD_EXP 119
27018: PUSH
27019: FOR_IN
27020: IFFALSE 27051
// if GetLives ( i ) < 1000 then
27022: LD_VAR 0 1
27026: PPUSH
27027: CALL_OW 256
27031: PUSH
27032: LD_INT 1000
27034: LESS
27035: IFFALSE 27049
// SetLives ( i , 1000 ) ;
27037: LD_VAR 0 1
27041: PPUSH
27042: LD_INT 1000
27044: PPUSH
27045: CALL_OW 234
27049: GO 27019
27051: POP
27052: POP
// end ;
27053: PPOPN 1
27055: END
// export function hHackInvincible ; var i ; begin
27056: LD_INT 0
27058: PPUSH
27059: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27060: LD_ADDR_VAR 0 2
27064: PUSH
27065: LD_INT 2
27067: PUSH
27068: LD_INT 21
27070: PUSH
27071: LD_INT 1
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 21
27080: PUSH
27081: LD_INT 2
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: LIST
27092: PPUSH
27093: CALL_OW 69
27097: PUSH
27098: FOR_IN
27099: IFFALSE 27160
// if IsSelected ( i ) then
27101: LD_VAR 0 2
27105: PPUSH
27106: CALL_OW 306
27110: IFFALSE 27158
// begin if i in hInvincible then
27112: LD_VAR 0 2
27116: PUSH
27117: LD_EXP 119
27121: IN
27122: IFFALSE 27142
// hInvincible := hInvincible diff i else
27124: LD_ADDR_EXP 119
27128: PUSH
27129: LD_EXP 119
27133: PUSH
27134: LD_VAR 0 2
27138: DIFF
27139: ST_TO_ADDR
27140: GO 27158
// hInvincible := hInvincible union i ;
27142: LD_ADDR_EXP 119
27146: PUSH
27147: LD_EXP 119
27151: PUSH
27152: LD_VAR 0 2
27156: UNION
27157: ST_TO_ADDR
// end ;
27158: GO 27098
27160: POP
27161: POP
// end ;
27162: LD_VAR 0 1
27166: RET
// export function hHackInvisible ; var i , j ; begin
27167: LD_INT 0
27169: PPUSH
27170: PPUSH
27171: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27172: LD_ADDR_VAR 0 2
27176: PUSH
27177: LD_INT 21
27179: PUSH
27180: LD_INT 1
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PPUSH
27187: CALL_OW 69
27191: PUSH
27192: FOR_IN
27193: IFFALSE 27217
// if IsSelected ( i ) then
27195: LD_VAR 0 2
27199: PPUSH
27200: CALL_OW 306
27204: IFFALSE 27215
// ComForceInvisible ( i ) ;
27206: LD_VAR 0 2
27210: PPUSH
27211: CALL_OW 496
27215: GO 27192
27217: POP
27218: POP
// end ;
27219: LD_VAR 0 1
27223: RET
// export function hHackChangeYourSide ; begin
27224: LD_INT 0
27226: PPUSH
// if your_side = 8 then
27227: LD_OWVAR 2
27231: PUSH
27232: LD_INT 8
27234: EQUAL
27235: IFFALSE 27247
// your_side := 0 else
27237: LD_ADDR_OWVAR 2
27241: PUSH
27242: LD_INT 0
27244: ST_TO_ADDR
27245: GO 27261
// your_side := your_side + 1 ;
27247: LD_ADDR_OWVAR 2
27251: PUSH
27252: LD_OWVAR 2
27256: PUSH
27257: LD_INT 1
27259: PLUS
27260: ST_TO_ADDR
// end ;
27261: LD_VAR 0 1
27265: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27266: LD_INT 0
27268: PPUSH
27269: PPUSH
27270: PPUSH
// for i in all_units do
27271: LD_ADDR_VAR 0 2
27275: PUSH
27276: LD_OWVAR 3
27280: PUSH
27281: FOR_IN
27282: IFFALSE 27360
// if IsSelected ( i ) then
27284: LD_VAR 0 2
27288: PPUSH
27289: CALL_OW 306
27293: IFFALSE 27358
// begin j := GetSide ( i ) ;
27295: LD_ADDR_VAR 0 3
27299: PUSH
27300: LD_VAR 0 2
27304: PPUSH
27305: CALL_OW 255
27309: ST_TO_ADDR
// if j = 8 then
27310: LD_VAR 0 3
27314: PUSH
27315: LD_INT 8
27317: EQUAL
27318: IFFALSE 27330
// j := 0 else
27320: LD_ADDR_VAR 0 3
27324: PUSH
27325: LD_INT 0
27327: ST_TO_ADDR
27328: GO 27344
// j := j + 1 ;
27330: LD_ADDR_VAR 0 3
27334: PUSH
27335: LD_VAR 0 3
27339: PUSH
27340: LD_INT 1
27342: PLUS
27343: ST_TO_ADDR
// SetSide ( i , j ) ;
27344: LD_VAR 0 2
27348: PPUSH
27349: LD_VAR 0 3
27353: PPUSH
27354: CALL_OW 235
// end ;
27358: GO 27281
27360: POP
27361: POP
// end ;
27362: LD_VAR 0 1
27366: RET
// export function hHackFog ; begin
27367: LD_INT 0
27369: PPUSH
// FogOff ( true ) ;
27370: LD_INT 1
27372: PPUSH
27373: CALL_OW 344
// end ;
27377: LD_VAR 0 1
27381: RET
// export function hHackTeleport ( unit , x , y ) ; begin
27382: LD_INT 0
27384: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
27385: LD_VAR 0 1
27389: PPUSH
27390: LD_VAR 0 2
27394: PPUSH
27395: LD_VAR 0 3
27399: PPUSH
27400: LD_INT 1
27402: PPUSH
27403: LD_INT 1
27405: PPUSH
27406: CALL_OW 483
// CenterOnXY ( x , y ) ;
27410: LD_VAR 0 2
27414: PPUSH
27415: LD_VAR 0 3
27419: PPUSH
27420: CALL_OW 84
// end ; end_of_file
27424: LD_VAR 0 4
27428: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27429: LD_INT 0
27431: PPUSH
27432: PPUSH
27433: PPUSH
27434: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27435: LD_VAR 0 1
27439: PPUSH
27440: CALL_OW 264
27444: PUSH
27445: LD_EXP 47
27449: EQUAL
27450: IFFALSE 27522
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27452: LD_INT 68
27454: PPUSH
27455: LD_VAR 0 1
27459: PPUSH
27460: CALL_OW 255
27464: PPUSH
27465: CALL_OW 321
27469: PUSH
27470: LD_INT 2
27472: EQUAL
27473: IFFALSE 27485
// eff := 70 else
27475: LD_ADDR_VAR 0 4
27479: PUSH
27480: LD_INT 70
27482: ST_TO_ADDR
27483: GO 27493
// eff := 30 ;
27485: LD_ADDR_VAR 0 4
27489: PUSH
27490: LD_INT 30
27492: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27493: LD_VAR 0 1
27497: PPUSH
27498: CALL_OW 250
27502: PPUSH
27503: LD_VAR 0 1
27507: PPUSH
27508: CALL_OW 251
27512: PPUSH
27513: LD_VAR 0 4
27517: PPUSH
27518: CALL_OW 495
// end ; end ;
27522: LD_VAR 0 2
27526: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27527: LD_INT 0
27529: PPUSH
// end ;
27530: LD_VAR 0 4
27534: RET
// export function SOS_Command ( cmd ) ; begin
27535: LD_INT 0
27537: PPUSH
// end ;
27538: LD_VAR 0 2
27542: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27543: LD_INT 0
27545: PPUSH
// end ;
27546: LD_VAR 0 6
27550: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27551: LD_INT 0
27553: PPUSH
27554: PPUSH
// if not vehicle or not factory then
27555: LD_VAR 0 1
27559: NOT
27560: PUSH
27561: LD_VAR 0 2
27565: NOT
27566: OR
27567: IFFALSE 27571
// exit ;
27569: GO 27802
// if factoryWaypoints >= factory then
27571: LD_EXP 120
27575: PUSH
27576: LD_VAR 0 2
27580: GREATEREQUAL
27581: IFFALSE 27802
// if factoryWaypoints [ factory ] then
27583: LD_EXP 120
27587: PUSH
27588: LD_VAR 0 2
27592: ARRAY
27593: IFFALSE 27802
// begin if GetControl ( vehicle ) = control_manual then
27595: LD_VAR 0 1
27599: PPUSH
27600: CALL_OW 263
27604: PUSH
27605: LD_INT 1
27607: EQUAL
27608: IFFALSE 27689
// begin driver := IsDrivenBy ( vehicle ) ;
27610: LD_ADDR_VAR 0 4
27614: PUSH
27615: LD_VAR 0 1
27619: PPUSH
27620: CALL_OW 311
27624: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
27625: LD_VAR 0 4
27629: PPUSH
27630: LD_EXP 120
27634: PUSH
27635: LD_VAR 0 2
27639: ARRAY
27640: PUSH
27641: LD_INT 1
27643: ARRAY
27644: PPUSH
27645: LD_EXP 120
27649: PUSH
27650: LD_VAR 0 2
27654: ARRAY
27655: PUSH
27656: LD_INT 2
27658: ARRAY
27659: PPUSH
27660: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27664: LD_VAR 0 4
27668: PPUSH
27669: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27673: LD_VAR 0 4
27677: PPUSH
27678: LD_VAR 0 2
27682: PPUSH
27683: CALL_OW 180
// end else
27687: GO 27802
// if GetControl ( vehicle ) = control_remote then
27689: LD_VAR 0 1
27693: PPUSH
27694: CALL_OW 263
27698: PUSH
27699: LD_INT 2
27701: EQUAL
27702: IFFALSE 27763
// begin wait ( 0 0$2 ) ;
27704: LD_INT 70
27706: PPUSH
27707: CALL_OW 67
// if Connect ( vehicle ) then
27711: LD_VAR 0 1
27715: PPUSH
27716: CALL 40026 0 1
27720: IFFALSE 27761
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
27722: LD_VAR 0 1
27726: PPUSH
27727: LD_EXP 120
27731: PUSH
27732: LD_VAR 0 2
27736: ARRAY
27737: PUSH
27738: LD_INT 1
27740: ARRAY
27741: PPUSH
27742: LD_EXP 120
27746: PUSH
27747: LD_VAR 0 2
27751: ARRAY
27752: PUSH
27753: LD_INT 2
27755: ARRAY
27756: PPUSH
27757: CALL_OW 171
// end else
27761: GO 27802
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
27763: LD_VAR 0 1
27767: PPUSH
27768: LD_EXP 120
27772: PUSH
27773: LD_VAR 0 2
27777: ARRAY
27778: PUSH
27779: LD_INT 1
27781: ARRAY
27782: PPUSH
27783: LD_EXP 120
27787: PUSH
27788: LD_VAR 0 2
27792: ARRAY
27793: PUSH
27794: LD_INT 2
27796: ARRAY
27797: PPUSH
27798: CALL_OW 171
// end ; end ;
27802: LD_VAR 0 3
27806: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27807: LD_INT 0
27809: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27810: LD_VAR 0 1
27814: PUSH
27815: LD_INT 250
27817: EQUAL
27818: PUSH
27819: LD_VAR 0 2
27823: PPUSH
27824: CALL_OW 264
27828: PUSH
27829: LD_EXP 50
27833: EQUAL
27834: AND
27835: IFFALSE 27856
// MinerPlaceMine ( unit , x , y ) ;
27837: LD_VAR 0 2
27841: PPUSH
27842: LD_VAR 0 4
27846: PPUSH
27847: LD_VAR 0 5
27851: PPUSH
27852: CALL 30584 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27856: LD_VAR 0 1
27860: PUSH
27861: LD_INT 251
27863: EQUAL
27864: PUSH
27865: LD_VAR 0 2
27869: PPUSH
27870: CALL_OW 264
27874: PUSH
27875: LD_EXP 50
27879: EQUAL
27880: AND
27881: IFFALSE 27902
// MinerDetonateMine ( unit , x , y ) ;
27883: LD_VAR 0 2
27887: PPUSH
27888: LD_VAR 0 4
27892: PPUSH
27893: LD_VAR 0 5
27897: PPUSH
27898: CALL 30861 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27902: LD_VAR 0 1
27906: PUSH
27907: LD_INT 252
27909: EQUAL
27910: PUSH
27911: LD_VAR 0 2
27915: PPUSH
27916: CALL_OW 264
27920: PUSH
27921: LD_EXP 50
27925: EQUAL
27926: AND
27927: IFFALSE 27948
// MinerCreateMinefield ( unit , x , y ) ;
27929: LD_VAR 0 2
27933: PPUSH
27934: LD_VAR 0 4
27938: PPUSH
27939: LD_VAR 0 5
27943: PPUSH
27944: CALL 31278 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27948: LD_VAR 0 1
27952: PUSH
27953: LD_INT 253
27955: EQUAL
27956: PUSH
27957: LD_VAR 0 2
27961: PPUSH
27962: CALL_OW 257
27966: PUSH
27967: LD_INT 5
27969: EQUAL
27970: AND
27971: IFFALSE 27992
// ComBinocular ( unit , x , y ) ;
27973: LD_VAR 0 2
27977: PPUSH
27978: LD_VAR 0 4
27982: PPUSH
27983: LD_VAR 0 5
27987: PPUSH
27988: CALL 31649 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27992: LD_VAR 0 1
27996: PUSH
27997: LD_INT 254
27999: EQUAL
28000: PUSH
28001: LD_VAR 0 2
28005: PPUSH
28006: CALL_OW 264
28010: PUSH
28011: LD_EXP 45
28015: EQUAL
28016: AND
28017: PUSH
28018: LD_VAR 0 3
28022: PPUSH
28023: CALL_OW 263
28027: PUSH
28028: LD_INT 3
28030: EQUAL
28031: AND
28032: IFFALSE 28048
// HackDestroyVehicle ( unit , selectedUnit ) ;
28034: LD_VAR 0 2
28038: PPUSH
28039: LD_VAR 0 3
28043: PPUSH
28044: CALL 29944 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28048: LD_VAR 0 1
28052: PUSH
28053: LD_INT 255
28055: EQUAL
28056: PUSH
28057: LD_VAR 0 2
28061: PPUSH
28062: CALL_OW 264
28066: PUSH
28067: LD_INT 14
28069: PUSH
28070: LD_INT 53
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: IN
28077: AND
28078: PUSH
28079: LD_VAR 0 4
28083: PPUSH
28084: LD_VAR 0 5
28088: PPUSH
28089: CALL_OW 488
28093: AND
28094: IFFALSE 28118
// CutTreeXYR ( unit , x , y , 12 ) ;
28096: LD_VAR 0 2
28100: PPUSH
28101: LD_VAR 0 4
28105: PPUSH
28106: LD_VAR 0 5
28110: PPUSH
28111: LD_INT 12
28113: PPUSH
28114: CALL 28510 0 4
// if cmd = 256 then
28118: LD_VAR 0 1
28122: PUSH
28123: LD_INT 256
28125: EQUAL
28126: IFFALSE 28147
// SetFactoryWaypoint ( unit , x , y ) ;
28128: LD_VAR 0 2
28132: PPUSH
28133: LD_VAR 0 4
28137: PPUSH
28138: LD_VAR 0 5
28142: PPUSH
28143: CALL 28152 0 3
// end ;
28147: LD_VAR 0 6
28151: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
28152: LD_INT 0
28154: PPUSH
28155: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
28156: LD_VAR 0 1
28160: NOT
28161: PUSH
28162: LD_VAR 0 2
28166: PPUSH
28167: LD_VAR 0 3
28171: PPUSH
28172: CALL_OW 488
28176: NOT
28177: OR
28178: PUSH
28179: LD_VAR 0 1
28183: PPUSH
28184: CALL_OW 266
28188: PUSH
28189: LD_INT 3
28191: NONEQUAL
28192: PUSH
28193: LD_VAR 0 1
28197: PPUSH
28198: CALL_OW 247
28202: PUSH
28203: LD_INT 1
28205: EQUAL
28206: NOT
28207: AND
28208: OR
28209: IFFALSE 28213
// exit ;
28211: GO 28362
// if GetType ( factory ) = unit_human then
28213: LD_VAR 0 1
28217: PPUSH
28218: CALL_OW 247
28222: PUSH
28223: LD_INT 1
28225: EQUAL
28226: IFFALSE 28243
// factory := IsInUnit ( factory ) ;
28228: LD_ADDR_VAR 0 1
28232: PUSH
28233: LD_VAR 0 1
28237: PPUSH
28238: CALL_OW 310
28242: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
28243: LD_VAR 0 1
28247: PPUSH
28248: CALL_OW 266
28252: PUSH
28253: LD_INT 3
28255: NONEQUAL
28256: IFFALSE 28260
// exit ;
28258: GO 28362
// if HexInfo ( x , y ) = factory then
28260: LD_VAR 0 2
28264: PPUSH
28265: LD_VAR 0 3
28269: PPUSH
28270: CALL_OW 428
28274: PUSH
28275: LD_VAR 0 1
28279: EQUAL
28280: IFFALSE 28307
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
28282: LD_ADDR_EXP 120
28286: PUSH
28287: LD_EXP 120
28291: PPUSH
28292: LD_VAR 0 1
28296: PPUSH
28297: LD_INT 0
28299: PPUSH
28300: CALL_OW 1
28304: ST_TO_ADDR
28305: GO 28358
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
28307: LD_ADDR_EXP 120
28311: PUSH
28312: LD_EXP 120
28316: PPUSH
28317: LD_VAR 0 1
28321: PPUSH
28322: LD_VAR 0 1
28326: PPUSH
28327: CALL_OW 255
28331: PUSH
28332: LD_VAR 0 1
28336: PUSH
28337: LD_VAR 0 2
28341: PUSH
28342: LD_VAR 0 3
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: PPUSH
28353: CALL_OW 1
28357: ST_TO_ADDR
// UpdateFactoryWaypoints ;
28358: CALL 28367 0 0
// end ;
28362: LD_VAR 0 4
28366: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
28367: LD_INT 0
28369: PPUSH
28370: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
28371: LD_STRING resetFactoryWaypoint();
28373: PPUSH
28374: CALL_OW 559
// if factoryWaypoints then
28378: LD_EXP 120
28382: IFFALSE 28505
// begin for i := 1 to factoryWaypoints do
28384: LD_ADDR_VAR 0 2
28388: PUSH
28389: DOUBLE
28390: LD_INT 1
28392: DEC
28393: ST_TO_ADDR
28394: LD_EXP 120
28398: PUSH
28399: FOR_TO
28400: IFFALSE 28503
// if factoryWaypoints [ i ] then
28402: LD_EXP 120
28406: PUSH
28407: LD_VAR 0 2
28411: ARRAY
28412: IFFALSE 28501
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
28414: LD_STRING setFactoryWaypointXY(
28416: PUSH
28417: LD_EXP 120
28421: PUSH
28422: LD_VAR 0 2
28426: ARRAY
28427: PUSH
28428: LD_INT 1
28430: ARRAY
28431: STR
28432: PUSH
28433: LD_STRING ,
28435: STR
28436: PUSH
28437: LD_EXP 120
28441: PUSH
28442: LD_VAR 0 2
28446: ARRAY
28447: PUSH
28448: LD_INT 2
28450: ARRAY
28451: STR
28452: PUSH
28453: LD_STRING ,
28455: STR
28456: PUSH
28457: LD_EXP 120
28461: PUSH
28462: LD_VAR 0 2
28466: ARRAY
28467: PUSH
28468: LD_INT 3
28470: ARRAY
28471: STR
28472: PUSH
28473: LD_STRING ,
28475: STR
28476: PUSH
28477: LD_EXP 120
28481: PUSH
28482: LD_VAR 0 2
28486: ARRAY
28487: PUSH
28488: LD_INT 4
28490: ARRAY
28491: STR
28492: PUSH
28493: LD_STRING )
28495: STR
28496: PPUSH
28497: CALL_OW 559
28501: GO 28399
28503: POP
28504: POP
// end ; end ;
28505: LD_VAR 0 1
28509: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28510: LD_INT 0
28512: PPUSH
28513: PPUSH
28514: PPUSH
28515: PPUSH
28516: PPUSH
28517: PPUSH
28518: PPUSH
28519: PPUSH
28520: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28521: LD_VAR 0 1
28525: NOT
28526: PUSH
28527: LD_VAR 0 2
28531: PPUSH
28532: LD_VAR 0 3
28536: PPUSH
28537: CALL_OW 488
28541: NOT
28542: OR
28543: PUSH
28544: LD_VAR 0 4
28548: NOT
28549: OR
28550: IFFALSE 28554
// exit ;
28552: GO 28894
// list := [ ] ;
28554: LD_ADDR_VAR 0 13
28558: PUSH
28559: EMPTY
28560: ST_TO_ADDR
// if x - r < 0 then
28561: LD_VAR 0 2
28565: PUSH
28566: LD_VAR 0 4
28570: MINUS
28571: PUSH
28572: LD_INT 0
28574: LESS
28575: IFFALSE 28587
// min_x := 0 else
28577: LD_ADDR_VAR 0 7
28581: PUSH
28582: LD_INT 0
28584: ST_TO_ADDR
28585: GO 28603
// min_x := x - r ;
28587: LD_ADDR_VAR 0 7
28591: PUSH
28592: LD_VAR 0 2
28596: PUSH
28597: LD_VAR 0 4
28601: MINUS
28602: ST_TO_ADDR
// if y - r < 0 then
28603: LD_VAR 0 3
28607: PUSH
28608: LD_VAR 0 4
28612: MINUS
28613: PUSH
28614: LD_INT 0
28616: LESS
28617: IFFALSE 28629
// min_y := 0 else
28619: LD_ADDR_VAR 0 8
28623: PUSH
28624: LD_INT 0
28626: ST_TO_ADDR
28627: GO 28645
// min_y := y - r ;
28629: LD_ADDR_VAR 0 8
28633: PUSH
28634: LD_VAR 0 3
28638: PUSH
28639: LD_VAR 0 4
28643: MINUS
28644: ST_TO_ADDR
// max_x := x + r ;
28645: LD_ADDR_VAR 0 9
28649: PUSH
28650: LD_VAR 0 2
28654: PUSH
28655: LD_VAR 0 4
28659: PLUS
28660: ST_TO_ADDR
// max_y := y + r ;
28661: LD_ADDR_VAR 0 10
28665: PUSH
28666: LD_VAR 0 3
28670: PUSH
28671: LD_VAR 0 4
28675: PLUS
28676: ST_TO_ADDR
// for _x = min_x to max_x do
28677: LD_ADDR_VAR 0 11
28681: PUSH
28682: DOUBLE
28683: LD_VAR 0 7
28687: DEC
28688: ST_TO_ADDR
28689: LD_VAR 0 9
28693: PUSH
28694: FOR_TO
28695: IFFALSE 28812
// for _y = min_y to max_y do
28697: LD_ADDR_VAR 0 12
28701: PUSH
28702: DOUBLE
28703: LD_VAR 0 8
28707: DEC
28708: ST_TO_ADDR
28709: LD_VAR 0 10
28713: PUSH
28714: FOR_TO
28715: IFFALSE 28808
// begin if not ValidHex ( _x , _y ) then
28717: LD_VAR 0 11
28721: PPUSH
28722: LD_VAR 0 12
28726: PPUSH
28727: CALL_OW 488
28731: NOT
28732: IFFALSE 28736
// continue ;
28734: GO 28714
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28736: LD_VAR 0 11
28740: PPUSH
28741: LD_VAR 0 12
28745: PPUSH
28746: CALL_OW 351
28750: PUSH
28751: LD_VAR 0 11
28755: PPUSH
28756: LD_VAR 0 12
28760: PPUSH
28761: CALL_OW 554
28765: AND
28766: IFFALSE 28806
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28768: LD_ADDR_VAR 0 13
28772: PUSH
28773: LD_VAR 0 13
28777: PPUSH
28778: LD_VAR 0 13
28782: PUSH
28783: LD_INT 1
28785: PLUS
28786: PPUSH
28787: LD_VAR 0 11
28791: PUSH
28792: LD_VAR 0 12
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PPUSH
28801: CALL_OW 2
28805: ST_TO_ADDR
// end ;
28806: GO 28714
28808: POP
28809: POP
28810: GO 28694
28812: POP
28813: POP
// if not list then
28814: LD_VAR 0 13
28818: NOT
28819: IFFALSE 28823
// exit ;
28821: GO 28894
// for i in list do
28823: LD_ADDR_VAR 0 6
28827: PUSH
28828: LD_VAR 0 13
28832: PUSH
28833: FOR_IN
28834: IFFALSE 28892
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28836: LD_VAR 0 1
28840: PPUSH
28841: LD_STRING M
28843: PUSH
28844: LD_VAR 0 6
28848: PUSH
28849: LD_INT 1
28851: ARRAY
28852: PUSH
28853: LD_VAR 0 6
28857: PUSH
28858: LD_INT 2
28860: ARRAY
28861: PUSH
28862: LD_INT 0
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: LD_INT 0
28870: PUSH
28871: LD_INT 0
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: PUSH
28883: EMPTY
28884: LIST
28885: PPUSH
28886: CALL_OW 447
28890: GO 28833
28892: POP
28893: POP
// end ;
28894: LD_VAR 0 5
28898: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28899: LD_EXP 121
28903: NOT
28904: IFFALSE 28954
28906: GO 28908
28908: DISABLE
// begin initHack := true ;
28909: LD_ADDR_EXP 121
28913: PUSH
28914: LD_INT 1
28916: ST_TO_ADDR
// hackTanks := [ ] ;
28917: LD_ADDR_EXP 122
28921: PUSH
28922: EMPTY
28923: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28924: LD_ADDR_EXP 123
28928: PUSH
28929: EMPTY
28930: ST_TO_ADDR
// hackLimit := 3 ;
28931: LD_ADDR_EXP 124
28935: PUSH
28936: LD_INT 3
28938: ST_TO_ADDR
// hackDist := 12 ;
28939: LD_ADDR_EXP 125
28943: PUSH
28944: LD_INT 12
28946: ST_TO_ADDR
// hackCounter := [ ] ;
28947: LD_ADDR_EXP 126
28951: PUSH
28952: EMPTY
28953: ST_TO_ADDR
// end ;
28954: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28955: LD_EXP 121
28959: PUSH
28960: LD_INT 34
28962: PUSH
28963: LD_EXP 45
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PPUSH
28972: CALL_OW 69
28976: AND
28977: IFFALSE 29232
28979: GO 28981
28981: DISABLE
28982: LD_INT 0
28984: PPUSH
28985: PPUSH
// begin enable ;
28986: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28987: LD_ADDR_VAR 0 1
28991: PUSH
28992: LD_INT 34
28994: PUSH
28995: LD_EXP 45
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PPUSH
29004: CALL_OW 69
29008: PUSH
29009: FOR_IN
29010: IFFALSE 29230
// begin if not i in hackTanks then
29012: LD_VAR 0 1
29016: PUSH
29017: LD_EXP 122
29021: IN
29022: NOT
29023: IFFALSE 29106
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29025: LD_ADDR_EXP 122
29029: PUSH
29030: LD_EXP 122
29034: PPUSH
29035: LD_EXP 122
29039: PUSH
29040: LD_INT 1
29042: PLUS
29043: PPUSH
29044: LD_VAR 0 1
29048: PPUSH
29049: CALL_OW 1
29053: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29054: LD_ADDR_EXP 123
29058: PUSH
29059: LD_EXP 123
29063: PPUSH
29064: LD_EXP 123
29068: PUSH
29069: LD_INT 1
29071: PLUS
29072: PPUSH
29073: EMPTY
29074: PPUSH
29075: CALL_OW 1
29079: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29080: LD_ADDR_EXP 126
29084: PUSH
29085: LD_EXP 126
29089: PPUSH
29090: LD_EXP 126
29094: PUSH
29095: LD_INT 1
29097: PLUS
29098: PPUSH
29099: EMPTY
29100: PPUSH
29101: CALL_OW 1
29105: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29106: LD_VAR 0 1
29110: PPUSH
29111: CALL_OW 302
29115: NOT
29116: IFFALSE 29129
// begin HackUnlinkAll ( i ) ;
29118: LD_VAR 0 1
29122: PPUSH
29123: CALL 29235 0 1
// continue ;
29127: GO 29009
// end ; HackCheckCapturedStatus ( i ) ;
29129: LD_VAR 0 1
29133: PPUSH
29134: CALL 29678 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29138: LD_ADDR_VAR 0 2
29142: PUSH
29143: LD_INT 81
29145: PUSH
29146: LD_VAR 0 1
29150: PPUSH
29151: CALL_OW 255
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 33
29162: PUSH
29163: LD_INT 3
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 91
29172: PUSH
29173: LD_VAR 0 1
29177: PUSH
29178: LD_EXP 125
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 50
29190: PUSH
29191: EMPTY
29192: LIST
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: PPUSH
29200: CALL_OW 69
29204: ST_TO_ADDR
// if not tmp then
29205: LD_VAR 0 2
29209: NOT
29210: IFFALSE 29214
// continue ;
29212: GO 29009
// HackLink ( i , tmp ) ;
29214: LD_VAR 0 1
29218: PPUSH
29219: LD_VAR 0 2
29223: PPUSH
29224: CALL 29371 0 2
// end ;
29228: GO 29009
29230: POP
29231: POP
// end ;
29232: PPOPN 2
29234: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29235: LD_INT 0
29237: PPUSH
29238: PPUSH
29239: PPUSH
// if not hack in hackTanks then
29240: LD_VAR 0 1
29244: PUSH
29245: LD_EXP 122
29249: IN
29250: NOT
29251: IFFALSE 29255
// exit ;
29253: GO 29366
// index := GetElementIndex ( hackTanks , hack ) ;
29255: LD_ADDR_VAR 0 4
29259: PUSH
29260: LD_EXP 122
29264: PPUSH
29265: LD_VAR 0 1
29269: PPUSH
29270: CALL 36840 0 2
29274: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29275: LD_EXP 123
29279: PUSH
29280: LD_VAR 0 4
29284: ARRAY
29285: IFFALSE 29366
// begin for i in hackTanksCaptured [ index ] do
29287: LD_ADDR_VAR 0 3
29291: PUSH
29292: LD_EXP 123
29296: PUSH
29297: LD_VAR 0 4
29301: ARRAY
29302: PUSH
29303: FOR_IN
29304: IFFALSE 29330
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29306: LD_VAR 0 3
29310: PUSH
29311: LD_INT 1
29313: ARRAY
29314: PPUSH
29315: LD_VAR 0 3
29319: PUSH
29320: LD_INT 2
29322: ARRAY
29323: PPUSH
29324: CALL_OW 235
29328: GO 29303
29330: POP
29331: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29332: LD_ADDR_EXP 123
29336: PUSH
29337: LD_EXP 123
29341: PPUSH
29342: LD_VAR 0 4
29346: PPUSH
29347: EMPTY
29348: PPUSH
29349: CALL_OW 1
29353: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29354: LD_VAR 0 1
29358: PPUSH
29359: LD_INT 0
29361: PPUSH
29362: CALL_OW 505
// end ; end ;
29366: LD_VAR 0 2
29370: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29371: LD_INT 0
29373: PPUSH
29374: PPUSH
29375: PPUSH
// if not hack in hackTanks or not vehicles then
29376: LD_VAR 0 1
29380: PUSH
29381: LD_EXP 122
29385: IN
29386: NOT
29387: PUSH
29388: LD_VAR 0 2
29392: NOT
29393: OR
29394: IFFALSE 29398
// exit ;
29396: GO 29673
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29398: LD_ADDR_VAR 0 2
29402: PUSH
29403: LD_VAR 0 1
29407: PPUSH
29408: LD_VAR 0 2
29412: PPUSH
29413: LD_INT 1
29415: PPUSH
29416: LD_INT 1
29418: PPUSH
29419: CALL 37490 0 4
29423: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29424: LD_ADDR_VAR 0 5
29428: PUSH
29429: LD_EXP 122
29433: PPUSH
29434: LD_VAR 0 1
29438: PPUSH
29439: CALL 36840 0 2
29443: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29444: LD_EXP 123
29448: PUSH
29449: LD_VAR 0 5
29453: ARRAY
29454: PUSH
29455: LD_EXP 124
29459: LESS
29460: IFFALSE 29649
// begin for i := 1 to vehicles do
29462: LD_ADDR_VAR 0 4
29466: PUSH
29467: DOUBLE
29468: LD_INT 1
29470: DEC
29471: ST_TO_ADDR
29472: LD_VAR 0 2
29476: PUSH
29477: FOR_TO
29478: IFFALSE 29647
// begin if hackTanksCaptured [ index ] = hackLimit then
29480: LD_EXP 123
29484: PUSH
29485: LD_VAR 0 5
29489: ARRAY
29490: PUSH
29491: LD_EXP 124
29495: EQUAL
29496: IFFALSE 29500
// break ;
29498: GO 29647
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29500: LD_ADDR_EXP 126
29504: PUSH
29505: LD_EXP 126
29509: PPUSH
29510: LD_VAR 0 5
29514: PPUSH
29515: LD_EXP 126
29519: PUSH
29520: LD_VAR 0 5
29524: ARRAY
29525: PUSH
29526: LD_INT 1
29528: PLUS
29529: PPUSH
29530: CALL_OW 1
29534: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29535: LD_ADDR_EXP 123
29539: PUSH
29540: LD_EXP 123
29544: PPUSH
29545: LD_VAR 0 5
29549: PUSH
29550: LD_EXP 123
29554: PUSH
29555: LD_VAR 0 5
29559: ARRAY
29560: PUSH
29561: LD_INT 1
29563: PLUS
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PPUSH
29569: LD_VAR 0 2
29573: PUSH
29574: LD_VAR 0 4
29578: ARRAY
29579: PUSH
29580: LD_VAR 0 2
29584: PUSH
29585: LD_VAR 0 4
29589: ARRAY
29590: PPUSH
29591: CALL_OW 255
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PPUSH
29600: CALL 37055 0 3
29604: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29605: LD_VAR 0 2
29609: PUSH
29610: LD_VAR 0 4
29614: ARRAY
29615: PPUSH
29616: LD_VAR 0 1
29620: PPUSH
29621: CALL_OW 255
29625: PPUSH
29626: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29630: LD_VAR 0 2
29634: PUSH
29635: LD_VAR 0 4
29639: ARRAY
29640: PPUSH
29641: CALL_OW 141
// end ;
29645: GO 29477
29647: POP
29648: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29649: LD_VAR 0 1
29653: PPUSH
29654: LD_EXP 123
29658: PUSH
29659: LD_VAR 0 5
29663: ARRAY
29664: PUSH
29665: LD_INT 0
29667: PLUS
29668: PPUSH
29669: CALL_OW 505
// end ;
29673: LD_VAR 0 3
29677: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29678: LD_INT 0
29680: PPUSH
29681: PPUSH
29682: PPUSH
29683: PPUSH
// if not hack in hackTanks then
29684: LD_VAR 0 1
29688: PUSH
29689: LD_EXP 122
29693: IN
29694: NOT
29695: IFFALSE 29699
// exit ;
29697: GO 29939
// index := GetElementIndex ( hackTanks , hack ) ;
29699: LD_ADDR_VAR 0 4
29703: PUSH
29704: LD_EXP 122
29708: PPUSH
29709: LD_VAR 0 1
29713: PPUSH
29714: CALL 36840 0 2
29718: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29719: LD_ADDR_VAR 0 3
29723: PUSH
29724: DOUBLE
29725: LD_EXP 123
29729: PUSH
29730: LD_VAR 0 4
29734: ARRAY
29735: INC
29736: ST_TO_ADDR
29737: LD_INT 1
29739: PUSH
29740: FOR_DOWNTO
29741: IFFALSE 29913
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29743: LD_ADDR_VAR 0 5
29747: PUSH
29748: LD_EXP 123
29752: PUSH
29753: LD_VAR 0 4
29757: ARRAY
29758: PUSH
29759: LD_VAR 0 3
29763: ARRAY
29764: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29765: LD_VAR 0 5
29769: PUSH
29770: LD_INT 1
29772: ARRAY
29773: PPUSH
29774: CALL_OW 302
29778: NOT
29779: PUSH
29780: LD_VAR 0 5
29784: PUSH
29785: LD_INT 1
29787: ARRAY
29788: PPUSH
29789: CALL_OW 255
29793: PUSH
29794: LD_VAR 0 1
29798: PPUSH
29799: CALL_OW 255
29803: NONEQUAL
29804: OR
29805: IFFALSE 29911
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29807: LD_VAR 0 5
29811: PUSH
29812: LD_INT 1
29814: ARRAY
29815: PPUSH
29816: CALL_OW 305
29820: PUSH
29821: LD_VAR 0 5
29825: PUSH
29826: LD_INT 1
29828: ARRAY
29829: PPUSH
29830: CALL_OW 255
29834: PUSH
29835: LD_VAR 0 1
29839: PPUSH
29840: CALL_OW 255
29844: EQUAL
29845: AND
29846: IFFALSE 29870
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29848: LD_VAR 0 5
29852: PUSH
29853: LD_INT 1
29855: ARRAY
29856: PPUSH
29857: LD_VAR 0 5
29861: PUSH
29862: LD_INT 2
29864: ARRAY
29865: PPUSH
29866: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29870: LD_ADDR_EXP 123
29874: PUSH
29875: LD_EXP 123
29879: PPUSH
29880: LD_VAR 0 4
29884: PPUSH
29885: LD_EXP 123
29889: PUSH
29890: LD_VAR 0 4
29894: ARRAY
29895: PPUSH
29896: LD_VAR 0 3
29900: PPUSH
29901: CALL_OW 3
29905: PPUSH
29906: CALL_OW 1
29910: ST_TO_ADDR
// end ; end ;
29911: GO 29740
29913: POP
29914: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29915: LD_VAR 0 1
29919: PPUSH
29920: LD_EXP 123
29924: PUSH
29925: LD_VAR 0 4
29929: ARRAY
29930: PUSH
29931: LD_INT 0
29933: PLUS
29934: PPUSH
29935: CALL_OW 505
// end ;
29939: LD_VAR 0 2
29943: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29944: LD_INT 0
29946: PPUSH
29947: PPUSH
29948: PPUSH
29949: PPUSH
// if not hack in hackTanks then
29950: LD_VAR 0 1
29954: PUSH
29955: LD_EXP 122
29959: IN
29960: NOT
29961: IFFALSE 29965
// exit ;
29963: GO 30050
// index := GetElementIndex ( hackTanks , hack ) ;
29965: LD_ADDR_VAR 0 5
29969: PUSH
29970: LD_EXP 122
29974: PPUSH
29975: LD_VAR 0 1
29979: PPUSH
29980: CALL 36840 0 2
29984: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29985: LD_ADDR_VAR 0 4
29989: PUSH
29990: DOUBLE
29991: LD_INT 1
29993: DEC
29994: ST_TO_ADDR
29995: LD_EXP 123
29999: PUSH
30000: LD_VAR 0 5
30004: ARRAY
30005: PUSH
30006: FOR_TO
30007: IFFALSE 30048
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30009: LD_EXP 123
30013: PUSH
30014: LD_VAR 0 5
30018: ARRAY
30019: PUSH
30020: LD_VAR 0 4
30024: ARRAY
30025: PUSH
30026: LD_INT 1
30028: ARRAY
30029: PUSH
30030: LD_VAR 0 2
30034: EQUAL
30035: IFFALSE 30046
// KillUnit ( vehicle ) ;
30037: LD_VAR 0 2
30041: PPUSH
30042: CALL_OW 66
30046: GO 30006
30048: POP
30049: POP
// end ;
30050: LD_VAR 0 3
30054: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30055: LD_EXP 127
30059: NOT
30060: IFFALSE 30095
30062: GO 30064
30064: DISABLE
// begin initMiner := true ;
30065: LD_ADDR_EXP 127
30069: PUSH
30070: LD_INT 1
30072: ST_TO_ADDR
// minersList := [ ] ;
30073: LD_ADDR_EXP 128
30077: PUSH
30078: EMPTY
30079: ST_TO_ADDR
// minerMinesList := [ ] ;
30080: LD_ADDR_EXP 129
30084: PUSH
30085: EMPTY
30086: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30087: LD_ADDR_EXP 130
30091: PUSH
30092: LD_INT 5
30094: ST_TO_ADDR
// end ;
30095: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30096: LD_EXP 127
30100: PUSH
30101: LD_INT 34
30103: PUSH
30104: LD_EXP 50
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PPUSH
30113: CALL_OW 69
30117: AND
30118: IFFALSE 30581
30120: GO 30122
30122: DISABLE
30123: LD_INT 0
30125: PPUSH
30126: PPUSH
30127: PPUSH
30128: PPUSH
// begin enable ;
30129: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30130: LD_ADDR_VAR 0 1
30134: PUSH
30135: LD_INT 34
30137: PUSH
30138: LD_EXP 50
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PPUSH
30147: CALL_OW 69
30151: PUSH
30152: FOR_IN
30153: IFFALSE 30225
// begin if not i in minersList then
30155: LD_VAR 0 1
30159: PUSH
30160: LD_EXP 128
30164: IN
30165: NOT
30166: IFFALSE 30223
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30168: LD_ADDR_EXP 128
30172: PUSH
30173: LD_EXP 128
30177: PPUSH
30178: LD_EXP 128
30182: PUSH
30183: LD_INT 1
30185: PLUS
30186: PPUSH
30187: LD_VAR 0 1
30191: PPUSH
30192: CALL_OW 1
30196: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30197: LD_ADDR_EXP 129
30201: PUSH
30202: LD_EXP 129
30206: PPUSH
30207: LD_EXP 129
30211: PUSH
30212: LD_INT 1
30214: PLUS
30215: PPUSH
30216: EMPTY
30217: PPUSH
30218: CALL_OW 1
30222: ST_TO_ADDR
// end end ;
30223: GO 30152
30225: POP
30226: POP
// for i := minerMinesList downto 1 do
30227: LD_ADDR_VAR 0 1
30231: PUSH
30232: DOUBLE
30233: LD_EXP 129
30237: INC
30238: ST_TO_ADDR
30239: LD_INT 1
30241: PUSH
30242: FOR_DOWNTO
30243: IFFALSE 30579
// begin if IsLive ( minersList [ i ] ) then
30245: LD_EXP 128
30249: PUSH
30250: LD_VAR 0 1
30254: ARRAY
30255: PPUSH
30256: CALL_OW 300
30260: IFFALSE 30288
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30262: LD_EXP 128
30266: PUSH
30267: LD_VAR 0 1
30271: ARRAY
30272: PPUSH
30273: LD_EXP 129
30277: PUSH
30278: LD_VAR 0 1
30282: ARRAY
30283: PPUSH
30284: CALL_OW 505
// if not minerMinesList [ i ] then
30288: LD_EXP 129
30292: PUSH
30293: LD_VAR 0 1
30297: ARRAY
30298: NOT
30299: IFFALSE 30303
// continue ;
30301: GO 30242
// for j := minerMinesList [ i ] downto 1 do
30303: LD_ADDR_VAR 0 2
30307: PUSH
30308: DOUBLE
30309: LD_EXP 129
30313: PUSH
30314: LD_VAR 0 1
30318: ARRAY
30319: INC
30320: ST_TO_ADDR
30321: LD_INT 1
30323: PUSH
30324: FOR_DOWNTO
30325: IFFALSE 30575
// begin side := GetSide ( minersList [ i ] ) ;
30327: LD_ADDR_VAR 0 3
30331: PUSH
30332: LD_EXP 128
30336: PUSH
30337: LD_VAR 0 1
30341: ARRAY
30342: PPUSH
30343: CALL_OW 255
30347: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30348: LD_ADDR_VAR 0 4
30352: PUSH
30353: LD_EXP 129
30357: PUSH
30358: LD_VAR 0 1
30362: ARRAY
30363: PUSH
30364: LD_VAR 0 2
30368: ARRAY
30369: PUSH
30370: LD_INT 1
30372: ARRAY
30373: PPUSH
30374: LD_EXP 129
30378: PUSH
30379: LD_VAR 0 1
30383: ARRAY
30384: PUSH
30385: LD_VAR 0 2
30389: ARRAY
30390: PUSH
30391: LD_INT 2
30393: ARRAY
30394: PPUSH
30395: CALL_OW 428
30399: ST_TO_ADDR
// if not tmp then
30400: LD_VAR 0 4
30404: NOT
30405: IFFALSE 30409
// continue ;
30407: GO 30324
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30409: LD_VAR 0 4
30413: PUSH
30414: LD_INT 81
30416: PUSH
30417: LD_VAR 0 3
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PPUSH
30426: CALL_OW 69
30430: IN
30431: PUSH
30432: LD_EXP 129
30436: PUSH
30437: LD_VAR 0 1
30441: ARRAY
30442: PUSH
30443: LD_VAR 0 2
30447: ARRAY
30448: PUSH
30449: LD_INT 1
30451: ARRAY
30452: PPUSH
30453: LD_EXP 129
30457: PUSH
30458: LD_VAR 0 1
30462: ARRAY
30463: PUSH
30464: LD_VAR 0 2
30468: ARRAY
30469: PUSH
30470: LD_INT 2
30472: ARRAY
30473: PPUSH
30474: CALL_OW 458
30478: AND
30479: IFFALSE 30573
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30481: LD_EXP 129
30485: PUSH
30486: LD_VAR 0 1
30490: ARRAY
30491: PUSH
30492: LD_VAR 0 2
30496: ARRAY
30497: PUSH
30498: LD_INT 1
30500: ARRAY
30501: PPUSH
30502: LD_EXP 129
30506: PUSH
30507: LD_VAR 0 1
30511: ARRAY
30512: PUSH
30513: LD_VAR 0 2
30517: ARRAY
30518: PUSH
30519: LD_INT 2
30521: ARRAY
30522: PPUSH
30523: LD_VAR 0 3
30527: PPUSH
30528: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30532: LD_ADDR_EXP 129
30536: PUSH
30537: LD_EXP 129
30541: PPUSH
30542: LD_VAR 0 1
30546: PPUSH
30547: LD_EXP 129
30551: PUSH
30552: LD_VAR 0 1
30556: ARRAY
30557: PPUSH
30558: LD_VAR 0 2
30562: PPUSH
30563: CALL_OW 3
30567: PPUSH
30568: CALL_OW 1
30572: ST_TO_ADDR
// end ; end ;
30573: GO 30324
30575: POP
30576: POP
// end ;
30577: GO 30242
30579: POP
30580: POP
// end ;
30581: PPOPN 4
30583: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30584: LD_INT 0
30586: PPUSH
30587: PPUSH
// result := false ;
30588: LD_ADDR_VAR 0 4
30592: PUSH
30593: LD_INT 0
30595: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30596: LD_VAR 0 1
30600: PPUSH
30601: CALL_OW 264
30605: PUSH
30606: LD_EXP 50
30610: EQUAL
30611: NOT
30612: IFFALSE 30616
// exit ;
30614: GO 30856
// index := GetElementIndex ( minersList , unit ) ;
30616: LD_ADDR_VAR 0 5
30620: PUSH
30621: LD_EXP 128
30625: PPUSH
30626: LD_VAR 0 1
30630: PPUSH
30631: CALL 36840 0 2
30635: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30636: LD_EXP 129
30640: PUSH
30641: LD_VAR 0 5
30645: ARRAY
30646: PUSH
30647: LD_EXP 130
30651: GREATEREQUAL
30652: IFFALSE 30656
// exit ;
30654: GO 30856
// ComMoveXY ( unit , x , y ) ;
30656: LD_VAR 0 1
30660: PPUSH
30661: LD_VAR 0 2
30665: PPUSH
30666: LD_VAR 0 3
30670: PPUSH
30671: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30675: LD_INT 35
30677: PPUSH
30678: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30682: LD_VAR 0 1
30686: PPUSH
30687: LD_VAR 0 2
30691: PPUSH
30692: LD_VAR 0 3
30696: PPUSH
30697: CALL 67612 0 3
30701: NOT
30702: PUSH
30703: LD_VAR 0 1
30707: PPUSH
30708: CALL_OW 314
30712: AND
30713: IFFALSE 30717
// exit ;
30715: GO 30856
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30717: LD_VAR 0 2
30721: PPUSH
30722: LD_VAR 0 3
30726: PPUSH
30727: CALL_OW 428
30731: PUSH
30732: LD_VAR 0 1
30736: EQUAL
30737: PUSH
30738: LD_VAR 0 1
30742: PPUSH
30743: CALL_OW 314
30747: NOT
30748: AND
30749: IFFALSE 30675
// PlaySoundXY ( x , y , PlantMine ) ;
30751: LD_VAR 0 2
30755: PPUSH
30756: LD_VAR 0 3
30760: PPUSH
30761: LD_STRING PlantMine
30763: PPUSH
30764: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30768: LD_VAR 0 2
30772: PPUSH
30773: LD_VAR 0 3
30777: PPUSH
30778: LD_VAR 0 1
30782: PPUSH
30783: CALL_OW 255
30787: PPUSH
30788: LD_INT 0
30790: PPUSH
30791: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30795: LD_ADDR_EXP 129
30799: PUSH
30800: LD_EXP 129
30804: PPUSH
30805: LD_VAR 0 5
30809: PUSH
30810: LD_EXP 129
30814: PUSH
30815: LD_VAR 0 5
30819: ARRAY
30820: PUSH
30821: LD_INT 1
30823: PLUS
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PPUSH
30829: LD_VAR 0 2
30833: PUSH
30834: LD_VAR 0 3
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PPUSH
30843: CALL 37055 0 3
30847: ST_TO_ADDR
// result := true ;
30848: LD_ADDR_VAR 0 4
30852: PUSH
30853: LD_INT 1
30855: ST_TO_ADDR
// end ;
30856: LD_VAR 0 4
30860: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30861: LD_INT 0
30863: PPUSH
30864: PPUSH
30865: PPUSH
// if not unit in minersList then
30866: LD_VAR 0 1
30870: PUSH
30871: LD_EXP 128
30875: IN
30876: NOT
30877: IFFALSE 30881
// exit ;
30879: GO 31273
// index := GetElementIndex ( minersList , unit ) ;
30881: LD_ADDR_VAR 0 6
30885: PUSH
30886: LD_EXP 128
30890: PPUSH
30891: LD_VAR 0 1
30895: PPUSH
30896: CALL 36840 0 2
30900: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30901: LD_ADDR_VAR 0 5
30905: PUSH
30906: DOUBLE
30907: LD_EXP 129
30911: PUSH
30912: LD_VAR 0 6
30916: ARRAY
30917: INC
30918: ST_TO_ADDR
30919: LD_INT 1
30921: PUSH
30922: FOR_DOWNTO
30923: IFFALSE 31084
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30925: LD_EXP 129
30929: PUSH
30930: LD_VAR 0 6
30934: ARRAY
30935: PUSH
30936: LD_VAR 0 5
30940: ARRAY
30941: PUSH
30942: LD_INT 1
30944: ARRAY
30945: PUSH
30946: LD_VAR 0 2
30950: EQUAL
30951: PUSH
30952: LD_EXP 129
30956: PUSH
30957: LD_VAR 0 6
30961: ARRAY
30962: PUSH
30963: LD_VAR 0 5
30967: ARRAY
30968: PUSH
30969: LD_INT 2
30971: ARRAY
30972: PUSH
30973: LD_VAR 0 3
30977: EQUAL
30978: AND
30979: IFFALSE 31082
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30981: LD_EXP 129
30985: PUSH
30986: LD_VAR 0 6
30990: ARRAY
30991: PUSH
30992: LD_VAR 0 5
30996: ARRAY
30997: PUSH
30998: LD_INT 1
31000: ARRAY
31001: PPUSH
31002: LD_EXP 129
31006: PUSH
31007: LD_VAR 0 6
31011: ARRAY
31012: PUSH
31013: LD_VAR 0 5
31017: ARRAY
31018: PUSH
31019: LD_INT 2
31021: ARRAY
31022: PPUSH
31023: LD_VAR 0 1
31027: PPUSH
31028: CALL_OW 255
31032: PPUSH
31033: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31037: LD_ADDR_EXP 129
31041: PUSH
31042: LD_EXP 129
31046: PPUSH
31047: LD_VAR 0 6
31051: PPUSH
31052: LD_EXP 129
31056: PUSH
31057: LD_VAR 0 6
31061: ARRAY
31062: PPUSH
31063: LD_VAR 0 5
31067: PPUSH
31068: CALL_OW 3
31072: PPUSH
31073: CALL_OW 1
31077: ST_TO_ADDR
// exit ;
31078: POP
31079: POP
31080: GO 31273
// end ; end ;
31082: GO 30922
31084: POP
31085: POP
// for i := minerMinesList [ index ] downto 1 do
31086: LD_ADDR_VAR 0 5
31090: PUSH
31091: DOUBLE
31092: LD_EXP 129
31096: PUSH
31097: LD_VAR 0 6
31101: ARRAY
31102: INC
31103: ST_TO_ADDR
31104: LD_INT 1
31106: PUSH
31107: FOR_DOWNTO
31108: IFFALSE 31271
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31110: LD_EXP 129
31114: PUSH
31115: LD_VAR 0 6
31119: ARRAY
31120: PUSH
31121: LD_VAR 0 5
31125: ARRAY
31126: PUSH
31127: LD_INT 1
31129: ARRAY
31130: PPUSH
31131: LD_EXP 129
31135: PUSH
31136: LD_VAR 0 6
31140: ARRAY
31141: PUSH
31142: LD_VAR 0 5
31146: ARRAY
31147: PUSH
31148: LD_INT 2
31150: ARRAY
31151: PPUSH
31152: LD_VAR 0 2
31156: PPUSH
31157: LD_VAR 0 3
31161: PPUSH
31162: CALL_OW 298
31166: PUSH
31167: LD_INT 6
31169: LESS
31170: IFFALSE 31269
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31172: LD_EXP 129
31176: PUSH
31177: LD_VAR 0 6
31181: ARRAY
31182: PUSH
31183: LD_VAR 0 5
31187: ARRAY
31188: PUSH
31189: LD_INT 1
31191: ARRAY
31192: PPUSH
31193: LD_EXP 129
31197: PUSH
31198: LD_VAR 0 6
31202: ARRAY
31203: PUSH
31204: LD_VAR 0 5
31208: ARRAY
31209: PUSH
31210: LD_INT 2
31212: ARRAY
31213: PPUSH
31214: LD_VAR 0 1
31218: PPUSH
31219: CALL_OW 255
31223: PPUSH
31224: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31228: LD_ADDR_EXP 129
31232: PUSH
31233: LD_EXP 129
31237: PPUSH
31238: LD_VAR 0 6
31242: PPUSH
31243: LD_EXP 129
31247: PUSH
31248: LD_VAR 0 6
31252: ARRAY
31253: PPUSH
31254: LD_VAR 0 5
31258: PPUSH
31259: CALL_OW 3
31263: PPUSH
31264: CALL_OW 1
31268: ST_TO_ADDR
// end ; end ;
31269: GO 31107
31271: POP
31272: POP
// end ;
31273: LD_VAR 0 4
31277: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31278: LD_INT 0
31280: PPUSH
31281: PPUSH
31282: PPUSH
31283: PPUSH
31284: PPUSH
31285: PPUSH
31286: PPUSH
31287: PPUSH
31288: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31289: LD_VAR 0 1
31293: PPUSH
31294: CALL_OW 264
31298: PUSH
31299: LD_EXP 50
31303: EQUAL
31304: NOT
31305: PUSH
31306: LD_VAR 0 1
31310: PUSH
31311: LD_EXP 128
31315: IN
31316: NOT
31317: OR
31318: IFFALSE 31322
// exit ;
31320: GO 31644
// index := GetElementIndex ( minersList , unit ) ;
31322: LD_ADDR_VAR 0 6
31326: PUSH
31327: LD_EXP 128
31331: PPUSH
31332: LD_VAR 0 1
31336: PPUSH
31337: CALL 36840 0 2
31341: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31342: LD_ADDR_VAR 0 8
31346: PUSH
31347: LD_EXP 130
31351: PUSH
31352: LD_EXP 129
31356: PUSH
31357: LD_VAR 0 6
31361: ARRAY
31362: MINUS
31363: ST_TO_ADDR
// if not minesFreeAmount then
31364: LD_VAR 0 8
31368: NOT
31369: IFFALSE 31373
// exit ;
31371: GO 31644
// tmp := [ ] ;
31373: LD_ADDR_VAR 0 7
31377: PUSH
31378: EMPTY
31379: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31380: LD_ADDR_VAR 0 5
31384: PUSH
31385: DOUBLE
31386: LD_INT 1
31388: DEC
31389: ST_TO_ADDR
31390: LD_VAR 0 8
31394: PUSH
31395: FOR_TO
31396: IFFALSE 31591
// begin _d := rand ( 0 , 5 ) ;
31398: LD_ADDR_VAR 0 11
31402: PUSH
31403: LD_INT 0
31405: PPUSH
31406: LD_INT 5
31408: PPUSH
31409: CALL_OW 12
31413: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31414: LD_ADDR_VAR 0 12
31418: PUSH
31419: LD_INT 2
31421: PPUSH
31422: LD_INT 6
31424: PPUSH
31425: CALL_OW 12
31429: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31430: LD_ADDR_VAR 0 9
31434: PUSH
31435: LD_VAR 0 2
31439: PPUSH
31440: LD_VAR 0 11
31444: PPUSH
31445: LD_VAR 0 12
31449: PPUSH
31450: CALL_OW 272
31454: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31455: LD_ADDR_VAR 0 10
31459: PUSH
31460: LD_VAR 0 3
31464: PPUSH
31465: LD_VAR 0 11
31469: PPUSH
31470: LD_VAR 0 12
31474: PPUSH
31475: CALL_OW 273
31479: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31480: LD_VAR 0 9
31484: PPUSH
31485: LD_VAR 0 10
31489: PPUSH
31490: CALL_OW 488
31494: PUSH
31495: LD_VAR 0 9
31499: PUSH
31500: LD_VAR 0 10
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_VAR 0 7
31513: IN
31514: NOT
31515: AND
31516: PUSH
31517: LD_VAR 0 9
31521: PPUSH
31522: LD_VAR 0 10
31526: PPUSH
31527: CALL_OW 458
31531: NOT
31532: AND
31533: IFFALSE 31575
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31535: LD_ADDR_VAR 0 7
31539: PUSH
31540: LD_VAR 0 7
31544: PPUSH
31545: LD_VAR 0 7
31549: PUSH
31550: LD_INT 1
31552: PLUS
31553: PPUSH
31554: LD_VAR 0 9
31558: PUSH
31559: LD_VAR 0 10
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PPUSH
31568: CALL_OW 1
31572: ST_TO_ADDR
31573: GO 31589
// i := i - 1 ;
31575: LD_ADDR_VAR 0 5
31579: PUSH
31580: LD_VAR 0 5
31584: PUSH
31585: LD_INT 1
31587: MINUS
31588: ST_TO_ADDR
// end ;
31589: GO 31395
31591: POP
31592: POP
// for i in tmp do
31593: LD_ADDR_VAR 0 5
31597: PUSH
31598: LD_VAR 0 7
31602: PUSH
31603: FOR_IN
31604: IFFALSE 31642
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31606: LD_VAR 0 1
31610: PPUSH
31611: LD_VAR 0 5
31615: PUSH
31616: LD_INT 1
31618: ARRAY
31619: PPUSH
31620: LD_VAR 0 5
31624: PUSH
31625: LD_INT 2
31627: ARRAY
31628: PPUSH
31629: CALL 30584 0 3
31633: NOT
31634: IFFALSE 31640
// exit ;
31636: POP
31637: POP
31638: GO 31644
31640: GO 31603
31642: POP
31643: POP
// end ;
31644: LD_VAR 0 4
31648: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31649: LD_INT 0
31651: PPUSH
31652: PPUSH
31653: PPUSH
31654: PPUSH
31655: PPUSH
31656: PPUSH
31657: PPUSH
// if not GetClass ( unit ) = class_sniper then
31658: LD_VAR 0 1
31662: PPUSH
31663: CALL_OW 257
31667: PUSH
31668: LD_INT 5
31670: EQUAL
31671: NOT
31672: IFFALSE 31676
// exit ;
31674: GO 32064
// dist := 8 ;
31676: LD_ADDR_VAR 0 5
31680: PUSH
31681: LD_INT 8
31683: ST_TO_ADDR
// viewRange := 12 ;
31684: LD_ADDR_VAR 0 7
31688: PUSH
31689: LD_INT 12
31691: ST_TO_ADDR
// side := GetSide ( unit ) ;
31692: LD_ADDR_VAR 0 6
31696: PUSH
31697: LD_VAR 0 1
31701: PPUSH
31702: CALL_OW 255
31706: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31707: LD_INT 61
31709: PPUSH
31710: LD_VAR 0 6
31714: PPUSH
31715: CALL_OW 321
31719: PUSH
31720: LD_INT 2
31722: EQUAL
31723: IFFALSE 31733
// viewRange := 16 ;
31725: LD_ADDR_VAR 0 7
31729: PUSH
31730: LD_INT 16
31732: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31733: LD_VAR 0 1
31737: PPUSH
31738: LD_VAR 0 2
31742: PPUSH
31743: LD_VAR 0 3
31747: PPUSH
31748: CALL_OW 297
31752: PUSH
31753: LD_VAR 0 5
31757: GREATER
31758: IFFALSE 31837
// begin ComMoveXY ( unit , x , y ) ;
31760: LD_VAR 0 1
31764: PPUSH
31765: LD_VAR 0 2
31769: PPUSH
31770: LD_VAR 0 3
31774: PPUSH
31775: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31779: LD_INT 35
31781: PPUSH
31782: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31786: LD_VAR 0 1
31790: PPUSH
31791: LD_VAR 0 2
31795: PPUSH
31796: LD_VAR 0 3
31800: PPUSH
31801: CALL 67612 0 3
31805: NOT
31806: IFFALSE 31810
// exit ;
31808: GO 32064
// until GetDistUnitXY ( unit , x , y ) < dist ;
31810: LD_VAR 0 1
31814: PPUSH
31815: LD_VAR 0 2
31819: PPUSH
31820: LD_VAR 0 3
31824: PPUSH
31825: CALL_OW 297
31829: PUSH
31830: LD_VAR 0 5
31834: LESS
31835: IFFALSE 31779
// end ; ComTurnXY ( unit , x , y ) ;
31837: LD_VAR 0 1
31841: PPUSH
31842: LD_VAR 0 2
31846: PPUSH
31847: LD_VAR 0 3
31851: PPUSH
31852: CALL_OW 118
// wait ( 5 ) ;
31856: LD_INT 5
31858: PPUSH
31859: CALL_OW 67
// _d := GetDir ( unit ) ;
31863: LD_ADDR_VAR 0 10
31867: PUSH
31868: LD_VAR 0 1
31872: PPUSH
31873: CALL_OW 254
31877: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31878: LD_ADDR_VAR 0 8
31882: PUSH
31883: LD_VAR 0 1
31887: PPUSH
31888: CALL_OW 250
31892: PPUSH
31893: LD_VAR 0 10
31897: PPUSH
31898: LD_VAR 0 5
31902: PPUSH
31903: CALL_OW 272
31907: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31908: LD_ADDR_VAR 0 9
31912: PUSH
31913: LD_VAR 0 1
31917: PPUSH
31918: CALL_OW 251
31922: PPUSH
31923: LD_VAR 0 10
31927: PPUSH
31928: LD_VAR 0 5
31932: PPUSH
31933: CALL_OW 273
31937: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31938: LD_VAR 0 8
31942: PPUSH
31943: LD_VAR 0 9
31947: PPUSH
31948: CALL_OW 488
31952: NOT
31953: IFFALSE 31957
// exit ;
31955: GO 32064
// ComAnimCustom ( unit , 1 ) ;
31957: LD_VAR 0 1
31961: PPUSH
31962: LD_INT 1
31964: PPUSH
31965: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31969: LD_VAR 0 8
31973: PPUSH
31974: LD_VAR 0 9
31978: PPUSH
31979: LD_VAR 0 6
31983: PPUSH
31984: LD_VAR 0 7
31988: PPUSH
31989: CALL_OW 330
// repeat wait ( 1 ) ;
31993: LD_INT 1
31995: PPUSH
31996: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32000: LD_VAR 0 1
32004: PPUSH
32005: CALL_OW 316
32009: PUSH
32010: LD_VAR 0 1
32014: PPUSH
32015: CALL_OW 314
32019: OR
32020: PUSH
32021: LD_VAR 0 1
32025: PPUSH
32026: CALL_OW 302
32030: NOT
32031: OR
32032: PUSH
32033: LD_VAR 0 1
32037: PPUSH
32038: CALL_OW 301
32042: OR
32043: IFFALSE 31993
// RemoveSeeing ( _x , _y , side ) ;
32045: LD_VAR 0 8
32049: PPUSH
32050: LD_VAR 0 9
32054: PPUSH
32055: LD_VAR 0 6
32059: PPUSH
32060: CALL_OW 331
// end ; end_of_file
32064: LD_VAR 0 4
32068: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32069: LD_INT 0
32071: PPUSH
32072: PPUSH
// if exist_mode then
32073: LD_VAR 0 2
32077: IFFALSE 32102
// unit := CreateCharacter ( prefix & ident ) else
32079: LD_ADDR_VAR 0 5
32083: PUSH
32084: LD_VAR 0 3
32088: PUSH
32089: LD_VAR 0 1
32093: STR
32094: PPUSH
32095: CALL_OW 34
32099: ST_TO_ADDR
32100: GO 32117
// unit := NewCharacter ( ident ) ;
32102: LD_ADDR_VAR 0 5
32106: PUSH
32107: LD_VAR 0 1
32111: PPUSH
32112: CALL_OW 25
32116: ST_TO_ADDR
// result := unit ;
32117: LD_ADDR_VAR 0 4
32121: PUSH
32122: LD_VAR 0 5
32126: ST_TO_ADDR
// end ;
32127: LD_VAR 0 4
32131: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32132: LD_INT 0
32134: PPUSH
32135: PPUSH
// if not side or not nation then
32136: LD_VAR 0 1
32140: NOT
32141: PUSH
32142: LD_VAR 0 2
32146: NOT
32147: OR
32148: IFFALSE 32152
// exit ;
32150: GO 32920
// case nation of nation_american :
32152: LD_VAR 0 2
32156: PUSH
32157: LD_INT 1
32159: DOUBLE
32160: EQUAL
32161: IFTRUE 32165
32163: GO 32379
32165: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32166: LD_ADDR_VAR 0 4
32170: PUSH
32171: LD_INT 35
32173: PUSH
32174: LD_INT 45
32176: PUSH
32177: LD_INT 46
32179: PUSH
32180: LD_INT 47
32182: PUSH
32183: LD_INT 82
32185: PUSH
32186: LD_INT 83
32188: PUSH
32189: LD_INT 84
32191: PUSH
32192: LD_INT 85
32194: PUSH
32195: LD_INT 86
32197: PUSH
32198: LD_INT 1
32200: PUSH
32201: LD_INT 2
32203: PUSH
32204: LD_INT 6
32206: PUSH
32207: LD_INT 15
32209: PUSH
32210: LD_INT 16
32212: PUSH
32213: LD_INT 7
32215: PUSH
32216: LD_INT 12
32218: PUSH
32219: LD_INT 13
32221: PUSH
32222: LD_INT 10
32224: PUSH
32225: LD_INT 14
32227: PUSH
32228: LD_INT 20
32230: PUSH
32231: LD_INT 21
32233: PUSH
32234: LD_INT 22
32236: PUSH
32237: LD_INT 25
32239: PUSH
32240: LD_INT 32
32242: PUSH
32243: LD_INT 27
32245: PUSH
32246: LD_INT 36
32248: PUSH
32249: LD_INT 69
32251: PUSH
32252: LD_INT 39
32254: PUSH
32255: LD_INT 34
32257: PUSH
32258: LD_INT 40
32260: PUSH
32261: LD_INT 48
32263: PUSH
32264: LD_INT 49
32266: PUSH
32267: LD_INT 50
32269: PUSH
32270: LD_INT 51
32272: PUSH
32273: LD_INT 52
32275: PUSH
32276: LD_INT 53
32278: PUSH
32279: LD_INT 54
32281: PUSH
32282: LD_INT 55
32284: PUSH
32285: LD_INT 56
32287: PUSH
32288: LD_INT 57
32290: PUSH
32291: LD_INT 58
32293: PUSH
32294: LD_INT 59
32296: PUSH
32297: LD_INT 60
32299: PUSH
32300: LD_INT 61
32302: PUSH
32303: LD_INT 62
32305: PUSH
32306: LD_INT 80
32308: PUSH
32309: LD_INT 82
32311: PUSH
32312: LD_INT 83
32314: PUSH
32315: LD_INT 84
32317: PUSH
32318: LD_INT 85
32320: PUSH
32321: LD_INT 86
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: ST_TO_ADDR
32377: GO 32844
32379: LD_INT 2
32381: DOUBLE
32382: EQUAL
32383: IFTRUE 32387
32385: GO 32613
32387: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32388: LD_ADDR_VAR 0 4
32392: PUSH
32393: LD_INT 35
32395: PUSH
32396: LD_INT 45
32398: PUSH
32399: LD_INT 46
32401: PUSH
32402: LD_INT 47
32404: PUSH
32405: LD_INT 82
32407: PUSH
32408: LD_INT 83
32410: PUSH
32411: LD_INT 84
32413: PUSH
32414: LD_INT 85
32416: PUSH
32417: LD_INT 87
32419: PUSH
32420: LD_INT 70
32422: PUSH
32423: LD_INT 1
32425: PUSH
32426: LD_INT 11
32428: PUSH
32429: LD_INT 3
32431: PUSH
32432: LD_INT 4
32434: PUSH
32435: LD_INT 5
32437: PUSH
32438: LD_INT 6
32440: PUSH
32441: LD_INT 15
32443: PUSH
32444: LD_INT 18
32446: PUSH
32447: LD_INT 7
32449: PUSH
32450: LD_INT 17
32452: PUSH
32453: LD_INT 8
32455: PUSH
32456: LD_INT 20
32458: PUSH
32459: LD_INT 21
32461: PUSH
32462: LD_INT 22
32464: PUSH
32465: LD_INT 72
32467: PUSH
32468: LD_INT 26
32470: PUSH
32471: LD_INT 69
32473: PUSH
32474: LD_INT 39
32476: PUSH
32477: LD_INT 40
32479: PUSH
32480: LD_INT 41
32482: PUSH
32483: LD_INT 42
32485: PUSH
32486: LD_INT 43
32488: PUSH
32489: LD_INT 48
32491: PUSH
32492: LD_INT 49
32494: PUSH
32495: LD_INT 50
32497: PUSH
32498: LD_INT 51
32500: PUSH
32501: LD_INT 52
32503: PUSH
32504: LD_INT 53
32506: PUSH
32507: LD_INT 54
32509: PUSH
32510: LD_INT 55
32512: PUSH
32513: LD_INT 56
32515: PUSH
32516: LD_INT 60
32518: PUSH
32519: LD_INT 61
32521: PUSH
32522: LD_INT 62
32524: PUSH
32525: LD_INT 66
32527: PUSH
32528: LD_INT 67
32530: PUSH
32531: LD_INT 68
32533: PUSH
32534: LD_INT 81
32536: PUSH
32537: LD_INT 82
32539: PUSH
32540: LD_INT 83
32542: PUSH
32543: LD_INT 84
32545: PUSH
32546: LD_INT 85
32548: PUSH
32549: LD_INT 87
32551: PUSH
32552: LD_INT 88
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: ST_TO_ADDR
32611: GO 32844
32613: LD_INT 3
32615: DOUBLE
32616: EQUAL
32617: IFTRUE 32621
32619: GO 32843
32621: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32622: LD_ADDR_VAR 0 4
32626: PUSH
32627: LD_INT 46
32629: PUSH
32630: LD_INT 47
32632: PUSH
32633: LD_INT 1
32635: PUSH
32636: LD_INT 2
32638: PUSH
32639: LD_INT 82
32641: PUSH
32642: LD_INT 83
32644: PUSH
32645: LD_INT 84
32647: PUSH
32648: LD_INT 85
32650: PUSH
32651: LD_INT 86
32653: PUSH
32654: LD_INT 11
32656: PUSH
32657: LD_INT 9
32659: PUSH
32660: LD_INT 20
32662: PUSH
32663: LD_INT 19
32665: PUSH
32666: LD_INT 21
32668: PUSH
32669: LD_INT 24
32671: PUSH
32672: LD_INT 22
32674: PUSH
32675: LD_INT 25
32677: PUSH
32678: LD_INT 28
32680: PUSH
32681: LD_INT 29
32683: PUSH
32684: LD_INT 30
32686: PUSH
32687: LD_INT 31
32689: PUSH
32690: LD_INT 37
32692: PUSH
32693: LD_INT 38
32695: PUSH
32696: LD_INT 32
32698: PUSH
32699: LD_INT 27
32701: PUSH
32702: LD_INT 33
32704: PUSH
32705: LD_INT 69
32707: PUSH
32708: LD_INT 39
32710: PUSH
32711: LD_INT 34
32713: PUSH
32714: LD_INT 40
32716: PUSH
32717: LD_INT 71
32719: PUSH
32720: LD_INT 23
32722: PUSH
32723: LD_INT 44
32725: PUSH
32726: LD_INT 48
32728: PUSH
32729: LD_INT 49
32731: PUSH
32732: LD_INT 50
32734: PUSH
32735: LD_INT 51
32737: PUSH
32738: LD_INT 52
32740: PUSH
32741: LD_INT 53
32743: PUSH
32744: LD_INT 54
32746: PUSH
32747: LD_INT 55
32749: PUSH
32750: LD_INT 56
32752: PUSH
32753: LD_INT 57
32755: PUSH
32756: LD_INT 58
32758: PUSH
32759: LD_INT 59
32761: PUSH
32762: LD_INT 63
32764: PUSH
32765: LD_INT 64
32767: PUSH
32768: LD_INT 65
32770: PUSH
32771: LD_INT 82
32773: PUSH
32774: LD_INT 83
32776: PUSH
32777: LD_INT 84
32779: PUSH
32780: LD_INT 85
32782: PUSH
32783: LD_INT 86
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: ST_TO_ADDR
32841: GO 32844
32843: POP
// if state > - 1 and state < 3 then
32844: LD_VAR 0 3
32848: PUSH
32849: LD_INT 1
32851: NEG
32852: GREATER
32853: PUSH
32854: LD_VAR 0 3
32858: PUSH
32859: LD_INT 3
32861: LESS
32862: AND
32863: IFFALSE 32920
// for i in result do
32865: LD_ADDR_VAR 0 5
32869: PUSH
32870: LD_VAR 0 4
32874: PUSH
32875: FOR_IN
32876: IFFALSE 32918
// if GetTech ( i , side ) <> state then
32878: LD_VAR 0 5
32882: PPUSH
32883: LD_VAR 0 1
32887: PPUSH
32888: CALL_OW 321
32892: PUSH
32893: LD_VAR 0 3
32897: NONEQUAL
32898: IFFALSE 32916
// result := result diff i ;
32900: LD_ADDR_VAR 0 4
32904: PUSH
32905: LD_VAR 0 4
32909: PUSH
32910: LD_VAR 0 5
32914: DIFF
32915: ST_TO_ADDR
32916: GO 32875
32918: POP
32919: POP
// end ;
32920: LD_VAR 0 4
32924: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32925: LD_INT 0
32927: PPUSH
32928: PPUSH
32929: PPUSH
// result := true ;
32930: LD_ADDR_VAR 0 3
32934: PUSH
32935: LD_INT 1
32937: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32938: LD_ADDR_VAR 0 5
32942: PUSH
32943: LD_VAR 0 2
32947: PPUSH
32948: CALL_OW 480
32952: ST_TO_ADDR
// if not tmp then
32953: LD_VAR 0 5
32957: NOT
32958: IFFALSE 32962
// exit ;
32960: GO 33011
// for i in tmp do
32962: LD_ADDR_VAR 0 4
32966: PUSH
32967: LD_VAR 0 5
32971: PUSH
32972: FOR_IN
32973: IFFALSE 33009
// if GetTech ( i , side ) <> state_researched then
32975: LD_VAR 0 4
32979: PPUSH
32980: LD_VAR 0 1
32984: PPUSH
32985: CALL_OW 321
32989: PUSH
32990: LD_INT 2
32992: NONEQUAL
32993: IFFALSE 33007
// begin result := false ;
32995: LD_ADDR_VAR 0 3
32999: PUSH
33000: LD_INT 0
33002: ST_TO_ADDR
// exit ;
33003: POP
33004: POP
33005: GO 33011
// end ;
33007: GO 32972
33009: POP
33010: POP
// end ;
33011: LD_VAR 0 3
33015: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33016: LD_INT 0
33018: PPUSH
33019: PPUSH
33020: PPUSH
33021: PPUSH
33022: PPUSH
33023: PPUSH
33024: PPUSH
33025: PPUSH
33026: PPUSH
33027: PPUSH
33028: PPUSH
33029: PPUSH
33030: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33031: LD_VAR 0 1
33035: NOT
33036: PUSH
33037: LD_VAR 0 1
33041: PPUSH
33042: CALL_OW 257
33046: PUSH
33047: LD_INT 9
33049: NONEQUAL
33050: OR
33051: IFFALSE 33055
// exit ;
33053: GO 33628
// side := GetSide ( unit ) ;
33055: LD_ADDR_VAR 0 9
33059: PUSH
33060: LD_VAR 0 1
33064: PPUSH
33065: CALL_OW 255
33069: ST_TO_ADDR
// tech_space := tech_spacanom ;
33070: LD_ADDR_VAR 0 12
33074: PUSH
33075: LD_INT 29
33077: ST_TO_ADDR
// tech_time := tech_taurad ;
33078: LD_ADDR_VAR 0 13
33082: PUSH
33083: LD_INT 28
33085: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33086: LD_ADDR_VAR 0 11
33090: PUSH
33091: LD_VAR 0 1
33095: PPUSH
33096: CALL_OW 310
33100: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33101: LD_VAR 0 11
33105: PPUSH
33106: CALL_OW 247
33110: PUSH
33111: LD_INT 2
33113: EQUAL
33114: IFFALSE 33118
// exit ;
33116: GO 33628
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33118: LD_ADDR_VAR 0 8
33122: PUSH
33123: LD_INT 81
33125: PUSH
33126: LD_VAR 0 9
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 3
33137: PUSH
33138: LD_INT 21
33140: PUSH
33141: LD_INT 3
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PPUSH
33156: CALL_OW 69
33160: ST_TO_ADDR
// if not tmp then
33161: LD_VAR 0 8
33165: NOT
33166: IFFALSE 33170
// exit ;
33168: GO 33628
// if in_unit then
33170: LD_VAR 0 11
33174: IFFALSE 33198
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33176: LD_ADDR_VAR 0 10
33180: PUSH
33181: LD_VAR 0 8
33185: PPUSH
33186: LD_VAR 0 11
33190: PPUSH
33191: CALL_OW 74
33195: ST_TO_ADDR
33196: GO 33218
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33198: LD_ADDR_VAR 0 10
33202: PUSH
33203: LD_VAR 0 8
33207: PPUSH
33208: LD_VAR 0 1
33212: PPUSH
33213: CALL_OW 74
33217: ST_TO_ADDR
// if not enemy then
33218: LD_VAR 0 10
33222: NOT
33223: IFFALSE 33227
// exit ;
33225: GO 33628
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33227: LD_VAR 0 11
33231: PUSH
33232: LD_VAR 0 11
33236: PPUSH
33237: LD_VAR 0 10
33241: PPUSH
33242: CALL_OW 296
33246: PUSH
33247: LD_INT 13
33249: GREATER
33250: AND
33251: PUSH
33252: LD_VAR 0 1
33256: PPUSH
33257: LD_VAR 0 10
33261: PPUSH
33262: CALL_OW 296
33266: PUSH
33267: LD_INT 12
33269: GREATER
33270: OR
33271: IFFALSE 33275
// exit ;
33273: GO 33628
// missile := [ 1 ] ;
33275: LD_ADDR_VAR 0 14
33279: PUSH
33280: LD_INT 1
33282: PUSH
33283: EMPTY
33284: LIST
33285: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33286: LD_VAR 0 9
33290: PPUSH
33291: LD_VAR 0 12
33295: PPUSH
33296: CALL_OW 325
33300: IFFALSE 33329
// missile := Insert ( missile , missile + 1 , 2 ) ;
33302: LD_ADDR_VAR 0 14
33306: PUSH
33307: LD_VAR 0 14
33311: PPUSH
33312: LD_VAR 0 14
33316: PUSH
33317: LD_INT 1
33319: PLUS
33320: PPUSH
33321: LD_INT 2
33323: PPUSH
33324: CALL_OW 2
33328: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33329: LD_VAR 0 9
33333: PPUSH
33334: LD_VAR 0 13
33338: PPUSH
33339: CALL_OW 325
33343: PUSH
33344: LD_VAR 0 10
33348: PPUSH
33349: CALL_OW 255
33353: PPUSH
33354: LD_VAR 0 13
33358: PPUSH
33359: CALL_OW 325
33363: NOT
33364: AND
33365: IFFALSE 33394
// missile := Insert ( missile , missile + 1 , 3 ) ;
33367: LD_ADDR_VAR 0 14
33371: PUSH
33372: LD_VAR 0 14
33376: PPUSH
33377: LD_VAR 0 14
33381: PUSH
33382: LD_INT 1
33384: PLUS
33385: PPUSH
33386: LD_INT 3
33388: PPUSH
33389: CALL_OW 2
33393: ST_TO_ADDR
// if missile < 2 then
33394: LD_VAR 0 14
33398: PUSH
33399: LD_INT 2
33401: LESS
33402: IFFALSE 33406
// exit ;
33404: GO 33628
// x := GetX ( enemy ) ;
33406: LD_ADDR_VAR 0 4
33410: PUSH
33411: LD_VAR 0 10
33415: PPUSH
33416: CALL_OW 250
33420: ST_TO_ADDR
// y := GetY ( enemy ) ;
33421: LD_ADDR_VAR 0 5
33425: PUSH
33426: LD_VAR 0 10
33430: PPUSH
33431: CALL_OW 251
33435: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33436: LD_ADDR_VAR 0 6
33440: PUSH
33441: LD_VAR 0 4
33445: PUSH
33446: LD_INT 1
33448: NEG
33449: PPUSH
33450: LD_INT 1
33452: PPUSH
33453: CALL_OW 12
33457: PLUS
33458: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33459: LD_ADDR_VAR 0 7
33463: PUSH
33464: LD_VAR 0 5
33468: PUSH
33469: LD_INT 1
33471: NEG
33472: PPUSH
33473: LD_INT 1
33475: PPUSH
33476: CALL_OW 12
33480: PLUS
33481: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33482: LD_VAR 0 6
33486: PPUSH
33487: LD_VAR 0 7
33491: PPUSH
33492: CALL_OW 488
33496: NOT
33497: IFFALSE 33519
// begin _x := x ;
33499: LD_ADDR_VAR 0 6
33503: PUSH
33504: LD_VAR 0 4
33508: ST_TO_ADDR
// _y := y ;
33509: LD_ADDR_VAR 0 7
33513: PUSH
33514: LD_VAR 0 5
33518: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33519: LD_ADDR_VAR 0 3
33523: PUSH
33524: LD_INT 1
33526: PPUSH
33527: LD_VAR 0 14
33531: PPUSH
33532: CALL_OW 12
33536: ST_TO_ADDR
// case i of 1 :
33537: LD_VAR 0 3
33541: PUSH
33542: LD_INT 1
33544: DOUBLE
33545: EQUAL
33546: IFTRUE 33550
33548: GO 33567
33550: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33551: LD_VAR 0 1
33555: PPUSH
33556: LD_VAR 0 10
33560: PPUSH
33561: CALL_OW 115
33565: GO 33628
33567: LD_INT 2
33569: DOUBLE
33570: EQUAL
33571: IFTRUE 33575
33573: GO 33597
33575: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33576: LD_VAR 0 1
33580: PPUSH
33581: LD_VAR 0 6
33585: PPUSH
33586: LD_VAR 0 7
33590: PPUSH
33591: CALL_OW 153
33595: GO 33628
33597: LD_INT 3
33599: DOUBLE
33600: EQUAL
33601: IFTRUE 33605
33603: GO 33627
33605: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33606: LD_VAR 0 1
33610: PPUSH
33611: LD_VAR 0 6
33615: PPUSH
33616: LD_VAR 0 7
33620: PPUSH
33621: CALL_OW 154
33625: GO 33628
33627: POP
// end ;
33628: LD_VAR 0 2
33632: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33633: LD_INT 0
33635: PPUSH
33636: PPUSH
33637: PPUSH
33638: PPUSH
33639: PPUSH
33640: PPUSH
// if not unit or not building then
33641: LD_VAR 0 1
33645: NOT
33646: PUSH
33647: LD_VAR 0 2
33651: NOT
33652: OR
33653: IFFALSE 33657
// exit ;
33655: GO 33815
// x := GetX ( building ) ;
33657: LD_ADDR_VAR 0 5
33661: PUSH
33662: LD_VAR 0 2
33666: PPUSH
33667: CALL_OW 250
33671: ST_TO_ADDR
// y := GetY ( building ) ;
33672: LD_ADDR_VAR 0 6
33676: PUSH
33677: LD_VAR 0 2
33681: PPUSH
33682: CALL_OW 251
33686: ST_TO_ADDR
// for i = 0 to 5 do
33687: LD_ADDR_VAR 0 4
33691: PUSH
33692: DOUBLE
33693: LD_INT 0
33695: DEC
33696: ST_TO_ADDR
33697: LD_INT 5
33699: PUSH
33700: FOR_TO
33701: IFFALSE 33813
// begin _x := ShiftX ( x , i , 3 ) ;
33703: LD_ADDR_VAR 0 7
33707: PUSH
33708: LD_VAR 0 5
33712: PPUSH
33713: LD_VAR 0 4
33717: PPUSH
33718: LD_INT 3
33720: PPUSH
33721: CALL_OW 272
33725: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33726: LD_ADDR_VAR 0 8
33730: PUSH
33731: LD_VAR 0 6
33735: PPUSH
33736: LD_VAR 0 4
33740: PPUSH
33741: LD_INT 3
33743: PPUSH
33744: CALL_OW 273
33748: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33749: LD_VAR 0 7
33753: PPUSH
33754: LD_VAR 0 8
33758: PPUSH
33759: CALL_OW 488
33763: NOT
33764: IFFALSE 33768
// continue ;
33766: GO 33700
// if HexInfo ( _x , _y ) = 0 then
33768: LD_VAR 0 7
33772: PPUSH
33773: LD_VAR 0 8
33777: PPUSH
33778: CALL_OW 428
33782: PUSH
33783: LD_INT 0
33785: EQUAL
33786: IFFALSE 33811
// begin ComMoveXY ( unit , _x , _y ) ;
33788: LD_VAR 0 1
33792: PPUSH
33793: LD_VAR 0 7
33797: PPUSH
33798: LD_VAR 0 8
33802: PPUSH
33803: CALL_OW 111
// exit ;
33807: POP
33808: POP
33809: GO 33815
// end ; end ;
33811: GO 33700
33813: POP
33814: POP
// end ;
33815: LD_VAR 0 3
33819: RET
// export function ScanBase ( side , base_area ) ; begin
33820: LD_INT 0
33822: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33823: LD_ADDR_VAR 0 3
33827: PUSH
33828: LD_VAR 0 2
33832: PPUSH
33833: LD_INT 81
33835: PUSH
33836: LD_VAR 0 1
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PPUSH
33845: CALL_OW 70
33849: ST_TO_ADDR
// end ;
33850: LD_VAR 0 3
33854: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33855: LD_INT 0
33857: PPUSH
33858: PPUSH
33859: PPUSH
33860: PPUSH
// result := false ;
33861: LD_ADDR_VAR 0 2
33865: PUSH
33866: LD_INT 0
33868: ST_TO_ADDR
// side := GetSide ( unit ) ;
33869: LD_ADDR_VAR 0 3
33873: PUSH
33874: LD_VAR 0 1
33878: PPUSH
33879: CALL_OW 255
33883: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33884: LD_ADDR_VAR 0 4
33888: PUSH
33889: LD_VAR 0 1
33893: PPUSH
33894: CALL_OW 248
33898: ST_TO_ADDR
// case nat of 1 :
33899: LD_VAR 0 4
33903: PUSH
33904: LD_INT 1
33906: DOUBLE
33907: EQUAL
33908: IFTRUE 33912
33910: GO 33923
33912: POP
// tech := tech_lassight ; 2 :
33913: LD_ADDR_VAR 0 5
33917: PUSH
33918: LD_INT 12
33920: ST_TO_ADDR
33921: GO 33962
33923: LD_INT 2
33925: DOUBLE
33926: EQUAL
33927: IFTRUE 33931
33929: GO 33942
33931: POP
// tech := tech_mortar ; 3 :
33932: LD_ADDR_VAR 0 5
33936: PUSH
33937: LD_INT 41
33939: ST_TO_ADDR
33940: GO 33962
33942: LD_INT 3
33944: DOUBLE
33945: EQUAL
33946: IFTRUE 33950
33948: GO 33961
33950: POP
// tech := tech_bazooka ; end ;
33951: LD_ADDR_VAR 0 5
33955: PUSH
33956: LD_INT 44
33958: ST_TO_ADDR
33959: GO 33962
33961: POP
// if Researched ( side , tech ) then
33962: LD_VAR 0 3
33966: PPUSH
33967: LD_VAR 0 5
33971: PPUSH
33972: CALL_OW 325
33976: IFFALSE 34003
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33978: LD_ADDR_VAR 0 2
33982: PUSH
33983: LD_INT 5
33985: PUSH
33986: LD_INT 8
33988: PUSH
33989: LD_INT 9
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: LIST
33996: PUSH
33997: LD_VAR 0 4
34001: ARRAY
34002: ST_TO_ADDR
// end ;
34003: LD_VAR 0 2
34007: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34008: LD_INT 0
34010: PPUSH
34011: PPUSH
34012: PPUSH
// if not mines then
34013: LD_VAR 0 2
34017: NOT
34018: IFFALSE 34022
// exit ;
34020: GO 34166
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34022: LD_ADDR_VAR 0 5
34026: PUSH
34027: LD_INT 81
34029: PUSH
34030: LD_VAR 0 1
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 3
34041: PUSH
34042: LD_INT 21
34044: PUSH
34045: LD_INT 3
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PPUSH
34060: CALL_OW 69
34064: ST_TO_ADDR
// for i in mines do
34065: LD_ADDR_VAR 0 4
34069: PUSH
34070: LD_VAR 0 2
34074: PUSH
34075: FOR_IN
34076: IFFALSE 34164
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34078: LD_VAR 0 4
34082: PUSH
34083: LD_INT 1
34085: ARRAY
34086: PPUSH
34087: LD_VAR 0 4
34091: PUSH
34092: LD_INT 2
34094: ARRAY
34095: PPUSH
34096: CALL_OW 458
34100: NOT
34101: IFFALSE 34105
// continue ;
34103: GO 34075
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34105: LD_VAR 0 4
34109: PUSH
34110: LD_INT 1
34112: ARRAY
34113: PPUSH
34114: LD_VAR 0 4
34118: PUSH
34119: LD_INT 2
34121: ARRAY
34122: PPUSH
34123: CALL_OW 428
34127: PUSH
34128: LD_VAR 0 5
34132: IN
34133: IFFALSE 34162
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34135: LD_VAR 0 4
34139: PUSH
34140: LD_INT 1
34142: ARRAY
34143: PPUSH
34144: LD_VAR 0 4
34148: PUSH
34149: LD_INT 2
34151: ARRAY
34152: PPUSH
34153: LD_VAR 0 1
34157: PPUSH
34158: CALL_OW 456
// end ;
34162: GO 34075
34164: POP
34165: POP
// end ;
34166: LD_VAR 0 3
34170: RET
// export function Count ( array ) ; var i ; begin
34171: LD_INT 0
34173: PPUSH
34174: PPUSH
// result := 0 ;
34175: LD_ADDR_VAR 0 2
34179: PUSH
34180: LD_INT 0
34182: ST_TO_ADDR
// for i in array do
34183: LD_ADDR_VAR 0 3
34187: PUSH
34188: LD_VAR 0 1
34192: PUSH
34193: FOR_IN
34194: IFFALSE 34218
// if i then
34196: LD_VAR 0 3
34200: IFFALSE 34216
// result := result + 1 ;
34202: LD_ADDR_VAR 0 2
34206: PUSH
34207: LD_VAR 0 2
34211: PUSH
34212: LD_INT 1
34214: PLUS
34215: ST_TO_ADDR
34216: GO 34193
34218: POP
34219: POP
// end ;
34220: LD_VAR 0 2
34224: RET
// export function IsEmpty ( building ) ; begin
34225: LD_INT 0
34227: PPUSH
// if not building then
34228: LD_VAR 0 1
34232: NOT
34233: IFFALSE 34237
// exit ;
34235: GO 34280
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34237: LD_ADDR_VAR 0 2
34241: PUSH
34242: LD_VAR 0 1
34246: PUSH
34247: LD_INT 22
34249: PUSH
34250: LD_VAR 0 1
34254: PPUSH
34255: CALL_OW 255
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 58
34266: PUSH
34267: EMPTY
34268: LIST
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PPUSH
34274: CALL_OW 69
34278: IN
34279: ST_TO_ADDR
// end ;
34280: LD_VAR 0 2
34284: RET
// export function IsNotFull ( building ) ; begin
34285: LD_INT 0
34287: PPUSH
// if not building then
34288: LD_VAR 0 1
34292: NOT
34293: IFFALSE 34297
// exit ;
34295: GO 34316
// result := UnitsInside ( building ) < 6 ;
34297: LD_ADDR_VAR 0 2
34301: PUSH
34302: LD_VAR 0 1
34306: PPUSH
34307: CALL_OW 313
34311: PUSH
34312: LD_INT 6
34314: LESS
34315: ST_TO_ADDR
// end ;
34316: LD_VAR 0 2
34320: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34321: LD_INT 0
34323: PPUSH
34324: PPUSH
34325: PPUSH
34326: PPUSH
// tmp := [ ] ;
34327: LD_ADDR_VAR 0 3
34331: PUSH
34332: EMPTY
34333: ST_TO_ADDR
// list := [ ] ;
34334: LD_ADDR_VAR 0 5
34338: PUSH
34339: EMPTY
34340: ST_TO_ADDR
// for i = 16 to 25 do
34341: LD_ADDR_VAR 0 4
34345: PUSH
34346: DOUBLE
34347: LD_INT 16
34349: DEC
34350: ST_TO_ADDR
34351: LD_INT 25
34353: PUSH
34354: FOR_TO
34355: IFFALSE 34428
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34357: LD_ADDR_VAR 0 3
34361: PUSH
34362: LD_VAR 0 3
34366: PUSH
34367: LD_INT 22
34369: PUSH
34370: LD_VAR 0 1
34374: PPUSH
34375: CALL_OW 255
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 91
34386: PUSH
34387: LD_VAR 0 1
34391: PUSH
34392: LD_INT 6
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 30
34402: PUSH
34403: LD_VAR 0 4
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: LIST
34416: PUSH
34417: EMPTY
34418: LIST
34419: PPUSH
34420: CALL_OW 69
34424: ADD
34425: ST_TO_ADDR
34426: GO 34354
34428: POP
34429: POP
// for i = 1 to tmp do
34430: LD_ADDR_VAR 0 4
34434: PUSH
34435: DOUBLE
34436: LD_INT 1
34438: DEC
34439: ST_TO_ADDR
34440: LD_VAR 0 3
34444: PUSH
34445: FOR_TO
34446: IFFALSE 34534
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34448: LD_ADDR_VAR 0 5
34452: PUSH
34453: LD_VAR 0 5
34457: PUSH
34458: LD_VAR 0 3
34462: PUSH
34463: LD_VAR 0 4
34467: ARRAY
34468: PPUSH
34469: CALL_OW 266
34473: PUSH
34474: LD_VAR 0 3
34478: PUSH
34479: LD_VAR 0 4
34483: ARRAY
34484: PPUSH
34485: CALL_OW 250
34489: PUSH
34490: LD_VAR 0 3
34494: PUSH
34495: LD_VAR 0 4
34499: ARRAY
34500: PPUSH
34501: CALL_OW 251
34505: PUSH
34506: LD_VAR 0 3
34510: PUSH
34511: LD_VAR 0 4
34515: ARRAY
34516: PPUSH
34517: CALL_OW 254
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: PUSH
34528: EMPTY
34529: LIST
34530: ADD
34531: ST_TO_ADDR
34532: GO 34445
34534: POP
34535: POP
// result := list ;
34536: LD_ADDR_VAR 0 2
34540: PUSH
34541: LD_VAR 0 5
34545: ST_TO_ADDR
// end ;
34546: LD_VAR 0 2
34550: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34551: LD_INT 0
34553: PPUSH
34554: PPUSH
34555: PPUSH
34556: PPUSH
34557: PPUSH
34558: PPUSH
34559: PPUSH
// if not factory then
34560: LD_VAR 0 1
34564: NOT
34565: IFFALSE 34569
// exit ;
34567: GO 35162
// if control = control_apeman then
34569: LD_VAR 0 4
34573: PUSH
34574: LD_INT 5
34576: EQUAL
34577: IFFALSE 34686
// begin tmp := UnitsInside ( factory ) ;
34579: LD_ADDR_VAR 0 8
34583: PUSH
34584: LD_VAR 0 1
34588: PPUSH
34589: CALL_OW 313
34593: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34594: LD_VAR 0 8
34598: PPUSH
34599: LD_INT 25
34601: PUSH
34602: LD_INT 12
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PPUSH
34609: CALL_OW 72
34613: NOT
34614: IFFALSE 34624
// control := control_manual ;
34616: LD_ADDR_VAR 0 4
34620: PUSH
34621: LD_INT 1
34623: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34624: LD_ADDR_VAR 0 8
34628: PUSH
34629: LD_VAR 0 1
34633: PPUSH
34634: CALL 34321 0 1
34638: ST_TO_ADDR
// if tmp then
34639: LD_VAR 0 8
34643: IFFALSE 34686
// begin for i in tmp do
34645: LD_ADDR_VAR 0 7
34649: PUSH
34650: LD_VAR 0 8
34654: PUSH
34655: FOR_IN
34656: IFFALSE 34684
// if i [ 1 ] = b_ext_radio then
34658: LD_VAR 0 7
34662: PUSH
34663: LD_INT 1
34665: ARRAY
34666: PUSH
34667: LD_INT 22
34669: EQUAL
34670: IFFALSE 34682
// begin control := control_remote ;
34672: LD_ADDR_VAR 0 4
34676: PUSH
34677: LD_INT 2
34679: ST_TO_ADDR
// break ;
34680: GO 34684
// end ;
34682: GO 34655
34684: POP
34685: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34686: LD_VAR 0 1
34690: PPUSH
34691: LD_VAR 0 2
34695: PPUSH
34696: LD_VAR 0 3
34700: PPUSH
34701: LD_VAR 0 4
34705: PPUSH
34706: LD_VAR 0 5
34710: PPUSH
34711: CALL_OW 448
34715: IFFALSE 34750
// begin result := [ chassis , engine , control , weapon ] ;
34717: LD_ADDR_VAR 0 6
34721: PUSH
34722: LD_VAR 0 2
34726: PUSH
34727: LD_VAR 0 3
34731: PUSH
34732: LD_VAR 0 4
34736: PUSH
34737: LD_VAR 0 5
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: ST_TO_ADDR
// exit ;
34748: GO 35162
// end ; _chassis := AvailableChassisList ( factory ) ;
34750: LD_ADDR_VAR 0 9
34754: PUSH
34755: LD_VAR 0 1
34759: PPUSH
34760: CALL_OW 475
34764: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34765: LD_ADDR_VAR 0 11
34769: PUSH
34770: LD_VAR 0 1
34774: PPUSH
34775: CALL_OW 476
34779: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34780: LD_ADDR_VAR 0 12
34784: PUSH
34785: LD_VAR 0 1
34789: PPUSH
34790: CALL_OW 477
34794: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34795: LD_ADDR_VAR 0 10
34799: PUSH
34800: LD_VAR 0 1
34804: PPUSH
34805: CALL_OW 478
34809: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34810: LD_VAR 0 9
34814: NOT
34815: PUSH
34816: LD_VAR 0 11
34820: NOT
34821: OR
34822: PUSH
34823: LD_VAR 0 12
34827: NOT
34828: OR
34829: PUSH
34830: LD_VAR 0 10
34834: NOT
34835: OR
34836: IFFALSE 34871
// begin result := [ chassis , engine , control , weapon ] ;
34838: LD_ADDR_VAR 0 6
34842: PUSH
34843: LD_VAR 0 2
34847: PUSH
34848: LD_VAR 0 3
34852: PUSH
34853: LD_VAR 0 4
34857: PUSH
34858: LD_VAR 0 5
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: ST_TO_ADDR
// exit ;
34869: GO 35162
// end ; if not chassis in _chassis then
34871: LD_VAR 0 2
34875: PUSH
34876: LD_VAR 0 9
34880: IN
34881: NOT
34882: IFFALSE 34908
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34884: LD_ADDR_VAR 0 2
34888: PUSH
34889: LD_VAR 0 9
34893: PUSH
34894: LD_INT 1
34896: PPUSH
34897: LD_VAR 0 9
34901: PPUSH
34902: CALL_OW 12
34906: ARRAY
34907: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34908: LD_VAR 0 2
34912: PPUSH
34913: LD_VAR 0 3
34917: PPUSH
34918: CALL 35167 0 2
34922: NOT
34923: IFFALSE 34982
// repeat engine := _engine [ 1 ] ;
34925: LD_ADDR_VAR 0 3
34929: PUSH
34930: LD_VAR 0 11
34934: PUSH
34935: LD_INT 1
34937: ARRAY
34938: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34939: LD_ADDR_VAR 0 11
34943: PUSH
34944: LD_VAR 0 11
34948: PPUSH
34949: LD_INT 1
34951: PPUSH
34952: CALL_OW 3
34956: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34957: LD_VAR 0 2
34961: PPUSH
34962: LD_VAR 0 3
34966: PPUSH
34967: CALL 35167 0 2
34971: PUSH
34972: LD_VAR 0 11
34976: PUSH
34977: EMPTY
34978: EQUAL
34979: OR
34980: IFFALSE 34925
// if not control in _control then
34982: LD_VAR 0 4
34986: PUSH
34987: LD_VAR 0 12
34991: IN
34992: NOT
34993: IFFALSE 35019
// control := _control [ rand ( 1 , _control ) ] ;
34995: LD_ADDR_VAR 0 4
34999: PUSH
35000: LD_VAR 0 12
35004: PUSH
35005: LD_INT 1
35007: PPUSH
35008: LD_VAR 0 12
35012: PPUSH
35013: CALL_OW 12
35017: ARRAY
35018: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35019: LD_VAR 0 2
35023: PPUSH
35024: LD_VAR 0 5
35028: PPUSH
35029: CALL 35387 0 2
35033: NOT
35034: IFFALSE 35093
// repeat weapon := _weapon [ 1 ] ;
35036: LD_ADDR_VAR 0 5
35040: PUSH
35041: LD_VAR 0 10
35045: PUSH
35046: LD_INT 1
35048: ARRAY
35049: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35050: LD_ADDR_VAR 0 10
35054: PUSH
35055: LD_VAR 0 10
35059: PPUSH
35060: LD_INT 1
35062: PPUSH
35063: CALL_OW 3
35067: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35068: LD_VAR 0 2
35072: PPUSH
35073: LD_VAR 0 5
35077: PPUSH
35078: CALL 35387 0 2
35082: PUSH
35083: LD_VAR 0 10
35087: PUSH
35088: EMPTY
35089: EQUAL
35090: OR
35091: IFFALSE 35036
// result := [ ] ;
35093: LD_ADDR_VAR 0 6
35097: PUSH
35098: EMPTY
35099: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35100: LD_VAR 0 1
35104: PPUSH
35105: LD_VAR 0 2
35109: PPUSH
35110: LD_VAR 0 3
35114: PPUSH
35115: LD_VAR 0 4
35119: PPUSH
35120: LD_VAR 0 5
35124: PPUSH
35125: CALL_OW 448
35129: IFFALSE 35162
// result := [ chassis , engine , control , weapon ] ;
35131: LD_ADDR_VAR 0 6
35135: PUSH
35136: LD_VAR 0 2
35140: PUSH
35141: LD_VAR 0 3
35145: PUSH
35146: LD_VAR 0 4
35150: PUSH
35151: LD_VAR 0 5
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: ST_TO_ADDR
// end ;
35162: LD_VAR 0 6
35166: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35167: LD_INT 0
35169: PPUSH
// if not chassis or not engine then
35170: LD_VAR 0 1
35174: NOT
35175: PUSH
35176: LD_VAR 0 2
35180: NOT
35181: OR
35182: IFFALSE 35186
// exit ;
35184: GO 35382
// case engine of engine_solar :
35186: LD_VAR 0 2
35190: PUSH
35191: LD_INT 2
35193: DOUBLE
35194: EQUAL
35195: IFTRUE 35199
35197: GO 35237
35199: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35200: LD_ADDR_VAR 0 3
35204: PUSH
35205: LD_INT 11
35207: PUSH
35208: LD_INT 12
35210: PUSH
35211: LD_INT 13
35213: PUSH
35214: LD_INT 14
35216: PUSH
35217: LD_INT 1
35219: PUSH
35220: LD_INT 2
35222: PUSH
35223: LD_INT 3
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: ST_TO_ADDR
35235: GO 35366
35237: LD_INT 1
35239: DOUBLE
35240: EQUAL
35241: IFTRUE 35245
35243: GO 35307
35245: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35246: LD_ADDR_VAR 0 3
35250: PUSH
35251: LD_INT 11
35253: PUSH
35254: LD_INT 12
35256: PUSH
35257: LD_INT 13
35259: PUSH
35260: LD_INT 14
35262: PUSH
35263: LD_INT 1
35265: PUSH
35266: LD_INT 2
35268: PUSH
35269: LD_INT 3
35271: PUSH
35272: LD_INT 4
35274: PUSH
35275: LD_INT 5
35277: PUSH
35278: LD_INT 21
35280: PUSH
35281: LD_INT 23
35283: PUSH
35284: LD_INT 22
35286: PUSH
35287: LD_INT 24
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: ST_TO_ADDR
35305: GO 35366
35307: LD_INT 3
35309: DOUBLE
35310: EQUAL
35311: IFTRUE 35315
35313: GO 35365
35315: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35316: LD_ADDR_VAR 0 3
35320: PUSH
35321: LD_INT 13
35323: PUSH
35324: LD_INT 14
35326: PUSH
35327: LD_INT 2
35329: PUSH
35330: LD_INT 3
35332: PUSH
35333: LD_INT 4
35335: PUSH
35336: LD_INT 5
35338: PUSH
35339: LD_INT 21
35341: PUSH
35342: LD_INT 22
35344: PUSH
35345: LD_INT 23
35347: PUSH
35348: LD_INT 24
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: ST_TO_ADDR
35363: GO 35366
35365: POP
// result := ( chassis in result ) ;
35366: LD_ADDR_VAR 0 3
35370: PUSH
35371: LD_VAR 0 1
35375: PUSH
35376: LD_VAR 0 3
35380: IN
35381: ST_TO_ADDR
// end ;
35382: LD_VAR 0 3
35386: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35387: LD_INT 0
35389: PPUSH
// if not chassis or not weapon then
35390: LD_VAR 0 1
35394: NOT
35395: PUSH
35396: LD_VAR 0 2
35400: NOT
35401: OR
35402: IFFALSE 35406
// exit ;
35404: GO 36468
// case weapon of us_machine_gun :
35406: LD_VAR 0 2
35410: PUSH
35411: LD_INT 2
35413: DOUBLE
35414: EQUAL
35415: IFTRUE 35419
35417: GO 35449
35419: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35420: LD_ADDR_VAR 0 3
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: LD_INT 2
35430: PUSH
35431: LD_INT 3
35433: PUSH
35434: LD_INT 4
35436: PUSH
35437: LD_INT 5
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: ST_TO_ADDR
35447: GO 36452
35449: LD_INT 3
35451: DOUBLE
35452: EQUAL
35453: IFTRUE 35457
35455: GO 35487
35457: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35458: LD_ADDR_VAR 0 3
35462: PUSH
35463: LD_INT 1
35465: PUSH
35466: LD_INT 2
35468: PUSH
35469: LD_INT 3
35471: PUSH
35472: LD_INT 4
35474: PUSH
35475: LD_INT 5
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: ST_TO_ADDR
35485: GO 36452
35487: LD_INT 11
35489: DOUBLE
35490: EQUAL
35491: IFTRUE 35495
35493: GO 35525
35495: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35496: LD_ADDR_VAR 0 3
35500: PUSH
35501: LD_INT 1
35503: PUSH
35504: LD_INT 2
35506: PUSH
35507: LD_INT 3
35509: PUSH
35510: LD_INT 4
35512: PUSH
35513: LD_INT 5
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: ST_TO_ADDR
35523: GO 36452
35525: LD_INT 4
35527: DOUBLE
35528: EQUAL
35529: IFTRUE 35533
35531: GO 35559
35533: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35534: LD_ADDR_VAR 0 3
35538: PUSH
35539: LD_INT 2
35541: PUSH
35542: LD_INT 3
35544: PUSH
35545: LD_INT 4
35547: PUSH
35548: LD_INT 5
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: ST_TO_ADDR
35557: GO 36452
35559: LD_INT 5
35561: DOUBLE
35562: EQUAL
35563: IFTRUE 35567
35565: GO 35593
35567: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35568: LD_ADDR_VAR 0 3
35572: PUSH
35573: LD_INT 2
35575: PUSH
35576: LD_INT 3
35578: PUSH
35579: LD_INT 4
35581: PUSH
35582: LD_INT 5
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: ST_TO_ADDR
35591: GO 36452
35593: LD_INT 9
35595: DOUBLE
35596: EQUAL
35597: IFTRUE 35601
35599: GO 35627
35601: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35602: LD_ADDR_VAR 0 3
35606: PUSH
35607: LD_INT 2
35609: PUSH
35610: LD_INT 3
35612: PUSH
35613: LD_INT 4
35615: PUSH
35616: LD_INT 5
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: ST_TO_ADDR
35625: GO 36452
35627: LD_INT 7
35629: DOUBLE
35630: EQUAL
35631: IFTRUE 35635
35633: GO 35661
35635: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35636: LD_ADDR_VAR 0 3
35640: PUSH
35641: LD_INT 2
35643: PUSH
35644: LD_INT 3
35646: PUSH
35647: LD_INT 4
35649: PUSH
35650: LD_INT 5
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: ST_TO_ADDR
35659: GO 36452
35661: LD_INT 12
35663: DOUBLE
35664: EQUAL
35665: IFTRUE 35669
35667: GO 35695
35669: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35670: LD_ADDR_VAR 0 3
35674: PUSH
35675: LD_INT 2
35677: PUSH
35678: LD_INT 3
35680: PUSH
35681: LD_INT 4
35683: PUSH
35684: LD_INT 5
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: ST_TO_ADDR
35693: GO 36452
35695: LD_INT 13
35697: DOUBLE
35698: EQUAL
35699: IFTRUE 35703
35701: GO 35729
35703: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35704: LD_ADDR_VAR 0 3
35708: PUSH
35709: LD_INT 2
35711: PUSH
35712: LD_INT 3
35714: PUSH
35715: LD_INT 4
35717: PUSH
35718: LD_INT 5
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: ST_TO_ADDR
35727: GO 36452
35729: LD_INT 14
35731: DOUBLE
35732: EQUAL
35733: IFTRUE 35737
35735: GO 35755
35737: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35738: LD_ADDR_VAR 0 3
35742: PUSH
35743: LD_INT 4
35745: PUSH
35746: LD_INT 5
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: ST_TO_ADDR
35753: GO 36452
35755: LD_INT 6
35757: DOUBLE
35758: EQUAL
35759: IFTRUE 35763
35761: GO 35781
35763: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35764: LD_ADDR_VAR 0 3
35768: PUSH
35769: LD_INT 4
35771: PUSH
35772: LD_INT 5
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: ST_TO_ADDR
35779: GO 36452
35781: LD_INT 10
35783: DOUBLE
35784: EQUAL
35785: IFTRUE 35789
35787: GO 35807
35789: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35790: LD_ADDR_VAR 0 3
35794: PUSH
35795: LD_INT 4
35797: PUSH
35798: LD_INT 5
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: ST_TO_ADDR
35805: GO 36452
35807: LD_INT 22
35809: DOUBLE
35810: EQUAL
35811: IFTRUE 35815
35813: GO 35841
35815: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35816: LD_ADDR_VAR 0 3
35820: PUSH
35821: LD_INT 11
35823: PUSH
35824: LD_INT 12
35826: PUSH
35827: LD_INT 13
35829: PUSH
35830: LD_INT 14
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: ST_TO_ADDR
35839: GO 36452
35841: LD_INT 23
35843: DOUBLE
35844: EQUAL
35845: IFTRUE 35849
35847: GO 35875
35849: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35850: LD_ADDR_VAR 0 3
35854: PUSH
35855: LD_INT 11
35857: PUSH
35858: LD_INT 12
35860: PUSH
35861: LD_INT 13
35863: PUSH
35864: LD_INT 14
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: ST_TO_ADDR
35873: GO 36452
35875: LD_INT 24
35877: DOUBLE
35878: EQUAL
35879: IFTRUE 35883
35881: GO 35909
35883: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35884: LD_ADDR_VAR 0 3
35888: PUSH
35889: LD_INT 11
35891: PUSH
35892: LD_INT 12
35894: PUSH
35895: LD_INT 13
35897: PUSH
35898: LD_INT 14
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: ST_TO_ADDR
35907: GO 36452
35909: LD_INT 30
35911: DOUBLE
35912: EQUAL
35913: IFTRUE 35917
35915: GO 35943
35917: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35918: LD_ADDR_VAR 0 3
35922: PUSH
35923: LD_INT 11
35925: PUSH
35926: LD_INT 12
35928: PUSH
35929: LD_INT 13
35931: PUSH
35932: LD_INT 14
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: ST_TO_ADDR
35941: GO 36452
35943: LD_INT 25
35945: DOUBLE
35946: EQUAL
35947: IFTRUE 35951
35949: GO 35969
35951: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35952: LD_ADDR_VAR 0 3
35956: PUSH
35957: LD_INT 13
35959: PUSH
35960: LD_INT 14
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: ST_TO_ADDR
35967: GO 36452
35969: LD_INT 27
35971: DOUBLE
35972: EQUAL
35973: IFTRUE 35977
35975: GO 35995
35977: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35978: LD_ADDR_VAR 0 3
35982: PUSH
35983: LD_INT 13
35985: PUSH
35986: LD_INT 14
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: ST_TO_ADDR
35993: GO 36452
35995: LD_EXP 48
35999: DOUBLE
36000: EQUAL
36001: IFTRUE 36005
36003: GO 36031
36005: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36006: LD_ADDR_VAR 0 3
36010: PUSH
36011: LD_INT 11
36013: PUSH
36014: LD_INT 12
36016: PUSH
36017: LD_INT 13
36019: PUSH
36020: LD_INT 14
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: ST_TO_ADDR
36029: GO 36452
36031: LD_INT 28
36033: DOUBLE
36034: EQUAL
36035: IFTRUE 36039
36037: GO 36057
36039: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36040: LD_ADDR_VAR 0 3
36044: PUSH
36045: LD_INT 13
36047: PUSH
36048: LD_INT 14
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: ST_TO_ADDR
36055: GO 36452
36057: LD_INT 29
36059: DOUBLE
36060: EQUAL
36061: IFTRUE 36065
36063: GO 36083
36065: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36066: LD_ADDR_VAR 0 3
36070: PUSH
36071: LD_INT 13
36073: PUSH
36074: LD_INT 14
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: ST_TO_ADDR
36081: GO 36452
36083: LD_INT 31
36085: DOUBLE
36086: EQUAL
36087: IFTRUE 36091
36089: GO 36109
36091: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36092: LD_ADDR_VAR 0 3
36096: PUSH
36097: LD_INT 13
36099: PUSH
36100: LD_INT 14
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: ST_TO_ADDR
36107: GO 36452
36109: LD_INT 26
36111: DOUBLE
36112: EQUAL
36113: IFTRUE 36117
36115: GO 36135
36117: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36118: LD_ADDR_VAR 0 3
36122: PUSH
36123: LD_INT 13
36125: PUSH
36126: LD_INT 14
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: ST_TO_ADDR
36133: GO 36452
36135: LD_INT 42
36137: DOUBLE
36138: EQUAL
36139: IFTRUE 36143
36141: GO 36169
36143: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36144: LD_ADDR_VAR 0 3
36148: PUSH
36149: LD_INT 21
36151: PUSH
36152: LD_INT 22
36154: PUSH
36155: LD_INT 23
36157: PUSH
36158: LD_INT 24
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: ST_TO_ADDR
36167: GO 36452
36169: LD_INT 43
36171: DOUBLE
36172: EQUAL
36173: IFTRUE 36177
36175: GO 36203
36177: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36178: LD_ADDR_VAR 0 3
36182: PUSH
36183: LD_INT 21
36185: PUSH
36186: LD_INT 22
36188: PUSH
36189: LD_INT 23
36191: PUSH
36192: LD_INT 24
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: ST_TO_ADDR
36201: GO 36452
36203: LD_INT 44
36205: DOUBLE
36206: EQUAL
36207: IFTRUE 36211
36209: GO 36237
36211: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36212: LD_ADDR_VAR 0 3
36216: PUSH
36217: LD_INT 21
36219: PUSH
36220: LD_INT 22
36222: PUSH
36223: LD_INT 23
36225: PUSH
36226: LD_INT 24
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: ST_TO_ADDR
36235: GO 36452
36237: LD_INT 45
36239: DOUBLE
36240: EQUAL
36241: IFTRUE 36245
36243: GO 36271
36245: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36246: LD_ADDR_VAR 0 3
36250: PUSH
36251: LD_INT 21
36253: PUSH
36254: LD_INT 22
36256: PUSH
36257: LD_INT 23
36259: PUSH
36260: LD_INT 24
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: ST_TO_ADDR
36269: GO 36452
36271: LD_INT 49
36273: DOUBLE
36274: EQUAL
36275: IFTRUE 36279
36277: GO 36305
36279: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36280: LD_ADDR_VAR 0 3
36284: PUSH
36285: LD_INT 21
36287: PUSH
36288: LD_INT 22
36290: PUSH
36291: LD_INT 23
36293: PUSH
36294: LD_INT 24
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: ST_TO_ADDR
36303: GO 36452
36305: LD_INT 51
36307: DOUBLE
36308: EQUAL
36309: IFTRUE 36313
36311: GO 36339
36313: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36314: LD_ADDR_VAR 0 3
36318: PUSH
36319: LD_INT 21
36321: PUSH
36322: LD_INT 22
36324: PUSH
36325: LD_INT 23
36327: PUSH
36328: LD_INT 24
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: ST_TO_ADDR
36337: GO 36452
36339: LD_INT 52
36341: DOUBLE
36342: EQUAL
36343: IFTRUE 36347
36345: GO 36373
36347: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36348: LD_ADDR_VAR 0 3
36352: PUSH
36353: LD_INT 21
36355: PUSH
36356: LD_INT 22
36358: PUSH
36359: LD_INT 23
36361: PUSH
36362: LD_INT 24
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: ST_TO_ADDR
36371: GO 36452
36373: LD_INT 53
36375: DOUBLE
36376: EQUAL
36377: IFTRUE 36381
36379: GO 36399
36381: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36382: LD_ADDR_VAR 0 3
36386: PUSH
36387: LD_INT 23
36389: PUSH
36390: LD_INT 24
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: ST_TO_ADDR
36397: GO 36452
36399: LD_INT 46
36401: DOUBLE
36402: EQUAL
36403: IFTRUE 36407
36405: GO 36425
36407: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36408: LD_ADDR_VAR 0 3
36412: PUSH
36413: LD_INT 23
36415: PUSH
36416: LD_INT 24
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: ST_TO_ADDR
36423: GO 36452
36425: LD_INT 47
36427: DOUBLE
36428: EQUAL
36429: IFTRUE 36433
36431: GO 36451
36433: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36434: LD_ADDR_VAR 0 3
36438: PUSH
36439: LD_INT 23
36441: PUSH
36442: LD_INT 24
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: ST_TO_ADDR
36449: GO 36452
36451: POP
// result := ( chassis in result ) ;
36452: LD_ADDR_VAR 0 3
36456: PUSH
36457: LD_VAR 0 1
36461: PUSH
36462: LD_VAR 0 3
36466: IN
36467: ST_TO_ADDR
// end ;
36468: LD_VAR 0 3
36472: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36473: LD_INT 0
36475: PPUSH
36476: PPUSH
36477: PPUSH
36478: PPUSH
36479: PPUSH
36480: PPUSH
36481: PPUSH
// result := array ;
36482: LD_ADDR_VAR 0 5
36486: PUSH
36487: LD_VAR 0 1
36491: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36492: LD_VAR 0 1
36496: NOT
36497: PUSH
36498: LD_VAR 0 2
36502: NOT
36503: OR
36504: PUSH
36505: LD_VAR 0 3
36509: NOT
36510: OR
36511: PUSH
36512: LD_VAR 0 2
36516: PUSH
36517: LD_VAR 0 1
36521: GREATER
36522: OR
36523: PUSH
36524: LD_VAR 0 3
36528: PUSH
36529: LD_VAR 0 1
36533: GREATER
36534: OR
36535: IFFALSE 36539
// exit ;
36537: GO 36835
// if direction then
36539: LD_VAR 0 4
36543: IFFALSE 36607
// begin d := 1 ;
36545: LD_ADDR_VAR 0 9
36549: PUSH
36550: LD_INT 1
36552: ST_TO_ADDR
// if i_from > i_to then
36553: LD_VAR 0 2
36557: PUSH
36558: LD_VAR 0 3
36562: GREATER
36563: IFFALSE 36589
// length := ( array - i_from ) + i_to else
36565: LD_ADDR_VAR 0 11
36569: PUSH
36570: LD_VAR 0 1
36574: PUSH
36575: LD_VAR 0 2
36579: MINUS
36580: PUSH
36581: LD_VAR 0 3
36585: PLUS
36586: ST_TO_ADDR
36587: GO 36605
// length := i_to - i_from ;
36589: LD_ADDR_VAR 0 11
36593: PUSH
36594: LD_VAR 0 3
36598: PUSH
36599: LD_VAR 0 2
36603: MINUS
36604: ST_TO_ADDR
// end else
36605: GO 36668
// begin d := - 1 ;
36607: LD_ADDR_VAR 0 9
36611: PUSH
36612: LD_INT 1
36614: NEG
36615: ST_TO_ADDR
// if i_from > i_to then
36616: LD_VAR 0 2
36620: PUSH
36621: LD_VAR 0 3
36625: GREATER
36626: IFFALSE 36646
// length := i_from - i_to else
36628: LD_ADDR_VAR 0 11
36632: PUSH
36633: LD_VAR 0 2
36637: PUSH
36638: LD_VAR 0 3
36642: MINUS
36643: ST_TO_ADDR
36644: GO 36668
// length := ( array - i_to ) + i_from ;
36646: LD_ADDR_VAR 0 11
36650: PUSH
36651: LD_VAR 0 1
36655: PUSH
36656: LD_VAR 0 3
36660: MINUS
36661: PUSH
36662: LD_VAR 0 2
36666: PLUS
36667: ST_TO_ADDR
// end ; if not length then
36668: LD_VAR 0 11
36672: NOT
36673: IFFALSE 36677
// exit ;
36675: GO 36835
// tmp := array ;
36677: LD_ADDR_VAR 0 10
36681: PUSH
36682: LD_VAR 0 1
36686: ST_TO_ADDR
// for i = 1 to length do
36687: LD_ADDR_VAR 0 6
36691: PUSH
36692: DOUBLE
36693: LD_INT 1
36695: DEC
36696: ST_TO_ADDR
36697: LD_VAR 0 11
36701: PUSH
36702: FOR_TO
36703: IFFALSE 36823
// begin for j = 1 to array do
36705: LD_ADDR_VAR 0 7
36709: PUSH
36710: DOUBLE
36711: LD_INT 1
36713: DEC
36714: ST_TO_ADDR
36715: LD_VAR 0 1
36719: PUSH
36720: FOR_TO
36721: IFFALSE 36809
// begin k := j + d ;
36723: LD_ADDR_VAR 0 8
36727: PUSH
36728: LD_VAR 0 7
36732: PUSH
36733: LD_VAR 0 9
36737: PLUS
36738: ST_TO_ADDR
// if k > array then
36739: LD_VAR 0 8
36743: PUSH
36744: LD_VAR 0 1
36748: GREATER
36749: IFFALSE 36759
// k := 1 ;
36751: LD_ADDR_VAR 0 8
36755: PUSH
36756: LD_INT 1
36758: ST_TO_ADDR
// if not k then
36759: LD_VAR 0 8
36763: NOT
36764: IFFALSE 36776
// k := array ;
36766: LD_ADDR_VAR 0 8
36770: PUSH
36771: LD_VAR 0 1
36775: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36776: LD_ADDR_VAR 0 10
36780: PUSH
36781: LD_VAR 0 10
36785: PPUSH
36786: LD_VAR 0 8
36790: PPUSH
36791: LD_VAR 0 1
36795: PUSH
36796: LD_VAR 0 7
36800: ARRAY
36801: PPUSH
36802: CALL_OW 1
36806: ST_TO_ADDR
// end ;
36807: GO 36720
36809: POP
36810: POP
// array := tmp ;
36811: LD_ADDR_VAR 0 1
36815: PUSH
36816: LD_VAR 0 10
36820: ST_TO_ADDR
// end ;
36821: GO 36702
36823: POP
36824: POP
// result := array ;
36825: LD_ADDR_VAR 0 5
36829: PUSH
36830: LD_VAR 0 1
36834: ST_TO_ADDR
// end ;
36835: LD_VAR 0 5
36839: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36840: LD_INT 0
36842: PPUSH
36843: PPUSH
// result := 0 ;
36844: LD_ADDR_VAR 0 3
36848: PUSH
36849: LD_INT 0
36851: ST_TO_ADDR
// if not array or not value in array then
36852: LD_VAR 0 1
36856: NOT
36857: PUSH
36858: LD_VAR 0 2
36862: PUSH
36863: LD_VAR 0 1
36867: IN
36868: NOT
36869: OR
36870: IFFALSE 36874
// exit ;
36872: GO 36928
// for i = 1 to array do
36874: LD_ADDR_VAR 0 4
36878: PUSH
36879: DOUBLE
36880: LD_INT 1
36882: DEC
36883: ST_TO_ADDR
36884: LD_VAR 0 1
36888: PUSH
36889: FOR_TO
36890: IFFALSE 36926
// if value = array [ i ] then
36892: LD_VAR 0 2
36896: PUSH
36897: LD_VAR 0 1
36901: PUSH
36902: LD_VAR 0 4
36906: ARRAY
36907: EQUAL
36908: IFFALSE 36924
// begin result := i ;
36910: LD_ADDR_VAR 0 3
36914: PUSH
36915: LD_VAR 0 4
36919: ST_TO_ADDR
// exit ;
36920: POP
36921: POP
36922: GO 36928
// end ;
36924: GO 36889
36926: POP
36927: POP
// end ;
36928: LD_VAR 0 3
36932: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36933: LD_INT 0
36935: PPUSH
// vc_chassis := chassis ;
36936: LD_ADDR_OWVAR 37
36940: PUSH
36941: LD_VAR 0 1
36945: ST_TO_ADDR
// vc_engine := engine ;
36946: LD_ADDR_OWVAR 39
36950: PUSH
36951: LD_VAR 0 2
36955: ST_TO_ADDR
// vc_control := control ;
36956: LD_ADDR_OWVAR 38
36960: PUSH
36961: LD_VAR 0 3
36965: ST_TO_ADDR
// vc_weapon := weapon ;
36966: LD_ADDR_OWVAR 40
36970: PUSH
36971: LD_VAR 0 4
36975: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36976: LD_ADDR_OWVAR 41
36980: PUSH
36981: LD_VAR 0 5
36985: ST_TO_ADDR
// end ;
36986: LD_VAR 0 6
36990: RET
// export function WantPlant ( unit ) ; var task ; begin
36991: LD_INT 0
36993: PPUSH
36994: PPUSH
// result := false ;
36995: LD_ADDR_VAR 0 2
36999: PUSH
37000: LD_INT 0
37002: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37003: LD_ADDR_VAR 0 3
37007: PUSH
37008: LD_VAR 0 1
37012: PPUSH
37013: CALL_OW 437
37017: ST_TO_ADDR
// if task then
37018: LD_VAR 0 3
37022: IFFALSE 37050
// if task [ 1 ] [ 1 ] = p then
37024: LD_VAR 0 3
37028: PUSH
37029: LD_INT 1
37031: ARRAY
37032: PUSH
37033: LD_INT 1
37035: ARRAY
37036: PUSH
37037: LD_STRING p
37039: EQUAL
37040: IFFALSE 37050
// result := true ;
37042: LD_ADDR_VAR 0 2
37046: PUSH
37047: LD_INT 1
37049: ST_TO_ADDR
// end ;
37050: LD_VAR 0 2
37054: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37055: LD_INT 0
37057: PPUSH
37058: PPUSH
37059: PPUSH
37060: PPUSH
// if pos < 1 then
37061: LD_VAR 0 2
37065: PUSH
37066: LD_INT 1
37068: LESS
37069: IFFALSE 37073
// exit ;
37071: GO 37376
// if pos = 1 then
37073: LD_VAR 0 2
37077: PUSH
37078: LD_INT 1
37080: EQUAL
37081: IFFALSE 37114
// result := Replace ( arr , pos [ 1 ] , value ) else
37083: LD_ADDR_VAR 0 4
37087: PUSH
37088: LD_VAR 0 1
37092: PPUSH
37093: LD_VAR 0 2
37097: PUSH
37098: LD_INT 1
37100: ARRAY
37101: PPUSH
37102: LD_VAR 0 3
37106: PPUSH
37107: CALL_OW 1
37111: ST_TO_ADDR
37112: GO 37376
// begin tmp := arr ;
37114: LD_ADDR_VAR 0 6
37118: PUSH
37119: LD_VAR 0 1
37123: ST_TO_ADDR
// s_arr := [ tmp ] ;
37124: LD_ADDR_VAR 0 7
37128: PUSH
37129: LD_VAR 0 6
37133: PUSH
37134: EMPTY
37135: LIST
37136: ST_TO_ADDR
// for i = 1 to pos - 1 do
37137: LD_ADDR_VAR 0 5
37141: PUSH
37142: DOUBLE
37143: LD_INT 1
37145: DEC
37146: ST_TO_ADDR
37147: LD_VAR 0 2
37151: PUSH
37152: LD_INT 1
37154: MINUS
37155: PUSH
37156: FOR_TO
37157: IFFALSE 37202
// begin tmp := tmp [ pos [ i ] ] ;
37159: LD_ADDR_VAR 0 6
37163: PUSH
37164: LD_VAR 0 6
37168: PUSH
37169: LD_VAR 0 2
37173: PUSH
37174: LD_VAR 0 5
37178: ARRAY
37179: ARRAY
37180: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37181: LD_ADDR_VAR 0 7
37185: PUSH
37186: LD_VAR 0 7
37190: PUSH
37191: LD_VAR 0 6
37195: PUSH
37196: EMPTY
37197: LIST
37198: ADD
37199: ST_TO_ADDR
// end ;
37200: GO 37156
37202: POP
37203: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37204: LD_ADDR_VAR 0 6
37208: PUSH
37209: LD_VAR 0 6
37213: PPUSH
37214: LD_VAR 0 2
37218: PUSH
37219: LD_VAR 0 2
37223: ARRAY
37224: PPUSH
37225: LD_VAR 0 3
37229: PPUSH
37230: CALL_OW 1
37234: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37235: LD_ADDR_VAR 0 7
37239: PUSH
37240: LD_VAR 0 7
37244: PPUSH
37245: LD_VAR 0 7
37249: PPUSH
37250: LD_VAR 0 6
37254: PPUSH
37255: CALL_OW 1
37259: ST_TO_ADDR
// for i = s_arr downto 2 do
37260: LD_ADDR_VAR 0 5
37264: PUSH
37265: DOUBLE
37266: LD_VAR 0 7
37270: INC
37271: ST_TO_ADDR
37272: LD_INT 2
37274: PUSH
37275: FOR_DOWNTO
37276: IFFALSE 37360
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37278: LD_ADDR_VAR 0 6
37282: PUSH
37283: LD_VAR 0 7
37287: PUSH
37288: LD_VAR 0 5
37292: PUSH
37293: LD_INT 1
37295: MINUS
37296: ARRAY
37297: PPUSH
37298: LD_VAR 0 2
37302: PUSH
37303: LD_VAR 0 5
37307: PUSH
37308: LD_INT 1
37310: MINUS
37311: ARRAY
37312: PPUSH
37313: LD_VAR 0 7
37317: PUSH
37318: LD_VAR 0 5
37322: ARRAY
37323: PPUSH
37324: CALL_OW 1
37328: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37329: LD_ADDR_VAR 0 7
37333: PUSH
37334: LD_VAR 0 7
37338: PPUSH
37339: LD_VAR 0 5
37343: PUSH
37344: LD_INT 1
37346: MINUS
37347: PPUSH
37348: LD_VAR 0 6
37352: PPUSH
37353: CALL_OW 1
37357: ST_TO_ADDR
// end ;
37358: GO 37275
37360: POP
37361: POP
// result := s_arr [ 1 ] ;
37362: LD_ADDR_VAR 0 4
37366: PUSH
37367: LD_VAR 0 7
37371: PUSH
37372: LD_INT 1
37374: ARRAY
37375: ST_TO_ADDR
// end ; end ;
37376: LD_VAR 0 4
37380: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37381: LD_INT 0
37383: PPUSH
37384: PPUSH
// if not list then
37385: LD_VAR 0 1
37389: NOT
37390: IFFALSE 37394
// exit ;
37392: GO 37485
// i := list [ pos1 ] ;
37394: LD_ADDR_VAR 0 5
37398: PUSH
37399: LD_VAR 0 1
37403: PUSH
37404: LD_VAR 0 2
37408: ARRAY
37409: ST_TO_ADDR
// if not i then
37410: LD_VAR 0 5
37414: NOT
37415: IFFALSE 37419
// exit ;
37417: GO 37485
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37419: LD_ADDR_VAR 0 1
37423: PUSH
37424: LD_VAR 0 1
37428: PPUSH
37429: LD_VAR 0 2
37433: PPUSH
37434: LD_VAR 0 1
37438: PUSH
37439: LD_VAR 0 3
37443: ARRAY
37444: PPUSH
37445: CALL_OW 1
37449: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37450: LD_ADDR_VAR 0 1
37454: PUSH
37455: LD_VAR 0 1
37459: PPUSH
37460: LD_VAR 0 3
37464: PPUSH
37465: LD_VAR 0 5
37469: PPUSH
37470: CALL_OW 1
37474: ST_TO_ADDR
// result := list ;
37475: LD_ADDR_VAR 0 4
37479: PUSH
37480: LD_VAR 0 1
37484: ST_TO_ADDR
// end ;
37485: LD_VAR 0 4
37489: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37490: LD_INT 0
37492: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37493: LD_ADDR_VAR 0 5
37497: PUSH
37498: LD_VAR 0 1
37502: PPUSH
37503: CALL_OW 250
37507: PPUSH
37508: LD_VAR 0 1
37512: PPUSH
37513: CALL_OW 251
37517: PPUSH
37518: LD_VAR 0 2
37522: PPUSH
37523: LD_VAR 0 3
37527: PPUSH
37528: LD_VAR 0 4
37532: PPUSH
37533: CALL 37543 0 5
37537: ST_TO_ADDR
// end ;
37538: LD_VAR 0 5
37542: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37543: LD_INT 0
37545: PPUSH
37546: PPUSH
37547: PPUSH
37548: PPUSH
// if not list then
37549: LD_VAR 0 3
37553: NOT
37554: IFFALSE 37558
// exit ;
37556: GO 37946
// result := [ ] ;
37558: LD_ADDR_VAR 0 6
37562: PUSH
37563: EMPTY
37564: ST_TO_ADDR
// for i in list do
37565: LD_ADDR_VAR 0 7
37569: PUSH
37570: LD_VAR 0 3
37574: PUSH
37575: FOR_IN
37576: IFFALSE 37778
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37578: LD_ADDR_VAR 0 9
37582: PUSH
37583: LD_VAR 0 7
37587: PPUSH
37588: LD_VAR 0 1
37592: PPUSH
37593: LD_VAR 0 2
37597: PPUSH
37598: CALL_OW 297
37602: ST_TO_ADDR
// if not result then
37603: LD_VAR 0 6
37607: NOT
37608: IFFALSE 37634
// result := [ [ i , tmp ] ] else
37610: LD_ADDR_VAR 0 6
37614: PUSH
37615: LD_VAR 0 7
37619: PUSH
37620: LD_VAR 0 9
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: EMPTY
37630: LIST
37631: ST_TO_ADDR
37632: GO 37776
// begin if result [ result ] [ 2 ] < tmp then
37634: LD_VAR 0 6
37638: PUSH
37639: LD_VAR 0 6
37643: ARRAY
37644: PUSH
37645: LD_INT 2
37647: ARRAY
37648: PUSH
37649: LD_VAR 0 9
37653: LESS
37654: IFFALSE 37696
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37656: LD_ADDR_VAR 0 6
37660: PUSH
37661: LD_VAR 0 6
37665: PPUSH
37666: LD_VAR 0 6
37670: PUSH
37671: LD_INT 1
37673: PLUS
37674: PPUSH
37675: LD_VAR 0 7
37679: PUSH
37680: LD_VAR 0 9
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PPUSH
37689: CALL_OW 2
37693: ST_TO_ADDR
37694: GO 37776
// for j = 1 to result do
37696: LD_ADDR_VAR 0 8
37700: PUSH
37701: DOUBLE
37702: LD_INT 1
37704: DEC
37705: ST_TO_ADDR
37706: LD_VAR 0 6
37710: PUSH
37711: FOR_TO
37712: IFFALSE 37774
// begin if tmp < result [ j ] [ 2 ] then
37714: LD_VAR 0 9
37718: PUSH
37719: LD_VAR 0 6
37723: PUSH
37724: LD_VAR 0 8
37728: ARRAY
37729: PUSH
37730: LD_INT 2
37732: ARRAY
37733: LESS
37734: IFFALSE 37772
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37736: LD_ADDR_VAR 0 6
37740: PUSH
37741: LD_VAR 0 6
37745: PPUSH
37746: LD_VAR 0 8
37750: PPUSH
37751: LD_VAR 0 7
37755: PUSH
37756: LD_VAR 0 9
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PPUSH
37765: CALL_OW 2
37769: ST_TO_ADDR
// break ;
37770: GO 37774
// end ; end ;
37772: GO 37711
37774: POP
37775: POP
// end ; end ;
37776: GO 37575
37778: POP
37779: POP
// if result and not asc then
37780: LD_VAR 0 6
37784: PUSH
37785: LD_VAR 0 4
37789: NOT
37790: AND
37791: IFFALSE 37866
// begin tmp := result ;
37793: LD_ADDR_VAR 0 9
37797: PUSH
37798: LD_VAR 0 6
37802: ST_TO_ADDR
// for i = tmp downto 1 do
37803: LD_ADDR_VAR 0 7
37807: PUSH
37808: DOUBLE
37809: LD_VAR 0 9
37813: INC
37814: ST_TO_ADDR
37815: LD_INT 1
37817: PUSH
37818: FOR_DOWNTO
37819: IFFALSE 37864
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37821: LD_ADDR_VAR 0 6
37825: PUSH
37826: LD_VAR 0 6
37830: PPUSH
37831: LD_VAR 0 9
37835: PUSH
37836: LD_VAR 0 7
37840: MINUS
37841: PUSH
37842: LD_INT 1
37844: PLUS
37845: PPUSH
37846: LD_VAR 0 9
37850: PUSH
37851: LD_VAR 0 7
37855: ARRAY
37856: PPUSH
37857: CALL_OW 1
37861: ST_TO_ADDR
37862: GO 37818
37864: POP
37865: POP
// end ; tmp := [ ] ;
37866: LD_ADDR_VAR 0 9
37870: PUSH
37871: EMPTY
37872: ST_TO_ADDR
// if mode then
37873: LD_VAR 0 5
37877: IFFALSE 37946
// begin for i = 1 to result do
37879: LD_ADDR_VAR 0 7
37883: PUSH
37884: DOUBLE
37885: LD_INT 1
37887: DEC
37888: ST_TO_ADDR
37889: LD_VAR 0 6
37893: PUSH
37894: FOR_TO
37895: IFFALSE 37934
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37897: LD_ADDR_VAR 0 9
37901: PUSH
37902: LD_VAR 0 9
37906: PPUSH
37907: LD_VAR 0 7
37911: PPUSH
37912: LD_VAR 0 6
37916: PUSH
37917: LD_VAR 0 7
37921: ARRAY
37922: PUSH
37923: LD_INT 1
37925: ARRAY
37926: PPUSH
37927: CALL_OW 1
37931: ST_TO_ADDR
37932: GO 37894
37934: POP
37935: POP
// result := tmp ;
37936: LD_ADDR_VAR 0 6
37940: PUSH
37941: LD_VAR 0 9
37945: ST_TO_ADDR
// end ; end ;
37946: LD_VAR 0 6
37950: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37951: LD_INT 0
37953: PPUSH
37954: PPUSH
37955: PPUSH
37956: PPUSH
37957: PPUSH
37958: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37959: LD_ADDR_VAR 0 5
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: LD_INT 0
37969: PUSH
37970: LD_INT 0
37972: PUSH
37973: EMPTY
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: ST_TO_ADDR
// if not x or not y then
37981: LD_VAR 0 2
37985: NOT
37986: PUSH
37987: LD_VAR 0 3
37991: NOT
37992: OR
37993: IFFALSE 37997
// exit ;
37995: GO 39649
// if not range then
37997: LD_VAR 0 4
38001: NOT
38002: IFFALSE 38012
// range := 10 ;
38004: LD_ADDR_VAR 0 4
38008: PUSH
38009: LD_INT 10
38011: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38012: LD_ADDR_VAR 0 8
38016: PUSH
38017: LD_INT 81
38019: PUSH
38020: LD_VAR 0 1
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 92
38031: PUSH
38032: LD_VAR 0 2
38036: PUSH
38037: LD_VAR 0 3
38041: PUSH
38042: LD_VAR 0 4
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 3
38055: PUSH
38056: LD_INT 21
38058: PUSH
38059: LD_INT 3
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: LIST
38074: PPUSH
38075: CALL_OW 69
38079: ST_TO_ADDR
// if not tmp then
38080: LD_VAR 0 8
38084: NOT
38085: IFFALSE 38089
// exit ;
38087: GO 39649
// for i in tmp do
38089: LD_ADDR_VAR 0 6
38093: PUSH
38094: LD_VAR 0 8
38098: PUSH
38099: FOR_IN
38100: IFFALSE 39624
// begin points := [ 0 , 0 , 0 ] ;
38102: LD_ADDR_VAR 0 9
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: LD_INT 0
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: LIST
38120: ST_TO_ADDR
// bpoints := 1 ;
38121: LD_ADDR_VAR 0 10
38125: PUSH
38126: LD_INT 1
38128: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38129: LD_VAR 0 6
38133: PPUSH
38134: CALL_OW 247
38138: PUSH
38139: LD_INT 1
38141: DOUBLE
38142: EQUAL
38143: IFTRUE 38147
38145: GO 38725
38147: POP
// begin if GetClass ( i ) = 1 then
38148: LD_VAR 0 6
38152: PPUSH
38153: CALL_OW 257
38157: PUSH
38158: LD_INT 1
38160: EQUAL
38161: IFFALSE 38182
// points := [ 10 , 5 , 3 ] ;
38163: LD_ADDR_VAR 0 9
38167: PUSH
38168: LD_INT 10
38170: PUSH
38171: LD_INT 5
38173: PUSH
38174: LD_INT 3
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: LIST
38181: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38182: LD_VAR 0 6
38186: PPUSH
38187: CALL_OW 257
38191: PUSH
38192: LD_INT 2
38194: PUSH
38195: LD_INT 3
38197: PUSH
38198: LD_INT 4
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: LIST
38205: IN
38206: IFFALSE 38227
// points := [ 3 , 2 , 1 ] ;
38208: LD_ADDR_VAR 0 9
38212: PUSH
38213: LD_INT 3
38215: PUSH
38216: LD_INT 2
38218: PUSH
38219: LD_INT 1
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: LIST
38226: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38227: LD_VAR 0 6
38231: PPUSH
38232: CALL_OW 257
38236: PUSH
38237: LD_INT 5
38239: EQUAL
38240: IFFALSE 38261
// points := [ 130 , 5 , 2 ] ;
38242: LD_ADDR_VAR 0 9
38246: PUSH
38247: LD_INT 130
38249: PUSH
38250: LD_INT 5
38252: PUSH
38253: LD_INT 2
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: LIST
38260: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38261: LD_VAR 0 6
38265: PPUSH
38266: CALL_OW 257
38270: PUSH
38271: LD_INT 8
38273: EQUAL
38274: IFFALSE 38295
// points := [ 35 , 35 , 30 ] ;
38276: LD_ADDR_VAR 0 9
38280: PUSH
38281: LD_INT 35
38283: PUSH
38284: LD_INT 35
38286: PUSH
38287: LD_INT 30
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: LIST
38294: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38295: LD_VAR 0 6
38299: PPUSH
38300: CALL_OW 257
38304: PUSH
38305: LD_INT 9
38307: EQUAL
38308: IFFALSE 38329
// points := [ 20 , 55 , 40 ] ;
38310: LD_ADDR_VAR 0 9
38314: PUSH
38315: LD_INT 20
38317: PUSH
38318: LD_INT 55
38320: PUSH
38321: LD_INT 40
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: LIST
38328: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38329: LD_VAR 0 6
38333: PPUSH
38334: CALL_OW 257
38338: PUSH
38339: LD_INT 12
38341: PUSH
38342: LD_INT 16
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: IN
38349: IFFALSE 38370
// points := [ 5 , 3 , 2 ] ;
38351: LD_ADDR_VAR 0 9
38355: PUSH
38356: LD_INT 5
38358: PUSH
38359: LD_INT 3
38361: PUSH
38362: LD_INT 2
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: LIST
38369: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38370: LD_VAR 0 6
38374: PPUSH
38375: CALL_OW 257
38379: PUSH
38380: LD_INT 17
38382: EQUAL
38383: IFFALSE 38404
// points := [ 100 , 50 , 75 ] ;
38385: LD_ADDR_VAR 0 9
38389: PUSH
38390: LD_INT 100
38392: PUSH
38393: LD_INT 50
38395: PUSH
38396: LD_INT 75
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: LIST
38403: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38404: LD_VAR 0 6
38408: PPUSH
38409: CALL_OW 257
38413: PUSH
38414: LD_INT 15
38416: EQUAL
38417: IFFALSE 38438
// points := [ 10 , 5 , 3 ] ;
38419: LD_ADDR_VAR 0 9
38423: PUSH
38424: LD_INT 10
38426: PUSH
38427: LD_INT 5
38429: PUSH
38430: LD_INT 3
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: LIST
38437: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38438: LD_VAR 0 6
38442: PPUSH
38443: CALL_OW 257
38447: PUSH
38448: LD_INT 14
38450: EQUAL
38451: IFFALSE 38472
// points := [ 10 , 0 , 0 ] ;
38453: LD_ADDR_VAR 0 9
38457: PUSH
38458: LD_INT 10
38460: PUSH
38461: LD_INT 0
38463: PUSH
38464: LD_INT 0
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: LIST
38471: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38472: LD_VAR 0 6
38476: PPUSH
38477: CALL_OW 257
38481: PUSH
38482: LD_INT 11
38484: EQUAL
38485: IFFALSE 38506
// points := [ 30 , 10 , 5 ] ;
38487: LD_ADDR_VAR 0 9
38491: PUSH
38492: LD_INT 30
38494: PUSH
38495: LD_INT 10
38497: PUSH
38498: LD_INT 5
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: LIST
38505: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38506: LD_VAR 0 1
38510: PPUSH
38511: LD_INT 5
38513: PPUSH
38514: CALL_OW 321
38518: PUSH
38519: LD_INT 2
38521: EQUAL
38522: IFFALSE 38539
// bpoints := bpoints * 1.8 ;
38524: LD_ADDR_VAR 0 10
38528: PUSH
38529: LD_VAR 0 10
38533: PUSH
38534: LD_REAL  1.80000000000000E+0000
38537: MUL
38538: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38539: LD_VAR 0 6
38543: PPUSH
38544: CALL_OW 257
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: LD_INT 2
38554: PUSH
38555: LD_INT 3
38557: PUSH
38558: LD_INT 4
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: IN
38567: PUSH
38568: LD_VAR 0 1
38572: PPUSH
38573: LD_INT 51
38575: PPUSH
38576: CALL_OW 321
38580: PUSH
38581: LD_INT 2
38583: EQUAL
38584: AND
38585: IFFALSE 38602
// bpoints := bpoints * 1.2 ;
38587: LD_ADDR_VAR 0 10
38591: PUSH
38592: LD_VAR 0 10
38596: PUSH
38597: LD_REAL  1.20000000000000E+0000
38600: MUL
38601: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38602: LD_VAR 0 6
38606: PPUSH
38607: CALL_OW 257
38611: PUSH
38612: LD_INT 5
38614: PUSH
38615: LD_INT 7
38617: PUSH
38618: LD_INT 9
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: LIST
38625: IN
38626: PUSH
38627: LD_VAR 0 1
38631: PPUSH
38632: LD_INT 52
38634: PPUSH
38635: CALL_OW 321
38639: PUSH
38640: LD_INT 2
38642: EQUAL
38643: AND
38644: IFFALSE 38661
// bpoints := bpoints * 1.5 ;
38646: LD_ADDR_VAR 0 10
38650: PUSH
38651: LD_VAR 0 10
38655: PUSH
38656: LD_REAL  1.50000000000000E+0000
38659: MUL
38660: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38661: LD_VAR 0 1
38665: PPUSH
38666: LD_INT 66
38668: PPUSH
38669: CALL_OW 321
38673: PUSH
38674: LD_INT 2
38676: EQUAL
38677: IFFALSE 38694
// bpoints := bpoints * 1.1 ;
38679: LD_ADDR_VAR 0 10
38683: PUSH
38684: LD_VAR 0 10
38688: PUSH
38689: LD_REAL  1.10000000000000E+0000
38692: MUL
38693: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38694: LD_ADDR_VAR 0 10
38698: PUSH
38699: LD_VAR 0 10
38703: PUSH
38704: LD_VAR 0 6
38708: PPUSH
38709: LD_INT 1
38711: PPUSH
38712: CALL_OW 259
38716: PUSH
38717: LD_REAL  1.15000000000000E+0000
38720: MUL
38721: MUL
38722: ST_TO_ADDR
// end ; unit_vehicle :
38723: GO 39553
38725: LD_INT 2
38727: DOUBLE
38728: EQUAL
38729: IFTRUE 38733
38731: GO 39541
38733: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38734: LD_VAR 0 6
38738: PPUSH
38739: CALL_OW 264
38743: PUSH
38744: LD_INT 2
38746: PUSH
38747: LD_INT 42
38749: PUSH
38750: LD_INT 24
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: LIST
38757: IN
38758: IFFALSE 38779
// points := [ 25 , 5 , 3 ] ;
38760: LD_ADDR_VAR 0 9
38764: PUSH
38765: LD_INT 25
38767: PUSH
38768: LD_INT 5
38770: PUSH
38771: LD_INT 3
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: LIST
38778: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38779: LD_VAR 0 6
38783: PPUSH
38784: CALL_OW 264
38788: PUSH
38789: LD_INT 4
38791: PUSH
38792: LD_INT 43
38794: PUSH
38795: LD_INT 25
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: LIST
38802: IN
38803: IFFALSE 38824
// points := [ 40 , 15 , 5 ] ;
38805: LD_ADDR_VAR 0 9
38809: PUSH
38810: LD_INT 40
38812: PUSH
38813: LD_INT 15
38815: PUSH
38816: LD_INT 5
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: LIST
38823: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38824: LD_VAR 0 6
38828: PPUSH
38829: CALL_OW 264
38833: PUSH
38834: LD_INT 3
38836: PUSH
38837: LD_INT 23
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: IN
38844: IFFALSE 38865
// points := [ 7 , 25 , 8 ] ;
38846: LD_ADDR_VAR 0 9
38850: PUSH
38851: LD_INT 7
38853: PUSH
38854: LD_INT 25
38856: PUSH
38857: LD_INT 8
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: LIST
38864: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38865: LD_VAR 0 6
38869: PPUSH
38870: CALL_OW 264
38874: PUSH
38875: LD_INT 5
38877: PUSH
38878: LD_INT 27
38880: PUSH
38881: LD_INT 44
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: LIST
38888: IN
38889: IFFALSE 38910
// points := [ 14 , 50 , 16 ] ;
38891: LD_ADDR_VAR 0 9
38895: PUSH
38896: LD_INT 14
38898: PUSH
38899: LD_INT 50
38901: PUSH
38902: LD_INT 16
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: LIST
38909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38910: LD_VAR 0 6
38914: PPUSH
38915: CALL_OW 264
38919: PUSH
38920: LD_INT 6
38922: PUSH
38923: LD_INT 46
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: IN
38930: IFFALSE 38951
// points := [ 32 , 120 , 70 ] ;
38932: LD_ADDR_VAR 0 9
38936: PUSH
38937: LD_INT 32
38939: PUSH
38940: LD_INT 120
38942: PUSH
38943: LD_INT 70
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: LIST
38950: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38951: LD_VAR 0 6
38955: PPUSH
38956: CALL_OW 264
38960: PUSH
38961: LD_INT 7
38963: PUSH
38964: LD_INT 28
38966: PUSH
38967: LD_INT 45
38969: PUSH
38970: LD_EXP 48
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: IN
38981: IFFALSE 39002
// points := [ 35 , 20 , 45 ] ;
38983: LD_ADDR_VAR 0 9
38987: PUSH
38988: LD_INT 35
38990: PUSH
38991: LD_INT 20
38993: PUSH
38994: LD_INT 45
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: LIST
39001: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39002: LD_VAR 0 6
39006: PPUSH
39007: CALL_OW 264
39011: PUSH
39012: LD_INT 47
39014: PUSH
39015: EMPTY
39016: LIST
39017: IN
39018: IFFALSE 39039
// points := [ 67 , 45 , 75 ] ;
39020: LD_ADDR_VAR 0 9
39024: PUSH
39025: LD_INT 67
39027: PUSH
39028: LD_INT 45
39030: PUSH
39031: LD_INT 75
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: LIST
39038: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39039: LD_VAR 0 6
39043: PPUSH
39044: CALL_OW 264
39048: PUSH
39049: LD_INT 26
39051: PUSH
39052: EMPTY
39053: LIST
39054: IN
39055: IFFALSE 39076
// points := [ 120 , 30 , 80 ] ;
39057: LD_ADDR_VAR 0 9
39061: PUSH
39062: LD_INT 120
39064: PUSH
39065: LD_INT 30
39067: PUSH
39068: LD_INT 80
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: LIST
39075: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39076: LD_VAR 0 6
39080: PPUSH
39081: CALL_OW 264
39085: PUSH
39086: LD_INT 22
39088: PUSH
39089: EMPTY
39090: LIST
39091: IN
39092: IFFALSE 39113
// points := [ 40 , 1 , 1 ] ;
39094: LD_ADDR_VAR 0 9
39098: PUSH
39099: LD_INT 40
39101: PUSH
39102: LD_INT 1
39104: PUSH
39105: LD_INT 1
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: LIST
39112: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39113: LD_VAR 0 6
39117: PPUSH
39118: CALL_OW 264
39122: PUSH
39123: LD_INT 29
39125: PUSH
39126: EMPTY
39127: LIST
39128: IN
39129: IFFALSE 39150
// points := [ 70 , 200 , 400 ] ;
39131: LD_ADDR_VAR 0 9
39135: PUSH
39136: LD_INT 70
39138: PUSH
39139: LD_INT 200
39141: PUSH
39142: LD_INT 400
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: LIST
39149: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39150: LD_VAR 0 6
39154: PPUSH
39155: CALL_OW 264
39159: PUSH
39160: LD_INT 14
39162: PUSH
39163: LD_INT 53
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: IN
39170: IFFALSE 39191
// points := [ 40 , 10 , 20 ] ;
39172: LD_ADDR_VAR 0 9
39176: PUSH
39177: LD_INT 40
39179: PUSH
39180: LD_INT 10
39182: PUSH
39183: LD_INT 20
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: LIST
39190: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39191: LD_VAR 0 6
39195: PPUSH
39196: CALL_OW 264
39200: PUSH
39201: LD_INT 9
39203: PUSH
39204: EMPTY
39205: LIST
39206: IN
39207: IFFALSE 39228
// points := [ 5 , 70 , 20 ] ;
39209: LD_ADDR_VAR 0 9
39213: PUSH
39214: LD_INT 5
39216: PUSH
39217: LD_INT 70
39219: PUSH
39220: LD_INT 20
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: LIST
39227: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39228: LD_VAR 0 6
39232: PPUSH
39233: CALL_OW 264
39237: PUSH
39238: LD_INT 10
39240: PUSH
39241: EMPTY
39242: LIST
39243: IN
39244: IFFALSE 39265
// points := [ 35 , 110 , 70 ] ;
39246: LD_ADDR_VAR 0 9
39250: PUSH
39251: LD_INT 35
39253: PUSH
39254: LD_INT 110
39256: PUSH
39257: LD_INT 70
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: LIST
39264: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39265: LD_VAR 0 6
39269: PPUSH
39270: CALL_OW 265
39274: PUSH
39275: LD_INT 25
39277: EQUAL
39278: IFFALSE 39299
// points := [ 80 , 65 , 100 ] ;
39280: LD_ADDR_VAR 0 9
39284: PUSH
39285: LD_INT 80
39287: PUSH
39288: LD_INT 65
39290: PUSH
39291: LD_INT 100
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: LIST
39298: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39299: LD_VAR 0 6
39303: PPUSH
39304: CALL_OW 263
39308: PUSH
39309: LD_INT 1
39311: EQUAL
39312: IFFALSE 39347
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39314: LD_ADDR_VAR 0 10
39318: PUSH
39319: LD_VAR 0 10
39323: PUSH
39324: LD_VAR 0 6
39328: PPUSH
39329: CALL_OW 311
39333: PPUSH
39334: LD_INT 3
39336: PPUSH
39337: CALL_OW 259
39341: PUSH
39342: LD_INT 4
39344: MUL
39345: MUL
39346: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39347: LD_VAR 0 6
39351: PPUSH
39352: CALL_OW 263
39356: PUSH
39357: LD_INT 2
39359: EQUAL
39360: IFFALSE 39411
// begin j := IsControledBy ( i ) ;
39362: LD_ADDR_VAR 0 7
39366: PUSH
39367: LD_VAR 0 6
39371: PPUSH
39372: CALL_OW 312
39376: ST_TO_ADDR
// if j then
39377: LD_VAR 0 7
39381: IFFALSE 39411
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39383: LD_ADDR_VAR 0 10
39387: PUSH
39388: LD_VAR 0 10
39392: PUSH
39393: LD_VAR 0 7
39397: PPUSH
39398: LD_INT 3
39400: PPUSH
39401: CALL_OW 259
39405: PUSH
39406: LD_INT 3
39408: MUL
39409: MUL
39410: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39411: LD_VAR 0 6
39415: PPUSH
39416: CALL_OW 264
39420: PUSH
39421: LD_INT 5
39423: PUSH
39424: LD_INT 6
39426: PUSH
39427: LD_INT 46
39429: PUSH
39430: LD_INT 44
39432: PUSH
39433: LD_INT 47
39435: PUSH
39436: LD_INT 45
39438: PUSH
39439: LD_INT 28
39441: PUSH
39442: LD_INT 7
39444: PUSH
39445: LD_INT 27
39447: PUSH
39448: LD_INT 29
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: IN
39463: PUSH
39464: LD_VAR 0 1
39468: PPUSH
39469: LD_INT 52
39471: PPUSH
39472: CALL_OW 321
39476: PUSH
39477: LD_INT 2
39479: EQUAL
39480: AND
39481: IFFALSE 39498
// bpoints := bpoints * 1.2 ;
39483: LD_ADDR_VAR 0 10
39487: PUSH
39488: LD_VAR 0 10
39492: PUSH
39493: LD_REAL  1.20000000000000E+0000
39496: MUL
39497: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39498: LD_VAR 0 6
39502: PPUSH
39503: CALL_OW 264
39507: PUSH
39508: LD_INT 6
39510: PUSH
39511: LD_INT 46
39513: PUSH
39514: LD_INT 47
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: LIST
39521: IN
39522: IFFALSE 39539
// bpoints := bpoints * 1.2 ;
39524: LD_ADDR_VAR 0 10
39528: PUSH
39529: LD_VAR 0 10
39533: PUSH
39534: LD_REAL  1.20000000000000E+0000
39537: MUL
39538: ST_TO_ADDR
// end ; unit_building :
39539: GO 39553
39541: LD_INT 3
39543: DOUBLE
39544: EQUAL
39545: IFTRUE 39549
39547: GO 39552
39549: POP
// ; end ;
39550: GO 39553
39552: POP
// for j = 1 to 3 do
39553: LD_ADDR_VAR 0 7
39557: PUSH
39558: DOUBLE
39559: LD_INT 1
39561: DEC
39562: ST_TO_ADDR
39563: LD_INT 3
39565: PUSH
39566: FOR_TO
39567: IFFALSE 39620
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39569: LD_ADDR_VAR 0 5
39573: PUSH
39574: LD_VAR 0 5
39578: PPUSH
39579: LD_VAR 0 7
39583: PPUSH
39584: LD_VAR 0 5
39588: PUSH
39589: LD_VAR 0 7
39593: ARRAY
39594: PUSH
39595: LD_VAR 0 9
39599: PUSH
39600: LD_VAR 0 7
39604: ARRAY
39605: PUSH
39606: LD_VAR 0 10
39610: MUL
39611: PLUS
39612: PPUSH
39613: CALL_OW 1
39617: ST_TO_ADDR
39618: GO 39566
39620: POP
39621: POP
// end ;
39622: GO 38099
39624: POP
39625: POP
// result := Replace ( result , 4 , tmp ) ;
39626: LD_ADDR_VAR 0 5
39630: PUSH
39631: LD_VAR 0 5
39635: PPUSH
39636: LD_INT 4
39638: PPUSH
39639: LD_VAR 0 8
39643: PPUSH
39644: CALL_OW 1
39648: ST_TO_ADDR
// end ;
39649: LD_VAR 0 5
39653: RET
// export function DangerAtRange ( unit , range ) ; begin
39654: LD_INT 0
39656: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39657: LD_ADDR_VAR 0 3
39661: PUSH
39662: LD_VAR 0 1
39666: PPUSH
39667: CALL_OW 255
39671: PPUSH
39672: LD_VAR 0 1
39676: PPUSH
39677: CALL_OW 250
39681: PPUSH
39682: LD_VAR 0 1
39686: PPUSH
39687: CALL_OW 251
39691: PPUSH
39692: LD_VAR 0 2
39696: PPUSH
39697: CALL 37951 0 4
39701: ST_TO_ADDR
// end ;
39702: LD_VAR 0 3
39706: RET
// export function DangerInArea ( side , area ) ; begin
39707: LD_INT 0
39709: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39710: LD_ADDR_VAR 0 3
39714: PUSH
39715: LD_VAR 0 2
39719: PPUSH
39720: LD_INT 81
39722: PUSH
39723: LD_VAR 0 1
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PPUSH
39732: CALL_OW 70
39736: ST_TO_ADDR
// end ;
39737: LD_VAR 0 3
39741: RET
// export function IsExtension ( b ) ; begin
39742: LD_INT 0
39744: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39745: LD_ADDR_VAR 0 2
39749: PUSH
39750: LD_VAR 0 1
39754: PUSH
39755: LD_INT 23
39757: PUSH
39758: LD_INT 20
39760: PUSH
39761: LD_INT 22
39763: PUSH
39764: LD_INT 17
39766: PUSH
39767: LD_INT 24
39769: PUSH
39770: LD_INT 21
39772: PUSH
39773: LD_INT 19
39775: PUSH
39776: LD_INT 16
39778: PUSH
39779: LD_INT 25
39781: PUSH
39782: LD_INT 18
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: IN
39797: ST_TO_ADDR
// end ;
39798: LD_VAR 0 2
39802: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39803: LD_INT 0
39805: PPUSH
39806: PPUSH
39807: PPUSH
// result := [ ] ;
39808: LD_ADDR_VAR 0 4
39812: PUSH
39813: EMPTY
39814: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39815: LD_ADDR_VAR 0 5
39819: PUSH
39820: LD_VAR 0 2
39824: PPUSH
39825: LD_INT 21
39827: PUSH
39828: LD_INT 3
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PPUSH
39835: CALL_OW 70
39839: ST_TO_ADDR
// if not tmp then
39840: LD_VAR 0 5
39844: NOT
39845: IFFALSE 39849
// exit ;
39847: GO 39913
// if checkLink then
39849: LD_VAR 0 3
39853: IFFALSE 39903
// begin for i in tmp do
39855: LD_ADDR_VAR 0 6
39859: PUSH
39860: LD_VAR 0 5
39864: PUSH
39865: FOR_IN
39866: IFFALSE 39901
// if GetBase ( i ) <> base then
39868: LD_VAR 0 6
39872: PPUSH
39873: CALL_OW 274
39877: PUSH
39878: LD_VAR 0 1
39882: NONEQUAL
39883: IFFALSE 39899
// ComLinkToBase ( base , i ) ;
39885: LD_VAR 0 1
39889: PPUSH
39890: LD_VAR 0 6
39894: PPUSH
39895: CALL_OW 169
39899: GO 39865
39901: POP
39902: POP
// end ; result := tmp ;
39903: LD_ADDR_VAR 0 4
39907: PUSH
39908: LD_VAR 0 5
39912: ST_TO_ADDR
// end ;
39913: LD_VAR 0 4
39917: RET
// export function ComComplete ( units , b ) ; var i ; begin
39918: LD_INT 0
39920: PPUSH
39921: PPUSH
// if not units then
39922: LD_VAR 0 1
39926: NOT
39927: IFFALSE 39931
// exit ;
39929: GO 40021
// for i in units do
39931: LD_ADDR_VAR 0 4
39935: PUSH
39936: LD_VAR 0 1
39940: PUSH
39941: FOR_IN
39942: IFFALSE 40019
// if BuildingStatus ( b ) = bs_build then
39944: LD_VAR 0 2
39948: PPUSH
39949: CALL_OW 461
39953: PUSH
39954: LD_INT 1
39956: EQUAL
39957: IFFALSE 40017
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39959: LD_VAR 0 4
39963: PPUSH
39964: LD_STRING h
39966: PUSH
39967: LD_VAR 0 2
39971: PPUSH
39972: CALL_OW 250
39976: PUSH
39977: LD_VAR 0 2
39981: PPUSH
39982: CALL_OW 251
39986: PUSH
39987: LD_VAR 0 2
39991: PUSH
39992: LD_INT 0
39994: PUSH
39995: LD_INT 0
39997: PUSH
39998: LD_INT 0
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: PUSH
40010: EMPTY
40011: LIST
40012: PPUSH
40013: CALL_OW 446
40017: GO 39941
40019: POP
40020: POP
// end ;
40021: LD_VAR 0 3
40025: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40026: LD_INT 0
40028: PPUSH
40029: PPUSH
40030: PPUSH
40031: PPUSH
40032: PPUSH
40033: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40034: LD_VAR 0 1
40038: NOT
40039: PUSH
40040: LD_VAR 0 1
40044: PPUSH
40045: CALL_OW 263
40049: PUSH
40050: LD_INT 2
40052: NONEQUAL
40053: OR
40054: IFFALSE 40058
// exit ;
40056: GO 40374
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40058: LD_ADDR_VAR 0 6
40062: PUSH
40063: LD_INT 22
40065: PUSH
40066: LD_VAR 0 1
40070: PPUSH
40071: CALL_OW 255
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 2
40082: PUSH
40083: LD_INT 30
40085: PUSH
40086: LD_INT 36
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 34
40095: PUSH
40096: LD_INT 31
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: LIST
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PPUSH
40112: CALL_OW 69
40116: ST_TO_ADDR
// if not tmp then
40117: LD_VAR 0 6
40121: NOT
40122: IFFALSE 40126
// exit ;
40124: GO 40374
// result := [ ] ;
40126: LD_ADDR_VAR 0 2
40130: PUSH
40131: EMPTY
40132: ST_TO_ADDR
// for i in tmp do
40133: LD_ADDR_VAR 0 3
40137: PUSH
40138: LD_VAR 0 6
40142: PUSH
40143: FOR_IN
40144: IFFALSE 40215
// begin t := UnitsInside ( i ) ;
40146: LD_ADDR_VAR 0 4
40150: PUSH
40151: LD_VAR 0 3
40155: PPUSH
40156: CALL_OW 313
40160: ST_TO_ADDR
// if t then
40161: LD_VAR 0 4
40165: IFFALSE 40213
// for j in t do
40167: LD_ADDR_VAR 0 7
40171: PUSH
40172: LD_VAR 0 4
40176: PUSH
40177: FOR_IN
40178: IFFALSE 40211
// result := Replace ( result , result + 1 , j ) ;
40180: LD_ADDR_VAR 0 2
40184: PUSH
40185: LD_VAR 0 2
40189: PPUSH
40190: LD_VAR 0 2
40194: PUSH
40195: LD_INT 1
40197: PLUS
40198: PPUSH
40199: LD_VAR 0 7
40203: PPUSH
40204: CALL_OW 1
40208: ST_TO_ADDR
40209: GO 40177
40211: POP
40212: POP
// end ;
40213: GO 40143
40215: POP
40216: POP
// if not result then
40217: LD_VAR 0 2
40221: NOT
40222: IFFALSE 40226
// exit ;
40224: GO 40374
// mech := result [ 1 ] ;
40226: LD_ADDR_VAR 0 5
40230: PUSH
40231: LD_VAR 0 2
40235: PUSH
40236: LD_INT 1
40238: ARRAY
40239: ST_TO_ADDR
// if result > 1 then
40240: LD_VAR 0 2
40244: PUSH
40245: LD_INT 1
40247: GREATER
40248: IFFALSE 40360
// begin for i = 2 to result do
40250: LD_ADDR_VAR 0 3
40254: PUSH
40255: DOUBLE
40256: LD_INT 2
40258: DEC
40259: ST_TO_ADDR
40260: LD_VAR 0 2
40264: PUSH
40265: FOR_TO
40266: IFFALSE 40358
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40268: LD_ADDR_VAR 0 4
40272: PUSH
40273: LD_VAR 0 2
40277: PUSH
40278: LD_VAR 0 3
40282: ARRAY
40283: PPUSH
40284: LD_INT 3
40286: PPUSH
40287: CALL_OW 259
40291: PUSH
40292: LD_VAR 0 2
40296: PUSH
40297: LD_VAR 0 3
40301: ARRAY
40302: PPUSH
40303: CALL_OW 432
40307: MINUS
40308: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40309: LD_VAR 0 4
40313: PUSH
40314: LD_VAR 0 5
40318: PPUSH
40319: LD_INT 3
40321: PPUSH
40322: CALL_OW 259
40326: PUSH
40327: LD_VAR 0 5
40331: PPUSH
40332: CALL_OW 432
40336: MINUS
40337: GREATEREQUAL
40338: IFFALSE 40356
// mech := result [ i ] ;
40340: LD_ADDR_VAR 0 5
40344: PUSH
40345: LD_VAR 0 2
40349: PUSH
40350: LD_VAR 0 3
40354: ARRAY
40355: ST_TO_ADDR
// end ;
40356: GO 40265
40358: POP
40359: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40360: LD_VAR 0 1
40364: PPUSH
40365: LD_VAR 0 5
40369: PPUSH
40370: CALL_OW 135
// end ;
40374: LD_VAR 0 2
40378: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40379: LD_INT 0
40381: PPUSH
40382: PPUSH
40383: PPUSH
40384: PPUSH
40385: PPUSH
40386: PPUSH
40387: PPUSH
40388: PPUSH
40389: PPUSH
40390: PPUSH
40391: PPUSH
40392: PPUSH
40393: PPUSH
// result := [ ] ;
40394: LD_ADDR_VAR 0 7
40398: PUSH
40399: EMPTY
40400: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40401: LD_VAR 0 1
40405: PPUSH
40406: CALL_OW 266
40410: PUSH
40411: LD_INT 0
40413: PUSH
40414: LD_INT 1
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: IN
40421: NOT
40422: IFFALSE 40426
// exit ;
40424: GO 42060
// if name then
40426: LD_VAR 0 3
40430: IFFALSE 40446
// SetBName ( base_dep , name ) ;
40432: LD_VAR 0 1
40436: PPUSH
40437: LD_VAR 0 3
40441: PPUSH
40442: CALL_OW 500
// base := GetBase ( base_dep ) ;
40446: LD_ADDR_VAR 0 15
40450: PUSH
40451: LD_VAR 0 1
40455: PPUSH
40456: CALL_OW 274
40460: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40461: LD_ADDR_VAR 0 16
40465: PUSH
40466: LD_VAR 0 1
40470: PPUSH
40471: CALL_OW 255
40475: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40476: LD_ADDR_VAR 0 17
40480: PUSH
40481: LD_VAR 0 1
40485: PPUSH
40486: CALL_OW 248
40490: ST_TO_ADDR
// if sources then
40491: LD_VAR 0 5
40495: IFFALSE 40542
// for i = 1 to 3 do
40497: LD_ADDR_VAR 0 8
40501: PUSH
40502: DOUBLE
40503: LD_INT 1
40505: DEC
40506: ST_TO_ADDR
40507: LD_INT 3
40509: PUSH
40510: FOR_TO
40511: IFFALSE 40540
// AddResourceType ( base , i , sources [ i ] ) ;
40513: LD_VAR 0 15
40517: PPUSH
40518: LD_VAR 0 8
40522: PPUSH
40523: LD_VAR 0 5
40527: PUSH
40528: LD_VAR 0 8
40532: ARRAY
40533: PPUSH
40534: CALL_OW 276
40538: GO 40510
40540: POP
40541: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40542: LD_ADDR_VAR 0 18
40546: PUSH
40547: LD_VAR 0 15
40551: PPUSH
40552: LD_VAR 0 2
40556: PPUSH
40557: LD_INT 1
40559: PPUSH
40560: CALL 39803 0 3
40564: ST_TO_ADDR
// InitHc ;
40565: CALL_OW 19
// InitUc ;
40569: CALL_OW 18
// uc_side := side ;
40573: LD_ADDR_OWVAR 20
40577: PUSH
40578: LD_VAR 0 16
40582: ST_TO_ADDR
// uc_nation := nation ;
40583: LD_ADDR_OWVAR 21
40587: PUSH
40588: LD_VAR 0 17
40592: ST_TO_ADDR
// if buildings then
40593: LD_VAR 0 18
40597: IFFALSE 41919
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40599: LD_ADDR_VAR 0 19
40603: PUSH
40604: LD_VAR 0 18
40608: PPUSH
40609: LD_INT 2
40611: PUSH
40612: LD_INT 30
40614: PUSH
40615: LD_INT 29
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 30
40624: PUSH
40625: LD_INT 30
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: LIST
40636: PPUSH
40637: CALL_OW 72
40641: ST_TO_ADDR
// if tmp then
40642: LD_VAR 0 19
40646: IFFALSE 40694
// for i in tmp do
40648: LD_ADDR_VAR 0 8
40652: PUSH
40653: LD_VAR 0 19
40657: PUSH
40658: FOR_IN
40659: IFFALSE 40692
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40661: LD_VAR 0 8
40665: PPUSH
40666: CALL_OW 250
40670: PPUSH
40671: LD_VAR 0 8
40675: PPUSH
40676: CALL_OW 251
40680: PPUSH
40681: LD_VAR 0 16
40685: PPUSH
40686: CALL_OW 441
40690: GO 40658
40692: POP
40693: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40694: LD_VAR 0 18
40698: PPUSH
40699: LD_INT 2
40701: PUSH
40702: LD_INT 30
40704: PUSH
40705: LD_INT 32
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 30
40714: PUSH
40715: LD_INT 33
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: LIST
40726: PPUSH
40727: CALL_OW 72
40731: IFFALSE 40819
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40733: LD_ADDR_VAR 0 8
40737: PUSH
40738: LD_VAR 0 18
40742: PPUSH
40743: LD_INT 2
40745: PUSH
40746: LD_INT 30
40748: PUSH
40749: LD_INT 32
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 30
40758: PUSH
40759: LD_INT 33
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: LIST
40770: PPUSH
40771: CALL_OW 72
40775: PUSH
40776: FOR_IN
40777: IFFALSE 40817
// begin if not GetBWeapon ( i ) then
40779: LD_VAR 0 8
40783: PPUSH
40784: CALL_OW 269
40788: NOT
40789: IFFALSE 40815
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40791: LD_VAR 0 8
40795: PPUSH
40796: LD_VAR 0 8
40800: PPUSH
40801: LD_VAR 0 2
40805: PPUSH
40806: CALL 42065 0 2
40810: PPUSH
40811: CALL_OW 431
// end ;
40815: GO 40776
40817: POP
40818: POP
// end ; for i = 1 to personel do
40819: LD_ADDR_VAR 0 8
40823: PUSH
40824: DOUBLE
40825: LD_INT 1
40827: DEC
40828: ST_TO_ADDR
40829: LD_VAR 0 6
40833: PUSH
40834: FOR_TO
40835: IFFALSE 41899
// begin if i > 4 then
40837: LD_VAR 0 8
40841: PUSH
40842: LD_INT 4
40844: GREATER
40845: IFFALSE 40849
// break ;
40847: GO 41899
// case i of 1 :
40849: LD_VAR 0 8
40853: PUSH
40854: LD_INT 1
40856: DOUBLE
40857: EQUAL
40858: IFTRUE 40862
40860: GO 40942
40862: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40863: LD_ADDR_VAR 0 12
40867: PUSH
40868: LD_VAR 0 18
40872: PPUSH
40873: LD_INT 22
40875: PUSH
40876: LD_VAR 0 16
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 58
40887: PUSH
40888: EMPTY
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: PUSH
40894: LD_INT 30
40896: PUSH
40897: LD_INT 32
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 30
40906: PUSH
40907: LD_INT 4
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 30
40916: PUSH
40917: LD_INT 5
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: LIST
40934: PPUSH
40935: CALL_OW 72
40939: ST_TO_ADDR
40940: GO 41164
40942: LD_INT 2
40944: DOUBLE
40945: EQUAL
40946: IFTRUE 40950
40948: GO 41012
40950: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40951: LD_ADDR_VAR 0 12
40955: PUSH
40956: LD_VAR 0 18
40960: PPUSH
40961: LD_INT 22
40963: PUSH
40964: LD_VAR 0 16
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 2
40975: PUSH
40976: LD_INT 30
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 30
40988: PUSH
40989: LD_INT 1
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: LIST
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PPUSH
41005: CALL_OW 72
41009: ST_TO_ADDR
41010: GO 41164
41012: LD_INT 3
41014: DOUBLE
41015: EQUAL
41016: IFTRUE 41020
41018: GO 41082
41020: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41021: LD_ADDR_VAR 0 12
41025: PUSH
41026: LD_VAR 0 18
41030: PPUSH
41031: LD_INT 22
41033: PUSH
41034: LD_VAR 0 16
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 2
41045: PUSH
41046: LD_INT 30
41048: PUSH
41049: LD_INT 2
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 30
41058: PUSH
41059: LD_INT 3
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: LIST
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PPUSH
41075: CALL_OW 72
41079: ST_TO_ADDR
41080: GO 41164
41082: LD_INT 4
41084: DOUBLE
41085: EQUAL
41086: IFTRUE 41090
41088: GO 41163
41090: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41091: LD_ADDR_VAR 0 12
41095: PUSH
41096: LD_VAR 0 18
41100: PPUSH
41101: LD_INT 22
41103: PUSH
41104: LD_VAR 0 16
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 2
41115: PUSH
41116: LD_INT 30
41118: PUSH
41119: LD_INT 6
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 30
41128: PUSH
41129: LD_INT 7
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 30
41138: PUSH
41139: LD_INT 8
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PPUSH
41156: CALL_OW 72
41160: ST_TO_ADDR
41161: GO 41164
41163: POP
// if i = 1 then
41164: LD_VAR 0 8
41168: PUSH
41169: LD_INT 1
41171: EQUAL
41172: IFFALSE 41283
// begin tmp := [ ] ;
41174: LD_ADDR_VAR 0 19
41178: PUSH
41179: EMPTY
41180: ST_TO_ADDR
// for j in f do
41181: LD_ADDR_VAR 0 9
41185: PUSH
41186: LD_VAR 0 12
41190: PUSH
41191: FOR_IN
41192: IFFALSE 41265
// if GetBType ( j ) = b_bunker then
41194: LD_VAR 0 9
41198: PPUSH
41199: CALL_OW 266
41203: PUSH
41204: LD_INT 32
41206: EQUAL
41207: IFFALSE 41234
// tmp := Insert ( tmp , 1 , j ) else
41209: LD_ADDR_VAR 0 19
41213: PUSH
41214: LD_VAR 0 19
41218: PPUSH
41219: LD_INT 1
41221: PPUSH
41222: LD_VAR 0 9
41226: PPUSH
41227: CALL_OW 2
41231: ST_TO_ADDR
41232: GO 41263
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41234: LD_ADDR_VAR 0 19
41238: PUSH
41239: LD_VAR 0 19
41243: PPUSH
41244: LD_VAR 0 19
41248: PUSH
41249: LD_INT 1
41251: PLUS
41252: PPUSH
41253: LD_VAR 0 9
41257: PPUSH
41258: CALL_OW 2
41262: ST_TO_ADDR
41263: GO 41191
41265: POP
41266: POP
// if tmp then
41267: LD_VAR 0 19
41271: IFFALSE 41283
// f := tmp ;
41273: LD_ADDR_VAR 0 12
41277: PUSH
41278: LD_VAR 0 19
41282: ST_TO_ADDR
// end ; x := personel [ i ] ;
41283: LD_ADDR_VAR 0 13
41287: PUSH
41288: LD_VAR 0 6
41292: PUSH
41293: LD_VAR 0 8
41297: ARRAY
41298: ST_TO_ADDR
// if x = - 1 then
41299: LD_VAR 0 13
41303: PUSH
41304: LD_INT 1
41306: NEG
41307: EQUAL
41308: IFFALSE 41517
// begin for j in f do
41310: LD_ADDR_VAR 0 9
41314: PUSH
41315: LD_VAR 0 12
41319: PUSH
41320: FOR_IN
41321: IFFALSE 41513
// repeat InitHc ;
41323: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41327: LD_VAR 0 9
41331: PPUSH
41332: CALL_OW 266
41336: PUSH
41337: LD_INT 5
41339: EQUAL
41340: IFFALSE 41410
// begin if UnitsInside ( j ) < 3 then
41342: LD_VAR 0 9
41346: PPUSH
41347: CALL_OW 313
41351: PUSH
41352: LD_INT 3
41354: LESS
41355: IFFALSE 41391
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41357: LD_INT 0
41359: PPUSH
41360: LD_INT 5
41362: PUSH
41363: LD_INT 8
41365: PUSH
41366: LD_INT 9
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: LIST
41373: PUSH
41374: LD_VAR 0 17
41378: ARRAY
41379: PPUSH
41380: LD_VAR 0 4
41384: PPUSH
41385: CALL_OW 380
41389: GO 41408
// PrepareHuman ( false , i , skill ) ;
41391: LD_INT 0
41393: PPUSH
41394: LD_VAR 0 8
41398: PPUSH
41399: LD_VAR 0 4
41403: PPUSH
41404: CALL_OW 380
// end else
41408: GO 41427
// PrepareHuman ( false , i , skill ) ;
41410: LD_INT 0
41412: PPUSH
41413: LD_VAR 0 8
41417: PPUSH
41418: LD_VAR 0 4
41422: PPUSH
41423: CALL_OW 380
// un := CreateHuman ;
41427: LD_ADDR_VAR 0 14
41431: PUSH
41432: CALL_OW 44
41436: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41437: LD_ADDR_VAR 0 7
41441: PUSH
41442: LD_VAR 0 7
41446: PPUSH
41447: LD_INT 1
41449: PPUSH
41450: LD_VAR 0 14
41454: PPUSH
41455: CALL_OW 2
41459: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41460: LD_VAR 0 14
41464: PPUSH
41465: LD_VAR 0 9
41469: PPUSH
41470: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41474: LD_VAR 0 9
41478: PPUSH
41479: CALL_OW 313
41483: PUSH
41484: LD_INT 6
41486: EQUAL
41487: PUSH
41488: LD_VAR 0 9
41492: PPUSH
41493: CALL_OW 266
41497: PUSH
41498: LD_INT 32
41500: PUSH
41501: LD_INT 31
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: IN
41508: OR
41509: IFFALSE 41323
41511: GO 41320
41513: POP
41514: POP
// end else
41515: GO 41897
// for j = 1 to x do
41517: LD_ADDR_VAR 0 9
41521: PUSH
41522: DOUBLE
41523: LD_INT 1
41525: DEC
41526: ST_TO_ADDR
41527: LD_VAR 0 13
41531: PUSH
41532: FOR_TO
41533: IFFALSE 41895
// begin InitHc ;
41535: CALL_OW 19
// if not f then
41539: LD_VAR 0 12
41543: NOT
41544: IFFALSE 41633
// begin PrepareHuman ( false , i , skill ) ;
41546: LD_INT 0
41548: PPUSH
41549: LD_VAR 0 8
41553: PPUSH
41554: LD_VAR 0 4
41558: PPUSH
41559: CALL_OW 380
// un := CreateHuman ;
41563: LD_ADDR_VAR 0 14
41567: PUSH
41568: CALL_OW 44
41572: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41573: LD_ADDR_VAR 0 7
41577: PUSH
41578: LD_VAR 0 7
41582: PPUSH
41583: LD_INT 1
41585: PPUSH
41586: LD_VAR 0 14
41590: PPUSH
41591: CALL_OW 2
41595: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41596: LD_VAR 0 14
41600: PPUSH
41601: LD_VAR 0 1
41605: PPUSH
41606: CALL_OW 250
41610: PPUSH
41611: LD_VAR 0 1
41615: PPUSH
41616: CALL_OW 251
41620: PPUSH
41621: LD_INT 10
41623: PPUSH
41624: LD_INT 0
41626: PPUSH
41627: CALL_OW 50
// continue ;
41631: GO 41532
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41633: LD_VAR 0 12
41637: PUSH
41638: LD_INT 1
41640: ARRAY
41641: PPUSH
41642: CALL_OW 313
41646: PUSH
41647: LD_VAR 0 12
41651: PUSH
41652: LD_INT 1
41654: ARRAY
41655: PPUSH
41656: CALL_OW 266
41660: PUSH
41661: LD_INT 32
41663: PUSH
41664: LD_INT 31
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: IN
41671: AND
41672: PUSH
41673: LD_VAR 0 12
41677: PUSH
41678: LD_INT 1
41680: ARRAY
41681: PPUSH
41682: CALL_OW 313
41686: PUSH
41687: LD_INT 6
41689: EQUAL
41690: OR
41691: IFFALSE 41711
// f := Delete ( f , 1 ) ;
41693: LD_ADDR_VAR 0 12
41697: PUSH
41698: LD_VAR 0 12
41702: PPUSH
41703: LD_INT 1
41705: PPUSH
41706: CALL_OW 3
41710: ST_TO_ADDR
// if not f then
41711: LD_VAR 0 12
41715: NOT
41716: IFFALSE 41734
// begin x := x + 2 ;
41718: LD_ADDR_VAR 0 13
41722: PUSH
41723: LD_VAR 0 13
41727: PUSH
41728: LD_INT 2
41730: PLUS
41731: ST_TO_ADDR
// continue ;
41732: GO 41532
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41734: LD_VAR 0 12
41738: PUSH
41739: LD_INT 1
41741: ARRAY
41742: PPUSH
41743: CALL_OW 266
41747: PUSH
41748: LD_INT 5
41750: EQUAL
41751: IFFALSE 41825
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41753: LD_VAR 0 12
41757: PUSH
41758: LD_INT 1
41760: ARRAY
41761: PPUSH
41762: CALL_OW 313
41766: PUSH
41767: LD_INT 3
41769: LESS
41770: IFFALSE 41806
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41772: LD_INT 0
41774: PPUSH
41775: LD_INT 5
41777: PUSH
41778: LD_INT 8
41780: PUSH
41781: LD_INT 9
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: LIST
41788: PUSH
41789: LD_VAR 0 17
41793: ARRAY
41794: PPUSH
41795: LD_VAR 0 4
41799: PPUSH
41800: CALL_OW 380
41804: GO 41823
// PrepareHuman ( false , i , skill ) ;
41806: LD_INT 0
41808: PPUSH
41809: LD_VAR 0 8
41813: PPUSH
41814: LD_VAR 0 4
41818: PPUSH
41819: CALL_OW 380
// end else
41823: GO 41842
// PrepareHuman ( false , i , skill ) ;
41825: LD_INT 0
41827: PPUSH
41828: LD_VAR 0 8
41832: PPUSH
41833: LD_VAR 0 4
41837: PPUSH
41838: CALL_OW 380
// un := CreateHuman ;
41842: LD_ADDR_VAR 0 14
41846: PUSH
41847: CALL_OW 44
41851: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41852: LD_ADDR_VAR 0 7
41856: PUSH
41857: LD_VAR 0 7
41861: PPUSH
41862: LD_INT 1
41864: PPUSH
41865: LD_VAR 0 14
41869: PPUSH
41870: CALL_OW 2
41874: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41875: LD_VAR 0 14
41879: PPUSH
41880: LD_VAR 0 12
41884: PUSH
41885: LD_INT 1
41887: ARRAY
41888: PPUSH
41889: CALL_OW 52
// end ;
41893: GO 41532
41895: POP
41896: POP
// end ;
41897: GO 40834
41899: POP
41900: POP
// result := result ^ buildings ;
41901: LD_ADDR_VAR 0 7
41905: PUSH
41906: LD_VAR 0 7
41910: PUSH
41911: LD_VAR 0 18
41915: ADD
41916: ST_TO_ADDR
// end else
41917: GO 42060
// begin for i = 1 to personel do
41919: LD_ADDR_VAR 0 8
41923: PUSH
41924: DOUBLE
41925: LD_INT 1
41927: DEC
41928: ST_TO_ADDR
41929: LD_VAR 0 6
41933: PUSH
41934: FOR_TO
41935: IFFALSE 42058
// begin if i > 4 then
41937: LD_VAR 0 8
41941: PUSH
41942: LD_INT 4
41944: GREATER
41945: IFFALSE 41949
// break ;
41947: GO 42058
// x := personel [ i ] ;
41949: LD_ADDR_VAR 0 13
41953: PUSH
41954: LD_VAR 0 6
41958: PUSH
41959: LD_VAR 0 8
41963: ARRAY
41964: ST_TO_ADDR
// if x = - 1 then
41965: LD_VAR 0 13
41969: PUSH
41970: LD_INT 1
41972: NEG
41973: EQUAL
41974: IFFALSE 41978
// continue ;
41976: GO 41934
// PrepareHuman ( false , i , skill ) ;
41978: LD_INT 0
41980: PPUSH
41981: LD_VAR 0 8
41985: PPUSH
41986: LD_VAR 0 4
41990: PPUSH
41991: CALL_OW 380
// un := CreateHuman ;
41995: LD_ADDR_VAR 0 14
41999: PUSH
42000: CALL_OW 44
42004: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42005: LD_VAR 0 14
42009: PPUSH
42010: LD_VAR 0 1
42014: PPUSH
42015: CALL_OW 250
42019: PPUSH
42020: LD_VAR 0 1
42024: PPUSH
42025: CALL_OW 251
42029: PPUSH
42030: LD_INT 10
42032: PPUSH
42033: LD_INT 0
42035: PPUSH
42036: CALL_OW 50
// result := result ^ un ;
42040: LD_ADDR_VAR 0 7
42044: PUSH
42045: LD_VAR 0 7
42049: PUSH
42050: LD_VAR 0 14
42054: ADD
42055: ST_TO_ADDR
// end ;
42056: GO 41934
42058: POP
42059: POP
// end ; end ;
42060: LD_VAR 0 7
42064: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42065: LD_INT 0
42067: PPUSH
42068: PPUSH
42069: PPUSH
42070: PPUSH
42071: PPUSH
42072: PPUSH
42073: PPUSH
42074: PPUSH
42075: PPUSH
42076: PPUSH
42077: PPUSH
42078: PPUSH
42079: PPUSH
42080: PPUSH
42081: PPUSH
42082: PPUSH
// result := false ;
42083: LD_ADDR_VAR 0 3
42087: PUSH
42088: LD_INT 0
42090: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42091: LD_VAR 0 1
42095: NOT
42096: PUSH
42097: LD_VAR 0 1
42101: PPUSH
42102: CALL_OW 266
42106: PUSH
42107: LD_INT 32
42109: PUSH
42110: LD_INT 33
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: IN
42117: NOT
42118: OR
42119: IFFALSE 42123
// exit ;
42121: GO 43232
// nat := GetNation ( tower ) ;
42123: LD_ADDR_VAR 0 12
42127: PUSH
42128: LD_VAR 0 1
42132: PPUSH
42133: CALL_OW 248
42137: ST_TO_ADDR
// side := GetSide ( tower ) ;
42138: LD_ADDR_VAR 0 16
42142: PUSH
42143: LD_VAR 0 1
42147: PPUSH
42148: CALL_OW 255
42152: ST_TO_ADDR
// x := GetX ( tower ) ;
42153: LD_ADDR_VAR 0 10
42157: PUSH
42158: LD_VAR 0 1
42162: PPUSH
42163: CALL_OW 250
42167: ST_TO_ADDR
// y := GetY ( tower ) ;
42168: LD_ADDR_VAR 0 11
42172: PUSH
42173: LD_VAR 0 1
42177: PPUSH
42178: CALL_OW 251
42182: ST_TO_ADDR
// if not x or not y then
42183: LD_VAR 0 10
42187: NOT
42188: PUSH
42189: LD_VAR 0 11
42193: NOT
42194: OR
42195: IFFALSE 42199
// exit ;
42197: GO 43232
// weapon := 0 ;
42199: LD_ADDR_VAR 0 18
42203: PUSH
42204: LD_INT 0
42206: ST_TO_ADDR
// fac_list := [ ] ;
42207: LD_ADDR_VAR 0 17
42211: PUSH
42212: EMPTY
42213: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42214: LD_ADDR_VAR 0 6
42218: PUSH
42219: LD_VAR 0 1
42223: PPUSH
42224: CALL_OW 274
42228: PPUSH
42229: LD_VAR 0 2
42233: PPUSH
42234: LD_INT 0
42236: PPUSH
42237: CALL 39803 0 3
42241: PPUSH
42242: LD_INT 30
42244: PUSH
42245: LD_INT 3
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PPUSH
42252: CALL_OW 72
42256: ST_TO_ADDR
// if not factories then
42257: LD_VAR 0 6
42261: NOT
42262: IFFALSE 42266
// exit ;
42264: GO 43232
// for i in factories do
42266: LD_ADDR_VAR 0 8
42270: PUSH
42271: LD_VAR 0 6
42275: PUSH
42276: FOR_IN
42277: IFFALSE 42302
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42279: LD_ADDR_VAR 0 17
42283: PUSH
42284: LD_VAR 0 17
42288: PUSH
42289: LD_VAR 0 8
42293: PPUSH
42294: CALL_OW 478
42298: UNION
42299: ST_TO_ADDR
42300: GO 42276
42302: POP
42303: POP
// if not fac_list then
42304: LD_VAR 0 17
42308: NOT
42309: IFFALSE 42313
// exit ;
42311: GO 43232
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42313: LD_ADDR_VAR 0 5
42317: PUSH
42318: LD_INT 4
42320: PUSH
42321: LD_INT 5
42323: PUSH
42324: LD_INT 9
42326: PUSH
42327: LD_INT 10
42329: PUSH
42330: LD_INT 6
42332: PUSH
42333: LD_INT 7
42335: PUSH
42336: LD_INT 11
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 27
42350: PUSH
42351: LD_INT 28
42353: PUSH
42354: LD_INT 26
42356: PUSH
42357: LD_INT 30
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 43
42368: PUSH
42369: LD_INT 44
42371: PUSH
42372: LD_INT 46
42374: PUSH
42375: LD_INT 45
42377: PUSH
42378: LD_INT 47
42380: PUSH
42381: LD_INT 49
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: LIST
42396: PUSH
42397: LD_VAR 0 12
42401: ARRAY
42402: ST_TO_ADDR
// list := list isect fac_list ;
42403: LD_ADDR_VAR 0 5
42407: PUSH
42408: LD_VAR 0 5
42412: PUSH
42413: LD_VAR 0 17
42417: ISECT
42418: ST_TO_ADDR
// if not list then
42419: LD_VAR 0 5
42423: NOT
42424: IFFALSE 42428
// exit ;
42426: GO 43232
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42428: LD_VAR 0 12
42432: PUSH
42433: LD_INT 3
42435: EQUAL
42436: PUSH
42437: LD_INT 49
42439: PUSH
42440: LD_VAR 0 5
42444: IN
42445: AND
42446: PUSH
42447: LD_INT 31
42449: PPUSH
42450: LD_VAR 0 16
42454: PPUSH
42455: CALL_OW 321
42459: PUSH
42460: LD_INT 2
42462: EQUAL
42463: AND
42464: IFFALSE 42524
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42466: LD_INT 22
42468: PUSH
42469: LD_VAR 0 16
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 35
42480: PUSH
42481: LD_INT 49
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 91
42490: PUSH
42491: LD_VAR 0 1
42495: PUSH
42496: LD_INT 10
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: LIST
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: LIST
42508: PPUSH
42509: CALL_OW 69
42513: NOT
42514: IFFALSE 42524
// weapon := ru_time_lapser ;
42516: LD_ADDR_VAR 0 18
42520: PUSH
42521: LD_INT 49
42523: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42524: LD_VAR 0 12
42528: PUSH
42529: LD_INT 1
42531: PUSH
42532: LD_INT 2
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: IN
42539: PUSH
42540: LD_INT 11
42542: PUSH
42543: LD_VAR 0 5
42547: IN
42548: PUSH
42549: LD_INT 30
42551: PUSH
42552: LD_VAR 0 5
42556: IN
42557: OR
42558: AND
42559: PUSH
42560: LD_INT 6
42562: PPUSH
42563: LD_VAR 0 16
42567: PPUSH
42568: CALL_OW 321
42572: PUSH
42573: LD_INT 2
42575: EQUAL
42576: AND
42577: IFFALSE 42742
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42579: LD_INT 22
42581: PUSH
42582: LD_VAR 0 16
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 2
42593: PUSH
42594: LD_INT 35
42596: PUSH
42597: LD_INT 11
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 35
42606: PUSH
42607: LD_INT 30
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 91
42621: PUSH
42622: LD_VAR 0 1
42626: PUSH
42627: LD_INT 18
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: LIST
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: LIST
42639: PPUSH
42640: CALL_OW 69
42644: NOT
42645: PUSH
42646: LD_INT 22
42648: PUSH
42649: LD_VAR 0 16
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 2
42660: PUSH
42661: LD_INT 30
42663: PUSH
42664: LD_INT 32
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 30
42673: PUSH
42674: LD_INT 33
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 91
42688: PUSH
42689: LD_VAR 0 1
42693: PUSH
42694: LD_INT 12
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: LIST
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: LIST
42706: PUSH
42707: EMPTY
42708: LIST
42709: PPUSH
42710: CALL_OW 69
42714: PUSH
42715: LD_INT 2
42717: GREATER
42718: AND
42719: IFFALSE 42742
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42721: LD_ADDR_VAR 0 18
42725: PUSH
42726: LD_INT 11
42728: PUSH
42729: LD_INT 30
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_VAR 0 12
42740: ARRAY
42741: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42742: LD_VAR 0 18
42746: NOT
42747: PUSH
42748: LD_INT 40
42750: PPUSH
42751: LD_VAR 0 16
42755: PPUSH
42756: CALL_OW 321
42760: PUSH
42761: LD_INT 2
42763: EQUAL
42764: AND
42765: PUSH
42766: LD_INT 7
42768: PUSH
42769: LD_VAR 0 5
42773: IN
42774: PUSH
42775: LD_INT 28
42777: PUSH
42778: LD_VAR 0 5
42782: IN
42783: OR
42784: PUSH
42785: LD_INT 45
42787: PUSH
42788: LD_VAR 0 5
42792: IN
42793: OR
42794: AND
42795: IFFALSE 43049
// begin hex := GetHexInfo ( x , y ) ;
42797: LD_ADDR_VAR 0 4
42801: PUSH
42802: LD_VAR 0 10
42806: PPUSH
42807: LD_VAR 0 11
42811: PPUSH
42812: CALL_OW 546
42816: ST_TO_ADDR
// if hex [ 1 ] then
42817: LD_VAR 0 4
42821: PUSH
42822: LD_INT 1
42824: ARRAY
42825: IFFALSE 42829
// exit ;
42827: GO 43232
// height := hex [ 2 ] ;
42829: LD_ADDR_VAR 0 15
42833: PUSH
42834: LD_VAR 0 4
42838: PUSH
42839: LD_INT 2
42841: ARRAY
42842: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42843: LD_ADDR_VAR 0 14
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: LD_INT 3
42856: PUSH
42857: LD_INT 5
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: ST_TO_ADDR
// for i in tmp do
42866: LD_ADDR_VAR 0 8
42870: PUSH
42871: LD_VAR 0 14
42875: PUSH
42876: FOR_IN
42877: IFFALSE 43047
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42879: LD_ADDR_VAR 0 9
42883: PUSH
42884: LD_VAR 0 10
42888: PPUSH
42889: LD_VAR 0 8
42893: PPUSH
42894: LD_INT 5
42896: PPUSH
42897: CALL_OW 272
42901: PUSH
42902: LD_VAR 0 11
42906: PPUSH
42907: LD_VAR 0 8
42911: PPUSH
42912: LD_INT 5
42914: PPUSH
42915: CALL_OW 273
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42924: LD_VAR 0 9
42928: PUSH
42929: LD_INT 1
42931: ARRAY
42932: PPUSH
42933: LD_VAR 0 9
42937: PUSH
42938: LD_INT 2
42940: ARRAY
42941: PPUSH
42942: CALL_OW 488
42946: IFFALSE 43045
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42948: LD_ADDR_VAR 0 4
42952: PUSH
42953: LD_VAR 0 9
42957: PUSH
42958: LD_INT 1
42960: ARRAY
42961: PPUSH
42962: LD_VAR 0 9
42966: PUSH
42967: LD_INT 2
42969: ARRAY
42970: PPUSH
42971: CALL_OW 546
42975: ST_TO_ADDR
// if hex [ 1 ] then
42976: LD_VAR 0 4
42980: PUSH
42981: LD_INT 1
42983: ARRAY
42984: IFFALSE 42988
// continue ;
42986: GO 42876
// h := hex [ 2 ] ;
42988: LD_ADDR_VAR 0 13
42992: PUSH
42993: LD_VAR 0 4
42997: PUSH
42998: LD_INT 2
43000: ARRAY
43001: ST_TO_ADDR
// if h + 7 < height then
43002: LD_VAR 0 13
43006: PUSH
43007: LD_INT 7
43009: PLUS
43010: PUSH
43011: LD_VAR 0 15
43015: LESS
43016: IFFALSE 43045
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43018: LD_ADDR_VAR 0 18
43022: PUSH
43023: LD_INT 7
43025: PUSH
43026: LD_INT 28
43028: PUSH
43029: LD_INT 45
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: LIST
43036: PUSH
43037: LD_VAR 0 12
43041: ARRAY
43042: ST_TO_ADDR
// break ;
43043: GO 43047
// end ; end ; end ;
43045: GO 42876
43047: POP
43048: POP
// end ; if not weapon then
43049: LD_VAR 0 18
43053: NOT
43054: IFFALSE 43114
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43056: LD_ADDR_VAR 0 5
43060: PUSH
43061: LD_VAR 0 5
43065: PUSH
43066: LD_INT 11
43068: PUSH
43069: LD_INT 30
43071: PUSH
43072: LD_INT 49
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: LIST
43079: DIFF
43080: ST_TO_ADDR
// if not list then
43081: LD_VAR 0 5
43085: NOT
43086: IFFALSE 43090
// exit ;
43088: GO 43232
// weapon := list [ rand ( 1 , list ) ] ;
43090: LD_ADDR_VAR 0 18
43094: PUSH
43095: LD_VAR 0 5
43099: PUSH
43100: LD_INT 1
43102: PPUSH
43103: LD_VAR 0 5
43107: PPUSH
43108: CALL_OW 12
43112: ARRAY
43113: ST_TO_ADDR
// end ; if weapon then
43114: LD_VAR 0 18
43118: IFFALSE 43232
// begin tmp := CostOfWeapon ( weapon ) ;
43120: LD_ADDR_VAR 0 14
43124: PUSH
43125: LD_VAR 0 18
43129: PPUSH
43130: CALL_OW 451
43134: ST_TO_ADDR
// j := GetBase ( tower ) ;
43135: LD_ADDR_VAR 0 9
43139: PUSH
43140: LD_VAR 0 1
43144: PPUSH
43145: CALL_OW 274
43149: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43150: LD_VAR 0 9
43154: PPUSH
43155: LD_INT 1
43157: PPUSH
43158: CALL_OW 275
43162: PUSH
43163: LD_VAR 0 14
43167: PUSH
43168: LD_INT 1
43170: ARRAY
43171: GREATEREQUAL
43172: PUSH
43173: LD_VAR 0 9
43177: PPUSH
43178: LD_INT 2
43180: PPUSH
43181: CALL_OW 275
43185: PUSH
43186: LD_VAR 0 14
43190: PUSH
43191: LD_INT 2
43193: ARRAY
43194: GREATEREQUAL
43195: AND
43196: PUSH
43197: LD_VAR 0 9
43201: PPUSH
43202: LD_INT 3
43204: PPUSH
43205: CALL_OW 275
43209: PUSH
43210: LD_VAR 0 14
43214: PUSH
43215: LD_INT 3
43217: ARRAY
43218: GREATEREQUAL
43219: AND
43220: IFFALSE 43232
// result := weapon ;
43222: LD_ADDR_VAR 0 3
43226: PUSH
43227: LD_VAR 0 18
43231: ST_TO_ADDR
// end ; end ;
43232: LD_VAR 0 3
43236: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43237: LD_INT 0
43239: PPUSH
43240: PPUSH
// result := true ;
43241: LD_ADDR_VAR 0 3
43245: PUSH
43246: LD_INT 1
43248: ST_TO_ADDR
// if array1 = array2 then
43249: LD_VAR 0 1
43253: PUSH
43254: LD_VAR 0 2
43258: EQUAL
43259: IFFALSE 43319
// begin for i = 1 to array1 do
43261: LD_ADDR_VAR 0 4
43265: PUSH
43266: DOUBLE
43267: LD_INT 1
43269: DEC
43270: ST_TO_ADDR
43271: LD_VAR 0 1
43275: PUSH
43276: FOR_TO
43277: IFFALSE 43315
// if array1 [ i ] <> array2 [ i ] then
43279: LD_VAR 0 1
43283: PUSH
43284: LD_VAR 0 4
43288: ARRAY
43289: PUSH
43290: LD_VAR 0 2
43294: PUSH
43295: LD_VAR 0 4
43299: ARRAY
43300: NONEQUAL
43301: IFFALSE 43313
// begin result := false ;
43303: LD_ADDR_VAR 0 3
43307: PUSH
43308: LD_INT 0
43310: ST_TO_ADDR
// break ;
43311: GO 43315
// end ;
43313: GO 43276
43315: POP
43316: POP
// end else
43317: GO 43327
// result := false ;
43319: LD_ADDR_VAR 0 3
43323: PUSH
43324: LD_INT 0
43326: ST_TO_ADDR
// end ;
43327: LD_VAR 0 3
43331: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43332: LD_INT 0
43334: PPUSH
43335: PPUSH
// if not array1 or not array2 then
43336: LD_VAR 0 1
43340: NOT
43341: PUSH
43342: LD_VAR 0 2
43346: NOT
43347: OR
43348: IFFALSE 43352
// exit ;
43350: GO 43416
// result := true ;
43352: LD_ADDR_VAR 0 3
43356: PUSH
43357: LD_INT 1
43359: ST_TO_ADDR
// for i = 1 to array1 do
43360: LD_ADDR_VAR 0 4
43364: PUSH
43365: DOUBLE
43366: LD_INT 1
43368: DEC
43369: ST_TO_ADDR
43370: LD_VAR 0 1
43374: PUSH
43375: FOR_TO
43376: IFFALSE 43414
// if array1 [ i ] <> array2 [ i ] then
43378: LD_VAR 0 1
43382: PUSH
43383: LD_VAR 0 4
43387: ARRAY
43388: PUSH
43389: LD_VAR 0 2
43393: PUSH
43394: LD_VAR 0 4
43398: ARRAY
43399: NONEQUAL
43400: IFFALSE 43412
// begin result := false ;
43402: LD_ADDR_VAR 0 3
43406: PUSH
43407: LD_INT 0
43409: ST_TO_ADDR
// break ;
43410: GO 43414
// end ;
43412: GO 43375
43414: POP
43415: POP
// end ;
43416: LD_VAR 0 3
43420: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43421: LD_INT 0
43423: PPUSH
43424: PPUSH
43425: PPUSH
// pom := GetBase ( fac ) ;
43426: LD_ADDR_VAR 0 5
43430: PUSH
43431: LD_VAR 0 1
43435: PPUSH
43436: CALL_OW 274
43440: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43441: LD_ADDR_VAR 0 4
43445: PUSH
43446: LD_VAR 0 2
43450: PUSH
43451: LD_INT 1
43453: ARRAY
43454: PPUSH
43455: LD_VAR 0 2
43459: PUSH
43460: LD_INT 2
43462: ARRAY
43463: PPUSH
43464: LD_VAR 0 2
43468: PUSH
43469: LD_INT 3
43471: ARRAY
43472: PPUSH
43473: LD_VAR 0 2
43477: PUSH
43478: LD_INT 4
43480: ARRAY
43481: PPUSH
43482: CALL_OW 449
43486: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43487: LD_ADDR_VAR 0 3
43491: PUSH
43492: LD_VAR 0 5
43496: PPUSH
43497: LD_INT 1
43499: PPUSH
43500: CALL_OW 275
43504: PUSH
43505: LD_VAR 0 4
43509: PUSH
43510: LD_INT 1
43512: ARRAY
43513: GREATEREQUAL
43514: PUSH
43515: LD_VAR 0 5
43519: PPUSH
43520: LD_INT 2
43522: PPUSH
43523: CALL_OW 275
43527: PUSH
43528: LD_VAR 0 4
43532: PUSH
43533: LD_INT 2
43535: ARRAY
43536: GREATEREQUAL
43537: AND
43538: PUSH
43539: LD_VAR 0 5
43543: PPUSH
43544: LD_INT 3
43546: PPUSH
43547: CALL_OW 275
43551: PUSH
43552: LD_VAR 0 4
43556: PUSH
43557: LD_INT 3
43559: ARRAY
43560: GREATEREQUAL
43561: AND
43562: ST_TO_ADDR
// end ;
43563: LD_VAR 0 3
43567: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43568: LD_INT 0
43570: PPUSH
43571: PPUSH
43572: PPUSH
43573: PPUSH
// pom := GetBase ( building ) ;
43574: LD_ADDR_VAR 0 3
43578: PUSH
43579: LD_VAR 0 1
43583: PPUSH
43584: CALL_OW 274
43588: ST_TO_ADDR
// if not pom then
43589: LD_VAR 0 3
43593: NOT
43594: IFFALSE 43598
// exit ;
43596: GO 43768
// btype := GetBType ( building ) ;
43598: LD_ADDR_VAR 0 5
43602: PUSH
43603: LD_VAR 0 1
43607: PPUSH
43608: CALL_OW 266
43612: ST_TO_ADDR
// if btype = b_armoury then
43613: LD_VAR 0 5
43617: PUSH
43618: LD_INT 4
43620: EQUAL
43621: IFFALSE 43631
// btype := b_barracks ;
43623: LD_ADDR_VAR 0 5
43627: PUSH
43628: LD_INT 5
43630: ST_TO_ADDR
// if btype = b_depot then
43631: LD_VAR 0 5
43635: PUSH
43636: LD_INT 0
43638: EQUAL
43639: IFFALSE 43649
// btype := b_warehouse ;
43641: LD_ADDR_VAR 0 5
43645: PUSH
43646: LD_INT 1
43648: ST_TO_ADDR
// if btype = b_workshop then
43649: LD_VAR 0 5
43653: PUSH
43654: LD_INT 2
43656: EQUAL
43657: IFFALSE 43667
// btype := b_factory ;
43659: LD_ADDR_VAR 0 5
43663: PUSH
43664: LD_INT 3
43666: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43667: LD_ADDR_VAR 0 4
43671: PUSH
43672: LD_VAR 0 5
43676: PPUSH
43677: LD_VAR 0 1
43681: PPUSH
43682: CALL_OW 248
43686: PPUSH
43687: CALL_OW 450
43691: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43692: LD_ADDR_VAR 0 2
43696: PUSH
43697: LD_VAR 0 3
43701: PPUSH
43702: LD_INT 1
43704: PPUSH
43705: CALL_OW 275
43709: PUSH
43710: LD_VAR 0 4
43714: PUSH
43715: LD_INT 1
43717: ARRAY
43718: GREATEREQUAL
43719: PUSH
43720: LD_VAR 0 3
43724: PPUSH
43725: LD_INT 2
43727: PPUSH
43728: CALL_OW 275
43732: PUSH
43733: LD_VAR 0 4
43737: PUSH
43738: LD_INT 2
43740: ARRAY
43741: GREATEREQUAL
43742: AND
43743: PUSH
43744: LD_VAR 0 3
43748: PPUSH
43749: LD_INT 3
43751: PPUSH
43752: CALL_OW 275
43756: PUSH
43757: LD_VAR 0 4
43761: PUSH
43762: LD_INT 3
43764: ARRAY
43765: GREATEREQUAL
43766: AND
43767: ST_TO_ADDR
// end ;
43768: LD_VAR 0 2
43772: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43773: LD_INT 0
43775: PPUSH
43776: PPUSH
43777: PPUSH
// pom := GetBase ( building ) ;
43778: LD_ADDR_VAR 0 4
43782: PUSH
43783: LD_VAR 0 1
43787: PPUSH
43788: CALL_OW 274
43792: ST_TO_ADDR
// if not pom then
43793: LD_VAR 0 4
43797: NOT
43798: IFFALSE 43802
// exit ;
43800: GO 43903
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43802: LD_ADDR_VAR 0 5
43806: PUSH
43807: LD_VAR 0 2
43811: PPUSH
43812: LD_VAR 0 1
43816: PPUSH
43817: CALL_OW 248
43821: PPUSH
43822: CALL_OW 450
43826: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43827: LD_ADDR_VAR 0 3
43831: PUSH
43832: LD_VAR 0 4
43836: PPUSH
43837: LD_INT 1
43839: PPUSH
43840: CALL_OW 275
43844: PUSH
43845: LD_VAR 0 5
43849: PUSH
43850: LD_INT 1
43852: ARRAY
43853: GREATEREQUAL
43854: PUSH
43855: LD_VAR 0 4
43859: PPUSH
43860: LD_INT 2
43862: PPUSH
43863: CALL_OW 275
43867: PUSH
43868: LD_VAR 0 5
43872: PUSH
43873: LD_INT 2
43875: ARRAY
43876: GREATEREQUAL
43877: AND
43878: PUSH
43879: LD_VAR 0 4
43883: PPUSH
43884: LD_INT 3
43886: PPUSH
43887: CALL_OW 275
43891: PUSH
43892: LD_VAR 0 5
43896: PUSH
43897: LD_INT 3
43899: ARRAY
43900: GREATEREQUAL
43901: AND
43902: ST_TO_ADDR
// end ;
43903: LD_VAR 0 3
43907: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43908: LD_INT 0
43910: PPUSH
43911: PPUSH
43912: PPUSH
43913: PPUSH
43914: PPUSH
43915: PPUSH
43916: PPUSH
43917: PPUSH
43918: PPUSH
43919: PPUSH
43920: PPUSH
// result := false ;
43921: LD_ADDR_VAR 0 8
43925: PUSH
43926: LD_INT 0
43928: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43929: LD_VAR 0 5
43933: NOT
43934: PUSH
43935: LD_VAR 0 1
43939: NOT
43940: OR
43941: PUSH
43942: LD_VAR 0 2
43946: NOT
43947: OR
43948: PUSH
43949: LD_VAR 0 3
43953: NOT
43954: OR
43955: IFFALSE 43959
// exit ;
43957: GO 44773
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43959: LD_ADDR_VAR 0 14
43963: PUSH
43964: LD_VAR 0 1
43968: PPUSH
43969: LD_VAR 0 2
43973: PPUSH
43974: LD_VAR 0 3
43978: PPUSH
43979: LD_VAR 0 4
43983: PPUSH
43984: LD_VAR 0 5
43988: PUSH
43989: LD_INT 1
43991: ARRAY
43992: PPUSH
43993: CALL_OW 248
43997: PPUSH
43998: LD_INT 0
44000: PPUSH
44001: CALL 46010 0 6
44005: ST_TO_ADDR
// if not hexes then
44006: LD_VAR 0 14
44010: NOT
44011: IFFALSE 44015
// exit ;
44013: GO 44773
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44015: LD_ADDR_VAR 0 17
44019: PUSH
44020: LD_VAR 0 5
44024: PPUSH
44025: LD_INT 22
44027: PUSH
44028: LD_VAR 0 13
44032: PPUSH
44033: CALL_OW 255
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 2
44044: PUSH
44045: LD_INT 30
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 30
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: LIST
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PPUSH
44074: CALL_OW 72
44078: ST_TO_ADDR
// for i = 1 to hexes do
44079: LD_ADDR_VAR 0 9
44083: PUSH
44084: DOUBLE
44085: LD_INT 1
44087: DEC
44088: ST_TO_ADDR
44089: LD_VAR 0 14
44093: PUSH
44094: FOR_TO
44095: IFFALSE 44771
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44097: LD_ADDR_VAR 0 13
44101: PUSH
44102: LD_VAR 0 14
44106: PUSH
44107: LD_VAR 0 9
44111: ARRAY
44112: PUSH
44113: LD_INT 1
44115: ARRAY
44116: PPUSH
44117: LD_VAR 0 14
44121: PUSH
44122: LD_VAR 0 9
44126: ARRAY
44127: PUSH
44128: LD_INT 2
44130: ARRAY
44131: PPUSH
44132: CALL_OW 428
44136: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44137: LD_VAR 0 14
44141: PUSH
44142: LD_VAR 0 9
44146: ARRAY
44147: PUSH
44148: LD_INT 1
44150: ARRAY
44151: PPUSH
44152: LD_VAR 0 14
44156: PUSH
44157: LD_VAR 0 9
44161: ARRAY
44162: PUSH
44163: LD_INT 2
44165: ARRAY
44166: PPUSH
44167: CALL_OW 351
44171: PUSH
44172: LD_VAR 0 14
44176: PUSH
44177: LD_VAR 0 9
44181: ARRAY
44182: PUSH
44183: LD_INT 1
44185: ARRAY
44186: PPUSH
44187: LD_VAR 0 14
44191: PUSH
44192: LD_VAR 0 9
44196: ARRAY
44197: PUSH
44198: LD_INT 2
44200: ARRAY
44201: PPUSH
44202: CALL_OW 488
44206: NOT
44207: OR
44208: PUSH
44209: LD_VAR 0 13
44213: PPUSH
44214: CALL_OW 247
44218: PUSH
44219: LD_INT 3
44221: EQUAL
44222: OR
44223: IFFALSE 44229
// exit ;
44225: POP
44226: POP
44227: GO 44773
// if not tmp then
44229: LD_VAR 0 13
44233: NOT
44234: IFFALSE 44238
// continue ;
44236: GO 44094
// result := true ;
44238: LD_ADDR_VAR 0 8
44242: PUSH
44243: LD_INT 1
44245: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44246: LD_VAR 0 6
44250: PUSH
44251: LD_VAR 0 13
44255: PPUSH
44256: CALL_OW 247
44260: PUSH
44261: LD_INT 2
44263: EQUAL
44264: AND
44265: PUSH
44266: LD_VAR 0 13
44270: PPUSH
44271: CALL_OW 263
44275: PUSH
44276: LD_INT 1
44278: EQUAL
44279: AND
44280: IFFALSE 44444
// begin if IsDrivenBy ( tmp ) then
44282: LD_VAR 0 13
44286: PPUSH
44287: CALL_OW 311
44291: IFFALSE 44295
// continue ;
44293: GO 44094
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44295: LD_VAR 0 6
44299: PPUSH
44300: LD_INT 3
44302: PUSH
44303: LD_INT 60
44305: PUSH
44306: EMPTY
44307: LIST
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 3
44315: PUSH
44316: LD_INT 55
44318: PUSH
44319: EMPTY
44320: LIST
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PPUSH
44330: CALL_OW 72
44334: IFFALSE 44442
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44336: LD_ADDR_VAR 0 18
44340: PUSH
44341: LD_VAR 0 6
44345: PPUSH
44346: LD_INT 3
44348: PUSH
44349: LD_INT 60
44351: PUSH
44352: EMPTY
44353: LIST
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 3
44361: PUSH
44362: LD_INT 55
44364: PUSH
44365: EMPTY
44366: LIST
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PPUSH
44376: CALL_OW 72
44380: PUSH
44381: LD_INT 1
44383: ARRAY
44384: ST_TO_ADDR
// if IsInUnit ( driver ) then
44385: LD_VAR 0 18
44389: PPUSH
44390: CALL_OW 310
44394: IFFALSE 44405
// ComExit ( driver ) ;
44396: LD_VAR 0 18
44400: PPUSH
44401: CALL 69194 0 1
// AddComEnterUnit ( driver , tmp ) ;
44405: LD_VAR 0 18
44409: PPUSH
44410: LD_VAR 0 13
44414: PPUSH
44415: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44419: LD_VAR 0 18
44423: PPUSH
44424: LD_VAR 0 7
44428: PPUSH
44429: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44433: LD_VAR 0 18
44437: PPUSH
44438: CALL_OW 181
// end ; continue ;
44442: GO 44094
// end ; if not cleaners or not tmp in cleaners then
44444: LD_VAR 0 6
44448: NOT
44449: PUSH
44450: LD_VAR 0 13
44454: PUSH
44455: LD_VAR 0 6
44459: IN
44460: NOT
44461: OR
44462: IFFALSE 44769
// begin if dep then
44464: LD_VAR 0 17
44468: IFFALSE 44604
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44470: LD_ADDR_VAR 0 16
44474: PUSH
44475: LD_VAR 0 17
44479: PUSH
44480: LD_INT 1
44482: ARRAY
44483: PPUSH
44484: CALL_OW 250
44488: PPUSH
44489: LD_VAR 0 17
44493: PUSH
44494: LD_INT 1
44496: ARRAY
44497: PPUSH
44498: CALL_OW 254
44502: PPUSH
44503: LD_INT 5
44505: PPUSH
44506: CALL_OW 272
44510: PUSH
44511: LD_VAR 0 17
44515: PUSH
44516: LD_INT 1
44518: ARRAY
44519: PPUSH
44520: CALL_OW 251
44524: PPUSH
44525: LD_VAR 0 17
44529: PUSH
44530: LD_INT 1
44532: ARRAY
44533: PPUSH
44534: CALL_OW 254
44538: PPUSH
44539: LD_INT 5
44541: PPUSH
44542: CALL_OW 273
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44551: LD_VAR 0 16
44555: PUSH
44556: LD_INT 1
44558: ARRAY
44559: PPUSH
44560: LD_VAR 0 16
44564: PUSH
44565: LD_INT 2
44567: ARRAY
44568: PPUSH
44569: CALL_OW 488
44573: IFFALSE 44604
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44575: LD_VAR 0 13
44579: PPUSH
44580: LD_VAR 0 16
44584: PUSH
44585: LD_INT 1
44587: ARRAY
44588: PPUSH
44589: LD_VAR 0 16
44593: PUSH
44594: LD_INT 2
44596: ARRAY
44597: PPUSH
44598: CALL_OW 111
// continue ;
44602: GO 44094
// end ; end ; r := GetDir ( tmp ) ;
44604: LD_ADDR_VAR 0 15
44608: PUSH
44609: LD_VAR 0 13
44613: PPUSH
44614: CALL_OW 254
44618: ST_TO_ADDR
// if r = 5 then
44619: LD_VAR 0 15
44623: PUSH
44624: LD_INT 5
44626: EQUAL
44627: IFFALSE 44637
// r := 0 ;
44629: LD_ADDR_VAR 0 15
44633: PUSH
44634: LD_INT 0
44636: ST_TO_ADDR
// for j = r to 5 do
44637: LD_ADDR_VAR 0 10
44641: PUSH
44642: DOUBLE
44643: LD_VAR 0 15
44647: DEC
44648: ST_TO_ADDR
44649: LD_INT 5
44651: PUSH
44652: FOR_TO
44653: IFFALSE 44767
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44655: LD_ADDR_VAR 0 11
44659: PUSH
44660: LD_VAR 0 13
44664: PPUSH
44665: CALL_OW 250
44669: PPUSH
44670: LD_VAR 0 10
44674: PPUSH
44675: LD_INT 2
44677: PPUSH
44678: CALL_OW 272
44682: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44683: LD_ADDR_VAR 0 12
44687: PUSH
44688: LD_VAR 0 13
44692: PPUSH
44693: CALL_OW 251
44697: PPUSH
44698: LD_VAR 0 10
44702: PPUSH
44703: LD_INT 2
44705: PPUSH
44706: CALL_OW 273
44710: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44711: LD_VAR 0 11
44715: PPUSH
44716: LD_VAR 0 12
44720: PPUSH
44721: CALL_OW 488
44725: PUSH
44726: LD_VAR 0 11
44730: PPUSH
44731: LD_VAR 0 12
44735: PPUSH
44736: CALL_OW 428
44740: NOT
44741: AND
44742: IFFALSE 44765
// begin ComMoveXY ( tmp , _x , _y ) ;
44744: LD_VAR 0 13
44748: PPUSH
44749: LD_VAR 0 11
44753: PPUSH
44754: LD_VAR 0 12
44758: PPUSH
44759: CALL_OW 111
// break ;
44763: GO 44767
// end ; end ;
44765: GO 44652
44767: POP
44768: POP
// end ; end ;
44769: GO 44094
44771: POP
44772: POP
// end ;
44773: LD_VAR 0 8
44777: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44778: LD_INT 0
44780: PPUSH
// result := true ;
44781: LD_ADDR_VAR 0 3
44785: PUSH
44786: LD_INT 1
44788: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44789: LD_VAR 0 2
44793: PUSH
44794: LD_INT 24
44796: DOUBLE
44797: EQUAL
44798: IFTRUE 44808
44800: LD_INT 33
44802: DOUBLE
44803: EQUAL
44804: IFTRUE 44808
44806: GO 44833
44808: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44809: LD_ADDR_VAR 0 3
44813: PUSH
44814: LD_INT 32
44816: PPUSH
44817: LD_VAR 0 1
44821: PPUSH
44822: CALL_OW 321
44826: PUSH
44827: LD_INT 2
44829: EQUAL
44830: ST_TO_ADDR
44831: GO 45153
44833: LD_INT 20
44835: DOUBLE
44836: EQUAL
44837: IFTRUE 44841
44839: GO 44866
44841: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44842: LD_ADDR_VAR 0 3
44846: PUSH
44847: LD_INT 6
44849: PPUSH
44850: LD_VAR 0 1
44854: PPUSH
44855: CALL_OW 321
44859: PUSH
44860: LD_INT 2
44862: EQUAL
44863: ST_TO_ADDR
44864: GO 45153
44866: LD_INT 22
44868: DOUBLE
44869: EQUAL
44870: IFTRUE 44880
44872: LD_INT 36
44874: DOUBLE
44875: EQUAL
44876: IFTRUE 44880
44878: GO 44905
44880: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44881: LD_ADDR_VAR 0 3
44885: PUSH
44886: LD_INT 15
44888: PPUSH
44889: LD_VAR 0 1
44893: PPUSH
44894: CALL_OW 321
44898: PUSH
44899: LD_INT 2
44901: EQUAL
44902: ST_TO_ADDR
44903: GO 45153
44905: LD_INT 30
44907: DOUBLE
44908: EQUAL
44909: IFTRUE 44913
44911: GO 44938
44913: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44914: LD_ADDR_VAR 0 3
44918: PUSH
44919: LD_INT 20
44921: PPUSH
44922: LD_VAR 0 1
44926: PPUSH
44927: CALL_OW 321
44931: PUSH
44932: LD_INT 2
44934: EQUAL
44935: ST_TO_ADDR
44936: GO 45153
44938: LD_INT 28
44940: DOUBLE
44941: EQUAL
44942: IFTRUE 44952
44944: LD_INT 21
44946: DOUBLE
44947: EQUAL
44948: IFTRUE 44952
44950: GO 44977
44952: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44953: LD_ADDR_VAR 0 3
44957: PUSH
44958: LD_INT 21
44960: PPUSH
44961: LD_VAR 0 1
44965: PPUSH
44966: CALL_OW 321
44970: PUSH
44971: LD_INT 2
44973: EQUAL
44974: ST_TO_ADDR
44975: GO 45153
44977: LD_INT 16
44979: DOUBLE
44980: EQUAL
44981: IFTRUE 44985
44983: GO 45012
44985: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44986: LD_ADDR_VAR 0 3
44990: PUSH
44991: LD_EXP 55
44995: PPUSH
44996: LD_VAR 0 1
45000: PPUSH
45001: CALL_OW 321
45005: PUSH
45006: LD_INT 2
45008: EQUAL
45009: ST_TO_ADDR
45010: GO 45153
45012: LD_INT 19
45014: DOUBLE
45015: EQUAL
45016: IFTRUE 45026
45018: LD_INT 23
45020: DOUBLE
45021: EQUAL
45022: IFTRUE 45026
45024: GO 45053
45026: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45027: LD_ADDR_VAR 0 3
45031: PUSH
45032: LD_EXP 54
45036: PPUSH
45037: LD_VAR 0 1
45041: PPUSH
45042: CALL_OW 321
45046: PUSH
45047: LD_INT 2
45049: EQUAL
45050: ST_TO_ADDR
45051: GO 45153
45053: LD_INT 17
45055: DOUBLE
45056: EQUAL
45057: IFTRUE 45061
45059: GO 45086
45061: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45062: LD_ADDR_VAR 0 3
45066: PUSH
45067: LD_INT 39
45069: PPUSH
45070: LD_VAR 0 1
45074: PPUSH
45075: CALL_OW 321
45079: PUSH
45080: LD_INT 2
45082: EQUAL
45083: ST_TO_ADDR
45084: GO 45153
45086: LD_INT 18
45088: DOUBLE
45089: EQUAL
45090: IFTRUE 45094
45092: GO 45119
45094: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45095: LD_ADDR_VAR 0 3
45099: PUSH
45100: LD_INT 40
45102: PPUSH
45103: LD_VAR 0 1
45107: PPUSH
45108: CALL_OW 321
45112: PUSH
45113: LD_INT 2
45115: EQUAL
45116: ST_TO_ADDR
45117: GO 45153
45119: LD_INT 27
45121: DOUBLE
45122: EQUAL
45123: IFTRUE 45127
45125: GO 45152
45127: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45128: LD_ADDR_VAR 0 3
45132: PUSH
45133: LD_INT 35
45135: PPUSH
45136: LD_VAR 0 1
45140: PPUSH
45141: CALL_OW 321
45145: PUSH
45146: LD_INT 2
45148: EQUAL
45149: ST_TO_ADDR
45150: GO 45153
45152: POP
// end ;
45153: LD_VAR 0 3
45157: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45158: LD_INT 0
45160: PPUSH
45161: PPUSH
45162: PPUSH
45163: PPUSH
45164: PPUSH
45165: PPUSH
45166: PPUSH
45167: PPUSH
45168: PPUSH
45169: PPUSH
45170: PPUSH
// result := false ;
45171: LD_ADDR_VAR 0 6
45175: PUSH
45176: LD_INT 0
45178: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45179: LD_VAR 0 1
45183: NOT
45184: PUSH
45185: LD_VAR 0 1
45189: PPUSH
45190: CALL_OW 266
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: LD_INT 1
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: IN
45205: NOT
45206: OR
45207: PUSH
45208: LD_VAR 0 2
45212: NOT
45213: OR
45214: PUSH
45215: LD_VAR 0 5
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: LD_INT 1
45225: PUSH
45226: LD_INT 2
45228: PUSH
45229: LD_INT 3
45231: PUSH
45232: LD_INT 4
45234: PUSH
45235: LD_INT 5
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: IN
45246: NOT
45247: OR
45248: PUSH
45249: LD_VAR 0 3
45253: PPUSH
45254: LD_VAR 0 4
45258: PPUSH
45259: CALL_OW 488
45263: NOT
45264: OR
45265: IFFALSE 45269
// exit ;
45267: GO 46005
// side := GetSide ( depot ) ;
45269: LD_ADDR_VAR 0 9
45273: PUSH
45274: LD_VAR 0 1
45278: PPUSH
45279: CALL_OW 255
45283: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45284: LD_VAR 0 9
45288: PPUSH
45289: LD_VAR 0 2
45293: PPUSH
45294: CALL 44778 0 2
45298: NOT
45299: IFFALSE 45303
// exit ;
45301: GO 46005
// pom := GetBase ( depot ) ;
45303: LD_ADDR_VAR 0 10
45307: PUSH
45308: LD_VAR 0 1
45312: PPUSH
45313: CALL_OW 274
45317: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45318: LD_ADDR_VAR 0 11
45322: PUSH
45323: LD_VAR 0 2
45327: PPUSH
45328: LD_VAR 0 1
45332: PPUSH
45333: CALL_OW 248
45337: PPUSH
45338: CALL_OW 450
45342: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45343: LD_VAR 0 10
45347: PPUSH
45348: LD_INT 1
45350: PPUSH
45351: CALL_OW 275
45355: PUSH
45356: LD_VAR 0 11
45360: PUSH
45361: LD_INT 1
45363: ARRAY
45364: GREATEREQUAL
45365: PUSH
45366: LD_VAR 0 10
45370: PPUSH
45371: LD_INT 2
45373: PPUSH
45374: CALL_OW 275
45378: PUSH
45379: LD_VAR 0 11
45383: PUSH
45384: LD_INT 2
45386: ARRAY
45387: GREATEREQUAL
45388: AND
45389: PUSH
45390: LD_VAR 0 10
45394: PPUSH
45395: LD_INT 3
45397: PPUSH
45398: CALL_OW 275
45402: PUSH
45403: LD_VAR 0 11
45407: PUSH
45408: LD_INT 3
45410: ARRAY
45411: GREATEREQUAL
45412: AND
45413: NOT
45414: IFFALSE 45418
// exit ;
45416: GO 46005
// if GetBType ( depot ) = b_depot then
45418: LD_VAR 0 1
45422: PPUSH
45423: CALL_OW 266
45427: PUSH
45428: LD_INT 0
45430: EQUAL
45431: IFFALSE 45443
// dist := 28 else
45433: LD_ADDR_VAR 0 14
45437: PUSH
45438: LD_INT 28
45440: ST_TO_ADDR
45441: GO 45451
// dist := 36 ;
45443: LD_ADDR_VAR 0 14
45447: PUSH
45448: LD_INT 36
45450: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45451: LD_VAR 0 1
45455: PPUSH
45456: LD_VAR 0 3
45460: PPUSH
45461: LD_VAR 0 4
45465: PPUSH
45466: CALL_OW 297
45470: PUSH
45471: LD_VAR 0 14
45475: GREATER
45476: IFFALSE 45480
// exit ;
45478: GO 46005
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45480: LD_ADDR_VAR 0 12
45484: PUSH
45485: LD_VAR 0 2
45489: PPUSH
45490: LD_VAR 0 3
45494: PPUSH
45495: LD_VAR 0 4
45499: PPUSH
45500: LD_VAR 0 5
45504: PPUSH
45505: LD_VAR 0 1
45509: PPUSH
45510: CALL_OW 248
45514: PPUSH
45515: LD_INT 0
45517: PPUSH
45518: CALL 46010 0 6
45522: ST_TO_ADDR
// if not hexes then
45523: LD_VAR 0 12
45527: NOT
45528: IFFALSE 45532
// exit ;
45530: GO 46005
// hex := GetHexInfo ( x , y ) ;
45532: LD_ADDR_VAR 0 15
45536: PUSH
45537: LD_VAR 0 3
45541: PPUSH
45542: LD_VAR 0 4
45546: PPUSH
45547: CALL_OW 546
45551: ST_TO_ADDR
// if hex [ 1 ] then
45552: LD_VAR 0 15
45556: PUSH
45557: LD_INT 1
45559: ARRAY
45560: IFFALSE 45564
// exit ;
45562: GO 46005
// height := hex [ 2 ] ;
45564: LD_ADDR_VAR 0 13
45568: PUSH
45569: LD_VAR 0 15
45573: PUSH
45574: LD_INT 2
45576: ARRAY
45577: ST_TO_ADDR
// for i = 1 to hexes do
45578: LD_ADDR_VAR 0 7
45582: PUSH
45583: DOUBLE
45584: LD_INT 1
45586: DEC
45587: ST_TO_ADDR
45588: LD_VAR 0 12
45592: PUSH
45593: FOR_TO
45594: IFFALSE 45924
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45596: LD_VAR 0 12
45600: PUSH
45601: LD_VAR 0 7
45605: ARRAY
45606: PUSH
45607: LD_INT 1
45609: ARRAY
45610: PPUSH
45611: LD_VAR 0 12
45615: PUSH
45616: LD_VAR 0 7
45620: ARRAY
45621: PUSH
45622: LD_INT 2
45624: ARRAY
45625: PPUSH
45626: CALL_OW 488
45630: NOT
45631: PUSH
45632: LD_VAR 0 12
45636: PUSH
45637: LD_VAR 0 7
45641: ARRAY
45642: PUSH
45643: LD_INT 1
45645: ARRAY
45646: PPUSH
45647: LD_VAR 0 12
45651: PUSH
45652: LD_VAR 0 7
45656: ARRAY
45657: PUSH
45658: LD_INT 2
45660: ARRAY
45661: PPUSH
45662: CALL_OW 428
45666: PUSH
45667: LD_INT 0
45669: GREATER
45670: OR
45671: PUSH
45672: LD_VAR 0 12
45676: PUSH
45677: LD_VAR 0 7
45681: ARRAY
45682: PUSH
45683: LD_INT 1
45685: ARRAY
45686: PPUSH
45687: LD_VAR 0 12
45691: PUSH
45692: LD_VAR 0 7
45696: ARRAY
45697: PUSH
45698: LD_INT 2
45700: ARRAY
45701: PPUSH
45702: CALL_OW 351
45706: OR
45707: IFFALSE 45713
// exit ;
45709: POP
45710: POP
45711: GO 46005
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45713: LD_ADDR_VAR 0 8
45717: PUSH
45718: LD_VAR 0 12
45722: PUSH
45723: LD_VAR 0 7
45727: ARRAY
45728: PUSH
45729: LD_INT 1
45731: ARRAY
45732: PPUSH
45733: LD_VAR 0 12
45737: PUSH
45738: LD_VAR 0 7
45742: ARRAY
45743: PUSH
45744: LD_INT 2
45746: ARRAY
45747: PPUSH
45748: CALL_OW 546
45752: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45753: LD_VAR 0 8
45757: PUSH
45758: LD_INT 1
45760: ARRAY
45761: PUSH
45762: LD_VAR 0 8
45766: PUSH
45767: LD_INT 2
45769: ARRAY
45770: PUSH
45771: LD_VAR 0 13
45775: PUSH
45776: LD_INT 2
45778: PLUS
45779: GREATER
45780: OR
45781: PUSH
45782: LD_VAR 0 8
45786: PUSH
45787: LD_INT 2
45789: ARRAY
45790: PUSH
45791: LD_VAR 0 13
45795: PUSH
45796: LD_INT 2
45798: MINUS
45799: LESS
45800: OR
45801: PUSH
45802: LD_VAR 0 8
45806: PUSH
45807: LD_INT 3
45809: ARRAY
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: LD_INT 8
45816: PUSH
45817: LD_INT 9
45819: PUSH
45820: LD_INT 10
45822: PUSH
45823: LD_INT 11
45825: PUSH
45826: LD_INT 12
45828: PUSH
45829: LD_INT 13
45831: PUSH
45832: LD_INT 16
45834: PUSH
45835: LD_INT 17
45837: PUSH
45838: LD_INT 18
45840: PUSH
45841: LD_INT 19
45843: PUSH
45844: LD_INT 20
45846: PUSH
45847: LD_INT 21
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: IN
45865: NOT
45866: OR
45867: PUSH
45868: LD_VAR 0 8
45872: PUSH
45873: LD_INT 5
45875: ARRAY
45876: NOT
45877: OR
45878: PUSH
45879: LD_VAR 0 8
45883: PUSH
45884: LD_INT 6
45886: ARRAY
45887: PUSH
45888: LD_INT 1
45890: PUSH
45891: LD_INT 2
45893: PUSH
45894: LD_INT 7
45896: PUSH
45897: LD_INT 9
45899: PUSH
45900: LD_INT 10
45902: PUSH
45903: LD_INT 11
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: IN
45914: NOT
45915: OR
45916: IFFALSE 45922
// exit ;
45918: POP
45919: POP
45920: GO 46005
// end ;
45922: GO 45593
45924: POP
45925: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45926: LD_VAR 0 9
45930: PPUSH
45931: LD_VAR 0 3
45935: PPUSH
45936: LD_VAR 0 4
45940: PPUSH
45941: LD_INT 20
45943: PPUSH
45944: CALL 37951 0 4
45948: PUSH
45949: LD_INT 4
45951: ARRAY
45952: IFFALSE 45956
// exit ;
45954: GO 46005
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45956: LD_VAR 0 2
45960: PUSH
45961: LD_INT 29
45963: PUSH
45964: LD_INT 30
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: IN
45971: PUSH
45972: LD_VAR 0 3
45976: PPUSH
45977: LD_VAR 0 4
45981: PPUSH
45982: LD_VAR 0 9
45986: PPUSH
45987: CALL_OW 440
45991: NOT
45992: AND
45993: IFFALSE 45997
// exit ;
45995: GO 46005
// result := true ;
45997: LD_ADDR_VAR 0 6
46001: PUSH
46002: LD_INT 1
46004: ST_TO_ADDR
// end ;
46005: LD_VAR 0 6
46009: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46010: LD_INT 0
46012: PPUSH
46013: PPUSH
46014: PPUSH
46015: PPUSH
46016: PPUSH
46017: PPUSH
46018: PPUSH
46019: PPUSH
46020: PPUSH
46021: PPUSH
46022: PPUSH
46023: PPUSH
46024: PPUSH
46025: PPUSH
46026: PPUSH
46027: PPUSH
46028: PPUSH
46029: PPUSH
46030: PPUSH
46031: PPUSH
46032: PPUSH
46033: PPUSH
46034: PPUSH
46035: PPUSH
46036: PPUSH
46037: PPUSH
46038: PPUSH
46039: PPUSH
46040: PPUSH
46041: PPUSH
46042: PPUSH
46043: PPUSH
46044: PPUSH
46045: PPUSH
46046: PPUSH
46047: PPUSH
46048: PPUSH
46049: PPUSH
46050: PPUSH
46051: PPUSH
46052: PPUSH
46053: PPUSH
46054: PPUSH
46055: PPUSH
46056: PPUSH
46057: PPUSH
46058: PPUSH
46059: PPUSH
46060: PPUSH
46061: PPUSH
46062: PPUSH
46063: PPUSH
46064: PPUSH
46065: PPUSH
46066: PPUSH
46067: PPUSH
46068: PPUSH
46069: PPUSH
// result = [ ] ;
46070: LD_ADDR_VAR 0 7
46074: PUSH
46075: EMPTY
46076: ST_TO_ADDR
// temp_list = [ ] ;
46077: LD_ADDR_VAR 0 9
46081: PUSH
46082: EMPTY
46083: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46084: LD_VAR 0 4
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: LD_INT 1
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: LD_INT 3
46100: PUSH
46101: LD_INT 4
46103: PUSH
46104: LD_INT 5
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: IN
46115: NOT
46116: PUSH
46117: LD_VAR 0 1
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: IN
46132: PUSH
46133: LD_VAR 0 5
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: LD_INT 2
46143: PUSH
46144: LD_INT 3
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: LIST
46151: IN
46152: NOT
46153: AND
46154: OR
46155: IFFALSE 46159
// exit ;
46157: GO 64550
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46159: LD_VAR 0 1
46163: PUSH
46164: LD_INT 6
46166: PUSH
46167: LD_INT 7
46169: PUSH
46170: LD_INT 8
46172: PUSH
46173: LD_INT 13
46175: PUSH
46176: LD_INT 12
46178: PUSH
46179: LD_INT 15
46181: PUSH
46182: LD_INT 11
46184: PUSH
46185: LD_INT 14
46187: PUSH
46188: LD_INT 10
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: IN
46202: IFFALSE 46212
// btype = b_lab ;
46204: LD_ADDR_VAR 0 1
46208: PUSH
46209: LD_INT 6
46211: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46212: LD_VAR 0 6
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: LD_INT 2
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: LIST
46230: IN
46231: NOT
46232: PUSH
46233: LD_VAR 0 1
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: LD_INT 2
46246: PUSH
46247: LD_INT 3
46249: PUSH
46250: LD_INT 6
46252: PUSH
46253: LD_INT 36
46255: PUSH
46256: LD_INT 4
46258: PUSH
46259: LD_INT 5
46261: PUSH
46262: LD_INT 31
46264: PUSH
46265: LD_INT 32
46267: PUSH
46268: LD_INT 33
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: IN
46284: NOT
46285: PUSH
46286: LD_VAR 0 6
46290: PUSH
46291: LD_INT 1
46293: EQUAL
46294: AND
46295: OR
46296: PUSH
46297: LD_VAR 0 1
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: LD_INT 3
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: IN
46312: NOT
46313: PUSH
46314: LD_VAR 0 6
46318: PUSH
46319: LD_INT 2
46321: EQUAL
46322: AND
46323: OR
46324: IFFALSE 46334
// mode = 0 ;
46326: LD_ADDR_VAR 0 6
46330: PUSH
46331: LD_INT 0
46333: ST_TO_ADDR
// case mode of 0 :
46334: LD_VAR 0 6
46338: PUSH
46339: LD_INT 0
46341: DOUBLE
46342: EQUAL
46343: IFTRUE 46347
46345: GO 57800
46347: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46348: LD_ADDR_VAR 0 11
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: LD_INT 1
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: LD_INT 2
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: LD_INT 2
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: PUSH
46464: LD_INT 2
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: LD_INT 2
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: LD_INT 3
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: LD_INT 3
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: LD_INT 2
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46541: LD_ADDR_VAR 0 12
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 2
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 2
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: NEG
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: NEG
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 2
46687: NEG
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 3
46698: NEG
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 3
46709: NEG
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46737: LD_ADDR_VAR 0 13
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 1
46818: NEG
46819: PUSH
46820: LD_INT 2
46822: NEG
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 2
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 2
46840: PUSH
46841: LD_INT 2
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: LD_INT 2
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 2
46860: NEG
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 2
46872: NEG
46873: PUSH
46874: LD_INT 2
46876: NEG
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 2
46884: NEG
46885: PUSH
46886: LD_INT 3
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 3
46896: NEG
46897: PUSH
46898: LD_INT 2
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 3
46908: NEG
46909: PUSH
46910: LD_INT 3
46912: NEG
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46936: LD_ADDR_VAR 0 14
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: LD_INT 2
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 2
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: LD_INT 2
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: LD_INT 2
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: LD_INT 3
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: LD_INT 3
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47132: LD_ADDR_VAR 0 15
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: LD_INT 1
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 2
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 2
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: LD_INT 1
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 2
47255: NEG
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 2
47266: NEG
47267: PUSH
47268: LD_INT 1
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 3
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 3
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47325: LD_ADDR_VAR 0 16
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: LD_INT 1
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: LD_INT 2
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 2
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 2
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: LD_INT 2
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 2
47448: NEG
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 2
47460: NEG
47461: PUSH
47462: LD_INT 2
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 3
47472: PUSH
47473: LD_INT 2
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 3
47482: PUSH
47483: LD_INT 3
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 2
47492: PUSH
47493: LD_INT 3
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47518: LD_ADDR_VAR 0 17
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: LD_INT 0
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: LD_INT 1
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: LD_INT 2
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: LD_INT 2
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 2
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 2
47643: PUSH
47644: LD_INT 1
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 2
47653: PUSH
47654: LD_INT 2
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: LD_INT 2
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 2
47705: NEG
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 2
47717: NEG
47718: PUSH
47719: LD_INT 2
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47748: LD_ADDR_VAR 0 18
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 1
47806: NEG
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: LD_INT 1
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 1
47829: NEG
47830: PUSH
47831: LD_INT 2
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: LD_INT 2
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 2
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 2
47873: PUSH
47874: LD_INT 1
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 2
47883: PUSH
47884: LD_INT 2
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: LD_INT 2
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: LD_INT 1
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 2
47924: NEG
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 2
47935: NEG
47936: PUSH
47937: LD_INT 1
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 2
47947: NEG
47948: PUSH
47949: LD_INT 2
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47978: LD_ADDR_VAR 0 19
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: LD_INT 0
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: LD_INT 1
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: LD_INT 1
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: NEG
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: LD_INT 1
48051: NEG
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: LD_INT 2
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: LD_INT 2
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 1
48082: PUSH
48083: LD_INT 1
48085: NEG
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 2
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: LD_INT 1
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 2
48113: PUSH
48114: LD_INT 2
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: LD_INT 2
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: LD_INT 2
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 1
48143: NEG
48144: PUSH
48145: LD_INT 1
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 2
48154: NEG
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 2
48165: NEG
48166: PUSH
48167: LD_INT 1
48169: NEG
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 2
48177: NEG
48178: PUSH
48179: LD_INT 2
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48208: LD_ADDR_VAR 0 20
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: LD_INT 2
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: LD_INT 2
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 2
48333: PUSH
48334: LD_INT 1
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 2
48343: PUSH
48344: LD_INT 2
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 2
48384: NEG
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 2
48395: NEG
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 2
48407: NEG
48408: PUSH
48409: LD_INT 2
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48438: LD_ADDR_VAR 0 21
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: LD_INT 1
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 1
48496: NEG
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: LD_INT 1
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: LD_INT 2
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: LD_INT 2
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 2
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 2
48573: PUSH
48574: LD_INT 2
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: LD_INT 2
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: LD_INT 2
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 2
48614: NEG
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 2
48625: NEG
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: LD_INT 2
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48668: LD_ADDR_VAR 0 22
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 1
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: NEG
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: LD_INT 2
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: LD_INT 2
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 2
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 2
48793: PUSH
48794: LD_INT 1
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 2
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: LD_INT 2
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: LD_INT 2
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 2
48844: NEG
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 2
48855: NEG
48856: PUSH
48857: LD_INT 1
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 2
48867: NEG
48868: PUSH
48869: LD_INT 2
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48898: LD_ADDR_VAR 0 23
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: LD_INT 1
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 1
48956: NEG
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 2
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 2
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 2
49033: PUSH
49034: LD_INT 2
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: LD_INT 2
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: LD_INT 2
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 2
49074: NEG
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 2
49085: NEG
49086: PUSH
49087: LD_INT 1
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: LD_INT 2
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 2
49109: NEG
49110: PUSH
49111: LD_INT 3
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: NEG
49122: PUSH
49123: LD_INT 3
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: LD_INT 2
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 2
49144: PUSH
49145: LD_INT 1
49147: NEG
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49178: LD_ADDR_VAR 0 24
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 1
49259: NEG
49260: PUSH
49261: LD_INT 2
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: LD_INT 2
49274: NEG
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 1
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 2
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 2
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 2
49313: PUSH
49314: LD_INT 2
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: LD_INT 2
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 2
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 2
49354: NEG
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 2
49365: NEG
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: LD_INT 2
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: LD_INT 2
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 2
49400: PUSH
49401: LD_INT 1
49403: NEG
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 3
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 3
49421: PUSH
49422: LD_INT 2
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49454: LD_ADDR_VAR 0 25
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: LD_INT 2
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: LD_INT 2
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 2
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: LD_INT 2
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: PUSH
49600: LD_INT 2
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 2
49630: NEG
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 2
49641: NEG
49642: PUSH
49643: LD_INT 1
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: LD_INT 2
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 3
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 3
49675: PUSH
49676: LD_INT 2
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 2
49685: PUSH
49686: LD_INT 3
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: LD_INT 3
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49728: LD_ADDR_VAR 0 26
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: LD_INT 2
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: LD_INT 2
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 2
49904: NEG
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 2
49915: NEG
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 2
49927: NEG
49928: PUSH
49929: LD_INT 2
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 2
49939: PUSH
49940: LD_INT 3
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: LD_INT 3
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: LD_INT 2
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 2
49970: NEG
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50004: LD_ADDR_VAR 0 27
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: LD_INT 2
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 2
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 2
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: LD_INT 2
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: NEG
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 2
50180: NEG
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 2
50203: NEG
50204: PUSH
50205: LD_INT 2
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: LD_INT 2
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: NEG
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 3
50237: NEG
50238: PUSH
50239: LD_INT 1
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 3
50249: NEG
50250: PUSH
50251: LD_INT 2
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50284: LD_ADDR_VAR 0 28
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 0
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 0
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: NEG
50366: PUSH
50367: LD_INT 2
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: LD_INT 2
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 2
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 2
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 2
50419: PUSH
50420: LD_INT 2
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: LD_INT 2
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: LD_INT 2
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: LD_INT 1
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 2
50460: NEG
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 2
50471: NEG
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 2
50483: NEG
50484: PUSH
50485: LD_INT 2
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 2
50495: NEG
50496: PUSH
50497: LD_INT 3
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: LD_INT 3
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 3
50519: NEG
50520: PUSH
50521: LD_INT 1
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 3
50531: NEG
50532: PUSH
50533: LD_INT 2
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50566: LD_ADDR_VAR 0 29
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: LD_INT 2
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: LD_INT 2
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 2
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 2
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: LD_INT 2
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: LD_INT 2
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 2
50732: NEG
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 2
50744: NEG
50745: PUSH
50746: LD_INT 2
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 2
50756: NEG
50757: PUSH
50758: LD_INT 3
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 2
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 3
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: LD_INT 3
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: LD_INT 2
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 3
50810: NEG
50811: PUSH
50812: LD_INT 2
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50845: LD_ADDR_VAR 0 30
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: LD_INT 1
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: LD_INT 1
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 1
50903: NEG
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: NEG
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: LD_INT 2
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: LD_INT 2
50941: NEG
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 2
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 2
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: LD_INT 2
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 1
50990: PUSH
50991: LD_INT 2
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 2
51011: NEG
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 2
51022: NEG
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: LD_INT 3
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: LD_INT 2
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 3
51057: PUSH
51058: LD_INT 2
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 2
51067: PUSH
51068: LD_INT 3
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 2
51077: NEG
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 3
51088: NEG
51089: PUSH
51090: LD_INT 1
51092: NEG
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51123: LD_ADDR_VAR 0 31
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: LD_INT 1
51196: NEG
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: LD_INT 2
51208: NEG
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 2
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 2
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 2
51247: PUSH
51248: LD_INT 2
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 1
51257: PUSH
51258: LD_INT 2
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: LD_INT 2
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 2
51288: NEG
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 2
51300: NEG
51301: PUSH
51302: LD_INT 2
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: LD_INT 3
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 2
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 3
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: LD_INT 3
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: LD_INT 2
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 3
51366: NEG
51367: PUSH
51368: LD_INT 2
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51401: LD_ADDR_VAR 0 32
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 1
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 1
51482: NEG
51483: PUSH
51484: LD_INT 2
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: LD_INT 2
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 2
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 2
51526: PUSH
51527: LD_INT 2
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: LD_INT 2
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: LD_INT 2
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 2
51567: NEG
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 2
51578: NEG
51579: PUSH
51580: LD_INT 1
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: LD_INT 3
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 2
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 3
51613: PUSH
51614: LD_INT 2
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 2
51623: PUSH
51624: LD_INT 3
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 2
51633: NEG
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 3
51644: NEG
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51679: LD_ADDR_VAR 0 33
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: LD_INT 2
51764: NEG
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 2
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 2
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: LD_INT 2
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: LD_INT 2
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 2
51834: NEG
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 2
51845: NEG
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 2
51857: NEG
51858: PUSH
51859: LD_INT 2
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 2
51869: NEG
51870: PUSH
51871: LD_INT 3
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 2
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 3
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: LD_INT 3
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 3
51923: NEG
51924: PUSH
51925: LD_INT 2
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51958: LD_ADDR_VAR 0 34
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: LD_INT 2
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: LD_INT 2
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 2
52073: PUSH
52074: LD_INT 1
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 2
52083: PUSH
52084: LD_INT 2
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 1
52093: PUSH
52094: LD_INT 2
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 2
52114: NEG
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 2
52125: NEG
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 2
52137: NEG
52138: PUSH
52139: LD_INT 2
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: NEG
52150: PUSH
52151: LD_INT 3
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: PUSH
52162: LD_INT 2
52164: NEG
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 3
52172: PUSH
52173: LD_INT 2
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 2
52182: PUSH
52183: LD_INT 3
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 2
52192: NEG
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 3
52203: NEG
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52238: LD_ADDR_VAR 0 35
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 1
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: LD_INT 0
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 2
52319: PUSH
52320: LD_INT 1
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 2
52329: NEG
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52350: LD_ADDR_VAR 0 36
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: LD_INT 0
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: LD_INT 2
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 1
52443: PUSH
52444: LD_INT 2
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52462: LD_ADDR_VAR 0 37
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: LD_INT 1
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52574: LD_ADDR_VAR 0 38
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: LD_INT 1
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 2
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 2
52665: NEG
52666: PUSH
52667: LD_INT 1
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52686: LD_ADDR_VAR 0 39
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: LD_INT 2
52771: NEG
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: LD_INT 2
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52798: LD_ADDR_VAR 0 40
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 0
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: LD_INT 1
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: LD_INT 1
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52910: LD_ADDR_VAR 0 41
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: LD_INT 1
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: LD_INT 2
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 1
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 2
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 2
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: LD_INT 2
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: LD_INT 2
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: NEG
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 2
53065: NEG
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 2
53076: NEG
53077: PUSH
53078: LD_INT 1
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 2
53088: NEG
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 2
53100: NEG
53101: PUSH
53102: LD_INT 3
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 2
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 3
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 3
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 3
53143: PUSH
53144: LD_INT 2
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 3
53153: PUSH
53154: LD_INT 3
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: LD_INT 3
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 2
53173: NEG
53174: PUSH
53175: LD_INT 1
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 3
53184: NEG
53185: PUSH
53186: LD_INT 0
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 3
53195: NEG
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 3
53207: NEG
53208: PUSH
53209: LD_INT 2
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 3
53219: NEG
53220: PUSH
53221: LD_INT 3
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53260: LD_ADDR_VAR 0 42
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: LD_INT 2
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: LD_INT 2
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 2
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 2
53385: PUSH
53386: LD_INT 2
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: LD_INT 2
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: LD_INT 2
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: NEG
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 2
53426: NEG
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 2
53438: NEG
53439: PUSH
53440: LD_INT 2
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 2
53450: NEG
53451: PUSH
53452: LD_INT 3
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: LD_INT 3
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: LD_INT 3
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: LD_INT 2
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 3
53496: PUSH
53497: LD_INT 2
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 3
53506: PUSH
53507: LD_INT 3
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 2
53516: PUSH
53517: LD_INT 3
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: LD_INT 3
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: LD_INT 3
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: LD_INT 2
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 3
53557: NEG
53558: PUSH
53559: LD_INT 2
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 3
53569: NEG
53570: PUSH
53571: LD_INT 3
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53610: LD_ADDR_VAR 0 43
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: NEG
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: LD_INT 2
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 2
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 2
53735: PUSH
53736: LD_INT 1
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: LD_INT 2
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: LD_INT 2
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 1
53765: NEG
53766: PUSH
53767: LD_INT 1
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 2
53776: NEG
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 2
53787: NEG
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: LD_INT 3
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: LD_INT 3
53814: NEG
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: LD_INT 2
53825: NEG
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 2
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 3
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 3
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: LD_INT 3
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 3
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 2
53895: NEG
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 3
53906: NEG
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 3
53917: NEG
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53958: LD_ADDR_VAR 0 44
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: LD_INT 2
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 2
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 2
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 2
54082: PUSH
54083: LD_INT 2
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: LD_INT 2
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: LD_INT 1
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 2
54113: NEG
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 2
54124: NEG
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 2
54136: NEG
54137: PUSH
54138: LD_INT 2
54140: NEG
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 2
54148: NEG
54149: PUSH
54150: LD_INT 3
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 3
54171: PUSH
54172: LD_INT 0
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 3
54181: PUSH
54182: LD_INT 1
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 3
54191: PUSH
54192: LD_INT 2
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 3
54201: PUSH
54202: LD_INT 3
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: LD_INT 3
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 3
54232: NEG
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 3
54243: NEG
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 3
54255: NEG
54256: PUSH
54257: LD_INT 2
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 3
54267: NEG
54268: PUSH
54269: LD_INT 3
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54308: LD_ADDR_VAR 0 45
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 1
54389: NEG
54390: PUSH
54391: LD_INT 2
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: LD_INT 2
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 2
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 2
54433: PUSH
54434: LD_INT 2
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: LD_INT 2
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: LD_INT 2
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 2
54474: NEG
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 2
54486: NEG
54487: PUSH
54488: LD_INT 2
54490: NEG
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 2
54498: NEG
54499: PUSH
54500: LD_INT 3
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: LD_INT 3
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: LD_INT 3
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: LD_INT 2
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 3
54544: PUSH
54545: LD_INT 2
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 3
54554: PUSH
54555: LD_INT 3
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 2
54564: PUSH
54565: LD_INT 3
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: LD_INT 3
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: LD_INT 3
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: LD_INT 2
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 3
54605: NEG
54606: PUSH
54607: LD_INT 2
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 3
54617: NEG
54618: PUSH
54619: LD_INT 3
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54658: LD_ADDR_VAR 0 46
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 0
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 1
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: LD_INT 2
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: LD_INT 2
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 1
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 2
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 2
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 1
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: LD_INT 1
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 2
54824: NEG
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 2
54835: NEG
54836: PUSH
54837: LD_INT 1
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: LD_INT 3
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: LD_INT 3
54862: NEG
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: LD_INT 2
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 3
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 3
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: LD_INT 3
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: LD_INT 3
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: NEG
54933: PUSH
54934: LD_INT 2
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 2
54943: NEG
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 3
54954: NEG
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 3
54965: NEG
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55006: LD_ADDR_VAR 0 47
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: LD_INT 0
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: LD_INT 1
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 1
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 1
55044: PUSH
55045: LD_INT 1
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 1
55087: NEG
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: LD_INT 2
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: PUSH
55111: LD_INT 1
55113: NEG
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: LD_INT 1
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 2
55133: NEG
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55157: LD_ADDR_VAR 0 48
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 1
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: LD_INT 2
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: LD_INT 2
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 1
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 2
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 2
55282: PUSH
55283: LD_INT 1
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55304: LD_ADDR_VAR 0 49
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: LD_INT 1
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: LD_INT 1
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 1
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 2
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 2
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 2
55416: PUSH
55417: LD_INT 2
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: LD_INT 2
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55448: LD_ADDR_VAR 0 50
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: NEG
55518: PUSH
55519: LD_INT 1
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 2
55529: PUSH
55530: LD_INT 1
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 2
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: LD_INT 2
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 2
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55592: LD_ADDR_VAR 0 51
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: LD_INT 1
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: LD_INT 1
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: LD_INT 1
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: LD_INT 2
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 0
55683: PUSH
55684: LD_INT 2
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 2
55704: NEG
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 2
55715: NEG
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55739: LD_ADDR_VAR 0 52
55743: PUSH
55744: LD_INT 0
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: LD_INT 1
55812: NEG
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: LD_INT 2
55824: NEG
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 1
55832: NEG
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 2
55843: NEG
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 2
55854: NEG
55855: PUSH
55856: LD_INT 1
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 2
55866: NEG
55867: PUSH
55868: LD_INT 2
55870: NEG
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55890: LD_ADDR_VAR 0 53
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: LD_INT 0
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 0
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: LD_INT 1
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: NEG
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 1
55971: NEG
55972: PUSH
55973: LD_INT 2
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: LD_INT 2
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 2
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 2
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: LD_INT 2
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: LD_INT 2
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: LD_INT 2
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: LD_INT 1
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 2
56066: NEG
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 2
56077: NEG
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 2
56089: NEG
56090: PUSH
56091: LD_INT 2
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56120: LD_ADDR_VAR 0 54
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: LD_INT 1
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: LD_INT 1
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: LD_INT 2
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: LD_INT 2
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: LD_INT 1
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 2
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 2
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 2
56255: PUSH
56256: LD_INT 2
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: LD_INT 2
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: LD_INT 2
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 1
56285: NEG
56286: PUSH
56287: LD_INT 1
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 2
56296: NEG
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 2
56307: NEG
56308: PUSH
56309: LD_INT 1
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 2
56319: NEG
56320: PUSH
56321: LD_INT 2
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56350: LD_ADDR_VAR 0 55
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: LD_INT 0
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: LD_INT 1
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: LD_INT 2
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: LD_INT 2
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: LD_INT 1
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 2
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 2
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 2
56485: PUSH
56486: LD_INT 2
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: LD_INT 2
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: LD_INT 2
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: NEG
56516: PUSH
56517: LD_INT 1
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 2
56526: NEG
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 2
56537: NEG
56538: PUSH
56539: LD_INT 1
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 2
56549: NEG
56550: PUSH
56551: LD_INT 2
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56580: LD_ADDR_VAR 0 56
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 1
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 1
56638: NEG
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: LD_INT 1
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 1
56661: NEG
56662: PUSH
56663: LD_INT 2
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: LD_INT 1
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 2
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 2
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 2
56715: PUSH
56716: LD_INT 2
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: LD_INT 2
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: LD_INT 2
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: NEG
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 2
56756: NEG
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 2
56767: NEG
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 2
56779: NEG
56780: PUSH
56781: LD_INT 2
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56810: LD_ADDR_VAR 0 57
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: PUSH
56849: LD_INT 1
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 0
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 1
56868: NEG
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: LD_INT 2
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 0
56903: PUSH
56904: LD_INT 2
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 2
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 2
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 2
56945: PUSH
56946: LD_INT 2
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: LD_INT 2
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: LD_INT 2
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: LD_INT 1
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 2
56986: NEG
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 2
56997: NEG
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 2
57009: NEG
57010: PUSH
57011: LD_INT 2
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57040: LD_ADDR_VAR 0 58
57044: PUSH
57045: LD_INT 0
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 0
57057: PUSH
57058: LD_INT 1
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 1
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: NEG
57122: PUSH
57123: LD_INT 2
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: LD_INT 2
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 2
57155: PUSH
57156: LD_INT 0
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 2
57165: PUSH
57166: LD_INT 1
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 2
57175: PUSH
57176: LD_INT 2
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: LD_INT 2
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 0
57195: PUSH
57196: LD_INT 2
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 1
57205: NEG
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 2
57216: NEG
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 2
57227: NEG
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 2
57239: NEG
57240: PUSH
57241: LD_INT 2
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57270: LD_ADDR_VAR 0 59
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: LD_INT 1
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 1
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 1
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57358: LD_ADDR_VAR 0 60
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 0
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 1
57416: NEG
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: LD_INT 1
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57446: LD_ADDR_VAR 0 61
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: LD_INT 1
57466: NEG
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 1
57484: PUSH
57485: LD_INT 1
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 0
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 1
57504: NEG
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 1
57515: NEG
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57534: LD_ADDR_VAR 0 62
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 1
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 1
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: NEG
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: LD_INT 1
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57622: LD_ADDR_VAR 0 63
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: LD_INT 1
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: NEG
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57710: LD_ADDR_VAR 0 64
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 1
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: LD_INT 1
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 1
57768: NEG
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: LD_INT 1
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: ST_TO_ADDR
// end ; 1 :
57798: GO 63695
57800: LD_INT 1
57802: DOUBLE
57803: EQUAL
57804: IFTRUE 57808
57806: GO 60431
57808: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57809: LD_ADDR_VAR 0 11
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: PUSH
57818: LD_INT 3
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: LD_INT 3
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: LD_INT 2
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: LIST
57852: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57853: LD_ADDR_VAR 0 12
57857: PUSH
57858: LD_INT 2
57860: PUSH
57861: LD_INT 1
57863: NEG
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 3
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 3
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: LIST
57893: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57894: LD_ADDR_VAR 0 13
57898: PUSH
57899: LD_INT 3
57901: PUSH
57902: LD_INT 2
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 3
57911: PUSH
57912: LD_INT 3
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 2
57921: PUSH
57922: LD_INT 3
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: LIST
57933: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57934: LD_ADDR_VAR 0 14
57938: PUSH
57939: LD_INT 1
57941: PUSH
57942: LD_INT 3
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 0
57951: PUSH
57952: LD_INT 3
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 1
57961: NEG
57962: PUSH
57963: LD_INT 2
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: LIST
57974: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57975: LD_ADDR_VAR 0 15
57979: PUSH
57980: LD_INT 2
57982: NEG
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 3
57993: NEG
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 3
58004: NEG
58005: PUSH
58006: LD_INT 1
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: LIST
58018: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58019: LD_ADDR_VAR 0 16
58023: PUSH
58024: LD_INT 2
58026: NEG
58027: PUSH
58028: LD_INT 3
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 3
58038: NEG
58039: PUSH
58040: LD_INT 2
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 3
58050: NEG
58051: PUSH
58052: LD_INT 3
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: LIST
58064: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58065: LD_ADDR_VAR 0 17
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: LD_INT 3
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: LD_INT 3
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: LD_INT 2
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: LIST
58108: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58109: LD_ADDR_VAR 0 18
58113: PUSH
58114: LD_INT 2
58116: PUSH
58117: LD_INT 1
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 3
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 3
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: LIST
58149: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58150: LD_ADDR_VAR 0 19
58154: PUSH
58155: LD_INT 3
58157: PUSH
58158: LD_INT 2
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 3
58167: PUSH
58168: LD_INT 3
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 2
58177: PUSH
58178: LD_INT 3
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: LIST
58189: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58190: LD_ADDR_VAR 0 20
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: LD_INT 3
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: LD_INT 3
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 1
58217: NEG
58218: PUSH
58219: LD_INT 2
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: LIST
58230: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58231: LD_ADDR_VAR 0 21
58235: PUSH
58236: LD_INT 2
58238: NEG
58239: PUSH
58240: LD_INT 1
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 3
58249: NEG
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 3
58260: NEG
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: LIST
58274: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58275: LD_ADDR_VAR 0 22
58279: PUSH
58280: LD_INT 2
58282: NEG
58283: PUSH
58284: LD_INT 3
58286: NEG
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 3
58294: NEG
58295: PUSH
58296: LD_INT 2
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 3
58306: NEG
58307: PUSH
58308: LD_INT 3
58310: NEG
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: LIST
58320: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58321: LD_ADDR_VAR 0 23
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: LD_INT 3
58331: NEG
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 1
58339: NEG
58340: PUSH
58341: LD_INT 4
58343: NEG
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 1
58351: PUSH
58352: LD_INT 3
58354: NEG
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: LIST
58364: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58365: LD_ADDR_VAR 0 24
58369: PUSH
58370: LD_INT 3
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 3
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 4
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: LIST
58405: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58406: LD_ADDR_VAR 0 25
58410: PUSH
58411: LD_INT 3
58413: PUSH
58414: LD_INT 3
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 4
58423: PUSH
58424: LD_INT 3
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 3
58433: PUSH
58434: LD_INT 4
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: LIST
58445: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58446: LD_ADDR_VAR 0 26
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: LD_INT 3
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: LD_INT 4
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: LD_INT 3
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: LIST
58486: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58487: LD_ADDR_VAR 0 27
58491: PUSH
58492: LD_INT 3
58494: NEG
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 3
58505: NEG
58506: PUSH
58507: LD_INT 1
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 4
58516: NEG
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: LIST
58530: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58531: LD_ADDR_VAR 0 28
58535: PUSH
58536: LD_INT 3
58538: NEG
58539: PUSH
58540: LD_INT 3
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 3
58550: NEG
58551: PUSH
58552: LD_INT 4
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 4
58562: NEG
58563: PUSH
58564: LD_INT 3
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: LIST
58576: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58577: LD_ADDR_VAR 0 29
58581: PUSH
58582: LD_INT 1
58584: NEG
58585: PUSH
58586: LD_INT 3
58588: NEG
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 0
58596: PUSH
58597: LD_INT 3
58599: NEG
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 1
58607: PUSH
58608: LD_INT 2
58610: NEG
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: LD_INT 4
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: LD_INT 4
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 1
58641: PUSH
58642: LD_INT 3
58644: NEG
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: LD_INT 5
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 0
58664: PUSH
58665: LD_INT 5
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 1
58675: PUSH
58676: LD_INT 4
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 1
58686: NEG
58687: PUSH
58688: LD_INT 6
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 0
58698: PUSH
58699: LD_INT 6
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 1
58709: PUSH
58710: LD_INT 5
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58732: LD_ADDR_VAR 0 30
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: LD_INT 1
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 3
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 3
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 3
58770: PUSH
58771: LD_INT 1
58773: NEG
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 4
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 4
58791: PUSH
58792: LD_INT 1
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 4
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 5
58812: PUSH
58813: LD_INT 0
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 5
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 5
58832: PUSH
58833: LD_INT 1
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 6
58843: PUSH
58844: LD_INT 0
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 6
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58875: LD_ADDR_VAR 0 31
58879: PUSH
58880: LD_INT 3
58882: PUSH
58883: LD_INT 2
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 3
58892: PUSH
58893: LD_INT 3
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 2
58902: PUSH
58903: LD_INT 3
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 4
58912: PUSH
58913: LD_INT 3
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 4
58922: PUSH
58923: LD_INT 4
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 3
58932: PUSH
58933: LD_INT 4
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 5
58942: PUSH
58943: LD_INT 4
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 5
58952: PUSH
58953: LD_INT 5
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 4
58962: PUSH
58963: LD_INT 5
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 6
58972: PUSH
58973: LD_INT 5
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 6
58982: PUSH
58983: LD_INT 6
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 5
58992: PUSH
58993: LD_INT 6
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59014: LD_ADDR_VAR 0 32
59018: PUSH
59019: LD_INT 1
59021: PUSH
59022: LD_INT 3
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 0
59031: PUSH
59032: LD_INT 3
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 1
59041: NEG
59042: PUSH
59043: LD_INT 2
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: LD_INT 4
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: LD_INT 4
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: LD_INT 3
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 1
59083: PUSH
59084: LD_INT 5
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: LD_INT 5
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 1
59103: NEG
59104: PUSH
59105: LD_INT 4
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 1
59114: PUSH
59115: LD_INT 6
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 0
59124: PUSH
59125: LD_INT 6
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 1
59134: NEG
59135: PUSH
59136: LD_INT 5
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59157: LD_ADDR_VAR 0 33
59161: PUSH
59162: LD_INT 2
59164: NEG
59165: PUSH
59166: LD_INT 1
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 3
59175: NEG
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 3
59186: NEG
59187: PUSH
59188: LD_INT 1
59190: NEG
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 3
59198: NEG
59199: PUSH
59200: LD_INT 1
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 4
59209: NEG
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 4
59220: NEG
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 4
59232: NEG
59233: PUSH
59234: LD_INT 1
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 5
59243: NEG
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 5
59254: NEG
59255: PUSH
59256: LD_INT 1
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 5
59266: NEG
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 6
59277: NEG
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 6
59288: NEG
59289: PUSH
59290: LD_INT 1
59292: NEG
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59312: LD_ADDR_VAR 0 34
59316: PUSH
59317: LD_INT 2
59319: NEG
59320: PUSH
59321: LD_INT 3
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 3
59331: NEG
59332: PUSH
59333: LD_INT 2
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 3
59343: NEG
59344: PUSH
59345: LD_INT 3
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 3
59355: NEG
59356: PUSH
59357: LD_INT 4
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 4
59367: NEG
59368: PUSH
59369: LD_INT 3
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 4
59379: NEG
59380: PUSH
59381: LD_INT 4
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 4
59391: NEG
59392: PUSH
59393: LD_INT 5
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 5
59403: NEG
59404: PUSH
59405: LD_INT 4
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 5
59415: NEG
59416: PUSH
59417: LD_INT 5
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 5
59427: NEG
59428: PUSH
59429: LD_INT 6
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 6
59439: NEG
59440: PUSH
59441: LD_INT 5
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 6
59451: NEG
59452: PUSH
59453: LD_INT 6
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59475: LD_ADDR_VAR 0 41
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: LD_INT 2
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 1
59493: NEG
59494: PUSH
59495: LD_INT 3
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 1
59505: PUSH
59506: LD_INT 2
59508: NEG
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: LIST
59518: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59519: LD_ADDR_VAR 0 42
59523: PUSH
59524: LD_INT 2
59526: PUSH
59527: LD_INT 0
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 2
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 3
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: LIST
59559: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59560: LD_ADDR_VAR 0 43
59564: PUSH
59565: LD_INT 2
59567: PUSH
59568: LD_INT 2
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 3
59577: PUSH
59578: LD_INT 2
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 2
59587: PUSH
59588: LD_INT 3
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: LIST
59599: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59600: LD_ADDR_VAR 0 44
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: LD_INT 2
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: LD_INT 3
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 1
59627: NEG
59628: PUSH
59629: LD_INT 2
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: LIST
59640: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59641: LD_ADDR_VAR 0 45
59645: PUSH
59646: LD_INT 2
59648: NEG
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 2
59659: NEG
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 3
59670: NEG
59671: PUSH
59672: LD_INT 1
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: LIST
59684: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59685: LD_ADDR_VAR 0 46
59689: PUSH
59690: LD_INT 2
59692: NEG
59693: PUSH
59694: LD_INT 2
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 2
59704: NEG
59705: PUSH
59706: LD_INT 3
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 3
59716: NEG
59717: PUSH
59718: LD_INT 2
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: LIST
59730: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59731: LD_ADDR_VAR 0 47
59735: PUSH
59736: LD_INT 2
59738: NEG
59739: PUSH
59740: LD_INT 3
59742: NEG
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: LD_INT 3
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59764: LD_ADDR_VAR 0 48
59768: PUSH
59769: LD_INT 1
59771: PUSH
59772: LD_INT 2
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 2
59782: PUSH
59783: LD_INT 1
59785: NEG
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59795: LD_ADDR_VAR 0 49
59799: PUSH
59800: LD_INT 3
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 3
59812: PUSH
59813: LD_INT 2
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59824: LD_ADDR_VAR 0 50
59828: PUSH
59829: LD_INT 2
59831: PUSH
59832: LD_INT 3
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 1
59841: PUSH
59842: LD_INT 3
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59853: LD_ADDR_VAR 0 51
59857: PUSH
59858: LD_INT 1
59860: NEG
59861: PUSH
59862: LD_INT 2
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 2
59871: NEG
59872: PUSH
59873: LD_INT 1
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59884: LD_ADDR_VAR 0 52
59888: PUSH
59889: LD_INT 3
59891: NEG
59892: PUSH
59893: LD_INT 1
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 3
59903: NEG
59904: PUSH
59905: LD_INT 2
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59917: LD_ADDR_VAR 0 53
59921: PUSH
59922: LD_INT 1
59924: NEG
59925: PUSH
59926: LD_INT 3
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 0
59936: PUSH
59937: LD_INT 3
59939: NEG
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 1
59947: PUSH
59948: LD_INT 2
59950: NEG
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: LIST
59960: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59961: LD_ADDR_VAR 0 54
59965: PUSH
59966: LD_INT 2
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 3
59979: PUSH
59980: LD_INT 0
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 3
59989: PUSH
59990: LD_INT 1
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: LIST
60001: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60002: LD_ADDR_VAR 0 55
60006: PUSH
60007: LD_INT 3
60009: PUSH
60010: LD_INT 2
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 3
60019: PUSH
60020: LD_INT 3
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 2
60029: PUSH
60030: LD_INT 3
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: LIST
60041: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60042: LD_ADDR_VAR 0 56
60046: PUSH
60047: LD_INT 1
60049: PUSH
60050: LD_INT 3
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 0
60059: PUSH
60060: LD_INT 3
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 1
60069: NEG
60070: PUSH
60071: LD_INT 2
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: LIST
60082: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60083: LD_ADDR_VAR 0 57
60087: PUSH
60088: LD_INT 2
60090: NEG
60091: PUSH
60092: LD_INT 1
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 3
60101: NEG
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 3
60112: NEG
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: LIST
60126: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60127: LD_ADDR_VAR 0 58
60131: PUSH
60132: LD_INT 2
60134: NEG
60135: PUSH
60136: LD_INT 3
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 3
60146: NEG
60147: PUSH
60148: LD_INT 2
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 3
60158: NEG
60159: PUSH
60160: LD_INT 3
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: LIST
60172: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60173: LD_ADDR_VAR 0 59
60177: PUSH
60178: LD_INT 1
60180: NEG
60181: PUSH
60182: LD_INT 2
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: LD_INT 2
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 1
60203: PUSH
60204: LD_INT 1
60206: NEG
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: LIST
60216: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60217: LD_ADDR_VAR 0 60
60221: PUSH
60222: LD_INT 1
60224: PUSH
60225: LD_INT 1
60227: NEG
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 2
60235: PUSH
60236: LD_INT 0
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 2
60245: PUSH
60246: LD_INT 1
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: LIST
60257: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60258: LD_ADDR_VAR 0 61
60262: PUSH
60263: LD_INT 2
60265: PUSH
60266: LD_INT 1
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 2
60275: PUSH
60276: LD_INT 2
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 1
60285: PUSH
60286: LD_INT 2
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: LIST
60297: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60298: LD_ADDR_VAR 0 62
60302: PUSH
60303: LD_INT 1
60305: PUSH
60306: LD_INT 2
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 0
60315: PUSH
60316: LD_INT 2
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 1
60325: NEG
60326: PUSH
60327: LD_INT 1
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: LIST
60338: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60339: LD_ADDR_VAR 0 63
60343: PUSH
60344: LD_INT 1
60346: NEG
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 2
60357: NEG
60358: PUSH
60359: LD_INT 0
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 2
60368: NEG
60369: PUSH
60370: LD_INT 1
60372: NEG
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: LIST
60382: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60383: LD_ADDR_VAR 0 64
60387: PUSH
60388: LD_INT 1
60390: NEG
60391: PUSH
60392: LD_INT 2
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 2
60402: NEG
60403: PUSH
60404: LD_INT 1
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 2
60414: NEG
60415: PUSH
60416: LD_INT 2
60418: NEG
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: LIST
60428: ST_TO_ADDR
// end ; 2 :
60429: GO 63695
60431: LD_INT 2
60433: DOUBLE
60434: EQUAL
60435: IFTRUE 60439
60437: GO 63694
60439: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60440: LD_ADDR_VAR 0 29
60444: PUSH
60445: LD_INT 4
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 4
60457: PUSH
60458: LD_INT 1
60460: NEG
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 5
60468: PUSH
60469: LD_INT 0
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 5
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 4
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 3
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 3
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 3
60519: PUSH
60520: LD_INT 2
60522: NEG
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 5
60530: PUSH
60531: LD_INT 2
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 3
60540: PUSH
60541: LD_INT 3
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 3
60550: PUSH
60551: LD_INT 2
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 4
60560: PUSH
60561: LD_INT 3
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 4
60570: PUSH
60571: LD_INT 4
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 3
60580: PUSH
60581: LD_INT 4
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 2
60590: PUSH
60591: LD_INT 3
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 2
60600: PUSH
60601: LD_INT 2
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 4
60610: PUSH
60611: LD_INT 2
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 2
60620: PUSH
60621: LD_INT 4
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: LD_INT 4
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 0
60640: PUSH
60641: LD_INT 3
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 1
60650: PUSH
60651: LD_INT 4
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 1
60660: PUSH
60661: LD_INT 5
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 0
60670: PUSH
60671: LD_INT 5
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: LD_INT 4
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: LD_INT 3
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 2
60702: PUSH
60703: LD_INT 5
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 2
60712: NEG
60713: PUSH
60714: LD_INT 3
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 3
60723: NEG
60724: PUSH
60725: LD_INT 0
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 3
60734: NEG
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 2
60746: NEG
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 2
60757: NEG
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 3
60768: NEG
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 4
60779: NEG
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 4
60790: NEG
60791: PUSH
60792: LD_INT 1
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 4
60802: NEG
60803: PUSH
60804: LD_INT 2
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 2
60814: NEG
60815: PUSH
60816: LD_INT 2
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 4
60825: NEG
60826: PUSH
60827: LD_INT 4
60829: NEG
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 4
60837: NEG
60838: PUSH
60839: LD_INT 5
60841: NEG
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 3
60849: NEG
60850: PUSH
60851: LD_INT 4
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 3
60861: NEG
60862: PUSH
60863: LD_INT 3
60865: NEG
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 4
60873: NEG
60874: PUSH
60875: LD_INT 3
60877: NEG
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 5
60885: NEG
60886: PUSH
60887: LD_INT 4
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 5
60897: NEG
60898: PUSH
60899: LD_INT 5
60901: NEG
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 3
60909: NEG
60910: PUSH
60911: LD_INT 5
60913: NEG
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 5
60921: NEG
60922: PUSH
60923: LD_INT 3
60925: NEG
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60978: LD_ADDR_VAR 0 30
60982: PUSH
60983: LD_INT 4
60985: PUSH
60986: LD_INT 4
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 4
60995: PUSH
60996: LD_INT 3
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 5
61005: PUSH
61006: LD_INT 4
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 5
61015: PUSH
61016: LD_INT 5
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 4
61025: PUSH
61026: LD_INT 5
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 3
61035: PUSH
61036: LD_INT 4
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 3
61045: PUSH
61046: LD_INT 3
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 5
61055: PUSH
61056: LD_INT 3
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 3
61065: PUSH
61066: LD_INT 5
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: LD_INT 3
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: LD_INT 2
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 1
61095: PUSH
61096: LD_INT 3
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: LD_INT 4
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 0
61115: PUSH
61116: LD_INT 4
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 1
61125: NEG
61126: PUSH
61127: LD_INT 3
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 1
61136: NEG
61137: PUSH
61138: LD_INT 2
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 2
61147: PUSH
61148: LD_INT 4
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 2
61157: NEG
61158: PUSH
61159: LD_INT 2
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 4
61168: NEG
61169: PUSH
61170: LD_INT 0
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 4
61179: NEG
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 3
61191: NEG
61192: PUSH
61193: LD_INT 0
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 3
61202: NEG
61203: PUSH
61204: LD_INT 1
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 4
61213: NEG
61214: PUSH
61215: LD_INT 1
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 5
61224: NEG
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 5
61235: NEG
61236: PUSH
61237: LD_INT 1
61239: NEG
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 5
61247: NEG
61248: PUSH
61249: LD_INT 2
61251: NEG
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 3
61259: NEG
61260: PUSH
61261: LD_INT 2
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 3
61270: NEG
61271: PUSH
61272: LD_INT 3
61274: NEG
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 3
61282: NEG
61283: PUSH
61284: LD_INT 4
61286: NEG
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 2
61294: NEG
61295: PUSH
61296: LD_INT 3
61298: NEG
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 2
61306: NEG
61307: PUSH
61308: LD_INT 2
61310: NEG
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 3
61318: NEG
61319: PUSH
61320: LD_INT 2
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 4
61330: NEG
61331: PUSH
61332: LD_INT 3
61334: NEG
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 4
61342: NEG
61343: PUSH
61344: LD_INT 4
61346: NEG
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 2
61354: NEG
61355: PUSH
61356: LD_INT 4
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 4
61366: NEG
61367: PUSH
61368: LD_INT 2
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: LD_INT 4
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 0
61389: PUSH
61390: LD_INT 5
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 1
61400: PUSH
61401: LD_INT 4
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: LD_INT 3
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: LD_INT 3
61425: NEG
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 1
61433: NEG
61434: PUSH
61435: LD_INT 4
61437: NEG
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 1
61445: NEG
61446: PUSH
61447: LD_INT 5
61449: NEG
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 2
61457: PUSH
61458: LD_INT 3
61460: NEG
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 2
61468: NEG
61469: PUSH
61470: LD_INT 5
61472: NEG
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61525: LD_ADDR_VAR 0 31
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: LD_INT 4
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 0
61542: PUSH
61543: LD_INT 3
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 1
61552: PUSH
61553: LD_INT 4
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: LD_INT 5
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: LD_INT 5
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 1
61582: NEG
61583: PUSH
61584: LD_INT 4
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 1
61593: NEG
61594: PUSH
61595: LD_INT 3
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 2
61604: PUSH
61605: LD_INT 5
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 2
61614: NEG
61615: PUSH
61616: LD_INT 3
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 3
61625: NEG
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 3
61636: NEG
61637: PUSH
61638: LD_INT 1
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 2
61648: NEG
61649: PUSH
61650: LD_INT 0
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 2
61659: NEG
61660: PUSH
61661: LD_INT 1
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 3
61670: NEG
61671: PUSH
61672: LD_INT 1
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 4
61681: NEG
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 4
61692: NEG
61693: PUSH
61694: LD_INT 1
61696: NEG
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 4
61704: NEG
61705: PUSH
61706: LD_INT 2
61708: NEG
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 2
61716: NEG
61717: PUSH
61718: LD_INT 2
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 4
61727: NEG
61728: PUSH
61729: LD_INT 4
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 4
61739: NEG
61740: PUSH
61741: LD_INT 5
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 3
61751: NEG
61752: PUSH
61753: LD_INT 4
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 3
61763: NEG
61764: PUSH
61765: LD_INT 3
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 4
61775: NEG
61776: PUSH
61777: LD_INT 3
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 5
61787: NEG
61788: PUSH
61789: LD_INT 4
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 5
61799: NEG
61800: PUSH
61801: LD_INT 5
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 3
61811: NEG
61812: PUSH
61813: LD_INT 5
61815: NEG
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 5
61823: NEG
61824: PUSH
61825: LD_INT 3
61827: NEG
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: LD_INT 3
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 0
61846: PUSH
61847: LD_INT 4
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 1
61857: PUSH
61858: LD_INT 3
61860: NEG
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 1
61868: PUSH
61869: LD_INT 2
61871: NEG
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: LD_INT 2
61882: NEG
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 1
61890: NEG
61891: PUSH
61892: LD_INT 3
61894: NEG
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 1
61902: NEG
61903: PUSH
61904: LD_INT 4
61906: NEG
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 2
61914: PUSH
61915: LD_INT 2
61917: NEG
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 2
61925: NEG
61926: PUSH
61927: LD_INT 4
61929: NEG
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 4
61937: PUSH
61938: LD_INT 0
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 4
61947: PUSH
61948: LD_INT 1
61950: NEG
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 5
61958: PUSH
61959: LD_INT 0
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 5
61968: PUSH
61969: LD_INT 1
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 4
61978: PUSH
61979: LD_INT 1
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 3
61988: PUSH
61989: LD_INT 0
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 3
61998: PUSH
61999: LD_INT 1
62001: NEG
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 3
62009: PUSH
62010: LD_INT 2
62012: NEG
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 5
62020: PUSH
62021: LD_INT 2
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62075: LD_ADDR_VAR 0 32
62079: PUSH
62080: LD_INT 4
62082: NEG
62083: PUSH
62084: LD_INT 0
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 4
62093: NEG
62094: PUSH
62095: LD_INT 1
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 3
62105: NEG
62106: PUSH
62107: LD_INT 0
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 3
62116: NEG
62117: PUSH
62118: LD_INT 1
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 4
62127: NEG
62128: PUSH
62129: LD_INT 1
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 5
62138: NEG
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 5
62149: NEG
62150: PUSH
62151: LD_INT 1
62153: NEG
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 5
62161: NEG
62162: PUSH
62163: LD_INT 2
62165: NEG
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 3
62173: NEG
62174: PUSH
62175: LD_INT 2
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 3
62184: NEG
62185: PUSH
62186: LD_INT 3
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 3
62196: NEG
62197: PUSH
62198: LD_INT 4
62200: NEG
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 2
62208: NEG
62209: PUSH
62210: LD_INT 3
62212: NEG
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 2
62220: NEG
62221: PUSH
62222: LD_INT 2
62224: NEG
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 3
62232: NEG
62233: PUSH
62234: LD_INT 2
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 4
62244: NEG
62245: PUSH
62246: LD_INT 3
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 4
62256: NEG
62257: PUSH
62258: LD_INT 4
62260: NEG
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 2
62268: NEG
62269: PUSH
62270: LD_INT 4
62272: NEG
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 4
62280: NEG
62281: PUSH
62282: LD_INT 2
62284: NEG
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 0
62292: PUSH
62293: LD_INT 4
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: LD_INT 5
62306: NEG
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 1
62314: PUSH
62315: LD_INT 4
62317: NEG
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 1
62325: PUSH
62326: LD_INT 3
62328: NEG
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 0
62336: PUSH
62337: LD_INT 3
62339: NEG
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 1
62347: NEG
62348: PUSH
62349: LD_INT 4
62351: NEG
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 1
62359: NEG
62360: PUSH
62361: LD_INT 5
62363: NEG
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 2
62371: PUSH
62372: LD_INT 3
62374: NEG
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 2
62382: NEG
62383: PUSH
62384: LD_INT 5
62386: NEG
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 3
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 3
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 4
62415: PUSH
62416: LD_INT 0
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 4
62425: PUSH
62426: LD_INT 1
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 3
62435: PUSH
62436: LD_INT 1
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 2
62445: PUSH
62446: LD_INT 0
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 2
62455: PUSH
62456: LD_INT 1
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 2
62466: PUSH
62467: LD_INT 2
62469: NEG
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 4
62477: PUSH
62478: LD_INT 2
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 4
62487: PUSH
62488: LD_INT 4
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 4
62497: PUSH
62498: LD_INT 3
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 5
62507: PUSH
62508: LD_INT 4
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 5
62517: PUSH
62518: LD_INT 5
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 4
62527: PUSH
62528: LD_INT 5
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 3
62537: PUSH
62538: LD_INT 4
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 3
62547: PUSH
62548: LD_INT 3
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 5
62557: PUSH
62558: LD_INT 3
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 3
62567: PUSH
62568: LD_INT 5
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62622: LD_ADDR_VAR 0 33
62626: PUSH
62627: LD_INT 4
62629: NEG
62630: PUSH
62631: LD_INT 4
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 4
62641: NEG
62642: PUSH
62643: LD_INT 5
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 3
62653: NEG
62654: PUSH
62655: LD_INT 4
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 3
62665: NEG
62666: PUSH
62667: LD_INT 3
62669: NEG
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 4
62677: NEG
62678: PUSH
62679: LD_INT 3
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 5
62689: NEG
62690: PUSH
62691: LD_INT 4
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 5
62701: NEG
62702: PUSH
62703: LD_INT 5
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 3
62713: NEG
62714: PUSH
62715: LD_INT 5
62717: NEG
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 5
62725: NEG
62726: PUSH
62727: LD_INT 3
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 0
62737: PUSH
62738: LD_INT 3
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 0
62748: PUSH
62749: LD_INT 4
62751: NEG
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 1
62759: PUSH
62760: LD_INT 3
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 1
62770: PUSH
62771: LD_INT 2
62773: NEG
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 0
62781: PUSH
62782: LD_INT 2
62784: NEG
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 1
62792: NEG
62793: PUSH
62794: LD_INT 3
62796: NEG
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 1
62804: NEG
62805: PUSH
62806: LD_INT 4
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 2
62816: PUSH
62817: LD_INT 2
62819: NEG
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 2
62827: NEG
62828: PUSH
62829: LD_INT 4
62831: NEG
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 4
62839: PUSH
62840: LD_INT 0
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 4
62849: PUSH
62850: LD_INT 1
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 5
62860: PUSH
62861: LD_INT 0
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 5
62870: PUSH
62871: LD_INT 1
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 4
62880: PUSH
62881: LD_INT 1
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 3
62890: PUSH
62891: LD_INT 0
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 3
62900: PUSH
62901: LD_INT 1
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 3
62911: PUSH
62912: LD_INT 2
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 5
62922: PUSH
62923: LD_INT 2
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 3
62932: PUSH
62933: LD_INT 3
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 3
62942: PUSH
62943: LD_INT 2
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 4
62952: PUSH
62953: LD_INT 3
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 4
62962: PUSH
62963: LD_INT 4
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 3
62972: PUSH
62973: LD_INT 4
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 2
62982: PUSH
62983: LD_INT 3
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 2
62992: PUSH
62993: LD_INT 2
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 4
63002: PUSH
63003: LD_INT 2
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 2
63012: PUSH
63013: LD_INT 4
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 0
63022: PUSH
63023: LD_INT 4
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 0
63032: PUSH
63033: LD_INT 3
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 1
63042: PUSH
63043: LD_INT 4
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 1
63052: PUSH
63053: LD_INT 5
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 0
63062: PUSH
63063: LD_INT 5
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 1
63072: NEG
63073: PUSH
63074: LD_INT 4
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 1
63083: NEG
63084: PUSH
63085: LD_INT 3
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 2
63094: PUSH
63095: LD_INT 5
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 2
63104: NEG
63105: PUSH
63106: LD_INT 3
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63160: LD_ADDR_VAR 0 34
63164: PUSH
63165: LD_INT 0
63167: PUSH
63168: LD_INT 4
63170: NEG
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 0
63178: PUSH
63179: LD_INT 5
63181: NEG
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 1
63189: PUSH
63190: LD_INT 4
63192: NEG
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 1
63200: PUSH
63201: LD_INT 3
63203: NEG
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 0
63211: PUSH
63212: LD_INT 3
63214: NEG
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 1
63222: NEG
63223: PUSH
63224: LD_INT 4
63226: NEG
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 1
63234: NEG
63235: PUSH
63236: LD_INT 5
63238: NEG
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 2
63246: PUSH
63247: LD_INT 3
63249: NEG
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 2
63257: NEG
63258: PUSH
63259: LD_INT 5
63261: NEG
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 3
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 3
63279: PUSH
63280: LD_INT 1
63282: NEG
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 4
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 4
63300: PUSH
63301: LD_INT 1
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 3
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 2
63320: PUSH
63321: LD_INT 0
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 2
63330: PUSH
63331: LD_INT 1
63333: NEG
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 2
63341: PUSH
63342: LD_INT 2
63344: NEG
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 4
63352: PUSH
63353: LD_INT 2
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 4
63362: PUSH
63363: LD_INT 4
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 4
63372: PUSH
63373: LD_INT 3
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 5
63382: PUSH
63383: LD_INT 4
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 5
63392: PUSH
63393: LD_INT 5
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 4
63402: PUSH
63403: LD_INT 5
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 3
63412: PUSH
63413: LD_INT 4
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 3
63422: PUSH
63423: LD_INT 3
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 5
63432: PUSH
63433: LD_INT 3
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 3
63442: PUSH
63443: LD_INT 5
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: LD_INT 3
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 0
63462: PUSH
63463: LD_INT 2
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 1
63472: PUSH
63473: LD_INT 3
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 1
63482: PUSH
63483: LD_INT 4
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 0
63492: PUSH
63493: LD_INT 4
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 1
63502: NEG
63503: PUSH
63504: LD_INT 3
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 1
63513: NEG
63514: PUSH
63515: LD_INT 2
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 2
63524: PUSH
63525: LD_INT 4
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 2
63534: NEG
63535: PUSH
63536: LD_INT 2
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 4
63545: NEG
63546: PUSH
63547: LD_INT 0
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 4
63556: NEG
63557: PUSH
63558: LD_INT 1
63560: NEG
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 3
63568: NEG
63569: PUSH
63570: LD_INT 0
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 3
63579: NEG
63580: PUSH
63581: LD_INT 1
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 4
63590: NEG
63591: PUSH
63592: LD_INT 1
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 5
63601: NEG
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 5
63612: NEG
63613: PUSH
63614: LD_INT 1
63616: NEG
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 5
63624: NEG
63625: PUSH
63626: LD_INT 2
63628: NEG
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 3
63636: NEG
63637: PUSH
63638: LD_INT 2
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: ST_TO_ADDR
// end ; end ;
63692: GO 63695
63694: POP
// case btype of b_depot , b_warehouse :
63695: LD_VAR 0 1
63699: PUSH
63700: LD_INT 0
63702: DOUBLE
63703: EQUAL
63704: IFTRUE 63714
63706: LD_INT 1
63708: DOUBLE
63709: EQUAL
63710: IFTRUE 63714
63712: GO 63915
63714: POP
// case nation of nation_american :
63715: LD_VAR 0 5
63719: PUSH
63720: LD_INT 1
63722: DOUBLE
63723: EQUAL
63724: IFTRUE 63728
63726: GO 63784
63728: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63729: LD_ADDR_VAR 0 9
63733: PUSH
63734: LD_VAR 0 11
63738: PUSH
63739: LD_VAR 0 12
63743: PUSH
63744: LD_VAR 0 13
63748: PUSH
63749: LD_VAR 0 14
63753: PUSH
63754: LD_VAR 0 15
63758: PUSH
63759: LD_VAR 0 16
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: PUSH
63772: LD_VAR 0 4
63776: PUSH
63777: LD_INT 1
63779: PLUS
63780: ARRAY
63781: ST_TO_ADDR
63782: GO 63913
63784: LD_INT 2
63786: DOUBLE
63787: EQUAL
63788: IFTRUE 63792
63790: GO 63848
63792: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63793: LD_ADDR_VAR 0 9
63797: PUSH
63798: LD_VAR 0 17
63802: PUSH
63803: LD_VAR 0 18
63807: PUSH
63808: LD_VAR 0 19
63812: PUSH
63813: LD_VAR 0 20
63817: PUSH
63818: LD_VAR 0 21
63822: PUSH
63823: LD_VAR 0 22
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: PUSH
63836: LD_VAR 0 4
63840: PUSH
63841: LD_INT 1
63843: PLUS
63844: ARRAY
63845: ST_TO_ADDR
63846: GO 63913
63848: LD_INT 3
63850: DOUBLE
63851: EQUAL
63852: IFTRUE 63856
63854: GO 63912
63856: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63857: LD_ADDR_VAR 0 9
63861: PUSH
63862: LD_VAR 0 23
63866: PUSH
63867: LD_VAR 0 24
63871: PUSH
63872: LD_VAR 0 25
63876: PUSH
63877: LD_VAR 0 26
63881: PUSH
63882: LD_VAR 0 27
63886: PUSH
63887: LD_VAR 0 28
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: PUSH
63900: LD_VAR 0 4
63904: PUSH
63905: LD_INT 1
63907: PLUS
63908: ARRAY
63909: ST_TO_ADDR
63910: GO 63913
63912: POP
63913: GO 64468
63915: LD_INT 2
63917: DOUBLE
63918: EQUAL
63919: IFTRUE 63929
63921: LD_INT 3
63923: DOUBLE
63924: EQUAL
63925: IFTRUE 63929
63927: GO 63985
63929: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63930: LD_ADDR_VAR 0 9
63934: PUSH
63935: LD_VAR 0 29
63939: PUSH
63940: LD_VAR 0 30
63944: PUSH
63945: LD_VAR 0 31
63949: PUSH
63950: LD_VAR 0 32
63954: PUSH
63955: LD_VAR 0 33
63959: PUSH
63960: LD_VAR 0 34
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: PUSH
63973: LD_VAR 0 4
63977: PUSH
63978: LD_INT 1
63980: PLUS
63981: ARRAY
63982: ST_TO_ADDR
63983: GO 64468
63985: LD_INT 16
63987: DOUBLE
63988: EQUAL
63989: IFTRUE 64047
63991: LD_INT 17
63993: DOUBLE
63994: EQUAL
63995: IFTRUE 64047
63997: LD_INT 18
63999: DOUBLE
64000: EQUAL
64001: IFTRUE 64047
64003: LD_INT 19
64005: DOUBLE
64006: EQUAL
64007: IFTRUE 64047
64009: LD_INT 22
64011: DOUBLE
64012: EQUAL
64013: IFTRUE 64047
64015: LD_INT 20
64017: DOUBLE
64018: EQUAL
64019: IFTRUE 64047
64021: LD_INT 21
64023: DOUBLE
64024: EQUAL
64025: IFTRUE 64047
64027: LD_INT 23
64029: DOUBLE
64030: EQUAL
64031: IFTRUE 64047
64033: LD_INT 24
64035: DOUBLE
64036: EQUAL
64037: IFTRUE 64047
64039: LD_INT 25
64041: DOUBLE
64042: EQUAL
64043: IFTRUE 64047
64045: GO 64103
64047: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64048: LD_ADDR_VAR 0 9
64052: PUSH
64053: LD_VAR 0 35
64057: PUSH
64058: LD_VAR 0 36
64062: PUSH
64063: LD_VAR 0 37
64067: PUSH
64068: LD_VAR 0 38
64072: PUSH
64073: LD_VAR 0 39
64077: PUSH
64078: LD_VAR 0 40
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: PUSH
64091: LD_VAR 0 4
64095: PUSH
64096: LD_INT 1
64098: PLUS
64099: ARRAY
64100: ST_TO_ADDR
64101: GO 64468
64103: LD_INT 6
64105: DOUBLE
64106: EQUAL
64107: IFTRUE 64159
64109: LD_INT 7
64111: DOUBLE
64112: EQUAL
64113: IFTRUE 64159
64115: LD_INT 8
64117: DOUBLE
64118: EQUAL
64119: IFTRUE 64159
64121: LD_INT 13
64123: DOUBLE
64124: EQUAL
64125: IFTRUE 64159
64127: LD_INT 12
64129: DOUBLE
64130: EQUAL
64131: IFTRUE 64159
64133: LD_INT 15
64135: DOUBLE
64136: EQUAL
64137: IFTRUE 64159
64139: LD_INT 11
64141: DOUBLE
64142: EQUAL
64143: IFTRUE 64159
64145: LD_INT 14
64147: DOUBLE
64148: EQUAL
64149: IFTRUE 64159
64151: LD_INT 10
64153: DOUBLE
64154: EQUAL
64155: IFTRUE 64159
64157: GO 64215
64159: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64160: LD_ADDR_VAR 0 9
64164: PUSH
64165: LD_VAR 0 41
64169: PUSH
64170: LD_VAR 0 42
64174: PUSH
64175: LD_VAR 0 43
64179: PUSH
64180: LD_VAR 0 44
64184: PUSH
64185: LD_VAR 0 45
64189: PUSH
64190: LD_VAR 0 46
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: PUSH
64203: LD_VAR 0 4
64207: PUSH
64208: LD_INT 1
64210: PLUS
64211: ARRAY
64212: ST_TO_ADDR
64213: GO 64468
64215: LD_INT 36
64217: DOUBLE
64218: EQUAL
64219: IFTRUE 64223
64221: GO 64279
64223: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64224: LD_ADDR_VAR 0 9
64228: PUSH
64229: LD_VAR 0 47
64233: PUSH
64234: LD_VAR 0 48
64238: PUSH
64239: LD_VAR 0 49
64243: PUSH
64244: LD_VAR 0 50
64248: PUSH
64249: LD_VAR 0 51
64253: PUSH
64254: LD_VAR 0 52
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: PUSH
64267: LD_VAR 0 4
64271: PUSH
64272: LD_INT 1
64274: PLUS
64275: ARRAY
64276: ST_TO_ADDR
64277: GO 64468
64279: LD_INT 4
64281: DOUBLE
64282: EQUAL
64283: IFTRUE 64305
64285: LD_INT 5
64287: DOUBLE
64288: EQUAL
64289: IFTRUE 64305
64291: LD_INT 34
64293: DOUBLE
64294: EQUAL
64295: IFTRUE 64305
64297: LD_INT 37
64299: DOUBLE
64300: EQUAL
64301: IFTRUE 64305
64303: GO 64361
64305: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64306: LD_ADDR_VAR 0 9
64310: PUSH
64311: LD_VAR 0 53
64315: PUSH
64316: LD_VAR 0 54
64320: PUSH
64321: LD_VAR 0 55
64325: PUSH
64326: LD_VAR 0 56
64330: PUSH
64331: LD_VAR 0 57
64335: PUSH
64336: LD_VAR 0 58
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: PUSH
64349: LD_VAR 0 4
64353: PUSH
64354: LD_INT 1
64356: PLUS
64357: ARRAY
64358: ST_TO_ADDR
64359: GO 64468
64361: LD_INT 31
64363: DOUBLE
64364: EQUAL
64365: IFTRUE 64411
64367: LD_INT 32
64369: DOUBLE
64370: EQUAL
64371: IFTRUE 64411
64373: LD_INT 33
64375: DOUBLE
64376: EQUAL
64377: IFTRUE 64411
64379: LD_INT 27
64381: DOUBLE
64382: EQUAL
64383: IFTRUE 64411
64385: LD_INT 26
64387: DOUBLE
64388: EQUAL
64389: IFTRUE 64411
64391: LD_INT 28
64393: DOUBLE
64394: EQUAL
64395: IFTRUE 64411
64397: LD_INT 29
64399: DOUBLE
64400: EQUAL
64401: IFTRUE 64411
64403: LD_INT 30
64405: DOUBLE
64406: EQUAL
64407: IFTRUE 64411
64409: GO 64467
64411: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64412: LD_ADDR_VAR 0 9
64416: PUSH
64417: LD_VAR 0 59
64421: PUSH
64422: LD_VAR 0 60
64426: PUSH
64427: LD_VAR 0 61
64431: PUSH
64432: LD_VAR 0 62
64436: PUSH
64437: LD_VAR 0 63
64441: PUSH
64442: LD_VAR 0 64
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: PUSH
64455: LD_VAR 0 4
64459: PUSH
64460: LD_INT 1
64462: PLUS
64463: ARRAY
64464: ST_TO_ADDR
64465: GO 64468
64467: POP
// temp_list2 = [ ] ;
64468: LD_ADDR_VAR 0 10
64472: PUSH
64473: EMPTY
64474: ST_TO_ADDR
// for i in temp_list do
64475: LD_ADDR_VAR 0 8
64479: PUSH
64480: LD_VAR 0 9
64484: PUSH
64485: FOR_IN
64486: IFFALSE 64538
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64488: LD_ADDR_VAR 0 10
64492: PUSH
64493: LD_VAR 0 10
64497: PUSH
64498: LD_VAR 0 8
64502: PUSH
64503: LD_INT 1
64505: ARRAY
64506: PUSH
64507: LD_VAR 0 2
64511: PLUS
64512: PUSH
64513: LD_VAR 0 8
64517: PUSH
64518: LD_INT 2
64520: ARRAY
64521: PUSH
64522: LD_VAR 0 3
64526: PLUS
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: EMPTY
64533: LIST
64534: ADD
64535: ST_TO_ADDR
64536: GO 64485
64538: POP
64539: POP
// result = temp_list2 ;
64540: LD_ADDR_VAR 0 7
64544: PUSH
64545: LD_VAR 0 10
64549: ST_TO_ADDR
// end ;
64550: LD_VAR 0 7
64554: RET
// export function EnemyInRange ( unit , dist ) ; begin
64555: LD_INT 0
64557: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64558: LD_ADDR_VAR 0 3
64562: PUSH
64563: LD_VAR 0 1
64567: PPUSH
64568: CALL_OW 255
64572: PPUSH
64573: LD_VAR 0 1
64577: PPUSH
64578: CALL_OW 250
64582: PPUSH
64583: LD_VAR 0 1
64587: PPUSH
64588: CALL_OW 251
64592: PPUSH
64593: LD_VAR 0 2
64597: PPUSH
64598: CALL 37951 0 4
64602: PUSH
64603: LD_INT 4
64605: ARRAY
64606: ST_TO_ADDR
// end ;
64607: LD_VAR 0 3
64611: RET
// export function PlayerSeeMe ( unit ) ; begin
64612: LD_INT 0
64614: PPUSH
// result := See ( your_side , unit ) ;
64615: LD_ADDR_VAR 0 2
64619: PUSH
64620: LD_OWVAR 2
64624: PPUSH
64625: LD_VAR 0 1
64629: PPUSH
64630: CALL_OW 292
64634: ST_TO_ADDR
// end ;
64635: LD_VAR 0 2
64639: RET
// export function ReverseDir ( unit ) ; begin
64640: LD_INT 0
64642: PPUSH
// if not unit then
64643: LD_VAR 0 1
64647: NOT
64648: IFFALSE 64652
// exit ;
64650: GO 64675
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64652: LD_ADDR_VAR 0 2
64656: PUSH
64657: LD_VAR 0 1
64661: PPUSH
64662: CALL_OW 254
64666: PUSH
64667: LD_INT 3
64669: PLUS
64670: PUSH
64671: LD_INT 6
64673: MOD
64674: ST_TO_ADDR
// end ;
64675: LD_VAR 0 2
64679: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
64680: LD_INT 0
64682: PPUSH
64683: PPUSH
64684: PPUSH
64685: PPUSH
64686: PPUSH
// if not hexes then
64687: LD_VAR 0 2
64691: NOT
64692: IFFALSE 64696
// exit ;
64694: GO 64844
// dist := 9999 ;
64696: LD_ADDR_VAR 0 5
64700: PUSH
64701: LD_INT 9999
64703: ST_TO_ADDR
// for i = 1 to hexes do
64704: LD_ADDR_VAR 0 4
64708: PUSH
64709: DOUBLE
64710: LD_INT 1
64712: DEC
64713: ST_TO_ADDR
64714: LD_VAR 0 2
64718: PUSH
64719: FOR_TO
64720: IFFALSE 64832
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
64722: LD_VAR 0 1
64726: PPUSH
64727: LD_VAR 0 2
64731: PUSH
64732: LD_VAR 0 4
64736: ARRAY
64737: PUSH
64738: LD_INT 1
64740: ARRAY
64741: PPUSH
64742: LD_VAR 0 2
64746: PUSH
64747: LD_VAR 0 4
64751: ARRAY
64752: PUSH
64753: LD_INT 2
64755: ARRAY
64756: PPUSH
64757: CALL_OW 297
64761: PUSH
64762: LD_VAR 0 5
64766: LESS
64767: IFFALSE 64830
// begin hex := hexes [ i ] ;
64769: LD_ADDR_VAR 0 7
64773: PUSH
64774: LD_VAR 0 2
64778: PUSH
64779: LD_VAR 0 4
64783: ARRAY
64784: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64785: LD_ADDR_VAR 0 5
64789: PUSH
64790: LD_VAR 0 1
64794: PPUSH
64795: LD_VAR 0 2
64799: PUSH
64800: LD_VAR 0 4
64804: ARRAY
64805: PUSH
64806: LD_INT 1
64808: ARRAY
64809: PPUSH
64810: LD_VAR 0 2
64814: PUSH
64815: LD_VAR 0 4
64819: ARRAY
64820: PUSH
64821: LD_INT 2
64823: ARRAY
64824: PPUSH
64825: CALL_OW 297
64829: ST_TO_ADDR
// end ; end ;
64830: GO 64719
64832: POP
64833: POP
// result := hex ;
64834: LD_ADDR_VAR 0 3
64838: PUSH
64839: LD_VAR 0 7
64843: ST_TO_ADDR
// end ;
64844: LD_VAR 0 3
64848: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64849: LD_INT 0
64851: PPUSH
64852: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64853: LD_VAR 0 1
64857: NOT
64858: PUSH
64859: LD_VAR 0 1
64863: PUSH
64864: LD_INT 21
64866: PUSH
64867: LD_INT 2
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 23
64876: PUSH
64877: LD_INT 2
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PPUSH
64888: CALL_OW 69
64892: IN
64893: NOT
64894: OR
64895: IFFALSE 64899
// exit ;
64897: GO 64946
// for i = 1 to 3 do
64899: LD_ADDR_VAR 0 3
64903: PUSH
64904: DOUBLE
64905: LD_INT 1
64907: DEC
64908: ST_TO_ADDR
64909: LD_INT 3
64911: PUSH
64912: FOR_TO
64913: IFFALSE 64944
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64915: LD_VAR 0 1
64919: PPUSH
64920: CALL_OW 250
64924: PPUSH
64925: LD_VAR 0 1
64929: PPUSH
64930: CALL_OW 251
64934: PPUSH
64935: LD_INT 1
64937: PPUSH
64938: CALL_OW 453
64942: GO 64912
64944: POP
64945: POP
// end ;
64946: LD_VAR 0 2
64950: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64951: LD_INT 0
64953: PPUSH
64954: PPUSH
64955: PPUSH
64956: PPUSH
64957: PPUSH
64958: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64959: LD_VAR 0 1
64963: NOT
64964: PUSH
64965: LD_VAR 0 2
64969: NOT
64970: OR
64971: PUSH
64972: LD_VAR 0 1
64976: PPUSH
64977: CALL_OW 314
64981: OR
64982: IFFALSE 64986
// exit ;
64984: GO 65427
// x := GetX ( enemy_unit ) ;
64986: LD_ADDR_VAR 0 7
64990: PUSH
64991: LD_VAR 0 2
64995: PPUSH
64996: CALL_OW 250
65000: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65001: LD_ADDR_VAR 0 8
65005: PUSH
65006: LD_VAR 0 2
65010: PPUSH
65011: CALL_OW 251
65015: ST_TO_ADDR
// if not x or not y then
65016: LD_VAR 0 7
65020: NOT
65021: PUSH
65022: LD_VAR 0 8
65026: NOT
65027: OR
65028: IFFALSE 65032
// exit ;
65030: GO 65427
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65032: LD_ADDR_VAR 0 6
65036: PUSH
65037: LD_VAR 0 7
65041: PPUSH
65042: LD_INT 0
65044: PPUSH
65045: LD_INT 4
65047: PPUSH
65048: CALL_OW 272
65052: PUSH
65053: LD_VAR 0 8
65057: PPUSH
65058: LD_INT 0
65060: PPUSH
65061: LD_INT 4
65063: PPUSH
65064: CALL_OW 273
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_VAR 0 7
65077: PPUSH
65078: LD_INT 1
65080: PPUSH
65081: LD_INT 4
65083: PPUSH
65084: CALL_OW 272
65088: PUSH
65089: LD_VAR 0 8
65093: PPUSH
65094: LD_INT 1
65096: PPUSH
65097: LD_INT 4
65099: PPUSH
65100: CALL_OW 273
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_VAR 0 7
65113: PPUSH
65114: LD_INT 2
65116: PPUSH
65117: LD_INT 4
65119: PPUSH
65120: CALL_OW 272
65124: PUSH
65125: LD_VAR 0 8
65129: PPUSH
65130: LD_INT 2
65132: PPUSH
65133: LD_INT 4
65135: PPUSH
65136: CALL_OW 273
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_VAR 0 7
65149: PPUSH
65150: LD_INT 3
65152: PPUSH
65153: LD_INT 4
65155: PPUSH
65156: CALL_OW 272
65160: PUSH
65161: LD_VAR 0 8
65165: PPUSH
65166: LD_INT 3
65168: PPUSH
65169: LD_INT 4
65171: PPUSH
65172: CALL_OW 273
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_VAR 0 7
65185: PPUSH
65186: LD_INT 4
65188: PPUSH
65189: LD_INT 4
65191: PPUSH
65192: CALL_OW 272
65196: PUSH
65197: LD_VAR 0 8
65201: PPUSH
65202: LD_INT 4
65204: PPUSH
65205: LD_INT 4
65207: PPUSH
65208: CALL_OW 273
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_VAR 0 7
65221: PPUSH
65222: LD_INT 5
65224: PPUSH
65225: LD_INT 4
65227: PPUSH
65228: CALL_OW 272
65232: PUSH
65233: LD_VAR 0 8
65237: PPUSH
65238: LD_INT 5
65240: PPUSH
65241: LD_INT 4
65243: PPUSH
65244: CALL_OW 273
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: ST_TO_ADDR
// for i = tmp downto 1 do
65261: LD_ADDR_VAR 0 4
65265: PUSH
65266: DOUBLE
65267: LD_VAR 0 6
65271: INC
65272: ST_TO_ADDR
65273: LD_INT 1
65275: PUSH
65276: FOR_DOWNTO
65277: IFFALSE 65378
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65279: LD_VAR 0 6
65283: PUSH
65284: LD_VAR 0 4
65288: ARRAY
65289: PUSH
65290: LD_INT 1
65292: ARRAY
65293: PPUSH
65294: LD_VAR 0 6
65298: PUSH
65299: LD_VAR 0 4
65303: ARRAY
65304: PUSH
65305: LD_INT 2
65307: ARRAY
65308: PPUSH
65309: CALL_OW 488
65313: NOT
65314: PUSH
65315: LD_VAR 0 6
65319: PUSH
65320: LD_VAR 0 4
65324: ARRAY
65325: PUSH
65326: LD_INT 1
65328: ARRAY
65329: PPUSH
65330: LD_VAR 0 6
65334: PUSH
65335: LD_VAR 0 4
65339: ARRAY
65340: PUSH
65341: LD_INT 2
65343: ARRAY
65344: PPUSH
65345: CALL_OW 428
65349: PUSH
65350: LD_INT 0
65352: NONEQUAL
65353: OR
65354: IFFALSE 65376
// tmp := Delete ( tmp , i ) ;
65356: LD_ADDR_VAR 0 6
65360: PUSH
65361: LD_VAR 0 6
65365: PPUSH
65366: LD_VAR 0 4
65370: PPUSH
65371: CALL_OW 3
65375: ST_TO_ADDR
65376: GO 65276
65378: POP
65379: POP
// j := GetClosestHex ( unit , tmp ) ;
65380: LD_ADDR_VAR 0 5
65384: PUSH
65385: LD_VAR 0 1
65389: PPUSH
65390: LD_VAR 0 6
65394: PPUSH
65395: CALL 64680 0 2
65399: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65400: LD_VAR 0 1
65404: PPUSH
65405: LD_VAR 0 5
65409: PUSH
65410: LD_INT 1
65412: ARRAY
65413: PPUSH
65414: LD_VAR 0 5
65418: PUSH
65419: LD_INT 2
65421: ARRAY
65422: PPUSH
65423: CALL_OW 111
// end ;
65427: LD_VAR 0 3
65431: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65432: LD_INT 0
65434: PPUSH
65435: PPUSH
65436: PPUSH
// uc_side = 0 ;
65437: LD_ADDR_OWVAR 20
65441: PUSH
65442: LD_INT 0
65444: ST_TO_ADDR
// uc_nation = 0 ;
65445: LD_ADDR_OWVAR 21
65449: PUSH
65450: LD_INT 0
65452: ST_TO_ADDR
// InitHc_All ( ) ;
65453: CALL_OW 584
// InitVc ;
65457: CALL_OW 20
// if mastodonts then
65461: LD_VAR 0 6
65465: IFFALSE 65532
// for i = 1 to mastodonts do
65467: LD_ADDR_VAR 0 11
65471: PUSH
65472: DOUBLE
65473: LD_INT 1
65475: DEC
65476: ST_TO_ADDR
65477: LD_VAR 0 6
65481: PUSH
65482: FOR_TO
65483: IFFALSE 65530
// begin vc_chassis := 31 ;
65485: LD_ADDR_OWVAR 37
65489: PUSH
65490: LD_INT 31
65492: ST_TO_ADDR
// vc_control := control_rider ;
65493: LD_ADDR_OWVAR 38
65497: PUSH
65498: LD_INT 4
65500: ST_TO_ADDR
// animal := CreateVehicle ;
65501: LD_ADDR_VAR 0 12
65505: PUSH
65506: CALL_OW 45
65510: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65511: LD_VAR 0 12
65515: PPUSH
65516: LD_VAR 0 8
65520: PPUSH
65521: LD_INT 0
65523: PPUSH
65524: CALL 67720 0 3
// end ;
65528: GO 65482
65530: POP
65531: POP
// if horses then
65532: LD_VAR 0 5
65536: IFFALSE 65603
// for i = 1 to horses do
65538: LD_ADDR_VAR 0 11
65542: PUSH
65543: DOUBLE
65544: LD_INT 1
65546: DEC
65547: ST_TO_ADDR
65548: LD_VAR 0 5
65552: PUSH
65553: FOR_TO
65554: IFFALSE 65601
// begin hc_class := 21 ;
65556: LD_ADDR_OWVAR 28
65560: PUSH
65561: LD_INT 21
65563: ST_TO_ADDR
// hc_gallery :=  ;
65564: LD_ADDR_OWVAR 33
65568: PUSH
65569: LD_STRING 
65571: ST_TO_ADDR
// animal := CreateHuman ;
65572: LD_ADDR_VAR 0 12
65576: PUSH
65577: CALL_OW 44
65581: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65582: LD_VAR 0 12
65586: PPUSH
65587: LD_VAR 0 8
65591: PPUSH
65592: LD_INT 0
65594: PPUSH
65595: CALL 67720 0 3
// end ;
65599: GO 65553
65601: POP
65602: POP
// if birds then
65603: LD_VAR 0 1
65607: IFFALSE 65674
// for i = 1 to birds do
65609: LD_ADDR_VAR 0 11
65613: PUSH
65614: DOUBLE
65615: LD_INT 1
65617: DEC
65618: ST_TO_ADDR
65619: LD_VAR 0 1
65623: PUSH
65624: FOR_TO
65625: IFFALSE 65672
// begin hc_class = 18 ;
65627: LD_ADDR_OWVAR 28
65631: PUSH
65632: LD_INT 18
65634: ST_TO_ADDR
// hc_gallery =  ;
65635: LD_ADDR_OWVAR 33
65639: PUSH
65640: LD_STRING 
65642: ST_TO_ADDR
// animal := CreateHuman ;
65643: LD_ADDR_VAR 0 12
65647: PUSH
65648: CALL_OW 44
65652: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65653: LD_VAR 0 12
65657: PPUSH
65658: LD_VAR 0 8
65662: PPUSH
65663: LD_INT 0
65665: PPUSH
65666: CALL 67720 0 3
// end ;
65670: GO 65624
65672: POP
65673: POP
// if tigers then
65674: LD_VAR 0 2
65678: IFFALSE 65762
// for i = 1 to tigers do
65680: LD_ADDR_VAR 0 11
65684: PUSH
65685: DOUBLE
65686: LD_INT 1
65688: DEC
65689: ST_TO_ADDR
65690: LD_VAR 0 2
65694: PUSH
65695: FOR_TO
65696: IFFALSE 65760
// begin hc_class = class_tiger ;
65698: LD_ADDR_OWVAR 28
65702: PUSH
65703: LD_INT 14
65705: ST_TO_ADDR
// hc_gallery =  ;
65706: LD_ADDR_OWVAR 33
65710: PUSH
65711: LD_STRING 
65713: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65714: LD_ADDR_OWVAR 35
65718: PUSH
65719: LD_INT 7
65721: NEG
65722: PPUSH
65723: LD_INT 7
65725: PPUSH
65726: CALL_OW 12
65730: ST_TO_ADDR
// animal := CreateHuman ;
65731: LD_ADDR_VAR 0 12
65735: PUSH
65736: CALL_OW 44
65740: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65741: LD_VAR 0 12
65745: PPUSH
65746: LD_VAR 0 8
65750: PPUSH
65751: LD_INT 0
65753: PPUSH
65754: CALL 67720 0 3
// end ;
65758: GO 65695
65760: POP
65761: POP
// if apemans then
65762: LD_VAR 0 3
65766: IFFALSE 65889
// for i = 1 to apemans do
65768: LD_ADDR_VAR 0 11
65772: PUSH
65773: DOUBLE
65774: LD_INT 1
65776: DEC
65777: ST_TO_ADDR
65778: LD_VAR 0 3
65782: PUSH
65783: FOR_TO
65784: IFFALSE 65887
// begin hc_class = class_apeman ;
65786: LD_ADDR_OWVAR 28
65790: PUSH
65791: LD_INT 12
65793: ST_TO_ADDR
// hc_gallery =  ;
65794: LD_ADDR_OWVAR 33
65798: PUSH
65799: LD_STRING 
65801: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65802: LD_ADDR_OWVAR 35
65806: PUSH
65807: LD_INT 2
65809: NEG
65810: PPUSH
65811: LD_INT 2
65813: PPUSH
65814: CALL_OW 12
65818: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65819: LD_ADDR_OWVAR 31
65823: PUSH
65824: LD_INT 1
65826: PPUSH
65827: LD_INT 3
65829: PPUSH
65830: CALL_OW 12
65834: PUSH
65835: LD_INT 1
65837: PPUSH
65838: LD_INT 3
65840: PPUSH
65841: CALL_OW 12
65845: PUSH
65846: LD_INT 0
65848: PUSH
65849: LD_INT 0
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: ST_TO_ADDR
// animal := CreateHuman ;
65858: LD_ADDR_VAR 0 12
65862: PUSH
65863: CALL_OW 44
65867: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65868: LD_VAR 0 12
65872: PPUSH
65873: LD_VAR 0 8
65877: PPUSH
65878: LD_INT 0
65880: PPUSH
65881: CALL 67720 0 3
// end ;
65885: GO 65783
65887: POP
65888: POP
// if enchidnas then
65889: LD_VAR 0 4
65893: IFFALSE 65960
// for i = 1 to enchidnas do
65895: LD_ADDR_VAR 0 11
65899: PUSH
65900: DOUBLE
65901: LD_INT 1
65903: DEC
65904: ST_TO_ADDR
65905: LD_VAR 0 4
65909: PUSH
65910: FOR_TO
65911: IFFALSE 65958
// begin hc_class = 13 ;
65913: LD_ADDR_OWVAR 28
65917: PUSH
65918: LD_INT 13
65920: ST_TO_ADDR
// hc_gallery =  ;
65921: LD_ADDR_OWVAR 33
65925: PUSH
65926: LD_STRING 
65928: ST_TO_ADDR
// animal := CreateHuman ;
65929: LD_ADDR_VAR 0 12
65933: PUSH
65934: CALL_OW 44
65938: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65939: LD_VAR 0 12
65943: PPUSH
65944: LD_VAR 0 8
65948: PPUSH
65949: LD_INT 0
65951: PPUSH
65952: CALL 67720 0 3
// end ;
65956: GO 65910
65958: POP
65959: POP
// if fishes then
65960: LD_VAR 0 7
65964: IFFALSE 66031
// for i = 1 to fishes do
65966: LD_ADDR_VAR 0 11
65970: PUSH
65971: DOUBLE
65972: LD_INT 1
65974: DEC
65975: ST_TO_ADDR
65976: LD_VAR 0 7
65980: PUSH
65981: FOR_TO
65982: IFFALSE 66029
// begin hc_class = 20 ;
65984: LD_ADDR_OWVAR 28
65988: PUSH
65989: LD_INT 20
65991: ST_TO_ADDR
// hc_gallery =  ;
65992: LD_ADDR_OWVAR 33
65996: PUSH
65997: LD_STRING 
65999: ST_TO_ADDR
// animal := CreateHuman ;
66000: LD_ADDR_VAR 0 12
66004: PUSH
66005: CALL_OW 44
66009: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66010: LD_VAR 0 12
66014: PPUSH
66015: LD_VAR 0 9
66019: PPUSH
66020: LD_INT 0
66022: PPUSH
66023: CALL 67720 0 3
// end ;
66027: GO 65981
66029: POP
66030: POP
// end ;
66031: LD_VAR 0 10
66035: RET
// export function WantHeal ( sci , unit ) ; begin
66036: LD_INT 0
66038: PPUSH
// if GetTaskList ( sci ) > 0 then
66039: LD_VAR 0 1
66043: PPUSH
66044: CALL_OW 437
66048: PUSH
66049: LD_INT 0
66051: GREATER
66052: IFFALSE 66122
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66054: LD_VAR 0 1
66058: PPUSH
66059: CALL_OW 437
66063: PUSH
66064: LD_INT 1
66066: ARRAY
66067: PUSH
66068: LD_INT 1
66070: ARRAY
66071: PUSH
66072: LD_STRING l
66074: EQUAL
66075: PUSH
66076: LD_VAR 0 1
66080: PPUSH
66081: CALL_OW 437
66085: PUSH
66086: LD_INT 1
66088: ARRAY
66089: PUSH
66090: LD_INT 4
66092: ARRAY
66093: PUSH
66094: LD_VAR 0 2
66098: EQUAL
66099: AND
66100: IFFALSE 66112
// result := true else
66102: LD_ADDR_VAR 0 3
66106: PUSH
66107: LD_INT 1
66109: ST_TO_ADDR
66110: GO 66120
// result := false ;
66112: LD_ADDR_VAR 0 3
66116: PUSH
66117: LD_INT 0
66119: ST_TO_ADDR
// end else
66120: GO 66130
// result := false ;
66122: LD_ADDR_VAR 0 3
66126: PUSH
66127: LD_INT 0
66129: ST_TO_ADDR
// end ;
66130: LD_VAR 0 3
66134: RET
// export function HealTarget ( sci ) ; begin
66135: LD_INT 0
66137: PPUSH
// if not sci then
66138: LD_VAR 0 1
66142: NOT
66143: IFFALSE 66147
// exit ;
66145: GO 66212
// result := 0 ;
66147: LD_ADDR_VAR 0 2
66151: PUSH
66152: LD_INT 0
66154: ST_TO_ADDR
// if GetTaskList ( sci ) then
66155: LD_VAR 0 1
66159: PPUSH
66160: CALL_OW 437
66164: IFFALSE 66212
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66166: LD_VAR 0 1
66170: PPUSH
66171: CALL_OW 437
66175: PUSH
66176: LD_INT 1
66178: ARRAY
66179: PUSH
66180: LD_INT 1
66182: ARRAY
66183: PUSH
66184: LD_STRING l
66186: EQUAL
66187: IFFALSE 66212
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66189: LD_ADDR_VAR 0 2
66193: PUSH
66194: LD_VAR 0 1
66198: PPUSH
66199: CALL_OW 437
66203: PUSH
66204: LD_INT 1
66206: ARRAY
66207: PUSH
66208: LD_INT 4
66210: ARRAY
66211: ST_TO_ADDR
// end ;
66212: LD_VAR 0 2
66216: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66217: LD_INT 0
66219: PPUSH
66220: PPUSH
66221: PPUSH
66222: PPUSH
// if not base_units then
66223: LD_VAR 0 1
66227: NOT
66228: IFFALSE 66232
// exit ;
66230: GO 66319
// result := false ;
66232: LD_ADDR_VAR 0 2
66236: PUSH
66237: LD_INT 0
66239: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66240: LD_ADDR_VAR 0 5
66244: PUSH
66245: LD_VAR 0 1
66249: PPUSH
66250: LD_INT 21
66252: PUSH
66253: LD_INT 3
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PPUSH
66260: CALL_OW 72
66264: ST_TO_ADDR
// if not tmp then
66265: LD_VAR 0 5
66269: NOT
66270: IFFALSE 66274
// exit ;
66272: GO 66319
// for i in tmp do
66274: LD_ADDR_VAR 0 3
66278: PUSH
66279: LD_VAR 0 5
66283: PUSH
66284: FOR_IN
66285: IFFALSE 66317
// begin result := EnemyInRange ( i , 22 ) ;
66287: LD_ADDR_VAR 0 2
66291: PUSH
66292: LD_VAR 0 3
66296: PPUSH
66297: LD_INT 22
66299: PPUSH
66300: CALL 64555 0 2
66304: ST_TO_ADDR
// if result then
66305: LD_VAR 0 2
66309: IFFALSE 66315
// exit ;
66311: POP
66312: POP
66313: GO 66319
// end ;
66315: GO 66284
66317: POP
66318: POP
// end ;
66319: LD_VAR 0 2
66323: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
66324: LD_INT 0
66326: PPUSH
66327: PPUSH
// if not units then
66328: LD_VAR 0 1
66332: NOT
66333: IFFALSE 66337
// exit ;
66335: GO 66407
// result := [ ] ;
66337: LD_ADDR_VAR 0 3
66341: PUSH
66342: EMPTY
66343: ST_TO_ADDR
// for i in units do
66344: LD_ADDR_VAR 0 4
66348: PUSH
66349: LD_VAR 0 1
66353: PUSH
66354: FOR_IN
66355: IFFALSE 66405
// if GetTag ( i ) = tag then
66357: LD_VAR 0 4
66361: PPUSH
66362: CALL_OW 110
66366: PUSH
66367: LD_VAR 0 2
66371: EQUAL
66372: IFFALSE 66403
// result := Replace ( result , result + 1 , i ) ;
66374: LD_ADDR_VAR 0 3
66378: PUSH
66379: LD_VAR 0 3
66383: PPUSH
66384: LD_VAR 0 3
66388: PUSH
66389: LD_INT 1
66391: PLUS
66392: PPUSH
66393: LD_VAR 0 4
66397: PPUSH
66398: CALL_OW 1
66402: ST_TO_ADDR
66403: GO 66354
66405: POP
66406: POP
// end ;
66407: LD_VAR 0 3
66411: RET
// export function IsDriver ( un ) ; begin
66412: LD_INT 0
66414: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66415: LD_ADDR_VAR 0 2
66419: PUSH
66420: LD_VAR 0 1
66424: PUSH
66425: LD_INT 55
66427: PUSH
66428: EMPTY
66429: LIST
66430: PPUSH
66431: CALL_OW 69
66435: IN
66436: ST_TO_ADDR
// end ;
66437: LD_VAR 0 2
66441: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66442: LD_INT 0
66444: PPUSH
66445: PPUSH
// list := [ ] ;
66446: LD_ADDR_VAR 0 5
66450: PUSH
66451: EMPTY
66452: ST_TO_ADDR
// case d of 0 :
66453: LD_VAR 0 3
66457: PUSH
66458: LD_INT 0
66460: DOUBLE
66461: EQUAL
66462: IFTRUE 66466
66464: GO 66599
66466: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66467: LD_ADDR_VAR 0 5
66471: PUSH
66472: LD_VAR 0 1
66476: PUSH
66477: LD_INT 4
66479: MINUS
66480: PUSH
66481: LD_VAR 0 2
66485: PUSH
66486: LD_INT 4
66488: MINUS
66489: PUSH
66490: LD_INT 2
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: LIST
66497: PUSH
66498: LD_VAR 0 1
66502: PUSH
66503: LD_INT 3
66505: MINUS
66506: PUSH
66507: LD_VAR 0 2
66511: PUSH
66512: LD_INT 1
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: LIST
66519: PUSH
66520: LD_VAR 0 1
66524: PUSH
66525: LD_INT 4
66527: PLUS
66528: PUSH
66529: LD_VAR 0 2
66533: PUSH
66534: LD_INT 4
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: LIST
66541: PUSH
66542: LD_VAR 0 1
66546: PUSH
66547: LD_INT 3
66549: PLUS
66550: PUSH
66551: LD_VAR 0 2
66555: PUSH
66556: LD_INT 3
66558: PLUS
66559: PUSH
66560: LD_INT 5
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: LIST
66567: PUSH
66568: LD_VAR 0 1
66572: PUSH
66573: LD_VAR 0 2
66577: PUSH
66578: LD_INT 4
66580: PLUS
66581: PUSH
66582: LD_INT 0
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: LIST
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: ST_TO_ADDR
// end ; 1 :
66597: GO 67297
66599: LD_INT 1
66601: DOUBLE
66602: EQUAL
66603: IFTRUE 66607
66605: GO 66740
66607: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66608: LD_ADDR_VAR 0 5
66612: PUSH
66613: LD_VAR 0 1
66617: PUSH
66618: LD_VAR 0 2
66622: PUSH
66623: LD_INT 4
66625: MINUS
66626: PUSH
66627: LD_INT 3
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: LIST
66634: PUSH
66635: LD_VAR 0 1
66639: PUSH
66640: LD_INT 3
66642: MINUS
66643: PUSH
66644: LD_VAR 0 2
66648: PUSH
66649: LD_INT 3
66651: MINUS
66652: PUSH
66653: LD_INT 2
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: LIST
66660: PUSH
66661: LD_VAR 0 1
66665: PUSH
66666: LD_INT 4
66668: MINUS
66669: PUSH
66670: LD_VAR 0 2
66674: PUSH
66675: LD_INT 1
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: LIST
66682: PUSH
66683: LD_VAR 0 1
66687: PUSH
66688: LD_VAR 0 2
66692: PUSH
66693: LD_INT 3
66695: PLUS
66696: PUSH
66697: LD_INT 0
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: LIST
66704: PUSH
66705: LD_VAR 0 1
66709: PUSH
66710: LD_INT 4
66712: PLUS
66713: PUSH
66714: LD_VAR 0 2
66718: PUSH
66719: LD_INT 4
66721: PLUS
66722: PUSH
66723: LD_INT 5
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: LIST
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: ST_TO_ADDR
// end ; 2 :
66738: GO 67297
66740: LD_INT 2
66742: DOUBLE
66743: EQUAL
66744: IFTRUE 66748
66746: GO 66877
66748: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66749: LD_ADDR_VAR 0 5
66753: PUSH
66754: LD_VAR 0 1
66758: PUSH
66759: LD_VAR 0 2
66763: PUSH
66764: LD_INT 3
66766: MINUS
66767: PUSH
66768: LD_INT 3
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: LIST
66775: PUSH
66776: LD_VAR 0 1
66780: PUSH
66781: LD_INT 4
66783: PLUS
66784: PUSH
66785: LD_VAR 0 2
66789: PUSH
66790: LD_INT 4
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: LIST
66797: PUSH
66798: LD_VAR 0 1
66802: PUSH
66803: LD_VAR 0 2
66807: PUSH
66808: LD_INT 4
66810: PLUS
66811: PUSH
66812: LD_INT 0
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: LIST
66819: PUSH
66820: LD_VAR 0 1
66824: PUSH
66825: LD_INT 3
66827: MINUS
66828: PUSH
66829: LD_VAR 0 2
66833: PUSH
66834: LD_INT 1
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: LIST
66841: PUSH
66842: LD_VAR 0 1
66846: PUSH
66847: LD_INT 4
66849: MINUS
66850: PUSH
66851: LD_VAR 0 2
66855: PUSH
66856: LD_INT 4
66858: MINUS
66859: PUSH
66860: LD_INT 2
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: LIST
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: ST_TO_ADDR
// end ; 3 :
66875: GO 67297
66877: LD_INT 3
66879: DOUBLE
66880: EQUAL
66881: IFTRUE 66885
66883: GO 67018
66885: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66886: LD_ADDR_VAR 0 5
66890: PUSH
66891: LD_VAR 0 1
66895: PUSH
66896: LD_INT 3
66898: PLUS
66899: PUSH
66900: LD_VAR 0 2
66904: PUSH
66905: LD_INT 4
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: LIST
66912: PUSH
66913: LD_VAR 0 1
66917: PUSH
66918: LD_INT 4
66920: PLUS
66921: PUSH
66922: LD_VAR 0 2
66926: PUSH
66927: LD_INT 4
66929: PLUS
66930: PUSH
66931: LD_INT 5
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: LIST
66938: PUSH
66939: LD_VAR 0 1
66943: PUSH
66944: LD_INT 4
66946: MINUS
66947: PUSH
66948: LD_VAR 0 2
66952: PUSH
66953: LD_INT 1
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: LIST
66960: PUSH
66961: LD_VAR 0 1
66965: PUSH
66966: LD_VAR 0 2
66970: PUSH
66971: LD_INT 4
66973: MINUS
66974: PUSH
66975: LD_INT 3
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: LIST
66982: PUSH
66983: LD_VAR 0 1
66987: PUSH
66988: LD_INT 3
66990: MINUS
66991: PUSH
66992: LD_VAR 0 2
66996: PUSH
66997: LD_INT 3
66999: MINUS
67000: PUSH
67001: LD_INT 2
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: LIST
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: ST_TO_ADDR
// end ; 4 :
67016: GO 67297
67018: LD_INT 4
67020: DOUBLE
67021: EQUAL
67022: IFTRUE 67026
67024: GO 67159
67026: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67027: LD_ADDR_VAR 0 5
67031: PUSH
67032: LD_VAR 0 1
67036: PUSH
67037: LD_VAR 0 2
67041: PUSH
67042: LD_INT 4
67044: PLUS
67045: PUSH
67046: LD_INT 0
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: LIST
67053: PUSH
67054: LD_VAR 0 1
67058: PUSH
67059: LD_INT 3
67061: PLUS
67062: PUSH
67063: LD_VAR 0 2
67067: PUSH
67068: LD_INT 3
67070: PLUS
67071: PUSH
67072: LD_INT 5
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: LIST
67079: PUSH
67080: LD_VAR 0 1
67084: PUSH
67085: LD_INT 4
67087: PLUS
67088: PUSH
67089: LD_VAR 0 2
67093: PUSH
67094: LD_INT 4
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: LIST
67101: PUSH
67102: LD_VAR 0 1
67106: PUSH
67107: LD_VAR 0 2
67111: PUSH
67112: LD_INT 3
67114: MINUS
67115: PUSH
67116: LD_INT 3
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: LIST
67123: PUSH
67124: LD_VAR 0 1
67128: PUSH
67129: LD_INT 4
67131: MINUS
67132: PUSH
67133: LD_VAR 0 2
67137: PUSH
67138: LD_INT 4
67140: MINUS
67141: PUSH
67142: LD_INT 2
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: LIST
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: ST_TO_ADDR
// end ; 5 :
67157: GO 67297
67159: LD_INT 5
67161: DOUBLE
67162: EQUAL
67163: IFTRUE 67167
67165: GO 67296
67167: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67168: LD_ADDR_VAR 0 5
67172: PUSH
67173: LD_VAR 0 1
67177: PUSH
67178: LD_INT 4
67180: MINUS
67181: PUSH
67182: LD_VAR 0 2
67186: PUSH
67187: LD_INT 1
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: LIST
67194: PUSH
67195: LD_VAR 0 1
67199: PUSH
67200: LD_VAR 0 2
67204: PUSH
67205: LD_INT 4
67207: MINUS
67208: PUSH
67209: LD_INT 3
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: LIST
67216: PUSH
67217: LD_VAR 0 1
67221: PUSH
67222: LD_INT 4
67224: PLUS
67225: PUSH
67226: LD_VAR 0 2
67230: PUSH
67231: LD_INT 4
67233: PLUS
67234: PUSH
67235: LD_INT 5
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: LIST
67242: PUSH
67243: LD_VAR 0 1
67247: PUSH
67248: LD_INT 3
67250: PLUS
67251: PUSH
67252: LD_VAR 0 2
67256: PUSH
67257: LD_INT 4
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: LIST
67264: PUSH
67265: LD_VAR 0 1
67269: PUSH
67270: LD_VAR 0 2
67274: PUSH
67275: LD_INT 3
67277: PLUS
67278: PUSH
67279: LD_INT 0
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: LIST
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: ST_TO_ADDR
// end ; end ;
67294: GO 67297
67296: POP
// result := list ;
67297: LD_ADDR_VAR 0 4
67301: PUSH
67302: LD_VAR 0 5
67306: ST_TO_ADDR
// end ;
67307: LD_VAR 0 4
67311: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67312: LD_INT 0
67314: PPUSH
67315: PPUSH
67316: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67317: LD_VAR 0 1
67321: NOT
67322: PUSH
67323: LD_VAR 0 2
67327: PUSH
67328: LD_INT 1
67330: PUSH
67331: LD_INT 2
67333: PUSH
67334: LD_INT 3
67336: PUSH
67337: LD_INT 4
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: IN
67346: NOT
67347: OR
67348: IFFALSE 67352
// exit ;
67350: GO 67444
// tmp := [ ] ;
67352: LD_ADDR_VAR 0 5
67356: PUSH
67357: EMPTY
67358: ST_TO_ADDR
// for i in units do
67359: LD_ADDR_VAR 0 4
67363: PUSH
67364: LD_VAR 0 1
67368: PUSH
67369: FOR_IN
67370: IFFALSE 67413
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67372: LD_ADDR_VAR 0 5
67376: PUSH
67377: LD_VAR 0 5
67381: PPUSH
67382: LD_VAR 0 5
67386: PUSH
67387: LD_INT 1
67389: PLUS
67390: PPUSH
67391: LD_VAR 0 4
67395: PPUSH
67396: LD_VAR 0 2
67400: PPUSH
67401: CALL_OW 259
67405: PPUSH
67406: CALL_OW 2
67410: ST_TO_ADDR
67411: GO 67369
67413: POP
67414: POP
// if not tmp then
67415: LD_VAR 0 5
67419: NOT
67420: IFFALSE 67424
// exit ;
67422: GO 67444
// result := SortListByListDesc ( units , tmp ) ;
67424: LD_ADDR_VAR 0 3
67428: PUSH
67429: LD_VAR 0 1
67433: PPUSH
67434: LD_VAR 0 5
67438: PPUSH
67439: CALL_OW 77
67443: ST_TO_ADDR
// end ;
67444: LD_VAR 0 3
67448: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67449: LD_INT 0
67451: PPUSH
67452: PPUSH
67453: PPUSH
// result := false ;
67454: LD_ADDR_VAR 0 3
67458: PUSH
67459: LD_INT 0
67461: ST_TO_ADDR
// x := GetX ( building ) ;
67462: LD_ADDR_VAR 0 4
67466: PUSH
67467: LD_VAR 0 2
67471: PPUSH
67472: CALL_OW 250
67476: ST_TO_ADDR
// y := GetY ( building ) ;
67477: LD_ADDR_VAR 0 5
67481: PUSH
67482: LD_VAR 0 2
67486: PPUSH
67487: CALL_OW 251
67491: ST_TO_ADDR
// if not building or not x or not y then
67492: LD_VAR 0 2
67496: NOT
67497: PUSH
67498: LD_VAR 0 4
67502: NOT
67503: OR
67504: PUSH
67505: LD_VAR 0 5
67509: NOT
67510: OR
67511: IFFALSE 67515
// exit ;
67513: GO 67607
// if GetTaskList ( unit ) then
67515: LD_VAR 0 1
67519: PPUSH
67520: CALL_OW 437
67524: IFFALSE 67607
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67526: LD_STRING e
67528: PUSH
67529: LD_VAR 0 1
67533: PPUSH
67534: CALL_OW 437
67538: PUSH
67539: LD_INT 1
67541: ARRAY
67542: PUSH
67543: LD_INT 1
67545: ARRAY
67546: EQUAL
67547: PUSH
67548: LD_VAR 0 4
67552: PUSH
67553: LD_VAR 0 1
67557: PPUSH
67558: CALL_OW 437
67562: PUSH
67563: LD_INT 1
67565: ARRAY
67566: PUSH
67567: LD_INT 2
67569: ARRAY
67570: EQUAL
67571: AND
67572: PUSH
67573: LD_VAR 0 5
67577: PUSH
67578: LD_VAR 0 1
67582: PPUSH
67583: CALL_OW 437
67587: PUSH
67588: LD_INT 1
67590: ARRAY
67591: PUSH
67592: LD_INT 3
67594: ARRAY
67595: EQUAL
67596: AND
67597: IFFALSE 67607
// result := true end ;
67599: LD_ADDR_VAR 0 3
67603: PUSH
67604: LD_INT 1
67606: ST_TO_ADDR
// end ;
67607: LD_VAR 0 3
67611: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67612: LD_INT 0
67614: PPUSH
// result := false ;
67615: LD_ADDR_VAR 0 4
67619: PUSH
67620: LD_INT 0
67622: ST_TO_ADDR
// if GetTaskList ( unit ) then
67623: LD_VAR 0 1
67627: PPUSH
67628: CALL_OW 437
67632: IFFALSE 67715
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67634: LD_STRING M
67636: PUSH
67637: LD_VAR 0 1
67641: PPUSH
67642: CALL_OW 437
67646: PUSH
67647: LD_INT 1
67649: ARRAY
67650: PUSH
67651: LD_INT 1
67653: ARRAY
67654: EQUAL
67655: PUSH
67656: LD_VAR 0 2
67660: PUSH
67661: LD_VAR 0 1
67665: PPUSH
67666: CALL_OW 437
67670: PUSH
67671: LD_INT 1
67673: ARRAY
67674: PUSH
67675: LD_INT 2
67677: ARRAY
67678: EQUAL
67679: AND
67680: PUSH
67681: LD_VAR 0 3
67685: PUSH
67686: LD_VAR 0 1
67690: PPUSH
67691: CALL_OW 437
67695: PUSH
67696: LD_INT 1
67698: ARRAY
67699: PUSH
67700: LD_INT 3
67702: ARRAY
67703: EQUAL
67704: AND
67705: IFFALSE 67715
// result := true ;
67707: LD_ADDR_VAR 0 4
67711: PUSH
67712: LD_INT 1
67714: ST_TO_ADDR
// end ; end ;
67715: LD_VAR 0 4
67719: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67720: LD_INT 0
67722: PPUSH
67723: PPUSH
67724: PPUSH
67725: PPUSH
// if not unit or not area then
67726: LD_VAR 0 1
67730: NOT
67731: PUSH
67732: LD_VAR 0 2
67736: NOT
67737: OR
67738: IFFALSE 67742
// exit ;
67740: GO 67906
// tmp := AreaToList ( area , i ) ;
67742: LD_ADDR_VAR 0 6
67746: PUSH
67747: LD_VAR 0 2
67751: PPUSH
67752: LD_VAR 0 5
67756: PPUSH
67757: CALL_OW 517
67761: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67762: LD_ADDR_VAR 0 5
67766: PUSH
67767: DOUBLE
67768: LD_INT 1
67770: DEC
67771: ST_TO_ADDR
67772: LD_VAR 0 6
67776: PUSH
67777: LD_INT 1
67779: ARRAY
67780: PUSH
67781: FOR_TO
67782: IFFALSE 67904
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67784: LD_ADDR_VAR 0 7
67788: PUSH
67789: LD_VAR 0 6
67793: PUSH
67794: LD_INT 1
67796: ARRAY
67797: PUSH
67798: LD_VAR 0 5
67802: ARRAY
67803: PUSH
67804: LD_VAR 0 6
67808: PUSH
67809: LD_INT 2
67811: ARRAY
67812: PUSH
67813: LD_VAR 0 5
67817: ARRAY
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67823: LD_VAR 0 7
67827: PUSH
67828: LD_INT 1
67830: ARRAY
67831: PPUSH
67832: LD_VAR 0 7
67836: PUSH
67837: LD_INT 2
67839: ARRAY
67840: PPUSH
67841: CALL_OW 428
67845: PUSH
67846: LD_INT 0
67848: EQUAL
67849: IFFALSE 67902
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67851: LD_VAR 0 1
67855: PPUSH
67856: LD_VAR 0 7
67860: PUSH
67861: LD_INT 1
67863: ARRAY
67864: PPUSH
67865: LD_VAR 0 7
67869: PUSH
67870: LD_INT 2
67872: ARRAY
67873: PPUSH
67874: LD_VAR 0 3
67878: PPUSH
67879: CALL_OW 48
// result := IsPlaced ( unit ) ;
67883: LD_ADDR_VAR 0 4
67887: PUSH
67888: LD_VAR 0 1
67892: PPUSH
67893: CALL_OW 305
67897: ST_TO_ADDR
// exit ;
67898: POP
67899: POP
67900: GO 67906
// end ; end ;
67902: GO 67781
67904: POP
67905: POP
// end ;
67906: LD_VAR 0 4
67910: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67911: LD_INT 0
67913: PPUSH
67914: PPUSH
67915: PPUSH
// if not side or side > 8 then
67916: LD_VAR 0 1
67920: NOT
67921: PUSH
67922: LD_VAR 0 1
67926: PUSH
67927: LD_INT 8
67929: GREATER
67930: OR
67931: IFFALSE 67935
// exit ;
67933: GO 68122
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67935: LD_ADDR_VAR 0 4
67939: PUSH
67940: LD_INT 22
67942: PUSH
67943: LD_VAR 0 1
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 21
67954: PUSH
67955: LD_INT 3
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PPUSH
67966: CALL_OW 69
67970: ST_TO_ADDR
// if not tmp then
67971: LD_VAR 0 4
67975: NOT
67976: IFFALSE 67980
// exit ;
67978: GO 68122
// enable_addtolog := true ;
67980: LD_ADDR_OWVAR 81
67984: PUSH
67985: LD_INT 1
67987: ST_TO_ADDR
// AddToLog ( [ ) ;
67988: LD_STRING [
67990: PPUSH
67991: CALL_OW 561
// for i in tmp do
67995: LD_ADDR_VAR 0 3
67999: PUSH
68000: LD_VAR 0 4
68004: PUSH
68005: FOR_IN
68006: IFFALSE 68113
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68008: LD_STRING [
68010: PUSH
68011: LD_VAR 0 3
68015: PPUSH
68016: CALL_OW 266
68020: STR
68021: PUSH
68022: LD_STRING , 
68024: STR
68025: PUSH
68026: LD_VAR 0 3
68030: PPUSH
68031: CALL_OW 250
68035: STR
68036: PUSH
68037: LD_STRING , 
68039: STR
68040: PUSH
68041: LD_VAR 0 3
68045: PPUSH
68046: CALL_OW 251
68050: STR
68051: PUSH
68052: LD_STRING , 
68054: STR
68055: PUSH
68056: LD_VAR 0 3
68060: PPUSH
68061: CALL_OW 254
68065: STR
68066: PUSH
68067: LD_STRING , 
68069: STR
68070: PUSH
68071: LD_VAR 0 3
68075: PPUSH
68076: LD_INT 1
68078: PPUSH
68079: CALL_OW 268
68083: STR
68084: PUSH
68085: LD_STRING , 
68087: STR
68088: PUSH
68089: LD_VAR 0 3
68093: PPUSH
68094: LD_INT 2
68096: PPUSH
68097: CALL_OW 268
68101: STR
68102: PUSH
68103: LD_STRING ],
68105: STR
68106: PPUSH
68107: CALL_OW 561
// end ;
68111: GO 68005
68113: POP
68114: POP
// AddToLog ( ]; ) ;
68115: LD_STRING ];
68117: PPUSH
68118: CALL_OW 561
// end ;
68122: LD_VAR 0 2
68126: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68127: LD_INT 0
68129: PPUSH
68130: PPUSH
68131: PPUSH
68132: PPUSH
68133: PPUSH
// if not area or not rate or not max then
68134: LD_VAR 0 1
68138: NOT
68139: PUSH
68140: LD_VAR 0 2
68144: NOT
68145: OR
68146: PUSH
68147: LD_VAR 0 4
68151: NOT
68152: OR
68153: IFFALSE 68157
// exit ;
68155: GO 68349
// while 1 do
68157: LD_INT 1
68159: IFFALSE 68349
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68161: LD_ADDR_VAR 0 9
68165: PUSH
68166: LD_VAR 0 1
68170: PPUSH
68171: LD_INT 1
68173: PPUSH
68174: CALL_OW 287
68178: PUSH
68179: LD_INT 10
68181: MUL
68182: ST_TO_ADDR
// r := rate / 10 ;
68183: LD_ADDR_VAR 0 7
68187: PUSH
68188: LD_VAR 0 2
68192: PUSH
68193: LD_INT 10
68195: DIVREAL
68196: ST_TO_ADDR
// time := 1 1$00 ;
68197: LD_ADDR_VAR 0 8
68201: PUSH
68202: LD_INT 2100
68204: ST_TO_ADDR
// if amount < min then
68205: LD_VAR 0 9
68209: PUSH
68210: LD_VAR 0 3
68214: LESS
68215: IFFALSE 68233
// r := r * 2 else
68217: LD_ADDR_VAR 0 7
68221: PUSH
68222: LD_VAR 0 7
68226: PUSH
68227: LD_INT 2
68229: MUL
68230: ST_TO_ADDR
68231: GO 68259
// if amount > max then
68233: LD_VAR 0 9
68237: PUSH
68238: LD_VAR 0 4
68242: GREATER
68243: IFFALSE 68259
// r := r / 2 ;
68245: LD_ADDR_VAR 0 7
68249: PUSH
68250: LD_VAR 0 7
68254: PUSH
68255: LD_INT 2
68257: DIVREAL
68258: ST_TO_ADDR
// time := time / r ;
68259: LD_ADDR_VAR 0 8
68263: PUSH
68264: LD_VAR 0 8
68268: PUSH
68269: LD_VAR 0 7
68273: DIVREAL
68274: ST_TO_ADDR
// if time < 0 then
68275: LD_VAR 0 8
68279: PUSH
68280: LD_INT 0
68282: LESS
68283: IFFALSE 68300
// time := time * - 1 ;
68285: LD_ADDR_VAR 0 8
68289: PUSH
68290: LD_VAR 0 8
68294: PUSH
68295: LD_INT 1
68297: NEG
68298: MUL
68299: ST_TO_ADDR
// wait ( time ) ;
68300: LD_VAR 0 8
68304: PPUSH
68305: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
68309: LD_INT 35
68311: PPUSH
68312: LD_INT 875
68314: PPUSH
68315: CALL_OW 12
68319: PPUSH
68320: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68324: LD_INT 1
68326: PPUSH
68327: LD_INT 5
68329: PPUSH
68330: CALL_OW 12
68334: PPUSH
68335: LD_VAR 0 1
68339: PPUSH
68340: LD_INT 1
68342: PPUSH
68343: CALL_OW 55
// end ;
68347: GO 68157
// end ;
68349: LD_VAR 0 5
68353: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68354: LD_INT 0
68356: PPUSH
68357: PPUSH
68358: PPUSH
68359: PPUSH
68360: PPUSH
68361: PPUSH
68362: PPUSH
68363: PPUSH
// if not turrets or not factories then
68364: LD_VAR 0 1
68368: NOT
68369: PUSH
68370: LD_VAR 0 2
68374: NOT
68375: OR
68376: IFFALSE 68380
// exit ;
68378: GO 68687
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68380: LD_ADDR_VAR 0 10
68384: PUSH
68385: LD_INT 5
68387: PUSH
68388: LD_INT 6
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 2
68397: PUSH
68398: LD_INT 4
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 3
68407: PUSH
68408: LD_INT 5
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 24
68422: PUSH
68423: LD_INT 25
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 23
68432: PUSH
68433: LD_INT 27
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 42
68446: PUSH
68447: LD_INT 43
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 44
68456: PUSH
68457: LD_INT 46
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 45
68466: PUSH
68467: LD_INT 47
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: LIST
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: LIST
68483: ST_TO_ADDR
// result := [ ] ;
68484: LD_ADDR_VAR 0 3
68488: PUSH
68489: EMPTY
68490: ST_TO_ADDR
// for i in turrets do
68491: LD_ADDR_VAR 0 4
68495: PUSH
68496: LD_VAR 0 1
68500: PUSH
68501: FOR_IN
68502: IFFALSE 68685
// begin nat := GetNation ( i ) ;
68504: LD_ADDR_VAR 0 7
68508: PUSH
68509: LD_VAR 0 4
68513: PPUSH
68514: CALL_OW 248
68518: ST_TO_ADDR
// weapon := 0 ;
68519: LD_ADDR_VAR 0 8
68523: PUSH
68524: LD_INT 0
68526: ST_TO_ADDR
// if not nat then
68527: LD_VAR 0 7
68531: NOT
68532: IFFALSE 68536
// continue ;
68534: GO 68501
// for j in list [ nat ] do
68536: LD_ADDR_VAR 0 5
68540: PUSH
68541: LD_VAR 0 10
68545: PUSH
68546: LD_VAR 0 7
68550: ARRAY
68551: PUSH
68552: FOR_IN
68553: IFFALSE 68594
// if GetBWeapon ( i ) = j [ 1 ] then
68555: LD_VAR 0 4
68559: PPUSH
68560: CALL_OW 269
68564: PUSH
68565: LD_VAR 0 5
68569: PUSH
68570: LD_INT 1
68572: ARRAY
68573: EQUAL
68574: IFFALSE 68592
// begin weapon := j [ 2 ] ;
68576: LD_ADDR_VAR 0 8
68580: PUSH
68581: LD_VAR 0 5
68585: PUSH
68586: LD_INT 2
68588: ARRAY
68589: ST_TO_ADDR
// break ;
68590: GO 68594
// end ;
68592: GO 68552
68594: POP
68595: POP
// if not weapon then
68596: LD_VAR 0 8
68600: NOT
68601: IFFALSE 68605
// continue ;
68603: GO 68501
// for k in factories do
68605: LD_ADDR_VAR 0 6
68609: PUSH
68610: LD_VAR 0 2
68614: PUSH
68615: FOR_IN
68616: IFFALSE 68681
// begin weapons := AvailableWeaponList ( k ) ;
68618: LD_ADDR_VAR 0 9
68622: PUSH
68623: LD_VAR 0 6
68627: PPUSH
68628: CALL_OW 478
68632: ST_TO_ADDR
// if not weapons then
68633: LD_VAR 0 9
68637: NOT
68638: IFFALSE 68642
// continue ;
68640: GO 68615
// if weapon in weapons then
68642: LD_VAR 0 8
68646: PUSH
68647: LD_VAR 0 9
68651: IN
68652: IFFALSE 68679
// begin result := [ i , weapon ] ;
68654: LD_ADDR_VAR 0 3
68658: PUSH
68659: LD_VAR 0 4
68663: PUSH
68664: LD_VAR 0 8
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: ST_TO_ADDR
// exit ;
68673: POP
68674: POP
68675: POP
68676: POP
68677: GO 68687
// end ; end ;
68679: GO 68615
68681: POP
68682: POP
// end ;
68683: GO 68501
68685: POP
68686: POP
// end ;
68687: LD_VAR 0 3
68691: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68692: LD_INT 0
68694: PPUSH
// if not side or side > 8 then
68695: LD_VAR 0 3
68699: NOT
68700: PUSH
68701: LD_VAR 0 3
68705: PUSH
68706: LD_INT 8
68708: GREATER
68709: OR
68710: IFFALSE 68714
// exit ;
68712: GO 68773
// if not range then
68714: LD_VAR 0 4
68718: NOT
68719: IFFALSE 68730
// range := - 12 ;
68721: LD_ADDR_VAR 0 4
68725: PUSH
68726: LD_INT 12
68728: NEG
68729: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68730: LD_VAR 0 1
68734: PPUSH
68735: LD_VAR 0 2
68739: PPUSH
68740: LD_VAR 0 3
68744: PPUSH
68745: LD_VAR 0 4
68749: PPUSH
68750: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68754: LD_VAR 0 1
68758: PPUSH
68759: LD_VAR 0 2
68763: PPUSH
68764: LD_VAR 0 3
68768: PPUSH
68769: CALL_OW 331
// end ;
68773: LD_VAR 0 5
68777: RET
// export function Video ( mode ) ; begin
68778: LD_INT 0
68780: PPUSH
// ingame_video = mode ;
68781: LD_ADDR_OWVAR 52
68785: PUSH
68786: LD_VAR 0 1
68790: ST_TO_ADDR
// interface_hidden = mode ;
68791: LD_ADDR_OWVAR 54
68795: PUSH
68796: LD_VAR 0 1
68800: ST_TO_ADDR
// end ;
68801: LD_VAR 0 2
68805: RET
// export function Join ( array , element ) ; begin
68806: LD_INT 0
68808: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68809: LD_ADDR_VAR 0 3
68813: PUSH
68814: LD_VAR 0 1
68818: PPUSH
68819: LD_VAR 0 1
68823: PUSH
68824: LD_INT 1
68826: PLUS
68827: PPUSH
68828: LD_VAR 0 2
68832: PPUSH
68833: CALL_OW 1
68837: ST_TO_ADDR
// end ;
68838: LD_VAR 0 3
68842: RET
// export function JoinUnion ( array , element ) ; begin
68843: LD_INT 0
68845: PPUSH
// result := array union element ;
68846: LD_ADDR_VAR 0 3
68850: PUSH
68851: LD_VAR 0 1
68855: PUSH
68856: LD_VAR 0 2
68860: UNION
68861: ST_TO_ADDR
// end ;
68862: LD_VAR 0 3
68866: RET
// export function GetBehemoths ( side ) ; begin
68867: LD_INT 0
68869: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
68870: LD_ADDR_VAR 0 2
68874: PUSH
68875: LD_INT 22
68877: PUSH
68878: LD_VAR 0 1
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 31
68889: PUSH
68890: LD_INT 25
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: PPUSH
68901: CALL_OW 69
68905: ST_TO_ADDR
// end ;
68906: LD_VAR 0 2
68910: RET
// export function Shuffle ( array ) ; var i , index ; begin
68911: LD_INT 0
68913: PPUSH
68914: PPUSH
68915: PPUSH
// result := [ ] ;
68916: LD_ADDR_VAR 0 2
68920: PUSH
68921: EMPTY
68922: ST_TO_ADDR
// if not array then
68923: LD_VAR 0 1
68927: NOT
68928: IFFALSE 68932
// exit ;
68930: GO 69031
// Randomize ;
68932: CALL_OW 10
// for i = array downto 1 do
68936: LD_ADDR_VAR 0 3
68940: PUSH
68941: DOUBLE
68942: LD_VAR 0 1
68946: INC
68947: ST_TO_ADDR
68948: LD_INT 1
68950: PUSH
68951: FOR_DOWNTO
68952: IFFALSE 69029
// begin index := rand ( 1 , array ) ;
68954: LD_ADDR_VAR 0 4
68958: PUSH
68959: LD_INT 1
68961: PPUSH
68962: LD_VAR 0 1
68966: PPUSH
68967: CALL_OW 12
68971: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68972: LD_ADDR_VAR 0 2
68976: PUSH
68977: LD_VAR 0 2
68981: PPUSH
68982: LD_VAR 0 2
68986: PUSH
68987: LD_INT 1
68989: PLUS
68990: PPUSH
68991: LD_VAR 0 1
68995: PUSH
68996: LD_VAR 0 4
69000: ARRAY
69001: PPUSH
69002: CALL_OW 2
69006: ST_TO_ADDR
// array := Delete ( array , index ) ;
69007: LD_ADDR_VAR 0 1
69011: PUSH
69012: LD_VAR 0 1
69016: PPUSH
69017: LD_VAR 0 4
69021: PPUSH
69022: CALL_OW 3
69026: ST_TO_ADDR
// end ;
69027: GO 68951
69029: POP
69030: POP
// end ;
69031: LD_VAR 0 2
69035: RET
// export function GetBaseMaterials ( base ) ; begin
69036: LD_INT 0
69038: PPUSH
// result := [ 0 , 0 , 0 ] ;
69039: LD_ADDR_VAR 0 2
69043: PUSH
69044: LD_INT 0
69046: PUSH
69047: LD_INT 0
69049: PUSH
69050: LD_INT 0
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: LIST
69057: ST_TO_ADDR
// if not base then
69058: LD_VAR 0 1
69062: NOT
69063: IFFALSE 69067
// exit ;
69065: GO 69116
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69067: LD_ADDR_VAR 0 2
69071: PUSH
69072: LD_VAR 0 1
69076: PPUSH
69077: LD_INT 1
69079: PPUSH
69080: CALL_OW 275
69084: PUSH
69085: LD_VAR 0 1
69089: PPUSH
69090: LD_INT 2
69092: PPUSH
69093: CALL_OW 275
69097: PUSH
69098: LD_VAR 0 1
69102: PPUSH
69103: LD_INT 3
69105: PPUSH
69106: CALL_OW 275
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: LIST
69115: ST_TO_ADDR
// end ;
69116: LD_VAR 0 2
69120: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69121: LD_INT 0
69123: PPUSH
69124: PPUSH
// result := array ;
69125: LD_ADDR_VAR 0 3
69129: PUSH
69130: LD_VAR 0 1
69134: ST_TO_ADDR
// if size > 0 then
69135: LD_VAR 0 2
69139: PUSH
69140: LD_INT 0
69142: GREATER
69143: IFFALSE 69189
// for i := array downto size do
69145: LD_ADDR_VAR 0 4
69149: PUSH
69150: DOUBLE
69151: LD_VAR 0 1
69155: INC
69156: ST_TO_ADDR
69157: LD_VAR 0 2
69161: PUSH
69162: FOR_DOWNTO
69163: IFFALSE 69187
// result := Delete ( result , result ) ;
69165: LD_ADDR_VAR 0 3
69169: PUSH
69170: LD_VAR 0 3
69174: PPUSH
69175: LD_VAR 0 3
69179: PPUSH
69180: CALL_OW 3
69184: ST_TO_ADDR
69185: GO 69162
69187: POP
69188: POP
// end ;
69189: LD_VAR 0 3
69193: RET
// export function ComExit ( unit ) ; var tmp ; begin
69194: LD_INT 0
69196: PPUSH
69197: PPUSH
// if not IsInUnit ( unit ) then
69198: LD_VAR 0 1
69202: PPUSH
69203: CALL_OW 310
69207: NOT
69208: IFFALSE 69212
// exit ;
69210: GO 69272
// tmp := IsInUnit ( unit ) ;
69212: LD_ADDR_VAR 0 3
69216: PUSH
69217: LD_VAR 0 1
69221: PPUSH
69222: CALL_OW 310
69226: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69227: LD_VAR 0 3
69231: PPUSH
69232: CALL_OW 247
69236: PUSH
69237: LD_INT 2
69239: EQUAL
69240: IFFALSE 69253
// ComExitVehicle ( unit ) else
69242: LD_VAR 0 1
69246: PPUSH
69247: CALL_OW 121
69251: GO 69262
// ComExitBuilding ( unit ) ;
69253: LD_VAR 0 1
69257: PPUSH
69258: CALL_OW 122
// result := tmp ;
69262: LD_ADDR_VAR 0 2
69266: PUSH
69267: LD_VAR 0 3
69271: ST_TO_ADDR
// end ;
69272: LD_VAR 0 2
69276: RET
// export function ComExitAll ( units ) ; var i ; begin
69277: LD_INT 0
69279: PPUSH
69280: PPUSH
// if not units then
69281: LD_VAR 0 1
69285: NOT
69286: IFFALSE 69290
// exit ;
69288: GO 69316
// for i in units do
69290: LD_ADDR_VAR 0 3
69294: PUSH
69295: LD_VAR 0 1
69299: PUSH
69300: FOR_IN
69301: IFFALSE 69314
// ComExit ( i ) ;
69303: LD_VAR 0 3
69307: PPUSH
69308: CALL 69194 0 1
69312: GO 69300
69314: POP
69315: POP
// end ;
69316: LD_VAR 0 2
69320: RET
// export function ResetHc ; begin
69321: LD_INT 0
69323: PPUSH
// InitHc ;
69324: CALL_OW 19
// hc_importance := 0 ;
69328: LD_ADDR_OWVAR 32
69332: PUSH
69333: LD_INT 0
69335: ST_TO_ADDR
// end ;
69336: LD_VAR 0 1
69340: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69341: LD_INT 0
69343: PPUSH
69344: PPUSH
69345: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69346: LD_ADDR_VAR 0 6
69350: PUSH
69351: LD_VAR 0 1
69355: PUSH
69356: LD_VAR 0 3
69360: PLUS
69361: PUSH
69362: LD_INT 2
69364: DIV
69365: ST_TO_ADDR
// if _x < 0 then
69366: LD_VAR 0 6
69370: PUSH
69371: LD_INT 0
69373: LESS
69374: IFFALSE 69391
// _x := _x * - 1 ;
69376: LD_ADDR_VAR 0 6
69380: PUSH
69381: LD_VAR 0 6
69385: PUSH
69386: LD_INT 1
69388: NEG
69389: MUL
69390: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69391: LD_ADDR_VAR 0 7
69395: PUSH
69396: LD_VAR 0 2
69400: PUSH
69401: LD_VAR 0 4
69405: PLUS
69406: PUSH
69407: LD_INT 2
69409: DIV
69410: ST_TO_ADDR
// if _y < 0 then
69411: LD_VAR 0 7
69415: PUSH
69416: LD_INT 0
69418: LESS
69419: IFFALSE 69436
// _y := _y * - 1 ;
69421: LD_ADDR_VAR 0 7
69425: PUSH
69426: LD_VAR 0 7
69430: PUSH
69431: LD_INT 1
69433: NEG
69434: MUL
69435: ST_TO_ADDR
// result := [ _x , _y ] ;
69436: LD_ADDR_VAR 0 5
69440: PUSH
69441: LD_VAR 0 6
69445: PUSH
69446: LD_VAR 0 7
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: ST_TO_ADDR
// end ;
69455: LD_VAR 0 5
69459: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69460: LD_INT 0
69462: PPUSH
69463: PPUSH
69464: PPUSH
69465: PPUSH
// task := GetTaskList ( unit ) ;
69466: LD_ADDR_VAR 0 7
69470: PUSH
69471: LD_VAR 0 1
69475: PPUSH
69476: CALL_OW 437
69480: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69481: LD_VAR 0 7
69485: NOT
69486: PUSH
69487: LD_VAR 0 1
69491: PPUSH
69492: LD_VAR 0 2
69496: PPUSH
69497: CALL_OW 308
69501: NOT
69502: AND
69503: IFFALSE 69507
// exit ;
69505: GO 69625
// if IsInArea ( unit , area ) then
69507: LD_VAR 0 1
69511: PPUSH
69512: LD_VAR 0 2
69516: PPUSH
69517: CALL_OW 308
69521: IFFALSE 69539
// begin ComMoveToArea ( unit , goAway ) ;
69523: LD_VAR 0 1
69527: PPUSH
69528: LD_VAR 0 3
69532: PPUSH
69533: CALL_OW 113
// exit ;
69537: GO 69625
// end ; if task [ 1 ] [ 1 ] <> M then
69539: LD_VAR 0 7
69543: PUSH
69544: LD_INT 1
69546: ARRAY
69547: PUSH
69548: LD_INT 1
69550: ARRAY
69551: PUSH
69552: LD_STRING M
69554: NONEQUAL
69555: IFFALSE 69559
// exit ;
69557: GO 69625
// x := task [ 1 ] [ 2 ] ;
69559: LD_ADDR_VAR 0 5
69563: PUSH
69564: LD_VAR 0 7
69568: PUSH
69569: LD_INT 1
69571: ARRAY
69572: PUSH
69573: LD_INT 2
69575: ARRAY
69576: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69577: LD_ADDR_VAR 0 6
69581: PUSH
69582: LD_VAR 0 7
69586: PUSH
69587: LD_INT 1
69589: ARRAY
69590: PUSH
69591: LD_INT 3
69593: ARRAY
69594: ST_TO_ADDR
// if InArea ( x , y , area ) then
69595: LD_VAR 0 5
69599: PPUSH
69600: LD_VAR 0 6
69604: PPUSH
69605: LD_VAR 0 2
69609: PPUSH
69610: CALL_OW 309
69614: IFFALSE 69625
// ComStop ( unit ) ;
69616: LD_VAR 0 1
69620: PPUSH
69621: CALL_OW 141
// end ;
69625: LD_VAR 0 4
69629: RET
// export function Abs ( value ) ; begin
69630: LD_INT 0
69632: PPUSH
// result := value ;
69633: LD_ADDR_VAR 0 2
69637: PUSH
69638: LD_VAR 0 1
69642: ST_TO_ADDR
// if value < 0 then
69643: LD_VAR 0 1
69647: PUSH
69648: LD_INT 0
69650: LESS
69651: IFFALSE 69668
// result := value * - 1 ;
69653: LD_ADDR_VAR 0 2
69657: PUSH
69658: LD_VAR 0 1
69662: PUSH
69663: LD_INT 1
69665: NEG
69666: MUL
69667: ST_TO_ADDR
// end ;
69668: LD_VAR 0 2
69672: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69673: LD_INT 0
69675: PPUSH
69676: PPUSH
69677: PPUSH
69678: PPUSH
69679: PPUSH
69680: PPUSH
69681: PPUSH
69682: PPUSH
// if not unit or not building then
69683: LD_VAR 0 1
69687: NOT
69688: PUSH
69689: LD_VAR 0 2
69693: NOT
69694: OR
69695: IFFALSE 69699
// exit ;
69697: GO 69925
// x := GetX ( building ) ;
69699: LD_ADDR_VAR 0 4
69703: PUSH
69704: LD_VAR 0 2
69708: PPUSH
69709: CALL_OW 250
69713: ST_TO_ADDR
// y := GetY ( building ) ;
69714: LD_ADDR_VAR 0 6
69718: PUSH
69719: LD_VAR 0 2
69723: PPUSH
69724: CALL_OW 251
69728: ST_TO_ADDR
// d := GetDir ( building ) ;
69729: LD_ADDR_VAR 0 8
69733: PUSH
69734: LD_VAR 0 2
69738: PPUSH
69739: CALL_OW 254
69743: ST_TO_ADDR
// r := 4 ;
69744: LD_ADDR_VAR 0 9
69748: PUSH
69749: LD_INT 4
69751: ST_TO_ADDR
// for i := 1 to 5 do
69752: LD_ADDR_VAR 0 10
69756: PUSH
69757: DOUBLE
69758: LD_INT 1
69760: DEC
69761: ST_TO_ADDR
69762: LD_INT 5
69764: PUSH
69765: FOR_TO
69766: IFFALSE 69923
// begin _x := ShiftX ( x , d , r + i ) ;
69768: LD_ADDR_VAR 0 5
69772: PUSH
69773: LD_VAR 0 4
69777: PPUSH
69778: LD_VAR 0 8
69782: PPUSH
69783: LD_VAR 0 9
69787: PUSH
69788: LD_VAR 0 10
69792: PLUS
69793: PPUSH
69794: CALL_OW 272
69798: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69799: LD_ADDR_VAR 0 7
69803: PUSH
69804: LD_VAR 0 6
69808: PPUSH
69809: LD_VAR 0 8
69813: PPUSH
69814: LD_VAR 0 9
69818: PUSH
69819: LD_VAR 0 10
69823: PLUS
69824: PPUSH
69825: CALL_OW 273
69829: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69830: LD_VAR 0 5
69834: PPUSH
69835: LD_VAR 0 7
69839: PPUSH
69840: CALL_OW 488
69844: PUSH
69845: LD_VAR 0 5
69849: PPUSH
69850: LD_VAR 0 7
69854: PPUSH
69855: CALL_OW 428
69859: PPUSH
69860: CALL_OW 247
69864: PUSH
69865: LD_INT 3
69867: PUSH
69868: LD_INT 2
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: IN
69875: NOT
69876: AND
69877: IFFALSE 69921
// begin ComMoveXY ( unit , _x , _y ) ;
69879: LD_VAR 0 1
69883: PPUSH
69884: LD_VAR 0 5
69888: PPUSH
69889: LD_VAR 0 7
69893: PPUSH
69894: CALL_OW 111
// result := [ _x , _y ] ;
69898: LD_ADDR_VAR 0 3
69902: PUSH
69903: LD_VAR 0 5
69907: PUSH
69908: LD_VAR 0 7
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: ST_TO_ADDR
// exit ;
69917: POP
69918: POP
69919: GO 69925
// end ; end ;
69921: GO 69765
69923: POP
69924: POP
// end ;
69925: LD_VAR 0 3
69929: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69930: LD_INT 0
69932: PPUSH
69933: PPUSH
69934: PPUSH
// result := 0 ;
69935: LD_ADDR_VAR 0 3
69939: PUSH
69940: LD_INT 0
69942: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69943: LD_VAR 0 1
69947: PUSH
69948: LD_INT 0
69950: LESS
69951: PUSH
69952: LD_VAR 0 1
69956: PUSH
69957: LD_INT 8
69959: GREATER
69960: OR
69961: PUSH
69962: LD_VAR 0 2
69966: PUSH
69967: LD_INT 0
69969: LESS
69970: OR
69971: PUSH
69972: LD_VAR 0 2
69976: PUSH
69977: LD_INT 8
69979: GREATER
69980: OR
69981: IFFALSE 69985
// exit ;
69983: GO 70060
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69985: LD_ADDR_VAR 0 4
69989: PUSH
69990: LD_INT 22
69992: PUSH
69993: LD_VAR 0 2
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: PPUSH
70002: CALL_OW 69
70006: PUSH
70007: FOR_IN
70008: IFFALSE 70058
// begin un := UnitShoot ( i ) ;
70010: LD_ADDR_VAR 0 5
70014: PUSH
70015: LD_VAR 0 4
70019: PPUSH
70020: CALL_OW 504
70024: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70025: LD_VAR 0 5
70029: PPUSH
70030: CALL_OW 255
70034: PUSH
70035: LD_VAR 0 1
70039: EQUAL
70040: IFFALSE 70056
// begin result := un ;
70042: LD_ADDR_VAR 0 3
70046: PUSH
70047: LD_VAR 0 5
70051: ST_TO_ADDR
// exit ;
70052: POP
70053: POP
70054: GO 70060
// end ; end ;
70056: GO 70007
70058: POP
70059: POP
// end ;
70060: LD_VAR 0 3
70064: RET
// export function GetCargoBay ( units ) ; begin
70065: LD_INT 0
70067: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70068: LD_ADDR_VAR 0 2
70072: PUSH
70073: LD_VAR 0 1
70077: PPUSH
70078: LD_INT 2
70080: PUSH
70081: LD_INT 34
70083: PUSH
70084: LD_INT 12
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: LD_INT 34
70093: PUSH
70094: LD_INT 51
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: LD_INT 34
70103: PUSH
70104: LD_INT 32
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PUSH
70111: LD_INT 34
70113: PUSH
70114: LD_EXP 44
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: PPUSH
70130: CALL_OW 72
70134: ST_TO_ADDR
// end ;
70135: LD_VAR 0 2
70139: RET
// export function Negate ( value ) ; begin
70140: LD_INT 0
70142: PPUSH
// result := not value ;
70143: LD_ADDR_VAR 0 2
70147: PUSH
70148: LD_VAR 0 1
70152: NOT
70153: ST_TO_ADDR
// end ;
70154: LD_VAR 0 2
70158: RET
// export function Inc ( value ) ; begin
70159: LD_INT 0
70161: PPUSH
// result := value + 1 ;
70162: LD_ADDR_VAR 0 2
70166: PUSH
70167: LD_VAR 0 1
70171: PUSH
70172: LD_INT 1
70174: PLUS
70175: ST_TO_ADDR
// end ;
70176: LD_VAR 0 2
70180: RET
// export function Dec ( value ) ; begin
70181: LD_INT 0
70183: PPUSH
// result := value - 1 ;
70184: LD_ADDR_VAR 0 2
70188: PUSH
70189: LD_VAR 0 1
70193: PUSH
70194: LD_INT 1
70196: MINUS
70197: ST_TO_ADDR
// end ;
70198: LD_VAR 0 2
70202: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70203: LD_INT 0
70205: PPUSH
70206: PPUSH
70207: PPUSH
70208: PPUSH
70209: PPUSH
70210: PPUSH
70211: PPUSH
70212: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70213: LD_VAR 0 1
70217: PPUSH
70218: LD_VAR 0 2
70222: PPUSH
70223: CALL_OW 488
70227: NOT
70228: PUSH
70229: LD_VAR 0 3
70233: PPUSH
70234: LD_VAR 0 4
70238: PPUSH
70239: CALL_OW 488
70243: NOT
70244: OR
70245: IFFALSE 70258
// begin result := - 1 ;
70247: LD_ADDR_VAR 0 5
70251: PUSH
70252: LD_INT 1
70254: NEG
70255: ST_TO_ADDR
// exit ;
70256: GO 70493
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70258: LD_ADDR_VAR 0 12
70262: PUSH
70263: LD_VAR 0 1
70267: PPUSH
70268: LD_VAR 0 2
70272: PPUSH
70273: LD_VAR 0 3
70277: PPUSH
70278: LD_VAR 0 4
70282: PPUSH
70283: CALL 69341 0 4
70287: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70288: LD_ADDR_VAR 0 11
70292: PUSH
70293: LD_VAR 0 1
70297: PPUSH
70298: LD_VAR 0 2
70302: PPUSH
70303: LD_VAR 0 12
70307: PUSH
70308: LD_INT 1
70310: ARRAY
70311: PPUSH
70312: LD_VAR 0 12
70316: PUSH
70317: LD_INT 2
70319: ARRAY
70320: PPUSH
70321: CALL_OW 298
70325: ST_TO_ADDR
// distance := 9999 ;
70326: LD_ADDR_VAR 0 10
70330: PUSH
70331: LD_INT 9999
70333: ST_TO_ADDR
// for i := 0 to 5 do
70334: LD_ADDR_VAR 0 6
70338: PUSH
70339: DOUBLE
70340: LD_INT 0
70342: DEC
70343: ST_TO_ADDR
70344: LD_INT 5
70346: PUSH
70347: FOR_TO
70348: IFFALSE 70491
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70350: LD_ADDR_VAR 0 7
70354: PUSH
70355: LD_VAR 0 1
70359: PPUSH
70360: LD_VAR 0 6
70364: PPUSH
70365: LD_VAR 0 11
70369: PPUSH
70370: CALL_OW 272
70374: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70375: LD_ADDR_VAR 0 8
70379: PUSH
70380: LD_VAR 0 2
70384: PPUSH
70385: LD_VAR 0 6
70389: PPUSH
70390: LD_VAR 0 11
70394: PPUSH
70395: CALL_OW 273
70399: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70400: LD_VAR 0 7
70404: PPUSH
70405: LD_VAR 0 8
70409: PPUSH
70410: CALL_OW 488
70414: NOT
70415: IFFALSE 70419
// continue ;
70417: GO 70347
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70419: LD_ADDR_VAR 0 9
70423: PUSH
70424: LD_VAR 0 12
70428: PUSH
70429: LD_INT 1
70431: ARRAY
70432: PPUSH
70433: LD_VAR 0 12
70437: PUSH
70438: LD_INT 2
70440: ARRAY
70441: PPUSH
70442: LD_VAR 0 7
70446: PPUSH
70447: LD_VAR 0 8
70451: PPUSH
70452: CALL_OW 298
70456: ST_TO_ADDR
// if tmp < distance then
70457: LD_VAR 0 9
70461: PUSH
70462: LD_VAR 0 10
70466: LESS
70467: IFFALSE 70489
// begin result := i ;
70469: LD_ADDR_VAR 0 5
70473: PUSH
70474: LD_VAR 0 6
70478: ST_TO_ADDR
// distance := tmp ;
70479: LD_ADDR_VAR 0 10
70483: PUSH
70484: LD_VAR 0 9
70488: ST_TO_ADDR
// end ; end ;
70489: GO 70347
70491: POP
70492: POP
// end ;
70493: LD_VAR 0 5
70497: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70498: LD_INT 0
70500: PPUSH
70501: PPUSH
// if not driver or not IsInUnit ( driver ) then
70502: LD_VAR 0 1
70506: NOT
70507: PUSH
70508: LD_VAR 0 1
70512: PPUSH
70513: CALL_OW 310
70517: NOT
70518: OR
70519: IFFALSE 70523
// exit ;
70521: GO 70613
// vehicle := IsInUnit ( driver ) ;
70523: LD_ADDR_VAR 0 3
70527: PUSH
70528: LD_VAR 0 1
70532: PPUSH
70533: CALL_OW 310
70537: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70538: LD_VAR 0 1
70542: PPUSH
70543: LD_STRING \
70545: PUSH
70546: LD_INT 0
70548: PUSH
70549: LD_INT 0
70551: PUSH
70552: LD_INT 0
70554: PUSH
70555: LD_INT 0
70557: PUSH
70558: LD_INT 0
70560: PUSH
70561: LD_INT 0
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: LIST
70572: PUSH
70573: LD_STRING E
70575: PUSH
70576: LD_INT 0
70578: PUSH
70579: LD_INT 0
70581: PUSH
70582: LD_VAR 0 3
70586: PUSH
70587: LD_INT 0
70589: PUSH
70590: LD_INT 0
70592: PUSH
70593: LD_INT 0
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PPUSH
70609: CALL_OW 446
// end ;
70613: LD_VAR 0 2
70617: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70618: LD_INT 0
70620: PPUSH
70621: PPUSH
// if not driver or not IsInUnit ( driver ) then
70622: LD_VAR 0 1
70626: NOT
70627: PUSH
70628: LD_VAR 0 1
70632: PPUSH
70633: CALL_OW 310
70637: NOT
70638: OR
70639: IFFALSE 70643
// exit ;
70641: GO 70733
// vehicle := IsInUnit ( driver ) ;
70643: LD_ADDR_VAR 0 3
70647: PUSH
70648: LD_VAR 0 1
70652: PPUSH
70653: CALL_OW 310
70657: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70658: LD_VAR 0 1
70662: PPUSH
70663: LD_STRING \
70665: PUSH
70666: LD_INT 0
70668: PUSH
70669: LD_INT 0
70671: PUSH
70672: LD_INT 0
70674: PUSH
70675: LD_INT 0
70677: PUSH
70678: LD_INT 0
70680: PUSH
70681: LD_INT 0
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: PUSH
70693: LD_STRING E
70695: PUSH
70696: LD_INT 0
70698: PUSH
70699: LD_INT 0
70701: PUSH
70702: LD_VAR 0 3
70706: PUSH
70707: LD_INT 0
70709: PUSH
70710: LD_INT 0
70712: PUSH
70713: LD_INT 0
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: LIST
70720: LIST
70721: LIST
70722: LIST
70723: LIST
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PPUSH
70729: CALL_OW 447
// end ;
70733: LD_VAR 0 2
70737: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70738: LD_INT 0
70740: PPUSH
70741: PPUSH
70742: PPUSH
// tmp := [ ] ;
70743: LD_ADDR_VAR 0 5
70747: PUSH
70748: EMPTY
70749: ST_TO_ADDR
// for i in units do
70750: LD_ADDR_VAR 0 4
70754: PUSH
70755: LD_VAR 0 1
70759: PUSH
70760: FOR_IN
70761: IFFALSE 70799
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70763: LD_ADDR_VAR 0 5
70767: PUSH
70768: LD_VAR 0 5
70772: PPUSH
70773: LD_VAR 0 5
70777: PUSH
70778: LD_INT 1
70780: PLUS
70781: PPUSH
70782: LD_VAR 0 4
70786: PPUSH
70787: CALL_OW 256
70791: PPUSH
70792: CALL_OW 2
70796: ST_TO_ADDR
70797: GO 70760
70799: POP
70800: POP
// if not tmp then
70801: LD_VAR 0 5
70805: NOT
70806: IFFALSE 70810
// exit ;
70808: GO 70858
// if asc then
70810: LD_VAR 0 2
70814: IFFALSE 70838
// result := SortListByListAsc ( units , tmp ) else
70816: LD_ADDR_VAR 0 3
70820: PUSH
70821: LD_VAR 0 1
70825: PPUSH
70826: LD_VAR 0 5
70830: PPUSH
70831: CALL_OW 76
70835: ST_TO_ADDR
70836: GO 70858
// result := SortListByListDesc ( units , tmp ) ;
70838: LD_ADDR_VAR 0 3
70842: PUSH
70843: LD_VAR 0 1
70847: PPUSH
70848: LD_VAR 0 5
70852: PPUSH
70853: CALL_OW 77
70857: ST_TO_ADDR
// end ;
70858: LD_VAR 0 3
70862: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70863: LD_INT 0
70865: PPUSH
70866: PPUSH
// task := GetTaskList ( mech ) ;
70867: LD_ADDR_VAR 0 4
70871: PUSH
70872: LD_VAR 0 1
70876: PPUSH
70877: CALL_OW 437
70881: ST_TO_ADDR
// if not task then
70882: LD_VAR 0 4
70886: NOT
70887: IFFALSE 70891
// exit ;
70889: GO 70933
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70891: LD_ADDR_VAR 0 3
70895: PUSH
70896: LD_VAR 0 4
70900: PUSH
70901: LD_INT 1
70903: ARRAY
70904: PUSH
70905: LD_INT 1
70907: ARRAY
70908: PUSH
70909: LD_STRING r
70911: EQUAL
70912: PUSH
70913: LD_VAR 0 4
70917: PUSH
70918: LD_INT 1
70920: ARRAY
70921: PUSH
70922: LD_INT 4
70924: ARRAY
70925: PUSH
70926: LD_VAR 0 2
70930: EQUAL
70931: AND
70932: ST_TO_ADDR
// end ;
70933: LD_VAR 0 3
70937: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70938: LD_INT 0
70940: PPUSH
// SetDir ( unit , d ) ;
70941: LD_VAR 0 1
70945: PPUSH
70946: LD_VAR 0 4
70950: PPUSH
70951: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70955: LD_VAR 0 1
70959: PPUSH
70960: LD_VAR 0 2
70964: PPUSH
70965: LD_VAR 0 3
70969: PPUSH
70970: LD_VAR 0 5
70974: PPUSH
70975: CALL_OW 48
// end ;
70979: LD_VAR 0 6
70983: RET
// export function ToNaturalNumber ( number ) ; begin
70984: LD_INT 0
70986: PPUSH
// result := number div 1 ;
70987: LD_ADDR_VAR 0 2
70991: PUSH
70992: LD_VAR 0 1
70996: PUSH
70997: LD_INT 1
70999: DIV
71000: ST_TO_ADDR
// if number < 0 then
71001: LD_VAR 0 1
71005: PUSH
71006: LD_INT 0
71008: LESS
71009: IFFALSE 71019
// result := 0 ;
71011: LD_ADDR_VAR 0 2
71015: PUSH
71016: LD_INT 0
71018: ST_TO_ADDR
// end ;
71019: LD_VAR 0 2
71023: RET
// export function SortByClass ( units , class ) ; var un ; begin
71024: LD_INT 0
71026: PPUSH
71027: PPUSH
// if not units or not class then
71028: LD_VAR 0 1
71032: NOT
71033: PUSH
71034: LD_VAR 0 2
71038: NOT
71039: OR
71040: IFFALSE 71044
// exit ;
71042: GO 71139
// result := [ ] ;
71044: LD_ADDR_VAR 0 3
71048: PUSH
71049: EMPTY
71050: ST_TO_ADDR
// for un in units do
71051: LD_ADDR_VAR 0 4
71055: PUSH
71056: LD_VAR 0 1
71060: PUSH
71061: FOR_IN
71062: IFFALSE 71137
// if GetClass ( un ) = class then
71064: LD_VAR 0 4
71068: PPUSH
71069: CALL_OW 257
71073: PUSH
71074: LD_VAR 0 2
71078: EQUAL
71079: IFFALSE 71106
// result := Insert ( result , 1 , un ) else
71081: LD_ADDR_VAR 0 3
71085: PUSH
71086: LD_VAR 0 3
71090: PPUSH
71091: LD_INT 1
71093: PPUSH
71094: LD_VAR 0 4
71098: PPUSH
71099: CALL_OW 2
71103: ST_TO_ADDR
71104: GO 71135
// result := Replace ( result , result + 1 , un ) ;
71106: LD_ADDR_VAR 0 3
71110: PUSH
71111: LD_VAR 0 3
71115: PPUSH
71116: LD_VAR 0 3
71120: PUSH
71121: LD_INT 1
71123: PLUS
71124: PPUSH
71125: LD_VAR 0 4
71129: PPUSH
71130: CALL_OW 1
71134: ST_TO_ADDR
71135: GO 71061
71137: POP
71138: POP
// end ;
71139: LD_VAR 0 3
71143: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71144: LD_INT 0
71146: PPUSH
71147: PPUSH
71148: PPUSH
71149: PPUSH
71150: PPUSH
71151: PPUSH
71152: PPUSH
// result := [ ] ;
71153: LD_ADDR_VAR 0 4
71157: PUSH
71158: EMPTY
71159: ST_TO_ADDR
// if x - r < 0 then
71160: LD_VAR 0 1
71164: PUSH
71165: LD_VAR 0 3
71169: MINUS
71170: PUSH
71171: LD_INT 0
71173: LESS
71174: IFFALSE 71186
// min_x := 0 else
71176: LD_ADDR_VAR 0 8
71180: PUSH
71181: LD_INT 0
71183: ST_TO_ADDR
71184: GO 71202
// min_x := x - r ;
71186: LD_ADDR_VAR 0 8
71190: PUSH
71191: LD_VAR 0 1
71195: PUSH
71196: LD_VAR 0 3
71200: MINUS
71201: ST_TO_ADDR
// if y - r < 0 then
71202: LD_VAR 0 2
71206: PUSH
71207: LD_VAR 0 3
71211: MINUS
71212: PUSH
71213: LD_INT 0
71215: LESS
71216: IFFALSE 71228
// min_y := 0 else
71218: LD_ADDR_VAR 0 7
71222: PUSH
71223: LD_INT 0
71225: ST_TO_ADDR
71226: GO 71244
// min_y := y - r ;
71228: LD_ADDR_VAR 0 7
71232: PUSH
71233: LD_VAR 0 2
71237: PUSH
71238: LD_VAR 0 3
71242: MINUS
71243: ST_TO_ADDR
// max_x := x + r ;
71244: LD_ADDR_VAR 0 9
71248: PUSH
71249: LD_VAR 0 1
71253: PUSH
71254: LD_VAR 0 3
71258: PLUS
71259: ST_TO_ADDR
// max_y := y + r ;
71260: LD_ADDR_VAR 0 10
71264: PUSH
71265: LD_VAR 0 2
71269: PUSH
71270: LD_VAR 0 3
71274: PLUS
71275: ST_TO_ADDR
// for _x = min_x to max_x do
71276: LD_ADDR_VAR 0 5
71280: PUSH
71281: DOUBLE
71282: LD_VAR 0 8
71286: DEC
71287: ST_TO_ADDR
71288: LD_VAR 0 9
71292: PUSH
71293: FOR_TO
71294: IFFALSE 71395
// for _y = min_y to max_y do
71296: LD_ADDR_VAR 0 6
71300: PUSH
71301: DOUBLE
71302: LD_VAR 0 7
71306: DEC
71307: ST_TO_ADDR
71308: LD_VAR 0 10
71312: PUSH
71313: FOR_TO
71314: IFFALSE 71391
// begin if not ValidHex ( _x , _y ) then
71316: LD_VAR 0 5
71320: PPUSH
71321: LD_VAR 0 6
71325: PPUSH
71326: CALL_OW 488
71330: NOT
71331: IFFALSE 71335
// continue ;
71333: GO 71313
// if GetResourceTypeXY ( _x , _y ) then
71335: LD_VAR 0 5
71339: PPUSH
71340: LD_VAR 0 6
71344: PPUSH
71345: CALL_OW 283
71349: IFFALSE 71389
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71351: LD_ADDR_VAR 0 4
71355: PUSH
71356: LD_VAR 0 4
71360: PPUSH
71361: LD_VAR 0 4
71365: PUSH
71366: LD_INT 1
71368: PLUS
71369: PPUSH
71370: LD_VAR 0 5
71374: PUSH
71375: LD_VAR 0 6
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: PPUSH
71384: CALL_OW 1
71388: ST_TO_ADDR
// end ;
71389: GO 71313
71391: POP
71392: POP
71393: GO 71293
71395: POP
71396: POP
// end ;
71397: LD_VAR 0 4
71401: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71402: LD_INT 0
71404: PPUSH
71405: PPUSH
71406: PPUSH
71407: PPUSH
71408: PPUSH
71409: PPUSH
71410: PPUSH
71411: PPUSH
// if not units then
71412: LD_VAR 0 1
71416: NOT
71417: IFFALSE 71421
// exit ;
71419: GO 71846
// result := UnitFilter ( units , [ f_ok ] ) ;
71421: LD_ADDR_VAR 0 3
71425: PUSH
71426: LD_VAR 0 1
71430: PPUSH
71431: LD_INT 50
71433: PUSH
71434: EMPTY
71435: LIST
71436: PPUSH
71437: CALL_OW 72
71441: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71442: LD_ADDR_VAR 0 8
71446: PUSH
71447: LD_VAR 0 1
71451: PUSH
71452: LD_INT 1
71454: ARRAY
71455: PPUSH
71456: CALL_OW 255
71460: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
71461: LD_ADDR_VAR 0 10
71465: PUSH
71466: LD_INT 29
71468: PUSH
71469: LD_EXP 47
71473: PUSH
71474: EMPTY
71475: LIST
71476: LIST
71477: ST_TO_ADDR
// if not result then
71478: LD_VAR 0 3
71482: NOT
71483: IFFALSE 71487
// exit ;
71485: GO 71846
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71487: LD_ADDR_VAR 0 5
71491: PUSH
71492: LD_INT 81
71494: PUSH
71495: LD_VAR 0 8
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: PPUSH
71504: CALL_OW 69
71508: ST_TO_ADDR
// for i in result do
71509: LD_ADDR_VAR 0 4
71513: PUSH
71514: LD_VAR 0 3
71518: PUSH
71519: FOR_IN
71520: IFFALSE 71844
// begin tag := GetTag ( i ) + 1 ;
71522: LD_ADDR_VAR 0 9
71526: PUSH
71527: LD_VAR 0 4
71531: PPUSH
71532: CALL_OW 110
71536: PUSH
71537: LD_INT 1
71539: PLUS
71540: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71541: LD_ADDR_VAR 0 7
71545: PUSH
71546: LD_VAR 0 4
71550: PPUSH
71551: CALL_OW 250
71555: PPUSH
71556: LD_VAR 0 4
71560: PPUSH
71561: CALL_OW 251
71565: PPUSH
71566: LD_INT 6
71568: PPUSH
71569: CALL 71144 0 3
71573: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71574: LD_VAR 0 7
71578: PUSH
71579: LD_VAR 0 4
71583: PPUSH
71584: CALL_OW 264
71588: PUSH
71589: LD_VAR 0 10
71593: IN
71594: NOT
71595: AND
71596: IFFALSE 71635
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71598: LD_VAR 0 4
71602: PPUSH
71603: LD_VAR 0 7
71607: PUSH
71608: LD_INT 1
71610: ARRAY
71611: PUSH
71612: LD_INT 1
71614: ARRAY
71615: PPUSH
71616: LD_VAR 0 7
71620: PUSH
71621: LD_INT 1
71623: ARRAY
71624: PUSH
71625: LD_INT 2
71627: ARRAY
71628: PPUSH
71629: CALL_OW 116
71633: GO 71842
// if path > tag then
71635: LD_VAR 0 2
71639: PUSH
71640: LD_VAR 0 9
71644: GREATER
71645: IFFALSE 71812
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
71647: LD_ADDR_VAR 0 6
71651: PUSH
71652: LD_VAR 0 5
71656: PPUSH
71657: LD_INT 91
71659: PUSH
71660: LD_VAR 0 4
71664: PUSH
71665: LD_INT 12
71667: PUSH
71668: EMPTY
71669: LIST
71670: LIST
71671: LIST
71672: PPUSH
71673: CALL_OW 72
71677: ST_TO_ADDR
// if nearEnemy then
71678: LD_VAR 0 6
71682: IFFALSE 71710
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71684: LD_VAR 0 4
71688: PPUSH
71689: LD_VAR 0 6
71693: PPUSH
71694: LD_VAR 0 4
71698: PPUSH
71699: CALL_OW 74
71703: PPUSH
71704: CALL_OW 115
71708: GO 71810
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71710: LD_VAR 0 4
71714: PPUSH
71715: LD_VAR 0 2
71719: PUSH
71720: LD_VAR 0 9
71724: ARRAY
71725: PUSH
71726: LD_INT 1
71728: ARRAY
71729: PPUSH
71730: LD_VAR 0 2
71734: PUSH
71735: LD_VAR 0 9
71739: ARRAY
71740: PUSH
71741: LD_INT 2
71743: ARRAY
71744: PPUSH
71745: CALL_OW 297
71749: PUSH
71750: LD_INT 6
71752: GREATER
71753: IFFALSE 71796
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71755: LD_VAR 0 4
71759: PPUSH
71760: LD_VAR 0 2
71764: PUSH
71765: LD_VAR 0 9
71769: ARRAY
71770: PUSH
71771: LD_INT 1
71773: ARRAY
71774: PPUSH
71775: LD_VAR 0 2
71779: PUSH
71780: LD_VAR 0 9
71784: ARRAY
71785: PUSH
71786: LD_INT 2
71788: ARRAY
71789: PPUSH
71790: CALL_OW 114
71794: GO 71810
// SetTag ( i , tag ) ;
71796: LD_VAR 0 4
71800: PPUSH
71801: LD_VAR 0 9
71805: PPUSH
71806: CALL_OW 109
// end else
71810: GO 71842
// if enemy then
71812: LD_VAR 0 5
71816: IFFALSE 71842
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71818: LD_VAR 0 4
71822: PPUSH
71823: LD_VAR 0 5
71827: PPUSH
71828: LD_VAR 0 4
71832: PPUSH
71833: CALL_OW 74
71837: PPUSH
71838: CALL_OW 115
// end ;
71842: GO 71519
71844: POP
71845: POP
// end ;
71846: LD_VAR 0 3
71850: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71851: LD_INT 0
71853: PPUSH
71854: PPUSH
71855: PPUSH
// if not unit or IsInUnit ( unit ) then
71856: LD_VAR 0 1
71860: NOT
71861: PUSH
71862: LD_VAR 0 1
71866: PPUSH
71867: CALL_OW 310
71871: OR
71872: IFFALSE 71876
// exit ;
71874: GO 71967
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71876: LD_ADDR_VAR 0 4
71880: PUSH
71881: LD_VAR 0 1
71885: PPUSH
71886: CALL_OW 250
71890: PPUSH
71891: LD_VAR 0 2
71895: PPUSH
71896: LD_INT 1
71898: PPUSH
71899: CALL_OW 272
71903: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71904: LD_ADDR_VAR 0 5
71908: PUSH
71909: LD_VAR 0 1
71913: PPUSH
71914: CALL_OW 251
71918: PPUSH
71919: LD_VAR 0 2
71923: PPUSH
71924: LD_INT 1
71926: PPUSH
71927: CALL_OW 273
71931: ST_TO_ADDR
// if ValidHex ( x , y ) then
71932: LD_VAR 0 4
71936: PPUSH
71937: LD_VAR 0 5
71941: PPUSH
71942: CALL_OW 488
71946: IFFALSE 71967
// ComTurnXY ( unit , x , y ) ;
71948: LD_VAR 0 1
71952: PPUSH
71953: LD_VAR 0 4
71957: PPUSH
71958: LD_VAR 0 5
71962: PPUSH
71963: CALL_OW 118
// end ;
71967: LD_VAR 0 3
71971: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71972: LD_INT 0
71974: PPUSH
71975: PPUSH
// result := false ;
71976: LD_ADDR_VAR 0 3
71980: PUSH
71981: LD_INT 0
71983: ST_TO_ADDR
// if not units then
71984: LD_VAR 0 2
71988: NOT
71989: IFFALSE 71993
// exit ;
71991: GO 72038
// for i in units do
71993: LD_ADDR_VAR 0 4
71997: PUSH
71998: LD_VAR 0 2
72002: PUSH
72003: FOR_IN
72004: IFFALSE 72036
// if See ( side , i ) then
72006: LD_VAR 0 1
72010: PPUSH
72011: LD_VAR 0 4
72015: PPUSH
72016: CALL_OW 292
72020: IFFALSE 72034
// begin result := true ;
72022: LD_ADDR_VAR 0 3
72026: PUSH
72027: LD_INT 1
72029: ST_TO_ADDR
// exit ;
72030: POP
72031: POP
72032: GO 72038
// end ;
72034: GO 72003
72036: POP
72037: POP
// end ;
72038: LD_VAR 0 3
72042: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72043: LD_INT 0
72045: PPUSH
72046: PPUSH
72047: PPUSH
72048: PPUSH
// if not unit or not points then
72049: LD_VAR 0 1
72053: NOT
72054: PUSH
72055: LD_VAR 0 2
72059: NOT
72060: OR
72061: IFFALSE 72065
// exit ;
72063: GO 72155
// dist := 99999 ;
72065: LD_ADDR_VAR 0 5
72069: PUSH
72070: LD_INT 99999
72072: ST_TO_ADDR
// for i in points do
72073: LD_ADDR_VAR 0 4
72077: PUSH
72078: LD_VAR 0 2
72082: PUSH
72083: FOR_IN
72084: IFFALSE 72153
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72086: LD_ADDR_VAR 0 6
72090: PUSH
72091: LD_VAR 0 1
72095: PPUSH
72096: LD_VAR 0 4
72100: PUSH
72101: LD_INT 1
72103: ARRAY
72104: PPUSH
72105: LD_VAR 0 4
72109: PUSH
72110: LD_INT 2
72112: ARRAY
72113: PPUSH
72114: CALL_OW 297
72118: ST_TO_ADDR
// if tmpDist < dist then
72119: LD_VAR 0 6
72123: PUSH
72124: LD_VAR 0 5
72128: LESS
72129: IFFALSE 72151
// begin result := i ;
72131: LD_ADDR_VAR 0 3
72135: PUSH
72136: LD_VAR 0 4
72140: ST_TO_ADDR
// dist := tmpDist ;
72141: LD_ADDR_VAR 0 5
72145: PUSH
72146: LD_VAR 0 6
72150: ST_TO_ADDR
// end ; end ;
72151: GO 72083
72153: POP
72154: POP
// end ; end_of_file
72155: LD_VAR 0 3
72159: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72160: LD_VAR 0 1
72164: PUSH
72165: LD_INT 200
72167: DOUBLE
72168: GREATEREQUAL
72169: IFFALSE 72177
72171: LD_INT 299
72173: DOUBLE
72174: LESSEQUAL
72175: IFTRUE 72179
72177: GO 72211
72179: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72180: LD_VAR 0 1
72184: PPUSH
72185: LD_VAR 0 2
72189: PPUSH
72190: LD_VAR 0 3
72194: PPUSH
72195: LD_VAR 0 4
72199: PPUSH
72200: LD_VAR 0 5
72204: PPUSH
72205: CALL 27807 0 5
72209: GO 72288
72211: LD_INT 300
72213: DOUBLE
72214: GREATEREQUAL
72215: IFFALSE 72223
72217: LD_INT 399
72219: DOUBLE
72220: LESSEQUAL
72221: IFTRUE 72225
72223: GO 72287
72225: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72226: LD_VAR 0 1
72230: PPUSH
72231: LD_VAR 0 2
72235: PPUSH
72236: LD_VAR 0 3
72240: PPUSH
72241: LD_VAR 0 4
72245: PPUSH
72246: LD_VAR 0 5
72250: PPUSH
72251: LD_VAR 0 6
72255: PPUSH
72256: LD_VAR 0 7
72260: PPUSH
72261: LD_VAR 0 8
72265: PPUSH
72266: LD_VAR 0 9
72270: PPUSH
72271: LD_VAR 0 10
72275: PPUSH
72276: LD_VAR 0 11
72280: PPUSH
72281: CALL 25449 0 11
72285: GO 72288
72287: POP
// end ;
72288: PPOPN 11
72290: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72291: LD_VAR 0 1
72295: PPUSH
72296: LD_VAR 0 2
72300: PPUSH
72301: LD_VAR 0 3
72305: PPUSH
72306: LD_VAR 0 4
72310: PPUSH
72311: LD_VAR 0 5
72315: PPUSH
72316: CALL 27543 0 5
// end ; end_of_file
72320: PPOPN 5
72322: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72323: LD_VAR 0 1
72327: PPUSH
72328: LD_VAR 0 2
72332: PPUSH
72333: LD_VAR 0 3
72337: PPUSH
72338: LD_VAR 0 4
72342: PPUSH
72343: LD_VAR 0 5
72347: PPUSH
72348: LD_VAR 0 6
72352: PPUSH
72353: CALL 13142 0 6
// end ;
72357: PPOPN 6
72359: END
