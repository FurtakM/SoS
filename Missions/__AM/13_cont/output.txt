// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; export eventArabianAttack , eventRussianAttack , eventContaminate ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak := 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus := 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot := 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched := 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter := 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits := [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter := 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources := [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles := [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 := 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 := 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 := 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 := 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 := 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// eventArabianAttack := 1 ;
 154: LD_ADDR_EXP 43
 158: PUSH
 159: LD_INT 1
 161: ST_TO_ADDR
// eventRussianAttack := 2 ;
 162: LD_ADDR_EXP 44
 166: PUSH
 167: LD_INT 2
 169: ST_TO_ADDR
// eventContaminate := 3 ;
 170: LD_ADDR_EXP 45
 174: PUSH
 175: LD_INT 3
 177: ST_TO_ADDR
// mission_prefix := 13f_ ;
 178: LD_ADDR_EXP 34
 182: PUSH
 183: LD_STRING 13f_
 185: ST_TO_ADDR
// debugMode := 0 ;
 186: LD_ADDR_EXP 40
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// achivCounter := 0 ;
 194: LD_ADDR_EXP 41
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// if Difficulty = 1 then
 202: LD_OWVAR 67
 206: PUSH
 207: LD_INT 1
 209: EQUAL
 210: IFFALSE 219
// RemoveEnvironmentArea ( oilBlockArea ) ;
 212: LD_INT 15
 214: PPUSH
 215: CALL_OW 355
// if Difficulty < 4 then
 219: LD_OWVAR 67
 223: PUSH
 224: LD_INT 4
 226: LESS
 227: IFFALSE 236
// RemoveEnvironmentArea ( sibBlockArea ) ;
 229: LD_INT 18
 231: PPUSH
 232: CALL_OW 355
// PrepareVehicles ;
 236: CALL 1220 0 0
// PrepareHeroes ;
 240: CALL 477 0 0
// PrepareAmericansRandom ;
 244: CALL 1124 0 0
// PrepareDifficulty ;
 248: CALL 8426 0 0
// Action ;
 252: CALL 5290 0 0
// end ;
 256: END
// every 0 0$1 trigger debugMode do var i , j ;
 257: LD_EXP 40
 261: IFFALSE 432
 263: GO 265
 265: DISABLE
 266: LD_INT 0
 268: PPUSH
 269: PPUSH
// begin enable ;
 270: ENABLE
// FogOff ( true ) ;
 271: LD_INT 1
 273: PPUSH
 274: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 278: LD_ADDR_VAR 0 1
 282: PUSH
 283: LD_INT 22
 285: PUSH
 286: LD_INT 1
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: LD_INT 21
 295: PUSH
 296: LD_INT 1
 298: PUSH
 299: EMPTY
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 329
// SetLives ( i , 1000 ) ;
 315: LD_VAR 0 1
 319: PPUSH
 320: LD_INT 1000
 322: PPUSH
 323: CALL_OW 234
 327: GO 312
 329: POP
 330: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 331: LD_ADDR_VAR 0 1
 335: PUSH
 336: LD_INT 22
 338: PUSH
 339: LD_INT 1
 341: PUSH
 342: EMPTY
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: LD_INT 30
 351: PUSH
 352: LD_INT 0
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 30
 361: PUSH
 362: LD_INT 1
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: PPUSH
 378: CALL_OW 69
 382: PUSH
 383: FOR_IN
 384: IFFALSE 430
// for j := 1 to 3 do
 386: LD_ADDR_VAR 0 2
 390: PUSH
 391: DOUBLE
 392: LD_INT 1
 394: DEC
 395: ST_TO_ADDR
 396: LD_INT 3
 398: PUSH
 399: FOR_TO
 400: IFFALSE 426
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 274
 411: PPUSH
 412: LD_VAR 0 2
 416: PPUSH
 417: LD_INT 9999
 419: PPUSH
 420: CALL_OW 277
 424: GO 399
 426: POP
 427: POP
 428: GO 383
 430: POP
 431: POP
// end ;
 432: PPOPN 2
 434: END
// every 0 0$1 trigger achivCounter >= 2 do
 435: LD_EXP 41
 439: PUSH
 440: LD_INT 2
 442: GREATEREQUAL
 443: IFFALSE 455
 445: GO 447
 447: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 448: LD_STRING ACH_REMOTE
 450: PPUSH
 451: CALL_OW 543
 455: END
// every 0 0$1 trigger destroyCounter >= 30 do
 456: LD_EXP 42
 460: PUSH
 461: LD_INT 30
 463: GREATEREQUAL
 464: IFFALSE 476
 466: GO 468
 468: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 469: LD_STRING ACH_DEFMASTER
 471: PPUSH
 472: CALL_OW 543
 476: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 477: LD_INT 0
 479: PPUSH
 480: PPUSH
 481: PPUSH
 482: PPUSH
// uc_side = 1 ;
 483: LD_ADDR_OWVAR 20
 487: PUSH
 488: LD_INT 1
 490: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 491: LD_ADDR_EXP 1
 495: PUSH
 496: LD_STRING JMM
 498: PPUSH
 499: LD_EXP 40
 503: NOT
 504: PPUSH
 505: LD_STRING 13c_
 507: PPUSH
 508: CALL 31531 0 3
 512: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 513: LD_ADDR_EXP 2
 517: PUSH
 518: LD_STRING Stevens
 520: PPUSH
 521: LD_EXP 40
 525: NOT
 526: PPUSH
 527: LD_STRING 13c_
 529: PPUSH
 530: CALL 31531 0 3
 534: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 535: LD_ADDR_EXP 3
 539: PUSH
 540: LD_STRING Lisa
 542: PPUSH
 543: LD_EXP 40
 547: NOT
 548: PPUSH
 549: LD_STRING 13c_
 551: PPUSH
 552: CALL 31531 0 3
 556: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 557: LD_ADDR_EXP 4
 561: PUSH
 562: LD_STRING Donaldson
 564: PPUSH
 565: LD_EXP 40
 569: NOT
 570: PPUSH
 571: LD_STRING 13c_
 573: PPUSH
 574: CALL 31531 0 3
 578: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 579: LD_ADDR_EXP 5
 583: PUSH
 584: LD_STRING Bobby
 586: PPUSH
 587: LD_EXP 40
 591: NOT
 592: PPUSH
 593: LD_STRING 13c_
 595: PPUSH
 596: CALL 31531 0 3
 600: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 601: LD_ADDR_EXP 6
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_EXP 40
 613: NOT
 614: PPUSH
 615: LD_STRING 13c_
 617: PPUSH
 618: CALL 31531 0 3
 622: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 623: LD_ADDR_EXP 7
 627: PUSH
 628: LD_STRING Denis
 630: PPUSH
 631: LD_EXP 40
 635: NOT
 636: PPUSH
 637: LD_STRING 13c_
 639: PPUSH
 640: CALL 31531 0 3
 644: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 645: LD_ADDR_EXP 8
 649: PUSH
 650: LD_STRING Brown
 652: PPUSH
 653: LD_EXP 40
 657: NOT
 658: PPUSH
 659: LD_STRING 13c_
 661: PPUSH
 662: CALL 31531 0 3
 666: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true , 13c_ ) ;
 667: LD_ADDR_EXP 9
 671: PUSH
 672: LD_STRING Gladstone
 674: PPUSH
 675: LD_INT 1
 677: PPUSH
 678: LD_STRING 13c_
 680: PPUSH
 681: CALL 31531 0 3
 685: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true , 13c_ ) ;
 686: LD_ADDR_EXP 10
 690: PUSH
 691: LD_STRING Houten
 693: PPUSH
 694: LD_INT 1
 696: PPUSH
 697: LD_STRING 13c_
 699: PPUSH
 700: CALL 31531 0 3
 704: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , true , 13c_ ) ;
 705: LD_ADDR_EXP 11
 709: PUSH
 710: LD_STRING Cornel
 712: PPUSH
 713: LD_INT 1
 715: PPUSH
 716: LD_STRING 13c_
 718: PPUSH
 719: CALL 31531 0 3
 723: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true , 13c_ ) ;
 724: LD_ADDR_EXP 12
 728: PUSH
 729: LD_STRING Gary
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_STRING 13c_
 737: PPUSH
 738: CALL 31531 0 3
 742: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 13c_ ) ;
 743: LD_ADDR_EXP 13
 747: PUSH
 748: LD_STRING Frank
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_STRING 13c_
 756: PPUSH
 757: CALL 31531 0 3
 761: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true , 13c_ ) ;
 762: LD_ADDR_EXP 14
 766: PUSH
 767: LD_STRING Kikuchi
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: LD_STRING 13c_
 775: PPUSH
 776: CALL 31531 0 3
 780: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 781: LD_ADDR_EXP 15
 785: PUSH
 786: LD_STRING Powell
 788: PPUSH
 789: LD_INT 0
 791: PPUSH
 792: LD_STRING 
 794: PPUSH
 795: CALL 31531 0 3
 799: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 800: LD_ADDR_VAR 0 2
 804: PUSH
 805: LD_EXP 1
 809: PUSH
 810: LD_EXP 2
 814: PUSH
 815: LD_EXP 3
 819: PUSH
 820: LD_EXP 4
 824: PUSH
 825: LD_EXP 5
 829: PUSH
 830: LD_EXP 6
 834: PUSH
 835: LD_EXP 7
 839: PUSH
 840: LD_EXP 8
 844: PUSH
 845: LD_EXP 9
 849: PUSH
 850: LD_EXP 10
 854: PUSH
 855: LD_EXP 11
 859: PUSH
 860: LD_EXP 12
 864: PUSH
 865: LD_EXP 13
 869: PUSH
 870: LD_EXP 14
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 891: LD_ADDR_VAR 0 3
 895: PUSH
 896: LD_INT 22
 898: PUSH
 899: LD_INT 1
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PUSH
 906: LD_INT 33
 908: PUSH
 909: LD_INT 1
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: PUSH
 916: LD_INT 21
 918: PUSH
 919: LD_INT 2
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: PUSH
 926: EMPTY
 927: LIST
 928: LIST
 929: LIST
 930: PPUSH
 931: CALL_OW 69
 935: ST_TO_ADDR
// for i = tmp downto 1 do
 936: LD_ADDR_VAR 0 4
 940: PUSH
 941: DOUBLE
 942: LD_VAR 0 2
 946: INC
 947: ST_TO_ADDR
 948: LD_INT 1
 950: PUSH
 951: FOR_DOWNTO
 952: IFFALSE 989
// if not tmp [ i ] then
 954: LD_VAR 0 2
 958: PUSH
 959: LD_VAR 0 4
 963: ARRAY
 964: NOT
 965: IFFALSE 987
// tmp := Delete ( tmp , i ) ;
 967: LD_ADDR_VAR 0 2
 971: PUSH
 972: LD_VAR 0 2
 976: PPUSH
 977: LD_VAR 0 4
 981: PPUSH
 982: CALL_OW 3
 986: ST_TO_ADDR
 987: GO 951
 989: POP
 990: POP
// for i = 1 to tmp do
 991: LD_ADDR_VAR 0 4
 995: PUSH
 996: DOUBLE
 997: LD_INT 1
 999: DEC
1000: ST_TO_ADDR
1001: LD_VAR 0 2
1005: PUSH
1006: FOR_TO
1007: IFFALSE 1037
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1009: LD_VAR 0 2
1013: PUSH
1014: LD_VAR 0 4
1018: ARRAY
1019: PPUSH
1020: LD_VAR 0 3
1024: PUSH
1025: LD_VAR 0 4
1029: ARRAY
1030: PPUSH
1031: CALL_OW 52
1035: GO 1006
1037: POP
1038: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1039: LD_INT 22
1041: PUSH
1042: LD_INT 1
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PUSH
1049: LD_INT 25
1051: PUSH
1052: LD_INT 2
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: PUSH
1059: EMPTY
1060: LIST
1061: LIST
1062: PPUSH
1063: CALL_OW 69
1067: PUSH
1068: LD_INT 0
1070: EQUAL
1071: PUSH
1072: LD_INT 22
1074: PUSH
1075: LD_INT 1
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PUSH
1082: LD_INT 34
1084: PUSH
1085: LD_INT 13
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PPUSH
1096: CALL_OW 69
1100: PUSH
1101: LD_INT 0
1103: EQUAL
1104: AND
1105: IFFALSE 1119
// SetClass ( JMM , 2 ) ;
1107: LD_EXP 1
1111: PPUSH
1112: LD_INT 2
1114: PPUSH
1115: CALL_OW 336
// end ;
1119: LD_VAR 0 1
1123: RET
// export function PrepareAmericansRandom ; var i ; begin
1124: LD_INT 0
1126: PPUSH
1127: PPUSH
// uc_side = 1 ;
1128: LD_ADDR_OWVAR 20
1132: PUSH
1133: LD_INT 1
1135: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1136: LD_ADDR_EXP 16
1140: PUSH
1141: LD_STRING 13c_others
1143: PPUSH
1144: CALL_OW 31
1148: ST_TO_ADDR
// for i in others13 do
1149: LD_ADDR_VAR 0 2
1153: PUSH
1154: LD_EXP 16
1158: PUSH
1159: FOR_IN
1160: IFFALSE 1213
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1162: LD_VAR 0 2
1166: PPUSH
1167: LD_INT 22
1169: PUSH
1170: LD_INT 1
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: LD_INT 21
1179: PUSH
1180: LD_INT 2
1182: PUSH
1183: EMPTY
1184: LIST
1185: LIST
1186: PUSH
1187: LD_INT 58
1189: PUSH
1190: EMPTY
1191: LIST
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: PPUSH
1198: CALL_OW 69
1202: PUSH
1203: LD_INT 1
1205: ARRAY
1206: PPUSH
1207: CALL_OW 52
1211: GO 1159
1213: POP
1214: POP
// end ;
1215: LD_VAR 0 1
1219: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1220: LD_INT 0
1222: PPUSH
1223: PPUSH
1224: PPUSH
1225: PPUSH
1226: PPUSH
1227: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1228: LD_ADDR_VAR 0 5
1232: PUSH
1233: LD_STRING 13_VehiclesIn13_1
1235: PPUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 5
1241: PUSH
1242: LD_INT 3
1244: PUSH
1245: LD_INT 1
1247: PUSH
1248: LD_INT 6
1250: PUSH
1251: LD_INT 100
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: PUSH
1262: LD_INT 1
1264: PUSH
1265: LD_INT 5
1267: PUSH
1268: LD_INT 3
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 6
1276: PUSH
1277: LD_INT 100
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: PUSH
1288: LD_INT 1
1290: PUSH
1291: LD_INT 5
1293: PUSH
1294: LD_INT 3
1296: PUSH
1297: LD_INT 1
1299: PUSH
1300: LD_INT 6
1302: PUSH
1303: LD_INT 100
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: PUSH
1314: LD_INT 1
1316: PUSH
1317: LD_INT 5
1319: PUSH
1320: LD_INT 3
1322: PUSH
1323: LD_INT 1
1325: PUSH
1326: LD_INT 6
1328: PUSH
1329: LD_INT 100
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: PUSH
1340: LD_INT 1
1342: PUSH
1343: LD_INT 5
1345: PUSH
1346: LD_INT 3
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: LD_INT 6
1354: PUSH
1355: LD_INT 100
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 1
1368: PUSH
1369: LD_INT 5
1371: PUSH
1372: LD_INT 3
1374: PUSH
1375: LD_INT 1
1377: PUSH
1378: LD_INT 6
1380: PUSH
1381: LD_INT 100
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 1
1394: PUSH
1395: LD_INT 5
1397: PUSH
1398: LD_INT 3
1400: PUSH
1401: LD_INT 1
1403: PUSH
1404: LD_INT 6
1406: PUSH
1407: LD_INT 100
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 1
1420: PUSH
1421: LD_INT 5
1423: PUSH
1424: LD_INT 3
1426: PUSH
1427: LD_INT 1
1429: PUSH
1430: LD_INT 6
1432: PUSH
1433: LD_INT 100
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: PPUSH
1454: CALL_OW 30
1458: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1459: LD_ADDR_EXP 24
1463: PUSH
1464: LD_STRING 13_ResourcesInCargo13_1
1466: PPUSH
1467: EMPTY
1468: PPUSH
1469: CALL_OW 30
1473: ST_TO_ADDR
// cargoList = [ ] ;
1474: LD_ADDR_VAR 0 6
1478: PUSH
1479: EMPTY
1480: ST_TO_ADDR
// uc_side = 1 ;
1481: LD_ADDR_OWVAR 20
1485: PUSH
1486: LD_INT 1
1488: ST_TO_ADDR
// if vehicles then
1489: LD_VAR 0 5
1493: IFFALSE 1840
// begin for i := 1 to vehicles do
1495: LD_ADDR_VAR 0 2
1499: PUSH
1500: DOUBLE
1501: LD_INT 1
1503: DEC
1504: ST_TO_ADDR
1505: LD_VAR 0 5
1509: PUSH
1510: FOR_TO
1511: IFFALSE 1660
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1513: LD_ADDR_OWVAR 21
1517: PUSH
1518: LD_VAR 0 5
1522: PUSH
1523: LD_VAR 0 2
1527: ARRAY
1528: PUSH
1529: LD_INT 1
1531: ARRAY
1532: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1533: LD_ADDR_OWVAR 37
1537: PUSH
1538: LD_VAR 0 5
1542: PUSH
1543: LD_VAR 0 2
1547: ARRAY
1548: PUSH
1549: LD_INT 2
1551: ARRAY
1552: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1553: LD_ADDR_OWVAR 39
1557: PUSH
1558: LD_VAR 0 5
1562: PUSH
1563: LD_VAR 0 2
1567: ARRAY
1568: PUSH
1569: LD_INT 3
1571: ARRAY
1572: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1573: LD_ADDR_OWVAR 38
1577: PUSH
1578: LD_VAR 0 5
1582: PUSH
1583: LD_VAR 0 2
1587: ARRAY
1588: PUSH
1589: LD_INT 4
1591: ARRAY
1592: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1593: LD_ADDR_OWVAR 40
1597: PUSH
1598: LD_VAR 0 5
1602: PUSH
1603: LD_VAR 0 2
1607: ARRAY
1608: PUSH
1609: LD_INT 5
1611: ARRAY
1612: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1613: LD_ADDR_OWVAR 41
1617: PUSH
1618: LD_INT 40
1620: ST_TO_ADDR
// veh = CreateVehicle ;
1621: LD_ADDR_VAR 0 4
1625: PUSH
1626: CALL_OW 45
1630: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1631: LD_VAR 0 4
1635: PPUSH
1636: LD_INT 1
1638: PPUSH
1639: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1643: LD_VAR 0 4
1647: PPUSH
1648: LD_INT 2
1650: PPUSH
1651: LD_INT 0
1653: PPUSH
1654: CALL_OW 49
// end ;
1658: GO 1510
1660: POP
1661: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1662: LD_ADDR_VAR 0 6
1666: PUSH
1667: LD_INT 22
1669: PUSH
1670: LD_INT 1
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 21
1679: PUSH
1680: LD_INT 2
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 34
1689: PUSH
1690: LD_INT 12
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: PPUSH
1702: CALL_OW 69
1706: ST_TO_ADDR
// if cargoList then
1707: LD_VAR 0 6
1711: IFFALSE 1840
// for i = 1 to cargoList do
1713: LD_ADDR_VAR 0 2
1717: PUSH
1718: DOUBLE
1719: LD_INT 1
1721: DEC
1722: ST_TO_ADDR
1723: LD_VAR 0 6
1727: PUSH
1728: FOR_TO
1729: IFFALSE 1838
// begin if resources then
1731: LD_EXP 24
1735: IFFALSE 1836
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1737: LD_VAR 0 6
1741: PUSH
1742: LD_VAR 0 2
1746: ARRAY
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: LD_EXP 24
1755: PUSH
1756: LD_VAR 0 2
1760: ARRAY
1761: PUSH
1762: LD_INT 1
1764: ARRAY
1765: PPUSH
1766: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1770: LD_VAR 0 6
1774: PUSH
1775: LD_VAR 0 2
1779: ARRAY
1780: PPUSH
1781: LD_INT 2
1783: PPUSH
1784: LD_EXP 24
1788: PUSH
1789: LD_VAR 0 2
1793: ARRAY
1794: PUSH
1795: LD_INT 2
1797: ARRAY
1798: PPUSH
1799: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1803: LD_VAR 0 6
1807: PUSH
1808: LD_VAR 0 2
1812: ARRAY
1813: PPUSH
1814: LD_INT 3
1816: PPUSH
1817: LD_EXP 24
1821: PUSH
1822: LD_VAR 0 2
1826: ARRAY
1827: PUSH
1828: LD_INT 3
1830: ARRAY
1831: PPUSH
1832: CALL_OW 291
// end ; end ;
1836: GO 1728
1838: POP
1839: POP
// end ; end ;
1840: LD_VAR 0 1
1844: RET
// export function PowellSupport ; var i , veh , un ; begin
1845: LD_INT 0
1847: PPUSH
1848: PPUSH
1849: PPUSH
1850: PPUSH
// for i := 1 to [ 4 , 3 , 2 , 2 ] [ Difficulty ] do
1851: LD_ADDR_VAR 0 2
1855: PUSH
1856: DOUBLE
1857: LD_INT 1
1859: DEC
1860: ST_TO_ADDR
1861: LD_INT 4
1863: PUSH
1864: LD_INT 3
1866: PUSH
1867: LD_INT 2
1869: PUSH
1870: LD_INT 2
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: PUSH
1879: LD_OWVAR 67
1883: ARRAY
1884: PUSH
1885: FOR_TO
1886: IFFALSE 2150
// begin uc_nation := 1 ;
1888: LD_ADDR_OWVAR 21
1892: PUSH
1893: LD_INT 1
1895: ST_TO_ADDR
// uc_side := 1 ;
1896: LD_ADDR_OWVAR 20
1900: PUSH
1901: LD_INT 1
1903: ST_TO_ADDR
// vc_engine := engine_siberite ;
1904: LD_ADDR_OWVAR 39
1908: PUSH
1909: LD_INT 3
1911: ST_TO_ADDR
// vc_control := control_manual ;
1912: LD_ADDR_OWVAR 38
1916: PUSH
1917: LD_INT 1
1919: ST_TO_ADDR
// vc_weapon := [ us_laser , us_heavy_gun , us_laser , us_double_gun , us_double_gun ] [ Difficulty + rand ( 0 , 1 ) ] ;
1920: LD_ADDR_OWVAR 40
1924: PUSH
1925: LD_INT 9
1927: PUSH
1928: LD_INT 6
1930: PUSH
1931: LD_INT 9
1933: PUSH
1934: LD_INT 5
1936: PUSH
1937: LD_INT 5
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: PUSH
1947: LD_OWVAR 67
1951: PUSH
1952: LD_INT 0
1954: PPUSH
1955: LD_INT 1
1957: PPUSH
1958: CALL_OW 12
1962: PLUS
1963: ARRAY
1964: ST_TO_ADDR
// if vc_weapon = us_heavy_gun then
1965: LD_OWVAR 40
1969: PUSH
1970: LD_INT 6
1972: EQUAL
1973: IFFALSE 2002
// vc_chassis := [ us_morphling , us_heavy_tracked , us_heavy_tracked ] [ Difficulty ] else
1975: LD_ADDR_OWVAR 37
1979: PUSH
1980: LD_INT 5
1982: PUSH
1983: LD_INT 4
1985: PUSH
1986: LD_INT 4
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: PUSH
1994: LD_OWVAR 67
1998: ARRAY
1999: ST_TO_ADDR
2000: GO 2037
// vc_chassis := [ us_morphling , us_heavy_tracked , us_medium_tracked , us_medium_tracked ] [ rand ( 1 , 4 ) ] ;
2002: LD_ADDR_OWVAR 37
2006: PUSH
2007: LD_INT 5
2009: PUSH
2010: LD_INT 4
2012: PUSH
2013: LD_INT 3
2015: PUSH
2016: LD_INT 3
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: LIST
2023: LIST
2024: PUSH
2025: LD_INT 1
2027: PPUSH
2028: LD_INT 4
2030: PPUSH
2031: CALL_OW 12
2035: ARRAY
2036: ST_TO_ADDR
// veh = CreateVehicle ;
2037: LD_ADDR_VAR 0 3
2041: PUSH
2042: CALL_OW 45
2046: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2047: LD_VAR 0 3
2051: PPUSH
2052: LD_INT 2
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 49
// SetDir ( veh , 1 ) ;
2062: LD_VAR 0 3
2066: PPUSH
2067: LD_INT 1
2069: PPUSH
2070: CALL_OW 233
// hc_gallery :=  ;
2074: LD_ADDR_OWVAR 33
2078: PUSH
2079: LD_STRING 
2081: ST_TO_ADDR
// hc_name :=  ;
2082: LD_ADDR_OWVAR 26
2086: PUSH
2087: LD_STRING 
2089: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2090: LD_INT 0
2092: PPUSH
2093: LD_INT 3
2095: PPUSH
2096: LD_INT 9
2098: PUSH
2099: LD_INT 8
2101: PUSH
2102: LD_INT 8
2104: PUSH
2105: LD_INT 7
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PUSH
2114: LD_OWVAR 67
2118: ARRAY
2119: PPUSH
2120: CALL_OW 380
// un := CreateHuman ;
2124: LD_ADDR_VAR 0 4
2128: PUSH
2129: CALL_OW 44
2133: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2134: LD_VAR 0 4
2138: PPUSH
2139: LD_VAR 0 3
2143: PPUSH
2144: CALL_OW 52
// end ;
2148: GO 1885
2150: POP
2151: POP
// for i := 1 to [ 2 , 2 , 2 , 1 ] [ Difficulty ] do
2152: LD_ADDR_VAR 0 2
2156: PUSH
2157: DOUBLE
2158: LD_INT 1
2160: DEC
2161: ST_TO_ADDR
2162: LD_INT 2
2164: PUSH
2165: LD_INT 2
2167: PUSH
2168: LD_INT 2
2170: PUSH
2171: LD_INT 1
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: PUSH
2180: LD_OWVAR 67
2184: ARRAY
2185: PUSH
2186: FOR_TO
2187: IFFALSE 2262
// begin PrepareHuman ( false , class_soldier , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2189: LD_INT 0
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_INT 9
2197: PUSH
2198: LD_INT 8
2200: PUSH
2201: LD_INT 8
2203: PUSH
2204: LD_INT 7
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: PUSH
2213: LD_OWVAR 67
2217: ARRAY
2218: PPUSH
2219: CALL_OW 380
// un := CreateHuman ;
2223: LD_ADDR_VAR 0 4
2227: PUSH
2228: CALL_OW 44
2232: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2233: LD_VAR 0 4
2237: PPUSH
2238: LD_INT 1
2240: PPUSH
2241: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
2245: LD_VAR 0 4
2249: PPUSH
2250: LD_INT 2
2252: PPUSH
2253: LD_INT 0
2255: PPUSH
2256: CALL_OW 49
// end ;
2260: GO 2186
2262: POP
2263: POP
// end ; end_of_file
2264: LD_VAR 0 1
2268: RET
// export function PrepareBurlak ; begin
2269: LD_INT 0
2271: PPUSH
// uc_side := 7 ;
2272: LD_ADDR_OWVAR 20
2276: PUSH
2277: LD_INT 7
2279: ST_TO_ADDR
// uc_nation := 3 ;
2280: LD_ADDR_OWVAR 21
2284: PUSH
2285: LD_INT 3
2287: ST_TO_ADDR
// vc_engine := engine_siberite ;
2288: LD_ADDR_OWVAR 39
2292: PUSH
2293: LD_INT 3
2295: ST_TO_ADDR
// vc_control := control_manual ;
2296: LD_ADDR_OWVAR 38
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ Difficulty ] ;
2304: LD_ADDR_OWVAR 40
2308: PUSH
2309: LD_INT 44
2311: PUSH
2312: LD_INT 45
2314: PUSH
2315: LD_INT 46
2317: PUSH
2318: LD_INT 46
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: PUSH
2327: LD_OWVAR 67
2331: ARRAY
2332: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
2333: LD_ADDR_OWVAR 37
2337: PUSH
2338: LD_INT 24
2340: ST_TO_ADDR
// Masha := CreateVehicle ;
2341: LD_ADDR_EXP 18
2345: PUSH
2346: CALL_OW 45
2350: ST_TO_ADDR
// SetDir ( Masha , 2 ) ;
2351: LD_EXP 18
2355: PPUSH
2356: LD_INT 2
2358: PPUSH
2359: CALL_OW 233
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2363: LD_EXP 18
2367: PPUSH
2368: LD_INT 3
2370: PPUSH
2371: LD_INT 0
2373: PPUSH
2374: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2378: LD_EXP 18
2382: PPUSH
2383: LD_INT 1
2385: PPUSH
2386: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2390: LD_ADDR_EXP 17
2394: PUSH
2395: LD_STRING Burlak
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: LD_STRING 
2403: PPUSH
2404: CALL 31531 0 3
2408: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2409: LD_EXP 17
2413: PPUSH
2414: LD_EXP 18
2418: PPUSH
2419: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2423: LD_EXP 18
2427: PPUSH
2428: LD_INT 107
2430: PPUSH
2431: LD_INT 118
2433: PPUSH
2434: CALL_OW 114
// spawnBurlak := 1 ;
2438: LD_ADDR_EXP 27
2442: PUSH
2443: LD_INT 1
2445: ST_TO_ADDR
// end ;
2446: LD_VAR 0 1
2450: RET
// export function BurlakArmy ; var i , veh , tmp , bazooka ; begin
2451: LD_INT 0
2453: PPUSH
2454: PPUSH
2455: PPUSH
2456: PPUSH
2457: PPUSH
// uc_side := 7 ;
2458: LD_ADDR_OWVAR 20
2462: PUSH
2463: LD_INT 7
2465: ST_TO_ADDR
// uc_nation := 3 ;
2466: LD_ADDR_OWVAR 21
2470: PUSH
2471: LD_INT 3
2473: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
2474: LD_ADDR_EXP 19
2478: PUSH
2479: LD_STRING Gnyevko
2481: PPUSH
2482: LD_INT 0
2484: PPUSH
2485: LD_STRING 
2487: PPUSH
2488: CALL 31531 0 3
2492: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2493: LD_ADDR_EXP 20
2497: PUSH
2498: LD_STRING Titov
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: LD_STRING 
2506: PPUSH
2507: CALL 31531 0 3
2511: ST_TO_ADDR
// Xavier := PrepareUnit ( Xavier2 , false ,  ) ;
2512: LD_ADDR_EXP 21
2516: PUSH
2517: LD_STRING Xavier2
2519: PPUSH
2520: LD_INT 0
2522: PPUSH
2523: LD_STRING 
2525: PPUSH
2526: CALL 31531 0 3
2530: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
2531: LD_ADDR_EXP 22
2535: PUSH
2536: LD_STRING Belkov
2538: PPUSH
2539: LD_INT 0
2541: PPUSH
2542: LD_STRING 
2544: PPUSH
2545: CALL 31531 0 3
2549: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2550: LD_ADDR_EXP 23
2554: PUSH
2555: LD_STRING Lipshchin
2557: PPUSH
2558: LD_INT 0
2560: PPUSH
2561: LD_STRING 
2563: PPUSH
2564: CALL 31531 0 3
2568: ST_TO_ADDR
// for i = 1 to 5 do
2569: LD_ADDR_VAR 0 2
2573: PUSH
2574: DOUBLE
2575: LD_INT 1
2577: DEC
2578: ST_TO_ADDR
2579: LD_INT 5
2581: PUSH
2582: FOR_TO
2583: IFFALSE 2708
// begin vc_engine := engine_siberite ;
2585: LD_ADDR_OWVAR 39
2589: PUSH
2590: LD_INT 3
2592: ST_TO_ADDR
// vc_control := control_manual ;
2593: LD_ADDR_OWVAR 38
2597: PUSH
2598: LD_INT 1
2600: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun , ru_time_lapser ] [ rand ( 1 , 5 ) ] ;
2601: LD_ADDR_OWVAR 40
2605: PUSH
2606: LD_INT 43
2608: PUSH
2609: LD_INT 45
2611: PUSH
2612: LD_INT 45
2614: PUSH
2615: LD_INT 44
2617: PUSH
2618: LD_INT 49
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: PUSH
2628: LD_INT 1
2630: PPUSH
2631: LD_INT 5
2633: PPUSH
2634: CALL_OW 12
2638: ARRAY
2639: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] ;
2640: LD_ADDR_OWVAR 37
2644: PUSH
2645: LD_INT 22
2647: PUSH
2648: LD_INT 22
2650: PUSH
2651: LD_INT 24
2653: PUSH
2654: LD_INT 24
2656: PUSH
2657: EMPTY
2658: LIST
2659: LIST
2660: LIST
2661: LIST
2662: PUSH
2663: LD_OWVAR 67
2667: ARRAY
2668: ST_TO_ADDR
// veh = CreateVehicle ;
2669: LD_ADDR_VAR 0 3
2673: PUSH
2674: CALL_OW 45
2678: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2679: LD_VAR 0 3
2683: PPUSH
2684: LD_INT 2
2686: PPUSH
2687: CALL_OW 233
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2691: LD_VAR 0 3
2695: PPUSH
2696: LD_INT 3
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL_OW 49
// end ;
2706: GO 2582
2708: POP
2709: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2710: LD_ADDR_VAR 0 4
2714: PUSH
2715: LD_INT 22
2717: PUSH
2718: LD_INT 7
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 21
2727: PUSH
2728: LD_INT 2
2730: PUSH
2731: EMPTY
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 58
2737: PUSH
2738: EMPTY
2739: LIST
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: LIST
2745: PPUSH
2746: CALL_OW 69
2750: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2751: LD_EXP 19
2755: PPUSH
2756: LD_VAR 0 4
2760: PUSH
2761: LD_INT 1
2763: ARRAY
2764: PPUSH
2765: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2769: LD_EXP 20
2773: PPUSH
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 2
2781: ARRAY
2782: PPUSH
2783: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2787: LD_EXP 21
2791: PPUSH
2792: LD_VAR 0 4
2796: PUSH
2797: LD_INT 3
2799: ARRAY
2800: PPUSH
2801: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2805: LD_EXP 22
2809: PPUSH
2810: LD_VAR 0 4
2814: PUSH
2815: LD_INT 4
2817: ARRAY
2818: PPUSH
2819: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2823: LD_EXP 23
2827: PPUSH
2828: LD_VAR 0 4
2832: PUSH
2833: LD_INT 5
2835: ARRAY
2836: PPUSH
2837: CALL_OW 52
// SetClass ( Gnyevko , class_mechanic ) ;
2841: LD_EXP 19
2845: PPUSH
2846: LD_INT 3
2848: PPUSH
2849: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , class_bazooker ) ;
2853: LD_EXP 20
2857: PUSH
2858: LD_EXP 23
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PPUSH
2867: LD_INT 9
2869: PPUSH
2870: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2874: LD_ADDR_VAR 0 4
2878: PUSH
2879: LD_INT 22
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: CALL_OW 69
2893: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2894: LD_VAR 0 4
2898: PPUSH
2899: LD_INT 107
2901: PPUSH
2902: LD_INT 118
2904: PPUSH
2905: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2909: LD_INT 35
2911: PPUSH
2912: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) , Masha ) ;
2916: LD_VAR 0 4
2920: PPUSH
2921: LD_INT 34
2923: PUSH
2924: LD_INT 49
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PPUSH
2931: CALL_OW 72
2935: PPUSH
2936: LD_EXP 18
2940: PPUSH
2941: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , 107 , 118 ) ;
2945: LD_VAR 0 4
2949: PPUSH
2950: LD_INT 3
2952: PUSH
2953: LD_INT 34
2955: PUSH
2956: LD_INT 49
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 72
2971: PPUSH
2972: LD_INT 107
2974: PPUSH
2975: LD_INT 118
2977: PPUSH
2978: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
2982: LD_ADDR_VAR 0 5
2986: PUSH
2987: LD_EXP 20
2991: PUSH
2992: LD_EXP 23
2996: PUSH
2997: EMPTY
2998: LIST
2999: LIST
3000: PPUSH
3001: LD_INT 50
3003: PUSH
3004: EMPTY
3005: LIST
3006: PUSH
3007: LD_INT 3
3009: PUSH
3010: LD_INT 54
3012: PUSH
3013: EMPTY
3014: LIST
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PPUSH
3024: CALL_OW 72
3028: ST_TO_ADDR
// if bazooka then
3029: LD_VAR 0 5
3033: IFFALSE 3075
// begin for i in bazooka do
3035: LD_ADDR_VAR 0 2
3039: PUSH
3040: LD_VAR 0 5
3044: PUSH
3045: FOR_IN
3046: IFFALSE 3073
// if See ( 1 , i ) then
3048: LD_INT 1
3050: PPUSH
3051: LD_VAR 0 2
3055: PPUSH
3056: CALL_OW 292
3060: IFFALSE 3071
// ComSpaceTimeShoot ( i ) ;
3062: LD_VAR 0 2
3066: PPUSH
3067: CALL 32478 0 1
3071: GO 3045
3073: POP
3074: POP
// end ; until UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) = 0 or IsDying ( Masha ) ;
3075: LD_VAR 0 4
3079: PPUSH
3080: LD_INT 34
3082: PUSH
3083: LD_INT 49
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: PPUSH
3090: CALL_OW 72
3094: PUSH
3095: LD_INT 0
3097: EQUAL
3098: PUSH
3099: LD_EXP 18
3103: PPUSH
3104: CALL_OW 303
3108: OR
3109: IFFALSE 2909
// repeat wait ( 0 0$1 ) ;
3111: LD_INT 35
3113: PPUSH
3114: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
3118: LD_ADDR_VAR 0 4
3122: PUSH
3123: LD_INT 22
3125: PUSH
3126: LD_INT 7
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: PPUSH
3133: CALL_OW 69
3137: PUSH
3138: LD_EXP 17
3142: DIFF
3143: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
3144: LD_VAR 0 4
3148: PPUSH
3149: LD_INT 107
3151: PPUSH
3152: LD_INT 118
3154: PPUSH
3155: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3159: LD_ADDR_VAR 0 5
3163: PUSH
3164: LD_EXP 20
3168: PUSH
3169: LD_EXP 23
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PPUSH
3178: LD_INT 50
3180: PUSH
3181: EMPTY
3182: LIST
3183: PUSH
3184: LD_INT 3
3186: PUSH
3187: LD_INT 54
3189: PUSH
3190: EMPTY
3191: LIST
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: PPUSH
3201: CALL_OW 72
3205: ST_TO_ADDR
// if bazooka then
3206: LD_VAR 0 5
3210: IFFALSE 3252
// begin for i in bazooka do
3212: LD_ADDR_VAR 0 2
3216: PUSH
3217: LD_VAR 0 5
3221: PUSH
3222: FOR_IN
3223: IFFALSE 3250
// if See ( 1 , i ) then
3225: LD_INT 1
3227: PPUSH
3228: LD_VAR 0 2
3232: PPUSH
3233: CALL_OW 292
3237: IFFALSE 3248
// ComSpaceTimeShoot ( i ) ;
3239: LD_VAR 0 2
3243: PPUSH
3244: CALL 32478 0 1
3248: GO 3222
3250: POP
3251: POP
// end ; if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
3252: LD_EXP 17
3256: PPUSH
3257: CALL_OW 302
3261: PUSH
3262: LD_EXP 17
3266: PPUSH
3267: CALL_OW 310
3271: NOT
3272: AND
3273: IFFALSE 3290
// ComMoveXY ( Burlak , 107 , 118 ) ;
3275: LD_EXP 17
3279: PPUSH
3280: LD_INT 107
3282: PPUSH
3283: LD_INT 118
3285: PPUSH
3286: CALL_OW 111
// until not tmp ;
3290: LD_VAR 0 4
3294: NOT
3295: IFFALSE 3111
// end ;
3297: LD_VAR 0 1
3301: RET
// export function PrepareRussianAttack ; var i , un , veh , area , dir ; begin
3302: LD_INT 0
3304: PPUSH
3305: PPUSH
3306: PPUSH
3307: PPUSH
3308: PPUSH
3309: PPUSH
// result := [ ] ;
3310: LD_ADDR_VAR 0 1
3314: PUSH
3315: EMPTY
3316: ST_TO_ADDR
// dir := rand ( 1 , 2 ) ;
3317: LD_ADDR_VAR 0 6
3321: PUSH
3322: LD_INT 1
3324: PPUSH
3325: LD_INT 2
3327: PPUSH
3328: CALL_OW 12
3332: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
3333: LD_ADDR_VAR 0 5
3337: PUSH
3338: LD_INT 8
3340: PUSH
3341: LD_INT 9
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_VAR 0 6
3352: ARRAY
3353: ST_TO_ADDR
// for i := 1 to [ 6 , 8 , 10 , 11 ] [ Difficulty ] do
3354: LD_ADDR_VAR 0 2
3358: PUSH
3359: DOUBLE
3360: LD_INT 1
3362: DEC
3363: ST_TO_ADDR
3364: LD_INT 6
3366: PUSH
3367: LD_INT 8
3369: PUSH
3370: LD_INT 10
3372: PUSH
3373: LD_INT 11
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: PUSH
3382: LD_OWVAR 67
3386: ARRAY
3387: PUSH
3388: FOR_TO
3389: IFFALSE 3627
// begin uc_side := 3 ;
3391: LD_ADDR_OWVAR 20
3395: PUSH
3396: LD_INT 3
3398: ST_TO_ADDR
// uc_nation := 3 ;
3399: LD_ADDR_OWVAR 21
3403: PUSH
3404: LD_INT 3
3406: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] , [ ru_heavy_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] [ rand ( 1 , 5 ) ] , 100 ) ;
3407: LD_INT 24
3409: PPUSH
3410: LD_INT 3
3412: PPUSH
3413: LD_INT 1
3415: PUSH
3416: LD_INT 3
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: LD_INT 1
3425: PPUSH
3426: LD_INT 2
3428: PPUSH
3429: CALL_OW 12
3433: ARRAY
3434: PPUSH
3435: LD_INT 46
3437: PUSH
3438: LD_INT 46
3440: PUSH
3441: LD_INT 45
3443: PUSH
3444: LD_INT 47
3446: PUSH
3447: LD_INT 49
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: PUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_INT 5
3462: PPUSH
3463: CALL_OW 12
3467: ARRAY
3468: PPUSH
3469: LD_INT 100
3471: PPUSH
3472: CALL 36371 0 5
// veh := CreateVehicle ;
3476: LD_ADDR_VAR 0 4
3480: PUSH
3481: CALL_OW 45
3485: ST_TO_ADDR
// result := Join ( result , veh ) ;
3486: LD_ADDR_VAR 0 1
3490: PUSH
3491: LD_VAR 0 1
3495: PPUSH
3496: LD_VAR 0 4
3500: PPUSH
3501: CALL 69233 0 2
3505: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
3506: LD_VAR 0 4
3510: PPUSH
3511: LD_INT 3
3513: PUSH
3514: LD_INT 5
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PUSH
3521: LD_VAR 0 6
3525: ARRAY
3526: PPUSH
3527: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3531: LD_VAR 0 4
3535: PPUSH
3536: LD_VAR 0 5
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL_OW 49
// if vc_control = control_manual then
3548: LD_OWVAR 38
3552: PUSH
3553: LD_INT 1
3555: EQUAL
3556: IFFALSE 3603
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3558: LD_INT 0
3560: PPUSH
3561: LD_INT 7
3563: PUSH
3564: LD_INT 8
3566: PUSH
3567: LD_INT 9
3569: PUSH
3570: LD_INT 10
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: PUSH
3579: LD_OWVAR 67
3583: ARRAY
3584: PPUSH
3585: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3589: CALL_OW 44
3593: PPUSH
3594: LD_VAR 0 4
3598: PPUSH
3599: CALL_OW 52
// end ; wait ( 0 0$0.5 ) ;
3603: LD_INT 18
3605: PPUSH
3606: CALL_OW 67
// ComAgressiveMove ( veh , 100 , 55 ) ;
3610: LD_VAR 0 4
3614: PPUSH
3615: LD_INT 100
3617: PPUSH
3618: LD_INT 55
3620: PPUSH
3621: CALL_OW 114
// end ;
3625: GO 3388
3627: POP
3628: POP
// for i in result do
3629: LD_ADDR_VAR 0 2
3633: PUSH
3634: LD_VAR 0 1
3638: PUSH
3639: FOR_IN
3640: IFFALSE 3656
// SetTag ( i , 10 ) ;
3642: LD_VAR 0 2
3646: PPUSH
3647: LD_INT 10
3649: PPUSH
3650: CALL_OW 109
3654: GO 3639
3656: POP
3657: POP
// RaiseSailEvent ( eventRussianAttack ) ;
3658: LD_EXP 44
3662: PPUSH
3663: CALL_OW 427
// end ; end_of_file
3667: LD_VAR 0 1
3671: RET
// export function DestroySibDeposit ; var un , rnd ; begin
3672: LD_INT 0
3674: PPUSH
3675: PPUSH
3676: PPUSH
// rnd := 0 ;
3677: LD_ADDR_VAR 0 3
3681: PUSH
3682: LD_INT 0
3684: ST_TO_ADDR
// uc_side := 8 ;
3685: LD_ADDR_OWVAR 20
3689: PUSH
3690: LD_INT 8
3692: ST_TO_ADDR
// uc_nation := 2 ;
3693: LD_ADDR_OWVAR 21
3697: PUSH
3698: LD_INT 2
3700: ST_TO_ADDR
// hc_name :=  ;
3701: LD_ADDR_OWVAR 26
3705: PUSH
3706: LD_STRING 
3708: ST_TO_ADDR
// hc_gallery :=  ;
3709: LD_ADDR_OWVAR 33
3713: PUSH
3714: LD_STRING 
3716: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 , 12 ] [ Difficulty ] , [ 10 , 11 , 12 , 12 ] [ Difficulty ] ] ;
3717: LD_ADDR_OWVAR 29
3721: PUSH
3722: LD_INT 10
3724: PUSH
3725: LD_INT 11
3727: PUSH
3728: LD_INT 12
3730: PUSH
3731: LD_INT 12
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: PUSH
3740: LD_OWVAR 67
3744: ARRAY
3745: PUSH
3746: LD_INT 10
3748: PUSH
3749: LD_INT 11
3751: PUSH
3752: LD_INT 12
3754: PUSH
3755: LD_INT 12
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: PUSH
3764: LD_OWVAR 67
3768: ARRAY
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: ST_TO_ADDR
// PrepareHuman ( false , 4 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3774: LD_INT 0
3776: PPUSH
3777: LD_INT 4
3779: PPUSH
3780: LD_INT 7
3782: PUSH
3783: LD_INT 8
3785: PUSH
3786: LD_INT 9
3788: PUSH
3789: LD_INT 10
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: PUSH
3798: LD_OWVAR 67
3802: ARRAY
3803: PPUSH
3804: CALL_OW 380
// un := CreateHuman ;
3808: LD_ADDR_VAR 0 2
3812: PUSH
3813: CALL_OW 44
3817: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3818: LD_VAR 0 2
3822: PPUSH
3823: LD_INT 8
3825: PUSH
3826: LD_INT 9
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 2
3838: PPUSH
3839: CALL_OW 12
3843: ARRAY
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 49
// SetTag ( un , 1 ) ;
3852: LD_VAR 0 2
3856: PPUSH
3857: LD_INT 1
3859: PPUSH
3860: CALL_OW 109
// rnd := rand ( 1 , sibDeposits ) ;
3864: LD_ADDR_VAR 0 3
3868: PUSH
3869: LD_INT 1
3871: PPUSH
3872: LD_EXP 31
3876: PPUSH
3877: CALL_OW 12
3881: ST_TO_ADDR
// RaiseSailEventCustom ( eventContaminate , un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] , 0 , 0 , 0 ) ;
3882: LD_EXP 45
3886: PPUSH
3887: LD_VAR 0 2
3891: PPUSH
3892: LD_EXP 31
3896: PUSH
3897: LD_VAR 0 3
3901: ARRAY
3902: PUSH
3903: LD_INT 1
3905: ARRAY
3906: PPUSH
3907: LD_EXP 31
3911: PUSH
3912: LD_VAR 0 3
3916: ARRAY
3917: PUSH
3918: LD_INT 2
3920: ARRAY
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: LD_INT 0
3927: PPUSH
3928: LD_INT 0
3930: PPUSH
3931: CALL_OW 595
// end ;
3935: LD_VAR 0 1
3939: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do var i ;
3940: LD_INT 22
3942: PUSH
3943: LD_INT 8
3945: PUSH
3946: EMPTY
3947: LIST
3948: LIST
3949: PUSH
3950: LD_INT 3
3952: PUSH
3953: LD_INT 61
3955: PUSH
3956: EMPTY
3957: LIST
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: PUSH
3963: LD_INT 50
3965: PUSH
3966: EMPTY
3967: LIST
3968: PUSH
3969: LD_INT 33
3971: PUSH
3972: LD_INT 2
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: PPUSH
3985: CALL_OW 69
3989: IFFALSE 4076
3991: GO 3993
3993: DISABLE
3994: LD_INT 0
3996: PPUSH
// begin enable ;
3997: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do
3998: LD_ADDR_VAR 0 1
4002: PUSH
4003: LD_INT 22
4005: PUSH
4006: LD_INT 8
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: LD_INT 3
4015: PUSH
4016: LD_INT 61
4018: PUSH
4019: EMPTY
4020: LIST
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: LD_INT 50
4028: PUSH
4029: EMPTY
4030: LIST
4031: PUSH
4032: LD_INT 33
4034: PUSH
4035: LD_INT 2
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: PPUSH
4048: CALL_OW 69
4052: PUSH
4053: FOR_IN
4054: IFFALSE 4074
// begin wait ( 0 0$0.3 ) ;
4056: LD_INT 10
4058: PPUSH
4059: CALL_OW 67
// Connect ( i ) ;
4063: LD_VAR 0 1
4067: PPUSH
4068: CALL 39839 0 1
// end ;
4072: GO 4053
4074: POP
4075: POP
// end ;
4076: PPOPN 1
4078: END
// export function PrepareArabianAttack ; var i , veh , xy , un , area , counter , tmp , dir ; begin
4079: LD_INT 0
4081: PPUSH
4082: PPUSH
4083: PPUSH
4084: PPUSH
4085: PPUSH
4086: PPUSH
4087: PPUSH
4088: PPUSH
4089: PPUSH
// result := [ ] ;
4090: LD_ADDR_VAR 0 1
4094: PUSH
4095: EMPTY
4096: ST_TO_ADDR
// arabianAttacksCounter := arabianAttacksCounter + 1 ;
4097: LD_ADDR_EXP 33
4101: PUSH
4102: LD_EXP 33
4106: PUSH
4107: LD_INT 1
4109: PLUS
4110: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
4111: LD_INT 22
4113: PUSH
4114: LD_INT 8
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: PUSH
4121: LD_INT 3
4123: PUSH
4124: LD_INT 58
4126: PUSH
4127: EMPTY
4128: LIST
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: PUSH
4134: LD_INT 34
4136: PUSH
4137: LD_INT 31
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: PPUSH
4149: CALL_OW 69
4153: PUSH
4154: LD_INT 2
4156: LESS
4157: IFFALSE 4401
// begin uc_side := 8 ;
4159: LD_ADDR_OWVAR 20
4163: PUSH
4164: LD_INT 8
4166: ST_TO_ADDR
// uc_nation := 2 ;
4167: LD_ADDR_OWVAR 21
4171: PUSH
4172: LD_INT 2
4174: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
4175: LD_INT 14
4177: PPUSH
4178: LD_INT 3
4180: PPUSH
4181: LD_INT 1
4183: PPUSH
4184: LD_INT 31
4186: PPUSH
4187: LD_INT 100
4189: PPUSH
4190: CALL 36371 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
4194: LD_ADDR_VAR 0 2
4198: PUSH
4199: DOUBLE
4200: LD_INT 22
4202: PUSH
4203: LD_INT 8
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PUSH
4210: LD_INT 3
4212: PUSH
4213: LD_INT 58
4215: PUSH
4216: EMPTY
4217: LIST
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PUSH
4223: LD_INT 34
4225: PUSH
4226: LD_INT 31
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: PPUSH
4238: CALL_OW 69
4242: PUSH
4243: LD_INT 1
4245: PLUS
4246: DEC
4247: ST_TO_ADDR
4248: LD_INT 2
4250: PUSH
4251: FOR_TO
4252: IFFALSE 4399
// begin veh := CreateVehicle ;
4254: LD_ADDR_VAR 0 3
4258: PUSH
4259: CALL_OW 45
4263: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
4264: LD_VAR 0 3
4268: PPUSH
4269: LD_INT 5
4271: PPUSH
4272: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
4276: LD_ADDR_VAR 0 4
4280: PUSH
4281: LD_INT 181
4283: PUSH
4284: LD_INT 105
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: PUSH
4291: LD_INT 137
4293: PUSH
4294: LD_INT 6
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: LD_VAR 0 2
4309: PUSH
4310: LD_INT 2
4312: MOD
4313: PUSH
4314: LD_INT 1
4316: PLUS
4317: ARRAY
4318: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
4319: LD_VAR 0 3
4323: PPUSH
4324: LD_VAR 0 4
4328: PUSH
4329: LD_INT 1
4331: ARRAY
4332: PPUSH
4333: LD_VAR 0 4
4337: PUSH
4338: LD_INT 2
4340: ARRAY
4341: PPUSH
4342: LD_INT 12
4344: PPUSH
4345: LD_INT 0
4347: PPUSH
4348: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4352: LD_INT 0
4354: PPUSH
4355: LD_INT 7
4357: PUSH
4358: LD_INT 9
4360: PUSH
4361: LD_INT 10
4363: PUSH
4364: LD_INT 10
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: PUSH
4373: LD_OWVAR 67
4377: ARRAY
4378: PPUSH
4379: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4383: CALL_OW 44
4387: PPUSH
4388: LD_VAR 0 3
4392: PPUSH
4393: CALL_OW 52
// end ;
4397: GO 4251
4399: POP
4400: POP
// end ; dir := rand ( 1 , 2 ) ;
4401: LD_ADDR_VAR 0 9
4405: PUSH
4406: LD_INT 1
4408: PPUSH
4409: LD_INT 2
4411: PPUSH
4412: CALL_OW 12
4416: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
4417: LD_ADDR_VAR 0 6
4421: PUSH
4422: LD_INT 8
4424: PUSH
4425: LD_INT 9
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: PUSH
4432: LD_VAR 0 9
4436: ARRAY
4437: ST_TO_ADDR
// counter := [ 6 , 8 , 10 , 11 ] [ Difficulty ] + arabianAttacksCounter ;
4438: LD_ADDR_VAR 0 7
4442: PUSH
4443: LD_INT 6
4445: PUSH
4446: LD_INT 8
4448: PUSH
4449: LD_INT 10
4451: PUSH
4452: LD_INT 11
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: PUSH
4461: LD_OWVAR 67
4465: ARRAY
4466: PUSH
4467: LD_EXP 33
4471: PLUS
4472: ST_TO_ADDR
// if counter > 20 then
4473: LD_VAR 0 7
4477: PUSH
4478: LD_INT 20
4480: GREATER
4481: IFFALSE 4491
// counter := 20 ;
4483: LD_ADDR_VAR 0 7
4487: PUSH
4488: LD_INT 20
4490: ST_TO_ADDR
// for i := 1 to counter do
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: DOUBLE
4497: LD_INT 1
4499: DEC
4500: ST_TO_ADDR
4501: LD_VAR 0 7
4505: PUSH
4506: FOR_TO
4507: IFFALSE 4840
// begin uc_side := 8 ;
4509: LD_ADDR_OWVAR 20
4513: PUSH
4514: LD_INT 8
4516: ST_TO_ADDR
// uc_nation := 2 ;
4517: LD_ADDR_OWVAR 21
4521: PUSH
4522: LD_INT 2
4524: ST_TO_ADDR
// PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] , [ ar_gun , ar_rocket_launcher , ar_gun , ar_mortar , ar_selfpropelled_bomb , ar_gatling_gun ] [ rand ( 1 , 6 ) ] , 100 ) ;
4525: LD_INT 13
4527: PUSH
4528: LD_INT 14
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PUSH
4535: LD_INT 1
4537: PPUSH
4538: LD_INT 2
4540: PPUSH
4541: CALL_OW 12
4545: ARRAY
4546: PPUSH
4547: LD_INT 3
4549: PPUSH
4550: LD_INT 1
4552: PUSH
4553: LD_INT 2
4555: PUSH
4556: LD_INT 5
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 1
4566: PPUSH
4567: LD_INT 3
4569: PPUSH
4570: CALL_OW 12
4574: ARRAY
4575: PPUSH
4576: LD_INT 27
4578: PUSH
4579: LD_INT 28
4581: PUSH
4582: LD_INT 27
4584: PUSH
4585: LD_INT 92
4587: PUSH
4588: LD_INT 29
4590: PUSH
4591: LD_INT 25
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: PUSH
4602: LD_INT 1
4604: PPUSH
4605: LD_INT 6
4607: PPUSH
4608: CALL_OW 12
4612: ARRAY
4613: PPUSH
4614: LD_INT 100
4616: PPUSH
4617: CALL 36371 0 5
// if vc_weapon = ar_selfpropelled_bomb then
4621: LD_OWVAR 40
4625: PUSH
4626: LD_INT 29
4628: EQUAL
4629: IFFALSE 4639
// vc_control := control_remote ;
4631: LD_ADDR_OWVAR 38
4635: PUSH
4636: LD_INT 2
4638: ST_TO_ADDR
// veh := CreateVehicle ;
4639: LD_ADDR_VAR 0 3
4643: PUSH
4644: CALL_OW 45
4648: ST_TO_ADDR
// result := Join ( result , veh ) ;
4649: LD_ADDR_VAR 0 1
4653: PUSH
4654: LD_VAR 0 1
4658: PPUSH
4659: LD_VAR 0 3
4663: PPUSH
4664: CALL 69233 0 2
4668: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
4669: LD_VAR 0 3
4673: PPUSH
4674: LD_INT 3
4676: PUSH
4677: LD_INT 5
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PUSH
4684: LD_VAR 0 9
4688: ARRAY
4689: PPUSH
4690: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
4694: LD_VAR 0 3
4698: PPUSH
4699: LD_VAR 0 6
4703: PPUSH
4704: LD_INT 0
4706: PPUSH
4707: CALL_OW 49
// if vc_control = control_manual then
4711: LD_OWVAR 38
4715: PUSH
4716: LD_INT 1
4718: EQUAL
4719: IFFALSE 4766
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4721: LD_INT 0
4723: PPUSH
4724: LD_INT 7
4726: PUSH
4727: LD_INT 8
4729: PUSH
4730: LD_INT 9
4732: PUSH
4733: LD_INT 10
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: PUSH
4742: LD_OWVAR 67
4746: ARRAY
4747: PPUSH
4748: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4752: CALL_OW 44
4756: PPUSH
4757: LD_VAR 0 3
4761: PPUSH
4762: CALL_OW 52
// end ; wait ( 0 0$0.3 ) ;
4766: LD_INT 10
4768: PPUSH
4769: CALL_OW 67
// if GetControl ( veh ) = control_remote and not IsControledBy ( veh ) then
4773: LD_VAR 0 3
4777: PPUSH
4778: CALL_OW 263
4782: PUSH
4783: LD_INT 2
4785: EQUAL
4786: PUSH
4787: LD_VAR 0 3
4791: PPUSH
4792: CALL_OW 312
4796: NOT
4797: AND
4798: IFFALSE 4816
// begin Connect ( veh ) ;
4800: LD_VAR 0 3
4804: PPUSH
4805: CALL 39839 0 1
// wait ( 0 0$0.3 ) ;
4809: LD_INT 10
4811: PPUSH
4812: CALL_OW 67
// end ; ComAgressiveMove ( veh , 100 , 55 ) ;
4816: LD_VAR 0 3
4820: PPUSH
4821: LD_INT 100
4823: PPUSH
4824: LD_INT 55
4826: PPUSH
4827: CALL_OW 114
// wait ( 0 0$0.5 ) ;
4831: LD_INT 18
4833: PPUSH
4834: CALL_OW 67
// end ;
4838: GO 4506
4840: POP
4841: POP
// if arabianAttacksCounter = 1 then
4842: LD_EXP 33
4846: PUSH
4847: LD_INT 1
4849: EQUAL
4850: IFFALSE 4856
// DestroySibDeposit ;
4852: CALL 3672 0 0
// if arabianAttacksCounter mod [ 4 , 3 , 3 , 2 ] [ Difficulty ] = 0 then
4856: LD_EXP 33
4860: PUSH
4861: LD_INT 4
4863: PUSH
4864: LD_INT 3
4866: PUSH
4867: LD_INT 3
4869: PUSH
4870: LD_INT 2
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: PUSH
4879: LD_OWVAR 67
4883: ARRAY
4884: MOD
4885: PUSH
4886: LD_INT 0
4888: EQUAL
4889: IFFALSE 5247
// begin tmp := rand ( 0 , 2 ) ;
4891: LD_ADDR_VAR 0 8
4895: PUSH
4896: LD_INT 0
4898: PPUSH
4899: LD_INT 2
4901: PPUSH
4902: CALL_OW 12
4906: ST_TO_ADDR
// if not tmp then
4907: LD_VAR 0 8
4911: NOT
4912: IFFALSE 5073
// begin for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] do
4914: LD_ADDR_VAR 0 2
4918: PUSH
4919: DOUBLE
4920: LD_INT 1
4922: DEC
4923: ST_TO_ADDR
4924: LD_INT 3
4926: PUSH
4927: LD_INT 4
4929: PUSH
4930: LD_INT 4
4932: PUSH
4933: LD_INT 5
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: PUSH
4942: LD_OWVAR 67
4946: ARRAY
4947: PUSH
4948: FOR_TO
4949: IFFALSE 5069
// begin uc_side := 8 ;
4951: LD_ADDR_OWVAR 20
4955: PUSH
4956: LD_INT 8
4958: ST_TO_ADDR
// uc_nation := 2 ;
4959: LD_ADDR_OWVAR 21
4963: PUSH
4964: LD_INT 2
4966: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4967: LD_INT 0
4969: PPUSH
4970: LD_INT 1
4972: PPUSH
4973: LD_INT 7
4975: PUSH
4976: LD_INT 8
4978: PUSH
4979: LD_INT 9
4981: PUSH
4982: LD_INT 10
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: PUSH
4991: LD_OWVAR 67
4995: ARRAY
4996: PPUSH
4997: CALL_OW 380
// un := CreateHuman ;
5001: LD_ADDR_VAR 0 5
5005: PUSH
5006: CALL_OW 44
5010: ST_TO_ADDR
// result := Join ( result , un ) ;
5011: LD_ADDR_VAR 0 1
5015: PUSH
5016: LD_VAR 0 1
5020: PPUSH
5021: LD_VAR 0 5
5025: PPUSH
5026: CALL 69233 0 2
5030: ST_TO_ADDR
// if Prob ( 60 ) then
5031: LD_INT 60
5033: PPUSH
5034: CALL_OW 13
5038: IFFALSE 5052
// SetClass ( un , class_mortar ) ;
5040: LD_VAR 0 5
5044: PPUSH
5045: LD_INT 8
5047: PPUSH
5048: CALL_OW 336
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5052: LD_VAR 0 5
5056: PPUSH
5057: LD_INT 16
5059: PPUSH
5060: LD_INT 0
5062: PPUSH
5063: CALL_OW 49
// end ;
5067: GO 4948
5069: POP
5070: POP
// end else
5071: GO 5237
// begin for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
5073: LD_ADDR_VAR 0 2
5077: PUSH
5078: DOUBLE
5079: LD_INT 1
5081: DEC
5082: ST_TO_ADDR
5083: LD_INT 2
5085: PUSH
5086: LD_INT 3
5088: PUSH
5089: LD_INT 3
5091: PUSH
5092: LD_INT 4
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: PUSH
5101: LD_OWVAR 67
5105: ARRAY
5106: PUSH
5107: FOR_TO
5108: IFFALSE 5235
// begin uc_side := 8 ;
5110: LD_ADDR_OWVAR 20
5114: PUSH
5115: LD_INT 8
5117: ST_TO_ADDR
// uc_nation := 0 ;
5118: LD_ADDR_OWVAR 21
5122: PUSH
5123: LD_INT 0
5125: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
5126: LD_ADDR_OWVAR 28
5130: PUSH
5131: LD_INT 17
5133: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
5134: LD_ADDR_OWVAR 31
5138: PUSH
5139: LD_INT 3
5141: PUSH
5142: LD_INT 0
5144: PUSH
5145: LD_INT 0
5147: PUSH
5148: LD_INT 0
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5157: LD_ADDR_OWVAR 29
5161: PUSH
5162: LD_INT 10
5164: PUSH
5165: LD_INT 10
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: ST_TO_ADDR
// hc_gallery :=  ;
5172: LD_ADDR_OWVAR 33
5176: PUSH
5177: LD_STRING 
5179: ST_TO_ADDR
// hc_name :=  ;
5180: LD_ADDR_OWVAR 26
5184: PUSH
5185: LD_STRING 
5187: ST_TO_ADDR
// un := CreateHuman ;
5188: LD_ADDR_VAR 0 5
5192: PUSH
5193: CALL_OW 44
5197: ST_TO_ADDR
// result := Join ( result , un ) ;
5198: LD_ADDR_VAR 0 1
5202: PUSH
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_VAR 0 5
5212: PPUSH
5213: CALL 69233 0 2
5217: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5218: LD_VAR 0 5
5222: PPUSH
5223: LD_INT 16
5225: PPUSH
5226: LD_INT 0
5228: PPUSH
5229: CALL_OW 49
// end ;
5233: GO 5107
5235: POP
5236: POP
// end ; if sibDeposits then
5237: LD_EXP 31
5241: IFFALSE 5247
// DestroySibDeposit ;
5243: CALL 3672 0 0
// end ; for i in result do
5247: LD_ADDR_VAR 0 2
5251: PUSH
5252: LD_VAR 0 1
5256: PUSH
5257: FOR_IN
5258: IFFALSE 5274
// SetTag ( i , 10 ) ;
5260: LD_VAR 0 2
5264: PPUSH
5265: LD_INT 10
5267: PPUSH
5268: CALL_OW 109
5272: GO 5257
5274: POP
5275: POP
// RaiseSailEvent ( eventArabianAttack ) ;
5276: LD_EXP 43
5280: PPUSH
5281: CALL_OW 427
// end ; end_of_file
5285: LD_VAR 0 1
5289: RET
// export function Action ; var tmp ; begin
5290: LD_INT 0
5292: PPUSH
5293: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
5294: LD_ADDR_VAR 0 2
5298: PUSH
5299: LD_INT 22
5301: PUSH
5302: LD_INT 1
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: LD_INT 21
5311: PUSH
5312: LD_INT 2
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PPUSH
5323: CALL_OW 69
5327: ST_TO_ADDR
// InGameOn ;
5328: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
5332: LD_VAR 0 2
5336: PPUSH
5337: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
5341: LD_INT 22
5343: PUSH
5344: LD_INT 1
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: PUSH
5351: LD_INT 21
5353: PUSH
5354: LD_INT 2
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PPUSH
5365: CALL_OW 69
5369: PPUSH
5370: LD_INT 69
5372: PPUSH
5373: LD_INT 94
5375: PPUSH
5376: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
5380: LD_EXP 1
5384: PPUSH
5385: LD_STRING D2-JMM-1
5387: PPUSH
5388: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5392: LD_VAR 0 2
5396: PPUSH
5397: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
5401: LD_EXP 2
5405: PPUSH
5406: LD_STRING D2-Huck-1
5408: PPUSH
5409: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5413: LD_VAR 0 2
5417: PPUSH
5418: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
5422: LD_EXP 1
5426: PPUSH
5427: LD_STRING D2-JMM-2
5429: PPUSH
5430: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5434: LD_VAR 0 2
5438: PPUSH
5439: CALL_OW 87
// InGameOff ;
5443: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5447: LD_STRING M1
5449: PPUSH
5450: CALL_OW 337
// SaveForQuickRestart ;
5454: CALL_OW 22
// wait ( 10 10$00 ) ;
5458: LD_INT 21000
5460: PPUSH
5461: CALL_OW 67
// DialogueOn ;
5465: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
5469: LD_EXP 15
5473: PPUSH
5474: LD_STRING D3-Pow-1
5476: PPUSH
5477: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
5481: LD_EXP 1
5485: PPUSH
5486: LD_STRING D3-JMM-1
5488: PPUSH
5489: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
5493: LD_EXP 15
5497: PPUSH
5498: LD_STRING D3-Pow-2
5500: PPUSH
5501: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
5505: LD_EXP 1
5509: PPUSH
5510: LD_STRING D3-JMM-2
5512: PPUSH
5513: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
5517: LD_EXP 15
5521: PPUSH
5522: LD_STRING D3-Pow-3
5524: PPUSH
5525: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
5529: LD_EXP 1
5533: PPUSH
5534: LD_STRING D3-JMM-3
5536: PPUSH
5537: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
5541: LD_EXP 15
5545: PPUSH
5546: LD_STRING D3-Pow-4
5548: PPUSH
5549: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
5553: LD_EXP 1
5557: PPUSH
5558: LD_STRING D3-JMM-4
5560: PPUSH
5561: CALL_OW 88
// DialogueOff ;
5565: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5569: LD_STRING M2
5571: PPUSH
5572: CALL_OW 337
// wait ( 2 2$30 ) ;
5576: LD_INT 5250
5578: PPUSH
5579: CALL_OW 67
// PrepareBurlak ;
5583: CALL 2269 0 0
// BurlakArmy ;
5587: CALL 2451 0 0
// end ;
5591: LD_VAR 0 1
5595: RET
// every 0 0$1 trigger See ( 1 , Masha ) do
5596: LD_INT 1
5598: PPUSH
5599: LD_EXP 18
5603: PPUSH
5604: CALL_OW 292
5608: IFFALSE 5767
5610: GO 5612
5612: DISABLE
// begin DialogueOn ;
5613: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
5617: LD_EXP 18
5621: PPUSH
5622: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
5626: LD_INT 22
5628: PUSH
5629: LD_INT 1
5631: PUSH
5632: EMPTY
5633: LIST
5634: LIST
5635: PUSH
5636: LD_INT 26
5638: PUSH
5639: LD_INT 1
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: LD_INT 2
5648: PUSH
5649: LD_INT 25
5651: PUSH
5652: LD_INT 1
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: PUSH
5659: LD_INT 25
5661: PUSH
5662: LD_INT 2
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: PUSH
5669: LD_INT 25
5671: PUSH
5672: LD_INT 3
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PUSH
5679: LD_INT 25
5681: PUSH
5682: LD_INT 4
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PUSH
5689: LD_INT 25
5691: PUSH
5692: LD_INT 5
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: LIST
5711: PPUSH
5712: CALL_OW 69
5716: PPUSH
5717: LD_STRING D5-Sol1-1
5719: PPUSH
5720: LD_STRING D5-FSol1-1
5722: PPUSH
5723: CALL 8225 0 3
// Say ( JMM , D5-JMM-1 ) ;
5727: LD_EXP 1
5731: PPUSH
5732: LD_STRING D5-JMM-1
5734: PPUSH
5735: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
5739: LD_EXP 17
5743: PPUSH
5744: LD_STRING DAmer-Bur-1
5746: PPUSH
5747: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
5751: LD_EXP 1
5755: PPUSH
5756: LD_STRING DAmer-JMM-1
5758: PPUSH
5759: CALL_OW 88
// DialogueOff ;
5763: CALL_OW 7
// end ;
5767: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
5768: LD_INT 4
5770: PPUSH
5771: LD_INT 22
5773: PUSH
5774: LD_INT 7
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PPUSH
5781: CALL_OW 70
5785: IFFALSE 6184
5787: GO 5789
5789: DISABLE
5790: LD_INT 0
5792: PPUSH
// begin enable ;
5793: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
5794: LD_ADDR_VAR 0 1
5798: PUSH
5799: LD_INT 4
5801: PPUSH
5802: LD_INT 22
5804: PUSH
5805: LD_INT 7
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PPUSH
5812: CALL_OW 70
5816: PUSH
5817: FOR_IN
5818: IFFALSE 6182
// begin if i = Burlak or i = Masha then
5820: LD_VAR 0 1
5824: PUSH
5825: LD_EXP 17
5829: EQUAL
5830: PUSH
5831: LD_VAR 0 1
5835: PUSH
5836: LD_EXP 18
5840: EQUAL
5841: OR
5842: IFFALSE 5989
// begin RemoveUnit ( i ) ;
5844: LD_VAR 0 1
5848: PPUSH
5849: CALL_OW 64
// DialogueOn ;
5853: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
5857: LD_EXP 1
5861: PPUSH
5862: LD_STRING D5a-JMM-1
5864: PPUSH
5865: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
5869: LD_INT 22
5871: PUSH
5872: LD_INT 1
5874: PUSH
5875: EMPTY
5876: LIST
5877: LIST
5878: PUSH
5879: LD_INT 26
5881: PUSH
5882: LD_INT 1
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 2
5891: PUSH
5892: LD_INT 25
5894: PUSH
5895: LD_INT 1
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 25
5904: PUSH
5905: LD_INT 2
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 25
5914: PUSH
5915: LD_INT 3
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: LD_INT 25
5924: PUSH
5925: LD_INT 4
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PUSH
5932: LD_INT 25
5934: PUSH
5935: LD_INT 5
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: LIST
5954: PPUSH
5955: CALL_OW 69
5959: PPUSH
5960: LD_STRING D5a-Sol1-1
5962: PPUSH
5963: LD_STRING D5-FSol1-1
5965: PPUSH
5966: CALL 8225 0 3
// DialogueOff ;
5970: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
5974: LD_STRING M2b
5976: PPUSH
5977: CALL_OW 337
// spawnBurlak = 0 ;
5981: LD_ADDR_EXP 27
5985: PUSH
5986: LD_INT 0
5988: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
5989: LD_VAR 0 1
5993: PPUSH
5994: CALL_OW 247
5998: PUSH
5999: LD_INT 2
6001: EQUAL
6002: PUSH
6003: LD_VAR 0 1
6007: PPUSH
6008: CALL_OW 263
6012: PUSH
6013: LD_INT 1
6015: EQUAL
6016: AND
6017: IFFALSE 6145
// begin case IsDrivenBy ( i ) of Gnyevko :
6019: LD_VAR 0 1
6023: PPUSH
6024: CALL_OW 311
6028: PUSH
6029: LD_EXP 19
6033: DOUBLE
6034: EQUAL
6035: IFTRUE 6039
6037: GO 6052
6039: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
6040: LD_INT 1
6042: PPUSH
6043: LD_STRING 13_Gnyevko_1
6045: PPUSH
6046: CALL_OW 39
6050: GO 6145
6052: LD_EXP 20
6056: DOUBLE
6057: EQUAL
6058: IFTRUE 6062
6060: GO 6075
6062: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
6063: LD_INT 1
6065: PPUSH
6066: LD_STRING 13_Titov_1
6068: PPUSH
6069: CALL_OW 39
6073: GO 6145
6075: LD_EXP 21
6079: DOUBLE
6080: EQUAL
6081: IFTRUE 6085
6083: GO 6098
6085: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
6086: LD_INT 1
6088: PPUSH
6089: LD_STRING 13_Xavier_1
6091: PPUSH
6092: CALL_OW 39
6096: GO 6145
6098: LD_EXP 22
6102: DOUBLE
6103: EQUAL
6104: IFTRUE 6108
6106: GO 6121
6108: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
6109: LD_INT 1
6111: PPUSH
6112: LD_STRING 13_Belkov_1
6114: PPUSH
6115: CALL_OW 39
6119: GO 6145
6121: LD_EXP 23
6125: DOUBLE
6126: EQUAL
6127: IFTRUE 6131
6129: GO 6144
6131: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
6132: LD_INT 1
6134: PPUSH
6135: LD_STRING 13_Lipshchin_1
6137: PPUSH
6138: CALL_OW 39
6142: GO 6145
6144: POP
// end ; if GetWeapon ( i ) = ru_time_lapser then
6145: LD_VAR 0 1
6149: PPUSH
6150: CALL_OW 264
6154: PUSH
6155: LD_INT 49
6157: EQUAL
6158: IFFALSE 6171
// DestroyUnit ( i ) else
6160: LD_VAR 0 1
6164: PPUSH
6165: CALL_OW 65
6169: GO 6180
// RemoveUnit ( i ) ;
6171: LD_VAR 0 1
6175: PPUSH
6176: CALL_OW 64
// end ;
6180: GO 5817
6182: POP
6183: POP
// end ;
6184: PPOPN 1
6186: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
6187: LD_EXP 17
6191: PPUSH
6192: CALL_OW 302
6196: PUSH
6197: LD_EXP 18
6201: PPUSH
6202: CALL_OW 256
6206: PUSH
6207: LD_INT 500
6209: LESS
6210: AND
6211: PUSH
6212: LD_EXP 18
6216: PPUSH
6217: CALL_OW 255
6221: PUSH
6222: LD_INT 7
6224: EQUAL
6225: AND
6226: IFFALSE 6246
6228: GO 6230
6230: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
6231: LD_EXP 17
6235: PPUSH
6236: LD_INT 107
6238: PPUSH
6239: LD_INT 118
6241: PPUSH
6242: CALL_OW 111
6246: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
6247: LD_EXP 17
6251: PPUSH
6252: CALL_OW 301
6256: PUSH
6257: LD_EXP 27
6261: PUSH
6262: LD_INT 1
6264: EQUAL
6265: AND
6266: IFFALSE 6399
6268: GO 6270
6270: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
6271: LD_EXP 1
6275: PPUSH
6276: LD_STRING D5b-JMM-1
6278: PPUSH
6279: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
6283: LD_INT 22
6285: PUSH
6286: LD_INT 1
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 26
6295: PUSH
6296: LD_INT 1
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PUSH
6303: LD_INT 2
6305: PUSH
6306: LD_INT 25
6308: PUSH
6309: LD_INT 1
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: PUSH
6316: LD_INT 25
6318: PUSH
6319: LD_INT 2
6321: PUSH
6322: EMPTY
6323: LIST
6324: LIST
6325: PUSH
6326: LD_INT 25
6328: PUSH
6329: LD_INT 3
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: PUSH
6336: LD_INT 25
6338: PUSH
6339: LD_INT 4
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: PUSH
6346: LD_INT 25
6348: PUSH
6349: LD_INT 5
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: LIST
6368: PPUSH
6369: CALL_OW 69
6373: PPUSH
6374: LD_STRING D5b-Sol1-1
6376: PPUSH
6377: LD_STRING 
6379: PPUSH
6380: CALL 8225 0 3
// ChangeMissionObjectives ( M2a ) ;
6384: LD_STRING M2a
6386: PPUSH
6387: CALL_OW 337
// burlakStatus := 1 ;
6391: LD_ADDR_EXP 28
6395: PUSH
6396: LD_INT 1
6398: ST_TO_ADDR
// end ;
6399: END
// every 0 0$1 trigger IsDead ( Stevens ) do
6400: LD_EXP 2
6404: PPUSH
6405: CALL_OW 301
6409: IFFALSE 6546
6411: GO 6413
6413: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
6414: LD_EXP 1
6418: PPUSH
6419: LD_STRING D6-JMM-1
6421: PPUSH
6422: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
6426: LD_INT 22
6428: PUSH
6429: LD_INT 1
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: PUSH
6436: LD_INT 26
6438: PUSH
6439: LD_INT 1
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PUSH
6446: LD_INT 2
6448: PUSH
6449: LD_INT 25
6451: PUSH
6452: LD_INT 1
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PUSH
6459: LD_INT 25
6461: PUSH
6462: LD_INT 2
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: PUSH
6469: LD_INT 25
6471: PUSH
6472: LD_INT 3
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PUSH
6479: LD_INT 25
6481: PUSH
6482: LD_INT 4
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: PUSH
6489: LD_INT 25
6491: PUSH
6492: LD_INT 5
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: PPUSH
6512: CALL_OW 69
6516: PPUSH
6517: LD_STRING D6-Sol1-1
6519: PPUSH
6520: LD_STRING 
6522: PPUSH
6523: CALL 8225 0 3
// Say ( JMM , D6-JMM-2 ) ;
6527: LD_EXP 1
6531: PPUSH
6532: LD_STRING D6-JMM-2
6534: PPUSH
6535: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
6539: LD_STRING M1a
6541: PPUSH
6542: CALL_OW 337
// end ;
6546: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
6547: LD_INT 25
6549: PPUSH
6550: LD_INT 1
6552: PPUSH
6553: CALL_OW 321
6557: PUSH
6558: LD_INT 2
6560: EQUAL
6561: IFFALSE 6578
6563: GO 6565
6565: DISABLE
// Say ( Stevens , D6-Huck-2 ) ;
6566: LD_EXP 2
6570: PPUSH
6571: LD_STRING D6-Huck-2
6573: PPUSH
6574: CALL_OW 88
6578: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_warehouse ] , [ f_not , [ f_constructed ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] , [ f_not , [ f_constructed ] ] ] ) do
6579: LD_INT 22
6581: PUSH
6582: LD_INT 1
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 2
6591: PUSH
6592: LD_INT 34
6594: PUSH
6595: LD_INT 8
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: LD_INT 35
6604: PUSH
6605: LD_INT 8
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PPUSH
6621: CALL_OW 69
6625: PUSH
6626: LD_INT 5
6628: PPUSH
6629: LD_INT 22
6631: PUSH
6632: LD_INT 1
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: LD_INT 21
6641: PUSH
6642: LD_INT 3
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: LD_INT 30
6651: PUSH
6652: LD_INT 1
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: LD_INT 3
6661: PUSH
6662: LD_INT 57
6664: PUSH
6665: EMPTY
6666: LIST
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: PPUSH
6678: CALL_OW 70
6682: AND
6683: PUSH
6684: LD_INT 5
6686: PPUSH
6687: LD_INT 22
6689: PUSH
6690: LD_INT 1
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 21
6699: PUSH
6700: LD_INT 3
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 30
6709: PUSH
6710: LD_INT 5
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 3
6719: PUSH
6720: LD_INT 57
6722: PUSH
6723: EMPTY
6724: LIST
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: PPUSH
6736: CALL_OW 70
6740: AND
6741: IFFALSE 6783
6743: GO 6745
6745: DISABLE
// begin DialogueOn ;
6746: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6750: LD_EXP 1
6754: PPUSH
6755: LD_STRING D7-JMM-1
6757: PPUSH
6758: CALL_OW 88
// DialogueOff ;
6762: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
6766: LD_STRING M4
6768: PPUSH
6769: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
6773: LD_INT 5
6775: PPUSH
6776: LD_INT 0
6778: PPUSH
6779: CALL_OW 424
// end ;
6783: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) and eventVar3 = 1 and radationResearched = 0 do
6784: LD_INT 6
6786: PPUSH
6787: LD_INT 22
6789: PUSH
6790: LD_INT 1
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: LD_INT 25
6799: PUSH
6800: LD_INT 4
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PPUSH
6811: CALL_OW 70
6815: PUSH
6816: LD_EXP 37
6820: PUSH
6821: LD_INT 1
6823: EQUAL
6824: AND
6825: PUSH
6826: LD_EXP 29
6830: PUSH
6831: LD_INT 0
6833: EQUAL
6834: AND
6835: IFFALSE 6900
6837: GO 6839
6839: DISABLE
// begin enable ;
6840: ENABLE
// AmSciSib := FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
6841: LD_ADDR_EXP 26
6845: PUSH
6846: LD_INT 6
6848: PPUSH
6849: LD_INT 22
6851: PUSH
6852: LD_INT 1
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 25
6861: PUSH
6862: LD_INT 4
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PPUSH
6873: CALL_OW 70
6877: PUSH
6878: LD_INT 1
6880: ARRAY
6881: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
6882: LD_INT 6
6884: PPUSH
6885: LD_INT 0
6887: PPUSH
6888: CALL_OW 424
// radationResearched := 1 ;
6892: LD_ADDR_EXP 29
6896: PUSH
6897: LD_INT 1
6899: ST_TO_ADDR
// end ;
6900: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
6901: LD_EXP 26
6905: PPUSH
6906: CALL_OW 301
6910: PUSH
6911: LD_EXP 29
6915: PUSH
6916: LD_INT 1
6918: EQUAL
6919: AND
6920: IFFALSE 6956
6922: GO 6924
6924: DISABLE
// begin enable ;
6925: ENABLE
// radationResearched = 0 ;
6926: LD_ADDR_EXP 29
6930: PUSH
6931: LD_INT 0
6933: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
6934: LD_INT 6
6936: PPUSH
6937: LD_INT 1
6939: PPUSH
6940: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
6944: LD_EXP 1
6948: PPUSH
6949: LD_STRING D9a-JMM-1
6951: PPUSH
6952: CALL_OW 88
// end ; end_of_file
6956: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = us_siberium_rocket and eventVar1 = 0 then
6957: LD_VAR 0 5
6961: PUSH
6962: LD_INT 8
6964: EQUAL
6965: PUSH
6966: LD_EXP 35
6970: PUSH
6971: LD_INT 0
6973: EQUAL
6974: AND
6975: IFFALSE 7028
// begin eventVar1 := 1 ;
6977: LD_ADDR_EXP 35
6981: PUSH
6982: LD_INT 1
6984: ST_TO_ADDR
// DialogueOn ;
6985: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
6989: LD_EXP 1
6993: PPUSH
6994: LD_STRING D6a-JMM-1
6996: PPUSH
6997: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
7001: LD_EXP 15
7005: PPUSH
7006: LD_STRING D6a-Pow-1
7008: PPUSH
7009: CALL_OW 94
// DialogueOff ;
7013: CALL_OW 7
// wait ( 3 3$0 ) ;
7017: LD_INT 6300
7019: PPUSH
7020: CALL_OW 67
// PowellSupport ;
7024: CALL 1845 0 0
// end ; end ;
7028: PPOPN 5
7030: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7031: LD_VAR 0 1
7035: PPUSH
7036: CALL 26803 0 1
// if un = JMM then
7040: LD_VAR 0 1
7044: PUSH
7045: LD_EXP 1
7049: EQUAL
7050: IFFALSE 7059
// YouLost ( JMM ) ;
7052: LD_STRING JMM
7054: PPUSH
7055: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
7059: LD_VAR 0 1
7063: PPUSH
7064: CALL_OW 264
7068: PUSH
7069: LD_INT 31
7071: EQUAL
7072: IFFALSE 7088
// achivCounter := achivCounter + 1 ;
7074: LD_ADDR_EXP 41
7078: PUSH
7079: LD_EXP 41
7083: PUSH
7084: LD_INT 1
7086: PLUS
7087: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
7088: LD_VAR 0 1
7092: PPUSH
7093: CALL_OW 255
7097: PUSH
7098: LD_INT 1
7100: NONEQUAL
7101: PUSH
7102: LD_VAR 0 1
7106: PPUSH
7107: CALL_OW 247
7111: PUSH
7112: LD_INT 2
7114: EQUAL
7115: AND
7116: IFFALSE 7132
// destroyCounter := destroyCounter + 1 ;
7118: LD_ADDR_EXP 42
7122: PUSH
7123: LD_EXP 42
7127: PUSH
7128: LD_INT 1
7130: PLUS
7131: ST_TO_ADDR
// end ;
7132: PPOPN 1
7134: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
7135: LD_VAR 0 2
7139: PUSH
7140: LD_EXP 18
7144: EQUAL
7145: IFFALSE 7154
// SetAchievement ( ACH_MASHA ) ;
7147: LD_STRING ACH_MASHA
7149: PPUSH
7150: CALL_OW 543
// end ;
7154: PPOPN 4
7156: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
7157: LD_VAR 0 1
7161: PPUSH
7162: LD_VAR 0 2
7166: PPUSH
7167: CALL 26923 0 2
// if GetWeapon ( vehicle ) = us_siberium_rocket and eventVar2 = 0 then
7171: LD_VAR 0 1
7175: PPUSH
7176: CALL_OW 264
7180: PUSH
7181: LD_INT 8
7183: EQUAL
7184: PUSH
7185: LD_EXP 36
7189: PUSH
7190: LD_INT 0
7192: EQUAL
7193: AND
7194: IFFALSE 7263
// begin eventVar2 := 1 ;
7196: LD_ADDR_EXP 36
7200: PUSH
7201: LD_INT 1
7203: ST_TO_ADDR
// DialogueOn ;
7204: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
7208: LD_EXP 1
7212: PPUSH
7213: LD_STRING D6b-JMM-1
7215: PPUSH
7216: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
7220: LD_EXP 15
7224: PPUSH
7225: LD_STRING D6b-Pow-1
7227: PPUSH
7228: CALL_OW 94
// DialogueOff ;
7232: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
7236: LD_INT 5
7238: PPUSH
7239: LD_INT 1
7241: PPUSH
7242: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
7246: LD_INT 7
7248: PPUSH
7249: LD_INT 1
7251: PPUSH
7252: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
7256: LD_STRING M3
7258: PPUSH
7259: CALL_OW 337
// end ; end ;
7263: PPOPN 2
7265: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
7266: LD_VAR 0 2
7270: PPUSH
7271: LD_VAR 0 3
7275: PPUSH
7276: LD_INT 5
7278: PPUSH
7279: CALL_OW 309
7283: PUSH
7284: LD_EXP 37
7288: PUSH
7289: LD_INT 0
7291: EQUAL
7292: AND
7293: IFFALSE 7518
// begin eventVar3 := 1 ;
7295: LD_ADDR_EXP 37
7299: PUSH
7300: LD_INT 1
7302: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7303: LD_INT 175
7305: PPUSH
7306: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_radar ] ] ) then
7310: LD_INT 7
7312: PPUSH
7313: LD_INT 22
7315: PUSH
7316: LD_INT 1
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 21
7325: PUSH
7326: LD_INT 2
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 34
7335: PUSH
7336: LD_INT 11
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: LIST
7347: PPUSH
7348: CALL_OW 70
7352: IFFALSE 7371
// begin radarOnSpot := 1 ;
7354: LD_ADDR_EXP 30
7358: PUSH
7359: LD_INT 1
7361: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
7362: LD_STRING M3a
7364: PPUSH
7365: CALL_OW 337
// end else
7369: GO 7378
// ChangeMissionObjectives ( M3b ) ;
7371: LD_STRING M3b
7373: PPUSH
7374: CALL_OW 337
// DialogueOn ;
7378: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
7382: LD_EXP 2
7386: PPUSH
7387: LD_STRING D8-Huck-1
7389: PPUSH
7390: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
7394: LD_EXP 1
7398: PPUSH
7399: LD_STRING D8-JMM-1
7401: PPUSH
7402: CALL_OW 88
// if IsOk ( Stevens ) then
7406: LD_EXP 2
7410: PPUSH
7411: CALL_OW 302
7415: IFFALSE 7477
// begin Say ( Stevens , D8-Huck-2 ) ;
7417: LD_EXP 2
7421: PPUSH
7422: LD_STRING D8-Huck-2
7424: PPUSH
7425: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
7429: LD_EXP 1
7433: PPUSH
7434: LD_STRING D8-JMM-2
7436: PPUSH
7437: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
7441: LD_EXP 2
7445: PPUSH
7446: LD_STRING D8-Huck-3
7448: PPUSH
7449: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
7453: LD_EXP 1
7457: PPUSH
7458: LD_STRING D8-JMM-3
7460: PPUSH
7461: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
7465: LD_EXP 2
7469: PPUSH
7470: LD_STRING D8-Huck-4
7472: PPUSH
7473: CALL_OW 88
// end ; DialogueOff ;
7477: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
7481: LD_INT 5
7483: PPUSH
7484: LD_INT 0
7486: PPUSH
7487: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
7491: LD_INT 7
7493: PPUSH
7494: LD_INT 0
7496: PPUSH
7497: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7501: LD_INT 6
7503: PPUSH
7504: LD_INT 1
7506: PPUSH
7507: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
7511: LD_STRING M5
7513: PPUSH
7514: CALL_OW 337
// end ; end ;
7518: PPOPN 3
7520: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 and ( GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium ) then
7521: LD_EXP 26
7525: PPUSH
7526: CALL_OW 302
7530: PUSH
7531: LD_VAR 0 2
7535: PUSH
7536: LD_EXP 26
7540: EQUAL
7541: AND
7542: PUSH
7543: LD_EXP 38
7547: PUSH
7548: LD_INT 0
7550: EQUAL
7551: AND
7552: PUSH
7553: LD_EXP 37
7557: PUSH
7558: LD_INT 1
7560: EQUAL
7561: AND
7562: PUSH
7563: LD_VAR 0 1
7567: PPUSH
7568: LD_INT 1
7570: PPUSH
7571: CALL_OW 268
7575: PUSH
7576: LD_INT 11
7578: EQUAL
7579: PUSH
7580: LD_VAR 0 1
7584: PPUSH
7585: LD_INT 2
7587: PPUSH
7588: CALL_OW 268
7592: PUSH
7593: LD_INT 11
7595: EQUAL
7596: OR
7597: AND
7598: IFFALSE 7608
// eventVar4 := 1 ;
7600: LD_ADDR_EXP 38
7604: PUSH
7605: LD_INT 1
7607: ST_TO_ADDR
// end ;
7608: PPOPN 2
7610: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
7611: LD_INT 0
7613: PPUSH
7614: PPUSH
// begin if GetNation ( unit ) = nation_arabian then
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 248
7624: PUSH
7625: LD_INT 2
7627: EQUAL
7628: IFFALSE 7874
// begin sibDestroyedCounter := sibDestroyedCounter + 1 ;
7630: LD_ADDR_EXP 32
7634: PUSH
7635: LD_EXP 32
7639: PUSH
7640: LD_INT 1
7642: PLUS
7643: ST_TO_ADDR
// for i := sibDeposits downto 1 do
7644: LD_ADDR_VAR 0 4
7648: PUSH
7649: DOUBLE
7650: LD_EXP 31
7654: INC
7655: ST_TO_ADDR
7656: LD_INT 1
7658: PUSH
7659: FOR_DOWNTO
7660: IFFALSE 7730
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
7662: LD_EXP 31
7666: PUSH
7667: LD_VAR 0 4
7671: ARRAY
7672: PUSH
7673: LD_INT 1
7675: ARRAY
7676: PUSH
7677: LD_VAR 0 2
7681: EQUAL
7682: PUSH
7683: LD_EXP 31
7687: PUSH
7688: LD_VAR 0 4
7692: ARRAY
7693: PUSH
7694: LD_INT 2
7696: ARRAY
7697: PUSH
7698: LD_VAR 0 3
7702: EQUAL
7703: AND
7704: IFFALSE 7728
// begin sibDeposits := Delete ( sibDeposits , i ) ;
7706: LD_ADDR_EXP 31
7710: PUSH
7711: LD_EXP 31
7715: PPUSH
7716: LD_VAR 0 4
7720: PPUSH
7721: CALL_OW 3
7725: ST_TO_ADDR
// break ;
7726: GO 7730
// end ;
7728: GO 7659
7730: POP
7731: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
7732: LD_EXP 39
7736: PUSH
7737: LD_INT 0
7739: EQUAL
7740: PUSH
7741: LD_VAR 0 2
7745: PPUSH
7746: LD_VAR 0 3
7750: PPUSH
7751: CALL_OW 428
7755: PUSH
7756: LD_INT 22
7758: PUSH
7759: LD_INT 1
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PPUSH
7766: CALL_OW 69
7770: IN
7771: AND
7772: IFFALSE 7874
// begin eventVar5 := 1 ;
7774: LD_ADDR_EXP 39
7778: PUSH
7779: LD_INT 1
7781: ST_TO_ADDR
// DialogueOn ;
7782: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
7786: LD_EXP 2
7790: PPUSH
7791: LD_STRING D4-Sci1-1
7793: PPUSH
7794: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7798: LD_EXP 1
7802: PPUSH
7803: LD_STRING D4-JMM-1
7805: PPUSH
7806: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
7810: LD_EXP 2
7814: PPUSH
7815: LD_STRING D4-Sci1-2
7817: PPUSH
7818: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7822: LD_EXP 1
7826: PPUSH
7827: LD_STRING D4-JMM-2
7829: PPUSH
7830: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
7834: LD_EXP 2
7838: PPUSH
7839: LD_STRING D4-Sci1-3
7841: PPUSH
7842: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
7846: LD_EXP 1
7850: PPUSH
7851: LD_STRING D4-JMM-3
7853: PPUSH
7854: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
7858: LD_EXP 1
7862: PPUSH
7863: LD_STRING D4-JMM-3a
7865: PPUSH
7866: CALL_OW 88
// DialogueOff ;
7870: CALL_OW 7
// end ; end ; end ;
7874: PPOPN 5
7876: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = b_depot and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 1 then
7877: LD_VAR 0 1
7881: PPUSH
7882: CALL_OW 255
7886: PUSH
7887: LD_INT 1
7889: EQUAL
7890: PUSH
7891: LD_VAR 0 1
7895: PPUSH
7896: CALL_OW 266
7900: PUSH
7901: LD_INT 0
7903: EQUAL
7904: AND
7905: PUSH
7906: LD_INT 22
7908: PUSH
7909: LD_INT 1
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: PUSH
7916: LD_INT 21
7918: PUSH
7919: LD_INT 3
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: PUSH
7926: LD_INT 2
7928: PUSH
7929: LD_INT 30
7931: PUSH
7932: LD_INT 0
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: PUSH
7939: LD_INT 30
7941: PUSH
7942: LD_INT 1
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: LIST
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: LIST
7958: PPUSH
7959: CALL_OW 69
7963: PUSH
7964: LD_INT 1
7966: EQUAL
7967: AND
7968: IFFALSE 7982
// SetBName ( building , omega ) ;
7970: LD_VAR 0 1
7974: PPUSH
7975: LD_STRING omega
7977: PPUSH
7978: CALL_OW 500
// end ;
7982: PPOPN 2
7984: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7985: LD_VAR 0 1
7989: PPUSH
7990: CALL 26907 0 1
// end ;
7994: PPOPN 1
7996: END
// on SailEvent ( event ) do begin if event = eventArabianAttack then
7997: LD_VAR 0 1
8001: PUSH
8002: LD_EXP 43
8006: EQUAL
8007: IFFALSE 8013
// ArabianAttack ;
8009: CALL 10078 0 0
// if event = eventRussianAttack then
8013: LD_VAR 0 1
8017: PUSH
8018: LD_EXP 44
8022: EQUAL
8023: IFFALSE 8029
// RussianAttack ;
8025: CALL 10443 0 0
// end ;
8029: PPOPN 1
8031: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = eventContaminate then
8032: LD_VAR 0 1
8036: PUSH
8037: LD_EXP 45
8041: EQUAL
8042: IFFALSE 8136
// begin if IsOk ( p1 ) and ValidHex ( p2 , p3 ) then
8044: LD_VAR 0 2
8048: PPUSH
8049: CALL_OW 302
8053: PUSH
8054: LD_VAR 0 3
8058: PPUSH
8059: LD_VAR 0 4
8063: PPUSH
8064: CALL_OW 488
8068: AND
8069: IFFALSE 8136
// begin repeat wait ( 0 0$1 ) ;
8071: LD_INT 35
8073: PPUSH
8074: CALL_OW 67
// if not HasTask ( p1 ) then
8078: LD_VAR 0 2
8082: PPUSH
8083: CALL_OW 314
8087: NOT
8088: IFFALSE 8124
// begin ComContaminate ( p1 , p2 , p3 ) ;
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_VAR 0 3
8099: PPUSH
8100: LD_VAR 0 4
8104: PPUSH
8105: CALL_OW 158
// AddComMoveXY ( p1 , 42 , 3 ) ;
8109: LD_VAR 0 2
8113: PPUSH
8114: LD_INT 42
8116: PPUSH
8117: LD_INT 3
8119: PPUSH
8120: CALL_OW 171
// end ; until not IsOk ( p1 ) ;
8124: LD_VAR 0 2
8128: PPUSH
8129: CALL_OW 302
8133: NOT
8134: IFFALSE 8071
// end ; end ; end ;
8136: PPOPN 7
8138: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 8 ] then
8139: LD_VAR 0 1
8143: PPUSH
8144: CALL_OW 255
8148: PUSH
8149: LD_INT 3
8151: PUSH
8152: LD_INT 8
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: IN
8159: IFFALSE 8222
// begin ComMoveXY ( driver , 41 , 2 ) ;
8161: LD_VAR 0 1
8165: PPUSH
8166: LD_INT 41
8168: PPUSH
8169: LD_INT 2
8171: PPUSH
8172: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8176: LD_INT 35
8178: PPUSH
8179: CALL_OW 67
// if IsDead ( driver ) then
8183: LD_VAR 0 1
8187: PPUSH
8188: CALL_OW 301
8192: IFFALSE 8196
// exit ;
8194: GO 8222
// until IsAt ( driver , 41 , 2 ) ;
8196: LD_VAR 0 1
8200: PPUSH
8201: LD_INT 41
8203: PPUSH
8204: LD_INT 2
8206: PPUSH
8207: CALL_OW 307
8211: IFFALSE 8176
// RemoveUnit ( driver ) ;
8213: LD_VAR 0 1
8217: PPUSH
8218: CALL_OW 64
// end ; end ; end_of_file
8222: PPOPN 4
8224: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
8225: LD_INT 0
8227: PPUSH
8228: PPUSH
8229: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
8230: LD_ADDR_VAR 0 1
8234: PUSH
8235: LD_VAR 0 1
8239: PUSH
8240: LD_EXP 1
8244: PUSH
8245: LD_EXP 2
8249: PUSH
8250: LD_EXP 3
8254: PUSH
8255: LD_EXP 4
8259: PUSH
8260: LD_EXP 5
8264: PUSH
8265: LD_EXP 6
8269: PUSH
8270: LD_EXP 7
8274: PUSH
8275: LD_EXP 8
8279: PUSH
8280: LD_EXP 9
8284: PUSH
8285: LD_EXP 10
8289: PUSH
8290: LD_EXP 11
8294: PUSH
8295: LD_EXP 12
8299: PUSH
8300: LD_EXP 13
8304: PUSH
8305: LD_EXP 14
8309: PUSH
8310: LD_EXP 15
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: DIFF
8332: ST_TO_ADDR
// if not characters then
8333: LD_VAR 0 1
8337: NOT
8338: IFFALSE 8342
// exit ;
8340: GO 8421
// speaker := characters [ rand ( 1 , characters ) ] ;
8342: LD_ADDR_VAR 0 6
8346: PUSH
8347: LD_VAR 0 1
8351: PUSH
8352: LD_INT 1
8354: PPUSH
8355: LD_VAR 0 1
8359: PPUSH
8360: CALL_OW 12
8364: ARRAY
8365: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
8366: LD_VAR 0 6
8370: PPUSH
8371: CALL_OW 258
8375: PUSH
8376: LD_INT 1
8378: EQUAL
8379: IFFALSE 8397
// Say ( speaker , dialogMID ) else
8381: LD_VAR 0 6
8385: PPUSH
8386: LD_VAR 0 2
8390: PPUSH
8391: CALL_OW 88
8395: GO 8411
// Say ( speaker , dialogFID ) ;
8397: LD_VAR 0 6
8401: PPUSH
8402: LD_VAR 0 3
8406: PPUSH
8407: CALL_OW 88
// result := speaker ;
8411: LD_ADDR_VAR 0 4
8415: PUSH
8416: LD_VAR 0 6
8420: ST_TO_ADDR
// end ;
8421: LD_VAR 0 4
8425: RET
// export function PrepareDifficulty ; begin
8426: LD_INT 0
8428: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
8429: LD_INT 5
8431: PPUSH
8432: LD_INT 8
8434: PPUSH
8435: LD_INT 2
8437: PPUSH
8438: CALL_OW 322
// if Difficulty = 1 then
8442: LD_OWVAR 67
8446: PUSH
8447: LD_INT 1
8449: EQUAL
8450: IFFALSE 8569
// begin SetTech ( 66 , 8 , state_researched ) ;
8452: LD_INT 66
8454: PPUSH
8455: LD_INT 8
8457: PPUSH
8458: LD_INT 2
8460: PPUSH
8461: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
8465: LD_INT 67
8467: PPUSH
8468: LD_INT 8
8470: PPUSH
8471: LD_INT 0
8473: PPUSH
8474: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8478: LD_INT 68
8480: PPUSH
8481: LD_INT 8
8483: PPUSH
8484: LD_INT 0
8486: PPUSH
8487: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8491: LD_INT 51
8493: PPUSH
8494: LD_INT 8
8496: PPUSH
8497: LD_INT 2
8499: PPUSH
8500: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
8504: LD_INT 52
8506: PPUSH
8507: LD_INT 8
8509: PPUSH
8510: LD_INT 0
8512: PPUSH
8513: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
8517: LD_INT 53
8519: PPUSH
8520: LD_INT 8
8522: PPUSH
8523: LD_INT 0
8525: PPUSH
8526: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8530: LD_INT 60
8532: PPUSH
8533: LD_INT 8
8535: PPUSH
8536: LD_INT 2
8538: PPUSH
8539: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
8543: LD_INT 61
8545: PPUSH
8546: LD_INT 8
8548: PPUSH
8549: LD_INT 0
8551: PPUSH
8552: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8556: LD_INT 62
8558: PPUSH
8559: LD_INT 8
8561: PPUSH
8562: LD_INT 0
8564: PPUSH
8565: CALL_OW 322
// end ; if Difficulty = 2 then
8569: LD_OWVAR 67
8573: PUSH
8574: LD_INT 2
8576: EQUAL
8577: IFFALSE 8696
// begin SetTech ( 66 , 8 , state_researched ) ;
8579: LD_INT 66
8581: PPUSH
8582: LD_INT 8
8584: PPUSH
8585: LD_INT 2
8587: PPUSH
8588: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8592: LD_INT 67
8594: PPUSH
8595: LD_INT 8
8597: PPUSH
8598: LD_INT 2
8600: PPUSH
8601: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8605: LD_INT 68
8607: PPUSH
8608: LD_INT 8
8610: PPUSH
8611: LD_INT 0
8613: PPUSH
8614: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8618: LD_INT 51
8620: PPUSH
8621: LD_INT 8
8623: PPUSH
8624: LD_INT 2
8626: PPUSH
8627: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8631: LD_INT 52
8633: PPUSH
8634: LD_INT 8
8636: PPUSH
8637: LD_INT 2
8639: PPUSH
8640: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8644: LD_INT 53
8646: PPUSH
8647: LD_INT 8
8649: PPUSH
8650: LD_INT 2
8652: PPUSH
8653: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8657: LD_INT 60
8659: PPUSH
8660: LD_INT 8
8662: PPUSH
8663: LD_INT 2
8665: PPUSH
8666: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8670: LD_INT 61
8672: PPUSH
8673: LD_INT 8
8675: PPUSH
8676: LD_INT 2
8678: PPUSH
8679: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8683: LD_INT 62
8685: PPUSH
8686: LD_INT 8
8688: PPUSH
8689: LD_INT 0
8691: PPUSH
8692: CALL_OW 322
// end ; if Difficulty >= 3 then
8696: LD_OWVAR 67
8700: PUSH
8701: LD_INT 3
8703: GREATEREQUAL
8704: IFFALSE 8823
// begin SetTech ( 66 , 8 , state_researched ) ;
8706: LD_INT 66
8708: PPUSH
8709: LD_INT 8
8711: PPUSH
8712: LD_INT 2
8714: PPUSH
8715: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8719: LD_INT 67
8721: PPUSH
8722: LD_INT 8
8724: PPUSH
8725: LD_INT 2
8727: PPUSH
8728: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8732: LD_INT 68
8734: PPUSH
8735: LD_INT 8
8737: PPUSH
8738: LD_INT 0
8740: PPUSH
8741: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8745: LD_INT 51
8747: PPUSH
8748: LD_INT 8
8750: PPUSH
8751: LD_INT 2
8753: PPUSH
8754: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8758: LD_INT 52
8760: PPUSH
8761: LD_INT 8
8763: PPUSH
8764: LD_INT 2
8766: PPUSH
8767: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8771: LD_INT 53
8773: PPUSH
8774: LD_INT 8
8776: PPUSH
8777: LD_INT 2
8779: PPUSH
8780: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8784: LD_INT 60
8786: PPUSH
8787: LD_INT 8
8789: PPUSH
8790: LD_INT 2
8792: PPUSH
8793: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8797: LD_INT 61
8799: PPUSH
8800: LD_INT 8
8802: PPUSH
8803: LD_INT 2
8805: PPUSH
8806: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8810: LD_INT 62
8812: PPUSH
8813: LD_INT 8
8815: PPUSH
8816: LD_INT 0
8818: PPUSH
8819: CALL_OW 322
// end ; end ;
8823: LD_VAR 0 1
8827: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8828: LD_INT 0
8830: PPUSH
8831: PPUSH
// for i in charactersList do
8832: LD_ADDR_VAR 0 4
8836: PUSH
8837: LD_VAR 0 1
8841: PUSH
8842: FOR_IN
8843: IFFALSE 8861
// SaveCharacters ( i , ident ) ;
8845: LD_VAR 0 4
8849: PPUSH
8850: LD_VAR 0 2
8854: PPUSH
8855: CALL_OW 38
8859: GO 8842
8861: POP
8862: POP
// end ; end_of_file
8863: LD_VAR 0 3
8867: RET
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
8868: LD_EXP 38
8872: PUSH
8873: LD_INT 1
8875: EQUAL
8876: IFFALSE 9782
8878: GO 8880
8880: DISABLE
8881: LD_INT 0
8883: PPUSH
8884: PPUSH
8885: PPUSH
// begin m1 := false ;
8886: LD_ADDR_VAR 0 1
8890: PUSH
8891: LD_INT 0
8893: ST_TO_ADDR
// m2 := false ;
8894: LD_ADDR_VAR 0 2
8898: PUSH
8899: LD_INT 0
8901: ST_TO_ADDR
// m3 := false ;
8902: LD_ADDR_VAR 0 3
8906: PUSH
8907: LD_INT 0
8909: ST_TO_ADDR
// DialogueOn ;
8910: CALL_OW 6
// Say ( JMM , D9b-JMM-1 ) ;
8914: LD_EXP 1
8918: PPUSH
8919: LD_STRING D9b-JMM-1
8921: PPUSH
8922: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
8926: LD_EXP 15
8930: PPUSH
8931: LD_STRING D9b-Pow-1
8933: PPUSH
8934: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
8938: LD_EXP 1
8942: PPUSH
8943: LD_STRING D9b-JMM-2
8945: PPUSH
8946: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
8950: LD_EXP 15
8954: PPUSH
8955: LD_STRING D9b-Pow-2
8957: PPUSH
8958: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
8962: LD_EXP 1
8966: PPUSH
8967: LD_STRING D9b-JMM-3
8969: PPUSH
8970: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
8974: LD_EXP 15
8978: PPUSH
8979: LD_STRING D9b-Pow-3
8981: PPUSH
8982: CALL_OW 94
// if tick <= 60 60$00 then
8986: LD_OWVAR 1
8990: PUSH
8991: LD_INT 126000
8993: LESSEQUAL
8994: IFFALSE 9003
// SetAchievement ( ACH_ASPEED_13 ) ;
8996: LD_STRING ACH_ASPEED_13
8998: PPUSH
8999: CALL_OW 543
// if burlakStatus = 1 then
9003: LD_EXP 28
9007: PUSH
9008: LD_INT 1
9010: EQUAL
9011: IFFALSE 9033
// begin m1 := true ;
9013: LD_ADDR_VAR 0 1
9017: PUSH
9018: LD_INT 1
9020: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
9021: LD_STRING Burlak
9023: PPUSH
9024: LD_INT 1
9026: PPUSH
9027: CALL_OW 101
// end else
9031: GO 9044
// begin AddMedal ( Burlak , - 1 ) ;
9033: LD_STRING Burlak
9035: PPUSH
9036: LD_INT 1
9038: NEG
9039: PPUSH
9040: CALL_OW 101
// end ; if IsOk ( Stevens ) then
9044: LD_EXP 2
9048: PPUSH
9049: CALL_OW 302
9053: IFFALSE 9075
// begin m2 := true ;
9055: LD_ADDR_VAR 0 2
9059: PUSH
9060: LD_INT 1
9062: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
9063: LD_STRING Stevens
9065: PPUSH
9066: LD_INT 1
9068: PPUSH
9069: CALL_OW 101
// end else
9073: GO 9086
// begin AddMedal ( Stevens , - 1 ) ;
9075: LD_STRING Stevens
9077: PPUSH
9078: LD_INT 1
9080: NEG
9081: PPUSH
9082: CALL_OW 101
// end ; if radarOnSpot = 1 then
9086: LD_EXP 30
9090: PUSH
9091: LD_INT 1
9093: EQUAL
9094: IFFALSE 9116
// begin m3 := true ;
9096: LD_ADDR_VAR 0 3
9100: PUSH
9101: LD_INT 1
9103: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
9104: LD_STRING Observation
9106: PPUSH
9107: LD_INT 1
9109: PPUSH
9110: CALL_OW 101
// end else
9114: GO 9127
// begin AddMedal ( Observation , - 1 ) ;
9116: LD_STRING Observation
9118: PPUSH
9119: LD_INT 1
9121: NEG
9122: PPUSH
9123: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
9127: LD_VAR 0 1
9131: PUSH
9132: LD_VAR 0 2
9136: AND
9137: PUSH
9138: LD_VAR 0 3
9142: AND
9143: PUSH
9144: LD_OWVAR 67
9148: PUSH
9149: LD_INT 3
9151: GREATEREQUAL
9152: AND
9153: IFFALSE 9165
// SetAchievementEX ( ACH_AMER , 13 ) ;
9155: LD_STRING ACH_AMER
9157: PPUSH
9158: LD_INT 13
9160: PPUSH
9161: CALL_OW 564
// GiveMedals ( MAIN ) ;
9165: LD_STRING MAIN
9167: PPUSH
9168: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
9172: LD_EXP 28
9176: PPUSH
9177: LD_STRING 13_BurlakStatus_1
9179: PPUSH
9180: CALL_OW 39
// if IsLive ( Stevens ) then
9184: LD_EXP 2
9188: PPUSH
9189: CALL_OW 300
9193: IFFALSE 9207
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
9195: LD_INT 1
9197: PPUSH
9198: LD_STRING 13_StevensStatus_1
9200: PPUSH
9201: CALL_OW 39
9205: GO 9217
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
9207: LD_INT 0
9209: PPUSH
9210: LD_STRING 13_StevensStatus_1
9212: PPUSH
9213: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
9217: LD_INT 22
9219: PUSH
9220: LD_INT 1
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: PUSH
9227: LD_INT 21
9229: PUSH
9230: LD_INT 1
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PUSH
9237: LD_INT 2
9239: PUSH
9240: LD_INT 25
9242: PUSH
9243: LD_INT 1
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PUSH
9250: LD_INT 25
9252: PUSH
9253: LD_INT 2
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: LD_INT 25
9262: PUSH
9263: LD_INT 3
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PUSH
9270: LD_INT 25
9272: PUSH
9273: LD_INT 4
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: PUSH
9280: LD_INT 25
9282: PUSH
9283: LD_INT 5
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: PUSH
9290: LD_INT 25
9292: PUSH
9293: LD_INT 8
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: LIST
9313: PPUSH
9314: CALL_OW 69
9318: PPUSH
9319: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
9323: LD_EXP 1
9327: PPUSH
9328: LD_EXP 34
9332: PUSH
9333: LD_STRING JMM
9335: STR
9336: PPUSH
9337: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9341: LD_EXP 8
9345: PPUSH
9346: LD_EXP 34
9350: PUSH
9351: LD_STRING Brown
9353: STR
9354: PPUSH
9355: CALL 8828 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9359: LD_EXP 4
9363: PPUSH
9364: LD_EXP 34
9368: PUSH
9369: LD_STRING Donaldson
9371: STR
9372: PPUSH
9373: CALL 8828 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9377: LD_EXP 5
9381: PPUSH
9382: LD_EXP 34
9386: PUSH
9387: LD_STRING Bobby
9389: STR
9390: PPUSH
9391: CALL 8828 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
9395: LD_EXP 6
9399: PPUSH
9400: LD_EXP 34
9404: PUSH
9405: LD_STRING Cyrus
9407: STR
9408: PPUSH
9409: CALL 8828 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
9413: LD_EXP 3
9417: PPUSH
9418: LD_EXP 34
9422: PUSH
9423: LD_STRING Lisa
9425: STR
9426: PPUSH
9427: CALL 8828 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
9431: LD_EXP 13
9435: PPUSH
9436: LD_EXP 34
9440: PUSH
9441: LD_STRING Frank
9443: STR
9444: PPUSH
9445: CALL 8828 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
9449: LD_EXP 14
9453: PPUSH
9454: LD_EXP 34
9458: PUSH
9459: LD_STRING Kikuchi
9461: STR
9462: PPUSH
9463: CALL 8828 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
9467: LD_EXP 10
9471: PPUSH
9472: LD_EXP 34
9476: PUSH
9477: LD_STRING Houten
9479: STR
9480: PPUSH
9481: CALL 8828 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
9485: LD_EXP 12
9489: PPUSH
9490: LD_EXP 34
9494: PUSH
9495: LD_STRING Gary
9497: STR
9498: PPUSH
9499: CALL 8828 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
9503: LD_EXP 11
9507: PPUSH
9508: LD_EXP 34
9512: PUSH
9513: LD_STRING Cornell
9515: STR
9516: PPUSH
9517: CALL 8828 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
9521: LD_EXP 7
9525: PPUSH
9526: LD_EXP 34
9530: PUSH
9531: LD_STRING Denis
9533: STR
9534: PPUSH
9535: CALL 8828 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
9539: LD_EXP 9
9543: PPUSH
9544: LD_EXP 34
9548: PUSH
9549: LD_STRING Gladstone
9551: STR
9552: PPUSH
9553: CALL 8828 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
9557: LD_EXP 2
9561: PPUSH
9562: LD_EXP 34
9566: PUSH
9567: LD_STRING Stevens
9569: STR
9570: PPUSH
9571: CALL 8828 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
9575: LD_INT 50
9577: PUSH
9578: EMPTY
9579: LIST
9580: PUSH
9581: LD_INT 22
9583: PUSH
9584: LD_INT 1
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PUSH
9591: LD_INT 21
9593: PUSH
9594: LD_INT 1
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: LD_INT 2
9603: PUSH
9604: LD_INT 25
9606: PUSH
9607: LD_INT 1
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: LD_INT 25
9616: PUSH
9617: LD_INT 2
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 25
9626: PUSH
9627: LD_INT 3
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: PUSH
9634: LD_INT 25
9636: PUSH
9637: LD_INT 4
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: LD_INT 25
9646: PUSH
9647: LD_INT 5
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PUSH
9654: LD_INT 25
9656: PUSH
9657: LD_INT 8
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: PPUSH
9679: CALL_OW 69
9683: PUSH
9684: LD_EXP 1
9688: PUSH
9689: LD_EXP 8
9693: PUSH
9694: LD_EXP 4
9698: PUSH
9699: LD_EXP 5
9703: PUSH
9704: LD_EXP 6
9708: PUSH
9709: LD_EXP 3
9713: PUSH
9714: LD_EXP 13
9718: PUSH
9719: LD_EXP 9
9723: PUSH
9724: LD_EXP 14
9728: PUSH
9729: LD_EXP 7
9733: PUSH
9734: LD_EXP 10
9738: PUSH
9739: LD_EXP 12
9743: PUSH
9744: LD_EXP 11
9748: PUSH
9749: LD_EXP 2
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: DIFF
9770: PPUSH
9771: LD_STRING 13_other_survivors
9773: PPUSH
9774: CALL_OW 38
// YouWin ;
9778: CALL_OW 103
// end ; end_of_file
9782: PPOPN 3
9784: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) and GetTech ( tech_SibFiss , 1 ) = state_enabled do var i , tmp , yourSiberite ;
9785: LD_EXP 32
9789: PUSH
9790: LD_INT 2
9792: EQUAL
9793: PUSH
9794: LD_INT 34
9796: PUSH
9797: LD_INT 8
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PPUSH
9804: CALL_OW 69
9808: NOT
9809: AND
9810: PUSH
9811: LD_INT 25
9813: PPUSH
9814: LD_INT 1
9816: PPUSH
9817: CALL_OW 321
9821: PUSH
9822: LD_INT 1
9824: EQUAL
9825: AND
9826: IFFALSE 9962
9828: GO 9830
9830: DISABLE
9831: LD_INT 0
9833: PPUSH
9834: PPUSH
9835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9836: LD_ADDR_VAR 0 2
9840: PUSH
9841: LD_INT 22
9843: PUSH
9844: LD_INT 1
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: LD_INT 21
9853: PUSH
9854: LD_INT 3
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 2
9863: PUSH
9864: LD_INT 30
9866: PUSH
9867: LD_INT 0
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PUSH
9874: LD_INT 30
9876: PUSH
9877: LD_INT 1
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: LIST
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: LIST
9893: PPUSH
9894: CALL_OW 69
9898: ST_TO_ADDR
// for i in tmp do
9899: LD_ADDR_VAR 0 1
9903: PUSH
9904: LD_VAR 0 2
9908: PUSH
9909: FOR_IN
9910: IFFALSE 9943
// yourSiberite := yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
9912: LD_ADDR_VAR 0 3
9916: PUSH
9917: LD_VAR 0 3
9921: PUSH
9922: LD_VAR 0 1
9926: PPUSH
9927: CALL_OW 274
9931: PPUSH
9932: LD_INT 3
9934: PPUSH
9935: CALL_OW 275
9939: PLUS
9940: ST_TO_ADDR
9941: GO 9909
9943: POP
9944: POP
// if yourSiberite < 60 then
9945: LD_VAR 0 3
9949: PUSH
9950: LD_INT 60
9952: LESS
9953: IFFALSE 9962
// YouLost ( siberite ) ;
9955: LD_STRING siberite
9957: PPUSH
9958: CALL_OW 104
// end ; end_of_file
9962: PPOPN 3
9964: END
// every 8 8$00 + 8 8$00 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
9965: LD_INT 22
9967: PUSH
9968: LD_INT 8
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PUSH
9975: LD_INT 21
9977: PUSH
9978: LD_INT 1
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PPUSH
9989: CALL_OW 69
9993: PUSH
9994: LD_INT 6
9996: LESS
9997: IFFALSE 10007
9999: GO 10001
10001: DISABLE
// begin enable ;
10002: ENABLE
// PrepareArabianAttack ;
10003: CALL 4079 0 0
// end ;
10007: END
// every 0 0$30 trigger eventVar1 = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
10008: LD_EXP 35
10012: PUSH
10013: LD_INT 1
10015: EQUAL
10016: PUSH
10017: LD_INT 22
10019: PUSH
10020: LD_INT 8
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: PUSH
10027: LD_INT 21
10029: PUSH
10030: LD_INT 1
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PPUSH
10041: CALL_OW 69
10045: PUSH
10046: LD_INT 6
10048: LESS
10049: AND
10050: IFFALSE 10077
10052: GO 10054
10054: DISABLE
// begin wait ( 4 4$00 ) ;
10055: LD_INT 8400
10057: PPUSH
10058: CALL_OW 67
// PrepareRussianAttack ;
10062: CALL 3302 0 0
// wait ( 12 12$00 ) ;
10066: LD_INT 25200
10068: PPUSH
10069: CALL_OW 67
// PrepareRussianAttack ;
10073: CALL 3302 0 0
// end ;
10077: END
// export function ArabianAttack ; var i , tmp , path , path2 , vehicles , infantry , units , apes ; begin
10078: LD_INT 0
10080: PPUSH
10081: PPUSH
10082: PPUSH
10083: PPUSH
10084: PPUSH
10085: PPUSH
10086: PPUSH
10087: PPUSH
10088: PPUSH
// units := FilterAllUnits ( [ [ f_side , 8 ] , [ f_tag , 10 ] ] ) ;
10089: LD_ADDR_VAR 0 8
10093: PUSH
10094: LD_INT 22
10096: PUSH
10097: LD_INT 8
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PUSH
10104: LD_INT 120
10106: PUSH
10107: LD_INT 10
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PPUSH
10118: CALL_OW 69
10122: ST_TO_ADDR
// if not units then
10123: LD_VAR 0 8
10127: NOT
10128: IFFALSE 10132
// exit ;
10130: GO 10438
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10132: LD_ADDR_VAR 0 4
10136: PUSH
10137: LD_INT 80
10139: PUSH
10140: LD_INT 60
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: PUSH
10147: LD_INT 54
10149: PUSH
10150: LD_INT 57
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PUSH
10157: LD_INT 55
10159: PUSH
10160: LD_INT 74
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: LD_INT 61
10169: PUSH
10170: LD_INT 85
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: ST_TO_ADDR
// path2 := [ [ 93 , 99 ] , [ 85 , 99 ] ] ;
10183: LD_ADDR_VAR 0 5
10187: PUSH
10188: LD_INT 93
10190: PUSH
10191: LD_INT 99
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: PUSH
10198: LD_INT 85
10200: PUSH
10201: LD_INT 99
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10212: LD_INT 35
10214: PPUSH
10215: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10219: LD_ADDR_VAR 0 6
10223: PUSH
10224: LD_VAR 0 8
10228: PPUSH
10229: LD_INT 21
10231: PUSH
10232: LD_INT 2
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PPUSH
10239: CALL_OW 72
10243: ST_TO_ADDR
// if vehicles then
10244: LD_VAR 0 6
10248: IFFALSE 10264
// AgressiveMove ( vehicles , path ) ;
10250: LD_VAR 0 6
10254: PPUSH
10255: LD_VAR 0 4
10259: PPUSH
10260: CALL 71837 0 2
// infantry := UnitFilter ( units , [ [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10264: LD_ADDR_VAR 0 7
10268: PUSH
10269: LD_VAR 0 8
10273: PPUSH
10274: LD_INT 23
10276: PUSH
10277: LD_INT 2
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PUSH
10284: LD_INT 21
10286: PUSH
10287: LD_INT 1
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 72
10302: ST_TO_ADDR
// if infantry then
10303: LD_VAR 0 7
10307: IFFALSE 10323
// AgressiveMove ( infantry , path2 ) ;
10309: LD_VAR 0 7
10313: PPUSH
10314: LD_VAR 0 5
10318: PPUSH
10319: CALL 71837 0 2
// apes := UnitFilter ( units , [ [ f_nation , 0 ] , [ f_type , unit_human ] ] ) ;
10323: LD_ADDR_VAR 0 9
10327: PUSH
10328: LD_VAR 0 8
10332: PPUSH
10333: LD_INT 23
10335: PUSH
10336: LD_INT 0
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PUSH
10343: LD_INT 21
10345: PUSH
10346: LD_INT 1
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PPUSH
10357: CALL_OW 72
10361: ST_TO_ADDR
// if apes then
10362: LD_VAR 0 9
10366: IFFALSE 10410
// ComAttackUnit ( apes [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , apes [ 1 ] ) ) ;
10368: LD_VAR 0 9
10372: PUSH
10373: LD_INT 1
10375: ARRAY
10376: PPUSH
10377: LD_INT 22
10379: PUSH
10380: LD_INT 1
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PPUSH
10387: CALL_OW 69
10391: PPUSH
10392: LD_VAR 0 9
10396: PUSH
10397: LD_INT 1
10399: ARRAY
10400: PPUSH
10401: CALL_OW 74
10405: PPUSH
10406: CALL_OW 115
// units := UnitFilter ( units , [ f_ok ] ) ;
10410: LD_ADDR_VAR 0 8
10414: PUSH
10415: LD_VAR 0 8
10419: PPUSH
10420: LD_INT 50
10422: PUSH
10423: EMPTY
10424: LIST
10425: PPUSH
10426: CALL_OW 72
10430: ST_TO_ADDR
// until not units ;
10431: LD_VAR 0 8
10435: NOT
10436: IFFALSE 10212
// end ;
10438: LD_VAR 0 1
10442: RET
// export function RussianAttack ; var i , tmp , path , vehicles , units ; begin
10443: LD_INT 0
10445: PPUSH
10446: PPUSH
10447: PPUSH
10448: PPUSH
10449: PPUSH
10450: PPUSH
// units := FilterAllUnits ( [ [ f_side , 3 ] , [ f_tag , 10 ] ] ) ;
10451: LD_ADDR_VAR 0 6
10455: PUSH
10456: LD_INT 22
10458: PUSH
10459: LD_INT 3
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 120
10468: PUSH
10469: LD_INT 10
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: PPUSH
10480: CALL_OW 69
10484: ST_TO_ADDR
// if not units then
10485: LD_VAR 0 6
10489: NOT
10490: IFFALSE 10494
// exit ;
10492: GO 10625
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10494: LD_ADDR_VAR 0 4
10498: PUSH
10499: LD_INT 80
10501: PUSH
10502: LD_INT 60
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PUSH
10509: LD_INT 54
10511: PUSH
10512: LD_INT 57
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: PUSH
10519: LD_INT 55
10521: PUSH
10522: LD_INT 74
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 61
10531: PUSH
10532: LD_INT 85
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10545: LD_INT 35
10547: PPUSH
10548: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10552: LD_ADDR_VAR 0 5
10556: PUSH
10557: LD_VAR 0 6
10561: PPUSH
10562: LD_INT 21
10564: PUSH
10565: LD_INT 2
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PPUSH
10572: CALL_OW 72
10576: ST_TO_ADDR
// if vehicles then
10577: LD_VAR 0 5
10581: IFFALSE 10597
// AgressiveMove ( vehicles , path ) ;
10583: LD_VAR 0 5
10587: PPUSH
10588: LD_VAR 0 4
10592: PPUSH
10593: CALL 71837 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10597: LD_ADDR_VAR 0 6
10601: PUSH
10602: LD_VAR 0 6
10606: PPUSH
10607: LD_INT 50
10609: PUSH
10610: EMPTY
10611: LIST
10612: PPUSH
10613: CALL_OW 72
10617: ST_TO_ADDR
// until not units ;
10618: LD_VAR 0 6
10622: NOT
10623: IFFALSE 10545
// end ; end_of_file
10625: LD_VAR 0 1
10629: RET
// every 0 0$01 do var i , cratesSpawned ;
10630: GO 10632
10632: DISABLE
10633: LD_INT 0
10635: PPUSH
10636: PPUSH
// begin cratesSpawned := 0 ;
10637: LD_ADDR_VAR 0 2
10641: PUSH
10642: LD_INT 0
10644: ST_TO_ADDR
// for i := 1 to 6 do
10645: LD_ADDR_VAR 0 1
10649: PUSH
10650: DOUBLE
10651: LD_INT 1
10653: DEC
10654: ST_TO_ADDR
10655: LD_INT 6
10657: PUSH
10658: FOR_TO
10659: IFFALSE 10684
// CreateCratesArea ( rand ( 2 , 5 ) , StartCratesArea , false ) ;
10661: LD_INT 2
10663: PPUSH
10664: LD_INT 5
10666: PPUSH
10667: CALL_OW 12
10671: PPUSH
10672: LD_INT 17
10674: PPUSH
10675: LD_INT 0
10677: PPUSH
10678: CALL_OW 55
10682: GO 10658
10684: POP
10685: POP
// wait ( 0 0$20 ) ;
10686: LD_INT 700
10688: PPUSH
10689: CALL_OW 67
// repeat wait ( 0 0$08 ) ;
10693: LD_INT 280
10695: PPUSH
10696: CALL_OW 67
// if cratesSpawned < 12 then
10700: LD_VAR 0 2
10704: PUSH
10705: LD_INT 12
10707: LESS
10708: IFFALSE 10760
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
10710: LD_INT 105
10712: PPUSH
10713: LD_INT 350
10715: PPUSH
10716: CALL_OW 12
10720: PPUSH
10721: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10725: LD_INT 3
10727: PPUSH
10728: LD_INT 5
10730: PPUSH
10731: CALL_OW 12
10735: PPUSH
10736: LD_INT 13
10738: PPUSH
10739: LD_INT 1
10741: PPUSH
10742: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10746: LD_ADDR_VAR 0 2
10750: PUSH
10751: LD_VAR 0 2
10755: PUSH
10756: LD_INT 1
10758: PLUS
10759: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
10760: LD_VAR 0 2
10764: PUSH
10765: LD_INT 12
10767: GREATEREQUAL
10768: PUSH
10769: LD_VAR 0 2
10773: PUSH
10774: LD_INT 32
10776: LESS
10777: AND
10778: IFFALSE 10830
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
10780: LD_INT 420
10782: PPUSH
10783: LD_INT 700
10785: PPUSH
10786: CALL_OW 12
10790: PPUSH
10791: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10795: LD_INT 3
10797: PPUSH
10798: LD_INT 5
10800: PPUSH
10801: CALL_OW 12
10805: PPUSH
10806: LD_INT 13
10808: PPUSH
10809: LD_INT 1
10811: PPUSH
10812: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10816: LD_ADDR_VAR 0 2
10820: PUSH
10821: LD_VAR 0 2
10825: PUSH
10826: LD_INT 1
10828: PLUS
10829: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
10830: LD_VAR 0 2
10834: PUSH
10835: LD_INT 32
10837: GREATEREQUAL
10838: IFFALSE 10912
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10840: LD_INT 13
10842: PPUSH
10843: CALL_OW 435
10847: PUSH
10848: LD_INT 14
10850: LESS
10851: IFFALSE 10862
// wait ( 0 0$20 ) else
10853: LD_INT 700
10855: PPUSH
10856: CALL_OW 67
10860: GO 10877
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
10862: LD_INT 1750
10864: PPUSH
10865: LD_INT 3150
10867: PPUSH
10868: CALL_OW 12
10872: PPUSH
10873: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
10877: LD_INT 2
10879: PPUSH
10880: LD_INT 5
10882: PPUSH
10883: CALL_OW 12
10887: PPUSH
10888: LD_INT 13
10890: PPUSH
10891: LD_INT 1
10893: PPUSH
10894: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10898: LD_ADDR_VAR 0 2
10902: PUSH
10903: LD_VAR 0 2
10907: PUSH
10908: LD_INT 1
10910: PLUS
10911: ST_TO_ADDR
// end ; if cratesSpawned >= 120 then
10912: LD_VAR 0 2
10916: PUSH
10917: LD_INT 120
10919: GREATEREQUAL
10920: IFFALSE 10994
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10922: LD_INT 13
10924: PPUSH
10925: CALL_OW 435
10929: PUSH
10930: LD_INT 14
10932: LESS
10933: IFFALSE 10944
// wait ( 0 0$40 ) else
10935: LD_INT 1400
10937: PPUSH
10938: CALL_OW 67
10942: GO 10959
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
10944: LD_INT 2450
10946: PPUSH
10947: LD_INT 3850
10949: PPUSH
10950: CALL_OW 12
10954: PPUSH
10955: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
10959: LD_INT 1
10961: PPUSH
10962: LD_INT 5
10964: PPUSH
10965: CALL_OW 12
10969: PPUSH
10970: LD_INT 13
10972: PPUSH
10973: LD_INT 1
10975: PPUSH
10976: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10980: LD_ADDR_VAR 0 2
10984: PUSH
10985: LD_VAR 0 2
10989: PUSH
10990: LD_INT 1
10992: PLUS
10993: ST_TO_ADDR
// end ; until false ;
10994: LD_INT 0
10996: IFFALSE 10693
// end ; end_of_file end_of_file
10998: PPOPN 2
11000: END
// export globalGameSaveCounter ; every 0 0$1 do
11001: GO 11003
11003: DISABLE
// begin enable ;
11004: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11005: LD_STRING updateTimer(
11007: PUSH
11008: LD_OWVAR 1
11012: STR
11013: PUSH
11014: LD_STRING );
11016: STR
11017: PPUSH
11018: CALL_OW 559
// end ;
11022: END
// every 0 0$1 do
11023: GO 11025
11025: DISABLE
// begin globalGameSaveCounter := 0 ;
11026: LD_ADDR_EXP 46
11030: PUSH
11031: LD_INT 0
11033: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11034: LD_STRING setGameSaveCounter(0)
11036: PPUSH
11037: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11041: LD_STRING initStreamRollete();
11043: PPUSH
11044: CALL_OW 559
// InitStreamMode ;
11048: CALL 12374 0 0
// DefineStreamItems ( false ) ;
11052: LD_INT 0
11054: PPUSH
11055: CALL 12838 0 1
// end ;
11059: END
// export function SOS_MapStart ( ) ; begin
11060: LD_INT 0
11062: PPUSH
// if streamModeActive then
11063: LD_EXP 47
11067: IFFALSE 11076
// DefineStreamItems ( true ) ;
11069: LD_INT 1
11071: PPUSH
11072: CALL 12838 0 1
// UpdateLuaVariables ( ) ;
11076: CALL 11093 0 0
// UpdateFactoryWaypoints ( ) ;
11080: CALL 25707 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11084: CALL 25964 0 0
// end ;
11088: LD_VAR 0 1
11092: RET
// function UpdateLuaVariables ( ) ; begin
11093: LD_INT 0
11095: PPUSH
// if globalGameSaveCounter then
11096: LD_EXP 46
11100: IFFALSE 11134
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11102: LD_ADDR_EXP 46
11106: PUSH
11107: LD_EXP 46
11111: PPUSH
11112: CALL 70594 0 1
11116: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11117: LD_STRING setGameSaveCounter(
11119: PUSH
11120: LD_EXP 46
11124: STR
11125: PUSH
11126: LD_STRING )
11128: STR
11129: PPUSH
11130: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11134: LD_STRING setGameDifficulty(
11136: PUSH
11137: LD_OWVAR 67
11141: STR
11142: PUSH
11143: LD_STRING )
11145: STR
11146: PPUSH
11147: CALL_OW 559
// end ;
11151: LD_VAR 0 1
11155: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11156: LD_INT 0
11158: PPUSH
// if p2 = stream_mode then
11159: LD_VAR 0 2
11163: PUSH
11164: LD_INT 100
11166: EQUAL
11167: IFFALSE 12170
// begin if not StreamModeActive then
11169: LD_EXP 47
11173: NOT
11174: IFFALSE 11184
// StreamModeActive := true ;
11176: LD_ADDR_EXP 47
11180: PUSH
11181: LD_INT 1
11183: ST_TO_ADDR
// if p3 = 0 then
11184: LD_VAR 0 3
11188: PUSH
11189: LD_INT 0
11191: EQUAL
11192: IFFALSE 11198
// InitStreamMode ;
11194: CALL 12374 0 0
// if p3 = 1 then
11198: LD_VAR 0 3
11202: PUSH
11203: LD_INT 1
11205: EQUAL
11206: IFFALSE 11216
// sRocket := true ;
11208: LD_ADDR_EXP 52
11212: PUSH
11213: LD_INT 1
11215: ST_TO_ADDR
// if p3 = 2 then
11216: LD_VAR 0 3
11220: PUSH
11221: LD_INT 2
11223: EQUAL
11224: IFFALSE 11234
// sSpeed := true ;
11226: LD_ADDR_EXP 51
11230: PUSH
11231: LD_INT 1
11233: ST_TO_ADDR
// if p3 = 3 then
11234: LD_VAR 0 3
11238: PUSH
11239: LD_INT 3
11241: EQUAL
11242: IFFALSE 11252
// sEngine := true ;
11244: LD_ADDR_EXP 53
11248: PUSH
11249: LD_INT 1
11251: ST_TO_ADDR
// if p3 = 4 then
11252: LD_VAR 0 3
11256: PUSH
11257: LD_INT 4
11259: EQUAL
11260: IFFALSE 11270
// sSpec := true ;
11262: LD_ADDR_EXP 50
11266: PUSH
11267: LD_INT 1
11269: ST_TO_ADDR
// if p3 = 5 then
11270: LD_VAR 0 3
11274: PUSH
11275: LD_INT 5
11277: EQUAL
11278: IFFALSE 11288
// sLevel := true ;
11280: LD_ADDR_EXP 54
11284: PUSH
11285: LD_INT 1
11287: ST_TO_ADDR
// if p3 = 6 then
11288: LD_VAR 0 3
11292: PUSH
11293: LD_INT 6
11295: EQUAL
11296: IFFALSE 11306
// sArmoury := true ;
11298: LD_ADDR_EXP 55
11302: PUSH
11303: LD_INT 1
11305: ST_TO_ADDR
// if p3 = 7 then
11306: LD_VAR 0 3
11310: PUSH
11311: LD_INT 7
11313: EQUAL
11314: IFFALSE 11324
// sRadar := true ;
11316: LD_ADDR_EXP 56
11320: PUSH
11321: LD_INT 1
11323: ST_TO_ADDR
// if p3 = 8 then
11324: LD_VAR 0 3
11328: PUSH
11329: LD_INT 8
11331: EQUAL
11332: IFFALSE 11342
// sBunker := true ;
11334: LD_ADDR_EXP 57
11338: PUSH
11339: LD_INT 1
11341: ST_TO_ADDR
// if p3 = 9 then
11342: LD_VAR 0 3
11346: PUSH
11347: LD_INT 9
11349: EQUAL
11350: IFFALSE 11360
// sHack := true ;
11352: LD_ADDR_EXP 58
11356: PUSH
11357: LD_INT 1
11359: ST_TO_ADDR
// if p3 = 10 then
11360: LD_VAR 0 3
11364: PUSH
11365: LD_INT 10
11367: EQUAL
11368: IFFALSE 11378
// sFire := true ;
11370: LD_ADDR_EXP 59
11374: PUSH
11375: LD_INT 1
11377: ST_TO_ADDR
// if p3 = 11 then
11378: LD_VAR 0 3
11382: PUSH
11383: LD_INT 11
11385: EQUAL
11386: IFFALSE 11396
// sRefresh := true ;
11388: LD_ADDR_EXP 60
11392: PUSH
11393: LD_INT 1
11395: ST_TO_ADDR
// if p3 = 12 then
11396: LD_VAR 0 3
11400: PUSH
11401: LD_INT 12
11403: EQUAL
11404: IFFALSE 11414
// sExp := true ;
11406: LD_ADDR_EXP 61
11410: PUSH
11411: LD_INT 1
11413: ST_TO_ADDR
// if p3 = 13 then
11414: LD_VAR 0 3
11418: PUSH
11419: LD_INT 13
11421: EQUAL
11422: IFFALSE 11432
// sDepot := true ;
11424: LD_ADDR_EXP 62
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// if p3 = 14 then
11432: LD_VAR 0 3
11436: PUSH
11437: LD_INT 14
11439: EQUAL
11440: IFFALSE 11450
// sFlag := true ;
11442: LD_ADDR_EXP 63
11446: PUSH
11447: LD_INT 1
11449: ST_TO_ADDR
// if p3 = 15 then
11450: LD_VAR 0 3
11454: PUSH
11455: LD_INT 15
11457: EQUAL
11458: IFFALSE 11468
// sKamikadze := true ;
11460: LD_ADDR_EXP 71
11464: PUSH
11465: LD_INT 1
11467: ST_TO_ADDR
// if p3 = 16 then
11468: LD_VAR 0 3
11472: PUSH
11473: LD_INT 16
11475: EQUAL
11476: IFFALSE 11486
// sTroll := true ;
11478: LD_ADDR_EXP 72
11482: PUSH
11483: LD_INT 1
11485: ST_TO_ADDR
// if p3 = 17 then
11486: LD_VAR 0 3
11490: PUSH
11491: LD_INT 17
11493: EQUAL
11494: IFFALSE 11504
// sSlow := true ;
11496: LD_ADDR_EXP 73
11500: PUSH
11501: LD_INT 1
11503: ST_TO_ADDR
// if p3 = 18 then
11504: LD_VAR 0 3
11508: PUSH
11509: LD_INT 18
11511: EQUAL
11512: IFFALSE 11522
// sLack := true ;
11514: LD_ADDR_EXP 74
11518: PUSH
11519: LD_INT 1
11521: ST_TO_ADDR
// if p3 = 19 then
11522: LD_VAR 0 3
11526: PUSH
11527: LD_INT 19
11529: EQUAL
11530: IFFALSE 11540
// sTank := true ;
11532: LD_ADDR_EXP 76
11536: PUSH
11537: LD_INT 1
11539: ST_TO_ADDR
// if p3 = 20 then
11540: LD_VAR 0 3
11544: PUSH
11545: LD_INT 20
11547: EQUAL
11548: IFFALSE 11558
// sRemote := true ;
11550: LD_ADDR_EXP 77
11554: PUSH
11555: LD_INT 1
11557: ST_TO_ADDR
// if p3 = 21 then
11558: LD_VAR 0 3
11562: PUSH
11563: LD_INT 21
11565: EQUAL
11566: IFFALSE 11576
// sPowell := true ;
11568: LD_ADDR_EXP 78
11572: PUSH
11573: LD_INT 1
11575: ST_TO_ADDR
// if p3 = 22 then
11576: LD_VAR 0 3
11580: PUSH
11581: LD_INT 22
11583: EQUAL
11584: IFFALSE 11594
// sTeleport := true ;
11586: LD_ADDR_EXP 81
11590: PUSH
11591: LD_INT 1
11593: ST_TO_ADDR
// if p3 = 23 then
11594: LD_VAR 0 3
11598: PUSH
11599: LD_INT 23
11601: EQUAL
11602: IFFALSE 11612
// sOilTower := true ;
11604: LD_ADDR_EXP 83
11608: PUSH
11609: LD_INT 1
11611: ST_TO_ADDR
// if p3 = 24 then
11612: LD_VAR 0 3
11616: PUSH
11617: LD_INT 24
11619: EQUAL
11620: IFFALSE 11630
// sShovel := true ;
11622: LD_ADDR_EXP 84
11626: PUSH
11627: LD_INT 1
11629: ST_TO_ADDR
// if p3 = 25 then
11630: LD_VAR 0 3
11634: PUSH
11635: LD_INT 25
11637: EQUAL
11638: IFFALSE 11648
// sSheik := true ;
11640: LD_ADDR_EXP 85
11644: PUSH
11645: LD_INT 1
11647: ST_TO_ADDR
// if p3 = 26 then
11648: LD_VAR 0 3
11652: PUSH
11653: LD_INT 26
11655: EQUAL
11656: IFFALSE 11666
// sEarthquake := true ;
11658: LD_ADDR_EXP 87
11662: PUSH
11663: LD_INT 1
11665: ST_TO_ADDR
// if p3 = 27 then
11666: LD_VAR 0 3
11670: PUSH
11671: LD_INT 27
11673: EQUAL
11674: IFFALSE 11684
// sAI := true ;
11676: LD_ADDR_EXP 88
11680: PUSH
11681: LD_INT 1
11683: ST_TO_ADDR
// if p3 = 28 then
11684: LD_VAR 0 3
11688: PUSH
11689: LD_INT 28
11691: EQUAL
11692: IFFALSE 11702
// sCargo := true ;
11694: LD_ADDR_EXP 91
11698: PUSH
11699: LD_INT 1
11701: ST_TO_ADDR
// if p3 = 29 then
11702: LD_VAR 0 3
11706: PUSH
11707: LD_INT 29
11709: EQUAL
11710: IFFALSE 11720
// sDLaser := true ;
11712: LD_ADDR_EXP 92
11716: PUSH
11717: LD_INT 1
11719: ST_TO_ADDR
// if p3 = 30 then
11720: LD_VAR 0 3
11724: PUSH
11725: LD_INT 30
11727: EQUAL
11728: IFFALSE 11738
// sExchange := true ;
11730: LD_ADDR_EXP 93
11734: PUSH
11735: LD_INT 1
11737: ST_TO_ADDR
// if p3 = 31 then
11738: LD_VAR 0 3
11742: PUSH
11743: LD_INT 31
11745: EQUAL
11746: IFFALSE 11756
// sFac := true ;
11748: LD_ADDR_EXP 94
11752: PUSH
11753: LD_INT 1
11755: ST_TO_ADDR
// if p3 = 32 then
11756: LD_VAR 0 3
11760: PUSH
11761: LD_INT 32
11763: EQUAL
11764: IFFALSE 11774
// sPower := true ;
11766: LD_ADDR_EXP 95
11770: PUSH
11771: LD_INT 1
11773: ST_TO_ADDR
// if p3 = 33 then
11774: LD_VAR 0 3
11778: PUSH
11779: LD_INT 33
11781: EQUAL
11782: IFFALSE 11792
// sRandom := true ;
11784: LD_ADDR_EXP 96
11788: PUSH
11789: LD_INT 1
11791: ST_TO_ADDR
// if p3 = 34 then
11792: LD_VAR 0 3
11796: PUSH
11797: LD_INT 34
11799: EQUAL
11800: IFFALSE 11810
// sShield := true ;
11802: LD_ADDR_EXP 97
11806: PUSH
11807: LD_INT 1
11809: ST_TO_ADDR
// if p3 = 35 then
11810: LD_VAR 0 3
11814: PUSH
11815: LD_INT 35
11817: EQUAL
11818: IFFALSE 11828
// sTime := true ;
11820: LD_ADDR_EXP 98
11824: PUSH
11825: LD_INT 1
11827: ST_TO_ADDR
// if p3 = 36 then
11828: LD_VAR 0 3
11832: PUSH
11833: LD_INT 36
11835: EQUAL
11836: IFFALSE 11846
// sTools := true ;
11838: LD_ADDR_EXP 99
11842: PUSH
11843: LD_INT 1
11845: ST_TO_ADDR
// if p3 = 101 then
11846: LD_VAR 0 3
11850: PUSH
11851: LD_INT 101
11853: EQUAL
11854: IFFALSE 11864
// sSold := true ;
11856: LD_ADDR_EXP 64
11860: PUSH
11861: LD_INT 1
11863: ST_TO_ADDR
// if p3 = 102 then
11864: LD_VAR 0 3
11868: PUSH
11869: LD_INT 102
11871: EQUAL
11872: IFFALSE 11882
// sDiff := true ;
11874: LD_ADDR_EXP 65
11878: PUSH
11879: LD_INT 1
11881: ST_TO_ADDR
// if p3 = 103 then
11882: LD_VAR 0 3
11886: PUSH
11887: LD_INT 103
11889: EQUAL
11890: IFFALSE 11900
// sFog := true ;
11892: LD_ADDR_EXP 68
11896: PUSH
11897: LD_INT 1
11899: ST_TO_ADDR
// if p3 = 104 then
11900: LD_VAR 0 3
11904: PUSH
11905: LD_INT 104
11907: EQUAL
11908: IFFALSE 11918
// sReset := true ;
11910: LD_ADDR_EXP 69
11914: PUSH
11915: LD_INT 1
11917: ST_TO_ADDR
// if p3 = 105 then
11918: LD_VAR 0 3
11922: PUSH
11923: LD_INT 105
11925: EQUAL
11926: IFFALSE 11936
// sSun := true ;
11928: LD_ADDR_EXP 70
11932: PUSH
11933: LD_INT 1
11935: ST_TO_ADDR
// if p3 = 106 then
11936: LD_VAR 0 3
11940: PUSH
11941: LD_INT 106
11943: EQUAL
11944: IFFALSE 11954
// sTiger := true ;
11946: LD_ADDR_EXP 66
11950: PUSH
11951: LD_INT 1
11953: ST_TO_ADDR
// if p3 = 107 then
11954: LD_VAR 0 3
11958: PUSH
11959: LD_INT 107
11961: EQUAL
11962: IFFALSE 11972
// sBomb := true ;
11964: LD_ADDR_EXP 67
11968: PUSH
11969: LD_INT 1
11971: ST_TO_ADDR
// if p3 = 108 then
11972: LD_VAR 0 3
11976: PUSH
11977: LD_INT 108
11979: EQUAL
11980: IFFALSE 11990
// sWound := true ;
11982: LD_ADDR_EXP 75
11986: PUSH
11987: LD_INT 1
11989: ST_TO_ADDR
// if p3 = 109 then
11990: LD_VAR 0 3
11994: PUSH
11995: LD_INT 109
11997: EQUAL
11998: IFFALSE 12008
// sBetray := true ;
12000: LD_ADDR_EXP 79
12004: PUSH
12005: LD_INT 1
12007: ST_TO_ADDR
// if p3 = 110 then
12008: LD_VAR 0 3
12012: PUSH
12013: LD_INT 110
12015: EQUAL
12016: IFFALSE 12026
// sContamin := true ;
12018: LD_ADDR_EXP 80
12022: PUSH
12023: LD_INT 1
12025: ST_TO_ADDR
// if p3 = 111 then
12026: LD_VAR 0 3
12030: PUSH
12031: LD_INT 111
12033: EQUAL
12034: IFFALSE 12044
// sOil := true ;
12036: LD_ADDR_EXP 82
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// if p3 = 112 then
12044: LD_VAR 0 3
12048: PUSH
12049: LD_INT 112
12051: EQUAL
12052: IFFALSE 12062
// sStu := true ;
12054: LD_ADDR_EXP 86
12058: PUSH
12059: LD_INT 1
12061: ST_TO_ADDR
// if p3 = 113 then
12062: LD_VAR 0 3
12066: PUSH
12067: LD_INT 113
12069: EQUAL
12070: IFFALSE 12080
// sBazooka := true ;
12072: LD_ADDR_EXP 89
12076: PUSH
12077: LD_INT 1
12079: ST_TO_ADDR
// if p3 = 114 then
12080: LD_VAR 0 3
12084: PUSH
12085: LD_INT 114
12087: EQUAL
12088: IFFALSE 12098
// sMortar := true ;
12090: LD_ADDR_EXP 90
12094: PUSH
12095: LD_INT 1
12097: ST_TO_ADDR
// if p3 = 115 then
12098: LD_VAR 0 3
12102: PUSH
12103: LD_INT 115
12105: EQUAL
12106: IFFALSE 12116
// sRanger := true ;
12108: LD_ADDR_EXP 100
12112: PUSH
12113: LD_INT 1
12115: ST_TO_ADDR
// if p3 = 116 then
12116: LD_VAR 0 3
12120: PUSH
12121: LD_INT 116
12123: EQUAL
12124: IFFALSE 12134
// sComputer := true ;
12126: LD_ADDR_EXP 101
12130: PUSH
12131: LD_INT 1
12133: ST_TO_ADDR
// if p3 = 117 then
12134: LD_VAR 0 3
12138: PUSH
12139: LD_INT 117
12141: EQUAL
12142: IFFALSE 12152
// s30 := true ;
12144: LD_ADDR_EXP 102
12148: PUSH
12149: LD_INT 1
12151: ST_TO_ADDR
// if p3 = 118 then
12152: LD_VAR 0 3
12156: PUSH
12157: LD_INT 118
12159: EQUAL
12160: IFFALSE 12170
// s60 := true ;
12162: LD_ADDR_EXP 103
12166: PUSH
12167: LD_INT 1
12169: ST_TO_ADDR
// end ; if p2 = hack_mode then
12170: LD_VAR 0 2
12174: PUSH
12175: LD_INT 101
12177: EQUAL
12178: IFFALSE 12306
// begin case p3 of 1 :
12180: LD_VAR 0 3
12184: PUSH
12185: LD_INT 1
12187: DOUBLE
12188: EQUAL
12189: IFTRUE 12193
12191: GO 12200
12193: POP
// hHackUnlimitedResources ; 2 :
12194: CALL 24453 0 0
12198: GO 12306
12200: LD_INT 2
12202: DOUBLE
12203: EQUAL
12204: IFTRUE 12208
12206: GO 12215
12208: POP
// hHackSetLevel10 ; 3 :
12209: CALL 24586 0 0
12213: GO 12306
12215: LD_INT 3
12217: DOUBLE
12218: EQUAL
12219: IFTRUE 12223
12221: GO 12230
12223: POP
// hHackSetLevel10YourUnits ; 4 :
12224: CALL 24671 0 0
12228: GO 12306
12230: LD_INT 4
12232: DOUBLE
12233: EQUAL
12234: IFTRUE 12238
12236: GO 12245
12238: POP
// hHackInvincible ; 5 :
12239: CALL 25119 0 0
12243: GO 12306
12245: LD_INT 5
12247: DOUBLE
12248: EQUAL
12249: IFTRUE 12253
12251: GO 12260
12253: POP
// hHackInvisible ; 6 :
12254: CALL 25230 0 0
12258: GO 12306
12260: LD_INT 6
12262: DOUBLE
12263: EQUAL
12264: IFTRUE 12268
12266: GO 12275
12268: POP
// hHackChangeYourSide ; 7 :
12269: CALL 25287 0 0
12273: GO 12306
12275: LD_INT 7
12277: DOUBLE
12278: EQUAL
12279: IFTRUE 12283
12281: GO 12290
12283: POP
// hHackChangeUnitSide ; 8 :
12284: CALL 25329 0 0
12288: GO 12306
12290: LD_INT 8
12292: DOUBLE
12293: EQUAL
12294: IFTRUE 12298
12296: GO 12305
12298: POP
// hHackFog ; end ;
12299: CALL 25430 0 0
12303: GO 12306
12305: POP
// end ; if p2 = game_save_mode then
12306: LD_VAR 0 2
12310: PUSH
12311: LD_INT 102
12313: EQUAL
12314: IFFALSE 12369
// begin if p3 = 1 then
12316: LD_VAR 0 3
12320: PUSH
12321: LD_INT 1
12323: EQUAL
12324: IFFALSE 12336
// globalGameSaveCounter := p4 ;
12326: LD_ADDR_EXP 46
12330: PUSH
12331: LD_VAR 0 4
12335: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12336: LD_VAR 0 3
12340: PUSH
12341: LD_INT 2
12343: EQUAL
12344: PUSH
12345: LD_EXP 46
12349: AND
12350: IFFALSE 12369
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12352: LD_STRING setGameSaveCounter(
12354: PUSH
12355: LD_EXP 46
12359: STR
12360: PUSH
12361: LD_STRING )
12363: STR
12364: PPUSH
12365: CALL_OW 559
// end ; end ;
12369: LD_VAR 0 7
12373: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12374: LD_INT 0
12376: PPUSH
// streamModeActive := false ;
12377: LD_ADDR_EXP 47
12381: PUSH
12382: LD_INT 0
12384: ST_TO_ADDR
// normalCounter := 36 ;
12385: LD_ADDR_EXP 48
12389: PUSH
12390: LD_INT 36
12392: ST_TO_ADDR
// hardcoreCounter := 18 ;
12393: LD_ADDR_EXP 49
12397: PUSH
12398: LD_INT 18
12400: ST_TO_ADDR
// sRocket := false ;
12401: LD_ADDR_EXP 52
12405: PUSH
12406: LD_INT 0
12408: ST_TO_ADDR
// sSpeed := false ;
12409: LD_ADDR_EXP 51
12413: PUSH
12414: LD_INT 0
12416: ST_TO_ADDR
// sEngine := false ;
12417: LD_ADDR_EXP 53
12421: PUSH
12422: LD_INT 0
12424: ST_TO_ADDR
// sSpec := false ;
12425: LD_ADDR_EXP 50
12429: PUSH
12430: LD_INT 0
12432: ST_TO_ADDR
// sLevel := false ;
12433: LD_ADDR_EXP 54
12437: PUSH
12438: LD_INT 0
12440: ST_TO_ADDR
// sArmoury := false ;
12441: LD_ADDR_EXP 55
12445: PUSH
12446: LD_INT 0
12448: ST_TO_ADDR
// sRadar := false ;
12449: LD_ADDR_EXP 56
12453: PUSH
12454: LD_INT 0
12456: ST_TO_ADDR
// sBunker := false ;
12457: LD_ADDR_EXP 57
12461: PUSH
12462: LD_INT 0
12464: ST_TO_ADDR
// sHack := false ;
12465: LD_ADDR_EXP 58
12469: PUSH
12470: LD_INT 0
12472: ST_TO_ADDR
// sFire := false ;
12473: LD_ADDR_EXP 59
12477: PUSH
12478: LD_INT 0
12480: ST_TO_ADDR
// sRefresh := false ;
12481: LD_ADDR_EXP 60
12485: PUSH
12486: LD_INT 0
12488: ST_TO_ADDR
// sExp := false ;
12489: LD_ADDR_EXP 61
12493: PUSH
12494: LD_INT 0
12496: ST_TO_ADDR
// sDepot := false ;
12497: LD_ADDR_EXP 62
12501: PUSH
12502: LD_INT 0
12504: ST_TO_ADDR
// sFlag := false ;
12505: LD_ADDR_EXP 63
12509: PUSH
12510: LD_INT 0
12512: ST_TO_ADDR
// sKamikadze := false ;
12513: LD_ADDR_EXP 71
12517: PUSH
12518: LD_INT 0
12520: ST_TO_ADDR
// sTroll := false ;
12521: LD_ADDR_EXP 72
12525: PUSH
12526: LD_INT 0
12528: ST_TO_ADDR
// sSlow := false ;
12529: LD_ADDR_EXP 73
12533: PUSH
12534: LD_INT 0
12536: ST_TO_ADDR
// sLack := false ;
12537: LD_ADDR_EXP 74
12541: PUSH
12542: LD_INT 0
12544: ST_TO_ADDR
// sTank := false ;
12545: LD_ADDR_EXP 76
12549: PUSH
12550: LD_INT 0
12552: ST_TO_ADDR
// sRemote := false ;
12553: LD_ADDR_EXP 77
12557: PUSH
12558: LD_INT 0
12560: ST_TO_ADDR
// sPowell := false ;
12561: LD_ADDR_EXP 78
12565: PUSH
12566: LD_INT 0
12568: ST_TO_ADDR
// sTeleport := false ;
12569: LD_ADDR_EXP 81
12573: PUSH
12574: LD_INT 0
12576: ST_TO_ADDR
// sOilTower := false ;
12577: LD_ADDR_EXP 83
12581: PUSH
12582: LD_INT 0
12584: ST_TO_ADDR
// sShovel := false ;
12585: LD_ADDR_EXP 84
12589: PUSH
12590: LD_INT 0
12592: ST_TO_ADDR
// sSheik := false ;
12593: LD_ADDR_EXP 85
12597: PUSH
12598: LD_INT 0
12600: ST_TO_ADDR
// sEarthquake := false ;
12601: LD_ADDR_EXP 87
12605: PUSH
12606: LD_INT 0
12608: ST_TO_ADDR
// sAI := false ;
12609: LD_ADDR_EXP 88
12613: PUSH
12614: LD_INT 0
12616: ST_TO_ADDR
// sCargo := false ;
12617: LD_ADDR_EXP 91
12621: PUSH
12622: LD_INT 0
12624: ST_TO_ADDR
// sDLaser := false ;
12625: LD_ADDR_EXP 92
12629: PUSH
12630: LD_INT 0
12632: ST_TO_ADDR
// sExchange := false ;
12633: LD_ADDR_EXP 93
12637: PUSH
12638: LD_INT 0
12640: ST_TO_ADDR
// sFac := false ;
12641: LD_ADDR_EXP 94
12645: PUSH
12646: LD_INT 0
12648: ST_TO_ADDR
// sPower := false ;
12649: LD_ADDR_EXP 95
12653: PUSH
12654: LD_INT 0
12656: ST_TO_ADDR
// sRandom := false ;
12657: LD_ADDR_EXP 96
12661: PUSH
12662: LD_INT 0
12664: ST_TO_ADDR
// sShield := false ;
12665: LD_ADDR_EXP 97
12669: PUSH
12670: LD_INT 0
12672: ST_TO_ADDR
// sTime := false ;
12673: LD_ADDR_EXP 98
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// sTools := false ;
12681: LD_ADDR_EXP 99
12685: PUSH
12686: LD_INT 0
12688: ST_TO_ADDR
// sSold := false ;
12689: LD_ADDR_EXP 64
12693: PUSH
12694: LD_INT 0
12696: ST_TO_ADDR
// sDiff := false ;
12697: LD_ADDR_EXP 65
12701: PUSH
12702: LD_INT 0
12704: ST_TO_ADDR
// sFog := false ;
12705: LD_ADDR_EXP 68
12709: PUSH
12710: LD_INT 0
12712: ST_TO_ADDR
// sReset := false ;
12713: LD_ADDR_EXP 69
12717: PUSH
12718: LD_INT 0
12720: ST_TO_ADDR
// sSun := false ;
12721: LD_ADDR_EXP 70
12725: PUSH
12726: LD_INT 0
12728: ST_TO_ADDR
// sTiger := false ;
12729: LD_ADDR_EXP 66
12733: PUSH
12734: LD_INT 0
12736: ST_TO_ADDR
// sBomb := false ;
12737: LD_ADDR_EXP 67
12741: PUSH
12742: LD_INT 0
12744: ST_TO_ADDR
// sWound := false ;
12745: LD_ADDR_EXP 75
12749: PUSH
12750: LD_INT 0
12752: ST_TO_ADDR
// sBetray := false ;
12753: LD_ADDR_EXP 79
12757: PUSH
12758: LD_INT 0
12760: ST_TO_ADDR
// sContamin := false ;
12761: LD_ADDR_EXP 80
12765: PUSH
12766: LD_INT 0
12768: ST_TO_ADDR
// sOil := false ;
12769: LD_ADDR_EXP 82
12773: PUSH
12774: LD_INT 0
12776: ST_TO_ADDR
// sStu := false ;
12777: LD_ADDR_EXP 86
12781: PUSH
12782: LD_INT 0
12784: ST_TO_ADDR
// sBazooka := false ;
12785: LD_ADDR_EXP 89
12789: PUSH
12790: LD_INT 0
12792: ST_TO_ADDR
// sMortar := false ;
12793: LD_ADDR_EXP 90
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// sRanger := false ;
12801: LD_ADDR_EXP 100
12805: PUSH
12806: LD_INT 0
12808: ST_TO_ADDR
// sComputer := false ;
12809: LD_ADDR_EXP 101
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// s30 := false ;
12817: LD_ADDR_EXP 102
12821: PUSH
12822: LD_INT 0
12824: ST_TO_ADDR
// s60 := false ;
12825: LD_ADDR_EXP 103
12829: PUSH
12830: LD_INT 0
12832: ST_TO_ADDR
// end ;
12833: LD_VAR 0 1
12837: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12838: LD_INT 0
12840: PPUSH
12841: PPUSH
12842: PPUSH
12843: PPUSH
12844: PPUSH
12845: PPUSH
12846: PPUSH
// result := [ ] ;
12847: LD_ADDR_VAR 0 2
12851: PUSH
12852: EMPTY
12853: ST_TO_ADDR
// if campaign_id = 1 then
12854: LD_OWVAR 69
12858: PUSH
12859: LD_INT 1
12861: EQUAL
12862: IFFALSE 16028
// begin case mission_number of 1 :
12864: LD_OWVAR 70
12868: PUSH
12869: LD_INT 1
12871: DOUBLE
12872: EQUAL
12873: IFTRUE 12877
12875: GO 12953
12877: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12878: LD_ADDR_VAR 0 2
12882: PUSH
12883: LD_INT 2
12885: PUSH
12886: LD_INT 4
12888: PUSH
12889: LD_INT 11
12891: PUSH
12892: LD_INT 12
12894: PUSH
12895: LD_INT 15
12897: PUSH
12898: LD_INT 16
12900: PUSH
12901: LD_INT 22
12903: PUSH
12904: LD_INT 23
12906: PUSH
12907: LD_INT 26
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: PUSH
12921: LD_INT 101
12923: PUSH
12924: LD_INT 102
12926: PUSH
12927: LD_INT 106
12929: PUSH
12930: LD_INT 116
12932: PUSH
12933: LD_INT 117
12935: PUSH
12936: LD_INT 118
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: ST_TO_ADDR
12951: GO 16026
12953: LD_INT 2
12955: DOUBLE
12956: EQUAL
12957: IFTRUE 12961
12959: GO 13045
12961: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12962: LD_ADDR_VAR 0 2
12966: PUSH
12967: LD_INT 2
12969: PUSH
12970: LD_INT 4
12972: PUSH
12973: LD_INT 11
12975: PUSH
12976: LD_INT 12
12978: PUSH
12979: LD_INT 15
12981: PUSH
12982: LD_INT 16
12984: PUSH
12985: LD_INT 22
12987: PUSH
12988: LD_INT 23
12990: PUSH
12991: LD_INT 26
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 101
13007: PUSH
13008: LD_INT 102
13010: PUSH
13011: LD_INT 105
13013: PUSH
13014: LD_INT 106
13016: PUSH
13017: LD_INT 108
13019: PUSH
13020: LD_INT 116
13022: PUSH
13023: LD_INT 117
13025: PUSH
13026: LD_INT 118
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: ST_TO_ADDR
13043: GO 16026
13045: LD_INT 3
13047: DOUBLE
13048: EQUAL
13049: IFTRUE 13053
13051: GO 13141
13053: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13054: LD_ADDR_VAR 0 2
13058: PUSH
13059: LD_INT 2
13061: PUSH
13062: LD_INT 4
13064: PUSH
13065: LD_INT 5
13067: PUSH
13068: LD_INT 11
13070: PUSH
13071: LD_INT 12
13073: PUSH
13074: LD_INT 15
13076: PUSH
13077: LD_INT 16
13079: PUSH
13080: LD_INT 22
13082: PUSH
13083: LD_INT 26
13085: PUSH
13086: LD_INT 36
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: PUSH
13101: LD_INT 101
13103: PUSH
13104: LD_INT 102
13106: PUSH
13107: LD_INT 105
13109: PUSH
13110: LD_INT 106
13112: PUSH
13113: LD_INT 108
13115: PUSH
13116: LD_INT 116
13118: PUSH
13119: LD_INT 117
13121: PUSH
13122: LD_INT 118
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: ST_TO_ADDR
13139: GO 16026
13141: LD_INT 4
13143: DOUBLE
13144: EQUAL
13145: IFTRUE 13149
13147: GO 13245
13149: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13150: LD_ADDR_VAR 0 2
13154: PUSH
13155: LD_INT 2
13157: PUSH
13158: LD_INT 4
13160: PUSH
13161: LD_INT 5
13163: PUSH
13164: LD_INT 8
13166: PUSH
13167: LD_INT 11
13169: PUSH
13170: LD_INT 12
13172: PUSH
13173: LD_INT 15
13175: PUSH
13176: LD_INT 16
13178: PUSH
13179: LD_INT 22
13181: PUSH
13182: LD_INT 23
13184: PUSH
13185: LD_INT 26
13187: PUSH
13188: LD_INT 36
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: PUSH
13205: LD_INT 101
13207: PUSH
13208: LD_INT 102
13210: PUSH
13211: LD_INT 105
13213: PUSH
13214: LD_INT 106
13216: PUSH
13217: LD_INT 108
13219: PUSH
13220: LD_INT 116
13222: PUSH
13223: LD_INT 117
13225: PUSH
13226: LD_INT 118
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: ST_TO_ADDR
13243: GO 16026
13245: LD_INT 5
13247: DOUBLE
13248: EQUAL
13249: IFTRUE 13253
13251: GO 13365
13253: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13254: LD_ADDR_VAR 0 2
13258: PUSH
13259: LD_INT 2
13261: PUSH
13262: LD_INT 4
13264: PUSH
13265: LD_INT 5
13267: PUSH
13268: LD_INT 6
13270: PUSH
13271: LD_INT 8
13273: PUSH
13274: LD_INT 11
13276: PUSH
13277: LD_INT 12
13279: PUSH
13280: LD_INT 15
13282: PUSH
13283: LD_INT 16
13285: PUSH
13286: LD_INT 22
13288: PUSH
13289: LD_INT 23
13291: PUSH
13292: LD_INT 25
13294: PUSH
13295: LD_INT 26
13297: PUSH
13298: LD_INT 36
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: PUSH
13317: LD_INT 101
13319: PUSH
13320: LD_INT 102
13322: PUSH
13323: LD_INT 105
13325: PUSH
13326: LD_INT 106
13328: PUSH
13329: LD_INT 108
13331: PUSH
13332: LD_INT 109
13334: PUSH
13335: LD_INT 112
13337: PUSH
13338: LD_INT 116
13340: PUSH
13341: LD_INT 117
13343: PUSH
13344: LD_INT 118
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: ST_TO_ADDR
13363: GO 16026
13365: LD_INT 6
13367: DOUBLE
13368: EQUAL
13369: IFTRUE 13373
13371: GO 13505
13373: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13374: LD_ADDR_VAR 0 2
13378: PUSH
13379: LD_INT 2
13381: PUSH
13382: LD_INT 4
13384: PUSH
13385: LD_INT 5
13387: PUSH
13388: LD_INT 6
13390: PUSH
13391: LD_INT 8
13393: PUSH
13394: LD_INT 11
13396: PUSH
13397: LD_INT 12
13399: PUSH
13400: LD_INT 15
13402: PUSH
13403: LD_INT 16
13405: PUSH
13406: LD_INT 20
13408: PUSH
13409: LD_INT 21
13411: PUSH
13412: LD_INT 22
13414: PUSH
13415: LD_INT 23
13417: PUSH
13418: LD_INT 25
13420: PUSH
13421: LD_INT 26
13423: PUSH
13424: LD_INT 30
13426: PUSH
13427: LD_INT 31
13429: PUSH
13430: LD_INT 32
13432: PUSH
13433: LD_INT 36
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: PUSH
13457: LD_INT 101
13459: PUSH
13460: LD_INT 102
13462: PUSH
13463: LD_INT 105
13465: PUSH
13466: LD_INT 106
13468: PUSH
13469: LD_INT 108
13471: PUSH
13472: LD_INT 109
13474: PUSH
13475: LD_INT 112
13477: PUSH
13478: LD_INT 116
13480: PUSH
13481: LD_INT 117
13483: PUSH
13484: LD_INT 118
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: ST_TO_ADDR
13503: GO 16026
13505: LD_INT 7
13507: DOUBLE
13508: EQUAL
13509: IFTRUE 13513
13511: GO 13625
13513: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13514: LD_ADDR_VAR 0 2
13518: PUSH
13519: LD_INT 2
13521: PUSH
13522: LD_INT 4
13524: PUSH
13525: LD_INT 5
13527: PUSH
13528: LD_INT 7
13530: PUSH
13531: LD_INT 11
13533: PUSH
13534: LD_INT 12
13536: PUSH
13537: LD_INT 15
13539: PUSH
13540: LD_INT 16
13542: PUSH
13543: LD_INT 20
13545: PUSH
13546: LD_INT 21
13548: PUSH
13549: LD_INT 22
13551: PUSH
13552: LD_INT 23
13554: PUSH
13555: LD_INT 25
13557: PUSH
13558: LD_INT 26
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: PUSH
13577: LD_INT 101
13579: PUSH
13580: LD_INT 102
13582: PUSH
13583: LD_INT 103
13585: PUSH
13586: LD_INT 105
13588: PUSH
13589: LD_INT 106
13591: PUSH
13592: LD_INT 108
13594: PUSH
13595: LD_INT 112
13597: PUSH
13598: LD_INT 116
13600: PUSH
13601: LD_INT 117
13603: PUSH
13604: LD_INT 118
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: ST_TO_ADDR
13623: GO 16026
13625: LD_INT 8
13627: DOUBLE
13628: EQUAL
13629: IFTRUE 13633
13631: GO 13773
13633: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13634: LD_ADDR_VAR 0 2
13638: PUSH
13639: LD_INT 2
13641: PUSH
13642: LD_INT 4
13644: PUSH
13645: LD_INT 5
13647: PUSH
13648: LD_INT 6
13650: PUSH
13651: LD_INT 7
13653: PUSH
13654: LD_INT 8
13656: PUSH
13657: LD_INT 11
13659: PUSH
13660: LD_INT 12
13662: PUSH
13663: LD_INT 15
13665: PUSH
13666: LD_INT 16
13668: PUSH
13669: LD_INT 20
13671: PUSH
13672: LD_INT 21
13674: PUSH
13675: LD_INT 22
13677: PUSH
13678: LD_INT 23
13680: PUSH
13681: LD_INT 25
13683: PUSH
13684: LD_INT 26
13686: PUSH
13687: LD_INT 30
13689: PUSH
13690: LD_INT 31
13692: PUSH
13693: LD_INT 32
13695: PUSH
13696: LD_INT 36
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 101
13723: PUSH
13724: LD_INT 102
13726: PUSH
13727: LD_INT 103
13729: PUSH
13730: LD_INT 105
13732: PUSH
13733: LD_INT 106
13735: PUSH
13736: LD_INT 108
13738: PUSH
13739: LD_INT 109
13741: PUSH
13742: LD_INT 112
13744: PUSH
13745: LD_INT 116
13747: PUSH
13748: LD_INT 117
13750: PUSH
13751: LD_INT 118
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: ST_TO_ADDR
13771: GO 16026
13773: LD_INT 9
13775: DOUBLE
13776: EQUAL
13777: IFTRUE 13781
13779: GO 13929
13781: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13782: LD_ADDR_VAR 0 2
13786: PUSH
13787: LD_INT 2
13789: PUSH
13790: LD_INT 4
13792: PUSH
13793: LD_INT 5
13795: PUSH
13796: LD_INT 6
13798: PUSH
13799: LD_INT 7
13801: PUSH
13802: LD_INT 8
13804: PUSH
13805: LD_INT 11
13807: PUSH
13808: LD_INT 12
13810: PUSH
13811: LD_INT 15
13813: PUSH
13814: LD_INT 16
13816: PUSH
13817: LD_INT 20
13819: PUSH
13820: LD_INT 21
13822: PUSH
13823: LD_INT 22
13825: PUSH
13826: LD_INT 23
13828: PUSH
13829: LD_INT 25
13831: PUSH
13832: LD_INT 26
13834: PUSH
13835: LD_INT 28
13837: PUSH
13838: LD_INT 30
13840: PUSH
13841: LD_INT 31
13843: PUSH
13844: LD_INT 32
13846: PUSH
13847: LD_INT 36
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: PUSH
13873: LD_INT 101
13875: PUSH
13876: LD_INT 102
13878: PUSH
13879: LD_INT 103
13881: PUSH
13882: LD_INT 105
13884: PUSH
13885: LD_INT 106
13887: PUSH
13888: LD_INT 108
13890: PUSH
13891: LD_INT 109
13893: PUSH
13894: LD_INT 112
13896: PUSH
13897: LD_INT 114
13899: PUSH
13900: LD_INT 116
13902: PUSH
13903: LD_INT 117
13905: PUSH
13906: LD_INT 118
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: ST_TO_ADDR
13927: GO 16026
13929: LD_INT 10
13931: DOUBLE
13932: EQUAL
13933: IFTRUE 13937
13935: GO 14133
13937: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13938: LD_ADDR_VAR 0 2
13942: PUSH
13943: LD_INT 2
13945: PUSH
13946: LD_INT 4
13948: PUSH
13949: LD_INT 5
13951: PUSH
13952: LD_INT 6
13954: PUSH
13955: LD_INT 7
13957: PUSH
13958: LD_INT 8
13960: PUSH
13961: LD_INT 9
13963: PUSH
13964: LD_INT 10
13966: PUSH
13967: LD_INT 11
13969: PUSH
13970: LD_INT 12
13972: PUSH
13973: LD_INT 13
13975: PUSH
13976: LD_INT 14
13978: PUSH
13979: LD_INT 15
13981: PUSH
13982: LD_INT 16
13984: PUSH
13985: LD_INT 17
13987: PUSH
13988: LD_INT 18
13990: PUSH
13991: LD_INT 19
13993: PUSH
13994: LD_INT 20
13996: PUSH
13997: LD_INT 21
13999: PUSH
14000: LD_INT 22
14002: PUSH
14003: LD_INT 23
14005: PUSH
14006: LD_INT 24
14008: PUSH
14009: LD_INT 25
14011: PUSH
14012: LD_INT 26
14014: PUSH
14015: LD_INT 28
14017: PUSH
14018: LD_INT 30
14020: PUSH
14021: LD_INT 31
14023: PUSH
14024: LD_INT 32
14026: PUSH
14027: LD_INT 36
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 101
14063: PUSH
14064: LD_INT 102
14066: PUSH
14067: LD_INT 103
14069: PUSH
14070: LD_INT 104
14072: PUSH
14073: LD_INT 105
14075: PUSH
14076: LD_INT 106
14078: PUSH
14079: LD_INT 107
14081: PUSH
14082: LD_INT 108
14084: PUSH
14085: LD_INT 109
14087: PUSH
14088: LD_INT 110
14090: PUSH
14091: LD_INT 111
14093: PUSH
14094: LD_INT 112
14096: PUSH
14097: LD_INT 114
14099: PUSH
14100: LD_INT 116
14102: PUSH
14103: LD_INT 117
14105: PUSH
14106: LD_INT 118
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: ST_TO_ADDR
14131: GO 16026
14133: LD_INT 11
14135: DOUBLE
14136: EQUAL
14137: IFTRUE 14141
14139: GO 14345
14141: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14142: LD_ADDR_VAR 0 2
14146: PUSH
14147: LD_INT 2
14149: PUSH
14150: LD_INT 3
14152: PUSH
14153: LD_INT 4
14155: PUSH
14156: LD_INT 5
14158: PUSH
14159: LD_INT 6
14161: PUSH
14162: LD_INT 7
14164: PUSH
14165: LD_INT 8
14167: PUSH
14168: LD_INT 9
14170: PUSH
14171: LD_INT 10
14173: PUSH
14174: LD_INT 11
14176: PUSH
14177: LD_INT 12
14179: PUSH
14180: LD_INT 13
14182: PUSH
14183: LD_INT 14
14185: PUSH
14186: LD_INT 15
14188: PUSH
14189: LD_INT 16
14191: PUSH
14192: LD_INT 17
14194: PUSH
14195: LD_INT 18
14197: PUSH
14198: LD_INT 19
14200: PUSH
14201: LD_INT 20
14203: PUSH
14204: LD_INT 21
14206: PUSH
14207: LD_INT 22
14209: PUSH
14210: LD_INT 23
14212: PUSH
14213: LD_INT 24
14215: PUSH
14216: LD_INT 25
14218: PUSH
14219: LD_INT 26
14221: PUSH
14222: LD_INT 28
14224: PUSH
14225: LD_INT 30
14227: PUSH
14228: LD_INT 31
14230: PUSH
14231: LD_INT 32
14233: PUSH
14234: LD_INT 34
14236: PUSH
14237: LD_INT 36
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT 101
14275: PUSH
14276: LD_INT 102
14278: PUSH
14279: LD_INT 103
14281: PUSH
14282: LD_INT 104
14284: PUSH
14285: LD_INT 105
14287: PUSH
14288: LD_INT 106
14290: PUSH
14291: LD_INT 107
14293: PUSH
14294: LD_INT 108
14296: PUSH
14297: LD_INT 109
14299: PUSH
14300: LD_INT 110
14302: PUSH
14303: LD_INT 111
14305: PUSH
14306: LD_INT 112
14308: PUSH
14309: LD_INT 114
14311: PUSH
14312: LD_INT 116
14314: PUSH
14315: LD_INT 117
14317: PUSH
14318: LD_INT 118
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: ST_TO_ADDR
14343: GO 16026
14345: LD_INT 12
14347: DOUBLE
14348: EQUAL
14349: IFTRUE 14353
14351: GO 14573
14353: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14354: LD_ADDR_VAR 0 2
14358: PUSH
14359: LD_INT 1
14361: PUSH
14362: LD_INT 2
14364: PUSH
14365: LD_INT 3
14367: PUSH
14368: LD_INT 4
14370: PUSH
14371: LD_INT 5
14373: PUSH
14374: LD_INT 6
14376: PUSH
14377: LD_INT 7
14379: PUSH
14380: LD_INT 8
14382: PUSH
14383: LD_INT 9
14385: PUSH
14386: LD_INT 10
14388: PUSH
14389: LD_INT 11
14391: PUSH
14392: LD_INT 12
14394: PUSH
14395: LD_INT 13
14397: PUSH
14398: LD_INT 14
14400: PUSH
14401: LD_INT 15
14403: PUSH
14404: LD_INT 16
14406: PUSH
14407: LD_INT 17
14409: PUSH
14410: LD_INT 18
14412: PUSH
14413: LD_INT 19
14415: PUSH
14416: LD_INT 20
14418: PUSH
14419: LD_INT 21
14421: PUSH
14422: LD_INT 22
14424: PUSH
14425: LD_INT 23
14427: PUSH
14428: LD_INT 24
14430: PUSH
14431: LD_INT 25
14433: PUSH
14434: LD_INT 26
14436: PUSH
14437: LD_INT 27
14439: PUSH
14440: LD_INT 28
14442: PUSH
14443: LD_INT 30
14445: PUSH
14446: LD_INT 31
14448: PUSH
14449: LD_INT 32
14451: PUSH
14452: LD_INT 33
14454: PUSH
14455: LD_INT 34
14457: PUSH
14458: LD_INT 36
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: PUSH
14497: LD_INT 101
14499: PUSH
14500: LD_INT 102
14502: PUSH
14503: LD_INT 103
14505: PUSH
14506: LD_INT 104
14508: PUSH
14509: LD_INT 105
14511: PUSH
14512: LD_INT 106
14514: PUSH
14515: LD_INT 107
14517: PUSH
14518: LD_INT 108
14520: PUSH
14521: LD_INT 109
14523: PUSH
14524: LD_INT 110
14526: PUSH
14527: LD_INT 111
14529: PUSH
14530: LD_INT 112
14532: PUSH
14533: LD_INT 113
14535: PUSH
14536: LD_INT 114
14538: PUSH
14539: LD_INT 116
14541: PUSH
14542: LD_INT 117
14544: PUSH
14545: LD_INT 118
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: ST_TO_ADDR
14571: GO 16026
14573: LD_INT 13
14575: DOUBLE
14576: EQUAL
14577: IFTRUE 14581
14579: GO 14789
14581: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14582: LD_ADDR_VAR 0 2
14586: PUSH
14587: LD_INT 1
14589: PUSH
14590: LD_INT 2
14592: PUSH
14593: LD_INT 3
14595: PUSH
14596: LD_INT 4
14598: PUSH
14599: LD_INT 5
14601: PUSH
14602: LD_INT 8
14604: PUSH
14605: LD_INT 9
14607: PUSH
14608: LD_INT 10
14610: PUSH
14611: LD_INT 11
14613: PUSH
14614: LD_INT 12
14616: PUSH
14617: LD_INT 14
14619: PUSH
14620: LD_INT 15
14622: PUSH
14623: LD_INT 16
14625: PUSH
14626: LD_INT 17
14628: PUSH
14629: LD_INT 18
14631: PUSH
14632: LD_INT 19
14634: PUSH
14635: LD_INT 20
14637: PUSH
14638: LD_INT 21
14640: PUSH
14641: LD_INT 22
14643: PUSH
14644: LD_INT 23
14646: PUSH
14647: LD_INT 24
14649: PUSH
14650: LD_INT 25
14652: PUSH
14653: LD_INT 26
14655: PUSH
14656: LD_INT 27
14658: PUSH
14659: LD_INT 28
14661: PUSH
14662: LD_INT 30
14664: PUSH
14665: LD_INT 31
14667: PUSH
14668: LD_INT 32
14670: PUSH
14671: LD_INT 33
14673: PUSH
14674: LD_INT 34
14676: PUSH
14677: LD_INT 36
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: PUSH
14713: LD_INT 101
14715: PUSH
14716: LD_INT 102
14718: PUSH
14719: LD_INT 103
14721: PUSH
14722: LD_INT 104
14724: PUSH
14725: LD_INT 105
14727: PUSH
14728: LD_INT 106
14730: PUSH
14731: LD_INT 107
14733: PUSH
14734: LD_INT 108
14736: PUSH
14737: LD_INT 109
14739: PUSH
14740: LD_INT 110
14742: PUSH
14743: LD_INT 111
14745: PUSH
14746: LD_INT 112
14748: PUSH
14749: LD_INT 113
14751: PUSH
14752: LD_INT 114
14754: PUSH
14755: LD_INT 116
14757: PUSH
14758: LD_INT 117
14760: PUSH
14761: LD_INT 118
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: ST_TO_ADDR
14787: GO 16026
14789: LD_INT 14
14791: DOUBLE
14792: EQUAL
14793: IFTRUE 14797
14795: GO 15021
14797: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14798: LD_ADDR_VAR 0 2
14802: PUSH
14803: LD_INT 1
14805: PUSH
14806: LD_INT 2
14808: PUSH
14809: LD_INT 3
14811: PUSH
14812: LD_INT 4
14814: PUSH
14815: LD_INT 5
14817: PUSH
14818: LD_INT 6
14820: PUSH
14821: LD_INT 7
14823: PUSH
14824: LD_INT 8
14826: PUSH
14827: LD_INT 9
14829: PUSH
14830: LD_INT 10
14832: PUSH
14833: LD_INT 11
14835: PUSH
14836: LD_INT 12
14838: PUSH
14839: LD_INT 13
14841: PUSH
14842: LD_INT 14
14844: PUSH
14845: LD_INT 15
14847: PUSH
14848: LD_INT 16
14850: PUSH
14851: LD_INT 17
14853: PUSH
14854: LD_INT 18
14856: PUSH
14857: LD_INT 19
14859: PUSH
14860: LD_INT 20
14862: PUSH
14863: LD_INT 21
14865: PUSH
14866: LD_INT 22
14868: PUSH
14869: LD_INT 23
14871: PUSH
14872: LD_INT 24
14874: PUSH
14875: LD_INT 25
14877: PUSH
14878: LD_INT 26
14880: PUSH
14881: LD_INT 27
14883: PUSH
14884: LD_INT 28
14886: PUSH
14887: LD_INT 29
14889: PUSH
14890: LD_INT 30
14892: PUSH
14893: LD_INT 31
14895: PUSH
14896: LD_INT 32
14898: PUSH
14899: LD_INT 33
14901: PUSH
14902: LD_INT 34
14904: PUSH
14905: LD_INT 36
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 101
14947: PUSH
14948: LD_INT 102
14950: PUSH
14951: LD_INT 103
14953: PUSH
14954: LD_INT 104
14956: PUSH
14957: LD_INT 105
14959: PUSH
14960: LD_INT 106
14962: PUSH
14963: LD_INT 107
14965: PUSH
14966: LD_INT 108
14968: PUSH
14969: LD_INT 109
14971: PUSH
14972: LD_INT 110
14974: PUSH
14975: LD_INT 111
14977: PUSH
14978: LD_INT 112
14980: PUSH
14981: LD_INT 113
14983: PUSH
14984: LD_INT 114
14986: PUSH
14987: LD_INT 116
14989: PUSH
14990: LD_INT 117
14992: PUSH
14993: LD_INT 118
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: ST_TO_ADDR
15019: GO 16026
15021: LD_INT 15
15023: DOUBLE
15024: EQUAL
15025: IFTRUE 15029
15027: GO 15253
15029: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15030: LD_ADDR_VAR 0 2
15034: PUSH
15035: LD_INT 1
15037: PUSH
15038: LD_INT 2
15040: PUSH
15041: LD_INT 3
15043: PUSH
15044: LD_INT 4
15046: PUSH
15047: LD_INT 5
15049: PUSH
15050: LD_INT 6
15052: PUSH
15053: LD_INT 7
15055: PUSH
15056: LD_INT 8
15058: PUSH
15059: LD_INT 9
15061: PUSH
15062: LD_INT 10
15064: PUSH
15065: LD_INT 11
15067: PUSH
15068: LD_INT 12
15070: PUSH
15071: LD_INT 13
15073: PUSH
15074: LD_INT 14
15076: PUSH
15077: LD_INT 15
15079: PUSH
15080: LD_INT 16
15082: PUSH
15083: LD_INT 17
15085: PUSH
15086: LD_INT 18
15088: PUSH
15089: LD_INT 19
15091: PUSH
15092: LD_INT 20
15094: PUSH
15095: LD_INT 21
15097: PUSH
15098: LD_INT 22
15100: PUSH
15101: LD_INT 23
15103: PUSH
15104: LD_INT 24
15106: PUSH
15107: LD_INT 25
15109: PUSH
15110: LD_INT 26
15112: PUSH
15113: LD_INT 27
15115: PUSH
15116: LD_INT 28
15118: PUSH
15119: LD_INT 29
15121: PUSH
15122: LD_INT 30
15124: PUSH
15125: LD_INT 31
15127: PUSH
15128: LD_INT 32
15130: PUSH
15131: LD_INT 33
15133: PUSH
15134: LD_INT 34
15136: PUSH
15137: LD_INT 36
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 101
15179: PUSH
15180: LD_INT 102
15182: PUSH
15183: LD_INT 103
15185: PUSH
15186: LD_INT 104
15188: PUSH
15189: LD_INT 105
15191: PUSH
15192: LD_INT 106
15194: PUSH
15195: LD_INT 107
15197: PUSH
15198: LD_INT 108
15200: PUSH
15201: LD_INT 109
15203: PUSH
15204: LD_INT 110
15206: PUSH
15207: LD_INT 111
15209: PUSH
15210: LD_INT 112
15212: PUSH
15213: LD_INT 113
15215: PUSH
15216: LD_INT 114
15218: PUSH
15219: LD_INT 116
15221: PUSH
15222: LD_INT 117
15224: PUSH
15225: LD_INT 118
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: ST_TO_ADDR
15251: GO 16026
15253: LD_INT 16
15255: DOUBLE
15256: EQUAL
15257: IFTRUE 15261
15259: GO 15397
15261: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15262: LD_ADDR_VAR 0 2
15266: PUSH
15267: LD_INT 2
15269: PUSH
15270: LD_INT 4
15272: PUSH
15273: LD_INT 5
15275: PUSH
15276: LD_INT 7
15278: PUSH
15279: LD_INT 11
15281: PUSH
15282: LD_INT 12
15284: PUSH
15285: LD_INT 15
15287: PUSH
15288: LD_INT 16
15290: PUSH
15291: LD_INT 20
15293: PUSH
15294: LD_INT 21
15296: PUSH
15297: LD_INT 22
15299: PUSH
15300: LD_INT 23
15302: PUSH
15303: LD_INT 25
15305: PUSH
15306: LD_INT 26
15308: PUSH
15309: LD_INT 30
15311: PUSH
15312: LD_INT 31
15314: PUSH
15315: LD_INT 32
15317: PUSH
15318: LD_INT 33
15320: PUSH
15321: LD_INT 34
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: PUSH
15345: LD_INT 101
15347: PUSH
15348: LD_INT 102
15350: PUSH
15351: LD_INT 103
15353: PUSH
15354: LD_INT 106
15356: PUSH
15357: LD_INT 108
15359: PUSH
15360: LD_INT 112
15362: PUSH
15363: LD_INT 113
15365: PUSH
15366: LD_INT 114
15368: PUSH
15369: LD_INT 116
15371: PUSH
15372: LD_INT 117
15374: PUSH
15375: LD_INT 118
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: ST_TO_ADDR
15395: GO 16026
15397: LD_INT 17
15399: DOUBLE
15400: EQUAL
15401: IFTRUE 15405
15403: GO 15629
15405: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15406: LD_ADDR_VAR 0 2
15410: PUSH
15411: LD_INT 1
15413: PUSH
15414: LD_INT 2
15416: PUSH
15417: LD_INT 3
15419: PUSH
15420: LD_INT 4
15422: PUSH
15423: LD_INT 5
15425: PUSH
15426: LD_INT 6
15428: PUSH
15429: LD_INT 7
15431: PUSH
15432: LD_INT 8
15434: PUSH
15435: LD_INT 9
15437: PUSH
15438: LD_INT 10
15440: PUSH
15441: LD_INT 11
15443: PUSH
15444: LD_INT 12
15446: PUSH
15447: LD_INT 13
15449: PUSH
15450: LD_INT 14
15452: PUSH
15453: LD_INT 15
15455: PUSH
15456: LD_INT 16
15458: PUSH
15459: LD_INT 17
15461: PUSH
15462: LD_INT 18
15464: PUSH
15465: LD_INT 19
15467: PUSH
15468: LD_INT 20
15470: PUSH
15471: LD_INT 21
15473: PUSH
15474: LD_INT 22
15476: PUSH
15477: LD_INT 23
15479: PUSH
15480: LD_INT 24
15482: PUSH
15483: LD_INT 25
15485: PUSH
15486: LD_INT 26
15488: PUSH
15489: LD_INT 27
15491: PUSH
15492: LD_INT 28
15494: PUSH
15495: LD_INT 29
15497: PUSH
15498: LD_INT 30
15500: PUSH
15501: LD_INT 31
15503: PUSH
15504: LD_INT 32
15506: PUSH
15507: LD_INT 33
15509: PUSH
15510: LD_INT 34
15512: PUSH
15513: LD_INT 36
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: PUSH
15553: LD_INT 101
15555: PUSH
15556: LD_INT 102
15558: PUSH
15559: LD_INT 103
15561: PUSH
15562: LD_INT 104
15564: PUSH
15565: LD_INT 105
15567: PUSH
15568: LD_INT 106
15570: PUSH
15571: LD_INT 107
15573: PUSH
15574: LD_INT 108
15576: PUSH
15577: LD_INT 109
15579: PUSH
15580: LD_INT 110
15582: PUSH
15583: LD_INT 111
15585: PUSH
15586: LD_INT 112
15588: PUSH
15589: LD_INT 113
15591: PUSH
15592: LD_INT 114
15594: PUSH
15595: LD_INT 116
15597: PUSH
15598: LD_INT 117
15600: PUSH
15601: LD_INT 118
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: ST_TO_ADDR
15627: GO 16026
15629: LD_INT 18
15631: DOUBLE
15632: EQUAL
15633: IFTRUE 15637
15635: GO 15785
15637: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15638: LD_ADDR_VAR 0 2
15642: PUSH
15643: LD_INT 2
15645: PUSH
15646: LD_INT 4
15648: PUSH
15649: LD_INT 5
15651: PUSH
15652: LD_INT 7
15654: PUSH
15655: LD_INT 11
15657: PUSH
15658: LD_INT 12
15660: PUSH
15661: LD_INT 15
15663: PUSH
15664: LD_INT 16
15666: PUSH
15667: LD_INT 20
15669: PUSH
15670: LD_INT 21
15672: PUSH
15673: LD_INT 22
15675: PUSH
15676: LD_INT 23
15678: PUSH
15679: LD_INT 25
15681: PUSH
15682: LD_INT 26
15684: PUSH
15685: LD_INT 30
15687: PUSH
15688: LD_INT 31
15690: PUSH
15691: LD_INT 32
15693: PUSH
15694: LD_INT 33
15696: PUSH
15697: LD_INT 34
15699: PUSH
15700: LD_INT 35
15702: PUSH
15703: LD_INT 36
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: PUSH
15729: LD_INT 101
15731: PUSH
15732: LD_INT 102
15734: PUSH
15735: LD_INT 103
15737: PUSH
15738: LD_INT 106
15740: PUSH
15741: LD_INT 108
15743: PUSH
15744: LD_INT 112
15746: PUSH
15747: LD_INT 113
15749: PUSH
15750: LD_INT 114
15752: PUSH
15753: LD_INT 115
15755: PUSH
15756: LD_INT 116
15758: PUSH
15759: LD_INT 117
15761: PUSH
15762: LD_INT 118
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: ST_TO_ADDR
15783: GO 16026
15785: LD_INT 19
15787: DOUBLE
15788: EQUAL
15789: IFTRUE 15793
15791: GO 16025
15793: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15794: LD_ADDR_VAR 0 2
15798: PUSH
15799: LD_INT 1
15801: PUSH
15802: LD_INT 2
15804: PUSH
15805: LD_INT 3
15807: PUSH
15808: LD_INT 4
15810: PUSH
15811: LD_INT 5
15813: PUSH
15814: LD_INT 6
15816: PUSH
15817: LD_INT 7
15819: PUSH
15820: LD_INT 8
15822: PUSH
15823: LD_INT 9
15825: PUSH
15826: LD_INT 10
15828: PUSH
15829: LD_INT 11
15831: PUSH
15832: LD_INT 12
15834: PUSH
15835: LD_INT 13
15837: PUSH
15838: LD_INT 14
15840: PUSH
15841: LD_INT 15
15843: PUSH
15844: LD_INT 16
15846: PUSH
15847: LD_INT 17
15849: PUSH
15850: LD_INT 18
15852: PUSH
15853: LD_INT 19
15855: PUSH
15856: LD_INT 20
15858: PUSH
15859: LD_INT 21
15861: PUSH
15862: LD_INT 22
15864: PUSH
15865: LD_INT 23
15867: PUSH
15868: LD_INT 24
15870: PUSH
15871: LD_INT 25
15873: PUSH
15874: LD_INT 26
15876: PUSH
15877: LD_INT 27
15879: PUSH
15880: LD_INT 28
15882: PUSH
15883: LD_INT 29
15885: PUSH
15886: LD_INT 30
15888: PUSH
15889: LD_INT 31
15891: PUSH
15892: LD_INT 32
15894: PUSH
15895: LD_INT 33
15897: PUSH
15898: LD_INT 34
15900: PUSH
15901: LD_INT 35
15903: PUSH
15904: LD_INT 36
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: PUSH
15945: LD_INT 101
15947: PUSH
15948: LD_INT 102
15950: PUSH
15951: LD_INT 103
15953: PUSH
15954: LD_INT 104
15956: PUSH
15957: LD_INT 105
15959: PUSH
15960: LD_INT 106
15962: PUSH
15963: LD_INT 107
15965: PUSH
15966: LD_INT 108
15968: PUSH
15969: LD_INT 109
15971: PUSH
15972: LD_INT 110
15974: PUSH
15975: LD_INT 111
15977: PUSH
15978: LD_INT 112
15980: PUSH
15981: LD_INT 113
15983: PUSH
15984: LD_INT 114
15986: PUSH
15987: LD_INT 115
15989: PUSH
15990: LD_INT 116
15992: PUSH
15993: LD_INT 117
15995: PUSH
15996: LD_INT 118
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: ST_TO_ADDR
16023: GO 16026
16025: POP
// end else
16026: GO 16257
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16028: LD_ADDR_VAR 0 2
16032: PUSH
16033: LD_INT 1
16035: PUSH
16036: LD_INT 2
16038: PUSH
16039: LD_INT 3
16041: PUSH
16042: LD_INT 4
16044: PUSH
16045: LD_INT 5
16047: PUSH
16048: LD_INT 6
16050: PUSH
16051: LD_INT 7
16053: PUSH
16054: LD_INT 8
16056: PUSH
16057: LD_INT 9
16059: PUSH
16060: LD_INT 10
16062: PUSH
16063: LD_INT 11
16065: PUSH
16066: LD_INT 12
16068: PUSH
16069: LD_INT 13
16071: PUSH
16072: LD_INT 14
16074: PUSH
16075: LD_INT 15
16077: PUSH
16078: LD_INT 16
16080: PUSH
16081: LD_INT 17
16083: PUSH
16084: LD_INT 18
16086: PUSH
16087: LD_INT 19
16089: PUSH
16090: LD_INT 20
16092: PUSH
16093: LD_INT 21
16095: PUSH
16096: LD_INT 22
16098: PUSH
16099: LD_INT 23
16101: PUSH
16102: LD_INT 24
16104: PUSH
16105: LD_INT 25
16107: PUSH
16108: LD_INT 26
16110: PUSH
16111: LD_INT 27
16113: PUSH
16114: LD_INT 28
16116: PUSH
16117: LD_INT 29
16119: PUSH
16120: LD_INT 30
16122: PUSH
16123: LD_INT 31
16125: PUSH
16126: LD_INT 32
16128: PUSH
16129: LD_INT 33
16131: PUSH
16132: LD_INT 34
16134: PUSH
16135: LD_INT 35
16137: PUSH
16138: LD_INT 36
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 101
16181: PUSH
16182: LD_INT 102
16184: PUSH
16185: LD_INT 103
16187: PUSH
16188: LD_INT 104
16190: PUSH
16191: LD_INT 105
16193: PUSH
16194: LD_INT 106
16196: PUSH
16197: LD_INT 107
16199: PUSH
16200: LD_INT 108
16202: PUSH
16203: LD_INT 109
16205: PUSH
16206: LD_INT 110
16208: PUSH
16209: LD_INT 111
16211: PUSH
16212: LD_INT 112
16214: PUSH
16215: LD_INT 113
16217: PUSH
16218: LD_INT 114
16220: PUSH
16221: LD_INT 115
16223: PUSH
16224: LD_INT 116
16226: PUSH
16227: LD_INT 117
16229: PUSH
16230: LD_INT 118
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: ST_TO_ADDR
// if result then
16257: LD_VAR 0 2
16261: IFFALSE 17047
// begin normal :=  ;
16263: LD_ADDR_VAR 0 5
16267: PUSH
16268: LD_STRING 
16270: ST_TO_ADDR
// hardcore :=  ;
16271: LD_ADDR_VAR 0 6
16275: PUSH
16276: LD_STRING 
16278: ST_TO_ADDR
// active :=  ;
16279: LD_ADDR_VAR 0 7
16283: PUSH
16284: LD_STRING 
16286: ST_TO_ADDR
// for i = 1 to normalCounter do
16287: LD_ADDR_VAR 0 8
16291: PUSH
16292: DOUBLE
16293: LD_INT 1
16295: DEC
16296: ST_TO_ADDR
16297: LD_EXP 48
16301: PUSH
16302: FOR_TO
16303: IFFALSE 16404
// begin tmp := 0 ;
16305: LD_ADDR_VAR 0 3
16309: PUSH
16310: LD_STRING 0
16312: ST_TO_ADDR
// if result [ 1 ] then
16313: LD_VAR 0 2
16317: PUSH
16318: LD_INT 1
16320: ARRAY
16321: IFFALSE 16386
// if result [ 1 ] [ 1 ] = i then
16323: LD_VAR 0 2
16327: PUSH
16328: LD_INT 1
16330: ARRAY
16331: PUSH
16332: LD_INT 1
16334: ARRAY
16335: PUSH
16336: LD_VAR 0 8
16340: EQUAL
16341: IFFALSE 16386
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16343: LD_ADDR_VAR 0 2
16347: PUSH
16348: LD_VAR 0 2
16352: PPUSH
16353: LD_INT 1
16355: PPUSH
16356: LD_VAR 0 2
16360: PUSH
16361: LD_INT 1
16363: ARRAY
16364: PPUSH
16365: LD_INT 1
16367: PPUSH
16368: CALL_OW 3
16372: PPUSH
16373: CALL_OW 1
16377: ST_TO_ADDR
// tmp := 1 ;
16378: LD_ADDR_VAR 0 3
16382: PUSH
16383: LD_STRING 1
16385: ST_TO_ADDR
// end ; normal := normal & tmp ;
16386: LD_ADDR_VAR 0 5
16390: PUSH
16391: LD_VAR 0 5
16395: PUSH
16396: LD_VAR 0 3
16400: STR
16401: ST_TO_ADDR
// end ;
16402: GO 16302
16404: POP
16405: POP
// for i = 1 to hardcoreCounter do
16406: LD_ADDR_VAR 0 8
16410: PUSH
16411: DOUBLE
16412: LD_INT 1
16414: DEC
16415: ST_TO_ADDR
16416: LD_EXP 49
16420: PUSH
16421: FOR_TO
16422: IFFALSE 16527
// begin tmp := 0 ;
16424: LD_ADDR_VAR 0 3
16428: PUSH
16429: LD_STRING 0
16431: ST_TO_ADDR
// if result [ 2 ] then
16432: LD_VAR 0 2
16436: PUSH
16437: LD_INT 2
16439: ARRAY
16440: IFFALSE 16509
// if result [ 2 ] [ 1 ] = 100 + i then
16442: LD_VAR 0 2
16446: PUSH
16447: LD_INT 2
16449: ARRAY
16450: PUSH
16451: LD_INT 1
16453: ARRAY
16454: PUSH
16455: LD_INT 100
16457: PUSH
16458: LD_VAR 0 8
16462: PLUS
16463: EQUAL
16464: IFFALSE 16509
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16466: LD_ADDR_VAR 0 2
16470: PUSH
16471: LD_VAR 0 2
16475: PPUSH
16476: LD_INT 2
16478: PPUSH
16479: LD_VAR 0 2
16483: PUSH
16484: LD_INT 2
16486: ARRAY
16487: PPUSH
16488: LD_INT 1
16490: PPUSH
16491: CALL_OW 3
16495: PPUSH
16496: CALL_OW 1
16500: ST_TO_ADDR
// tmp := 1 ;
16501: LD_ADDR_VAR 0 3
16505: PUSH
16506: LD_STRING 1
16508: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16509: LD_ADDR_VAR 0 6
16513: PUSH
16514: LD_VAR 0 6
16518: PUSH
16519: LD_VAR 0 3
16523: STR
16524: ST_TO_ADDR
// end ;
16525: GO 16421
16527: POP
16528: POP
// if isGameLoad then
16529: LD_VAR 0 1
16533: IFFALSE 17008
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16535: LD_ADDR_VAR 0 4
16539: PUSH
16540: LD_EXP 52
16544: PUSH
16545: LD_EXP 51
16549: PUSH
16550: LD_EXP 53
16554: PUSH
16555: LD_EXP 50
16559: PUSH
16560: LD_EXP 54
16564: PUSH
16565: LD_EXP 55
16569: PUSH
16570: LD_EXP 56
16574: PUSH
16575: LD_EXP 57
16579: PUSH
16580: LD_EXP 58
16584: PUSH
16585: LD_EXP 59
16589: PUSH
16590: LD_EXP 60
16594: PUSH
16595: LD_EXP 61
16599: PUSH
16600: LD_EXP 62
16604: PUSH
16605: LD_EXP 63
16609: PUSH
16610: LD_EXP 71
16614: PUSH
16615: LD_EXP 72
16619: PUSH
16620: LD_EXP 73
16624: PUSH
16625: LD_EXP 74
16629: PUSH
16630: LD_EXP 76
16634: PUSH
16635: LD_EXP 77
16639: PUSH
16640: LD_EXP 78
16644: PUSH
16645: LD_EXP 81
16649: PUSH
16650: LD_EXP 83
16654: PUSH
16655: LD_EXP 84
16659: PUSH
16660: LD_EXP 85
16664: PUSH
16665: LD_EXP 87
16669: PUSH
16670: LD_EXP 88
16674: PUSH
16675: LD_EXP 91
16679: PUSH
16680: LD_EXP 92
16684: PUSH
16685: LD_EXP 93
16689: PUSH
16690: LD_EXP 94
16694: PUSH
16695: LD_EXP 95
16699: PUSH
16700: LD_EXP 96
16704: PUSH
16705: LD_EXP 97
16709: PUSH
16710: LD_EXP 98
16714: PUSH
16715: LD_EXP 99
16719: PUSH
16720: LD_EXP 64
16724: PUSH
16725: LD_EXP 65
16729: PUSH
16730: LD_EXP 68
16734: PUSH
16735: LD_EXP 69
16739: PUSH
16740: LD_EXP 70
16744: PUSH
16745: LD_EXP 66
16749: PUSH
16750: LD_EXP 67
16754: PUSH
16755: LD_EXP 75
16759: PUSH
16760: LD_EXP 79
16764: PUSH
16765: LD_EXP 80
16769: PUSH
16770: LD_EXP 82
16774: PUSH
16775: LD_EXP 86
16779: PUSH
16780: LD_EXP 89
16784: PUSH
16785: LD_EXP 90
16789: PUSH
16790: LD_EXP 100
16794: PUSH
16795: LD_EXP 101
16799: PUSH
16800: LD_EXP 102
16804: PUSH
16805: LD_EXP 103
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: ST_TO_ADDR
// tmp :=  ;
16866: LD_ADDR_VAR 0 3
16870: PUSH
16871: LD_STRING 
16873: ST_TO_ADDR
// for i = 1 to normalCounter do
16874: LD_ADDR_VAR 0 8
16878: PUSH
16879: DOUBLE
16880: LD_INT 1
16882: DEC
16883: ST_TO_ADDR
16884: LD_EXP 48
16888: PUSH
16889: FOR_TO
16890: IFFALSE 16926
// begin if flags [ i ] then
16892: LD_VAR 0 4
16896: PUSH
16897: LD_VAR 0 8
16901: ARRAY
16902: IFFALSE 16924
// tmp := tmp & i & ; ;
16904: LD_ADDR_VAR 0 3
16908: PUSH
16909: LD_VAR 0 3
16913: PUSH
16914: LD_VAR 0 8
16918: STR
16919: PUSH
16920: LD_STRING ;
16922: STR
16923: ST_TO_ADDR
// end ;
16924: GO 16889
16926: POP
16927: POP
// for i = 1 to hardcoreCounter do
16928: LD_ADDR_VAR 0 8
16932: PUSH
16933: DOUBLE
16934: LD_INT 1
16936: DEC
16937: ST_TO_ADDR
16938: LD_EXP 49
16942: PUSH
16943: FOR_TO
16944: IFFALSE 16990
// begin if flags [ normalCounter + i ] then
16946: LD_VAR 0 4
16950: PUSH
16951: LD_EXP 48
16955: PUSH
16956: LD_VAR 0 8
16960: PLUS
16961: ARRAY
16962: IFFALSE 16988
// tmp := tmp & ( 100 + i ) & ; ;
16964: LD_ADDR_VAR 0 3
16968: PUSH
16969: LD_VAR 0 3
16973: PUSH
16974: LD_INT 100
16976: PUSH
16977: LD_VAR 0 8
16981: PLUS
16982: STR
16983: PUSH
16984: LD_STRING ;
16986: STR
16987: ST_TO_ADDR
// end ;
16988: GO 16943
16990: POP
16991: POP
// if tmp then
16992: LD_VAR 0 3
16996: IFFALSE 17008
// active := tmp ;
16998: LD_ADDR_VAR 0 7
17002: PUSH
17003: LD_VAR 0 3
17007: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17008: LD_STRING getStreamItemsFromMission("
17010: PUSH
17011: LD_VAR 0 5
17015: STR
17016: PUSH
17017: LD_STRING ","
17019: STR
17020: PUSH
17021: LD_VAR 0 6
17025: STR
17026: PUSH
17027: LD_STRING ","
17029: STR
17030: PUSH
17031: LD_VAR 0 7
17035: STR
17036: PUSH
17037: LD_STRING ")
17039: STR
17040: PPUSH
17041: CALL_OW 559
// end else
17045: GO 17054
// ToLua ( getStreamItemsFromMission("","","") ) ;
17047: LD_STRING getStreamItemsFromMission("","","")
17049: PPUSH
17050: CALL_OW 559
// end ;
17054: LD_VAR 0 2
17058: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17059: LD_EXP 47
17063: PUSH
17064: LD_EXP 52
17068: AND
17069: IFFALSE 17193
17071: GO 17073
17073: DISABLE
17074: LD_INT 0
17076: PPUSH
17077: PPUSH
// begin enable ;
17078: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17079: LD_ADDR_VAR 0 2
17083: PUSH
17084: LD_INT 22
17086: PUSH
17087: LD_OWVAR 2
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: LD_INT 2
17098: PUSH
17099: LD_INT 34
17101: PUSH
17102: LD_INT 7
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 34
17111: PUSH
17112: LD_INT 45
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 34
17121: PUSH
17122: LD_INT 28
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PUSH
17129: LD_INT 34
17131: PUSH
17132: LD_INT 47
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PPUSH
17150: CALL_OW 69
17154: ST_TO_ADDR
// if not tmp then
17155: LD_VAR 0 2
17159: NOT
17160: IFFALSE 17164
// exit ;
17162: GO 17193
// for i in tmp do
17164: LD_ADDR_VAR 0 1
17168: PUSH
17169: LD_VAR 0 2
17173: PUSH
17174: FOR_IN
17175: IFFALSE 17191
// begin SetLives ( i , 0 ) ;
17177: LD_VAR 0 1
17181: PPUSH
17182: LD_INT 0
17184: PPUSH
17185: CALL_OW 234
// end ;
17189: GO 17174
17191: POP
17192: POP
// end ;
17193: PPOPN 2
17195: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17196: LD_EXP 47
17200: PUSH
17201: LD_EXP 53
17205: AND
17206: IFFALSE 17290
17208: GO 17210
17210: DISABLE
17211: LD_INT 0
17213: PPUSH
17214: PPUSH
// begin enable ;
17215: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17216: LD_ADDR_VAR 0 2
17220: PUSH
17221: LD_INT 22
17223: PUSH
17224: LD_OWVAR 2
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 32
17235: PUSH
17236: LD_INT 3
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PPUSH
17247: CALL_OW 69
17251: ST_TO_ADDR
// if not tmp then
17252: LD_VAR 0 2
17256: NOT
17257: IFFALSE 17261
// exit ;
17259: GO 17290
// for i in tmp do
17261: LD_ADDR_VAR 0 1
17265: PUSH
17266: LD_VAR 0 2
17270: PUSH
17271: FOR_IN
17272: IFFALSE 17288
// begin SetLives ( i , 0 ) ;
17274: LD_VAR 0 1
17278: PPUSH
17279: LD_INT 0
17281: PPUSH
17282: CALL_OW 234
// end ;
17286: GO 17271
17288: POP
17289: POP
// end ;
17290: PPOPN 2
17292: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17293: LD_EXP 47
17297: PUSH
17298: LD_EXP 50
17302: AND
17303: IFFALSE 17396
17305: GO 17307
17307: DISABLE
17308: LD_INT 0
17310: PPUSH
// begin enable ;
17311: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17312: LD_ADDR_VAR 0 1
17316: PUSH
17317: LD_INT 22
17319: PUSH
17320: LD_OWVAR 2
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 2
17331: PUSH
17332: LD_INT 25
17334: PUSH
17335: LD_INT 5
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 25
17344: PUSH
17345: LD_INT 9
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 25
17354: PUSH
17355: LD_INT 8
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PPUSH
17372: CALL_OW 69
17376: PUSH
17377: FOR_IN
17378: IFFALSE 17394
// begin SetClass ( i , 1 ) ;
17380: LD_VAR 0 1
17384: PPUSH
17385: LD_INT 1
17387: PPUSH
17388: CALL_OW 336
// end ;
17392: GO 17377
17394: POP
17395: POP
// end ;
17396: PPOPN 1
17398: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17399: LD_EXP 47
17403: PUSH
17404: LD_EXP 51
17408: AND
17409: PUSH
17410: LD_OWVAR 65
17414: PUSH
17415: LD_INT 7
17417: LESS
17418: AND
17419: IFFALSE 17433
17421: GO 17423
17423: DISABLE
// begin enable ;
17424: ENABLE
// game_speed := 7 ;
17425: LD_ADDR_OWVAR 65
17429: PUSH
17430: LD_INT 7
17432: ST_TO_ADDR
// end ;
17433: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17434: LD_EXP 47
17438: PUSH
17439: LD_EXP 54
17443: AND
17444: IFFALSE 17646
17446: GO 17448
17448: DISABLE
17449: LD_INT 0
17451: PPUSH
17452: PPUSH
17453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17454: LD_ADDR_VAR 0 3
17458: PUSH
17459: LD_INT 81
17461: PUSH
17462: LD_OWVAR 2
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 21
17473: PUSH
17474: LD_INT 1
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PPUSH
17485: CALL_OW 69
17489: ST_TO_ADDR
// if not tmp then
17490: LD_VAR 0 3
17494: NOT
17495: IFFALSE 17499
// exit ;
17497: GO 17646
// if tmp > 5 then
17499: LD_VAR 0 3
17503: PUSH
17504: LD_INT 5
17506: GREATER
17507: IFFALSE 17519
// k := 5 else
17509: LD_ADDR_VAR 0 2
17513: PUSH
17514: LD_INT 5
17516: ST_TO_ADDR
17517: GO 17529
// k := tmp ;
17519: LD_ADDR_VAR 0 2
17523: PUSH
17524: LD_VAR 0 3
17528: ST_TO_ADDR
// for i := 1 to k do
17529: LD_ADDR_VAR 0 1
17533: PUSH
17534: DOUBLE
17535: LD_INT 1
17537: DEC
17538: ST_TO_ADDR
17539: LD_VAR 0 2
17543: PUSH
17544: FOR_TO
17545: IFFALSE 17644
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17547: LD_VAR 0 3
17551: PUSH
17552: LD_VAR 0 1
17556: ARRAY
17557: PPUSH
17558: LD_VAR 0 1
17562: PUSH
17563: LD_INT 4
17565: MOD
17566: PUSH
17567: LD_INT 1
17569: PLUS
17570: PPUSH
17571: CALL_OW 259
17575: PUSH
17576: LD_INT 10
17578: LESS
17579: IFFALSE 17642
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17581: LD_VAR 0 3
17585: PUSH
17586: LD_VAR 0 1
17590: ARRAY
17591: PPUSH
17592: LD_VAR 0 1
17596: PUSH
17597: LD_INT 4
17599: MOD
17600: PUSH
17601: LD_INT 1
17603: PLUS
17604: PPUSH
17605: LD_VAR 0 3
17609: PUSH
17610: LD_VAR 0 1
17614: ARRAY
17615: PPUSH
17616: LD_VAR 0 1
17620: PUSH
17621: LD_INT 4
17623: MOD
17624: PUSH
17625: LD_INT 1
17627: PLUS
17628: PPUSH
17629: CALL_OW 259
17633: PUSH
17634: LD_INT 1
17636: PLUS
17637: PPUSH
17638: CALL_OW 237
17642: GO 17544
17644: POP
17645: POP
// end ;
17646: PPOPN 3
17648: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17649: LD_EXP 47
17653: PUSH
17654: LD_EXP 55
17658: AND
17659: IFFALSE 17679
17661: GO 17663
17663: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17664: LD_INT 4
17666: PPUSH
17667: LD_OWVAR 2
17671: PPUSH
17672: LD_INT 0
17674: PPUSH
17675: CALL_OW 324
17679: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17680: LD_EXP 47
17684: PUSH
17685: LD_EXP 84
17689: AND
17690: IFFALSE 17710
17692: GO 17694
17694: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17695: LD_INT 19
17697: PPUSH
17698: LD_OWVAR 2
17702: PPUSH
17703: LD_INT 0
17705: PPUSH
17706: CALL_OW 324
17710: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17711: LD_EXP 47
17715: PUSH
17716: LD_EXP 56
17720: AND
17721: IFFALSE 17823
17723: GO 17725
17725: DISABLE
17726: LD_INT 0
17728: PPUSH
17729: PPUSH
// begin enable ;
17730: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17731: LD_ADDR_VAR 0 2
17735: PUSH
17736: LD_INT 22
17738: PUSH
17739: LD_OWVAR 2
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 2
17750: PUSH
17751: LD_INT 34
17753: PUSH
17754: LD_INT 11
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 34
17763: PUSH
17764: LD_INT 30
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: LIST
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PPUSH
17780: CALL_OW 69
17784: ST_TO_ADDR
// if not tmp then
17785: LD_VAR 0 2
17789: NOT
17790: IFFALSE 17794
// exit ;
17792: GO 17823
// for i in tmp do
17794: LD_ADDR_VAR 0 1
17798: PUSH
17799: LD_VAR 0 2
17803: PUSH
17804: FOR_IN
17805: IFFALSE 17821
// begin SetLives ( i , 0 ) ;
17807: LD_VAR 0 1
17811: PPUSH
17812: LD_INT 0
17814: PPUSH
17815: CALL_OW 234
// end ;
17819: GO 17804
17821: POP
17822: POP
// end ;
17823: PPOPN 2
17825: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17826: LD_EXP 47
17830: PUSH
17831: LD_EXP 57
17835: AND
17836: IFFALSE 17856
17838: GO 17840
17840: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17841: LD_INT 32
17843: PPUSH
17844: LD_OWVAR 2
17848: PPUSH
17849: LD_INT 0
17851: PPUSH
17852: CALL_OW 324
17856: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17857: LD_EXP 47
17861: PUSH
17862: LD_EXP 58
17866: AND
17867: IFFALSE 18048
17869: GO 17871
17871: DISABLE
17872: LD_INT 0
17874: PPUSH
17875: PPUSH
17876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17877: LD_ADDR_VAR 0 2
17881: PUSH
17882: LD_INT 22
17884: PUSH
17885: LD_OWVAR 2
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 33
17896: PUSH
17897: LD_INT 3
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PPUSH
17908: CALL_OW 69
17912: ST_TO_ADDR
// if not tmp then
17913: LD_VAR 0 2
17917: NOT
17918: IFFALSE 17922
// exit ;
17920: GO 18048
// side := 0 ;
17922: LD_ADDR_VAR 0 3
17926: PUSH
17927: LD_INT 0
17929: ST_TO_ADDR
// for i := 1 to 8 do
17930: LD_ADDR_VAR 0 1
17934: PUSH
17935: DOUBLE
17936: LD_INT 1
17938: DEC
17939: ST_TO_ADDR
17940: LD_INT 8
17942: PUSH
17943: FOR_TO
17944: IFFALSE 17992
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17946: LD_OWVAR 2
17950: PUSH
17951: LD_VAR 0 1
17955: NONEQUAL
17956: PUSH
17957: LD_OWVAR 2
17961: PPUSH
17962: LD_VAR 0 1
17966: PPUSH
17967: CALL_OW 81
17971: PUSH
17972: LD_INT 2
17974: EQUAL
17975: AND
17976: IFFALSE 17990
// begin side := i ;
17978: LD_ADDR_VAR 0 3
17982: PUSH
17983: LD_VAR 0 1
17987: ST_TO_ADDR
// break ;
17988: GO 17992
// end ;
17990: GO 17943
17992: POP
17993: POP
// if not side then
17994: LD_VAR 0 3
17998: NOT
17999: IFFALSE 18003
// exit ;
18001: GO 18048
// for i := 1 to tmp do
18003: LD_ADDR_VAR 0 1
18007: PUSH
18008: DOUBLE
18009: LD_INT 1
18011: DEC
18012: ST_TO_ADDR
18013: LD_VAR 0 2
18017: PUSH
18018: FOR_TO
18019: IFFALSE 18046
// if Prob ( 60 ) then
18021: LD_INT 60
18023: PPUSH
18024: CALL_OW 13
18028: IFFALSE 18044
// SetSide ( i , side ) ;
18030: LD_VAR 0 1
18034: PPUSH
18035: LD_VAR 0 3
18039: PPUSH
18040: CALL_OW 235
18044: GO 18018
18046: POP
18047: POP
// end ;
18048: PPOPN 3
18050: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18051: LD_EXP 47
18055: PUSH
18056: LD_EXP 60
18060: AND
18061: IFFALSE 18180
18063: GO 18065
18065: DISABLE
18066: LD_INT 0
18068: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18069: LD_ADDR_VAR 0 1
18073: PUSH
18074: LD_INT 22
18076: PUSH
18077: LD_OWVAR 2
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 21
18088: PUSH
18089: LD_INT 1
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 3
18098: PUSH
18099: LD_INT 23
18101: PUSH
18102: LD_INT 0
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: LIST
18117: PPUSH
18118: CALL_OW 69
18122: PUSH
18123: FOR_IN
18124: IFFALSE 18178
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18126: LD_VAR 0 1
18130: PPUSH
18131: CALL_OW 257
18135: PUSH
18136: LD_INT 1
18138: PUSH
18139: LD_INT 2
18141: PUSH
18142: LD_INT 3
18144: PUSH
18145: LD_INT 4
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: IN
18154: IFFALSE 18176
// SetClass ( un , rand ( 1 , 4 ) ) ;
18156: LD_VAR 0 1
18160: PPUSH
18161: LD_INT 1
18163: PPUSH
18164: LD_INT 4
18166: PPUSH
18167: CALL_OW 12
18171: PPUSH
18172: CALL_OW 336
18176: GO 18123
18178: POP
18179: POP
// end ;
18180: PPOPN 1
18182: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18183: LD_EXP 47
18187: PUSH
18188: LD_EXP 59
18192: AND
18193: IFFALSE 18272
18195: GO 18197
18197: DISABLE
18198: LD_INT 0
18200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18201: LD_ADDR_VAR 0 1
18205: PUSH
18206: LD_INT 22
18208: PUSH
18209: LD_OWVAR 2
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 21
18220: PUSH
18221: LD_INT 3
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PPUSH
18232: CALL_OW 69
18236: ST_TO_ADDR
// if not tmp then
18237: LD_VAR 0 1
18241: NOT
18242: IFFALSE 18246
// exit ;
18244: GO 18272
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18246: LD_VAR 0 1
18250: PUSH
18251: LD_INT 1
18253: PPUSH
18254: LD_VAR 0 1
18258: PPUSH
18259: CALL_OW 12
18263: ARRAY
18264: PPUSH
18265: LD_INT 100
18267: PPUSH
18268: CALL_OW 234
// end ;
18272: PPOPN 1
18274: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18275: LD_EXP 47
18279: PUSH
18280: LD_EXP 61
18284: AND
18285: IFFALSE 18383
18287: GO 18289
18289: DISABLE
18290: LD_INT 0
18292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18293: LD_ADDR_VAR 0 1
18297: PUSH
18298: LD_INT 22
18300: PUSH
18301: LD_OWVAR 2
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 21
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PPUSH
18324: CALL_OW 69
18328: ST_TO_ADDR
// if not tmp then
18329: LD_VAR 0 1
18333: NOT
18334: IFFALSE 18338
// exit ;
18336: GO 18383
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18338: LD_VAR 0 1
18342: PUSH
18343: LD_INT 1
18345: PPUSH
18346: LD_VAR 0 1
18350: PPUSH
18351: CALL_OW 12
18355: ARRAY
18356: PPUSH
18357: LD_INT 1
18359: PPUSH
18360: LD_INT 4
18362: PPUSH
18363: CALL_OW 12
18367: PPUSH
18368: LD_INT 3000
18370: PPUSH
18371: LD_INT 9000
18373: PPUSH
18374: CALL_OW 12
18378: PPUSH
18379: CALL_OW 492
// end ;
18383: PPOPN 1
18385: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18386: LD_EXP 47
18390: PUSH
18391: LD_EXP 62
18395: AND
18396: IFFALSE 18416
18398: GO 18400
18400: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18401: LD_INT 1
18403: PPUSH
18404: LD_OWVAR 2
18408: PPUSH
18409: LD_INT 0
18411: PPUSH
18412: CALL_OW 324
18416: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18417: LD_EXP 47
18421: PUSH
18422: LD_EXP 63
18426: AND
18427: IFFALSE 18510
18429: GO 18431
18431: DISABLE
18432: LD_INT 0
18434: PPUSH
18435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18436: LD_ADDR_VAR 0 2
18440: PUSH
18441: LD_INT 22
18443: PUSH
18444: LD_OWVAR 2
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 21
18455: PUSH
18456: LD_INT 3
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PPUSH
18467: CALL_OW 69
18471: ST_TO_ADDR
// if not tmp then
18472: LD_VAR 0 2
18476: NOT
18477: IFFALSE 18481
// exit ;
18479: GO 18510
// for i in tmp do
18481: LD_ADDR_VAR 0 1
18485: PUSH
18486: LD_VAR 0 2
18490: PUSH
18491: FOR_IN
18492: IFFALSE 18508
// SetBLevel ( i , 10 ) ;
18494: LD_VAR 0 1
18498: PPUSH
18499: LD_INT 10
18501: PPUSH
18502: CALL_OW 241
18506: GO 18491
18508: POP
18509: POP
// end ;
18510: PPOPN 2
18512: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18513: LD_EXP 47
18517: PUSH
18518: LD_EXP 64
18522: AND
18523: IFFALSE 18634
18525: GO 18527
18527: DISABLE
18528: LD_INT 0
18530: PPUSH
18531: PPUSH
18532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18533: LD_ADDR_VAR 0 3
18537: PUSH
18538: LD_INT 22
18540: PUSH
18541: LD_OWVAR 2
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 25
18552: PUSH
18553: LD_INT 1
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PPUSH
18564: CALL_OW 69
18568: ST_TO_ADDR
// if not tmp then
18569: LD_VAR 0 3
18573: NOT
18574: IFFALSE 18578
// exit ;
18576: GO 18634
// un := tmp [ rand ( 1 , tmp ) ] ;
18578: LD_ADDR_VAR 0 2
18582: PUSH
18583: LD_VAR 0 3
18587: PUSH
18588: LD_INT 1
18590: PPUSH
18591: LD_VAR 0 3
18595: PPUSH
18596: CALL_OW 12
18600: ARRAY
18601: ST_TO_ADDR
// if Crawls ( un ) then
18602: LD_VAR 0 2
18606: PPUSH
18607: CALL_OW 318
18611: IFFALSE 18622
// ComWalk ( un ) ;
18613: LD_VAR 0 2
18617: PPUSH
18618: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18622: LD_VAR 0 2
18626: PPUSH
18627: LD_INT 5
18629: PPUSH
18630: CALL_OW 336
// end ;
18634: PPOPN 3
18636: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18637: LD_EXP 47
18641: PUSH
18642: LD_EXP 65
18646: AND
18647: PUSH
18648: LD_OWVAR 67
18652: PUSH
18653: LD_INT 4
18655: LESS
18656: AND
18657: IFFALSE 18676
18659: GO 18661
18661: DISABLE
// begin Difficulty := Difficulty + 1 ;
18662: LD_ADDR_OWVAR 67
18666: PUSH
18667: LD_OWVAR 67
18671: PUSH
18672: LD_INT 1
18674: PLUS
18675: ST_TO_ADDR
// end ;
18676: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18677: LD_EXP 47
18681: PUSH
18682: LD_EXP 66
18686: AND
18687: IFFALSE 18790
18689: GO 18691
18691: DISABLE
18692: LD_INT 0
18694: PPUSH
// begin for i := 1 to 5 do
18695: LD_ADDR_VAR 0 1
18699: PUSH
18700: DOUBLE
18701: LD_INT 1
18703: DEC
18704: ST_TO_ADDR
18705: LD_INT 5
18707: PUSH
18708: FOR_TO
18709: IFFALSE 18788
// begin uc_nation := nation_nature ;
18711: LD_ADDR_OWVAR 21
18715: PUSH
18716: LD_INT 0
18718: ST_TO_ADDR
// uc_side := 0 ;
18719: LD_ADDR_OWVAR 20
18723: PUSH
18724: LD_INT 0
18726: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18727: LD_ADDR_OWVAR 29
18731: PUSH
18732: LD_INT 12
18734: PUSH
18735: LD_INT 12
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: ST_TO_ADDR
// hc_agressivity := 20 ;
18742: LD_ADDR_OWVAR 35
18746: PUSH
18747: LD_INT 20
18749: ST_TO_ADDR
// hc_class := class_tiger ;
18750: LD_ADDR_OWVAR 28
18754: PUSH
18755: LD_INT 14
18757: ST_TO_ADDR
// hc_gallery :=  ;
18758: LD_ADDR_OWVAR 33
18762: PUSH
18763: LD_STRING 
18765: ST_TO_ADDR
// hc_name :=  ;
18766: LD_ADDR_OWVAR 26
18770: PUSH
18771: LD_STRING 
18773: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18774: CALL_OW 44
18778: PPUSH
18779: LD_INT 0
18781: PPUSH
18782: CALL_OW 51
// end ;
18786: GO 18708
18788: POP
18789: POP
// end ;
18790: PPOPN 1
18792: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18793: LD_EXP 47
18797: PUSH
18798: LD_EXP 67
18802: AND
18803: IFFALSE 18812
18805: GO 18807
18807: DISABLE
// StreamSibBomb ;
18808: CALL 18813 0 0
18812: END
// export function StreamSibBomb ; var i , x , y ; begin
18813: LD_INT 0
18815: PPUSH
18816: PPUSH
18817: PPUSH
18818: PPUSH
// result := false ;
18819: LD_ADDR_VAR 0 1
18823: PUSH
18824: LD_INT 0
18826: ST_TO_ADDR
// for i := 1 to 16 do
18827: LD_ADDR_VAR 0 2
18831: PUSH
18832: DOUBLE
18833: LD_INT 1
18835: DEC
18836: ST_TO_ADDR
18837: LD_INT 16
18839: PUSH
18840: FOR_TO
18841: IFFALSE 19040
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18843: LD_ADDR_VAR 0 3
18847: PUSH
18848: LD_INT 10
18850: PUSH
18851: LD_INT 20
18853: PUSH
18854: LD_INT 30
18856: PUSH
18857: LD_INT 40
18859: PUSH
18860: LD_INT 50
18862: PUSH
18863: LD_INT 60
18865: PUSH
18866: LD_INT 70
18868: PUSH
18869: LD_INT 80
18871: PUSH
18872: LD_INT 90
18874: PUSH
18875: LD_INT 100
18877: PUSH
18878: LD_INT 110
18880: PUSH
18881: LD_INT 120
18883: PUSH
18884: LD_INT 130
18886: PUSH
18887: LD_INT 140
18889: PUSH
18890: LD_INT 150
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 1
18912: PPUSH
18913: LD_INT 15
18915: PPUSH
18916: CALL_OW 12
18920: ARRAY
18921: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18922: LD_ADDR_VAR 0 4
18926: PUSH
18927: LD_INT 10
18929: PUSH
18930: LD_INT 20
18932: PUSH
18933: LD_INT 30
18935: PUSH
18936: LD_INT 40
18938: PUSH
18939: LD_INT 50
18941: PUSH
18942: LD_INT 60
18944: PUSH
18945: LD_INT 70
18947: PUSH
18948: LD_INT 80
18950: PUSH
18951: LD_INT 90
18953: PUSH
18954: LD_INT 100
18956: PUSH
18957: LD_INT 110
18959: PUSH
18960: LD_INT 120
18962: PUSH
18963: LD_INT 130
18965: PUSH
18966: LD_INT 140
18968: PUSH
18969: LD_INT 150
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 1
18991: PPUSH
18992: LD_INT 15
18994: PPUSH
18995: CALL_OW 12
18999: ARRAY
19000: ST_TO_ADDR
// if ValidHex ( x , y ) then
19001: LD_VAR 0 3
19005: PPUSH
19006: LD_VAR 0 4
19010: PPUSH
19011: CALL_OW 488
19015: IFFALSE 19038
// begin result := [ x , y ] ;
19017: LD_ADDR_VAR 0 1
19021: PUSH
19022: LD_VAR 0 3
19026: PUSH
19027: LD_VAR 0 4
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: ST_TO_ADDR
// break ;
19036: GO 19040
// end ; end ;
19038: GO 18840
19040: POP
19041: POP
// if result then
19042: LD_VAR 0 1
19046: IFFALSE 19106
// begin ToLua ( playSibBomb() ) ;
19048: LD_STRING playSibBomb()
19050: PPUSH
19051: CALL_OW 559
// wait ( 0 0$14 ) ;
19055: LD_INT 490
19057: PPUSH
19058: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19062: LD_VAR 0 1
19066: PUSH
19067: LD_INT 1
19069: ARRAY
19070: PPUSH
19071: LD_VAR 0 1
19075: PUSH
19076: LD_INT 2
19078: ARRAY
19079: PPUSH
19080: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19084: LD_VAR 0 1
19088: PUSH
19089: LD_INT 1
19091: ARRAY
19092: PPUSH
19093: LD_VAR 0 1
19097: PUSH
19098: LD_INT 2
19100: ARRAY
19101: PPUSH
19102: CALL_OW 429
// end ; end ;
19106: LD_VAR 0 1
19110: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19111: LD_EXP 47
19115: PUSH
19116: LD_EXP 69
19120: AND
19121: IFFALSE 19133
19123: GO 19125
19125: DISABLE
// YouLost (  ) ;
19126: LD_STRING 
19128: PPUSH
19129: CALL_OW 104
19133: END
// every 0 0$1 trigger StreamModeActive and sFog do
19134: LD_EXP 47
19138: PUSH
19139: LD_EXP 68
19143: AND
19144: IFFALSE 19158
19146: GO 19148
19148: DISABLE
// FogOff ( your_side ) ;
19149: LD_OWVAR 2
19153: PPUSH
19154: CALL_OW 344
19158: END
// every 0 0$1 trigger StreamModeActive and sSun do
19159: LD_EXP 47
19163: PUSH
19164: LD_EXP 70
19168: AND
19169: IFFALSE 19197
19171: GO 19173
19173: DISABLE
// begin solar_recharge_percent := 0 ;
19174: LD_ADDR_OWVAR 79
19178: PUSH
19179: LD_INT 0
19181: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19182: LD_INT 10500
19184: PPUSH
19185: CALL_OW 67
// solar_recharge_percent := 100 ;
19189: LD_ADDR_OWVAR 79
19193: PUSH
19194: LD_INT 100
19196: ST_TO_ADDR
// end ;
19197: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19198: LD_EXP 47
19202: PUSH
19203: LD_EXP 71
19207: AND
19208: IFFALSE 19447
19210: GO 19212
19212: DISABLE
19213: LD_INT 0
19215: PPUSH
19216: PPUSH
19217: PPUSH
// begin tmp := [ ] ;
19218: LD_ADDR_VAR 0 3
19222: PUSH
19223: EMPTY
19224: ST_TO_ADDR
// for i := 1 to 6 do
19225: LD_ADDR_VAR 0 1
19229: PUSH
19230: DOUBLE
19231: LD_INT 1
19233: DEC
19234: ST_TO_ADDR
19235: LD_INT 6
19237: PUSH
19238: FOR_TO
19239: IFFALSE 19344
// begin uc_nation := nation_nature ;
19241: LD_ADDR_OWVAR 21
19245: PUSH
19246: LD_INT 0
19248: ST_TO_ADDR
// uc_side := 0 ;
19249: LD_ADDR_OWVAR 20
19253: PUSH
19254: LD_INT 0
19256: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19257: LD_ADDR_OWVAR 29
19261: PUSH
19262: LD_INT 12
19264: PUSH
19265: LD_INT 12
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: ST_TO_ADDR
// hc_agressivity := 20 ;
19272: LD_ADDR_OWVAR 35
19276: PUSH
19277: LD_INT 20
19279: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19280: LD_ADDR_OWVAR 28
19284: PUSH
19285: LD_INT 17
19287: ST_TO_ADDR
// hc_gallery :=  ;
19288: LD_ADDR_OWVAR 33
19292: PUSH
19293: LD_STRING 
19295: ST_TO_ADDR
// hc_name :=  ;
19296: LD_ADDR_OWVAR 26
19300: PUSH
19301: LD_STRING 
19303: ST_TO_ADDR
// un := CreateHuman ;
19304: LD_ADDR_VAR 0 2
19308: PUSH
19309: CALL_OW 44
19313: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19314: LD_VAR 0 2
19318: PPUSH
19319: LD_INT 1
19321: PPUSH
19322: CALL_OW 51
// tmp := tmp ^ un ;
19326: LD_ADDR_VAR 0 3
19330: PUSH
19331: LD_VAR 0 3
19335: PUSH
19336: LD_VAR 0 2
19340: ADD
19341: ST_TO_ADDR
// end ;
19342: GO 19238
19344: POP
19345: POP
// repeat wait ( 0 0$1 ) ;
19346: LD_INT 35
19348: PPUSH
19349: CALL_OW 67
// for un in tmp do
19353: LD_ADDR_VAR 0 2
19357: PUSH
19358: LD_VAR 0 3
19362: PUSH
19363: FOR_IN
19364: IFFALSE 19438
// begin if IsDead ( un ) then
19366: LD_VAR 0 2
19370: PPUSH
19371: CALL_OW 301
19375: IFFALSE 19395
// begin tmp := tmp diff un ;
19377: LD_ADDR_VAR 0 3
19381: PUSH
19382: LD_VAR 0 3
19386: PUSH
19387: LD_VAR 0 2
19391: DIFF
19392: ST_TO_ADDR
// continue ;
19393: GO 19363
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19395: LD_VAR 0 2
19399: PPUSH
19400: LD_INT 3
19402: PUSH
19403: LD_INT 22
19405: PUSH
19406: LD_INT 0
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PPUSH
19417: CALL_OW 69
19421: PPUSH
19422: LD_VAR 0 2
19426: PPUSH
19427: CALL_OW 74
19431: PPUSH
19432: CALL_OW 115
// end ;
19436: GO 19363
19438: POP
19439: POP
// until not tmp ;
19440: LD_VAR 0 3
19444: NOT
19445: IFFALSE 19346
// end ;
19447: PPOPN 3
19449: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19450: LD_EXP 47
19454: PUSH
19455: LD_EXP 72
19459: AND
19460: IFFALSE 19514
19462: GO 19464
19464: DISABLE
// begin ToLua ( displayTroll(); ) ;
19465: LD_STRING displayTroll();
19467: PPUSH
19468: CALL_OW 559
// wait ( 3 3$00 ) ;
19472: LD_INT 6300
19474: PPUSH
19475: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19479: LD_STRING hideTroll();
19481: PPUSH
19482: CALL_OW 559
// wait ( 1 1$00 ) ;
19486: LD_INT 2100
19488: PPUSH
19489: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19493: LD_STRING displayTroll();
19495: PPUSH
19496: CALL_OW 559
// wait ( 1 1$00 ) ;
19500: LD_INT 2100
19502: PPUSH
19503: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19507: LD_STRING hideTroll();
19509: PPUSH
19510: CALL_OW 559
// end ;
19514: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19515: LD_EXP 47
19519: PUSH
19520: LD_EXP 73
19524: AND
19525: IFFALSE 19588
19527: GO 19529
19529: DISABLE
19530: LD_INT 0
19532: PPUSH
// begin p := 0 ;
19533: LD_ADDR_VAR 0 1
19537: PUSH
19538: LD_INT 0
19540: ST_TO_ADDR
// repeat game_speed := 1 ;
19541: LD_ADDR_OWVAR 65
19545: PUSH
19546: LD_INT 1
19548: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19549: LD_INT 35
19551: PPUSH
19552: CALL_OW 67
// p := p + 1 ;
19556: LD_ADDR_VAR 0 1
19560: PUSH
19561: LD_VAR 0 1
19565: PUSH
19566: LD_INT 1
19568: PLUS
19569: ST_TO_ADDR
// until p >= 60 ;
19570: LD_VAR 0 1
19574: PUSH
19575: LD_INT 60
19577: GREATEREQUAL
19578: IFFALSE 19541
// game_speed := 4 ;
19580: LD_ADDR_OWVAR 65
19584: PUSH
19585: LD_INT 4
19587: ST_TO_ADDR
// end ;
19588: PPOPN 1
19590: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19591: LD_EXP 47
19595: PUSH
19596: LD_EXP 74
19600: AND
19601: IFFALSE 19747
19603: GO 19605
19605: DISABLE
19606: LD_INT 0
19608: PPUSH
19609: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19610: LD_ADDR_VAR 0 1
19614: PUSH
19615: LD_INT 22
19617: PUSH
19618: LD_OWVAR 2
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 2
19629: PUSH
19630: LD_INT 30
19632: PUSH
19633: LD_INT 0
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 30
19642: PUSH
19643: LD_INT 1
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: LIST
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PPUSH
19659: CALL_OW 69
19663: ST_TO_ADDR
// if not depot then
19664: LD_VAR 0 1
19668: NOT
19669: IFFALSE 19673
// exit ;
19671: GO 19747
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19673: LD_ADDR_VAR 0 2
19677: PUSH
19678: LD_VAR 0 1
19682: PUSH
19683: LD_INT 1
19685: PPUSH
19686: LD_VAR 0 1
19690: PPUSH
19691: CALL_OW 12
19695: ARRAY
19696: PPUSH
19697: CALL_OW 274
19701: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19702: LD_VAR 0 2
19706: PPUSH
19707: LD_INT 1
19709: PPUSH
19710: LD_INT 0
19712: PPUSH
19713: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19717: LD_VAR 0 2
19721: PPUSH
19722: LD_INT 2
19724: PPUSH
19725: LD_INT 0
19727: PPUSH
19728: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19732: LD_VAR 0 2
19736: PPUSH
19737: LD_INT 3
19739: PPUSH
19740: LD_INT 0
19742: PPUSH
19743: CALL_OW 277
// end ;
19747: PPOPN 2
19749: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19750: LD_EXP 47
19754: PUSH
19755: LD_EXP 75
19759: AND
19760: IFFALSE 19857
19762: GO 19764
19764: DISABLE
19765: LD_INT 0
19767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19768: LD_ADDR_VAR 0 1
19772: PUSH
19773: LD_INT 22
19775: PUSH
19776: LD_OWVAR 2
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 21
19787: PUSH
19788: LD_INT 1
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 3
19797: PUSH
19798: LD_INT 23
19800: PUSH
19801: LD_INT 0
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: LIST
19816: PPUSH
19817: CALL_OW 69
19821: ST_TO_ADDR
// if not tmp then
19822: LD_VAR 0 1
19826: NOT
19827: IFFALSE 19831
// exit ;
19829: GO 19857
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19831: LD_VAR 0 1
19835: PUSH
19836: LD_INT 1
19838: PPUSH
19839: LD_VAR 0 1
19843: PPUSH
19844: CALL_OW 12
19848: ARRAY
19849: PPUSH
19850: LD_INT 200
19852: PPUSH
19853: CALL_OW 234
// end ;
19857: PPOPN 1
19859: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19860: LD_EXP 47
19864: PUSH
19865: LD_EXP 76
19869: AND
19870: IFFALSE 19949
19872: GO 19874
19874: DISABLE
19875: LD_INT 0
19877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19878: LD_ADDR_VAR 0 1
19882: PUSH
19883: LD_INT 22
19885: PUSH
19886: LD_OWVAR 2
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 21
19897: PUSH
19898: LD_INT 2
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PPUSH
19909: CALL_OW 69
19913: ST_TO_ADDR
// if not tmp then
19914: LD_VAR 0 1
19918: NOT
19919: IFFALSE 19923
// exit ;
19921: GO 19949
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19923: LD_VAR 0 1
19927: PUSH
19928: LD_INT 1
19930: PPUSH
19931: LD_VAR 0 1
19935: PPUSH
19936: CALL_OW 12
19940: ARRAY
19941: PPUSH
19942: LD_INT 60
19944: PPUSH
19945: CALL_OW 234
// end ;
19949: PPOPN 1
19951: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19952: LD_EXP 47
19956: PUSH
19957: LD_EXP 77
19961: AND
19962: IFFALSE 20061
19964: GO 19966
19966: DISABLE
19967: LD_INT 0
19969: PPUSH
19970: PPUSH
// begin enable ;
19971: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19972: LD_ADDR_VAR 0 1
19976: PUSH
19977: LD_INT 22
19979: PUSH
19980: LD_OWVAR 2
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 61
19991: PUSH
19992: EMPTY
19993: LIST
19994: PUSH
19995: LD_INT 33
19997: PUSH
19998: LD_INT 2
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: LIST
20009: PPUSH
20010: CALL_OW 69
20014: ST_TO_ADDR
// if not tmp then
20015: LD_VAR 0 1
20019: NOT
20020: IFFALSE 20024
// exit ;
20022: GO 20061
// for i in tmp do
20024: LD_ADDR_VAR 0 2
20028: PUSH
20029: LD_VAR 0 1
20033: PUSH
20034: FOR_IN
20035: IFFALSE 20059
// if IsControledBy ( i ) then
20037: LD_VAR 0 2
20041: PPUSH
20042: CALL_OW 312
20046: IFFALSE 20057
// ComUnlink ( i ) ;
20048: LD_VAR 0 2
20052: PPUSH
20053: CALL_OW 136
20057: GO 20034
20059: POP
20060: POP
// end ;
20061: PPOPN 2
20063: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20064: LD_EXP 47
20068: PUSH
20069: LD_EXP 78
20073: AND
20074: IFFALSE 20214
20076: GO 20078
20078: DISABLE
20079: LD_INT 0
20081: PPUSH
20082: PPUSH
// begin ToLua ( displayPowell(); ) ;
20083: LD_STRING displayPowell();
20085: PPUSH
20086: CALL_OW 559
// uc_side := 0 ;
20090: LD_ADDR_OWVAR 20
20094: PUSH
20095: LD_INT 0
20097: ST_TO_ADDR
// uc_nation := 2 ;
20098: LD_ADDR_OWVAR 21
20102: PUSH
20103: LD_INT 2
20105: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20106: LD_ADDR_OWVAR 37
20110: PUSH
20111: LD_INT 14
20113: ST_TO_ADDR
// vc_engine := engine_siberite ;
20114: LD_ADDR_OWVAR 39
20118: PUSH
20119: LD_INT 3
20121: ST_TO_ADDR
// vc_control := control_apeman ;
20122: LD_ADDR_OWVAR 38
20126: PUSH
20127: LD_INT 5
20129: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20130: LD_ADDR_OWVAR 40
20134: PUSH
20135: LD_INT 29
20137: ST_TO_ADDR
// un := CreateVehicle ;
20138: LD_ADDR_VAR 0 2
20142: PUSH
20143: CALL_OW 45
20147: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20148: LD_VAR 0 2
20152: PPUSH
20153: LD_INT 1
20155: PPUSH
20156: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20160: LD_INT 35
20162: PPUSH
20163: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20167: LD_VAR 0 2
20171: PPUSH
20172: LD_INT 22
20174: PUSH
20175: LD_OWVAR 2
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PPUSH
20184: CALL_OW 69
20188: PPUSH
20189: LD_VAR 0 2
20193: PPUSH
20194: CALL_OW 74
20198: PPUSH
20199: CALL_OW 115
// until IsDead ( un ) ;
20203: LD_VAR 0 2
20207: PPUSH
20208: CALL_OW 301
20212: IFFALSE 20160
// end ;
20214: PPOPN 2
20216: END
// every 0 0$1 trigger StreamModeActive and sStu do
20217: LD_EXP 47
20221: PUSH
20222: LD_EXP 86
20226: AND
20227: IFFALSE 20243
20229: GO 20231
20231: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20232: LD_STRING displayStucuk();
20234: PPUSH
20235: CALL_OW 559
// ResetFog ;
20239: CALL_OW 335
// end ;
20243: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20244: LD_EXP 47
20248: PUSH
20249: LD_EXP 79
20253: AND
20254: IFFALSE 20395
20256: GO 20258
20258: DISABLE
20259: LD_INT 0
20261: PPUSH
20262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20263: LD_ADDR_VAR 0 2
20267: PUSH
20268: LD_INT 22
20270: PUSH
20271: LD_OWVAR 2
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 21
20282: PUSH
20283: LD_INT 1
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PPUSH
20294: CALL_OW 69
20298: ST_TO_ADDR
// if not tmp then
20299: LD_VAR 0 2
20303: NOT
20304: IFFALSE 20308
// exit ;
20306: GO 20395
// un := tmp [ rand ( 1 , tmp ) ] ;
20308: LD_ADDR_VAR 0 1
20312: PUSH
20313: LD_VAR 0 2
20317: PUSH
20318: LD_INT 1
20320: PPUSH
20321: LD_VAR 0 2
20325: PPUSH
20326: CALL_OW 12
20330: ARRAY
20331: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20332: LD_VAR 0 1
20336: PPUSH
20337: LD_INT 0
20339: PPUSH
20340: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20344: LD_VAR 0 1
20348: PPUSH
20349: LD_OWVAR 3
20353: PUSH
20354: LD_VAR 0 1
20358: DIFF
20359: PPUSH
20360: LD_VAR 0 1
20364: PPUSH
20365: CALL_OW 74
20369: PPUSH
20370: CALL_OW 115
// wait ( 0 0$20 ) ;
20374: LD_INT 700
20376: PPUSH
20377: CALL_OW 67
// SetSide ( un , your_side ) ;
20381: LD_VAR 0 1
20385: PPUSH
20386: LD_OWVAR 2
20390: PPUSH
20391: CALL_OW 235
// end ;
20395: PPOPN 2
20397: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20398: LD_EXP 47
20402: PUSH
20403: LD_EXP 80
20407: AND
20408: IFFALSE 20514
20410: GO 20412
20412: DISABLE
20413: LD_INT 0
20415: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20416: LD_ADDR_VAR 0 1
20420: PUSH
20421: LD_INT 22
20423: PUSH
20424: LD_OWVAR 2
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: LD_INT 30
20438: PUSH
20439: LD_INT 0
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 30
20448: PUSH
20449: LD_INT 1
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: LIST
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PPUSH
20465: CALL_OW 69
20469: ST_TO_ADDR
// if not depot then
20470: LD_VAR 0 1
20474: NOT
20475: IFFALSE 20479
// exit ;
20477: GO 20514
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20479: LD_VAR 0 1
20483: PUSH
20484: LD_INT 1
20486: ARRAY
20487: PPUSH
20488: CALL_OW 250
20492: PPUSH
20493: LD_VAR 0 1
20497: PUSH
20498: LD_INT 1
20500: ARRAY
20501: PPUSH
20502: CALL_OW 251
20506: PPUSH
20507: LD_INT 70
20509: PPUSH
20510: CALL_OW 495
// end ;
20514: PPOPN 1
20516: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20517: LD_EXP 47
20521: PUSH
20522: LD_EXP 81
20526: AND
20527: IFFALSE 20738
20529: GO 20531
20531: DISABLE
20532: LD_INT 0
20534: PPUSH
20535: PPUSH
20536: PPUSH
20537: PPUSH
20538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20539: LD_ADDR_VAR 0 5
20543: PUSH
20544: LD_INT 22
20546: PUSH
20547: LD_OWVAR 2
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 21
20558: PUSH
20559: LD_INT 1
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PPUSH
20570: CALL_OW 69
20574: ST_TO_ADDR
// if not tmp then
20575: LD_VAR 0 5
20579: NOT
20580: IFFALSE 20584
// exit ;
20582: GO 20738
// for i in tmp do
20584: LD_ADDR_VAR 0 1
20588: PUSH
20589: LD_VAR 0 5
20593: PUSH
20594: FOR_IN
20595: IFFALSE 20736
// begin d := rand ( 0 , 5 ) ;
20597: LD_ADDR_VAR 0 4
20601: PUSH
20602: LD_INT 0
20604: PPUSH
20605: LD_INT 5
20607: PPUSH
20608: CALL_OW 12
20612: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20613: LD_ADDR_VAR 0 2
20617: PUSH
20618: LD_VAR 0 1
20622: PPUSH
20623: CALL_OW 250
20627: PPUSH
20628: LD_VAR 0 4
20632: PPUSH
20633: LD_INT 3
20635: PPUSH
20636: LD_INT 12
20638: PPUSH
20639: CALL_OW 12
20643: PPUSH
20644: CALL_OW 272
20648: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20649: LD_ADDR_VAR 0 3
20653: PUSH
20654: LD_VAR 0 1
20658: PPUSH
20659: CALL_OW 251
20663: PPUSH
20664: LD_VAR 0 4
20668: PPUSH
20669: LD_INT 3
20671: PPUSH
20672: LD_INT 12
20674: PPUSH
20675: CALL_OW 12
20679: PPUSH
20680: CALL_OW 273
20684: ST_TO_ADDR
// if ValidHex ( x , y ) then
20685: LD_VAR 0 2
20689: PPUSH
20690: LD_VAR 0 3
20694: PPUSH
20695: CALL_OW 488
20699: IFFALSE 20734
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20701: LD_VAR 0 1
20705: PPUSH
20706: LD_VAR 0 2
20710: PPUSH
20711: LD_VAR 0 3
20715: PPUSH
20716: LD_INT 3
20718: PPUSH
20719: LD_INT 6
20721: PPUSH
20722: CALL_OW 12
20726: PPUSH
20727: LD_INT 1
20729: PPUSH
20730: CALL_OW 483
// end ;
20734: GO 20594
20736: POP
20737: POP
// end ;
20738: PPOPN 5
20740: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20741: LD_EXP 47
20745: PUSH
20746: LD_EXP 82
20750: AND
20751: IFFALSE 20845
20753: GO 20755
20755: DISABLE
20756: LD_INT 0
20758: PPUSH
20759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20760: LD_ADDR_VAR 0 2
20764: PUSH
20765: LD_INT 22
20767: PUSH
20768: LD_OWVAR 2
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 32
20779: PUSH
20780: LD_INT 1
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 21
20789: PUSH
20790: LD_INT 2
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: LIST
20801: PPUSH
20802: CALL_OW 69
20806: ST_TO_ADDR
// if not tmp then
20807: LD_VAR 0 2
20811: NOT
20812: IFFALSE 20816
// exit ;
20814: GO 20845
// for i in tmp do
20816: LD_ADDR_VAR 0 1
20820: PUSH
20821: LD_VAR 0 2
20825: PUSH
20826: FOR_IN
20827: IFFALSE 20843
// SetFuel ( i , 0 ) ;
20829: LD_VAR 0 1
20833: PPUSH
20834: LD_INT 0
20836: PPUSH
20837: CALL_OW 240
20841: GO 20826
20843: POP
20844: POP
// end ;
20845: PPOPN 2
20847: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20848: LD_EXP 47
20852: PUSH
20853: LD_EXP 83
20857: AND
20858: IFFALSE 20924
20860: GO 20862
20862: DISABLE
20863: LD_INT 0
20865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20866: LD_ADDR_VAR 0 1
20870: PUSH
20871: LD_INT 22
20873: PUSH
20874: LD_OWVAR 2
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 30
20885: PUSH
20886: LD_INT 29
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PPUSH
20897: CALL_OW 69
20901: ST_TO_ADDR
// if not tmp then
20902: LD_VAR 0 1
20906: NOT
20907: IFFALSE 20911
// exit ;
20909: GO 20924
// DestroyUnit ( tmp [ 1 ] ) ;
20911: LD_VAR 0 1
20915: PUSH
20916: LD_INT 1
20918: ARRAY
20919: PPUSH
20920: CALL_OW 65
// end ;
20924: PPOPN 1
20926: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20927: LD_EXP 47
20931: PUSH
20932: LD_EXP 85
20936: AND
20937: IFFALSE 21066
20939: GO 20941
20941: DISABLE
20942: LD_INT 0
20944: PPUSH
// begin uc_side := 0 ;
20945: LD_ADDR_OWVAR 20
20949: PUSH
20950: LD_INT 0
20952: ST_TO_ADDR
// uc_nation := nation_arabian ;
20953: LD_ADDR_OWVAR 21
20957: PUSH
20958: LD_INT 2
20960: ST_TO_ADDR
// hc_gallery :=  ;
20961: LD_ADDR_OWVAR 33
20965: PUSH
20966: LD_STRING 
20968: ST_TO_ADDR
// hc_name :=  ;
20969: LD_ADDR_OWVAR 26
20973: PUSH
20974: LD_STRING 
20976: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20977: LD_INT 1
20979: PPUSH
20980: LD_INT 11
20982: PPUSH
20983: LD_INT 10
20985: PPUSH
20986: CALL_OW 380
// un := CreateHuman ;
20990: LD_ADDR_VAR 0 1
20994: PUSH
20995: CALL_OW 44
20999: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21000: LD_VAR 0 1
21004: PPUSH
21005: LD_INT 1
21007: PPUSH
21008: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21012: LD_INT 35
21014: PPUSH
21015: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21019: LD_VAR 0 1
21023: PPUSH
21024: LD_INT 22
21026: PUSH
21027: LD_OWVAR 2
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PPUSH
21036: CALL_OW 69
21040: PPUSH
21041: LD_VAR 0 1
21045: PPUSH
21046: CALL_OW 74
21050: PPUSH
21051: CALL_OW 115
// until IsDead ( un ) ;
21055: LD_VAR 0 1
21059: PPUSH
21060: CALL_OW 301
21064: IFFALSE 21012
// end ;
21066: PPOPN 1
21068: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21069: LD_EXP 47
21073: PUSH
21074: LD_EXP 87
21078: AND
21079: IFFALSE 21091
21081: GO 21083
21083: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21084: LD_STRING earthquake(getX(game), 0, 32)
21086: PPUSH
21087: CALL_OW 559
21091: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21092: LD_EXP 47
21096: PUSH
21097: LD_EXP 88
21101: AND
21102: IFFALSE 21193
21104: GO 21106
21106: DISABLE
21107: LD_INT 0
21109: PPUSH
// begin enable ;
21110: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21111: LD_ADDR_VAR 0 1
21115: PUSH
21116: LD_INT 22
21118: PUSH
21119: LD_OWVAR 2
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 21
21130: PUSH
21131: LD_INT 2
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 33
21140: PUSH
21141: LD_INT 3
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: LIST
21152: PPUSH
21153: CALL_OW 69
21157: ST_TO_ADDR
// if not tmp then
21158: LD_VAR 0 1
21162: NOT
21163: IFFALSE 21167
// exit ;
21165: GO 21193
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21167: LD_VAR 0 1
21171: PUSH
21172: LD_INT 1
21174: PPUSH
21175: LD_VAR 0 1
21179: PPUSH
21180: CALL_OW 12
21184: ARRAY
21185: PPUSH
21186: LD_INT 1
21188: PPUSH
21189: CALL_OW 234
// end ;
21193: PPOPN 1
21195: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21196: LD_EXP 47
21200: PUSH
21201: LD_EXP 89
21205: AND
21206: IFFALSE 21347
21208: GO 21210
21210: DISABLE
21211: LD_INT 0
21213: PPUSH
21214: PPUSH
21215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21216: LD_ADDR_VAR 0 3
21220: PUSH
21221: LD_INT 22
21223: PUSH
21224: LD_OWVAR 2
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 25
21235: PUSH
21236: LD_INT 1
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PPUSH
21247: CALL_OW 69
21251: ST_TO_ADDR
// if not tmp then
21252: LD_VAR 0 3
21256: NOT
21257: IFFALSE 21261
// exit ;
21259: GO 21347
// un := tmp [ rand ( 1 , tmp ) ] ;
21261: LD_ADDR_VAR 0 2
21265: PUSH
21266: LD_VAR 0 3
21270: PUSH
21271: LD_INT 1
21273: PPUSH
21274: LD_VAR 0 3
21278: PPUSH
21279: CALL_OW 12
21283: ARRAY
21284: ST_TO_ADDR
// if Crawls ( un ) then
21285: LD_VAR 0 2
21289: PPUSH
21290: CALL_OW 318
21294: IFFALSE 21305
// ComWalk ( un ) ;
21296: LD_VAR 0 2
21300: PPUSH
21301: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21305: LD_VAR 0 2
21309: PPUSH
21310: LD_INT 9
21312: PPUSH
21313: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21317: LD_INT 28
21319: PPUSH
21320: LD_OWVAR 2
21324: PPUSH
21325: LD_INT 2
21327: PPUSH
21328: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21332: LD_INT 29
21334: PPUSH
21335: LD_OWVAR 2
21339: PPUSH
21340: LD_INT 2
21342: PPUSH
21343: CALL_OW 322
// end ;
21347: PPOPN 3
21349: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21350: LD_EXP 47
21354: PUSH
21355: LD_EXP 90
21359: AND
21360: IFFALSE 21471
21362: GO 21364
21364: DISABLE
21365: LD_INT 0
21367: PPUSH
21368: PPUSH
21369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21370: LD_ADDR_VAR 0 3
21374: PUSH
21375: LD_INT 22
21377: PUSH
21378: LD_OWVAR 2
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 25
21389: PUSH
21390: LD_INT 1
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PPUSH
21401: CALL_OW 69
21405: ST_TO_ADDR
// if not tmp then
21406: LD_VAR 0 3
21410: NOT
21411: IFFALSE 21415
// exit ;
21413: GO 21471
// un := tmp [ rand ( 1 , tmp ) ] ;
21415: LD_ADDR_VAR 0 2
21419: PUSH
21420: LD_VAR 0 3
21424: PUSH
21425: LD_INT 1
21427: PPUSH
21428: LD_VAR 0 3
21432: PPUSH
21433: CALL_OW 12
21437: ARRAY
21438: ST_TO_ADDR
// if Crawls ( un ) then
21439: LD_VAR 0 2
21443: PPUSH
21444: CALL_OW 318
21448: IFFALSE 21459
// ComWalk ( un ) ;
21450: LD_VAR 0 2
21454: PPUSH
21455: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21459: LD_VAR 0 2
21463: PPUSH
21464: LD_INT 8
21466: PPUSH
21467: CALL_OW 336
// end ;
21471: PPOPN 3
21473: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21474: LD_EXP 47
21478: PUSH
21479: LD_EXP 91
21483: AND
21484: IFFALSE 21628
21486: GO 21488
21488: DISABLE
21489: LD_INT 0
21491: PPUSH
21492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21493: LD_ADDR_VAR 0 2
21497: PUSH
21498: LD_INT 22
21500: PUSH
21501: LD_OWVAR 2
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 21
21512: PUSH
21513: LD_INT 2
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 2
21522: PUSH
21523: LD_INT 34
21525: PUSH
21526: LD_INT 12
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 34
21535: PUSH
21536: LD_INT 51
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 34
21545: PUSH
21546: LD_INT 32
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: LIST
21563: PPUSH
21564: CALL_OW 69
21568: ST_TO_ADDR
// if not tmp then
21569: LD_VAR 0 2
21573: NOT
21574: IFFALSE 21578
// exit ;
21576: GO 21628
// for i in tmp do
21578: LD_ADDR_VAR 0 1
21582: PUSH
21583: LD_VAR 0 2
21587: PUSH
21588: FOR_IN
21589: IFFALSE 21626
// if GetCargo ( i , mat_artifact ) = 0 then
21591: LD_VAR 0 1
21595: PPUSH
21596: LD_INT 4
21598: PPUSH
21599: CALL_OW 289
21603: PUSH
21604: LD_INT 0
21606: EQUAL
21607: IFFALSE 21624
// SetCargo ( i , mat_siberit , 100 ) ;
21609: LD_VAR 0 1
21613: PPUSH
21614: LD_INT 3
21616: PPUSH
21617: LD_INT 100
21619: PPUSH
21620: CALL_OW 290
21624: GO 21588
21626: POP
21627: POP
// end ;
21628: PPOPN 2
21630: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21631: LD_EXP 47
21635: PUSH
21636: LD_EXP 92
21640: AND
21641: IFFALSE 21824
21643: GO 21645
21645: DISABLE
21646: LD_INT 0
21648: PPUSH
21649: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21650: LD_ADDR_VAR 0 2
21654: PUSH
21655: LD_INT 22
21657: PUSH
21658: LD_OWVAR 2
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PPUSH
21667: CALL_OW 69
21671: ST_TO_ADDR
// if not tmp then
21672: LD_VAR 0 2
21676: NOT
21677: IFFALSE 21681
// exit ;
21679: GO 21824
// for i := 1 to 2 do
21681: LD_ADDR_VAR 0 1
21685: PUSH
21686: DOUBLE
21687: LD_INT 1
21689: DEC
21690: ST_TO_ADDR
21691: LD_INT 2
21693: PUSH
21694: FOR_TO
21695: IFFALSE 21822
// begin uc_side := your_side ;
21697: LD_ADDR_OWVAR 20
21701: PUSH
21702: LD_OWVAR 2
21706: ST_TO_ADDR
// uc_nation := nation_american ;
21707: LD_ADDR_OWVAR 21
21711: PUSH
21712: LD_INT 1
21714: ST_TO_ADDR
// vc_chassis := us_morphling ;
21715: LD_ADDR_OWVAR 37
21719: PUSH
21720: LD_INT 5
21722: ST_TO_ADDR
// vc_engine := engine_siberite ;
21723: LD_ADDR_OWVAR 39
21727: PUSH
21728: LD_INT 3
21730: ST_TO_ADDR
// vc_control := control_computer ;
21731: LD_ADDR_OWVAR 38
21735: PUSH
21736: LD_INT 3
21738: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21739: LD_ADDR_OWVAR 40
21743: PUSH
21744: LD_INT 10
21746: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21747: LD_VAR 0 2
21751: PUSH
21752: LD_INT 1
21754: ARRAY
21755: PPUSH
21756: CALL_OW 310
21760: NOT
21761: IFFALSE 21808
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21763: CALL_OW 45
21767: PPUSH
21768: LD_VAR 0 2
21772: PUSH
21773: LD_INT 1
21775: ARRAY
21776: PPUSH
21777: CALL_OW 250
21781: PPUSH
21782: LD_VAR 0 2
21786: PUSH
21787: LD_INT 1
21789: ARRAY
21790: PPUSH
21791: CALL_OW 251
21795: PPUSH
21796: LD_INT 12
21798: PPUSH
21799: LD_INT 1
21801: PPUSH
21802: CALL_OW 50
21806: GO 21820
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21808: CALL_OW 45
21812: PPUSH
21813: LD_INT 1
21815: PPUSH
21816: CALL_OW 51
// end ;
21820: GO 21694
21822: POP
21823: POP
// end ;
21824: PPOPN 2
21826: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21827: LD_EXP 47
21831: PUSH
21832: LD_EXP 93
21836: AND
21837: IFFALSE 22059
21839: GO 21841
21841: DISABLE
21842: LD_INT 0
21844: PPUSH
21845: PPUSH
21846: PPUSH
21847: PPUSH
21848: PPUSH
21849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21850: LD_ADDR_VAR 0 6
21854: PUSH
21855: LD_INT 22
21857: PUSH
21858: LD_OWVAR 2
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 21
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 3
21879: PUSH
21880: LD_INT 23
21882: PUSH
21883: LD_INT 0
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: LIST
21898: PPUSH
21899: CALL_OW 69
21903: ST_TO_ADDR
// if not tmp then
21904: LD_VAR 0 6
21908: NOT
21909: IFFALSE 21913
// exit ;
21911: GO 22059
// s1 := rand ( 1 , 4 ) ;
21913: LD_ADDR_VAR 0 2
21917: PUSH
21918: LD_INT 1
21920: PPUSH
21921: LD_INT 4
21923: PPUSH
21924: CALL_OW 12
21928: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21929: LD_ADDR_VAR 0 4
21933: PUSH
21934: LD_VAR 0 6
21938: PUSH
21939: LD_INT 1
21941: ARRAY
21942: PPUSH
21943: LD_VAR 0 2
21947: PPUSH
21948: CALL_OW 259
21952: ST_TO_ADDR
// if s1 = 1 then
21953: LD_VAR 0 2
21957: PUSH
21958: LD_INT 1
21960: EQUAL
21961: IFFALSE 21981
// s2 := rand ( 2 , 4 ) else
21963: LD_ADDR_VAR 0 3
21967: PUSH
21968: LD_INT 2
21970: PPUSH
21971: LD_INT 4
21973: PPUSH
21974: CALL_OW 12
21978: ST_TO_ADDR
21979: GO 21989
// s2 := 1 ;
21981: LD_ADDR_VAR 0 3
21985: PUSH
21986: LD_INT 1
21988: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21989: LD_ADDR_VAR 0 5
21993: PUSH
21994: LD_VAR 0 6
21998: PUSH
21999: LD_INT 1
22001: ARRAY
22002: PPUSH
22003: LD_VAR 0 3
22007: PPUSH
22008: CALL_OW 259
22012: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22013: LD_VAR 0 6
22017: PUSH
22018: LD_INT 1
22020: ARRAY
22021: PPUSH
22022: LD_VAR 0 2
22026: PPUSH
22027: LD_VAR 0 5
22031: PPUSH
22032: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22036: LD_VAR 0 6
22040: PUSH
22041: LD_INT 1
22043: ARRAY
22044: PPUSH
22045: LD_VAR 0 3
22049: PPUSH
22050: LD_VAR 0 4
22054: PPUSH
22055: CALL_OW 237
// end ;
22059: PPOPN 6
22061: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22062: LD_EXP 47
22066: PUSH
22067: LD_EXP 94
22071: AND
22072: IFFALSE 22151
22074: GO 22076
22076: DISABLE
22077: LD_INT 0
22079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22080: LD_ADDR_VAR 0 1
22084: PUSH
22085: LD_INT 22
22087: PUSH
22088: LD_OWVAR 2
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 30
22099: PUSH
22100: LD_INT 3
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PPUSH
22111: CALL_OW 69
22115: ST_TO_ADDR
// if not tmp then
22116: LD_VAR 0 1
22120: NOT
22121: IFFALSE 22125
// exit ;
22123: GO 22151
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22125: LD_VAR 0 1
22129: PUSH
22130: LD_INT 1
22132: PPUSH
22133: LD_VAR 0 1
22137: PPUSH
22138: CALL_OW 12
22142: ARRAY
22143: PPUSH
22144: LD_INT 1
22146: PPUSH
22147: CALL_OW 234
// end ;
22151: PPOPN 1
22153: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22154: LD_EXP 47
22158: PUSH
22159: LD_EXP 95
22163: AND
22164: IFFALSE 22276
22166: GO 22168
22168: DISABLE
22169: LD_INT 0
22171: PPUSH
22172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22173: LD_ADDR_VAR 0 2
22177: PUSH
22178: LD_INT 22
22180: PUSH
22181: LD_OWVAR 2
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 2
22192: PUSH
22193: LD_INT 30
22195: PUSH
22196: LD_INT 27
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 30
22205: PUSH
22206: LD_INT 26
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 30
22215: PUSH
22216: LD_INT 28
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PPUSH
22233: CALL_OW 69
22237: ST_TO_ADDR
// if not tmp then
22238: LD_VAR 0 2
22242: NOT
22243: IFFALSE 22247
// exit ;
22245: GO 22276
// for i in tmp do
22247: LD_ADDR_VAR 0 1
22251: PUSH
22252: LD_VAR 0 2
22256: PUSH
22257: FOR_IN
22258: IFFALSE 22274
// SetLives ( i , 1 ) ;
22260: LD_VAR 0 1
22264: PPUSH
22265: LD_INT 1
22267: PPUSH
22268: CALL_OW 234
22272: GO 22257
22274: POP
22275: POP
// end ;
22276: PPOPN 2
22278: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22279: LD_EXP 47
22283: PUSH
22284: LD_EXP 96
22288: AND
22289: IFFALSE 22576
22291: GO 22293
22293: DISABLE
22294: LD_INT 0
22296: PPUSH
22297: PPUSH
22298: PPUSH
// begin i := rand ( 1 , 7 ) ;
22299: LD_ADDR_VAR 0 1
22303: PUSH
22304: LD_INT 1
22306: PPUSH
22307: LD_INT 7
22309: PPUSH
22310: CALL_OW 12
22314: ST_TO_ADDR
// case i of 1 :
22315: LD_VAR 0 1
22319: PUSH
22320: LD_INT 1
22322: DOUBLE
22323: EQUAL
22324: IFTRUE 22328
22326: GO 22338
22328: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22329: LD_STRING earthquake(getX(game), 0, 32)
22331: PPUSH
22332: CALL_OW 559
22336: GO 22576
22338: LD_INT 2
22340: DOUBLE
22341: EQUAL
22342: IFTRUE 22346
22344: GO 22360
22346: POP
// begin ToLua ( displayStucuk(); ) ;
22347: LD_STRING displayStucuk();
22349: PPUSH
22350: CALL_OW 559
// ResetFog ;
22354: CALL_OW 335
// end ; 3 :
22358: GO 22576
22360: LD_INT 3
22362: DOUBLE
22363: EQUAL
22364: IFTRUE 22368
22366: GO 22472
22368: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22369: LD_ADDR_VAR 0 2
22373: PUSH
22374: LD_INT 22
22376: PUSH
22377: LD_OWVAR 2
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 25
22388: PUSH
22389: LD_INT 1
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PPUSH
22400: CALL_OW 69
22404: ST_TO_ADDR
// if not tmp then
22405: LD_VAR 0 2
22409: NOT
22410: IFFALSE 22414
// exit ;
22412: GO 22576
// un := tmp [ rand ( 1 , tmp ) ] ;
22414: LD_ADDR_VAR 0 3
22418: PUSH
22419: LD_VAR 0 2
22423: PUSH
22424: LD_INT 1
22426: PPUSH
22427: LD_VAR 0 2
22431: PPUSH
22432: CALL_OW 12
22436: ARRAY
22437: ST_TO_ADDR
// if Crawls ( un ) then
22438: LD_VAR 0 3
22442: PPUSH
22443: CALL_OW 318
22447: IFFALSE 22458
// ComWalk ( un ) ;
22449: LD_VAR 0 3
22453: PPUSH
22454: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22458: LD_VAR 0 3
22462: PPUSH
22463: LD_INT 8
22465: PPUSH
22466: CALL_OW 336
// end ; 4 :
22470: GO 22576
22472: LD_INT 4
22474: DOUBLE
22475: EQUAL
22476: IFTRUE 22480
22478: GO 22554
22480: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22481: LD_ADDR_VAR 0 2
22485: PUSH
22486: LD_INT 22
22488: PUSH
22489: LD_OWVAR 2
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 30
22500: PUSH
22501: LD_INT 29
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PPUSH
22512: CALL_OW 69
22516: ST_TO_ADDR
// if not tmp then
22517: LD_VAR 0 2
22521: NOT
22522: IFFALSE 22526
// exit ;
22524: GO 22576
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22526: LD_VAR 0 2
22530: PUSH
22531: LD_INT 1
22533: ARRAY
22534: PPUSH
22535: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22539: LD_VAR 0 2
22543: PUSH
22544: LD_INT 1
22546: ARRAY
22547: PPUSH
22548: CALL_OW 65
// end ; 5 .. 7 :
22552: GO 22576
22554: LD_INT 5
22556: DOUBLE
22557: GREATEREQUAL
22558: IFFALSE 22566
22560: LD_INT 7
22562: DOUBLE
22563: LESSEQUAL
22564: IFTRUE 22568
22566: GO 22575
22568: POP
// StreamSibBomb ; end ;
22569: CALL 18813 0 0
22573: GO 22576
22575: POP
// end ;
22576: PPOPN 3
22578: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22579: LD_EXP 47
22583: PUSH
22584: LD_EXP 97
22588: AND
22589: IFFALSE 22745
22591: GO 22593
22593: DISABLE
22594: LD_INT 0
22596: PPUSH
22597: PPUSH
22598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22599: LD_ADDR_VAR 0 2
22603: PUSH
22604: LD_INT 81
22606: PUSH
22607: LD_OWVAR 2
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: LD_INT 21
22621: PUSH
22622: LD_INT 1
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 21
22631: PUSH
22632: LD_INT 2
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: LIST
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PPUSH
22648: CALL_OW 69
22652: ST_TO_ADDR
// if not tmp then
22653: LD_VAR 0 2
22657: NOT
22658: IFFALSE 22662
// exit ;
22660: GO 22745
// p := 0 ;
22662: LD_ADDR_VAR 0 3
22666: PUSH
22667: LD_INT 0
22669: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22670: LD_INT 35
22672: PPUSH
22673: CALL_OW 67
// p := p + 1 ;
22677: LD_ADDR_VAR 0 3
22681: PUSH
22682: LD_VAR 0 3
22686: PUSH
22687: LD_INT 1
22689: PLUS
22690: ST_TO_ADDR
// for i in tmp do
22691: LD_ADDR_VAR 0 1
22695: PUSH
22696: LD_VAR 0 2
22700: PUSH
22701: FOR_IN
22702: IFFALSE 22733
// if GetLives ( i ) < 1000 then
22704: LD_VAR 0 1
22708: PPUSH
22709: CALL_OW 256
22713: PUSH
22714: LD_INT 1000
22716: LESS
22717: IFFALSE 22731
// SetLives ( i , 1000 ) ;
22719: LD_VAR 0 1
22723: PPUSH
22724: LD_INT 1000
22726: PPUSH
22727: CALL_OW 234
22731: GO 22701
22733: POP
22734: POP
// until p > 20 ;
22735: LD_VAR 0 3
22739: PUSH
22740: LD_INT 20
22742: GREATER
22743: IFFALSE 22670
// end ;
22745: PPOPN 3
22747: END
// every 0 0$1 trigger StreamModeActive and sTime do
22748: LD_EXP 47
22752: PUSH
22753: LD_EXP 98
22757: AND
22758: IFFALSE 22793
22760: GO 22762
22762: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22763: LD_INT 28
22765: PPUSH
22766: LD_OWVAR 2
22770: PPUSH
22771: LD_INT 2
22773: PPUSH
22774: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22778: LD_INT 30
22780: PPUSH
22781: LD_OWVAR 2
22785: PPUSH
22786: LD_INT 2
22788: PPUSH
22789: CALL_OW 322
// end ;
22793: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22794: LD_EXP 47
22798: PUSH
22799: LD_EXP 99
22803: AND
22804: IFFALSE 22925
22806: GO 22808
22808: DISABLE
22809: LD_INT 0
22811: PPUSH
22812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22813: LD_ADDR_VAR 0 2
22817: PUSH
22818: LD_INT 22
22820: PUSH
22821: LD_OWVAR 2
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 21
22832: PUSH
22833: LD_INT 1
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 3
22842: PUSH
22843: LD_INT 23
22845: PUSH
22846: LD_INT 0
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: LIST
22861: PPUSH
22862: CALL_OW 69
22866: ST_TO_ADDR
// if not tmp then
22867: LD_VAR 0 2
22871: NOT
22872: IFFALSE 22876
// exit ;
22874: GO 22925
// for i in tmp do
22876: LD_ADDR_VAR 0 1
22880: PUSH
22881: LD_VAR 0 2
22885: PUSH
22886: FOR_IN
22887: IFFALSE 22923
// begin if Crawls ( i ) then
22889: LD_VAR 0 1
22893: PPUSH
22894: CALL_OW 318
22898: IFFALSE 22909
// ComWalk ( i ) ;
22900: LD_VAR 0 1
22904: PPUSH
22905: CALL_OW 138
// SetClass ( i , 2 ) ;
22909: LD_VAR 0 1
22913: PPUSH
22914: LD_INT 2
22916: PPUSH
22917: CALL_OW 336
// end ;
22921: GO 22886
22923: POP
22924: POP
// end ;
22925: PPOPN 2
22927: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22928: LD_EXP 47
22932: PUSH
22933: LD_EXP 100
22937: AND
22938: IFFALSE 23226
22940: GO 22942
22942: DISABLE
22943: LD_INT 0
22945: PPUSH
22946: PPUSH
22947: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22948: LD_OWVAR 2
22952: PPUSH
22953: LD_INT 9
22955: PPUSH
22956: LD_INT 1
22958: PPUSH
22959: LD_INT 1
22961: PPUSH
22962: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22966: LD_INT 9
22968: PPUSH
22969: LD_OWVAR 2
22973: PPUSH
22974: CALL_OW 343
// uc_side := 9 ;
22978: LD_ADDR_OWVAR 20
22982: PUSH
22983: LD_INT 9
22985: ST_TO_ADDR
// uc_nation := 2 ;
22986: LD_ADDR_OWVAR 21
22990: PUSH
22991: LD_INT 2
22993: ST_TO_ADDR
// hc_name := Dark Warrior ;
22994: LD_ADDR_OWVAR 26
22998: PUSH
22999: LD_STRING Dark Warrior
23001: ST_TO_ADDR
// hc_gallery :=  ;
23002: LD_ADDR_OWVAR 33
23006: PUSH
23007: LD_STRING 
23009: ST_TO_ADDR
// hc_noskilllimit := true ;
23010: LD_ADDR_OWVAR 76
23014: PUSH
23015: LD_INT 1
23017: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23018: LD_ADDR_OWVAR 31
23022: PUSH
23023: LD_INT 30
23025: PUSH
23026: LD_INT 30
23028: PUSH
23029: LD_INT 30
23031: PUSH
23032: LD_INT 30
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: ST_TO_ADDR
// un := CreateHuman ;
23041: LD_ADDR_VAR 0 3
23045: PUSH
23046: CALL_OW 44
23050: ST_TO_ADDR
// hc_noskilllimit := false ;
23051: LD_ADDR_OWVAR 76
23055: PUSH
23056: LD_INT 0
23058: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23059: LD_VAR 0 3
23063: PPUSH
23064: LD_INT 1
23066: PPUSH
23067: CALL_OW 51
// ToLua ( playRanger() ) ;
23071: LD_STRING playRanger()
23073: PPUSH
23074: CALL_OW 559
// p := 0 ;
23078: LD_ADDR_VAR 0 2
23082: PUSH
23083: LD_INT 0
23085: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23086: LD_INT 35
23088: PPUSH
23089: CALL_OW 67
// p := p + 1 ;
23093: LD_ADDR_VAR 0 2
23097: PUSH
23098: LD_VAR 0 2
23102: PUSH
23103: LD_INT 1
23105: PLUS
23106: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23107: LD_VAR 0 3
23111: PPUSH
23112: CALL_OW 256
23116: PUSH
23117: LD_INT 1000
23119: LESS
23120: IFFALSE 23134
// SetLives ( un , 1000 ) ;
23122: LD_VAR 0 3
23126: PPUSH
23127: LD_INT 1000
23129: PPUSH
23130: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23134: LD_VAR 0 3
23138: PPUSH
23139: LD_INT 81
23141: PUSH
23142: LD_OWVAR 2
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 91
23153: PUSH
23154: LD_VAR 0 3
23158: PUSH
23159: LD_INT 30
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: LIST
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PPUSH
23171: CALL_OW 69
23175: PPUSH
23176: LD_VAR 0 3
23180: PPUSH
23181: CALL_OW 74
23185: PPUSH
23186: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23190: LD_VAR 0 2
23194: PUSH
23195: LD_INT 80
23197: GREATER
23198: PUSH
23199: LD_VAR 0 3
23203: PPUSH
23204: CALL_OW 301
23208: OR
23209: IFFALSE 23086
// if un then
23211: LD_VAR 0 3
23215: IFFALSE 23226
// RemoveUnit ( un ) ;
23217: LD_VAR 0 3
23221: PPUSH
23222: CALL_OW 64
// end ;
23226: PPOPN 3
23228: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23229: LD_EXP 101
23233: IFFALSE 23349
23235: GO 23237
23237: DISABLE
23238: LD_INT 0
23240: PPUSH
23241: PPUSH
23242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23243: LD_ADDR_VAR 0 2
23247: PUSH
23248: LD_INT 81
23250: PUSH
23251: LD_OWVAR 2
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 21
23262: PUSH
23263: LD_INT 1
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PPUSH
23274: CALL_OW 69
23278: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23279: LD_STRING playComputer()
23281: PPUSH
23282: CALL_OW 559
// if not tmp then
23286: LD_VAR 0 2
23290: NOT
23291: IFFALSE 23295
// exit ;
23293: GO 23349
// for i in tmp do
23295: LD_ADDR_VAR 0 1
23299: PUSH
23300: LD_VAR 0 2
23304: PUSH
23305: FOR_IN
23306: IFFALSE 23347
// for j := 1 to 4 do
23308: LD_ADDR_VAR 0 3
23312: PUSH
23313: DOUBLE
23314: LD_INT 1
23316: DEC
23317: ST_TO_ADDR
23318: LD_INT 4
23320: PUSH
23321: FOR_TO
23322: IFFALSE 23343
// SetSkill ( i , j , 10 ) ;
23324: LD_VAR 0 1
23328: PPUSH
23329: LD_VAR 0 3
23333: PPUSH
23334: LD_INT 10
23336: PPUSH
23337: CALL_OW 237
23341: GO 23321
23343: POP
23344: POP
23345: GO 23305
23347: POP
23348: POP
// end ;
23349: PPOPN 3
23351: END
// every 0 0$1 trigger s30 do var i , tmp ;
23352: LD_EXP 102
23356: IFFALSE 23425
23358: GO 23360
23360: DISABLE
23361: LD_INT 0
23363: PPUSH
23364: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23365: LD_ADDR_VAR 0 2
23369: PUSH
23370: LD_INT 22
23372: PUSH
23373: LD_OWVAR 2
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PPUSH
23382: CALL_OW 69
23386: ST_TO_ADDR
// if not tmp then
23387: LD_VAR 0 2
23391: NOT
23392: IFFALSE 23396
// exit ;
23394: GO 23425
// for i in tmp do
23396: LD_ADDR_VAR 0 1
23400: PUSH
23401: LD_VAR 0 2
23405: PUSH
23406: FOR_IN
23407: IFFALSE 23423
// SetLives ( i , 300 ) ;
23409: LD_VAR 0 1
23413: PPUSH
23414: LD_INT 300
23416: PPUSH
23417: CALL_OW 234
23421: GO 23406
23423: POP
23424: POP
// end ;
23425: PPOPN 2
23427: END
// every 0 0$1 trigger s60 do var i , tmp ;
23428: LD_EXP 103
23432: IFFALSE 23501
23434: GO 23436
23436: DISABLE
23437: LD_INT 0
23439: PPUSH
23440: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23441: LD_ADDR_VAR 0 2
23445: PUSH
23446: LD_INT 22
23448: PUSH
23449: LD_OWVAR 2
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PPUSH
23458: CALL_OW 69
23462: ST_TO_ADDR
// if not tmp then
23463: LD_VAR 0 2
23467: NOT
23468: IFFALSE 23472
// exit ;
23470: GO 23501
// for i in tmp do
23472: LD_ADDR_VAR 0 1
23476: PUSH
23477: LD_VAR 0 2
23481: PUSH
23482: FOR_IN
23483: IFFALSE 23499
// SetLives ( i , 600 ) ;
23485: LD_VAR 0 1
23489: PPUSH
23490: LD_INT 600
23492: PPUSH
23493: CALL_OW 234
23497: GO 23482
23499: POP
23500: POP
// end ;
23501: PPOPN 2
23503: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23504: LD_INT 0
23506: PPUSH
// case cmd of 301 :
23507: LD_VAR 0 1
23511: PUSH
23512: LD_INT 301
23514: DOUBLE
23515: EQUAL
23516: IFTRUE 23520
23518: GO 23552
23520: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23521: LD_VAR 0 6
23525: PPUSH
23526: LD_VAR 0 7
23530: PPUSH
23531: LD_VAR 0 8
23535: PPUSH
23536: LD_VAR 0 4
23540: PPUSH
23541: LD_VAR 0 5
23545: PPUSH
23546: CALL 24761 0 5
23550: GO 23673
23552: LD_INT 302
23554: DOUBLE
23555: EQUAL
23556: IFTRUE 23560
23558: GO 23597
23560: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23561: LD_VAR 0 6
23565: PPUSH
23566: LD_VAR 0 7
23570: PPUSH
23571: LD_VAR 0 8
23575: PPUSH
23576: LD_VAR 0 9
23580: PPUSH
23581: LD_VAR 0 4
23585: PPUSH
23586: LD_VAR 0 5
23590: PPUSH
23591: CALL 24852 0 6
23595: GO 23673
23597: LD_INT 303
23599: DOUBLE
23600: EQUAL
23601: IFTRUE 23605
23603: GO 23642
23605: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23606: LD_VAR 0 6
23610: PPUSH
23611: LD_VAR 0 7
23615: PPUSH
23616: LD_VAR 0 8
23620: PPUSH
23621: LD_VAR 0 9
23625: PPUSH
23626: LD_VAR 0 4
23630: PPUSH
23631: LD_VAR 0 5
23635: PPUSH
23636: CALL 23678 0 6
23640: GO 23673
23642: LD_INT 304
23644: DOUBLE
23645: EQUAL
23646: IFTRUE 23650
23648: GO 23672
23650: POP
// hHackTeleport ( unit , x , y ) ; end ;
23651: LD_VAR 0 2
23655: PPUSH
23656: LD_VAR 0 4
23660: PPUSH
23661: LD_VAR 0 5
23665: PPUSH
23666: CALL 25445 0 3
23670: GO 23673
23672: POP
// end ;
23673: LD_VAR 0 12
23677: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23678: LD_INT 0
23680: PPUSH
23681: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23682: LD_VAR 0 1
23686: PUSH
23687: LD_INT 1
23689: LESS
23690: PUSH
23691: LD_VAR 0 1
23695: PUSH
23696: LD_INT 3
23698: GREATER
23699: OR
23700: PUSH
23701: LD_VAR 0 5
23705: PPUSH
23706: LD_VAR 0 6
23710: PPUSH
23711: CALL_OW 428
23715: OR
23716: IFFALSE 23720
// exit ;
23718: GO 24448
// uc_side := your_side ;
23720: LD_ADDR_OWVAR 20
23724: PUSH
23725: LD_OWVAR 2
23729: ST_TO_ADDR
// uc_nation := nation ;
23730: LD_ADDR_OWVAR 21
23734: PUSH
23735: LD_VAR 0 1
23739: ST_TO_ADDR
// bc_level = 1 ;
23740: LD_ADDR_OWVAR 43
23744: PUSH
23745: LD_INT 1
23747: ST_TO_ADDR
// case btype of 1 :
23748: LD_VAR 0 2
23752: PUSH
23753: LD_INT 1
23755: DOUBLE
23756: EQUAL
23757: IFTRUE 23761
23759: GO 23772
23761: POP
// bc_type := b_depot ; 2 :
23762: LD_ADDR_OWVAR 42
23766: PUSH
23767: LD_INT 0
23769: ST_TO_ADDR
23770: GO 24392
23772: LD_INT 2
23774: DOUBLE
23775: EQUAL
23776: IFTRUE 23780
23778: GO 23791
23780: POP
// bc_type := b_warehouse ; 3 :
23781: LD_ADDR_OWVAR 42
23785: PUSH
23786: LD_INT 1
23788: ST_TO_ADDR
23789: GO 24392
23791: LD_INT 3
23793: DOUBLE
23794: EQUAL
23795: IFTRUE 23799
23797: GO 23810
23799: POP
// bc_type := b_lab ; 4 .. 9 :
23800: LD_ADDR_OWVAR 42
23804: PUSH
23805: LD_INT 6
23807: ST_TO_ADDR
23808: GO 24392
23810: LD_INT 4
23812: DOUBLE
23813: GREATEREQUAL
23814: IFFALSE 23822
23816: LD_INT 9
23818: DOUBLE
23819: LESSEQUAL
23820: IFTRUE 23824
23822: GO 23884
23824: POP
// begin bc_type := b_lab_half ;
23825: LD_ADDR_OWVAR 42
23829: PUSH
23830: LD_INT 7
23832: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23833: LD_ADDR_OWVAR 44
23837: PUSH
23838: LD_INT 10
23840: PUSH
23841: LD_INT 11
23843: PUSH
23844: LD_INT 12
23846: PUSH
23847: LD_INT 15
23849: PUSH
23850: LD_INT 14
23852: PUSH
23853: LD_INT 13
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: PUSH
23864: LD_VAR 0 2
23868: PUSH
23869: LD_INT 3
23871: MINUS
23872: ARRAY
23873: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
23874: LD_ADDR_OWVAR 45
23878: PUSH
23879: LD_INT 9
23881: ST_TO_ADDR
// end ; 10 .. 13 :
23882: GO 24392
23884: LD_INT 10
23886: DOUBLE
23887: GREATEREQUAL
23888: IFFALSE 23896
23890: LD_INT 13
23892: DOUBLE
23893: LESSEQUAL
23894: IFTRUE 23898
23896: GO 23975
23898: POP
// begin bc_type := b_lab_full ;
23899: LD_ADDR_OWVAR 42
23903: PUSH
23904: LD_INT 8
23906: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23907: LD_ADDR_OWVAR 44
23911: PUSH
23912: LD_INT 10
23914: PUSH
23915: LD_INT 12
23917: PUSH
23918: LD_INT 14
23920: PUSH
23921: LD_INT 13
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: PUSH
23930: LD_VAR 0 2
23934: PUSH
23935: LD_INT 9
23937: MINUS
23938: ARRAY
23939: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23940: LD_ADDR_OWVAR 45
23944: PUSH
23945: LD_INT 11
23947: PUSH
23948: LD_INT 15
23950: PUSH
23951: LD_INT 12
23953: PUSH
23954: LD_INT 15
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: PUSH
23963: LD_VAR 0 2
23967: PUSH
23968: LD_INT 9
23970: MINUS
23971: ARRAY
23972: ST_TO_ADDR
// end ; 14 :
23973: GO 24392
23975: LD_INT 14
23977: DOUBLE
23978: EQUAL
23979: IFTRUE 23983
23981: GO 23994
23983: POP
// bc_type := b_workshop ; 15 :
23984: LD_ADDR_OWVAR 42
23988: PUSH
23989: LD_INT 2
23991: ST_TO_ADDR
23992: GO 24392
23994: LD_INT 15
23996: DOUBLE
23997: EQUAL
23998: IFTRUE 24002
24000: GO 24013
24002: POP
// bc_type := b_factory ; 16 :
24003: LD_ADDR_OWVAR 42
24007: PUSH
24008: LD_INT 3
24010: ST_TO_ADDR
24011: GO 24392
24013: LD_INT 16
24015: DOUBLE
24016: EQUAL
24017: IFTRUE 24021
24019: GO 24032
24021: POP
// bc_type := b_ext_gun ; 17 :
24022: LD_ADDR_OWVAR 42
24026: PUSH
24027: LD_INT 17
24029: ST_TO_ADDR
24030: GO 24392
24032: LD_INT 17
24034: DOUBLE
24035: EQUAL
24036: IFTRUE 24040
24038: GO 24068
24040: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24041: LD_ADDR_OWVAR 42
24045: PUSH
24046: LD_INT 19
24048: PUSH
24049: LD_INT 23
24051: PUSH
24052: LD_INT 19
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: LIST
24059: PUSH
24060: LD_VAR 0 1
24064: ARRAY
24065: ST_TO_ADDR
24066: GO 24392
24068: LD_INT 18
24070: DOUBLE
24071: EQUAL
24072: IFTRUE 24076
24074: GO 24087
24076: POP
// bc_type := b_ext_radar ; 19 :
24077: LD_ADDR_OWVAR 42
24081: PUSH
24082: LD_INT 20
24084: ST_TO_ADDR
24085: GO 24392
24087: LD_INT 19
24089: DOUBLE
24090: EQUAL
24091: IFTRUE 24095
24093: GO 24106
24095: POP
// bc_type := b_ext_radio ; 20 :
24096: LD_ADDR_OWVAR 42
24100: PUSH
24101: LD_INT 22
24103: ST_TO_ADDR
24104: GO 24392
24106: LD_INT 20
24108: DOUBLE
24109: EQUAL
24110: IFTRUE 24114
24112: GO 24125
24114: POP
// bc_type := b_ext_siberium ; 21 :
24115: LD_ADDR_OWVAR 42
24119: PUSH
24120: LD_INT 21
24122: ST_TO_ADDR
24123: GO 24392
24125: LD_INT 21
24127: DOUBLE
24128: EQUAL
24129: IFTRUE 24133
24131: GO 24144
24133: POP
// bc_type := b_ext_computer ; 22 :
24134: LD_ADDR_OWVAR 42
24138: PUSH
24139: LD_INT 24
24141: ST_TO_ADDR
24142: GO 24392
24144: LD_INT 22
24146: DOUBLE
24147: EQUAL
24148: IFTRUE 24152
24150: GO 24163
24152: POP
// bc_type := b_ext_track ; 23 :
24153: LD_ADDR_OWVAR 42
24157: PUSH
24158: LD_INT 16
24160: ST_TO_ADDR
24161: GO 24392
24163: LD_INT 23
24165: DOUBLE
24166: EQUAL
24167: IFTRUE 24171
24169: GO 24182
24171: POP
// bc_type := b_ext_laser ; 24 :
24172: LD_ADDR_OWVAR 42
24176: PUSH
24177: LD_INT 25
24179: ST_TO_ADDR
24180: GO 24392
24182: LD_INT 24
24184: DOUBLE
24185: EQUAL
24186: IFTRUE 24190
24188: GO 24201
24190: POP
// bc_type := b_control_tower ; 25 :
24191: LD_ADDR_OWVAR 42
24195: PUSH
24196: LD_INT 36
24198: ST_TO_ADDR
24199: GO 24392
24201: LD_INT 25
24203: DOUBLE
24204: EQUAL
24205: IFTRUE 24209
24207: GO 24220
24209: POP
// bc_type := b_breastwork ; 26 :
24210: LD_ADDR_OWVAR 42
24214: PUSH
24215: LD_INT 31
24217: ST_TO_ADDR
24218: GO 24392
24220: LD_INT 26
24222: DOUBLE
24223: EQUAL
24224: IFTRUE 24228
24226: GO 24239
24228: POP
// bc_type := b_bunker ; 27 :
24229: LD_ADDR_OWVAR 42
24233: PUSH
24234: LD_INT 32
24236: ST_TO_ADDR
24237: GO 24392
24239: LD_INT 27
24241: DOUBLE
24242: EQUAL
24243: IFTRUE 24247
24245: GO 24258
24247: POP
// bc_type := b_turret ; 28 :
24248: LD_ADDR_OWVAR 42
24252: PUSH
24253: LD_INT 33
24255: ST_TO_ADDR
24256: GO 24392
24258: LD_INT 28
24260: DOUBLE
24261: EQUAL
24262: IFTRUE 24266
24264: GO 24277
24266: POP
// bc_type := b_armoury ; 29 :
24267: LD_ADDR_OWVAR 42
24271: PUSH
24272: LD_INT 4
24274: ST_TO_ADDR
24275: GO 24392
24277: LD_INT 29
24279: DOUBLE
24280: EQUAL
24281: IFTRUE 24285
24283: GO 24296
24285: POP
// bc_type := b_barracks ; 30 :
24286: LD_ADDR_OWVAR 42
24290: PUSH
24291: LD_INT 5
24293: ST_TO_ADDR
24294: GO 24392
24296: LD_INT 30
24298: DOUBLE
24299: EQUAL
24300: IFTRUE 24304
24302: GO 24315
24304: POP
// bc_type := b_solar_power ; 31 :
24305: LD_ADDR_OWVAR 42
24309: PUSH
24310: LD_INT 27
24312: ST_TO_ADDR
24313: GO 24392
24315: LD_INT 31
24317: DOUBLE
24318: EQUAL
24319: IFTRUE 24323
24321: GO 24334
24323: POP
// bc_type := b_oil_power ; 32 :
24324: LD_ADDR_OWVAR 42
24328: PUSH
24329: LD_INT 26
24331: ST_TO_ADDR
24332: GO 24392
24334: LD_INT 32
24336: DOUBLE
24337: EQUAL
24338: IFTRUE 24342
24340: GO 24353
24342: POP
// bc_type := b_siberite_power ; 33 :
24343: LD_ADDR_OWVAR 42
24347: PUSH
24348: LD_INT 28
24350: ST_TO_ADDR
24351: GO 24392
24353: LD_INT 33
24355: DOUBLE
24356: EQUAL
24357: IFTRUE 24361
24359: GO 24372
24361: POP
// bc_type := b_oil_mine ; 34 :
24362: LD_ADDR_OWVAR 42
24366: PUSH
24367: LD_INT 29
24369: ST_TO_ADDR
24370: GO 24392
24372: LD_INT 34
24374: DOUBLE
24375: EQUAL
24376: IFTRUE 24380
24378: GO 24391
24380: POP
// bc_type := b_siberite_mine ; end ;
24381: LD_ADDR_OWVAR 42
24385: PUSH
24386: LD_INT 30
24388: ST_TO_ADDR
24389: GO 24392
24391: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24392: LD_ADDR_VAR 0 8
24396: PUSH
24397: LD_VAR 0 5
24401: PPUSH
24402: LD_VAR 0 6
24406: PPUSH
24407: LD_VAR 0 3
24411: PPUSH
24412: CALL_OW 47
24416: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24417: LD_OWVAR 42
24421: PUSH
24422: LD_INT 32
24424: PUSH
24425: LD_INT 33
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: IN
24432: IFFALSE 24448
// PlaceWeaponTurret ( b , weapon ) ;
24434: LD_VAR 0 8
24438: PPUSH
24439: LD_VAR 0 4
24443: PPUSH
24444: CALL_OW 431
// end ;
24448: LD_VAR 0 7
24452: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24453: LD_INT 0
24455: PPUSH
24456: PPUSH
24457: PPUSH
24458: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24459: LD_ADDR_VAR 0 4
24463: PUSH
24464: LD_INT 22
24466: PUSH
24467: LD_OWVAR 2
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 2
24478: PUSH
24479: LD_INT 30
24481: PUSH
24482: LD_INT 0
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 30
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: LIST
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PPUSH
24508: CALL_OW 69
24512: ST_TO_ADDR
// if not tmp then
24513: LD_VAR 0 4
24517: NOT
24518: IFFALSE 24522
// exit ;
24520: GO 24581
// for i in tmp do
24522: LD_ADDR_VAR 0 2
24526: PUSH
24527: LD_VAR 0 4
24531: PUSH
24532: FOR_IN
24533: IFFALSE 24579
// for j = 1 to 3 do
24535: LD_ADDR_VAR 0 3
24539: PUSH
24540: DOUBLE
24541: LD_INT 1
24543: DEC
24544: ST_TO_ADDR
24545: LD_INT 3
24547: PUSH
24548: FOR_TO
24549: IFFALSE 24575
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24551: LD_VAR 0 2
24555: PPUSH
24556: CALL_OW 274
24560: PPUSH
24561: LD_VAR 0 3
24565: PPUSH
24566: LD_INT 99999
24568: PPUSH
24569: CALL_OW 277
24573: GO 24548
24575: POP
24576: POP
24577: GO 24532
24579: POP
24580: POP
// end ;
24581: LD_VAR 0 1
24585: RET
// export function hHackSetLevel10 ; var i , j ; begin
24586: LD_INT 0
24588: PPUSH
24589: PPUSH
24590: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24591: LD_ADDR_VAR 0 2
24595: PUSH
24596: LD_INT 21
24598: PUSH
24599: LD_INT 1
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PPUSH
24606: CALL_OW 69
24610: PUSH
24611: FOR_IN
24612: IFFALSE 24664
// if IsSelected ( i ) then
24614: LD_VAR 0 2
24618: PPUSH
24619: CALL_OW 306
24623: IFFALSE 24662
// begin for j := 1 to 4 do
24625: LD_ADDR_VAR 0 3
24629: PUSH
24630: DOUBLE
24631: LD_INT 1
24633: DEC
24634: ST_TO_ADDR
24635: LD_INT 4
24637: PUSH
24638: FOR_TO
24639: IFFALSE 24660
// SetSkill ( i , j , 10 ) ;
24641: LD_VAR 0 2
24645: PPUSH
24646: LD_VAR 0 3
24650: PPUSH
24651: LD_INT 10
24653: PPUSH
24654: CALL_OW 237
24658: GO 24638
24660: POP
24661: POP
// end ;
24662: GO 24611
24664: POP
24665: POP
// end ;
24666: LD_VAR 0 1
24670: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24671: LD_INT 0
24673: PPUSH
24674: PPUSH
24675: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24676: LD_ADDR_VAR 0 2
24680: PUSH
24681: LD_INT 22
24683: PUSH
24684: LD_OWVAR 2
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 21
24695: PUSH
24696: LD_INT 1
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PPUSH
24707: CALL_OW 69
24711: PUSH
24712: FOR_IN
24713: IFFALSE 24754
// begin for j := 1 to 4 do
24715: LD_ADDR_VAR 0 3
24719: PUSH
24720: DOUBLE
24721: LD_INT 1
24723: DEC
24724: ST_TO_ADDR
24725: LD_INT 4
24727: PUSH
24728: FOR_TO
24729: IFFALSE 24750
// SetSkill ( i , j , 10 ) ;
24731: LD_VAR 0 2
24735: PPUSH
24736: LD_VAR 0 3
24740: PPUSH
24741: LD_INT 10
24743: PPUSH
24744: CALL_OW 237
24748: GO 24728
24750: POP
24751: POP
// end ;
24752: GO 24712
24754: POP
24755: POP
// end ;
24756: LD_VAR 0 1
24760: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24761: LD_INT 0
24763: PPUSH
// uc_side := your_side ;
24764: LD_ADDR_OWVAR 20
24768: PUSH
24769: LD_OWVAR 2
24773: ST_TO_ADDR
// uc_nation := nation ;
24774: LD_ADDR_OWVAR 21
24778: PUSH
24779: LD_VAR 0 1
24783: ST_TO_ADDR
// InitHc ;
24784: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24788: LD_INT 0
24790: PPUSH
24791: LD_VAR 0 2
24795: PPUSH
24796: LD_VAR 0 3
24800: PPUSH
24801: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24805: LD_VAR 0 4
24809: PPUSH
24810: LD_VAR 0 5
24814: PPUSH
24815: CALL_OW 428
24819: PUSH
24820: LD_INT 0
24822: EQUAL
24823: IFFALSE 24847
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24825: CALL_OW 44
24829: PPUSH
24830: LD_VAR 0 4
24834: PPUSH
24835: LD_VAR 0 5
24839: PPUSH
24840: LD_INT 1
24842: PPUSH
24843: CALL_OW 48
// end ;
24847: LD_VAR 0 6
24851: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24852: LD_INT 0
24854: PPUSH
24855: PPUSH
// uc_side := your_side ;
24856: LD_ADDR_OWVAR 20
24860: PUSH
24861: LD_OWVAR 2
24865: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24866: LD_VAR 0 1
24870: PUSH
24871: LD_INT 1
24873: PUSH
24874: LD_INT 2
24876: PUSH
24877: LD_INT 3
24879: PUSH
24880: LD_INT 4
24882: PUSH
24883: LD_INT 5
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: IN
24893: IFFALSE 24905
// uc_nation := nation_american else
24895: LD_ADDR_OWVAR 21
24899: PUSH
24900: LD_INT 1
24902: ST_TO_ADDR
24903: GO 24948
// if chassis in [ 11 , 12 , 13 , 14 ] then
24905: LD_VAR 0 1
24909: PUSH
24910: LD_INT 11
24912: PUSH
24913: LD_INT 12
24915: PUSH
24916: LD_INT 13
24918: PUSH
24919: LD_INT 14
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: IN
24928: IFFALSE 24940
// uc_nation := nation_arabian else
24930: LD_ADDR_OWVAR 21
24934: PUSH
24935: LD_INT 2
24937: ST_TO_ADDR
24938: GO 24948
// uc_nation := nation_russian ;
24940: LD_ADDR_OWVAR 21
24944: PUSH
24945: LD_INT 3
24947: ST_TO_ADDR
// vc_chassis := chassis ;
24948: LD_ADDR_OWVAR 37
24952: PUSH
24953: LD_VAR 0 1
24957: ST_TO_ADDR
// vc_engine := engine ;
24958: LD_ADDR_OWVAR 39
24962: PUSH
24963: LD_VAR 0 2
24967: ST_TO_ADDR
// vc_control := control ;
24968: LD_ADDR_OWVAR 38
24972: PUSH
24973: LD_VAR 0 3
24977: ST_TO_ADDR
// vc_weapon := weapon ;
24978: LD_ADDR_OWVAR 40
24982: PUSH
24983: LD_VAR 0 4
24987: ST_TO_ADDR
// un := CreateVehicle ;
24988: LD_ADDR_VAR 0 8
24992: PUSH
24993: CALL_OW 45
24997: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24998: LD_VAR 0 8
25002: PPUSH
25003: LD_INT 0
25005: PPUSH
25006: LD_INT 5
25008: PPUSH
25009: CALL_OW 12
25013: PPUSH
25014: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25018: LD_VAR 0 8
25022: PPUSH
25023: LD_VAR 0 5
25027: PPUSH
25028: LD_VAR 0 6
25032: PPUSH
25033: LD_INT 1
25035: PPUSH
25036: CALL_OW 48
// end ;
25040: LD_VAR 0 7
25044: RET
// export hInvincible ; every 1 do
25045: GO 25047
25047: DISABLE
// hInvincible := [ ] ;
25048: LD_ADDR_EXP 104
25052: PUSH
25053: EMPTY
25054: ST_TO_ADDR
25055: END
// every 10 do var i ;
25056: GO 25058
25058: DISABLE
25059: LD_INT 0
25061: PPUSH
// begin enable ;
25062: ENABLE
// if not hInvincible then
25063: LD_EXP 104
25067: NOT
25068: IFFALSE 25072
// exit ;
25070: GO 25116
// for i in hInvincible do
25072: LD_ADDR_VAR 0 1
25076: PUSH
25077: LD_EXP 104
25081: PUSH
25082: FOR_IN
25083: IFFALSE 25114
// if GetLives ( i ) < 1000 then
25085: LD_VAR 0 1
25089: PPUSH
25090: CALL_OW 256
25094: PUSH
25095: LD_INT 1000
25097: LESS
25098: IFFALSE 25112
// SetLives ( i , 1000 ) ;
25100: LD_VAR 0 1
25104: PPUSH
25105: LD_INT 1000
25107: PPUSH
25108: CALL_OW 234
25112: GO 25082
25114: POP
25115: POP
// end ;
25116: PPOPN 1
25118: END
// export function hHackInvincible ; var i ; begin
25119: LD_INT 0
25121: PPUSH
25122: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25123: LD_ADDR_VAR 0 2
25127: PUSH
25128: LD_INT 2
25130: PUSH
25131: LD_INT 21
25133: PUSH
25134: LD_INT 1
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 21
25143: PUSH
25144: LD_INT 2
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: LIST
25155: PPUSH
25156: CALL_OW 69
25160: PUSH
25161: FOR_IN
25162: IFFALSE 25223
// if IsSelected ( i ) then
25164: LD_VAR 0 2
25168: PPUSH
25169: CALL_OW 306
25173: IFFALSE 25221
// begin if i in hInvincible then
25175: LD_VAR 0 2
25179: PUSH
25180: LD_EXP 104
25184: IN
25185: IFFALSE 25205
// hInvincible := hInvincible diff i else
25187: LD_ADDR_EXP 104
25191: PUSH
25192: LD_EXP 104
25196: PUSH
25197: LD_VAR 0 2
25201: DIFF
25202: ST_TO_ADDR
25203: GO 25221
// hInvincible := hInvincible union i ;
25205: LD_ADDR_EXP 104
25209: PUSH
25210: LD_EXP 104
25214: PUSH
25215: LD_VAR 0 2
25219: UNION
25220: ST_TO_ADDR
// end ;
25221: GO 25161
25223: POP
25224: POP
// end ;
25225: LD_VAR 0 1
25229: RET
// export function hHackInvisible ; var i , j ; begin
25230: LD_INT 0
25232: PPUSH
25233: PPUSH
25234: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25235: LD_ADDR_VAR 0 2
25239: PUSH
25240: LD_INT 21
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PPUSH
25250: CALL_OW 69
25254: PUSH
25255: FOR_IN
25256: IFFALSE 25280
// if IsSelected ( i ) then
25258: LD_VAR 0 2
25262: PPUSH
25263: CALL_OW 306
25267: IFFALSE 25278
// ComForceInvisible ( i ) ;
25269: LD_VAR 0 2
25273: PPUSH
25274: CALL_OW 496
25278: GO 25255
25280: POP
25281: POP
// end ;
25282: LD_VAR 0 1
25286: RET
// export function hHackChangeYourSide ; begin
25287: LD_INT 0
25289: PPUSH
// if your_side = 8 then
25290: LD_OWVAR 2
25294: PUSH
25295: LD_INT 8
25297: EQUAL
25298: IFFALSE 25310
// your_side := 0 else
25300: LD_ADDR_OWVAR 2
25304: PUSH
25305: LD_INT 0
25307: ST_TO_ADDR
25308: GO 25324
// your_side := your_side + 1 ;
25310: LD_ADDR_OWVAR 2
25314: PUSH
25315: LD_OWVAR 2
25319: PUSH
25320: LD_INT 1
25322: PLUS
25323: ST_TO_ADDR
// end ;
25324: LD_VAR 0 1
25328: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25329: LD_INT 0
25331: PPUSH
25332: PPUSH
25333: PPUSH
// for i in all_units do
25334: LD_ADDR_VAR 0 2
25338: PUSH
25339: LD_OWVAR 3
25343: PUSH
25344: FOR_IN
25345: IFFALSE 25423
// if IsSelected ( i ) then
25347: LD_VAR 0 2
25351: PPUSH
25352: CALL_OW 306
25356: IFFALSE 25421
// begin j := GetSide ( i ) ;
25358: LD_ADDR_VAR 0 3
25362: PUSH
25363: LD_VAR 0 2
25367: PPUSH
25368: CALL_OW 255
25372: ST_TO_ADDR
// if j = 8 then
25373: LD_VAR 0 3
25377: PUSH
25378: LD_INT 8
25380: EQUAL
25381: IFFALSE 25393
// j := 0 else
25383: LD_ADDR_VAR 0 3
25387: PUSH
25388: LD_INT 0
25390: ST_TO_ADDR
25391: GO 25407
// j := j + 1 ;
25393: LD_ADDR_VAR 0 3
25397: PUSH
25398: LD_VAR 0 3
25402: PUSH
25403: LD_INT 1
25405: PLUS
25406: ST_TO_ADDR
// SetSide ( i , j ) ;
25407: LD_VAR 0 2
25411: PPUSH
25412: LD_VAR 0 3
25416: PPUSH
25417: CALL_OW 235
// end ;
25421: GO 25344
25423: POP
25424: POP
// end ;
25425: LD_VAR 0 1
25429: RET
// export function hHackFog ; begin
25430: LD_INT 0
25432: PPUSH
// FogOff ( true ) ;
25433: LD_INT 1
25435: PPUSH
25436: CALL_OW 344
// end ;
25440: LD_VAR 0 1
25444: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25445: LD_INT 0
25447: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25448: LD_VAR 0 1
25452: PPUSH
25453: LD_VAR 0 2
25457: PPUSH
25458: LD_VAR 0 3
25462: PPUSH
25463: LD_INT 1
25465: PPUSH
25466: LD_INT 1
25468: PPUSH
25469: CALL_OW 483
// CenterOnXY ( x , y ) ;
25473: LD_VAR 0 2
25477: PPUSH
25478: LD_VAR 0 3
25482: PPUSH
25483: CALL_OW 84
// end ;
25487: LD_VAR 0 4
25491: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25492: LD_INT 0
25494: PPUSH
25495: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25496: LD_VAR 0 1
25500: NOT
25501: PUSH
25502: LD_VAR 0 2
25506: PPUSH
25507: LD_VAR 0 3
25511: PPUSH
25512: CALL_OW 488
25516: NOT
25517: OR
25518: PUSH
25519: LD_VAR 0 1
25523: PPUSH
25524: CALL_OW 266
25528: PUSH
25529: LD_INT 3
25531: NONEQUAL
25532: PUSH
25533: LD_VAR 0 1
25537: PPUSH
25538: CALL_OW 247
25542: PUSH
25543: LD_INT 1
25545: EQUAL
25546: NOT
25547: AND
25548: OR
25549: IFFALSE 25553
// exit ;
25551: GO 25702
// if GetType ( factory ) = unit_human then
25553: LD_VAR 0 1
25557: PPUSH
25558: CALL_OW 247
25562: PUSH
25563: LD_INT 1
25565: EQUAL
25566: IFFALSE 25583
// factory := IsInUnit ( factory ) ;
25568: LD_ADDR_VAR 0 1
25572: PUSH
25573: LD_VAR 0 1
25577: PPUSH
25578: CALL_OW 310
25582: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25583: LD_VAR 0 1
25587: PPUSH
25588: CALL_OW 266
25592: PUSH
25593: LD_INT 3
25595: NONEQUAL
25596: IFFALSE 25600
// exit ;
25598: GO 25702
// if HexInfo ( x , y ) = factory then
25600: LD_VAR 0 2
25604: PPUSH
25605: LD_VAR 0 3
25609: PPUSH
25610: CALL_OW 428
25614: PUSH
25615: LD_VAR 0 1
25619: EQUAL
25620: IFFALSE 25647
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25622: LD_ADDR_EXP 105
25626: PUSH
25627: LD_EXP 105
25631: PPUSH
25632: LD_VAR 0 1
25636: PPUSH
25637: LD_INT 0
25639: PPUSH
25640: CALL_OW 1
25644: ST_TO_ADDR
25645: GO 25698
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25647: LD_ADDR_EXP 105
25651: PUSH
25652: LD_EXP 105
25656: PPUSH
25657: LD_VAR 0 1
25661: PPUSH
25662: LD_VAR 0 1
25666: PPUSH
25667: CALL_OW 255
25671: PUSH
25672: LD_VAR 0 1
25676: PUSH
25677: LD_VAR 0 2
25681: PUSH
25682: LD_VAR 0 3
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: PPUSH
25693: CALL_OW 1
25697: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25698: CALL 25707 0 0
// end ;
25702: LD_VAR 0 4
25706: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25707: LD_INT 0
25709: PPUSH
25710: PPUSH
25711: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25712: LD_STRING resetFactoryWaypoint();
25714: PPUSH
25715: CALL_OW 559
// if factoryWaypoints then
25719: LD_EXP 105
25723: IFFALSE 25849
// begin list := PrepareArray ( factoryWaypoints ) ;
25725: LD_ADDR_VAR 0 3
25729: PUSH
25730: LD_EXP 105
25734: PPUSH
25735: CALL 72991 0 1
25739: ST_TO_ADDR
// for i := 1 to list do
25740: LD_ADDR_VAR 0 2
25744: PUSH
25745: DOUBLE
25746: LD_INT 1
25748: DEC
25749: ST_TO_ADDR
25750: LD_VAR 0 3
25754: PUSH
25755: FOR_TO
25756: IFFALSE 25847
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25758: LD_STRING setFactoryWaypointXY(
25760: PUSH
25761: LD_VAR 0 3
25765: PUSH
25766: LD_VAR 0 2
25770: ARRAY
25771: PUSH
25772: LD_INT 1
25774: ARRAY
25775: STR
25776: PUSH
25777: LD_STRING ,
25779: STR
25780: PUSH
25781: LD_VAR 0 3
25785: PUSH
25786: LD_VAR 0 2
25790: ARRAY
25791: PUSH
25792: LD_INT 2
25794: ARRAY
25795: STR
25796: PUSH
25797: LD_STRING ,
25799: STR
25800: PUSH
25801: LD_VAR 0 3
25805: PUSH
25806: LD_VAR 0 2
25810: ARRAY
25811: PUSH
25812: LD_INT 3
25814: ARRAY
25815: STR
25816: PUSH
25817: LD_STRING ,
25819: STR
25820: PUSH
25821: LD_VAR 0 3
25825: PUSH
25826: LD_VAR 0 2
25830: ARRAY
25831: PUSH
25832: LD_INT 4
25834: ARRAY
25835: STR
25836: PUSH
25837: LD_STRING )
25839: STR
25840: PPUSH
25841: CALL_OW 559
25845: GO 25755
25847: POP
25848: POP
// end ; end ;
25849: LD_VAR 0 1
25853: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25854: LD_INT 0
25856: PPUSH
// if HexInfo ( x , y ) = warehouse then
25857: LD_VAR 0 2
25861: PPUSH
25862: LD_VAR 0 3
25866: PPUSH
25867: CALL_OW 428
25871: PUSH
25872: LD_VAR 0 1
25876: EQUAL
25877: IFFALSE 25904
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25879: LD_ADDR_EXP 106
25883: PUSH
25884: LD_EXP 106
25888: PPUSH
25889: LD_VAR 0 1
25893: PPUSH
25894: LD_INT 0
25896: PPUSH
25897: CALL_OW 1
25901: ST_TO_ADDR
25902: GO 25955
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25904: LD_ADDR_EXP 106
25908: PUSH
25909: LD_EXP 106
25913: PPUSH
25914: LD_VAR 0 1
25918: PPUSH
25919: LD_VAR 0 1
25923: PPUSH
25924: CALL_OW 255
25928: PUSH
25929: LD_VAR 0 1
25933: PUSH
25934: LD_VAR 0 2
25938: PUSH
25939: LD_VAR 0 3
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: PPUSH
25950: CALL_OW 1
25954: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25955: CALL 25964 0 0
// end ;
25959: LD_VAR 0 4
25963: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25964: LD_INT 0
25966: PPUSH
25967: PPUSH
25968: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25969: LD_STRING resetWarehouseGatheringPoints();
25971: PPUSH
25972: CALL_OW 559
// if warehouseGatheringPoints then
25976: LD_EXP 106
25980: IFFALSE 26106
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25982: LD_ADDR_VAR 0 3
25986: PUSH
25987: LD_EXP 106
25991: PPUSH
25992: CALL 72991 0 1
25996: ST_TO_ADDR
// for i := 1 to list do
25997: LD_ADDR_VAR 0 2
26001: PUSH
26002: DOUBLE
26003: LD_INT 1
26005: DEC
26006: ST_TO_ADDR
26007: LD_VAR 0 3
26011: PUSH
26012: FOR_TO
26013: IFFALSE 26104
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26015: LD_STRING setWarehouseGatheringPointXY(
26017: PUSH
26018: LD_VAR 0 3
26022: PUSH
26023: LD_VAR 0 2
26027: ARRAY
26028: PUSH
26029: LD_INT 1
26031: ARRAY
26032: STR
26033: PUSH
26034: LD_STRING ,
26036: STR
26037: PUSH
26038: LD_VAR 0 3
26042: PUSH
26043: LD_VAR 0 2
26047: ARRAY
26048: PUSH
26049: LD_INT 2
26051: ARRAY
26052: STR
26053: PUSH
26054: LD_STRING ,
26056: STR
26057: PUSH
26058: LD_VAR 0 3
26062: PUSH
26063: LD_VAR 0 2
26067: ARRAY
26068: PUSH
26069: LD_INT 3
26071: ARRAY
26072: STR
26073: PUSH
26074: LD_STRING ,
26076: STR
26077: PUSH
26078: LD_VAR 0 3
26082: PUSH
26083: LD_VAR 0 2
26087: ARRAY
26088: PUSH
26089: LD_INT 4
26091: ARRAY
26092: STR
26093: PUSH
26094: LD_STRING )
26096: STR
26097: PPUSH
26098: CALL_OW 559
26102: GO 26012
26104: POP
26105: POP
// end ; end ;
26106: LD_VAR 0 1
26110: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26111: LD_EXP 106
26115: IFFALSE 26800
26117: GO 26119
26119: DISABLE
26120: LD_INT 0
26122: PPUSH
26123: PPUSH
26124: PPUSH
26125: PPUSH
26126: PPUSH
26127: PPUSH
26128: PPUSH
26129: PPUSH
26130: PPUSH
// begin enable ;
26131: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26132: LD_ADDR_VAR 0 3
26136: PUSH
26137: LD_EXP 106
26141: PPUSH
26142: CALL 72991 0 1
26146: ST_TO_ADDR
// if not list then
26147: LD_VAR 0 3
26151: NOT
26152: IFFALSE 26156
// exit ;
26154: GO 26800
// for i := 1 to list do
26156: LD_ADDR_VAR 0 1
26160: PUSH
26161: DOUBLE
26162: LD_INT 1
26164: DEC
26165: ST_TO_ADDR
26166: LD_VAR 0 3
26170: PUSH
26171: FOR_TO
26172: IFFALSE 26798
// begin depot := list [ i ] [ 2 ] ;
26174: LD_ADDR_VAR 0 8
26178: PUSH
26179: LD_VAR 0 3
26183: PUSH
26184: LD_VAR 0 1
26188: ARRAY
26189: PUSH
26190: LD_INT 2
26192: ARRAY
26193: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26194: LD_ADDR_VAR 0 5
26198: PUSH
26199: LD_VAR 0 3
26203: PUSH
26204: LD_VAR 0 1
26208: ARRAY
26209: PUSH
26210: LD_INT 1
26212: ARRAY
26213: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26214: LD_VAR 0 8
26218: PPUSH
26219: CALL_OW 301
26223: PUSH
26224: LD_VAR 0 5
26228: PUSH
26229: LD_VAR 0 8
26233: PPUSH
26234: CALL_OW 255
26238: NONEQUAL
26239: OR
26240: IFFALSE 26269
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26242: LD_ADDR_EXP 106
26246: PUSH
26247: LD_EXP 106
26251: PPUSH
26252: LD_VAR 0 8
26256: PPUSH
26257: LD_INT 0
26259: PPUSH
26260: CALL_OW 1
26264: ST_TO_ADDR
// exit ;
26265: POP
26266: POP
26267: GO 26800
// end ; x := list [ i ] [ 3 ] ;
26269: LD_ADDR_VAR 0 6
26273: PUSH
26274: LD_VAR 0 3
26278: PUSH
26279: LD_VAR 0 1
26283: ARRAY
26284: PUSH
26285: LD_INT 3
26287: ARRAY
26288: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26289: LD_ADDR_VAR 0 7
26293: PUSH
26294: LD_VAR 0 3
26298: PUSH
26299: LD_VAR 0 1
26303: ARRAY
26304: PUSH
26305: LD_INT 4
26307: ARRAY
26308: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26309: LD_ADDR_VAR 0 9
26313: PUSH
26314: LD_VAR 0 6
26318: PPUSH
26319: LD_VAR 0 7
26323: PPUSH
26324: LD_INT 16
26326: PPUSH
26327: CALL 71579 0 3
26331: ST_TO_ADDR
// if not cratesNearbyPoint then
26332: LD_VAR 0 9
26336: NOT
26337: IFFALSE 26343
// exit ;
26339: POP
26340: POP
26341: GO 26800
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26343: LD_ADDR_VAR 0 4
26347: PUSH
26348: LD_INT 22
26350: PUSH
26351: LD_VAR 0 5
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 3
26362: PUSH
26363: LD_INT 60
26365: PUSH
26366: EMPTY
26367: LIST
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 91
26375: PUSH
26376: LD_VAR 0 8
26380: PUSH
26381: LD_INT 6
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 2
26391: PUSH
26392: LD_INT 25
26394: PUSH
26395: LD_INT 2
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 25
26404: PUSH
26405: LD_INT 16
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: LIST
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: PPUSH
26423: CALL_OW 69
26427: PUSH
26428: LD_VAR 0 8
26432: PPUSH
26433: CALL_OW 313
26437: PPUSH
26438: LD_INT 3
26440: PUSH
26441: LD_INT 60
26443: PUSH
26444: EMPTY
26445: LIST
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 2
26453: PUSH
26454: LD_INT 25
26456: PUSH
26457: LD_INT 2
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 25
26466: PUSH
26467: LD_INT 16
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: LIST
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PPUSH
26483: CALL_OW 72
26487: UNION
26488: ST_TO_ADDR
// if tmp then
26489: LD_VAR 0 4
26493: IFFALSE 26573
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26495: LD_ADDR_VAR 0 4
26499: PUSH
26500: LD_VAR 0 4
26504: PPUSH
26505: LD_INT 3
26507: PPUSH
26508: CALL 69548 0 2
26512: ST_TO_ADDR
// for j in tmp do
26513: LD_ADDR_VAR 0 2
26517: PUSH
26518: LD_VAR 0 4
26522: PUSH
26523: FOR_IN
26524: IFFALSE 26567
// begin if IsInUnit ( j ) then
26526: LD_VAR 0 2
26530: PPUSH
26531: CALL_OW 310
26535: IFFALSE 26546
// ComExit ( j ) ;
26537: LD_VAR 0 2
26541: PPUSH
26542: CALL 69631 0 1
// AddComCollect ( j , x , y ) ;
26546: LD_VAR 0 2
26550: PPUSH
26551: LD_VAR 0 6
26555: PPUSH
26556: LD_VAR 0 7
26560: PPUSH
26561: CALL_OW 177
// end ;
26565: GO 26523
26567: POP
26568: POP
// exit ;
26569: POP
26570: POP
26571: GO 26800
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26573: LD_ADDR_VAR 0 4
26577: PUSH
26578: LD_INT 22
26580: PUSH
26581: LD_VAR 0 5
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 91
26592: PUSH
26593: LD_VAR 0 8
26597: PUSH
26598: LD_INT 8
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 2
26608: PUSH
26609: LD_INT 34
26611: PUSH
26612: LD_INT 12
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 34
26621: PUSH
26622: LD_INT 51
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 34
26631: PUSH
26632: LD_INT 32
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 34
26641: PUSH
26642: LD_INT 89
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: LIST
26660: PPUSH
26661: CALL_OW 69
26665: ST_TO_ADDR
// if tmp then
26666: LD_VAR 0 4
26670: IFFALSE 26796
// begin for j in tmp do
26672: LD_ADDR_VAR 0 2
26676: PUSH
26677: LD_VAR 0 4
26681: PUSH
26682: FOR_IN
26683: IFFALSE 26794
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26685: LD_VAR 0 2
26689: PPUSH
26690: CALL_OW 262
26694: PUSH
26695: LD_INT 3
26697: EQUAL
26698: PUSH
26699: LD_VAR 0 2
26703: PPUSH
26704: CALL_OW 261
26708: PUSH
26709: LD_INT 20
26711: GREATER
26712: OR
26713: PUSH
26714: LD_VAR 0 2
26718: PPUSH
26719: CALL_OW 314
26723: NOT
26724: AND
26725: PUSH
26726: LD_VAR 0 2
26730: PPUSH
26731: CALL_OW 263
26735: PUSH
26736: LD_INT 1
26738: NONEQUAL
26739: PUSH
26740: LD_VAR 0 2
26744: PPUSH
26745: CALL_OW 311
26749: OR
26750: AND
26751: IFFALSE 26792
// begin ComCollect ( j , x , y ) ;
26753: LD_VAR 0 2
26757: PPUSH
26758: LD_VAR 0 6
26762: PPUSH
26763: LD_VAR 0 7
26767: PPUSH
26768: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26772: LD_VAR 0 2
26776: PPUSH
26777: LD_VAR 0 8
26781: PPUSH
26782: CALL_OW 172
// exit ;
26786: POP
26787: POP
26788: POP
26789: POP
26790: GO 26800
// end ;
26792: GO 26682
26794: POP
26795: POP
// end ; end ;
26796: GO 26171
26798: POP
26799: POP
// end ; end_of_file
26800: PPOPN 9
26802: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26803: LD_INT 0
26805: PPUSH
26806: PPUSH
26807: PPUSH
26808: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26809: LD_VAR 0 1
26813: PPUSH
26814: CALL_OW 264
26818: PUSH
26819: LD_INT 91
26821: EQUAL
26822: IFFALSE 26894
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26824: LD_INT 68
26826: PPUSH
26827: LD_VAR 0 1
26831: PPUSH
26832: CALL_OW 255
26836: PPUSH
26837: CALL_OW 321
26841: PUSH
26842: LD_INT 2
26844: EQUAL
26845: IFFALSE 26857
// eff := 70 else
26847: LD_ADDR_VAR 0 4
26851: PUSH
26852: LD_INT 70
26854: ST_TO_ADDR
26855: GO 26865
// eff := 30 ;
26857: LD_ADDR_VAR 0 4
26861: PUSH
26862: LD_INT 30
26864: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26865: LD_VAR 0 1
26869: PPUSH
26870: CALL_OW 250
26874: PPUSH
26875: LD_VAR 0 1
26879: PPUSH
26880: CALL_OW 251
26884: PPUSH
26885: LD_VAR 0 4
26889: PPUSH
26890: CALL_OW 495
// end ; end ;
26894: LD_VAR 0 2
26898: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26899: LD_INT 0
26901: PPUSH
// end ;
26902: LD_VAR 0 4
26906: RET
// export function SOS_Command ( cmd ) ; begin
26907: LD_INT 0
26909: PPUSH
// end ;
26910: LD_VAR 0 2
26914: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26915: LD_INT 0
26917: PPUSH
// end ;
26918: LD_VAR 0 6
26922: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26923: LD_INT 0
26925: PPUSH
26926: PPUSH
// if not vehicle or not factory then
26927: LD_VAR 0 1
26931: NOT
26932: PUSH
26933: LD_VAR 0 2
26937: NOT
26938: OR
26939: IFFALSE 26943
// exit ;
26941: GO 27174
// if factoryWaypoints >= factory then
26943: LD_EXP 105
26947: PUSH
26948: LD_VAR 0 2
26952: GREATEREQUAL
26953: IFFALSE 27174
// if factoryWaypoints [ factory ] then
26955: LD_EXP 105
26959: PUSH
26960: LD_VAR 0 2
26964: ARRAY
26965: IFFALSE 27174
// begin if GetControl ( vehicle ) = control_manual then
26967: LD_VAR 0 1
26971: PPUSH
26972: CALL_OW 263
26976: PUSH
26977: LD_INT 1
26979: EQUAL
26980: IFFALSE 27061
// begin driver := IsDrivenBy ( vehicle ) ;
26982: LD_ADDR_VAR 0 4
26986: PUSH
26987: LD_VAR 0 1
26991: PPUSH
26992: CALL_OW 311
26996: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26997: LD_VAR 0 4
27001: PPUSH
27002: LD_EXP 105
27006: PUSH
27007: LD_VAR 0 2
27011: ARRAY
27012: PUSH
27013: LD_INT 3
27015: ARRAY
27016: PPUSH
27017: LD_EXP 105
27021: PUSH
27022: LD_VAR 0 2
27026: ARRAY
27027: PUSH
27028: LD_INT 4
27030: ARRAY
27031: PPUSH
27032: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27036: LD_VAR 0 4
27040: PPUSH
27041: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27045: LD_VAR 0 4
27049: PPUSH
27050: LD_VAR 0 2
27054: PPUSH
27055: CALL_OW 180
// end else
27059: GO 27174
// if GetControl ( vehicle ) = control_remote then
27061: LD_VAR 0 1
27065: PPUSH
27066: CALL_OW 263
27070: PUSH
27071: LD_INT 2
27073: EQUAL
27074: IFFALSE 27135
// begin wait ( 0 0$2 ) ;
27076: LD_INT 70
27078: PPUSH
27079: CALL_OW 67
// if Connect ( vehicle ) then
27083: LD_VAR 0 1
27087: PPUSH
27088: CALL 39839 0 1
27092: IFFALSE 27133
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27094: LD_VAR 0 1
27098: PPUSH
27099: LD_EXP 105
27103: PUSH
27104: LD_VAR 0 2
27108: ARRAY
27109: PUSH
27110: LD_INT 3
27112: ARRAY
27113: PPUSH
27114: LD_EXP 105
27118: PUSH
27119: LD_VAR 0 2
27123: ARRAY
27124: PUSH
27125: LD_INT 4
27127: ARRAY
27128: PPUSH
27129: CALL_OW 171
// end else
27133: GO 27174
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27135: LD_VAR 0 1
27139: PPUSH
27140: LD_EXP 105
27144: PUSH
27145: LD_VAR 0 2
27149: ARRAY
27150: PUSH
27151: LD_INT 3
27153: ARRAY
27154: PPUSH
27155: LD_EXP 105
27159: PUSH
27160: LD_VAR 0 2
27164: ARRAY
27165: PUSH
27166: LD_INT 4
27168: ARRAY
27169: PPUSH
27170: CALL_OW 171
// end ; end ;
27174: LD_VAR 0 3
27178: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27179: LD_INT 0
27181: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27182: LD_VAR 0 1
27186: PUSH
27187: LD_INT 250
27189: EQUAL
27190: PUSH
27191: LD_VAR 0 2
27195: PPUSH
27196: CALL_OW 264
27200: PUSH
27201: LD_INT 81
27203: EQUAL
27204: AND
27205: IFFALSE 27226
// MinerPlaceMine ( unit , x , y ) ;
27207: LD_VAR 0 2
27211: PPUSH
27212: LD_VAR 0 4
27216: PPUSH
27217: LD_VAR 0 5
27221: PPUSH
27222: CALL 30050 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27226: LD_VAR 0 1
27230: PUSH
27231: LD_INT 251
27233: EQUAL
27234: PUSH
27235: LD_VAR 0 2
27239: PPUSH
27240: CALL_OW 264
27244: PUSH
27245: LD_INT 81
27247: EQUAL
27248: AND
27249: IFFALSE 27270
// MinerDetonateMine ( unit , x , y ) ;
27251: LD_VAR 0 2
27255: PPUSH
27256: LD_VAR 0 4
27260: PPUSH
27261: LD_VAR 0 5
27265: PPUSH
27266: CALL 30325 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27270: LD_VAR 0 1
27274: PUSH
27275: LD_INT 252
27277: EQUAL
27278: PUSH
27279: LD_VAR 0 2
27283: PPUSH
27284: CALL_OW 264
27288: PUSH
27289: LD_INT 81
27291: EQUAL
27292: AND
27293: IFFALSE 27314
// MinerCreateMinefield ( unit , x , y ) ;
27295: LD_VAR 0 2
27299: PPUSH
27300: LD_VAR 0 4
27304: PPUSH
27305: LD_VAR 0 5
27309: PPUSH
27310: CALL 30742 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27314: LD_VAR 0 1
27318: PUSH
27319: LD_INT 253
27321: EQUAL
27322: PUSH
27323: LD_VAR 0 2
27327: PPUSH
27328: CALL_OW 257
27332: PUSH
27333: LD_INT 5
27335: EQUAL
27336: AND
27337: IFFALSE 27358
// ComBinocular ( unit , x , y ) ;
27339: LD_VAR 0 2
27343: PPUSH
27344: LD_VAR 0 4
27348: PPUSH
27349: LD_VAR 0 5
27353: PPUSH
27354: CALL 31111 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27358: LD_VAR 0 1
27362: PUSH
27363: LD_INT 254
27365: EQUAL
27366: PUSH
27367: LD_VAR 0 2
27371: PPUSH
27372: CALL_OW 264
27376: PUSH
27377: LD_INT 99
27379: EQUAL
27380: AND
27381: PUSH
27382: LD_VAR 0 3
27386: PPUSH
27387: CALL_OW 263
27391: PUSH
27392: LD_INT 3
27394: EQUAL
27395: AND
27396: IFFALSE 27412
// HackDestroyVehicle ( unit , selectedUnit ) ;
27398: LD_VAR 0 2
27402: PPUSH
27403: LD_VAR 0 3
27407: PPUSH
27408: CALL 29414 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27412: LD_VAR 0 1
27416: PUSH
27417: LD_INT 255
27419: EQUAL
27420: PUSH
27421: LD_VAR 0 2
27425: PPUSH
27426: CALL_OW 264
27430: PUSH
27431: LD_INT 14
27433: PUSH
27434: LD_INT 53
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: IN
27441: AND
27442: PUSH
27443: LD_VAR 0 4
27447: PPUSH
27448: LD_VAR 0 5
27452: PPUSH
27453: CALL_OW 488
27457: AND
27458: IFFALSE 27482
// CutTreeXYR ( unit , x , y , 12 ) ;
27460: LD_VAR 0 2
27464: PPUSH
27465: LD_VAR 0 4
27469: PPUSH
27470: LD_VAR 0 5
27474: PPUSH
27475: LD_INT 12
27477: PPUSH
27478: CALL 27577 0 4
// if cmd = 256 then
27482: LD_VAR 0 1
27486: PUSH
27487: LD_INT 256
27489: EQUAL
27490: IFFALSE 27511
// SetFactoryWaypoint ( unit , x , y ) ;
27492: LD_VAR 0 2
27496: PPUSH
27497: LD_VAR 0 4
27501: PPUSH
27502: LD_VAR 0 5
27506: PPUSH
27507: CALL 25492 0 3
// if cmd = 257 then
27511: LD_VAR 0 1
27515: PUSH
27516: LD_INT 257
27518: EQUAL
27519: IFFALSE 27540
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27521: LD_VAR 0 2
27525: PPUSH
27526: LD_VAR 0 4
27530: PPUSH
27531: LD_VAR 0 5
27535: PPUSH
27536: CALL 25854 0 3
// if cmd = 258 then
27540: LD_VAR 0 1
27544: PUSH
27545: LD_INT 258
27547: EQUAL
27548: IFFALSE 27572
// BurnTreeXYR ( unit , x , y , 8 ) ;
27550: LD_VAR 0 2
27554: PPUSH
27555: LD_VAR 0 4
27559: PPUSH
27560: LD_VAR 0 5
27564: PPUSH
27565: LD_INT 8
27567: PPUSH
27568: CALL 27971 0 4
// end ;
27572: LD_VAR 0 6
27576: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27577: LD_INT 0
27579: PPUSH
27580: PPUSH
27581: PPUSH
27582: PPUSH
27583: PPUSH
27584: PPUSH
27585: PPUSH
27586: PPUSH
27587: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
27588: LD_VAR 0 1
27592: PPUSH
27593: CALL_OW 302
27597: NOT
27598: PUSH
27599: LD_VAR 0 2
27603: PPUSH
27604: LD_VAR 0 3
27608: PPUSH
27609: CALL_OW 488
27613: NOT
27614: OR
27615: PUSH
27616: LD_VAR 0 4
27620: NOT
27621: OR
27622: IFFALSE 27626
// exit ;
27624: GO 27966
// list := [ ] ;
27626: LD_ADDR_VAR 0 13
27630: PUSH
27631: EMPTY
27632: ST_TO_ADDR
// if x - r < 0 then
27633: LD_VAR 0 2
27637: PUSH
27638: LD_VAR 0 4
27642: MINUS
27643: PUSH
27644: LD_INT 0
27646: LESS
27647: IFFALSE 27659
// min_x := 0 else
27649: LD_ADDR_VAR 0 7
27653: PUSH
27654: LD_INT 0
27656: ST_TO_ADDR
27657: GO 27675
// min_x := x - r ;
27659: LD_ADDR_VAR 0 7
27663: PUSH
27664: LD_VAR 0 2
27668: PUSH
27669: LD_VAR 0 4
27673: MINUS
27674: ST_TO_ADDR
// if y - r < 0 then
27675: LD_VAR 0 3
27679: PUSH
27680: LD_VAR 0 4
27684: MINUS
27685: PUSH
27686: LD_INT 0
27688: LESS
27689: IFFALSE 27701
// min_y := 0 else
27691: LD_ADDR_VAR 0 8
27695: PUSH
27696: LD_INT 0
27698: ST_TO_ADDR
27699: GO 27717
// min_y := y - r ;
27701: LD_ADDR_VAR 0 8
27705: PUSH
27706: LD_VAR 0 3
27710: PUSH
27711: LD_VAR 0 4
27715: MINUS
27716: ST_TO_ADDR
// max_x := x + r ;
27717: LD_ADDR_VAR 0 9
27721: PUSH
27722: LD_VAR 0 2
27726: PUSH
27727: LD_VAR 0 4
27731: PLUS
27732: ST_TO_ADDR
// max_y := y + r ;
27733: LD_ADDR_VAR 0 10
27737: PUSH
27738: LD_VAR 0 3
27742: PUSH
27743: LD_VAR 0 4
27747: PLUS
27748: ST_TO_ADDR
// for _x = min_x to max_x do
27749: LD_ADDR_VAR 0 11
27753: PUSH
27754: DOUBLE
27755: LD_VAR 0 7
27759: DEC
27760: ST_TO_ADDR
27761: LD_VAR 0 9
27765: PUSH
27766: FOR_TO
27767: IFFALSE 27884
// for _y = min_y to max_y do
27769: LD_ADDR_VAR 0 12
27773: PUSH
27774: DOUBLE
27775: LD_VAR 0 8
27779: DEC
27780: ST_TO_ADDR
27781: LD_VAR 0 10
27785: PUSH
27786: FOR_TO
27787: IFFALSE 27880
// begin if not ValidHex ( _x , _y ) then
27789: LD_VAR 0 11
27793: PPUSH
27794: LD_VAR 0 12
27798: PPUSH
27799: CALL_OW 488
27803: NOT
27804: IFFALSE 27808
// continue ;
27806: GO 27786
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27808: LD_VAR 0 11
27812: PPUSH
27813: LD_VAR 0 12
27817: PPUSH
27818: CALL_OW 351
27822: PUSH
27823: LD_VAR 0 11
27827: PPUSH
27828: LD_VAR 0 12
27832: PPUSH
27833: CALL_OW 554
27837: AND
27838: IFFALSE 27878
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27840: LD_ADDR_VAR 0 13
27844: PUSH
27845: LD_VAR 0 13
27849: PPUSH
27850: LD_VAR 0 13
27854: PUSH
27855: LD_INT 1
27857: PLUS
27858: PPUSH
27859: LD_VAR 0 11
27863: PUSH
27864: LD_VAR 0 12
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PPUSH
27873: CALL_OW 2
27877: ST_TO_ADDR
// end ;
27878: GO 27786
27880: POP
27881: POP
27882: GO 27766
27884: POP
27885: POP
// if not list then
27886: LD_VAR 0 13
27890: NOT
27891: IFFALSE 27895
// exit ;
27893: GO 27966
// for i in list do
27895: LD_ADDR_VAR 0 6
27899: PUSH
27900: LD_VAR 0 13
27904: PUSH
27905: FOR_IN
27906: IFFALSE 27964
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27908: LD_VAR 0 1
27912: PPUSH
27913: LD_STRING M
27915: PUSH
27916: LD_VAR 0 6
27920: PUSH
27921: LD_INT 1
27923: ARRAY
27924: PUSH
27925: LD_VAR 0 6
27929: PUSH
27930: LD_INT 2
27932: ARRAY
27933: PUSH
27934: LD_INT 0
27936: PUSH
27937: LD_INT 0
27939: PUSH
27940: LD_INT 0
27942: PUSH
27943: LD_INT 0
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: PUSH
27955: EMPTY
27956: LIST
27957: PPUSH
27958: CALL_OW 447
27962: GO 27905
27964: POP
27965: POP
// end ;
27966: LD_VAR 0 5
27970: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27971: LD_INT 0
27973: PPUSH
27974: PPUSH
27975: PPUSH
27976: PPUSH
27977: PPUSH
27978: PPUSH
27979: PPUSH
27980: PPUSH
27981: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
27982: LD_VAR 0 1
27986: PPUSH
27987: CALL_OW 302
27991: NOT
27992: PUSH
27993: LD_VAR 0 2
27997: PPUSH
27998: LD_VAR 0 3
28002: PPUSH
28003: CALL_OW 488
28007: NOT
28008: OR
28009: PUSH
28010: LD_VAR 0 4
28014: NOT
28015: OR
28016: IFFALSE 28020
// exit ;
28018: GO 28368
// list := [ ] ;
28020: LD_ADDR_VAR 0 13
28024: PUSH
28025: EMPTY
28026: ST_TO_ADDR
// if x - r < 0 then
28027: LD_VAR 0 2
28031: PUSH
28032: LD_VAR 0 4
28036: MINUS
28037: PUSH
28038: LD_INT 0
28040: LESS
28041: IFFALSE 28053
// min_x := 0 else
28043: LD_ADDR_VAR 0 7
28047: PUSH
28048: LD_INT 0
28050: ST_TO_ADDR
28051: GO 28069
// min_x := x - r ;
28053: LD_ADDR_VAR 0 7
28057: PUSH
28058: LD_VAR 0 2
28062: PUSH
28063: LD_VAR 0 4
28067: MINUS
28068: ST_TO_ADDR
// if y - r < 0 then
28069: LD_VAR 0 3
28073: PUSH
28074: LD_VAR 0 4
28078: MINUS
28079: PUSH
28080: LD_INT 0
28082: LESS
28083: IFFALSE 28095
// min_y := 0 else
28085: LD_ADDR_VAR 0 8
28089: PUSH
28090: LD_INT 0
28092: ST_TO_ADDR
28093: GO 28111
// min_y := y - r ;
28095: LD_ADDR_VAR 0 8
28099: PUSH
28100: LD_VAR 0 3
28104: PUSH
28105: LD_VAR 0 4
28109: MINUS
28110: ST_TO_ADDR
// max_x := x + r ;
28111: LD_ADDR_VAR 0 9
28115: PUSH
28116: LD_VAR 0 2
28120: PUSH
28121: LD_VAR 0 4
28125: PLUS
28126: ST_TO_ADDR
// max_y := y + r ;
28127: LD_ADDR_VAR 0 10
28131: PUSH
28132: LD_VAR 0 3
28136: PUSH
28137: LD_VAR 0 4
28141: PLUS
28142: ST_TO_ADDR
// for _x = min_x to max_x do
28143: LD_ADDR_VAR 0 11
28147: PUSH
28148: DOUBLE
28149: LD_VAR 0 7
28153: DEC
28154: ST_TO_ADDR
28155: LD_VAR 0 9
28159: PUSH
28160: FOR_TO
28161: IFFALSE 28278
// for _y = min_y to max_y do
28163: LD_ADDR_VAR 0 12
28167: PUSH
28168: DOUBLE
28169: LD_VAR 0 8
28173: DEC
28174: ST_TO_ADDR
28175: LD_VAR 0 10
28179: PUSH
28180: FOR_TO
28181: IFFALSE 28274
// begin if not ValidHex ( _x , _y ) then
28183: LD_VAR 0 11
28187: PPUSH
28188: LD_VAR 0 12
28192: PPUSH
28193: CALL_OW 488
28197: NOT
28198: IFFALSE 28202
// continue ;
28200: GO 28180
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28202: LD_VAR 0 11
28206: PPUSH
28207: LD_VAR 0 12
28211: PPUSH
28212: CALL_OW 351
28216: PUSH
28217: LD_VAR 0 11
28221: PPUSH
28222: LD_VAR 0 12
28226: PPUSH
28227: CALL_OW 554
28231: AND
28232: IFFALSE 28272
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28234: LD_ADDR_VAR 0 13
28238: PUSH
28239: LD_VAR 0 13
28243: PPUSH
28244: LD_VAR 0 13
28248: PUSH
28249: LD_INT 1
28251: PLUS
28252: PPUSH
28253: LD_VAR 0 11
28257: PUSH
28258: LD_VAR 0 12
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PPUSH
28267: CALL_OW 2
28271: ST_TO_ADDR
// end ;
28272: GO 28180
28274: POP
28275: POP
28276: GO 28160
28278: POP
28279: POP
// if not list then
28280: LD_VAR 0 13
28284: NOT
28285: IFFALSE 28289
// exit ;
28287: GO 28368
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
28289: LD_ADDR_VAR 0 13
28293: PUSH
28294: LD_VAR 0 1
28298: PPUSH
28299: LD_VAR 0 13
28303: PPUSH
28304: LD_INT 1
28306: PPUSH
28307: LD_INT 1
28309: PPUSH
28310: CALL 36981 0 4
28314: ST_TO_ADDR
// ComStop ( flame ) ;
28315: LD_VAR 0 1
28319: PPUSH
28320: CALL_OW 141
// for i in list do
28324: LD_ADDR_VAR 0 6
28328: PUSH
28329: LD_VAR 0 13
28333: PUSH
28334: FOR_IN
28335: IFFALSE 28366
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
28337: LD_VAR 0 1
28341: PPUSH
28342: LD_VAR 0 6
28346: PUSH
28347: LD_INT 1
28349: ARRAY
28350: PPUSH
28351: LD_VAR 0 6
28355: PUSH
28356: LD_INT 2
28358: ARRAY
28359: PPUSH
28360: CALL_OW 176
28364: GO 28334
28366: POP
28367: POP
// end ;
28368: LD_VAR 0 5
28372: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28373: LD_EXP 108
28377: NOT
28378: IFFALSE 28428
28380: GO 28382
28382: DISABLE
// begin initHack := true ;
28383: LD_ADDR_EXP 108
28387: PUSH
28388: LD_INT 1
28390: ST_TO_ADDR
// hackTanks := [ ] ;
28391: LD_ADDR_EXP 109
28395: PUSH
28396: EMPTY
28397: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28398: LD_ADDR_EXP 110
28402: PUSH
28403: EMPTY
28404: ST_TO_ADDR
// hackLimit := 3 ;
28405: LD_ADDR_EXP 111
28409: PUSH
28410: LD_INT 3
28412: ST_TO_ADDR
// hackDist := 12 ;
28413: LD_ADDR_EXP 112
28417: PUSH
28418: LD_INT 12
28420: ST_TO_ADDR
// hackCounter := [ ] ;
28421: LD_ADDR_EXP 113
28425: PUSH
28426: EMPTY
28427: ST_TO_ADDR
// end ;
28428: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28429: LD_EXP 108
28433: PUSH
28434: LD_INT 34
28436: PUSH
28437: LD_INT 99
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PPUSH
28444: CALL_OW 69
28448: AND
28449: IFFALSE 28702
28451: GO 28453
28453: DISABLE
28454: LD_INT 0
28456: PPUSH
28457: PPUSH
// begin enable ;
28458: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28459: LD_ADDR_VAR 0 1
28463: PUSH
28464: LD_INT 34
28466: PUSH
28467: LD_INT 99
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PPUSH
28474: CALL_OW 69
28478: PUSH
28479: FOR_IN
28480: IFFALSE 28700
// begin if not i in hackTanks then
28482: LD_VAR 0 1
28486: PUSH
28487: LD_EXP 109
28491: IN
28492: NOT
28493: IFFALSE 28576
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28495: LD_ADDR_EXP 109
28499: PUSH
28500: LD_EXP 109
28504: PPUSH
28505: LD_EXP 109
28509: PUSH
28510: LD_INT 1
28512: PLUS
28513: PPUSH
28514: LD_VAR 0 1
28518: PPUSH
28519: CALL_OW 1
28523: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28524: LD_ADDR_EXP 110
28528: PUSH
28529: LD_EXP 110
28533: PPUSH
28534: LD_EXP 110
28538: PUSH
28539: LD_INT 1
28541: PLUS
28542: PPUSH
28543: EMPTY
28544: PPUSH
28545: CALL_OW 1
28549: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28550: LD_ADDR_EXP 113
28554: PUSH
28555: LD_EXP 113
28559: PPUSH
28560: LD_EXP 113
28564: PUSH
28565: LD_INT 1
28567: PLUS
28568: PPUSH
28569: EMPTY
28570: PPUSH
28571: CALL_OW 1
28575: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28576: LD_VAR 0 1
28580: PPUSH
28581: CALL_OW 302
28585: NOT
28586: IFFALSE 28599
// begin HackUnlinkAll ( i ) ;
28588: LD_VAR 0 1
28592: PPUSH
28593: CALL 28705 0 1
// continue ;
28597: GO 28479
// end ; HackCheckCapturedStatus ( i ) ;
28599: LD_VAR 0 1
28603: PPUSH
28604: CALL 29148 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28608: LD_ADDR_VAR 0 2
28612: PUSH
28613: LD_INT 81
28615: PUSH
28616: LD_VAR 0 1
28620: PPUSH
28621: CALL_OW 255
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 33
28632: PUSH
28633: LD_INT 3
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 91
28642: PUSH
28643: LD_VAR 0 1
28647: PUSH
28648: LD_EXP 112
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 50
28660: PUSH
28661: EMPTY
28662: LIST
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: PPUSH
28670: CALL_OW 69
28674: ST_TO_ADDR
// if not tmp then
28675: LD_VAR 0 2
28679: NOT
28680: IFFALSE 28684
// continue ;
28682: GO 28479
// HackLink ( i , tmp ) ;
28684: LD_VAR 0 1
28688: PPUSH
28689: LD_VAR 0 2
28693: PPUSH
28694: CALL 28841 0 2
// end ;
28698: GO 28479
28700: POP
28701: POP
// end ;
28702: PPOPN 2
28704: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28705: LD_INT 0
28707: PPUSH
28708: PPUSH
28709: PPUSH
// if not hack in hackTanks then
28710: LD_VAR 0 1
28714: PUSH
28715: LD_EXP 109
28719: IN
28720: NOT
28721: IFFALSE 28725
// exit ;
28723: GO 28836
// index := GetElementIndex ( hackTanks , hack ) ;
28725: LD_ADDR_VAR 0 4
28729: PUSH
28730: LD_EXP 109
28734: PPUSH
28735: LD_VAR 0 1
28739: PPUSH
28740: CALL 36278 0 2
28744: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28745: LD_EXP 110
28749: PUSH
28750: LD_VAR 0 4
28754: ARRAY
28755: IFFALSE 28836
// begin for i in hackTanksCaptured [ index ] do
28757: LD_ADDR_VAR 0 3
28761: PUSH
28762: LD_EXP 110
28766: PUSH
28767: LD_VAR 0 4
28771: ARRAY
28772: PUSH
28773: FOR_IN
28774: IFFALSE 28800
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28776: LD_VAR 0 3
28780: PUSH
28781: LD_INT 1
28783: ARRAY
28784: PPUSH
28785: LD_VAR 0 3
28789: PUSH
28790: LD_INT 2
28792: ARRAY
28793: PPUSH
28794: CALL_OW 235
28798: GO 28773
28800: POP
28801: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28802: LD_ADDR_EXP 110
28806: PUSH
28807: LD_EXP 110
28811: PPUSH
28812: LD_VAR 0 4
28816: PPUSH
28817: EMPTY
28818: PPUSH
28819: CALL_OW 1
28823: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28824: LD_VAR 0 1
28828: PPUSH
28829: LD_INT 0
28831: PPUSH
28832: CALL_OW 505
// end ; end ;
28836: LD_VAR 0 2
28840: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28841: LD_INT 0
28843: PPUSH
28844: PPUSH
28845: PPUSH
// if not hack in hackTanks or not vehicles then
28846: LD_VAR 0 1
28850: PUSH
28851: LD_EXP 109
28855: IN
28856: NOT
28857: PUSH
28858: LD_VAR 0 2
28862: NOT
28863: OR
28864: IFFALSE 28868
// exit ;
28866: GO 29143
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28868: LD_ADDR_VAR 0 2
28872: PUSH
28873: LD_VAR 0 1
28877: PPUSH
28878: LD_VAR 0 2
28882: PPUSH
28883: LD_INT 1
28885: PPUSH
28886: LD_INT 1
28888: PPUSH
28889: CALL 36928 0 4
28893: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28894: LD_ADDR_VAR 0 5
28898: PUSH
28899: LD_EXP 109
28903: PPUSH
28904: LD_VAR 0 1
28908: PPUSH
28909: CALL 36278 0 2
28913: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28914: LD_EXP 110
28918: PUSH
28919: LD_VAR 0 5
28923: ARRAY
28924: PUSH
28925: LD_EXP 111
28929: LESS
28930: IFFALSE 29119
// begin for i := 1 to vehicles do
28932: LD_ADDR_VAR 0 4
28936: PUSH
28937: DOUBLE
28938: LD_INT 1
28940: DEC
28941: ST_TO_ADDR
28942: LD_VAR 0 2
28946: PUSH
28947: FOR_TO
28948: IFFALSE 29117
// begin if hackTanksCaptured [ index ] = hackLimit then
28950: LD_EXP 110
28954: PUSH
28955: LD_VAR 0 5
28959: ARRAY
28960: PUSH
28961: LD_EXP 111
28965: EQUAL
28966: IFFALSE 28970
// break ;
28968: GO 29117
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28970: LD_ADDR_EXP 113
28974: PUSH
28975: LD_EXP 113
28979: PPUSH
28980: LD_VAR 0 5
28984: PPUSH
28985: LD_EXP 113
28989: PUSH
28990: LD_VAR 0 5
28994: ARRAY
28995: PUSH
28996: LD_INT 1
28998: PLUS
28999: PPUSH
29000: CALL_OW 1
29004: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29005: LD_ADDR_EXP 110
29009: PUSH
29010: LD_EXP 110
29014: PPUSH
29015: LD_VAR 0 5
29019: PUSH
29020: LD_EXP 110
29024: PUSH
29025: LD_VAR 0 5
29029: ARRAY
29030: PUSH
29031: LD_INT 1
29033: PLUS
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PPUSH
29039: LD_VAR 0 2
29043: PUSH
29044: LD_VAR 0 4
29048: ARRAY
29049: PUSH
29050: LD_VAR 0 2
29054: PUSH
29055: LD_VAR 0 4
29059: ARRAY
29060: PPUSH
29061: CALL_OW 255
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PPUSH
29070: CALL 36493 0 3
29074: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29075: LD_VAR 0 2
29079: PUSH
29080: LD_VAR 0 4
29084: ARRAY
29085: PPUSH
29086: LD_VAR 0 1
29090: PPUSH
29091: CALL_OW 255
29095: PPUSH
29096: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29100: LD_VAR 0 2
29104: PUSH
29105: LD_VAR 0 4
29109: ARRAY
29110: PPUSH
29111: CALL_OW 141
// end ;
29115: GO 28947
29117: POP
29118: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29119: LD_VAR 0 1
29123: PPUSH
29124: LD_EXP 110
29128: PUSH
29129: LD_VAR 0 5
29133: ARRAY
29134: PUSH
29135: LD_INT 0
29137: PLUS
29138: PPUSH
29139: CALL_OW 505
// end ;
29143: LD_VAR 0 3
29147: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29148: LD_INT 0
29150: PPUSH
29151: PPUSH
29152: PPUSH
29153: PPUSH
// if not hack in hackTanks then
29154: LD_VAR 0 1
29158: PUSH
29159: LD_EXP 109
29163: IN
29164: NOT
29165: IFFALSE 29169
// exit ;
29167: GO 29409
// index := GetElementIndex ( hackTanks , hack ) ;
29169: LD_ADDR_VAR 0 4
29173: PUSH
29174: LD_EXP 109
29178: PPUSH
29179: LD_VAR 0 1
29183: PPUSH
29184: CALL 36278 0 2
29188: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29189: LD_ADDR_VAR 0 3
29193: PUSH
29194: DOUBLE
29195: LD_EXP 110
29199: PUSH
29200: LD_VAR 0 4
29204: ARRAY
29205: INC
29206: ST_TO_ADDR
29207: LD_INT 1
29209: PUSH
29210: FOR_DOWNTO
29211: IFFALSE 29383
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29213: LD_ADDR_VAR 0 5
29217: PUSH
29218: LD_EXP 110
29222: PUSH
29223: LD_VAR 0 4
29227: ARRAY
29228: PUSH
29229: LD_VAR 0 3
29233: ARRAY
29234: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29235: LD_VAR 0 5
29239: PUSH
29240: LD_INT 1
29242: ARRAY
29243: PPUSH
29244: CALL_OW 302
29248: NOT
29249: PUSH
29250: LD_VAR 0 5
29254: PUSH
29255: LD_INT 1
29257: ARRAY
29258: PPUSH
29259: CALL_OW 255
29263: PUSH
29264: LD_VAR 0 1
29268: PPUSH
29269: CALL_OW 255
29273: NONEQUAL
29274: OR
29275: IFFALSE 29381
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29277: LD_VAR 0 5
29281: PUSH
29282: LD_INT 1
29284: ARRAY
29285: PPUSH
29286: CALL_OW 305
29290: PUSH
29291: LD_VAR 0 5
29295: PUSH
29296: LD_INT 1
29298: ARRAY
29299: PPUSH
29300: CALL_OW 255
29304: PUSH
29305: LD_VAR 0 1
29309: PPUSH
29310: CALL_OW 255
29314: EQUAL
29315: AND
29316: IFFALSE 29340
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29318: LD_VAR 0 5
29322: PUSH
29323: LD_INT 1
29325: ARRAY
29326: PPUSH
29327: LD_VAR 0 5
29331: PUSH
29332: LD_INT 2
29334: ARRAY
29335: PPUSH
29336: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29340: LD_ADDR_EXP 110
29344: PUSH
29345: LD_EXP 110
29349: PPUSH
29350: LD_VAR 0 4
29354: PPUSH
29355: LD_EXP 110
29359: PUSH
29360: LD_VAR 0 4
29364: ARRAY
29365: PPUSH
29366: LD_VAR 0 3
29370: PPUSH
29371: CALL_OW 3
29375: PPUSH
29376: CALL_OW 1
29380: ST_TO_ADDR
// end ; end ;
29381: GO 29210
29383: POP
29384: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29385: LD_VAR 0 1
29389: PPUSH
29390: LD_EXP 110
29394: PUSH
29395: LD_VAR 0 4
29399: ARRAY
29400: PUSH
29401: LD_INT 0
29403: PLUS
29404: PPUSH
29405: CALL_OW 505
// end ;
29409: LD_VAR 0 2
29413: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29414: LD_INT 0
29416: PPUSH
29417: PPUSH
29418: PPUSH
29419: PPUSH
// if not hack in hackTanks then
29420: LD_VAR 0 1
29424: PUSH
29425: LD_EXP 109
29429: IN
29430: NOT
29431: IFFALSE 29435
// exit ;
29433: GO 29520
// index := GetElementIndex ( hackTanks , hack ) ;
29435: LD_ADDR_VAR 0 5
29439: PUSH
29440: LD_EXP 109
29444: PPUSH
29445: LD_VAR 0 1
29449: PPUSH
29450: CALL 36278 0 2
29454: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29455: LD_ADDR_VAR 0 4
29459: PUSH
29460: DOUBLE
29461: LD_INT 1
29463: DEC
29464: ST_TO_ADDR
29465: LD_EXP 110
29469: PUSH
29470: LD_VAR 0 5
29474: ARRAY
29475: PUSH
29476: FOR_TO
29477: IFFALSE 29518
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29479: LD_EXP 110
29483: PUSH
29484: LD_VAR 0 5
29488: ARRAY
29489: PUSH
29490: LD_VAR 0 4
29494: ARRAY
29495: PUSH
29496: LD_INT 1
29498: ARRAY
29499: PUSH
29500: LD_VAR 0 2
29504: EQUAL
29505: IFFALSE 29516
// KillUnit ( vehicle ) ;
29507: LD_VAR 0 2
29511: PPUSH
29512: CALL_OW 66
29516: GO 29476
29518: POP
29519: POP
// end ;
29520: LD_VAR 0 3
29524: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29525: LD_EXP 114
29529: NOT
29530: IFFALSE 29565
29532: GO 29534
29534: DISABLE
// begin initMiner := true ;
29535: LD_ADDR_EXP 114
29539: PUSH
29540: LD_INT 1
29542: ST_TO_ADDR
// minersList := [ ] ;
29543: LD_ADDR_EXP 115
29547: PUSH
29548: EMPTY
29549: ST_TO_ADDR
// minerMinesList := [ ] ;
29550: LD_ADDR_EXP 116
29554: PUSH
29555: EMPTY
29556: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29557: LD_ADDR_EXP 117
29561: PUSH
29562: LD_INT 5
29564: ST_TO_ADDR
// end ;
29565: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29566: LD_EXP 114
29570: PUSH
29571: LD_INT 34
29573: PUSH
29574: LD_INT 81
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PPUSH
29581: CALL_OW 69
29585: AND
29586: IFFALSE 30047
29588: GO 29590
29590: DISABLE
29591: LD_INT 0
29593: PPUSH
29594: PPUSH
29595: PPUSH
29596: PPUSH
// begin enable ;
29597: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29598: LD_ADDR_VAR 0 1
29602: PUSH
29603: LD_INT 34
29605: PUSH
29606: LD_INT 81
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PPUSH
29613: CALL_OW 69
29617: PUSH
29618: FOR_IN
29619: IFFALSE 29691
// begin if not i in minersList then
29621: LD_VAR 0 1
29625: PUSH
29626: LD_EXP 115
29630: IN
29631: NOT
29632: IFFALSE 29689
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29634: LD_ADDR_EXP 115
29638: PUSH
29639: LD_EXP 115
29643: PPUSH
29644: LD_EXP 115
29648: PUSH
29649: LD_INT 1
29651: PLUS
29652: PPUSH
29653: LD_VAR 0 1
29657: PPUSH
29658: CALL_OW 1
29662: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29663: LD_ADDR_EXP 116
29667: PUSH
29668: LD_EXP 116
29672: PPUSH
29673: LD_EXP 116
29677: PUSH
29678: LD_INT 1
29680: PLUS
29681: PPUSH
29682: EMPTY
29683: PPUSH
29684: CALL_OW 1
29688: ST_TO_ADDR
// end end ;
29689: GO 29618
29691: POP
29692: POP
// for i := minerMinesList downto 1 do
29693: LD_ADDR_VAR 0 1
29697: PUSH
29698: DOUBLE
29699: LD_EXP 116
29703: INC
29704: ST_TO_ADDR
29705: LD_INT 1
29707: PUSH
29708: FOR_DOWNTO
29709: IFFALSE 30045
// begin if IsLive ( minersList [ i ] ) then
29711: LD_EXP 115
29715: PUSH
29716: LD_VAR 0 1
29720: ARRAY
29721: PPUSH
29722: CALL_OW 300
29726: IFFALSE 29754
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29728: LD_EXP 115
29732: PUSH
29733: LD_VAR 0 1
29737: ARRAY
29738: PPUSH
29739: LD_EXP 116
29743: PUSH
29744: LD_VAR 0 1
29748: ARRAY
29749: PPUSH
29750: CALL_OW 505
// if not minerMinesList [ i ] then
29754: LD_EXP 116
29758: PUSH
29759: LD_VAR 0 1
29763: ARRAY
29764: NOT
29765: IFFALSE 29769
// continue ;
29767: GO 29708
// for j := minerMinesList [ i ] downto 1 do
29769: LD_ADDR_VAR 0 2
29773: PUSH
29774: DOUBLE
29775: LD_EXP 116
29779: PUSH
29780: LD_VAR 0 1
29784: ARRAY
29785: INC
29786: ST_TO_ADDR
29787: LD_INT 1
29789: PUSH
29790: FOR_DOWNTO
29791: IFFALSE 30041
// begin side := GetSide ( minersList [ i ] ) ;
29793: LD_ADDR_VAR 0 3
29797: PUSH
29798: LD_EXP 115
29802: PUSH
29803: LD_VAR 0 1
29807: ARRAY
29808: PPUSH
29809: CALL_OW 255
29813: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29814: LD_ADDR_VAR 0 4
29818: PUSH
29819: LD_EXP 116
29823: PUSH
29824: LD_VAR 0 1
29828: ARRAY
29829: PUSH
29830: LD_VAR 0 2
29834: ARRAY
29835: PUSH
29836: LD_INT 1
29838: ARRAY
29839: PPUSH
29840: LD_EXP 116
29844: PUSH
29845: LD_VAR 0 1
29849: ARRAY
29850: PUSH
29851: LD_VAR 0 2
29855: ARRAY
29856: PUSH
29857: LD_INT 2
29859: ARRAY
29860: PPUSH
29861: CALL_OW 428
29865: ST_TO_ADDR
// if not tmp then
29866: LD_VAR 0 4
29870: NOT
29871: IFFALSE 29875
// continue ;
29873: GO 29790
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29875: LD_VAR 0 4
29879: PUSH
29880: LD_INT 81
29882: PUSH
29883: LD_VAR 0 3
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PPUSH
29892: CALL_OW 69
29896: IN
29897: PUSH
29898: LD_EXP 116
29902: PUSH
29903: LD_VAR 0 1
29907: ARRAY
29908: PUSH
29909: LD_VAR 0 2
29913: ARRAY
29914: PUSH
29915: LD_INT 1
29917: ARRAY
29918: PPUSH
29919: LD_EXP 116
29923: PUSH
29924: LD_VAR 0 1
29928: ARRAY
29929: PUSH
29930: LD_VAR 0 2
29934: ARRAY
29935: PUSH
29936: LD_INT 2
29938: ARRAY
29939: PPUSH
29940: CALL_OW 458
29944: AND
29945: IFFALSE 30039
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29947: LD_EXP 116
29951: PUSH
29952: LD_VAR 0 1
29956: ARRAY
29957: PUSH
29958: LD_VAR 0 2
29962: ARRAY
29963: PUSH
29964: LD_INT 1
29966: ARRAY
29967: PPUSH
29968: LD_EXP 116
29972: PUSH
29973: LD_VAR 0 1
29977: ARRAY
29978: PUSH
29979: LD_VAR 0 2
29983: ARRAY
29984: PUSH
29985: LD_INT 2
29987: ARRAY
29988: PPUSH
29989: LD_VAR 0 3
29993: PPUSH
29994: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29998: LD_ADDR_EXP 116
30002: PUSH
30003: LD_EXP 116
30007: PPUSH
30008: LD_VAR 0 1
30012: PPUSH
30013: LD_EXP 116
30017: PUSH
30018: LD_VAR 0 1
30022: ARRAY
30023: PPUSH
30024: LD_VAR 0 2
30028: PPUSH
30029: CALL_OW 3
30033: PPUSH
30034: CALL_OW 1
30038: ST_TO_ADDR
// end ; end ;
30039: GO 29790
30041: POP
30042: POP
// end ;
30043: GO 29708
30045: POP
30046: POP
// end ;
30047: PPOPN 4
30049: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30050: LD_INT 0
30052: PPUSH
30053: PPUSH
// result := false ;
30054: LD_ADDR_VAR 0 4
30058: PUSH
30059: LD_INT 0
30061: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30062: LD_VAR 0 1
30066: PPUSH
30067: CALL_OW 264
30071: PUSH
30072: LD_INT 81
30074: EQUAL
30075: NOT
30076: IFFALSE 30080
// exit ;
30078: GO 30320
// index := GetElementIndex ( minersList , unit ) ;
30080: LD_ADDR_VAR 0 5
30084: PUSH
30085: LD_EXP 115
30089: PPUSH
30090: LD_VAR 0 1
30094: PPUSH
30095: CALL 36278 0 2
30099: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30100: LD_EXP 116
30104: PUSH
30105: LD_VAR 0 5
30109: ARRAY
30110: PUSH
30111: LD_EXP 117
30115: GREATEREQUAL
30116: IFFALSE 30120
// exit ;
30118: GO 30320
// ComMoveXY ( unit , x , y ) ;
30120: LD_VAR 0 1
30124: PPUSH
30125: LD_VAR 0 2
30129: PPUSH
30130: LD_VAR 0 3
30134: PPUSH
30135: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30139: LD_INT 35
30141: PPUSH
30142: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30146: LD_VAR 0 1
30150: PPUSH
30151: LD_VAR 0 2
30155: PPUSH
30156: LD_VAR 0 3
30160: PPUSH
30161: CALL 68030 0 3
30165: NOT
30166: PUSH
30167: LD_VAR 0 1
30171: PPUSH
30172: CALL_OW 314
30176: AND
30177: IFFALSE 30181
// exit ;
30179: GO 30320
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30181: LD_VAR 0 2
30185: PPUSH
30186: LD_VAR 0 3
30190: PPUSH
30191: CALL_OW 428
30195: PUSH
30196: LD_VAR 0 1
30200: EQUAL
30201: PUSH
30202: LD_VAR 0 1
30206: PPUSH
30207: CALL_OW 314
30211: NOT
30212: AND
30213: IFFALSE 30139
// PlaySoundXY ( x , y , PlantMine ) ;
30215: LD_VAR 0 2
30219: PPUSH
30220: LD_VAR 0 3
30224: PPUSH
30225: LD_STRING PlantMine
30227: PPUSH
30228: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30232: LD_VAR 0 2
30236: PPUSH
30237: LD_VAR 0 3
30241: PPUSH
30242: LD_VAR 0 1
30246: PPUSH
30247: CALL_OW 255
30251: PPUSH
30252: LD_INT 0
30254: PPUSH
30255: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30259: LD_ADDR_EXP 116
30263: PUSH
30264: LD_EXP 116
30268: PPUSH
30269: LD_VAR 0 5
30273: PUSH
30274: LD_EXP 116
30278: PUSH
30279: LD_VAR 0 5
30283: ARRAY
30284: PUSH
30285: LD_INT 1
30287: PLUS
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PPUSH
30293: LD_VAR 0 2
30297: PUSH
30298: LD_VAR 0 3
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PPUSH
30307: CALL 36493 0 3
30311: ST_TO_ADDR
// result := true ;
30312: LD_ADDR_VAR 0 4
30316: PUSH
30317: LD_INT 1
30319: ST_TO_ADDR
// end ;
30320: LD_VAR 0 4
30324: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30325: LD_INT 0
30327: PPUSH
30328: PPUSH
30329: PPUSH
// if not unit in minersList then
30330: LD_VAR 0 1
30334: PUSH
30335: LD_EXP 115
30339: IN
30340: NOT
30341: IFFALSE 30345
// exit ;
30343: GO 30737
// index := GetElementIndex ( minersList , unit ) ;
30345: LD_ADDR_VAR 0 6
30349: PUSH
30350: LD_EXP 115
30354: PPUSH
30355: LD_VAR 0 1
30359: PPUSH
30360: CALL 36278 0 2
30364: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30365: LD_ADDR_VAR 0 5
30369: PUSH
30370: DOUBLE
30371: LD_EXP 116
30375: PUSH
30376: LD_VAR 0 6
30380: ARRAY
30381: INC
30382: ST_TO_ADDR
30383: LD_INT 1
30385: PUSH
30386: FOR_DOWNTO
30387: IFFALSE 30548
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30389: LD_EXP 116
30393: PUSH
30394: LD_VAR 0 6
30398: ARRAY
30399: PUSH
30400: LD_VAR 0 5
30404: ARRAY
30405: PUSH
30406: LD_INT 1
30408: ARRAY
30409: PUSH
30410: LD_VAR 0 2
30414: EQUAL
30415: PUSH
30416: LD_EXP 116
30420: PUSH
30421: LD_VAR 0 6
30425: ARRAY
30426: PUSH
30427: LD_VAR 0 5
30431: ARRAY
30432: PUSH
30433: LD_INT 2
30435: ARRAY
30436: PUSH
30437: LD_VAR 0 3
30441: EQUAL
30442: AND
30443: IFFALSE 30546
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30445: LD_EXP 116
30449: PUSH
30450: LD_VAR 0 6
30454: ARRAY
30455: PUSH
30456: LD_VAR 0 5
30460: ARRAY
30461: PUSH
30462: LD_INT 1
30464: ARRAY
30465: PPUSH
30466: LD_EXP 116
30470: PUSH
30471: LD_VAR 0 6
30475: ARRAY
30476: PUSH
30477: LD_VAR 0 5
30481: ARRAY
30482: PUSH
30483: LD_INT 2
30485: ARRAY
30486: PPUSH
30487: LD_VAR 0 1
30491: PPUSH
30492: CALL_OW 255
30496: PPUSH
30497: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30501: LD_ADDR_EXP 116
30505: PUSH
30506: LD_EXP 116
30510: PPUSH
30511: LD_VAR 0 6
30515: PPUSH
30516: LD_EXP 116
30520: PUSH
30521: LD_VAR 0 6
30525: ARRAY
30526: PPUSH
30527: LD_VAR 0 5
30531: PPUSH
30532: CALL_OW 3
30536: PPUSH
30537: CALL_OW 1
30541: ST_TO_ADDR
// exit ;
30542: POP
30543: POP
30544: GO 30737
// end ; end ;
30546: GO 30386
30548: POP
30549: POP
// for i := minerMinesList [ index ] downto 1 do
30550: LD_ADDR_VAR 0 5
30554: PUSH
30555: DOUBLE
30556: LD_EXP 116
30560: PUSH
30561: LD_VAR 0 6
30565: ARRAY
30566: INC
30567: ST_TO_ADDR
30568: LD_INT 1
30570: PUSH
30571: FOR_DOWNTO
30572: IFFALSE 30735
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30574: LD_EXP 116
30578: PUSH
30579: LD_VAR 0 6
30583: ARRAY
30584: PUSH
30585: LD_VAR 0 5
30589: ARRAY
30590: PUSH
30591: LD_INT 1
30593: ARRAY
30594: PPUSH
30595: LD_EXP 116
30599: PUSH
30600: LD_VAR 0 6
30604: ARRAY
30605: PUSH
30606: LD_VAR 0 5
30610: ARRAY
30611: PUSH
30612: LD_INT 2
30614: ARRAY
30615: PPUSH
30616: LD_VAR 0 2
30620: PPUSH
30621: LD_VAR 0 3
30625: PPUSH
30626: CALL_OW 298
30630: PUSH
30631: LD_INT 6
30633: LESS
30634: IFFALSE 30733
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30636: LD_EXP 116
30640: PUSH
30641: LD_VAR 0 6
30645: ARRAY
30646: PUSH
30647: LD_VAR 0 5
30651: ARRAY
30652: PUSH
30653: LD_INT 1
30655: ARRAY
30656: PPUSH
30657: LD_EXP 116
30661: PUSH
30662: LD_VAR 0 6
30666: ARRAY
30667: PUSH
30668: LD_VAR 0 5
30672: ARRAY
30673: PUSH
30674: LD_INT 2
30676: ARRAY
30677: PPUSH
30678: LD_VAR 0 1
30682: PPUSH
30683: CALL_OW 255
30687: PPUSH
30688: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30692: LD_ADDR_EXP 116
30696: PUSH
30697: LD_EXP 116
30701: PPUSH
30702: LD_VAR 0 6
30706: PPUSH
30707: LD_EXP 116
30711: PUSH
30712: LD_VAR 0 6
30716: ARRAY
30717: PPUSH
30718: LD_VAR 0 5
30722: PPUSH
30723: CALL_OW 3
30727: PPUSH
30728: CALL_OW 1
30732: ST_TO_ADDR
// end ; end ;
30733: GO 30571
30735: POP
30736: POP
// end ;
30737: LD_VAR 0 4
30741: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30742: LD_INT 0
30744: PPUSH
30745: PPUSH
30746: PPUSH
30747: PPUSH
30748: PPUSH
30749: PPUSH
30750: PPUSH
30751: PPUSH
30752: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30753: LD_VAR 0 1
30757: PPUSH
30758: CALL_OW 264
30762: PUSH
30763: LD_INT 81
30765: EQUAL
30766: NOT
30767: PUSH
30768: LD_VAR 0 1
30772: PUSH
30773: LD_EXP 115
30777: IN
30778: NOT
30779: OR
30780: IFFALSE 30784
// exit ;
30782: GO 31106
// index := GetElementIndex ( minersList , unit ) ;
30784: LD_ADDR_VAR 0 6
30788: PUSH
30789: LD_EXP 115
30793: PPUSH
30794: LD_VAR 0 1
30798: PPUSH
30799: CALL 36278 0 2
30803: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30804: LD_ADDR_VAR 0 8
30808: PUSH
30809: LD_EXP 117
30813: PUSH
30814: LD_EXP 116
30818: PUSH
30819: LD_VAR 0 6
30823: ARRAY
30824: MINUS
30825: ST_TO_ADDR
// if not minesFreeAmount then
30826: LD_VAR 0 8
30830: NOT
30831: IFFALSE 30835
// exit ;
30833: GO 31106
// tmp := [ ] ;
30835: LD_ADDR_VAR 0 7
30839: PUSH
30840: EMPTY
30841: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30842: LD_ADDR_VAR 0 5
30846: PUSH
30847: DOUBLE
30848: LD_INT 1
30850: DEC
30851: ST_TO_ADDR
30852: LD_VAR 0 8
30856: PUSH
30857: FOR_TO
30858: IFFALSE 31053
// begin _d := rand ( 0 , 5 ) ;
30860: LD_ADDR_VAR 0 11
30864: PUSH
30865: LD_INT 0
30867: PPUSH
30868: LD_INT 5
30870: PPUSH
30871: CALL_OW 12
30875: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30876: LD_ADDR_VAR 0 12
30880: PUSH
30881: LD_INT 2
30883: PPUSH
30884: LD_INT 6
30886: PPUSH
30887: CALL_OW 12
30891: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30892: LD_ADDR_VAR 0 9
30896: PUSH
30897: LD_VAR 0 2
30901: PPUSH
30902: LD_VAR 0 11
30906: PPUSH
30907: LD_VAR 0 12
30911: PPUSH
30912: CALL_OW 272
30916: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30917: LD_ADDR_VAR 0 10
30921: PUSH
30922: LD_VAR 0 3
30926: PPUSH
30927: LD_VAR 0 11
30931: PPUSH
30932: LD_VAR 0 12
30936: PPUSH
30937: CALL_OW 273
30941: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30942: LD_VAR 0 9
30946: PPUSH
30947: LD_VAR 0 10
30951: PPUSH
30952: CALL_OW 488
30956: PUSH
30957: LD_VAR 0 9
30961: PUSH
30962: LD_VAR 0 10
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_VAR 0 7
30975: IN
30976: NOT
30977: AND
30978: PUSH
30979: LD_VAR 0 9
30983: PPUSH
30984: LD_VAR 0 10
30988: PPUSH
30989: CALL_OW 458
30993: NOT
30994: AND
30995: IFFALSE 31037
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30997: LD_ADDR_VAR 0 7
31001: PUSH
31002: LD_VAR 0 7
31006: PPUSH
31007: LD_VAR 0 7
31011: PUSH
31012: LD_INT 1
31014: PLUS
31015: PPUSH
31016: LD_VAR 0 9
31020: PUSH
31021: LD_VAR 0 10
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PPUSH
31030: CALL_OW 1
31034: ST_TO_ADDR
31035: GO 31051
// i := i - 1 ;
31037: LD_ADDR_VAR 0 5
31041: PUSH
31042: LD_VAR 0 5
31046: PUSH
31047: LD_INT 1
31049: MINUS
31050: ST_TO_ADDR
// end ;
31051: GO 30857
31053: POP
31054: POP
// for i in tmp do
31055: LD_ADDR_VAR 0 5
31059: PUSH
31060: LD_VAR 0 7
31064: PUSH
31065: FOR_IN
31066: IFFALSE 31104
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31068: LD_VAR 0 1
31072: PPUSH
31073: LD_VAR 0 5
31077: PUSH
31078: LD_INT 1
31080: ARRAY
31081: PPUSH
31082: LD_VAR 0 5
31086: PUSH
31087: LD_INT 2
31089: ARRAY
31090: PPUSH
31091: CALL 30050 0 3
31095: NOT
31096: IFFALSE 31102
// exit ;
31098: POP
31099: POP
31100: GO 31106
31102: GO 31065
31104: POP
31105: POP
// end ;
31106: LD_VAR 0 4
31110: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31111: LD_INT 0
31113: PPUSH
31114: PPUSH
31115: PPUSH
31116: PPUSH
31117: PPUSH
31118: PPUSH
31119: PPUSH
// if not GetClass ( unit ) = class_sniper then
31120: LD_VAR 0 1
31124: PPUSH
31125: CALL_OW 257
31129: PUSH
31130: LD_INT 5
31132: EQUAL
31133: NOT
31134: IFFALSE 31138
// exit ;
31136: GO 31526
// dist := 8 ;
31138: LD_ADDR_VAR 0 5
31142: PUSH
31143: LD_INT 8
31145: ST_TO_ADDR
// viewRange := 12 ;
31146: LD_ADDR_VAR 0 7
31150: PUSH
31151: LD_INT 12
31153: ST_TO_ADDR
// side := GetSide ( unit ) ;
31154: LD_ADDR_VAR 0 6
31158: PUSH
31159: LD_VAR 0 1
31163: PPUSH
31164: CALL_OW 255
31168: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31169: LD_INT 61
31171: PPUSH
31172: LD_VAR 0 6
31176: PPUSH
31177: CALL_OW 321
31181: PUSH
31182: LD_INT 2
31184: EQUAL
31185: IFFALSE 31195
// viewRange := 16 ;
31187: LD_ADDR_VAR 0 7
31191: PUSH
31192: LD_INT 16
31194: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31195: LD_VAR 0 1
31199: PPUSH
31200: LD_VAR 0 2
31204: PPUSH
31205: LD_VAR 0 3
31209: PPUSH
31210: CALL_OW 297
31214: PUSH
31215: LD_VAR 0 5
31219: GREATER
31220: IFFALSE 31299
// begin ComMoveXY ( unit , x , y ) ;
31222: LD_VAR 0 1
31226: PPUSH
31227: LD_VAR 0 2
31231: PPUSH
31232: LD_VAR 0 3
31236: PPUSH
31237: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31241: LD_INT 35
31243: PPUSH
31244: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31248: LD_VAR 0 1
31252: PPUSH
31253: LD_VAR 0 2
31257: PPUSH
31258: LD_VAR 0 3
31262: PPUSH
31263: CALL 68030 0 3
31267: NOT
31268: IFFALSE 31272
// exit ;
31270: GO 31526
// until GetDistUnitXY ( unit , x , y ) < dist ;
31272: LD_VAR 0 1
31276: PPUSH
31277: LD_VAR 0 2
31281: PPUSH
31282: LD_VAR 0 3
31286: PPUSH
31287: CALL_OW 297
31291: PUSH
31292: LD_VAR 0 5
31296: LESS
31297: IFFALSE 31241
// end ; ComTurnXY ( unit , x , y ) ;
31299: LD_VAR 0 1
31303: PPUSH
31304: LD_VAR 0 2
31308: PPUSH
31309: LD_VAR 0 3
31313: PPUSH
31314: CALL_OW 118
// wait ( 5 ) ;
31318: LD_INT 5
31320: PPUSH
31321: CALL_OW 67
// _d := GetDir ( unit ) ;
31325: LD_ADDR_VAR 0 10
31329: PUSH
31330: LD_VAR 0 1
31334: PPUSH
31335: CALL_OW 254
31339: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31340: LD_ADDR_VAR 0 8
31344: PUSH
31345: LD_VAR 0 1
31349: PPUSH
31350: CALL_OW 250
31354: PPUSH
31355: LD_VAR 0 10
31359: PPUSH
31360: LD_VAR 0 5
31364: PPUSH
31365: CALL_OW 272
31369: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31370: LD_ADDR_VAR 0 9
31374: PUSH
31375: LD_VAR 0 1
31379: PPUSH
31380: CALL_OW 251
31384: PPUSH
31385: LD_VAR 0 10
31389: PPUSH
31390: LD_VAR 0 5
31394: PPUSH
31395: CALL_OW 273
31399: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31400: LD_VAR 0 8
31404: PPUSH
31405: LD_VAR 0 9
31409: PPUSH
31410: CALL_OW 488
31414: NOT
31415: IFFALSE 31419
// exit ;
31417: GO 31526
// ComAnimCustom ( unit , 1 ) ;
31419: LD_VAR 0 1
31423: PPUSH
31424: LD_INT 1
31426: PPUSH
31427: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31431: LD_VAR 0 8
31435: PPUSH
31436: LD_VAR 0 9
31440: PPUSH
31441: LD_VAR 0 6
31445: PPUSH
31446: LD_VAR 0 7
31450: PPUSH
31451: CALL_OW 330
// repeat wait ( 1 ) ;
31455: LD_INT 1
31457: PPUSH
31458: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31462: LD_VAR 0 1
31466: PPUSH
31467: CALL_OW 316
31471: PUSH
31472: LD_VAR 0 1
31476: PPUSH
31477: CALL_OW 314
31481: OR
31482: PUSH
31483: LD_VAR 0 1
31487: PPUSH
31488: CALL_OW 302
31492: NOT
31493: OR
31494: PUSH
31495: LD_VAR 0 1
31499: PPUSH
31500: CALL_OW 301
31504: OR
31505: IFFALSE 31455
// RemoveSeeing ( _x , _y , side ) ;
31507: LD_VAR 0 8
31511: PPUSH
31512: LD_VAR 0 9
31516: PPUSH
31517: LD_VAR 0 6
31521: PPUSH
31522: CALL_OW 331
// end ; end_of_file
31526: LD_VAR 0 4
31530: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31531: LD_INT 0
31533: PPUSH
31534: PPUSH
// if exist_mode then
31535: LD_VAR 0 2
31539: IFFALSE 31564
// unit := CreateCharacter ( prefix & ident ) else
31541: LD_ADDR_VAR 0 5
31545: PUSH
31546: LD_VAR 0 3
31550: PUSH
31551: LD_VAR 0 1
31555: STR
31556: PPUSH
31557: CALL_OW 34
31561: ST_TO_ADDR
31562: GO 31579
// unit := NewCharacter ( ident ) ;
31564: LD_ADDR_VAR 0 5
31568: PUSH
31569: LD_VAR 0 1
31573: PPUSH
31574: CALL_OW 25
31578: ST_TO_ADDR
// result := unit ;
31579: LD_ADDR_VAR 0 4
31583: PUSH
31584: LD_VAR 0 5
31588: ST_TO_ADDR
// end ;
31589: LD_VAR 0 4
31593: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31594: LD_INT 0
31596: PPUSH
31597: PPUSH
// if not side or not nation then
31598: LD_VAR 0 1
31602: NOT
31603: PUSH
31604: LD_VAR 0 2
31608: NOT
31609: OR
31610: IFFALSE 31614
// exit ;
31612: GO 32382
// case nation of nation_american :
31614: LD_VAR 0 2
31618: PUSH
31619: LD_INT 1
31621: DOUBLE
31622: EQUAL
31623: IFTRUE 31627
31625: GO 31841
31627: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31628: LD_ADDR_VAR 0 4
31632: PUSH
31633: LD_INT 35
31635: PUSH
31636: LD_INT 45
31638: PUSH
31639: LD_INT 46
31641: PUSH
31642: LD_INT 47
31644: PUSH
31645: LD_INT 82
31647: PUSH
31648: LD_INT 83
31650: PUSH
31651: LD_INT 84
31653: PUSH
31654: LD_INT 85
31656: PUSH
31657: LD_INT 86
31659: PUSH
31660: LD_INT 1
31662: PUSH
31663: LD_INT 2
31665: PUSH
31666: LD_INT 6
31668: PUSH
31669: LD_INT 15
31671: PUSH
31672: LD_INT 16
31674: PUSH
31675: LD_INT 7
31677: PUSH
31678: LD_INT 12
31680: PUSH
31681: LD_INT 13
31683: PUSH
31684: LD_INT 10
31686: PUSH
31687: LD_INT 14
31689: PUSH
31690: LD_INT 20
31692: PUSH
31693: LD_INT 21
31695: PUSH
31696: LD_INT 22
31698: PUSH
31699: LD_INT 25
31701: PUSH
31702: LD_INT 32
31704: PUSH
31705: LD_INT 27
31707: PUSH
31708: LD_INT 36
31710: PUSH
31711: LD_INT 69
31713: PUSH
31714: LD_INT 39
31716: PUSH
31717: LD_INT 34
31719: PUSH
31720: LD_INT 40
31722: PUSH
31723: LD_INT 48
31725: PUSH
31726: LD_INT 49
31728: PUSH
31729: LD_INT 50
31731: PUSH
31732: LD_INT 51
31734: PUSH
31735: LD_INT 52
31737: PUSH
31738: LD_INT 53
31740: PUSH
31741: LD_INT 54
31743: PUSH
31744: LD_INT 55
31746: PUSH
31747: LD_INT 56
31749: PUSH
31750: LD_INT 57
31752: PUSH
31753: LD_INT 58
31755: PUSH
31756: LD_INT 59
31758: PUSH
31759: LD_INT 60
31761: PUSH
31762: LD_INT 61
31764: PUSH
31765: LD_INT 62
31767: PUSH
31768: LD_INT 80
31770: PUSH
31771: LD_INT 82
31773: PUSH
31774: LD_INT 83
31776: PUSH
31777: LD_INT 84
31779: PUSH
31780: LD_INT 85
31782: PUSH
31783: LD_INT 86
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: ST_TO_ADDR
31839: GO 32306
31841: LD_INT 2
31843: DOUBLE
31844: EQUAL
31845: IFTRUE 31849
31847: GO 32075
31849: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31850: LD_ADDR_VAR 0 4
31854: PUSH
31855: LD_INT 35
31857: PUSH
31858: LD_INT 45
31860: PUSH
31861: LD_INT 46
31863: PUSH
31864: LD_INT 47
31866: PUSH
31867: LD_INT 82
31869: PUSH
31870: LD_INT 83
31872: PUSH
31873: LD_INT 84
31875: PUSH
31876: LD_INT 85
31878: PUSH
31879: LD_INT 87
31881: PUSH
31882: LD_INT 70
31884: PUSH
31885: LD_INT 1
31887: PUSH
31888: LD_INT 11
31890: PUSH
31891: LD_INT 3
31893: PUSH
31894: LD_INT 4
31896: PUSH
31897: LD_INT 5
31899: PUSH
31900: LD_INT 6
31902: PUSH
31903: LD_INT 15
31905: PUSH
31906: LD_INT 18
31908: PUSH
31909: LD_INT 7
31911: PUSH
31912: LD_INT 17
31914: PUSH
31915: LD_INT 8
31917: PUSH
31918: LD_INT 20
31920: PUSH
31921: LD_INT 21
31923: PUSH
31924: LD_INT 22
31926: PUSH
31927: LD_INT 72
31929: PUSH
31930: LD_INT 26
31932: PUSH
31933: LD_INT 69
31935: PUSH
31936: LD_INT 39
31938: PUSH
31939: LD_INT 40
31941: PUSH
31942: LD_INT 41
31944: PUSH
31945: LD_INT 42
31947: PUSH
31948: LD_INT 43
31950: PUSH
31951: LD_INT 48
31953: PUSH
31954: LD_INT 49
31956: PUSH
31957: LD_INT 50
31959: PUSH
31960: LD_INT 51
31962: PUSH
31963: LD_INT 52
31965: PUSH
31966: LD_INT 53
31968: PUSH
31969: LD_INT 54
31971: PUSH
31972: LD_INT 55
31974: PUSH
31975: LD_INT 56
31977: PUSH
31978: LD_INT 60
31980: PUSH
31981: LD_INT 61
31983: PUSH
31984: LD_INT 62
31986: PUSH
31987: LD_INT 66
31989: PUSH
31990: LD_INT 67
31992: PUSH
31993: LD_INT 68
31995: PUSH
31996: LD_INT 81
31998: PUSH
31999: LD_INT 82
32001: PUSH
32002: LD_INT 83
32004: PUSH
32005: LD_INT 84
32007: PUSH
32008: LD_INT 85
32010: PUSH
32011: LD_INT 87
32013: PUSH
32014: LD_INT 88
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: ST_TO_ADDR
32073: GO 32306
32075: LD_INT 3
32077: DOUBLE
32078: EQUAL
32079: IFTRUE 32083
32081: GO 32305
32083: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32084: LD_ADDR_VAR 0 4
32088: PUSH
32089: LD_INT 46
32091: PUSH
32092: LD_INT 47
32094: PUSH
32095: LD_INT 1
32097: PUSH
32098: LD_INT 2
32100: PUSH
32101: LD_INT 82
32103: PUSH
32104: LD_INT 83
32106: PUSH
32107: LD_INT 84
32109: PUSH
32110: LD_INT 85
32112: PUSH
32113: LD_INT 86
32115: PUSH
32116: LD_INT 11
32118: PUSH
32119: LD_INT 9
32121: PUSH
32122: LD_INT 20
32124: PUSH
32125: LD_INT 19
32127: PUSH
32128: LD_INT 21
32130: PUSH
32131: LD_INT 24
32133: PUSH
32134: LD_INT 22
32136: PUSH
32137: LD_INT 25
32139: PUSH
32140: LD_INT 28
32142: PUSH
32143: LD_INT 29
32145: PUSH
32146: LD_INT 30
32148: PUSH
32149: LD_INT 31
32151: PUSH
32152: LD_INT 37
32154: PUSH
32155: LD_INT 38
32157: PUSH
32158: LD_INT 32
32160: PUSH
32161: LD_INT 27
32163: PUSH
32164: LD_INT 33
32166: PUSH
32167: LD_INT 69
32169: PUSH
32170: LD_INT 39
32172: PUSH
32173: LD_INT 34
32175: PUSH
32176: LD_INT 40
32178: PUSH
32179: LD_INT 71
32181: PUSH
32182: LD_INT 23
32184: PUSH
32185: LD_INT 44
32187: PUSH
32188: LD_INT 48
32190: PUSH
32191: LD_INT 49
32193: PUSH
32194: LD_INT 50
32196: PUSH
32197: LD_INT 51
32199: PUSH
32200: LD_INT 52
32202: PUSH
32203: LD_INT 53
32205: PUSH
32206: LD_INT 54
32208: PUSH
32209: LD_INT 55
32211: PUSH
32212: LD_INT 56
32214: PUSH
32215: LD_INT 57
32217: PUSH
32218: LD_INT 58
32220: PUSH
32221: LD_INT 59
32223: PUSH
32224: LD_INT 63
32226: PUSH
32227: LD_INT 64
32229: PUSH
32230: LD_INT 65
32232: PUSH
32233: LD_INT 82
32235: PUSH
32236: LD_INT 83
32238: PUSH
32239: LD_INT 84
32241: PUSH
32242: LD_INT 85
32244: PUSH
32245: LD_INT 86
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: ST_TO_ADDR
32303: GO 32306
32305: POP
// if state > - 1 and state < 3 then
32306: LD_VAR 0 3
32310: PUSH
32311: LD_INT 1
32313: NEG
32314: GREATER
32315: PUSH
32316: LD_VAR 0 3
32320: PUSH
32321: LD_INT 3
32323: LESS
32324: AND
32325: IFFALSE 32382
// for i in result do
32327: LD_ADDR_VAR 0 5
32331: PUSH
32332: LD_VAR 0 4
32336: PUSH
32337: FOR_IN
32338: IFFALSE 32380
// if GetTech ( i , side ) <> state then
32340: LD_VAR 0 5
32344: PPUSH
32345: LD_VAR 0 1
32349: PPUSH
32350: CALL_OW 321
32354: PUSH
32355: LD_VAR 0 3
32359: NONEQUAL
32360: IFFALSE 32378
// result := result diff i ;
32362: LD_ADDR_VAR 0 4
32366: PUSH
32367: LD_VAR 0 4
32371: PUSH
32372: LD_VAR 0 5
32376: DIFF
32377: ST_TO_ADDR
32378: GO 32337
32380: POP
32381: POP
// end ;
32382: LD_VAR 0 4
32386: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32387: LD_INT 0
32389: PPUSH
32390: PPUSH
32391: PPUSH
// result := true ;
32392: LD_ADDR_VAR 0 3
32396: PUSH
32397: LD_INT 1
32399: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32400: LD_ADDR_VAR 0 5
32404: PUSH
32405: LD_VAR 0 2
32409: PPUSH
32410: CALL_OW 480
32414: ST_TO_ADDR
// if not tmp then
32415: LD_VAR 0 5
32419: NOT
32420: IFFALSE 32424
// exit ;
32422: GO 32473
// for i in tmp do
32424: LD_ADDR_VAR 0 4
32428: PUSH
32429: LD_VAR 0 5
32433: PUSH
32434: FOR_IN
32435: IFFALSE 32471
// if GetTech ( i , side ) <> state_researched then
32437: LD_VAR 0 4
32441: PPUSH
32442: LD_VAR 0 1
32446: PPUSH
32447: CALL_OW 321
32451: PUSH
32452: LD_INT 2
32454: NONEQUAL
32455: IFFALSE 32469
// begin result := false ;
32457: LD_ADDR_VAR 0 3
32461: PUSH
32462: LD_INT 0
32464: ST_TO_ADDR
// exit ;
32465: POP
32466: POP
32467: GO 32473
// end ;
32469: GO 32434
32471: POP
32472: POP
// end ;
32473: LD_VAR 0 3
32477: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32478: LD_INT 0
32480: PPUSH
32481: PPUSH
32482: PPUSH
32483: PPUSH
32484: PPUSH
32485: PPUSH
32486: PPUSH
32487: PPUSH
32488: PPUSH
32489: PPUSH
32490: PPUSH
32491: PPUSH
32492: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32493: LD_VAR 0 1
32497: NOT
32498: PUSH
32499: LD_VAR 0 1
32503: PPUSH
32504: CALL_OW 257
32508: PUSH
32509: LD_INT 9
32511: NONEQUAL
32512: OR
32513: IFFALSE 32517
// exit ;
32515: GO 33090
// side := GetSide ( unit ) ;
32517: LD_ADDR_VAR 0 9
32521: PUSH
32522: LD_VAR 0 1
32526: PPUSH
32527: CALL_OW 255
32531: ST_TO_ADDR
// tech_space := tech_spacanom ;
32532: LD_ADDR_VAR 0 12
32536: PUSH
32537: LD_INT 29
32539: ST_TO_ADDR
// tech_time := tech_taurad ;
32540: LD_ADDR_VAR 0 13
32544: PUSH
32545: LD_INT 28
32547: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32548: LD_ADDR_VAR 0 11
32552: PUSH
32553: LD_VAR 0 1
32557: PPUSH
32558: CALL_OW 310
32562: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32563: LD_VAR 0 11
32567: PPUSH
32568: CALL_OW 247
32572: PUSH
32573: LD_INT 2
32575: EQUAL
32576: IFFALSE 32580
// exit ;
32578: GO 33090
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32580: LD_ADDR_VAR 0 8
32584: PUSH
32585: LD_INT 81
32587: PUSH
32588: LD_VAR 0 9
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 3
32599: PUSH
32600: LD_INT 21
32602: PUSH
32603: LD_INT 3
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PPUSH
32618: CALL_OW 69
32622: ST_TO_ADDR
// if not tmp then
32623: LD_VAR 0 8
32627: NOT
32628: IFFALSE 32632
// exit ;
32630: GO 33090
// if in_unit then
32632: LD_VAR 0 11
32636: IFFALSE 32660
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32638: LD_ADDR_VAR 0 10
32642: PUSH
32643: LD_VAR 0 8
32647: PPUSH
32648: LD_VAR 0 11
32652: PPUSH
32653: CALL_OW 74
32657: ST_TO_ADDR
32658: GO 32680
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32660: LD_ADDR_VAR 0 10
32664: PUSH
32665: LD_VAR 0 8
32669: PPUSH
32670: LD_VAR 0 1
32674: PPUSH
32675: CALL_OW 74
32679: ST_TO_ADDR
// if not enemy then
32680: LD_VAR 0 10
32684: NOT
32685: IFFALSE 32689
// exit ;
32687: GO 33090
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32689: LD_VAR 0 11
32693: PUSH
32694: LD_VAR 0 11
32698: PPUSH
32699: LD_VAR 0 10
32703: PPUSH
32704: CALL_OW 296
32708: PUSH
32709: LD_INT 13
32711: GREATER
32712: AND
32713: PUSH
32714: LD_VAR 0 1
32718: PPUSH
32719: LD_VAR 0 10
32723: PPUSH
32724: CALL_OW 296
32728: PUSH
32729: LD_INT 12
32731: GREATER
32732: OR
32733: IFFALSE 32737
// exit ;
32735: GO 33090
// missile := [ 1 ] ;
32737: LD_ADDR_VAR 0 14
32741: PUSH
32742: LD_INT 1
32744: PUSH
32745: EMPTY
32746: LIST
32747: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32748: LD_VAR 0 9
32752: PPUSH
32753: LD_VAR 0 12
32757: PPUSH
32758: CALL_OW 325
32762: IFFALSE 32791
// missile := Replace ( missile , missile + 1 , 2 ) ;
32764: LD_ADDR_VAR 0 14
32768: PUSH
32769: LD_VAR 0 14
32773: PPUSH
32774: LD_VAR 0 14
32778: PUSH
32779: LD_INT 1
32781: PLUS
32782: PPUSH
32783: LD_INT 2
32785: PPUSH
32786: CALL_OW 1
32790: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32791: LD_VAR 0 9
32795: PPUSH
32796: LD_VAR 0 13
32800: PPUSH
32801: CALL_OW 325
32805: PUSH
32806: LD_VAR 0 10
32810: PPUSH
32811: CALL_OW 255
32815: PPUSH
32816: LD_VAR 0 13
32820: PPUSH
32821: CALL_OW 325
32825: NOT
32826: AND
32827: IFFALSE 32856
// missile := Replace ( missile , missile + 1 , 3 ) ;
32829: LD_ADDR_VAR 0 14
32833: PUSH
32834: LD_VAR 0 14
32838: PPUSH
32839: LD_VAR 0 14
32843: PUSH
32844: LD_INT 1
32846: PLUS
32847: PPUSH
32848: LD_INT 3
32850: PPUSH
32851: CALL_OW 1
32855: ST_TO_ADDR
// if missile < 2 then
32856: LD_VAR 0 14
32860: PUSH
32861: LD_INT 2
32863: LESS
32864: IFFALSE 32868
// exit ;
32866: GO 33090
// x := GetX ( enemy ) ;
32868: LD_ADDR_VAR 0 4
32872: PUSH
32873: LD_VAR 0 10
32877: PPUSH
32878: CALL_OW 250
32882: ST_TO_ADDR
// y := GetY ( enemy ) ;
32883: LD_ADDR_VAR 0 5
32887: PUSH
32888: LD_VAR 0 10
32892: PPUSH
32893: CALL_OW 251
32897: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32898: LD_ADDR_VAR 0 6
32902: PUSH
32903: LD_VAR 0 4
32907: PUSH
32908: LD_INT 1
32910: NEG
32911: PPUSH
32912: LD_INT 1
32914: PPUSH
32915: CALL_OW 12
32919: PLUS
32920: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32921: LD_ADDR_VAR 0 7
32925: PUSH
32926: LD_VAR 0 5
32930: PUSH
32931: LD_INT 1
32933: NEG
32934: PPUSH
32935: LD_INT 1
32937: PPUSH
32938: CALL_OW 12
32942: PLUS
32943: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32944: LD_VAR 0 6
32948: PPUSH
32949: LD_VAR 0 7
32953: PPUSH
32954: CALL_OW 488
32958: NOT
32959: IFFALSE 32981
// begin _x := x ;
32961: LD_ADDR_VAR 0 6
32965: PUSH
32966: LD_VAR 0 4
32970: ST_TO_ADDR
// _y := y ;
32971: LD_ADDR_VAR 0 7
32975: PUSH
32976: LD_VAR 0 5
32980: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32981: LD_ADDR_VAR 0 3
32985: PUSH
32986: LD_INT 1
32988: PPUSH
32989: LD_VAR 0 14
32993: PPUSH
32994: CALL_OW 12
32998: ST_TO_ADDR
// case i of 1 :
32999: LD_VAR 0 3
33003: PUSH
33004: LD_INT 1
33006: DOUBLE
33007: EQUAL
33008: IFTRUE 33012
33010: GO 33029
33012: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33013: LD_VAR 0 1
33017: PPUSH
33018: LD_VAR 0 10
33022: PPUSH
33023: CALL_OW 115
33027: GO 33090
33029: LD_INT 2
33031: DOUBLE
33032: EQUAL
33033: IFTRUE 33037
33035: GO 33059
33037: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33038: LD_VAR 0 1
33042: PPUSH
33043: LD_VAR 0 6
33047: PPUSH
33048: LD_VAR 0 7
33052: PPUSH
33053: CALL_OW 153
33057: GO 33090
33059: LD_INT 3
33061: DOUBLE
33062: EQUAL
33063: IFTRUE 33067
33065: GO 33089
33067: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33068: LD_VAR 0 1
33072: PPUSH
33073: LD_VAR 0 6
33077: PPUSH
33078: LD_VAR 0 7
33082: PPUSH
33083: CALL_OW 154
33087: GO 33090
33089: POP
// end ;
33090: LD_VAR 0 2
33094: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33095: LD_INT 0
33097: PPUSH
33098: PPUSH
33099: PPUSH
33100: PPUSH
33101: PPUSH
33102: PPUSH
// if not unit or not building then
33103: LD_VAR 0 1
33107: NOT
33108: PUSH
33109: LD_VAR 0 2
33113: NOT
33114: OR
33115: IFFALSE 33119
// exit ;
33117: GO 33277
// x := GetX ( building ) ;
33119: LD_ADDR_VAR 0 5
33123: PUSH
33124: LD_VAR 0 2
33128: PPUSH
33129: CALL_OW 250
33133: ST_TO_ADDR
// y := GetY ( building ) ;
33134: LD_ADDR_VAR 0 6
33138: PUSH
33139: LD_VAR 0 2
33143: PPUSH
33144: CALL_OW 251
33148: ST_TO_ADDR
// for i = 0 to 5 do
33149: LD_ADDR_VAR 0 4
33153: PUSH
33154: DOUBLE
33155: LD_INT 0
33157: DEC
33158: ST_TO_ADDR
33159: LD_INT 5
33161: PUSH
33162: FOR_TO
33163: IFFALSE 33275
// begin _x := ShiftX ( x , i , 3 ) ;
33165: LD_ADDR_VAR 0 7
33169: PUSH
33170: LD_VAR 0 5
33174: PPUSH
33175: LD_VAR 0 4
33179: PPUSH
33180: LD_INT 3
33182: PPUSH
33183: CALL_OW 272
33187: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33188: LD_ADDR_VAR 0 8
33192: PUSH
33193: LD_VAR 0 6
33197: PPUSH
33198: LD_VAR 0 4
33202: PPUSH
33203: LD_INT 3
33205: PPUSH
33206: CALL_OW 273
33210: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33211: LD_VAR 0 7
33215: PPUSH
33216: LD_VAR 0 8
33220: PPUSH
33221: CALL_OW 488
33225: NOT
33226: IFFALSE 33230
// continue ;
33228: GO 33162
// if HexInfo ( _x , _y ) = 0 then
33230: LD_VAR 0 7
33234: PPUSH
33235: LD_VAR 0 8
33239: PPUSH
33240: CALL_OW 428
33244: PUSH
33245: LD_INT 0
33247: EQUAL
33248: IFFALSE 33273
// begin ComMoveXY ( unit , _x , _y ) ;
33250: LD_VAR 0 1
33254: PPUSH
33255: LD_VAR 0 7
33259: PPUSH
33260: LD_VAR 0 8
33264: PPUSH
33265: CALL_OW 111
// exit ;
33269: POP
33270: POP
33271: GO 33277
// end ; end ;
33273: GO 33162
33275: POP
33276: POP
// end ;
33277: LD_VAR 0 3
33281: RET
// export function ScanBase ( side , base_area ) ; begin
33282: LD_INT 0
33284: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33285: LD_ADDR_VAR 0 3
33289: PUSH
33290: LD_VAR 0 2
33294: PPUSH
33295: LD_INT 81
33297: PUSH
33298: LD_VAR 0 1
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PPUSH
33307: CALL_OW 70
33311: ST_TO_ADDR
// end ;
33312: LD_VAR 0 3
33316: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33317: LD_INT 0
33319: PPUSH
33320: PPUSH
33321: PPUSH
33322: PPUSH
// result := false ;
33323: LD_ADDR_VAR 0 2
33327: PUSH
33328: LD_INT 0
33330: ST_TO_ADDR
// side := GetSide ( unit ) ;
33331: LD_ADDR_VAR 0 3
33335: PUSH
33336: LD_VAR 0 1
33340: PPUSH
33341: CALL_OW 255
33345: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33346: LD_ADDR_VAR 0 4
33350: PUSH
33351: LD_VAR 0 1
33355: PPUSH
33356: CALL_OW 248
33360: ST_TO_ADDR
// case nat of 1 :
33361: LD_VAR 0 4
33365: PUSH
33366: LD_INT 1
33368: DOUBLE
33369: EQUAL
33370: IFTRUE 33374
33372: GO 33385
33374: POP
// tech := tech_lassight ; 2 :
33375: LD_ADDR_VAR 0 5
33379: PUSH
33380: LD_INT 12
33382: ST_TO_ADDR
33383: GO 33424
33385: LD_INT 2
33387: DOUBLE
33388: EQUAL
33389: IFTRUE 33393
33391: GO 33404
33393: POP
// tech := tech_mortar ; 3 :
33394: LD_ADDR_VAR 0 5
33398: PUSH
33399: LD_INT 41
33401: ST_TO_ADDR
33402: GO 33424
33404: LD_INT 3
33406: DOUBLE
33407: EQUAL
33408: IFTRUE 33412
33410: GO 33423
33412: POP
// tech := tech_bazooka ; end ;
33413: LD_ADDR_VAR 0 5
33417: PUSH
33418: LD_INT 44
33420: ST_TO_ADDR
33421: GO 33424
33423: POP
// if Researched ( side , tech ) then
33424: LD_VAR 0 3
33428: PPUSH
33429: LD_VAR 0 5
33433: PPUSH
33434: CALL_OW 325
33438: IFFALSE 33465
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33440: LD_ADDR_VAR 0 2
33444: PUSH
33445: LD_INT 5
33447: PUSH
33448: LD_INT 8
33450: PUSH
33451: LD_INT 9
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: LIST
33458: PUSH
33459: LD_VAR 0 4
33463: ARRAY
33464: ST_TO_ADDR
// end ;
33465: LD_VAR 0 2
33469: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33470: LD_INT 0
33472: PPUSH
33473: PPUSH
33474: PPUSH
// if not mines then
33475: LD_VAR 0 2
33479: NOT
33480: IFFALSE 33484
// exit ;
33482: GO 33628
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33484: LD_ADDR_VAR 0 5
33488: PUSH
33489: LD_INT 81
33491: PUSH
33492: LD_VAR 0 1
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 3
33503: PUSH
33504: LD_INT 21
33506: PUSH
33507: LD_INT 3
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PPUSH
33522: CALL_OW 69
33526: ST_TO_ADDR
// for i in mines do
33527: LD_ADDR_VAR 0 4
33531: PUSH
33532: LD_VAR 0 2
33536: PUSH
33537: FOR_IN
33538: IFFALSE 33626
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33540: LD_VAR 0 4
33544: PUSH
33545: LD_INT 1
33547: ARRAY
33548: PPUSH
33549: LD_VAR 0 4
33553: PUSH
33554: LD_INT 2
33556: ARRAY
33557: PPUSH
33558: CALL_OW 458
33562: NOT
33563: IFFALSE 33567
// continue ;
33565: GO 33537
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33567: LD_VAR 0 4
33571: PUSH
33572: LD_INT 1
33574: ARRAY
33575: PPUSH
33576: LD_VAR 0 4
33580: PUSH
33581: LD_INT 2
33583: ARRAY
33584: PPUSH
33585: CALL_OW 428
33589: PUSH
33590: LD_VAR 0 5
33594: IN
33595: IFFALSE 33624
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33597: LD_VAR 0 4
33601: PUSH
33602: LD_INT 1
33604: ARRAY
33605: PPUSH
33606: LD_VAR 0 4
33610: PUSH
33611: LD_INT 2
33613: ARRAY
33614: PPUSH
33615: LD_VAR 0 1
33619: PPUSH
33620: CALL_OW 456
// end ;
33624: GO 33537
33626: POP
33627: POP
// end ;
33628: LD_VAR 0 3
33632: RET
// export function Count ( array ) ; begin
33633: LD_INT 0
33635: PPUSH
// result := array + 0 ;
33636: LD_ADDR_VAR 0 2
33640: PUSH
33641: LD_VAR 0 1
33645: PUSH
33646: LD_INT 0
33648: PLUS
33649: ST_TO_ADDR
// end ;
33650: LD_VAR 0 2
33654: RET
// export function IsEmpty ( building ) ; begin
33655: LD_INT 0
33657: PPUSH
// if not building then
33658: LD_VAR 0 1
33662: NOT
33663: IFFALSE 33667
// exit ;
33665: GO 33710
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33667: LD_ADDR_VAR 0 2
33671: PUSH
33672: LD_VAR 0 1
33676: PUSH
33677: LD_INT 22
33679: PUSH
33680: LD_VAR 0 1
33684: PPUSH
33685: CALL_OW 255
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 58
33696: PUSH
33697: EMPTY
33698: LIST
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PPUSH
33704: CALL_OW 69
33708: IN
33709: ST_TO_ADDR
// end ;
33710: LD_VAR 0 2
33714: RET
// export function IsNotFull ( building ) ; var places ; begin
33715: LD_INT 0
33717: PPUSH
33718: PPUSH
// if not building then
33719: LD_VAR 0 1
33723: NOT
33724: IFFALSE 33728
// exit ;
33726: GO 33756
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33728: LD_ADDR_VAR 0 2
33732: PUSH
33733: LD_VAR 0 1
33737: PPUSH
33738: LD_INT 3
33740: PUSH
33741: LD_INT 62
33743: PUSH
33744: EMPTY
33745: LIST
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PPUSH
33751: CALL_OW 72
33755: ST_TO_ADDR
// end ;
33756: LD_VAR 0 2
33760: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33761: LD_INT 0
33763: PPUSH
33764: PPUSH
33765: PPUSH
33766: PPUSH
// tmp := [ ] ;
33767: LD_ADDR_VAR 0 3
33771: PUSH
33772: EMPTY
33773: ST_TO_ADDR
// list := [ ] ;
33774: LD_ADDR_VAR 0 5
33778: PUSH
33779: EMPTY
33780: ST_TO_ADDR
// for i = 16 to 25 do
33781: LD_ADDR_VAR 0 4
33785: PUSH
33786: DOUBLE
33787: LD_INT 16
33789: DEC
33790: ST_TO_ADDR
33791: LD_INT 25
33793: PUSH
33794: FOR_TO
33795: IFFALSE 33868
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33797: LD_ADDR_VAR 0 3
33801: PUSH
33802: LD_VAR 0 3
33806: PUSH
33807: LD_INT 22
33809: PUSH
33810: LD_VAR 0 1
33814: PPUSH
33815: CALL_OW 255
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 91
33826: PUSH
33827: LD_VAR 0 1
33831: PUSH
33832: LD_INT 6
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 30
33842: PUSH
33843: LD_VAR 0 4
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: LIST
33856: PUSH
33857: EMPTY
33858: LIST
33859: PPUSH
33860: CALL_OW 69
33864: ADD
33865: ST_TO_ADDR
33866: GO 33794
33868: POP
33869: POP
// for i = 1 to tmp do
33870: LD_ADDR_VAR 0 4
33874: PUSH
33875: DOUBLE
33876: LD_INT 1
33878: DEC
33879: ST_TO_ADDR
33880: LD_VAR 0 3
33884: PUSH
33885: FOR_TO
33886: IFFALSE 33974
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33888: LD_ADDR_VAR 0 5
33892: PUSH
33893: LD_VAR 0 5
33897: PUSH
33898: LD_VAR 0 3
33902: PUSH
33903: LD_VAR 0 4
33907: ARRAY
33908: PPUSH
33909: CALL_OW 266
33913: PUSH
33914: LD_VAR 0 3
33918: PUSH
33919: LD_VAR 0 4
33923: ARRAY
33924: PPUSH
33925: CALL_OW 250
33929: PUSH
33930: LD_VAR 0 3
33934: PUSH
33935: LD_VAR 0 4
33939: ARRAY
33940: PPUSH
33941: CALL_OW 251
33945: PUSH
33946: LD_VAR 0 3
33950: PUSH
33951: LD_VAR 0 4
33955: ARRAY
33956: PPUSH
33957: CALL_OW 254
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: PUSH
33968: EMPTY
33969: LIST
33970: ADD
33971: ST_TO_ADDR
33972: GO 33885
33974: POP
33975: POP
// result := list ;
33976: LD_ADDR_VAR 0 2
33980: PUSH
33981: LD_VAR 0 5
33985: ST_TO_ADDR
// end ;
33986: LD_VAR 0 2
33990: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33991: LD_INT 0
33993: PPUSH
33994: PPUSH
33995: PPUSH
33996: PPUSH
33997: PPUSH
33998: PPUSH
33999: PPUSH
// if not factory then
34000: LD_VAR 0 1
34004: NOT
34005: IFFALSE 34009
// exit ;
34007: GO 34602
// if control = control_apeman then
34009: LD_VAR 0 4
34013: PUSH
34014: LD_INT 5
34016: EQUAL
34017: IFFALSE 34126
// begin tmp := UnitsInside ( factory ) ;
34019: LD_ADDR_VAR 0 8
34023: PUSH
34024: LD_VAR 0 1
34028: PPUSH
34029: CALL_OW 313
34033: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34034: LD_VAR 0 8
34038: PPUSH
34039: LD_INT 25
34041: PUSH
34042: LD_INT 12
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PPUSH
34049: CALL_OW 72
34053: NOT
34054: IFFALSE 34064
// control := control_manual ;
34056: LD_ADDR_VAR 0 4
34060: PUSH
34061: LD_INT 1
34063: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34064: LD_ADDR_VAR 0 8
34068: PUSH
34069: LD_VAR 0 1
34073: PPUSH
34074: CALL 33761 0 1
34078: ST_TO_ADDR
// if tmp then
34079: LD_VAR 0 8
34083: IFFALSE 34126
// begin for i in tmp do
34085: LD_ADDR_VAR 0 7
34089: PUSH
34090: LD_VAR 0 8
34094: PUSH
34095: FOR_IN
34096: IFFALSE 34124
// if i [ 1 ] = b_ext_radio then
34098: LD_VAR 0 7
34102: PUSH
34103: LD_INT 1
34105: ARRAY
34106: PUSH
34107: LD_INT 22
34109: EQUAL
34110: IFFALSE 34122
// begin control := control_remote ;
34112: LD_ADDR_VAR 0 4
34116: PUSH
34117: LD_INT 2
34119: ST_TO_ADDR
// break ;
34120: GO 34124
// end ;
34122: GO 34095
34124: POP
34125: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34126: LD_VAR 0 1
34130: PPUSH
34131: LD_VAR 0 2
34135: PPUSH
34136: LD_VAR 0 3
34140: PPUSH
34141: LD_VAR 0 4
34145: PPUSH
34146: LD_VAR 0 5
34150: PPUSH
34151: CALL_OW 448
34155: IFFALSE 34190
// begin result := [ chassis , engine , control , weapon ] ;
34157: LD_ADDR_VAR 0 6
34161: PUSH
34162: LD_VAR 0 2
34166: PUSH
34167: LD_VAR 0 3
34171: PUSH
34172: LD_VAR 0 4
34176: PUSH
34177: LD_VAR 0 5
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: ST_TO_ADDR
// exit ;
34188: GO 34602
// end ; _chassis := AvailableChassisList ( factory ) ;
34190: LD_ADDR_VAR 0 9
34194: PUSH
34195: LD_VAR 0 1
34199: PPUSH
34200: CALL_OW 475
34204: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34205: LD_ADDR_VAR 0 11
34209: PUSH
34210: LD_VAR 0 1
34214: PPUSH
34215: CALL_OW 476
34219: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34220: LD_ADDR_VAR 0 12
34224: PUSH
34225: LD_VAR 0 1
34229: PPUSH
34230: CALL_OW 477
34234: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34235: LD_ADDR_VAR 0 10
34239: PUSH
34240: LD_VAR 0 1
34244: PPUSH
34245: CALL_OW 478
34249: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34250: LD_VAR 0 9
34254: NOT
34255: PUSH
34256: LD_VAR 0 11
34260: NOT
34261: OR
34262: PUSH
34263: LD_VAR 0 12
34267: NOT
34268: OR
34269: PUSH
34270: LD_VAR 0 10
34274: NOT
34275: OR
34276: IFFALSE 34311
// begin result := [ chassis , engine , control , weapon ] ;
34278: LD_ADDR_VAR 0 6
34282: PUSH
34283: LD_VAR 0 2
34287: PUSH
34288: LD_VAR 0 3
34292: PUSH
34293: LD_VAR 0 4
34297: PUSH
34298: LD_VAR 0 5
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: ST_TO_ADDR
// exit ;
34309: GO 34602
// end ; if not chassis in _chassis then
34311: LD_VAR 0 2
34315: PUSH
34316: LD_VAR 0 9
34320: IN
34321: NOT
34322: IFFALSE 34348
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34324: LD_ADDR_VAR 0 2
34328: PUSH
34329: LD_VAR 0 9
34333: PUSH
34334: LD_INT 1
34336: PPUSH
34337: LD_VAR 0 9
34341: PPUSH
34342: CALL_OW 12
34346: ARRAY
34347: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34348: LD_VAR 0 2
34352: PPUSH
34353: LD_VAR 0 3
34357: PPUSH
34358: CALL 34607 0 2
34362: NOT
34363: IFFALSE 34422
// repeat engine := _engine [ 1 ] ;
34365: LD_ADDR_VAR 0 3
34369: PUSH
34370: LD_VAR 0 11
34374: PUSH
34375: LD_INT 1
34377: ARRAY
34378: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34379: LD_ADDR_VAR 0 11
34383: PUSH
34384: LD_VAR 0 11
34388: PPUSH
34389: LD_INT 1
34391: PPUSH
34392: CALL_OW 3
34396: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34397: LD_VAR 0 2
34401: PPUSH
34402: LD_VAR 0 3
34406: PPUSH
34407: CALL 34607 0 2
34411: PUSH
34412: LD_VAR 0 11
34416: PUSH
34417: EMPTY
34418: EQUAL
34419: OR
34420: IFFALSE 34365
// if not control in _control then
34422: LD_VAR 0 4
34426: PUSH
34427: LD_VAR 0 12
34431: IN
34432: NOT
34433: IFFALSE 34459
// control := _control [ rand ( 1 , _control ) ] ;
34435: LD_ADDR_VAR 0 4
34439: PUSH
34440: LD_VAR 0 12
34444: PUSH
34445: LD_INT 1
34447: PPUSH
34448: LD_VAR 0 12
34452: PPUSH
34453: CALL_OW 12
34457: ARRAY
34458: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34459: LD_VAR 0 2
34463: PPUSH
34464: LD_VAR 0 5
34468: PPUSH
34469: CALL 34827 0 2
34473: NOT
34474: IFFALSE 34533
// repeat weapon := _weapon [ 1 ] ;
34476: LD_ADDR_VAR 0 5
34480: PUSH
34481: LD_VAR 0 10
34485: PUSH
34486: LD_INT 1
34488: ARRAY
34489: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34490: LD_ADDR_VAR 0 10
34494: PUSH
34495: LD_VAR 0 10
34499: PPUSH
34500: LD_INT 1
34502: PPUSH
34503: CALL_OW 3
34507: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34508: LD_VAR 0 2
34512: PPUSH
34513: LD_VAR 0 5
34517: PPUSH
34518: CALL 34827 0 2
34522: PUSH
34523: LD_VAR 0 10
34527: PUSH
34528: EMPTY
34529: EQUAL
34530: OR
34531: IFFALSE 34476
// result := [ ] ;
34533: LD_ADDR_VAR 0 6
34537: PUSH
34538: EMPTY
34539: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34540: LD_VAR 0 1
34544: PPUSH
34545: LD_VAR 0 2
34549: PPUSH
34550: LD_VAR 0 3
34554: PPUSH
34555: LD_VAR 0 4
34559: PPUSH
34560: LD_VAR 0 5
34564: PPUSH
34565: CALL_OW 448
34569: IFFALSE 34602
// result := [ chassis , engine , control , weapon ] ;
34571: LD_ADDR_VAR 0 6
34575: PUSH
34576: LD_VAR 0 2
34580: PUSH
34581: LD_VAR 0 3
34585: PUSH
34586: LD_VAR 0 4
34590: PUSH
34591: LD_VAR 0 5
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: ST_TO_ADDR
// end ;
34602: LD_VAR 0 6
34606: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34607: LD_INT 0
34609: PPUSH
// if not chassis or not engine then
34610: LD_VAR 0 1
34614: NOT
34615: PUSH
34616: LD_VAR 0 2
34620: NOT
34621: OR
34622: IFFALSE 34626
// exit ;
34624: GO 34822
// case engine of engine_solar :
34626: LD_VAR 0 2
34630: PUSH
34631: LD_INT 2
34633: DOUBLE
34634: EQUAL
34635: IFTRUE 34639
34637: GO 34677
34639: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34640: LD_ADDR_VAR 0 3
34644: PUSH
34645: LD_INT 11
34647: PUSH
34648: LD_INT 12
34650: PUSH
34651: LD_INT 13
34653: PUSH
34654: LD_INT 14
34656: PUSH
34657: LD_INT 1
34659: PUSH
34660: LD_INT 2
34662: PUSH
34663: LD_INT 3
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: ST_TO_ADDR
34675: GO 34806
34677: LD_INT 1
34679: DOUBLE
34680: EQUAL
34681: IFTRUE 34685
34683: GO 34747
34685: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34686: LD_ADDR_VAR 0 3
34690: PUSH
34691: LD_INT 11
34693: PUSH
34694: LD_INT 12
34696: PUSH
34697: LD_INT 13
34699: PUSH
34700: LD_INT 14
34702: PUSH
34703: LD_INT 1
34705: PUSH
34706: LD_INT 2
34708: PUSH
34709: LD_INT 3
34711: PUSH
34712: LD_INT 4
34714: PUSH
34715: LD_INT 5
34717: PUSH
34718: LD_INT 21
34720: PUSH
34721: LD_INT 23
34723: PUSH
34724: LD_INT 22
34726: PUSH
34727: LD_INT 24
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: ST_TO_ADDR
34745: GO 34806
34747: LD_INT 3
34749: DOUBLE
34750: EQUAL
34751: IFTRUE 34755
34753: GO 34805
34755: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34756: LD_ADDR_VAR 0 3
34760: PUSH
34761: LD_INT 13
34763: PUSH
34764: LD_INT 14
34766: PUSH
34767: LD_INT 2
34769: PUSH
34770: LD_INT 3
34772: PUSH
34773: LD_INT 4
34775: PUSH
34776: LD_INT 5
34778: PUSH
34779: LD_INT 21
34781: PUSH
34782: LD_INT 22
34784: PUSH
34785: LD_INT 23
34787: PUSH
34788: LD_INT 24
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: ST_TO_ADDR
34803: GO 34806
34805: POP
// result := ( chassis in result ) ;
34806: LD_ADDR_VAR 0 3
34810: PUSH
34811: LD_VAR 0 1
34815: PUSH
34816: LD_VAR 0 3
34820: IN
34821: ST_TO_ADDR
// end ;
34822: LD_VAR 0 3
34826: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34827: LD_INT 0
34829: PPUSH
// if not chassis or not weapon then
34830: LD_VAR 0 1
34834: NOT
34835: PUSH
34836: LD_VAR 0 2
34840: NOT
34841: OR
34842: IFFALSE 34846
// exit ;
34844: GO 35906
// case weapon of us_machine_gun :
34846: LD_VAR 0 2
34850: PUSH
34851: LD_INT 2
34853: DOUBLE
34854: EQUAL
34855: IFTRUE 34859
34857: GO 34889
34859: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34860: LD_ADDR_VAR 0 3
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: LD_INT 2
34870: PUSH
34871: LD_INT 3
34873: PUSH
34874: LD_INT 4
34876: PUSH
34877: LD_INT 5
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: ST_TO_ADDR
34887: GO 35890
34889: LD_INT 3
34891: DOUBLE
34892: EQUAL
34893: IFTRUE 34897
34895: GO 34927
34897: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34898: LD_ADDR_VAR 0 3
34902: PUSH
34903: LD_INT 1
34905: PUSH
34906: LD_INT 2
34908: PUSH
34909: LD_INT 3
34911: PUSH
34912: LD_INT 4
34914: PUSH
34915: LD_INT 5
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: ST_TO_ADDR
34925: GO 35890
34927: LD_INT 11
34929: DOUBLE
34930: EQUAL
34931: IFTRUE 34935
34933: GO 34965
34935: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34936: LD_ADDR_VAR 0 3
34940: PUSH
34941: LD_INT 1
34943: PUSH
34944: LD_INT 2
34946: PUSH
34947: LD_INT 3
34949: PUSH
34950: LD_INT 4
34952: PUSH
34953: LD_INT 5
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: ST_TO_ADDR
34963: GO 35890
34965: LD_INT 4
34967: DOUBLE
34968: EQUAL
34969: IFTRUE 34973
34971: GO 34999
34973: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34974: LD_ADDR_VAR 0 3
34978: PUSH
34979: LD_INT 2
34981: PUSH
34982: LD_INT 3
34984: PUSH
34985: LD_INT 4
34987: PUSH
34988: LD_INT 5
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: ST_TO_ADDR
34997: GO 35890
34999: LD_INT 5
35001: DOUBLE
35002: EQUAL
35003: IFTRUE 35007
35005: GO 35033
35007: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35008: LD_ADDR_VAR 0 3
35012: PUSH
35013: LD_INT 2
35015: PUSH
35016: LD_INT 3
35018: PUSH
35019: LD_INT 4
35021: PUSH
35022: LD_INT 5
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: ST_TO_ADDR
35031: GO 35890
35033: LD_INT 9
35035: DOUBLE
35036: EQUAL
35037: IFTRUE 35041
35039: GO 35067
35041: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35042: LD_ADDR_VAR 0 3
35046: PUSH
35047: LD_INT 2
35049: PUSH
35050: LD_INT 3
35052: PUSH
35053: LD_INT 4
35055: PUSH
35056: LD_INT 5
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: ST_TO_ADDR
35065: GO 35890
35067: LD_INT 7
35069: DOUBLE
35070: EQUAL
35071: IFTRUE 35075
35073: GO 35101
35075: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35076: LD_ADDR_VAR 0 3
35080: PUSH
35081: LD_INT 2
35083: PUSH
35084: LD_INT 3
35086: PUSH
35087: LD_INT 4
35089: PUSH
35090: LD_INT 5
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: ST_TO_ADDR
35099: GO 35890
35101: LD_INT 12
35103: DOUBLE
35104: EQUAL
35105: IFTRUE 35109
35107: GO 35135
35109: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35110: LD_ADDR_VAR 0 3
35114: PUSH
35115: LD_INT 2
35117: PUSH
35118: LD_INT 3
35120: PUSH
35121: LD_INT 4
35123: PUSH
35124: LD_INT 5
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: ST_TO_ADDR
35133: GO 35890
35135: LD_INT 13
35137: DOUBLE
35138: EQUAL
35139: IFTRUE 35143
35141: GO 35169
35143: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35144: LD_ADDR_VAR 0 3
35148: PUSH
35149: LD_INT 2
35151: PUSH
35152: LD_INT 3
35154: PUSH
35155: LD_INT 4
35157: PUSH
35158: LD_INT 5
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: ST_TO_ADDR
35167: GO 35890
35169: LD_INT 14
35171: DOUBLE
35172: EQUAL
35173: IFTRUE 35177
35175: GO 35195
35177: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35178: LD_ADDR_VAR 0 3
35182: PUSH
35183: LD_INT 4
35185: PUSH
35186: LD_INT 5
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: ST_TO_ADDR
35193: GO 35890
35195: LD_INT 6
35197: DOUBLE
35198: EQUAL
35199: IFTRUE 35203
35201: GO 35221
35203: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35204: LD_ADDR_VAR 0 3
35208: PUSH
35209: LD_INT 4
35211: PUSH
35212: LD_INT 5
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: ST_TO_ADDR
35219: GO 35890
35221: LD_INT 10
35223: DOUBLE
35224: EQUAL
35225: IFTRUE 35229
35227: GO 35247
35229: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35230: LD_ADDR_VAR 0 3
35234: PUSH
35235: LD_INT 4
35237: PUSH
35238: LD_INT 5
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: ST_TO_ADDR
35245: GO 35890
35247: LD_INT 22
35249: DOUBLE
35250: EQUAL
35251: IFTRUE 35255
35253: GO 35281
35255: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35256: LD_ADDR_VAR 0 3
35260: PUSH
35261: LD_INT 11
35263: PUSH
35264: LD_INT 12
35266: PUSH
35267: LD_INT 13
35269: PUSH
35270: LD_INT 14
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: ST_TO_ADDR
35279: GO 35890
35281: LD_INT 23
35283: DOUBLE
35284: EQUAL
35285: IFTRUE 35289
35287: GO 35315
35289: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35290: LD_ADDR_VAR 0 3
35294: PUSH
35295: LD_INT 11
35297: PUSH
35298: LD_INT 12
35300: PUSH
35301: LD_INT 13
35303: PUSH
35304: LD_INT 14
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: ST_TO_ADDR
35313: GO 35890
35315: LD_INT 24
35317: DOUBLE
35318: EQUAL
35319: IFTRUE 35323
35321: GO 35349
35323: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35324: LD_ADDR_VAR 0 3
35328: PUSH
35329: LD_INT 11
35331: PUSH
35332: LD_INT 12
35334: PUSH
35335: LD_INT 13
35337: PUSH
35338: LD_INT 14
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: ST_TO_ADDR
35347: GO 35890
35349: LD_INT 30
35351: DOUBLE
35352: EQUAL
35353: IFTRUE 35357
35355: GO 35383
35357: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35358: LD_ADDR_VAR 0 3
35362: PUSH
35363: LD_INT 11
35365: PUSH
35366: LD_INT 12
35368: PUSH
35369: LD_INT 13
35371: PUSH
35372: LD_INT 14
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: ST_TO_ADDR
35381: GO 35890
35383: LD_INT 25
35385: DOUBLE
35386: EQUAL
35387: IFTRUE 35391
35389: GO 35409
35391: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35392: LD_ADDR_VAR 0 3
35396: PUSH
35397: LD_INT 13
35399: PUSH
35400: LD_INT 14
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: ST_TO_ADDR
35407: GO 35890
35409: LD_INT 27
35411: DOUBLE
35412: EQUAL
35413: IFTRUE 35417
35415: GO 35435
35417: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35418: LD_ADDR_VAR 0 3
35422: PUSH
35423: LD_INT 13
35425: PUSH
35426: LD_INT 14
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: ST_TO_ADDR
35433: GO 35890
35435: LD_INT 92
35437: DOUBLE
35438: EQUAL
35439: IFTRUE 35443
35441: GO 35469
35443: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35444: LD_ADDR_VAR 0 3
35448: PUSH
35449: LD_INT 11
35451: PUSH
35452: LD_INT 12
35454: PUSH
35455: LD_INT 13
35457: PUSH
35458: LD_INT 14
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: ST_TO_ADDR
35467: GO 35890
35469: LD_INT 28
35471: DOUBLE
35472: EQUAL
35473: IFTRUE 35477
35475: GO 35495
35477: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35478: LD_ADDR_VAR 0 3
35482: PUSH
35483: LD_INT 13
35485: PUSH
35486: LD_INT 14
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: ST_TO_ADDR
35493: GO 35890
35495: LD_INT 29
35497: DOUBLE
35498: EQUAL
35499: IFTRUE 35503
35501: GO 35521
35503: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35504: LD_ADDR_VAR 0 3
35508: PUSH
35509: LD_INT 13
35511: PUSH
35512: LD_INT 14
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: ST_TO_ADDR
35519: GO 35890
35521: LD_INT 31
35523: DOUBLE
35524: EQUAL
35525: IFTRUE 35529
35527: GO 35547
35529: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35530: LD_ADDR_VAR 0 3
35534: PUSH
35535: LD_INT 13
35537: PUSH
35538: LD_INT 14
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: ST_TO_ADDR
35545: GO 35890
35547: LD_INT 26
35549: DOUBLE
35550: EQUAL
35551: IFTRUE 35555
35553: GO 35573
35555: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35556: LD_ADDR_VAR 0 3
35560: PUSH
35561: LD_INT 13
35563: PUSH
35564: LD_INT 14
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: ST_TO_ADDR
35571: GO 35890
35573: LD_INT 42
35575: DOUBLE
35576: EQUAL
35577: IFTRUE 35581
35579: GO 35607
35581: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35582: LD_ADDR_VAR 0 3
35586: PUSH
35587: LD_INT 21
35589: PUSH
35590: LD_INT 22
35592: PUSH
35593: LD_INT 23
35595: PUSH
35596: LD_INT 24
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: ST_TO_ADDR
35605: GO 35890
35607: LD_INT 43
35609: DOUBLE
35610: EQUAL
35611: IFTRUE 35615
35613: GO 35641
35615: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35616: LD_ADDR_VAR 0 3
35620: PUSH
35621: LD_INT 21
35623: PUSH
35624: LD_INT 22
35626: PUSH
35627: LD_INT 23
35629: PUSH
35630: LD_INT 24
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: ST_TO_ADDR
35639: GO 35890
35641: LD_INT 44
35643: DOUBLE
35644: EQUAL
35645: IFTRUE 35649
35647: GO 35675
35649: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35650: LD_ADDR_VAR 0 3
35654: PUSH
35655: LD_INT 21
35657: PUSH
35658: LD_INT 22
35660: PUSH
35661: LD_INT 23
35663: PUSH
35664: LD_INT 24
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: ST_TO_ADDR
35673: GO 35890
35675: LD_INT 45
35677: DOUBLE
35678: EQUAL
35679: IFTRUE 35683
35681: GO 35709
35683: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35684: LD_ADDR_VAR 0 3
35688: PUSH
35689: LD_INT 21
35691: PUSH
35692: LD_INT 22
35694: PUSH
35695: LD_INT 23
35697: PUSH
35698: LD_INT 24
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: ST_TO_ADDR
35707: GO 35890
35709: LD_INT 49
35711: DOUBLE
35712: EQUAL
35713: IFTRUE 35717
35715: GO 35743
35717: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35718: LD_ADDR_VAR 0 3
35722: PUSH
35723: LD_INT 21
35725: PUSH
35726: LD_INT 22
35728: PUSH
35729: LD_INT 23
35731: PUSH
35732: LD_INT 24
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: ST_TO_ADDR
35741: GO 35890
35743: LD_INT 51
35745: DOUBLE
35746: EQUAL
35747: IFTRUE 35751
35749: GO 35777
35751: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35752: LD_ADDR_VAR 0 3
35756: PUSH
35757: LD_INT 21
35759: PUSH
35760: LD_INT 22
35762: PUSH
35763: LD_INT 23
35765: PUSH
35766: LD_INT 24
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: ST_TO_ADDR
35775: GO 35890
35777: LD_INT 52
35779: DOUBLE
35780: EQUAL
35781: IFTRUE 35785
35783: GO 35811
35785: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35786: LD_ADDR_VAR 0 3
35790: PUSH
35791: LD_INT 21
35793: PUSH
35794: LD_INT 22
35796: PUSH
35797: LD_INT 23
35799: PUSH
35800: LD_INT 24
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: ST_TO_ADDR
35809: GO 35890
35811: LD_INT 53
35813: DOUBLE
35814: EQUAL
35815: IFTRUE 35819
35817: GO 35837
35819: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35820: LD_ADDR_VAR 0 3
35824: PUSH
35825: LD_INT 23
35827: PUSH
35828: LD_INT 24
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: ST_TO_ADDR
35835: GO 35890
35837: LD_INT 46
35839: DOUBLE
35840: EQUAL
35841: IFTRUE 35845
35843: GO 35863
35845: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35846: LD_ADDR_VAR 0 3
35850: PUSH
35851: LD_INT 23
35853: PUSH
35854: LD_INT 24
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: ST_TO_ADDR
35861: GO 35890
35863: LD_INT 47
35865: DOUBLE
35866: EQUAL
35867: IFTRUE 35871
35869: GO 35889
35871: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35872: LD_ADDR_VAR 0 3
35876: PUSH
35877: LD_INT 23
35879: PUSH
35880: LD_INT 24
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: ST_TO_ADDR
35887: GO 35890
35889: POP
// result := ( chassis in result ) ;
35890: LD_ADDR_VAR 0 3
35894: PUSH
35895: LD_VAR 0 1
35899: PUSH
35900: LD_VAR 0 3
35904: IN
35905: ST_TO_ADDR
// end ;
35906: LD_VAR 0 3
35910: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35911: LD_INT 0
35913: PPUSH
35914: PPUSH
35915: PPUSH
35916: PPUSH
35917: PPUSH
35918: PPUSH
35919: PPUSH
// result := array ;
35920: LD_ADDR_VAR 0 5
35924: PUSH
35925: LD_VAR 0 1
35929: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35930: LD_VAR 0 1
35934: NOT
35935: PUSH
35936: LD_VAR 0 2
35940: NOT
35941: OR
35942: PUSH
35943: LD_VAR 0 3
35947: NOT
35948: OR
35949: PUSH
35950: LD_VAR 0 2
35954: PUSH
35955: LD_VAR 0 1
35959: GREATER
35960: OR
35961: PUSH
35962: LD_VAR 0 3
35966: PUSH
35967: LD_VAR 0 1
35971: GREATER
35972: OR
35973: IFFALSE 35977
// exit ;
35975: GO 36273
// if direction then
35977: LD_VAR 0 4
35981: IFFALSE 36045
// begin d := 1 ;
35983: LD_ADDR_VAR 0 9
35987: PUSH
35988: LD_INT 1
35990: ST_TO_ADDR
// if i_from > i_to then
35991: LD_VAR 0 2
35995: PUSH
35996: LD_VAR 0 3
36000: GREATER
36001: IFFALSE 36027
// length := ( array - i_from ) + i_to else
36003: LD_ADDR_VAR 0 11
36007: PUSH
36008: LD_VAR 0 1
36012: PUSH
36013: LD_VAR 0 2
36017: MINUS
36018: PUSH
36019: LD_VAR 0 3
36023: PLUS
36024: ST_TO_ADDR
36025: GO 36043
// length := i_to - i_from ;
36027: LD_ADDR_VAR 0 11
36031: PUSH
36032: LD_VAR 0 3
36036: PUSH
36037: LD_VAR 0 2
36041: MINUS
36042: ST_TO_ADDR
// end else
36043: GO 36106
// begin d := - 1 ;
36045: LD_ADDR_VAR 0 9
36049: PUSH
36050: LD_INT 1
36052: NEG
36053: ST_TO_ADDR
// if i_from > i_to then
36054: LD_VAR 0 2
36058: PUSH
36059: LD_VAR 0 3
36063: GREATER
36064: IFFALSE 36084
// length := i_from - i_to else
36066: LD_ADDR_VAR 0 11
36070: PUSH
36071: LD_VAR 0 2
36075: PUSH
36076: LD_VAR 0 3
36080: MINUS
36081: ST_TO_ADDR
36082: GO 36106
// length := ( array - i_to ) + i_from ;
36084: LD_ADDR_VAR 0 11
36088: PUSH
36089: LD_VAR 0 1
36093: PUSH
36094: LD_VAR 0 3
36098: MINUS
36099: PUSH
36100: LD_VAR 0 2
36104: PLUS
36105: ST_TO_ADDR
// end ; if not length then
36106: LD_VAR 0 11
36110: NOT
36111: IFFALSE 36115
// exit ;
36113: GO 36273
// tmp := array ;
36115: LD_ADDR_VAR 0 10
36119: PUSH
36120: LD_VAR 0 1
36124: ST_TO_ADDR
// for i = 1 to length do
36125: LD_ADDR_VAR 0 6
36129: PUSH
36130: DOUBLE
36131: LD_INT 1
36133: DEC
36134: ST_TO_ADDR
36135: LD_VAR 0 11
36139: PUSH
36140: FOR_TO
36141: IFFALSE 36261
// begin for j = 1 to array do
36143: LD_ADDR_VAR 0 7
36147: PUSH
36148: DOUBLE
36149: LD_INT 1
36151: DEC
36152: ST_TO_ADDR
36153: LD_VAR 0 1
36157: PUSH
36158: FOR_TO
36159: IFFALSE 36247
// begin k := j + d ;
36161: LD_ADDR_VAR 0 8
36165: PUSH
36166: LD_VAR 0 7
36170: PUSH
36171: LD_VAR 0 9
36175: PLUS
36176: ST_TO_ADDR
// if k > array then
36177: LD_VAR 0 8
36181: PUSH
36182: LD_VAR 0 1
36186: GREATER
36187: IFFALSE 36197
// k := 1 ;
36189: LD_ADDR_VAR 0 8
36193: PUSH
36194: LD_INT 1
36196: ST_TO_ADDR
// if not k then
36197: LD_VAR 0 8
36201: NOT
36202: IFFALSE 36214
// k := array ;
36204: LD_ADDR_VAR 0 8
36208: PUSH
36209: LD_VAR 0 1
36213: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36214: LD_ADDR_VAR 0 10
36218: PUSH
36219: LD_VAR 0 10
36223: PPUSH
36224: LD_VAR 0 8
36228: PPUSH
36229: LD_VAR 0 1
36233: PUSH
36234: LD_VAR 0 7
36238: ARRAY
36239: PPUSH
36240: CALL_OW 1
36244: ST_TO_ADDR
// end ;
36245: GO 36158
36247: POP
36248: POP
// array := tmp ;
36249: LD_ADDR_VAR 0 1
36253: PUSH
36254: LD_VAR 0 10
36258: ST_TO_ADDR
// end ;
36259: GO 36140
36261: POP
36262: POP
// result := array ;
36263: LD_ADDR_VAR 0 5
36267: PUSH
36268: LD_VAR 0 1
36272: ST_TO_ADDR
// end ;
36273: LD_VAR 0 5
36277: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36278: LD_INT 0
36280: PPUSH
36281: PPUSH
// result := 0 ;
36282: LD_ADDR_VAR 0 3
36286: PUSH
36287: LD_INT 0
36289: ST_TO_ADDR
// if not array or not value in array then
36290: LD_VAR 0 1
36294: NOT
36295: PUSH
36296: LD_VAR 0 2
36300: PUSH
36301: LD_VAR 0 1
36305: IN
36306: NOT
36307: OR
36308: IFFALSE 36312
// exit ;
36310: GO 36366
// for i = 1 to array do
36312: LD_ADDR_VAR 0 4
36316: PUSH
36317: DOUBLE
36318: LD_INT 1
36320: DEC
36321: ST_TO_ADDR
36322: LD_VAR 0 1
36326: PUSH
36327: FOR_TO
36328: IFFALSE 36364
// if value = array [ i ] then
36330: LD_VAR 0 2
36334: PUSH
36335: LD_VAR 0 1
36339: PUSH
36340: LD_VAR 0 4
36344: ARRAY
36345: EQUAL
36346: IFFALSE 36362
// begin result := i ;
36348: LD_ADDR_VAR 0 3
36352: PUSH
36353: LD_VAR 0 4
36357: ST_TO_ADDR
// exit ;
36358: POP
36359: POP
36360: GO 36366
// end ;
36362: GO 36327
36364: POP
36365: POP
// end ;
36366: LD_VAR 0 3
36370: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36371: LD_INT 0
36373: PPUSH
// vc_chassis := chassis ;
36374: LD_ADDR_OWVAR 37
36378: PUSH
36379: LD_VAR 0 1
36383: ST_TO_ADDR
// vc_engine := engine ;
36384: LD_ADDR_OWVAR 39
36388: PUSH
36389: LD_VAR 0 2
36393: ST_TO_ADDR
// vc_control := control ;
36394: LD_ADDR_OWVAR 38
36398: PUSH
36399: LD_VAR 0 3
36403: ST_TO_ADDR
// vc_weapon := weapon ;
36404: LD_ADDR_OWVAR 40
36408: PUSH
36409: LD_VAR 0 4
36413: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36414: LD_ADDR_OWVAR 41
36418: PUSH
36419: LD_VAR 0 5
36423: ST_TO_ADDR
// end ;
36424: LD_VAR 0 6
36428: RET
// export function WantPlant ( unit ) ; var task ; begin
36429: LD_INT 0
36431: PPUSH
36432: PPUSH
// result := false ;
36433: LD_ADDR_VAR 0 2
36437: PUSH
36438: LD_INT 0
36440: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36441: LD_ADDR_VAR 0 3
36445: PUSH
36446: LD_VAR 0 1
36450: PPUSH
36451: CALL_OW 437
36455: ST_TO_ADDR
// if task then
36456: LD_VAR 0 3
36460: IFFALSE 36488
// if task [ 1 ] [ 1 ] = p then
36462: LD_VAR 0 3
36466: PUSH
36467: LD_INT 1
36469: ARRAY
36470: PUSH
36471: LD_INT 1
36473: ARRAY
36474: PUSH
36475: LD_STRING p
36477: EQUAL
36478: IFFALSE 36488
// result := true ;
36480: LD_ADDR_VAR 0 2
36484: PUSH
36485: LD_INT 1
36487: ST_TO_ADDR
// end ;
36488: LD_VAR 0 2
36492: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36493: LD_INT 0
36495: PPUSH
36496: PPUSH
36497: PPUSH
36498: PPUSH
// if pos < 1 then
36499: LD_VAR 0 2
36503: PUSH
36504: LD_INT 1
36506: LESS
36507: IFFALSE 36511
// exit ;
36509: GO 36814
// if pos = 1 then
36511: LD_VAR 0 2
36515: PUSH
36516: LD_INT 1
36518: EQUAL
36519: IFFALSE 36552
// result := Replace ( arr , pos [ 1 ] , value ) else
36521: LD_ADDR_VAR 0 4
36525: PUSH
36526: LD_VAR 0 1
36530: PPUSH
36531: LD_VAR 0 2
36535: PUSH
36536: LD_INT 1
36538: ARRAY
36539: PPUSH
36540: LD_VAR 0 3
36544: PPUSH
36545: CALL_OW 1
36549: ST_TO_ADDR
36550: GO 36814
// begin tmp := arr ;
36552: LD_ADDR_VAR 0 6
36556: PUSH
36557: LD_VAR 0 1
36561: ST_TO_ADDR
// s_arr := [ tmp ] ;
36562: LD_ADDR_VAR 0 7
36566: PUSH
36567: LD_VAR 0 6
36571: PUSH
36572: EMPTY
36573: LIST
36574: ST_TO_ADDR
// for i = 1 to pos - 1 do
36575: LD_ADDR_VAR 0 5
36579: PUSH
36580: DOUBLE
36581: LD_INT 1
36583: DEC
36584: ST_TO_ADDR
36585: LD_VAR 0 2
36589: PUSH
36590: LD_INT 1
36592: MINUS
36593: PUSH
36594: FOR_TO
36595: IFFALSE 36640
// begin tmp := tmp [ pos [ i ] ] ;
36597: LD_ADDR_VAR 0 6
36601: PUSH
36602: LD_VAR 0 6
36606: PUSH
36607: LD_VAR 0 2
36611: PUSH
36612: LD_VAR 0 5
36616: ARRAY
36617: ARRAY
36618: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36619: LD_ADDR_VAR 0 7
36623: PUSH
36624: LD_VAR 0 7
36628: PUSH
36629: LD_VAR 0 6
36633: PUSH
36634: EMPTY
36635: LIST
36636: ADD
36637: ST_TO_ADDR
// end ;
36638: GO 36594
36640: POP
36641: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36642: LD_ADDR_VAR 0 6
36646: PUSH
36647: LD_VAR 0 6
36651: PPUSH
36652: LD_VAR 0 2
36656: PUSH
36657: LD_VAR 0 2
36661: ARRAY
36662: PPUSH
36663: LD_VAR 0 3
36667: PPUSH
36668: CALL_OW 1
36672: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36673: LD_ADDR_VAR 0 7
36677: PUSH
36678: LD_VAR 0 7
36682: PPUSH
36683: LD_VAR 0 7
36687: PPUSH
36688: LD_VAR 0 6
36692: PPUSH
36693: CALL_OW 1
36697: ST_TO_ADDR
// for i = s_arr downto 2 do
36698: LD_ADDR_VAR 0 5
36702: PUSH
36703: DOUBLE
36704: LD_VAR 0 7
36708: INC
36709: ST_TO_ADDR
36710: LD_INT 2
36712: PUSH
36713: FOR_DOWNTO
36714: IFFALSE 36798
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36716: LD_ADDR_VAR 0 6
36720: PUSH
36721: LD_VAR 0 7
36725: PUSH
36726: LD_VAR 0 5
36730: PUSH
36731: LD_INT 1
36733: MINUS
36734: ARRAY
36735: PPUSH
36736: LD_VAR 0 2
36740: PUSH
36741: LD_VAR 0 5
36745: PUSH
36746: LD_INT 1
36748: MINUS
36749: ARRAY
36750: PPUSH
36751: LD_VAR 0 7
36755: PUSH
36756: LD_VAR 0 5
36760: ARRAY
36761: PPUSH
36762: CALL_OW 1
36766: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36767: LD_ADDR_VAR 0 7
36771: PUSH
36772: LD_VAR 0 7
36776: PPUSH
36777: LD_VAR 0 5
36781: PUSH
36782: LD_INT 1
36784: MINUS
36785: PPUSH
36786: LD_VAR 0 6
36790: PPUSH
36791: CALL_OW 1
36795: ST_TO_ADDR
// end ;
36796: GO 36713
36798: POP
36799: POP
// result := s_arr [ 1 ] ;
36800: LD_ADDR_VAR 0 4
36804: PUSH
36805: LD_VAR 0 7
36809: PUSH
36810: LD_INT 1
36812: ARRAY
36813: ST_TO_ADDR
// end ; end ;
36814: LD_VAR 0 4
36818: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36819: LD_INT 0
36821: PPUSH
36822: PPUSH
// if not list then
36823: LD_VAR 0 1
36827: NOT
36828: IFFALSE 36832
// exit ;
36830: GO 36923
// i := list [ pos1 ] ;
36832: LD_ADDR_VAR 0 5
36836: PUSH
36837: LD_VAR 0 1
36841: PUSH
36842: LD_VAR 0 2
36846: ARRAY
36847: ST_TO_ADDR
// if not i then
36848: LD_VAR 0 5
36852: NOT
36853: IFFALSE 36857
// exit ;
36855: GO 36923
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36857: LD_ADDR_VAR 0 1
36861: PUSH
36862: LD_VAR 0 1
36866: PPUSH
36867: LD_VAR 0 2
36871: PPUSH
36872: LD_VAR 0 1
36876: PUSH
36877: LD_VAR 0 3
36881: ARRAY
36882: PPUSH
36883: CALL_OW 1
36887: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36888: LD_ADDR_VAR 0 1
36892: PUSH
36893: LD_VAR 0 1
36897: PPUSH
36898: LD_VAR 0 3
36902: PPUSH
36903: LD_VAR 0 5
36907: PPUSH
36908: CALL_OW 1
36912: ST_TO_ADDR
// result := list ;
36913: LD_ADDR_VAR 0 4
36917: PUSH
36918: LD_VAR 0 1
36922: ST_TO_ADDR
// end ;
36923: LD_VAR 0 4
36927: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36928: LD_INT 0
36930: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36931: LD_ADDR_VAR 0 5
36935: PUSH
36936: LD_VAR 0 1
36940: PPUSH
36941: CALL_OW 250
36945: PPUSH
36946: LD_VAR 0 1
36950: PPUSH
36951: CALL_OW 251
36955: PPUSH
36956: LD_VAR 0 2
36960: PPUSH
36961: LD_VAR 0 3
36965: PPUSH
36966: LD_VAR 0 4
36970: PPUSH
36971: CALL 37349 0 5
36975: ST_TO_ADDR
// end ;
36976: LD_VAR 0 5
36980: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
36981: LD_INT 0
36983: PPUSH
36984: PPUSH
36985: PPUSH
36986: PPUSH
// if not list or not unit then
36987: LD_VAR 0 2
36991: NOT
36992: PUSH
36993: LD_VAR 0 1
36997: NOT
36998: OR
36999: IFFALSE 37003
// exit ;
37001: GO 37344
// result := [ ] ;
37003: LD_ADDR_VAR 0 5
37007: PUSH
37008: EMPTY
37009: ST_TO_ADDR
// for i in list do
37010: LD_ADDR_VAR 0 6
37014: PUSH
37015: LD_VAR 0 2
37019: PUSH
37020: FOR_IN
37021: IFFALSE 37239
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
37023: LD_ADDR_VAR 0 8
37027: PUSH
37028: LD_VAR 0 1
37032: PPUSH
37033: LD_VAR 0 6
37037: PUSH
37038: LD_INT 1
37040: ARRAY
37041: PPUSH
37042: LD_VAR 0 6
37046: PUSH
37047: LD_INT 2
37049: ARRAY
37050: PPUSH
37051: CALL_OW 297
37055: ST_TO_ADDR
// if not Count ( result ) then
37056: LD_VAR 0 5
37060: PPUSH
37061: CALL 33633 0 1
37065: NOT
37066: IFFALSE 37099
// begin result := Join ( result , [ i , tmp ] ) ;
37068: LD_ADDR_VAR 0 5
37072: PUSH
37073: LD_VAR 0 5
37077: PPUSH
37078: LD_VAR 0 6
37082: PUSH
37083: LD_VAR 0 8
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PPUSH
37092: CALL 69233 0 2
37096: ST_TO_ADDR
// continue ;
37097: GO 37020
// end ; if result [ result ] [ 2 ] <= tmp then
37099: LD_VAR 0 5
37103: PUSH
37104: LD_VAR 0 5
37108: ARRAY
37109: PUSH
37110: LD_INT 2
37112: ARRAY
37113: PUSH
37114: LD_VAR 0 8
37118: LESSEQUAL
37119: IFFALSE 37152
// result := Join ( result , [ i , tmp ] ) else
37121: LD_ADDR_VAR 0 5
37125: PUSH
37126: LD_VAR 0 5
37130: PPUSH
37131: LD_VAR 0 6
37135: PUSH
37136: LD_VAR 0 8
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PPUSH
37145: CALL 69233 0 2
37149: ST_TO_ADDR
37150: GO 37237
// begin for j := 1 to Count ( result ) do
37152: LD_ADDR_VAR 0 7
37156: PUSH
37157: DOUBLE
37158: LD_INT 1
37160: DEC
37161: ST_TO_ADDR
37162: LD_VAR 0 5
37166: PPUSH
37167: CALL 33633 0 1
37171: PUSH
37172: FOR_TO
37173: IFFALSE 37235
// begin if tmp < result [ j ] [ 2 ] then
37175: LD_VAR 0 8
37179: PUSH
37180: LD_VAR 0 5
37184: PUSH
37185: LD_VAR 0 7
37189: ARRAY
37190: PUSH
37191: LD_INT 2
37193: ARRAY
37194: LESS
37195: IFFALSE 37233
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37197: LD_ADDR_VAR 0 5
37201: PUSH
37202: LD_VAR 0 5
37206: PPUSH
37207: LD_VAR 0 7
37211: PPUSH
37212: LD_VAR 0 6
37216: PUSH
37217: LD_VAR 0 8
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PPUSH
37226: CALL_OW 2
37230: ST_TO_ADDR
// break ;
37231: GO 37235
// end ; end ;
37233: GO 37172
37235: POP
37236: POP
// end ; end ;
37237: GO 37020
37239: POP
37240: POP
// if result and not asc then
37241: LD_VAR 0 5
37245: PUSH
37246: LD_VAR 0 3
37250: NOT
37251: AND
37252: IFFALSE 37269
// result := ReverseArray ( result ) ;
37254: LD_ADDR_VAR 0 5
37258: PUSH
37259: LD_VAR 0 5
37263: PPUSH
37264: CALL 64509 0 1
37268: ST_TO_ADDR
// tmp := [ ] ;
37269: LD_ADDR_VAR 0 8
37273: PUSH
37274: EMPTY
37275: ST_TO_ADDR
// if mode then
37276: LD_VAR 0 4
37280: IFFALSE 37344
// begin for i := 1 to result do
37282: LD_ADDR_VAR 0 6
37286: PUSH
37287: DOUBLE
37288: LD_INT 1
37290: DEC
37291: ST_TO_ADDR
37292: LD_VAR 0 5
37296: PUSH
37297: FOR_TO
37298: IFFALSE 37332
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37300: LD_ADDR_VAR 0 8
37304: PUSH
37305: LD_VAR 0 8
37309: PPUSH
37310: LD_VAR 0 5
37314: PUSH
37315: LD_VAR 0 6
37319: ARRAY
37320: PUSH
37321: LD_INT 1
37323: ARRAY
37324: PPUSH
37325: CALL 69233 0 2
37329: ST_TO_ADDR
37330: GO 37297
37332: POP
37333: POP
// result := tmp ;
37334: LD_ADDR_VAR 0 5
37338: PUSH
37339: LD_VAR 0 8
37343: ST_TO_ADDR
// end ; end ;
37344: LD_VAR 0 5
37348: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37349: LD_INT 0
37351: PPUSH
37352: PPUSH
37353: PPUSH
37354: PPUSH
// if not list then
37355: LD_VAR 0 3
37359: NOT
37360: IFFALSE 37364
// exit ;
37362: GO 37752
// result := [ ] ;
37364: LD_ADDR_VAR 0 6
37368: PUSH
37369: EMPTY
37370: ST_TO_ADDR
// for i in list do
37371: LD_ADDR_VAR 0 7
37375: PUSH
37376: LD_VAR 0 3
37380: PUSH
37381: FOR_IN
37382: IFFALSE 37584
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37384: LD_ADDR_VAR 0 9
37388: PUSH
37389: LD_VAR 0 7
37393: PPUSH
37394: LD_VAR 0 1
37398: PPUSH
37399: LD_VAR 0 2
37403: PPUSH
37404: CALL_OW 297
37408: ST_TO_ADDR
// if not result then
37409: LD_VAR 0 6
37413: NOT
37414: IFFALSE 37440
// result := [ [ i , tmp ] ] else
37416: LD_ADDR_VAR 0 6
37420: PUSH
37421: LD_VAR 0 7
37425: PUSH
37426: LD_VAR 0 9
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: EMPTY
37436: LIST
37437: ST_TO_ADDR
37438: GO 37582
// begin if result [ result ] [ 2 ] < tmp then
37440: LD_VAR 0 6
37444: PUSH
37445: LD_VAR 0 6
37449: ARRAY
37450: PUSH
37451: LD_INT 2
37453: ARRAY
37454: PUSH
37455: LD_VAR 0 9
37459: LESS
37460: IFFALSE 37502
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37462: LD_ADDR_VAR 0 6
37466: PUSH
37467: LD_VAR 0 6
37471: PPUSH
37472: LD_VAR 0 6
37476: PUSH
37477: LD_INT 1
37479: PLUS
37480: PPUSH
37481: LD_VAR 0 7
37485: PUSH
37486: LD_VAR 0 9
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PPUSH
37495: CALL_OW 2
37499: ST_TO_ADDR
37500: GO 37582
// for j = 1 to result do
37502: LD_ADDR_VAR 0 8
37506: PUSH
37507: DOUBLE
37508: LD_INT 1
37510: DEC
37511: ST_TO_ADDR
37512: LD_VAR 0 6
37516: PUSH
37517: FOR_TO
37518: IFFALSE 37580
// begin if tmp < result [ j ] [ 2 ] then
37520: LD_VAR 0 9
37524: PUSH
37525: LD_VAR 0 6
37529: PUSH
37530: LD_VAR 0 8
37534: ARRAY
37535: PUSH
37536: LD_INT 2
37538: ARRAY
37539: LESS
37540: IFFALSE 37578
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37542: LD_ADDR_VAR 0 6
37546: PUSH
37547: LD_VAR 0 6
37551: PPUSH
37552: LD_VAR 0 8
37556: PPUSH
37557: LD_VAR 0 7
37561: PUSH
37562: LD_VAR 0 9
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PPUSH
37571: CALL_OW 2
37575: ST_TO_ADDR
// break ;
37576: GO 37580
// end ; end ;
37578: GO 37517
37580: POP
37581: POP
// end ; end ;
37582: GO 37381
37584: POP
37585: POP
// if result and not asc then
37586: LD_VAR 0 6
37590: PUSH
37591: LD_VAR 0 4
37595: NOT
37596: AND
37597: IFFALSE 37672
// begin tmp := result ;
37599: LD_ADDR_VAR 0 9
37603: PUSH
37604: LD_VAR 0 6
37608: ST_TO_ADDR
// for i = tmp downto 1 do
37609: LD_ADDR_VAR 0 7
37613: PUSH
37614: DOUBLE
37615: LD_VAR 0 9
37619: INC
37620: ST_TO_ADDR
37621: LD_INT 1
37623: PUSH
37624: FOR_DOWNTO
37625: IFFALSE 37670
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37627: LD_ADDR_VAR 0 6
37631: PUSH
37632: LD_VAR 0 6
37636: PPUSH
37637: LD_VAR 0 9
37641: PUSH
37642: LD_VAR 0 7
37646: MINUS
37647: PUSH
37648: LD_INT 1
37650: PLUS
37651: PPUSH
37652: LD_VAR 0 9
37656: PUSH
37657: LD_VAR 0 7
37661: ARRAY
37662: PPUSH
37663: CALL_OW 1
37667: ST_TO_ADDR
37668: GO 37624
37670: POP
37671: POP
// end ; tmp := [ ] ;
37672: LD_ADDR_VAR 0 9
37676: PUSH
37677: EMPTY
37678: ST_TO_ADDR
// if mode then
37679: LD_VAR 0 5
37683: IFFALSE 37752
// begin for i = 1 to result do
37685: LD_ADDR_VAR 0 7
37689: PUSH
37690: DOUBLE
37691: LD_INT 1
37693: DEC
37694: ST_TO_ADDR
37695: LD_VAR 0 6
37699: PUSH
37700: FOR_TO
37701: IFFALSE 37740
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37703: LD_ADDR_VAR 0 9
37707: PUSH
37708: LD_VAR 0 9
37712: PPUSH
37713: LD_VAR 0 7
37717: PPUSH
37718: LD_VAR 0 6
37722: PUSH
37723: LD_VAR 0 7
37727: ARRAY
37728: PUSH
37729: LD_INT 1
37731: ARRAY
37732: PPUSH
37733: CALL_OW 1
37737: ST_TO_ADDR
37738: GO 37700
37740: POP
37741: POP
// result := tmp ;
37742: LD_ADDR_VAR 0 6
37746: PUSH
37747: LD_VAR 0 9
37751: ST_TO_ADDR
// end ; end ;
37752: LD_VAR 0 6
37756: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37757: LD_INT 0
37759: PPUSH
37760: PPUSH
37761: PPUSH
37762: PPUSH
37763: PPUSH
37764: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37765: LD_ADDR_VAR 0 5
37769: PUSH
37770: LD_INT 0
37772: PUSH
37773: LD_INT 0
37775: PUSH
37776: LD_INT 0
37778: PUSH
37779: EMPTY
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: ST_TO_ADDR
// if not x or not y then
37787: LD_VAR 0 2
37791: NOT
37792: PUSH
37793: LD_VAR 0 3
37797: NOT
37798: OR
37799: IFFALSE 37803
// exit ;
37801: GO 39453
// if not range then
37803: LD_VAR 0 4
37807: NOT
37808: IFFALSE 37818
// range := 10 ;
37810: LD_ADDR_VAR 0 4
37814: PUSH
37815: LD_INT 10
37817: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37818: LD_ADDR_VAR 0 8
37822: PUSH
37823: LD_INT 81
37825: PUSH
37826: LD_VAR 0 1
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 92
37837: PUSH
37838: LD_VAR 0 2
37842: PUSH
37843: LD_VAR 0 3
37847: PUSH
37848: LD_VAR 0 4
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 3
37861: PUSH
37862: LD_INT 21
37864: PUSH
37865: LD_INT 3
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: LIST
37880: PPUSH
37881: CALL_OW 69
37885: ST_TO_ADDR
// if not tmp then
37886: LD_VAR 0 8
37890: NOT
37891: IFFALSE 37895
// exit ;
37893: GO 39453
// for i in tmp do
37895: LD_ADDR_VAR 0 6
37899: PUSH
37900: LD_VAR 0 8
37904: PUSH
37905: FOR_IN
37906: IFFALSE 39428
// begin points := [ 0 , 0 , 0 ] ;
37908: LD_ADDR_VAR 0 9
37912: PUSH
37913: LD_INT 0
37915: PUSH
37916: LD_INT 0
37918: PUSH
37919: LD_INT 0
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: LIST
37926: ST_TO_ADDR
// bpoints := 1 ;
37927: LD_ADDR_VAR 0 10
37931: PUSH
37932: LD_INT 1
37934: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37935: LD_VAR 0 6
37939: PPUSH
37940: CALL_OW 247
37944: PUSH
37945: LD_INT 1
37947: DOUBLE
37948: EQUAL
37949: IFTRUE 37953
37951: GO 38531
37953: POP
// begin if GetClass ( i ) = 1 then
37954: LD_VAR 0 6
37958: PPUSH
37959: CALL_OW 257
37963: PUSH
37964: LD_INT 1
37966: EQUAL
37967: IFFALSE 37988
// points := [ 10 , 5 , 3 ] ;
37969: LD_ADDR_VAR 0 9
37973: PUSH
37974: LD_INT 10
37976: PUSH
37977: LD_INT 5
37979: PUSH
37980: LD_INT 3
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: LIST
37987: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37988: LD_VAR 0 6
37992: PPUSH
37993: CALL_OW 257
37997: PUSH
37998: LD_INT 2
38000: PUSH
38001: LD_INT 3
38003: PUSH
38004: LD_INT 4
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: LIST
38011: IN
38012: IFFALSE 38033
// points := [ 3 , 2 , 1 ] ;
38014: LD_ADDR_VAR 0 9
38018: PUSH
38019: LD_INT 3
38021: PUSH
38022: LD_INT 2
38024: PUSH
38025: LD_INT 1
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: LIST
38032: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38033: LD_VAR 0 6
38037: PPUSH
38038: CALL_OW 257
38042: PUSH
38043: LD_INT 5
38045: EQUAL
38046: IFFALSE 38067
// points := [ 130 , 5 , 2 ] ;
38048: LD_ADDR_VAR 0 9
38052: PUSH
38053: LD_INT 130
38055: PUSH
38056: LD_INT 5
38058: PUSH
38059: LD_INT 2
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: LIST
38066: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38067: LD_VAR 0 6
38071: PPUSH
38072: CALL_OW 257
38076: PUSH
38077: LD_INT 8
38079: EQUAL
38080: IFFALSE 38101
// points := [ 35 , 35 , 30 ] ;
38082: LD_ADDR_VAR 0 9
38086: PUSH
38087: LD_INT 35
38089: PUSH
38090: LD_INT 35
38092: PUSH
38093: LD_INT 30
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: LIST
38100: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38101: LD_VAR 0 6
38105: PPUSH
38106: CALL_OW 257
38110: PUSH
38111: LD_INT 9
38113: EQUAL
38114: IFFALSE 38135
// points := [ 20 , 55 , 40 ] ;
38116: LD_ADDR_VAR 0 9
38120: PUSH
38121: LD_INT 20
38123: PUSH
38124: LD_INT 55
38126: PUSH
38127: LD_INT 40
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: LIST
38134: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38135: LD_VAR 0 6
38139: PPUSH
38140: CALL_OW 257
38144: PUSH
38145: LD_INT 12
38147: PUSH
38148: LD_INT 16
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: IN
38155: IFFALSE 38176
// points := [ 5 , 3 , 2 ] ;
38157: LD_ADDR_VAR 0 9
38161: PUSH
38162: LD_INT 5
38164: PUSH
38165: LD_INT 3
38167: PUSH
38168: LD_INT 2
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: LIST
38175: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38176: LD_VAR 0 6
38180: PPUSH
38181: CALL_OW 257
38185: PUSH
38186: LD_INT 17
38188: EQUAL
38189: IFFALSE 38210
// points := [ 100 , 50 , 75 ] ;
38191: LD_ADDR_VAR 0 9
38195: PUSH
38196: LD_INT 100
38198: PUSH
38199: LD_INT 50
38201: PUSH
38202: LD_INT 75
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: LIST
38209: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38210: LD_VAR 0 6
38214: PPUSH
38215: CALL_OW 257
38219: PUSH
38220: LD_INT 15
38222: EQUAL
38223: IFFALSE 38244
// points := [ 10 , 5 , 3 ] ;
38225: LD_ADDR_VAR 0 9
38229: PUSH
38230: LD_INT 10
38232: PUSH
38233: LD_INT 5
38235: PUSH
38236: LD_INT 3
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: LIST
38243: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38244: LD_VAR 0 6
38248: PPUSH
38249: CALL_OW 257
38253: PUSH
38254: LD_INT 14
38256: EQUAL
38257: IFFALSE 38278
// points := [ 10 , 0 , 0 ] ;
38259: LD_ADDR_VAR 0 9
38263: PUSH
38264: LD_INT 10
38266: PUSH
38267: LD_INT 0
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: LIST
38277: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38278: LD_VAR 0 6
38282: PPUSH
38283: CALL_OW 257
38287: PUSH
38288: LD_INT 11
38290: EQUAL
38291: IFFALSE 38312
// points := [ 30 , 10 , 5 ] ;
38293: LD_ADDR_VAR 0 9
38297: PUSH
38298: LD_INT 30
38300: PUSH
38301: LD_INT 10
38303: PUSH
38304: LD_INT 5
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: LIST
38311: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38312: LD_VAR 0 1
38316: PPUSH
38317: LD_INT 5
38319: PPUSH
38320: CALL_OW 321
38324: PUSH
38325: LD_INT 2
38327: EQUAL
38328: IFFALSE 38345
// bpoints := bpoints * 1.8 ;
38330: LD_ADDR_VAR 0 10
38334: PUSH
38335: LD_VAR 0 10
38339: PUSH
38340: LD_REAL  1.80000000000000E+0000
38343: MUL
38344: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38345: LD_VAR 0 6
38349: PPUSH
38350: CALL_OW 257
38354: PUSH
38355: LD_INT 1
38357: PUSH
38358: LD_INT 2
38360: PUSH
38361: LD_INT 3
38363: PUSH
38364: LD_INT 4
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: IN
38373: PUSH
38374: LD_VAR 0 1
38378: PPUSH
38379: LD_INT 51
38381: PPUSH
38382: CALL_OW 321
38386: PUSH
38387: LD_INT 2
38389: EQUAL
38390: AND
38391: IFFALSE 38408
// bpoints := bpoints * 1.2 ;
38393: LD_ADDR_VAR 0 10
38397: PUSH
38398: LD_VAR 0 10
38402: PUSH
38403: LD_REAL  1.20000000000000E+0000
38406: MUL
38407: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38408: LD_VAR 0 6
38412: PPUSH
38413: CALL_OW 257
38417: PUSH
38418: LD_INT 5
38420: PUSH
38421: LD_INT 7
38423: PUSH
38424: LD_INT 9
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: LIST
38431: IN
38432: PUSH
38433: LD_VAR 0 1
38437: PPUSH
38438: LD_INT 52
38440: PPUSH
38441: CALL_OW 321
38445: PUSH
38446: LD_INT 2
38448: EQUAL
38449: AND
38450: IFFALSE 38467
// bpoints := bpoints * 1.5 ;
38452: LD_ADDR_VAR 0 10
38456: PUSH
38457: LD_VAR 0 10
38461: PUSH
38462: LD_REAL  1.50000000000000E+0000
38465: MUL
38466: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38467: LD_VAR 0 1
38471: PPUSH
38472: LD_INT 66
38474: PPUSH
38475: CALL_OW 321
38479: PUSH
38480: LD_INT 2
38482: EQUAL
38483: IFFALSE 38500
// bpoints := bpoints * 1.1 ;
38485: LD_ADDR_VAR 0 10
38489: PUSH
38490: LD_VAR 0 10
38494: PUSH
38495: LD_REAL  1.10000000000000E+0000
38498: MUL
38499: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38500: LD_ADDR_VAR 0 10
38504: PUSH
38505: LD_VAR 0 10
38509: PUSH
38510: LD_VAR 0 6
38514: PPUSH
38515: LD_INT 1
38517: PPUSH
38518: CALL_OW 259
38522: PUSH
38523: LD_REAL  1.15000000000000E+0000
38526: MUL
38527: MUL
38528: ST_TO_ADDR
// end ; unit_vehicle :
38529: GO 39357
38531: LD_INT 2
38533: DOUBLE
38534: EQUAL
38535: IFTRUE 38539
38537: GO 39345
38539: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38540: LD_VAR 0 6
38544: PPUSH
38545: CALL_OW 264
38549: PUSH
38550: LD_INT 2
38552: PUSH
38553: LD_INT 42
38555: PUSH
38556: LD_INT 24
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: LIST
38563: IN
38564: IFFALSE 38585
// points := [ 25 , 5 , 3 ] ;
38566: LD_ADDR_VAR 0 9
38570: PUSH
38571: LD_INT 25
38573: PUSH
38574: LD_INT 5
38576: PUSH
38577: LD_INT 3
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: LIST
38584: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38585: LD_VAR 0 6
38589: PPUSH
38590: CALL_OW 264
38594: PUSH
38595: LD_INT 4
38597: PUSH
38598: LD_INT 43
38600: PUSH
38601: LD_INT 25
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: LIST
38608: IN
38609: IFFALSE 38630
// points := [ 40 , 15 , 5 ] ;
38611: LD_ADDR_VAR 0 9
38615: PUSH
38616: LD_INT 40
38618: PUSH
38619: LD_INT 15
38621: PUSH
38622: LD_INT 5
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: LIST
38629: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38630: LD_VAR 0 6
38634: PPUSH
38635: CALL_OW 264
38639: PUSH
38640: LD_INT 3
38642: PUSH
38643: LD_INT 23
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: IN
38650: IFFALSE 38671
// points := [ 7 , 25 , 8 ] ;
38652: LD_ADDR_VAR 0 9
38656: PUSH
38657: LD_INT 7
38659: PUSH
38660: LD_INT 25
38662: PUSH
38663: LD_INT 8
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: LIST
38670: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38671: LD_VAR 0 6
38675: PPUSH
38676: CALL_OW 264
38680: PUSH
38681: LD_INT 5
38683: PUSH
38684: LD_INT 27
38686: PUSH
38687: LD_INT 44
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: LIST
38694: IN
38695: IFFALSE 38716
// points := [ 14 , 50 , 16 ] ;
38697: LD_ADDR_VAR 0 9
38701: PUSH
38702: LD_INT 14
38704: PUSH
38705: LD_INT 50
38707: PUSH
38708: LD_INT 16
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: LIST
38715: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38716: LD_VAR 0 6
38720: PPUSH
38721: CALL_OW 264
38725: PUSH
38726: LD_INT 6
38728: PUSH
38729: LD_INT 46
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: IN
38736: IFFALSE 38757
// points := [ 32 , 120 , 70 ] ;
38738: LD_ADDR_VAR 0 9
38742: PUSH
38743: LD_INT 32
38745: PUSH
38746: LD_INT 120
38748: PUSH
38749: LD_INT 70
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: LIST
38756: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38757: LD_VAR 0 6
38761: PPUSH
38762: CALL_OW 264
38766: PUSH
38767: LD_INT 7
38769: PUSH
38770: LD_INT 28
38772: PUSH
38773: LD_INT 45
38775: PUSH
38776: LD_INT 92
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: IN
38785: IFFALSE 38806
// points := [ 35 , 20 , 45 ] ;
38787: LD_ADDR_VAR 0 9
38791: PUSH
38792: LD_INT 35
38794: PUSH
38795: LD_INT 20
38797: PUSH
38798: LD_INT 45
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: LIST
38805: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38806: LD_VAR 0 6
38810: PPUSH
38811: CALL_OW 264
38815: PUSH
38816: LD_INT 47
38818: PUSH
38819: EMPTY
38820: LIST
38821: IN
38822: IFFALSE 38843
// points := [ 67 , 45 , 75 ] ;
38824: LD_ADDR_VAR 0 9
38828: PUSH
38829: LD_INT 67
38831: PUSH
38832: LD_INT 45
38834: PUSH
38835: LD_INT 75
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: LIST
38842: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38843: LD_VAR 0 6
38847: PPUSH
38848: CALL_OW 264
38852: PUSH
38853: LD_INT 26
38855: PUSH
38856: EMPTY
38857: LIST
38858: IN
38859: IFFALSE 38880
// points := [ 120 , 30 , 80 ] ;
38861: LD_ADDR_VAR 0 9
38865: PUSH
38866: LD_INT 120
38868: PUSH
38869: LD_INT 30
38871: PUSH
38872: LD_INT 80
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: LIST
38879: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38880: LD_VAR 0 6
38884: PPUSH
38885: CALL_OW 264
38889: PUSH
38890: LD_INT 22
38892: PUSH
38893: EMPTY
38894: LIST
38895: IN
38896: IFFALSE 38917
// points := [ 40 , 1 , 1 ] ;
38898: LD_ADDR_VAR 0 9
38902: PUSH
38903: LD_INT 40
38905: PUSH
38906: LD_INT 1
38908: PUSH
38909: LD_INT 1
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: LIST
38916: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38917: LD_VAR 0 6
38921: PPUSH
38922: CALL_OW 264
38926: PUSH
38927: LD_INT 29
38929: PUSH
38930: EMPTY
38931: LIST
38932: IN
38933: IFFALSE 38954
// points := [ 70 , 200 , 400 ] ;
38935: LD_ADDR_VAR 0 9
38939: PUSH
38940: LD_INT 70
38942: PUSH
38943: LD_INT 200
38945: PUSH
38946: LD_INT 400
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: LIST
38953: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38954: LD_VAR 0 6
38958: PPUSH
38959: CALL_OW 264
38963: PUSH
38964: LD_INT 14
38966: PUSH
38967: LD_INT 53
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: IN
38974: IFFALSE 38995
// points := [ 40 , 10 , 20 ] ;
38976: LD_ADDR_VAR 0 9
38980: PUSH
38981: LD_INT 40
38983: PUSH
38984: LD_INT 10
38986: PUSH
38987: LD_INT 20
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: LIST
38994: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38995: LD_VAR 0 6
38999: PPUSH
39000: CALL_OW 264
39004: PUSH
39005: LD_INT 9
39007: PUSH
39008: EMPTY
39009: LIST
39010: IN
39011: IFFALSE 39032
// points := [ 5 , 70 , 20 ] ;
39013: LD_ADDR_VAR 0 9
39017: PUSH
39018: LD_INT 5
39020: PUSH
39021: LD_INT 70
39023: PUSH
39024: LD_INT 20
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: LIST
39031: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39032: LD_VAR 0 6
39036: PPUSH
39037: CALL_OW 264
39041: PUSH
39042: LD_INT 10
39044: PUSH
39045: EMPTY
39046: LIST
39047: IN
39048: IFFALSE 39069
// points := [ 35 , 110 , 70 ] ;
39050: LD_ADDR_VAR 0 9
39054: PUSH
39055: LD_INT 35
39057: PUSH
39058: LD_INT 110
39060: PUSH
39061: LD_INT 70
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: LIST
39068: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39069: LD_VAR 0 6
39073: PPUSH
39074: CALL_OW 265
39078: PUSH
39079: LD_INT 25
39081: EQUAL
39082: IFFALSE 39103
// points := [ 80 , 65 , 100 ] ;
39084: LD_ADDR_VAR 0 9
39088: PUSH
39089: LD_INT 80
39091: PUSH
39092: LD_INT 65
39094: PUSH
39095: LD_INT 100
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: LIST
39102: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39103: LD_VAR 0 6
39107: PPUSH
39108: CALL_OW 263
39112: PUSH
39113: LD_INT 1
39115: EQUAL
39116: IFFALSE 39151
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39118: LD_ADDR_VAR 0 10
39122: PUSH
39123: LD_VAR 0 10
39127: PUSH
39128: LD_VAR 0 6
39132: PPUSH
39133: CALL_OW 311
39137: PPUSH
39138: LD_INT 3
39140: PPUSH
39141: CALL_OW 259
39145: PUSH
39146: LD_INT 4
39148: MUL
39149: MUL
39150: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39151: LD_VAR 0 6
39155: PPUSH
39156: CALL_OW 263
39160: PUSH
39161: LD_INT 2
39163: EQUAL
39164: IFFALSE 39215
// begin j := IsControledBy ( i ) ;
39166: LD_ADDR_VAR 0 7
39170: PUSH
39171: LD_VAR 0 6
39175: PPUSH
39176: CALL_OW 312
39180: ST_TO_ADDR
// if j then
39181: LD_VAR 0 7
39185: IFFALSE 39215
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39187: LD_ADDR_VAR 0 10
39191: PUSH
39192: LD_VAR 0 10
39196: PUSH
39197: LD_VAR 0 7
39201: PPUSH
39202: LD_INT 3
39204: PPUSH
39205: CALL_OW 259
39209: PUSH
39210: LD_INT 3
39212: MUL
39213: MUL
39214: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39215: LD_VAR 0 6
39219: PPUSH
39220: CALL_OW 264
39224: PUSH
39225: LD_INT 5
39227: PUSH
39228: LD_INT 6
39230: PUSH
39231: LD_INT 46
39233: PUSH
39234: LD_INT 44
39236: PUSH
39237: LD_INT 47
39239: PUSH
39240: LD_INT 45
39242: PUSH
39243: LD_INT 28
39245: PUSH
39246: LD_INT 7
39248: PUSH
39249: LD_INT 27
39251: PUSH
39252: LD_INT 29
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: IN
39267: PUSH
39268: LD_VAR 0 1
39272: PPUSH
39273: LD_INT 52
39275: PPUSH
39276: CALL_OW 321
39280: PUSH
39281: LD_INT 2
39283: EQUAL
39284: AND
39285: IFFALSE 39302
// bpoints := bpoints * 1.2 ;
39287: LD_ADDR_VAR 0 10
39291: PUSH
39292: LD_VAR 0 10
39296: PUSH
39297: LD_REAL  1.20000000000000E+0000
39300: MUL
39301: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39302: LD_VAR 0 6
39306: PPUSH
39307: CALL_OW 264
39311: PUSH
39312: LD_INT 6
39314: PUSH
39315: LD_INT 46
39317: PUSH
39318: LD_INT 47
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: LIST
39325: IN
39326: IFFALSE 39343
// bpoints := bpoints * 1.2 ;
39328: LD_ADDR_VAR 0 10
39332: PUSH
39333: LD_VAR 0 10
39337: PUSH
39338: LD_REAL  1.20000000000000E+0000
39341: MUL
39342: ST_TO_ADDR
// end ; unit_building :
39343: GO 39357
39345: LD_INT 3
39347: DOUBLE
39348: EQUAL
39349: IFTRUE 39353
39351: GO 39356
39353: POP
// ; end ;
39354: GO 39357
39356: POP
// for j = 1 to 3 do
39357: LD_ADDR_VAR 0 7
39361: PUSH
39362: DOUBLE
39363: LD_INT 1
39365: DEC
39366: ST_TO_ADDR
39367: LD_INT 3
39369: PUSH
39370: FOR_TO
39371: IFFALSE 39424
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39373: LD_ADDR_VAR 0 5
39377: PUSH
39378: LD_VAR 0 5
39382: PPUSH
39383: LD_VAR 0 7
39387: PPUSH
39388: LD_VAR 0 5
39392: PUSH
39393: LD_VAR 0 7
39397: ARRAY
39398: PUSH
39399: LD_VAR 0 9
39403: PUSH
39404: LD_VAR 0 7
39408: ARRAY
39409: PUSH
39410: LD_VAR 0 10
39414: MUL
39415: PLUS
39416: PPUSH
39417: CALL_OW 1
39421: ST_TO_ADDR
39422: GO 39370
39424: POP
39425: POP
// end ;
39426: GO 37905
39428: POP
39429: POP
// result := Replace ( result , 4 , tmp ) ;
39430: LD_ADDR_VAR 0 5
39434: PUSH
39435: LD_VAR 0 5
39439: PPUSH
39440: LD_INT 4
39442: PPUSH
39443: LD_VAR 0 8
39447: PPUSH
39448: CALL_OW 1
39452: ST_TO_ADDR
// end ;
39453: LD_VAR 0 5
39457: RET
// export function DangerAtRange ( unit , range ) ; begin
39458: LD_INT 0
39460: PPUSH
// if not unit then
39461: LD_VAR 0 1
39465: NOT
39466: IFFALSE 39470
// exit ;
39468: GO 39515
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39470: LD_ADDR_VAR 0 3
39474: PUSH
39475: LD_VAR 0 1
39479: PPUSH
39480: CALL_OW 255
39484: PPUSH
39485: LD_VAR 0 1
39489: PPUSH
39490: CALL_OW 250
39494: PPUSH
39495: LD_VAR 0 1
39499: PPUSH
39500: CALL_OW 251
39504: PPUSH
39505: LD_VAR 0 2
39509: PPUSH
39510: CALL 37757 0 4
39514: ST_TO_ADDR
// end ;
39515: LD_VAR 0 3
39519: RET
// export function DangerInArea ( side , area ) ; begin
39520: LD_INT 0
39522: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39523: LD_ADDR_VAR 0 3
39527: PUSH
39528: LD_VAR 0 2
39532: PPUSH
39533: LD_INT 81
39535: PUSH
39536: LD_VAR 0 1
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PPUSH
39545: CALL_OW 70
39549: ST_TO_ADDR
// end ;
39550: LD_VAR 0 3
39554: RET
// export function IsExtension ( b ) ; begin
39555: LD_INT 0
39557: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39558: LD_ADDR_VAR 0 2
39562: PUSH
39563: LD_VAR 0 1
39567: PUSH
39568: LD_INT 23
39570: PUSH
39571: LD_INT 20
39573: PUSH
39574: LD_INT 22
39576: PUSH
39577: LD_INT 17
39579: PUSH
39580: LD_INT 24
39582: PUSH
39583: LD_INT 21
39585: PUSH
39586: LD_INT 19
39588: PUSH
39589: LD_INT 16
39591: PUSH
39592: LD_INT 25
39594: PUSH
39595: LD_INT 18
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: IN
39610: ST_TO_ADDR
// end ;
39611: LD_VAR 0 2
39615: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39616: LD_INT 0
39618: PPUSH
39619: PPUSH
39620: PPUSH
// result := [ ] ;
39621: LD_ADDR_VAR 0 4
39625: PUSH
39626: EMPTY
39627: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39628: LD_ADDR_VAR 0 5
39632: PUSH
39633: LD_VAR 0 2
39637: PPUSH
39638: LD_INT 21
39640: PUSH
39641: LD_INT 3
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PPUSH
39648: CALL_OW 70
39652: ST_TO_ADDR
// if not tmp then
39653: LD_VAR 0 5
39657: NOT
39658: IFFALSE 39662
// exit ;
39660: GO 39726
// if checkLink then
39662: LD_VAR 0 3
39666: IFFALSE 39716
// begin for i in tmp do
39668: LD_ADDR_VAR 0 6
39672: PUSH
39673: LD_VAR 0 5
39677: PUSH
39678: FOR_IN
39679: IFFALSE 39714
// if GetBase ( i ) <> base then
39681: LD_VAR 0 6
39685: PPUSH
39686: CALL_OW 274
39690: PUSH
39691: LD_VAR 0 1
39695: NONEQUAL
39696: IFFALSE 39712
// ComLinkToBase ( base , i ) ;
39698: LD_VAR 0 1
39702: PPUSH
39703: LD_VAR 0 6
39707: PPUSH
39708: CALL_OW 169
39712: GO 39678
39714: POP
39715: POP
// end ; result := tmp ;
39716: LD_ADDR_VAR 0 4
39720: PUSH
39721: LD_VAR 0 5
39725: ST_TO_ADDR
// end ;
39726: LD_VAR 0 4
39730: RET
// export function ComComplete ( units , b ) ; var i ; begin
39731: LD_INT 0
39733: PPUSH
39734: PPUSH
// if not units then
39735: LD_VAR 0 1
39739: NOT
39740: IFFALSE 39744
// exit ;
39742: GO 39834
// for i in units do
39744: LD_ADDR_VAR 0 4
39748: PUSH
39749: LD_VAR 0 1
39753: PUSH
39754: FOR_IN
39755: IFFALSE 39832
// if BuildingStatus ( b ) = bs_build then
39757: LD_VAR 0 2
39761: PPUSH
39762: CALL_OW 461
39766: PUSH
39767: LD_INT 1
39769: EQUAL
39770: IFFALSE 39830
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39772: LD_VAR 0 4
39776: PPUSH
39777: LD_STRING h
39779: PUSH
39780: LD_VAR 0 2
39784: PPUSH
39785: CALL_OW 250
39789: PUSH
39790: LD_VAR 0 2
39794: PPUSH
39795: CALL_OW 251
39799: PUSH
39800: LD_VAR 0 2
39804: PUSH
39805: LD_INT 0
39807: PUSH
39808: LD_INT 0
39810: PUSH
39811: LD_INT 0
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: PUSH
39823: EMPTY
39824: LIST
39825: PPUSH
39826: CALL_OW 446
39830: GO 39754
39832: POP
39833: POP
// end ;
39834: LD_VAR 0 3
39838: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39839: LD_INT 0
39841: PPUSH
39842: PPUSH
39843: PPUSH
39844: PPUSH
39845: PPUSH
39846: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39847: LD_VAR 0 1
39851: NOT
39852: PUSH
39853: LD_VAR 0 1
39857: PPUSH
39858: CALL_OW 263
39862: PUSH
39863: LD_INT 2
39865: NONEQUAL
39866: OR
39867: IFFALSE 39871
// exit ;
39869: GO 40187
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39871: LD_ADDR_VAR 0 6
39875: PUSH
39876: LD_INT 22
39878: PUSH
39879: LD_VAR 0 1
39883: PPUSH
39884: CALL_OW 255
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 2
39895: PUSH
39896: LD_INT 30
39898: PUSH
39899: LD_INT 36
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 34
39908: PUSH
39909: LD_INT 31
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: LIST
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PPUSH
39925: CALL_OW 69
39929: ST_TO_ADDR
// if not tmp then
39930: LD_VAR 0 6
39934: NOT
39935: IFFALSE 39939
// exit ;
39937: GO 40187
// result := [ ] ;
39939: LD_ADDR_VAR 0 2
39943: PUSH
39944: EMPTY
39945: ST_TO_ADDR
// for i in tmp do
39946: LD_ADDR_VAR 0 3
39950: PUSH
39951: LD_VAR 0 6
39955: PUSH
39956: FOR_IN
39957: IFFALSE 40028
// begin t := UnitsInside ( i ) ;
39959: LD_ADDR_VAR 0 4
39963: PUSH
39964: LD_VAR 0 3
39968: PPUSH
39969: CALL_OW 313
39973: ST_TO_ADDR
// if t then
39974: LD_VAR 0 4
39978: IFFALSE 40026
// for j in t do
39980: LD_ADDR_VAR 0 7
39984: PUSH
39985: LD_VAR 0 4
39989: PUSH
39990: FOR_IN
39991: IFFALSE 40024
// result := Replace ( result , result + 1 , j ) ;
39993: LD_ADDR_VAR 0 2
39997: PUSH
39998: LD_VAR 0 2
40002: PPUSH
40003: LD_VAR 0 2
40007: PUSH
40008: LD_INT 1
40010: PLUS
40011: PPUSH
40012: LD_VAR 0 7
40016: PPUSH
40017: CALL_OW 1
40021: ST_TO_ADDR
40022: GO 39990
40024: POP
40025: POP
// end ;
40026: GO 39956
40028: POP
40029: POP
// if not result then
40030: LD_VAR 0 2
40034: NOT
40035: IFFALSE 40039
// exit ;
40037: GO 40187
// mech := result [ 1 ] ;
40039: LD_ADDR_VAR 0 5
40043: PUSH
40044: LD_VAR 0 2
40048: PUSH
40049: LD_INT 1
40051: ARRAY
40052: ST_TO_ADDR
// if result > 1 then
40053: LD_VAR 0 2
40057: PUSH
40058: LD_INT 1
40060: GREATER
40061: IFFALSE 40173
// begin for i = 2 to result do
40063: LD_ADDR_VAR 0 3
40067: PUSH
40068: DOUBLE
40069: LD_INT 2
40071: DEC
40072: ST_TO_ADDR
40073: LD_VAR 0 2
40077: PUSH
40078: FOR_TO
40079: IFFALSE 40171
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40081: LD_ADDR_VAR 0 4
40085: PUSH
40086: LD_VAR 0 2
40090: PUSH
40091: LD_VAR 0 3
40095: ARRAY
40096: PPUSH
40097: LD_INT 3
40099: PPUSH
40100: CALL_OW 259
40104: PUSH
40105: LD_VAR 0 2
40109: PUSH
40110: LD_VAR 0 3
40114: ARRAY
40115: PPUSH
40116: CALL_OW 432
40120: MINUS
40121: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40122: LD_VAR 0 4
40126: PUSH
40127: LD_VAR 0 5
40131: PPUSH
40132: LD_INT 3
40134: PPUSH
40135: CALL_OW 259
40139: PUSH
40140: LD_VAR 0 5
40144: PPUSH
40145: CALL_OW 432
40149: MINUS
40150: GREATEREQUAL
40151: IFFALSE 40169
// mech := result [ i ] ;
40153: LD_ADDR_VAR 0 5
40157: PUSH
40158: LD_VAR 0 2
40162: PUSH
40163: LD_VAR 0 3
40167: ARRAY
40168: ST_TO_ADDR
// end ;
40169: GO 40078
40171: POP
40172: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40173: LD_VAR 0 1
40177: PPUSH
40178: LD_VAR 0 5
40182: PPUSH
40183: CALL_OW 135
// end ;
40187: LD_VAR 0 2
40191: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40192: LD_INT 0
40194: PPUSH
40195: PPUSH
40196: PPUSH
40197: PPUSH
40198: PPUSH
40199: PPUSH
40200: PPUSH
40201: PPUSH
40202: PPUSH
40203: PPUSH
40204: PPUSH
40205: PPUSH
40206: PPUSH
// result := [ ] ;
40207: LD_ADDR_VAR 0 7
40211: PUSH
40212: EMPTY
40213: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40214: LD_VAR 0 1
40218: PPUSH
40219: CALL_OW 266
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: IN
40234: NOT
40235: IFFALSE 40239
// exit ;
40237: GO 41873
// if name then
40239: LD_VAR 0 3
40243: IFFALSE 40259
// SetBName ( base_dep , name ) ;
40245: LD_VAR 0 1
40249: PPUSH
40250: LD_VAR 0 3
40254: PPUSH
40255: CALL_OW 500
// base := GetBase ( base_dep ) ;
40259: LD_ADDR_VAR 0 15
40263: PUSH
40264: LD_VAR 0 1
40268: PPUSH
40269: CALL_OW 274
40273: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40274: LD_ADDR_VAR 0 16
40278: PUSH
40279: LD_VAR 0 1
40283: PPUSH
40284: CALL_OW 255
40288: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40289: LD_ADDR_VAR 0 17
40293: PUSH
40294: LD_VAR 0 1
40298: PPUSH
40299: CALL_OW 248
40303: ST_TO_ADDR
// if sources then
40304: LD_VAR 0 5
40308: IFFALSE 40355
// for i = 1 to 3 do
40310: LD_ADDR_VAR 0 8
40314: PUSH
40315: DOUBLE
40316: LD_INT 1
40318: DEC
40319: ST_TO_ADDR
40320: LD_INT 3
40322: PUSH
40323: FOR_TO
40324: IFFALSE 40353
// AddResourceType ( base , i , sources [ i ] ) ;
40326: LD_VAR 0 15
40330: PPUSH
40331: LD_VAR 0 8
40335: PPUSH
40336: LD_VAR 0 5
40340: PUSH
40341: LD_VAR 0 8
40345: ARRAY
40346: PPUSH
40347: CALL_OW 276
40351: GO 40323
40353: POP
40354: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40355: LD_ADDR_VAR 0 18
40359: PUSH
40360: LD_VAR 0 15
40364: PPUSH
40365: LD_VAR 0 2
40369: PPUSH
40370: LD_INT 1
40372: PPUSH
40373: CALL 39616 0 3
40377: ST_TO_ADDR
// InitHc ;
40378: CALL_OW 19
// InitUc ;
40382: CALL_OW 18
// uc_side := side ;
40386: LD_ADDR_OWVAR 20
40390: PUSH
40391: LD_VAR 0 16
40395: ST_TO_ADDR
// uc_nation := nation ;
40396: LD_ADDR_OWVAR 21
40400: PUSH
40401: LD_VAR 0 17
40405: ST_TO_ADDR
// if buildings then
40406: LD_VAR 0 18
40410: IFFALSE 41732
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40412: LD_ADDR_VAR 0 19
40416: PUSH
40417: LD_VAR 0 18
40421: PPUSH
40422: LD_INT 2
40424: PUSH
40425: LD_INT 30
40427: PUSH
40428: LD_INT 29
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 30
40437: PUSH
40438: LD_INT 30
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: LIST
40449: PPUSH
40450: CALL_OW 72
40454: ST_TO_ADDR
// if tmp then
40455: LD_VAR 0 19
40459: IFFALSE 40507
// for i in tmp do
40461: LD_ADDR_VAR 0 8
40465: PUSH
40466: LD_VAR 0 19
40470: PUSH
40471: FOR_IN
40472: IFFALSE 40505
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40474: LD_VAR 0 8
40478: PPUSH
40479: CALL_OW 250
40483: PPUSH
40484: LD_VAR 0 8
40488: PPUSH
40489: CALL_OW 251
40493: PPUSH
40494: LD_VAR 0 16
40498: PPUSH
40499: CALL_OW 441
40503: GO 40471
40505: POP
40506: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40507: LD_VAR 0 18
40511: PPUSH
40512: LD_INT 2
40514: PUSH
40515: LD_INT 30
40517: PUSH
40518: LD_INT 32
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 30
40527: PUSH
40528: LD_INT 33
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: LIST
40539: PPUSH
40540: CALL_OW 72
40544: IFFALSE 40632
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40546: LD_ADDR_VAR 0 8
40550: PUSH
40551: LD_VAR 0 18
40555: PPUSH
40556: LD_INT 2
40558: PUSH
40559: LD_INT 30
40561: PUSH
40562: LD_INT 32
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 30
40571: PUSH
40572: LD_INT 33
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: LIST
40583: PPUSH
40584: CALL_OW 72
40588: PUSH
40589: FOR_IN
40590: IFFALSE 40630
// begin if not GetBWeapon ( i ) then
40592: LD_VAR 0 8
40596: PPUSH
40597: CALL_OW 269
40601: NOT
40602: IFFALSE 40628
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40604: LD_VAR 0 8
40608: PPUSH
40609: LD_VAR 0 8
40613: PPUSH
40614: LD_VAR 0 2
40618: PPUSH
40619: CALL 41878 0 2
40623: PPUSH
40624: CALL_OW 431
// end ;
40628: GO 40589
40630: POP
40631: POP
// end ; for i = 1 to personel do
40632: LD_ADDR_VAR 0 8
40636: PUSH
40637: DOUBLE
40638: LD_INT 1
40640: DEC
40641: ST_TO_ADDR
40642: LD_VAR 0 6
40646: PUSH
40647: FOR_TO
40648: IFFALSE 41712
// begin if i > 4 then
40650: LD_VAR 0 8
40654: PUSH
40655: LD_INT 4
40657: GREATER
40658: IFFALSE 40662
// break ;
40660: GO 41712
// case i of 1 :
40662: LD_VAR 0 8
40666: PUSH
40667: LD_INT 1
40669: DOUBLE
40670: EQUAL
40671: IFTRUE 40675
40673: GO 40755
40675: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40676: LD_ADDR_VAR 0 12
40680: PUSH
40681: LD_VAR 0 18
40685: PPUSH
40686: LD_INT 22
40688: PUSH
40689: LD_VAR 0 16
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 58
40700: PUSH
40701: EMPTY
40702: LIST
40703: PUSH
40704: LD_INT 2
40706: PUSH
40707: LD_INT 30
40709: PUSH
40710: LD_INT 32
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 30
40719: PUSH
40720: LD_INT 4
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 30
40729: PUSH
40730: LD_INT 5
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: LIST
40747: PPUSH
40748: CALL_OW 72
40752: ST_TO_ADDR
40753: GO 40977
40755: LD_INT 2
40757: DOUBLE
40758: EQUAL
40759: IFTRUE 40763
40761: GO 40825
40763: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40764: LD_ADDR_VAR 0 12
40768: PUSH
40769: LD_VAR 0 18
40773: PPUSH
40774: LD_INT 22
40776: PUSH
40777: LD_VAR 0 16
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 2
40788: PUSH
40789: LD_INT 30
40791: PUSH
40792: LD_INT 0
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 30
40801: PUSH
40802: LD_INT 1
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: LIST
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PPUSH
40818: CALL_OW 72
40822: ST_TO_ADDR
40823: GO 40977
40825: LD_INT 3
40827: DOUBLE
40828: EQUAL
40829: IFTRUE 40833
40831: GO 40895
40833: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40834: LD_ADDR_VAR 0 12
40838: PUSH
40839: LD_VAR 0 18
40843: PPUSH
40844: LD_INT 22
40846: PUSH
40847: LD_VAR 0 16
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 2
40858: PUSH
40859: LD_INT 30
40861: PUSH
40862: LD_INT 2
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 30
40871: PUSH
40872: LD_INT 3
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: LIST
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PPUSH
40888: CALL_OW 72
40892: ST_TO_ADDR
40893: GO 40977
40895: LD_INT 4
40897: DOUBLE
40898: EQUAL
40899: IFTRUE 40903
40901: GO 40976
40903: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40904: LD_ADDR_VAR 0 12
40908: PUSH
40909: LD_VAR 0 18
40913: PPUSH
40914: LD_INT 22
40916: PUSH
40917: LD_VAR 0 16
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 2
40928: PUSH
40929: LD_INT 30
40931: PUSH
40932: LD_INT 6
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 30
40941: PUSH
40942: LD_INT 7
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 30
40951: PUSH
40952: LD_INT 8
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PPUSH
40969: CALL_OW 72
40973: ST_TO_ADDR
40974: GO 40977
40976: POP
// if i = 1 then
40977: LD_VAR 0 8
40981: PUSH
40982: LD_INT 1
40984: EQUAL
40985: IFFALSE 41096
// begin tmp := [ ] ;
40987: LD_ADDR_VAR 0 19
40991: PUSH
40992: EMPTY
40993: ST_TO_ADDR
// for j in f do
40994: LD_ADDR_VAR 0 9
40998: PUSH
40999: LD_VAR 0 12
41003: PUSH
41004: FOR_IN
41005: IFFALSE 41078
// if GetBType ( j ) = b_bunker then
41007: LD_VAR 0 9
41011: PPUSH
41012: CALL_OW 266
41016: PUSH
41017: LD_INT 32
41019: EQUAL
41020: IFFALSE 41047
// tmp := Insert ( tmp , 1 , j ) else
41022: LD_ADDR_VAR 0 19
41026: PUSH
41027: LD_VAR 0 19
41031: PPUSH
41032: LD_INT 1
41034: PPUSH
41035: LD_VAR 0 9
41039: PPUSH
41040: CALL_OW 2
41044: ST_TO_ADDR
41045: GO 41076
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41047: LD_ADDR_VAR 0 19
41051: PUSH
41052: LD_VAR 0 19
41056: PPUSH
41057: LD_VAR 0 19
41061: PUSH
41062: LD_INT 1
41064: PLUS
41065: PPUSH
41066: LD_VAR 0 9
41070: PPUSH
41071: CALL_OW 2
41075: ST_TO_ADDR
41076: GO 41004
41078: POP
41079: POP
// if tmp then
41080: LD_VAR 0 19
41084: IFFALSE 41096
// f := tmp ;
41086: LD_ADDR_VAR 0 12
41090: PUSH
41091: LD_VAR 0 19
41095: ST_TO_ADDR
// end ; x := personel [ i ] ;
41096: LD_ADDR_VAR 0 13
41100: PUSH
41101: LD_VAR 0 6
41105: PUSH
41106: LD_VAR 0 8
41110: ARRAY
41111: ST_TO_ADDR
// if x = - 1 then
41112: LD_VAR 0 13
41116: PUSH
41117: LD_INT 1
41119: NEG
41120: EQUAL
41121: IFFALSE 41330
// begin for j in f do
41123: LD_ADDR_VAR 0 9
41127: PUSH
41128: LD_VAR 0 12
41132: PUSH
41133: FOR_IN
41134: IFFALSE 41326
// repeat InitHc ;
41136: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41140: LD_VAR 0 9
41144: PPUSH
41145: CALL_OW 266
41149: PUSH
41150: LD_INT 5
41152: EQUAL
41153: IFFALSE 41223
// begin if UnitsInside ( j ) < 3 then
41155: LD_VAR 0 9
41159: PPUSH
41160: CALL_OW 313
41164: PUSH
41165: LD_INT 3
41167: LESS
41168: IFFALSE 41204
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41170: LD_INT 0
41172: PPUSH
41173: LD_INT 5
41175: PUSH
41176: LD_INT 8
41178: PUSH
41179: LD_INT 9
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: LIST
41186: PUSH
41187: LD_VAR 0 17
41191: ARRAY
41192: PPUSH
41193: LD_VAR 0 4
41197: PPUSH
41198: CALL_OW 380
41202: GO 41221
// PrepareHuman ( false , i , skill ) ;
41204: LD_INT 0
41206: PPUSH
41207: LD_VAR 0 8
41211: PPUSH
41212: LD_VAR 0 4
41216: PPUSH
41217: CALL_OW 380
// end else
41221: GO 41240
// PrepareHuman ( false , i , skill ) ;
41223: LD_INT 0
41225: PPUSH
41226: LD_VAR 0 8
41230: PPUSH
41231: LD_VAR 0 4
41235: PPUSH
41236: CALL_OW 380
// un := CreateHuman ;
41240: LD_ADDR_VAR 0 14
41244: PUSH
41245: CALL_OW 44
41249: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41250: LD_ADDR_VAR 0 7
41254: PUSH
41255: LD_VAR 0 7
41259: PPUSH
41260: LD_INT 1
41262: PPUSH
41263: LD_VAR 0 14
41267: PPUSH
41268: CALL_OW 2
41272: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41273: LD_VAR 0 14
41277: PPUSH
41278: LD_VAR 0 9
41282: PPUSH
41283: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41287: LD_VAR 0 9
41291: PPUSH
41292: CALL_OW 313
41296: PUSH
41297: LD_INT 6
41299: EQUAL
41300: PUSH
41301: LD_VAR 0 9
41305: PPUSH
41306: CALL_OW 266
41310: PUSH
41311: LD_INT 32
41313: PUSH
41314: LD_INT 31
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: IN
41321: OR
41322: IFFALSE 41136
41324: GO 41133
41326: POP
41327: POP
// end else
41328: GO 41710
// for j = 1 to x do
41330: LD_ADDR_VAR 0 9
41334: PUSH
41335: DOUBLE
41336: LD_INT 1
41338: DEC
41339: ST_TO_ADDR
41340: LD_VAR 0 13
41344: PUSH
41345: FOR_TO
41346: IFFALSE 41708
// begin InitHc ;
41348: CALL_OW 19
// if not f then
41352: LD_VAR 0 12
41356: NOT
41357: IFFALSE 41446
// begin PrepareHuman ( false , i , skill ) ;
41359: LD_INT 0
41361: PPUSH
41362: LD_VAR 0 8
41366: PPUSH
41367: LD_VAR 0 4
41371: PPUSH
41372: CALL_OW 380
// un := CreateHuman ;
41376: LD_ADDR_VAR 0 14
41380: PUSH
41381: CALL_OW 44
41385: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41386: LD_ADDR_VAR 0 7
41390: PUSH
41391: LD_VAR 0 7
41395: PPUSH
41396: LD_INT 1
41398: PPUSH
41399: LD_VAR 0 14
41403: PPUSH
41404: CALL_OW 2
41408: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41409: LD_VAR 0 14
41413: PPUSH
41414: LD_VAR 0 1
41418: PPUSH
41419: CALL_OW 250
41423: PPUSH
41424: LD_VAR 0 1
41428: PPUSH
41429: CALL_OW 251
41433: PPUSH
41434: LD_INT 10
41436: PPUSH
41437: LD_INT 0
41439: PPUSH
41440: CALL_OW 50
// continue ;
41444: GO 41345
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41446: LD_VAR 0 12
41450: PUSH
41451: LD_INT 1
41453: ARRAY
41454: PPUSH
41455: CALL_OW 313
41459: PUSH
41460: LD_VAR 0 12
41464: PUSH
41465: LD_INT 1
41467: ARRAY
41468: PPUSH
41469: CALL_OW 266
41473: PUSH
41474: LD_INT 32
41476: PUSH
41477: LD_INT 31
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: IN
41484: AND
41485: PUSH
41486: LD_VAR 0 12
41490: PUSH
41491: LD_INT 1
41493: ARRAY
41494: PPUSH
41495: CALL_OW 313
41499: PUSH
41500: LD_INT 6
41502: EQUAL
41503: OR
41504: IFFALSE 41524
// f := Delete ( f , 1 ) ;
41506: LD_ADDR_VAR 0 12
41510: PUSH
41511: LD_VAR 0 12
41515: PPUSH
41516: LD_INT 1
41518: PPUSH
41519: CALL_OW 3
41523: ST_TO_ADDR
// if not f then
41524: LD_VAR 0 12
41528: NOT
41529: IFFALSE 41547
// begin x := x + 2 ;
41531: LD_ADDR_VAR 0 13
41535: PUSH
41536: LD_VAR 0 13
41540: PUSH
41541: LD_INT 2
41543: PLUS
41544: ST_TO_ADDR
// continue ;
41545: GO 41345
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41547: LD_VAR 0 12
41551: PUSH
41552: LD_INT 1
41554: ARRAY
41555: PPUSH
41556: CALL_OW 266
41560: PUSH
41561: LD_INT 5
41563: EQUAL
41564: IFFALSE 41638
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41566: LD_VAR 0 12
41570: PUSH
41571: LD_INT 1
41573: ARRAY
41574: PPUSH
41575: CALL_OW 313
41579: PUSH
41580: LD_INT 3
41582: LESS
41583: IFFALSE 41619
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41585: LD_INT 0
41587: PPUSH
41588: LD_INT 5
41590: PUSH
41591: LD_INT 8
41593: PUSH
41594: LD_INT 9
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: LIST
41601: PUSH
41602: LD_VAR 0 17
41606: ARRAY
41607: PPUSH
41608: LD_VAR 0 4
41612: PPUSH
41613: CALL_OW 380
41617: GO 41636
// PrepareHuman ( false , i , skill ) ;
41619: LD_INT 0
41621: PPUSH
41622: LD_VAR 0 8
41626: PPUSH
41627: LD_VAR 0 4
41631: PPUSH
41632: CALL_OW 380
// end else
41636: GO 41655
// PrepareHuman ( false , i , skill ) ;
41638: LD_INT 0
41640: PPUSH
41641: LD_VAR 0 8
41645: PPUSH
41646: LD_VAR 0 4
41650: PPUSH
41651: CALL_OW 380
// un := CreateHuman ;
41655: LD_ADDR_VAR 0 14
41659: PUSH
41660: CALL_OW 44
41664: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41665: LD_ADDR_VAR 0 7
41669: PUSH
41670: LD_VAR 0 7
41674: PPUSH
41675: LD_INT 1
41677: PPUSH
41678: LD_VAR 0 14
41682: PPUSH
41683: CALL_OW 2
41687: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41688: LD_VAR 0 14
41692: PPUSH
41693: LD_VAR 0 12
41697: PUSH
41698: LD_INT 1
41700: ARRAY
41701: PPUSH
41702: CALL_OW 52
// end ;
41706: GO 41345
41708: POP
41709: POP
// end ;
41710: GO 40647
41712: POP
41713: POP
// result := result ^ buildings ;
41714: LD_ADDR_VAR 0 7
41718: PUSH
41719: LD_VAR 0 7
41723: PUSH
41724: LD_VAR 0 18
41728: ADD
41729: ST_TO_ADDR
// end else
41730: GO 41873
// begin for i = 1 to personel do
41732: LD_ADDR_VAR 0 8
41736: PUSH
41737: DOUBLE
41738: LD_INT 1
41740: DEC
41741: ST_TO_ADDR
41742: LD_VAR 0 6
41746: PUSH
41747: FOR_TO
41748: IFFALSE 41871
// begin if i > 4 then
41750: LD_VAR 0 8
41754: PUSH
41755: LD_INT 4
41757: GREATER
41758: IFFALSE 41762
// break ;
41760: GO 41871
// x := personel [ i ] ;
41762: LD_ADDR_VAR 0 13
41766: PUSH
41767: LD_VAR 0 6
41771: PUSH
41772: LD_VAR 0 8
41776: ARRAY
41777: ST_TO_ADDR
// if x = - 1 then
41778: LD_VAR 0 13
41782: PUSH
41783: LD_INT 1
41785: NEG
41786: EQUAL
41787: IFFALSE 41791
// continue ;
41789: GO 41747
// PrepareHuman ( false , i , skill ) ;
41791: LD_INT 0
41793: PPUSH
41794: LD_VAR 0 8
41798: PPUSH
41799: LD_VAR 0 4
41803: PPUSH
41804: CALL_OW 380
// un := CreateHuman ;
41808: LD_ADDR_VAR 0 14
41812: PUSH
41813: CALL_OW 44
41817: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41818: LD_VAR 0 14
41822: PPUSH
41823: LD_VAR 0 1
41827: PPUSH
41828: CALL_OW 250
41832: PPUSH
41833: LD_VAR 0 1
41837: PPUSH
41838: CALL_OW 251
41842: PPUSH
41843: LD_INT 10
41845: PPUSH
41846: LD_INT 0
41848: PPUSH
41849: CALL_OW 50
// result := result ^ un ;
41853: LD_ADDR_VAR 0 7
41857: PUSH
41858: LD_VAR 0 7
41862: PUSH
41863: LD_VAR 0 14
41867: ADD
41868: ST_TO_ADDR
// end ;
41869: GO 41747
41871: POP
41872: POP
// end ; end ;
41873: LD_VAR 0 7
41877: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41878: LD_INT 0
41880: PPUSH
41881: PPUSH
41882: PPUSH
41883: PPUSH
41884: PPUSH
41885: PPUSH
41886: PPUSH
41887: PPUSH
41888: PPUSH
41889: PPUSH
41890: PPUSH
41891: PPUSH
41892: PPUSH
41893: PPUSH
41894: PPUSH
41895: PPUSH
// result := false ;
41896: LD_ADDR_VAR 0 3
41900: PUSH
41901: LD_INT 0
41903: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41904: LD_VAR 0 1
41908: NOT
41909: PUSH
41910: LD_VAR 0 1
41914: PPUSH
41915: CALL_OW 266
41919: PUSH
41920: LD_INT 32
41922: PUSH
41923: LD_INT 33
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: IN
41930: NOT
41931: OR
41932: IFFALSE 41936
// exit ;
41934: GO 43045
// nat := GetNation ( tower ) ;
41936: LD_ADDR_VAR 0 12
41940: PUSH
41941: LD_VAR 0 1
41945: PPUSH
41946: CALL_OW 248
41950: ST_TO_ADDR
// side := GetSide ( tower ) ;
41951: LD_ADDR_VAR 0 16
41955: PUSH
41956: LD_VAR 0 1
41960: PPUSH
41961: CALL_OW 255
41965: ST_TO_ADDR
// x := GetX ( tower ) ;
41966: LD_ADDR_VAR 0 10
41970: PUSH
41971: LD_VAR 0 1
41975: PPUSH
41976: CALL_OW 250
41980: ST_TO_ADDR
// y := GetY ( tower ) ;
41981: LD_ADDR_VAR 0 11
41985: PUSH
41986: LD_VAR 0 1
41990: PPUSH
41991: CALL_OW 251
41995: ST_TO_ADDR
// if not x or not y then
41996: LD_VAR 0 10
42000: NOT
42001: PUSH
42002: LD_VAR 0 11
42006: NOT
42007: OR
42008: IFFALSE 42012
// exit ;
42010: GO 43045
// weapon := 0 ;
42012: LD_ADDR_VAR 0 18
42016: PUSH
42017: LD_INT 0
42019: ST_TO_ADDR
// fac_list := [ ] ;
42020: LD_ADDR_VAR 0 17
42024: PUSH
42025: EMPTY
42026: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42027: LD_ADDR_VAR 0 6
42031: PUSH
42032: LD_VAR 0 1
42036: PPUSH
42037: CALL_OW 274
42041: PPUSH
42042: LD_VAR 0 2
42046: PPUSH
42047: LD_INT 0
42049: PPUSH
42050: CALL 39616 0 3
42054: PPUSH
42055: LD_INT 30
42057: PUSH
42058: LD_INT 3
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PPUSH
42065: CALL_OW 72
42069: ST_TO_ADDR
// if not factories then
42070: LD_VAR 0 6
42074: NOT
42075: IFFALSE 42079
// exit ;
42077: GO 43045
// for i in factories do
42079: LD_ADDR_VAR 0 8
42083: PUSH
42084: LD_VAR 0 6
42088: PUSH
42089: FOR_IN
42090: IFFALSE 42115
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42092: LD_ADDR_VAR 0 17
42096: PUSH
42097: LD_VAR 0 17
42101: PUSH
42102: LD_VAR 0 8
42106: PPUSH
42107: CALL_OW 478
42111: UNION
42112: ST_TO_ADDR
42113: GO 42089
42115: POP
42116: POP
// if not fac_list then
42117: LD_VAR 0 17
42121: NOT
42122: IFFALSE 42126
// exit ;
42124: GO 43045
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42126: LD_ADDR_VAR 0 5
42130: PUSH
42131: LD_INT 4
42133: PUSH
42134: LD_INT 5
42136: PUSH
42137: LD_INT 9
42139: PUSH
42140: LD_INT 10
42142: PUSH
42143: LD_INT 6
42145: PUSH
42146: LD_INT 7
42148: PUSH
42149: LD_INT 11
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 27
42163: PUSH
42164: LD_INT 28
42166: PUSH
42167: LD_INT 26
42169: PUSH
42170: LD_INT 30
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 43
42181: PUSH
42182: LD_INT 44
42184: PUSH
42185: LD_INT 46
42187: PUSH
42188: LD_INT 45
42190: PUSH
42191: LD_INT 47
42193: PUSH
42194: LD_INT 49
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: LIST
42209: PUSH
42210: LD_VAR 0 12
42214: ARRAY
42215: ST_TO_ADDR
// list := list isect fac_list ;
42216: LD_ADDR_VAR 0 5
42220: PUSH
42221: LD_VAR 0 5
42225: PUSH
42226: LD_VAR 0 17
42230: ISECT
42231: ST_TO_ADDR
// if not list then
42232: LD_VAR 0 5
42236: NOT
42237: IFFALSE 42241
// exit ;
42239: GO 43045
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42241: LD_VAR 0 12
42245: PUSH
42246: LD_INT 3
42248: EQUAL
42249: PUSH
42250: LD_INT 49
42252: PUSH
42253: LD_VAR 0 5
42257: IN
42258: AND
42259: PUSH
42260: LD_INT 31
42262: PPUSH
42263: LD_VAR 0 16
42267: PPUSH
42268: CALL_OW 321
42272: PUSH
42273: LD_INT 2
42275: EQUAL
42276: AND
42277: IFFALSE 42337
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42279: LD_INT 22
42281: PUSH
42282: LD_VAR 0 16
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 35
42293: PUSH
42294: LD_INT 49
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 91
42303: PUSH
42304: LD_VAR 0 1
42308: PUSH
42309: LD_INT 10
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: LIST
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: LIST
42321: PPUSH
42322: CALL_OW 69
42326: NOT
42327: IFFALSE 42337
// weapon := ru_time_lapser ;
42329: LD_ADDR_VAR 0 18
42333: PUSH
42334: LD_INT 49
42336: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42337: LD_VAR 0 12
42341: PUSH
42342: LD_INT 1
42344: PUSH
42345: LD_INT 2
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: IN
42352: PUSH
42353: LD_INT 11
42355: PUSH
42356: LD_VAR 0 5
42360: IN
42361: PUSH
42362: LD_INT 30
42364: PUSH
42365: LD_VAR 0 5
42369: IN
42370: OR
42371: AND
42372: PUSH
42373: LD_INT 6
42375: PPUSH
42376: LD_VAR 0 16
42380: PPUSH
42381: CALL_OW 321
42385: PUSH
42386: LD_INT 2
42388: EQUAL
42389: AND
42390: IFFALSE 42555
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42392: LD_INT 22
42394: PUSH
42395: LD_VAR 0 16
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 2
42406: PUSH
42407: LD_INT 35
42409: PUSH
42410: LD_INT 11
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 35
42419: PUSH
42420: LD_INT 30
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 91
42434: PUSH
42435: LD_VAR 0 1
42439: PUSH
42440: LD_INT 18
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: LIST
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: LIST
42452: PPUSH
42453: CALL_OW 69
42457: NOT
42458: PUSH
42459: LD_INT 22
42461: PUSH
42462: LD_VAR 0 16
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 2
42473: PUSH
42474: LD_INT 30
42476: PUSH
42477: LD_INT 32
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 30
42486: PUSH
42487: LD_INT 33
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 91
42501: PUSH
42502: LD_VAR 0 1
42506: PUSH
42507: LD_INT 12
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: LIST
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: LIST
42519: PUSH
42520: EMPTY
42521: LIST
42522: PPUSH
42523: CALL_OW 69
42527: PUSH
42528: LD_INT 2
42530: GREATER
42531: AND
42532: IFFALSE 42555
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42534: LD_ADDR_VAR 0 18
42538: PUSH
42539: LD_INT 11
42541: PUSH
42542: LD_INT 30
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_VAR 0 12
42553: ARRAY
42554: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42555: LD_VAR 0 18
42559: NOT
42560: PUSH
42561: LD_INT 40
42563: PPUSH
42564: LD_VAR 0 16
42568: PPUSH
42569: CALL_OW 321
42573: PUSH
42574: LD_INT 2
42576: EQUAL
42577: AND
42578: PUSH
42579: LD_INT 7
42581: PUSH
42582: LD_VAR 0 5
42586: IN
42587: PUSH
42588: LD_INT 28
42590: PUSH
42591: LD_VAR 0 5
42595: IN
42596: OR
42597: PUSH
42598: LD_INT 45
42600: PUSH
42601: LD_VAR 0 5
42605: IN
42606: OR
42607: AND
42608: IFFALSE 42862
// begin hex := GetHexInfo ( x , y ) ;
42610: LD_ADDR_VAR 0 4
42614: PUSH
42615: LD_VAR 0 10
42619: PPUSH
42620: LD_VAR 0 11
42624: PPUSH
42625: CALL_OW 546
42629: ST_TO_ADDR
// if hex [ 1 ] then
42630: LD_VAR 0 4
42634: PUSH
42635: LD_INT 1
42637: ARRAY
42638: IFFALSE 42642
// exit ;
42640: GO 43045
// height := hex [ 2 ] ;
42642: LD_ADDR_VAR 0 15
42646: PUSH
42647: LD_VAR 0 4
42651: PUSH
42652: LD_INT 2
42654: ARRAY
42655: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42656: LD_ADDR_VAR 0 14
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: LD_INT 2
42666: PUSH
42667: LD_INT 3
42669: PUSH
42670: LD_INT 5
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: ST_TO_ADDR
// for i in tmp do
42679: LD_ADDR_VAR 0 8
42683: PUSH
42684: LD_VAR 0 14
42688: PUSH
42689: FOR_IN
42690: IFFALSE 42860
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42692: LD_ADDR_VAR 0 9
42696: PUSH
42697: LD_VAR 0 10
42701: PPUSH
42702: LD_VAR 0 8
42706: PPUSH
42707: LD_INT 5
42709: PPUSH
42710: CALL_OW 272
42714: PUSH
42715: LD_VAR 0 11
42719: PPUSH
42720: LD_VAR 0 8
42724: PPUSH
42725: LD_INT 5
42727: PPUSH
42728: CALL_OW 273
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42737: LD_VAR 0 9
42741: PUSH
42742: LD_INT 1
42744: ARRAY
42745: PPUSH
42746: LD_VAR 0 9
42750: PUSH
42751: LD_INT 2
42753: ARRAY
42754: PPUSH
42755: CALL_OW 488
42759: IFFALSE 42858
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42761: LD_ADDR_VAR 0 4
42765: PUSH
42766: LD_VAR 0 9
42770: PUSH
42771: LD_INT 1
42773: ARRAY
42774: PPUSH
42775: LD_VAR 0 9
42779: PUSH
42780: LD_INT 2
42782: ARRAY
42783: PPUSH
42784: CALL_OW 546
42788: ST_TO_ADDR
// if hex [ 1 ] then
42789: LD_VAR 0 4
42793: PUSH
42794: LD_INT 1
42796: ARRAY
42797: IFFALSE 42801
// continue ;
42799: GO 42689
// h := hex [ 2 ] ;
42801: LD_ADDR_VAR 0 13
42805: PUSH
42806: LD_VAR 0 4
42810: PUSH
42811: LD_INT 2
42813: ARRAY
42814: ST_TO_ADDR
// if h + 7 < height then
42815: LD_VAR 0 13
42819: PUSH
42820: LD_INT 7
42822: PLUS
42823: PUSH
42824: LD_VAR 0 15
42828: LESS
42829: IFFALSE 42858
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42831: LD_ADDR_VAR 0 18
42835: PUSH
42836: LD_INT 7
42838: PUSH
42839: LD_INT 28
42841: PUSH
42842: LD_INT 45
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: LIST
42849: PUSH
42850: LD_VAR 0 12
42854: ARRAY
42855: ST_TO_ADDR
// break ;
42856: GO 42860
// end ; end ; end ;
42858: GO 42689
42860: POP
42861: POP
// end ; if not weapon then
42862: LD_VAR 0 18
42866: NOT
42867: IFFALSE 42927
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42869: LD_ADDR_VAR 0 5
42873: PUSH
42874: LD_VAR 0 5
42878: PUSH
42879: LD_INT 11
42881: PUSH
42882: LD_INT 30
42884: PUSH
42885: LD_INT 49
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: LIST
42892: DIFF
42893: ST_TO_ADDR
// if not list then
42894: LD_VAR 0 5
42898: NOT
42899: IFFALSE 42903
// exit ;
42901: GO 43045
// weapon := list [ rand ( 1 , list ) ] ;
42903: LD_ADDR_VAR 0 18
42907: PUSH
42908: LD_VAR 0 5
42912: PUSH
42913: LD_INT 1
42915: PPUSH
42916: LD_VAR 0 5
42920: PPUSH
42921: CALL_OW 12
42925: ARRAY
42926: ST_TO_ADDR
// end ; if weapon then
42927: LD_VAR 0 18
42931: IFFALSE 43045
// begin tmp := CostOfWeapon ( weapon ) ;
42933: LD_ADDR_VAR 0 14
42937: PUSH
42938: LD_VAR 0 18
42942: PPUSH
42943: CALL_OW 451
42947: ST_TO_ADDR
// j := GetBase ( tower ) ;
42948: LD_ADDR_VAR 0 9
42952: PUSH
42953: LD_VAR 0 1
42957: PPUSH
42958: CALL_OW 274
42962: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42963: LD_VAR 0 9
42967: PPUSH
42968: LD_INT 1
42970: PPUSH
42971: CALL_OW 275
42975: PUSH
42976: LD_VAR 0 14
42980: PUSH
42981: LD_INT 1
42983: ARRAY
42984: GREATEREQUAL
42985: PUSH
42986: LD_VAR 0 9
42990: PPUSH
42991: LD_INT 2
42993: PPUSH
42994: CALL_OW 275
42998: PUSH
42999: LD_VAR 0 14
43003: PUSH
43004: LD_INT 2
43006: ARRAY
43007: GREATEREQUAL
43008: AND
43009: PUSH
43010: LD_VAR 0 9
43014: PPUSH
43015: LD_INT 3
43017: PPUSH
43018: CALL_OW 275
43022: PUSH
43023: LD_VAR 0 14
43027: PUSH
43028: LD_INT 3
43030: ARRAY
43031: GREATEREQUAL
43032: AND
43033: IFFALSE 43045
// result := weapon ;
43035: LD_ADDR_VAR 0 3
43039: PUSH
43040: LD_VAR 0 18
43044: ST_TO_ADDR
// end ; end ;
43045: LD_VAR 0 3
43049: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43050: LD_INT 0
43052: PPUSH
43053: PPUSH
// result := true ;
43054: LD_ADDR_VAR 0 3
43058: PUSH
43059: LD_INT 1
43061: ST_TO_ADDR
// if array1 = array2 then
43062: LD_VAR 0 1
43066: PUSH
43067: LD_VAR 0 2
43071: EQUAL
43072: IFFALSE 43132
// begin for i = 1 to array1 do
43074: LD_ADDR_VAR 0 4
43078: PUSH
43079: DOUBLE
43080: LD_INT 1
43082: DEC
43083: ST_TO_ADDR
43084: LD_VAR 0 1
43088: PUSH
43089: FOR_TO
43090: IFFALSE 43128
// if array1 [ i ] <> array2 [ i ] then
43092: LD_VAR 0 1
43096: PUSH
43097: LD_VAR 0 4
43101: ARRAY
43102: PUSH
43103: LD_VAR 0 2
43107: PUSH
43108: LD_VAR 0 4
43112: ARRAY
43113: NONEQUAL
43114: IFFALSE 43126
// begin result := false ;
43116: LD_ADDR_VAR 0 3
43120: PUSH
43121: LD_INT 0
43123: ST_TO_ADDR
// break ;
43124: GO 43128
// end ;
43126: GO 43089
43128: POP
43129: POP
// end else
43130: GO 43140
// result := false ;
43132: LD_ADDR_VAR 0 3
43136: PUSH
43137: LD_INT 0
43139: ST_TO_ADDR
// end ;
43140: LD_VAR 0 3
43144: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43145: LD_INT 0
43147: PPUSH
43148: PPUSH
// if not array1 or not array2 then
43149: LD_VAR 0 1
43153: NOT
43154: PUSH
43155: LD_VAR 0 2
43159: NOT
43160: OR
43161: IFFALSE 43165
// exit ;
43163: GO 43229
// result := true ;
43165: LD_ADDR_VAR 0 3
43169: PUSH
43170: LD_INT 1
43172: ST_TO_ADDR
// for i = 1 to array1 do
43173: LD_ADDR_VAR 0 4
43177: PUSH
43178: DOUBLE
43179: LD_INT 1
43181: DEC
43182: ST_TO_ADDR
43183: LD_VAR 0 1
43187: PUSH
43188: FOR_TO
43189: IFFALSE 43227
// if array1 [ i ] <> array2 [ i ] then
43191: LD_VAR 0 1
43195: PUSH
43196: LD_VAR 0 4
43200: ARRAY
43201: PUSH
43202: LD_VAR 0 2
43206: PUSH
43207: LD_VAR 0 4
43211: ARRAY
43212: NONEQUAL
43213: IFFALSE 43225
// begin result := false ;
43215: LD_ADDR_VAR 0 3
43219: PUSH
43220: LD_INT 0
43222: ST_TO_ADDR
// break ;
43223: GO 43227
// end ;
43225: GO 43188
43227: POP
43228: POP
// end ;
43229: LD_VAR 0 3
43233: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43234: LD_INT 0
43236: PPUSH
43237: PPUSH
43238: PPUSH
// pom := GetBase ( fac ) ;
43239: LD_ADDR_VAR 0 5
43243: PUSH
43244: LD_VAR 0 1
43248: PPUSH
43249: CALL_OW 274
43253: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43254: LD_ADDR_VAR 0 4
43258: PUSH
43259: LD_VAR 0 2
43263: PUSH
43264: LD_INT 1
43266: ARRAY
43267: PPUSH
43268: LD_VAR 0 2
43272: PUSH
43273: LD_INT 2
43275: ARRAY
43276: PPUSH
43277: LD_VAR 0 2
43281: PUSH
43282: LD_INT 3
43284: ARRAY
43285: PPUSH
43286: LD_VAR 0 2
43290: PUSH
43291: LD_INT 4
43293: ARRAY
43294: PPUSH
43295: CALL_OW 449
43299: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43300: LD_ADDR_VAR 0 3
43304: PUSH
43305: LD_VAR 0 5
43309: PPUSH
43310: LD_INT 1
43312: PPUSH
43313: CALL_OW 275
43317: PUSH
43318: LD_VAR 0 4
43322: PUSH
43323: LD_INT 1
43325: ARRAY
43326: GREATEREQUAL
43327: PUSH
43328: LD_VAR 0 5
43332: PPUSH
43333: LD_INT 2
43335: PPUSH
43336: CALL_OW 275
43340: PUSH
43341: LD_VAR 0 4
43345: PUSH
43346: LD_INT 2
43348: ARRAY
43349: GREATEREQUAL
43350: AND
43351: PUSH
43352: LD_VAR 0 5
43356: PPUSH
43357: LD_INT 3
43359: PPUSH
43360: CALL_OW 275
43364: PUSH
43365: LD_VAR 0 4
43369: PUSH
43370: LD_INT 3
43372: ARRAY
43373: GREATEREQUAL
43374: AND
43375: ST_TO_ADDR
// end ;
43376: LD_VAR 0 3
43380: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43381: LD_INT 0
43383: PPUSH
43384: PPUSH
43385: PPUSH
43386: PPUSH
// pom := GetBase ( building ) ;
43387: LD_ADDR_VAR 0 3
43391: PUSH
43392: LD_VAR 0 1
43396: PPUSH
43397: CALL_OW 274
43401: ST_TO_ADDR
// if not pom then
43402: LD_VAR 0 3
43406: NOT
43407: IFFALSE 43411
// exit ;
43409: GO 43581
// btype := GetBType ( building ) ;
43411: LD_ADDR_VAR 0 5
43415: PUSH
43416: LD_VAR 0 1
43420: PPUSH
43421: CALL_OW 266
43425: ST_TO_ADDR
// if btype = b_armoury then
43426: LD_VAR 0 5
43430: PUSH
43431: LD_INT 4
43433: EQUAL
43434: IFFALSE 43444
// btype := b_barracks ;
43436: LD_ADDR_VAR 0 5
43440: PUSH
43441: LD_INT 5
43443: ST_TO_ADDR
// if btype = b_depot then
43444: LD_VAR 0 5
43448: PUSH
43449: LD_INT 0
43451: EQUAL
43452: IFFALSE 43462
// btype := b_warehouse ;
43454: LD_ADDR_VAR 0 5
43458: PUSH
43459: LD_INT 1
43461: ST_TO_ADDR
// if btype = b_workshop then
43462: LD_VAR 0 5
43466: PUSH
43467: LD_INT 2
43469: EQUAL
43470: IFFALSE 43480
// btype := b_factory ;
43472: LD_ADDR_VAR 0 5
43476: PUSH
43477: LD_INT 3
43479: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43480: LD_ADDR_VAR 0 4
43484: PUSH
43485: LD_VAR 0 5
43489: PPUSH
43490: LD_VAR 0 1
43494: PPUSH
43495: CALL_OW 248
43499: PPUSH
43500: CALL_OW 450
43504: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43505: LD_ADDR_VAR 0 2
43509: PUSH
43510: LD_VAR 0 3
43514: PPUSH
43515: LD_INT 1
43517: PPUSH
43518: CALL_OW 275
43522: PUSH
43523: LD_VAR 0 4
43527: PUSH
43528: LD_INT 1
43530: ARRAY
43531: GREATEREQUAL
43532: PUSH
43533: LD_VAR 0 3
43537: PPUSH
43538: LD_INT 2
43540: PPUSH
43541: CALL_OW 275
43545: PUSH
43546: LD_VAR 0 4
43550: PUSH
43551: LD_INT 2
43553: ARRAY
43554: GREATEREQUAL
43555: AND
43556: PUSH
43557: LD_VAR 0 3
43561: PPUSH
43562: LD_INT 3
43564: PPUSH
43565: CALL_OW 275
43569: PUSH
43570: LD_VAR 0 4
43574: PUSH
43575: LD_INT 3
43577: ARRAY
43578: GREATEREQUAL
43579: AND
43580: ST_TO_ADDR
// end ;
43581: LD_VAR 0 2
43585: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43586: LD_INT 0
43588: PPUSH
43589: PPUSH
43590: PPUSH
// pom := GetBase ( building ) ;
43591: LD_ADDR_VAR 0 4
43595: PUSH
43596: LD_VAR 0 1
43600: PPUSH
43601: CALL_OW 274
43605: ST_TO_ADDR
// if not pom then
43606: LD_VAR 0 4
43610: NOT
43611: IFFALSE 43615
// exit ;
43613: GO 43716
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43615: LD_ADDR_VAR 0 5
43619: PUSH
43620: LD_VAR 0 2
43624: PPUSH
43625: LD_VAR 0 1
43629: PPUSH
43630: CALL_OW 248
43634: PPUSH
43635: CALL_OW 450
43639: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43640: LD_ADDR_VAR 0 3
43644: PUSH
43645: LD_VAR 0 4
43649: PPUSH
43650: LD_INT 1
43652: PPUSH
43653: CALL_OW 275
43657: PUSH
43658: LD_VAR 0 5
43662: PUSH
43663: LD_INT 1
43665: ARRAY
43666: GREATEREQUAL
43667: PUSH
43668: LD_VAR 0 4
43672: PPUSH
43673: LD_INT 2
43675: PPUSH
43676: CALL_OW 275
43680: PUSH
43681: LD_VAR 0 5
43685: PUSH
43686: LD_INT 2
43688: ARRAY
43689: GREATEREQUAL
43690: AND
43691: PUSH
43692: LD_VAR 0 4
43696: PPUSH
43697: LD_INT 3
43699: PPUSH
43700: CALL_OW 275
43704: PUSH
43705: LD_VAR 0 5
43709: PUSH
43710: LD_INT 3
43712: ARRAY
43713: GREATEREQUAL
43714: AND
43715: ST_TO_ADDR
// end ;
43716: LD_VAR 0 3
43720: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43721: LD_INT 0
43723: PPUSH
43724: PPUSH
43725: PPUSH
43726: PPUSH
43727: PPUSH
43728: PPUSH
43729: PPUSH
43730: PPUSH
43731: PPUSH
43732: PPUSH
43733: PPUSH
// result := false ;
43734: LD_ADDR_VAR 0 8
43738: PUSH
43739: LD_INT 0
43741: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43742: LD_VAR 0 5
43746: NOT
43747: PUSH
43748: LD_VAR 0 1
43752: NOT
43753: OR
43754: PUSH
43755: LD_VAR 0 2
43759: NOT
43760: OR
43761: PUSH
43762: LD_VAR 0 3
43766: NOT
43767: OR
43768: IFFALSE 43772
// exit ;
43770: GO 44586
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43772: LD_ADDR_VAR 0 14
43776: PUSH
43777: LD_VAR 0 1
43781: PPUSH
43782: LD_VAR 0 2
43786: PPUSH
43787: LD_VAR 0 3
43791: PPUSH
43792: LD_VAR 0 4
43796: PPUSH
43797: LD_VAR 0 5
43801: PUSH
43802: LD_INT 1
43804: ARRAY
43805: PPUSH
43806: CALL_OW 248
43810: PPUSH
43811: LD_INT 0
43813: PPUSH
43814: CALL 45839 0 6
43818: ST_TO_ADDR
// if not hexes then
43819: LD_VAR 0 14
43823: NOT
43824: IFFALSE 43828
// exit ;
43826: GO 44586
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43828: LD_ADDR_VAR 0 17
43832: PUSH
43833: LD_VAR 0 5
43837: PPUSH
43838: LD_INT 22
43840: PUSH
43841: LD_VAR 0 13
43845: PPUSH
43846: CALL_OW 255
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 2
43857: PUSH
43858: LD_INT 30
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 30
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: LIST
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PPUSH
43887: CALL_OW 72
43891: ST_TO_ADDR
// for i = 1 to hexes do
43892: LD_ADDR_VAR 0 9
43896: PUSH
43897: DOUBLE
43898: LD_INT 1
43900: DEC
43901: ST_TO_ADDR
43902: LD_VAR 0 14
43906: PUSH
43907: FOR_TO
43908: IFFALSE 44584
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43910: LD_ADDR_VAR 0 13
43914: PUSH
43915: LD_VAR 0 14
43919: PUSH
43920: LD_VAR 0 9
43924: ARRAY
43925: PUSH
43926: LD_INT 1
43928: ARRAY
43929: PPUSH
43930: LD_VAR 0 14
43934: PUSH
43935: LD_VAR 0 9
43939: ARRAY
43940: PUSH
43941: LD_INT 2
43943: ARRAY
43944: PPUSH
43945: CALL_OW 428
43949: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43950: LD_VAR 0 14
43954: PUSH
43955: LD_VAR 0 9
43959: ARRAY
43960: PUSH
43961: LD_INT 1
43963: ARRAY
43964: PPUSH
43965: LD_VAR 0 14
43969: PUSH
43970: LD_VAR 0 9
43974: ARRAY
43975: PUSH
43976: LD_INT 2
43978: ARRAY
43979: PPUSH
43980: CALL_OW 351
43984: PUSH
43985: LD_VAR 0 14
43989: PUSH
43990: LD_VAR 0 9
43994: ARRAY
43995: PUSH
43996: LD_INT 1
43998: ARRAY
43999: PPUSH
44000: LD_VAR 0 14
44004: PUSH
44005: LD_VAR 0 9
44009: ARRAY
44010: PUSH
44011: LD_INT 2
44013: ARRAY
44014: PPUSH
44015: CALL_OW 488
44019: NOT
44020: OR
44021: PUSH
44022: LD_VAR 0 13
44026: PPUSH
44027: CALL_OW 247
44031: PUSH
44032: LD_INT 3
44034: EQUAL
44035: OR
44036: IFFALSE 44042
// exit ;
44038: POP
44039: POP
44040: GO 44586
// if not tmp then
44042: LD_VAR 0 13
44046: NOT
44047: IFFALSE 44051
// continue ;
44049: GO 43907
// result := true ;
44051: LD_ADDR_VAR 0 8
44055: PUSH
44056: LD_INT 1
44058: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44059: LD_VAR 0 6
44063: PUSH
44064: LD_VAR 0 13
44068: PPUSH
44069: CALL_OW 247
44073: PUSH
44074: LD_INT 2
44076: EQUAL
44077: AND
44078: PUSH
44079: LD_VAR 0 13
44083: PPUSH
44084: CALL_OW 263
44088: PUSH
44089: LD_INT 1
44091: EQUAL
44092: AND
44093: IFFALSE 44257
// begin if IsDrivenBy ( tmp ) then
44095: LD_VAR 0 13
44099: PPUSH
44100: CALL_OW 311
44104: IFFALSE 44108
// continue ;
44106: GO 43907
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44108: LD_VAR 0 6
44112: PPUSH
44113: LD_INT 3
44115: PUSH
44116: LD_INT 60
44118: PUSH
44119: EMPTY
44120: LIST
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 3
44128: PUSH
44129: LD_INT 55
44131: PUSH
44132: EMPTY
44133: LIST
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PPUSH
44143: CALL_OW 72
44147: IFFALSE 44255
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44149: LD_ADDR_VAR 0 18
44153: PUSH
44154: LD_VAR 0 6
44158: PPUSH
44159: LD_INT 3
44161: PUSH
44162: LD_INT 60
44164: PUSH
44165: EMPTY
44166: LIST
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 3
44174: PUSH
44175: LD_INT 55
44177: PUSH
44178: EMPTY
44179: LIST
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PPUSH
44189: CALL_OW 72
44193: PUSH
44194: LD_INT 1
44196: ARRAY
44197: ST_TO_ADDR
// if IsInUnit ( driver ) then
44198: LD_VAR 0 18
44202: PPUSH
44203: CALL_OW 310
44207: IFFALSE 44218
// ComExit ( driver ) ;
44209: LD_VAR 0 18
44213: PPUSH
44214: CALL 69631 0 1
// AddComEnterUnit ( driver , tmp ) ;
44218: LD_VAR 0 18
44222: PPUSH
44223: LD_VAR 0 13
44227: PPUSH
44228: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44232: LD_VAR 0 18
44236: PPUSH
44237: LD_VAR 0 7
44241: PPUSH
44242: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44246: LD_VAR 0 18
44250: PPUSH
44251: CALL_OW 181
// end ; continue ;
44255: GO 43907
// end ; if not cleaners or not tmp in cleaners then
44257: LD_VAR 0 6
44261: NOT
44262: PUSH
44263: LD_VAR 0 13
44267: PUSH
44268: LD_VAR 0 6
44272: IN
44273: NOT
44274: OR
44275: IFFALSE 44582
// begin if dep then
44277: LD_VAR 0 17
44281: IFFALSE 44417
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44283: LD_ADDR_VAR 0 16
44287: PUSH
44288: LD_VAR 0 17
44292: PUSH
44293: LD_INT 1
44295: ARRAY
44296: PPUSH
44297: CALL_OW 250
44301: PPUSH
44302: LD_VAR 0 17
44306: PUSH
44307: LD_INT 1
44309: ARRAY
44310: PPUSH
44311: CALL_OW 254
44315: PPUSH
44316: LD_INT 5
44318: PPUSH
44319: CALL_OW 272
44323: PUSH
44324: LD_VAR 0 17
44328: PUSH
44329: LD_INT 1
44331: ARRAY
44332: PPUSH
44333: CALL_OW 251
44337: PPUSH
44338: LD_VAR 0 17
44342: PUSH
44343: LD_INT 1
44345: ARRAY
44346: PPUSH
44347: CALL_OW 254
44351: PPUSH
44352: LD_INT 5
44354: PPUSH
44355: CALL_OW 273
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44364: LD_VAR 0 16
44368: PUSH
44369: LD_INT 1
44371: ARRAY
44372: PPUSH
44373: LD_VAR 0 16
44377: PUSH
44378: LD_INT 2
44380: ARRAY
44381: PPUSH
44382: CALL_OW 488
44386: IFFALSE 44417
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44388: LD_VAR 0 13
44392: PPUSH
44393: LD_VAR 0 16
44397: PUSH
44398: LD_INT 1
44400: ARRAY
44401: PPUSH
44402: LD_VAR 0 16
44406: PUSH
44407: LD_INT 2
44409: ARRAY
44410: PPUSH
44411: CALL_OW 111
// continue ;
44415: GO 43907
// end ; end ; r := GetDir ( tmp ) ;
44417: LD_ADDR_VAR 0 15
44421: PUSH
44422: LD_VAR 0 13
44426: PPUSH
44427: CALL_OW 254
44431: ST_TO_ADDR
// if r = 5 then
44432: LD_VAR 0 15
44436: PUSH
44437: LD_INT 5
44439: EQUAL
44440: IFFALSE 44450
// r := 0 ;
44442: LD_ADDR_VAR 0 15
44446: PUSH
44447: LD_INT 0
44449: ST_TO_ADDR
// for j = r to 5 do
44450: LD_ADDR_VAR 0 10
44454: PUSH
44455: DOUBLE
44456: LD_VAR 0 15
44460: DEC
44461: ST_TO_ADDR
44462: LD_INT 5
44464: PUSH
44465: FOR_TO
44466: IFFALSE 44580
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44468: LD_ADDR_VAR 0 11
44472: PUSH
44473: LD_VAR 0 13
44477: PPUSH
44478: CALL_OW 250
44482: PPUSH
44483: LD_VAR 0 10
44487: PPUSH
44488: LD_INT 2
44490: PPUSH
44491: CALL_OW 272
44495: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44496: LD_ADDR_VAR 0 12
44500: PUSH
44501: LD_VAR 0 13
44505: PPUSH
44506: CALL_OW 251
44510: PPUSH
44511: LD_VAR 0 10
44515: PPUSH
44516: LD_INT 2
44518: PPUSH
44519: CALL_OW 273
44523: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44524: LD_VAR 0 11
44528: PPUSH
44529: LD_VAR 0 12
44533: PPUSH
44534: CALL_OW 488
44538: PUSH
44539: LD_VAR 0 11
44543: PPUSH
44544: LD_VAR 0 12
44548: PPUSH
44549: CALL_OW 428
44553: NOT
44554: AND
44555: IFFALSE 44578
// begin ComMoveXY ( tmp , _x , _y ) ;
44557: LD_VAR 0 13
44561: PPUSH
44562: LD_VAR 0 11
44566: PPUSH
44567: LD_VAR 0 12
44571: PPUSH
44572: CALL_OW 111
// break ;
44576: GO 44580
// end ; end ;
44578: GO 44465
44580: POP
44581: POP
// end ; end ;
44582: GO 43907
44584: POP
44585: POP
// end ;
44586: LD_VAR 0 8
44590: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44591: LD_INT 0
44593: PPUSH
// result := true ;
44594: LD_ADDR_VAR 0 3
44598: PUSH
44599: LD_INT 1
44601: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44602: LD_VAR 0 2
44606: PUSH
44607: LD_INT 24
44609: DOUBLE
44610: EQUAL
44611: IFTRUE 44621
44613: LD_INT 33
44615: DOUBLE
44616: EQUAL
44617: IFTRUE 44621
44619: GO 44646
44621: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44622: LD_ADDR_VAR 0 3
44626: PUSH
44627: LD_INT 32
44629: PPUSH
44630: LD_VAR 0 1
44634: PPUSH
44635: CALL_OW 321
44639: PUSH
44640: LD_INT 2
44642: EQUAL
44643: ST_TO_ADDR
44644: GO 44962
44646: LD_INT 20
44648: DOUBLE
44649: EQUAL
44650: IFTRUE 44654
44652: GO 44679
44654: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44655: LD_ADDR_VAR 0 3
44659: PUSH
44660: LD_INT 6
44662: PPUSH
44663: LD_VAR 0 1
44667: PPUSH
44668: CALL_OW 321
44672: PUSH
44673: LD_INT 2
44675: EQUAL
44676: ST_TO_ADDR
44677: GO 44962
44679: LD_INT 22
44681: DOUBLE
44682: EQUAL
44683: IFTRUE 44693
44685: LD_INT 36
44687: DOUBLE
44688: EQUAL
44689: IFTRUE 44693
44691: GO 44718
44693: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44694: LD_ADDR_VAR 0 3
44698: PUSH
44699: LD_INT 15
44701: PPUSH
44702: LD_VAR 0 1
44706: PPUSH
44707: CALL_OW 321
44711: PUSH
44712: LD_INT 2
44714: EQUAL
44715: ST_TO_ADDR
44716: GO 44962
44718: LD_INT 30
44720: DOUBLE
44721: EQUAL
44722: IFTRUE 44726
44724: GO 44751
44726: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44727: LD_ADDR_VAR 0 3
44731: PUSH
44732: LD_INT 20
44734: PPUSH
44735: LD_VAR 0 1
44739: PPUSH
44740: CALL_OW 321
44744: PUSH
44745: LD_INT 2
44747: EQUAL
44748: ST_TO_ADDR
44749: GO 44962
44751: LD_INT 28
44753: DOUBLE
44754: EQUAL
44755: IFTRUE 44765
44757: LD_INT 21
44759: DOUBLE
44760: EQUAL
44761: IFTRUE 44765
44763: GO 44790
44765: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44766: LD_ADDR_VAR 0 3
44770: PUSH
44771: LD_INT 21
44773: PPUSH
44774: LD_VAR 0 1
44778: PPUSH
44779: CALL_OW 321
44783: PUSH
44784: LD_INT 2
44786: EQUAL
44787: ST_TO_ADDR
44788: GO 44962
44790: LD_INT 16
44792: DOUBLE
44793: EQUAL
44794: IFTRUE 44798
44796: GO 44823
44798: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44799: LD_ADDR_VAR 0 3
44803: PUSH
44804: LD_INT 84
44806: PPUSH
44807: LD_VAR 0 1
44811: PPUSH
44812: CALL_OW 321
44816: PUSH
44817: LD_INT 2
44819: EQUAL
44820: ST_TO_ADDR
44821: GO 44962
44823: LD_INT 19
44825: DOUBLE
44826: EQUAL
44827: IFTRUE 44837
44829: LD_INT 23
44831: DOUBLE
44832: EQUAL
44833: IFTRUE 44837
44835: GO 44862
44837: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44838: LD_ADDR_VAR 0 3
44842: PUSH
44843: LD_INT 83
44845: PPUSH
44846: LD_VAR 0 1
44850: PPUSH
44851: CALL_OW 321
44855: PUSH
44856: LD_INT 2
44858: EQUAL
44859: ST_TO_ADDR
44860: GO 44962
44862: LD_INT 17
44864: DOUBLE
44865: EQUAL
44866: IFTRUE 44870
44868: GO 44895
44870: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44871: LD_ADDR_VAR 0 3
44875: PUSH
44876: LD_INT 39
44878: PPUSH
44879: LD_VAR 0 1
44883: PPUSH
44884: CALL_OW 321
44888: PUSH
44889: LD_INT 2
44891: EQUAL
44892: ST_TO_ADDR
44893: GO 44962
44895: LD_INT 18
44897: DOUBLE
44898: EQUAL
44899: IFTRUE 44903
44901: GO 44928
44903: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44904: LD_ADDR_VAR 0 3
44908: PUSH
44909: LD_INT 40
44911: PPUSH
44912: LD_VAR 0 1
44916: PPUSH
44917: CALL_OW 321
44921: PUSH
44922: LD_INT 2
44924: EQUAL
44925: ST_TO_ADDR
44926: GO 44962
44928: LD_INT 27
44930: DOUBLE
44931: EQUAL
44932: IFTRUE 44936
44934: GO 44961
44936: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44937: LD_ADDR_VAR 0 3
44941: PUSH
44942: LD_INT 35
44944: PPUSH
44945: LD_VAR 0 1
44949: PPUSH
44950: CALL_OW 321
44954: PUSH
44955: LD_INT 2
44957: EQUAL
44958: ST_TO_ADDR
44959: GO 44962
44961: POP
// end ;
44962: LD_VAR 0 3
44966: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44967: LD_INT 0
44969: PPUSH
44970: PPUSH
44971: PPUSH
44972: PPUSH
44973: PPUSH
44974: PPUSH
44975: PPUSH
44976: PPUSH
44977: PPUSH
44978: PPUSH
44979: PPUSH
// result := false ;
44980: LD_ADDR_VAR 0 6
44984: PUSH
44985: LD_INT 0
44987: ST_TO_ADDR
// if btype = b_depot then
44988: LD_VAR 0 2
44992: PUSH
44993: LD_INT 0
44995: EQUAL
44996: IFFALSE 45008
// begin result := true ;
44998: LD_ADDR_VAR 0 6
45002: PUSH
45003: LD_INT 1
45005: ST_TO_ADDR
// exit ;
45006: GO 45834
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45008: LD_VAR 0 1
45012: NOT
45013: PUSH
45014: LD_VAR 0 1
45018: PPUSH
45019: CALL_OW 266
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: IN
45034: NOT
45035: OR
45036: PUSH
45037: LD_VAR 0 2
45041: NOT
45042: OR
45043: PUSH
45044: LD_VAR 0 5
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: LD_INT 2
45057: PUSH
45058: LD_INT 3
45060: PUSH
45061: LD_INT 4
45063: PUSH
45064: LD_INT 5
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: IN
45075: NOT
45076: OR
45077: PUSH
45078: LD_VAR 0 3
45082: PPUSH
45083: LD_VAR 0 4
45087: PPUSH
45088: CALL_OW 488
45092: NOT
45093: OR
45094: IFFALSE 45098
// exit ;
45096: GO 45834
// side := GetSide ( depot ) ;
45098: LD_ADDR_VAR 0 9
45102: PUSH
45103: LD_VAR 0 1
45107: PPUSH
45108: CALL_OW 255
45112: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45113: LD_VAR 0 9
45117: PPUSH
45118: LD_VAR 0 2
45122: PPUSH
45123: CALL 44591 0 2
45127: NOT
45128: IFFALSE 45132
// exit ;
45130: GO 45834
// pom := GetBase ( depot ) ;
45132: LD_ADDR_VAR 0 10
45136: PUSH
45137: LD_VAR 0 1
45141: PPUSH
45142: CALL_OW 274
45146: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45147: LD_ADDR_VAR 0 11
45151: PUSH
45152: LD_VAR 0 2
45156: PPUSH
45157: LD_VAR 0 1
45161: PPUSH
45162: CALL_OW 248
45166: PPUSH
45167: CALL_OW 450
45171: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45172: LD_VAR 0 10
45176: PPUSH
45177: LD_INT 1
45179: PPUSH
45180: CALL_OW 275
45184: PUSH
45185: LD_VAR 0 11
45189: PUSH
45190: LD_INT 1
45192: ARRAY
45193: GREATEREQUAL
45194: PUSH
45195: LD_VAR 0 10
45199: PPUSH
45200: LD_INT 2
45202: PPUSH
45203: CALL_OW 275
45207: PUSH
45208: LD_VAR 0 11
45212: PUSH
45213: LD_INT 2
45215: ARRAY
45216: GREATEREQUAL
45217: AND
45218: PUSH
45219: LD_VAR 0 10
45223: PPUSH
45224: LD_INT 3
45226: PPUSH
45227: CALL_OW 275
45231: PUSH
45232: LD_VAR 0 11
45236: PUSH
45237: LD_INT 3
45239: ARRAY
45240: GREATEREQUAL
45241: AND
45242: NOT
45243: IFFALSE 45247
// exit ;
45245: GO 45834
// if GetBType ( depot ) = b_depot then
45247: LD_VAR 0 1
45251: PPUSH
45252: CALL_OW 266
45256: PUSH
45257: LD_INT 0
45259: EQUAL
45260: IFFALSE 45272
// dist := 28 else
45262: LD_ADDR_VAR 0 14
45266: PUSH
45267: LD_INT 28
45269: ST_TO_ADDR
45270: GO 45280
// dist := 36 ;
45272: LD_ADDR_VAR 0 14
45276: PUSH
45277: LD_INT 36
45279: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45280: LD_VAR 0 1
45284: PPUSH
45285: LD_VAR 0 3
45289: PPUSH
45290: LD_VAR 0 4
45294: PPUSH
45295: CALL_OW 297
45299: PUSH
45300: LD_VAR 0 14
45304: GREATER
45305: IFFALSE 45309
// exit ;
45307: GO 45834
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45309: LD_ADDR_VAR 0 12
45313: PUSH
45314: LD_VAR 0 2
45318: PPUSH
45319: LD_VAR 0 3
45323: PPUSH
45324: LD_VAR 0 4
45328: PPUSH
45329: LD_VAR 0 5
45333: PPUSH
45334: LD_VAR 0 1
45338: PPUSH
45339: CALL_OW 248
45343: PPUSH
45344: LD_INT 0
45346: PPUSH
45347: CALL 45839 0 6
45351: ST_TO_ADDR
// if not hexes then
45352: LD_VAR 0 12
45356: NOT
45357: IFFALSE 45361
// exit ;
45359: GO 45834
// hex := GetHexInfo ( x , y ) ;
45361: LD_ADDR_VAR 0 15
45365: PUSH
45366: LD_VAR 0 3
45370: PPUSH
45371: LD_VAR 0 4
45375: PPUSH
45376: CALL_OW 546
45380: ST_TO_ADDR
// if hex [ 1 ] then
45381: LD_VAR 0 15
45385: PUSH
45386: LD_INT 1
45388: ARRAY
45389: IFFALSE 45393
// exit ;
45391: GO 45834
// height := hex [ 2 ] ;
45393: LD_ADDR_VAR 0 13
45397: PUSH
45398: LD_VAR 0 15
45402: PUSH
45403: LD_INT 2
45405: ARRAY
45406: ST_TO_ADDR
// for i = 1 to hexes do
45407: LD_ADDR_VAR 0 7
45411: PUSH
45412: DOUBLE
45413: LD_INT 1
45415: DEC
45416: ST_TO_ADDR
45417: LD_VAR 0 12
45421: PUSH
45422: FOR_TO
45423: IFFALSE 45753
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45425: LD_VAR 0 12
45429: PUSH
45430: LD_VAR 0 7
45434: ARRAY
45435: PUSH
45436: LD_INT 1
45438: ARRAY
45439: PPUSH
45440: LD_VAR 0 12
45444: PUSH
45445: LD_VAR 0 7
45449: ARRAY
45450: PUSH
45451: LD_INT 2
45453: ARRAY
45454: PPUSH
45455: CALL_OW 488
45459: NOT
45460: PUSH
45461: LD_VAR 0 12
45465: PUSH
45466: LD_VAR 0 7
45470: ARRAY
45471: PUSH
45472: LD_INT 1
45474: ARRAY
45475: PPUSH
45476: LD_VAR 0 12
45480: PUSH
45481: LD_VAR 0 7
45485: ARRAY
45486: PUSH
45487: LD_INT 2
45489: ARRAY
45490: PPUSH
45491: CALL_OW 428
45495: PUSH
45496: LD_INT 0
45498: GREATER
45499: OR
45500: PUSH
45501: LD_VAR 0 12
45505: PUSH
45506: LD_VAR 0 7
45510: ARRAY
45511: PUSH
45512: LD_INT 1
45514: ARRAY
45515: PPUSH
45516: LD_VAR 0 12
45520: PUSH
45521: LD_VAR 0 7
45525: ARRAY
45526: PUSH
45527: LD_INT 2
45529: ARRAY
45530: PPUSH
45531: CALL_OW 351
45535: OR
45536: IFFALSE 45542
// exit ;
45538: POP
45539: POP
45540: GO 45834
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45542: LD_ADDR_VAR 0 8
45546: PUSH
45547: LD_VAR 0 12
45551: PUSH
45552: LD_VAR 0 7
45556: ARRAY
45557: PUSH
45558: LD_INT 1
45560: ARRAY
45561: PPUSH
45562: LD_VAR 0 12
45566: PUSH
45567: LD_VAR 0 7
45571: ARRAY
45572: PUSH
45573: LD_INT 2
45575: ARRAY
45576: PPUSH
45577: CALL_OW 546
45581: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45582: LD_VAR 0 8
45586: PUSH
45587: LD_INT 1
45589: ARRAY
45590: PUSH
45591: LD_VAR 0 8
45595: PUSH
45596: LD_INT 2
45598: ARRAY
45599: PUSH
45600: LD_VAR 0 13
45604: PUSH
45605: LD_INT 2
45607: PLUS
45608: GREATER
45609: OR
45610: PUSH
45611: LD_VAR 0 8
45615: PUSH
45616: LD_INT 2
45618: ARRAY
45619: PUSH
45620: LD_VAR 0 13
45624: PUSH
45625: LD_INT 2
45627: MINUS
45628: LESS
45629: OR
45630: PUSH
45631: LD_VAR 0 8
45635: PUSH
45636: LD_INT 3
45638: ARRAY
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 8
45645: PUSH
45646: LD_INT 9
45648: PUSH
45649: LD_INT 10
45651: PUSH
45652: LD_INT 11
45654: PUSH
45655: LD_INT 12
45657: PUSH
45658: LD_INT 13
45660: PUSH
45661: LD_INT 16
45663: PUSH
45664: LD_INT 17
45666: PUSH
45667: LD_INT 18
45669: PUSH
45670: LD_INT 19
45672: PUSH
45673: LD_INT 20
45675: PUSH
45676: LD_INT 21
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: IN
45694: NOT
45695: OR
45696: PUSH
45697: LD_VAR 0 8
45701: PUSH
45702: LD_INT 5
45704: ARRAY
45705: NOT
45706: OR
45707: PUSH
45708: LD_VAR 0 8
45712: PUSH
45713: LD_INT 6
45715: ARRAY
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: LD_INT 2
45722: PUSH
45723: LD_INT 7
45725: PUSH
45726: LD_INT 9
45728: PUSH
45729: LD_INT 10
45731: PUSH
45732: LD_INT 11
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: IN
45743: NOT
45744: OR
45745: IFFALSE 45751
// exit ;
45747: POP
45748: POP
45749: GO 45834
// end ;
45751: GO 45422
45753: POP
45754: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45755: LD_VAR 0 9
45759: PPUSH
45760: LD_VAR 0 3
45764: PPUSH
45765: LD_VAR 0 4
45769: PPUSH
45770: LD_INT 20
45772: PPUSH
45773: CALL 37757 0 4
45777: PUSH
45778: LD_INT 4
45780: ARRAY
45781: IFFALSE 45785
// exit ;
45783: GO 45834
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45785: LD_VAR 0 2
45789: PUSH
45790: LD_INT 29
45792: PUSH
45793: LD_INT 30
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: IN
45800: PUSH
45801: LD_VAR 0 3
45805: PPUSH
45806: LD_VAR 0 4
45810: PPUSH
45811: LD_VAR 0 9
45815: PPUSH
45816: CALL_OW 440
45820: NOT
45821: AND
45822: IFFALSE 45826
// exit ;
45824: GO 45834
// result := true ;
45826: LD_ADDR_VAR 0 6
45830: PUSH
45831: LD_INT 1
45833: ST_TO_ADDR
// end ;
45834: LD_VAR 0 6
45838: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45839: LD_INT 0
45841: PPUSH
45842: PPUSH
45843: PPUSH
45844: PPUSH
45845: PPUSH
45846: PPUSH
45847: PPUSH
45848: PPUSH
45849: PPUSH
45850: PPUSH
45851: PPUSH
45852: PPUSH
45853: PPUSH
45854: PPUSH
45855: PPUSH
45856: PPUSH
45857: PPUSH
45858: PPUSH
45859: PPUSH
45860: PPUSH
45861: PPUSH
45862: PPUSH
45863: PPUSH
45864: PPUSH
45865: PPUSH
45866: PPUSH
45867: PPUSH
45868: PPUSH
45869: PPUSH
45870: PPUSH
45871: PPUSH
45872: PPUSH
45873: PPUSH
45874: PPUSH
45875: PPUSH
45876: PPUSH
45877: PPUSH
45878: PPUSH
45879: PPUSH
45880: PPUSH
45881: PPUSH
45882: PPUSH
45883: PPUSH
45884: PPUSH
45885: PPUSH
45886: PPUSH
45887: PPUSH
45888: PPUSH
45889: PPUSH
45890: PPUSH
45891: PPUSH
45892: PPUSH
45893: PPUSH
45894: PPUSH
45895: PPUSH
45896: PPUSH
45897: PPUSH
45898: PPUSH
// result = [ ] ;
45899: LD_ADDR_VAR 0 7
45903: PUSH
45904: EMPTY
45905: ST_TO_ADDR
// temp_list = [ ] ;
45906: LD_ADDR_VAR 0 9
45910: PUSH
45911: EMPTY
45912: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45913: LD_VAR 0 4
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: LD_INT 1
45923: PUSH
45924: LD_INT 2
45926: PUSH
45927: LD_INT 3
45929: PUSH
45930: LD_INT 4
45932: PUSH
45933: LD_INT 5
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: IN
45944: NOT
45945: PUSH
45946: LD_VAR 0 1
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: LD_INT 1
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: IN
45961: PUSH
45962: LD_VAR 0 5
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: LD_INT 2
45972: PUSH
45973: LD_INT 3
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: LIST
45980: IN
45981: NOT
45982: AND
45983: OR
45984: IFFALSE 45988
// exit ;
45986: GO 64379
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45988: LD_VAR 0 1
45992: PUSH
45993: LD_INT 6
45995: PUSH
45996: LD_INT 7
45998: PUSH
45999: LD_INT 8
46001: PUSH
46002: LD_INT 13
46004: PUSH
46005: LD_INT 12
46007: PUSH
46008: LD_INT 15
46010: PUSH
46011: LD_INT 11
46013: PUSH
46014: LD_INT 14
46016: PUSH
46017: LD_INT 10
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: IN
46031: IFFALSE 46041
// btype = b_lab ;
46033: LD_ADDR_VAR 0 1
46037: PUSH
46038: LD_INT 6
46040: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46041: LD_VAR 0 6
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: LD_INT 2
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: LIST
46059: IN
46060: NOT
46061: PUSH
46062: LD_VAR 0 1
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: LD_INT 2
46075: PUSH
46076: LD_INT 3
46078: PUSH
46079: LD_INT 6
46081: PUSH
46082: LD_INT 36
46084: PUSH
46085: LD_INT 4
46087: PUSH
46088: LD_INT 5
46090: PUSH
46091: LD_INT 31
46093: PUSH
46094: LD_INT 32
46096: PUSH
46097: LD_INT 33
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: IN
46113: NOT
46114: PUSH
46115: LD_VAR 0 6
46119: PUSH
46120: LD_INT 1
46122: EQUAL
46123: AND
46124: OR
46125: PUSH
46126: LD_VAR 0 1
46130: PUSH
46131: LD_INT 2
46133: PUSH
46134: LD_INT 3
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: IN
46141: NOT
46142: PUSH
46143: LD_VAR 0 6
46147: PUSH
46148: LD_INT 2
46150: EQUAL
46151: AND
46152: OR
46153: IFFALSE 46163
// mode = 0 ;
46155: LD_ADDR_VAR 0 6
46159: PUSH
46160: LD_INT 0
46162: ST_TO_ADDR
// case mode of 0 :
46163: LD_VAR 0 6
46167: PUSH
46168: LD_INT 0
46170: DOUBLE
46171: EQUAL
46172: IFTRUE 46176
46174: GO 57629
46176: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46177: LD_ADDR_VAR 0 11
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: LD_INT 2
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: LD_INT 2
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: LD_INT 1
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: LD_INT 2
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: LD_INT 2
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: LD_INT 3
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: LD_INT 3
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46370: LD_ADDR_VAR 0 12
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: LD_INT 1
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: LD_INT 1
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 2
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: NEG
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 2
46504: NEG
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 2
46516: NEG
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 3
46527: NEG
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 3
46538: NEG
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46566: LD_ADDR_VAR 0 13
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: LD_INT 2
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 2
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 2
46669: PUSH
46670: LD_INT 2
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: LD_INT 2
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 2
46689: NEG
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 2
46701: NEG
46702: PUSH
46703: LD_INT 2
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: NEG
46714: PUSH
46715: LD_INT 3
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 3
46725: NEG
46726: PUSH
46727: LD_INT 2
46729: NEG
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 3
46737: NEG
46738: PUSH
46739: LD_INT 3
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46765: LD_ADDR_VAR 0 14
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: LD_INT 1
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: LD_INT 2
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: LD_INT 2
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: LD_INT 3
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: LD_INT 3
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 1
46934: PUSH
46935: LD_INT 2
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46961: LD_ADDR_VAR 0 15
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: LD_INT 0
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 2
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 2
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 2
47084: NEG
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 2
47095: NEG
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 2
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 3
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 3
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47154: LD_ADDR_VAR 0 16
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: LD_INT 1
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: LD_INT 1
47227: NEG
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: LD_INT 2
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: LD_INT 1
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 2
47257: PUSH
47258: LD_INT 2
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: PUSH
47268: LD_INT 2
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: NEG
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 2
47289: NEG
47290: PUSH
47291: LD_INT 2
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 3
47301: PUSH
47302: LD_INT 2
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 3
47311: PUSH
47312: LD_INT 3
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: LD_INT 3
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47347: LD_ADDR_VAR 0 17
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: LD_INT 0
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 0
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: LD_INT 1
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: LD_INT 2
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: LD_INT 2
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 2
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 2
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 2
47482: PUSH
47483: LD_INT 2
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: LD_INT 2
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: LD_INT 2
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 2
47523: NEG
47524: PUSH
47525: LD_INT 0
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 2
47534: NEG
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 2
47546: NEG
47547: PUSH
47548: LD_INT 2
47550: NEG
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47577: LD_ADDR_VAR 0 18
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 0
47594: PUSH
47595: LD_INT 1
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: LD_INT 1
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: LD_INT 2
47662: NEG
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: LD_INT 1
47684: NEG
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 2
47702: PUSH
47703: LD_INT 1
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 2
47712: PUSH
47713: LD_INT 2
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: LD_INT 2
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: LD_INT 2
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 2
47753: NEG
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 2
47764: NEG
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 2
47776: NEG
47777: PUSH
47778: LD_INT 2
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47807: LD_ADDR_VAR 0 19
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 1
47876: NEG
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: LD_INT 2
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: LD_INT 2
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 2
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 2
47942: PUSH
47943: LD_INT 2
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: LD_INT 2
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: LD_INT 2
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 2
47983: NEG
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 2
47994: NEG
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 2
48006: NEG
48007: PUSH
48008: LD_INT 2
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48037: LD_ADDR_VAR 0 20
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: LD_INT 0
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: LD_INT 2
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: LD_INT 2
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 2
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: LD_INT 2
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 2
48213: NEG
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 2
48224: NEG
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 2
48236: NEG
48237: PUSH
48238: LD_INT 2
48240: NEG
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48267: LD_ADDR_VAR 0 21
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: LD_INT 1
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 1
48348: NEG
48349: PUSH
48350: LD_INT 2
48352: NEG
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: LD_INT 2
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 2
48402: PUSH
48403: LD_INT 2
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 2
48443: NEG
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 2
48454: NEG
48455: PUSH
48456: LD_INT 1
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 2
48466: NEG
48467: PUSH
48468: LD_INT 2
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48497: LD_ADDR_VAR 0 22
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: LD_INT 2
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 2
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 2
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: LD_INT 2
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 2
48673: NEG
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 2
48684: NEG
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 2
48696: NEG
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48727: LD_ADDR_VAR 0 23
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: LD_INT 0
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: LD_INT 1
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: LD_INT 1
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: LD_INT 2
48812: NEG
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: LD_INT 2
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 2
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: LD_INT 1
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 2
48862: PUSH
48863: LD_INT 2
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: LD_INT 2
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: LD_INT 2
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 2
48903: NEG
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 2
48914: NEG
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 2
48926: NEG
48927: PUSH
48928: LD_INT 2
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 2
48938: NEG
48939: PUSH
48940: LD_INT 3
48942: NEG
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: LD_INT 3
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: LD_INT 2
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 2
48973: PUSH
48974: LD_INT 1
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49007: LD_ADDR_VAR 0 24
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: NEG
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: LD_INT 2
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 2
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 2
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 2
49142: PUSH
49143: LD_INT 2
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: LD_INT 2
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 2
49183: NEG
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 2
49194: NEG
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 2
49206: NEG
49207: PUSH
49208: LD_INT 2
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: LD_INT 2
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 2
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 3
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 3
49250: PUSH
49251: LD_INT 2
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49283: LD_ADDR_VAR 0 25
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: LD_INT 2
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: LD_INT 2
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 2
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 2
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 2
49418: PUSH
49419: LD_INT 2
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: LD_INT 2
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: LD_INT 2
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 2
49459: NEG
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 2
49470: NEG
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 2
49482: NEG
49483: PUSH
49484: LD_INT 2
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 3
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 3
49504: PUSH
49505: LD_INT 2
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 2
49514: PUSH
49515: LD_INT 3
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: LD_INT 3
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49557: LD_ADDR_VAR 0 26
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: NEG
49639: PUSH
49640: LD_INT 2
49642: NEG
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: LD_INT 1
49664: NEG
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 2
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 2
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: LD_INT 2
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: LD_INT 2
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 2
49733: NEG
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: NEG
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 2
49756: NEG
49757: PUSH
49758: LD_INT 2
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 2
49768: PUSH
49769: LD_INT 3
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: LD_INT 3
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 2
49799: NEG
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49833: LD_ADDR_VAR 0 27
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: LD_INT 1
49906: NEG
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: LD_INT 2
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 2
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 2
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 2
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: LD_INT 2
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: LD_INT 2
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 2
50009: NEG
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 2
50020: NEG
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 2
50032: NEG
50033: PUSH
50034: LD_INT 2
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 2
50055: NEG
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 3
50066: NEG
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 3
50078: NEG
50079: PUSH
50080: LD_INT 2
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50113: LD_ADDR_VAR 0 28
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: LD_INT 1
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: LD_INT 2
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: LD_INT 2
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 2
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 2
50238: PUSH
50239: LD_INT 1
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 2
50248: PUSH
50249: LD_INT 2
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: LD_INT 2
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 0
50268: PUSH
50269: LD_INT 2
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 1
50278: NEG
50279: PUSH
50280: LD_INT 1
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 2
50289: NEG
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 2
50300: NEG
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 2
50312: NEG
50313: PUSH
50314: LD_INT 2
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 2
50324: NEG
50325: PUSH
50326: LD_INT 3
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: LD_INT 3
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 3
50348: NEG
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 3
50360: NEG
50361: PUSH
50362: LD_INT 2
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50395: LD_ADDR_VAR 0 29
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: LD_INT 1
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: LD_INT 1
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 1
50453: NEG
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: NEG
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: NEG
50477: PUSH
50478: LD_INT 2
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: LD_INT 2
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 1
50499: PUSH
50500: LD_INT 1
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 2
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 2
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: LD_INT 2
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: LD_INT 2
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 2
50561: NEG
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 2
50573: NEG
50574: PUSH
50575: LD_INT 2
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: NEG
50586: PUSH
50587: LD_INT 3
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 3
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: LD_INT 3
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: LD_INT 2
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 3
50639: NEG
50640: PUSH
50641: LD_INT 2
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50674: LD_ADDR_VAR 0 30
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: LD_INT 1
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: LD_INT 2
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: LD_INT 2
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 2
50789: PUSH
50790: LD_INT 0
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 2
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 2
50809: PUSH
50810: LD_INT 2
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 1
50819: PUSH
50820: LD_INT 2
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 2
50840: NEG
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 2
50851: NEG
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: LD_INT 3
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: LD_INT 2
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 3
50886: PUSH
50887: LD_INT 2
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 2
50896: PUSH
50897: LD_INT 3
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 2
50906: NEG
50907: PUSH
50908: LD_INT 1
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 3
50917: NEG
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50952: LD_ADDR_VAR 0 31
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 1
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: NEG
51034: PUSH
51035: LD_INT 2
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 2
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 2
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 2
51076: PUSH
51077: LD_INT 2
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: LD_INT 2
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: LD_INT 2
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 1
51106: NEG
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 2
51117: NEG
51118: PUSH
51119: LD_INT 1
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 2
51129: NEG
51130: PUSH
51131: LD_INT 2
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 2
51141: NEG
51142: PUSH
51143: LD_INT 3
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 2
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 3
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: LD_INT 3
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 3
51195: NEG
51196: PUSH
51197: LD_INT 2
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51230: LD_ADDR_VAR 0 32
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 1
51299: NEG
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: LD_INT 2
51315: NEG
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: LD_INT 2
51326: NEG
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: LD_INT 1
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 2
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 2
51355: PUSH
51356: LD_INT 2
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: LD_INT 2
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 2
51396: NEG
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 2
51407: NEG
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: LD_INT 3
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: LD_INT 2
51434: NEG
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 3
51442: PUSH
51443: LD_INT 2
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 2
51452: PUSH
51453: LD_INT 3
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 2
51462: NEG
51463: PUSH
51464: LD_INT 1
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 3
51473: NEG
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51508: LD_ADDR_VAR 0 33
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: LD_INT 1
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: NEG
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: NEG
51578: PUSH
51579: LD_INT 1
51581: NEG
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: LD_INT 2
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: LD_INT 2
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 2
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: NEG
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 2
51674: NEG
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 2
51686: NEG
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: LD_INT 3
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 2
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 3
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: LD_INT 3
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: LD_INT 2
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 3
51752: NEG
51753: PUSH
51754: LD_INT 2
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51787: LD_ADDR_VAR 0 34
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: LD_INT 1
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 1
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: LD_INT 2
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: LD_INT 2
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 2
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 2
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: LD_INT 2
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 2
51943: NEG
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 2
51954: NEG
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 2
51966: NEG
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: LD_INT 3
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: LD_INT 2
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 3
52001: PUSH
52002: LD_INT 2
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 2
52011: PUSH
52012: LD_INT 3
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 2
52021: NEG
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 3
52032: NEG
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52067: LD_ADDR_VAR 0 35
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: LD_INT 1
52140: NEG
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 2
52158: NEG
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52179: LD_ADDR_VAR 0 36
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: NEG
52238: PUSH
52239: LD_INT 0
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: LD_INT 1
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: PUSH
52262: LD_INT 2
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: LD_INT 2
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52291: LD_ADDR_VAR 0 37
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: LD_INT 1
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: LD_INT 1
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: LD_INT 1
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52403: LD_ADDR_VAR 0 38
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 1
52461: NEG
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 2
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 2
52494: NEG
52495: PUSH
52496: LD_INT 1
52498: NEG
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52515: LD_ADDR_VAR 0 39
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: LD_INT 1
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: LD_INT 1
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: LD_INT 2
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52627: LD_ADDR_VAR 0 40
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: LD_INT 0
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: LD_INT 1
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52739: LD_ADDR_VAR 0 41
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: LD_INT 1
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: LD_INT 2
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: LD_INT 2
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 1
52873: PUSH
52874: LD_INT 2
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 1
52883: NEG
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 2
52894: NEG
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 2
52905: NEG
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: LD_INT 2
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 2
52929: NEG
52930: PUSH
52931: LD_INT 3
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 2
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 3
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 3
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 3
52972: PUSH
52973: LD_INT 2
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 3
52982: PUSH
52983: LD_INT 3
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 2
52992: PUSH
52993: LD_INT 3
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 2
53002: NEG
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 3
53013: NEG
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 3
53024: NEG
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 3
53036: NEG
53037: PUSH
53038: LD_INT 2
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 3
53048: NEG
53049: PUSH
53050: LD_INT 3
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53089: LD_ADDR_VAR 0 42
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: NEG
53171: PUSH
53172: LD_INT 2
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: LD_INT 2
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 1
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 2
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 2
53214: PUSH
53215: LD_INT 2
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: LD_INT 2
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 2
53255: NEG
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 2
53267: NEG
53268: PUSH
53269: LD_INT 2
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 2
53279: NEG
53280: PUSH
53281: LD_INT 3
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: NEG
53292: PUSH
53293: LD_INT 3
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 3
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: LD_INT 2
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 3
53325: PUSH
53326: LD_INT 2
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 3
53335: PUSH
53336: LD_INT 3
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: PUSH
53346: LD_INT 3
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: PUSH
53356: LD_INT 3
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: LD_INT 3
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: LD_INT 2
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 3
53386: NEG
53387: PUSH
53388: LD_INT 2
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 3
53398: NEG
53399: PUSH
53400: LD_INT 3
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53439: LD_ADDR_VAR 0 43
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: LD_INT 2
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: LD_INT 2
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 2
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 2
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: LD_INT 2
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: LD_INT 2
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: NEG
53595: PUSH
53596: LD_INT 1
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: NEG
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 2
53616: NEG
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: LD_INT 3
53632: NEG
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: LD_INT 3
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: LD_INT 2
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 2
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 3
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 3
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: LD_INT 3
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: LD_INT 3
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: LD_INT 2
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 2
53724: NEG
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 3
53735: NEG
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 3
53746: NEG
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53787: LD_ADDR_VAR 0 44
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: LD_INT 0
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: LD_INT 2
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: PUSH
53881: LD_INT 1
53883: NEG
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 2
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 2
53901: PUSH
53902: LD_INT 1
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 2
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: LD_INT 2
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 2
53942: NEG
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 2
53953: NEG
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 2
53965: NEG
53966: PUSH
53967: LD_INT 2
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: LD_INT 3
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 2
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 3
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 3
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 3
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 3
54030: PUSH
54031: LD_INT 3
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 2
54040: PUSH
54041: LD_INT 3
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 2
54050: NEG
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 3
54061: NEG
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 3
54072: NEG
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 3
54084: NEG
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 3
54096: NEG
54097: PUSH
54098: LD_INT 3
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54137: LD_ADDR_VAR 0 45
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: LD_INT 2
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: LD_INT 2
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: PUSH
54242: LD_INT 1
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 2
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 2
54262: PUSH
54263: LD_INT 2
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: LD_INT 2
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: LD_INT 2
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 2
54303: NEG
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 2
54315: NEG
54316: PUSH
54317: LD_INT 2
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 2
54327: NEG
54328: PUSH
54329: LD_INT 3
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: LD_INT 3
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: LD_INT 3
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: PUSH
54363: LD_INT 2
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 3
54373: PUSH
54374: LD_INT 2
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 3
54383: PUSH
54384: LD_INT 3
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 2
54393: PUSH
54394: LD_INT 3
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: LD_INT 3
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: LD_INT 3
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: LD_INT 2
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 3
54434: NEG
54435: PUSH
54436: LD_INT 2
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 3
54446: NEG
54447: PUSH
54448: LD_INT 3
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54487: LD_ADDR_VAR 0 46
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: NEG
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: NEG
54569: PUSH
54570: LD_INT 2
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: LD_INT 2
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 2
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 2
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: LD_INT 2
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: LD_INT 2
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 2
54653: NEG
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 2
54664: NEG
54665: PUSH
54666: LD_INT 1
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: LD_INT 3
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: LD_INT 3
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: LD_INT 2
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 2
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 3
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 3
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: LD_INT 3
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: LD_INT 3
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: LD_INT 2
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 2
54772: NEG
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 3
54783: NEG
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 3
54794: NEG
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54835: LD_ADDR_VAR 0 47
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: LD_INT 0
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: NEG
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: LD_INT 2
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: LD_INT 2
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 2
54950: NEG
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 2
54962: NEG
54963: PUSH
54964: LD_INT 2
54966: NEG
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54986: LD_ADDR_VAR 0 48
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 0
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: LD_INT 1
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: LD_INT 2
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 2
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 2
55111: PUSH
55112: LD_INT 1
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55133: LD_ADDR_VAR 0 49
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: LD_INT 1
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: LD_INT 1
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 1
55202: NEG
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 2
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 2
55245: PUSH
55246: LD_INT 2
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: LD_INT 2
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55277: LD_ADDR_VAR 0 50
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 2
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 2
55368: PUSH
55369: LD_INT 2
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: LD_INT 2
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: LD_INT 2
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 1
55398: NEG
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55421: LD_ADDR_VAR 0 51
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 1
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: LD_INT 1
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: LD_INT 2
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: LD_INT 2
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: LD_INT 1
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 2
55533: NEG
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 2
55544: NEG
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55568: LD_ADDR_VAR 0 52
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: LD_INT 2
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 2
55672: NEG
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 2
55683: NEG
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 2
55695: NEG
55696: PUSH
55697: LD_INT 2
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55719: LD_ADDR_VAR 0 53
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 2
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: LD_INT 1
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 2
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 2
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: LD_INT 2
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: LD_INT 2
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 2
55895: NEG
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 2
55906: NEG
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 2
55918: NEG
55919: PUSH
55920: LD_INT 2
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55949: LD_ADDR_VAR 0 54
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: LD_INT 1
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 1
56030: NEG
56031: PUSH
56032: LD_INT 2
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 2
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: LD_INT 1
56056: NEG
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 2
56064: PUSH
56065: LD_INT 0
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 2
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 2
56084: PUSH
56085: LD_INT 2
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: LD_INT 2
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 2
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 2
56136: NEG
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 2
56148: NEG
56149: PUSH
56150: LD_INT 2
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56179: LD_ADDR_VAR 0 55
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 1
56260: NEG
56261: PUSH
56262: LD_INT 2
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: LD_INT 2
56275: NEG
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 2
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: LD_INT 2
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: LD_INT 2
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: LD_INT 2
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 2
56355: NEG
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 2
56366: NEG
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 2
56378: NEG
56379: PUSH
56380: LD_INT 2
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56409: LD_ADDR_VAR 0 56
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 1
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: LD_INT 2
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: LD_INT 2
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 2
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 2
56544: PUSH
56545: LD_INT 2
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: PUSH
56555: LD_INT 2
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: LD_INT 2
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 1
56574: NEG
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 2
56596: NEG
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 2
56608: NEG
56609: PUSH
56610: LD_INT 2
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56639: LD_ADDR_VAR 0 57
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: NEG
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: NEG
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: LD_INT 2
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: LD_INT 2
56735: NEG
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 2
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 2
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 2
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: LD_INT 2
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: LD_INT 2
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 2
56815: NEG
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 2
56826: NEG
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 2
56838: NEG
56839: PUSH
56840: LD_INT 2
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56869: LD_ADDR_VAR 0 58
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 1
56950: NEG
56951: PUSH
56952: LD_INT 2
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: LD_INT 2
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: LD_INT 1
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 2
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 2
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 2
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: LD_INT 2
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: LD_INT 2
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: LD_INT 1
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 2
57045: NEG
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 2
57056: NEG
57057: PUSH
57058: LD_INT 1
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 2
57068: NEG
57069: PUSH
57070: LD_INT 2
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57099: LD_ADDR_VAR 0 59
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: LD_INT 1
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: LD_INT 1
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: LD_INT 1
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57187: LD_ADDR_VAR 0 60
57191: PUSH
57192: LD_INT 0
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 0
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: LD_INT 1
57260: NEG
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57275: LD_ADDR_VAR 0 61
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 1
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: LD_INT 1
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57363: LD_ADDR_VAR 0 62
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 0
57380: PUSH
57381: LD_INT 1
57383: NEG
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 0
57411: PUSH
57412: LD_INT 1
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: LD_INT 0
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: LD_INT 1
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57451: LD_ADDR_VAR 0 63
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: LD_INT 0
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 1
57479: PUSH
57480: LD_INT 0
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: LD_INT 1
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: LD_INT 1
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 1
57509: NEG
57510: PUSH
57511: LD_INT 0
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: LD_INT 1
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57539: LD_ADDR_VAR 0 64
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: LD_INT 0
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: ST_TO_ADDR
// end ; 1 :
57627: GO 63524
57629: LD_INT 1
57631: DOUBLE
57632: EQUAL
57633: IFTRUE 57637
57635: GO 60260
57637: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57638: LD_ADDR_VAR 0 11
57642: PUSH
57643: LD_INT 1
57645: NEG
57646: PUSH
57647: LD_INT 3
57649: NEG
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: LD_INT 3
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: LD_INT 2
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: LIST
57681: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57682: LD_ADDR_VAR 0 12
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: LD_INT 1
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 3
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 3
57710: PUSH
57711: LD_INT 1
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: LIST
57722: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57723: LD_ADDR_VAR 0 13
57727: PUSH
57728: LD_INT 3
57730: PUSH
57731: LD_INT 2
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 3
57740: PUSH
57741: LD_INT 3
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 2
57750: PUSH
57751: LD_INT 3
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: LIST
57762: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57763: LD_ADDR_VAR 0 14
57767: PUSH
57768: LD_INT 1
57770: PUSH
57771: LD_INT 3
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: LD_INT 3
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: LD_INT 2
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: LIST
57803: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57804: LD_ADDR_VAR 0 15
57808: PUSH
57809: LD_INT 2
57811: NEG
57812: PUSH
57813: LD_INT 1
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 3
57822: NEG
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 3
57833: NEG
57834: PUSH
57835: LD_INT 1
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: LIST
57847: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57848: LD_ADDR_VAR 0 16
57852: PUSH
57853: LD_INT 2
57855: NEG
57856: PUSH
57857: LD_INT 3
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 3
57867: NEG
57868: PUSH
57869: LD_INT 2
57871: NEG
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 3
57879: NEG
57880: PUSH
57881: LD_INT 3
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: LIST
57893: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57894: LD_ADDR_VAR 0 17
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: LD_INT 3
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: LD_INT 3
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: PUSH
57925: LD_INT 2
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: LIST
57937: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57938: LD_ADDR_VAR 0 18
57942: PUSH
57943: LD_INT 2
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 3
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 3
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: LIST
57978: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57979: LD_ADDR_VAR 0 19
57983: PUSH
57984: LD_INT 3
57986: PUSH
57987: LD_INT 2
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 3
57996: PUSH
57997: LD_INT 3
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 2
58006: PUSH
58007: LD_INT 3
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: LIST
58018: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58019: LD_ADDR_VAR 0 20
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: LD_INT 3
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: LD_INT 3
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: LD_INT 2
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: LIST
58059: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58060: LD_ADDR_VAR 0 21
58064: PUSH
58065: LD_INT 2
58067: NEG
58068: PUSH
58069: LD_INT 1
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 3
58078: NEG
58079: PUSH
58080: LD_INT 0
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 3
58089: NEG
58090: PUSH
58091: LD_INT 1
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: LIST
58103: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58104: LD_ADDR_VAR 0 22
58108: PUSH
58109: LD_INT 2
58111: NEG
58112: PUSH
58113: LD_INT 3
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 3
58123: NEG
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 3
58135: NEG
58136: PUSH
58137: LD_INT 3
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: LIST
58149: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58150: LD_ADDR_VAR 0 23
58154: PUSH
58155: LD_INT 0
58157: PUSH
58158: LD_INT 3
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 1
58168: NEG
58169: PUSH
58170: LD_INT 4
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: PUSH
58181: LD_INT 3
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: LIST
58193: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58194: LD_ADDR_VAR 0 24
58198: PUSH
58199: LD_INT 3
58201: PUSH
58202: LD_INT 0
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 3
58211: PUSH
58212: LD_INT 1
58214: NEG
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 4
58222: PUSH
58223: LD_INT 1
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: LIST
58234: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58235: LD_ADDR_VAR 0 25
58239: PUSH
58240: LD_INT 3
58242: PUSH
58243: LD_INT 3
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 4
58252: PUSH
58253: LD_INT 3
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 3
58262: PUSH
58263: LD_INT 4
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: LIST
58274: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58275: LD_ADDR_VAR 0 26
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: LD_INT 3
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: LD_INT 4
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: LD_INT 3
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: LIST
58315: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58316: LD_ADDR_VAR 0 27
58320: PUSH
58321: LD_INT 3
58323: NEG
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 3
58334: NEG
58335: PUSH
58336: LD_INT 1
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 4
58345: NEG
58346: PUSH
58347: LD_INT 1
58349: NEG
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: LIST
58359: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58360: LD_ADDR_VAR 0 28
58364: PUSH
58365: LD_INT 3
58367: NEG
58368: PUSH
58369: LD_INT 3
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 3
58379: NEG
58380: PUSH
58381: LD_INT 4
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 4
58391: NEG
58392: PUSH
58393: LD_INT 3
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: LIST
58405: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58406: LD_ADDR_VAR 0 29
58410: PUSH
58411: LD_INT 1
58413: NEG
58414: PUSH
58415: LD_INT 3
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: LD_INT 3
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 1
58436: PUSH
58437: LD_INT 2
58439: NEG
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 1
58447: NEG
58448: PUSH
58449: LD_INT 4
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: LD_INT 4
58462: NEG
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: LD_INT 3
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 1
58481: NEG
58482: PUSH
58483: LD_INT 5
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 0
58493: PUSH
58494: LD_INT 5
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: LD_INT 4
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: LD_INT 6
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: LD_INT 6
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: PUSH
58539: LD_INT 5
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58561: LD_ADDR_VAR 0 30
58565: PUSH
58566: LD_INT 2
58568: PUSH
58569: LD_INT 1
58571: NEG
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 3
58579: PUSH
58580: LD_INT 0
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 3
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 3
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 4
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 4
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 4
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 5
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 5
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 5
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 6
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 6
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58704: LD_ADDR_VAR 0 31
58708: PUSH
58709: LD_INT 3
58711: PUSH
58712: LD_INT 2
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 3
58721: PUSH
58722: LD_INT 3
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 2
58731: PUSH
58732: LD_INT 3
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 4
58741: PUSH
58742: LD_INT 3
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 4
58751: PUSH
58752: LD_INT 4
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 3
58761: PUSH
58762: LD_INT 4
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 5
58771: PUSH
58772: LD_INT 4
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 5
58781: PUSH
58782: LD_INT 5
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 4
58791: PUSH
58792: LD_INT 5
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 6
58801: PUSH
58802: LD_INT 5
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 6
58811: PUSH
58812: LD_INT 6
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 5
58821: PUSH
58822: LD_INT 6
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58843: LD_ADDR_VAR 0 32
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: LD_INT 3
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: LD_INT 3
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: NEG
58871: PUSH
58872: LD_INT 2
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: LD_INT 4
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 0
58891: PUSH
58892: LD_INT 4
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 1
58901: NEG
58902: PUSH
58903: LD_INT 3
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 1
58912: PUSH
58913: LD_INT 5
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 0
58922: PUSH
58923: LD_INT 5
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: LD_INT 4
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 1
58943: PUSH
58944: LD_INT 6
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: LD_INT 6
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 1
58963: NEG
58964: PUSH
58965: LD_INT 5
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58986: LD_ADDR_VAR 0 33
58990: PUSH
58991: LD_INT 2
58993: NEG
58994: PUSH
58995: LD_INT 1
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 3
59004: NEG
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 3
59015: NEG
59016: PUSH
59017: LD_INT 1
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 3
59027: NEG
59028: PUSH
59029: LD_INT 1
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 4
59038: NEG
59039: PUSH
59040: LD_INT 0
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 4
59049: NEG
59050: PUSH
59051: LD_INT 1
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 4
59061: NEG
59062: PUSH
59063: LD_INT 1
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 5
59072: NEG
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 5
59083: NEG
59084: PUSH
59085: LD_INT 1
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 5
59095: NEG
59096: PUSH
59097: LD_INT 1
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 6
59106: NEG
59107: PUSH
59108: LD_INT 0
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 6
59117: NEG
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59141: LD_ADDR_VAR 0 34
59145: PUSH
59146: LD_INT 2
59148: NEG
59149: PUSH
59150: LD_INT 3
59152: NEG
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 3
59160: NEG
59161: PUSH
59162: LD_INT 2
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 3
59172: NEG
59173: PUSH
59174: LD_INT 3
59176: NEG
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 3
59184: NEG
59185: PUSH
59186: LD_INT 4
59188: NEG
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 4
59196: NEG
59197: PUSH
59198: LD_INT 3
59200: NEG
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 4
59208: NEG
59209: PUSH
59210: LD_INT 4
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 4
59220: NEG
59221: PUSH
59222: LD_INT 5
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 5
59232: NEG
59233: PUSH
59234: LD_INT 4
59236: NEG
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 5
59244: NEG
59245: PUSH
59246: LD_INT 5
59248: NEG
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 5
59256: NEG
59257: PUSH
59258: LD_INT 6
59260: NEG
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 6
59268: NEG
59269: PUSH
59270: LD_INT 5
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 6
59280: NEG
59281: PUSH
59282: LD_INT 6
59284: NEG
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59304: LD_ADDR_VAR 0 41
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: LD_INT 2
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: LD_INT 3
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: LD_INT 2
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: LIST
59347: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59348: LD_ADDR_VAR 0 42
59352: PUSH
59353: LD_INT 2
59355: PUSH
59356: LD_INT 0
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 2
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 3
59376: PUSH
59377: LD_INT 1
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: LIST
59388: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59389: LD_ADDR_VAR 0 43
59393: PUSH
59394: LD_INT 2
59396: PUSH
59397: LD_INT 2
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 3
59406: PUSH
59407: LD_INT 2
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 2
59416: PUSH
59417: LD_INT 3
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: LIST
59428: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59429: LD_ADDR_VAR 0 44
59433: PUSH
59434: LD_INT 0
59436: PUSH
59437: LD_INT 2
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: LD_INT 3
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 1
59456: NEG
59457: PUSH
59458: LD_INT 2
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: LIST
59469: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59470: LD_ADDR_VAR 0 45
59474: PUSH
59475: LD_INT 2
59477: NEG
59478: PUSH
59479: LD_INT 0
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 2
59488: NEG
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 3
59499: NEG
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: LIST
59513: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59514: LD_ADDR_VAR 0 46
59518: PUSH
59519: LD_INT 2
59521: NEG
59522: PUSH
59523: LD_INT 2
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 2
59533: NEG
59534: PUSH
59535: LD_INT 3
59537: NEG
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 3
59545: NEG
59546: PUSH
59547: LD_INT 2
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: LIST
59559: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59560: LD_ADDR_VAR 0 47
59564: PUSH
59565: LD_INT 2
59567: NEG
59568: PUSH
59569: LD_INT 3
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: NEG
59580: PUSH
59581: LD_INT 3
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59593: LD_ADDR_VAR 0 48
59597: PUSH
59598: LD_INT 1
59600: PUSH
59601: LD_INT 2
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 2
59611: PUSH
59612: LD_INT 1
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59624: LD_ADDR_VAR 0 49
59628: PUSH
59629: LD_INT 3
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 3
59641: PUSH
59642: LD_INT 2
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59653: LD_ADDR_VAR 0 50
59657: PUSH
59658: LD_INT 2
59660: PUSH
59661: LD_INT 3
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: LD_INT 3
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59682: LD_ADDR_VAR 0 51
59686: PUSH
59687: LD_INT 1
59689: NEG
59690: PUSH
59691: LD_INT 2
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 2
59700: NEG
59701: PUSH
59702: LD_INT 1
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59713: LD_ADDR_VAR 0 52
59717: PUSH
59718: LD_INT 3
59720: NEG
59721: PUSH
59722: LD_INT 1
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 3
59732: NEG
59733: PUSH
59734: LD_INT 2
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59746: LD_ADDR_VAR 0 53
59750: PUSH
59751: LD_INT 1
59753: NEG
59754: PUSH
59755: LD_INT 3
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: LD_INT 3
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 1
59776: PUSH
59777: LD_INT 2
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: LIST
59789: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59790: LD_ADDR_VAR 0 54
59794: PUSH
59795: LD_INT 2
59797: PUSH
59798: LD_INT 1
59800: NEG
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 3
59808: PUSH
59809: LD_INT 0
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 3
59818: PUSH
59819: LD_INT 1
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: LIST
59830: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59831: LD_ADDR_VAR 0 55
59835: PUSH
59836: LD_INT 3
59838: PUSH
59839: LD_INT 2
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 3
59848: PUSH
59849: LD_INT 3
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 2
59858: PUSH
59859: LD_INT 3
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: LIST
59870: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59871: LD_ADDR_VAR 0 56
59875: PUSH
59876: LD_INT 1
59878: PUSH
59879: LD_INT 3
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 0
59888: PUSH
59889: LD_INT 3
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 1
59898: NEG
59899: PUSH
59900: LD_INT 2
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: LIST
59911: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59912: LD_ADDR_VAR 0 57
59916: PUSH
59917: LD_INT 2
59919: NEG
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 3
59930: NEG
59931: PUSH
59932: LD_INT 0
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 3
59941: NEG
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: LIST
59955: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59956: LD_ADDR_VAR 0 58
59960: PUSH
59961: LD_INT 2
59963: NEG
59964: PUSH
59965: LD_INT 3
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 3
59975: NEG
59976: PUSH
59977: LD_INT 2
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 3
59987: NEG
59988: PUSH
59989: LD_INT 3
59991: NEG
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: LIST
60001: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60002: LD_ADDR_VAR 0 59
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: LD_INT 2
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: LD_INT 2
60024: NEG
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: PUSH
60033: LD_INT 1
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: LIST
60045: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60046: LD_ADDR_VAR 0 60
60050: PUSH
60051: LD_INT 1
60053: PUSH
60054: LD_INT 1
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 2
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 2
60074: PUSH
60075: LD_INT 1
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: LIST
60086: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60087: LD_ADDR_VAR 0 61
60091: PUSH
60092: LD_INT 2
60094: PUSH
60095: LD_INT 1
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 2
60104: PUSH
60105: LD_INT 2
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 1
60114: PUSH
60115: LD_INT 2
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: LIST
60126: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60127: LD_ADDR_VAR 0 62
60131: PUSH
60132: LD_INT 1
60134: PUSH
60135: LD_INT 2
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 0
60144: PUSH
60145: LD_INT 2
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: NEG
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: LIST
60167: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60168: LD_ADDR_VAR 0 63
60172: PUSH
60173: LD_INT 1
60175: NEG
60176: PUSH
60177: LD_INT 1
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 2
60186: NEG
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 2
60197: NEG
60198: PUSH
60199: LD_INT 1
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: LIST
60211: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60212: LD_ADDR_VAR 0 64
60216: PUSH
60217: LD_INT 1
60219: NEG
60220: PUSH
60221: LD_INT 2
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 2
60231: NEG
60232: PUSH
60233: LD_INT 1
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 2
60243: NEG
60244: PUSH
60245: LD_INT 2
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: LIST
60257: ST_TO_ADDR
// end ; 2 :
60258: GO 63524
60260: LD_INT 2
60262: DOUBLE
60263: EQUAL
60264: IFTRUE 60268
60266: GO 63523
60268: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60269: LD_ADDR_VAR 0 29
60273: PUSH
60274: LD_INT 4
60276: PUSH
60277: LD_INT 0
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 4
60286: PUSH
60287: LD_INT 1
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 5
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 5
60307: PUSH
60308: LD_INT 1
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 4
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 3
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 3
60337: PUSH
60338: LD_INT 1
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 3
60348: PUSH
60349: LD_INT 2
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 5
60359: PUSH
60360: LD_INT 2
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 3
60369: PUSH
60370: LD_INT 3
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 3
60379: PUSH
60380: LD_INT 2
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 4
60389: PUSH
60390: LD_INT 3
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 4
60399: PUSH
60400: LD_INT 4
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 3
60409: PUSH
60410: LD_INT 4
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 2
60419: PUSH
60420: LD_INT 3
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 2
60429: PUSH
60430: LD_INT 2
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 4
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 2
60449: PUSH
60450: LD_INT 4
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: LD_INT 4
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: LD_INT 3
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 1
60479: PUSH
60480: LD_INT 4
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 1
60489: PUSH
60490: LD_INT 5
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: LD_INT 5
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 1
60509: NEG
60510: PUSH
60511: LD_INT 4
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 1
60520: NEG
60521: PUSH
60522: LD_INT 3
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 2
60531: PUSH
60532: LD_INT 5
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 2
60541: NEG
60542: PUSH
60543: LD_INT 3
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 3
60552: NEG
60553: PUSH
60554: LD_INT 0
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 3
60563: NEG
60564: PUSH
60565: LD_INT 1
60567: NEG
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 2
60575: NEG
60576: PUSH
60577: LD_INT 0
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 2
60586: NEG
60587: PUSH
60588: LD_INT 1
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 3
60597: NEG
60598: PUSH
60599: LD_INT 1
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 4
60608: NEG
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 4
60619: NEG
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 4
60631: NEG
60632: PUSH
60633: LD_INT 2
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 2
60643: NEG
60644: PUSH
60645: LD_INT 2
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 4
60654: NEG
60655: PUSH
60656: LD_INT 4
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 4
60666: NEG
60667: PUSH
60668: LD_INT 5
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 3
60678: NEG
60679: PUSH
60680: LD_INT 4
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 3
60690: NEG
60691: PUSH
60692: LD_INT 3
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 4
60702: NEG
60703: PUSH
60704: LD_INT 3
60706: NEG
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 5
60714: NEG
60715: PUSH
60716: LD_INT 4
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 5
60726: NEG
60727: PUSH
60728: LD_INT 5
60730: NEG
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 3
60738: NEG
60739: PUSH
60740: LD_INT 5
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 5
60750: NEG
60751: PUSH
60752: LD_INT 3
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60807: LD_ADDR_VAR 0 30
60811: PUSH
60812: LD_INT 4
60814: PUSH
60815: LD_INT 4
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 4
60824: PUSH
60825: LD_INT 3
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 5
60834: PUSH
60835: LD_INT 4
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 5
60844: PUSH
60845: LD_INT 5
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 4
60854: PUSH
60855: LD_INT 5
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 3
60864: PUSH
60865: LD_INT 4
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 3
60874: PUSH
60875: LD_INT 3
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 5
60884: PUSH
60885: LD_INT 3
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 3
60894: PUSH
60895: LD_INT 5
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 0
60904: PUSH
60905: LD_INT 3
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: LD_INT 2
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 1
60924: PUSH
60925: LD_INT 3
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 1
60934: PUSH
60935: LD_INT 4
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: LD_INT 4
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 1
60954: NEG
60955: PUSH
60956: LD_INT 3
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: NEG
60966: PUSH
60967: LD_INT 2
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 2
60976: PUSH
60977: LD_INT 4
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 2
60986: NEG
60987: PUSH
60988: LD_INT 2
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 4
60997: NEG
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 4
61008: NEG
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 3
61020: NEG
61021: PUSH
61022: LD_INT 0
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 3
61031: NEG
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 4
61042: NEG
61043: PUSH
61044: LD_INT 1
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 5
61053: NEG
61054: PUSH
61055: LD_INT 0
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 5
61064: NEG
61065: PUSH
61066: LD_INT 1
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 5
61076: NEG
61077: PUSH
61078: LD_INT 2
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 3
61088: NEG
61089: PUSH
61090: LD_INT 2
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 3
61099: NEG
61100: PUSH
61101: LD_INT 3
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 3
61111: NEG
61112: PUSH
61113: LD_INT 4
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 2
61123: NEG
61124: PUSH
61125: LD_INT 3
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 2
61135: NEG
61136: PUSH
61137: LD_INT 2
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 3
61147: NEG
61148: PUSH
61149: LD_INT 2
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 4
61159: NEG
61160: PUSH
61161: LD_INT 3
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 4
61171: NEG
61172: PUSH
61173: LD_INT 4
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 2
61183: NEG
61184: PUSH
61185: LD_INT 4
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 4
61195: NEG
61196: PUSH
61197: LD_INT 2
61199: NEG
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 0
61207: PUSH
61208: LD_INT 4
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 0
61218: PUSH
61219: LD_INT 5
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: PUSH
61230: LD_INT 4
61232: NEG
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 1
61240: PUSH
61241: LD_INT 3
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 0
61251: PUSH
61252: LD_INT 3
61254: NEG
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 1
61262: NEG
61263: PUSH
61264: LD_INT 4
61266: NEG
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 1
61274: NEG
61275: PUSH
61276: LD_INT 5
61278: NEG
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 2
61286: PUSH
61287: LD_INT 3
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 2
61297: NEG
61298: PUSH
61299: LD_INT 5
61301: NEG
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61354: LD_ADDR_VAR 0 31
61358: PUSH
61359: LD_INT 0
61361: PUSH
61362: LD_INT 4
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: LD_INT 3
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 1
61381: PUSH
61382: LD_INT 4
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 1
61391: PUSH
61392: LD_INT 5
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 0
61401: PUSH
61402: LD_INT 5
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: NEG
61412: PUSH
61413: LD_INT 4
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 1
61422: NEG
61423: PUSH
61424: LD_INT 3
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 2
61433: PUSH
61434: LD_INT 5
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 2
61443: NEG
61444: PUSH
61445: LD_INT 3
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 3
61454: NEG
61455: PUSH
61456: LD_INT 0
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 3
61465: NEG
61466: PUSH
61467: LD_INT 1
61469: NEG
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 2
61477: NEG
61478: PUSH
61479: LD_INT 0
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 2
61488: NEG
61489: PUSH
61490: LD_INT 1
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 3
61499: NEG
61500: PUSH
61501: LD_INT 1
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 4
61510: NEG
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 4
61521: NEG
61522: PUSH
61523: LD_INT 1
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 4
61533: NEG
61534: PUSH
61535: LD_INT 2
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 2
61545: NEG
61546: PUSH
61547: LD_INT 2
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 4
61556: NEG
61557: PUSH
61558: LD_INT 4
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 4
61568: NEG
61569: PUSH
61570: LD_INT 5
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 3
61580: NEG
61581: PUSH
61582: LD_INT 4
61584: NEG
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 3
61592: NEG
61593: PUSH
61594: LD_INT 3
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 4
61604: NEG
61605: PUSH
61606: LD_INT 3
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 5
61616: NEG
61617: PUSH
61618: LD_INT 4
61620: NEG
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 5
61628: NEG
61629: PUSH
61630: LD_INT 5
61632: NEG
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 3
61640: NEG
61641: PUSH
61642: LD_INT 5
61644: NEG
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 5
61652: NEG
61653: PUSH
61654: LD_INT 3
61656: NEG
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: LD_INT 3
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: LD_INT 4
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: LD_INT 3
61689: NEG
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 1
61697: PUSH
61698: LD_INT 2
61700: NEG
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: LD_INT 2
61711: NEG
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 1
61719: NEG
61720: PUSH
61721: LD_INT 3
61723: NEG
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 1
61731: NEG
61732: PUSH
61733: LD_INT 4
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 2
61743: PUSH
61744: LD_INT 2
61746: NEG
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 2
61754: NEG
61755: PUSH
61756: LD_INT 4
61758: NEG
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 4
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 4
61776: PUSH
61777: LD_INT 1
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 5
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 5
61797: PUSH
61798: LD_INT 1
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 4
61807: PUSH
61808: LD_INT 1
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 3
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 3
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 3
61838: PUSH
61839: LD_INT 2
61841: NEG
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 5
61849: PUSH
61850: LD_INT 2
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61904: LD_ADDR_VAR 0 32
61908: PUSH
61909: LD_INT 4
61911: NEG
61912: PUSH
61913: LD_INT 0
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 4
61922: NEG
61923: PUSH
61924: LD_INT 1
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 3
61934: NEG
61935: PUSH
61936: LD_INT 0
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 3
61945: NEG
61946: PUSH
61947: LD_INT 1
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 4
61956: NEG
61957: PUSH
61958: LD_INT 1
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 5
61967: NEG
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 5
61978: NEG
61979: PUSH
61980: LD_INT 1
61982: NEG
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 5
61990: NEG
61991: PUSH
61992: LD_INT 2
61994: NEG
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 3
62002: NEG
62003: PUSH
62004: LD_INT 2
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 3
62013: NEG
62014: PUSH
62015: LD_INT 3
62017: NEG
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 3
62025: NEG
62026: PUSH
62027: LD_INT 4
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 2
62037: NEG
62038: PUSH
62039: LD_INT 3
62041: NEG
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 2
62049: NEG
62050: PUSH
62051: LD_INT 2
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 3
62061: NEG
62062: PUSH
62063: LD_INT 2
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 4
62073: NEG
62074: PUSH
62075: LD_INT 3
62077: NEG
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 4
62085: NEG
62086: PUSH
62087: LD_INT 4
62089: NEG
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 2
62097: NEG
62098: PUSH
62099: LD_INT 4
62101: NEG
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 4
62109: NEG
62110: PUSH
62111: LD_INT 2
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: LD_INT 4
62124: NEG
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 0
62132: PUSH
62133: LD_INT 5
62135: NEG
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 1
62143: PUSH
62144: LD_INT 4
62146: NEG
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 1
62154: PUSH
62155: LD_INT 3
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: LD_INT 3
62168: NEG
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 1
62176: NEG
62177: PUSH
62178: LD_INT 4
62180: NEG
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 1
62188: NEG
62189: PUSH
62190: LD_INT 5
62192: NEG
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 2
62200: PUSH
62201: LD_INT 3
62203: NEG
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 2
62211: NEG
62212: PUSH
62213: LD_INT 5
62215: NEG
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 3
62223: PUSH
62224: LD_INT 0
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 3
62233: PUSH
62234: LD_INT 1
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 4
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 4
62254: PUSH
62255: LD_INT 1
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 3
62264: PUSH
62265: LD_INT 1
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 2
62274: PUSH
62275: LD_INT 0
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 2
62284: PUSH
62285: LD_INT 1
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 2
62295: PUSH
62296: LD_INT 2
62298: NEG
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 4
62306: PUSH
62307: LD_INT 2
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 4
62316: PUSH
62317: LD_INT 4
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 4
62326: PUSH
62327: LD_INT 3
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 5
62336: PUSH
62337: LD_INT 4
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 5
62346: PUSH
62347: LD_INT 5
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 4
62356: PUSH
62357: LD_INT 5
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 3
62366: PUSH
62367: LD_INT 4
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 3
62376: PUSH
62377: LD_INT 3
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 5
62386: PUSH
62387: LD_INT 3
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 3
62396: PUSH
62397: LD_INT 5
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62451: LD_ADDR_VAR 0 33
62455: PUSH
62456: LD_INT 4
62458: NEG
62459: PUSH
62460: LD_INT 4
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 4
62470: NEG
62471: PUSH
62472: LD_INT 5
62474: NEG
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 3
62482: NEG
62483: PUSH
62484: LD_INT 4
62486: NEG
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 3
62494: NEG
62495: PUSH
62496: LD_INT 3
62498: NEG
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 4
62506: NEG
62507: PUSH
62508: LD_INT 3
62510: NEG
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 5
62518: NEG
62519: PUSH
62520: LD_INT 4
62522: NEG
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 5
62530: NEG
62531: PUSH
62532: LD_INT 5
62534: NEG
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 3
62542: NEG
62543: PUSH
62544: LD_INT 5
62546: NEG
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 5
62554: NEG
62555: PUSH
62556: LD_INT 3
62558: NEG
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 0
62566: PUSH
62567: LD_INT 3
62569: NEG
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: LD_INT 4
62580: NEG
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 1
62588: PUSH
62589: LD_INT 3
62591: NEG
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 1
62599: PUSH
62600: LD_INT 2
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 0
62610: PUSH
62611: LD_INT 2
62613: NEG
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 1
62621: NEG
62622: PUSH
62623: LD_INT 3
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: NEG
62634: PUSH
62635: LD_INT 4
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 2
62645: PUSH
62646: LD_INT 2
62648: NEG
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 2
62656: NEG
62657: PUSH
62658: LD_INT 4
62660: NEG
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 4
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 4
62678: PUSH
62679: LD_INT 1
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 5
62689: PUSH
62690: LD_INT 0
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 5
62699: PUSH
62700: LD_INT 1
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 4
62709: PUSH
62710: LD_INT 1
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 3
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 3
62729: PUSH
62730: LD_INT 1
62732: NEG
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 3
62740: PUSH
62741: LD_INT 2
62743: NEG
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 5
62751: PUSH
62752: LD_INT 2
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 3
62761: PUSH
62762: LD_INT 3
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 3
62771: PUSH
62772: LD_INT 2
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 4
62781: PUSH
62782: LD_INT 3
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 4
62791: PUSH
62792: LD_INT 4
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 3
62801: PUSH
62802: LD_INT 4
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 2
62811: PUSH
62812: LD_INT 3
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 2
62821: PUSH
62822: LD_INT 2
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 4
62831: PUSH
62832: LD_INT 2
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 2
62841: PUSH
62842: LD_INT 4
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 0
62851: PUSH
62852: LD_INT 4
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 0
62861: PUSH
62862: LD_INT 3
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 1
62871: PUSH
62872: LD_INT 4
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 1
62881: PUSH
62882: LD_INT 5
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 0
62891: PUSH
62892: LD_INT 5
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 1
62901: NEG
62902: PUSH
62903: LD_INT 4
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 1
62912: NEG
62913: PUSH
62914: LD_INT 3
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 2
62923: PUSH
62924: LD_INT 5
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 2
62933: NEG
62934: PUSH
62935: LD_INT 3
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62989: LD_ADDR_VAR 0 34
62993: PUSH
62994: LD_INT 0
62996: PUSH
62997: LD_INT 4
62999: NEG
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 0
63007: PUSH
63008: LD_INT 5
63010: NEG
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 1
63018: PUSH
63019: LD_INT 4
63021: NEG
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 1
63029: PUSH
63030: LD_INT 3
63032: NEG
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 0
63040: PUSH
63041: LD_INT 3
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 1
63051: NEG
63052: PUSH
63053: LD_INT 4
63055: NEG
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 1
63063: NEG
63064: PUSH
63065: LD_INT 5
63067: NEG
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 2
63075: PUSH
63076: LD_INT 3
63078: NEG
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 2
63086: NEG
63087: PUSH
63088: LD_INT 5
63090: NEG
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 3
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 3
63108: PUSH
63109: LD_INT 1
63111: NEG
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 4
63119: PUSH
63120: LD_INT 0
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 4
63129: PUSH
63130: LD_INT 1
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 3
63139: PUSH
63140: LD_INT 1
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 2
63149: PUSH
63150: LD_INT 0
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 2
63159: PUSH
63160: LD_INT 1
63162: NEG
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 2
63170: PUSH
63171: LD_INT 2
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 4
63181: PUSH
63182: LD_INT 2
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 4
63191: PUSH
63192: LD_INT 4
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 4
63201: PUSH
63202: LD_INT 3
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 5
63211: PUSH
63212: LD_INT 4
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 5
63221: PUSH
63222: LD_INT 5
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 4
63231: PUSH
63232: LD_INT 5
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 3
63241: PUSH
63242: LD_INT 4
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 3
63251: PUSH
63252: LD_INT 3
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 5
63261: PUSH
63262: LD_INT 3
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 3
63271: PUSH
63272: LD_INT 5
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 0
63281: PUSH
63282: LD_INT 3
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 0
63291: PUSH
63292: LD_INT 2
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 1
63301: PUSH
63302: LD_INT 3
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 1
63311: PUSH
63312: LD_INT 4
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: LD_INT 4
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 1
63331: NEG
63332: PUSH
63333: LD_INT 3
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 1
63342: NEG
63343: PUSH
63344: LD_INT 2
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 2
63353: PUSH
63354: LD_INT 4
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 2
63363: NEG
63364: PUSH
63365: LD_INT 2
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 4
63374: NEG
63375: PUSH
63376: LD_INT 0
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 4
63385: NEG
63386: PUSH
63387: LD_INT 1
63389: NEG
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 3
63397: NEG
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 3
63408: NEG
63409: PUSH
63410: LD_INT 1
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 4
63419: NEG
63420: PUSH
63421: LD_INT 1
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 5
63430: NEG
63431: PUSH
63432: LD_INT 0
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 5
63441: NEG
63442: PUSH
63443: LD_INT 1
63445: NEG
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 5
63453: NEG
63454: PUSH
63455: LD_INT 2
63457: NEG
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 3
63465: NEG
63466: PUSH
63467: LD_INT 2
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: ST_TO_ADDR
// end ; end ;
63521: GO 63524
63523: POP
// case btype of b_depot , b_warehouse :
63524: LD_VAR 0 1
63528: PUSH
63529: LD_INT 0
63531: DOUBLE
63532: EQUAL
63533: IFTRUE 63543
63535: LD_INT 1
63537: DOUBLE
63538: EQUAL
63539: IFTRUE 63543
63541: GO 63744
63543: POP
// case nation of nation_american :
63544: LD_VAR 0 5
63548: PUSH
63549: LD_INT 1
63551: DOUBLE
63552: EQUAL
63553: IFTRUE 63557
63555: GO 63613
63557: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63558: LD_ADDR_VAR 0 9
63562: PUSH
63563: LD_VAR 0 11
63567: PUSH
63568: LD_VAR 0 12
63572: PUSH
63573: LD_VAR 0 13
63577: PUSH
63578: LD_VAR 0 14
63582: PUSH
63583: LD_VAR 0 15
63587: PUSH
63588: LD_VAR 0 16
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: PUSH
63601: LD_VAR 0 4
63605: PUSH
63606: LD_INT 1
63608: PLUS
63609: ARRAY
63610: ST_TO_ADDR
63611: GO 63742
63613: LD_INT 2
63615: DOUBLE
63616: EQUAL
63617: IFTRUE 63621
63619: GO 63677
63621: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63622: LD_ADDR_VAR 0 9
63626: PUSH
63627: LD_VAR 0 17
63631: PUSH
63632: LD_VAR 0 18
63636: PUSH
63637: LD_VAR 0 19
63641: PUSH
63642: LD_VAR 0 20
63646: PUSH
63647: LD_VAR 0 21
63651: PUSH
63652: LD_VAR 0 22
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: PUSH
63665: LD_VAR 0 4
63669: PUSH
63670: LD_INT 1
63672: PLUS
63673: ARRAY
63674: ST_TO_ADDR
63675: GO 63742
63677: LD_INT 3
63679: DOUBLE
63680: EQUAL
63681: IFTRUE 63685
63683: GO 63741
63685: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63686: LD_ADDR_VAR 0 9
63690: PUSH
63691: LD_VAR 0 23
63695: PUSH
63696: LD_VAR 0 24
63700: PUSH
63701: LD_VAR 0 25
63705: PUSH
63706: LD_VAR 0 26
63710: PUSH
63711: LD_VAR 0 27
63715: PUSH
63716: LD_VAR 0 28
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: PUSH
63729: LD_VAR 0 4
63733: PUSH
63734: LD_INT 1
63736: PLUS
63737: ARRAY
63738: ST_TO_ADDR
63739: GO 63742
63741: POP
63742: GO 64297
63744: LD_INT 2
63746: DOUBLE
63747: EQUAL
63748: IFTRUE 63758
63750: LD_INT 3
63752: DOUBLE
63753: EQUAL
63754: IFTRUE 63758
63756: GO 63814
63758: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63759: LD_ADDR_VAR 0 9
63763: PUSH
63764: LD_VAR 0 29
63768: PUSH
63769: LD_VAR 0 30
63773: PUSH
63774: LD_VAR 0 31
63778: PUSH
63779: LD_VAR 0 32
63783: PUSH
63784: LD_VAR 0 33
63788: PUSH
63789: LD_VAR 0 34
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: PUSH
63802: LD_VAR 0 4
63806: PUSH
63807: LD_INT 1
63809: PLUS
63810: ARRAY
63811: ST_TO_ADDR
63812: GO 64297
63814: LD_INT 16
63816: DOUBLE
63817: EQUAL
63818: IFTRUE 63876
63820: LD_INT 17
63822: DOUBLE
63823: EQUAL
63824: IFTRUE 63876
63826: LD_INT 18
63828: DOUBLE
63829: EQUAL
63830: IFTRUE 63876
63832: LD_INT 19
63834: DOUBLE
63835: EQUAL
63836: IFTRUE 63876
63838: LD_INT 22
63840: DOUBLE
63841: EQUAL
63842: IFTRUE 63876
63844: LD_INT 20
63846: DOUBLE
63847: EQUAL
63848: IFTRUE 63876
63850: LD_INT 21
63852: DOUBLE
63853: EQUAL
63854: IFTRUE 63876
63856: LD_INT 23
63858: DOUBLE
63859: EQUAL
63860: IFTRUE 63876
63862: LD_INT 24
63864: DOUBLE
63865: EQUAL
63866: IFTRUE 63876
63868: LD_INT 25
63870: DOUBLE
63871: EQUAL
63872: IFTRUE 63876
63874: GO 63932
63876: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63877: LD_ADDR_VAR 0 9
63881: PUSH
63882: LD_VAR 0 35
63886: PUSH
63887: LD_VAR 0 36
63891: PUSH
63892: LD_VAR 0 37
63896: PUSH
63897: LD_VAR 0 38
63901: PUSH
63902: LD_VAR 0 39
63906: PUSH
63907: LD_VAR 0 40
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: PUSH
63920: LD_VAR 0 4
63924: PUSH
63925: LD_INT 1
63927: PLUS
63928: ARRAY
63929: ST_TO_ADDR
63930: GO 64297
63932: LD_INT 6
63934: DOUBLE
63935: EQUAL
63936: IFTRUE 63988
63938: LD_INT 7
63940: DOUBLE
63941: EQUAL
63942: IFTRUE 63988
63944: LD_INT 8
63946: DOUBLE
63947: EQUAL
63948: IFTRUE 63988
63950: LD_INT 13
63952: DOUBLE
63953: EQUAL
63954: IFTRUE 63988
63956: LD_INT 12
63958: DOUBLE
63959: EQUAL
63960: IFTRUE 63988
63962: LD_INT 15
63964: DOUBLE
63965: EQUAL
63966: IFTRUE 63988
63968: LD_INT 11
63970: DOUBLE
63971: EQUAL
63972: IFTRUE 63988
63974: LD_INT 14
63976: DOUBLE
63977: EQUAL
63978: IFTRUE 63988
63980: LD_INT 10
63982: DOUBLE
63983: EQUAL
63984: IFTRUE 63988
63986: GO 64044
63988: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63989: LD_ADDR_VAR 0 9
63993: PUSH
63994: LD_VAR 0 41
63998: PUSH
63999: LD_VAR 0 42
64003: PUSH
64004: LD_VAR 0 43
64008: PUSH
64009: LD_VAR 0 44
64013: PUSH
64014: LD_VAR 0 45
64018: PUSH
64019: LD_VAR 0 46
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: PUSH
64032: LD_VAR 0 4
64036: PUSH
64037: LD_INT 1
64039: PLUS
64040: ARRAY
64041: ST_TO_ADDR
64042: GO 64297
64044: LD_INT 36
64046: DOUBLE
64047: EQUAL
64048: IFTRUE 64052
64050: GO 64108
64052: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64053: LD_ADDR_VAR 0 9
64057: PUSH
64058: LD_VAR 0 47
64062: PUSH
64063: LD_VAR 0 48
64067: PUSH
64068: LD_VAR 0 49
64072: PUSH
64073: LD_VAR 0 50
64077: PUSH
64078: LD_VAR 0 51
64082: PUSH
64083: LD_VAR 0 52
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: PUSH
64096: LD_VAR 0 4
64100: PUSH
64101: LD_INT 1
64103: PLUS
64104: ARRAY
64105: ST_TO_ADDR
64106: GO 64297
64108: LD_INT 4
64110: DOUBLE
64111: EQUAL
64112: IFTRUE 64134
64114: LD_INT 5
64116: DOUBLE
64117: EQUAL
64118: IFTRUE 64134
64120: LD_INT 34
64122: DOUBLE
64123: EQUAL
64124: IFTRUE 64134
64126: LD_INT 37
64128: DOUBLE
64129: EQUAL
64130: IFTRUE 64134
64132: GO 64190
64134: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64135: LD_ADDR_VAR 0 9
64139: PUSH
64140: LD_VAR 0 53
64144: PUSH
64145: LD_VAR 0 54
64149: PUSH
64150: LD_VAR 0 55
64154: PUSH
64155: LD_VAR 0 56
64159: PUSH
64160: LD_VAR 0 57
64164: PUSH
64165: LD_VAR 0 58
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: PUSH
64178: LD_VAR 0 4
64182: PUSH
64183: LD_INT 1
64185: PLUS
64186: ARRAY
64187: ST_TO_ADDR
64188: GO 64297
64190: LD_INT 31
64192: DOUBLE
64193: EQUAL
64194: IFTRUE 64240
64196: LD_INT 32
64198: DOUBLE
64199: EQUAL
64200: IFTRUE 64240
64202: LD_INT 33
64204: DOUBLE
64205: EQUAL
64206: IFTRUE 64240
64208: LD_INT 27
64210: DOUBLE
64211: EQUAL
64212: IFTRUE 64240
64214: LD_INT 26
64216: DOUBLE
64217: EQUAL
64218: IFTRUE 64240
64220: LD_INT 28
64222: DOUBLE
64223: EQUAL
64224: IFTRUE 64240
64226: LD_INT 29
64228: DOUBLE
64229: EQUAL
64230: IFTRUE 64240
64232: LD_INT 30
64234: DOUBLE
64235: EQUAL
64236: IFTRUE 64240
64238: GO 64296
64240: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64241: LD_ADDR_VAR 0 9
64245: PUSH
64246: LD_VAR 0 59
64250: PUSH
64251: LD_VAR 0 60
64255: PUSH
64256: LD_VAR 0 61
64260: PUSH
64261: LD_VAR 0 62
64265: PUSH
64266: LD_VAR 0 63
64270: PUSH
64271: LD_VAR 0 64
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: PUSH
64284: LD_VAR 0 4
64288: PUSH
64289: LD_INT 1
64291: PLUS
64292: ARRAY
64293: ST_TO_ADDR
64294: GO 64297
64296: POP
// temp_list2 = [ ] ;
64297: LD_ADDR_VAR 0 10
64301: PUSH
64302: EMPTY
64303: ST_TO_ADDR
// for i in temp_list do
64304: LD_ADDR_VAR 0 8
64308: PUSH
64309: LD_VAR 0 9
64313: PUSH
64314: FOR_IN
64315: IFFALSE 64367
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64317: LD_ADDR_VAR 0 10
64321: PUSH
64322: LD_VAR 0 10
64326: PUSH
64327: LD_VAR 0 8
64331: PUSH
64332: LD_INT 1
64334: ARRAY
64335: PUSH
64336: LD_VAR 0 2
64340: PLUS
64341: PUSH
64342: LD_VAR 0 8
64346: PUSH
64347: LD_INT 2
64349: ARRAY
64350: PUSH
64351: LD_VAR 0 3
64355: PLUS
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: EMPTY
64362: LIST
64363: ADD
64364: ST_TO_ADDR
64365: GO 64314
64367: POP
64368: POP
// result = temp_list2 ;
64369: LD_ADDR_VAR 0 7
64373: PUSH
64374: LD_VAR 0 10
64378: ST_TO_ADDR
// end ;
64379: LD_VAR 0 7
64383: RET
// export function EnemyInRange ( unit , dist ) ; begin
64384: LD_INT 0
64386: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64387: LD_ADDR_VAR 0 3
64391: PUSH
64392: LD_VAR 0 1
64396: PPUSH
64397: CALL_OW 255
64401: PPUSH
64402: LD_VAR 0 1
64406: PPUSH
64407: CALL_OW 250
64411: PPUSH
64412: LD_VAR 0 1
64416: PPUSH
64417: CALL_OW 251
64421: PPUSH
64422: LD_VAR 0 2
64426: PPUSH
64427: CALL 37757 0 4
64431: PUSH
64432: LD_INT 4
64434: ARRAY
64435: ST_TO_ADDR
// end ;
64436: LD_VAR 0 3
64440: RET
// export function PlayerSeeMe ( unit ) ; begin
64441: LD_INT 0
64443: PPUSH
// result := See ( your_side , unit ) ;
64444: LD_ADDR_VAR 0 2
64448: PUSH
64449: LD_OWVAR 2
64453: PPUSH
64454: LD_VAR 0 1
64458: PPUSH
64459: CALL_OW 292
64463: ST_TO_ADDR
// end ;
64464: LD_VAR 0 2
64468: RET
// export function ReverseDir ( unit ) ; begin
64469: LD_INT 0
64471: PPUSH
// if not unit then
64472: LD_VAR 0 1
64476: NOT
64477: IFFALSE 64481
// exit ;
64479: GO 64504
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64481: LD_ADDR_VAR 0 2
64485: PUSH
64486: LD_VAR 0 1
64490: PPUSH
64491: CALL_OW 254
64495: PUSH
64496: LD_INT 3
64498: PLUS
64499: PUSH
64500: LD_INT 6
64502: MOD
64503: ST_TO_ADDR
// end ;
64504: LD_VAR 0 2
64508: RET
// export function ReverseArray ( array ) ; var i ; begin
64509: LD_INT 0
64511: PPUSH
64512: PPUSH
// if not array then
64513: LD_VAR 0 1
64517: NOT
64518: IFFALSE 64522
// exit ;
64520: GO 64577
// result := [ ] ;
64522: LD_ADDR_VAR 0 2
64526: PUSH
64527: EMPTY
64528: ST_TO_ADDR
// for i := array downto 1 do
64529: LD_ADDR_VAR 0 3
64533: PUSH
64534: DOUBLE
64535: LD_VAR 0 1
64539: INC
64540: ST_TO_ADDR
64541: LD_INT 1
64543: PUSH
64544: FOR_DOWNTO
64545: IFFALSE 64575
// result := Join ( result , array [ i ] ) ;
64547: LD_ADDR_VAR 0 2
64551: PUSH
64552: LD_VAR 0 2
64556: PPUSH
64557: LD_VAR 0 1
64561: PUSH
64562: LD_VAR 0 3
64566: ARRAY
64567: PPUSH
64568: CALL 69233 0 2
64572: ST_TO_ADDR
64573: GO 64544
64575: POP
64576: POP
// end ;
64577: LD_VAR 0 2
64581: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64582: LD_INT 0
64584: PPUSH
64585: PPUSH
64586: PPUSH
64587: PPUSH
64588: PPUSH
64589: PPUSH
// if not unit or not hexes then
64590: LD_VAR 0 1
64594: NOT
64595: PUSH
64596: LD_VAR 0 2
64600: NOT
64601: OR
64602: IFFALSE 64606
// exit ;
64604: GO 64729
// dist := 9999 ;
64606: LD_ADDR_VAR 0 5
64610: PUSH
64611: LD_INT 9999
64613: ST_TO_ADDR
// for i = 1 to hexes do
64614: LD_ADDR_VAR 0 4
64618: PUSH
64619: DOUBLE
64620: LD_INT 1
64622: DEC
64623: ST_TO_ADDR
64624: LD_VAR 0 2
64628: PUSH
64629: FOR_TO
64630: IFFALSE 64717
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64632: LD_ADDR_VAR 0 6
64636: PUSH
64637: LD_VAR 0 1
64641: PPUSH
64642: LD_VAR 0 2
64646: PUSH
64647: LD_VAR 0 4
64651: ARRAY
64652: PUSH
64653: LD_INT 1
64655: ARRAY
64656: PPUSH
64657: LD_VAR 0 2
64661: PUSH
64662: LD_VAR 0 4
64666: ARRAY
64667: PUSH
64668: LD_INT 2
64670: ARRAY
64671: PPUSH
64672: CALL_OW 297
64676: ST_TO_ADDR
// if tdist < dist then
64677: LD_VAR 0 6
64681: PUSH
64682: LD_VAR 0 5
64686: LESS
64687: IFFALSE 64715
// begin hex := hexes [ i ] ;
64689: LD_ADDR_VAR 0 8
64693: PUSH
64694: LD_VAR 0 2
64698: PUSH
64699: LD_VAR 0 4
64703: ARRAY
64704: ST_TO_ADDR
// dist := tdist ;
64705: LD_ADDR_VAR 0 5
64709: PUSH
64710: LD_VAR 0 6
64714: ST_TO_ADDR
// end ; end ;
64715: GO 64629
64717: POP
64718: POP
// result := hex ;
64719: LD_ADDR_VAR 0 3
64723: PUSH
64724: LD_VAR 0 8
64728: ST_TO_ADDR
// end ;
64729: LD_VAR 0 3
64733: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64734: LD_INT 0
64736: PPUSH
64737: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64738: LD_VAR 0 1
64742: NOT
64743: PUSH
64744: LD_VAR 0 1
64748: PUSH
64749: LD_INT 21
64751: PUSH
64752: LD_INT 2
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 23
64761: PUSH
64762: LD_INT 2
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PPUSH
64773: CALL_OW 69
64777: IN
64778: NOT
64779: OR
64780: IFFALSE 64784
// exit ;
64782: GO 64831
// for i = 1 to 3 do
64784: LD_ADDR_VAR 0 3
64788: PUSH
64789: DOUBLE
64790: LD_INT 1
64792: DEC
64793: ST_TO_ADDR
64794: LD_INT 3
64796: PUSH
64797: FOR_TO
64798: IFFALSE 64829
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64800: LD_VAR 0 1
64804: PPUSH
64805: CALL_OW 250
64809: PPUSH
64810: LD_VAR 0 1
64814: PPUSH
64815: CALL_OW 251
64819: PPUSH
64820: LD_INT 1
64822: PPUSH
64823: CALL_OW 453
64827: GO 64797
64829: POP
64830: POP
// end ;
64831: LD_VAR 0 2
64835: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64836: LD_INT 0
64838: PPUSH
64839: PPUSH
64840: PPUSH
64841: PPUSH
64842: PPUSH
64843: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64844: LD_VAR 0 1
64848: NOT
64849: PUSH
64850: LD_VAR 0 2
64854: NOT
64855: OR
64856: PUSH
64857: LD_VAR 0 1
64861: PPUSH
64862: CALL_OW 314
64866: OR
64867: IFFALSE 64871
// exit ;
64869: GO 65338
// if GetLives ( i ) < 250 then
64871: LD_VAR 0 4
64875: PPUSH
64876: CALL_OW 256
64880: PUSH
64881: LD_INT 250
64883: LESS
64884: IFFALSE 64897
// begin ComAutodestruct ( i ) ;
64886: LD_VAR 0 4
64890: PPUSH
64891: CALL 64734 0 1
// exit ;
64895: GO 65338
// end ; x := GetX ( enemy_unit ) ;
64897: LD_ADDR_VAR 0 7
64901: PUSH
64902: LD_VAR 0 2
64906: PPUSH
64907: CALL_OW 250
64911: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64912: LD_ADDR_VAR 0 8
64916: PUSH
64917: LD_VAR 0 2
64921: PPUSH
64922: CALL_OW 251
64926: ST_TO_ADDR
// if not x or not y then
64927: LD_VAR 0 7
64931: NOT
64932: PUSH
64933: LD_VAR 0 8
64937: NOT
64938: OR
64939: IFFALSE 64943
// exit ;
64941: GO 65338
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64943: LD_ADDR_VAR 0 6
64947: PUSH
64948: LD_VAR 0 7
64952: PPUSH
64953: LD_INT 0
64955: PPUSH
64956: LD_INT 4
64958: PPUSH
64959: CALL_OW 272
64963: PUSH
64964: LD_VAR 0 8
64968: PPUSH
64969: LD_INT 0
64971: PPUSH
64972: LD_INT 4
64974: PPUSH
64975: CALL_OW 273
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_VAR 0 7
64988: PPUSH
64989: LD_INT 1
64991: PPUSH
64992: LD_INT 4
64994: PPUSH
64995: CALL_OW 272
64999: PUSH
65000: LD_VAR 0 8
65004: PPUSH
65005: LD_INT 1
65007: PPUSH
65008: LD_INT 4
65010: PPUSH
65011: CALL_OW 273
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_VAR 0 7
65024: PPUSH
65025: LD_INT 2
65027: PPUSH
65028: LD_INT 4
65030: PPUSH
65031: CALL_OW 272
65035: PUSH
65036: LD_VAR 0 8
65040: PPUSH
65041: LD_INT 2
65043: PPUSH
65044: LD_INT 4
65046: PPUSH
65047: CALL_OW 273
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_VAR 0 7
65060: PPUSH
65061: LD_INT 3
65063: PPUSH
65064: LD_INT 4
65066: PPUSH
65067: CALL_OW 272
65071: PUSH
65072: LD_VAR 0 8
65076: PPUSH
65077: LD_INT 3
65079: PPUSH
65080: LD_INT 4
65082: PPUSH
65083: CALL_OW 273
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_VAR 0 7
65096: PPUSH
65097: LD_INT 4
65099: PPUSH
65100: LD_INT 4
65102: PPUSH
65103: CALL_OW 272
65107: PUSH
65108: LD_VAR 0 8
65112: PPUSH
65113: LD_INT 4
65115: PPUSH
65116: LD_INT 4
65118: PPUSH
65119: CALL_OW 273
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_VAR 0 7
65132: PPUSH
65133: LD_INT 5
65135: PPUSH
65136: LD_INT 4
65138: PPUSH
65139: CALL_OW 272
65143: PUSH
65144: LD_VAR 0 8
65148: PPUSH
65149: LD_INT 5
65151: PPUSH
65152: LD_INT 4
65154: PPUSH
65155: CALL_OW 273
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: ST_TO_ADDR
// for i = tmp downto 1 do
65172: LD_ADDR_VAR 0 4
65176: PUSH
65177: DOUBLE
65178: LD_VAR 0 6
65182: INC
65183: ST_TO_ADDR
65184: LD_INT 1
65186: PUSH
65187: FOR_DOWNTO
65188: IFFALSE 65289
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65190: LD_VAR 0 6
65194: PUSH
65195: LD_VAR 0 4
65199: ARRAY
65200: PUSH
65201: LD_INT 1
65203: ARRAY
65204: PPUSH
65205: LD_VAR 0 6
65209: PUSH
65210: LD_VAR 0 4
65214: ARRAY
65215: PUSH
65216: LD_INT 2
65218: ARRAY
65219: PPUSH
65220: CALL_OW 488
65224: NOT
65225: PUSH
65226: LD_VAR 0 6
65230: PUSH
65231: LD_VAR 0 4
65235: ARRAY
65236: PUSH
65237: LD_INT 1
65239: ARRAY
65240: PPUSH
65241: LD_VAR 0 6
65245: PUSH
65246: LD_VAR 0 4
65250: ARRAY
65251: PUSH
65252: LD_INT 2
65254: ARRAY
65255: PPUSH
65256: CALL_OW 428
65260: PUSH
65261: LD_INT 0
65263: NONEQUAL
65264: OR
65265: IFFALSE 65287
// tmp := Delete ( tmp , i ) ;
65267: LD_ADDR_VAR 0 6
65271: PUSH
65272: LD_VAR 0 6
65276: PPUSH
65277: LD_VAR 0 4
65281: PPUSH
65282: CALL_OW 3
65286: ST_TO_ADDR
65287: GO 65187
65289: POP
65290: POP
// j := GetClosestHex ( unit , tmp ) ;
65291: LD_ADDR_VAR 0 5
65295: PUSH
65296: LD_VAR 0 1
65300: PPUSH
65301: LD_VAR 0 6
65305: PPUSH
65306: CALL 64582 0 2
65310: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65311: LD_VAR 0 1
65315: PPUSH
65316: LD_VAR 0 5
65320: PUSH
65321: LD_INT 1
65323: ARRAY
65324: PPUSH
65325: LD_VAR 0 5
65329: PUSH
65330: LD_INT 2
65332: ARRAY
65333: PPUSH
65334: CALL_OW 111
// end ;
65338: LD_VAR 0 3
65342: RET
// export function PrepareApemanSoldier ( ) ; begin
65343: LD_INT 0
65345: PPUSH
// uc_nation := 0 ;
65346: LD_ADDR_OWVAR 21
65350: PUSH
65351: LD_INT 0
65353: ST_TO_ADDR
// hc_sex := sex_male ;
65354: LD_ADDR_OWVAR 27
65358: PUSH
65359: LD_INT 1
65361: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65362: LD_ADDR_OWVAR 28
65366: PUSH
65367: LD_INT 15
65369: ST_TO_ADDR
// hc_gallery :=  ;
65370: LD_ADDR_OWVAR 33
65374: PUSH
65375: LD_STRING 
65377: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65378: LD_ADDR_OWVAR 31
65382: PUSH
65383: LD_INT 0
65385: PPUSH
65386: LD_INT 3
65388: PPUSH
65389: CALL_OW 12
65393: PUSH
65394: LD_INT 0
65396: PPUSH
65397: LD_INT 3
65399: PPUSH
65400: CALL_OW 12
65404: PUSH
65405: LD_INT 0
65407: PUSH
65408: LD_INT 0
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: LIST
65415: LIST
65416: ST_TO_ADDR
// end ;
65417: LD_VAR 0 1
65421: RET
// export function PrepareApemanEngineer ( ) ; begin
65422: LD_INT 0
65424: PPUSH
// uc_nation := 0 ;
65425: LD_ADDR_OWVAR 21
65429: PUSH
65430: LD_INT 0
65432: ST_TO_ADDR
// hc_sex := sex_male ;
65433: LD_ADDR_OWVAR 27
65437: PUSH
65438: LD_INT 1
65440: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65441: LD_ADDR_OWVAR 28
65445: PUSH
65446: LD_INT 16
65448: ST_TO_ADDR
// hc_gallery :=  ;
65449: LD_ADDR_OWVAR 33
65453: PUSH
65454: LD_STRING 
65456: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65457: LD_ADDR_OWVAR 31
65461: PUSH
65462: LD_INT 0
65464: PPUSH
65465: LD_INT 3
65467: PPUSH
65468: CALL_OW 12
65472: PUSH
65473: LD_INT 0
65475: PPUSH
65476: LD_INT 3
65478: PPUSH
65479: CALL_OW 12
65483: PUSH
65484: LD_INT 0
65486: PUSH
65487: LD_INT 0
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: ST_TO_ADDR
// end ;
65496: LD_VAR 0 1
65500: RET
// export function PrepareApeman ( agressivity ) ; begin
65501: LD_INT 0
65503: PPUSH
// uc_side := 0 ;
65504: LD_ADDR_OWVAR 20
65508: PUSH
65509: LD_INT 0
65511: ST_TO_ADDR
// uc_nation := 0 ;
65512: LD_ADDR_OWVAR 21
65516: PUSH
65517: LD_INT 0
65519: ST_TO_ADDR
// hc_sex := sex_male ;
65520: LD_ADDR_OWVAR 27
65524: PUSH
65525: LD_INT 1
65527: ST_TO_ADDR
// hc_class := class_apeman ;
65528: LD_ADDR_OWVAR 28
65532: PUSH
65533: LD_INT 12
65535: ST_TO_ADDR
// hc_gallery :=  ;
65536: LD_ADDR_OWVAR 33
65540: PUSH
65541: LD_STRING 
65543: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65544: LD_ADDR_OWVAR 35
65548: PUSH
65549: LD_VAR 0 1
65553: NEG
65554: PPUSH
65555: LD_VAR 0 1
65559: PPUSH
65560: CALL_OW 12
65564: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65565: LD_ADDR_OWVAR 31
65569: PUSH
65570: LD_INT 0
65572: PPUSH
65573: LD_INT 3
65575: PPUSH
65576: CALL_OW 12
65580: PUSH
65581: LD_INT 0
65583: PPUSH
65584: LD_INT 3
65586: PPUSH
65587: CALL_OW 12
65591: PUSH
65592: LD_INT 0
65594: PUSH
65595: LD_INT 0
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: ST_TO_ADDR
// end ;
65604: LD_VAR 0 2
65608: RET
// export function PrepareTiger ( agressivity ) ; begin
65609: LD_INT 0
65611: PPUSH
// uc_side := 0 ;
65612: LD_ADDR_OWVAR 20
65616: PUSH
65617: LD_INT 0
65619: ST_TO_ADDR
// uc_nation := 0 ;
65620: LD_ADDR_OWVAR 21
65624: PUSH
65625: LD_INT 0
65627: ST_TO_ADDR
// hc_class := class_tiger ;
65628: LD_ADDR_OWVAR 28
65632: PUSH
65633: LD_INT 14
65635: ST_TO_ADDR
// hc_gallery :=  ;
65636: LD_ADDR_OWVAR 33
65640: PUSH
65641: LD_STRING 
65643: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65644: LD_ADDR_OWVAR 35
65648: PUSH
65649: LD_VAR 0 1
65653: NEG
65654: PPUSH
65655: LD_VAR 0 1
65659: PPUSH
65660: CALL_OW 12
65664: ST_TO_ADDR
// end ;
65665: LD_VAR 0 2
65669: RET
// export function PrepareEnchidna ( ) ; begin
65670: LD_INT 0
65672: PPUSH
// uc_side := 0 ;
65673: LD_ADDR_OWVAR 20
65677: PUSH
65678: LD_INT 0
65680: ST_TO_ADDR
// uc_nation := 0 ;
65681: LD_ADDR_OWVAR 21
65685: PUSH
65686: LD_INT 0
65688: ST_TO_ADDR
// hc_class := class_baggie ;
65689: LD_ADDR_OWVAR 28
65693: PUSH
65694: LD_INT 13
65696: ST_TO_ADDR
// hc_gallery :=  ;
65697: LD_ADDR_OWVAR 33
65701: PUSH
65702: LD_STRING 
65704: ST_TO_ADDR
// end ;
65705: LD_VAR 0 1
65709: RET
// export function PrepareFrog ( ) ; begin
65710: LD_INT 0
65712: PPUSH
// uc_side := 0 ;
65713: LD_ADDR_OWVAR 20
65717: PUSH
65718: LD_INT 0
65720: ST_TO_ADDR
// uc_nation := 0 ;
65721: LD_ADDR_OWVAR 21
65725: PUSH
65726: LD_INT 0
65728: ST_TO_ADDR
// hc_class := class_frog ;
65729: LD_ADDR_OWVAR 28
65733: PUSH
65734: LD_INT 19
65736: ST_TO_ADDR
// hc_gallery :=  ;
65737: LD_ADDR_OWVAR 33
65741: PUSH
65742: LD_STRING 
65744: ST_TO_ADDR
// end ;
65745: LD_VAR 0 1
65749: RET
// export function PrepareFish ( ) ; begin
65750: LD_INT 0
65752: PPUSH
// uc_side := 0 ;
65753: LD_ADDR_OWVAR 20
65757: PUSH
65758: LD_INT 0
65760: ST_TO_ADDR
// uc_nation := 0 ;
65761: LD_ADDR_OWVAR 21
65765: PUSH
65766: LD_INT 0
65768: ST_TO_ADDR
// hc_class := class_fish ;
65769: LD_ADDR_OWVAR 28
65773: PUSH
65774: LD_INT 20
65776: ST_TO_ADDR
// hc_gallery :=  ;
65777: LD_ADDR_OWVAR 33
65781: PUSH
65782: LD_STRING 
65784: ST_TO_ADDR
// end ;
65785: LD_VAR 0 1
65789: RET
// export function PrepareBird ( ) ; begin
65790: LD_INT 0
65792: PPUSH
// uc_side := 0 ;
65793: LD_ADDR_OWVAR 20
65797: PUSH
65798: LD_INT 0
65800: ST_TO_ADDR
// uc_nation := 0 ;
65801: LD_ADDR_OWVAR 21
65805: PUSH
65806: LD_INT 0
65808: ST_TO_ADDR
// hc_class := class_phororhacos ;
65809: LD_ADDR_OWVAR 28
65813: PUSH
65814: LD_INT 18
65816: ST_TO_ADDR
// hc_gallery :=  ;
65817: LD_ADDR_OWVAR 33
65821: PUSH
65822: LD_STRING 
65824: ST_TO_ADDR
// end ;
65825: LD_VAR 0 1
65829: RET
// export function PrepareHorse ( ) ; begin
65830: LD_INT 0
65832: PPUSH
// uc_side := 0 ;
65833: LD_ADDR_OWVAR 20
65837: PUSH
65838: LD_INT 0
65840: ST_TO_ADDR
// uc_nation := 0 ;
65841: LD_ADDR_OWVAR 21
65845: PUSH
65846: LD_INT 0
65848: ST_TO_ADDR
// hc_class := class_horse ;
65849: LD_ADDR_OWVAR 28
65853: PUSH
65854: LD_INT 21
65856: ST_TO_ADDR
// hc_gallery :=  ;
65857: LD_ADDR_OWVAR 33
65861: PUSH
65862: LD_STRING 
65864: ST_TO_ADDR
// end ;
65865: LD_VAR 0 1
65869: RET
// export function PrepareMastodont ( ) ; begin
65870: LD_INT 0
65872: PPUSH
// uc_side := 0 ;
65873: LD_ADDR_OWVAR 20
65877: PUSH
65878: LD_INT 0
65880: ST_TO_ADDR
// uc_nation := 0 ;
65881: LD_ADDR_OWVAR 21
65885: PUSH
65886: LD_INT 0
65888: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65889: LD_ADDR_OWVAR 37
65893: PUSH
65894: LD_INT 31
65896: ST_TO_ADDR
// vc_control := control_rider ;
65897: LD_ADDR_OWVAR 38
65901: PUSH
65902: LD_INT 4
65904: ST_TO_ADDR
// end ;
65905: LD_VAR 0 1
65909: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65910: LD_INT 0
65912: PPUSH
65913: PPUSH
65914: PPUSH
// uc_side = 0 ;
65915: LD_ADDR_OWVAR 20
65919: PUSH
65920: LD_INT 0
65922: ST_TO_ADDR
// uc_nation = 0 ;
65923: LD_ADDR_OWVAR 21
65927: PUSH
65928: LD_INT 0
65930: ST_TO_ADDR
// InitHc_All ( ) ;
65931: CALL_OW 584
// InitVc ;
65935: CALL_OW 20
// if mastodonts then
65939: LD_VAR 0 6
65943: IFFALSE 66010
// for i = 1 to mastodonts do
65945: LD_ADDR_VAR 0 11
65949: PUSH
65950: DOUBLE
65951: LD_INT 1
65953: DEC
65954: ST_TO_ADDR
65955: LD_VAR 0 6
65959: PUSH
65960: FOR_TO
65961: IFFALSE 66008
// begin vc_chassis := 31 ;
65963: LD_ADDR_OWVAR 37
65967: PUSH
65968: LD_INT 31
65970: ST_TO_ADDR
// vc_control := control_rider ;
65971: LD_ADDR_OWVAR 38
65975: PUSH
65976: LD_INT 4
65978: ST_TO_ADDR
// animal := CreateVehicle ;
65979: LD_ADDR_VAR 0 12
65983: PUSH
65984: CALL_OW 45
65988: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65989: LD_VAR 0 12
65993: PPUSH
65994: LD_VAR 0 8
65998: PPUSH
65999: LD_INT 0
66001: PPUSH
66002: CALL 68138 0 3
// end ;
66006: GO 65960
66008: POP
66009: POP
// if horses then
66010: LD_VAR 0 5
66014: IFFALSE 66081
// for i = 1 to horses do
66016: LD_ADDR_VAR 0 11
66020: PUSH
66021: DOUBLE
66022: LD_INT 1
66024: DEC
66025: ST_TO_ADDR
66026: LD_VAR 0 5
66030: PUSH
66031: FOR_TO
66032: IFFALSE 66079
// begin hc_class := 21 ;
66034: LD_ADDR_OWVAR 28
66038: PUSH
66039: LD_INT 21
66041: ST_TO_ADDR
// hc_gallery :=  ;
66042: LD_ADDR_OWVAR 33
66046: PUSH
66047: LD_STRING 
66049: ST_TO_ADDR
// animal := CreateHuman ;
66050: LD_ADDR_VAR 0 12
66054: PUSH
66055: CALL_OW 44
66059: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66060: LD_VAR 0 12
66064: PPUSH
66065: LD_VAR 0 8
66069: PPUSH
66070: LD_INT 0
66072: PPUSH
66073: CALL 68138 0 3
// end ;
66077: GO 66031
66079: POP
66080: POP
// if birds then
66081: LD_VAR 0 1
66085: IFFALSE 66152
// for i = 1 to birds do
66087: LD_ADDR_VAR 0 11
66091: PUSH
66092: DOUBLE
66093: LD_INT 1
66095: DEC
66096: ST_TO_ADDR
66097: LD_VAR 0 1
66101: PUSH
66102: FOR_TO
66103: IFFALSE 66150
// begin hc_class := 18 ;
66105: LD_ADDR_OWVAR 28
66109: PUSH
66110: LD_INT 18
66112: ST_TO_ADDR
// hc_gallery =  ;
66113: LD_ADDR_OWVAR 33
66117: PUSH
66118: LD_STRING 
66120: ST_TO_ADDR
// animal := CreateHuman ;
66121: LD_ADDR_VAR 0 12
66125: PUSH
66126: CALL_OW 44
66130: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66131: LD_VAR 0 12
66135: PPUSH
66136: LD_VAR 0 8
66140: PPUSH
66141: LD_INT 0
66143: PPUSH
66144: CALL 68138 0 3
// end ;
66148: GO 66102
66150: POP
66151: POP
// if tigers then
66152: LD_VAR 0 2
66156: IFFALSE 66240
// for i = 1 to tigers do
66158: LD_ADDR_VAR 0 11
66162: PUSH
66163: DOUBLE
66164: LD_INT 1
66166: DEC
66167: ST_TO_ADDR
66168: LD_VAR 0 2
66172: PUSH
66173: FOR_TO
66174: IFFALSE 66238
// begin hc_class = class_tiger ;
66176: LD_ADDR_OWVAR 28
66180: PUSH
66181: LD_INT 14
66183: ST_TO_ADDR
// hc_gallery =  ;
66184: LD_ADDR_OWVAR 33
66188: PUSH
66189: LD_STRING 
66191: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66192: LD_ADDR_OWVAR 35
66196: PUSH
66197: LD_INT 7
66199: NEG
66200: PPUSH
66201: LD_INT 7
66203: PPUSH
66204: CALL_OW 12
66208: ST_TO_ADDR
// animal := CreateHuman ;
66209: LD_ADDR_VAR 0 12
66213: PUSH
66214: CALL_OW 44
66218: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66219: LD_VAR 0 12
66223: PPUSH
66224: LD_VAR 0 8
66228: PPUSH
66229: LD_INT 0
66231: PPUSH
66232: CALL 68138 0 3
// end ;
66236: GO 66173
66238: POP
66239: POP
// if apemans then
66240: LD_VAR 0 3
66244: IFFALSE 66367
// for i = 1 to apemans do
66246: LD_ADDR_VAR 0 11
66250: PUSH
66251: DOUBLE
66252: LD_INT 1
66254: DEC
66255: ST_TO_ADDR
66256: LD_VAR 0 3
66260: PUSH
66261: FOR_TO
66262: IFFALSE 66365
// begin hc_class = class_apeman ;
66264: LD_ADDR_OWVAR 28
66268: PUSH
66269: LD_INT 12
66271: ST_TO_ADDR
// hc_gallery =  ;
66272: LD_ADDR_OWVAR 33
66276: PUSH
66277: LD_STRING 
66279: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66280: LD_ADDR_OWVAR 35
66284: PUSH
66285: LD_INT 2
66287: NEG
66288: PPUSH
66289: LD_INT 2
66291: PPUSH
66292: CALL_OW 12
66296: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66297: LD_ADDR_OWVAR 31
66301: PUSH
66302: LD_INT 1
66304: PPUSH
66305: LD_INT 3
66307: PPUSH
66308: CALL_OW 12
66312: PUSH
66313: LD_INT 1
66315: PPUSH
66316: LD_INT 3
66318: PPUSH
66319: CALL_OW 12
66323: PUSH
66324: LD_INT 0
66326: PUSH
66327: LD_INT 0
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: ST_TO_ADDR
// animal := CreateHuman ;
66336: LD_ADDR_VAR 0 12
66340: PUSH
66341: CALL_OW 44
66345: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66346: LD_VAR 0 12
66350: PPUSH
66351: LD_VAR 0 8
66355: PPUSH
66356: LD_INT 0
66358: PPUSH
66359: CALL 68138 0 3
// end ;
66363: GO 66261
66365: POP
66366: POP
// if enchidnas then
66367: LD_VAR 0 4
66371: IFFALSE 66438
// for i = 1 to enchidnas do
66373: LD_ADDR_VAR 0 11
66377: PUSH
66378: DOUBLE
66379: LD_INT 1
66381: DEC
66382: ST_TO_ADDR
66383: LD_VAR 0 4
66387: PUSH
66388: FOR_TO
66389: IFFALSE 66436
// begin hc_class = 13 ;
66391: LD_ADDR_OWVAR 28
66395: PUSH
66396: LD_INT 13
66398: ST_TO_ADDR
// hc_gallery =  ;
66399: LD_ADDR_OWVAR 33
66403: PUSH
66404: LD_STRING 
66406: ST_TO_ADDR
// animal := CreateHuman ;
66407: LD_ADDR_VAR 0 12
66411: PUSH
66412: CALL_OW 44
66416: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66417: LD_VAR 0 12
66421: PPUSH
66422: LD_VAR 0 8
66426: PPUSH
66427: LD_INT 0
66429: PPUSH
66430: CALL 68138 0 3
// end ;
66434: GO 66388
66436: POP
66437: POP
// if fishes then
66438: LD_VAR 0 7
66442: IFFALSE 66509
// for i = 1 to fishes do
66444: LD_ADDR_VAR 0 11
66448: PUSH
66449: DOUBLE
66450: LD_INT 1
66452: DEC
66453: ST_TO_ADDR
66454: LD_VAR 0 7
66458: PUSH
66459: FOR_TO
66460: IFFALSE 66507
// begin hc_class = 20 ;
66462: LD_ADDR_OWVAR 28
66466: PUSH
66467: LD_INT 20
66469: ST_TO_ADDR
// hc_gallery =  ;
66470: LD_ADDR_OWVAR 33
66474: PUSH
66475: LD_STRING 
66477: ST_TO_ADDR
// animal := CreateHuman ;
66478: LD_ADDR_VAR 0 12
66482: PUSH
66483: CALL_OW 44
66487: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66488: LD_VAR 0 12
66492: PPUSH
66493: LD_VAR 0 9
66497: PPUSH
66498: LD_INT 0
66500: PPUSH
66501: CALL 68138 0 3
// end ;
66505: GO 66459
66507: POP
66508: POP
// end ;
66509: LD_VAR 0 10
66513: RET
// export function WantHeal ( sci , unit ) ; begin
66514: LD_INT 0
66516: PPUSH
// if GetTaskList ( sci ) > 0 then
66517: LD_VAR 0 1
66521: PPUSH
66522: CALL_OW 437
66526: PUSH
66527: LD_INT 0
66529: GREATER
66530: IFFALSE 66600
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66532: LD_VAR 0 1
66536: PPUSH
66537: CALL_OW 437
66541: PUSH
66542: LD_INT 1
66544: ARRAY
66545: PUSH
66546: LD_INT 1
66548: ARRAY
66549: PUSH
66550: LD_STRING l
66552: EQUAL
66553: PUSH
66554: LD_VAR 0 1
66558: PPUSH
66559: CALL_OW 437
66563: PUSH
66564: LD_INT 1
66566: ARRAY
66567: PUSH
66568: LD_INT 4
66570: ARRAY
66571: PUSH
66572: LD_VAR 0 2
66576: EQUAL
66577: AND
66578: IFFALSE 66590
// result := true else
66580: LD_ADDR_VAR 0 3
66584: PUSH
66585: LD_INT 1
66587: ST_TO_ADDR
66588: GO 66598
// result := false ;
66590: LD_ADDR_VAR 0 3
66594: PUSH
66595: LD_INT 0
66597: ST_TO_ADDR
// end else
66598: GO 66608
// result := false ;
66600: LD_ADDR_VAR 0 3
66604: PUSH
66605: LD_INT 0
66607: ST_TO_ADDR
// end ;
66608: LD_VAR 0 3
66612: RET
// export function HealTarget ( sci ) ; begin
66613: LD_INT 0
66615: PPUSH
// if not sci then
66616: LD_VAR 0 1
66620: NOT
66621: IFFALSE 66625
// exit ;
66623: GO 66690
// result := 0 ;
66625: LD_ADDR_VAR 0 2
66629: PUSH
66630: LD_INT 0
66632: ST_TO_ADDR
// if GetTaskList ( sci ) then
66633: LD_VAR 0 1
66637: PPUSH
66638: CALL_OW 437
66642: IFFALSE 66690
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66644: LD_VAR 0 1
66648: PPUSH
66649: CALL_OW 437
66653: PUSH
66654: LD_INT 1
66656: ARRAY
66657: PUSH
66658: LD_INT 1
66660: ARRAY
66661: PUSH
66662: LD_STRING l
66664: EQUAL
66665: IFFALSE 66690
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66667: LD_ADDR_VAR 0 2
66671: PUSH
66672: LD_VAR 0 1
66676: PPUSH
66677: CALL_OW 437
66681: PUSH
66682: LD_INT 1
66684: ARRAY
66685: PUSH
66686: LD_INT 4
66688: ARRAY
66689: ST_TO_ADDR
// end ;
66690: LD_VAR 0 2
66694: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66695: LD_INT 0
66697: PPUSH
66698: PPUSH
66699: PPUSH
66700: PPUSH
// if not base_units then
66701: LD_VAR 0 1
66705: NOT
66706: IFFALSE 66710
// exit ;
66708: GO 66797
// result := false ;
66710: LD_ADDR_VAR 0 2
66714: PUSH
66715: LD_INT 0
66717: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66718: LD_ADDR_VAR 0 5
66722: PUSH
66723: LD_VAR 0 1
66727: PPUSH
66728: LD_INT 21
66730: PUSH
66731: LD_INT 3
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PPUSH
66738: CALL_OW 72
66742: ST_TO_ADDR
// if not tmp then
66743: LD_VAR 0 5
66747: NOT
66748: IFFALSE 66752
// exit ;
66750: GO 66797
// for i in tmp do
66752: LD_ADDR_VAR 0 3
66756: PUSH
66757: LD_VAR 0 5
66761: PUSH
66762: FOR_IN
66763: IFFALSE 66795
// begin result := EnemyInRange ( i , 22 ) ;
66765: LD_ADDR_VAR 0 2
66769: PUSH
66770: LD_VAR 0 3
66774: PPUSH
66775: LD_INT 22
66777: PPUSH
66778: CALL 64384 0 2
66782: ST_TO_ADDR
// if result then
66783: LD_VAR 0 2
66787: IFFALSE 66793
// exit ;
66789: POP
66790: POP
66791: GO 66797
// end ;
66793: GO 66762
66795: POP
66796: POP
// end ;
66797: LD_VAR 0 2
66801: RET
// export function FilterByTag ( units , tag ) ; begin
66802: LD_INT 0
66804: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66805: LD_ADDR_VAR 0 3
66809: PUSH
66810: LD_VAR 0 1
66814: PPUSH
66815: LD_INT 120
66817: PUSH
66818: LD_VAR 0 2
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PPUSH
66827: CALL_OW 72
66831: ST_TO_ADDR
// end ;
66832: LD_VAR 0 3
66836: RET
// export function IsDriver ( un ) ; begin
66837: LD_INT 0
66839: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66840: LD_ADDR_VAR 0 2
66844: PUSH
66845: LD_VAR 0 1
66849: PUSH
66850: LD_INT 55
66852: PUSH
66853: EMPTY
66854: LIST
66855: PPUSH
66856: CALL_OW 69
66860: IN
66861: ST_TO_ADDR
// end ;
66862: LD_VAR 0 2
66866: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66867: LD_INT 0
66869: PPUSH
66870: PPUSH
// list := [ ] ;
66871: LD_ADDR_VAR 0 5
66875: PUSH
66876: EMPTY
66877: ST_TO_ADDR
// case d of 0 :
66878: LD_VAR 0 3
66882: PUSH
66883: LD_INT 0
66885: DOUBLE
66886: EQUAL
66887: IFTRUE 66891
66889: GO 67024
66891: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66892: LD_ADDR_VAR 0 5
66896: PUSH
66897: LD_VAR 0 1
66901: PUSH
66902: LD_INT 4
66904: MINUS
66905: PUSH
66906: LD_VAR 0 2
66910: PUSH
66911: LD_INT 4
66913: MINUS
66914: PUSH
66915: LD_INT 2
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: LIST
66922: PUSH
66923: LD_VAR 0 1
66927: PUSH
66928: LD_INT 3
66930: MINUS
66931: PUSH
66932: LD_VAR 0 2
66936: PUSH
66937: LD_INT 1
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: LIST
66944: PUSH
66945: LD_VAR 0 1
66949: PUSH
66950: LD_INT 4
66952: PLUS
66953: PUSH
66954: LD_VAR 0 2
66958: PUSH
66959: LD_INT 4
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: LIST
66966: PUSH
66967: LD_VAR 0 1
66971: PUSH
66972: LD_INT 3
66974: PLUS
66975: PUSH
66976: LD_VAR 0 2
66980: PUSH
66981: LD_INT 3
66983: PLUS
66984: PUSH
66985: LD_INT 5
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: LIST
66992: PUSH
66993: LD_VAR 0 1
66997: PUSH
66998: LD_VAR 0 2
67002: PUSH
67003: LD_INT 4
67005: PLUS
67006: PUSH
67007: LD_INT 0
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: LIST
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: ST_TO_ADDR
// end ; 1 :
67022: GO 67722
67024: LD_INT 1
67026: DOUBLE
67027: EQUAL
67028: IFTRUE 67032
67030: GO 67165
67032: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67033: LD_ADDR_VAR 0 5
67037: PUSH
67038: LD_VAR 0 1
67042: PUSH
67043: LD_VAR 0 2
67047: PUSH
67048: LD_INT 4
67050: MINUS
67051: PUSH
67052: LD_INT 3
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: LIST
67059: PUSH
67060: LD_VAR 0 1
67064: PUSH
67065: LD_INT 3
67067: MINUS
67068: PUSH
67069: LD_VAR 0 2
67073: PUSH
67074: LD_INT 3
67076: MINUS
67077: PUSH
67078: LD_INT 2
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: LIST
67085: PUSH
67086: LD_VAR 0 1
67090: PUSH
67091: LD_INT 4
67093: MINUS
67094: PUSH
67095: LD_VAR 0 2
67099: PUSH
67100: LD_INT 1
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: LIST
67107: PUSH
67108: LD_VAR 0 1
67112: PUSH
67113: LD_VAR 0 2
67117: PUSH
67118: LD_INT 3
67120: PLUS
67121: PUSH
67122: LD_INT 0
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: LIST
67129: PUSH
67130: LD_VAR 0 1
67134: PUSH
67135: LD_INT 4
67137: PLUS
67138: PUSH
67139: LD_VAR 0 2
67143: PUSH
67144: LD_INT 4
67146: PLUS
67147: PUSH
67148: LD_INT 5
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: LIST
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: ST_TO_ADDR
// end ; 2 :
67163: GO 67722
67165: LD_INT 2
67167: DOUBLE
67168: EQUAL
67169: IFTRUE 67173
67171: GO 67302
67173: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67174: LD_ADDR_VAR 0 5
67178: PUSH
67179: LD_VAR 0 1
67183: PUSH
67184: LD_VAR 0 2
67188: PUSH
67189: LD_INT 3
67191: MINUS
67192: PUSH
67193: LD_INT 3
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: LIST
67200: PUSH
67201: LD_VAR 0 1
67205: PUSH
67206: LD_INT 4
67208: PLUS
67209: PUSH
67210: LD_VAR 0 2
67214: PUSH
67215: LD_INT 4
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: LIST
67222: PUSH
67223: LD_VAR 0 1
67227: PUSH
67228: LD_VAR 0 2
67232: PUSH
67233: LD_INT 4
67235: PLUS
67236: PUSH
67237: LD_INT 0
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: LIST
67244: PUSH
67245: LD_VAR 0 1
67249: PUSH
67250: LD_INT 3
67252: MINUS
67253: PUSH
67254: LD_VAR 0 2
67258: PUSH
67259: LD_INT 1
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: LIST
67266: PUSH
67267: LD_VAR 0 1
67271: PUSH
67272: LD_INT 4
67274: MINUS
67275: PUSH
67276: LD_VAR 0 2
67280: PUSH
67281: LD_INT 4
67283: MINUS
67284: PUSH
67285: LD_INT 2
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: LIST
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: ST_TO_ADDR
// end ; 3 :
67300: GO 67722
67302: LD_INT 3
67304: DOUBLE
67305: EQUAL
67306: IFTRUE 67310
67308: GO 67443
67310: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67311: LD_ADDR_VAR 0 5
67315: PUSH
67316: LD_VAR 0 1
67320: PUSH
67321: LD_INT 3
67323: PLUS
67324: PUSH
67325: LD_VAR 0 2
67329: PUSH
67330: LD_INT 4
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: LIST
67337: PUSH
67338: LD_VAR 0 1
67342: PUSH
67343: LD_INT 4
67345: PLUS
67346: PUSH
67347: LD_VAR 0 2
67351: PUSH
67352: LD_INT 4
67354: PLUS
67355: PUSH
67356: LD_INT 5
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: LIST
67363: PUSH
67364: LD_VAR 0 1
67368: PUSH
67369: LD_INT 4
67371: MINUS
67372: PUSH
67373: LD_VAR 0 2
67377: PUSH
67378: LD_INT 1
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: LIST
67385: PUSH
67386: LD_VAR 0 1
67390: PUSH
67391: LD_VAR 0 2
67395: PUSH
67396: LD_INT 4
67398: MINUS
67399: PUSH
67400: LD_INT 3
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: LIST
67407: PUSH
67408: LD_VAR 0 1
67412: PUSH
67413: LD_INT 3
67415: MINUS
67416: PUSH
67417: LD_VAR 0 2
67421: PUSH
67422: LD_INT 3
67424: MINUS
67425: PUSH
67426: LD_INT 2
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: LIST
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: LIST
67440: ST_TO_ADDR
// end ; 4 :
67441: GO 67722
67443: LD_INT 4
67445: DOUBLE
67446: EQUAL
67447: IFTRUE 67451
67449: GO 67584
67451: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67452: LD_ADDR_VAR 0 5
67456: PUSH
67457: LD_VAR 0 1
67461: PUSH
67462: LD_VAR 0 2
67466: PUSH
67467: LD_INT 4
67469: PLUS
67470: PUSH
67471: LD_INT 0
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: LIST
67478: PUSH
67479: LD_VAR 0 1
67483: PUSH
67484: LD_INT 3
67486: PLUS
67487: PUSH
67488: LD_VAR 0 2
67492: PUSH
67493: LD_INT 3
67495: PLUS
67496: PUSH
67497: LD_INT 5
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: LIST
67504: PUSH
67505: LD_VAR 0 1
67509: PUSH
67510: LD_INT 4
67512: PLUS
67513: PUSH
67514: LD_VAR 0 2
67518: PUSH
67519: LD_INT 4
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: LIST
67526: PUSH
67527: LD_VAR 0 1
67531: PUSH
67532: LD_VAR 0 2
67536: PUSH
67537: LD_INT 3
67539: MINUS
67540: PUSH
67541: LD_INT 3
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: LIST
67548: PUSH
67549: LD_VAR 0 1
67553: PUSH
67554: LD_INT 4
67556: MINUS
67557: PUSH
67558: LD_VAR 0 2
67562: PUSH
67563: LD_INT 4
67565: MINUS
67566: PUSH
67567: LD_INT 2
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: LIST
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: LIST
67579: LIST
67580: LIST
67581: ST_TO_ADDR
// end ; 5 :
67582: GO 67722
67584: LD_INT 5
67586: DOUBLE
67587: EQUAL
67588: IFTRUE 67592
67590: GO 67721
67592: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67593: LD_ADDR_VAR 0 5
67597: PUSH
67598: LD_VAR 0 1
67602: PUSH
67603: LD_INT 4
67605: MINUS
67606: PUSH
67607: LD_VAR 0 2
67611: PUSH
67612: LD_INT 1
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: LIST
67619: PUSH
67620: LD_VAR 0 1
67624: PUSH
67625: LD_VAR 0 2
67629: PUSH
67630: LD_INT 4
67632: MINUS
67633: PUSH
67634: LD_INT 3
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: LIST
67641: PUSH
67642: LD_VAR 0 1
67646: PUSH
67647: LD_INT 4
67649: PLUS
67650: PUSH
67651: LD_VAR 0 2
67655: PUSH
67656: LD_INT 4
67658: PLUS
67659: PUSH
67660: LD_INT 5
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: LIST
67667: PUSH
67668: LD_VAR 0 1
67672: PUSH
67673: LD_INT 3
67675: PLUS
67676: PUSH
67677: LD_VAR 0 2
67681: PUSH
67682: LD_INT 4
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: LIST
67689: PUSH
67690: LD_VAR 0 1
67694: PUSH
67695: LD_VAR 0 2
67699: PUSH
67700: LD_INT 3
67702: PLUS
67703: PUSH
67704: LD_INT 0
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: LIST
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: ST_TO_ADDR
// end ; end ;
67719: GO 67722
67721: POP
// result := list ;
67722: LD_ADDR_VAR 0 4
67726: PUSH
67727: LD_VAR 0 5
67731: ST_TO_ADDR
// end ;
67732: LD_VAR 0 4
67736: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67737: LD_INT 0
67739: PPUSH
67740: PPUSH
67741: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67742: LD_VAR 0 1
67746: NOT
67747: PUSH
67748: LD_VAR 0 2
67752: PUSH
67753: LD_INT 1
67755: PUSH
67756: LD_INT 2
67758: PUSH
67759: LD_INT 3
67761: PUSH
67762: LD_INT 4
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: IN
67771: NOT
67772: OR
67773: IFFALSE 67777
// exit ;
67775: GO 67860
// tmp := [ ] ;
67777: LD_ADDR_VAR 0 5
67781: PUSH
67782: EMPTY
67783: ST_TO_ADDR
// for i in units do
67784: LD_ADDR_VAR 0 4
67788: PUSH
67789: LD_VAR 0 1
67793: PUSH
67794: FOR_IN
67795: IFFALSE 67829
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67797: LD_ADDR_VAR 0 5
67801: PUSH
67802: LD_VAR 0 5
67806: PPUSH
67807: LD_VAR 0 4
67811: PPUSH
67812: LD_VAR 0 2
67816: PPUSH
67817: CALL_OW 259
67821: PPUSH
67822: CALL 69233 0 2
67826: ST_TO_ADDR
67827: GO 67794
67829: POP
67830: POP
// if not tmp then
67831: LD_VAR 0 5
67835: NOT
67836: IFFALSE 67840
// exit ;
67838: GO 67860
// result := SortListByListDesc ( units , tmp ) ;
67840: LD_ADDR_VAR 0 3
67844: PUSH
67845: LD_VAR 0 1
67849: PPUSH
67850: LD_VAR 0 5
67854: PPUSH
67855: CALL_OW 77
67859: ST_TO_ADDR
// end ;
67860: LD_VAR 0 3
67864: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67865: LD_INT 0
67867: PPUSH
67868: PPUSH
67869: PPUSH
// result := false ;
67870: LD_ADDR_VAR 0 3
67874: PUSH
67875: LD_INT 0
67877: ST_TO_ADDR
// if not building then
67878: LD_VAR 0 2
67882: NOT
67883: IFFALSE 67887
// exit ;
67885: GO 68025
// x := GetX ( building ) ;
67887: LD_ADDR_VAR 0 4
67891: PUSH
67892: LD_VAR 0 2
67896: PPUSH
67897: CALL_OW 250
67901: ST_TO_ADDR
// y := GetY ( building ) ;
67902: LD_ADDR_VAR 0 5
67906: PUSH
67907: LD_VAR 0 2
67911: PPUSH
67912: CALL_OW 251
67916: ST_TO_ADDR
// if not x or not y then
67917: LD_VAR 0 4
67921: NOT
67922: PUSH
67923: LD_VAR 0 5
67927: NOT
67928: OR
67929: IFFALSE 67933
// exit ;
67931: GO 68025
// if GetTaskList ( unit ) then
67933: LD_VAR 0 1
67937: PPUSH
67938: CALL_OW 437
67942: IFFALSE 68025
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67944: LD_STRING e
67946: PUSH
67947: LD_VAR 0 1
67951: PPUSH
67952: CALL_OW 437
67956: PUSH
67957: LD_INT 1
67959: ARRAY
67960: PUSH
67961: LD_INT 1
67963: ARRAY
67964: EQUAL
67965: PUSH
67966: LD_VAR 0 4
67970: PUSH
67971: LD_VAR 0 1
67975: PPUSH
67976: CALL_OW 437
67980: PUSH
67981: LD_INT 1
67983: ARRAY
67984: PUSH
67985: LD_INT 2
67987: ARRAY
67988: EQUAL
67989: AND
67990: PUSH
67991: LD_VAR 0 5
67995: PUSH
67996: LD_VAR 0 1
68000: PPUSH
68001: CALL_OW 437
68005: PUSH
68006: LD_INT 1
68008: ARRAY
68009: PUSH
68010: LD_INT 3
68012: ARRAY
68013: EQUAL
68014: AND
68015: IFFALSE 68025
// result := true end ;
68017: LD_ADDR_VAR 0 3
68021: PUSH
68022: LD_INT 1
68024: ST_TO_ADDR
// end ;
68025: LD_VAR 0 3
68029: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68030: LD_INT 0
68032: PPUSH
// result := false ;
68033: LD_ADDR_VAR 0 4
68037: PUSH
68038: LD_INT 0
68040: ST_TO_ADDR
// if GetTaskList ( unit ) then
68041: LD_VAR 0 1
68045: PPUSH
68046: CALL_OW 437
68050: IFFALSE 68133
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68052: LD_STRING M
68054: PUSH
68055: LD_VAR 0 1
68059: PPUSH
68060: CALL_OW 437
68064: PUSH
68065: LD_INT 1
68067: ARRAY
68068: PUSH
68069: LD_INT 1
68071: ARRAY
68072: EQUAL
68073: PUSH
68074: LD_VAR 0 2
68078: PUSH
68079: LD_VAR 0 1
68083: PPUSH
68084: CALL_OW 437
68088: PUSH
68089: LD_INT 1
68091: ARRAY
68092: PUSH
68093: LD_INT 2
68095: ARRAY
68096: EQUAL
68097: AND
68098: PUSH
68099: LD_VAR 0 3
68103: PUSH
68104: LD_VAR 0 1
68108: PPUSH
68109: CALL_OW 437
68113: PUSH
68114: LD_INT 1
68116: ARRAY
68117: PUSH
68118: LD_INT 3
68120: ARRAY
68121: EQUAL
68122: AND
68123: IFFALSE 68133
// result := true ;
68125: LD_ADDR_VAR 0 4
68129: PUSH
68130: LD_INT 1
68132: ST_TO_ADDR
// end ; end ;
68133: LD_VAR 0 4
68137: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68138: LD_INT 0
68140: PPUSH
68141: PPUSH
68142: PPUSH
68143: PPUSH
// if not unit or not area then
68144: LD_VAR 0 1
68148: NOT
68149: PUSH
68150: LD_VAR 0 2
68154: NOT
68155: OR
68156: IFFALSE 68160
// exit ;
68158: GO 68336
// tmp := AreaToList ( area , i ) ;
68160: LD_ADDR_VAR 0 6
68164: PUSH
68165: LD_VAR 0 2
68169: PPUSH
68170: LD_VAR 0 5
68174: PPUSH
68175: CALL_OW 517
68179: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68180: LD_ADDR_VAR 0 5
68184: PUSH
68185: DOUBLE
68186: LD_INT 1
68188: DEC
68189: ST_TO_ADDR
68190: LD_VAR 0 6
68194: PUSH
68195: LD_INT 1
68197: ARRAY
68198: PUSH
68199: FOR_TO
68200: IFFALSE 68334
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68202: LD_ADDR_VAR 0 7
68206: PUSH
68207: LD_VAR 0 6
68211: PUSH
68212: LD_INT 1
68214: ARRAY
68215: PUSH
68216: LD_VAR 0 5
68220: ARRAY
68221: PUSH
68222: LD_VAR 0 6
68226: PUSH
68227: LD_INT 2
68229: ARRAY
68230: PUSH
68231: LD_VAR 0 5
68235: ARRAY
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68241: LD_INT 92
68243: PUSH
68244: LD_VAR 0 7
68248: PUSH
68249: LD_INT 1
68251: ARRAY
68252: PUSH
68253: LD_VAR 0 7
68257: PUSH
68258: LD_INT 2
68260: ARRAY
68261: PUSH
68262: LD_INT 2
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: PPUSH
68271: CALL_OW 69
68275: PUSH
68276: LD_INT 0
68278: EQUAL
68279: IFFALSE 68332
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68281: LD_VAR 0 1
68285: PPUSH
68286: LD_VAR 0 7
68290: PUSH
68291: LD_INT 1
68293: ARRAY
68294: PPUSH
68295: LD_VAR 0 7
68299: PUSH
68300: LD_INT 2
68302: ARRAY
68303: PPUSH
68304: LD_VAR 0 3
68308: PPUSH
68309: CALL_OW 48
// result := IsPlaced ( unit ) ;
68313: LD_ADDR_VAR 0 4
68317: PUSH
68318: LD_VAR 0 1
68322: PPUSH
68323: CALL_OW 305
68327: ST_TO_ADDR
// exit ;
68328: POP
68329: POP
68330: GO 68336
// end ; end ;
68332: GO 68199
68334: POP
68335: POP
// end ;
68336: LD_VAR 0 4
68340: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68341: LD_INT 0
68343: PPUSH
68344: PPUSH
68345: PPUSH
// if not side or side > 8 then
68346: LD_VAR 0 1
68350: NOT
68351: PUSH
68352: LD_VAR 0 1
68356: PUSH
68357: LD_INT 8
68359: GREATER
68360: OR
68361: IFFALSE 68365
// exit ;
68363: GO 68552
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68365: LD_ADDR_VAR 0 4
68369: PUSH
68370: LD_INT 22
68372: PUSH
68373: LD_VAR 0 1
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 21
68384: PUSH
68385: LD_INT 3
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PPUSH
68396: CALL_OW 69
68400: ST_TO_ADDR
// if not tmp then
68401: LD_VAR 0 4
68405: NOT
68406: IFFALSE 68410
// exit ;
68408: GO 68552
// enable_addtolog := true ;
68410: LD_ADDR_OWVAR 81
68414: PUSH
68415: LD_INT 1
68417: ST_TO_ADDR
// AddToLog ( [ ) ;
68418: LD_STRING [
68420: PPUSH
68421: CALL_OW 561
// for i in tmp do
68425: LD_ADDR_VAR 0 3
68429: PUSH
68430: LD_VAR 0 4
68434: PUSH
68435: FOR_IN
68436: IFFALSE 68543
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68438: LD_STRING [
68440: PUSH
68441: LD_VAR 0 3
68445: PPUSH
68446: CALL_OW 266
68450: STR
68451: PUSH
68452: LD_STRING , 
68454: STR
68455: PUSH
68456: LD_VAR 0 3
68460: PPUSH
68461: CALL_OW 250
68465: STR
68466: PUSH
68467: LD_STRING , 
68469: STR
68470: PUSH
68471: LD_VAR 0 3
68475: PPUSH
68476: CALL_OW 251
68480: STR
68481: PUSH
68482: LD_STRING , 
68484: STR
68485: PUSH
68486: LD_VAR 0 3
68490: PPUSH
68491: CALL_OW 254
68495: STR
68496: PUSH
68497: LD_STRING , 
68499: STR
68500: PUSH
68501: LD_VAR 0 3
68505: PPUSH
68506: LD_INT 1
68508: PPUSH
68509: CALL_OW 268
68513: STR
68514: PUSH
68515: LD_STRING , 
68517: STR
68518: PUSH
68519: LD_VAR 0 3
68523: PPUSH
68524: LD_INT 2
68526: PPUSH
68527: CALL_OW 268
68531: STR
68532: PUSH
68533: LD_STRING ],
68535: STR
68536: PPUSH
68537: CALL_OW 561
// end ;
68541: GO 68435
68543: POP
68544: POP
// AddToLog ( ]; ) ;
68545: LD_STRING ];
68547: PPUSH
68548: CALL_OW 561
// end ;
68552: LD_VAR 0 2
68556: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68557: LD_INT 0
68559: PPUSH
68560: PPUSH
68561: PPUSH
68562: PPUSH
68563: PPUSH
// if not area or not rate or not max then
68564: LD_VAR 0 1
68568: NOT
68569: PUSH
68570: LD_VAR 0 2
68574: NOT
68575: OR
68576: PUSH
68577: LD_VAR 0 4
68581: NOT
68582: OR
68583: IFFALSE 68587
// exit ;
68585: GO 68776
// while 1 do
68587: LD_INT 1
68589: IFFALSE 68776
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68591: LD_ADDR_VAR 0 9
68595: PUSH
68596: LD_VAR 0 1
68600: PPUSH
68601: LD_INT 1
68603: PPUSH
68604: CALL_OW 287
68608: PUSH
68609: LD_INT 10
68611: MUL
68612: ST_TO_ADDR
// r := rate / 10 ;
68613: LD_ADDR_VAR 0 7
68617: PUSH
68618: LD_VAR 0 2
68622: PUSH
68623: LD_INT 10
68625: DIVREAL
68626: ST_TO_ADDR
// time := 1 1$00 ;
68627: LD_ADDR_VAR 0 8
68631: PUSH
68632: LD_INT 2100
68634: ST_TO_ADDR
// if amount < min then
68635: LD_VAR 0 9
68639: PUSH
68640: LD_VAR 0 3
68644: LESS
68645: IFFALSE 68663
// r := r * 2 else
68647: LD_ADDR_VAR 0 7
68651: PUSH
68652: LD_VAR 0 7
68656: PUSH
68657: LD_INT 2
68659: MUL
68660: ST_TO_ADDR
68661: GO 68689
// if amount > max then
68663: LD_VAR 0 9
68667: PUSH
68668: LD_VAR 0 4
68672: GREATER
68673: IFFALSE 68689
// r := r / 2 ;
68675: LD_ADDR_VAR 0 7
68679: PUSH
68680: LD_VAR 0 7
68684: PUSH
68685: LD_INT 2
68687: DIVREAL
68688: ST_TO_ADDR
// time := time / r ;
68689: LD_ADDR_VAR 0 8
68693: PUSH
68694: LD_VAR 0 8
68698: PUSH
68699: LD_VAR 0 7
68703: DIVREAL
68704: ST_TO_ADDR
// if time < 0 then
68705: LD_VAR 0 8
68709: PUSH
68710: LD_INT 0
68712: LESS
68713: IFFALSE 68730
// time := time * - 1 ;
68715: LD_ADDR_VAR 0 8
68719: PUSH
68720: LD_VAR 0 8
68724: PUSH
68725: LD_INT 1
68727: NEG
68728: MUL
68729: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68730: LD_VAR 0 8
68734: PUSH
68735: LD_INT 35
68737: PPUSH
68738: LD_INT 875
68740: PPUSH
68741: CALL_OW 12
68745: PLUS
68746: PPUSH
68747: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68751: LD_INT 1
68753: PPUSH
68754: LD_INT 5
68756: PPUSH
68757: CALL_OW 12
68761: PPUSH
68762: LD_VAR 0 1
68766: PPUSH
68767: LD_INT 1
68769: PPUSH
68770: CALL_OW 55
// end ;
68774: GO 68587
// end ;
68776: LD_VAR 0 5
68780: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68781: LD_INT 0
68783: PPUSH
68784: PPUSH
68785: PPUSH
68786: PPUSH
68787: PPUSH
68788: PPUSH
68789: PPUSH
68790: PPUSH
// if not turrets or not factories then
68791: LD_VAR 0 1
68795: NOT
68796: PUSH
68797: LD_VAR 0 2
68801: NOT
68802: OR
68803: IFFALSE 68807
// exit ;
68805: GO 69114
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68807: LD_ADDR_VAR 0 10
68811: PUSH
68812: LD_INT 5
68814: PUSH
68815: LD_INT 6
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 2
68824: PUSH
68825: LD_INT 4
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 3
68834: PUSH
68835: LD_INT 5
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: LIST
68846: PUSH
68847: LD_INT 24
68849: PUSH
68850: LD_INT 25
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 23
68859: PUSH
68860: LD_INT 27
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: PUSH
68871: LD_INT 42
68873: PUSH
68874: LD_INT 43
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: PUSH
68881: LD_INT 44
68883: PUSH
68884: LD_INT 46
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 45
68893: PUSH
68894: LD_INT 47
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: LIST
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: LIST
68910: ST_TO_ADDR
// result := [ ] ;
68911: LD_ADDR_VAR 0 3
68915: PUSH
68916: EMPTY
68917: ST_TO_ADDR
// for i in turrets do
68918: LD_ADDR_VAR 0 4
68922: PUSH
68923: LD_VAR 0 1
68927: PUSH
68928: FOR_IN
68929: IFFALSE 69112
// begin nat := GetNation ( i ) ;
68931: LD_ADDR_VAR 0 7
68935: PUSH
68936: LD_VAR 0 4
68940: PPUSH
68941: CALL_OW 248
68945: ST_TO_ADDR
// weapon := 0 ;
68946: LD_ADDR_VAR 0 8
68950: PUSH
68951: LD_INT 0
68953: ST_TO_ADDR
// if not nat then
68954: LD_VAR 0 7
68958: NOT
68959: IFFALSE 68963
// continue ;
68961: GO 68928
// for j in list [ nat ] do
68963: LD_ADDR_VAR 0 5
68967: PUSH
68968: LD_VAR 0 10
68972: PUSH
68973: LD_VAR 0 7
68977: ARRAY
68978: PUSH
68979: FOR_IN
68980: IFFALSE 69021
// if GetBWeapon ( i ) = j [ 1 ] then
68982: LD_VAR 0 4
68986: PPUSH
68987: CALL_OW 269
68991: PUSH
68992: LD_VAR 0 5
68996: PUSH
68997: LD_INT 1
68999: ARRAY
69000: EQUAL
69001: IFFALSE 69019
// begin weapon := j [ 2 ] ;
69003: LD_ADDR_VAR 0 8
69007: PUSH
69008: LD_VAR 0 5
69012: PUSH
69013: LD_INT 2
69015: ARRAY
69016: ST_TO_ADDR
// break ;
69017: GO 69021
// end ;
69019: GO 68979
69021: POP
69022: POP
// if not weapon then
69023: LD_VAR 0 8
69027: NOT
69028: IFFALSE 69032
// continue ;
69030: GO 68928
// for k in factories do
69032: LD_ADDR_VAR 0 6
69036: PUSH
69037: LD_VAR 0 2
69041: PUSH
69042: FOR_IN
69043: IFFALSE 69108
// begin weapons := AvailableWeaponList ( k ) ;
69045: LD_ADDR_VAR 0 9
69049: PUSH
69050: LD_VAR 0 6
69054: PPUSH
69055: CALL_OW 478
69059: ST_TO_ADDR
// if not weapons then
69060: LD_VAR 0 9
69064: NOT
69065: IFFALSE 69069
// continue ;
69067: GO 69042
// if weapon in weapons then
69069: LD_VAR 0 8
69073: PUSH
69074: LD_VAR 0 9
69078: IN
69079: IFFALSE 69106
// begin result := [ i , weapon ] ;
69081: LD_ADDR_VAR 0 3
69085: PUSH
69086: LD_VAR 0 4
69090: PUSH
69091: LD_VAR 0 8
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: ST_TO_ADDR
// exit ;
69100: POP
69101: POP
69102: POP
69103: POP
69104: GO 69114
// end ; end ;
69106: GO 69042
69108: POP
69109: POP
// end ;
69110: GO 68928
69112: POP
69113: POP
// end ;
69114: LD_VAR 0 3
69118: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69119: LD_INT 0
69121: PPUSH
// if not side or side > 8 then
69122: LD_VAR 0 3
69126: NOT
69127: PUSH
69128: LD_VAR 0 3
69132: PUSH
69133: LD_INT 8
69135: GREATER
69136: OR
69137: IFFALSE 69141
// exit ;
69139: GO 69200
// if not range then
69141: LD_VAR 0 4
69145: NOT
69146: IFFALSE 69157
// range := - 12 ;
69148: LD_ADDR_VAR 0 4
69152: PUSH
69153: LD_INT 12
69155: NEG
69156: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69157: LD_VAR 0 1
69161: PPUSH
69162: LD_VAR 0 2
69166: PPUSH
69167: LD_VAR 0 3
69171: PPUSH
69172: LD_VAR 0 4
69176: PPUSH
69177: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69181: LD_VAR 0 1
69185: PPUSH
69186: LD_VAR 0 2
69190: PPUSH
69191: LD_VAR 0 3
69195: PPUSH
69196: CALL_OW 331
// end ;
69200: LD_VAR 0 5
69204: RET
// export function Video ( mode ) ; begin
69205: LD_INT 0
69207: PPUSH
// ingame_video = mode ;
69208: LD_ADDR_OWVAR 52
69212: PUSH
69213: LD_VAR 0 1
69217: ST_TO_ADDR
// interface_hidden = mode ;
69218: LD_ADDR_OWVAR 54
69222: PUSH
69223: LD_VAR 0 1
69227: ST_TO_ADDR
// end ;
69228: LD_VAR 0 2
69232: RET
// export function Join ( array , element ) ; begin
69233: LD_INT 0
69235: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69236: LD_ADDR_VAR 0 3
69240: PUSH
69241: LD_VAR 0 1
69245: PPUSH
69246: LD_VAR 0 1
69250: PUSH
69251: LD_INT 1
69253: PLUS
69254: PPUSH
69255: LD_VAR 0 2
69259: PPUSH
69260: CALL_OW 1
69264: ST_TO_ADDR
// end ;
69265: LD_VAR 0 3
69269: RET
// export function JoinUnion ( array , element ) ; begin
69270: LD_INT 0
69272: PPUSH
// result := array union element ;
69273: LD_ADDR_VAR 0 3
69277: PUSH
69278: LD_VAR 0 1
69282: PUSH
69283: LD_VAR 0 2
69287: UNION
69288: ST_TO_ADDR
// end ;
69289: LD_VAR 0 3
69293: RET
// export function GetBehemoths ( side ) ; begin
69294: LD_INT 0
69296: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69297: LD_ADDR_VAR 0 2
69301: PUSH
69302: LD_INT 22
69304: PUSH
69305: LD_VAR 0 1
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 31
69316: PUSH
69317: LD_INT 25
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: EMPTY
69325: LIST
69326: LIST
69327: PPUSH
69328: CALL_OW 69
69332: ST_TO_ADDR
// end ;
69333: LD_VAR 0 2
69337: RET
// export function Shuffle ( array ) ; var i , index ; begin
69338: LD_INT 0
69340: PPUSH
69341: PPUSH
69342: PPUSH
// result := [ ] ;
69343: LD_ADDR_VAR 0 2
69347: PUSH
69348: EMPTY
69349: ST_TO_ADDR
// if not array then
69350: LD_VAR 0 1
69354: NOT
69355: IFFALSE 69359
// exit ;
69357: GO 69458
// Randomize ;
69359: CALL_OW 10
// for i = array downto 1 do
69363: LD_ADDR_VAR 0 3
69367: PUSH
69368: DOUBLE
69369: LD_VAR 0 1
69373: INC
69374: ST_TO_ADDR
69375: LD_INT 1
69377: PUSH
69378: FOR_DOWNTO
69379: IFFALSE 69456
// begin index := rand ( 1 , array ) ;
69381: LD_ADDR_VAR 0 4
69385: PUSH
69386: LD_INT 1
69388: PPUSH
69389: LD_VAR 0 1
69393: PPUSH
69394: CALL_OW 12
69398: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69399: LD_ADDR_VAR 0 2
69403: PUSH
69404: LD_VAR 0 2
69408: PPUSH
69409: LD_VAR 0 2
69413: PUSH
69414: LD_INT 1
69416: PLUS
69417: PPUSH
69418: LD_VAR 0 1
69422: PUSH
69423: LD_VAR 0 4
69427: ARRAY
69428: PPUSH
69429: CALL_OW 2
69433: ST_TO_ADDR
// array := Delete ( array , index ) ;
69434: LD_ADDR_VAR 0 1
69438: PUSH
69439: LD_VAR 0 1
69443: PPUSH
69444: LD_VAR 0 4
69448: PPUSH
69449: CALL_OW 3
69453: ST_TO_ADDR
// end ;
69454: GO 69378
69456: POP
69457: POP
// end ;
69458: LD_VAR 0 2
69462: RET
// export function GetBaseMaterials ( base ) ; begin
69463: LD_INT 0
69465: PPUSH
// result := [ 0 , 0 , 0 ] ;
69466: LD_ADDR_VAR 0 2
69470: PUSH
69471: LD_INT 0
69473: PUSH
69474: LD_INT 0
69476: PUSH
69477: LD_INT 0
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: LIST
69484: ST_TO_ADDR
// if not base then
69485: LD_VAR 0 1
69489: NOT
69490: IFFALSE 69494
// exit ;
69492: GO 69543
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69494: LD_ADDR_VAR 0 2
69498: PUSH
69499: LD_VAR 0 1
69503: PPUSH
69504: LD_INT 1
69506: PPUSH
69507: CALL_OW 275
69511: PUSH
69512: LD_VAR 0 1
69516: PPUSH
69517: LD_INT 2
69519: PPUSH
69520: CALL_OW 275
69524: PUSH
69525: LD_VAR 0 1
69529: PPUSH
69530: LD_INT 3
69532: PPUSH
69533: CALL_OW 275
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: LIST
69542: ST_TO_ADDR
// end ;
69543: LD_VAR 0 2
69547: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69548: LD_INT 0
69550: PPUSH
69551: PPUSH
// result := array ;
69552: LD_ADDR_VAR 0 3
69556: PUSH
69557: LD_VAR 0 1
69561: ST_TO_ADDR
// if size >= result then
69562: LD_VAR 0 2
69566: PUSH
69567: LD_VAR 0 3
69571: GREATEREQUAL
69572: IFFALSE 69576
// exit ;
69574: GO 69626
// if size then
69576: LD_VAR 0 2
69580: IFFALSE 69626
// for i := array downto size do
69582: LD_ADDR_VAR 0 4
69586: PUSH
69587: DOUBLE
69588: LD_VAR 0 1
69592: INC
69593: ST_TO_ADDR
69594: LD_VAR 0 2
69598: PUSH
69599: FOR_DOWNTO
69600: IFFALSE 69624
// result := Delete ( result , result ) ;
69602: LD_ADDR_VAR 0 3
69606: PUSH
69607: LD_VAR 0 3
69611: PPUSH
69612: LD_VAR 0 3
69616: PPUSH
69617: CALL_OW 3
69621: ST_TO_ADDR
69622: GO 69599
69624: POP
69625: POP
// end ;
69626: LD_VAR 0 3
69630: RET
// export function ComExit ( unit ) ; var tmp ; begin
69631: LD_INT 0
69633: PPUSH
69634: PPUSH
// if not IsInUnit ( unit ) then
69635: LD_VAR 0 1
69639: PPUSH
69640: CALL_OW 310
69644: NOT
69645: IFFALSE 69649
// exit ;
69647: GO 69709
// tmp := IsInUnit ( unit ) ;
69649: LD_ADDR_VAR 0 3
69653: PUSH
69654: LD_VAR 0 1
69658: PPUSH
69659: CALL_OW 310
69663: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69664: LD_VAR 0 3
69668: PPUSH
69669: CALL_OW 247
69673: PUSH
69674: LD_INT 2
69676: EQUAL
69677: IFFALSE 69690
// ComExitVehicle ( unit ) else
69679: LD_VAR 0 1
69683: PPUSH
69684: CALL_OW 121
69688: GO 69699
// ComExitBuilding ( unit ) ;
69690: LD_VAR 0 1
69694: PPUSH
69695: CALL_OW 122
// result := tmp ;
69699: LD_ADDR_VAR 0 2
69703: PUSH
69704: LD_VAR 0 3
69708: ST_TO_ADDR
// end ;
69709: LD_VAR 0 2
69713: RET
// export function ComExitAll ( units ) ; var i ; begin
69714: LD_INT 0
69716: PPUSH
69717: PPUSH
// if not units then
69718: LD_VAR 0 1
69722: NOT
69723: IFFALSE 69727
// exit ;
69725: GO 69753
// for i in units do
69727: LD_ADDR_VAR 0 3
69731: PUSH
69732: LD_VAR 0 1
69736: PUSH
69737: FOR_IN
69738: IFFALSE 69751
// ComExit ( i ) ;
69740: LD_VAR 0 3
69744: PPUSH
69745: CALL 69631 0 1
69749: GO 69737
69751: POP
69752: POP
// end ;
69753: LD_VAR 0 2
69757: RET
// export function ResetHc ; begin
69758: LD_INT 0
69760: PPUSH
// InitHc ;
69761: CALL_OW 19
// hc_importance := 0 ;
69765: LD_ADDR_OWVAR 32
69769: PUSH
69770: LD_INT 0
69772: ST_TO_ADDR
// end ;
69773: LD_VAR 0 1
69777: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69778: LD_INT 0
69780: PPUSH
69781: PPUSH
69782: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69783: LD_ADDR_VAR 0 6
69787: PUSH
69788: LD_VAR 0 1
69792: PUSH
69793: LD_VAR 0 3
69797: PLUS
69798: PUSH
69799: LD_INT 2
69801: DIV
69802: ST_TO_ADDR
// if _x < 0 then
69803: LD_VAR 0 6
69807: PUSH
69808: LD_INT 0
69810: LESS
69811: IFFALSE 69828
// _x := _x * - 1 ;
69813: LD_ADDR_VAR 0 6
69817: PUSH
69818: LD_VAR 0 6
69822: PUSH
69823: LD_INT 1
69825: NEG
69826: MUL
69827: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69828: LD_ADDR_VAR 0 7
69832: PUSH
69833: LD_VAR 0 2
69837: PUSH
69838: LD_VAR 0 4
69842: PLUS
69843: PUSH
69844: LD_INT 2
69846: DIV
69847: ST_TO_ADDR
// if _y < 0 then
69848: LD_VAR 0 7
69852: PUSH
69853: LD_INT 0
69855: LESS
69856: IFFALSE 69873
// _y := _y * - 1 ;
69858: LD_ADDR_VAR 0 7
69862: PUSH
69863: LD_VAR 0 7
69867: PUSH
69868: LD_INT 1
69870: NEG
69871: MUL
69872: ST_TO_ADDR
// result := [ _x , _y ] ;
69873: LD_ADDR_VAR 0 5
69877: PUSH
69878: LD_VAR 0 6
69882: PUSH
69883: LD_VAR 0 7
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: ST_TO_ADDR
// end ;
69892: LD_VAR 0 5
69896: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69897: LD_INT 0
69899: PPUSH
69900: PPUSH
69901: PPUSH
69902: PPUSH
// task := GetTaskList ( unit ) ;
69903: LD_ADDR_VAR 0 7
69907: PUSH
69908: LD_VAR 0 1
69912: PPUSH
69913: CALL_OW 437
69917: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69918: LD_VAR 0 7
69922: NOT
69923: PUSH
69924: LD_VAR 0 1
69928: PPUSH
69929: LD_VAR 0 2
69933: PPUSH
69934: CALL_OW 308
69938: NOT
69939: AND
69940: IFFALSE 69944
// exit ;
69942: GO 70062
// if IsInArea ( unit , area ) then
69944: LD_VAR 0 1
69948: PPUSH
69949: LD_VAR 0 2
69953: PPUSH
69954: CALL_OW 308
69958: IFFALSE 69976
// begin ComMoveToArea ( unit , goAway ) ;
69960: LD_VAR 0 1
69964: PPUSH
69965: LD_VAR 0 3
69969: PPUSH
69970: CALL_OW 113
// exit ;
69974: GO 70062
// end ; if task [ 1 ] [ 1 ] <> M then
69976: LD_VAR 0 7
69980: PUSH
69981: LD_INT 1
69983: ARRAY
69984: PUSH
69985: LD_INT 1
69987: ARRAY
69988: PUSH
69989: LD_STRING M
69991: NONEQUAL
69992: IFFALSE 69996
// exit ;
69994: GO 70062
// x := task [ 1 ] [ 2 ] ;
69996: LD_ADDR_VAR 0 5
70000: PUSH
70001: LD_VAR 0 7
70005: PUSH
70006: LD_INT 1
70008: ARRAY
70009: PUSH
70010: LD_INT 2
70012: ARRAY
70013: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70014: LD_ADDR_VAR 0 6
70018: PUSH
70019: LD_VAR 0 7
70023: PUSH
70024: LD_INT 1
70026: ARRAY
70027: PUSH
70028: LD_INT 3
70030: ARRAY
70031: ST_TO_ADDR
// if InArea ( x , y , area ) then
70032: LD_VAR 0 5
70036: PPUSH
70037: LD_VAR 0 6
70041: PPUSH
70042: LD_VAR 0 2
70046: PPUSH
70047: CALL_OW 309
70051: IFFALSE 70062
// ComStop ( unit ) ;
70053: LD_VAR 0 1
70057: PPUSH
70058: CALL_OW 141
// end ;
70062: LD_VAR 0 4
70066: RET
// export function Abs ( value ) ; begin
70067: LD_INT 0
70069: PPUSH
// result := value ;
70070: LD_ADDR_VAR 0 2
70074: PUSH
70075: LD_VAR 0 1
70079: ST_TO_ADDR
// if value < 0 then
70080: LD_VAR 0 1
70084: PUSH
70085: LD_INT 0
70087: LESS
70088: IFFALSE 70105
// result := value * - 1 ;
70090: LD_ADDR_VAR 0 2
70094: PUSH
70095: LD_VAR 0 1
70099: PUSH
70100: LD_INT 1
70102: NEG
70103: MUL
70104: ST_TO_ADDR
// end ;
70105: LD_VAR 0 2
70109: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70110: LD_INT 0
70112: PPUSH
70113: PPUSH
70114: PPUSH
70115: PPUSH
70116: PPUSH
70117: PPUSH
70118: PPUSH
70119: PPUSH
// if not unit or not building then
70120: LD_VAR 0 1
70124: NOT
70125: PUSH
70126: LD_VAR 0 2
70130: NOT
70131: OR
70132: IFFALSE 70136
// exit ;
70134: GO 70362
// x := GetX ( building ) ;
70136: LD_ADDR_VAR 0 4
70140: PUSH
70141: LD_VAR 0 2
70145: PPUSH
70146: CALL_OW 250
70150: ST_TO_ADDR
// y := GetY ( building ) ;
70151: LD_ADDR_VAR 0 6
70155: PUSH
70156: LD_VAR 0 2
70160: PPUSH
70161: CALL_OW 251
70165: ST_TO_ADDR
// d := GetDir ( building ) ;
70166: LD_ADDR_VAR 0 8
70170: PUSH
70171: LD_VAR 0 2
70175: PPUSH
70176: CALL_OW 254
70180: ST_TO_ADDR
// r := 4 ;
70181: LD_ADDR_VAR 0 9
70185: PUSH
70186: LD_INT 4
70188: ST_TO_ADDR
// for i := 1 to 5 do
70189: LD_ADDR_VAR 0 10
70193: PUSH
70194: DOUBLE
70195: LD_INT 1
70197: DEC
70198: ST_TO_ADDR
70199: LD_INT 5
70201: PUSH
70202: FOR_TO
70203: IFFALSE 70360
// begin _x := ShiftX ( x , d , r + i ) ;
70205: LD_ADDR_VAR 0 5
70209: PUSH
70210: LD_VAR 0 4
70214: PPUSH
70215: LD_VAR 0 8
70219: PPUSH
70220: LD_VAR 0 9
70224: PUSH
70225: LD_VAR 0 10
70229: PLUS
70230: PPUSH
70231: CALL_OW 272
70235: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70236: LD_ADDR_VAR 0 7
70240: PUSH
70241: LD_VAR 0 6
70245: PPUSH
70246: LD_VAR 0 8
70250: PPUSH
70251: LD_VAR 0 9
70255: PUSH
70256: LD_VAR 0 10
70260: PLUS
70261: PPUSH
70262: CALL_OW 273
70266: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70267: LD_VAR 0 5
70271: PPUSH
70272: LD_VAR 0 7
70276: PPUSH
70277: CALL_OW 488
70281: PUSH
70282: LD_VAR 0 5
70286: PPUSH
70287: LD_VAR 0 7
70291: PPUSH
70292: CALL_OW 428
70296: PPUSH
70297: CALL_OW 247
70301: PUSH
70302: LD_INT 3
70304: PUSH
70305: LD_INT 2
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: IN
70312: NOT
70313: AND
70314: IFFALSE 70358
// begin ComMoveXY ( unit , _x , _y ) ;
70316: LD_VAR 0 1
70320: PPUSH
70321: LD_VAR 0 5
70325: PPUSH
70326: LD_VAR 0 7
70330: PPUSH
70331: CALL_OW 111
// result := [ _x , _y ] ;
70335: LD_ADDR_VAR 0 3
70339: PUSH
70340: LD_VAR 0 5
70344: PUSH
70345: LD_VAR 0 7
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: ST_TO_ADDR
// exit ;
70354: POP
70355: POP
70356: GO 70362
// end ; end ;
70358: GO 70202
70360: POP
70361: POP
// end ;
70362: LD_VAR 0 3
70366: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70367: LD_INT 0
70369: PPUSH
70370: PPUSH
70371: PPUSH
// result := 0 ;
70372: LD_ADDR_VAR 0 3
70376: PUSH
70377: LD_INT 0
70379: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70380: LD_VAR 0 1
70384: PUSH
70385: LD_INT 0
70387: LESS
70388: PUSH
70389: LD_VAR 0 1
70393: PUSH
70394: LD_INT 8
70396: GREATER
70397: OR
70398: PUSH
70399: LD_VAR 0 2
70403: PUSH
70404: LD_INT 0
70406: LESS
70407: OR
70408: PUSH
70409: LD_VAR 0 2
70413: PUSH
70414: LD_INT 8
70416: GREATER
70417: OR
70418: IFFALSE 70422
// exit ;
70420: GO 70497
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70422: LD_ADDR_VAR 0 4
70426: PUSH
70427: LD_INT 22
70429: PUSH
70430: LD_VAR 0 2
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: PPUSH
70439: CALL_OW 69
70443: PUSH
70444: FOR_IN
70445: IFFALSE 70495
// begin un := UnitShoot ( i ) ;
70447: LD_ADDR_VAR 0 5
70451: PUSH
70452: LD_VAR 0 4
70456: PPUSH
70457: CALL_OW 504
70461: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70462: LD_VAR 0 5
70466: PPUSH
70467: CALL_OW 255
70471: PUSH
70472: LD_VAR 0 1
70476: EQUAL
70477: IFFALSE 70493
// begin result := un ;
70479: LD_ADDR_VAR 0 3
70483: PUSH
70484: LD_VAR 0 5
70488: ST_TO_ADDR
// exit ;
70489: POP
70490: POP
70491: GO 70497
// end ; end ;
70493: GO 70444
70495: POP
70496: POP
// end ;
70497: LD_VAR 0 3
70501: RET
// export function GetCargoBay ( units ) ; begin
70502: LD_INT 0
70504: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70505: LD_ADDR_VAR 0 2
70509: PUSH
70510: LD_VAR 0 1
70514: PPUSH
70515: LD_INT 2
70517: PUSH
70518: LD_INT 34
70520: PUSH
70521: LD_INT 12
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 34
70530: PUSH
70531: LD_INT 51
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 34
70540: PUSH
70541: LD_INT 32
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: PUSH
70548: LD_INT 34
70550: PUSH
70551: LD_INT 89
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: PPUSH
70565: CALL_OW 72
70569: ST_TO_ADDR
// end ;
70570: LD_VAR 0 2
70574: RET
// export function Negate ( value ) ; begin
70575: LD_INT 0
70577: PPUSH
// result := not value ;
70578: LD_ADDR_VAR 0 2
70582: PUSH
70583: LD_VAR 0 1
70587: NOT
70588: ST_TO_ADDR
// end ;
70589: LD_VAR 0 2
70593: RET
// export function Inc ( value ) ; begin
70594: LD_INT 0
70596: PPUSH
// result := value + 1 ;
70597: LD_ADDR_VAR 0 2
70601: PUSH
70602: LD_VAR 0 1
70606: PUSH
70607: LD_INT 1
70609: PLUS
70610: ST_TO_ADDR
// end ;
70611: LD_VAR 0 2
70615: RET
// export function Dec ( value ) ; begin
70616: LD_INT 0
70618: PPUSH
// result := value - 1 ;
70619: LD_ADDR_VAR 0 2
70623: PUSH
70624: LD_VAR 0 1
70628: PUSH
70629: LD_INT 1
70631: MINUS
70632: ST_TO_ADDR
// end ;
70633: LD_VAR 0 2
70637: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70638: LD_INT 0
70640: PPUSH
70641: PPUSH
70642: PPUSH
70643: PPUSH
70644: PPUSH
70645: PPUSH
70646: PPUSH
70647: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70648: LD_VAR 0 1
70652: PPUSH
70653: LD_VAR 0 2
70657: PPUSH
70658: CALL_OW 488
70662: NOT
70663: PUSH
70664: LD_VAR 0 3
70668: PPUSH
70669: LD_VAR 0 4
70673: PPUSH
70674: CALL_OW 488
70678: NOT
70679: OR
70680: IFFALSE 70693
// begin result := - 1 ;
70682: LD_ADDR_VAR 0 5
70686: PUSH
70687: LD_INT 1
70689: NEG
70690: ST_TO_ADDR
// exit ;
70691: GO 70928
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70693: LD_ADDR_VAR 0 12
70697: PUSH
70698: LD_VAR 0 1
70702: PPUSH
70703: LD_VAR 0 2
70707: PPUSH
70708: LD_VAR 0 3
70712: PPUSH
70713: LD_VAR 0 4
70717: PPUSH
70718: CALL 69778 0 4
70722: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70723: LD_ADDR_VAR 0 11
70727: PUSH
70728: LD_VAR 0 1
70732: PPUSH
70733: LD_VAR 0 2
70737: PPUSH
70738: LD_VAR 0 12
70742: PUSH
70743: LD_INT 1
70745: ARRAY
70746: PPUSH
70747: LD_VAR 0 12
70751: PUSH
70752: LD_INT 2
70754: ARRAY
70755: PPUSH
70756: CALL_OW 298
70760: ST_TO_ADDR
// distance := 9999 ;
70761: LD_ADDR_VAR 0 10
70765: PUSH
70766: LD_INT 9999
70768: ST_TO_ADDR
// for i := 0 to 5 do
70769: LD_ADDR_VAR 0 6
70773: PUSH
70774: DOUBLE
70775: LD_INT 0
70777: DEC
70778: ST_TO_ADDR
70779: LD_INT 5
70781: PUSH
70782: FOR_TO
70783: IFFALSE 70926
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70785: LD_ADDR_VAR 0 7
70789: PUSH
70790: LD_VAR 0 1
70794: PPUSH
70795: LD_VAR 0 6
70799: PPUSH
70800: LD_VAR 0 11
70804: PPUSH
70805: CALL_OW 272
70809: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70810: LD_ADDR_VAR 0 8
70814: PUSH
70815: LD_VAR 0 2
70819: PPUSH
70820: LD_VAR 0 6
70824: PPUSH
70825: LD_VAR 0 11
70829: PPUSH
70830: CALL_OW 273
70834: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70835: LD_VAR 0 7
70839: PPUSH
70840: LD_VAR 0 8
70844: PPUSH
70845: CALL_OW 488
70849: NOT
70850: IFFALSE 70854
// continue ;
70852: GO 70782
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70854: LD_ADDR_VAR 0 9
70858: PUSH
70859: LD_VAR 0 12
70863: PUSH
70864: LD_INT 1
70866: ARRAY
70867: PPUSH
70868: LD_VAR 0 12
70872: PUSH
70873: LD_INT 2
70875: ARRAY
70876: PPUSH
70877: LD_VAR 0 7
70881: PPUSH
70882: LD_VAR 0 8
70886: PPUSH
70887: CALL_OW 298
70891: ST_TO_ADDR
// if tmp < distance then
70892: LD_VAR 0 9
70896: PUSH
70897: LD_VAR 0 10
70901: LESS
70902: IFFALSE 70924
// begin result := i ;
70904: LD_ADDR_VAR 0 5
70908: PUSH
70909: LD_VAR 0 6
70913: ST_TO_ADDR
// distance := tmp ;
70914: LD_ADDR_VAR 0 10
70918: PUSH
70919: LD_VAR 0 9
70923: ST_TO_ADDR
// end ; end ;
70924: GO 70782
70926: POP
70927: POP
// end ;
70928: LD_VAR 0 5
70932: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70933: LD_INT 0
70935: PPUSH
70936: PPUSH
// if not driver or not IsInUnit ( driver ) then
70937: LD_VAR 0 1
70941: NOT
70942: PUSH
70943: LD_VAR 0 1
70947: PPUSH
70948: CALL_OW 310
70952: NOT
70953: OR
70954: IFFALSE 70958
// exit ;
70956: GO 71048
// vehicle := IsInUnit ( driver ) ;
70958: LD_ADDR_VAR 0 3
70962: PUSH
70963: LD_VAR 0 1
70967: PPUSH
70968: CALL_OW 310
70972: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70973: LD_VAR 0 1
70977: PPUSH
70978: LD_STRING \
70980: PUSH
70981: LD_INT 0
70983: PUSH
70984: LD_INT 0
70986: PUSH
70987: LD_INT 0
70989: PUSH
70990: LD_INT 0
70992: PUSH
70993: LD_INT 0
70995: PUSH
70996: LD_INT 0
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: LIST
71003: LIST
71004: LIST
71005: LIST
71006: LIST
71007: PUSH
71008: LD_STRING E
71010: PUSH
71011: LD_INT 0
71013: PUSH
71014: LD_INT 0
71016: PUSH
71017: LD_VAR 0 3
71021: PUSH
71022: LD_INT 0
71024: PUSH
71025: LD_INT 0
71027: PUSH
71028: LD_INT 0
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PPUSH
71044: CALL_OW 446
// end ;
71048: LD_VAR 0 2
71052: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71053: LD_INT 0
71055: PPUSH
71056: PPUSH
// if not driver or not IsInUnit ( driver ) then
71057: LD_VAR 0 1
71061: NOT
71062: PUSH
71063: LD_VAR 0 1
71067: PPUSH
71068: CALL_OW 310
71072: NOT
71073: OR
71074: IFFALSE 71078
// exit ;
71076: GO 71168
// vehicle := IsInUnit ( driver ) ;
71078: LD_ADDR_VAR 0 3
71082: PUSH
71083: LD_VAR 0 1
71087: PPUSH
71088: CALL_OW 310
71092: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71093: LD_VAR 0 1
71097: PPUSH
71098: LD_STRING \
71100: PUSH
71101: LD_INT 0
71103: PUSH
71104: LD_INT 0
71106: PUSH
71107: LD_INT 0
71109: PUSH
71110: LD_INT 0
71112: PUSH
71113: LD_INT 0
71115: PUSH
71116: LD_INT 0
71118: PUSH
71119: EMPTY
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: LIST
71125: LIST
71126: LIST
71127: PUSH
71128: LD_STRING E
71130: PUSH
71131: LD_INT 0
71133: PUSH
71134: LD_INT 0
71136: PUSH
71137: LD_VAR 0 3
71141: PUSH
71142: LD_INT 0
71144: PUSH
71145: LD_INT 0
71147: PUSH
71148: LD_INT 0
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: PUSH
71160: EMPTY
71161: LIST
71162: LIST
71163: PPUSH
71164: CALL_OW 447
// end ;
71168: LD_VAR 0 2
71172: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71173: LD_INT 0
71175: PPUSH
71176: PPUSH
71177: PPUSH
// tmp := [ ] ;
71178: LD_ADDR_VAR 0 5
71182: PUSH
71183: EMPTY
71184: ST_TO_ADDR
// for i in units do
71185: LD_ADDR_VAR 0 4
71189: PUSH
71190: LD_VAR 0 1
71194: PUSH
71195: FOR_IN
71196: IFFALSE 71234
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71198: LD_ADDR_VAR 0 5
71202: PUSH
71203: LD_VAR 0 5
71207: PPUSH
71208: LD_VAR 0 5
71212: PUSH
71213: LD_INT 1
71215: PLUS
71216: PPUSH
71217: LD_VAR 0 4
71221: PPUSH
71222: CALL_OW 256
71226: PPUSH
71227: CALL_OW 2
71231: ST_TO_ADDR
71232: GO 71195
71234: POP
71235: POP
// if not tmp then
71236: LD_VAR 0 5
71240: NOT
71241: IFFALSE 71245
// exit ;
71243: GO 71293
// if asc then
71245: LD_VAR 0 2
71249: IFFALSE 71273
// result := SortListByListAsc ( units , tmp ) else
71251: LD_ADDR_VAR 0 3
71255: PUSH
71256: LD_VAR 0 1
71260: PPUSH
71261: LD_VAR 0 5
71265: PPUSH
71266: CALL_OW 76
71270: ST_TO_ADDR
71271: GO 71293
// result := SortListByListDesc ( units , tmp ) ;
71273: LD_ADDR_VAR 0 3
71277: PUSH
71278: LD_VAR 0 1
71282: PPUSH
71283: LD_VAR 0 5
71287: PPUSH
71288: CALL_OW 77
71292: ST_TO_ADDR
// end ;
71293: LD_VAR 0 3
71297: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71298: LD_INT 0
71300: PPUSH
71301: PPUSH
// task := GetTaskList ( mech ) ;
71302: LD_ADDR_VAR 0 4
71306: PUSH
71307: LD_VAR 0 1
71311: PPUSH
71312: CALL_OW 437
71316: ST_TO_ADDR
// if not task then
71317: LD_VAR 0 4
71321: NOT
71322: IFFALSE 71326
// exit ;
71324: GO 71368
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71326: LD_ADDR_VAR 0 3
71330: PUSH
71331: LD_VAR 0 4
71335: PUSH
71336: LD_INT 1
71338: ARRAY
71339: PUSH
71340: LD_INT 1
71342: ARRAY
71343: PUSH
71344: LD_STRING r
71346: EQUAL
71347: PUSH
71348: LD_VAR 0 4
71352: PUSH
71353: LD_INT 1
71355: ARRAY
71356: PUSH
71357: LD_INT 4
71359: ARRAY
71360: PUSH
71361: LD_VAR 0 2
71365: EQUAL
71366: AND
71367: ST_TO_ADDR
// end ;
71368: LD_VAR 0 3
71372: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71373: LD_INT 0
71375: PPUSH
// SetDir ( unit , d ) ;
71376: LD_VAR 0 1
71380: PPUSH
71381: LD_VAR 0 4
71385: PPUSH
71386: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71390: LD_VAR 0 1
71394: PPUSH
71395: LD_VAR 0 2
71399: PPUSH
71400: LD_VAR 0 3
71404: PPUSH
71405: LD_VAR 0 5
71409: PPUSH
71410: CALL_OW 48
// end ;
71414: LD_VAR 0 6
71418: RET
// export function ToNaturalNumber ( number ) ; begin
71419: LD_INT 0
71421: PPUSH
// result := number div 1 ;
71422: LD_ADDR_VAR 0 2
71426: PUSH
71427: LD_VAR 0 1
71431: PUSH
71432: LD_INT 1
71434: DIV
71435: ST_TO_ADDR
// if number < 0 then
71436: LD_VAR 0 1
71440: PUSH
71441: LD_INT 0
71443: LESS
71444: IFFALSE 71454
// result := 0 ;
71446: LD_ADDR_VAR 0 2
71450: PUSH
71451: LD_INT 0
71453: ST_TO_ADDR
// end ;
71454: LD_VAR 0 2
71458: RET
// export function SortByClass ( units , class ) ; var un ; begin
71459: LD_INT 0
71461: PPUSH
71462: PPUSH
// if not units or not class then
71463: LD_VAR 0 1
71467: NOT
71468: PUSH
71469: LD_VAR 0 2
71473: NOT
71474: OR
71475: IFFALSE 71479
// exit ;
71477: GO 71574
// result := [ ] ;
71479: LD_ADDR_VAR 0 3
71483: PUSH
71484: EMPTY
71485: ST_TO_ADDR
// for un in units do
71486: LD_ADDR_VAR 0 4
71490: PUSH
71491: LD_VAR 0 1
71495: PUSH
71496: FOR_IN
71497: IFFALSE 71572
// if GetClass ( un ) = class then
71499: LD_VAR 0 4
71503: PPUSH
71504: CALL_OW 257
71508: PUSH
71509: LD_VAR 0 2
71513: EQUAL
71514: IFFALSE 71541
// result := Insert ( result , 1 , un ) else
71516: LD_ADDR_VAR 0 3
71520: PUSH
71521: LD_VAR 0 3
71525: PPUSH
71526: LD_INT 1
71528: PPUSH
71529: LD_VAR 0 4
71533: PPUSH
71534: CALL_OW 2
71538: ST_TO_ADDR
71539: GO 71570
// result := Replace ( result , result + 1 , un ) ;
71541: LD_ADDR_VAR 0 3
71545: PUSH
71546: LD_VAR 0 3
71550: PPUSH
71551: LD_VAR 0 3
71555: PUSH
71556: LD_INT 1
71558: PLUS
71559: PPUSH
71560: LD_VAR 0 4
71564: PPUSH
71565: CALL_OW 1
71569: ST_TO_ADDR
71570: GO 71496
71572: POP
71573: POP
// end ;
71574: LD_VAR 0 3
71578: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71579: LD_INT 0
71581: PPUSH
71582: PPUSH
71583: PPUSH
71584: PPUSH
71585: PPUSH
71586: PPUSH
71587: PPUSH
// result := [ ] ;
71588: LD_ADDR_VAR 0 4
71592: PUSH
71593: EMPTY
71594: ST_TO_ADDR
// if x - r < 0 then
71595: LD_VAR 0 1
71599: PUSH
71600: LD_VAR 0 3
71604: MINUS
71605: PUSH
71606: LD_INT 0
71608: LESS
71609: IFFALSE 71621
// min_x := 0 else
71611: LD_ADDR_VAR 0 8
71615: PUSH
71616: LD_INT 0
71618: ST_TO_ADDR
71619: GO 71637
// min_x := x - r ;
71621: LD_ADDR_VAR 0 8
71625: PUSH
71626: LD_VAR 0 1
71630: PUSH
71631: LD_VAR 0 3
71635: MINUS
71636: ST_TO_ADDR
// if y - r < 0 then
71637: LD_VAR 0 2
71641: PUSH
71642: LD_VAR 0 3
71646: MINUS
71647: PUSH
71648: LD_INT 0
71650: LESS
71651: IFFALSE 71663
// min_y := 0 else
71653: LD_ADDR_VAR 0 7
71657: PUSH
71658: LD_INT 0
71660: ST_TO_ADDR
71661: GO 71679
// min_y := y - r ;
71663: LD_ADDR_VAR 0 7
71667: PUSH
71668: LD_VAR 0 2
71672: PUSH
71673: LD_VAR 0 3
71677: MINUS
71678: ST_TO_ADDR
// max_x := x + r ;
71679: LD_ADDR_VAR 0 9
71683: PUSH
71684: LD_VAR 0 1
71688: PUSH
71689: LD_VAR 0 3
71693: PLUS
71694: ST_TO_ADDR
// max_y := y + r ;
71695: LD_ADDR_VAR 0 10
71699: PUSH
71700: LD_VAR 0 2
71704: PUSH
71705: LD_VAR 0 3
71709: PLUS
71710: ST_TO_ADDR
// for _x = min_x to max_x do
71711: LD_ADDR_VAR 0 5
71715: PUSH
71716: DOUBLE
71717: LD_VAR 0 8
71721: DEC
71722: ST_TO_ADDR
71723: LD_VAR 0 9
71727: PUSH
71728: FOR_TO
71729: IFFALSE 71830
// for _y = min_y to max_y do
71731: LD_ADDR_VAR 0 6
71735: PUSH
71736: DOUBLE
71737: LD_VAR 0 7
71741: DEC
71742: ST_TO_ADDR
71743: LD_VAR 0 10
71747: PUSH
71748: FOR_TO
71749: IFFALSE 71826
// begin if not ValidHex ( _x , _y ) then
71751: LD_VAR 0 5
71755: PPUSH
71756: LD_VAR 0 6
71760: PPUSH
71761: CALL_OW 488
71765: NOT
71766: IFFALSE 71770
// continue ;
71768: GO 71748
// if GetResourceTypeXY ( _x , _y ) then
71770: LD_VAR 0 5
71774: PPUSH
71775: LD_VAR 0 6
71779: PPUSH
71780: CALL_OW 283
71784: IFFALSE 71824
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71786: LD_ADDR_VAR 0 4
71790: PUSH
71791: LD_VAR 0 4
71795: PPUSH
71796: LD_VAR 0 4
71800: PUSH
71801: LD_INT 1
71803: PLUS
71804: PPUSH
71805: LD_VAR 0 5
71809: PUSH
71810: LD_VAR 0 6
71814: PUSH
71815: EMPTY
71816: LIST
71817: LIST
71818: PPUSH
71819: CALL_OW 1
71823: ST_TO_ADDR
// end ;
71824: GO 71748
71826: POP
71827: POP
71828: GO 71728
71830: POP
71831: POP
// end ;
71832: LD_VAR 0 4
71836: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71837: LD_INT 0
71839: PPUSH
71840: PPUSH
71841: PPUSH
71842: PPUSH
71843: PPUSH
71844: PPUSH
71845: PPUSH
71846: PPUSH
// if not units then
71847: LD_VAR 0 1
71851: NOT
71852: IFFALSE 71856
// exit ;
71854: GO 72380
// result := UnitFilter ( units , [ f_ok ] ) ;
71856: LD_ADDR_VAR 0 3
71860: PUSH
71861: LD_VAR 0 1
71865: PPUSH
71866: LD_INT 50
71868: PUSH
71869: EMPTY
71870: LIST
71871: PPUSH
71872: CALL_OW 72
71876: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71877: LD_ADDR_VAR 0 8
71881: PUSH
71882: LD_VAR 0 1
71886: PUSH
71887: LD_INT 1
71889: ARRAY
71890: PPUSH
71891: CALL_OW 255
71895: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71896: LD_ADDR_VAR 0 10
71900: PUSH
71901: LD_INT 29
71903: PUSH
71904: LD_INT 91
71906: PUSH
71907: LD_INT 49
71909: PUSH
71910: EMPTY
71911: LIST
71912: LIST
71913: LIST
71914: ST_TO_ADDR
// if not result then
71915: LD_VAR 0 3
71919: NOT
71920: IFFALSE 71924
// exit ;
71922: GO 72380
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71924: LD_ADDR_VAR 0 5
71928: PUSH
71929: LD_INT 81
71931: PUSH
71932: LD_VAR 0 8
71936: PUSH
71937: EMPTY
71938: LIST
71939: LIST
71940: PPUSH
71941: CALL_OW 69
71945: ST_TO_ADDR
// for i in result do
71946: LD_ADDR_VAR 0 4
71950: PUSH
71951: LD_VAR 0 3
71955: PUSH
71956: FOR_IN
71957: IFFALSE 72378
// begin tag := GetTag ( i ) + 1 ;
71959: LD_ADDR_VAR 0 9
71963: PUSH
71964: LD_VAR 0 4
71968: PPUSH
71969: CALL_OW 110
71973: PUSH
71974: LD_INT 1
71976: PLUS
71977: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71978: LD_ADDR_VAR 0 7
71982: PUSH
71983: LD_VAR 0 4
71987: PPUSH
71988: CALL_OW 250
71992: PPUSH
71993: LD_VAR 0 4
71997: PPUSH
71998: CALL_OW 251
72002: PPUSH
72003: LD_INT 6
72005: PPUSH
72006: CALL 71579 0 3
72010: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72011: LD_VAR 0 4
72015: PPUSH
72016: CALL_OW 247
72020: PUSH
72021: LD_INT 2
72023: EQUAL
72024: PUSH
72025: LD_VAR 0 7
72029: AND
72030: PUSH
72031: LD_VAR 0 4
72035: PPUSH
72036: CALL_OW 264
72040: PUSH
72041: LD_VAR 0 10
72045: IN
72046: NOT
72047: AND
72048: IFFALSE 72087
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72050: LD_VAR 0 4
72054: PPUSH
72055: LD_VAR 0 7
72059: PUSH
72060: LD_INT 1
72062: ARRAY
72063: PUSH
72064: LD_INT 1
72066: ARRAY
72067: PPUSH
72068: LD_VAR 0 7
72072: PUSH
72073: LD_INT 1
72075: ARRAY
72076: PUSH
72077: LD_INT 2
72079: ARRAY
72080: PPUSH
72081: CALL_OW 116
72085: GO 72376
// if path > tag then
72087: LD_VAR 0 2
72091: PUSH
72092: LD_VAR 0 9
72096: GREATER
72097: IFFALSE 72305
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72099: LD_ADDR_VAR 0 6
72103: PUSH
72104: LD_VAR 0 5
72108: PPUSH
72109: LD_INT 91
72111: PUSH
72112: LD_VAR 0 4
72116: PUSH
72117: LD_INT 8
72119: PUSH
72120: EMPTY
72121: LIST
72122: LIST
72123: LIST
72124: PPUSH
72125: CALL_OW 72
72129: ST_TO_ADDR
// if nearEnemy then
72130: LD_VAR 0 6
72134: IFFALSE 72203
// begin if GetWeapon ( i ) = ru_time_lapser then
72136: LD_VAR 0 4
72140: PPUSH
72141: CALL_OW 264
72145: PUSH
72146: LD_INT 49
72148: EQUAL
72149: IFFALSE 72177
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72151: LD_VAR 0 4
72155: PPUSH
72156: LD_VAR 0 6
72160: PPUSH
72161: LD_VAR 0 4
72165: PPUSH
72166: CALL_OW 74
72170: PPUSH
72171: CALL_OW 112
72175: GO 72201
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72177: LD_VAR 0 4
72181: PPUSH
72182: LD_VAR 0 6
72186: PPUSH
72187: LD_VAR 0 4
72191: PPUSH
72192: CALL_OW 74
72196: PPUSH
72197: CALL 73305 0 2
// end else
72201: GO 72303
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72203: LD_VAR 0 4
72207: PPUSH
72208: LD_VAR 0 2
72212: PUSH
72213: LD_VAR 0 9
72217: ARRAY
72218: PUSH
72219: LD_INT 1
72221: ARRAY
72222: PPUSH
72223: LD_VAR 0 2
72227: PUSH
72228: LD_VAR 0 9
72232: ARRAY
72233: PUSH
72234: LD_INT 2
72236: ARRAY
72237: PPUSH
72238: CALL_OW 297
72242: PUSH
72243: LD_INT 6
72245: GREATER
72246: IFFALSE 72289
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72248: LD_VAR 0 4
72252: PPUSH
72253: LD_VAR 0 2
72257: PUSH
72258: LD_VAR 0 9
72262: ARRAY
72263: PUSH
72264: LD_INT 1
72266: ARRAY
72267: PPUSH
72268: LD_VAR 0 2
72272: PUSH
72273: LD_VAR 0 9
72277: ARRAY
72278: PUSH
72279: LD_INT 2
72281: ARRAY
72282: PPUSH
72283: CALL_OW 114
72287: GO 72303
// SetTag ( i , tag ) ;
72289: LD_VAR 0 4
72293: PPUSH
72294: LD_VAR 0 9
72298: PPUSH
72299: CALL_OW 109
// end else
72303: GO 72376
// if enemy then
72305: LD_VAR 0 5
72309: IFFALSE 72376
// begin if GetWeapon ( i ) = ru_time_lapser then
72311: LD_VAR 0 4
72315: PPUSH
72316: CALL_OW 264
72320: PUSH
72321: LD_INT 49
72323: EQUAL
72324: IFFALSE 72352
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72326: LD_VAR 0 4
72330: PPUSH
72331: LD_VAR 0 5
72335: PPUSH
72336: LD_VAR 0 4
72340: PPUSH
72341: CALL_OW 74
72345: PPUSH
72346: CALL_OW 112
72350: GO 72376
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72352: LD_VAR 0 4
72356: PPUSH
72357: LD_VAR 0 5
72361: PPUSH
72362: LD_VAR 0 4
72366: PPUSH
72367: CALL_OW 74
72371: PPUSH
72372: CALL 73305 0 2
// end ; end ;
72376: GO 71956
72378: POP
72379: POP
// end ;
72380: LD_VAR 0 3
72384: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72385: LD_INT 0
72387: PPUSH
72388: PPUSH
72389: PPUSH
// if not unit or IsInUnit ( unit ) then
72390: LD_VAR 0 1
72394: NOT
72395: PUSH
72396: LD_VAR 0 1
72400: PPUSH
72401: CALL_OW 310
72405: OR
72406: IFFALSE 72410
// exit ;
72408: GO 72501
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72410: LD_ADDR_VAR 0 4
72414: PUSH
72415: LD_VAR 0 1
72419: PPUSH
72420: CALL_OW 250
72424: PPUSH
72425: LD_VAR 0 2
72429: PPUSH
72430: LD_INT 1
72432: PPUSH
72433: CALL_OW 272
72437: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72438: LD_ADDR_VAR 0 5
72442: PUSH
72443: LD_VAR 0 1
72447: PPUSH
72448: CALL_OW 251
72452: PPUSH
72453: LD_VAR 0 2
72457: PPUSH
72458: LD_INT 1
72460: PPUSH
72461: CALL_OW 273
72465: ST_TO_ADDR
// if ValidHex ( x , y ) then
72466: LD_VAR 0 4
72470: PPUSH
72471: LD_VAR 0 5
72475: PPUSH
72476: CALL_OW 488
72480: IFFALSE 72501
// ComTurnXY ( unit , x , y ) ;
72482: LD_VAR 0 1
72486: PPUSH
72487: LD_VAR 0 4
72491: PPUSH
72492: LD_VAR 0 5
72496: PPUSH
72497: CALL_OW 118
// end ;
72501: LD_VAR 0 3
72505: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72506: LD_INT 0
72508: PPUSH
72509: PPUSH
// result := false ;
72510: LD_ADDR_VAR 0 3
72514: PUSH
72515: LD_INT 0
72517: ST_TO_ADDR
// if not units then
72518: LD_VAR 0 2
72522: NOT
72523: IFFALSE 72527
// exit ;
72525: GO 72572
// for i in units do
72527: LD_ADDR_VAR 0 4
72531: PUSH
72532: LD_VAR 0 2
72536: PUSH
72537: FOR_IN
72538: IFFALSE 72570
// if See ( side , i ) then
72540: LD_VAR 0 1
72544: PPUSH
72545: LD_VAR 0 4
72549: PPUSH
72550: CALL_OW 292
72554: IFFALSE 72568
// begin result := true ;
72556: LD_ADDR_VAR 0 3
72560: PUSH
72561: LD_INT 1
72563: ST_TO_ADDR
// exit ;
72564: POP
72565: POP
72566: GO 72572
// end ;
72568: GO 72537
72570: POP
72571: POP
// end ;
72572: LD_VAR 0 3
72576: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72577: LD_INT 0
72579: PPUSH
72580: PPUSH
72581: PPUSH
72582: PPUSH
// if not unit or not points then
72583: LD_VAR 0 1
72587: NOT
72588: PUSH
72589: LD_VAR 0 2
72593: NOT
72594: OR
72595: IFFALSE 72599
// exit ;
72597: GO 72689
// dist := 99999 ;
72599: LD_ADDR_VAR 0 5
72603: PUSH
72604: LD_INT 99999
72606: ST_TO_ADDR
// for i in points do
72607: LD_ADDR_VAR 0 4
72611: PUSH
72612: LD_VAR 0 2
72616: PUSH
72617: FOR_IN
72618: IFFALSE 72687
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72620: LD_ADDR_VAR 0 6
72624: PUSH
72625: LD_VAR 0 1
72629: PPUSH
72630: LD_VAR 0 4
72634: PUSH
72635: LD_INT 1
72637: ARRAY
72638: PPUSH
72639: LD_VAR 0 4
72643: PUSH
72644: LD_INT 2
72646: ARRAY
72647: PPUSH
72648: CALL_OW 297
72652: ST_TO_ADDR
// if tmpDist < dist then
72653: LD_VAR 0 6
72657: PUSH
72658: LD_VAR 0 5
72662: LESS
72663: IFFALSE 72685
// begin result := i ;
72665: LD_ADDR_VAR 0 3
72669: PUSH
72670: LD_VAR 0 4
72674: ST_TO_ADDR
// dist := tmpDist ;
72675: LD_ADDR_VAR 0 5
72679: PUSH
72680: LD_VAR 0 6
72684: ST_TO_ADDR
// end ; end ;
72685: GO 72617
72687: POP
72688: POP
// end ;
72689: LD_VAR 0 3
72693: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72694: LD_INT 0
72696: PPUSH
// uc_side := side ;
72697: LD_ADDR_OWVAR 20
72701: PUSH
72702: LD_VAR 0 1
72706: ST_TO_ADDR
// uc_nation := 3 ;
72707: LD_ADDR_OWVAR 21
72711: PUSH
72712: LD_INT 3
72714: ST_TO_ADDR
// vc_chassis := 25 ;
72715: LD_ADDR_OWVAR 37
72719: PUSH
72720: LD_INT 25
72722: ST_TO_ADDR
// vc_engine := engine_siberite ;
72723: LD_ADDR_OWVAR 39
72727: PUSH
72728: LD_INT 3
72730: ST_TO_ADDR
// vc_control := control_computer ;
72731: LD_ADDR_OWVAR 38
72735: PUSH
72736: LD_INT 3
72738: ST_TO_ADDR
// vc_weapon := 59 ;
72739: LD_ADDR_OWVAR 40
72743: PUSH
72744: LD_INT 59
72746: ST_TO_ADDR
// result := CreateVehicle ;
72747: LD_ADDR_VAR 0 5
72751: PUSH
72752: CALL_OW 45
72756: ST_TO_ADDR
// SetDir ( result , d ) ;
72757: LD_VAR 0 5
72761: PPUSH
72762: LD_VAR 0 4
72766: PPUSH
72767: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72771: LD_VAR 0 5
72775: PPUSH
72776: LD_VAR 0 2
72780: PPUSH
72781: LD_VAR 0 3
72785: PPUSH
72786: LD_INT 0
72788: PPUSH
72789: CALL_OW 48
// end ;
72793: LD_VAR 0 5
72797: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72798: LD_INT 0
72800: PPUSH
72801: PPUSH
72802: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72803: LD_ADDR_VAR 0 2
72807: PUSH
72808: LD_INT 0
72810: PUSH
72811: LD_INT 0
72813: PUSH
72814: LD_INT 0
72816: PUSH
72817: LD_INT 0
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: LIST
72824: LIST
72825: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72826: LD_VAR 0 1
72830: NOT
72831: PUSH
72832: LD_VAR 0 1
72836: PPUSH
72837: CALL_OW 264
72841: PUSH
72842: LD_INT 12
72844: PUSH
72845: LD_INT 51
72847: PUSH
72848: LD_INT 32
72850: PUSH
72851: LD_INT 89
72853: PUSH
72854: EMPTY
72855: LIST
72856: LIST
72857: LIST
72858: LIST
72859: IN
72860: NOT
72861: OR
72862: IFFALSE 72866
// exit ;
72864: GO 72964
// for i := 1 to 3 do
72866: LD_ADDR_VAR 0 3
72870: PUSH
72871: DOUBLE
72872: LD_INT 1
72874: DEC
72875: ST_TO_ADDR
72876: LD_INT 3
72878: PUSH
72879: FOR_TO
72880: IFFALSE 72962
// begin tmp := GetCargo ( cargo , i ) ;
72882: LD_ADDR_VAR 0 4
72886: PUSH
72887: LD_VAR 0 1
72891: PPUSH
72892: LD_VAR 0 3
72896: PPUSH
72897: CALL_OW 289
72901: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72902: LD_ADDR_VAR 0 2
72906: PUSH
72907: LD_VAR 0 2
72911: PPUSH
72912: LD_VAR 0 3
72916: PPUSH
72917: LD_VAR 0 4
72921: PPUSH
72922: CALL_OW 1
72926: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72927: LD_ADDR_VAR 0 2
72931: PUSH
72932: LD_VAR 0 2
72936: PPUSH
72937: LD_INT 4
72939: PPUSH
72940: LD_VAR 0 2
72944: PUSH
72945: LD_INT 4
72947: ARRAY
72948: PUSH
72949: LD_VAR 0 4
72953: PLUS
72954: PPUSH
72955: CALL_OW 1
72959: ST_TO_ADDR
// end ;
72960: GO 72879
72962: POP
72963: POP
// end ;
72964: LD_VAR 0 2
72968: RET
// export function Length ( array ) ; begin
72969: LD_INT 0
72971: PPUSH
// result := array + 0 ;
72972: LD_ADDR_VAR 0 2
72976: PUSH
72977: LD_VAR 0 1
72981: PUSH
72982: LD_INT 0
72984: PLUS
72985: ST_TO_ADDR
// end ;
72986: LD_VAR 0 2
72990: RET
// export function PrepareArray ( array ) ; begin
72991: LD_INT 0
72993: PPUSH
// result := array diff 0 ;
72994: LD_ADDR_VAR 0 2
72998: PUSH
72999: LD_VAR 0 1
73003: PUSH
73004: LD_INT 0
73006: DIFF
73007: ST_TO_ADDR
// if not result [ 1 ] then
73008: LD_VAR 0 2
73012: PUSH
73013: LD_INT 1
73015: ARRAY
73016: NOT
73017: IFFALSE 73037
// result := Delete ( result , 1 ) ;
73019: LD_ADDR_VAR 0 2
73023: PUSH
73024: LD_VAR 0 2
73028: PPUSH
73029: LD_INT 1
73031: PPUSH
73032: CALL_OW 3
73036: ST_TO_ADDR
// end ;
73037: LD_VAR 0 2
73041: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73042: LD_INT 0
73044: PPUSH
73045: PPUSH
73046: PPUSH
73047: PPUSH
// sibRocketRange := 25 ;
73048: LD_ADDR_VAR 0 6
73052: PUSH
73053: LD_INT 25
73055: ST_TO_ADDR
// result := false ;
73056: LD_ADDR_VAR 0 4
73060: PUSH
73061: LD_INT 0
73063: ST_TO_ADDR
// for i := 0 to 5 do
73064: LD_ADDR_VAR 0 5
73068: PUSH
73069: DOUBLE
73070: LD_INT 0
73072: DEC
73073: ST_TO_ADDR
73074: LD_INT 5
73076: PUSH
73077: FOR_TO
73078: IFFALSE 73145
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73080: LD_VAR 0 1
73084: PPUSH
73085: LD_VAR 0 5
73089: PPUSH
73090: LD_VAR 0 6
73094: PPUSH
73095: CALL_OW 272
73099: PPUSH
73100: LD_VAR 0 2
73104: PPUSH
73105: LD_VAR 0 5
73109: PPUSH
73110: LD_VAR 0 6
73114: PPUSH
73115: CALL_OW 273
73119: PPUSH
73120: LD_VAR 0 3
73124: PPUSH
73125: CALL_OW 309
73129: IFFALSE 73143
// begin result := true ;
73131: LD_ADDR_VAR 0 4
73135: PUSH
73136: LD_INT 1
73138: ST_TO_ADDR
// exit ;
73139: POP
73140: POP
73141: GO 73147
// end ;
73143: GO 73077
73145: POP
73146: POP
// end ;
73147: LD_VAR 0 4
73151: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73152: LD_INT 0
73154: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73155: LD_VAR 0 1
73159: PPUSH
73160: LD_VAR 0 2
73164: PPUSH
73165: LD_INT 0
73167: PPUSH
73168: LD_INT 0
73170: PPUSH
73171: LD_INT 1
73173: PPUSH
73174: LD_INT 0
73176: PPUSH
73177: CALL_OW 587
// end ;
73181: LD_VAR 0 3
73185: RET
// export function CenterOnNow ( unit ) ; begin
73186: LD_INT 0
73188: PPUSH
// result := IsInUnit ( unit ) ;
73189: LD_ADDR_VAR 0 2
73193: PUSH
73194: LD_VAR 0 1
73198: PPUSH
73199: CALL_OW 310
73203: ST_TO_ADDR
// if not result then
73204: LD_VAR 0 2
73208: NOT
73209: IFFALSE 73221
// result := unit ;
73211: LD_ADDR_VAR 0 2
73215: PUSH
73216: LD_VAR 0 1
73220: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73221: LD_VAR 0 1
73225: PPUSH
73226: CALL_OW 87
// end ;
73230: LD_VAR 0 2
73234: RET
// export function ComMoveHex ( unit , hex ) ; begin
73235: LD_INT 0
73237: PPUSH
// if not hex then
73238: LD_VAR 0 2
73242: NOT
73243: IFFALSE 73247
// exit ;
73245: GO 73300
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73247: LD_VAR 0 2
73251: PUSH
73252: LD_INT 1
73254: ARRAY
73255: PPUSH
73256: LD_VAR 0 2
73260: PUSH
73261: LD_INT 2
73263: ARRAY
73264: PPUSH
73265: CALL_OW 428
73269: IFFALSE 73273
// exit ;
73271: GO 73300
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73273: LD_VAR 0 1
73277: PPUSH
73278: LD_VAR 0 2
73282: PUSH
73283: LD_INT 1
73285: ARRAY
73286: PPUSH
73287: LD_VAR 0 2
73291: PUSH
73292: LD_INT 2
73294: ARRAY
73295: PPUSH
73296: CALL_OW 111
// end ;
73300: LD_VAR 0 3
73304: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73305: LD_INT 0
73307: PPUSH
73308: PPUSH
73309: PPUSH
// if not unit or not enemy then
73310: LD_VAR 0 1
73314: NOT
73315: PUSH
73316: LD_VAR 0 2
73320: NOT
73321: OR
73322: IFFALSE 73326
// exit ;
73324: GO 73450
// x := GetX ( enemy ) ;
73326: LD_ADDR_VAR 0 4
73330: PUSH
73331: LD_VAR 0 2
73335: PPUSH
73336: CALL_OW 250
73340: ST_TO_ADDR
// y := GetY ( enemy ) ;
73341: LD_ADDR_VAR 0 5
73345: PUSH
73346: LD_VAR 0 2
73350: PPUSH
73351: CALL_OW 251
73355: ST_TO_ADDR
// if ValidHex ( x , y ) then
73356: LD_VAR 0 4
73360: PPUSH
73361: LD_VAR 0 5
73365: PPUSH
73366: CALL_OW 488
73370: IFFALSE 73450
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
73372: LD_VAR 0 2
73376: PPUSH
73377: CALL_OW 247
73381: PUSH
73382: LD_INT 3
73384: PUSH
73385: LD_INT 2
73387: PUSH
73388: EMPTY
73389: LIST
73390: LIST
73391: IN
73392: PUSH
73393: LD_VAR 0 1
73397: PPUSH
73398: CALL_OW 255
73402: PPUSH
73403: LD_VAR 0 2
73407: PPUSH
73408: CALL_OW 292
73412: AND
73413: IFFALSE 73431
// ComAttackUnit ( unit , enemy ) else
73415: LD_VAR 0 1
73419: PPUSH
73420: LD_VAR 0 2
73424: PPUSH
73425: CALL_OW 115
73429: GO 73450
// ComAgressiveMove ( unit , x , y ) ;
73431: LD_VAR 0 1
73435: PPUSH
73436: LD_VAR 0 4
73440: PPUSH
73441: LD_VAR 0 5
73445: PPUSH
73446: CALL_OW 114
// end ; end_of_file
73450: LD_VAR 0 3
73454: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73455: LD_VAR 0 1
73459: PUSH
73460: LD_INT 200
73462: DOUBLE
73463: GREATEREQUAL
73464: IFFALSE 73472
73466: LD_INT 299
73468: DOUBLE
73469: LESSEQUAL
73470: IFTRUE 73474
73472: GO 73506
73474: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73475: LD_VAR 0 1
73479: PPUSH
73480: LD_VAR 0 2
73484: PPUSH
73485: LD_VAR 0 3
73489: PPUSH
73490: LD_VAR 0 4
73494: PPUSH
73495: LD_VAR 0 5
73499: PPUSH
73500: CALL 27179 0 5
73504: GO 73583
73506: LD_INT 300
73508: DOUBLE
73509: GREATEREQUAL
73510: IFFALSE 73518
73512: LD_INT 399
73514: DOUBLE
73515: LESSEQUAL
73516: IFTRUE 73520
73518: GO 73582
73520: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73521: LD_VAR 0 1
73525: PPUSH
73526: LD_VAR 0 2
73530: PPUSH
73531: LD_VAR 0 3
73535: PPUSH
73536: LD_VAR 0 4
73540: PPUSH
73541: LD_VAR 0 5
73545: PPUSH
73546: LD_VAR 0 6
73550: PPUSH
73551: LD_VAR 0 7
73555: PPUSH
73556: LD_VAR 0 8
73560: PPUSH
73561: LD_VAR 0 9
73565: PPUSH
73566: LD_VAR 0 10
73570: PPUSH
73571: LD_VAR 0 11
73575: PPUSH
73576: CALL 23504 0 11
73580: GO 73583
73582: POP
// end ;
73583: PPOPN 11
73585: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73586: LD_VAR 0 1
73590: PPUSH
73591: LD_VAR 0 2
73595: PPUSH
73596: LD_VAR 0 3
73600: PPUSH
73601: LD_VAR 0 4
73605: PPUSH
73606: LD_VAR 0 5
73610: PPUSH
73611: CALL 26915 0 5
// end ; end_of_file
73615: PPOPN 5
73617: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73618: LD_VAR 0 1
73622: PPUSH
73623: LD_VAR 0 2
73627: PPUSH
73628: LD_VAR 0 3
73632: PPUSH
73633: LD_VAR 0 4
73637: PPUSH
73638: LD_VAR 0 5
73642: PPUSH
73643: LD_VAR 0 6
73647: PPUSH
73648: CALL 11156 0 6
// end ;
73652: PPOPN 6
73654: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73655: LD_INT 0
73657: PPUSH
// begin if not units then
73658: LD_VAR 0 1
73662: NOT
73663: IFFALSE 73667
// exit ;
73665: GO 73667
// end ;
73667: PPOPN 7
73669: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73670: CALL 11060 0 0
// end ;
73674: PPOPN 1
73676: END
