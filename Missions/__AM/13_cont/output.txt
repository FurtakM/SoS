// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak = 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus = 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot = 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched = 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources = [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles = [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 = 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 = 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 = 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 = 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 = 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// mission_prefix = 13f_ ;
 154: LD_ADDR_EXP 34
 158: PUSH
 159: LD_STRING 13f_
 161: ST_TO_ADDR
// debugMode = 0 ;
 162: LD_ADDR_EXP 40
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// achivCounter := 0 ;
 170: LD_ADDR_EXP 41
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// if Difficulty = 1 then
 178: LD_OWVAR 67
 182: PUSH
 183: LD_INT 1
 185: EQUAL
 186: IFFALSE 195
// RemoveEnvironmentArea ( oilBlockArea ) ;
 188: LD_INT 15
 190: PPUSH
 191: CALL_OW 355
// PrepareVehicles ;
 195: CALL 1245 0 0
// PrepareHeroes ;
 199: CALL 571 0 0
// PrepareAmericansRandom ;
 203: CALL 1149 0 0
// PrepareDifficulty ;
 207: CALL 6427 0 0
// end ;
 211: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 212: LD_EXP 40
 216: PUSH
 217: LD_INT 1
 219: EQUAL
 220: IFFALSE 526
 222: GO 224
 224: DISABLE
 225: LD_INT 0
 227: PPUSH
// begin enable ;
 228: ENABLE
// fogoff ( true ) ;
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 236: LD_ADDR_VAR 0 1
 240: PUSH
 241: LD_INT 22
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: LD_INT 21
 253: PUSH
 254: LD_INT 1
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: PPUSH
 265: CALL_OW 69
 269: PUSH
 270: FOR_IN
 271: IFFALSE 287
// SetLives ( i , 1000 ) ;
 273: LD_VAR 0 1
 277: PPUSH
 278: LD_INT 1000
 280: PPUSH
 281: CALL_OW 234
 285: GO 270
 287: POP
 288: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 22
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: LD_INT 2
 306: PUSH
 307: LD_INT 30
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 30
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 366
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: CALL_OW 274
 353: PPUSH
 354: LD_INT 1
 356: PPUSH
 357: LD_INT 9999
 359: PPUSH
 360: CALL_OW 277
 364: GO 341
 366: POP
 367: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 30
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 30
 398: PUSH
 399: LD_INT 1
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 2
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 30
 477: PUSH
 478: LD_INT 1
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PPUSH
 494: CALL_OW 69
 498: PUSH
 499: FOR_IN
 500: IFFALSE 524
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 502: LD_VAR 0 1
 506: PPUSH
 507: CALL_OW 274
 511: PPUSH
 512: LD_INT 3
 514: PPUSH
 515: LD_INT 9999
 517: PPUSH
 518: CALL_OW 277
 522: GO 499
 524: POP
 525: POP
// end ;
 526: PPOPN 1
 528: END
// every 0 0$1 trigger achivCounter >= 2 do
 529: LD_EXP 41
 533: PUSH
 534: LD_INT 2
 536: GREATEREQUAL
 537: IFFALSE 549
 539: GO 541
 541: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 542: LD_STRING ACH_REMOTE
 544: PPUSH
 545: CALL_OW 543
 549: END
// every 0 0$1 trigger destroyCounter >= 30 do
 550: LD_EXP 42
 554: PUSH
 555: LD_INT 30
 557: GREATEREQUAL
 558: IFFALSE 570
 560: GO 562
 562: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 563: LD_STRING ACH_DEFMASTER
 565: PPUSH
 566: CALL_OW 543
 570: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
// uc_side = 1 ;
 577: LD_ADDR_OWVAR 20
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// JMM = PrepareUnit ( 13c_JMM , true ) ;
 585: LD_ADDR_EXP 1
 589: PUSH
 590: LD_STRING 13c_JMM
 592: PPUSH
 593: LD_INT 1
 595: PPUSH
 596: CALL 5757 0 2
 600: ST_TO_ADDR
// Stevens = PrepareUnit ( 13c_Stevens , true ) ;
 601: LD_ADDR_EXP 2
 605: PUSH
 606: LD_STRING 13c_Stevens
 608: PPUSH
 609: LD_INT 1
 611: PPUSH
 612: CALL 5757 0 2
 616: ST_TO_ADDR
// Lisa = PrepareUnit ( 13c_Lisa , true ) ;
 617: LD_ADDR_EXP 3
 621: PUSH
 622: LD_STRING 13c_Lisa
 624: PPUSH
 625: LD_INT 1
 627: PPUSH
 628: CALL 5757 0 2
 632: ST_TO_ADDR
// Donaldson = PrepareUnit ( 13c_Donaldson , true ) ;
 633: LD_ADDR_EXP 4
 637: PUSH
 638: LD_STRING 13c_Donaldson
 640: PPUSH
 641: LD_INT 1
 643: PPUSH
 644: CALL 5757 0 2
 648: ST_TO_ADDR
// Bobby = PrepareUnit ( 13c_Bobby , true ) ;
 649: LD_ADDR_EXP 5
 653: PUSH
 654: LD_STRING 13c_Bobby
 656: PPUSH
 657: LD_INT 1
 659: PPUSH
 660: CALL 5757 0 2
 664: ST_TO_ADDR
// Cyrus = PrepareUnit ( 13c_Cyrus , true ) ;
 665: LD_ADDR_EXP 6
 669: PUSH
 670: LD_STRING 13c_Cyrus
 672: PPUSH
 673: LD_INT 1
 675: PPUSH
 676: CALL 5757 0 2
 680: ST_TO_ADDR
// Denis = PrepareUnit ( 13c_Denis , true ) ;
 681: LD_ADDR_EXP 7
 685: PUSH
 686: LD_STRING 13c_Denis
 688: PPUSH
 689: LD_INT 1
 691: PPUSH
 692: CALL 5757 0 2
 696: ST_TO_ADDR
// Brown = PrepareUnit ( 13c_Brown , true ) ;
 697: LD_ADDR_EXP 8
 701: PUSH
 702: LD_STRING 13c_Brown
 704: PPUSH
 705: LD_INT 1
 707: PPUSH
 708: CALL 5757 0 2
 712: ST_TO_ADDR
// Gladstone = PrepareUnit ( 13c_Gladstone , true ) ;
 713: LD_ADDR_EXP 9
 717: PUSH
 718: LD_STRING 13c_Gladstone
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: CALL 5757 0 2
 728: ST_TO_ADDR
// Houten = PrepareUnit ( 13c_Houten , true ) ;
 729: LD_ADDR_EXP 10
 733: PUSH
 734: LD_STRING 13c_Houten
 736: PPUSH
 737: LD_INT 1
 739: PPUSH
 740: CALL 5757 0 2
 744: ST_TO_ADDR
// Cornel = PrepareUnit ( 13c_Cornel , true ) ;
 745: LD_ADDR_EXP 11
 749: PUSH
 750: LD_STRING 13c_Cornel
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: CALL 5757 0 2
 760: ST_TO_ADDR
// Gary = PrepareUnit ( 13c_Gary , true ) ;
 761: LD_ADDR_EXP 12
 765: PUSH
 766: LD_STRING 13c_Gary
 768: PPUSH
 769: LD_INT 1
 771: PPUSH
 772: CALL 5757 0 2
 776: ST_TO_ADDR
// Frank = PrepareUnit ( 13c_Frank , true ) ;
 777: LD_ADDR_EXP 13
 781: PUSH
 782: LD_STRING 13c_Frank
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: CALL 5757 0 2
 792: ST_TO_ADDR
// Kikuchi = PrepareUnit ( 13c_Kikuchi , true ) ;
 793: LD_ADDR_EXP 14
 797: PUSH
 798: LD_STRING 13c_Kikuchi
 800: PPUSH
 801: LD_INT 1
 803: PPUSH
 804: CALL 5757 0 2
 808: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 809: LD_ADDR_EXP 15
 813: PUSH
 814: LD_STRING Powell
 816: PPUSH
 817: LD_INT 0
 819: PPUSH
 820: CALL 5757 0 2
 824: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 825: LD_ADDR_VAR 0 2
 829: PUSH
 830: LD_EXP 1
 834: PUSH
 835: LD_EXP 2
 839: PUSH
 840: LD_EXP 3
 844: PUSH
 845: LD_EXP 4
 849: PUSH
 850: LD_EXP 5
 854: PUSH
 855: LD_EXP 6
 859: PUSH
 860: LD_EXP 7
 864: PUSH
 865: LD_EXP 8
 869: PUSH
 870: LD_EXP 9
 874: PUSH
 875: LD_EXP 10
 879: PUSH
 880: LD_EXP 11
 884: PUSH
 885: LD_EXP 12
 889: PUSH
 890: LD_EXP 13
 894: PUSH
 895: LD_EXP 14
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 916: LD_ADDR_VAR 0 3
 920: PUSH
 921: LD_INT 22
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 33
 933: PUSH
 934: LD_INT 1
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 21
 943: PUSH
 944: LD_INT 2
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: LIST
 955: PPUSH
 956: CALL_OW 69
 960: ST_TO_ADDR
// for i = tmp downto 1 do
 961: LD_ADDR_VAR 0 4
 965: PUSH
 966: DOUBLE
 967: LD_VAR 0 2
 971: INC
 972: ST_TO_ADDR
 973: LD_INT 1
 975: PUSH
 976: FOR_DOWNTO
 977: IFFALSE 1014
// if not tmp [ i ] then
 979: LD_VAR 0 2
 983: PUSH
 984: LD_VAR 0 4
 988: ARRAY
 989: NOT
 990: IFFALSE 1012
// tmp := Delete ( tmp , i ) ;
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: LD_VAR 0 2
1001: PPUSH
1002: LD_VAR 0 4
1006: PPUSH
1007: CALL_OW 3
1011: ST_TO_ADDR
1012: GO 976
1014: POP
1015: POP
// for i = 1 to tmp do
1016: LD_ADDR_VAR 0 4
1020: PUSH
1021: DOUBLE
1022: LD_INT 1
1024: DEC
1025: ST_TO_ADDR
1026: LD_VAR 0 2
1030: PUSH
1031: FOR_TO
1032: IFFALSE 1062
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1034: LD_VAR 0 2
1038: PUSH
1039: LD_VAR 0 4
1043: ARRAY
1044: PPUSH
1045: LD_VAR 0 3
1049: PUSH
1050: LD_VAR 0 4
1054: ARRAY
1055: PPUSH
1056: CALL_OW 52
1060: GO 1031
1062: POP
1063: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1064: LD_INT 22
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PUSH
1074: LD_INT 25
1076: PUSH
1077: LD_INT 2
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PPUSH
1088: CALL_OW 69
1092: PUSH
1093: LD_INT 0
1095: EQUAL
1096: PUSH
1097: LD_INT 22
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: PUSH
1107: LD_INT 34
1109: PUSH
1110: LD_INT 13
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PPUSH
1121: CALL_OW 69
1125: PUSH
1126: LD_INT 0
1128: EQUAL
1129: AND
1130: IFFALSE 1144
// SetClass ( JMM , 2 ) ;
1132: LD_EXP 1
1136: PPUSH
1137: LD_INT 2
1139: PPUSH
1140: CALL_OW 336
// end ;
1144: LD_VAR 0 1
1148: RET
// export function PrepareAmericansRandom ; var i ; begin
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
// uc_side = 1 ;
1153: LD_ADDR_OWVAR 20
1157: PUSH
1158: LD_INT 1
1160: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1161: LD_ADDR_EXP 16
1165: PUSH
1166: LD_STRING 13c_others
1168: PPUSH
1169: CALL_OW 31
1173: ST_TO_ADDR
// for i in others13 do
1174: LD_ADDR_VAR 0 2
1178: PUSH
1179: LD_EXP 16
1183: PUSH
1184: FOR_IN
1185: IFFALSE 1238
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1187: LD_VAR 0 2
1191: PPUSH
1192: LD_INT 22
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: PUSH
1202: LD_INT 21
1204: PUSH
1205: LD_INT 2
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 58
1214: PUSH
1215: EMPTY
1216: LIST
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: LIST
1222: PPUSH
1223: CALL_OW 69
1227: PUSH
1228: LD_INT 1
1230: ARRAY
1231: PPUSH
1232: CALL_OW 52
1236: GO 1184
1238: POP
1239: POP
// end ;
1240: LD_VAR 0 1
1244: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1245: LD_INT 0
1247: PPUSH
1248: PPUSH
1249: PPUSH
1250: PPUSH
1251: PPUSH
1252: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ ] ) ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_STRING 13_VehiclesIn13_1
1260: PPUSH
1261: EMPTY
1262: PPUSH
1263: CALL_OW 30
1267: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1268: LD_ADDR_EXP 24
1272: PUSH
1273: LD_STRING 13_ResourcesInCargo13_1
1275: PPUSH
1276: EMPTY
1277: PPUSH
1278: CALL_OW 30
1282: ST_TO_ADDR
// cargoList = [ ] ;
1283: LD_ADDR_VAR 0 6
1287: PUSH
1288: EMPTY
1289: ST_TO_ADDR
// uc_side = 1 ;
1290: LD_ADDR_OWVAR 20
1294: PUSH
1295: LD_INT 1
1297: ST_TO_ADDR
// if vehicles > 0 then
1298: LD_VAR 0 5
1302: PUSH
1303: LD_INT 0
1305: GREATER
1306: IFFALSE 1661
// begin for i := 1 to vehicles do
1308: LD_ADDR_VAR 0 2
1312: PUSH
1313: DOUBLE
1314: LD_INT 1
1316: DEC
1317: ST_TO_ADDR
1318: LD_VAR 0 5
1322: PUSH
1323: FOR_TO
1324: IFFALSE 1473
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1326: LD_ADDR_OWVAR 21
1330: PUSH
1331: LD_VAR 0 5
1335: PUSH
1336: LD_VAR 0 2
1340: ARRAY
1341: PUSH
1342: LD_INT 1
1344: ARRAY
1345: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1346: LD_ADDR_OWVAR 37
1350: PUSH
1351: LD_VAR 0 5
1355: PUSH
1356: LD_VAR 0 2
1360: ARRAY
1361: PUSH
1362: LD_INT 2
1364: ARRAY
1365: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1366: LD_ADDR_OWVAR 39
1370: PUSH
1371: LD_VAR 0 5
1375: PUSH
1376: LD_VAR 0 2
1380: ARRAY
1381: PUSH
1382: LD_INT 3
1384: ARRAY
1385: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1386: LD_ADDR_OWVAR 38
1390: PUSH
1391: LD_VAR 0 5
1395: PUSH
1396: LD_VAR 0 2
1400: ARRAY
1401: PUSH
1402: LD_INT 4
1404: ARRAY
1405: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1406: LD_ADDR_OWVAR 40
1410: PUSH
1411: LD_VAR 0 5
1415: PUSH
1416: LD_VAR 0 2
1420: ARRAY
1421: PUSH
1422: LD_INT 5
1424: ARRAY
1425: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1426: LD_ADDR_OWVAR 41
1430: PUSH
1431: LD_INT 40
1433: ST_TO_ADDR
// veh = CreateVehicle ;
1434: LD_ADDR_VAR 0 4
1438: PUSH
1439: CALL_OW 45
1443: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1444: LD_VAR 0 4
1448: PPUSH
1449: LD_INT 3
1451: PPUSH
1452: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1456: LD_VAR 0 4
1460: PPUSH
1461: LD_INT 2
1463: PPUSH
1464: LD_INT 0
1466: PPUSH
1467: CALL_OW 49
// end ;
1471: GO 1323
1473: POP
1474: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1475: LD_ADDR_VAR 0 6
1479: PUSH
1480: LD_INT 22
1482: PUSH
1483: LD_INT 1
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 21
1492: PUSH
1493: LD_INT 2
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 34
1502: PUSH
1503: LD_INT 12
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: LIST
1514: PPUSH
1515: CALL_OW 69
1519: ST_TO_ADDR
// if cargoList > 0 then
1520: LD_VAR 0 6
1524: PUSH
1525: LD_INT 0
1527: GREATER
1528: IFFALSE 1661
// for i = 1 to cargoList do
1530: LD_ADDR_VAR 0 2
1534: PUSH
1535: DOUBLE
1536: LD_INT 1
1538: DEC
1539: ST_TO_ADDR
1540: LD_VAR 0 6
1544: PUSH
1545: FOR_TO
1546: IFFALSE 1659
// begin if resources > 0 then
1548: LD_EXP 24
1552: PUSH
1553: LD_INT 0
1555: GREATER
1556: IFFALSE 1657
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1558: LD_VAR 0 6
1562: PUSH
1563: LD_VAR 0 2
1567: ARRAY
1568: PPUSH
1569: LD_INT 1
1571: PPUSH
1572: LD_EXP 24
1576: PUSH
1577: LD_VAR 0 2
1581: ARRAY
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PPUSH
1587: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1591: LD_VAR 0 6
1595: PUSH
1596: LD_VAR 0 2
1600: ARRAY
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_EXP 24
1609: PUSH
1610: LD_VAR 0 2
1614: ARRAY
1615: PUSH
1616: LD_INT 2
1618: ARRAY
1619: PPUSH
1620: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1624: LD_VAR 0 6
1628: PUSH
1629: LD_VAR 0 2
1633: ARRAY
1634: PPUSH
1635: LD_INT 3
1637: PPUSH
1638: LD_EXP 24
1642: PUSH
1643: LD_VAR 0 2
1647: ARRAY
1648: PUSH
1649: LD_INT 3
1651: ARRAY
1652: PPUSH
1653: CALL_OW 291
// end ; end ;
1657: GO 1545
1659: POP
1660: POP
// end ; end ;
1661: LD_VAR 0 1
1665: RET
// export function PowellSupport ; var i , veh , un ; begin
1666: LD_INT 0
1668: PPUSH
1669: PPUSH
1670: PPUSH
1671: PPUSH
// for i = 1 to 3 do
1672: LD_ADDR_VAR 0 2
1676: PUSH
1677: DOUBLE
1678: LD_INT 1
1680: DEC
1681: ST_TO_ADDR
1682: LD_INT 3
1684: PUSH
1685: FOR_TO
1686: IFFALSE 1887
// begin uc_nation = 1 ;
1688: LD_ADDR_OWVAR 21
1692: PUSH
1693: LD_INT 1
1695: ST_TO_ADDR
// uc_side = 1 ;
1696: LD_ADDR_OWVAR 20
1700: PUSH
1701: LD_INT 1
1703: ST_TO_ADDR
// vc_engine = 3 ;
1704: LD_ADDR_OWVAR 39
1708: PUSH
1709: LD_INT 3
1711: ST_TO_ADDR
// vc_control = 1 ;
1712: LD_ADDR_OWVAR 38
1716: PUSH
1717: LD_INT 1
1719: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1720: LD_ADDR_OWVAR 40
1724: PUSH
1725: LD_INT 9
1727: PUSH
1728: LD_INT 5
1730: PUSH
1731: LD_INT 4
1733: PUSH
1734: LD_INT 7
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: LD_INT 1
1749: PPUSH
1750: LD_INT 5
1752: PPUSH
1753: CALL_OW 12
1757: ARRAY
1758: ST_TO_ADDR
// if vc_weapon = 6 then
1759: LD_OWVAR 40
1763: PUSH
1764: LD_INT 6
1766: EQUAL
1767: IFFALSE 1779
// vc_chassis = 4 else
1769: LD_ADDR_OWVAR 37
1773: PUSH
1774: LD_INT 4
1776: ST_TO_ADDR
1777: GO 1787
// vc_chassis = 3 ;
1779: LD_ADDR_OWVAR 37
1783: PUSH
1784: LD_INT 3
1786: ST_TO_ADDR
// veh = CreateVehicle ;
1787: LD_ADDR_VAR 0 3
1791: PUSH
1792: CALL_OW 45
1796: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1797: LD_VAR 0 3
1801: PPUSH
1802: LD_INT 2
1804: PPUSH
1805: LD_INT 0
1807: PPUSH
1808: CALL_OW 49
// SetDir ( veh , 1 ) ;
1812: LD_VAR 0 3
1816: PPUSH
1817: LD_INT 1
1819: PPUSH
1820: CALL_OW 233
// hc_gallery =  ;
1824: LD_ADDR_OWVAR 33
1828: PUSH
1829: LD_STRING 
1831: ST_TO_ADDR
// hc_name =  ;
1832: LD_ADDR_OWVAR 26
1836: PUSH
1837: LD_STRING 
1839: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
1840: LD_INT 0
1842: PPUSH
1843: LD_INT 3
1845: PPUSH
1846: LD_INT 7
1848: PPUSH
1849: LD_INT 10
1851: PPUSH
1852: CALL_OW 12
1856: PPUSH
1857: CALL_OW 380
// un = CreateHuman ;
1861: LD_ADDR_VAR 0 4
1865: PUSH
1866: CALL_OW 44
1870: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1871: LD_VAR 0 4
1875: PPUSH
1876: LD_VAR 0 3
1880: PPUSH
1881: CALL_OW 52
// end ;
1885: GO 1685
1887: POP
1888: POP
// end ; end_of_file
1889: LD_VAR 0 1
1893: RET
// export function PrepareBurlak ; begin
1894: LD_INT 0
1896: PPUSH
// uc_side = 7 ;
1897: LD_ADDR_OWVAR 20
1901: PUSH
1902: LD_INT 7
1904: ST_TO_ADDR
// uc_nation = 3 ;
1905: LD_ADDR_OWVAR 21
1909: PUSH
1910: LD_INT 3
1912: ST_TO_ADDR
// vc_engine = 3 ;
1913: LD_ADDR_OWVAR 39
1917: PUSH
1918: LD_INT 3
1920: ST_TO_ADDR
// vc_control = 1 ;
1921: LD_ADDR_OWVAR 38
1925: PUSH
1926: LD_INT 1
1928: ST_TO_ADDR
// vc_weapon = 46 ;
1929: LD_ADDR_OWVAR 40
1933: PUSH
1934: LD_INT 46
1936: ST_TO_ADDR
// vc_chassis = 24 ;
1937: LD_ADDR_OWVAR 37
1941: PUSH
1942: LD_INT 24
1944: ST_TO_ADDR
// Masha = CreateVehicle ;
1945: LD_ADDR_EXP 18
1949: PUSH
1950: CALL_OW 45
1954: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
1955: LD_EXP 18
1959: PPUSH
1960: LD_INT 3
1962: PPUSH
1963: LD_INT 0
1965: PPUSH
1966: CALL_OW 49
// SetMark ( Masha , 1 ) ;
1970: LD_EXP 18
1974: PPUSH
1975: LD_INT 1
1977: PPUSH
1978: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ) ;
1982: LD_ADDR_EXP 17
1986: PUSH
1987: LD_STRING Burlak
1989: PPUSH
1990: LD_INT 0
1992: PPUSH
1993: CALL 5757 0 2
1997: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
1998: LD_EXP 17
2002: PPUSH
2003: LD_EXP 18
2007: PPUSH
2008: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2012: LD_EXP 18
2016: PPUSH
2017: LD_INT 107
2019: PPUSH
2020: LD_INT 118
2022: PPUSH
2023: CALL_OW 114
// spawnBurlak = 1 ;
2027: LD_ADDR_EXP 27
2031: PUSH
2032: LD_INT 1
2034: ST_TO_ADDR
// end ;
2035: LD_VAR 0 1
2039: RET
// export function BurlakArmy ; var i , veh , tmp ; begin
2040: LD_INT 0
2042: PPUSH
2043: PPUSH
2044: PPUSH
2045: PPUSH
// uc_side = 7 ;
2046: LD_ADDR_OWVAR 20
2050: PUSH
2051: LD_INT 7
2053: ST_TO_ADDR
// uc_nation = 3 ;
2054: LD_ADDR_OWVAR 21
2058: PUSH
2059: LD_INT 3
2061: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ) ;
2062: LD_ADDR_EXP 19
2066: PUSH
2067: LD_STRING Gnyevko
2069: PPUSH
2070: LD_INT 0
2072: PPUSH
2073: CALL 5757 0 2
2077: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ) ;
2078: LD_ADDR_EXP 20
2082: PUSH
2083: LD_STRING Titov
2085: PPUSH
2086: LD_INT 0
2088: PPUSH
2089: CALL 5757 0 2
2093: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ) ;
2094: LD_ADDR_EXP 21
2098: PUSH
2099: LD_STRING Xavier2
2101: PPUSH
2102: LD_INT 0
2104: PPUSH
2105: CALL 5757 0 2
2109: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
2110: LD_ADDR_EXP 22
2114: PUSH
2115: LD_STRING Belkov
2117: PPUSH
2118: LD_INT 0
2120: PPUSH
2121: CALL 5757 0 2
2125: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ) ;
2126: LD_ADDR_EXP 23
2130: PUSH
2131: LD_STRING Lipshchin
2133: PPUSH
2134: LD_INT 0
2136: PPUSH
2137: CALL 5757 0 2
2141: ST_TO_ADDR
// for i = 1 to 5 do
2142: LD_ADDR_VAR 0 2
2146: PUSH
2147: DOUBLE
2148: LD_INT 1
2150: DEC
2151: ST_TO_ADDR
2152: LD_INT 5
2154: PUSH
2155: FOR_TO
2156: IFFALSE 2244
// begin vc_engine = 3 ;
2158: LD_ADDR_OWVAR 39
2162: PUSH
2163: LD_INT 3
2165: ST_TO_ADDR
// vc_control = 1 ;
2166: LD_ADDR_OWVAR 38
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2174: LD_ADDR_OWVAR 40
2178: PUSH
2179: LD_INT 43
2181: PUSH
2182: LD_INT 44
2184: PUSH
2185: LD_INT 45
2187: PUSH
2188: LD_INT 49
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 1
2199: PPUSH
2200: LD_INT 4
2202: PPUSH
2203: CALL_OW 12
2207: ARRAY
2208: ST_TO_ADDR
// vc_chassis = 22 ;
2209: LD_ADDR_OWVAR 37
2213: PUSH
2214: LD_INT 22
2216: ST_TO_ADDR
// veh = CreateVehicle ;
2217: LD_ADDR_VAR 0 3
2221: PUSH
2222: CALL_OW 45
2226: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2227: LD_VAR 0 3
2231: PPUSH
2232: LD_INT 3
2234: PPUSH
2235: LD_INT 0
2237: PPUSH
2238: CALL_OW 49
// end ;
2242: GO 2155
2244: POP
2245: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2246: LD_ADDR_VAR 0 4
2250: PUSH
2251: LD_INT 22
2253: PUSH
2254: LD_INT 7
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 21
2263: PUSH
2264: LD_INT 2
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PUSH
2271: LD_INT 58
2273: PUSH
2274: EMPTY
2275: LIST
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: PPUSH
2282: CALL_OW 69
2286: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2287: LD_EXP 19
2291: PPUSH
2292: LD_VAR 0 4
2296: PUSH
2297: LD_INT 1
2299: ARRAY
2300: PPUSH
2301: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2305: LD_EXP 20
2309: PPUSH
2310: LD_VAR 0 4
2314: PUSH
2315: LD_INT 2
2317: ARRAY
2318: PPUSH
2319: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2323: LD_EXP 21
2327: PPUSH
2328: LD_VAR 0 4
2332: PUSH
2333: LD_INT 3
2335: ARRAY
2336: PPUSH
2337: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2341: LD_EXP 22
2345: PPUSH
2346: LD_VAR 0 4
2350: PUSH
2351: LD_INT 4
2353: ARRAY
2354: PPUSH
2355: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2359: LD_EXP 23
2363: PPUSH
2364: LD_VAR 0 4
2368: PUSH
2369: LD_INT 5
2371: ARRAY
2372: PPUSH
2373: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2377: LD_EXP 19
2381: PPUSH
2382: LD_INT 3
2384: PPUSH
2385: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2389: LD_EXP 20
2393: PUSH
2394: LD_EXP 23
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: PPUSH
2403: LD_INT 9
2405: PPUSH
2406: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2410: LD_ADDR_VAR 0 4
2414: PUSH
2415: LD_INT 22
2417: PUSH
2418: LD_INT 7
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PPUSH
2425: CALL_OW 69
2429: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2430: LD_VAR 0 4
2434: PPUSH
2435: LD_INT 107
2437: PPUSH
2438: LD_INT 118
2440: PPUSH
2441: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2445: LD_INT 35
2447: PPUSH
2448: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , 49 ] ) , Masha ) ;
2452: LD_VAR 0 4
2456: PPUSH
2457: LD_INT 34
2459: PUSH
2460: LD_INT 49
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: PPUSH
2467: CALL_OW 72
2471: PPUSH
2472: LD_EXP 18
2476: PPUSH
2477: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , 49 ] ] ) , 107 , 118 ) ;
2481: LD_VAR 0 4
2485: PPUSH
2486: LD_INT 3
2488: PUSH
2489: LD_INT 34
2491: PUSH
2492: LD_INT 49
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 72
2507: PPUSH
2508: LD_INT 107
2510: PPUSH
2511: LD_INT 118
2513: PPUSH
2514: CALL_OW 114
// until UnitFilter ( tmp , [ f_weapon , 49 ] ) = 0 or IsDying ( Masha ) ;
2518: LD_VAR 0 4
2522: PPUSH
2523: LD_INT 34
2525: PUSH
2526: LD_INT 49
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PPUSH
2533: CALL_OW 72
2537: PUSH
2538: LD_INT 0
2540: EQUAL
2541: PUSH
2542: LD_EXP 18
2546: PPUSH
2547: CALL_OW 303
2551: OR
2552: IFFALSE 2445
// repeat wait ( 0 0$1 ) ;
2554: LD_INT 35
2556: PPUSH
2557: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
2561: LD_ADDR_VAR 0 4
2565: PUSH
2566: LD_INT 22
2568: PUSH
2569: LD_INT 7
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PPUSH
2576: CALL_OW 69
2580: PUSH
2581: LD_EXP 17
2585: DIFF
2586: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2587: LD_VAR 0 4
2591: PPUSH
2592: LD_INT 107
2594: PPUSH
2595: LD_INT 118
2597: PPUSH
2598: CALL_OW 114
// if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
2602: LD_EXP 17
2606: PPUSH
2607: CALL_OW 302
2611: PUSH
2612: LD_EXP 17
2616: PPUSH
2617: CALL_OW 310
2621: NOT
2622: AND
2623: IFFALSE 2640
// ComMoveXY ( Burlak , 107 , 118 ) ;
2625: LD_EXP 17
2629: PPUSH
2630: LD_INT 107
2632: PPUSH
2633: LD_INT 118
2635: PPUSH
2636: CALL_OW 111
// until not tmp ;
2640: LD_VAR 0 4
2644: NOT
2645: IFFALSE 2554
// end ; end_of_file
2647: LD_VAR 0 1
2651: RET
// every 15 15$0 trigger sibDeposits do var un , rnd ;
2652: LD_EXP 31
2656: IFFALSE 2832
2658: GO 2660
2660: DISABLE
2661: LD_INT 0
2663: PPUSH
2664: PPUSH
// begin enable ;
2665: ENABLE
// rnd = 0 ;
2666: LD_ADDR_VAR 0 2
2670: PUSH
2671: LD_INT 0
2673: ST_TO_ADDR
// uc_side = 8 ;
2674: LD_ADDR_OWVAR 20
2678: PUSH
2679: LD_INT 8
2681: ST_TO_ADDR
// uc_nation = 2 ;
2682: LD_ADDR_OWVAR 21
2686: PUSH
2687: LD_INT 2
2689: ST_TO_ADDR
// hc_name =  ;
2690: LD_ADDR_OWVAR 26
2694: PUSH
2695: LD_STRING 
2697: ST_TO_ADDR
// hc_gallery =  ;
2698: LD_ADDR_OWVAR 33
2702: PUSH
2703: LD_STRING 
2705: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
2706: LD_INT 0
2708: PPUSH
2709: LD_INT 4
2711: PPUSH
2712: LD_INT 10
2714: PPUSH
2715: CALL_OW 380
// un = CreateHuman ;
2719: LD_ADDR_VAR 0 1
2723: PUSH
2724: CALL_OW 44
2728: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2729: LD_VAR 0 1
2733: PPUSH
2734: LD_INT 8
2736: PUSH
2737: LD_INT 9
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: PUSH
2744: LD_INT 1
2746: PPUSH
2747: LD_INT 2
2749: PPUSH
2750: CALL_OW 12
2754: ARRAY
2755: PPUSH
2756: LD_INT 0
2758: PPUSH
2759: CALL_OW 49
// SetTag ( un , 1 ) ;
2763: LD_VAR 0 1
2767: PPUSH
2768: LD_INT 1
2770: PPUSH
2771: CALL_OW 109
// rnd = Rand ( 1 , sibDeposits ) ;
2775: LD_ADDR_VAR 0 2
2779: PUSH
2780: LD_INT 1
2782: PPUSH
2783: LD_EXP 31
2787: PPUSH
2788: CALL_OW 12
2792: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
2793: LD_VAR 0 1
2797: PPUSH
2798: LD_EXP 31
2802: PUSH
2803: LD_VAR 0 2
2807: ARRAY
2808: PUSH
2809: LD_INT 1
2811: ARRAY
2812: PPUSH
2813: LD_EXP 31
2817: PUSH
2818: LD_VAR 0 2
2822: ARRAY
2823: PUSH
2824: LD_INT 2
2826: ARRAY
2827: PPUSH
2828: CALL_OW 158
// end ;
2832: PPOPN 2
2834: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do var i ;
2835: LD_INT 22
2837: PUSH
2838: LD_INT 8
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: PUSH
2845: LD_INT 3
2847: PUSH
2848: LD_INT 61
2850: PUSH
2851: EMPTY
2852: LIST
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: PUSH
2858: LD_INT 33
2860: PUSH
2861: LD_INT 2
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PUSH
2868: EMPTY
2869: LIST
2870: LIST
2871: LIST
2872: PPUSH
2873: CALL_OW 69
2877: IFFALSE 2950
2879: GO 2881
2881: DISABLE
2882: LD_INT 0
2884: PPUSH
// begin enable ;
2885: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do
2886: LD_ADDR_VAR 0 1
2890: PUSH
2891: LD_INT 22
2893: PUSH
2894: LD_INT 8
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: LD_INT 3
2903: PUSH
2904: LD_INT 61
2906: PUSH
2907: EMPTY
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PUSH
2914: LD_INT 33
2916: PUSH
2917: LD_INT 2
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: PPUSH
2929: CALL_OW 69
2933: PUSH
2934: FOR_IN
2935: IFFALSE 2948
// Connect ( i ) ;
2937: LD_VAR 0 1
2941: PPUSH
2942: CALL 5872 0 1
2946: GO 2934
2948: POP
2949: POP
// end ; end_of_file
2950: PPOPN 1
2952: END
// every 1 do
2953: GO 2955
2955: DISABLE
// begin InGameOn ;
2956: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
2960: LD_INT 22
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 21
2972: PUSH
2973: LD_INT 2
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 69
2988: PUSH
2989: LD_INT 1
2991: ARRAY
2992: PPUSH
2993: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
2997: LD_INT 22
2999: PUSH
3000: LD_INT 1
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PUSH
3007: LD_INT 21
3009: PUSH
3010: LD_INT 2
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PPUSH
3021: CALL_OW 69
3025: PPUSH
3026: LD_INT 69
3028: PPUSH
3029: LD_INT 94
3031: PPUSH
3032: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3036: LD_EXP 1
3040: PPUSH
3041: LD_STRING D2-JMM-1
3043: PPUSH
3044: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3048: LD_INT 22
3050: PUSH
3051: LD_INT 1
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PUSH
3058: LD_INT 21
3060: PUSH
3061: LD_INT 2
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PPUSH
3072: CALL_OW 69
3076: PUSH
3077: LD_INT 1
3079: ARRAY
3080: PPUSH
3081: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3085: LD_EXP 2
3089: PPUSH
3090: LD_STRING D2-Huck-1
3092: PPUSH
3093: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3097: LD_INT 22
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 21
3109: PUSH
3110: LD_INT 2
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PPUSH
3121: CALL_OW 69
3125: PUSH
3126: LD_INT 1
3128: ARRAY
3129: PPUSH
3130: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3134: LD_EXP 1
3138: PPUSH
3139: LD_STRING D2-JMM-2
3141: PPUSH
3142: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3146: LD_INT 22
3148: PUSH
3149: LD_INT 1
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: LD_INT 21
3158: PUSH
3159: LD_INT 2
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PPUSH
3170: CALL_OW 69
3174: PUSH
3175: LD_INT 1
3177: ARRAY
3178: PPUSH
3179: CALL_OW 87
// InGameOff ;
3183: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3187: LD_STRING M1
3189: PPUSH
3190: CALL_OW 337
// SaveForQuickRestart ;
3194: CALL_OW 22
// end ;
3198: END
// every 10 10$0 do
3199: GO 3201
3201: DISABLE
// begin DialogueOn ;
3202: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3206: LD_EXP 15
3210: PPUSH
3211: LD_STRING D3-Pow-1
3213: PPUSH
3214: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3218: LD_EXP 1
3222: PPUSH
3223: LD_STRING D3-JMM-1
3225: PPUSH
3226: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3230: LD_EXP 15
3234: PPUSH
3235: LD_STRING D3-Pow-2
3237: PPUSH
3238: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3242: LD_EXP 1
3246: PPUSH
3247: LD_STRING D3-JMM-2
3249: PPUSH
3250: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3254: LD_EXP 15
3258: PPUSH
3259: LD_STRING D3-Pow-3
3261: PPUSH
3262: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3266: LD_EXP 1
3270: PPUSH
3271: LD_STRING D3-JMM-3
3273: PPUSH
3274: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3278: LD_EXP 15
3282: PPUSH
3283: LD_STRING D3-Pow-4
3285: PPUSH
3286: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3290: LD_EXP 1
3294: PPUSH
3295: LD_STRING D3-JMM-4
3297: PPUSH
3298: CALL_OW 88
// DialogueOff ;
3302: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3306: LD_STRING M2
3308: PPUSH
3309: CALL_OW 337
// wait ( 2 2$30 ) ;
3313: LD_INT 5250
3315: PPUSH
3316: CALL_OW 67
// PrepareBurlak ;
3320: CALL 1894 0 0
// BurlakArmy ;
3324: CALL 2040 0 0
// end ;
3328: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3329: LD_INT 1
3331: PPUSH
3332: LD_EXP 18
3336: PPUSH
3337: CALL_OW 292
3341: IFFALSE 3500
3343: GO 3345
3345: DISABLE
// begin DialogueOn ;
3346: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3350: LD_EXP 18
3354: PPUSH
3355: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3359: LD_INT 22
3361: PUSH
3362: LD_INT 1
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 26
3371: PUSH
3372: LD_INT 1
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 2
3381: PUSH
3382: LD_INT 25
3384: PUSH
3385: LD_INT 1
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: PUSH
3392: LD_INT 25
3394: PUSH
3395: LD_INT 2
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: PUSH
3402: LD_INT 25
3404: PUSH
3405: LD_INT 3
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PUSH
3412: LD_INT 25
3414: PUSH
3415: LD_INT 4
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PUSH
3422: LD_INT 25
3424: PUSH
3425: LD_INT 5
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: LIST
3444: PPUSH
3445: CALL_OW 69
3449: PPUSH
3450: LD_STRING D5-Sol1-1
3452: PPUSH
3453: LD_STRING D5-FSol1-1
3455: PPUSH
3456: CALL 6226 0 3
// Say ( JMM , D5-JMM-1 ) ;
3460: LD_EXP 1
3464: PPUSH
3465: LD_STRING D5-JMM-1
3467: PPUSH
3468: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3472: LD_EXP 17
3476: PPUSH
3477: LD_STRING DAmer-Bur-1
3479: PPUSH
3480: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3484: LD_EXP 1
3488: PPUSH
3489: LD_STRING DAmer-JMM-1
3491: PPUSH
3492: CALL_OW 88
// DialogueOff ;
3496: CALL_OW 7
// end ;
3500: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
3501: LD_INT 4
3503: PPUSH
3504: LD_INT 22
3506: PUSH
3507: LD_INT 7
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PPUSH
3514: CALL_OW 70
3518: IFFALSE 3917
3520: GO 3522
3522: DISABLE
3523: LD_INT 0
3525: PPUSH
// begin enable ;
3526: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
3527: LD_ADDR_VAR 0 1
3531: PUSH
3532: LD_INT 4
3534: PPUSH
3535: LD_INT 22
3537: PUSH
3538: LD_INT 7
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: PPUSH
3545: CALL_OW 70
3549: PUSH
3550: FOR_IN
3551: IFFALSE 3915
// begin if i = Burlak or i = Masha then
3553: LD_VAR 0 1
3557: PUSH
3558: LD_EXP 17
3562: EQUAL
3563: PUSH
3564: LD_VAR 0 1
3568: PUSH
3569: LD_EXP 18
3573: EQUAL
3574: OR
3575: IFFALSE 3722
// begin RemoveUnit ( i ) ;
3577: LD_VAR 0 1
3581: PPUSH
3582: CALL_OW 64
// DialogueOn ;
3586: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3590: LD_EXP 1
3594: PPUSH
3595: LD_STRING D5a-JMM-1
3597: PPUSH
3598: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3602: LD_INT 22
3604: PUSH
3605: LD_INT 1
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: PUSH
3612: LD_INT 26
3614: PUSH
3615: LD_INT 1
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: PUSH
3622: LD_INT 2
3624: PUSH
3625: LD_INT 25
3627: PUSH
3628: LD_INT 1
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: PUSH
3635: LD_INT 25
3637: PUSH
3638: LD_INT 2
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: PUSH
3645: LD_INT 25
3647: PUSH
3648: LD_INT 3
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: PUSH
3655: LD_INT 25
3657: PUSH
3658: LD_INT 4
3660: PUSH
3661: EMPTY
3662: LIST
3663: LIST
3664: PUSH
3665: LD_INT 25
3667: PUSH
3668: LD_INT 5
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: PUSH
3675: EMPTY
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: LIST
3687: PPUSH
3688: CALL_OW 69
3692: PPUSH
3693: LD_STRING D5a-Sol1-1
3695: PPUSH
3696: LD_STRING D5-FSol1-1
3698: PPUSH
3699: CALL 6226 0 3
// DialogueOff ;
3703: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
3707: LD_STRING M2b
3709: PPUSH
3710: CALL_OW 337
// spawnBurlak = 0 ;
3714: LD_ADDR_EXP 27
3718: PUSH
3719: LD_INT 0
3721: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
3722: LD_VAR 0 1
3726: PPUSH
3727: CALL_OW 247
3731: PUSH
3732: LD_INT 2
3734: EQUAL
3735: PUSH
3736: LD_VAR 0 1
3740: PPUSH
3741: CALL_OW 263
3745: PUSH
3746: LD_INT 1
3748: EQUAL
3749: AND
3750: IFFALSE 3878
// begin case IsDrivenBy ( i ) of Gnyevko :
3752: LD_VAR 0 1
3756: PPUSH
3757: CALL_OW 311
3761: PUSH
3762: LD_EXP 19
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3772
3770: GO 3785
3772: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
3773: LD_INT 1
3775: PPUSH
3776: LD_STRING 13_Gnyevko_1
3778: PPUSH
3779: CALL_OW 39
3783: GO 3878
3785: LD_EXP 20
3789: DOUBLE
3790: EQUAL
3791: IFTRUE 3795
3793: GO 3808
3795: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
3796: LD_INT 1
3798: PPUSH
3799: LD_STRING 13_Titov_1
3801: PPUSH
3802: CALL_OW 39
3806: GO 3878
3808: LD_EXP 21
3812: DOUBLE
3813: EQUAL
3814: IFTRUE 3818
3816: GO 3831
3818: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
3819: LD_INT 1
3821: PPUSH
3822: LD_STRING 13_Xavier_1
3824: PPUSH
3825: CALL_OW 39
3829: GO 3878
3831: LD_EXP 22
3835: DOUBLE
3836: EQUAL
3837: IFTRUE 3841
3839: GO 3854
3841: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
3842: LD_INT 1
3844: PPUSH
3845: LD_STRING 13_Belkov_1
3847: PPUSH
3848: CALL_OW 39
3852: GO 3878
3854: LD_EXP 23
3858: DOUBLE
3859: EQUAL
3860: IFTRUE 3864
3862: GO 3877
3864: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
3865: LD_INT 1
3867: PPUSH
3868: LD_STRING 13_Lipshchin_1
3870: PPUSH
3871: CALL_OW 39
3875: GO 3878
3877: POP
// end ; if GetWeapon ( i ) = 49 then
3878: LD_VAR 0 1
3882: PPUSH
3883: CALL_OW 264
3887: PUSH
3888: LD_INT 49
3890: EQUAL
3891: IFFALSE 3904
// DestroyUnit ( i ) else
3893: LD_VAR 0 1
3897: PPUSH
3898: CALL_OW 65
3902: GO 3913
// RemoveUnit ( i ) ;
3904: LD_VAR 0 1
3908: PPUSH
3909: CALL_OW 64
// end ;
3913: GO 3550
3915: POP
3916: POP
// end ;
3917: PPOPN 1
3919: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
3920: LD_EXP 17
3924: PPUSH
3925: CALL_OW 302
3929: PUSH
3930: LD_EXP 18
3934: PPUSH
3935: CALL_OW 256
3939: PUSH
3940: LD_INT 500
3942: LESS
3943: AND
3944: PUSH
3945: LD_EXP 18
3949: PPUSH
3950: CALL_OW 255
3954: PUSH
3955: LD_INT 7
3957: EQUAL
3958: AND
3959: IFFALSE 3979
3961: GO 3963
3963: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
3964: LD_EXP 17
3968: PPUSH
3969: LD_INT 107
3971: PPUSH
3972: LD_INT 118
3974: PPUSH
3975: CALL_OW 111
3979: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
3980: LD_EXP 17
3984: PPUSH
3985: CALL_OW 301
3989: PUSH
3990: LD_EXP 27
3994: PUSH
3995: LD_INT 1
3997: EQUAL
3998: AND
3999: IFFALSE 4132
4001: GO 4003
4003: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4004: LD_EXP 1
4008: PPUSH
4009: LD_STRING D5b-JMM-1
4011: PPUSH
4012: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
4016: LD_INT 22
4018: PUSH
4019: LD_INT 1
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: LD_INT 26
4028: PUSH
4029: LD_INT 1
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 2
4038: PUSH
4039: LD_INT 25
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: LD_INT 25
4051: PUSH
4052: LD_INT 2
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PUSH
4059: LD_INT 25
4061: PUSH
4062: LD_INT 3
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PUSH
4069: LD_INT 25
4071: PUSH
4072: LD_INT 4
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 25
4081: PUSH
4082: LD_INT 5
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 69
4106: PPUSH
4107: LD_STRING D5b-Sol1-1
4109: PPUSH
4110: LD_STRING 
4112: PPUSH
4113: CALL 6226 0 3
// ChangeMissionObjectives ( M2a ) ;
4117: LD_STRING M2a
4119: PPUSH
4120: CALL_OW 337
// burlakStatus = 1 ;
4124: LD_ADDR_EXP 28
4128: PUSH
4129: LD_INT 1
4131: ST_TO_ADDR
// end ;
4132: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4133: LD_EXP 2
4137: PPUSH
4138: CALL_OW 301
4142: IFFALSE 4279
4144: GO 4146
4146: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4147: LD_EXP 1
4151: PPUSH
4152: LD_STRING D6-JMM-1
4154: PPUSH
4155: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
4159: LD_INT 22
4161: PUSH
4162: LD_INT 1
4164: PUSH
4165: EMPTY
4166: LIST
4167: LIST
4168: PUSH
4169: LD_INT 26
4171: PUSH
4172: LD_INT 1
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 2
4181: PUSH
4182: LD_INT 25
4184: PUSH
4185: LD_INT 1
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: LD_INT 25
4194: PUSH
4195: LD_INT 2
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: PUSH
4202: LD_INT 25
4204: PUSH
4205: LD_INT 3
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: PUSH
4212: LD_INT 25
4214: PUSH
4215: LD_INT 4
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: PUSH
4222: LD_INT 25
4224: PUSH
4225: LD_INT 5
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: LIST
4244: PPUSH
4245: CALL_OW 69
4249: PPUSH
4250: LD_STRING D6-Sol1-1
4252: PPUSH
4253: LD_STRING 
4255: PPUSH
4256: CALL 6226 0 3
// Say ( JMM , D6-JMM-2 ) ;
4260: LD_EXP 1
4264: PPUSH
4265: LD_STRING D6-JMM-2
4267: PPUSH
4268: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4272: LD_STRING M1a
4274: PPUSH
4275: CALL_OW 337
// end ;
4279: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4280: LD_INT 25
4282: PPUSH
4283: LD_INT 1
4285: PPUSH
4286: CALL_OW 321
4290: PUSH
4291: LD_INT 2
4293: EQUAL
4294: IFFALSE 4311
4296: GO 4298
4298: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4299: LD_EXP 2
4303: PPUSH
4304: LD_STRING D6-Huck-2
4306: PPUSH
4307: CALL_OW 88
// end ;
4311: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4312: LD_INT 22
4314: PUSH
4315: LD_INT 1
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PUSH
4322: LD_INT 2
4324: PUSH
4325: LD_INT 34
4327: PUSH
4328: LD_INT 8
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PUSH
4335: LD_INT 35
4337: PUSH
4338: LD_INT 8
4340: PUSH
4341: EMPTY
4342: LIST
4343: LIST
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: LIST
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PPUSH
4354: CALL_OW 69
4358: PUSH
4359: LD_INT 0
4361: GREATER
4362: IFFALSE 4554
4364: GO 4366
4366: DISABLE
4367: LD_INT 0
4369: PPUSH
4370: PPUSH
// begin enable ;
4371: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4372: LD_ADDR_VAR 0 1
4376: PUSH
4377: LD_INT 5
4379: PPUSH
4380: LD_INT 22
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: LD_INT 21
4392: PUSH
4393: LD_INT 3
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PUSH
4400: LD_INT 30
4402: PUSH
4403: LD_INT 1
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: LD_INT 3
4412: PUSH
4413: LD_INT 57
4415: PUSH
4416: EMPTY
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: PPUSH
4429: CALL_OW 70
4433: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4434: LD_ADDR_VAR 0 2
4438: PUSH
4439: LD_INT 5
4441: PPUSH
4442: LD_INT 22
4444: PUSH
4445: LD_INT 1
4447: PUSH
4448: EMPTY
4449: LIST
4450: LIST
4451: PUSH
4452: LD_INT 21
4454: PUSH
4455: LD_INT 3
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 30
4464: PUSH
4465: LD_INT 5
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 3
4474: PUSH
4475: LD_INT 57
4477: PUSH
4478: EMPTY
4479: LIST
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: PPUSH
4491: CALL_OW 70
4495: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4496: LD_VAR 0 1
4500: PUSH
4501: LD_INT 0
4503: GREATER
4504: PUSH
4505: LD_VAR 0 2
4509: PUSH
4510: LD_INT 0
4512: GREATER
4513: AND
4514: IFFALSE 4554
// begin disable ;
4516: DISABLE
// DialogueOn ;
4517: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4521: LD_EXP 1
4525: PPUSH
4526: LD_STRING D7-JMM-1
4528: PPUSH
4529: CALL_OW 88
// DialogueOff ;
4533: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4537: LD_STRING M4
4539: PPUSH
4540: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4544: LD_INT 5
4546: PPUSH
4547: LD_INT 0
4549: PPUSH
4550: CALL_OW 424
// end ; end ;
4554: PPOPN 2
4556: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4557: LD_INT 6
4559: PPUSH
4560: LD_INT 22
4562: PUSH
4563: LD_INT 1
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 25
4572: PUSH
4573: LD_INT 4
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PPUSH
4584: CALL_OW 70
4588: PUSH
4589: LD_INT 0
4591: GREATER
4592: PUSH
4593: LD_EXP 37
4597: PUSH
4598: LD_INT 1
4600: EQUAL
4601: AND
4602: PUSH
4603: LD_EXP 29
4607: PUSH
4608: LD_INT 0
4610: EQUAL
4611: AND
4612: IFFALSE 4677
4614: GO 4616
4616: DISABLE
// begin enable ;
4617: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4618: LD_ADDR_EXP 26
4622: PUSH
4623: LD_INT 6
4625: PPUSH
4626: LD_INT 22
4628: PUSH
4629: LD_INT 1
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 25
4638: PUSH
4639: LD_INT 4
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PPUSH
4650: CALL_OW 70
4654: PUSH
4655: LD_INT 1
4657: ARRAY
4658: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4659: LD_INT 6
4661: PPUSH
4662: LD_INT 0
4664: PPUSH
4665: CALL_OW 424
// radationResearched = 1 ;
4669: LD_ADDR_EXP 29
4673: PUSH
4674: LD_INT 1
4676: ST_TO_ADDR
// end ;
4677: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4678: LD_EXP 26
4682: PPUSH
4683: CALL_OW 301
4687: PUSH
4688: LD_EXP 29
4692: PUSH
4693: LD_INT 1
4695: EQUAL
4696: AND
4697: IFFALSE 4733
4699: GO 4701
4701: DISABLE
// begin enable ;
4702: ENABLE
// radationResearched = 0 ;
4703: LD_ADDR_EXP 29
4707: PUSH
4708: LD_INT 0
4710: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
4711: LD_INT 6
4713: PPUSH
4714: LD_INT 1
4716: PPUSH
4717: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
4721: LD_EXP 1
4725: PPUSH
4726: LD_STRING D9a-JMM-1
4728: PPUSH
4729: CALL_OW 88
// end ; end_of_file
4733: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
4734: LD_VAR 0 5
4738: PUSH
4739: LD_INT 8
4741: EQUAL
4742: PUSH
4743: LD_EXP 35
4747: PUSH
4748: LD_INT 0
4750: EQUAL
4751: AND
4752: IFFALSE 4805
// begin eventVar1 = 1 ;
4754: LD_ADDR_EXP 35
4758: PUSH
4759: LD_INT 1
4761: ST_TO_ADDR
// DialogueOn ;
4762: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
4766: LD_EXP 1
4770: PPUSH
4771: LD_STRING D6a-JMM-1
4773: PPUSH
4774: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
4778: LD_EXP 15
4782: PPUSH
4783: LD_STRING D6a-Pow-1
4785: PPUSH
4786: CALL_OW 94
// DialogueOff ;
4790: CALL_OW 7
// wait ( 3 3$0 ) ;
4794: LD_INT 6300
4796: PPUSH
4797: CALL_OW 67
// PowellSupport ;
4801: CALL 1666 0 0
// end ; end ;
4805: PPOPN 5
4807: END
// on UnitDestroyed ( un ) do begin if GetWeapon ( un ) = ar_control_tower then
4808: LD_VAR 0 1
4812: PPUSH
4813: CALL_OW 264
4817: PUSH
4818: LD_INT 31
4820: EQUAL
4821: IFFALSE 4837
// achivCounter := achivCounter + 1 ;
4823: LD_ADDR_EXP 41
4827: PUSH
4828: LD_EXP 41
4832: PUSH
4833: LD_INT 1
4835: PLUS
4836: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
4837: LD_VAR 0 1
4841: PPUSH
4842: CALL_OW 255
4846: PUSH
4847: LD_INT 1
4849: NONEQUAL
4850: PUSH
4851: LD_VAR 0 1
4855: PPUSH
4856: CALL_OW 247
4860: PUSH
4861: LD_INT 2
4863: EQUAL
4864: AND
4865: IFFALSE 4881
// destroyCounter := destroyCounter + 1 ;
4867: LD_ADDR_EXP 42
4871: PUSH
4872: LD_EXP 42
4876: PUSH
4877: LD_INT 1
4879: PLUS
4880: ST_TO_ADDR
// end ;
4881: PPOPN 1
4883: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
4884: LD_VAR 0 2
4888: PUSH
4889: LD_EXP 18
4893: EQUAL
4894: IFFALSE 4903
// SetAchievement ( ACH_MASHA ) ;
4896: LD_STRING ACH_MASHA
4898: PPUSH
4899: CALL_OW 543
// end ;
4903: PPOPN 4
4905: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
4906: LD_VAR 0 1
4910: PPUSH
4911: CALL_OW 264
4915: PUSH
4916: LD_INT 8
4918: EQUAL
4919: PUSH
4920: LD_EXP 36
4924: PUSH
4925: LD_INT 0
4927: EQUAL
4928: AND
4929: IFFALSE 4998
// begin eventVar2 = 1 ;
4931: LD_ADDR_EXP 36
4935: PUSH
4936: LD_INT 1
4938: ST_TO_ADDR
// DialogueOn ;
4939: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
4943: LD_EXP 1
4947: PPUSH
4948: LD_STRING D6b-JMM-1
4950: PPUSH
4951: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
4955: LD_EXP 15
4959: PPUSH
4960: LD_STRING D6b-Pow-1
4962: PPUSH
4963: CALL_OW 94
// DialogueOff ;
4967: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
4971: LD_INT 5
4973: PPUSH
4974: LD_INT 1
4976: PPUSH
4977: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
4981: LD_INT 7
4983: PPUSH
4984: LD_INT 1
4986: PPUSH
4987: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
4991: LD_STRING M3
4993: PPUSH
4994: CALL_OW 337
// end ; end ;
4998: PPOPN 2
5000: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5001: LD_VAR 0 2
5005: PPUSH
5006: LD_VAR 0 3
5010: PPUSH
5011: LD_INT 5
5013: PPUSH
5014: CALL_OW 309
5018: PUSH
5019: LD_EXP 37
5023: PUSH
5024: LD_INT 0
5026: EQUAL
5027: AND
5028: IFFALSE 5246
// begin eventVar3 = 1 ;
5030: LD_ADDR_EXP 37
5034: PUSH
5035: LD_INT 1
5037: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5038: LD_INT 175
5040: PPUSH
5041: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5045: LD_INT 7
5047: PPUSH
5048: LD_INT 22
5050: PUSH
5051: LD_INT 1
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: PUSH
5058: LD_INT 21
5060: PUSH
5061: LD_INT 2
5063: PUSH
5064: EMPTY
5065: LIST
5066: LIST
5067: PUSH
5068: LD_INT 34
5070: PUSH
5071: LD_INT 11
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: LIST
5082: PPUSH
5083: CALL_OW 70
5087: PUSH
5088: LD_INT 0
5090: GREATER
5091: IFFALSE 5110
// begin radarOnSpot = 1 ;
5093: LD_ADDR_EXP 30
5097: PUSH
5098: LD_INT 1
5100: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5101: LD_STRING M3a
5103: PPUSH
5104: CALL_OW 337
// end else
5108: GO 5117
// begin ChangeMissionObjectives ( M3b ) ;
5110: LD_STRING M3b
5112: PPUSH
5113: CALL_OW 337
// end ; DialogueOn ;
5117: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5121: LD_EXP 2
5125: PPUSH
5126: LD_STRING D8-Huck-1
5128: PPUSH
5129: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5133: LD_EXP 1
5137: PPUSH
5138: LD_STRING D8-JMM-1
5140: PPUSH
5141: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
5145: LD_EXP 2
5149: PPUSH
5150: LD_STRING D8-Huck-2
5152: PPUSH
5153: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5157: LD_EXP 1
5161: PPUSH
5162: LD_STRING D8-JMM-2
5164: PPUSH
5165: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5169: LD_EXP 2
5173: PPUSH
5174: LD_STRING D8-Huck-3
5176: PPUSH
5177: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5181: LD_EXP 1
5185: PPUSH
5186: LD_STRING D8-JMM-3
5188: PPUSH
5189: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5193: LD_EXP 2
5197: PPUSH
5198: LD_STRING D8-Huck-4
5200: PPUSH
5201: CALL_OW 88
// DialogueOff ;
5205: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5209: LD_INT 5
5211: PPUSH
5212: LD_INT 0
5214: PPUSH
5215: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5219: LD_INT 7
5221: PPUSH
5222: LD_INT 0
5224: PPUSH
5225: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5229: LD_INT 6
5231: PPUSH
5232: LD_INT 1
5234: PPUSH
5235: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5239: LD_STRING M5
5241: PPUSH
5242: CALL_OW 337
// end ; end ;
5246: PPOPN 3
5248: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5249: LD_EXP 26
5253: PPUSH
5254: CALL_OW 302
5258: PUSH
5259: LD_VAR 0 2
5263: PUSH
5264: LD_EXP 26
5268: EQUAL
5269: AND
5270: PUSH
5271: LD_EXP 38
5275: PUSH
5276: LD_INT 0
5278: EQUAL
5279: AND
5280: PUSH
5281: LD_EXP 37
5285: PUSH
5286: LD_INT 1
5288: EQUAL
5289: AND
5290: IFFALSE 5336
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5292: LD_VAR 0 1
5296: PPUSH
5297: LD_INT 1
5299: PPUSH
5300: CALL_OW 268
5304: PUSH
5305: LD_INT 11
5307: EQUAL
5308: PUSH
5309: LD_VAR 0 1
5313: PPUSH
5314: LD_INT 2
5316: PPUSH
5317: CALL_OW 268
5321: PUSH
5322: LD_INT 11
5324: EQUAL
5325: OR
5326: IFFALSE 5336
// eventVar4 = 1 ;
5328: LD_ADDR_EXP 38
5332: PUSH
5333: LD_INT 1
5335: ST_TO_ADDR
// end ;
5336: PPOPN 2
5338: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5339: LD_INT 0
5341: PPUSH
5342: PPUSH
// begin if GetNation ( unit ) = 2 then
5343: LD_VAR 0 1
5347: PPUSH
5348: CALL_OW 248
5352: PUSH
5353: LD_INT 2
5355: EQUAL
5356: IFFALSE 5634
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5358: LD_ADDR_EXP 32
5362: PUSH
5363: LD_EXP 32
5367: PUSH
5368: LD_INT 1
5370: PLUS
5371: ST_TO_ADDR
// for i := 1 to sibDeposits do
5372: LD_ADDR_VAR 0 4
5376: PUSH
5377: DOUBLE
5378: LD_INT 1
5380: DEC
5381: ST_TO_ADDR
5382: LD_EXP 31
5386: PUSH
5387: FOR_TO
5388: IFFALSE 5490
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5390: LD_EXP 31
5394: PUSH
5395: LD_VAR 0 4
5399: ARRAY
5400: PUSH
5401: LD_INT 1
5403: ARRAY
5404: PUSH
5405: LD_VAR 0 2
5409: EQUAL
5410: PUSH
5411: LD_EXP 31
5415: PUSH
5416: LD_VAR 0 4
5420: ARRAY
5421: PUSH
5422: LD_INT 2
5424: ARRAY
5425: PUSH
5426: LD_VAR 0 3
5430: EQUAL
5431: AND
5432: IFFALSE 5488
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5434: LD_ADDR_EXP 31
5438: PUSH
5439: LD_EXP 31
5443: PPUSH
5444: LD_VAR 0 4
5448: PUSH
5449: EMPTY
5450: LIST
5451: PUSH
5452: LD_INT 1
5454: ARRAY
5455: PPUSH
5456: CALL_OW 3
5460: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5461: LD_ADDR_EXP 31
5465: PUSH
5466: LD_EXP 31
5470: PPUSH
5471: LD_VAR 0 4
5475: PUSH
5476: EMPTY
5477: LIST
5478: PUSH
5479: LD_INT 2
5481: ARRAY
5482: PPUSH
5483: CALL_OW 3
5487: ST_TO_ADDR
// end ;
5488: GO 5387
5490: POP
5491: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
5492: LD_EXP 39
5496: PUSH
5497: LD_INT 0
5499: EQUAL
5500: PUSH
5501: LD_VAR 0 2
5505: PPUSH
5506: LD_VAR 0 3
5510: PPUSH
5511: CALL_OW 428
5515: PUSH
5516: LD_INT 22
5518: PUSH
5519: LD_INT 1
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PPUSH
5526: CALL_OW 69
5530: IN
5531: AND
5532: IFFALSE 5634
// begin eventVar5 = 1 ;
5534: LD_ADDR_EXP 39
5538: PUSH
5539: LD_INT 1
5541: ST_TO_ADDR
// DialogueOn ;
5542: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5546: LD_EXP 2
5550: PPUSH
5551: LD_STRING D4-Sci1-1
5553: PPUSH
5554: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5558: LD_EXP 1
5562: PPUSH
5563: LD_STRING D4-JMM-1
5565: PPUSH
5566: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5570: LD_EXP 2
5574: PPUSH
5575: LD_STRING D4-Sci1-2
5577: PPUSH
5578: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5582: LD_EXP 1
5586: PPUSH
5587: LD_STRING D4-JMM-2
5589: PPUSH
5590: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5594: LD_EXP 2
5598: PPUSH
5599: LD_STRING D4-Sci1-3
5601: PPUSH
5602: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5606: LD_EXP 1
5610: PPUSH
5611: LD_STRING D4-JMM-3
5613: PPUSH
5614: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5618: LD_EXP 1
5622: PPUSH
5623: LD_STRING D4-JMM-3a
5625: PPUSH
5626: CALL_OW 88
// DialogueOff ;
5630: CALL_OW 7
// end ; end ; end ;
5634: PPOPN 5
5636: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
5637: LD_VAR 0 1
5641: PPUSH
5642: CALL_OW 255
5646: PUSH
5647: LD_INT 1
5649: EQUAL
5650: PUSH
5651: LD_VAR 0 1
5655: PPUSH
5656: CALL_OW 266
5660: PUSH
5661: LD_INT 0
5663: EQUAL
5664: AND
5665: PUSH
5666: LD_INT 22
5668: PUSH
5669: LD_INT 1
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: PUSH
5676: LD_INT 21
5678: PUSH
5679: LD_INT 3
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: PUSH
5686: LD_INT 2
5688: PUSH
5689: LD_INT 30
5691: PUSH
5692: LD_INT 0
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: LD_INT 30
5701: PUSH
5702: LD_INT 1
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: LIST
5713: PUSH
5714: EMPTY
5715: LIST
5716: LIST
5717: LIST
5718: PPUSH
5719: CALL_OW 69
5723: PUSH
5724: LD_INT 1
5726: EQUAL
5727: AND
5728: IFFALSE 5742
// SetBName ( building , omega ) ;
5730: LD_VAR 0 1
5734: PPUSH
5735: LD_STRING omega
5737: PPUSH
5738: CALL_OW 500
// end ;
5742: PPOPN 2
5744: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5745: LD_VAR 0 1
5749: PPUSH
5750: CALL 12804 0 1
// end ; end_of_file
5754: PPOPN 1
5756: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5757: LD_INT 0
5759: PPUSH
5760: PPUSH
// if exist_mode then
5761: LD_VAR 0 2
5765: IFFALSE 5784
// unit := CreateCharacter ( ident ) else
5767: LD_ADDR_VAR 0 4
5771: PUSH
5772: LD_VAR 0 1
5776: PPUSH
5777: CALL_OW 34
5781: ST_TO_ADDR
5782: GO 5799
// unit := NewCharacter ( ident ) ;
5784: LD_ADDR_VAR 0 4
5788: PUSH
5789: LD_VAR 0 1
5793: PPUSH
5794: CALL_OW 25
5798: ST_TO_ADDR
// result := unit ;
5799: LD_ADDR_VAR 0 3
5803: PUSH
5804: LD_VAR 0 4
5808: ST_TO_ADDR
// end ;
5809: LD_VAR 0 3
5813: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5814: LD_INT 0
5816: PPUSH
// vc_chassis := chassis ;
5817: LD_ADDR_OWVAR 37
5821: PUSH
5822: LD_VAR 0 1
5826: ST_TO_ADDR
// vc_engine := engine ;
5827: LD_ADDR_OWVAR 39
5831: PUSH
5832: LD_VAR 0 2
5836: ST_TO_ADDR
// vc_control := control ;
5837: LD_ADDR_OWVAR 38
5841: PUSH
5842: LD_VAR 0 3
5846: ST_TO_ADDR
// vc_weapon := weapon ;
5847: LD_ADDR_OWVAR 40
5851: PUSH
5852: LD_VAR 0 4
5856: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5857: LD_ADDR_OWVAR 41
5861: PUSH
5862: LD_VAR 0 5
5866: ST_TO_ADDR
// end ;
5867: LD_VAR 0 6
5871: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
5872: LD_INT 0
5874: PPUSH
5875: PPUSH
5876: PPUSH
5877: PPUSH
5878: PPUSH
5879: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
5880: LD_VAR 0 1
5884: NOT
5885: PUSH
5886: LD_VAR 0 1
5890: PPUSH
5891: CALL_OW 263
5895: PUSH
5896: LD_INT 2
5898: EQUAL
5899: NOT
5900: OR
5901: IFFALSE 5905
// exit ;
5903: GO 6221
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5905: LD_ADDR_VAR 0 6
5909: PUSH
5910: LD_INT 22
5912: PUSH
5913: LD_VAR 0 1
5917: PPUSH
5918: CALL_OW 255
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: LD_INT 2
5929: PUSH
5930: LD_INT 30
5932: PUSH
5933: LD_INT 36
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: PUSH
5940: LD_INT 34
5942: PUSH
5943: LD_INT 31
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: LIST
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: PPUSH
5959: CALL_OW 69
5963: ST_TO_ADDR
// if not tmp then
5964: LD_VAR 0 6
5968: NOT
5969: IFFALSE 5973
// exit ;
5971: GO 6221
// result := [ ] ;
5973: LD_ADDR_VAR 0 2
5977: PUSH
5978: EMPTY
5979: ST_TO_ADDR
// for i in tmp do
5980: LD_ADDR_VAR 0 3
5984: PUSH
5985: LD_VAR 0 6
5989: PUSH
5990: FOR_IN
5991: IFFALSE 6062
// begin t := UnitsInside ( i ) ;
5993: LD_ADDR_VAR 0 4
5997: PUSH
5998: LD_VAR 0 3
6002: PPUSH
6003: CALL_OW 313
6007: ST_TO_ADDR
// if t then
6008: LD_VAR 0 4
6012: IFFALSE 6060
// for j in t do
6014: LD_ADDR_VAR 0 7
6018: PUSH
6019: LD_VAR 0 4
6023: PUSH
6024: FOR_IN
6025: IFFALSE 6058
// result := Insert ( result , result + 1 , j ) ;
6027: LD_ADDR_VAR 0 2
6031: PUSH
6032: LD_VAR 0 2
6036: PPUSH
6037: LD_VAR 0 2
6041: PUSH
6042: LD_INT 1
6044: PLUS
6045: PPUSH
6046: LD_VAR 0 7
6050: PPUSH
6051: CALL_OW 2
6055: ST_TO_ADDR
6056: GO 6024
6058: POP
6059: POP
// end ;
6060: GO 5990
6062: POP
6063: POP
// if not result then
6064: LD_VAR 0 2
6068: NOT
6069: IFFALSE 6073
// exit ;
6071: GO 6221
// mech := result [ 1 ] ;
6073: LD_ADDR_VAR 0 5
6077: PUSH
6078: LD_VAR 0 2
6082: PUSH
6083: LD_INT 1
6085: ARRAY
6086: ST_TO_ADDR
// if result > 1 then
6087: LD_VAR 0 2
6091: PUSH
6092: LD_INT 1
6094: GREATER
6095: IFFALSE 6207
// for i = 2 to result do
6097: LD_ADDR_VAR 0 3
6101: PUSH
6102: DOUBLE
6103: LD_INT 2
6105: DEC
6106: ST_TO_ADDR
6107: LD_VAR 0 2
6111: PUSH
6112: FOR_TO
6113: IFFALSE 6205
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
6115: LD_ADDR_VAR 0 4
6119: PUSH
6120: LD_VAR 0 2
6124: PUSH
6125: LD_VAR 0 3
6129: ARRAY
6130: PPUSH
6131: LD_INT 3
6133: PPUSH
6134: CALL_OW 259
6138: PUSH
6139: LD_VAR 0 2
6143: PUSH
6144: LD_VAR 0 3
6148: ARRAY
6149: PPUSH
6150: CALL_OW 432
6154: MINUS
6155: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
6156: LD_VAR 0 4
6160: PUSH
6161: LD_VAR 0 5
6165: PPUSH
6166: LD_INT 3
6168: PPUSH
6169: CALL_OW 259
6173: PUSH
6174: LD_VAR 0 5
6178: PPUSH
6179: CALL_OW 432
6183: MINUS
6184: GREATEREQUAL
6185: IFFALSE 6203
// mech := result [ i ] ;
6187: LD_ADDR_VAR 0 5
6191: PUSH
6192: LD_VAR 0 2
6196: PUSH
6197: LD_VAR 0 3
6201: ARRAY
6202: ST_TO_ADDR
// end ;
6203: GO 6112
6205: POP
6206: POP
// ComLinkTo ( vehicle , mech ) ;
6207: LD_VAR 0 1
6211: PPUSH
6212: LD_VAR 0 5
6216: PPUSH
6217: CALL_OW 135
// end ;
6221: LD_VAR 0 2
6225: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6226: LD_INT 0
6228: PPUSH
6229: PPUSH
6230: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6231: LD_ADDR_VAR 0 1
6235: PUSH
6236: LD_VAR 0 1
6240: PUSH
6241: LD_EXP 1
6245: PUSH
6246: LD_EXP 2
6250: PUSH
6251: LD_EXP 3
6255: PUSH
6256: LD_EXP 4
6260: PUSH
6261: LD_EXP 5
6265: PUSH
6266: LD_EXP 6
6270: PUSH
6271: LD_EXP 7
6275: PUSH
6276: LD_EXP 8
6280: PUSH
6281: LD_EXP 9
6285: PUSH
6286: LD_EXP 10
6290: PUSH
6291: LD_EXP 11
6295: PUSH
6296: LD_EXP 12
6300: PUSH
6301: LD_EXP 13
6305: PUSH
6306: LD_EXP 14
6310: PUSH
6311: LD_EXP 15
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: DIFF
6333: ST_TO_ADDR
// if not characters then
6334: LD_VAR 0 1
6338: NOT
6339: IFFALSE 6343
// exit ;
6341: GO 6422
// speaker := characters [ rand ( 1 , characters ) ] ;
6343: LD_ADDR_VAR 0 6
6347: PUSH
6348: LD_VAR 0 1
6352: PUSH
6353: LD_INT 1
6355: PPUSH
6356: LD_VAR 0 1
6360: PPUSH
6361: CALL_OW 12
6365: ARRAY
6366: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6367: LD_VAR 0 6
6371: PPUSH
6372: CALL_OW 258
6376: PUSH
6377: LD_INT 1
6379: EQUAL
6380: IFFALSE 6398
// Say ( speaker , dialogMID ) else
6382: LD_VAR 0 6
6386: PPUSH
6387: LD_VAR 0 2
6391: PPUSH
6392: CALL_OW 88
6396: GO 6412
// Say ( speaker , dialogFID ) ;
6398: LD_VAR 0 6
6402: PPUSH
6403: LD_VAR 0 3
6407: PPUSH
6408: CALL_OW 88
// result := speaker ;
6412: LD_ADDR_VAR 0 4
6416: PUSH
6417: LD_VAR 0 6
6421: ST_TO_ADDR
// end ;
6422: LD_VAR 0 4
6426: RET
// export function PrepareDifficulty ; begin
6427: LD_INT 0
6429: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6430: LD_INT 5
6432: PPUSH
6433: LD_INT 8
6435: PPUSH
6436: LD_INT 2
6438: PPUSH
6439: CALL_OW 322
// if difficulty = 1 then
6443: LD_OWVAR 67
6447: PUSH
6448: LD_INT 1
6450: EQUAL
6451: IFFALSE 6570
// begin SetTech ( 66 , 8 , state_researched ) ;
6453: LD_INT 66
6455: PPUSH
6456: LD_INT 8
6458: PPUSH
6459: LD_INT 2
6461: PPUSH
6462: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6466: LD_INT 67
6468: PPUSH
6469: LD_INT 8
6471: PPUSH
6472: LD_INT 0
6474: PPUSH
6475: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6479: LD_INT 68
6481: PPUSH
6482: LD_INT 8
6484: PPUSH
6485: LD_INT 0
6487: PPUSH
6488: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6492: LD_INT 51
6494: PPUSH
6495: LD_INT 8
6497: PPUSH
6498: LD_INT 2
6500: PPUSH
6501: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6505: LD_INT 52
6507: PPUSH
6508: LD_INT 8
6510: PPUSH
6511: LD_INT 0
6513: PPUSH
6514: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6518: LD_INT 53
6520: PPUSH
6521: LD_INT 8
6523: PPUSH
6524: LD_INT 0
6526: PPUSH
6527: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6531: LD_INT 60
6533: PPUSH
6534: LD_INT 8
6536: PPUSH
6537: LD_INT 2
6539: PPUSH
6540: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6544: LD_INT 61
6546: PPUSH
6547: LD_INT 8
6549: PPUSH
6550: LD_INT 0
6552: PPUSH
6553: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6557: LD_INT 62
6559: PPUSH
6560: LD_INT 8
6562: PPUSH
6563: LD_INT 0
6565: PPUSH
6566: CALL_OW 322
// end ; if difficulty = 2 then
6570: LD_OWVAR 67
6574: PUSH
6575: LD_INT 2
6577: EQUAL
6578: IFFALSE 6697
// begin SetTech ( 66 , 8 , state_researched ) ;
6580: LD_INT 66
6582: PPUSH
6583: LD_INT 8
6585: PPUSH
6586: LD_INT 2
6588: PPUSH
6589: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6593: LD_INT 67
6595: PPUSH
6596: LD_INT 8
6598: PPUSH
6599: LD_INT 2
6601: PPUSH
6602: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6606: LD_INT 68
6608: PPUSH
6609: LD_INT 8
6611: PPUSH
6612: LD_INT 0
6614: PPUSH
6615: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6619: LD_INT 51
6621: PPUSH
6622: LD_INT 8
6624: PPUSH
6625: LD_INT 2
6627: PPUSH
6628: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6632: LD_INT 52
6634: PPUSH
6635: LD_INT 8
6637: PPUSH
6638: LD_INT 2
6640: PPUSH
6641: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6645: LD_INT 53
6647: PPUSH
6648: LD_INT 8
6650: PPUSH
6651: LD_INT 2
6653: PPUSH
6654: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6658: LD_INT 60
6660: PPUSH
6661: LD_INT 8
6663: PPUSH
6664: LD_INT 2
6666: PPUSH
6667: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6671: LD_INT 61
6673: PPUSH
6674: LD_INT 8
6676: PPUSH
6677: LD_INT 2
6679: PPUSH
6680: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6684: LD_INT 62
6686: PPUSH
6687: LD_INT 8
6689: PPUSH
6690: LD_INT 0
6692: PPUSH
6693: CALL_OW 322
// end ; if difficulty = 3 then
6697: LD_OWVAR 67
6701: PUSH
6702: LD_INT 3
6704: EQUAL
6705: IFFALSE 6824
// begin SetTech ( 66 , 8 , state_researched ) ;
6707: LD_INT 66
6709: PPUSH
6710: LD_INT 8
6712: PPUSH
6713: LD_INT 2
6715: PPUSH
6716: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6720: LD_INT 67
6722: PPUSH
6723: LD_INT 8
6725: PPUSH
6726: LD_INT 2
6728: PPUSH
6729: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6733: LD_INT 68
6735: PPUSH
6736: LD_INT 8
6738: PPUSH
6739: LD_INT 0
6741: PPUSH
6742: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6746: LD_INT 51
6748: PPUSH
6749: LD_INT 8
6751: PPUSH
6752: LD_INT 2
6754: PPUSH
6755: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6759: LD_INT 52
6761: PPUSH
6762: LD_INT 8
6764: PPUSH
6765: LD_INT 2
6767: PPUSH
6768: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6772: LD_INT 53
6774: PPUSH
6775: LD_INT 8
6777: PPUSH
6778: LD_INT 2
6780: PPUSH
6781: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6785: LD_INT 60
6787: PPUSH
6788: LD_INT 8
6790: PPUSH
6791: LD_INT 2
6793: PPUSH
6794: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6798: LD_INT 61
6800: PPUSH
6801: LD_INT 8
6803: PPUSH
6804: LD_INT 2
6806: PPUSH
6807: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6811: LD_INT 62
6813: PPUSH
6814: LD_INT 8
6816: PPUSH
6817: LD_INT 0
6819: PPUSH
6820: CALL_OW 322
// end ; end ;
6824: LD_VAR 0 1
6828: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6829: LD_INT 0
6831: PPUSH
6832: PPUSH
6833: PPUSH
6834: PPUSH
6835: PPUSH
6836: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6837: LD_ADDR_VAR 0 7
6841: PUSH
6842: LD_INT 22
6844: PUSH
6845: LD_VAR 0 1
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PUSH
6854: LD_INT 25
6856: PUSH
6857: LD_INT 9
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: PPUSH
6868: CALL_OW 69
6872: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6873: LD_ADDR_VAR 0 8
6877: PUSH
6878: LD_INT 22
6880: PUSH
6881: LD_VAR 0 2
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: PUSH
6890: LD_INT 3
6892: PUSH
6893: LD_INT 21
6895: PUSH
6896: LD_INT 3
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PPUSH
6911: CALL_OW 69
6915: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6916: LD_ADDR_VAR 0 5
6920: PUSH
6921: LD_INT 1
6923: PPUSH
6924: LD_INT 3
6926: PPUSH
6927: CALL_OW 12
6931: ST_TO_ADDR
// for i = 1 to list do
6932: LD_ADDR_VAR 0 6
6936: PUSH
6937: DOUBLE
6938: LD_INT 1
6940: DEC
6941: ST_TO_ADDR
6942: LD_VAR 0 7
6946: PUSH
6947: FOR_TO
6948: IFFALSE 7130
// for ta in filter do
6950: LD_ADDR_VAR 0 4
6954: PUSH
6955: LD_VAR 0 8
6959: PUSH
6960: FOR_IN
6961: IFFALSE 7126
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6963: LD_VAR 0 7
6967: PUSH
6968: LD_VAR 0 6
6972: ARRAY
6973: PPUSH
6974: LD_VAR 0 4
6978: PPUSH
6979: CALL_OW 296
6983: PUSH
6984: LD_INT 13
6986: LESSEQUAL
6987: IFFALSE 7124
// begin case c of 1 :
6989: LD_VAR 0 5
6993: PUSH
6994: LD_INT 1
6996: DOUBLE
6997: EQUAL
6998: IFTRUE 7002
7000: GO 7040
7002: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
7003: LD_VAR 0 7
7007: PUSH
7008: LD_VAR 0 6
7012: ARRAY
7013: PPUSH
7014: LD_VAR 0 4
7018: PPUSH
7019: CALL_OW 250
7023: PPUSH
7024: LD_VAR 0 4
7028: PPUSH
7029: CALL_OW 251
7033: PPUSH
7034: CALL_OW 154
7038: GO 7124
7040: LD_INT 2
7042: DOUBLE
7043: EQUAL
7044: IFTRUE 7048
7046: GO 7112
7048: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
7049: LD_VAR 0 7
7053: PUSH
7054: LD_VAR 0 6
7058: ARRAY
7059: PPUSH
7060: LD_VAR 0 4
7064: PPUSH
7065: CALL_OW 250
7069: PUSH
7070: LD_INT 1
7072: NEG
7073: PPUSH
7074: LD_INT 1
7076: PPUSH
7077: CALL_OW 12
7081: PLUS
7082: PPUSH
7083: LD_VAR 0 4
7087: PPUSH
7088: CALL_OW 251
7092: PUSH
7093: LD_INT 1
7095: NEG
7096: PPUSH
7097: LD_INT 1
7099: PPUSH
7100: CALL_OW 12
7104: PLUS
7105: PPUSH
7106: CALL_OW 153
7110: GO 7124
7112: LD_INT 3
7114: DOUBLE
7115: EQUAL
7116: IFTRUE 7120
7118: GO 7123
7120: POP
// ; end ;
7121: GO 7124
7123: POP
// end ; end ;
7124: GO 6960
7126: POP
7127: POP
7128: GO 6947
7130: POP
7131: POP
// end ;
7132: LD_VAR 0 3
7136: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7137: LD_INT 0
7139: PPUSH
7140: PPUSH
// for i in charactersList do
7141: LD_ADDR_VAR 0 4
7145: PUSH
7146: LD_VAR 0 1
7150: PUSH
7151: FOR_IN
7152: IFFALSE 7170
// SaveCharacters ( i , ident ) ;
7154: LD_VAR 0 4
7158: PPUSH
7159: LD_VAR 0 2
7163: PPUSH
7164: CALL_OW 38
7168: GO 7151
7170: POP
7171: POP
// end ;
7172: LD_VAR 0 3
7176: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7177: LD_INT 0
7179: PPUSH
7180: PPUSH
7181: PPUSH
7182: PPUSH
7183: PPUSH
7184: PPUSH
7185: PPUSH
7186: PPUSH
7187: PPUSH
7188: PPUSH
7189: PPUSH
// for i = 1 to medicCount do
7190: LD_ADDR_VAR 0 13
7194: PUSH
7195: DOUBLE
7196: LD_INT 1
7198: DEC
7199: ST_TO_ADDR
7200: LD_VAR 0 7
7204: PUSH
7205: FOR_TO
7206: IFFALSE 7288
// begin uc_side = side ;
7208: LD_ADDR_OWVAR 20
7212: PUSH
7213: LD_VAR 0 1
7217: ST_TO_ADDR
// uc_nation = nation ;
7218: LD_ADDR_OWVAR 21
7222: PUSH
7223: LD_VAR 0 2
7227: ST_TO_ADDR
// hc_name =  ;
7228: LD_ADDR_OWVAR 26
7232: PUSH
7233: LD_STRING 
7235: ST_TO_ADDR
// hc_gallery =  ;
7236: LD_ADDR_OWVAR 33
7240: PUSH
7241: LD_STRING 
7243: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7244: LD_INT 0
7246: PPUSH
7247: LD_INT 4
7249: PPUSH
7250: LD_VAR 0 8
7254: PPUSH
7255: CALL_OW 380
// un = CreateHuman ;
7259: LD_ADDR_VAR 0 15
7263: PUSH
7264: CALL_OW 44
7268: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7269: LD_VAR 0 15
7273: PPUSH
7274: LD_VAR 0 9
7278: PPUSH
7279: LD_INT 0
7281: PPUSH
7282: CALL_OW 49
// end ;
7286: GO 7205
7288: POP
7289: POP
// for i = 1 to soldierCount do
7290: LD_ADDR_VAR 0 13
7294: PUSH
7295: DOUBLE
7296: LD_INT 1
7298: DEC
7299: ST_TO_ADDR
7300: LD_VAR 0 3
7304: PUSH
7305: FOR_TO
7306: IFFALSE 7388
// begin uc_side = side ;
7308: LD_ADDR_OWVAR 20
7312: PUSH
7313: LD_VAR 0 1
7317: ST_TO_ADDR
// uc_nation = nation ;
7318: LD_ADDR_OWVAR 21
7322: PUSH
7323: LD_VAR 0 2
7327: ST_TO_ADDR
// hc_name =  ;
7328: LD_ADDR_OWVAR 26
7332: PUSH
7333: LD_STRING 
7335: ST_TO_ADDR
// hc_gallery =  ;
7336: LD_ADDR_OWVAR 33
7340: PUSH
7341: LD_STRING 
7343: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7344: LD_INT 0
7346: PPUSH
7347: LD_INT 1
7349: PPUSH
7350: LD_VAR 0 8
7354: PPUSH
7355: CALL_OW 380
// un = CreateHuman ;
7359: LD_ADDR_VAR 0 15
7363: PUSH
7364: CALL_OW 44
7368: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7369: LD_VAR 0 15
7373: PPUSH
7374: LD_VAR 0 9
7378: PPUSH
7379: LD_INT 0
7381: PPUSH
7382: CALL_OW 49
// end ;
7386: GO 7305
7388: POP
7389: POP
// for i = 1 to sniperCount do
7390: LD_ADDR_VAR 0 13
7394: PUSH
7395: DOUBLE
7396: LD_INT 1
7398: DEC
7399: ST_TO_ADDR
7400: LD_VAR 0 4
7404: PUSH
7405: FOR_TO
7406: IFFALSE 7488
// begin uc_side = side ;
7408: LD_ADDR_OWVAR 20
7412: PUSH
7413: LD_VAR 0 1
7417: ST_TO_ADDR
// uc_nation = nation ;
7418: LD_ADDR_OWVAR 21
7422: PUSH
7423: LD_VAR 0 2
7427: ST_TO_ADDR
// hc_name =  ;
7428: LD_ADDR_OWVAR 26
7432: PUSH
7433: LD_STRING 
7435: ST_TO_ADDR
// hc_gallery =  ;
7436: LD_ADDR_OWVAR 33
7440: PUSH
7441: LD_STRING 
7443: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7444: LD_INT 0
7446: PPUSH
7447: LD_INT 5
7449: PPUSH
7450: LD_VAR 0 8
7454: PPUSH
7455: CALL_OW 380
// un = CreateHuman ;
7459: LD_ADDR_VAR 0 15
7463: PUSH
7464: CALL_OW 44
7468: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7469: LD_VAR 0 15
7473: PPUSH
7474: LD_VAR 0 9
7478: PPUSH
7479: LD_INT 0
7481: PPUSH
7482: CALL_OW 49
// end ;
7486: GO 7405
7488: POP
7489: POP
// for i = 1 to bazookCount do
7490: LD_ADDR_VAR 0 13
7494: PUSH
7495: DOUBLE
7496: LD_INT 1
7498: DEC
7499: ST_TO_ADDR
7500: LD_VAR 0 5
7504: PUSH
7505: FOR_TO
7506: IFFALSE 7588
// begin uc_side = side ;
7508: LD_ADDR_OWVAR 20
7512: PUSH
7513: LD_VAR 0 1
7517: ST_TO_ADDR
// uc_nation = nation ;
7518: LD_ADDR_OWVAR 21
7522: PUSH
7523: LD_VAR 0 2
7527: ST_TO_ADDR
// hc_name =  ;
7528: LD_ADDR_OWVAR 26
7532: PUSH
7533: LD_STRING 
7535: ST_TO_ADDR
// hc_gallery =  ;
7536: LD_ADDR_OWVAR 33
7540: PUSH
7541: LD_STRING 
7543: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7544: LD_INT 0
7546: PPUSH
7547: LD_INT 9
7549: PPUSH
7550: LD_VAR 0 8
7554: PPUSH
7555: CALL_OW 380
// un = CreateHuman ;
7559: LD_ADDR_VAR 0 15
7563: PUSH
7564: CALL_OW 44
7568: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7569: LD_VAR 0 15
7573: PPUSH
7574: LD_VAR 0 9
7578: PPUSH
7579: LD_INT 0
7581: PPUSH
7582: CALL_OW 49
// end ;
7586: GO 7505
7588: POP
7589: POP
// for i = 1 to mortalCount do
7590: LD_ADDR_VAR 0 13
7594: PUSH
7595: DOUBLE
7596: LD_INT 1
7598: DEC
7599: ST_TO_ADDR
7600: LD_VAR 0 6
7604: PUSH
7605: FOR_TO
7606: IFFALSE 7688
// begin uc_side = side ;
7608: LD_ADDR_OWVAR 20
7612: PUSH
7613: LD_VAR 0 1
7617: ST_TO_ADDR
// uc_nation = nation ;
7618: LD_ADDR_OWVAR 21
7622: PUSH
7623: LD_VAR 0 2
7627: ST_TO_ADDR
// hc_name =  ;
7628: LD_ADDR_OWVAR 26
7632: PUSH
7633: LD_STRING 
7635: ST_TO_ADDR
// hc_gallery =  ;
7636: LD_ADDR_OWVAR 33
7640: PUSH
7641: LD_STRING 
7643: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7644: LD_INT 0
7646: PPUSH
7647: LD_INT 8
7649: PPUSH
7650: LD_VAR 0 8
7654: PPUSH
7655: CALL_OW 380
// un = CreateHuman ;
7659: LD_ADDR_VAR 0 15
7663: PUSH
7664: CALL_OW 44
7668: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7669: LD_VAR 0 15
7673: PPUSH
7674: LD_VAR 0 9
7678: PPUSH
7679: LD_INT 0
7681: PPUSH
7682: CALL_OW 49
// end ;
7686: GO 7605
7688: POP
7689: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7690: LD_ADDR_VAR 0 17
7694: PUSH
7695: LD_INT 22
7697: PUSH
7698: LD_VAR 0 1
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PUSH
7707: LD_INT 25
7709: PUSH
7710: LD_INT 4
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PPUSH
7721: CALL_OW 69
7725: ST_TO_ADDR
// for i in medic_list do
7726: LD_ADDR_VAR 0 13
7730: PUSH
7731: LD_VAR 0 17
7735: PUSH
7736: FOR_IN
7737: IFFALSE 7772
// if GetTag ( i ) = 1 then
7739: LD_VAR 0 13
7743: PPUSH
7744: CALL_OW 110
7748: PUSH
7749: LD_INT 1
7751: EQUAL
7752: IFFALSE 7770
// medic_list := medic_list diff i ;
7754: LD_ADDR_VAR 0 17
7758: PUSH
7759: LD_VAR 0 17
7763: PUSH
7764: LD_VAR 0 13
7768: DIFF
7769: ST_TO_ADDR
7770: GO 7736
7772: POP
7773: POP
// for i in medic_list do
7774: LD_ADDR_VAR 0 13
7778: PUSH
7779: LD_VAR 0 17
7783: PUSH
7784: FOR_IN
7785: IFFALSE 7803
// ComMoveToArea ( i , healArea ) ;
7787: LD_VAR 0 13
7791: PPUSH
7792: LD_VAR 0 10
7796: PPUSH
7797: CALL_OW 113
7801: GO 7784
7803: POP
7804: POP
// repeat wait ( 0 0$1 ) ;
7805: LD_INT 35
7807: PPUSH
7808: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7812: LD_ADDR_VAR 0 16
7816: PUSH
7817: LD_INT 22
7819: PUSH
7820: LD_VAR 0 1
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PUSH
7829: LD_INT 1
7831: PUSH
7832: LD_INT 3
7834: PUSH
7835: LD_INT 24
7837: PUSH
7838: LD_INT 550
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: LD_INT 24
7851: PUSH
7852: LD_INT 250
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: LIST
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PPUSH
7868: CALL_OW 69
7872: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7873: LD_ADDR_VAR 0 18
7877: PUSH
7878: LD_INT 22
7880: PUSH
7881: LD_VAR 0 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 2
7892: PUSH
7893: LD_INT 25
7895: PUSH
7896: LD_INT 1
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: PUSH
7903: LD_INT 25
7905: PUSH
7906: LD_INT 5
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PUSH
7913: LD_INT 25
7915: PUSH
7916: LD_INT 8
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: PUSH
7923: LD_INT 25
7925: PUSH
7926: LD_INT 9
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: PUSH
7940: LD_INT 24
7942: PUSH
7943: LD_INT 1000
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: LIST
7954: PPUSH
7955: CALL_OW 69
7959: ST_TO_ADDR
// if medicCount > 0 then
7960: LD_VAR 0 7
7964: PUSH
7965: LD_INT 0
7967: GREATER
7968: IFFALSE 8042
// begin if damageUnit_list > 0 then
7970: LD_VAR 0 16
7974: PUSH
7975: LD_INT 0
7977: GREATER
7978: IFFALSE 8042
// begin for i in damageUnit_list do
7980: LD_ADDR_VAR 0 13
7984: PUSH
7985: LD_VAR 0 16
7989: PUSH
7990: FOR_IN
7991: IFFALSE 8040
// begin ComMoveToArea ( i , healArea ) ;
7993: LD_VAR 0 13
7997: PPUSH
7998: LD_VAR 0 10
8002: PPUSH
8003: CALL_OW 113
// for j in medic_list do
8007: LD_ADDR_VAR 0 14
8011: PUSH
8012: LD_VAR 0 17
8016: PUSH
8017: FOR_IN
8018: IFFALSE 8036
// AddComHeal ( j , i ) ;
8020: LD_VAR 0 14
8024: PPUSH
8025: LD_VAR 0 13
8029: PPUSH
8030: CALL_OW 188
8034: GO 8017
8036: POP
8037: POP
// end ;
8038: GO 7990
8040: POP
8041: POP
// end ; end ; for i in soldiersOK_list do
8042: LD_ADDR_VAR 0 13
8046: PUSH
8047: LD_VAR 0 18
8051: PUSH
8052: FOR_IN
8053: IFFALSE 8229
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8055: LD_ADDR_VAR 0 21
8059: PUSH
8060: LD_INT 22
8062: PUSH
8063: LD_VAR 0 11
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PPUSH
8072: CALL_OW 69
8076: PPUSH
8077: LD_VAR 0 13
8081: PPUSH
8082: CALL_OW 74
8086: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8087: LD_ADDR_VAR 0 22
8091: PUSH
8092: LD_INT 22
8094: PUSH
8095: LD_VAR 0 11
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: PUSH
8104: LD_INT 2
8106: PUSH
8107: LD_INT 59
8109: PUSH
8110: EMPTY
8111: LIST
8112: PUSH
8113: LD_INT 21
8115: PUSH
8116: LD_INT 1
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: PUSH
8123: LD_INT 21
8125: PUSH
8126: LD_INT 2
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PUSH
8143: EMPTY
8144: LIST
8145: PPUSH
8146: CALL_OW 69
8150: PPUSH
8151: LD_VAR 0 13
8155: PPUSH
8156: CALL_OW 74
8160: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8161: LD_VAR 0 13
8165: PPUSH
8166: LD_VAR 0 21
8170: PPUSH
8171: CALL_OW 296
8175: PUSH
8176: LD_INT 8
8178: PLUS
8179: PUSH
8180: LD_VAR 0 13
8184: PPUSH
8185: LD_VAR 0 22
8189: PPUSH
8190: CALL_OW 296
8194: LESS
8195: IFFALSE 8213
// begin ComAttackUnit ( i , target1 ) ;
8197: LD_VAR 0 13
8201: PPUSH
8202: LD_VAR 0 21
8206: PPUSH
8207: CALL_OW 115
// end else
8211: GO 8227
// begin ComAttackUnit ( i , target2 ) ;
8213: LD_VAR 0 13
8217: PPUSH
8218: LD_VAR 0 22
8222: PPUSH
8223: CALL_OW 115
// end ; end ;
8227: GO 8052
8229: POP
8230: POP
// until soldiersOK_list = [ ] ;
8231: LD_VAR 0 18
8235: PUSH
8236: EMPTY
8237: EQUAL
8238: IFFALSE 7805
// end ;
8240: LD_VAR 0 12
8244: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8245: LD_INT 0
8247: PPUSH
8248: PPUSH
8249: PPUSH
8250: PPUSH
8251: PPUSH
8252: PPUSH
8253: PPUSH
8254: PPUSH
8255: PPUSH
8256: PPUSH
8257: PPUSH
// amChassisTab = [ ] ;
8258: LD_ADDR_VAR 0 19
8262: PUSH
8263: EMPTY
8264: ST_TO_ADDR
// arChassisTab = [ ] ;
8265: LD_ADDR_VAR 0 18
8269: PUSH
8270: EMPTY
8271: ST_TO_ADDR
// ruChassisTab = [ ] ;
8272: LD_ADDR_VAR 0 17
8276: PUSH
8277: EMPTY
8278: ST_TO_ADDR
// for i = 1 to vehCount do
8279: LD_ADDR_VAR 0 13
8283: PUSH
8284: DOUBLE
8285: LD_INT 1
8287: DEC
8288: ST_TO_ADDR
8289: LD_VAR 0 3
8293: PUSH
8294: FOR_TO
8295: IFFALSE 9719
// begin wait ( 0 0$01 ) ;
8297: LD_INT 35
8299: PPUSH
8300: CALL_OW 67
// if nation = 1 then
8304: LD_VAR 0 5
8308: PUSH
8309: LD_INT 1
8311: EQUAL
8312: IFFALSE 8793
// begin uc_side = side ;
8314: LD_ADDR_OWVAR 20
8318: PUSH
8319: LD_VAR 0 2
8323: ST_TO_ADDR
// uc_nation = nation ;
8324: LD_ADDR_OWVAR 21
8328: PUSH
8329: LD_VAR 0 5
8333: ST_TO_ADDR
// vc_engine = vehengine ;
8334: LD_ADDR_OWVAR 39
8338: PUSH
8339: LD_VAR 0 6
8343: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8344: LD_ADDR_OWVAR 40
8348: PUSH
8349: LD_VAR 0 10
8353: PUSH
8354: LD_INT 1
8356: PPUSH
8357: LD_VAR 0 10
8361: PPUSH
8362: CALL_OW 12
8366: ARRAY
8367: ST_TO_ADDR
// for j = 1 to AMWeapon do
8368: LD_ADDR_VAR 0 14
8372: PUSH
8373: DOUBLE
8374: LD_INT 1
8376: DEC
8377: ST_TO_ADDR
8378: LD_VAR 0 10
8382: PUSH
8383: FOR_TO
8384: IFFALSE 8685
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8386: LD_VAR 0 10
8390: PUSH
8391: LD_VAR 0 14
8395: ARRAY
8396: PUSH
8397: LD_INT 2
8399: EQUAL
8400: PUSH
8401: LD_VAR 0 10
8405: PUSH
8406: LD_VAR 0 14
8410: ARRAY
8411: PUSH
8412: LD_INT 3
8414: EQUAL
8415: OR
8416: IFFALSE 8469
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8418: LD_ADDR_VAR 0 19
8422: PUSH
8423: LD_INT 1
8425: PUSH
8426: LD_INT 2
8428: PUSH
8429: LD_INT 3
8431: PUSH
8432: LD_INT 4
8434: PUSH
8435: LD_INT 5
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8445: LD_ADDR_OWVAR 37
8449: PUSH
8450: LD_VAR 0 19
8454: PUSH
8455: LD_INT 1
8457: PPUSH
8458: LD_VAR 0 19
8462: PPUSH
8463: CALL_OW 12
8467: ARRAY
8468: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8469: LD_VAR 0 10
8473: PUSH
8474: LD_VAR 0 14
8478: ARRAY
8479: PUSH
8480: LD_INT 4
8482: EQUAL
8483: PUSH
8484: LD_VAR 0 10
8488: PUSH
8489: LD_VAR 0 14
8493: ARRAY
8494: PUSH
8495: LD_INT 5
8497: EQUAL
8498: OR
8499: PUSH
8500: LD_VAR 0 10
8504: PUSH
8505: LD_VAR 0 14
8509: ARRAY
8510: PUSH
8511: LD_INT 9
8513: EQUAL
8514: OR
8515: PUSH
8516: LD_VAR 0 10
8520: PUSH
8521: LD_VAR 0 14
8525: ARRAY
8526: PUSH
8527: LD_INT 11
8529: EQUAL
8530: OR
8531: PUSH
8532: LD_VAR 0 10
8536: PUSH
8537: LD_VAR 0 14
8541: ARRAY
8542: PUSH
8543: LD_INT 7
8545: EQUAL
8546: OR
8547: IFFALSE 8596
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8549: LD_ADDR_VAR 0 19
8553: PUSH
8554: LD_INT 2
8556: PUSH
8557: LD_INT 3
8559: PUSH
8560: LD_INT 4
8562: PUSH
8563: LD_INT 5
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8572: LD_ADDR_OWVAR 37
8576: PUSH
8577: LD_VAR 0 19
8581: PUSH
8582: LD_INT 1
8584: PPUSH
8585: LD_VAR 0 19
8589: PPUSH
8590: CALL_OW 12
8594: ARRAY
8595: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8596: LD_VAR 0 10
8600: PUSH
8601: LD_VAR 0 14
8605: ARRAY
8606: PUSH
8607: LD_INT 8
8609: EQUAL
8610: PUSH
8611: LD_VAR 0 10
8615: PUSH
8616: LD_VAR 0 14
8620: ARRAY
8621: PUSH
8622: LD_INT 6
8624: EQUAL
8625: OR
8626: PUSH
8627: LD_VAR 0 10
8631: PUSH
8632: LD_VAR 0 14
8636: ARRAY
8637: PUSH
8638: LD_INT 10
8640: EQUAL
8641: OR
8642: IFFALSE 8683
// begin amChassisTab = [ 4 , 5 ] ;
8644: LD_ADDR_VAR 0 19
8648: PUSH
8649: LD_INT 4
8651: PUSH
8652: LD_INT 5
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8659: LD_ADDR_OWVAR 37
8663: PUSH
8664: LD_VAR 0 19
8668: PUSH
8669: LD_INT 1
8671: PPUSH
8672: LD_VAR 0 19
8676: PPUSH
8677: CALL_OW 12
8681: ARRAY
8682: ST_TO_ADDR
// end ; end ;
8683: GO 8383
8685: POP
8686: POP
// veh = CreateVehicle ;
8687: LD_ADDR_VAR 0 16
8691: PUSH
8692: CALL_OW 45
8696: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8697: LD_VAR 0 16
8701: PPUSH
8702: LD_VAR 0 1
8706: PPUSH
8707: LD_INT 0
8709: PPUSH
8710: CALL_OW 49
// if vc_control = 1 then
8714: LD_OWVAR 38
8718: PUSH
8719: LD_INT 1
8721: EQUAL
8722: IFFALSE 8779
// begin hc_gallery =  ;
8724: LD_ADDR_OWVAR 33
8728: PUSH
8729: LD_STRING 
8731: ST_TO_ADDR
// hc_name =  ;
8732: LD_ADDR_OWVAR 26
8736: PUSH
8737: LD_STRING 
8739: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8740: LD_INT 0
8742: PPUSH
8743: LD_INT 3
8745: PPUSH
8746: LD_VAR 0 4
8750: PPUSH
8751: CALL_OW 380
// un = CreateHuman ;
8755: LD_ADDR_VAR 0 15
8759: PUSH
8760: CALL_OW 44
8764: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8765: LD_VAR 0 15
8769: PPUSH
8770: LD_VAR 0 16
8774: PPUSH
8775: CALL_OW 52
// end ; i = i + 1 ;
8779: LD_ADDR_VAR 0 13
8783: PUSH
8784: LD_VAR 0 13
8788: PUSH
8789: LD_INT 1
8791: PLUS
8792: ST_TO_ADDR
// end ; if nation = 2 then
8793: LD_VAR 0 5
8797: PUSH
8798: LD_INT 2
8800: EQUAL
8801: IFFALSE 9303
// begin uc_side = side ;
8803: LD_ADDR_OWVAR 20
8807: PUSH
8808: LD_VAR 0 2
8812: ST_TO_ADDR
// uc_nation = nation ;
8813: LD_ADDR_OWVAR 21
8817: PUSH
8818: LD_VAR 0 5
8822: ST_TO_ADDR
// vc_engine = vehengine ;
8823: LD_ADDR_OWVAR 39
8827: PUSH
8828: LD_VAR 0 6
8832: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8833: LD_INT 22
8835: PUSH
8836: LD_VAR 0 2
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: PUSH
8845: LD_INT 21
8847: PUSH
8848: LD_INT 2
8850: PUSH
8851: EMPTY
8852: LIST
8853: LIST
8854: PUSH
8855: LD_INT 33
8857: PUSH
8858: LD_INT 2
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PUSH
8865: LD_INT 50
8867: PUSH
8868: EMPTY
8869: LIST
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: PPUSH
8877: CALL_OW 69
8881: PUSH
8882: LD_INT 8
8884: LESSEQUAL
8885: IFFALSE 8913
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8887: LD_ADDR_OWVAR 38
8891: PUSH
8892: LD_VAR 0 7
8896: PUSH
8897: LD_INT 1
8899: PPUSH
8900: LD_VAR 0 7
8904: PPUSH
8905: CALL_OW 12
8909: ARRAY
8910: ST_TO_ADDR
8911: GO 8921
// vc_control = control_apeman ;
8913: LD_ADDR_OWVAR 38
8917: PUSH
8918: LD_INT 5
8920: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8921: LD_ADDR_OWVAR 40
8925: PUSH
8926: LD_VAR 0 9
8930: PUSH
8931: LD_INT 1
8933: PPUSH
8934: LD_VAR 0 9
8938: PPUSH
8939: CALL_OW 12
8943: ARRAY
8944: ST_TO_ADDR
// for j = 1 to ARWeapons do
8945: LD_ADDR_VAR 0 14
8949: PUSH
8950: DOUBLE
8951: LD_INT 1
8953: DEC
8954: ST_TO_ADDR
8955: LD_VAR 0 9
8959: PUSH
8960: FOR_TO
8961: IFFALSE 9195
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8963: LD_VAR 0 9
8967: PUSH
8968: LD_VAR 0 14
8972: ARRAY
8973: PUSH
8974: LD_INT 24
8976: EQUAL
8977: PUSH
8978: LD_VAR 0 9
8982: PUSH
8983: LD_VAR 0 14
8987: ARRAY
8988: PUSH
8989: LD_INT 22
8991: EQUAL
8992: OR
8993: PUSH
8994: LD_VAR 0 9
8998: PUSH
8999: LD_VAR 0 14
9003: ARRAY
9004: PUSH
9005: LD_INT 23
9007: EQUAL
9008: OR
9009: PUSH
9010: LD_VAR 0 9
9014: PUSH
9015: LD_VAR 0 14
9019: ARRAY
9020: PUSH
9021: LD_INT 30
9023: EQUAL
9024: OR
9025: IFFALSE 9074
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9027: LD_ADDR_VAR 0 18
9031: PUSH
9032: LD_INT 11
9034: PUSH
9035: LD_INT 12
9037: PUSH
9038: LD_INT 13
9040: PUSH
9041: LD_INT 14
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9050: LD_ADDR_OWVAR 37
9054: PUSH
9055: LD_VAR 0 18
9059: PUSH
9060: LD_INT 1
9062: PPUSH
9063: LD_VAR 0 18
9067: PPUSH
9068: CALL_OW 12
9072: ARRAY
9073: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9074: LD_VAR 0 9
9078: PUSH
9079: LD_VAR 0 14
9083: ARRAY
9084: PUSH
9085: LD_INT 29
9087: EQUAL
9088: PUSH
9089: LD_VAR 0 9
9093: PUSH
9094: LD_VAR 0 14
9098: ARRAY
9099: PUSH
9100: LD_INT 28
9102: EQUAL
9103: OR
9104: PUSH
9105: LD_VAR 0 9
9109: PUSH
9110: LD_VAR 0 14
9114: ARRAY
9115: PUSH
9116: LD_INT 27
9118: EQUAL
9119: OR
9120: PUSH
9121: LD_VAR 0 9
9125: PUSH
9126: LD_VAR 0 14
9130: ARRAY
9131: PUSH
9132: LD_INT 26
9134: EQUAL
9135: OR
9136: PUSH
9137: LD_VAR 0 9
9141: PUSH
9142: LD_VAR 0 14
9146: ARRAY
9147: PUSH
9148: LD_INT 25
9150: EQUAL
9151: OR
9152: IFFALSE 9193
// begin arChassisTab = [ 13 , 14 ] ;
9154: LD_ADDR_VAR 0 18
9158: PUSH
9159: LD_INT 13
9161: PUSH
9162: LD_INT 14
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9169: LD_ADDR_OWVAR 37
9173: PUSH
9174: LD_VAR 0 18
9178: PUSH
9179: LD_INT 1
9181: PPUSH
9182: LD_VAR 0 18
9186: PPUSH
9187: CALL_OW 12
9191: ARRAY
9192: ST_TO_ADDR
// end ; end ;
9193: GO 8960
9195: POP
9196: POP
// veh = CreateVehicle ;
9197: LD_ADDR_VAR 0 16
9201: PUSH
9202: CALL_OW 45
9206: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9207: LD_VAR 0 16
9211: PPUSH
9212: LD_VAR 0 1
9216: PPUSH
9217: LD_INT 0
9219: PPUSH
9220: CALL_OW 49
// if vc_control = 1 then
9224: LD_OWVAR 38
9228: PUSH
9229: LD_INT 1
9231: EQUAL
9232: IFFALSE 9289
// begin hc_gallery =  ;
9234: LD_ADDR_OWVAR 33
9238: PUSH
9239: LD_STRING 
9241: ST_TO_ADDR
// hc_name =  ;
9242: LD_ADDR_OWVAR 26
9246: PUSH
9247: LD_STRING 
9249: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9250: LD_INT 0
9252: PPUSH
9253: LD_INT 3
9255: PPUSH
9256: LD_VAR 0 4
9260: PPUSH
9261: CALL_OW 380
// un = CreateHuman ;
9265: LD_ADDR_VAR 0 15
9269: PUSH
9270: CALL_OW 44
9274: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9275: LD_VAR 0 15
9279: PPUSH
9280: LD_VAR 0 16
9284: PPUSH
9285: CALL_OW 52
// end ; i = i + 1 ;
9289: LD_ADDR_VAR 0 13
9293: PUSH
9294: LD_VAR 0 13
9298: PUSH
9299: LD_INT 1
9301: PLUS
9302: ST_TO_ADDR
// end ; if nation = 3 then
9303: LD_VAR 0 5
9307: PUSH
9308: LD_INT 3
9310: EQUAL
9311: IFFALSE 9717
// begin uc_side = side ;
9313: LD_ADDR_OWVAR 20
9317: PUSH
9318: LD_VAR 0 2
9322: ST_TO_ADDR
// uc_nation = nation ;
9323: LD_ADDR_OWVAR 21
9327: PUSH
9328: LD_VAR 0 5
9332: ST_TO_ADDR
// vc_engine = vehengine ;
9333: LD_ADDR_OWVAR 39
9337: PUSH
9338: LD_VAR 0 6
9342: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
9343: LD_ADDR_OWVAR 38
9347: PUSH
9348: LD_VAR 0 7
9352: PUSH
9353: LD_INT 1
9355: PPUSH
9356: LD_VAR 0 7
9360: PPUSH
9361: CALL_OW 12
9365: ARRAY
9366: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9367: LD_ADDR_OWVAR 40
9371: PUSH
9372: LD_VAR 0 8
9376: PUSH
9377: LD_INT 1
9379: PPUSH
9380: LD_VAR 0 8
9384: PPUSH
9385: CALL_OW 12
9389: ARRAY
9390: ST_TO_ADDR
// for j = 1 to RuWeapons do
9391: LD_ADDR_VAR 0 14
9395: PUSH
9396: DOUBLE
9397: LD_INT 1
9399: DEC
9400: ST_TO_ADDR
9401: LD_VAR 0 8
9405: PUSH
9406: FOR_TO
9407: IFFALSE 9593
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9409: LD_VAR 0 8
9413: PUSH
9414: LD_VAR 0 14
9418: ARRAY
9419: PUSH
9420: LD_INT 42
9422: EQUAL
9423: PUSH
9424: LD_VAR 0 8
9428: PUSH
9429: LD_VAR 0 14
9433: ARRAY
9434: PUSH
9435: LD_INT 43
9437: EQUAL
9438: OR
9439: PUSH
9440: LD_VAR 0 8
9444: PUSH
9445: LD_VAR 0 14
9449: ARRAY
9450: PUSH
9451: LD_INT 44
9453: EQUAL
9454: OR
9455: PUSH
9456: LD_VAR 0 8
9460: PUSH
9461: LD_VAR 0 14
9465: ARRAY
9466: PUSH
9467: LD_INT 45
9469: EQUAL
9470: OR
9471: PUSH
9472: LD_VAR 0 8
9476: PUSH
9477: LD_VAR 0 14
9481: ARRAY
9482: PUSH
9483: LD_INT 49
9485: EQUAL
9486: OR
9487: IFFALSE 9524
// begin ruChassisTab = [ 24 ] ;
9489: LD_ADDR_VAR 0 17
9493: PUSH
9494: LD_INT 24
9496: PUSH
9497: EMPTY
9498: LIST
9499: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9500: LD_ADDR_OWVAR 37
9504: PUSH
9505: LD_VAR 0 17
9509: PUSH
9510: LD_INT 1
9512: PPUSH
9513: LD_VAR 0 17
9517: PPUSH
9518: CALL_OW 12
9522: ARRAY
9523: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9524: LD_VAR 0 8
9528: PUSH
9529: LD_VAR 0 14
9533: ARRAY
9534: PUSH
9535: LD_INT 46
9537: EQUAL
9538: PUSH
9539: LD_VAR 0 8
9543: PUSH
9544: LD_VAR 0 14
9548: ARRAY
9549: PUSH
9550: LD_INT 47
9552: EQUAL
9553: OR
9554: IFFALSE 9591
// begin ruChassisTab = [ 24 ] ;
9556: LD_ADDR_VAR 0 17
9560: PUSH
9561: LD_INT 24
9563: PUSH
9564: EMPTY
9565: LIST
9566: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9567: LD_ADDR_OWVAR 37
9571: PUSH
9572: LD_VAR 0 17
9576: PUSH
9577: LD_INT 1
9579: PPUSH
9580: LD_VAR 0 17
9584: PPUSH
9585: CALL_OW 12
9589: ARRAY
9590: ST_TO_ADDR
// end ; end ;
9591: GO 9406
9593: POP
9594: POP
// veh = CreateVehicle ;
9595: LD_ADDR_VAR 0 16
9599: PUSH
9600: CALL_OW 45
9604: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9605: LD_VAR 0 16
9609: PPUSH
9610: LD_VAR 0 1
9614: PPUSH
9615: LD_INT 0
9617: PPUSH
9618: CALL_OW 49
// if vc_control = 1 then
9622: LD_OWVAR 38
9626: PUSH
9627: LD_INT 1
9629: EQUAL
9630: IFFALSE 9717
// begin if uc_side = 8 then
9632: LD_OWVAR 20
9636: PUSH
9637: LD_INT 8
9639: EQUAL
9640: IFFALSE 9652
// uc_nation = 2 else
9642: LD_ADDR_OWVAR 21
9646: PUSH
9647: LD_INT 2
9649: ST_TO_ADDR
9650: GO 9662
// uc_nation = nation ;
9652: LD_ADDR_OWVAR 21
9656: PUSH
9657: LD_VAR 0 5
9661: ST_TO_ADDR
// hc_gallery =  ;
9662: LD_ADDR_OWVAR 33
9666: PUSH
9667: LD_STRING 
9669: ST_TO_ADDR
// hc_name =  ;
9670: LD_ADDR_OWVAR 26
9674: PUSH
9675: LD_STRING 
9677: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9678: LD_INT 0
9680: PPUSH
9681: LD_INT 3
9683: PPUSH
9684: LD_VAR 0 4
9688: PPUSH
9689: CALL_OW 380
// un = CreateHuman ;
9693: LD_ADDR_VAR 0 15
9697: PUSH
9698: CALL_OW 44
9702: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9703: LD_VAR 0 15
9707: PPUSH
9708: LD_VAR 0 16
9712: PPUSH
9713: CALL_OW 52
// end ; end ; end ;
9717: GO 8294
9719: POP
9720: POP
// repeat wait ( 0 0$1 ) ;
9721: LD_INT 35
9723: PPUSH
9724: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9728: LD_ADDR_VAR 0 20
9732: PUSH
9733: LD_INT 22
9735: PUSH
9736: LD_VAR 0 2
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PUSH
9745: LD_INT 21
9747: PUSH
9748: LD_INT 2
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: PUSH
9755: LD_INT 24
9757: PUSH
9758: LD_INT 250
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: PUSH
9765: LD_INT 2
9767: PUSH
9768: LD_INT 34
9770: PUSH
9771: LD_INT 25
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: PUSH
9778: LD_INT 34
9780: PUSH
9781: LD_INT 26
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: PUSH
9788: LD_INT 34
9790: PUSH
9791: LD_INT 27
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PUSH
9798: LD_INT 34
9800: PUSH
9801: LD_INT 28
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PUSH
9808: LD_INT 34
9810: PUSH
9811: LD_INT 29
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: PUSH
9818: LD_INT 34
9820: PUSH
9821: LD_INT 46
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: PUSH
9828: LD_INT 34
9830: PUSH
9831: LD_INT 44
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: PUSH
9838: LD_INT 34
9840: PUSH
9841: LD_INT 45
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PUSH
9848: LD_INT 34
9850: PUSH
9851: LD_INT 47
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: PPUSH
9876: CALL_OW 69
9880: ST_TO_ADDR
// if vehicleOK_list > 0 then
9881: LD_VAR 0 20
9885: PUSH
9886: LD_INT 0
9888: GREATER
9889: IFFALSE 10108
// begin for i in vehicleOK_list do
9891: LD_ADDR_VAR 0 13
9895: PUSH
9896: LD_VAR 0 20
9900: PUSH
9901: FOR_IN
9902: IFFALSE 10106
// begin if GetSide ( i ) <> side then
9904: LD_VAR 0 13
9908: PPUSH
9909: CALL_OW 255
9913: PUSH
9914: LD_VAR 0 2
9918: NONEQUAL
9919: IFFALSE 9932
// begin ComStop ( i ) ;
9921: LD_VAR 0 13
9925: PPUSH
9926: CALL_OW 141
// continue ;
9930: GO 9901
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9932: LD_ADDR_VAR 0 21
9936: PUSH
9937: LD_INT 22
9939: PUSH
9940: LD_VAR 0 11
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PPUSH
9949: CALL_OW 69
9953: PPUSH
9954: LD_VAR 0 13
9958: PPUSH
9959: CALL_OW 74
9963: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9964: LD_ADDR_VAR 0 22
9968: PUSH
9969: LD_INT 22
9971: PUSH
9972: LD_VAR 0 11
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: PUSH
9981: LD_INT 2
9983: PUSH
9984: LD_INT 59
9986: PUSH
9987: EMPTY
9988: LIST
9989: PUSH
9990: LD_INT 21
9992: PUSH
9993: LD_INT 1
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: LD_INT 21
10002: PUSH
10003: LD_INT 2
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: PUSH
10020: EMPTY
10021: LIST
10022: PPUSH
10023: CALL_OW 69
10027: PPUSH
10028: LD_VAR 0 13
10032: PPUSH
10033: CALL_OW 74
10037: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10038: LD_VAR 0 13
10042: PPUSH
10043: LD_VAR 0 21
10047: PPUSH
10048: CALL_OW 296
10052: PUSH
10053: LD_INT 8
10055: PLUS
10056: PUSH
10057: LD_VAR 0 13
10061: PPUSH
10062: LD_VAR 0 22
10066: PPUSH
10067: CALL_OW 296
10071: LESS
10072: IFFALSE 10090
// begin ComAttackUnit ( i , target1 ) ;
10074: LD_VAR 0 13
10078: PPUSH
10079: LD_VAR 0 21
10083: PPUSH
10084: CALL_OW 115
// end else
10088: GO 10104
// begin ComAttackUnit ( i , target2 ) ;
10090: LD_VAR 0 13
10094: PPUSH
10095: LD_VAR 0 22
10099: PPUSH
10100: CALL_OW 115
// end ; end ;
10104: GO 9901
10106: POP
10107: POP
// end ; until vehicleOK_list = 0 ;
10108: LD_VAR 0 20
10112: PUSH
10113: LD_INT 0
10115: EQUAL
10116: IFFALSE 9721
// end ;
10118: LD_VAR 0 12
10122: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
10123: LD_INT 0
10125: PPUSH
10126: PPUSH
10127: PPUSH
10128: PPUSH
10129: PPUSH
10130: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
10131: LD_ADDR_VAR 0 6
10135: PUSH
10136: LD_INT 22
10138: PUSH
10139: LD_VAR 0 1
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 34
10150: PUSH
10151: LD_INT 29
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PPUSH
10162: CALL_OW 69
10166: ST_TO_ADDR
// if veh_list = 0 then
10167: LD_VAR 0 6
10171: PUSH
10172: LD_INT 0
10174: EQUAL
10175: IFFALSE 10179
// exit ;
10177: GO 10384
// if veh_list > 0 then
10179: LD_VAR 0 6
10183: PUSH
10184: LD_INT 0
10186: GREATER
10187: IFFALSE 10384
// begin for i in veh_List do
10189: LD_ADDR_VAR 0 4
10193: PUSH
10194: LD_VAR 0 6
10198: PUSH
10199: FOR_IN
10200: IFFALSE 10382
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10202: LD_ADDR_VAR 0 7
10206: PUSH
10207: LD_INT 22
10209: PUSH
10210: LD_VAR 0 2
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: LD_INT 24
10221: PUSH
10222: LD_INT 250
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: LD_INT 2
10231: PUSH
10232: LD_INT 59
10234: PUSH
10235: EMPTY
10236: LIST
10237: PUSH
10238: LD_INT 21
10240: PUSH
10241: LD_INT 1
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PUSH
10248: LD_INT 21
10250: PUSH
10251: LD_INT 2
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: LIST
10268: PUSH
10269: EMPTY
10270: LIST
10271: PPUSH
10272: CALL_OW 69
10276: PPUSH
10277: LD_VAR 0 4
10281: PPUSH
10282: CALL_OW 74
10286: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
10287: LD_VAR 0 4
10291: PPUSH
10292: LD_VAR 0 7
10296: PPUSH
10297: CALL_OW 115
// if not HasTask ( i ) then
10301: LD_VAR 0 4
10305: PPUSH
10306: CALL_OW 314
10310: NOT
10311: IFFALSE 10380
// begin wait ( 0 0$0.1 ) ;
10313: LD_INT 4
10315: PPUSH
10316: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
10320: LD_ADDR_VAR 0 8
10324: PUSH
10325: LD_INT 22
10327: PUSH
10328: LD_VAR 0 2
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 24
10339: PUSH
10340: LD_INT 250
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PPUSH
10351: CALL_OW 69
10355: PPUSH
10356: LD_VAR 0 4
10360: PPUSH
10361: CALL_OW 74
10365: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
10366: LD_VAR 0 4
10370: PPUSH
10371: LD_VAR 0 8
10375: PPUSH
10376: CALL_OW 115
// end ; end ;
10380: GO 10199
10382: POP
10383: POP
// end ; end ; end_of_file
10384: LD_VAR 0 3
10388: RET
// every 0 0$1 do
10389: GO 10391
10391: DISABLE
// begin enable ;
10392: ENABLE
// IntBazooka ( 7 , 1 ) ;
10393: LD_INT 7
10395: PPUSH
10396: LD_INT 1
10398: PPUSH
10399: CALL 6829 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10403: LD_INT 8
10405: PPUSH
10406: LD_INT 1
10408: PPUSH
10409: CALL 10123 0 2
// end ;
10413: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10414: LD_INT 22
10416: PUSH
10417: LD_INT 3
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: PUSH
10424: LD_INT 21
10426: PUSH
10427: LD_INT 2
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PUSH
10434: LD_INT 50
10436: PUSH
10437: EMPTY
10438: LIST
10439: PUSH
10440: LD_INT 2
10442: PUSH
10443: LD_INT 34
10445: PUSH
10446: LD_INT 46
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: PUSH
10453: LD_INT 34
10455: PUSH
10456: LD_INT 44
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: PUSH
10463: LD_INT 34
10465: PUSH
10466: LD_INT 45
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: PUSH
10473: LD_INT 34
10475: PUSH
10476: LD_INT 47
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: PPUSH
10496: CALL_OW 69
10500: PUSH
10501: LD_INT 0
10503: GREATER
10504: PUSH
10505: LD_INT 22
10507: PUSH
10508: LD_INT 3
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PUSH
10515: LD_INT 21
10517: PUSH
10518: LD_INT 2
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PUSH
10525: LD_INT 50
10527: PUSH
10528: EMPTY
10529: LIST
10530: PUSH
10531: LD_INT 34
10533: PUSH
10534: LD_INT 49
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: PPUSH
10547: CALL_OW 69
10551: PUSH
10552: LD_INT 0
10554: GREATER
10555: AND
10556: IFFALSE 10728
10558: GO 10560
10560: DISABLE
10561: LD_INT 0
10563: PPUSH
10564: PPUSH
// begin enable ;
10565: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10566: LD_ADDR_VAR 0 1
10570: PUSH
10571: LD_INT 22
10573: PUSH
10574: LD_INT 3
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: LD_INT 21
10583: PUSH
10584: LD_INT 2
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: PUSH
10591: LD_INT 50
10593: PUSH
10594: EMPTY
10595: LIST
10596: PUSH
10597: LD_INT 2
10599: PUSH
10600: LD_INT 34
10602: PUSH
10603: LD_INT 46
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PUSH
10610: LD_INT 34
10612: PUSH
10613: LD_INT 44
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PUSH
10620: LD_INT 34
10622: PUSH
10623: LD_INT 45
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: PUSH
10630: LD_INT 34
10632: PUSH
10633: LD_INT 47
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: PPUSH
10653: CALL_OW 69
10657: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10658: LD_ADDR_VAR 0 2
10662: PUSH
10663: LD_INT 22
10665: PUSH
10666: LD_INT 3
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: PUSH
10673: LD_INT 21
10675: PUSH
10676: LD_INT 2
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: PUSH
10683: LD_INT 50
10685: PUSH
10686: EMPTY
10687: LIST
10688: PUSH
10689: LD_INT 34
10691: PUSH
10692: LD_INT 49
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: PPUSH
10705: CALL_OW 69
10709: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10710: LD_VAR 0 2
10714: PPUSH
10715: LD_VAR 0 1
10719: PUSH
10720: LD_INT 1
10722: ARRAY
10723: PPUSH
10724: CALL_OW 112
// end ; end_of_file
10728: PPOPN 2
10730: END
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
10731: LD_EXP 38
10735: PUSH
10736: LD_INT 1
10738: EQUAL
10739: IFFALSE 11641
10741: GO 10743
10743: DISABLE
10744: LD_INT 0
10746: PPUSH
10747: PPUSH
10748: PPUSH
// begin m1 := false ;
10749: LD_ADDR_VAR 0 1
10753: PUSH
10754: LD_INT 0
10756: ST_TO_ADDR
// m2 := false ;
10757: LD_ADDR_VAR 0 2
10761: PUSH
10762: LD_INT 0
10764: ST_TO_ADDR
// m3 := false ;
10765: LD_ADDR_VAR 0 3
10769: PUSH
10770: LD_INT 0
10772: ST_TO_ADDR
// Say ( JMM , D9b-JMM-1 ) ;
10773: LD_EXP 1
10777: PPUSH
10778: LD_STRING D9b-JMM-1
10780: PPUSH
10781: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10785: LD_EXP 15
10789: PPUSH
10790: LD_STRING D9b-Pow-1
10792: PPUSH
10793: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10797: LD_EXP 1
10801: PPUSH
10802: LD_STRING D9b-JMM-2
10804: PPUSH
10805: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10809: LD_EXP 15
10813: PPUSH
10814: LD_STRING D9b-Pow-2
10816: PPUSH
10817: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10821: LD_EXP 1
10825: PPUSH
10826: LD_STRING D9b-JMM-3
10828: PPUSH
10829: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10833: LD_EXP 15
10837: PPUSH
10838: LD_STRING D9b-Pow-3
10840: PPUSH
10841: CALL_OW 94
// if tick <= 60 60$00 then
10845: LD_OWVAR 1
10849: PUSH
10850: LD_INT 126000
10852: LESSEQUAL
10853: IFFALSE 10862
// SetAchievement ( ACH_ASPEED_13 ) ;
10855: LD_STRING ACH_ASPEED_13
10857: PPUSH
10858: CALL_OW 543
// if burlakStatus = 1 then
10862: LD_EXP 28
10866: PUSH
10867: LD_INT 1
10869: EQUAL
10870: IFFALSE 10892
// begin m1 := true ;
10872: LD_ADDR_VAR 0 1
10876: PUSH
10877: LD_INT 1
10879: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
10880: LD_STRING Burlak
10882: PPUSH
10883: LD_INT 1
10885: PPUSH
10886: CALL_OW 101
// end else
10890: GO 10903
// begin AddMedal ( Burlak , - 1 ) ;
10892: LD_STRING Burlak
10894: PPUSH
10895: LD_INT 1
10897: NEG
10898: PPUSH
10899: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10903: LD_EXP 2
10907: PPUSH
10908: CALL_OW 302
10912: IFFALSE 10934
// begin m2 := true ;
10914: LD_ADDR_VAR 0 2
10918: PUSH
10919: LD_INT 1
10921: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
10922: LD_STRING Stevens
10924: PPUSH
10925: LD_INT 1
10927: PPUSH
10928: CALL_OW 101
// end else
10932: GO 10945
// begin AddMedal ( Stevens , - 1 ) ;
10934: LD_STRING Stevens
10936: PPUSH
10937: LD_INT 1
10939: NEG
10940: PPUSH
10941: CALL_OW 101
// end ; if radarOnSpot = 1 then
10945: LD_EXP 30
10949: PUSH
10950: LD_INT 1
10952: EQUAL
10953: IFFALSE 10975
// begin m3 := true ;
10955: LD_ADDR_VAR 0 3
10959: PUSH
10960: LD_INT 1
10962: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
10963: LD_STRING Observation
10965: PPUSH
10966: LD_INT 1
10968: PPUSH
10969: CALL_OW 101
// end else
10973: GO 10986
// begin AddMedal ( Observation , - 1 ) ;
10975: LD_STRING Observation
10977: PPUSH
10978: LD_INT 1
10980: NEG
10981: PPUSH
10982: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
10986: LD_VAR 0 1
10990: PUSH
10991: LD_VAR 0 2
10995: AND
10996: PUSH
10997: LD_VAR 0 3
11001: AND
11002: PUSH
11003: LD_OWVAR 67
11007: PUSH
11008: LD_INT 3
11010: EQUAL
11011: AND
11012: IFFALSE 11024
// SetAchievementEX ( ACH_AMER , 13 ) ;
11014: LD_STRING ACH_AMER
11016: PPUSH
11017: LD_INT 13
11019: PPUSH
11020: CALL_OW 564
// GiveMedals ( MAIN ) ;
11024: LD_STRING MAIN
11026: PPUSH
11027: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
11031: LD_EXP 28
11035: PPUSH
11036: LD_STRING 13_BurlakStatus_1
11038: PPUSH
11039: CALL_OW 39
// if IsLive ( Stevens ) then
11043: LD_EXP 2
11047: PPUSH
11048: CALL_OW 300
11052: IFFALSE 11066
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
11054: LD_INT 1
11056: PPUSH
11057: LD_STRING 13_StevensStatus_1
11059: PPUSH
11060: CALL_OW 39
11064: GO 11076
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
11066: LD_INT 0
11068: PPUSH
11069: LD_STRING 13_StevensStatus_1
11071: PPUSH
11072: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
11076: LD_INT 22
11078: PUSH
11079: LD_INT 1
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: LD_INT 21
11088: PUSH
11089: LD_INT 1
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 2
11098: PUSH
11099: LD_INT 25
11101: PUSH
11102: LD_INT 1
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: PUSH
11109: LD_INT 25
11111: PUSH
11112: LD_INT 2
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: PUSH
11119: LD_INT 25
11121: PUSH
11122: LD_INT 3
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 25
11131: PUSH
11132: LD_INT 4
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: LD_INT 25
11141: PUSH
11142: LD_INT 5
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PUSH
11149: LD_INT 25
11151: PUSH
11152: LD_INT 8
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: LIST
11172: PPUSH
11173: CALL_OW 69
11177: PPUSH
11178: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11182: LD_EXP 1
11186: PPUSH
11187: LD_EXP 34
11191: PUSH
11192: LD_STRING JMM
11194: STR
11195: PPUSH
11196: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
11200: LD_EXP 8
11204: PPUSH
11205: LD_EXP 34
11209: PUSH
11210: LD_STRING Brown
11212: STR
11213: PPUSH
11214: CALL 7137 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11218: LD_EXP 4
11222: PPUSH
11223: LD_EXP 34
11227: PUSH
11228: LD_STRING Donaldson
11230: STR
11231: PPUSH
11232: CALL 7137 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11236: LD_EXP 5
11240: PPUSH
11241: LD_EXP 34
11245: PUSH
11246: LD_STRING Bobby
11248: STR
11249: PPUSH
11250: CALL 7137 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11254: LD_EXP 6
11258: PPUSH
11259: LD_EXP 34
11263: PUSH
11264: LD_STRING Cyrus
11266: STR
11267: PPUSH
11268: CALL 7137 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11272: LD_EXP 3
11276: PPUSH
11277: LD_EXP 34
11281: PUSH
11282: LD_STRING Lisa
11284: STR
11285: PPUSH
11286: CALL 7137 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
11290: LD_EXP 13
11294: PPUSH
11295: LD_EXP 34
11299: PUSH
11300: LD_STRING Frank
11302: STR
11303: PPUSH
11304: CALL 7137 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11308: LD_EXP 14
11312: PPUSH
11313: LD_EXP 34
11317: PUSH
11318: LD_STRING Kikuchi
11320: STR
11321: PPUSH
11322: CALL 7137 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
11326: LD_EXP 10
11330: PPUSH
11331: LD_EXP 34
11335: PUSH
11336: LD_STRING Houten
11338: STR
11339: PPUSH
11340: CALL 7137 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
11344: LD_EXP 12
11348: PPUSH
11349: LD_EXP 34
11353: PUSH
11354: LD_STRING Gary
11356: STR
11357: PPUSH
11358: CALL 7137 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
11362: LD_EXP 11
11366: PPUSH
11367: LD_EXP 34
11371: PUSH
11372: LD_STRING Cornell
11374: STR
11375: PPUSH
11376: CALL 7137 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
11380: LD_EXP 7
11384: PPUSH
11385: LD_EXP 34
11389: PUSH
11390: LD_STRING Denis
11392: STR
11393: PPUSH
11394: CALL 7137 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11398: LD_EXP 9
11402: PPUSH
11403: LD_EXP 34
11407: PUSH
11408: LD_STRING Gladstone
11410: STR
11411: PPUSH
11412: CALL 7137 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
11416: LD_EXP 2
11420: PPUSH
11421: LD_EXP 34
11425: PUSH
11426: LD_STRING Stevens
11428: STR
11429: PPUSH
11430: CALL 7137 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
11434: LD_INT 50
11436: PUSH
11437: EMPTY
11438: LIST
11439: PUSH
11440: LD_INT 22
11442: PUSH
11443: LD_INT 1
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PUSH
11450: LD_INT 21
11452: PUSH
11453: LD_INT 1
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: LD_INT 2
11462: PUSH
11463: LD_INT 25
11465: PUSH
11466: LD_INT 1
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: PUSH
11473: LD_INT 25
11475: PUSH
11476: LD_INT 2
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PUSH
11483: LD_INT 25
11485: PUSH
11486: LD_INT 3
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 25
11495: PUSH
11496: LD_INT 4
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: LD_INT 25
11505: PUSH
11506: LD_INT 5
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 25
11515: PUSH
11516: LD_INT 8
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: PPUSH
11538: CALL_OW 69
11542: PUSH
11543: LD_EXP 1
11547: PUSH
11548: LD_EXP 8
11552: PUSH
11553: LD_EXP 4
11557: PUSH
11558: LD_EXP 5
11562: PUSH
11563: LD_EXP 6
11567: PUSH
11568: LD_EXP 3
11572: PUSH
11573: LD_EXP 13
11577: PUSH
11578: LD_EXP 9
11582: PUSH
11583: LD_EXP 14
11587: PUSH
11588: LD_EXP 7
11592: PUSH
11593: LD_EXP 10
11597: PUSH
11598: LD_EXP 12
11602: PUSH
11603: LD_EXP 11
11607: PUSH
11608: LD_EXP 2
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: DIFF
11629: PPUSH
11630: LD_STRING 13_other_survivors
11632: PPUSH
11633: CALL_OW 38
// YouWin ;
11637: CALL_OW 103
// end ; end_of_file
11641: PPOPN 3
11643: END
// every 0 0$1 trigger sibDestroyedCounter = 2 do var i , tmp , yourSiberite ;
11644: LD_EXP 32
11648: PUSH
11649: LD_INT 2
11651: EQUAL
11652: IFFALSE 11788
11654: GO 11656
11656: DISABLE
11657: LD_INT 0
11659: PPUSH
11660: PPUSH
11661: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11662: LD_ADDR_VAR 0 2
11666: PUSH
11667: LD_INT 22
11669: PUSH
11670: LD_INT 1
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: PUSH
11677: LD_INT 21
11679: PUSH
11680: LD_INT 3
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 2
11689: PUSH
11690: LD_INT 30
11692: PUSH
11693: LD_INT 0
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: LD_INT 30
11702: PUSH
11703: LD_INT 1
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: LIST
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: LIST
11719: PPUSH
11720: CALL_OW 69
11724: ST_TO_ADDR
// for i in tmp do
11725: LD_ADDR_VAR 0 1
11729: PUSH
11730: LD_VAR 0 2
11734: PUSH
11735: FOR_IN
11736: IFFALSE 11769
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11738: LD_ADDR_VAR 0 3
11742: PUSH
11743: LD_VAR 0 3
11747: PUSH
11748: LD_VAR 0 1
11752: PPUSH
11753: CALL_OW 274
11757: PPUSH
11758: LD_INT 3
11760: PPUSH
11761: CALL_OW 275
11765: PLUS
11766: ST_TO_ADDR
11767: GO 11735
11769: POP
11770: POP
// if yourSiberite < 79 then
11771: LD_VAR 0 3
11775: PUSH
11776: LD_INT 79
11778: LESS
11779: IFFALSE 11788
// YouLost ( siberite ) ;
11781: LD_STRING siberite
11783: PPUSH
11784: CALL_OW 104
// end ;
11788: PPOPN 3
11790: END
// every 0 0$1 trigger IsDead ( JMM ) do
11791: LD_EXP 1
11795: PPUSH
11796: CALL_OW 301
11800: IFFALSE 11812
11802: GO 11804
11804: DISABLE
// YouLost ( JMM ) ; end_of_file
11805: LD_STRING JMM
11807: PPUSH
11808: CALL_OW 104
11812: END
// every 8 8$0 + 7 7$0 do
11813: GO 11815
11815: DISABLE
// begin enable ;
11816: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 1 , 3 ) , 0 , 0 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11817: LD_INT 8
11819: PPUSH
11820: LD_INT 2
11822: PPUSH
11823: LD_INT 1
11825: PPUSH
11826: LD_INT 3
11828: PPUSH
11829: CALL_OW 12
11833: PPUSH
11834: LD_INT 0
11836: PPUSH
11837: LD_INT 0
11839: PPUSH
11840: LD_INT 2
11842: PUSH
11843: LD_INT 3
11845: PUSH
11846: LD_INT 4
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: LIST
11853: PUSH
11854: LD_OWVAR 67
11858: ARRAY
11859: PPUSH
11860: LD_INT 0
11862: PPUSH
11863: LD_INT 10
11865: PPUSH
11866: LD_INT 8
11868: PUSH
11869: LD_INT 9
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 1
11878: PPUSH
11879: LD_INT 2
11881: PPUSH
11882: CALL_OW 12
11886: ARRAY
11887: PPUSH
11888: LD_INT 12
11890: PPUSH
11891: LD_INT 1
11893: PPUSH
11894: CALL 7177 0 11
// end ;
11898: END
// every 8 8$0 + 7 7$0 do var i , veh ;
11899: GO 11901
11901: DISABLE
11902: LD_INT 0
11904: PPUSH
11905: PPUSH
// begin enable ;
11906: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11907: LD_ADDR_EXP 33
11911: PUSH
11912: LD_EXP 33
11916: PUSH
11917: LD_INT 1
11919: PLUS
11920: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) = 0 then
11921: LD_INT 22
11923: PUSH
11924: LD_INT 8
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: LD_INT 3
11933: PUSH
11934: LD_INT 58
11936: PUSH
11937: EMPTY
11938: LIST
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: LD_INT 34
11946: PUSH
11947: LD_INT 31
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: LIST
11958: PPUSH
11959: CALL_OW 69
11963: PUSH
11964: LD_INT 0
11966: EQUAL
11967: IFFALSE 12108
// begin uc_side := 8 ;
11969: LD_ADDR_OWVAR 20
11973: PUSH
11974: LD_INT 8
11976: ST_TO_ADDR
// uc_nation := 2 ;
11977: LD_ADDR_OWVAR 21
11981: PUSH
11982: LD_INT 2
11984: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
11985: LD_INT 14
11987: PPUSH
11988: LD_INT 3
11990: PPUSH
11991: LD_INT 1
11993: PPUSH
11994: LD_INT 31
11996: PPUSH
11997: LD_INT 100
11999: PPUSH
12000: CALL 5814 0 5
// for i = 1 to 2 do
12004: LD_ADDR_VAR 0 1
12008: PUSH
12009: DOUBLE
12010: LD_INT 1
12012: DEC
12013: ST_TO_ADDR
12014: LD_INT 2
12016: PUSH
12017: FOR_TO
12018: IFFALSE 12106
// begin veh := CreateVehicle ;
12020: LD_ADDR_VAR 0 2
12024: PUSH
12025: CALL_OW 45
12029: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12030: LD_VAR 0 2
12034: PPUSH
12035: LD_INT 5
12037: PPUSH
12038: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12042: LD_VAR 0 2
12046: PPUSH
12047: LD_INT 181
12049: PPUSH
12050: LD_INT 105
12052: PPUSH
12053: LD_INT 12
12055: PPUSH
12056: LD_INT 0
12058: PPUSH
12059: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 ] [ Difficulty ] ) ;
12063: LD_INT 0
12065: PPUSH
12066: LD_INT 7
12068: PUSH
12069: LD_INT 9
12071: PUSH
12072: LD_INT 10
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: PUSH
12080: LD_OWVAR 67
12084: ARRAY
12085: PPUSH
12086: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12090: CALL_OW 44
12094: PPUSH
12095: LD_VAR 0 2
12099: PPUSH
12100: CALL_OW 52
// end ;
12104: GO 12017
12106: POP
12107: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 10 ) ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
12108: LD_INT 8
12110: PUSH
12111: LD_INT 9
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PUSH
12118: LD_INT 1
12120: PPUSH
12121: LD_INT 2
12123: PPUSH
12124: CALL_OW 12
12128: ARRAY
12129: PPUSH
12130: LD_INT 8
12132: PPUSH
12133: LD_INT 4
12135: PPUSH
12136: LD_INT 6
12138: PPUSH
12139: CALL_OW 12
12143: PUSH
12144: LD_INT 6
12146: PPUSH
12147: LD_INT 9
12149: PPUSH
12150: CALL_OW 12
12154: PUSH
12155: LD_INT 7
12157: PPUSH
12158: LD_INT 10
12160: PPUSH
12161: CALL_OW 12
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: LIST
12170: PUSH
12171: LD_OWVAR 67
12175: ARRAY
12176: PPUSH
12177: LD_INT 10
12179: PPUSH
12180: LD_INT 2
12182: PPUSH
12183: LD_INT 3
12185: PPUSH
12186: LD_INT 5
12188: PUSH
12189: LD_INT 2
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PPUSH
12196: EMPTY
12197: PPUSH
12198: LD_INT 25
12200: PUSH
12201: LD_INT 26
12203: PUSH
12204: LD_INT 27
12206: PUSH
12207: LD_INT 28
12209: PUSH
12210: LD_INT 29
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: PPUSH
12220: EMPTY
12221: PPUSH
12222: LD_INT 1
12224: PPUSH
12225: CALL 8245 0 11
// end ;
12229: PPOPN 2
12231: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do var i , veh ;
12232: LD_EXP 33
12236: PUSH
12237: LD_INT 4
12239: GREATEREQUAL
12240: IFFALSE 12522
12242: GO 12244
12244: DISABLE
12245: LD_INT 0
12247: PPUSH
12248: PPUSH
// begin enable ;
12249: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
12250: LD_ADDR_EXP 33
12254: PUSH
12255: LD_EXP 33
12259: PUSH
12260: LD_INT 1
12262: PLUS
12263: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) = 0 then
12264: LD_INT 22
12266: PUSH
12267: LD_INT 8
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: PUSH
12274: LD_INT 34
12276: PUSH
12277: LD_INT 31
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PPUSH
12288: CALL_OW 69
12292: PUSH
12293: LD_INT 0
12295: EQUAL
12296: IFFALSE 12437
// begin uc_side := 8 ;
12298: LD_ADDR_OWVAR 20
12302: PUSH
12303: LD_INT 8
12305: ST_TO_ADDR
// uc_nation := 2 ;
12306: LD_ADDR_OWVAR 21
12310: PUSH
12311: LD_INT 2
12313: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12314: LD_INT 14
12316: PPUSH
12317: LD_INT 3
12319: PPUSH
12320: LD_INT 1
12322: PPUSH
12323: LD_INT 31
12325: PPUSH
12326: LD_INT 100
12328: PPUSH
12329: CALL 5814 0 5
// for i = 1 to 2 do
12333: LD_ADDR_VAR 0 1
12337: PUSH
12338: DOUBLE
12339: LD_INT 1
12341: DEC
12342: ST_TO_ADDR
12343: LD_INT 2
12345: PUSH
12346: FOR_TO
12347: IFFALSE 12435
// begin veh := CreateVehicle ;
12349: LD_ADDR_VAR 0 2
12353: PUSH
12354: CALL_OW 45
12358: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12359: LD_VAR 0 2
12363: PPUSH
12364: LD_INT 5
12366: PPUSH
12367: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12371: LD_VAR 0 2
12375: PPUSH
12376: LD_INT 181
12378: PPUSH
12379: LD_INT 105
12381: PPUSH
12382: LD_INT 12
12384: PPUSH
12385: LD_INT 0
12387: PPUSH
12388: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
12392: LD_INT 0
12394: PPUSH
12395: LD_INT 8
12397: PUSH
12398: LD_INT 9
12400: PUSH
12401: LD_INT 10
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: LIST
12408: PUSH
12409: LD_OWVAR 67
12413: ARRAY
12414: PPUSH
12415: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12419: CALL_OW 44
12423: PPUSH
12424: LD_VAR 0 2
12428: PPUSH
12429: CALL_OW 52
// end ;
12433: GO 12346
12435: POP
12436: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
12437: LD_INT 8
12439: PUSH
12440: LD_INT 9
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: LD_INT 1
12449: PPUSH
12450: LD_INT 2
12452: PPUSH
12453: CALL_OW 12
12457: ARRAY
12458: PPUSH
12459: LD_INT 8
12461: PPUSH
12462: LD_INT 1
12464: PUSH
12465: LD_INT 2
12467: PUSH
12468: LD_INT 3
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: LIST
12475: PUSH
12476: LD_OWVAR 67
12480: ARRAY
12481: PPUSH
12482: LD_INT 10
12484: PPUSH
12485: LD_INT 3
12487: PPUSH
12488: LD_INT 3
12490: PPUSH
12491: LD_INT 1
12493: PUSH
12494: LD_INT 1
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PPUSH
12501: LD_INT 47
12503: PUSH
12504: LD_INT 47
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PPUSH
12511: EMPTY
12512: PPUSH
12513: EMPTY
12514: PPUSH
12515: LD_INT 1
12517: PPUSH
12518: CALL 8245 0 11
// end ;
12522: PPOPN 2
12524: END
// every 1 1$0 trigger eventVar2 = 1 do
12525: LD_EXP 36
12529: PUSH
12530: LD_INT 1
12532: EQUAL
12533: IFFALSE 12635
12535: GO 12537
12537: DISABLE
// begin RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 5 , 7 , 8 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
12538: LD_INT 8
12540: PUSH
12541: LD_INT 9
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: PUSH
12548: LD_INT 1
12550: PPUSH
12551: LD_INT 2
12553: PPUSH
12554: CALL_OW 12
12558: ARRAY
12559: PPUSH
12560: LD_INT 3
12562: PPUSH
12563: LD_INT 5
12565: PUSH
12566: LD_INT 7
12568: PUSH
12569: LD_INT 8
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: LIST
12576: PUSH
12577: LD_OWVAR 67
12581: ARRAY
12582: PPUSH
12583: LD_INT 10
12585: PPUSH
12586: LD_INT 3
12588: PPUSH
12589: LD_INT 3
12591: PPUSH
12592: LD_INT 3
12594: PUSH
12595: LD_INT 3
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PPUSH
12602: LD_INT 46
12604: PUSH
12605: LD_INT 44
12607: PUSH
12608: LD_INT 45
12610: PUSH
12611: LD_INT 47
12613: PUSH
12614: LD_INT 49
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: PPUSH
12624: EMPTY
12625: PPUSH
12626: EMPTY
12627: PPUSH
12628: LD_INT 1
12630: PPUSH
12631: CALL 8245 0 11
// end ; end_of_file
12635: END
// every 1 1$0 do
12636: GO 12638
12638: DISABLE
// begin enable ;
12639: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
12640: LD_INT 3
12642: PPUSH
12643: LD_INT 5
12645: PPUSH
12646: CALL_OW 12
12650: PPUSH
12651: LD_INT 13
12653: PPUSH
12654: LD_INT 1
12656: PPUSH
12657: CALL_OW 55
// end ; end_of_file
12661: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
12662: GO 12664
12664: DISABLE
// begin ru_radar := 98 ;
12665: LD_ADDR_EXP 43
12669: PUSH
12670: LD_INT 98
12672: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12673: LD_ADDR_EXP 44
12677: PUSH
12678: LD_INT 89
12680: ST_TO_ADDR
// us_hack := 99 ;
12681: LD_ADDR_EXP 45
12685: PUSH
12686: LD_INT 99
12688: ST_TO_ADDR
// us_artillery := 97 ;
12689: LD_ADDR_EXP 46
12693: PUSH
12694: LD_INT 97
12696: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12697: LD_ADDR_EXP 47
12701: PUSH
12702: LD_INT 91
12704: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
12705: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
12706: LD_INT 0
12708: PPUSH
12709: PPUSH
12710: PPUSH
12711: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
12712: LD_VAR 0 1
12716: PPUSH
12717: CALL_OW 264
12721: PUSH
12722: LD_EXP 47
12726: EQUAL
12727: IFFALSE 12799
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
12729: LD_INT 68
12731: PPUSH
12732: LD_VAR 0 1
12736: PPUSH
12737: CALL_OW 255
12741: PPUSH
12742: CALL_OW 321
12746: PUSH
12747: LD_INT 2
12749: EQUAL
12750: IFFALSE 12762
// eff := 70 else
12752: LD_ADDR_VAR 0 6
12756: PUSH
12757: LD_INT 70
12759: ST_TO_ADDR
12760: GO 12770
// eff := 30 ;
12762: LD_ADDR_VAR 0 6
12766: PUSH
12767: LD_INT 30
12769: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
12770: LD_VAR 0 1
12774: PPUSH
12775: CALL_OW 250
12779: PPUSH
12780: LD_VAR 0 1
12784: PPUSH
12785: CALL_OW 251
12789: PPUSH
12790: LD_VAR 0 6
12794: PPUSH
12795: CALL_OW 495
// end ; end ;
12799: LD_VAR 0 4
12803: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
12804: LD_INT 0
12806: PPUSH
12807: PPUSH
12808: PPUSH
12809: PPUSH
12810: PPUSH
12811: PPUSH
// if cmd = 124 then
12812: LD_VAR 0 1
12816: PUSH
12817: LD_INT 124
12819: EQUAL
12820: IFFALSE 13026
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
12822: LD_ADDR_VAR 0 5
12826: PUSH
12827: LD_INT 2
12829: PUSH
12830: LD_INT 34
12832: PUSH
12833: LD_INT 53
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PUSH
12840: LD_INT 34
12842: PUSH
12843: LD_INT 14
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: LIST
12854: PPUSH
12855: CALL_OW 69
12859: ST_TO_ADDR
// if not tmp then
12860: LD_VAR 0 5
12864: NOT
12865: IFFALSE 12869
// exit ;
12867: GO 13026
// for i in tmp do
12869: LD_ADDR_VAR 0 3
12873: PUSH
12874: LD_VAR 0 5
12878: PUSH
12879: FOR_IN
12880: IFFALSE 13024
// begin taskList := GetTaskList ( i ) ;
12882: LD_ADDR_VAR 0 6
12886: PUSH
12887: LD_VAR 0 3
12891: PPUSH
12892: CALL_OW 437
12896: ST_TO_ADDR
// if not taskList then
12897: LD_VAR 0 6
12901: NOT
12902: IFFALSE 12906
// continue ;
12904: GO 12879
// for j = 1 to taskList do
12906: LD_ADDR_VAR 0 4
12910: PUSH
12911: DOUBLE
12912: LD_INT 1
12914: DEC
12915: ST_TO_ADDR
12916: LD_VAR 0 6
12920: PUSH
12921: FOR_TO
12922: IFFALSE 13020
// if taskList [ j ] [ 1 ] = | then
12924: LD_VAR 0 6
12928: PUSH
12929: LD_VAR 0 4
12933: ARRAY
12934: PUSH
12935: LD_INT 1
12937: ARRAY
12938: PUSH
12939: LD_STRING |
12941: EQUAL
12942: IFFALSE 13018
// begin _taskList := Delete ( taskList , 1 ) ;
12944: LD_ADDR_VAR 0 7
12948: PUSH
12949: LD_VAR 0 6
12953: PPUSH
12954: LD_INT 1
12956: PPUSH
12957: CALL_OW 3
12961: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
12962: LD_VAR 0 3
12966: PPUSH
12967: LD_VAR 0 7
12971: PPUSH
12972: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
12976: LD_VAR 0 3
12980: PPUSH
12981: LD_VAR 0 6
12985: PUSH
12986: LD_VAR 0 4
12990: ARRAY
12991: PUSH
12992: LD_INT 2
12994: ARRAY
12995: PPUSH
12996: LD_VAR 0 6
13000: PUSH
13001: LD_VAR 0 4
13005: ARRAY
13006: PUSH
13007: LD_INT 3
13009: ARRAY
13010: PPUSH
13011: LD_INT 8
13013: PPUSH
13014: CALL 13031 0 4
// end ;
13018: GO 12921
13020: POP
13021: POP
// end ;
13022: GO 12879
13024: POP
13025: POP
// end ; end ;
13026: LD_VAR 0 2
13030: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
13031: LD_INT 0
13033: PPUSH
13034: PPUSH
13035: PPUSH
13036: PPUSH
13037: PPUSH
13038: PPUSH
13039: PPUSH
13040: PPUSH
13041: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
13042: LD_VAR 0 1
13046: NOT
13047: PUSH
13048: LD_VAR 0 2
13052: PPUSH
13053: LD_VAR 0 3
13057: PPUSH
13058: CALL_OW 488
13062: NOT
13063: OR
13064: PUSH
13065: LD_VAR 0 4
13069: NOT
13070: OR
13071: IFFALSE 13075
// exit ;
13073: GO 13415
// list := [ ] ;
13075: LD_ADDR_VAR 0 13
13079: PUSH
13080: EMPTY
13081: ST_TO_ADDR
// if x - r < 0 then
13082: LD_VAR 0 2
13086: PUSH
13087: LD_VAR 0 4
13091: MINUS
13092: PUSH
13093: LD_INT 0
13095: LESS
13096: IFFALSE 13108
// min_x := 0 else
13098: LD_ADDR_VAR 0 7
13102: PUSH
13103: LD_INT 0
13105: ST_TO_ADDR
13106: GO 13124
// min_x := x - r ;
13108: LD_ADDR_VAR 0 7
13112: PUSH
13113: LD_VAR 0 2
13117: PUSH
13118: LD_VAR 0 4
13122: MINUS
13123: ST_TO_ADDR
// if y - r < 0 then
13124: LD_VAR 0 3
13128: PUSH
13129: LD_VAR 0 4
13133: MINUS
13134: PUSH
13135: LD_INT 0
13137: LESS
13138: IFFALSE 13150
// min_y := 0 else
13140: LD_ADDR_VAR 0 8
13144: PUSH
13145: LD_INT 0
13147: ST_TO_ADDR
13148: GO 13166
// min_y := y - r ;
13150: LD_ADDR_VAR 0 8
13154: PUSH
13155: LD_VAR 0 3
13159: PUSH
13160: LD_VAR 0 4
13164: MINUS
13165: ST_TO_ADDR
// max_x := x + r ;
13166: LD_ADDR_VAR 0 9
13170: PUSH
13171: LD_VAR 0 2
13175: PUSH
13176: LD_VAR 0 4
13180: PLUS
13181: ST_TO_ADDR
// max_y := y + r ;
13182: LD_ADDR_VAR 0 10
13186: PUSH
13187: LD_VAR 0 3
13191: PUSH
13192: LD_VAR 0 4
13196: PLUS
13197: ST_TO_ADDR
// for _x = min_x to max_x do
13198: LD_ADDR_VAR 0 11
13202: PUSH
13203: DOUBLE
13204: LD_VAR 0 7
13208: DEC
13209: ST_TO_ADDR
13210: LD_VAR 0 9
13214: PUSH
13215: FOR_TO
13216: IFFALSE 13333
// for _y = min_y to max_y do
13218: LD_ADDR_VAR 0 12
13222: PUSH
13223: DOUBLE
13224: LD_VAR 0 8
13228: DEC
13229: ST_TO_ADDR
13230: LD_VAR 0 10
13234: PUSH
13235: FOR_TO
13236: IFFALSE 13329
// begin if not ValidHex ( _x , _y ) then
13238: LD_VAR 0 11
13242: PPUSH
13243: LD_VAR 0 12
13247: PPUSH
13248: CALL_OW 488
13252: NOT
13253: IFFALSE 13257
// continue ;
13255: GO 13235
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
13257: LD_VAR 0 11
13261: PPUSH
13262: LD_VAR 0 12
13266: PPUSH
13267: CALL_OW 351
13271: PUSH
13272: LD_VAR 0 11
13276: PPUSH
13277: LD_VAR 0 12
13281: PPUSH
13282: CALL_OW 554
13286: AND
13287: IFFALSE 13327
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
13289: LD_ADDR_VAR 0 13
13293: PUSH
13294: LD_VAR 0 13
13298: PPUSH
13299: LD_VAR 0 13
13303: PUSH
13304: LD_INT 1
13306: PLUS
13307: PPUSH
13308: LD_VAR 0 11
13312: PUSH
13313: LD_VAR 0 12
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PPUSH
13322: CALL_OW 2
13326: ST_TO_ADDR
// end ;
13327: GO 13235
13329: POP
13330: POP
13331: GO 13215
13333: POP
13334: POP
// if not list then
13335: LD_VAR 0 13
13339: NOT
13340: IFFALSE 13344
// exit ;
13342: GO 13415
// for i in list do
13344: LD_ADDR_VAR 0 6
13348: PUSH
13349: LD_VAR 0 13
13353: PUSH
13354: FOR_IN
13355: IFFALSE 13413
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
13357: LD_VAR 0 1
13361: PPUSH
13362: LD_STRING M
13364: PUSH
13365: LD_VAR 0 6
13369: PUSH
13370: LD_INT 1
13372: ARRAY
13373: PUSH
13374: LD_VAR 0 6
13378: PUSH
13379: LD_INT 2
13381: ARRAY
13382: PUSH
13383: LD_INT 0
13385: PUSH
13386: LD_INT 0
13388: PUSH
13389: LD_INT 0
13391: PUSH
13392: LD_INT 0
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: PUSH
13404: EMPTY
13405: LIST
13406: PPUSH
13407: CALL_OW 447
13411: GO 13354
13413: POP
13414: POP
// end ;
13415: LD_VAR 0 5
13419: RET
