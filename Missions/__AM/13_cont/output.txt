// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; export eventArabianAttack , eventRussianAttack , eventContaminate ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak := 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus := 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot := 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched := 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter := 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits := [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter := 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources := [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles := [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 := 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 := 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 := 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 := 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 := 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// eventArabianAttack := 1 ;
 154: LD_ADDR_EXP 43
 158: PUSH
 159: LD_INT 1
 161: ST_TO_ADDR
// eventRussianAttack := 2 ;
 162: LD_ADDR_EXP 44
 166: PUSH
 167: LD_INT 2
 169: ST_TO_ADDR
// eventContaminate := 3 ;
 170: LD_ADDR_EXP 45
 174: PUSH
 175: LD_INT 3
 177: ST_TO_ADDR
// mission_prefix := 13f_ ;
 178: LD_ADDR_EXP 34
 182: PUSH
 183: LD_STRING 13f_
 185: ST_TO_ADDR
// debugMode := 0 ;
 186: LD_ADDR_EXP 40
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// achivCounter := 0 ;
 194: LD_ADDR_EXP 41
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// if Difficulty = 1 then
 202: LD_OWVAR 67
 206: PUSH
 207: LD_INT 1
 209: EQUAL
 210: IFFALSE 219
// RemoveEnvironmentArea ( oilBlockArea ) ;
 212: LD_INT 15
 214: PPUSH
 215: CALL_OW 355
// PrepareVehicles ;
 219: CALL 1203 0 0
// PrepareHeroes ;
 223: CALL 460 0 0
// PrepareAmericansRandom ;
 227: CALL 1107 0 0
// PrepareDifficulty ;
 231: CALL 8411 0 0
// Action ;
 235: CALL 5275 0 0
// end ;
 239: END
// every 0 0$1 trigger debugMode do var i , j ;
 240: LD_EXP 40
 244: IFFALSE 415
 246: GO 248
 248: DISABLE
 249: LD_INT 0
 251: PPUSH
 252: PPUSH
// begin enable ;
 253: ENABLE
// FogOff ( true ) ;
 254: LD_INT 1
 256: PPUSH
 257: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 261: LD_ADDR_VAR 0 1
 265: PUSH
 266: LD_INT 22
 268: PUSH
 269: LD_INT 1
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PPUSH
 290: CALL_OW 69
 294: PUSH
 295: FOR_IN
 296: IFFALSE 312
// SetLives ( i , 1000 ) ;
 298: LD_VAR 0 1
 302: PPUSH
 303: LD_INT 1000
 305: PPUSH
 306: CALL_OW 234
 310: GO 295
 312: POP
 313: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 314: LD_ADDR_VAR 0 1
 318: PUSH
 319: LD_INT 22
 321: PUSH
 322: LD_INT 1
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: LD_INT 2
 331: PUSH
 332: LD_INT 30
 334: PUSH
 335: LD_INT 0
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 30
 344: PUSH
 345: LD_INT 1
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: LIST
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PPUSH
 361: CALL_OW 69
 365: PUSH
 366: FOR_IN
 367: IFFALSE 413
// for j := 1 to 3 do
 369: LD_ADDR_VAR 0 2
 373: PUSH
 374: DOUBLE
 375: LD_INT 1
 377: DEC
 378: ST_TO_ADDR
 379: LD_INT 3
 381: PUSH
 382: FOR_TO
 383: IFFALSE 409
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 385: LD_VAR 0 1
 389: PPUSH
 390: CALL_OW 274
 394: PPUSH
 395: LD_VAR 0 2
 399: PPUSH
 400: LD_INT 9999
 402: PPUSH
 403: CALL_OW 277
 407: GO 382
 409: POP
 410: POP
 411: GO 366
 413: POP
 414: POP
// end ;
 415: PPOPN 2
 417: END
// every 0 0$1 trigger achivCounter >= 2 do
 418: LD_EXP 41
 422: PUSH
 423: LD_INT 2
 425: GREATEREQUAL
 426: IFFALSE 438
 428: GO 430
 430: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 431: LD_STRING ACH_REMOTE
 433: PPUSH
 434: CALL_OW 543
 438: END
// every 0 0$1 trigger destroyCounter >= 30 do
 439: LD_EXP 42
 443: PUSH
 444: LD_INT 30
 446: GREATEREQUAL
 447: IFFALSE 459
 449: GO 451
 451: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 452: LD_STRING ACH_DEFMASTER
 454: PPUSH
 455: CALL_OW 543
 459: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 460: LD_INT 0
 462: PPUSH
 463: PPUSH
 464: PPUSH
 465: PPUSH
// uc_side = 1 ;
 466: LD_ADDR_OWVAR 20
 470: PUSH
 471: LD_INT 1
 473: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 474: LD_ADDR_EXP 1
 478: PUSH
 479: LD_STRING JMM
 481: PPUSH
 482: LD_EXP 40
 486: NOT
 487: PPUSH
 488: LD_STRING 13c_
 490: PPUSH
 491: CALL 30136 0 3
 495: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 496: LD_ADDR_EXP 2
 500: PUSH
 501: LD_STRING Stevens
 503: PPUSH
 504: LD_EXP 40
 508: NOT
 509: PPUSH
 510: LD_STRING 13c_
 512: PPUSH
 513: CALL 30136 0 3
 517: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 518: LD_ADDR_EXP 3
 522: PUSH
 523: LD_STRING Lisa
 525: PPUSH
 526: LD_EXP 40
 530: NOT
 531: PPUSH
 532: LD_STRING 13c_
 534: PPUSH
 535: CALL 30136 0 3
 539: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 540: LD_ADDR_EXP 4
 544: PUSH
 545: LD_STRING Donaldson
 547: PPUSH
 548: LD_EXP 40
 552: NOT
 553: PPUSH
 554: LD_STRING 13c_
 556: PPUSH
 557: CALL 30136 0 3
 561: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 562: LD_ADDR_EXP 5
 566: PUSH
 567: LD_STRING Bobby
 569: PPUSH
 570: LD_EXP 40
 574: NOT
 575: PPUSH
 576: LD_STRING 13c_
 578: PPUSH
 579: CALL 30136 0 3
 583: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 584: LD_ADDR_EXP 6
 588: PUSH
 589: LD_STRING Cyrus
 591: PPUSH
 592: LD_EXP 40
 596: NOT
 597: PPUSH
 598: LD_STRING 13c_
 600: PPUSH
 601: CALL 30136 0 3
 605: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 606: LD_ADDR_EXP 7
 610: PUSH
 611: LD_STRING Denis
 613: PPUSH
 614: LD_EXP 40
 618: NOT
 619: PPUSH
 620: LD_STRING 13c_
 622: PPUSH
 623: CALL 30136 0 3
 627: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 628: LD_ADDR_EXP 8
 632: PUSH
 633: LD_STRING Brown
 635: PPUSH
 636: LD_EXP 40
 640: NOT
 641: PPUSH
 642: LD_STRING 13c_
 644: PPUSH
 645: CALL 30136 0 3
 649: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true , 13c_ ) ;
 650: LD_ADDR_EXP 9
 654: PUSH
 655: LD_STRING Gladstone
 657: PPUSH
 658: LD_INT 1
 660: PPUSH
 661: LD_STRING 13c_
 663: PPUSH
 664: CALL 30136 0 3
 668: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true , 13c_ ) ;
 669: LD_ADDR_EXP 10
 673: PUSH
 674: LD_STRING Houten
 676: PPUSH
 677: LD_INT 1
 679: PPUSH
 680: LD_STRING 13c_
 682: PPUSH
 683: CALL 30136 0 3
 687: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , true , 13c_ ) ;
 688: LD_ADDR_EXP 11
 692: PUSH
 693: LD_STRING Cornel
 695: PPUSH
 696: LD_INT 1
 698: PPUSH
 699: LD_STRING 13c_
 701: PPUSH
 702: CALL 30136 0 3
 706: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true , 13c_ ) ;
 707: LD_ADDR_EXP 12
 711: PUSH
 712: LD_STRING Gary
 714: PPUSH
 715: LD_INT 1
 717: PPUSH
 718: LD_STRING 13c_
 720: PPUSH
 721: CALL 30136 0 3
 725: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 13c_ ) ;
 726: LD_ADDR_EXP 13
 730: PUSH
 731: LD_STRING Frank
 733: PPUSH
 734: LD_INT 1
 736: PPUSH
 737: LD_STRING 13c_
 739: PPUSH
 740: CALL 30136 0 3
 744: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true , 13c_ ) ;
 745: LD_ADDR_EXP 14
 749: PUSH
 750: LD_STRING Kikuchi
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: LD_STRING 13c_
 758: PPUSH
 759: CALL 30136 0 3
 763: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 764: LD_ADDR_EXP 15
 768: PUSH
 769: LD_STRING Powell
 771: PPUSH
 772: LD_INT 0
 774: PPUSH
 775: LD_STRING 
 777: PPUSH
 778: CALL 30136 0 3
 782: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 783: LD_ADDR_VAR 0 2
 787: PUSH
 788: LD_EXP 1
 792: PUSH
 793: LD_EXP 2
 797: PUSH
 798: LD_EXP 3
 802: PUSH
 803: LD_EXP 4
 807: PUSH
 808: LD_EXP 5
 812: PUSH
 813: LD_EXP 6
 817: PUSH
 818: LD_EXP 7
 822: PUSH
 823: LD_EXP 8
 827: PUSH
 828: LD_EXP 9
 832: PUSH
 833: LD_EXP 10
 837: PUSH
 838: LD_EXP 11
 842: PUSH
 843: LD_EXP 12
 847: PUSH
 848: LD_EXP 13
 852: PUSH
 853: LD_EXP 14
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 874: LD_ADDR_VAR 0 3
 878: PUSH
 879: LD_INT 22
 881: PUSH
 882: LD_INT 1
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: PUSH
 889: LD_INT 33
 891: PUSH
 892: LD_INT 1
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: LD_INT 21
 901: PUSH
 902: LD_INT 2
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: LIST
 913: PPUSH
 914: CALL_OW 69
 918: ST_TO_ADDR
// for i = tmp downto 1 do
 919: LD_ADDR_VAR 0 4
 923: PUSH
 924: DOUBLE
 925: LD_VAR 0 2
 929: INC
 930: ST_TO_ADDR
 931: LD_INT 1
 933: PUSH
 934: FOR_DOWNTO
 935: IFFALSE 972
// if not tmp [ i ] then
 937: LD_VAR 0 2
 941: PUSH
 942: LD_VAR 0 4
 946: ARRAY
 947: NOT
 948: IFFALSE 970
// tmp := Delete ( tmp , i ) ;
 950: LD_ADDR_VAR 0 2
 954: PUSH
 955: LD_VAR 0 2
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 3
 969: ST_TO_ADDR
 970: GO 934
 972: POP
 973: POP
// for i = 1 to tmp do
 974: LD_ADDR_VAR 0 4
 978: PUSH
 979: DOUBLE
 980: LD_INT 1
 982: DEC
 983: ST_TO_ADDR
 984: LD_VAR 0 2
 988: PUSH
 989: FOR_TO
 990: IFFALSE 1020
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
 992: LD_VAR 0 2
 996: PUSH
 997: LD_VAR 0 4
1001: ARRAY
1002: PPUSH
1003: LD_VAR 0 3
1007: PUSH
1008: LD_VAR 0 4
1012: ARRAY
1013: PPUSH
1014: CALL_OW 52
1018: GO 989
1020: POP
1021: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1022: LD_INT 22
1024: PUSH
1025: LD_INT 1
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 25
1034: PUSH
1035: LD_INT 2
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PPUSH
1046: CALL_OW 69
1050: PUSH
1051: LD_INT 0
1053: EQUAL
1054: PUSH
1055: LD_INT 22
1057: PUSH
1058: LD_INT 1
1060: PUSH
1061: EMPTY
1062: LIST
1063: LIST
1064: PUSH
1065: LD_INT 34
1067: PUSH
1068: LD_INT 13
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: PPUSH
1079: CALL_OW 69
1083: PUSH
1084: LD_INT 0
1086: EQUAL
1087: AND
1088: IFFALSE 1102
// SetClass ( JMM , 2 ) ;
1090: LD_EXP 1
1094: PPUSH
1095: LD_INT 2
1097: PPUSH
1098: CALL_OW 336
// end ;
1102: LD_VAR 0 1
1106: RET
// export function PrepareAmericansRandom ; var i ; begin
1107: LD_INT 0
1109: PPUSH
1110: PPUSH
// uc_side = 1 ;
1111: LD_ADDR_OWVAR 20
1115: PUSH
1116: LD_INT 1
1118: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1119: LD_ADDR_EXP 16
1123: PUSH
1124: LD_STRING 13c_others
1126: PPUSH
1127: CALL_OW 31
1131: ST_TO_ADDR
// for i in others13 do
1132: LD_ADDR_VAR 0 2
1136: PUSH
1137: LD_EXP 16
1141: PUSH
1142: FOR_IN
1143: IFFALSE 1196
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1145: LD_VAR 0 2
1149: PPUSH
1150: LD_INT 22
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PUSH
1160: LD_INT 21
1162: PUSH
1163: LD_INT 2
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: LD_INT 58
1172: PUSH
1173: EMPTY
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: PPUSH
1181: CALL_OW 69
1185: PUSH
1186: LD_INT 1
1188: ARRAY
1189: PPUSH
1190: CALL_OW 52
1194: GO 1142
1196: POP
1197: POP
// end ;
1198: LD_VAR 0 1
1202: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1203: LD_INT 0
1205: PPUSH
1206: PPUSH
1207: PPUSH
1208: PPUSH
1209: PPUSH
1210: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1211: LD_ADDR_VAR 0 5
1215: PUSH
1216: LD_STRING 13_VehiclesIn13_1
1218: PPUSH
1219: LD_INT 1
1221: PUSH
1222: LD_INT 5
1224: PUSH
1225: LD_INT 3
1227: PUSH
1228: LD_INT 1
1230: PUSH
1231: LD_INT 6
1233: PUSH
1234: LD_INT 100
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: PUSH
1245: LD_INT 1
1247: PUSH
1248: LD_INT 5
1250: PUSH
1251: LD_INT 3
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: LD_INT 6
1259: PUSH
1260: LD_INT 100
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 5
1276: PUSH
1277: LD_INT 3
1279: PUSH
1280: LD_INT 1
1282: PUSH
1283: LD_INT 6
1285: PUSH
1286: LD_INT 100
1288: PUSH
1289: EMPTY
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: PUSH
1297: LD_INT 1
1299: PUSH
1300: LD_INT 5
1302: PUSH
1303: LD_INT 3
1305: PUSH
1306: LD_INT 1
1308: PUSH
1309: LD_INT 6
1311: PUSH
1312: LD_INT 100
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: PUSH
1323: LD_INT 1
1325: PUSH
1326: LD_INT 5
1328: PUSH
1329: LD_INT 3
1331: PUSH
1332: LD_INT 1
1334: PUSH
1335: LD_INT 6
1337: PUSH
1338: LD_INT 100
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: LD_INT 5
1354: PUSH
1355: LD_INT 3
1357: PUSH
1358: LD_INT 1
1360: PUSH
1361: LD_INT 6
1363: PUSH
1364: LD_INT 100
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: PUSH
1375: LD_INT 1
1377: PUSH
1378: LD_INT 5
1380: PUSH
1381: LD_INT 3
1383: PUSH
1384: LD_INT 1
1386: PUSH
1387: LD_INT 6
1389: PUSH
1390: LD_INT 100
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: PUSH
1401: LD_INT 1
1403: PUSH
1404: LD_INT 5
1406: PUSH
1407: LD_INT 3
1409: PUSH
1410: LD_INT 1
1412: PUSH
1413: LD_INT 6
1415: PUSH
1416: LD_INT 100
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: PPUSH
1437: CALL_OW 30
1441: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1442: LD_ADDR_EXP 24
1446: PUSH
1447: LD_STRING 13_ResourcesInCargo13_1
1449: PPUSH
1450: EMPTY
1451: PPUSH
1452: CALL_OW 30
1456: ST_TO_ADDR
// cargoList = [ ] ;
1457: LD_ADDR_VAR 0 6
1461: PUSH
1462: EMPTY
1463: ST_TO_ADDR
// uc_side = 1 ;
1464: LD_ADDR_OWVAR 20
1468: PUSH
1469: LD_INT 1
1471: ST_TO_ADDR
// if vehicles then
1472: LD_VAR 0 5
1476: IFFALSE 1823
// begin for i := 1 to vehicles do
1478: LD_ADDR_VAR 0 2
1482: PUSH
1483: DOUBLE
1484: LD_INT 1
1486: DEC
1487: ST_TO_ADDR
1488: LD_VAR 0 5
1492: PUSH
1493: FOR_TO
1494: IFFALSE 1643
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1496: LD_ADDR_OWVAR 21
1500: PUSH
1501: LD_VAR 0 5
1505: PUSH
1506: LD_VAR 0 2
1510: ARRAY
1511: PUSH
1512: LD_INT 1
1514: ARRAY
1515: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1516: LD_ADDR_OWVAR 37
1520: PUSH
1521: LD_VAR 0 5
1525: PUSH
1526: LD_VAR 0 2
1530: ARRAY
1531: PUSH
1532: LD_INT 2
1534: ARRAY
1535: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1536: LD_ADDR_OWVAR 39
1540: PUSH
1541: LD_VAR 0 5
1545: PUSH
1546: LD_VAR 0 2
1550: ARRAY
1551: PUSH
1552: LD_INT 3
1554: ARRAY
1555: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1556: LD_ADDR_OWVAR 38
1560: PUSH
1561: LD_VAR 0 5
1565: PUSH
1566: LD_VAR 0 2
1570: ARRAY
1571: PUSH
1572: LD_INT 4
1574: ARRAY
1575: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1576: LD_ADDR_OWVAR 40
1580: PUSH
1581: LD_VAR 0 5
1585: PUSH
1586: LD_VAR 0 2
1590: ARRAY
1591: PUSH
1592: LD_INT 5
1594: ARRAY
1595: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1596: LD_ADDR_OWVAR 41
1600: PUSH
1601: LD_INT 40
1603: ST_TO_ADDR
// veh = CreateVehicle ;
1604: LD_ADDR_VAR 0 4
1608: PUSH
1609: CALL_OW 45
1613: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1614: LD_VAR 0 4
1618: PPUSH
1619: LD_INT 1
1621: PPUSH
1622: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_INT 2
1633: PPUSH
1634: LD_INT 0
1636: PPUSH
1637: CALL_OW 49
// end ;
1641: GO 1493
1643: POP
1644: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1645: LD_ADDR_VAR 0 6
1649: PUSH
1650: LD_INT 22
1652: PUSH
1653: LD_INT 1
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 21
1662: PUSH
1663: LD_INT 2
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 34
1672: PUSH
1673: LD_INT 12
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: PPUSH
1685: CALL_OW 69
1689: ST_TO_ADDR
// if cargoList then
1690: LD_VAR 0 6
1694: IFFALSE 1823
// for i = 1 to cargoList do
1696: LD_ADDR_VAR 0 2
1700: PUSH
1701: DOUBLE
1702: LD_INT 1
1704: DEC
1705: ST_TO_ADDR
1706: LD_VAR 0 6
1710: PUSH
1711: FOR_TO
1712: IFFALSE 1821
// begin if resources then
1714: LD_EXP 24
1718: IFFALSE 1819
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1720: LD_VAR 0 6
1724: PUSH
1725: LD_VAR 0 2
1729: ARRAY
1730: PPUSH
1731: LD_INT 1
1733: PPUSH
1734: LD_EXP 24
1738: PUSH
1739: LD_VAR 0 2
1743: ARRAY
1744: PUSH
1745: LD_INT 1
1747: ARRAY
1748: PPUSH
1749: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1753: LD_VAR 0 6
1757: PUSH
1758: LD_VAR 0 2
1762: ARRAY
1763: PPUSH
1764: LD_INT 2
1766: PPUSH
1767: LD_EXP 24
1771: PUSH
1772: LD_VAR 0 2
1776: ARRAY
1777: PUSH
1778: LD_INT 2
1780: ARRAY
1781: PPUSH
1782: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1786: LD_VAR 0 6
1790: PUSH
1791: LD_VAR 0 2
1795: ARRAY
1796: PPUSH
1797: LD_INT 3
1799: PPUSH
1800: LD_EXP 24
1804: PUSH
1805: LD_VAR 0 2
1809: ARRAY
1810: PUSH
1811: LD_INT 3
1813: ARRAY
1814: PPUSH
1815: CALL_OW 291
// end ; end ;
1819: GO 1711
1821: POP
1822: POP
// end ; end ;
1823: LD_VAR 0 1
1827: RET
// export function PowellSupport ; var i , veh , un ; begin
1828: LD_INT 0
1830: PPUSH
1831: PPUSH
1832: PPUSH
1833: PPUSH
// for i := 1 to [ 4 , 3 , 2 , 2 ] [ Difficulty ] do
1834: LD_ADDR_VAR 0 2
1838: PUSH
1839: DOUBLE
1840: LD_INT 1
1842: DEC
1843: ST_TO_ADDR
1844: LD_INT 4
1846: PUSH
1847: LD_INT 3
1849: PUSH
1850: LD_INT 2
1852: PUSH
1853: LD_INT 2
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: LD_OWVAR 67
1866: ARRAY
1867: PUSH
1868: FOR_TO
1869: IFFALSE 2133
// begin uc_nation := 1 ;
1871: LD_ADDR_OWVAR 21
1875: PUSH
1876: LD_INT 1
1878: ST_TO_ADDR
// uc_side := 1 ;
1879: LD_ADDR_OWVAR 20
1883: PUSH
1884: LD_INT 1
1886: ST_TO_ADDR
// vc_engine := engine_siberite ;
1887: LD_ADDR_OWVAR 39
1891: PUSH
1892: LD_INT 3
1894: ST_TO_ADDR
// vc_control := control_manual ;
1895: LD_ADDR_OWVAR 38
1899: PUSH
1900: LD_INT 1
1902: ST_TO_ADDR
// vc_weapon := [ us_laser , us_heavy_gun , us_laser , us_double_gun , us_double_gun ] [ Difficulty + rand ( 0 , 1 ) ] ;
1903: LD_ADDR_OWVAR 40
1907: PUSH
1908: LD_INT 9
1910: PUSH
1911: LD_INT 6
1913: PUSH
1914: LD_INT 9
1916: PUSH
1917: LD_INT 5
1919: PUSH
1920: LD_INT 5
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: PUSH
1930: LD_OWVAR 67
1934: PUSH
1935: LD_INT 0
1937: PPUSH
1938: LD_INT 1
1940: PPUSH
1941: CALL_OW 12
1945: PLUS
1946: ARRAY
1947: ST_TO_ADDR
// if vc_weapon = us_heavy_gun then
1948: LD_OWVAR 40
1952: PUSH
1953: LD_INT 6
1955: EQUAL
1956: IFFALSE 1985
// vc_chassis := [ us_morphling , us_heavy_tracked , us_heavy_tracked ] [ Difficulty ] else
1958: LD_ADDR_OWVAR 37
1962: PUSH
1963: LD_INT 5
1965: PUSH
1966: LD_INT 4
1968: PUSH
1969: LD_INT 4
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: PUSH
1977: LD_OWVAR 67
1981: ARRAY
1982: ST_TO_ADDR
1983: GO 2020
// vc_chassis := [ us_morphling , us_heavy_tracked , us_medium_tracked , us_medium_tracked ] [ rand ( 1 , 4 ) ] ;
1985: LD_ADDR_OWVAR 37
1989: PUSH
1990: LD_INT 5
1992: PUSH
1993: LD_INT 4
1995: PUSH
1996: LD_INT 3
1998: PUSH
1999: LD_INT 3
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 1
2010: PPUSH
2011: LD_INT 4
2013: PPUSH
2014: CALL_OW 12
2018: ARRAY
2019: ST_TO_ADDR
// veh = CreateVehicle ;
2020: LD_ADDR_VAR 0 3
2024: PUSH
2025: CALL_OW 45
2029: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2030: LD_VAR 0 3
2034: PPUSH
2035: LD_INT 2
2037: PPUSH
2038: LD_INT 0
2040: PPUSH
2041: CALL_OW 49
// SetDir ( veh , 1 ) ;
2045: LD_VAR 0 3
2049: PPUSH
2050: LD_INT 1
2052: PPUSH
2053: CALL_OW 233
// hc_gallery :=  ;
2057: LD_ADDR_OWVAR 33
2061: PUSH
2062: LD_STRING 
2064: ST_TO_ADDR
// hc_name :=  ;
2065: LD_ADDR_OWVAR 26
2069: PUSH
2070: LD_STRING 
2072: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2073: LD_INT 0
2075: PPUSH
2076: LD_INT 3
2078: PPUSH
2079: LD_INT 9
2081: PUSH
2082: LD_INT 8
2084: PUSH
2085: LD_INT 8
2087: PUSH
2088: LD_INT 7
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_OWVAR 67
2101: ARRAY
2102: PPUSH
2103: CALL_OW 380
// un := CreateHuman ;
2107: LD_ADDR_VAR 0 4
2111: PUSH
2112: CALL_OW 44
2116: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2117: LD_VAR 0 4
2121: PPUSH
2122: LD_VAR 0 3
2126: PPUSH
2127: CALL_OW 52
// end ;
2131: GO 1868
2133: POP
2134: POP
// for i := 1 to [ 2 , 2 , 2 , 1 ] [ Difficulty ] do
2135: LD_ADDR_VAR 0 2
2139: PUSH
2140: DOUBLE
2141: LD_INT 1
2143: DEC
2144: ST_TO_ADDR
2145: LD_INT 2
2147: PUSH
2148: LD_INT 2
2150: PUSH
2151: LD_INT 2
2153: PUSH
2154: LD_INT 1
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_OWVAR 67
2167: ARRAY
2168: PUSH
2169: FOR_TO
2170: IFFALSE 2245
// begin PrepareHuman ( false , class_soldier , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2172: LD_INT 0
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: LD_INT 9
2180: PUSH
2181: LD_INT 8
2183: PUSH
2184: LD_INT 8
2186: PUSH
2187: LD_INT 7
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PUSH
2196: LD_OWVAR 67
2200: ARRAY
2201: PPUSH
2202: CALL_OW 380
// un := CreateHuman ;
2206: LD_ADDR_VAR 0 4
2210: PUSH
2211: CALL_OW 44
2215: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2216: LD_VAR 0 4
2220: PPUSH
2221: LD_INT 1
2223: PPUSH
2224: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
2228: LD_VAR 0 4
2232: PPUSH
2233: LD_INT 2
2235: PPUSH
2236: LD_INT 0
2238: PPUSH
2239: CALL_OW 49
// end ;
2243: GO 2169
2245: POP
2246: POP
// end ; end_of_file
2247: LD_VAR 0 1
2251: RET
// export function PrepareBurlak ; begin
2252: LD_INT 0
2254: PPUSH
// uc_side := 7 ;
2255: LD_ADDR_OWVAR 20
2259: PUSH
2260: LD_INT 7
2262: ST_TO_ADDR
// uc_nation := 3 ;
2263: LD_ADDR_OWVAR 21
2267: PUSH
2268: LD_INT 3
2270: ST_TO_ADDR
// vc_engine := engine_siberite ;
2271: LD_ADDR_OWVAR 39
2275: PUSH
2276: LD_INT 3
2278: ST_TO_ADDR
// vc_control := control_manual ;
2279: LD_ADDR_OWVAR 38
2283: PUSH
2284: LD_INT 1
2286: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ Difficulty ] ;
2287: LD_ADDR_OWVAR 40
2291: PUSH
2292: LD_INT 44
2294: PUSH
2295: LD_INT 45
2297: PUSH
2298: LD_INT 46
2300: PUSH
2301: LD_INT 46
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: PUSH
2310: LD_OWVAR 67
2314: ARRAY
2315: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
2316: LD_ADDR_OWVAR 37
2320: PUSH
2321: LD_INT 24
2323: ST_TO_ADDR
// Masha := CreateVehicle ;
2324: LD_ADDR_EXP 18
2328: PUSH
2329: CALL_OW 45
2333: ST_TO_ADDR
// SetDir ( Masha , 2 ) ;
2334: LD_EXP 18
2338: PPUSH
2339: LD_INT 2
2341: PPUSH
2342: CALL_OW 233
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2346: LD_EXP 18
2350: PPUSH
2351: LD_INT 3
2353: PPUSH
2354: LD_INT 0
2356: PPUSH
2357: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2361: LD_EXP 18
2365: PPUSH
2366: LD_INT 1
2368: PPUSH
2369: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2373: LD_ADDR_EXP 17
2377: PUSH
2378: LD_STRING Burlak
2380: PPUSH
2381: LD_INT 0
2383: PPUSH
2384: LD_STRING 
2386: PPUSH
2387: CALL 30136 0 3
2391: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2392: LD_EXP 17
2396: PPUSH
2397: LD_EXP 18
2401: PPUSH
2402: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2406: LD_EXP 18
2410: PPUSH
2411: LD_INT 107
2413: PPUSH
2414: LD_INT 118
2416: PPUSH
2417: CALL_OW 114
// spawnBurlak := 1 ;
2421: LD_ADDR_EXP 27
2425: PUSH
2426: LD_INT 1
2428: ST_TO_ADDR
// end ;
2429: LD_VAR 0 1
2433: RET
// export function BurlakArmy ; var i , veh , tmp , bazooka ; begin
2434: LD_INT 0
2436: PPUSH
2437: PPUSH
2438: PPUSH
2439: PPUSH
2440: PPUSH
// uc_side := 7 ;
2441: LD_ADDR_OWVAR 20
2445: PUSH
2446: LD_INT 7
2448: ST_TO_ADDR
// uc_nation := 3 ;
2449: LD_ADDR_OWVAR 21
2453: PUSH
2454: LD_INT 3
2456: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
2457: LD_ADDR_EXP 19
2461: PUSH
2462: LD_STRING Gnyevko
2464: PPUSH
2465: LD_INT 0
2467: PPUSH
2468: LD_STRING 
2470: PPUSH
2471: CALL 30136 0 3
2475: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2476: LD_ADDR_EXP 20
2480: PUSH
2481: LD_STRING Titov
2483: PPUSH
2484: LD_INT 0
2486: PPUSH
2487: LD_STRING 
2489: PPUSH
2490: CALL 30136 0 3
2494: ST_TO_ADDR
// Xavier := PrepareUnit ( Xavier2 , false ,  ) ;
2495: LD_ADDR_EXP 21
2499: PUSH
2500: LD_STRING Xavier2
2502: PPUSH
2503: LD_INT 0
2505: PPUSH
2506: LD_STRING 
2508: PPUSH
2509: CALL 30136 0 3
2513: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
2514: LD_ADDR_EXP 22
2518: PUSH
2519: LD_STRING Belkov
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: LD_STRING 
2527: PPUSH
2528: CALL 30136 0 3
2532: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2533: LD_ADDR_EXP 23
2537: PUSH
2538: LD_STRING Lipshchin
2540: PPUSH
2541: LD_INT 0
2543: PPUSH
2544: LD_STRING 
2546: PPUSH
2547: CALL 30136 0 3
2551: ST_TO_ADDR
// for i = 1 to 5 do
2552: LD_ADDR_VAR 0 2
2556: PUSH
2557: DOUBLE
2558: LD_INT 1
2560: DEC
2561: ST_TO_ADDR
2562: LD_INT 5
2564: PUSH
2565: FOR_TO
2566: IFFALSE 2691
// begin vc_engine := engine_siberite ;
2568: LD_ADDR_OWVAR 39
2572: PUSH
2573: LD_INT 3
2575: ST_TO_ADDR
// vc_control := control_manual ;
2576: LD_ADDR_OWVAR 38
2580: PUSH
2581: LD_INT 1
2583: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun , ru_time_lapser ] [ rand ( 1 , 5 ) ] ;
2584: LD_ADDR_OWVAR 40
2588: PUSH
2589: LD_INT 43
2591: PUSH
2592: LD_INT 45
2594: PUSH
2595: LD_INT 45
2597: PUSH
2598: LD_INT 44
2600: PUSH
2601: LD_INT 49
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: PUSH
2611: LD_INT 1
2613: PPUSH
2614: LD_INT 5
2616: PPUSH
2617: CALL_OW 12
2621: ARRAY
2622: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] ;
2623: LD_ADDR_OWVAR 37
2627: PUSH
2628: LD_INT 22
2630: PUSH
2631: LD_INT 22
2633: PUSH
2634: LD_INT 24
2636: PUSH
2637: LD_INT 24
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: PUSH
2646: LD_OWVAR 67
2650: ARRAY
2651: ST_TO_ADDR
// veh = CreateVehicle ;
2652: LD_ADDR_VAR 0 3
2656: PUSH
2657: CALL_OW 45
2661: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2662: LD_VAR 0 3
2666: PPUSH
2667: LD_INT 2
2669: PPUSH
2670: CALL_OW 233
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2674: LD_VAR 0 3
2678: PPUSH
2679: LD_INT 3
2681: PPUSH
2682: LD_INT 0
2684: PPUSH
2685: CALL_OW 49
// end ;
2689: GO 2565
2691: POP
2692: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2693: LD_ADDR_VAR 0 4
2697: PUSH
2698: LD_INT 22
2700: PUSH
2701: LD_INT 7
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PUSH
2708: LD_INT 21
2710: PUSH
2711: LD_INT 2
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 58
2720: PUSH
2721: EMPTY
2722: LIST
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: LIST
2728: PPUSH
2729: CALL_OW 69
2733: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2734: LD_EXP 19
2738: PPUSH
2739: LD_VAR 0 4
2743: PUSH
2744: LD_INT 1
2746: ARRAY
2747: PPUSH
2748: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2752: LD_EXP 20
2756: PPUSH
2757: LD_VAR 0 4
2761: PUSH
2762: LD_INT 2
2764: ARRAY
2765: PPUSH
2766: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2770: LD_EXP 21
2774: PPUSH
2775: LD_VAR 0 4
2779: PUSH
2780: LD_INT 3
2782: ARRAY
2783: PPUSH
2784: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2788: LD_EXP 22
2792: PPUSH
2793: LD_VAR 0 4
2797: PUSH
2798: LD_INT 4
2800: ARRAY
2801: PPUSH
2802: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2806: LD_EXP 23
2810: PPUSH
2811: LD_VAR 0 4
2815: PUSH
2816: LD_INT 5
2818: ARRAY
2819: PPUSH
2820: CALL_OW 52
// SetClass ( Gnyevko , class_mechanic ) ;
2824: LD_EXP 19
2828: PPUSH
2829: LD_INT 3
2831: PPUSH
2832: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , class_bazooker ) ;
2836: LD_EXP 20
2840: PUSH
2841: LD_EXP 23
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PPUSH
2850: LD_INT 9
2852: PPUSH
2853: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2857: LD_ADDR_VAR 0 4
2861: PUSH
2862: LD_INT 22
2864: PUSH
2865: LD_INT 7
2867: PUSH
2868: EMPTY
2869: LIST
2870: LIST
2871: PPUSH
2872: CALL_OW 69
2876: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2877: LD_VAR 0 4
2881: PPUSH
2882: LD_INT 107
2884: PPUSH
2885: LD_INT 118
2887: PPUSH
2888: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2892: LD_INT 35
2894: PPUSH
2895: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) , Masha ) ;
2899: LD_VAR 0 4
2903: PPUSH
2904: LD_INT 34
2906: PUSH
2907: LD_INT 49
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PPUSH
2914: CALL_OW 72
2918: PPUSH
2919: LD_EXP 18
2923: PPUSH
2924: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , 107 , 118 ) ;
2928: LD_VAR 0 4
2932: PPUSH
2933: LD_INT 3
2935: PUSH
2936: LD_INT 34
2938: PUSH
2939: LD_INT 49
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: PUSH
2946: EMPTY
2947: LIST
2948: LIST
2949: PPUSH
2950: CALL_OW 72
2954: PPUSH
2955: LD_INT 107
2957: PPUSH
2958: LD_INT 118
2960: PPUSH
2961: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
2965: LD_ADDR_VAR 0 5
2969: PUSH
2970: LD_EXP 20
2974: PUSH
2975: LD_EXP 23
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: LD_INT 50
2986: PUSH
2987: EMPTY
2988: LIST
2989: PUSH
2990: LD_INT 3
2992: PUSH
2993: LD_INT 54
2995: PUSH
2996: EMPTY
2997: LIST
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PPUSH
3007: CALL_OW 72
3011: ST_TO_ADDR
// if bazooka then
3012: LD_VAR 0 5
3016: IFFALSE 3058
// begin for i in bazooka do
3018: LD_ADDR_VAR 0 2
3022: PUSH
3023: LD_VAR 0 5
3027: PUSH
3028: FOR_IN
3029: IFFALSE 3056
// if See ( 1 , i ) then
3031: LD_INT 1
3033: PPUSH
3034: LD_VAR 0 2
3038: PPUSH
3039: CALL_OW 292
3043: IFFALSE 3054
// ComSpaceTimeShoot ( i ) ;
3045: LD_VAR 0 2
3049: PPUSH
3050: CALL 31083 0 1
3054: GO 3028
3056: POP
3057: POP
// end ; until UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) = 0 or IsDying ( Masha ) ;
3058: LD_VAR 0 4
3062: PPUSH
3063: LD_INT 34
3065: PUSH
3066: LD_INT 49
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: PPUSH
3073: CALL_OW 72
3077: PUSH
3078: LD_INT 0
3080: EQUAL
3081: PUSH
3082: LD_EXP 18
3086: PPUSH
3087: CALL_OW 303
3091: OR
3092: IFFALSE 2892
// repeat wait ( 0 0$1 ) ;
3094: LD_INT 35
3096: PPUSH
3097: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
3101: LD_ADDR_VAR 0 4
3105: PUSH
3106: LD_INT 22
3108: PUSH
3109: LD_INT 7
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PPUSH
3116: CALL_OW 69
3120: PUSH
3121: LD_EXP 17
3125: DIFF
3126: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
3127: LD_VAR 0 4
3131: PPUSH
3132: LD_INT 107
3134: PPUSH
3135: LD_INT 118
3137: PPUSH
3138: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3142: LD_ADDR_VAR 0 5
3146: PUSH
3147: LD_EXP 20
3151: PUSH
3152: LD_EXP 23
3156: PUSH
3157: EMPTY
3158: LIST
3159: LIST
3160: PPUSH
3161: LD_INT 50
3163: PUSH
3164: EMPTY
3165: LIST
3166: PUSH
3167: LD_INT 3
3169: PUSH
3170: LD_INT 54
3172: PUSH
3173: EMPTY
3174: LIST
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: PPUSH
3184: CALL_OW 72
3188: ST_TO_ADDR
// if bazooka then
3189: LD_VAR 0 5
3193: IFFALSE 3235
// begin for i in bazooka do
3195: LD_ADDR_VAR 0 2
3199: PUSH
3200: LD_VAR 0 5
3204: PUSH
3205: FOR_IN
3206: IFFALSE 3233
// if See ( 1 , i ) then
3208: LD_INT 1
3210: PPUSH
3211: LD_VAR 0 2
3215: PPUSH
3216: CALL_OW 292
3220: IFFALSE 3231
// ComSpaceTimeShoot ( i ) ;
3222: LD_VAR 0 2
3226: PPUSH
3227: CALL 31083 0 1
3231: GO 3205
3233: POP
3234: POP
// end ; if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
3235: LD_EXP 17
3239: PPUSH
3240: CALL_OW 302
3244: PUSH
3245: LD_EXP 17
3249: PPUSH
3250: CALL_OW 310
3254: NOT
3255: AND
3256: IFFALSE 3273
// ComMoveXY ( Burlak , 107 , 118 ) ;
3258: LD_EXP 17
3262: PPUSH
3263: LD_INT 107
3265: PPUSH
3266: LD_INT 118
3268: PPUSH
3269: CALL_OW 111
// until not tmp ;
3273: LD_VAR 0 4
3277: NOT
3278: IFFALSE 3094
// end ;
3280: LD_VAR 0 1
3284: RET
// export function PrepareRussianAttack ; var i , un , veh , area , dir ; begin
3285: LD_INT 0
3287: PPUSH
3288: PPUSH
3289: PPUSH
3290: PPUSH
3291: PPUSH
3292: PPUSH
// result := [ ] ;
3293: LD_ADDR_VAR 0 1
3297: PUSH
3298: EMPTY
3299: ST_TO_ADDR
// dir := rand ( 1 , 2 ) ;
3300: LD_ADDR_VAR 0 6
3304: PUSH
3305: LD_INT 1
3307: PPUSH
3308: LD_INT 2
3310: PPUSH
3311: CALL_OW 12
3315: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
3316: LD_ADDR_VAR 0 5
3320: PUSH
3321: LD_INT 8
3323: PUSH
3324: LD_INT 9
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_VAR 0 6
3335: ARRAY
3336: ST_TO_ADDR
// for i := 1 to [ 6 , 8 , 10 , 11 ] [ Difficulty ] do
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_INT 6
3349: PUSH
3350: LD_INT 8
3352: PUSH
3353: LD_INT 10
3355: PUSH
3356: LD_INT 11
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: LD_OWVAR 67
3369: ARRAY
3370: PUSH
3371: FOR_TO
3372: IFFALSE 3610
// begin uc_side := 3 ;
3374: LD_ADDR_OWVAR 20
3378: PUSH
3379: LD_INT 3
3381: ST_TO_ADDR
// uc_nation := 3 ;
3382: LD_ADDR_OWVAR 21
3386: PUSH
3387: LD_INT 3
3389: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] , [ ru_heavy_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] [ rand ( 1 , 5 ) ] , 100 ) ;
3390: LD_INT 24
3392: PPUSH
3393: LD_INT 3
3395: PPUSH
3396: LD_INT 1
3398: PUSH
3399: LD_INT 3
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: PUSH
3406: LD_INT 1
3408: PPUSH
3409: LD_INT 2
3411: PPUSH
3412: CALL_OW 12
3416: ARRAY
3417: PPUSH
3418: LD_INT 46
3420: PUSH
3421: LD_INT 46
3423: PUSH
3424: LD_INT 45
3426: PUSH
3427: LD_INT 47
3429: PUSH
3430: LD_INT 49
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: LD_INT 1
3442: PPUSH
3443: LD_INT 5
3445: PPUSH
3446: CALL_OW 12
3450: ARRAY
3451: PPUSH
3452: LD_INT 100
3454: PPUSH
3455: CALL 35153 0 5
// veh := CreateVehicle ;
3459: LD_ADDR_VAR 0 4
3463: PUSH
3464: CALL_OW 45
3468: ST_TO_ADDR
// result := Join ( result , veh ) ;
3469: LD_ADDR_VAR 0 1
3473: PUSH
3474: LD_VAR 0 1
3478: PPUSH
3479: LD_VAR 0 4
3483: PPUSH
3484: CALL 66970 0 2
3488: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
3489: LD_VAR 0 4
3493: PPUSH
3494: LD_INT 3
3496: PUSH
3497: LD_INT 5
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PUSH
3504: LD_VAR 0 6
3508: ARRAY
3509: PPUSH
3510: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3514: LD_VAR 0 4
3518: PPUSH
3519: LD_VAR 0 5
3523: PPUSH
3524: LD_INT 0
3526: PPUSH
3527: CALL_OW 49
// if vc_control = control_manual then
3531: LD_OWVAR 38
3535: PUSH
3536: LD_INT 1
3538: EQUAL
3539: IFFALSE 3586
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3541: LD_INT 0
3543: PPUSH
3544: LD_INT 7
3546: PUSH
3547: LD_INT 8
3549: PUSH
3550: LD_INT 9
3552: PUSH
3553: LD_INT 10
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: PUSH
3562: LD_OWVAR 67
3566: ARRAY
3567: PPUSH
3568: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3572: CALL_OW 44
3576: PPUSH
3577: LD_VAR 0 4
3581: PPUSH
3582: CALL_OW 52
// end ; wait ( 0 0$0.5 ) ;
3586: LD_INT 18
3588: PPUSH
3589: CALL_OW 67
// ComAgressiveMove ( veh , 100 , 55 ) ;
3593: LD_VAR 0 4
3597: PPUSH
3598: LD_INT 100
3600: PPUSH
3601: LD_INT 55
3603: PPUSH
3604: CALL_OW 114
// end ;
3608: GO 3371
3610: POP
3611: POP
// for i in result do
3612: LD_ADDR_VAR 0 2
3616: PUSH
3617: LD_VAR 0 1
3621: PUSH
3622: FOR_IN
3623: IFFALSE 3639
// SetTag ( i , 10 ) ;
3625: LD_VAR 0 2
3629: PPUSH
3630: LD_INT 10
3632: PPUSH
3633: CALL_OW 109
3637: GO 3622
3639: POP
3640: POP
// RaiseSailEvent ( eventRussianAttack ) ;
3641: LD_EXP 44
3645: PPUSH
3646: CALL_OW 427
// end ; end_of_file
3650: LD_VAR 0 1
3654: RET
// export function DestroySibDeposit ; var un , rnd ; begin
3655: LD_INT 0
3657: PPUSH
3658: PPUSH
3659: PPUSH
// rnd := 0 ;
3660: LD_ADDR_VAR 0 3
3664: PUSH
3665: LD_INT 0
3667: ST_TO_ADDR
// uc_side := 8 ;
3668: LD_ADDR_OWVAR 20
3672: PUSH
3673: LD_INT 8
3675: ST_TO_ADDR
// uc_nation := 2 ;
3676: LD_ADDR_OWVAR 21
3680: PUSH
3681: LD_INT 2
3683: ST_TO_ADDR
// hc_name :=  ;
3684: LD_ADDR_OWVAR 26
3688: PUSH
3689: LD_STRING 
3691: ST_TO_ADDR
// hc_gallery :=  ;
3692: LD_ADDR_OWVAR 33
3696: PUSH
3697: LD_STRING 
3699: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 , 12 ] [ Difficulty ] , [ 10 , 11 , 12 , 12 ] [ Difficulty ] ] ;
3700: LD_ADDR_OWVAR 29
3704: PUSH
3705: LD_INT 10
3707: PUSH
3708: LD_INT 11
3710: PUSH
3711: LD_INT 12
3713: PUSH
3714: LD_INT 12
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: PUSH
3723: LD_OWVAR 67
3727: ARRAY
3728: PUSH
3729: LD_INT 10
3731: PUSH
3732: LD_INT 11
3734: PUSH
3735: LD_INT 12
3737: PUSH
3738: LD_INT 12
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: PUSH
3747: LD_OWVAR 67
3751: ARRAY
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: ST_TO_ADDR
// PrepareHuman ( false , 4 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3757: LD_INT 0
3759: PPUSH
3760: LD_INT 4
3762: PPUSH
3763: LD_INT 7
3765: PUSH
3766: LD_INT 8
3768: PUSH
3769: LD_INT 9
3771: PUSH
3772: LD_INT 10
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: PUSH
3781: LD_OWVAR 67
3785: ARRAY
3786: PPUSH
3787: CALL_OW 380
// un := CreateHuman ;
3791: LD_ADDR_VAR 0 2
3795: PUSH
3796: CALL_OW 44
3800: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3801: LD_VAR 0 2
3805: PPUSH
3806: LD_INT 8
3808: PUSH
3809: LD_INT 9
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: PUSH
3816: LD_INT 1
3818: PPUSH
3819: LD_INT 2
3821: PPUSH
3822: CALL_OW 12
3826: ARRAY
3827: PPUSH
3828: LD_INT 0
3830: PPUSH
3831: CALL_OW 49
// SetTag ( un , 1 ) ;
3835: LD_VAR 0 2
3839: PPUSH
3840: LD_INT 1
3842: PPUSH
3843: CALL_OW 109
// rnd := rand ( 1 , sibDeposits ) ;
3847: LD_ADDR_VAR 0 3
3851: PUSH
3852: LD_INT 1
3854: PPUSH
3855: LD_EXP 31
3859: PPUSH
3860: CALL_OW 12
3864: ST_TO_ADDR
// RaiseSailEventCustom ( eventContaminate , un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] , 0 , 0 , 0 ) ;
3865: LD_EXP 45
3869: PPUSH
3870: LD_VAR 0 2
3874: PPUSH
3875: LD_EXP 31
3879: PUSH
3880: LD_VAR 0 3
3884: ARRAY
3885: PUSH
3886: LD_INT 1
3888: ARRAY
3889: PPUSH
3890: LD_EXP 31
3894: PUSH
3895: LD_VAR 0 3
3899: ARRAY
3900: PUSH
3901: LD_INT 2
3903: ARRAY
3904: PPUSH
3905: LD_INT 0
3907: PPUSH
3908: LD_INT 0
3910: PPUSH
3911: LD_INT 0
3913: PPUSH
3914: CALL_OW 595
// end ;
3918: LD_VAR 0 1
3922: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do var i ;
3923: LD_INT 22
3925: PUSH
3926: LD_INT 8
3928: PUSH
3929: EMPTY
3930: LIST
3931: LIST
3932: PUSH
3933: LD_INT 3
3935: PUSH
3936: LD_INT 61
3938: PUSH
3939: EMPTY
3940: LIST
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: PUSH
3946: LD_INT 50
3948: PUSH
3949: EMPTY
3950: LIST
3951: PUSH
3952: LD_INT 33
3954: PUSH
3955: LD_INT 2
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: PPUSH
3968: CALL_OW 69
3972: IFFALSE 4059
3974: GO 3976
3976: DISABLE
3977: LD_INT 0
3979: PPUSH
// begin enable ;
3980: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do
3981: LD_ADDR_VAR 0 1
3985: PUSH
3986: LD_INT 22
3988: PUSH
3989: LD_INT 8
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: LD_INT 61
4001: PUSH
4002: EMPTY
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PUSH
4009: LD_INT 50
4011: PUSH
4012: EMPTY
4013: LIST
4014: PUSH
4015: LD_INT 33
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: PPUSH
4031: CALL_OW 69
4035: PUSH
4036: FOR_IN
4037: IFFALSE 4057
// begin wait ( 0 0$0.3 ) ;
4039: LD_INT 10
4041: PPUSH
4042: CALL_OW 67
// Connect ( i ) ;
4046: LD_VAR 0 1
4050: PPUSH
4051: CALL 38246 0 1
// end ;
4055: GO 4036
4057: POP
4058: POP
// end ;
4059: PPOPN 1
4061: END
// export function PrepareArabianAttack ; var i , veh , xy , un , area , counter , tmp , dir ; begin
4062: LD_INT 0
4064: PPUSH
4065: PPUSH
4066: PPUSH
4067: PPUSH
4068: PPUSH
4069: PPUSH
4070: PPUSH
4071: PPUSH
4072: PPUSH
// result := [ ] ;
4073: LD_ADDR_VAR 0 1
4077: PUSH
4078: EMPTY
4079: ST_TO_ADDR
// arabianAttacksCounter := arabianAttacksCounter + 1 ;
4080: LD_ADDR_EXP 33
4084: PUSH
4085: LD_EXP 33
4089: PUSH
4090: LD_INT 1
4092: PLUS
4093: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
4094: LD_INT 22
4096: PUSH
4097: LD_INT 8
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PUSH
4104: LD_INT 3
4106: PUSH
4107: LD_INT 58
4109: PUSH
4110: EMPTY
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PUSH
4117: LD_INT 34
4119: PUSH
4120: LD_INT 31
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: LIST
4131: PPUSH
4132: CALL_OW 69
4136: PUSH
4137: LD_INT 2
4139: LESS
4140: IFFALSE 4384
// begin uc_side := 8 ;
4142: LD_ADDR_OWVAR 20
4146: PUSH
4147: LD_INT 8
4149: ST_TO_ADDR
// uc_nation := 2 ;
4150: LD_ADDR_OWVAR 21
4154: PUSH
4155: LD_INT 2
4157: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
4158: LD_INT 14
4160: PPUSH
4161: LD_INT 3
4163: PPUSH
4164: LD_INT 1
4166: PPUSH
4167: LD_INT 31
4169: PPUSH
4170: LD_INT 100
4172: PPUSH
4173: CALL 35153 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
4177: LD_ADDR_VAR 0 2
4181: PUSH
4182: DOUBLE
4183: LD_INT 22
4185: PUSH
4186: LD_INT 8
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 3
4195: PUSH
4196: LD_INT 58
4198: PUSH
4199: EMPTY
4200: LIST
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: LD_INT 34
4208: PUSH
4209: LD_INT 31
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: LIST
4220: PPUSH
4221: CALL_OW 69
4225: PUSH
4226: LD_INT 1
4228: PLUS
4229: DEC
4230: ST_TO_ADDR
4231: LD_INT 2
4233: PUSH
4234: FOR_TO
4235: IFFALSE 4382
// begin veh := CreateVehicle ;
4237: LD_ADDR_VAR 0 3
4241: PUSH
4242: CALL_OW 45
4246: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
4247: LD_VAR 0 3
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
4259: LD_ADDR_VAR 0 4
4263: PUSH
4264: LD_INT 181
4266: PUSH
4267: LD_INT 105
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PUSH
4274: LD_INT 137
4276: PUSH
4277: LD_INT 6
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: PUSH
4288: LD_VAR 0 2
4292: PUSH
4293: LD_INT 2
4295: MOD
4296: PUSH
4297: LD_INT 1
4299: PLUS
4300: ARRAY
4301: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
4302: LD_VAR 0 3
4306: PPUSH
4307: LD_VAR 0 4
4311: PUSH
4312: LD_INT 1
4314: ARRAY
4315: PPUSH
4316: LD_VAR 0 4
4320: PUSH
4321: LD_INT 2
4323: ARRAY
4324: PPUSH
4325: LD_INT 12
4327: PPUSH
4328: LD_INT 0
4330: PPUSH
4331: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4335: LD_INT 0
4337: PPUSH
4338: LD_INT 7
4340: PUSH
4341: LD_INT 9
4343: PUSH
4344: LD_INT 10
4346: PUSH
4347: LD_INT 10
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: PUSH
4356: LD_OWVAR 67
4360: ARRAY
4361: PPUSH
4362: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4366: CALL_OW 44
4370: PPUSH
4371: LD_VAR 0 3
4375: PPUSH
4376: CALL_OW 52
// end ;
4380: GO 4234
4382: POP
4383: POP
// end ; dir := rand ( 1 , 2 ) ;
4384: LD_ADDR_VAR 0 9
4388: PUSH
4389: LD_INT 1
4391: PPUSH
4392: LD_INT 2
4394: PPUSH
4395: CALL_OW 12
4399: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
4400: LD_ADDR_VAR 0 6
4404: PUSH
4405: LD_INT 8
4407: PUSH
4408: LD_INT 9
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_VAR 0 9
4419: ARRAY
4420: ST_TO_ADDR
// counter := [ 6 , 8 , 10 , 11 ] [ Difficulty ] + arabianAttacksCounter ;
4421: LD_ADDR_VAR 0 7
4425: PUSH
4426: LD_INT 6
4428: PUSH
4429: LD_INT 8
4431: PUSH
4432: LD_INT 10
4434: PUSH
4435: LD_INT 11
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: PUSH
4444: LD_OWVAR 67
4448: ARRAY
4449: PUSH
4450: LD_EXP 33
4454: PLUS
4455: ST_TO_ADDR
// if counter > 20 then
4456: LD_VAR 0 7
4460: PUSH
4461: LD_INT 20
4463: GREATER
4464: IFFALSE 4474
// counter := 20 ;
4466: LD_ADDR_VAR 0 7
4470: PUSH
4471: LD_INT 20
4473: ST_TO_ADDR
// for i := 1 to counter do
4474: LD_ADDR_VAR 0 2
4478: PUSH
4479: DOUBLE
4480: LD_INT 1
4482: DEC
4483: ST_TO_ADDR
4484: LD_VAR 0 7
4488: PUSH
4489: FOR_TO
4490: IFFALSE 4825
// begin uc_side := 8 ;
4492: LD_ADDR_OWVAR 20
4496: PUSH
4497: LD_INT 8
4499: ST_TO_ADDR
// uc_nation := 2 ;
4500: LD_ADDR_OWVAR 21
4504: PUSH
4505: LD_INT 2
4507: ST_TO_ADDR
// PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] , [ ar_gun , ar_rocket_launcher , ar_gun , ar_mortar , ar_selfpropelled_bomb , ar_gatling_gun ] [ rand ( 1 , 6 ) ] , 100 ) ;
4508: LD_INT 13
4510: PUSH
4511: LD_INT 14
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 1
4520: PPUSH
4521: LD_INT 2
4523: PPUSH
4524: CALL_OW 12
4528: ARRAY
4529: PPUSH
4530: LD_INT 3
4532: PPUSH
4533: LD_INT 1
4535: PUSH
4536: LD_INT 2
4538: PUSH
4539: LD_INT 5
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: PUSH
4547: LD_INT 1
4549: PPUSH
4550: LD_INT 3
4552: PPUSH
4553: CALL_OW 12
4557: ARRAY
4558: PPUSH
4559: LD_INT 27
4561: PUSH
4562: LD_INT 28
4564: PUSH
4565: LD_INT 27
4567: PUSH
4568: LD_EXP 51
4572: PUSH
4573: LD_INT 29
4575: PUSH
4576: LD_INT 25
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: PUSH
4587: LD_INT 1
4589: PPUSH
4590: LD_INT 6
4592: PPUSH
4593: CALL_OW 12
4597: ARRAY
4598: PPUSH
4599: LD_INT 100
4601: PPUSH
4602: CALL 35153 0 5
// if vc_weapon = ar_selfpropelled_bomb then
4606: LD_OWVAR 40
4610: PUSH
4611: LD_INT 29
4613: EQUAL
4614: IFFALSE 4624
// vc_control := control_remote ;
4616: LD_ADDR_OWVAR 38
4620: PUSH
4621: LD_INT 2
4623: ST_TO_ADDR
// veh := CreateVehicle ;
4624: LD_ADDR_VAR 0 3
4628: PUSH
4629: CALL_OW 45
4633: ST_TO_ADDR
// result := Join ( result , veh ) ;
4634: LD_ADDR_VAR 0 1
4638: PUSH
4639: LD_VAR 0 1
4643: PPUSH
4644: LD_VAR 0 3
4648: PPUSH
4649: CALL 66970 0 2
4653: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
4654: LD_VAR 0 3
4658: PPUSH
4659: LD_INT 3
4661: PUSH
4662: LD_INT 5
4664: PUSH
4665: EMPTY
4666: LIST
4667: LIST
4668: PUSH
4669: LD_VAR 0 9
4673: ARRAY
4674: PPUSH
4675: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
4679: LD_VAR 0 3
4683: PPUSH
4684: LD_VAR 0 6
4688: PPUSH
4689: LD_INT 0
4691: PPUSH
4692: CALL_OW 49
// if vc_control = control_manual then
4696: LD_OWVAR 38
4700: PUSH
4701: LD_INT 1
4703: EQUAL
4704: IFFALSE 4751
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4706: LD_INT 0
4708: PPUSH
4709: LD_INT 7
4711: PUSH
4712: LD_INT 8
4714: PUSH
4715: LD_INT 9
4717: PUSH
4718: LD_INT 10
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: PUSH
4727: LD_OWVAR 67
4731: ARRAY
4732: PPUSH
4733: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4737: CALL_OW 44
4741: PPUSH
4742: LD_VAR 0 3
4746: PPUSH
4747: CALL_OW 52
// end ; wait ( 0 0$0.3 ) ;
4751: LD_INT 10
4753: PPUSH
4754: CALL_OW 67
// if GetControl ( veh ) = control_remote and not IsControledBy ( veh ) then
4758: LD_VAR 0 3
4762: PPUSH
4763: CALL_OW 263
4767: PUSH
4768: LD_INT 2
4770: EQUAL
4771: PUSH
4772: LD_VAR 0 3
4776: PPUSH
4777: CALL_OW 312
4781: NOT
4782: AND
4783: IFFALSE 4801
// begin Connect ( veh ) ;
4785: LD_VAR 0 3
4789: PPUSH
4790: CALL 38246 0 1
// wait ( 0 0$0.3 ) ;
4794: LD_INT 10
4796: PPUSH
4797: CALL_OW 67
// end ; ComAgressiveMove ( veh , 100 , 55 ) ;
4801: LD_VAR 0 3
4805: PPUSH
4806: LD_INT 100
4808: PPUSH
4809: LD_INT 55
4811: PPUSH
4812: CALL_OW 114
// wait ( 0 0$0.5 ) ;
4816: LD_INT 18
4818: PPUSH
4819: CALL_OW 67
// end ;
4823: GO 4489
4825: POP
4826: POP
// if arabianAttacksCounter = 1 then
4827: LD_EXP 33
4831: PUSH
4832: LD_INT 1
4834: EQUAL
4835: IFFALSE 4841
// DestroySibDeposit ;
4837: CALL 3655 0 0
// if arabianAttacksCounter mod [ 4 , 3 , 3 , 2 ] [ Difficulty ] = 0 then
4841: LD_EXP 33
4845: PUSH
4846: LD_INT 4
4848: PUSH
4849: LD_INT 3
4851: PUSH
4852: LD_INT 3
4854: PUSH
4855: LD_INT 2
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: PUSH
4864: LD_OWVAR 67
4868: ARRAY
4869: MOD
4870: PUSH
4871: LD_INT 0
4873: EQUAL
4874: IFFALSE 5232
// begin tmp := rand ( 0 , 2 ) ;
4876: LD_ADDR_VAR 0 8
4880: PUSH
4881: LD_INT 0
4883: PPUSH
4884: LD_INT 2
4886: PPUSH
4887: CALL_OW 12
4891: ST_TO_ADDR
// if not tmp then
4892: LD_VAR 0 8
4896: NOT
4897: IFFALSE 5058
// begin for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] do
4899: LD_ADDR_VAR 0 2
4903: PUSH
4904: DOUBLE
4905: LD_INT 1
4907: DEC
4908: ST_TO_ADDR
4909: LD_INT 3
4911: PUSH
4912: LD_INT 4
4914: PUSH
4915: LD_INT 4
4917: PUSH
4918: LD_INT 5
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: PUSH
4927: LD_OWVAR 67
4931: ARRAY
4932: PUSH
4933: FOR_TO
4934: IFFALSE 5054
// begin uc_side := 8 ;
4936: LD_ADDR_OWVAR 20
4940: PUSH
4941: LD_INT 8
4943: ST_TO_ADDR
// uc_nation := 2 ;
4944: LD_ADDR_OWVAR 21
4948: PUSH
4949: LD_INT 2
4951: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4952: LD_INT 0
4954: PPUSH
4955: LD_INT 1
4957: PPUSH
4958: LD_INT 7
4960: PUSH
4961: LD_INT 8
4963: PUSH
4964: LD_INT 9
4966: PUSH
4967: LD_INT 10
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: PUSH
4976: LD_OWVAR 67
4980: ARRAY
4981: PPUSH
4982: CALL_OW 380
// un := CreateHuman ;
4986: LD_ADDR_VAR 0 5
4990: PUSH
4991: CALL_OW 44
4995: ST_TO_ADDR
// result := Join ( result , un ) ;
4996: LD_ADDR_VAR 0 1
5000: PUSH
5001: LD_VAR 0 1
5005: PPUSH
5006: LD_VAR 0 5
5010: PPUSH
5011: CALL 66970 0 2
5015: ST_TO_ADDR
// if Prob ( 60 ) then
5016: LD_INT 60
5018: PPUSH
5019: CALL_OW 13
5023: IFFALSE 5037
// SetClass ( un , class_mortar ) ;
5025: LD_VAR 0 5
5029: PPUSH
5030: LD_INT 8
5032: PPUSH
5033: CALL_OW 336
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5037: LD_VAR 0 5
5041: PPUSH
5042: LD_INT 16
5044: PPUSH
5045: LD_INT 0
5047: PPUSH
5048: CALL_OW 49
// end ;
5052: GO 4933
5054: POP
5055: POP
// end else
5056: GO 5222
// begin for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
5058: LD_ADDR_VAR 0 2
5062: PUSH
5063: DOUBLE
5064: LD_INT 1
5066: DEC
5067: ST_TO_ADDR
5068: LD_INT 2
5070: PUSH
5071: LD_INT 3
5073: PUSH
5074: LD_INT 3
5076: PUSH
5077: LD_INT 4
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: PUSH
5086: LD_OWVAR 67
5090: ARRAY
5091: PUSH
5092: FOR_TO
5093: IFFALSE 5220
// begin uc_side := 8 ;
5095: LD_ADDR_OWVAR 20
5099: PUSH
5100: LD_INT 8
5102: ST_TO_ADDR
// uc_nation := 0 ;
5103: LD_ADDR_OWVAR 21
5107: PUSH
5108: LD_INT 0
5110: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
5111: LD_ADDR_OWVAR 28
5115: PUSH
5116: LD_INT 17
5118: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
5119: LD_ADDR_OWVAR 31
5123: PUSH
5124: LD_INT 3
5126: PUSH
5127: LD_INT 0
5129: PUSH
5130: LD_INT 0
5132: PUSH
5133: LD_INT 0
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5142: LD_ADDR_OWVAR 29
5146: PUSH
5147: LD_INT 10
5149: PUSH
5150: LD_INT 10
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: ST_TO_ADDR
// hc_gallery :=  ;
5157: LD_ADDR_OWVAR 33
5161: PUSH
5162: LD_STRING 
5164: ST_TO_ADDR
// hc_name :=  ;
5165: LD_ADDR_OWVAR 26
5169: PUSH
5170: LD_STRING 
5172: ST_TO_ADDR
// un := CreateHuman ;
5173: LD_ADDR_VAR 0 5
5177: PUSH
5178: CALL_OW 44
5182: ST_TO_ADDR
// result := Join ( result , un ) ;
5183: LD_ADDR_VAR 0 1
5187: PUSH
5188: LD_VAR 0 1
5192: PPUSH
5193: LD_VAR 0 5
5197: PPUSH
5198: CALL 66970 0 2
5202: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5203: LD_VAR 0 5
5207: PPUSH
5208: LD_INT 16
5210: PPUSH
5211: LD_INT 0
5213: PPUSH
5214: CALL_OW 49
// end ;
5218: GO 5092
5220: POP
5221: POP
// end ; if sibDeposits then
5222: LD_EXP 31
5226: IFFALSE 5232
// DestroySibDeposit ;
5228: CALL 3655 0 0
// end ; for i in result do
5232: LD_ADDR_VAR 0 2
5236: PUSH
5237: LD_VAR 0 1
5241: PUSH
5242: FOR_IN
5243: IFFALSE 5259
// SetTag ( i , 10 ) ;
5245: LD_VAR 0 2
5249: PPUSH
5250: LD_INT 10
5252: PPUSH
5253: CALL_OW 109
5257: GO 5242
5259: POP
5260: POP
// RaiseSailEvent ( eventArabianAttack ) ;
5261: LD_EXP 43
5265: PPUSH
5266: CALL_OW 427
// end ; end_of_file
5270: LD_VAR 0 1
5274: RET
// export function Action ; var tmp ; begin
5275: LD_INT 0
5277: PPUSH
5278: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
5279: LD_ADDR_VAR 0 2
5283: PUSH
5284: LD_INT 22
5286: PUSH
5287: LD_INT 1
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PUSH
5294: LD_INT 21
5296: PUSH
5297: LD_INT 2
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PPUSH
5308: CALL_OW 69
5312: ST_TO_ADDR
// InGameOn ;
5313: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
5317: LD_VAR 0 2
5321: PPUSH
5322: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
5326: LD_INT 22
5328: PUSH
5329: LD_INT 1
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PUSH
5336: LD_INT 21
5338: PUSH
5339: LD_INT 2
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: PPUSH
5350: CALL_OW 69
5354: PPUSH
5355: LD_INT 69
5357: PPUSH
5358: LD_INT 94
5360: PPUSH
5361: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
5365: LD_EXP 1
5369: PPUSH
5370: LD_STRING D2-JMM-1
5372: PPUSH
5373: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5377: LD_VAR 0 2
5381: PPUSH
5382: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
5386: LD_EXP 2
5390: PPUSH
5391: LD_STRING D2-Huck-1
5393: PPUSH
5394: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5398: LD_VAR 0 2
5402: PPUSH
5403: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
5407: LD_EXP 1
5411: PPUSH
5412: LD_STRING D2-JMM-2
5414: PPUSH
5415: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5419: LD_VAR 0 2
5423: PPUSH
5424: CALL_OW 87
// InGameOff ;
5428: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5432: LD_STRING M1
5434: PPUSH
5435: CALL_OW 337
// SaveForQuickRestart ;
5439: CALL_OW 22
// wait ( 10 10$00 ) ;
5443: LD_INT 21000
5445: PPUSH
5446: CALL_OW 67
// DialogueOn ;
5450: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
5454: LD_EXP 15
5458: PPUSH
5459: LD_STRING D3-Pow-1
5461: PPUSH
5462: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
5466: LD_EXP 1
5470: PPUSH
5471: LD_STRING D3-JMM-1
5473: PPUSH
5474: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
5478: LD_EXP 15
5482: PPUSH
5483: LD_STRING D3-Pow-2
5485: PPUSH
5486: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
5490: LD_EXP 1
5494: PPUSH
5495: LD_STRING D3-JMM-2
5497: PPUSH
5498: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
5502: LD_EXP 15
5506: PPUSH
5507: LD_STRING D3-Pow-3
5509: PPUSH
5510: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
5514: LD_EXP 1
5518: PPUSH
5519: LD_STRING D3-JMM-3
5521: PPUSH
5522: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
5526: LD_EXP 15
5530: PPUSH
5531: LD_STRING D3-Pow-4
5533: PPUSH
5534: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
5538: LD_EXP 1
5542: PPUSH
5543: LD_STRING D3-JMM-4
5545: PPUSH
5546: CALL_OW 88
// DialogueOff ;
5550: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5554: LD_STRING M2
5556: PPUSH
5557: CALL_OW 337
// wait ( 2 2$30 ) ;
5561: LD_INT 5250
5563: PPUSH
5564: CALL_OW 67
// PrepareBurlak ;
5568: CALL 2252 0 0
// BurlakArmy ;
5572: CALL 2434 0 0
// end ;
5576: LD_VAR 0 1
5580: RET
// every 0 0$1 trigger See ( 1 , Masha ) do
5581: LD_INT 1
5583: PPUSH
5584: LD_EXP 18
5588: PPUSH
5589: CALL_OW 292
5593: IFFALSE 5752
5595: GO 5597
5597: DISABLE
// begin DialogueOn ;
5598: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
5602: LD_EXP 18
5606: PPUSH
5607: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
5611: LD_INT 22
5613: PUSH
5614: LD_INT 1
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: LD_INT 26
5623: PUSH
5624: LD_INT 1
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: PUSH
5631: LD_INT 2
5633: PUSH
5634: LD_INT 25
5636: PUSH
5637: LD_INT 1
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: LD_INT 25
5646: PUSH
5647: LD_INT 2
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PUSH
5654: LD_INT 25
5656: PUSH
5657: LD_INT 3
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: PUSH
5664: LD_INT 25
5666: PUSH
5667: LD_INT 4
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PUSH
5674: LD_INT 25
5676: PUSH
5677: LD_INT 5
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: PUSH
5684: EMPTY
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: LIST
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: PPUSH
5697: CALL_OW 69
5701: PPUSH
5702: LD_STRING D5-Sol1-1
5704: PPUSH
5705: LD_STRING D5-FSol1-1
5707: PPUSH
5708: CALL 8210 0 3
// Say ( JMM , D5-JMM-1 ) ;
5712: LD_EXP 1
5716: PPUSH
5717: LD_STRING D5-JMM-1
5719: PPUSH
5720: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
5724: LD_EXP 17
5728: PPUSH
5729: LD_STRING DAmer-Bur-1
5731: PPUSH
5732: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
5736: LD_EXP 1
5740: PPUSH
5741: LD_STRING DAmer-JMM-1
5743: PPUSH
5744: CALL_OW 88
// DialogueOff ;
5748: CALL_OW 7
// end ;
5752: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
5753: LD_INT 4
5755: PPUSH
5756: LD_INT 22
5758: PUSH
5759: LD_INT 7
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: PPUSH
5766: CALL_OW 70
5770: IFFALSE 6169
5772: GO 5774
5774: DISABLE
5775: LD_INT 0
5777: PPUSH
// begin enable ;
5778: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
5779: LD_ADDR_VAR 0 1
5783: PUSH
5784: LD_INT 4
5786: PPUSH
5787: LD_INT 22
5789: PUSH
5790: LD_INT 7
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: PPUSH
5797: CALL_OW 70
5801: PUSH
5802: FOR_IN
5803: IFFALSE 6167
// begin if i = Burlak or i = Masha then
5805: LD_VAR 0 1
5809: PUSH
5810: LD_EXP 17
5814: EQUAL
5815: PUSH
5816: LD_VAR 0 1
5820: PUSH
5821: LD_EXP 18
5825: EQUAL
5826: OR
5827: IFFALSE 5974
// begin RemoveUnit ( i ) ;
5829: LD_VAR 0 1
5833: PPUSH
5834: CALL_OW 64
// DialogueOn ;
5838: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
5842: LD_EXP 1
5846: PPUSH
5847: LD_STRING D5a-JMM-1
5849: PPUSH
5850: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
5854: LD_INT 22
5856: PUSH
5857: LD_INT 1
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: LD_INT 26
5866: PUSH
5867: LD_INT 1
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PUSH
5874: LD_INT 2
5876: PUSH
5877: LD_INT 25
5879: PUSH
5880: LD_INT 1
5882: PUSH
5883: EMPTY
5884: LIST
5885: LIST
5886: PUSH
5887: LD_INT 25
5889: PUSH
5890: LD_INT 2
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: PUSH
5897: LD_INT 25
5899: PUSH
5900: LD_INT 3
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PUSH
5907: LD_INT 25
5909: PUSH
5910: LD_INT 4
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: PUSH
5917: LD_INT 25
5919: PUSH
5920: LD_INT 5
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: LIST
5939: PPUSH
5940: CALL_OW 69
5944: PPUSH
5945: LD_STRING D5a-Sol1-1
5947: PPUSH
5948: LD_STRING D5-FSol1-1
5950: PPUSH
5951: CALL 8210 0 3
// DialogueOff ;
5955: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
5959: LD_STRING M2b
5961: PPUSH
5962: CALL_OW 337
// spawnBurlak = 0 ;
5966: LD_ADDR_EXP 27
5970: PUSH
5971: LD_INT 0
5973: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
5974: LD_VAR 0 1
5978: PPUSH
5979: CALL_OW 247
5983: PUSH
5984: LD_INT 2
5986: EQUAL
5987: PUSH
5988: LD_VAR 0 1
5992: PPUSH
5993: CALL_OW 263
5997: PUSH
5998: LD_INT 1
6000: EQUAL
6001: AND
6002: IFFALSE 6130
// begin case IsDrivenBy ( i ) of Gnyevko :
6004: LD_VAR 0 1
6008: PPUSH
6009: CALL_OW 311
6013: PUSH
6014: LD_EXP 19
6018: DOUBLE
6019: EQUAL
6020: IFTRUE 6024
6022: GO 6037
6024: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
6025: LD_INT 1
6027: PPUSH
6028: LD_STRING 13_Gnyevko_1
6030: PPUSH
6031: CALL_OW 39
6035: GO 6130
6037: LD_EXP 20
6041: DOUBLE
6042: EQUAL
6043: IFTRUE 6047
6045: GO 6060
6047: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
6048: LD_INT 1
6050: PPUSH
6051: LD_STRING 13_Titov_1
6053: PPUSH
6054: CALL_OW 39
6058: GO 6130
6060: LD_EXP 21
6064: DOUBLE
6065: EQUAL
6066: IFTRUE 6070
6068: GO 6083
6070: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
6071: LD_INT 1
6073: PPUSH
6074: LD_STRING 13_Xavier_1
6076: PPUSH
6077: CALL_OW 39
6081: GO 6130
6083: LD_EXP 22
6087: DOUBLE
6088: EQUAL
6089: IFTRUE 6093
6091: GO 6106
6093: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
6094: LD_INT 1
6096: PPUSH
6097: LD_STRING 13_Belkov_1
6099: PPUSH
6100: CALL_OW 39
6104: GO 6130
6106: LD_EXP 23
6110: DOUBLE
6111: EQUAL
6112: IFTRUE 6116
6114: GO 6129
6116: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
6117: LD_INT 1
6119: PPUSH
6120: LD_STRING 13_Lipshchin_1
6122: PPUSH
6123: CALL_OW 39
6127: GO 6130
6129: POP
// end ; if GetWeapon ( i ) = ru_time_lapser then
6130: LD_VAR 0 1
6134: PPUSH
6135: CALL_OW 264
6139: PUSH
6140: LD_INT 49
6142: EQUAL
6143: IFFALSE 6156
// DestroyUnit ( i ) else
6145: LD_VAR 0 1
6149: PPUSH
6150: CALL_OW 65
6154: GO 6165
// RemoveUnit ( i ) ;
6156: LD_VAR 0 1
6160: PPUSH
6161: CALL_OW 64
// end ;
6165: GO 5802
6167: POP
6168: POP
// end ;
6169: PPOPN 1
6171: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
6172: LD_EXP 17
6176: PPUSH
6177: CALL_OW 302
6181: PUSH
6182: LD_EXP 18
6186: PPUSH
6187: CALL_OW 256
6191: PUSH
6192: LD_INT 500
6194: LESS
6195: AND
6196: PUSH
6197: LD_EXP 18
6201: PPUSH
6202: CALL_OW 255
6206: PUSH
6207: LD_INT 7
6209: EQUAL
6210: AND
6211: IFFALSE 6231
6213: GO 6215
6215: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
6216: LD_EXP 17
6220: PPUSH
6221: LD_INT 107
6223: PPUSH
6224: LD_INT 118
6226: PPUSH
6227: CALL_OW 111
6231: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
6232: LD_EXP 17
6236: PPUSH
6237: CALL_OW 301
6241: PUSH
6242: LD_EXP 27
6246: PUSH
6247: LD_INT 1
6249: EQUAL
6250: AND
6251: IFFALSE 6384
6253: GO 6255
6255: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
6256: LD_EXP 1
6260: PPUSH
6261: LD_STRING D5b-JMM-1
6263: PPUSH
6264: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
6268: LD_INT 22
6270: PUSH
6271: LD_INT 1
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PUSH
6278: LD_INT 26
6280: PUSH
6281: LD_INT 1
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 2
6290: PUSH
6291: LD_INT 25
6293: PUSH
6294: LD_INT 1
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PUSH
6301: LD_INT 25
6303: PUSH
6304: LD_INT 2
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 25
6313: PUSH
6314: LD_INT 3
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: LD_INT 25
6323: PUSH
6324: LD_INT 4
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: LD_INT 25
6333: PUSH
6334: LD_INT 5
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PUSH
6341: EMPTY
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: PPUSH
6354: CALL_OW 69
6358: PPUSH
6359: LD_STRING D5b-Sol1-1
6361: PPUSH
6362: LD_STRING 
6364: PPUSH
6365: CALL 8210 0 3
// ChangeMissionObjectives ( M2a ) ;
6369: LD_STRING M2a
6371: PPUSH
6372: CALL_OW 337
// burlakStatus := 1 ;
6376: LD_ADDR_EXP 28
6380: PUSH
6381: LD_INT 1
6383: ST_TO_ADDR
// end ;
6384: END
// every 0 0$1 trigger IsDead ( Stevens ) do
6385: LD_EXP 2
6389: PPUSH
6390: CALL_OW 301
6394: IFFALSE 6531
6396: GO 6398
6398: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
6399: LD_EXP 1
6403: PPUSH
6404: LD_STRING D6-JMM-1
6406: PPUSH
6407: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
6411: LD_INT 22
6413: PUSH
6414: LD_INT 1
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 26
6423: PUSH
6424: LD_INT 1
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 25
6436: PUSH
6437: LD_INT 1
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: LD_INT 25
6446: PUSH
6447: LD_INT 2
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 25
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 25
6466: PUSH
6467: LD_INT 4
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PUSH
6474: LD_INT 25
6476: PUSH
6477: LD_INT 5
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: LIST
6496: PPUSH
6497: CALL_OW 69
6501: PPUSH
6502: LD_STRING D6-Sol1-1
6504: PPUSH
6505: LD_STRING 
6507: PPUSH
6508: CALL 8210 0 3
// Say ( JMM , D6-JMM-2 ) ;
6512: LD_EXP 1
6516: PPUSH
6517: LD_STRING D6-JMM-2
6519: PPUSH
6520: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
6524: LD_STRING M1a
6526: PPUSH
6527: CALL_OW 337
// end ;
6531: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
6532: LD_INT 25
6534: PPUSH
6535: LD_INT 1
6537: PPUSH
6538: CALL_OW 321
6542: PUSH
6543: LD_INT 2
6545: EQUAL
6546: IFFALSE 6563
6548: GO 6550
6550: DISABLE
// Say ( Stevens , D6-Huck-2 ) ;
6551: LD_EXP 2
6555: PPUSH
6556: LD_STRING D6-Huck-2
6558: PPUSH
6559: CALL_OW 88
6563: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_warehouse ] , [ f_not , [ f_constructed ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] , [ f_not , [ f_constructed ] ] ] ) do
6564: LD_INT 22
6566: PUSH
6567: LD_INT 1
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PUSH
6574: LD_INT 2
6576: PUSH
6577: LD_INT 34
6579: PUSH
6580: LD_INT 8
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 35
6589: PUSH
6590: LD_INT 8
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: LIST
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PPUSH
6606: CALL_OW 69
6610: PUSH
6611: LD_INT 5
6613: PPUSH
6614: LD_INT 22
6616: PUSH
6617: LD_INT 1
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: PUSH
6624: LD_INT 21
6626: PUSH
6627: LD_INT 3
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: LD_INT 30
6636: PUSH
6637: LD_INT 1
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: LD_INT 3
6646: PUSH
6647: LD_INT 57
6649: PUSH
6650: EMPTY
6651: LIST
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: PPUSH
6663: CALL_OW 70
6667: AND
6668: PUSH
6669: LD_INT 5
6671: PPUSH
6672: LD_INT 22
6674: PUSH
6675: LD_INT 1
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: PUSH
6682: LD_INT 21
6684: PUSH
6685: LD_INT 3
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: PUSH
6692: LD_INT 30
6694: PUSH
6695: LD_INT 5
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: LD_INT 3
6704: PUSH
6705: LD_INT 57
6707: PUSH
6708: EMPTY
6709: LIST
6710: PUSH
6711: EMPTY
6712: LIST
6713: LIST
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: PPUSH
6721: CALL_OW 70
6725: AND
6726: IFFALSE 6768
6728: GO 6730
6730: DISABLE
// begin DialogueOn ;
6731: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6735: LD_EXP 1
6739: PPUSH
6740: LD_STRING D7-JMM-1
6742: PPUSH
6743: CALL_OW 88
// DialogueOff ;
6747: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
6751: LD_STRING M4
6753: PPUSH
6754: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
6758: LD_INT 5
6760: PPUSH
6761: LD_INT 0
6763: PPUSH
6764: CALL_OW 424
// end ;
6768: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) and eventVar3 = 1 and radationResearched = 0 do
6769: LD_INT 6
6771: PPUSH
6772: LD_INT 22
6774: PUSH
6775: LD_INT 1
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: PUSH
6782: LD_INT 25
6784: PUSH
6785: LD_INT 4
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PPUSH
6796: CALL_OW 70
6800: PUSH
6801: LD_EXP 37
6805: PUSH
6806: LD_INT 1
6808: EQUAL
6809: AND
6810: PUSH
6811: LD_EXP 29
6815: PUSH
6816: LD_INT 0
6818: EQUAL
6819: AND
6820: IFFALSE 6885
6822: GO 6824
6824: DISABLE
// begin enable ;
6825: ENABLE
// AmSciSib := FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
6826: LD_ADDR_EXP 26
6830: PUSH
6831: LD_INT 6
6833: PPUSH
6834: LD_INT 22
6836: PUSH
6837: LD_INT 1
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: PUSH
6844: LD_INT 25
6846: PUSH
6847: LD_INT 4
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PPUSH
6858: CALL_OW 70
6862: PUSH
6863: LD_INT 1
6865: ARRAY
6866: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
6867: LD_INT 6
6869: PPUSH
6870: LD_INT 0
6872: PPUSH
6873: CALL_OW 424
// radationResearched := 1 ;
6877: LD_ADDR_EXP 29
6881: PUSH
6882: LD_INT 1
6884: ST_TO_ADDR
// end ;
6885: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
6886: LD_EXP 26
6890: PPUSH
6891: CALL_OW 301
6895: PUSH
6896: LD_EXP 29
6900: PUSH
6901: LD_INT 1
6903: EQUAL
6904: AND
6905: IFFALSE 6941
6907: GO 6909
6909: DISABLE
// begin enable ;
6910: ENABLE
// radationResearched = 0 ;
6911: LD_ADDR_EXP 29
6915: PUSH
6916: LD_INT 0
6918: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
6919: LD_INT 6
6921: PPUSH
6922: LD_INT 1
6924: PPUSH
6925: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
6929: LD_EXP 1
6933: PPUSH
6934: LD_STRING D9a-JMM-1
6936: PPUSH
6937: CALL_OW 88
// end ; end_of_file
6941: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = us_siberium_rocket and eventVar1 = 0 then
6942: LD_VAR 0 5
6946: PUSH
6947: LD_INT 8
6949: EQUAL
6950: PUSH
6951: LD_EXP 35
6955: PUSH
6956: LD_INT 0
6958: EQUAL
6959: AND
6960: IFFALSE 7013
// begin eventVar1 := 1 ;
6962: LD_ADDR_EXP 35
6966: PUSH
6967: LD_INT 1
6969: ST_TO_ADDR
// DialogueOn ;
6970: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
6974: LD_EXP 1
6978: PPUSH
6979: LD_STRING D6a-JMM-1
6981: PPUSH
6982: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
6986: LD_EXP 15
6990: PPUSH
6991: LD_STRING D6a-Pow-1
6993: PPUSH
6994: CALL_OW 94
// DialogueOff ;
6998: CALL_OW 7
// wait ( 3 3$0 ) ;
7002: LD_INT 6300
7004: PPUSH
7005: CALL_OW 67
// PowellSupport ;
7009: CALL 1828 0 0
// end ; end ;
7013: PPOPN 5
7015: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7016: LD_VAR 0 1
7020: PPUSH
7021: CALL 25496 0 1
// if un = JMM then
7025: LD_VAR 0 1
7029: PUSH
7030: LD_EXP 1
7034: EQUAL
7035: IFFALSE 7044
// YouLost ( JMM ) ;
7037: LD_STRING JMM
7039: PPUSH
7040: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
7044: LD_VAR 0 1
7048: PPUSH
7049: CALL_OW 264
7053: PUSH
7054: LD_INT 31
7056: EQUAL
7057: IFFALSE 7073
// achivCounter := achivCounter + 1 ;
7059: LD_ADDR_EXP 41
7063: PUSH
7064: LD_EXP 41
7068: PUSH
7069: LD_INT 1
7071: PLUS
7072: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
7073: LD_VAR 0 1
7077: PPUSH
7078: CALL_OW 255
7082: PUSH
7083: LD_INT 1
7085: NONEQUAL
7086: PUSH
7087: LD_VAR 0 1
7091: PPUSH
7092: CALL_OW 247
7096: PUSH
7097: LD_INT 2
7099: EQUAL
7100: AND
7101: IFFALSE 7117
// destroyCounter := destroyCounter + 1 ;
7103: LD_ADDR_EXP 42
7107: PUSH
7108: LD_EXP 42
7112: PUSH
7113: LD_INT 1
7115: PLUS
7116: ST_TO_ADDR
// end ;
7117: PPOPN 1
7119: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
7120: LD_VAR 0 2
7124: PUSH
7125: LD_EXP 18
7129: EQUAL
7130: IFFALSE 7139
// SetAchievement ( ACH_MASHA ) ;
7132: LD_STRING ACH_MASHA
7134: PPUSH
7135: CALL_OW 543
// end ;
7139: PPOPN 4
7141: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
7142: LD_VAR 0 1
7146: PPUSH
7147: LD_VAR 0 2
7151: PPUSH
7152: CALL 25618 0 2
// if GetWeapon ( vehicle ) = us_siberium_rocket and eventVar2 = 0 then
7156: LD_VAR 0 1
7160: PPUSH
7161: CALL_OW 264
7165: PUSH
7166: LD_INT 8
7168: EQUAL
7169: PUSH
7170: LD_EXP 36
7174: PUSH
7175: LD_INT 0
7177: EQUAL
7178: AND
7179: IFFALSE 7248
// begin eventVar2 := 1 ;
7181: LD_ADDR_EXP 36
7185: PUSH
7186: LD_INT 1
7188: ST_TO_ADDR
// DialogueOn ;
7189: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
7193: LD_EXP 1
7197: PPUSH
7198: LD_STRING D6b-JMM-1
7200: PPUSH
7201: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
7205: LD_EXP 15
7209: PPUSH
7210: LD_STRING D6b-Pow-1
7212: PPUSH
7213: CALL_OW 94
// DialogueOff ;
7217: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
7221: LD_INT 5
7223: PPUSH
7224: LD_INT 1
7226: PPUSH
7227: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
7231: LD_INT 7
7233: PPUSH
7234: LD_INT 1
7236: PPUSH
7237: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
7241: LD_STRING M3
7243: PPUSH
7244: CALL_OW 337
// end ; end ;
7248: PPOPN 2
7250: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
7251: LD_VAR 0 2
7255: PPUSH
7256: LD_VAR 0 3
7260: PPUSH
7261: LD_INT 5
7263: PPUSH
7264: CALL_OW 309
7268: PUSH
7269: LD_EXP 37
7273: PUSH
7274: LD_INT 0
7276: EQUAL
7277: AND
7278: IFFALSE 7503
// begin eventVar3 := 1 ;
7280: LD_ADDR_EXP 37
7284: PUSH
7285: LD_INT 1
7287: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7288: LD_INT 175
7290: PPUSH
7291: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_radar ] ] ) then
7295: LD_INT 7
7297: PPUSH
7298: LD_INT 22
7300: PUSH
7301: LD_INT 1
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PUSH
7308: LD_INT 21
7310: PUSH
7311: LD_INT 2
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PUSH
7318: LD_INT 34
7320: PUSH
7321: LD_INT 11
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: PPUSH
7333: CALL_OW 70
7337: IFFALSE 7356
// begin radarOnSpot := 1 ;
7339: LD_ADDR_EXP 30
7343: PUSH
7344: LD_INT 1
7346: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
7347: LD_STRING M3a
7349: PPUSH
7350: CALL_OW 337
// end else
7354: GO 7363
// ChangeMissionObjectives ( M3b ) ;
7356: LD_STRING M3b
7358: PPUSH
7359: CALL_OW 337
// DialogueOn ;
7363: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
7367: LD_EXP 2
7371: PPUSH
7372: LD_STRING D8-Huck-1
7374: PPUSH
7375: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
7379: LD_EXP 1
7383: PPUSH
7384: LD_STRING D8-JMM-1
7386: PPUSH
7387: CALL_OW 88
// if IsOk ( Stevens ) then
7391: LD_EXP 2
7395: PPUSH
7396: CALL_OW 302
7400: IFFALSE 7462
// begin Say ( Stevens , D8-Huck-2 ) ;
7402: LD_EXP 2
7406: PPUSH
7407: LD_STRING D8-Huck-2
7409: PPUSH
7410: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
7414: LD_EXP 1
7418: PPUSH
7419: LD_STRING D8-JMM-2
7421: PPUSH
7422: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
7426: LD_EXP 2
7430: PPUSH
7431: LD_STRING D8-Huck-3
7433: PPUSH
7434: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
7438: LD_EXP 1
7442: PPUSH
7443: LD_STRING D8-JMM-3
7445: PPUSH
7446: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
7450: LD_EXP 2
7454: PPUSH
7455: LD_STRING D8-Huck-4
7457: PPUSH
7458: CALL_OW 88
// end ; DialogueOff ;
7462: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
7466: LD_INT 5
7468: PPUSH
7469: LD_INT 0
7471: PPUSH
7472: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
7476: LD_INT 7
7478: PPUSH
7479: LD_INT 0
7481: PPUSH
7482: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7486: LD_INT 6
7488: PPUSH
7489: LD_INT 1
7491: PPUSH
7492: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
7496: LD_STRING M5
7498: PPUSH
7499: CALL_OW 337
// end ; end ;
7503: PPOPN 3
7505: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 and ( GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium ) then
7506: LD_EXP 26
7510: PPUSH
7511: CALL_OW 302
7515: PUSH
7516: LD_VAR 0 2
7520: PUSH
7521: LD_EXP 26
7525: EQUAL
7526: AND
7527: PUSH
7528: LD_EXP 38
7532: PUSH
7533: LD_INT 0
7535: EQUAL
7536: AND
7537: PUSH
7538: LD_EXP 37
7542: PUSH
7543: LD_INT 1
7545: EQUAL
7546: AND
7547: PUSH
7548: LD_VAR 0 1
7552: PPUSH
7553: LD_INT 1
7555: PPUSH
7556: CALL_OW 268
7560: PUSH
7561: LD_INT 11
7563: EQUAL
7564: PUSH
7565: LD_VAR 0 1
7569: PPUSH
7570: LD_INT 2
7572: PPUSH
7573: CALL_OW 268
7577: PUSH
7578: LD_INT 11
7580: EQUAL
7581: OR
7582: AND
7583: IFFALSE 7593
// eventVar4 := 1 ;
7585: LD_ADDR_EXP 38
7589: PUSH
7590: LD_INT 1
7592: ST_TO_ADDR
// end ;
7593: PPOPN 2
7595: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
7596: LD_INT 0
7598: PPUSH
7599: PPUSH
// begin if GetNation ( unit ) = nation_arabian then
7600: LD_VAR 0 1
7604: PPUSH
7605: CALL_OW 248
7609: PUSH
7610: LD_INT 2
7612: EQUAL
7613: IFFALSE 7859
// begin sibDestroyedCounter := sibDestroyedCounter + 1 ;
7615: LD_ADDR_EXP 32
7619: PUSH
7620: LD_EXP 32
7624: PUSH
7625: LD_INT 1
7627: PLUS
7628: ST_TO_ADDR
// for i := sibDeposits downto 1 do
7629: LD_ADDR_VAR 0 4
7633: PUSH
7634: DOUBLE
7635: LD_EXP 31
7639: INC
7640: ST_TO_ADDR
7641: LD_INT 1
7643: PUSH
7644: FOR_DOWNTO
7645: IFFALSE 7715
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
7647: LD_EXP 31
7651: PUSH
7652: LD_VAR 0 4
7656: ARRAY
7657: PUSH
7658: LD_INT 1
7660: ARRAY
7661: PUSH
7662: LD_VAR 0 2
7666: EQUAL
7667: PUSH
7668: LD_EXP 31
7672: PUSH
7673: LD_VAR 0 4
7677: ARRAY
7678: PUSH
7679: LD_INT 2
7681: ARRAY
7682: PUSH
7683: LD_VAR 0 3
7687: EQUAL
7688: AND
7689: IFFALSE 7713
// begin sibDeposits := Delete ( sibDeposits , i ) ;
7691: LD_ADDR_EXP 31
7695: PUSH
7696: LD_EXP 31
7700: PPUSH
7701: LD_VAR 0 4
7705: PPUSH
7706: CALL_OW 3
7710: ST_TO_ADDR
// break ;
7711: GO 7715
// end ;
7713: GO 7644
7715: POP
7716: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
7717: LD_EXP 39
7721: PUSH
7722: LD_INT 0
7724: EQUAL
7725: PUSH
7726: LD_VAR 0 2
7730: PPUSH
7731: LD_VAR 0 3
7735: PPUSH
7736: CALL_OW 428
7740: PUSH
7741: LD_INT 22
7743: PUSH
7744: LD_INT 1
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PPUSH
7751: CALL_OW 69
7755: IN
7756: AND
7757: IFFALSE 7859
// begin eventVar5 := 1 ;
7759: LD_ADDR_EXP 39
7763: PUSH
7764: LD_INT 1
7766: ST_TO_ADDR
// DialogueOn ;
7767: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
7771: LD_EXP 2
7775: PPUSH
7776: LD_STRING D4-Sci1-1
7778: PPUSH
7779: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7783: LD_EXP 1
7787: PPUSH
7788: LD_STRING D4-JMM-1
7790: PPUSH
7791: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
7795: LD_EXP 2
7799: PPUSH
7800: LD_STRING D4-Sci1-2
7802: PPUSH
7803: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7807: LD_EXP 1
7811: PPUSH
7812: LD_STRING D4-JMM-2
7814: PPUSH
7815: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
7819: LD_EXP 2
7823: PPUSH
7824: LD_STRING D4-Sci1-3
7826: PPUSH
7827: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
7831: LD_EXP 1
7835: PPUSH
7836: LD_STRING D4-JMM-3
7838: PPUSH
7839: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
7843: LD_EXP 1
7847: PPUSH
7848: LD_STRING D4-JMM-3a
7850: PPUSH
7851: CALL_OW 88
// DialogueOff ;
7855: CALL_OW 7
// end ; end ; end ;
7859: PPOPN 5
7861: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = b_depot and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 1 then
7862: LD_VAR 0 1
7866: PPUSH
7867: CALL_OW 255
7871: PUSH
7872: LD_INT 1
7874: EQUAL
7875: PUSH
7876: LD_VAR 0 1
7880: PPUSH
7881: CALL_OW 266
7885: PUSH
7886: LD_INT 0
7888: EQUAL
7889: AND
7890: PUSH
7891: LD_INT 22
7893: PUSH
7894: LD_INT 1
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PUSH
7901: LD_INT 21
7903: PUSH
7904: LD_INT 3
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: PUSH
7911: LD_INT 2
7913: PUSH
7914: LD_INT 30
7916: PUSH
7917: LD_INT 0
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PUSH
7924: LD_INT 30
7926: PUSH
7927: LD_INT 1
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: LIST
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: LIST
7943: PPUSH
7944: CALL_OW 69
7948: PUSH
7949: LD_INT 1
7951: EQUAL
7952: AND
7953: IFFALSE 7967
// SetBName ( building , omega ) ;
7955: LD_VAR 0 1
7959: PPUSH
7960: LD_STRING omega
7962: PPUSH
7963: CALL_OW 500
// end ;
7967: PPOPN 2
7969: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7970: LD_VAR 0 1
7974: PPUSH
7975: CALL 25602 0 1
// end ;
7979: PPOPN 1
7981: END
// on SailEvent ( event ) do begin if event = eventArabianAttack then
7982: LD_VAR 0 1
7986: PUSH
7987: LD_EXP 43
7991: EQUAL
7992: IFFALSE 7998
// ArabianAttack ;
7994: CALL 10063 0 0
// if event = eventRussianAttack then
7998: LD_VAR 0 1
8002: PUSH
8003: LD_EXP 44
8007: EQUAL
8008: IFFALSE 8014
// RussianAttack ;
8010: CALL 10428 0 0
// end ;
8014: PPOPN 1
8016: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = eventContaminate then
8017: LD_VAR 0 1
8021: PUSH
8022: LD_EXP 45
8026: EQUAL
8027: IFFALSE 8121
// begin if IsOk ( p1 ) and ValidHex ( p2 , p3 ) then
8029: LD_VAR 0 2
8033: PPUSH
8034: CALL_OW 302
8038: PUSH
8039: LD_VAR 0 3
8043: PPUSH
8044: LD_VAR 0 4
8048: PPUSH
8049: CALL_OW 488
8053: AND
8054: IFFALSE 8121
// begin repeat wait ( 0 0$1 ) ;
8056: LD_INT 35
8058: PPUSH
8059: CALL_OW 67
// if not HasTask ( p1 ) then
8063: LD_VAR 0 2
8067: PPUSH
8068: CALL_OW 314
8072: NOT
8073: IFFALSE 8109
// begin ComContaminate ( p1 , p2 , p3 ) ;
8075: LD_VAR 0 2
8079: PPUSH
8080: LD_VAR 0 3
8084: PPUSH
8085: LD_VAR 0 4
8089: PPUSH
8090: CALL_OW 158
// AddComMoveXY ( p1 , 42 , 3 ) ;
8094: LD_VAR 0 2
8098: PPUSH
8099: LD_INT 42
8101: PPUSH
8102: LD_INT 3
8104: PPUSH
8105: CALL_OW 171
// end ; until not IsOk ( p1 ) ;
8109: LD_VAR 0 2
8113: PPUSH
8114: CALL_OW 302
8118: NOT
8119: IFFALSE 8056
// end ; end ; end ;
8121: PPOPN 7
8123: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 8 ] then
8124: LD_VAR 0 1
8128: PPUSH
8129: CALL_OW 255
8133: PUSH
8134: LD_INT 3
8136: PUSH
8137: LD_INT 8
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: IN
8144: IFFALSE 8207
// begin ComMoveXY ( driver , 41 , 2 ) ;
8146: LD_VAR 0 1
8150: PPUSH
8151: LD_INT 41
8153: PPUSH
8154: LD_INT 2
8156: PPUSH
8157: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8161: LD_INT 35
8163: PPUSH
8164: CALL_OW 67
// if IsDead ( driver ) then
8168: LD_VAR 0 1
8172: PPUSH
8173: CALL_OW 301
8177: IFFALSE 8181
// exit ;
8179: GO 8207
// until IsAt ( driver , 41 , 2 ) ;
8181: LD_VAR 0 1
8185: PPUSH
8186: LD_INT 41
8188: PPUSH
8189: LD_INT 2
8191: PPUSH
8192: CALL_OW 307
8196: IFFALSE 8161
// RemoveUnit ( driver ) ;
8198: LD_VAR 0 1
8202: PPUSH
8203: CALL_OW 64
// end ; end ; end_of_file
8207: PPOPN 4
8209: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
8210: LD_INT 0
8212: PPUSH
8213: PPUSH
8214: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
8215: LD_ADDR_VAR 0 1
8219: PUSH
8220: LD_VAR 0 1
8224: PUSH
8225: LD_EXP 1
8229: PUSH
8230: LD_EXP 2
8234: PUSH
8235: LD_EXP 3
8239: PUSH
8240: LD_EXP 4
8244: PUSH
8245: LD_EXP 5
8249: PUSH
8250: LD_EXP 6
8254: PUSH
8255: LD_EXP 7
8259: PUSH
8260: LD_EXP 8
8264: PUSH
8265: LD_EXP 9
8269: PUSH
8270: LD_EXP 10
8274: PUSH
8275: LD_EXP 11
8279: PUSH
8280: LD_EXP 12
8284: PUSH
8285: LD_EXP 13
8289: PUSH
8290: LD_EXP 14
8294: PUSH
8295: LD_EXP 15
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: DIFF
8317: ST_TO_ADDR
// if not characters then
8318: LD_VAR 0 1
8322: NOT
8323: IFFALSE 8327
// exit ;
8325: GO 8406
// speaker := characters [ rand ( 1 , characters ) ] ;
8327: LD_ADDR_VAR 0 6
8331: PUSH
8332: LD_VAR 0 1
8336: PUSH
8337: LD_INT 1
8339: PPUSH
8340: LD_VAR 0 1
8344: PPUSH
8345: CALL_OW 12
8349: ARRAY
8350: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
8351: LD_VAR 0 6
8355: PPUSH
8356: CALL_OW 258
8360: PUSH
8361: LD_INT 1
8363: EQUAL
8364: IFFALSE 8382
// Say ( speaker , dialogMID ) else
8366: LD_VAR 0 6
8370: PPUSH
8371: LD_VAR 0 2
8375: PPUSH
8376: CALL_OW 88
8380: GO 8396
// Say ( speaker , dialogFID ) ;
8382: LD_VAR 0 6
8386: PPUSH
8387: LD_VAR 0 3
8391: PPUSH
8392: CALL_OW 88
// result := speaker ;
8396: LD_ADDR_VAR 0 4
8400: PUSH
8401: LD_VAR 0 6
8405: ST_TO_ADDR
// end ;
8406: LD_VAR 0 4
8410: RET
// export function PrepareDifficulty ; begin
8411: LD_INT 0
8413: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
8414: LD_INT 5
8416: PPUSH
8417: LD_INT 8
8419: PPUSH
8420: LD_INT 2
8422: PPUSH
8423: CALL_OW 322
// if Difficulty = 1 then
8427: LD_OWVAR 67
8431: PUSH
8432: LD_INT 1
8434: EQUAL
8435: IFFALSE 8554
// begin SetTech ( 66 , 8 , state_researched ) ;
8437: LD_INT 66
8439: PPUSH
8440: LD_INT 8
8442: PPUSH
8443: LD_INT 2
8445: PPUSH
8446: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
8450: LD_INT 67
8452: PPUSH
8453: LD_INT 8
8455: PPUSH
8456: LD_INT 0
8458: PPUSH
8459: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8463: LD_INT 68
8465: PPUSH
8466: LD_INT 8
8468: PPUSH
8469: LD_INT 0
8471: PPUSH
8472: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8476: LD_INT 51
8478: PPUSH
8479: LD_INT 8
8481: PPUSH
8482: LD_INT 2
8484: PPUSH
8485: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
8489: LD_INT 52
8491: PPUSH
8492: LD_INT 8
8494: PPUSH
8495: LD_INT 0
8497: PPUSH
8498: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
8502: LD_INT 53
8504: PPUSH
8505: LD_INT 8
8507: PPUSH
8508: LD_INT 0
8510: PPUSH
8511: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8515: LD_INT 60
8517: PPUSH
8518: LD_INT 8
8520: PPUSH
8521: LD_INT 2
8523: PPUSH
8524: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
8528: LD_INT 61
8530: PPUSH
8531: LD_INT 8
8533: PPUSH
8534: LD_INT 0
8536: PPUSH
8537: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8541: LD_INT 62
8543: PPUSH
8544: LD_INT 8
8546: PPUSH
8547: LD_INT 0
8549: PPUSH
8550: CALL_OW 322
// end ; if Difficulty = 2 then
8554: LD_OWVAR 67
8558: PUSH
8559: LD_INT 2
8561: EQUAL
8562: IFFALSE 8681
// begin SetTech ( 66 , 8 , state_researched ) ;
8564: LD_INT 66
8566: PPUSH
8567: LD_INT 8
8569: PPUSH
8570: LD_INT 2
8572: PPUSH
8573: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8577: LD_INT 67
8579: PPUSH
8580: LD_INT 8
8582: PPUSH
8583: LD_INT 2
8585: PPUSH
8586: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8590: LD_INT 68
8592: PPUSH
8593: LD_INT 8
8595: PPUSH
8596: LD_INT 0
8598: PPUSH
8599: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8603: LD_INT 51
8605: PPUSH
8606: LD_INT 8
8608: PPUSH
8609: LD_INT 2
8611: PPUSH
8612: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8616: LD_INT 52
8618: PPUSH
8619: LD_INT 8
8621: PPUSH
8622: LD_INT 2
8624: PPUSH
8625: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8629: LD_INT 53
8631: PPUSH
8632: LD_INT 8
8634: PPUSH
8635: LD_INT 2
8637: PPUSH
8638: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8642: LD_INT 60
8644: PPUSH
8645: LD_INT 8
8647: PPUSH
8648: LD_INT 2
8650: PPUSH
8651: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8655: LD_INT 61
8657: PPUSH
8658: LD_INT 8
8660: PPUSH
8661: LD_INT 2
8663: PPUSH
8664: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8668: LD_INT 62
8670: PPUSH
8671: LD_INT 8
8673: PPUSH
8674: LD_INT 0
8676: PPUSH
8677: CALL_OW 322
// end ; if Difficulty >= 3 then
8681: LD_OWVAR 67
8685: PUSH
8686: LD_INT 3
8688: GREATEREQUAL
8689: IFFALSE 8808
// begin SetTech ( 66 , 8 , state_researched ) ;
8691: LD_INT 66
8693: PPUSH
8694: LD_INT 8
8696: PPUSH
8697: LD_INT 2
8699: PPUSH
8700: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8704: LD_INT 67
8706: PPUSH
8707: LD_INT 8
8709: PPUSH
8710: LD_INT 2
8712: PPUSH
8713: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8717: LD_INT 68
8719: PPUSH
8720: LD_INT 8
8722: PPUSH
8723: LD_INT 0
8725: PPUSH
8726: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8730: LD_INT 51
8732: PPUSH
8733: LD_INT 8
8735: PPUSH
8736: LD_INT 2
8738: PPUSH
8739: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8743: LD_INT 52
8745: PPUSH
8746: LD_INT 8
8748: PPUSH
8749: LD_INT 2
8751: PPUSH
8752: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8756: LD_INT 53
8758: PPUSH
8759: LD_INT 8
8761: PPUSH
8762: LD_INT 2
8764: PPUSH
8765: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8769: LD_INT 60
8771: PPUSH
8772: LD_INT 8
8774: PPUSH
8775: LD_INT 2
8777: PPUSH
8778: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8782: LD_INT 61
8784: PPUSH
8785: LD_INT 8
8787: PPUSH
8788: LD_INT 2
8790: PPUSH
8791: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8795: LD_INT 62
8797: PPUSH
8798: LD_INT 8
8800: PPUSH
8801: LD_INT 0
8803: PPUSH
8804: CALL_OW 322
// end ; end ;
8808: LD_VAR 0 1
8812: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8813: LD_INT 0
8815: PPUSH
8816: PPUSH
// for i in charactersList do
8817: LD_ADDR_VAR 0 4
8821: PUSH
8822: LD_VAR 0 1
8826: PUSH
8827: FOR_IN
8828: IFFALSE 8846
// SaveCharacters ( i , ident ) ;
8830: LD_VAR 0 4
8834: PPUSH
8835: LD_VAR 0 2
8839: PPUSH
8840: CALL_OW 38
8844: GO 8827
8846: POP
8847: POP
// end ; end_of_file
8848: LD_VAR 0 3
8852: RET
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
8853: LD_EXP 38
8857: PUSH
8858: LD_INT 1
8860: EQUAL
8861: IFFALSE 9767
8863: GO 8865
8865: DISABLE
8866: LD_INT 0
8868: PPUSH
8869: PPUSH
8870: PPUSH
// begin m1 := false ;
8871: LD_ADDR_VAR 0 1
8875: PUSH
8876: LD_INT 0
8878: ST_TO_ADDR
// m2 := false ;
8879: LD_ADDR_VAR 0 2
8883: PUSH
8884: LD_INT 0
8886: ST_TO_ADDR
// m3 := false ;
8887: LD_ADDR_VAR 0 3
8891: PUSH
8892: LD_INT 0
8894: ST_TO_ADDR
// DialogueOn ;
8895: CALL_OW 6
// Say ( JMM , D9b-JMM-1 ) ;
8899: LD_EXP 1
8903: PPUSH
8904: LD_STRING D9b-JMM-1
8906: PPUSH
8907: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
8911: LD_EXP 15
8915: PPUSH
8916: LD_STRING D9b-Pow-1
8918: PPUSH
8919: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
8923: LD_EXP 1
8927: PPUSH
8928: LD_STRING D9b-JMM-2
8930: PPUSH
8931: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
8935: LD_EXP 15
8939: PPUSH
8940: LD_STRING D9b-Pow-2
8942: PPUSH
8943: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
8947: LD_EXP 1
8951: PPUSH
8952: LD_STRING D9b-JMM-3
8954: PPUSH
8955: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
8959: LD_EXP 15
8963: PPUSH
8964: LD_STRING D9b-Pow-3
8966: PPUSH
8967: CALL_OW 94
// if tick <= 60 60$00 then
8971: LD_OWVAR 1
8975: PUSH
8976: LD_INT 126000
8978: LESSEQUAL
8979: IFFALSE 8988
// SetAchievement ( ACH_ASPEED_13 ) ;
8981: LD_STRING ACH_ASPEED_13
8983: PPUSH
8984: CALL_OW 543
// if burlakStatus = 1 then
8988: LD_EXP 28
8992: PUSH
8993: LD_INT 1
8995: EQUAL
8996: IFFALSE 9018
// begin m1 := true ;
8998: LD_ADDR_VAR 0 1
9002: PUSH
9003: LD_INT 1
9005: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
9006: LD_STRING Burlak
9008: PPUSH
9009: LD_INT 1
9011: PPUSH
9012: CALL_OW 101
// end else
9016: GO 9029
// begin AddMedal ( Burlak , - 1 ) ;
9018: LD_STRING Burlak
9020: PPUSH
9021: LD_INT 1
9023: NEG
9024: PPUSH
9025: CALL_OW 101
// end ; if IsOk ( Stevens ) then
9029: LD_EXP 2
9033: PPUSH
9034: CALL_OW 302
9038: IFFALSE 9060
// begin m2 := true ;
9040: LD_ADDR_VAR 0 2
9044: PUSH
9045: LD_INT 1
9047: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
9048: LD_STRING Stevens
9050: PPUSH
9051: LD_INT 1
9053: PPUSH
9054: CALL_OW 101
// end else
9058: GO 9071
// begin AddMedal ( Stevens , - 1 ) ;
9060: LD_STRING Stevens
9062: PPUSH
9063: LD_INT 1
9065: NEG
9066: PPUSH
9067: CALL_OW 101
// end ; if radarOnSpot = 1 then
9071: LD_EXP 30
9075: PUSH
9076: LD_INT 1
9078: EQUAL
9079: IFFALSE 9101
// begin m3 := true ;
9081: LD_ADDR_VAR 0 3
9085: PUSH
9086: LD_INT 1
9088: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
9089: LD_STRING Observation
9091: PPUSH
9092: LD_INT 1
9094: PPUSH
9095: CALL_OW 101
// end else
9099: GO 9112
// begin AddMedal ( Observation , - 1 ) ;
9101: LD_STRING Observation
9103: PPUSH
9104: LD_INT 1
9106: NEG
9107: PPUSH
9108: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
9112: LD_VAR 0 1
9116: PUSH
9117: LD_VAR 0 2
9121: AND
9122: PUSH
9123: LD_VAR 0 3
9127: AND
9128: PUSH
9129: LD_OWVAR 67
9133: PUSH
9134: LD_INT 3
9136: GREATEREQUAL
9137: AND
9138: IFFALSE 9150
// SetAchievementEX ( ACH_AMER , 13 ) ;
9140: LD_STRING ACH_AMER
9142: PPUSH
9143: LD_INT 13
9145: PPUSH
9146: CALL_OW 564
// GiveMedals ( MAIN ) ;
9150: LD_STRING MAIN
9152: PPUSH
9153: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
9157: LD_EXP 28
9161: PPUSH
9162: LD_STRING 13_BurlakStatus_1
9164: PPUSH
9165: CALL_OW 39
// if IsLive ( Stevens ) then
9169: LD_EXP 2
9173: PPUSH
9174: CALL_OW 300
9178: IFFALSE 9192
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
9180: LD_INT 1
9182: PPUSH
9183: LD_STRING 13_StevensStatus_1
9185: PPUSH
9186: CALL_OW 39
9190: GO 9202
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
9192: LD_INT 0
9194: PPUSH
9195: LD_STRING 13_StevensStatus_1
9197: PPUSH
9198: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
9202: LD_INT 22
9204: PUSH
9205: LD_INT 1
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PUSH
9212: LD_INT 21
9214: PUSH
9215: LD_INT 1
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PUSH
9222: LD_INT 2
9224: PUSH
9225: LD_INT 25
9227: PUSH
9228: LD_INT 1
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PUSH
9235: LD_INT 25
9237: PUSH
9238: LD_INT 2
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PUSH
9245: LD_INT 25
9247: PUSH
9248: LD_INT 3
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PUSH
9255: LD_INT 25
9257: PUSH
9258: LD_INT 4
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: PUSH
9265: LD_INT 25
9267: PUSH
9268: LD_INT 5
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: PUSH
9275: LD_INT 25
9277: PUSH
9278: LD_INT 8
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: LIST
9298: PPUSH
9299: CALL_OW 69
9303: PPUSH
9304: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
9308: LD_EXP 1
9312: PPUSH
9313: LD_EXP 34
9317: PUSH
9318: LD_STRING JMM
9320: STR
9321: PPUSH
9322: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9326: LD_EXP 8
9330: PPUSH
9331: LD_EXP 34
9335: PUSH
9336: LD_STRING Brown
9338: STR
9339: PPUSH
9340: CALL 8813 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9344: LD_EXP 4
9348: PPUSH
9349: LD_EXP 34
9353: PUSH
9354: LD_STRING Donaldson
9356: STR
9357: PPUSH
9358: CALL 8813 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9362: LD_EXP 5
9366: PPUSH
9367: LD_EXP 34
9371: PUSH
9372: LD_STRING Bobby
9374: STR
9375: PPUSH
9376: CALL 8813 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
9380: LD_EXP 6
9384: PPUSH
9385: LD_EXP 34
9389: PUSH
9390: LD_STRING Cyrus
9392: STR
9393: PPUSH
9394: CALL 8813 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
9398: LD_EXP 3
9402: PPUSH
9403: LD_EXP 34
9407: PUSH
9408: LD_STRING Lisa
9410: STR
9411: PPUSH
9412: CALL 8813 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
9416: LD_EXP 13
9420: PPUSH
9421: LD_EXP 34
9425: PUSH
9426: LD_STRING Frank
9428: STR
9429: PPUSH
9430: CALL 8813 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
9434: LD_EXP 14
9438: PPUSH
9439: LD_EXP 34
9443: PUSH
9444: LD_STRING Kikuchi
9446: STR
9447: PPUSH
9448: CALL 8813 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
9452: LD_EXP 10
9456: PPUSH
9457: LD_EXP 34
9461: PUSH
9462: LD_STRING Houten
9464: STR
9465: PPUSH
9466: CALL 8813 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
9470: LD_EXP 12
9474: PPUSH
9475: LD_EXP 34
9479: PUSH
9480: LD_STRING Gary
9482: STR
9483: PPUSH
9484: CALL 8813 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
9488: LD_EXP 11
9492: PPUSH
9493: LD_EXP 34
9497: PUSH
9498: LD_STRING Cornell
9500: STR
9501: PPUSH
9502: CALL 8813 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
9506: LD_EXP 7
9510: PPUSH
9511: LD_EXP 34
9515: PUSH
9516: LD_STRING Denis
9518: STR
9519: PPUSH
9520: CALL 8813 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
9524: LD_EXP 9
9528: PPUSH
9529: LD_EXP 34
9533: PUSH
9534: LD_STRING Gladstone
9536: STR
9537: PPUSH
9538: CALL 8813 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
9542: LD_EXP 2
9546: PPUSH
9547: LD_EXP 34
9551: PUSH
9552: LD_STRING Stevens
9554: STR
9555: PPUSH
9556: CALL 8813 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
9560: LD_INT 50
9562: PUSH
9563: EMPTY
9564: LIST
9565: PUSH
9566: LD_INT 22
9568: PUSH
9569: LD_INT 1
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: LD_INT 21
9578: PUSH
9579: LD_INT 1
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 2
9588: PUSH
9589: LD_INT 25
9591: PUSH
9592: LD_INT 1
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PUSH
9599: LD_INT 25
9601: PUSH
9602: LD_INT 2
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: LD_INT 25
9611: PUSH
9612: LD_INT 3
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PUSH
9619: LD_INT 25
9621: PUSH
9622: LD_INT 4
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PUSH
9629: LD_INT 25
9631: PUSH
9632: LD_INT 5
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PUSH
9639: LD_INT 25
9641: PUSH
9642: LD_INT 8
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: PPUSH
9664: CALL_OW 69
9668: PUSH
9669: LD_EXP 1
9673: PUSH
9674: LD_EXP 8
9678: PUSH
9679: LD_EXP 4
9683: PUSH
9684: LD_EXP 5
9688: PUSH
9689: LD_EXP 6
9693: PUSH
9694: LD_EXP 3
9698: PUSH
9699: LD_EXP 13
9703: PUSH
9704: LD_EXP 9
9708: PUSH
9709: LD_EXP 14
9713: PUSH
9714: LD_EXP 7
9718: PUSH
9719: LD_EXP 10
9723: PUSH
9724: LD_EXP 12
9728: PUSH
9729: LD_EXP 11
9733: PUSH
9734: LD_EXP 2
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: DIFF
9755: PPUSH
9756: LD_STRING 13_other_survivors
9758: PPUSH
9759: CALL_OW 38
// YouWin ;
9763: CALL_OW 103
// end ; end_of_file
9767: PPOPN 3
9769: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) and GetTech ( tech_SibFiss , 1 ) = state_enabled do var i , tmp , yourSiberite ;
9770: LD_EXP 32
9774: PUSH
9775: LD_INT 2
9777: EQUAL
9778: PUSH
9779: LD_INT 34
9781: PUSH
9782: LD_INT 8
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PPUSH
9789: CALL_OW 69
9793: NOT
9794: AND
9795: PUSH
9796: LD_INT 25
9798: PPUSH
9799: LD_INT 1
9801: PPUSH
9802: CALL_OW 321
9806: PUSH
9807: LD_INT 1
9809: EQUAL
9810: AND
9811: IFFALSE 9947
9813: GO 9815
9815: DISABLE
9816: LD_INT 0
9818: PPUSH
9819: PPUSH
9820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9821: LD_ADDR_VAR 0 2
9825: PUSH
9826: LD_INT 22
9828: PUSH
9829: LD_INT 1
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: PUSH
9836: LD_INT 21
9838: PUSH
9839: LD_INT 3
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 2
9848: PUSH
9849: LD_INT 30
9851: PUSH
9852: LD_INT 0
9854: PUSH
9855: EMPTY
9856: LIST
9857: LIST
9858: PUSH
9859: LD_INT 30
9861: PUSH
9862: LD_INT 1
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: LIST
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: LIST
9878: PPUSH
9879: CALL_OW 69
9883: ST_TO_ADDR
// for i in tmp do
9884: LD_ADDR_VAR 0 1
9888: PUSH
9889: LD_VAR 0 2
9893: PUSH
9894: FOR_IN
9895: IFFALSE 9928
// yourSiberite := yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
9897: LD_ADDR_VAR 0 3
9901: PUSH
9902: LD_VAR 0 3
9906: PUSH
9907: LD_VAR 0 1
9911: PPUSH
9912: CALL_OW 274
9916: PPUSH
9917: LD_INT 3
9919: PPUSH
9920: CALL_OW 275
9924: PLUS
9925: ST_TO_ADDR
9926: GO 9894
9928: POP
9929: POP
// if yourSiberite < 60 then
9930: LD_VAR 0 3
9934: PUSH
9935: LD_INT 60
9937: LESS
9938: IFFALSE 9947
// YouLost ( siberite ) ;
9940: LD_STRING siberite
9942: PPUSH
9943: CALL_OW 104
// end ; end_of_file
9947: PPOPN 3
9949: END
// every 8 8$00 + 8 8$00 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
9950: LD_INT 22
9952: PUSH
9953: LD_INT 8
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: LD_INT 21
9962: PUSH
9963: LD_INT 1
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PPUSH
9974: CALL_OW 69
9978: PUSH
9979: LD_INT 6
9981: LESS
9982: IFFALSE 9992
9984: GO 9986
9986: DISABLE
// begin enable ;
9987: ENABLE
// PrepareArabianAttack ;
9988: CALL 4062 0 0
// end ;
9992: END
// every 0 0$30 trigger eventVar1 = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
9993: LD_EXP 35
9997: PUSH
9998: LD_INT 1
10000: EQUAL
10001: PUSH
10002: LD_INT 22
10004: PUSH
10005: LD_INT 8
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: LD_INT 21
10014: PUSH
10015: LD_INT 1
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PPUSH
10026: CALL_OW 69
10030: PUSH
10031: LD_INT 6
10033: LESS
10034: AND
10035: IFFALSE 10062
10037: GO 10039
10039: DISABLE
// begin wait ( 4 4$00 ) ;
10040: LD_INT 8400
10042: PPUSH
10043: CALL_OW 67
// PrepareRussianAttack ;
10047: CALL 3285 0 0
// wait ( 12 12$00 ) ;
10051: LD_INT 25200
10053: PPUSH
10054: CALL_OW 67
// PrepareRussianAttack ;
10058: CALL 3285 0 0
// end ;
10062: END
// export function ArabianAttack ; var i , tmp , path , path2 , vehicles , infantry , units , apes ; begin
10063: LD_INT 0
10065: PPUSH
10066: PPUSH
10067: PPUSH
10068: PPUSH
10069: PPUSH
10070: PPUSH
10071: PPUSH
10072: PPUSH
10073: PPUSH
// units := FilterAllUnits ( [ [ f_side , 8 ] , [ f_tag , 10 ] ] ) ;
10074: LD_ADDR_VAR 0 8
10078: PUSH
10079: LD_INT 22
10081: PUSH
10082: LD_INT 8
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: PUSH
10089: LD_INT 120
10091: PUSH
10092: LD_INT 10
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PPUSH
10103: CALL_OW 69
10107: ST_TO_ADDR
// if not units then
10108: LD_VAR 0 8
10112: NOT
10113: IFFALSE 10117
// exit ;
10115: GO 10423
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10117: LD_ADDR_VAR 0 4
10121: PUSH
10122: LD_INT 80
10124: PUSH
10125: LD_INT 60
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PUSH
10132: LD_INT 54
10134: PUSH
10135: LD_INT 57
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PUSH
10142: LD_INT 55
10144: PUSH
10145: LD_INT 74
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: PUSH
10152: LD_INT 61
10154: PUSH
10155: LD_INT 85
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: ST_TO_ADDR
// path2 := [ [ 93 , 99 ] , [ 85 , 99 ] ] ;
10168: LD_ADDR_VAR 0 5
10172: PUSH
10173: LD_INT 93
10175: PUSH
10176: LD_INT 99
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: PUSH
10183: LD_INT 85
10185: PUSH
10186: LD_INT 99
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10197: LD_INT 35
10199: PPUSH
10200: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10204: LD_ADDR_VAR 0 6
10208: PUSH
10209: LD_VAR 0 8
10213: PPUSH
10214: LD_INT 21
10216: PUSH
10217: LD_INT 2
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PPUSH
10224: CALL_OW 72
10228: ST_TO_ADDR
// if vehicles then
10229: LD_VAR 0 6
10233: IFFALSE 10249
// AgressiveMove ( vehicles , path ) ;
10235: LD_VAR 0 6
10239: PPUSH
10240: LD_VAR 0 4
10244: PPUSH
10245: CALL 69566 0 2
// infantry := UnitFilter ( units , [ [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10249: LD_ADDR_VAR 0 7
10253: PUSH
10254: LD_VAR 0 8
10258: PPUSH
10259: LD_INT 23
10261: PUSH
10262: LD_INT 2
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PUSH
10269: LD_INT 21
10271: PUSH
10272: LD_INT 1
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PPUSH
10283: CALL_OW 72
10287: ST_TO_ADDR
// if infantry then
10288: LD_VAR 0 7
10292: IFFALSE 10308
// AgressiveMove ( infantry , path2 ) ;
10294: LD_VAR 0 7
10298: PPUSH
10299: LD_VAR 0 5
10303: PPUSH
10304: CALL 69566 0 2
// apes := UnitFilter ( units , [ [ f_nation , 0 ] , [ f_type , unit_human ] ] ) ;
10308: LD_ADDR_VAR 0 9
10312: PUSH
10313: LD_VAR 0 8
10317: PPUSH
10318: LD_INT 23
10320: PUSH
10321: LD_INT 0
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: LD_INT 21
10330: PUSH
10331: LD_INT 1
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: PPUSH
10342: CALL_OW 72
10346: ST_TO_ADDR
// if apes then
10347: LD_VAR 0 9
10351: IFFALSE 10395
// ComAttackUnit ( apes [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , apes [ 1 ] ) ) ;
10353: LD_VAR 0 9
10357: PUSH
10358: LD_INT 1
10360: ARRAY
10361: PPUSH
10362: LD_INT 22
10364: PUSH
10365: LD_INT 1
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PPUSH
10372: CALL_OW 69
10376: PPUSH
10377: LD_VAR 0 9
10381: PUSH
10382: LD_INT 1
10384: ARRAY
10385: PPUSH
10386: CALL_OW 74
10390: PPUSH
10391: CALL_OW 115
// units := UnitFilter ( units , [ f_ok ] ) ;
10395: LD_ADDR_VAR 0 8
10399: PUSH
10400: LD_VAR 0 8
10404: PPUSH
10405: LD_INT 50
10407: PUSH
10408: EMPTY
10409: LIST
10410: PPUSH
10411: CALL_OW 72
10415: ST_TO_ADDR
// until not units ;
10416: LD_VAR 0 8
10420: NOT
10421: IFFALSE 10197
// end ;
10423: LD_VAR 0 1
10427: RET
// export function RussianAttack ; var i , tmp , path , vehicles , units ; begin
10428: LD_INT 0
10430: PPUSH
10431: PPUSH
10432: PPUSH
10433: PPUSH
10434: PPUSH
10435: PPUSH
// units := FilterAllUnits ( [ [ f_side , 3 ] , [ f_tag , 10 ] ] ) ;
10436: LD_ADDR_VAR 0 6
10440: PUSH
10441: LD_INT 22
10443: PUSH
10444: LD_INT 3
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 120
10453: PUSH
10454: LD_INT 10
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PPUSH
10465: CALL_OW 69
10469: ST_TO_ADDR
// if not units then
10470: LD_VAR 0 6
10474: NOT
10475: IFFALSE 10479
// exit ;
10477: GO 10610
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10479: LD_ADDR_VAR 0 4
10483: PUSH
10484: LD_INT 80
10486: PUSH
10487: LD_INT 60
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 54
10496: PUSH
10497: LD_INT 57
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: LD_INT 55
10506: PUSH
10507: LD_INT 74
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PUSH
10514: LD_INT 61
10516: PUSH
10517: LD_INT 85
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10530: LD_INT 35
10532: PPUSH
10533: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10537: LD_ADDR_VAR 0 5
10541: PUSH
10542: LD_VAR 0 6
10546: PPUSH
10547: LD_INT 21
10549: PUSH
10550: LD_INT 2
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PPUSH
10557: CALL_OW 72
10561: ST_TO_ADDR
// if vehicles then
10562: LD_VAR 0 5
10566: IFFALSE 10582
// AgressiveMove ( vehicles , path ) ;
10568: LD_VAR 0 5
10572: PPUSH
10573: LD_VAR 0 4
10577: PPUSH
10578: CALL 69566 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10582: LD_ADDR_VAR 0 6
10586: PUSH
10587: LD_VAR 0 6
10591: PPUSH
10592: LD_INT 50
10594: PUSH
10595: EMPTY
10596: LIST
10597: PPUSH
10598: CALL_OW 72
10602: ST_TO_ADDR
// until not units ;
10603: LD_VAR 0 6
10607: NOT
10608: IFFALSE 10530
// end ; end_of_file
10610: LD_VAR 0 1
10614: RET
// every 0 0$01 do var i , cratesSpawned ;
10615: GO 10617
10617: DISABLE
10618: LD_INT 0
10620: PPUSH
10621: PPUSH
// begin cratesSpawned := 0 ;
10622: LD_ADDR_VAR 0 2
10626: PUSH
10627: LD_INT 0
10629: ST_TO_ADDR
// for i := 1 to 6 do
10630: LD_ADDR_VAR 0 1
10634: PUSH
10635: DOUBLE
10636: LD_INT 1
10638: DEC
10639: ST_TO_ADDR
10640: LD_INT 6
10642: PUSH
10643: FOR_TO
10644: IFFALSE 10669
// CreateCratesArea ( rand ( 2 , 5 ) , StartCratesArea , false ) ;
10646: LD_INT 2
10648: PPUSH
10649: LD_INT 5
10651: PPUSH
10652: CALL_OW 12
10656: PPUSH
10657: LD_INT 17
10659: PPUSH
10660: LD_INT 0
10662: PPUSH
10663: CALL_OW 55
10667: GO 10643
10669: POP
10670: POP
// wait ( 0 0$20 ) ;
10671: LD_INT 700
10673: PPUSH
10674: CALL_OW 67
// repeat wait ( 0 0$08 ) ;
10678: LD_INT 280
10680: PPUSH
10681: CALL_OW 67
// if cratesSpawned < 12 then
10685: LD_VAR 0 2
10689: PUSH
10690: LD_INT 12
10692: LESS
10693: IFFALSE 10745
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
10695: LD_INT 105
10697: PPUSH
10698: LD_INT 350
10700: PPUSH
10701: CALL_OW 12
10705: PPUSH
10706: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10710: LD_INT 3
10712: PPUSH
10713: LD_INT 5
10715: PPUSH
10716: CALL_OW 12
10720: PPUSH
10721: LD_INT 13
10723: PPUSH
10724: LD_INT 1
10726: PPUSH
10727: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10731: LD_ADDR_VAR 0 2
10735: PUSH
10736: LD_VAR 0 2
10740: PUSH
10741: LD_INT 1
10743: PLUS
10744: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
10745: LD_VAR 0 2
10749: PUSH
10750: LD_INT 12
10752: GREATEREQUAL
10753: PUSH
10754: LD_VAR 0 2
10758: PUSH
10759: LD_INT 32
10761: LESS
10762: AND
10763: IFFALSE 10815
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
10765: LD_INT 420
10767: PPUSH
10768: LD_INT 700
10770: PPUSH
10771: CALL_OW 12
10775: PPUSH
10776: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10780: LD_INT 3
10782: PPUSH
10783: LD_INT 5
10785: PPUSH
10786: CALL_OW 12
10790: PPUSH
10791: LD_INT 13
10793: PPUSH
10794: LD_INT 1
10796: PPUSH
10797: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10801: LD_ADDR_VAR 0 2
10805: PUSH
10806: LD_VAR 0 2
10810: PUSH
10811: LD_INT 1
10813: PLUS
10814: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
10815: LD_VAR 0 2
10819: PUSH
10820: LD_INT 32
10822: GREATEREQUAL
10823: IFFALSE 10897
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10825: LD_INT 13
10827: PPUSH
10828: CALL_OW 435
10832: PUSH
10833: LD_INT 14
10835: LESS
10836: IFFALSE 10847
// wait ( 0 0$20 ) else
10838: LD_INT 700
10840: PPUSH
10841: CALL_OW 67
10845: GO 10862
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
10847: LD_INT 1750
10849: PPUSH
10850: LD_INT 3150
10852: PPUSH
10853: CALL_OW 12
10857: PPUSH
10858: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
10862: LD_INT 2
10864: PPUSH
10865: LD_INT 5
10867: PPUSH
10868: CALL_OW 12
10872: PPUSH
10873: LD_INT 13
10875: PPUSH
10876: LD_INT 1
10878: PPUSH
10879: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10883: LD_ADDR_VAR 0 2
10887: PUSH
10888: LD_VAR 0 2
10892: PUSH
10893: LD_INT 1
10895: PLUS
10896: ST_TO_ADDR
// end ; if cratesSpawned >= 120 then
10897: LD_VAR 0 2
10901: PUSH
10902: LD_INT 120
10904: GREATEREQUAL
10905: IFFALSE 10979
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10907: LD_INT 13
10909: PPUSH
10910: CALL_OW 435
10914: PUSH
10915: LD_INT 14
10917: LESS
10918: IFFALSE 10929
// wait ( 0 0$40 ) else
10920: LD_INT 1400
10922: PPUSH
10923: CALL_OW 67
10927: GO 10944
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
10929: LD_INT 2450
10931: PPUSH
10932: LD_INT 3850
10934: PPUSH
10935: CALL_OW 12
10939: PPUSH
10940: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
10944: LD_INT 1
10946: PPUSH
10947: LD_INT 5
10949: PPUSH
10950: CALL_OW 12
10954: PPUSH
10955: LD_INT 13
10957: PPUSH
10958: LD_INT 1
10960: PPUSH
10961: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10965: LD_ADDR_VAR 0 2
10969: PUSH
10970: LD_VAR 0 2
10974: PUSH
10975: LD_INT 1
10977: PLUS
10978: ST_TO_ADDR
// end ; until false ;
10979: LD_INT 0
10981: IFFALSE 10678
// end ; end_of_file
10983: PPOPN 2
10985: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
10986: LD_INT 0
10988: PPUSH
// ar_miner := 81 ;
10989: LD_ADDR_EXP 53
10993: PUSH
10994: LD_INT 81
10996: ST_TO_ADDR
// ar_crane := 88 ;
10997: LD_ADDR_EXP 52
11001: PUSH
11002: LD_INT 88
11004: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11005: LD_ADDR_EXP 47
11009: PUSH
11010: LD_INT 89
11012: ST_TO_ADDR
// us_hack := 99 ;
11013: LD_ADDR_EXP 48
11017: PUSH
11018: LD_INT 99
11020: ST_TO_ADDR
// us_artillery := 97 ;
11021: LD_ADDR_EXP 49
11025: PUSH
11026: LD_INT 97
11028: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11029: LD_ADDR_EXP 50
11033: PUSH
11034: LD_INT 91
11036: ST_TO_ADDR
// ar_mortar := 92 ;
11037: LD_ADDR_EXP 51
11041: PUSH
11042: LD_INT 92
11044: ST_TO_ADDR
// ru_flamethrower := 93 ;
11045: LD_ADDR_EXP 54
11049: PUSH
11050: LD_INT 93
11052: ST_TO_ADDR
// ru_radar := 98 ;
11053: LD_ADDR_EXP 46
11057: PUSH
11058: LD_INT 98
11060: ST_TO_ADDR
// tech_Artillery := 80 ;
11061: LD_ADDR_EXP 55
11065: PUSH
11066: LD_INT 80
11068: ST_TO_ADDR
// tech_RadMat := 81 ;
11069: LD_ADDR_EXP 56
11073: PUSH
11074: LD_INT 81
11076: ST_TO_ADDR
// tech_BasicTools := 82 ;
11077: LD_ADDR_EXP 57
11081: PUSH
11082: LD_INT 82
11084: ST_TO_ADDR
// tech_Cargo := 83 ;
11085: LD_ADDR_EXP 58
11089: PUSH
11090: LD_INT 83
11092: ST_TO_ADDR
// tech_Track := 84 ;
11093: LD_ADDR_EXP 59
11097: PUSH
11098: LD_INT 84
11100: ST_TO_ADDR
// tech_Crane := 85 ;
11101: LD_ADDR_EXP 60
11105: PUSH
11106: LD_INT 85
11108: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11109: LD_ADDR_EXP 61
11113: PUSH
11114: LD_INT 86
11116: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11117: LD_ADDR_EXP 62
11121: PUSH
11122: LD_INT 87
11124: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
11125: LD_ADDR_EXP 63
11129: PUSH
11130: LD_INT 88
11132: ST_TO_ADDR
// class_mastodont := 31 ;
11133: LD_ADDR_EXP 64
11137: PUSH
11138: LD_INT 31
11140: ST_TO_ADDR
// class_horse := 21 ;
11141: LD_ADDR_EXP 65
11145: PUSH
11146: LD_INT 21
11148: ST_TO_ADDR
// end ;
11149: LD_VAR 0 1
11153: RET
// every 1 do
11154: GO 11156
11156: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11157: CALL 10986 0 0
11161: END
// every 0 0$1 do
11162: GO 11164
11164: DISABLE
// begin enable ;
11165: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11166: LD_STRING updateTimer(
11168: PUSH
11169: LD_OWVAR 1
11173: STR
11174: PUSH
11175: LD_STRING );
11177: STR
11178: PPUSH
11179: CALL_OW 559
// end ;
11183: END
// export function SOS_MapStart ( ) ; begin
11184: LD_INT 0
11186: PPUSH
// if streamModeActive then
11187: LD_EXP 66
11191: IFFALSE 11200
// DefineStreamItems ( true ) ;
11193: LD_INT 1
11195: PPUSH
11196: CALL 12850 0 1
// UpdateFactoryWaypoints ( ) ;
11200: CALL 26434 0 0
// end ;
11204: LD_VAR 0 1
11208: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11209: LD_INT 0
11211: PPUSH
// if p2 = 100 then
11212: LD_VAR 0 2
11216: PUSH
11217: LD_INT 100
11219: EQUAL
11220: IFFALSE 12223
// begin if not StreamModeActive then
11222: LD_EXP 66
11226: NOT
11227: IFFALSE 11237
// StreamModeActive := true ;
11229: LD_ADDR_EXP 66
11233: PUSH
11234: LD_INT 1
11236: ST_TO_ADDR
// if p3 = 0 then
11237: LD_VAR 0 3
11241: PUSH
11242: LD_INT 0
11244: EQUAL
11245: IFFALSE 11251
// InitStreamMode ;
11247: CALL 12386 0 0
// if p3 = 1 then
11251: LD_VAR 0 3
11255: PUSH
11256: LD_INT 1
11258: EQUAL
11259: IFFALSE 11269
// sRocket := true ;
11261: LD_ADDR_EXP 71
11265: PUSH
11266: LD_INT 1
11268: ST_TO_ADDR
// if p3 = 2 then
11269: LD_VAR 0 3
11273: PUSH
11274: LD_INT 2
11276: EQUAL
11277: IFFALSE 11287
// sSpeed := true ;
11279: LD_ADDR_EXP 70
11283: PUSH
11284: LD_INT 1
11286: ST_TO_ADDR
// if p3 = 3 then
11287: LD_VAR 0 3
11291: PUSH
11292: LD_INT 3
11294: EQUAL
11295: IFFALSE 11305
// sEngine := true ;
11297: LD_ADDR_EXP 72
11301: PUSH
11302: LD_INT 1
11304: ST_TO_ADDR
// if p3 = 4 then
11305: LD_VAR 0 3
11309: PUSH
11310: LD_INT 4
11312: EQUAL
11313: IFFALSE 11323
// sSpec := true ;
11315: LD_ADDR_EXP 69
11319: PUSH
11320: LD_INT 1
11322: ST_TO_ADDR
// if p3 = 5 then
11323: LD_VAR 0 3
11327: PUSH
11328: LD_INT 5
11330: EQUAL
11331: IFFALSE 11341
// sLevel := true ;
11333: LD_ADDR_EXP 73
11337: PUSH
11338: LD_INT 1
11340: ST_TO_ADDR
// if p3 = 6 then
11341: LD_VAR 0 3
11345: PUSH
11346: LD_INT 6
11348: EQUAL
11349: IFFALSE 11359
// sArmoury := true ;
11351: LD_ADDR_EXP 74
11355: PUSH
11356: LD_INT 1
11358: ST_TO_ADDR
// if p3 = 7 then
11359: LD_VAR 0 3
11363: PUSH
11364: LD_INT 7
11366: EQUAL
11367: IFFALSE 11377
// sRadar := true ;
11369: LD_ADDR_EXP 75
11373: PUSH
11374: LD_INT 1
11376: ST_TO_ADDR
// if p3 = 8 then
11377: LD_VAR 0 3
11381: PUSH
11382: LD_INT 8
11384: EQUAL
11385: IFFALSE 11395
// sBunker := true ;
11387: LD_ADDR_EXP 76
11391: PUSH
11392: LD_INT 1
11394: ST_TO_ADDR
// if p3 = 9 then
11395: LD_VAR 0 3
11399: PUSH
11400: LD_INT 9
11402: EQUAL
11403: IFFALSE 11413
// sHack := true ;
11405: LD_ADDR_EXP 77
11409: PUSH
11410: LD_INT 1
11412: ST_TO_ADDR
// if p3 = 10 then
11413: LD_VAR 0 3
11417: PUSH
11418: LD_INT 10
11420: EQUAL
11421: IFFALSE 11431
// sFire := true ;
11423: LD_ADDR_EXP 78
11427: PUSH
11428: LD_INT 1
11430: ST_TO_ADDR
// if p3 = 11 then
11431: LD_VAR 0 3
11435: PUSH
11436: LD_INT 11
11438: EQUAL
11439: IFFALSE 11449
// sRefresh := true ;
11441: LD_ADDR_EXP 79
11445: PUSH
11446: LD_INT 1
11448: ST_TO_ADDR
// if p3 = 12 then
11449: LD_VAR 0 3
11453: PUSH
11454: LD_INT 12
11456: EQUAL
11457: IFFALSE 11467
// sExp := true ;
11459: LD_ADDR_EXP 80
11463: PUSH
11464: LD_INT 1
11466: ST_TO_ADDR
// if p3 = 13 then
11467: LD_VAR 0 3
11471: PUSH
11472: LD_INT 13
11474: EQUAL
11475: IFFALSE 11485
// sDepot := true ;
11477: LD_ADDR_EXP 81
11481: PUSH
11482: LD_INT 1
11484: ST_TO_ADDR
// if p3 = 14 then
11485: LD_VAR 0 3
11489: PUSH
11490: LD_INT 14
11492: EQUAL
11493: IFFALSE 11503
// sFlag := true ;
11495: LD_ADDR_EXP 82
11499: PUSH
11500: LD_INT 1
11502: ST_TO_ADDR
// if p3 = 15 then
11503: LD_VAR 0 3
11507: PUSH
11508: LD_INT 15
11510: EQUAL
11511: IFFALSE 11521
// sKamikadze := true ;
11513: LD_ADDR_EXP 90
11517: PUSH
11518: LD_INT 1
11520: ST_TO_ADDR
// if p3 = 16 then
11521: LD_VAR 0 3
11525: PUSH
11526: LD_INT 16
11528: EQUAL
11529: IFFALSE 11539
// sTroll := true ;
11531: LD_ADDR_EXP 91
11535: PUSH
11536: LD_INT 1
11538: ST_TO_ADDR
// if p3 = 17 then
11539: LD_VAR 0 3
11543: PUSH
11544: LD_INT 17
11546: EQUAL
11547: IFFALSE 11557
// sSlow := true ;
11549: LD_ADDR_EXP 92
11553: PUSH
11554: LD_INT 1
11556: ST_TO_ADDR
// if p3 = 18 then
11557: LD_VAR 0 3
11561: PUSH
11562: LD_INT 18
11564: EQUAL
11565: IFFALSE 11575
// sLack := true ;
11567: LD_ADDR_EXP 93
11571: PUSH
11572: LD_INT 1
11574: ST_TO_ADDR
// if p3 = 19 then
11575: LD_VAR 0 3
11579: PUSH
11580: LD_INT 19
11582: EQUAL
11583: IFFALSE 11593
// sTank := true ;
11585: LD_ADDR_EXP 95
11589: PUSH
11590: LD_INT 1
11592: ST_TO_ADDR
// if p3 = 20 then
11593: LD_VAR 0 3
11597: PUSH
11598: LD_INT 20
11600: EQUAL
11601: IFFALSE 11611
// sRemote := true ;
11603: LD_ADDR_EXP 96
11607: PUSH
11608: LD_INT 1
11610: ST_TO_ADDR
// if p3 = 21 then
11611: LD_VAR 0 3
11615: PUSH
11616: LD_INT 21
11618: EQUAL
11619: IFFALSE 11629
// sPowell := true ;
11621: LD_ADDR_EXP 97
11625: PUSH
11626: LD_INT 1
11628: ST_TO_ADDR
// if p3 = 22 then
11629: LD_VAR 0 3
11633: PUSH
11634: LD_INT 22
11636: EQUAL
11637: IFFALSE 11647
// sTeleport := true ;
11639: LD_ADDR_EXP 100
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// if p3 = 23 then
11647: LD_VAR 0 3
11651: PUSH
11652: LD_INT 23
11654: EQUAL
11655: IFFALSE 11665
// sOilTower := true ;
11657: LD_ADDR_EXP 102
11661: PUSH
11662: LD_INT 1
11664: ST_TO_ADDR
// if p3 = 24 then
11665: LD_VAR 0 3
11669: PUSH
11670: LD_INT 24
11672: EQUAL
11673: IFFALSE 11683
// sShovel := true ;
11675: LD_ADDR_EXP 103
11679: PUSH
11680: LD_INT 1
11682: ST_TO_ADDR
// if p3 = 25 then
11683: LD_VAR 0 3
11687: PUSH
11688: LD_INT 25
11690: EQUAL
11691: IFFALSE 11701
// sSheik := true ;
11693: LD_ADDR_EXP 104
11697: PUSH
11698: LD_INT 1
11700: ST_TO_ADDR
// if p3 = 26 then
11701: LD_VAR 0 3
11705: PUSH
11706: LD_INT 26
11708: EQUAL
11709: IFFALSE 11719
// sEarthquake := true ;
11711: LD_ADDR_EXP 106
11715: PUSH
11716: LD_INT 1
11718: ST_TO_ADDR
// if p3 = 27 then
11719: LD_VAR 0 3
11723: PUSH
11724: LD_INT 27
11726: EQUAL
11727: IFFALSE 11737
// sAI := true ;
11729: LD_ADDR_EXP 107
11733: PUSH
11734: LD_INT 1
11736: ST_TO_ADDR
// if p3 = 28 then
11737: LD_VAR 0 3
11741: PUSH
11742: LD_INT 28
11744: EQUAL
11745: IFFALSE 11755
// sCargo := true ;
11747: LD_ADDR_EXP 110
11751: PUSH
11752: LD_INT 1
11754: ST_TO_ADDR
// if p3 = 29 then
11755: LD_VAR 0 3
11759: PUSH
11760: LD_INT 29
11762: EQUAL
11763: IFFALSE 11773
// sDLaser := true ;
11765: LD_ADDR_EXP 111
11769: PUSH
11770: LD_INT 1
11772: ST_TO_ADDR
// if p3 = 30 then
11773: LD_VAR 0 3
11777: PUSH
11778: LD_INT 30
11780: EQUAL
11781: IFFALSE 11791
// sExchange := true ;
11783: LD_ADDR_EXP 112
11787: PUSH
11788: LD_INT 1
11790: ST_TO_ADDR
// if p3 = 31 then
11791: LD_VAR 0 3
11795: PUSH
11796: LD_INT 31
11798: EQUAL
11799: IFFALSE 11809
// sFac := true ;
11801: LD_ADDR_EXP 113
11805: PUSH
11806: LD_INT 1
11808: ST_TO_ADDR
// if p3 = 32 then
11809: LD_VAR 0 3
11813: PUSH
11814: LD_INT 32
11816: EQUAL
11817: IFFALSE 11827
// sPower := true ;
11819: LD_ADDR_EXP 114
11823: PUSH
11824: LD_INT 1
11826: ST_TO_ADDR
// if p3 = 33 then
11827: LD_VAR 0 3
11831: PUSH
11832: LD_INT 33
11834: EQUAL
11835: IFFALSE 11845
// sRandom := true ;
11837: LD_ADDR_EXP 115
11841: PUSH
11842: LD_INT 1
11844: ST_TO_ADDR
// if p3 = 34 then
11845: LD_VAR 0 3
11849: PUSH
11850: LD_INT 34
11852: EQUAL
11853: IFFALSE 11863
// sShield := true ;
11855: LD_ADDR_EXP 116
11859: PUSH
11860: LD_INT 1
11862: ST_TO_ADDR
// if p3 = 35 then
11863: LD_VAR 0 3
11867: PUSH
11868: LD_INT 35
11870: EQUAL
11871: IFFALSE 11881
// sTime := true ;
11873: LD_ADDR_EXP 117
11877: PUSH
11878: LD_INT 1
11880: ST_TO_ADDR
// if p3 = 36 then
11881: LD_VAR 0 3
11885: PUSH
11886: LD_INT 36
11888: EQUAL
11889: IFFALSE 11899
// sTools := true ;
11891: LD_ADDR_EXP 118
11895: PUSH
11896: LD_INT 1
11898: ST_TO_ADDR
// if p3 = 101 then
11899: LD_VAR 0 3
11903: PUSH
11904: LD_INT 101
11906: EQUAL
11907: IFFALSE 11917
// sSold := true ;
11909: LD_ADDR_EXP 83
11913: PUSH
11914: LD_INT 1
11916: ST_TO_ADDR
// if p3 = 102 then
11917: LD_VAR 0 3
11921: PUSH
11922: LD_INT 102
11924: EQUAL
11925: IFFALSE 11935
// sDiff := true ;
11927: LD_ADDR_EXP 84
11931: PUSH
11932: LD_INT 1
11934: ST_TO_ADDR
// if p3 = 103 then
11935: LD_VAR 0 3
11939: PUSH
11940: LD_INT 103
11942: EQUAL
11943: IFFALSE 11953
// sFog := true ;
11945: LD_ADDR_EXP 87
11949: PUSH
11950: LD_INT 1
11952: ST_TO_ADDR
// if p3 = 104 then
11953: LD_VAR 0 3
11957: PUSH
11958: LD_INT 104
11960: EQUAL
11961: IFFALSE 11971
// sReset := true ;
11963: LD_ADDR_EXP 88
11967: PUSH
11968: LD_INT 1
11970: ST_TO_ADDR
// if p3 = 105 then
11971: LD_VAR 0 3
11975: PUSH
11976: LD_INT 105
11978: EQUAL
11979: IFFALSE 11989
// sSun := true ;
11981: LD_ADDR_EXP 89
11985: PUSH
11986: LD_INT 1
11988: ST_TO_ADDR
// if p3 = 106 then
11989: LD_VAR 0 3
11993: PUSH
11994: LD_INT 106
11996: EQUAL
11997: IFFALSE 12007
// sTiger := true ;
11999: LD_ADDR_EXP 85
12003: PUSH
12004: LD_INT 1
12006: ST_TO_ADDR
// if p3 = 107 then
12007: LD_VAR 0 3
12011: PUSH
12012: LD_INT 107
12014: EQUAL
12015: IFFALSE 12025
// sBomb := true ;
12017: LD_ADDR_EXP 86
12021: PUSH
12022: LD_INT 1
12024: ST_TO_ADDR
// if p3 = 108 then
12025: LD_VAR 0 3
12029: PUSH
12030: LD_INT 108
12032: EQUAL
12033: IFFALSE 12043
// sWound := true ;
12035: LD_ADDR_EXP 94
12039: PUSH
12040: LD_INT 1
12042: ST_TO_ADDR
// if p3 = 109 then
12043: LD_VAR 0 3
12047: PUSH
12048: LD_INT 109
12050: EQUAL
12051: IFFALSE 12061
// sBetray := true ;
12053: LD_ADDR_EXP 98
12057: PUSH
12058: LD_INT 1
12060: ST_TO_ADDR
// if p3 = 110 then
12061: LD_VAR 0 3
12065: PUSH
12066: LD_INT 110
12068: EQUAL
12069: IFFALSE 12079
// sContamin := true ;
12071: LD_ADDR_EXP 99
12075: PUSH
12076: LD_INT 1
12078: ST_TO_ADDR
// if p3 = 111 then
12079: LD_VAR 0 3
12083: PUSH
12084: LD_INT 111
12086: EQUAL
12087: IFFALSE 12097
// sOil := true ;
12089: LD_ADDR_EXP 101
12093: PUSH
12094: LD_INT 1
12096: ST_TO_ADDR
// if p3 = 112 then
12097: LD_VAR 0 3
12101: PUSH
12102: LD_INT 112
12104: EQUAL
12105: IFFALSE 12115
// sStu := true ;
12107: LD_ADDR_EXP 105
12111: PUSH
12112: LD_INT 1
12114: ST_TO_ADDR
// if p3 = 113 then
12115: LD_VAR 0 3
12119: PUSH
12120: LD_INT 113
12122: EQUAL
12123: IFFALSE 12133
// sBazooka := true ;
12125: LD_ADDR_EXP 108
12129: PUSH
12130: LD_INT 1
12132: ST_TO_ADDR
// if p3 = 114 then
12133: LD_VAR 0 3
12137: PUSH
12138: LD_INT 114
12140: EQUAL
12141: IFFALSE 12151
// sMortar := true ;
12143: LD_ADDR_EXP 109
12147: PUSH
12148: LD_INT 1
12150: ST_TO_ADDR
// if p3 = 115 then
12151: LD_VAR 0 3
12155: PUSH
12156: LD_INT 115
12158: EQUAL
12159: IFFALSE 12169
// sRanger := true ;
12161: LD_ADDR_EXP 119
12165: PUSH
12166: LD_INT 1
12168: ST_TO_ADDR
// if p3 = 116 then
12169: LD_VAR 0 3
12173: PUSH
12174: LD_INT 116
12176: EQUAL
12177: IFFALSE 12187
// sComputer := true ;
12179: LD_ADDR_EXP 120
12183: PUSH
12184: LD_INT 1
12186: ST_TO_ADDR
// if p3 = 117 then
12187: LD_VAR 0 3
12191: PUSH
12192: LD_INT 117
12194: EQUAL
12195: IFFALSE 12205
// s30 := true ;
12197: LD_ADDR_EXP 121
12201: PUSH
12202: LD_INT 1
12204: ST_TO_ADDR
// if p3 = 118 then
12205: LD_VAR 0 3
12209: PUSH
12210: LD_INT 118
12212: EQUAL
12213: IFFALSE 12223
// s60 := true ;
12215: LD_ADDR_EXP 122
12219: PUSH
12220: LD_INT 1
12222: ST_TO_ADDR
// end ; if p2 = 101 then
12223: LD_VAR 0 2
12227: PUSH
12228: LD_INT 101
12230: EQUAL
12231: IFFALSE 12359
// begin case p3 of 1 :
12233: LD_VAR 0 3
12237: PUSH
12238: LD_INT 1
12240: DOUBLE
12241: EQUAL
12242: IFTRUE 12246
12244: GO 12253
12246: POP
// hHackUnlimitedResources ; 2 :
12247: CALL 24457 0 0
12251: GO 12359
12253: LD_INT 2
12255: DOUBLE
12256: EQUAL
12257: IFTRUE 12261
12259: GO 12268
12261: POP
// hHackSetLevel10 ; 3 :
12262: CALL 24590 0 0
12266: GO 12359
12268: LD_INT 3
12270: DOUBLE
12271: EQUAL
12272: IFTRUE 12276
12274: GO 12283
12276: POP
// hHackSetLevel10YourUnits ; 4 :
12277: CALL 24675 0 0
12281: GO 12359
12283: LD_INT 4
12285: DOUBLE
12286: EQUAL
12287: IFTRUE 12291
12289: GO 12298
12291: POP
// hHackInvincible ; 5 :
12292: CALL 25123 0 0
12296: GO 12359
12298: LD_INT 5
12300: DOUBLE
12301: EQUAL
12302: IFTRUE 12306
12304: GO 12313
12306: POP
// hHackInvisible ; 6 :
12307: CALL 25234 0 0
12311: GO 12359
12313: LD_INT 6
12315: DOUBLE
12316: EQUAL
12317: IFTRUE 12321
12319: GO 12328
12321: POP
// hHackChangeYourSide ; 7 :
12322: CALL 25291 0 0
12326: GO 12359
12328: LD_INT 7
12330: DOUBLE
12331: EQUAL
12332: IFTRUE 12336
12334: GO 12343
12336: POP
// hHackChangeUnitSide ; 8 :
12337: CALL 25333 0 0
12341: GO 12359
12343: LD_INT 8
12345: DOUBLE
12346: EQUAL
12347: IFTRUE 12351
12349: GO 12358
12351: POP
// hHackFog ; end ;
12352: CALL 25434 0 0
12356: GO 12359
12358: POP
// end ; end ;
12359: LD_VAR 0 7
12363: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12364: GO 12366
12366: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12367: LD_STRING initStreamRollete();
12369: PPUSH
12370: CALL_OW 559
// InitStreamMode ;
12374: CALL 12386 0 0
// DefineStreamItems ( false ) ;
12378: LD_INT 0
12380: PPUSH
12381: CALL 12850 0 1
// end ;
12385: END
// function InitStreamMode ; begin
12386: LD_INT 0
12388: PPUSH
// streamModeActive := false ;
12389: LD_ADDR_EXP 66
12393: PUSH
12394: LD_INT 0
12396: ST_TO_ADDR
// normalCounter := 36 ;
12397: LD_ADDR_EXP 67
12401: PUSH
12402: LD_INT 36
12404: ST_TO_ADDR
// hardcoreCounter := 18 ;
12405: LD_ADDR_EXP 68
12409: PUSH
12410: LD_INT 18
12412: ST_TO_ADDR
// sRocket := false ;
12413: LD_ADDR_EXP 71
12417: PUSH
12418: LD_INT 0
12420: ST_TO_ADDR
// sSpeed := false ;
12421: LD_ADDR_EXP 70
12425: PUSH
12426: LD_INT 0
12428: ST_TO_ADDR
// sEngine := false ;
12429: LD_ADDR_EXP 72
12433: PUSH
12434: LD_INT 0
12436: ST_TO_ADDR
// sSpec := false ;
12437: LD_ADDR_EXP 69
12441: PUSH
12442: LD_INT 0
12444: ST_TO_ADDR
// sLevel := false ;
12445: LD_ADDR_EXP 73
12449: PUSH
12450: LD_INT 0
12452: ST_TO_ADDR
// sArmoury := false ;
12453: LD_ADDR_EXP 74
12457: PUSH
12458: LD_INT 0
12460: ST_TO_ADDR
// sRadar := false ;
12461: LD_ADDR_EXP 75
12465: PUSH
12466: LD_INT 0
12468: ST_TO_ADDR
// sBunker := false ;
12469: LD_ADDR_EXP 76
12473: PUSH
12474: LD_INT 0
12476: ST_TO_ADDR
// sHack := false ;
12477: LD_ADDR_EXP 77
12481: PUSH
12482: LD_INT 0
12484: ST_TO_ADDR
// sFire := false ;
12485: LD_ADDR_EXP 78
12489: PUSH
12490: LD_INT 0
12492: ST_TO_ADDR
// sRefresh := false ;
12493: LD_ADDR_EXP 79
12497: PUSH
12498: LD_INT 0
12500: ST_TO_ADDR
// sExp := false ;
12501: LD_ADDR_EXP 80
12505: PUSH
12506: LD_INT 0
12508: ST_TO_ADDR
// sDepot := false ;
12509: LD_ADDR_EXP 81
12513: PUSH
12514: LD_INT 0
12516: ST_TO_ADDR
// sFlag := false ;
12517: LD_ADDR_EXP 82
12521: PUSH
12522: LD_INT 0
12524: ST_TO_ADDR
// sKamikadze := false ;
12525: LD_ADDR_EXP 90
12529: PUSH
12530: LD_INT 0
12532: ST_TO_ADDR
// sTroll := false ;
12533: LD_ADDR_EXP 91
12537: PUSH
12538: LD_INT 0
12540: ST_TO_ADDR
// sSlow := false ;
12541: LD_ADDR_EXP 92
12545: PUSH
12546: LD_INT 0
12548: ST_TO_ADDR
// sLack := false ;
12549: LD_ADDR_EXP 93
12553: PUSH
12554: LD_INT 0
12556: ST_TO_ADDR
// sTank := false ;
12557: LD_ADDR_EXP 95
12561: PUSH
12562: LD_INT 0
12564: ST_TO_ADDR
// sRemote := false ;
12565: LD_ADDR_EXP 96
12569: PUSH
12570: LD_INT 0
12572: ST_TO_ADDR
// sPowell := false ;
12573: LD_ADDR_EXP 97
12577: PUSH
12578: LD_INT 0
12580: ST_TO_ADDR
// sTeleport := false ;
12581: LD_ADDR_EXP 100
12585: PUSH
12586: LD_INT 0
12588: ST_TO_ADDR
// sOilTower := false ;
12589: LD_ADDR_EXP 102
12593: PUSH
12594: LD_INT 0
12596: ST_TO_ADDR
// sShovel := false ;
12597: LD_ADDR_EXP 103
12601: PUSH
12602: LD_INT 0
12604: ST_TO_ADDR
// sSheik := false ;
12605: LD_ADDR_EXP 104
12609: PUSH
12610: LD_INT 0
12612: ST_TO_ADDR
// sEarthquake := false ;
12613: LD_ADDR_EXP 106
12617: PUSH
12618: LD_INT 0
12620: ST_TO_ADDR
// sAI := false ;
12621: LD_ADDR_EXP 107
12625: PUSH
12626: LD_INT 0
12628: ST_TO_ADDR
// sCargo := false ;
12629: LD_ADDR_EXP 110
12633: PUSH
12634: LD_INT 0
12636: ST_TO_ADDR
// sDLaser := false ;
12637: LD_ADDR_EXP 111
12641: PUSH
12642: LD_INT 0
12644: ST_TO_ADDR
// sExchange := false ;
12645: LD_ADDR_EXP 112
12649: PUSH
12650: LD_INT 0
12652: ST_TO_ADDR
// sFac := false ;
12653: LD_ADDR_EXP 113
12657: PUSH
12658: LD_INT 0
12660: ST_TO_ADDR
// sPower := false ;
12661: LD_ADDR_EXP 114
12665: PUSH
12666: LD_INT 0
12668: ST_TO_ADDR
// sRandom := false ;
12669: LD_ADDR_EXP 115
12673: PUSH
12674: LD_INT 0
12676: ST_TO_ADDR
// sShield := false ;
12677: LD_ADDR_EXP 116
12681: PUSH
12682: LD_INT 0
12684: ST_TO_ADDR
// sTime := false ;
12685: LD_ADDR_EXP 117
12689: PUSH
12690: LD_INT 0
12692: ST_TO_ADDR
// sTools := false ;
12693: LD_ADDR_EXP 118
12697: PUSH
12698: LD_INT 0
12700: ST_TO_ADDR
// sSold := false ;
12701: LD_ADDR_EXP 83
12705: PUSH
12706: LD_INT 0
12708: ST_TO_ADDR
// sDiff := false ;
12709: LD_ADDR_EXP 84
12713: PUSH
12714: LD_INT 0
12716: ST_TO_ADDR
// sFog := false ;
12717: LD_ADDR_EXP 87
12721: PUSH
12722: LD_INT 0
12724: ST_TO_ADDR
// sReset := false ;
12725: LD_ADDR_EXP 88
12729: PUSH
12730: LD_INT 0
12732: ST_TO_ADDR
// sSun := false ;
12733: LD_ADDR_EXP 89
12737: PUSH
12738: LD_INT 0
12740: ST_TO_ADDR
// sTiger := false ;
12741: LD_ADDR_EXP 85
12745: PUSH
12746: LD_INT 0
12748: ST_TO_ADDR
// sBomb := false ;
12749: LD_ADDR_EXP 86
12753: PUSH
12754: LD_INT 0
12756: ST_TO_ADDR
// sWound := false ;
12757: LD_ADDR_EXP 94
12761: PUSH
12762: LD_INT 0
12764: ST_TO_ADDR
// sBetray := false ;
12765: LD_ADDR_EXP 98
12769: PUSH
12770: LD_INT 0
12772: ST_TO_ADDR
// sContamin := false ;
12773: LD_ADDR_EXP 99
12777: PUSH
12778: LD_INT 0
12780: ST_TO_ADDR
// sOil := false ;
12781: LD_ADDR_EXP 101
12785: PUSH
12786: LD_INT 0
12788: ST_TO_ADDR
// sStu := false ;
12789: LD_ADDR_EXP 105
12793: PUSH
12794: LD_INT 0
12796: ST_TO_ADDR
// sBazooka := false ;
12797: LD_ADDR_EXP 108
12801: PUSH
12802: LD_INT 0
12804: ST_TO_ADDR
// sMortar := false ;
12805: LD_ADDR_EXP 109
12809: PUSH
12810: LD_INT 0
12812: ST_TO_ADDR
// sRanger := false ;
12813: LD_ADDR_EXP 119
12817: PUSH
12818: LD_INT 0
12820: ST_TO_ADDR
// sComputer := false ;
12821: LD_ADDR_EXP 120
12825: PUSH
12826: LD_INT 0
12828: ST_TO_ADDR
// s30 := false ;
12829: LD_ADDR_EXP 121
12833: PUSH
12834: LD_INT 0
12836: ST_TO_ADDR
// s60 := false ;
12837: LD_ADDR_EXP 122
12841: PUSH
12842: LD_INT 0
12844: ST_TO_ADDR
// end ;
12845: LD_VAR 0 1
12849: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12850: LD_INT 0
12852: PPUSH
12853: PPUSH
12854: PPUSH
12855: PPUSH
12856: PPUSH
12857: PPUSH
12858: PPUSH
// result := [ ] ;
12859: LD_ADDR_VAR 0 2
12863: PUSH
12864: EMPTY
12865: ST_TO_ADDR
// if campaign_id = 1 then
12866: LD_OWVAR 69
12870: PUSH
12871: LD_INT 1
12873: EQUAL
12874: IFFALSE 16040
// begin case mission_number of 1 :
12876: LD_OWVAR 70
12880: PUSH
12881: LD_INT 1
12883: DOUBLE
12884: EQUAL
12885: IFTRUE 12889
12887: GO 12965
12889: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12890: LD_ADDR_VAR 0 2
12894: PUSH
12895: LD_INT 2
12897: PUSH
12898: LD_INT 4
12900: PUSH
12901: LD_INT 11
12903: PUSH
12904: LD_INT 12
12906: PUSH
12907: LD_INT 15
12909: PUSH
12910: LD_INT 16
12912: PUSH
12913: LD_INT 22
12915: PUSH
12916: LD_INT 23
12918: PUSH
12919: LD_INT 26
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: PUSH
12933: LD_INT 101
12935: PUSH
12936: LD_INT 102
12938: PUSH
12939: LD_INT 106
12941: PUSH
12942: LD_INT 116
12944: PUSH
12945: LD_INT 117
12947: PUSH
12948: LD_INT 118
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: ST_TO_ADDR
12963: GO 16038
12965: LD_INT 2
12967: DOUBLE
12968: EQUAL
12969: IFTRUE 12973
12971: GO 13057
12973: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12974: LD_ADDR_VAR 0 2
12978: PUSH
12979: LD_INT 2
12981: PUSH
12982: LD_INT 4
12984: PUSH
12985: LD_INT 11
12987: PUSH
12988: LD_INT 12
12990: PUSH
12991: LD_INT 15
12993: PUSH
12994: LD_INT 16
12996: PUSH
12997: LD_INT 22
12999: PUSH
13000: LD_INT 23
13002: PUSH
13003: LD_INT 26
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: PUSH
13017: LD_INT 101
13019: PUSH
13020: LD_INT 102
13022: PUSH
13023: LD_INT 105
13025: PUSH
13026: LD_INT 106
13028: PUSH
13029: LD_INT 108
13031: PUSH
13032: LD_INT 116
13034: PUSH
13035: LD_INT 117
13037: PUSH
13038: LD_INT 118
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: ST_TO_ADDR
13055: GO 16038
13057: LD_INT 3
13059: DOUBLE
13060: EQUAL
13061: IFTRUE 13065
13063: GO 13153
13065: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13066: LD_ADDR_VAR 0 2
13070: PUSH
13071: LD_INT 2
13073: PUSH
13074: LD_INT 4
13076: PUSH
13077: LD_INT 5
13079: PUSH
13080: LD_INT 11
13082: PUSH
13083: LD_INT 12
13085: PUSH
13086: LD_INT 15
13088: PUSH
13089: LD_INT 16
13091: PUSH
13092: LD_INT 22
13094: PUSH
13095: LD_INT 26
13097: PUSH
13098: LD_INT 36
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: PUSH
13113: LD_INT 101
13115: PUSH
13116: LD_INT 102
13118: PUSH
13119: LD_INT 105
13121: PUSH
13122: LD_INT 106
13124: PUSH
13125: LD_INT 108
13127: PUSH
13128: LD_INT 116
13130: PUSH
13131: LD_INT 117
13133: PUSH
13134: LD_INT 118
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: ST_TO_ADDR
13151: GO 16038
13153: LD_INT 4
13155: DOUBLE
13156: EQUAL
13157: IFTRUE 13161
13159: GO 13257
13161: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13162: LD_ADDR_VAR 0 2
13166: PUSH
13167: LD_INT 2
13169: PUSH
13170: LD_INT 4
13172: PUSH
13173: LD_INT 5
13175: PUSH
13176: LD_INT 8
13178: PUSH
13179: LD_INT 11
13181: PUSH
13182: LD_INT 12
13184: PUSH
13185: LD_INT 15
13187: PUSH
13188: LD_INT 16
13190: PUSH
13191: LD_INT 22
13193: PUSH
13194: LD_INT 23
13196: PUSH
13197: LD_INT 26
13199: PUSH
13200: LD_INT 36
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: PUSH
13217: LD_INT 101
13219: PUSH
13220: LD_INT 102
13222: PUSH
13223: LD_INT 105
13225: PUSH
13226: LD_INT 106
13228: PUSH
13229: LD_INT 108
13231: PUSH
13232: LD_INT 116
13234: PUSH
13235: LD_INT 117
13237: PUSH
13238: LD_INT 118
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: ST_TO_ADDR
13255: GO 16038
13257: LD_INT 5
13259: DOUBLE
13260: EQUAL
13261: IFTRUE 13265
13263: GO 13377
13265: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13266: LD_ADDR_VAR 0 2
13270: PUSH
13271: LD_INT 2
13273: PUSH
13274: LD_INT 4
13276: PUSH
13277: LD_INT 5
13279: PUSH
13280: LD_INT 6
13282: PUSH
13283: LD_INT 8
13285: PUSH
13286: LD_INT 11
13288: PUSH
13289: LD_INT 12
13291: PUSH
13292: LD_INT 15
13294: PUSH
13295: LD_INT 16
13297: PUSH
13298: LD_INT 22
13300: PUSH
13301: LD_INT 23
13303: PUSH
13304: LD_INT 25
13306: PUSH
13307: LD_INT 26
13309: PUSH
13310: LD_INT 36
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: PUSH
13329: LD_INT 101
13331: PUSH
13332: LD_INT 102
13334: PUSH
13335: LD_INT 105
13337: PUSH
13338: LD_INT 106
13340: PUSH
13341: LD_INT 108
13343: PUSH
13344: LD_INT 109
13346: PUSH
13347: LD_INT 112
13349: PUSH
13350: LD_INT 116
13352: PUSH
13353: LD_INT 117
13355: PUSH
13356: LD_INT 118
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: ST_TO_ADDR
13375: GO 16038
13377: LD_INT 6
13379: DOUBLE
13380: EQUAL
13381: IFTRUE 13385
13383: GO 13517
13385: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13386: LD_ADDR_VAR 0 2
13390: PUSH
13391: LD_INT 2
13393: PUSH
13394: LD_INT 4
13396: PUSH
13397: LD_INT 5
13399: PUSH
13400: LD_INT 6
13402: PUSH
13403: LD_INT 8
13405: PUSH
13406: LD_INT 11
13408: PUSH
13409: LD_INT 12
13411: PUSH
13412: LD_INT 15
13414: PUSH
13415: LD_INT 16
13417: PUSH
13418: LD_INT 20
13420: PUSH
13421: LD_INT 21
13423: PUSH
13424: LD_INT 22
13426: PUSH
13427: LD_INT 23
13429: PUSH
13430: LD_INT 25
13432: PUSH
13433: LD_INT 26
13435: PUSH
13436: LD_INT 30
13438: PUSH
13439: LD_INT 31
13441: PUSH
13442: LD_INT 32
13444: PUSH
13445: LD_INT 36
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: PUSH
13469: LD_INT 101
13471: PUSH
13472: LD_INT 102
13474: PUSH
13475: LD_INT 105
13477: PUSH
13478: LD_INT 106
13480: PUSH
13481: LD_INT 108
13483: PUSH
13484: LD_INT 109
13486: PUSH
13487: LD_INT 112
13489: PUSH
13490: LD_INT 116
13492: PUSH
13493: LD_INT 117
13495: PUSH
13496: LD_INT 118
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: ST_TO_ADDR
13515: GO 16038
13517: LD_INT 7
13519: DOUBLE
13520: EQUAL
13521: IFTRUE 13525
13523: GO 13637
13525: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13526: LD_ADDR_VAR 0 2
13530: PUSH
13531: LD_INT 2
13533: PUSH
13534: LD_INT 4
13536: PUSH
13537: LD_INT 5
13539: PUSH
13540: LD_INT 7
13542: PUSH
13543: LD_INT 11
13545: PUSH
13546: LD_INT 12
13548: PUSH
13549: LD_INT 15
13551: PUSH
13552: LD_INT 16
13554: PUSH
13555: LD_INT 20
13557: PUSH
13558: LD_INT 21
13560: PUSH
13561: LD_INT 22
13563: PUSH
13564: LD_INT 23
13566: PUSH
13567: LD_INT 25
13569: PUSH
13570: LD_INT 26
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: PUSH
13589: LD_INT 101
13591: PUSH
13592: LD_INT 102
13594: PUSH
13595: LD_INT 103
13597: PUSH
13598: LD_INT 105
13600: PUSH
13601: LD_INT 106
13603: PUSH
13604: LD_INT 108
13606: PUSH
13607: LD_INT 112
13609: PUSH
13610: LD_INT 116
13612: PUSH
13613: LD_INT 117
13615: PUSH
13616: LD_INT 118
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: ST_TO_ADDR
13635: GO 16038
13637: LD_INT 8
13639: DOUBLE
13640: EQUAL
13641: IFTRUE 13645
13643: GO 13785
13645: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13646: LD_ADDR_VAR 0 2
13650: PUSH
13651: LD_INT 2
13653: PUSH
13654: LD_INT 4
13656: PUSH
13657: LD_INT 5
13659: PUSH
13660: LD_INT 6
13662: PUSH
13663: LD_INT 7
13665: PUSH
13666: LD_INT 8
13668: PUSH
13669: LD_INT 11
13671: PUSH
13672: LD_INT 12
13674: PUSH
13675: LD_INT 15
13677: PUSH
13678: LD_INT 16
13680: PUSH
13681: LD_INT 20
13683: PUSH
13684: LD_INT 21
13686: PUSH
13687: LD_INT 22
13689: PUSH
13690: LD_INT 23
13692: PUSH
13693: LD_INT 25
13695: PUSH
13696: LD_INT 26
13698: PUSH
13699: LD_INT 30
13701: PUSH
13702: LD_INT 31
13704: PUSH
13705: LD_INT 32
13707: PUSH
13708: LD_INT 36
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: PUSH
13733: LD_INT 101
13735: PUSH
13736: LD_INT 102
13738: PUSH
13739: LD_INT 103
13741: PUSH
13742: LD_INT 105
13744: PUSH
13745: LD_INT 106
13747: PUSH
13748: LD_INT 108
13750: PUSH
13751: LD_INT 109
13753: PUSH
13754: LD_INT 112
13756: PUSH
13757: LD_INT 116
13759: PUSH
13760: LD_INT 117
13762: PUSH
13763: LD_INT 118
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: ST_TO_ADDR
13783: GO 16038
13785: LD_INT 9
13787: DOUBLE
13788: EQUAL
13789: IFTRUE 13793
13791: GO 13941
13793: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13794: LD_ADDR_VAR 0 2
13798: PUSH
13799: LD_INT 2
13801: PUSH
13802: LD_INT 4
13804: PUSH
13805: LD_INT 5
13807: PUSH
13808: LD_INT 6
13810: PUSH
13811: LD_INT 7
13813: PUSH
13814: LD_INT 8
13816: PUSH
13817: LD_INT 11
13819: PUSH
13820: LD_INT 12
13822: PUSH
13823: LD_INT 15
13825: PUSH
13826: LD_INT 16
13828: PUSH
13829: LD_INT 20
13831: PUSH
13832: LD_INT 21
13834: PUSH
13835: LD_INT 22
13837: PUSH
13838: LD_INT 23
13840: PUSH
13841: LD_INT 25
13843: PUSH
13844: LD_INT 26
13846: PUSH
13847: LD_INT 28
13849: PUSH
13850: LD_INT 30
13852: PUSH
13853: LD_INT 31
13855: PUSH
13856: LD_INT 32
13858: PUSH
13859: LD_INT 36
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: PUSH
13885: LD_INT 101
13887: PUSH
13888: LD_INT 102
13890: PUSH
13891: LD_INT 103
13893: PUSH
13894: LD_INT 105
13896: PUSH
13897: LD_INT 106
13899: PUSH
13900: LD_INT 108
13902: PUSH
13903: LD_INT 109
13905: PUSH
13906: LD_INT 112
13908: PUSH
13909: LD_INT 114
13911: PUSH
13912: LD_INT 116
13914: PUSH
13915: LD_INT 117
13917: PUSH
13918: LD_INT 118
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: ST_TO_ADDR
13939: GO 16038
13941: LD_INT 10
13943: DOUBLE
13944: EQUAL
13945: IFTRUE 13949
13947: GO 14145
13949: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13950: LD_ADDR_VAR 0 2
13954: PUSH
13955: LD_INT 2
13957: PUSH
13958: LD_INT 4
13960: PUSH
13961: LD_INT 5
13963: PUSH
13964: LD_INT 6
13966: PUSH
13967: LD_INT 7
13969: PUSH
13970: LD_INT 8
13972: PUSH
13973: LD_INT 9
13975: PUSH
13976: LD_INT 10
13978: PUSH
13979: LD_INT 11
13981: PUSH
13982: LD_INT 12
13984: PUSH
13985: LD_INT 13
13987: PUSH
13988: LD_INT 14
13990: PUSH
13991: LD_INT 15
13993: PUSH
13994: LD_INT 16
13996: PUSH
13997: LD_INT 17
13999: PUSH
14000: LD_INT 18
14002: PUSH
14003: LD_INT 19
14005: PUSH
14006: LD_INT 20
14008: PUSH
14009: LD_INT 21
14011: PUSH
14012: LD_INT 22
14014: PUSH
14015: LD_INT 23
14017: PUSH
14018: LD_INT 24
14020: PUSH
14021: LD_INT 25
14023: PUSH
14024: LD_INT 26
14026: PUSH
14027: LD_INT 28
14029: PUSH
14030: LD_INT 30
14032: PUSH
14033: LD_INT 31
14035: PUSH
14036: LD_INT 32
14038: PUSH
14039: LD_INT 36
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: PUSH
14073: LD_INT 101
14075: PUSH
14076: LD_INT 102
14078: PUSH
14079: LD_INT 103
14081: PUSH
14082: LD_INT 104
14084: PUSH
14085: LD_INT 105
14087: PUSH
14088: LD_INT 106
14090: PUSH
14091: LD_INT 107
14093: PUSH
14094: LD_INT 108
14096: PUSH
14097: LD_INT 109
14099: PUSH
14100: LD_INT 110
14102: PUSH
14103: LD_INT 111
14105: PUSH
14106: LD_INT 112
14108: PUSH
14109: LD_INT 114
14111: PUSH
14112: LD_INT 116
14114: PUSH
14115: LD_INT 117
14117: PUSH
14118: LD_INT 118
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: ST_TO_ADDR
14143: GO 16038
14145: LD_INT 11
14147: DOUBLE
14148: EQUAL
14149: IFTRUE 14153
14151: GO 14357
14153: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14154: LD_ADDR_VAR 0 2
14158: PUSH
14159: LD_INT 2
14161: PUSH
14162: LD_INT 3
14164: PUSH
14165: LD_INT 4
14167: PUSH
14168: LD_INT 5
14170: PUSH
14171: LD_INT 6
14173: PUSH
14174: LD_INT 7
14176: PUSH
14177: LD_INT 8
14179: PUSH
14180: LD_INT 9
14182: PUSH
14183: LD_INT 10
14185: PUSH
14186: LD_INT 11
14188: PUSH
14189: LD_INT 12
14191: PUSH
14192: LD_INT 13
14194: PUSH
14195: LD_INT 14
14197: PUSH
14198: LD_INT 15
14200: PUSH
14201: LD_INT 16
14203: PUSH
14204: LD_INT 17
14206: PUSH
14207: LD_INT 18
14209: PUSH
14210: LD_INT 19
14212: PUSH
14213: LD_INT 20
14215: PUSH
14216: LD_INT 21
14218: PUSH
14219: LD_INT 22
14221: PUSH
14222: LD_INT 23
14224: PUSH
14225: LD_INT 24
14227: PUSH
14228: LD_INT 25
14230: PUSH
14231: LD_INT 26
14233: PUSH
14234: LD_INT 28
14236: PUSH
14237: LD_INT 30
14239: PUSH
14240: LD_INT 31
14242: PUSH
14243: LD_INT 32
14245: PUSH
14246: LD_INT 34
14248: PUSH
14249: LD_INT 36
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: PUSH
14285: LD_INT 101
14287: PUSH
14288: LD_INT 102
14290: PUSH
14291: LD_INT 103
14293: PUSH
14294: LD_INT 104
14296: PUSH
14297: LD_INT 105
14299: PUSH
14300: LD_INT 106
14302: PUSH
14303: LD_INT 107
14305: PUSH
14306: LD_INT 108
14308: PUSH
14309: LD_INT 109
14311: PUSH
14312: LD_INT 110
14314: PUSH
14315: LD_INT 111
14317: PUSH
14318: LD_INT 112
14320: PUSH
14321: LD_INT 114
14323: PUSH
14324: LD_INT 116
14326: PUSH
14327: LD_INT 117
14329: PUSH
14330: LD_INT 118
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: ST_TO_ADDR
14355: GO 16038
14357: LD_INT 12
14359: DOUBLE
14360: EQUAL
14361: IFTRUE 14365
14363: GO 14585
14365: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14366: LD_ADDR_VAR 0 2
14370: PUSH
14371: LD_INT 1
14373: PUSH
14374: LD_INT 2
14376: PUSH
14377: LD_INT 3
14379: PUSH
14380: LD_INT 4
14382: PUSH
14383: LD_INT 5
14385: PUSH
14386: LD_INT 6
14388: PUSH
14389: LD_INT 7
14391: PUSH
14392: LD_INT 8
14394: PUSH
14395: LD_INT 9
14397: PUSH
14398: LD_INT 10
14400: PUSH
14401: LD_INT 11
14403: PUSH
14404: LD_INT 12
14406: PUSH
14407: LD_INT 13
14409: PUSH
14410: LD_INT 14
14412: PUSH
14413: LD_INT 15
14415: PUSH
14416: LD_INT 16
14418: PUSH
14419: LD_INT 17
14421: PUSH
14422: LD_INT 18
14424: PUSH
14425: LD_INT 19
14427: PUSH
14428: LD_INT 20
14430: PUSH
14431: LD_INT 21
14433: PUSH
14434: LD_INT 22
14436: PUSH
14437: LD_INT 23
14439: PUSH
14440: LD_INT 24
14442: PUSH
14443: LD_INT 25
14445: PUSH
14446: LD_INT 26
14448: PUSH
14449: LD_INT 27
14451: PUSH
14452: LD_INT 28
14454: PUSH
14455: LD_INT 30
14457: PUSH
14458: LD_INT 31
14460: PUSH
14461: LD_INT 32
14463: PUSH
14464: LD_INT 33
14466: PUSH
14467: LD_INT 34
14469: PUSH
14470: LD_INT 36
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: PUSH
14509: LD_INT 101
14511: PUSH
14512: LD_INT 102
14514: PUSH
14515: LD_INT 103
14517: PUSH
14518: LD_INT 104
14520: PUSH
14521: LD_INT 105
14523: PUSH
14524: LD_INT 106
14526: PUSH
14527: LD_INT 107
14529: PUSH
14530: LD_INT 108
14532: PUSH
14533: LD_INT 109
14535: PUSH
14536: LD_INT 110
14538: PUSH
14539: LD_INT 111
14541: PUSH
14542: LD_INT 112
14544: PUSH
14545: LD_INT 113
14547: PUSH
14548: LD_INT 114
14550: PUSH
14551: LD_INT 116
14553: PUSH
14554: LD_INT 117
14556: PUSH
14557: LD_INT 118
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: ST_TO_ADDR
14583: GO 16038
14585: LD_INT 13
14587: DOUBLE
14588: EQUAL
14589: IFTRUE 14593
14591: GO 14801
14593: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14594: LD_ADDR_VAR 0 2
14598: PUSH
14599: LD_INT 1
14601: PUSH
14602: LD_INT 2
14604: PUSH
14605: LD_INT 3
14607: PUSH
14608: LD_INT 4
14610: PUSH
14611: LD_INT 5
14613: PUSH
14614: LD_INT 8
14616: PUSH
14617: LD_INT 9
14619: PUSH
14620: LD_INT 10
14622: PUSH
14623: LD_INT 11
14625: PUSH
14626: LD_INT 12
14628: PUSH
14629: LD_INT 14
14631: PUSH
14632: LD_INT 15
14634: PUSH
14635: LD_INT 16
14637: PUSH
14638: LD_INT 17
14640: PUSH
14641: LD_INT 18
14643: PUSH
14644: LD_INT 19
14646: PUSH
14647: LD_INT 20
14649: PUSH
14650: LD_INT 21
14652: PUSH
14653: LD_INT 22
14655: PUSH
14656: LD_INT 23
14658: PUSH
14659: LD_INT 24
14661: PUSH
14662: LD_INT 25
14664: PUSH
14665: LD_INT 26
14667: PUSH
14668: LD_INT 27
14670: PUSH
14671: LD_INT 28
14673: PUSH
14674: LD_INT 30
14676: PUSH
14677: LD_INT 31
14679: PUSH
14680: LD_INT 32
14682: PUSH
14683: LD_INT 33
14685: PUSH
14686: LD_INT 34
14688: PUSH
14689: LD_INT 36
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 101
14727: PUSH
14728: LD_INT 102
14730: PUSH
14731: LD_INT 103
14733: PUSH
14734: LD_INT 104
14736: PUSH
14737: LD_INT 105
14739: PUSH
14740: LD_INT 106
14742: PUSH
14743: LD_INT 107
14745: PUSH
14746: LD_INT 108
14748: PUSH
14749: LD_INT 109
14751: PUSH
14752: LD_INT 110
14754: PUSH
14755: LD_INT 111
14757: PUSH
14758: LD_INT 112
14760: PUSH
14761: LD_INT 113
14763: PUSH
14764: LD_INT 114
14766: PUSH
14767: LD_INT 116
14769: PUSH
14770: LD_INT 117
14772: PUSH
14773: LD_INT 118
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: ST_TO_ADDR
14799: GO 16038
14801: LD_INT 14
14803: DOUBLE
14804: EQUAL
14805: IFTRUE 14809
14807: GO 15033
14809: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14810: LD_ADDR_VAR 0 2
14814: PUSH
14815: LD_INT 1
14817: PUSH
14818: LD_INT 2
14820: PUSH
14821: LD_INT 3
14823: PUSH
14824: LD_INT 4
14826: PUSH
14827: LD_INT 5
14829: PUSH
14830: LD_INT 6
14832: PUSH
14833: LD_INT 7
14835: PUSH
14836: LD_INT 8
14838: PUSH
14839: LD_INT 9
14841: PUSH
14842: LD_INT 10
14844: PUSH
14845: LD_INT 11
14847: PUSH
14848: LD_INT 12
14850: PUSH
14851: LD_INT 13
14853: PUSH
14854: LD_INT 14
14856: PUSH
14857: LD_INT 15
14859: PUSH
14860: LD_INT 16
14862: PUSH
14863: LD_INT 17
14865: PUSH
14866: LD_INT 18
14868: PUSH
14869: LD_INT 19
14871: PUSH
14872: LD_INT 20
14874: PUSH
14875: LD_INT 21
14877: PUSH
14878: LD_INT 22
14880: PUSH
14881: LD_INT 23
14883: PUSH
14884: LD_INT 24
14886: PUSH
14887: LD_INT 25
14889: PUSH
14890: LD_INT 26
14892: PUSH
14893: LD_INT 27
14895: PUSH
14896: LD_INT 28
14898: PUSH
14899: LD_INT 29
14901: PUSH
14902: LD_INT 30
14904: PUSH
14905: LD_INT 31
14907: PUSH
14908: LD_INT 32
14910: PUSH
14911: LD_INT 33
14913: PUSH
14914: LD_INT 34
14916: PUSH
14917: LD_INT 36
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 101
14959: PUSH
14960: LD_INT 102
14962: PUSH
14963: LD_INT 103
14965: PUSH
14966: LD_INT 104
14968: PUSH
14969: LD_INT 105
14971: PUSH
14972: LD_INT 106
14974: PUSH
14975: LD_INT 107
14977: PUSH
14978: LD_INT 108
14980: PUSH
14981: LD_INT 109
14983: PUSH
14984: LD_INT 110
14986: PUSH
14987: LD_INT 111
14989: PUSH
14990: LD_INT 112
14992: PUSH
14993: LD_INT 113
14995: PUSH
14996: LD_INT 114
14998: PUSH
14999: LD_INT 116
15001: PUSH
15002: LD_INT 117
15004: PUSH
15005: LD_INT 118
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: ST_TO_ADDR
15031: GO 16038
15033: LD_INT 15
15035: DOUBLE
15036: EQUAL
15037: IFTRUE 15041
15039: GO 15265
15041: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15042: LD_ADDR_VAR 0 2
15046: PUSH
15047: LD_INT 1
15049: PUSH
15050: LD_INT 2
15052: PUSH
15053: LD_INT 3
15055: PUSH
15056: LD_INT 4
15058: PUSH
15059: LD_INT 5
15061: PUSH
15062: LD_INT 6
15064: PUSH
15065: LD_INT 7
15067: PUSH
15068: LD_INT 8
15070: PUSH
15071: LD_INT 9
15073: PUSH
15074: LD_INT 10
15076: PUSH
15077: LD_INT 11
15079: PUSH
15080: LD_INT 12
15082: PUSH
15083: LD_INT 13
15085: PUSH
15086: LD_INT 14
15088: PUSH
15089: LD_INT 15
15091: PUSH
15092: LD_INT 16
15094: PUSH
15095: LD_INT 17
15097: PUSH
15098: LD_INT 18
15100: PUSH
15101: LD_INT 19
15103: PUSH
15104: LD_INT 20
15106: PUSH
15107: LD_INT 21
15109: PUSH
15110: LD_INT 22
15112: PUSH
15113: LD_INT 23
15115: PUSH
15116: LD_INT 24
15118: PUSH
15119: LD_INT 25
15121: PUSH
15122: LD_INT 26
15124: PUSH
15125: LD_INT 27
15127: PUSH
15128: LD_INT 28
15130: PUSH
15131: LD_INT 29
15133: PUSH
15134: LD_INT 30
15136: PUSH
15137: LD_INT 31
15139: PUSH
15140: LD_INT 32
15142: PUSH
15143: LD_INT 33
15145: PUSH
15146: LD_INT 34
15148: PUSH
15149: LD_INT 36
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: PUSH
15189: LD_INT 101
15191: PUSH
15192: LD_INT 102
15194: PUSH
15195: LD_INT 103
15197: PUSH
15198: LD_INT 104
15200: PUSH
15201: LD_INT 105
15203: PUSH
15204: LD_INT 106
15206: PUSH
15207: LD_INT 107
15209: PUSH
15210: LD_INT 108
15212: PUSH
15213: LD_INT 109
15215: PUSH
15216: LD_INT 110
15218: PUSH
15219: LD_INT 111
15221: PUSH
15222: LD_INT 112
15224: PUSH
15225: LD_INT 113
15227: PUSH
15228: LD_INT 114
15230: PUSH
15231: LD_INT 116
15233: PUSH
15234: LD_INT 117
15236: PUSH
15237: LD_INT 118
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: ST_TO_ADDR
15263: GO 16038
15265: LD_INT 16
15267: DOUBLE
15268: EQUAL
15269: IFTRUE 15273
15271: GO 15409
15273: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15274: LD_ADDR_VAR 0 2
15278: PUSH
15279: LD_INT 2
15281: PUSH
15282: LD_INT 4
15284: PUSH
15285: LD_INT 5
15287: PUSH
15288: LD_INT 7
15290: PUSH
15291: LD_INT 11
15293: PUSH
15294: LD_INT 12
15296: PUSH
15297: LD_INT 15
15299: PUSH
15300: LD_INT 16
15302: PUSH
15303: LD_INT 20
15305: PUSH
15306: LD_INT 21
15308: PUSH
15309: LD_INT 22
15311: PUSH
15312: LD_INT 23
15314: PUSH
15315: LD_INT 25
15317: PUSH
15318: LD_INT 26
15320: PUSH
15321: LD_INT 30
15323: PUSH
15324: LD_INT 31
15326: PUSH
15327: LD_INT 32
15329: PUSH
15330: LD_INT 33
15332: PUSH
15333: LD_INT 34
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 101
15359: PUSH
15360: LD_INT 102
15362: PUSH
15363: LD_INT 103
15365: PUSH
15366: LD_INT 106
15368: PUSH
15369: LD_INT 108
15371: PUSH
15372: LD_INT 112
15374: PUSH
15375: LD_INT 113
15377: PUSH
15378: LD_INT 114
15380: PUSH
15381: LD_INT 116
15383: PUSH
15384: LD_INT 117
15386: PUSH
15387: LD_INT 118
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: ST_TO_ADDR
15407: GO 16038
15409: LD_INT 17
15411: DOUBLE
15412: EQUAL
15413: IFTRUE 15417
15415: GO 15641
15417: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15418: LD_ADDR_VAR 0 2
15422: PUSH
15423: LD_INT 1
15425: PUSH
15426: LD_INT 2
15428: PUSH
15429: LD_INT 3
15431: PUSH
15432: LD_INT 4
15434: PUSH
15435: LD_INT 5
15437: PUSH
15438: LD_INT 6
15440: PUSH
15441: LD_INT 7
15443: PUSH
15444: LD_INT 8
15446: PUSH
15447: LD_INT 9
15449: PUSH
15450: LD_INT 10
15452: PUSH
15453: LD_INT 11
15455: PUSH
15456: LD_INT 12
15458: PUSH
15459: LD_INT 13
15461: PUSH
15462: LD_INT 14
15464: PUSH
15465: LD_INT 15
15467: PUSH
15468: LD_INT 16
15470: PUSH
15471: LD_INT 17
15473: PUSH
15474: LD_INT 18
15476: PUSH
15477: LD_INT 19
15479: PUSH
15480: LD_INT 20
15482: PUSH
15483: LD_INT 21
15485: PUSH
15486: LD_INT 22
15488: PUSH
15489: LD_INT 23
15491: PUSH
15492: LD_INT 24
15494: PUSH
15495: LD_INT 25
15497: PUSH
15498: LD_INT 26
15500: PUSH
15501: LD_INT 27
15503: PUSH
15504: LD_INT 28
15506: PUSH
15507: LD_INT 29
15509: PUSH
15510: LD_INT 30
15512: PUSH
15513: LD_INT 31
15515: PUSH
15516: LD_INT 32
15518: PUSH
15519: LD_INT 33
15521: PUSH
15522: LD_INT 34
15524: PUSH
15525: LD_INT 36
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 101
15567: PUSH
15568: LD_INT 102
15570: PUSH
15571: LD_INT 103
15573: PUSH
15574: LD_INT 104
15576: PUSH
15577: LD_INT 105
15579: PUSH
15580: LD_INT 106
15582: PUSH
15583: LD_INT 107
15585: PUSH
15586: LD_INT 108
15588: PUSH
15589: LD_INT 109
15591: PUSH
15592: LD_INT 110
15594: PUSH
15595: LD_INT 111
15597: PUSH
15598: LD_INT 112
15600: PUSH
15601: LD_INT 113
15603: PUSH
15604: LD_INT 114
15606: PUSH
15607: LD_INT 116
15609: PUSH
15610: LD_INT 117
15612: PUSH
15613: LD_INT 118
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: ST_TO_ADDR
15639: GO 16038
15641: LD_INT 18
15643: DOUBLE
15644: EQUAL
15645: IFTRUE 15649
15647: GO 15797
15649: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15650: LD_ADDR_VAR 0 2
15654: PUSH
15655: LD_INT 2
15657: PUSH
15658: LD_INT 4
15660: PUSH
15661: LD_INT 5
15663: PUSH
15664: LD_INT 7
15666: PUSH
15667: LD_INT 11
15669: PUSH
15670: LD_INT 12
15672: PUSH
15673: LD_INT 15
15675: PUSH
15676: LD_INT 16
15678: PUSH
15679: LD_INT 20
15681: PUSH
15682: LD_INT 21
15684: PUSH
15685: LD_INT 22
15687: PUSH
15688: LD_INT 23
15690: PUSH
15691: LD_INT 25
15693: PUSH
15694: LD_INT 26
15696: PUSH
15697: LD_INT 30
15699: PUSH
15700: LD_INT 31
15702: PUSH
15703: LD_INT 32
15705: PUSH
15706: LD_INT 33
15708: PUSH
15709: LD_INT 34
15711: PUSH
15712: LD_INT 35
15714: PUSH
15715: LD_INT 36
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: PUSH
15741: LD_INT 101
15743: PUSH
15744: LD_INT 102
15746: PUSH
15747: LD_INT 103
15749: PUSH
15750: LD_INT 106
15752: PUSH
15753: LD_INT 108
15755: PUSH
15756: LD_INT 112
15758: PUSH
15759: LD_INT 113
15761: PUSH
15762: LD_INT 114
15764: PUSH
15765: LD_INT 115
15767: PUSH
15768: LD_INT 116
15770: PUSH
15771: LD_INT 117
15773: PUSH
15774: LD_INT 118
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: ST_TO_ADDR
15795: GO 16038
15797: LD_INT 19
15799: DOUBLE
15800: EQUAL
15801: IFTRUE 15805
15803: GO 16037
15805: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15806: LD_ADDR_VAR 0 2
15810: PUSH
15811: LD_INT 1
15813: PUSH
15814: LD_INT 2
15816: PUSH
15817: LD_INT 3
15819: PUSH
15820: LD_INT 4
15822: PUSH
15823: LD_INT 5
15825: PUSH
15826: LD_INT 6
15828: PUSH
15829: LD_INT 7
15831: PUSH
15832: LD_INT 8
15834: PUSH
15835: LD_INT 9
15837: PUSH
15838: LD_INT 10
15840: PUSH
15841: LD_INT 11
15843: PUSH
15844: LD_INT 12
15846: PUSH
15847: LD_INT 13
15849: PUSH
15850: LD_INT 14
15852: PUSH
15853: LD_INT 15
15855: PUSH
15856: LD_INT 16
15858: PUSH
15859: LD_INT 17
15861: PUSH
15862: LD_INT 18
15864: PUSH
15865: LD_INT 19
15867: PUSH
15868: LD_INT 20
15870: PUSH
15871: LD_INT 21
15873: PUSH
15874: LD_INT 22
15876: PUSH
15877: LD_INT 23
15879: PUSH
15880: LD_INT 24
15882: PUSH
15883: LD_INT 25
15885: PUSH
15886: LD_INT 26
15888: PUSH
15889: LD_INT 27
15891: PUSH
15892: LD_INT 28
15894: PUSH
15895: LD_INT 29
15897: PUSH
15898: LD_INT 30
15900: PUSH
15901: LD_INT 31
15903: PUSH
15904: LD_INT 32
15906: PUSH
15907: LD_INT 33
15909: PUSH
15910: LD_INT 34
15912: PUSH
15913: LD_INT 35
15915: PUSH
15916: LD_INT 36
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 101
15959: PUSH
15960: LD_INT 102
15962: PUSH
15963: LD_INT 103
15965: PUSH
15966: LD_INT 104
15968: PUSH
15969: LD_INT 105
15971: PUSH
15972: LD_INT 106
15974: PUSH
15975: LD_INT 107
15977: PUSH
15978: LD_INT 108
15980: PUSH
15981: LD_INT 109
15983: PUSH
15984: LD_INT 110
15986: PUSH
15987: LD_INT 111
15989: PUSH
15990: LD_INT 112
15992: PUSH
15993: LD_INT 113
15995: PUSH
15996: LD_INT 114
15998: PUSH
15999: LD_INT 115
16001: PUSH
16002: LD_INT 116
16004: PUSH
16005: LD_INT 117
16007: PUSH
16008: LD_INT 118
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: ST_TO_ADDR
16035: GO 16038
16037: POP
// end else
16038: GO 16269
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16040: LD_ADDR_VAR 0 2
16044: PUSH
16045: LD_INT 1
16047: PUSH
16048: LD_INT 2
16050: PUSH
16051: LD_INT 3
16053: PUSH
16054: LD_INT 4
16056: PUSH
16057: LD_INT 5
16059: PUSH
16060: LD_INT 6
16062: PUSH
16063: LD_INT 7
16065: PUSH
16066: LD_INT 8
16068: PUSH
16069: LD_INT 9
16071: PUSH
16072: LD_INT 10
16074: PUSH
16075: LD_INT 11
16077: PUSH
16078: LD_INT 12
16080: PUSH
16081: LD_INT 13
16083: PUSH
16084: LD_INT 14
16086: PUSH
16087: LD_INT 15
16089: PUSH
16090: LD_INT 16
16092: PUSH
16093: LD_INT 17
16095: PUSH
16096: LD_INT 18
16098: PUSH
16099: LD_INT 19
16101: PUSH
16102: LD_INT 20
16104: PUSH
16105: LD_INT 21
16107: PUSH
16108: LD_INT 22
16110: PUSH
16111: LD_INT 23
16113: PUSH
16114: LD_INT 24
16116: PUSH
16117: LD_INT 25
16119: PUSH
16120: LD_INT 26
16122: PUSH
16123: LD_INT 27
16125: PUSH
16126: LD_INT 28
16128: PUSH
16129: LD_INT 29
16131: PUSH
16132: LD_INT 30
16134: PUSH
16135: LD_INT 31
16137: PUSH
16138: LD_INT 32
16140: PUSH
16141: LD_INT 33
16143: PUSH
16144: LD_INT 34
16146: PUSH
16147: LD_INT 35
16149: PUSH
16150: LD_INT 36
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: PUSH
16191: LD_INT 101
16193: PUSH
16194: LD_INT 102
16196: PUSH
16197: LD_INT 103
16199: PUSH
16200: LD_INT 104
16202: PUSH
16203: LD_INT 105
16205: PUSH
16206: LD_INT 106
16208: PUSH
16209: LD_INT 107
16211: PUSH
16212: LD_INT 108
16214: PUSH
16215: LD_INT 109
16217: PUSH
16218: LD_INT 110
16220: PUSH
16221: LD_INT 111
16223: PUSH
16224: LD_INT 112
16226: PUSH
16227: LD_INT 113
16229: PUSH
16230: LD_INT 114
16232: PUSH
16233: LD_INT 115
16235: PUSH
16236: LD_INT 116
16238: PUSH
16239: LD_INT 117
16241: PUSH
16242: LD_INT 118
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: ST_TO_ADDR
// if result then
16269: LD_VAR 0 2
16273: IFFALSE 17059
// begin normal :=  ;
16275: LD_ADDR_VAR 0 5
16279: PUSH
16280: LD_STRING 
16282: ST_TO_ADDR
// hardcore :=  ;
16283: LD_ADDR_VAR 0 6
16287: PUSH
16288: LD_STRING 
16290: ST_TO_ADDR
// active :=  ;
16291: LD_ADDR_VAR 0 7
16295: PUSH
16296: LD_STRING 
16298: ST_TO_ADDR
// for i = 1 to normalCounter do
16299: LD_ADDR_VAR 0 8
16303: PUSH
16304: DOUBLE
16305: LD_INT 1
16307: DEC
16308: ST_TO_ADDR
16309: LD_EXP 67
16313: PUSH
16314: FOR_TO
16315: IFFALSE 16416
// begin tmp := 0 ;
16317: LD_ADDR_VAR 0 3
16321: PUSH
16322: LD_STRING 0
16324: ST_TO_ADDR
// if result [ 1 ] then
16325: LD_VAR 0 2
16329: PUSH
16330: LD_INT 1
16332: ARRAY
16333: IFFALSE 16398
// if result [ 1 ] [ 1 ] = i then
16335: LD_VAR 0 2
16339: PUSH
16340: LD_INT 1
16342: ARRAY
16343: PUSH
16344: LD_INT 1
16346: ARRAY
16347: PUSH
16348: LD_VAR 0 8
16352: EQUAL
16353: IFFALSE 16398
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16355: LD_ADDR_VAR 0 2
16359: PUSH
16360: LD_VAR 0 2
16364: PPUSH
16365: LD_INT 1
16367: PPUSH
16368: LD_VAR 0 2
16372: PUSH
16373: LD_INT 1
16375: ARRAY
16376: PPUSH
16377: LD_INT 1
16379: PPUSH
16380: CALL_OW 3
16384: PPUSH
16385: CALL_OW 1
16389: ST_TO_ADDR
// tmp := 1 ;
16390: LD_ADDR_VAR 0 3
16394: PUSH
16395: LD_STRING 1
16397: ST_TO_ADDR
// end ; normal := normal & tmp ;
16398: LD_ADDR_VAR 0 5
16402: PUSH
16403: LD_VAR 0 5
16407: PUSH
16408: LD_VAR 0 3
16412: STR
16413: ST_TO_ADDR
// end ;
16414: GO 16314
16416: POP
16417: POP
// for i = 1 to hardcoreCounter do
16418: LD_ADDR_VAR 0 8
16422: PUSH
16423: DOUBLE
16424: LD_INT 1
16426: DEC
16427: ST_TO_ADDR
16428: LD_EXP 68
16432: PUSH
16433: FOR_TO
16434: IFFALSE 16539
// begin tmp := 0 ;
16436: LD_ADDR_VAR 0 3
16440: PUSH
16441: LD_STRING 0
16443: ST_TO_ADDR
// if result [ 2 ] then
16444: LD_VAR 0 2
16448: PUSH
16449: LD_INT 2
16451: ARRAY
16452: IFFALSE 16521
// if result [ 2 ] [ 1 ] = 100 + i then
16454: LD_VAR 0 2
16458: PUSH
16459: LD_INT 2
16461: ARRAY
16462: PUSH
16463: LD_INT 1
16465: ARRAY
16466: PUSH
16467: LD_INT 100
16469: PUSH
16470: LD_VAR 0 8
16474: PLUS
16475: EQUAL
16476: IFFALSE 16521
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16478: LD_ADDR_VAR 0 2
16482: PUSH
16483: LD_VAR 0 2
16487: PPUSH
16488: LD_INT 2
16490: PPUSH
16491: LD_VAR 0 2
16495: PUSH
16496: LD_INT 2
16498: ARRAY
16499: PPUSH
16500: LD_INT 1
16502: PPUSH
16503: CALL_OW 3
16507: PPUSH
16508: CALL_OW 1
16512: ST_TO_ADDR
// tmp := 1 ;
16513: LD_ADDR_VAR 0 3
16517: PUSH
16518: LD_STRING 1
16520: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16521: LD_ADDR_VAR 0 6
16525: PUSH
16526: LD_VAR 0 6
16530: PUSH
16531: LD_VAR 0 3
16535: STR
16536: ST_TO_ADDR
// end ;
16537: GO 16433
16539: POP
16540: POP
// if isGameLoad then
16541: LD_VAR 0 1
16545: IFFALSE 17020
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16547: LD_ADDR_VAR 0 4
16551: PUSH
16552: LD_EXP 71
16556: PUSH
16557: LD_EXP 70
16561: PUSH
16562: LD_EXP 72
16566: PUSH
16567: LD_EXP 69
16571: PUSH
16572: LD_EXP 73
16576: PUSH
16577: LD_EXP 74
16581: PUSH
16582: LD_EXP 75
16586: PUSH
16587: LD_EXP 76
16591: PUSH
16592: LD_EXP 77
16596: PUSH
16597: LD_EXP 78
16601: PUSH
16602: LD_EXP 79
16606: PUSH
16607: LD_EXP 80
16611: PUSH
16612: LD_EXP 81
16616: PUSH
16617: LD_EXP 82
16621: PUSH
16622: LD_EXP 90
16626: PUSH
16627: LD_EXP 91
16631: PUSH
16632: LD_EXP 92
16636: PUSH
16637: LD_EXP 93
16641: PUSH
16642: LD_EXP 95
16646: PUSH
16647: LD_EXP 96
16651: PUSH
16652: LD_EXP 97
16656: PUSH
16657: LD_EXP 100
16661: PUSH
16662: LD_EXP 102
16666: PUSH
16667: LD_EXP 103
16671: PUSH
16672: LD_EXP 104
16676: PUSH
16677: LD_EXP 106
16681: PUSH
16682: LD_EXP 107
16686: PUSH
16687: LD_EXP 110
16691: PUSH
16692: LD_EXP 111
16696: PUSH
16697: LD_EXP 112
16701: PUSH
16702: LD_EXP 113
16706: PUSH
16707: LD_EXP 114
16711: PUSH
16712: LD_EXP 115
16716: PUSH
16717: LD_EXP 116
16721: PUSH
16722: LD_EXP 117
16726: PUSH
16727: LD_EXP 118
16731: PUSH
16732: LD_EXP 83
16736: PUSH
16737: LD_EXP 84
16741: PUSH
16742: LD_EXP 87
16746: PUSH
16747: LD_EXP 88
16751: PUSH
16752: LD_EXP 89
16756: PUSH
16757: LD_EXP 85
16761: PUSH
16762: LD_EXP 86
16766: PUSH
16767: LD_EXP 94
16771: PUSH
16772: LD_EXP 98
16776: PUSH
16777: LD_EXP 99
16781: PUSH
16782: LD_EXP 101
16786: PUSH
16787: LD_EXP 105
16791: PUSH
16792: LD_EXP 108
16796: PUSH
16797: LD_EXP 109
16801: PUSH
16802: LD_EXP 119
16806: PUSH
16807: LD_EXP 120
16811: PUSH
16812: LD_EXP 121
16816: PUSH
16817: LD_EXP 122
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: ST_TO_ADDR
// tmp :=  ;
16878: LD_ADDR_VAR 0 3
16882: PUSH
16883: LD_STRING 
16885: ST_TO_ADDR
// for i = 1 to normalCounter do
16886: LD_ADDR_VAR 0 8
16890: PUSH
16891: DOUBLE
16892: LD_INT 1
16894: DEC
16895: ST_TO_ADDR
16896: LD_EXP 67
16900: PUSH
16901: FOR_TO
16902: IFFALSE 16938
// begin if flags [ i ] then
16904: LD_VAR 0 4
16908: PUSH
16909: LD_VAR 0 8
16913: ARRAY
16914: IFFALSE 16936
// tmp := tmp & i & ; ;
16916: LD_ADDR_VAR 0 3
16920: PUSH
16921: LD_VAR 0 3
16925: PUSH
16926: LD_VAR 0 8
16930: STR
16931: PUSH
16932: LD_STRING ;
16934: STR
16935: ST_TO_ADDR
// end ;
16936: GO 16901
16938: POP
16939: POP
// for i = 1 to hardcoreCounter do
16940: LD_ADDR_VAR 0 8
16944: PUSH
16945: DOUBLE
16946: LD_INT 1
16948: DEC
16949: ST_TO_ADDR
16950: LD_EXP 68
16954: PUSH
16955: FOR_TO
16956: IFFALSE 17002
// begin if flags [ normalCounter + i ] then
16958: LD_VAR 0 4
16962: PUSH
16963: LD_EXP 67
16967: PUSH
16968: LD_VAR 0 8
16972: PLUS
16973: ARRAY
16974: IFFALSE 17000
// tmp := tmp & ( 100 + i ) & ; ;
16976: LD_ADDR_VAR 0 3
16980: PUSH
16981: LD_VAR 0 3
16985: PUSH
16986: LD_INT 100
16988: PUSH
16989: LD_VAR 0 8
16993: PLUS
16994: STR
16995: PUSH
16996: LD_STRING ;
16998: STR
16999: ST_TO_ADDR
// end ;
17000: GO 16955
17002: POP
17003: POP
// if tmp then
17004: LD_VAR 0 3
17008: IFFALSE 17020
// active := tmp ;
17010: LD_ADDR_VAR 0 7
17014: PUSH
17015: LD_VAR 0 3
17019: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17020: LD_STRING getStreamItemsFromMission("
17022: PUSH
17023: LD_VAR 0 5
17027: STR
17028: PUSH
17029: LD_STRING ","
17031: STR
17032: PUSH
17033: LD_VAR 0 6
17037: STR
17038: PUSH
17039: LD_STRING ","
17041: STR
17042: PUSH
17043: LD_VAR 0 7
17047: STR
17048: PUSH
17049: LD_STRING ")
17051: STR
17052: PPUSH
17053: CALL_OW 559
// end else
17057: GO 17066
// ToLua ( getStreamItemsFromMission("","","") ) ;
17059: LD_STRING getStreamItemsFromMission("","","")
17061: PPUSH
17062: CALL_OW 559
// end ;
17066: LD_VAR 0 2
17070: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17071: LD_EXP 66
17075: PUSH
17076: LD_EXP 71
17080: AND
17081: IFFALSE 17205
17083: GO 17085
17085: DISABLE
17086: LD_INT 0
17088: PPUSH
17089: PPUSH
// begin enable ;
17090: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17091: LD_ADDR_VAR 0 2
17095: PUSH
17096: LD_INT 22
17098: PUSH
17099: LD_OWVAR 2
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PUSH
17108: LD_INT 2
17110: PUSH
17111: LD_INT 34
17113: PUSH
17114: LD_INT 7
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: LD_INT 34
17123: PUSH
17124: LD_INT 45
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PUSH
17131: LD_INT 34
17133: PUSH
17134: LD_INT 28
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 34
17143: PUSH
17144: LD_INT 47
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: PPUSH
17162: CALL_OW 69
17166: ST_TO_ADDR
// if not tmp then
17167: LD_VAR 0 2
17171: NOT
17172: IFFALSE 17176
// exit ;
17174: GO 17205
// for i in tmp do
17176: LD_ADDR_VAR 0 1
17180: PUSH
17181: LD_VAR 0 2
17185: PUSH
17186: FOR_IN
17187: IFFALSE 17203
// begin SetLives ( i , 0 ) ;
17189: LD_VAR 0 1
17193: PPUSH
17194: LD_INT 0
17196: PPUSH
17197: CALL_OW 234
// end ;
17201: GO 17186
17203: POP
17204: POP
// end ;
17205: PPOPN 2
17207: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17208: LD_EXP 66
17212: PUSH
17213: LD_EXP 72
17217: AND
17218: IFFALSE 17302
17220: GO 17222
17222: DISABLE
17223: LD_INT 0
17225: PPUSH
17226: PPUSH
// begin enable ;
17227: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17228: LD_ADDR_VAR 0 2
17232: PUSH
17233: LD_INT 22
17235: PUSH
17236: LD_OWVAR 2
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 32
17247: PUSH
17248: LD_INT 3
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PPUSH
17259: CALL_OW 69
17263: ST_TO_ADDR
// if not tmp then
17264: LD_VAR 0 2
17268: NOT
17269: IFFALSE 17273
// exit ;
17271: GO 17302
// for i in tmp do
17273: LD_ADDR_VAR 0 1
17277: PUSH
17278: LD_VAR 0 2
17282: PUSH
17283: FOR_IN
17284: IFFALSE 17300
// begin SetLives ( i , 0 ) ;
17286: LD_VAR 0 1
17290: PPUSH
17291: LD_INT 0
17293: PPUSH
17294: CALL_OW 234
// end ;
17298: GO 17283
17300: POP
17301: POP
// end ;
17302: PPOPN 2
17304: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17305: LD_EXP 66
17309: PUSH
17310: LD_EXP 69
17314: AND
17315: IFFALSE 17408
17317: GO 17319
17319: DISABLE
17320: LD_INT 0
17322: PPUSH
// begin enable ;
17323: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17324: LD_ADDR_VAR 0 1
17328: PUSH
17329: LD_INT 22
17331: PUSH
17332: LD_OWVAR 2
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: LD_INT 2
17343: PUSH
17344: LD_INT 25
17346: PUSH
17347: LD_INT 5
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: LD_INT 25
17356: PUSH
17357: LD_INT 9
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: LD_INT 25
17366: PUSH
17367: LD_INT 8
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PPUSH
17384: CALL_OW 69
17388: PUSH
17389: FOR_IN
17390: IFFALSE 17406
// begin SetClass ( i , 1 ) ;
17392: LD_VAR 0 1
17396: PPUSH
17397: LD_INT 1
17399: PPUSH
17400: CALL_OW 336
// end ;
17404: GO 17389
17406: POP
17407: POP
// end ;
17408: PPOPN 1
17410: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17411: LD_EXP 66
17415: PUSH
17416: LD_EXP 70
17420: AND
17421: PUSH
17422: LD_OWVAR 65
17426: PUSH
17427: LD_INT 7
17429: LESS
17430: AND
17431: IFFALSE 17445
17433: GO 17435
17435: DISABLE
// begin enable ;
17436: ENABLE
// game_speed := 7 ;
17437: LD_ADDR_OWVAR 65
17441: PUSH
17442: LD_INT 7
17444: ST_TO_ADDR
// end ;
17445: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17446: LD_EXP 66
17450: PUSH
17451: LD_EXP 73
17455: AND
17456: IFFALSE 17658
17458: GO 17460
17460: DISABLE
17461: LD_INT 0
17463: PPUSH
17464: PPUSH
17465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17466: LD_ADDR_VAR 0 3
17470: PUSH
17471: LD_INT 81
17473: PUSH
17474: LD_OWVAR 2
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 21
17485: PUSH
17486: LD_INT 1
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PPUSH
17497: CALL_OW 69
17501: ST_TO_ADDR
// if not tmp then
17502: LD_VAR 0 3
17506: NOT
17507: IFFALSE 17511
// exit ;
17509: GO 17658
// if tmp > 5 then
17511: LD_VAR 0 3
17515: PUSH
17516: LD_INT 5
17518: GREATER
17519: IFFALSE 17531
// k := 5 else
17521: LD_ADDR_VAR 0 2
17525: PUSH
17526: LD_INT 5
17528: ST_TO_ADDR
17529: GO 17541
// k := tmp ;
17531: LD_ADDR_VAR 0 2
17535: PUSH
17536: LD_VAR 0 3
17540: ST_TO_ADDR
// for i := 1 to k do
17541: LD_ADDR_VAR 0 1
17545: PUSH
17546: DOUBLE
17547: LD_INT 1
17549: DEC
17550: ST_TO_ADDR
17551: LD_VAR 0 2
17555: PUSH
17556: FOR_TO
17557: IFFALSE 17656
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17559: LD_VAR 0 3
17563: PUSH
17564: LD_VAR 0 1
17568: ARRAY
17569: PPUSH
17570: LD_VAR 0 1
17574: PUSH
17575: LD_INT 4
17577: MOD
17578: PUSH
17579: LD_INT 1
17581: PLUS
17582: PPUSH
17583: CALL_OW 259
17587: PUSH
17588: LD_INT 10
17590: LESS
17591: IFFALSE 17654
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17593: LD_VAR 0 3
17597: PUSH
17598: LD_VAR 0 1
17602: ARRAY
17603: PPUSH
17604: LD_VAR 0 1
17608: PUSH
17609: LD_INT 4
17611: MOD
17612: PUSH
17613: LD_INT 1
17615: PLUS
17616: PPUSH
17617: LD_VAR 0 3
17621: PUSH
17622: LD_VAR 0 1
17626: ARRAY
17627: PPUSH
17628: LD_VAR 0 1
17632: PUSH
17633: LD_INT 4
17635: MOD
17636: PUSH
17637: LD_INT 1
17639: PLUS
17640: PPUSH
17641: CALL_OW 259
17645: PUSH
17646: LD_INT 1
17648: PLUS
17649: PPUSH
17650: CALL_OW 237
17654: GO 17556
17656: POP
17657: POP
// end ;
17658: PPOPN 3
17660: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17661: LD_EXP 66
17665: PUSH
17666: LD_EXP 74
17670: AND
17671: IFFALSE 17691
17673: GO 17675
17675: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17676: LD_INT 4
17678: PPUSH
17679: LD_OWVAR 2
17683: PPUSH
17684: LD_INT 0
17686: PPUSH
17687: CALL_OW 324
17691: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17692: LD_EXP 66
17696: PUSH
17697: LD_EXP 103
17701: AND
17702: IFFALSE 17722
17704: GO 17706
17706: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17707: LD_INT 19
17709: PPUSH
17710: LD_OWVAR 2
17714: PPUSH
17715: LD_INT 0
17717: PPUSH
17718: CALL_OW 324
17722: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17723: LD_EXP 66
17727: PUSH
17728: LD_EXP 75
17732: AND
17733: IFFALSE 17835
17735: GO 17737
17737: DISABLE
17738: LD_INT 0
17740: PPUSH
17741: PPUSH
// begin enable ;
17742: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17743: LD_ADDR_VAR 0 2
17747: PUSH
17748: LD_INT 22
17750: PUSH
17751: LD_OWVAR 2
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: LD_INT 2
17762: PUSH
17763: LD_INT 34
17765: PUSH
17766: LD_INT 11
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: PUSH
17773: LD_INT 34
17775: PUSH
17776: LD_INT 30
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: LIST
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PPUSH
17792: CALL_OW 69
17796: ST_TO_ADDR
// if not tmp then
17797: LD_VAR 0 2
17801: NOT
17802: IFFALSE 17806
// exit ;
17804: GO 17835
// for i in tmp do
17806: LD_ADDR_VAR 0 1
17810: PUSH
17811: LD_VAR 0 2
17815: PUSH
17816: FOR_IN
17817: IFFALSE 17833
// begin SetLives ( i , 0 ) ;
17819: LD_VAR 0 1
17823: PPUSH
17824: LD_INT 0
17826: PPUSH
17827: CALL_OW 234
// end ;
17831: GO 17816
17833: POP
17834: POP
// end ;
17835: PPOPN 2
17837: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17838: LD_EXP 66
17842: PUSH
17843: LD_EXP 76
17847: AND
17848: IFFALSE 17868
17850: GO 17852
17852: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17853: LD_INT 32
17855: PPUSH
17856: LD_OWVAR 2
17860: PPUSH
17861: LD_INT 0
17863: PPUSH
17864: CALL_OW 324
17868: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17869: LD_EXP 66
17873: PUSH
17874: LD_EXP 77
17878: AND
17879: IFFALSE 18060
17881: GO 17883
17883: DISABLE
17884: LD_INT 0
17886: PPUSH
17887: PPUSH
17888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17889: LD_ADDR_VAR 0 2
17893: PUSH
17894: LD_INT 22
17896: PUSH
17897: LD_OWVAR 2
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: PUSH
17906: LD_INT 33
17908: PUSH
17909: LD_INT 3
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PPUSH
17920: CALL_OW 69
17924: ST_TO_ADDR
// if not tmp then
17925: LD_VAR 0 2
17929: NOT
17930: IFFALSE 17934
// exit ;
17932: GO 18060
// side := 0 ;
17934: LD_ADDR_VAR 0 3
17938: PUSH
17939: LD_INT 0
17941: ST_TO_ADDR
// for i := 1 to 8 do
17942: LD_ADDR_VAR 0 1
17946: PUSH
17947: DOUBLE
17948: LD_INT 1
17950: DEC
17951: ST_TO_ADDR
17952: LD_INT 8
17954: PUSH
17955: FOR_TO
17956: IFFALSE 18004
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17958: LD_OWVAR 2
17962: PUSH
17963: LD_VAR 0 1
17967: NONEQUAL
17968: PUSH
17969: LD_OWVAR 2
17973: PPUSH
17974: LD_VAR 0 1
17978: PPUSH
17979: CALL_OW 81
17983: PUSH
17984: LD_INT 2
17986: EQUAL
17987: AND
17988: IFFALSE 18002
// begin side := i ;
17990: LD_ADDR_VAR 0 3
17994: PUSH
17995: LD_VAR 0 1
17999: ST_TO_ADDR
// break ;
18000: GO 18004
// end ;
18002: GO 17955
18004: POP
18005: POP
// if not side then
18006: LD_VAR 0 3
18010: NOT
18011: IFFALSE 18015
// exit ;
18013: GO 18060
// for i := 1 to tmp do
18015: LD_ADDR_VAR 0 1
18019: PUSH
18020: DOUBLE
18021: LD_INT 1
18023: DEC
18024: ST_TO_ADDR
18025: LD_VAR 0 2
18029: PUSH
18030: FOR_TO
18031: IFFALSE 18058
// if Prob ( 60 ) then
18033: LD_INT 60
18035: PPUSH
18036: CALL_OW 13
18040: IFFALSE 18056
// SetSide ( i , side ) ;
18042: LD_VAR 0 1
18046: PPUSH
18047: LD_VAR 0 3
18051: PPUSH
18052: CALL_OW 235
18056: GO 18030
18058: POP
18059: POP
// end ;
18060: PPOPN 3
18062: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18063: LD_EXP 66
18067: PUSH
18068: LD_EXP 79
18072: AND
18073: IFFALSE 18192
18075: GO 18077
18077: DISABLE
18078: LD_INT 0
18080: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18081: LD_ADDR_VAR 0 1
18085: PUSH
18086: LD_INT 22
18088: PUSH
18089: LD_OWVAR 2
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 21
18100: PUSH
18101: LD_INT 1
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 3
18110: PUSH
18111: LD_INT 23
18113: PUSH
18114: LD_INT 0
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: LIST
18129: PPUSH
18130: CALL_OW 69
18134: PUSH
18135: FOR_IN
18136: IFFALSE 18190
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18138: LD_VAR 0 1
18142: PPUSH
18143: CALL_OW 257
18147: PUSH
18148: LD_INT 1
18150: PUSH
18151: LD_INT 2
18153: PUSH
18154: LD_INT 3
18156: PUSH
18157: LD_INT 4
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: IN
18166: IFFALSE 18188
// SetClass ( un , rand ( 1 , 4 ) ) ;
18168: LD_VAR 0 1
18172: PPUSH
18173: LD_INT 1
18175: PPUSH
18176: LD_INT 4
18178: PPUSH
18179: CALL_OW 12
18183: PPUSH
18184: CALL_OW 336
18188: GO 18135
18190: POP
18191: POP
// end ;
18192: PPOPN 1
18194: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18195: LD_EXP 66
18199: PUSH
18200: LD_EXP 78
18204: AND
18205: IFFALSE 18284
18207: GO 18209
18209: DISABLE
18210: LD_INT 0
18212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18213: LD_ADDR_VAR 0 1
18217: PUSH
18218: LD_INT 22
18220: PUSH
18221: LD_OWVAR 2
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: LD_INT 21
18232: PUSH
18233: LD_INT 3
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PPUSH
18244: CALL_OW 69
18248: ST_TO_ADDR
// if not tmp then
18249: LD_VAR 0 1
18253: NOT
18254: IFFALSE 18258
// exit ;
18256: GO 18284
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18258: LD_VAR 0 1
18262: PUSH
18263: LD_INT 1
18265: PPUSH
18266: LD_VAR 0 1
18270: PPUSH
18271: CALL_OW 12
18275: ARRAY
18276: PPUSH
18277: LD_INT 100
18279: PPUSH
18280: CALL_OW 234
// end ;
18284: PPOPN 1
18286: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18287: LD_EXP 66
18291: PUSH
18292: LD_EXP 80
18296: AND
18297: IFFALSE 18395
18299: GO 18301
18301: DISABLE
18302: LD_INT 0
18304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18305: LD_ADDR_VAR 0 1
18309: PUSH
18310: LD_INT 22
18312: PUSH
18313: LD_OWVAR 2
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 21
18324: PUSH
18325: LD_INT 1
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PPUSH
18336: CALL_OW 69
18340: ST_TO_ADDR
// if not tmp then
18341: LD_VAR 0 1
18345: NOT
18346: IFFALSE 18350
// exit ;
18348: GO 18395
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18350: LD_VAR 0 1
18354: PUSH
18355: LD_INT 1
18357: PPUSH
18358: LD_VAR 0 1
18362: PPUSH
18363: CALL_OW 12
18367: ARRAY
18368: PPUSH
18369: LD_INT 1
18371: PPUSH
18372: LD_INT 4
18374: PPUSH
18375: CALL_OW 12
18379: PPUSH
18380: LD_INT 3000
18382: PPUSH
18383: LD_INT 9000
18385: PPUSH
18386: CALL_OW 12
18390: PPUSH
18391: CALL_OW 492
// end ;
18395: PPOPN 1
18397: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18398: LD_EXP 66
18402: PUSH
18403: LD_EXP 81
18407: AND
18408: IFFALSE 18428
18410: GO 18412
18412: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18413: LD_INT 1
18415: PPUSH
18416: LD_OWVAR 2
18420: PPUSH
18421: LD_INT 0
18423: PPUSH
18424: CALL_OW 324
18428: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18429: LD_EXP 66
18433: PUSH
18434: LD_EXP 82
18438: AND
18439: IFFALSE 18522
18441: GO 18443
18443: DISABLE
18444: LD_INT 0
18446: PPUSH
18447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18448: LD_ADDR_VAR 0 2
18452: PUSH
18453: LD_INT 22
18455: PUSH
18456: LD_OWVAR 2
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 21
18467: PUSH
18468: LD_INT 3
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PPUSH
18479: CALL_OW 69
18483: ST_TO_ADDR
// if not tmp then
18484: LD_VAR 0 2
18488: NOT
18489: IFFALSE 18493
// exit ;
18491: GO 18522
// for i in tmp do
18493: LD_ADDR_VAR 0 1
18497: PUSH
18498: LD_VAR 0 2
18502: PUSH
18503: FOR_IN
18504: IFFALSE 18520
// SetBLevel ( i , 10 ) ;
18506: LD_VAR 0 1
18510: PPUSH
18511: LD_INT 10
18513: PPUSH
18514: CALL_OW 241
18518: GO 18503
18520: POP
18521: POP
// end ;
18522: PPOPN 2
18524: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18525: LD_EXP 66
18529: PUSH
18530: LD_EXP 83
18534: AND
18535: IFFALSE 18646
18537: GO 18539
18539: DISABLE
18540: LD_INT 0
18542: PPUSH
18543: PPUSH
18544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18545: LD_ADDR_VAR 0 3
18549: PUSH
18550: LD_INT 22
18552: PUSH
18553: LD_OWVAR 2
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 25
18564: PUSH
18565: LD_INT 1
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PPUSH
18576: CALL_OW 69
18580: ST_TO_ADDR
// if not tmp then
18581: LD_VAR 0 3
18585: NOT
18586: IFFALSE 18590
// exit ;
18588: GO 18646
// un := tmp [ rand ( 1 , tmp ) ] ;
18590: LD_ADDR_VAR 0 2
18594: PUSH
18595: LD_VAR 0 3
18599: PUSH
18600: LD_INT 1
18602: PPUSH
18603: LD_VAR 0 3
18607: PPUSH
18608: CALL_OW 12
18612: ARRAY
18613: ST_TO_ADDR
// if Crawls ( un ) then
18614: LD_VAR 0 2
18618: PPUSH
18619: CALL_OW 318
18623: IFFALSE 18634
// ComWalk ( un ) ;
18625: LD_VAR 0 2
18629: PPUSH
18630: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18634: LD_VAR 0 2
18638: PPUSH
18639: LD_INT 5
18641: PPUSH
18642: CALL_OW 336
// end ;
18646: PPOPN 3
18648: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18649: LD_EXP 66
18653: PUSH
18654: LD_EXP 84
18658: AND
18659: PUSH
18660: LD_OWVAR 67
18664: PUSH
18665: LD_INT 4
18667: LESS
18668: AND
18669: IFFALSE 18688
18671: GO 18673
18673: DISABLE
// begin Difficulty := Difficulty + 1 ;
18674: LD_ADDR_OWVAR 67
18678: PUSH
18679: LD_OWVAR 67
18683: PUSH
18684: LD_INT 1
18686: PLUS
18687: ST_TO_ADDR
// end ;
18688: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18689: LD_EXP 66
18693: PUSH
18694: LD_EXP 85
18698: AND
18699: IFFALSE 18802
18701: GO 18703
18703: DISABLE
18704: LD_INT 0
18706: PPUSH
// begin for i := 1 to 5 do
18707: LD_ADDR_VAR 0 1
18711: PUSH
18712: DOUBLE
18713: LD_INT 1
18715: DEC
18716: ST_TO_ADDR
18717: LD_INT 5
18719: PUSH
18720: FOR_TO
18721: IFFALSE 18800
// begin uc_nation := nation_nature ;
18723: LD_ADDR_OWVAR 21
18727: PUSH
18728: LD_INT 0
18730: ST_TO_ADDR
// uc_side := 0 ;
18731: LD_ADDR_OWVAR 20
18735: PUSH
18736: LD_INT 0
18738: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18739: LD_ADDR_OWVAR 29
18743: PUSH
18744: LD_INT 12
18746: PUSH
18747: LD_INT 12
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: ST_TO_ADDR
// hc_agressivity := 20 ;
18754: LD_ADDR_OWVAR 35
18758: PUSH
18759: LD_INT 20
18761: ST_TO_ADDR
// hc_class := class_tiger ;
18762: LD_ADDR_OWVAR 28
18766: PUSH
18767: LD_INT 14
18769: ST_TO_ADDR
// hc_gallery :=  ;
18770: LD_ADDR_OWVAR 33
18774: PUSH
18775: LD_STRING 
18777: ST_TO_ADDR
// hc_name :=  ;
18778: LD_ADDR_OWVAR 26
18782: PUSH
18783: LD_STRING 
18785: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18786: CALL_OW 44
18790: PPUSH
18791: LD_INT 0
18793: PPUSH
18794: CALL_OW 51
// end ;
18798: GO 18720
18800: POP
18801: POP
// end ;
18802: PPOPN 1
18804: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18805: LD_EXP 66
18809: PUSH
18810: LD_EXP 86
18814: AND
18815: IFFALSE 18824
18817: GO 18819
18819: DISABLE
// StreamSibBomb ;
18820: CALL 18825 0 0
18824: END
// export function StreamSibBomb ; var i , x , y ; begin
18825: LD_INT 0
18827: PPUSH
18828: PPUSH
18829: PPUSH
18830: PPUSH
// result := false ;
18831: LD_ADDR_VAR 0 1
18835: PUSH
18836: LD_INT 0
18838: ST_TO_ADDR
// for i := 1 to 16 do
18839: LD_ADDR_VAR 0 2
18843: PUSH
18844: DOUBLE
18845: LD_INT 1
18847: DEC
18848: ST_TO_ADDR
18849: LD_INT 16
18851: PUSH
18852: FOR_TO
18853: IFFALSE 19052
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18855: LD_ADDR_VAR 0 3
18859: PUSH
18860: LD_INT 10
18862: PUSH
18863: LD_INT 20
18865: PUSH
18866: LD_INT 30
18868: PUSH
18869: LD_INT 40
18871: PUSH
18872: LD_INT 50
18874: PUSH
18875: LD_INT 60
18877: PUSH
18878: LD_INT 70
18880: PUSH
18881: LD_INT 80
18883: PUSH
18884: LD_INT 90
18886: PUSH
18887: LD_INT 100
18889: PUSH
18890: LD_INT 110
18892: PUSH
18893: LD_INT 120
18895: PUSH
18896: LD_INT 130
18898: PUSH
18899: LD_INT 140
18901: PUSH
18902: LD_INT 150
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 1
18924: PPUSH
18925: LD_INT 15
18927: PPUSH
18928: CALL_OW 12
18932: ARRAY
18933: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18934: LD_ADDR_VAR 0 4
18938: PUSH
18939: LD_INT 10
18941: PUSH
18942: LD_INT 20
18944: PUSH
18945: LD_INT 30
18947: PUSH
18948: LD_INT 40
18950: PUSH
18951: LD_INT 50
18953: PUSH
18954: LD_INT 60
18956: PUSH
18957: LD_INT 70
18959: PUSH
18960: LD_INT 80
18962: PUSH
18963: LD_INT 90
18965: PUSH
18966: LD_INT 100
18968: PUSH
18969: LD_INT 110
18971: PUSH
18972: LD_INT 120
18974: PUSH
18975: LD_INT 130
18977: PUSH
18978: LD_INT 140
18980: PUSH
18981: LD_INT 150
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 1
19003: PPUSH
19004: LD_INT 15
19006: PPUSH
19007: CALL_OW 12
19011: ARRAY
19012: ST_TO_ADDR
// if ValidHex ( x , y ) then
19013: LD_VAR 0 3
19017: PPUSH
19018: LD_VAR 0 4
19022: PPUSH
19023: CALL_OW 488
19027: IFFALSE 19050
// begin result := [ x , y ] ;
19029: LD_ADDR_VAR 0 1
19033: PUSH
19034: LD_VAR 0 3
19038: PUSH
19039: LD_VAR 0 4
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: ST_TO_ADDR
// break ;
19048: GO 19052
// end ; end ;
19050: GO 18852
19052: POP
19053: POP
// if result then
19054: LD_VAR 0 1
19058: IFFALSE 19118
// begin ToLua ( playSibBomb() ) ;
19060: LD_STRING playSibBomb()
19062: PPUSH
19063: CALL_OW 559
// wait ( 0 0$14 ) ;
19067: LD_INT 490
19069: PPUSH
19070: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19074: LD_VAR 0 1
19078: PUSH
19079: LD_INT 1
19081: ARRAY
19082: PPUSH
19083: LD_VAR 0 1
19087: PUSH
19088: LD_INT 2
19090: ARRAY
19091: PPUSH
19092: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19096: LD_VAR 0 1
19100: PUSH
19101: LD_INT 1
19103: ARRAY
19104: PPUSH
19105: LD_VAR 0 1
19109: PUSH
19110: LD_INT 2
19112: ARRAY
19113: PPUSH
19114: CALL_OW 429
// end ; end ;
19118: LD_VAR 0 1
19122: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19123: LD_EXP 66
19127: PUSH
19128: LD_EXP 88
19132: AND
19133: IFFALSE 19145
19135: GO 19137
19137: DISABLE
// YouLost (  ) ;
19138: LD_STRING 
19140: PPUSH
19141: CALL_OW 104
19145: END
// every 0 0$1 trigger StreamModeActive and sFog do
19146: LD_EXP 66
19150: PUSH
19151: LD_EXP 87
19155: AND
19156: IFFALSE 19170
19158: GO 19160
19160: DISABLE
// FogOff ( your_side ) ;
19161: LD_OWVAR 2
19165: PPUSH
19166: CALL_OW 344
19170: END
// every 0 0$1 trigger StreamModeActive and sSun do
19171: LD_EXP 66
19175: PUSH
19176: LD_EXP 89
19180: AND
19181: IFFALSE 19209
19183: GO 19185
19185: DISABLE
// begin solar_recharge_percent := 0 ;
19186: LD_ADDR_OWVAR 79
19190: PUSH
19191: LD_INT 0
19193: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19194: LD_INT 10500
19196: PPUSH
19197: CALL_OW 67
// solar_recharge_percent := 100 ;
19201: LD_ADDR_OWVAR 79
19205: PUSH
19206: LD_INT 100
19208: ST_TO_ADDR
// end ;
19209: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19210: LD_EXP 66
19214: PUSH
19215: LD_EXP 90
19219: AND
19220: IFFALSE 19459
19222: GO 19224
19224: DISABLE
19225: LD_INT 0
19227: PPUSH
19228: PPUSH
19229: PPUSH
// begin tmp := [ ] ;
19230: LD_ADDR_VAR 0 3
19234: PUSH
19235: EMPTY
19236: ST_TO_ADDR
// for i := 1 to 6 do
19237: LD_ADDR_VAR 0 1
19241: PUSH
19242: DOUBLE
19243: LD_INT 1
19245: DEC
19246: ST_TO_ADDR
19247: LD_INT 6
19249: PUSH
19250: FOR_TO
19251: IFFALSE 19356
// begin uc_nation := nation_nature ;
19253: LD_ADDR_OWVAR 21
19257: PUSH
19258: LD_INT 0
19260: ST_TO_ADDR
// uc_side := 0 ;
19261: LD_ADDR_OWVAR 20
19265: PUSH
19266: LD_INT 0
19268: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19269: LD_ADDR_OWVAR 29
19273: PUSH
19274: LD_INT 12
19276: PUSH
19277: LD_INT 12
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: ST_TO_ADDR
// hc_agressivity := 20 ;
19284: LD_ADDR_OWVAR 35
19288: PUSH
19289: LD_INT 20
19291: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19292: LD_ADDR_OWVAR 28
19296: PUSH
19297: LD_INT 17
19299: ST_TO_ADDR
// hc_gallery :=  ;
19300: LD_ADDR_OWVAR 33
19304: PUSH
19305: LD_STRING 
19307: ST_TO_ADDR
// hc_name :=  ;
19308: LD_ADDR_OWVAR 26
19312: PUSH
19313: LD_STRING 
19315: ST_TO_ADDR
// un := CreateHuman ;
19316: LD_ADDR_VAR 0 2
19320: PUSH
19321: CALL_OW 44
19325: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19326: LD_VAR 0 2
19330: PPUSH
19331: LD_INT 1
19333: PPUSH
19334: CALL_OW 51
// tmp := tmp ^ un ;
19338: LD_ADDR_VAR 0 3
19342: PUSH
19343: LD_VAR 0 3
19347: PUSH
19348: LD_VAR 0 2
19352: ADD
19353: ST_TO_ADDR
// end ;
19354: GO 19250
19356: POP
19357: POP
// repeat wait ( 0 0$1 ) ;
19358: LD_INT 35
19360: PPUSH
19361: CALL_OW 67
// for un in tmp do
19365: LD_ADDR_VAR 0 2
19369: PUSH
19370: LD_VAR 0 3
19374: PUSH
19375: FOR_IN
19376: IFFALSE 19450
// begin if IsDead ( un ) then
19378: LD_VAR 0 2
19382: PPUSH
19383: CALL_OW 301
19387: IFFALSE 19407
// begin tmp := tmp diff un ;
19389: LD_ADDR_VAR 0 3
19393: PUSH
19394: LD_VAR 0 3
19398: PUSH
19399: LD_VAR 0 2
19403: DIFF
19404: ST_TO_ADDR
// continue ;
19405: GO 19375
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19407: LD_VAR 0 2
19411: PPUSH
19412: LD_INT 3
19414: PUSH
19415: LD_INT 22
19417: PUSH
19418: LD_INT 0
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PPUSH
19429: CALL_OW 69
19433: PPUSH
19434: LD_VAR 0 2
19438: PPUSH
19439: CALL_OW 74
19443: PPUSH
19444: CALL_OW 115
// end ;
19448: GO 19375
19450: POP
19451: POP
// until not tmp ;
19452: LD_VAR 0 3
19456: NOT
19457: IFFALSE 19358
// end ;
19459: PPOPN 3
19461: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19462: LD_EXP 66
19466: PUSH
19467: LD_EXP 91
19471: AND
19472: IFFALSE 19526
19474: GO 19476
19476: DISABLE
// begin ToLua ( displayTroll(); ) ;
19477: LD_STRING displayTroll();
19479: PPUSH
19480: CALL_OW 559
// wait ( 3 3$00 ) ;
19484: LD_INT 6300
19486: PPUSH
19487: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19491: LD_STRING hideTroll();
19493: PPUSH
19494: CALL_OW 559
// wait ( 1 1$00 ) ;
19498: LD_INT 2100
19500: PPUSH
19501: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19505: LD_STRING displayTroll();
19507: PPUSH
19508: CALL_OW 559
// wait ( 1 1$00 ) ;
19512: LD_INT 2100
19514: PPUSH
19515: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19519: LD_STRING hideTroll();
19521: PPUSH
19522: CALL_OW 559
// end ;
19526: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19527: LD_EXP 66
19531: PUSH
19532: LD_EXP 92
19536: AND
19537: IFFALSE 19600
19539: GO 19541
19541: DISABLE
19542: LD_INT 0
19544: PPUSH
// begin p := 0 ;
19545: LD_ADDR_VAR 0 1
19549: PUSH
19550: LD_INT 0
19552: ST_TO_ADDR
// repeat game_speed := 1 ;
19553: LD_ADDR_OWVAR 65
19557: PUSH
19558: LD_INT 1
19560: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19561: LD_INT 35
19563: PPUSH
19564: CALL_OW 67
// p := p + 1 ;
19568: LD_ADDR_VAR 0 1
19572: PUSH
19573: LD_VAR 0 1
19577: PUSH
19578: LD_INT 1
19580: PLUS
19581: ST_TO_ADDR
// until p >= 60 ;
19582: LD_VAR 0 1
19586: PUSH
19587: LD_INT 60
19589: GREATEREQUAL
19590: IFFALSE 19553
// game_speed := 4 ;
19592: LD_ADDR_OWVAR 65
19596: PUSH
19597: LD_INT 4
19599: ST_TO_ADDR
// end ;
19600: PPOPN 1
19602: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19603: LD_EXP 66
19607: PUSH
19608: LD_EXP 93
19612: AND
19613: IFFALSE 19759
19615: GO 19617
19617: DISABLE
19618: LD_INT 0
19620: PPUSH
19621: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19622: LD_ADDR_VAR 0 1
19626: PUSH
19627: LD_INT 22
19629: PUSH
19630: LD_OWVAR 2
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 2
19641: PUSH
19642: LD_INT 30
19644: PUSH
19645: LD_INT 0
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 30
19654: PUSH
19655: LD_INT 1
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: LIST
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PPUSH
19671: CALL_OW 69
19675: ST_TO_ADDR
// if not depot then
19676: LD_VAR 0 1
19680: NOT
19681: IFFALSE 19685
// exit ;
19683: GO 19759
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19685: LD_ADDR_VAR 0 2
19689: PUSH
19690: LD_VAR 0 1
19694: PUSH
19695: LD_INT 1
19697: PPUSH
19698: LD_VAR 0 1
19702: PPUSH
19703: CALL_OW 12
19707: ARRAY
19708: PPUSH
19709: CALL_OW 274
19713: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19714: LD_VAR 0 2
19718: PPUSH
19719: LD_INT 1
19721: PPUSH
19722: LD_INT 0
19724: PPUSH
19725: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19729: LD_VAR 0 2
19733: PPUSH
19734: LD_INT 2
19736: PPUSH
19737: LD_INT 0
19739: PPUSH
19740: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19744: LD_VAR 0 2
19748: PPUSH
19749: LD_INT 3
19751: PPUSH
19752: LD_INT 0
19754: PPUSH
19755: CALL_OW 277
// end ;
19759: PPOPN 2
19761: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19762: LD_EXP 66
19766: PUSH
19767: LD_EXP 94
19771: AND
19772: IFFALSE 19869
19774: GO 19776
19776: DISABLE
19777: LD_INT 0
19779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19780: LD_ADDR_VAR 0 1
19784: PUSH
19785: LD_INT 22
19787: PUSH
19788: LD_OWVAR 2
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 21
19799: PUSH
19800: LD_INT 1
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 3
19809: PUSH
19810: LD_INT 23
19812: PUSH
19813: LD_INT 0
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: LIST
19828: PPUSH
19829: CALL_OW 69
19833: ST_TO_ADDR
// if not tmp then
19834: LD_VAR 0 1
19838: NOT
19839: IFFALSE 19843
// exit ;
19841: GO 19869
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19843: LD_VAR 0 1
19847: PUSH
19848: LD_INT 1
19850: PPUSH
19851: LD_VAR 0 1
19855: PPUSH
19856: CALL_OW 12
19860: ARRAY
19861: PPUSH
19862: LD_INT 200
19864: PPUSH
19865: CALL_OW 234
// end ;
19869: PPOPN 1
19871: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19872: LD_EXP 66
19876: PUSH
19877: LD_EXP 95
19881: AND
19882: IFFALSE 19961
19884: GO 19886
19886: DISABLE
19887: LD_INT 0
19889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19890: LD_ADDR_VAR 0 1
19894: PUSH
19895: LD_INT 22
19897: PUSH
19898: LD_OWVAR 2
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 21
19909: PUSH
19910: LD_INT 2
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PPUSH
19921: CALL_OW 69
19925: ST_TO_ADDR
// if not tmp then
19926: LD_VAR 0 1
19930: NOT
19931: IFFALSE 19935
// exit ;
19933: GO 19961
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19935: LD_VAR 0 1
19939: PUSH
19940: LD_INT 1
19942: PPUSH
19943: LD_VAR 0 1
19947: PPUSH
19948: CALL_OW 12
19952: ARRAY
19953: PPUSH
19954: LD_INT 60
19956: PPUSH
19957: CALL_OW 234
// end ;
19961: PPOPN 1
19963: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19964: LD_EXP 66
19968: PUSH
19969: LD_EXP 96
19973: AND
19974: IFFALSE 20073
19976: GO 19978
19978: DISABLE
19979: LD_INT 0
19981: PPUSH
19982: PPUSH
// begin enable ;
19983: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19984: LD_ADDR_VAR 0 1
19988: PUSH
19989: LD_INT 22
19991: PUSH
19992: LD_OWVAR 2
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 61
20003: PUSH
20004: EMPTY
20005: LIST
20006: PUSH
20007: LD_INT 33
20009: PUSH
20010: LD_INT 2
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: LIST
20021: PPUSH
20022: CALL_OW 69
20026: ST_TO_ADDR
// if not tmp then
20027: LD_VAR 0 1
20031: NOT
20032: IFFALSE 20036
// exit ;
20034: GO 20073
// for i in tmp do
20036: LD_ADDR_VAR 0 2
20040: PUSH
20041: LD_VAR 0 1
20045: PUSH
20046: FOR_IN
20047: IFFALSE 20071
// if IsControledBy ( i ) then
20049: LD_VAR 0 2
20053: PPUSH
20054: CALL_OW 312
20058: IFFALSE 20069
// ComUnlink ( i ) ;
20060: LD_VAR 0 2
20064: PPUSH
20065: CALL_OW 136
20069: GO 20046
20071: POP
20072: POP
// end ;
20073: PPOPN 2
20075: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20076: LD_EXP 66
20080: PUSH
20081: LD_EXP 97
20085: AND
20086: IFFALSE 20226
20088: GO 20090
20090: DISABLE
20091: LD_INT 0
20093: PPUSH
20094: PPUSH
// begin ToLua ( displayPowell(); ) ;
20095: LD_STRING displayPowell();
20097: PPUSH
20098: CALL_OW 559
// uc_side := 0 ;
20102: LD_ADDR_OWVAR 20
20106: PUSH
20107: LD_INT 0
20109: ST_TO_ADDR
// uc_nation := 2 ;
20110: LD_ADDR_OWVAR 21
20114: PUSH
20115: LD_INT 2
20117: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20118: LD_ADDR_OWVAR 37
20122: PUSH
20123: LD_INT 14
20125: ST_TO_ADDR
// vc_engine := engine_siberite ;
20126: LD_ADDR_OWVAR 39
20130: PUSH
20131: LD_INT 3
20133: ST_TO_ADDR
// vc_control := control_apeman ;
20134: LD_ADDR_OWVAR 38
20138: PUSH
20139: LD_INT 5
20141: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20142: LD_ADDR_OWVAR 40
20146: PUSH
20147: LD_INT 29
20149: ST_TO_ADDR
// un := CreateVehicle ;
20150: LD_ADDR_VAR 0 2
20154: PUSH
20155: CALL_OW 45
20159: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20160: LD_VAR 0 2
20164: PPUSH
20165: LD_INT 1
20167: PPUSH
20168: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20172: LD_INT 35
20174: PPUSH
20175: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20179: LD_VAR 0 2
20183: PPUSH
20184: LD_INT 22
20186: PUSH
20187: LD_OWVAR 2
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PPUSH
20196: CALL_OW 69
20200: PPUSH
20201: LD_VAR 0 2
20205: PPUSH
20206: CALL_OW 74
20210: PPUSH
20211: CALL_OW 115
// until IsDead ( un ) ;
20215: LD_VAR 0 2
20219: PPUSH
20220: CALL_OW 301
20224: IFFALSE 20172
// end ;
20226: PPOPN 2
20228: END
// every 0 0$1 trigger StreamModeActive and sStu do
20229: LD_EXP 66
20233: PUSH
20234: LD_EXP 105
20238: AND
20239: IFFALSE 20255
20241: GO 20243
20243: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20244: LD_STRING displayStucuk();
20246: PPUSH
20247: CALL_OW 559
// ResetFog ;
20251: CALL_OW 335
// end ;
20255: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20256: LD_EXP 66
20260: PUSH
20261: LD_EXP 98
20265: AND
20266: IFFALSE 20407
20268: GO 20270
20270: DISABLE
20271: LD_INT 0
20273: PPUSH
20274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20275: LD_ADDR_VAR 0 2
20279: PUSH
20280: LD_INT 22
20282: PUSH
20283: LD_OWVAR 2
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 21
20294: PUSH
20295: LD_INT 1
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PPUSH
20306: CALL_OW 69
20310: ST_TO_ADDR
// if not tmp then
20311: LD_VAR 0 2
20315: NOT
20316: IFFALSE 20320
// exit ;
20318: GO 20407
// un := tmp [ rand ( 1 , tmp ) ] ;
20320: LD_ADDR_VAR 0 1
20324: PUSH
20325: LD_VAR 0 2
20329: PUSH
20330: LD_INT 1
20332: PPUSH
20333: LD_VAR 0 2
20337: PPUSH
20338: CALL_OW 12
20342: ARRAY
20343: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20344: LD_VAR 0 1
20348: PPUSH
20349: LD_INT 0
20351: PPUSH
20352: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20356: LD_VAR 0 1
20360: PPUSH
20361: LD_OWVAR 3
20365: PUSH
20366: LD_VAR 0 1
20370: DIFF
20371: PPUSH
20372: LD_VAR 0 1
20376: PPUSH
20377: CALL_OW 74
20381: PPUSH
20382: CALL_OW 115
// wait ( 0 0$20 ) ;
20386: LD_INT 700
20388: PPUSH
20389: CALL_OW 67
// SetSide ( un , your_side ) ;
20393: LD_VAR 0 1
20397: PPUSH
20398: LD_OWVAR 2
20402: PPUSH
20403: CALL_OW 235
// end ;
20407: PPOPN 2
20409: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20410: LD_EXP 66
20414: PUSH
20415: LD_EXP 99
20419: AND
20420: IFFALSE 20526
20422: GO 20424
20424: DISABLE
20425: LD_INT 0
20427: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20428: LD_ADDR_VAR 0 1
20432: PUSH
20433: LD_INT 22
20435: PUSH
20436: LD_OWVAR 2
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 2
20447: PUSH
20448: LD_INT 30
20450: PUSH
20451: LD_INT 0
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 30
20460: PUSH
20461: LD_INT 1
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: LIST
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PPUSH
20477: CALL_OW 69
20481: ST_TO_ADDR
// if not depot then
20482: LD_VAR 0 1
20486: NOT
20487: IFFALSE 20491
// exit ;
20489: GO 20526
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20491: LD_VAR 0 1
20495: PUSH
20496: LD_INT 1
20498: ARRAY
20499: PPUSH
20500: CALL_OW 250
20504: PPUSH
20505: LD_VAR 0 1
20509: PUSH
20510: LD_INT 1
20512: ARRAY
20513: PPUSH
20514: CALL_OW 251
20518: PPUSH
20519: LD_INT 70
20521: PPUSH
20522: CALL_OW 495
// end ;
20526: PPOPN 1
20528: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20529: LD_EXP 66
20533: PUSH
20534: LD_EXP 100
20538: AND
20539: IFFALSE 20750
20541: GO 20543
20543: DISABLE
20544: LD_INT 0
20546: PPUSH
20547: PPUSH
20548: PPUSH
20549: PPUSH
20550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20551: LD_ADDR_VAR 0 5
20555: PUSH
20556: LD_INT 22
20558: PUSH
20559: LD_OWVAR 2
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 21
20570: PUSH
20571: LD_INT 1
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PPUSH
20582: CALL_OW 69
20586: ST_TO_ADDR
// if not tmp then
20587: LD_VAR 0 5
20591: NOT
20592: IFFALSE 20596
// exit ;
20594: GO 20750
// for i in tmp do
20596: LD_ADDR_VAR 0 1
20600: PUSH
20601: LD_VAR 0 5
20605: PUSH
20606: FOR_IN
20607: IFFALSE 20748
// begin d := rand ( 0 , 5 ) ;
20609: LD_ADDR_VAR 0 4
20613: PUSH
20614: LD_INT 0
20616: PPUSH
20617: LD_INT 5
20619: PPUSH
20620: CALL_OW 12
20624: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20625: LD_ADDR_VAR 0 2
20629: PUSH
20630: LD_VAR 0 1
20634: PPUSH
20635: CALL_OW 250
20639: PPUSH
20640: LD_VAR 0 4
20644: PPUSH
20645: LD_INT 3
20647: PPUSH
20648: LD_INT 12
20650: PPUSH
20651: CALL_OW 12
20655: PPUSH
20656: CALL_OW 272
20660: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20661: LD_ADDR_VAR 0 3
20665: PUSH
20666: LD_VAR 0 1
20670: PPUSH
20671: CALL_OW 251
20675: PPUSH
20676: LD_VAR 0 4
20680: PPUSH
20681: LD_INT 3
20683: PPUSH
20684: LD_INT 12
20686: PPUSH
20687: CALL_OW 12
20691: PPUSH
20692: CALL_OW 273
20696: ST_TO_ADDR
// if ValidHex ( x , y ) then
20697: LD_VAR 0 2
20701: PPUSH
20702: LD_VAR 0 3
20706: PPUSH
20707: CALL_OW 488
20711: IFFALSE 20746
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20713: LD_VAR 0 1
20717: PPUSH
20718: LD_VAR 0 2
20722: PPUSH
20723: LD_VAR 0 3
20727: PPUSH
20728: LD_INT 3
20730: PPUSH
20731: LD_INT 6
20733: PPUSH
20734: CALL_OW 12
20738: PPUSH
20739: LD_INT 1
20741: PPUSH
20742: CALL_OW 483
// end ;
20746: GO 20606
20748: POP
20749: POP
// end ;
20750: PPOPN 5
20752: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20753: LD_EXP 66
20757: PUSH
20758: LD_EXP 101
20762: AND
20763: IFFALSE 20857
20765: GO 20767
20767: DISABLE
20768: LD_INT 0
20770: PPUSH
20771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20772: LD_ADDR_VAR 0 2
20776: PUSH
20777: LD_INT 22
20779: PUSH
20780: LD_OWVAR 2
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 32
20791: PUSH
20792: LD_INT 1
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 21
20801: PUSH
20802: LD_INT 2
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: LIST
20813: PPUSH
20814: CALL_OW 69
20818: ST_TO_ADDR
// if not tmp then
20819: LD_VAR 0 2
20823: NOT
20824: IFFALSE 20828
// exit ;
20826: GO 20857
// for i in tmp do
20828: LD_ADDR_VAR 0 1
20832: PUSH
20833: LD_VAR 0 2
20837: PUSH
20838: FOR_IN
20839: IFFALSE 20855
// SetFuel ( i , 0 ) ;
20841: LD_VAR 0 1
20845: PPUSH
20846: LD_INT 0
20848: PPUSH
20849: CALL_OW 240
20853: GO 20838
20855: POP
20856: POP
// end ;
20857: PPOPN 2
20859: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20860: LD_EXP 66
20864: PUSH
20865: LD_EXP 102
20869: AND
20870: IFFALSE 20936
20872: GO 20874
20874: DISABLE
20875: LD_INT 0
20877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20878: LD_ADDR_VAR 0 1
20882: PUSH
20883: LD_INT 22
20885: PUSH
20886: LD_OWVAR 2
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 30
20897: PUSH
20898: LD_INT 29
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PPUSH
20909: CALL_OW 69
20913: ST_TO_ADDR
// if not tmp then
20914: LD_VAR 0 1
20918: NOT
20919: IFFALSE 20923
// exit ;
20921: GO 20936
// DestroyUnit ( tmp [ 1 ] ) ;
20923: LD_VAR 0 1
20927: PUSH
20928: LD_INT 1
20930: ARRAY
20931: PPUSH
20932: CALL_OW 65
// end ;
20936: PPOPN 1
20938: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20939: LD_EXP 66
20943: PUSH
20944: LD_EXP 104
20948: AND
20949: IFFALSE 21078
20951: GO 20953
20953: DISABLE
20954: LD_INT 0
20956: PPUSH
// begin uc_side := 0 ;
20957: LD_ADDR_OWVAR 20
20961: PUSH
20962: LD_INT 0
20964: ST_TO_ADDR
// uc_nation := nation_arabian ;
20965: LD_ADDR_OWVAR 21
20969: PUSH
20970: LD_INT 2
20972: ST_TO_ADDR
// hc_gallery :=  ;
20973: LD_ADDR_OWVAR 33
20977: PUSH
20978: LD_STRING 
20980: ST_TO_ADDR
// hc_name :=  ;
20981: LD_ADDR_OWVAR 26
20985: PUSH
20986: LD_STRING 
20988: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20989: LD_INT 1
20991: PPUSH
20992: LD_INT 11
20994: PPUSH
20995: LD_INT 10
20997: PPUSH
20998: CALL_OW 380
// un := CreateHuman ;
21002: LD_ADDR_VAR 0 1
21006: PUSH
21007: CALL_OW 44
21011: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21012: LD_VAR 0 1
21016: PPUSH
21017: LD_INT 1
21019: PPUSH
21020: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21024: LD_INT 35
21026: PPUSH
21027: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21031: LD_VAR 0 1
21035: PPUSH
21036: LD_INT 22
21038: PUSH
21039: LD_OWVAR 2
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PPUSH
21048: CALL_OW 69
21052: PPUSH
21053: LD_VAR 0 1
21057: PPUSH
21058: CALL_OW 74
21062: PPUSH
21063: CALL_OW 115
// until IsDead ( un ) ;
21067: LD_VAR 0 1
21071: PPUSH
21072: CALL_OW 301
21076: IFFALSE 21024
// end ;
21078: PPOPN 1
21080: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21081: LD_EXP 66
21085: PUSH
21086: LD_EXP 106
21090: AND
21091: IFFALSE 21103
21093: GO 21095
21095: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21096: LD_STRING earthquake(getX(game), 0, 32)
21098: PPUSH
21099: CALL_OW 559
21103: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21104: LD_EXP 66
21108: PUSH
21109: LD_EXP 107
21113: AND
21114: IFFALSE 21205
21116: GO 21118
21118: DISABLE
21119: LD_INT 0
21121: PPUSH
// begin enable ;
21122: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21123: LD_ADDR_VAR 0 1
21127: PUSH
21128: LD_INT 22
21130: PUSH
21131: LD_OWVAR 2
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 21
21142: PUSH
21143: LD_INT 2
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 33
21152: PUSH
21153: LD_INT 3
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: LIST
21164: PPUSH
21165: CALL_OW 69
21169: ST_TO_ADDR
// if not tmp then
21170: LD_VAR 0 1
21174: NOT
21175: IFFALSE 21179
// exit ;
21177: GO 21205
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21179: LD_VAR 0 1
21183: PUSH
21184: LD_INT 1
21186: PPUSH
21187: LD_VAR 0 1
21191: PPUSH
21192: CALL_OW 12
21196: ARRAY
21197: PPUSH
21198: LD_INT 1
21200: PPUSH
21201: CALL_OW 234
// end ;
21205: PPOPN 1
21207: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21208: LD_EXP 66
21212: PUSH
21213: LD_EXP 108
21217: AND
21218: IFFALSE 21359
21220: GO 21222
21222: DISABLE
21223: LD_INT 0
21225: PPUSH
21226: PPUSH
21227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21228: LD_ADDR_VAR 0 3
21232: PUSH
21233: LD_INT 22
21235: PUSH
21236: LD_OWVAR 2
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: LD_INT 25
21247: PUSH
21248: LD_INT 1
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PPUSH
21259: CALL_OW 69
21263: ST_TO_ADDR
// if not tmp then
21264: LD_VAR 0 3
21268: NOT
21269: IFFALSE 21273
// exit ;
21271: GO 21359
// un := tmp [ rand ( 1 , tmp ) ] ;
21273: LD_ADDR_VAR 0 2
21277: PUSH
21278: LD_VAR 0 3
21282: PUSH
21283: LD_INT 1
21285: PPUSH
21286: LD_VAR 0 3
21290: PPUSH
21291: CALL_OW 12
21295: ARRAY
21296: ST_TO_ADDR
// if Crawls ( un ) then
21297: LD_VAR 0 2
21301: PPUSH
21302: CALL_OW 318
21306: IFFALSE 21317
// ComWalk ( un ) ;
21308: LD_VAR 0 2
21312: PPUSH
21313: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21317: LD_VAR 0 2
21321: PPUSH
21322: LD_INT 9
21324: PPUSH
21325: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21329: LD_INT 28
21331: PPUSH
21332: LD_OWVAR 2
21336: PPUSH
21337: LD_INT 2
21339: PPUSH
21340: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21344: LD_INT 29
21346: PPUSH
21347: LD_OWVAR 2
21351: PPUSH
21352: LD_INT 2
21354: PPUSH
21355: CALL_OW 322
// end ;
21359: PPOPN 3
21361: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21362: LD_EXP 66
21366: PUSH
21367: LD_EXP 109
21371: AND
21372: IFFALSE 21483
21374: GO 21376
21376: DISABLE
21377: LD_INT 0
21379: PPUSH
21380: PPUSH
21381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21382: LD_ADDR_VAR 0 3
21386: PUSH
21387: LD_INT 22
21389: PUSH
21390: LD_OWVAR 2
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 25
21401: PUSH
21402: LD_INT 1
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PPUSH
21413: CALL_OW 69
21417: ST_TO_ADDR
// if not tmp then
21418: LD_VAR 0 3
21422: NOT
21423: IFFALSE 21427
// exit ;
21425: GO 21483
// un := tmp [ rand ( 1 , tmp ) ] ;
21427: LD_ADDR_VAR 0 2
21431: PUSH
21432: LD_VAR 0 3
21436: PUSH
21437: LD_INT 1
21439: PPUSH
21440: LD_VAR 0 3
21444: PPUSH
21445: CALL_OW 12
21449: ARRAY
21450: ST_TO_ADDR
// if Crawls ( un ) then
21451: LD_VAR 0 2
21455: PPUSH
21456: CALL_OW 318
21460: IFFALSE 21471
// ComWalk ( un ) ;
21462: LD_VAR 0 2
21466: PPUSH
21467: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21471: LD_VAR 0 2
21475: PPUSH
21476: LD_INT 8
21478: PPUSH
21479: CALL_OW 336
// end ;
21483: PPOPN 3
21485: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21486: LD_EXP 66
21490: PUSH
21491: LD_EXP 110
21495: AND
21496: IFFALSE 21640
21498: GO 21500
21500: DISABLE
21501: LD_INT 0
21503: PPUSH
21504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21505: LD_ADDR_VAR 0 2
21509: PUSH
21510: LD_INT 22
21512: PUSH
21513: LD_OWVAR 2
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 21
21524: PUSH
21525: LD_INT 2
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 2
21534: PUSH
21535: LD_INT 34
21537: PUSH
21538: LD_INT 12
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 34
21547: PUSH
21548: LD_INT 51
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 34
21557: PUSH
21558: LD_INT 32
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: LIST
21575: PPUSH
21576: CALL_OW 69
21580: ST_TO_ADDR
// if not tmp then
21581: LD_VAR 0 2
21585: NOT
21586: IFFALSE 21590
// exit ;
21588: GO 21640
// for i in tmp do
21590: LD_ADDR_VAR 0 1
21594: PUSH
21595: LD_VAR 0 2
21599: PUSH
21600: FOR_IN
21601: IFFALSE 21638
// if GetCargo ( i , mat_artifact ) = 0 then
21603: LD_VAR 0 1
21607: PPUSH
21608: LD_INT 4
21610: PPUSH
21611: CALL_OW 289
21615: PUSH
21616: LD_INT 0
21618: EQUAL
21619: IFFALSE 21636
// SetCargo ( i , mat_siberit , 100 ) ;
21621: LD_VAR 0 1
21625: PPUSH
21626: LD_INT 3
21628: PPUSH
21629: LD_INT 100
21631: PPUSH
21632: CALL_OW 290
21636: GO 21600
21638: POP
21639: POP
// end ;
21640: PPOPN 2
21642: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21643: LD_EXP 66
21647: PUSH
21648: LD_EXP 111
21652: AND
21653: IFFALSE 21836
21655: GO 21657
21657: DISABLE
21658: LD_INT 0
21660: PPUSH
21661: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21662: LD_ADDR_VAR 0 2
21666: PUSH
21667: LD_INT 22
21669: PUSH
21670: LD_OWVAR 2
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PPUSH
21679: CALL_OW 69
21683: ST_TO_ADDR
// if not tmp then
21684: LD_VAR 0 2
21688: NOT
21689: IFFALSE 21693
// exit ;
21691: GO 21836
// for i := 1 to 2 do
21693: LD_ADDR_VAR 0 1
21697: PUSH
21698: DOUBLE
21699: LD_INT 1
21701: DEC
21702: ST_TO_ADDR
21703: LD_INT 2
21705: PUSH
21706: FOR_TO
21707: IFFALSE 21834
// begin uc_side := your_side ;
21709: LD_ADDR_OWVAR 20
21713: PUSH
21714: LD_OWVAR 2
21718: ST_TO_ADDR
// uc_nation := nation_american ;
21719: LD_ADDR_OWVAR 21
21723: PUSH
21724: LD_INT 1
21726: ST_TO_ADDR
// vc_chassis := us_morphling ;
21727: LD_ADDR_OWVAR 37
21731: PUSH
21732: LD_INT 5
21734: ST_TO_ADDR
// vc_engine := engine_siberite ;
21735: LD_ADDR_OWVAR 39
21739: PUSH
21740: LD_INT 3
21742: ST_TO_ADDR
// vc_control := control_computer ;
21743: LD_ADDR_OWVAR 38
21747: PUSH
21748: LD_INT 3
21750: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21751: LD_ADDR_OWVAR 40
21755: PUSH
21756: LD_INT 10
21758: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21759: LD_VAR 0 2
21763: PUSH
21764: LD_INT 1
21766: ARRAY
21767: PPUSH
21768: CALL_OW 310
21772: NOT
21773: IFFALSE 21820
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21775: CALL_OW 45
21779: PPUSH
21780: LD_VAR 0 2
21784: PUSH
21785: LD_INT 1
21787: ARRAY
21788: PPUSH
21789: CALL_OW 250
21793: PPUSH
21794: LD_VAR 0 2
21798: PUSH
21799: LD_INT 1
21801: ARRAY
21802: PPUSH
21803: CALL_OW 251
21807: PPUSH
21808: LD_INT 12
21810: PPUSH
21811: LD_INT 1
21813: PPUSH
21814: CALL_OW 50
21818: GO 21832
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21820: CALL_OW 45
21824: PPUSH
21825: LD_INT 1
21827: PPUSH
21828: CALL_OW 51
// end ;
21832: GO 21706
21834: POP
21835: POP
// end ;
21836: PPOPN 2
21838: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21839: LD_EXP 66
21843: PUSH
21844: LD_EXP 112
21848: AND
21849: IFFALSE 22071
21851: GO 21853
21853: DISABLE
21854: LD_INT 0
21856: PPUSH
21857: PPUSH
21858: PPUSH
21859: PPUSH
21860: PPUSH
21861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21862: LD_ADDR_VAR 0 6
21866: PUSH
21867: LD_INT 22
21869: PUSH
21870: LD_OWVAR 2
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 21
21881: PUSH
21882: LD_INT 1
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 3
21891: PUSH
21892: LD_INT 23
21894: PUSH
21895: LD_INT 0
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: LIST
21910: PPUSH
21911: CALL_OW 69
21915: ST_TO_ADDR
// if not tmp then
21916: LD_VAR 0 6
21920: NOT
21921: IFFALSE 21925
// exit ;
21923: GO 22071
// s1 := rand ( 1 , 4 ) ;
21925: LD_ADDR_VAR 0 2
21929: PUSH
21930: LD_INT 1
21932: PPUSH
21933: LD_INT 4
21935: PPUSH
21936: CALL_OW 12
21940: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21941: LD_ADDR_VAR 0 4
21945: PUSH
21946: LD_VAR 0 6
21950: PUSH
21951: LD_INT 1
21953: ARRAY
21954: PPUSH
21955: LD_VAR 0 2
21959: PPUSH
21960: CALL_OW 259
21964: ST_TO_ADDR
// if s1 = 1 then
21965: LD_VAR 0 2
21969: PUSH
21970: LD_INT 1
21972: EQUAL
21973: IFFALSE 21993
// s2 := rand ( 2 , 4 ) else
21975: LD_ADDR_VAR 0 3
21979: PUSH
21980: LD_INT 2
21982: PPUSH
21983: LD_INT 4
21985: PPUSH
21986: CALL_OW 12
21990: ST_TO_ADDR
21991: GO 22001
// s2 := 1 ;
21993: LD_ADDR_VAR 0 3
21997: PUSH
21998: LD_INT 1
22000: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22001: LD_ADDR_VAR 0 5
22005: PUSH
22006: LD_VAR 0 6
22010: PUSH
22011: LD_INT 1
22013: ARRAY
22014: PPUSH
22015: LD_VAR 0 3
22019: PPUSH
22020: CALL_OW 259
22024: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22025: LD_VAR 0 6
22029: PUSH
22030: LD_INT 1
22032: ARRAY
22033: PPUSH
22034: LD_VAR 0 2
22038: PPUSH
22039: LD_VAR 0 5
22043: PPUSH
22044: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22048: LD_VAR 0 6
22052: PUSH
22053: LD_INT 1
22055: ARRAY
22056: PPUSH
22057: LD_VAR 0 3
22061: PPUSH
22062: LD_VAR 0 4
22066: PPUSH
22067: CALL_OW 237
// end ;
22071: PPOPN 6
22073: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22074: LD_EXP 66
22078: PUSH
22079: LD_EXP 113
22083: AND
22084: IFFALSE 22163
22086: GO 22088
22088: DISABLE
22089: LD_INT 0
22091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22092: LD_ADDR_VAR 0 1
22096: PUSH
22097: LD_INT 22
22099: PUSH
22100: LD_OWVAR 2
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 30
22111: PUSH
22112: LD_INT 3
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PPUSH
22123: CALL_OW 69
22127: ST_TO_ADDR
// if not tmp then
22128: LD_VAR 0 1
22132: NOT
22133: IFFALSE 22137
// exit ;
22135: GO 22163
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22137: LD_VAR 0 1
22141: PUSH
22142: LD_INT 1
22144: PPUSH
22145: LD_VAR 0 1
22149: PPUSH
22150: CALL_OW 12
22154: ARRAY
22155: PPUSH
22156: LD_INT 1
22158: PPUSH
22159: CALL_OW 234
// end ;
22163: PPOPN 1
22165: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22166: LD_EXP 66
22170: PUSH
22171: LD_EXP 114
22175: AND
22176: IFFALSE 22288
22178: GO 22180
22180: DISABLE
22181: LD_INT 0
22183: PPUSH
22184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22185: LD_ADDR_VAR 0 2
22189: PUSH
22190: LD_INT 22
22192: PUSH
22193: LD_OWVAR 2
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 2
22204: PUSH
22205: LD_INT 30
22207: PUSH
22208: LD_INT 27
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: LD_INT 30
22217: PUSH
22218: LD_INT 26
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 30
22227: PUSH
22228: LD_INT 28
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PPUSH
22245: CALL_OW 69
22249: ST_TO_ADDR
// if not tmp then
22250: LD_VAR 0 2
22254: NOT
22255: IFFALSE 22259
// exit ;
22257: GO 22288
// for i in tmp do
22259: LD_ADDR_VAR 0 1
22263: PUSH
22264: LD_VAR 0 2
22268: PUSH
22269: FOR_IN
22270: IFFALSE 22286
// SetLives ( i , 1 ) ;
22272: LD_VAR 0 1
22276: PPUSH
22277: LD_INT 1
22279: PPUSH
22280: CALL_OW 234
22284: GO 22269
22286: POP
22287: POP
// end ;
22288: PPOPN 2
22290: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22291: LD_EXP 66
22295: PUSH
22296: LD_EXP 115
22300: AND
22301: IFFALSE 22588
22303: GO 22305
22305: DISABLE
22306: LD_INT 0
22308: PPUSH
22309: PPUSH
22310: PPUSH
// begin i := rand ( 1 , 7 ) ;
22311: LD_ADDR_VAR 0 1
22315: PUSH
22316: LD_INT 1
22318: PPUSH
22319: LD_INT 7
22321: PPUSH
22322: CALL_OW 12
22326: ST_TO_ADDR
// case i of 1 :
22327: LD_VAR 0 1
22331: PUSH
22332: LD_INT 1
22334: DOUBLE
22335: EQUAL
22336: IFTRUE 22340
22338: GO 22350
22340: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22341: LD_STRING earthquake(getX(game), 0, 32)
22343: PPUSH
22344: CALL_OW 559
22348: GO 22588
22350: LD_INT 2
22352: DOUBLE
22353: EQUAL
22354: IFTRUE 22358
22356: GO 22372
22358: POP
// begin ToLua ( displayStucuk(); ) ;
22359: LD_STRING displayStucuk();
22361: PPUSH
22362: CALL_OW 559
// ResetFog ;
22366: CALL_OW 335
// end ; 3 :
22370: GO 22588
22372: LD_INT 3
22374: DOUBLE
22375: EQUAL
22376: IFTRUE 22380
22378: GO 22484
22380: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22381: LD_ADDR_VAR 0 2
22385: PUSH
22386: LD_INT 22
22388: PUSH
22389: LD_OWVAR 2
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PUSH
22398: LD_INT 25
22400: PUSH
22401: LD_INT 1
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PPUSH
22412: CALL_OW 69
22416: ST_TO_ADDR
// if not tmp then
22417: LD_VAR 0 2
22421: NOT
22422: IFFALSE 22426
// exit ;
22424: GO 22588
// un := tmp [ rand ( 1 , tmp ) ] ;
22426: LD_ADDR_VAR 0 3
22430: PUSH
22431: LD_VAR 0 2
22435: PUSH
22436: LD_INT 1
22438: PPUSH
22439: LD_VAR 0 2
22443: PPUSH
22444: CALL_OW 12
22448: ARRAY
22449: ST_TO_ADDR
// if Crawls ( un ) then
22450: LD_VAR 0 3
22454: PPUSH
22455: CALL_OW 318
22459: IFFALSE 22470
// ComWalk ( un ) ;
22461: LD_VAR 0 3
22465: PPUSH
22466: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22470: LD_VAR 0 3
22474: PPUSH
22475: LD_INT 8
22477: PPUSH
22478: CALL_OW 336
// end ; 4 :
22482: GO 22588
22484: LD_INT 4
22486: DOUBLE
22487: EQUAL
22488: IFTRUE 22492
22490: GO 22566
22492: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22493: LD_ADDR_VAR 0 2
22497: PUSH
22498: LD_INT 22
22500: PUSH
22501: LD_OWVAR 2
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 30
22512: PUSH
22513: LD_INT 29
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PPUSH
22524: CALL_OW 69
22528: ST_TO_ADDR
// if not tmp then
22529: LD_VAR 0 2
22533: NOT
22534: IFFALSE 22538
// exit ;
22536: GO 22588
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22538: LD_VAR 0 2
22542: PUSH
22543: LD_INT 1
22545: ARRAY
22546: PPUSH
22547: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22551: LD_VAR 0 2
22555: PUSH
22556: LD_INT 1
22558: ARRAY
22559: PPUSH
22560: CALL_OW 65
// end ; 5 .. 7 :
22564: GO 22588
22566: LD_INT 5
22568: DOUBLE
22569: GREATEREQUAL
22570: IFFALSE 22578
22572: LD_INT 7
22574: DOUBLE
22575: LESSEQUAL
22576: IFTRUE 22580
22578: GO 22587
22580: POP
// StreamSibBomb ; end ;
22581: CALL 18825 0 0
22585: GO 22588
22587: POP
// end ;
22588: PPOPN 3
22590: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22591: LD_EXP 66
22595: PUSH
22596: LD_EXP 116
22600: AND
22601: IFFALSE 22757
22603: GO 22605
22605: DISABLE
22606: LD_INT 0
22608: PPUSH
22609: PPUSH
22610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22611: LD_ADDR_VAR 0 2
22615: PUSH
22616: LD_INT 81
22618: PUSH
22619: LD_OWVAR 2
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 2
22630: PUSH
22631: LD_INT 21
22633: PUSH
22634: LD_INT 1
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 21
22643: PUSH
22644: LD_INT 2
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: LIST
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PPUSH
22660: CALL_OW 69
22664: ST_TO_ADDR
// if not tmp then
22665: LD_VAR 0 2
22669: NOT
22670: IFFALSE 22674
// exit ;
22672: GO 22757
// p := 0 ;
22674: LD_ADDR_VAR 0 3
22678: PUSH
22679: LD_INT 0
22681: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22682: LD_INT 35
22684: PPUSH
22685: CALL_OW 67
// p := p + 1 ;
22689: LD_ADDR_VAR 0 3
22693: PUSH
22694: LD_VAR 0 3
22698: PUSH
22699: LD_INT 1
22701: PLUS
22702: ST_TO_ADDR
// for i in tmp do
22703: LD_ADDR_VAR 0 1
22707: PUSH
22708: LD_VAR 0 2
22712: PUSH
22713: FOR_IN
22714: IFFALSE 22745
// if GetLives ( i ) < 1000 then
22716: LD_VAR 0 1
22720: PPUSH
22721: CALL_OW 256
22725: PUSH
22726: LD_INT 1000
22728: LESS
22729: IFFALSE 22743
// SetLives ( i , 1000 ) ;
22731: LD_VAR 0 1
22735: PPUSH
22736: LD_INT 1000
22738: PPUSH
22739: CALL_OW 234
22743: GO 22713
22745: POP
22746: POP
// until p > 20 ;
22747: LD_VAR 0 3
22751: PUSH
22752: LD_INT 20
22754: GREATER
22755: IFFALSE 22682
// end ;
22757: PPOPN 3
22759: END
// every 0 0$1 trigger StreamModeActive and sTime do
22760: LD_EXP 66
22764: PUSH
22765: LD_EXP 117
22769: AND
22770: IFFALSE 22805
22772: GO 22774
22774: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22775: LD_INT 28
22777: PPUSH
22778: LD_OWVAR 2
22782: PPUSH
22783: LD_INT 2
22785: PPUSH
22786: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22790: LD_INT 30
22792: PPUSH
22793: LD_OWVAR 2
22797: PPUSH
22798: LD_INT 2
22800: PPUSH
22801: CALL_OW 322
// end ;
22805: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22806: LD_EXP 66
22810: PUSH
22811: LD_EXP 118
22815: AND
22816: IFFALSE 22937
22818: GO 22820
22820: DISABLE
22821: LD_INT 0
22823: PPUSH
22824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22825: LD_ADDR_VAR 0 2
22829: PUSH
22830: LD_INT 22
22832: PUSH
22833: LD_OWVAR 2
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PUSH
22842: LD_INT 21
22844: PUSH
22845: LD_INT 1
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 3
22854: PUSH
22855: LD_INT 23
22857: PUSH
22858: LD_INT 0
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: LIST
22873: PPUSH
22874: CALL_OW 69
22878: ST_TO_ADDR
// if not tmp then
22879: LD_VAR 0 2
22883: NOT
22884: IFFALSE 22888
// exit ;
22886: GO 22937
// for i in tmp do
22888: LD_ADDR_VAR 0 1
22892: PUSH
22893: LD_VAR 0 2
22897: PUSH
22898: FOR_IN
22899: IFFALSE 22935
// begin if Crawls ( i ) then
22901: LD_VAR 0 1
22905: PPUSH
22906: CALL_OW 318
22910: IFFALSE 22921
// ComWalk ( i ) ;
22912: LD_VAR 0 1
22916: PPUSH
22917: CALL_OW 138
// SetClass ( i , 2 ) ;
22921: LD_VAR 0 1
22925: PPUSH
22926: LD_INT 2
22928: PPUSH
22929: CALL_OW 336
// end ;
22933: GO 22898
22935: POP
22936: POP
// end ;
22937: PPOPN 2
22939: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22940: LD_EXP 66
22944: PUSH
22945: LD_EXP 119
22949: AND
22950: IFFALSE 23238
22952: GO 22954
22954: DISABLE
22955: LD_INT 0
22957: PPUSH
22958: PPUSH
22959: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22960: LD_OWVAR 2
22964: PPUSH
22965: LD_INT 9
22967: PPUSH
22968: LD_INT 1
22970: PPUSH
22971: LD_INT 1
22973: PPUSH
22974: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22978: LD_INT 9
22980: PPUSH
22981: LD_OWVAR 2
22985: PPUSH
22986: CALL_OW 343
// uc_side := 9 ;
22990: LD_ADDR_OWVAR 20
22994: PUSH
22995: LD_INT 9
22997: ST_TO_ADDR
// uc_nation := 2 ;
22998: LD_ADDR_OWVAR 21
23002: PUSH
23003: LD_INT 2
23005: ST_TO_ADDR
// hc_name := Dark Warrior ;
23006: LD_ADDR_OWVAR 26
23010: PUSH
23011: LD_STRING Dark Warrior
23013: ST_TO_ADDR
// hc_gallery :=  ;
23014: LD_ADDR_OWVAR 33
23018: PUSH
23019: LD_STRING 
23021: ST_TO_ADDR
// hc_noskilllimit := true ;
23022: LD_ADDR_OWVAR 76
23026: PUSH
23027: LD_INT 1
23029: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23030: LD_ADDR_OWVAR 31
23034: PUSH
23035: LD_INT 30
23037: PUSH
23038: LD_INT 30
23040: PUSH
23041: LD_INT 30
23043: PUSH
23044: LD_INT 30
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: ST_TO_ADDR
// un := CreateHuman ;
23053: LD_ADDR_VAR 0 3
23057: PUSH
23058: CALL_OW 44
23062: ST_TO_ADDR
// hc_noskilllimit := false ;
23063: LD_ADDR_OWVAR 76
23067: PUSH
23068: LD_INT 0
23070: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23071: LD_VAR 0 3
23075: PPUSH
23076: LD_INT 1
23078: PPUSH
23079: CALL_OW 51
// ToLua ( playRanger() ) ;
23083: LD_STRING playRanger()
23085: PPUSH
23086: CALL_OW 559
// p := 0 ;
23090: LD_ADDR_VAR 0 2
23094: PUSH
23095: LD_INT 0
23097: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23098: LD_INT 35
23100: PPUSH
23101: CALL_OW 67
// p := p + 1 ;
23105: LD_ADDR_VAR 0 2
23109: PUSH
23110: LD_VAR 0 2
23114: PUSH
23115: LD_INT 1
23117: PLUS
23118: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23119: LD_VAR 0 3
23123: PPUSH
23124: CALL_OW 256
23128: PUSH
23129: LD_INT 1000
23131: LESS
23132: IFFALSE 23146
// SetLives ( un , 1000 ) ;
23134: LD_VAR 0 3
23138: PPUSH
23139: LD_INT 1000
23141: PPUSH
23142: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23146: LD_VAR 0 3
23150: PPUSH
23151: LD_INT 81
23153: PUSH
23154: LD_OWVAR 2
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 91
23165: PUSH
23166: LD_VAR 0 3
23170: PUSH
23171: LD_INT 30
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: LIST
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PPUSH
23183: CALL_OW 69
23187: PPUSH
23188: LD_VAR 0 3
23192: PPUSH
23193: CALL_OW 74
23197: PPUSH
23198: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23202: LD_VAR 0 2
23206: PUSH
23207: LD_INT 80
23209: GREATER
23210: PUSH
23211: LD_VAR 0 3
23215: PPUSH
23216: CALL_OW 301
23220: OR
23221: IFFALSE 23098
// if un then
23223: LD_VAR 0 3
23227: IFFALSE 23238
// RemoveUnit ( un ) ;
23229: LD_VAR 0 3
23233: PPUSH
23234: CALL_OW 64
// end ;
23238: PPOPN 3
23240: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23241: LD_EXP 120
23245: IFFALSE 23361
23247: GO 23249
23249: DISABLE
23250: LD_INT 0
23252: PPUSH
23253: PPUSH
23254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23255: LD_ADDR_VAR 0 2
23259: PUSH
23260: LD_INT 81
23262: PUSH
23263: LD_OWVAR 2
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 21
23274: PUSH
23275: LD_INT 1
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PPUSH
23286: CALL_OW 69
23290: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23291: LD_STRING playComputer()
23293: PPUSH
23294: CALL_OW 559
// if not tmp then
23298: LD_VAR 0 2
23302: NOT
23303: IFFALSE 23307
// exit ;
23305: GO 23361
// for i in tmp do
23307: LD_ADDR_VAR 0 1
23311: PUSH
23312: LD_VAR 0 2
23316: PUSH
23317: FOR_IN
23318: IFFALSE 23359
// for j := 1 to 4 do
23320: LD_ADDR_VAR 0 3
23324: PUSH
23325: DOUBLE
23326: LD_INT 1
23328: DEC
23329: ST_TO_ADDR
23330: LD_INT 4
23332: PUSH
23333: FOR_TO
23334: IFFALSE 23355
// SetSkill ( i , j , 10 ) ;
23336: LD_VAR 0 1
23340: PPUSH
23341: LD_VAR 0 3
23345: PPUSH
23346: LD_INT 10
23348: PPUSH
23349: CALL_OW 237
23353: GO 23333
23355: POP
23356: POP
23357: GO 23317
23359: POP
23360: POP
// end ;
23361: PPOPN 3
23363: END
// every 0 0$1 trigger s30 do var i , tmp ;
23364: LD_EXP 121
23368: IFFALSE 23437
23370: GO 23372
23372: DISABLE
23373: LD_INT 0
23375: PPUSH
23376: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23377: LD_ADDR_VAR 0 2
23381: PUSH
23382: LD_INT 22
23384: PUSH
23385: LD_OWVAR 2
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: PPUSH
23394: CALL_OW 69
23398: ST_TO_ADDR
// if not tmp then
23399: LD_VAR 0 2
23403: NOT
23404: IFFALSE 23408
// exit ;
23406: GO 23437
// for i in tmp do
23408: LD_ADDR_VAR 0 1
23412: PUSH
23413: LD_VAR 0 2
23417: PUSH
23418: FOR_IN
23419: IFFALSE 23435
// SetLives ( i , 300 ) ;
23421: LD_VAR 0 1
23425: PPUSH
23426: LD_INT 300
23428: PPUSH
23429: CALL_OW 234
23433: GO 23418
23435: POP
23436: POP
// end ;
23437: PPOPN 2
23439: END
// every 0 0$1 trigger s60 do var i , tmp ;
23440: LD_EXP 122
23444: IFFALSE 23513
23446: GO 23448
23448: DISABLE
23449: LD_INT 0
23451: PPUSH
23452: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23453: LD_ADDR_VAR 0 2
23457: PUSH
23458: LD_INT 22
23460: PUSH
23461: LD_OWVAR 2
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PPUSH
23470: CALL_OW 69
23474: ST_TO_ADDR
// if not tmp then
23475: LD_VAR 0 2
23479: NOT
23480: IFFALSE 23484
// exit ;
23482: GO 23513
// for i in tmp do
23484: LD_ADDR_VAR 0 1
23488: PUSH
23489: LD_VAR 0 2
23493: PUSH
23494: FOR_IN
23495: IFFALSE 23511
// SetLives ( i , 600 ) ;
23497: LD_VAR 0 1
23501: PPUSH
23502: LD_INT 600
23504: PPUSH
23505: CALL_OW 234
23509: GO 23494
23511: POP
23512: POP
// end ;
23513: PPOPN 2
23515: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23516: LD_INT 0
23518: PPUSH
// case cmd of 301 :
23519: LD_VAR 0 1
23523: PUSH
23524: LD_INT 301
23526: DOUBLE
23527: EQUAL
23528: IFTRUE 23532
23530: GO 23564
23532: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23533: LD_VAR 0 6
23537: PPUSH
23538: LD_VAR 0 7
23542: PPUSH
23543: LD_VAR 0 8
23547: PPUSH
23548: LD_VAR 0 4
23552: PPUSH
23553: LD_VAR 0 5
23557: PPUSH
23558: CALL 24765 0 5
23562: GO 23685
23564: LD_INT 302
23566: DOUBLE
23567: EQUAL
23568: IFTRUE 23572
23570: GO 23609
23572: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23573: LD_VAR 0 6
23577: PPUSH
23578: LD_VAR 0 7
23582: PPUSH
23583: LD_VAR 0 8
23587: PPUSH
23588: LD_VAR 0 9
23592: PPUSH
23593: LD_VAR 0 4
23597: PPUSH
23598: LD_VAR 0 5
23602: PPUSH
23603: CALL 24856 0 6
23607: GO 23685
23609: LD_INT 303
23611: DOUBLE
23612: EQUAL
23613: IFTRUE 23617
23615: GO 23654
23617: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23618: LD_VAR 0 6
23622: PPUSH
23623: LD_VAR 0 7
23627: PPUSH
23628: LD_VAR 0 8
23632: PPUSH
23633: LD_VAR 0 9
23637: PPUSH
23638: LD_VAR 0 4
23642: PPUSH
23643: LD_VAR 0 5
23647: PPUSH
23648: CALL 23690 0 6
23652: GO 23685
23654: LD_INT 304
23656: DOUBLE
23657: EQUAL
23658: IFTRUE 23662
23660: GO 23684
23662: POP
// hHackTeleport ( unit , x , y ) ; end ;
23663: LD_VAR 0 2
23667: PPUSH
23668: LD_VAR 0 4
23672: PPUSH
23673: LD_VAR 0 5
23677: PPUSH
23678: CALL 25449 0 3
23682: GO 23685
23684: POP
// end ;
23685: LD_VAR 0 12
23689: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23690: LD_INT 0
23692: PPUSH
23693: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23694: LD_VAR 0 1
23698: PUSH
23699: LD_INT 1
23701: LESS
23702: PUSH
23703: LD_VAR 0 1
23707: PUSH
23708: LD_INT 3
23710: GREATER
23711: OR
23712: PUSH
23713: LD_VAR 0 5
23717: PPUSH
23718: LD_VAR 0 6
23722: PPUSH
23723: CALL_OW 428
23727: OR
23728: IFFALSE 23732
// exit ;
23730: GO 24452
// uc_side := your_side ;
23732: LD_ADDR_OWVAR 20
23736: PUSH
23737: LD_OWVAR 2
23741: ST_TO_ADDR
// uc_nation := nation ;
23742: LD_ADDR_OWVAR 21
23746: PUSH
23747: LD_VAR 0 1
23751: ST_TO_ADDR
// bc_level = 1 ;
23752: LD_ADDR_OWVAR 43
23756: PUSH
23757: LD_INT 1
23759: ST_TO_ADDR
// case btype of 1 :
23760: LD_VAR 0 2
23764: PUSH
23765: LD_INT 1
23767: DOUBLE
23768: EQUAL
23769: IFTRUE 23773
23771: GO 23784
23773: POP
// bc_type := b_depot ; 2 :
23774: LD_ADDR_OWVAR 42
23778: PUSH
23779: LD_INT 0
23781: ST_TO_ADDR
23782: GO 24396
23784: LD_INT 2
23786: DOUBLE
23787: EQUAL
23788: IFTRUE 23792
23790: GO 23803
23792: POP
// bc_type := b_warehouse ; 3 :
23793: LD_ADDR_OWVAR 42
23797: PUSH
23798: LD_INT 1
23800: ST_TO_ADDR
23801: GO 24396
23803: LD_INT 3
23805: DOUBLE
23806: EQUAL
23807: IFTRUE 23811
23809: GO 23822
23811: POP
// bc_type := b_lab ; 4 .. 9 :
23812: LD_ADDR_OWVAR 42
23816: PUSH
23817: LD_INT 6
23819: ST_TO_ADDR
23820: GO 24396
23822: LD_INT 4
23824: DOUBLE
23825: GREATEREQUAL
23826: IFFALSE 23834
23828: LD_INT 9
23830: DOUBLE
23831: LESSEQUAL
23832: IFTRUE 23836
23834: GO 23888
23836: POP
// begin bc_type := b_lab_half ;
23837: LD_ADDR_OWVAR 42
23841: PUSH
23842: LD_INT 7
23844: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23845: LD_ADDR_OWVAR 44
23849: PUSH
23850: LD_INT 10
23852: PUSH
23853: LD_INT 11
23855: PUSH
23856: LD_INT 12
23858: PUSH
23859: LD_INT 15
23861: PUSH
23862: LD_INT 14
23864: PUSH
23865: LD_INT 13
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: PUSH
23876: LD_VAR 0 2
23880: PUSH
23881: LD_INT 3
23883: MINUS
23884: ARRAY
23885: ST_TO_ADDR
// end ; 10 .. 13 :
23886: GO 24396
23888: LD_INT 10
23890: DOUBLE
23891: GREATEREQUAL
23892: IFFALSE 23900
23894: LD_INT 13
23896: DOUBLE
23897: LESSEQUAL
23898: IFTRUE 23902
23900: GO 23979
23902: POP
// begin bc_type := b_lab_full ;
23903: LD_ADDR_OWVAR 42
23907: PUSH
23908: LD_INT 8
23910: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23911: LD_ADDR_OWVAR 44
23915: PUSH
23916: LD_INT 10
23918: PUSH
23919: LD_INT 12
23921: PUSH
23922: LD_INT 14
23924: PUSH
23925: LD_INT 13
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: PUSH
23934: LD_VAR 0 2
23938: PUSH
23939: LD_INT 9
23941: MINUS
23942: ARRAY
23943: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23944: LD_ADDR_OWVAR 45
23948: PUSH
23949: LD_INT 11
23951: PUSH
23952: LD_INT 15
23954: PUSH
23955: LD_INT 12
23957: PUSH
23958: LD_INT 15
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: PUSH
23967: LD_VAR 0 2
23971: PUSH
23972: LD_INT 9
23974: MINUS
23975: ARRAY
23976: ST_TO_ADDR
// end ; 14 :
23977: GO 24396
23979: LD_INT 14
23981: DOUBLE
23982: EQUAL
23983: IFTRUE 23987
23985: GO 23998
23987: POP
// bc_type := b_workshop ; 15 :
23988: LD_ADDR_OWVAR 42
23992: PUSH
23993: LD_INT 2
23995: ST_TO_ADDR
23996: GO 24396
23998: LD_INT 15
24000: DOUBLE
24001: EQUAL
24002: IFTRUE 24006
24004: GO 24017
24006: POP
// bc_type := b_factory ; 16 :
24007: LD_ADDR_OWVAR 42
24011: PUSH
24012: LD_INT 3
24014: ST_TO_ADDR
24015: GO 24396
24017: LD_INT 16
24019: DOUBLE
24020: EQUAL
24021: IFTRUE 24025
24023: GO 24036
24025: POP
// bc_type := b_ext_gun ; 17 :
24026: LD_ADDR_OWVAR 42
24030: PUSH
24031: LD_INT 17
24033: ST_TO_ADDR
24034: GO 24396
24036: LD_INT 17
24038: DOUBLE
24039: EQUAL
24040: IFTRUE 24044
24042: GO 24072
24044: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24045: LD_ADDR_OWVAR 42
24049: PUSH
24050: LD_INT 19
24052: PUSH
24053: LD_INT 23
24055: PUSH
24056: LD_INT 19
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: LIST
24063: PUSH
24064: LD_VAR 0 1
24068: ARRAY
24069: ST_TO_ADDR
24070: GO 24396
24072: LD_INT 18
24074: DOUBLE
24075: EQUAL
24076: IFTRUE 24080
24078: GO 24091
24080: POP
// bc_type := b_ext_radar ; 19 :
24081: LD_ADDR_OWVAR 42
24085: PUSH
24086: LD_INT 20
24088: ST_TO_ADDR
24089: GO 24396
24091: LD_INT 19
24093: DOUBLE
24094: EQUAL
24095: IFTRUE 24099
24097: GO 24110
24099: POP
// bc_type := b_ext_radio ; 20 :
24100: LD_ADDR_OWVAR 42
24104: PUSH
24105: LD_INT 22
24107: ST_TO_ADDR
24108: GO 24396
24110: LD_INT 20
24112: DOUBLE
24113: EQUAL
24114: IFTRUE 24118
24116: GO 24129
24118: POP
// bc_type := b_ext_siberium ; 21 :
24119: LD_ADDR_OWVAR 42
24123: PUSH
24124: LD_INT 21
24126: ST_TO_ADDR
24127: GO 24396
24129: LD_INT 21
24131: DOUBLE
24132: EQUAL
24133: IFTRUE 24137
24135: GO 24148
24137: POP
// bc_type := b_ext_computer ; 22 :
24138: LD_ADDR_OWVAR 42
24142: PUSH
24143: LD_INT 24
24145: ST_TO_ADDR
24146: GO 24396
24148: LD_INT 22
24150: DOUBLE
24151: EQUAL
24152: IFTRUE 24156
24154: GO 24167
24156: POP
// bc_type := b_ext_track ; 23 :
24157: LD_ADDR_OWVAR 42
24161: PUSH
24162: LD_INT 16
24164: ST_TO_ADDR
24165: GO 24396
24167: LD_INT 23
24169: DOUBLE
24170: EQUAL
24171: IFTRUE 24175
24173: GO 24186
24175: POP
// bc_type := b_ext_laser ; 24 :
24176: LD_ADDR_OWVAR 42
24180: PUSH
24181: LD_INT 25
24183: ST_TO_ADDR
24184: GO 24396
24186: LD_INT 24
24188: DOUBLE
24189: EQUAL
24190: IFTRUE 24194
24192: GO 24205
24194: POP
// bc_type := b_control_tower ; 25 :
24195: LD_ADDR_OWVAR 42
24199: PUSH
24200: LD_INT 36
24202: ST_TO_ADDR
24203: GO 24396
24205: LD_INT 25
24207: DOUBLE
24208: EQUAL
24209: IFTRUE 24213
24211: GO 24224
24213: POP
// bc_type := b_breastwork ; 26 :
24214: LD_ADDR_OWVAR 42
24218: PUSH
24219: LD_INT 31
24221: ST_TO_ADDR
24222: GO 24396
24224: LD_INT 26
24226: DOUBLE
24227: EQUAL
24228: IFTRUE 24232
24230: GO 24243
24232: POP
// bc_type := b_bunker ; 27 :
24233: LD_ADDR_OWVAR 42
24237: PUSH
24238: LD_INT 32
24240: ST_TO_ADDR
24241: GO 24396
24243: LD_INT 27
24245: DOUBLE
24246: EQUAL
24247: IFTRUE 24251
24249: GO 24262
24251: POP
// bc_type := b_turret ; 28 :
24252: LD_ADDR_OWVAR 42
24256: PUSH
24257: LD_INT 33
24259: ST_TO_ADDR
24260: GO 24396
24262: LD_INT 28
24264: DOUBLE
24265: EQUAL
24266: IFTRUE 24270
24268: GO 24281
24270: POP
// bc_type := b_armoury ; 29 :
24271: LD_ADDR_OWVAR 42
24275: PUSH
24276: LD_INT 4
24278: ST_TO_ADDR
24279: GO 24396
24281: LD_INT 29
24283: DOUBLE
24284: EQUAL
24285: IFTRUE 24289
24287: GO 24300
24289: POP
// bc_type := b_barracks ; 30 :
24290: LD_ADDR_OWVAR 42
24294: PUSH
24295: LD_INT 5
24297: ST_TO_ADDR
24298: GO 24396
24300: LD_INT 30
24302: DOUBLE
24303: EQUAL
24304: IFTRUE 24308
24306: GO 24319
24308: POP
// bc_type := b_solar_power ; 31 :
24309: LD_ADDR_OWVAR 42
24313: PUSH
24314: LD_INT 27
24316: ST_TO_ADDR
24317: GO 24396
24319: LD_INT 31
24321: DOUBLE
24322: EQUAL
24323: IFTRUE 24327
24325: GO 24338
24327: POP
// bc_type := b_oil_power ; 32 :
24328: LD_ADDR_OWVAR 42
24332: PUSH
24333: LD_INT 26
24335: ST_TO_ADDR
24336: GO 24396
24338: LD_INT 32
24340: DOUBLE
24341: EQUAL
24342: IFTRUE 24346
24344: GO 24357
24346: POP
// bc_type := b_siberite_power ; 33 :
24347: LD_ADDR_OWVAR 42
24351: PUSH
24352: LD_INT 28
24354: ST_TO_ADDR
24355: GO 24396
24357: LD_INT 33
24359: DOUBLE
24360: EQUAL
24361: IFTRUE 24365
24363: GO 24376
24365: POP
// bc_type := b_oil_mine ; 34 :
24366: LD_ADDR_OWVAR 42
24370: PUSH
24371: LD_INT 29
24373: ST_TO_ADDR
24374: GO 24396
24376: LD_INT 34
24378: DOUBLE
24379: EQUAL
24380: IFTRUE 24384
24382: GO 24395
24384: POP
// bc_type := b_siberite_mine ; end ;
24385: LD_ADDR_OWVAR 42
24389: PUSH
24390: LD_INT 30
24392: ST_TO_ADDR
24393: GO 24396
24395: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24396: LD_ADDR_VAR 0 8
24400: PUSH
24401: LD_VAR 0 5
24405: PPUSH
24406: LD_VAR 0 6
24410: PPUSH
24411: LD_VAR 0 3
24415: PPUSH
24416: CALL_OW 47
24420: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24421: LD_OWVAR 42
24425: PUSH
24426: LD_INT 32
24428: PUSH
24429: LD_INT 33
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: IN
24436: IFFALSE 24452
// PlaceWeaponTurret ( b , weapon ) ;
24438: LD_VAR 0 8
24442: PPUSH
24443: LD_VAR 0 4
24447: PPUSH
24448: CALL_OW 431
// end ;
24452: LD_VAR 0 7
24456: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24457: LD_INT 0
24459: PPUSH
24460: PPUSH
24461: PPUSH
24462: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24463: LD_ADDR_VAR 0 4
24467: PUSH
24468: LD_INT 22
24470: PUSH
24471: LD_OWVAR 2
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 2
24482: PUSH
24483: LD_INT 30
24485: PUSH
24486: LD_INT 0
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 30
24495: PUSH
24496: LD_INT 1
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: LIST
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PPUSH
24512: CALL_OW 69
24516: ST_TO_ADDR
// if not tmp then
24517: LD_VAR 0 4
24521: NOT
24522: IFFALSE 24526
// exit ;
24524: GO 24585
// for i in tmp do
24526: LD_ADDR_VAR 0 2
24530: PUSH
24531: LD_VAR 0 4
24535: PUSH
24536: FOR_IN
24537: IFFALSE 24583
// for j = 1 to 3 do
24539: LD_ADDR_VAR 0 3
24543: PUSH
24544: DOUBLE
24545: LD_INT 1
24547: DEC
24548: ST_TO_ADDR
24549: LD_INT 3
24551: PUSH
24552: FOR_TO
24553: IFFALSE 24579
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24555: LD_VAR 0 2
24559: PPUSH
24560: CALL_OW 274
24564: PPUSH
24565: LD_VAR 0 3
24569: PPUSH
24570: LD_INT 99999
24572: PPUSH
24573: CALL_OW 277
24577: GO 24552
24579: POP
24580: POP
24581: GO 24536
24583: POP
24584: POP
// end ;
24585: LD_VAR 0 1
24589: RET
// export function hHackSetLevel10 ; var i , j ; begin
24590: LD_INT 0
24592: PPUSH
24593: PPUSH
24594: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24595: LD_ADDR_VAR 0 2
24599: PUSH
24600: LD_INT 21
24602: PUSH
24603: LD_INT 1
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PPUSH
24610: CALL_OW 69
24614: PUSH
24615: FOR_IN
24616: IFFALSE 24668
// if IsSelected ( i ) then
24618: LD_VAR 0 2
24622: PPUSH
24623: CALL_OW 306
24627: IFFALSE 24666
// begin for j := 1 to 4 do
24629: LD_ADDR_VAR 0 3
24633: PUSH
24634: DOUBLE
24635: LD_INT 1
24637: DEC
24638: ST_TO_ADDR
24639: LD_INT 4
24641: PUSH
24642: FOR_TO
24643: IFFALSE 24664
// SetSkill ( i , j , 10 ) ;
24645: LD_VAR 0 2
24649: PPUSH
24650: LD_VAR 0 3
24654: PPUSH
24655: LD_INT 10
24657: PPUSH
24658: CALL_OW 237
24662: GO 24642
24664: POP
24665: POP
// end ;
24666: GO 24615
24668: POP
24669: POP
// end ;
24670: LD_VAR 0 1
24674: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24675: LD_INT 0
24677: PPUSH
24678: PPUSH
24679: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24680: LD_ADDR_VAR 0 2
24684: PUSH
24685: LD_INT 22
24687: PUSH
24688: LD_OWVAR 2
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 21
24699: PUSH
24700: LD_INT 1
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PPUSH
24711: CALL_OW 69
24715: PUSH
24716: FOR_IN
24717: IFFALSE 24758
// begin for j := 1 to 4 do
24719: LD_ADDR_VAR 0 3
24723: PUSH
24724: DOUBLE
24725: LD_INT 1
24727: DEC
24728: ST_TO_ADDR
24729: LD_INT 4
24731: PUSH
24732: FOR_TO
24733: IFFALSE 24754
// SetSkill ( i , j , 10 ) ;
24735: LD_VAR 0 2
24739: PPUSH
24740: LD_VAR 0 3
24744: PPUSH
24745: LD_INT 10
24747: PPUSH
24748: CALL_OW 237
24752: GO 24732
24754: POP
24755: POP
// end ;
24756: GO 24716
24758: POP
24759: POP
// end ;
24760: LD_VAR 0 1
24764: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24765: LD_INT 0
24767: PPUSH
// uc_side := your_side ;
24768: LD_ADDR_OWVAR 20
24772: PUSH
24773: LD_OWVAR 2
24777: ST_TO_ADDR
// uc_nation := nation ;
24778: LD_ADDR_OWVAR 21
24782: PUSH
24783: LD_VAR 0 1
24787: ST_TO_ADDR
// InitHc ;
24788: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24792: LD_INT 0
24794: PPUSH
24795: LD_VAR 0 2
24799: PPUSH
24800: LD_VAR 0 3
24804: PPUSH
24805: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24809: LD_VAR 0 4
24813: PPUSH
24814: LD_VAR 0 5
24818: PPUSH
24819: CALL_OW 428
24823: PUSH
24824: LD_INT 0
24826: EQUAL
24827: IFFALSE 24851
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24829: CALL_OW 44
24833: PPUSH
24834: LD_VAR 0 4
24838: PPUSH
24839: LD_VAR 0 5
24843: PPUSH
24844: LD_INT 1
24846: PPUSH
24847: CALL_OW 48
// end ;
24851: LD_VAR 0 6
24855: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24856: LD_INT 0
24858: PPUSH
24859: PPUSH
// uc_side := your_side ;
24860: LD_ADDR_OWVAR 20
24864: PUSH
24865: LD_OWVAR 2
24869: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24870: LD_VAR 0 1
24874: PUSH
24875: LD_INT 1
24877: PUSH
24878: LD_INT 2
24880: PUSH
24881: LD_INT 3
24883: PUSH
24884: LD_INT 4
24886: PUSH
24887: LD_INT 5
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: IN
24897: IFFALSE 24909
// uc_nation := nation_american else
24899: LD_ADDR_OWVAR 21
24903: PUSH
24904: LD_INT 1
24906: ST_TO_ADDR
24907: GO 24952
// if chassis in [ 11 , 12 , 13 , 14 ] then
24909: LD_VAR 0 1
24913: PUSH
24914: LD_INT 11
24916: PUSH
24917: LD_INT 12
24919: PUSH
24920: LD_INT 13
24922: PUSH
24923: LD_INT 14
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: IN
24932: IFFALSE 24944
// uc_nation := nation_arabian else
24934: LD_ADDR_OWVAR 21
24938: PUSH
24939: LD_INT 2
24941: ST_TO_ADDR
24942: GO 24952
// uc_nation := nation_russian ;
24944: LD_ADDR_OWVAR 21
24948: PUSH
24949: LD_INT 3
24951: ST_TO_ADDR
// vc_chassis := chassis ;
24952: LD_ADDR_OWVAR 37
24956: PUSH
24957: LD_VAR 0 1
24961: ST_TO_ADDR
// vc_engine := engine ;
24962: LD_ADDR_OWVAR 39
24966: PUSH
24967: LD_VAR 0 2
24971: ST_TO_ADDR
// vc_control := control ;
24972: LD_ADDR_OWVAR 38
24976: PUSH
24977: LD_VAR 0 3
24981: ST_TO_ADDR
// vc_weapon := weapon ;
24982: LD_ADDR_OWVAR 40
24986: PUSH
24987: LD_VAR 0 4
24991: ST_TO_ADDR
// un := CreateVehicle ;
24992: LD_ADDR_VAR 0 8
24996: PUSH
24997: CALL_OW 45
25001: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25002: LD_VAR 0 8
25006: PPUSH
25007: LD_INT 0
25009: PPUSH
25010: LD_INT 5
25012: PPUSH
25013: CALL_OW 12
25017: PPUSH
25018: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25022: LD_VAR 0 8
25026: PPUSH
25027: LD_VAR 0 5
25031: PPUSH
25032: LD_VAR 0 6
25036: PPUSH
25037: LD_INT 1
25039: PPUSH
25040: CALL_OW 48
// end ;
25044: LD_VAR 0 7
25048: RET
// export hInvincible ; every 1 do
25049: GO 25051
25051: DISABLE
// hInvincible := [ ] ;
25052: LD_ADDR_EXP 123
25056: PUSH
25057: EMPTY
25058: ST_TO_ADDR
25059: END
// every 10 do var i ;
25060: GO 25062
25062: DISABLE
25063: LD_INT 0
25065: PPUSH
// begin enable ;
25066: ENABLE
// if not hInvincible then
25067: LD_EXP 123
25071: NOT
25072: IFFALSE 25076
// exit ;
25074: GO 25120
// for i in hInvincible do
25076: LD_ADDR_VAR 0 1
25080: PUSH
25081: LD_EXP 123
25085: PUSH
25086: FOR_IN
25087: IFFALSE 25118
// if GetLives ( i ) < 1000 then
25089: LD_VAR 0 1
25093: PPUSH
25094: CALL_OW 256
25098: PUSH
25099: LD_INT 1000
25101: LESS
25102: IFFALSE 25116
// SetLives ( i , 1000 ) ;
25104: LD_VAR 0 1
25108: PPUSH
25109: LD_INT 1000
25111: PPUSH
25112: CALL_OW 234
25116: GO 25086
25118: POP
25119: POP
// end ;
25120: PPOPN 1
25122: END
// export function hHackInvincible ; var i ; begin
25123: LD_INT 0
25125: PPUSH
25126: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25127: LD_ADDR_VAR 0 2
25131: PUSH
25132: LD_INT 2
25134: PUSH
25135: LD_INT 21
25137: PUSH
25138: LD_INT 1
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 21
25147: PUSH
25148: LD_INT 2
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: LIST
25159: PPUSH
25160: CALL_OW 69
25164: PUSH
25165: FOR_IN
25166: IFFALSE 25227
// if IsSelected ( i ) then
25168: LD_VAR 0 2
25172: PPUSH
25173: CALL_OW 306
25177: IFFALSE 25225
// begin if i in hInvincible then
25179: LD_VAR 0 2
25183: PUSH
25184: LD_EXP 123
25188: IN
25189: IFFALSE 25209
// hInvincible := hInvincible diff i else
25191: LD_ADDR_EXP 123
25195: PUSH
25196: LD_EXP 123
25200: PUSH
25201: LD_VAR 0 2
25205: DIFF
25206: ST_TO_ADDR
25207: GO 25225
// hInvincible := hInvincible union i ;
25209: LD_ADDR_EXP 123
25213: PUSH
25214: LD_EXP 123
25218: PUSH
25219: LD_VAR 0 2
25223: UNION
25224: ST_TO_ADDR
// end ;
25225: GO 25165
25227: POP
25228: POP
// end ;
25229: LD_VAR 0 1
25233: RET
// export function hHackInvisible ; var i , j ; begin
25234: LD_INT 0
25236: PPUSH
25237: PPUSH
25238: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25239: LD_ADDR_VAR 0 2
25243: PUSH
25244: LD_INT 21
25246: PUSH
25247: LD_INT 1
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PPUSH
25254: CALL_OW 69
25258: PUSH
25259: FOR_IN
25260: IFFALSE 25284
// if IsSelected ( i ) then
25262: LD_VAR 0 2
25266: PPUSH
25267: CALL_OW 306
25271: IFFALSE 25282
// ComForceInvisible ( i ) ;
25273: LD_VAR 0 2
25277: PPUSH
25278: CALL_OW 496
25282: GO 25259
25284: POP
25285: POP
// end ;
25286: LD_VAR 0 1
25290: RET
// export function hHackChangeYourSide ; begin
25291: LD_INT 0
25293: PPUSH
// if your_side = 8 then
25294: LD_OWVAR 2
25298: PUSH
25299: LD_INT 8
25301: EQUAL
25302: IFFALSE 25314
// your_side := 0 else
25304: LD_ADDR_OWVAR 2
25308: PUSH
25309: LD_INT 0
25311: ST_TO_ADDR
25312: GO 25328
// your_side := your_side + 1 ;
25314: LD_ADDR_OWVAR 2
25318: PUSH
25319: LD_OWVAR 2
25323: PUSH
25324: LD_INT 1
25326: PLUS
25327: ST_TO_ADDR
// end ;
25328: LD_VAR 0 1
25332: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25333: LD_INT 0
25335: PPUSH
25336: PPUSH
25337: PPUSH
// for i in all_units do
25338: LD_ADDR_VAR 0 2
25342: PUSH
25343: LD_OWVAR 3
25347: PUSH
25348: FOR_IN
25349: IFFALSE 25427
// if IsSelected ( i ) then
25351: LD_VAR 0 2
25355: PPUSH
25356: CALL_OW 306
25360: IFFALSE 25425
// begin j := GetSide ( i ) ;
25362: LD_ADDR_VAR 0 3
25366: PUSH
25367: LD_VAR 0 2
25371: PPUSH
25372: CALL_OW 255
25376: ST_TO_ADDR
// if j = 8 then
25377: LD_VAR 0 3
25381: PUSH
25382: LD_INT 8
25384: EQUAL
25385: IFFALSE 25397
// j := 0 else
25387: LD_ADDR_VAR 0 3
25391: PUSH
25392: LD_INT 0
25394: ST_TO_ADDR
25395: GO 25411
// j := j + 1 ;
25397: LD_ADDR_VAR 0 3
25401: PUSH
25402: LD_VAR 0 3
25406: PUSH
25407: LD_INT 1
25409: PLUS
25410: ST_TO_ADDR
// SetSide ( i , j ) ;
25411: LD_VAR 0 2
25415: PPUSH
25416: LD_VAR 0 3
25420: PPUSH
25421: CALL_OW 235
// end ;
25425: GO 25348
25427: POP
25428: POP
// end ;
25429: LD_VAR 0 1
25433: RET
// export function hHackFog ; begin
25434: LD_INT 0
25436: PPUSH
// FogOff ( true ) ;
25437: LD_INT 1
25439: PPUSH
25440: CALL_OW 344
// end ;
25444: LD_VAR 0 1
25448: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25449: LD_INT 0
25451: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25452: LD_VAR 0 1
25456: PPUSH
25457: LD_VAR 0 2
25461: PPUSH
25462: LD_VAR 0 3
25466: PPUSH
25467: LD_INT 1
25469: PPUSH
25470: LD_INT 1
25472: PPUSH
25473: CALL_OW 483
// CenterOnXY ( x , y ) ;
25477: LD_VAR 0 2
25481: PPUSH
25482: LD_VAR 0 3
25486: PPUSH
25487: CALL_OW 84
// end ; end_of_file
25491: LD_VAR 0 4
25495: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25496: LD_INT 0
25498: PPUSH
25499: PPUSH
25500: PPUSH
25501: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25502: LD_VAR 0 1
25506: PPUSH
25507: CALL_OW 264
25511: PUSH
25512: LD_EXP 50
25516: EQUAL
25517: IFFALSE 25589
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25519: LD_INT 68
25521: PPUSH
25522: LD_VAR 0 1
25526: PPUSH
25527: CALL_OW 255
25531: PPUSH
25532: CALL_OW 321
25536: PUSH
25537: LD_INT 2
25539: EQUAL
25540: IFFALSE 25552
// eff := 70 else
25542: LD_ADDR_VAR 0 4
25546: PUSH
25547: LD_INT 70
25549: ST_TO_ADDR
25550: GO 25560
// eff := 30 ;
25552: LD_ADDR_VAR 0 4
25556: PUSH
25557: LD_INT 30
25559: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25560: LD_VAR 0 1
25564: PPUSH
25565: CALL_OW 250
25569: PPUSH
25570: LD_VAR 0 1
25574: PPUSH
25575: CALL_OW 251
25579: PPUSH
25580: LD_VAR 0 4
25584: PPUSH
25585: CALL_OW 495
// end ; end ;
25589: LD_VAR 0 2
25593: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25594: LD_INT 0
25596: PPUSH
// end ;
25597: LD_VAR 0 4
25601: RET
// export function SOS_Command ( cmd ) ; begin
25602: LD_INT 0
25604: PPUSH
// end ;
25605: LD_VAR 0 2
25609: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25610: LD_INT 0
25612: PPUSH
// end ;
25613: LD_VAR 0 6
25617: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25618: LD_INT 0
25620: PPUSH
25621: PPUSH
// if not vehicle or not factory then
25622: LD_VAR 0 1
25626: NOT
25627: PUSH
25628: LD_VAR 0 2
25632: NOT
25633: OR
25634: IFFALSE 25638
// exit ;
25636: GO 25869
// if factoryWaypoints >= factory then
25638: LD_EXP 124
25642: PUSH
25643: LD_VAR 0 2
25647: GREATEREQUAL
25648: IFFALSE 25869
// if factoryWaypoints [ factory ] then
25650: LD_EXP 124
25654: PUSH
25655: LD_VAR 0 2
25659: ARRAY
25660: IFFALSE 25869
// begin if GetControl ( vehicle ) = control_manual then
25662: LD_VAR 0 1
25666: PPUSH
25667: CALL_OW 263
25671: PUSH
25672: LD_INT 1
25674: EQUAL
25675: IFFALSE 25756
// begin driver := IsDrivenBy ( vehicle ) ;
25677: LD_ADDR_VAR 0 4
25681: PUSH
25682: LD_VAR 0 1
25686: PPUSH
25687: CALL_OW 311
25691: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25692: LD_VAR 0 4
25696: PPUSH
25697: LD_EXP 124
25701: PUSH
25702: LD_VAR 0 2
25706: ARRAY
25707: PUSH
25708: LD_INT 3
25710: ARRAY
25711: PPUSH
25712: LD_EXP 124
25716: PUSH
25717: LD_VAR 0 2
25721: ARRAY
25722: PUSH
25723: LD_INT 4
25725: ARRAY
25726: PPUSH
25727: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25731: LD_VAR 0 4
25735: PPUSH
25736: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25740: LD_VAR 0 4
25744: PPUSH
25745: LD_VAR 0 2
25749: PPUSH
25750: CALL_OW 180
// end else
25754: GO 25869
// if GetControl ( vehicle ) = control_remote then
25756: LD_VAR 0 1
25760: PPUSH
25761: CALL_OW 263
25765: PUSH
25766: LD_INT 2
25768: EQUAL
25769: IFFALSE 25830
// begin wait ( 0 0$2 ) ;
25771: LD_INT 70
25773: PPUSH
25774: CALL_OW 67
// if Connect ( vehicle ) then
25778: LD_VAR 0 1
25782: PPUSH
25783: CALL 38246 0 1
25787: IFFALSE 25828
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25789: LD_VAR 0 1
25793: PPUSH
25794: LD_EXP 124
25798: PUSH
25799: LD_VAR 0 2
25803: ARRAY
25804: PUSH
25805: LD_INT 3
25807: ARRAY
25808: PPUSH
25809: LD_EXP 124
25813: PUSH
25814: LD_VAR 0 2
25818: ARRAY
25819: PUSH
25820: LD_INT 4
25822: ARRAY
25823: PPUSH
25824: CALL_OW 171
// end else
25828: GO 25869
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25830: LD_VAR 0 1
25834: PPUSH
25835: LD_EXP 124
25839: PUSH
25840: LD_VAR 0 2
25844: ARRAY
25845: PUSH
25846: LD_INT 3
25848: ARRAY
25849: PPUSH
25850: LD_EXP 124
25854: PUSH
25855: LD_VAR 0 2
25859: ARRAY
25860: PUSH
25861: LD_INT 4
25863: ARRAY
25864: PPUSH
25865: CALL_OW 171
// end ; end ;
25869: LD_VAR 0 3
25873: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25874: LD_INT 0
25876: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25877: LD_VAR 0 1
25881: PUSH
25882: LD_INT 250
25884: EQUAL
25885: PUSH
25886: LD_VAR 0 2
25890: PPUSH
25891: CALL_OW 264
25895: PUSH
25896: LD_EXP 53
25900: EQUAL
25901: AND
25902: IFFALSE 25923
// MinerPlaceMine ( unit , x , y ) ;
25904: LD_VAR 0 2
25908: PPUSH
25909: LD_VAR 0 4
25913: PPUSH
25914: LD_VAR 0 5
25918: PPUSH
25919: CALL 28651 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25923: LD_VAR 0 1
25927: PUSH
25928: LD_INT 251
25930: EQUAL
25931: PUSH
25932: LD_VAR 0 2
25936: PPUSH
25937: CALL_OW 264
25941: PUSH
25942: LD_EXP 53
25946: EQUAL
25947: AND
25948: IFFALSE 25969
// MinerDetonateMine ( unit , x , y ) ;
25950: LD_VAR 0 2
25954: PPUSH
25955: LD_VAR 0 4
25959: PPUSH
25960: LD_VAR 0 5
25964: PPUSH
25965: CALL 28928 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25969: LD_VAR 0 1
25973: PUSH
25974: LD_INT 252
25976: EQUAL
25977: PUSH
25978: LD_VAR 0 2
25982: PPUSH
25983: CALL_OW 264
25987: PUSH
25988: LD_EXP 53
25992: EQUAL
25993: AND
25994: IFFALSE 26015
// MinerCreateMinefield ( unit , x , y ) ;
25996: LD_VAR 0 2
26000: PPUSH
26001: LD_VAR 0 4
26005: PPUSH
26006: LD_VAR 0 5
26010: PPUSH
26011: CALL 29345 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26015: LD_VAR 0 1
26019: PUSH
26020: LD_INT 253
26022: EQUAL
26023: PUSH
26024: LD_VAR 0 2
26028: PPUSH
26029: CALL_OW 257
26033: PUSH
26034: LD_INT 5
26036: EQUAL
26037: AND
26038: IFFALSE 26059
// ComBinocular ( unit , x , y ) ;
26040: LD_VAR 0 2
26044: PPUSH
26045: LD_VAR 0 4
26049: PPUSH
26050: LD_VAR 0 5
26054: PPUSH
26055: CALL 29716 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26059: LD_VAR 0 1
26063: PUSH
26064: LD_INT 254
26066: EQUAL
26067: PUSH
26068: LD_VAR 0 2
26072: PPUSH
26073: CALL_OW 264
26077: PUSH
26078: LD_EXP 48
26082: EQUAL
26083: AND
26084: PUSH
26085: LD_VAR 0 3
26089: PPUSH
26090: CALL_OW 263
26094: PUSH
26095: LD_INT 3
26097: EQUAL
26098: AND
26099: IFFALSE 26115
// HackDestroyVehicle ( unit , selectedUnit ) ;
26101: LD_VAR 0 2
26105: PPUSH
26106: LD_VAR 0 3
26110: PPUSH
26111: CALL 28011 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26115: LD_VAR 0 1
26119: PUSH
26120: LD_INT 255
26122: EQUAL
26123: PUSH
26124: LD_VAR 0 2
26128: PPUSH
26129: CALL_OW 264
26133: PUSH
26134: LD_INT 14
26136: PUSH
26137: LD_INT 53
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: IN
26144: AND
26145: PUSH
26146: LD_VAR 0 4
26150: PPUSH
26151: LD_VAR 0 5
26155: PPUSH
26156: CALL_OW 488
26160: AND
26161: IFFALSE 26185
// CutTreeXYR ( unit , x , y , 12 ) ;
26163: LD_VAR 0 2
26167: PPUSH
26168: LD_VAR 0 4
26172: PPUSH
26173: LD_VAR 0 5
26177: PPUSH
26178: LD_INT 12
26180: PPUSH
26181: CALL 26577 0 4
// if cmd = 256 then
26185: LD_VAR 0 1
26189: PUSH
26190: LD_INT 256
26192: EQUAL
26193: IFFALSE 26214
// SetFactoryWaypoint ( unit , x , y ) ;
26195: LD_VAR 0 2
26199: PPUSH
26200: LD_VAR 0 4
26204: PPUSH
26205: LD_VAR 0 5
26209: PPUSH
26210: CALL 26219 0 3
// end ;
26214: LD_VAR 0 6
26218: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26219: LD_INT 0
26221: PPUSH
26222: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26223: LD_VAR 0 1
26227: NOT
26228: PUSH
26229: LD_VAR 0 2
26233: PPUSH
26234: LD_VAR 0 3
26238: PPUSH
26239: CALL_OW 488
26243: NOT
26244: OR
26245: PUSH
26246: LD_VAR 0 1
26250: PPUSH
26251: CALL_OW 266
26255: PUSH
26256: LD_INT 3
26258: NONEQUAL
26259: PUSH
26260: LD_VAR 0 1
26264: PPUSH
26265: CALL_OW 247
26269: PUSH
26270: LD_INT 1
26272: EQUAL
26273: NOT
26274: AND
26275: OR
26276: IFFALSE 26280
// exit ;
26278: GO 26429
// if GetType ( factory ) = unit_human then
26280: LD_VAR 0 1
26284: PPUSH
26285: CALL_OW 247
26289: PUSH
26290: LD_INT 1
26292: EQUAL
26293: IFFALSE 26310
// factory := IsInUnit ( factory ) ;
26295: LD_ADDR_VAR 0 1
26299: PUSH
26300: LD_VAR 0 1
26304: PPUSH
26305: CALL_OW 310
26309: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26310: LD_VAR 0 1
26314: PPUSH
26315: CALL_OW 266
26319: PUSH
26320: LD_INT 3
26322: NONEQUAL
26323: IFFALSE 26327
// exit ;
26325: GO 26429
// if HexInfo ( x , y ) = factory then
26327: LD_VAR 0 2
26331: PPUSH
26332: LD_VAR 0 3
26336: PPUSH
26337: CALL_OW 428
26341: PUSH
26342: LD_VAR 0 1
26346: EQUAL
26347: IFFALSE 26374
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26349: LD_ADDR_EXP 124
26353: PUSH
26354: LD_EXP 124
26358: PPUSH
26359: LD_VAR 0 1
26363: PPUSH
26364: LD_INT 0
26366: PPUSH
26367: CALL_OW 1
26371: ST_TO_ADDR
26372: GO 26425
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26374: LD_ADDR_EXP 124
26378: PUSH
26379: LD_EXP 124
26383: PPUSH
26384: LD_VAR 0 1
26388: PPUSH
26389: LD_VAR 0 1
26393: PPUSH
26394: CALL_OW 255
26398: PUSH
26399: LD_VAR 0 1
26403: PUSH
26404: LD_VAR 0 2
26408: PUSH
26409: LD_VAR 0 3
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: PPUSH
26420: CALL_OW 1
26424: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26425: CALL 26434 0 0
// end ;
26429: LD_VAR 0 4
26433: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
26434: LD_INT 0
26436: PPUSH
26437: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26438: LD_STRING resetFactoryWaypoint();
26440: PPUSH
26441: CALL_OW 559
// if factoryWaypoints then
26445: LD_EXP 124
26449: IFFALSE 26572
// begin for i := 1 to factoryWaypoints do
26451: LD_ADDR_VAR 0 2
26455: PUSH
26456: DOUBLE
26457: LD_INT 1
26459: DEC
26460: ST_TO_ADDR
26461: LD_EXP 124
26465: PUSH
26466: FOR_TO
26467: IFFALSE 26570
// if factoryWaypoints [ i ] then
26469: LD_EXP 124
26473: PUSH
26474: LD_VAR 0 2
26478: ARRAY
26479: IFFALSE 26568
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
26481: LD_STRING setFactoryWaypointXY(
26483: PUSH
26484: LD_EXP 124
26488: PUSH
26489: LD_VAR 0 2
26493: ARRAY
26494: PUSH
26495: LD_INT 1
26497: ARRAY
26498: STR
26499: PUSH
26500: LD_STRING ,
26502: STR
26503: PUSH
26504: LD_EXP 124
26508: PUSH
26509: LD_VAR 0 2
26513: ARRAY
26514: PUSH
26515: LD_INT 2
26517: ARRAY
26518: STR
26519: PUSH
26520: LD_STRING ,
26522: STR
26523: PUSH
26524: LD_EXP 124
26528: PUSH
26529: LD_VAR 0 2
26533: ARRAY
26534: PUSH
26535: LD_INT 3
26537: ARRAY
26538: STR
26539: PUSH
26540: LD_STRING ,
26542: STR
26543: PUSH
26544: LD_EXP 124
26548: PUSH
26549: LD_VAR 0 2
26553: ARRAY
26554: PUSH
26555: LD_INT 4
26557: ARRAY
26558: STR
26559: PUSH
26560: LD_STRING )
26562: STR
26563: PPUSH
26564: CALL_OW 559
26568: GO 26466
26570: POP
26571: POP
// end ; end ;
26572: LD_VAR 0 1
26576: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26577: LD_INT 0
26579: PPUSH
26580: PPUSH
26581: PPUSH
26582: PPUSH
26583: PPUSH
26584: PPUSH
26585: PPUSH
26586: PPUSH
26587: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26588: LD_VAR 0 1
26592: NOT
26593: PUSH
26594: LD_VAR 0 2
26598: PPUSH
26599: LD_VAR 0 3
26603: PPUSH
26604: CALL_OW 488
26608: NOT
26609: OR
26610: PUSH
26611: LD_VAR 0 4
26615: NOT
26616: OR
26617: IFFALSE 26621
// exit ;
26619: GO 26961
// list := [ ] ;
26621: LD_ADDR_VAR 0 13
26625: PUSH
26626: EMPTY
26627: ST_TO_ADDR
// if x - r < 0 then
26628: LD_VAR 0 2
26632: PUSH
26633: LD_VAR 0 4
26637: MINUS
26638: PUSH
26639: LD_INT 0
26641: LESS
26642: IFFALSE 26654
// min_x := 0 else
26644: LD_ADDR_VAR 0 7
26648: PUSH
26649: LD_INT 0
26651: ST_TO_ADDR
26652: GO 26670
// min_x := x - r ;
26654: LD_ADDR_VAR 0 7
26658: PUSH
26659: LD_VAR 0 2
26663: PUSH
26664: LD_VAR 0 4
26668: MINUS
26669: ST_TO_ADDR
// if y - r < 0 then
26670: LD_VAR 0 3
26674: PUSH
26675: LD_VAR 0 4
26679: MINUS
26680: PUSH
26681: LD_INT 0
26683: LESS
26684: IFFALSE 26696
// min_y := 0 else
26686: LD_ADDR_VAR 0 8
26690: PUSH
26691: LD_INT 0
26693: ST_TO_ADDR
26694: GO 26712
// min_y := y - r ;
26696: LD_ADDR_VAR 0 8
26700: PUSH
26701: LD_VAR 0 3
26705: PUSH
26706: LD_VAR 0 4
26710: MINUS
26711: ST_TO_ADDR
// max_x := x + r ;
26712: LD_ADDR_VAR 0 9
26716: PUSH
26717: LD_VAR 0 2
26721: PUSH
26722: LD_VAR 0 4
26726: PLUS
26727: ST_TO_ADDR
// max_y := y + r ;
26728: LD_ADDR_VAR 0 10
26732: PUSH
26733: LD_VAR 0 3
26737: PUSH
26738: LD_VAR 0 4
26742: PLUS
26743: ST_TO_ADDR
// for _x = min_x to max_x do
26744: LD_ADDR_VAR 0 11
26748: PUSH
26749: DOUBLE
26750: LD_VAR 0 7
26754: DEC
26755: ST_TO_ADDR
26756: LD_VAR 0 9
26760: PUSH
26761: FOR_TO
26762: IFFALSE 26879
// for _y = min_y to max_y do
26764: LD_ADDR_VAR 0 12
26768: PUSH
26769: DOUBLE
26770: LD_VAR 0 8
26774: DEC
26775: ST_TO_ADDR
26776: LD_VAR 0 10
26780: PUSH
26781: FOR_TO
26782: IFFALSE 26875
// begin if not ValidHex ( _x , _y ) then
26784: LD_VAR 0 11
26788: PPUSH
26789: LD_VAR 0 12
26793: PPUSH
26794: CALL_OW 488
26798: NOT
26799: IFFALSE 26803
// continue ;
26801: GO 26781
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26803: LD_VAR 0 11
26807: PPUSH
26808: LD_VAR 0 12
26812: PPUSH
26813: CALL_OW 351
26817: PUSH
26818: LD_VAR 0 11
26822: PPUSH
26823: LD_VAR 0 12
26827: PPUSH
26828: CALL_OW 554
26832: AND
26833: IFFALSE 26873
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26835: LD_ADDR_VAR 0 13
26839: PUSH
26840: LD_VAR 0 13
26844: PPUSH
26845: LD_VAR 0 13
26849: PUSH
26850: LD_INT 1
26852: PLUS
26853: PPUSH
26854: LD_VAR 0 11
26858: PUSH
26859: LD_VAR 0 12
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PPUSH
26868: CALL_OW 2
26872: ST_TO_ADDR
// end ;
26873: GO 26781
26875: POP
26876: POP
26877: GO 26761
26879: POP
26880: POP
// if not list then
26881: LD_VAR 0 13
26885: NOT
26886: IFFALSE 26890
// exit ;
26888: GO 26961
// for i in list do
26890: LD_ADDR_VAR 0 6
26894: PUSH
26895: LD_VAR 0 13
26899: PUSH
26900: FOR_IN
26901: IFFALSE 26959
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26903: LD_VAR 0 1
26907: PPUSH
26908: LD_STRING M
26910: PUSH
26911: LD_VAR 0 6
26915: PUSH
26916: LD_INT 1
26918: ARRAY
26919: PUSH
26920: LD_VAR 0 6
26924: PUSH
26925: LD_INT 2
26927: ARRAY
26928: PUSH
26929: LD_INT 0
26931: PUSH
26932: LD_INT 0
26934: PUSH
26935: LD_INT 0
26937: PUSH
26938: LD_INT 0
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: PUSH
26950: EMPTY
26951: LIST
26952: PPUSH
26953: CALL_OW 447
26957: GO 26900
26959: POP
26960: POP
// end ;
26961: LD_VAR 0 5
26965: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26966: LD_EXP 125
26970: NOT
26971: IFFALSE 27021
26973: GO 26975
26975: DISABLE
// begin initHack := true ;
26976: LD_ADDR_EXP 125
26980: PUSH
26981: LD_INT 1
26983: ST_TO_ADDR
// hackTanks := [ ] ;
26984: LD_ADDR_EXP 126
26988: PUSH
26989: EMPTY
26990: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26991: LD_ADDR_EXP 127
26995: PUSH
26996: EMPTY
26997: ST_TO_ADDR
// hackLimit := 3 ;
26998: LD_ADDR_EXP 128
27002: PUSH
27003: LD_INT 3
27005: ST_TO_ADDR
// hackDist := 12 ;
27006: LD_ADDR_EXP 129
27010: PUSH
27011: LD_INT 12
27013: ST_TO_ADDR
// hackCounter := [ ] ;
27014: LD_ADDR_EXP 130
27018: PUSH
27019: EMPTY
27020: ST_TO_ADDR
// end ;
27021: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27022: LD_EXP 125
27026: PUSH
27027: LD_INT 34
27029: PUSH
27030: LD_EXP 48
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PPUSH
27039: CALL_OW 69
27043: AND
27044: IFFALSE 27299
27046: GO 27048
27048: DISABLE
27049: LD_INT 0
27051: PPUSH
27052: PPUSH
// begin enable ;
27053: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27054: LD_ADDR_VAR 0 1
27058: PUSH
27059: LD_INT 34
27061: PUSH
27062: LD_EXP 48
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PPUSH
27071: CALL_OW 69
27075: PUSH
27076: FOR_IN
27077: IFFALSE 27297
// begin if not i in hackTanks then
27079: LD_VAR 0 1
27083: PUSH
27084: LD_EXP 126
27088: IN
27089: NOT
27090: IFFALSE 27173
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27092: LD_ADDR_EXP 126
27096: PUSH
27097: LD_EXP 126
27101: PPUSH
27102: LD_EXP 126
27106: PUSH
27107: LD_INT 1
27109: PLUS
27110: PPUSH
27111: LD_VAR 0 1
27115: PPUSH
27116: CALL_OW 1
27120: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27121: LD_ADDR_EXP 127
27125: PUSH
27126: LD_EXP 127
27130: PPUSH
27131: LD_EXP 127
27135: PUSH
27136: LD_INT 1
27138: PLUS
27139: PPUSH
27140: EMPTY
27141: PPUSH
27142: CALL_OW 1
27146: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27147: LD_ADDR_EXP 130
27151: PUSH
27152: LD_EXP 130
27156: PPUSH
27157: LD_EXP 130
27161: PUSH
27162: LD_INT 1
27164: PLUS
27165: PPUSH
27166: EMPTY
27167: PPUSH
27168: CALL_OW 1
27172: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27173: LD_VAR 0 1
27177: PPUSH
27178: CALL_OW 302
27182: NOT
27183: IFFALSE 27196
// begin HackUnlinkAll ( i ) ;
27185: LD_VAR 0 1
27189: PPUSH
27190: CALL 27302 0 1
// continue ;
27194: GO 27076
// end ; HackCheckCapturedStatus ( i ) ;
27196: LD_VAR 0 1
27200: PPUSH
27201: CALL 27745 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27205: LD_ADDR_VAR 0 2
27209: PUSH
27210: LD_INT 81
27212: PUSH
27213: LD_VAR 0 1
27217: PPUSH
27218: CALL_OW 255
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 33
27229: PUSH
27230: LD_INT 3
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 91
27239: PUSH
27240: LD_VAR 0 1
27244: PUSH
27245: LD_EXP 129
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 50
27257: PUSH
27258: EMPTY
27259: LIST
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: PPUSH
27267: CALL_OW 69
27271: ST_TO_ADDR
// if not tmp then
27272: LD_VAR 0 2
27276: NOT
27277: IFFALSE 27281
// continue ;
27279: GO 27076
// HackLink ( i , tmp ) ;
27281: LD_VAR 0 1
27285: PPUSH
27286: LD_VAR 0 2
27290: PPUSH
27291: CALL 27438 0 2
// end ;
27295: GO 27076
27297: POP
27298: POP
// end ;
27299: PPOPN 2
27301: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27302: LD_INT 0
27304: PPUSH
27305: PPUSH
27306: PPUSH
// if not hack in hackTanks then
27307: LD_VAR 0 1
27311: PUSH
27312: LD_EXP 126
27316: IN
27317: NOT
27318: IFFALSE 27322
// exit ;
27320: GO 27433
// index := GetElementIndex ( hackTanks , hack ) ;
27322: LD_ADDR_VAR 0 4
27326: PUSH
27327: LD_EXP 126
27331: PPUSH
27332: LD_VAR 0 1
27336: PPUSH
27337: CALL 35060 0 2
27341: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27342: LD_EXP 127
27346: PUSH
27347: LD_VAR 0 4
27351: ARRAY
27352: IFFALSE 27433
// begin for i in hackTanksCaptured [ index ] do
27354: LD_ADDR_VAR 0 3
27358: PUSH
27359: LD_EXP 127
27363: PUSH
27364: LD_VAR 0 4
27368: ARRAY
27369: PUSH
27370: FOR_IN
27371: IFFALSE 27397
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27373: LD_VAR 0 3
27377: PUSH
27378: LD_INT 1
27380: ARRAY
27381: PPUSH
27382: LD_VAR 0 3
27386: PUSH
27387: LD_INT 2
27389: ARRAY
27390: PPUSH
27391: CALL_OW 235
27395: GO 27370
27397: POP
27398: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27399: LD_ADDR_EXP 127
27403: PUSH
27404: LD_EXP 127
27408: PPUSH
27409: LD_VAR 0 4
27413: PPUSH
27414: EMPTY
27415: PPUSH
27416: CALL_OW 1
27420: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27421: LD_VAR 0 1
27425: PPUSH
27426: LD_INT 0
27428: PPUSH
27429: CALL_OW 505
// end ; end ;
27433: LD_VAR 0 2
27437: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27438: LD_INT 0
27440: PPUSH
27441: PPUSH
27442: PPUSH
// if not hack in hackTanks or not vehicles then
27443: LD_VAR 0 1
27447: PUSH
27448: LD_EXP 126
27452: IN
27453: NOT
27454: PUSH
27455: LD_VAR 0 2
27459: NOT
27460: OR
27461: IFFALSE 27465
// exit ;
27463: GO 27740
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27465: LD_ADDR_VAR 0 2
27469: PUSH
27470: LD_VAR 0 1
27474: PPUSH
27475: LD_VAR 0 2
27479: PPUSH
27480: LD_INT 1
27482: PPUSH
27483: LD_INT 1
27485: PPUSH
27486: CALL 35710 0 4
27490: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27491: LD_ADDR_VAR 0 5
27495: PUSH
27496: LD_EXP 126
27500: PPUSH
27501: LD_VAR 0 1
27505: PPUSH
27506: CALL 35060 0 2
27510: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27511: LD_EXP 127
27515: PUSH
27516: LD_VAR 0 5
27520: ARRAY
27521: PUSH
27522: LD_EXP 128
27526: LESS
27527: IFFALSE 27716
// begin for i := 1 to vehicles do
27529: LD_ADDR_VAR 0 4
27533: PUSH
27534: DOUBLE
27535: LD_INT 1
27537: DEC
27538: ST_TO_ADDR
27539: LD_VAR 0 2
27543: PUSH
27544: FOR_TO
27545: IFFALSE 27714
// begin if hackTanksCaptured [ index ] = hackLimit then
27547: LD_EXP 127
27551: PUSH
27552: LD_VAR 0 5
27556: ARRAY
27557: PUSH
27558: LD_EXP 128
27562: EQUAL
27563: IFFALSE 27567
// break ;
27565: GO 27714
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27567: LD_ADDR_EXP 130
27571: PUSH
27572: LD_EXP 130
27576: PPUSH
27577: LD_VAR 0 5
27581: PPUSH
27582: LD_EXP 130
27586: PUSH
27587: LD_VAR 0 5
27591: ARRAY
27592: PUSH
27593: LD_INT 1
27595: PLUS
27596: PPUSH
27597: CALL_OW 1
27601: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27602: LD_ADDR_EXP 127
27606: PUSH
27607: LD_EXP 127
27611: PPUSH
27612: LD_VAR 0 5
27616: PUSH
27617: LD_EXP 127
27621: PUSH
27622: LD_VAR 0 5
27626: ARRAY
27627: PUSH
27628: LD_INT 1
27630: PLUS
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PPUSH
27636: LD_VAR 0 2
27640: PUSH
27641: LD_VAR 0 4
27645: ARRAY
27646: PUSH
27647: LD_VAR 0 2
27651: PUSH
27652: LD_VAR 0 4
27656: ARRAY
27657: PPUSH
27658: CALL_OW 255
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PPUSH
27667: CALL 35275 0 3
27671: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27672: LD_VAR 0 2
27676: PUSH
27677: LD_VAR 0 4
27681: ARRAY
27682: PPUSH
27683: LD_VAR 0 1
27687: PPUSH
27688: CALL_OW 255
27692: PPUSH
27693: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27697: LD_VAR 0 2
27701: PUSH
27702: LD_VAR 0 4
27706: ARRAY
27707: PPUSH
27708: CALL_OW 141
// end ;
27712: GO 27544
27714: POP
27715: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27716: LD_VAR 0 1
27720: PPUSH
27721: LD_EXP 127
27725: PUSH
27726: LD_VAR 0 5
27730: ARRAY
27731: PUSH
27732: LD_INT 0
27734: PLUS
27735: PPUSH
27736: CALL_OW 505
// end ;
27740: LD_VAR 0 3
27744: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27745: LD_INT 0
27747: PPUSH
27748: PPUSH
27749: PPUSH
27750: PPUSH
// if not hack in hackTanks then
27751: LD_VAR 0 1
27755: PUSH
27756: LD_EXP 126
27760: IN
27761: NOT
27762: IFFALSE 27766
// exit ;
27764: GO 28006
// index := GetElementIndex ( hackTanks , hack ) ;
27766: LD_ADDR_VAR 0 4
27770: PUSH
27771: LD_EXP 126
27775: PPUSH
27776: LD_VAR 0 1
27780: PPUSH
27781: CALL 35060 0 2
27785: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27786: LD_ADDR_VAR 0 3
27790: PUSH
27791: DOUBLE
27792: LD_EXP 127
27796: PUSH
27797: LD_VAR 0 4
27801: ARRAY
27802: INC
27803: ST_TO_ADDR
27804: LD_INT 1
27806: PUSH
27807: FOR_DOWNTO
27808: IFFALSE 27980
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27810: LD_ADDR_VAR 0 5
27814: PUSH
27815: LD_EXP 127
27819: PUSH
27820: LD_VAR 0 4
27824: ARRAY
27825: PUSH
27826: LD_VAR 0 3
27830: ARRAY
27831: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27832: LD_VAR 0 5
27836: PUSH
27837: LD_INT 1
27839: ARRAY
27840: PPUSH
27841: CALL_OW 302
27845: NOT
27846: PUSH
27847: LD_VAR 0 5
27851: PUSH
27852: LD_INT 1
27854: ARRAY
27855: PPUSH
27856: CALL_OW 255
27860: PUSH
27861: LD_VAR 0 1
27865: PPUSH
27866: CALL_OW 255
27870: NONEQUAL
27871: OR
27872: IFFALSE 27978
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27874: LD_VAR 0 5
27878: PUSH
27879: LD_INT 1
27881: ARRAY
27882: PPUSH
27883: CALL_OW 305
27887: PUSH
27888: LD_VAR 0 5
27892: PUSH
27893: LD_INT 1
27895: ARRAY
27896: PPUSH
27897: CALL_OW 255
27901: PUSH
27902: LD_VAR 0 1
27906: PPUSH
27907: CALL_OW 255
27911: EQUAL
27912: AND
27913: IFFALSE 27937
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27915: LD_VAR 0 5
27919: PUSH
27920: LD_INT 1
27922: ARRAY
27923: PPUSH
27924: LD_VAR 0 5
27928: PUSH
27929: LD_INT 2
27931: ARRAY
27932: PPUSH
27933: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27937: LD_ADDR_EXP 127
27941: PUSH
27942: LD_EXP 127
27946: PPUSH
27947: LD_VAR 0 4
27951: PPUSH
27952: LD_EXP 127
27956: PUSH
27957: LD_VAR 0 4
27961: ARRAY
27962: PPUSH
27963: LD_VAR 0 3
27967: PPUSH
27968: CALL_OW 3
27972: PPUSH
27973: CALL_OW 1
27977: ST_TO_ADDR
// end ; end ;
27978: GO 27807
27980: POP
27981: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27982: LD_VAR 0 1
27986: PPUSH
27987: LD_EXP 127
27991: PUSH
27992: LD_VAR 0 4
27996: ARRAY
27997: PUSH
27998: LD_INT 0
28000: PLUS
28001: PPUSH
28002: CALL_OW 505
// end ;
28006: LD_VAR 0 2
28010: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28011: LD_INT 0
28013: PPUSH
28014: PPUSH
28015: PPUSH
28016: PPUSH
// if not hack in hackTanks then
28017: LD_VAR 0 1
28021: PUSH
28022: LD_EXP 126
28026: IN
28027: NOT
28028: IFFALSE 28032
// exit ;
28030: GO 28117
// index := GetElementIndex ( hackTanks , hack ) ;
28032: LD_ADDR_VAR 0 5
28036: PUSH
28037: LD_EXP 126
28041: PPUSH
28042: LD_VAR 0 1
28046: PPUSH
28047: CALL 35060 0 2
28051: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28052: LD_ADDR_VAR 0 4
28056: PUSH
28057: DOUBLE
28058: LD_INT 1
28060: DEC
28061: ST_TO_ADDR
28062: LD_EXP 127
28066: PUSH
28067: LD_VAR 0 5
28071: ARRAY
28072: PUSH
28073: FOR_TO
28074: IFFALSE 28115
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28076: LD_EXP 127
28080: PUSH
28081: LD_VAR 0 5
28085: ARRAY
28086: PUSH
28087: LD_VAR 0 4
28091: ARRAY
28092: PUSH
28093: LD_INT 1
28095: ARRAY
28096: PUSH
28097: LD_VAR 0 2
28101: EQUAL
28102: IFFALSE 28113
// KillUnit ( vehicle ) ;
28104: LD_VAR 0 2
28108: PPUSH
28109: CALL_OW 66
28113: GO 28073
28115: POP
28116: POP
// end ;
28117: LD_VAR 0 3
28121: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28122: LD_EXP 131
28126: NOT
28127: IFFALSE 28162
28129: GO 28131
28131: DISABLE
// begin initMiner := true ;
28132: LD_ADDR_EXP 131
28136: PUSH
28137: LD_INT 1
28139: ST_TO_ADDR
// minersList := [ ] ;
28140: LD_ADDR_EXP 132
28144: PUSH
28145: EMPTY
28146: ST_TO_ADDR
// minerMinesList := [ ] ;
28147: LD_ADDR_EXP 133
28151: PUSH
28152: EMPTY
28153: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28154: LD_ADDR_EXP 134
28158: PUSH
28159: LD_INT 5
28161: ST_TO_ADDR
// end ;
28162: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28163: LD_EXP 131
28167: PUSH
28168: LD_INT 34
28170: PUSH
28171: LD_EXP 53
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PPUSH
28180: CALL_OW 69
28184: AND
28185: IFFALSE 28648
28187: GO 28189
28189: DISABLE
28190: LD_INT 0
28192: PPUSH
28193: PPUSH
28194: PPUSH
28195: PPUSH
// begin enable ;
28196: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28197: LD_ADDR_VAR 0 1
28201: PUSH
28202: LD_INT 34
28204: PUSH
28205: LD_EXP 53
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PPUSH
28214: CALL_OW 69
28218: PUSH
28219: FOR_IN
28220: IFFALSE 28292
// begin if not i in minersList then
28222: LD_VAR 0 1
28226: PUSH
28227: LD_EXP 132
28231: IN
28232: NOT
28233: IFFALSE 28290
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28235: LD_ADDR_EXP 132
28239: PUSH
28240: LD_EXP 132
28244: PPUSH
28245: LD_EXP 132
28249: PUSH
28250: LD_INT 1
28252: PLUS
28253: PPUSH
28254: LD_VAR 0 1
28258: PPUSH
28259: CALL_OW 1
28263: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28264: LD_ADDR_EXP 133
28268: PUSH
28269: LD_EXP 133
28273: PPUSH
28274: LD_EXP 133
28278: PUSH
28279: LD_INT 1
28281: PLUS
28282: PPUSH
28283: EMPTY
28284: PPUSH
28285: CALL_OW 1
28289: ST_TO_ADDR
// end end ;
28290: GO 28219
28292: POP
28293: POP
// for i := minerMinesList downto 1 do
28294: LD_ADDR_VAR 0 1
28298: PUSH
28299: DOUBLE
28300: LD_EXP 133
28304: INC
28305: ST_TO_ADDR
28306: LD_INT 1
28308: PUSH
28309: FOR_DOWNTO
28310: IFFALSE 28646
// begin if IsLive ( minersList [ i ] ) then
28312: LD_EXP 132
28316: PUSH
28317: LD_VAR 0 1
28321: ARRAY
28322: PPUSH
28323: CALL_OW 300
28327: IFFALSE 28355
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28329: LD_EXP 132
28333: PUSH
28334: LD_VAR 0 1
28338: ARRAY
28339: PPUSH
28340: LD_EXP 133
28344: PUSH
28345: LD_VAR 0 1
28349: ARRAY
28350: PPUSH
28351: CALL_OW 505
// if not minerMinesList [ i ] then
28355: LD_EXP 133
28359: PUSH
28360: LD_VAR 0 1
28364: ARRAY
28365: NOT
28366: IFFALSE 28370
// continue ;
28368: GO 28309
// for j := minerMinesList [ i ] downto 1 do
28370: LD_ADDR_VAR 0 2
28374: PUSH
28375: DOUBLE
28376: LD_EXP 133
28380: PUSH
28381: LD_VAR 0 1
28385: ARRAY
28386: INC
28387: ST_TO_ADDR
28388: LD_INT 1
28390: PUSH
28391: FOR_DOWNTO
28392: IFFALSE 28642
// begin side := GetSide ( minersList [ i ] ) ;
28394: LD_ADDR_VAR 0 3
28398: PUSH
28399: LD_EXP 132
28403: PUSH
28404: LD_VAR 0 1
28408: ARRAY
28409: PPUSH
28410: CALL_OW 255
28414: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28415: LD_ADDR_VAR 0 4
28419: PUSH
28420: LD_EXP 133
28424: PUSH
28425: LD_VAR 0 1
28429: ARRAY
28430: PUSH
28431: LD_VAR 0 2
28435: ARRAY
28436: PUSH
28437: LD_INT 1
28439: ARRAY
28440: PPUSH
28441: LD_EXP 133
28445: PUSH
28446: LD_VAR 0 1
28450: ARRAY
28451: PUSH
28452: LD_VAR 0 2
28456: ARRAY
28457: PUSH
28458: LD_INT 2
28460: ARRAY
28461: PPUSH
28462: CALL_OW 428
28466: ST_TO_ADDR
// if not tmp then
28467: LD_VAR 0 4
28471: NOT
28472: IFFALSE 28476
// continue ;
28474: GO 28391
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28476: LD_VAR 0 4
28480: PUSH
28481: LD_INT 81
28483: PUSH
28484: LD_VAR 0 3
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PPUSH
28493: CALL_OW 69
28497: IN
28498: PUSH
28499: LD_EXP 133
28503: PUSH
28504: LD_VAR 0 1
28508: ARRAY
28509: PUSH
28510: LD_VAR 0 2
28514: ARRAY
28515: PUSH
28516: LD_INT 1
28518: ARRAY
28519: PPUSH
28520: LD_EXP 133
28524: PUSH
28525: LD_VAR 0 1
28529: ARRAY
28530: PUSH
28531: LD_VAR 0 2
28535: ARRAY
28536: PUSH
28537: LD_INT 2
28539: ARRAY
28540: PPUSH
28541: CALL_OW 458
28545: AND
28546: IFFALSE 28640
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28548: LD_EXP 133
28552: PUSH
28553: LD_VAR 0 1
28557: ARRAY
28558: PUSH
28559: LD_VAR 0 2
28563: ARRAY
28564: PUSH
28565: LD_INT 1
28567: ARRAY
28568: PPUSH
28569: LD_EXP 133
28573: PUSH
28574: LD_VAR 0 1
28578: ARRAY
28579: PUSH
28580: LD_VAR 0 2
28584: ARRAY
28585: PUSH
28586: LD_INT 2
28588: ARRAY
28589: PPUSH
28590: LD_VAR 0 3
28594: PPUSH
28595: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28599: LD_ADDR_EXP 133
28603: PUSH
28604: LD_EXP 133
28608: PPUSH
28609: LD_VAR 0 1
28613: PPUSH
28614: LD_EXP 133
28618: PUSH
28619: LD_VAR 0 1
28623: ARRAY
28624: PPUSH
28625: LD_VAR 0 2
28629: PPUSH
28630: CALL_OW 3
28634: PPUSH
28635: CALL_OW 1
28639: ST_TO_ADDR
// end ; end ;
28640: GO 28391
28642: POP
28643: POP
// end ;
28644: GO 28309
28646: POP
28647: POP
// end ;
28648: PPOPN 4
28650: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28651: LD_INT 0
28653: PPUSH
28654: PPUSH
// result := false ;
28655: LD_ADDR_VAR 0 4
28659: PUSH
28660: LD_INT 0
28662: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28663: LD_VAR 0 1
28667: PPUSH
28668: CALL_OW 264
28672: PUSH
28673: LD_EXP 53
28677: EQUAL
28678: NOT
28679: IFFALSE 28683
// exit ;
28681: GO 28923
// index := GetElementIndex ( minersList , unit ) ;
28683: LD_ADDR_VAR 0 5
28687: PUSH
28688: LD_EXP 132
28692: PPUSH
28693: LD_VAR 0 1
28697: PPUSH
28698: CALL 35060 0 2
28702: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28703: LD_EXP 133
28707: PUSH
28708: LD_VAR 0 5
28712: ARRAY
28713: PUSH
28714: LD_EXP 134
28718: GREATEREQUAL
28719: IFFALSE 28723
// exit ;
28721: GO 28923
// ComMoveXY ( unit , x , y ) ;
28723: LD_VAR 0 1
28727: PPUSH
28728: LD_VAR 0 2
28732: PPUSH
28733: LD_VAR 0 3
28737: PPUSH
28738: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28742: LD_INT 35
28744: PPUSH
28745: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28749: LD_VAR 0 1
28753: PPUSH
28754: LD_VAR 0 2
28758: PPUSH
28759: LD_VAR 0 3
28763: PPUSH
28764: CALL 65779 0 3
28768: NOT
28769: PUSH
28770: LD_VAR 0 1
28774: PPUSH
28775: CALL_OW 314
28779: AND
28780: IFFALSE 28784
// exit ;
28782: GO 28923
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28784: LD_VAR 0 2
28788: PPUSH
28789: LD_VAR 0 3
28793: PPUSH
28794: CALL_OW 428
28798: PUSH
28799: LD_VAR 0 1
28803: EQUAL
28804: PUSH
28805: LD_VAR 0 1
28809: PPUSH
28810: CALL_OW 314
28814: NOT
28815: AND
28816: IFFALSE 28742
// PlaySoundXY ( x , y , PlantMine ) ;
28818: LD_VAR 0 2
28822: PPUSH
28823: LD_VAR 0 3
28827: PPUSH
28828: LD_STRING PlantMine
28830: PPUSH
28831: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28835: LD_VAR 0 2
28839: PPUSH
28840: LD_VAR 0 3
28844: PPUSH
28845: LD_VAR 0 1
28849: PPUSH
28850: CALL_OW 255
28854: PPUSH
28855: LD_INT 0
28857: PPUSH
28858: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28862: LD_ADDR_EXP 133
28866: PUSH
28867: LD_EXP 133
28871: PPUSH
28872: LD_VAR 0 5
28876: PUSH
28877: LD_EXP 133
28881: PUSH
28882: LD_VAR 0 5
28886: ARRAY
28887: PUSH
28888: LD_INT 1
28890: PLUS
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PPUSH
28896: LD_VAR 0 2
28900: PUSH
28901: LD_VAR 0 3
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PPUSH
28910: CALL 35275 0 3
28914: ST_TO_ADDR
// result := true ;
28915: LD_ADDR_VAR 0 4
28919: PUSH
28920: LD_INT 1
28922: ST_TO_ADDR
// end ;
28923: LD_VAR 0 4
28927: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28928: LD_INT 0
28930: PPUSH
28931: PPUSH
28932: PPUSH
// if not unit in minersList then
28933: LD_VAR 0 1
28937: PUSH
28938: LD_EXP 132
28942: IN
28943: NOT
28944: IFFALSE 28948
// exit ;
28946: GO 29340
// index := GetElementIndex ( minersList , unit ) ;
28948: LD_ADDR_VAR 0 6
28952: PUSH
28953: LD_EXP 132
28957: PPUSH
28958: LD_VAR 0 1
28962: PPUSH
28963: CALL 35060 0 2
28967: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28968: LD_ADDR_VAR 0 5
28972: PUSH
28973: DOUBLE
28974: LD_EXP 133
28978: PUSH
28979: LD_VAR 0 6
28983: ARRAY
28984: INC
28985: ST_TO_ADDR
28986: LD_INT 1
28988: PUSH
28989: FOR_DOWNTO
28990: IFFALSE 29151
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28992: LD_EXP 133
28996: PUSH
28997: LD_VAR 0 6
29001: ARRAY
29002: PUSH
29003: LD_VAR 0 5
29007: ARRAY
29008: PUSH
29009: LD_INT 1
29011: ARRAY
29012: PUSH
29013: LD_VAR 0 2
29017: EQUAL
29018: PUSH
29019: LD_EXP 133
29023: PUSH
29024: LD_VAR 0 6
29028: ARRAY
29029: PUSH
29030: LD_VAR 0 5
29034: ARRAY
29035: PUSH
29036: LD_INT 2
29038: ARRAY
29039: PUSH
29040: LD_VAR 0 3
29044: EQUAL
29045: AND
29046: IFFALSE 29149
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29048: LD_EXP 133
29052: PUSH
29053: LD_VAR 0 6
29057: ARRAY
29058: PUSH
29059: LD_VAR 0 5
29063: ARRAY
29064: PUSH
29065: LD_INT 1
29067: ARRAY
29068: PPUSH
29069: LD_EXP 133
29073: PUSH
29074: LD_VAR 0 6
29078: ARRAY
29079: PUSH
29080: LD_VAR 0 5
29084: ARRAY
29085: PUSH
29086: LD_INT 2
29088: ARRAY
29089: PPUSH
29090: LD_VAR 0 1
29094: PPUSH
29095: CALL_OW 255
29099: PPUSH
29100: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29104: LD_ADDR_EXP 133
29108: PUSH
29109: LD_EXP 133
29113: PPUSH
29114: LD_VAR 0 6
29118: PPUSH
29119: LD_EXP 133
29123: PUSH
29124: LD_VAR 0 6
29128: ARRAY
29129: PPUSH
29130: LD_VAR 0 5
29134: PPUSH
29135: CALL_OW 3
29139: PPUSH
29140: CALL_OW 1
29144: ST_TO_ADDR
// exit ;
29145: POP
29146: POP
29147: GO 29340
// end ; end ;
29149: GO 28989
29151: POP
29152: POP
// for i := minerMinesList [ index ] downto 1 do
29153: LD_ADDR_VAR 0 5
29157: PUSH
29158: DOUBLE
29159: LD_EXP 133
29163: PUSH
29164: LD_VAR 0 6
29168: ARRAY
29169: INC
29170: ST_TO_ADDR
29171: LD_INT 1
29173: PUSH
29174: FOR_DOWNTO
29175: IFFALSE 29338
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29177: LD_EXP 133
29181: PUSH
29182: LD_VAR 0 6
29186: ARRAY
29187: PUSH
29188: LD_VAR 0 5
29192: ARRAY
29193: PUSH
29194: LD_INT 1
29196: ARRAY
29197: PPUSH
29198: LD_EXP 133
29202: PUSH
29203: LD_VAR 0 6
29207: ARRAY
29208: PUSH
29209: LD_VAR 0 5
29213: ARRAY
29214: PUSH
29215: LD_INT 2
29217: ARRAY
29218: PPUSH
29219: LD_VAR 0 2
29223: PPUSH
29224: LD_VAR 0 3
29228: PPUSH
29229: CALL_OW 298
29233: PUSH
29234: LD_INT 6
29236: LESS
29237: IFFALSE 29336
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29239: LD_EXP 133
29243: PUSH
29244: LD_VAR 0 6
29248: ARRAY
29249: PUSH
29250: LD_VAR 0 5
29254: ARRAY
29255: PUSH
29256: LD_INT 1
29258: ARRAY
29259: PPUSH
29260: LD_EXP 133
29264: PUSH
29265: LD_VAR 0 6
29269: ARRAY
29270: PUSH
29271: LD_VAR 0 5
29275: ARRAY
29276: PUSH
29277: LD_INT 2
29279: ARRAY
29280: PPUSH
29281: LD_VAR 0 1
29285: PPUSH
29286: CALL_OW 255
29290: PPUSH
29291: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29295: LD_ADDR_EXP 133
29299: PUSH
29300: LD_EXP 133
29304: PPUSH
29305: LD_VAR 0 6
29309: PPUSH
29310: LD_EXP 133
29314: PUSH
29315: LD_VAR 0 6
29319: ARRAY
29320: PPUSH
29321: LD_VAR 0 5
29325: PPUSH
29326: CALL_OW 3
29330: PPUSH
29331: CALL_OW 1
29335: ST_TO_ADDR
// end ; end ;
29336: GO 29174
29338: POP
29339: POP
// end ;
29340: LD_VAR 0 4
29344: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29345: LD_INT 0
29347: PPUSH
29348: PPUSH
29349: PPUSH
29350: PPUSH
29351: PPUSH
29352: PPUSH
29353: PPUSH
29354: PPUSH
29355: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29356: LD_VAR 0 1
29360: PPUSH
29361: CALL_OW 264
29365: PUSH
29366: LD_EXP 53
29370: EQUAL
29371: NOT
29372: PUSH
29373: LD_VAR 0 1
29377: PUSH
29378: LD_EXP 132
29382: IN
29383: NOT
29384: OR
29385: IFFALSE 29389
// exit ;
29387: GO 29711
// index := GetElementIndex ( minersList , unit ) ;
29389: LD_ADDR_VAR 0 6
29393: PUSH
29394: LD_EXP 132
29398: PPUSH
29399: LD_VAR 0 1
29403: PPUSH
29404: CALL 35060 0 2
29408: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29409: LD_ADDR_VAR 0 8
29413: PUSH
29414: LD_EXP 134
29418: PUSH
29419: LD_EXP 133
29423: PUSH
29424: LD_VAR 0 6
29428: ARRAY
29429: MINUS
29430: ST_TO_ADDR
// if not minesFreeAmount then
29431: LD_VAR 0 8
29435: NOT
29436: IFFALSE 29440
// exit ;
29438: GO 29711
// tmp := [ ] ;
29440: LD_ADDR_VAR 0 7
29444: PUSH
29445: EMPTY
29446: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29447: LD_ADDR_VAR 0 5
29451: PUSH
29452: DOUBLE
29453: LD_INT 1
29455: DEC
29456: ST_TO_ADDR
29457: LD_VAR 0 8
29461: PUSH
29462: FOR_TO
29463: IFFALSE 29658
// begin _d := rand ( 0 , 5 ) ;
29465: LD_ADDR_VAR 0 11
29469: PUSH
29470: LD_INT 0
29472: PPUSH
29473: LD_INT 5
29475: PPUSH
29476: CALL_OW 12
29480: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29481: LD_ADDR_VAR 0 12
29485: PUSH
29486: LD_INT 2
29488: PPUSH
29489: LD_INT 6
29491: PPUSH
29492: CALL_OW 12
29496: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29497: LD_ADDR_VAR 0 9
29501: PUSH
29502: LD_VAR 0 2
29506: PPUSH
29507: LD_VAR 0 11
29511: PPUSH
29512: LD_VAR 0 12
29516: PPUSH
29517: CALL_OW 272
29521: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29522: LD_ADDR_VAR 0 10
29526: PUSH
29527: LD_VAR 0 3
29531: PPUSH
29532: LD_VAR 0 11
29536: PPUSH
29537: LD_VAR 0 12
29541: PPUSH
29542: CALL_OW 273
29546: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29547: LD_VAR 0 9
29551: PPUSH
29552: LD_VAR 0 10
29556: PPUSH
29557: CALL_OW 488
29561: PUSH
29562: LD_VAR 0 9
29566: PUSH
29567: LD_VAR 0 10
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_VAR 0 7
29580: IN
29581: NOT
29582: AND
29583: PUSH
29584: LD_VAR 0 9
29588: PPUSH
29589: LD_VAR 0 10
29593: PPUSH
29594: CALL_OW 458
29598: NOT
29599: AND
29600: IFFALSE 29642
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29602: LD_ADDR_VAR 0 7
29606: PUSH
29607: LD_VAR 0 7
29611: PPUSH
29612: LD_VAR 0 7
29616: PUSH
29617: LD_INT 1
29619: PLUS
29620: PPUSH
29621: LD_VAR 0 9
29625: PUSH
29626: LD_VAR 0 10
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PPUSH
29635: CALL_OW 1
29639: ST_TO_ADDR
29640: GO 29656
// i := i - 1 ;
29642: LD_ADDR_VAR 0 5
29646: PUSH
29647: LD_VAR 0 5
29651: PUSH
29652: LD_INT 1
29654: MINUS
29655: ST_TO_ADDR
// end ;
29656: GO 29462
29658: POP
29659: POP
// for i in tmp do
29660: LD_ADDR_VAR 0 5
29664: PUSH
29665: LD_VAR 0 7
29669: PUSH
29670: FOR_IN
29671: IFFALSE 29709
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29673: LD_VAR 0 1
29677: PPUSH
29678: LD_VAR 0 5
29682: PUSH
29683: LD_INT 1
29685: ARRAY
29686: PPUSH
29687: LD_VAR 0 5
29691: PUSH
29692: LD_INT 2
29694: ARRAY
29695: PPUSH
29696: CALL 28651 0 3
29700: NOT
29701: IFFALSE 29707
// exit ;
29703: POP
29704: POP
29705: GO 29711
29707: GO 29670
29709: POP
29710: POP
// end ;
29711: LD_VAR 0 4
29715: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29716: LD_INT 0
29718: PPUSH
29719: PPUSH
29720: PPUSH
29721: PPUSH
29722: PPUSH
29723: PPUSH
29724: PPUSH
// if not GetClass ( unit ) = class_sniper then
29725: LD_VAR 0 1
29729: PPUSH
29730: CALL_OW 257
29734: PUSH
29735: LD_INT 5
29737: EQUAL
29738: NOT
29739: IFFALSE 29743
// exit ;
29741: GO 30131
// dist := 8 ;
29743: LD_ADDR_VAR 0 5
29747: PUSH
29748: LD_INT 8
29750: ST_TO_ADDR
// viewRange := 12 ;
29751: LD_ADDR_VAR 0 7
29755: PUSH
29756: LD_INT 12
29758: ST_TO_ADDR
// side := GetSide ( unit ) ;
29759: LD_ADDR_VAR 0 6
29763: PUSH
29764: LD_VAR 0 1
29768: PPUSH
29769: CALL_OW 255
29773: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29774: LD_INT 61
29776: PPUSH
29777: LD_VAR 0 6
29781: PPUSH
29782: CALL_OW 321
29786: PUSH
29787: LD_INT 2
29789: EQUAL
29790: IFFALSE 29800
// viewRange := 16 ;
29792: LD_ADDR_VAR 0 7
29796: PUSH
29797: LD_INT 16
29799: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29800: LD_VAR 0 1
29804: PPUSH
29805: LD_VAR 0 2
29809: PPUSH
29810: LD_VAR 0 3
29814: PPUSH
29815: CALL_OW 297
29819: PUSH
29820: LD_VAR 0 5
29824: GREATER
29825: IFFALSE 29904
// begin ComMoveXY ( unit , x , y ) ;
29827: LD_VAR 0 1
29831: PPUSH
29832: LD_VAR 0 2
29836: PPUSH
29837: LD_VAR 0 3
29841: PPUSH
29842: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29846: LD_INT 35
29848: PPUSH
29849: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29853: LD_VAR 0 1
29857: PPUSH
29858: LD_VAR 0 2
29862: PPUSH
29863: LD_VAR 0 3
29867: PPUSH
29868: CALL 65779 0 3
29872: NOT
29873: IFFALSE 29877
// exit ;
29875: GO 30131
// until GetDistUnitXY ( unit , x , y ) < dist ;
29877: LD_VAR 0 1
29881: PPUSH
29882: LD_VAR 0 2
29886: PPUSH
29887: LD_VAR 0 3
29891: PPUSH
29892: CALL_OW 297
29896: PUSH
29897: LD_VAR 0 5
29901: LESS
29902: IFFALSE 29846
// end ; ComTurnXY ( unit , x , y ) ;
29904: LD_VAR 0 1
29908: PPUSH
29909: LD_VAR 0 2
29913: PPUSH
29914: LD_VAR 0 3
29918: PPUSH
29919: CALL_OW 118
// wait ( 5 ) ;
29923: LD_INT 5
29925: PPUSH
29926: CALL_OW 67
// _d := GetDir ( unit ) ;
29930: LD_ADDR_VAR 0 10
29934: PUSH
29935: LD_VAR 0 1
29939: PPUSH
29940: CALL_OW 254
29944: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29945: LD_ADDR_VAR 0 8
29949: PUSH
29950: LD_VAR 0 1
29954: PPUSH
29955: CALL_OW 250
29959: PPUSH
29960: LD_VAR 0 10
29964: PPUSH
29965: LD_VAR 0 5
29969: PPUSH
29970: CALL_OW 272
29974: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29975: LD_ADDR_VAR 0 9
29979: PUSH
29980: LD_VAR 0 1
29984: PPUSH
29985: CALL_OW 251
29989: PPUSH
29990: LD_VAR 0 10
29994: PPUSH
29995: LD_VAR 0 5
29999: PPUSH
30000: CALL_OW 273
30004: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30005: LD_VAR 0 8
30009: PPUSH
30010: LD_VAR 0 9
30014: PPUSH
30015: CALL_OW 488
30019: NOT
30020: IFFALSE 30024
// exit ;
30022: GO 30131
// ComAnimCustom ( unit , 1 ) ;
30024: LD_VAR 0 1
30028: PPUSH
30029: LD_INT 1
30031: PPUSH
30032: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30036: LD_VAR 0 8
30040: PPUSH
30041: LD_VAR 0 9
30045: PPUSH
30046: LD_VAR 0 6
30050: PPUSH
30051: LD_VAR 0 7
30055: PPUSH
30056: CALL_OW 330
// repeat wait ( 1 ) ;
30060: LD_INT 1
30062: PPUSH
30063: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30067: LD_VAR 0 1
30071: PPUSH
30072: CALL_OW 316
30076: PUSH
30077: LD_VAR 0 1
30081: PPUSH
30082: CALL_OW 314
30086: OR
30087: PUSH
30088: LD_VAR 0 1
30092: PPUSH
30093: CALL_OW 302
30097: NOT
30098: OR
30099: PUSH
30100: LD_VAR 0 1
30104: PPUSH
30105: CALL_OW 301
30109: OR
30110: IFFALSE 30060
// RemoveSeeing ( _x , _y , side ) ;
30112: LD_VAR 0 8
30116: PPUSH
30117: LD_VAR 0 9
30121: PPUSH
30122: LD_VAR 0 6
30126: PPUSH
30127: CALL_OW 331
// end ; end_of_file
30131: LD_VAR 0 4
30135: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30136: LD_INT 0
30138: PPUSH
30139: PPUSH
// if exist_mode then
30140: LD_VAR 0 2
30144: IFFALSE 30169
// unit := CreateCharacter ( prefix & ident ) else
30146: LD_ADDR_VAR 0 5
30150: PUSH
30151: LD_VAR 0 3
30155: PUSH
30156: LD_VAR 0 1
30160: STR
30161: PPUSH
30162: CALL_OW 34
30166: ST_TO_ADDR
30167: GO 30184
// unit := NewCharacter ( ident ) ;
30169: LD_ADDR_VAR 0 5
30173: PUSH
30174: LD_VAR 0 1
30178: PPUSH
30179: CALL_OW 25
30183: ST_TO_ADDR
// result := unit ;
30184: LD_ADDR_VAR 0 4
30188: PUSH
30189: LD_VAR 0 5
30193: ST_TO_ADDR
// end ;
30194: LD_VAR 0 4
30198: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30199: LD_INT 0
30201: PPUSH
30202: PPUSH
// if not side or not nation then
30203: LD_VAR 0 1
30207: NOT
30208: PUSH
30209: LD_VAR 0 2
30213: NOT
30214: OR
30215: IFFALSE 30219
// exit ;
30217: GO 30987
// case nation of nation_american :
30219: LD_VAR 0 2
30223: PUSH
30224: LD_INT 1
30226: DOUBLE
30227: EQUAL
30228: IFTRUE 30232
30230: GO 30446
30232: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30233: LD_ADDR_VAR 0 4
30237: PUSH
30238: LD_INT 35
30240: PUSH
30241: LD_INT 45
30243: PUSH
30244: LD_INT 46
30246: PUSH
30247: LD_INT 47
30249: PUSH
30250: LD_INT 82
30252: PUSH
30253: LD_INT 83
30255: PUSH
30256: LD_INT 84
30258: PUSH
30259: LD_INT 85
30261: PUSH
30262: LD_INT 86
30264: PUSH
30265: LD_INT 1
30267: PUSH
30268: LD_INT 2
30270: PUSH
30271: LD_INT 6
30273: PUSH
30274: LD_INT 15
30276: PUSH
30277: LD_INT 16
30279: PUSH
30280: LD_INT 7
30282: PUSH
30283: LD_INT 12
30285: PUSH
30286: LD_INT 13
30288: PUSH
30289: LD_INT 10
30291: PUSH
30292: LD_INT 14
30294: PUSH
30295: LD_INT 20
30297: PUSH
30298: LD_INT 21
30300: PUSH
30301: LD_INT 22
30303: PUSH
30304: LD_INT 25
30306: PUSH
30307: LD_INT 32
30309: PUSH
30310: LD_INT 27
30312: PUSH
30313: LD_INT 36
30315: PUSH
30316: LD_INT 69
30318: PUSH
30319: LD_INT 39
30321: PUSH
30322: LD_INT 34
30324: PUSH
30325: LD_INT 40
30327: PUSH
30328: LD_INT 48
30330: PUSH
30331: LD_INT 49
30333: PUSH
30334: LD_INT 50
30336: PUSH
30337: LD_INT 51
30339: PUSH
30340: LD_INT 52
30342: PUSH
30343: LD_INT 53
30345: PUSH
30346: LD_INT 54
30348: PUSH
30349: LD_INT 55
30351: PUSH
30352: LD_INT 56
30354: PUSH
30355: LD_INT 57
30357: PUSH
30358: LD_INT 58
30360: PUSH
30361: LD_INT 59
30363: PUSH
30364: LD_INT 60
30366: PUSH
30367: LD_INT 61
30369: PUSH
30370: LD_INT 62
30372: PUSH
30373: LD_INT 80
30375: PUSH
30376: LD_INT 82
30378: PUSH
30379: LD_INT 83
30381: PUSH
30382: LD_INT 84
30384: PUSH
30385: LD_INT 85
30387: PUSH
30388: LD_INT 86
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: ST_TO_ADDR
30444: GO 30911
30446: LD_INT 2
30448: DOUBLE
30449: EQUAL
30450: IFTRUE 30454
30452: GO 30680
30454: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30455: LD_ADDR_VAR 0 4
30459: PUSH
30460: LD_INT 35
30462: PUSH
30463: LD_INT 45
30465: PUSH
30466: LD_INT 46
30468: PUSH
30469: LD_INT 47
30471: PUSH
30472: LD_INT 82
30474: PUSH
30475: LD_INT 83
30477: PUSH
30478: LD_INT 84
30480: PUSH
30481: LD_INT 85
30483: PUSH
30484: LD_INT 87
30486: PUSH
30487: LD_INT 70
30489: PUSH
30490: LD_INT 1
30492: PUSH
30493: LD_INT 11
30495: PUSH
30496: LD_INT 3
30498: PUSH
30499: LD_INT 4
30501: PUSH
30502: LD_INT 5
30504: PUSH
30505: LD_INT 6
30507: PUSH
30508: LD_INT 15
30510: PUSH
30511: LD_INT 18
30513: PUSH
30514: LD_INT 7
30516: PUSH
30517: LD_INT 17
30519: PUSH
30520: LD_INT 8
30522: PUSH
30523: LD_INT 20
30525: PUSH
30526: LD_INT 21
30528: PUSH
30529: LD_INT 22
30531: PUSH
30532: LD_INT 72
30534: PUSH
30535: LD_INT 26
30537: PUSH
30538: LD_INT 69
30540: PUSH
30541: LD_INT 39
30543: PUSH
30544: LD_INT 40
30546: PUSH
30547: LD_INT 41
30549: PUSH
30550: LD_INT 42
30552: PUSH
30553: LD_INT 43
30555: PUSH
30556: LD_INT 48
30558: PUSH
30559: LD_INT 49
30561: PUSH
30562: LD_INT 50
30564: PUSH
30565: LD_INT 51
30567: PUSH
30568: LD_INT 52
30570: PUSH
30571: LD_INT 53
30573: PUSH
30574: LD_INT 54
30576: PUSH
30577: LD_INT 55
30579: PUSH
30580: LD_INT 56
30582: PUSH
30583: LD_INT 60
30585: PUSH
30586: LD_INT 61
30588: PUSH
30589: LD_INT 62
30591: PUSH
30592: LD_INT 66
30594: PUSH
30595: LD_INT 67
30597: PUSH
30598: LD_INT 68
30600: PUSH
30601: LD_INT 81
30603: PUSH
30604: LD_INT 82
30606: PUSH
30607: LD_INT 83
30609: PUSH
30610: LD_INT 84
30612: PUSH
30613: LD_INT 85
30615: PUSH
30616: LD_INT 87
30618: PUSH
30619: LD_INT 88
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: ST_TO_ADDR
30678: GO 30911
30680: LD_INT 3
30682: DOUBLE
30683: EQUAL
30684: IFTRUE 30688
30686: GO 30910
30688: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30689: LD_ADDR_VAR 0 4
30693: PUSH
30694: LD_INT 46
30696: PUSH
30697: LD_INT 47
30699: PUSH
30700: LD_INT 1
30702: PUSH
30703: LD_INT 2
30705: PUSH
30706: LD_INT 82
30708: PUSH
30709: LD_INT 83
30711: PUSH
30712: LD_INT 84
30714: PUSH
30715: LD_INT 85
30717: PUSH
30718: LD_INT 86
30720: PUSH
30721: LD_INT 11
30723: PUSH
30724: LD_INT 9
30726: PUSH
30727: LD_INT 20
30729: PUSH
30730: LD_INT 19
30732: PUSH
30733: LD_INT 21
30735: PUSH
30736: LD_INT 24
30738: PUSH
30739: LD_INT 22
30741: PUSH
30742: LD_INT 25
30744: PUSH
30745: LD_INT 28
30747: PUSH
30748: LD_INT 29
30750: PUSH
30751: LD_INT 30
30753: PUSH
30754: LD_INT 31
30756: PUSH
30757: LD_INT 37
30759: PUSH
30760: LD_INT 38
30762: PUSH
30763: LD_INT 32
30765: PUSH
30766: LD_INT 27
30768: PUSH
30769: LD_INT 33
30771: PUSH
30772: LD_INT 69
30774: PUSH
30775: LD_INT 39
30777: PUSH
30778: LD_INT 34
30780: PUSH
30781: LD_INT 40
30783: PUSH
30784: LD_INT 71
30786: PUSH
30787: LD_INT 23
30789: PUSH
30790: LD_INT 44
30792: PUSH
30793: LD_INT 48
30795: PUSH
30796: LD_INT 49
30798: PUSH
30799: LD_INT 50
30801: PUSH
30802: LD_INT 51
30804: PUSH
30805: LD_INT 52
30807: PUSH
30808: LD_INT 53
30810: PUSH
30811: LD_INT 54
30813: PUSH
30814: LD_INT 55
30816: PUSH
30817: LD_INT 56
30819: PUSH
30820: LD_INT 57
30822: PUSH
30823: LD_INT 58
30825: PUSH
30826: LD_INT 59
30828: PUSH
30829: LD_INT 63
30831: PUSH
30832: LD_INT 64
30834: PUSH
30835: LD_INT 65
30837: PUSH
30838: LD_INT 82
30840: PUSH
30841: LD_INT 83
30843: PUSH
30844: LD_INT 84
30846: PUSH
30847: LD_INT 85
30849: PUSH
30850: LD_INT 86
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: ST_TO_ADDR
30908: GO 30911
30910: POP
// if state > - 1 and state < 3 then
30911: LD_VAR 0 3
30915: PUSH
30916: LD_INT 1
30918: NEG
30919: GREATER
30920: PUSH
30921: LD_VAR 0 3
30925: PUSH
30926: LD_INT 3
30928: LESS
30929: AND
30930: IFFALSE 30987
// for i in result do
30932: LD_ADDR_VAR 0 5
30936: PUSH
30937: LD_VAR 0 4
30941: PUSH
30942: FOR_IN
30943: IFFALSE 30985
// if GetTech ( i , side ) <> state then
30945: LD_VAR 0 5
30949: PPUSH
30950: LD_VAR 0 1
30954: PPUSH
30955: CALL_OW 321
30959: PUSH
30960: LD_VAR 0 3
30964: NONEQUAL
30965: IFFALSE 30983
// result := result diff i ;
30967: LD_ADDR_VAR 0 4
30971: PUSH
30972: LD_VAR 0 4
30976: PUSH
30977: LD_VAR 0 5
30981: DIFF
30982: ST_TO_ADDR
30983: GO 30942
30985: POP
30986: POP
// end ;
30987: LD_VAR 0 4
30991: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30992: LD_INT 0
30994: PPUSH
30995: PPUSH
30996: PPUSH
// result := true ;
30997: LD_ADDR_VAR 0 3
31001: PUSH
31002: LD_INT 1
31004: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31005: LD_ADDR_VAR 0 5
31009: PUSH
31010: LD_VAR 0 2
31014: PPUSH
31015: CALL_OW 480
31019: ST_TO_ADDR
// if not tmp then
31020: LD_VAR 0 5
31024: NOT
31025: IFFALSE 31029
// exit ;
31027: GO 31078
// for i in tmp do
31029: LD_ADDR_VAR 0 4
31033: PUSH
31034: LD_VAR 0 5
31038: PUSH
31039: FOR_IN
31040: IFFALSE 31076
// if GetTech ( i , side ) <> state_researched then
31042: LD_VAR 0 4
31046: PPUSH
31047: LD_VAR 0 1
31051: PPUSH
31052: CALL_OW 321
31056: PUSH
31057: LD_INT 2
31059: NONEQUAL
31060: IFFALSE 31074
// begin result := false ;
31062: LD_ADDR_VAR 0 3
31066: PUSH
31067: LD_INT 0
31069: ST_TO_ADDR
// exit ;
31070: POP
31071: POP
31072: GO 31078
// end ;
31074: GO 31039
31076: POP
31077: POP
// end ;
31078: LD_VAR 0 3
31082: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31083: LD_INT 0
31085: PPUSH
31086: PPUSH
31087: PPUSH
31088: PPUSH
31089: PPUSH
31090: PPUSH
31091: PPUSH
31092: PPUSH
31093: PPUSH
31094: PPUSH
31095: PPUSH
31096: PPUSH
31097: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31098: LD_VAR 0 1
31102: NOT
31103: PUSH
31104: LD_VAR 0 1
31108: PPUSH
31109: CALL_OW 257
31113: PUSH
31114: LD_INT 9
31116: NONEQUAL
31117: OR
31118: IFFALSE 31122
// exit ;
31120: GO 31695
// side := GetSide ( unit ) ;
31122: LD_ADDR_VAR 0 9
31126: PUSH
31127: LD_VAR 0 1
31131: PPUSH
31132: CALL_OW 255
31136: ST_TO_ADDR
// tech_space := tech_spacanom ;
31137: LD_ADDR_VAR 0 12
31141: PUSH
31142: LD_INT 29
31144: ST_TO_ADDR
// tech_time := tech_taurad ;
31145: LD_ADDR_VAR 0 13
31149: PUSH
31150: LD_INT 28
31152: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31153: LD_ADDR_VAR 0 11
31157: PUSH
31158: LD_VAR 0 1
31162: PPUSH
31163: CALL_OW 310
31167: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31168: LD_VAR 0 11
31172: PPUSH
31173: CALL_OW 247
31177: PUSH
31178: LD_INT 2
31180: EQUAL
31181: IFFALSE 31185
// exit ;
31183: GO 31695
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31185: LD_ADDR_VAR 0 8
31189: PUSH
31190: LD_INT 81
31192: PUSH
31193: LD_VAR 0 9
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 3
31204: PUSH
31205: LD_INT 21
31207: PUSH
31208: LD_INT 3
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PPUSH
31223: CALL_OW 69
31227: ST_TO_ADDR
// if not tmp then
31228: LD_VAR 0 8
31232: NOT
31233: IFFALSE 31237
// exit ;
31235: GO 31695
// if in_unit then
31237: LD_VAR 0 11
31241: IFFALSE 31265
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31243: LD_ADDR_VAR 0 10
31247: PUSH
31248: LD_VAR 0 8
31252: PPUSH
31253: LD_VAR 0 11
31257: PPUSH
31258: CALL_OW 74
31262: ST_TO_ADDR
31263: GO 31285
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31265: LD_ADDR_VAR 0 10
31269: PUSH
31270: LD_VAR 0 8
31274: PPUSH
31275: LD_VAR 0 1
31279: PPUSH
31280: CALL_OW 74
31284: ST_TO_ADDR
// if not enemy then
31285: LD_VAR 0 10
31289: NOT
31290: IFFALSE 31294
// exit ;
31292: GO 31695
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31294: LD_VAR 0 11
31298: PUSH
31299: LD_VAR 0 11
31303: PPUSH
31304: LD_VAR 0 10
31308: PPUSH
31309: CALL_OW 296
31313: PUSH
31314: LD_INT 13
31316: GREATER
31317: AND
31318: PUSH
31319: LD_VAR 0 1
31323: PPUSH
31324: LD_VAR 0 10
31328: PPUSH
31329: CALL_OW 296
31333: PUSH
31334: LD_INT 12
31336: GREATER
31337: OR
31338: IFFALSE 31342
// exit ;
31340: GO 31695
// missile := [ 1 ] ;
31342: LD_ADDR_VAR 0 14
31346: PUSH
31347: LD_INT 1
31349: PUSH
31350: EMPTY
31351: LIST
31352: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31353: LD_VAR 0 9
31357: PPUSH
31358: LD_VAR 0 12
31362: PPUSH
31363: CALL_OW 325
31367: IFFALSE 31396
// missile := Replace ( missile , missile + 1 , 2 ) ;
31369: LD_ADDR_VAR 0 14
31373: PUSH
31374: LD_VAR 0 14
31378: PPUSH
31379: LD_VAR 0 14
31383: PUSH
31384: LD_INT 1
31386: PLUS
31387: PPUSH
31388: LD_INT 2
31390: PPUSH
31391: CALL_OW 1
31395: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31396: LD_VAR 0 9
31400: PPUSH
31401: LD_VAR 0 13
31405: PPUSH
31406: CALL_OW 325
31410: PUSH
31411: LD_VAR 0 10
31415: PPUSH
31416: CALL_OW 255
31420: PPUSH
31421: LD_VAR 0 13
31425: PPUSH
31426: CALL_OW 325
31430: NOT
31431: AND
31432: IFFALSE 31461
// missile := Replace ( missile , missile + 1 , 3 ) ;
31434: LD_ADDR_VAR 0 14
31438: PUSH
31439: LD_VAR 0 14
31443: PPUSH
31444: LD_VAR 0 14
31448: PUSH
31449: LD_INT 1
31451: PLUS
31452: PPUSH
31453: LD_INT 3
31455: PPUSH
31456: CALL_OW 1
31460: ST_TO_ADDR
// if missile < 2 then
31461: LD_VAR 0 14
31465: PUSH
31466: LD_INT 2
31468: LESS
31469: IFFALSE 31473
// exit ;
31471: GO 31695
// x := GetX ( enemy ) ;
31473: LD_ADDR_VAR 0 4
31477: PUSH
31478: LD_VAR 0 10
31482: PPUSH
31483: CALL_OW 250
31487: ST_TO_ADDR
// y := GetY ( enemy ) ;
31488: LD_ADDR_VAR 0 5
31492: PUSH
31493: LD_VAR 0 10
31497: PPUSH
31498: CALL_OW 251
31502: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31503: LD_ADDR_VAR 0 6
31507: PUSH
31508: LD_VAR 0 4
31512: PUSH
31513: LD_INT 1
31515: NEG
31516: PPUSH
31517: LD_INT 1
31519: PPUSH
31520: CALL_OW 12
31524: PLUS
31525: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31526: LD_ADDR_VAR 0 7
31530: PUSH
31531: LD_VAR 0 5
31535: PUSH
31536: LD_INT 1
31538: NEG
31539: PPUSH
31540: LD_INT 1
31542: PPUSH
31543: CALL_OW 12
31547: PLUS
31548: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31549: LD_VAR 0 6
31553: PPUSH
31554: LD_VAR 0 7
31558: PPUSH
31559: CALL_OW 488
31563: NOT
31564: IFFALSE 31586
// begin _x := x ;
31566: LD_ADDR_VAR 0 6
31570: PUSH
31571: LD_VAR 0 4
31575: ST_TO_ADDR
// _y := y ;
31576: LD_ADDR_VAR 0 7
31580: PUSH
31581: LD_VAR 0 5
31585: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31586: LD_ADDR_VAR 0 3
31590: PUSH
31591: LD_INT 1
31593: PPUSH
31594: LD_VAR 0 14
31598: PPUSH
31599: CALL_OW 12
31603: ST_TO_ADDR
// case i of 1 :
31604: LD_VAR 0 3
31608: PUSH
31609: LD_INT 1
31611: DOUBLE
31612: EQUAL
31613: IFTRUE 31617
31615: GO 31634
31617: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31618: LD_VAR 0 1
31622: PPUSH
31623: LD_VAR 0 10
31627: PPUSH
31628: CALL_OW 115
31632: GO 31695
31634: LD_INT 2
31636: DOUBLE
31637: EQUAL
31638: IFTRUE 31642
31640: GO 31664
31642: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31643: LD_VAR 0 1
31647: PPUSH
31648: LD_VAR 0 6
31652: PPUSH
31653: LD_VAR 0 7
31657: PPUSH
31658: CALL_OW 153
31662: GO 31695
31664: LD_INT 3
31666: DOUBLE
31667: EQUAL
31668: IFTRUE 31672
31670: GO 31694
31672: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31673: LD_VAR 0 1
31677: PPUSH
31678: LD_VAR 0 6
31682: PPUSH
31683: LD_VAR 0 7
31687: PPUSH
31688: CALL_OW 154
31692: GO 31695
31694: POP
// end ;
31695: LD_VAR 0 2
31699: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31700: LD_INT 0
31702: PPUSH
31703: PPUSH
31704: PPUSH
31705: PPUSH
31706: PPUSH
31707: PPUSH
// if not unit or not building then
31708: LD_VAR 0 1
31712: NOT
31713: PUSH
31714: LD_VAR 0 2
31718: NOT
31719: OR
31720: IFFALSE 31724
// exit ;
31722: GO 31882
// x := GetX ( building ) ;
31724: LD_ADDR_VAR 0 5
31728: PUSH
31729: LD_VAR 0 2
31733: PPUSH
31734: CALL_OW 250
31738: ST_TO_ADDR
// y := GetY ( building ) ;
31739: LD_ADDR_VAR 0 6
31743: PUSH
31744: LD_VAR 0 2
31748: PPUSH
31749: CALL_OW 251
31753: ST_TO_ADDR
// for i = 0 to 5 do
31754: LD_ADDR_VAR 0 4
31758: PUSH
31759: DOUBLE
31760: LD_INT 0
31762: DEC
31763: ST_TO_ADDR
31764: LD_INT 5
31766: PUSH
31767: FOR_TO
31768: IFFALSE 31880
// begin _x := ShiftX ( x , i , 3 ) ;
31770: LD_ADDR_VAR 0 7
31774: PUSH
31775: LD_VAR 0 5
31779: PPUSH
31780: LD_VAR 0 4
31784: PPUSH
31785: LD_INT 3
31787: PPUSH
31788: CALL_OW 272
31792: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31793: LD_ADDR_VAR 0 8
31797: PUSH
31798: LD_VAR 0 6
31802: PPUSH
31803: LD_VAR 0 4
31807: PPUSH
31808: LD_INT 3
31810: PPUSH
31811: CALL_OW 273
31815: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31816: LD_VAR 0 7
31820: PPUSH
31821: LD_VAR 0 8
31825: PPUSH
31826: CALL_OW 488
31830: NOT
31831: IFFALSE 31835
// continue ;
31833: GO 31767
// if HexInfo ( _x , _y ) = 0 then
31835: LD_VAR 0 7
31839: PPUSH
31840: LD_VAR 0 8
31844: PPUSH
31845: CALL_OW 428
31849: PUSH
31850: LD_INT 0
31852: EQUAL
31853: IFFALSE 31878
// begin ComMoveXY ( unit , _x , _y ) ;
31855: LD_VAR 0 1
31859: PPUSH
31860: LD_VAR 0 7
31864: PPUSH
31865: LD_VAR 0 8
31869: PPUSH
31870: CALL_OW 111
// exit ;
31874: POP
31875: POP
31876: GO 31882
// end ; end ;
31878: GO 31767
31880: POP
31881: POP
// end ;
31882: LD_VAR 0 3
31886: RET
// export function ScanBase ( side , base_area ) ; begin
31887: LD_INT 0
31889: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31890: LD_ADDR_VAR 0 3
31894: PUSH
31895: LD_VAR 0 2
31899: PPUSH
31900: LD_INT 81
31902: PUSH
31903: LD_VAR 0 1
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PPUSH
31912: CALL_OW 70
31916: ST_TO_ADDR
// end ;
31917: LD_VAR 0 3
31921: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31922: LD_INT 0
31924: PPUSH
31925: PPUSH
31926: PPUSH
31927: PPUSH
// result := false ;
31928: LD_ADDR_VAR 0 2
31932: PUSH
31933: LD_INT 0
31935: ST_TO_ADDR
// side := GetSide ( unit ) ;
31936: LD_ADDR_VAR 0 3
31940: PUSH
31941: LD_VAR 0 1
31945: PPUSH
31946: CALL_OW 255
31950: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31951: LD_ADDR_VAR 0 4
31955: PUSH
31956: LD_VAR 0 1
31960: PPUSH
31961: CALL_OW 248
31965: ST_TO_ADDR
// case nat of 1 :
31966: LD_VAR 0 4
31970: PUSH
31971: LD_INT 1
31973: DOUBLE
31974: EQUAL
31975: IFTRUE 31979
31977: GO 31990
31979: POP
// tech := tech_lassight ; 2 :
31980: LD_ADDR_VAR 0 5
31984: PUSH
31985: LD_INT 12
31987: ST_TO_ADDR
31988: GO 32029
31990: LD_INT 2
31992: DOUBLE
31993: EQUAL
31994: IFTRUE 31998
31996: GO 32009
31998: POP
// tech := tech_mortar ; 3 :
31999: LD_ADDR_VAR 0 5
32003: PUSH
32004: LD_INT 41
32006: ST_TO_ADDR
32007: GO 32029
32009: LD_INT 3
32011: DOUBLE
32012: EQUAL
32013: IFTRUE 32017
32015: GO 32028
32017: POP
// tech := tech_bazooka ; end ;
32018: LD_ADDR_VAR 0 5
32022: PUSH
32023: LD_INT 44
32025: ST_TO_ADDR
32026: GO 32029
32028: POP
// if Researched ( side , tech ) then
32029: LD_VAR 0 3
32033: PPUSH
32034: LD_VAR 0 5
32038: PPUSH
32039: CALL_OW 325
32043: IFFALSE 32070
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32045: LD_ADDR_VAR 0 2
32049: PUSH
32050: LD_INT 5
32052: PUSH
32053: LD_INT 8
32055: PUSH
32056: LD_INT 9
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: LIST
32063: PUSH
32064: LD_VAR 0 4
32068: ARRAY
32069: ST_TO_ADDR
// end ;
32070: LD_VAR 0 2
32074: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32075: LD_INT 0
32077: PPUSH
32078: PPUSH
32079: PPUSH
// if not mines then
32080: LD_VAR 0 2
32084: NOT
32085: IFFALSE 32089
// exit ;
32087: GO 32233
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32089: LD_ADDR_VAR 0 5
32093: PUSH
32094: LD_INT 81
32096: PUSH
32097: LD_VAR 0 1
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 3
32108: PUSH
32109: LD_INT 21
32111: PUSH
32112: LD_INT 3
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PPUSH
32127: CALL_OW 69
32131: ST_TO_ADDR
// for i in mines do
32132: LD_ADDR_VAR 0 4
32136: PUSH
32137: LD_VAR 0 2
32141: PUSH
32142: FOR_IN
32143: IFFALSE 32231
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32145: LD_VAR 0 4
32149: PUSH
32150: LD_INT 1
32152: ARRAY
32153: PPUSH
32154: LD_VAR 0 4
32158: PUSH
32159: LD_INT 2
32161: ARRAY
32162: PPUSH
32163: CALL_OW 458
32167: NOT
32168: IFFALSE 32172
// continue ;
32170: GO 32142
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32172: LD_VAR 0 4
32176: PUSH
32177: LD_INT 1
32179: ARRAY
32180: PPUSH
32181: LD_VAR 0 4
32185: PUSH
32186: LD_INT 2
32188: ARRAY
32189: PPUSH
32190: CALL_OW 428
32194: PUSH
32195: LD_VAR 0 5
32199: IN
32200: IFFALSE 32229
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32202: LD_VAR 0 4
32206: PUSH
32207: LD_INT 1
32209: ARRAY
32210: PPUSH
32211: LD_VAR 0 4
32215: PUSH
32216: LD_INT 2
32218: ARRAY
32219: PPUSH
32220: LD_VAR 0 1
32224: PPUSH
32225: CALL_OW 456
// end ;
32229: GO 32142
32231: POP
32232: POP
// end ;
32233: LD_VAR 0 3
32237: RET
// export function Count ( array ) ; var i ; begin
32238: LD_INT 0
32240: PPUSH
32241: PPUSH
// result := 0 ;
32242: LD_ADDR_VAR 0 2
32246: PUSH
32247: LD_INT 0
32249: ST_TO_ADDR
// for i in array do
32250: LD_ADDR_VAR 0 3
32254: PUSH
32255: LD_VAR 0 1
32259: PUSH
32260: FOR_IN
32261: IFFALSE 32285
// if i then
32263: LD_VAR 0 3
32267: IFFALSE 32283
// result := result + 1 ;
32269: LD_ADDR_VAR 0 2
32273: PUSH
32274: LD_VAR 0 2
32278: PUSH
32279: LD_INT 1
32281: PLUS
32282: ST_TO_ADDR
32283: GO 32260
32285: POP
32286: POP
// end ;
32287: LD_VAR 0 2
32291: RET
// export function IsEmpty ( building ) ; begin
32292: LD_INT 0
32294: PPUSH
// if not building then
32295: LD_VAR 0 1
32299: NOT
32300: IFFALSE 32304
// exit ;
32302: GO 32347
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32304: LD_ADDR_VAR 0 2
32308: PUSH
32309: LD_VAR 0 1
32313: PUSH
32314: LD_INT 22
32316: PUSH
32317: LD_VAR 0 1
32321: PPUSH
32322: CALL_OW 255
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 58
32333: PUSH
32334: EMPTY
32335: LIST
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PPUSH
32341: CALL_OW 69
32345: IN
32346: ST_TO_ADDR
// end ;
32347: LD_VAR 0 2
32351: RET
// export function IsNotFull ( building ) ; var places ; begin
32352: LD_INT 0
32354: PPUSH
32355: PPUSH
// if not building then
32356: LD_VAR 0 1
32360: NOT
32361: IFFALSE 32365
// exit ;
32363: GO 32536
// result := false ;
32365: LD_ADDR_VAR 0 2
32369: PUSH
32370: LD_INT 0
32372: ST_TO_ADDR
// places := 0 ;
32373: LD_ADDR_VAR 0 3
32377: PUSH
32378: LD_INT 0
32380: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32381: LD_VAR 0 1
32385: PPUSH
32386: CALL_OW 266
32390: PUSH
32391: LD_INT 0
32393: DOUBLE
32394: EQUAL
32395: IFTRUE 32453
32397: LD_INT 1
32399: DOUBLE
32400: EQUAL
32401: IFTRUE 32453
32403: LD_INT 6
32405: DOUBLE
32406: EQUAL
32407: IFTRUE 32453
32409: LD_INT 7
32411: DOUBLE
32412: EQUAL
32413: IFTRUE 32453
32415: LD_INT 8
32417: DOUBLE
32418: EQUAL
32419: IFTRUE 32453
32421: LD_INT 4
32423: DOUBLE
32424: EQUAL
32425: IFTRUE 32453
32427: LD_INT 5
32429: DOUBLE
32430: EQUAL
32431: IFTRUE 32453
32433: LD_INT 2
32435: DOUBLE
32436: EQUAL
32437: IFTRUE 32453
32439: LD_INT 3
32441: DOUBLE
32442: EQUAL
32443: IFTRUE 32453
32445: LD_INT 35
32447: DOUBLE
32448: EQUAL
32449: IFTRUE 32453
32451: GO 32464
32453: POP
// places := 6 ; b_bunker , b_breastwork :
32454: LD_ADDR_VAR 0 3
32458: PUSH
32459: LD_INT 6
32461: ST_TO_ADDR
32462: GO 32509
32464: LD_INT 32
32466: DOUBLE
32467: EQUAL
32468: IFTRUE 32478
32470: LD_INT 31
32472: DOUBLE
32473: EQUAL
32474: IFTRUE 32478
32476: GO 32489
32478: POP
// places := 1 ; b_control_tower :
32479: LD_ADDR_VAR 0 3
32483: PUSH
32484: LD_INT 1
32486: ST_TO_ADDR
32487: GO 32509
32489: LD_INT 36
32491: DOUBLE
32492: EQUAL
32493: IFTRUE 32497
32495: GO 32508
32497: POP
// places := 3 ; end ;
32498: LD_ADDR_VAR 0 3
32502: PUSH
32503: LD_INT 3
32505: ST_TO_ADDR
32506: GO 32509
32508: POP
// if places then
32509: LD_VAR 0 3
32513: IFFALSE 32536
// result := UnitsInside ( building ) < places ;
32515: LD_ADDR_VAR 0 2
32519: PUSH
32520: LD_VAR 0 1
32524: PPUSH
32525: CALL_OW 313
32529: PUSH
32530: LD_VAR 0 3
32534: LESS
32535: ST_TO_ADDR
// end ;
32536: LD_VAR 0 2
32540: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32541: LD_INT 0
32543: PPUSH
32544: PPUSH
32545: PPUSH
32546: PPUSH
// tmp := [ ] ;
32547: LD_ADDR_VAR 0 3
32551: PUSH
32552: EMPTY
32553: ST_TO_ADDR
// list := [ ] ;
32554: LD_ADDR_VAR 0 5
32558: PUSH
32559: EMPTY
32560: ST_TO_ADDR
// for i = 16 to 25 do
32561: LD_ADDR_VAR 0 4
32565: PUSH
32566: DOUBLE
32567: LD_INT 16
32569: DEC
32570: ST_TO_ADDR
32571: LD_INT 25
32573: PUSH
32574: FOR_TO
32575: IFFALSE 32648
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32577: LD_ADDR_VAR 0 3
32581: PUSH
32582: LD_VAR 0 3
32586: PUSH
32587: LD_INT 22
32589: PUSH
32590: LD_VAR 0 1
32594: PPUSH
32595: CALL_OW 255
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 91
32606: PUSH
32607: LD_VAR 0 1
32611: PUSH
32612: LD_INT 6
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 30
32622: PUSH
32623: LD_VAR 0 4
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: LIST
32636: PUSH
32637: EMPTY
32638: LIST
32639: PPUSH
32640: CALL_OW 69
32644: ADD
32645: ST_TO_ADDR
32646: GO 32574
32648: POP
32649: POP
// for i = 1 to tmp do
32650: LD_ADDR_VAR 0 4
32654: PUSH
32655: DOUBLE
32656: LD_INT 1
32658: DEC
32659: ST_TO_ADDR
32660: LD_VAR 0 3
32664: PUSH
32665: FOR_TO
32666: IFFALSE 32754
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32668: LD_ADDR_VAR 0 5
32672: PUSH
32673: LD_VAR 0 5
32677: PUSH
32678: LD_VAR 0 3
32682: PUSH
32683: LD_VAR 0 4
32687: ARRAY
32688: PPUSH
32689: CALL_OW 266
32693: PUSH
32694: LD_VAR 0 3
32698: PUSH
32699: LD_VAR 0 4
32703: ARRAY
32704: PPUSH
32705: CALL_OW 250
32709: PUSH
32710: LD_VAR 0 3
32714: PUSH
32715: LD_VAR 0 4
32719: ARRAY
32720: PPUSH
32721: CALL_OW 251
32725: PUSH
32726: LD_VAR 0 3
32730: PUSH
32731: LD_VAR 0 4
32735: ARRAY
32736: PPUSH
32737: CALL_OW 254
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: PUSH
32748: EMPTY
32749: LIST
32750: ADD
32751: ST_TO_ADDR
32752: GO 32665
32754: POP
32755: POP
// result := list ;
32756: LD_ADDR_VAR 0 2
32760: PUSH
32761: LD_VAR 0 5
32765: ST_TO_ADDR
// end ;
32766: LD_VAR 0 2
32770: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32771: LD_INT 0
32773: PPUSH
32774: PPUSH
32775: PPUSH
32776: PPUSH
32777: PPUSH
32778: PPUSH
32779: PPUSH
// if not factory then
32780: LD_VAR 0 1
32784: NOT
32785: IFFALSE 32789
// exit ;
32787: GO 33382
// if control = control_apeman then
32789: LD_VAR 0 4
32793: PUSH
32794: LD_INT 5
32796: EQUAL
32797: IFFALSE 32906
// begin tmp := UnitsInside ( factory ) ;
32799: LD_ADDR_VAR 0 8
32803: PUSH
32804: LD_VAR 0 1
32808: PPUSH
32809: CALL_OW 313
32813: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32814: LD_VAR 0 8
32818: PPUSH
32819: LD_INT 25
32821: PUSH
32822: LD_INT 12
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PPUSH
32829: CALL_OW 72
32833: NOT
32834: IFFALSE 32844
// control := control_manual ;
32836: LD_ADDR_VAR 0 4
32840: PUSH
32841: LD_INT 1
32843: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32844: LD_ADDR_VAR 0 8
32848: PUSH
32849: LD_VAR 0 1
32853: PPUSH
32854: CALL 32541 0 1
32858: ST_TO_ADDR
// if tmp then
32859: LD_VAR 0 8
32863: IFFALSE 32906
// begin for i in tmp do
32865: LD_ADDR_VAR 0 7
32869: PUSH
32870: LD_VAR 0 8
32874: PUSH
32875: FOR_IN
32876: IFFALSE 32904
// if i [ 1 ] = b_ext_radio then
32878: LD_VAR 0 7
32882: PUSH
32883: LD_INT 1
32885: ARRAY
32886: PUSH
32887: LD_INT 22
32889: EQUAL
32890: IFFALSE 32902
// begin control := control_remote ;
32892: LD_ADDR_VAR 0 4
32896: PUSH
32897: LD_INT 2
32899: ST_TO_ADDR
// break ;
32900: GO 32904
// end ;
32902: GO 32875
32904: POP
32905: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32906: LD_VAR 0 1
32910: PPUSH
32911: LD_VAR 0 2
32915: PPUSH
32916: LD_VAR 0 3
32920: PPUSH
32921: LD_VAR 0 4
32925: PPUSH
32926: LD_VAR 0 5
32930: PPUSH
32931: CALL_OW 448
32935: IFFALSE 32970
// begin result := [ chassis , engine , control , weapon ] ;
32937: LD_ADDR_VAR 0 6
32941: PUSH
32942: LD_VAR 0 2
32946: PUSH
32947: LD_VAR 0 3
32951: PUSH
32952: LD_VAR 0 4
32956: PUSH
32957: LD_VAR 0 5
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: ST_TO_ADDR
// exit ;
32968: GO 33382
// end ; _chassis := AvailableChassisList ( factory ) ;
32970: LD_ADDR_VAR 0 9
32974: PUSH
32975: LD_VAR 0 1
32979: PPUSH
32980: CALL_OW 475
32984: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32985: LD_ADDR_VAR 0 11
32989: PUSH
32990: LD_VAR 0 1
32994: PPUSH
32995: CALL_OW 476
32999: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33000: LD_ADDR_VAR 0 12
33004: PUSH
33005: LD_VAR 0 1
33009: PPUSH
33010: CALL_OW 477
33014: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33015: LD_ADDR_VAR 0 10
33019: PUSH
33020: LD_VAR 0 1
33024: PPUSH
33025: CALL_OW 478
33029: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33030: LD_VAR 0 9
33034: NOT
33035: PUSH
33036: LD_VAR 0 11
33040: NOT
33041: OR
33042: PUSH
33043: LD_VAR 0 12
33047: NOT
33048: OR
33049: PUSH
33050: LD_VAR 0 10
33054: NOT
33055: OR
33056: IFFALSE 33091
// begin result := [ chassis , engine , control , weapon ] ;
33058: LD_ADDR_VAR 0 6
33062: PUSH
33063: LD_VAR 0 2
33067: PUSH
33068: LD_VAR 0 3
33072: PUSH
33073: LD_VAR 0 4
33077: PUSH
33078: LD_VAR 0 5
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: ST_TO_ADDR
// exit ;
33089: GO 33382
// end ; if not chassis in _chassis then
33091: LD_VAR 0 2
33095: PUSH
33096: LD_VAR 0 9
33100: IN
33101: NOT
33102: IFFALSE 33128
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33104: LD_ADDR_VAR 0 2
33108: PUSH
33109: LD_VAR 0 9
33113: PUSH
33114: LD_INT 1
33116: PPUSH
33117: LD_VAR 0 9
33121: PPUSH
33122: CALL_OW 12
33126: ARRAY
33127: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33128: LD_VAR 0 2
33132: PPUSH
33133: LD_VAR 0 3
33137: PPUSH
33138: CALL 33387 0 2
33142: NOT
33143: IFFALSE 33202
// repeat engine := _engine [ 1 ] ;
33145: LD_ADDR_VAR 0 3
33149: PUSH
33150: LD_VAR 0 11
33154: PUSH
33155: LD_INT 1
33157: ARRAY
33158: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33159: LD_ADDR_VAR 0 11
33163: PUSH
33164: LD_VAR 0 11
33168: PPUSH
33169: LD_INT 1
33171: PPUSH
33172: CALL_OW 3
33176: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33177: LD_VAR 0 2
33181: PPUSH
33182: LD_VAR 0 3
33186: PPUSH
33187: CALL 33387 0 2
33191: PUSH
33192: LD_VAR 0 11
33196: PUSH
33197: EMPTY
33198: EQUAL
33199: OR
33200: IFFALSE 33145
// if not control in _control then
33202: LD_VAR 0 4
33206: PUSH
33207: LD_VAR 0 12
33211: IN
33212: NOT
33213: IFFALSE 33239
// control := _control [ rand ( 1 , _control ) ] ;
33215: LD_ADDR_VAR 0 4
33219: PUSH
33220: LD_VAR 0 12
33224: PUSH
33225: LD_INT 1
33227: PPUSH
33228: LD_VAR 0 12
33232: PPUSH
33233: CALL_OW 12
33237: ARRAY
33238: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33239: LD_VAR 0 2
33243: PPUSH
33244: LD_VAR 0 5
33248: PPUSH
33249: CALL 33607 0 2
33253: NOT
33254: IFFALSE 33313
// repeat weapon := _weapon [ 1 ] ;
33256: LD_ADDR_VAR 0 5
33260: PUSH
33261: LD_VAR 0 10
33265: PUSH
33266: LD_INT 1
33268: ARRAY
33269: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33270: LD_ADDR_VAR 0 10
33274: PUSH
33275: LD_VAR 0 10
33279: PPUSH
33280: LD_INT 1
33282: PPUSH
33283: CALL_OW 3
33287: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33288: LD_VAR 0 2
33292: PPUSH
33293: LD_VAR 0 5
33297: PPUSH
33298: CALL 33607 0 2
33302: PUSH
33303: LD_VAR 0 10
33307: PUSH
33308: EMPTY
33309: EQUAL
33310: OR
33311: IFFALSE 33256
// result := [ ] ;
33313: LD_ADDR_VAR 0 6
33317: PUSH
33318: EMPTY
33319: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33320: LD_VAR 0 1
33324: PPUSH
33325: LD_VAR 0 2
33329: PPUSH
33330: LD_VAR 0 3
33334: PPUSH
33335: LD_VAR 0 4
33339: PPUSH
33340: LD_VAR 0 5
33344: PPUSH
33345: CALL_OW 448
33349: IFFALSE 33382
// result := [ chassis , engine , control , weapon ] ;
33351: LD_ADDR_VAR 0 6
33355: PUSH
33356: LD_VAR 0 2
33360: PUSH
33361: LD_VAR 0 3
33365: PUSH
33366: LD_VAR 0 4
33370: PUSH
33371: LD_VAR 0 5
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: ST_TO_ADDR
// end ;
33382: LD_VAR 0 6
33386: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33387: LD_INT 0
33389: PPUSH
// if not chassis or not engine then
33390: LD_VAR 0 1
33394: NOT
33395: PUSH
33396: LD_VAR 0 2
33400: NOT
33401: OR
33402: IFFALSE 33406
// exit ;
33404: GO 33602
// case engine of engine_solar :
33406: LD_VAR 0 2
33410: PUSH
33411: LD_INT 2
33413: DOUBLE
33414: EQUAL
33415: IFTRUE 33419
33417: GO 33457
33419: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33420: LD_ADDR_VAR 0 3
33424: PUSH
33425: LD_INT 11
33427: PUSH
33428: LD_INT 12
33430: PUSH
33431: LD_INT 13
33433: PUSH
33434: LD_INT 14
33436: PUSH
33437: LD_INT 1
33439: PUSH
33440: LD_INT 2
33442: PUSH
33443: LD_INT 3
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: ST_TO_ADDR
33455: GO 33586
33457: LD_INT 1
33459: DOUBLE
33460: EQUAL
33461: IFTRUE 33465
33463: GO 33527
33465: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33466: LD_ADDR_VAR 0 3
33470: PUSH
33471: LD_INT 11
33473: PUSH
33474: LD_INT 12
33476: PUSH
33477: LD_INT 13
33479: PUSH
33480: LD_INT 14
33482: PUSH
33483: LD_INT 1
33485: PUSH
33486: LD_INT 2
33488: PUSH
33489: LD_INT 3
33491: PUSH
33492: LD_INT 4
33494: PUSH
33495: LD_INT 5
33497: PUSH
33498: LD_INT 21
33500: PUSH
33501: LD_INT 23
33503: PUSH
33504: LD_INT 22
33506: PUSH
33507: LD_INT 24
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: ST_TO_ADDR
33525: GO 33586
33527: LD_INT 3
33529: DOUBLE
33530: EQUAL
33531: IFTRUE 33535
33533: GO 33585
33535: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33536: LD_ADDR_VAR 0 3
33540: PUSH
33541: LD_INT 13
33543: PUSH
33544: LD_INT 14
33546: PUSH
33547: LD_INT 2
33549: PUSH
33550: LD_INT 3
33552: PUSH
33553: LD_INT 4
33555: PUSH
33556: LD_INT 5
33558: PUSH
33559: LD_INT 21
33561: PUSH
33562: LD_INT 22
33564: PUSH
33565: LD_INT 23
33567: PUSH
33568: LD_INT 24
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: ST_TO_ADDR
33583: GO 33586
33585: POP
// result := ( chassis in result ) ;
33586: LD_ADDR_VAR 0 3
33590: PUSH
33591: LD_VAR 0 1
33595: PUSH
33596: LD_VAR 0 3
33600: IN
33601: ST_TO_ADDR
// end ;
33602: LD_VAR 0 3
33606: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33607: LD_INT 0
33609: PPUSH
// if not chassis or not weapon then
33610: LD_VAR 0 1
33614: NOT
33615: PUSH
33616: LD_VAR 0 2
33620: NOT
33621: OR
33622: IFFALSE 33626
// exit ;
33624: GO 34688
// case weapon of us_machine_gun :
33626: LD_VAR 0 2
33630: PUSH
33631: LD_INT 2
33633: DOUBLE
33634: EQUAL
33635: IFTRUE 33639
33637: GO 33669
33639: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33640: LD_ADDR_VAR 0 3
33644: PUSH
33645: LD_INT 1
33647: PUSH
33648: LD_INT 2
33650: PUSH
33651: LD_INT 3
33653: PUSH
33654: LD_INT 4
33656: PUSH
33657: LD_INT 5
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: ST_TO_ADDR
33667: GO 34672
33669: LD_INT 3
33671: DOUBLE
33672: EQUAL
33673: IFTRUE 33677
33675: GO 33707
33677: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33678: LD_ADDR_VAR 0 3
33682: PUSH
33683: LD_INT 1
33685: PUSH
33686: LD_INT 2
33688: PUSH
33689: LD_INT 3
33691: PUSH
33692: LD_INT 4
33694: PUSH
33695: LD_INT 5
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: ST_TO_ADDR
33705: GO 34672
33707: LD_INT 11
33709: DOUBLE
33710: EQUAL
33711: IFTRUE 33715
33713: GO 33745
33715: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33716: LD_ADDR_VAR 0 3
33720: PUSH
33721: LD_INT 1
33723: PUSH
33724: LD_INT 2
33726: PUSH
33727: LD_INT 3
33729: PUSH
33730: LD_INT 4
33732: PUSH
33733: LD_INT 5
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: ST_TO_ADDR
33743: GO 34672
33745: LD_INT 4
33747: DOUBLE
33748: EQUAL
33749: IFTRUE 33753
33751: GO 33779
33753: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33754: LD_ADDR_VAR 0 3
33758: PUSH
33759: LD_INT 2
33761: PUSH
33762: LD_INT 3
33764: PUSH
33765: LD_INT 4
33767: PUSH
33768: LD_INT 5
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: ST_TO_ADDR
33777: GO 34672
33779: LD_INT 5
33781: DOUBLE
33782: EQUAL
33783: IFTRUE 33787
33785: GO 33813
33787: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33788: LD_ADDR_VAR 0 3
33792: PUSH
33793: LD_INT 2
33795: PUSH
33796: LD_INT 3
33798: PUSH
33799: LD_INT 4
33801: PUSH
33802: LD_INT 5
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: ST_TO_ADDR
33811: GO 34672
33813: LD_INT 9
33815: DOUBLE
33816: EQUAL
33817: IFTRUE 33821
33819: GO 33847
33821: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33822: LD_ADDR_VAR 0 3
33826: PUSH
33827: LD_INT 2
33829: PUSH
33830: LD_INT 3
33832: PUSH
33833: LD_INT 4
33835: PUSH
33836: LD_INT 5
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: ST_TO_ADDR
33845: GO 34672
33847: LD_INT 7
33849: DOUBLE
33850: EQUAL
33851: IFTRUE 33855
33853: GO 33881
33855: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33856: LD_ADDR_VAR 0 3
33860: PUSH
33861: LD_INT 2
33863: PUSH
33864: LD_INT 3
33866: PUSH
33867: LD_INT 4
33869: PUSH
33870: LD_INT 5
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: ST_TO_ADDR
33879: GO 34672
33881: LD_INT 12
33883: DOUBLE
33884: EQUAL
33885: IFTRUE 33889
33887: GO 33915
33889: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33890: LD_ADDR_VAR 0 3
33894: PUSH
33895: LD_INT 2
33897: PUSH
33898: LD_INT 3
33900: PUSH
33901: LD_INT 4
33903: PUSH
33904: LD_INT 5
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: ST_TO_ADDR
33913: GO 34672
33915: LD_INT 13
33917: DOUBLE
33918: EQUAL
33919: IFTRUE 33923
33921: GO 33949
33923: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33924: LD_ADDR_VAR 0 3
33928: PUSH
33929: LD_INT 2
33931: PUSH
33932: LD_INT 3
33934: PUSH
33935: LD_INT 4
33937: PUSH
33938: LD_INT 5
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: ST_TO_ADDR
33947: GO 34672
33949: LD_INT 14
33951: DOUBLE
33952: EQUAL
33953: IFTRUE 33957
33955: GO 33975
33957: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33958: LD_ADDR_VAR 0 3
33962: PUSH
33963: LD_INT 4
33965: PUSH
33966: LD_INT 5
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: ST_TO_ADDR
33973: GO 34672
33975: LD_INT 6
33977: DOUBLE
33978: EQUAL
33979: IFTRUE 33983
33981: GO 34001
33983: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33984: LD_ADDR_VAR 0 3
33988: PUSH
33989: LD_INT 4
33991: PUSH
33992: LD_INT 5
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: ST_TO_ADDR
33999: GO 34672
34001: LD_INT 10
34003: DOUBLE
34004: EQUAL
34005: IFTRUE 34009
34007: GO 34027
34009: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34010: LD_ADDR_VAR 0 3
34014: PUSH
34015: LD_INT 4
34017: PUSH
34018: LD_INT 5
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: ST_TO_ADDR
34025: GO 34672
34027: LD_INT 22
34029: DOUBLE
34030: EQUAL
34031: IFTRUE 34035
34033: GO 34061
34035: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34036: LD_ADDR_VAR 0 3
34040: PUSH
34041: LD_INT 11
34043: PUSH
34044: LD_INT 12
34046: PUSH
34047: LD_INT 13
34049: PUSH
34050: LD_INT 14
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: ST_TO_ADDR
34059: GO 34672
34061: LD_INT 23
34063: DOUBLE
34064: EQUAL
34065: IFTRUE 34069
34067: GO 34095
34069: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34070: LD_ADDR_VAR 0 3
34074: PUSH
34075: LD_INT 11
34077: PUSH
34078: LD_INT 12
34080: PUSH
34081: LD_INT 13
34083: PUSH
34084: LD_INT 14
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: ST_TO_ADDR
34093: GO 34672
34095: LD_INT 24
34097: DOUBLE
34098: EQUAL
34099: IFTRUE 34103
34101: GO 34129
34103: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34104: LD_ADDR_VAR 0 3
34108: PUSH
34109: LD_INT 11
34111: PUSH
34112: LD_INT 12
34114: PUSH
34115: LD_INT 13
34117: PUSH
34118: LD_INT 14
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: ST_TO_ADDR
34127: GO 34672
34129: LD_INT 30
34131: DOUBLE
34132: EQUAL
34133: IFTRUE 34137
34135: GO 34163
34137: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34138: LD_ADDR_VAR 0 3
34142: PUSH
34143: LD_INT 11
34145: PUSH
34146: LD_INT 12
34148: PUSH
34149: LD_INT 13
34151: PUSH
34152: LD_INT 14
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: ST_TO_ADDR
34161: GO 34672
34163: LD_INT 25
34165: DOUBLE
34166: EQUAL
34167: IFTRUE 34171
34169: GO 34189
34171: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34172: LD_ADDR_VAR 0 3
34176: PUSH
34177: LD_INT 13
34179: PUSH
34180: LD_INT 14
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: ST_TO_ADDR
34187: GO 34672
34189: LD_INT 27
34191: DOUBLE
34192: EQUAL
34193: IFTRUE 34197
34195: GO 34215
34197: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34198: LD_ADDR_VAR 0 3
34202: PUSH
34203: LD_INT 13
34205: PUSH
34206: LD_INT 14
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: ST_TO_ADDR
34213: GO 34672
34215: LD_EXP 51
34219: DOUBLE
34220: EQUAL
34221: IFTRUE 34225
34223: GO 34251
34225: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34226: LD_ADDR_VAR 0 3
34230: PUSH
34231: LD_INT 11
34233: PUSH
34234: LD_INT 12
34236: PUSH
34237: LD_INT 13
34239: PUSH
34240: LD_INT 14
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: ST_TO_ADDR
34249: GO 34672
34251: LD_INT 28
34253: DOUBLE
34254: EQUAL
34255: IFTRUE 34259
34257: GO 34277
34259: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34260: LD_ADDR_VAR 0 3
34264: PUSH
34265: LD_INT 13
34267: PUSH
34268: LD_INT 14
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: ST_TO_ADDR
34275: GO 34672
34277: LD_INT 29
34279: DOUBLE
34280: EQUAL
34281: IFTRUE 34285
34283: GO 34303
34285: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34286: LD_ADDR_VAR 0 3
34290: PUSH
34291: LD_INT 13
34293: PUSH
34294: LD_INT 14
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: ST_TO_ADDR
34301: GO 34672
34303: LD_INT 31
34305: DOUBLE
34306: EQUAL
34307: IFTRUE 34311
34309: GO 34329
34311: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34312: LD_ADDR_VAR 0 3
34316: PUSH
34317: LD_INT 13
34319: PUSH
34320: LD_INT 14
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: ST_TO_ADDR
34327: GO 34672
34329: LD_INT 26
34331: DOUBLE
34332: EQUAL
34333: IFTRUE 34337
34335: GO 34355
34337: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34338: LD_ADDR_VAR 0 3
34342: PUSH
34343: LD_INT 13
34345: PUSH
34346: LD_INT 14
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: ST_TO_ADDR
34353: GO 34672
34355: LD_INT 42
34357: DOUBLE
34358: EQUAL
34359: IFTRUE 34363
34361: GO 34389
34363: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34364: LD_ADDR_VAR 0 3
34368: PUSH
34369: LD_INT 21
34371: PUSH
34372: LD_INT 22
34374: PUSH
34375: LD_INT 23
34377: PUSH
34378: LD_INT 24
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: ST_TO_ADDR
34387: GO 34672
34389: LD_INT 43
34391: DOUBLE
34392: EQUAL
34393: IFTRUE 34397
34395: GO 34423
34397: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34398: LD_ADDR_VAR 0 3
34402: PUSH
34403: LD_INT 21
34405: PUSH
34406: LD_INT 22
34408: PUSH
34409: LD_INT 23
34411: PUSH
34412: LD_INT 24
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: ST_TO_ADDR
34421: GO 34672
34423: LD_INT 44
34425: DOUBLE
34426: EQUAL
34427: IFTRUE 34431
34429: GO 34457
34431: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34432: LD_ADDR_VAR 0 3
34436: PUSH
34437: LD_INT 21
34439: PUSH
34440: LD_INT 22
34442: PUSH
34443: LD_INT 23
34445: PUSH
34446: LD_INT 24
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: ST_TO_ADDR
34455: GO 34672
34457: LD_INT 45
34459: DOUBLE
34460: EQUAL
34461: IFTRUE 34465
34463: GO 34491
34465: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34466: LD_ADDR_VAR 0 3
34470: PUSH
34471: LD_INT 21
34473: PUSH
34474: LD_INT 22
34476: PUSH
34477: LD_INT 23
34479: PUSH
34480: LD_INT 24
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: ST_TO_ADDR
34489: GO 34672
34491: LD_INT 49
34493: DOUBLE
34494: EQUAL
34495: IFTRUE 34499
34497: GO 34525
34499: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34500: LD_ADDR_VAR 0 3
34504: PUSH
34505: LD_INT 21
34507: PUSH
34508: LD_INT 22
34510: PUSH
34511: LD_INT 23
34513: PUSH
34514: LD_INT 24
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: ST_TO_ADDR
34523: GO 34672
34525: LD_INT 51
34527: DOUBLE
34528: EQUAL
34529: IFTRUE 34533
34531: GO 34559
34533: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34534: LD_ADDR_VAR 0 3
34538: PUSH
34539: LD_INT 21
34541: PUSH
34542: LD_INT 22
34544: PUSH
34545: LD_INT 23
34547: PUSH
34548: LD_INT 24
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: ST_TO_ADDR
34557: GO 34672
34559: LD_INT 52
34561: DOUBLE
34562: EQUAL
34563: IFTRUE 34567
34565: GO 34593
34567: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34568: LD_ADDR_VAR 0 3
34572: PUSH
34573: LD_INT 21
34575: PUSH
34576: LD_INT 22
34578: PUSH
34579: LD_INT 23
34581: PUSH
34582: LD_INT 24
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: ST_TO_ADDR
34591: GO 34672
34593: LD_INT 53
34595: DOUBLE
34596: EQUAL
34597: IFTRUE 34601
34599: GO 34619
34601: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34602: LD_ADDR_VAR 0 3
34606: PUSH
34607: LD_INT 23
34609: PUSH
34610: LD_INT 24
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: ST_TO_ADDR
34617: GO 34672
34619: LD_INT 46
34621: DOUBLE
34622: EQUAL
34623: IFTRUE 34627
34625: GO 34645
34627: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34628: LD_ADDR_VAR 0 3
34632: PUSH
34633: LD_INT 23
34635: PUSH
34636: LD_INT 24
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: ST_TO_ADDR
34643: GO 34672
34645: LD_INT 47
34647: DOUBLE
34648: EQUAL
34649: IFTRUE 34653
34651: GO 34671
34653: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34654: LD_ADDR_VAR 0 3
34658: PUSH
34659: LD_INT 23
34661: PUSH
34662: LD_INT 24
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: ST_TO_ADDR
34669: GO 34672
34671: POP
// result := ( chassis in result ) ;
34672: LD_ADDR_VAR 0 3
34676: PUSH
34677: LD_VAR 0 1
34681: PUSH
34682: LD_VAR 0 3
34686: IN
34687: ST_TO_ADDR
// end ;
34688: LD_VAR 0 3
34692: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34693: LD_INT 0
34695: PPUSH
34696: PPUSH
34697: PPUSH
34698: PPUSH
34699: PPUSH
34700: PPUSH
34701: PPUSH
// result := array ;
34702: LD_ADDR_VAR 0 5
34706: PUSH
34707: LD_VAR 0 1
34711: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34712: LD_VAR 0 1
34716: NOT
34717: PUSH
34718: LD_VAR 0 2
34722: NOT
34723: OR
34724: PUSH
34725: LD_VAR 0 3
34729: NOT
34730: OR
34731: PUSH
34732: LD_VAR 0 2
34736: PUSH
34737: LD_VAR 0 1
34741: GREATER
34742: OR
34743: PUSH
34744: LD_VAR 0 3
34748: PUSH
34749: LD_VAR 0 1
34753: GREATER
34754: OR
34755: IFFALSE 34759
// exit ;
34757: GO 35055
// if direction then
34759: LD_VAR 0 4
34763: IFFALSE 34827
// begin d := 1 ;
34765: LD_ADDR_VAR 0 9
34769: PUSH
34770: LD_INT 1
34772: ST_TO_ADDR
// if i_from > i_to then
34773: LD_VAR 0 2
34777: PUSH
34778: LD_VAR 0 3
34782: GREATER
34783: IFFALSE 34809
// length := ( array - i_from ) + i_to else
34785: LD_ADDR_VAR 0 11
34789: PUSH
34790: LD_VAR 0 1
34794: PUSH
34795: LD_VAR 0 2
34799: MINUS
34800: PUSH
34801: LD_VAR 0 3
34805: PLUS
34806: ST_TO_ADDR
34807: GO 34825
// length := i_to - i_from ;
34809: LD_ADDR_VAR 0 11
34813: PUSH
34814: LD_VAR 0 3
34818: PUSH
34819: LD_VAR 0 2
34823: MINUS
34824: ST_TO_ADDR
// end else
34825: GO 34888
// begin d := - 1 ;
34827: LD_ADDR_VAR 0 9
34831: PUSH
34832: LD_INT 1
34834: NEG
34835: ST_TO_ADDR
// if i_from > i_to then
34836: LD_VAR 0 2
34840: PUSH
34841: LD_VAR 0 3
34845: GREATER
34846: IFFALSE 34866
// length := i_from - i_to else
34848: LD_ADDR_VAR 0 11
34852: PUSH
34853: LD_VAR 0 2
34857: PUSH
34858: LD_VAR 0 3
34862: MINUS
34863: ST_TO_ADDR
34864: GO 34888
// length := ( array - i_to ) + i_from ;
34866: LD_ADDR_VAR 0 11
34870: PUSH
34871: LD_VAR 0 1
34875: PUSH
34876: LD_VAR 0 3
34880: MINUS
34881: PUSH
34882: LD_VAR 0 2
34886: PLUS
34887: ST_TO_ADDR
// end ; if not length then
34888: LD_VAR 0 11
34892: NOT
34893: IFFALSE 34897
// exit ;
34895: GO 35055
// tmp := array ;
34897: LD_ADDR_VAR 0 10
34901: PUSH
34902: LD_VAR 0 1
34906: ST_TO_ADDR
// for i = 1 to length do
34907: LD_ADDR_VAR 0 6
34911: PUSH
34912: DOUBLE
34913: LD_INT 1
34915: DEC
34916: ST_TO_ADDR
34917: LD_VAR 0 11
34921: PUSH
34922: FOR_TO
34923: IFFALSE 35043
// begin for j = 1 to array do
34925: LD_ADDR_VAR 0 7
34929: PUSH
34930: DOUBLE
34931: LD_INT 1
34933: DEC
34934: ST_TO_ADDR
34935: LD_VAR 0 1
34939: PUSH
34940: FOR_TO
34941: IFFALSE 35029
// begin k := j + d ;
34943: LD_ADDR_VAR 0 8
34947: PUSH
34948: LD_VAR 0 7
34952: PUSH
34953: LD_VAR 0 9
34957: PLUS
34958: ST_TO_ADDR
// if k > array then
34959: LD_VAR 0 8
34963: PUSH
34964: LD_VAR 0 1
34968: GREATER
34969: IFFALSE 34979
// k := 1 ;
34971: LD_ADDR_VAR 0 8
34975: PUSH
34976: LD_INT 1
34978: ST_TO_ADDR
// if not k then
34979: LD_VAR 0 8
34983: NOT
34984: IFFALSE 34996
// k := array ;
34986: LD_ADDR_VAR 0 8
34990: PUSH
34991: LD_VAR 0 1
34995: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34996: LD_ADDR_VAR 0 10
35000: PUSH
35001: LD_VAR 0 10
35005: PPUSH
35006: LD_VAR 0 8
35010: PPUSH
35011: LD_VAR 0 1
35015: PUSH
35016: LD_VAR 0 7
35020: ARRAY
35021: PPUSH
35022: CALL_OW 1
35026: ST_TO_ADDR
// end ;
35027: GO 34940
35029: POP
35030: POP
// array := tmp ;
35031: LD_ADDR_VAR 0 1
35035: PUSH
35036: LD_VAR 0 10
35040: ST_TO_ADDR
// end ;
35041: GO 34922
35043: POP
35044: POP
// result := array ;
35045: LD_ADDR_VAR 0 5
35049: PUSH
35050: LD_VAR 0 1
35054: ST_TO_ADDR
// end ;
35055: LD_VAR 0 5
35059: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35060: LD_INT 0
35062: PPUSH
35063: PPUSH
// result := 0 ;
35064: LD_ADDR_VAR 0 3
35068: PUSH
35069: LD_INT 0
35071: ST_TO_ADDR
// if not array or not value in array then
35072: LD_VAR 0 1
35076: NOT
35077: PUSH
35078: LD_VAR 0 2
35082: PUSH
35083: LD_VAR 0 1
35087: IN
35088: NOT
35089: OR
35090: IFFALSE 35094
// exit ;
35092: GO 35148
// for i = 1 to array do
35094: LD_ADDR_VAR 0 4
35098: PUSH
35099: DOUBLE
35100: LD_INT 1
35102: DEC
35103: ST_TO_ADDR
35104: LD_VAR 0 1
35108: PUSH
35109: FOR_TO
35110: IFFALSE 35146
// if value = array [ i ] then
35112: LD_VAR 0 2
35116: PUSH
35117: LD_VAR 0 1
35121: PUSH
35122: LD_VAR 0 4
35126: ARRAY
35127: EQUAL
35128: IFFALSE 35144
// begin result := i ;
35130: LD_ADDR_VAR 0 3
35134: PUSH
35135: LD_VAR 0 4
35139: ST_TO_ADDR
// exit ;
35140: POP
35141: POP
35142: GO 35148
// end ;
35144: GO 35109
35146: POP
35147: POP
// end ;
35148: LD_VAR 0 3
35152: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35153: LD_INT 0
35155: PPUSH
// vc_chassis := chassis ;
35156: LD_ADDR_OWVAR 37
35160: PUSH
35161: LD_VAR 0 1
35165: ST_TO_ADDR
// vc_engine := engine ;
35166: LD_ADDR_OWVAR 39
35170: PUSH
35171: LD_VAR 0 2
35175: ST_TO_ADDR
// vc_control := control ;
35176: LD_ADDR_OWVAR 38
35180: PUSH
35181: LD_VAR 0 3
35185: ST_TO_ADDR
// vc_weapon := weapon ;
35186: LD_ADDR_OWVAR 40
35190: PUSH
35191: LD_VAR 0 4
35195: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35196: LD_ADDR_OWVAR 41
35200: PUSH
35201: LD_VAR 0 5
35205: ST_TO_ADDR
// end ;
35206: LD_VAR 0 6
35210: RET
// export function WantPlant ( unit ) ; var task ; begin
35211: LD_INT 0
35213: PPUSH
35214: PPUSH
// result := false ;
35215: LD_ADDR_VAR 0 2
35219: PUSH
35220: LD_INT 0
35222: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35223: LD_ADDR_VAR 0 3
35227: PUSH
35228: LD_VAR 0 1
35232: PPUSH
35233: CALL_OW 437
35237: ST_TO_ADDR
// if task then
35238: LD_VAR 0 3
35242: IFFALSE 35270
// if task [ 1 ] [ 1 ] = p then
35244: LD_VAR 0 3
35248: PUSH
35249: LD_INT 1
35251: ARRAY
35252: PUSH
35253: LD_INT 1
35255: ARRAY
35256: PUSH
35257: LD_STRING p
35259: EQUAL
35260: IFFALSE 35270
// result := true ;
35262: LD_ADDR_VAR 0 2
35266: PUSH
35267: LD_INT 1
35269: ST_TO_ADDR
// end ;
35270: LD_VAR 0 2
35274: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35275: LD_INT 0
35277: PPUSH
35278: PPUSH
35279: PPUSH
35280: PPUSH
// if pos < 1 then
35281: LD_VAR 0 2
35285: PUSH
35286: LD_INT 1
35288: LESS
35289: IFFALSE 35293
// exit ;
35291: GO 35596
// if pos = 1 then
35293: LD_VAR 0 2
35297: PUSH
35298: LD_INT 1
35300: EQUAL
35301: IFFALSE 35334
// result := Replace ( arr , pos [ 1 ] , value ) else
35303: LD_ADDR_VAR 0 4
35307: PUSH
35308: LD_VAR 0 1
35312: PPUSH
35313: LD_VAR 0 2
35317: PUSH
35318: LD_INT 1
35320: ARRAY
35321: PPUSH
35322: LD_VAR 0 3
35326: PPUSH
35327: CALL_OW 1
35331: ST_TO_ADDR
35332: GO 35596
// begin tmp := arr ;
35334: LD_ADDR_VAR 0 6
35338: PUSH
35339: LD_VAR 0 1
35343: ST_TO_ADDR
// s_arr := [ tmp ] ;
35344: LD_ADDR_VAR 0 7
35348: PUSH
35349: LD_VAR 0 6
35353: PUSH
35354: EMPTY
35355: LIST
35356: ST_TO_ADDR
// for i = 1 to pos - 1 do
35357: LD_ADDR_VAR 0 5
35361: PUSH
35362: DOUBLE
35363: LD_INT 1
35365: DEC
35366: ST_TO_ADDR
35367: LD_VAR 0 2
35371: PUSH
35372: LD_INT 1
35374: MINUS
35375: PUSH
35376: FOR_TO
35377: IFFALSE 35422
// begin tmp := tmp [ pos [ i ] ] ;
35379: LD_ADDR_VAR 0 6
35383: PUSH
35384: LD_VAR 0 6
35388: PUSH
35389: LD_VAR 0 2
35393: PUSH
35394: LD_VAR 0 5
35398: ARRAY
35399: ARRAY
35400: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35401: LD_ADDR_VAR 0 7
35405: PUSH
35406: LD_VAR 0 7
35410: PUSH
35411: LD_VAR 0 6
35415: PUSH
35416: EMPTY
35417: LIST
35418: ADD
35419: ST_TO_ADDR
// end ;
35420: GO 35376
35422: POP
35423: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35424: LD_ADDR_VAR 0 6
35428: PUSH
35429: LD_VAR 0 6
35433: PPUSH
35434: LD_VAR 0 2
35438: PUSH
35439: LD_VAR 0 2
35443: ARRAY
35444: PPUSH
35445: LD_VAR 0 3
35449: PPUSH
35450: CALL_OW 1
35454: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35455: LD_ADDR_VAR 0 7
35459: PUSH
35460: LD_VAR 0 7
35464: PPUSH
35465: LD_VAR 0 7
35469: PPUSH
35470: LD_VAR 0 6
35474: PPUSH
35475: CALL_OW 1
35479: ST_TO_ADDR
// for i = s_arr downto 2 do
35480: LD_ADDR_VAR 0 5
35484: PUSH
35485: DOUBLE
35486: LD_VAR 0 7
35490: INC
35491: ST_TO_ADDR
35492: LD_INT 2
35494: PUSH
35495: FOR_DOWNTO
35496: IFFALSE 35580
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35498: LD_ADDR_VAR 0 6
35502: PUSH
35503: LD_VAR 0 7
35507: PUSH
35508: LD_VAR 0 5
35512: PUSH
35513: LD_INT 1
35515: MINUS
35516: ARRAY
35517: PPUSH
35518: LD_VAR 0 2
35522: PUSH
35523: LD_VAR 0 5
35527: PUSH
35528: LD_INT 1
35530: MINUS
35531: ARRAY
35532: PPUSH
35533: LD_VAR 0 7
35537: PUSH
35538: LD_VAR 0 5
35542: ARRAY
35543: PPUSH
35544: CALL_OW 1
35548: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35549: LD_ADDR_VAR 0 7
35553: PUSH
35554: LD_VAR 0 7
35558: PPUSH
35559: LD_VAR 0 5
35563: PUSH
35564: LD_INT 1
35566: MINUS
35567: PPUSH
35568: LD_VAR 0 6
35572: PPUSH
35573: CALL_OW 1
35577: ST_TO_ADDR
// end ;
35578: GO 35495
35580: POP
35581: POP
// result := s_arr [ 1 ] ;
35582: LD_ADDR_VAR 0 4
35586: PUSH
35587: LD_VAR 0 7
35591: PUSH
35592: LD_INT 1
35594: ARRAY
35595: ST_TO_ADDR
// end ; end ;
35596: LD_VAR 0 4
35600: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35601: LD_INT 0
35603: PPUSH
35604: PPUSH
// if not list then
35605: LD_VAR 0 1
35609: NOT
35610: IFFALSE 35614
// exit ;
35612: GO 35705
// i := list [ pos1 ] ;
35614: LD_ADDR_VAR 0 5
35618: PUSH
35619: LD_VAR 0 1
35623: PUSH
35624: LD_VAR 0 2
35628: ARRAY
35629: ST_TO_ADDR
// if not i then
35630: LD_VAR 0 5
35634: NOT
35635: IFFALSE 35639
// exit ;
35637: GO 35705
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35639: LD_ADDR_VAR 0 1
35643: PUSH
35644: LD_VAR 0 1
35648: PPUSH
35649: LD_VAR 0 2
35653: PPUSH
35654: LD_VAR 0 1
35658: PUSH
35659: LD_VAR 0 3
35663: ARRAY
35664: PPUSH
35665: CALL_OW 1
35669: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35670: LD_ADDR_VAR 0 1
35674: PUSH
35675: LD_VAR 0 1
35679: PPUSH
35680: LD_VAR 0 3
35684: PPUSH
35685: LD_VAR 0 5
35689: PPUSH
35690: CALL_OW 1
35694: ST_TO_ADDR
// result := list ;
35695: LD_ADDR_VAR 0 4
35699: PUSH
35700: LD_VAR 0 1
35704: ST_TO_ADDR
// end ;
35705: LD_VAR 0 4
35709: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35710: LD_INT 0
35712: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35713: LD_ADDR_VAR 0 5
35717: PUSH
35718: LD_VAR 0 1
35722: PPUSH
35723: CALL_OW 250
35727: PPUSH
35728: LD_VAR 0 1
35732: PPUSH
35733: CALL_OW 251
35737: PPUSH
35738: LD_VAR 0 2
35742: PPUSH
35743: LD_VAR 0 3
35747: PPUSH
35748: LD_VAR 0 4
35752: PPUSH
35753: CALL 35763 0 5
35757: ST_TO_ADDR
// end ;
35758: LD_VAR 0 5
35762: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35763: LD_INT 0
35765: PPUSH
35766: PPUSH
35767: PPUSH
35768: PPUSH
// if not list then
35769: LD_VAR 0 3
35773: NOT
35774: IFFALSE 35778
// exit ;
35776: GO 36166
// result := [ ] ;
35778: LD_ADDR_VAR 0 6
35782: PUSH
35783: EMPTY
35784: ST_TO_ADDR
// for i in list do
35785: LD_ADDR_VAR 0 7
35789: PUSH
35790: LD_VAR 0 3
35794: PUSH
35795: FOR_IN
35796: IFFALSE 35998
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35798: LD_ADDR_VAR 0 9
35802: PUSH
35803: LD_VAR 0 7
35807: PPUSH
35808: LD_VAR 0 1
35812: PPUSH
35813: LD_VAR 0 2
35817: PPUSH
35818: CALL_OW 297
35822: ST_TO_ADDR
// if not result then
35823: LD_VAR 0 6
35827: NOT
35828: IFFALSE 35854
// result := [ [ i , tmp ] ] else
35830: LD_ADDR_VAR 0 6
35834: PUSH
35835: LD_VAR 0 7
35839: PUSH
35840: LD_VAR 0 9
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: EMPTY
35850: LIST
35851: ST_TO_ADDR
35852: GO 35996
// begin if result [ result ] [ 2 ] < tmp then
35854: LD_VAR 0 6
35858: PUSH
35859: LD_VAR 0 6
35863: ARRAY
35864: PUSH
35865: LD_INT 2
35867: ARRAY
35868: PUSH
35869: LD_VAR 0 9
35873: LESS
35874: IFFALSE 35916
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35876: LD_ADDR_VAR 0 6
35880: PUSH
35881: LD_VAR 0 6
35885: PPUSH
35886: LD_VAR 0 6
35890: PUSH
35891: LD_INT 1
35893: PLUS
35894: PPUSH
35895: LD_VAR 0 7
35899: PUSH
35900: LD_VAR 0 9
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PPUSH
35909: CALL_OW 2
35913: ST_TO_ADDR
35914: GO 35996
// for j = 1 to result do
35916: LD_ADDR_VAR 0 8
35920: PUSH
35921: DOUBLE
35922: LD_INT 1
35924: DEC
35925: ST_TO_ADDR
35926: LD_VAR 0 6
35930: PUSH
35931: FOR_TO
35932: IFFALSE 35994
// begin if tmp < result [ j ] [ 2 ] then
35934: LD_VAR 0 9
35938: PUSH
35939: LD_VAR 0 6
35943: PUSH
35944: LD_VAR 0 8
35948: ARRAY
35949: PUSH
35950: LD_INT 2
35952: ARRAY
35953: LESS
35954: IFFALSE 35992
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35956: LD_ADDR_VAR 0 6
35960: PUSH
35961: LD_VAR 0 6
35965: PPUSH
35966: LD_VAR 0 8
35970: PPUSH
35971: LD_VAR 0 7
35975: PUSH
35976: LD_VAR 0 9
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PPUSH
35985: CALL_OW 2
35989: ST_TO_ADDR
// break ;
35990: GO 35994
// end ; end ;
35992: GO 35931
35994: POP
35995: POP
// end ; end ;
35996: GO 35795
35998: POP
35999: POP
// if result and not asc then
36000: LD_VAR 0 6
36004: PUSH
36005: LD_VAR 0 4
36009: NOT
36010: AND
36011: IFFALSE 36086
// begin tmp := result ;
36013: LD_ADDR_VAR 0 9
36017: PUSH
36018: LD_VAR 0 6
36022: ST_TO_ADDR
// for i = tmp downto 1 do
36023: LD_ADDR_VAR 0 7
36027: PUSH
36028: DOUBLE
36029: LD_VAR 0 9
36033: INC
36034: ST_TO_ADDR
36035: LD_INT 1
36037: PUSH
36038: FOR_DOWNTO
36039: IFFALSE 36084
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36041: LD_ADDR_VAR 0 6
36045: PUSH
36046: LD_VAR 0 6
36050: PPUSH
36051: LD_VAR 0 9
36055: PUSH
36056: LD_VAR 0 7
36060: MINUS
36061: PUSH
36062: LD_INT 1
36064: PLUS
36065: PPUSH
36066: LD_VAR 0 9
36070: PUSH
36071: LD_VAR 0 7
36075: ARRAY
36076: PPUSH
36077: CALL_OW 1
36081: ST_TO_ADDR
36082: GO 36038
36084: POP
36085: POP
// end ; tmp := [ ] ;
36086: LD_ADDR_VAR 0 9
36090: PUSH
36091: EMPTY
36092: ST_TO_ADDR
// if mode then
36093: LD_VAR 0 5
36097: IFFALSE 36166
// begin for i = 1 to result do
36099: LD_ADDR_VAR 0 7
36103: PUSH
36104: DOUBLE
36105: LD_INT 1
36107: DEC
36108: ST_TO_ADDR
36109: LD_VAR 0 6
36113: PUSH
36114: FOR_TO
36115: IFFALSE 36154
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36117: LD_ADDR_VAR 0 9
36121: PUSH
36122: LD_VAR 0 9
36126: PPUSH
36127: LD_VAR 0 7
36131: PPUSH
36132: LD_VAR 0 6
36136: PUSH
36137: LD_VAR 0 7
36141: ARRAY
36142: PUSH
36143: LD_INT 1
36145: ARRAY
36146: PPUSH
36147: CALL_OW 1
36151: ST_TO_ADDR
36152: GO 36114
36154: POP
36155: POP
// result := tmp ;
36156: LD_ADDR_VAR 0 6
36160: PUSH
36161: LD_VAR 0 9
36165: ST_TO_ADDR
// end ; end ;
36166: LD_VAR 0 6
36170: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36171: LD_INT 0
36173: PPUSH
36174: PPUSH
36175: PPUSH
36176: PPUSH
36177: PPUSH
36178: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36179: LD_ADDR_VAR 0 5
36183: PUSH
36184: LD_INT 0
36186: PUSH
36187: LD_INT 0
36189: PUSH
36190: LD_INT 0
36192: PUSH
36193: EMPTY
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: ST_TO_ADDR
// if not x or not y then
36201: LD_VAR 0 2
36205: NOT
36206: PUSH
36207: LD_VAR 0 3
36211: NOT
36212: OR
36213: IFFALSE 36217
// exit ;
36215: GO 37869
// if not range then
36217: LD_VAR 0 4
36221: NOT
36222: IFFALSE 36232
// range := 10 ;
36224: LD_ADDR_VAR 0 4
36228: PUSH
36229: LD_INT 10
36231: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36232: LD_ADDR_VAR 0 8
36236: PUSH
36237: LD_INT 81
36239: PUSH
36240: LD_VAR 0 1
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 92
36251: PUSH
36252: LD_VAR 0 2
36256: PUSH
36257: LD_VAR 0 3
36261: PUSH
36262: LD_VAR 0 4
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 3
36275: PUSH
36276: LD_INT 21
36278: PUSH
36279: LD_INT 3
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: LIST
36294: PPUSH
36295: CALL_OW 69
36299: ST_TO_ADDR
// if not tmp then
36300: LD_VAR 0 8
36304: NOT
36305: IFFALSE 36309
// exit ;
36307: GO 37869
// for i in tmp do
36309: LD_ADDR_VAR 0 6
36313: PUSH
36314: LD_VAR 0 8
36318: PUSH
36319: FOR_IN
36320: IFFALSE 37844
// begin points := [ 0 , 0 , 0 ] ;
36322: LD_ADDR_VAR 0 9
36326: PUSH
36327: LD_INT 0
36329: PUSH
36330: LD_INT 0
36332: PUSH
36333: LD_INT 0
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: LIST
36340: ST_TO_ADDR
// bpoints := 1 ;
36341: LD_ADDR_VAR 0 10
36345: PUSH
36346: LD_INT 1
36348: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36349: LD_VAR 0 6
36353: PPUSH
36354: CALL_OW 247
36358: PUSH
36359: LD_INT 1
36361: DOUBLE
36362: EQUAL
36363: IFTRUE 36367
36365: GO 36945
36367: POP
// begin if GetClass ( i ) = 1 then
36368: LD_VAR 0 6
36372: PPUSH
36373: CALL_OW 257
36377: PUSH
36378: LD_INT 1
36380: EQUAL
36381: IFFALSE 36402
// points := [ 10 , 5 , 3 ] ;
36383: LD_ADDR_VAR 0 9
36387: PUSH
36388: LD_INT 10
36390: PUSH
36391: LD_INT 5
36393: PUSH
36394: LD_INT 3
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: LIST
36401: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36402: LD_VAR 0 6
36406: PPUSH
36407: CALL_OW 257
36411: PUSH
36412: LD_INT 2
36414: PUSH
36415: LD_INT 3
36417: PUSH
36418: LD_INT 4
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: LIST
36425: IN
36426: IFFALSE 36447
// points := [ 3 , 2 , 1 ] ;
36428: LD_ADDR_VAR 0 9
36432: PUSH
36433: LD_INT 3
36435: PUSH
36436: LD_INT 2
36438: PUSH
36439: LD_INT 1
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: LIST
36446: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36447: LD_VAR 0 6
36451: PPUSH
36452: CALL_OW 257
36456: PUSH
36457: LD_INT 5
36459: EQUAL
36460: IFFALSE 36481
// points := [ 130 , 5 , 2 ] ;
36462: LD_ADDR_VAR 0 9
36466: PUSH
36467: LD_INT 130
36469: PUSH
36470: LD_INT 5
36472: PUSH
36473: LD_INT 2
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: LIST
36480: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36481: LD_VAR 0 6
36485: PPUSH
36486: CALL_OW 257
36490: PUSH
36491: LD_INT 8
36493: EQUAL
36494: IFFALSE 36515
// points := [ 35 , 35 , 30 ] ;
36496: LD_ADDR_VAR 0 9
36500: PUSH
36501: LD_INT 35
36503: PUSH
36504: LD_INT 35
36506: PUSH
36507: LD_INT 30
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: LIST
36514: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36515: LD_VAR 0 6
36519: PPUSH
36520: CALL_OW 257
36524: PUSH
36525: LD_INT 9
36527: EQUAL
36528: IFFALSE 36549
// points := [ 20 , 55 , 40 ] ;
36530: LD_ADDR_VAR 0 9
36534: PUSH
36535: LD_INT 20
36537: PUSH
36538: LD_INT 55
36540: PUSH
36541: LD_INT 40
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: LIST
36548: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36549: LD_VAR 0 6
36553: PPUSH
36554: CALL_OW 257
36558: PUSH
36559: LD_INT 12
36561: PUSH
36562: LD_INT 16
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: IN
36569: IFFALSE 36590
// points := [ 5 , 3 , 2 ] ;
36571: LD_ADDR_VAR 0 9
36575: PUSH
36576: LD_INT 5
36578: PUSH
36579: LD_INT 3
36581: PUSH
36582: LD_INT 2
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: LIST
36589: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36590: LD_VAR 0 6
36594: PPUSH
36595: CALL_OW 257
36599: PUSH
36600: LD_INT 17
36602: EQUAL
36603: IFFALSE 36624
// points := [ 100 , 50 , 75 ] ;
36605: LD_ADDR_VAR 0 9
36609: PUSH
36610: LD_INT 100
36612: PUSH
36613: LD_INT 50
36615: PUSH
36616: LD_INT 75
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: LIST
36623: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36624: LD_VAR 0 6
36628: PPUSH
36629: CALL_OW 257
36633: PUSH
36634: LD_INT 15
36636: EQUAL
36637: IFFALSE 36658
// points := [ 10 , 5 , 3 ] ;
36639: LD_ADDR_VAR 0 9
36643: PUSH
36644: LD_INT 10
36646: PUSH
36647: LD_INT 5
36649: PUSH
36650: LD_INT 3
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: LIST
36657: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36658: LD_VAR 0 6
36662: PPUSH
36663: CALL_OW 257
36667: PUSH
36668: LD_INT 14
36670: EQUAL
36671: IFFALSE 36692
// points := [ 10 , 0 , 0 ] ;
36673: LD_ADDR_VAR 0 9
36677: PUSH
36678: LD_INT 10
36680: PUSH
36681: LD_INT 0
36683: PUSH
36684: LD_INT 0
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: LIST
36691: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36692: LD_VAR 0 6
36696: PPUSH
36697: CALL_OW 257
36701: PUSH
36702: LD_INT 11
36704: EQUAL
36705: IFFALSE 36726
// points := [ 30 , 10 , 5 ] ;
36707: LD_ADDR_VAR 0 9
36711: PUSH
36712: LD_INT 30
36714: PUSH
36715: LD_INT 10
36717: PUSH
36718: LD_INT 5
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: LIST
36725: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36726: LD_VAR 0 1
36730: PPUSH
36731: LD_INT 5
36733: PPUSH
36734: CALL_OW 321
36738: PUSH
36739: LD_INT 2
36741: EQUAL
36742: IFFALSE 36759
// bpoints := bpoints * 1.8 ;
36744: LD_ADDR_VAR 0 10
36748: PUSH
36749: LD_VAR 0 10
36753: PUSH
36754: LD_REAL  1.80000000000000E+0000
36757: MUL
36758: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36759: LD_VAR 0 6
36763: PPUSH
36764: CALL_OW 257
36768: PUSH
36769: LD_INT 1
36771: PUSH
36772: LD_INT 2
36774: PUSH
36775: LD_INT 3
36777: PUSH
36778: LD_INT 4
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: IN
36787: PUSH
36788: LD_VAR 0 1
36792: PPUSH
36793: LD_INT 51
36795: PPUSH
36796: CALL_OW 321
36800: PUSH
36801: LD_INT 2
36803: EQUAL
36804: AND
36805: IFFALSE 36822
// bpoints := bpoints * 1.2 ;
36807: LD_ADDR_VAR 0 10
36811: PUSH
36812: LD_VAR 0 10
36816: PUSH
36817: LD_REAL  1.20000000000000E+0000
36820: MUL
36821: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36822: LD_VAR 0 6
36826: PPUSH
36827: CALL_OW 257
36831: PUSH
36832: LD_INT 5
36834: PUSH
36835: LD_INT 7
36837: PUSH
36838: LD_INT 9
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: LIST
36845: IN
36846: PUSH
36847: LD_VAR 0 1
36851: PPUSH
36852: LD_INT 52
36854: PPUSH
36855: CALL_OW 321
36859: PUSH
36860: LD_INT 2
36862: EQUAL
36863: AND
36864: IFFALSE 36881
// bpoints := bpoints * 1.5 ;
36866: LD_ADDR_VAR 0 10
36870: PUSH
36871: LD_VAR 0 10
36875: PUSH
36876: LD_REAL  1.50000000000000E+0000
36879: MUL
36880: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36881: LD_VAR 0 1
36885: PPUSH
36886: LD_INT 66
36888: PPUSH
36889: CALL_OW 321
36893: PUSH
36894: LD_INT 2
36896: EQUAL
36897: IFFALSE 36914
// bpoints := bpoints * 1.1 ;
36899: LD_ADDR_VAR 0 10
36903: PUSH
36904: LD_VAR 0 10
36908: PUSH
36909: LD_REAL  1.10000000000000E+0000
36912: MUL
36913: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36914: LD_ADDR_VAR 0 10
36918: PUSH
36919: LD_VAR 0 10
36923: PUSH
36924: LD_VAR 0 6
36928: PPUSH
36929: LD_INT 1
36931: PPUSH
36932: CALL_OW 259
36936: PUSH
36937: LD_REAL  1.15000000000000E+0000
36940: MUL
36941: MUL
36942: ST_TO_ADDR
// end ; unit_vehicle :
36943: GO 37773
36945: LD_INT 2
36947: DOUBLE
36948: EQUAL
36949: IFTRUE 36953
36951: GO 37761
36953: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36954: LD_VAR 0 6
36958: PPUSH
36959: CALL_OW 264
36963: PUSH
36964: LD_INT 2
36966: PUSH
36967: LD_INT 42
36969: PUSH
36970: LD_INT 24
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: LIST
36977: IN
36978: IFFALSE 36999
// points := [ 25 , 5 , 3 ] ;
36980: LD_ADDR_VAR 0 9
36984: PUSH
36985: LD_INT 25
36987: PUSH
36988: LD_INT 5
36990: PUSH
36991: LD_INT 3
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: LIST
36998: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36999: LD_VAR 0 6
37003: PPUSH
37004: CALL_OW 264
37008: PUSH
37009: LD_INT 4
37011: PUSH
37012: LD_INT 43
37014: PUSH
37015: LD_INT 25
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: LIST
37022: IN
37023: IFFALSE 37044
// points := [ 40 , 15 , 5 ] ;
37025: LD_ADDR_VAR 0 9
37029: PUSH
37030: LD_INT 40
37032: PUSH
37033: LD_INT 15
37035: PUSH
37036: LD_INT 5
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: LIST
37043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37044: LD_VAR 0 6
37048: PPUSH
37049: CALL_OW 264
37053: PUSH
37054: LD_INT 3
37056: PUSH
37057: LD_INT 23
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: IN
37064: IFFALSE 37085
// points := [ 7 , 25 , 8 ] ;
37066: LD_ADDR_VAR 0 9
37070: PUSH
37071: LD_INT 7
37073: PUSH
37074: LD_INT 25
37076: PUSH
37077: LD_INT 8
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: LIST
37084: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37085: LD_VAR 0 6
37089: PPUSH
37090: CALL_OW 264
37094: PUSH
37095: LD_INT 5
37097: PUSH
37098: LD_INT 27
37100: PUSH
37101: LD_INT 44
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: LIST
37108: IN
37109: IFFALSE 37130
// points := [ 14 , 50 , 16 ] ;
37111: LD_ADDR_VAR 0 9
37115: PUSH
37116: LD_INT 14
37118: PUSH
37119: LD_INT 50
37121: PUSH
37122: LD_INT 16
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: LIST
37129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37130: LD_VAR 0 6
37134: PPUSH
37135: CALL_OW 264
37139: PUSH
37140: LD_INT 6
37142: PUSH
37143: LD_INT 46
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: IN
37150: IFFALSE 37171
// points := [ 32 , 120 , 70 ] ;
37152: LD_ADDR_VAR 0 9
37156: PUSH
37157: LD_INT 32
37159: PUSH
37160: LD_INT 120
37162: PUSH
37163: LD_INT 70
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: LIST
37170: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37171: LD_VAR 0 6
37175: PPUSH
37176: CALL_OW 264
37180: PUSH
37181: LD_INT 7
37183: PUSH
37184: LD_INT 28
37186: PUSH
37187: LD_INT 45
37189: PUSH
37190: LD_EXP 51
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: IN
37201: IFFALSE 37222
// points := [ 35 , 20 , 45 ] ;
37203: LD_ADDR_VAR 0 9
37207: PUSH
37208: LD_INT 35
37210: PUSH
37211: LD_INT 20
37213: PUSH
37214: LD_INT 45
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: LIST
37221: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37222: LD_VAR 0 6
37226: PPUSH
37227: CALL_OW 264
37231: PUSH
37232: LD_INT 47
37234: PUSH
37235: EMPTY
37236: LIST
37237: IN
37238: IFFALSE 37259
// points := [ 67 , 45 , 75 ] ;
37240: LD_ADDR_VAR 0 9
37244: PUSH
37245: LD_INT 67
37247: PUSH
37248: LD_INT 45
37250: PUSH
37251: LD_INT 75
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: LIST
37258: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37259: LD_VAR 0 6
37263: PPUSH
37264: CALL_OW 264
37268: PUSH
37269: LD_INT 26
37271: PUSH
37272: EMPTY
37273: LIST
37274: IN
37275: IFFALSE 37296
// points := [ 120 , 30 , 80 ] ;
37277: LD_ADDR_VAR 0 9
37281: PUSH
37282: LD_INT 120
37284: PUSH
37285: LD_INT 30
37287: PUSH
37288: LD_INT 80
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: LIST
37295: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37296: LD_VAR 0 6
37300: PPUSH
37301: CALL_OW 264
37305: PUSH
37306: LD_INT 22
37308: PUSH
37309: EMPTY
37310: LIST
37311: IN
37312: IFFALSE 37333
// points := [ 40 , 1 , 1 ] ;
37314: LD_ADDR_VAR 0 9
37318: PUSH
37319: LD_INT 40
37321: PUSH
37322: LD_INT 1
37324: PUSH
37325: LD_INT 1
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: LIST
37332: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37333: LD_VAR 0 6
37337: PPUSH
37338: CALL_OW 264
37342: PUSH
37343: LD_INT 29
37345: PUSH
37346: EMPTY
37347: LIST
37348: IN
37349: IFFALSE 37370
// points := [ 70 , 200 , 400 ] ;
37351: LD_ADDR_VAR 0 9
37355: PUSH
37356: LD_INT 70
37358: PUSH
37359: LD_INT 200
37361: PUSH
37362: LD_INT 400
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: LIST
37369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37370: LD_VAR 0 6
37374: PPUSH
37375: CALL_OW 264
37379: PUSH
37380: LD_INT 14
37382: PUSH
37383: LD_INT 53
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: IN
37390: IFFALSE 37411
// points := [ 40 , 10 , 20 ] ;
37392: LD_ADDR_VAR 0 9
37396: PUSH
37397: LD_INT 40
37399: PUSH
37400: LD_INT 10
37402: PUSH
37403: LD_INT 20
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: LIST
37410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37411: LD_VAR 0 6
37415: PPUSH
37416: CALL_OW 264
37420: PUSH
37421: LD_INT 9
37423: PUSH
37424: EMPTY
37425: LIST
37426: IN
37427: IFFALSE 37448
// points := [ 5 , 70 , 20 ] ;
37429: LD_ADDR_VAR 0 9
37433: PUSH
37434: LD_INT 5
37436: PUSH
37437: LD_INT 70
37439: PUSH
37440: LD_INT 20
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: LIST
37447: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37448: LD_VAR 0 6
37452: PPUSH
37453: CALL_OW 264
37457: PUSH
37458: LD_INT 10
37460: PUSH
37461: EMPTY
37462: LIST
37463: IN
37464: IFFALSE 37485
// points := [ 35 , 110 , 70 ] ;
37466: LD_ADDR_VAR 0 9
37470: PUSH
37471: LD_INT 35
37473: PUSH
37474: LD_INT 110
37476: PUSH
37477: LD_INT 70
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: LIST
37484: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37485: LD_VAR 0 6
37489: PPUSH
37490: CALL_OW 265
37494: PUSH
37495: LD_INT 25
37497: EQUAL
37498: IFFALSE 37519
// points := [ 80 , 65 , 100 ] ;
37500: LD_ADDR_VAR 0 9
37504: PUSH
37505: LD_INT 80
37507: PUSH
37508: LD_INT 65
37510: PUSH
37511: LD_INT 100
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: LIST
37518: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37519: LD_VAR 0 6
37523: PPUSH
37524: CALL_OW 263
37528: PUSH
37529: LD_INT 1
37531: EQUAL
37532: IFFALSE 37567
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37534: LD_ADDR_VAR 0 10
37538: PUSH
37539: LD_VAR 0 10
37543: PUSH
37544: LD_VAR 0 6
37548: PPUSH
37549: CALL_OW 311
37553: PPUSH
37554: LD_INT 3
37556: PPUSH
37557: CALL_OW 259
37561: PUSH
37562: LD_INT 4
37564: MUL
37565: MUL
37566: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37567: LD_VAR 0 6
37571: PPUSH
37572: CALL_OW 263
37576: PUSH
37577: LD_INT 2
37579: EQUAL
37580: IFFALSE 37631
// begin j := IsControledBy ( i ) ;
37582: LD_ADDR_VAR 0 7
37586: PUSH
37587: LD_VAR 0 6
37591: PPUSH
37592: CALL_OW 312
37596: ST_TO_ADDR
// if j then
37597: LD_VAR 0 7
37601: IFFALSE 37631
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37603: LD_ADDR_VAR 0 10
37607: PUSH
37608: LD_VAR 0 10
37612: PUSH
37613: LD_VAR 0 7
37617: PPUSH
37618: LD_INT 3
37620: PPUSH
37621: CALL_OW 259
37625: PUSH
37626: LD_INT 3
37628: MUL
37629: MUL
37630: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37631: LD_VAR 0 6
37635: PPUSH
37636: CALL_OW 264
37640: PUSH
37641: LD_INT 5
37643: PUSH
37644: LD_INT 6
37646: PUSH
37647: LD_INT 46
37649: PUSH
37650: LD_INT 44
37652: PUSH
37653: LD_INT 47
37655: PUSH
37656: LD_INT 45
37658: PUSH
37659: LD_INT 28
37661: PUSH
37662: LD_INT 7
37664: PUSH
37665: LD_INT 27
37667: PUSH
37668: LD_INT 29
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: IN
37683: PUSH
37684: LD_VAR 0 1
37688: PPUSH
37689: LD_INT 52
37691: PPUSH
37692: CALL_OW 321
37696: PUSH
37697: LD_INT 2
37699: EQUAL
37700: AND
37701: IFFALSE 37718
// bpoints := bpoints * 1.2 ;
37703: LD_ADDR_VAR 0 10
37707: PUSH
37708: LD_VAR 0 10
37712: PUSH
37713: LD_REAL  1.20000000000000E+0000
37716: MUL
37717: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37718: LD_VAR 0 6
37722: PPUSH
37723: CALL_OW 264
37727: PUSH
37728: LD_INT 6
37730: PUSH
37731: LD_INT 46
37733: PUSH
37734: LD_INT 47
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: LIST
37741: IN
37742: IFFALSE 37759
// bpoints := bpoints * 1.2 ;
37744: LD_ADDR_VAR 0 10
37748: PUSH
37749: LD_VAR 0 10
37753: PUSH
37754: LD_REAL  1.20000000000000E+0000
37757: MUL
37758: ST_TO_ADDR
// end ; unit_building :
37759: GO 37773
37761: LD_INT 3
37763: DOUBLE
37764: EQUAL
37765: IFTRUE 37769
37767: GO 37772
37769: POP
// ; end ;
37770: GO 37773
37772: POP
// for j = 1 to 3 do
37773: LD_ADDR_VAR 0 7
37777: PUSH
37778: DOUBLE
37779: LD_INT 1
37781: DEC
37782: ST_TO_ADDR
37783: LD_INT 3
37785: PUSH
37786: FOR_TO
37787: IFFALSE 37840
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37789: LD_ADDR_VAR 0 5
37793: PUSH
37794: LD_VAR 0 5
37798: PPUSH
37799: LD_VAR 0 7
37803: PPUSH
37804: LD_VAR 0 5
37808: PUSH
37809: LD_VAR 0 7
37813: ARRAY
37814: PUSH
37815: LD_VAR 0 9
37819: PUSH
37820: LD_VAR 0 7
37824: ARRAY
37825: PUSH
37826: LD_VAR 0 10
37830: MUL
37831: PLUS
37832: PPUSH
37833: CALL_OW 1
37837: ST_TO_ADDR
37838: GO 37786
37840: POP
37841: POP
// end ;
37842: GO 36319
37844: POP
37845: POP
// result := Replace ( result , 4 , tmp ) ;
37846: LD_ADDR_VAR 0 5
37850: PUSH
37851: LD_VAR 0 5
37855: PPUSH
37856: LD_INT 4
37858: PPUSH
37859: LD_VAR 0 8
37863: PPUSH
37864: CALL_OW 1
37868: ST_TO_ADDR
// end ;
37869: LD_VAR 0 5
37873: RET
// export function DangerAtRange ( unit , range ) ; begin
37874: LD_INT 0
37876: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37877: LD_ADDR_VAR 0 3
37881: PUSH
37882: LD_VAR 0 1
37886: PPUSH
37887: CALL_OW 255
37891: PPUSH
37892: LD_VAR 0 1
37896: PPUSH
37897: CALL_OW 250
37901: PPUSH
37902: LD_VAR 0 1
37906: PPUSH
37907: CALL_OW 251
37911: PPUSH
37912: LD_VAR 0 2
37916: PPUSH
37917: CALL 36171 0 4
37921: ST_TO_ADDR
// end ;
37922: LD_VAR 0 3
37926: RET
// export function DangerInArea ( side , area ) ; begin
37927: LD_INT 0
37929: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37930: LD_ADDR_VAR 0 3
37934: PUSH
37935: LD_VAR 0 2
37939: PPUSH
37940: LD_INT 81
37942: PUSH
37943: LD_VAR 0 1
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PPUSH
37952: CALL_OW 70
37956: ST_TO_ADDR
// end ;
37957: LD_VAR 0 3
37961: RET
// export function IsExtension ( b ) ; begin
37962: LD_INT 0
37964: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37965: LD_ADDR_VAR 0 2
37969: PUSH
37970: LD_VAR 0 1
37974: PUSH
37975: LD_INT 23
37977: PUSH
37978: LD_INT 20
37980: PUSH
37981: LD_INT 22
37983: PUSH
37984: LD_INT 17
37986: PUSH
37987: LD_INT 24
37989: PUSH
37990: LD_INT 21
37992: PUSH
37993: LD_INT 19
37995: PUSH
37996: LD_INT 16
37998: PUSH
37999: LD_INT 25
38001: PUSH
38002: LD_INT 18
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: IN
38017: ST_TO_ADDR
// end ;
38018: LD_VAR 0 2
38022: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38023: LD_INT 0
38025: PPUSH
38026: PPUSH
38027: PPUSH
// result := [ ] ;
38028: LD_ADDR_VAR 0 4
38032: PUSH
38033: EMPTY
38034: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38035: LD_ADDR_VAR 0 5
38039: PUSH
38040: LD_VAR 0 2
38044: PPUSH
38045: LD_INT 21
38047: PUSH
38048: LD_INT 3
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PPUSH
38055: CALL_OW 70
38059: ST_TO_ADDR
// if not tmp then
38060: LD_VAR 0 5
38064: NOT
38065: IFFALSE 38069
// exit ;
38067: GO 38133
// if checkLink then
38069: LD_VAR 0 3
38073: IFFALSE 38123
// begin for i in tmp do
38075: LD_ADDR_VAR 0 6
38079: PUSH
38080: LD_VAR 0 5
38084: PUSH
38085: FOR_IN
38086: IFFALSE 38121
// if GetBase ( i ) <> base then
38088: LD_VAR 0 6
38092: PPUSH
38093: CALL_OW 274
38097: PUSH
38098: LD_VAR 0 1
38102: NONEQUAL
38103: IFFALSE 38119
// ComLinkToBase ( base , i ) ;
38105: LD_VAR 0 1
38109: PPUSH
38110: LD_VAR 0 6
38114: PPUSH
38115: CALL_OW 169
38119: GO 38085
38121: POP
38122: POP
// end ; result := tmp ;
38123: LD_ADDR_VAR 0 4
38127: PUSH
38128: LD_VAR 0 5
38132: ST_TO_ADDR
// end ;
38133: LD_VAR 0 4
38137: RET
// export function ComComplete ( units , b ) ; var i ; begin
38138: LD_INT 0
38140: PPUSH
38141: PPUSH
// if not units then
38142: LD_VAR 0 1
38146: NOT
38147: IFFALSE 38151
// exit ;
38149: GO 38241
// for i in units do
38151: LD_ADDR_VAR 0 4
38155: PUSH
38156: LD_VAR 0 1
38160: PUSH
38161: FOR_IN
38162: IFFALSE 38239
// if BuildingStatus ( b ) = bs_build then
38164: LD_VAR 0 2
38168: PPUSH
38169: CALL_OW 461
38173: PUSH
38174: LD_INT 1
38176: EQUAL
38177: IFFALSE 38237
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38179: LD_VAR 0 4
38183: PPUSH
38184: LD_STRING h
38186: PUSH
38187: LD_VAR 0 2
38191: PPUSH
38192: CALL_OW 250
38196: PUSH
38197: LD_VAR 0 2
38201: PPUSH
38202: CALL_OW 251
38206: PUSH
38207: LD_VAR 0 2
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: LD_INT 0
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: PUSH
38230: EMPTY
38231: LIST
38232: PPUSH
38233: CALL_OW 446
38237: GO 38161
38239: POP
38240: POP
// end ;
38241: LD_VAR 0 3
38245: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38246: LD_INT 0
38248: PPUSH
38249: PPUSH
38250: PPUSH
38251: PPUSH
38252: PPUSH
38253: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38254: LD_VAR 0 1
38258: NOT
38259: PUSH
38260: LD_VAR 0 1
38264: PPUSH
38265: CALL_OW 263
38269: PUSH
38270: LD_INT 2
38272: NONEQUAL
38273: OR
38274: IFFALSE 38278
// exit ;
38276: GO 38594
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38278: LD_ADDR_VAR 0 6
38282: PUSH
38283: LD_INT 22
38285: PUSH
38286: LD_VAR 0 1
38290: PPUSH
38291: CALL_OW 255
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 2
38302: PUSH
38303: LD_INT 30
38305: PUSH
38306: LD_INT 36
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 34
38315: PUSH
38316: LD_INT 31
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: LIST
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PPUSH
38332: CALL_OW 69
38336: ST_TO_ADDR
// if not tmp then
38337: LD_VAR 0 6
38341: NOT
38342: IFFALSE 38346
// exit ;
38344: GO 38594
// result := [ ] ;
38346: LD_ADDR_VAR 0 2
38350: PUSH
38351: EMPTY
38352: ST_TO_ADDR
// for i in tmp do
38353: LD_ADDR_VAR 0 3
38357: PUSH
38358: LD_VAR 0 6
38362: PUSH
38363: FOR_IN
38364: IFFALSE 38435
// begin t := UnitsInside ( i ) ;
38366: LD_ADDR_VAR 0 4
38370: PUSH
38371: LD_VAR 0 3
38375: PPUSH
38376: CALL_OW 313
38380: ST_TO_ADDR
// if t then
38381: LD_VAR 0 4
38385: IFFALSE 38433
// for j in t do
38387: LD_ADDR_VAR 0 7
38391: PUSH
38392: LD_VAR 0 4
38396: PUSH
38397: FOR_IN
38398: IFFALSE 38431
// result := Replace ( result , result + 1 , j ) ;
38400: LD_ADDR_VAR 0 2
38404: PUSH
38405: LD_VAR 0 2
38409: PPUSH
38410: LD_VAR 0 2
38414: PUSH
38415: LD_INT 1
38417: PLUS
38418: PPUSH
38419: LD_VAR 0 7
38423: PPUSH
38424: CALL_OW 1
38428: ST_TO_ADDR
38429: GO 38397
38431: POP
38432: POP
// end ;
38433: GO 38363
38435: POP
38436: POP
// if not result then
38437: LD_VAR 0 2
38441: NOT
38442: IFFALSE 38446
// exit ;
38444: GO 38594
// mech := result [ 1 ] ;
38446: LD_ADDR_VAR 0 5
38450: PUSH
38451: LD_VAR 0 2
38455: PUSH
38456: LD_INT 1
38458: ARRAY
38459: ST_TO_ADDR
// if result > 1 then
38460: LD_VAR 0 2
38464: PUSH
38465: LD_INT 1
38467: GREATER
38468: IFFALSE 38580
// begin for i = 2 to result do
38470: LD_ADDR_VAR 0 3
38474: PUSH
38475: DOUBLE
38476: LD_INT 2
38478: DEC
38479: ST_TO_ADDR
38480: LD_VAR 0 2
38484: PUSH
38485: FOR_TO
38486: IFFALSE 38578
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38488: LD_ADDR_VAR 0 4
38492: PUSH
38493: LD_VAR 0 2
38497: PUSH
38498: LD_VAR 0 3
38502: ARRAY
38503: PPUSH
38504: LD_INT 3
38506: PPUSH
38507: CALL_OW 259
38511: PUSH
38512: LD_VAR 0 2
38516: PUSH
38517: LD_VAR 0 3
38521: ARRAY
38522: PPUSH
38523: CALL_OW 432
38527: MINUS
38528: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38529: LD_VAR 0 4
38533: PUSH
38534: LD_VAR 0 5
38538: PPUSH
38539: LD_INT 3
38541: PPUSH
38542: CALL_OW 259
38546: PUSH
38547: LD_VAR 0 5
38551: PPUSH
38552: CALL_OW 432
38556: MINUS
38557: GREATEREQUAL
38558: IFFALSE 38576
// mech := result [ i ] ;
38560: LD_ADDR_VAR 0 5
38564: PUSH
38565: LD_VAR 0 2
38569: PUSH
38570: LD_VAR 0 3
38574: ARRAY
38575: ST_TO_ADDR
// end ;
38576: GO 38485
38578: POP
38579: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38580: LD_VAR 0 1
38584: PPUSH
38585: LD_VAR 0 5
38589: PPUSH
38590: CALL_OW 135
// end ;
38594: LD_VAR 0 2
38598: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38599: LD_INT 0
38601: PPUSH
38602: PPUSH
38603: PPUSH
38604: PPUSH
38605: PPUSH
38606: PPUSH
38607: PPUSH
38608: PPUSH
38609: PPUSH
38610: PPUSH
38611: PPUSH
38612: PPUSH
38613: PPUSH
// result := [ ] ;
38614: LD_ADDR_VAR 0 7
38618: PUSH
38619: EMPTY
38620: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38621: LD_VAR 0 1
38625: PPUSH
38626: CALL_OW 266
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: LD_INT 1
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: IN
38641: NOT
38642: IFFALSE 38646
// exit ;
38644: GO 40280
// if name then
38646: LD_VAR 0 3
38650: IFFALSE 38666
// SetBName ( base_dep , name ) ;
38652: LD_VAR 0 1
38656: PPUSH
38657: LD_VAR 0 3
38661: PPUSH
38662: CALL_OW 500
// base := GetBase ( base_dep ) ;
38666: LD_ADDR_VAR 0 15
38670: PUSH
38671: LD_VAR 0 1
38675: PPUSH
38676: CALL_OW 274
38680: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38681: LD_ADDR_VAR 0 16
38685: PUSH
38686: LD_VAR 0 1
38690: PPUSH
38691: CALL_OW 255
38695: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38696: LD_ADDR_VAR 0 17
38700: PUSH
38701: LD_VAR 0 1
38705: PPUSH
38706: CALL_OW 248
38710: ST_TO_ADDR
// if sources then
38711: LD_VAR 0 5
38715: IFFALSE 38762
// for i = 1 to 3 do
38717: LD_ADDR_VAR 0 8
38721: PUSH
38722: DOUBLE
38723: LD_INT 1
38725: DEC
38726: ST_TO_ADDR
38727: LD_INT 3
38729: PUSH
38730: FOR_TO
38731: IFFALSE 38760
// AddResourceType ( base , i , sources [ i ] ) ;
38733: LD_VAR 0 15
38737: PPUSH
38738: LD_VAR 0 8
38742: PPUSH
38743: LD_VAR 0 5
38747: PUSH
38748: LD_VAR 0 8
38752: ARRAY
38753: PPUSH
38754: CALL_OW 276
38758: GO 38730
38760: POP
38761: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38762: LD_ADDR_VAR 0 18
38766: PUSH
38767: LD_VAR 0 15
38771: PPUSH
38772: LD_VAR 0 2
38776: PPUSH
38777: LD_INT 1
38779: PPUSH
38780: CALL 38023 0 3
38784: ST_TO_ADDR
// InitHc ;
38785: CALL_OW 19
// InitUc ;
38789: CALL_OW 18
// uc_side := side ;
38793: LD_ADDR_OWVAR 20
38797: PUSH
38798: LD_VAR 0 16
38802: ST_TO_ADDR
// uc_nation := nation ;
38803: LD_ADDR_OWVAR 21
38807: PUSH
38808: LD_VAR 0 17
38812: ST_TO_ADDR
// if buildings then
38813: LD_VAR 0 18
38817: IFFALSE 40139
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38819: LD_ADDR_VAR 0 19
38823: PUSH
38824: LD_VAR 0 18
38828: PPUSH
38829: LD_INT 2
38831: PUSH
38832: LD_INT 30
38834: PUSH
38835: LD_INT 29
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 30
38844: PUSH
38845: LD_INT 30
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: LIST
38856: PPUSH
38857: CALL_OW 72
38861: ST_TO_ADDR
// if tmp then
38862: LD_VAR 0 19
38866: IFFALSE 38914
// for i in tmp do
38868: LD_ADDR_VAR 0 8
38872: PUSH
38873: LD_VAR 0 19
38877: PUSH
38878: FOR_IN
38879: IFFALSE 38912
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38881: LD_VAR 0 8
38885: PPUSH
38886: CALL_OW 250
38890: PPUSH
38891: LD_VAR 0 8
38895: PPUSH
38896: CALL_OW 251
38900: PPUSH
38901: LD_VAR 0 16
38905: PPUSH
38906: CALL_OW 441
38910: GO 38878
38912: POP
38913: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38914: LD_VAR 0 18
38918: PPUSH
38919: LD_INT 2
38921: PUSH
38922: LD_INT 30
38924: PUSH
38925: LD_INT 32
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 30
38934: PUSH
38935: LD_INT 33
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: LIST
38946: PPUSH
38947: CALL_OW 72
38951: IFFALSE 39039
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38953: LD_ADDR_VAR 0 8
38957: PUSH
38958: LD_VAR 0 18
38962: PPUSH
38963: LD_INT 2
38965: PUSH
38966: LD_INT 30
38968: PUSH
38969: LD_INT 32
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 30
38978: PUSH
38979: LD_INT 33
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: LIST
38990: PPUSH
38991: CALL_OW 72
38995: PUSH
38996: FOR_IN
38997: IFFALSE 39037
// begin if not GetBWeapon ( i ) then
38999: LD_VAR 0 8
39003: PPUSH
39004: CALL_OW 269
39008: NOT
39009: IFFALSE 39035
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39011: LD_VAR 0 8
39015: PPUSH
39016: LD_VAR 0 8
39020: PPUSH
39021: LD_VAR 0 2
39025: PPUSH
39026: CALL 40285 0 2
39030: PPUSH
39031: CALL_OW 431
// end ;
39035: GO 38996
39037: POP
39038: POP
// end ; for i = 1 to personel do
39039: LD_ADDR_VAR 0 8
39043: PUSH
39044: DOUBLE
39045: LD_INT 1
39047: DEC
39048: ST_TO_ADDR
39049: LD_VAR 0 6
39053: PUSH
39054: FOR_TO
39055: IFFALSE 40119
// begin if i > 4 then
39057: LD_VAR 0 8
39061: PUSH
39062: LD_INT 4
39064: GREATER
39065: IFFALSE 39069
// break ;
39067: GO 40119
// case i of 1 :
39069: LD_VAR 0 8
39073: PUSH
39074: LD_INT 1
39076: DOUBLE
39077: EQUAL
39078: IFTRUE 39082
39080: GO 39162
39082: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39083: LD_ADDR_VAR 0 12
39087: PUSH
39088: LD_VAR 0 18
39092: PPUSH
39093: LD_INT 22
39095: PUSH
39096: LD_VAR 0 16
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 58
39107: PUSH
39108: EMPTY
39109: LIST
39110: PUSH
39111: LD_INT 2
39113: PUSH
39114: LD_INT 30
39116: PUSH
39117: LD_INT 32
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 30
39126: PUSH
39127: LD_INT 4
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 30
39136: PUSH
39137: LD_INT 5
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: LIST
39154: PPUSH
39155: CALL_OW 72
39159: ST_TO_ADDR
39160: GO 39384
39162: LD_INT 2
39164: DOUBLE
39165: EQUAL
39166: IFTRUE 39170
39168: GO 39232
39170: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39171: LD_ADDR_VAR 0 12
39175: PUSH
39176: LD_VAR 0 18
39180: PPUSH
39181: LD_INT 22
39183: PUSH
39184: LD_VAR 0 16
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 2
39195: PUSH
39196: LD_INT 30
39198: PUSH
39199: LD_INT 0
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 30
39208: PUSH
39209: LD_INT 1
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: LIST
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PPUSH
39225: CALL_OW 72
39229: ST_TO_ADDR
39230: GO 39384
39232: LD_INT 3
39234: DOUBLE
39235: EQUAL
39236: IFTRUE 39240
39238: GO 39302
39240: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39241: LD_ADDR_VAR 0 12
39245: PUSH
39246: LD_VAR 0 18
39250: PPUSH
39251: LD_INT 22
39253: PUSH
39254: LD_VAR 0 16
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 2
39265: PUSH
39266: LD_INT 30
39268: PUSH
39269: LD_INT 2
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 30
39278: PUSH
39279: LD_INT 3
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: LIST
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PPUSH
39295: CALL_OW 72
39299: ST_TO_ADDR
39300: GO 39384
39302: LD_INT 4
39304: DOUBLE
39305: EQUAL
39306: IFTRUE 39310
39308: GO 39383
39310: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39311: LD_ADDR_VAR 0 12
39315: PUSH
39316: LD_VAR 0 18
39320: PPUSH
39321: LD_INT 22
39323: PUSH
39324: LD_VAR 0 16
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 2
39335: PUSH
39336: LD_INT 30
39338: PUSH
39339: LD_INT 6
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 30
39348: PUSH
39349: LD_INT 7
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 30
39358: PUSH
39359: LD_INT 8
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PPUSH
39376: CALL_OW 72
39380: ST_TO_ADDR
39381: GO 39384
39383: POP
// if i = 1 then
39384: LD_VAR 0 8
39388: PUSH
39389: LD_INT 1
39391: EQUAL
39392: IFFALSE 39503
// begin tmp := [ ] ;
39394: LD_ADDR_VAR 0 19
39398: PUSH
39399: EMPTY
39400: ST_TO_ADDR
// for j in f do
39401: LD_ADDR_VAR 0 9
39405: PUSH
39406: LD_VAR 0 12
39410: PUSH
39411: FOR_IN
39412: IFFALSE 39485
// if GetBType ( j ) = b_bunker then
39414: LD_VAR 0 9
39418: PPUSH
39419: CALL_OW 266
39423: PUSH
39424: LD_INT 32
39426: EQUAL
39427: IFFALSE 39454
// tmp := Insert ( tmp , 1 , j ) else
39429: LD_ADDR_VAR 0 19
39433: PUSH
39434: LD_VAR 0 19
39438: PPUSH
39439: LD_INT 1
39441: PPUSH
39442: LD_VAR 0 9
39446: PPUSH
39447: CALL_OW 2
39451: ST_TO_ADDR
39452: GO 39483
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39454: LD_ADDR_VAR 0 19
39458: PUSH
39459: LD_VAR 0 19
39463: PPUSH
39464: LD_VAR 0 19
39468: PUSH
39469: LD_INT 1
39471: PLUS
39472: PPUSH
39473: LD_VAR 0 9
39477: PPUSH
39478: CALL_OW 2
39482: ST_TO_ADDR
39483: GO 39411
39485: POP
39486: POP
// if tmp then
39487: LD_VAR 0 19
39491: IFFALSE 39503
// f := tmp ;
39493: LD_ADDR_VAR 0 12
39497: PUSH
39498: LD_VAR 0 19
39502: ST_TO_ADDR
// end ; x := personel [ i ] ;
39503: LD_ADDR_VAR 0 13
39507: PUSH
39508: LD_VAR 0 6
39512: PUSH
39513: LD_VAR 0 8
39517: ARRAY
39518: ST_TO_ADDR
// if x = - 1 then
39519: LD_VAR 0 13
39523: PUSH
39524: LD_INT 1
39526: NEG
39527: EQUAL
39528: IFFALSE 39737
// begin for j in f do
39530: LD_ADDR_VAR 0 9
39534: PUSH
39535: LD_VAR 0 12
39539: PUSH
39540: FOR_IN
39541: IFFALSE 39733
// repeat InitHc ;
39543: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39547: LD_VAR 0 9
39551: PPUSH
39552: CALL_OW 266
39556: PUSH
39557: LD_INT 5
39559: EQUAL
39560: IFFALSE 39630
// begin if UnitsInside ( j ) < 3 then
39562: LD_VAR 0 9
39566: PPUSH
39567: CALL_OW 313
39571: PUSH
39572: LD_INT 3
39574: LESS
39575: IFFALSE 39611
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39577: LD_INT 0
39579: PPUSH
39580: LD_INT 5
39582: PUSH
39583: LD_INT 8
39585: PUSH
39586: LD_INT 9
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: LIST
39593: PUSH
39594: LD_VAR 0 17
39598: ARRAY
39599: PPUSH
39600: LD_VAR 0 4
39604: PPUSH
39605: CALL_OW 380
39609: GO 39628
// PrepareHuman ( false , i , skill ) ;
39611: LD_INT 0
39613: PPUSH
39614: LD_VAR 0 8
39618: PPUSH
39619: LD_VAR 0 4
39623: PPUSH
39624: CALL_OW 380
// end else
39628: GO 39647
// PrepareHuman ( false , i , skill ) ;
39630: LD_INT 0
39632: PPUSH
39633: LD_VAR 0 8
39637: PPUSH
39638: LD_VAR 0 4
39642: PPUSH
39643: CALL_OW 380
// un := CreateHuman ;
39647: LD_ADDR_VAR 0 14
39651: PUSH
39652: CALL_OW 44
39656: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39657: LD_ADDR_VAR 0 7
39661: PUSH
39662: LD_VAR 0 7
39666: PPUSH
39667: LD_INT 1
39669: PPUSH
39670: LD_VAR 0 14
39674: PPUSH
39675: CALL_OW 2
39679: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39680: LD_VAR 0 14
39684: PPUSH
39685: LD_VAR 0 9
39689: PPUSH
39690: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39694: LD_VAR 0 9
39698: PPUSH
39699: CALL_OW 313
39703: PUSH
39704: LD_INT 6
39706: EQUAL
39707: PUSH
39708: LD_VAR 0 9
39712: PPUSH
39713: CALL_OW 266
39717: PUSH
39718: LD_INT 32
39720: PUSH
39721: LD_INT 31
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: IN
39728: OR
39729: IFFALSE 39543
39731: GO 39540
39733: POP
39734: POP
// end else
39735: GO 40117
// for j = 1 to x do
39737: LD_ADDR_VAR 0 9
39741: PUSH
39742: DOUBLE
39743: LD_INT 1
39745: DEC
39746: ST_TO_ADDR
39747: LD_VAR 0 13
39751: PUSH
39752: FOR_TO
39753: IFFALSE 40115
// begin InitHc ;
39755: CALL_OW 19
// if not f then
39759: LD_VAR 0 12
39763: NOT
39764: IFFALSE 39853
// begin PrepareHuman ( false , i , skill ) ;
39766: LD_INT 0
39768: PPUSH
39769: LD_VAR 0 8
39773: PPUSH
39774: LD_VAR 0 4
39778: PPUSH
39779: CALL_OW 380
// un := CreateHuman ;
39783: LD_ADDR_VAR 0 14
39787: PUSH
39788: CALL_OW 44
39792: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39793: LD_ADDR_VAR 0 7
39797: PUSH
39798: LD_VAR 0 7
39802: PPUSH
39803: LD_INT 1
39805: PPUSH
39806: LD_VAR 0 14
39810: PPUSH
39811: CALL_OW 2
39815: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39816: LD_VAR 0 14
39820: PPUSH
39821: LD_VAR 0 1
39825: PPUSH
39826: CALL_OW 250
39830: PPUSH
39831: LD_VAR 0 1
39835: PPUSH
39836: CALL_OW 251
39840: PPUSH
39841: LD_INT 10
39843: PPUSH
39844: LD_INT 0
39846: PPUSH
39847: CALL_OW 50
// continue ;
39851: GO 39752
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39853: LD_VAR 0 12
39857: PUSH
39858: LD_INT 1
39860: ARRAY
39861: PPUSH
39862: CALL_OW 313
39866: PUSH
39867: LD_VAR 0 12
39871: PUSH
39872: LD_INT 1
39874: ARRAY
39875: PPUSH
39876: CALL_OW 266
39880: PUSH
39881: LD_INT 32
39883: PUSH
39884: LD_INT 31
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: IN
39891: AND
39892: PUSH
39893: LD_VAR 0 12
39897: PUSH
39898: LD_INT 1
39900: ARRAY
39901: PPUSH
39902: CALL_OW 313
39906: PUSH
39907: LD_INT 6
39909: EQUAL
39910: OR
39911: IFFALSE 39931
// f := Delete ( f , 1 ) ;
39913: LD_ADDR_VAR 0 12
39917: PUSH
39918: LD_VAR 0 12
39922: PPUSH
39923: LD_INT 1
39925: PPUSH
39926: CALL_OW 3
39930: ST_TO_ADDR
// if not f then
39931: LD_VAR 0 12
39935: NOT
39936: IFFALSE 39954
// begin x := x + 2 ;
39938: LD_ADDR_VAR 0 13
39942: PUSH
39943: LD_VAR 0 13
39947: PUSH
39948: LD_INT 2
39950: PLUS
39951: ST_TO_ADDR
// continue ;
39952: GO 39752
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39954: LD_VAR 0 12
39958: PUSH
39959: LD_INT 1
39961: ARRAY
39962: PPUSH
39963: CALL_OW 266
39967: PUSH
39968: LD_INT 5
39970: EQUAL
39971: IFFALSE 40045
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39973: LD_VAR 0 12
39977: PUSH
39978: LD_INT 1
39980: ARRAY
39981: PPUSH
39982: CALL_OW 313
39986: PUSH
39987: LD_INT 3
39989: LESS
39990: IFFALSE 40026
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39992: LD_INT 0
39994: PPUSH
39995: LD_INT 5
39997: PUSH
39998: LD_INT 8
40000: PUSH
40001: LD_INT 9
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: LIST
40008: PUSH
40009: LD_VAR 0 17
40013: ARRAY
40014: PPUSH
40015: LD_VAR 0 4
40019: PPUSH
40020: CALL_OW 380
40024: GO 40043
// PrepareHuman ( false , i , skill ) ;
40026: LD_INT 0
40028: PPUSH
40029: LD_VAR 0 8
40033: PPUSH
40034: LD_VAR 0 4
40038: PPUSH
40039: CALL_OW 380
// end else
40043: GO 40062
// PrepareHuman ( false , i , skill ) ;
40045: LD_INT 0
40047: PPUSH
40048: LD_VAR 0 8
40052: PPUSH
40053: LD_VAR 0 4
40057: PPUSH
40058: CALL_OW 380
// un := CreateHuman ;
40062: LD_ADDR_VAR 0 14
40066: PUSH
40067: CALL_OW 44
40071: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40072: LD_ADDR_VAR 0 7
40076: PUSH
40077: LD_VAR 0 7
40081: PPUSH
40082: LD_INT 1
40084: PPUSH
40085: LD_VAR 0 14
40089: PPUSH
40090: CALL_OW 2
40094: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40095: LD_VAR 0 14
40099: PPUSH
40100: LD_VAR 0 12
40104: PUSH
40105: LD_INT 1
40107: ARRAY
40108: PPUSH
40109: CALL_OW 52
// end ;
40113: GO 39752
40115: POP
40116: POP
// end ;
40117: GO 39054
40119: POP
40120: POP
// result := result ^ buildings ;
40121: LD_ADDR_VAR 0 7
40125: PUSH
40126: LD_VAR 0 7
40130: PUSH
40131: LD_VAR 0 18
40135: ADD
40136: ST_TO_ADDR
// end else
40137: GO 40280
// begin for i = 1 to personel do
40139: LD_ADDR_VAR 0 8
40143: PUSH
40144: DOUBLE
40145: LD_INT 1
40147: DEC
40148: ST_TO_ADDR
40149: LD_VAR 0 6
40153: PUSH
40154: FOR_TO
40155: IFFALSE 40278
// begin if i > 4 then
40157: LD_VAR 0 8
40161: PUSH
40162: LD_INT 4
40164: GREATER
40165: IFFALSE 40169
// break ;
40167: GO 40278
// x := personel [ i ] ;
40169: LD_ADDR_VAR 0 13
40173: PUSH
40174: LD_VAR 0 6
40178: PUSH
40179: LD_VAR 0 8
40183: ARRAY
40184: ST_TO_ADDR
// if x = - 1 then
40185: LD_VAR 0 13
40189: PUSH
40190: LD_INT 1
40192: NEG
40193: EQUAL
40194: IFFALSE 40198
// continue ;
40196: GO 40154
// PrepareHuman ( false , i , skill ) ;
40198: LD_INT 0
40200: PPUSH
40201: LD_VAR 0 8
40205: PPUSH
40206: LD_VAR 0 4
40210: PPUSH
40211: CALL_OW 380
// un := CreateHuman ;
40215: LD_ADDR_VAR 0 14
40219: PUSH
40220: CALL_OW 44
40224: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40225: LD_VAR 0 14
40229: PPUSH
40230: LD_VAR 0 1
40234: PPUSH
40235: CALL_OW 250
40239: PPUSH
40240: LD_VAR 0 1
40244: PPUSH
40245: CALL_OW 251
40249: PPUSH
40250: LD_INT 10
40252: PPUSH
40253: LD_INT 0
40255: PPUSH
40256: CALL_OW 50
// result := result ^ un ;
40260: LD_ADDR_VAR 0 7
40264: PUSH
40265: LD_VAR 0 7
40269: PUSH
40270: LD_VAR 0 14
40274: ADD
40275: ST_TO_ADDR
// end ;
40276: GO 40154
40278: POP
40279: POP
// end ; end ;
40280: LD_VAR 0 7
40284: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40285: LD_INT 0
40287: PPUSH
40288: PPUSH
40289: PPUSH
40290: PPUSH
40291: PPUSH
40292: PPUSH
40293: PPUSH
40294: PPUSH
40295: PPUSH
40296: PPUSH
40297: PPUSH
40298: PPUSH
40299: PPUSH
40300: PPUSH
40301: PPUSH
40302: PPUSH
// result := false ;
40303: LD_ADDR_VAR 0 3
40307: PUSH
40308: LD_INT 0
40310: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40311: LD_VAR 0 1
40315: NOT
40316: PUSH
40317: LD_VAR 0 1
40321: PPUSH
40322: CALL_OW 266
40326: PUSH
40327: LD_INT 32
40329: PUSH
40330: LD_INT 33
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: IN
40337: NOT
40338: OR
40339: IFFALSE 40343
// exit ;
40341: GO 41452
// nat := GetNation ( tower ) ;
40343: LD_ADDR_VAR 0 12
40347: PUSH
40348: LD_VAR 0 1
40352: PPUSH
40353: CALL_OW 248
40357: ST_TO_ADDR
// side := GetSide ( tower ) ;
40358: LD_ADDR_VAR 0 16
40362: PUSH
40363: LD_VAR 0 1
40367: PPUSH
40368: CALL_OW 255
40372: ST_TO_ADDR
// x := GetX ( tower ) ;
40373: LD_ADDR_VAR 0 10
40377: PUSH
40378: LD_VAR 0 1
40382: PPUSH
40383: CALL_OW 250
40387: ST_TO_ADDR
// y := GetY ( tower ) ;
40388: LD_ADDR_VAR 0 11
40392: PUSH
40393: LD_VAR 0 1
40397: PPUSH
40398: CALL_OW 251
40402: ST_TO_ADDR
// if not x or not y then
40403: LD_VAR 0 10
40407: NOT
40408: PUSH
40409: LD_VAR 0 11
40413: NOT
40414: OR
40415: IFFALSE 40419
// exit ;
40417: GO 41452
// weapon := 0 ;
40419: LD_ADDR_VAR 0 18
40423: PUSH
40424: LD_INT 0
40426: ST_TO_ADDR
// fac_list := [ ] ;
40427: LD_ADDR_VAR 0 17
40431: PUSH
40432: EMPTY
40433: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40434: LD_ADDR_VAR 0 6
40438: PUSH
40439: LD_VAR 0 1
40443: PPUSH
40444: CALL_OW 274
40448: PPUSH
40449: LD_VAR 0 2
40453: PPUSH
40454: LD_INT 0
40456: PPUSH
40457: CALL 38023 0 3
40461: PPUSH
40462: LD_INT 30
40464: PUSH
40465: LD_INT 3
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PPUSH
40472: CALL_OW 72
40476: ST_TO_ADDR
// if not factories then
40477: LD_VAR 0 6
40481: NOT
40482: IFFALSE 40486
// exit ;
40484: GO 41452
// for i in factories do
40486: LD_ADDR_VAR 0 8
40490: PUSH
40491: LD_VAR 0 6
40495: PUSH
40496: FOR_IN
40497: IFFALSE 40522
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40499: LD_ADDR_VAR 0 17
40503: PUSH
40504: LD_VAR 0 17
40508: PUSH
40509: LD_VAR 0 8
40513: PPUSH
40514: CALL_OW 478
40518: UNION
40519: ST_TO_ADDR
40520: GO 40496
40522: POP
40523: POP
// if not fac_list then
40524: LD_VAR 0 17
40528: NOT
40529: IFFALSE 40533
// exit ;
40531: GO 41452
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40533: LD_ADDR_VAR 0 5
40537: PUSH
40538: LD_INT 4
40540: PUSH
40541: LD_INT 5
40543: PUSH
40544: LD_INT 9
40546: PUSH
40547: LD_INT 10
40549: PUSH
40550: LD_INT 6
40552: PUSH
40553: LD_INT 7
40555: PUSH
40556: LD_INT 11
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 27
40570: PUSH
40571: LD_INT 28
40573: PUSH
40574: LD_INT 26
40576: PUSH
40577: LD_INT 30
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 43
40588: PUSH
40589: LD_INT 44
40591: PUSH
40592: LD_INT 46
40594: PUSH
40595: LD_INT 45
40597: PUSH
40598: LD_INT 47
40600: PUSH
40601: LD_INT 49
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: LIST
40616: PUSH
40617: LD_VAR 0 12
40621: ARRAY
40622: ST_TO_ADDR
// list := list isect fac_list ;
40623: LD_ADDR_VAR 0 5
40627: PUSH
40628: LD_VAR 0 5
40632: PUSH
40633: LD_VAR 0 17
40637: ISECT
40638: ST_TO_ADDR
// if not list then
40639: LD_VAR 0 5
40643: NOT
40644: IFFALSE 40648
// exit ;
40646: GO 41452
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40648: LD_VAR 0 12
40652: PUSH
40653: LD_INT 3
40655: EQUAL
40656: PUSH
40657: LD_INT 49
40659: PUSH
40660: LD_VAR 0 5
40664: IN
40665: AND
40666: PUSH
40667: LD_INT 31
40669: PPUSH
40670: LD_VAR 0 16
40674: PPUSH
40675: CALL_OW 321
40679: PUSH
40680: LD_INT 2
40682: EQUAL
40683: AND
40684: IFFALSE 40744
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40686: LD_INT 22
40688: PUSH
40689: LD_VAR 0 16
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 35
40700: PUSH
40701: LD_INT 49
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 91
40710: PUSH
40711: LD_VAR 0 1
40715: PUSH
40716: LD_INT 10
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: LIST
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: LIST
40728: PPUSH
40729: CALL_OW 69
40733: NOT
40734: IFFALSE 40744
// weapon := ru_time_lapser ;
40736: LD_ADDR_VAR 0 18
40740: PUSH
40741: LD_INT 49
40743: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40744: LD_VAR 0 12
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: LD_INT 2
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: IN
40759: PUSH
40760: LD_INT 11
40762: PUSH
40763: LD_VAR 0 5
40767: IN
40768: PUSH
40769: LD_INT 30
40771: PUSH
40772: LD_VAR 0 5
40776: IN
40777: OR
40778: AND
40779: PUSH
40780: LD_INT 6
40782: PPUSH
40783: LD_VAR 0 16
40787: PPUSH
40788: CALL_OW 321
40792: PUSH
40793: LD_INT 2
40795: EQUAL
40796: AND
40797: IFFALSE 40962
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40799: LD_INT 22
40801: PUSH
40802: LD_VAR 0 16
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 2
40813: PUSH
40814: LD_INT 35
40816: PUSH
40817: LD_INT 11
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 35
40826: PUSH
40827: LD_INT 30
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 91
40841: PUSH
40842: LD_VAR 0 1
40846: PUSH
40847: LD_INT 18
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: LIST
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: LIST
40859: PPUSH
40860: CALL_OW 69
40864: NOT
40865: PUSH
40866: LD_INT 22
40868: PUSH
40869: LD_VAR 0 16
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 2
40880: PUSH
40881: LD_INT 30
40883: PUSH
40884: LD_INT 32
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 30
40893: PUSH
40894: LD_INT 33
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 91
40908: PUSH
40909: LD_VAR 0 1
40913: PUSH
40914: LD_INT 12
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: LIST
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: LIST
40926: PUSH
40927: EMPTY
40928: LIST
40929: PPUSH
40930: CALL_OW 69
40934: PUSH
40935: LD_INT 2
40937: GREATER
40938: AND
40939: IFFALSE 40962
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40941: LD_ADDR_VAR 0 18
40945: PUSH
40946: LD_INT 11
40948: PUSH
40949: LD_INT 30
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_VAR 0 12
40960: ARRAY
40961: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40962: LD_VAR 0 18
40966: NOT
40967: PUSH
40968: LD_INT 40
40970: PPUSH
40971: LD_VAR 0 16
40975: PPUSH
40976: CALL_OW 321
40980: PUSH
40981: LD_INT 2
40983: EQUAL
40984: AND
40985: PUSH
40986: LD_INT 7
40988: PUSH
40989: LD_VAR 0 5
40993: IN
40994: PUSH
40995: LD_INT 28
40997: PUSH
40998: LD_VAR 0 5
41002: IN
41003: OR
41004: PUSH
41005: LD_INT 45
41007: PUSH
41008: LD_VAR 0 5
41012: IN
41013: OR
41014: AND
41015: IFFALSE 41269
// begin hex := GetHexInfo ( x , y ) ;
41017: LD_ADDR_VAR 0 4
41021: PUSH
41022: LD_VAR 0 10
41026: PPUSH
41027: LD_VAR 0 11
41031: PPUSH
41032: CALL_OW 546
41036: ST_TO_ADDR
// if hex [ 1 ] then
41037: LD_VAR 0 4
41041: PUSH
41042: LD_INT 1
41044: ARRAY
41045: IFFALSE 41049
// exit ;
41047: GO 41452
// height := hex [ 2 ] ;
41049: LD_ADDR_VAR 0 15
41053: PUSH
41054: LD_VAR 0 4
41058: PUSH
41059: LD_INT 2
41061: ARRAY
41062: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41063: LD_ADDR_VAR 0 14
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: LD_INT 2
41073: PUSH
41074: LD_INT 3
41076: PUSH
41077: LD_INT 5
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: ST_TO_ADDR
// for i in tmp do
41086: LD_ADDR_VAR 0 8
41090: PUSH
41091: LD_VAR 0 14
41095: PUSH
41096: FOR_IN
41097: IFFALSE 41267
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41099: LD_ADDR_VAR 0 9
41103: PUSH
41104: LD_VAR 0 10
41108: PPUSH
41109: LD_VAR 0 8
41113: PPUSH
41114: LD_INT 5
41116: PPUSH
41117: CALL_OW 272
41121: PUSH
41122: LD_VAR 0 11
41126: PPUSH
41127: LD_VAR 0 8
41131: PPUSH
41132: LD_INT 5
41134: PPUSH
41135: CALL_OW 273
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41144: LD_VAR 0 9
41148: PUSH
41149: LD_INT 1
41151: ARRAY
41152: PPUSH
41153: LD_VAR 0 9
41157: PUSH
41158: LD_INT 2
41160: ARRAY
41161: PPUSH
41162: CALL_OW 488
41166: IFFALSE 41265
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41168: LD_ADDR_VAR 0 4
41172: PUSH
41173: LD_VAR 0 9
41177: PUSH
41178: LD_INT 1
41180: ARRAY
41181: PPUSH
41182: LD_VAR 0 9
41186: PUSH
41187: LD_INT 2
41189: ARRAY
41190: PPUSH
41191: CALL_OW 546
41195: ST_TO_ADDR
// if hex [ 1 ] then
41196: LD_VAR 0 4
41200: PUSH
41201: LD_INT 1
41203: ARRAY
41204: IFFALSE 41208
// continue ;
41206: GO 41096
// h := hex [ 2 ] ;
41208: LD_ADDR_VAR 0 13
41212: PUSH
41213: LD_VAR 0 4
41217: PUSH
41218: LD_INT 2
41220: ARRAY
41221: ST_TO_ADDR
// if h + 7 < height then
41222: LD_VAR 0 13
41226: PUSH
41227: LD_INT 7
41229: PLUS
41230: PUSH
41231: LD_VAR 0 15
41235: LESS
41236: IFFALSE 41265
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41238: LD_ADDR_VAR 0 18
41242: PUSH
41243: LD_INT 7
41245: PUSH
41246: LD_INT 28
41248: PUSH
41249: LD_INT 45
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: LIST
41256: PUSH
41257: LD_VAR 0 12
41261: ARRAY
41262: ST_TO_ADDR
// break ;
41263: GO 41267
// end ; end ; end ;
41265: GO 41096
41267: POP
41268: POP
// end ; if not weapon then
41269: LD_VAR 0 18
41273: NOT
41274: IFFALSE 41334
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41276: LD_ADDR_VAR 0 5
41280: PUSH
41281: LD_VAR 0 5
41285: PUSH
41286: LD_INT 11
41288: PUSH
41289: LD_INT 30
41291: PUSH
41292: LD_INT 49
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: LIST
41299: DIFF
41300: ST_TO_ADDR
// if not list then
41301: LD_VAR 0 5
41305: NOT
41306: IFFALSE 41310
// exit ;
41308: GO 41452
// weapon := list [ rand ( 1 , list ) ] ;
41310: LD_ADDR_VAR 0 18
41314: PUSH
41315: LD_VAR 0 5
41319: PUSH
41320: LD_INT 1
41322: PPUSH
41323: LD_VAR 0 5
41327: PPUSH
41328: CALL_OW 12
41332: ARRAY
41333: ST_TO_ADDR
// end ; if weapon then
41334: LD_VAR 0 18
41338: IFFALSE 41452
// begin tmp := CostOfWeapon ( weapon ) ;
41340: LD_ADDR_VAR 0 14
41344: PUSH
41345: LD_VAR 0 18
41349: PPUSH
41350: CALL_OW 451
41354: ST_TO_ADDR
// j := GetBase ( tower ) ;
41355: LD_ADDR_VAR 0 9
41359: PUSH
41360: LD_VAR 0 1
41364: PPUSH
41365: CALL_OW 274
41369: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41370: LD_VAR 0 9
41374: PPUSH
41375: LD_INT 1
41377: PPUSH
41378: CALL_OW 275
41382: PUSH
41383: LD_VAR 0 14
41387: PUSH
41388: LD_INT 1
41390: ARRAY
41391: GREATEREQUAL
41392: PUSH
41393: LD_VAR 0 9
41397: PPUSH
41398: LD_INT 2
41400: PPUSH
41401: CALL_OW 275
41405: PUSH
41406: LD_VAR 0 14
41410: PUSH
41411: LD_INT 2
41413: ARRAY
41414: GREATEREQUAL
41415: AND
41416: PUSH
41417: LD_VAR 0 9
41421: PPUSH
41422: LD_INT 3
41424: PPUSH
41425: CALL_OW 275
41429: PUSH
41430: LD_VAR 0 14
41434: PUSH
41435: LD_INT 3
41437: ARRAY
41438: GREATEREQUAL
41439: AND
41440: IFFALSE 41452
// result := weapon ;
41442: LD_ADDR_VAR 0 3
41446: PUSH
41447: LD_VAR 0 18
41451: ST_TO_ADDR
// end ; end ;
41452: LD_VAR 0 3
41456: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41457: LD_INT 0
41459: PPUSH
41460: PPUSH
// result := true ;
41461: LD_ADDR_VAR 0 3
41465: PUSH
41466: LD_INT 1
41468: ST_TO_ADDR
// if array1 = array2 then
41469: LD_VAR 0 1
41473: PUSH
41474: LD_VAR 0 2
41478: EQUAL
41479: IFFALSE 41539
// begin for i = 1 to array1 do
41481: LD_ADDR_VAR 0 4
41485: PUSH
41486: DOUBLE
41487: LD_INT 1
41489: DEC
41490: ST_TO_ADDR
41491: LD_VAR 0 1
41495: PUSH
41496: FOR_TO
41497: IFFALSE 41535
// if array1 [ i ] <> array2 [ i ] then
41499: LD_VAR 0 1
41503: PUSH
41504: LD_VAR 0 4
41508: ARRAY
41509: PUSH
41510: LD_VAR 0 2
41514: PUSH
41515: LD_VAR 0 4
41519: ARRAY
41520: NONEQUAL
41521: IFFALSE 41533
// begin result := false ;
41523: LD_ADDR_VAR 0 3
41527: PUSH
41528: LD_INT 0
41530: ST_TO_ADDR
// break ;
41531: GO 41535
// end ;
41533: GO 41496
41535: POP
41536: POP
// end else
41537: GO 41547
// result := false ;
41539: LD_ADDR_VAR 0 3
41543: PUSH
41544: LD_INT 0
41546: ST_TO_ADDR
// end ;
41547: LD_VAR 0 3
41551: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41552: LD_INT 0
41554: PPUSH
41555: PPUSH
// if not array1 or not array2 then
41556: LD_VAR 0 1
41560: NOT
41561: PUSH
41562: LD_VAR 0 2
41566: NOT
41567: OR
41568: IFFALSE 41572
// exit ;
41570: GO 41636
// result := true ;
41572: LD_ADDR_VAR 0 3
41576: PUSH
41577: LD_INT 1
41579: ST_TO_ADDR
// for i = 1 to array1 do
41580: LD_ADDR_VAR 0 4
41584: PUSH
41585: DOUBLE
41586: LD_INT 1
41588: DEC
41589: ST_TO_ADDR
41590: LD_VAR 0 1
41594: PUSH
41595: FOR_TO
41596: IFFALSE 41634
// if array1 [ i ] <> array2 [ i ] then
41598: LD_VAR 0 1
41602: PUSH
41603: LD_VAR 0 4
41607: ARRAY
41608: PUSH
41609: LD_VAR 0 2
41613: PUSH
41614: LD_VAR 0 4
41618: ARRAY
41619: NONEQUAL
41620: IFFALSE 41632
// begin result := false ;
41622: LD_ADDR_VAR 0 3
41626: PUSH
41627: LD_INT 0
41629: ST_TO_ADDR
// break ;
41630: GO 41634
// end ;
41632: GO 41595
41634: POP
41635: POP
// end ;
41636: LD_VAR 0 3
41640: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41641: LD_INT 0
41643: PPUSH
41644: PPUSH
41645: PPUSH
// pom := GetBase ( fac ) ;
41646: LD_ADDR_VAR 0 5
41650: PUSH
41651: LD_VAR 0 1
41655: PPUSH
41656: CALL_OW 274
41660: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41661: LD_ADDR_VAR 0 4
41665: PUSH
41666: LD_VAR 0 2
41670: PUSH
41671: LD_INT 1
41673: ARRAY
41674: PPUSH
41675: LD_VAR 0 2
41679: PUSH
41680: LD_INT 2
41682: ARRAY
41683: PPUSH
41684: LD_VAR 0 2
41688: PUSH
41689: LD_INT 3
41691: ARRAY
41692: PPUSH
41693: LD_VAR 0 2
41697: PUSH
41698: LD_INT 4
41700: ARRAY
41701: PPUSH
41702: CALL_OW 449
41706: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41707: LD_ADDR_VAR 0 3
41711: PUSH
41712: LD_VAR 0 5
41716: PPUSH
41717: LD_INT 1
41719: PPUSH
41720: CALL_OW 275
41724: PUSH
41725: LD_VAR 0 4
41729: PUSH
41730: LD_INT 1
41732: ARRAY
41733: GREATEREQUAL
41734: PUSH
41735: LD_VAR 0 5
41739: PPUSH
41740: LD_INT 2
41742: PPUSH
41743: CALL_OW 275
41747: PUSH
41748: LD_VAR 0 4
41752: PUSH
41753: LD_INT 2
41755: ARRAY
41756: GREATEREQUAL
41757: AND
41758: PUSH
41759: LD_VAR 0 5
41763: PPUSH
41764: LD_INT 3
41766: PPUSH
41767: CALL_OW 275
41771: PUSH
41772: LD_VAR 0 4
41776: PUSH
41777: LD_INT 3
41779: ARRAY
41780: GREATEREQUAL
41781: AND
41782: ST_TO_ADDR
// end ;
41783: LD_VAR 0 3
41787: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41788: LD_INT 0
41790: PPUSH
41791: PPUSH
41792: PPUSH
41793: PPUSH
// pom := GetBase ( building ) ;
41794: LD_ADDR_VAR 0 3
41798: PUSH
41799: LD_VAR 0 1
41803: PPUSH
41804: CALL_OW 274
41808: ST_TO_ADDR
// if not pom then
41809: LD_VAR 0 3
41813: NOT
41814: IFFALSE 41818
// exit ;
41816: GO 41988
// btype := GetBType ( building ) ;
41818: LD_ADDR_VAR 0 5
41822: PUSH
41823: LD_VAR 0 1
41827: PPUSH
41828: CALL_OW 266
41832: ST_TO_ADDR
// if btype = b_armoury then
41833: LD_VAR 0 5
41837: PUSH
41838: LD_INT 4
41840: EQUAL
41841: IFFALSE 41851
// btype := b_barracks ;
41843: LD_ADDR_VAR 0 5
41847: PUSH
41848: LD_INT 5
41850: ST_TO_ADDR
// if btype = b_depot then
41851: LD_VAR 0 5
41855: PUSH
41856: LD_INT 0
41858: EQUAL
41859: IFFALSE 41869
// btype := b_warehouse ;
41861: LD_ADDR_VAR 0 5
41865: PUSH
41866: LD_INT 1
41868: ST_TO_ADDR
// if btype = b_workshop then
41869: LD_VAR 0 5
41873: PUSH
41874: LD_INT 2
41876: EQUAL
41877: IFFALSE 41887
// btype := b_factory ;
41879: LD_ADDR_VAR 0 5
41883: PUSH
41884: LD_INT 3
41886: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41887: LD_ADDR_VAR 0 4
41891: PUSH
41892: LD_VAR 0 5
41896: PPUSH
41897: LD_VAR 0 1
41901: PPUSH
41902: CALL_OW 248
41906: PPUSH
41907: CALL_OW 450
41911: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41912: LD_ADDR_VAR 0 2
41916: PUSH
41917: LD_VAR 0 3
41921: PPUSH
41922: LD_INT 1
41924: PPUSH
41925: CALL_OW 275
41929: PUSH
41930: LD_VAR 0 4
41934: PUSH
41935: LD_INT 1
41937: ARRAY
41938: GREATEREQUAL
41939: PUSH
41940: LD_VAR 0 3
41944: PPUSH
41945: LD_INT 2
41947: PPUSH
41948: CALL_OW 275
41952: PUSH
41953: LD_VAR 0 4
41957: PUSH
41958: LD_INT 2
41960: ARRAY
41961: GREATEREQUAL
41962: AND
41963: PUSH
41964: LD_VAR 0 3
41968: PPUSH
41969: LD_INT 3
41971: PPUSH
41972: CALL_OW 275
41976: PUSH
41977: LD_VAR 0 4
41981: PUSH
41982: LD_INT 3
41984: ARRAY
41985: GREATEREQUAL
41986: AND
41987: ST_TO_ADDR
// end ;
41988: LD_VAR 0 2
41992: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41993: LD_INT 0
41995: PPUSH
41996: PPUSH
41997: PPUSH
// pom := GetBase ( building ) ;
41998: LD_ADDR_VAR 0 4
42002: PUSH
42003: LD_VAR 0 1
42007: PPUSH
42008: CALL_OW 274
42012: ST_TO_ADDR
// if not pom then
42013: LD_VAR 0 4
42017: NOT
42018: IFFALSE 42022
// exit ;
42020: GO 42123
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42022: LD_ADDR_VAR 0 5
42026: PUSH
42027: LD_VAR 0 2
42031: PPUSH
42032: LD_VAR 0 1
42036: PPUSH
42037: CALL_OW 248
42041: PPUSH
42042: CALL_OW 450
42046: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42047: LD_ADDR_VAR 0 3
42051: PUSH
42052: LD_VAR 0 4
42056: PPUSH
42057: LD_INT 1
42059: PPUSH
42060: CALL_OW 275
42064: PUSH
42065: LD_VAR 0 5
42069: PUSH
42070: LD_INT 1
42072: ARRAY
42073: GREATEREQUAL
42074: PUSH
42075: LD_VAR 0 4
42079: PPUSH
42080: LD_INT 2
42082: PPUSH
42083: CALL_OW 275
42087: PUSH
42088: LD_VAR 0 5
42092: PUSH
42093: LD_INT 2
42095: ARRAY
42096: GREATEREQUAL
42097: AND
42098: PUSH
42099: LD_VAR 0 4
42103: PPUSH
42104: LD_INT 3
42106: PPUSH
42107: CALL_OW 275
42111: PUSH
42112: LD_VAR 0 5
42116: PUSH
42117: LD_INT 3
42119: ARRAY
42120: GREATEREQUAL
42121: AND
42122: ST_TO_ADDR
// end ;
42123: LD_VAR 0 3
42127: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42128: LD_INT 0
42130: PPUSH
42131: PPUSH
42132: PPUSH
42133: PPUSH
42134: PPUSH
42135: PPUSH
42136: PPUSH
42137: PPUSH
42138: PPUSH
42139: PPUSH
42140: PPUSH
// result := false ;
42141: LD_ADDR_VAR 0 8
42145: PUSH
42146: LD_INT 0
42148: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42149: LD_VAR 0 5
42153: NOT
42154: PUSH
42155: LD_VAR 0 1
42159: NOT
42160: OR
42161: PUSH
42162: LD_VAR 0 2
42166: NOT
42167: OR
42168: PUSH
42169: LD_VAR 0 3
42173: NOT
42174: OR
42175: IFFALSE 42179
// exit ;
42177: GO 42993
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42179: LD_ADDR_VAR 0 14
42183: PUSH
42184: LD_VAR 0 1
42188: PPUSH
42189: LD_VAR 0 2
42193: PPUSH
42194: LD_VAR 0 3
42198: PPUSH
42199: LD_VAR 0 4
42203: PPUSH
42204: LD_VAR 0 5
42208: PUSH
42209: LD_INT 1
42211: ARRAY
42212: PPUSH
42213: CALL_OW 248
42217: PPUSH
42218: LD_INT 0
42220: PPUSH
42221: CALL 44230 0 6
42225: ST_TO_ADDR
// if not hexes then
42226: LD_VAR 0 14
42230: NOT
42231: IFFALSE 42235
// exit ;
42233: GO 42993
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42235: LD_ADDR_VAR 0 17
42239: PUSH
42240: LD_VAR 0 5
42244: PPUSH
42245: LD_INT 22
42247: PUSH
42248: LD_VAR 0 13
42252: PPUSH
42253: CALL_OW 255
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 2
42264: PUSH
42265: LD_INT 30
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 30
42277: PUSH
42278: LD_INT 1
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: LIST
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PPUSH
42294: CALL_OW 72
42298: ST_TO_ADDR
// for i = 1 to hexes do
42299: LD_ADDR_VAR 0 9
42303: PUSH
42304: DOUBLE
42305: LD_INT 1
42307: DEC
42308: ST_TO_ADDR
42309: LD_VAR 0 14
42313: PUSH
42314: FOR_TO
42315: IFFALSE 42991
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42317: LD_ADDR_VAR 0 13
42321: PUSH
42322: LD_VAR 0 14
42326: PUSH
42327: LD_VAR 0 9
42331: ARRAY
42332: PUSH
42333: LD_INT 1
42335: ARRAY
42336: PPUSH
42337: LD_VAR 0 14
42341: PUSH
42342: LD_VAR 0 9
42346: ARRAY
42347: PUSH
42348: LD_INT 2
42350: ARRAY
42351: PPUSH
42352: CALL_OW 428
42356: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42357: LD_VAR 0 14
42361: PUSH
42362: LD_VAR 0 9
42366: ARRAY
42367: PUSH
42368: LD_INT 1
42370: ARRAY
42371: PPUSH
42372: LD_VAR 0 14
42376: PUSH
42377: LD_VAR 0 9
42381: ARRAY
42382: PUSH
42383: LD_INT 2
42385: ARRAY
42386: PPUSH
42387: CALL_OW 351
42391: PUSH
42392: LD_VAR 0 14
42396: PUSH
42397: LD_VAR 0 9
42401: ARRAY
42402: PUSH
42403: LD_INT 1
42405: ARRAY
42406: PPUSH
42407: LD_VAR 0 14
42411: PUSH
42412: LD_VAR 0 9
42416: ARRAY
42417: PUSH
42418: LD_INT 2
42420: ARRAY
42421: PPUSH
42422: CALL_OW 488
42426: NOT
42427: OR
42428: PUSH
42429: LD_VAR 0 13
42433: PPUSH
42434: CALL_OW 247
42438: PUSH
42439: LD_INT 3
42441: EQUAL
42442: OR
42443: IFFALSE 42449
// exit ;
42445: POP
42446: POP
42447: GO 42993
// if not tmp then
42449: LD_VAR 0 13
42453: NOT
42454: IFFALSE 42458
// continue ;
42456: GO 42314
// result := true ;
42458: LD_ADDR_VAR 0 8
42462: PUSH
42463: LD_INT 1
42465: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42466: LD_VAR 0 6
42470: PUSH
42471: LD_VAR 0 13
42475: PPUSH
42476: CALL_OW 247
42480: PUSH
42481: LD_INT 2
42483: EQUAL
42484: AND
42485: PUSH
42486: LD_VAR 0 13
42490: PPUSH
42491: CALL_OW 263
42495: PUSH
42496: LD_INT 1
42498: EQUAL
42499: AND
42500: IFFALSE 42664
// begin if IsDrivenBy ( tmp ) then
42502: LD_VAR 0 13
42506: PPUSH
42507: CALL_OW 311
42511: IFFALSE 42515
// continue ;
42513: GO 42314
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42515: LD_VAR 0 6
42519: PPUSH
42520: LD_INT 3
42522: PUSH
42523: LD_INT 60
42525: PUSH
42526: EMPTY
42527: LIST
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 3
42535: PUSH
42536: LD_INT 55
42538: PUSH
42539: EMPTY
42540: LIST
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PPUSH
42550: CALL_OW 72
42554: IFFALSE 42662
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42556: LD_ADDR_VAR 0 18
42560: PUSH
42561: LD_VAR 0 6
42565: PPUSH
42566: LD_INT 3
42568: PUSH
42569: LD_INT 60
42571: PUSH
42572: EMPTY
42573: LIST
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 3
42581: PUSH
42582: LD_INT 55
42584: PUSH
42585: EMPTY
42586: LIST
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PPUSH
42596: CALL_OW 72
42600: PUSH
42601: LD_INT 1
42603: ARRAY
42604: ST_TO_ADDR
// if IsInUnit ( driver ) then
42605: LD_VAR 0 18
42609: PPUSH
42610: CALL_OW 310
42614: IFFALSE 42625
// ComExit ( driver ) ;
42616: LD_VAR 0 18
42620: PPUSH
42621: CALL 67358 0 1
// AddComEnterUnit ( driver , tmp ) ;
42625: LD_VAR 0 18
42629: PPUSH
42630: LD_VAR 0 13
42634: PPUSH
42635: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42639: LD_VAR 0 18
42643: PPUSH
42644: LD_VAR 0 7
42648: PPUSH
42649: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42653: LD_VAR 0 18
42657: PPUSH
42658: CALL_OW 181
// end ; continue ;
42662: GO 42314
// end ; if not cleaners or not tmp in cleaners then
42664: LD_VAR 0 6
42668: NOT
42669: PUSH
42670: LD_VAR 0 13
42674: PUSH
42675: LD_VAR 0 6
42679: IN
42680: NOT
42681: OR
42682: IFFALSE 42989
// begin if dep then
42684: LD_VAR 0 17
42688: IFFALSE 42824
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42690: LD_ADDR_VAR 0 16
42694: PUSH
42695: LD_VAR 0 17
42699: PUSH
42700: LD_INT 1
42702: ARRAY
42703: PPUSH
42704: CALL_OW 250
42708: PPUSH
42709: LD_VAR 0 17
42713: PUSH
42714: LD_INT 1
42716: ARRAY
42717: PPUSH
42718: CALL_OW 254
42722: PPUSH
42723: LD_INT 5
42725: PPUSH
42726: CALL_OW 272
42730: PUSH
42731: LD_VAR 0 17
42735: PUSH
42736: LD_INT 1
42738: ARRAY
42739: PPUSH
42740: CALL_OW 251
42744: PPUSH
42745: LD_VAR 0 17
42749: PUSH
42750: LD_INT 1
42752: ARRAY
42753: PPUSH
42754: CALL_OW 254
42758: PPUSH
42759: LD_INT 5
42761: PPUSH
42762: CALL_OW 273
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42771: LD_VAR 0 16
42775: PUSH
42776: LD_INT 1
42778: ARRAY
42779: PPUSH
42780: LD_VAR 0 16
42784: PUSH
42785: LD_INT 2
42787: ARRAY
42788: PPUSH
42789: CALL_OW 488
42793: IFFALSE 42824
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42795: LD_VAR 0 13
42799: PPUSH
42800: LD_VAR 0 16
42804: PUSH
42805: LD_INT 1
42807: ARRAY
42808: PPUSH
42809: LD_VAR 0 16
42813: PUSH
42814: LD_INT 2
42816: ARRAY
42817: PPUSH
42818: CALL_OW 111
// continue ;
42822: GO 42314
// end ; end ; r := GetDir ( tmp ) ;
42824: LD_ADDR_VAR 0 15
42828: PUSH
42829: LD_VAR 0 13
42833: PPUSH
42834: CALL_OW 254
42838: ST_TO_ADDR
// if r = 5 then
42839: LD_VAR 0 15
42843: PUSH
42844: LD_INT 5
42846: EQUAL
42847: IFFALSE 42857
// r := 0 ;
42849: LD_ADDR_VAR 0 15
42853: PUSH
42854: LD_INT 0
42856: ST_TO_ADDR
// for j = r to 5 do
42857: LD_ADDR_VAR 0 10
42861: PUSH
42862: DOUBLE
42863: LD_VAR 0 15
42867: DEC
42868: ST_TO_ADDR
42869: LD_INT 5
42871: PUSH
42872: FOR_TO
42873: IFFALSE 42987
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42875: LD_ADDR_VAR 0 11
42879: PUSH
42880: LD_VAR 0 13
42884: PPUSH
42885: CALL_OW 250
42889: PPUSH
42890: LD_VAR 0 10
42894: PPUSH
42895: LD_INT 2
42897: PPUSH
42898: CALL_OW 272
42902: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42903: LD_ADDR_VAR 0 12
42907: PUSH
42908: LD_VAR 0 13
42912: PPUSH
42913: CALL_OW 251
42917: PPUSH
42918: LD_VAR 0 10
42922: PPUSH
42923: LD_INT 2
42925: PPUSH
42926: CALL_OW 273
42930: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42931: LD_VAR 0 11
42935: PPUSH
42936: LD_VAR 0 12
42940: PPUSH
42941: CALL_OW 488
42945: PUSH
42946: LD_VAR 0 11
42950: PPUSH
42951: LD_VAR 0 12
42955: PPUSH
42956: CALL_OW 428
42960: NOT
42961: AND
42962: IFFALSE 42985
// begin ComMoveXY ( tmp , _x , _y ) ;
42964: LD_VAR 0 13
42968: PPUSH
42969: LD_VAR 0 11
42973: PPUSH
42974: LD_VAR 0 12
42978: PPUSH
42979: CALL_OW 111
// break ;
42983: GO 42987
// end ; end ;
42985: GO 42872
42987: POP
42988: POP
// end ; end ;
42989: GO 42314
42991: POP
42992: POP
// end ;
42993: LD_VAR 0 8
42997: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42998: LD_INT 0
43000: PPUSH
// result := true ;
43001: LD_ADDR_VAR 0 3
43005: PUSH
43006: LD_INT 1
43008: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43009: LD_VAR 0 2
43013: PUSH
43014: LD_INT 24
43016: DOUBLE
43017: EQUAL
43018: IFTRUE 43028
43020: LD_INT 33
43022: DOUBLE
43023: EQUAL
43024: IFTRUE 43028
43026: GO 43053
43028: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43029: LD_ADDR_VAR 0 3
43033: PUSH
43034: LD_INT 32
43036: PPUSH
43037: LD_VAR 0 1
43041: PPUSH
43042: CALL_OW 321
43046: PUSH
43047: LD_INT 2
43049: EQUAL
43050: ST_TO_ADDR
43051: GO 43373
43053: LD_INT 20
43055: DOUBLE
43056: EQUAL
43057: IFTRUE 43061
43059: GO 43086
43061: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43062: LD_ADDR_VAR 0 3
43066: PUSH
43067: LD_INT 6
43069: PPUSH
43070: LD_VAR 0 1
43074: PPUSH
43075: CALL_OW 321
43079: PUSH
43080: LD_INT 2
43082: EQUAL
43083: ST_TO_ADDR
43084: GO 43373
43086: LD_INT 22
43088: DOUBLE
43089: EQUAL
43090: IFTRUE 43100
43092: LD_INT 36
43094: DOUBLE
43095: EQUAL
43096: IFTRUE 43100
43098: GO 43125
43100: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43101: LD_ADDR_VAR 0 3
43105: PUSH
43106: LD_INT 15
43108: PPUSH
43109: LD_VAR 0 1
43113: PPUSH
43114: CALL_OW 321
43118: PUSH
43119: LD_INT 2
43121: EQUAL
43122: ST_TO_ADDR
43123: GO 43373
43125: LD_INT 30
43127: DOUBLE
43128: EQUAL
43129: IFTRUE 43133
43131: GO 43158
43133: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43134: LD_ADDR_VAR 0 3
43138: PUSH
43139: LD_INT 20
43141: PPUSH
43142: LD_VAR 0 1
43146: PPUSH
43147: CALL_OW 321
43151: PUSH
43152: LD_INT 2
43154: EQUAL
43155: ST_TO_ADDR
43156: GO 43373
43158: LD_INT 28
43160: DOUBLE
43161: EQUAL
43162: IFTRUE 43172
43164: LD_INT 21
43166: DOUBLE
43167: EQUAL
43168: IFTRUE 43172
43170: GO 43197
43172: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43173: LD_ADDR_VAR 0 3
43177: PUSH
43178: LD_INT 21
43180: PPUSH
43181: LD_VAR 0 1
43185: PPUSH
43186: CALL_OW 321
43190: PUSH
43191: LD_INT 2
43193: EQUAL
43194: ST_TO_ADDR
43195: GO 43373
43197: LD_INT 16
43199: DOUBLE
43200: EQUAL
43201: IFTRUE 43205
43203: GO 43232
43205: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43206: LD_ADDR_VAR 0 3
43210: PUSH
43211: LD_EXP 59
43215: PPUSH
43216: LD_VAR 0 1
43220: PPUSH
43221: CALL_OW 321
43225: PUSH
43226: LD_INT 2
43228: EQUAL
43229: ST_TO_ADDR
43230: GO 43373
43232: LD_INT 19
43234: DOUBLE
43235: EQUAL
43236: IFTRUE 43246
43238: LD_INT 23
43240: DOUBLE
43241: EQUAL
43242: IFTRUE 43246
43244: GO 43273
43246: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43247: LD_ADDR_VAR 0 3
43251: PUSH
43252: LD_EXP 58
43256: PPUSH
43257: LD_VAR 0 1
43261: PPUSH
43262: CALL_OW 321
43266: PUSH
43267: LD_INT 2
43269: EQUAL
43270: ST_TO_ADDR
43271: GO 43373
43273: LD_INT 17
43275: DOUBLE
43276: EQUAL
43277: IFTRUE 43281
43279: GO 43306
43281: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43282: LD_ADDR_VAR 0 3
43286: PUSH
43287: LD_INT 39
43289: PPUSH
43290: LD_VAR 0 1
43294: PPUSH
43295: CALL_OW 321
43299: PUSH
43300: LD_INT 2
43302: EQUAL
43303: ST_TO_ADDR
43304: GO 43373
43306: LD_INT 18
43308: DOUBLE
43309: EQUAL
43310: IFTRUE 43314
43312: GO 43339
43314: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43315: LD_ADDR_VAR 0 3
43319: PUSH
43320: LD_INT 40
43322: PPUSH
43323: LD_VAR 0 1
43327: PPUSH
43328: CALL_OW 321
43332: PUSH
43333: LD_INT 2
43335: EQUAL
43336: ST_TO_ADDR
43337: GO 43373
43339: LD_INT 27
43341: DOUBLE
43342: EQUAL
43343: IFTRUE 43347
43345: GO 43372
43347: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43348: LD_ADDR_VAR 0 3
43352: PUSH
43353: LD_INT 35
43355: PPUSH
43356: LD_VAR 0 1
43360: PPUSH
43361: CALL_OW 321
43365: PUSH
43366: LD_INT 2
43368: EQUAL
43369: ST_TO_ADDR
43370: GO 43373
43372: POP
// end ;
43373: LD_VAR 0 3
43377: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43378: LD_INT 0
43380: PPUSH
43381: PPUSH
43382: PPUSH
43383: PPUSH
43384: PPUSH
43385: PPUSH
43386: PPUSH
43387: PPUSH
43388: PPUSH
43389: PPUSH
43390: PPUSH
// result := false ;
43391: LD_ADDR_VAR 0 6
43395: PUSH
43396: LD_INT 0
43398: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43399: LD_VAR 0 1
43403: NOT
43404: PUSH
43405: LD_VAR 0 1
43409: PPUSH
43410: CALL_OW 266
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: LD_INT 1
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: IN
43425: NOT
43426: OR
43427: PUSH
43428: LD_VAR 0 2
43432: NOT
43433: OR
43434: PUSH
43435: LD_VAR 0 5
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: LD_INT 2
43448: PUSH
43449: LD_INT 3
43451: PUSH
43452: LD_INT 4
43454: PUSH
43455: LD_INT 5
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: IN
43466: NOT
43467: OR
43468: PUSH
43469: LD_VAR 0 3
43473: PPUSH
43474: LD_VAR 0 4
43478: PPUSH
43479: CALL_OW 488
43483: NOT
43484: OR
43485: IFFALSE 43489
// exit ;
43487: GO 44225
// side := GetSide ( depot ) ;
43489: LD_ADDR_VAR 0 9
43493: PUSH
43494: LD_VAR 0 1
43498: PPUSH
43499: CALL_OW 255
43503: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43504: LD_VAR 0 9
43508: PPUSH
43509: LD_VAR 0 2
43513: PPUSH
43514: CALL 42998 0 2
43518: NOT
43519: IFFALSE 43523
// exit ;
43521: GO 44225
// pom := GetBase ( depot ) ;
43523: LD_ADDR_VAR 0 10
43527: PUSH
43528: LD_VAR 0 1
43532: PPUSH
43533: CALL_OW 274
43537: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43538: LD_ADDR_VAR 0 11
43542: PUSH
43543: LD_VAR 0 2
43547: PPUSH
43548: LD_VAR 0 1
43552: PPUSH
43553: CALL_OW 248
43557: PPUSH
43558: CALL_OW 450
43562: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43563: LD_VAR 0 10
43567: PPUSH
43568: LD_INT 1
43570: PPUSH
43571: CALL_OW 275
43575: PUSH
43576: LD_VAR 0 11
43580: PUSH
43581: LD_INT 1
43583: ARRAY
43584: GREATEREQUAL
43585: PUSH
43586: LD_VAR 0 10
43590: PPUSH
43591: LD_INT 2
43593: PPUSH
43594: CALL_OW 275
43598: PUSH
43599: LD_VAR 0 11
43603: PUSH
43604: LD_INT 2
43606: ARRAY
43607: GREATEREQUAL
43608: AND
43609: PUSH
43610: LD_VAR 0 10
43614: PPUSH
43615: LD_INT 3
43617: PPUSH
43618: CALL_OW 275
43622: PUSH
43623: LD_VAR 0 11
43627: PUSH
43628: LD_INT 3
43630: ARRAY
43631: GREATEREQUAL
43632: AND
43633: NOT
43634: IFFALSE 43638
// exit ;
43636: GO 44225
// if GetBType ( depot ) = b_depot then
43638: LD_VAR 0 1
43642: PPUSH
43643: CALL_OW 266
43647: PUSH
43648: LD_INT 0
43650: EQUAL
43651: IFFALSE 43663
// dist := 28 else
43653: LD_ADDR_VAR 0 14
43657: PUSH
43658: LD_INT 28
43660: ST_TO_ADDR
43661: GO 43671
// dist := 36 ;
43663: LD_ADDR_VAR 0 14
43667: PUSH
43668: LD_INT 36
43670: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43671: LD_VAR 0 1
43675: PPUSH
43676: LD_VAR 0 3
43680: PPUSH
43681: LD_VAR 0 4
43685: PPUSH
43686: CALL_OW 297
43690: PUSH
43691: LD_VAR 0 14
43695: GREATER
43696: IFFALSE 43700
// exit ;
43698: GO 44225
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43700: LD_ADDR_VAR 0 12
43704: PUSH
43705: LD_VAR 0 2
43709: PPUSH
43710: LD_VAR 0 3
43714: PPUSH
43715: LD_VAR 0 4
43719: PPUSH
43720: LD_VAR 0 5
43724: PPUSH
43725: LD_VAR 0 1
43729: PPUSH
43730: CALL_OW 248
43734: PPUSH
43735: LD_INT 0
43737: PPUSH
43738: CALL 44230 0 6
43742: ST_TO_ADDR
// if not hexes then
43743: LD_VAR 0 12
43747: NOT
43748: IFFALSE 43752
// exit ;
43750: GO 44225
// hex := GetHexInfo ( x , y ) ;
43752: LD_ADDR_VAR 0 15
43756: PUSH
43757: LD_VAR 0 3
43761: PPUSH
43762: LD_VAR 0 4
43766: PPUSH
43767: CALL_OW 546
43771: ST_TO_ADDR
// if hex [ 1 ] then
43772: LD_VAR 0 15
43776: PUSH
43777: LD_INT 1
43779: ARRAY
43780: IFFALSE 43784
// exit ;
43782: GO 44225
// height := hex [ 2 ] ;
43784: LD_ADDR_VAR 0 13
43788: PUSH
43789: LD_VAR 0 15
43793: PUSH
43794: LD_INT 2
43796: ARRAY
43797: ST_TO_ADDR
// for i = 1 to hexes do
43798: LD_ADDR_VAR 0 7
43802: PUSH
43803: DOUBLE
43804: LD_INT 1
43806: DEC
43807: ST_TO_ADDR
43808: LD_VAR 0 12
43812: PUSH
43813: FOR_TO
43814: IFFALSE 44144
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43816: LD_VAR 0 12
43820: PUSH
43821: LD_VAR 0 7
43825: ARRAY
43826: PUSH
43827: LD_INT 1
43829: ARRAY
43830: PPUSH
43831: LD_VAR 0 12
43835: PUSH
43836: LD_VAR 0 7
43840: ARRAY
43841: PUSH
43842: LD_INT 2
43844: ARRAY
43845: PPUSH
43846: CALL_OW 488
43850: NOT
43851: PUSH
43852: LD_VAR 0 12
43856: PUSH
43857: LD_VAR 0 7
43861: ARRAY
43862: PUSH
43863: LD_INT 1
43865: ARRAY
43866: PPUSH
43867: LD_VAR 0 12
43871: PUSH
43872: LD_VAR 0 7
43876: ARRAY
43877: PUSH
43878: LD_INT 2
43880: ARRAY
43881: PPUSH
43882: CALL_OW 428
43886: PUSH
43887: LD_INT 0
43889: GREATER
43890: OR
43891: PUSH
43892: LD_VAR 0 12
43896: PUSH
43897: LD_VAR 0 7
43901: ARRAY
43902: PUSH
43903: LD_INT 1
43905: ARRAY
43906: PPUSH
43907: LD_VAR 0 12
43911: PUSH
43912: LD_VAR 0 7
43916: ARRAY
43917: PUSH
43918: LD_INT 2
43920: ARRAY
43921: PPUSH
43922: CALL_OW 351
43926: OR
43927: IFFALSE 43933
// exit ;
43929: POP
43930: POP
43931: GO 44225
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43933: LD_ADDR_VAR 0 8
43937: PUSH
43938: LD_VAR 0 12
43942: PUSH
43943: LD_VAR 0 7
43947: ARRAY
43948: PUSH
43949: LD_INT 1
43951: ARRAY
43952: PPUSH
43953: LD_VAR 0 12
43957: PUSH
43958: LD_VAR 0 7
43962: ARRAY
43963: PUSH
43964: LD_INT 2
43966: ARRAY
43967: PPUSH
43968: CALL_OW 546
43972: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43973: LD_VAR 0 8
43977: PUSH
43978: LD_INT 1
43980: ARRAY
43981: PUSH
43982: LD_VAR 0 8
43986: PUSH
43987: LD_INT 2
43989: ARRAY
43990: PUSH
43991: LD_VAR 0 13
43995: PUSH
43996: LD_INT 2
43998: PLUS
43999: GREATER
44000: OR
44001: PUSH
44002: LD_VAR 0 8
44006: PUSH
44007: LD_INT 2
44009: ARRAY
44010: PUSH
44011: LD_VAR 0 13
44015: PUSH
44016: LD_INT 2
44018: MINUS
44019: LESS
44020: OR
44021: PUSH
44022: LD_VAR 0 8
44026: PUSH
44027: LD_INT 3
44029: ARRAY
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: LD_INT 8
44036: PUSH
44037: LD_INT 9
44039: PUSH
44040: LD_INT 10
44042: PUSH
44043: LD_INT 11
44045: PUSH
44046: LD_INT 12
44048: PUSH
44049: LD_INT 13
44051: PUSH
44052: LD_INT 16
44054: PUSH
44055: LD_INT 17
44057: PUSH
44058: LD_INT 18
44060: PUSH
44061: LD_INT 19
44063: PUSH
44064: LD_INT 20
44066: PUSH
44067: LD_INT 21
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: IN
44085: NOT
44086: OR
44087: PUSH
44088: LD_VAR 0 8
44092: PUSH
44093: LD_INT 5
44095: ARRAY
44096: NOT
44097: OR
44098: PUSH
44099: LD_VAR 0 8
44103: PUSH
44104: LD_INT 6
44106: ARRAY
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: LD_INT 2
44113: PUSH
44114: LD_INT 7
44116: PUSH
44117: LD_INT 9
44119: PUSH
44120: LD_INT 10
44122: PUSH
44123: LD_INT 11
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: IN
44134: NOT
44135: OR
44136: IFFALSE 44142
// exit ;
44138: POP
44139: POP
44140: GO 44225
// end ;
44142: GO 43813
44144: POP
44145: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44146: LD_VAR 0 9
44150: PPUSH
44151: LD_VAR 0 3
44155: PPUSH
44156: LD_VAR 0 4
44160: PPUSH
44161: LD_INT 20
44163: PPUSH
44164: CALL 36171 0 4
44168: PUSH
44169: LD_INT 4
44171: ARRAY
44172: IFFALSE 44176
// exit ;
44174: GO 44225
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44176: LD_VAR 0 2
44180: PUSH
44181: LD_INT 29
44183: PUSH
44184: LD_INT 30
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: IN
44191: PUSH
44192: LD_VAR 0 3
44196: PPUSH
44197: LD_VAR 0 4
44201: PPUSH
44202: LD_VAR 0 9
44206: PPUSH
44207: CALL_OW 440
44211: NOT
44212: AND
44213: IFFALSE 44217
// exit ;
44215: GO 44225
// result := true ;
44217: LD_ADDR_VAR 0 6
44221: PUSH
44222: LD_INT 1
44224: ST_TO_ADDR
// end ;
44225: LD_VAR 0 6
44229: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44230: LD_INT 0
44232: PPUSH
44233: PPUSH
44234: PPUSH
44235: PPUSH
44236: PPUSH
44237: PPUSH
44238: PPUSH
44239: PPUSH
44240: PPUSH
44241: PPUSH
44242: PPUSH
44243: PPUSH
44244: PPUSH
44245: PPUSH
44246: PPUSH
44247: PPUSH
44248: PPUSH
44249: PPUSH
44250: PPUSH
44251: PPUSH
44252: PPUSH
44253: PPUSH
44254: PPUSH
44255: PPUSH
44256: PPUSH
44257: PPUSH
44258: PPUSH
44259: PPUSH
44260: PPUSH
44261: PPUSH
44262: PPUSH
44263: PPUSH
44264: PPUSH
44265: PPUSH
44266: PPUSH
44267: PPUSH
44268: PPUSH
44269: PPUSH
44270: PPUSH
44271: PPUSH
44272: PPUSH
44273: PPUSH
44274: PPUSH
44275: PPUSH
44276: PPUSH
44277: PPUSH
44278: PPUSH
44279: PPUSH
44280: PPUSH
44281: PPUSH
44282: PPUSH
44283: PPUSH
44284: PPUSH
44285: PPUSH
44286: PPUSH
44287: PPUSH
44288: PPUSH
44289: PPUSH
// result = [ ] ;
44290: LD_ADDR_VAR 0 7
44294: PUSH
44295: EMPTY
44296: ST_TO_ADDR
// temp_list = [ ] ;
44297: LD_ADDR_VAR 0 9
44301: PUSH
44302: EMPTY
44303: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44304: LD_VAR 0 4
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: LD_INT 1
44314: PUSH
44315: LD_INT 2
44317: PUSH
44318: LD_INT 3
44320: PUSH
44321: LD_INT 4
44323: PUSH
44324: LD_INT 5
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: IN
44335: NOT
44336: PUSH
44337: LD_VAR 0 1
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: IN
44352: PUSH
44353: LD_VAR 0 5
44357: PUSH
44358: LD_INT 1
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: LD_INT 3
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: LIST
44371: IN
44372: NOT
44373: AND
44374: OR
44375: IFFALSE 44379
// exit ;
44377: GO 62770
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44379: LD_VAR 0 1
44383: PUSH
44384: LD_INT 6
44386: PUSH
44387: LD_INT 7
44389: PUSH
44390: LD_INT 8
44392: PUSH
44393: LD_INT 13
44395: PUSH
44396: LD_INT 12
44398: PUSH
44399: LD_INT 15
44401: PUSH
44402: LD_INT 11
44404: PUSH
44405: LD_INT 14
44407: PUSH
44408: LD_INT 10
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: IN
44422: IFFALSE 44432
// btype = b_lab ;
44424: LD_ADDR_VAR 0 1
44428: PUSH
44429: LD_INT 6
44431: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44432: LD_VAR 0 6
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: LIST
44450: IN
44451: NOT
44452: PUSH
44453: LD_VAR 0 1
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: LD_INT 2
44466: PUSH
44467: LD_INT 3
44469: PUSH
44470: LD_INT 6
44472: PUSH
44473: LD_INT 36
44475: PUSH
44476: LD_INT 4
44478: PUSH
44479: LD_INT 5
44481: PUSH
44482: LD_INT 31
44484: PUSH
44485: LD_INT 32
44487: PUSH
44488: LD_INT 33
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: IN
44504: NOT
44505: PUSH
44506: LD_VAR 0 6
44510: PUSH
44511: LD_INT 1
44513: EQUAL
44514: AND
44515: OR
44516: PUSH
44517: LD_VAR 0 1
44521: PUSH
44522: LD_INT 2
44524: PUSH
44525: LD_INT 3
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: IN
44532: NOT
44533: PUSH
44534: LD_VAR 0 6
44538: PUSH
44539: LD_INT 2
44541: EQUAL
44542: AND
44543: OR
44544: IFFALSE 44554
// mode = 0 ;
44546: LD_ADDR_VAR 0 6
44550: PUSH
44551: LD_INT 0
44553: ST_TO_ADDR
// case mode of 0 :
44554: LD_VAR 0 6
44558: PUSH
44559: LD_INT 0
44561: DOUBLE
44562: EQUAL
44563: IFTRUE 44567
44565: GO 56020
44567: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44568: LD_ADDR_VAR 0 11
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: LD_INT 1
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: LD_INT 2
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: LD_INT 2
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 1
44672: PUSH
44673: LD_INT 1
44675: NEG
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: LD_INT 2
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: LD_INT 2
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 1
44703: NEG
44704: PUSH
44705: LD_INT 1
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: LD_INT 3
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: LD_INT 3
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 1
44734: NEG
44735: PUSH
44736: LD_INT 2
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44761: LD_ADDR_VAR 0 12
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: LD_INT 0
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: LD_INT 1
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: LD_INT 0
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 1
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: LD_INT 1
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 1
44830: NEG
44831: PUSH
44832: LD_INT 1
44834: NEG
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 2
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 2
44863: PUSH
44864: LD_INT 1
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: LD_INT 1
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 2
44884: NEG
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 2
44895: NEG
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 2
44907: NEG
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 3
44918: NEG
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 3
44929: NEG
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44957: LD_ADDR_VAR 0 13
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 1
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 1
45026: NEG
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 2
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 2
45060: PUSH
45061: LD_INT 2
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: LD_INT 2
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 2
45080: NEG
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 2
45092: NEG
45093: PUSH
45094: LD_INT 2
45096: NEG
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 2
45104: NEG
45105: PUSH
45106: LD_INT 3
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 3
45116: NEG
45117: PUSH
45118: LD_INT 2
45120: NEG
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 3
45128: NEG
45129: PUSH
45130: LD_INT 3
45132: NEG
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45156: LD_ADDR_VAR 0 14
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: NEG
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 1
45225: NEG
45226: PUSH
45227: LD_INT 1
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: LD_INT 2
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: LD_INT 2
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: LD_INT 2
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 1
45291: NEG
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: NEG
45303: PUSH
45304: LD_INT 3
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: LD_INT 3
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: LD_INT 2
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45352: LD_ADDR_VAR 0 15
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: LD_INT 1
45436: NEG
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 2
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 2
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 2
45475: NEG
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 2
45486: NEG
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 2
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 3
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 3
45519: PUSH
45520: LD_INT 1
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45545: LD_ADDR_VAR 0 16
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: LD_INT 1
45618: NEG
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: LD_INT 2
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 2
45668: NEG
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 2
45680: NEG
45681: PUSH
45682: LD_INT 2
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 3
45692: PUSH
45693: LD_INT 2
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 3
45702: PUSH
45703: LD_INT 3
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: PUSH
45713: LD_INT 3
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45738: LD_ADDR_VAR 0 17
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: LD_INT 1
45811: NEG
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: LD_INT 2
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: LD_INT 2
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 2
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 2
45863: PUSH
45864: LD_INT 1
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 2
45873: PUSH
45874: LD_INT 2
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: LD_INT 2
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: LD_INT 2
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: NEG
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 2
45914: NEG
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 2
45925: NEG
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 2
45937: NEG
45938: PUSH
45939: LD_INT 2
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45968: LD_ADDR_VAR 0 18
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 1
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: NEG
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: NEG
46050: PUSH
46051: LD_INT 2
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: LD_INT 2
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 2
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 2
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 2
46103: PUSH
46104: LD_INT 2
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: LD_INT 2
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: LD_INT 2
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 2
46144: NEG
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 2
46155: NEG
46156: PUSH
46157: LD_INT 1
46159: NEG
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 2
46167: NEG
46168: PUSH
46169: LD_INT 2
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46198: LD_ADDR_VAR 0 19
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 1
46279: NEG
46280: PUSH
46281: LD_INT 2
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: LD_INT 2
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: LD_INT 1
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 2
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 2
46333: PUSH
46334: LD_INT 2
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: LD_INT 2
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 2
46374: NEG
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 2
46385: NEG
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 2
46397: NEG
46398: PUSH
46399: LD_INT 2
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46428: LD_ADDR_VAR 0 20
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 1
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: LD_INT 1
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 1
46509: NEG
46510: PUSH
46511: LD_INT 2
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 2
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 2
46563: PUSH
46564: LD_INT 2
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 2
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 2
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 2
46604: NEG
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: NEG
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 2
46627: NEG
46628: PUSH
46629: LD_INT 2
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46658: LD_ADDR_VAR 0 21
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: LD_INT 1
46678: NEG
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 1
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: NEG
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: LD_INT 2
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 2
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: LD_INT 2
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: LD_INT 2
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 2
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 2
46834: NEG
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: NEG
46846: PUSH
46847: LD_INT 1
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 2
46857: NEG
46858: PUSH
46859: LD_INT 2
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46888: LD_ADDR_VAR 0 22
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: NEG
46970: PUSH
46971: LD_INT 2
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 2
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: LD_INT 1
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 2
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 2
47013: PUSH
47014: LD_INT 1
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 2
47023: PUSH
47024: LD_INT 2
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: LD_INT 2
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: LD_INT 2
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: NEG
47054: PUSH
47055: LD_INT 1
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 2
47064: NEG
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 2
47075: NEG
47076: PUSH
47077: LD_INT 1
47079: NEG
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 2
47087: NEG
47088: PUSH
47089: LD_INT 2
47091: NEG
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47118: LD_ADDR_VAR 0 23
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 1
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: NEG
47200: PUSH
47201: LD_INT 2
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: LD_INT 2
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 2
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 2
47253: PUSH
47254: LD_INT 2
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: LD_INT 2
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: LD_INT 2
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 2
47294: NEG
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 2
47317: NEG
47318: PUSH
47319: LD_INT 2
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 2
47329: NEG
47330: PUSH
47331: LD_INT 3
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: LD_INT 3
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: LD_INT 2
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 2
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47398: LD_ADDR_VAR 0 24
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: LD_INT 1
47471: NEG
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 1
47479: NEG
47480: PUSH
47481: LD_INT 2
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: LD_INT 2
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 1
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 2
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 2
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 2
47533: PUSH
47534: LD_INT 2
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: LD_INT 2
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: LD_INT 2
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 2
47574: NEG
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 2
47585: NEG
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: NEG
47598: PUSH
47599: LD_INT 2
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: LD_INT 2
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: LD_INT 1
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 3
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 3
47641: PUSH
47642: LD_INT 2
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47674: LD_ADDR_VAR 0 25
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: LD_INT 1
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: LD_INT 1
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: LD_INT 1
47747: NEG
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 1
47755: NEG
47756: PUSH
47757: LD_INT 2
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: LD_INT 2
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 2
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 2
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 2
47809: PUSH
47810: LD_INT 2
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 2
47850: NEG
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 2
47873: NEG
47874: PUSH
47875: LD_INT 2
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 3
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 3
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: LD_INT 3
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: PUSH
47916: LD_INT 3
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47948: LD_ADDR_VAR 0 26
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: NEG
48030: PUSH
48031: LD_INT 2
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: LD_INT 2
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 2
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 2
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 2
48083: PUSH
48084: LD_INT 2
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: LD_INT 2
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: LD_INT 2
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: NEG
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 2
48147: NEG
48148: PUSH
48149: LD_INT 2
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 2
48159: PUSH
48160: LD_INT 3
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: LD_INT 3
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 2
48190: NEG
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48224: LD_ADDR_VAR 0 27
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: LD_INT 1
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 1
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 1
48305: NEG
48306: PUSH
48307: LD_INT 2
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: LD_INT 2
48320: NEG
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 2
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 2
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: LD_INT 2
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 2
48400: NEG
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 2
48411: NEG
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 2
48446: NEG
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 3
48457: NEG
48458: PUSH
48459: LD_INT 1
48461: NEG
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 3
48469: NEG
48470: PUSH
48471: LD_INT 2
48473: NEG
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48504: LD_ADDR_VAR 0 28
48508: PUSH
48509: LD_INT 0
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: LD_INT 1
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: LD_INT 0
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: LD_INT 2
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: LD_INT 2
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 2
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 2
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: PUSH
48640: LD_INT 2
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: LD_INT 2
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 2
48680: NEG
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 2
48691: NEG
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 2
48703: NEG
48704: PUSH
48705: LD_INT 2
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 2
48715: NEG
48716: PUSH
48717: LD_INT 3
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: LD_INT 3
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 3
48739: NEG
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 3
48751: NEG
48752: PUSH
48753: LD_INT 2
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48786: LD_ADDR_VAR 0 29
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: LD_INT 1
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: LD_INT 2
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: LD_INT 2
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: LD_INT 2
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: LD_INT 2
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 2
48952: NEG
48953: PUSH
48954: LD_INT 1
48956: NEG
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 2
48964: NEG
48965: PUSH
48966: LD_INT 2
48968: NEG
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 2
48976: NEG
48977: PUSH
48978: LD_INT 3
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: LD_INT 1
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 3
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: LD_INT 3
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 1
49019: NEG
49020: PUSH
49021: LD_INT 2
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 3
49030: NEG
49031: PUSH
49032: LD_INT 2
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49065: LD_ADDR_VAR 0 30
49069: PUSH
49070: LD_INT 0
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 1
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: PUSH
49104: LD_INT 1
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: LD_INT 1
49138: NEG
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: NEG
49147: PUSH
49148: LD_INT 2
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: LD_INT 2
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 2
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 2
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: NEG
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 2
49231: NEG
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 2
49242: NEG
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: LD_INT 3
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: LD_INT 2
49269: NEG
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 3
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: LD_INT 3
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 3
49308: NEG
49309: PUSH
49310: LD_INT 1
49312: NEG
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49343: LD_ADDR_VAR 0 31
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: NEG
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: LD_INT 2
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 2
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: LD_INT 2
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: LD_INT 2
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: LD_INT 2
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 2
49508: NEG
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 2
49520: NEG
49521: PUSH
49522: LD_INT 2
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 2
49532: NEG
49533: PUSH
49534: LD_INT 3
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 3
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: LD_INT 3
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 1
49575: NEG
49576: PUSH
49577: LD_INT 2
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 3
49586: NEG
49587: PUSH
49588: LD_INT 2
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49621: LD_ADDR_VAR 0 32
49625: PUSH
49626: LD_INT 0
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: LD_INT 1
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 1
49679: NEG
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: PUSH
49692: LD_INT 1
49694: NEG
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: LD_INT 2
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: LD_INT 2
49717: NEG
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 1
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 2
49736: PUSH
49737: LD_INT 1
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 2
49746: PUSH
49747: LD_INT 2
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: LD_INT 2
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: LD_INT 2
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 2
49787: NEG
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 2
49798: NEG
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: LD_INT 3
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: LD_INT 2
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 3
49833: PUSH
49834: LD_INT 2
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: LD_INT 3
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: NEG
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 3
49864: NEG
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49899: LD_ADDR_VAR 0 33
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 1
49980: NEG
49981: PUSH
49982: LD_INT 2
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 1
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 2
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 2
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: LD_INT 2
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: LD_INT 2
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 2
50054: NEG
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 2
50065: NEG
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 2
50077: NEG
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: LD_INT 3
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 2
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 3
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: PUSH
50123: LD_INT 3
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: LD_INT 2
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 3
50143: NEG
50144: PUSH
50145: LD_INT 2
50147: NEG
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50178: LD_ADDR_VAR 0 34
50182: PUSH
50183: LD_INT 0
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: NEG
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: NEG
50260: PUSH
50261: LD_INT 2
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: LD_INT 2
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 1
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 2
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 2
50303: PUSH
50304: LD_INT 2
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: LD_INT 2
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 2
50334: NEG
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: NEG
50358: PUSH
50359: LD_INT 2
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 1
50369: NEG
50370: PUSH
50371: LD_INT 3
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: LD_INT 2
50384: NEG
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 3
50392: PUSH
50393: LD_INT 2
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 2
50402: PUSH
50403: LD_INT 3
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 2
50412: NEG
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 3
50423: NEG
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50458: LD_ADDR_VAR 0 35
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: LD_INT 0
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: LD_INT 1
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: LD_INT 1
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 2
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 2
50549: NEG
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50570: LD_ADDR_VAR 0 36
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: LD_INT 1
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: LD_INT 1
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: LD_INT 2
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: LD_INT 2
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50682: LD_ADDR_VAR 0 37
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 0
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 1
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 1
50740: NEG
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 1
50751: NEG
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: LD_INT 1
50766: NEG
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50794: LD_ADDR_VAR 0 38
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: NEG
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 2
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: NEG
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50906: LD_ADDR_VAR 0 39
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: LD_INT 2
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: LD_INT 2
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51018: LD_ADDR_VAR 0 40
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: LD_INT 1
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51130: LD_ADDR_VAR 0 41
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: NEG
51212: PUSH
51213: LD_INT 2
51215: NEG
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 2
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 2
51254: PUSH
51255: LD_INT 2
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: LD_INT 2
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 2
51308: NEG
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 2
51320: NEG
51321: PUSH
51322: LD_INT 3
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 2
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 3
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 3
51353: PUSH
51354: LD_INT 1
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 3
51363: PUSH
51364: LD_INT 2
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 3
51373: PUSH
51374: LD_INT 3
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 2
51383: PUSH
51384: LD_INT 3
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 2
51393: NEG
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 3
51404: NEG
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 3
51415: NEG
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 3
51427: NEG
51428: PUSH
51429: LD_INT 2
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 3
51439: NEG
51440: PUSH
51441: LD_INT 3
51443: NEG
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51480: LD_ADDR_VAR 0 42
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: LD_INT 0
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: LD_INT 1
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: LD_INT 2
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: LD_INT 2
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 2
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 2
51605: PUSH
51606: LD_INT 2
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: LD_INT 2
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: NEG
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 2
51646: NEG
51647: PUSH
51648: LD_INT 1
51650: NEG
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 2
51658: NEG
51659: PUSH
51660: LD_INT 2
51662: NEG
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 2
51670: NEG
51671: PUSH
51672: LD_INT 3
51674: NEG
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 1
51682: NEG
51683: PUSH
51684: LD_INT 3
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: LD_INT 3
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: LD_INT 2
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 3
51716: PUSH
51717: LD_INT 2
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 3
51726: PUSH
51727: LD_INT 3
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 2
51736: PUSH
51737: LD_INT 3
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 1
51746: PUSH
51747: LD_INT 3
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: LD_INT 3
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: NEG
51767: PUSH
51768: LD_INT 2
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 3
51777: NEG
51778: PUSH
51779: LD_INT 2
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 3
51789: NEG
51790: PUSH
51791: LD_INT 3
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51830: LD_ADDR_VAR 0 43
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 1
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 1
51888: NEG
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: NEG
51912: PUSH
51913: LD_INT 2
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: LD_INT 2
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: LD_INT 1
51937: NEG
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 2
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: LD_INT 2
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 2
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 2
51996: NEG
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 2
52007: NEG
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: LD_INT 3
52023: NEG
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: LD_INT 3
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: LD_INT 2
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 2
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 3
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 3
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: LD_INT 3
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: LD_INT 3
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: LD_INT 2
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 2
52115: NEG
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 3
52126: NEG
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 3
52137: NEG
52138: PUSH
52139: LD_INT 1
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52178: LD_ADDR_VAR 0 44
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: LD_INT 1
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: LD_INT 2
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 2
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 2
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 2
52302: PUSH
52303: LD_INT 2
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: PUSH
52313: LD_INT 2
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: LD_INT 1
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 2
52333: NEG
52334: PUSH
52335: LD_INT 0
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 2
52344: NEG
52345: PUSH
52346: LD_INT 1
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 2
52356: NEG
52357: PUSH
52358: LD_INT 2
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 2
52368: NEG
52369: PUSH
52370: LD_INT 3
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 2
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 3
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 3
52401: PUSH
52402: LD_INT 1
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 3
52411: PUSH
52412: LD_INT 2
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 3
52421: PUSH
52422: LD_INT 3
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 2
52431: PUSH
52432: LD_INT 3
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 2
52441: NEG
52442: PUSH
52443: LD_INT 1
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 3
52452: NEG
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 3
52463: NEG
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 3
52475: NEG
52476: PUSH
52477: LD_INT 2
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 3
52487: NEG
52488: PUSH
52489: LD_INT 3
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52528: LD_ADDR_VAR 0 45
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: LD_INT 0
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 1
52586: NEG
52587: PUSH
52588: LD_INT 0
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: LD_INT 1
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 1
52609: NEG
52610: PUSH
52611: LD_INT 2
52613: NEG
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: LD_INT 2
52624: NEG
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 1
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 2
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 2
52653: PUSH
52654: LD_INT 2
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: LD_INT 2
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 0
52673: PUSH
52674: LD_INT 2
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 2
52694: NEG
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 2
52706: NEG
52707: PUSH
52708: LD_INT 2
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 2
52718: NEG
52719: PUSH
52720: LD_INT 3
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: LD_INT 3
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: LD_INT 3
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: LD_INT 2
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 3
52764: PUSH
52765: LD_INT 2
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 3
52774: PUSH
52775: LD_INT 3
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 2
52784: PUSH
52785: LD_INT 3
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: LD_INT 3
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: LD_INT 3
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 1
52814: NEG
52815: PUSH
52816: LD_INT 2
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 3
52825: NEG
52826: PUSH
52827: LD_INT 2
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 3
52837: NEG
52838: PUSH
52839: LD_INT 3
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52878: LD_ADDR_VAR 0 46
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 1
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 1
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: LD_INT 1
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: NEG
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: LD_INT 2
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: LD_INT 2
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: LD_INT 1
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 2
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 2
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: PUSH
53014: LD_INT 2
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 0
53023: PUSH
53024: LD_INT 2
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 1
53033: NEG
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 2
53044: NEG
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 2
53055: NEG
53056: PUSH
53057: LD_INT 1
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 1
53067: NEG
53068: PUSH
53069: LD_INT 3
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: LD_INT 3
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: LD_INT 2
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 2
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 3
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 3
53122: PUSH
53123: LD_INT 1
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: LD_INT 3
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: LD_INT 3
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: LD_INT 2
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: NEG
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 3
53174: NEG
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 3
53185: NEG
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53226: LD_ADDR_VAR 0 47
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 1
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: LD_INT 1
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: NEG
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: LD_INT 2
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: LD_INT 2
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 2
53341: NEG
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: LD_INT 2
53357: NEG
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53377: LD_ADDR_VAR 0 48
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: LD_INT 1
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: LD_INT 1
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: LD_INT 2
53462: NEG
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: LD_INT 2
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 2
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 2
53502: PUSH
53503: LD_INT 1
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53524: LD_ADDR_VAR 0 49
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: LD_INT 0
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 2
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 2
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 2
53636: PUSH
53637: LD_INT 2
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53668: LD_ADDR_VAR 0 50
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 0
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: LD_INT 1
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 1
53737: NEG
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 2
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 2
53759: PUSH
53760: LD_INT 2
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 1
53769: PUSH
53770: LD_INT 2
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: LD_INT 2
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: LD_INT 1
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53812: LD_ADDR_VAR 0 51
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 2
53924: NEG
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 2
53935: NEG
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53959: LD_ADDR_VAR 0 52
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: NEG
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: NEG
54041: PUSH
54042: LD_INT 2
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 2
54063: NEG
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 2
54074: NEG
54075: PUSH
54076: LD_INT 1
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 2
54086: NEG
54087: PUSH
54088: LD_INT 2
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54110: LD_ADDR_VAR 0 53
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: LD_INT 2
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_INT 2
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 2
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 2
54245: PUSH
54246: LD_INT 2
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: LD_INT 2
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 2
54286: NEG
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 2
54297: NEG
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 2
54309: NEG
54310: PUSH
54311: LD_INT 2
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54340: LD_ADDR_VAR 0 54
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: LD_INT 1
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: LD_INT 2
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: LD_INT 2
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: LD_INT 1
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 2
54475: PUSH
54476: LD_INT 2
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: LD_INT 2
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 2
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 2
54516: NEG
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 2
54527: NEG
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: NEG
54540: PUSH
54541: LD_INT 2
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54570: LD_ADDR_VAR 0 55
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: LD_INT 1
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: LD_INT 1
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: LD_INT 1
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: LD_INT 2
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: LD_INT 2
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 2
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 2
54695: PUSH
54696: LD_INT 1
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 2
54705: PUSH
54706: LD_INT 2
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: LD_INT 2
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: LD_INT 2
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: NEG
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 2
54746: NEG
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 2
54757: NEG
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 2
54769: NEG
54770: PUSH
54771: LD_INT 2
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54800: LD_ADDR_VAR 0 56
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: LD_INT 1
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: NEG
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: LD_INT 1
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 1
54881: NEG
54882: PUSH
54883: LD_INT 2
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: LD_INT 2
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 2
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 2
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 2
54935: PUSH
54936: LD_INT 2
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: LD_INT 2
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: LD_INT 2
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 2
54976: NEG
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 2
54987: NEG
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 2
54999: NEG
55000: PUSH
55001: LD_INT 2
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55030: LD_ADDR_VAR 0 57
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: LD_INT 1
55050: NEG
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: LD_INT 1
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 2
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 2
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: LD_INT 2
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: LD_INT 2
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 2
55206: NEG
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 2
55217: NEG
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 2
55229: NEG
55230: PUSH
55231: LD_INT 2
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55260: LD_ADDR_VAR 0 58
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: LD_INT 1
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 1
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: LD_INT 1
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: NEG
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: LD_INT 1
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 1
55341: NEG
55342: PUSH
55343: LD_INT 2
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: LD_INT 2
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 1
55364: PUSH
55365: LD_INT 1
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 2
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 2
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 2
55395: PUSH
55396: LD_INT 2
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: LD_INT 2
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: LD_INT 2
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 1
55425: NEG
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 2
55447: NEG
55448: PUSH
55449: LD_INT 1
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 2
55459: NEG
55460: PUSH
55461: LD_INT 2
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55490: LD_ADDR_VAR 0 59
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: LD_INT 1
55510: NEG
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 1
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: LD_INT 1
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55578: LD_ADDR_VAR 0 60
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: NEG
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55666: LD_ADDR_VAR 0 61
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 0
55683: PUSH
55684: LD_INT 1
55686: NEG
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: PUSH
55705: LD_INT 1
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: LD_INT 1
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: NEG
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55754: LD_ADDR_VAR 0 62
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 1
55812: NEG
55813: PUSH
55814: LD_INT 0
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: LD_INT 1
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55842: LD_ADDR_VAR 0 63
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: NEG
55912: PUSH
55913: LD_INT 1
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55930: LD_ADDR_VAR 0 64
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: LD_INT 1
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: ST_TO_ADDR
// end ; 1 :
56018: GO 61915
56020: LD_INT 1
56022: DOUBLE
56023: EQUAL
56024: IFTRUE 56028
56026: GO 58651
56028: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56029: LD_ADDR_VAR 0 11
56033: PUSH
56034: LD_INT 1
56036: NEG
56037: PUSH
56038: LD_INT 3
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: LD_INT 3
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: LIST
56072: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56073: LD_ADDR_VAR 0 12
56077: PUSH
56078: LD_INT 2
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 3
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 3
56101: PUSH
56102: LD_INT 1
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: LIST
56113: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56114: LD_ADDR_VAR 0 13
56118: PUSH
56119: LD_INT 3
56121: PUSH
56122: LD_INT 2
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 3
56131: PUSH
56132: LD_INT 3
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 2
56141: PUSH
56142: LD_INT 3
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: LIST
56153: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56154: LD_ADDR_VAR 0 14
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: LD_INT 3
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 3
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: LD_INT 2
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: LIST
56194: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56195: LD_ADDR_VAR 0 15
56199: PUSH
56200: LD_INT 2
56202: NEG
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 3
56213: NEG
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 3
56224: NEG
56225: PUSH
56226: LD_INT 1
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: LIST
56238: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56239: LD_ADDR_VAR 0 16
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: LD_INT 3
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 3
56258: NEG
56259: PUSH
56260: LD_INT 2
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 3
56270: NEG
56271: PUSH
56272: LD_INT 3
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: LIST
56284: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56285: LD_ADDR_VAR 0 17
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: LD_INT 3
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: LD_INT 3
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: LD_INT 2
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: LIST
56328: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56329: LD_ADDR_VAR 0 18
56333: PUSH
56334: LD_INT 2
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 3
56347: PUSH
56348: LD_INT 0
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 3
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: LIST
56369: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56370: LD_ADDR_VAR 0 19
56374: PUSH
56375: LD_INT 3
56377: PUSH
56378: LD_INT 2
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 3
56387: PUSH
56388: LD_INT 3
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 2
56397: PUSH
56398: LD_INT 3
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: LIST
56409: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56410: LD_ADDR_VAR 0 20
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: LD_INT 3
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: LD_INT 3
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: LD_INT 2
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: LIST
56450: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56451: LD_ADDR_VAR 0 21
56455: PUSH
56456: LD_INT 2
56458: NEG
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 3
56469: NEG
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 3
56480: NEG
56481: PUSH
56482: LD_INT 1
56484: NEG
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: LIST
56494: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56495: LD_ADDR_VAR 0 22
56499: PUSH
56500: LD_INT 2
56502: NEG
56503: PUSH
56504: LD_INT 3
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 3
56514: NEG
56515: PUSH
56516: LD_INT 2
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 3
56526: NEG
56527: PUSH
56528: LD_INT 3
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: LIST
56540: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56541: LD_ADDR_VAR 0 23
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: LD_INT 3
56551: NEG
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 1
56559: NEG
56560: PUSH
56561: LD_INT 4
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: LD_INT 3
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: LIST
56584: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56585: LD_ADDR_VAR 0 24
56589: PUSH
56590: LD_INT 3
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 3
56602: PUSH
56603: LD_INT 1
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 4
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: LIST
56625: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56626: LD_ADDR_VAR 0 25
56630: PUSH
56631: LD_INT 3
56633: PUSH
56634: LD_INT 3
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 4
56643: PUSH
56644: LD_INT 3
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 3
56653: PUSH
56654: LD_INT 4
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: LIST
56665: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56666: LD_ADDR_VAR 0 26
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: LD_INT 3
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: LD_INT 4
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 1
56693: NEG
56694: PUSH
56695: LD_INT 3
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: LIST
56706: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56707: LD_ADDR_VAR 0 27
56711: PUSH
56712: LD_INT 3
56714: NEG
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 3
56725: NEG
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 4
56736: NEG
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: LIST
56750: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56751: LD_ADDR_VAR 0 28
56755: PUSH
56756: LD_INT 3
56758: NEG
56759: PUSH
56760: LD_INT 3
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 3
56770: NEG
56771: PUSH
56772: LD_INT 4
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 4
56782: NEG
56783: PUSH
56784: LD_INT 3
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: LIST
56796: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56797: LD_ADDR_VAR 0 29
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: LD_INT 3
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: LD_INT 3
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: LD_INT 2
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: LD_INT 4
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: LD_INT 4
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: LD_INT 3
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: LD_INT 5
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: LD_INT 5
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: LD_INT 4
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: LD_INT 6
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 6
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: LD_INT 5
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56952: LD_ADDR_VAR 0 30
56956: PUSH
56957: LD_INT 2
56959: PUSH
56960: LD_INT 1
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 3
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 3
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 3
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 4
57001: PUSH
57002: LD_INT 0
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 4
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 4
57021: PUSH
57022: LD_INT 1
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 5
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 5
57042: PUSH
57043: LD_INT 1
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 5
57052: PUSH
57053: LD_INT 1
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 6
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 6
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57095: LD_ADDR_VAR 0 31
57099: PUSH
57100: LD_INT 3
57102: PUSH
57103: LD_INT 2
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 3
57112: PUSH
57113: LD_INT 3
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 2
57122: PUSH
57123: LD_INT 3
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 4
57132: PUSH
57133: LD_INT 3
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 4
57142: PUSH
57143: LD_INT 4
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 3
57152: PUSH
57153: LD_INT 4
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 5
57162: PUSH
57163: LD_INT 4
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 5
57172: PUSH
57173: LD_INT 5
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 4
57182: PUSH
57183: LD_INT 5
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 6
57192: PUSH
57193: LD_INT 5
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 6
57202: PUSH
57203: LD_INT 6
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 5
57212: PUSH
57213: LD_INT 6
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57234: LD_ADDR_VAR 0 32
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: LD_INT 3
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: LD_INT 3
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: LD_INT 2
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: LD_INT 4
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: LD_INT 4
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: NEG
57293: PUSH
57294: LD_INT 3
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 1
57303: PUSH
57304: LD_INT 5
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: LD_INT 5
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 1
57323: NEG
57324: PUSH
57325: LD_INT 4
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: LD_INT 6
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: LD_INT 6
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: NEG
57355: PUSH
57356: LD_INT 5
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57377: LD_ADDR_VAR 0 33
57381: PUSH
57382: LD_INT 2
57384: NEG
57385: PUSH
57386: LD_INT 1
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 3
57395: NEG
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 3
57406: NEG
57407: PUSH
57408: LD_INT 1
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 3
57418: NEG
57419: PUSH
57420: LD_INT 1
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 4
57429: NEG
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 4
57440: NEG
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 4
57452: NEG
57453: PUSH
57454: LD_INT 1
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 5
57463: NEG
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 5
57474: NEG
57475: PUSH
57476: LD_INT 1
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 5
57486: NEG
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 6
57497: NEG
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 6
57508: NEG
57509: PUSH
57510: LD_INT 1
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57532: LD_ADDR_VAR 0 34
57536: PUSH
57537: LD_INT 2
57539: NEG
57540: PUSH
57541: LD_INT 3
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 3
57551: NEG
57552: PUSH
57553: LD_INT 2
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 3
57563: NEG
57564: PUSH
57565: LD_INT 3
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 3
57575: NEG
57576: PUSH
57577: LD_INT 4
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 4
57587: NEG
57588: PUSH
57589: LD_INT 3
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 4
57599: NEG
57600: PUSH
57601: LD_INT 4
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 4
57611: NEG
57612: PUSH
57613: LD_INT 5
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 5
57623: NEG
57624: PUSH
57625: LD_INT 4
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 5
57635: NEG
57636: PUSH
57637: LD_INT 5
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 5
57647: NEG
57648: PUSH
57649: LD_INT 6
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 6
57659: NEG
57660: PUSH
57661: LD_INT 5
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 6
57671: NEG
57672: PUSH
57673: LD_INT 6
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57695: LD_ADDR_VAR 0 41
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: LD_INT 2
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: LD_INT 3
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: LD_INT 2
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: LIST
57738: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57739: LD_ADDR_VAR 0 42
57743: PUSH
57744: LD_INT 2
57746: PUSH
57747: LD_INT 0
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 3
57767: PUSH
57768: LD_INT 1
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: LIST
57779: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57780: LD_ADDR_VAR 0 43
57784: PUSH
57785: LD_INT 2
57787: PUSH
57788: LD_INT 2
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 3
57797: PUSH
57798: LD_INT 2
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 2
57807: PUSH
57808: LD_INT 3
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: LIST
57819: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57820: LD_ADDR_VAR 0 44
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: LD_INT 2
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 1
57837: PUSH
57838: LD_INT 3
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: NEG
57848: PUSH
57849: LD_INT 2
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: LIST
57860: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57861: LD_ADDR_VAR 0 45
57865: PUSH
57866: LD_INT 2
57868: NEG
57869: PUSH
57870: LD_INT 0
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 2
57879: NEG
57880: PUSH
57881: LD_INT 1
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 3
57890: NEG
57891: PUSH
57892: LD_INT 1
57894: NEG
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: LIST
57904: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57905: LD_ADDR_VAR 0 46
57909: PUSH
57910: LD_INT 2
57912: NEG
57913: PUSH
57914: LD_INT 2
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: LD_INT 3
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 3
57936: NEG
57937: PUSH
57938: LD_INT 2
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: LIST
57950: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57951: LD_ADDR_VAR 0 47
57955: PUSH
57956: LD_INT 2
57958: NEG
57959: PUSH
57960: LD_INT 3
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: LD_INT 3
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57984: LD_ADDR_VAR 0 48
57988: PUSH
57989: LD_INT 1
57991: PUSH
57992: LD_INT 2
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 2
58002: PUSH
58003: LD_INT 1
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58015: LD_ADDR_VAR 0 49
58019: PUSH
58020: LD_INT 3
58022: PUSH
58023: LD_INT 1
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 3
58032: PUSH
58033: LD_INT 2
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58044: LD_ADDR_VAR 0 50
58048: PUSH
58049: LD_INT 2
58051: PUSH
58052: LD_INT 3
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 1
58061: PUSH
58062: LD_INT 3
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58073: LD_ADDR_VAR 0 51
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58104: LD_ADDR_VAR 0 52
58108: PUSH
58109: LD_INT 3
58111: NEG
58112: PUSH
58113: LD_INT 1
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 3
58123: NEG
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58137: LD_ADDR_VAR 0 53
58141: PUSH
58142: LD_INT 1
58144: NEG
58145: PUSH
58146: LD_INT 3
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: LD_INT 3
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 1
58167: PUSH
58168: LD_INT 2
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: LIST
58180: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58181: LD_ADDR_VAR 0 54
58185: PUSH
58186: LD_INT 2
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 3
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 3
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: LIST
58221: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58222: LD_ADDR_VAR 0 55
58226: PUSH
58227: LD_INT 3
58229: PUSH
58230: LD_INT 2
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 3
58239: PUSH
58240: LD_INT 3
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: LD_INT 3
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: LIST
58261: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58262: LD_ADDR_VAR 0 56
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: LD_INT 3
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: LD_INT 3
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: NEG
58290: PUSH
58291: LD_INT 2
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: LIST
58302: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58303: LD_ADDR_VAR 0 57
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PUSH
58312: LD_INT 1
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 3
58321: NEG
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 3
58332: NEG
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: LIST
58346: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58347: LD_ADDR_VAR 0 58
58351: PUSH
58352: LD_INT 2
58354: NEG
58355: PUSH
58356: LD_INT 3
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 3
58366: NEG
58367: PUSH
58368: LD_INT 2
58370: NEG
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 3
58378: NEG
58379: PUSH
58380: LD_INT 3
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: LIST
58392: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58393: LD_ADDR_VAR 0 59
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: LD_INT 2
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 0
58412: PUSH
58413: LD_INT 2
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 1
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: LIST
58436: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58437: LD_ADDR_VAR 0 60
58441: PUSH
58442: LD_INT 1
58444: PUSH
58445: LD_INT 1
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 2
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 2
58465: PUSH
58466: LD_INT 1
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: LIST
58477: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58478: LD_ADDR_VAR 0 61
58482: PUSH
58483: LD_INT 2
58485: PUSH
58486: LD_INT 1
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 2
58495: PUSH
58496: LD_INT 2
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 1
58505: PUSH
58506: LD_INT 2
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: LIST
58517: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58518: LD_ADDR_VAR 0 62
58522: PUSH
58523: LD_INT 1
58525: PUSH
58526: LD_INT 2
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: LD_INT 2
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: NEG
58546: PUSH
58547: LD_INT 1
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: LIST
58558: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58559: LD_ADDR_VAR 0 63
58563: PUSH
58564: LD_INT 1
58566: NEG
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 2
58577: NEG
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 2
58588: NEG
58589: PUSH
58590: LD_INT 1
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: LIST
58602: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58603: LD_ADDR_VAR 0 64
58607: PUSH
58608: LD_INT 1
58610: NEG
58611: PUSH
58612: LD_INT 2
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 2
58622: NEG
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 2
58634: NEG
58635: PUSH
58636: LD_INT 2
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: LIST
58648: ST_TO_ADDR
// end ; 2 :
58649: GO 61915
58651: LD_INT 2
58653: DOUBLE
58654: EQUAL
58655: IFTRUE 58659
58657: GO 61914
58659: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58660: LD_ADDR_VAR 0 29
58664: PUSH
58665: LD_INT 4
58667: PUSH
58668: LD_INT 0
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 4
58677: PUSH
58678: LD_INT 1
58680: NEG
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 5
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 5
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 4
58708: PUSH
58709: LD_INT 1
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 3
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 3
58728: PUSH
58729: LD_INT 1
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 3
58739: PUSH
58740: LD_INT 2
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 5
58750: PUSH
58751: LD_INT 2
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 3
58760: PUSH
58761: LD_INT 3
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 3
58770: PUSH
58771: LD_INT 2
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 4
58780: PUSH
58781: LD_INT 3
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 4
58790: PUSH
58791: LD_INT 4
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 3
58800: PUSH
58801: LD_INT 4
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 2
58810: PUSH
58811: LD_INT 3
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 2
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 4
58830: PUSH
58831: LD_INT 2
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: PUSH
58841: LD_INT 4
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: LD_INT 4
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: LD_INT 3
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: LD_INT 4
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: LD_INT 5
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: LD_INT 5
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: NEG
58901: PUSH
58902: LD_INT 4
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: LD_INT 3
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 2
58922: PUSH
58923: LD_INT 5
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 2
58932: NEG
58933: PUSH
58934: LD_INT 3
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 3
58943: NEG
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 3
58954: NEG
58955: PUSH
58956: LD_INT 1
58958: NEG
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 2
58966: NEG
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 3
58988: NEG
58989: PUSH
58990: LD_INT 1
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 4
58999: NEG
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 4
59010: NEG
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 4
59022: NEG
59023: PUSH
59024: LD_INT 2
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: NEG
59035: PUSH
59036: LD_INT 2
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 4
59045: NEG
59046: PUSH
59047: LD_INT 4
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 4
59057: NEG
59058: PUSH
59059: LD_INT 5
59061: NEG
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 3
59069: NEG
59070: PUSH
59071: LD_INT 4
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 3
59081: NEG
59082: PUSH
59083: LD_INT 3
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 4
59093: NEG
59094: PUSH
59095: LD_INT 3
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 5
59105: NEG
59106: PUSH
59107: LD_INT 4
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 5
59117: NEG
59118: PUSH
59119: LD_INT 5
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 3
59129: NEG
59130: PUSH
59131: LD_INT 5
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 5
59141: NEG
59142: PUSH
59143: LD_INT 3
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59198: LD_ADDR_VAR 0 30
59202: PUSH
59203: LD_INT 4
59205: PUSH
59206: LD_INT 4
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 4
59215: PUSH
59216: LD_INT 3
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 5
59225: PUSH
59226: LD_INT 4
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 5
59235: PUSH
59236: LD_INT 5
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 4
59245: PUSH
59246: LD_INT 5
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 3
59255: PUSH
59256: LD_INT 4
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 3
59265: PUSH
59266: LD_INT 3
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 5
59275: PUSH
59276: LD_INT 3
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 3
59285: PUSH
59286: LD_INT 5
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: LD_INT 3
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: LD_INT 2
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 1
59315: PUSH
59316: LD_INT 3
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 1
59325: PUSH
59326: LD_INT 4
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: LD_INT 4
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: NEG
59346: PUSH
59347: LD_INT 3
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 1
59356: NEG
59357: PUSH
59358: LD_INT 2
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 2
59367: PUSH
59368: LD_INT 4
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 2
59377: NEG
59378: PUSH
59379: LD_INT 2
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 4
59388: NEG
59389: PUSH
59390: LD_INT 0
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 4
59399: NEG
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 3
59411: NEG
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 3
59422: NEG
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 4
59433: NEG
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 5
59444: NEG
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 5
59455: NEG
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 5
59467: NEG
59468: PUSH
59469: LD_INT 2
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 3
59479: NEG
59480: PUSH
59481: LD_INT 2
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 3
59490: NEG
59491: PUSH
59492: LD_INT 3
59494: NEG
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 3
59502: NEG
59503: PUSH
59504: LD_INT 4
59506: NEG
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 2
59514: NEG
59515: PUSH
59516: LD_INT 3
59518: NEG
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 2
59526: NEG
59527: PUSH
59528: LD_INT 2
59530: NEG
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 3
59538: NEG
59539: PUSH
59540: LD_INT 2
59542: NEG
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 4
59550: NEG
59551: PUSH
59552: LD_INT 3
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 4
59562: NEG
59563: PUSH
59564: LD_INT 4
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 2
59574: NEG
59575: PUSH
59576: LD_INT 4
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 4
59586: NEG
59587: PUSH
59588: LD_INT 2
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: LD_INT 4
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: LD_INT 5
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: PUSH
59621: LD_INT 4
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 1
59631: PUSH
59632: LD_INT 3
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: LD_INT 3
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 1
59653: NEG
59654: PUSH
59655: LD_INT 4
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 1
59665: NEG
59666: PUSH
59667: LD_INT 5
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 2
59677: PUSH
59678: LD_INT 3
59680: NEG
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 2
59688: NEG
59689: PUSH
59690: LD_INT 5
59692: NEG
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59745: LD_ADDR_VAR 0 31
59749: PUSH
59750: LD_INT 0
59752: PUSH
59753: LD_INT 4
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: LD_INT 3
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: LD_INT 4
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: LD_INT 5
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 0
59792: PUSH
59793: LD_INT 5
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 1
59802: NEG
59803: PUSH
59804: LD_INT 4
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 1
59813: NEG
59814: PUSH
59815: LD_INT 3
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 2
59824: PUSH
59825: LD_INT 5
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 2
59834: NEG
59835: PUSH
59836: LD_INT 3
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 3
59845: NEG
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 3
59856: NEG
59857: PUSH
59858: LD_INT 1
59860: NEG
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 2
59868: NEG
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 2
59879: NEG
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 3
59890: NEG
59891: PUSH
59892: LD_INT 1
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 4
59901: NEG
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 4
59912: NEG
59913: PUSH
59914: LD_INT 1
59916: NEG
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 4
59924: NEG
59925: PUSH
59926: LD_INT 2
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 2
59936: NEG
59937: PUSH
59938: LD_INT 2
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 4
59947: NEG
59948: PUSH
59949: LD_INT 4
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 4
59959: NEG
59960: PUSH
59961: LD_INT 5
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 3
59971: NEG
59972: PUSH
59973: LD_INT 4
59975: NEG
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 3
59983: NEG
59984: PUSH
59985: LD_INT 3
59987: NEG
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 4
59995: NEG
59996: PUSH
59997: LD_INT 3
59999: NEG
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 5
60007: NEG
60008: PUSH
60009: LD_INT 4
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 5
60019: NEG
60020: PUSH
60021: LD_INT 5
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 3
60031: NEG
60032: PUSH
60033: LD_INT 5
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 5
60043: NEG
60044: PUSH
60045: LD_INT 3
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: LD_INT 3
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 0
60066: PUSH
60067: LD_INT 4
60069: NEG
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 1
60077: PUSH
60078: LD_INT 3
60080: NEG
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 1
60088: PUSH
60089: LD_INT 2
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 0
60099: PUSH
60100: LD_INT 2
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 1
60110: NEG
60111: PUSH
60112: LD_INT 3
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 1
60122: NEG
60123: PUSH
60124: LD_INT 4
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: PUSH
60135: LD_INT 2
60137: NEG
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 2
60145: NEG
60146: PUSH
60147: LD_INT 4
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 4
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 4
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 5
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 5
60188: PUSH
60189: LD_INT 1
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 4
60198: PUSH
60199: LD_INT 1
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 3
60208: PUSH
60209: LD_INT 0
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 3
60218: PUSH
60219: LD_INT 1
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 3
60229: PUSH
60230: LD_INT 2
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 5
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60295: LD_ADDR_VAR 0 32
60299: PUSH
60300: LD_INT 4
60302: NEG
60303: PUSH
60304: LD_INT 0
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 4
60313: NEG
60314: PUSH
60315: LD_INT 1
60317: NEG
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 3
60325: NEG
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 3
60336: NEG
60337: PUSH
60338: LD_INT 1
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 4
60347: NEG
60348: PUSH
60349: LD_INT 1
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 5
60358: NEG
60359: PUSH
60360: LD_INT 0
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 5
60369: NEG
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 5
60381: NEG
60382: PUSH
60383: LD_INT 2
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 3
60393: NEG
60394: PUSH
60395: LD_INT 2
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 3
60404: NEG
60405: PUSH
60406: LD_INT 3
60408: NEG
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 3
60416: NEG
60417: PUSH
60418: LD_INT 4
60420: NEG
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 2
60428: NEG
60429: PUSH
60430: LD_INT 3
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 2
60440: NEG
60441: PUSH
60442: LD_INT 2
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 3
60452: NEG
60453: PUSH
60454: LD_INT 2
60456: NEG
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 4
60464: NEG
60465: PUSH
60466: LD_INT 3
60468: NEG
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 4
60476: NEG
60477: PUSH
60478: LD_INT 4
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 2
60488: NEG
60489: PUSH
60490: LD_INT 4
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 4
60500: NEG
60501: PUSH
60502: LD_INT 2
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: LD_INT 4
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 0
60523: PUSH
60524: LD_INT 5
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 1
60534: PUSH
60535: LD_INT 4
60537: NEG
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 1
60545: PUSH
60546: LD_INT 3
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 0
60556: PUSH
60557: LD_INT 3
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: NEG
60568: PUSH
60569: LD_INT 4
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 1
60579: NEG
60580: PUSH
60581: LD_INT 5
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 2
60591: PUSH
60592: LD_INT 3
60594: NEG
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 2
60602: NEG
60603: PUSH
60604: LD_INT 5
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 3
60614: PUSH
60615: LD_INT 0
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 3
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 4
60635: PUSH
60636: LD_INT 0
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 4
60645: PUSH
60646: LD_INT 1
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 3
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 2
60665: PUSH
60666: LD_INT 0
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 2
60675: PUSH
60676: LD_INT 1
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 2
60686: PUSH
60687: LD_INT 2
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 4
60697: PUSH
60698: LD_INT 2
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 4
60707: PUSH
60708: LD_INT 4
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 4
60717: PUSH
60718: LD_INT 3
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 5
60727: PUSH
60728: LD_INT 4
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 5
60737: PUSH
60738: LD_INT 5
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 4
60747: PUSH
60748: LD_INT 5
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 3
60757: PUSH
60758: LD_INT 4
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 3
60767: PUSH
60768: LD_INT 3
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 5
60777: PUSH
60778: LD_INT 3
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 3
60787: PUSH
60788: LD_INT 5
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60842: LD_ADDR_VAR 0 33
60846: PUSH
60847: LD_INT 4
60849: NEG
60850: PUSH
60851: LD_INT 4
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 4
60861: NEG
60862: PUSH
60863: LD_INT 5
60865: NEG
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 3
60873: NEG
60874: PUSH
60875: LD_INT 4
60877: NEG
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 3
60885: NEG
60886: PUSH
60887: LD_INT 3
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 4
60897: NEG
60898: PUSH
60899: LD_INT 3
60901: NEG
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 5
60909: NEG
60910: PUSH
60911: LD_INT 4
60913: NEG
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 5
60921: NEG
60922: PUSH
60923: LD_INT 5
60925: NEG
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 3
60933: NEG
60934: PUSH
60935: LD_INT 5
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 5
60945: NEG
60946: PUSH
60947: LD_INT 3
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: LD_INT 3
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: LD_INT 4
60971: NEG
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 1
60979: PUSH
60980: LD_INT 3
60982: NEG
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 1
60990: PUSH
60991: LD_INT 2
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: LD_INT 2
61004: NEG
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: LD_INT 3
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 1
61024: NEG
61025: PUSH
61026: LD_INT 4
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 2
61036: PUSH
61037: LD_INT 2
61039: NEG
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 2
61047: NEG
61048: PUSH
61049: LD_INT 4
61051: NEG
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 4
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 4
61069: PUSH
61070: LD_INT 1
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 5
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 5
61090: PUSH
61091: LD_INT 1
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 4
61100: PUSH
61101: LD_INT 1
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 3
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 3
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 3
61131: PUSH
61132: LD_INT 2
61134: NEG
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 5
61142: PUSH
61143: LD_INT 2
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 3
61152: PUSH
61153: LD_INT 3
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 3
61162: PUSH
61163: LD_INT 2
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 4
61172: PUSH
61173: LD_INT 3
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 4
61182: PUSH
61183: LD_INT 4
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 3
61192: PUSH
61193: LD_INT 4
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 2
61202: PUSH
61203: LD_INT 3
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 2
61212: PUSH
61213: LD_INT 2
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 4
61222: PUSH
61223: LD_INT 2
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 2
61232: PUSH
61233: LD_INT 4
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 0
61242: PUSH
61243: LD_INT 4
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 0
61252: PUSH
61253: LD_INT 3
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 1
61262: PUSH
61263: LD_INT 4
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 1
61272: PUSH
61273: LD_INT 5
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 0
61282: PUSH
61283: LD_INT 5
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 1
61292: NEG
61293: PUSH
61294: LD_INT 4
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 1
61303: NEG
61304: PUSH
61305: LD_INT 3
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 2
61314: PUSH
61315: LD_INT 5
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 2
61324: NEG
61325: PUSH
61326: LD_INT 3
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61380: LD_ADDR_VAR 0 34
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: LD_INT 4
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 0
61398: PUSH
61399: LD_INT 5
61401: NEG
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 1
61409: PUSH
61410: LD_INT 4
61412: NEG
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: LD_INT 3
61423: NEG
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: LD_INT 3
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 1
61442: NEG
61443: PUSH
61444: LD_INT 4
61446: NEG
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 1
61454: NEG
61455: PUSH
61456: LD_INT 5
61458: NEG
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 2
61466: PUSH
61467: LD_INT 3
61469: NEG
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 2
61477: NEG
61478: PUSH
61479: LD_INT 5
61481: NEG
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 3
61489: PUSH
61490: LD_INT 0
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 3
61499: PUSH
61500: LD_INT 1
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 4
61510: PUSH
61511: LD_INT 0
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 4
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 3
61530: PUSH
61531: LD_INT 1
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 2
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 2
61550: PUSH
61551: LD_INT 1
61553: NEG
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 2
61561: PUSH
61562: LD_INT 2
61564: NEG
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 4
61572: PUSH
61573: LD_INT 2
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 4
61582: PUSH
61583: LD_INT 4
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 4
61592: PUSH
61593: LD_INT 3
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 5
61602: PUSH
61603: LD_INT 4
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 5
61612: PUSH
61613: LD_INT 5
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 4
61622: PUSH
61623: LD_INT 5
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 3
61632: PUSH
61633: LD_INT 4
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 3
61642: PUSH
61643: LD_INT 3
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 5
61652: PUSH
61653: LD_INT 3
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 3
61662: PUSH
61663: LD_INT 5
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: LD_INT 3
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 0
61682: PUSH
61683: LD_INT 2
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 1
61692: PUSH
61693: LD_INT 3
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: LD_INT 4
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: LD_INT 4
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: LD_INT 3
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 1
61733: NEG
61734: PUSH
61735: LD_INT 2
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 2
61744: PUSH
61745: LD_INT 4
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 2
61754: NEG
61755: PUSH
61756: LD_INT 2
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 4
61765: NEG
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 4
61776: NEG
61777: PUSH
61778: LD_INT 1
61780: NEG
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 3
61788: NEG
61789: PUSH
61790: LD_INT 0
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 3
61799: NEG
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 4
61810: NEG
61811: PUSH
61812: LD_INT 1
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 5
61821: NEG
61822: PUSH
61823: LD_INT 0
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 5
61832: NEG
61833: PUSH
61834: LD_INT 1
61836: NEG
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 5
61844: NEG
61845: PUSH
61846: LD_INT 2
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 3
61856: NEG
61857: PUSH
61858: LD_INT 2
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: ST_TO_ADDR
// end ; end ;
61912: GO 61915
61914: POP
// case btype of b_depot , b_warehouse :
61915: LD_VAR 0 1
61919: PUSH
61920: LD_INT 0
61922: DOUBLE
61923: EQUAL
61924: IFTRUE 61934
61926: LD_INT 1
61928: DOUBLE
61929: EQUAL
61930: IFTRUE 61934
61932: GO 62135
61934: POP
// case nation of nation_american :
61935: LD_VAR 0 5
61939: PUSH
61940: LD_INT 1
61942: DOUBLE
61943: EQUAL
61944: IFTRUE 61948
61946: GO 62004
61948: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61949: LD_ADDR_VAR 0 9
61953: PUSH
61954: LD_VAR 0 11
61958: PUSH
61959: LD_VAR 0 12
61963: PUSH
61964: LD_VAR 0 13
61968: PUSH
61969: LD_VAR 0 14
61973: PUSH
61974: LD_VAR 0 15
61978: PUSH
61979: LD_VAR 0 16
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: PUSH
61992: LD_VAR 0 4
61996: PUSH
61997: LD_INT 1
61999: PLUS
62000: ARRAY
62001: ST_TO_ADDR
62002: GO 62133
62004: LD_INT 2
62006: DOUBLE
62007: EQUAL
62008: IFTRUE 62012
62010: GO 62068
62012: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62013: LD_ADDR_VAR 0 9
62017: PUSH
62018: LD_VAR 0 17
62022: PUSH
62023: LD_VAR 0 18
62027: PUSH
62028: LD_VAR 0 19
62032: PUSH
62033: LD_VAR 0 20
62037: PUSH
62038: LD_VAR 0 21
62042: PUSH
62043: LD_VAR 0 22
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: PUSH
62056: LD_VAR 0 4
62060: PUSH
62061: LD_INT 1
62063: PLUS
62064: ARRAY
62065: ST_TO_ADDR
62066: GO 62133
62068: LD_INT 3
62070: DOUBLE
62071: EQUAL
62072: IFTRUE 62076
62074: GO 62132
62076: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62077: LD_ADDR_VAR 0 9
62081: PUSH
62082: LD_VAR 0 23
62086: PUSH
62087: LD_VAR 0 24
62091: PUSH
62092: LD_VAR 0 25
62096: PUSH
62097: LD_VAR 0 26
62101: PUSH
62102: LD_VAR 0 27
62106: PUSH
62107: LD_VAR 0 28
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: PUSH
62120: LD_VAR 0 4
62124: PUSH
62125: LD_INT 1
62127: PLUS
62128: ARRAY
62129: ST_TO_ADDR
62130: GO 62133
62132: POP
62133: GO 62688
62135: LD_INT 2
62137: DOUBLE
62138: EQUAL
62139: IFTRUE 62149
62141: LD_INT 3
62143: DOUBLE
62144: EQUAL
62145: IFTRUE 62149
62147: GO 62205
62149: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62150: LD_ADDR_VAR 0 9
62154: PUSH
62155: LD_VAR 0 29
62159: PUSH
62160: LD_VAR 0 30
62164: PUSH
62165: LD_VAR 0 31
62169: PUSH
62170: LD_VAR 0 32
62174: PUSH
62175: LD_VAR 0 33
62179: PUSH
62180: LD_VAR 0 34
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: PUSH
62193: LD_VAR 0 4
62197: PUSH
62198: LD_INT 1
62200: PLUS
62201: ARRAY
62202: ST_TO_ADDR
62203: GO 62688
62205: LD_INT 16
62207: DOUBLE
62208: EQUAL
62209: IFTRUE 62267
62211: LD_INT 17
62213: DOUBLE
62214: EQUAL
62215: IFTRUE 62267
62217: LD_INT 18
62219: DOUBLE
62220: EQUAL
62221: IFTRUE 62267
62223: LD_INT 19
62225: DOUBLE
62226: EQUAL
62227: IFTRUE 62267
62229: LD_INT 22
62231: DOUBLE
62232: EQUAL
62233: IFTRUE 62267
62235: LD_INT 20
62237: DOUBLE
62238: EQUAL
62239: IFTRUE 62267
62241: LD_INT 21
62243: DOUBLE
62244: EQUAL
62245: IFTRUE 62267
62247: LD_INT 23
62249: DOUBLE
62250: EQUAL
62251: IFTRUE 62267
62253: LD_INT 24
62255: DOUBLE
62256: EQUAL
62257: IFTRUE 62267
62259: LD_INT 25
62261: DOUBLE
62262: EQUAL
62263: IFTRUE 62267
62265: GO 62323
62267: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62268: LD_ADDR_VAR 0 9
62272: PUSH
62273: LD_VAR 0 35
62277: PUSH
62278: LD_VAR 0 36
62282: PUSH
62283: LD_VAR 0 37
62287: PUSH
62288: LD_VAR 0 38
62292: PUSH
62293: LD_VAR 0 39
62297: PUSH
62298: LD_VAR 0 40
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: PUSH
62311: LD_VAR 0 4
62315: PUSH
62316: LD_INT 1
62318: PLUS
62319: ARRAY
62320: ST_TO_ADDR
62321: GO 62688
62323: LD_INT 6
62325: DOUBLE
62326: EQUAL
62327: IFTRUE 62379
62329: LD_INT 7
62331: DOUBLE
62332: EQUAL
62333: IFTRUE 62379
62335: LD_INT 8
62337: DOUBLE
62338: EQUAL
62339: IFTRUE 62379
62341: LD_INT 13
62343: DOUBLE
62344: EQUAL
62345: IFTRUE 62379
62347: LD_INT 12
62349: DOUBLE
62350: EQUAL
62351: IFTRUE 62379
62353: LD_INT 15
62355: DOUBLE
62356: EQUAL
62357: IFTRUE 62379
62359: LD_INT 11
62361: DOUBLE
62362: EQUAL
62363: IFTRUE 62379
62365: LD_INT 14
62367: DOUBLE
62368: EQUAL
62369: IFTRUE 62379
62371: LD_INT 10
62373: DOUBLE
62374: EQUAL
62375: IFTRUE 62379
62377: GO 62435
62379: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62380: LD_ADDR_VAR 0 9
62384: PUSH
62385: LD_VAR 0 41
62389: PUSH
62390: LD_VAR 0 42
62394: PUSH
62395: LD_VAR 0 43
62399: PUSH
62400: LD_VAR 0 44
62404: PUSH
62405: LD_VAR 0 45
62409: PUSH
62410: LD_VAR 0 46
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: PUSH
62423: LD_VAR 0 4
62427: PUSH
62428: LD_INT 1
62430: PLUS
62431: ARRAY
62432: ST_TO_ADDR
62433: GO 62688
62435: LD_INT 36
62437: DOUBLE
62438: EQUAL
62439: IFTRUE 62443
62441: GO 62499
62443: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62444: LD_ADDR_VAR 0 9
62448: PUSH
62449: LD_VAR 0 47
62453: PUSH
62454: LD_VAR 0 48
62458: PUSH
62459: LD_VAR 0 49
62463: PUSH
62464: LD_VAR 0 50
62468: PUSH
62469: LD_VAR 0 51
62473: PUSH
62474: LD_VAR 0 52
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: PUSH
62487: LD_VAR 0 4
62491: PUSH
62492: LD_INT 1
62494: PLUS
62495: ARRAY
62496: ST_TO_ADDR
62497: GO 62688
62499: LD_INT 4
62501: DOUBLE
62502: EQUAL
62503: IFTRUE 62525
62505: LD_INT 5
62507: DOUBLE
62508: EQUAL
62509: IFTRUE 62525
62511: LD_INT 34
62513: DOUBLE
62514: EQUAL
62515: IFTRUE 62525
62517: LD_INT 37
62519: DOUBLE
62520: EQUAL
62521: IFTRUE 62525
62523: GO 62581
62525: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62526: LD_ADDR_VAR 0 9
62530: PUSH
62531: LD_VAR 0 53
62535: PUSH
62536: LD_VAR 0 54
62540: PUSH
62541: LD_VAR 0 55
62545: PUSH
62546: LD_VAR 0 56
62550: PUSH
62551: LD_VAR 0 57
62555: PUSH
62556: LD_VAR 0 58
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: PUSH
62569: LD_VAR 0 4
62573: PUSH
62574: LD_INT 1
62576: PLUS
62577: ARRAY
62578: ST_TO_ADDR
62579: GO 62688
62581: LD_INT 31
62583: DOUBLE
62584: EQUAL
62585: IFTRUE 62631
62587: LD_INT 32
62589: DOUBLE
62590: EQUAL
62591: IFTRUE 62631
62593: LD_INT 33
62595: DOUBLE
62596: EQUAL
62597: IFTRUE 62631
62599: LD_INT 27
62601: DOUBLE
62602: EQUAL
62603: IFTRUE 62631
62605: LD_INT 26
62607: DOUBLE
62608: EQUAL
62609: IFTRUE 62631
62611: LD_INT 28
62613: DOUBLE
62614: EQUAL
62615: IFTRUE 62631
62617: LD_INT 29
62619: DOUBLE
62620: EQUAL
62621: IFTRUE 62631
62623: LD_INT 30
62625: DOUBLE
62626: EQUAL
62627: IFTRUE 62631
62629: GO 62687
62631: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62632: LD_ADDR_VAR 0 9
62636: PUSH
62637: LD_VAR 0 59
62641: PUSH
62642: LD_VAR 0 60
62646: PUSH
62647: LD_VAR 0 61
62651: PUSH
62652: LD_VAR 0 62
62656: PUSH
62657: LD_VAR 0 63
62661: PUSH
62662: LD_VAR 0 64
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: PUSH
62675: LD_VAR 0 4
62679: PUSH
62680: LD_INT 1
62682: PLUS
62683: ARRAY
62684: ST_TO_ADDR
62685: GO 62688
62687: POP
// temp_list2 = [ ] ;
62688: LD_ADDR_VAR 0 10
62692: PUSH
62693: EMPTY
62694: ST_TO_ADDR
// for i in temp_list do
62695: LD_ADDR_VAR 0 8
62699: PUSH
62700: LD_VAR 0 9
62704: PUSH
62705: FOR_IN
62706: IFFALSE 62758
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62708: LD_ADDR_VAR 0 10
62712: PUSH
62713: LD_VAR 0 10
62717: PUSH
62718: LD_VAR 0 8
62722: PUSH
62723: LD_INT 1
62725: ARRAY
62726: PUSH
62727: LD_VAR 0 2
62731: PLUS
62732: PUSH
62733: LD_VAR 0 8
62737: PUSH
62738: LD_INT 2
62740: ARRAY
62741: PUSH
62742: LD_VAR 0 3
62746: PLUS
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: EMPTY
62753: LIST
62754: ADD
62755: ST_TO_ADDR
62756: GO 62705
62758: POP
62759: POP
// result = temp_list2 ;
62760: LD_ADDR_VAR 0 7
62764: PUSH
62765: LD_VAR 0 10
62769: ST_TO_ADDR
// end ;
62770: LD_VAR 0 7
62774: RET
// export function EnemyInRange ( unit , dist ) ; begin
62775: LD_INT 0
62777: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62778: LD_ADDR_VAR 0 3
62782: PUSH
62783: LD_VAR 0 1
62787: PPUSH
62788: CALL_OW 255
62792: PPUSH
62793: LD_VAR 0 1
62797: PPUSH
62798: CALL_OW 250
62802: PPUSH
62803: LD_VAR 0 1
62807: PPUSH
62808: CALL_OW 251
62812: PPUSH
62813: LD_VAR 0 2
62817: PPUSH
62818: CALL 36171 0 4
62822: PUSH
62823: LD_INT 4
62825: ARRAY
62826: ST_TO_ADDR
// end ;
62827: LD_VAR 0 3
62831: RET
// export function PlayerSeeMe ( unit ) ; begin
62832: LD_INT 0
62834: PPUSH
// result := See ( your_side , unit ) ;
62835: LD_ADDR_VAR 0 2
62839: PUSH
62840: LD_OWVAR 2
62844: PPUSH
62845: LD_VAR 0 1
62849: PPUSH
62850: CALL_OW 292
62854: ST_TO_ADDR
// end ;
62855: LD_VAR 0 2
62859: RET
// export function ReverseDir ( unit ) ; begin
62860: LD_INT 0
62862: PPUSH
// if not unit then
62863: LD_VAR 0 1
62867: NOT
62868: IFFALSE 62872
// exit ;
62870: GO 62895
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62872: LD_ADDR_VAR 0 2
62876: PUSH
62877: LD_VAR 0 1
62881: PPUSH
62882: CALL_OW 254
62886: PUSH
62887: LD_INT 3
62889: PLUS
62890: PUSH
62891: LD_INT 6
62893: MOD
62894: ST_TO_ADDR
// end ;
62895: LD_VAR 0 2
62899: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62900: LD_INT 0
62902: PPUSH
62903: PPUSH
62904: PPUSH
62905: PPUSH
62906: PPUSH
// if not hexes then
62907: LD_VAR 0 2
62911: NOT
62912: IFFALSE 62916
// exit ;
62914: GO 63064
// dist := 9999 ;
62916: LD_ADDR_VAR 0 5
62920: PUSH
62921: LD_INT 9999
62923: ST_TO_ADDR
// for i = 1 to hexes do
62924: LD_ADDR_VAR 0 4
62928: PUSH
62929: DOUBLE
62930: LD_INT 1
62932: DEC
62933: ST_TO_ADDR
62934: LD_VAR 0 2
62938: PUSH
62939: FOR_TO
62940: IFFALSE 63052
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62942: LD_VAR 0 1
62946: PPUSH
62947: LD_VAR 0 2
62951: PUSH
62952: LD_VAR 0 4
62956: ARRAY
62957: PUSH
62958: LD_INT 1
62960: ARRAY
62961: PPUSH
62962: LD_VAR 0 2
62966: PUSH
62967: LD_VAR 0 4
62971: ARRAY
62972: PUSH
62973: LD_INT 2
62975: ARRAY
62976: PPUSH
62977: CALL_OW 297
62981: PUSH
62982: LD_VAR 0 5
62986: LESS
62987: IFFALSE 63050
// begin hex := hexes [ i ] ;
62989: LD_ADDR_VAR 0 7
62993: PUSH
62994: LD_VAR 0 2
62998: PUSH
62999: LD_VAR 0 4
63003: ARRAY
63004: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63005: LD_ADDR_VAR 0 5
63009: PUSH
63010: LD_VAR 0 1
63014: PPUSH
63015: LD_VAR 0 2
63019: PUSH
63020: LD_VAR 0 4
63024: ARRAY
63025: PUSH
63026: LD_INT 1
63028: ARRAY
63029: PPUSH
63030: LD_VAR 0 2
63034: PUSH
63035: LD_VAR 0 4
63039: ARRAY
63040: PUSH
63041: LD_INT 2
63043: ARRAY
63044: PPUSH
63045: CALL_OW 297
63049: ST_TO_ADDR
// end ; end ;
63050: GO 62939
63052: POP
63053: POP
// result := hex ;
63054: LD_ADDR_VAR 0 3
63058: PUSH
63059: LD_VAR 0 7
63063: ST_TO_ADDR
// end ;
63064: LD_VAR 0 3
63068: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63069: LD_INT 0
63071: PPUSH
63072: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63073: LD_VAR 0 1
63077: NOT
63078: PUSH
63079: LD_VAR 0 1
63083: PUSH
63084: LD_INT 21
63086: PUSH
63087: LD_INT 2
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 23
63096: PUSH
63097: LD_INT 2
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PPUSH
63108: CALL_OW 69
63112: IN
63113: NOT
63114: OR
63115: IFFALSE 63119
// exit ;
63117: GO 63166
// for i = 1 to 3 do
63119: LD_ADDR_VAR 0 3
63123: PUSH
63124: DOUBLE
63125: LD_INT 1
63127: DEC
63128: ST_TO_ADDR
63129: LD_INT 3
63131: PUSH
63132: FOR_TO
63133: IFFALSE 63164
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63135: LD_VAR 0 1
63139: PPUSH
63140: CALL_OW 250
63144: PPUSH
63145: LD_VAR 0 1
63149: PPUSH
63150: CALL_OW 251
63154: PPUSH
63155: LD_INT 1
63157: PPUSH
63158: CALL_OW 453
63162: GO 63132
63164: POP
63165: POP
// end ;
63166: LD_VAR 0 2
63170: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63171: LD_INT 0
63173: PPUSH
63174: PPUSH
63175: PPUSH
63176: PPUSH
63177: PPUSH
63178: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63179: LD_VAR 0 1
63183: NOT
63184: PUSH
63185: LD_VAR 0 2
63189: NOT
63190: OR
63191: PUSH
63192: LD_VAR 0 1
63196: PPUSH
63197: CALL_OW 314
63201: OR
63202: IFFALSE 63206
// exit ;
63204: GO 63647
// x := GetX ( enemy_unit ) ;
63206: LD_ADDR_VAR 0 7
63210: PUSH
63211: LD_VAR 0 2
63215: PPUSH
63216: CALL_OW 250
63220: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63221: LD_ADDR_VAR 0 8
63225: PUSH
63226: LD_VAR 0 2
63230: PPUSH
63231: CALL_OW 251
63235: ST_TO_ADDR
// if not x or not y then
63236: LD_VAR 0 7
63240: NOT
63241: PUSH
63242: LD_VAR 0 8
63246: NOT
63247: OR
63248: IFFALSE 63252
// exit ;
63250: GO 63647
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63252: LD_ADDR_VAR 0 6
63256: PUSH
63257: LD_VAR 0 7
63261: PPUSH
63262: LD_INT 0
63264: PPUSH
63265: LD_INT 4
63267: PPUSH
63268: CALL_OW 272
63272: PUSH
63273: LD_VAR 0 8
63277: PPUSH
63278: LD_INT 0
63280: PPUSH
63281: LD_INT 4
63283: PPUSH
63284: CALL_OW 273
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_VAR 0 7
63297: PPUSH
63298: LD_INT 1
63300: PPUSH
63301: LD_INT 4
63303: PPUSH
63304: CALL_OW 272
63308: PUSH
63309: LD_VAR 0 8
63313: PPUSH
63314: LD_INT 1
63316: PPUSH
63317: LD_INT 4
63319: PPUSH
63320: CALL_OW 273
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_VAR 0 7
63333: PPUSH
63334: LD_INT 2
63336: PPUSH
63337: LD_INT 4
63339: PPUSH
63340: CALL_OW 272
63344: PUSH
63345: LD_VAR 0 8
63349: PPUSH
63350: LD_INT 2
63352: PPUSH
63353: LD_INT 4
63355: PPUSH
63356: CALL_OW 273
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_VAR 0 7
63369: PPUSH
63370: LD_INT 3
63372: PPUSH
63373: LD_INT 4
63375: PPUSH
63376: CALL_OW 272
63380: PUSH
63381: LD_VAR 0 8
63385: PPUSH
63386: LD_INT 3
63388: PPUSH
63389: LD_INT 4
63391: PPUSH
63392: CALL_OW 273
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_VAR 0 7
63405: PPUSH
63406: LD_INT 4
63408: PPUSH
63409: LD_INT 4
63411: PPUSH
63412: CALL_OW 272
63416: PUSH
63417: LD_VAR 0 8
63421: PPUSH
63422: LD_INT 4
63424: PPUSH
63425: LD_INT 4
63427: PPUSH
63428: CALL_OW 273
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_VAR 0 7
63441: PPUSH
63442: LD_INT 5
63444: PPUSH
63445: LD_INT 4
63447: PPUSH
63448: CALL_OW 272
63452: PUSH
63453: LD_VAR 0 8
63457: PPUSH
63458: LD_INT 5
63460: PPUSH
63461: LD_INT 4
63463: PPUSH
63464: CALL_OW 273
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: ST_TO_ADDR
// for i = tmp downto 1 do
63481: LD_ADDR_VAR 0 4
63485: PUSH
63486: DOUBLE
63487: LD_VAR 0 6
63491: INC
63492: ST_TO_ADDR
63493: LD_INT 1
63495: PUSH
63496: FOR_DOWNTO
63497: IFFALSE 63598
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63499: LD_VAR 0 6
63503: PUSH
63504: LD_VAR 0 4
63508: ARRAY
63509: PUSH
63510: LD_INT 1
63512: ARRAY
63513: PPUSH
63514: LD_VAR 0 6
63518: PUSH
63519: LD_VAR 0 4
63523: ARRAY
63524: PUSH
63525: LD_INT 2
63527: ARRAY
63528: PPUSH
63529: CALL_OW 488
63533: NOT
63534: PUSH
63535: LD_VAR 0 6
63539: PUSH
63540: LD_VAR 0 4
63544: ARRAY
63545: PUSH
63546: LD_INT 1
63548: ARRAY
63549: PPUSH
63550: LD_VAR 0 6
63554: PUSH
63555: LD_VAR 0 4
63559: ARRAY
63560: PUSH
63561: LD_INT 2
63563: ARRAY
63564: PPUSH
63565: CALL_OW 428
63569: PUSH
63570: LD_INT 0
63572: NONEQUAL
63573: OR
63574: IFFALSE 63596
// tmp := Delete ( tmp , i ) ;
63576: LD_ADDR_VAR 0 6
63580: PUSH
63581: LD_VAR 0 6
63585: PPUSH
63586: LD_VAR 0 4
63590: PPUSH
63591: CALL_OW 3
63595: ST_TO_ADDR
63596: GO 63496
63598: POP
63599: POP
// j := GetClosestHex ( unit , tmp ) ;
63600: LD_ADDR_VAR 0 5
63604: PUSH
63605: LD_VAR 0 1
63609: PPUSH
63610: LD_VAR 0 6
63614: PPUSH
63615: CALL 62900 0 2
63619: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63620: LD_VAR 0 1
63624: PPUSH
63625: LD_VAR 0 5
63629: PUSH
63630: LD_INT 1
63632: ARRAY
63633: PPUSH
63634: LD_VAR 0 5
63638: PUSH
63639: LD_INT 2
63641: ARRAY
63642: PPUSH
63643: CALL_OW 111
// end ;
63647: LD_VAR 0 3
63651: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63652: LD_INT 0
63654: PPUSH
63655: PPUSH
63656: PPUSH
// uc_side = 0 ;
63657: LD_ADDR_OWVAR 20
63661: PUSH
63662: LD_INT 0
63664: ST_TO_ADDR
// uc_nation = 0 ;
63665: LD_ADDR_OWVAR 21
63669: PUSH
63670: LD_INT 0
63672: ST_TO_ADDR
// InitHc_All ( ) ;
63673: CALL_OW 584
// InitVc ;
63677: CALL_OW 20
// if mastodonts then
63681: LD_VAR 0 6
63685: IFFALSE 63752
// for i = 1 to mastodonts do
63687: LD_ADDR_VAR 0 11
63691: PUSH
63692: DOUBLE
63693: LD_INT 1
63695: DEC
63696: ST_TO_ADDR
63697: LD_VAR 0 6
63701: PUSH
63702: FOR_TO
63703: IFFALSE 63750
// begin vc_chassis := 31 ;
63705: LD_ADDR_OWVAR 37
63709: PUSH
63710: LD_INT 31
63712: ST_TO_ADDR
// vc_control := control_rider ;
63713: LD_ADDR_OWVAR 38
63717: PUSH
63718: LD_INT 4
63720: ST_TO_ADDR
// animal := CreateVehicle ;
63721: LD_ADDR_VAR 0 12
63725: PUSH
63726: CALL_OW 45
63730: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63731: LD_VAR 0 12
63735: PPUSH
63736: LD_VAR 0 8
63740: PPUSH
63741: LD_INT 0
63743: PPUSH
63744: CALL 65887 0 3
// end ;
63748: GO 63702
63750: POP
63751: POP
// if horses then
63752: LD_VAR 0 5
63756: IFFALSE 63823
// for i = 1 to horses do
63758: LD_ADDR_VAR 0 11
63762: PUSH
63763: DOUBLE
63764: LD_INT 1
63766: DEC
63767: ST_TO_ADDR
63768: LD_VAR 0 5
63772: PUSH
63773: FOR_TO
63774: IFFALSE 63821
// begin hc_class := 21 ;
63776: LD_ADDR_OWVAR 28
63780: PUSH
63781: LD_INT 21
63783: ST_TO_ADDR
// hc_gallery :=  ;
63784: LD_ADDR_OWVAR 33
63788: PUSH
63789: LD_STRING 
63791: ST_TO_ADDR
// animal := CreateHuman ;
63792: LD_ADDR_VAR 0 12
63796: PUSH
63797: CALL_OW 44
63801: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63802: LD_VAR 0 12
63806: PPUSH
63807: LD_VAR 0 8
63811: PPUSH
63812: LD_INT 0
63814: PPUSH
63815: CALL 65887 0 3
// end ;
63819: GO 63773
63821: POP
63822: POP
// if birds then
63823: LD_VAR 0 1
63827: IFFALSE 63894
// for i = 1 to birds do
63829: LD_ADDR_VAR 0 11
63833: PUSH
63834: DOUBLE
63835: LD_INT 1
63837: DEC
63838: ST_TO_ADDR
63839: LD_VAR 0 1
63843: PUSH
63844: FOR_TO
63845: IFFALSE 63892
// begin hc_class = 18 ;
63847: LD_ADDR_OWVAR 28
63851: PUSH
63852: LD_INT 18
63854: ST_TO_ADDR
// hc_gallery =  ;
63855: LD_ADDR_OWVAR 33
63859: PUSH
63860: LD_STRING 
63862: ST_TO_ADDR
// animal := CreateHuman ;
63863: LD_ADDR_VAR 0 12
63867: PUSH
63868: CALL_OW 44
63872: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63873: LD_VAR 0 12
63877: PPUSH
63878: LD_VAR 0 8
63882: PPUSH
63883: LD_INT 0
63885: PPUSH
63886: CALL 65887 0 3
// end ;
63890: GO 63844
63892: POP
63893: POP
// if tigers then
63894: LD_VAR 0 2
63898: IFFALSE 63982
// for i = 1 to tigers do
63900: LD_ADDR_VAR 0 11
63904: PUSH
63905: DOUBLE
63906: LD_INT 1
63908: DEC
63909: ST_TO_ADDR
63910: LD_VAR 0 2
63914: PUSH
63915: FOR_TO
63916: IFFALSE 63980
// begin hc_class = class_tiger ;
63918: LD_ADDR_OWVAR 28
63922: PUSH
63923: LD_INT 14
63925: ST_TO_ADDR
// hc_gallery =  ;
63926: LD_ADDR_OWVAR 33
63930: PUSH
63931: LD_STRING 
63933: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63934: LD_ADDR_OWVAR 35
63938: PUSH
63939: LD_INT 7
63941: NEG
63942: PPUSH
63943: LD_INT 7
63945: PPUSH
63946: CALL_OW 12
63950: ST_TO_ADDR
// animal := CreateHuman ;
63951: LD_ADDR_VAR 0 12
63955: PUSH
63956: CALL_OW 44
63960: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63961: LD_VAR 0 12
63965: PPUSH
63966: LD_VAR 0 8
63970: PPUSH
63971: LD_INT 0
63973: PPUSH
63974: CALL 65887 0 3
// end ;
63978: GO 63915
63980: POP
63981: POP
// if apemans then
63982: LD_VAR 0 3
63986: IFFALSE 64109
// for i = 1 to apemans do
63988: LD_ADDR_VAR 0 11
63992: PUSH
63993: DOUBLE
63994: LD_INT 1
63996: DEC
63997: ST_TO_ADDR
63998: LD_VAR 0 3
64002: PUSH
64003: FOR_TO
64004: IFFALSE 64107
// begin hc_class = class_apeman ;
64006: LD_ADDR_OWVAR 28
64010: PUSH
64011: LD_INT 12
64013: ST_TO_ADDR
// hc_gallery =  ;
64014: LD_ADDR_OWVAR 33
64018: PUSH
64019: LD_STRING 
64021: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64022: LD_ADDR_OWVAR 35
64026: PUSH
64027: LD_INT 2
64029: NEG
64030: PPUSH
64031: LD_INT 2
64033: PPUSH
64034: CALL_OW 12
64038: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64039: LD_ADDR_OWVAR 31
64043: PUSH
64044: LD_INT 1
64046: PPUSH
64047: LD_INT 3
64049: PPUSH
64050: CALL_OW 12
64054: PUSH
64055: LD_INT 1
64057: PPUSH
64058: LD_INT 3
64060: PPUSH
64061: CALL_OW 12
64065: PUSH
64066: LD_INT 0
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: ST_TO_ADDR
// animal := CreateHuman ;
64078: LD_ADDR_VAR 0 12
64082: PUSH
64083: CALL_OW 44
64087: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64088: LD_VAR 0 12
64092: PPUSH
64093: LD_VAR 0 8
64097: PPUSH
64098: LD_INT 0
64100: PPUSH
64101: CALL 65887 0 3
// end ;
64105: GO 64003
64107: POP
64108: POP
// if enchidnas then
64109: LD_VAR 0 4
64113: IFFALSE 64180
// for i = 1 to enchidnas do
64115: LD_ADDR_VAR 0 11
64119: PUSH
64120: DOUBLE
64121: LD_INT 1
64123: DEC
64124: ST_TO_ADDR
64125: LD_VAR 0 4
64129: PUSH
64130: FOR_TO
64131: IFFALSE 64178
// begin hc_class = 13 ;
64133: LD_ADDR_OWVAR 28
64137: PUSH
64138: LD_INT 13
64140: ST_TO_ADDR
// hc_gallery =  ;
64141: LD_ADDR_OWVAR 33
64145: PUSH
64146: LD_STRING 
64148: ST_TO_ADDR
// animal := CreateHuman ;
64149: LD_ADDR_VAR 0 12
64153: PUSH
64154: CALL_OW 44
64158: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64159: LD_VAR 0 12
64163: PPUSH
64164: LD_VAR 0 8
64168: PPUSH
64169: LD_INT 0
64171: PPUSH
64172: CALL 65887 0 3
// end ;
64176: GO 64130
64178: POP
64179: POP
// if fishes then
64180: LD_VAR 0 7
64184: IFFALSE 64251
// for i = 1 to fishes do
64186: LD_ADDR_VAR 0 11
64190: PUSH
64191: DOUBLE
64192: LD_INT 1
64194: DEC
64195: ST_TO_ADDR
64196: LD_VAR 0 7
64200: PUSH
64201: FOR_TO
64202: IFFALSE 64249
// begin hc_class = 20 ;
64204: LD_ADDR_OWVAR 28
64208: PUSH
64209: LD_INT 20
64211: ST_TO_ADDR
// hc_gallery =  ;
64212: LD_ADDR_OWVAR 33
64216: PUSH
64217: LD_STRING 
64219: ST_TO_ADDR
// animal := CreateHuman ;
64220: LD_ADDR_VAR 0 12
64224: PUSH
64225: CALL_OW 44
64229: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64230: LD_VAR 0 12
64234: PPUSH
64235: LD_VAR 0 9
64239: PPUSH
64240: LD_INT 0
64242: PPUSH
64243: CALL 65887 0 3
// end ;
64247: GO 64201
64249: POP
64250: POP
// end ;
64251: LD_VAR 0 10
64255: RET
// export function WantHeal ( sci , unit ) ; begin
64256: LD_INT 0
64258: PPUSH
// if GetTaskList ( sci ) > 0 then
64259: LD_VAR 0 1
64263: PPUSH
64264: CALL_OW 437
64268: PUSH
64269: LD_INT 0
64271: GREATER
64272: IFFALSE 64342
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64274: LD_VAR 0 1
64278: PPUSH
64279: CALL_OW 437
64283: PUSH
64284: LD_INT 1
64286: ARRAY
64287: PUSH
64288: LD_INT 1
64290: ARRAY
64291: PUSH
64292: LD_STRING l
64294: EQUAL
64295: PUSH
64296: LD_VAR 0 1
64300: PPUSH
64301: CALL_OW 437
64305: PUSH
64306: LD_INT 1
64308: ARRAY
64309: PUSH
64310: LD_INT 4
64312: ARRAY
64313: PUSH
64314: LD_VAR 0 2
64318: EQUAL
64319: AND
64320: IFFALSE 64332
// result := true else
64322: LD_ADDR_VAR 0 3
64326: PUSH
64327: LD_INT 1
64329: ST_TO_ADDR
64330: GO 64340
// result := false ;
64332: LD_ADDR_VAR 0 3
64336: PUSH
64337: LD_INT 0
64339: ST_TO_ADDR
// end else
64340: GO 64350
// result := false ;
64342: LD_ADDR_VAR 0 3
64346: PUSH
64347: LD_INT 0
64349: ST_TO_ADDR
// end ;
64350: LD_VAR 0 3
64354: RET
// export function HealTarget ( sci ) ; begin
64355: LD_INT 0
64357: PPUSH
// if not sci then
64358: LD_VAR 0 1
64362: NOT
64363: IFFALSE 64367
// exit ;
64365: GO 64432
// result := 0 ;
64367: LD_ADDR_VAR 0 2
64371: PUSH
64372: LD_INT 0
64374: ST_TO_ADDR
// if GetTaskList ( sci ) then
64375: LD_VAR 0 1
64379: PPUSH
64380: CALL_OW 437
64384: IFFALSE 64432
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64386: LD_VAR 0 1
64390: PPUSH
64391: CALL_OW 437
64395: PUSH
64396: LD_INT 1
64398: ARRAY
64399: PUSH
64400: LD_INT 1
64402: ARRAY
64403: PUSH
64404: LD_STRING l
64406: EQUAL
64407: IFFALSE 64432
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64409: LD_ADDR_VAR 0 2
64413: PUSH
64414: LD_VAR 0 1
64418: PPUSH
64419: CALL_OW 437
64423: PUSH
64424: LD_INT 1
64426: ARRAY
64427: PUSH
64428: LD_INT 4
64430: ARRAY
64431: ST_TO_ADDR
// end ;
64432: LD_VAR 0 2
64436: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64437: LD_INT 0
64439: PPUSH
64440: PPUSH
64441: PPUSH
64442: PPUSH
// if not base_units then
64443: LD_VAR 0 1
64447: NOT
64448: IFFALSE 64452
// exit ;
64450: GO 64539
// result := false ;
64452: LD_ADDR_VAR 0 2
64456: PUSH
64457: LD_INT 0
64459: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64460: LD_ADDR_VAR 0 5
64464: PUSH
64465: LD_VAR 0 1
64469: PPUSH
64470: LD_INT 21
64472: PUSH
64473: LD_INT 3
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PPUSH
64480: CALL_OW 72
64484: ST_TO_ADDR
// if not tmp then
64485: LD_VAR 0 5
64489: NOT
64490: IFFALSE 64494
// exit ;
64492: GO 64539
// for i in tmp do
64494: LD_ADDR_VAR 0 3
64498: PUSH
64499: LD_VAR 0 5
64503: PUSH
64504: FOR_IN
64505: IFFALSE 64537
// begin result := EnemyInRange ( i , 22 ) ;
64507: LD_ADDR_VAR 0 2
64511: PUSH
64512: LD_VAR 0 3
64516: PPUSH
64517: LD_INT 22
64519: PPUSH
64520: CALL 62775 0 2
64524: ST_TO_ADDR
// if result then
64525: LD_VAR 0 2
64529: IFFALSE 64535
// exit ;
64531: POP
64532: POP
64533: GO 64539
// end ;
64535: GO 64504
64537: POP
64538: POP
// end ;
64539: LD_VAR 0 2
64543: RET
// export function FilterByTag ( units , tag ) ; begin
64544: LD_INT 0
64546: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64547: LD_ADDR_VAR 0 3
64551: PUSH
64552: LD_VAR 0 1
64556: PPUSH
64557: LD_INT 120
64559: PUSH
64560: LD_VAR 0 2
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PPUSH
64569: CALL_OW 72
64573: ST_TO_ADDR
// end ;
64574: LD_VAR 0 3
64578: RET
// export function IsDriver ( un ) ; begin
64579: LD_INT 0
64581: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64582: LD_ADDR_VAR 0 2
64586: PUSH
64587: LD_VAR 0 1
64591: PUSH
64592: LD_INT 55
64594: PUSH
64595: EMPTY
64596: LIST
64597: PPUSH
64598: CALL_OW 69
64602: IN
64603: ST_TO_ADDR
// end ;
64604: LD_VAR 0 2
64608: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64609: LD_INT 0
64611: PPUSH
64612: PPUSH
// list := [ ] ;
64613: LD_ADDR_VAR 0 5
64617: PUSH
64618: EMPTY
64619: ST_TO_ADDR
// case d of 0 :
64620: LD_VAR 0 3
64624: PUSH
64625: LD_INT 0
64627: DOUBLE
64628: EQUAL
64629: IFTRUE 64633
64631: GO 64766
64633: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64634: LD_ADDR_VAR 0 5
64638: PUSH
64639: LD_VAR 0 1
64643: PUSH
64644: LD_INT 4
64646: MINUS
64647: PUSH
64648: LD_VAR 0 2
64652: PUSH
64653: LD_INT 4
64655: MINUS
64656: PUSH
64657: LD_INT 2
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: LIST
64664: PUSH
64665: LD_VAR 0 1
64669: PUSH
64670: LD_INT 3
64672: MINUS
64673: PUSH
64674: LD_VAR 0 2
64678: PUSH
64679: LD_INT 1
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: LIST
64686: PUSH
64687: LD_VAR 0 1
64691: PUSH
64692: LD_INT 4
64694: PLUS
64695: PUSH
64696: LD_VAR 0 2
64700: PUSH
64701: LD_INT 4
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: LIST
64708: PUSH
64709: LD_VAR 0 1
64713: PUSH
64714: LD_INT 3
64716: PLUS
64717: PUSH
64718: LD_VAR 0 2
64722: PUSH
64723: LD_INT 3
64725: PLUS
64726: PUSH
64727: LD_INT 5
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: LIST
64734: PUSH
64735: LD_VAR 0 1
64739: PUSH
64740: LD_VAR 0 2
64744: PUSH
64745: LD_INT 4
64747: PLUS
64748: PUSH
64749: LD_INT 0
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: LIST
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: ST_TO_ADDR
// end ; 1 :
64764: GO 65464
64766: LD_INT 1
64768: DOUBLE
64769: EQUAL
64770: IFTRUE 64774
64772: GO 64907
64774: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64775: LD_ADDR_VAR 0 5
64779: PUSH
64780: LD_VAR 0 1
64784: PUSH
64785: LD_VAR 0 2
64789: PUSH
64790: LD_INT 4
64792: MINUS
64793: PUSH
64794: LD_INT 3
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: LIST
64801: PUSH
64802: LD_VAR 0 1
64806: PUSH
64807: LD_INT 3
64809: MINUS
64810: PUSH
64811: LD_VAR 0 2
64815: PUSH
64816: LD_INT 3
64818: MINUS
64819: PUSH
64820: LD_INT 2
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: LIST
64827: PUSH
64828: LD_VAR 0 1
64832: PUSH
64833: LD_INT 4
64835: MINUS
64836: PUSH
64837: LD_VAR 0 2
64841: PUSH
64842: LD_INT 1
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: LIST
64849: PUSH
64850: LD_VAR 0 1
64854: PUSH
64855: LD_VAR 0 2
64859: PUSH
64860: LD_INT 3
64862: PLUS
64863: PUSH
64864: LD_INT 0
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: LIST
64871: PUSH
64872: LD_VAR 0 1
64876: PUSH
64877: LD_INT 4
64879: PLUS
64880: PUSH
64881: LD_VAR 0 2
64885: PUSH
64886: LD_INT 4
64888: PLUS
64889: PUSH
64890: LD_INT 5
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: LIST
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: ST_TO_ADDR
// end ; 2 :
64905: GO 65464
64907: LD_INT 2
64909: DOUBLE
64910: EQUAL
64911: IFTRUE 64915
64913: GO 65044
64915: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64916: LD_ADDR_VAR 0 5
64920: PUSH
64921: LD_VAR 0 1
64925: PUSH
64926: LD_VAR 0 2
64930: PUSH
64931: LD_INT 3
64933: MINUS
64934: PUSH
64935: LD_INT 3
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: LIST
64942: PUSH
64943: LD_VAR 0 1
64947: PUSH
64948: LD_INT 4
64950: PLUS
64951: PUSH
64952: LD_VAR 0 2
64956: PUSH
64957: LD_INT 4
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: LIST
64964: PUSH
64965: LD_VAR 0 1
64969: PUSH
64970: LD_VAR 0 2
64974: PUSH
64975: LD_INT 4
64977: PLUS
64978: PUSH
64979: LD_INT 0
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: LIST
64986: PUSH
64987: LD_VAR 0 1
64991: PUSH
64992: LD_INT 3
64994: MINUS
64995: PUSH
64996: LD_VAR 0 2
65000: PUSH
65001: LD_INT 1
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: LIST
65008: PUSH
65009: LD_VAR 0 1
65013: PUSH
65014: LD_INT 4
65016: MINUS
65017: PUSH
65018: LD_VAR 0 2
65022: PUSH
65023: LD_INT 4
65025: MINUS
65026: PUSH
65027: LD_INT 2
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: LIST
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: ST_TO_ADDR
// end ; 3 :
65042: GO 65464
65044: LD_INT 3
65046: DOUBLE
65047: EQUAL
65048: IFTRUE 65052
65050: GO 65185
65052: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65053: LD_ADDR_VAR 0 5
65057: PUSH
65058: LD_VAR 0 1
65062: PUSH
65063: LD_INT 3
65065: PLUS
65066: PUSH
65067: LD_VAR 0 2
65071: PUSH
65072: LD_INT 4
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: LIST
65079: PUSH
65080: LD_VAR 0 1
65084: PUSH
65085: LD_INT 4
65087: PLUS
65088: PUSH
65089: LD_VAR 0 2
65093: PUSH
65094: LD_INT 4
65096: PLUS
65097: PUSH
65098: LD_INT 5
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: LIST
65105: PUSH
65106: LD_VAR 0 1
65110: PUSH
65111: LD_INT 4
65113: MINUS
65114: PUSH
65115: LD_VAR 0 2
65119: PUSH
65120: LD_INT 1
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: LIST
65127: PUSH
65128: LD_VAR 0 1
65132: PUSH
65133: LD_VAR 0 2
65137: PUSH
65138: LD_INT 4
65140: MINUS
65141: PUSH
65142: LD_INT 3
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: LIST
65149: PUSH
65150: LD_VAR 0 1
65154: PUSH
65155: LD_INT 3
65157: MINUS
65158: PUSH
65159: LD_VAR 0 2
65163: PUSH
65164: LD_INT 3
65166: MINUS
65167: PUSH
65168: LD_INT 2
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: LIST
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: ST_TO_ADDR
// end ; 4 :
65183: GO 65464
65185: LD_INT 4
65187: DOUBLE
65188: EQUAL
65189: IFTRUE 65193
65191: GO 65326
65193: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65194: LD_ADDR_VAR 0 5
65198: PUSH
65199: LD_VAR 0 1
65203: PUSH
65204: LD_VAR 0 2
65208: PUSH
65209: LD_INT 4
65211: PLUS
65212: PUSH
65213: LD_INT 0
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: LIST
65220: PUSH
65221: LD_VAR 0 1
65225: PUSH
65226: LD_INT 3
65228: PLUS
65229: PUSH
65230: LD_VAR 0 2
65234: PUSH
65235: LD_INT 3
65237: PLUS
65238: PUSH
65239: LD_INT 5
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: LIST
65246: PUSH
65247: LD_VAR 0 1
65251: PUSH
65252: LD_INT 4
65254: PLUS
65255: PUSH
65256: LD_VAR 0 2
65260: PUSH
65261: LD_INT 4
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: LIST
65268: PUSH
65269: LD_VAR 0 1
65273: PUSH
65274: LD_VAR 0 2
65278: PUSH
65279: LD_INT 3
65281: MINUS
65282: PUSH
65283: LD_INT 3
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: LIST
65290: PUSH
65291: LD_VAR 0 1
65295: PUSH
65296: LD_INT 4
65298: MINUS
65299: PUSH
65300: LD_VAR 0 2
65304: PUSH
65305: LD_INT 4
65307: MINUS
65308: PUSH
65309: LD_INT 2
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: LIST
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: ST_TO_ADDR
// end ; 5 :
65324: GO 65464
65326: LD_INT 5
65328: DOUBLE
65329: EQUAL
65330: IFTRUE 65334
65332: GO 65463
65334: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65335: LD_ADDR_VAR 0 5
65339: PUSH
65340: LD_VAR 0 1
65344: PUSH
65345: LD_INT 4
65347: MINUS
65348: PUSH
65349: LD_VAR 0 2
65353: PUSH
65354: LD_INT 1
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: LIST
65361: PUSH
65362: LD_VAR 0 1
65366: PUSH
65367: LD_VAR 0 2
65371: PUSH
65372: LD_INT 4
65374: MINUS
65375: PUSH
65376: LD_INT 3
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: LIST
65383: PUSH
65384: LD_VAR 0 1
65388: PUSH
65389: LD_INT 4
65391: PLUS
65392: PUSH
65393: LD_VAR 0 2
65397: PUSH
65398: LD_INT 4
65400: PLUS
65401: PUSH
65402: LD_INT 5
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: LIST
65409: PUSH
65410: LD_VAR 0 1
65414: PUSH
65415: LD_INT 3
65417: PLUS
65418: PUSH
65419: LD_VAR 0 2
65423: PUSH
65424: LD_INT 4
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: LIST
65431: PUSH
65432: LD_VAR 0 1
65436: PUSH
65437: LD_VAR 0 2
65441: PUSH
65442: LD_INT 3
65444: PLUS
65445: PUSH
65446: LD_INT 0
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: LIST
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: ST_TO_ADDR
// end ; end ;
65461: GO 65464
65463: POP
// result := list ;
65464: LD_ADDR_VAR 0 4
65468: PUSH
65469: LD_VAR 0 5
65473: ST_TO_ADDR
// end ;
65474: LD_VAR 0 4
65478: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65479: LD_INT 0
65481: PPUSH
65482: PPUSH
65483: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65484: LD_VAR 0 1
65488: NOT
65489: PUSH
65490: LD_VAR 0 2
65494: PUSH
65495: LD_INT 1
65497: PUSH
65498: LD_INT 2
65500: PUSH
65501: LD_INT 3
65503: PUSH
65504: LD_INT 4
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: IN
65513: NOT
65514: OR
65515: IFFALSE 65519
// exit ;
65517: GO 65611
// tmp := [ ] ;
65519: LD_ADDR_VAR 0 5
65523: PUSH
65524: EMPTY
65525: ST_TO_ADDR
// for i in units do
65526: LD_ADDR_VAR 0 4
65530: PUSH
65531: LD_VAR 0 1
65535: PUSH
65536: FOR_IN
65537: IFFALSE 65580
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65539: LD_ADDR_VAR 0 5
65543: PUSH
65544: LD_VAR 0 5
65548: PPUSH
65549: LD_VAR 0 5
65553: PUSH
65554: LD_INT 1
65556: PLUS
65557: PPUSH
65558: LD_VAR 0 4
65562: PPUSH
65563: LD_VAR 0 2
65567: PPUSH
65568: CALL_OW 259
65572: PPUSH
65573: CALL_OW 2
65577: ST_TO_ADDR
65578: GO 65536
65580: POP
65581: POP
// if not tmp then
65582: LD_VAR 0 5
65586: NOT
65587: IFFALSE 65591
// exit ;
65589: GO 65611
// result := SortListByListDesc ( units , tmp ) ;
65591: LD_ADDR_VAR 0 3
65595: PUSH
65596: LD_VAR 0 1
65600: PPUSH
65601: LD_VAR 0 5
65605: PPUSH
65606: CALL_OW 77
65610: ST_TO_ADDR
// end ;
65611: LD_VAR 0 3
65615: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65616: LD_INT 0
65618: PPUSH
65619: PPUSH
65620: PPUSH
// result := false ;
65621: LD_ADDR_VAR 0 3
65625: PUSH
65626: LD_INT 0
65628: ST_TO_ADDR
// x := GetX ( building ) ;
65629: LD_ADDR_VAR 0 4
65633: PUSH
65634: LD_VAR 0 2
65638: PPUSH
65639: CALL_OW 250
65643: ST_TO_ADDR
// y := GetY ( building ) ;
65644: LD_ADDR_VAR 0 5
65648: PUSH
65649: LD_VAR 0 2
65653: PPUSH
65654: CALL_OW 251
65658: ST_TO_ADDR
// if not building or not x or not y then
65659: LD_VAR 0 2
65663: NOT
65664: PUSH
65665: LD_VAR 0 4
65669: NOT
65670: OR
65671: PUSH
65672: LD_VAR 0 5
65676: NOT
65677: OR
65678: IFFALSE 65682
// exit ;
65680: GO 65774
// if GetTaskList ( unit ) then
65682: LD_VAR 0 1
65686: PPUSH
65687: CALL_OW 437
65691: IFFALSE 65774
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65693: LD_STRING e
65695: PUSH
65696: LD_VAR 0 1
65700: PPUSH
65701: CALL_OW 437
65705: PUSH
65706: LD_INT 1
65708: ARRAY
65709: PUSH
65710: LD_INT 1
65712: ARRAY
65713: EQUAL
65714: PUSH
65715: LD_VAR 0 4
65719: PUSH
65720: LD_VAR 0 1
65724: PPUSH
65725: CALL_OW 437
65729: PUSH
65730: LD_INT 1
65732: ARRAY
65733: PUSH
65734: LD_INT 2
65736: ARRAY
65737: EQUAL
65738: AND
65739: PUSH
65740: LD_VAR 0 5
65744: PUSH
65745: LD_VAR 0 1
65749: PPUSH
65750: CALL_OW 437
65754: PUSH
65755: LD_INT 1
65757: ARRAY
65758: PUSH
65759: LD_INT 3
65761: ARRAY
65762: EQUAL
65763: AND
65764: IFFALSE 65774
// result := true end ;
65766: LD_ADDR_VAR 0 3
65770: PUSH
65771: LD_INT 1
65773: ST_TO_ADDR
// end ;
65774: LD_VAR 0 3
65778: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65779: LD_INT 0
65781: PPUSH
// result := false ;
65782: LD_ADDR_VAR 0 4
65786: PUSH
65787: LD_INT 0
65789: ST_TO_ADDR
// if GetTaskList ( unit ) then
65790: LD_VAR 0 1
65794: PPUSH
65795: CALL_OW 437
65799: IFFALSE 65882
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65801: LD_STRING M
65803: PUSH
65804: LD_VAR 0 1
65808: PPUSH
65809: CALL_OW 437
65813: PUSH
65814: LD_INT 1
65816: ARRAY
65817: PUSH
65818: LD_INT 1
65820: ARRAY
65821: EQUAL
65822: PUSH
65823: LD_VAR 0 2
65827: PUSH
65828: LD_VAR 0 1
65832: PPUSH
65833: CALL_OW 437
65837: PUSH
65838: LD_INT 1
65840: ARRAY
65841: PUSH
65842: LD_INT 2
65844: ARRAY
65845: EQUAL
65846: AND
65847: PUSH
65848: LD_VAR 0 3
65852: PUSH
65853: LD_VAR 0 1
65857: PPUSH
65858: CALL_OW 437
65862: PUSH
65863: LD_INT 1
65865: ARRAY
65866: PUSH
65867: LD_INT 3
65869: ARRAY
65870: EQUAL
65871: AND
65872: IFFALSE 65882
// result := true ;
65874: LD_ADDR_VAR 0 4
65878: PUSH
65879: LD_INT 1
65881: ST_TO_ADDR
// end ; end ;
65882: LD_VAR 0 4
65886: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65887: LD_INT 0
65889: PPUSH
65890: PPUSH
65891: PPUSH
65892: PPUSH
// if not unit or not area then
65893: LD_VAR 0 1
65897: NOT
65898: PUSH
65899: LD_VAR 0 2
65903: NOT
65904: OR
65905: IFFALSE 65909
// exit ;
65907: GO 66073
// tmp := AreaToList ( area , i ) ;
65909: LD_ADDR_VAR 0 6
65913: PUSH
65914: LD_VAR 0 2
65918: PPUSH
65919: LD_VAR 0 5
65923: PPUSH
65924: CALL_OW 517
65928: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65929: LD_ADDR_VAR 0 5
65933: PUSH
65934: DOUBLE
65935: LD_INT 1
65937: DEC
65938: ST_TO_ADDR
65939: LD_VAR 0 6
65943: PUSH
65944: LD_INT 1
65946: ARRAY
65947: PUSH
65948: FOR_TO
65949: IFFALSE 66071
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65951: LD_ADDR_VAR 0 7
65955: PUSH
65956: LD_VAR 0 6
65960: PUSH
65961: LD_INT 1
65963: ARRAY
65964: PUSH
65965: LD_VAR 0 5
65969: ARRAY
65970: PUSH
65971: LD_VAR 0 6
65975: PUSH
65976: LD_INT 2
65978: ARRAY
65979: PUSH
65980: LD_VAR 0 5
65984: ARRAY
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65990: LD_VAR 0 7
65994: PUSH
65995: LD_INT 1
65997: ARRAY
65998: PPUSH
65999: LD_VAR 0 7
66003: PUSH
66004: LD_INT 2
66006: ARRAY
66007: PPUSH
66008: CALL_OW 428
66012: PUSH
66013: LD_INT 0
66015: EQUAL
66016: IFFALSE 66069
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66018: LD_VAR 0 1
66022: PPUSH
66023: LD_VAR 0 7
66027: PUSH
66028: LD_INT 1
66030: ARRAY
66031: PPUSH
66032: LD_VAR 0 7
66036: PUSH
66037: LD_INT 2
66039: ARRAY
66040: PPUSH
66041: LD_VAR 0 3
66045: PPUSH
66046: CALL_OW 48
// result := IsPlaced ( unit ) ;
66050: LD_ADDR_VAR 0 4
66054: PUSH
66055: LD_VAR 0 1
66059: PPUSH
66060: CALL_OW 305
66064: ST_TO_ADDR
// exit ;
66065: POP
66066: POP
66067: GO 66073
// end ; end ;
66069: GO 65948
66071: POP
66072: POP
// end ;
66073: LD_VAR 0 4
66077: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66078: LD_INT 0
66080: PPUSH
66081: PPUSH
66082: PPUSH
// if not side or side > 8 then
66083: LD_VAR 0 1
66087: NOT
66088: PUSH
66089: LD_VAR 0 1
66093: PUSH
66094: LD_INT 8
66096: GREATER
66097: OR
66098: IFFALSE 66102
// exit ;
66100: GO 66289
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66102: LD_ADDR_VAR 0 4
66106: PUSH
66107: LD_INT 22
66109: PUSH
66110: LD_VAR 0 1
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 21
66121: PUSH
66122: LD_INT 3
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PPUSH
66133: CALL_OW 69
66137: ST_TO_ADDR
// if not tmp then
66138: LD_VAR 0 4
66142: NOT
66143: IFFALSE 66147
// exit ;
66145: GO 66289
// enable_addtolog := true ;
66147: LD_ADDR_OWVAR 81
66151: PUSH
66152: LD_INT 1
66154: ST_TO_ADDR
// AddToLog ( [ ) ;
66155: LD_STRING [
66157: PPUSH
66158: CALL_OW 561
// for i in tmp do
66162: LD_ADDR_VAR 0 3
66166: PUSH
66167: LD_VAR 0 4
66171: PUSH
66172: FOR_IN
66173: IFFALSE 66280
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66175: LD_STRING [
66177: PUSH
66178: LD_VAR 0 3
66182: PPUSH
66183: CALL_OW 266
66187: STR
66188: PUSH
66189: LD_STRING , 
66191: STR
66192: PUSH
66193: LD_VAR 0 3
66197: PPUSH
66198: CALL_OW 250
66202: STR
66203: PUSH
66204: LD_STRING , 
66206: STR
66207: PUSH
66208: LD_VAR 0 3
66212: PPUSH
66213: CALL_OW 251
66217: STR
66218: PUSH
66219: LD_STRING , 
66221: STR
66222: PUSH
66223: LD_VAR 0 3
66227: PPUSH
66228: CALL_OW 254
66232: STR
66233: PUSH
66234: LD_STRING , 
66236: STR
66237: PUSH
66238: LD_VAR 0 3
66242: PPUSH
66243: LD_INT 1
66245: PPUSH
66246: CALL_OW 268
66250: STR
66251: PUSH
66252: LD_STRING , 
66254: STR
66255: PUSH
66256: LD_VAR 0 3
66260: PPUSH
66261: LD_INT 2
66263: PPUSH
66264: CALL_OW 268
66268: STR
66269: PUSH
66270: LD_STRING ],
66272: STR
66273: PPUSH
66274: CALL_OW 561
// end ;
66278: GO 66172
66280: POP
66281: POP
// AddToLog ( ]; ) ;
66282: LD_STRING ];
66284: PPUSH
66285: CALL_OW 561
// end ;
66289: LD_VAR 0 2
66293: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66294: LD_INT 0
66296: PPUSH
66297: PPUSH
66298: PPUSH
66299: PPUSH
66300: PPUSH
// if not area or not rate or not max then
66301: LD_VAR 0 1
66305: NOT
66306: PUSH
66307: LD_VAR 0 2
66311: NOT
66312: OR
66313: PUSH
66314: LD_VAR 0 4
66318: NOT
66319: OR
66320: IFFALSE 66324
// exit ;
66322: GO 66513
// while 1 do
66324: LD_INT 1
66326: IFFALSE 66513
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66328: LD_ADDR_VAR 0 9
66332: PUSH
66333: LD_VAR 0 1
66337: PPUSH
66338: LD_INT 1
66340: PPUSH
66341: CALL_OW 287
66345: PUSH
66346: LD_INT 10
66348: MUL
66349: ST_TO_ADDR
// r := rate / 10 ;
66350: LD_ADDR_VAR 0 7
66354: PUSH
66355: LD_VAR 0 2
66359: PUSH
66360: LD_INT 10
66362: DIVREAL
66363: ST_TO_ADDR
// time := 1 1$00 ;
66364: LD_ADDR_VAR 0 8
66368: PUSH
66369: LD_INT 2100
66371: ST_TO_ADDR
// if amount < min then
66372: LD_VAR 0 9
66376: PUSH
66377: LD_VAR 0 3
66381: LESS
66382: IFFALSE 66400
// r := r * 2 else
66384: LD_ADDR_VAR 0 7
66388: PUSH
66389: LD_VAR 0 7
66393: PUSH
66394: LD_INT 2
66396: MUL
66397: ST_TO_ADDR
66398: GO 66426
// if amount > max then
66400: LD_VAR 0 9
66404: PUSH
66405: LD_VAR 0 4
66409: GREATER
66410: IFFALSE 66426
// r := r / 2 ;
66412: LD_ADDR_VAR 0 7
66416: PUSH
66417: LD_VAR 0 7
66421: PUSH
66422: LD_INT 2
66424: DIVREAL
66425: ST_TO_ADDR
// time := time / r ;
66426: LD_ADDR_VAR 0 8
66430: PUSH
66431: LD_VAR 0 8
66435: PUSH
66436: LD_VAR 0 7
66440: DIVREAL
66441: ST_TO_ADDR
// if time < 0 then
66442: LD_VAR 0 8
66446: PUSH
66447: LD_INT 0
66449: LESS
66450: IFFALSE 66467
// time := time * - 1 ;
66452: LD_ADDR_VAR 0 8
66456: PUSH
66457: LD_VAR 0 8
66461: PUSH
66462: LD_INT 1
66464: NEG
66465: MUL
66466: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66467: LD_VAR 0 8
66471: PUSH
66472: LD_INT 35
66474: PPUSH
66475: LD_INT 875
66477: PPUSH
66478: CALL_OW 12
66482: PLUS
66483: PPUSH
66484: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66488: LD_INT 1
66490: PPUSH
66491: LD_INT 5
66493: PPUSH
66494: CALL_OW 12
66498: PPUSH
66499: LD_VAR 0 1
66503: PPUSH
66504: LD_INT 1
66506: PPUSH
66507: CALL_OW 55
// end ;
66511: GO 66324
// end ;
66513: LD_VAR 0 5
66517: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66518: LD_INT 0
66520: PPUSH
66521: PPUSH
66522: PPUSH
66523: PPUSH
66524: PPUSH
66525: PPUSH
66526: PPUSH
66527: PPUSH
// if not turrets or not factories then
66528: LD_VAR 0 1
66532: NOT
66533: PUSH
66534: LD_VAR 0 2
66538: NOT
66539: OR
66540: IFFALSE 66544
// exit ;
66542: GO 66851
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66544: LD_ADDR_VAR 0 10
66548: PUSH
66549: LD_INT 5
66551: PUSH
66552: LD_INT 6
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 2
66561: PUSH
66562: LD_INT 4
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 3
66571: PUSH
66572: LD_INT 5
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 24
66586: PUSH
66587: LD_INT 25
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 23
66596: PUSH
66597: LD_INT 27
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 42
66610: PUSH
66611: LD_INT 43
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 44
66620: PUSH
66621: LD_INT 46
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 45
66630: PUSH
66631: LD_INT 47
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: LIST
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: LIST
66647: ST_TO_ADDR
// result := [ ] ;
66648: LD_ADDR_VAR 0 3
66652: PUSH
66653: EMPTY
66654: ST_TO_ADDR
// for i in turrets do
66655: LD_ADDR_VAR 0 4
66659: PUSH
66660: LD_VAR 0 1
66664: PUSH
66665: FOR_IN
66666: IFFALSE 66849
// begin nat := GetNation ( i ) ;
66668: LD_ADDR_VAR 0 7
66672: PUSH
66673: LD_VAR 0 4
66677: PPUSH
66678: CALL_OW 248
66682: ST_TO_ADDR
// weapon := 0 ;
66683: LD_ADDR_VAR 0 8
66687: PUSH
66688: LD_INT 0
66690: ST_TO_ADDR
// if not nat then
66691: LD_VAR 0 7
66695: NOT
66696: IFFALSE 66700
// continue ;
66698: GO 66665
// for j in list [ nat ] do
66700: LD_ADDR_VAR 0 5
66704: PUSH
66705: LD_VAR 0 10
66709: PUSH
66710: LD_VAR 0 7
66714: ARRAY
66715: PUSH
66716: FOR_IN
66717: IFFALSE 66758
// if GetBWeapon ( i ) = j [ 1 ] then
66719: LD_VAR 0 4
66723: PPUSH
66724: CALL_OW 269
66728: PUSH
66729: LD_VAR 0 5
66733: PUSH
66734: LD_INT 1
66736: ARRAY
66737: EQUAL
66738: IFFALSE 66756
// begin weapon := j [ 2 ] ;
66740: LD_ADDR_VAR 0 8
66744: PUSH
66745: LD_VAR 0 5
66749: PUSH
66750: LD_INT 2
66752: ARRAY
66753: ST_TO_ADDR
// break ;
66754: GO 66758
// end ;
66756: GO 66716
66758: POP
66759: POP
// if not weapon then
66760: LD_VAR 0 8
66764: NOT
66765: IFFALSE 66769
// continue ;
66767: GO 66665
// for k in factories do
66769: LD_ADDR_VAR 0 6
66773: PUSH
66774: LD_VAR 0 2
66778: PUSH
66779: FOR_IN
66780: IFFALSE 66845
// begin weapons := AvailableWeaponList ( k ) ;
66782: LD_ADDR_VAR 0 9
66786: PUSH
66787: LD_VAR 0 6
66791: PPUSH
66792: CALL_OW 478
66796: ST_TO_ADDR
// if not weapons then
66797: LD_VAR 0 9
66801: NOT
66802: IFFALSE 66806
// continue ;
66804: GO 66779
// if weapon in weapons then
66806: LD_VAR 0 8
66810: PUSH
66811: LD_VAR 0 9
66815: IN
66816: IFFALSE 66843
// begin result := [ i , weapon ] ;
66818: LD_ADDR_VAR 0 3
66822: PUSH
66823: LD_VAR 0 4
66827: PUSH
66828: LD_VAR 0 8
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: ST_TO_ADDR
// exit ;
66837: POP
66838: POP
66839: POP
66840: POP
66841: GO 66851
// end ; end ;
66843: GO 66779
66845: POP
66846: POP
// end ;
66847: GO 66665
66849: POP
66850: POP
// end ;
66851: LD_VAR 0 3
66855: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66856: LD_INT 0
66858: PPUSH
// if not side or side > 8 then
66859: LD_VAR 0 3
66863: NOT
66864: PUSH
66865: LD_VAR 0 3
66869: PUSH
66870: LD_INT 8
66872: GREATER
66873: OR
66874: IFFALSE 66878
// exit ;
66876: GO 66937
// if not range then
66878: LD_VAR 0 4
66882: NOT
66883: IFFALSE 66894
// range := - 12 ;
66885: LD_ADDR_VAR 0 4
66889: PUSH
66890: LD_INT 12
66892: NEG
66893: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66894: LD_VAR 0 1
66898: PPUSH
66899: LD_VAR 0 2
66903: PPUSH
66904: LD_VAR 0 3
66908: PPUSH
66909: LD_VAR 0 4
66913: PPUSH
66914: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66918: LD_VAR 0 1
66922: PPUSH
66923: LD_VAR 0 2
66927: PPUSH
66928: LD_VAR 0 3
66932: PPUSH
66933: CALL_OW 331
// end ;
66937: LD_VAR 0 5
66941: RET
// export function Video ( mode ) ; begin
66942: LD_INT 0
66944: PPUSH
// ingame_video = mode ;
66945: LD_ADDR_OWVAR 52
66949: PUSH
66950: LD_VAR 0 1
66954: ST_TO_ADDR
// interface_hidden = mode ;
66955: LD_ADDR_OWVAR 54
66959: PUSH
66960: LD_VAR 0 1
66964: ST_TO_ADDR
// end ;
66965: LD_VAR 0 2
66969: RET
// export function Join ( array , element ) ; begin
66970: LD_INT 0
66972: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66973: LD_ADDR_VAR 0 3
66977: PUSH
66978: LD_VAR 0 1
66982: PPUSH
66983: LD_VAR 0 1
66987: PUSH
66988: LD_INT 1
66990: PLUS
66991: PPUSH
66992: LD_VAR 0 2
66996: PPUSH
66997: CALL_OW 1
67001: ST_TO_ADDR
// end ;
67002: LD_VAR 0 3
67006: RET
// export function JoinUnion ( array , element ) ; begin
67007: LD_INT 0
67009: PPUSH
// result := array union element ;
67010: LD_ADDR_VAR 0 3
67014: PUSH
67015: LD_VAR 0 1
67019: PUSH
67020: LD_VAR 0 2
67024: UNION
67025: ST_TO_ADDR
// end ;
67026: LD_VAR 0 3
67030: RET
// export function GetBehemoths ( side ) ; begin
67031: LD_INT 0
67033: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67034: LD_ADDR_VAR 0 2
67038: PUSH
67039: LD_INT 22
67041: PUSH
67042: LD_VAR 0 1
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 31
67053: PUSH
67054: LD_INT 25
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PPUSH
67065: CALL_OW 69
67069: ST_TO_ADDR
// end ;
67070: LD_VAR 0 2
67074: RET
// export function Shuffle ( array ) ; var i , index ; begin
67075: LD_INT 0
67077: PPUSH
67078: PPUSH
67079: PPUSH
// result := [ ] ;
67080: LD_ADDR_VAR 0 2
67084: PUSH
67085: EMPTY
67086: ST_TO_ADDR
// if not array then
67087: LD_VAR 0 1
67091: NOT
67092: IFFALSE 67096
// exit ;
67094: GO 67195
// Randomize ;
67096: CALL_OW 10
// for i = array downto 1 do
67100: LD_ADDR_VAR 0 3
67104: PUSH
67105: DOUBLE
67106: LD_VAR 0 1
67110: INC
67111: ST_TO_ADDR
67112: LD_INT 1
67114: PUSH
67115: FOR_DOWNTO
67116: IFFALSE 67193
// begin index := rand ( 1 , array ) ;
67118: LD_ADDR_VAR 0 4
67122: PUSH
67123: LD_INT 1
67125: PPUSH
67126: LD_VAR 0 1
67130: PPUSH
67131: CALL_OW 12
67135: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67136: LD_ADDR_VAR 0 2
67140: PUSH
67141: LD_VAR 0 2
67145: PPUSH
67146: LD_VAR 0 2
67150: PUSH
67151: LD_INT 1
67153: PLUS
67154: PPUSH
67155: LD_VAR 0 1
67159: PUSH
67160: LD_VAR 0 4
67164: ARRAY
67165: PPUSH
67166: CALL_OW 2
67170: ST_TO_ADDR
// array := Delete ( array , index ) ;
67171: LD_ADDR_VAR 0 1
67175: PUSH
67176: LD_VAR 0 1
67180: PPUSH
67181: LD_VAR 0 4
67185: PPUSH
67186: CALL_OW 3
67190: ST_TO_ADDR
// end ;
67191: GO 67115
67193: POP
67194: POP
// end ;
67195: LD_VAR 0 2
67199: RET
// export function GetBaseMaterials ( base ) ; begin
67200: LD_INT 0
67202: PPUSH
// result := [ 0 , 0 , 0 ] ;
67203: LD_ADDR_VAR 0 2
67207: PUSH
67208: LD_INT 0
67210: PUSH
67211: LD_INT 0
67213: PUSH
67214: LD_INT 0
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: LIST
67221: ST_TO_ADDR
// if not base then
67222: LD_VAR 0 1
67226: NOT
67227: IFFALSE 67231
// exit ;
67229: GO 67280
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67231: LD_ADDR_VAR 0 2
67235: PUSH
67236: LD_VAR 0 1
67240: PPUSH
67241: LD_INT 1
67243: PPUSH
67244: CALL_OW 275
67248: PUSH
67249: LD_VAR 0 1
67253: PPUSH
67254: LD_INT 2
67256: PPUSH
67257: CALL_OW 275
67261: PUSH
67262: LD_VAR 0 1
67266: PPUSH
67267: LD_INT 3
67269: PPUSH
67270: CALL_OW 275
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: LIST
67279: ST_TO_ADDR
// end ;
67280: LD_VAR 0 2
67284: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67285: LD_INT 0
67287: PPUSH
67288: PPUSH
// result := array ;
67289: LD_ADDR_VAR 0 3
67293: PUSH
67294: LD_VAR 0 1
67298: ST_TO_ADDR
// if size > 0 then
67299: LD_VAR 0 2
67303: PUSH
67304: LD_INT 0
67306: GREATER
67307: IFFALSE 67353
// for i := array downto size do
67309: LD_ADDR_VAR 0 4
67313: PUSH
67314: DOUBLE
67315: LD_VAR 0 1
67319: INC
67320: ST_TO_ADDR
67321: LD_VAR 0 2
67325: PUSH
67326: FOR_DOWNTO
67327: IFFALSE 67351
// result := Delete ( result , result ) ;
67329: LD_ADDR_VAR 0 3
67333: PUSH
67334: LD_VAR 0 3
67338: PPUSH
67339: LD_VAR 0 3
67343: PPUSH
67344: CALL_OW 3
67348: ST_TO_ADDR
67349: GO 67326
67351: POP
67352: POP
// end ;
67353: LD_VAR 0 3
67357: RET
// export function ComExit ( unit ) ; var tmp ; begin
67358: LD_INT 0
67360: PPUSH
67361: PPUSH
// if not IsInUnit ( unit ) then
67362: LD_VAR 0 1
67366: PPUSH
67367: CALL_OW 310
67371: NOT
67372: IFFALSE 67376
// exit ;
67374: GO 67436
// tmp := IsInUnit ( unit ) ;
67376: LD_ADDR_VAR 0 3
67380: PUSH
67381: LD_VAR 0 1
67385: PPUSH
67386: CALL_OW 310
67390: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67391: LD_VAR 0 3
67395: PPUSH
67396: CALL_OW 247
67400: PUSH
67401: LD_INT 2
67403: EQUAL
67404: IFFALSE 67417
// ComExitVehicle ( unit ) else
67406: LD_VAR 0 1
67410: PPUSH
67411: CALL_OW 121
67415: GO 67426
// ComExitBuilding ( unit ) ;
67417: LD_VAR 0 1
67421: PPUSH
67422: CALL_OW 122
// result := tmp ;
67426: LD_ADDR_VAR 0 2
67430: PUSH
67431: LD_VAR 0 3
67435: ST_TO_ADDR
// end ;
67436: LD_VAR 0 2
67440: RET
// export function ComExitAll ( units ) ; var i ; begin
67441: LD_INT 0
67443: PPUSH
67444: PPUSH
// if not units then
67445: LD_VAR 0 1
67449: NOT
67450: IFFALSE 67454
// exit ;
67452: GO 67480
// for i in units do
67454: LD_ADDR_VAR 0 3
67458: PUSH
67459: LD_VAR 0 1
67463: PUSH
67464: FOR_IN
67465: IFFALSE 67478
// ComExit ( i ) ;
67467: LD_VAR 0 3
67471: PPUSH
67472: CALL 67358 0 1
67476: GO 67464
67478: POP
67479: POP
// end ;
67480: LD_VAR 0 2
67484: RET
// export function ResetHc ; begin
67485: LD_INT 0
67487: PPUSH
// InitHc ;
67488: CALL_OW 19
// hc_importance := 0 ;
67492: LD_ADDR_OWVAR 32
67496: PUSH
67497: LD_INT 0
67499: ST_TO_ADDR
// end ;
67500: LD_VAR 0 1
67504: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67505: LD_INT 0
67507: PPUSH
67508: PPUSH
67509: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67510: LD_ADDR_VAR 0 6
67514: PUSH
67515: LD_VAR 0 1
67519: PUSH
67520: LD_VAR 0 3
67524: PLUS
67525: PUSH
67526: LD_INT 2
67528: DIV
67529: ST_TO_ADDR
// if _x < 0 then
67530: LD_VAR 0 6
67534: PUSH
67535: LD_INT 0
67537: LESS
67538: IFFALSE 67555
// _x := _x * - 1 ;
67540: LD_ADDR_VAR 0 6
67544: PUSH
67545: LD_VAR 0 6
67549: PUSH
67550: LD_INT 1
67552: NEG
67553: MUL
67554: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67555: LD_ADDR_VAR 0 7
67559: PUSH
67560: LD_VAR 0 2
67564: PUSH
67565: LD_VAR 0 4
67569: PLUS
67570: PUSH
67571: LD_INT 2
67573: DIV
67574: ST_TO_ADDR
// if _y < 0 then
67575: LD_VAR 0 7
67579: PUSH
67580: LD_INT 0
67582: LESS
67583: IFFALSE 67600
// _y := _y * - 1 ;
67585: LD_ADDR_VAR 0 7
67589: PUSH
67590: LD_VAR 0 7
67594: PUSH
67595: LD_INT 1
67597: NEG
67598: MUL
67599: ST_TO_ADDR
// result := [ _x , _y ] ;
67600: LD_ADDR_VAR 0 5
67604: PUSH
67605: LD_VAR 0 6
67609: PUSH
67610: LD_VAR 0 7
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: ST_TO_ADDR
// end ;
67619: LD_VAR 0 5
67623: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67624: LD_INT 0
67626: PPUSH
67627: PPUSH
67628: PPUSH
67629: PPUSH
// task := GetTaskList ( unit ) ;
67630: LD_ADDR_VAR 0 7
67634: PUSH
67635: LD_VAR 0 1
67639: PPUSH
67640: CALL_OW 437
67644: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67645: LD_VAR 0 7
67649: NOT
67650: PUSH
67651: LD_VAR 0 1
67655: PPUSH
67656: LD_VAR 0 2
67660: PPUSH
67661: CALL_OW 308
67665: NOT
67666: AND
67667: IFFALSE 67671
// exit ;
67669: GO 67789
// if IsInArea ( unit , area ) then
67671: LD_VAR 0 1
67675: PPUSH
67676: LD_VAR 0 2
67680: PPUSH
67681: CALL_OW 308
67685: IFFALSE 67703
// begin ComMoveToArea ( unit , goAway ) ;
67687: LD_VAR 0 1
67691: PPUSH
67692: LD_VAR 0 3
67696: PPUSH
67697: CALL_OW 113
// exit ;
67701: GO 67789
// end ; if task [ 1 ] [ 1 ] <> M then
67703: LD_VAR 0 7
67707: PUSH
67708: LD_INT 1
67710: ARRAY
67711: PUSH
67712: LD_INT 1
67714: ARRAY
67715: PUSH
67716: LD_STRING M
67718: NONEQUAL
67719: IFFALSE 67723
// exit ;
67721: GO 67789
// x := task [ 1 ] [ 2 ] ;
67723: LD_ADDR_VAR 0 5
67727: PUSH
67728: LD_VAR 0 7
67732: PUSH
67733: LD_INT 1
67735: ARRAY
67736: PUSH
67737: LD_INT 2
67739: ARRAY
67740: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67741: LD_ADDR_VAR 0 6
67745: PUSH
67746: LD_VAR 0 7
67750: PUSH
67751: LD_INT 1
67753: ARRAY
67754: PUSH
67755: LD_INT 3
67757: ARRAY
67758: ST_TO_ADDR
// if InArea ( x , y , area ) then
67759: LD_VAR 0 5
67763: PPUSH
67764: LD_VAR 0 6
67768: PPUSH
67769: LD_VAR 0 2
67773: PPUSH
67774: CALL_OW 309
67778: IFFALSE 67789
// ComStop ( unit ) ;
67780: LD_VAR 0 1
67784: PPUSH
67785: CALL_OW 141
// end ;
67789: LD_VAR 0 4
67793: RET
// export function Abs ( value ) ; begin
67794: LD_INT 0
67796: PPUSH
// result := value ;
67797: LD_ADDR_VAR 0 2
67801: PUSH
67802: LD_VAR 0 1
67806: ST_TO_ADDR
// if value < 0 then
67807: LD_VAR 0 1
67811: PUSH
67812: LD_INT 0
67814: LESS
67815: IFFALSE 67832
// result := value * - 1 ;
67817: LD_ADDR_VAR 0 2
67821: PUSH
67822: LD_VAR 0 1
67826: PUSH
67827: LD_INT 1
67829: NEG
67830: MUL
67831: ST_TO_ADDR
// end ;
67832: LD_VAR 0 2
67836: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67837: LD_INT 0
67839: PPUSH
67840: PPUSH
67841: PPUSH
67842: PPUSH
67843: PPUSH
67844: PPUSH
67845: PPUSH
67846: PPUSH
// if not unit or not building then
67847: LD_VAR 0 1
67851: NOT
67852: PUSH
67853: LD_VAR 0 2
67857: NOT
67858: OR
67859: IFFALSE 67863
// exit ;
67861: GO 68089
// x := GetX ( building ) ;
67863: LD_ADDR_VAR 0 4
67867: PUSH
67868: LD_VAR 0 2
67872: PPUSH
67873: CALL_OW 250
67877: ST_TO_ADDR
// y := GetY ( building ) ;
67878: LD_ADDR_VAR 0 6
67882: PUSH
67883: LD_VAR 0 2
67887: PPUSH
67888: CALL_OW 251
67892: ST_TO_ADDR
// d := GetDir ( building ) ;
67893: LD_ADDR_VAR 0 8
67897: PUSH
67898: LD_VAR 0 2
67902: PPUSH
67903: CALL_OW 254
67907: ST_TO_ADDR
// r := 4 ;
67908: LD_ADDR_VAR 0 9
67912: PUSH
67913: LD_INT 4
67915: ST_TO_ADDR
// for i := 1 to 5 do
67916: LD_ADDR_VAR 0 10
67920: PUSH
67921: DOUBLE
67922: LD_INT 1
67924: DEC
67925: ST_TO_ADDR
67926: LD_INT 5
67928: PUSH
67929: FOR_TO
67930: IFFALSE 68087
// begin _x := ShiftX ( x , d , r + i ) ;
67932: LD_ADDR_VAR 0 5
67936: PUSH
67937: LD_VAR 0 4
67941: PPUSH
67942: LD_VAR 0 8
67946: PPUSH
67947: LD_VAR 0 9
67951: PUSH
67952: LD_VAR 0 10
67956: PLUS
67957: PPUSH
67958: CALL_OW 272
67962: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67963: LD_ADDR_VAR 0 7
67967: PUSH
67968: LD_VAR 0 6
67972: PPUSH
67973: LD_VAR 0 8
67977: PPUSH
67978: LD_VAR 0 9
67982: PUSH
67983: LD_VAR 0 10
67987: PLUS
67988: PPUSH
67989: CALL_OW 273
67993: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67994: LD_VAR 0 5
67998: PPUSH
67999: LD_VAR 0 7
68003: PPUSH
68004: CALL_OW 488
68008: PUSH
68009: LD_VAR 0 5
68013: PPUSH
68014: LD_VAR 0 7
68018: PPUSH
68019: CALL_OW 428
68023: PPUSH
68024: CALL_OW 247
68028: PUSH
68029: LD_INT 3
68031: PUSH
68032: LD_INT 2
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: IN
68039: NOT
68040: AND
68041: IFFALSE 68085
// begin ComMoveXY ( unit , _x , _y ) ;
68043: LD_VAR 0 1
68047: PPUSH
68048: LD_VAR 0 5
68052: PPUSH
68053: LD_VAR 0 7
68057: PPUSH
68058: CALL_OW 111
// result := [ _x , _y ] ;
68062: LD_ADDR_VAR 0 3
68066: PUSH
68067: LD_VAR 0 5
68071: PUSH
68072: LD_VAR 0 7
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: ST_TO_ADDR
// exit ;
68081: POP
68082: POP
68083: GO 68089
// end ; end ;
68085: GO 67929
68087: POP
68088: POP
// end ;
68089: LD_VAR 0 3
68093: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68094: LD_INT 0
68096: PPUSH
68097: PPUSH
68098: PPUSH
// result := 0 ;
68099: LD_ADDR_VAR 0 3
68103: PUSH
68104: LD_INT 0
68106: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68107: LD_VAR 0 1
68111: PUSH
68112: LD_INT 0
68114: LESS
68115: PUSH
68116: LD_VAR 0 1
68120: PUSH
68121: LD_INT 8
68123: GREATER
68124: OR
68125: PUSH
68126: LD_VAR 0 2
68130: PUSH
68131: LD_INT 0
68133: LESS
68134: OR
68135: PUSH
68136: LD_VAR 0 2
68140: PUSH
68141: LD_INT 8
68143: GREATER
68144: OR
68145: IFFALSE 68149
// exit ;
68147: GO 68224
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68149: LD_ADDR_VAR 0 4
68153: PUSH
68154: LD_INT 22
68156: PUSH
68157: LD_VAR 0 2
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PPUSH
68166: CALL_OW 69
68170: PUSH
68171: FOR_IN
68172: IFFALSE 68222
// begin un := UnitShoot ( i ) ;
68174: LD_ADDR_VAR 0 5
68178: PUSH
68179: LD_VAR 0 4
68183: PPUSH
68184: CALL_OW 504
68188: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68189: LD_VAR 0 5
68193: PPUSH
68194: CALL_OW 255
68198: PUSH
68199: LD_VAR 0 1
68203: EQUAL
68204: IFFALSE 68220
// begin result := un ;
68206: LD_ADDR_VAR 0 3
68210: PUSH
68211: LD_VAR 0 5
68215: ST_TO_ADDR
// exit ;
68216: POP
68217: POP
68218: GO 68224
// end ; end ;
68220: GO 68171
68222: POP
68223: POP
// end ;
68224: LD_VAR 0 3
68228: RET
// export function GetCargoBay ( units ) ; begin
68229: LD_INT 0
68231: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68232: LD_ADDR_VAR 0 2
68236: PUSH
68237: LD_VAR 0 1
68241: PPUSH
68242: LD_INT 2
68244: PUSH
68245: LD_INT 34
68247: PUSH
68248: LD_INT 12
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 34
68257: PUSH
68258: LD_INT 51
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 34
68267: PUSH
68268: LD_INT 32
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 34
68277: PUSH
68278: LD_EXP 47
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: LIST
68291: LIST
68292: LIST
68293: PPUSH
68294: CALL_OW 72
68298: ST_TO_ADDR
// end ;
68299: LD_VAR 0 2
68303: RET
// export function Negate ( value ) ; begin
68304: LD_INT 0
68306: PPUSH
// result := not value ;
68307: LD_ADDR_VAR 0 2
68311: PUSH
68312: LD_VAR 0 1
68316: NOT
68317: ST_TO_ADDR
// end ;
68318: LD_VAR 0 2
68322: RET
// export function Inc ( value ) ; begin
68323: LD_INT 0
68325: PPUSH
// result := value + 1 ;
68326: LD_ADDR_VAR 0 2
68330: PUSH
68331: LD_VAR 0 1
68335: PUSH
68336: LD_INT 1
68338: PLUS
68339: ST_TO_ADDR
// end ;
68340: LD_VAR 0 2
68344: RET
// export function Dec ( value ) ; begin
68345: LD_INT 0
68347: PPUSH
// result := value - 1 ;
68348: LD_ADDR_VAR 0 2
68352: PUSH
68353: LD_VAR 0 1
68357: PUSH
68358: LD_INT 1
68360: MINUS
68361: ST_TO_ADDR
// end ;
68362: LD_VAR 0 2
68366: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68367: LD_INT 0
68369: PPUSH
68370: PPUSH
68371: PPUSH
68372: PPUSH
68373: PPUSH
68374: PPUSH
68375: PPUSH
68376: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68377: LD_VAR 0 1
68381: PPUSH
68382: LD_VAR 0 2
68386: PPUSH
68387: CALL_OW 488
68391: NOT
68392: PUSH
68393: LD_VAR 0 3
68397: PPUSH
68398: LD_VAR 0 4
68402: PPUSH
68403: CALL_OW 488
68407: NOT
68408: OR
68409: IFFALSE 68422
// begin result := - 1 ;
68411: LD_ADDR_VAR 0 5
68415: PUSH
68416: LD_INT 1
68418: NEG
68419: ST_TO_ADDR
// exit ;
68420: GO 68657
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68422: LD_ADDR_VAR 0 12
68426: PUSH
68427: LD_VAR 0 1
68431: PPUSH
68432: LD_VAR 0 2
68436: PPUSH
68437: LD_VAR 0 3
68441: PPUSH
68442: LD_VAR 0 4
68446: PPUSH
68447: CALL 67505 0 4
68451: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68452: LD_ADDR_VAR 0 11
68456: PUSH
68457: LD_VAR 0 1
68461: PPUSH
68462: LD_VAR 0 2
68466: PPUSH
68467: LD_VAR 0 12
68471: PUSH
68472: LD_INT 1
68474: ARRAY
68475: PPUSH
68476: LD_VAR 0 12
68480: PUSH
68481: LD_INT 2
68483: ARRAY
68484: PPUSH
68485: CALL_OW 298
68489: ST_TO_ADDR
// distance := 9999 ;
68490: LD_ADDR_VAR 0 10
68494: PUSH
68495: LD_INT 9999
68497: ST_TO_ADDR
// for i := 0 to 5 do
68498: LD_ADDR_VAR 0 6
68502: PUSH
68503: DOUBLE
68504: LD_INT 0
68506: DEC
68507: ST_TO_ADDR
68508: LD_INT 5
68510: PUSH
68511: FOR_TO
68512: IFFALSE 68655
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68514: LD_ADDR_VAR 0 7
68518: PUSH
68519: LD_VAR 0 1
68523: PPUSH
68524: LD_VAR 0 6
68528: PPUSH
68529: LD_VAR 0 11
68533: PPUSH
68534: CALL_OW 272
68538: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68539: LD_ADDR_VAR 0 8
68543: PUSH
68544: LD_VAR 0 2
68548: PPUSH
68549: LD_VAR 0 6
68553: PPUSH
68554: LD_VAR 0 11
68558: PPUSH
68559: CALL_OW 273
68563: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68564: LD_VAR 0 7
68568: PPUSH
68569: LD_VAR 0 8
68573: PPUSH
68574: CALL_OW 488
68578: NOT
68579: IFFALSE 68583
// continue ;
68581: GO 68511
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68583: LD_ADDR_VAR 0 9
68587: PUSH
68588: LD_VAR 0 12
68592: PUSH
68593: LD_INT 1
68595: ARRAY
68596: PPUSH
68597: LD_VAR 0 12
68601: PUSH
68602: LD_INT 2
68604: ARRAY
68605: PPUSH
68606: LD_VAR 0 7
68610: PPUSH
68611: LD_VAR 0 8
68615: PPUSH
68616: CALL_OW 298
68620: ST_TO_ADDR
// if tmp < distance then
68621: LD_VAR 0 9
68625: PUSH
68626: LD_VAR 0 10
68630: LESS
68631: IFFALSE 68653
// begin result := i ;
68633: LD_ADDR_VAR 0 5
68637: PUSH
68638: LD_VAR 0 6
68642: ST_TO_ADDR
// distance := tmp ;
68643: LD_ADDR_VAR 0 10
68647: PUSH
68648: LD_VAR 0 9
68652: ST_TO_ADDR
// end ; end ;
68653: GO 68511
68655: POP
68656: POP
// end ;
68657: LD_VAR 0 5
68661: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68662: LD_INT 0
68664: PPUSH
68665: PPUSH
// if not driver or not IsInUnit ( driver ) then
68666: LD_VAR 0 1
68670: NOT
68671: PUSH
68672: LD_VAR 0 1
68676: PPUSH
68677: CALL_OW 310
68681: NOT
68682: OR
68683: IFFALSE 68687
// exit ;
68685: GO 68777
// vehicle := IsInUnit ( driver ) ;
68687: LD_ADDR_VAR 0 3
68691: PUSH
68692: LD_VAR 0 1
68696: PPUSH
68697: CALL_OW 310
68701: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68702: LD_VAR 0 1
68706: PPUSH
68707: LD_STRING \
68709: PUSH
68710: LD_INT 0
68712: PUSH
68713: LD_INT 0
68715: PUSH
68716: LD_INT 0
68718: PUSH
68719: LD_INT 0
68721: PUSH
68722: LD_INT 0
68724: PUSH
68725: LD_INT 0
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: PUSH
68737: LD_STRING E
68739: PUSH
68740: LD_INT 0
68742: PUSH
68743: LD_INT 0
68745: PUSH
68746: LD_VAR 0 3
68750: PUSH
68751: LD_INT 0
68753: PUSH
68754: LD_INT 0
68756: PUSH
68757: LD_INT 0
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PPUSH
68773: CALL_OW 446
// end ;
68777: LD_VAR 0 2
68781: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68782: LD_INT 0
68784: PPUSH
68785: PPUSH
// if not driver or not IsInUnit ( driver ) then
68786: LD_VAR 0 1
68790: NOT
68791: PUSH
68792: LD_VAR 0 1
68796: PPUSH
68797: CALL_OW 310
68801: NOT
68802: OR
68803: IFFALSE 68807
// exit ;
68805: GO 68897
// vehicle := IsInUnit ( driver ) ;
68807: LD_ADDR_VAR 0 3
68811: PUSH
68812: LD_VAR 0 1
68816: PPUSH
68817: CALL_OW 310
68821: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68822: LD_VAR 0 1
68826: PPUSH
68827: LD_STRING \
68829: PUSH
68830: LD_INT 0
68832: PUSH
68833: LD_INT 0
68835: PUSH
68836: LD_INT 0
68838: PUSH
68839: LD_INT 0
68841: PUSH
68842: LD_INT 0
68844: PUSH
68845: LD_INT 0
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: PUSH
68857: LD_STRING E
68859: PUSH
68860: LD_INT 0
68862: PUSH
68863: LD_INT 0
68865: PUSH
68866: LD_VAR 0 3
68870: PUSH
68871: LD_INT 0
68873: PUSH
68874: LD_INT 0
68876: PUSH
68877: LD_INT 0
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PPUSH
68893: CALL_OW 447
// end ;
68897: LD_VAR 0 2
68901: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68902: LD_INT 0
68904: PPUSH
68905: PPUSH
68906: PPUSH
// tmp := [ ] ;
68907: LD_ADDR_VAR 0 5
68911: PUSH
68912: EMPTY
68913: ST_TO_ADDR
// for i in units do
68914: LD_ADDR_VAR 0 4
68918: PUSH
68919: LD_VAR 0 1
68923: PUSH
68924: FOR_IN
68925: IFFALSE 68963
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68927: LD_ADDR_VAR 0 5
68931: PUSH
68932: LD_VAR 0 5
68936: PPUSH
68937: LD_VAR 0 5
68941: PUSH
68942: LD_INT 1
68944: PLUS
68945: PPUSH
68946: LD_VAR 0 4
68950: PPUSH
68951: CALL_OW 256
68955: PPUSH
68956: CALL_OW 2
68960: ST_TO_ADDR
68961: GO 68924
68963: POP
68964: POP
// if not tmp then
68965: LD_VAR 0 5
68969: NOT
68970: IFFALSE 68974
// exit ;
68972: GO 69022
// if asc then
68974: LD_VAR 0 2
68978: IFFALSE 69002
// result := SortListByListAsc ( units , tmp ) else
68980: LD_ADDR_VAR 0 3
68984: PUSH
68985: LD_VAR 0 1
68989: PPUSH
68990: LD_VAR 0 5
68994: PPUSH
68995: CALL_OW 76
68999: ST_TO_ADDR
69000: GO 69022
// result := SortListByListDesc ( units , tmp ) ;
69002: LD_ADDR_VAR 0 3
69006: PUSH
69007: LD_VAR 0 1
69011: PPUSH
69012: LD_VAR 0 5
69016: PPUSH
69017: CALL_OW 77
69021: ST_TO_ADDR
// end ;
69022: LD_VAR 0 3
69026: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69027: LD_INT 0
69029: PPUSH
69030: PPUSH
// task := GetTaskList ( mech ) ;
69031: LD_ADDR_VAR 0 4
69035: PUSH
69036: LD_VAR 0 1
69040: PPUSH
69041: CALL_OW 437
69045: ST_TO_ADDR
// if not task then
69046: LD_VAR 0 4
69050: NOT
69051: IFFALSE 69055
// exit ;
69053: GO 69097
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69055: LD_ADDR_VAR 0 3
69059: PUSH
69060: LD_VAR 0 4
69064: PUSH
69065: LD_INT 1
69067: ARRAY
69068: PUSH
69069: LD_INT 1
69071: ARRAY
69072: PUSH
69073: LD_STRING r
69075: EQUAL
69076: PUSH
69077: LD_VAR 0 4
69081: PUSH
69082: LD_INT 1
69084: ARRAY
69085: PUSH
69086: LD_INT 4
69088: ARRAY
69089: PUSH
69090: LD_VAR 0 2
69094: EQUAL
69095: AND
69096: ST_TO_ADDR
// end ;
69097: LD_VAR 0 3
69101: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69102: LD_INT 0
69104: PPUSH
// SetDir ( unit , d ) ;
69105: LD_VAR 0 1
69109: PPUSH
69110: LD_VAR 0 4
69114: PPUSH
69115: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69119: LD_VAR 0 1
69123: PPUSH
69124: LD_VAR 0 2
69128: PPUSH
69129: LD_VAR 0 3
69133: PPUSH
69134: LD_VAR 0 5
69138: PPUSH
69139: CALL_OW 48
// end ;
69143: LD_VAR 0 6
69147: RET
// export function ToNaturalNumber ( number ) ; begin
69148: LD_INT 0
69150: PPUSH
// result := number div 1 ;
69151: LD_ADDR_VAR 0 2
69155: PUSH
69156: LD_VAR 0 1
69160: PUSH
69161: LD_INT 1
69163: DIV
69164: ST_TO_ADDR
// if number < 0 then
69165: LD_VAR 0 1
69169: PUSH
69170: LD_INT 0
69172: LESS
69173: IFFALSE 69183
// result := 0 ;
69175: LD_ADDR_VAR 0 2
69179: PUSH
69180: LD_INT 0
69182: ST_TO_ADDR
// end ;
69183: LD_VAR 0 2
69187: RET
// export function SortByClass ( units , class ) ; var un ; begin
69188: LD_INT 0
69190: PPUSH
69191: PPUSH
// if not units or not class then
69192: LD_VAR 0 1
69196: NOT
69197: PUSH
69198: LD_VAR 0 2
69202: NOT
69203: OR
69204: IFFALSE 69208
// exit ;
69206: GO 69303
// result := [ ] ;
69208: LD_ADDR_VAR 0 3
69212: PUSH
69213: EMPTY
69214: ST_TO_ADDR
// for un in units do
69215: LD_ADDR_VAR 0 4
69219: PUSH
69220: LD_VAR 0 1
69224: PUSH
69225: FOR_IN
69226: IFFALSE 69301
// if GetClass ( un ) = class then
69228: LD_VAR 0 4
69232: PPUSH
69233: CALL_OW 257
69237: PUSH
69238: LD_VAR 0 2
69242: EQUAL
69243: IFFALSE 69270
// result := Insert ( result , 1 , un ) else
69245: LD_ADDR_VAR 0 3
69249: PUSH
69250: LD_VAR 0 3
69254: PPUSH
69255: LD_INT 1
69257: PPUSH
69258: LD_VAR 0 4
69262: PPUSH
69263: CALL_OW 2
69267: ST_TO_ADDR
69268: GO 69299
// result := Replace ( result , result + 1 , un ) ;
69270: LD_ADDR_VAR 0 3
69274: PUSH
69275: LD_VAR 0 3
69279: PPUSH
69280: LD_VAR 0 3
69284: PUSH
69285: LD_INT 1
69287: PLUS
69288: PPUSH
69289: LD_VAR 0 4
69293: PPUSH
69294: CALL_OW 1
69298: ST_TO_ADDR
69299: GO 69225
69301: POP
69302: POP
// end ;
69303: LD_VAR 0 3
69307: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69308: LD_INT 0
69310: PPUSH
69311: PPUSH
69312: PPUSH
69313: PPUSH
69314: PPUSH
69315: PPUSH
69316: PPUSH
// result := [ ] ;
69317: LD_ADDR_VAR 0 4
69321: PUSH
69322: EMPTY
69323: ST_TO_ADDR
// if x - r < 0 then
69324: LD_VAR 0 1
69328: PUSH
69329: LD_VAR 0 3
69333: MINUS
69334: PUSH
69335: LD_INT 0
69337: LESS
69338: IFFALSE 69350
// min_x := 0 else
69340: LD_ADDR_VAR 0 8
69344: PUSH
69345: LD_INT 0
69347: ST_TO_ADDR
69348: GO 69366
// min_x := x - r ;
69350: LD_ADDR_VAR 0 8
69354: PUSH
69355: LD_VAR 0 1
69359: PUSH
69360: LD_VAR 0 3
69364: MINUS
69365: ST_TO_ADDR
// if y - r < 0 then
69366: LD_VAR 0 2
69370: PUSH
69371: LD_VAR 0 3
69375: MINUS
69376: PUSH
69377: LD_INT 0
69379: LESS
69380: IFFALSE 69392
// min_y := 0 else
69382: LD_ADDR_VAR 0 7
69386: PUSH
69387: LD_INT 0
69389: ST_TO_ADDR
69390: GO 69408
// min_y := y - r ;
69392: LD_ADDR_VAR 0 7
69396: PUSH
69397: LD_VAR 0 2
69401: PUSH
69402: LD_VAR 0 3
69406: MINUS
69407: ST_TO_ADDR
// max_x := x + r ;
69408: LD_ADDR_VAR 0 9
69412: PUSH
69413: LD_VAR 0 1
69417: PUSH
69418: LD_VAR 0 3
69422: PLUS
69423: ST_TO_ADDR
// max_y := y + r ;
69424: LD_ADDR_VAR 0 10
69428: PUSH
69429: LD_VAR 0 2
69433: PUSH
69434: LD_VAR 0 3
69438: PLUS
69439: ST_TO_ADDR
// for _x = min_x to max_x do
69440: LD_ADDR_VAR 0 5
69444: PUSH
69445: DOUBLE
69446: LD_VAR 0 8
69450: DEC
69451: ST_TO_ADDR
69452: LD_VAR 0 9
69456: PUSH
69457: FOR_TO
69458: IFFALSE 69559
// for _y = min_y to max_y do
69460: LD_ADDR_VAR 0 6
69464: PUSH
69465: DOUBLE
69466: LD_VAR 0 7
69470: DEC
69471: ST_TO_ADDR
69472: LD_VAR 0 10
69476: PUSH
69477: FOR_TO
69478: IFFALSE 69555
// begin if not ValidHex ( _x , _y ) then
69480: LD_VAR 0 5
69484: PPUSH
69485: LD_VAR 0 6
69489: PPUSH
69490: CALL_OW 488
69494: NOT
69495: IFFALSE 69499
// continue ;
69497: GO 69477
// if GetResourceTypeXY ( _x , _y ) then
69499: LD_VAR 0 5
69503: PPUSH
69504: LD_VAR 0 6
69508: PPUSH
69509: CALL_OW 283
69513: IFFALSE 69553
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69515: LD_ADDR_VAR 0 4
69519: PUSH
69520: LD_VAR 0 4
69524: PPUSH
69525: LD_VAR 0 4
69529: PUSH
69530: LD_INT 1
69532: PLUS
69533: PPUSH
69534: LD_VAR 0 5
69538: PUSH
69539: LD_VAR 0 6
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PPUSH
69548: CALL_OW 1
69552: ST_TO_ADDR
// end ;
69553: GO 69477
69555: POP
69556: POP
69557: GO 69457
69559: POP
69560: POP
// end ;
69561: LD_VAR 0 4
69565: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69566: LD_INT 0
69568: PPUSH
69569: PPUSH
69570: PPUSH
69571: PPUSH
69572: PPUSH
69573: PPUSH
69574: PPUSH
69575: PPUSH
// if not units then
69576: LD_VAR 0 1
69580: NOT
69581: IFFALSE 69585
// exit ;
69583: GO 70111
// result := UnitFilter ( units , [ f_ok ] ) ;
69585: LD_ADDR_VAR 0 3
69589: PUSH
69590: LD_VAR 0 1
69594: PPUSH
69595: LD_INT 50
69597: PUSH
69598: EMPTY
69599: LIST
69600: PPUSH
69601: CALL_OW 72
69605: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69606: LD_ADDR_VAR 0 8
69610: PUSH
69611: LD_VAR 0 1
69615: PUSH
69616: LD_INT 1
69618: ARRAY
69619: PPUSH
69620: CALL_OW 255
69624: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69625: LD_ADDR_VAR 0 10
69629: PUSH
69630: LD_INT 29
69632: PUSH
69633: LD_EXP 50
69637: PUSH
69638: LD_INT 49
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: LIST
69645: ST_TO_ADDR
// if not result then
69646: LD_VAR 0 3
69650: NOT
69651: IFFALSE 69655
// exit ;
69653: GO 70111
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69655: LD_ADDR_VAR 0 5
69659: PUSH
69660: LD_INT 81
69662: PUSH
69663: LD_VAR 0 8
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PPUSH
69672: CALL_OW 69
69676: ST_TO_ADDR
// for i in result do
69677: LD_ADDR_VAR 0 4
69681: PUSH
69682: LD_VAR 0 3
69686: PUSH
69687: FOR_IN
69688: IFFALSE 70109
// begin tag := GetTag ( i ) + 1 ;
69690: LD_ADDR_VAR 0 9
69694: PUSH
69695: LD_VAR 0 4
69699: PPUSH
69700: CALL_OW 110
69704: PUSH
69705: LD_INT 1
69707: PLUS
69708: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69709: LD_ADDR_VAR 0 7
69713: PUSH
69714: LD_VAR 0 4
69718: PPUSH
69719: CALL_OW 250
69723: PPUSH
69724: LD_VAR 0 4
69728: PPUSH
69729: CALL_OW 251
69733: PPUSH
69734: LD_INT 6
69736: PPUSH
69737: CALL 69308 0 3
69741: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69742: LD_VAR 0 4
69746: PPUSH
69747: CALL_OW 247
69751: PUSH
69752: LD_INT 2
69754: EQUAL
69755: PUSH
69756: LD_VAR 0 7
69760: AND
69761: PUSH
69762: LD_VAR 0 4
69766: PPUSH
69767: CALL_OW 264
69771: PUSH
69772: LD_VAR 0 10
69776: IN
69777: NOT
69778: AND
69779: IFFALSE 69818
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69781: LD_VAR 0 4
69785: PPUSH
69786: LD_VAR 0 7
69790: PUSH
69791: LD_INT 1
69793: ARRAY
69794: PUSH
69795: LD_INT 1
69797: ARRAY
69798: PPUSH
69799: LD_VAR 0 7
69803: PUSH
69804: LD_INT 1
69806: ARRAY
69807: PUSH
69808: LD_INT 2
69810: ARRAY
69811: PPUSH
69812: CALL_OW 116
69816: GO 70107
// if path > tag then
69818: LD_VAR 0 2
69822: PUSH
69823: LD_VAR 0 9
69827: GREATER
69828: IFFALSE 70036
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69830: LD_ADDR_VAR 0 6
69834: PUSH
69835: LD_VAR 0 5
69839: PPUSH
69840: LD_INT 91
69842: PUSH
69843: LD_VAR 0 4
69847: PUSH
69848: LD_INT 8
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: LIST
69855: PPUSH
69856: CALL_OW 72
69860: ST_TO_ADDR
// if nearEnemy then
69861: LD_VAR 0 6
69865: IFFALSE 69934
// begin if GetWeapon ( i ) = ru_time_lapser then
69867: LD_VAR 0 4
69871: PPUSH
69872: CALL_OW 264
69876: PUSH
69877: LD_INT 49
69879: EQUAL
69880: IFFALSE 69908
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69882: LD_VAR 0 4
69886: PPUSH
69887: LD_VAR 0 6
69891: PPUSH
69892: LD_VAR 0 4
69896: PPUSH
69897: CALL_OW 74
69901: PPUSH
69902: CALL_OW 112
69906: GO 69932
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69908: LD_VAR 0 4
69912: PPUSH
69913: LD_VAR 0 6
69917: PPUSH
69918: LD_VAR 0 4
69922: PPUSH
69923: CALL_OW 74
69927: PPUSH
69928: CALL_OW 115
// end else
69932: GO 70034
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69934: LD_VAR 0 4
69938: PPUSH
69939: LD_VAR 0 2
69943: PUSH
69944: LD_VAR 0 9
69948: ARRAY
69949: PUSH
69950: LD_INT 1
69952: ARRAY
69953: PPUSH
69954: LD_VAR 0 2
69958: PUSH
69959: LD_VAR 0 9
69963: ARRAY
69964: PUSH
69965: LD_INT 2
69967: ARRAY
69968: PPUSH
69969: CALL_OW 297
69973: PUSH
69974: LD_INT 6
69976: GREATER
69977: IFFALSE 70020
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69979: LD_VAR 0 4
69983: PPUSH
69984: LD_VAR 0 2
69988: PUSH
69989: LD_VAR 0 9
69993: ARRAY
69994: PUSH
69995: LD_INT 1
69997: ARRAY
69998: PPUSH
69999: LD_VAR 0 2
70003: PUSH
70004: LD_VAR 0 9
70008: ARRAY
70009: PUSH
70010: LD_INT 2
70012: ARRAY
70013: PPUSH
70014: CALL_OW 114
70018: GO 70034
// SetTag ( i , tag ) ;
70020: LD_VAR 0 4
70024: PPUSH
70025: LD_VAR 0 9
70029: PPUSH
70030: CALL_OW 109
// end else
70034: GO 70107
// if enemy then
70036: LD_VAR 0 5
70040: IFFALSE 70107
// begin if GetWeapon ( i ) = ru_time_lapser then
70042: LD_VAR 0 4
70046: PPUSH
70047: CALL_OW 264
70051: PUSH
70052: LD_INT 49
70054: EQUAL
70055: IFFALSE 70083
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70057: LD_VAR 0 4
70061: PPUSH
70062: LD_VAR 0 5
70066: PPUSH
70067: LD_VAR 0 4
70071: PPUSH
70072: CALL_OW 74
70076: PPUSH
70077: CALL_OW 112
70081: GO 70107
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70083: LD_VAR 0 4
70087: PPUSH
70088: LD_VAR 0 5
70092: PPUSH
70093: LD_VAR 0 4
70097: PPUSH
70098: CALL_OW 74
70102: PPUSH
70103: CALL_OW 115
// end ; end ;
70107: GO 69687
70109: POP
70110: POP
// end ;
70111: LD_VAR 0 3
70115: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70116: LD_INT 0
70118: PPUSH
70119: PPUSH
70120: PPUSH
// if not unit or IsInUnit ( unit ) then
70121: LD_VAR 0 1
70125: NOT
70126: PUSH
70127: LD_VAR 0 1
70131: PPUSH
70132: CALL_OW 310
70136: OR
70137: IFFALSE 70141
// exit ;
70139: GO 70232
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70141: LD_ADDR_VAR 0 4
70145: PUSH
70146: LD_VAR 0 1
70150: PPUSH
70151: CALL_OW 250
70155: PPUSH
70156: LD_VAR 0 2
70160: PPUSH
70161: LD_INT 1
70163: PPUSH
70164: CALL_OW 272
70168: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70169: LD_ADDR_VAR 0 5
70173: PUSH
70174: LD_VAR 0 1
70178: PPUSH
70179: CALL_OW 251
70183: PPUSH
70184: LD_VAR 0 2
70188: PPUSH
70189: LD_INT 1
70191: PPUSH
70192: CALL_OW 273
70196: ST_TO_ADDR
// if ValidHex ( x , y ) then
70197: LD_VAR 0 4
70201: PPUSH
70202: LD_VAR 0 5
70206: PPUSH
70207: CALL_OW 488
70211: IFFALSE 70232
// ComTurnXY ( unit , x , y ) ;
70213: LD_VAR 0 1
70217: PPUSH
70218: LD_VAR 0 4
70222: PPUSH
70223: LD_VAR 0 5
70227: PPUSH
70228: CALL_OW 118
// end ;
70232: LD_VAR 0 3
70236: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70237: LD_INT 0
70239: PPUSH
70240: PPUSH
// result := false ;
70241: LD_ADDR_VAR 0 3
70245: PUSH
70246: LD_INT 0
70248: ST_TO_ADDR
// if not units then
70249: LD_VAR 0 2
70253: NOT
70254: IFFALSE 70258
// exit ;
70256: GO 70303
// for i in units do
70258: LD_ADDR_VAR 0 4
70262: PUSH
70263: LD_VAR 0 2
70267: PUSH
70268: FOR_IN
70269: IFFALSE 70301
// if See ( side , i ) then
70271: LD_VAR 0 1
70275: PPUSH
70276: LD_VAR 0 4
70280: PPUSH
70281: CALL_OW 292
70285: IFFALSE 70299
// begin result := true ;
70287: LD_ADDR_VAR 0 3
70291: PUSH
70292: LD_INT 1
70294: ST_TO_ADDR
// exit ;
70295: POP
70296: POP
70297: GO 70303
// end ;
70299: GO 70268
70301: POP
70302: POP
// end ;
70303: LD_VAR 0 3
70307: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70308: LD_INT 0
70310: PPUSH
70311: PPUSH
70312: PPUSH
70313: PPUSH
// if not unit or not points then
70314: LD_VAR 0 1
70318: NOT
70319: PUSH
70320: LD_VAR 0 2
70324: NOT
70325: OR
70326: IFFALSE 70330
// exit ;
70328: GO 70420
// dist := 99999 ;
70330: LD_ADDR_VAR 0 5
70334: PUSH
70335: LD_INT 99999
70337: ST_TO_ADDR
// for i in points do
70338: LD_ADDR_VAR 0 4
70342: PUSH
70343: LD_VAR 0 2
70347: PUSH
70348: FOR_IN
70349: IFFALSE 70418
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70351: LD_ADDR_VAR 0 6
70355: PUSH
70356: LD_VAR 0 1
70360: PPUSH
70361: LD_VAR 0 4
70365: PUSH
70366: LD_INT 1
70368: ARRAY
70369: PPUSH
70370: LD_VAR 0 4
70374: PUSH
70375: LD_INT 2
70377: ARRAY
70378: PPUSH
70379: CALL_OW 297
70383: ST_TO_ADDR
// if tmpDist < dist then
70384: LD_VAR 0 6
70388: PUSH
70389: LD_VAR 0 5
70393: LESS
70394: IFFALSE 70416
// begin result := i ;
70396: LD_ADDR_VAR 0 3
70400: PUSH
70401: LD_VAR 0 4
70405: ST_TO_ADDR
// dist := tmpDist ;
70406: LD_ADDR_VAR 0 5
70410: PUSH
70411: LD_VAR 0 6
70415: ST_TO_ADDR
// end ; end ;
70416: GO 70348
70418: POP
70419: POP
// end ;
70420: LD_VAR 0 3
70424: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70425: LD_INT 0
70427: PPUSH
// uc_side := side ;
70428: LD_ADDR_OWVAR 20
70432: PUSH
70433: LD_VAR 0 1
70437: ST_TO_ADDR
// uc_nation := 3 ;
70438: LD_ADDR_OWVAR 21
70442: PUSH
70443: LD_INT 3
70445: ST_TO_ADDR
// vc_chassis := 25 ;
70446: LD_ADDR_OWVAR 37
70450: PUSH
70451: LD_INT 25
70453: ST_TO_ADDR
// vc_engine := engine_siberite ;
70454: LD_ADDR_OWVAR 39
70458: PUSH
70459: LD_INT 3
70461: ST_TO_ADDR
// vc_control := control_computer ;
70462: LD_ADDR_OWVAR 38
70466: PUSH
70467: LD_INT 3
70469: ST_TO_ADDR
// vc_weapon := 59 ;
70470: LD_ADDR_OWVAR 40
70474: PUSH
70475: LD_INT 59
70477: ST_TO_ADDR
// result := CreateVehicle ;
70478: LD_ADDR_VAR 0 5
70482: PUSH
70483: CALL_OW 45
70487: ST_TO_ADDR
// SetDir ( result , d ) ;
70488: LD_VAR 0 5
70492: PPUSH
70493: LD_VAR 0 4
70497: PPUSH
70498: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70502: LD_VAR 0 5
70506: PPUSH
70507: LD_VAR 0 2
70511: PPUSH
70512: LD_VAR 0 3
70516: PPUSH
70517: LD_INT 0
70519: PPUSH
70520: CALL_OW 48
// end ;
70524: LD_VAR 0 5
70528: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70529: LD_INT 0
70531: PPUSH
70532: PPUSH
70533: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70534: LD_ADDR_VAR 0 2
70538: PUSH
70539: LD_INT 0
70541: PUSH
70542: LD_INT 0
70544: PUSH
70545: LD_INT 0
70547: PUSH
70548: LD_INT 0
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70557: LD_VAR 0 1
70561: NOT
70562: PUSH
70563: LD_VAR 0 1
70567: PPUSH
70568: CALL_OW 264
70572: PUSH
70573: LD_INT 12
70575: PUSH
70576: LD_INT 51
70578: PUSH
70579: LD_INT 32
70581: PUSH
70582: LD_EXP 47
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: IN
70593: NOT
70594: OR
70595: IFFALSE 70599
// exit ;
70597: GO 70697
// for i := 1 to 3 do
70599: LD_ADDR_VAR 0 3
70603: PUSH
70604: DOUBLE
70605: LD_INT 1
70607: DEC
70608: ST_TO_ADDR
70609: LD_INT 3
70611: PUSH
70612: FOR_TO
70613: IFFALSE 70695
// begin tmp := GetCargo ( cargo , i ) ;
70615: LD_ADDR_VAR 0 4
70619: PUSH
70620: LD_VAR 0 1
70624: PPUSH
70625: LD_VAR 0 3
70629: PPUSH
70630: CALL_OW 289
70634: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70635: LD_ADDR_VAR 0 2
70639: PUSH
70640: LD_VAR 0 2
70644: PPUSH
70645: LD_VAR 0 3
70649: PPUSH
70650: LD_VAR 0 4
70654: PPUSH
70655: CALL_OW 1
70659: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70660: LD_ADDR_VAR 0 2
70664: PUSH
70665: LD_VAR 0 2
70669: PPUSH
70670: LD_INT 4
70672: PPUSH
70673: LD_VAR 0 2
70677: PUSH
70678: LD_INT 4
70680: ARRAY
70681: PUSH
70682: LD_VAR 0 4
70686: PLUS
70687: PPUSH
70688: CALL_OW 1
70692: ST_TO_ADDR
// end ;
70693: GO 70612
70695: POP
70696: POP
// end ;
70697: LD_VAR 0 2
70701: RET
// export function Length ( array ) ; begin
70702: LD_INT 0
70704: PPUSH
// result := array + 0 ;
70705: LD_ADDR_VAR 0 2
70709: PUSH
70710: LD_VAR 0 1
70714: PUSH
70715: LD_INT 0
70717: PLUS
70718: ST_TO_ADDR
// end ; end_of_file
70719: LD_VAR 0 2
70723: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70724: LD_VAR 0 1
70728: PUSH
70729: LD_INT 200
70731: DOUBLE
70732: GREATEREQUAL
70733: IFFALSE 70741
70735: LD_INT 299
70737: DOUBLE
70738: LESSEQUAL
70739: IFTRUE 70743
70741: GO 70775
70743: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70744: LD_VAR 0 1
70748: PPUSH
70749: LD_VAR 0 2
70753: PPUSH
70754: LD_VAR 0 3
70758: PPUSH
70759: LD_VAR 0 4
70763: PPUSH
70764: LD_VAR 0 5
70768: PPUSH
70769: CALL 25874 0 5
70773: GO 70852
70775: LD_INT 300
70777: DOUBLE
70778: GREATEREQUAL
70779: IFFALSE 70787
70781: LD_INT 399
70783: DOUBLE
70784: LESSEQUAL
70785: IFTRUE 70789
70787: GO 70851
70789: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70790: LD_VAR 0 1
70794: PPUSH
70795: LD_VAR 0 2
70799: PPUSH
70800: LD_VAR 0 3
70804: PPUSH
70805: LD_VAR 0 4
70809: PPUSH
70810: LD_VAR 0 5
70814: PPUSH
70815: LD_VAR 0 6
70819: PPUSH
70820: LD_VAR 0 7
70824: PPUSH
70825: LD_VAR 0 8
70829: PPUSH
70830: LD_VAR 0 9
70834: PPUSH
70835: LD_VAR 0 10
70839: PPUSH
70840: LD_VAR 0 11
70844: PPUSH
70845: CALL 23516 0 11
70849: GO 70852
70851: POP
// end ;
70852: PPOPN 11
70854: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70855: LD_VAR 0 1
70859: PPUSH
70860: LD_VAR 0 2
70864: PPUSH
70865: LD_VAR 0 3
70869: PPUSH
70870: LD_VAR 0 4
70874: PPUSH
70875: LD_VAR 0 5
70879: PPUSH
70880: CALL 25610 0 5
// end ; end_of_file
70884: PPOPN 5
70886: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70887: LD_VAR 0 1
70891: PPUSH
70892: LD_VAR 0 2
70896: PPUSH
70897: LD_VAR 0 3
70901: PPUSH
70902: LD_VAR 0 4
70906: PPUSH
70907: LD_VAR 0 5
70911: PPUSH
70912: LD_VAR 0 6
70916: PPUSH
70917: CALL 11209 0 6
// end ;
70921: PPOPN 6
70923: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70924: LD_INT 0
70926: PPUSH
// begin if not units then
70927: LD_VAR 0 1
70931: NOT
70932: IFFALSE 70936
// exit ;
70934: GO 71024
// if p1 = 1 then
70936: LD_VAR 0 2
70940: PUSH
70941: LD_INT 1
70943: EQUAL
70944: IFFALSE 71024
// begin if p2 = 1 then
70946: LD_VAR 0 3
70950: PUSH
70951: LD_INT 1
70953: EQUAL
70954: IFFALSE 70985
// begin for i in units do
70956: LD_ADDR_VAR 0 7
70960: PUSH
70961: LD_VAR 0 1
70965: PUSH
70966: FOR_IN
70967: IFFALSE 70983
// begin SetUnitAttackType ( i , 3 ) ;
70969: LD_VAR 0 7
70973: PPUSH
70974: LD_INT 3
70976: PPUSH
70977: CALL_OW 603
// end ;
70981: GO 70966
70983: POP
70984: POP
// end ; if p2 = 2 then
70985: LD_VAR 0 3
70989: PUSH
70990: LD_INT 2
70992: EQUAL
70993: IFFALSE 71024
// begin for i in units do
70995: LD_ADDR_VAR 0 7
70999: PUSH
71000: LD_VAR 0 1
71004: PUSH
71005: FOR_IN
71006: IFFALSE 71022
// begin SetUnitAttackType ( i , 1 ) ;
71008: LD_VAR 0 7
71012: PPUSH
71013: LD_INT 1
71015: PPUSH
71016: CALL_OW 603
// end ;
71020: GO 71005
71022: POP
71023: POP
// end ; end ; end ;
71024: PPOPN 7
71026: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71027: CALL 11184 0 0
// end ;
71031: PPOPN 1
71033: END
