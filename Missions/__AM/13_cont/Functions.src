Export Function PrepareUnit(ident, exist_mode);
var unit;
begin

    if exist_mode then
    unit := CreateCharacter(ident)
    else
    unit := NewCharacter(ident);

    result := unit;
End;

Export Function PrepareVehicle(chassis, engine, control, weapon, fuel);
begin
vc_chassis := chassis;
vc_engine := engine;
vc_control := control;
vc_weapon := weapon;
vc_fuel_battery := fuel;
End;

Export Function Connect(vehicle);
var i, t, mech, tmp, j;
begin
if not vehicle or not GetControl(vehicle) = control_remote then
   exit;

tmp := FilterAllUnits([[f_side, GetSide(vehicle)], [f_or, [f_btype, b_control_tower], [f_weapon, ar_control_tower]]]);

if not tmp then
   exit;

result := [];

for i in tmp do
    begin
    t := UnitsInside(i);

    if t then
       for j in t do
           result := Insert(result, result+1, j);
    end;

if not result then
   exit;

mech := result[1];

if result > 1 then
   for i = 2 to result do
       begin
       t := GetSkill(result[i], 3) - UnitsLinked(result[i]);

       if t >= (GetSkill(mech, 3) - UnitsLinked(mech)) then
          mech := result[i];
       end;

ComLinkTo(vehicle, mech);
End;

Export function DialogRandom(characters, dialogMID, dialogFID);
var i, speaker;
begin
characters := characters diff [JMM, Stevens, Lisa, Donaldson, Bobby, Cyrus, Denis, Brown, Gladstone, Houten, Cornel, Gary, Frank, Kikuchi, Powell];

if not characters then
   exit;

speaker := characters[rand(1, characters)];

if GetSex(speaker) = sex_male then
   Say(speaker, dialogMID)
else
   Say(speaker, dialogFID);

result := speaker;
end;

Export function PrepareDifficulty;
begin
     SetTech(5, 8, state_researched);

     if difficulty = 1 then
     begin
       SetTech(66, 8, state_researched);
       SetTech(67, 8, state_disabled);
       SetTech(68, 8, state_disabled);

       SetTech(51, 8, state_researched);
       SetTech(52, 8, state_disabled);
       SetTech(53, 8, state_disabled);

       SetTech(60, 8, state_researched);
       SetTech(61, 8, state_disabled);
       SetTech(62, 8, state_disabled);
     end;

     if difficulty = 2 then
     begin
       SetTech(66, 8, state_researched);
       SetTech(67, 8, state_researched);
       SetTech(68, 8, state_disabled);

       SetTech(51, 8, state_researched);
       SetTech(52, 8, state_researched);
       SetTech(53, 8, state_researched);

       SetTech(60, 8, state_researched);
       SetTech(61, 8, state_researched);
       SetTech(62, 8, state_disabled);

     end;

     if difficulty = 3 then
     begin
       SetTech(66, 8, state_researched);
       SetTech(67, 8, state_researched);
       SetTech(68, 8, state_disabled);

       SetTech(51, 8, state_researched);
       SetTech(52, 8, state_researched);
       SetTech(53, 8, state_researched);

       SetTech(60, 8, state_researched);
       SetTech(61, 8, state_researched);
       SetTech(62, 8, state_disabled);

     end;

end;

Export Function IntBazooka(side, targetSide);
var ta, c, i, list, filter;
begin

    list   := FilterAllUnits([[f_side, side], [f_class, class_bazooker]]);
    filter := FilterAllUnits([[f_side, targetSide], [f_not, [f_type, unit_building]]]);

    c := Rand(1, 3);

        for i = 1 to list do
        for ta in filter do
            begin

            if GetDistUnits(list[i], ta) <= 13 then
                begin

                    Case c of
                    1: ComTimeShift(list[i], GetX(ta), GetY(ta));
                    2: ComSpaceShift(list[i], GetX(ta) + Rand(-1,1), GetY(ta) + Rand(-1,1));
                    3: ;
                    end;

                end;
            end;

End;

Export function EnchancedSaveCharacters(charactersList, ident);
var i;
begin
    for i in charactersList do
        SaveCharacters(i, ident);
end;

Export function RespawnAttackInfantry(side, nation, soldierCount, sniperCount, bazookCount, mortalCount, medicCount, skil, spawnArea, healArea, targetSide);
var i, j,  un, damageUnit_list, medic_list, soldiersOK_list, enemyUnits, und, target1, target2;
begin

        for i = 1 to medicCount do
        begin

                uc_side = side;
                uc_nation = nation;

                hc_name = '';
                hc_gallery = '';
                PrepareHuman(false, 4, skil);

                un = CreateHuman;
                PlaceUnitArea(un, spawnArea, false);

        end;


       for i = 1 to soldierCount do
        begin

                uc_side = side;
                uc_nation = nation;

                hc_name = '';
                hc_gallery = '';
                PrepareHuman(false, 1, skil);

                un = CreateHuman;
                PlaceUnitArea(un, spawnArea, false);

        end;

        for i = 1 to sniperCount do
        begin

                uc_side = side;
                uc_nation = nation;

                hc_name = '';
                hc_gallery = '';
                PrepareHuman(false, 5, skil);

                un = CreateHuman;
                PlaceUnitArea(un, spawnArea, false);

        end;

        for i = 1 to bazookCount do
        begin

                uc_side = side;
                uc_nation = nation;

                hc_name = '';
                hc_gallery = '';
                PrepareHuman(false, 9, skil);

                un = CreateHuman;
                PlaceUnitArea(un, spawnArea, false);

        end;

        for i = 1 to mortalCount do
        begin

                uc_side = side;
                uc_nation = nation;

                hc_name = '';
                hc_gallery = '';
                PrepareHuman(false, 8, skil);

                un = CreateHuman;
                PlaceUnitArea(un, spawnArea, false);

        end;

        medic_list = FilterAllUnits([[f_side, side], [f_class, 4]]);

        for i in medic_list do
            if GetTag(i) = 1 then
               medic_list := medic_list diff i;

        for i in medic_list do ComMoveToArea(i, healArea);
        repeat
            wait(0$1);
            damageUnit_list = FilterAllUnits([[f_side, side], [f_and, [f_not, [f_lives, 550]],[f_lives, 250]]]);
            soldiersOK_list =  FilterAllUnits([[f_side, side], [f_or,[f_class, 1], [f_class, 5], [f_class, 8], [f_class, 9]], [f_lives, 1000]]);

            IF medicCount > 0  then
            begin
                    if damageUnit_list > 0 then
                    begin
                            for i in damageUnit_list  do
                            begin
                                    ComMoveToArea(i, healArea);
                                    for j in medic_list do 
                                    AddComHeal(j, i);
                            end;
                        end;
            end;

            for i in soldiersOK_list do
            begin

                    target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
                    target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

                    If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
                    begin
                            ComAttackUnit(i, target1);
                            end  else
                            begin
                            ComAttackUnit(i, target2);
                    end;

            end;


        until soldiersOK_list = [];

END;

// Spawn vehicle and attack

export function RespawnAttackVehicle(area, side, vehCount, mehskill, nation, vehEngine, vehControl, RUWeapons, ARWeapons, AMWeapon, targetSide);
var i, j, un, veh, ruChassisTab, arChassisTab, amChassisTab, vehicleOK_list, target1, target2;
begin

  amChassisTab = [];
  arChassisTab = [];
  ruChassisTab = [];

  for i = 1 to vehCount do
  begin
  wait(0$01);

  IF nation = 1 then
  begin

            uc_side = side;
            uc_nation = nation;

            vc_engine = vehengine;
            vc_weapon = AMWeapon[Rand(1, AMWeapon)];

            for j = 1 to AMWeapon do
            begin
                 IF AMWeapon[j] = 2 or AMWeapon[j] = 3 then
                 begin
                      amChassisTab = [1,2,3,4,5];
                      vc_chassis = amChassisTab[Rand(1,amChassisTab)];
                 end;

                 IF AMWeapon[j] = 4 or AMWeapon[j] = 5 or AMWeapon[j] = 9 or AMWeapon[j] = 11 or AMWeapon[j] = 7 then
                 begin
                      amChassisTab = [2,3,4,5];
                      vc_chassis = amChassisTab[Rand(1, amChassisTab)];
                 end;

                 IF AMWeapon[j] = 8 or AMWeapon[j] = 6 or AMWeapon[j] = 10 then
                 begin
                      amChassisTab = [4,5];
                      vc_chassis = amChassisTab[Rand(1, amChassisTab)];
                 end;

           end;

            veh = CreateVehicle;
            PlaceUnitArea(veh, area, false);

            IF vc_control = 1 then
            begin

                hc_gallery = '';
                hc_name = '';
                PrepareHuman(false, 3, mehskill);

                un = CreateHuman;
                PlaceHumanInUnit(un, veh);

            end;


            i = i + 1;

    end;

    IF nation = 2 then
    begin

            uc_side = side;
            uc_nation = nation;

            vc_engine = vehengine;
            if FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_control, control_remote], [f_ok]]) <= 8 then vc_control = vehcontrol[Rand(1, vehcontrol)]
            else vc_control = control_apeman;
            vc_weapon = ARWeapons[Rand(1, ARWeapons)];

            for j = 1 to ARWeapons do
            begin

                 IF ARWeapons[j] = 24 or ARWeapons[j] = 22 or ARWeapons[j] = 23 or ARWeapons[j] = 30 then
                 begin
                      arChassisTab = [11, 12, 13, 14];
                      vc_chassis = arChassisTab[Rand(1, arChassisTab)];
                 end;

                 IF ARWeapons[j] = 29 or ARWeapons[j] = 28 or ARWeapons[j] = 27 or ARWeapons[j] = 26 or ARWeapons[j] = 25 then
                 begin
                      arChassisTab = [13, 14];
                      vc_chassis = arChassisTab[Rand(1, arChassisTab)];
                 end;

           end;

            veh = CreateVehicle;
            PlaceUnitArea(veh, area, false);

            IF vc_control = 1 then
            begin

                hc_gallery = '';
                hc_name = '';
                PrepareHuman(false, 3, mehskill);

                un = CreateHuman;
                PlaceHumanInUnit(un, veh);

            end;


            i = i + 1;

    end;

    IF nation = 3 then
    begin

            uc_side = side;
            uc_nation = nation;

            vc_engine = vehengine;
            vc_control = vehcontrol[Rand(1, vehcontrol)];
            vc_weapon = RUWeapons[Rand(1, RUWeapons)];


            for j = 1 to RuWeapons do
            begin

                IF RUWeapons[j] = 42 or RUWeapons[j] = 43 or RUWeapons[j] = 44 or RUWeapons[j] = 45 or RUWeapons[j] = 49 then
                begin
                    ruChassisTab = [24];
                    vc_chassis = ruChassisTab[Rand(1, ruChassisTab)];
                end;

                IF RUWeapons[j] = 46 or RUWeapons[j] = 47 then
                begin
                    ruChassisTab = [24];
                    vc_chassis = ruChassisTab[Rand(1, ruChassisTab)];
                end;

           end;


            veh = CreateVehicle;
            PlaceUnitArea(veh, area, false);

            IF vc_control = 1 then
            begin
                if uc_side = 8 then uc_nation = 2
                else uc_nation = nation;
                hc_gallery = '';
                hc_name = '';
                PrepareHuman(false, 3, mehskill);

                un = CreateHuman;
                PlaceHumanInUnit(un, veh);

            end;

    end;

  end;

    repeat
        wait(0$1);                                                                                                                                     
        vehicleOK_list = FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 250], [f_or, [f_weapon, 25], [f_weapon, 26], [f_weapon, 27], [f_weapon, 28], [f_weapon, 29], [f_weapon, 46], [f_weapon, 44], [f_weapon, 45], [f_weapon, 47]]]);

        IF vehicleOK_list > 0 then
        begin

            for i in vehicleOK_list do
            begin

            if GetSide(i) <> side then
               begin
               ComStop(i);
               continue;
               end;

            target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
            target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

            If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
            begin
                ComAttackUnit(i, target1);
            end
            else
            begin
                ComAttackUnit(i, target2);
            end;
        end;
      end;
    until vehicleOK_list = 0;
END;

Export function AttackSelfBomb(side, targetSide);
var i, veh, veh_List, target1, target2;
begin

veh_List = FilterAllUnits([[f_side, side], [f_weapon, 29]]);

if veh_list = 0 then exit;

if veh_list > 0 then
begin

 for i in veh_List do
 begin
   target1 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_lives, 250], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);
   ComAttackUnit(i, target1);

   IF NOT HasTask(i) then
   begin
       wait(0$0.1);
       target2 := NearestUnitToUnit(FilterAllUnits([[f_side, targetSide], [f_lives, 250]]), i);
       ComAttackUnit(i, target2);
   end;
 end;

end;

END;