// starting begin ResetFog ;
   0: CALL_OW 335
// FogOff ( 1 ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 344
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 32 0 0
// DebugMode ;
  19: CALL 98 0 0
// PrepareAmerican ;
  23: CALL 115 0 0
// Action ;
  27: CALL 2916 0 0
// end ;
  31: END
// export debug ; export donaldson_commander , brown_commander , save_group ; export mission_prefix , mission_prefix_prev ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// debug := false ;
  35: LD_ADDR_EXP 1
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// mission_prefix := 07_ ;
  43: LD_ADDR_EXP 5
  47: PUSH
  48: LD_STRING 07_
  50: ST_TO_ADDR
// mission_prefix_prev := [ 06_ , 05_ , 04_ ] ;
  51: LD_ADDR_EXP 6
  55: PUSH
  56: LD_STRING 06_
  58: PUSH
  59: LD_STRING 05_
  61: PUSH
  62: LD_STRING 04_
  64: PUSH
  65: EMPTY
  66: LIST
  67: LIST
  68: LIST
  69: ST_TO_ADDR
// donaldson_commander := false ;
  70: LD_ADDR_EXP 2
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// brown_commander := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// save_group := [ ] ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: EMPTY
  92: ST_TO_ADDR
// end ;
  93: LD_VAR 0 1
  97: RET
// function DebugMode ; begin
  98: LD_INT 0
 100: PPUSH
// if not debug then
 101: LD_EXP 1
 105: NOT
 106: IFFALSE 110
// exit ;
 108: GO 110
// end ; end_of_file
 110: LD_VAR 0 1
 114: RET
// export JMM , Gladstone , Frank , Lisa , Cyrus , Bobby , Donaldson , Brown , Houten , Khatam , Harisson ; export gamma_commander ; export RandGuy ; export function PrepareAmerican ; var others , others_delta , others4 , veh , team , dep , bar , lab , fac , bun , filter , i , j ; begin
 115: LD_INT 0
 117: PPUSH
 118: PPUSH
 119: PPUSH
 120: PPUSH
 121: PPUSH
 122: PPUSH
 123: PPUSH
 124: PPUSH
 125: PPUSH
 126: PPUSH
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// PrepareBase ;
 131: CALL 2582 0 0
// uc_side := 1 ;
 135: LD_ADDR_OWVAR 20
 139: PUSH
 140: LD_INT 1
 142: ST_TO_ADDR
// uc_nation := 1 ;
 143: LD_ADDR_OWVAR 21
 147: PUSH
 148: LD_INT 1
 150: ST_TO_ADDR
// team := [ ] ;
 151: LD_ADDR_VAR 0 6
 155: PUSH
 156: EMPTY
 157: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 06c_ ) ;
 158: LD_ADDR_EXP 7
 162: PUSH
 163: LD_STRING JMM
 165: PPUSH
 166: LD_EXP 1
 170: NOT
 171: PPUSH
 172: LD_STRING 06c_
 174: PPUSH
 175: CALL 4399 0 3
 179: ST_TO_ADDR
// if GetClass ( JMM ) = 2 then
 180: LD_EXP 7
 184: PPUSH
 185: CALL_OW 257
 189: PUSH
 190: LD_INT 2
 192: EQUAL
 193: IFFALSE 207
// SetClass ( JMM , 1 ) ;
 195: LD_EXP 7
 199: PPUSH
 200: LD_INT 1
 202: PPUSH
 203: CALL_OW 336
// gamma_commander := LoadVariable ( GammaCommander , 3 ) ;
 207: LD_ADDR_EXP 18
 211: PUSH
 212: LD_STRING GammaCommander
 214: PPUSH
 215: LD_INT 3
 217: PPUSH
 218: CALL_OW 30
 222: ST_TO_ADDR
// if gamma_commander = 1 then
 223: LD_EXP 18
 227: PUSH
 228: LD_INT 1
 230: EQUAL
 231: IFFALSE 257
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 04_ ) ;
 233: LD_ADDR_EXP 13
 237: PUSH
 238: LD_STRING Donaldson
 240: PPUSH
 241: LD_EXP 1
 245: NOT
 246: PPUSH
 247: LD_STRING 04_
 249: PPUSH
 250: CALL 4399 0 3
 254: ST_TO_ADDR
// end else
 255: GO 328
// begin if LoadVariable ( DonaldsonIn06 , 0 ) then
 257: LD_STRING DonaldsonIn06
 259: PPUSH
 260: LD_INT 0
 262: PPUSH
 263: CALL_OW 30
 267: IFFALSE 293
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 06c_ ) else
 269: LD_ADDR_EXP 13
 273: PUSH
 274: LD_STRING Donaldson
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 06c_
 285: PPUSH
 286: CALL 4399 0 3
 290: ST_TO_ADDR
 291: GO 328
// if not LoadVariable ( DonaldsonStayInDelta , 0 ) then
 293: LD_STRING DonaldsonStayInDelta
 295: PPUSH
 296: LD_INT 0
 298: PPUSH
 299: CALL_OW 30
 303: NOT
 304: IFFALSE 328
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 04_ ) ;
 306: LD_ADDR_EXP 13
 310: PUSH
 311: LD_STRING Donaldson
 313: PPUSH
 314: LD_EXP 1
 318: NOT
 319: PPUSH
 320: LD_STRING 04_
 322: PPUSH
 323: CALL 4399 0 3
 327: ST_TO_ADDR
// end ; if Donaldson then
 328: LD_EXP 13
 332: IFFALSE 350
// team := team ^ Donaldson ;
 334: LD_ADDR_VAR 0 6
 338: PUSH
 339: LD_VAR 0 6
 343: PUSH
 344: LD_EXP 13
 348: ADD
 349: ST_TO_ADDR
// if gamma_commander = 2 then
 350: LD_EXP 18
 354: PUSH
 355: LD_INT 2
 357: EQUAL
 358: IFFALSE 384
// begin Brown := PrepareUnit ( Brown , ( not debug ) , 04_ ) ;
 360: LD_ADDR_EXP 14
 364: PUSH
 365: LD_STRING Brown
 367: PPUSH
 368: LD_EXP 1
 372: NOT
 373: PPUSH
 374: LD_STRING 04_
 376: PPUSH
 377: CALL 4399 0 3
 381: ST_TO_ADDR
// end else
 382: GO 455
// begin if LoadVariable ( BrownIn06 , 0 ) then
 384: LD_STRING BrownIn06
 386: PPUSH
 387: LD_INT 0
 389: PPUSH
 390: CALL_OW 30
 394: IFFALSE 420
// Brown := PrepareUnit ( Brown , ( not debug ) , 06c_ ) else
 396: LD_ADDR_EXP 14
 400: PUSH
 401: LD_STRING Brown
 403: PPUSH
 404: LD_EXP 1
 408: NOT
 409: PPUSH
 410: LD_STRING 06c_
 412: PPUSH
 413: CALL 4399 0 3
 417: ST_TO_ADDR
 418: GO 455
// if not LoadVariable ( BrownStayInDelta , 0 ) then
 420: LD_STRING BrownStayInDelta
 422: PPUSH
 423: LD_INT 0
 425: PPUSH
 426: CALL_OW 30
 430: NOT
 431: IFFALSE 455
// Brown := PrepareUnit ( Brown , ( not debug ) , 04_ ) ;
 433: LD_ADDR_EXP 14
 437: PUSH
 438: LD_STRING Brown
 440: PPUSH
 441: LD_EXP 1
 445: NOT
 446: PPUSH
 447: LD_STRING 04_
 449: PPUSH
 450: CALL 4399 0 3
 454: ST_TO_ADDR
// end ; if Brown then
 455: LD_EXP 14
 459: IFFALSE 477
// team := team ^ Brown ;
 461: LD_ADDR_VAR 0 6
 465: PUSH
 466: LD_VAR 0 6
 470: PUSH
 471: LD_EXP 14
 475: ADD
 476: ST_TO_ADDR
// if gamma_commander = 3 then
 477: LD_EXP 18
 481: PUSH
 482: LD_INT 3
 484: EQUAL
 485: IFFALSE 522
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 487: LD_ADDR_EXP 15
 491: PUSH
 492: LD_STRING VanHouten
 494: PPUSH
 495: LD_INT 0
 497: PPUSH
 498: LD_STRING 
 500: PPUSH
 501: CALL 4399 0 3
 505: ST_TO_ADDR
// team := team ^ Houten ;
 506: LD_ADDR_VAR 0 6
 510: PUSH
 511: LD_VAR 0 6
 515: PUSH
 516: LD_EXP 15
 520: ADD
 521: ST_TO_ADDR
// end ; if LoadVariable ( GladstoneIn06 , 0 ) then
 522: LD_STRING GladstoneIn06
 524: PPUSH
 525: LD_INT 0
 527: PPUSH
 528: CALL_OW 30
 532: IFFALSE 558
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) else
 534: LD_ADDR_EXP 8
 538: PUSH
 539: LD_STRING Gladstone
 541: PPUSH
 542: LD_EXP 1
 546: NOT
 547: PPUSH
 548: LD_STRING 06c_
 550: PPUSH
 551: CALL 4399 0 3
 555: ST_TO_ADDR
 556: GO 592
// if LoadVariable ( GladstoneStayInDelta , 0 ) then
 558: LD_STRING GladstoneStayInDelta
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL_OW 30
 568: IFFALSE 592
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06_ ) ;
 570: LD_ADDR_EXP 8
 574: PUSH
 575: LD_STRING Gladstone
 577: PPUSH
 578: LD_EXP 1
 582: NOT
 583: PPUSH
 584: LD_STRING 06_
 586: PPUSH
 587: CALL 4399 0 3
 591: ST_TO_ADDR
// if Gladstone then
 592: LD_EXP 8
 596: IFFALSE 614
// team := team ^ Gladstone ;
 598: LD_ADDR_VAR 0 6
 602: PUSH
 603: LD_VAR 0 6
 607: PUSH
 608: LD_EXP 8
 612: ADD
 613: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , 03_ ) ;
 614: LD_ADDR_EXP 16
 618: PUSH
 619: LD_STRING Khatam
 621: PPUSH
 622: LD_EXP 1
 626: NOT
 627: PPUSH
 628: LD_STRING 03_
 630: PPUSH
 631: CALL 4399 0 3
 635: ST_TO_ADDR
// if Khatam then
 636: LD_EXP 16
 640: IFFALSE 658
// team := team ^ Khatam ;
 642: LD_ADDR_VAR 0 6
 646: PUSH
 647: LD_VAR 0 6
 651: PUSH
 652: LD_EXP 16
 656: ADD
 657: ST_TO_ADDR
// if LoadVariable ( LisaIn06 , 0 ) then
 658: LD_STRING LisaIn06
 660: PPUSH
 661: LD_INT 0
 663: PPUSH
 664: CALL_OW 30
 668: IFFALSE 694
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 06c_ ) else
 670: LD_ADDR_EXP 10
 674: PUSH
 675: LD_STRING Lisa
 677: PPUSH
 678: LD_EXP 1
 682: NOT
 683: PPUSH
 684: LD_STRING 06c_
 686: PPUSH
 687: CALL 4399 0 3
 691: ST_TO_ADDR
 692: GO 729
// if not LoadVariable ( LisaStayInDelta , 0 ) then
 694: LD_STRING LisaStayInDelta
 696: PPUSH
 697: LD_INT 0
 699: PPUSH
 700: CALL_OW 30
 704: NOT
 705: IFFALSE 729
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 04_ ) ;
 707: LD_ADDR_EXP 10
 711: PUSH
 712: LD_STRING Lisa
 714: PPUSH
 715: LD_EXP 1
 719: NOT
 720: PPUSH
 721: LD_STRING 04_
 723: PPUSH
 724: CALL 4399 0 3
 728: ST_TO_ADDR
// if Lisa then
 729: LD_EXP 10
 733: IFFALSE 751
// team := team ^ Lisa ;
 735: LD_ADDR_VAR 0 6
 739: PUSH
 740: LD_VAR 0 6
 744: PUSH
 745: LD_EXP 10
 749: ADD
 750: ST_TO_ADDR
// if not Lisa then
 751: LD_EXP 10
 755: NOT
 756: IFFALSE 1009
// begin if LoadVariable ( CyrusIn06 , 0 ) then
 758: LD_STRING CyrusIn06
 760: PPUSH
 761: LD_INT 0
 763: PPUSH
 764: CALL_OW 30
 768: IFFALSE 794
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 06c_ ) else
 770: LD_ADDR_EXP 11
 774: PUSH
 775: LD_STRING Cyrus
 777: PPUSH
 778: LD_EXP 1
 782: NOT
 783: PPUSH
 784: LD_STRING 06c_
 786: PPUSH
 787: CALL 4399 0 3
 791: ST_TO_ADDR
 792: GO 858
// if not LoadVariable ( CyrusStayInDelta , 0 ) then
 794: LD_STRING CyrusStayInDelta
 796: PPUSH
 797: LD_INT 0
 799: PPUSH
 800: CALL_OW 30
 804: NOT
 805: IFFALSE 858
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 04_ ) ;
 807: LD_ADDR_EXP 11
 811: PUSH
 812: LD_STRING Cyrus
 814: PPUSH
 815: LD_EXP 1
 819: NOT
 820: PPUSH
 821: LD_STRING 04_
 823: PPUSH
 824: CALL 4399 0 3
 828: ST_TO_ADDR
// if not Cyrus then
 829: LD_EXP 11
 833: NOT
 834: IFFALSE 858
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 03_ ) ;
 836: LD_ADDR_EXP 11
 840: PUSH
 841: LD_STRING Cyrus
 843: PPUSH
 844: LD_EXP 1
 848: NOT
 849: PPUSH
 850: LD_STRING 03_
 852: PPUSH
 853: CALL 4399 0 3
 857: ST_TO_ADDR
// end ; if Cyrus then
 858: LD_EXP 11
 862: IFFALSE 880
// team := team ^ Cyrus ;
 864: LD_ADDR_VAR 0 6
 868: PUSH
 869: LD_VAR 0 6
 873: PUSH
 874: LD_EXP 11
 878: ADD
 879: ST_TO_ADDR
// if not Cyrus then
 880: LD_EXP 11
 884: NOT
 885: IFFALSE 1009
// begin if LoadVariable ( BobbyIn06 , 0 ) then
 887: LD_STRING BobbyIn06
 889: PPUSH
 890: LD_INT 0
 892: PPUSH
 893: CALL_OW 30
 897: IFFALSE 923
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 06c_ ) else
 899: LD_ADDR_EXP 12
 903: PUSH
 904: LD_STRING Bobby
 906: PPUSH
 907: LD_EXP 1
 911: NOT
 912: PPUSH
 913: LD_STRING 06c_
 915: PPUSH
 916: CALL 4399 0 3
 920: ST_TO_ADDR
 921: GO 987
// if not LoadVariable ( BobbyStayInDelta , 0 ) then
 923: LD_STRING BobbyStayInDelta
 925: PPUSH
 926: LD_INT 0
 928: PPUSH
 929: CALL_OW 30
 933: NOT
 934: IFFALSE 987
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , 04_ ) ;
 936: LD_ADDR_EXP 12
 940: PUSH
 941: LD_STRING Bobby
 943: PPUSH
 944: LD_EXP 1
 948: NOT
 949: PPUSH
 950: LD_STRING 04_
 952: PPUSH
 953: CALL 4399 0 3
 957: ST_TO_ADDR
// if not Bobby then
 958: LD_EXP 12
 962: NOT
 963: IFFALSE 987
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 03_ ) ;
 965: LD_ADDR_EXP 12
 969: PUSH
 970: LD_STRING Bobby
 972: PPUSH
 973: LD_EXP 1
 977: NOT
 978: PPUSH
 979: LD_STRING 03_
 981: PPUSH
 982: CALL 4399 0 3
 986: ST_TO_ADDR
// end ; if Bobby then
 987: LD_EXP 12
 991: IFFALSE 1009
// team := team ^ Bobby ;
 993: LD_ADDR_VAR 0 6
 997: PUSH
 998: LD_VAR 0 6
1002: PUSH
1003: LD_EXP 12
1007: ADD
1008: ST_TO_ADDR
// end ; end ; others4 := CreateCharacterSet ( othersGamma ) ;
1009: LD_ADDR_VAR 0 4
1013: PUSH
1014: LD_STRING othersGamma
1016: PPUSH
1017: CALL_OW 31
1021: ST_TO_ADDR
// others := CreateCharacterSet ( 06_other_survivors ) ;
1022: LD_ADDR_VAR 0 2
1026: PUSH
1027: LD_STRING 06_other_survivors
1029: PPUSH
1030: CALL_OW 31
1034: ST_TO_ADDR
// others := others union others4 ;
1035: LD_ADDR_VAR 0 2
1039: PUSH
1040: LD_VAR 0 2
1044: PUSH
1045: LD_VAR 0 4
1049: UNION
1050: ST_TO_ADDR
// team := team ^ others ;
1051: LD_ADDR_VAR 0 6
1055: PUSH
1056: LD_VAR 0 6
1060: PUSH
1061: LD_VAR 0 2
1065: ADD
1066: ST_TO_ADDR
// InitHc ;
1067: CALL_OW 19
// if team <= 12 then
1071: LD_VAR 0 6
1075: PUSH
1076: LD_INT 12
1078: LESSEQUAL
1079: IFFALSE 1128
// repeat PrepareHuman ( false , rand ( 1 , 4 ) , 5 ) ;
1081: LD_INT 0
1083: PPUSH
1084: LD_INT 1
1086: PPUSH
1087: LD_INT 4
1089: PPUSH
1090: CALL_OW 12
1094: PPUSH
1095: LD_INT 5
1097: PPUSH
1098: CALL_OW 380
// team := team ^ CreateHuman ;
1102: LD_ADDR_VAR 0 6
1106: PUSH
1107: LD_VAR 0 6
1111: PUSH
1112: CALL_OW 44
1116: ADD
1117: ST_TO_ADDR
// until team > 12 ;
1118: LD_VAR 0 6
1122: PUSH
1123: LD_INT 12
1125: GREATER
1126: IFFALSE 1081
// for i in others do
1128: LD_ADDR_VAR 0 13
1132: PUSH
1133: LD_VAR 0 2
1137: PUSH
1138: FOR_IN
1139: IFFALSE 1207
// begin if GetClass ( i ) = 2 then
1141: LD_VAR 0 13
1145: PPUSH
1146: CALL_OW 257
1150: PUSH
1151: LD_INT 2
1153: EQUAL
1154: IFFALSE 1168
// SetClass ( i , 1 ) ;
1156: LD_VAR 0 13
1160: PPUSH
1161: LD_INT 1
1163: PPUSH
1164: CALL_OW 336
// for j = 1 to 4 do
1168: LD_ADDR_VAR 0 14
1172: PUSH
1173: DOUBLE
1174: LD_INT 1
1176: DEC
1177: ST_TO_ADDR
1178: LD_INT 4
1180: PUSH
1181: FOR_TO
1182: IFFALSE 1203
// AddExperience ( i , j , 3000 ) ;
1184: LD_VAR 0 13
1188: PPUSH
1189: LD_VAR 0 14
1193: PPUSH
1194: LD_INT 3000
1196: PPUSH
1197: CALL_OW 492
1201: GO 1181
1203: POP
1204: POP
// end ;
1205: GO 1138
1207: POP
1208: POP
// if UnitFilter ( team , [ f_class , 2 ] ) then
1209: LD_VAR 0 6
1213: PPUSH
1214: LD_INT 25
1216: PUSH
1217: LD_INT 2
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: PPUSH
1224: CALL_OW 72
1228: IFFALSE 1274
// for i in UnitFilter ( team , [ f_class , 2 ] ) do
1230: LD_ADDR_VAR 0 13
1234: PUSH
1235: LD_VAR 0 6
1239: PPUSH
1240: LD_INT 25
1242: PUSH
1243: LD_INT 2
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PPUSH
1250: CALL_OW 72
1254: PUSH
1255: FOR_IN
1256: IFFALSE 1272
// SetClass ( i , 1 ) ;
1258: LD_VAR 0 13
1262: PPUSH
1263: LD_INT 1
1265: PPUSH
1266: CALL_OW 336
1270: GO 1255
1272: POP
1273: POP
// dep := FilterAllUnits ( [ f_btype , b_depot ] ) ;
1274: LD_ADDR_VAR 0 7
1278: PUSH
1279: LD_INT 30
1281: PUSH
1282: LD_INT 0
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// bar := FilterAllUnits ( [ f_btype , b_armoury ] ) ;
1294: LD_ADDR_VAR 0 8
1298: PUSH
1299: LD_INT 30
1301: PUSH
1302: LD_INT 4
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: PPUSH
1309: CALL_OW 69
1313: ST_TO_ADDR
// lab := FilterAllUnits ( [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab ] ] ) ;
1314: LD_ADDR_VAR 0 9
1318: PUSH
1319: LD_INT 2
1321: PUSH
1322: LD_INT 30
1324: PUSH
1325: LD_INT 7
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: LD_INT 30
1334: PUSH
1335: LD_INT 6
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: LIST
1346: PPUSH
1347: CALL_OW 69
1351: ST_TO_ADDR
// fac := FilterAllUnits ( [ f_btype , b_factory ] ) ;
1352: LD_ADDR_VAR 0 10
1356: PUSH
1357: LD_INT 30
1359: PUSH
1360: LD_INT 3
1362: PUSH
1363: EMPTY
1364: LIST
1365: LIST
1366: PPUSH
1367: CALL_OW 69
1371: ST_TO_ADDR
// bun := FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ;
1372: LD_ADDR_VAR 0 11
1376: PUSH
1377: LD_INT 2
1379: PUSH
1380: LD_INT 30
1382: PUSH
1383: LD_INT 32
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 30
1392: PUSH
1393: LD_INT 31
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: PPUSH
1405: CALL_OW 69
1409: ST_TO_ADDR
// SetBName ( dep , Gamma ) ;
1410: LD_VAR 0 7
1414: PPUSH
1415: LD_STRING Gamma
1417: PPUSH
1418: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
1422: LD_VAR 0 7
1426: PPUSH
1427: CALL_OW 274
1431: PPUSH
1432: LD_INT 2
1434: PPUSH
1435: LD_INT 10000
1437: PPUSH
1438: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_cans , 10000 ) ;
1442: LD_VAR 0 7
1446: PPUSH
1447: CALL_OW 274
1451: PPUSH
1452: LD_INT 1
1454: PPUSH
1455: LD_INT 10000
1457: PPUSH
1458: CALL_OW 277
// if dep then
1462: LD_VAR 0 7
1466: IFFALSE 1568
// begin PlaceHumanInUnit ( JMM , dep [ 1 ] ) ;
1468: LD_EXP 7
1472: PPUSH
1473: LD_VAR 0 7
1477: PUSH
1478: LD_INT 1
1480: ARRAY
1481: PPUSH
1482: CALL_OW 52
// if Brown then
1486: LD_EXP 14
1490: IFFALSE 1526
// begin PlaceHumanInUnit ( Brown , dep [ 1 ] ) ;
1492: LD_EXP 14
1496: PPUSH
1497: LD_VAR 0 7
1501: PUSH
1502: LD_INT 1
1504: ARRAY
1505: PPUSH
1506: CALL_OW 52
// team := team diff Brown ;
1510: LD_ADDR_VAR 0 6
1514: PUSH
1515: LD_VAR 0 6
1519: PUSH
1520: LD_EXP 14
1524: DIFF
1525: ST_TO_ADDR
// end ; if Donaldson then
1526: LD_EXP 13
1530: IFFALSE 1566
// begin PlaceHumanInUnit ( Donaldson , dep [ 1 ] ) ;
1532: LD_EXP 13
1536: PPUSH
1537: LD_VAR 0 7
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
// team := team diff Donaldson ;
1550: LD_ADDR_VAR 0 6
1554: PUSH
1555: LD_VAR 0 6
1559: PUSH
1560: LD_EXP 13
1564: DIFF
1565: ST_TO_ADDR
// end ; end else
1566: GO 1675
// begin PlaceUnitXYR ( JMM , 52 , 16 , 10 , false ) ;
1568: LD_EXP 7
1572: PPUSH
1573: LD_INT 52
1575: PPUSH
1576: LD_INT 16
1578: PPUSH
1579: LD_INT 10
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 50
// if Brown then
1589: LD_EXP 14
1593: IFFALSE 1632
// begin PlaceUnitXYR ( Brown , 52 , 16 , 10 , false ) ;
1595: LD_EXP 14
1599: PPUSH
1600: LD_INT 52
1602: PPUSH
1603: LD_INT 16
1605: PPUSH
1606: LD_INT 10
1608: PPUSH
1609: LD_INT 0
1611: PPUSH
1612: CALL_OW 50
// team := team diff Brown ;
1616: LD_ADDR_VAR 0 6
1620: PUSH
1621: LD_VAR 0 6
1625: PUSH
1626: LD_EXP 14
1630: DIFF
1631: ST_TO_ADDR
// end ; if Donaldson then
1632: LD_EXP 13
1636: IFFALSE 1675
// begin PlaceUnitXYR ( Donaldson , 52 , 16 , 10 , false ) ;
1638: LD_EXP 13
1642: PPUSH
1643: LD_INT 52
1645: PPUSH
1646: LD_INT 16
1648: PPUSH
1649: LD_INT 10
1651: PPUSH
1652: LD_INT 0
1654: PPUSH
1655: CALL_OW 50
// team := team diff Donaldson ;
1659: LD_ADDR_VAR 0 6
1663: PUSH
1664: LD_VAR 0 6
1668: PUSH
1669: LD_EXP 13
1673: DIFF
1674: ST_TO_ADDR
// end ; end ; if bun and UnitFilter ( team , [ f_class , 1 ] ) then
1675: LD_VAR 0 11
1679: PUSH
1680: LD_VAR 0 6
1684: PPUSH
1685: LD_INT 25
1687: PUSH
1688: LD_INT 1
1690: PUSH
1691: EMPTY
1692: LIST
1693: LIST
1694: PPUSH
1695: CALL_OW 72
1699: AND
1700: IFFALSE 1809
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1702: LD_ADDR_VAR 0 12
1706: PUSH
1707: LD_VAR 0 6
1711: PPUSH
1712: LD_INT 25
1714: PUSH
1715: LD_INT 1
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: PPUSH
1722: CALL_OW 72
1726: ST_TO_ADDR
// for i in bun do
1727: LD_ADDR_VAR 0 13
1731: PUSH
1732: LD_VAR 0 11
1736: PUSH
1737: FOR_IN
1738: IFFALSE 1807
// begin if not filter then
1740: LD_VAR 0 12
1744: NOT
1745: IFFALSE 1749
// break ;
1747: GO 1807
// PlaceHumanInUnit ( filter [ 1 ] , i ) ;
1749: LD_VAR 0 12
1753: PUSH
1754: LD_INT 1
1756: ARRAY
1757: PPUSH
1758: LD_VAR 0 13
1762: PPUSH
1763: CALL_OW 52
// team := team diff filter [ 1 ] ;
1767: LD_ADDR_VAR 0 6
1771: PUSH
1772: LD_VAR 0 6
1776: PUSH
1777: LD_VAR 0 12
1781: PUSH
1782: LD_INT 1
1784: ARRAY
1785: DIFF
1786: ST_TO_ADDR
// filter := Delete ( filter , 1 ) ;
1787: LD_ADDR_VAR 0 12
1791: PUSH
1792: LD_VAR 0 12
1796: PPUSH
1797: LD_INT 1
1799: PPUSH
1800: CALL_OW 3
1804: ST_TO_ADDR
// end ;
1805: GO 1737
1807: POP
1808: POP
// end ; if bar and UnitFilter ( team , [ f_class , 1 ] ) then
1809: LD_VAR 0 8
1813: PUSH
1814: LD_VAR 0 6
1818: PPUSH
1819: LD_INT 25
1821: PUSH
1822: LD_INT 1
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PPUSH
1829: CALL_OW 72
1833: AND
1834: IFFALSE 1956
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1836: LD_ADDR_VAR 0 12
1840: PUSH
1841: LD_VAR 0 6
1845: PPUSH
1846: LD_INT 25
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PPUSH
1856: CALL_OW 72
1860: ST_TO_ADDR
// for i = 1 to filter do
1861: LD_ADDR_VAR 0 13
1865: PUSH
1866: DOUBLE
1867: LD_INT 1
1869: DEC
1870: ST_TO_ADDR
1871: LD_VAR 0 12
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1938
// begin if ( i <= 6 ) then
1879: LD_VAR 0 13
1883: PUSH
1884: LD_INT 6
1886: LESSEQUAL
1887: IFFALSE 1915
// PlaceHumanInUnit ( filter [ i ] , bar [ 1 ] ) else
1889: LD_VAR 0 12
1893: PUSH
1894: LD_VAR 0 13
1898: ARRAY
1899: PPUSH
1900: LD_VAR 0 8
1904: PUSH
1905: LD_INT 1
1907: ARRAY
1908: PPUSH
1909: CALL_OW 52
1913: GO 1936
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1915: LD_VAR 0 12
1919: PUSH
1920: LD_VAR 0 13
1924: ARRAY
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: LD_INT 0
1931: PPUSH
1932: CALL_OW 49
// end ;
1936: GO 1876
1938: POP
1939: POP
// team := team diff filter ;
1940: LD_ADDR_VAR 0 6
1944: PUSH
1945: LD_VAR 0 6
1949: PUSH
1950: LD_VAR 0 12
1954: DIFF
1955: ST_TO_ADDR
// end ; if lab and UnitFilter ( team , [ f_class , 4 ] ) then
1956: LD_VAR 0 9
1960: PUSH
1961: LD_VAR 0 6
1965: PPUSH
1966: LD_INT 25
1968: PUSH
1969: LD_INT 4
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PPUSH
1976: CALL_OW 72
1980: AND
1981: IFFALSE 2103
// begin filter := UnitFilter ( team , [ f_class , 4 ] ) ;
1983: LD_ADDR_VAR 0 12
1987: PUSH
1988: LD_VAR 0 6
1992: PPUSH
1993: LD_INT 25
1995: PUSH
1996: LD_INT 4
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: PPUSH
2003: CALL_OW 72
2007: ST_TO_ADDR
// for i = 1 to filter do
2008: LD_ADDR_VAR 0 13
2012: PUSH
2013: DOUBLE
2014: LD_INT 1
2016: DEC
2017: ST_TO_ADDR
2018: LD_VAR 0 12
2022: PUSH
2023: FOR_TO
2024: IFFALSE 2085
// begin if ( i <= 6 ) then
2026: LD_VAR 0 13
2030: PUSH
2031: LD_INT 6
2033: LESSEQUAL
2034: IFFALSE 2062
// PlaceHumanInUnit ( filter [ i ] , lab [ 1 ] ) else
2036: LD_VAR 0 12
2040: PUSH
2041: LD_VAR 0 13
2045: ARRAY
2046: PPUSH
2047: LD_VAR 0 9
2051: PUSH
2052: LD_INT 1
2054: ARRAY
2055: PPUSH
2056: CALL_OW 52
2060: GO 2083
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
2062: LD_VAR 0 12
2066: PUSH
2067: LD_VAR 0 13
2071: ARRAY
2072: PPUSH
2073: LD_INT 1
2075: PPUSH
2076: LD_INT 0
2078: PPUSH
2079: CALL_OW 49
// end ;
2083: GO 2023
2085: POP
2086: POP
// team := team diff filter ;
2087: LD_ADDR_VAR 0 6
2091: PUSH
2092: LD_VAR 0 6
2096: PUSH
2097: LD_VAR 0 12
2101: DIFF
2102: ST_TO_ADDR
// end ; if fac and UnitFilter ( team , [ f_class , 3 ] ) then
2103: LD_VAR 0 10
2107: PUSH
2108: LD_VAR 0 6
2112: PPUSH
2113: LD_INT 25
2115: PUSH
2116: LD_INT 3
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PPUSH
2123: CALL_OW 72
2127: AND
2128: IFFALSE 2250
// begin filter := UnitFilter ( team , [ f_class , 3 ] ) ;
2130: LD_ADDR_VAR 0 12
2134: PUSH
2135: LD_VAR 0 6
2139: PPUSH
2140: LD_INT 25
2142: PUSH
2143: LD_INT 3
2145: PUSH
2146: EMPTY
2147: LIST
2148: LIST
2149: PPUSH
2150: CALL_OW 72
2154: ST_TO_ADDR
// for i = 1 to filter do
2155: LD_ADDR_VAR 0 13
2159: PUSH
2160: DOUBLE
2161: LD_INT 1
2163: DEC
2164: ST_TO_ADDR
2165: LD_VAR 0 12
2169: PUSH
2170: FOR_TO
2171: IFFALSE 2232
// begin if ( i <= 6 ) then
2173: LD_VAR 0 13
2177: PUSH
2178: LD_INT 6
2180: LESSEQUAL
2181: IFFALSE 2209
// PlaceHumanInUnit ( filter [ i ] , fac [ 1 ] ) else
2183: LD_VAR 0 12
2187: PUSH
2188: LD_VAR 0 13
2192: ARRAY
2193: PPUSH
2194: LD_VAR 0 10
2198: PUSH
2199: LD_INT 1
2201: ARRAY
2202: PPUSH
2203: CALL_OW 52
2207: GO 2230
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
2209: LD_VAR 0 12
2213: PUSH
2214: LD_VAR 0 13
2218: ARRAY
2219: PPUSH
2220: LD_INT 1
2222: PPUSH
2223: LD_INT 0
2225: PPUSH
2226: CALL_OW 49
// end ;
2230: GO 2170
2232: POP
2233: POP
// team := team diff filter ;
2234: LD_ADDR_VAR 0 6
2238: PUSH
2239: LD_VAR 0 6
2243: PUSH
2244: LD_VAR 0 12
2248: DIFF
2249: ST_TO_ADDR
// end ; if team then
2250: LD_VAR 0 6
2254: IFFALSE 2297
// for i in team do
2256: LD_ADDR_VAR 0 13
2260: PUSH
2261: LD_VAR 0 6
2265: PUSH
2266: FOR_IN
2267: IFFALSE 2295
// begin PlaceUnitArea ( i , gammaBaseArea , false ) ;
2269: LD_VAR 0 13
2273: PPUSH
2274: LD_INT 1
2276: PPUSH
2277: LD_INT 0
2279: PPUSH
2280: CALL_OW 49
// ComHold ( i ) ;
2284: LD_VAR 0 13
2288: PPUSH
2289: CALL_OW 140
// end ;
2293: GO 2266
2295: POP
2296: POP
// if fac then
2297: LD_VAR 0 10
2301: IFFALSE 2337
// if UnitsInside ( fac [ 1 ] ) then
2303: LD_VAR 0 10
2307: PUSH
2308: LD_INT 1
2310: ARRAY
2311: PPUSH
2312: CALL_OW 313
2316: IFFALSE 2337
// SetSpecResearch ( fac [ 1 ] , 10 , false ) ;
2318: LD_VAR 0 10
2322: PUSH
2323: LD_INT 1
2325: ARRAY
2326: PPUSH
2327: LD_INT 10
2329: PPUSH
2330: LD_INT 0
2332: PPUSH
2333: CALL_OW 486
// if lab then
2337: LD_VAR 0 9
2341: IFFALSE 2377
// if UnitsInside ( lab [ 1 ] ) then
2343: LD_VAR 0 9
2347: PUSH
2348: LD_INT 1
2350: ARRAY
2351: PPUSH
2352: CALL_OW 313
2356: IFFALSE 2377
// SetSpecResearch ( lab [ 1 ] , 10 , false ) ;
2358: LD_VAR 0 9
2362: PUSH
2363: LD_INT 1
2365: ARRAY
2366: PPUSH
2367: LD_INT 10
2369: PPUSH
2370: LD_INT 0
2372: PPUSH
2373: CALL_OW 486
// uc_side := 4 ;
2377: LD_ADDR_OWVAR 20
2381: PUSH
2382: LD_INT 4
2384: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
2385: LD_ADDR_EXP 17
2389: PUSH
2390: LD_STRING Harisson
2392: PPUSH
2393: LD_INT 0
2395: PPUSH
2396: LD_STRING 
2398: PPUSH
2399: CALL 4399 0 3
2403: ST_TO_ADDR
// veh := PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_double_gun , 100 ) ;
2404: LD_ADDR_VAR 0 5
2408: PUSH
2409: LD_INT 4
2411: PPUSH
2412: LD_INT 1
2414: PPUSH
2415: LD_INT 2
2417: PPUSH
2418: LD_INT 1
2420: PPUSH
2421: LD_INT 1
2423: PPUSH
2424: LD_INT 5
2426: PPUSH
2427: LD_INT 100
2429: PPUSH
2430: CALL 4462 0 7
2434: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2435: LD_VAR 0 5
2439: PPUSH
2440: LD_INT 2
2442: PPUSH
2443: CALL_OW 233
// PlaceUnitXY ( veh , 22 , 9 , false ) ;
2447: LD_VAR 0 5
2451: PPUSH
2452: LD_INT 22
2454: PPUSH
2455: LD_INT 9
2457: PPUSH
2458: LD_INT 0
2460: PPUSH
2461: CALL_OW 48
// PlaceHumanInUnit ( Harisson , veh ) ;
2465: LD_EXP 17
2469: PPUSH
2470: LD_VAR 0 5
2474: PPUSH
2475: CALL_OW 52
// PrepareHuman ( false , 1 , 0 ) ;
2479: LD_INT 0
2481: PPUSH
2482: LD_INT 1
2484: PPUSH
2485: LD_INT 0
2487: PPUSH
2488: CALL_OW 380
// RandGuy := CreateHuman ;
2492: LD_ADDR_EXP 19
2496: PUSH
2497: CALL_OW 44
2501: ST_TO_ADDR
// veh := PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 100 ) ;
2502: LD_ADDR_VAR 0 5
2506: PUSH
2507: LD_INT 4
2509: PPUSH
2510: LD_INT 1
2512: PPUSH
2513: LD_INT 2
2515: PPUSH
2516: LD_INT 1
2518: PPUSH
2519: LD_INT 1
2521: PPUSH
2522: LD_INT 4
2524: PPUSH
2525: LD_INT 100
2527: PPUSH
2528: CALL 4462 0 7
2532: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2533: LD_VAR 0 5
2537: PPUSH
2538: LD_INT 2
2540: PPUSH
2541: CALL_OW 233
// PlaceUnitXY ( veh , 17 , 4 , false ) ;
2545: LD_VAR 0 5
2549: PPUSH
2550: LD_INT 17
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: LD_INT 0
2558: PPUSH
2559: CALL_OW 48
// PlaceHumanInUnit ( RandGuy , veh ) ;
2563: LD_EXP 19
2567: PPUSH
2568: LD_VAR 0 5
2572: PPUSH
2573: CALL_OW 52
// end ;
2577: LD_VAR 0 1
2581: RET
// function PrepareBase ; var blist , i , b ; begin
2582: LD_INT 0
2584: PPUSH
2585: PPUSH
2586: PPUSH
2587: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2588: LD_INT 71
2590: PPUSH
2591: LD_INT 5
2593: PPUSH
2594: LD_INT 1
2596: PPUSH
2597: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2601: LD_ADDR_VAR 0 2
2605: PUSH
2606: LD_STRING GammaBase
2608: PPUSH
2609: EMPTY
2610: PPUSH
2611: CALL_OW 30
2615: ST_TO_ADDR
// if not blist then
2616: LD_VAR 0 2
2620: NOT
2621: IFFALSE 2661
// blist := [ [ b_depot , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2623: LD_ADDR_VAR 0 2
2627: PUSH
2628: LD_INT 0
2630: PUSH
2631: LD_INT 52
2633: PUSH
2634: LD_INT 12
2636: PUSH
2637: LD_INT 3
2639: PUSH
2640: LD_INT 3
2642: PUSH
2643: LD_INT 0
2645: PUSH
2646: LD_INT 0
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: PUSH
2658: EMPTY
2659: LIST
2660: ST_TO_ADDR
// uc_side := 1 ;
2661: LD_ADDR_OWVAR 20
2665: PUSH
2666: LD_INT 1
2668: ST_TO_ADDR
// uc_nation := 1 ;
2669: LD_ADDR_OWVAR 21
2673: PUSH
2674: LD_INT 1
2676: ST_TO_ADDR
// bc_kind1 := - 1 ;
2677: LD_ADDR_OWVAR 44
2681: PUSH
2682: LD_INT 1
2684: NEG
2685: ST_TO_ADDR
// bc_kind2 := - 1 ;
2686: LD_ADDR_OWVAR 45
2690: PUSH
2691: LD_INT 1
2693: NEG
2694: ST_TO_ADDR
// for i in blist do
2695: LD_ADDR_VAR 0 3
2699: PUSH
2700: LD_VAR 0 2
2704: PUSH
2705: FOR_IN
2706: IFFALSE 2857
// begin bc_type := i [ 1 ] ;
2708: LD_ADDR_OWVAR 42
2712: PUSH
2713: LD_VAR 0 3
2717: PUSH
2718: LD_INT 1
2720: ARRAY
2721: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2722: LD_ADDR_OWVAR 43
2726: PUSH
2727: LD_VAR 0 3
2731: PUSH
2732: LD_INT 5
2734: ARRAY
2735: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2736: LD_VAR 0 3
2740: PUSH
2741: LD_INT 1
2743: ARRAY
2744: PUSH
2745: LD_INT 7
2747: PUSH
2748: LD_INT 8
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: IN
2755: IFFALSE 2785
// begin bc_kind1 := i [ 7 ] ;
2757: LD_ADDR_OWVAR 44
2761: PUSH
2762: LD_VAR 0 3
2766: PUSH
2767: LD_INT 7
2769: ARRAY
2770: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
2771: LD_ADDR_OWVAR 45
2775: PUSH
2776: LD_VAR 0 3
2780: PUSH
2781: LD_INT 8
2783: ARRAY
2784: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2785: LD_ADDR_VAR 0 4
2789: PUSH
2790: LD_VAR 0 3
2794: PUSH
2795: LD_INT 2
2797: ARRAY
2798: PPUSH
2799: LD_VAR 0 3
2803: PUSH
2804: LD_INT 3
2806: ARRAY
2807: PPUSH
2808: LD_VAR 0 3
2812: PUSH
2813: LD_INT 4
2815: ARRAY
2816: PPUSH
2817: CALL_OW 47
2821: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2822: LD_VAR 0 4
2826: PPUSH
2827: CALL_OW 266
2831: PUSH
2832: LD_INT 32
2834: EQUAL
2835: IFFALSE 2855
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
2837: LD_VAR 0 4
2841: PPUSH
2842: LD_VAR 0 3
2846: PUSH
2847: LD_INT 7
2849: ARRAY
2850: PPUSH
2851: CALL_OW 431
// end ; end ;
2855: GO 2705
2857: POP
2858: POP
// if not FilterAllUnits ( [ f_btype , b_depot ] ) then
2859: LD_INT 30
2861: PUSH
2862: LD_INT 0
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: PPUSH
2869: CALL_OW 69
2873: NOT
2874: IFFALSE 2911
// begin bc_type := b_depot ;
2876: LD_ADDR_OWVAR 42
2880: PUSH
2881: LD_INT 0
2883: ST_TO_ADDR
// bc_level := 6 ;
2884: LD_ADDR_OWVAR 43
2888: PUSH
2889: LD_INT 6
2891: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2892: LD_ADDR_VAR 0 4
2896: PUSH
2897: LD_INT 52
2899: PPUSH
2900: LD_INT 12
2902: PPUSH
2903: LD_INT 3
2905: PPUSH
2906: CALL_OW 47
2910: ST_TO_ADDR
// end ; end ; end_of_file
2911: LD_VAR 0 1
2915: RET
// export function Action ; var points , i , sol , time , team , filter ; begin
2916: LD_INT 0
2918: PPUSH
2919: PPUSH
2920: PPUSH
2921: PPUSH
2922: PPUSH
2923: PPUSH
2924: PPUSH
// InGameOn ;
2925: CALL_OW 8
// CenterNowOnXY ( 33 , 11 ) ;
2929: LD_INT 33
2931: PPUSH
2932: LD_INT 11
2934: PPUSH
2935: CALL_OW 86
// points := [ [ 29 , 21 ] , [ 41 , 28 ] , [ 52 , 26 ] , [ 49 , 16 ] ] ;
2939: LD_ADDR_VAR 0 2
2943: PUSH
2944: LD_INT 29
2946: PUSH
2947: LD_INT 21
2949: PUSH
2950: EMPTY
2951: LIST
2952: LIST
2953: PUSH
2954: LD_INT 41
2956: PUSH
2957: LD_INT 28
2959: PUSH
2960: EMPTY
2961: LIST
2962: LIST
2963: PUSH
2964: LD_INT 52
2966: PUSH
2967: LD_INT 26
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: PUSH
2974: LD_INT 49
2976: PUSH
2977: LD_INT 16
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: ST_TO_ADDR
// sol := ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Cyrus , Bobby , Gladstone , Houten , Khatam ] ) [ 1 ] ;
2990: LD_ADDR_VAR 0 4
2994: PUSH
2995: LD_INT 22
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: PUSH
3005: LD_INT 26
3007: PUSH
3008: LD_INT 1
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PPUSH
3019: CALL_OW 69
3023: PUSH
3024: LD_EXP 7
3028: PUSH
3029: LD_EXP 14
3033: PUSH
3034: LD_EXP 11
3038: PUSH
3039: LD_EXP 12
3043: PUSH
3044: LD_EXP 8
3048: PUSH
3049: LD_EXP 15
3053: PUSH
3054: LD_EXP 16
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: DIFF
3068: PUSH
3069: LD_INT 1
3071: ARRAY
3072: ST_TO_ADDR
// if sol then
3073: LD_VAR 0 4
3077: IFFALSE 3108
// begin ComMoveXY ( sol , 50 , 18 ) ;
3079: LD_VAR 0 4
3083: PPUSH
3084: LD_INT 50
3086: PPUSH
3087: LD_INT 18
3089: PPUSH
3090: CALL_OW 111
// AddComTurnUnit ( sol , Harisson ) ;
3094: LD_VAR 0 4
3098: PPUSH
3099: LD_EXP 17
3103: PPUSH
3104: CALL_OW 179
// end ; for i in points do
3108: LD_ADDR_VAR 0 3
3112: PUSH
3113: LD_VAR 0 2
3117: PUSH
3118: FOR_IN
3119: IFFALSE 3159
// AddComMoveXY ( [ Harisson , RandGuy ] , i [ 1 ] , i [ 2 ] ) ;
3121: LD_EXP 17
3125: PUSH
3126: LD_EXP 19
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: PPUSH
3135: LD_VAR 0 3
3139: PUSH
3140: LD_INT 1
3142: ARRAY
3143: PPUSH
3144: LD_VAR 0 3
3148: PUSH
3149: LD_INT 2
3151: ARRAY
3152: PPUSH
3153: CALL_OW 171
3157: GO 3118
3159: POP
3160: POP
// AddComExitVehicle ( [ Harisson , RandGuy ] ) ;
3161: LD_EXP 17
3165: PUSH
3166: LD_EXP 19
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: PPUSH
3175: CALL_OW 181
// AddComTurnUnit ( [ Harisson , RandGuy ] , sol ) ;
3179: LD_EXP 17
3183: PUSH
3184: LD_EXP 19
3188: PUSH
3189: EMPTY
3190: LIST
3191: LIST
3192: PPUSH
3193: LD_VAR 0 4
3197: PPUSH
3198: CALL_OW 179
// time := 0 0$20 ;
3202: LD_ADDR_VAR 0 5
3206: PUSH
3207: LD_INT 700
3209: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
3210: LD_INT 10
3212: PPUSH
3213: CALL_OW 67
// time := time - 0 0$0.3 ;
3217: LD_ADDR_VAR 0 5
3221: PUSH
3222: LD_VAR 0 5
3226: PUSH
3227: LD_INT 10
3229: MINUS
3230: ST_TO_ADDR
// until not IsInUnit ( Harisson ) or time <= 0 0$00 ;
3231: LD_EXP 17
3235: PPUSH
3236: CALL_OW 310
3240: NOT
3241: PUSH
3242: LD_VAR 0 5
3246: PUSH
3247: LD_INT 0
3249: LESSEQUAL
3250: OR
3251: IFFALSE 3210
// Say ( sol , D1-Sol1-1 ) ;
3253: LD_VAR 0 4
3257: PPUSH
3258: LD_STRING D1-Sol1-1
3260: PPUSH
3261: CALL_OW 88
// Say ( Harisson , D1-Har-1 ) ;
3265: LD_EXP 17
3269: PPUSH
3270: LD_STRING D1-Har-1
3272: PPUSH
3273: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3277: LD_INT 10
3279: PPUSH
3280: CALL_OW 67
// ComMoveXY ( sol , 35 , 21 ) ;
3284: LD_VAR 0 4
3288: PPUSH
3289: LD_INT 35
3291: PPUSH
3292: LD_INT 21
3294: PPUSH
3295: CALL_OW 111
// ComExitBuilding ( JMM ) ;
3299: LD_EXP 7
3303: PPUSH
3304: CALL_OW 122
// AddComMoveUnit ( JMM , Harisson ) ;
3308: LD_EXP 7
3312: PPUSH
3313: LD_EXP 17
3317: PPUSH
3318: CALL_OW 172
// ComTurnUnit ( [ Harisson , RandGuy ] , JMM ) ;
3322: LD_EXP 17
3326: PUSH
3327: LD_EXP 19
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: PPUSH
3336: LD_EXP 7
3340: PPUSH
3341: CALL_OW 119
// time := 0 0$3 ;
3345: LD_ADDR_VAR 0 5
3349: PUSH
3350: LD_INT 105
3352: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3353: LD_INT 35
3355: PPUSH
3356: CALL_OW 67
// time := time - 0 0$1 ;
3360: LD_ADDR_VAR 0 5
3364: PUSH
3365: LD_VAR 0 5
3369: PUSH
3370: LD_INT 35
3372: MINUS
3373: ST_TO_ADDR
// until GetDistUnits ( JMM , Harisson ) < 4 or time = 0 0$00 ;
3374: LD_EXP 7
3378: PPUSH
3379: LD_EXP 17
3383: PPUSH
3384: CALL_OW 296
3388: PUSH
3389: LD_INT 4
3391: LESS
3392: PUSH
3393: LD_VAR 0 5
3397: PUSH
3398: LD_INT 0
3400: EQUAL
3401: OR
3402: IFFALSE 3353
// ComTurnUnit ( JMM , Harisson ) ;
3404: LD_EXP 7
3408: PPUSH
3409: LD_EXP 17
3413: PPUSH
3414: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3418: LD_EXP 7
3422: PPUSH
3423: LD_STRING D1-JMM-1
3425: PPUSH
3426: CALL_OW 88
// Say ( Harisson , D1-Har-2 ) ;
3430: LD_EXP 17
3434: PPUSH
3435: LD_STRING D1-Har-2
3437: PPUSH
3438: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3442: LD_EXP 7
3446: PPUSH
3447: LD_STRING D1-JMM-2
3449: PPUSH
3450: CALL_OW 88
// Say ( Harisson , D1-Har-3 ) ;
3454: LD_EXP 17
3458: PPUSH
3459: LD_STRING D1-Har-3
3461: PPUSH
3462: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3466: LD_EXP 7
3470: PPUSH
3471: LD_STRING D1-JMM-3
3473: PPUSH
3474: CALL_OW 88
// Say ( Harisson , D1-Har-4 ) ;
3478: LD_EXP 17
3482: PPUSH
3483: LD_STRING D1-Har-4
3485: PPUSH
3486: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3490: LD_EXP 7
3494: PPUSH
3495: LD_STRING D1-JMM-4
3497: PPUSH
3498: CALL_OW 88
// Say ( Harisson , D1-Har-5 ) ;
3502: LD_EXP 17
3506: PPUSH
3507: LD_STRING D1-Har-5
3509: PPUSH
3510: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3514: LD_EXP 7
3518: PPUSH
3519: LD_STRING D1-JMM-5
3521: PPUSH
3522: CALL_OW 88
// Say ( Harisson , D1-Har-6 ) ;
3526: LD_EXP 17
3530: PPUSH
3531: LD_STRING D1-Har-6
3533: PPUSH
3534: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3538: LD_EXP 7
3542: PPUSH
3543: LD_STRING D1-JMM-6
3545: PPUSH
3546: CALL_OW 88
// EndMission ;
3550: CALL 3559 0 0
// end ;
3554: LD_VAR 0 1
3558: RET
// export function EndMission ; var commander , i , all ; begin
3559: LD_INT 0
3561: PPUSH
3562: PPUSH
3563: PPUSH
3564: PPUSH
// case gamma_commander of 1 :
3565: LD_EXP 18
3569: PUSH
3570: LD_INT 1
3572: DOUBLE
3573: EQUAL
3574: IFTRUE 3578
3576: GO 3591
3578: POP
// commander := Donaldson ; 2 :
3579: LD_ADDR_VAR 0 2
3583: PUSH
3584: LD_EXP 13
3588: ST_TO_ADDR
3589: GO 3634
3591: LD_INT 2
3593: DOUBLE
3594: EQUAL
3595: IFTRUE 3599
3597: GO 3612
3599: POP
// commander := Brown ; 3 :
3600: LD_ADDR_VAR 0 2
3604: PUSH
3605: LD_EXP 14
3609: ST_TO_ADDR
3610: GO 3634
3612: LD_INT 3
3614: DOUBLE
3615: EQUAL
3616: IFTRUE 3620
3618: GO 3633
3620: POP
// commander := Houten ; end ;
3621: LD_ADDR_VAR 0 2
3625: PUSH
3626: LD_EXP 15
3630: ST_TO_ADDR
3631: GO 3634
3633: POP
// all := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , commander ] ;
3634: LD_ADDR_VAR 0 4
3638: PUSH
3639: LD_INT 22
3641: PUSH
3642: LD_INT 1
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: LD_INT 21
3651: PUSH
3652: LD_INT 1
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: PPUSH
3663: CALL_OW 69
3667: PUSH
3668: LD_EXP 7
3672: PUSH
3673: LD_VAR 0 2
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: DIFF
3682: ST_TO_ADDR
// if UnitFilter ( all , [ f_class , 2 ] ) then
3683: LD_VAR 0 4
3687: PPUSH
3688: LD_INT 25
3690: PUSH
3691: LD_INT 2
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PPUSH
3698: CALL_OW 72
3702: IFFALSE 3748
// for i in UnitFilter ( all , [ f_class , 2 ] ) do
3704: LD_ADDR_VAR 0 3
3708: PUSH
3709: LD_VAR 0 4
3713: PPUSH
3714: LD_INT 25
3716: PUSH
3717: LD_INT 2
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: PPUSH
3724: CALL_OW 72
3728: PUSH
3729: FOR_IN
3730: IFFALSE 3746
// SetClass ( i , 2 ) ;
3732: LD_VAR 0 3
3736: PPUSH
3737: LD_INT 2
3739: PPUSH
3740: CALL_OW 336
3744: GO 3729
3746: POP
3747: POP
// save_group := CharacterSelection ( 1 , 10 , 10 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ all ^ [ sel_dont_change_class , sel_not_changeable ] ^ [ commander , Harisson ] , [ [ class_soldier , 3 ] , [ class_mechanic , 3 , 6 ] , [ class_scientistic , 1 ] ] ) ;
3748: LD_ADDR_EXP 4
3752: PUSH
3753: LD_STRING 1
3755: PPUSH
3756: LD_INT 10
3758: PPUSH
3759: LD_INT 10
3761: PPUSH
3762: LD_INT -5
3764: PUSH
3765: LD_EXP 7
3769: PUSH
3770: LD_INT -2
3772: PUSH
3773: LD_INT -3
3775: PUSH
3776: LD_INT -5
3778: PUSH
3779: EMPTY
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: PUSH
3786: LD_VAR 0 4
3790: ADD
3791: PUSH
3792: LD_INT -6
3794: PUSH
3795: LD_INT -4
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: ADD
3802: PUSH
3803: LD_VAR 0 2
3807: PUSH
3808: LD_EXP 17
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: ADD
3817: PPUSH
3818: LD_INT 1
3820: PUSH
3821: LD_INT 3
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: PUSH
3828: LD_INT 3
3830: PUSH
3831: LD_INT 3
3833: PUSH
3834: LD_INT 6
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: LIST
3841: PUSH
3842: LD_INT 4
3844: PUSH
3845: LD_INT 1
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: LIST
3856: PPUSH
3857: CALL_OW 42
3861: ST_TO_ADDR
// SaveCharacters ( all diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , Houten , Harisson , Khatam ] ^ save_group , 07_othersGamma ) ;
3862: LD_VAR 0 4
3866: PUSH
3867: LD_EXP 7
3871: PUSH
3872: LD_EXP 8
3876: PUSH
3877: LD_EXP 10
3881: PUSH
3882: LD_EXP 11
3886: PUSH
3887: LD_EXP 12
3891: PUSH
3892: LD_EXP 9
3896: PUSH
3897: LD_EXP 13
3901: PUSH
3902: LD_EXP 14
3906: PUSH
3907: LD_EXP 15
3911: PUSH
3912: LD_EXP 17
3916: PUSH
3917: LD_EXP 16
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: PUSH
3935: LD_EXP 4
3939: ADD
3940: DIFF
3941: PPUSH
3942: LD_STRING 07_othersGamma
3944: PPUSH
3945: CALL_OW 38
// SaveCharacters ( save_group diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , Houten , Harisson , Khatam , 0 ] , 07_others ) ;
3949: LD_EXP 4
3953: PUSH
3954: LD_EXP 7
3958: PUSH
3959: LD_EXP 8
3963: PUSH
3964: LD_EXP 10
3968: PUSH
3969: LD_EXP 11
3973: PUSH
3974: LD_EXP 12
3978: PUSH
3979: LD_EXP 9
3983: PUSH
3984: LD_EXP 13
3988: PUSH
3989: LD_EXP 14
3993: PUSH
3994: LD_EXP 15
3998: PUSH
3999: LD_EXP 17
4003: PUSH
4004: LD_EXP 16
4008: PUSH
4009: LD_INT 0
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: DIFF
4026: PPUSH
4027: LD_STRING 07_others
4029: PPUSH
4030: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4034: LD_EXP 7
4038: PPUSH
4039: LD_EXP 5
4043: PUSH
4044: LD_STRING JMM
4046: STR
4047: PPUSH
4048: CALL_OW 38
// if Lisa then
4052: LD_EXP 10
4056: IFFALSE 4098
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4058: LD_EXP 10
4062: PPUSH
4063: LD_EXP 5
4067: PUSH
4068: LD_STRING Lisa
4070: STR
4071: PPUSH
4072: CALL_OW 38
// if Lisa in save_group then
4076: LD_EXP 10
4080: PUSH
4081: LD_EXP 4
4085: IN
4086: IFFALSE 4098
// SaveVariable ( true , LisaIn07 ) ;
4088: LD_INT 1
4090: PPUSH
4091: LD_STRING LisaIn07
4093: PPUSH
4094: CALL_OW 39
// end ; if Bobby then
4098: LD_EXP 12
4102: IFFALSE 4144
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4104: LD_EXP 12
4108: PPUSH
4109: LD_EXP 5
4113: PUSH
4114: LD_STRING Bobby
4116: STR
4117: PPUSH
4118: CALL_OW 38
// if Bobby in save_group then
4122: LD_EXP 12
4126: PUSH
4127: LD_EXP 4
4131: IN
4132: IFFALSE 4144
// SaveVariable ( true , BobbyIn07 ) ;
4134: LD_INT 1
4136: PPUSH
4137: LD_STRING BobbyIn07
4139: PPUSH
4140: CALL_OW 39
// end ; if Cyrus then
4144: LD_EXP 11
4148: IFFALSE 4190
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4150: LD_EXP 11
4154: PPUSH
4155: LD_EXP 5
4159: PUSH
4160: LD_STRING Cyrus
4162: STR
4163: PPUSH
4164: CALL_OW 38
// if Cyrus in save_group then
4168: LD_EXP 11
4172: PUSH
4173: LD_EXP 4
4177: IN
4178: IFFALSE 4190
// SaveVariable ( true , CyrusIn07 ) ;
4180: LD_INT 1
4182: PPUSH
4183: LD_STRING CyrusIn07
4185: PPUSH
4186: CALL_OW 39
// end ; if Brown then
4190: LD_EXP 14
4194: IFFALSE 4236
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
4196: LD_EXP 14
4200: PPUSH
4201: LD_EXP 5
4205: PUSH
4206: LD_STRING Brown
4208: STR
4209: PPUSH
4210: CALL_OW 38
// if Brown in save_group then
4214: LD_EXP 14
4218: PUSH
4219: LD_EXP 4
4223: IN
4224: IFFALSE 4236
// SaveVariable ( true , BrownIn07 ) ;
4226: LD_INT 1
4228: PPUSH
4229: LD_STRING BrownIn07
4231: PPUSH
4232: CALL_OW 39
// end ; if Donaldson then
4236: LD_EXP 13
4240: IFFALSE 4282
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
4242: LD_EXP 13
4246: PPUSH
4247: LD_EXP 5
4251: PUSH
4252: LD_STRING Donaldson
4254: STR
4255: PPUSH
4256: CALL_OW 38
// if Donaldson in save_group then
4260: LD_EXP 13
4264: PUSH
4265: LD_EXP 4
4269: IN
4270: IFFALSE 4282
// SaveVariable ( true , DonaldsonIn07 ) ;
4272: LD_INT 1
4274: PPUSH
4275: LD_STRING DonaldsonIn07
4277: PPUSH
4278: CALL_OW 39
// end ; if Gladstone then
4282: LD_EXP 8
4286: IFFALSE 4328
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4288: LD_EXP 8
4292: PPUSH
4293: LD_EXP 5
4297: PUSH
4298: LD_STRING Gladstone
4300: STR
4301: PPUSH
4302: CALL_OW 38
// if Gladstone in save_group then
4306: LD_EXP 8
4310: PUSH
4311: LD_EXP 4
4315: IN
4316: IFFALSE 4328
// SaveVariable ( true , GladstoneIn07 ) ;
4318: LD_INT 1
4320: PPUSH
4321: LD_STRING GladstoneIn07
4323: PPUSH
4324: CALL_OW 39
// end ; if Khatam then
4328: LD_EXP 16
4332: IFFALSE 4374
// begin SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
4334: LD_EXP 16
4338: PPUSH
4339: LD_EXP 5
4343: PUSH
4344: LD_STRING Khatam
4346: STR
4347: PPUSH
4348: CALL_OW 38
// if Khatam in save_group then
4352: LD_EXP 16
4356: PUSH
4357: LD_EXP 4
4361: IN
4362: IFFALSE 4374
// SaveVariable ( true , KhatamIn07 ) ;
4364: LD_INT 1
4366: PPUSH
4367: LD_STRING KhatamIn07
4369: PPUSH
4370: CALL_OW 39
// end ; if debug then
4374: LD_EXP 1
4378: IFFALSE 4384
// InGameOff ;
4380: CALL_OW 9
// ChangeMap ( 1 , %_cont ) ;
4384: LD_INT 1
4386: PPUSH
4387: LD_STRING %_cont
4389: PPUSH
4390: CALL_OW 340
// end ; end_of_file
4394: LD_VAR 0 1
4398: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4399: LD_INT 0
4401: PPUSH
4402: PPUSH
// if exist_mode then
4403: LD_VAR 0 2
4407: IFFALSE 4432
// unit := CreateCharacter ( prefix & ident ) else
4409: LD_ADDR_VAR 0 5
4413: PUSH
4414: LD_VAR 0 3
4418: PUSH
4419: LD_VAR 0 1
4423: STR
4424: PPUSH
4425: CALL_OW 34
4429: ST_TO_ADDR
4430: GO 4447
// unit := NewCharacter ( ident ) ;
4432: LD_ADDR_VAR 0 5
4436: PUSH
4437: LD_VAR 0 1
4441: PPUSH
4442: CALL_OW 25
4446: ST_TO_ADDR
// result := unit ;
4447: LD_ADDR_VAR 0 4
4451: PUSH
4452: LD_VAR 0 5
4456: ST_TO_ADDR
// end ;
4457: LD_VAR 0 4
4461: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
4462: LD_INT 0
4464: PPUSH
// uc_side := side ;
4465: LD_ADDR_OWVAR 20
4469: PUSH
4470: LD_VAR 0 1
4474: ST_TO_ADDR
// uc_nation := nation ;
4475: LD_ADDR_OWVAR 21
4479: PUSH
4480: LD_VAR 0 2
4484: ST_TO_ADDR
// vc_chassis := chassis ;
4485: LD_ADDR_OWVAR 37
4489: PUSH
4490: LD_VAR 0 3
4494: ST_TO_ADDR
// vc_engine := engine ;
4495: LD_ADDR_OWVAR 39
4499: PUSH
4500: LD_VAR 0 4
4504: ST_TO_ADDR
// vc_control := control ;
4505: LD_ADDR_OWVAR 38
4509: PUSH
4510: LD_VAR 0 5
4514: ST_TO_ADDR
// vc_weapon := weapon ;
4515: LD_ADDR_OWVAR 40
4519: PUSH
4520: LD_VAR 0 6
4524: ST_TO_ADDR
// vc_fuel_battery := fuel ;
4525: LD_ADDR_OWVAR 41
4529: PUSH
4530: LD_VAR 0 7
4534: ST_TO_ADDR
// result := CreateVehicle ;
4535: LD_ADDR_VAR 0 8
4539: PUSH
4540: CALL_OW 45
4544: ST_TO_ADDR
// end ;
4545: LD_VAR 0 8
4549: RET
// export function SayX ( units , ident ) ; var i ; begin
4550: LD_INT 0
4552: PPUSH
4553: PPUSH
// result := false ;
4554: LD_ADDR_VAR 0 3
4558: PUSH
4559: LD_INT 0
4561: ST_TO_ADDR
// if not units then
4562: LD_VAR 0 1
4566: NOT
4567: IFFALSE 4571
// exit ;
4569: GO 4625
// for i in units do
4571: LD_ADDR_VAR 0 4
4575: PUSH
4576: LD_VAR 0 1
4580: PUSH
4581: FOR_IN
4582: IFFALSE 4623
// if IsOk ( i ) then
4584: LD_VAR 0 4
4588: PPUSH
4589: CALL_OW 302
4593: IFFALSE 4621
// begin Say ( i , ident ) ;
4595: LD_VAR 0 4
4599: PPUSH
4600: LD_VAR 0 2
4604: PPUSH
4605: CALL_OW 88
// result := i ;
4609: LD_ADDR_VAR 0 3
4613: PUSH
4614: LD_VAR 0 4
4618: ST_TO_ADDR
// break ;
4619: GO 4623
// end ;
4621: GO 4581
4623: POP
4624: POP
// end ;
4625: LD_VAR 0 3
4629: RET
