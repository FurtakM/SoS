// starting begin ResetFog ;
   0: CALL_OW 335
// FogOff ( 1 ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 344
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 28 0 0
// PrepareAmerican ;
  19: CALL 94 0 0
// Action ;
  23: CALL 3002 0 0
// end ;
  27: END
// export debug ; export donaldson_commander , brown_commander , save_group ; export mission_prefix , mission_prefix_prev ; function Init ; begin
  28: LD_INT 0
  30: PPUSH
// debug := false ;
  31: LD_ADDR_EXP 1
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// mission_prefix := 07_ ;
  39: LD_ADDR_EXP 5
  43: PUSH
  44: LD_STRING 07_
  46: ST_TO_ADDR
// mission_prefix_prev := [ 06_ , 05_ , 04_ ] ;
  47: LD_ADDR_EXP 6
  51: PUSH
  52: LD_STRING 06_
  54: PUSH
  55: LD_STRING 05_
  57: PUSH
  58: LD_STRING 04_
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: LIST
  65: ST_TO_ADDR
// donaldson_commander := false ;
  66: LD_ADDR_EXP 2
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// brown_commander := false ;
  74: LD_ADDR_EXP 3
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// save_group := [ ] ;
  82: LD_ADDR_EXP 4
  86: PUSH
  87: EMPTY
  88: ST_TO_ADDR
// end ; end_of_file
  89: LD_VAR 0 1
  93: RET
// export JMM , Gladstone , Frank , Lisa , Cyrus , Bobby , Donaldson , Brown , Houten , Khatam , Harisson ; export gamma_commander ; export RandGuy ; export function PrepareAmerican ; var others , others_delta , others4 , veh , team , dep , bar , lab , fac , bun , filter , i , j ; begin
  94: LD_INT 0
  96: PPUSH
  97: PPUSH
  98: PPUSH
  99: PPUSH
 100: PPUSH
 101: PPUSH
 102: PPUSH
 103: PPUSH
 104: PPUSH
 105: PPUSH
 106: PPUSH
 107: PPUSH
 108: PPUSH
 109: PPUSH
// PrepareBase ;
 110: CALL 2561 0 0
// uc_side := 1 ;
 114: LD_ADDR_OWVAR 20
 118: PUSH
 119: LD_INT 1
 121: ST_TO_ADDR
// uc_nation := 1 ;
 122: LD_ADDR_OWVAR 21
 126: PUSH
 127: LD_INT 1
 129: ST_TO_ADDR
// team := [ ] ;
 130: LD_ADDR_VAR 0 6
 134: PUSH
 135: EMPTY
 136: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 06c_ ) ;
 137: LD_ADDR_EXP 7
 141: PUSH
 142: LD_STRING JMM
 144: PPUSH
 145: LD_EXP 1
 149: NOT
 150: PPUSH
 151: LD_STRING 06c_
 153: PPUSH
 154: CALL 4496 0 3
 158: ST_TO_ADDR
// if GetClass ( JMM ) = 2 then
 159: LD_EXP 7
 163: PPUSH
 164: CALL_OW 257
 168: PUSH
 169: LD_INT 2
 171: EQUAL
 172: IFFALSE 186
// SetClass ( JMM , 1 ) ;
 174: LD_EXP 7
 178: PPUSH
 179: LD_INT 1
 181: PPUSH
 182: CALL_OW 336
// gamma_commander := LoadVariable ( GammaCommander , 3 ) ;
 186: LD_ADDR_EXP 18
 190: PUSH
 191: LD_STRING GammaCommander
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: CALL_OW 30
 201: ST_TO_ADDR
// if gamma_commander = 1 then
 202: LD_EXP 18
 206: PUSH
 207: LD_INT 1
 209: EQUAL
 210: IFFALSE 236
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 04_ ) ;
 212: LD_ADDR_EXP 13
 216: PUSH
 217: LD_STRING Donaldson
 219: PPUSH
 220: LD_EXP 1
 224: NOT
 225: PPUSH
 226: LD_STRING 04_
 228: PPUSH
 229: CALL 4496 0 3
 233: ST_TO_ADDR
// end else
 234: GO 307
// begin if LoadVariable ( DonaldsonIn06 , 0 ) then
 236: LD_STRING DonaldsonIn06
 238: PPUSH
 239: LD_INT 0
 241: PPUSH
 242: CALL_OW 30
 246: IFFALSE 272
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 06c_ ) else
 248: LD_ADDR_EXP 13
 252: PUSH
 253: LD_STRING Donaldson
 255: PPUSH
 256: LD_EXP 1
 260: NOT
 261: PPUSH
 262: LD_STRING 06c_
 264: PPUSH
 265: CALL 4496 0 3
 269: ST_TO_ADDR
 270: GO 307
// if not LoadVariable ( DonaldsonStayInDelta , 0 ) then
 272: LD_STRING DonaldsonStayInDelta
 274: PPUSH
 275: LD_INT 0
 277: PPUSH
 278: CALL_OW 30
 282: NOT
 283: IFFALSE 307
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 04_ ) ;
 285: LD_ADDR_EXP 13
 289: PUSH
 290: LD_STRING Donaldson
 292: PPUSH
 293: LD_EXP 1
 297: NOT
 298: PPUSH
 299: LD_STRING 04_
 301: PPUSH
 302: CALL 4496 0 3
 306: ST_TO_ADDR
// end ; if Donaldson then
 307: LD_EXP 13
 311: IFFALSE 329
// team := team ^ Donaldson ;
 313: LD_ADDR_VAR 0 6
 317: PUSH
 318: LD_VAR 0 6
 322: PUSH
 323: LD_EXP 13
 327: ADD
 328: ST_TO_ADDR
// if gamma_commander = 2 then
 329: LD_EXP 18
 333: PUSH
 334: LD_INT 2
 336: EQUAL
 337: IFFALSE 363
// begin Brown := PrepareUnit ( Brown , ( not debug ) , 04_ ) ;
 339: LD_ADDR_EXP 14
 343: PUSH
 344: LD_STRING Brown
 346: PPUSH
 347: LD_EXP 1
 351: NOT
 352: PPUSH
 353: LD_STRING 04_
 355: PPUSH
 356: CALL 4496 0 3
 360: ST_TO_ADDR
// end else
 361: GO 434
// begin if LoadVariable ( BrownIn06 , 0 ) then
 363: LD_STRING BrownIn06
 365: PPUSH
 366: LD_INT 0
 368: PPUSH
 369: CALL_OW 30
 373: IFFALSE 399
// Brown := PrepareUnit ( Brown , ( not debug ) , 06c_ ) else
 375: LD_ADDR_EXP 14
 379: PUSH
 380: LD_STRING Brown
 382: PPUSH
 383: LD_EXP 1
 387: NOT
 388: PPUSH
 389: LD_STRING 06c_
 391: PPUSH
 392: CALL 4496 0 3
 396: ST_TO_ADDR
 397: GO 434
// if not LoadVariable ( BrownStayInDelta , 0 ) then
 399: LD_STRING BrownStayInDelta
 401: PPUSH
 402: LD_INT 0
 404: PPUSH
 405: CALL_OW 30
 409: NOT
 410: IFFALSE 434
// Brown := PrepareUnit ( Brown , ( not debug ) , 04_ ) ;
 412: LD_ADDR_EXP 14
 416: PUSH
 417: LD_STRING Brown
 419: PPUSH
 420: LD_EXP 1
 424: NOT
 425: PPUSH
 426: LD_STRING 04_
 428: PPUSH
 429: CALL 4496 0 3
 433: ST_TO_ADDR
// end ; if Brown then
 434: LD_EXP 14
 438: IFFALSE 456
// team := team ^ Brown ;
 440: LD_ADDR_VAR 0 6
 444: PUSH
 445: LD_VAR 0 6
 449: PUSH
 450: LD_EXP 14
 454: ADD
 455: ST_TO_ADDR
// if gamma_commander = 3 then
 456: LD_EXP 18
 460: PUSH
 461: LD_INT 3
 463: EQUAL
 464: IFFALSE 501
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 466: LD_ADDR_EXP 15
 470: PUSH
 471: LD_STRING VanHouten
 473: PPUSH
 474: LD_INT 0
 476: PPUSH
 477: LD_STRING 
 479: PPUSH
 480: CALL 4496 0 3
 484: ST_TO_ADDR
// team := team ^ Houten ;
 485: LD_ADDR_VAR 0 6
 489: PUSH
 490: LD_VAR 0 6
 494: PUSH
 495: LD_EXP 15
 499: ADD
 500: ST_TO_ADDR
// end ; if LoadVariable ( GladstoneIn06 , 0 ) then
 501: LD_STRING GladstoneIn06
 503: PPUSH
 504: LD_INT 0
 506: PPUSH
 507: CALL_OW 30
 511: IFFALSE 537
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) else
 513: LD_ADDR_EXP 8
 517: PUSH
 518: LD_STRING Gladstone
 520: PPUSH
 521: LD_EXP 1
 525: NOT
 526: PPUSH
 527: LD_STRING 06c_
 529: PPUSH
 530: CALL 4496 0 3
 534: ST_TO_ADDR
 535: GO 571
// if LoadVariable ( GladstoneStayInDelta , 0 ) then
 537: LD_STRING GladstoneStayInDelta
 539: PPUSH
 540: LD_INT 0
 542: PPUSH
 543: CALL_OW 30
 547: IFFALSE 571
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06_ ) ;
 549: LD_ADDR_EXP 8
 553: PUSH
 554: LD_STRING Gladstone
 556: PPUSH
 557: LD_EXP 1
 561: NOT
 562: PPUSH
 563: LD_STRING 06_
 565: PPUSH
 566: CALL 4496 0 3
 570: ST_TO_ADDR
// if Gladstone then
 571: LD_EXP 8
 575: IFFALSE 593
// team := team ^ Gladstone ;
 577: LD_ADDR_VAR 0 6
 581: PUSH
 582: LD_VAR 0 6
 586: PUSH
 587: LD_EXP 8
 591: ADD
 592: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , 03_ ) ;
 593: LD_ADDR_EXP 16
 597: PUSH
 598: LD_STRING Khatam
 600: PPUSH
 601: LD_EXP 1
 605: NOT
 606: PPUSH
 607: LD_STRING 03_
 609: PPUSH
 610: CALL 4496 0 3
 614: ST_TO_ADDR
// if Khatam then
 615: LD_EXP 16
 619: IFFALSE 637
// team := team ^ Khatam ;
 621: LD_ADDR_VAR 0 6
 625: PUSH
 626: LD_VAR 0 6
 630: PUSH
 631: LD_EXP 16
 635: ADD
 636: ST_TO_ADDR
// if LoadVariable ( LisaIn06 , 0 ) then
 637: LD_STRING LisaIn06
 639: PPUSH
 640: LD_INT 0
 642: PPUSH
 643: CALL_OW 30
 647: IFFALSE 673
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 06c_ ) else
 649: LD_ADDR_EXP 10
 653: PUSH
 654: LD_STRING Lisa
 656: PPUSH
 657: LD_EXP 1
 661: NOT
 662: PPUSH
 663: LD_STRING 06c_
 665: PPUSH
 666: CALL 4496 0 3
 670: ST_TO_ADDR
 671: GO 708
// if not LoadVariable ( LisaStayInDelta , 0 ) then
 673: LD_STRING LisaStayInDelta
 675: PPUSH
 676: LD_INT 0
 678: PPUSH
 679: CALL_OW 30
 683: NOT
 684: IFFALSE 708
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 04_ ) ;
 686: LD_ADDR_EXP 10
 690: PUSH
 691: LD_STRING Lisa
 693: PPUSH
 694: LD_EXP 1
 698: NOT
 699: PPUSH
 700: LD_STRING 04_
 702: PPUSH
 703: CALL 4496 0 3
 707: ST_TO_ADDR
// if Lisa then
 708: LD_EXP 10
 712: IFFALSE 730
// team := team ^ Lisa ;
 714: LD_ADDR_VAR 0 6
 718: PUSH
 719: LD_VAR 0 6
 723: PUSH
 724: LD_EXP 10
 728: ADD
 729: ST_TO_ADDR
// if not Lisa then
 730: LD_EXP 10
 734: NOT
 735: IFFALSE 988
// begin if LoadVariable ( CyrusIn06 , 0 ) then
 737: LD_STRING CyrusIn06
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 30
 747: IFFALSE 773
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 06c_ ) else
 749: LD_ADDR_EXP 11
 753: PUSH
 754: LD_STRING Cyrus
 756: PPUSH
 757: LD_EXP 1
 761: NOT
 762: PPUSH
 763: LD_STRING 06c_
 765: PPUSH
 766: CALL 4496 0 3
 770: ST_TO_ADDR
 771: GO 837
// if not LoadVariable ( CyrusStayInDelta , 0 ) then
 773: LD_STRING CyrusStayInDelta
 775: PPUSH
 776: LD_INT 0
 778: PPUSH
 779: CALL_OW 30
 783: NOT
 784: IFFALSE 837
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 04_ ) ;
 786: LD_ADDR_EXP 11
 790: PUSH
 791: LD_STRING Cyrus
 793: PPUSH
 794: LD_EXP 1
 798: NOT
 799: PPUSH
 800: LD_STRING 04_
 802: PPUSH
 803: CALL 4496 0 3
 807: ST_TO_ADDR
// if not Cyrus then
 808: LD_EXP 11
 812: NOT
 813: IFFALSE 837
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 03_ ) ;
 815: LD_ADDR_EXP 11
 819: PUSH
 820: LD_STRING Cyrus
 822: PPUSH
 823: LD_EXP 1
 827: NOT
 828: PPUSH
 829: LD_STRING 03_
 831: PPUSH
 832: CALL 4496 0 3
 836: ST_TO_ADDR
// end ; if Cyrus then
 837: LD_EXP 11
 841: IFFALSE 859
// team := team ^ Cyrus ;
 843: LD_ADDR_VAR 0 6
 847: PUSH
 848: LD_VAR 0 6
 852: PUSH
 853: LD_EXP 11
 857: ADD
 858: ST_TO_ADDR
// if not Cyrus then
 859: LD_EXP 11
 863: NOT
 864: IFFALSE 988
// begin if LoadVariable ( BobbyIn06 , 0 ) then
 866: LD_STRING BobbyIn06
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: CALL_OW 30
 876: IFFALSE 902
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 06c_ ) else
 878: LD_ADDR_EXP 12
 882: PUSH
 883: LD_STRING Bobby
 885: PPUSH
 886: LD_EXP 1
 890: NOT
 891: PPUSH
 892: LD_STRING 06c_
 894: PPUSH
 895: CALL 4496 0 3
 899: ST_TO_ADDR
 900: GO 966
// if not LoadVariable ( BobbyStayInDelta , 0 ) then
 902: LD_STRING BobbyStayInDelta
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL_OW 30
 912: NOT
 913: IFFALSE 966
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , 04_ ) ;
 915: LD_ADDR_EXP 12
 919: PUSH
 920: LD_STRING Bobby
 922: PPUSH
 923: LD_EXP 1
 927: NOT
 928: PPUSH
 929: LD_STRING 04_
 931: PPUSH
 932: CALL 4496 0 3
 936: ST_TO_ADDR
// if not Bobby then
 937: LD_EXP 12
 941: NOT
 942: IFFALSE 966
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 03_ ) ;
 944: LD_ADDR_EXP 12
 948: PUSH
 949: LD_STRING Bobby
 951: PPUSH
 952: LD_EXP 1
 956: NOT
 957: PPUSH
 958: LD_STRING 03_
 960: PPUSH
 961: CALL 4496 0 3
 965: ST_TO_ADDR
// end ; if Bobby then
 966: LD_EXP 12
 970: IFFALSE 988
// team := team ^ Bobby ;
 972: LD_ADDR_VAR 0 6
 976: PUSH
 977: LD_VAR 0 6
 981: PUSH
 982: LD_EXP 12
 986: ADD
 987: ST_TO_ADDR
// end ; end ; others4 := CreateCharacterSet ( othersGamma ) ;
 988: LD_ADDR_VAR 0 4
 992: PUSH
 993: LD_STRING othersGamma
 995: PPUSH
 996: CALL_OW 31
1000: ST_TO_ADDR
// others := CreateCharacterSet ( 06_other_survivors ) ;
1001: LD_ADDR_VAR 0 2
1005: PUSH
1006: LD_STRING 06_other_survivors
1008: PPUSH
1009: CALL_OW 31
1013: ST_TO_ADDR
// others := others union others4 ;
1014: LD_ADDR_VAR 0 2
1018: PUSH
1019: LD_VAR 0 2
1023: PUSH
1024: LD_VAR 0 4
1028: UNION
1029: ST_TO_ADDR
// team := team ^ others ;
1030: LD_ADDR_VAR 0 6
1034: PUSH
1035: LD_VAR 0 6
1039: PUSH
1040: LD_VAR 0 2
1044: ADD
1045: ST_TO_ADDR
// InitHc ;
1046: CALL_OW 19
// if team <= 12 then
1050: LD_VAR 0 6
1054: PUSH
1055: LD_INT 12
1057: LESSEQUAL
1058: IFFALSE 1107
// repeat PrepareHuman ( false , rand ( 1 , 4 ) , 5 ) ;
1060: LD_INT 0
1062: PPUSH
1063: LD_INT 1
1065: PPUSH
1066: LD_INT 4
1068: PPUSH
1069: CALL_OW 12
1073: PPUSH
1074: LD_INT 5
1076: PPUSH
1077: CALL_OW 380
// team := team ^ CreateHuman ;
1081: LD_ADDR_VAR 0 6
1085: PUSH
1086: LD_VAR 0 6
1090: PUSH
1091: CALL_OW 44
1095: ADD
1096: ST_TO_ADDR
// until team > 12 ;
1097: LD_VAR 0 6
1101: PUSH
1102: LD_INT 12
1104: GREATER
1105: IFFALSE 1060
// for i in others do
1107: LD_ADDR_VAR 0 13
1111: PUSH
1112: LD_VAR 0 2
1116: PUSH
1117: FOR_IN
1118: IFFALSE 1186
// begin if GetClass ( i ) = 2 then
1120: LD_VAR 0 13
1124: PPUSH
1125: CALL_OW 257
1129: PUSH
1130: LD_INT 2
1132: EQUAL
1133: IFFALSE 1147
// SetClass ( i , 1 ) ;
1135: LD_VAR 0 13
1139: PPUSH
1140: LD_INT 1
1142: PPUSH
1143: CALL_OW 336
// for j = 1 to 4 do
1147: LD_ADDR_VAR 0 14
1151: PUSH
1152: DOUBLE
1153: LD_INT 1
1155: DEC
1156: ST_TO_ADDR
1157: LD_INT 4
1159: PUSH
1160: FOR_TO
1161: IFFALSE 1182
// AddExperience ( i , j , 3000 ) ;
1163: LD_VAR 0 13
1167: PPUSH
1168: LD_VAR 0 14
1172: PPUSH
1173: LD_INT 3000
1175: PPUSH
1176: CALL_OW 492
1180: GO 1160
1182: POP
1183: POP
// end ;
1184: GO 1117
1186: POP
1187: POP
// if UnitFilter ( team , [ f_class , 2 ] ) then
1188: LD_VAR 0 6
1192: PPUSH
1193: LD_INT 25
1195: PUSH
1196: LD_INT 2
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 72
1207: IFFALSE 1253
// for i in UnitFilter ( team , [ f_class , 2 ] ) do
1209: LD_ADDR_VAR 0 13
1213: PUSH
1214: LD_VAR 0 6
1218: PPUSH
1219: LD_INT 25
1221: PUSH
1222: LD_INT 2
1224: PUSH
1225: EMPTY
1226: LIST
1227: LIST
1228: PPUSH
1229: CALL_OW 72
1233: PUSH
1234: FOR_IN
1235: IFFALSE 1251
// SetClass ( i , 1 ) ;
1237: LD_VAR 0 13
1241: PPUSH
1242: LD_INT 1
1244: PPUSH
1245: CALL_OW 336
1249: GO 1234
1251: POP
1252: POP
// dep := FilterAllUnits ( [ f_btype , b_depot ] ) ;
1253: LD_ADDR_VAR 0 7
1257: PUSH
1258: LD_INT 30
1260: PUSH
1261: LD_INT 0
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: PPUSH
1268: CALL_OW 69
1272: ST_TO_ADDR
// bar := FilterAllUnits ( [ f_btype , b_armoury ] ) ;
1273: LD_ADDR_VAR 0 8
1277: PUSH
1278: LD_INT 30
1280: PUSH
1281: LD_INT 4
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: PPUSH
1288: CALL_OW 69
1292: ST_TO_ADDR
// lab := FilterAllUnits ( [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab ] ] ) ;
1293: LD_ADDR_VAR 0 9
1297: PUSH
1298: LD_INT 2
1300: PUSH
1301: LD_INT 30
1303: PUSH
1304: LD_INT 7
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: LD_INT 30
1313: PUSH
1314: LD_INT 6
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PUSH
1321: EMPTY
1322: LIST
1323: LIST
1324: LIST
1325: PPUSH
1326: CALL_OW 69
1330: ST_TO_ADDR
// fac := FilterAllUnits ( [ f_btype , b_factory ] ) ;
1331: LD_ADDR_VAR 0 10
1335: PUSH
1336: LD_INT 30
1338: PUSH
1339: LD_INT 3
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: PPUSH
1346: CALL_OW 69
1350: ST_TO_ADDR
// bun := FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ;
1351: LD_ADDR_VAR 0 11
1355: PUSH
1356: LD_INT 2
1358: PUSH
1359: LD_INT 30
1361: PUSH
1362: LD_INT 32
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 30
1371: PUSH
1372: LD_INT 31
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: LIST
1383: PPUSH
1384: CALL_OW 69
1388: ST_TO_ADDR
// SetBName ( dep , Gamma ) ;
1389: LD_VAR 0 7
1393: PPUSH
1394: LD_STRING Gamma
1396: PPUSH
1397: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
1401: LD_VAR 0 7
1405: PPUSH
1406: CALL_OW 274
1410: PPUSH
1411: LD_INT 2
1413: PPUSH
1414: LD_INT 10000
1416: PPUSH
1417: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_cans , 10000 ) ;
1421: LD_VAR 0 7
1425: PPUSH
1426: CALL_OW 274
1430: PPUSH
1431: LD_INT 1
1433: PPUSH
1434: LD_INT 10000
1436: PPUSH
1437: CALL_OW 277
// if dep then
1441: LD_VAR 0 7
1445: IFFALSE 1547
// begin PlaceHumanInUnit ( JMM , dep [ 1 ] ) ;
1447: LD_EXP 7
1451: PPUSH
1452: LD_VAR 0 7
1456: PUSH
1457: LD_INT 1
1459: ARRAY
1460: PPUSH
1461: CALL_OW 52
// if Brown then
1465: LD_EXP 14
1469: IFFALSE 1505
// begin PlaceHumanInUnit ( Brown , dep [ 1 ] ) ;
1471: LD_EXP 14
1475: PPUSH
1476: LD_VAR 0 7
1480: PUSH
1481: LD_INT 1
1483: ARRAY
1484: PPUSH
1485: CALL_OW 52
// team := team diff Brown ;
1489: LD_ADDR_VAR 0 6
1493: PUSH
1494: LD_VAR 0 6
1498: PUSH
1499: LD_EXP 14
1503: DIFF
1504: ST_TO_ADDR
// end ; if Donaldson then
1505: LD_EXP 13
1509: IFFALSE 1545
// begin PlaceHumanInUnit ( Donaldson , dep [ 1 ] ) ;
1511: LD_EXP 13
1515: PPUSH
1516: LD_VAR 0 7
1520: PUSH
1521: LD_INT 1
1523: ARRAY
1524: PPUSH
1525: CALL_OW 52
// team := team diff Donaldson ;
1529: LD_ADDR_VAR 0 6
1533: PUSH
1534: LD_VAR 0 6
1538: PUSH
1539: LD_EXP 13
1543: DIFF
1544: ST_TO_ADDR
// end ; end else
1545: GO 1654
// begin PlaceUnitXYR ( JMM , 52 , 16 , 10 , false ) ;
1547: LD_EXP 7
1551: PPUSH
1552: LD_INT 52
1554: PPUSH
1555: LD_INT 16
1557: PPUSH
1558: LD_INT 10
1560: PPUSH
1561: LD_INT 0
1563: PPUSH
1564: CALL_OW 50
// if Brown then
1568: LD_EXP 14
1572: IFFALSE 1611
// begin PlaceUnitXYR ( Brown , 52 , 16 , 10 , false ) ;
1574: LD_EXP 14
1578: PPUSH
1579: LD_INT 52
1581: PPUSH
1582: LD_INT 16
1584: PPUSH
1585: LD_INT 10
1587: PPUSH
1588: LD_INT 0
1590: PPUSH
1591: CALL_OW 50
// team := team diff Brown ;
1595: LD_ADDR_VAR 0 6
1599: PUSH
1600: LD_VAR 0 6
1604: PUSH
1605: LD_EXP 14
1609: DIFF
1610: ST_TO_ADDR
// end ; if Donaldson then
1611: LD_EXP 13
1615: IFFALSE 1654
// begin PlaceUnitXYR ( Donaldson , 52 , 16 , 10 , false ) ;
1617: LD_EXP 13
1621: PPUSH
1622: LD_INT 52
1624: PPUSH
1625: LD_INT 16
1627: PPUSH
1628: LD_INT 10
1630: PPUSH
1631: LD_INT 0
1633: PPUSH
1634: CALL_OW 50
// team := team diff Donaldson ;
1638: LD_ADDR_VAR 0 6
1642: PUSH
1643: LD_VAR 0 6
1647: PUSH
1648: LD_EXP 13
1652: DIFF
1653: ST_TO_ADDR
// end ; end ; if bun and UnitFilter ( team , [ f_class , 1 ] ) then
1654: LD_VAR 0 11
1658: PUSH
1659: LD_VAR 0 6
1663: PPUSH
1664: LD_INT 25
1666: PUSH
1667: LD_INT 1
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PPUSH
1674: CALL_OW 72
1678: AND
1679: IFFALSE 1788
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1681: LD_ADDR_VAR 0 12
1685: PUSH
1686: LD_VAR 0 6
1690: PPUSH
1691: LD_INT 25
1693: PUSH
1694: LD_INT 1
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PPUSH
1701: CALL_OW 72
1705: ST_TO_ADDR
// for i in bun do
1706: LD_ADDR_VAR 0 13
1710: PUSH
1711: LD_VAR 0 11
1715: PUSH
1716: FOR_IN
1717: IFFALSE 1786
// begin if not filter then
1719: LD_VAR 0 12
1723: NOT
1724: IFFALSE 1728
// break ;
1726: GO 1786
// PlaceHumanInUnit ( filter [ 1 ] , i ) ;
1728: LD_VAR 0 12
1732: PUSH
1733: LD_INT 1
1735: ARRAY
1736: PPUSH
1737: LD_VAR 0 13
1741: PPUSH
1742: CALL_OW 52
// team := team diff filter [ 1 ] ;
1746: LD_ADDR_VAR 0 6
1750: PUSH
1751: LD_VAR 0 6
1755: PUSH
1756: LD_VAR 0 12
1760: PUSH
1761: LD_INT 1
1763: ARRAY
1764: DIFF
1765: ST_TO_ADDR
// filter := Delete ( filter , 1 ) ;
1766: LD_ADDR_VAR 0 12
1770: PUSH
1771: LD_VAR 0 12
1775: PPUSH
1776: LD_INT 1
1778: PPUSH
1779: CALL_OW 3
1783: ST_TO_ADDR
// end ;
1784: GO 1716
1786: POP
1787: POP
// end ; if bar and UnitFilter ( team , [ f_class , 1 ] ) then
1788: LD_VAR 0 8
1792: PUSH
1793: LD_VAR 0 6
1797: PPUSH
1798: LD_INT 25
1800: PUSH
1801: LD_INT 1
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: PPUSH
1808: CALL_OW 72
1812: AND
1813: IFFALSE 1935
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1815: LD_ADDR_VAR 0 12
1819: PUSH
1820: LD_VAR 0 6
1824: PPUSH
1825: LD_INT 25
1827: PUSH
1828: LD_INT 1
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PPUSH
1835: CALL_OW 72
1839: ST_TO_ADDR
// for i = 1 to filter do
1840: LD_ADDR_VAR 0 13
1844: PUSH
1845: DOUBLE
1846: LD_INT 1
1848: DEC
1849: ST_TO_ADDR
1850: LD_VAR 0 12
1854: PUSH
1855: FOR_TO
1856: IFFALSE 1917
// begin if ( i <= 6 ) then
1858: LD_VAR 0 13
1862: PUSH
1863: LD_INT 6
1865: LESSEQUAL
1866: IFFALSE 1894
// PlaceHumanInUnit ( filter [ i ] , bar [ 1 ] ) else
1868: LD_VAR 0 12
1872: PUSH
1873: LD_VAR 0 13
1877: ARRAY
1878: PPUSH
1879: LD_VAR 0 8
1883: PUSH
1884: LD_INT 1
1886: ARRAY
1887: PPUSH
1888: CALL_OW 52
1892: GO 1915
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1894: LD_VAR 0 12
1898: PUSH
1899: LD_VAR 0 13
1903: ARRAY
1904: PPUSH
1905: LD_INT 1
1907: PPUSH
1908: LD_INT 0
1910: PPUSH
1911: CALL_OW 49
// end ;
1915: GO 1855
1917: POP
1918: POP
// team := team diff filter ;
1919: LD_ADDR_VAR 0 6
1923: PUSH
1924: LD_VAR 0 6
1928: PUSH
1929: LD_VAR 0 12
1933: DIFF
1934: ST_TO_ADDR
// end ; if lab and UnitFilter ( team , [ f_class , 4 ] ) then
1935: LD_VAR 0 9
1939: PUSH
1940: LD_VAR 0 6
1944: PPUSH
1945: LD_INT 25
1947: PUSH
1948: LD_INT 4
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PPUSH
1955: CALL_OW 72
1959: AND
1960: IFFALSE 2082
// begin filter := UnitFilter ( team , [ f_class , 4 ] ) ;
1962: LD_ADDR_VAR 0 12
1966: PUSH
1967: LD_VAR 0 6
1971: PPUSH
1972: LD_INT 25
1974: PUSH
1975: LD_INT 4
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: PPUSH
1982: CALL_OW 72
1986: ST_TO_ADDR
// for i = 1 to filter do
1987: LD_ADDR_VAR 0 13
1991: PUSH
1992: DOUBLE
1993: LD_INT 1
1995: DEC
1996: ST_TO_ADDR
1997: LD_VAR 0 12
2001: PUSH
2002: FOR_TO
2003: IFFALSE 2064
// begin if ( i <= 6 ) then
2005: LD_VAR 0 13
2009: PUSH
2010: LD_INT 6
2012: LESSEQUAL
2013: IFFALSE 2041
// PlaceHumanInUnit ( filter [ i ] , lab [ 1 ] ) else
2015: LD_VAR 0 12
2019: PUSH
2020: LD_VAR 0 13
2024: ARRAY
2025: PPUSH
2026: LD_VAR 0 9
2030: PUSH
2031: LD_INT 1
2033: ARRAY
2034: PPUSH
2035: CALL_OW 52
2039: GO 2062
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
2041: LD_VAR 0 12
2045: PUSH
2046: LD_VAR 0 13
2050: ARRAY
2051: PPUSH
2052: LD_INT 1
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 49
// end ;
2062: GO 2002
2064: POP
2065: POP
// team := team diff filter ;
2066: LD_ADDR_VAR 0 6
2070: PUSH
2071: LD_VAR 0 6
2075: PUSH
2076: LD_VAR 0 12
2080: DIFF
2081: ST_TO_ADDR
// end ; if fac and UnitFilter ( team , [ f_class , 3 ] ) then
2082: LD_VAR 0 10
2086: PUSH
2087: LD_VAR 0 6
2091: PPUSH
2092: LD_INT 25
2094: PUSH
2095: LD_INT 3
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: PPUSH
2102: CALL_OW 72
2106: AND
2107: IFFALSE 2229
// begin filter := UnitFilter ( team , [ f_class , 3 ] ) ;
2109: LD_ADDR_VAR 0 12
2113: PUSH
2114: LD_VAR 0 6
2118: PPUSH
2119: LD_INT 25
2121: PUSH
2122: LD_INT 3
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PPUSH
2129: CALL_OW 72
2133: ST_TO_ADDR
// for i = 1 to filter do
2134: LD_ADDR_VAR 0 13
2138: PUSH
2139: DOUBLE
2140: LD_INT 1
2142: DEC
2143: ST_TO_ADDR
2144: LD_VAR 0 12
2148: PUSH
2149: FOR_TO
2150: IFFALSE 2211
// begin if ( i <= 6 ) then
2152: LD_VAR 0 13
2156: PUSH
2157: LD_INT 6
2159: LESSEQUAL
2160: IFFALSE 2188
// PlaceHumanInUnit ( filter [ i ] , fac [ 1 ] ) else
2162: LD_VAR 0 12
2166: PUSH
2167: LD_VAR 0 13
2171: ARRAY
2172: PPUSH
2173: LD_VAR 0 10
2177: PUSH
2178: LD_INT 1
2180: ARRAY
2181: PPUSH
2182: CALL_OW 52
2186: GO 2209
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
2188: LD_VAR 0 12
2192: PUSH
2193: LD_VAR 0 13
2197: ARRAY
2198: PPUSH
2199: LD_INT 1
2201: PPUSH
2202: LD_INT 0
2204: PPUSH
2205: CALL_OW 49
// end ;
2209: GO 2149
2211: POP
2212: POP
// team := team diff filter ;
2213: LD_ADDR_VAR 0 6
2217: PUSH
2218: LD_VAR 0 6
2222: PUSH
2223: LD_VAR 0 12
2227: DIFF
2228: ST_TO_ADDR
// end ; if team then
2229: LD_VAR 0 6
2233: IFFALSE 2276
// for i in team do
2235: LD_ADDR_VAR 0 13
2239: PUSH
2240: LD_VAR 0 6
2244: PUSH
2245: FOR_IN
2246: IFFALSE 2274
// begin PlaceUnitArea ( i , gammaBaseArea , false ) ;
2248: LD_VAR 0 13
2252: PPUSH
2253: LD_INT 1
2255: PPUSH
2256: LD_INT 0
2258: PPUSH
2259: CALL_OW 49
// ComHold ( i ) ;
2263: LD_VAR 0 13
2267: PPUSH
2268: CALL_OW 140
// end ;
2272: GO 2245
2274: POP
2275: POP
// if fac then
2276: LD_VAR 0 10
2280: IFFALSE 2316
// if UnitsInside ( fac [ 1 ] ) then
2282: LD_VAR 0 10
2286: PUSH
2287: LD_INT 1
2289: ARRAY
2290: PPUSH
2291: CALL_OW 313
2295: IFFALSE 2316
// SetSpecResearch ( fac [ 1 ] , 10 , false ) ;
2297: LD_VAR 0 10
2301: PUSH
2302: LD_INT 1
2304: ARRAY
2305: PPUSH
2306: LD_INT 10
2308: PPUSH
2309: LD_INT 0
2311: PPUSH
2312: CALL_OW 486
// if lab then
2316: LD_VAR 0 9
2320: IFFALSE 2356
// if UnitsInside ( lab [ 1 ] ) then
2322: LD_VAR 0 9
2326: PUSH
2327: LD_INT 1
2329: ARRAY
2330: PPUSH
2331: CALL_OW 313
2335: IFFALSE 2356
// SetSpecResearch ( lab [ 1 ] , 10 , false ) ;
2337: LD_VAR 0 9
2341: PUSH
2342: LD_INT 1
2344: ARRAY
2345: PPUSH
2346: LD_INT 10
2348: PPUSH
2349: LD_INT 0
2351: PPUSH
2352: CALL_OW 486
// uc_side := 4 ;
2356: LD_ADDR_OWVAR 20
2360: PUSH
2361: LD_INT 4
2363: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
2364: LD_ADDR_EXP 17
2368: PUSH
2369: LD_STRING Harisson
2371: PPUSH
2372: LD_INT 0
2374: PPUSH
2375: LD_STRING 
2377: PPUSH
2378: CALL 4496 0 3
2382: ST_TO_ADDR
// veh := PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_double_gun , 100 ) ;
2383: LD_ADDR_VAR 0 5
2387: PUSH
2388: LD_INT 4
2390: PPUSH
2391: LD_INT 1
2393: PPUSH
2394: LD_INT 2
2396: PPUSH
2397: LD_INT 1
2399: PPUSH
2400: LD_INT 1
2402: PPUSH
2403: LD_INT 5
2405: PPUSH
2406: LD_INT 100
2408: PPUSH
2409: CALL 4559 0 7
2413: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2414: LD_VAR 0 5
2418: PPUSH
2419: LD_INT 2
2421: PPUSH
2422: CALL_OW 233
// PlaceUnitXY ( veh , 22 , 9 , false ) ;
2426: LD_VAR 0 5
2430: PPUSH
2431: LD_INT 22
2433: PPUSH
2434: LD_INT 9
2436: PPUSH
2437: LD_INT 0
2439: PPUSH
2440: CALL_OW 48
// PlaceHumanInUnit ( Harisson , veh ) ;
2444: LD_EXP 17
2448: PPUSH
2449: LD_VAR 0 5
2453: PPUSH
2454: CALL_OW 52
// PrepareHuman ( false , 1 , 0 ) ;
2458: LD_INT 0
2460: PPUSH
2461: LD_INT 1
2463: PPUSH
2464: LD_INT 0
2466: PPUSH
2467: CALL_OW 380
// RandGuy := CreateHuman ;
2471: LD_ADDR_EXP 19
2475: PUSH
2476: CALL_OW 44
2480: ST_TO_ADDR
// veh := PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 100 ) ;
2481: LD_ADDR_VAR 0 5
2485: PUSH
2486: LD_INT 4
2488: PPUSH
2489: LD_INT 1
2491: PPUSH
2492: LD_INT 2
2494: PPUSH
2495: LD_INT 1
2497: PPUSH
2498: LD_INT 1
2500: PPUSH
2501: LD_INT 4
2503: PPUSH
2504: LD_INT 100
2506: PPUSH
2507: CALL 4559 0 7
2511: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2512: LD_VAR 0 5
2516: PPUSH
2517: LD_INT 2
2519: PPUSH
2520: CALL_OW 233
// PlaceUnitXY ( veh , 17 , 4 , false ) ;
2524: LD_VAR 0 5
2528: PPUSH
2529: LD_INT 17
2531: PPUSH
2532: LD_INT 4
2534: PPUSH
2535: LD_INT 0
2537: PPUSH
2538: CALL_OW 48
// PlaceHumanInUnit ( RandGuy , veh ) ;
2542: LD_EXP 19
2546: PPUSH
2547: LD_VAR 0 5
2551: PPUSH
2552: CALL_OW 52
// end ;
2556: LD_VAR 0 1
2560: RET
// function PrepareBase ; var blist , i , b , base ; begin
2561: LD_INT 0
2563: PPUSH
2564: PPUSH
2565: PPUSH
2566: PPUSH
2567: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2568: LD_INT 71
2570: PPUSH
2571: LD_INT 5
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2581: LD_ADDR_VAR 0 2
2585: PUSH
2586: LD_STRING GammaBase
2588: PPUSH
2589: EMPTY
2590: PPUSH
2591: CALL_OW 30
2595: ST_TO_ADDR
// if not blist then
2596: LD_VAR 0 2
2600: NOT
2601: IFFALSE 2641
// blist := [ [ b_depot , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2603: LD_ADDR_VAR 0 2
2607: PUSH
2608: LD_INT 0
2610: PUSH
2611: LD_INT 52
2613: PUSH
2614: LD_INT 12
2616: PUSH
2617: LD_INT 3
2619: PUSH
2620: LD_INT 3
2622: PUSH
2623: LD_INT 0
2625: PUSH
2626: LD_INT 0
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: LIST
2633: LIST
2634: LIST
2635: LIST
2636: LIST
2637: PUSH
2638: EMPTY
2639: LIST
2640: ST_TO_ADDR
// uc_side := 1 ;
2641: LD_ADDR_OWVAR 20
2645: PUSH
2646: LD_INT 1
2648: ST_TO_ADDR
// uc_nation := 1 ;
2649: LD_ADDR_OWVAR 21
2653: PUSH
2654: LD_INT 1
2656: ST_TO_ADDR
// for i in blist do
2657: LD_ADDR_VAR 0 3
2661: PUSH
2662: LD_VAR 0 2
2666: PUSH
2667: FOR_IN
2668: IFFALSE 2861
// begin InitBc ;
2670: CALL_OW 21
// bc_type := i [ 1 ] ;
2674: LD_ADDR_OWVAR 42
2678: PUSH
2679: LD_VAR 0 3
2683: PUSH
2684: LD_INT 1
2686: ARRAY
2687: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2688: LD_ADDR_OWVAR 43
2692: PUSH
2693: LD_VAR 0 3
2697: PUSH
2698: LD_INT 5
2700: ARRAY
2701: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2702: LD_ADDR_OWVAR 44
2706: PUSH
2707: LD_INT 9
2709: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2710: LD_ADDR_OWVAR 45
2714: PUSH
2715: LD_INT 9
2717: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2718: LD_VAR 0 3
2722: PUSH
2723: LD_INT 1
2725: ARRAY
2726: PUSH
2727: LD_INT 7
2729: PUSH
2730: LD_INT 8
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: IN
2737: IFFALSE 2789
// begin bc_kind1 := i [ 7 ] ;
2739: LD_ADDR_OWVAR 44
2743: PUSH
2744: LD_VAR 0 3
2748: PUSH
2749: LD_INT 7
2751: ARRAY
2752: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2753: LD_ADDR_OWVAR 45
2757: PUSH
2758: LD_INT 9
2760: ST_TO_ADDR
// if i [ 1 ] = b_lab_full then
2761: LD_VAR 0 3
2765: PUSH
2766: LD_INT 1
2768: ARRAY
2769: PUSH
2770: LD_INT 8
2772: EQUAL
2773: IFFALSE 2789
// bc_kind2 := i [ 8 ] ;
2775: LD_ADDR_OWVAR 45
2779: PUSH
2780: LD_VAR 0 3
2784: PUSH
2785: LD_INT 8
2787: ARRAY
2788: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2789: LD_ADDR_VAR 0 4
2793: PUSH
2794: LD_VAR 0 3
2798: PUSH
2799: LD_INT 2
2801: ARRAY
2802: PPUSH
2803: LD_VAR 0 3
2807: PUSH
2808: LD_INT 3
2810: ARRAY
2811: PPUSH
2812: LD_VAR 0 3
2816: PUSH
2817: LD_INT 4
2819: ARRAY
2820: PPUSH
2821: CALL_OW 47
2825: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2826: LD_VAR 0 4
2830: PPUSH
2831: CALL_OW 266
2835: PUSH
2836: LD_INT 32
2838: EQUAL
2839: IFFALSE 2859
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
2841: LD_VAR 0 4
2845: PPUSH
2846: LD_VAR 0 3
2850: PUSH
2851: LD_INT 7
2853: ARRAY
2854: PPUSH
2855: CALL_OW 431
// end ; end ;
2859: GO 2667
2861: POP
2862: POP
// if not FilterAllUnits ( [ f_btype , b_depot ] ) then
2863: LD_INT 30
2865: PUSH
2866: LD_INT 0
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PPUSH
2873: CALL_OW 69
2877: NOT
2878: IFFALSE 2915
// begin bc_type := b_depot ;
2880: LD_ADDR_OWVAR 42
2884: PUSH
2885: LD_INT 0
2887: ST_TO_ADDR
// bc_level := 6 ;
2888: LD_ADDR_OWVAR 43
2892: PUSH
2893: LD_INT 6
2895: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2896: LD_ADDR_VAR 0 4
2900: PUSH
2901: LD_INT 52
2903: PPUSH
2904: LD_INT 12
2906: PPUSH
2907: LD_INT 3
2909: PPUSH
2910: CALL_OW 47
2914: ST_TO_ADDR
// end ; base := GetBase ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
2915: LD_ADDR_VAR 0 5
2919: PUSH
2920: LD_INT 22
2922: PUSH
2923: LD_INT 1
2925: PUSH
2926: EMPTY
2927: LIST
2928: LIST
2929: PUSH
2930: LD_INT 2
2932: PUSH
2933: LD_INT 30
2935: PUSH
2936: LD_INT 0
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: PUSH
2943: LD_INT 30
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: LIST
2957: PUSH
2958: EMPTY
2959: LIST
2960: LIST
2961: PPUSH
2962: CALL_OW 69
2966: PUSH
2967: LD_INT 1
2969: ARRAY
2970: PPUSH
2971: CALL_OW 274
2975: ST_TO_ADDR
// if base then
2976: LD_VAR 0 5
2980: IFFALSE 2997
// SetResourceType ( base , mat_oil , 1000 ) ;
2982: LD_VAR 0 5
2986: PPUSH
2987: LD_INT 2
2989: PPUSH
2990: LD_INT 1000
2992: PPUSH
2993: CALL_OW 277
// end ; end_of_file
2997: LD_VAR 0 1
3001: RET
// export function Action ; var points , i , sol , time , team , filter ; begin
3002: LD_INT 0
3004: PPUSH
3005: PPUSH
3006: PPUSH
3007: PPUSH
3008: PPUSH
3009: PPUSH
3010: PPUSH
// InGameOn ;
3011: CALL_OW 8
// CenterNowOnXY ( 33 , 11 ) ;
3015: LD_INT 33
3017: PPUSH
3018: LD_INT 11
3020: PPUSH
3021: CALL_OW 86
// points := [ [ 29 , 21 ] , [ 41 , 28 ] , [ 52 , 26 ] , [ 49 , 16 ] ] ;
3025: LD_ADDR_VAR 0 2
3029: PUSH
3030: LD_INT 29
3032: PUSH
3033: LD_INT 21
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 41
3042: PUSH
3043: LD_INT 28
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: PUSH
3050: LD_INT 52
3052: PUSH
3053: LD_INT 26
3055: PUSH
3056: EMPTY
3057: LIST
3058: LIST
3059: PUSH
3060: LD_INT 49
3062: PUSH
3063: LD_INT 16
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: ST_TO_ADDR
// sol := ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Cyrus , Bobby , Gladstone , Houten , Khatam ] ) [ 1 ] ;
3076: LD_ADDR_VAR 0 4
3080: PUSH
3081: LD_INT 22
3083: PUSH
3084: LD_INT 1
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: PUSH
3091: LD_INT 26
3093: PUSH
3094: LD_INT 1
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: PPUSH
3105: CALL_OW 69
3109: PUSH
3110: LD_EXP 7
3114: PUSH
3115: LD_EXP 14
3119: PUSH
3120: LD_EXP 11
3124: PUSH
3125: LD_EXP 12
3129: PUSH
3130: LD_EXP 8
3134: PUSH
3135: LD_EXP 15
3139: PUSH
3140: LD_EXP 16
3144: PUSH
3145: EMPTY
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: LIST
3152: LIST
3153: DIFF
3154: PUSH
3155: LD_INT 1
3157: ARRAY
3158: ST_TO_ADDR
// if sol then
3159: LD_VAR 0 4
3163: IFFALSE 3194
// begin ComMoveXY ( sol , 50 , 18 ) ;
3165: LD_VAR 0 4
3169: PPUSH
3170: LD_INT 50
3172: PPUSH
3173: LD_INT 18
3175: PPUSH
3176: CALL_OW 111
// AddComTurnUnit ( sol , Harisson ) ;
3180: LD_VAR 0 4
3184: PPUSH
3185: LD_EXP 17
3189: PPUSH
3190: CALL_OW 179
// end ; for i in points do
3194: LD_ADDR_VAR 0 3
3198: PUSH
3199: LD_VAR 0 2
3203: PUSH
3204: FOR_IN
3205: IFFALSE 3245
// AddComMoveXY ( [ Harisson , RandGuy ] , i [ 1 ] , i [ 2 ] ) ;
3207: LD_EXP 17
3211: PUSH
3212: LD_EXP 19
3216: PUSH
3217: EMPTY
3218: LIST
3219: LIST
3220: PPUSH
3221: LD_VAR 0 3
3225: PUSH
3226: LD_INT 1
3228: ARRAY
3229: PPUSH
3230: LD_VAR 0 3
3234: PUSH
3235: LD_INT 2
3237: ARRAY
3238: PPUSH
3239: CALL_OW 171
3243: GO 3204
3245: POP
3246: POP
// AddComExitVehicle ( [ Harisson , RandGuy ] ) ;
3247: LD_EXP 17
3251: PUSH
3252: LD_EXP 19
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PPUSH
3261: CALL_OW 181
// AddComTurnUnit ( [ Harisson , RandGuy ] , sol ) ;
3265: LD_EXP 17
3269: PUSH
3270: LD_EXP 19
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: PPUSH
3279: LD_VAR 0 4
3283: PPUSH
3284: CALL_OW 179
// time := 0 0$20 ;
3288: LD_ADDR_VAR 0 5
3292: PUSH
3293: LD_INT 700
3295: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
3296: LD_INT 10
3298: PPUSH
3299: CALL_OW 67
// time := time - 0 0$0.3 ;
3303: LD_ADDR_VAR 0 5
3307: PUSH
3308: LD_VAR 0 5
3312: PUSH
3313: LD_INT 10
3315: MINUS
3316: ST_TO_ADDR
// until not IsInUnit ( Harisson ) or time <= 0 0$00 ;
3317: LD_EXP 17
3321: PPUSH
3322: CALL_OW 310
3326: NOT
3327: PUSH
3328: LD_VAR 0 5
3332: PUSH
3333: LD_INT 0
3335: LESSEQUAL
3336: OR
3337: IFFALSE 3296
// Say ( sol , D1-Sol1-1 ) ;
3339: LD_VAR 0 4
3343: PPUSH
3344: LD_STRING D1-Sol1-1
3346: PPUSH
3347: CALL_OW 88
// Say ( Harisson , D1-Har-1 ) ;
3351: LD_EXP 17
3355: PPUSH
3356: LD_STRING D1-Har-1
3358: PPUSH
3359: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3363: LD_INT 10
3365: PPUSH
3366: CALL_OW 67
// ComMoveXY ( sol , 35 , 21 ) ;
3370: LD_VAR 0 4
3374: PPUSH
3375: LD_INT 35
3377: PPUSH
3378: LD_INT 21
3380: PPUSH
3381: CALL_OW 111
// ComExitBuilding ( JMM ) ;
3385: LD_EXP 7
3389: PPUSH
3390: CALL_OW 122
// AddComMoveUnit ( JMM , Harisson ) ;
3394: LD_EXP 7
3398: PPUSH
3399: LD_EXP 17
3403: PPUSH
3404: CALL_OW 172
// ComTurnUnit ( [ Harisson , RandGuy ] , JMM ) ;
3408: LD_EXP 17
3412: PUSH
3413: LD_EXP 19
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PPUSH
3422: LD_EXP 7
3426: PPUSH
3427: CALL_OW 119
// time := 0 0$3 ;
3431: LD_ADDR_VAR 0 5
3435: PUSH
3436: LD_INT 105
3438: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3439: LD_INT 35
3441: PPUSH
3442: CALL_OW 67
// time := time - 0 0$1 ;
3446: LD_ADDR_VAR 0 5
3450: PUSH
3451: LD_VAR 0 5
3455: PUSH
3456: LD_INT 35
3458: MINUS
3459: ST_TO_ADDR
// until GetDistUnits ( JMM , Harisson ) < 4 or time = 0 0$00 ;
3460: LD_EXP 7
3464: PPUSH
3465: LD_EXP 17
3469: PPUSH
3470: CALL_OW 296
3474: PUSH
3475: LD_INT 4
3477: LESS
3478: PUSH
3479: LD_VAR 0 5
3483: PUSH
3484: LD_INT 0
3486: EQUAL
3487: OR
3488: IFFALSE 3439
// ComTurnUnit ( JMM , Harisson ) ;
3490: LD_EXP 7
3494: PPUSH
3495: LD_EXP 17
3499: PPUSH
3500: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3504: LD_EXP 7
3508: PPUSH
3509: LD_STRING D1-JMM-1
3511: PPUSH
3512: CALL_OW 88
// Say ( Harisson , D1-Har-2 ) ;
3516: LD_EXP 17
3520: PPUSH
3521: LD_STRING D1-Har-2
3523: PPUSH
3524: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3528: LD_EXP 7
3532: PPUSH
3533: LD_STRING D1-JMM-2
3535: PPUSH
3536: CALL_OW 88
// Say ( Harisson , D1-Har-3 ) ;
3540: LD_EXP 17
3544: PPUSH
3545: LD_STRING D1-Har-3
3547: PPUSH
3548: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3552: LD_EXP 7
3556: PPUSH
3557: LD_STRING D1-JMM-3
3559: PPUSH
3560: CALL_OW 88
// Say ( Harisson , D1-Har-4 ) ;
3564: LD_EXP 17
3568: PPUSH
3569: LD_STRING D1-Har-4
3571: PPUSH
3572: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3576: LD_EXP 7
3580: PPUSH
3581: LD_STRING D1-JMM-4
3583: PPUSH
3584: CALL_OW 88
// Say ( Harisson , D1-Har-5 ) ;
3588: LD_EXP 17
3592: PPUSH
3593: LD_STRING D1-Har-5
3595: PPUSH
3596: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3600: LD_EXP 7
3604: PPUSH
3605: LD_STRING D1-JMM-5
3607: PPUSH
3608: CALL_OW 88
// Say ( Harisson , D1-Har-6 ) ;
3612: LD_EXP 17
3616: PPUSH
3617: LD_STRING D1-Har-6
3619: PPUSH
3620: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3624: LD_EXP 7
3628: PPUSH
3629: LD_STRING D1-JMM-6
3631: PPUSH
3632: CALL_OW 88
// EndMission ;
3636: CALL 3645 0 0
// end ;
3640: LD_VAR 0 1
3644: RET
// export function EndMission ; var commander , i , all ; begin
3645: LD_INT 0
3647: PPUSH
3648: PPUSH
3649: PPUSH
3650: PPUSH
// case gamma_commander of 1 :
3651: LD_EXP 18
3655: PUSH
3656: LD_INT 1
3658: DOUBLE
3659: EQUAL
3660: IFTRUE 3664
3662: GO 3677
3664: POP
// commander := Donaldson ; 2 :
3665: LD_ADDR_VAR 0 2
3669: PUSH
3670: LD_EXP 13
3674: ST_TO_ADDR
3675: GO 3720
3677: LD_INT 2
3679: DOUBLE
3680: EQUAL
3681: IFTRUE 3685
3683: GO 3698
3685: POP
// commander := Brown ; 3 :
3686: LD_ADDR_VAR 0 2
3690: PUSH
3691: LD_EXP 14
3695: ST_TO_ADDR
3696: GO 3720
3698: LD_INT 3
3700: DOUBLE
3701: EQUAL
3702: IFTRUE 3706
3704: GO 3719
3706: POP
// commander := Houten ; end ;
3707: LD_ADDR_VAR 0 2
3711: PUSH
3712: LD_EXP 15
3716: ST_TO_ADDR
3717: GO 3720
3719: POP
// all := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , commander ] ;
3720: LD_ADDR_VAR 0 4
3724: PUSH
3725: LD_INT 22
3727: PUSH
3728: LD_INT 1
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: PUSH
3735: LD_INT 21
3737: PUSH
3738: LD_INT 1
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: PPUSH
3749: CALL_OW 69
3753: PUSH
3754: LD_EXP 7
3758: PUSH
3759: LD_VAR 0 2
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: DIFF
3768: ST_TO_ADDR
// if UnitFilter ( all , [ f_class , 2 ] ) then
3769: LD_VAR 0 4
3773: PPUSH
3774: LD_INT 25
3776: PUSH
3777: LD_INT 2
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PPUSH
3784: CALL_OW 72
3788: IFFALSE 3834
// for i in UnitFilter ( all , [ f_class , 2 ] ) do
3790: LD_ADDR_VAR 0 3
3794: PUSH
3795: LD_VAR 0 4
3799: PPUSH
3800: LD_INT 25
3802: PUSH
3803: LD_INT 2
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: PPUSH
3810: CALL_OW 72
3814: PUSH
3815: FOR_IN
3816: IFFALSE 3832
// SetClass ( i , 2 ) ;
3818: LD_VAR 0 3
3822: PPUSH
3823: LD_INT 2
3825: PPUSH
3826: CALL_OW 336
3830: GO 3815
3832: POP
3833: POP
// save_group := CharacterSelection ( 1 , 11 , 11 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ all ^ [ sel_dont_change_class , sel_not_changeable ] ^ [ commander , Harisson ] , [ [ class_soldier , 3 ] , [ class_mechanic , 3 , 6 ] , [ class_scientistic , 1 , 2 ] ] ) ;
3834: LD_ADDR_EXP 4
3838: PUSH
3839: LD_STRING 1
3841: PPUSH
3842: LD_INT 11
3844: PPUSH
3845: LD_INT 11
3847: PPUSH
3848: LD_INT -5
3850: PUSH
3851: LD_EXP 7
3855: PUSH
3856: LD_INT -2
3858: PUSH
3859: LD_INT -3
3861: PUSH
3862: LD_INT -5
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: PUSH
3872: LD_VAR 0 4
3876: ADD
3877: PUSH
3878: LD_INT -6
3880: PUSH
3881: LD_INT -4
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: ADD
3888: PUSH
3889: LD_VAR 0 2
3893: PUSH
3894: LD_EXP 17
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: ADD
3903: PPUSH
3904: LD_INT 1
3906: PUSH
3907: LD_INT 3
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: PUSH
3914: LD_INT 3
3916: PUSH
3917: LD_INT 3
3919: PUSH
3920: LD_INT 6
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: LIST
3927: PUSH
3928: LD_INT 4
3930: PUSH
3931: LD_INT 1
3933: PUSH
3934: LD_INT 2
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: LIST
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: LIST
3946: PPUSH
3947: CALL_OW 42
3951: ST_TO_ADDR
// SaveCharacters ( all diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , Houten , Harisson , Khatam ] ^ save_group , 07_othersGamma ) ;
3952: LD_VAR 0 4
3956: PUSH
3957: LD_EXP 7
3961: PUSH
3962: LD_EXP 8
3966: PUSH
3967: LD_EXP 10
3971: PUSH
3972: LD_EXP 11
3976: PUSH
3977: LD_EXP 12
3981: PUSH
3982: LD_EXP 9
3986: PUSH
3987: LD_EXP 13
3991: PUSH
3992: LD_EXP 14
3996: PUSH
3997: LD_EXP 15
4001: PUSH
4002: LD_EXP 17
4006: PUSH
4007: LD_EXP 16
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: PUSH
4025: LD_EXP 4
4029: ADD
4030: DIFF
4031: PPUSH
4032: LD_STRING 07_othersGamma
4034: PPUSH
4035: CALL_OW 38
// SaveCharacters ( save_group diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , Houten , Harisson , Khatam , 0 ] , 07_others ) ;
4039: LD_EXP 4
4043: PUSH
4044: LD_EXP 7
4048: PUSH
4049: LD_EXP 8
4053: PUSH
4054: LD_EXP 10
4058: PUSH
4059: LD_EXP 11
4063: PUSH
4064: LD_EXP 12
4068: PUSH
4069: LD_EXP 9
4073: PUSH
4074: LD_EXP 13
4078: PUSH
4079: LD_EXP 14
4083: PUSH
4084: LD_EXP 15
4088: PUSH
4089: LD_EXP 17
4093: PUSH
4094: LD_EXP 16
4098: PUSH
4099: LD_INT 0
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: DIFF
4116: PPUSH
4117: LD_STRING 07_others
4119: PPUSH
4120: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4124: LD_EXP 7
4128: PPUSH
4129: LD_EXP 5
4133: PUSH
4134: LD_STRING JMM
4136: STR
4137: PPUSH
4138: CALL_OW 38
// if Lisa then
4142: LD_EXP 10
4146: IFFALSE 4188
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4148: LD_EXP 10
4152: PPUSH
4153: LD_EXP 5
4157: PUSH
4158: LD_STRING Lisa
4160: STR
4161: PPUSH
4162: CALL_OW 38
// if Lisa in save_group then
4166: LD_EXP 10
4170: PUSH
4171: LD_EXP 4
4175: IN
4176: IFFALSE 4188
// SaveVariable ( true , LisaIn07 ) ;
4178: LD_INT 1
4180: PPUSH
4181: LD_STRING LisaIn07
4183: PPUSH
4184: CALL_OW 39
// end ; if Bobby then
4188: LD_EXP 12
4192: IFFALSE 4234
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4194: LD_EXP 12
4198: PPUSH
4199: LD_EXP 5
4203: PUSH
4204: LD_STRING Bobby
4206: STR
4207: PPUSH
4208: CALL_OW 38
// if Bobby in save_group then
4212: LD_EXP 12
4216: PUSH
4217: LD_EXP 4
4221: IN
4222: IFFALSE 4234
// SaveVariable ( true , BobbyIn07 ) ;
4224: LD_INT 1
4226: PPUSH
4227: LD_STRING BobbyIn07
4229: PPUSH
4230: CALL_OW 39
// end ; if Cyrus then
4234: LD_EXP 11
4238: IFFALSE 4280
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4240: LD_EXP 11
4244: PPUSH
4245: LD_EXP 5
4249: PUSH
4250: LD_STRING Cyrus
4252: STR
4253: PPUSH
4254: CALL_OW 38
// if Cyrus in save_group then
4258: LD_EXP 11
4262: PUSH
4263: LD_EXP 4
4267: IN
4268: IFFALSE 4280
// SaveVariable ( true , CyrusIn07 ) ;
4270: LD_INT 1
4272: PPUSH
4273: LD_STRING CyrusIn07
4275: PPUSH
4276: CALL_OW 39
// end ; if Brown then
4280: LD_EXP 14
4284: IFFALSE 4326
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
4286: LD_EXP 14
4290: PPUSH
4291: LD_EXP 5
4295: PUSH
4296: LD_STRING Brown
4298: STR
4299: PPUSH
4300: CALL_OW 38
// if Brown in save_group then
4304: LD_EXP 14
4308: PUSH
4309: LD_EXP 4
4313: IN
4314: IFFALSE 4326
// SaveVariable ( true , BrownIn07 ) ;
4316: LD_INT 1
4318: PPUSH
4319: LD_STRING BrownIn07
4321: PPUSH
4322: CALL_OW 39
// end ; if Donaldson then
4326: LD_EXP 13
4330: IFFALSE 4372
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
4332: LD_EXP 13
4336: PPUSH
4337: LD_EXP 5
4341: PUSH
4342: LD_STRING Donaldson
4344: STR
4345: PPUSH
4346: CALL_OW 38
// if Donaldson in save_group then
4350: LD_EXP 13
4354: PUSH
4355: LD_EXP 4
4359: IN
4360: IFFALSE 4372
// SaveVariable ( true , DonaldsonIn07 ) ;
4362: LD_INT 1
4364: PPUSH
4365: LD_STRING DonaldsonIn07
4367: PPUSH
4368: CALL_OW 39
// end ; if Gladstone then
4372: LD_EXP 8
4376: IFFALSE 4418
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4378: LD_EXP 8
4382: PPUSH
4383: LD_EXP 5
4387: PUSH
4388: LD_STRING Gladstone
4390: STR
4391: PPUSH
4392: CALL_OW 38
// if Gladstone in save_group then
4396: LD_EXP 8
4400: PUSH
4401: LD_EXP 4
4405: IN
4406: IFFALSE 4418
// SaveVariable ( true , GladstoneIn07 ) ;
4408: LD_INT 1
4410: PPUSH
4411: LD_STRING GladstoneIn07
4413: PPUSH
4414: CALL_OW 39
// end ; if Khatam then
4418: LD_EXP 16
4422: IFFALSE 4464
// begin SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
4424: LD_EXP 16
4428: PPUSH
4429: LD_EXP 5
4433: PUSH
4434: LD_STRING Khatam
4436: STR
4437: PPUSH
4438: CALL_OW 38
// if Khatam in save_group then
4442: LD_EXP 16
4446: PUSH
4447: LD_EXP 4
4451: IN
4452: IFFALSE 4464
// SaveVariable ( true , KhatamIn07 ) ;
4454: LD_INT 1
4456: PPUSH
4457: LD_STRING KhatamIn07
4459: PPUSH
4460: CALL_OW 39
// end ; if debug then
4464: LD_EXP 1
4468: IFFALSE 4474
// InGameOff ;
4470: CALL_OW 9
// ToLua ( enableBioCharacter(BIO_HARR) ) ;
4474: LD_STRING enableBioCharacter(BIO_HARR)
4476: PPUSH
4477: CALL_OW 559
// ChangeMap ( 1 , %_cont ) ;
4481: LD_INT 1
4483: PPUSH
4484: LD_STRING %_cont
4486: PPUSH
4487: CALL_OW 340
// end ; end_of_file
4491: LD_VAR 0 1
4495: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4496: LD_INT 0
4498: PPUSH
4499: PPUSH
// if exist_mode then
4500: LD_VAR 0 2
4504: IFFALSE 4529
// unit := CreateCharacter ( prefix & ident ) else
4506: LD_ADDR_VAR 0 5
4510: PUSH
4511: LD_VAR 0 3
4515: PUSH
4516: LD_VAR 0 1
4520: STR
4521: PPUSH
4522: CALL_OW 34
4526: ST_TO_ADDR
4527: GO 4544
// unit := NewCharacter ( ident ) ;
4529: LD_ADDR_VAR 0 5
4533: PUSH
4534: LD_VAR 0 1
4538: PPUSH
4539: CALL_OW 25
4543: ST_TO_ADDR
// result := unit ;
4544: LD_ADDR_VAR 0 4
4548: PUSH
4549: LD_VAR 0 5
4553: ST_TO_ADDR
// end ;
4554: LD_VAR 0 4
4558: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
4559: LD_INT 0
4561: PPUSH
// uc_side := side ;
4562: LD_ADDR_OWVAR 20
4566: PUSH
4567: LD_VAR 0 1
4571: ST_TO_ADDR
// uc_nation := nation ;
4572: LD_ADDR_OWVAR 21
4576: PUSH
4577: LD_VAR 0 2
4581: ST_TO_ADDR
// vc_chassis := chassis ;
4582: LD_ADDR_OWVAR 37
4586: PUSH
4587: LD_VAR 0 3
4591: ST_TO_ADDR
// vc_engine := engine ;
4592: LD_ADDR_OWVAR 39
4596: PUSH
4597: LD_VAR 0 4
4601: ST_TO_ADDR
// vc_control := control ;
4602: LD_ADDR_OWVAR 38
4606: PUSH
4607: LD_VAR 0 5
4611: ST_TO_ADDR
// vc_weapon := weapon ;
4612: LD_ADDR_OWVAR 40
4616: PUSH
4617: LD_VAR 0 6
4621: ST_TO_ADDR
// vc_fuel_battery := fuel ;
4622: LD_ADDR_OWVAR 41
4626: PUSH
4627: LD_VAR 0 7
4631: ST_TO_ADDR
// result := CreateVehicle ;
4632: LD_ADDR_VAR 0 8
4636: PUSH
4637: CALL_OW 45
4641: ST_TO_ADDR
// end ;
4642: LD_VAR 0 8
4646: RET
// export function SayX ( units , ident ) ; var i ; begin
4647: LD_INT 0
4649: PPUSH
4650: PPUSH
// result := false ;
4651: LD_ADDR_VAR 0 3
4655: PUSH
4656: LD_INT 0
4658: ST_TO_ADDR
// if not units then
4659: LD_VAR 0 1
4663: NOT
4664: IFFALSE 4668
// exit ;
4666: GO 4722
// for i in units do
4668: LD_ADDR_VAR 0 4
4672: PUSH
4673: LD_VAR 0 1
4677: PUSH
4678: FOR_IN
4679: IFFALSE 4720
// if IsOk ( i ) then
4681: LD_VAR 0 4
4685: PPUSH
4686: CALL_OW 302
4690: IFFALSE 4718
// begin Say ( i , ident ) ;
4692: LD_VAR 0 4
4696: PPUSH
4697: LD_VAR 0 2
4701: PPUSH
4702: CALL_OW 88
// result := i ;
4706: LD_ADDR_VAR 0 3
4710: PUSH
4711: LD_VAR 0 4
4715: ST_TO_ADDR
// break ;
4716: GO 4720
// end ;
4718: GO 4678
4720: POP
4721: POP
// end ;
4722: LD_VAR 0 3
4726: RET
