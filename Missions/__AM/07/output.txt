// starting begin ResetFog ;
   0: CALL_OW 335
// FogOff ( 1 ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 344
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 28 0 0
// PrepareAmerican ;
  19: CALL 94 0 0
// Action ;
  23: CALL 2978 0 0
// end ;
  27: END
// export debug ; export donaldson_commander , brown_commander , save_group ; export mission_prefix , mission_prefix_prev ; function Init ; begin
  28: LD_INT 0
  30: PPUSH
// debug := false ;
  31: LD_ADDR_EXP 1
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// mission_prefix := 07_ ;
  39: LD_ADDR_EXP 5
  43: PUSH
  44: LD_STRING 07_
  46: ST_TO_ADDR
// mission_prefix_prev := [ 06_ , 05_ , 04_ ] ;
  47: LD_ADDR_EXP 6
  51: PUSH
  52: LD_STRING 06_
  54: PUSH
  55: LD_STRING 05_
  57: PUSH
  58: LD_STRING 04_
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: LIST
  65: ST_TO_ADDR
// donaldson_commander := false ;
  66: LD_ADDR_EXP 2
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// brown_commander := false ;
  74: LD_ADDR_EXP 3
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// save_group := [ ] ;
  82: LD_ADDR_EXP 4
  86: PUSH
  87: EMPTY
  88: ST_TO_ADDR
// end ; end_of_file
  89: LD_VAR 0 1
  93: RET
// export JMM , Gladstone , Frank , Lisa , Cyrus , Bobby , Donaldson , Brown , Houten , Khatam , Harisson ; export gamma_commander ; export RandGuy ; export function PrepareAmerican ; var others , others_delta , others4 , veh , team , dep , bar , lab , fac , bun , filter , i , j ; begin
  94: LD_INT 0
  96: PPUSH
  97: PPUSH
  98: PPUSH
  99: PPUSH
 100: PPUSH
 101: PPUSH
 102: PPUSH
 103: PPUSH
 104: PPUSH
 105: PPUSH
 106: PPUSH
 107: PPUSH
 108: PPUSH
 109: PPUSH
// PrepareBase ;
 110: CALL 2561 0 0
// uc_side := 1 ;
 114: LD_ADDR_OWVAR 20
 118: PUSH
 119: LD_INT 1
 121: ST_TO_ADDR
// uc_nation := 1 ;
 122: LD_ADDR_OWVAR 21
 126: PUSH
 127: LD_INT 1
 129: ST_TO_ADDR
// team := [ ] ;
 130: LD_ADDR_VAR 0 6
 134: PUSH
 135: EMPTY
 136: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 06c_ ) ;
 137: LD_ADDR_EXP 7
 141: PUSH
 142: LD_STRING JMM
 144: PPUSH
 145: LD_EXP 1
 149: NOT
 150: PPUSH
 151: LD_STRING 06c_
 153: PPUSH
 154: CALL 4465 0 3
 158: ST_TO_ADDR
// if GetClass ( JMM ) = 2 then
 159: LD_EXP 7
 163: PPUSH
 164: CALL_OW 257
 168: PUSH
 169: LD_INT 2
 171: EQUAL
 172: IFFALSE 186
// SetClass ( JMM , 1 ) ;
 174: LD_EXP 7
 178: PPUSH
 179: LD_INT 1
 181: PPUSH
 182: CALL_OW 336
// gamma_commander := LoadVariable ( GammaCommander , 3 ) ;
 186: LD_ADDR_EXP 18
 190: PUSH
 191: LD_STRING GammaCommander
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: CALL_OW 30
 201: ST_TO_ADDR
// if gamma_commander = 1 then
 202: LD_EXP 18
 206: PUSH
 207: LD_INT 1
 209: EQUAL
 210: IFFALSE 236
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 04_ ) ;
 212: LD_ADDR_EXP 13
 216: PUSH
 217: LD_STRING Donaldson
 219: PPUSH
 220: LD_EXP 1
 224: NOT
 225: PPUSH
 226: LD_STRING 04_
 228: PPUSH
 229: CALL 4465 0 3
 233: ST_TO_ADDR
// end else
 234: GO 307
// begin if LoadVariable ( DonaldsonIn06 , 0 ) then
 236: LD_STRING DonaldsonIn06
 238: PPUSH
 239: LD_INT 0
 241: PPUSH
 242: CALL_OW 30
 246: IFFALSE 272
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 06c_ ) else
 248: LD_ADDR_EXP 13
 252: PUSH
 253: LD_STRING Donaldson
 255: PPUSH
 256: LD_EXP 1
 260: NOT
 261: PPUSH
 262: LD_STRING 06c_
 264: PPUSH
 265: CALL 4465 0 3
 269: ST_TO_ADDR
 270: GO 307
// if not LoadVariable ( DonaldsonStayInDelta , 0 ) then
 272: LD_STRING DonaldsonStayInDelta
 274: PPUSH
 275: LD_INT 0
 277: PPUSH
 278: CALL_OW 30
 282: NOT
 283: IFFALSE 307
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 04_ ) ;
 285: LD_ADDR_EXP 13
 289: PUSH
 290: LD_STRING Donaldson
 292: PPUSH
 293: LD_EXP 1
 297: NOT
 298: PPUSH
 299: LD_STRING 04_
 301: PPUSH
 302: CALL 4465 0 3
 306: ST_TO_ADDR
// end ; if Donaldson then
 307: LD_EXP 13
 311: IFFALSE 329
// team := team ^ Donaldson ;
 313: LD_ADDR_VAR 0 6
 317: PUSH
 318: LD_VAR 0 6
 322: PUSH
 323: LD_EXP 13
 327: ADD
 328: ST_TO_ADDR
// if gamma_commander = 2 then
 329: LD_EXP 18
 333: PUSH
 334: LD_INT 2
 336: EQUAL
 337: IFFALSE 363
// begin Brown := PrepareUnit ( Brown , ( not debug ) , 04_ ) ;
 339: LD_ADDR_EXP 14
 343: PUSH
 344: LD_STRING Brown
 346: PPUSH
 347: LD_EXP 1
 351: NOT
 352: PPUSH
 353: LD_STRING 04_
 355: PPUSH
 356: CALL 4465 0 3
 360: ST_TO_ADDR
// end else
 361: GO 434
// begin if LoadVariable ( BrownIn06 , 0 ) then
 363: LD_STRING BrownIn06
 365: PPUSH
 366: LD_INT 0
 368: PPUSH
 369: CALL_OW 30
 373: IFFALSE 399
// Brown := PrepareUnit ( Brown , ( not debug ) , 06c_ ) else
 375: LD_ADDR_EXP 14
 379: PUSH
 380: LD_STRING Brown
 382: PPUSH
 383: LD_EXP 1
 387: NOT
 388: PPUSH
 389: LD_STRING 06c_
 391: PPUSH
 392: CALL 4465 0 3
 396: ST_TO_ADDR
 397: GO 434
// if not LoadVariable ( BrownStayInDelta , 0 ) then
 399: LD_STRING BrownStayInDelta
 401: PPUSH
 402: LD_INT 0
 404: PPUSH
 405: CALL_OW 30
 409: NOT
 410: IFFALSE 434
// Brown := PrepareUnit ( Brown , ( not debug ) , 04_ ) ;
 412: LD_ADDR_EXP 14
 416: PUSH
 417: LD_STRING Brown
 419: PPUSH
 420: LD_EXP 1
 424: NOT
 425: PPUSH
 426: LD_STRING 04_
 428: PPUSH
 429: CALL 4465 0 3
 433: ST_TO_ADDR
// end ; if Brown then
 434: LD_EXP 14
 438: IFFALSE 456
// team := team ^ Brown ;
 440: LD_ADDR_VAR 0 6
 444: PUSH
 445: LD_VAR 0 6
 449: PUSH
 450: LD_EXP 14
 454: ADD
 455: ST_TO_ADDR
// if gamma_commander = 3 then
 456: LD_EXP 18
 460: PUSH
 461: LD_INT 3
 463: EQUAL
 464: IFFALSE 501
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 466: LD_ADDR_EXP 15
 470: PUSH
 471: LD_STRING VanHouten
 473: PPUSH
 474: LD_INT 0
 476: PPUSH
 477: LD_STRING 
 479: PPUSH
 480: CALL 4465 0 3
 484: ST_TO_ADDR
// team := team ^ Houten ;
 485: LD_ADDR_VAR 0 6
 489: PUSH
 490: LD_VAR 0 6
 494: PUSH
 495: LD_EXP 15
 499: ADD
 500: ST_TO_ADDR
// end ; if LoadVariable ( GladstoneIn06 , 0 ) then
 501: LD_STRING GladstoneIn06
 503: PPUSH
 504: LD_INT 0
 506: PPUSH
 507: CALL_OW 30
 511: IFFALSE 537
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) else
 513: LD_ADDR_EXP 8
 517: PUSH
 518: LD_STRING Gladstone
 520: PPUSH
 521: LD_EXP 1
 525: NOT
 526: PPUSH
 527: LD_STRING 06c_
 529: PPUSH
 530: CALL 4465 0 3
 534: ST_TO_ADDR
 535: GO 571
// if LoadVariable ( GladstoneStayInDelta , 0 ) then
 537: LD_STRING GladstoneStayInDelta
 539: PPUSH
 540: LD_INT 0
 542: PPUSH
 543: CALL_OW 30
 547: IFFALSE 571
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06_ ) ;
 549: LD_ADDR_EXP 8
 553: PUSH
 554: LD_STRING Gladstone
 556: PPUSH
 557: LD_EXP 1
 561: NOT
 562: PPUSH
 563: LD_STRING 06_
 565: PPUSH
 566: CALL 4465 0 3
 570: ST_TO_ADDR
// if Gladstone then
 571: LD_EXP 8
 575: IFFALSE 593
// team := team ^ Gladstone ;
 577: LD_ADDR_VAR 0 6
 581: PUSH
 582: LD_VAR 0 6
 586: PUSH
 587: LD_EXP 8
 591: ADD
 592: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , 03_ ) ;
 593: LD_ADDR_EXP 16
 597: PUSH
 598: LD_STRING Khatam
 600: PPUSH
 601: LD_EXP 1
 605: NOT
 606: PPUSH
 607: LD_STRING 03_
 609: PPUSH
 610: CALL 4465 0 3
 614: ST_TO_ADDR
// if Khatam then
 615: LD_EXP 16
 619: IFFALSE 637
// team := team ^ Khatam ;
 621: LD_ADDR_VAR 0 6
 625: PUSH
 626: LD_VAR 0 6
 630: PUSH
 631: LD_EXP 16
 635: ADD
 636: ST_TO_ADDR
// if LoadVariable ( LisaIn06 , 0 ) then
 637: LD_STRING LisaIn06
 639: PPUSH
 640: LD_INT 0
 642: PPUSH
 643: CALL_OW 30
 647: IFFALSE 673
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 06c_ ) else
 649: LD_ADDR_EXP 10
 653: PUSH
 654: LD_STRING Lisa
 656: PPUSH
 657: LD_EXP 1
 661: NOT
 662: PPUSH
 663: LD_STRING 06c_
 665: PPUSH
 666: CALL 4465 0 3
 670: ST_TO_ADDR
 671: GO 708
// if not LoadVariable ( LisaStayInDelta , 0 ) then
 673: LD_STRING LisaStayInDelta
 675: PPUSH
 676: LD_INT 0
 678: PPUSH
 679: CALL_OW 30
 683: NOT
 684: IFFALSE 708
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 04_ ) ;
 686: LD_ADDR_EXP 10
 690: PUSH
 691: LD_STRING Lisa
 693: PPUSH
 694: LD_EXP 1
 698: NOT
 699: PPUSH
 700: LD_STRING 04_
 702: PPUSH
 703: CALL 4465 0 3
 707: ST_TO_ADDR
// if Lisa then
 708: LD_EXP 10
 712: IFFALSE 730
// team := team ^ Lisa ;
 714: LD_ADDR_VAR 0 6
 718: PUSH
 719: LD_VAR 0 6
 723: PUSH
 724: LD_EXP 10
 728: ADD
 729: ST_TO_ADDR
// if not Lisa then
 730: LD_EXP 10
 734: NOT
 735: IFFALSE 988
// begin if LoadVariable ( CyrusIn06 , 0 ) then
 737: LD_STRING CyrusIn06
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 30
 747: IFFALSE 773
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 06c_ ) else
 749: LD_ADDR_EXP 11
 753: PUSH
 754: LD_STRING Cyrus
 756: PPUSH
 757: LD_EXP 1
 761: NOT
 762: PPUSH
 763: LD_STRING 06c_
 765: PPUSH
 766: CALL 4465 0 3
 770: ST_TO_ADDR
 771: GO 837
// if not LoadVariable ( CyrusStayInDelta , 0 ) then
 773: LD_STRING CyrusStayInDelta
 775: PPUSH
 776: LD_INT 0
 778: PPUSH
 779: CALL_OW 30
 783: NOT
 784: IFFALSE 837
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 04_ ) ;
 786: LD_ADDR_EXP 11
 790: PUSH
 791: LD_STRING Cyrus
 793: PPUSH
 794: LD_EXP 1
 798: NOT
 799: PPUSH
 800: LD_STRING 04_
 802: PPUSH
 803: CALL 4465 0 3
 807: ST_TO_ADDR
// if not Cyrus then
 808: LD_EXP 11
 812: NOT
 813: IFFALSE 837
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 03_ ) ;
 815: LD_ADDR_EXP 11
 819: PUSH
 820: LD_STRING Cyrus
 822: PPUSH
 823: LD_EXP 1
 827: NOT
 828: PPUSH
 829: LD_STRING 03_
 831: PPUSH
 832: CALL 4465 0 3
 836: ST_TO_ADDR
// end ; if Cyrus then
 837: LD_EXP 11
 841: IFFALSE 859
// team := team ^ Cyrus ;
 843: LD_ADDR_VAR 0 6
 847: PUSH
 848: LD_VAR 0 6
 852: PUSH
 853: LD_EXP 11
 857: ADD
 858: ST_TO_ADDR
// if not Cyrus then
 859: LD_EXP 11
 863: NOT
 864: IFFALSE 988
// begin if LoadVariable ( BobbyIn06 , 0 ) then
 866: LD_STRING BobbyIn06
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: CALL_OW 30
 876: IFFALSE 902
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 06c_ ) else
 878: LD_ADDR_EXP 12
 882: PUSH
 883: LD_STRING Bobby
 885: PPUSH
 886: LD_EXP 1
 890: NOT
 891: PPUSH
 892: LD_STRING 06c_
 894: PPUSH
 895: CALL 4465 0 3
 899: ST_TO_ADDR
 900: GO 966
// if not LoadVariable ( BobbyStayInDelta , 0 ) then
 902: LD_STRING BobbyStayInDelta
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL_OW 30
 912: NOT
 913: IFFALSE 966
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , 04_ ) ;
 915: LD_ADDR_EXP 12
 919: PUSH
 920: LD_STRING Bobby
 922: PPUSH
 923: LD_EXP 1
 927: NOT
 928: PPUSH
 929: LD_STRING 04_
 931: PPUSH
 932: CALL 4465 0 3
 936: ST_TO_ADDR
// if not Bobby then
 937: LD_EXP 12
 941: NOT
 942: IFFALSE 966
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 03_ ) ;
 944: LD_ADDR_EXP 12
 948: PUSH
 949: LD_STRING Bobby
 951: PPUSH
 952: LD_EXP 1
 956: NOT
 957: PPUSH
 958: LD_STRING 03_
 960: PPUSH
 961: CALL 4465 0 3
 965: ST_TO_ADDR
// end ; if Bobby then
 966: LD_EXP 12
 970: IFFALSE 988
// team := team ^ Bobby ;
 972: LD_ADDR_VAR 0 6
 976: PUSH
 977: LD_VAR 0 6
 981: PUSH
 982: LD_EXP 12
 986: ADD
 987: ST_TO_ADDR
// end ; end ; others4 := CreateCharacterSet ( othersGamma ) ;
 988: LD_ADDR_VAR 0 4
 992: PUSH
 993: LD_STRING othersGamma
 995: PPUSH
 996: CALL_OW 31
1000: ST_TO_ADDR
// others := CreateCharacterSet ( 06_other_survivors ) ;
1001: LD_ADDR_VAR 0 2
1005: PUSH
1006: LD_STRING 06_other_survivors
1008: PPUSH
1009: CALL_OW 31
1013: ST_TO_ADDR
// others := others union others4 ;
1014: LD_ADDR_VAR 0 2
1018: PUSH
1019: LD_VAR 0 2
1023: PUSH
1024: LD_VAR 0 4
1028: UNION
1029: ST_TO_ADDR
// team := team ^ others ;
1030: LD_ADDR_VAR 0 6
1034: PUSH
1035: LD_VAR 0 6
1039: PUSH
1040: LD_VAR 0 2
1044: ADD
1045: ST_TO_ADDR
// InitHc ;
1046: CALL_OW 19
// if team <= 12 then
1050: LD_VAR 0 6
1054: PUSH
1055: LD_INT 12
1057: LESSEQUAL
1058: IFFALSE 1107
// repeat PrepareHuman ( false , rand ( 1 , 4 ) , 5 ) ;
1060: LD_INT 0
1062: PPUSH
1063: LD_INT 1
1065: PPUSH
1066: LD_INT 4
1068: PPUSH
1069: CALL_OW 12
1073: PPUSH
1074: LD_INT 5
1076: PPUSH
1077: CALL_OW 380
// team := team ^ CreateHuman ;
1081: LD_ADDR_VAR 0 6
1085: PUSH
1086: LD_VAR 0 6
1090: PUSH
1091: CALL_OW 44
1095: ADD
1096: ST_TO_ADDR
// until team > 12 ;
1097: LD_VAR 0 6
1101: PUSH
1102: LD_INT 12
1104: GREATER
1105: IFFALSE 1060
// for i in others do
1107: LD_ADDR_VAR 0 13
1111: PUSH
1112: LD_VAR 0 2
1116: PUSH
1117: FOR_IN
1118: IFFALSE 1186
// begin if GetClass ( i ) = 2 then
1120: LD_VAR 0 13
1124: PPUSH
1125: CALL_OW 257
1129: PUSH
1130: LD_INT 2
1132: EQUAL
1133: IFFALSE 1147
// SetClass ( i , 1 ) ;
1135: LD_VAR 0 13
1139: PPUSH
1140: LD_INT 1
1142: PPUSH
1143: CALL_OW 336
// for j = 1 to 4 do
1147: LD_ADDR_VAR 0 14
1151: PUSH
1152: DOUBLE
1153: LD_INT 1
1155: DEC
1156: ST_TO_ADDR
1157: LD_INT 4
1159: PUSH
1160: FOR_TO
1161: IFFALSE 1182
// AddExperience ( i , j , 3000 ) ;
1163: LD_VAR 0 13
1167: PPUSH
1168: LD_VAR 0 14
1172: PPUSH
1173: LD_INT 3000
1175: PPUSH
1176: CALL_OW 492
1180: GO 1160
1182: POP
1183: POP
// end ;
1184: GO 1117
1186: POP
1187: POP
// if UnitFilter ( team , [ f_class , 2 ] ) then
1188: LD_VAR 0 6
1192: PPUSH
1193: LD_INT 25
1195: PUSH
1196: LD_INT 2
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 72
1207: IFFALSE 1253
// for i in UnitFilter ( team , [ f_class , 2 ] ) do
1209: LD_ADDR_VAR 0 13
1213: PUSH
1214: LD_VAR 0 6
1218: PPUSH
1219: LD_INT 25
1221: PUSH
1222: LD_INT 2
1224: PUSH
1225: EMPTY
1226: LIST
1227: LIST
1228: PPUSH
1229: CALL_OW 72
1233: PUSH
1234: FOR_IN
1235: IFFALSE 1251
// SetClass ( i , 1 ) ;
1237: LD_VAR 0 13
1241: PPUSH
1242: LD_INT 1
1244: PPUSH
1245: CALL_OW 336
1249: GO 1234
1251: POP
1252: POP
// dep := FilterAllUnits ( [ f_btype , b_depot ] ) ;
1253: LD_ADDR_VAR 0 7
1257: PUSH
1258: LD_INT 30
1260: PUSH
1261: LD_INT 0
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: PPUSH
1268: CALL_OW 69
1272: ST_TO_ADDR
// bar := FilterAllUnits ( [ f_btype , b_armoury ] ) ;
1273: LD_ADDR_VAR 0 8
1277: PUSH
1278: LD_INT 30
1280: PUSH
1281: LD_INT 4
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: PPUSH
1288: CALL_OW 69
1292: ST_TO_ADDR
// lab := FilterAllUnits ( [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab ] ] ) ;
1293: LD_ADDR_VAR 0 9
1297: PUSH
1298: LD_INT 2
1300: PUSH
1301: LD_INT 30
1303: PUSH
1304: LD_INT 7
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: LD_INT 30
1313: PUSH
1314: LD_INT 6
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PUSH
1321: EMPTY
1322: LIST
1323: LIST
1324: LIST
1325: PPUSH
1326: CALL_OW 69
1330: ST_TO_ADDR
// fac := FilterAllUnits ( [ f_btype , b_factory ] ) ;
1331: LD_ADDR_VAR 0 10
1335: PUSH
1336: LD_INT 30
1338: PUSH
1339: LD_INT 3
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: PPUSH
1346: CALL_OW 69
1350: ST_TO_ADDR
// bun := FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ;
1351: LD_ADDR_VAR 0 11
1355: PUSH
1356: LD_INT 2
1358: PUSH
1359: LD_INT 30
1361: PUSH
1362: LD_INT 32
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 30
1371: PUSH
1372: LD_INT 31
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: LIST
1383: PPUSH
1384: CALL_OW 69
1388: ST_TO_ADDR
// SetBName ( dep , Gamma ) ;
1389: LD_VAR 0 7
1393: PPUSH
1394: LD_STRING Gamma
1396: PPUSH
1397: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
1401: LD_VAR 0 7
1405: PPUSH
1406: CALL_OW 274
1410: PPUSH
1411: LD_INT 2
1413: PPUSH
1414: LD_INT 10000
1416: PPUSH
1417: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_cans , 10000 ) ;
1421: LD_VAR 0 7
1425: PPUSH
1426: CALL_OW 274
1430: PPUSH
1431: LD_INT 1
1433: PPUSH
1434: LD_INT 10000
1436: PPUSH
1437: CALL_OW 277
// if dep then
1441: LD_VAR 0 7
1445: IFFALSE 1547
// begin PlaceHumanInUnit ( JMM , dep [ 1 ] ) ;
1447: LD_EXP 7
1451: PPUSH
1452: LD_VAR 0 7
1456: PUSH
1457: LD_INT 1
1459: ARRAY
1460: PPUSH
1461: CALL_OW 52
// if Brown then
1465: LD_EXP 14
1469: IFFALSE 1505
// begin PlaceHumanInUnit ( Brown , dep [ 1 ] ) ;
1471: LD_EXP 14
1475: PPUSH
1476: LD_VAR 0 7
1480: PUSH
1481: LD_INT 1
1483: ARRAY
1484: PPUSH
1485: CALL_OW 52
// team := team diff Brown ;
1489: LD_ADDR_VAR 0 6
1493: PUSH
1494: LD_VAR 0 6
1498: PUSH
1499: LD_EXP 14
1503: DIFF
1504: ST_TO_ADDR
// end ; if Donaldson then
1505: LD_EXP 13
1509: IFFALSE 1545
// begin PlaceHumanInUnit ( Donaldson , dep [ 1 ] ) ;
1511: LD_EXP 13
1515: PPUSH
1516: LD_VAR 0 7
1520: PUSH
1521: LD_INT 1
1523: ARRAY
1524: PPUSH
1525: CALL_OW 52
// team := team diff Donaldson ;
1529: LD_ADDR_VAR 0 6
1533: PUSH
1534: LD_VAR 0 6
1538: PUSH
1539: LD_EXP 13
1543: DIFF
1544: ST_TO_ADDR
// end ; end else
1545: GO 1654
// begin PlaceUnitXYR ( JMM , 52 , 16 , 10 , false ) ;
1547: LD_EXP 7
1551: PPUSH
1552: LD_INT 52
1554: PPUSH
1555: LD_INT 16
1557: PPUSH
1558: LD_INT 10
1560: PPUSH
1561: LD_INT 0
1563: PPUSH
1564: CALL_OW 50
// if Brown then
1568: LD_EXP 14
1572: IFFALSE 1611
// begin PlaceUnitXYR ( Brown , 52 , 16 , 10 , false ) ;
1574: LD_EXP 14
1578: PPUSH
1579: LD_INT 52
1581: PPUSH
1582: LD_INT 16
1584: PPUSH
1585: LD_INT 10
1587: PPUSH
1588: LD_INT 0
1590: PPUSH
1591: CALL_OW 50
// team := team diff Brown ;
1595: LD_ADDR_VAR 0 6
1599: PUSH
1600: LD_VAR 0 6
1604: PUSH
1605: LD_EXP 14
1609: DIFF
1610: ST_TO_ADDR
// end ; if Donaldson then
1611: LD_EXP 13
1615: IFFALSE 1654
// begin PlaceUnitXYR ( Donaldson , 52 , 16 , 10 , false ) ;
1617: LD_EXP 13
1621: PPUSH
1622: LD_INT 52
1624: PPUSH
1625: LD_INT 16
1627: PPUSH
1628: LD_INT 10
1630: PPUSH
1631: LD_INT 0
1633: PPUSH
1634: CALL_OW 50
// team := team diff Donaldson ;
1638: LD_ADDR_VAR 0 6
1642: PUSH
1643: LD_VAR 0 6
1647: PUSH
1648: LD_EXP 13
1652: DIFF
1653: ST_TO_ADDR
// end ; end ; if bun and UnitFilter ( team , [ f_class , 1 ] ) then
1654: LD_VAR 0 11
1658: PUSH
1659: LD_VAR 0 6
1663: PPUSH
1664: LD_INT 25
1666: PUSH
1667: LD_INT 1
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PPUSH
1674: CALL_OW 72
1678: AND
1679: IFFALSE 1788
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1681: LD_ADDR_VAR 0 12
1685: PUSH
1686: LD_VAR 0 6
1690: PPUSH
1691: LD_INT 25
1693: PUSH
1694: LD_INT 1
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PPUSH
1701: CALL_OW 72
1705: ST_TO_ADDR
// for i in bun do
1706: LD_ADDR_VAR 0 13
1710: PUSH
1711: LD_VAR 0 11
1715: PUSH
1716: FOR_IN
1717: IFFALSE 1786
// begin if not filter then
1719: LD_VAR 0 12
1723: NOT
1724: IFFALSE 1728
// break ;
1726: GO 1786
// PlaceHumanInUnit ( filter [ 1 ] , i ) ;
1728: LD_VAR 0 12
1732: PUSH
1733: LD_INT 1
1735: ARRAY
1736: PPUSH
1737: LD_VAR 0 13
1741: PPUSH
1742: CALL_OW 52
// team := team diff filter [ 1 ] ;
1746: LD_ADDR_VAR 0 6
1750: PUSH
1751: LD_VAR 0 6
1755: PUSH
1756: LD_VAR 0 12
1760: PUSH
1761: LD_INT 1
1763: ARRAY
1764: DIFF
1765: ST_TO_ADDR
// filter := Delete ( filter , 1 ) ;
1766: LD_ADDR_VAR 0 12
1770: PUSH
1771: LD_VAR 0 12
1775: PPUSH
1776: LD_INT 1
1778: PPUSH
1779: CALL_OW 3
1783: ST_TO_ADDR
// end ;
1784: GO 1716
1786: POP
1787: POP
// end ; if bar and UnitFilter ( team , [ f_class , 1 ] ) then
1788: LD_VAR 0 8
1792: PUSH
1793: LD_VAR 0 6
1797: PPUSH
1798: LD_INT 25
1800: PUSH
1801: LD_INT 1
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: PPUSH
1808: CALL_OW 72
1812: AND
1813: IFFALSE 1935
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1815: LD_ADDR_VAR 0 12
1819: PUSH
1820: LD_VAR 0 6
1824: PPUSH
1825: LD_INT 25
1827: PUSH
1828: LD_INT 1
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PPUSH
1835: CALL_OW 72
1839: ST_TO_ADDR
// for i = 1 to filter do
1840: LD_ADDR_VAR 0 13
1844: PUSH
1845: DOUBLE
1846: LD_INT 1
1848: DEC
1849: ST_TO_ADDR
1850: LD_VAR 0 12
1854: PUSH
1855: FOR_TO
1856: IFFALSE 1917
// begin if ( i <= 6 ) then
1858: LD_VAR 0 13
1862: PUSH
1863: LD_INT 6
1865: LESSEQUAL
1866: IFFALSE 1894
// PlaceHumanInUnit ( filter [ i ] , bar [ 1 ] ) else
1868: LD_VAR 0 12
1872: PUSH
1873: LD_VAR 0 13
1877: ARRAY
1878: PPUSH
1879: LD_VAR 0 8
1883: PUSH
1884: LD_INT 1
1886: ARRAY
1887: PPUSH
1888: CALL_OW 52
1892: GO 1915
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1894: LD_VAR 0 12
1898: PUSH
1899: LD_VAR 0 13
1903: ARRAY
1904: PPUSH
1905: LD_INT 1
1907: PPUSH
1908: LD_INT 0
1910: PPUSH
1911: CALL_OW 49
// end ;
1915: GO 1855
1917: POP
1918: POP
// team := team diff filter ;
1919: LD_ADDR_VAR 0 6
1923: PUSH
1924: LD_VAR 0 6
1928: PUSH
1929: LD_VAR 0 12
1933: DIFF
1934: ST_TO_ADDR
// end ; if lab and UnitFilter ( team , [ f_class , 4 ] ) then
1935: LD_VAR 0 9
1939: PUSH
1940: LD_VAR 0 6
1944: PPUSH
1945: LD_INT 25
1947: PUSH
1948: LD_INT 4
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PPUSH
1955: CALL_OW 72
1959: AND
1960: IFFALSE 2082
// begin filter := UnitFilter ( team , [ f_class , 4 ] ) ;
1962: LD_ADDR_VAR 0 12
1966: PUSH
1967: LD_VAR 0 6
1971: PPUSH
1972: LD_INT 25
1974: PUSH
1975: LD_INT 4
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: PPUSH
1982: CALL_OW 72
1986: ST_TO_ADDR
// for i = 1 to filter do
1987: LD_ADDR_VAR 0 13
1991: PUSH
1992: DOUBLE
1993: LD_INT 1
1995: DEC
1996: ST_TO_ADDR
1997: LD_VAR 0 12
2001: PUSH
2002: FOR_TO
2003: IFFALSE 2064
// begin if ( i <= 6 ) then
2005: LD_VAR 0 13
2009: PUSH
2010: LD_INT 6
2012: LESSEQUAL
2013: IFFALSE 2041
// PlaceHumanInUnit ( filter [ i ] , lab [ 1 ] ) else
2015: LD_VAR 0 12
2019: PUSH
2020: LD_VAR 0 13
2024: ARRAY
2025: PPUSH
2026: LD_VAR 0 9
2030: PUSH
2031: LD_INT 1
2033: ARRAY
2034: PPUSH
2035: CALL_OW 52
2039: GO 2062
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
2041: LD_VAR 0 12
2045: PUSH
2046: LD_VAR 0 13
2050: ARRAY
2051: PPUSH
2052: LD_INT 1
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 49
// end ;
2062: GO 2002
2064: POP
2065: POP
// team := team diff filter ;
2066: LD_ADDR_VAR 0 6
2070: PUSH
2071: LD_VAR 0 6
2075: PUSH
2076: LD_VAR 0 12
2080: DIFF
2081: ST_TO_ADDR
// end ; if fac and UnitFilter ( team , [ f_class , 3 ] ) then
2082: LD_VAR 0 10
2086: PUSH
2087: LD_VAR 0 6
2091: PPUSH
2092: LD_INT 25
2094: PUSH
2095: LD_INT 3
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: PPUSH
2102: CALL_OW 72
2106: AND
2107: IFFALSE 2229
// begin filter := UnitFilter ( team , [ f_class , 3 ] ) ;
2109: LD_ADDR_VAR 0 12
2113: PUSH
2114: LD_VAR 0 6
2118: PPUSH
2119: LD_INT 25
2121: PUSH
2122: LD_INT 3
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PPUSH
2129: CALL_OW 72
2133: ST_TO_ADDR
// for i = 1 to filter do
2134: LD_ADDR_VAR 0 13
2138: PUSH
2139: DOUBLE
2140: LD_INT 1
2142: DEC
2143: ST_TO_ADDR
2144: LD_VAR 0 12
2148: PUSH
2149: FOR_TO
2150: IFFALSE 2211
// begin if ( i <= 6 ) then
2152: LD_VAR 0 13
2156: PUSH
2157: LD_INT 6
2159: LESSEQUAL
2160: IFFALSE 2188
// PlaceHumanInUnit ( filter [ i ] , fac [ 1 ] ) else
2162: LD_VAR 0 12
2166: PUSH
2167: LD_VAR 0 13
2171: ARRAY
2172: PPUSH
2173: LD_VAR 0 10
2177: PUSH
2178: LD_INT 1
2180: ARRAY
2181: PPUSH
2182: CALL_OW 52
2186: GO 2209
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
2188: LD_VAR 0 12
2192: PUSH
2193: LD_VAR 0 13
2197: ARRAY
2198: PPUSH
2199: LD_INT 1
2201: PPUSH
2202: LD_INT 0
2204: PPUSH
2205: CALL_OW 49
// end ;
2209: GO 2149
2211: POP
2212: POP
// team := team diff filter ;
2213: LD_ADDR_VAR 0 6
2217: PUSH
2218: LD_VAR 0 6
2222: PUSH
2223: LD_VAR 0 12
2227: DIFF
2228: ST_TO_ADDR
// end ; if team then
2229: LD_VAR 0 6
2233: IFFALSE 2276
// for i in team do
2235: LD_ADDR_VAR 0 13
2239: PUSH
2240: LD_VAR 0 6
2244: PUSH
2245: FOR_IN
2246: IFFALSE 2274
// begin PlaceUnitArea ( i , gammaBaseArea , false ) ;
2248: LD_VAR 0 13
2252: PPUSH
2253: LD_INT 1
2255: PPUSH
2256: LD_INT 0
2258: PPUSH
2259: CALL_OW 49
// ComHold ( i ) ;
2263: LD_VAR 0 13
2267: PPUSH
2268: CALL_OW 140
// end ;
2272: GO 2245
2274: POP
2275: POP
// if fac then
2276: LD_VAR 0 10
2280: IFFALSE 2316
// if UnitsInside ( fac [ 1 ] ) then
2282: LD_VAR 0 10
2286: PUSH
2287: LD_INT 1
2289: ARRAY
2290: PPUSH
2291: CALL_OW 313
2295: IFFALSE 2316
// SetSpecResearch ( fac [ 1 ] , 10 , false ) ;
2297: LD_VAR 0 10
2301: PUSH
2302: LD_INT 1
2304: ARRAY
2305: PPUSH
2306: LD_INT 10
2308: PPUSH
2309: LD_INT 0
2311: PPUSH
2312: CALL_OW 486
// if lab then
2316: LD_VAR 0 9
2320: IFFALSE 2356
// if UnitsInside ( lab [ 1 ] ) then
2322: LD_VAR 0 9
2326: PUSH
2327: LD_INT 1
2329: ARRAY
2330: PPUSH
2331: CALL_OW 313
2335: IFFALSE 2356
// SetSpecResearch ( lab [ 1 ] , 10 , false ) ;
2337: LD_VAR 0 9
2341: PUSH
2342: LD_INT 1
2344: ARRAY
2345: PPUSH
2346: LD_INT 10
2348: PPUSH
2349: LD_INT 0
2351: PPUSH
2352: CALL_OW 486
// uc_side := 4 ;
2356: LD_ADDR_OWVAR 20
2360: PUSH
2361: LD_INT 4
2363: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
2364: LD_ADDR_EXP 17
2368: PUSH
2369: LD_STRING Harisson
2371: PPUSH
2372: LD_INT 0
2374: PPUSH
2375: LD_STRING 
2377: PPUSH
2378: CALL 4465 0 3
2382: ST_TO_ADDR
// veh := PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_double_gun , 100 ) ;
2383: LD_ADDR_VAR 0 5
2387: PUSH
2388: LD_INT 4
2390: PPUSH
2391: LD_INT 1
2393: PPUSH
2394: LD_INT 2
2396: PPUSH
2397: LD_INT 1
2399: PPUSH
2400: LD_INT 1
2402: PPUSH
2403: LD_INT 5
2405: PPUSH
2406: LD_INT 100
2408: PPUSH
2409: CALL 4528 0 7
2413: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2414: LD_VAR 0 5
2418: PPUSH
2419: LD_INT 2
2421: PPUSH
2422: CALL_OW 233
// PlaceUnitXY ( veh , 22 , 9 , false ) ;
2426: LD_VAR 0 5
2430: PPUSH
2431: LD_INT 22
2433: PPUSH
2434: LD_INT 9
2436: PPUSH
2437: LD_INT 0
2439: PPUSH
2440: CALL_OW 48
// PlaceHumanInUnit ( Harisson , veh ) ;
2444: LD_EXP 17
2448: PPUSH
2449: LD_VAR 0 5
2453: PPUSH
2454: CALL_OW 52
// PrepareHuman ( false , 1 , 0 ) ;
2458: LD_INT 0
2460: PPUSH
2461: LD_INT 1
2463: PPUSH
2464: LD_INT 0
2466: PPUSH
2467: CALL_OW 380
// RandGuy := CreateHuman ;
2471: LD_ADDR_EXP 19
2475: PUSH
2476: CALL_OW 44
2480: ST_TO_ADDR
// veh := PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 100 ) ;
2481: LD_ADDR_VAR 0 5
2485: PUSH
2486: LD_INT 4
2488: PPUSH
2489: LD_INT 1
2491: PPUSH
2492: LD_INT 2
2494: PPUSH
2495: LD_INT 1
2497: PPUSH
2498: LD_INT 1
2500: PPUSH
2501: LD_INT 4
2503: PPUSH
2504: LD_INT 100
2506: PPUSH
2507: CALL 4528 0 7
2511: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2512: LD_VAR 0 5
2516: PPUSH
2517: LD_INT 2
2519: PPUSH
2520: CALL_OW 233
// PlaceUnitXY ( veh , 17 , 4 , false ) ;
2524: LD_VAR 0 5
2528: PPUSH
2529: LD_INT 17
2531: PPUSH
2532: LD_INT 4
2534: PPUSH
2535: LD_INT 0
2537: PPUSH
2538: CALL_OW 48
// PlaceHumanInUnit ( RandGuy , veh ) ;
2542: LD_EXP 19
2546: PPUSH
2547: LD_VAR 0 5
2551: PPUSH
2552: CALL_OW 52
// end ;
2556: LD_VAR 0 1
2560: RET
// function PrepareBase ; var blist , i , b , base ; begin
2561: LD_INT 0
2563: PPUSH
2564: PPUSH
2565: PPUSH
2566: PPUSH
2567: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2568: LD_INT 71
2570: PPUSH
2571: LD_INT 5
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2581: LD_ADDR_VAR 0 2
2585: PUSH
2586: LD_STRING GammaBase
2588: PPUSH
2589: EMPTY
2590: PPUSH
2591: CALL_OW 30
2595: ST_TO_ADDR
// if not blist then
2596: LD_VAR 0 2
2600: NOT
2601: IFFALSE 2641
// blist := [ [ b_depot , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2603: LD_ADDR_VAR 0 2
2607: PUSH
2608: LD_INT 0
2610: PUSH
2611: LD_INT 52
2613: PUSH
2614: LD_INT 12
2616: PUSH
2617: LD_INT 3
2619: PUSH
2620: LD_INT 3
2622: PUSH
2623: LD_INT 0
2625: PUSH
2626: LD_INT 0
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: LIST
2633: LIST
2634: LIST
2635: LIST
2636: LIST
2637: PUSH
2638: EMPTY
2639: LIST
2640: ST_TO_ADDR
// uc_side := 1 ;
2641: LD_ADDR_OWVAR 20
2645: PUSH
2646: LD_INT 1
2648: ST_TO_ADDR
// uc_nation := 1 ;
2649: LD_ADDR_OWVAR 21
2653: PUSH
2654: LD_INT 1
2656: ST_TO_ADDR
// bc_kind1 := - 1 ;
2657: LD_ADDR_OWVAR 44
2661: PUSH
2662: LD_INT 1
2664: NEG
2665: ST_TO_ADDR
// bc_kind2 := - 1 ;
2666: LD_ADDR_OWVAR 45
2670: PUSH
2671: LD_INT 1
2673: NEG
2674: ST_TO_ADDR
// for i in blist do
2675: LD_ADDR_VAR 0 3
2679: PUSH
2680: LD_VAR 0 2
2684: PUSH
2685: FOR_IN
2686: IFFALSE 2837
// begin bc_type := i [ 1 ] ;
2688: LD_ADDR_OWVAR 42
2692: PUSH
2693: LD_VAR 0 3
2697: PUSH
2698: LD_INT 1
2700: ARRAY
2701: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2702: LD_ADDR_OWVAR 43
2706: PUSH
2707: LD_VAR 0 3
2711: PUSH
2712: LD_INT 5
2714: ARRAY
2715: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2716: LD_VAR 0 3
2720: PUSH
2721: LD_INT 1
2723: ARRAY
2724: PUSH
2725: LD_INT 7
2727: PUSH
2728: LD_INT 8
2730: PUSH
2731: EMPTY
2732: LIST
2733: LIST
2734: IN
2735: IFFALSE 2765
// begin bc_kind1 := i [ 7 ] ;
2737: LD_ADDR_OWVAR 44
2741: PUSH
2742: LD_VAR 0 3
2746: PUSH
2747: LD_INT 7
2749: ARRAY
2750: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
2751: LD_ADDR_OWVAR 45
2755: PUSH
2756: LD_VAR 0 3
2760: PUSH
2761: LD_INT 8
2763: ARRAY
2764: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2765: LD_ADDR_VAR 0 4
2769: PUSH
2770: LD_VAR 0 3
2774: PUSH
2775: LD_INT 2
2777: ARRAY
2778: PPUSH
2779: LD_VAR 0 3
2783: PUSH
2784: LD_INT 3
2786: ARRAY
2787: PPUSH
2788: LD_VAR 0 3
2792: PUSH
2793: LD_INT 4
2795: ARRAY
2796: PPUSH
2797: CALL_OW 47
2801: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2802: LD_VAR 0 4
2806: PPUSH
2807: CALL_OW 266
2811: PUSH
2812: LD_INT 32
2814: EQUAL
2815: IFFALSE 2835
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
2817: LD_VAR 0 4
2821: PPUSH
2822: LD_VAR 0 3
2826: PUSH
2827: LD_INT 7
2829: ARRAY
2830: PPUSH
2831: CALL_OW 431
// end ; end ;
2835: GO 2685
2837: POP
2838: POP
// if not FilterAllUnits ( [ f_btype , b_depot ] ) then
2839: LD_INT 30
2841: PUSH
2842: LD_INT 0
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: PPUSH
2849: CALL_OW 69
2853: NOT
2854: IFFALSE 2891
// begin bc_type := b_depot ;
2856: LD_ADDR_OWVAR 42
2860: PUSH
2861: LD_INT 0
2863: ST_TO_ADDR
// bc_level := 6 ;
2864: LD_ADDR_OWVAR 43
2868: PUSH
2869: LD_INT 6
2871: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2872: LD_ADDR_VAR 0 4
2876: PUSH
2877: LD_INT 52
2879: PPUSH
2880: LD_INT 12
2882: PPUSH
2883: LD_INT 3
2885: PPUSH
2886: CALL_OW 47
2890: ST_TO_ADDR
// end ; base := GetBase ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
2891: LD_ADDR_VAR 0 5
2895: PUSH
2896: LD_INT 22
2898: PUSH
2899: LD_INT 1
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: LD_INT 2
2908: PUSH
2909: LD_INT 30
2911: PUSH
2912: LD_INT 0
2914: PUSH
2915: EMPTY
2916: LIST
2917: LIST
2918: PUSH
2919: LD_INT 30
2921: PUSH
2922: LD_INT 1
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: LIST
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PPUSH
2938: CALL_OW 69
2942: PUSH
2943: LD_INT 1
2945: ARRAY
2946: PPUSH
2947: CALL_OW 274
2951: ST_TO_ADDR
// if base then
2952: LD_VAR 0 5
2956: IFFALSE 2973
// SetResourceType ( base , mat_oil , 1000 ) ;
2958: LD_VAR 0 5
2962: PPUSH
2963: LD_INT 2
2965: PPUSH
2966: LD_INT 1000
2968: PPUSH
2969: CALL_OW 277
// end ; end_of_file
2973: LD_VAR 0 1
2977: RET
// export function Action ; var points , i , sol , time , team , filter ; begin
2978: LD_INT 0
2980: PPUSH
2981: PPUSH
2982: PPUSH
2983: PPUSH
2984: PPUSH
2985: PPUSH
2986: PPUSH
// InGameOn ;
2987: CALL_OW 8
// CenterNowOnXY ( 33 , 11 ) ;
2991: LD_INT 33
2993: PPUSH
2994: LD_INT 11
2996: PPUSH
2997: CALL_OW 86
// points := [ [ 29 , 21 ] , [ 41 , 28 ] , [ 52 , 26 ] , [ 49 , 16 ] ] ;
3001: LD_ADDR_VAR 0 2
3005: PUSH
3006: LD_INT 29
3008: PUSH
3009: LD_INT 21
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: PUSH
3016: LD_INT 41
3018: PUSH
3019: LD_INT 28
3021: PUSH
3022: EMPTY
3023: LIST
3024: LIST
3025: PUSH
3026: LD_INT 52
3028: PUSH
3029: LD_INT 26
3031: PUSH
3032: EMPTY
3033: LIST
3034: LIST
3035: PUSH
3036: LD_INT 49
3038: PUSH
3039: LD_INT 16
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: LIST
3050: LIST
3051: ST_TO_ADDR
// sol := ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Cyrus , Bobby , Gladstone , Houten , Khatam ] ) [ 1 ] ;
3052: LD_ADDR_VAR 0 4
3056: PUSH
3057: LD_INT 22
3059: PUSH
3060: LD_INT 1
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: PUSH
3067: LD_INT 26
3069: PUSH
3070: LD_INT 1
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: PPUSH
3081: CALL_OW 69
3085: PUSH
3086: LD_EXP 7
3090: PUSH
3091: LD_EXP 14
3095: PUSH
3096: LD_EXP 11
3100: PUSH
3101: LD_EXP 12
3105: PUSH
3106: LD_EXP 8
3110: PUSH
3111: LD_EXP 15
3115: PUSH
3116: LD_EXP 16
3120: PUSH
3121: EMPTY
3122: LIST
3123: LIST
3124: LIST
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: DIFF
3130: PUSH
3131: LD_INT 1
3133: ARRAY
3134: ST_TO_ADDR
// if sol then
3135: LD_VAR 0 4
3139: IFFALSE 3170
// begin ComMoveXY ( sol , 50 , 18 ) ;
3141: LD_VAR 0 4
3145: PPUSH
3146: LD_INT 50
3148: PPUSH
3149: LD_INT 18
3151: PPUSH
3152: CALL_OW 111
// AddComTurnUnit ( sol , Harisson ) ;
3156: LD_VAR 0 4
3160: PPUSH
3161: LD_EXP 17
3165: PPUSH
3166: CALL_OW 179
// end ; for i in points do
3170: LD_ADDR_VAR 0 3
3174: PUSH
3175: LD_VAR 0 2
3179: PUSH
3180: FOR_IN
3181: IFFALSE 3221
// AddComMoveXY ( [ Harisson , RandGuy ] , i [ 1 ] , i [ 2 ] ) ;
3183: LD_EXP 17
3187: PUSH
3188: LD_EXP 19
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: PPUSH
3197: LD_VAR 0 3
3201: PUSH
3202: LD_INT 1
3204: ARRAY
3205: PPUSH
3206: LD_VAR 0 3
3210: PUSH
3211: LD_INT 2
3213: ARRAY
3214: PPUSH
3215: CALL_OW 171
3219: GO 3180
3221: POP
3222: POP
// AddComExitVehicle ( [ Harisson , RandGuy ] ) ;
3223: LD_EXP 17
3227: PUSH
3228: LD_EXP 19
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PPUSH
3237: CALL_OW 181
// AddComTurnUnit ( [ Harisson , RandGuy ] , sol ) ;
3241: LD_EXP 17
3245: PUSH
3246: LD_EXP 19
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PPUSH
3255: LD_VAR 0 4
3259: PPUSH
3260: CALL_OW 179
// time := 0 0$20 ;
3264: LD_ADDR_VAR 0 5
3268: PUSH
3269: LD_INT 700
3271: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
3272: LD_INT 10
3274: PPUSH
3275: CALL_OW 67
// time := time - 0 0$0.3 ;
3279: LD_ADDR_VAR 0 5
3283: PUSH
3284: LD_VAR 0 5
3288: PUSH
3289: LD_INT 10
3291: MINUS
3292: ST_TO_ADDR
// until not IsInUnit ( Harisson ) or time <= 0 0$00 ;
3293: LD_EXP 17
3297: PPUSH
3298: CALL_OW 310
3302: NOT
3303: PUSH
3304: LD_VAR 0 5
3308: PUSH
3309: LD_INT 0
3311: LESSEQUAL
3312: OR
3313: IFFALSE 3272
// Say ( sol , D1-Sol1-1 ) ;
3315: LD_VAR 0 4
3319: PPUSH
3320: LD_STRING D1-Sol1-1
3322: PPUSH
3323: CALL_OW 88
// Say ( Harisson , D1-Har-1 ) ;
3327: LD_EXP 17
3331: PPUSH
3332: LD_STRING D1-Har-1
3334: PPUSH
3335: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3339: LD_INT 10
3341: PPUSH
3342: CALL_OW 67
// ComMoveXY ( sol , 35 , 21 ) ;
3346: LD_VAR 0 4
3350: PPUSH
3351: LD_INT 35
3353: PPUSH
3354: LD_INT 21
3356: PPUSH
3357: CALL_OW 111
// ComExitBuilding ( JMM ) ;
3361: LD_EXP 7
3365: PPUSH
3366: CALL_OW 122
// AddComMoveUnit ( JMM , Harisson ) ;
3370: LD_EXP 7
3374: PPUSH
3375: LD_EXP 17
3379: PPUSH
3380: CALL_OW 172
// ComTurnUnit ( [ Harisson , RandGuy ] , JMM ) ;
3384: LD_EXP 17
3388: PUSH
3389: LD_EXP 19
3393: PUSH
3394: EMPTY
3395: LIST
3396: LIST
3397: PPUSH
3398: LD_EXP 7
3402: PPUSH
3403: CALL_OW 119
// time := 0 0$3 ;
3407: LD_ADDR_VAR 0 5
3411: PUSH
3412: LD_INT 105
3414: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3415: LD_INT 35
3417: PPUSH
3418: CALL_OW 67
// time := time - 0 0$1 ;
3422: LD_ADDR_VAR 0 5
3426: PUSH
3427: LD_VAR 0 5
3431: PUSH
3432: LD_INT 35
3434: MINUS
3435: ST_TO_ADDR
// until GetDistUnits ( JMM , Harisson ) < 4 or time = 0 0$00 ;
3436: LD_EXP 7
3440: PPUSH
3441: LD_EXP 17
3445: PPUSH
3446: CALL_OW 296
3450: PUSH
3451: LD_INT 4
3453: LESS
3454: PUSH
3455: LD_VAR 0 5
3459: PUSH
3460: LD_INT 0
3462: EQUAL
3463: OR
3464: IFFALSE 3415
// ComTurnUnit ( JMM , Harisson ) ;
3466: LD_EXP 7
3470: PPUSH
3471: LD_EXP 17
3475: PPUSH
3476: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3480: LD_EXP 7
3484: PPUSH
3485: LD_STRING D1-JMM-1
3487: PPUSH
3488: CALL_OW 88
// Say ( Harisson , D1-Har-2 ) ;
3492: LD_EXP 17
3496: PPUSH
3497: LD_STRING D1-Har-2
3499: PPUSH
3500: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3504: LD_EXP 7
3508: PPUSH
3509: LD_STRING D1-JMM-2
3511: PPUSH
3512: CALL_OW 88
// Say ( Harisson , D1-Har-3 ) ;
3516: LD_EXP 17
3520: PPUSH
3521: LD_STRING D1-Har-3
3523: PPUSH
3524: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3528: LD_EXP 7
3532: PPUSH
3533: LD_STRING D1-JMM-3
3535: PPUSH
3536: CALL_OW 88
// Say ( Harisson , D1-Har-4 ) ;
3540: LD_EXP 17
3544: PPUSH
3545: LD_STRING D1-Har-4
3547: PPUSH
3548: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3552: LD_EXP 7
3556: PPUSH
3557: LD_STRING D1-JMM-4
3559: PPUSH
3560: CALL_OW 88
// Say ( Harisson , D1-Har-5 ) ;
3564: LD_EXP 17
3568: PPUSH
3569: LD_STRING D1-Har-5
3571: PPUSH
3572: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3576: LD_EXP 7
3580: PPUSH
3581: LD_STRING D1-JMM-5
3583: PPUSH
3584: CALL_OW 88
// Say ( Harisson , D1-Har-6 ) ;
3588: LD_EXP 17
3592: PPUSH
3593: LD_STRING D1-Har-6
3595: PPUSH
3596: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3600: LD_EXP 7
3604: PPUSH
3605: LD_STRING D1-JMM-6
3607: PPUSH
3608: CALL_OW 88
// EndMission ;
3612: CALL 3621 0 0
// end ;
3616: LD_VAR 0 1
3620: RET
// export function EndMission ; var commander , i , all ; begin
3621: LD_INT 0
3623: PPUSH
3624: PPUSH
3625: PPUSH
3626: PPUSH
// case gamma_commander of 1 :
3627: LD_EXP 18
3631: PUSH
3632: LD_INT 1
3634: DOUBLE
3635: EQUAL
3636: IFTRUE 3640
3638: GO 3653
3640: POP
// commander := Donaldson ; 2 :
3641: LD_ADDR_VAR 0 2
3645: PUSH
3646: LD_EXP 13
3650: ST_TO_ADDR
3651: GO 3696
3653: LD_INT 2
3655: DOUBLE
3656: EQUAL
3657: IFTRUE 3661
3659: GO 3674
3661: POP
// commander := Brown ; 3 :
3662: LD_ADDR_VAR 0 2
3666: PUSH
3667: LD_EXP 14
3671: ST_TO_ADDR
3672: GO 3696
3674: LD_INT 3
3676: DOUBLE
3677: EQUAL
3678: IFTRUE 3682
3680: GO 3695
3682: POP
// commander := Houten ; end ;
3683: LD_ADDR_VAR 0 2
3687: PUSH
3688: LD_EXP 15
3692: ST_TO_ADDR
3693: GO 3696
3695: POP
// all := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , commander ] ;
3696: LD_ADDR_VAR 0 4
3700: PUSH
3701: LD_INT 22
3703: PUSH
3704: LD_INT 1
3706: PUSH
3707: EMPTY
3708: LIST
3709: LIST
3710: PUSH
3711: LD_INT 21
3713: PUSH
3714: LD_INT 1
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: PUSH
3721: EMPTY
3722: LIST
3723: LIST
3724: PPUSH
3725: CALL_OW 69
3729: PUSH
3730: LD_EXP 7
3734: PUSH
3735: LD_VAR 0 2
3739: PUSH
3740: EMPTY
3741: LIST
3742: LIST
3743: DIFF
3744: ST_TO_ADDR
// if UnitFilter ( all , [ f_class , 2 ] ) then
3745: LD_VAR 0 4
3749: PPUSH
3750: LD_INT 25
3752: PUSH
3753: LD_INT 2
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: PPUSH
3760: CALL_OW 72
3764: IFFALSE 3810
// for i in UnitFilter ( all , [ f_class , 2 ] ) do
3766: LD_ADDR_VAR 0 3
3770: PUSH
3771: LD_VAR 0 4
3775: PPUSH
3776: LD_INT 25
3778: PUSH
3779: LD_INT 2
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: PPUSH
3786: CALL_OW 72
3790: PUSH
3791: FOR_IN
3792: IFFALSE 3808
// SetClass ( i , 2 ) ;
3794: LD_VAR 0 3
3798: PPUSH
3799: LD_INT 2
3801: PPUSH
3802: CALL_OW 336
3806: GO 3791
3808: POP
3809: POP
// save_group := CharacterSelection ( 1 , 11 , 11 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ all ^ [ sel_dont_change_class , sel_not_changeable ] ^ [ commander , Harisson ] , [ [ class_soldier , 3 ] , [ class_mechanic , 3 , 6 ] , [ class_scientistic , 1 , 2 ] ] ) ;
3810: LD_ADDR_EXP 4
3814: PUSH
3815: LD_STRING 1
3817: PPUSH
3818: LD_INT 11
3820: PPUSH
3821: LD_INT 11
3823: PPUSH
3824: LD_INT -5
3826: PUSH
3827: LD_EXP 7
3831: PUSH
3832: LD_INT -2
3834: PUSH
3835: LD_INT -3
3837: PUSH
3838: LD_INT -5
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: PUSH
3848: LD_VAR 0 4
3852: ADD
3853: PUSH
3854: LD_INT -6
3856: PUSH
3857: LD_INT -4
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: ADD
3864: PUSH
3865: LD_VAR 0 2
3869: PUSH
3870: LD_EXP 17
3874: PUSH
3875: EMPTY
3876: LIST
3877: LIST
3878: ADD
3879: PPUSH
3880: LD_INT 1
3882: PUSH
3883: LD_INT 3
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: PUSH
3890: LD_INT 3
3892: PUSH
3893: LD_INT 3
3895: PUSH
3896: LD_INT 6
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: LIST
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: LD_INT 1
3909: PUSH
3910: LD_INT 2
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: LIST
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: LIST
3922: PPUSH
3923: CALL_OW 42
3927: ST_TO_ADDR
// SaveCharacters ( all diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , Houten , Harisson , Khatam ] ^ save_group , 07_othersGamma ) ;
3928: LD_VAR 0 4
3932: PUSH
3933: LD_EXP 7
3937: PUSH
3938: LD_EXP 8
3942: PUSH
3943: LD_EXP 10
3947: PUSH
3948: LD_EXP 11
3952: PUSH
3953: LD_EXP 12
3957: PUSH
3958: LD_EXP 9
3962: PUSH
3963: LD_EXP 13
3967: PUSH
3968: LD_EXP 14
3972: PUSH
3973: LD_EXP 15
3977: PUSH
3978: LD_EXP 17
3982: PUSH
3983: LD_EXP 16
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: LIST
3992: LIST
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: LIST
3998: LIST
3999: LIST
4000: PUSH
4001: LD_EXP 4
4005: ADD
4006: DIFF
4007: PPUSH
4008: LD_STRING 07_othersGamma
4010: PPUSH
4011: CALL_OW 38
// SaveCharacters ( save_group diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , Houten , Harisson , Khatam , 0 ] , 07_others ) ;
4015: LD_EXP 4
4019: PUSH
4020: LD_EXP 7
4024: PUSH
4025: LD_EXP 8
4029: PUSH
4030: LD_EXP 10
4034: PUSH
4035: LD_EXP 11
4039: PUSH
4040: LD_EXP 12
4044: PUSH
4045: LD_EXP 9
4049: PUSH
4050: LD_EXP 13
4054: PUSH
4055: LD_EXP 14
4059: PUSH
4060: LD_EXP 15
4064: PUSH
4065: LD_EXP 17
4069: PUSH
4070: LD_EXP 16
4074: PUSH
4075: LD_INT 0
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: DIFF
4092: PPUSH
4093: LD_STRING 07_others
4095: PPUSH
4096: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4100: LD_EXP 7
4104: PPUSH
4105: LD_EXP 5
4109: PUSH
4110: LD_STRING JMM
4112: STR
4113: PPUSH
4114: CALL_OW 38
// if Lisa then
4118: LD_EXP 10
4122: IFFALSE 4164
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4124: LD_EXP 10
4128: PPUSH
4129: LD_EXP 5
4133: PUSH
4134: LD_STRING Lisa
4136: STR
4137: PPUSH
4138: CALL_OW 38
// if Lisa in save_group then
4142: LD_EXP 10
4146: PUSH
4147: LD_EXP 4
4151: IN
4152: IFFALSE 4164
// SaveVariable ( true , LisaIn07 ) ;
4154: LD_INT 1
4156: PPUSH
4157: LD_STRING LisaIn07
4159: PPUSH
4160: CALL_OW 39
// end ; if Bobby then
4164: LD_EXP 12
4168: IFFALSE 4210
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4170: LD_EXP 12
4174: PPUSH
4175: LD_EXP 5
4179: PUSH
4180: LD_STRING Bobby
4182: STR
4183: PPUSH
4184: CALL_OW 38
// if Bobby in save_group then
4188: LD_EXP 12
4192: PUSH
4193: LD_EXP 4
4197: IN
4198: IFFALSE 4210
// SaveVariable ( true , BobbyIn07 ) ;
4200: LD_INT 1
4202: PPUSH
4203: LD_STRING BobbyIn07
4205: PPUSH
4206: CALL_OW 39
// end ; if Cyrus then
4210: LD_EXP 11
4214: IFFALSE 4256
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4216: LD_EXP 11
4220: PPUSH
4221: LD_EXP 5
4225: PUSH
4226: LD_STRING Cyrus
4228: STR
4229: PPUSH
4230: CALL_OW 38
// if Cyrus in save_group then
4234: LD_EXP 11
4238: PUSH
4239: LD_EXP 4
4243: IN
4244: IFFALSE 4256
// SaveVariable ( true , CyrusIn07 ) ;
4246: LD_INT 1
4248: PPUSH
4249: LD_STRING CyrusIn07
4251: PPUSH
4252: CALL_OW 39
// end ; if Brown then
4256: LD_EXP 14
4260: IFFALSE 4302
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
4262: LD_EXP 14
4266: PPUSH
4267: LD_EXP 5
4271: PUSH
4272: LD_STRING Brown
4274: STR
4275: PPUSH
4276: CALL_OW 38
// if Brown in save_group then
4280: LD_EXP 14
4284: PUSH
4285: LD_EXP 4
4289: IN
4290: IFFALSE 4302
// SaveVariable ( true , BrownIn07 ) ;
4292: LD_INT 1
4294: PPUSH
4295: LD_STRING BrownIn07
4297: PPUSH
4298: CALL_OW 39
// end ; if Donaldson then
4302: LD_EXP 13
4306: IFFALSE 4348
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
4308: LD_EXP 13
4312: PPUSH
4313: LD_EXP 5
4317: PUSH
4318: LD_STRING Donaldson
4320: STR
4321: PPUSH
4322: CALL_OW 38
// if Donaldson in save_group then
4326: LD_EXP 13
4330: PUSH
4331: LD_EXP 4
4335: IN
4336: IFFALSE 4348
// SaveVariable ( true , DonaldsonIn07 ) ;
4338: LD_INT 1
4340: PPUSH
4341: LD_STRING DonaldsonIn07
4343: PPUSH
4344: CALL_OW 39
// end ; if Gladstone then
4348: LD_EXP 8
4352: IFFALSE 4394
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4354: LD_EXP 8
4358: PPUSH
4359: LD_EXP 5
4363: PUSH
4364: LD_STRING Gladstone
4366: STR
4367: PPUSH
4368: CALL_OW 38
// if Gladstone in save_group then
4372: LD_EXP 8
4376: PUSH
4377: LD_EXP 4
4381: IN
4382: IFFALSE 4394
// SaveVariable ( true , GladstoneIn07 ) ;
4384: LD_INT 1
4386: PPUSH
4387: LD_STRING GladstoneIn07
4389: PPUSH
4390: CALL_OW 39
// end ; if Khatam then
4394: LD_EXP 16
4398: IFFALSE 4440
// begin SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
4400: LD_EXP 16
4404: PPUSH
4405: LD_EXP 5
4409: PUSH
4410: LD_STRING Khatam
4412: STR
4413: PPUSH
4414: CALL_OW 38
// if Khatam in save_group then
4418: LD_EXP 16
4422: PUSH
4423: LD_EXP 4
4427: IN
4428: IFFALSE 4440
// SaveVariable ( true , KhatamIn07 ) ;
4430: LD_INT 1
4432: PPUSH
4433: LD_STRING KhatamIn07
4435: PPUSH
4436: CALL_OW 39
// end ; if debug then
4440: LD_EXP 1
4444: IFFALSE 4450
// InGameOff ;
4446: CALL_OW 9
// ChangeMap ( 1 , %_cont ) ;
4450: LD_INT 1
4452: PPUSH
4453: LD_STRING %_cont
4455: PPUSH
4456: CALL_OW 340
// end ; end_of_file
4460: LD_VAR 0 1
4464: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4465: LD_INT 0
4467: PPUSH
4468: PPUSH
// if exist_mode then
4469: LD_VAR 0 2
4473: IFFALSE 4498
// unit := CreateCharacter ( prefix & ident ) else
4475: LD_ADDR_VAR 0 5
4479: PUSH
4480: LD_VAR 0 3
4484: PUSH
4485: LD_VAR 0 1
4489: STR
4490: PPUSH
4491: CALL_OW 34
4495: ST_TO_ADDR
4496: GO 4513
// unit := NewCharacter ( ident ) ;
4498: LD_ADDR_VAR 0 5
4502: PUSH
4503: LD_VAR 0 1
4507: PPUSH
4508: CALL_OW 25
4512: ST_TO_ADDR
// result := unit ;
4513: LD_ADDR_VAR 0 4
4517: PUSH
4518: LD_VAR 0 5
4522: ST_TO_ADDR
// end ;
4523: LD_VAR 0 4
4527: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
4528: LD_INT 0
4530: PPUSH
// uc_side := side ;
4531: LD_ADDR_OWVAR 20
4535: PUSH
4536: LD_VAR 0 1
4540: ST_TO_ADDR
// uc_nation := nation ;
4541: LD_ADDR_OWVAR 21
4545: PUSH
4546: LD_VAR 0 2
4550: ST_TO_ADDR
// vc_chassis := chassis ;
4551: LD_ADDR_OWVAR 37
4555: PUSH
4556: LD_VAR 0 3
4560: ST_TO_ADDR
// vc_engine := engine ;
4561: LD_ADDR_OWVAR 39
4565: PUSH
4566: LD_VAR 0 4
4570: ST_TO_ADDR
// vc_control := control ;
4571: LD_ADDR_OWVAR 38
4575: PUSH
4576: LD_VAR 0 5
4580: ST_TO_ADDR
// vc_weapon := weapon ;
4581: LD_ADDR_OWVAR 40
4585: PUSH
4586: LD_VAR 0 6
4590: ST_TO_ADDR
// vc_fuel_battery := fuel ;
4591: LD_ADDR_OWVAR 41
4595: PUSH
4596: LD_VAR 0 7
4600: ST_TO_ADDR
// result := CreateVehicle ;
4601: LD_ADDR_VAR 0 8
4605: PUSH
4606: CALL_OW 45
4610: ST_TO_ADDR
// end ;
4611: LD_VAR 0 8
4615: RET
// export function SayX ( units , ident ) ; var i ; begin
4616: LD_INT 0
4618: PPUSH
4619: PPUSH
// result := false ;
4620: LD_ADDR_VAR 0 3
4624: PUSH
4625: LD_INT 0
4627: ST_TO_ADDR
// if not units then
4628: LD_VAR 0 1
4632: NOT
4633: IFFALSE 4637
// exit ;
4635: GO 4691
// for i in units do
4637: LD_ADDR_VAR 0 4
4641: PUSH
4642: LD_VAR 0 1
4646: PUSH
4647: FOR_IN
4648: IFFALSE 4689
// if IsOk ( i ) then
4650: LD_VAR 0 4
4654: PPUSH
4655: CALL_OW 302
4659: IFFALSE 4687
// begin Say ( i , ident ) ;
4661: LD_VAR 0 4
4665: PPUSH
4666: LD_VAR 0 2
4670: PPUSH
4671: CALL_OW 88
// result := i ;
4675: LD_ADDR_VAR 0 3
4679: PUSH
4680: LD_VAR 0 4
4684: ST_TO_ADDR
// break ;
4685: GO 4689
// end ;
4687: GO 4647
4689: POP
4690: POP
// end ;
4691: LD_VAR 0 3
4695: RET
