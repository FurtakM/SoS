// Support function to fast spawn people in buildings - Author: Nefarem
Export function RespawnInside(side, nation, build, skill, class, count);
var i, un;
begin
for i = 1 to count do
    begin
    uc_side = side;
    uc_nation = nation;

    hc_gallery = '';
    hc_name = '';
    PrepareHuman(false, class, skill);

    un = CreateHuman;
    PlaceHumanInUnit(un, build);
    end;
End;

// Function by Serpent
Export Function PrepareSolBun(skill, b);
var un, dir;
begin
uc_side := GetSide(b);
uc_nation := GetNation(b);

PrepareHuman(false, 1, skill);
un = CreateHuman;

dir := GetDir(b)  - 3;

if dir < 0 then
   dir := 6 + dir;

SetDir(un, dir);
PlaceHumanInUnit(un, b);
End;

// AI Functions by Nefarem
Export function RepairBuilding(side, building, area);
var buildingsList, i, engineerOkList;
begin                                  
engineerOkList = FilterAllUnits([[f_side, side], [f_class, 2], [f_lives, 1000]]);
buildingsList = FilterUnitsInArea(area, [[[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]]);

if not buildingsList and not engineerOkList then
   exit;

if not buildingsList and UnitFilter(engineerOkList, [f_not, [f_inside]]) and IsOk(building) then
   ComEnterUnit(UnitFilter(engineerOkList, [f_not, [f_inside]]), building);

if buildingsList then
   begin
   for i in engineerOkList do
       if IsInUnit(i) then
          ComExitBuilding(i)
       else if GetLives(i) > 650 then
          ComRepairBuilding(i, NearestUnitToUnit(buildingsList, i))
       else if GetDistUnitXY(i, 56, 10) > 8 then
          ComMoveXY(i, 56, 10);
   end;
End;

Export function HealUnitInBase(side, healArea, baseArea, building);
var sciList,  i, damageUnits;
begin
sciList := FilterAllUnits([[f_side, side], [f_class, 4], [f_lives, 250]]);
damageUnits := FilterUnitsInArea(baseArea, [[f_side, side], [f_type, unit_human], [f_not, [f_lives, 650]]]);

if not damageUnits and not sciList then
   exit;

if damageUnits then
   begin
   for i in sciList do
       if IsInUnit(i) then
          ComExitBuilding(i)
       else if not HasTask(i) then
          ComHeal(i, NearestUnitToUnit(damageUnits, i));
   end
else if UnitFilter(sciList, [f_not, [f_inside]]) then
   ComEnterUnit(UnitFilter(sciList, [f_not, [f_inside]]), building);
End;

Export function DefendBases(area, enemySide, defendersList, building);
var i, enemy, nearestUnit;
begin
if not defendersList then
   exit;

enemy := FilterUnitsInArea(area, [[f_side, enemySide], [f_or, [f_type, unit_vehicle], [f_type, unit_human]]]);

if enemy then
   begin
   for i in defendersList do
       begin
       if IsInUnit(i) and GetLives(i) > 500 then
          ComExitBuilding(i)
       else if GetLives(i) > 650 then
          begin
          nearestUnit := NearestUnitToUnit(enemy, i);
          ComAgressiveMove(i, GetX(nearestUnit), GetY(nearestUnit));
          end
       else if FilterAllUnits([[f_side, 3], [f_class, 4]]) then
          begin
          if GetDistUnitXY(i, 56, 10) > 8 then
             ComMoveXY(i, 56, 10);
          end
       else if GetLives(i) <= 500 then
          ComEnterUnit(i, building);
       end;
   end
else
    if UnitFilter(defendersList, [[f_outside], [f_not, [f_hastask]], [f_lives, 1000]]) then
       ComEnterUnit(UnitFilter(defendersList, [[f_outside], [f_not, [f_hastask]], [f_lives, 1000]]), building);
End;

Export function RussianTrap;
var i;
begin
iF GetSide(Brian) = 4 then
   SetLives([Brian, Jerry], 0);

for i in FilterAllUnits([[f_side, 3], [f_type, unit_human]]) do
    begin
    ComExitBuilding(i);

    wait(0$1);

    AddComAgressiveMove(i, 120, 56);
    AddComAgressiveMove(i, 111, 37);

    if GetSide(arm2) = 3 and IsOk(arm2) then
       AddComEnterUnit(i, arm2)
    else
        begin
        AddComCrawl(i);
        AddComAgressiveMove(i, 109, 30);
        end;
    end;
End;
    

// Function by Altar from original 02 mission
Export Function Nearest(un, units);
var nearestDist, nearestUn, sold, dist;
begin
nearestDist := 1000;
nearestUn := un;

for sold in units do
    begin
    dist := GetDistUnits(un, sold);

    if dist < nearestDist then
       begin
       nearestUn := sold;
       nearestDist := dist;
       end;
    end;

result := NearestUn;
End;

Export function PrepareDifficulty;
begin
if Difficulty = 1 then
   begin
   RemoveUnit(brw2);
   RemoveUnit(brw3);
   RemoveUnit(brw4);
   RemoveUnit(brw5);

   SetFuel([vehicle1, vehicle2], 60);
   RuSoldMinLevel = 0;
   RuSoldMaxLevel = 1;
   end;

if Difficulty = 2 then
   begin
   RemoveUnit(brw4);

   SetFuel([vehicle1, vehicle2], 50);
   RuSoldMinLevel = 1;
   RuSoldMaxLevel = 2;
   end;

if Difficulty >= 3 then
   begin
   SetFuel([vehicle1, vehicle2], 40);
   RuSoldMinLevel = 2;
   RuSoldMaxLevel = 3;
   end;
End;

Export Function SaveVehicles(vehicles, ident);
var i, tmp;
begin
if not vehicles then
   exit;

tmp := [];

for i in vehicles do
    tmp := Replace(tmp, tmp + 1, [GetChassis(i), GetEngine(i), GetControl(i), GetWeapon(i), GetFuel(i), GetLives(i)]);

SaveVariable(tmp, ident);
End;

