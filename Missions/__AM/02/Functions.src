// Support function to fast spawn people in buildings - Author: Nefarem

Export function RespawnInside(side, nation, build, skill, class, count);
var i,l, un;
begin

   for i = 1 to count do
   begin

           uc_side = side;
           uc_nation = nation;

           hc_gallery = '';
           hc_name = '';
           PrepareHuman(false, class, skill);

           un = CreateHuman;
           PlaceHumanInUnit(un,build);

   end;

END;


// Function by Serpent
Export Function PrepareSolBun(skill, b);
var un, dir;
begin
     uc_side := GetSide(b);
     uc_nation := GetNation(b);

     PrepareHuman(false, 1, skill);
     un = CreateHuman;

     dir := GetDir(b)  - 3;

     if dir < 0 then dir := 6 + dir;

     SetDir(un, dir);
     PlaceHumanInUnit(un, b);
End;

// AI Functions by Nefarem
Export function RepairBuilding(side, building, area);
var buildings_list, i,engineerOk_list, j;
begin

        engineerOk_list = FilterAllUnits([[f_side, side], [f_class, 2], [f_lives, 1000]]);
        buildings_list = FilterUnitsInArea(area, [[[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]]);

        if buildings_list > 0 and engineerOk_list > 0 then
        begin

                for i in engineerOk_list do
                begin
                     for j in buildings_list do
                     begin

                        AddComExitBuilding(i);
                        wait(0$1);
                        AddComRepairBuilding(i, j);

                    end;
                end;
        end;

        if buildings_list = 0 then
        begin

           for i in engineerOK_list do
           begin
             ComEnterUnit(i, building);
          end;

        end;
END;

Export function HealUnitInBase(side, healArea, baseArea, build);
var sci_list,  i, j, damageUnits;
begin

        sci_list = FilterAllUnits([[f_side, side], [f_class, 4], [f_lives, 250]]);

        damageUnits = FilterUnitsInArea(baseArea, [[f_side, side], [f_type, unit_human], [f_not, [f_lives, 650]]]);

        if damageUnits > 0 and sci_list > 0 then
        begin

                for i = 1 to damageUnits do
                        ComMoveToArea(damageUnits[i], healArea);

                for i in sci_list do
                begin

                ComExitBuilding(i);

                for j in FilterUnitsInArea(healArea,[f_side, side]) do
                begin

                    AddComHeal(i, j);
                    wait(1$0);

            end;
        end;

        end else
        begin

        AddComEnterUnit(sci_list, build);

       end;
END;

Export function RepairVehicle(side, repairArea, area);
var i,j, vehicleOK_list, damageVehicle_list, emptyVehicle_list, mechanicInside_list, mechanicOutside_list;
begin

    vehicleOK_list = FilterUnitsInArea(area, [[f_side, side], [f_type, unit_vehicle], [f_lives, 550], [f_weapon, 46]]);
    damageVehicle_list = FilterUnitsInArea(area, [[f_side, side], [f_type, unit_vehicle], [f_weapon, 46], [f_not,[f_lives, 550]]]);
    emptyVehicle_list = FilterUnitsInArea(repairArea, [[f_side, side], [f_type, unit_vehicle], [f_weapon, 46], [f_lives, 1000], [f_empty]]);

    for i in damageVehicle_list do mechanicInside_list =  UnitsInside(i);
        mechanicOutside_list =  FilterUnitsInArea(repairArea, [[f_side, side], [f_class, 3]]);

    IF damageVehicle_list > 0 then
    begin

            for i in damageVehicle_list do
            begin
                for j in mechanicInside_list do
                begin
                    ComMoveToArea(damageVehicle_list, repairArea);
                    AddComExitVehicle(j);
                    AddComRepairVehicle(j, i);
                end;
            end;

    end;

    IF emptyVehicle_list > 0 then
    begin

        for i in emptyVehicle_list  do
        begin
            for j in mechanicOutside_list do
            begin
            AddComEnterUnit(j, i);
            end;

    end;

    end;

    IF VehicleOK_list > 0 then
    begin
        for i in VehicleOK_list  do ComAgressiveMove(i, 110, 29);
    end;
end;

Export function DefendBases(area, enemySide, defendersList, build, count);
var i, j;
begin
    if FilterUnitsInArea(area, [[f_side, enemySide], [f_or, [f_type, unit_vehicle], [f_type, unit_human]]]) > count then
    begin
        for i in defendersList do
        begin
            AddComExitBuilding(i);
            wait(0$1);

            for j in FilterUnitsInArea(area, [[f_side, enemySide], [f_or, [f_type, unit_vehicle], [f_type, unit_human]]]) do
                AddComAgressiveMove(i, GetX(j), GetY(j));
        end;
    end else
    begin
        for i in defendersList do ComEnterUnit(i, build);          
    end;
end;

Export function RussianTrap;
var i;
begin
       IF GetSide(Brian) = 4 then SetLives([Brian, Jerry], 0);
       for i in FilterAllUnits([[f_side, 3], [f_type, unit_human]]) do
       begin
          ComExitBuilding(i);
          wait(0$1);
          AddComAgressiveMove(i, 120, 56);
          AddComAgressiveMove(i, 111, 37);
          if GetSide(arm2) = 3 and IsOk(arm2) then
          begin
               AddComEnterUnit(i, arm2);
          end else
          begin
             AddComCrawl(i);
             AddComAgressiveMove(i, 109, 30);
          end;
       end;
end;
    

// Function by Altar from original 02 mission
Export Function Nearest(un, units);
var nearest_dist, nearest_un, sold, dist;

 begin
  nearest_dist= 1000;
  nearest_un= un;
  for sold in units do
   begin
    dist = GetDistUnits(un, sold);
    if dist < nearest_dist then
      begin
        nearest_un=sold;
        nearest_dist=dist;
      end;
   end;
   result:=nearest_un;
end;

Export function PrepareDifficulty;
begin

     IF Difficulty = 1 then
     begin
         RemoveUnit(brw2);
         RemoveUnit(brw3);
         RemoveUnit(brw4);
         RemoveUnit(brw5);

         SetFuel([vehicle1, vehicle2], 60);
         RuSoldMinLevel = 0;
         RuSoldMaxLevel = 1;
     end;

     IF Difficulty = 2 then
     begin
         RemoveUnit(brw4);

         SetFuel([vehicle1, vehicle2], 50);
         RuSoldMinLevel = 1;
         RuSoldMaxLevel = 2;
     end;

     IF Difficulty = 3 then
     begin
         SetFuel([vehicle1, vehicle2], 40);
         RuSoldMinLevel = 2;
         RuSoldMaxLevel = 3;
     end;


end;


//     SaveVariable([GetChassis(tmp[2]),GetEngine(tmp[2]),GetControl(tmp[2]),GetWeapon(tmp[2]), GetLives(tmp[2])], '02_tank2_3');
Export Function SaveVehicles(vehicles, ident);
var i, tmp;
begin
tmp = [];
if not vehicles then
   exit;


for i in vehicles do
    begin
    tmp := Insert(tmp, 1, [GetChassis(i), GetEngine(i), GetControl(i), GetWeapon(i), GetFuel(i), GetLives(i)]);
    end;

SaveVariable(tmp, ident);
End;

