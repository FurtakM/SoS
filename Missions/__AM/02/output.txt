// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 34
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10516 0 0
// PrepareRussianCommander ;
  44: CALL 12050 0 0
// PrepareSouthBase ;
  48: CALL 12146 0 0
// PrepareNorthBase ;
  52: CALL 12484 0 0
// PrepareOtherRussians ;
  56: CALL 12879 0 0
// PrepareHeroes ;
  60: CALL 10837 0 0
// PrepareLisSquad ;
  64: CALL 11207 0 0
// PrepareOtherAmericans ;
  68: CALL 11520 0 0
// Action ;
  72: CALL 329 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 34
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 33
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// end ;
 237: LD_VAR 0 1
 241: RET
// every 0 0$1 trigger debug do var i ;
 242: LD_EXP 34
 246: IFFALSE 326
 248: GO 250
 250: DISABLE
 251: LD_INT 0
 253: PPUSH
// begin enable ;
 254: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
 255: LD_ADDR_VAR 0 1
 259: PUSH
 260: LD_INT 22
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 21
 272: PUSH
 273: LD_INT 1
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: LD_INT 3
 282: PUSH
 283: LD_INT 24
 285: PUSH
 286: LD_INT 1000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 324
// SetLives ( i , 1000 ) ;
 310: LD_VAR 0 1
 314: PPUSH
 315: LD_INT 1000
 317: PPUSH
 318: CALL_OW 234
 322: GO 307
 324: POP
 325: POP
// end ; end_of_file
 326: PPOPN 1
 328: END
// export function Action ; var tmp ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// InGameOn ;
 333: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 337: LD_EXP 1
 341: PPUSH
 342: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 346: LD_ADDR_VAR 0 2
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 4
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: LD_EXP 4
 384: PUSH
 385: EMPTY
 386: LIST
 387: DIFF
 388: ST_TO_ADDR
// if Cyrus and Bobby then
 389: LD_EXP 3
 393: PUSH
 394: LD_EXP 2
 398: AND
 399: IFFALSE 729
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 401: LD_EXP 3
 405: PPUSH
 406: LD_INT 43
 408: PPUSH
 409: LD_INT 72
 411: PPUSH
 412: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 416: LD_EXP 2
 420: PPUSH
 421: LD_INT 44
 423: PPUSH
 424: LD_INT 70
 426: PPUSH
 427: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 431: LD_EXP 1
 435: PPUSH
 436: LD_INT 46
 438: PPUSH
 439: LD_INT 73
 441: PPUSH
 442: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 446: LD_EXP 3
 450: PPUSH
 451: LD_STRING D1a-Cyrus-1
 453: PPUSH
 454: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 458: LD_EXP 1
 462: PPUSH
 463: LD_STRING D1a-JMM-1
 465: PPUSH
 466: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 470: LD_EXP 3
 474: PPUSH
 475: LD_INT 37
 477: PPUSH
 478: LD_INT 66
 480: PPUSH
 481: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 485: LD_EXP 2
 489: PPUSH
 490: LD_INT 41
 492: PPUSH
 493: LD_INT 67
 495: PPUSH
 496: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 500: LD_EXP 1
 504: PPUSH
 505: LD_INT 38
 507: PPUSH
 508: LD_INT 64
 510: PPUSH
 511: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 515: LD_EXP 2
 519: PPUSH
 520: LD_STRING D1a-Bobby-2
 522: PPUSH
 523: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 527: LD_EXP 3
 531: PPUSH
 532: LD_INT 35
 534: PPUSH
 535: LD_INT 62
 537: PPUSH
 538: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 542: LD_EXP 2
 546: PPUSH
 547: LD_INT 32
 549: PPUSH
 550: LD_INT 60
 552: PPUSH
 553: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_INT 35
 564: PPUSH
 565: LD_INT 60
 567: PPUSH
 568: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 572: LD_EXP 1
 576: PPUSH
 577: LD_STRING D1a-JMM-2
 579: PPUSH
 580: CALL_OW 88
// ComWalk ( Lisa ) ;
 584: LD_EXP 4
 588: PPUSH
 589: CALL_OW 138
// wait ( 0 0$1 ) ;
 593: LD_INT 35
 595: PPUSH
 596: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 600: LD_EXP 4
 604: PPUSH
 605: LD_EXP 1
 609: PPUSH
 610: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 614: LD_EXP 1
 618: PUSH
 619: LD_EXP 3
 623: PUSH
 624: LD_EXP 2
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: PPUSH
 634: LD_EXP 4
 638: PPUSH
 639: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 643: LD_VAR 0 2
 647: PUSH
 648: LD_INT 1
 650: ARRAY
 651: PPUSH
 652: LD_INT 33
 654: PPUSH
 655: LD_INT 55
 657: PPUSH
 658: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 2
 669: ARRAY
 670: PPUSH
 671: LD_INT 30
 673: PPUSH
 674: LD_INT 54
 676: PPUSH
 677: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 1
 688: ARRAY
 689: PPUSH
 690: LD_EXP 1
 694: PPUSH
 695: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 699: LD_VAR 0 2
 703: PUSH
 704: LD_INT 2
 706: ARRAY
 707: PPUSH
 708: LD_EXP 1
 712: PPUSH
 713: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 717: LD_EXP 4
 721: PPUSH
 722: LD_STRING D1a-Lisa-2
 724: PPUSH
 725: CALL_OW 88
// end ; if Cyrus and not Bobby then
 729: LD_EXP 3
 733: PUSH
 734: LD_EXP 2
 738: NOT
 739: AND
 740: IFFALSE 945
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 742: LD_EXP 3
 746: PPUSH
 747: LD_INT 43
 749: PPUSH
 750: LD_INT 72
 752: PPUSH
 753: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 757: LD_EXP 1
 761: PPUSH
 762: LD_INT 46
 764: PPUSH
 765: LD_INT 73
 767: PPUSH
 768: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_STRING D1a-Cyrus-1
 779: PPUSH
 780: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_STRING D1a-JMM-1
 791: PPUSH
 792: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 796: LD_EXP 3
 800: PPUSH
 801: LD_INT 37
 803: PPUSH
 804: LD_INT 66
 806: PPUSH
 807: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 811: LD_EXP 1
 815: PPUSH
 816: LD_INT 38
 818: PPUSH
 819: LD_INT 64
 821: PPUSH
 822: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 826: LD_EXP 3
 830: PPUSH
 831: LD_STRING D1a-Cyrus-2
 833: PPUSH
 834: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 838: LD_EXP 3
 842: PPUSH
 843: LD_INT 35
 845: PPUSH
 846: LD_INT 62
 848: PPUSH
 849: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 853: LD_EXP 1
 857: PPUSH
 858: LD_INT 35
 860: PPUSH
 861: LD_INT 60
 863: PPUSH
 864: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 868: LD_EXP 1
 872: PPUSH
 873: LD_STRING D1a-JMM-2
 875: PPUSH
 876: CALL_OW 88
// ComWalk ( Lisa ) ;
 880: LD_EXP 4
 884: PPUSH
 885: CALL_OW 138
// wait ( 0 0$1 ) ;
 889: LD_INT 35
 891: PPUSH
 892: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 896: LD_EXP 4
 900: PPUSH
 901: LD_EXP 1
 905: PPUSH
 906: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 910: LD_EXP 4
 914: PPUSH
 915: LD_STRING D1a-Lisa-2
 917: PPUSH
 918: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 922: LD_EXP 1
 926: PUSH
 927: LD_EXP 3
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PPUSH
 936: LD_EXP 4
 940: PPUSH
 941: CALL_OW 119
// end ; if not Cyrus and Bobby then
 945: LD_EXP 3
 949: NOT
 950: PUSH
 951: LD_EXP 2
 955: AND
 956: IFFALSE 1235
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 958: LD_EXP 2
 962: PPUSH
 963: LD_INT 44
 965: PPUSH
 966: LD_INT 70
 968: PPUSH
 969: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 973: LD_EXP 1
 977: PPUSH
 978: LD_INT 46
 980: PPUSH
 981: LD_INT 73
 983: PPUSH
 984: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 988: LD_EXP 2
 992: PPUSH
 993: LD_STRING D1a-Bobby-1
 995: PPUSH
 996: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
1000: LD_EXP 1
1004: PPUSH
1005: LD_STRING D1a-JMM-1
1007: PPUSH
1008: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
1012: LD_EXP 2
1016: PPUSH
1017: LD_INT 37
1019: PPUSH
1020: LD_INT 66
1022: PPUSH
1023: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
1027: LD_EXP 1
1031: PPUSH
1032: LD_INT 38
1034: PPUSH
1035: LD_INT 64
1037: PPUSH
1038: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
1042: LD_EXP 2
1046: PPUSH
1047: LD_STRING D1a-Bobby-2
1049: PPUSH
1050: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
1054: LD_EXP 2
1058: PPUSH
1059: LD_INT 35
1061: PPUSH
1062: LD_INT 62
1064: PPUSH
1065: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
1069: LD_EXP 1
1073: PPUSH
1074: LD_INT 35
1076: PPUSH
1077: LD_INT 60
1079: PPUSH
1080: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1084: LD_EXP 1
1088: PPUSH
1089: LD_STRING D1a-JMM-2
1091: PPUSH
1092: CALL_OW 88
// ComWalk ( Lisa ) ;
1096: LD_EXP 4
1100: PPUSH
1101: CALL_OW 138
// wait ( 0 0$1 ) ;
1105: LD_INT 35
1107: PPUSH
1108: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1112: LD_EXP 4
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1126: LD_EXP 1
1130: PUSH
1131: LD_EXP 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: LD_EXP 4
1144: PPUSH
1145: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: LD_INT 33
1160: PPUSH
1161: LD_INT 55
1163: PPUSH
1164: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: PPUSH
1177: LD_INT 30
1179: PPUSH
1180: LD_INT 54
1182: PPUSH
1183: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: LD_EXP 1
1200: PPUSH
1201: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1205: LD_VAR 0 2
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_EXP 1
1218: PPUSH
1219: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1223: LD_EXP 4
1227: PPUSH
1228: LD_STRING D1a-Lisa-2
1230: PPUSH
1231: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1235: LD_EXP 3
1239: NOT
1240: PUSH
1241: LD_EXP 2
1245: NOT
1246: AND
1247: IFFALSE 1461
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1249: LD_EXP 1
1253: PPUSH
1254: LD_INT 37
1256: PPUSH
1257: LD_INT 66
1259: PPUSH
1260: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1264: LD_EXP 1
1268: PPUSH
1269: LD_STRING D1b-JMM-1
1271: PPUSH
1272: CALL_OW 88
// ComCrawl ( JMM ) ;
1276: LD_EXP 1
1280: PPUSH
1281: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1285: LD_EXP 1
1289: PPUSH
1290: LD_INT 35
1292: PPUSH
1293: LD_INT 60
1295: PPUSH
1296: CALL_OW 171
// wait ( 0 0$8 ) ;
1300: LD_INT 280
1302: PPUSH
1303: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1307: LD_EXP 1
1311: PPUSH
1312: LD_STRING D1b-JMM-1a
1314: PPUSH
1315: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1319: LD_EXP 1
1323: PUSH
1324: LD_EXP 4
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PPUSH
1333: CALL_OW 138
// wait ( 0 0$1 ) ;
1337: LD_INT 35
1339: PPUSH
1340: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1344: LD_EXP 4
1348: PPUSH
1349: LD_EXP 1
1353: PPUSH
1354: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1358: LD_EXP 1
1362: PUSH
1363: EMPTY
1364: LIST
1365: PPUSH
1366: LD_EXP 4
1370: PPUSH
1371: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1375: LD_VAR 0 2
1379: PUSH
1380: LD_INT 1
1382: ARRAY
1383: PPUSH
1384: LD_INT 33
1386: PPUSH
1387: LD_INT 55
1389: PPUSH
1390: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1394: LD_VAR 0 2
1398: PUSH
1399: LD_INT 2
1401: ARRAY
1402: PPUSH
1403: LD_INT 30
1405: PPUSH
1406: LD_INT 54
1408: PPUSH
1409: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1413: LD_VAR 0 2
1417: PUSH
1418: LD_INT 1
1420: ARRAY
1421: PPUSH
1422: LD_EXP 1
1426: PPUSH
1427: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1431: LD_VAR 0 2
1435: PUSH
1436: LD_INT 2
1438: ARRAY
1439: PPUSH
1440: LD_EXP 1
1444: PPUSH
1445: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1449: LD_EXP 4
1453: PPUSH
1454: LD_STRING D1b-Lisa-1
1456: PPUSH
1457: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1461: LD_EXP 1
1465: PPUSH
1466: LD_STRING D1-JMM-1
1468: PPUSH
1469: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1473: LD_EXP 4
1477: PPUSH
1478: LD_STRING D1-Lisa-1
1480: PPUSH
1481: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1485: LD_EXP 1
1489: PPUSH
1490: LD_STRING D1-JMM-2
1492: PPUSH
1493: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
1497: LD_EXP 9
1501: PPUSH
1502: LD_STRING D1-Pow-2
1504: PPUSH
1505: CALL_OW 586
// if Cyrus then
1509: LD_EXP 3
1513: IFFALSE 1539
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1515: LD_EXP 3
1519: PPUSH
1520: LD_STRING D1-Cyrus-2
1522: PPUSH
1523: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1527: LD_EXP 1
1531: PPUSH
1532: LD_STRING D1-JMM-3
1534: PPUSH
1535: CALL_OW 88
// end ; SayRadioNoFace ( Powell , D1-Pow-3 ) ;
1539: LD_EXP 9
1543: PPUSH
1544: LD_STRING D1-Pow-3
1546: PPUSH
1547: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_STRING D1-JMM-4
1558: PPUSH
1559: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-4 ) ;
1563: LD_EXP 9
1567: PPUSH
1568: LD_STRING D1-Pow-4
1570: PPUSH
1571: CALL_OW 586
// SayRadioNoFace ( Powell , D1-Pow-4a ) ;
1575: LD_EXP 9
1579: PPUSH
1580: LD_STRING D1-Pow-4a
1582: PPUSH
1583: CALL_OW 586
// if Cyrus then
1587: LD_EXP 3
1591: IFFALSE 1605
// Say ( Cyrus , D1-Cyrus-4 ) ;
1593: LD_EXP 3
1597: PPUSH
1598: LD_STRING D1-Cyrus-4
1600: PPUSH
1601: CALL_OW 88
// if Bobby then
1605: LD_EXP 2
1609: IFFALSE 1647
// begin Say ( Bobby , D1-Bobby-4 ) ;
1611: LD_EXP 2
1615: PPUSH
1616: LD_STRING D1-Bobby-4
1618: PPUSH
1619: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1623: LD_EXP 4
1627: PPUSH
1628: LD_STRING D1-Lisa-4
1630: PPUSH
1631: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1635: LD_EXP 1
1639: PPUSH
1640: LD_STRING D1-JMM-5
1642: PPUSH
1643: CALL_OW 88
// end ; InGameOff ;
1647: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1651: LD_INT 22
1653: PUSH
1654: LD_INT 4
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PPUSH
1661: CALL_OW 69
1665: PUSH
1666: LD_EXP 6
1670: PUSH
1671: LD_EXP 7
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: DIFF
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1688: LD_STRING M1
1690: PPUSH
1691: CALL_OW 337
// SaveForQuickRestart ;
1695: CALL_OW 22
// end ;
1699: LD_VAR 0 1
1703: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1704: LD_INT 7
1706: PPUSH
1707: LD_INT 22
1709: PUSH
1710: LD_INT 1
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PPUSH
1717: CALL_OW 70
1721: PUSH
1722: LD_INT 0
1724: GREATER
1725: IFFALSE 2138
1727: GO 1729
1729: DISABLE
// begin InGameOn ;
1730: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1734: LD_INT 22
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 21
1746: PUSH
1747: LD_INT 1
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 69
1762: PPUSH
1763: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1767: LD_INT 24
1769: PPUSH
1770: LD_INT 32
1772: PPUSH
1773: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_INT 4
1784: PPUSH
1785: LD_INT 1
1787: PPUSH
1788: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1792: LD_EXP 5
1796: PPUSH
1797: LD_INT 4
1799: PPUSH
1800: CALL_OW 336
// wait ( 0 0$1 ) ;
1804: LD_INT 35
1806: PPUSH
1807: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1811: LD_EXP 5
1815: PPUSH
1816: LD_INT 27
1818: PPUSH
1819: LD_INT 38
1821: PPUSH
1822: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1826: LD_EXP 5
1830: PPUSH
1831: LD_EXP 1
1835: PPUSH
1836: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1840: LD_INT 22
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 21
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: LD_EXP 5
1873: PUSH
1874: EMPTY
1875: LIST
1876: DIFF
1877: PPUSH
1878: LD_EXP 5
1882: PPUSH
1883: CALL_OW 119
// wait ( 0 0$1 ) ;
1887: LD_INT 35
1889: PPUSH
1890: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1894: LD_EXP 5
1898: PPUSH
1899: LD_STRING D2a-Khat-1
1901: PPUSH
1902: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1906: LD_EXP 1
1910: PPUSH
1911: LD_STRING D2a-JMM-1
1913: PPUSH
1914: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1918: LD_EXP 5
1922: PPUSH
1923: LD_STRING D2a-Khat-2
1925: PPUSH
1926: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1930: LD_EXP 1
1934: PPUSH
1935: LD_STRING D2a-JMM-2
1937: PPUSH
1938: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1942: LD_EXP 5
1946: PPUSH
1947: LD_STRING D2a-Khat-3
1949: PPUSH
1950: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1954: LD_EXP 1
1958: PPUSH
1959: LD_STRING D2a-JMM-3
1961: PPUSH
1962: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1966: LD_EXP 5
1970: PPUSH
1971: LD_STRING D2a-Khat-4
1973: PPUSH
1974: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1978: LD_EXP 1
1982: PPUSH
1983: LD_STRING D2a-JMM-4
1985: PPUSH
1986: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1990: LD_EXP 5
1994: PPUSH
1995: LD_STRING D2a-Khat-5
1997: PPUSH
1998: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
2002: LD_EXP 1
2006: PPUSH
2007: LD_STRING D2a-JMM-5
2009: PPUSH
2010: CALL_OW 88
// InGameOff ;
2014: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
2018: LD_INT 22
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 21
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: LD_INT 24
2043: PUSH
2044: LD_INT 800
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PPUSH
2060: CALL_OW 69
2064: IFFALSE 2138
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
2066: LD_EXP 5
2070: PPUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 21
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 3
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 1000
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PPUSH
2113: CALL_OW 69
2117: PUSH
2118: LD_INT 1
2120: ARRAY
2121: PPUSH
2122: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2126: LD_EXP 5
2130: PPUSH
2131: LD_STRING D2b-Khat-1
2133: PPUSH
2134: CALL_OW 88
// end ; end ;
2138: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2139: LD_INT 15
2141: PPUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 70
2156: IFFALSE 3353
2158: GO 2160
2160: DISABLE
2161: LD_INT 0
2163: PPUSH
2164: PPUSH
2165: PPUSH
2166: PPUSH
2167: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2168: LD_ADDR_VAR 0 2
2172: PUSH
2173: LD_INT 999
2175: PUSH
2176: LD_INT 999
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 22
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 21
2203: PUSH
2204: LD_INT 1
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PPUSH
2215: CALL_OW 69
2219: PUSH
2220: LD_EXP 1
2224: PUSH
2225: LD_EXP 2
2229: PUSH
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 4
2239: PUSH
2240: LD_EXP 5
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: DIFF
2252: ST_TO_ADDR
// PrepareDeadSoldiers ;
2253: CALL 11662 0 0
// spotCorpses = 1 ;
2257: LD_ADDR_EXP 32
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2265: LD_INT 70
2267: PPUSH
2268: CALL_OW 67
// InGameOn ;
2272: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2276: LD_INT 23
2278: PPUSH
2279: LD_INT 12
2281: PPUSH
2282: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_VAR 0 2
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PUSH
2300: LD_INT 2
2302: ARRAY
2303: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2304: LD_ADDR_VAR 0 1
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 1
2342: PUSH
2343: LD_EXP 5
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: DIFF
2352: PUSH
2353: FOR_IN
2354: IFFALSE 2405
// if IsOK ( i ) then
2356: LD_VAR 0 1
2360: PPUSH
2361: CALL_OW 302
2365: IFFALSE 2403
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2367: LD_ADDR_VAR 0 2
2371: PUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: LD_INT 16
2389: PPUSH
2390: CALL_OW 299
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: ADD
2402: ST_TO_ADDR
2403: GO 2353
2405: POP
2406: POP
// for i = 2 to distanceTab do
2407: LD_ADDR_VAR 0 1
2411: PUSH
2412: DOUBLE
2413: LD_INT 2
2415: DEC
2416: ST_TO_ADDR
2417: LD_VAR 0 2
2421: PUSH
2422: FOR_TO
2423: IFFALSE 2469
// if distanceTab [ i ] [ 2 ] < min then
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PUSH
2436: LD_INT 2
2438: ARRAY
2439: PUSH
2440: LD_VAR 0 3
2444: LESS
2445: IFFALSE 2467
// min = distanceTab [ i ] [ 2 ] ;
2447: LD_ADDR_VAR 0 3
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_VAR 0 1
2461: ARRAY
2462: PUSH
2463: LD_INT 2
2465: ARRAY
2466: ST_TO_ADDR
2467: GO 2422
2469: POP
2470: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2471: LD_ADDR_VAR 0 1
2475: PUSH
2476: LD_INT 22
2478: PUSH
2479: LD_INT 1
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 21
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PPUSH
2500: CALL_OW 69
2504: PUSH
2505: LD_EXP 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: DIFF
2513: PUSH
2514: FOR_IN
2515: IFFALSE 2585
// begin ComMoveToArea ( i , DeadCutscene ) ;
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 28
2524: PPUSH
2525: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2529: LD_EXP 1
2533: PPUSH
2534: LD_INT 30
2536: PPUSH
2537: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2541: LD_VAR 0 1
2545: PPUSH
2546: LD_INT 23
2548: PPUSH
2549: LD_INT 11
2551: PPUSH
2552: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2556: LD_EXP 1
2560: PPUSH
2561: LD_INT 23
2563: PPUSH
2564: LD_INT 11
2566: PPUSH
2567: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2571: LD_EXP 35
2575: PPUSH
2576: LD_INT 250
2578: PPUSH
2579: CALL_OW 234
// end ;
2583: GO 2514
2585: POP
2586: POP
// for i = 2 to distanceTab do
2587: LD_ADDR_VAR 0 1
2591: PUSH
2592: DOUBLE
2593: LD_INT 2
2595: DEC
2596: ST_TO_ADDR
2597: LD_VAR 0 2
2601: PUSH
2602: FOR_TO
2603: IFFALSE 2989
// begin if distanceTab [ i ] [ 2 ] = min then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 2
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 3
2624: EQUAL
2625: IFFALSE 2987
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2627: LD_VAR 0 2
2631: PUSH
2632: LD_VAR 0 1
2636: ARRAY
2637: PUSH
2638: LD_INT 1
2640: ARRAY
2641: PUSH
2642: LD_EXP 2
2646: EQUAL
2647: IFFALSE 2661
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_STRING DCorpses-Bobby-1
2656: PPUSH
2657: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2661: LD_VAR 0 2
2665: PUSH
2666: LD_VAR 0 1
2670: ARRAY
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PUSH
2676: LD_EXP 3
2680: EQUAL
2681: IFFALSE 2695
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2683: LD_EXP 3
2687: PPUSH
2688: LD_STRING DCorpses-Cyrus-1
2690: PPUSH
2691: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2695: LD_VAR 0 2
2699: PUSH
2700: LD_VAR 0 1
2704: ARRAY
2705: PUSH
2706: LD_INT 1
2708: ARRAY
2709: PUSH
2710: LD_EXP 4
2714: EQUAL
2715: IFFALSE 2729
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2717: LD_EXP 4
2721: PPUSH
2722: LD_STRING DCorpses-Lisa-1
2724: PPUSH
2725: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2729: LD_VAR 0 2
2733: PUSH
2734: LD_VAR 0 1
2738: ARRAY
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PUSH
2744: LD_VAR 0 4
2748: PUSH
2749: LD_INT 1
2751: ARRAY
2752: EQUAL
2753: PUSH
2754: LD_VAR 0 4
2758: PUSH
2759: LD_INT 1
2761: ARRAY
2762: PPUSH
2763: CALL_OW 258
2767: PUSH
2768: LD_INT 1
2770: EQUAL
2771: AND
2772: IFFALSE 2790
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 1
2781: ARRAY
2782: PPUSH
2783: LD_STRING DCorpses-Sol1-1
2785: PPUSH
2786: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2790: LD_VAR 0 2
2794: PUSH
2795: LD_VAR 0 1
2799: ARRAY
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PUSH
2805: LD_VAR 0 4
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: EQUAL
2814: PUSH
2815: LD_VAR 0 4
2819: PUSH
2820: LD_INT 1
2822: ARRAY
2823: PPUSH
2824: CALL_OW 258
2828: PUSH
2829: LD_INT 2
2831: EQUAL
2832: AND
2833: IFFALSE 2851
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2835: LD_VAR 0 4
2839: PUSH
2840: LD_INT 1
2842: ARRAY
2843: PPUSH
2844: LD_STRING DCorpses-FSol1-1
2846: PPUSH
2847: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2851: LD_VAR 0 2
2855: PUSH
2856: LD_VAR 0 1
2860: ARRAY
2861: PUSH
2862: LD_INT 1
2864: ARRAY
2865: PUSH
2866: LD_VAR 0 4
2870: PUSH
2871: LD_INT 2
2873: ARRAY
2874: EQUAL
2875: PUSH
2876: LD_VAR 0 4
2880: PUSH
2881: LD_INT 2
2883: ARRAY
2884: PPUSH
2885: CALL_OW 258
2889: PUSH
2890: LD_INT 1
2892: EQUAL
2893: AND
2894: IFFALSE 2912
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2896: LD_VAR 0 4
2900: PUSH
2901: LD_INT 2
2903: ARRAY
2904: PPUSH
2905: LD_STRING DCorpses-Sol1-1
2907: PPUSH
2908: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2912: LD_VAR 0 2
2916: PUSH
2917: LD_VAR 0 1
2921: ARRAY
2922: PUSH
2923: LD_INT 1
2925: ARRAY
2926: PUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: EQUAL
2936: PUSH
2937: LD_VAR 0 4
2941: PUSH
2942: LD_INT 2
2944: ARRAY
2945: PPUSH
2946: CALL_OW 258
2950: PUSH
2951: LD_INT 2
2953: EQUAL
2954: AND
2955: IFFALSE 2973
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2957: LD_VAR 0 4
2961: PUSH
2962: LD_INT 2
2964: ARRAY
2965: PPUSH
2966: LD_STRING DCorpses-FSol1-1
2968: PPUSH
2969: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2973: LD_EXP 35
2977: PPUSH
2978: LD_INT 150
2980: PPUSH
2981: CALL_OW 234
// break ;
2985: GO 2989
// end ; end ;
2987: GO 2602
2989: POP
2990: POP
// p := 0 ;
2991: LD_ADDR_VAR 0 5
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2999: LD_INT 35
3001: PPUSH
3002: CALL_OW 67
// p := p + 1 ;
3006: LD_ADDR_VAR 0 5
3010: PUSH
3011: LD_VAR 0 5
3015: PUSH
3016: LD_INT 1
3018: PLUS
3019: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
3020: LD_ADDR_VAR 0 1
3024: PUSH
3025: LD_INT 22
3027: PUSH
3028: LD_INT 1
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 21
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 69
3053: PUSH
3054: LD_EXP 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: DIFF
3062: PUSH
3063: FOR_IN
3064: IFFALSE 3134
// begin ComMoveToArea ( i , DeadCutscene ) ;
3066: LD_VAR 0 1
3070: PPUSH
3071: LD_INT 28
3073: PPUSH
3074: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
3078: LD_EXP 1
3082: PPUSH
3083: LD_INT 30
3085: PPUSH
3086: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 23
3097: PPUSH
3098: LD_INT 11
3100: PPUSH
3101: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_INT 23
3112: PPUSH
3113: LD_INT 11
3115: PPUSH
3116: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3120: LD_EXP 35
3124: PPUSH
3125: LD_INT 250
3127: PPUSH
3128: CALL_OW 234
// end ;
3132: GO 3063
3134: POP
3135: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3136: LD_EXP 1
3140: PPUSH
3141: LD_INT 30
3143: PPUSH
3144: CALL_OW 308
3148: PUSH
3149: LD_VAR 0 5
3153: PUSH
3154: LD_INT 16
3156: GREATEREQUAL
3157: OR
3158: IFFALSE 2999
// wait ( 0 0$1 ) ;
3160: LD_INT 35
3162: PPUSH
3163: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING DCorpses-JMM-1
3174: PPUSH
3175: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3179: LD_EXP 35
3183: PPUSH
3184: LD_INT 100
3186: PPUSH
3187: CALL_OW 234
// if IsOK ( Khatam ) then
3191: LD_EXP 5
3195: PPUSH
3196: CALL_OW 302
3200: IFFALSE 3337
// begin repeat wait ( 0 0$1 ) ;
3202: LD_INT 35
3204: PPUSH
3205: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3209: LD_EXP 5
3213: PPUSH
3214: LD_EXP 35
3218: PPUSH
3219: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3223: LD_EXP 5
3227: PPUSH
3228: LD_EXP 35
3232: PPUSH
3233: CALL_OW 296
3237: PUSH
3238: LD_INT 2
3240: LESS
3241: IFFALSE 3202
// spotCorpses = 0 ;
3243: LD_ADDR_EXP 32
3247: PUSH
3248: LD_INT 0
3250: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3251: LD_EXP 35
3255: PPUSH
3256: LD_INT 10
3258: PPUSH
3259: CALL_OW 234
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// KillUnit ( DyingSold ) ;
3270: LD_EXP 35
3274: PPUSH
3275: CALL_OW 66
// wait ( 0 0$1 ) ;
3279: LD_INT 35
3281: PPUSH
3282: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3286: LD_EXP 1
3290: PUSH
3291: LD_EXP 5
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3304: LD_EXP 5
3308: PPUSH
3309: LD_EXP 1
3313: PPUSH
3314: CALL_OW 119
// wait ( 0 0$1 ) ;
3318: LD_INT 35
3320: PPUSH
3321: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3325: LD_EXP 5
3329: PPUSH
3330: LD_STRING DCorpses-Khat-1
3332: PPUSH
3333: CALL_OW 88
// end ; InGameOff ;
3337: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3341: LD_EXP 1
3345: PPUSH
3346: LD_STRING DCorpses-JMM-2
3348: PPUSH
3349: CALL_OW 88
// end ;
3353: PPOPN 5
3355: END
// every 0 0$1 trigger spotCorpses = 1 do
3356: LD_EXP 32
3360: PUSH
3361: LD_INT 1
3363: EQUAL
3364: IFFALSE 3382
3366: GO 3368
3368: DISABLE
// begin enable ;
3369: ENABLE
// SetLives ( DyingSold , 10 ) ;
3370: LD_EXP 35
3374: PPUSH
3375: LD_INT 10
3377: PPUSH
3378: CALL_OW 234
// end ;
3382: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 22
3388: PUSH
3389: LD_INT 1
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PPUSH
3396: CALL_OW 70
3400: PUSH
3401: LD_INT 22
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: PPUSH
3411: CALL_OW 69
3415: PPUSH
3416: LD_EXP 7
3420: PPUSH
3421: CALL_OW 74
3425: PPUSH
3426: LD_EXP 7
3430: PPUSH
3431: CALL_OW 296
3435: PUSH
3436: LD_INT 13
3438: LESS
3439: OR
3440: IFFALSE 3621
3442: GO 3444
3444: DISABLE
3445: LD_INT 0
3447: PPUSH
// begin InGameOn ;
3448: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3452: LD_EXP 7
3456: PPUSH
3457: LD_INT 250
3459: PPUSH
3460: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3464: LD_EXP 6
3468: PPUSH
3469: LD_INT 1000
3471: PUSH
3472: LD_INT 800
3474: PUSH
3475: LD_INT 750
3477: PUSH
3478: LD_INT 700
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: PUSH
3487: LD_OWVAR 67
3491: ARRAY
3492: PPUSH
3493: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 4
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3513: LD_EXP 6
3517: PUSH
3518: LD_EXP 7
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3531: LD_ADDR_VAR 0 1
3535: PUSH
3536: LD_INT 9
3538: PPUSH
3539: LD_INT 22
3541: PUSH
3542: LD_INT 3
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PPUSH
3549: CALL_OW 70
3553: PUSH
3554: LD_INT 22
3556: PUSH
3557: LD_INT 4
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: CALL_OW 69
3568: UNION
3569: PUSH
3570: FOR_IN
3571: IFFALSE 3584
// ComFree ( i ) ;
3573: LD_VAR 0 1
3577: PPUSH
3578: CALL_OW 139
3582: GO 3570
3584: POP
3585: POP
// wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// InGameOff ;
3593: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3597: LD_EXP 6
3601: PPUSH
3602: LD_STRING DF-Sol1-1
3604: PPUSH
3605: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3609: LD_EXP 1
3613: PPUSH
3614: LD_STRING DF-JMM-1
3616: PPUSH
3617: CALL_OW 88
// end ;
3621: PPOPN 1
3623: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3624: LD_INT 19
3626: PPUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 70
3641: PUSH
3642: LD_INT 0
3644: EQUAL
3645: IFFALSE 3754
3647: GO 3649
3649: DISABLE
// begin if not IsDead ( Brian ) then
3650: LD_EXP 6
3654: PPUSH
3655: CALL_OW 301
3659: NOT
3660: IFFALSE 3674
// SetSide ( Brian , 1 ) ;
3662: LD_EXP 6
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 235
// if not IsDead ( Jerry ) then
3674: LD_EXP 7
3678: PPUSH
3679: CALL_OW 301
3683: NOT
3684: IFFALSE 3698
// SetSide ( Jerry , 1 ) ;
3686: LD_EXP 7
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3698: LD_INT 22
3700: PUSH
3701: LD_INT 1
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 25
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 69
3726: IFFALSE 3742
// Say ( JMM , DFa-JMM-1 ) else
3728: LD_EXP 1
3732: PPUSH
3733: LD_STRING DFa-JMM-1
3735: PPUSH
3736: CALL_OW 88
3740: GO 3754
// Say ( JMM , DFa-JMM-1a ) ;
3742: LD_EXP 1
3746: PPUSH
3747: LD_STRING DFa-JMM-1a
3749: PPUSH
3750: CALL_OW 88
// end ;
3754: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3755: LD_INT 19
3757: PPUSH
3758: LD_INT 22
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PPUSH
3768: CALL_OW 70
3772: PUSH
3773: LD_INT 0
3775: EQUAL
3776: PUSH
3777: LD_EXP 6
3781: PPUSH
3782: CALL_OW 302
3786: NOT
3787: AND
3788: IFFALSE 3874
3790: GO 3792
3792: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3793: LD_INT 35
3795: PPUSH
3796: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3800: LD_EXP 6
3804: PPUSH
3805: CALL_OW 256
3809: PUSH
3810: LD_INT 250
3812: GREATER
3813: IFFALSE 3793
// Say ( Brian , DFb-Sol1-1 ) ;
3815: LD_EXP 6
3819: PPUSH
3820: LD_STRING DFb-Sol1-1
3822: PPUSH
3823: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3827: LD_EXP 6
3831: PPUSH
3832: LD_INT 78
3834: PPUSH
3835: LD_INT 74
3837: PPUSH
3838: CALL_OW 111
// if IsDead ( Jerry ) then
3842: LD_EXP 7
3846: PPUSH
3847: CALL_OW 301
3851: IFFALSE 3867
// Say ( Brian , DFb-Sol1-1a ) else
3853: LD_EXP 6
3857: PPUSH
3858: LD_STRING DFb-Sol1-1a
3860: PPUSH
3861: CALL_OW 88
3865: GO 3874
// SetAchievement ( ACH_JERRY ) ;
3867: LD_STRING ACH_JERRY
3869: PPUSH
3870: CALL_OW 543
// end ;
3874: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3875: LD_INT 22
3877: PUSH
3878: LD_INT 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 69
3903: PUSH
3904: LD_INT 0
3906: EQUAL
3907: IFFALSE 3999
3909: GO 3911
3911: DISABLE
3912: LD_INT 0
3914: PPUSH
// begin enable ;
3915: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3916: LD_ADDR_VAR 0 1
3920: PUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 3
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 30
3943: PUSH
3944: LD_INT 31
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PPUSH
3956: CALL_OW 69
3960: PUSH
3961: FOR_IN
3962: IFFALSE 3997
// begin if See ( 1 , i ) then
3964: LD_INT 1
3966: PPUSH
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 292
3976: IFFALSE 3995
// begin disable ;
3978: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3979: LD_EXP 1
3983: PPUSH
3984: LD_STRING DX1-JMM-1
3986: PPUSH
3987: CALL_OW 88
// exit ;
3991: POP
3992: POP
3993: GO 3999
// end ; end ;
3995: GO 3961
3997: POP
3998: POP
// end ;
3999: PPOPN 1
4001: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 11
4007: PPUSH
4008: CALL_OW 294
4012: IFFALSE 4275
4014: GO 4016
4016: DISABLE
4017: LD_INT 0
4019: PPUSH
4020: PPUSH
4021: PPUSH
// begin DialogueOn ;
4022: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
4026: LD_INT 11
4028: PPUSH
4029: LD_INT 22
4031: PUSH
4032: LD_INT 3
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 21
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PPUSH
4053: CALL_OW 70
4057: PUSH
4058: LD_INT 1
4060: ARRAY
4061: PPUSH
4062: LD_STRING DX3-Rus1-1
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING DX3-JMM-1
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4085: LD_ADDR_VAR 0 1
4089: PUSH
4090: LD_INT 11
4092: PPUSH
4093: LD_INT 22
4095: PUSH
4096: LD_INT 3
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 25
4105: PUSH
4106: LD_INT 1
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PPUSH
4117: CALL_OW 70
4121: PUSH
4122: FOR_IN
4123: IFFALSE 4143
// southBaseDefenders = southBaseDefenders ^ i ;
4125: LD_ADDR_EXP 25
4129: PUSH
4130: LD_EXP 25
4134: PUSH
4135: LD_VAR 0 1
4139: ADD
4140: ST_TO_ADDR
4141: GO 4122
4143: POP
4144: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4145: LD_INT 175
4147: PUSH
4148: LD_INT 140
4150: PUSH
4151: LD_INT 105
4153: PUSH
4154: LD_INT 70
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 21
4190: PUSH
4191: LD_INT 1
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 25
4200: PUSH
4201: LD_INT 3
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 69
4217: ST_TO_ADDR
// if not mech then
4218: LD_VAR 0 3
4222: NOT
4223: IFFALSE 4227
// exit ;
4225: GO 4275
// ComExitBuilding ( mech ) ;
4227: LD_VAR 0 3
4231: PPUSH
4232: CALL_OW 122
// wait ( 0 0$1 ) ;
4236: LD_INT 35
4238: PPUSH
4239: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4243: LD_VAR 0 3
4247: PUSH
4248: LD_INT 1
4250: ARRAY
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4259: LD_VAR 0 3
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: PPUSH
4268: LD_INT 4
4270: PPUSH
4271: CALL_OW 180
// end ;
4275: PPOPN 3
4277: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 5
4283: PPUSH
4284: CALL_OW 292
4288: PUSH
4289: LD_INT 1
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 292
4299: OR
4300: IFFALSE 4384
4302: GO 4304
4304: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4305: LD_INT 5
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PPUSH
4315: CALL_OW 85
// if IsOK ( Bobby ) then
4319: LD_EXP 2
4323: PPUSH
4324: CALL_OW 302
4328: IFFALSE 4364
// begin DialogueOn ;
4330: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DX2-Bobby-1
4341: PPUSH
4342: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4346: LD_EXP 1
4350: PPUSH
4351: LD_STRING DX2-JMM-1a
4353: PPUSH
4354: CALL_OW 88
// DialogueOff ;
4358: CALL_OW 7
// end else
4362: GO 4384
// begin DialogueOn ;
4364: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4368: LD_EXP 1
4372: PPUSH
4373: LD_STRING DX2-JMM-1
4375: PPUSH
4376: CALL_OW 88
// DialogueOff ;
4380: CALL_OW 7
// end ; end ;
4384: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4385: LD_INT 22
4387: PUSH
4388: LD_INT 1
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 23
4397: PUSH
4398: LD_INT 3
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 21
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 34
4417: PUSH
4418: LD_INT 42
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: IFFALSE 4856
4437: GO 4439
4439: DISABLE
4440: LD_INT 0
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4447: LD_ADDR_VAR 0 1
4451: PUSH
4452: LD_INT 22
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 23
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 34
4484: PUSH
4485: LD_INT 42
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: LD_INT 22
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 21
4520: PUSH
4521: LD_INT 1
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 26
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 69
4547: PUSH
4548: LD_EXP 1
4552: PUSH
4553: LD_EXP 3
4557: PUSH
4558: LD_EXP 2
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: DIFF
4568: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 26
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: PUSH
4614: LD_EXP 4
4618: PUSH
4619: EMPTY
4620: LIST
4621: DIFF
4622: ST_TO_ADDR
// if not tmp then
4623: LD_VAR 0 1
4627: NOT
4628: IFFALSE 4632
// exit ;
4630: GO 4856
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4632: LD_ADDR_VAR 0 2
4636: PUSH
4637: LD_VAR 0 1
4641: PUSH
4642: LD_INT 1
4644: ARRAY
4645: PPUSH
4646: CALL_OW 311
4650: ST_TO_ADDR
// if not speaker then
4651: LD_VAR 0 2
4655: NOT
4656: IFFALSE 4660
// exit ;
4658: GO 4856
// DialogueOn ;
4660: CALL_OW 6
// if speaker = JMM then
4664: LD_VAR 0 2
4668: PUSH
4669: LD_EXP 1
4673: EQUAL
4674: IFFALSE 4708
// begin if Lisa then
4676: LD_EXP 4
4680: IFFALSE 4694
// Say ( Lisa , DX2b-Lisa-1 ) ;
4682: LD_EXP 4
4686: PPUSH
4687: LD_STRING DX2b-Lisa-1
4689: PPUSH
4690: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_STRING DX2b-JMM-1
4701: PPUSH
4702: CALL_OW 88
// end else
4706: GO 4852
// begin Say ( JMM , DX2a-JMM-1 ) ;
4708: LD_EXP 1
4712: PPUSH
4713: LD_STRING DX2a-JMM-1
4715: PPUSH
4716: CALL_OW 88
// if speaker = Bobby then
4720: LD_VAR 0 2
4724: PUSH
4725: LD_EXP 2
4729: EQUAL
4730: IFFALSE 4744
// Say ( Bobby , DX2a-Bobby-1 ) ;
4732: LD_EXP 2
4736: PPUSH
4737: LD_STRING DX2a-Bobby-1
4739: PPUSH
4740: CALL_OW 88
// if speaker = Cyrus then
4744: LD_VAR 0 2
4748: PUSH
4749: LD_EXP 3
4753: EQUAL
4754: IFFALSE 4768
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4756: LD_EXP 3
4760: PPUSH
4761: LD_STRING DX2a-Cyrus-1
4763: PPUSH
4764: CALL_OW 88
// if speaker = Lisa then
4768: LD_VAR 0 2
4772: PUSH
4773: LD_EXP 4
4777: EQUAL
4778: IFFALSE 4792
// Say ( Lisa , DX2a-Lisa-1 ) ;
4780: LD_EXP 4
4784: PPUSH
4785: LD_STRING DX2a-Lisa-1
4787: PPUSH
4788: CALL_OW 88
// if speaker in temp1 then
4792: LD_VAR 0 2
4796: PUSH
4797: LD_VAR 0 3
4801: IN
4802: IFFALSE 4816
// Say ( speaker , DX2a-Sol1-1 ) ;
4804: LD_VAR 0 2
4808: PPUSH
4809: LD_STRING DX2a-Sol1-1
4811: PPUSH
4812: CALL_OW 88
// if speaker in temp2 then
4816: LD_VAR 0 2
4820: PUSH
4821: LD_VAR 0 4
4825: IN
4826: IFFALSE 4840
// Say ( speaker , DX2a-FSol1-1 ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_STRING DX2a-FSol1-1
4835: PPUSH
4836: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4840: LD_EXP 1
4844: PPUSH
4845: LD_STRING DX2a-JMM-2
4847: PPUSH
4848: CALL_OW 88
// end ; DialogueOff ;
4852: CALL_OW 7
// end ;
4856: PPOPN 5
4858: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4859: LD_INT 1
4861: PPUSH
4862: CALL_OW 255
4866: PUSH
4867: LD_INT 1
4869: EQUAL
4870: PUSH
4871: LD_INT 10
4873: PPUSH
4874: CALL_OW 255
4878: PUSH
4879: LD_INT 1
4881: EQUAL
4882: OR
4883: IFFALSE 4943
4885: GO 4887
4887: DISABLE
// begin DialogueOn ;
4888: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4892: LD_EXP 1
4896: PPUSH
4897: LD_STRING D3-JMM-1
4899: PPUSH
4900: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4904: LD_EXP 9
4908: PPUSH
4909: LD_STRING D3-Pow-1
4911: PPUSH
4912: CALL_OW 586
// if IsOK ( Cyrus ) then
4916: LD_EXP 3
4920: PPUSH
4921: CALL_OW 302
4925: IFFALSE 4939
// Say ( Cyrus , D3-Cyrus-1 ) ;
4927: LD_EXP 3
4931: PPUSH
4932: LD_STRING D3-Cyrus-1
4934: PPUSH
4935: CALL_OW 88
// DialogueOff ;
4939: CALL_OW 7
// end ;
4943: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4944: LD_INT 1
4946: PPUSH
4947: CALL_OW 255
4951: PUSH
4952: LD_INT 1
4954: EQUAL
4955: PUSH
4956: LD_INT 10
4958: PPUSH
4959: CALL_OW 255
4963: PUSH
4964: LD_INT 1
4966: EQUAL
4967: AND
4968: IFFALSE 6358
4970: GO 4972
4972: DISABLE
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4978: LD_ADDR_VAR 0 2
4982: PUSH
4983: LD_INT 22
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 21
4995: PUSH
4996: LD_INT 1
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PPUSH
5007: CALL_OW 69
5011: ST_TO_ADDR
// if tmp then
5012: LD_VAR 0 2
5016: IFFALSE 5077
// begin for i in tmp do
5018: LD_ADDR_VAR 0 3
5022: PUSH
5023: LD_VAR 0 2
5027: PUSH
5028: FOR_IN
5029: IFFALSE 5075
// begin if IsInUnit ( i ) then
5031: LD_VAR 0 3
5035: PPUSH
5036: CALL_OW 310
5040: IFFALSE 5051
// ComExitBuilding ( i ) ;
5042: LD_VAR 0 3
5046: PPUSH
5047: CALL_OW 122
// wait ( 0 0$1 ) ;
5051: LD_INT 35
5053: PPUSH
5054: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
5058: LD_VAR 0 3
5062: PPUSH
5063: LD_INT 54
5065: PPUSH
5066: LD_INT 17
5068: PPUSH
5069: CALL_OW 174
// end ;
5073: GO 5028
5075: POP
5076: POP
// end ; wait ( 0 0$03 ) ;
5077: LD_INT 105
5079: PPUSH
5080: CALL_OW 67
// DialogueOn ;
5084: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5088: LD_EXP 1
5092: PPUSH
5093: LD_STRING D3a-JMM-1
5095: PPUSH
5096: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-1 ) ;
5100: LD_EXP 9
5104: PPUSH
5105: LD_STRING D3a-Pow-1
5107: PPUSH
5108: CALL_OW 586
// Say ( JMM , D3a-JMM-2 ) ;
5112: LD_EXP 1
5116: PPUSH
5117: LD_STRING D3a-JMM-2
5119: PPUSH
5120: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-2 ) ;
5124: LD_EXP 9
5128: PPUSH
5129: LD_STRING D3a-Pow-2
5131: PPUSH
5132: CALL_OW 586
// Say ( JMM , D3a-JMM-3 ) ;
5136: LD_EXP 1
5140: PPUSH
5141: LD_STRING D3a-JMM-3
5143: PPUSH
5144: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-3 ) ;
5148: LD_EXP 9
5152: PPUSH
5153: LD_STRING D3a-Pow-3
5155: PPUSH
5156: CALL_OW 586
// Say ( JMM , D3a-JMM-4 ) ;
5160: LD_EXP 1
5164: PPUSH
5165: LD_STRING D3a-JMM-4
5167: PPUSH
5168: CALL_OW 88
// DialogueOff ;
5172: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5176: LD_STRING M2
5178: PPUSH
5179: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5183: LD_EXP 1
5187: PPUSH
5188: LD_STRING D3b-JMM-1
5190: PPUSH
5191: CALL_OW 88
// Hint ( Depot2 ) ;
5195: LD_STRING Depot2
5197: PPUSH
5198: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5202: LD_INT 35
5204: PPUSH
5205: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5209: LD_INT 22
5211: PPUSH
5212: LD_INT 22
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 25
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 70
5240: PUSH
5241: LD_INT 22
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 21
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 69
5269: NOT
5270: AND
5271: IFFALSE 5202
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5273: LD_ADDR_VAR 0 1
5277: PUSH
5278: LD_INT 22
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 23
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PUSH
5298: LD_INT 25
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PUSH
5308: LD_INT 50
5310: PUSH
5311: EMPTY
5312: LIST
5313: PUSH
5314: LD_INT 56
5316: PUSH
5317: EMPTY
5318: LIST
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: PUSH
5332: LD_EXP 1
5336: PUSH
5337: LD_EXP 5
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: DIFF
5346: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5347: LD_INT 35
5349: PPUSH
5350: CALL_OW 67
// until temp > 0 ;
5354: LD_VAR 0 1
5358: PUSH
5359: LD_INT 0
5361: GREATER
5362: IFFALSE 5273
// wait ( 0 0$5 ) ;
5364: LD_INT 175
5366: PPUSH
5367: CALL_OW 67
// PrepareRussianHeroes ;
5371: CALL 11888 0 0
// InGameOn ;
5375: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5379: LD_EXP 8
5383: PPUSH
5384: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5388: LD_EXP 1
5392: PUSH
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: LD_EXP 8
5410: PPUSH
5411: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5415: LD_EXP 8
5419: PPUSH
5420: LD_VAR 0 1
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PPUSH
5429: CALL_OW 119
// wait ( 0 0$02 ) ;
5433: LD_INT 70
5435: PPUSH
5436: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5440: LD_EXP 8
5444: PPUSH
5445: LD_STRING D4-Mikh-1
5447: PPUSH
5448: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5452: LD_VAR 0 1
5456: PUSH
5457: LD_INT 1
5459: ARRAY
5460: PPUSH
5461: CALL_OW 258
5465: PUSH
5466: LD_INT 1
5468: EQUAL
5469: IFFALSE 5487
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5471: LD_VAR 0 1
5475: PUSH
5476: LD_INT 1
5478: ARRAY
5479: PPUSH
5480: LD_STRING D4-Sol1-1
5482: PPUSH
5483: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 1
5494: ARRAY
5495: PPUSH
5496: CALL_OW 258
5500: PUSH
5501: LD_INT 2
5503: EQUAL
5504: IFFALSE 5522
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5506: LD_VAR 0 1
5510: PUSH
5511: LD_INT 1
5513: ARRAY
5514: PPUSH
5515: LD_STRING D4-FSol1-1
5517: PPUSH
5518: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5522: LD_EXP 8
5526: PPUSH
5527: LD_STRING D4-Mikh-2
5529: PPUSH
5530: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5534: LD_VAR 0 1
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PPUSH
5543: CALL_OW 258
5547: PUSH
5548: LD_INT 1
5550: EQUAL
5551: IFFALSE 5569
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5553: LD_VAR 0 1
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_STRING D4-Sol1-2
5564: PPUSH
5565: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5569: LD_VAR 0 1
5573: PUSH
5574: LD_INT 1
5576: ARRAY
5577: PPUSH
5578: CALL_OW 258
5582: PUSH
5583: LD_INT 2
5585: EQUAL
5586: IFFALSE 5604
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5588: LD_VAR 0 1
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: LD_STRING D4-FSol1-2
5599: PPUSH
5600: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5604: LD_EXP 8
5608: PPUSH
5609: LD_STRING D4-Mikh-3
5611: PPUSH
5612: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: CALL_OW 258
5629: PUSH
5630: LD_INT 1
5632: EQUAL
5633: IFFALSE 5651
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: LD_STRING D4-Sol1-3
5646: PPUSH
5647: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5651: LD_VAR 0 1
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: CALL_OW 258
5664: PUSH
5665: LD_INT 2
5667: EQUAL
5668: IFFALSE 5686
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5670: LD_VAR 0 1
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: LD_STRING D4-FSol1-3
5681: PPUSH
5682: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5686: LD_EXP 8
5690: PPUSH
5691: LD_STRING D4-Mikh-4
5693: PPUSH
5694: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5698: LD_STRING Qs1
5700: PPUSH
5701: CALL_OW 97
5705: PUSH
5706: LD_INT 1
5708: DOUBLE
5709: EQUAL
5710: IFTRUE 5714
5712: GO 5749
5714: POP
// begin InGameOff ;
5715: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5719: LD_INT 1
5721: PPUSH
5722: LD_INT 6
5724: PPUSH
5725: LD_INT 2
5727: PPUSH
5728: LD_INT 1
5730: PPUSH
5731: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_INT 17
5742: PPUSH
5743: CALL_OW 113
// end ; 2 :
5747: GO 6342
5749: LD_INT 2
5751: DOUBLE
5752: EQUAL
5753: IFTRUE 5757
5755: GO 6307
5757: POP
// begin repeat wait ( 0 0$1 ) ;
5758: LD_INT 35
5760: PPUSH
5761: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5765: LD_VAR 0 1
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: PPUSH
5774: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5778: LD_VAR 0 1
5782: PUSH
5783: LD_INT 1
5785: ARRAY
5786: PPUSH
5787: LD_EXP 1
5791: PPUSH
5792: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5796: LD_EXP 8
5800: PPUSH
5801: LD_EXP 1
5805: PPUSH
5806: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5810: LD_EXP 1
5814: PPUSH
5815: LD_EXP 8
5819: PPUSH
5820: CALL_OW 296
5824: PUSH
5825: LD_INT 5
5827: LESS
5828: IFFALSE 5758
// ComTurnUnit ( Mikhail , JMM ) ;
5830: LD_EXP 8
5834: PPUSH
5835: LD_EXP 1
5839: PPUSH
5840: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5844: LD_EXP 1
5848: PPUSH
5849: LD_STRING D4b-JMM-1
5851: PPUSH
5852: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5856: LD_EXP 8
5860: PPUSH
5861: LD_STRING D4b-Mikh-1
5863: PPUSH
5864: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5868: LD_EXP 1
5872: PPUSH
5873: LD_STRING D4b-JMM-2
5875: PPUSH
5876: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5880: LD_EXP 8
5884: PPUSH
5885: LD_STRING D4b-Mikh-2
5887: PPUSH
5888: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5892: LD_EXP 1
5896: PPUSH
5897: LD_STRING D4b-JMM-3
5899: PPUSH
5900: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5904: LD_EXP 8
5908: PPUSH
5909: LD_STRING D4b-Mikh-3
5911: PPUSH
5912: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5916: LD_EXP 1
5920: PPUSH
5921: LD_STRING D4b-JMM-4
5923: PPUSH
5924: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5928: LD_EXP 8
5932: PPUSH
5933: LD_STRING D4b-Mikh-4
5935: PPUSH
5936: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5940: LD_EXP 1
5944: PPUSH
5945: LD_STRING D4b-JMM-5
5947: PPUSH
5948: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5952: LD_EXP 8
5956: PPUSH
5957: LD_STRING D4b-Mikh-5
5959: PPUSH
5960: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5964: LD_EXP 1
5968: PPUSH
5969: LD_STRING D4b-JMM-6
5971: PPUSH
5972: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5976: LD_EXP 8
5980: PPUSH
5981: LD_STRING D4b-Mikh-6
5983: PPUSH
5984: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5988: LD_EXP 1
5992: PPUSH
5993: LD_STRING D4b-JMM-7
5995: PPUSH
5996: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6000: LD_EXP 8
6004: PPUSH
6005: LD_STRING D4b-Mikh-7
6007: PPUSH
6008: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6012: LD_VAR 0 1
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: CALL_OW 258
6025: PUSH
6026: LD_INT 1
6028: EQUAL
6029: IFFALSE 6047
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6031: LD_VAR 0 1
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: LD_STRING D4b-Sol1-7
6042: PPUSH
6043: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6047: LD_VAR 0 1
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PPUSH
6056: CALL_OW 258
6060: PUSH
6061: LD_INT 2
6063: EQUAL
6064: IFFALSE 6082
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6066: LD_VAR 0 1
6070: PUSH
6071: LD_INT 1
6073: ARRAY
6074: PPUSH
6075: LD_STRING D4b-FSol1-7
6077: PPUSH
6078: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6082: LD_EXP 1
6086: PPUSH
6087: LD_STRING D4b-JMM-8
6089: PPUSH
6090: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6094: LD_VAR 0 1
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: CALL_OW 258
6107: PUSH
6108: LD_INT 1
6110: EQUAL
6111: IFFALSE 6129
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6113: LD_VAR 0 1
6117: PUSH
6118: LD_INT 1
6120: ARRAY
6121: PPUSH
6122: LD_STRING D4b-Sol1-8
6124: PPUSH
6125: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PPUSH
6138: CALL_OW 258
6142: PUSH
6143: LD_INT 2
6145: EQUAL
6146: IFFALSE 6164
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6148: LD_VAR 0 1
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_STRING D4b-FSol1-8
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6164: LD_EXP 1
6168: PPUSH
6169: LD_STRING D4b-JMM-9
6171: PPUSH
6172: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6176: LD_EXP 8
6180: PPUSH
6181: LD_INT 1
6183: PPUSH
6184: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6188: LD_ADDR_VAR 0 3
6192: PUSH
6193: LD_INT 22
6195: PUSH
6196: LD_INT 1
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: EMPTY
6204: LIST
6205: PPUSH
6206: CALL_OW 69
6210: PUSH
6211: FOR_IN
6212: IFFALSE 6225
// ComFree ( i ) ;
6214: LD_VAR 0 3
6218: PPUSH
6219: CALL_OW 139
6223: GO 6211
6225: POP
6226: POP
// repeat wait ( 0 0$1 ) ;
6227: LD_INT 35
6229: PPUSH
6230: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6234: LD_EXP 8
6238: PPUSH
6239: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6243: LD_EXP 8
6247: PUSH
6248: LD_VAR 0 1
6252: PUSH
6253: LD_INT 1
6255: ARRAY
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: LD_INT 1
6263: PPUSH
6264: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6268: LD_EXP 8
6272: PPUSH
6273: CALL_OW 310
6277: IFFALSE 6227
// mikhailDepot = IsInUnit ( Mikhail ) ;
6279: LD_ADDR_EXP 23
6283: PUSH
6284: LD_EXP 8
6288: PPUSH
6289: CALL_OW 310
6293: ST_TO_ADDR
// InGameOff ;
6294: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6298: LD_STRING M3
6300: PPUSH
6301: CALL_OW 337
// end ; 3 :
6305: GO 6342
6307: LD_INT 3
6309: DOUBLE
6310: EQUAL
6311: IFTRUE 6315
6313: GO 6341
6315: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6316: LD_EXP 8
6320: PPUSH
6321: LD_INT 17
6323: PPUSH
6324: CALL_OW 113
// wait ( 0 0$3 ) ;
6328: LD_INT 105
6330: PPUSH
6331: CALL_OW 67
// InGameOff ;
6335: CALL_OW 9
// end ; end ;
6339: GO 6342
6341: POP
// PrepareTigers ;
6342: CALL 15305 0 0
// RussianTrap ;
6346: CALL 10215 0 0
// tigersRespawn = 1 ;
6350: LD_ADDR_EXP 30
6354: PUSH
6355: LD_INT 1
6357: ST_TO_ADDR
// end ;
6358: PPOPN 3
6360: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6361: LD_INT 1
6363: PPUSH
6364: CALL_OW 255
6368: PUSH
6369: LD_INT 1
6371: EQUAL
6372: PUSH
6373: LD_INT 10
6375: PPUSH
6376: CALL_OW 255
6380: PUSH
6381: LD_INT 1
6383: EQUAL
6384: AND
6385: PUSH
6386: LD_INT 1
6388: PPUSH
6389: CALL_OW 274
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: CALL_OW 275
6401: PUSH
6402: LD_INT 100
6404: GREATEREQUAL
6405: AND
6406: IFFALSE 6555
6408: GO 6410
6410: DISABLE
6411: LD_INT 0
6413: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6414: LD_INT 2100
6416: PPUSH
6417: LD_INT 4200
6419: PPUSH
6420: CALL_OW 12
6424: PUSH
6425: LD_INT 1050
6427: PLUS
6428: PPUSH
6429: CALL_OW 67
// PrepareCargoBays ;
6433: CALL 13071 0 0
// cargoRespawn = 1 ;
6437: LD_ADDR_EXP 28
6441: PUSH
6442: LD_INT 1
6444: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6445: LD_ADDR_VAR 0 1
6449: PUSH
6450: LD_EXP 15
6454: PUSH
6455: LD_EXP 16
6459: PUSH
6460: LD_EXP 17
6464: PUSH
6465: LD_EXP 18
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6476: LD_VAR 0 1
6480: PPUSH
6481: LD_INT 17
6483: PPUSH
6484: LD_INT 10
6486: PPUSH
6487: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_INT 36
6498: PPUSH
6499: LD_INT 13
6501: PPUSH
6502: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6506: LD_VAR 0 1
6510: PPUSH
6511: LD_INT 40
6513: PPUSH
6514: LD_INT 20
6516: PPUSH
6517: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 53
6528: PPUSH
6529: LD_INT 16
6531: PPUSH
6532: CALL_OW 171
// wait ( 0 0$5 ) ;
6536: LD_INT 175
6538: PPUSH
6539: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6543: LD_EXP 17
6547: PPUSH
6548: LD_STRING D5-Rus2-1
6550: PPUSH
6551: CALL_OW 88
// end ;
6555: PPOPN 1
6557: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6558: LD_EXP 28
6562: PUSH
6563: LD_INT 1
6565: EQUAL
6566: IFFALSE 6721
6568: GO 6570
6570: DISABLE
6571: LD_INT 0
6573: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6574: LD_ADDR_VAR 0 1
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 34
6601: PUSH
6602: LD_INT 51
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6619: LD_INT 105
6621: PPUSH
6622: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6626: LD_VAR 0 1
6630: PPUSH
6631: LD_INT 3
6633: PUSH
6634: LD_INT 60
6636: PUSH
6637: EMPTY
6638: LIST
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PPUSH
6644: CALL_OW 72
6648: PUSH
6649: LD_VAR 0 1
6653: PPUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 24
6659: PUSH
6660: LD_INT 980
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PPUSH
6671: CALL_OW 72
6675: OR
6676: IFFALSE 6619
// ComMoveXY ( cargos , 7 , 9 ) ;
6678: LD_VAR 0 1
6682: PPUSH
6683: LD_INT 7
6685: PPUSH
6686: LD_INT 9
6688: PPUSH
6689: CALL_OW 111
// cargoSee = 1 ;
6693: LD_ADDR_EXP 29
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// cargoEscape = 1 ;
6701: LD_ADDR_EXP 20
6705: PUSH
6706: LD_INT 1
6708: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6709: LD_EXP 17
6713: PPUSH
6714: LD_STRING D5-Rus2-1a
6716: PPUSH
6717: CALL_OW 88
// end ;
6721: PPOPN 1
6723: END
// every 0 0$1 trigger cargoEscape and UnitFilter ( [ cargo1 , cargo2 ] , [ [ f_ok ] , [ f_side , 3 ] , [ f_placed ] ] ) do var cr , i , x , y ;
6724: LD_EXP 20
6728: PUSH
6729: LD_EXP 15
6733: PUSH
6734: LD_EXP 16
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PPUSH
6743: LD_INT 50
6745: PUSH
6746: EMPTY
6747: LIST
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_INT 3
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 52
6761: PUSH
6762: EMPTY
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: PPUSH
6770: CALL_OW 72
6774: AND
6775: IFFALSE 7108
6777: GO 6779
6779: DISABLE
6780: LD_INT 0
6782: PPUSH
6783: PPUSH
6784: PPUSH
6785: PPUSH
// begin enable ;
6786: ENABLE
// for i in [ cargo1 , cargo2 ] do
6787: LD_ADDR_VAR 0 2
6791: PUSH
6792: LD_EXP 15
6796: PUSH
6797: LD_EXP 16
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: FOR_IN
6807: IFFALSE 7106
// begin cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
6809: LD_ADDR_VAR 0 1
6813: PUSH
6814: LD_VAR 0 2
6818: PPUSH
6819: CALL_OW 250
6823: PPUSH
6824: LD_VAR 0 2
6828: PPUSH
6829: CALL_OW 251
6833: PPUSH
6834: LD_INT 6
6836: PPUSH
6837: CALL 76413 0 3
6841: ST_TO_ADDR
// if cr and GetMultiCargo ( i ) [ 4 ] < 60 then
6842: LD_VAR 0 1
6846: PUSH
6847: LD_VAR 0 2
6851: PPUSH
6852: CALL 77632 0 1
6856: PUSH
6857: LD_INT 4
6859: ARRAY
6860: PUSH
6861: LD_INT 60
6863: LESS
6864: AND
6865: IFFALSE 6904
// ComCollect ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
6867: LD_VAR 0 2
6871: PPUSH
6872: LD_VAR 0 1
6876: PUSH
6877: LD_INT 1
6879: ARRAY
6880: PUSH
6881: LD_INT 1
6883: ARRAY
6884: PPUSH
6885: LD_VAR 0 1
6889: PUSH
6890: LD_INT 1
6892: ARRAY
6893: PUSH
6894: LD_INT 2
6896: ARRAY
6897: PPUSH
6898: CALL_OW 117
6902: GO 7104
// if not IsInArea ( i , RemoveArea ) then
6904: LD_VAR 0 2
6908: PPUSH
6909: LD_INT 32
6911: PPUSH
6912: CALL_OW 308
6916: NOT
6917: IFFALSE 7065
// begin x := ShiftX ( GetX ( i ) , 4 , 3 ) ;
6919: LD_ADDR_VAR 0 3
6923: PUSH
6924: LD_VAR 0 2
6928: PPUSH
6929: CALL_OW 250
6933: PPUSH
6934: LD_INT 4
6936: PPUSH
6937: LD_INT 3
6939: PPUSH
6940: CALL_OW 272
6944: ST_TO_ADDR
// y := GetY ( i ) ;
6945: LD_ADDR_VAR 0 4
6949: PUSH
6950: LD_VAR 0 2
6954: PPUSH
6955: CALL_OW 251
6959: ST_TO_ADDR
// if HexInfo ( x , y ) then
6960: LD_VAR 0 3
6964: PPUSH
6965: LD_VAR 0 4
6969: PPUSH
6970: CALL_OW 428
6974: IFFALSE 6997
// x := ShiftX ( x , 4 , 3 ) ;
6976: LD_ADDR_VAR 0 3
6980: PUSH
6981: LD_VAR 0 3
6985: PPUSH
6986: LD_INT 4
6988: PPUSH
6989: LD_INT 3
6991: PPUSH
6992: CALL_OW 272
6996: ST_TO_ADDR
// if HexInfo ( x , y ) or not ValidHex ( x , y ) then
6997: LD_VAR 0 3
7001: PPUSH
7002: LD_VAR 0 4
7006: PPUSH
7007: CALL_OW 428
7011: PUSH
7012: LD_VAR 0 3
7016: PPUSH
7017: LD_VAR 0 4
7021: PPUSH
7022: CALL_OW 488
7026: NOT
7027: OR
7028: IFFALSE 7044
// ComMoveToArea ( i , RemoveArea ) else
7030: LD_VAR 0 2
7034: PPUSH
7035: LD_INT 32
7037: PPUSH
7038: CALL_OW 113
7042: GO 7063
// ComMoveXY ( i , x , y ) ;
7044: LD_VAR 0 2
7048: PPUSH
7049: LD_VAR 0 3
7053: PPUSH
7054: LD_VAR 0 4
7058: PPUSH
7059: CALL_OW 111
// end else
7063: GO 7104
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
7065: LD_VAR 0 2
7069: PPUSH
7070: CALL_OW 311
7074: PPUSH
7075: CALL_OW 64
// RemoveUnit ( i ) ;
7079: LD_VAR 0 2
7083: PPUSH
7084: CALL_OW 64
// cargoEscape := cargoEscape + 1 ;
7088: LD_ADDR_EXP 20
7092: PUSH
7093: LD_EXP 20
7097: PUSH
7098: LD_INT 1
7100: PLUS
7101: ST_TO_ADDR
// continue ;
7102: GO 6806
// end ; end ;
7104: GO 6806
7106: POP
7107: POP
// end ;
7108: PPOPN 4
7110: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
7111: LD_EXP 20
7115: PUSH
7116: LD_INT 1
7118: GREATER
7119: IFFALSE 7368
7121: GO 7123
7123: DISABLE
7124: LD_INT 0
7126: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
7127: LD_INT 4
7129: PPUSH
7130: LD_INT 1
7132: PPUSH
7133: LD_INT 1
7135: PPUSH
7136: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7140: LD_INT 31
7142: PPUSH
7143: LD_INT 1
7145: PPUSH
7146: LD_INT 1
7148: PPUSH
7149: CALL_OW 324
// Hint ( Bunker ) ;
7153: LD_STRING Bunker
7155: PPUSH
7156: CALL_OW 339
// if IsOK ( Jerry ) then
7160: LD_EXP 7
7164: PPUSH
7165: CALL_OW 302
7169: IFFALSE 7185
// Say ( Jerry , D5a-Sol1-1 ) else
7171: LD_EXP 7
7175: PPUSH
7176: LD_STRING D5a-Sol1-1
7178: PPUSH
7179: CALL_OW 88
7183: GO 7271
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
7185: LD_ADDR_VAR 0 1
7189: PUSH
7190: LD_INT 22
7192: PUSH
7193: LD_INT 1
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 26
7202: PUSH
7203: LD_INT 1
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: PUSH
7219: LD_EXP 1
7223: PUSH
7224: LD_EXP 2
7228: PUSH
7229: LD_EXP 3
7233: PUSH
7234: LD_EXP 5
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: DIFF
7245: ST_TO_ADDR
// if not speaker then
7246: LD_VAR 0 1
7250: NOT
7251: IFFALSE 7255
// exit ;
7253: GO 7368
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7255: LD_VAR 0 1
7259: PUSH
7260: LD_INT 1
7262: ARRAY
7263: PPUSH
7264: LD_STRING D5a-Sol1-1
7266: PPUSH
7267: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7271: LD_EXP 1
7275: PPUSH
7276: LD_STRING D5a-JMM-1
7278: PPUSH
7279: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7283: LD_INT 22
7285: PPUSH
7286: LD_INT 22
7288: PUSH
7289: LD_INT 1
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 25
7298: PUSH
7299: LD_INT 2
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PPUSH
7310: CALL_OW 70
7314: IFFALSE 7368
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7316: LD_INT 22
7318: PPUSH
7319: LD_INT 22
7321: PUSH
7322: LD_INT 1
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 25
7331: PUSH
7332: LD_INT 2
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL_OW 70
7347: PUSH
7348: LD_INT 1
7350: ARRAY
7351: PPUSH
7352: LD_INT 31
7354: PPUSH
7355: LD_INT 44
7357: PPUSH
7358: LD_INT 13
7360: PPUSH
7361: LD_INT 1
7363: PPUSH
7364: CALL_OW 145
// end ;
7368: PPOPN 1
7370: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7371: LD_INT 1
7373: PPUSH
7374: CALL_OW 255
7378: PUSH
7379: LD_INT 3
7381: EQUAL
7382: PUSH
7383: LD_INT 1
7385: PPUSH
7386: CALL_OW 256
7390: PUSH
7391: LD_INT 1000
7393: LESS
7394: AND
7395: PUSH
7396: LD_INT 10
7398: PPUSH
7399: CALL_OW 255
7403: PUSH
7404: LD_INT 3
7406: EQUAL
7407: PUSH
7408: LD_INT 10
7410: PPUSH
7411: CALL_OW 256
7415: PUSH
7416: LD_INT 1000
7418: LESS
7419: AND
7420: OR
7421: IFFALSE 7438
7423: GO 7425
7425: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7426: LD_EXP 1
7430: PPUSH
7431: LD_STRING D8-JMM-1
7433: PPUSH
7434: CALL_OW 88
7438: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7439: LD_EXP 8
7443: PPUSH
7444: CALL_OW 310
7448: PUSH
7449: LD_INT 1
7451: EQUAL
7452: PUSH
7453: LD_EXP 22
7457: PUSH
7458: LD_INT 3
7460: EQUAL
7461: NOT
7462: AND
7463: IFFALSE 7485
7465: GO 7467
7467: DISABLE
// begin enable ;
7468: ENABLE
// mikhailInBase = 1 ;
7469: LD_ADDR_EXP 22
7473: PUSH
7474: LD_INT 1
7476: ST_TO_ADDR
// mikhailStatus = 1 ;
7477: LD_ADDR_EXP 21
7481: PUSH
7482: LD_INT 1
7484: ST_TO_ADDR
// end ;
7485: END
// export function AskMikhail ; begin
7486: LD_INT 0
7488: PPUSH
// case Query ( QMikh2 ) of 1 :
7489: LD_STRING QMikh2
7491: PPUSH
7492: CALL_OW 97
7496: PUSH
7497: LD_INT 1
7499: DOUBLE
7500: EQUAL
7501: IFTRUE 7505
7503: GO 7572
7505: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7506: LD_INT 1
7508: PPUSH
7509: LD_INT 6
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: LD_INT 1
7517: PPUSH
7518: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7522: LD_EXP 8
7526: PPUSH
7527: LD_INT 6
7529: PPUSH
7530: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7534: LD_EXP 8
7538: PPUSH
7539: CALL_OW 122
// wait ( 0 0$1 ) ;
7543: LD_INT 35
7545: PPUSH
7546: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7550: LD_EXP 8
7554: PPUSH
7555: LD_INT 17
7557: PPUSH
7558: CALL_OW 113
// mikhailInbase = 0 ;
7562: LD_ADDR_EXP 22
7566: PUSH
7567: LD_INT 0
7569: ST_TO_ADDR
// end ; 2 :
7570: GO 7813
7572: LD_INT 2
7574: DOUBLE
7575: EQUAL
7576: IFTRUE 7580
7578: GO 7753
7580: POP
// begin mikhailInBase = 2 ;
7581: LD_ADDR_EXP 22
7585: PUSH
7586: LD_INT 2
7588: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7589: LD_EXP 8
7593: PPUSH
7594: LD_INT 6
7596: PPUSH
7597: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7601: LD_EXP 8
7605: PPUSH
7606: CALL_OW 122
// wait ( 0 0$1 ) ;
7610: LD_INT 35
7612: PPUSH
7613: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7617: LD_EXP 8
7621: PPUSH
7622: LD_EXP 8
7626: PPUSH
7627: CALL_OW 250
7631: PUSH
7632: LD_INT 2
7634: PLUS
7635: PPUSH
7636: LD_EXP 8
7640: PPUSH
7641: CALL_OW 251
7645: PUSH
7646: LD_INT 2
7648: PLUS
7649: PPUSH
7650: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7654: LD_EXP 8
7658: PPUSH
7659: LD_EXP 8
7663: PPUSH
7664: CALL_OW 250
7668: PUSH
7669: LD_INT 1
7671: PLUS
7672: PPUSH
7673: LD_EXP 8
7677: PPUSH
7678: CALL_OW 251
7682: PUSH
7683: LD_INT 2
7685: PLUS
7686: PPUSH
7687: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7691: LD_EXP 8
7695: PPUSH
7696: LD_EXP 8
7700: PPUSH
7701: CALL_OW 250
7705: PUSH
7706: LD_INT 2
7708: PLUS
7709: PPUSH
7710: LD_EXP 8
7714: PPUSH
7715: CALL_OW 251
7719: PPUSH
7720: CALL_OW 171
// wait ( 0 0$5 ) ;
7724: LD_INT 175
7726: PPUSH
7727: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7731: LD_EXP 8
7735: PPUSH
7736: LD_INT 25
7738: PPUSH
7739: CALL_OW 113
// mikhailInBase = 4 ;
7743: LD_ADDR_EXP 22
7747: PUSH
7748: LD_INT 4
7750: ST_TO_ADDR
// end ; 3 :
7751: GO 7813
7753: LD_INT 3
7755: DOUBLE
7756: EQUAL
7757: IFTRUE 7761
7759: GO 7812
7761: POP
// begin SetSide ( Mikhail , 6 ) ;
7762: LD_EXP 8
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7774: LD_EXP 8
7778: PPUSH
7779: CALL_OW 122
// wait ( 0 0$1 ) ;
7783: LD_INT 35
7785: PPUSH
7786: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7790: LD_EXP 8
7794: PPUSH
7795: LD_INT 17
7797: PPUSH
7798: CALL_OW 113
// mikhailInbase = 3 ;
7802: LD_ADDR_EXP 22
7806: PUSH
7807: LD_INT 3
7809: ST_TO_ADDR
// end ; end ;
7810: GO 7813
7812: POP
// end ;
7813: LD_VAR 0 1
7817: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7818: LD_EXP 8
7822: PPUSH
7823: LD_INT 25
7825: PPUSH
7826: CALL_OW 308
7830: PUSH
7831: LD_EXP 22
7835: PUSH
7836: LD_INT 4
7838: EQUAL
7839: AND
7840: IFFALSE 7944
7842: GO 7844
7844: DISABLE
// begin enable ;
7845: ENABLE
// mikhailInBase = 1 ;
7846: LD_ADDR_EXP 22
7850: PUSH
7851: LD_INT 1
7853: ST_TO_ADDR
// InGameOn ;
7854: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7858: LD_INT 1
7860: PPUSH
7861: LD_INT 6
7863: PPUSH
7864: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7868: LD_INT 35
7870: PPUSH
7871: CALL_OW 67
// if Carry ( Mikhail ) then
7875: LD_EXP 8
7879: PPUSH
7880: CALL_OW 281
7884: IFFALSE 7895
// ComUnload ( Mikhail ) ;
7886: LD_EXP 8
7890: PPUSH
7891: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7895: LD_EXP 8
7899: PPUSH
7900: LD_INT 1
7902: PPUSH
7903: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7907: LD_EXP 8
7911: PPUSH
7912: CALL_OW 310
7916: IFFALSE 7868
// SetSide ( dep1 , 1 ) ;
7918: LD_INT 1
7920: PPUSH
7921: LD_INT 1
7923: PPUSH
7924: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7928: LD_EXP 8
7932: PPUSH
7933: LD_INT 1
7935: PPUSH
7936: CALL_OW 235
// InGameOff ;
7940: CALL_OW 9
// end ;
7944: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7945: LD_EXP 8
7949: PPUSH
7950: CALL_OW 310
7954: PUSH
7955: LD_EXP 22
7959: PUSH
7960: LD_INT 3
7962: EQUAL
7963: NOT
7964: AND
7965: IFFALSE 8100
7967: GO 7969
7969: DISABLE
// begin enable ;
7970: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7971: LD_INT 22
7973: PUSH
7974: LD_INT 1
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 21
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 91
7993: PUSH
7994: LD_EXP 8
7998: PPUSH
7999: CALL_OW 310
8003: PUSH
8004: LD_INT 10
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: PPUSH
8017: CALL_OW 69
8021: PUSH
8022: LD_INT 1
8024: EQUAL
8025: IFFALSE 8100
// begin mikhailStatus = 4 ;
8027: LD_ADDR_EXP 21
8031: PUSH
8032: LD_INT 4
8034: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
8035: LD_INT 1
8037: PPUSH
8038: LD_INT 6
8040: PPUSH
8041: LD_INT 2
8043: PPUSH
8044: LD_INT 1
8046: PPUSH
8047: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
8051: LD_EXP 8
8055: PPUSH
8056: LD_INT 6
8058: PPUSH
8059: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
8063: LD_EXP 8
8067: PPUSH
8068: CALL_OW 122
// wait ( 0 0$1 ) ;
8072: LD_INT 35
8074: PPUSH
8075: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
8079: LD_EXP 8
8083: PPUSH
8084: LD_INT 17
8086: PPUSH
8087: CALL_OW 113
// mikhailStatus = 3 ;
8091: LD_ADDR_EXP 21
8095: PUSH
8096: LD_INT 3
8098: ST_TO_ADDR
// disable ;
8099: DISABLE
// end ; end ;
8100: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
8101: LD_EXP 1
8105: PPUSH
8106: LD_EXP 23
8110: PPUSH
8111: CALL_OW 296
8115: PUSH
8116: LD_INT 5
8118: LESS
8119: PUSH
8120: LD_EXP 21
8124: PUSH
8125: LD_INT 3
8127: EQUAL
8128: AND
8129: PUSH
8130: LD_EXP 22
8134: PUSH
8135: LD_INT 3
8137: EQUAL
8138: NOT
8139: AND
8140: IFFALSE 8371
8142: GO 8144
8144: DISABLE
8145: LD_INT 0
8147: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
8148: LD_ADDR_VAR 0 1
8152: PUSH
8153: LD_INT 22
8155: PUSH
8156: LD_INT 1
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 21
8165: PUSH
8166: LD_INT 1
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 26
8175: PUSH
8176: LD_INT 1
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: PPUSH
8188: CALL_OW 69
8192: PUSH
8193: LD_EXP 1
8197: PUSH
8198: LD_EXP 5
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: DIFF
8207: ST_TO_ADDR
// if not tmp then
8208: LD_VAR 0 1
8212: NOT
8213: IFFALSE 8217
// exit ;
8215: GO 8371
// DialogueOn ;
8217: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
8221: LD_EXP 1
8225: PPUSH
8226: LD_STRING D7-JMM-1
8228: PPUSH
8229: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8233: LD_VAR 0 1
8237: PUSH
8238: LD_INT 1
8240: ARRAY
8241: PPUSH
8242: LD_STRING D7-Sol1-1
8244: PPUSH
8245: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8249: LD_EXP 1
8253: PPUSH
8254: LD_STRING D7-JMM-2
8256: PPUSH
8257: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8261: LD_VAR 0 1
8265: PUSH
8266: LD_INT 1
8268: ARRAY
8269: PPUSH
8270: LD_STRING D7-Sol1-2
8272: PPUSH
8273: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8277: LD_EXP 1
8281: PPUSH
8282: LD_STRING D7-JMM-3
8284: PPUSH
8285: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8289: LD_VAR 0 1
8293: PUSH
8294: LD_INT 1
8296: ARRAY
8297: PPUSH
8298: LD_STRING D7-Sol1-3
8300: PPUSH
8301: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8305: LD_EXP 3
8309: PPUSH
8310: CALL_OW 302
8314: PUSH
8315: LD_EXP 4
8319: PPUSH
8320: CALL_OW 302
8324: AND
8325: IFFALSE 8367
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8327: LD_EXP 3
8331: PPUSH
8332: LD_STRING D7-Cyrus-3
8334: PPUSH
8335: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8339: LD_VAR 0 1
8343: PUSH
8344: LD_INT 1
8346: ARRAY
8347: PPUSH
8348: LD_STRING D7-Sol1-4
8350: PPUSH
8351: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8355: LD_EXP 4
8359: PPUSH
8360: LD_STRING D7-Lisa-4
8362: PPUSH
8363: CALL_OW 88
// end ; DialogueOff ;
8367: CALL_OW 7
// end ;
8371: PPOPN 1
8373: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8374: LD_EXP 8
8378: PPUSH
8379: CALL_OW 303
8383: PUSH
8384: LD_EXP 21
8388: PUSH
8389: LD_INT 3
8391: EQUAL
8392: AND
8393: IFFALSE 8407
8395: GO 8397
8397: DISABLE
// begin enable ;
8398: ENABLE
// mikhailStatus = 2 ;
8399: LD_ADDR_EXP 21
8403: PUSH
8404: LD_INT 2
8406: ST_TO_ADDR
// end ;
8407: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8408: LD_EXP 8
8412: PPUSH
8413: LD_INT 17
8415: PPUSH
8416: CALL_OW 308
8420: PUSH
8421: LD_EXP 8
8425: PPUSH
8426: CALL_OW 255
8430: PUSH
8431: LD_INT 6
8433: EQUAL
8434: AND
8435: IFFALSE 8468
8437: GO 8439
8439: DISABLE
// begin if not mikhailInBase = 3 then
8440: LD_EXP 22
8444: PUSH
8445: LD_INT 3
8447: EQUAL
8448: NOT
8449: IFFALSE 8459
// mikhailStatus = 3 ;
8451: LD_ADDR_EXP 21
8455: PUSH
8456: LD_INT 3
8458: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8459: LD_EXP 8
8463: PPUSH
8464: CALL_OW 64
// end ;
8468: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8469: LD_EXP 21
8473: PUSH
8474: LD_INT 3
8476: EQUAL
8477: PUSH
8478: LD_EXP 8
8482: PPUSH
8483: CALL_OW 255
8487: PUSH
8488: LD_INT 6
8490: EQUAL
8491: AND
8492: IFFALSE 8658
8494: GO 8496
8496: DISABLE
8497: LD_INT 0
8499: PPUSH
8500: PPUSH
// begin enable ;
8501: ENABLE
// if IsOk ( Mikhail ) then
8502: LD_EXP 8
8506: PPUSH
8507: CALL_OW 302
8511: IFFALSE 8658
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8513: LD_ADDR_VAR 0 2
8517: PUSH
8518: LD_EXP 8
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 1
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 21
8535: PUSH
8536: LD_INT 1
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PPUSH
8547: CALL_OW 69
8551: PPUSH
8552: CALL 10407 0 2
8556: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8557: LD_VAR 0 2
8561: PPUSH
8562: LD_EXP 8
8566: PPUSH
8567: CALL_OW 296
8571: PUSH
8572: LD_INT 8
8574: LESS
8575: IFFALSE 8658
// begin if GetSex ( attacker ) = sex_male then
8577: LD_VAR 0 2
8581: PPUSH
8582: CALL_OW 258
8586: PUSH
8587: LD_INT 1
8589: EQUAL
8590: IFFALSE 8626
// begin disable ;
8592: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8593: LD_VAR 0 2
8597: PPUSH
8598: LD_STRING D7a-Sol1-1
8600: PPUSH
8601: CALL_OW 88
// wait ( 0 0$2 ) ;
8605: LD_INT 70
8607: PPUSH
8608: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8612: LD_VAR 0 2
8616: PPUSH
8617: LD_STRING D7a-Sol1-1a
8619: PPUSH
8620: CALL_OW 88
// end else
8624: GO 8658
// begin disable ;
8626: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8627: LD_VAR 0 2
8631: PPUSH
8632: LD_STRING D7a-FSol1-1
8634: PPUSH
8635: CALL_OW 88
// wait ( 0 0$2 ) ;
8639: LD_INT 70
8641: PPUSH
8642: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8646: LD_VAR 0 2
8650: PPUSH
8651: LD_STRING D7a-FSol1-1a
8653: PPUSH
8654: CALL_OW 88
// end ; end ; end ; end ;
8658: PPOPN 2
8660: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8661: LD_EXP 27
8665: PUSH
8666: LD_INT 1
8668: EQUAL
8669: PUSH
8670: LD_INT 22
8672: PPUSH
8673: LD_INT 22
8675: PUSH
8676: LD_INT 3
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 21
8685: PUSH
8686: LD_INT 1
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PPUSH
8697: CALL_OW 70
8701: PUSH
8702: LD_INT 2
8704: GREATER
8705: AND
8706: PUSH
8707: LD_INT 22
8709: PPUSH
8710: LD_INT 22
8712: PUSH
8713: LD_INT 1
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: LD_INT 2
8722: PUSH
8723: LD_INT 21
8725: PUSH
8726: LD_INT 1
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PUSH
8733: LD_INT 59
8735: PUSH
8736: EMPTY
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: LIST
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PPUSH
8748: CALL_OW 70
8752: PUSH
8753: LD_INT 0
8755: EQUAL
8756: AND
8757: IFFALSE 8772
8759: GO 8761
8761: DISABLE
// SetSide ( dep1 , 3 ) ;
8762: LD_INT 1
8764: PPUSH
8765: LD_INT 3
8767: PPUSH
8768: CALL_OW 235
8772: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8773: LD_EXP 30
8777: PUSH
8778: LD_INT 1
8780: EQUAL
8781: PUSH
8782: LD_INT 22
8784: PUSH
8785: LD_INT 0
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: LD_INT 25
8794: PUSH
8795: LD_INT 14
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PPUSH
8806: CALL_OW 69
8810: PUSH
8811: LD_INT 0
8813: EQUAL
8814: AND
8815: IFFALSE 8916
8817: GO 8819
8819: DISABLE
8820: LD_INT 0
8822: PPUSH
8823: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: LD_INT 22
8831: PUSH
8832: LD_INT 1
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PUSH
8839: LD_INT 21
8841: PUSH
8842: LD_INT 1
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: PUSH
8849: LD_INT 23
8851: PUSH
8852: LD_INT 1
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: LIST
8863: PPUSH
8864: CALL_OW 69
8868: ST_TO_ADDR
// for i in tmp do
8869: LD_ADDR_VAR 0 1
8873: PUSH
8874: LD_VAR 0 2
8878: PUSH
8879: FOR_IN
8880: IFFALSE 8907
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8882: LD_VAR 0 1
8886: PPUSH
8887: LD_INT 1
8889: PPUSH
8890: LD_INT 4
8892: PPUSH
8893: CALL_OW 12
8897: PPUSH
8898: LD_INT 300
8900: PPUSH
8901: CALL_OW 492
8905: GO 8879
8907: POP
8908: POP
// SetAchievement ( ACH_TIGER ) ;
8909: LD_STRING ACH_TIGER
8911: PPUSH
8912: CALL_OW 543
// end ;
8916: PPOPN 2
8918: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8919: LD_INT 22
8921: PUSH
8922: LD_INT 1
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 34
8931: PUSH
8932: LD_INT 51
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 69
8947: PUSH
8948: LD_INT 2
8950: GREATEREQUAL
8951: IFFALSE 8963
8953: GO 8955
8955: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8956: LD_STRING ACH_CARGO
8958: PPUSH
8959: CALL_OW 543
8963: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
8964: LD_INT 0
8966: PPUSH
8967: PPUSH
8968: PPUSH
// for i = 1 to count do
8969: LD_ADDR_VAR 0 8
8973: PUSH
8974: DOUBLE
8975: LD_INT 1
8977: DEC
8978: ST_TO_ADDR
8979: LD_VAR 0 6
8983: PUSH
8984: FOR_TO
8985: IFFALSE 9066
// begin uc_side = side ;
8987: LD_ADDR_OWVAR 20
8991: PUSH
8992: LD_VAR 0 1
8996: ST_TO_ADDR
// uc_nation = nation ;
8997: LD_ADDR_OWVAR 21
9001: PUSH
9002: LD_VAR 0 2
9006: ST_TO_ADDR
// hc_gallery =  ;
9007: LD_ADDR_OWVAR 33
9011: PUSH
9012: LD_STRING 
9014: ST_TO_ADDR
// hc_name =  ;
9015: LD_ADDR_OWVAR 26
9019: PUSH
9020: LD_STRING 
9022: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
9023: LD_INT 0
9025: PPUSH
9026: LD_VAR 0 5
9030: PPUSH
9031: LD_VAR 0 4
9035: PPUSH
9036: CALL_OW 380
// un = CreateHuman ;
9040: LD_ADDR_VAR 0 9
9044: PUSH
9045: CALL_OW 44
9049: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
9050: LD_VAR 0 9
9054: PPUSH
9055: LD_VAR 0 3
9059: PPUSH
9060: CALL_OW 52
// end ;
9064: GO 8984
9066: POP
9067: POP
// end ;
9068: LD_VAR 0 7
9072: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
9073: LD_INT 0
9075: PPUSH
9076: PPUSH
9077: PPUSH
// uc_side := GetSide ( b ) ;
9078: LD_ADDR_OWVAR 20
9082: PUSH
9083: LD_VAR 0 2
9087: PPUSH
9088: CALL_OW 255
9092: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
9093: LD_ADDR_OWVAR 21
9097: PUSH
9098: LD_VAR 0 2
9102: PPUSH
9103: CALL_OW 248
9107: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
9108: LD_INT 0
9110: PPUSH
9111: LD_INT 1
9113: PPUSH
9114: LD_VAR 0 1
9118: PPUSH
9119: CALL_OW 380
// un = CreateHuman ;
9123: LD_ADDR_VAR 0 4
9127: PUSH
9128: CALL_OW 44
9132: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
9133: LD_ADDR_VAR 0 5
9137: PUSH
9138: LD_VAR 0 2
9142: PPUSH
9143: CALL_OW 254
9147: PUSH
9148: LD_INT 3
9150: MINUS
9151: ST_TO_ADDR
// if dir < 0 then
9152: LD_VAR 0 5
9156: PUSH
9157: LD_INT 0
9159: LESS
9160: IFFALSE 9176
// dir := 6 + dir ;
9162: LD_ADDR_VAR 0 5
9166: PUSH
9167: LD_INT 6
9169: PUSH
9170: LD_VAR 0 5
9174: PLUS
9175: ST_TO_ADDR
// SetDir ( un , dir ) ;
9176: LD_VAR 0 4
9180: PPUSH
9181: LD_VAR 0 5
9185: PPUSH
9186: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
9190: LD_VAR 0 4
9194: PPUSH
9195: LD_VAR 0 2
9199: PPUSH
9200: CALL_OW 52
// end ;
9204: LD_VAR 0 3
9208: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
9209: LD_INT 0
9211: PPUSH
9212: PPUSH
9213: PPUSH
9214: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
9215: LD_ADDR_VAR 0 7
9219: PUSH
9220: LD_INT 22
9222: PUSH
9223: LD_VAR 0 1
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 25
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 24
9244: PUSH
9245: LD_INT 1000
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: PPUSH
9257: CALL_OW 69
9261: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9262: LD_ADDR_VAR 0 5
9266: PUSH
9267: LD_VAR 0 3
9271: PPUSH
9272: LD_INT 22
9274: PUSH
9275: LD_VAR 0 1
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 21
9286: PUSH
9287: LD_INT 3
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 3
9296: PUSH
9297: LD_INT 24
9299: PUSH
9300: LD_INT 1000
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: PPUSH
9319: CALL_OW 70
9323: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9324: LD_VAR 0 5
9328: NOT
9329: PUSH
9330: LD_VAR 0 7
9334: NOT
9335: AND
9336: IFFALSE 9340
// exit ;
9338: GO 9536
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9340: LD_VAR 0 5
9344: NOT
9345: PUSH
9346: LD_VAR 0 7
9350: PPUSH
9351: LD_INT 3
9353: PUSH
9354: LD_INT 54
9356: PUSH
9357: EMPTY
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 72
9368: AND
9369: PUSH
9370: LD_VAR 0 2
9374: PPUSH
9375: CALL_OW 302
9379: AND
9380: IFFALSE 9414
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9382: LD_VAR 0 7
9386: PPUSH
9387: LD_INT 3
9389: PUSH
9390: LD_INT 54
9392: PUSH
9393: EMPTY
9394: LIST
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PPUSH
9400: CALL_OW 72
9404: PPUSH
9405: LD_VAR 0 2
9409: PPUSH
9410: CALL_OW 120
// if buildingsList then
9414: LD_VAR 0 5
9418: IFFALSE 9536
// begin for i in engineerOkList do
9420: LD_ADDR_VAR 0 6
9424: PUSH
9425: LD_VAR 0 7
9429: PUSH
9430: FOR_IN
9431: IFFALSE 9534
// if IsInUnit ( i ) then
9433: LD_VAR 0 6
9437: PPUSH
9438: CALL_OW 310
9442: IFFALSE 9455
// ComExitBuilding ( i ) else
9444: LD_VAR 0 6
9448: PPUSH
9449: CALL_OW 122
9453: GO 9532
// if GetLives ( i ) > 650 then
9455: LD_VAR 0 6
9459: PPUSH
9460: CALL_OW 256
9464: PUSH
9465: LD_INT 650
9467: GREATER
9468: IFFALSE 9496
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9470: LD_VAR 0 6
9474: PPUSH
9475: LD_VAR 0 5
9479: PPUSH
9480: LD_VAR 0 6
9484: PPUSH
9485: CALL_OW 74
9489: PPUSH
9490: CALL_OW 130
9494: GO 9532
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9496: LD_VAR 0 6
9500: PPUSH
9501: LD_INT 56
9503: PPUSH
9504: LD_INT 10
9506: PPUSH
9507: CALL_OW 297
9511: PUSH
9512: LD_INT 8
9514: GREATER
9515: IFFALSE 9532
// ComMoveXY ( i , 56 , 10 ) ;
9517: LD_VAR 0 6
9521: PPUSH
9522: LD_INT 56
9524: PPUSH
9525: LD_INT 10
9527: PPUSH
9528: CALL_OW 111
9532: GO 9430
9534: POP
9535: POP
// end ; end ;
9536: LD_VAR 0 4
9540: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9541: LD_INT 0
9543: PPUSH
9544: PPUSH
9545: PPUSH
9546: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9547: LD_ADDR_VAR 0 6
9551: PUSH
9552: LD_INT 22
9554: PUSH
9555: LD_VAR 0 1
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: LD_INT 25
9566: PUSH
9567: LD_INT 4
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 24
9576: PUSH
9577: LD_INT 250
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: LIST
9588: PPUSH
9589: CALL_OW 69
9593: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9594: LD_ADDR_VAR 0 8
9598: PUSH
9599: LD_VAR 0 3
9603: PPUSH
9604: LD_INT 22
9606: PUSH
9607: LD_VAR 0 1
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 21
9618: PUSH
9619: LD_INT 1
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 3
9628: PUSH
9629: LD_INT 24
9631: PUSH
9632: LD_INT 650
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: LIST
9647: PPUSH
9648: CALL_OW 70
9652: ST_TO_ADDR
// if not damageUnits and not sciList then
9653: LD_VAR 0 8
9657: NOT
9658: PUSH
9659: LD_VAR 0 6
9663: NOT
9664: AND
9665: IFFALSE 9669
// exit ;
9667: GO 9808
// if damageUnits then
9669: LD_VAR 0 8
9673: IFFALSE 9752
// begin for i in sciList do
9675: LD_ADDR_VAR 0 7
9679: PUSH
9680: LD_VAR 0 6
9684: PUSH
9685: FOR_IN
9686: IFFALSE 9748
// if IsInUnit ( i ) then
9688: LD_VAR 0 7
9692: PPUSH
9693: CALL_OW 310
9697: IFFALSE 9710
// ComExitBuilding ( i ) else
9699: LD_VAR 0 7
9703: PPUSH
9704: CALL_OW 122
9708: GO 9746
// if not HasTask ( i ) then
9710: LD_VAR 0 7
9714: PPUSH
9715: CALL_OW 314
9719: NOT
9720: IFFALSE 9746
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9722: LD_VAR 0 7
9726: PPUSH
9727: LD_VAR 0 8
9731: PPUSH
9732: LD_VAR 0 7
9736: PPUSH
9737: CALL_OW 74
9741: PPUSH
9742: CALL_OW 128
9746: GO 9685
9748: POP
9749: POP
// end else
9750: GO 9808
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9752: LD_VAR 0 6
9756: PPUSH
9757: LD_INT 3
9759: PUSH
9760: LD_INT 54
9762: PUSH
9763: EMPTY
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PPUSH
9770: CALL_OW 72
9774: IFFALSE 9808
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9776: LD_VAR 0 6
9780: PPUSH
9781: LD_INT 3
9783: PUSH
9784: LD_INT 54
9786: PUSH
9787: EMPTY
9788: LIST
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PPUSH
9794: CALL_OW 72
9798: PPUSH
9799: LD_VAR 0 4
9803: PPUSH
9804: CALL_OW 120
// end ;
9808: LD_VAR 0 5
9812: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9813: LD_INT 0
9815: PPUSH
9816: PPUSH
9817: PPUSH
9818: PPUSH
// if not defendersList then
9819: LD_VAR 0 3
9823: NOT
9824: IFFALSE 9828
// exit ;
9826: GO 10210
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9828: LD_ADDR_VAR 0 7
9832: PUSH
9833: LD_VAR 0 1
9837: PPUSH
9838: LD_INT 22
9840: PUSH
9841: LD_VAR 0 2
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 2
9852: PUSH
9853: LD_INT 21
9855: PUSH
9856: LD_INT 2
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: LD_INT 21
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: LIST
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 70
9886: ST_TO_ADDR
// if enemy then
9887: LD_VAR 0 7
9891: IFFALSE 10112
// begin for i in defendersList do
9893: LD_ADDR_VAR 0 6
9897: PUSH
9898: LD_VAR 0 3
9902: PUSH
9903: FOR_IN
9904: IFFALSE 10108
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
9906: LD_VAR 0 6
9910: PPUSH
9911: CALL_OW 310
9915: PUSH
9916: LD_VAR 0 6
9920: PPUSH
9921: CALL_OW 256
9925: PUSH
9926: LD_INT 500
9928: GREATER
9929: AND
9930: IFFALSE 9943
// ComExitBuilding ( i ) else
9932: LD_VAR 0 6
9936: PPUSH
9937: CALL_OW 122
9941: GO 10106
// if GetLives ( i ) > 650 then
9943: LD_VAR 0 6
9947: PPUSH
9948: CALL_OW 256
9952: PUSH
9953: LD_INT 650
9955: GREATER
9956: IFFALSE 10009
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
9958: LD_ADDR_VAR 0 8
9962: PUSH
9963: LD_VAR 0 7
9967: PPUSH
9968: LD_VAR 0 6
9972: PPUSH
9973: CALL_OW 74
9977: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
9978: LD_VAR 0 6
9982: PPUSH
9983: LD_VAR 0 8
9987: PPUSH
9988: CALL_OW 250
9992: PPUSH
9993: LD_VAR 0 8
9997: PPUSH
9998: CALL_OW 251
10002: PPUSH
10003: CALL_OW 114
// end else
10007: GO 10106
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
10009: LD_INT 22
10011: PUSH
10012: LD_INT 3
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 25
10021: PUSH
10022: LD_INT 4
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PPUSH
10033: CALL_OW 69
10037: IFFALSE 10077
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
10039: LD_VAR 0 6
10043: PPUSH
10044: LD_INT 56
10046: PPUSH
10047: LD_INT 10
10049: PPUSH
10050: CALL_OW 297
10054: PUSH
10055: LD_INT 8
10057: GREATER
10058: IFFALSE 10075
// ComMoveXY ( i , 56 , 10 ) ;
10060: LD_VAR 0 6
10064: PPUSH
10065: LD_INT 56
10067: PPUSH
10068: LD_INT 10
10070: PPUSH
10071: CALL_OW 111
// end else
10075: GO 10106
// if GetLives ( i ) <= 500 then
10077: LD_VAR 0 6
10081: PPUSH
10082: CALL_OW 256
10086: PUSH
10087: LD_INT 500
10089: LESSEQUAL
10090: IFFALSE 10106
// ComEnterUnit ( i , building ) ;
10092: LD_VAR 0 6
10096: PPUSH
10097: LD_VAR 0 4
10101: PPUSH
10102: CALL_OW 120
// end ;
10106: GO 9903
10108: POP
10109: POP
// end else
10110: GO 10210
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
10112: LD_VAR 0 3
10116: PPUSH
10117: LD_INT 56
10119: PUSH
10120: EMPTY
10121: LIST
10122: PUSH
10123: LD_INT 3
10125: PUSH
10126: LD_INT 60
10128: PUSH
10129: EMPTY
10130: LIST
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: LD_INT 24
10138: PUSH
10139: LD_INT 1000
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: LIST
10150: PPUSH
10151: CALL_OW 72
10155: IFFALSE 10210
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
10157: LD_VAR 0 3
10161: PPUSH
10162: LD_INT 56
10164: PUSH
10165: EMPTY
10166: LIST
10167: PUSH
10168: LD_INT 3
10170: PUSH
10171: LD_INT 60
10173: PUSH
10174: EMPTY
10175: LIST
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 24
10183: PUSH
10184: LD_INT 1000
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: LIST
10195: PPUSH
10196: CALL_OW 72
10200: PPUSH
10201: LD_VAR 0 4
10205: PPUSH
10206: CALL_OW 120
// end ;
10210: LD_VAR 0 5
10214: RET
// export function RussianTrap ; var i ; begin
10215: LD_INT 0
10217: PPUSH
10218: PPUSH
// if GetSide ( Brian ) = 4 then
10219: LD_EXP 6
10223: PPUSH
10224: CALL_OW 255
10228: PUSH
10229: LD_INT 4
10231: EQUAL
10232: IFFALSE 10255
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10234: LD_EXP 6
10238: PUSH
10239: LD_EXP 7
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PPUSH
10248: LD_INT 0
10250: PPUSH
10251: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10255: LD_ADDR_VAR 0 2
10259: PUSH
10260: LD_INT 22
10262: PUSH
10263: LD_INT 3
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 21
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PPUSH
10284: CALL_OW 69
10288: PUSH
10289: FOR_IN
10290: IFFALSE 10400
// begin ComExitBuilding ( i ) ;
10292: LD_VAR 0 2
10296: PPUSH
10297: CALL_OW 122
// wait ( 0 0$1 ) ;
10301: LD_INT 35
10303: PPUSH
10304: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10308: LD_VAR 0 2
10312: PPUSH
10313: LD_INT 120
10315: PPUSH
10316: LD_INT 56
10318: PPUSH
10319: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10323: LD_VAR 0 2
10327: PPUSH
10328: LD_INT 111
10330: PPUSH
10331: LD_INT 37
10333: PPUSH
10334: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10338: LD_INT 33
10340: PPUSH
10341: CALL_OW 255
10345: PUSH
10346: LD_INT 3
10348: EQUAL
10349: PUSH
10350: LD_INT 33
10352: PPUSH
10353: CALL_OW 302
10357: AND
10358: IFFALSE 10374
// AddComEnterUnit ( i , arm2 ) else
10360: LD_VAR 0 2
10364: PPUSH
10365: LD_INT 33
10367: PPUSH
10368: CALL_OW 180
10372: GO 10398
// begin AddComCrawl ( i ) ;
10374: LD_VAR 0 2
10378: PPUSH
10379: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10383: LD_VAR 0 2
10387: PPUSH
10388: LD_INT 109
10390: PPUSH
10391: LD_INT 30
10393: PPUSH
10394: CALL_OW 174
// end ; end ;
10398: GO 10289
10400: POP
10401: POP
// end ;
10402: LD_VAR 0 1
10406: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10407: LD_INT 0
10409: PPUSH
10410: PPUSH
10411: PPUSH
10412: PPUSH
10413: PPUSH
// nearestDist := 1000 ;
10414: LD_ADDR_VAR 0 4
10418: PUSH
10419: LD_INT 1000
10421: ST_TO_ADDR
// nearestUn := un ;
10422: LD_ADDR_VAR 0 5
10426: PUSH
10427: LD_VAR 0 1
10431: ST_TO_ADDR
// for sold in units do
10432: LD_ADDR_VAR 0 6
10436: PUSH
10437: LD_VAR 0 2
10441: PUSH
10442: FOR_IN
10443: IFFALSE 10499
// begin dist := GetDistUnits ( un , sold ) ;
10445: LD_ADDR_VAR 0 7
10449: PUSH
10450: LD_VAR 0 1
10454: PPUSH
10455: LD_VAR 0 6
10459: PPUSH
10460: CALL_OW 296
10464: ST_TO_ADDR
// if dist < nearestDist then
10465: LD_VAR 0 7
10469: PUSH
10470: LD_VAR 0 4
10474: LESS
10475: IFFALSE 10497
// begin nearestUn := sold ;
10477: LD_ADDR_VAR 0 5
10481: PUSH
10482: LD_VAR 0 6
10486: ST_TO_ADDR
// nearestDist := dist ;
10487: LD_ADDR_VAR 0 4
10491: PUSH
10492: LD_VAR 0 7
10496: ST_TO_ADDR
// end ; end ;
10497: GO 10442
10499: POP
10500: POP
// result := NearestUn ;
10501: LD_ADDR_VAR 0 3
10505: PUSH
10506: LD_VAR 0 5
10510: ST_TO_ADDR
// end ;
10511: LD_VAR 0 3
10515: RET
// export function PrepareDifficulty ; begin
10516: LD_INT 0
10518: PPUSH
// if Difficulty = 1 then
10519: LD_OWVAR 67
10523: PUSH
10524: LD_INT 1
10526: EQUAL
10527: IFFALSE 10590
// begin RemoveUnit ( brw2 ) ;
10529: LD_INT 9
10531: PPUSH
10532: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10536: LD_INT 30
10538: PPUSH
10539: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10543: LD_INT 52
10545: PPUSH
10546: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10550: LD_INT 63
10552: PPUSH
10553: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10557: LD_INT 5
10559: PUSH
10560: LD_INT 4
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PPUSH
10567: LD_INT 60
10569: PPUSH
10570: CALL_OW 240
// RuSoldMinLevel = 0 ;
10574: LD_ADDR_EXP 13
10578: PUSH
10579: LD_INT 0
10581: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10582: LD_ADDR_EXP 14
10586: PUSH
10587: LD_INT 1
10589: ST_TO_ADDR
// end ; if Difficulty = 2 then
10590: LD_OWVAR 67
10594: PUSH
10595: LD_INT 2
10597: EQUAL
10598: IFFALSE 10640
// begin RemoveUnit ( brw4 ) ;
10600: LD_INT 52
10602: PPUSH
10603: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10607: LD_INT 5
10609: PUSH
10610: LD_INT 4
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PPUSH
10617: LD_INT 50
10619: PPUSH
10620: CALL_OW 240
// RuSoldMinLevel = 1 ;
10624: LD_ADDR_EXP 13
10628: PUSH
10629: LD_INT 1
10631: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10632: LD_ADDR_EXP 14
10636: PUSH
10637: LD_INT 2
10639: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10640: LD_OWVAR 67
10644: PUSH
10645: LD_INT 3
10647: GREATEREQUAL
10648: IFFALSE 10683
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10650: LD_INT 5
10652: PUSH
10653: LD_INT 4
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: LD_INT 40
10662: PPUSH
10663: CALL_OW 240
// RuSoldMinLevel = 2 ;
10667: LD_ADDR_EXP 13
10671: PUSH
10672: LD_INT 2
10674: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10675: LD_ADDR_EXP 14
10679: PUSH
10680: LD_INT 3
10682: ST_TO_ADDR
// end ; end ;
10683: LD_VAR 0 1
10687: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10688: LD_INT 0
10690: PPUSH
10691: PPUSH
10692: PPUSH
// if not vehicles then
10693: LD_VAR 0 1
10697: NOT
10698: IFFALSE 10702
// exit ;
10700: GO 10832
// tmp := [ ] ;
10702: LD_ADDR_VAR 0 5
10706: PUSH
10707: EMPTY
10708: ST_TO_ADDR
// for i in vehicles do
10709: LD_ADDR_VAR 0 4
10713: PUSH
10714: LD_VAR 0 1
10718: PUSH
10719: FOR_IN
10720: IFFALSE 10816
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10722: LD_ADDR_VAR 0 5
10726: PUSH
10727: LD_VAR 0 5
10731: PPUSH
10732: LD_VAR 0 5
10736: PUSH
10737: LD_INT 1
10739: PLUS
10740: PPUSH
10741: LD_VAR 0 4
10745: PPUSH
10746: CALL_OW 265
10750: PUSH
10751: LD_VAR 0 4
10755: PPUSH
10756: CALL_OW 262
10760: PUSH
10761: LD_VAR 0 4
10765: PPUSH
10766: CALL_OW 263
10770: PUSH
10771: LD_VAR 0 4
10775: PPUSH
10776: CALL_OW 264
10780: PUSH
10781: LD_VAR 0 4
10785: PPUSH
10786: CALL_OW 261
10790: PUSH
10791: LD_VAR 0 4
10795: PPUSH
10796: CALL_OW 256
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: PPUSH
10809: CALL_OW 1
10813: ST_TO_ADDR
10814: GO 10719
10816: POP
10817: POP
// SaveVariable ( tmp , ident ) ;
10818: LD_VAR 0 5
10822: PPUSH
10823: LD_VAR 0 2
10827: PPUSH
10828: CALL_OW 39
// end ; end_of_file
10832: LD_VAR 0 3
10836: RET
// export function PrepareHeroes ; var plive , prefix ; begin
10837: LD_INT 0
10839: PPUSH
10840: PPUSH
10841: PPUSH
// prefix := 01_ ;
10842: LD_ADDR_VAR 0 3
10846: PUSH
10847: LD_STRING 01_
10849: ST_TO_ADDR
// uc_side := 1 ;
10850: LD_ADDR_OWVAR 20
10854: PUSH
10855: LD_INT 1
10857: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
10858: LD_ADDR_EXP 1
10862: PUSH
10863: LD_STRING JMM
10865: PPUSH
10866: LD_EXP 34
10870: NOT
10871: PPUSH
10872: LD_VAR 0 3
10876: PPUSH
10877: CALL 36775 0 3
10881: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10882: LD_ADDR_VAR 0 2
10886: PUSH
10887: LD_STRING 01_JMMLifePoints_1
10889: PPUSH
10890: LD_INT 1000
10892: PPUSH
10893: CALL_OW 30
10897: ST_TO_ADDR
// if plive < 250 then
10898: LD_VAR 0 2
10902: PUSH
10903: LD_INT 250
10905: LESS
10906: IFFALSE 10916
// plive := 300 ;
10908: LD_ADDR_VAR 0 2
10912: PUSH
10913: LD_INT 300
10915: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10916: LD_EXP 1
10920: PPUSH
10921: LD_VAR 0 2
10925: PPUSH
10926: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
10930: LD_ADDR_EXP 9
10934: PUSH
10935: LD_STRING Powell
10937: PPUSH
10938: CALL_OW 25
10942: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
10943: LD_ADDR_EXP 2
10947: PUSH
10948: LD_STRING Bobby
10950: PPUSH
10951: LD_EXP 34
10955: NOT
10956: PPUSH
10957: LD_VAR 0 3
10961: PPUSH
10962: CALL 36775 0 3
10966: ST_TO_ADDR
// if Bobby then
10967: LD_EXP 2
10971: IFFALSE 11021
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10973: LD_ADDR_VAR 0 2
10977: PUSH
10978: LD_STRING 01_BobbyLifePoints_1
10980: PPUSH
10981: LD_INT 1000
10983: PPUSH
10984: CALL_OW 30
10988: ST_TO_ADDR
// if plive < 250 then
10989: LD_VAR 0 2
10993: PUSH
10994: LD_INT 250
10996: LESS
10997: IFFALSE 11007
// plive := 300 ;
10999: LD_ADDR_VAR 0 2
11003: PUSH
11004: LD_INT 300
11006: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
11007: LD_EXP 2
11011: PPUSH
11012: LD_VAR 0 2
11016: PPUSH
11017: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
11021: LD_ADDR_EXP 3
11025: PUSH
11026: LD_STRING Cyrus
11028: PPUSH
11029: LD_EXP 34
11033: NOT
11034: PPUSH
11035: LD_VAR 0 3
11039: PPUSH
11040: CALL 36775 0 3
11044: ST_TO_ADDR
// if Cyrus then
11045: LD_EXP 3
11049: IFFALSE 11099
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
11051: LD_ADDR_VAR 0 2
11055: PUSH
11056: LD_STRING 01_CyrusLifePoints_1
11058: PPUSH
11059: LD_INT 1000
11061: PPUSH
11062: CALL_OW 30
11066: ST_TO_ADDR
// if plive < 250 then
11067: LD_VAR 0 2
11071: PUSH
11072: LD_INT 250
11074: LESS
11075: IFFALSE 11085
// plive := 300 ;
11077: LD_ADDR_VAR 0 2
11081: PUSH
11082: LD_INT 300
11084: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
11085: LD_EXP 3
11089: PPUSH
11090: LD_VAR 0 2
11094: PPUSH
11095: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
11099: LD_ADDR_EXP 5
11103: PUSH
11104: LD_STRING Khatam
11106: PPUSH
11107: CALL_OW 25
11111: ST_TO_ADDR
// uc_side := 4 ;
11112: LD_ADDR_OWVAR 20
11116: PUSH
11117: LD_INT 4
11119: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11120: LD_ADDR_EXP 4
11124: PUSH
11125: LD_STRING Lisa
11127: PPUSH
11128: CALL_OW 25
11132: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11133: LD_EXP 1
11137: PPUSH
11138: LD_INT 3
11140: PPUSH
11141: LD_INT 0
11143: PPUSH
11144: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11148: LD_EXP 2
11152: PPUSH
11153: LD_INT 3
11155: PPUSH
11156: LD_INT 0
11158: PPUSH
11159: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11163: LD_EXP 3
11167: PPUSH
11168: LD_INT 3
11170: PPUSH
11171: LD_INT 0
11173: PPUSH
11174: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11178: LD_EXP 4
11182: PPUSH
11183: LD_INT 5
11185: PPUSH
11186: LD_INT 0
11188: PPUSH
11189: CALL_OW 49
// ComCrawl ( Lisa ) ;
11193: LD_EXP 4
11197: PPUSH
11198: CALL_OW 137
// end ;
11202: LD_VAR 0 1
11206: RET
// export function PrepareLisSquad ; var i , un ; begin
11207: LD_INT 0
11209: PPUSH
11210: PPUSH
11211: PPUSH
// uc_side := 4 ;
11212: LD_ADDR_OWVAR 20
11216: PUSH
11217: LD_INT 4
11219: ST_TO_ADDR
// uc_nation := 1 ;
11220: LD_ADDR_OWVAR 21
11224: PUSH
11225: LD_INT 1
11227: ST_TO_ADDR
// hc_class := 2 ;
11228: LD_ADDR_OWVAR 28
11232: PUSH
11233: LD_INT 2
11235: ST_TO_ADDR
// hc_sex := sex_male ;
11236: LD_ADDR_OWVAR 27
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// hc_gallery :=  ;
11244: LD_ADDR_OWVAR 33
11248: PUSH
11249: LD_STRING 
11251: ST_TO_ADDR
// hc_name :=  ;
11252: LD_ADDR_OWVAR 26
11256: PUSH
11257: LD_STRING 
11259: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11260: LD_ADDR_OWVAR 30
11264: PUSH
11265: LD_INT 0
11267: PUSH
11268: LD_INT 1
11270: PUSH
11271: LD_INT 0
11273: PUSH
11274: LD_INT 0
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11283: LD_ADDR_OWVAR 31
11287: PUSH
11288: LD_INT 1
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: LD_INT 0
11296: PUSH
11297: LD_INT 0
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: ST_TO_ADDR
// un := CreateHuman ;
11306: LD_ADDR_VAR 0 3
11310: PUSH
11311: CALL_OW 44
11315: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11316: LD_VAR 0 3
11320: PPUSH
11321: LD_INT 6
11323: PPUSH
11324: LD_INT 0
11326: PPUSH
11327: CALL_OW 49
// hc_sex := sex_female ;
11331: LD_ADDR_OWVAR 27
11335: PUSH
11336: LD_INT 2
11338: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11339: LD_ADDR_OWVAR 30
11343: PUSH
11344: LD_INT 0
11346: PUSH
11347: LD_INT 0
11349: PUSH
11350: LD_INT 0
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11362: LD_ADDR_OWVAR 31
11366: PUSH
11367: LD_INT 0
11369: PUSH
11370: LD_INT 1
11372: PUSH
11373: LD_INT 0
11375: PUSH
11376: LD_INT 1
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: ST_TO_ADDR
// un := CreateHuman ;
11385: LD_ADDR_VAR 0 3
11389: PUSH
11390: CALL_OW 44
11394: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11395: LD_VAR 0 3
11399: PPUSH
11400: LD_INT 6
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 49
// if not Bobby and not Cyrus then
11410: LD_EXP 2
11414: NOT
11415: PUSH
11416: LD_EXP 3
11420: NOT
11421: AND
11422: IFFALSE 11511
// begin hc_class := 1 ;
11424: LD_ADDR_OWVAR 28
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// hc_sex := sex_male ;
11432: LD_ADDR_OWVAR 27
11436: PUSH
11437: LD_INT 1
11439: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11440: LD_ADDR_OWVAR 30
11444: PUSH
11445: LD_INT 2
11447: PUSH
11448: LD_INT 3
11450: PUSH
11451: LD_INT 1
11453: PUSH
11454: LD_INT 0
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11463: LD_ADDR_OWVAR 31
11467: PUSH
11468: LD_INT 2
11470: PUSH
11471: LD_INT 3
11473: PUSH
11474: LD_INT 1
11476: PUSH
11477: LD_INT 0
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: ST_TO_ADDR
// un := CreateHuman ;
11486: LD_ADDR_VAR 0 3
11490: PUSH
11491: CALL_OW 44
11495: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11496: LD_VAR 0 3
11500: PPUSH
11501: LD_INT 31
11503: PPUSH
11504: LD_INT 0
11506: PPUSH
11507: CALL_OW 49
// end ; InitHc ;
11511: CALL_OW 19
// end ;
11515: LD_VAR 0 1
11519: RET
// export function PrepareOtherAmericans ; begin
11520: LD_INT 0
11522: PPUSH
// uc_side := 4 ;
11523: LD_ADDR_OWVAR 20
11527: PUSH
11528: LD_INT 4
11530: ST_TO_ADDR
// uc_nation := 1 ;
11531: LD_ADDR_OWVAR 21
11535: PUSH
11536: LD_INT 1
11538: ST_TO_ADDR
// hc_gallery :=  ;
11539: LD_ADDR_OWVAR 33
11543: PUSH
11544: LD_STRING 
11546: ST_TO_ADDR
// hc_name := Tom Garvin ;
11547: LD_ADDR_OWVAR 26
11551: PUSH
11552: LD_STRING Tom Garvin
11554: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11555: LD_INT 1
11557: PPUSH
11558: LD_INT 1
11560: PPUSH
11561: LD_INT 2
11563: PPUSH
11564: CALL_OW 380
// Brian := CreateHuman ;
11568: LD_ADDR_EXP 6
11572: PUSH
11573: CALL_OW 44
11577: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11578: LD_EXP 6
11582: PPUSH
11583: LD_INT 10
11585: PPUSH
11586: LD_INT 0
11588: PPUSH
11589: CALL_OW 49
// hc_name := Jerry White ;
11593: LD_ADDR_OWVAR 26
11597: PUSH
11598: LD_STRING Jerry White
11600: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11601: LD_INT 1
11603: PPUSH
11604: LD_INT 3
11606: PPUSH
11607: LD_INT 2
11609: PPUSH
11610: CALL_OW 380
// Jerry := CreateHuman ;
11614: LD_ADDR_EXP 7
11618: PUSH
11619: CALL_OW 44
11623: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11624: LD_EXP 7
11628: PPUSH
11629: LD_INT 10
11631: PPUSH
11632: LD_INT 0
11634: PPUSH
11635: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11639: LD_EXP 6
11643: PUSH
11644: LD_EXP 7
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PPUSH
11653: CALL_OW 140
// end ;
11657: LD_VAR 0 1
11661: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un , hexes ; begin
11662: LD_INT 0
11664: PPUSH
11665: PPUSH
11666: PPUSH
11667: PPUSH
// hexes := AreaToList ( DeadsSpawn , 0 ) ;
11668: LD_ADDR_VAR 0 4
11672: PUSH
11673: LD_INT 16
11675: PPUSH
11676: LD_INT 0
11678: PPUSH
11679: CALL_OW 517
11683: ST_TO_ADDR
// for i = 1 to 6 do
11684: LD_ADDR_VAR 0 2
11688: PUSH
11689: DOUBLE
11690: LD_INT 1
11692: DEC
11693: ST_TO_ADDR
11694: LD_INT 6
11696: PUSH
11697: FOR_TO
11698: IFFALSE 11844
// begin uc_side := 4 ;
11700: LD_ADDR_OWVAR 20
11704: PUSH
11705: LD_INT 4
11707: ST_TO_ADDR
// uc_nation := 1 ;
11708: LD_ADDR_OWVAR 21
11712: PUSH
11713: LD_INT 1
11715: ST_TO_ADDR
// hc_gallery :=  ;
11716: LD_ADDR_OWVAR 33
11720: PUSH
11721: LD_STRING 
11723: ST_TO_ADDR
// hc_name :=  ;
11724: LD_ADDR_OWVAR 26
11728: PUSH
11729: LD_STRING 
11731: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 1 ) ;
11732: LD_INT 0
11734: PPUSH
11735: LD_INT 1
11737: PUSH
11738: LD_INT 1
11740: PUSH
11741: LD_INT 4
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: LIST
11748: PUSH
11749: LD_VAR 0 2
11753: PUSH
11754: LD_INT 3
11756: MOD
11757: PUSH
11758: LD_INT 1
11760: PLUS
11761: ARRAY
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 380
// un := CreateHuman ;
11770: LD_ADDR_VAR 0 3
11774: PUSH
11775: CALL_OW 44
11779: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11780: LD_VAR 0 3
11784: PPUSH
11785: LD_INT 0
11787: PPUSH
11788: LD_INT 5
11790: PPUSH
11791: CALL_OW 12
11795: PPUSH
11796: CALL_OW 233
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
11800: LD_VAR 0 3
11804: PPUSH
11805: LD_VAR 0 4
11809: PUSH
11810: LD_INT 1
11812: ARRAY
11813: PUSH
11814: LD_VAR 0 2
11818: ARRAY
11819: PPUSH
11820: LD_VAR 0 4
11824: PUSH
11825: LD_INT 2
11827: ARRAY
11828: PUSH
11829: LD_VAR 0 2
11833: ARRAY
11834: PPUSH
11835: LD_INT 1
11837: PPUSH
11838: CALL_OW 601
// end ;
11842: GO 11697
11844: POP
11845: POP
// DyingSold := CreateHuman ;
11846: LD_ADDR_EXP 35
11850: PUSH
11851: CALL_OW 44
11855: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11856: LD_EXP 35
11860: PPUSH
11861: LD_INT 16
11863: PPUSH
11864: LD_INT 0
11866: PPUSH
11867: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11871: LD_EXP 35
11875: PPUSH
11876: LD_INT 250
11878: PPUSH
11879: CALL_OW 234
// end ; end_of_file
11883: LD_VAR 0 1
11887: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11888: LD_INT 0
11890: PPUSH
11891: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11892: LD_ADDR_VAR 0 2
11896: PUSH
11897: LD_INT 22
11899: PUSH
11900: LD_INT 1
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 23
11909: PUSH
11910: LD_INT 1
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 25
11919: PUSH
11920: LD_INT 2
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 50
11929: PUSH
11930: EMPTY
11931: LIST
11932: PUSH
11933: LD_INT 56
11935: PUSH
11936: EMPTY
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: PPUSH
11946: CALL_OW 69
11950: PUSH
11951: LD_EXP 1
11955: PUSH
11956: EMPTY
11957: LIST
11958: DIFF
11959: ST_TO_ADDR
// if not tmp then
11960: LD_VAR 0 2
11964: NOT
11965: IFFALSE 11969
// exit ;
11967: GO 12045
// uc_side = 6 ;
11969: LD_ADDR_OWVAR 20
11973: PUSH
11974: LD_INT 6
11976: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11977: LD_ADDR_EXP 8
11981: PUSH
11982: LD_STRING Mikhail
11984: PPUSH
11985: CALL_OW 25
11989: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11990: LD_EXP 8
11994: PPUSH
11995: LD_INT 3
11997: PPUSH
11998: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
12002: LD_EXP 8
12006: PPUSH
12007: LD_VAR 0 2
12011: PUSH
12012: LD_INT 1
12014: ARRAY
12015: PPUSH
12016: CALL_OW 250
12020: PPUSH
12021: LD_VAR 0 2
12025: PUSH
12026: LD_INT 1
12028: ARRAY
12029: PPUSH
12030: CALL_OW 251
12034: PPUSH
12035: LD_INT 5
12037: PPUSH
12038: LD_INT 1
12040: PPUSH
12041: CALL_OW 50
// end ;
12045: LD_VAR 0 1
12049: RET
// export function PrepareRussianCommander ; begin
12050: LD_INT 0
12052: PPUSH
// uc_side = 3 ;
12053: LD_ADDR_OWVAR 20
12057: PUSH
12058: LD_INT 3
12060: ST_TO_ADDR
// uc_nation = 3 ;
12061: LD_ADDR_OWVAR 21
12065: PUSH
12066: LD_INT 3
12068: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
12069: LD_ADDR_EXP 19
12073: PUSH
12074: LD_STRING Natasza
12076: PPUSH
12077: CALL_OW 25
12081: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
12082: LD_EXP 19
12086: PPUSH
12087: LD_INT 24
12089: PPUSH
12090: LD_INT 0
12092: PPUSH
12093: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
12097: LD_EXP 19
12101: PPUSH
12102: LD_INT 56
12104: PPUSH
12105: LD_INT 16
12107: PPUSH
12108: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
12112: LD_ADDR_EXP 24
12116: PUSH
12117: LD_EXP 24
12121: PPUSH
12122: LD_EXP 24
12126: PUSH
12127: LD_INT 1
12129: PLUS
12130: PPUSH
12131: LD_EXP 19
12135: PPUSH
12136: CALL_OW 1
12140: ST_TO_ADDR
// end ;
12141: LD_VAR 0 1
12145: RET
// export function PrepareSouthBase ; var i , un ; begin
12146: LD_INT 0
12148: PPUSH
12149: PPUSH
12150: PPUSH
// for i = 1 to 2 do
12151: LD_ADDR_VAR 0 2
12155: PUSH
12156: DOUBLE
12157: LD_INT 1
12159: DEC
12160: ST_TO_ADDR
12161: LD_INT 2
12163: PUSH
12164: FOR_TO
12165: IFFALSE 12274
// begin uc_side = 3 ;
12167: LD_ADDR_OWVAR 20
12171: PUSH
12172: LD_INT 3
12174: ST_TO_ADDR
// uc_nation = 3 ;
12175: LD_ADDR_OWVAR 21
12179: PUSH
12180: LD_INT 3
12182: ST_TO_ADDR
// hc_gallery =  ;
12183: LD_ADDR_OWVAR 33
12187: PUSH
12188: LD_STRING 
12190: ST_TO_ADDR
// hc_name =  ;
12191: LD_ADDR_OWVAR 26
12195: PUSH
12196: LD_STRING 
12198: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12199: LD_INT 1
12201: PPUSH
12202: LD_INT 1
12204: PPUSH
12205: LD_EXP 13
12209: PPUSH
12210: LD_EXP 14
12214: PPUSH
12215: CALL_OW 12
12219: PPUSH
12220: CALL_OW 380
// hc_importance = 0 ;
12224: LD_ADDR_OWVAR 32
12228: PUSH
12229: LD_INT 0
12231: ST_TO_ADDR
// un = CreateHuman ;
12232: LD_ADDR_VAR 0 3
12236: PUSH
12237: CALL_OW 44
12241: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12242: LD_VAR 0 3
12246: PPUSH
12247: LD_INT 11
12249: PPUSH
12250: LD_INT 0
12252: PPUSH
12253: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12257: LD_VAR 0 3
12261: PPUSH
12262: LD_INT 111
12264: PPUSH
12265: LD_INT 38
12267: PPUSH
12268: CALL_OW 118
// end ;
12272: GO 12164
12274: POP
12275: POP
// for i = 1 to 2 do
12276: LD_ADDR_VAR 0 2
12280: PUSH
12281: DOUBLE
12282: LD_INT 1
12284: DEC
12285: ST_TO_ADDR
12286: LD_INT 2
12288: PUSH
12289: FOR_TO
12290: IFFALSE 12373
// begin uc_side = 3 ;
12292: LD_ADDR_OWVAR 20
12296: PUSH
12297: LD_INT 3
12299: ST_TO_ADDR
// uc_nation = 3 ;
12300: LD_ADDR_OWVAR 21
12304: PUSH
12305: LD_INT 3
12307: ST_TO_ADDR
// hc_gallery =  ;
12308: LD_ADDR_OWVAR 33
12312: PUSH
12313: LD_STRING 
12315: ST_TO_ADDR
// hc_name =  ;
12316: LD_ADDR_OWVAR 26
12320: PUSH
12321: LD_STRING 
12323: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12324: LD_INT 0
12326: PPUSH
12327: LD_INT 3
12329: PPUSH
12330: LD_EXP 13
12334: PPUSH
12335: LD_EXP 14
12339: PPUSH
12340: CALL_OW 12
12344: PPUSH
12345: CALL_OW 380
// un = CreateHuman ;
12349: LD_ADDR_VAR 0 3
12353: PUSH
12354: CALL_OW 44
12358: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12359: LD_VAR 0 3
12363: PPUSH
12364: LD_INT 10
12366: PPUSH
12367: CALL_OW 52
// end ;
12371: GO 12289
12373: POP
12374: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12375: LD_INT 3
12377: PPUSH
12378: LD_INT 3
12380: PPUSH
12381: LD_INT 33
12383: PPUSH
12384: LD_EXP 13
12388: PPUSH
12389: LD_EXP 14
12393: PPUSH
12394: CALL_OW 12
12398: PPUSH
12399: LD_INT 1
12401: PPUSH
12402: LD_INT 1
12404: PUSH
12405: LD_INT 2
12407: PUSH
12408: LD_INT 2
12410: PUSH
12411: LD_INT 3
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: LD_OWVAR 67
12424: ARRAY
12425: PPUSH
12426: CALL 8964 0 6
// for i in UnitsInside ( arm2 ) do
12430: LD_ADDR_VAR 0 2
12434: PUSH
12435: LD_INT 33
12437: PPUSH
12438: CALL_OW 313
12442: PUSH
12443: FOR_IN
12444: IFFALSE 12477
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12446: LD_ADDR_EXP 25
12450: PUSH
12451: LD_EXP 25
12455: PPUSH
12456: LD_EXP 25
12460: PUSH
12461: LD_INT 1
12463: PLUS
12464: PPUSH
12465: LD_VAR 0 2
12469: PPUSH
12470: CALL_OW 1
12474: ST_TO_ADDR
12475: GO 12443
12477: POP
12478: POP
// end ;
12479: LD_VAR 0 1
12483: RET
// export function PrepareNorthBase ; var i , un ; begin
12484: LD_INT 0
12486: PPUSH
12487: PPUSH
12488: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12489: LD_ADDR_VAR 0 2
12493: PUSH
12494: DOUBLE
12495: LD_INT 1
12497: DEC
12498: ST_TO_ADDR
12499: LD_INT 1
12501: PPUSH
12502: LD_INT 2
12504: PPUSH
12505: CALL_OW 12
12509: PUSH
12510: LD_INT 2
12512: PPUSH
12513: LD_INT 3
12515: PPUSH
12516: CALL_OW 12
12520: PUSH
12521: LD_INT 3
12523: PPUSH
12524: LD_INT 4
12526: PPUSH
12527: CALL_OW 12
12531: PUSH
12532: LD_INT 4
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: PUSH
12541: LD_OWVAR 67
12545: ARRAY
12546: PUSH
12547: FOR_TO
12548: IFFALSE 12634
// begin uc_side = 3 ;
12550: LD_ADDR_OWVAR 20
12554: PUSH
12555: LD_INT 3
12557: ST_TO_ADDR
// uc_nation = 3 ;
12558: LD_ADDR_OWVAR 21
12562: PUSH
12563: LD_INT 3
12565: ST_TO_ADDR
// hc_gallery =  ;
12566: LD_ADDR_OWVAR 33
12570: PUSH
12571: LD_STRING 
12573: ST_TO_ADDR
// hc_name =  ;
12574: LD_ADDR_OWVAR 26
12578: PUSH
12579: LD_STRING 
12581: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12582: LD_INT 0
12584: PPUSH
12585: LD_INT 1
12587: PPUSH
12588: LD_EXP 13
12592: PPUSH
12593: LD_EXP 14
12597: PPUSH
12598: CALL_OW 12
12602: PPUSH
12603: CALL_OW 380
// un = CreateHuman ;
12607: LD_ADDR_VAR 0 3
12611: PUSH
12612: CALL_OW 44
12616: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12617: LD_VAR 0 3
12621: PPUSH
12622: LD_INT 14
12624: PPUSH
12625: LD_INT 0
12627: PPUSH
12628: CALL_OW 49
// end ;
12632: GO 12547
12634: POP
12635: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12636: LD_INT 3
12638: PPUSH
12639: LD_INT 3
12641: PPUSH
12642: LD_INT 2
12644: PPUSH
12645: LD_EXP 13
12649: PPUSH
12650: LD_EXP 14
12654: PPUSH
12655: CALL_OW 12
12659: PPUSH
12660: LD_INT 1
12662: PPUSH
12663: LD_INT 1
12665: PPUSH
12666: LD_INT 2
12668: PPUSH
12669: CALL_OW 12
12673: PUSH
12674: LD_INT 1
12676: PPUSH
12677: LD_INT 3
12679: PPUSH
12680: CALL_OW 12
12684: PUSH
12685: LD_INT 1
12687: PPUSH
12688: LD_INT 3
12690: PPUSH
12691: CALL_OW 12
12695: PUSH
12696: LD_INT 4
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: PUSH
12705: LD_OWVAR 67
12709: ARRAY
12710: PPUSH
12711: CALL 8964 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12715: LD_INT 3
12717: PPUSH
12718: LD_INT 3
12720: PPUSH
12721: LD_INT 23
12723: PPUSH
12724: LD_EXP 13
12728: PPUSH
12729: LD_EXP 14
12733: PPUSH
12734: CALL_OW 12
12738: PPUSH
12739: LD_INT 4
12741: PPUSH
12742: LD_INT 0
12744: PUSH
12745: LD_INT 1
12747: PUSH
12748: LD_INT 2
12750: PUSH
12751: LD_INT 2
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: PUSH
12760: LD_OWVAR 67
12764: ARRAY
12765: PPUSH
12766: CALL 8964 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12770: LD_INT 3
12772: PPUSH
12773: LD_INT 3
12775: PPUSH
12776: LD_INT 1
12778: PPUSH
12779: LD_EXP 13
12783: PPUSH
12784: LD_EXP 14
12788: PPUSH
12789: CALL_OW 12
12793: PPUSH
12794: LD_INT 2
12796: PPUSH
12797: LD_INT 1
12799: PUSH
12800: LD_INT 2
12802: PUSH
12803: LD_INT 2
12805: PUSH
12806: LD_INT 3
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: PUSH
12815: LD_OWVAR 67
12819: ARRAY
12820: PPUSH
12821: CALL 8964 0 6
// for i in UnitsInside ( arm1 ) do
12825: LD_ADDR_VAR 0 2
12829: PUSH
12830: LD_INT 2
12832: PPUSH
12833: CALL_OW 313
12837: PUSH
12838: FOR_IN
12839: IFFALSE 12872
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12841: LD_ADDR_EXP 24
12845: PUSH
12846: LD_EXP 24
12850: PPUSH
12851: LD_EXP 24
12855: PUSH
12856: LD_INT 1
12858: PLUS
12859: PPUSH
12860: LD_VAR 0 2
12864: PPUSH
12865: CALL_OW 1
12869: ST_TO_ADDR
12870: GO 12838
12872: POP
12873: POP
// end ;
12874: LD_VAR 0 1
12878: RET
// export function PrepareOtherRussians ; var i , un ; begin
12879: LD_INT 0
12881: PPUSH
12882: PPUSH
12883: PPUSH
// for i = 1 to 2 do
12884: LD_ADDR_VAR 0 2
12888: PUSH
12889: DOUBLE
12890: LD_INT 1
12892: DEC
12893: ST_TO_ADDR
12894: LD_INT 2
12896: PUSH
12897: FOR_TO
12898: IFFALSE 12999
// begin uc_side = 3 ;
12900: LD_ADDR_OWVAR 20
12904: PUSH
12905: LD_INT 3
12907: ST_TO_ADDR
// uc_nation = 3 ;
12908: LD_ADDR_OWVAR 21
12912: PUSH
12913: LD_INT 3
12915: ST_TO_ADDR
// hc_gallery =  ;
12916: LD_ADDR_OWVAR 33
12920: PUSH
12921: LD_STRING 
12923: ST_TO_ADDR
// hc_name =  ;
12924: LD_ADDR_OWVAR 26
12928: PUSH
12929: LD_STRING 
12931: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12932: LD_INT 0
12934: PPUSH
12935: LD_INT 1
12937: PPUSH
12938: LD_EXP 13
12942: PPUSH
12943: LD_EXP 14
12947: PPUSH
12948: CALL_OW 12
12952: PPUSH
12953: CALL_OW 380
// un = CreateHuman ;
12957: LD_ADDR_VAR 0 3
12961: PUSH
12962: CALL_OW 44
12966: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12967: LD_VAR 0 3
12971: PPUSH
12972: LD_INT 9
12974: PPUSH
12975: LD_INT 0
12977: PPUSH
12978: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12982: LD_VAR 0 3
12986: PPUSH
12987: LD_INT 80
12989: PPUSH
12990: LD_INT 73
12992: PPUSH
12993: CALL_OW 118
// end ;
12997: GO 12897
12999: POP
13000: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
13001: LD_ADDR_VAR 0 2
13005: PUSH
13006: LD_INT 22
13008: PUSH
13009: LD_INT 3
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 30
13018: PUSH
13019: LD_INT 31
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PPUSH
13030: CALL_OW 69
13034: PUSH
13035: FOR_IN
13036: IFFALSE 13064
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
13038: LD_EXP 13
13042: PPUSH
13043: LD_EXP 14
13047: PPUSH
13048: CALL_OW 12
13052: PPUSH
13053: LD_VAR 0 2
13057: PPUSH
13058: CALL 9073 0 2
13062: GO 13035
13064: POP
13065: POP
// end ;
13066: LD_VAR 0 1
13070: RET
// export function PrepareCargoBays ; begin
13071: LD_INT 0
13073: PPUSH
// uc_side = 3 ;
13074: LD_ADDR_OWVAR 20
13078: PUSH
13079: LD_INT 3
13081: ST_TO_ADDR
// uc_nation = 3 ;
13082: LD_ADDR_OWVAR 21
13086: PUSH
13087: LD_INT 3
13089: ST_TO_ADDR
// vc_engine = 1 ;
13090: LD_ADDR_OWVAR 39
13094: PUSH
13095: LD_INT 1
13097: ST_TO_ADDR
// vc_control = 1 ;
13098: LD_ADDR_OWVAR 38
13102: PUSH
13103: LD_INT 1
13105: ST_TO_ADDR
// vc_weapon = 51 ;
13106: LD_ADDR_OWVAR 40
13110: PUSH
13111: LD_INT 51
13113: ST_TO_ADDR
// vc_chassis = 22 ;
13114: LD_ADDR_OWVAR 37
13118: PUSH
13119: LD_INT 22
13121: ST_TO_ADDR
// cargo1 = CreateVehicle ;
13122: LD_ADDR_EXP 15
13126: PUSH
13127: CALL_OW 45
13131: ST_TO_ADDR
// cargo2 = CreateVehicle ;
13132: LD_ADDR_EXP 16
13136: PUSH
13137: CALL_OW 45
13141: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
13142: LD_EXP 15
13146: PPUSH
13147: LD_INT 13
13149: PPUSH
13150: LD_INT 0
13152: PPUSH
13153: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
13157: LD_EXP 16
13161: PPUSH
13162: LD_INT 13
13164: PPUSH
13165: LD_INT 0
13167: PPUSH
13168: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13172: LD_EXP 15
13176: PPUSH
13177: LD_INT 2
13179: PPUSH
13180: LD_INT 70
13182: PUSH
13183: LD_INT 50
13185: PUSH
13186: LD_INT 30
13188: PUSH
13189: LD_INT 20
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: PUSH
13198: LD_OWVAR 67
13202: ARRAY
13203: PPUSH
13204: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13208: LD_EXP 16
13212: PPUSH
13213: LD_INT 2
13215: PPUSH
13216: LD_INT 70
13218: PUSH
13219: LD_INT 50
13221: PUSH
13222: LD_INT 30
13224: PUSH
13225: LD_INT 20
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: PUSH
13234: LD_OWVAR 67
13238: ARRAY
13239: PPUSH
13240: CALL_OW 291
// hc_gallery =  ;
13244: LD_ADDR_OWVAR 33
13248: PUSH
13249: LD_STRING 
13251: ST_TO_ADDR
// hc_name =  ;
13252: LD_ADDR_OWVAR 26
13256: PUSH
13257: LD_STRING 
13259: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13260: LD_INT 1
13262: PPUSH
13263: LD_INT 3
13265: PPUSH
13266: LD_INT 1
13268: PPUSH
13269: LD_INT 2
13271: PPUSH
13272: CALL_OW 12
13276: PPUSH
13277: CALL_OW 380
// driver1 = CreateHuman ;
13281: LD_ADDR_EXP 17
13285: PUSH
13286: CALL_OW 44
13290: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13291: LD_EXP 17
13295: PPUSH
13296: LD_EXP 15
13300: PPUSH
13301: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13305: LD_ADDR_OWVAR 26
13309: PUSH
13310: LD_STRING Nikolai Andreyev
13312: ST_TO_ADDR
// driver2 = CreateHuman ;
13313: LD_ADDR_EXP 18
13317: PUSH
13318: CALL_OW 44
13322: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13323: LD_EXP 18
13327: PPUSH
13328: LD_EXP 16
13332: PPUSH
13333: CALL_OW 52
// end ;
13337: LD_VAR 0 1
13341: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13342: LD_INT 0
13344: PPUSH
13345: PPUSH
13346: PPUSH
13347: PPUSH
13348: PPUSH
13349: PPUSH
// uc_side = 3 ;
13350: LD_ADDR_OWVAR 20
13354: PUSH
13355: LD_INT 3
13357: ST_TO_ADDR
// uc_nation = 3 ;
13358: LD_ADDR_OWVAR 21
13362: PUSH
13363: LD_INT 3
13365: ST_TO_ADDR
// for i := 1 to count do
13366: LD_ADDR_VAR 0 4
13370: PUSH
13371: DOUBLE
13372: LD_INT 1
13374: DEC
13375: ST_TO_ADDR
13376: LD_VAR 0 1
13380: PUSH
13381: FOR_TO
13382: IFFALSE 13644
// begin vc_engine = 1 ;
13384: LD_ADDR_OWVAR 39
13388: PUSH
13389: LD_INT 1
13391: ST_TO_ADDR
// vc_control = 1 ;
13392: LD_ADDR_OWVAR 38
13396: PUSH
13397: LD_INT 1
13399: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13400: LD_ADDR_OWVAR 40
13404: PUSH
13405: LD_INT 42
13407: ST_TO_ADDR
// if Difficulty = 3 then
13408: LD_OWVAR 67
13412: PUSH
13413: LD_INT 3
13415: EQUAL
13416: IFFALSE 13445
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13418: LD_ADDR_OWVAR 40
13422: PUSH
13423: LD_INT 42
13425: PUSH
13426: LD_INT 43
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 1
13435: PPUSH
13436: LD_INT 2
13438: PPUSH
13439: CALL_OW 12
13443: ARRAY
13444: ST_TO_ADDR
// if Difficulty = 4 then
13445: LD_OWVAR 67
13449: PUSH
13450: LD_INT 4
13452: EQUAL
13453: IFFALSE 13490
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13455: LD_ADDR_OWVAR 40
13459: PUSH
13460: LD_INT 42
13462: PUSH
13463: LD_INT 43
13465: PUSH
13466: LD_INT 43
13468: PUSH
13469: LD_INT 44
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 1
13480: PPUSH
13481: LD_INT 4
13483: PPUSH
13484: CALL_OW 12
13488: ARRAY
13489: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13490: LD_ADDR_OWVAR 37
13494: PUSH
13495: LD_INT 21
13497: PUSH
13498: LD_INT 22
13500: PUSH
13501: LD_INT 22
13503: PUSH
13504: LD_INT 22
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: PUSH
13513: LD_OWVAR 67
13517: ARRAY
13518: ST_TO_ADDR
// veh = CreateVehicle ;
13519: LD_ADDR_VAR 0 5
13523: PUSH
13524: CALL_OW 45
13528: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13529: LD_VAR 0 5
13533: PPUSH
13534: LD_VAR 0 2
13538: PPUSH
13539: LD_INT 0
13541: PPUSH
13542: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13546: LD_ADDR_EXP 26
13550: PUSH
13551: LD_EXP 26
13555: PUSH
13556: LD_VAR 0 5
13560: ADD
13561: ST_TO_ADDR
// hc_gallery =  ;
13562: LD_ADDR_OWVAR 33
13566: PUSH
13567: LD_STRING 
13569: ST_TO_ADDR
// hc_name =  ;
13570: LD_ADDR_OWVAR 26
13574: PUSH
13575: LD_STRING 
13577: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13578: LD_INT 0
13580: PPUSH
13581: LD_INT 3
13583: PPUSH
13584: LD_EXP 13
13588: PPUSH
13589: LD_EXP 14
13593: PPUSH
13594: CALL_OW 12
13598: PPUSH
13599: CALL_OW 380
// un = CreateHuman ;
13603: LD_ADDR_VAR 0 6
13607: PUSH
13608: CALL_OW 44
13612: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13613: LD_VAR 0 6
13617: PPUSH
13618: LD_VAR 0 5
13622: PPUSH
13623: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13627: LD_VAR 0 6
13631: PPUSH
13632: LD_INT 14
13634: PPUSH
13635: LD_INT 9
13637: PPUSH
13638: CALL_OW 111
// end ;
13642: GO 13381
13644: POP
13645: POP
// wait ( 0 0$1 ) ;
13646: LD_INT 35
13648: PPUSH
13649: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13653: LD_INT 0
13655: PPUSH
13656: LD_INT 2
13658: PPUSH
13659: LD_EXP 13
13663: PPUSH
13664: LD_EXP 14
13668: PPUSH
13669: CALL_OW 12
13673: PPUSH
13674: CALL_OW 380
// un = CreateHuman ;
13678: LD_ADDR_VAR 0 6
13682: PUSH
13683: CALL_OW 44
13687: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13688: LD_ADDR_VAR 0 4
13692: PUSH
13693: DOUBLE
13694: LD_INT 1
13696: DEC
13697: ST_TO_ADDR
13698: LD_VAR 0 1
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: LD_INT 2
13708: MUL
13709: PLUS
13710: PUSH
13711: FOR_TO
13712: IFFALSE 13804
// begin hc_gallery =  ;
13714: LD_ADDR_OWVAR 33
13718: PUSH
13719: LD_STRING 
13721: ST_TO_ADDR
// hc_name =  ;
13722: LD_ADDR_OWVAR 26
13726: PUSH
13727: LD_STRING 
13729: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13730: LD_INT 1
13732: PPUSH
13733: LD_INT 1
13735: PPUSH
13736: LD_EXP 13
13740: PPUSH
13741: LD_EXP 14
13745: PPUSH
13746: CALL_OW 12
13750: PPUSH
13751: CALL_OW 380
// un = CreateHuman ;
13755: LD_ADDR_VAR 0 6
13759: PUSH
13760: CALL_OW 44
13764: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13765: LD_VAR 0 6
13769: PPUSH
13770: LD_INT 9
13772: PPUSH
13773: LD_INT 13
13775: PPUSH
13776: LD_INT 4
13778: PPUSH
13779: LD_INT 0
13781: PPUSH
13782: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13786: LD_ADDR_EXP 26
13790: PUSH
13791: LD_EXP 26
13795: PUSH
13796: LD_VAR 0 6
13800: ADD
13801: ST_TO_ADDR
// end ;
13802: GO 13711
13804: POP
13805: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13806: LD_ADDR_VAR 0 7
13810: PUSH
13811: LD_INT 26
13813: PPUSH
13814: LD_INT 22
13816: PUSH
13817: LD_INT 3
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 21
13826: PUSH
13827: LD_INT 1
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 26
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: LIST
13848: PPUSH
13849: CALL_OW 70
13853: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13854: LD_VAR 0 7
13858: PUSH
13859: LD_INT 1
13861: ARRAY
13862: PPUSH
13863: LD_STRING D9-Rus3-1
13865: PPUSH
13866: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13870: LD_VAR 0 7
13874: PUSH
13875: LD_INT 2
13877: ARRAY
13878: PPUSH
13879: LD_STRING D9-Russ-1
13881: PPUSH
13882: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
13886: LD_EXP 26
13890: PPUSH
13891: LD_INT 31
13893: PPUSH
13894: LD_INT 13
13896: PPUSH
13897: CALL_OW 114
// wait ( 0 0$3 ) ;
13901: LD_INT 105
13903: PPUSH
13904: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13908: LD_INT 35
13910: PPUSH
13911: CALL_OW 67
// for i in attackGroup do
13915: LD_ADDR_VAR 0 4
13919: PUSH
13920: LD_EXP 26
13924: PUSH
13925: FOR_IN
13926: IFFALSE 14293
// begin if IsDead ( i ) then
13928: LD_VAR 0 4
13932: PPUSH
13933: CALL_OW 301
13937: IFFALSE 13957
// begin attackGroup := attackGroup diff i ;
13939: LD_ADDR_EXP 26
13943: PUSH
13944: LD_EXP 26
13948: PUSH
13949: LD_VAR 0 4
13953: DIFF
13954: ST_TO_ADDR
// continue ;
13955: GO 13925
// end ; if not HasTask ( i ) and not GetTag ( i ) then
13957: LD_VAR 0 4
13961: PPUSH
13962: CALL_OW 314
13966: NOT
13967: PUSH
13968: LD_VAR 0 4
13972: PPUSH
13973: CALL_OW 110
13977: NOT
13978: AND
13979: IFFALSE 14015
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
13981: LD_VAR 0 4
13985: PPUSH
13986: LD_INT 22
13988: PUSH
13989: LD_INT 1
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PPUSH
13996: CALL_OW 69
14000: PPUSH
14001: LD_VAR 0 4
14005: PPUSH
14006: CALL_OW 74
14010: PPUSH
14011: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
14015: LD_VAR 0 4
14019: PPUSH
14020: CALL_OW 110
14024: NOT
14025: PUSH
14026: LD_VAR 0 4
14030: PPUSH
14031: CALL_OW 256
14035: PUSH
14036: LD_INT 650
14038: LESS
14039: AND
14040: PUSH
14041: LD_VAR 0 4
14045: PPUSH
14046: CALL_OW 247
14050: PUSH
14051: LD_INT 2
14053: EQUAL
14054: AND
14055: IFFALSE 14084
// begin SetTag ( i , 1 ) ;
14057: LD_VAR 0 4
14061: PPUSH
14062: LD_INT 1
14064: PPUSH
14065: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
14069: LD_VAR 0 4
14073: PPUSH
14074: LD_INT 20
14076: PPUSH
14077: LD_INT 8
14079: PPUSH
14080: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
14084: LD_VAR 0 4
14088: PPUSH
14089: CALL_OW 110
14093: PUSH
14094: LD_INT 1
14096: EQUAL
14097: PUSH
14098: LD_VAR 0 4
14102: PPUSH
14103: LD_INT 20
14105: PPUSH
14106: LD_INT 8
14108: PPUSH
14109: CALL_OW 297
14113: PUSH
14114: LD_INT 6
14116: LESS
14117: AND
14118: IFFALSE 14132
// SetTag ( i , 2 ) ;
14120: LD_VAR 0 4
14124: PPUSH
14125: LD_INT 2
14127: PPUSH
14128: CALL_OW 109
// if GetTag ( i ) = 2 then
14132: LD_VAR 0 4
14136: PPUSH
14137: CALL_OW 110
14141: PUSH
14142: LD_INT 2
14144: EQUAL
14145: IFFALSE 14253
// begin if GetLives ( i ) = 1000 then
14147: LD_VAR 0 4
14151: PPUSH
14152: CALL_OW 256
14156: PUSH
14157: LD_INT 1000
14159: EQUAL
14160: IFFALSE 14176
// SetTag ( i , 3 ) else
14162: LD_VAR 0 4
14166: PPUSH
14167: LD_INT 3
14169: PPUSH
14170: CALL_OW 109
14174: GO 14253
// if IsDrivenBy ( i ) then
14176: LD_VAR 0 4
14180: PPUSH
14181: CALL_OW 311
14185: IFFALSE 14253
// begin mech := IsDrivenBy ( i ) ;
14187: LD_ADDR_VAR 0 8
14191: PUSH
14192: LD_VAR 0 4
14196: PPUSH
14197: CALL_OW 311
14201: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
14202: LD_INT 1
14204: PPUSH
14205: LD_VAR 0 8
14209: PPUSH
14210: CALL_OW 292
14214: NOT
14215: PUSH
14216: LD_VAR 0 8
14220: PPUSH
14221: CALL_OW 256
14225: PUSH
14226: LD_INT 1000
14228: LESS
14229: AND
14230: IFFALSE 14244
// SetLives ( mech , 1000 ) ;
14232: LD_VAR 0 8
14236: PPUSH
14237: LD_INT 1000
14239: PPUSH
14240: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
14244: LD_VAR 0 8
14248: PPUSH
14249: CALL 75767 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
14253: LD_VAR 0 4
14257: PPUSH
14258: CALL_OW 110
14262: PUSH
14263: LD_INT 3
14265: EQUAL
14266: PUSH
14267: LD_VAR 0 4
14271: PPUSH
14272: CALL_OW 311
14276: AND
14277: IFFALSE 14291
// SetTag ( i , 0 ) ;
14279: LD_VAR 0 4
14283: PPUSH
14284: LD_INT 0
14286: PPUSH
14287: CALL_OW 109
// end ;
14291: GO 13925
14293: POP
14294: POP
// until not attackGroup ;
14295: LD_EXP 26
14299: NOT
14300: IFFALSE 13908
// end ;
14302: LD_VAR 0 3
14306: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14307: LD_EXP 26
14311: PPUSH
14312: LD_INT 21
14314: PUSH
14315: LD_INT 2
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PPUSH
14322: CALL_OW 72
14326: IFFALSE 14394
14328: GO 14330
14330: DISABLE
14331: LD_INT 0
14333: PPUSH
// begin enable ;
14334: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14335: LD_ADDR_VAR 0 1
14339: PUSH
14340: LD_EXP 26
14344: PPUSH
14345: LD_INT 21
14347: PUSH
14348: LD_INT 2
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PPUSH
14355: CALL_OW 72
14359: PUSH
14360: FOR_IN
14361: IFFALSE 14392
// if GetFuel ( i ) < 3 then
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 261
14372: PUSH
14373: LD_INT 3
14375: LESS
14376: IFFALSE 14390
// SetFuel ( i , 3 ) ;
14378: LD_VAR 0 1
14382: PPUSH
14383: LD_INT 3
14385: PPUSH
14386: CALL_OW 240
14390: GO 14360
14392: POP
14393: POP
// end ; end_of_file
14394: PPOPN 1
14396: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14397: LD_INT 22
14399: PUSH
14400: LD_INT 3
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: LD_INT 25
14409: PUSH
14410: LD_INT 2
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PPUSH
14421: CALL_OW 69
14425: IFFALSE 14444
14427: GO 14429
14429: DISABLE
// begin enable ;
14430: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14431: LD_INT 3
14433: PPUSH
14434: LD_INT 1
14436: PPUSH
14437: LD_INT 22
14439: PPUSH
14440: CALL 9209 0 3
// end ;
14444: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14445: LD_INT 22
14447: PUSH
14448: LD_INT 3
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 25
14457: PUSH
14458: LD_INT 4
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PPUSH
14469: CALL_OW 69
14473: IFFALSE 14495
14475: GO 14477
14477: DISABLE
// begin enable ;
14478: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14479: LD_INT 3
14481: PPUSH
14482: LD_INT 20
14484: PPUSH
14485: LD_INT 22
14487: PPUSH
14488: LD_INT 23
14490: PPUSH
14491: CALL 9541 0 4
// end ;
14495: END
// every 0 0$1 trigger northBaseDefenders do
14496: LD_EXP 24
14500: IFFALSE 14524
14502: GO 14504
14504: DISABLE
// begin enable ;
14505: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14506: LD_INT 22
14508: PPUSH
14509: LD_INT 1
14511: PPUSH
14512: LD_EXP 24
14516: PPUSH
14517: LD_INT 2
14519: PPUSH
14520: CALL 9813 0 4
// end ;
14524: END
// every 0 0$1 trigger southBaseDefenders do
14525: LD_EXP 25
14529: IFFALSE 14553
14531: GO 14533
14533: DISABLE
// begin enable ;
14534: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14535: LD_INT 23
14537: PPUSH
14538: LD_INT 1
14540: PPUSH
14541: LD_EXP 25
14545: PPUSH
14546: LD_INT 33
14548: PPUSH
14549: CALL 9813 0 4
// end ; end_of_file
14553: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14554: LD_VAR 0 1
14558: PPUSH
14559: CALL 32486 0 1
// if unit = JMM then
14563: LD_VAR 0 1
14567: PUSH
14568: LD_EXP 1
14572: EQUAL
14573: IFFALSE 14582
// YouLost ( JMM ) ;
14575: LD_STRING JMM
14577: PPUSH
14578: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14582: LD_VAR 0 1
14586: PPUSH
14587: CALL_OW 266
14591: PUSH
14592: LD_INT 0
14594: EQUAL
14595: IFFALSE 14604
// YouLost ( DepotDestroyed ) ;
14597: LD_STRING DepotDestroyed
14599: PPUSH
14600: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 255
14613: PUSH
14614: LD_INT 1
14616: EQUAL
14617: PUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 247
14627: PUSH
14628: LD_INT 1
14630: EQUAL
14631: AND
14632: IFFALSE 14648
// deadsCounter = deadsCounter + 1 ;
14634: LD_ADDR_EXP 31
14638: PUSH
14639: LD_EXP 31
14643: PUSH
14644: LD_INT 1
14646: PLUS
14647: ST_TO_ADDR
// end ;
14648: PPOPN 1
14650: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
14651: LD_VAR 0 1
14655: PPUSH
14656: CALL_OW 255
14660: PUSH
14661: LD_INT 3
14663: EQUAL
14664: IFFALSE 14742
// begin ComMoveXY ( driver , 6 , 10 ) ;
14666: LD_VAR 0 1
14670: PPUSH
14671: LD_INT 6
14673: PPUSH
14674: LD_INT 10
14676: PPUSH
14677: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14681: LD_INT 35
14683: PPUSH
14684: CALL_OW 67
// ComMoveXY ( driver , 6 , 10 ) ;
14688: LD_VAR 0 1
14692: PPUSH
14693: LD_INT 6
14695: PPUSH
14696: LD_INT 10
14698: PPUSH
14699: CALL_OW 111
// if IsDead ( driver ) then
14703: LD_VAR 0 1
14707: PPUSH
14708: CALL_OW 301
14712: IFFALSE 14716
// exit ;
14714: GO 14742
// until IsAt ( driver , 6 , 10 ) ;
14716: LD_VAR 0 1
14720: PPUSH
14721: LD_INT 6
14723: PPUSH
14724: LD_INT 10
14726: PPUSH
14727: CALL_OW 307
14731: IFFALSE 14681
// RemoveUnit ( driver ) ;
14733: LD_VAR 0 1
14737: PPUSH
14738: CALL_OW 64
// end ; end ;
14742: PPOPN 4
14744: END
// on Command ( cmd ) do var i , j , tmp ;
14745: LD_INT 0
14747: PPUSH
14748: PPUSH
14749: PPUSH
// begin SOS_Command ( cmd ) ;
14750: LD_VAR 0 1
14754: PPUSH
14755: CALL 32590 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14759: LD_ADDR_VAR 0 2
14763: PUSH
14764: LD_INT 22
14766: PUSH
14767: LD_INT 1
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 21
14776: PUSH
14777: LD_INT 2
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PPUSH
14788: CALL_OW 69
14792: PUSH
14793: FOR_IN
14794: IFFALSE 14915
// begin if GetTaskList ( i ) then
14796: LD_VAR 0 2
14800: PPUSH
14801: CALL_OW 437
14805: IFFALSE 14913
// begin for j = 1 to GetTaskList ( i ) do
14807: LD_ADDR_VAR 0 3
14811: PUSH
14812: DOUBLE
14813: LD_INT 1
14815: DEC
14816: ST_TO_ADDR
14817: LD_VAR 0 2
14821: PPUSH
14822: CALL_OW 437
14826: PUSH
14827: FOR_TO
14828: IFFALSE 14911
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14830: LD_ADDR_VAR 0 4
14834: PUSH
14835: LD_VAR 0 2
14839: PPUSH
14840: CALL_OW 437
14844: PUSH
14845: LD_VAR 0 3
14849: ARRAY
14850: PUSH
14851: LD_INT 4
14853: ARRAY
14854: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14855: LD_VAR 0 4
14859: PPUSH
14860: CALL_OW 255
14864: PUSH
14865: LD_INT 3
14867: EQUAL
14868: PUSH
14869: LD_VAR 0 4
14873: PPUSH
14874: CALL_OW 247
14878: PUSH
14879: LD_INT 2
14881: EQUAL
14882: AND
14883: PUSH
14884: LD_VAR 0 4
14888: PPUSH
14889: CALL_OW 264
14893: PUSH
14894: LD_INT 51
14896: EQUAL
14897: AND
14898: IFFALSE 14909
// ComStop ( i ) ;
14900: LD_VAR 0 2
14904: PPUSH
14905: CALL_OW 141
// end ;
14909: GO 14827
14911: POP
14912: POP
// end ; end ;
14913: GO 14793
14915: POP
14916: POP
// end ;
14917: PPOPN 4
14919: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14920: LD_VAR 0 2
14924: PUSH
14925: LD_EXP 8
14929: EQUAL
14930: PUSH
14931: LD_EXP 21
14935: PUSH
14936: LD_INT 4
14938: NONEQUAL
14939: AND
14940: IFFALSE 15092
// begin if IsOk ( Mikhail ) then
14942: LD_EXP 8
14946: PPUSH
14947: CALL_OW 302
14951: IFFALSE 14959
// AskMikhail else
14953: CALL 7486 0 0
14957: GO 15092
// if IsOk ( llab1 ) then
14959: LD_INT 23
14961: PPUSH
14962: CALL_OW 302
14966: IFFALSE 15055
// begin InGameOn ;
14968: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14972: LD_EXP 8
14976: PPUSH
14977: LD_INT 6
14979: PPUSH
14980: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
14984: LD_INT 23
14986: PPUSH
14987: LD_INT 6
14989: PPUSH
14990: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
14994: LD_EXP 8
14998: PPUSH
14999: LD_INT 23
15001: PPUSH
15002: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15006: LD_INT 35
15008: PPUSH
15009: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
15013: LD_EXP 8
15017: PPUSH
15018: CALL_OW 310
15022: PUSH
15023: LD_INT 23
15025: EQUAL
15026: PUSH
15027: LD_EXP 8
15031: PPUSH
15032: CALL_OW 301
15036: OR
15037: IFFALSE 15006
// SetSide ( llab1 , 1 ) ;
15039: LD_INT 23
15041: PPUSH
15042: LD_INT 1
15044: PPUSH
15045: CALL_OW 235
// InGameOff ;
15049: CALL_OW 9
// end else
15053: GO 15092
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
15055: LD_INT 3
15057: PPUSH
15058: LD_INT 6
15060: PPUSH
15061: LD_INT 2
15063: PPUSH
15064: LD_INT 1
15066: PPUSH
15067: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
15071: LD_EXP 8
15075: PPUSH
15076: LD_INT 6
15078: PPUSH
15079: CALL_OW 235
// ComHold ( Mikhail ) ;
15083: LD_EXP 8
15087: PPUSH
15088: CALL_OW 140
// end ; end ; end ;
15092: PPOPN 2
15094: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15095: LD_VAR 0 1
15099: PPUSH
15100: LD_VAR 0 2
15104: PPUSH
15105: CALL 32606 0 2
// end ;
15109: PPOPN 2
15111: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
15112: LD_EXP 8
15116: PPUSH
15117: CALL_OW 257
15121: PUSH
15122: LD_INT 3
15124: NONEQUAL
15125: IFFALSE 15143
15127: GO 15129
15129: DISABLE
// begin enable ;
15130: ENABLE
// SetClass ( Mikhail , 3 ) ;
15131: LD_EXP 8
15135: PPUSH
15136: LD_INT 3
15138: PPUSH
15139: CALL_OW 336
// end ; end_of_file
15143: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
15144: LD_INT 22
15146: PUSH
15147: LD_INT 1
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 21
15156: PUSH
15157: LD_INT 1
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: LD_INT 25
15166: PUSH
15167: LD_INT 2
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: LIST
15178: PPUSH
15179: CALL_OW 69
15183: PUSH
15184: LD_INT 0
15186: EQUAL
15187: PUSH
15188: LD_INT 22
15190: PUSH
15191: LD_INT 4
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PUSH
15198: LD_INT 21
15200: PUSH
15201: LD_INT 1
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: PUSH
15208: LD_INT 25
15210: PUSH
15211: LD_INT 2
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: LIST
15222: PPUSH
15223: CALL_OW 69
15227: PUSH
15228: LD_INT 0
15230: EQUAL
15231: AND
15232: PUSH
15233: LD_INT 1
15235: PPUSH
15236: CALL_OW 255
15240: PUSH
15241: LD_INT 3
15243: EQUAL
15244: AND
15245: PUSH
15246: LD_INT 10
15248: PPUSH
15249: CALL_OW 255
15253: PUSH
15254: LD_INT 3
15256: EQUAL
15257: AND
15258: IFFALSE 15270
15260: GO 15262
15262: DISABLE
// YouLost ( Engineer ) ;
15263: LD_STRING Engineer
15265: PPUSH
15266: CALL_OW 104
15270: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
15271: LD_INT 1
15273: PPUSH
15274: CALL_OW 255
15278: PUSH
15279: LD_INT 3
15281: EQUAL
15282: PUSH
15283: LD_EXP 27
15287: PUSH
15288: LD_INT 1
15290: EQUAL
15291: AND
15292: IFFALSE 15304
15294: GO 15296
15296: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
15297: LD_STRING DepotCaptured
15299: PPUSH
15300: CALL_OW 104
15304: END
// export function PrepareTigers ; var i , un ; begin
15305: LD_INT 0
15307: PPUSH
15308: PPUSH
15309: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15310: LD_ADDR_VAR 0 2
15314: PUSH
15315: DOUBLE
15316: LD_INT 1
15318: DEC
15319: ST_TO_ADDR
15320: LD_INT 2
15322: PUSH
15323: LD_INT 3
15325: PUSH
15326: LD_INT 4
15328: PUSH
15329: LD_INT 5
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: PUSH
15338: LD_OWVAR 67
15342: ARRAY
15343: PUSH
15344: FOR_TO
15345: IFFALSE 15460
// begin uc_side := 0 ;
15347: LD_ADDR_OWVAR 20
15351: PUSH
15352: LD_INT 0
15354: ST_TO_ADDR
// uc_nation := nation_nature ;
15355: LD_ADDR_OWVAR 21
15359: PUSH
15360: LD_INT 0
15362: ST_TO_ADDR
// hc_sex := sex_male ;
15363: LD_ADDR_OWVAR 27
15367: PUSH
15368: LD_INT 1
15370: ST_TO_ADDR
// hc_class := class_tiger ;
15371: LD_ADDR_OWVAR 28
15375: PUSH
15376: LD_INT 14
15378: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
15379: LD_ADDR_OWVAR 31
15383: PUSH
15384: LD_EXP 14
15388: PUSH
15389: LD_INT 0
15391: PUSH
15392: LD_INT 0
15394: PUSH
15395: LD_INT 0
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
15404: LD_ADDR_OWVAR 35
15408: PUSH
15409: LD_INT 30
15411: PUSH
15412: LD_INT 40
15414: PUSH
15415: LD_INT 45
15417: PUSH
15418: LD_INT 50
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: PUSH
15427: LD_OWVAR 67
15431: ARRAY
15432: ST_TO_ADDR
// un = CreateHuman ;
15433: LD_ADDR_VAR 0 3
15437: PUSH
15438: CALL_OW 44
15442: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15443: LD_VAR 0 3
15447: PPUSH
15448: LD_INT 27
15450: PPUSH
15451: LD_INT 0
15453: PPUSH
15454: CALL_OW 49
// end ;
15458: GO 15344
15460: POP
15461: POP
// end ; end_of_file
15462: LD_VAR 0 1
15466: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15467: LD_INT 1
15469: PPUSH
15470: CALL_OW 255
15474: PUSH
15475: LD_INT 1
15477: EQUAL
15478: PUSH
15479: LD_INT 10
15481: PPUSH
15482: CALL_OW 255
15486: PUSH
15487: LD_INT 1
15489: EQUAL
15490: AND
15491: PUSH
15492: LD_EXP 20
15496: PUSH
15497: LD_INT 1
15499: EQUAL
15500: AND
15501: PUSH
15502: LD_INT 22
15504: PUSH
15505: LD_INT 3
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 21
15514: PUSH
15515: LD_INT 2
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 34
15524: PUSH
15525: LD_INT 51
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 3
15534: PUSH
15535: LD_INT 58
15537: PUSH
15538: EMPTY
15539: LIST
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: PPUSH
15551: CALL_OW 69
15555: PUSH
15556: LD_INT 0
15558: EQUAL
15559: AND
15560: IFFALSE 15651
15562: GO 15564
15564: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15565: LD_INT 9450
15567: PUSH
15568: LD_INT 8400
15570: PUSH
15571: LD_INT 6300
15573: PUSH
15574: LD_INT 6300
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: PUSH
15583: LD_OWVAR 67
15587: ARRAY
15588: PPUSH
15589: CALL_OW 67
// if cargoEscape then
15593: LD_EXP 20
15597: IFFALSE 15651
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15599: LD_EXP 9
15603: PPUSH
15604: LD_STRING D6-Pow-1
15606: PPUSH
15607: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15611: LD_EXP 1
15615: PPUSH
15616: LD_STRING D6-JMM-1
15618: PPUSH
15619: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15623: LD_EXP 9
15627: PPUSH
15628: LD_STRING D6-Pow-2
15630: PPUSH
15631: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15635: LD_EXP 1
15639: PPUSH
15640: LD_STRING D6-JMM-2
15642: PPUSH
15643: CALL_OW 88
// FinishMission ;
15647: CALL 15867 0 0
// end ; end ;
15651: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15652: LD_INT 1
15654: PPUSH
15655: CALL_OW 255
15659: PUSH
15660: LD_INT 1
15662: EQUAL
15663: PUSH
15664: LD_INT 10
15666: PPUSH
15667: CALL_OW 255
15671: PUSH
15672: LD_INT 1
15674: EQUAL
15675: AND
15676: PUSH
15677: LD_EXP 20
15681: PUSH
15682: LD_INT 1
15684: GREATER
15685: AND
15686: IFFALSE 15761
15688: GO 15690
15690: DISABLE
15691: LD_INT 0
15693: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15694: LD_INT 11550
15696: PUSH
15697: LD_INT 10500
15699: PUSH
15700: LD_INT 9450
15702: PUSH
15703: LD_INT 8400
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: PUSH
15712: LD_OWVAR 67
15716: ARRAY
15717: PPUSH
15718: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15722: LD_INT 1
15724: PUSH
15725: LD_INT 2
15727: PUSH
15728: LD_INT 3
15730: PUSH
15731: LD_INT 4
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: PUSH
15740: LD_OWVAR 67
15744: ARRAY
15745: PPUSH
15746: LD_INT 13
15748: PPUSH
15749: CALL 13342 0 2
// lastBattle = 1 ;
15753: LD_ADDR_EXP 27
15757: PUSH
15758: LD_INT 1
15760: ST_TO_ADDR
// end ;
15761: PPOPN 1
15763: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15764: LD_EXP 27
15768: PUSH
15769: LD_INT 1
15771: EQUAL
15772: PUSH
15773: LD_INT 26
15775: PPUSH
15776: LD_INT 22
15778: PUSH
15779: LD_INT 3
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: LD_INT 21
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PPUSH
15800: CALL_OW 70
15804: PUSH
15805: LD_INT 0
15807: EQUAL
15808: AND
15809: IFFALSE 15866
15811: GO 15813
15813: DISABLE
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15814: LD_EXP 9
15818: PPUSH
15819: LD_STRING D6-Pow-1
15821: PPUSH
15822: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15826: LD_EXP 1
15830: PPUSH
15831: LD_STRING D6-JMM-1
15833: PPUSH
15834: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15838: LD_EXP 9
15842: PPUSH
15843: LD_STRING D6-Pow-2
15845: PPUSH
15846: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15850: LD_EXP 1
15854: PPUSH
15855: LD_STRING D6-JMM-2
15857: PPUSH
15858: CALL_OW 88
// FinishMission ;
15862: CALL 15867 0 0
// end ;
15866: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
15867: LD_INT 0
15869: PPUSH
15870: PPUSH
15871: PPUSH
15872: PPUSH
15873: PPUSH
// if tick <= 18 18$00 then
15874: LD_OWVAR 1
15878: PUSH
15879: LD_INT 37800
15881: LESSEQUAL
15882: IFFALSE 15891
// SetAchievement ( ACH_ASPEED_2 ) ;
15884: LD_STRING ACH_ASPEED_2
15886: PPUSH
15887: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15891: LD_ADDR_VAR 0 2
15895: PUSH
15896: LD_INT 22
15898: PUSH
15899: LD_INT 1
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: LD_INT 21
15908: PUSH
15909: LD_INT 2
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PUSH
15916: LD_INT 24
15918: PUSH
15919: LD_INT 251
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: LIST
15930: PPUSH
15931: CALL_OW 69
15935: ST_TO_ADDR
// if tmp then
15936: LD_VAR 0 2
15940: IFFALSE 15954
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15942: LD_VAR 0 2
15946: PPUSH
15947: LD_STRING 02_tanks_1
15949: PPUSH
15950: CALL 10688 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15954: LD_EXP 21
15958: PUSH
15959: LD_INT 1
15961: EQUAL
15962: PUSH
15963: LD_EXP 8
15967: PPUSH
15968: CALL_OW 300
15972: AND
15973: IFFALSE 15987
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15975: LD_EXP 21
15979: PPUSH
15980: LD_STRING 02_mikhailStatus_1
15982: PPUSH
15983: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15987: LD_INT 1
15989: PPUSH
15990: CALL_OW 274
15994: PPUSH
15995: LD_INT 1
15997: PPUSH
15998: CALL_OW 275
16002: PPUSH
16003: LD_STRING 02_resources_4
16005: PPUSH
16006: CALL_OW 39
// m1 := false ;
16010: LD_ADDR_VAR 0 3
16014: PUSH
16015: LD_INT 0
16017: ST_TO_ADDR
// m2 := false ;
16018: LD_ADDR_VAR 0 4
16022: PUSH
16023: LD_INT 0
16025: ST_TO_ADDR
// m3 := false ;
16026: LD_ADDR_VAR 0 5
16030: PUSH
16031: LD_INT 0
16033: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
16034: LD_INT 1
16036: PPUSH
16037: CALL_OW 274
16041: PPUSH
16042: LD_INT 1
16044: PPUSH
16045: CALL_OW 275
16049: PUSH
16050: LD_INT 200
16052: GREATEREQUAL
16053: IFFALSE 16075
// begin AddMedal ( Cans , 1 ) ;
16055: LD_STRING Cans
16057: PPUSH
16058: LD_INT 1
16060: PPUSH
16061: CALL_OW 101
// m1 := true ;
16065: LD_ADDR_VAR 0 3
16069: PUSH
16070: LD_INT 1
16072: ST_TO_ADDR
// end else
16073: GO 16086
// begin AddMedal ( Cans , - 1 ) ;
16075: LD_STRING Cans
16077: PPUSH
16078: LD_INT 1
16080: NEG
16081: PPUSH
16082: CALL_OW 101
// end ; if deadsCounter < 2 then
16086: LD_EXP 31
16090: PUSH
16091: LD_INT 2
16093: LESS
16094: IFFALSE 16116
// begin AddMedal ( Deaths , 1 ) ;
16096: LD_STRING Deaths
16098: PPUSH
16099: LD_INT 1
16101: PPUSH
16102: CALL_OW 101
// m2 := true ;
16106: LD_ADDR_VAR 0 4
16110: PUSH
16111: LD_INT 1
16113: ST_TO_ADDR
// end else
16114: GO 16127
// begin AddMedal ( Deaths , - 1 ) ;
16116: LD_STRING Deaths
16118: PPUSH
16119: LD_INT 1
16121: NEG
16122: PPUSH
16123: CALL_OW 101
// end ; if mikhailStatus = 0 then
16127: LD_EXP 21
16131: PUSH
16132: LD_INT 0
16134: EQUAL
16135: IFFALSE 16148
// AddMedal ( Prisoner , - 1 ) ;
16137: LD_STRING Prisoner
16139: PPUSH
16140: LD_INT 1
16142: NEG
16143: PPUSH
16144: CALL_OW 101
// if mikhailStatus = 1 then
16148: LD_EXP 21
16152: PUSH
16153: LD_INT 1
16155: EQUAL
16156: IFFALSE 16176
// begin AddMedal ( Prisoner , 1 ) ;
16158: LD_STRING Prisoner
16160: PPUSH
16161: LD_INT 1
16163: PPUSH
16164: CALL_OW 101
// m3 := true ;
16168: LD_ADDR_VAR 0 5
16172: PUSH
16173: LD_INT 1
16175: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
16176: LD_EXP 21
16180: PUSH
16181: LD_INT 2
16183: EQUAL
16184: IFFALSE 16204
// begin AddMedal ( Prisoner , 2 ) ;
16186: LD_STRING Prisoner
16188: PPUSH
16189: LD_INT 2
16191: PPUSH
16192: CALL_OW 101
// m3 := true ;
16196: LD_ADDR_VAR 0 5
16200: PUSH
16201: LD_INT 1
16203: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
16204: LD_EXP 21
16208: PUSH
16209: LD_INT 3
16211: EQUAL
16212: IFFALSE 16225
// AddMedal ( Prisoner , - 2 ) ;
16214: LD_STRING Prisoner
16216: PPUSH
16217: LD_INT 2
16219: NEG
16220: PPUSH
16221: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
16225: LD_OWVAR 67
16229: PUSH
16230: LD_INT 3
16232: GREATEREQUAL
16233: PUSH
16234: LD_VAR 0 3
16238: AND
16239: PUSH
16240: LD_VAR 0 4
16244: AND
16245: PUSH
16246: LD_VAR 0 5
16250: AND
16251: IFFALSE 16263
// SetAchievementEX ( ACH_AMER , 2 ) ;
16253: LD_STRING ACH_AMER
16255: PPUSH
16256: LD_INT 2
16258: PPUSH
16259: CALL_OW 564
// GiveMedals ( MAIN ) ;
16263: LD_STRING MAIN
16265: PPUSH
16266: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
16270: LD_INT 22
16272: PUSH
16273: LD_INT 1
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 23
16282: PUSH
16283: LD_INT 1
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 21
16292: PUSH
16293: LD_INT 1
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: LIST
16304: PPUSH
16305: CALL_OW 69
16309: PPUSH
16310: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
16314: LD_EXP 1
16318: PPUSH
16319: LD_EXP 33
16323: PUSH
16324: LD_STRING JMM
16326: STR
16327: PPUSH
16328: CALL_OW 38
// if IsOK ( Bobby ) then
16332: LD_EXP 2
16336: PPUSH
16337: CALL_OW 302
16341: IFFALSE 16361
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16343: LD_EXP 2
16347: PPUSH
16348: LD_EXP 33
16352: PUSH
16353: LD_STRING Bobby
16355: STR
16356: PPUSH
16357: CALL_OW 38
// if IsOK ( Cyrus ) then
16361: LD_EXP 3
16365: PPUSH
16366: CALL_OW 302
16370: IFFALSE 16390
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16372: LD_EXP 3
16376: PPUSH
16377: LD_EXP 33
16381: PUSH
16382: LD_STRING Cyrus
16384: STR
16385: PPUSH
16386: CALL_OW 38
// if IsOK ( Lisa ) then
16390: LD_EXP 4
16394: PPUSH
16395: CALL_OW 302
16399: IFFALSE 16426
// begin ToLua ( enableBioCharacter(BIO_LISA) ) ;
16401: LD_STRING enableBioCharacter(BIO_LISA)
16403: PPUSH
16404: CALL_OW 559
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
16408: LD_EXP 4
16412: PPUSH
16413: LD_EXP 33
16417: PUSH
16418: LD_STRING Lisa
16420: STR
16421: PPUSH
16422: CALL_OW 38
// end ; if IsOK ( Khatam ) then
16426: LD_EXP 5
16430: PPUSH
16431: CALL_OW 302
16435: IFFALSE 16462
// begin ToLua ( enableBioCharacter(BIO_KHAT) ) ;
16437: LD_STRING enableBioCharacter(BIO_KHAT)
16439: PPUSH
16440: CALL_OW 559
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16444: LD_EXP 5
16448: PPUSH
16449: LD_EXP 33
16453: PUSH
16454: LD_STRING Khatam
16456: STR
16457: PPUSH
16458: CALL_OW 38
// end ; if IsOK ( Brian ) then
16462: LD_EXP 6
16466: PPUSH
16467: CALL_OW 302
16471: IFFALSE 16491
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16473: LD_EXP 6
16477: PPUSH
16478: LD_EXP 33
16482: PUSH
16483: LD_STRING Brian
16485: STR
16486: PPUSH
16487: CALL_OW 38
// if IsOk ( Jerry ) then
16491: LD_EXP 7
16495: PPUSH
16496: CALL_OW 302
16500: IFFALSE 16520
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16502: LD_EXP 7
16506: PPUSH
16507: LD_EXP 33
16511: PUSH
16512: LD_STRING Jerry
16514: STR
16515: PPUSH
16516: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16520: LD_EXP 21
16524: PUSH
16525: LD_INT 1
16527: EQUAL
16528: PUSH
16529: LD_EXP 8
16533: PPUSH
16534: CALL_OW 255
16538: PUSH
16539: LD_INT 1
16541: EQUAL
16542: AND
16543: PUSH
16544: LD_EXP 8
16548: PPUSH
16549: CALL_OW 302
16553: AND
16554: IFFALSE 16581
// begin ToLua ( enableBioCharacter(BIO_MICH) ) ;
16556: LD_STRING enableBioCharacter(BIO_MICH)
16558: PPUSH
16559: CALL_OW 559
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16563: LD_EXP 8
16567: PPUSH
16568: LD_EXP 33
16572: PUSH
16573: LD_STRING Mikhail
16575: STR
16576: PPUSH
16577: CALL_OW 38
// end ; SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16581: LD_INT 50
16583: PUSH
16584: EMPTY
16585: LIST
16586: PUSH
16587: LD_INT 22
16589: PUSH
16590: LD_INT 1
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 21
16599: PUSH
16600: LD_INT 1
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: LIST
16611: PPUSH
16612: CALL_OW 69
16616: PUSH
16617: LD_EXP 1
16621: PUSH
16622: LD_EXP 2
16626: PUSH
16627: LD_EXP 3
16631: PUSH
16632: LD_EXP 4
16636: PUSH
16637: LD_EXP 5
16641: PUSH
16642: LD_EXP 6
16646: PUSH
16647: LD_EXP 7
16651: PUSH
16652: LD_EXP 8
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: DIFF
16667: PPUSH
16668: LD_STRING 02_other_survivors
16670: PPUSH
16671: CALL_OW 38
// YouWin ;
16675: CALL_OW 103
// end ; end_of_file end_of_file
16679: LD_VAR 0 1
16683: RET
// export globalGameSaveCounter ; every 0 0$1 do
16684: GO 16686
16686: DISABLE
// begin enable ;
16687: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16688: LD_STRING updateTimer(
16690: PUSH
16691: LD_OWVAR 1
16695: STR
16696: PUSH
16697: LD_STRING );
16699: STR
16700: PPUSH
16701: CALL_OW 559
// end ;
16705: END
// every 0 0$1 do
16706: GO 16708
16708: DISABLE
// begin globalGameSaveCounter := 0 ;
16709: LD_ADDR_EXP 36
16713: PUSH
16714: LD_INT 0
16716: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
16717: LD_STRING setGameSaveCounter(0)
16719: PPUSH
16720: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
16724: LD_STRING initStreamRollete();
16726: PPUSH
16727: CALL_OW 559
// InitStreamMode ;
16731: CALL 18057 0 0
// DefineStreamItems ( false ) ;
16735: LD_INT 0
16737: PPUSH
16738: CALL 18521 0 1
// end ;
16742: END
// export function SOS_MapStart ( ) ; begin
16743: LD_INT 0
16745: PPUSH
// if streamModeActive then
16746: LD_EXP 37
16750: IFFALSE 16759
// DefineStreamItems ( true ) ;
16752: LD_INT 1
16754: PPUSH
16755: CALL 18521 0 1
// UpdateLuaVariables ( ) ;
16759: CALL 16776 0 0
// UpdateFactoryWaypoints ( ) ;
16763: CALL 31390 0 0
// UpdateWarehouseGatheringPoints ( ) ;
16767: CALL 31647 0 0
// end ;
16771: LD_VAR 0 1
16775: RET
// function UpdateLuaVariables ( ) ; begin
16776: LD_INT 0
16778: PPUSH
// if globalGameSaveCounter then
16779: LD_EXP 36
16783: IFFALSE 16817
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
16785: LD_ADDR_EXP 36
16789: PUSH
16790: LD_EXP 36
16794: PPUSH
16795: CALL 75428 0 1
16799: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16800: LD_STRING setGameSaveCounter(
16802: PUSH
16803: LD_EXP 36
16807: STR
16808: PUSH
16809: LD_STRING )
16811: STR
16812: PPUSH
16813: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
16817: LD_STRING setGameDifficulty(
16819: PUSH
16820: LD_OWVAR 67
16824: STR
16825: PUSH
16826: LD_STRING )
16828: STR
16829: PPUSH
16830: CALL_OW 559
// end ;
16834: LD_VAR 0 1
16838: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16839: LD_INT 0
16841: PPUSH
// if p2 = stream_mode then
16842: LD_VAR 0 2
16846: PUSH
16847: LD_INT 100
16849: EQUAL
16850: IFFALSE 17853
// begin if not StreamModeActive then
16852: LD_EXP 37
16856: NOT
16857: IFFALSE 16867
// StreamModeActive := true ;
16859: LD_ADDR_EXP 37
16863: PUSH
16864: LD_INT 1
16866: ST_TO_ADDR
// if p3 = 0 then
16867: LD_VAR 0 3
16871: PUSH
16872: LD_INT 0
16874: EQUAL
16875: IFFALSE 16881
// InitStreamMode ;
16877: CALL 18057 0 0
// if p3 = 1 then
16881: LD_VAR 0 3
16885: PUSH
16886: LD_INT 1
16888: EQUAL
16889: IFFALSE 16899
// sRocket := true ;
16891: LD_ADDR_EXP 42
16895: PUSH
16896: LD_INT 1
16898: ST_TO_ADDR
// if p3 = 2 then
16899: LD_VAR 0 3
16903: PUSH
16904: LD_INT 2
16906: EQUAL
16907: IFFALSE 16917
// sSpeed := true ;
16909: LD_ADDR_EXP 41
16913: PUSH
16914: LD_INT 1
16916: ST_TO_ADDR
// if p3 = 3 then
16917: LD_VAR 0 3
16921: PUSH
16922: LD_INT 3
16924: EQUAL
16925: IFFALSE 16935
// sEngine := true ;
16927: LD_ADDR_EXP 43
16931: PUSH
16932: LD_INT 1
16934: ST_TO_ADDR
// if p3 = 4 then
16935: LD_VAR 0 3
16939: PUSH
16940: LD_INT 4
16942: EQUAL
16943: IFFALSE 16953
// sSpec := true ;
16945: LD_ADDR_EXP 40
16949: PUSH
16950: LD_INT 1
16952: ST_TO_ADDR
// if p3 = 5 then
16953: LD_VAR 0 3
16957: PUSH
16958: LD_INT 5
16960: EQUAL
16961: IFFALSE 16971
// sLevel := true ;
16963: LD_ADDR_EXP 44
16967: PUSH
16968: LD_INT 1
16970: ST_TO_ADDR
// if p3 = 6 then
16971: LD_VAR 0 3
16975: PUSH
16976: LD_INT 6
16978: EQUAL
16979: IFFALSE 16989
// sArmoury := true ;
16981: LD_ADDR_EXP 45
16985: PUSH
16986: LD_INT 1
16988: ST_TO_ADDR
// if p3 = 7 then
16989: LD_VAR 0 3
16993: PUSH
16994: LD_INT 7
16996: EQUAL
16997: IFFALSE 17007
// sRadar := true ;
16999: LD_ADDR_EXP 46
17003: PUSH
17004: LD_INT 1
17006: ST_TO_ADDR
// if p3 = 8 then
17007: LD_VAR 0 3
17011: PUSH
17012: LD_INT 8
17014: EQUAL
17015: IFFALSE 17025
// sBunker := true ;
17017: LD_ADDR_EXP 47
17021: PUSH
17022: LD_INT 1
17024: ST_TO_ADDR
// if p3 = 9 then
17025: LD_VAR 0 3
17029: PUSH
17030: LD_INT 9
17032: EQUAL
17033: IFFALSE 17043
// sHack := true ;
17035: LD_ADDR_EXP 48
17039: PUSH
17040: LD_INT 1
17042: ST_TO_ADDR
// if p3 = 10 then
17043: LD_VAR 0 3
17047: PUSH
17048: LD_INT 10
17050: EQUAL
17051: IFFALSE 17061
// sFire := true ;
17053: LD_ADDR_EXP 49
17057: PUSH
17058: LD_INT 1
17060: ST_TO_ADDR
// if p3 = 11 then
17061: LD_VAR 0 3
17065: PUSH
17066: LD_INT 11
17068: EQUAL
17069: IFFALSE 17079
// sRefresh := true ;
17071: LD_ADDR_EXP 50
17075: PUSH
17076: LD_INT 1
17078: ST_TO_ADDR
// if p3 = 12 then
17079: LD_VAR 0 3
17083: PUSH
17084: LD_INT 12
17086: EQUAL
17087: IFFALSE 17097
// sExp := true ;
17089: LD_ADDR_EXP 51
17093: PUSH
17094: LD_INT 1
17096: ST_TO_ADDR
// if p3 = 13 then
17097: LD_VAR 0 3
17101: PUSH
17102: LD_INT 13
17104: EQUAL
17105: IFFALSE 17115
// sDepot := true ;
17107: LD_ADDR_EXP 52
17111: PUSH
17112: LD_INT 1
17114: ST_TO_ADDR
// if p3 = 14 then
17115: LD_VAR 0 3
17119: PUSH
17120: LD_INT 14
17122: EQUAL
17123: IFFALSE 17133
// sFlag := true ;
17125: LD_ADDR_EXP 53
17129: PUSH
17130: LD_INT 1
17132: ST_TO_ADDR
// if p3 = 15 then
17133: LD_VAR 0 3
17137: PUSH
17138: LD_INT 15
17140: EQUAL
17141: IFFALSE 17151
// sKamikadze := true ;
17143: LD_ADDR_EXP 61
17147: PUSH
17148: LD_INT 1
17150: ST_TO_ADDR
// if p3 = 16 then
17151: LD_VAR 0 3
17155: PUSH
17156: LD_INT 16
17158: EQUAL
17159: IFFALSE 17169
// sTroll := true ;
17161: LD_ADDR_EXP 62
17165: PUSH
17166: LD_INT 1
17168: ST_TO_ADDR
// if p3 = 17 then
17169: LD_VAR 0 3
17173: PUSH
17174: LD_INT 17
17176: EQUAL
17177: IFFALSE 17187
// sSlow := true ;
17179: LD_ADDR_EXP 63
17183: PUSH
17184: LD_INT 1
17186: ST_TO_ADDR
// if p3 = 18 then
17187: LD_VAR 0 3
17191: PUSH
17192: LD_INT 18
17194: EQUAL
17195: IFFALSE 17205
// sLack := true ;
17197: LD_ADDR_EXP 64
17201: PUSH
17202: LD_INT 1
17204: ST_TO_ADDR
// if p3 = 19 then
17205: LD_VAR 0 3
17209: PUSH
17210: LD_INT 19
17212: EQUAL
17213: IFFALSE 17223
// sTank := true ;
17215: LD_ADDR_EXP 66
17219: PUSH
17220: LD_INT 1
17222: ST_TO_ADDR
// if p3 = 20 then
17223: LD_VAR 0 3
17227: PUSH
17228: LD_INT 20
17230: EQUAL
17231: IFFALSE 17241
// sRemote := true ;
17233: LD_ADDR_EXP 67
17237: PUSH
17238: LD_INT 1
17240: ST_TO_ADDR
// if p3 = 21 then
17241: LD_VAR 0 3
17245: PUSH
17246: LD_INT 21
17248: EQUAL
17249: IFFALSE 17259
// sPowell := true ;
17251: LD_ADDR_EXP 68
17255: PUSH
17256: LD_INT 1
17258: ST_TO_ADDR
// if p3 = 22 then
17259: LD_VAR 0 3
17263: PUSH
17264: LD_INT 22
17266: EQUAL
17267: IFFALSE 17277
// sTeleport := true ;
17269: LD_ADDR_EXP 71
17273: PUSH
17274: LD_INT 1
17276: ST_TO_ADDR
// if p3 = 23 then
17277: LD_VAR 0 3
17281: PUSH
17282: LD_INT 23
17284: EQUAL
17285: IFFALSE 17295
// sOilTower := true ;
17287: LD_ADDR_EXP 73
17291: PUSH
17292: LD_INT 1
17294: ST_TO_ADDR
// if p3 = 24 then
17295: LD_VAR 0 3
17299: PUSH
17300: LD_INT 24
17302: EQUAL
17303: IFFALSE 17313
// sShovel := true ;
17305: LD_ADDR_EXP 74
17309: PUSH
17310: LD_INT 1
17312: ST_TO_ADDR
// if p3 = 25 then
17313: LD_VAR 0 3
17317: PUSH
17318: LD_INT 25
17320: EQUAL
17321: IFFALSE 17331
// sSheik := true ;
17323: LD_ADDR_EXP 75
17327: PUSH
17328: LD_INT 1
17330: ST_TO_ADDR
// if p3 = 26 then
17331: LD_VAR 0 3
17335: PUSH
17336: LD_INT 26
17338: EQUAL
17339: IFFALSE 17349
// sEarthquake := true ;
17341: LD_ADDR_EXP 77
17345: PUSH
17346: LD_INT 1
17348: ST_TO_ADDR
// if p3 = 27 then
17349: LD_VAR 0 3
17353: PUSH
17354: LD_INT 27
17356: EQUAL
17357: IFFALSE 17367
// sAI := true ;
17359: LD_ADDR_EXP 78
17363: PUSH
17364: LD_INT 1
17366: ST_TO_ADDR
// if p3 = 28 then
17367: LD_VAR 0 3
17371: PUSH
17372: LD_INT 28
17374: EQUAL
17375: IFFALSE 17385
// sCargo := true ;
17377: LD_ADDR_EXP 81
17381: PUSH
17382: LD_INT 1
17384: ST_TO_ADDR
// if p3 = 29 then
17385: LD_VAR 0 3
17389: PUSH
17390: LD_INT 29
17392: EQUAL
17393: IFFALSE 17403
// sDLaser := true ;
17395: LD_ADDR_EXP 82
17399: PUSH
17400: LD_INT 1
17402: ST_TO_ADDR
// if p3 = 30 then
17403: LD_VAR 0 3
17407: PUSH
17408: LD_INT 30
17410: EQUAL
17411: IFFALSE 17421
// sExchange := true ;
17413: LD_ADDR_EXP 83
17417: PUSH
17418: LD_INT 1
17420: ST_TO_ADDR
// if p3 = 31 then
17421: LD_VAR 0 3
17425: PUSH
17426: LD_INT 31
17428: EQUAL
17429: IFFALSE 17439
// sFac := true ;
17431: LD_ADDR_EXP 84
17435: PUSH
17436: LD_INT 1
17438: ST_TO_ADDR
// if p3 = 32 then
17439: LD_VAR 0 3
17443: PUSH
17444: LD_INT 32
17446: EQUAL
17447: IFFALSE 17457
// sPower := true ;
17449: LD_ADDR_EXP 85
17453: PUSH
17454: LD_INT 1
17456: ST_TO_ADDR
// if p3 = 33 then
17457: LD_VAR 0 3
17461: PUSH
17462: LD_INT 33
17464: EQUAL
17465: IFFALSE 17475
// sRandom := true ;
17467: LD_ADDR_EXP 86
17471: PUSH
17472: LD_INT 1
17474: ST_TO_ADDR
// if p3 = 34 then
17475: LD_VAR 0 3
17479: PUSH
17480: LD_INT 34
17482: EQUAL
17483: IFFALSE 17493
// sShield := true ;
17485: LD_ADDR_EXP 87
17489: PUSH
17490: LD_INT 1
17492: ST_TO_ADDR
// if p3 = 35 then
17493: LD_VAR 0 3
17497: PUSH
17498: LD_INT 35
17500: EQUAL
17501: IFFALSE 17511
// sTime := true ;
17503: LD_ADDR_EXP 88
17507: PUSH
17508: LD_INT 1
17510: ST_TO_ADDR
// if p3 = 36 then
17511: LD_VAR 0 3
17515: PUSH
17516: LD_INT 36
17518: EQUAL
17519: IFFALSE 17529
// sTools := true ;
17521: LD_ADDR_EXP 89
17525: PUSH
17526: LD_INT 1
17528: ST_TO_ADDR
// if p3 = 101 then
17529: LD_VAR 0 3
17533: PUSH
17534: LD_INT 101
17536: EQUAL
17537: IFFALSE 17547
// sSold := true ;
17539: LD_ADDR_EXP 54
17543: PUSH
17544: LD_INT 1
17546: ST_TO_ADDR
// if p3 = 102 then
17547: LD_VAR 0 3
17551: PUSH
17552: LD_INT 102
17554: EQUAL
17555: IFFALSE 17565
// sDiff := true ;
17557: LD_ADDR_EXP 55
17561: PUSH
17562: LD_INT 1
17564: ST_TO_ADDR
// if p3 = 103 then
17565: LD_VAR 0 3
17569: PUSH
17570: LD_INT 103
17572: EQUAL
17573: IFFALSE 17583
// sFog := true ;
17575: LD_ADDR_EXP 58
17579: PUSH
17580: LD_INT 1
17582: ST_TO_ADDR
// if p3 = 104 then
17583: LD_VAR 0 3
17587: PUSH
17588: LD_INT 104
17590: EQUAL
17591: IFFALSE 17601
// sReset := true ;
17593: LD_ADDR_EXP 59
17597: PUSH
17598: LD_INT 1
17600: ST_TO_ADDR
// if p3 = 105 then
17601: LD_VAR 0 3
17605: PUSH
17606: LD_INT 105
17608: EQUAL
17609: IFFALSE 17619
// sSun := true ;
17611: LD_ADDR_EXP 60
17615: PUSH
17616: LD_INT 1
17618: ST_TO_ADDR
// if p3 = 106 then
17619: LD_VAR 0 3
17623: PUSH
17624: LD_INT 106
17626: EQUAL
17627: IFFALSE 17637
// sTiger := true ;
17629: LD_ADDR_EXP 56
17633: PUSH
17634: LD_INT 1
17636: ST_TO_ADDR
// if p3 = 107 then
17637: LD_VAR 0 3
17641: PUSH
17642: LD_INT 107
17644: EQUAL
17645: IFFALSE 17655
// sBomb := true ;
17647: LD_ADDR_EXP 57
17651: PUSH
17652: LD_INT 1
17654: ST_TO_ADDR
// if p3 = 108 then
17655: LD_VAR 0 3
17659: PUSH
17660: LD_INT 108
17662: EQUAL
17663: IFFALSE 17673
// sWound := true ;
17665: LD_ADDR_EXP 65
17669: PUSH
17670: LD_INT 1
17672: ST_TO_ADDR
// if p3 = 109 then
17673: LD_VAR 0 3
17677: PUSH
17678: LD_INT 109
17680: EQUAL
17681: IFFALSE 17691
// sBetray := true ;
17683: LD_ADDR_EXP 69
17687: PUSH
17688: LD_INT 1
17690: ST_TO_ADDR
// if p3 = 110 then
17691: LD_VAR 0 3
17695: PUSH
17696: LD_INT 110
17698: EQUAL
17699: IFFALSE 17709
// sContamin := true ;
17701: LD_ADDR_EXP 70
17705: PUSH
17706: LD_INT 1
17708: ST_TO_ADDR
// if p3 = 111 then
17709: LD_VAR 0 3
17713: PUSH
17714: LD_INT 111
17716: EQUAL
17717: IFFALSE 17727
// sOil := true ;
17719: LD_ADDR_EXP 72
17723: PUSH
17724: LD_INT 1
17726: ST_TO_ADDR
// if p3 = 112 then
17727: LD_VAR 0 3
17731: PUSH
17732: LD_INT 112
17734: EQUAL
17735: IFFALSE 17745
// sStu := true ;
17737: LD_ADDR_EXP 76
17741: PUSH
17742: LD_INT 1
17744: ST_TO_ADDR
// if p3 = 113 then
17745: LD_VAR 0 3
17749: PUSH
17750: LD_INT 113
17752: EQUAL
17753: IFFALSE 17763
// sBazooka := true ;
17755: LD_ADDR_EXP 79
17759: PUSH
17760: LD_INT 1
17762: ST_TO_ADDR
// if p3 = 114 then
17763: LD_VAR 0 3
17767: PUSH
17768: LD_INT 114
17770: EQUAL
17771: IFFALSE 17781
// sMortar := true ;
17773: LD_ADDR_EXP 80
17777: PUSH
17778: LD_INT 1
17780: ST_TO_ADDR
// if p3 = 115 then
17781: LD_VAR 0 3
17785: PUSH
17786: LD_INT 115
17788: EQUAL
17789: IFFALSE 17799
// sRanger := true ;
17791: LD_ADDR_EXP 90
17795: PUSH
17796: LD_INT 1
17798: ST_TO_ADDR
// if p3 = 116 then
17799: LD_VAR 0 3
17803: PUSH
17804: LD_INT 116
17806: EQUAL
17807: IFFALSE 17817
// sComputer := true ;
17809: LD_ADDR_EXP 91
17813: PUSH
17814: LD_INT 1
17816: ST_TO_ADDR
// if p3 = 117 then
17817: LD_VAR 0 3
17821: PUSH
17822: LD_INT 117
17824: EQUAL
17825: IFFALSE 17835
// s30 := true ;
17827: LD_ADDR_EXP 92
17831: PUSH
17832: LD_INT 1
17834: ST_TO_ADDR
// if p3 = 118 then
17835: LD_VAR 0 3
17839: PUSH
17840: LD_INT 118
17842: EQUAL
17843: IFFALSE 17853
// s60 := true ;
17845: LD_ADDR_EXP 93
17849: PUSH
17850: LD_INT 1
17852: ST_TO_ADDR
// end ; if p2 = hack_mode then
17853: LD_VAR 0 2
17857: PUSH
17858: LD_INT 101
17860: EQUAL
17861: IFFALSE 17989
// begin case p3 of 1 :
17863: LD_VAR 0 3
17867: PUSH
17868: LD_INT 1
17870: DOUBLE
17871: EQUAL
17872: IFTRUE 17876
17874: GO 17883
17876: POP
// hHackUnlimitedResources ; 2 :
17877: CALL 30136 0 0
17881: GO 17989
17883: LD_INT 2
17885: DOUBLE
17886: EQUAL
17887: IFTRUE 17891
17889: GO 17898
17891: POP
// hHackSetLevel10 ; 3 :
17892: CALL 30269 0 0
17896: GO 17989
17898: LD_INT 3
17900: DOUBLE
17901: EQUAL
17902: IFTRUE 17906
17904: GO 17913
17906: POP
// hHackSetLevel10YourUnits ; 4 :
17907: CALL 30354 0 0
17911: GO 17989
17913: LD_INT 4
17915: DOUBLE
17916: EQUAL
17917: IFTRUE 17921
17919: GO 17928
17921: POP
// hHackInvincible ; 5 :
17922: CALL 30802 0 0
17926: GO 17989
17928: LD_INT 5
17930: DOUBLE
17931: EQUAL
17932: IFTRUE 17936
17934: GO 17943
17936: POP
// hHackInvisible ; 6 :
17937: CALL 30913 0 0
17941: GO 17989
17943: LD_INT 6
17945: DOUBLE
17946: EQUAL
17947: IFTRUE 17951
17949: GO 17958
17951: POP
// hHackChangeYourSide ; 7 :
17952: CALL 30970 0 0
17956: GO 17989
17958: LD_INT 7
17960: DOUBLE
17961: EQUAL
17962: IFTRUE 17966
17964: GO 17973
17966: POP
// hHackChangeUnitSide ; 8 :
17967: CALL 31012 0 0
17971: GO 17989
17973: LD_INT 8
17975: DOUBLE
17976: EQUAL
17977: IFTRUE 17981
17979: GO 17988
17981: POP
// hHackFog ; end ;
17982: CALL 31113 0 0
17986: GO 17989
17988: POP
// end ; if p2 = game_save_mode then
17989: LD_VAR 0 2
17993: PUSH
17994: LD_INT 102
17996: EQUAL
17997: IFFALSE 18052
// begin if p3 = 1 then
17999: LD_VAR 0 3
18003: PUSH
18004: LD_INT 1
18006: EQUAL
18007: IFFALSE 18019
// globalGameSaveCounter := p4 ;
18009: LD_ADDR_EXP 36
18013: PUSH
18014: LD_VAR 0 4
18018: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
18019: LD_VAR 0 3
18023: PUSH
18024: LD_INT 2
18026: EQUAL
18027: PUSH
18028: LD_EXP 36
18032: AND
18033: IFFALSE 18052
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18035: LD_STRING setGameSaveCounter(
18037: PUSH
18038: LD_EXP 36
18042: STR
18043: PUSH
18044: LD_STRING )
18046: STR
18047: PPUSH
18048: CALL_OW 559
// end ; end ;
18052: LD_VAR 0 7
18056: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
18057: LD_INT 0
18059: PPUSH
// streamModeActive := false ;
18060: LD_ADDR_EXP 37
18064: PUSH
18065: LD_INT 0
18067: ST_TO_ADDR
// normalCounter := 36 ;
18068: LD_ADDR_EXP 38
18072: PUSH
18073: LD_INT 36
18075: ST_TO_ADDR
// hardcoreCounter := 18 ;
18076: LD_ADDR_EXP 39
18080: PUSH
18081: LD_INT 18
18083: ST_TO_ADDR
// sRocket := false ;
18084: LD_ADDR_EXP 42
18088: PUSH
18089: LD_INT 0
18091: ST_TO_ADDR
// sSpeed := false ;
18092: LD_ADDR_EXP 41
18096: PUSH
18097: LD_INT 0
18099: ST_TO_ADDR
// sEngine := false ;
18100: LD_ADDR_EXP 43
18104: PUSH
18105: LD_INT 0
18107: ST_TO_ADDR
// sSpec := false ;
18108: LD_ADDR_EXP 40
18112: PUSH
18113: LD_INT 0
18115: ST_TO_ADDR
// sLevel := false ;
18116: LD_ADDR_EXP 44
18120: PUSH
18121: LD_INT 0
18123: ST_TO_ADDR
// sArmoury := false ;
18124: LD_ADDR_EXP 45
18128: PUSH
18129: LD_INT 0
18131: ST_TO_ADDR
// sRadar := false ;
18132: LD_ADDR_EXP 46
18136: PUSH
18137: LD_INT 0
18139: ST_TO_ADDR
// sBunker := false ;
18140: LD_ADDR_EXP 47
18144: PUSH
18145: LD_INT 0
18147: ST_TO_ADDR
// sHack := false ;
18148: LD_ADDR_EXP 48
18152: PUSH
18153: LD_INT 0
18155: ST_TO_ADDR
// sFire := false ;
18156: LD_ADDR_EXP 49
18160: PUSH
18161: LD_INT 0
18163: ST_TO_ADDR
// sRefresh := false ;
18164: LD_ADDR_EXP 50
18168: PUSH
18169: LD_INT 0
18171: ST_TO_ADDR
// sExp := false ;
18172: LD_ADDR_EXP 51
18176: PUSH
18177: LD_INT 0
18179: ST_TO_ADDR
// sDepot := false ;
18180: LD_ADDR_EXP 52
18184: PUSH
18185: LD_INT 0
18187: ST_TO_ADDR
// sFlag := false ;
18188: LD_ADDR_EXP 53
18192: PUSH
18193: LD_INT 0
18195: ST_TO_ADDR
// sKamikadze := false ;
18196: LD_ADDR_EXP 61
18200: PUSH
18201: LD_INT 0
18203: ST_TO_ADDR
// sTroll := false ;
18204: LD_ADDR_EXP 62
18208: PUSH
18209: LD_INT 0
18211: ST_TO_ADDR
// sSlow := false ;
18212: LD_ADDR_EXP 63
18216: PUSH
18217: LD_INT 0
18219: ST_TO_ADDR
// sLack := false ;
18220: LD_ADDR_EXP 64
18224: PUSH
18225: LD_INT 0
18227: ST_TO_ADDR
// sTank := false ;
18228: LD_ADDR_EXP 66
18232: PUSH
18233: LD_INT 0
18235: ST_TO_ADDR
// sRemote := false ;
18236: LD_ADDR_EXP 67
18240: PUSH
18241: LD_INT 0
18243: ST_TO_ADDR
// sPowell := false ;
18244: LD_ADDR_EXP 68
18248: PUSH
18249: LD_INT 0
18251: ST_TO_ADDR
// sTeleport := false ;
18252: LD_ADDR_EXP 71
18256: PUSH
18257: LD_INT 0
18259: ST_TO_ADDR
// sOilTower := false ;
18260: LD_ADDR_EXP 73
18264: PUSH
18265: LD_INT 0
18267: ST_TO_ADDR
// sShovel := false ;
18268: LD_ADDR_EXP 74
18272: PUSH
18273: LD_INT 0
18275: ST_TO_ADDR
// sSheik := false ;
18276: LD_ADDR_EXP 75
18280: PUSH
18281: LD_INT 0
18283: ST_TO_ADDR
// sEarthquake := false ;
18284: LD_ADDR_EXP 77
18288: PUSH
18289: LD_INT 0
18291: ST_TO_ADDR
// sAI := false ;
18292: LD_ADDR_EXP 78
18296: PUSH
18297: LD_INT 0
18299: ST_TO_ADDR
// sCargo := false ;
18300: LD_ADDR_EXP 81
18304: PUSH
18305: LD_INT 0
18307: ST_TO_ADDR
// sDLaser := false ;
18308: LD_ADDR_EXP 82
18312: PUSH
18313: LD_INT 0
18315: ST_TO_ADDR
// sExchange := false ;
18316: LD_ADDR_EXP 83
18320: PUSH
18321: LD_INT 0
18323: ST_TO_ADDR
// sFac := false ;
18324: LD_ADDR_EXP 84
18328: PUSH
18329: LD_INT 0
18331: ST_TO_ADDR
// sPower := false ;
18332: LD_ADDR_EXP 85
18336: PUSH
18337: LD_INT 0
18339: ST_TO_ADDR
// sRandom := false ;
18340: LD_ADDR_EXP 86
18344: PUSH
18345: LD_INT 0
18347: ST_TO_ADDR
// sShield := false ;
18348: LD_ADDR_EXP 87
18352: PUSH
18353: LD_INT 0
18355: ST_TO_ADDR
// sTime := false ;
18356: LD_ADDR_EXP 88
18360: PUSH
18361: LD_INT 0
18363: ST_TO_ADDR
// sTools := false ;
18364: LD_ADDR_EXP 89
18368: PUSH
18369: LD_INT 0
18371: ST_TO_ADDR
// sSold := false ;
18372: LD_ADDR_EXP 54
18376: PUSH
18377: LD_INT 0
18379: ST_TO_ADDR
// sDiff := false ;
18380: LD_ADDR_EXP 55
18384: PUSH
18385: LD_INT 0
18387: ST_TO_ADDR
// sFog := false ;
18388: LD_ADDR_EXP 58
18392: PUSH
18393: LD_INT 0
18395: ST_TO_ADDR
// sReset := false ;
18396: LD_ADDR_EXP 59
18400: PUSH
18401: LD_INT 0
18403: ST_TO_ADDR
// sSun := false ;
18404: LD_ADDR_EXP 60
18408: PUSH
18409: LD_INT 0
18411: ST_TO_ADDR
// sTiger := false ;
18412: LD_ADDR_EXP 56
18416: PUSH
18417: LD_INT 0
18419: ST_TO_ADDR
// sBomb := false ;
18420: LD_ADDR_EXP 57
18424: PUSH
18425: LD_INT 0
18427: ST_TO_ADDR
// sWound := false ;
18428: LD_ADDR_EXP 65
18432: PUSH
18433: LD_INT 0
18435: ST_TO_ADDR
// sBetray := false ;
18436: LD_ADDR_EXP 69
18440: PUSH
18441: LD_INT 0
18443: ST_TO_ADDR
// sContamin := false ;
18444: LD_ADDR_EXP 70
18448: PUSH
18449: LD_INT 0
18451: ST_TO_ADDR
// sOil := false ;
18452: LD_ADDR_EXP 72
18456: PUSH
18457: LD_INT 0
18459: ST_TO_ADDR
// sStu := false ;
18460: LD_ADDR_EXP 76
18464: PUSH
18465: LD_INT 0
18467: ST_TO_ADDR
// sBazooka := false ;
18468: LD_ADDR_EXP 79
18472: PUSH
18473: LD_INT 0
18475: ST_TO_ADDR
// sMortar := false ;
18476: LD_ADDR_EXP 80
18480: PUSH
18481: LD_INT 0
18483: ST_TO_ADDR
// sRanger := false ;
18484: LD_ADDR_EXP 90
18488: PUSH
18489: LD_INT 0
18491: ST_TO_ADDR
// sComputer := false ;
18492: LD_ADDR_EXP 91
18496: PUSH
18497: LD_INT 0
18499: ST_TO_ADDR
// s30 := false ;
18500: LD_ADDR_EXP 92
18504: PUSH
18505: LD_INT 0
18507: ST_TO_ADDR
// s60 := false ;
18508: LD_ADDR_EXP 93
18512: PUSH
18513: LD_INT 0
18515: ST_TO_ADDR
// end ;
18516: LD_VAR 0 1
18520: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18521: LD_INT 0
18523: PPUSH
18524: PPUSH
18525: PPUSH
18526: PPUSH
18527: PPUSH
18528: PPUSH
18529: PPUSH
// result := [ ] ;
18530: LD_ADDR_VAR 0 2
18534: PUSH
18535: EMPTY
18536: ST_TO_ADDR
// if campaign_id = 1 then
18537: LD_OWVAR 69
18541: PUSH
18542: LD_INT 1
18544: EQUAL
18545: IFFALSE 21711
// begin case mission_number of 1 :
18547: LD_OWVAR 70
18551: PUSH
18552: LD_INT 1
18554: DOUBLE
18555: EQUAL
18556: IFTRUE 18560
18558: GO 18636
18560: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18561: LD_ADDR_VAR 0 2
18565: PUSH
18566: LD_INT 2
18568: PUSH
18569: LD_INT 4
18571: PUSH
18572: LD_INT 11
18574: PUSH
18575: LD_INT 12
18577: PUSH
18578: LD_INT 15
18580: PUSH
18581: LD_INT 16
18583: PUSH
18584: LD_INT 22
18586: PUSH
18587: LD_INT 23
18589: PUSH
18590: LD_INT 26
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 101
18606: PUSH
18607: LD_INT 102
18609: PUSH
18610: LD_INT 106
18612: PUSH
18613: LD_INT 116
18615: PUSH
18616: LD_INT 117
18618: PUSH
18619: LD_INT 118
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: ST_TO_ADDR
18634: GO 21709
18636: LD_INT 2
18638: DOUBLE
18639: EQUAL
18640: IFTRUE 18644
18642: GO 18728
18644: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18645: LD_ADDR_VAR 0 2
18649: PUSH
18650: LD_INT 2
18652: PUSH
18653: LD_INT 4
18655: PUSH
18656: LD_INT 11
18658: PUSH
18659: LD_INT 12
18661: PUSH
18662: LD_INT 15
18664: PUSH
18665: LD_INT 16
18667: PUSH
18668: LD_INT 22
18670: PUSH
18671: LD_INT 23
18673: PUSH
18674: LD_INT 26
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 101
18690: PUSH
18691: LD_INT 102
18693: PUSH
18694: LD_INT 105
18696: PUSH
18697: LD_INT 106
18699: PUSH
18700: LD_INT 108
18702: PUSH
18703: LD_INT 116
18705: PUSH
18706: LD_INT 117
18708: PUSH
18709: LD_INT 118
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: ST_TO_ADDR
18726: GO 21709
18728: LD_INT 3
18730: DOUBLE
18731: EQUAL
18732: IFTRUE 18736
18734: GO 18824
18736: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18737: LD_ADDR_VAR 0 2
18741: PUSH
18742: LD_INT 2
18744: PUSH
18745: LD_INT 4
18747: PUSH
18748: LD_INT 5
18750: PUSH
18751: LD_INT 11
18753: PUSH
18754: LD_INT 12
18756: PUSH
18757: LD_INT 15
18759: PUSH
18760: LD_INT 16
18762: PUSH
18763: LD_INT 22
18765: PUSH
18766: LD_INT 26
18768: PUSH
18769: LD_INT 36
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 101
18786: PUSH
18787: LD_INT 102
18789: PUSH
18790: LD_INT 105
18792: PUSH
18793: LD_INT 106
18795: PUSH
18796: LD_INT 108
18798: PUSH
18799: LD_INT 116
18801: PUSH
18802: LD_INT 117
18804: PUSH
18805: LD_INT 118
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: ST_TO_ADDR
18822: GO 21709
18824: LD_INT 4
18826: DOUBLE
18827: EQUAL
18828: IFTRUE 18832
18830: GO 18928
18832: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18833: LD_ADDR_VAR 0 2
18837: PUSH
18838: LD_INT 2
18840: PUSH
18841: LD_INT 4
18843: PUSH
18844: LD_INT 5
18846: PUSH
18847: LD_INT 8
18849: PUSH
18850: LD_INT 11
18852: PUSH
18853: LD_INT 12
18855: PUSH
18856: LD_INT 15
18858: PUSH
18859: LD_INT 16
18861: PUSH
18862: LD_INT 22
18864: PUSH
18865: LD_INT 23
18867: PUSH
18868: LD_INT 26
18870: PUSH
18871: LD_INT 36
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 101
18890: PUSH
18891: LD_INT 102
18893: PUSH
18894: LD_INT 105
18896: PUSH
18897: LD_INT 106
18899: PUSH
18900: LD_INT 108
18902: PUSH
18903: LD_INT 116
18905: PUSH
18906: LD_INT 117
18908: PUSH
18909: LD_INT 118
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: ST_TO_ADDR
18926: GO 21709
18928: LD_INT 5
18930: DOUBLE
18931: EQUAL
18932: IFTRUE 18936
18934: GO 19048
18936: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18937: LD_ADDR_VAR 0 2
18941: PUSH
18942: LD_INT 2
18944: PUSH
18945: LD_INT 4
18947: PUSH
18948: LD_INT 5
18950: PUSH
18951: LD_INT 6
18953: PUSH
18954: LD_INT 8
18956: PUSH
18957: LD_INT 11
18959: PUSH
18960: LD_INT 12
18962: PUSH
18963: LD_INT 15
18965: PUSH
18966: LD_INT 16
18968: PUSH
18969: LD_INT 22
18971: PUSH
18972: LD_INT 23
18974: PUSH
18975: LD_INT 25
18977: PUSH
18978: LD_INT 26
18980: PUSH
18981: LD_INT 36
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 101
19002: PUSH
19003: LD_INT 102
19005: PUSH
19006: LD_INT 105
19008: PUSH
19009: LD_INT 106
19011: PUSH
19012: LD_INT 108
19014: PUSH
19015: LD_INT 109
19017: PUSH
19018: LD_INT 112
19020: PUSH
19021: LD_INT 116
19023: PUSH
19024: LD_INT 117
19026: PUSH
19027: LD_INT 118
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: ST_TO_ADDR
19046: GO 21709
19048: LD_INT 6
19050: DOUBLE
19051: EQUAL
19052: IFTRUE 19056
19054: GO 19188
19056: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19057: LD_ADDR_VAR 0 2
19061: PUSH
19062: LD_INT 2
19064: PUSH
19065: LD_INT 4
19067: PUSH
19068: LD_INT 5
19070: PUSH
19071: LD_INT 6
19073: PUSH
19074: LD_INT 8
19076: PUSH
19077: LD_INT 11
19079: PUSH
19080: LD_INT 12
19082: PUSH
19083: LD_INT 15
19085: PUSH
19086: LD_INT 16
19088: PUSH
19089: LD_INT 20
19091: PUSH
19092: LD_INT 21
19094: PUSH
19095: LD_INT 22
19097: PUSH
19098: LD_INT 23
19100: PUSH
19101: LD_INT 25
19103: PUSH
19104: LD_INT 26
19106: PUSH
19107: LD_INT 30
19109: PUSH
19110: LD_INT 31
19112: PUSH
19113: LD_INT 32
19115: PUSH
19116: LD_INT 36
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 101
19142: PUSH
19143: LD_INT 102
19145: PUSH
19146: LD_INT 105
19148: PUSH
19149: LD_INT 106
19151: PUSH
19152: LD_INT 108
19154: PUSH
19155: LD_INT 109
19157: PUSH
19158: LD_INT 112
19160: PUSH
19161: LD_INT 116
19163: PUSH
19164: LD_INT 117
19166: PUSH
19167: LD_INT 118
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: ST_TO_ADDR
19186: GO 21709
19188: LD_INT 7
19190: DOUBLE
19191: EQUAL
19192: IFTRUE 19196
19194: GO 19308
19196: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19197: LD_ADDR_VAR 0 2
19201: PUSH
19202: LD_INT 2
19204: PUSH
19205: LD_INT 4
19207: PUSH
19208: LD_INT 5
19210: PUSH
19211: LD_INT 7
19213: PUSH
19214: LD_INT 11
19216: PUSH
19217: LD_INT 12
19219: PUSH
19220: LD_INT 15
19222: PUSH
19223: LD_INT 16
19225: PUSH
19226: LD_INT 20
19228: PUSH
19229: LD_INT 21
19231: PUSH
19232: LD_INT 22
19234: PUSH
19235: LD_INT 23
19237: PUSH
19238: LD_INT 25
19240: PUSH
19241: LD_INT 26
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 101
19262: PUSH
19263: LD_INT 102
19265: PUSH
19266: LD_INT 103
19268: PUSH
19269: LD_INT 105
19271: PUSH
19272: LD_INT 106
19274: PUSH
19275: LD_INT 108
19277: PUSH
19278: LD_INT 112
19280: PUSH
19281: LD_INT 116
19283: PUSH
19284: LD_INT 117
19286: PUSH
19287: LD_INT 118
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: ST_TO_ADDR
19306: GO 21709
19308: LD_INT 8
19310: DOUBLE
19311: EQUAL
19312: IFTRUE 19316
19314: GO 19456
19316: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19317: LD_ADDR_VAR 0 2
19321: PUSH
19322: LD_INT 2
19324: PUSH
19325: LD_INT 4
19327: PUSH
19328: LD_INT 5
19330: PUSH
19331: LD_INT 6
19333: PUSH
19334: LD_INT 7
19336: PUSH
19337: LD_INT 8
19339: PUSH
19340: LD_INT 11
19342: PUSH
19343: LD_INT 12
19345: PUSH
19346: LD_INT 15
19348: PUSH
19349: LD_INT 16
19351: PUSH
19352: LD_INT 20
19354: PUSH
19355: LD_INT 21
19357: PUSH
19358: LD_INT 22
19360: PUSH
19361: LD_INT 23
19363: PUSH
19364: LD_INT 25
19366: PUSH
19367: LD_INT 26
19369: PUSH
19370: LD_INT 30
19372: PUSH
19373: LD_INT 31
19375: PUSH
19376: LD_INT 32
19378: PUSH
19379: LD_INT 36
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 101
19406: PUSH
19407: LD_INT 102
19409: PUSH
19410: LD_INT 103
19412: PUSH
19413: LD_INT 105
19415: PUSH
19416: LD_INT 106
19418: PUSH
19419: LD_INT 108
19421: PUSH
19422: LD_INT 109
19424: PUSH
19425: LD_INT 112
19427: PUSH
19428: LD_INT 116
19430: PUSH
19431: LD_INT 117
19433: PUSH
19434: LD_INT 118
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: ST_TO_ADDR
19454: GO 21709
19456: LD_INT 9
19458: DOUBLE
19459: EQUAL
19460: IFTRUE 19464
19462: GO 19612
19464: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19465: LD_ADDR_VAR 0 2
19469: PUSH
19470: LD_INT 2
19472: PUSH
19473: LD_INT 4
19475: PUSH
19476: LD_INT 5
19478: PUSH
19479: LD_INT 6
19481: PUSH
19482: LD_INT 7
19484: PUSH
19485: LD_INT 8
19487: PUSH
19488: LD_INT 11
19490: PUSH
19491: LD_INT 12
19493: PUSH
19494: LD_INT 15
19496: PUSH
19497: LD_INT 16
19499: PUSH
19500: LD_INT 20
19502: PUSH
19503: LD_INT 21
19505: PUSH
19506: LD_INT 22
19508: PUSH
19509: LD_INT 23
19511: PUSH
19512: LD_INT 25
19514: PUSH
19515: LD_INT 26
19517: PUSH
19518: LD_INT 28
19520: PUSH
19521: LD_INT 30
19523: PUSH
19524: LD_INT 31
19526: PUSH
19527: LD_INT 32
19529: PUSH
19530: LD_INT 36
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 101
19558: PUSH
19559: LD_INT 102
19561: PUSH
19562: LD_INT 103
19564: PUSH
19565: LD_INT 105
19567: PUSH
19568: LD_INT 106
19570: PUSH
19571: LD_INT 108
19573: PUSH
19574: LD_INT 109
19576: PUSH
19577: LD_INT 112
19579: PUSH
19580: LD_INT 114
19582: PUSH
19583: LD_INT 116
19585: PUSH
19586: LD_INT 117
19588: PUSH
19589: LD_INT 118
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: ST_TO_ADDR
19610: GO 21709
19612: LD_INT 10
19614: DOUBLE
19615: EQUAL
19616: IFTRUE 19620
19618: GO 19816
19620: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19621: LD_ADDR_VAR 0 2
19625: PUSH
19626: LD_INT 2
19628: PUSH
19629: LD_INT 4
19631: PUSH
19632: LD_INT 5
19634: PUSH
19635: LD_INT 6
19637: PUSH
19638: LD_INT 7
19640: PUSH
19641: LD_INT 8
19643: PUSH
19644: LD_INT 9
19646: PUSH
19647: LD_INT 10
19649: PUSH
19650: LD_INT 11
19652: PUSH
19653: LD_INT 12
19655: PUSH
19656: LD_INT 13
19658: PUSH
19659: LD_INT 14
19661: PUSH
19662: LD_INT 15
19664: PUSH
19665: LD_INT 16
19667: PUSH
19668: LD_INT 17
19670: PUSH
19671: LD_INT 18
19673: PUSH
19674: LD_INT 19
19676: PUSH
19677: LD_INT 20
19679: PUSH
19680: LD_INT 21
19682: PUSH
19683: LD_INT 22
19685: PUSH
19686: LD_INT 23
19688: PUSH
19689: LD_INT 24
19691: PUSH
19692: LD_INT 25
19694: PUSH
19695: LD_INT 26
19697: PUSH
19698: LD_INT 28
19700: PUSH
19701: LD_INT 30
19703: PUSH
19704: LD_INT 31
19706: PUSH
19707: LD_INT 32
19709: PUSH
19710: LD_INT 36
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 101
19746: PUSH
19747: LD_INT 102
19749: PUSH
19750: LD_INT 103
19752: PUSH
19753: LD_INT 104
19755: PUSH
19756: LD_INT 105
19758: PUSH
19759: LD_INT 106
19761: PUSH
19762: LD_INT 107
19764: PUSH
19765: LD_INT 108
19767: PUSH
19768: LD_INT 109
19770: PUSH
19771: LD_INT 110
19773: PUSH
19774: LD_INT 111
19776: PUSH
19777: LD_INT 112
19779: PUSH
19780: LD_INT 114
19782: PUSH
19783: LD_INT 116
19785: PUSH
19786: LD_INT 117
19788: PUSH
19789: LD_INT 118
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: ST_TO_ADDR
19814: GO 21709
19816: LD_INT 11
19818: DOUBLE
19819: EQUAL
19820: IFTRUE 19824
19822: GO 20028
19824: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19825: LD_ADDR_VAR 0 2
19829: PUSH
19830: LD_INT 2
19832: PUSH
19833: LD_INT 3
19835: PUSH
19836: LD_INT 4
19838: PUSH
19839: LD_INT 5
19841: PUSH
19842: LD_INT 6
19844: PUSH
19845: LD_INT 7
19847: PUSH
19848: LD_INT 8
19850: PUSH
19851: LD_INT 9
19853: PUSH
19854: LD_INT 10
19856: PUSH
19857: LD_INT 11
19859: PUSH
19860: LD_INT 12
19862: PUSH
19863: LD_INT 13
19865: PUSH
19866: LD_INT 14
19868: PUSH
19869: LD_INT 15
19871: PUSH
19872: LD_INT 16
19874: PUSH
19875: LD_INT 17
19877: PUSH
19878: LD_INT 18
19880: PUSH
19881: LD_INT 19
19883: PUSH
19884: LD_INT 20
19886: PUSH
19887: LD_INT 21
19889: PUSH
19890: LD_INT 22
19892: PUSH
19893: LD_INT 23
19895: PUSH
19896: LD_INT 24
19898: PUSH
19899: LD_INT 25
19901: PUSH
19902: LD_INT 26
19904: PUSH
19905: LD_INT 28
19907: PUSH
19908: LD_INT 30
19910: PUSH
19911: LD_INT 31
19913: PUSH
19914: LD_INT 32
19916: PUSH
19917: LD_INT 34
19919: PUSH
19920: LD_INT 36
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 101
19958: PUSH
19959: LD_INT 102
19961: PUSH
19962: LD_INT 103
19964: PUSH
19965: LD_INT 104
19967: PUSH
19968: LD_INT 105
19970: PUSH
19971: LD_INT 106
19973: PUSH
19974: LD_INT 107
19976: PUSH
19977: LD_INT 108
19979: PUSH
19980: LD_INT 109
19982: PUSH
19983: LD_INT 110
19985: PUSH
19986: LD_INT 111
19988: PUSH
19989: LD_INT 112
19991: PUSH
19992: LD_INT 114
19994: PUSH
19995: LD_INT 116
19997: PUSH
19998: LD_INT 117
20000: PUSH
20001: LD_INT 118
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: ST_TO_ADDR
20026: GO 21709
20028: LD_INT 12
20030: DOUBLE
20031: EQUAL
20032: IFTRUE 20036
20034: GO 20256
20036: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20037: LD_ADDR_VAR 0 2
20041: PUSH
20042: LD_INT 1
20044: PUSH
20045: LD_INT 2
20047: PUSH
20048: LD_INT 3
20050: PUSH
20051: LD_INT 4
20053: PUSH
20054: LD_INT 5
20056: PUSH
20057: LD_INT 6
20059: PUSH
20060: LD_INT 7
20062: PUSH
20063: LD_INT 8
20065: PUSH
20066: LD_INT 9
20068: PUSH
20069: LD_INT 10
20071: PUSH
20072: LD_INT 11
20074: PUSH
20075: LD_INT 12
20077: PUSH
20078: LD_INT 13
20080: PUSH
20081: LD_INT 14
20083: PUSH
20084: LD_INT 15
20086: PUSH
20087: LD_INT 16
20089: PUSH
20090: LD_INT 17
20092: PUSH
20093: LD_INT 18
20095: PUSH
20096: LD_INT 19
20098: PUSH
20099: LD_INT 20
20101: PUSH
20102: LD_INT 21
20104: PUSH
20105: LD_INT 22
20107: PUSH
20108: LD_INT 23
20110: PUSH
20111: LD_INT 24
20113: PUSH
20114: LD_INT 25
20116: PUSH
20117: LD_INT 26
20119: PUSH
20120: LD_INT 27
20122: PUSH
20123: LD_INT 28
20125: PUSH
20126: LD_INT 30
20128: PUSH
20129: LD_INT 31
20131: PUSH
20132: LD_INT 32
20134: PUSH
20135: LD_INT 33
20137: PUSH
20138: LD_INT 34
20140: PUSH
20141: LD_INT 36
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 101
20182: PUSH
20183: LD_INT 102
20185: PUSH
20186: LD_INT 103
20188: PUSH
20189: LD_INT 104
20191: PUSH
20192: LD_INT 105
20194: PUSH
20195: LD_INT 106
20197: PUSH
20198: LD_INT 107
20200: PUSH
20201: LD_INT 108
20203: PUSH
20204: LD_INT 109
20206: PUSH
20207: LD_INT 110
20209: PUSH
20210: LD_INT 111
20212: PUSH
20213: LD_INT 112
20215: PUSH
20216: LD_INT 113
20218: PUSH
20219: LD_INT 114
20221: PUSH
20222: LD_INT 116
20224: PUSH
20225: LD_INT 117
20227: PUSH
20228: LD_INT 118
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: ST_TO_ADDR
20254: GO 21709
20256: LD_INT 13
20258: DOUBLE
20259: EQUAL
20260: IFTRUE 20264
20262: GO 20472
20264: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20265: LD_ADDR_VAR 0 2
20269: PUSH
20270: LD_INT 1
20272: PUSH
20273: LD_INT 2
20275: PUSH
20276: LD_INT 3
20278: PUSH
20279: LD_INT 4
20281: PUSH
20282: LD_INT 5
20284: PUSH
20285: LD_INT 8
20287: PUSH
20288: LD_INT 9
20290: PUSH
20291: LD_INT 10
20293: PUSH
20294: LD_INT 11
20296: PUSH
20297: LD_INT 12
20299: PUSH
20300: LD_INT 14
20302: PUSH
20303: LD_INT 15
20305: PUSH
20306: LD_INT 16
20308: PUSH
20309: LD_INT 17
20311: PUSH
20312: LD_INT 18
20314: PUSH
20315: LD_INT 19
20317: PUSH
20318: LD_INT 20
20320: PUSH
20321: LD_INT 21
20323: PUSH
20324: LD_INT 22
20326: PUSH
20327: LD_INT 23
20329: PUSH
20330: LD_INT 24
20332: PUSH
20333: LD_INT 25
20335: PUSH
20336: LD_INT 26
20338: PUSH
20339: LD_INT 27
20341: PUSH
20342: LD_INT 28
20344: PUSH
20345: LD_INT 30
20347: PUSH
20348: LD_INT 31
20350: PUSH
20351: LD_INT 32
20353: PUSH
20354: LD_INT 33
20356: PUSH
20357: LD_INT 34
20359: PUSH
20360: LD_INT 36
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 101
20398: PUSH
20399: LD_INT 102
20401: PUSH
20402: LD_INT 103
20404: PUSH
20405: LD_INT 104
20407: PUSH
20408: LD_INT 105
20410: PUSH
20411: LD_INT 106
20413: PUSH
20414: LD_INT 107
20416: PUSH
20417: LD_INT 108
20419: PUSH
20420: LD_INT 109
20422: PUSH
20423: LD_INT 110
20425: PUSH
20426: LD_INT 111
20428: PUSH
20429: LD_INT 112
20431: PUSH
20432: LD_INT 113
20434: PUSH
20435: LD_INT 114
20437: PUSH
20438: LD_INT 116
20440: PUSH
20441: LD_INT 117
20443: PUSH
20444: LD_INT 118
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: ST_TO_ADDR
20470: GO 21709
20472: LD_INT 14
20474: DOUBLE
20475: EQUAL
20476: IFTRUE 20480
20478: GO 20704
20480: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20481: LD_ADDR_VAR 0 2
20485: PUSH
20486: LD_INT 1
20488: PUSH
20489: LD_INT 2
20491: PUSH
20492: LD_INT 3
20494: PUSH
20495: LD_INT 4
20497: PUSH
20498: LD_INT 5
20500: PUSH
20501: LD_INT 6
20503: PUSH
20504: LD_INT 7
20506: PUSH
20507: LD_INT 8
20509: PUSH
20510: LD_INT 9
20512: PUSH
20513: LD_INT 10
20515: PUSH
20516: LD_INT 11
20518: PUSH
20519: LD_INT 12
20521: PUSH
20522: LD_INT 13
20524: PUSH
20525: LD_INT 14
20527: PUSH
20528: LD_INT 15
20530: PUSH
20531: LD_INT 16
20533: PUSH
20534: LD_INT 17
20536: PUSH
20537: LD_INT 18
20539: PUSH
20540: LD_INT 19
20542: PUSH
20543: LD_INT 20
20545: PUSH
20546: LD_INT 21
20548: PUSH
20549: LD_INT 22
20551: PUSH
20552: LD_INT 23
20554: PUSH
20555: LD_INT 24
20557: PUSH
20558: LD_INT 25
20560: PUSH
20561: LD_INT 26
20563: PUSH
20564: LD_INT 27
20566: PUSH
20567: LD_INT 28
20569: PUSH
20570: LD_INT 29
20572: PUSH
20573: LD_INT 30
20575: PUSH
20576: LD_INT 31
20578: PUSH
20579: LD_INT 32
20581: PUSH
20582: LD_INT 33
20584: PUSH
20585: LD_INT 34
20587: PUSH
20588: LD_INT 36
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 101
20630: PUSH
20631: LD_INT 102
20633: PUSH
20634: LD_INT 103
20636: PUSH
20637: LD_INT 104
20639: PUSH
20640: LD_INT 105
20642: PUSH
20643: LD_INT 106
20645: PUSH
20646: LD_INT 107
20648: PUSH
20649: LD_INT 108
20651: PUSH
20652: LD_INT 109
20654: PUSH
20655: LD_INT 110
20657: PUSH
20658: LD_INT 111
20660: PUSH
20661: LD_INT 112
20663: PUSH
20664: LD_INT 113
20666: PUSH
20667: LD_INT 114
20669: PUSH
20670: LD_INT 116
20672: PUSH
20673: LD_INT 117
20675: PUSH
20676: LD_INT 118
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: ST_TO_ADDR
20702: GO 21709
20704: LD_INT 15
20706: DOUBLE
20707: EQUAL
20708: IFTRUE 20712
20710: GO 20936
20712: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20713: LD_ADDR_VAR 0 2
20717: PUSH
20718: LD_INT 1
20720: PUSH
20721: LD_INT 2
20723: PUSH
20724: LD_INT 3
20726: PUSH
20727: LD_INT 4
20729: PUSH
20730: LD_INT 5
20732: PUSH
20733: LD_INT 6
20735: PUSH
20736: LD_INT 7
20738: PUSH
20739: LD_INT 8
20741: PUSH
20742: LD_INT 9
20744: PUSH
20745: LD_INT 10
20747: PUSH
20748: LD_INT 11
20750: PUSH
20751: LD_INT 12
20753: PUSH
20754: LD_INT 13
20756: PUSH
20757: LD_INT 14
20759: PUSH
20760: LD_INT 15
20762: PUSH
20763: LD_INT 16
20765: PUSH
20766: LD_INT 17
20768: PUSH
20769: LD_INT 18
20771: PUSH
20772: LD_INT 19
20774: PUSH
20775: LD_INT 20
20777: PUSH
20778: LD_INT 21
20780: PUSH
20781: LD_INT 22
20783: PUSH
20784: LD_INT 23
20786: PUSH
20787: LD_INT 24
20789: PUSH
20790: LD_INT 25
20792: PUSH
20793: LD_INT 26
20795: PUSH
20796: LD_INT 27
20798: PUSH
20799: LD_INT 28
20801: PUSH
20802: LD_INT 29
20804: PUSH
20805: LD_INT 30
20807: PUSH
20808: LD_INT 31
20810: PUSH
20811: LD_INT 32
20813: PUSH
20814: LD_INT 33
20816: PUSH
20817: LD_INT 34
20819: PUSH
20820: LD_INT 36
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 101
20862: PUSH
20863: LD_INT 102
20865: PUSH
20866: LD_INT 103
20868: PUSH
20869: LD_INT 104
20871: PUSH
20872: LD_INT 105
20874: PUSH
20875: LD_INT 106
20877: PUSH
20878: LD_INT 107
20880: PUSH
20881: LD_INT 108
20883: PUSH
20884: LD_INT 109
20886: PUSH
20887: LD_INT 110
20889: PUSH
20890: LD_INT 111
20892: PUSH
20893: LD_INT 112
20895: PUSH
20896: LD_INT 113
20898: PUSH
20899: LD_INT 114
20901: PUSH
20902: LD_INT 116
20904: PUSH
20905: LD_INT 117
20907: PUSH
20908: LD_INT 118
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: ST_TO_ADDR
20934: GO 21709
20936: LD_INT 16
20938: DOUBLE
20939: EQUAL
20940: IFTRUE 20944
20942: GO 21080
20944: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20945: LD_ADDR_VAR 0 2
20949: PUSH
20950: LD_INT 2
20952: PUSH
20953: LD_INT 4
20955: PUSH
20956: LD_INT 5
20958: PUSH
20959: LD_INT 7
20961: PUSH
20962: LD_INT 11
20964: PUSH
20965: LD_INT 12
20967: PUSH
20968: LD_INT 15
20970: PUSH
20971: LD_INT 16
20973: PUSH
20974: LD_INT 20
20976: PUSH
20977: LD_INT 21
20979: PUSH
20980: LD_INT 22
20982: PUSH
20983: LD_INT 23
20985: PUSH
20986: LD_INT 25
20988: PUSH
20989: LD_INT 26
20991: PUSH
20992: LD_INT 30
20994: PUSH
20995: LD_INT 31
20997: PUSH
20998: LD_INT 32
21000: PUSH
21001: LD_INT 33
21003: PUSH
21004: LD_INT 34
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 101
21030: PUSH
21031: LD_INT 102
21033: PUSH
21034: LD_INT 103
21036: PUSH
21037: LD_INT 106
21039: PUSH
21040: LD_INT 108
21042: PUSH
21043: LD_INT 112
21045: PUSH
21046: LD_INT 113
21048: PUSH
21049: LD_INT 114
21051: PUSH
21052: LD_INT 116
21054: PUSH
21055: LD_INT 117
21057: PUSH
21058: LD_INT 118
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: ST_TO_ADDR
21078: GO 21709
21080: LD_INT 17
21082: DOUBLE
21083: EQUAL
21084: IFTRUE 21088
21086: GO 21312
21088: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21089: LD_ADDR_VAR 0 2
21093: PUSH
21094: LD_INT 1
21096: PUSH
21097: LD_INT 2
21099: PUSH
21100: LD_INT 3
21102: PUSH
21103: LD_INT 4
21105: PUSH
21106: LD_INT 5
21108: PUSH
21109: LD_INT 6
21111: PUSH
21112: LD_INT 7
21114: PUSH
21115: LD_INT 8
21117: PUSH
21118: LD_INT 9
21120: PUSH
21121: LD_INT 10
21123: PUSH
21124: LD_INT 11
21126: PUSH
21127: LD_INT 12
21129: PUSH
21130: LD_INT 13
21132: PUSH
21133: LD_INT 14
21135: PUSH
21136: LD_INT 15
21138: PUSH
21139: LD_INT 16
21141: PUSH
21142: LD_INT 17
21144: PUSH
21145: LD_INT 18
21147: PUSH
21148: LD_INT 19
21150: PUSH
21151: LD_INT 20
21153: PUSH
21154: LD_INT 21
21156: PUSH
21157: LD_INT 22
21159: PUSH
21160: LD_INT 23
21162: PUSH
21163: LD_INT 24
21165: PUSH
21166: LD_INT 25
21168: PUSH
21169: LD_INT 26
21171: PUSH
21172: LD_INT 27
21174: PUSH
21175: LD_INT 28
21177: PUSH
21178: LD_INT 29
21180: PUSH
21181: LD_INT 30
21183: PUSH
21184: LD_INT 31
21186: PUSH
21187: LD_INT 32
21189: PUSH
21190: LD_INT 33
21192: PUSH
21193: LD_INT 34
21195: PUSH
21196: LD_INT 36
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 101
21238: PUSH
21239: LD_INT 102
21241: PUSH
21242: LD_INT 103
21244: PUSH
21245: LD_INT 104
21247: PUSH
21248: LD_INT 105
21250: PUSH
21251: LD_INT 106
21253: PUSH
21254: LD_INT 107
21256: PUSH
21257: LD_INT 108
21259: PUSH
21260: LD_INT 109
21262: PUSH
21263: LD_INT 110
21265: PUSH
21266: LD_INT 111
21268: PUSH
21269: LD_INT 112
21271: PUSH
21272: LD_INT 113
21274: PUSH
21275: LD_INT 114
21277: PUSH
21278: LD_INT 116
21280: PUSH
21281: LD_INT 117
21283: PUSH
21284: LD_INT 118
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: ST_TO_ADDR
21310: GO 21709
21312: LD_INT 18
21314: DOUBLE
21315: EQUAL
21316: IFTRUE 21320
21318: GO 21468
21320: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21321: LD_ADDR_VAR 0 2
21325: PUSH
21326: LD_INT 2
21328: PUSH
21329: LD_INT 4
21331: PUSH
21332: LD_INT 5
21334: PUSH
21335: LD_INT 7
21337: PUSH
21338: LD_INT 11
21340: PUSH
21341: LD_INT 12
21343: PUSH
21344: LD_INT 15
21346: PUSH
21347: LD_INT 16
21349: PUSH
21350: LD_INT 20
21352: PUSH
21353: LD_INT 21
21355: PUSH
21356: LD_INT 22
21358: PUSH
21359: LD_INT 23
21361: PUSH
21362: LD_INT 25
21364: PUSH
21365: LD_INT 26
21367: PUSH
21368: LD_INT 30
21370: PUSH
21371: LD_INT 31
21373: PUSH
21374: LD_INT 32
21376: PUSH
21377: LD_INT 33
21379: PUSH
21380: LD_INT 34
21382: PUSH
21383: LD_INT 35
21385: PUSH
21386: LD_INT 36
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 101
21414: PUSH
21415: LD_INT 102
21417: PUSH
21418: LD_INT 103
21420: PUSH
21421: LD_INT 106
21423: PUSH
21424: LD_INT 108
21426: PUSH
21427: LD_INT 112
21429: PUSH
21430: LD_INT 113
21432: PUSH
21433: LD_INT 114
21435: PUSH
21436: LD_INT 115
21438: PUSH
21439: LD_INT 116
21441: PUSH
21442: LD_INT 117
21444: PUSH
21445: LD_INT 118
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: ST_TO_ADDR
21466: GO 21709
21468: LD_INT 19
21470: DOUBLE
21471: EQUAL
21472: IFTRUE 21476
21474: GO 21708
21476: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21477: LD_ADDR_VAR 0 2
21481: PUSH
21482: LD_INT 1
21484: PUSH
21485: LD_INT 2
21487: PUSH
21488: LD_INT 3
21490: PUSH
21491: LD_INT 4
21493: PUSH
21494: LD_INT 5
21496: PUSH
21497: LD_INT 6
21499: PUSH
21500: LD_INT 7
21502: PUSH
21503: LD_INT 8
21505: PUSH
21506: LD_INT 9
21508: PUSH
21509: LD_INT 10
21511: PUSH
21512: LD_INT 11
21514: PUSH
21515: LD_INT 12
21517: PUSH
21518: LD_INT 13
21520: PUSH
21521: LD_INT 14
21523: PUSH
21524: LD_INT 15
21526: PUSH
21527: LD_INT 16
21529: PUSH
21530: LD_INT 17
21532: PUSH
21533: LD_INT 18
21535: PUSH
21536: LD_INT 19
21538: PUSH
21539: LD_INT 20
21541: PUSH
21542: LD_INT 21
21544: PUSH
21545: LD_INT 22
21547: PUSH
21548: LD_INT 23
21550: PUSH
21551: LD_INT 24
21553: PUSH
21554: LD_INT 25
21556: PUSH
21557: LD_INT 26
21559: PUSH
21560: LD_INT 27
21562: PUSH
21563: LD_INT 28
21565: PUSH
21566: LD_INT 29
21568: PUSH
21569: LD_INT 30
21571: PUSH
21572: LD_INT 31
21574: PUSH
21575: LD_INT 32
21577: PUSH
21578: LD_INT 33
21580: PUSH
21581: LD_INT 34
21583: PUSH
21584: LD_INT 35
21586: PUSH
21587: LD_INT 36
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 101
21630: PUSH
21631: LD_INT 102
21633: PUSH
21634: LD_INT 103
21636: PUSH
21637: LD_INT 104
21639: PUSH
21640: LD_INT 105
21642: PUSH
21643: LD_INT 106
21645: PUSH
21646: LD_INT 107
21648: PUSH
21649: LD_INT 108
21651: PUSH
21652: LD_INT 109
21654: PUSH
21655: LD_INT 110
21657: PUSH
21658: LD_INT 111
21660: PUSH
21661: LD_INT 112
21663: PUSH
21664: LD_INT 113
21666: PUSH
21667: LD_INT 114
21669: PUSH
21670: LD_INT 115
21672: PUSH
21673: LD_INT 116
21675: PUSH
21676: LD_INT 117
21678: PUSH
21679: LD_INT 118
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: ST_TO_ADDR
21706: GO 21709
21708: POP
// end else
21709: GO 21940
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21711: LD_ADDR_VAR 0 2
21715: PUSH
21716: LD_INT 1
21718: PUSH
21719: LD_INT 2
21721: PUSH
21722: LD_INT 3
21724: PUSH
21725: LD_INT 4
21727: PUSH
21728: LD_INT 5
21730: PUSH
21731: LD_INT 6
21733: PUSH
21734: LD_INT 7
21736: PUSH
21737: LD_INT 8
21739: PUSH
21740: LD_INT 9
21742: PUSH
21743: LD_INT 10
21745: PUSH
21746: LD_INT 11
21748: PUSH
21749: LD_INT 12
21751: PUSH
21752: LD_INT 13
21754: PUSH
21755: LD_INT 14
21757: PUSH
21758: LD_INT 15
21760: PUSH
21761: LD_INT 16
21763: PUSH
21764: LD_INT 17
21766: PUSH
21767: LD_INT 18
21769: PUSH
21770: LD_INT 19
21772: PUSH
21773: LD_INT 20
21775: PUSH
21776: LD_INT 21
21778: PUSH
21779: LD_INT 22
21781: PUSH
21782: LD_INT 23
21784: PUSH
21785: LD_INT 24
21787: PUSH
21788: LD_INT 25
21790: PUSH
21791: LD_INT 26
21793: PUSH
21794: LD_INT 27
21796: PUSH
21797: LD_INT 28
21799: PUSH
21800: LD_INT 29
21802: PUSH
21803: LD_INT 30
21805: PUSH
21806: LD_INT 31
21808: PUSH
21809: LD_INT 32
21811: PUSH
21812: LD_INT 33
21814: PUSH
21815: LD_INT 34
21817: PUSH
21818: LD_INT 35
21820: PUSH
21821: LD_INT 36
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 101
21864: PUSH
21865: LD_INT 102
21867: PUSH
21868: LD_INT 103
21870: PUSH
21871: LD_INT 104
21873: PUSH
21874: LD_INT 105
21876: PUSH
21877: LD_INT 106
21879: PUSH
21880: LD_INT 107
21882: PUSH
21883: LD_INT 108
21885: PUSH
21886: LD_INT 109
21888: PUSH
21889: LD_INT 110
21891: PUSH
21892: LD_INT 111
21894: PUSH
21895: LD_INT 112
21897: PUSH
21898: LD_INT 113
21900: PUSH
21901: LD_INT 114
21903: PUSH
21904: LD_INT 115
21906: PUSH
21907: LD_INT 116
21909: PUSH
21910: LD_INT 117
21912: PUSH
21913: LD_INT 118
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: ST_TO_ADDR
// if result then
21940: LD_VAR 0 2
21944: IFFALSE 22730
// begin normal :=  ;
21946: LD_ADDR_VAR 0 5
21950: PUSH
21951: LD_STRING 
21953: ST_TO_ADDR
// hardcore :=  ;
21954: LD_ADDR_VAR 0 6
21958: PUSH
21959: LD_STRING 
21961: ST_TO_ADDR
// active :=  ;
21962: LD_ADDR_VAR 0 7
21966: PUSH
21967: LD_STRING 
21969: ST_TO_ADDR
// for i = 1 to normalCounter do
21970: LD_ADDR_VAR 0 8
21974: PUSH
21975: DOUBLE
21976: LD_INT 1
21978: DEC
21979: ST_TO_ADDR
21980: LD_EXP 38
21984: PUSH
21985: FOR_TO
21986: IFFALSE 22087
// begin tmp := 0 ;
21988: LD_ADDR_VAR 0 3
21992: PUSH
21993: LD_STRING 0
21995: ST_TO_ADDR
// if result [ 1 ] then
21996: LD_VAR 0 2
22000: PUSH
22001: LD_INT 1
22003: ARRAY
22004: IFFALSE 22069
// if result [ 1 ] [ 1 ] = i then
22006: LD_VAR 0 2
22010: PUSH
22011: LD_INT 1
22013: ARRAY
22014: PUSH
22015: LD_INT 1
22017: ARRAY
22018: PUSH
22019: LD_VAR 0 8
22023: EQUAL
22024: IFFALSE 22069
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22026: LD_ADDR_VAR 0 2
22030: PUSH
22031: LD_VAR 0 2
22035: PPUSH
22036: LD_INT 1
22038: PPUSH
22039: LD_VAR 0 2
22043: PUSH
22044: LD_INT 1
22046: ARRAY
22047: PPUSH
22048: LD_INT 1
22050: PPUSH
22051: CALL_OW 3
22055: PPUSH
22056: CALL_OW 1
22060: ST_TO_ADDR
// tmp := 1 ;
22061: LD_ADDR_VAR 0 3
22065: PUSH
22066: LD_STRING 1
22068: ST_TO_ADDR
// end ; normal := normal & tmp ;
22069: LD_ADDR_VAR 0 5
22073: PUSH
22074: LD_VAR 0 5
22078: PUSH
22079: LD_VAR 0 3
22083: STR
22084: ST_TO_ADDR
// end ;
22085: GO 21985
22087: POP
22088: POP
// for i = 1 to hardcoreCounter do
22089: LD_ADDR_VAR 0 8
22093: PUSH
22094: DOUBLE
22095: LD_INT 1
22097: DEC
22098: ST_TO_ADDR
22099: LD_EXP 39
22103: PUSH
22104: FOR_TO
22105: IFFALSE 22210
// begin tmp := 0 ;
22107: LD_ADDR_VAR 0 3
22111: PUSH
22112: LD_STRING 0
22114: ST_TO_ADDR
// if result [ 2 ] then
22115: LD_VAR 0 2
22119: PUSH
22120: LD_INT 2
22122: ARRAY
22123: IFFALSE 22192
// if result [ 2 ] [ 1 ] = 100 + i then
22125: LD_VAR 0 2
22129: PUSH
22130: LD_INT 2
22132: ARRAY
22133: PUSH
22134: LD_INT 1
22136: ARRAY
22137: PUSH
22138: LD_INT 100
22140: PUSH
22141: LD_VAR 0 8
22145: PLUS
22146: EQUAL
22147: IFFALSE 22192
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22149: LD_ADDR_VAR 0 2
22153: PUSH
22154: LD_VAR 0 2
22158: PPUSH
22159: LD_INT 2
22161: PPUSH
22162: LD_VAR 0 2
22166: PUSH
22167: LD_INT 2
22169: ARRAY
22170: PPUSH
22171: LD_INT 1
22173: PPUSH
22174: CALL_OW 3
22178: PPUSH
22179: CALL_OW 1
22183: ST_TO_ADDR
// tmp := 1 ;
22184: LD_ADDR_VAR 0 3
22188: PUSH
22189: LD_STRING 1
22191: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22192: LD_ADDR_VAR 0 6
22196: PUSH
22197: LD_VAR 0 6
22201: PUSH
22202: LD_VAR 0 3
22206: STR
22207: ST_TO_ADDR
// end ;
22208: GO 22104
22210: POP
22211: POP
// if isGameLoad then
22212: LD_VAR 0 1
22216: IFFALSE 22691
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22218: LD_ADDR_VAR 0 4
22222: PUSH
22223: LD_EXP 42
22227: PUSH
22228: LD_EXP 41
22232: PUSH
22233: LD_EXP 43
22237: PUSH
22238: LD_EXP 40
22242: PUSH
22243: LD_EXP 44
22247: PUSH
22248: LD_EXP 45
22252: PUSH
22253: LD_EXP 46
22257: PUSH
22258: LD_EXP 47
22262: PUSH
22263: LD_EXP 48
22267: PUSH
22268: LD_EXP 49
22272: PUSH
22273: LD_EXP 50
22277: PUSH
22278: LD_EXP 51
22282: PUSH
22283: LD_EXP 52
22287: PUSH
22288: LD_EXP 53
22292: PUSH
22293: LD_EXP 61
22297: PUSH
22298: LD_EXP 62
22302: PUSH
22303: LD_EXP 63
22307: PUSH
22308: LD_EXP 64
22312: PUSH
22313: LD_EXP 66
22317: PUSH
22318: LD_EXP 67
22322: PUSH
22323: LD_EXP 68
22327: PUSH
22328: LD_EXP 71
22332: PUSH
22333: LD_EXP 73
22337: PUSH
22338: LD_EXP 74
22342: PUSH
22343: LD_EXP 75
22347: PUSH
22348: LD_EXP 77
22352: PUSH
22353: LD_EXP 78
22357: PUSH
22358: LD_EXP 81
22362: PUSH
22363: LD_EXP 82
22367: PUSH
22368: LD_EXP 83
22372: PUSH
22373: LD_EXP 84
22377: PUSH
22378: LD_EXP 85
22382: PUSH
22383: LD_EXP 86
22387: PUSH
22388: LD_EXP 87
22392: PUSH
22393: LD_EXP 88
22397: PUSH
22398: LD_EXP 89
22402: PUSH
22403: LD_EXP 54
22407: PUSH
22408: LD_EXP 55
22412: PUSH
22413: LD_EXP 58
22417: PUSH
22418: LD_EXP 59
22422: PUSH
22423: LD_EXP 60
22427: PUSH
22428: LD_EXP 56
22432: PUSH
22433: LD_EXP 57
22437: PUSH
22438: LD_EXP 65
22442: PUSH
22443: LD_EXP 69
22447: PUSH
22448: LD_EXP 70
22452: PUSH
22453: LD_EXP 72
22457: PUSH
22458: LD_EXP 76
22462: PUSH
22463: LD_EXP 79
22467: PUSH
22468: LD_EXP 80
22472: PUSH
22473: LD_EXP 90
22477: PUSH
22478: LD_EXP 91
22482: PUSH
22483: LD_EXP 92
22487: PUSH
22488: LD_EXP 93
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: ST_TO_ADDR
// tmp :=  ;
22549: LD_ADDR_VAR 0 3
22553: PUSH
22554: LD_STRING 
22556: ST_TO_ADDR
// for i = 1 to normalCounter do
22557: LD_ADDR_VAR 0 8
22561: PUSH
22562: DOUBLE
22563: LD_INT 1
22565: DEC
22566: ST_TO_ADDR
22567: LD_EXP 38
22571: PUSH
22572: FOR_TO
22573: IFFALSE 22609
// begin if flags [ i ] then
22575: LD_VAR 0 4
22579: PUSH
22580: LD_VAR 0 8
22584: ARRAY
22585: IFFALSE 22607
// tmp := tmp & i & ; ;
22587: LD_ADDR_VAR 0 3
22591: PUSH
22592: LD_VAR 0 3
22596: PUSH
22597: LD_VAR 0 8
22601: STR
22602: PUSH
22603: LD_STRING ;
22605: STR
22606: ST_TO_ADDR
// end ;
22607: GO 22572
22609: POP
22610: POP
// for i = 1 to hardcoreCounter do
22611: LD_ADDR_VAR 0 8
22615: PUSH
22616: DOUBLE
22617: LD_INT 1
22619: DEC
22620: ST_TO_ADDR
22621: LD_EXP 39
22625: PUSH
22626: FOR_TO
22627: IFFALSE 22673
// begin if flags [ normalCounter + i ] then
22629: LD_VAR 0 4
22633: PUSH
22634: LD_EXP 38
22638: PUSH
22639: LD_VAR 0 8
22643: PLUS
22644: ARRAY
22645: IFFALSE 22671
// tmp := tmp & ( 100 + i ) & ; ;
22647: LD_ADDR_VAR 0 3
22651: PUSH
22652: LD_VAR 0 3
22656: PUSH
22657: LD_INT 100
22659: PUSH
22660: LD_VAR 0 8
22664: PLUS
22665: STR
22666: PUSH
22667: LD_STRING ;
22669: STR
22670: ST_TO_ADDR
// end ;
22671: GO 22626
22673: POP
22674: POP
// if tmp then
22675: LD_VAR 0 3
22679: IFFALSE 22691
// active := tmp ;
22681: LD_ADDR_VAR 0 7
22685: PUSH
22686: LD_VAR 0 3
22690: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22691: LD_STRING getStreamItemsFromMission("
22693: PUSH
22694: LD_VAR 0 5
22698: STR
22699: PUSH
22700: LD_STRING ","
22702: STR
22703: PUSH
22704: LD_VAR 0 6
22708: STR
22709: PUSH
22710: LD_STRING ","
22712: STR
22713: PUSH
22714: LD_VAR 0 7
22718: STR
22719: PUSH
22720: LD_STRING ")
22722: STR
22723: PPUSH
22724: CALL_OW 559
// end else
22728: GO 22737
// ToLua ( getStreamItemsFromMission("","","") ) ;
22730: LD_STRING getStreamItemsFromMission("","","")
22732: PPUSH
22733: CALL_OW 559
// end ;
22737: LD_VAR 0 2
22741: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22742: LD_EXP 37
22746: PUSH
22747: LD_EXP 42
22751: AND
22752: IFFALSE 22876
22754: GO 22756
22756: DISABLE
22757: LD_INT 0
22759: PPUSH
22760: PPUSH
// begin enable ;
22761: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22762: LD_ADDR_VAR 0 2
22766: PUSH
22767: LD_INT 22
22769: PUSH
22770: LD_OWVAR 2
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 2
22781: PUSH
22782: LD_INT 34
22784: PUSH
22785: LD_INT 7
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 34
22794: PUSH
22795: LD_INT 45
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 34
22804: PUSH
22805: LD_INT 28
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 34
22814: PUSH
22815: LD_INT 47
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PPUSH
22833: CALL_OW 69
22837: ST_TO_ADDR
// if not tmp then
22838: LD_VAR 0 2
22842: NOT
22843: IFFALSE 22847
// exit ;
22845: GO 22876
// for i in tmp do
22847: LD_ADDR_VAR 0 1
22851: PUSH
22852: LD_VAR 0 2
22856: PUSH
22857: FOR_IN
22858: IFFALSE 22874
// begin SetLives ( i , 0 ) ;
22860: LD_VAR 0 1
22864: PPUSH
22865: LD_INT 0
22867: PPUSH
22868: CALL_OW 234
// end ;
22872: GO 22857
22874: POP
22875: POP
// end ;
22876: PPOPN 2
22878: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22879: LD_EXP 37
22883: PUSH
22884: LD_EXP 43
22888: AND
22889: IFFALSE 22973
22891: GO 22893
22893: DISABLE
22894: LD_INT 0
22896: PPUSH
22897: PPUSH
// begin enable ;
22898: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22899: LD_ADDR_VAR 0 2
22903: PUSH
22904: LD_INT 22
22906: PUSH
22907: LD_OWVAR 2
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 32
22918: PUSH
22919: LD_INT 3
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PPUSH
22930: CALL_OW 69
22934: ST_TO_ADDR
// if not tmp then
22935: LD_VAR 0 2
22939: NOT
22940: IFFALSE 22944
// exit ;
22942: GO 22973
// for i in tmp do
22944: LD_ADDR_VAR 0 1
22948: PUSH
22949: LD_VAR 0 2
22953: PUSH
22954: FOR_IN
22955: IFFALSE 22971
// begin SetLives ( i , 0 ) ;
22957: LD_VAR 0 1
22961: PPUSH
22962: LD_INT 0
22964: PPUSH
22965: CALL_OW 234
// end ;
22969: GO 22954
22971: POP
22972: POP
// end ;
22973: PPOPN 2
22975: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22976: LD_EXP 37
22980: PUSH
22981: LD_EXP 40
22985: AND
22986: IFFALSE 23079
22988: GO 22990
22990: DISABLE
22991: LD_INT 0
22993: PPUSH
// begin enable ;
22994: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22995: LD_ADDR_VAR 0 1
22999: PUSH
23000: LD_INT 22
23002: PUSH
23003: LD_OWVAR 2
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 2
23014: PUSH
23015: LD_INT 25
23017: PUSH
23018: LD_INT 5
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 25
23027: PUSH
23028: LD_INT 9
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 25
23037: PUSH
23038: LD_INT 8
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PPUSH
23055: CALL_OW 69
23059: PUSH
23060: FOR_IN
23061: IFFALSE 23077
// begin SetClass ( i , 1 ) ;
23063: LD_VAR 0 1
23067: PPUSH
23068: LD_INT 1
23070: PPUSH
23071: CALL_OW 336
// end ;
23075: GO 23060
23077: POP
23078: POP
// end ;
23079: PPOPN 1
23081: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23082: LD_EXP 37
23086: PUSH
23087: LD_EXP 41
23091: AND
23092: PUSH
23093: LD_OWVAR 65
23097: PUSH
23098: LD_INT 7
23100: LESS
23101: AND
23102: IFFALSE 23116
23104: GO 23106
23106: DISABLE
// begin enable ;
23107: ENABLE
// game_speed := 7 ;
23108: LD_ADDR_OWVAR 65
23112: PUSH
23113: LD_INT 7
23115: ST_TO_ADDR
// end ;
23116: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23117: LD_EXP 37
23121: PUSH
23122: LD_EXP 44
23126: AND
23127: IFFALSE 23329
23129: GO 23131
23131: DISABLE
23132: LD_INT 0
23134: PPUSH
23135: PPUSH
23136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23137: LD_ADDR_VAR 0 3
23141: PUSH
23142: LD_INT 81
23144: PUSH
23145: LD_OWVAR 2
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 21
23156: PUSH
23157: LD_INT 1
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PPUSH
23168: CALL_OW 69
23172: ST_TO_ADDR
// if not tmp then
23173: LD_VAR 0 3
23177: NOT
23178: IFFALSE 23182
// exit ;
23180: GO 23329
// if tmp > 5 then
23182: LD_VAR 0 3
23186: PUSH
23187: LD_INT 5
23189: GREATER
23190: IFFALSE 23202
// k := 5 else
23192: LD_ADDR_VAR 0 2
23196: PUSH
23197: LD_INT 5
23199: ST_TO_ADDR
23200: GO 23212
// k := tmp ;
23202: LD_ADDR_VAR 0 2
23206: PUSH
23207: LD_VAR 0 3
23211: ST_TO_ADDR
// for i := 1 to k do
23212: LD_ADDR_VAR 0 1
23216: PUSH
23217: DOUBLE
23218: LD_INT 1
23220: DEC
23221: ST_TO_ADDR
23222: LD_VAR 0 2
23226: PUSH
23227: FOR_TO
23228: IFFALSE 23327
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23230: LD_VAR 0 3
23234: PUSH
23235: LD_VAR 0 1
23239: ARRAY
23240: PPUSH
23241: LD_VAR 0 1
23245: PUSH
23246: LD_INT 4
23248: MOD
23249: PUSH
23250: LD_INT 1
23252: PLUS
23253: PPUSH
23254: CALL_OW 259
23258: PUSH
23259: LD_INT 10
23261: LESS
23262: IFFALSE 23325
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23264: LD_VAR 0 3
23268: PUSH
23269: LD_VAR 0 1
23273: ARRAY
23274: PPUSH
23275: LD_VAR 0 1
23279: PUSH
23280: LD_INT 4
23282: MOD
23283: PUSH
23284: LD_INT 1
23286: PLUS
23287: PPUSH
23288: LD_VAR 0 3
23292: PUSH
23293: LD_VAR 0 1
23297: ARRAY
23298: PPUSH
23299: LD_VAR 0 1
23303: PUSH
23304: LD_INT 4
23306: MOD
23307: PUSH
23308: LD_INT 1
23310: PLUS
23311: PPUSH
23312: CALL_OW 259
23316: PUSH
23317: LD_INT 1
23319: PLUS
23320: PPUSH
23321: CALL_OW 237
23325: GO 23227
23327: POP
23328: POP
// end ;
23329: PPOPN 3
23331: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23332: LD_EXP 37
23336: PUSH
23337: LD_EXP 45
23341: AND
23342: IFFALSE 23362
23344: GO 23346
23346: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23347: LD_INT 4
23349: PPUSH
23350: LD_OWVAR 2
23354: PPUSH
23355: LD_INT 0
23357: PPUSH
23358: CALL_OW 324
23362: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23363: LD_EXP 37
23367: PUSH
23368: LD_EXP 74
23372: AND
23373: IFFALSE 23393
23375: GO 23377
23377: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23378: LD_INT 19
23380: PPUSH
23381: LD_OWVAR 2
23385: PPUSH
23386: LD_INT 0
23388: PPUSH
23389: CALL_OW 324
23393: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23394: LD_EXP 37
23398: PUSH
23399: LD_EXP 46
23403: AND
23404: IFFALSE 23506
23406: GO 23408
23408: DISABLE
23409: LD_INT 0
23411: PPUSH
23412: PPUSH
// begin enable ;
23413: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23414: LD_ADDR_VAR 0 2
23418: PUSH
23419: LD_INT 22
23421: PUSH
23422: LD_OWVAR 2
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 2
23433: PUSH
23434: LD_INT 34
23436: PUSH
23437: LD_INT 11
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 34
23446: PUSH
23447: LD_INT 30
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: LIST
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PPUSH
23463: CALL_OW 69
23467: ST_TO_ADDR
// if not tmp then
23468: LD_VAR 0 2
23472: NOT
23473: IFFALSE 23477
// exit ;
23475: GO 23506
// for i in tmp do
23477: LD_ADDR_VAR 0 1
23481: PUSH
23482: LD_VAR 0 2
23486: PUSH
23487: FOR_IN
23488: IFFALSE 23504
// begin SetLives ( i , 0 ) ;
23490: LD_VAR 0 1
23494: PPUSH
23495: LD_INT 0
23497: PPUSH
23498: CALL_OW 234
// end ;
23502: GO 23487
23504: POP
23505: POP
// end ;
23506: PPOPN 2
23508: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23509: LD_EXP 37
23513: PUSH
23514: LD_EXP 47
23518: AND
23519: IFFALSE 23539
23521: GO 23523
23523: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23524: LD_INT 32
23526: PPUSH
23527: LD_OWVAR 2
23531: PPUSH
23532: LD_INT 0
23534: PPUSH
23535: CALL_OW 324
23539: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23540: LD_EXP 37
23544: PUSH
23545: LD_EXP 48
23549: AND
23550: IFFALSE 23731
23552: GO 23554
23554: DISABLE
23555: LD_INT 0
23557: PPUSH
23558: PPUSH
23559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23560: LD_ADDR_VAR 0 2
23564: PUSH
23565: LD_INT 22
23567: PUSH
23568: LD_OWVAR 2
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 33
23579: PUSH
23580: LD_INT 3
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PPUSH
23591: CALL_OW 69
23595: ST_TO_ADDR
// if not tmp then
23596: LD_VAR 0 2
23600: NOT
23601: IFFALSE 23605
// exit ;
23603: GO 23731
// side := 0 ;
23605: LD_ADDR_VAR 0 3
23609: PUSH
23610: LD_INT 0
23612: ST_TO_ADDR
// for i := 1 to 8 do
23613: LD_ADDR_VAR 0 1
23617: PUSH
23618: DOUBLE
23619: LD_INT 1
23621: DEC
23622: ST_TO_ADDR
23623: LD_INT 8
23625: PUSH
23626: FOR_TO
23627: IFFALSE 23675
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23629: LD_OWVAR 2
23633: PUSH
23634: LD_VAR 0 1
23638: NONEQUAL
23639: PUSH
23640: LD_OWVAR 2
23644: PPUSH
23645: LD_VAR 0 1
23649: PPUSH
23650: CALL_OW 81
23654: PUSH
23655: LD_INT 2
23657: EQUAL
23658: AND
23659: IFFALSE 23673
// begin side := i ;
23661: LD_ADDR_VAR 0 3
23665: PUSH
23666: LD_VAR 0 1
23670: ST_TO_ADDR
// break ;
23671: GO 23675
// end ;
23673: GO 23626
23675: POP
23676: POP
// if not side then
23677: LD_VAR 0 3
23681: NOT
23682: IFFALSE 23686
// exit ;
23684: GO 23731
// for i := 1 to tmp do
23686: LD_ADDR_VAR 0 1
23690: PUSH
23691: DOUBLE
23692: LD_INT 1
23694: DEC
23695: ST_TO_ADDR
23696: LD_VAR 0 2
23700: PUSH
23701: FOR_TO
23702: IFFALSE 23729
// if Prob ( 60 ) then
23704: LD_INT 60
23706: PPUSH
23707: CALL_OW 13
23711: IFFALSE 23727
// SetSide ( i , side ) ;
23713: LD_VAR 0 1
23717: PPUSH
23718: LD_VAR 0 3
23722: PPUSH
23723: CALL_OW 235
23727: GO 23701
23729: POP
23730: POP
// end ;
23731: PPOPN 3
23733: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23734: LD_EXP 37
23738: PUSH
23739: LD_EXP 50
23743: AND
23744: IFFALSE 23863
23746: GO 23748
23748: DISABLE
23749: LD_INT 0
23751: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23752: LD_ADDR_VAR 0 1
23756: PUSH
23757: LD_INT 22
23759: PUSH
23760: LD_OWVAR 2
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 21
23771: PUSH
23772: LD_INT 1
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 3
23781: PUSH
23782: LD_INT 23
23784: PUSH
23785: LD_INT 0
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: LIST
23800: PPUSH
23801: CALL_OW 69
23805: PUSH
23806: FOR_IN
23807: IFFALSE 23861
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23809: LD_VAR 0 1
23813: PPUSH
23814: CALL_OW 257
23818: PUSH
23819: LD_INT 1
23821: PUSH
23822: LD_INT 2
23824: PUSH
23825: LD_INT 3
23827: PUSH
23828: LD_INT 4
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: IN
23837: IFFALSE 23859
// SetClass ( un , rand ( 1 , 4 ) ) ;
23839: LD_VAR 0 1
23843: PPUSH
23844: LD_INT 1
23846: PPUSH
23847: LD_INT 4
23849: PPUSH
23850: CALL_OW 12
23854: PPUSH
23855: CALL_OW 336
23859: GO 23806
23861: POP
23862: POP
// end ;
23863: PPOPN 1
23865: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23866: LD_EXP 37
23870: PUSH
23871: LD_EXP 49
23875: AND
23876: IFFALSE 23955
23878: GO 23880
23880: DISABLE
23881: LD_INT 0
23883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23884: LD_ADDR_VAR 0 1
23888: PUSH
23889: LD_INT 22
23891: PUSH
23892: LD_OWVAR 2
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 21
23903: PUSH
23904: LD_INT 3
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PPUSH
23915: CALL_OW 69
23919: ST_TO_ADDR
// if not tmp then
23920: LD_VAR 0 1
23924: NOT
23925: IFFALSE 23929
// exit ;
23927: GO 23955
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23929: LD_VAR 0 1
23933: PUSH
23934: LD_INT 1
23936: PPUSH
23937: LD_VAR 0 1
23941: PPUSH
23942: CALL_OW 12
23946: ARRAY
23947: PPUSH
23948: LD_INT 100
23950: PPUSH
23951: CALL_OW 234
// end ;
23955: PPOPN 1
23957: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23958: LD_EXP 37
23962: PUSH
23963: LD_EXP 51
23967: AND
23968: IFFALSE 24066
23970: GO 23972
23972: DISABLE
23973: LD_INT 0
23975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23976: LD_ADDR_VAR 0 1
23980: PUSH
23981: LD_INT 22
23983: PUSH
23984: LD_OWVAR 2
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 21
23995: PUSH
23996: LD_INT 1
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PPUSH
24007: CALL_OW 69
24011: ST_TO_ADDR
// if not tmp then
24012: LD_VAR 0 1
24016: NOT
24017: IFFALSE 24021
// exit ;
24019: GO 24066
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24021: LD_VAR 0 1
24025: PUSH
24026: LD_INT 1
24028: PPUSH
24029: LD_VAR 0 1
24033: PPUSH
24034: CALL_OW 12
24038: ARRAY
24039: PPUSH
24040: LD_INT 1
24042: PPUSH
24043: LD_INT 4
24045: PPUSH
24046: CALL_OW 12
24050: PPUSH
24051: LD_INT 3000
24053: PPUSH
24054: LD_INT 9000
24056: PPUSH
24057: CALL_OW 12
24061: PPUSH
24062: CALL_OW 492
// end ;
24066: PPOPN 1
24068: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24069: LD_EXP 37
24073: PUSH
24074: LD_EXP 52
24078: AND
24079: IFFALSE 24099
24081: GO 24083
24083: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24084: LD_INT 1
24086: PPUSH
24087: LD_OWVAR 2
24091: PPUSH
24092: LD_INT 0
24094: PPUSH
24095: CALL_OW 324
24099: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24100: LD_EXP 37
24104: PUSH
24105: LD_EXP 53
24109: AND
24110: IFFALSE 24193
24112: GO 24114
24114: DISABLE
24115: LD_INT 0
24117: PPUSH
24118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24119: LD_ADDR_VAR 0 2
24123: PUSH
24124: LD_INT 22
24126: PUSH
24127: LD_OWVAR 2
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 21
24138: PUSH
24139: LD_INT 3
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PPUSH
24150: CALL_OW 69
24154: ST_TO_ADDR
// if not tmp then
24155: LD_VAR 0 2
24159: NOT
24160: IFFALSE 24164
// exit ;
24162: GO 24193
// for i in tmp do
24164: LD_ADDR_VAR 0 1
24168: PUSH
24169: LD_VAR 0 2
24173: PUSH
24174: FOR_IN
24175: IFFALSE 24191
// SetBLevel ( i , 10 ) ;
24177: LD_VAR 0 1
24181: PPUSH
24182: LD_INT 10
24184: PPUSH
24185: CALL_OW 241
24189: GO 24174
24191: POP
24192: POP
// end ;
24193: PPOPN 2
24195: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24196: LD_EXP 37
24200: PUSH
24201: LD_EXP 54
24205: AND
24206: IFFALSE 24317
24208: GO 24210
24210: DISABLE
24211: LD_INT 0
24213: PPUSH
24214: PPUSH
24215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24216: LD_ADDR_VAR 0 3
24220: PUSH
24221: LD_INT 22
24223: PUSH
24224: LD_OWVAR 2
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 25
24235: PUSH
24236: LD_INT 1
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PPUSH
24247: CALL_OW 69
24251: ST_TO_ADDR
// if not tmp then
24252: LD_VAR 0 3
24256: NOT
24257: IFFALSE 24261
// exit ;
24259: GO 24317
// un := tmp [ rand ( 1 , tmp ) ] ;
24261: LD_ADDR_VAR 0 2
24265: PUSH
24266: LD_VAR 0 3
24270: PUSH
24271: LD_INT 1
24273: PPUSH
24274: LD_VAR 0 3
24278: PPUSH
24279: CALL_OW 12
24283: ARRAY
24284: ST_TO_ADDR
// if Crawls ( un ) then
24285: LD_VAR 0 2
24289: PPUSH
24290: CALL_OW 318
24294: IFFALSE 24305
// ComWalk ( un ) ;
24296: LD_VAR 0 2
24300: PPUSH
24301: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24305: LD_VAR 0 2
24309: PPUSH
24310: LD_INT 5
24312: PPUSH
24313: CALL_OW 336
// end ;
24317: PPOPN 3
24319: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24320: LD_EXP 37
24324: PUSH
24325: LD_EXP 55
24329: AND
24330: PUSH
24331: LD_OWVAR 67
24335: PUSH
24336: LD_INT 4
24338: LESS
24339: AND
24340: IFFALSE 24359
24342: GO 24344
24344: DISABLE
// begin Difficulty := Difficulty + 1 ;
24345: LD_ADDR_OWVAR 67
24349: PUSH
24350: LD_OWVAR 67
24354: PUSH
24355: LD_INT 1
24357: PLUS
24358: ST_TO_ADDR
// end ;
24359: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24360: LD_EXP 37
24364: PUSH
24365: LD_EXP 56
24369: AND
24370: IFFALSE 24473
24372: GO 24374
24374: DISABLE
24375: LD_INT 0
24377: PPUSH
// begin for i := 1 to 5 do
24378: LD_ADDR_VAR 0 1
24382: PUSH
24383: DOUBLE
24384: LD_INT 1
24386: DEC
24387: ST_TO_ADDR
24388: LD_INT 5
24390: PUSH
24391: FOR_TO
24392: IFFALSE 24471
// begin uc_nation := nation_nature ;
24394: LD_ADDR_OWVAR 21
24398: PUSH
24399: LD_INT 0
24401: ST_TO_ADDR
// uc_side := 0 ;
24402: LD_ADDR_OWVAR 20
24406: PUSH
24407: LD_INT 0
24409: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24410: LD_ADDR_OWVAR 29
24414: PUSH
24415: LD_INT 12
24417: PUSH
24418: LD_INT 12
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: ST_TO_ADDR
// hc_agressivity := 20 ;
24425: LD_ADDR_OWVAR 35
24429: PUSH
24430: LD_INT 20
24432: ST_TO_ADDR
// hc_class := class_tiger ;
24433: LD_ADDR_OWVAR 28
24437: PUSH
24438: LD_INT 14
24440: ST_TO_ADDR
// hc_gallery :=  ;
24441: LD_ADDR_OWVAR 33
24445: PUSH
24446: LD_STRING 
24448: ST_TO_ADDR
// hc_name :=  ;
24449: LD_ADDR_OWVAR 26
24453: PUSH
24454: LD_STRING 
24456: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24457: CALL_OW 44
24461: PPUSH
24462: LD_INT 0
24464: PPUSH
24465: CALL_OW 51
// end ;
24469: GO 24391
24471: POP
24472: POP
// end ;
24473: PPOPN 1
24475: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24476: LD_EXP 37
24480: PUSH
24481: LD_EXP 57
24485: AND
24486: IFFALSE 24495
24488: GO 24490
24490: DISABLE
// StreamSibBomb ;
24491: CALL 24496 0 0
24495: END
// export function StreamSibBomb ; var i , x , y ; begin
24496: LD_INT 0
24498: PPUSH
24499: PPUSH
24500: PPUSH
24501: PPUSH
// result := false ;
24502: LD_ADDR_VAR 0 1
24506: PUSH
24507: LD_INT 0
24509: ST_TO_ADDR
// for i := 1 to 16 do
24510: LD_ADDR_VAR 0 2
24514: PUSH
24515: DOUBLE
24516: LD_INT 1
24518: DEC
24519: ST_TO_ADDR
24520: LD_INT 16
24522: PUSH
24523: FOR_TO
24524: IFFALSE 24723
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24526: LD_ADDR_VAR 0 3
24530: PUSH
24531: LD_INT 10
24533: PUSH
24534: LD_INT 20
24536: PUSH
24537: LD_INT 30
24539: PUSH
24540: LD_INT 40
24542: PUSH
24543: LD_INT 50
24545: PUSH
24546: LD_INT 60
24548: PUSH
24549: LD_INT 70
24551: PUSH
24552: LD_INT 80
24554: PUSH
24555: LD_INT 90
24557: PUSH
24558: LD_INT 100
24560: PUSH
24561: LD_INT 110
24563: PUSH
24564: LD_INT 120
24566: PUSH
24567: LD_INT 130
24569: PUSH
24570: LD_INT 140
24572: PUSH
24573: LD_INT 150
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: PPUSH
24596: LD_INT 15
24598: PPUSH
24599: CALL_OW 12
24603: ARRAY
24604: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24605: LD_ADDR_VAR 0 4
24609: PUSH
24610: LD_INT 10
24612: PUSH
24613: LD_INT 20
24615: PUSH
24616: LD_INT 30
24618: PUSH
24619: LD_INT 40
24621: PUSH
24622: LD_INT 50
24624: PUSH
24625: LD_INT 60
24627: PUSH
24628: LD_INT 70
24630: PUSH
24631: LD_INT 80
24633: PUSH
24634: LD_INT 90
24636: PUSH
24637: LD_INT 100
24639: PUSH
24640: LD_INT 110
24642: PUSH
24643: LD_INT 120
24645: PUSH
24646: LD_INT 130
24648: PUSH
24649: LD_INT 140
24651: PUSH
24652: LD_INT 150
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 1
24674: PPUSH
24675: LD_INT 15
24677: PPUSH
24678: CALL_OW 12
24682: ARRAY
24683: ST_TO_ADDR
// if ValidHex ( x , y ) then
24684: LD_VAR 0 3
24688: PPUSH
24689: LD_VAR 0 4
24693: PPUSH
24694: CALL_OW 488
24698: IFFALSE 24721
// begin result := [ x , y ] ;
24700: LD_ADDR_VAR 0 1
24704: PUSH
24705: LD_VAR 0 3
24709: PUSH
24710: LD_VAR 0 4
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: ST_TO_ADDR
// break ;
24719: GO 24723
// end ; end ;
24721: GO 24523
24723: POP
24724: POP
// if result then
24725: LD_VAR 0 1
24729: IFFALSE 24789
// begin ToLua ( playSibBomb() ) ;
24731: LD_STRING playSibBomb()
24733: PPUSH
24734: CALL_OW 559
// wait ( 0 0$14 ) ;
24738: LD_INT 490
24740: PPUSH
24741: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24745: LD_VAR 0 1
24749: PUSH
24750: LD_INT 1
24752: ARRAY
24753: PPUSH
24754: LD_VAR 0 1
24758: PUSH
24759: LD_INT 2
24761: ARRAY
24762: PPUSH
24763: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24767: LD_VAR 0 1
24771: PUSH
24772: LD_INT 1
24774: ARRAY
24775: PPUSH
24776: LD_VAR 0 1
24780: PUSH
24781: LD_INT 2
24783: ARRAY
24784: PPUSH
24785: CALL_OW 429
// end ; end ;
24789: LD_VAR 0 1
24793: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24794: LD_EXP 37
24798: PUSH
24799: LD_EXP 59
24803: AND
24804: IFFALSE 24816
24806: GO 24808
24808: DISABLE
// YouLost (  ) ;
24809: LD_STRING 
24811: PPUSH
24812: CALL_OW 104
24816: END
// every 0 0$1 trigger StreamModeActive and sFog do
24817: LD_EXP 37
24821: PUSH
24822: LD_EXP 58
24826: AND
24827: IFFALSE 24841
24829: GO 24831
24831: DISABLE
// FogOff ( your_side ) ;
24832: LD_OWVAR 2
24836: PPUSH
24837: CALL_OW 344
24841: END
// every 0 0$1 trigger StreamModeActive and sSun do
24842: LD_EXP 37
24846: PUSH
24847: LD_EXP 60
24851: AND
24852: IFFALSE 24880
24854: GO 24856
24856: DISABLE
// begin solar_recharge_percent := 0 ;
24857: LD_ADDR_OWVAR 79
24861: PUSH
24862: LD_INT 0
24864: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24865: LD_INT 10500
24867: PPUSH
24868: CALL_OW 67
// solar_recharge_percent := 100 ;
24872: LD_ADDR_OWVAR 79
24876: PUSH
24877: LD_INT 100
24879: ST_TO_ADDR
// end ;
24880: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24881: LD_EXP 37
24885: PUSH
24886: LD_EXP 61
24890: AND
24891: IFFALSE 25130
24893: GO 24895
24895: DISABLE
24896: LD_INT 0
24898: PPUSH
24899: PPUSH
24900: PPUSH
// begin tmp := [ ] ;
24901: LD_ADDR_VAR 0 3
24905: PUSH
24906: EMPTY
24907: ST_TO_ADDR
// for i := 1 to 6 do
24908: LD_ADDR_VAR 0 1
24912: PUSH
24913: DOUBLE
24914: LD_INT 1
24916: DEC
24917: ST_TO_ADDR
24918: LD_INT 6
24920: PUSH
24921: FOR_TO
24922: IFFALSE 25027
// begin uc_nation := nation_nature ;
24924: LD_ADDR_OWVAR 21
24928: PUSH
24929: LD_INT 0
24931: ST_TO_ADDR
// uc_side := 0 ;
24932: LD_ADDR_OWVAR 20
24936: PUSH
24937: LD_INT 0
24939: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24940: LD_ADDR_OWVAR 29
24944: PUSH
24945: LD_INT 12
24947: PUSH
24948: LD_INT 12
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: ST_TO_ADDR
// hc_agressivity := 20 ;
24955: LD_ADDR_OWVAR 35
24959: PUSH
24960: LD_INT 20
24962: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24963: LD_ADDR_OWVAR 28
24967: PUSH
24968: LD_INT 17
24970: ST_TO_ADDR
// hc_gallery :=  ;
24971: LD_ADDR_OWVAR 33
24975: PUSH
24976: LD_STRING 
24978: ST_TO_ADDR
// hc_name :=  ;
24979: LD_ADDR_OWVAR 26
24983: PUSH
24984: LD_STRING 
24986: ST_TO_ADDR
// un := CreateHuman ;
24987: LD_ADDR_VAR 0 2
24991: PUSH
24992: CALL_OW 44
24996: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24997: LD_VAR 0 2
25001: PPUSH
25002: LD_INT 1
25004: PPUSH
25005: CALL_OW 51
// tmp := tmp ^ un ;
25009: LD_ADDR_VAR 0 3
25013: PUSH
25014: LD_VAR 0 3
25018: PUSH
25019: LD_VAR 0 2
25023: ADD
25024: ST_TO_ADDR
// end ;
25025: GO 24921
25027: POP
25028: POP
// repeat wait ( 0 0$1 ) ;
25029: LD_INT 35
25031: PPUSH
25032: CALL_OW 67
// for un in tmp do
25036: LD_ADDR_VAR 0 2
25040: PUSH
25041: LD_VAR 0 3
25045: PUSH
25046: FOR_IN
25047: IFFALSE 25121
// begin if IsDead ( un ) then
25049: LD_VAR 0 2
25053: PPUSH
25054: CALL_OW 301
25058: IFFALSE 25078
// begin tmp := tmp diff un ;
25060: LD_ADDR_VAR 0 3
25064: PUSH
25065: LD_VAR 0 3
25069: PUSH
25070: LD_VAR 0 2
25074: DIFF
25075: ST_TO_ADDR
// continue ;
25076: GO 25046
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25078: LD_VAR 0 2
25082: PPUSH
25083: LD_INT 3
25085: PUSH
25086: LD_INT 22
25088: PUSH
25089: LD_INT 0
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PPUSH
25100: CALL_OW 69
25104: PPUSH
25105: LD_VAR 0 2
25109: PPUSH
25110: CALL_OW 74
25114: PPUSH
25115: CALL_OW 115
// end ;
25119: GO 25046
25121: POP
25122: POP
// until not tmp ;
25123: LD_VAR 0 3
25127: NOT
25128: IFFALSE 25029
// end ;
25130: PPOPN 3
25132: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25133: LD_EXP 37
25137: PUSH
25138: LD_EXP 62
25142: AND
25143: IFFALSE 25197
25145: GO 25147
25147: DISABLE
// begin ToLua ( displayTroll(); ) ;
25148: LD_STRING displayTroll();
25150: PPUSH
25151: CALL_OW 559
// wait ( 3 3$00 ) ;
25155: LD_INT 6300
25157: PPUSH
25158: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25162: LD_STRING hideTroll();
25164: PPUSH
25165: CALL_OW 559
// wait ( 1 1$00 ) ;
25169: LD_INT 2100
25171: PPUSH
25172: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25176: LD_STRING displayTroll();
25178: PPUSH
25179: CALL_OW 559
// wait ( 1 1$00 ) ;
25183: LD_INT 2100
25185: PPUSH
25186: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25190: LD_STRING hideTroll();
25192: PPUSH
25193: CALL_OW 559
// end ;
25197: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25198: LD_EXP 37
25202: PUSH
25203: LD_EXP 63
25207: AND
25208: IFFALSE 25271
25210: GO 25212
25212: DISABLE
25213: LD_INT 0
25215: PPUSH
// begin p := 0 ;
25216: LD_ADDR_VAR 0 1
25220: PUSH
25221: LD_INT 0
25223: ST_TO_ADDR
// repeat game_speed := 1 ;
25224: LD_ADDR_OWVAR 65
25228: PUSH
25229: LD_INT 1
25231: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25232: LD_INT 35
25234: PPUSH
25235: CALL_OW 67
// p := p + 1 ;
25239: LD_ADDR_VAR 0 1
25243: PUSH
25244: LD_VAR 0 1
25248: PUSH
25249: LD_INT 1
25251: PLUS
25252: ST_TO_ADDR
// until p >= 60 ;
25253: LD_VAR 0 1
25257: PUSH
25258: LD_INT 60
25260: GREATEREQUAL
25261: IFFALSE 25224
// game_speed := 4 ;
25263: LD_ADDR_OWVAR 65
25267: PUSH
25268: LD_INT 4
25270: ST_TO_ADDR
// end ;
25271: PPOPN 1
25273: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25274: LD_EXP 37
25278: PUSH
25279: LD_EXP 64
25283: AND
25284: IFFALSE 25430
25286: GO 25288
25288: DISABLE
25289: LD_INT 0
25291: PPUSH
25292: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25293: LD_ADDR_VAR 0 1
25297: PUSH
25298: LD_INT 22
25300: PUSH
25301: LD_OWVAR 2
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 2
25312: PUSH
25313: LD_INT 30
25315: PUSH
25316: LD_INT 0
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 30
25325: PUSH
25326: LD_INT 1
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: LIST
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PPUSH
25342: CALL_OW 69
25346: ST_TO_ADDR
// if not depot then
25347: LD_VAR 0 1
25351: NOT
25352: IFFALSE 25356
// exit ;
25354: GO 25430
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25356: LD_ADDR_VAR 0 2
25360: PUSH
25361: LD_VAR 0 1
25365: PUSH
25366: LD_INT 1
25368: PPUSH
25369: LD_VAR 0 1
25373: PPUSH
25374: CALL_OW 12
25378: ARRAY
25379: PPUSH
25380: CALL_OW 274
25384: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25385: LD_VAR 0 2
25389: PPUSH
25390: LD_INT 1
25392: PPUSH
25393: LD_INT 0
25395: PPUSH
25396: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25400: LD_VAR 0 2
25404: PPUSH
25405: LD_INT 2
25407: PPUSH
25408: LD_INT 0
25410: PPUSH
25411: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25415: LD_VAR 0 2
25419: PPUSH
25420: LD_INT 3
25422: PPUSH
25423: LD_INT 0
25425: PPUSH
25426: CALL_OW 277
// end ;
25430: PPOPN 2
25432: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25433: LD_EXP 37
25437: PUSH
25438: LD_EXP 65
25442: AND
25443: IFFALSE 25540
25445: GO 25447
25447: DISABLE
25448: LD_INT 0
25450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25451: LD_ADDR_VAR 0 1
25455: PUSH
25456: LD_INT 22
25458: PUSH
25459: LD_OWVAR 2
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 21
25470: PUSH
25471: LD_INT 1
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 3
25480: PUSH
25481: LD_INT 23
25483: PUSH
25484: LD_INT 0
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: LIST
25499: PPUSH
25500: CALL_OW 69
25504: ST_TO_ADDR
// if not tmp then
25505: LD_VAR 0 1
25509: NOT
25510: IFFALSE 25514
// exit ;
25512: GO 25540
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25514: LD_VAR 0 1
25518: PUSH
25519: LD_INT 1
25521: PPUSH
25522: LD_VAR 0 1
25526: PPUSH
25527: CALL_OW 12
25531: ARRAY
25532: PPUSH
25533: LD_INT 200
25535: PPUSH
25536: CALL_OW 234
// end ;
25540: PPOPN 1
25542: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25543: LD_EXP 37
25547: PUSH
25548: LD_EXP 66
25552: AND
25553: IFFALSE 25632
25555: GO 25557
25557: DISABLE
25558: LD_INT 0
25560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25561: LD_ADDR_VAR 0 1
25565: PUSH
25566: LD_INT 22
25568: PUSH
25569: LD_OWVAR 2
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 21
25580: PUSH
25581: LD_INT 2
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PPUSH
25592: CALL_OW 69
25596: ST_TO_ADDR
// if not tmp then
25597: LD_VAR 0 1
25601: NOT
25602: IFFALSE 25606
// exit ;
25604: GO 25632
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25606: LD_VAR 0 1
25610: PUSH
25611: LD_INT 1
25613: PPUSH
25614: LD_VAR 0 1
25618: PPUSH
25619: CALL_OW 12
25623: ARRAY
25624: PPUSH
25625: LD_INT 60
25627: PPUSH
25628: CALL_OW 234
// end ;
25632: PPOPN 1
25634: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25635: LD_EXP 37
25639: PUSH
25640: LD_EXP 67
25644: AND
25645: IFFALSE 25744
25647: GO 25649
25649: DISABLE
25650: LD_INT 0
25652: PPUSH
25653: PPUSH
// begin enable ;
25654: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25655: LD_ADDR_VAR 0 1
25659: PUSH
25660: LD_INT 22
25662: PUSH
25663: LD_OWVAR 2
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 61
25674: PUSH
25675: EMPTY
25676: LIST
25677: PUSH
25678: LD_INT 33
25680: PUSH
25681: LD_INT 2
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: LIST
25692: PPUSH
25693: CALL_OW 69
25697: ST_TO_ADDR
// if not tmp then
25698: LD_VAR 0 1
25702: NOT
25703: IFFALSE 25707
// exit ;
25705: GO 25744
// for i in tmp do
25707: LD_ADDR_VAR 0 2
25711: PUSH
25712: LD_VAR 0 1
25716: PUSH
25717: FOR_IN
25718: IFFALSE 25742
// if IsControledBy ( i ) then
25720: LD_VAR 0 2
25724: PPUSH
25725: CALL_OW 312
25729: IFFALSE 25740
// ComUnlink ( i ) ;
25731: LD_VAR 0 2
25735: PPUSH
25736: CALL_OW 136
25740: GO 25717
25742: POP
25743: POP
// end ;
25744: PPOPN 2
25746: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25747: LD_EXP 37
25751: PUSH
25752: LD_EXP 68
25756: AND
25757: IFFALSE 25897
25759: GO 25761
25761: DISABLE
25762: LD_INT 0
25764: PPUSH
25765: PPUSH
// begin ToLua ( displayPowell(); ) ;
25766: LD_STRING displayPowell();
25768: PPUSH
25769: CALL_OW 559
// uc_side := 0 ;
25773: LD_ADDR_OWVAR 20
25777: PUSH
25778: LD_INT 0
25780: ST_TO_ADDR
// uc_nation := 2 ;
25781: LD_ADDR_OWVAR 21
25785: PUSH
25786: LD_INT 2
25788: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25789: LD_ADDR_OWVAR 37
25793: PUSH
25794: LD_INT 14
25796: ST_TO_ADDR
// vc_engine := engine_siberite ;
25797: LD_ADDR_OWVAR 39
25801: PUSH
25802: LD_INT 3
25804: ST_TO_ADDR
// vc_control := control_apeman ;
25805: LD_ADDR_OWVAR 38
25809: PUSH
25810: LD_INT 5
25812: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25813: LD_ADDR_OWVAR 40
25817: PUSH
25818: LD_INT 29
25820: ST_TO_ADDR
// un := CreateVehicle ;
25821: LD_ADDR_VAR 0 2
25825: PUSH
25826: CALL_OW 45
25830: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25831: LD_VAR 0 2
25835: PPUSH
25836: LD_INT 1
25838: PPUSH
25839: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25843: LD_INT 35
25845: PPUSH
25846: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25850: LD_VAR 0 2
25854: PPUSH
25855: LD_INT 22
25857: PUSH
25858: LD_OWVAR 2
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PPUSH
25867: CALL_OW 69
25871: PPUSH
25872: LD_VAR 0 2
25876: PPUSH
25877: CALL_OW 74
25881: PPUSH
25882: CALL_OW 115
// until IsDead ( un ) ;
25886: LD_VAR 0 2
25890: PPUSH
25891: CALL_OW 301
25895: IFFALSE 25843
// end ;
25897: PPOPN 2
25899: END
// every 0 0$1 trigger StreamModeActive and sStu do
25900: LD_EXP 37
25904: PUSH
25905: LD_EXP 76
25909: AND
25910: IFFALSE 25926
25912: GO 25914
25914: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25915: LD_STRING displayStucuk();
25917: PPUSH
25918: CALL_OW 559
// ResetFog ;
25922: CALL_OW 335
// end ;
25926: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25927: LD_EXP 37
25931: PUSH
25932: LD_EXP 69
25936: AND
25937: IFFALSE 26078
25939: GO 25941
25941: DISABLE
25942: LD_INT 0
25944: PPUSH
25945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25946: LD_ADDR_VAR 0 2
25950: PUSH
25951: LD_INT 22
25953: PUSH
25954: LD_OWVAR 2
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 21
25965: PUSH
25966: LD_INT 1
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PPUSH
25977: CALL_OW 69
25981: ST_TO_ADDR
// if not tmp then
25982: LD_VAR 0 2
25986: NOT
25987: IFFALSE 25991
// exit ;
25989: GO 26078
// un := tmp [ rand ( 1 , tmp ) ] ;
25991: LD_ADDR_VAR 0 1
25995: PUSH
25996: LD_VAR 0 2
26000: PUSH
26001: LD_INT 1
26003: PPUSH
26004: LD_VAR 0 2
26008: PPUSH
26009: CALL_OW 12
26013: ARRAY
26014: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26015: LD_VAR 0 1
26019: PPUSH
26020: LD_INT 0
26022: PPUSH
26023: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26027: LD_VAR 0 1
26031: PPUSH
26032: LD_OWVAR 3
26036: PUSH
26037: LD_VAR 0 1
26041: DIFF
26042: PPUSH
26043: LD_VAR 0 1
26047: PPUSH
26048: CALL_OW 74
26052: PPUSH
26053: CALL_OW 115
// wait ( 0 0$20 ) ;
26057: LD_INT 700
26059: PPUSH
26060: CALL_OW 67
// SetSide ( un , your_side ) ;
26064: LD_VAR 0 1
26068: PPUSH
26069: LD_OWVAR 2
26073: PPUSH
26074: CALL_OW 235
// end ;
26078: PPOPN 2
26080: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26081: LD_EXP 37
26085: PUSH
26086: LD_EXP 70
26090: AND
26091: IFFALSE 26197
26093: GO 26095
26095: DISABLE
26096: LD_INT 0
26098: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26099: LD_ADDR_VAR 0 1
26103: PUSH
26104: LD_INT 22
26106: PUSH
26107: LD_OWVAR 2
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 2
26118: PUSH
26119: LD_INT 30
26121: PUSH
26122: LD_INT 0
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 30
26131: PUSH
26132: LD_INT 1
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: LIST
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PPUSH
26148: CALL_OW 69
26152: ST_TO_ADDR
// if not depot then
26153: LD_VAR 0 1
26157: NOT
26158: IFFALSE 26162
// exit ;
26160: GO 26197
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26162: LD_VAR 0 1
26166: PUSH
26167: LD_INT 1
26169: ARRAY
26170: PPUSH
26171: CALL_OW 250
26175: PPUSH
26176: LD_VAR 0 1
26180: PUSH
26181: LD_INT 1
26183: ARRAY
26184: PPUSH
26185: CALL_OW 251
26189: PPUSH
26190: LD_INT 70
26192: PPUSH
26193: CALL_OW 495
// end ;
26197: PPOPN 1
26199: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26200: LD_EXP 37
26204: PUSH
26205: LD_EXP 71
26209: AND
26210: IFFALSE 26421
26212: GO 26214
26214: DISABLE
26215: LD_INT 0
26217: PPUSH
26218: PPUSH
26219: PPUSH
26220: PPUSH
26221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26222: LD_ADDR_VAR 0 5
26226: PUSH
26227: LD_INT 22
26229: PUSH
26230: LD_OWVAR 2
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 21
26241: PUSH
26242: LD_INT 1
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PPUSH
26253: CALL_OW 69
26257: ST_TO_ADDR
// if not tmp then
26258: LD_VAR 0 5
26262: NOT
26263: IFFALSE 26267
// exit ;
26265: GO 26421
// for i in tmp do
26267: LD_ADDR_VAR 0 1
26271: PUSH
26272: LD_VAR 0 5
26276: PUSH
26277: FOR_IN
26278: IFFALSE 26419
// begin d := rand ( 0 , 5 ) ;
26280: LD_ADDR_VAR 0 4
26284: PUSH
26285: LD_INT 0
26287: PPUSH
26288: LD_INT 5
26290: PPUSH
26291: CALL_OW 12
26295: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26296: LD_ADDR_VAR 0 2
26300: PUSH
26301: LD_VAR 0 1
26305: PPUSH
26306: CALL_OW 250
26310: PPUSH
26311: LD_VAR 0 4
26315: PPUSH
26316: LD_INT 3
26318: PPUSH
26319: LD_INT 12
26321: PPUSH
26322: CALL_OW 12
26326: PPUSH
26327: CALL_OW 272
26331: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26332: LD_ADDR_VAR 0 3
26336: PUSH
26337: LD_VAR 0 1
26341: PPUSH
26342: CALL_OW 251
26346: PPUSH
26347: LD_VAR 0 4
26351: PPUSH
26352: LD_INT 3
26354: PPUSH
26355: LD_INT 12
26357: PPUSH
26358: CALL_OW 12
26362: PPUSH
26363: CALL_OW 273
26367: ST_TO_ADDR
// if ValidHex ( x , y ) then
26368: LD_VAR 0 2
26372: PPUSH
26373: LD_VAR 0 3
26377: PPUSH
26378: CALL_OW 488
26382: IFFALSE 26417
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26384: LD_VAR 0 1
26388: PPUSH
26389: LD_VAR 0 2
26393: PPUSH
26394: LD_VAR 0 3
26398: PPUSH
26399: LD_INT 3
26401: PPUSH
26402: LD_INT 6
26404: PPUSH
26405: CALL_OW 12
26409: PPUSH
26410: LD_INT 1
26412: PPUSH
26413: CALL_OW 483
// end ;
26417: GO 26277
26419: POP
26420: POP
// end ;
26421: PPOPN 5
26423: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26424: LD_EXP 37
26428: PUSH
26429: LD_EXP 72
26433: AND
26434: IFFALSE 26528
26436: GO 26438
26438: DISABLE
26439: LD_INT 0
26441: PPUSH
26442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26443: LD_ADDR_VAR 0 2
26447: PUSH
26448: LD_INT 22
26450: PUSH
26451: LD_OWVAR 2
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 32
26462: PUSH
26463: LD_INT 1
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 21
26472: PUSH
26473: LD_INT 2
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: LIST
26484: PPUSH
26485: CALL_OW 69
26489: ST_TO_ADDR
// if not tmp then
26490: LD_VAR 0 2
26494: NOT
26495: IFFALSE 26499
// exit ;
26497: GO 26528
// for i in tmp do
26499: LD_ADDR_VAR 0 1
26503: PUSH
26504: LD_VAR 0 2
26508: PUSH
26509: FOR_IN
26510: IFFALSE 26526
// SetFuel ( i , 0 ) ;
26512: LD_VAR 0 1
26516: PPUSH
26517: LD_INT 0
26519: PPUSH
26520: CALL_OW 240
26524: GO 26509
26526: POP
26527: POP
// end ;
26528: PPOPN 2
26530: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26531: LD_EXP 37
26535: PUSH
26536: LD_EXP 73
26540: AND
26541: IFFALSE 26607
26543: GO 26545
26545: DISABLE
26546: LD_INT 0
26548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26549: LD_ADDR_VAR 0 1
26553: PUSH
26554: LD_INT 22
26556: PUSH
26557: LD_OWVAR 2
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 30
26568: PUSH
26569: LD_INT 29
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PPUSH
26580: CALL_OW 69
26584: ST_TO_ADDR
// if not tmp then
26585: LD_VAR 0 1
26589: NOT
26590: IFFALSE 26594
// exit ;
26592: GO 26607
// DestroyUnit ( tmp [ 1 ] ) ;
26594: LD_VAR 0 1
26598: PUSH
26599: LD_INT 1
26601: ARRAY
26602: PPUSH
26603: CALL_OW 65
// end ;
26607: PPOPN 1
26609: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26610: LD_EXP 37
26614: PUSH
26615: LD_EXP 75
26619: AND
26620: IFFALSE 26749
26622: GO 26624
26624: DISABLE
26625: LD_INT 0
26627: PPUSH
// begin uc_side := 0 ;
26628: LD_ADDR_OWVAR 20
26632: PUSH
26633: LD_INT 0
26635: ST_TO_ADDR
// uc_nation := nation_arabian ;
26636: LD_ADDR_OWVAR 21
26640: PUSH
26641: LD_INT 2
26643: ST_TO_ADDR
// hc_gallery :=  ;
26644: LD_ADDR_OWVAR 33
26648: PUSH
26649: LD_STRING 
26651: ST_TO_ADDR
// hc_name :=  ;
26652: LD_ADDR_OWVAR 26
26656: PUSH
26657: LD_STRING 
26659: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26660: LD_INT 1
26662: PPUSH
26663: LD_INT 11
26665: PPUSH
26666: LD_INT 10
26668: PPUSH
26669: CALL_OW 380
// un := CreateHuman ;
26673: LD_ADDR_VAR 0 1
26677: PUSH
26678: CALL_OW 44
26682: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26683: LD_VAR 0 1
26687: PPUSH
26688: LD_INT 1
26690: PPUSH
26691: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26695: LD_INT 35
26697: PPUSH
26698: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26702: LD_VAR 0 1
26706: PPUSH
26707: LD_INT 22
26709: PUSH
26710: LD_OWVAR 2
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PPUSH
26719: CALL_OW 69
26723: PPUSH
26724: LD_VAR 0 1
26728: PPUSH
26729: CALL_OW 74
26733: PPUSH
26734: CALL_OW 115
// until IsDead ( un ) ;
26738: LD_VAR 0 1
26742: PPUSH
26743: CALL_OW 301
26747: IFFALSE 26695
// end ;
26749: PPOPN 1
26751: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26752: LD_EXP 37
26756: PUSH
26757: LD_EXP 77
26761: AND
26762: IFFALSE 26774
26764: GO 26766
26766: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26767: LD_STRING earthquake(getX(game), 0, 32)
26769: PPUSH
26770: CALL_OW 559
26774: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26775: LD_EXP 37
26779: PUSH
26780: LD_EXP 78
26784: AND
26785: IFFALSE 26876
26787: GO 26789
26789: DISABLE
26790: LD_INT 0
26792: PPUSH
// begin enable ;
26793: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26794: LD_ADDR_VAR 0 1
26798: PUSH
26799: LD_INT 22
26801: PUSH
26802: LD_OWVAR 2
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 21
26813: PUSH
26814: LD_INT 2
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 33
26823: PUSH
26824: LD_INT 3
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: LIST
26835: PPUSH
26836: CALL_OW 69
26840: ST_TO_ADDR
// if not tmp then
26841: LD_VAR 0 1
26845: NOT
26846: IFFALSE 26850
// exit ;
26848: GO 26876
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26850: LD_VAR 0 1
26854: PUSH
26855: LD_INT 1
26857: PPUSH
26858: LD_VAR 0 1
26862: PPUSH
26863: CALL_OW 12
26867: ARRAY
26868: PPUSH
26869: LD_INT 1
26871: PPUSH
26872: CALL_OW 234
// end ;
26876: PPOPN 1
26878: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26879: LD_EXP 37
26883: PUSH
26884: LD_EXP 79
26888: AND
26889: IFFALSE 27030
26891: GO 26893
26893: DISABLE
26894: LD_INT 0
26896: PPUSH
26897: PPUSH
26898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26899: LD_ADDR_VAR 0 3
26903: PUSH
26904: LD_INT 22
26906: PUSH
26907: LD_OWVAR 2
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 25
26918: PUSH
26919: LD_INT 1
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PPUSH
26930: CALL_OW 69
26934: ST_TO_ADDR
// if not tmp then
26935: LD_VAR 0 3
26939: NOT
26940: IFFALSE 26944
// exit ;
26942: GO 27030
// un := tmp [ rand ( 1 , tmp ) ] ;
26944: LD_ADDR_VAR 0 2
26948: PUSH
26949: LD_VAR 0 3
26953: PUSH
26954: LD_INT 1
26956: PPUSH
26957: LD_VAR 0 3
26961: PPUSH
26962: CALL_OW 12
26966: ARRAY
26967: ST_TO_ADDR
// if Crawls ( un ) then
26968: LD_VAR 0 2
26972: PPUSH
26973: CALL_OW 318
26977: IFFALSE 26988
// ComWalk ( un ) ;
26979: LD_VAR 0 2
26983: PPUSH
26984: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26988: LD_VAR 0 2
26992: PPUSH
26993: LD_INT 9
26995: PPUSH
26996: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27000: LD_INT 28
27002: PPUSH
27003: LD_OWVAR 2
27007: PPUSH
27008: LD_INT 2
27010: PPUSH
27011: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27015: LD_INT 29
27017: PPUSH
27018: LD_OWVAR 2
27022: PPUSH
27023: LD_INT 2
27025: PPUSH
27026: CALL_OW 322
// end ;
27030: PPOPN 3
27032: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27033: LD_EXP 37
27037: PUSH
27038: LD_EXP 80
27042: AND
27043: IFFALSE 27154
27045: GO 27047
27047: DISABLE
27048: LD_INT 0
27050: PPUSH
27051: PPUSH
27052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27053: LD_ADDR_VAR 0 3
27057: PUSH
27058: LD_INT 22
27060: PUSH
27061: LD_OWVAR 2
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 25
27072: PUSH
27073: LD_INT 1
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PPUSH
27084: CALL_OW 69
27088: ST_TO_ADDR
// if not tmp then
27089: LD_VAR 0 3
27093: NOT
27094: IFFALSE 27098
// exit ;
27096: GO 27154
// un := tmp [ rand ( 1 , tmp ) ] ;
27098: LD_ADDR_VAR 0 2
27102: PUSH
27103: LD_VAR 0 3
27107: PUSH
27108: LD_INT 1
27110: PPUSH
27111: LD_VAR 0 3
27115: PPUSH
27116: CALL_OW 12
27120: ARRAY
27121: ST_TO_ADDR
// if Crawls ( un ) then
27122: LD_VAR 0 2
27126: PPUSH
27127: CALL_OW 318
27131: IFFALSE 27142
// ComWalk ( un ) ;
27133: LD_VAR 0 2
27137: PPUSH
27138: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27142: LD_VAR 0 2
27146: PPUSH
27147: LD_INT 8
27149: PPUSH
27150: CALL_OW 336
// end ;
27154: PPOPN 3
27156: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27157: LD_EXP 37
27161: PUSH
27162: LD_EXP 81
27166: AND
27167: IFFALSE 27311
27169: GO 27171
27171: DISABLE
27172: LD_INT 0
27174: PPUSH
27175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27176: LD_ADDR_VAR 0 2
27180: PUSH
27181: LD_INT 22
27183: PUSH
27184: LD_OWVAR 2
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 21
27195: PUSH
27196: LD_INT 2
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 2
27205: PUSH
27206: LD_INT 34
27208: PUSH
27209: LD_INT 12
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 34
27218: PUSH
27219: LD_INT 51
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 34
27228: PUSH
27229: LD_INT 32
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: LIST
27246: PPUSH
27247: CALL_OW 69
27251: ST_TO_ADDR
// if not tmp then
27252: LD_VAR 0 2
27256: NOT
27257: IFFALSE 27261
// exit ;
27259: GO 27311
// for i in tmp do
27261: LD_ADDR_VAR 0 1
27265: PUSH
27266: LD_VAR 0 2
27270: PUSH
27271: FOR_IN
27272: IFFALSE 27309
// if GetCargo ( i , mat_artifact ) = 0 then
27274: LD_VAR 0 1
27278: PPUSH
27279: LD_INT 4
27281: PPUSH
27282: CALL_OW 289
27286: PUSH
27287: LD_INT 0
27289: EQUAL
27290: IFFALSE 27307
// SetCargo ( i , mat_siberit , 100 ) ;
27292: LD_VAR 0 1
27296: PPUSH
27297: LD_INT 3
27299: PPUSH
27300: LD_INT 100
27302: PPUSH
27303: CALL_OW 290
27307: GO 27271
27309: POP
27310: POP
// end ;
27311: PPOPN 2
27313: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27314: LD_EXP 37
27318: PUSH
27319: LD_EXP 82
27323: AND
27324: IFFALSE 27507
27326: GO 27328
27328: DISABLE
27329: LD_INT 0
27331: PPUSH
27332: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27333: LD_ADDR_VAR 0 2
27337: PUSH
27338: LD_INT 22
27340: PUSH
27341: LD_OWVAR 2
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PPUSH
27350: CALL_OW 69
27354: ST_TO_ADDR
// if not tmp then
27355: LD_VAR 0 2
27359: NOT
27360: IFFALSE 27364
// exit ;
27362: GO 27507
// for i := 1 to 2 do
27364: LD_ADDR_VAR 0 1
27368: PUSH
27369: DOUBLE
27370: LD_INT 1
27372: DEC
27373: ST_TO_ADDR
27374: LD_INT 2
27376: PUSH
27377: FOR_TO
27378: IFFALSE 27505
// begin uc_side := your_side ;
27380: LD_ADDR_OWVAR 20
27384: PUSH
27385: LD_OWVAR 2
27389: ST_TO_ADDR
// uc_nation := nation_american ;
27390: LD_ADDR_OWVAR 21
27394: PUSH
27395: LD_INT 1
27397: ST_TO_ADDR
// vc_chassis := us_morphling ;
27398: LD_ADDR_OWVAR 37
27402: PUSH
27403: LD_INT 5
27405: ST_TO_ADDR
// vc_engine := engine_siberite ;
27406: LD_ADDR_OWVAR 39
27410: PUSH
27411: LD_INT 3
27413: ST_TO_ADDR
// vc_control := control_computer ;
27414: LD_ADDR_OWVAR 38
27418: PUSH
27419: LD_INT 3
27421: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27422: LD_ADDR_OWVAR 40
27426: PUSH
27427: LD_INT 10
27429: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27430: LD_VAR 0 2
27434: PUSH
27435: LD_INT 1
27437: ARRAY
27438: PPUSH
27439: CALL_OW 310
27443: NOT
27444: IFFALSE 27491
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27446: CALL_OW 45
27450: PPUSH
27451: LD_VAR 0 2
27455: PUSH
27456: LD_INT 1
27458: ARRAY
27459: PPUSH
27460: CALL_OW 250
27464: PPUSH
27465: LD_VAR 0 2
27469: PUSH
27470: LD_INT 1
27472: ARRAY
27473: PPUSH
27474: CALL_OW 251
27478: PPUSH
27479: LD_INT 12
27481: PPUSH
27482: LD_INT 1
27484: PPUSH
27485: CALL_OW 50
27489: GO 27503
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27491: CALL_OW 45
27495: PPUSH
27496: LD_INT 1
27498: PPUSH
27499: CALL_OW 51
// end ;
27503: GO 27377
27505: POP
27506: POP
// end ;
27507: PPOPN 2
27509: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27510: LD_EXP 37
27514: PUSH
27515: LD_EXP 83
27519: AND
27520: IFFALSE 27742
27522: GO 27524
27524: DISABLE
27525: LD_INT 0
27527: PPUSH
27528: PPUSH
27529: PPUSH
27530: PPUSH
27531: PPUSH
27532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27533: LD_ADDR_VAR 0 6
27537: PUSH
27538: LD_INT 22
27540: PUSH
27541: LD_OWVAR 2
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 21
27552: PUSH
27553: LD_INT 1
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 3
27562: PUSH
27563: LD_INT 23
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: LIST
27581: PPUSH
27582: CALL_OW 69
27586: ST_TO_ADDR
// if not tmp then
27587: LD_VAR 0 6
27591: NOT
27592: IFFALSE 27596
// exit ;
27594: GO 27742
// s1 := rand ( 1 , 4 ) ;
27596: LD_ADDR_VAR 0 2
27600: PUSH
27601: LD_INT 1
27603: PPUSH
27604: LD_INT 4
27606: PPUSH
27607: CALL_OW 12
27611: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27612: LD_ADDR_VAR 0 4
27616: PUSH
27617: LD_VAR 0 6
27621: PUSH
27622: LD_INT 1
27624: ARRAY
27625: PPUSH
27626: LD_VAR 0 2
27630: PPUSH
27631: CALL_OW 259
27635: ST_TO_ADDR
// if s1 = 1 then
27636: LD_VAR 0 2
27640: PUSH
27641: LD_INT 1
27643: EQUAL
27644: IFFALSE 27664
// s2 := rand ( 2 , 4 ) else
27646: LD_ADDR_VAR 0 3
27650: PUSH
27651: LD_INT 2
27653: PPUSH
27654: LD_INT 4
27656: PPUSH
27657: CALL_OW 12
27661: ST_TO_ADDR
27662: GO 27672
// s2 := 1 ;
27664: LD_ADDR_VAR 0 3
27668: PUSH
27669: LD_INT 1
27671: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27672: LD_ADDR_VAR 0 5
27676: PUSH
27677: LD_VAR 0 6
27681: PUSH
27682: LD_INT 1
27684: ARRAY
27685: PPUSH
27686: LD_VAR 0 3
27690: PPUSH
27691: CALL_OW 259
27695: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27696: LD_VAR 0 6
27700: PUSH
27701: LD_INT 1
27703: ARRAY
27704: PPUSH
27705: LD_VAR 0 2
27709: PPUSH
27710: LD_VAR 0 5
27714: PPUSH
27715: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27719: LD_VAR 0 6
27723: PUSH
27724: LD_INT 1
27726: ARRAY
27727: PPUSH
27728: LD_VAR 0 3
27732: PPUSH
27733: LD_VAR 0 4
27737: PPUSH
27738: CALL_OW 237
// end ;
27742: PPOPN 6
27744: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27745: LD_EXP 37
27749: PUSH
27750: LD_EXP 84
27754: AND
27755: IFFALSE 27834
27757: GO 27759
27759: DISABLE
27760: LD_INT 0
27762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27763: LD_ADDR_VAR 0 1
27767: PUSH
27768: LD_INT 22
27770: PUSH
27771: LD_OWVAR 2
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 30
27782: PUSH
27783: LD_INT 3
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PPUSH
27794: CALL_OW 69
27798: ST_TO_ADDR
// if not tmp then
27799: LD_VAR 0 1
27803: NOT
27804: IFFALSE 27808
// exit ;
27806: GO 27834
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27808: LD_VAR 0 1
27812: PUSH
27813: LD_INT 1
27815: PPUSH
27816: LD_VAR 0 1
27820: PPUSH
27821: CALL_OW 12
27825: ARRAY
27826: PPUSH
27827: LD_INT 1
27829: PPUSH
27830: CALL_OW 234
// end ;
27834: PPOPN 1
27836: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27837: LD_EXP 37
27841: PUSH
27842: LD_EXP 85
27846: AND
27847: IFFALSE 27959
27849: GO 27851
27851: DISABLE
27852: LD_INT 0
27854: PPUSH
27855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27856: LD_ADDR_VAR 0 2
27860: PUSH
27861: LD_INT 22
27863: PUSH
27864: LD_OWVAR 2
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 2
27875: PUSH
27876: LD_INT 30
27878: PUSH
27879: LD_INT 27
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 30
27888: PUSH
27889: LD_INT 26
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 30
27898: PUSH
27899: LD_INT 28
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PPUSH
27916: CALL_OW 69
27920: ST_TO_ADDR
// if not tmp then
27921: LD_VAR 0 2
27925: NOT
27926: IFFALSE 27930
// exit ;
27928: GO 27959
// for i in tmp do
27930: LD_ADDR_VAR 0 1
27934: PUSH
27935: LD_VAR 0 2
27939: PUSH
27940: FOR_IN
27941: IFFALSE 27957
// SetLives ( i , 1 ) ;
27943: LD_VAR 0 1
27947: PPUSH
27948: LD_INT 1
27950: PPUSH
27951: CALL_OW 234
27955: GO 27940
27957: POP
27958: POP
// end ;
27959: PPOPN 2
27961: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27962: LD_EXP 37
27966: PUSH
27967: LD_EXP 86
27971: AND
27972: IFFALSE 28259
27974: GO 27976
27976: DISABLE
27977: LD_INT 0
27979: PPUSH
27980: PPUSH
27981: PPUSH
// begin i := rand ( 1 , 7 ) ;
27982: LD_ADDR_VAR 0 1
27986: PUSH
27987: LD_INT 1
27989: PPUSH
27990: LD_INT 7
27992: PPUSH
27993: CALL_OW 12
27997: ST_TO_ADDR
// case i of 1 :
27998: LD_VAR 0 1
28002: PUSH
28003: LD_INT 1
28005: DOUBLE
28006: EQUAL
28007: IFTRUE 28011
28009: GO 28021
28011: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28012: LD_STRING earthquake(getX(game), 0, 32)
28014: PPUSH
28015: CALL_OW 559
28019: GO 28259
28021: LD_INT 2
28023: DOUBLE
28024: EQUAL
28025: IFTRUE 28029
28027: GO 28043
28029: POP
// begin ToLua ( displayStucuk(); ) ;
28030: LD_STRING displayStucuk();
28032: PPUSH
28033: CALL_OW 559
// ResetFog ;
28037: CALL_OW 335
// end ; 3 :
28041: GO 28259
28043: LD_INT 3
28045: DOUBLE
28046: EQUAL
28047: IFTRUE 28051
28049: GO 28155
28051: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28052: LD_ADDR_VAR 0 2
28056: PUSH
28057: LD_INT 22
28059: PUSH
28060: LD_OWVAR 2
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 25
28071: PUSH
28072: LD_INT 1
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PPUSH
28083: CALL_OW 69
28087: ST_TO_ADDR
// if not tmp then
28088: LD_VAR 0 2
28092: NOT
28093: IFFALSE 28097
// exit ;
28095: GO 28259
// un := tmp [ rand ( 1 , tmp ) ] ;
28097: LD_ADDR_VAR 0 3
28101: PUSH
28102: LD_VAR 0 2
28106: PUSH
28107: LD_INT 1
28109: PPUSH
28110: LD_VAR 0 2
28114: PPUSH
28115: CALL_OW 12
28119: ARRAY
28120: ST_TO_ADDR
// if Crawls ( un ) then
28121: LD_VAR 0 3
28125: PPUSH
28126: CALL_OW 318
28130: IFFALSE 28141
// ComWalk ( un ) ;
28132: LD_VAR 0 3
28136: PPUSH
28137: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28141: LD_VAR 0 3
28145: PPUSH
28146: LD_INT 8
28148: PPUSH
28149: CALL_OW 336
// end ; 4 :
28153: GO 28259
28155: LD_INT 4
28157: DOUBLE
28158: EQUAL
28159: IFTRUE 28163
28161: GO 28237
28163: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28164: LD_ADDR_VAR 0 2
28168: PUSH
28169: LD_INT 22
28171: PUSH
28172: LD_OWVAR 2
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 30
28183: PUSH
28184: LD_INT 29
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PPUSH
28195: CALL_OW 69
28199: ST_TO_ADDR
// if not tmp then
28200: LD_VAR 0 2
28204: NOT
28205: IFFALSE 28209
// exit ;
28207: GO 28259
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28209: LD_VAR 0 2
28213: PUSH
28214: LD_INT 1
28216: ARRAY
28217: PPUSH
28218: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28222: LD_VAR 0 2
28226: PUSH
28227: LD_INT 1
28229: ARRAY
28230: PPUSH
28231: CALL_OW 65
// end ; 5 .. 7 :
28235: GO 28259
28237: LD_INT 5
28239: DOUBLE
28240: GREATEREQUAL
28241: IFFALSE 28249
28243: LD_INT 7
28245: DOUBLE
28246: LESSEQUAL
28247: IFTRUE 28251
28249: GO 28258
28251: POP
// StreamSibBomb ; end ;
28252: CALL 24496 0 0
28256: GO 28259
28258: POP
// end ;
28259: PPOPN 3
28261: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28262: LD_EXP 37
28266: PUSH
28267: LD_EXP 87
28271: AND
28272: IFFALSE 28428
28274: GO 28276
28276: DISABLE
28277: LD_INT 0
28279: PPUSH
28280: PPUSH
28281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28282: LD_ADDR_VAR 0 2
28286: PUSH
28287: LD_INT 81
28289: PUSH
28290: LD_OWVAR 2
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 2
28301: PUSH
28302: LD_INT 21
28304: PUSH
28305: LD_INT 1
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 21
28314: PUSH
28315: LD_INT 2
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: LIST
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PPUSH
28331: CALL_OW 69
28335: ST_TO_ADDR
// if not tmp then
28336: LD_VAR 0 2
28340: NOT
28341: IFFALSE 28345
// exit ;
28343: GO 28428
// p := 0 ;
28345: LD_ADDR_VAR 0 3
28349: PUSH
28350: LD_INT 0
28352: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28353: LD_INT 35
28355: PPUSH
28356: CALL_OW 67
// p := p + 1 ;
28360: LD_ADDR_VAR 0 3
28364: PUSH
28365: LD_VAR 0 3
28369: PUSH
28370: LD_INT 1
28372: PLUS
28373: ST_TO_ADDR
// for i in tmp do
28374: LD_ADDR_VAR 0 1
28378: PUSH
28379: LD_VAR 0 2
28383: PUSH
28384: FOR_IN
28385: IFFALSE 28416
// if GetLives ( i ) < 1000 then
28387: LD_VAR 0 1
28391: PPUSH
28392: CALL_OW 256
28396: PUSH
28397: LD_INT 1000
28399: LESS
28400: IFFALSE 28414
// SetLives ( i , 1000 ) ;
28402: LD_VAR 0 1
28406: PPUSH
28407: LD_INT 1000
28409: PPUSH
28410: CALL_OW 234
28414: GO 28384
28416: POP
28417: POP
// until p > 20 ;
28418: LD_VAR 0 3
28422: PUSH
28423: LD_INT 20
28425: GREATER
28426: IFFALSE 28353
// end ;
28428: PPOPN 3
28430: END
// every 0 0$1 trigger StreamModeActive and sTime do
28431: LD_EXP 37
28435: PUSH
28436: LD_EXP 88
28440: AND
28441: IFFALSE 28476
28443: GO 28445
28445: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28446: LD_INT 28
28448: PPUSH
28449: LD_OWVAR 2
28453: PPUSH
28454: LD_INT 2
28456: PPUSH
28457: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28461: LD_INT 30
28463: PPUSH
28464: LD_OWVAR 2
28468: PPUSH
28469: LD_INT 2
28471: PPUSH
28472: CALL_OW 322
// end ;
28476: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28477: LD_EXP 37
28481: PUSH
28482: LD_EXP 89
28486: AND
28487: IFFALSE 28608
28489: GO 28491
28491: DISABLE
28492: LD_INT 0
28494: PPUSH
28495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28496: LD_ADDR_VAR 0 2
28500: PUSH
28501: LD_INT 22
28503: PUSH
28504: LD_OWVAR 2
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 21
28515: PUSH
28516: LD_INT 1
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 3
28525: PUSH
28526: LD_INT 23
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: LIST
28544: PPUSH
28545: CALL_OW 69
28549: ST_TO_ADDR
// if not tmp then
28550: LD_VAR 0 2
28554: NOT
28555: IFFALSE 28559
// exit ;
28557: GO 28608
// for i in tmp do
28559: LD_ADDR_VAR 0 1
28563: PUSH
28564: LD_VAR 0 2
28568: PUSH
28569: FOR_IN
28570: IFFALSE 28606
// begin if Crawls ( i ) then
28572: LD_VAR 0 1
28576: PPUSH
28577: CALL_OW 318
28581: IFFALSE 28592
// ComWalk ( i ) ;
28583: LD_VAR 0 1
28587: PPUSH
28588: CALL_OW 138
// SetClass ( i , 2 ) ;
28592: LD_VAR 0 1
28596: PPUSH
28597: LD_INT 2
28599: PPUSH
28600: CALL_OW 336
// end ;
28604: GO 28569
28606: POP
28607: POP
// end ;
28608: PPOPN 2
28610: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28611: LD_EXP 37
28615: PUSH
28616: LD_EXP 90
28620: AND
28621: IFFALSE 28909
28623: GO 28625
28625: DISABLE
28626: LD_INT 0
28628: PPUSH
28629: PPUSH
28630: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28631: LD_OWVAR 2
28635: PPUSH
28636: LD_INT 9
28638: PPUSH
28639: LD_INT 1
28641: PPUSH
28642: LD_INT 1
28644: PPUSH
28645: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28649: LD_INT 9
28651: PPUSH
28652: LD_OWVAR 2
28656: PPUSH
28657: CALL_OW 343
// uc_side := 9 ;
28661: LD_ADDR_OWVAR 20
28665: PUSH
28666: LD_INT 9
28668: ST_TO_ADDR
// uc_nation := 2 ;
28669: LD_ADDR_OWVAR 21
28673: PUSH
28674: LD_INT 2
28676: ST_TO_ADDR
// hc_name := Dark Warrior ;
28677: LD_ADDR_OWVAR 26
28681: PUSH
28682: LD_STRING Dark Warrior
28684: ST_TO_ADDR
// hc_gallery :=  ;
28685: LD_ADDR_OWVAR 33
28689: PUSH
28690: LD_STRING 
28692: ST_TO_ADDR
// hc_noskilllimit := true ;
28693: LD_ADDR_OWVAR 76
28697: PUSH
28698: LD_INT 1
28700: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28701: LD_ADDR_OWVAR 31
28705: PUSH
28706: LD_INT 30
28708: PUSH
28709: LD_INT 30
28711: PUSH
28712: LD_INT 30
28714: PUSH
28715: LD_INT 30
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: ST_TO_ADDR
// un := CreateHuman ;
28724: LD_ADDR_VAR 0 3
28728: PUSH
28729: CALL_OW 44
28733: ST_TO_ADDR
// hc_noskilllimit := false ;
28734: LD_ADDR_OWVAR 76
28738: PUSH
28739: LD_INT 0
28741: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28742: LD_VAR 0 3
28746: PPUSH
28747: LD_INT 1
28749: PPUSH
28750: CALL_OW 51
// ToLua ( playRanger() ) ;
28754: LD_STRING playRanger()
28756: PPUSH
28757: CALL_OW 559
// p := 0 ;
28761: LD_ADDR_VAR 0 2
28765: PUSH
28766: LD_INT 0
28768: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28769: LD_INT 35
28771: PPUSH
28772: CALL_OW 67
// p := p + 1 ;
28776: LD_ADDR_VAR 0 2
28780: PUSH
28781: LD_VAR 0 2
28785: PUSH
28786: LD_INT 1
28788: PLUS
28789: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28790: LD_VAR 0 3
28794: PPUSH
28795: CALL_OW 256
28799: PUSH
28800: LD_INT 1000
28802: LESS
28803: IFFALSE 28817
// SetLives ( un , 1000 ) ;
28805: LD_VAR 0 3
28809: PPUSH
28810: LD_INT 1000
28812: PPUSH
28813: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28817: LD_VAR 0 3
28821: PPUSH
28822: LD_INT 81
28824: PUSH
28825: LD_OWVAR 2
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 91
28836: PUSH
28837: LD_VAR 0 3
28841: PUSH
28842: LD_INT 30
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: LIST
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PPUSH
28854: CALL_OW 69
28858: PPUSH
28859: LD_VAR 0 3
28863: PPUSH
28864: CALL_OW 74
28868: PPUSH
28869: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28873: LD_VAR 0 2
28877: PUSH
28878: LD_INT 80
28880: GREATER
28881: PUSH
28882: LD_VAR 0 3
28886: PPUSH
28887: CALL_OW 301
28891: OR
28892: IFFALSE 28769
// if un then
28894: LD_VAR 0 3
28898: IFFALSE 28909
// RemoveUnit ( un ) ;
28900: LD_VAR 0 3
28904: PPUSH
28905: CALL_OW 64
// end ;
28909: PPOPN 3
28911: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28912: LD_EXP 91
28916: IFFALSE 29032
28918: GO 28920
28920: DISABLE
28921: LD_INT 0
28923: PPUSH
28924: PPUSH
28925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28926: LD_ADDR_VAR 0 2
28930: PUSH
28931: LD_INT 81
28933: PUSH
28934: LD_OWVAR 2
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 21
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PPUSH
28957: CALL_OW 69
28961: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28962: LD_STRING playComputer()
28964: PPUSH
28965: CALL_OW 559
// if not tmp then
28969: LD_VAR 0 2
28973: NOT
28974: IFFALSE 28978
// exit ;
28976: GO 29032
// for i in tmp do
28978: LD_ADDR_VAR 0 1
28982: PUSH
28983: LD_VAR 0 2
28987: PUSH
28988: FOR_IN
28989: IFFALSE 29030
// for j := 1 to 4 do
28991: LD_ADDR_VAR 0 3
28995: PUSH
28996: DOUBLE
28997: LD_INT 1
28999: DEC
29000: ST_TO_ADDR
29001: LD_INT 4
29003: PUSH
29004: FOR_TO
29005: IFFALSE 29026
// SetSkill ( i , j , 10 ) ;
29007: LD_VAR 0 1
29011: PPUSH
29012: LD_VAR 0 3
29016: PPUSH
29017: LD_INT 10
29019: PPUSH
29020: CALL_OW 237
29024: GO 29004
29026: POP
29027: POP
29028: GO 28988
29030: POP
29031: POP
// end ;
29032: PPOPN 3
29034: END
// every 0 0$1 trigger s30 do var i , tmp ;
29035: LD_EXP 92
29039: IFFALSE 29108
29041: GO 29043
29043: DISABLE
29044: LD_INT 0
29046: PPUSH
29047: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29048: LD_ADDR_VAR 0 2
29052: PUSH
29053: LD_INT 22
29055: PUSH
29056: LD_OWVAR 2
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PPUSH
29065: CALL_OW 69
29069: ST_TO_ADDR
// if not tmp then
29070: LD_VAR 0 2
29074: NOT
29075: IFFALSE 29079
// exit ;
29077: GO 29108
// for i in tmp do
29079: LD_ADDR_VAR 0 1
29083: PUSH
29084: LD_VAR 0 2
29088: PUSH
29089: FOR_IN
29090: IFFALSE 29106
// SetLives ( i , 300 ) ;
29092: LD_VAR 0 1
29096: PPUSH
29097: LD_INT 300
29099: PPUSH
29100: CALL_OW 234
29104: GO 29089
29106: POP
29107: POP
// end ;
29108: PPOPN 2
29110: END
// every 0 0$1 trigger s60 do var i , tmp ;
29111: LD_EXP 93
29115: IFFALSE 29184
29117: GO 29119
29119: DISABLE
29120: LD_INT 0
29122: PPUSH
29123: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29124: LD_ADDR_VAR 0 2
29128: PUSH
29129: LD_INT 22
29131: PUSH
29132: LD_OWVAR 2
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PPUSH
29141: CALL_OW 69
29145: ST_TO_ADDR
// if not tmp then
29146: LD_VAR 0 2
29150: NOT
29151: IFFALSE 29155
// exit ;
29153: GO 29184
// for i in tmp do
29155: LD_ADDR_VAR 0 1
29159: PUSH
29160: LD_VAR 0 2
29164: PUSH
29165: FOR_IN
29166: IFFALSE 29182
// SetLives ( i , 600 ) ;
29168: LD_VAR 0 1
29172: PPUSH
29173: LD_INT 600
29175: PPUSH
29176: CALL_OW 234
29180: GO 29165
29182: POP
29183: POP
// end ;
29184: PPOPN 2
29186: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29187: LD_INT 0
29189: PPUSH
// case cmd of 301 :
29190: LD_VAR 0 1
29194: PUSH
29195: LD_INT 301
29197: DOUBLE
29198: EQUAL
29199: IFTRUE 29203
29201: GO 29235
29203: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29204: LD_VAR 0 6
29208: PPUSH
29209: LD_VAR 0 7
29213: PPUSH
29214: LD_VAR 0 8
29218: PPUSH
29219: LD_VAR 0 4
29223: PPUSH
29224: LD_VAR 0 5
29228: PPUSH
29229: CALL 30444 0 5
29233: GO 29356
29235: LD_INT 302
29237: DOUBLE
29238: EQUAL
29239: IFTRUE 29243
29241: GO 29280
29243: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29244: LD_VAR 0 6
29248: PPUSH
29249: LD_VAR 0 7
29253: PPUSH
29254: LD_VAR 0 8
29258: PPUSH
29259: LD_VAR 0 9
29263: PPUSH
29264: LD_VAR 0 4
29268: PPUSH
29269: LD_VAR 0 5
29273: PPUSH
29274: CALL 30535 0 6
29278: GO 29356
29280: LD_INT 303
29282: DOUBLE
29283: EQUAL
29284: IFTRUE 29288
29286: GO 29325
29288: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29289: LD_VAR 0 6
29293: PPUSH
29294: LD_VAR 0 7
29298: PPUSH
29299: LD_VAR 0 8
29303: PPUSH
29304: LD_VAR 0 9
29308: PPUSH
29309: LD_VAR 0 4
29313: PPUSH
29314: LD_VAR 0 5
29318: PPUSH
29319: CALL 29361 0 6
29323: GO 29356
29325: LD_INT 304
29327: DOUBLE
29328: EQUAL
29329: IFTRUE 29333
29331: GO 29355
29333: POP
// hHackTeleport ( unit , x , y ) ; end ;
29334: LD_VAR 0 2
29338: PPUSH
29339: LD_VAR 0 4
29343: PPUSH
29344: LD_VAR 0 5
29348: PPUSH
29349: CALL 31128 0 3
29353: GO 29356
29355: POP
// end ;
29356: LD_VAR 0 12
29360: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29361: LD_INT 0
29363: PPUSH
29364: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29365: LD_VAR 0 1
29369: PUSH
29370: LD_INT 1
29372: LESS
29373: PUSH
29374: LD_VAR 0 1
29378: PUSH
29379: LD_INT 3
29381: GREATER
29382: OR
29383: PUSH
29384: LD_VAR 0 5
29388: PPUSH
29389: LD_VAR 0 6
29393: PPUSH
29394: CALL_OW 428
29398: OR
29399: IFFALSE 29403
// exit ;
29401: GO 30131
// uc_side := your_side ;
29403: LD_ADDR_OWVAR 20
29407: PUSH
29408: LD_OWVAR 2
29412: ST_TO_ADDR
// uc_nation := nation ;
29413: LD_ADDR_OWVAR 21
29417: PUSH
29418: LD_VAR 0 1
29422: ST_TO_ADDR
// bc_level = 1 ;
29423: LD_ADDR_OWVAR 43
29427: PUSH
29428: LD_INT 1
29430: ST_TO_ADDR
// case btype of 1 :
29431: LD_VAR 0 2
29435: PUSH
29436: LD_INT 1
29438: DOUBLE
29439: EQUAL
29440: IFTRUE 29444
29442: GO 29455
29444: POP
// bc_type := b_depot ; 2 :
29445: LD_ADDR_OWVAR 42
29449: PUSH
29450: LD_INT 0
29452: ST_TO_ADDR
29453: GO 30075
29455: LD_INT 2
29457: DOUBLE
29458: EQUAL
29459: IFTRUE 29463
29461: GO 29474
29463: POP
// bc_type := b_warehouse ; 3 :
29464: LD_ADDR_OWVAR 42
29468: PUSH
29469: LD_INT 1
29471: ST_TO_ADDR
29472: GO 30075
29474: LD_INT 3
29476: DOUBLE
29477: EQUAL
29478: IFTRUE 29482
29480: GO 29493
29482: POP
// bc_type := b_lab ; 4 .. 9 :
29483: LD_ADDR_OWVAR 42
29487: PUSH
29488: LD_INT 6
29490: ST_TO_ADDR
29491: GO 30075
29493: LD_INT 4
29495: DOUBLE
29496: GREATEREQUAL
29497: IFFALSE 29505
29499: LD_INT 9
29501: DOUBLE
29502: LESSEQUAL
29503: IFTRUE 29507
29505: GO 29567
29507: POP
// begin bc_type := b_lab_half ;
29508: LD_ADDR_OWVAR 42
29512: PUSH
29513: LD_INT 7
29515: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29516: LD_ADDR_OWVAR 44
29520: PUSH
29521: LD_INT 10
29523: PUSH
29524: LD_INT 11
29526: PUSH
29527: LD_INT 12
29529: PUSH
29530: LD_INT 15
29532: PUSH
29533: LD_INT 14
29535: PUSH
29536: LD_INT 13
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: PUSH
29547: LD_VAR 0 2
29551: PUSH
29552: LD_INT 3
29554: MINUS
29555: ARRAY
29556: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
29557: LD_ADDR_OWVAR 45
29561: PUSH
29562: LD_INT 9
29564: ST_TO_ADDR
// end ; 10 .. 13 :
29565: GO 30075
29567: LD_INT 10
29569: DOUBLE
29570: GREATEREQUAL
29571: IFFALSE 29579
29573: LD_INT 13
29575: DOUBLE
29576: LESSEQUAL
29577: IFTRUE 29581
29579: GO 29658
29581: POP
// begin bc_type := b_lab_full ;
29582: LD_ADDR_OWVAR 42
29586: PUSH
29587: LD_INT 8
29589: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29590: LD_ADDR_OWVAR 44
29594: PUSH
29595: LD_INT 10
29597: PUSH
29598: LD_INT 12
29600: PUSH
29601: LD_INT 14
29603: PUSH
29604: LD_INT 13
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: PUSH
29613: LD_VAR 0 2
29617: PUSH
29618: LD_INT 9
29620: MINUS
29621: ARRAY
29622: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29623: LD_ADDR_OWVAR 45
29627: PUSH
29628: LD_INT 11
29630: PUSH
29631: LD_INT 15
29633: PUSH
29634: LD_INT 12
29636: PUSH
29637: LD_INT 15
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: PUSH
29646: LD_VAR 0 2
29650: PUSH
29651: LD_INT 9
29653: MINUS
29654: ARRAY
29655: ST_TO_ADDR
// end ; 14 :
29656: GO 30075
29658: LD_INT 14
29660: DOUBLE
29661: EQUAL
29662: IFTRUE 29666
29664: GO 29677
29666: POP
// bc_type := b_workshop ; 15 :
29667: LD_ADDR_OWVAR 42
29671: PUSH
29672: LD_INT 2
29674: ST_TO_ADDR
29675: GO 30075
29677: LD_INT 15
29679: DOUBLE
29680: EQUAL
29681: IFTRUE 29685
29683: GO 29696
29685: POP
// bc_type := b_factory ; 16 :
29686: LD_ADDR_OWVAR 42
29690: PUSH
29691: LD_INT 3
29693: ST_TO_ADDR
29694: GO 30075
29696: LD_INT 16
29698: DOUBLE
29699: EQUAL
29700: IFTRUE 29704
29702: GO 29715
29704: POP
// bc_type := b_ext_gun ; 17 :
29705: LD_ADDR_OWVAR 42
29709: PUSH
29710: LD_INT 17
29712: ST_TO_ADDR
29713: GO 30075
29715: LD_INT 17
29717: DOUBLE
29718: EQUAL
29719: IFTRUE 29723
29721: GO 29751
29723: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29724: LD_ADDR_OWVAR 42
29728: PUSH
29729: LD_INT 19
29731: PUSH
29732: LD_INT 23
29734: PUSH
29735: LD_INT 19
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: LIST
29742: PUSH
29743: LD_VAR 0 1
29747: ARRAY
29748: ST_TO_ADDR
29749: GO 30075
29751: LD_INT 18
29753: DOUBLE
29754: EQUAL
29755: IFTRUE 29759
29757: GO 29770
29759: POP
// bc_type := b_ext_radar ; 19 :
29760: LD_ADDR_OWVAR 42
29764: PUSH
29765: LD_INT 20
29767: ST_TO_ADDR
29768: GO 30075
29770: LD_INT 19
29772: DOUBLE
29773: EQUAL
29774: IFTRUE 29778
29776: GO 29789
29778: POP
// bc_type := b_ext_radio ; 20 :
29779: LD_ADDR_OWVAR 42
29783: PUSH
29784: LD_INT 22
29786: ST_TO_ADDR
29787: GO 30075
29789: LD_INT 20
29791: DOUBLE
29792: EQUAL
29793: IFTRUE 29797
29795: GO 29808
29797: POP
// bc_type := b_ext_siberium ; 21 :
29798: LD_ADDR_OWVAR 42
29802: PUSH
29803: LD_INT 21
29805: ST_TO_ADDR
29806: GO 30075
29808: LD_INT 21
29810: DOUBLE
29811: EQUAL
29812: IFTRUE 29816
29814: GO 29827
29816: POP
// bc_type := b_ext_computer ; 22 :
29817: LD_ADDR_OWVAR 42
29821: PUSH
29822: LD_INT 24
29824: ST_TO_ADDR
29825: GO 30075
29827: LD_INT 22
29829: DOUBLE
29830: EQUAL
29831: IFTRUE 29835
29833: GO 29846
29835: POP
// bc_type := b_ext_track ; 23 :
29836: LD_ADDR_OWVAR 42
29840: PUSH
29841: LD_INT 16
29843: ST_TO_ADDR
29844: GO 30075
29846: LD_INT 23
29848: DOUBLE
29849: EQUAL
29850: IFTRUE 29854
29852: GO 29865
29854: POP
// bc_type := b_ext_laser ; 24 :
29855: LD_ADDR_OWVAR 42
29859: PUSH
29860: LD_INT 25
29862: ST_TO_ADDR
29863: GO 30075
29865: LD_INT 24
29867: DOUBLE
29868: EQUAL
29869: IFTRUE 29873
29871: GO 29884
29873: POP
// bc_type := b_control_tower ; 25 :
29874: LD_ADDR_OWVAR 42
29878: PUSH
29879: LD_INT 36
29881: ST_TO_ADDR
29882: GO 30075
29884: LD_INT 25
29886: DOUBLE
29887: EQUAL
29888: IFTRUE 29892
29890: GO 29903
29892: POP
// bc_type := b_breastwork ; 26 :
29893: LD_ADDR_OWVAR 42
29897: PUSH
29898: LD_INT 31
29900: ST_TO_ADDR
29901: GO 30075
29903: LD_INT 26
29905: DOUBLE
29906: EQUAL
29907: IFTRUE 29911
29909: GO 29922
29911: POP
// bc_type := b_bunker ; 27 :
29912: LD_ADDR_OWVAR 42
29916: PUSH
29917: LD_INT 32
29919: ST_TO_ADDR
29920: GO 30075
29922: LD_INT 27
29924: DOUBLE
29925: EQUAL
29926: IFTRUE 29930
29928: GO 29941
29930: POP
// bc_type := b_turret ; 28 :
29931: LD_ADDR_OWVAR 42
29935: PUSH
29936: LD_INT 33
29938: ST_TO_ADDR
29939: GO 30075
29941: LD_INT 28
29943: DOUBLE
29944: EQUAL
29945: IFTRUE 29949
29947: GO 29960
29949: POP
// bc_type := b_armoury ; 29 :
29950: LD_ADDR_OWVAR 42
29954: PUSH
29955: LD_INT 4
29957: ST_TO_ADDR
29958: GO 30075
29960: LD_INT 29
29962: DOUBLE
29963: EQUAL
29964: IFTRUE 29968
29966: GO 29979
29968: POP
// bc_type := b_barracks ; 30 :
29969: LD_ADDR_OWVAR 42
29973: PUSH
29974: LD_INT 5
29976: ST_TO_ADDR
29977: GO 30075
29979: LD_INT 30
29981: DOUBLE
29982: EQUAL
29983: IFTRUE 29987
29985: GO 29998
29987: POP
// bc_type := b_solar_power ; 31 :
29988: LD_ADDR_OWVAR 42
29992: PUSH
29993: LD_INT 27
29995: ST_TO_ADDR
29996: GO 30075
29998: LD_INT 31
30000: DOUBLE
30001: EQUAL
30002: IFTRUE 30006
30004: GO 30017
30006: POP
// bc_type := b_oil_power ; 32 :
30007: LD_ADDR_OWVAR 42
30011: PUSH
30012: LD_INT 26
30014: ST_TO_ADDR
30015: GO 30075
30017: LD_INT 32
30019: DOUBLE
30020: EQUAL
30021: IFTRUE 30025
30023: GO 30036
30025: POP
// bc_type := b_siberite_power ; 33 :
30026: LD_ADDR_OWVAR 42
30030: PUSH
30031: LD_INT 28
30033: ST_TO_ADDR
30034: GO 30075
30036: LD_INT 33
30038: DOUBLE
30039: EQUAL
30040: IFTRUE 30044
30042: GO 30055
30044: POP
// bc_type := b_oil_mine ; 34 :
30045: LD_ADDR_OWVAR 42
30049: PUSH
30050: LD_INT 29
30052: ST_TO_ADDR
30053: GO 30075
30055: LD_INT 34
30057: DOUBLE
30058: EQUAL
30059: IFTRUE 30063
30061: GO 30074
30063: POP
// bc_type := b_siberite_mine ; end ;
30064: LD_ADDR_OWVAR 42
30068: PUSH
30069: LD_INT 30
30071: ST_TO_ADDR
30072: GO 30075
30074: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30075: LD_ADDR_VAR 0 8
30079: PUSH
30080: LD_VAR 0 5
30084: PPUSH
30085: LD_VAR 0 6
30089: PPUSH
30090: LD_VAR 0 3
30094: PPUSH
30095: CALL_OW 47
30099: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30100: LD_OWVAR 42
30104: PUSH
30105: LD_INT 32
30107: PUSH
30108: LD_INT 33
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: IN
30115: IFFALSE 30131
// PlaceWeaponTurret ( b , weapon ) ;
30117: LD_VAR 0 8
30121: PPUSH
30122: LD_VAR 0 4
30126: PPUSH
30127: CALL_OW 431
// end ;
30131: LD_VAR 0 7
30135: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30136: LD_INT 0
30138: PPUSH
30139: PPUSH
30140: PPUSH
30141: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30142: LD_ADDR_VAR 0 4
30146: PUSH
30147: LD_INT 22
30149: PUSH
30150: LD_OWVAR 2
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 2
30161: PUSH
30162: LD_INT 30
30164: PUSH
30165: LD_INT 0
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 30
30174: PUSH
30175: LD_INT 1
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: LIST
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PPUSH
30191: CALL_OW 69
30195: ST_TO_ADDR
// if not tmp then
30196: LD_VAR 0 4
30200: NOT
30201: IFFALSE 30205
// exit ;
30203: GO 30264
// for i in tmp do
30205: LD_ADDR_VAR 0 2
30209: PUSH
30210: LD_VAR 0 4
30214: PUSH
30215: FOR_IN
30216: IFFALSE 30262
// for j = 1 to 3 do
30218: LD_ADDR_VAR 0 3
30222: PUSH
30223: DOUBLE
30224: LD_INT 1
30226: DEC
30227: ST_TO_ADDR
30228: LD_INT 3
30230: PUSH
30231: FOR_TO
30232: IFFALSE 30258
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30234: LD_VAR 0 2
30238: PPUSH
30239: CALL_OW 274
30243: PPUSH
30244: LD_VAR 0 3
30248: PPUSH
30249: LD_INT 99999
30251: PPUSH
30252: CALL_OW 277
30256: GO 30231
30258: POP
30259: POP
30260: GO 30215
30262: POP
30263: POP
// end ;
30264: LD_VAR 0 1
30268: RET
// export function hHackSetLevel10 ; var i , j ; begin
30269: LD_INT 0
30271: PPUSH
30272: PPUSH
30273: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30274: LD_ADDR_VAR 0 2
30278: PUSH
30279: LD_INT 21
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PPUSH
30289: CALL_OW 69
30293: PUSH
30294: FOR_IN
30295: IFFALSE 30347
// if IsSelected ( i ) then
30297: LD_VAR 0 2
30301: PPUSH
30302: CALL_OW 306
30306: IFFALSE 30345
// begin for j := 1 to 4 do
30308: LD_ADDR_VAR 0 3
30312: PUSH
30313: DOUBLE
30314: LD_INT 1
30316: DEC
30317: ST_TO_ADDR
30318: LD_INT 4
30320: PUSH
30321: FOR_TO
30322: IFFALSE 30343
// SetSkill ( i , j , 10 ) ;
30324: LD_VAR 0 2
30328: PPUSH
30329: LD_VAR 0 3
30333: PPUSH
30334: LD_INT 10
30336: PPUSH
30337: CALL_OW 237
30341: GO 30321
30343: POP
30344: POP
// end ;
30345: GO 30294
30347: POP
30348: POP
// end ;
30349: LD_VAR 0 1
30353: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30354: LD_INT 0
30356: PPUSH
30357: PPUSH
30358: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30359: LD_ADDR_VAR 0 2
30363: PUSH
30364: LD_INT 22
30366: PUSH
30367: LD_OWVAR 2
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 21
30378: PUSH
30379: LD_INT 1
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PPUSH
30390: CALL_OW 69
30394: PUSH
30395: FOR_IN
30396: IFFALSE 30437
// begin for j := 1 to 4 do
30398: LD_ADDR_VAR 0 3
30402: PUSH
30403: DOUBLE
30404: LD_INT 1
30406: DEC
30407: ST_TO_ADDR
30408: LD_INT 4
30410: PUSH
30411: FOR_TO
30412: IFFALSE 30433
// SetSkill ( i , j , 10 ) ;
30414: LD_VAR 0 2
30418: PPUSH
30419: LD_VAR 0 3
30423: PPUSH
30424: LD_INT 10
30426: PPUSH
30427: CALL_OW 237
30431: GO 30411
30433: POP
30434: POP
// end ;
30435: GO 30395
30437: POP
30438: POP
// end ;
30439: LD_VAR 0 1
30443: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30444: LD_INT 0
30446: PPUSH
// uc_side := your_side ;
30447: LD_ADDR_OWVAR 20
30451: PUSH
30452: LD_OWVAR 2
30456: ST_TO_ADDR
// uc_nation := nation ;
30457: LD_ADDR_OWVAR 21
30461: PUSH
30462: LD_VAR 0 1
30466: ST_TO_ADDR
// InitHc ;
30467: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30471: LD_INT 0
30473: PPUSH
30474: LD_VAR 0 2
30478: PPUSH
30479: LD_VAR 0 3
30483: PPUSH
30484: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30488: LD_VAR 0 4
30492: PPUSH
30493: LD_VAR 0 5
30497: PPUSH
30498: CALL_OW 428
30502: PUSH
30503: LD_INT 0
30505: EQUAL
30506: IFFALSE 30530
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30508: CALL_OW 44
30512: PPUSH
30513: LD_VAR 0 4
30517: PPUSH
30518: LD_VAR 0 5
30522: PPUSH
30523: LD_INT 1
30525: PPUSH
30526: CALL_OW 48
// end ;
30530: LD_VAR 0 6
30534: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30535: LD_INT 0
30537: PPUSH
30538: PPUSH
// uc_side := your_side ;
30539: LD_ADDR_OWVAR 20
30543: PUSH
30544: LD_OWVAR 2
30548: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30549: LD_VAR 0 1
30553: PUSH
30554: LD_INT 1
30556: PUSH
30557: LD_INT 2
30559: PUSH
30560: LD_INT 3
30562: PUSH
30563: LD_INT 4
30565: PUSH
30566: LD_INT 5
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: IN
30576: IFFALSE 30588
// uc_nation := nation_american else
30578: LD_ADDR_OWVAR 21
30582: PUSH
30583: LD_INT 1
30585: ST_TO_ADDR
30586: GO 30631
// if chassis in [ 11 , 12 , 13 , 14 ] then
30588: LD_VAR 0 1
30592: PUSH
30593: LD_INT 11
30595: PUSH
30596: LD_INT 12
30598: PUSH
30599: LD_INT 13
30601: PUSH
30602: LD_INT 14
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: IN
30611: IFFALSE 30623
// uc_nation := nation_arabian else
30613: LD_ADDR_OWVAR 21
30617: PUSH
30618: LD_INT 2
30620: ST_TO_ADDR
30621: GO 30631
// uc_nation := nation_russian ;
30623: LD_ADDR_OWVAR 21
30627: PUSH
30628: LD_INT 3
30630: ST_TO_ADDR
// vc_chassis := chassis ;
30631: LD_ADDR_OWVAR 37
30635: PUSH
30636: LD_VAR 0 1
30640: ST_TO_ADDR
// vc_engine := engine ;
30641: LD_ADDR_OWVAR 39
30645: PUSH
30646: LD_VAR 0 2
30650: ST_TO_ADDR
// vc_control := control ;
30651: LD_ADDR_OWVAR 38
30655: PUSH
30656: LD_VAR 0 3
30660: ST_TO_ADDR
// vc_weapon := weapon ;
30661: LD_ADDR_OWVAR 40
30665: PUSH
30666: LD_VAR 0 4
30670: ST_TO_ADDR
// un := CreateVehicle ;
30671: LD_ADDR_VAR 0 8
30675: PUSH
30676: CALL_OW 45
30680: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30681: LD_VAR 0 8
30685: PPUSH
30686: LD_INT 0
30688: PPUSH
30689: LD_INT 5
30691: PPUSH
30692: CALL_OW 12
30696: PPUSH
30697: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30701: LD_VAR 0 8
30705: PPUSH
30706: LD_VAR 0 5
30710: PPUSH
30711: LD_VAR 0 6
30715: PPUSH
30716: LD_INT 1
30718: PPUSH
30719: CALL_OW 48
// end ;
30723: LD_VAR 0 7
30727: RET
// export hInvincible ; every 1 do
30728: GO 30730
30730: DISABLE
// hInvincible := [ ] ;
30731: LD_ADDR_EXP 94
30735: PUSH
30736: EMPTY
30737: ST_TO_ADDR
30738: END
// every 10 do var i ;
30739: GO 30741
30741: DISABLE
30742: LD_INT 0
30744: PPUSH
// begin enable ;
30745: ENABLE
// if not hInvincible then
30746: LD_EXP 94
30750: NOT
30751: IFFALSE 30755
// exit ;
30753: GO 30799
// for i in hInvincible do
30755: LD_ADDR_VAR 0 1
30759: PUSH
30760: LD_EXP 94
30764: PUSH
30765: FOR_IN
30766: IFFALSE 30797
// if GetLives ( i ) < 1000 then
30768: LD_VAR 0 1
30772: PPUSH
30773: CALL_OW 256
30777: PUSH
30778: LD_INT 1000
30780: LESS
30781: IFFALSE 30795
// SetLives ( i , 1000 ) ;
30783: LD_VAR 0 1
30787: PPUSH
30788: LD_INT 1000
30790: PPUSH
30791: CALL_OW 234
30795: GO 30765
30797: POP
30798: POP
// end ;
30799: PPOPN 1
30801: END
// export function hHackInvincible ; var i ; begin
30802: LD_INT 0
30804: PPUSH
30805: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30806: LD_ADDR_VAR 0 2
30810: PUSH
30811: LD_INT 2
30813: PUSH
30814: LD_INT 21
30816: PUSH
30817: LD_INT 1
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 21
30826: PUSH
30827: LD_INT 2
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: LIST
30838: PPUSH
30839: CALL_OW 69
30843: PUSH
30844: FOR_IN
30845: IFFALSE 30906
// if IsSelected ( i ) then
30847: LD_VAR 0 2
30851: PPUSH
30852: CALL_OW 306
30856: IFFALSE 30904
// begin if i in hInvincible then
30858: LD_VAR 0 2
30862: PUSH
30863: LD_EXP 94
30867: IN
30868: IFFALSE 30888
// hInvincible := hInvincible diff i else
30870: LD_ADDR_EXP 94
30874: PUSH
30875: LD_EXP 94
30879: PUSH
30880: LD_VAR 0 2
30884: DIFF
30885: ST_TO_ADDR
30886: GO 30904
// hInvincible := hInvincible union i ;
30888: LD_ADDR_EXP 94
30892: PUSH
30893: LD_EXP 94
30897: PUSH
30898: LD_VAR 0 2
30902: UNION
30903: ST_TO_ADDR
// end ;
30904: GO 30844
30906: POP
30907: POP
// end ;
30908: LD_VAR 0 1
30912: RET
// export function hHackInvisible ; var i , j ; begin
30913: LD_INT 0
30915: PPUSH
30916: PPUSH
30917: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30918: LD_ADDR_VAR 0 2
30922: PUSH
30923: LD_INT 21
30925: PUSH
30926: LD_INT 1
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PPUSH
30933: CALL_OW 69
30937: PUSH
30938: FOR_IN
30939: IFFALSE 30963
// if IsSelected ( i ) then
30941: LD_VAR 0 2
30945: PPUSH
30946: CALL_OW 306
30950: IFFALSE 30961
// ComForceInvisible ( i ) ;
30952: LD_VAR 0 2
30956: PPUSH
30957: CALL_OW 496
30961: GO 30938
30963: POP
30964: POP
// end ;
30965: LD_VAR 0 1
30969: RET
// export function hHackChangeYourSide ; begin
30970: LD_INT 0
30972: PPUSH
// if your_side = 8 then
30973: LD_OWVAR 2
30977: PUSH
30978: LD_INT 8
30980: EQUAL
30981: IFFALSE 30993
// your_side := 0 else
30983: LD_ADDR_OWVAR 2
30987: PUSH
30988: LD_INT 0
30990: ST_TO_ADDR
30991: GO 31007
// your_side := your_side + 1 ;
30993: LD_ADDR_OWVAR 2
30997: PUSH
30998: LD_OWVAR 2
31002: PUSH
31003: LD_INT 1
31005: PLUS
31006: ST_TO_ADDR
// end ;
31007: LD_VAR 0 1
31011: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31012: LD_INT 0
31014: PPUSH
31015: PPUSH
31016: PPUSH
// for i in all_units do
31017: LD_ADDR_VAR 0 2
31021: PUSH
31022: LD_OWVAR 3
31026: PUSH
31027: FOR_IN
31028: IFFALSE 31106
// if IsSelected ( i ) then
31030: LD_VAR 0 2
31034: PPUSH
31035: CALL_OW 306
31039: IFFALSE 31104
// begin j := GetSide ( i ) ;
31041: LD_ADDR_VAR 0 3
31045: PUSH
31046: LD_VAR 0 2
31050: PPUSH
31051: CALL_OW 255
31055: ST_TO_ADDR
// if j = 8 then
31056: LD_VAR 0 3
31060: PUSH
31061: LD_INT 8
31063: EQUAL
31064: IFFALSE 31076
// j := 0 else
31066: LD_ADDR_VAR 0 3
31070: PUSH
31071: LD_INT 0
31073: ST_TO_ADDR
31074: GO 31090
// j := j + 1 ;
31076: LD_ADDR_VAR 0 3
31080: PUSH
31081: LD_VAR 0 3
31085: PUSH
31086: LD_INT 1
31088: PLUS
31089: ST_TO_ADDR
// SetSide ( i , j ) ;
31090: LD_VAR 0 2
31094: PPUSH
31095: LD_VAR 0 3
31099: PPUSH
31100: CALL_OW 235
// end ;
31104: GO 31027
31106: POP
31107: POP
// end ;
31108: LD_VAR 0 1
31112: RET
// export function hHackFog ; begin
31113: LD_INT 0
31115: PPUSH
// FogOff ( true ) ;
31116: LD_INT 1
31118: PPUSH
31119: CALL_OW 344
// end ;
31123: LD_VAR 0 1
31127: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31128: LD_INT 0
31130: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31131: LD_VAR 0 1
31135: PPUSH
31136: LD_VAR 0 2
31140: PPUSH
31141: LD_VAR 0 3
31145: PPUSH
31146: LD_INT 1
31148: PPUSH
31149: LD_INT 1
31151: PPUSH
31152: CALL_OW 483
// CenterOnXY ( x , y ) ;
31156: LD_VAR 0 2
31160: PPUSH
31161: LD_VAR 0 3
31165: PPUSH
31166: CALL_OW 84
// end ;
31170: LD_VAR 0 4
31174: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31175: LD_INT 0
31177: PPUSH
31178: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31179: LD_VAR 0 1
31183: NOT
31184: PUSH
31185: LD_VAR 0 2
31189: PPUSH
31190: LD_VAR 0 3
31194: PPUSH
31195: CALL_OW 488
31199: NOT
31200: OR
31201: PUSH
31202: LD_VAR 0 1
31206: PPUSH
31207: CALL_OW 266
31211: PUSH
31212: LD_INT 3
31214: NONEQUAL
31215: PUSH
31216: LD_VAR 0 1
31220: PPUSH
31221: CALL_OW 247
31225: PUSH
31226: LD_INT 1
31228: EQUAL
31229: NOT
31230: AND
31231: OR
31232: IFFALSE 31236
// exit ;
31234: GO 31385
// if GetType ( factory ) = unit_human then
31236: LD_VAR 0 1
31240: PPUSH
31241: CALL_OW 247
31245: PUSH
31246: LD_INT 1
31248: EQUAL
31249: IFFALSE 31266
// factory := IsInUnit ( factory ) ;
31251: LD_ADDR_VAR 0 1
31255: PUSH
31256: LD_VAR 0 1
31260: PPUSH
31261: CALL_OW 310
31265: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31266: LD_VAR 0 1
31270: PPUSH
31271: CALL_OW 266
31275: PUSH
31276: LD_INT 3
31278: NONEQUAL
31279: IFFALSE 31283
// exit ;
31281: GO 31385
// if HexInfo ( x , y ) = factory then
31283: LD_VAR 0 2
31287: PPUSH
31288: LD_VAR 0 3
31292: PPUSH
31293: CALL_OW 428
31297: PUSH
31298: LD_VAR 0 1
31302: EQUAL
31303: IFFALSE 31330
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
31305: LD_ADDR_EXP 95
31309: PUSH
31310: LD_EXP 95
31314: PPUSH
31315: LD_VAR 0 1
31319: PPUSH
31320: LD_INT 0
31322: PPUSH
31323: CALL_OW 1
31327: ST_TO_ADDR
31328: GO 31381
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
31330: LD_ADDR_EXP 95
31334: PUSH
31335: LD_EXP 95
31339: PPUSH
31340: LD_VAR 0 1
31344: PPUSH
31345: LD_VAR 0 1
31349: PPUSH
31350: CALL_OW 255
31354: PUSH
31355: LD_VAR 0 1
31359: PUSH
31360: LD_VAR 0 2
31364: PUSH
31365: LD_VAR 0 3
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: PPUSH
31376: CALL_OW 1
31380: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31381: CALL 31390 0 0
// end ;
31385: LD_VAR 0 4
31389: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
31390: LD_INT 0
31392: PPUSH
31393: PPUSH
31394: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
31395: LD_STRING resetFactoryWaypoint();
31397: PPUSH
31398: CALL_OW 559
// if factoryWaypoints then
31402: LD_EXP 95
31406: IFFALSE 31532
// begin list := PrepareArray ( factoryWaypoints ) ;
31408: LD_ADDR_VAR 0 3
31412: PUSH
31413: LD_EXP 95
31417: PPUSH
31418: CALL 77825 0 1
31422: ST_TO_ADDR
// for i := 1 to list do
31423: LD_ADDR_VAR 0 2
31427: PUSH
31428: DOUBLE
31429: LD_INT 1
31431: DEC
31432: ST_TO_ADDR
31433: LD_VAR 0 3
31437: PUSH
31438: FOR_TO
31439: IFFALSE 31530
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31441: LD_STRING setFactoryWaypointXY(
31443: PUSH
31444: LD_VAR 0 3
31448: PUSH
31449: LD_VAR 0 2
31453: ARRAY
31454: PUSH
31455: LD_INT 1
31457: ARRAY
31458: STR
31459: PUSH
31460: LD_STRING ,
31462: STR
31463: PUSH
31464: LD_VAR 0 3
31468: PUSH
31469: LD_VAR 0 2
31473: ARRAY
31474: PUSH
31475: LD_INT 2
31477: ARRAY
31478: STR
31479: PUSH
31480: LD_STRING ,
31482: STR
31483: PUSH
31484: LD_VAR 0 3
31488: PUSH
31489: LD_VAR 0 2
31493: ARRAY
31494: PUSH
31495: LD_INT 3
31497: ARRAY
31498: STR
31499: PUSH
31500: LD_STRING ,
31502: STR
31503: PUSH
31504: LD_VAR 0 3
31508: PUSH
31509: LD_VAR 0 2
31513: ARRAY
31514: PUSH
31515: LD_INT 4
31517: ARRAY
31518: STR
31519: PUSH
31520: LD_STRING )
31522: STR
31523: PPUSH
31524: CALL_OW 559
31528: GO 31438
31530: POP
31531: POP
// end ; end ;
31532: LD_VAR 0 1
31536: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
31537: LD_INT 0
31539: PPUSH
// if HexInfo ( x , y ) = warehouse then
31540: LD_VAR 0 2
31544: PPUSH
31545: LD_VAR 0 3
31549: PPUSH
31550: CALL_OW 428
31554: PUSH
31555: LD_VAR 0 1
31559: EQUAL
31560: IFFALSE 31587
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
31562: LD_ADDR_EXP 96
31566: PUSH
31567: LD_EXP 96
31571: PPUSH
31572: LD_VAR 0 1
31576: PPUSH
31577: LD_INT 0
31579: PPUSH
31580: CALL_OW 1
31584: ST_TO_ADDR
31585: GO 31638
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
31587: LD_ADDR_EXP 96
31591: PUSH
31592: LD_EXP 96
31596: PPUSH
31597: LD_VAR 0 1
31601: PPUSH
31602: LD_VAR 0 1
31606: PPUSH
31607: CALL_OW 255
31611: PUSH
31612: LD_VAR 0 1
31616: PUSH
31617: LD_VAR 0 2
31621: PUSH
31622: LD_VAR 0 3
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: PPUSH
31633: CALL_OW 1
31637: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
31638: CALL 31647 0 0
// end ;
31642: LD_VAR 0 4
31646: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
31647: LD_INT 0
31649: PPUSH
31650: PPUSH
31651: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
31652: LD_STRING resetWarehouseGatheringPoints();
31654: PPUSH
31655: CALL_OW 559
// if warehouseGatheringPoints then
31659: LD_EXP 96
31663: IFFALSE 31789
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
31665: LD_ADDR_VAR 0 3
31669: PUSH
31670: LD_EXP 96
31674: PPUSH
31675: CALL 77825 0 1
31679: ST_TO_ADDR
// for i := 1 to list do
31680: LD_ADDR_VAR 0 2
31684: PUSH
31685: DOUBLE
31686: LD_INT 1
31688: DEC
31689: ST_TO_ADDR
31690: LD_VAR 0 3
31694: PUSH
31695: FOR_TO
31696: IFFALSE 31787
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31698: LD_STRING setWarehouseGatheringPointXY(
31700: PUSH
31701: LD_VAR 0 3
31705: PUSH
31706: LD_VAR 0 2
31710: ARRAY
31711: PUSH
31712: LD_INT 1
31714: ARRAY
31715: STR
31716: PUSH
31717: LD_STRING ,
31719: STR
31720: PUSH
31721: LD_VAR 0 3
31725: PUSH
31726: LD_VAR 0 2
31730: ARRAY
31731: PUSH
31732: LD_INT 2
31734: ARRAY
31735: STR
31736: PUSH
31737: LD_STRING ,
31739: STR
31740: PUSH
31741: LD_VAR 0 3
31745: PUSH
31746: LD_VAR 0 2
31750: ARRAY
31751: PUSH
31752: LD_INT 3
31754: ARRAY
31755: STR
31756: PUSH
31757: LD_STRING ,
31759: STR
31760: PUSH
31761: LD_VAR 0 3
31765: PUSH
31766: LD_VAR 0 2
31770: ARRAY
31771: PUSH
31772: LD_INT 4
31774: ARRAY
31775: STR
31776: PUSH
31777: LD_STRING )
31779: STR
31780: PPUSH
31781: CALL_OW 559
31785: GO 31695
31787: POP
31788: POP
// end ; end ;
31789: LD_VAR 0 1
31793: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
31794: LD_EXP 96
31798: IFFALSE 32483
31800: GO 31802
31802: DISABLE
31803: LD_INT 0
31805: PPUSH
31806: PPUSH
31807: PPUSH
31808: PPUSH
31809: PPUSH
31810: PPUSH
31811: PPUSH
31812: PPUSH
31813: PPUSH
// begin enable ;
31814: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
31815: LD_ADDR_VAR 0 3
31819: PUSH
31820: LD_EXP 96
31824: PPUSH
31825: CALL 77825 0 1
31829: ST_TO_ADDR
// if not list then
31830: LD_VAR 0 3
31834: NOT
31835: IFFALSE 31839
// exit ;
31837: GO 32483
// for i := 1 to list do
31839: LD_ADDR_VAR 0 1
31843: PUSH
31844: DOUBLE
31845: LD_INT 1
31847: DEC
31848: ST_TO_ADDR
31849: LD_VAR 0 3
31853: PUSH
31854: FOR_TO
31855: IFFALSE 32481
// begin depot := list [ i ] [ 2 ] ;
31857: LD_ADDR_VAR 0 8
31861: PUSH
31862: LD_VAR 0 3
31866: PUSH
31867: LD_VAR 0 1
31871: ARRAY
31872: PUSH
31873: LD_INT 2
31875: ARRAY
31876: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
31877: LD_ADDR_VAR 0 5
31881: PUSH
31882: LD_VAR 0 3
31886: PUSH
31887: LD_VAR 0 1
31891: ARRAY
31892: PUSH
31893: LD_INT 1
31895: ARRAY
31896: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
31897: LD_VAR 0 8
31901: PPUSH
31902: CALL_OW 301
31906: PUSH
31907: LD_VAR 0 5
31911: PUSH
31912: LD_VAR 0 8
31916: PPUSH
31917: CALL_OW 255
31921: NONEQUAL
31922: OR
31923: IFFALSE 31952
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
31925: LD_ADDR_EXP 96
31929: PUSH
31930: LD_EXP 96
31934: PPUSH
31935: LD_VAR 0 8
31939: PPUSH
31940: LD_INT 0
31942: PPUSH
31943: CALL_OW 1
31947: ST_TO_ADDR
// exit ;
31948: POP
31949: POP
31950: GO 32483
// end ; x := list [ i ] [ 3 ] ;
31952: LD_ADDR_VAR 0 6
31956: PUSH
31957: LD_VAR 0 3
31961: PUSH
31962: LD_VAR 0 1
31966: ARRAY
31967: PUSH
31968: LD_INT 3
31970: ARRAY
31971: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
31972: LD_ADDR_VAR 0 7
31976: PUSH
31977: LD_VAR 0 3
31981: PUSH
31982: LD_VAR 0 1
31986: ARRAY
31987: PUSH
31988: LD_INT 4
31990: ARRAY
31991: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
31992: LD_ADDR_VAR 0 9
31996: PUSH
31997: LD_VAR 0 6
32001: PPUSH
32002: LD_VAR 0 7
32006: PPUSH
32007: LD_INT 16
32009: PPUSH
32010: CALL 76413 0 3
32014: ST_TO_ADDR
// if not cratesNearbyPoint then
32015: LD_VAR 0 9
32019: NOT
32020: IFFALSE 32026
// exit ;
32022: POP
32023: POP
32024: GO 32483
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
32026: LD_ADDR_VAR 0 4
32030: PUSH
32031: LD_INT 22
32033: PUSH
32034: LD_VAR 0 5
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 3
32045: PUSH
32046: LD_INT 60
32048: PUSH
32049: EMPTY
32050: LIST
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 91
32058: PUSH
32059: LD_VAR 0 8
32063: PUSH
32064: LD_INT 6
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 2
32074: PUSH
32075: LD_INT 25
32077: PUSH
32078: LD_INT 2
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 25
32087: PUSH
32088: LD_INT 16
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: LIST
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: PPUSH
32106: CALL_OW 69
32110: PUSH
32111: LD_VAR 0 8
32115: PPUSH
32116: CALL_OW 313
32120: PPUSH
32121: LD_INT 3
32123: PUSH
32124: LD_INT 60
32126: PUSH
32127: EMPTY
32128: LIST
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 2
32136: PUSH
32137: LD_INT 25
32139: PUSH
32140: LD_INT 2
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 25
32149: PUSH
32150: LD_INT 16
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: LIST
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PPUSH
32166: CALL_OW 72
32170: UNION
32171: ST_TO_ADDR
// if tmp then
32172: LD_VAR 0 4
32176: IFFALSE 32256
// begin tmp := ShrinkArray ( tmp , 3 ) ;
32178: LD_ADDR_VAR 0 4
32182: PUSH
32183: LD_VAR 0 4
32187: PPUSH
32188: LD_INT 3
32190: PPUSH
32191: CALL 74382 0 2
32195: ST_TO_ADDR
// for j in tmp do
32196: LD_ADDR_VAR 0 2
32200: PUSH
32201: LD_VAR 0 4
32205: PUSH
32206: FOR_IN
32207: IFFALSE 32250
// begin if IsInUnit ( j ) then
32209: LD_VAR 0 2
32213: PPUSH
32214: CALL_OW 310
32218: IFFALSE 32229
// ComExit ( j ) ;
32220: LD_VAR 0 2
32224: PPUSH
32225: CALL 74465 0 1
// AddComCollect ( j , x , y ) ;
32229: LD_VAR 0 2
32233: PPUSH
32234: LD_VAR 0 6
32238: PPUSH
32239: LD_VAR 0 7
32243: PPUSH
32244: CALL_OW 177
// end ;
32248: GO 32206
32250: POP
32251: POP
// exit ;
32252: POP
32253: POP
32254: GO 32483
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
32256: LD_ADDR_VAR 0 4
32260: PUSH
32261: LD_INT 22
32263: PUSH
32264: LD_VAR 0 5
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 91
32275: PUSH
32276: LD_VAR 0 8
32280: PUSH
32281: LD_INT 8
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 2
32291: PUSH
32292: LD_INT 34
32294: PUSH
32295: LD_INT 12
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 34
32304: PUSH
32305: LD_INT 51
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 34
32314: PUSH
32315: LD_INT 32
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 34
32324: PUSH
32325: LD_INT 89
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: LIST
32343: PPUSH
32344: CALL_OW 69
32348: ST_TO_ADDR
// if tmp then
32349: LD_VAR 0 4
32353: IFFALSE 32479
// begin for j in tmp do
32355: LD_ADDR_VAR 0 2
32359: PUSH
32360: LD_VAR 0 4
32364: PUSH
32365: FOR_IN
32366: IFFALSE 32477
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
32368: LD_VAR 0 2
32372: PPUSH
32373: CALL_OW 262
32377: PUSH
32378: LD_INT 3
32380: EQUAL
32381: PUSH
32382: LD_VAR 0 2
32386: PPUSH
32387: CALL_OW 261
32391: PUSH
32392: LD_INT 20
32394: GREATER
32395: OR
32396: PUSH
32397: LD_VAR 0 2
32401: PPUSH
32402: CALL_OW 314
32406: NOT
32407: AND
32408: PUSH
32409: LD_VAR 0 2
32413: PPUSH
32414: CALL_OW 263
32418: PUSH
32419: LD_INT 1
32421: NONEQUAL
32422: PUSH
32423: LD_VAR 0 2
32427: PPUSH
32428: CALL_OW 311
32432: OR
32433: AND
32434: IFFALSE 32475
// begin ComCollect ( j , x , y ) ;
32436: LD_VAR 0 2
32440: PPUSH
32441: LD_VAR 0 6
32445: PPUSH
32446: LD_VAR 0 7
32450: PPUSH
32451: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
32455: LD_VAR 0 2
32459: PPUSH
32460: LD_VAR 0 8
32464: PPUSH
32465: CALL_OW 172
// exit ;
32469: POP
32470: POP
32471: POP
32472: POP
32473: GO 32483
// end ;
32475: GO 32365
32477: POP
32478: POP
// end ; end ;
32479: GO 31854
32481: POP
32482: POP
// end ; end_of_file
32483: PPOPN 9
32485: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32486: LD_INT 0
32488: PPUSH
32489: PPUSH
32490: PPUSH
32491: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32492: LD_VAR 0 1
32496: PPUSH
32497: CALL_OW 264
32501: PUSH
32502: LD_INT 91
32504: EQUAL
32505: IFFALSE 32577
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32507: LD_INT 68
32509: PPUSH
32510: LD_VAR 0 1
32514: PPUSH
32515: CALL_OW 255
32519: PPUSH
32520: CALL_OW 321
32524: PUSH
32525: LD_INT 2
32527: EQUAL
32528: IFFALSE 32540
// eff := 70 else
32530: LD_ADDR_VAR 0 4
32534: PUSH
32535: LD_INT 70
32537: ST_TO_ADDR
32538: GO 32548
// eff := 30 ;
32540: LD_ADDR_VAR 0 4
32544: PUSH
32545: LD_INT 30
32547: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32548: LD_VAR 0 1
32552: PPUSH
32553: CALL_OW 250
32557: PPUSH
32558: LD_VAR 0 1
32562: PPUSH
32563: CALL_OW 251
32567: PPUSH
32568: LD_VAR 0 4
32572: PPUSH
32573: CALL_OW 495
// end ; end ;
32577: LD_VAR 0 2
32581: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32582: LD_INT 0
32584: PPUSH
// end ;
32585: LD_VAR 0 4
32589: RET
// export function SOS_Command ( cmd ) ; begin
32590: LD_INT 0
32592: PPUSH
// end ;
32593: LD_VAR 0 2
32597: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32598: LD_INT 0
32600: PPUSH
// end ;
32601: LD_VAR 0 6
32605: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
32606: LD_INT 0
32608: PPUSH
32609: PPUSH
// if not vehicle or not factory then
32610: LD_VAR 0 1
32614: NOT
32615: PUSH
32616: LD_VAR 0 2
32620: NOT
32621: OR
32622: IFFALSE 32626
// exit ;
32624: GO 32857
// if factoryWaypoints >= factory then
32626: LD_EXP 95
32630: PUSH
32631: LD_VAR 0 2
32635: GREATEREQUAL
32636: IFFALSE 32857
// if factoryWaypoints [ factory ] then
32638: LD_EXP 95
32642: PUSH
32643: LD_VAR 0 2
32647: ARRAY
32648: IFFALSE 32857
// begin if GetControl ( vehicle ) = control_manual then
32650: LD_VAR 0 1
32654: PPUSH
32655: CALL_OW 263
32659: PUSH
32660: LD_INT 1
32662: EQUAL
32663: IFFALSE 32744
// begin driver := IsDrivenBy ( vehicle ) ;
32665: LD_ADDR_VAR 0 4
32669: PUSH
32670: LD_VAR 0 1
32674: PPUSH
32675: CALL_OW 311
32679: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32680: LD_VAR 0 4
32684: PPUSH
32685: LD_EXP 95
32689: PUSH
32690: LD_VAR 0 2
32694: ARRAY
32695: PUSH
32696: LD_INT 3
32698: ARRAY
32699: PPUSH
32700: LD_EXP 95
32704: PUSH
32705: LD_VAR 0 2
32709: ARRAY
32710: PUSH
32711: LD_INT 4
32713: ARRAY
32714: PPUSH
32715: CALL_OW 171
// AddComExitVehicle ( driver ) ;
32719: LD_VAR 0 4
32723: PPUSH
32724: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
32728: LD_VAR 0 4
32732: PPUSH
32733: LD_VAR 0 2
32737: PPUSH
32738: CALL_OW 180
// end else
32742: GO 32857
// if GetControl ( vehicle ) = control_remote then
32744: LD_VAR 0 1
32748: PPUSH
32749: CALL_OW 263
32753: PUSH
32754: LD_INT 2
32756: EQUAL
32757: IFFALSE 32818
// begin wait ( 0 0$2 ) ;
32759: LD_INT 70
32761: PPUSH
32762: CALL_OW 67
// if Connect ( vehicle ) then
32766: LD_VAR 0 1
32770: PPUSH
32771: CALL 44706 0 1
32775: IFFALSE 32816
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32777: LD_VAR 0 1
32781: PPUSH
32782: LD_EXP 95
32786: PUSH
32787: LD_VAR 0 2
32791: ARRAY
32792: PUSH
32793: LD_INT 3
32795: ARRAY
32796: PPUSH
32797: LD_EXP 95
32801: PUSH
32802: LD_VAR 0 2
32806: ARRAY
32807: PUSH
32808: LD_INT 4
32810: ARRAY
32811: PPUSH
32812: CALL_OW 171
// end else
32816: GO 32857
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32818: LD_VAR 0 1
32822: PPUSH
32823: LD_EXP 95
32827: PUSH
32828: LD_VAR 0 2
32832: ARRAY
32833: PUSH
32834: LD_INT 3
32836: ARRAY
32837: PPUSH
32838: LD_EXP 95
32842: PUSH
32843: LD_VAR 0 2
32847: ARRAY
32848: PUSH
32849: LD_INT 4
32851: ARRAY
32852: PPUSH
32853: CALL_OW 171
// end ; end ;
32857: LD_VAR 0 3
32861: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32862: LD_INT 0
32864: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32865: LD_VAR 0 1
32869: PUSH
32870: LD_INT 250
32872: EQUAL
32873: PUSH
32874: LD_VAR 0 2
32878: PPUSH
32879: CALL_OW 264
32883: PUSH
32884: LD_INT 81
32886: EQUAL
32887: AND
32888: IFFALSE 32909
// MinerPlaceMine ( unit , x , y ) ;
32890: LD_VAR 0 2
32894: PPUSH
32895: LD_VAR 0 4
32899: PPUSH
32900: LD_VAR 0 5
32904: PPUSH
32905: CALL 35294 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32909: LD_VAR 0 1
32913: PUSH
32914: LD_INT 251
32916: EQUAL
32917: PUSH
32918: LD_VAR 0 2
32922: PPUSH
32923: CALL_OW 264
32927: PUSH
32928: LD_INT 81
32930: EQUAL
32931: AND
32932: IFFALSE 32953
// MinerDetonateMine ( unit , x , y ) ;
32934: LD_VAR 0 2
32938: PPUSH
32939: LD_VAR 0 4
32943: PPUSH
32944: LD_VAR 0 5
32948: PPUSH
32949: CALL 35569 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32953: LD_VAR 0 1
32957: PUSH
32958: LD_INT 252
32960: EQUAL
32961: PUSH
32962: LD_VAR 0 2
32966: PPUSH
32967: CALL_OW 264
32971: PUSH
32972: LD_INT 81
32974: EQUAL
32975: AND
32976: IFFALSE 32997
// MinerCreateMinefield ( unit , x , y ) ;
32978: LD_VAR 0 2
32982: PPUSH
32983: LD_VAR 0 4
32987: PPUSH
32988: LD_VAR 0 5
32992: PPUSH
32993: CALL 35986 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32997: LD_VAR 0 1
33001: PUSH
33002: LD_INT 253
33004: EQUAL
33005: PUSH
33006: LD_VAR 0 2
33010: PPUSH
33011: CALL_OW 257
33015: PUSH
33016: LD_INT 5
33018: EQUAL
33019: AND
33020: IFFALSE 33041
// ComBinocular ( unit , x , y ) ;
33022: LD_VAR 0 2
33026: PPUSH
33027: LD_VAR 0 4
33031: PPUSH
33032: LD_VAR 0 5
33036: PPUSH
33037: CALL 36355 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33041: LD_VAR 0 1
33045: PUSH
33046: LD_INT 254
33048: EQUAL
33049: PUSH
33050: LD_VAR 0 2
33054: PPUSH
33055: CALL_OW 264
33059: PUSH
33060: LD_INT 99
33062: EQUAL
33063: AND
33064: PUSH
33065: LD_VAR 0 3
33069: PPUSH
33070: CALL_OW 263
33074: PUSH
33075: LD_INT 3
33077: EQUAL
33078: AND
33079: IFFALSE 33095
// HackDestroyVehicle ( unit , selectedUnit ) ;
33081: LD_VAR 0 2
33085: PPUSH
33086: LD_VAR 0 3
33090: PPUSH
33091: CALL 34658 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33095: LD_VAR 0 1
33099: PUSH
33100: LD_INT 255
33102: EQUAL
33103: PUSH
33104: LD_VAR 0 2
33108: PPUSH
33109: CALL_OW 264
33113: PUSH
33114: LD_INT 14
33116: PUSH
33117: LD_INT 53
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: IN
33124: AND
33125: PUSH
33126: LD_VAR 0 4
33130: PPUSH
33131: LD_VAR 0 5
33135: PPUSH
33136: CALL_OW 488
33140: AND
33141: IFFALSE 33165
// CutTreeXYR ( unit , x , y , 12 ) ;
33143: LD_VAR 0 2
33147: PPUSH
33148: LD_VAR 0 4
33152: PPUSH
33153: LD_VAR 0 5
33157: PPUSH
33158: LD_INT 12
33160: PPUSH
33161: CALL 33228 0 4
// if cmd = 256 then
33165: LD_VAR 0 1
33169: PUSH
33170: LD_INT 256
33172: EQUAL
33173: IFFALSE 33194
// SetFactoryWaypoint ( unit , x , y ) ;
33175: LD_VAR 0 2
33179: PPUSH
33180: LD_VAR 0 4
33184: PPUSH
33185: LD_VAR 0 5
33189: PPUSH
33190: CALL 31175 0 3
// if cmd = 257 then
33194: LD_VAR 0 1
33198: PUSH
33199: LD_INT 257
33201: EQUAL
33202: IFFALSE 33223
// SetWarehouseGatheringPoint ( unit , x , y ) ;
33204: LD_VAR 0 2
33208: PPUSH
33209: LD_VAR 0 4
33213: PPUSH
33214: LD_VAR 0 5
33218: PPUSH
33219: CALL 31537 0 3
// end ;
33223: LD_VAR 0 6
33227: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33228: LD_INT 0
33230: PPUSH
33231: PPUSH
33232: PPUSH
33233: PPUSH
33234: PPUSH
33235: PPUSH
33236: PPUSH
33237: PPUSH
33238: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33239: LD_VAR 0 1
33243: NOT
33244: PUSH
33245: LD_VAR 0 2
33249: PPUSH
33250: LD_VAR 0 3
33254: PPUSH
33255: CALL_OW 488
33259: NOT
33260: OR
33261: PUSH
33262: LD_VAR 0 4
33266: NOT
33267: OR
33268: IFFALSE 33272
// exit ;
33270: GO 33612
// list := [ ] ;
33272: LD_ADDR_VAR 0 13
33276: PUSH
33277: EMPTY
33278: ST_TO_ADDR
// if x - r < 0 then
33279: LD_VAR 0 2
33283: PUSH
33284: LD_VAR 0 4
33288: MINUS
33289: PUSH
33290: LD_INT 0
33292: LESS
33293: IFFALSE 33305
// min_x := 0 else
33295: LD_ADDR_VAR 0 7
33299: PUSH
33300: LD_INT 0
33302: ST_TO_ADDR
33303: GO 33321
// min_x := x - r ;
33305: LD_ADDR_VAR 0 7
33309: PUSH
33310: LD_VAR 0 2
33314: PUSH
33315: LD_VAR 0 4
33319: MINUS
33320: ST_TO_ADDR
// if y - r < 0 then
33321: LD_VAR 0 3
33325: PUSH
33326: LD_VAR 0 4
33330: MINUS
33331: PUSH
33332: LD_INT 0
33334: LESS
33335: IFFALSE 33347
// min_y := 0 else
33337: LD_ADDR_VAR 0 8
33341: PUSH
33342: LD_INT 0
33344: ST_TO_ADDR
33345: GO 33363
// min_y := y - r ;
33347: LD_ADDR_VAR 0 8
33351: PUSH
33352: LD_VAR 0 3
33356: PUSH
33357: LD_VAR 0 4
33361: MINUS
33362: ST_TO_ADDR
// max_x := x + r ;
33363: LD_ADDR_VAR 0 9
33367: PUSH
33368: LD_VAR 0 2
33372: PUSH
33373: LD_VAR 0 4
33377: PLUS
33378: ST_TO_ADDR
// max_y := y + r ;
33379: LD_ADDR_VAR 0 10
33383: PUSH
33384: LD_VAR 0 3
33388: PUSH
33389: LD_VAR 0 4
33393: PLUS
33394: ST_TO_ADDR
// for _x = min_x to max_x do
33395: LD_ADDR_VAR 0 11
33399: PUSH
33400: DOUBLE
33401: LD_VAR 0 7
33405: DEC
33406: ST_TO_ADDR
33407: LD_VAR 0 9
33411: PUSH
33412: FOR_TO
33413: IFFALSE 33530
// for _y = min_y to max_y do
33415: LD_ADDR_VAR 0 12
33419: PUSH
33420: DOUBLE
33421: LD_VAR 0 8
33425: DEC
33426: ST_TO_ADDR
33427: LD_VAR 0 10
33431: PUSH
33432: FOR_TO
33433: IFFALSE 33526
// begin if not ValidHex ( _x , _y ) then
33435: LD_VAR 0 11
33439: PPUSH
33440: LD_VAR 0 12
33444: PPUSH
33445: CALL_OW 488
33449: NOT
33450: IFFALSE 33454
// continue ;
33452: GO 33432
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33454: LD_VAR 0 11
33458: PPUSH
33459: LD_VAR 0 12
33463: PPUSH
33464: CALL_OW 351
33468: PUSH
33469: LD_VAR 0 11
33473: PPUSH
33474: LD_VAR 0 12
33478: PPUSH
33479: CALL_OW 554
33483: AND
33484: IFFALSE 33524
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33486: LD_ADDR_VAR 0 13
33490: PUSH
33491: LD_VAR 0 13
33495: PPUSH
33496: LD_VAR 0 13
33500: PUSH
33501: LD_INT 1
33503: PLUS
33504: PPUSH
33505: LD_VAR 0 11
33509: PUSH
33510: LD_VAR 0 12
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PPUSH
33519: CALL_OW 2
33523: ST_TO_ADDR
// end ;
33524: GO 33432
33526: POP
33527: POP
33528: GO 33412
33530: POP
33531: POP
// if not list then
33532: LD_VAR 0 13
33536: NOT
33537: IFFALSE 33541
// exit ;
33539: GO 33612
// for i in list do
33541: LD_ADDR_VAR 0 6
33545: PUSH
33546: LD_VAR 0 13
33550: PUSH
33551: FOR_IN
33552: IFFALSE 33610
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33554: LD_VAR 0 1
33558: PPUSH
33559: LD_STRING M
33561: PUSH
33562: LD_VAR 0 6
33566: PUSH
33567: LD_INT 1
33569: ARRAY
33570: PUSH
33571: LD_VAR 0 6
33575: PUSH
33576: LD_INT 2
33578: ARRAY
33579: PUSH
33580: LD_INT 0
33582: PUSH
33583: LD_INT 0
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: LD_INT 0
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: PUSH
33601: EMPTY
33602: LIST
33603: PPUSH
33604: CALL_OW 447
33608: GO 33551
33610: POP
33611: POP
// end ;
33612: LD_VAR 0 5
33616: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33617: LD_EXP 98
33621: NOT
33622: IFFALSE 33672
33624: GO 33626
33626: DISABLE
// begin initHack := true ;
33627: LD_ADDR_EXP 98
33631: PUSH
33632: LD_INT 1
33634: ST_TO_ADDR
// hackTanks := [ ] ;
33635: LD_ADDR_EXP 99
33639: PUSH
33640: EMPTY
33641: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33642: LD_ADDR_EXP 100
33646: PUSH
33647: EMPTY
33648: ST_TO_ADDR
// hackLimit := 3 ;
33649: LD_ADDR_EXP 101
33653: PUSH
33654: LD_INT 3
33656: ST_TO_ADDR
// hackDist := 12 ;
33657: LD_ADDR_EXP 102
33661: PUSH
33662: LD_INT 12
33664: ST_TO_ADDR
// hackCounter := [ ] ;
33665: LD_ADDR_EXP 103
33669: PUSH
33670: EMPTY
33671: ST_TO_ADDR
// end ;
33672: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33673: LD_EXP 98
33677: PUSH
33678: LD_INT 34
33680: PUSH
33681: LD_INT 99
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PPUSH
33688: CALL_OW 69
33692: AND
33693: IFFALSE 33946
33695: GO 33697
33697: DISABLE
33698: LD_INT 0
33700: PPUSH
33701: PPUSH
// begin enable ;
33702: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33703: LD_ADDR_VAR 0 1
33707: PUSH
33708: LD_INT 34
33710: PUSH
33711: LD_INT 99
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PPUSH
33718: CALL_OW 69
33722: PUSH
33723: FOR_IN
33724: IFFALSE 33944
// begin if not i in hackTanks then
33726: LD_VAR 0 1
33730: PUSH
33731: LD_EXP 99
33735: IN
33736: NOT
33737: IFFALSE 33820
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33739: LD_ADDR_EXP 99
33743: PUSH
33744: LD_EXP 99
33748: PPUSH
33749: LD_EXP 99
33753: PUSH
33754: LD_INT 1
33756: PLUS
33757: PPUSH
33758: LD_VAR 0 1
33762: PPUSH
33763: CALL_OW 1
33767: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33768: LD_ADDR_EXP 100
33772: PUSH
33773: LD_EXP 100
33777: PPUSH
33778: LD_EXP 100
33782: PUSH
33783: LD_INT 1
33785: PLUS
33786: PPUSH
33787: EMPTY
33788: PPUSH
33789: CALL_OW 1
33793: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33794: LD_ADDR_EXP 103
33798: PUSH
33799: LD_EXP 103
33803: PPUSH
33804: LD_EXP 103
33808: PUSH
33809: LD_INT 1
33811: PLUS
33812: PPUSH
33813: EMPTY
33814: PPUSH
33815: CALL_OW 1
33819: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33820: LD_VAR 0 1
33824: PPUSH
33825: CALL_OW 302
33829: NOT
33830: IFFALSE 33843
// begin HackUnlinkAll ( i ) ;
33832: LD_VAR 0 1
33836: PPUSH
33837: CALL 33949 0 1
// continue ;
33841: GO 33723
// end ; HackCheckCapturedStatus ( i ) ;
33843: LD_VAR 0 1
33847: PPUSH
33848: CALL 34392 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33852: LD_ADDR_VAR 0 2
33856: PUSH
33857: LD_INT 81
33859: PUSH
33860: LD_VAR 0 1
33864: PPUSH
33865: CALL_OW 255
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 33
33876: PUSH
33877: LD_INT 3
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 91
33886: PUSH
33887: LD_VAR 0 1
33891: PUSH
33892: LD_EXP 102
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 50
33904: PUSH
33905: EMPTY
33906: LIST
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: PPUSH
33914: CALL_OW 69
33918: ST_TO_ADDR
// if not tmp then
33919: LD_VAR 0 2
33923: NOT
33924: IFFALSE 33928
// continue ;
33926: GO 33723
// HackLink ( i , tmp ) ;
33928: LD_VAR 0 1
33932: PPUSH
33933: LD_VAR 0 2
33937: PPUSH
33938: CALL 34085 0 2
// end ;
33942: GO 33723
33944: POP
33945: POP
// end ;
33946: PPOPN 2
33948: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33949: LD_INT 0
33951: PPUSH
33952: PPUSH
33953: PPUSH
// if not hack in hackTanks then
33954: LD_VAR 0 1
33958: PUSH
33959: LD_EXP 99
33963: IN
33964: NOT
33965: IFFALSE 33969
// exit ;
33967: GO 34080
// index := GetElementIndex ( hackTanks , hack ) ;
33969: LD_ADDR_VAR 0 4
33973: PUSH
33974: LD_EXP 99
33978: PPUSH
33979: LD_VAR 0 1
33983: PPUSH
33984: CALL 41522 0 2
33988: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33989: LD_EXP 100
33993: PUSH
33994: LD_VAR 0 4
33998: ARRAY
33999: IFFALSE 34080
// begin for i in hackTanksCaptured [ index ] do
34001: LD_ADDR_VAR 0 3
34005: PUSH
34006: LD_EXP 100
34010: PUSH
34011: LD_VAR 0 4
34015: ARRAY
34016: PUSH
34017: FOR_IN
34018: IFFALSE 34044
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34020: LD_VAR 0 3
34024: PUSH
34025: LD_INT 1
34027: ARRAY
34028: PPUSH
34029: LD_VAR 0 3
34033: PUSH
34034: LD_INT 2
34036: ARRAY
34037: PPUSH
34038: CALL_OW 235
34042: GO 34017
34044: POP
34045: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34046: LD_ADDR_EXP 100
34050: PUSH
34051: LD_EXP 100
34055: PPUSH
34056: LD_VAR 0 4
34060: PPUSH
34061: EMPTY
34062: PPUSH
34063: CALL_OW 1
34067: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34068: LD_VAR 0 1
34072: PPUSH
34073: LD_INT 0
34075: PPUSH
34076: CALL_OW 505
// end ; end ;
34080: LD_VAR 0 2
34084: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34085: LD_INT 0
34087: PPUSH
34088: PPUSH
34089: PPUSH
// if not hack in hackTanks or not vehicles then
34090: LD_VAR 0 1
34094: PUSH
34095: LD_EXP 99
34099: IN
34100: NOT
34101: PUSH
34102: LD_VAR 0 2
34106: NOT
34107: OR
34108: IFFALSE 34112
// exit ;
34110: GO 34387
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34112: LD_ADDR_VAR 0 2
34116: PUSH
34117: LD_VAR 0 1
34121: PPUSH
34122: LD_VAR 0 2
34126: PPUSH
34127: LD_INT 1
34129: PPUSH
34130: LD_INT 1
34132: PPUSH
34133: CALL 42172 0 4
34137: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34138: LD_ADDR_VAR 0 5
34142: PUSH
34143: LD_EXP 99
34147: PPUSH
34148: LD_VAR 0 1
34152: PPUSH
34153: CALL 41522 0 2
34157: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34158: LD_EXP 100
34162: PUSH
34163: LD_VAR 0 5
34167: ARRAY
34168: PUSH
34169: LD_EXP 101
34173: LESS
34174: IFFALSE 34363
// begin for i := 1 to vehicles do
34176: LD_ADDR_VAR 0 4
34180: PUSH
34181: DOUBLE
34182: LD_INT 1
34184: DEC
34185: ST_TO_ADDR
34186: LD_VAR 0 2
34190: PUSH
34191: FOR_TO
34192: IFFALSE 34361
// begin if hackTanksCaptured [ index ] = hackLimit then
34194: LD_EXP 100
34198: PUSH
34199: LD_VAR 0 5
34203: ARRAY
34204: PUSH
34205: LD_EXP 101
34209: EQUAL
34210: IFFALSE 34214
// break ;
34212: GO 34361
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34214: LD_ADDR_EXP 103
34218: PUSH
34219: LD_EXP 103
34223: PPUSH
34224: LD_VAR 0 5
34228: PPUSH
34229: LD_EXP 103
34233: PUSH
34234: LD_VAR 0 5
34238: ARRAY
34239: PUSH
34240: LD_INT 1
34242: PLUS
34243: PPUSH
34244: CALL_OW 1
34248: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34249: LD_ADDR_EXP 100
34253: PUSH
34254: LD_EXP 100
34258: PPUSH
34259: LD_VAR 0 5
34263: PUSH
34264: LD_EXP 100
34268: PUSH
34269: LD_VAR 0 5
34273: ARRAY
34274: PUSH
34275: LD_INT 1
34277: PLUS
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PPUSH
34283: LD_VAR 0 2
34287: PUSH
34288: LD_VAR 0 4
34292: ARRAY
34293: PUSH
34294: LD_VAR 0 2
34298: PUSH
34299: LD_VAR 0 4
34303: ARRAY
34304: PPUSH
34305: CALL_OW 255
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PPUSH
34314: CALL 41737 0 3
34318: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34319: LD_VAR 0 2
34323: PUSH
34324: LD_VAR 0 4
34328: ARRAY
34329: PPUSH
34330: LD_VAR 0 1
34334: PPUSH
34335: CALL_OW 255
34339: PPUSH
34340: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34344: LD_VAR 0 2
34348: PUSH
34349: LD_VAR 0 4
34353: ARRAY
34354: PPUSH
34355: CALL_OW 141
// end ;
34359: GO 34191
34361: POP
34362: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34363: LD_VAR 0 1
34367: PPUSH
34368: LD_EXP 100
34372: PUSH
34373: LD_VAR 0 5
34377: ARRAY
34378: PUSH
34379: LD_INT 0
34381: PLUS
34382: PPUSH
34383: CALL_OW 505
// end ;
34387: LD_VAR 0 3
34391: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34392: LD_INT 0
34394: PPUSH
34395: PPUSH
34396: PPUSH
34397: PPUSH
// if not hack in hackTanks then
34398: LD_VAR 0 1
34402: PUSH
34403: LD_EXP 99
34407: IN
34408: NOT
34409: IFFALSE 34413
// exit ;
34411: GO 34653
// index := GetElementIndex ( hackTanks , hack ) ;
34413: LD_ADDR_VAR 0 4
34417: PUSH
34418: LD_EXP 99
34422: PPUSH
34423: LD_VAR 0 1
34427: PPUSH
34428: CALL 41522 0 2
34432: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34433: LD_ADDR_VAR 0 3
34437: PUSH
34438: DOUBLE
34439: LD_EXP 100
34443: PUSH
34444: LD_VAR 0 4
34448: ARRAY
34449: INC
34450: ST_TO_ADDR
34451: LD_INT 1
34453: PUSH
34454: FOR_DOWNTO
34455: IFFALSE 34627
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34457: LD_ADDR_VAR 0 5
34461: PUSH
34462: LD_EXP 100
34466: PUSH
34467: LD_VAR 0 4
34471: ARRAY
34472: PUSH
34473: LD_VAR 0 3
34477: ARRAY
34478: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34479: LD_VAR 0 5
34483: PUSH
34484: LD_INT 1
34486: ARRAY
34487: PPUSH
34488: CALL_OW 302
34492: NOT
34493: PUSH
34494: LD_VAR 0 5
34498: PUSH
34499: LD_INT 1
34501: ARRAY
34502: PPUSH
34503: CALL_OW 255
34507: PUSH
34508: LD_VAR 0 1
34512: PPUSH
34513: CALL_OW 255
34517: NONEQUAL
34518: OR
34519: IFFALSE 34625
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34521: LD_VAR 0 5
34525: PUSH
34526: LD_INT 1
34528: ARRAY
34529: PPUSH
34530: CALL_OW 305
34534: PUSH
34535: LD_VAR 0 5
34539: PUSH
34540: LD_INT 1
34542: ARRAY
34543: PPUSH
34544: CALL_OW 255
34548: PUSH
34549: LD_VAR 0 1
34553: PPUSH
34554: CALL_OW 255
34558: EQUAL
34559: AND
34560: IFFALSE 34584
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34562: LD_VAR 0 5
34566: PUSH
34567: LD_INT 1
34569: ARRAY
34570: PPUSH
34571: LD_VAR 0 5
34575: PUSH
34576: LD_INT 2
34578: ARRAY
34579: PPUSH
34580: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34584: LD_ADDR_EXP 100
34588: PUSH
34589: LD_EXP 100
34593: PPUSH
34594: LD_VAR 0 4
34598: PPUSH
34599: LD_EXP 100
34603: PUSH
34604: LD_VAR 0 4
34608: ARRAY
34609: PPUSH
34610: LD_VAR 0 3
34614: PPUSH
34615: CALL_OW 3
34619: PPUSH
34620: CALL_OW 1
34624: ST_TO_ADDR
// end ; end ;
34625: GO 34454
34627: POP
34628: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34629: LD_VAR 0 1
34633: PPUSH
34634: LD_EXP 100
34638: PUSH
34639: LD_VAR 0 4
34643: ARRAY
34644: PUSH
34645: LD_INT 0
34647: PLUS
34648: PPUSH
34649: CALL_OW 505
// end ;
34653: LD_VAR 0 2
34657: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34658: LD_INT 0
34660: PPUSH
34661: PPUSH
34662: PPUSH
34663: PPUSH
// if not hack in hackTanks then
34664: LD_VAR 0 1
34668: PUSH
34669: LD_EXP 99
34673: IN
34674: NOT
34675: IFFALSE 34679
// exit ;
34677: GO 34764
// index := GetElementIndex ( hackTanks , hack ) ;
34679: LD_ADDR_VAR 0 5
34683: PUSH
34684: LD_EXP 99
34688: PPUSH
34689: LD_VAR 0 1
34693: PPUSH
34694: CALL 41522 0 2
34698: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34699: LD_ADDR_VAR 0 4
34703: PUSH
34704: DOUBLE
34705: LD_INT 1
34707: DEC
34708: ST_TO_ADDR
34709: LD_EXP 100
34713: PUSH
34714: LD_VAR 0 5
34718: ARRAY
34719: PUSH
34720: FOR_TO
34721: IFFALSE 34762
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34723: LD_EXP 100
34727: PUSH
34728: LD_VAR 0 5
34732: ARRAY
34733: PUSH
34734: LD_VAR 0 4
34738: ARRAY
34739: PUSH
34740: LD_INT 1
34742: ARRAY
34743: PUSH
34744: LD_VAR 0 2
34748: EQUAL
34749: IFFALSE 34760
// KillUnit ( vehicle ) ;
34751: LD_VAR 0 2
34755: PPUSH
34756: CALL_OW 66
34760: GO 34720
34762: POP
34763: POP
// end ;
34764: LD_VAR 0 3
34768: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34769: LD_EXP 104
34773: NOT
34774: IFFALSE 34809
34776: GO 34778
34778: DISABLE
// begin initMiner := true ;
34779: LD_ADDR_EXP 104
34783: PUSH
34784: LD_INT 1
34786: ST_TO_ADDR
// minersList := [ ] ;
34787: LD_ADDR_EXP 105
34791: PUSH
34792: EMPTY
34793: ST_TO_ADDR
// minerMinesList := [ ] ;
34794: LD_ADDR_EXP 106
34798: PUSH
34799: EMPTY
34800: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34801: LD_ADDR_EXP 107
34805: PUSH
34806: LD_INT 5
34808: ST_TO_ADDR
// end ;
34809: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34810: LD_EXP 104
34814: PUSH
34815: LD_INT 34
34817: PUSH
34818: LD_INT 81
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PPUSH
34825: CALL_OW 69
34829: AND
34830: IFFALSE 35291
34832: GO 34834
34834: DISABLE
34835: LD_INT 0
34837: PPUSH
34838: PPUSH
34839: PPUSH
34840: PPUSH
// begin enable ;
34841: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34842: LD_ADDR_VAR 0 1
34846: PUSH
34847: LD_INT 34
34849: PUSH
34850: LD_INT 81
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PPUSH
34857: CALL_OW 69
34861: PUSH
34862: FOR_IN
34863: IFFALSE 34935
// begin if not i in minersList then
34865: LD_VAR 0 1
34869: PUSH
34870: LD_EXP 105
34874: IN
34875: NOT
34876: IFFALSE 34933
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34878: LD_ADDR_EXP 105
34882: PUSH
34883: LD_EXP 105
34887: PPUSH
34888: LD_EXP 105
34892: PUSH
34893: LD_INT 1
34895: PLUS
34896: PPUSH
34897: LD_VAR 0 1
34901: PPUSH
34902: CALL_OW 1
34906: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34907: LD_ADDR_EXP 106
34911: PUSH
34912: LD_EXP 106
34916: PPUSH
34917: LD_EXP 106
34921: PUSH
34922: LD_INT 1
34924: PLUS
34925: PPUSH
34926: EMPTY
34927: PPUSH
34928: CALL_OW 1
34932: ST_TO_ADDR
// end end ;
34933: GO 34862
34935: POP
34936: POP
// for i := minerMinesList downto 1 do
34937: LD_ADDR_VAR 0 1
34941: PUSH
34942: DOUBLE
34943: LD_EXP 106
34947: INC
34948: ST_TO_ADDR
34949: LD_INT 1
34951: PUSH
34952: FOR_DOWNTO
34953: IFFALSE 35289
// begin if IsLive ( minersList [ i ] ) then
34955: LD_EXP 105
34959: PUSH
34960: LD_VAR 0 1
34964: ARRAY
34965: PPUSH
34966: CALL_OW 300
34970: IFFALSE 34998
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34972: LD_EXP 105
34976: PUSH
34977: LD_VAR 0 1
34981: ARRAY
34982: PPUSH
34983: LD_EXP 106
34987: PUSH
34988: LD_VAR 0 1
34992: ARRAY
34993: PPUSH
34994: CALL_OW 505
// if not minerMinesList [ i ] then
34998: LD_EXP 106
35002: PUSH
35003: LD_VAR 0 1
35007: ARRAY
35008: NOT
35009: IFFALSE 35013
// continue ;
35011: GO 34952
// for j := minerMinesList [ i ] downto 1 do
35013: LD_ADDR_VAR 0 2
35017: PUSH
35018: DOUBLE
35019: LD_EXP 106
35023: PUSH
35024: LD_VAR 0 1
35028: ARRAY
35029: INC
35030: ST_TO_ADDR
35031: LD_INT 1
35033: PUSH
35034: FOR_DOWNTO
35035: IFFALSE 35285
// begin side := GetSide ( minersList [ i ] ) ;
35037: LD_ADDR_VAR 0 3
35041: PUSH
35042: LD_EXP 105
35046: PUSH
35047: LD_VAR 0 1
35051: ARRAY
35052: PPUSH
35053: CALL_OW 255
35057: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35058: LD_ADDR_VAR 0 4
35062: PUSH
35063: LD_EXP 106
35067: PUSH
35068: LD_VAR 0 1
35072: ARRAY
35073: PUSH
35074: LD_VAR 0 2
35078: ARRAY
35079: PUSH
35080: LD_INT 1
35082: ARRAY
35083: PPUSH
35084: LD_EXP 106
35088: PUSH
35089: LD_VAR 0 1
35093: ARRAY
35094: PUSH
35095: LD_VAR 0 2
35099: ARRAY
35100: PUSH
35101: LD_INT 2
35103: ARRAY
35104: PPUSH
35105: CALL_OW 428
35109: ST_TO_ADDR
// if not tmp then
35110: LD_VAR 0 4
35114: NOT
35115: IFFALSE 35119
// continue ;
35117: GO 35034
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35119: LD_VAR 0 4
35123: PUSH
35124: LD_INT 81
35126: PUSH
35127: LD_VAR 0 3
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PPUSH
35136: CALL_OW 69
35140: IN
35141: PUSH
35142: LD_EXP 106
35146: PUSH
35147: LD_VAR 0 1
35151: ARRAY
35152: PUSH
35153: LD_VAR 0 2
35157: ARRAY
35158: PUSH
35159: LD_INT 1
35161: ARRAY
35162: PPUSH
35163: LD_EXP 106
35167: PUSH
35168: LD_VAR 0 1
35172: ARRAY
35173: PUSH
35174: LD_VAR 0 2
35178: ARRAY
35179: PUSH
35180: LD_INT 2
35182: ARRAY
35183: PPUSH
35184: CALL_OW 458
35188: AND
35189: IFFALSE 35283
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35191: LD_EXP 106
35195: PUSH
35196: LD_VAR 0 1
35200: ARRAY
35201: PUSH
35202: LD_VAR 0 2
35206: ARRAY
35207: PUSH
35208: LD_INT 1
35210: ARRAY
35211: PPUSH
35212: LD_EXP 106
35216: PUSH
35217: LD_VAR 0 1
35221: ARRAY
35222: PUSH
35223: LD_VAR 0 2
35227: ARRAY
35228: PUSH
35229: LD_INT 2
35231: ARRAY
35232: PPUSH
35233: LD_VAR 0 3
35237: PPUSH
35238: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35242: LD_ADDR_EXP 106
35246: PUSH
35247: LD_EXP 106
35251: PPUSH
35252: LD_VAR 0 1
35256: PPUSH
35257: LD_EXP 106
35261: PUSH
35262: LD_VAR 0 1
35266: ARRAY
35267: PPUSH
35268: LD_VAR 0 2
35272: PPUSH
35273: CALL_OW 3
35277: PPUSH
35278: CALL_OW 1
35282: ST_TO_ADDR
// end ; end ;
35283: GO 35034
35285: POP
35286: POP
// end ;
35287: GO 34952
35289: POP
35290: POP
// end ;
35291: PPOPN 4
35293: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35294: LD_INT 0
35296: PPUSH
35297: PPUSH
// result := false ;
35298: LD_ADDR_VAR 0 4
35302: PUSH
35303: LD_INT 0
35305: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35306: LD_VAR 0 1
35310: PPUSH
35311: CALL_OW 264
35315: PUSH
35316: LD_INT 81
35318: EQUAL
35319: NOT
35320: IFFALSE 35324
// exit ;
35322: GO 35564
// index := GetElementIndex ( minersList , unit ) ;
35324: LD_ADDR_VAR 0 5
35328: PUSH
35329: LD_EXP 105
35333: PPUSH
35334: LD_VAR 0 1
35338: PPUSH
35339: CALL 41522 0 2
35343: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35344: LD_EXP 106
35348: PUSH
35349: LD_VAR 0 5
35353: ARRAY
35354: PUSH
35355: LD_EXP 107
35359: GREATEREQUAL
35360: IFFALSE 35364
// exit ;
35362: GO 35564
// ComMoveXY ( unit , x , y ) ;
35364: LD_VAR 0 1
35368: PPUSH
35369: LD_VAR 0 2
35373: PPUSH
35374: LD_VAR 0 3
35378: PPUSH
35379: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35383: LD_INT 35
35385: PPUSH
35386: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35390: LD_VAR 0 1
35394: PPUSH
35395: LD_VAR 0 2
35399: PPUSH
35400: LD_VAR 0 3
35404: PPUSH
35405: CALL 72877 0 3
35409: NOT
35410: PUSH
35411: LD_VAR 0 1
35415: PPUSH
35416: CALL_OW 314
35420: AND
35421: IFFALSE 35425
// exit ;
35423: GO 35564
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35425: LD_VAR 0 2
35429: PPUSH
35430: LD_VAR 0 3
35434: PPUSH
35435: CALL_OW 428
35439: PUSH
35440: LD_VAR 0 1
35444: EQUAL
35445: PUSH
35446: LD_VAR 0 1
35450: PPUSH
35451: CALL_OW 314
35455: NOT
35456: AND
35457: IFFALSE 35383
// PlaySoundXY ( x , y , PlantMine ) ;
35459: LD_VAR 0 2
35463: PPUSH
35464: LD_VAR 0 3
35468: PPUSH
35469: LD_STRING PlantMine
35471: PPUSH
35472: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35476: LD_VAR 0 2
35480: PPUSH
35481: LD_VAR 0 3
35485: PPUSH
35486: LD_VAR 0 1
35490: PPUSH
35491: CALL_OW 255
35495: PPUSH
35496: LD_INT 0
35498: PPUSH
35499: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35503: LD_ADDR_EXP 106
35507: PUSH
35508: LD_EXP 106
35512: PPUSH
35513: LD_VAR 0 5
35517: PUSH
35518: LD_EXP 106
35522: PUSH
35523: LD_VAR 0 5
35527: ARRAY
35528: PUSH
35529: LD_INT 1
35531: PLUS
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PPUSH
35537: LD_VAR 0 2
35541: PUSH
35542: LD_VAR 0 3
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PPUSH
35551: CALL 41737 0 3
35555: ST_TO_ADDR
// result := true ;
35556: LD_ADDR_VAR 0 4
35560: PUSH
35561: LD_INT 1
35563: ST_TO_ADDR
// end ;
35564: LD_VAR 0 4
35568: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35569: LD_INT 0
35571: PPUSH
35572: PPUSH
35573: PPUSH
// if not unit in minersList then
35574: LD_VAR 0 1
35578: PUSH
35579: LD_EXP 105
35583: IN
35584: NOT
35585: IFFALSE 35589
// exit ;
35587: GO 35981
// index := GetElementIndex ( minersList , unit ) ;
35589: LD_ADDR_VAR 0 6
35593: PUSH
35594: LD_EXP 105
35598: PPUSH
35599: LD_VAR 0 1
35603: PPUSH
35604: CALL 41522 0 2
35608: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35609: LD_ADDR_VAR 0 5
35613: PUSH
35614: DOUBLE
35615: LD_EXP 106
35619: PUSH
35620: LD_VAR 0 6
35624: ARRAY
35625: INC
35626: ST_TO_ADDR
35627: LD_INT 1
35629: PUSH
35630: FOR_DOWNTO
35631: IFFALSE 35792
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35633: LD_EXP 106
35637: PUSH
35638: LD_VAR 0 6
35642: ARRAY
35643: PUSH
35644: LD_VAR 0 5
35648: ARRAY
35649: PUSH
35650: LD_INT 1
35652: ARRAY
35653: PUSH
35654: LD_VAR 0 2
35658: EQUAL
35659: PUSH
35660: LD_EXP 106
35664: PUSH
35665: LD_VAR 0 6
35669: ARRAY
35670: PUSH
35671: LD_VAR 0 5
35675: ARRAY
35676: PUSH
35677: LD_INT 2
35679: ARRAY
35680: PUSH
35681: LD_VAR 0 3
35685: EQUAL
35686: AND
35687: IFFALSE 35790
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35689: LD_EXP 106
35693: PUSH
35694: LD_VAR 0 6
35698: ARRAY
35699: PUSH
35700: LD_VAR 0 5
35704: ARRAY
35705: PUSH
35706: LD_INT 1
35708: ARRAY
35709: PPUSH
35710: LD_EXP 106
35714: PUSH
35715: LD_VAR 0 6
35719: ARRAY
35720: PUSH
35721: LD_VAR 0 5
35725: ARRAY
35726: PUSH
35727: LD_INT 2
35729: ARRAY
35730: PPUSH
35731: LD_VAR 0 1
35735: PPUSH
35736: CALL_OW 255
35740: PPUSH
35741: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35745: LD_ADDR_EXP 106
35749: PUSH
35750: LD_EXP 106
35754: PPUSH
35755: LD_VAR 0 6
35759: PPUSH
35760: LD_EXP 106
35764: PUSH
35765: LD_VAR 0 6
35769: ARRAY
35770: PPUSH
35771: LD_VAR 0 5
35775: PPUSH
35776: CALL_OW 3
35780: PPUSH
35781: CALL_OW 1
35785: ST_TO_ADDR
// exit ;
35786: POP
35787: POP
35788: GO 35981
// end ; end ;
35790: GO 35630
35792: POP
35793: POP
// for i := minerMinesList [ index ] downto 1 do
35794: LD_ADDR_VAR 0 5
35798: PUSH
35799: DOUBLE
35800: LD_EXP 106
35804: PUSH
35805: LD_VAR 0 6
35809: ARRAY
35810: INC
35811: ST_TO_ADDR
35812: LD_INT 1
35814: PUSH
35815: FOR_DOWNTO
35816: IFFALSE 35979
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35818: LD_EXP 106
35822: PUSH
35823: LD_VAR 0 6
35827: ARRAY
35828: PUSH
35829: LD_VAR 0 5
35833: ARRAY
35834: PUSH
35835: LD_INT 1
35837: ARRAY
35838: PPUSH
35839: LD_EXP 106
35843: PUSH
35844: LD_VAR 0 6
35848: ARRAY
35849: PUSH
35850: LD_VAR 0 5
35854: ARRAY
35855: PUSH
35856: LD_INT 2
35858: ARRAY
35859: PPUSH
35860: LD_VAR 0 2
35864: PPUSH
35865: LD_VAR 0 3
35869: PPUSH
35870: CALL_OW 298
35874: PUSH
35875: LD_INT 6
35877: LESS
35878: IFFALSE 35977
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35880: LD_EXP 106
35884: PUSH
35885: LD_VAR 0 6
35889: ARRAY
35890: PUSH
35891: LD_VAR 0 5
35895: ARRAY
35896: PUSH
35897: LD_INT 1
35899: ARRAY
35900: PPUSH
35901: LD_EXP 106
35905: PUSH
35906: LD_VAR 0 6
35910: ARRAY
35911: PUSH
35912: LD_VAR 0 5
35916: ARRAY
35917: PUSH
35918: LD_INT 2
35920: ARRAY
35921: PPUSH
35922: LD_VAR 0 1
35926: PPUSH
35927: CALL_OW 255
35931: PPUSH
35932: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35936: LD_ADDR_EXP 106
35940: PUSH
35941: LD_EXP 106
35945: PPUSH
35946: LD_VAR 0 6
35950: PPUSH
35951: LD_EXP 106
35955: PUSH
35956: LD_VAR 0 6
35960: ARRAY
35961: PPUSH
35962: LD_VAR 0 5
35966: PPUSH
35967: CALL_OW 3
35971: PPUSH
35972: CALL_OW 1
35976: ST_TO_ADDR
// end ; end ;
35977: GO 35815
35979: POP
35980: POP
// end ;
35981: LD_VAR 0 4
35985: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35986: LD_INT 0
35988: PPUSH
35989: PPUSH
35990: PPUSH
35991: PPUSH
35992: PPUSH
35993: PPUSH
35994: PPUSH
35995: PPUSH
35996: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35997: LD_VAR 0 1
36001: PPUSH
36002: CALL_OW 264
36006: PUSH
36007: LD_INT 81
36009: EQUAL
36010: NOT
36011: PUSH
36012: LD_VAR 0 1
36016: PUSH
36017: LD_EXP 105
36021: IN
36022: NOT
36023: OR
36024: IFFALSE 36028
// exit ;
36026: GO 36350
// index := GetElementIndex ( minersList , unit ) ;
36028: LD_ADDR_VAR 0 6
36032: PUSH
36033: LD_EXP 105
36037: PPUSH
36038: LD_VAR 0 1
36042: PPUSH
36043: CALL 41522 0 2
36047: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36048: LD_ADDR_VAR 0 8
36052: PUSH
36053: LD_EXP 107
36057: PUSH
36058: LD_EXP 106
36062: PUSH
36063: LD_VAR 0 6
36067: ARRAY
36068: MINUS
36069: ST_TO_ADDR
// if not minesFreeAmount then
36070: LD_VAR 0 8
36074: NOT
36075: IFFALSE 36079
// exit ;
36077: GO 36350
// tmp := [ ] ;
36079: LD_ADDR_VAR 0 7
36083: PUSH
36084: EMPTY
36085: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36086: LD_ADDR_VAR 0 5
36090: PUSH
36091: DOUBLE
36092: LD_INT 1
36094: DEC
36095: ST_TO_ADDR
36096: LD_VAR 0 8
36100: PUSH
36101: FOR_TO
36102: IFFALSE 36297
// begin _d := rand ( 0 , 5 ) ;
36104: LD_ADDR_VAR 0 11
36108: PUSH
36109: LD_INT 0
36111: PPUSH
36112: LD_INT 5
36114: PPUSH
36115: CALL_OW 12
36119: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36120: LD_ADDR_VAR 0 12
36124: PUSH
36125: LD_INT 2
36127: PPUSH
36128: LD_INT 6
36130: PPUSH
36131: CALL_OW 12
36135: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36136: LD_ADDR_VAR 0 9
36140: PUSH
36141: LD_VAR 0 2
36145: PPUSH
36146: LD_VAR 0 11
36150: PPUSH
36151: LD_VAR 0 12
36155: PPUSH
36156: CALL_OW 272
36160: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36161: LD_ADDR_VAR 0 10
36165: PUSH
36166: LD_VAR 0 3
36170: PPUSH
36171: LD_VAR 0 11
36175: PPUSH
36176: LD_VAR 0 12
36180: PPUSH
36181: CALL_OW 273
36185: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36186: LD_VAR 0 9
36190: PPUSH
36191: LD_VAR 0 10
36195: PPUSH
36196: CALL_OW 488
36200: PUSH
36201: LD_VAR 0 9
36205: PUSH
36206: LD_VAR 0 10
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_VAR 0 7
36219: IN
36220: NOT
36221: AND
36222: PUSH
36223: LD_VAR 0 9
36227: PPUSH
36228: LD_VAR 0 10
36232: PPUSH
36233: CALL_OW 458
36237: NOT
36238: AND
36239: IFFALSE 36281
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36241: LD_ADDR_VAR 0 7
36245: PUSH
36246: LD_VAR 0 7
36250: PPUSH
36251: LD_VAR 0 7
36255: PUSH
36256: LD_INT 1
36258: PLUS
36259: PPUSH
36260: LD_VAR 0 9
36264: PUSH
36265: LD_VAR 0 10
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PPUSH
36274: CALL_OW 1
36278: ST_TO_ADDR
36279: GO 36295
// i := i - 1 ;
36281: LD_ADDR_VAR 0 5
36285: PUSH
36286: LD_VAR 0 5
36290: PUSH
36291: LD_INT 1
36293: MINUS
36294: ST_TO_ADDR
// end ;
36295: GO 36101
36297: POP
36298: POP
// for i in tmp do
36299: LD_ADDR_VAR 0 5
36303: PUSH
36304: LD_VAR 0 7
36308: PUSH
36309: FOR_IN
36310: IFFALSE 36348
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36312: LD_VAR 0 1
36316: PPUSH
36317: LD_VAR 0 5
36321: PUSH
36322: LD_INT 1
36324: ARRAY
36325: PPUSH
36326: LD_VAR 0 5
36330: PUSH
36331: LD_INT 2
36333: ARRAY
36334: PPUSH
36335: CALL 35294 0 3
36339: NOT
36340: IFFALSE 36346
// exit ;
36342: POP
36343: POP
36344: GO 36350
36346: GO 36309
36348: POP
36349: POP
// end ;
36350: LD_VAR 0 4
36354: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36355: LD_INT 0
36357: PPUSH
36358: PPUSH
36359: PPUSH
36360: PPUSH
36361: PPUSH
36362: PPUSH
36363: PPUSH
// if not GetClass ( unit ) = class_sniper then
36364: LD_VAR 0 1
36368: PPUSH
36369: CALL_OW 257
36373: PUSH
36374: LD_INT 5
36376: EQUAL
36377: NOT
36378: IFFALSE 36382
// exit ;
36380: GO 36770
// dist := 8 ;
36382: LD_ADDR_VAR 0 5
36386: PUSH
36387: LD_INT 8
36389: ST_TO_ADDR
// viewRange := 12 ;
36390: LD_ADDR_VAR 0 7
36394: PUSH
36395: LD_INT 12
36397: ST_TO_ADDR
// side := GetSide ( unit ) ;
36398: LD_ADDR_VAR 0 6
36402: PUSH
36403: LD_VAR 0 1
36407: PPUSH
36408: CALL_OW 255
36412: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36413: LD_INT 61
36415: PPUSH
36416: LD_VAR 0 6
36420: PPUSH
36421: CALL_OW 321
36425: PUSH
36426: LD_INT 2
36428: EQUAL
36429: IFFALSE 36439
// viewRange := 16 ;
36431: LD_ADDR_VAR 0 7
36435: PUSH
36436: LD_INT 16
36438: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36439: LD_VAR 0 1
36443: PPUSH
36444: LD_VAR 0 2
36448: PPUSH
36449: LD_VAR 0 3
36453: PPUSH
36454: CALL_OW 297
36458: PUSH
36459: LD_VAR 0 5
36463: GREATER
36464: IFFALSE 36543
// begin ComMoveXY ( unit , x , y ) ;
36466: LD_VAR 0 1
36470: PPUSH
36471: LD_VAR 0 2
36475: PPUSH
36476: LD_VAR 0 3
36480: PPUSH
36481: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36485: LD_INT 35
36487: PPUSH
36488: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36492: LD_VAR 0 1
36496: PPUSH
36497: LD_VAR 0 2
36501: PPUSH
36502: LD_VAR 0 3
36506: PPUSH
36507: CALL 72877 0 3
36511: NOT
36512: IFFALSE 36516
// exit ;
36514: GO 36770
// until GetDistUnitXY ( unit , x , y ) < dist ;
36516: LD_VAR 0 1
36520: PPUSH
36521: LD_VAR 0 2
36525: PPUSH
36526: LD_VAR 0 3
36530: PPUSH
36531: CALL_OW 297
36535: PUSH
36536: LD_VAR 0 5
36540: LESS
36541: IFFALSE 36485
// end ; ComTurnXY ( unit , x , y ) ;
36543: LD_VAR 0 1
36547: PPUSH
36548: LD_VAR 0 2
36552: PPUSH
36553: LD_VAR 0 3
36557: PPUSH
36558: CALL_OW 118
// wait ( 5 ) ;
36562: LD_INT 5
36564: PPUSH
36565: CALL_OW 67
// _d := GetDir ( unit ) ;
36569: LD_ADDR_VAR 0 10
36573: PUSH
36574: LD_VAR 0 1
36578: PPUSH
36579: CALL_OW 254
36583: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36584: LD_ADDR_VAR 0 8
36588: PUSH
36589: LD_VAR 0 1
36593: PPUSH
36594: CALL_OW 250
36598: PPUSH
36599: LD_VAR 0 10
36603: PPUSH
36604: LD_VAR 0 5
36608: PPUSH
36609: CALL_OW 272
36613: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36614: LD_ADDR_VAR 0 9
36618: PUSH
36619: LD_VAR 0 1
36623: PPUSH
36624: CALL_OW 251
36628: PPUSH
36629: LD_VAR 0 10
36633: PPUSH
36634: LD_VAR 0 5
36638: PPUSH
36639: CALL_OW 273
36643: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36644: LD_VAR 0 8
36648: PPUSH
36649: LD_VAR 0 9
36653: PPUSH
36654: CALL_OW 488
36658: NOT
36659: IFFALSE 36663
// exit ;
36661: GO 36770
// ComAnimCustom ( unit , 1 ) ;
36663: LD_VAR 0 1
36667: PPUSH
36668: LD_INT 1
36670: PPUSH
36671: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36675: LD_VAR 0 8
36679: PPUSH
36680: LD_VAR 0 9
36684: PPUSH
36685: LD_VAR 0 6
36689: PPUSH
36690: LD_VAR 0 7
36694: PPUSH
36695: CALL_OW 330
// repeat wait ( 1 ) ;
36699: LD_INT 1
36701: PPUSH
36702: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36706: LD_VAR 0 1
36710: PPUSH
36711: CALL_OW 316
36715: PUSH
36716: LD_VAR 0 1
36720: PPUSH
36721: CALL_OW 314
36725: OR
36726: PUSH
36727: LD_VAR 0 1
36731: PPUSH
36732: CALL_OW 302
36736: NOT
36737: OR
36738: PUSH
36739: LD_VAR 0 1
36743: PPUSH
36744: CALL_OW 301
36748: OR
36749: IFFALSE 36699
// RemoveSeeing ( _x , _y , side ) ;
36751: LD_VAR 0 8
36755: PPUSH
36756: LD_VAR 0 9
36760: PPUSH
36761: LD_VAR 0 6
36765: PPUSH
36766: CALL_OW 331
// end ; end_of_file
36770: LD_VAR 0 4
36774: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36775: LD_INT 0
36777: PPUSH
36778: PPUSH
// if exist_mode then
36779: LD_VAR 0 2
36783: IFFALSE 36808
// unit := CreateCharacter ( prefix & ident ) else
36785: LD_ADDR_VAR 0 5
36789: PUSH
36790: LD_VAR 0 3
36794: PUSH
36795: LD_VAR 0 1
36799: STR
36800: PPUSH
36801: CALL_OW 34
36805: ST_TO_ADDR
36806: GO 36823
// unit := NewCharacter ( ident ) ;
36808: LD_ADDR_VAR 0 5
36812: PUSH
36813: LD_VAR 0 1
36817: PPUSH
36818: CALL_OW 25
36822: ST_TO_ADDR
// result := unit ;
36823: LD_ADDR_VAR 0 4
36827: PUSH
36828: LD_VAR 0 5
36832: ST_TO_ADDR
// end ;
36833: LD_VAR 0 4
36837: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36838: LD_INT 0
36840: PPUSH
36841: PPUSH
// if not side or not nation then
36842: LD_VAR 0 1
36846: NOT
36847: PUSH
36848: LD_VAR 0 2
36852: NOT
36853: OR
36854: IFFALSE 36858
// exit ;
36856: GO 37626
// case nation of nation_american :
36858: LD_VAR 0 2
36862: PUSH
36863: LD_INT 1
36865: DOUBLE
36866: EQUAL
36867: IFTRUE 36871
36869: GO 37085
36871: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36872: LD_ADDR_VAR 0 4
36876: PUSH
36877: LD_INT 35
36879: PUSH
36880: LD_INT 45
36882: PUSH
36883: LD_INT 46
36885: PUSH
36886: LD_INT 47
36888: PUSH
36889: LD_INT 82
36891: PUSH
36892: LD_INT 83
36894: PUSH
36895: LD_INT 84
36897: PUSH
36898: LD_INT 85
36900: PUSH
36901: LD_INT 86
36903: PUSH
36904: LD_INT 1
36906: PUSH
36907: LD_INT 2
36909: PUSH
36910: LD_INT 6
36912: PUSH
36913: LD_INT 15
36915: PUSH
36916: LD_INT 16
36918: PUSH
36919: LD_INT 7
36921: PUSH
36922: LD_INT 12
36924: PUSH
36925: LD_INT 13
36927: PUSH
36928: LD_INT 10
36930: PUSH
36931: LD_INT 14
36933: PUSH
36934: LD_INT 20
36936: PUSH
36937: LD_INT 21
36939: PUSH
36940: LD_INT 22
36942: PUSH
36943: LD_INT 25
36945: PUSH
36946: LD_INT 32
36948: PUSH
36949: LD_INT 27
36951: PUSH
36952: LD_INT 36
36954: PUSH
36955: LD_INT 69
36957: PUSH
36958: LD_INT 39
36960: PUSH
36961: LD_INT 34
36963: PUSH
36964: LD_INT 40
36966: PUSH
36967: LD_INT 48
36969: PUSH
36970: LD_INT 49
36972: PUSH
36973: LD_INT 50
36975: PUSH
36976: LD_INT 51
36978: PUSH
36979: LD_INT 52
36981: PUSH
36982: LD_INT 53
36984: PUSH
36985: LD_INT 54
36987: PUSH
36988: LD_INT 55
36990: PUSH
36991: LD_INT 56
36993: PUSH
36994: LD_INT 57
36996: PUSH
36997: LD_INT 58
36999: PUSH
37000: LD_INT 59
37002: PUSH
37003: LD_INT 60
37005: PUSH
37006: LD_INT 61
37008: PUSH
37009: LD_INT 62
37011: PUSH
37012: LD_INT 80
37014: PUSH
37015: LD_INT 82
37017: PUSH
37018: LD_INT 83
37020: PUSH
37021: LD_INT 84
37023: PUSH
37024: LD_INT 85
37026: PUSH
37027: LD_INT 86
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: ST_TO_ADDR
37083: GO 37550
37085: LD_INT 2
37087: DOUBLE
37088: EQUAL
37089: IFTRUE 37093
37091: GO 37319
37093: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37094: LD_ADDR_VAR 0 4
37098: PUSH
37099: LD_INT 35
37101: PUSH
37102: LD_INT 45
37104: PUSH
37105: LD_INT 46
37107: PUSH
37108: LD_INT 47
37110: PUSH
37111: LD_INT 82
37113: PUSH
37114: LD_INT 83
37116: PUSH
37117: LD_INT 84
37119: PUSH
37120: LD_INT 85
37122: PUSH
37123: LD_INT 87
37125: PUSH
37126: LD_INT 70
37128: PUSH
37129: LD_INT 1
37131: PUSH
37132: LD_INT 11
37134: PUSH
37135: LD_INT 3
37137: PUSH
37138: LD_INT 4
37140: PUSH
37141: LD_INT 5
37143: PUSH
37144: LD_INT 6
37146: PUSH
37147: LD_INT 15
37149: PUSH
37150: LD_INT 18
37152: PUSH
37153: LD_INT 7
37155: PUSH
37156: LD_INT 17
37158: PUSH
37159: LD_INT 8
37161: PUSH
37162: LD_INT 20
37164: PUSH
37165: LD_INT 21
37167: PUSH
37168: LD_INT 22
37170: PUSH
37171: LD_INT 72
37173: PUSH
37174: LD_INT 26
37176: PUSH
37177: LD_INT 69
37179: PUSH
37180: LD_INT 39
37182: PUSH
37183: LD_INT 40
37185: PUSH
37186: LD_INT 41
37188: PUSH
37189: LD_INT 42
37191: PUSH
37192: LD_INT 43
37194: PUSH
37195: LD_INT 48
37197: PUSH
37198: LD_INT 49
37200: PUSH
37201: LD_INT 50
37203: PUSH
37204: LD_INT 51
37206: PUSH
37207: LD_INT 52
37209: PUSH
37210: LD_INT 53
37212: PUSH
37213: LD_INT 54
37215: PUSH
37216: LD_INT 55
37218: PUSH
37219: LD_INT 56
37221: PUSH
37222: LD_INT 60
37224: PUSH
37225: LD_INT 61
37227: PUSH
37228: LD_INT 62
37230: PUSH
37231: LD_INT 66
37233: PUSH
37234: LD_INT 67
37236: PUSH
37237: LD_INT 68
37239: PUSH
37240: LD_INT 81
37242: PUSH
37243: LD_INT 82
37245: PUSH
37246: LD_INT 83
37248: PUSH
37249: LD_INT 84
37251: PUSH
37252: LD_INT 85
37254: PUSH
37255: LD_INT 87
37257: PUSH
37258: LD_INT 88
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: ST_TO_ADDR
37317: GO 37550
37319: LD_INT 3
37321: DOUBLE
37322: EQUAL
37323: IFTRUE 37327
37325: GO 37549
37327: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37328: LD_ADDR_VAR 0 4
37332: PUSH
37333: LD_INT 46
37335: PUSH
37336: LD_INT 47
37338: PUSH
37339: LD_INT 1
37341: PUSH
37342: LD_INT 2
37344: PUSH
37345: LD_INT 82
37347: PUSH
37348: LD_INT 83
37350: PUSH
37351: LD_INT 84
37353: PUSH
37354: LD_INT 85
37356: PUSH
37357: LD_INT 86
37359: PUSH
37360: LD_INT 11
37362: PUSH
37363: LD_INT 9
37365: PUSH
37366: LD_INT 20
37368: PUSH
37369: LD_INT 19
37371: PUSH
37372: LD_INT 21
37374: PUSH
37375: LD_INT 24
37377: PUSH
37378: LD_INT 22
37380: PUSH
37381: LD_INT 25
37383: PUSH
37384: LD_INT 28
37386: PUSH
37387: LD_INT 29
37389: PUSH
37390: LD_INT 30
37392: PUSH
37393: LD_INT 31
37395: PUSH
37396: LD_INT 37
37398: PUSH
37399: LD_INT 38
37401: PUSH
37402: LD_INT 32
37404: PUSH
37405: LD_INT 27
37407: PUSH
37408: LD_INT 33
37410: PUSH
37411: LD_INT 69
37413: PUSH
37414: LD_INT 39
37416: PUSH
37417: LD_INT 34
37419: PUSH
37420: LD_INT 40
37422: PUSH
37423: LD_INT 71
37425: PUSH
37426: LD_INT 23
37428: PUSH
37429: LD_INT 44
37431: PUSH
37432: LD_INT 48
37434: PUSH
37435: LD_INT 49
37437: PUSH
37438: LD_INT 50
37440: PUSH
37441: LD_INT 51
37443: PUSH
37444: LD_INT 52
37446: PUSH
37447: LD_INT 53
37449: PUSH
37450: LD_INT 54
37452: PUSH
37453: LD_INT 55
37455: PUSH
37456: LD_INT 56
37458: PUSH
37459: LD_INT 57
37461: PUSH
37462: LD_INT 58
37464: PUSH
37465: LD_INT 59
37467: PUSH
37468: LD_INT 63
37470: PUSH
37471: LD_INT 64
37473: PUSH
37474: LD_INT 65
37476: PUSH
37477: LD_INT 82
37479: PUSH
37480: LD_INT 83
37482: PUSH
37483: LD_INT 84
37485: PUSH
37486: LD_INT 85
37488: PUSH
37489: LD_INT 86
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: ST_TO_ADDR
37547: GO 37550
37549: POP
// if state > - 1 and state < 3 then
37550: LD_VAR 0 3
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: GREATER
37559: PUSH
37560: LD_VAR 0 3
37564: PUSH
37565: LD_INT 3
37567: LESS
37568: AND
37569: IFFALSE 37626
// for i in result do
37571: LD_ADDR_VAR 0 5
37575: PUSH
37576: LD_VAR 0 4
37580: PUSH
37581: FOR_IN
37582: IFFALSE 37624
// if GetTech ( i , side ) <> state then
37584: LD_VAR 0 5
37588: PPUSH
37589: LD_VAR 0 1
37593: PPUSH
37594: CALL_OW 321
37598: PUSH
37599: LD_VAR 0 3
37603: NONEQUAL
37604: IFFALSE 37622
// result := result diff i ;
37606: LD_ADDR_VAR 0 4
37610: PUSH
37611: LD_VAR 0 4
37615: PUSH
37616: LD_VAR 0 5
37620: DIFF
37621: ST_TO_ADDR
37622: GO 37581
37624: POP
37625: POP
// end ;
37626: LD_VAR 0 4
37630: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37631: LD_INT 0
37633: PPUSH
37634: PPUSH
37635: PPUSH
// result := true ;
37636: LD_ADDR_VAR 0 3
37640: PUSH
37641: LD_INT 1
37643: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37644: LD_ADDR_VAR 0 5
37648: PUSH
37649: LD_VAR 0 2
37653: PPUSH
37654: CALL_OW 480
37658: ST_TO_ADDR
// if not tmp then
37659: LD_VAR 0 5
37663: NOT
37664: IFFALSE 37668
// exit ;
37666: GO 37717
// for i in tmp do
37668: LD_ADDR_VAR 0 4
37672: PUSH
37673: LD_VAR 0 5
37677: PUSH
37678: FOR_IN
37679: IFFALSE 37715
// if GetTech ( i , side ) <> state_researched then
37681: LD_VAR 0 4
37685: PPUSH
37686: LD_VAR 0 1
37690: PPUSH
37691: CALL_OW 321
37695: PUSH
37696: LD_INT 2
37698: NONEQUAL
37699: IFFALSE 37713
// begin result := false ;
37701: LD_ADDR_VAR 0 3
37705: PUSH
37706: LD_INT 0
37708: ST_TO_ADDR
// exit ;
37709: POP
37710: POP
37711: GO 37717
// end ;
37713: GO 37678
37715: POP
37716: POP
// end ;
37717: LD_VAR 0 3
37721: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37722: LD_INT 0
37724: PPUSH
37725: PPUSH
37726: PPUSH
37727: PPUSH
37728: PPUSH
37729: PPUSH
37730: PPUSH
37731: PPUSH
37732: PPUSH
37733: PPUSH
37734: PPUSH
37735: PPUSH
37736: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37737: LD_VAR 0 1
37741: NOT
37742: PUSH
37743: LD_VAR 0 1
37747: PPUSH
37748: CALL_OW 257
37752: PUSH
37753: LD_INT 9
37755: NONEQUAL
37756: OR
37757: IFFALSE 37761
// exit ;
37759: GO 38334
// side := GetSide ( unit ) ;
37761: LD_ADDR_VAR 0 9
37765: PUSH
37766: LD_VAR 0 1
37770: PPUSH
37771: CALL_OW 255
37775: ST_TO_ADDR
// tech_space := tech_spacanom ;
37776: LD_ADDR_VAR 0 12
37780: PUSH
37781: LD_INT 29
37783: ST_TO_ADDR
// tech_time := tech_taurad ;
37784: LD_ADDR_VAR 0 13
37788: PUSH
37789: LD_INT 28
37791: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37792: LD_ADDR_VAR 0 11
37796: PUSH
37797: LD_VAR 0 1
37801: PPUSH
37802: CALL_OW 310
37806: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37807: LD_VAR 0 11
37811: PPUSH
37812: CALL_OW 247
37816: PUSH
37817: LD_INT 2
37819: EQUAL
37820: IFFALSE 37824
// exit ;
37822: GO 38334
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37824: LD_ADDR_VAR 0 8
37828: PUSH
37829: LD_INT 81
37831: PUSH
37832: LD_VAR 0 9
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 3
37843: PUSH
37844: LD_INT 21
37846: PUSH
37847: LD_INT 3
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PPUSH
37862: CALL_OW 69
37866: ST_TO_ADDR
// if not tmp then
37867: LD_VAR 0 8
37871: NOT
37872: IFFALSE 37876
// exit ;
37874: GO 38334
// if in_unit then
37876: LD_VAR 0 11
37880: IFFALSE 37904
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37882: LD_ADDR_VAR 0 10
37886: PUSH
37887: LD_VAR 0 8
37891: PPUSH
37892: LD_VAR 0 11
37896: PPUSH
37897: CALL_OW 74
37901: ST_TO_ADDR
37902: GO 37924
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37904: LD_ADDR_VAR 0 10
37908: PUSH
37909: LD_VAR 0 8
37913: PPUSH
37914: LD_VAR 0 1
37918: PPUSH
37919: CALL_OW 74
37923: ST_TO_ADDR
// if not enemy then
37924: LD_VAR 0 10
37928: NOT
37929: IFFALSE 37933
// exit ;
37931: GO 38334
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37933: LD_VAR 0 11
37937: PUSH
37938: LD_VAR 0 11
37942: PPUSH
37943: LD_VAR 0 10
37947: PPUSH
37948: CALL_OW 296
37952: PUSH
37953: LD_INT 13
37955: GREATER
37956: AND
37957: PUSH
37958: LD_VAR 0 1
37962: PPUSH
37963: LD_VAR 0 10
37967: PPUSH
37968: CALL_OW 296
37972: PUSH
37973: LD_INT 12
37975: GREATER
37976: OR
37977: IFFALSE 37981
// exit ;
37979: GO 38334
// missile := [ 1 ] ;
37981: LD_ADDR_VAR 0 14
37985: PUSH
37986: LD_INT 1
37988: PUSH
37989: EMPTY
37990: LIST
37991: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37992: LD_VAR 0 9
37996: PPUSH
37997: LD_VAR 0 12
38001: PPUSH
38002: CALL_OW 325
38006: IFFALSE 38035
// missile := Replace ( missile , missile + 1 , 2 ) ;
38008: LD_ADDR_VAR 0 14
38012: PUSH
38013: LD_VAR 0 14
38017: PPUSH
38018: LD_VAR 0 14
38022: PUSH
38023: LD_INT 1
38025: PLUS
38026: PPUSH
38027: LD_INT 2
38029: PPUSH
38030: CALL_OW 1
38034: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38035: LD_VAR 0 9
38039: PPUSH
38040: LD_VAR 0 13
38044: PPUSH
38045: CALL_OW 325
38049: PUSH
38050: LD_VAR 0 10
38054: PPUSH
38055: CALL_OW 255
38059: PPUSH
38060: LD_VAR 0 13
38064: PPUSH
38065: CALL_OW 325
38069: NOT
38070: AND
38071: IFFALSE 38100
// missile := Replace ( missile , missile + 1 , 3 ) ;
38073: LD_ADDR_VAR 0 14
38077: PUSH
38078: LD_VAR 0 14
38082: PPUSH
38083: LD_VAR 0 14
38087: PUSH
38088: LD_INT 1
38090: PLUS
38091: PPUSH
38092: LD_INT 3
38094: PPUSH
38095: CALL_OW 1
38099: ST_TO_ADDR
// if missile < 2 then
38100: LD_VAR 0 14
38104: PUSH
38105: LD_INT 2
38107: LESS
38108: IFFALSE 38112
// exit ;
38110: GO 38334
// x := GetX ( enemy ) ;
38112: LD_ADDR_VAR 0 4
38116: PUSH
38117: LD_VAR 0 10
38121: PPUSH
38122: CALL_OW 250
38126: ST_TO_ADDR
// y := GetY ( enemy ) ;
38127: LD_ADDR_VAR 0 5
38131: PUSH
38132: LD_VAR 0 10
38136: PPUSH
38137: CALL_OW 251
38141: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38142: LD_ADDR_VAR 0 6
38146: PUSH
38147: LD_VAR 0 4
38151: PUSH
38152: LD_INT 1
38154: NEG
38155: PPUSH
38156: LD_INT 1
38158: PPUSH
38159: CALL_OW 12
38163: PLUS
38164: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38165: LD_ADDR_VAR 0 7
38169: PUSH
38170: LD_VAR 0 5
38174: PUSH
38175: LD_INT 1
38177: NEG
38178: PPUSH
38179: LD_INT 1
38181: PPUSH
38182: CALL_OW 12
38186: PLUS
38187: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38188: LD_VAR 0 6
38192: PPUSH
38193: LD_VAR 0 7
38197: PPUSH
38198: CALL_OW 488
38202: NOT
38203: IFFALSE 38225
// begin _x := x ;
38205: LD_ADDR_VAR 0 6
38209: PUSH
38210: LD_VAR 0 4
38214: ST_TO_ADDR
// _y := y ;
38215: LD_ADDR_VAR 0 7
38219: PUSH
38220: LD_VAR 0 5
38224: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38225: LD_ADDR_VAR 0 3
38229: PUSH
38230: LD_INT 1
38232: PPUSH
38233: LD_VAR 0 14
38237: PPUSH
38238: CALL_OW 12
38242: ST_TO_ADDR
// case i of 1 :
38243: LD_VAR 0 3
38247: PUSH
38248: LD_INT 1
38250: DOUBLE
38251: EQUAL
38252: IFTRUE 38256
38254: GO 38273
38256: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38257: LD_VAR 0 1
38261: PPUSH
38262: LD_VAR 0 10
38266: PPUSH
38267: CALL_OW 115
38271: GO 38334
38273: LD_INT 2
38275: DOUBLE
38276: EQUAL
38277: IFTRUE 38281
38279: GO 38303
38281: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38282: LD_VAR 0 1
38286: PPUSH
38287: LD_VAR 0 6
38291: PPUSH
38292: LD_VAR 0 7
38296: PPUSH
38297: CALL_OW 153
38301: GO 38334
38303: LD_INT 3
38305: DOUBLE
38306: EQUAL
38307: IFTRUE 38311
38309: GO 38333
38311: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38312: LD_VAR 0 1
38316: PPUSH
38317: LD_VAR 0 6
38321: PPUSH
38322: LD_VAR 0 7
38326: PPUSH
38327: CALL_OW 154
38331: GO 38334
38333: POP
// end ;
38334: LD_VAR 0 2
38338: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38339: LD_INT 0
38341: PPUSH
38342: PPUSH
38343: PPUSH
38344: PPUSH
38345: PPUSH
38346: PPUSH
// if not unit or not building then
38347: LD_VAR 0 1
38351: NOT
38352: PUSH
38353: LD_VAR 0 2
38357: NOT
38358: OR
38359: IFFALSE 38363
// exit ;
38361: GO 38521
// x := GetX ( building ) ;
38363: LD_ADDR_VAR 0 5
38367: PUSH
38368: LD_VAR 0 2
38372: PPUSH
38373: CALL_OW 250
38377: ST_TO_ADDR
// y := GetY ( building ) ;
38378: LD_ADDR_VAR 0 6
38382: PUSH
38383: LD_VAR 0 2
38387: PPUSH
38388: CALL_OW 251
38392: ST_TO_ADDR
// for i = 0 to 5 do
38393: LD_ADDR_VAR 0 4
38397: PUSH
38398: DOUBLE
38399: LD_INT 0
38401: DEC
38402: ST_TO_ADDR
38403: LD_INT 5
38405: PUSH
38406: FOR_TO
38407: IFFALSE 38519
// begin _x := ShiftX ( x , i , 3 ) ;
38409: LD_ADDR_VAR 0 7
38413: PUSH
38414: LD_VAR 0 5
38418: PPUSH
38419: LD_VAR 0 4
38423: PPUSH
38424: LD_INT 3
38426: PPUSH
38427: CALL_OW 272
38431: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38432: LD_ADDR_VAR 0 8
38436: PUSH
38437: LD_VAR 0 6
38441: PPUSH
38442: LD_VAR 0 4
38446: PPUSH
38447: LD_INT 3
38449: PPUSH
38450: CALL_OW 273
38454: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38455: LD_VAR 0 7
38459: PPUSH
38460: LD_VAR 0 8
38464: PPUSH
38465: CALL_OW 488
38469: NOT
38470: IFFALSE 38474
// continue ;
38472: GO 38406
// if HexInfo ( _x , _y ) = 0 then
38474: LD_VAR 0 7
38478: PPUSH
38479: LD_VAR 0 8
38483: PPUSH
38484: CALL_OW 428
38488: PUSH
38489: LD_INT 0
38491: EQUAL
38492: IFFALSE 38517
// begin ComMoveXY ( unit , _x , _y ) ;
38494: LD_VAR 0 1
38498: PPUSH
38499: LD_VAR 0 7
38503: PPUSH
38504: LD_VAR 0 8
38508: PPUSH
38509: CALL_OW 111
// exit ;
38513: POP
38514: POP
38515: GO 38521
// end ; end ;
38517: GO 38406
38519: POP
38520: POP
// end ;
38521: LD_VAR 0 3
38525: RET
// export function ScanBase ( side , base_area ) ; begin
38526: LD_INT 0
38528: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38529: LD_ADDR_VAR 0 3
38533: PUSH
38534: LD_VAR 0 2
38538: PPUSH
38539: LD_INT 81
38541: PUSH
38542: LD_VAR 0 1
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PPUSH
38551: CALL_OW 70
38555: ST_TO_ADDR
// end ;
38556: LD_VAR 0 3
38560: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38561: LD_INT 0
38563: PPUSH
38564: PPUSH
38565: PPUSH
38566: PPUSH
// result := false ;
38567: LD_ADDR_VAR 0 2
38571: PUSH
38572: LD_INT 0
38574: ST_TO_ADDR
// side := GetSide ( unit ) ;
38575: LD_ADDR_VAR 0 3
38579: PUSH
38580: LD_VAR 0 1
38584: PPUSH
38585: CALL_OW 255
38589: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38590: LD_ADDR_VAR 0 4
38594: PUSH
38595: LD_VAR 0 1
38599: PPUSH
38600: CALL_OW 248
38604: ST_TO_ADDR
// case nat of 1 :
38605: LD_VAR 0 4
38609: PUSH
38610: LD_INT 1
38612: DOUBLE
38613: EQUAL
38614: IFTRUE 38618
38616: GO 38629
38618: POP
// tech := tech_lassight ; 2 :
38619: LD_ADDR_VAR 0 5
38623: PUSH
38624: LD_INT 12
38626: ST_TO_ADDR
38627: GO 38668
38629: LD_INT 2
38631: DOUBLE
38632: EQUAL
38633: IFTRUE 38637
38635: GO 38648
38637: POP
// tech := tech_mortar ; 3 :
38638: LD_ADDR_VAR 0 5
38642: PUSH
38643: LD_INT 41
38645: ST_TO_ADDR
38646: GO 38668
38648: LD_INT 3
38650: DOUBLE
38651: EQUAL
38652: IFTRUE 38656
38654: GO 38667
38656: POP
// tech := tech_bazooka ; end ;
38657: LD_ADDR_VAR 0 5
38661: PUSH
38662: LD_INT 44
38664: ST_TO_ADDR
38665: GO 38668
38667: POP
// if Researched ( side , tech ) then
38668: LD_VAR 0 3
38672: PPUSH
38673: LD_VAR 0 5
38677: PPUSH
38678: CALL_OW 325
38682: IFFALSE 38709
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38684: LD_ADDR_VAR 0 2
38688: PUSH
38689: LD_INT 5
38691: PUSH
38692: LD_INT 8
38694: PUSH
38695: LD_INT 9
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: LIST
38702: PUSH
38703: LD_VAR 0 4
38707: ARRAY
38708: ST_TO_ADDR
// end ;
38709: LD_VAR 0 2
38713: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38714: LD_INT 0
38716: PPUSH
38717: PPUSH
38718: PPUSH
// if not mines then
38719: LD_VAR 0 2
38723: NOT
38724: IFFALSE 38728
// exit ;
38726: GO 38872
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38728: LD_ADDR_VAR 0 5
38732: PUSH
38733: LD_INT 81
38735: PUSH
38736: LD_VAR 0 1
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 3
38747: PUSH
38748: LD_INT 21
38750: PUSH
38751: LD_INT 3
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PPUSH
38766: CALL_OW 69
38770: ST_TO_ADDR
// for i in mines do
38771: LD_ADDR_VAR 0 4
38775: PUSH
38776: LD_VAR 0 2
38780: PUSH
38781: FOR_IN
38782: IFFALSE 38870
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38784: LD_VAR 0 4
38788: PUSH
38789: LD_INT 1
38791: ARRAY
38792: PPUSH
38793: LD_VAR 0 4
38797: PUSH
38798: LD_INT 2
38800: ARRAY
38801: PPUSH
38802: CALL_OW 458
38806: NOT
38807: IFFALSE 38811
// continue ;
38809: GO 38781
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38811: LD_VAR 0 4
38815: PUSH
38816: LD_INT 1
38818: ARRAY
38819: PPUSH
38820: LD_VAR 0 4
38824: PUSH
38825: LD_INT 2
38827: ARRAY
38828: PPUSH
38829: CALL_OW 428
38833: PUSH
38834: LD_VAR 0 5
38838: IN
38839: IFFALSE 38868
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38841: LD_VAR 0 4
38845: PUSH
38846: LD_INT 1
38848: ARRAY
38849: PPUSH
38850: LD_VAR 0 4
38854: PUSH
38855: LD_INT 2
38857: ARRAY
38858: PPUSH
38859: LD_VAR 0 1
38863: PPUSH
38864: CALL_OW 456
// end ;
38868: GO 38781
38870: POP
38871: POP
// end ;
38872: LD_VAR 0 3
38876: RET
// export function Count ( array ) ; begin
38877: LD_INT 0
38879: PPUSH
// result := array + 0 ;
38880: LD_ADDR_VAR 0 2
38884: PUSH
38885: LD_VAR 0 1
38889: PUSH
38890: LD_INT 0
38892: PLUS
38893: ST_TO_ADDR
// end ;
38894: LD_VAR 0 2
38898: RET
// export function IsEmpty ( building ) ; begin
38899: LD_INT 0
38901: PPUSH
// if not building then
38902: LD_VAR 0 1
38906: NOT
38907: IFFALSE 38911
// exit ;
38909: GO 38954
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38911: LD_ADDR_VAR 0 2
38915: PUSH
38916: LD_VAR 0 1
38920: PUSH
38921: LD_INT 22
38923: PUSH
38924: LD_VAR 0 1
38928: PPUSH
38929: CALL_OW 255
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 58
38940: PUSH
38941: EMPTY
38942: LIST
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PPUSH
38948: CALL_OW 69
38952: IN
38953: ST_TO_ADDR
// end ;
38954: LD_VAR 0 2
38958: RET
// export function IsNotFull ( building ) ; var places ; begin
38959: LD_INT 0
38961: PPUSH
38962: PPUSH
// if not building then
38963: LD_VAR 0 1
38967: NOT
38968: IFFALSE 38972
// exit ;
38970: GO 39000
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
38972: LD_ADDR_VAR 0 2
38976: PUSH
38977: LD_VAR 0 1
38981: PPUSH
38982: LD_INT 3
38984: PUSH
38985: LD_INT 62
38987: PUSH
38988: EMPTY
38989: LIST
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PPUSH
38995: CALL_OW 72
38999: ST_TO_ADDR
// end ;
39000: LD_VAR 0 2
39004: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39005: LD_INT 0
39007: PPUSH
39008: PPUSH
39009: PPUSH
39010: PPUSH
// tmp := [ ] ;
39011: LD_ADDR_VAR 0 3
39015: PUSH
39016: EMPTY
39017: ST_TO_ADDR
// list := [ ] ;
39018: LD_ADDR_VAR 0 5
39022: PUSH
39023: EMPTY
39024: ST_TO_ADDR
// for i = 16 to 25 do
39025: LD_ADDR_VAR 0 4
39029: PUSH
39030: DOUBLE
39031: LD_INT 16
39033: DEC
39034: ST_TO_ADDR
39035: LD_INT 25
39037: PUSH
39038: FOR_TO
39039: IFFALSE 39112
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39041: LD_ADDR_VAR 0 3
39045: PUSH
39046: LD_VAR 0 3
39050: PUSH
39051: LD_INT 22
39053: PUSH
39054: LD_VAR 0 1
39058: PPUSH
39059: CALL_OW 255
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 91
39070: PUSH
39071: LD_VAR 0 1
39075: PUSH
39076: LD_INT 6
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 30
39086: PUSH
39087: LD_VAR 0 4
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: LIST
39100: PUSH
39101: EMPTY
39102: LIST
39103: PPUSH
39104: CALL_OW 69
39108: ADD
39109: ST_TO_ADDR
39110: GO 39038
39112: POP
39113: POP
// for i = 1 to tmp do
39114: LD_ADDR_VAR 0 4
39118: PUSH
39119: DOUBLE
39120: LD_INT 1
39122: DEC
39123: ST_TO_ADDR
39124: LD_VAR 0 3
39128: PUSH
39129: FOR_TO
39130: IFFALSE 39218
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39132: LD_ADDR_VAR 0 5
39136: PUSH
39137: LD_VAR 0 5
39141: PUSH
39142: LD_VAR 0 3
39146: PUSH
39147: LD_VAR 0 4
39151: ARRAY
39152: PPUSH
39153: CALL_OW 266
39157: PUSH
39158: LD_VAR 0 3
39162: PUSH
39163: LD_VAR 0 4
39167: ARRAY
39168: PPUSH
39169: CALL_OW 250
39173: PUSH
39174: LD_VAR 0 3
39178: PUSH
39179: LD_VAR 0 4
39183: ARRAY
39184: PPUSH
39185: CALL_OW 251
39189: PUSH
39190: LD_VAR 0 3
39194: PUSH
39195: LD_VAR 0 4
39199: ARRAY
39200: PPUSH
39201: CALL_OW 254
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: PUSH
39212: EMPTY
39213: LIST
39214: ADD
39215: ST_TO_ADDR
39216: GO 39129
39218: POP
39219: POP
// result := list ;
39220: LD_ADDR_VAR 0 2
39224: PUSH
39225: LD_VAR 0 5
39229: ST_TO_ADDR
// end ;
39230: LD_VAR 0 2
39234: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39235: LD_INT 0
39237: PPUSH
39238: PPUSH
39239: PPUSH
39240: PPUSH
39241: PPUSH
39242: PPUSH
39243: PPUSH
// if not factory then
39244: LD_VAR 0 1
39248: NOT
39249: IFFALSE 39253
// exit ;
39251: GO 39846
// if control = control_apeman then
39253: LD_VAR 0 4
39257: PUSH
39258: LD_INT 5
39260: EQUAL
39261: IFFALSE 39370
// begin tmp := UnitsInside ( factory ) ;
39263: LD_ADDR_VAR 0 8
39267: PUSH
39268: LD_VAR 0 1
39272: PPUSH
39273: CALL_OW 313
39277: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39278: LD_VAR 0 8
39282: PPUSH
39283: LD_INT 25
39285: PUSH
39286: LD_INT 12
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PPUSH
39293: CALL_OW 72
39297: NOT
39298: IFFALSE 39308
// control := control_manual ;
39300: LD_ADDR_VAR 0 4
39304: PUSH
39305: LD_INT 1
39307: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39308: LD_ADDR_VAR 0 8
39312: PUSH
39313: LD_VAR 0 1
39317: PPUSH
39318: CALL 39005 0 1
39322: ST_TO_ADDR
// if tmp then
39323: LD_VAR 0 8
39327: IFFALSE 39370
// begin for i in tmp do
39329: LD_ADDR_VAR 0 7
39333: PUSH
39334: LD_VAR 0 8
39338: PUSH
39339: FOR_IN
39340: IFFALSE 39368
// if i [ 1 ] = b_ext_radio then
39342: LD_VAR 0 7
39346: PUSH
39347: LD_INT 1
39349: ARRAY
39350: PUSH
39351: LD_INT 22
39353: EQUAL
39354: IFFALSE 39366
// begin control := control_remote ;
39356: LD_ADDR_VAR 0 4
39360: PUSH
39361: LD_INT 2
39363: ST_TO_ADDR
// break ;
39364: GO 39368
// end ;
39366: GO 39339
39368: POP
39369: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39370: LD_VAR 0 1
39374: PPUSH
39375: LD_VAR 0 2
39379: PPUSH
39380: LD_VAR 0 3
39384: PPUSH
39385: LD_VAR 0 4
39389: PPUSH
39390: LD_VAR 0 5
39394: PPUSH
39395: CALL_OW 448
39399: IFFALSE 39434
// begin result := [ chassis , engine , control , weapon ] ;
39401: LD_ADDR_VAR 0 6
39405: PUSH
39406: LD_VAR 0 2
39410: PUSH
39411: LD_VAR 0 3
39415: PUSH
39416: LD_VAR 0 4
39420: PUSH
39421: LD_VAR 0 5
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: ST_TO_ADDR
// exit ;
39432: GO 39846
// end ; _chassis := AvailableChassisList ( factory ) ;
39434: LD_ADDR_VAR 0 9
39438: PUSH
39439: LD_VAR 0 1
39443: PPUSH
39444: CALL_OW 475
39448: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39449: LD_ADDR_VAR 0 11
39453: PUSH
39454: LD_VAR 0 1
39458: PPUSH
39459: CALL_OW 476
39463: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39464: LD_ADDR_VAR 0 12
39468: PUSH
39469: LD_VAR 0 1
39473: PPUSH
39474: CALL_OW 477
39478: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39479: LD_ADDR_VAR 0 10
39483: PUSH
39484: LD_VAR 0 1
39488: PPUSH
39489: CALL_OW 478
39493: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39494: LD_VAR 0 9
39498: NOT
39499: PUSH
39500: LD_VAR 0 11
39504: NOT
39505: OR
39506: PUSH
39507: LD_VAR 0 12
39511: NOT
39512: OR
39513: PUSH
39514: LD_VAR 0 10
39518: NOT
39519: OR
39520: IFFALSE 39555
// begin result := [ chassis , engine , control , weapon ] ;
39522: LD_ADDR_VAR 0 6
39526: PUSH
39527: LD_VAR 0 2
39531: PUSH
39532: LD_VAR 0 3
39536: PUSH
39537: LD_VAR 0 4
39541: PUSH
39542: LD_VAR 0 5
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: ST_TO_ADDR
// exit ;
39553: GO 39846
// end ; if not chassis in _chassis then
39555: LD_VAR 0 2
39559: PUSH
39560: LD_VAR 0 9
39564: IN
39565: NOT
39566: IFFALSE 39592
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39568: LD_ADDR_VAR 0 2
39572: PUSH
39573: LD_VAR 0 9
39577: PUSH
39578: LD_INT 1
39580: PPUSH
39581: LD_VAR 0 9
39585: PPUSH
39586: CALL_OW 12
39590: ARRAY
39591: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39592: LD_VAR 0 2
39596: PPUSH
39597: LD_VAR 0 3
39601: PPUSH
39602: CALL 39851 0 2
39606: NOT
39607: IFFALSE 39666
// repeat engine := _engine [ 1 ] ;
39609: LD_ADDR_VAR 0 3
39613: PUSH
39614: LD_VAR 0 11
39618: PUSH
39619: LD_INT 1
39621: ARRAY
39622: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39623: LD_ADDR_VAR 0 11
39627: PUSH
39628: LD_VAR 0 11
39632: PPUSH
39633: LD_INT 1
39635: PPUSH
39636: CALL_OW 3
39640: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39641: LD_VAR 0 2
39645: PPUSH
39646: LD_VAR 0 3
39650: PPUSH
39651: CALL 39851 0 2
39655: PUSH
39656: LD_VAR 0 11
39660: PUSH
39661: EMPTY
39662: EQUAL
39663: OR
39664: IFFALSE 39609
// if not control in _control then
39666: LD_VAR 0 4
39670: PUSH
39671: LD_VAR 0 12
39675: IN
39676: NOT
39677: IFFALSE 39703
// control := _control [ rand ( 1 , _control ) ] ;
39679: LD_ADDR_VAR 0 4
39683: PUSH
39684: LD_VAR 0 12
39688: PUSH
39689: LD_INT 1
39691: PPUSH
39692: LD_VAR 0 12
39696: PPUSH
39697: CALL_OW 12
39701: ARRAY
39702: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39703: LD_VAR 0 2
39707: PPUSH
39708: LD_VAR 0 5
39712: PPUSH
39713: CALL 40071 0 2
39717: NOT
39718: IFFALSE 39777
// repeat weapon := _weapon [ 1 ] ;
39720: LD_ADDR_VAR 0 5
39724: PUSH
39725: LD_VAR 0 10
39729: PUSH
39730: LD_INT 1
39732: ARRAY
39733: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39734: LD_ADDR_VAR 0 10
39738: PUSH
39739: LD_VAR 0 10
39743: PPUSH
39744: LD_INT 1
39746: PPUSH
39747: CALL_OW 3
39751: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39752: LD_VAR 0 2
39756: PPUSH
39757: LD_VAR 0 5
39761: PPUSH
39762: CALL 40071 0 2
39766: PUSH
39767: LD_VAR 0 10
39771: PUSH
39772: EMPTY
39773: EQUAL
39774: OR
39775: IFFALSE 39720
// result := [ ] ;
39777: LD_ADDR_VAR 0 6
39781: PUSH
39782: EMPTY
39783: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39784: LD_VAR 0 1
39788: PPUSH
39789: LD_VAR 0 2
39793: PPUSH
39794: LD_VAR 0 3
39798: PPUSH
39799: LD_VAR 0 4
39803: PPUSH
39804: LD_VAR 0 5
39808: PPUSH
39809: CALL_OW 448
39813: IFFALSE 39846
// result := [ chassis , engine , control , weapon ] ;
39815: LD_ADDR_VAR 0 6
39819: PUSH
39820: LD_VAR 0 2
39824: PUSH
39825: LD_VAR 0 3
39829: PUSH
39830: LD_VAR 0 4
39834: PUSH
39835: LD_VAR 0 5
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: ST_TO_ADDR
// end ;
39846: LD_VAR 0 6
39850: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39851: LD_INT 0
39853: PPUSH
// if not chassis or not engine then
39854: LD_VAR 0 1
39858: NOT
39859: PUSH
39860: LD_VAR 0 2
39864: NOT
39865: OR
39866: IFFALSE 39870
// exit ;
39868: GO 40066
// case engine of engine_solar :
39870: LD_VAR 0 2
39874: PUSH
39875: LD_INT 2
39877: DOUBLE
39878: EQUAL
39879: IFTRUE 39883
39881: GO 39921
39883: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39884: LD_ADDR_VAR 0 3
39888: PUSH
39889: LD_INT 11
39891: PUSH
39892: LD_INT 12
39894: PUSH
39895: LD_INT 13
39897: PUSH
39898: LD_INT 14
39900: PUSH
39901: LD_INT 1
39903: PUSH
39904: LD_INT 2
39906: PUSH
39907: LD_INT 3
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: ST_TO_ADDR
39919: GO 40050
39921: LD_INT 1
39923: DOUBLE
39924: EQUAL
39925: IFTRUE 39929
39927: GO 39991
39929: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39930: LD_ADDR_VAR 0 3
39934: PUSH
39935: LD_INT 11
39937: PUSH
39938: LD_INT 12
39940: PUSH
39941: LD_INT 13
39943: PUSH
39944: LD_INT 14
39946: PUSH
39947: LD_INT 1
39949: PUSH
39950: LD_INT 2
39952: PUSH
39953: LD_INT 3
39955: PUSH
39956: LD_INT 4
39958: PUSH
39959: LD_INT 5
39961: PUSH
39962: LD_INT 21
39964: PUSH
39965: LD_INT 23
39967: PUSH
39968: LD_INT 22
39970: PUSH
39971: LD_INT 24
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: ST_TO_ADDR
39989: GO 40050
39991: LD_INT 3
39993: DOUBLE
39994: EQUAL
39995: IFTRUE 39999
39997: GO 40049
39999: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40000: LD_ADDR_VAR 0 3
40004: PUSH
40005: LD_INT 13
40007: PUSH
40008: LD_INT 14
40010: PUSH
40011: LD_INT 2
40013: PUSH
40014: LD_INT 3
40016: PUSH
40017: LD_INT 4
40019: PUSH
40020: LD_INT 5
40022: PUSH
40023: LD_INT 21
40025: PUSH
40026: LD_INT 22
40028: PUSH
40029: LD_INT 23
40031: PUSH
40032: LD_INT 24
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: ST_TO_ADDR
40047: GO 40050
40049: POP
// result := ( chassis in result ) ;
40050: LD_ADDR_VAR 0 3
40054: PUSH
40055: LD_VAR 0 1
40059: PUSH
40060: LD_VAR 0 3
40064: IN
40065: ST_TO_ADDR
// end ;
40066: LD_VAR 0 3
40070: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40071: LD_INT 0
40073: PPUSH
// if not chassis or not weapon then
40074: LD_VAR 0 1
40078: NOT
40079: PUSH
40080: LD_VAR 0 2
40084: NOT
40085: OR
40086: IFFALSE 40090
// exit ;
40088: GO 41150
// case weapon of us_machine_gun :
40090: LD_VAR 0 2
40094: PUSH
40095: LD_INT 2
40097: DOUBLE
40098: EQUAL
40099: IFTRUE 40103
40101: GO 40133
40103: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40104: LD_ADDR_VAR 0 3
40108: PUSH
40109: LD_INT 1
40111: PUSH
40112: LD_INT 2
40114: PUSH
40115: LD_INT 3
40117: PUSH
40118: LD_INT 4
40120: PUSH
40121: LD_INT 5
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: ST_TO_ADDR
40131: GO 41134
40133: LD_INT 3
40135: DOUBLE
40136: EQUAL
40137: IFTRUE 40141
40139: GO 40171
40141: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40142: LD_ADDR_VAR 0 3
40146: PUSH
40147: LD_INT 1
40149: PUSH
40150: LD_INT 2
40152: PUSH
40153: LD_INT 3
40155: PUSH
40156: LD_INT 4
40158: PUSH
40159: LD_INT 5
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: ST_TO_ADDR
40169: GO 41134
40171: LD_INT 11
40173: DOUBLE
40174: EQUAL
40175: IFTRUE 40179
40177: GO 40209
40179: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40180: LD_ADDR_VAR 0 3
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: LD_INT 2
40190: PUSH
40191: LD_INT 3
40193: PUSH
40194: LD_INT 4
40196: PUSH
40197: LD_INT 5
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: ST_TO_ADDR
40207: GO 41134
40209: LD_INT 4
40211: DOUBLE
40212: EQUAL
40213: IFTRUE 40217
40215: GO 40243
40217: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40218: LD_ADDR_VAR 0 3
40222: PUSH
40223: LD_INT 2
40225: PUSH
40226: LD_INT 3
40228: PUSH
40229: LD_INT 4
40231: PUSH
40232: LD_INT 5
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: ST_TO_ADDR
40241: GO 41134
40243: LD_INT 5
40245: DOUBLE
40246: EQUAL
40247: IFTRUE 40251
40249: GO 40277
40251: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40252: LD_ADDR_VAR 0 3
40256: PUSH
40257: LD_INT 2
40259: PUSH
40260: LD_INT 3
40262: PUSH
40263: LD_INT 4
40265: PUSH
40266: LD_INT 5
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: ST_TO_ADDR
40275: GO 41134
40277: LD_INT 9
40279: DOUBLE
40280: EQUAL
40281: IFTRUE 40285
40283: GO 40311
40285: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40286: LD_ADDR_VAR 0 3
40290: PUSH
40291: LD_INT 2
40293: PUSH
40294: LD_INT 3
40296: PUSH
40297: LD_INT 4
40299: PUSH
40300: LD_INT 5
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: ST_TO_ADDR
40309: GO 41134
40311: LD_INT 7
40313: DOUBLE
40314: EQUAL
40315: IFTRUE 40319
40317: GO 40345
40319: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40320: LD_ADDR_VAR 0 3
40324: PUSH
40325: LD_INT 2
40327: PUSH
40328: LD_INT 3
40330: PUSH
40331: LD_INT 4
40333: PUSH
40334: LD_INT 5
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: ST_TO_ADDR
40343: GO 41134
40345: LD_INT 12
40347: DOUBLE
40348: EQUAL
40349: IFTRUE 40353
40351: GO 40379
40353: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40354: LD_ADDR_VAR 0 3
40358: PUSH
40359: LD_INT 2
40361: PUSH
40362: LD_INT 3
40364: PUSH
40365: LD_INT 4
40367: PUSH
40368: LD_INT 5
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: ST_TO_ADDR
40377: GO 41134
40379: LD_INT 13
40381: DOUBLE
40382: EQUAL
40383: IFTRUE 40387
40385: GO 40413
40387: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40388: LD_ADDR_VAR 0 3
40392: PUSH
40393: LD_INT 2
40395: PUSH
40396: LD_INT 3
40398: PUSH
40399: LD_INT 4
40401: PUSH
40402: LD_INT 5
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: ST_TO_ADDR
40411: GO 41134
40413: LD_INT 14
40415: DOUBLE
40416: EQUAL
40417: IFTRUE 40421
40419: GO 40439
40421: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40422: LD_ADDR_VAR 0 3
40426: PUSH
40427: LD_INT 4
40429: PUSH
40430: LD_INT 5
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: ST_TO_ADDR
40437: GO 41134
40439: LD_INT 6
40441: DOUBLE
40442: EQUAL
40443: IFTRUE 40447
40445: GO 40465
40447: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40448: LD_ADDR_VAR 0 3
40452: PUSH
40453: LD_INT 4
40455: PUSH
40456: LD_INT 5
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: ST_TO_ADDR
40463: GO 41134
40465: LD_INT 10
40467: DOUBLE
40468: EQUAL
40469: IFTRUE 40473
40471: GO 40491
40473: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40474: LD_ADDR_VAR 0 3
40478: PUSH
40479: LD_INT 4
40481: PUSH
40482: LD_INT 5
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: ST_TO_ADDR
40489: GO 41134
40491: LD_INT 22
40493: DOUBLE
40494: EQUAL
40495: IFTRUE 40499
40497: GO 40525
40499: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40500: LD_ADDR_VAR 0 3
40504: PUSH
40505: LD_INT 11
40507: PUSH
40508: LD_INT 12
40510: PUSH
40511: LD_INT 13
40513: PUSH
40514: LD_INT 14
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: ST_TO_ADDR
40523: GO 41134
40525: LD_INT 23
40527: DOUBLE
40528: EQUAL
40529: IFTRUE 40533
40531: GO 40559
40533: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40534: LD_ADDR_VAR 0 3
40538: PUSH
40539: LD_INT 11
40541: PUSH
40542: LD_INT 12
40544: PUSH
40545: LD_INT 13
40547: PUSH
40548: LD_INT 14
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: ST_TO_ADDR
40557: GO 41134
40559: LD_INT 24
40561: DOUBLE
40562: EQUAL
40563: IFTRUE 40567
40565: GO 40593
40567: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40568: LD_ADDR_VAR 0 3
40572: PUSH
40573: LD_INT 11
40575: PUSH
40576: LD_INT 12
40578: PUSH
40579: LD_INT 13
40581: PUSH
40582: LD_INT 14
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: ST_TO_ADDR
40591: GO 41134
40593: LD_INT 30
40595: DOUBLE
40596: EQUAL
40597: IFTRUE 40601
40599: GO 40627
40601: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40602: LD_ADDR_VAR 0 3
40606: PUSH
40607: LD_INT 11
40609: PUSH
40610: LD_INT 12
40612: PUSH
40613: LD_INT 13
40615: PUSH
40616: LD_INT 14
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: ST_TO_ADDR
40625: GO 41134
40627: LD_INT 25
40629: DOUBLE
40630: EQUAL
40631: IFTRUE 40635
40633: GO 40653
40635: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40636: LD_ADDR_VAR 0 3
40640: PUSH
40641: LD_INT 13
40643: PUSH
40644: LD_INT 14
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: ST_TO_ADDR
40651: GO 41134
40653: LD_INT 27
40655: DOUBLE
40656: EQUAL
40657: IFTRUE 40661
40659: GO 40679
40661: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40662: LD_ADDR_VAR 0 3
40666: PUSH
40667: LD_INT 13
40669: PUSH
40670: LD_INT 14
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: ST_TO_ADDR
40677: GO 41134
40679: LD_INT 92
40681: DOUBLE
40682: EQUAL
40683: IFTRUE 40687
40685: GO 40713
40687: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40688: LD_ADDR_VAR 0 3
40692: PUSH
40693: LD_INT 11
40695: PUSH
40696: LD_INT 12
40698: PUSH
40699: LD_INT 13
40701: PUSH
40702: LD_INT 14
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: ST_TO_ADDR
40711: GO 41134
40713: LD_INT 28
40715: DOUBLE
40716: EQUAL
40717: IFTRUE 40721
40719: GO 40739
40721: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40722: LD_ADDR_VAR 0 3
40726: PUSH
40727: LD_INT 13
40729: PUSH
40730: LD_INT 14
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: ST_TO_ADDR
40737: GO 41134
40739: LD_INT 29
40741: DOUBLE
40742: EQUAL
40743: IFTRUE 40747
40745: GO 40765
40747: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40748: LD_ADDR_VAR 0 3
40752: PUSH
40753: LD_INT 13
40755: PUSH
40756: LD_INT 14
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: ST_TO_ADDR
40763: GO 41134
40765: LD_INT 31
40767: DOUBLE
40768: EQUAL
40769: IFTRUE 40773
40771: GO 40791
40773: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40774: LD_ADDR_VAR 0 3
40778: PUSH
40779: LD_INT 13
40781: PUSH
40782: LD_INT 14
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: ST_TO_ADDR
40789: GO 41134
40791: LD_INT 26
40793: DOUBLE
40794: EQUAL
40795: IFTRUE 40799
40797: GO 40817
40799: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40800: LD_ADDR_VAR 0 3
40804: PUSH
40805: LD_INT 13
40807: PUSH
40808: LD_INT 14
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: ST_TO_ADDR
40815: GO 41134
40817: LD_INT 42
40819: DOUBLE
40820: EQUAL
40821: IFTRUE 40825
40823: GO 40851
40825: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40826: LD_ADDR_VAR 0 3
40830: PUSH
40831: LD_INT 21
40833: PUSH
40834: LD_INT 22
40836: PUSH
40837: LD_INT 23
40839: PUSH
40840: LD_INT 24
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: ST_TO_ADDR
40849: GO 41134
40851: LD_INT 43
40853: DOUBLE
40854: EQUAL
40855: IFTRUE 40859
40857: GO 40885
40859: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40860: LD_ADDR_VAR 0 3
40864: PUSH
40865: LD_INT 21
40867: PUSH
40868: LD_INT 22
40870: PUSH
40871: LD_INT 23
40873: PUSH
40874: LD_INT 24
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: ST_TO_ADDR
40883: GO 41134
40885: LD_INT 44
40887: DOUBLE
40888: EQUAL
40889: IFTRUE 40893
40891: GO 40919
40893: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40894: LD_ADDR_VAR 0 3
40898: PUSH
40899: LD_INT 21
40901: PUSH
40902: LD_INT 22
40904: PUSH
40905: LD_INT 23
40907: PUSH
40908: LD_INT 24
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: ST_TO_ADDR
40917: GO 41134
40919: LD_INT 45
40921: DOUBLE
40922: EQUAL
40923: IFTRUE 40927
40925: GO 40953
40927: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40928: LD_ADDR_VAR 0 3
40932: PUSH
40933: LD_INT 21
40935: PUSH
40936: LD_INT 22
40938: PUSH
40939: LD_INT 23
40941: PUSH
40942: LD_INT 24
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: ST_TO_ADDR
40951: GO 41134
40953: LD_INT 49
40955: DOUBLE
40956: EQUAL
40957: IFTRUE 40961
40959: GO 40987
40961: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40962: LD_ADDR_VAR 0 3
40966: PUSH
40967: LD_INT 21
40969: PUSH
40970: LD_INT 22
40972: PUSH
40973: LD_INT 23
40975: PUSH
40976: LD_INT 24
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: ST_TO_ADDR
40985: GO 41134
40987: LD_INT 51
40989: DOUBLE
40990: EQUAL
40991: IFTRUE 40995
40993: GO 41021
40995: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40996: LD_ADDR_VAR 0 3
41000: PUSH
41001: LD_INT 21
41003: PUSH
41004: LD_INT 22
41006: PUSH
41007: LD_INT 23
41009: PUSH
41010: LD_INT 24
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: ST_TO_ADDR
41019: GO 41134
41021: LD_INT 52
41023: DOUBLE
41024: EQUAL
41025: IFTRUE 41029
41027: GO 41055
41029: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41030: LD_ADDR_VAR 0 3
41034: PUSH
41035: LD_INT 21
41037: PUSH
41038: LD_INT 22
41040: PUSH
41041: LD_INT 23
41043: PUSH
41044: LD_INT 24
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: ST_TO_ADDR
41053: GO 41134
41055: LD_INT 53
41057: DOUBLE
41058: EQUAL
41059: IFTRUE 41063
41061: GO 41081
41063: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41064: LD_ADDR_VAR 0 3
41068: PUSH
41069: LD_INT 23
41071: PUSH
41072: LD_INT 24
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: ST_TO_ADDR
41079: GO 41134
41081: LD_INT 46
41083: DOUBLE
41084: EQUAL
41085: IFTRUE 41089
41087: GO 41107
41089: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41090: LD_ADDR_VAR 0 3
41094: PUSH
41095: LD_INT 23
41097: PUSH
41098: LD_INT 24
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: ST_TO_ADDR
41105: GO 41134
41107: LD_INT 47
41109: DOUBLE
41110: EQUAL
41111: IFTRUE 41115
41113: GO 41133
41115: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41116: LD_ADDR_VAR 0 3
41120: PUSH
41121: LD_INT 23
41123: PUSH
41124: LD_INT 24
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: ST_TO_ADDR
41131: GO 41134
41133: POP
// result := ( chassis in result ) ;
41134: LD_ADDR_VAR 0 3
41138: PUSH
41139: LD_VAR 0 1
41143: PUSH
41144: LD_VAR 0 3
41148: IN
41149: ST_TO_ADDR
// end ;
41150: LD_VAR 0 3
41154: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41155: LD_INT 0
41157: PPUSH
41158: PPUSH
41159: PPUSH
41160: PPUSH
41161: PPUSH
41162: PPUSH
41163: PPUSH
// result := array ;
41164: LD_ADDR_VAR 0 5
41168: PUSH
41169: LD_VAR 0 1
41173: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41174: LD_VAR 0 1
41178: NOT
41179: PUSH
41180: LD_VAR 0 2
41184: NOT
41185: OR
41186: PUSH
41187: LD_VAR 0 3
41191: NOT
41192: OR
41193: PUSH
41194: LD_VAR 0 2
41198: PUSH
41199: LD_VAR 0 1
41203: GREATER
41204: OR
41205: PUSH
41206: LD_VAR 0 3
41210: PUSH
41211: LD_VAR 0 1
41215: GREATER
41216: OR
41217: IFFALSE 41221
// exit ;
41219: GO 41517
// if direction then
41221: LD_VAR 0 4
41225: IFFALSE 41289
// begin d := 1 ;
41227: LD_ADDR_VAR 0 9
41231: PUSH
41232: LD_INT 1
41234: ST_TO_ADDR
// if i_from > i_to then
41235: LD_VAR 0 2
41239: PUSH
41240: LD_VAR 0 3
41244: GREATER
41245: IFFALSE 41271
// length := ( array - i_from ) + i_to else
41247: LD_ADDR_VAR 0 11
41251: PUSH
41252: LD_VAR 0 1
41256: PUSH
41257: LD_VAR 0 2
41261: MINUS
41262: PUSH
41263: LD_VAR 0 3
41267: PLUS
41268: ST_TO_ADDR
41269: GO 41287
// length := i_to - i_from ;
41271: LD_ADDR_VAR 0 11
41275: PUSH
41276: LD_VAR 0 3
41280: PUSH
41281: LD_VAR 0 2
41285: MINUS
41286: ST_TO_ADDR
// end else
41287: GO 41350
// begin d := - 1 ;
41289: LD_ADDR_VAR 0 9
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: ST_TO_ADDR
// if i_from > i_to then
41298: LD_VAR 0 2
41302: PUSH
41303: LD_VAR 0 3
41307: GREATER
41308: IFFALSE 41328
// length := i_from - i_to else
41310: LD_ADDR_VAR 0 11
41314: PUSH
41315: LD_VAR 0 2
41319: PUSH
41320: LD_VAR 0 3
41324: MINUS
41325: ST_TO_ADDR
41326: GO 41350
// length := ( array - i_to ) + i_from ;
41328: LD_ADDR_VAR 0 11
41332: PUSH
41333: LD_VAR 0 1
41337: PUSH
41338: LD_VAR 0 3
41342: MINUS
41343: PUSH
41344: LD_VAR 0 2
41348: PLUS
41349: ST_TO_ADDR
// end ; if not length then
41350: LD_VAR 0 11
41354: NOT
41355: IFFALSE 41359
// exit ;
41357: GO 41517
// tmp := array ;
41359: LD_ADDR_VAR 0 10
41363: PUSH
41364: LD_VAR 0 1
41368: ST_TO_ADDR
// for i = 1 to length do
41369: LD_ADDR_VAR 0 6
41373: PUSH
41374: DOUBLE
41375: LD_INT 1
41377: DEC
41378: ST_TO_ADDR
41379: LD_VAR 0 11
41383: PUSH
41384: FOR_TO
41385: IFFALSE 41505
// begin for j = 1 to array do
41387: LD_ADDR_VAR 0 7
41391: PUSH
41392: DOUBLE
41393: LD_INT 1
41395: DEC
41396: ST_TO_ADDR
41397: LD_VAR 0 1
41401: PUSH
41402: FOR_TO
41403: IFFALSE 41491
// begin k := j + d ;
41405: LD_ADDR_VAR 0 8
41409: PUSH
41410: LD_VAR 0 7
41414: PUSH
41415: LD_VAR 0 9
41419: PLUS
41420: ST_TO_ADDR
// if k > array then
41421: LD_VAR 0 8
41425: PUSH
41426: LD_VAR 0 1
41430: GREATER
41431: IFFALSE 41441
// k := 1 ;
41433: LD_ADDR_VAR 0 8
41437: PUSH
41438: LD_INT 1
41440: ST_TO_ADDR
// if not k then
41441: LD_VAR 0 8
41445: NOT
41446: IFFALSE 41458
// k := array ;
41448: LD_ADDR_VAR 0 8
41452: PUSH
41453: LD_VAR 0 1
41457: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41458: LD_ADDR_VAR 0 10
41462: PUSH
41463: LD_VAR 0 10
41467: PPUSH
41468: LD_VAR 0 8
41472: PPUSH
41473: LD_VAR 0 1
41477: PUSH
41478: LD_VAR 0 7
41482: ARRAY
41483: PPUSH
41484: CALL_OW 1
41488: ST_TO_ADDR
// end ;
41489: GO 41402
41491: POP
41492: POP
// array := tmp ;
41493: LD_ADDR_VAR 0 1
41497: PUSH
41498: LD_VAR 0 10
41502: ST_TO_ADDR
// end ;
41503: GO 41384
41505: POP
41506: POP
// result := array ;
41507: LD_ADDR_VAR 0 5
41511: PUSH
41512: LD_VAR 0 1
41516: ST_TO_ADDR
// end ;
41517: LD_VAR 0 5
41521: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41522: LD_INT 0
41524: PPUSH
41525: PPUSH
// result := 0 ;
41526: LD_ADDR_VAR 0 3
41530: PUSH
41531: LD_INT 0
41533: ST_TO_ADDR
// if not array or not value in array then
41534: LD_VAR 0 1
41538: NOT
41539: PUSH
41540: LD_VAR 0 2
41544: PUSH
41545: LD_VAR 0 1
41549: IN
41550: NOT
41551: OR
41552: IFFALSE 41556
// exit ;
41554: GO 41610
// for i = 1 to array do
41556: LD_ADDR_VAR 0 4
41560: PUSH
41561: DOUBLE
41562: LD_INT 1
41564: DEC
41565: ST_TO_ADDR
41566: LD_VAR 0 1
41570: PUSH
41571: FOR_TO
41572: IFFALSE 41608
// if value = array [ i ] then
41574: LD_VAR 0 2
41578: PUSH
41579: LD_VAR 0 1
41583: PUSH
41584: LD_VAR 0 4
41588: ARRAY
41589: EQUAL
41590: IFFALSE 41606
// begin result := i ;
41592: LD_ADDR_VAR 0 3
41596: PUSH
41597: LD_VAR 0 4
41601: ST_TO_ADDR
// exit ;
41602: POP
41603: POP
41604: GO 41610
// end ;
41606: GO 41571
41608: POP
41609: POP
// end ;
41610: LD_VAR 0 3
41614: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41615: LD_INT 0
41617: PPUSH
// vc_chassis := chassis ;
41618: LD_ADDR_OWVAR 37
41622: PUSH
41623: LD_VAR 0 1
41627: ST_TO_ADDR
// vc_engine := engine ;
41628: LD_ADDR_OWVAR 39
41632: PUSH
41633: LD_VAR 0 2
41637: ST_TO_ADDR
// vc_control := control ;
41638: LD_ADDR_OWVAR 38
41642: PUSH
41643: LD_VAR 0 3
41647: ST_TO_ADDR
// vc_weapon := weapon ;
41648: LD_ADDR_OWVAR 40
41652: PUSH
41653: LD_VAR 0 4
41657: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41658: LD_ADDR_OWVAR 41
41662: PUSH
41663: LD_VAR 0 5
41667: ST_TO_ADDR
// end ;
41668: LD_VAR 0 6
41672: RET
// export function WantPlant ( unit ) ; var task ; begin
41673: LD_INT 0
41675: PPUSH
41676: PPUSH
// result := false ;
41677: LD_ADDR_VAR 0 2
41681: PUSH
41682: LD_INT 0
41684: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41685: LD_ADDR_VAR 0 3
41689: PUSH
41690: LD_VAR 0 1
41694: PPUSH
41695: CALL_OW 437
41699: ST_TO_ADDR
// if task then
41700: LD_VAR 0 3
41704: IFFALSE 41732
// if task [ 1 ] [ 1 ] = p then
41706: LD_VAR 0 3
41710: PUSH
41711: LD_INT 1
41713: ARRAY
41714: PUSH
41715: LD_INT 1
41717: ARRAY
41718: PUSH
41719: LD_STRING p
41721: EQUAL
41722: IFFALSE 41732
// result := true ;
41724: LD_ADDR_VAR 0 2
41728: PUSH
41729: LD_INT 1
41731: ST_TO_ADDR
// end ;
41732: LD_VAR 0 2
41736: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41737: LD_INT 0
41739: PPUSH
41740: PPUSH
41741: PPUSH
41742: PPUSH
// if pos < 1 then
41743: LD_VAR 0 2
41747: PUSH
41748: LD_INT 1
41750: LESS
41751: IFFALSE 41755
// exit ;
41753: GO 42058
// if pos = 1 then
41755: LD_VAR 0 2
41759: PUSH
41760: LD_INT 1
41762: EQUAL
41763: IFFALSE 41796
// result := Replace ( arr , pos [ 1 ] , value ) else
41765: LD_ADDR_VAR 0 4
41769: PUSH
41770: LD_VAR 0 1
41774: PPUSH
41775: LD_VAR 0 2
41779: PUSH
41780: LD_INT 1
41782: ARRAY
41783: PPUSH
41784: LD_VAR 0 3
41788: PPUSH
41789: CALL_OW 1
41793: ST_TO_ADDR
41794: GO 42058
// begin tmp := arr ;
41796: LD_ADDR_VAR 0 6
41800: PUSH
41801: LD_VAR 0 1
41805: ST_TO_ADDR
// s_arr := [ tmp ] ;
41806: LD_ADDR_VAR 0 7
41810: PUSH
41811: LD_VAR 0 6
41815: PUSH
41816: EMPTY
41817: LIST
41818: ST_TO_ADDR
// for i = 1 to pos - 1 do
41819: LD_ADDR_VAR 0 5
41823: PUSH
41824: DOUBLE
41825: LD_INT 1
41827: DEC
41828: ST_TO_ADDR
41829: LD_VAR 0 2
41833: PUSH
41834: LD_INT 1
41836: MINUS
41837: PUSH
41838: FOR_TO
41839: IFFALSE 41884
// begin tmp := tmp [ pos [ i ] ] ;
41841: LD_ADDR_VAR 0 6
41845: PUSH
41846: LD_VAR 0 6
41850: PUSH
41851: LD_VAR 0 2
41855: PUSH
41856: LD_VAR 0 5
41860: ARRAY
41861: ARRAY
41862: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41863: LD_ADDR_VAR 0 7
41867: PUSH
41868: LD_VAR 0 7
41872: PUSH
41873: LD_VAR 0 6
41877: PUSH
41878: EMPTY
41879: LIST
41880: ADD
41881: ST_TO_ADDR
// end ;
41882: GO 41838
41884: POP
41885: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41886: LD_ADDR_VAR 0 6
41890: PUSH
41891: LD_VAR 0 6
41895: PPUSH
41896: LD_VAR 0 2
41900: PUSH
41901: LD_VAR 0 2
41905: ARRAY
41906: PPUSH
41907: LD_VAR 0 3
41911: PPUSH
41912: CALL_OW 1
41916: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41917: LD_ADDR_VAR 0 7
41921: PUSH
41922: LD_VAR 0 7
41926: PPUSH
41927: LD_VAR 0 7
41931: PPUSH
41932: LD_VAR 0 6
41936: PPUSH
41937: CALL_OW 1
41941: ST_TO_ADDR
// for i = s_arr downto 2 do
41942: LD_ADDR_VAR 0 5
41946: PUSH
41947: DOUBLE
41948: LD_VAR 0 7
41952: INC
41953: ST_TO_ADDR
41954: LD_INT 2
41956: PUSH
41957: FOR_DOWNTO
41958: IFFALSE 42042
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41960: LD_ADDR_VAR 0 6
41964: PUSH
41965: LD_VAR 0 7
41969: PUSH
41970: LD_VAR 0 5
41974: PUSH
41975: LD_INT 1
41977: MINUS
41978: ARRAY
41979: PPUSH
41980: LD_VAR 0 2
41984: PUSH
41985: LD_VAR 0 5
41989: PUSH
41990: LD_INT 1
41992: MINUS
41993: ARRAY
41994: PPUSH
41995: LD_VAR 0 7
41999: PUSH
42000: LD_VAR 0 5
42004: ARRAY
42005: PPUSH
42006: CALL_OW 1
42010: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42011: LD_ADDR_VAR 0 7
42015: PUSH
42016: LD_VAR 0 7
42020: PPUSH
42021: LD_VAR 0 5
42025: PUSH
42026: LD_INT 1
42028: MINUS
42029: PPUSH
42030: LD_VAR 0 6
42034: PPUSH
42035: CALL_OW 1
42039: ST_TO_ADDR
// end ;
42040: GO 41957
42042: POP
42043: POP
// result := s_arr [ 1 ] ;
42044: LD_ADDR_VAR 0 4
42048: PUSH
42049: LD_VAR 0 7
42053: PUSH
42054: LD_INT 1
42056: ARRAY
42057: ST_TO_ADDR
// end ; end ;
42058: LD_VAR 0 4
42062: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42063: LD_INT 0
42065: PPUSH
42066: PPUSH
// if not list then
42067: LD_VAR 0 1
42071: NOT
42072: IFFALSE 42076
// exit ;
42074: GO 42167
// i := list [ pos1 ] ;
42076: LD_ADDR_VAR 0 5
42080: PUSH
42081: LD_VAR 0 1
42085: PUSH
42086: LD_VAR 0 2
42090: ARRAY
42091: ST_TO_ADDR
// if not i then
42092: LD_VAR 0 5
42096: NOT
42097: IFFALSE 42101
// exit ;
42099: GO 42167
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42101: LD_ADDR_VAR 0 1
42105: PUSH
42106: LD_VAR 0 1
42110: PPUSH
42111: LD_VAR 0 2
42115: PPUSH
42116: LD_VAR 0 1
42120: PUSH
42121: LD_VAR 0 3
42125: ARRAY
42126: PPUSH
42127: CALL_OW 1
42131: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42132: LD_ADDR_VAR 0 1
42136: PUSH
42137: LD_VAR 0 1
42141: PPUSH
42142: LD_VAR 0 3
42146: PPUSH
42147: LD_VAR 0 5
42151: PPUSH
42152: CALL_OW 1
42156: ST_TO_ADDR
// result := list ;
42157: LD_ADDR_VAR 0 4
42161: PUSH
42162: LD_VAR 0 1
42166: ST_TO_ADDR
// end ;
42167: LD_VAR 0 4
42171: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42172: LD_INT 0
42174: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42175: LD_ADDR_VAR 0 5
42179: PUSH
42180: LD_VAR 0 1
42184: PPUSH
42185: CALL_OW 250
42189: PPUSH
42190: LD_VAR 0 1
42194: PPUSH
42195: CALL_OW 251
42199: PPUSH
42200: LD_VAR 0 2
42204: PPUSH
42205: LD_VAR 0 3
42209: PPUSH
42210: LD_VAR 0 4
42214: PPUSH
42215: CALL 42225 0 5
42219: ST_TO_ADDR
// end ;
42220: LD_VAR 0 5
42224: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42225: LD_INT 0
42227: PPUSH
42228: PPUSH
42229: PPUSH
42230: PPUSH
// if not list then
42231: LD_VAR 0 3
42235: NOT
42236: IFFALSE 42240
// exit ;
42238: GO 42628
// result := [ ] ;
42240: LD_ADDR_VAR 0 6
42244: PUSH
42245: EMPTY
42246: ST_TO_ADDR
// for i in list do
42247: LD_ADDR_VAR 0 7
42251: PUSH
42252: LD_VAR 0 3
42256: PUSH
42257: FOR_IN
42258: IFFALSE 42460
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42260: LD_ADDR_VAR 0 9
42264: PUSH
42265: LD_VAR 0 7
42269: PPUSH
42270: LD_VAR 0 1
42274: PPUSH
42275: LD_VAR 0 2
42279: PPUSH
42280: CALL_OW 297
42284: ST_TO_ADDR
// if not result then
42285: LD_VAR 0 6
42289: NOT
42290: IFFALSE 42316
// result := [ [ i , tmp ] ] else
42292: LD_ADDR_VAR 0 6
42296: PUSH
42297: LD_VAR 0 7
42301: PUSH
42302: LD_VAR 0 9
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: EMPTY
42312: LIST
42313: ST_TO_ADDR
42314: GO 42458
// begin if result [ result ] [ 2 ] < tmp then
42316: LD_VAR 0 6
42320: PUSH
42321: LD_VAR 0 6
42325: ARRAY
42326: PUSH
42327: LD_INT 2
42329: ARRAY
42330: PUSH
42331: LD_VAR 0 9
42335: LESS
42336: IFFALSE 42378
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42338: LD_ADDR_VAR 0 6
42342: PUSH
42343: LD_VAR 0 6
42347: PPUSH
42348: LD_VAR 0 6
42352: PUSH
42353: LD_INT 1
42355: PLUS
42356: PPUSH
42357: LD_VAR 0 7
42361: PUSH
42362: LD_VAR 0 9
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PPUSH
42371: CALL_OW 2
42375: ST_TO_ADDR
42376: GO 42458
// for j = 1 to result do
42378: LD_ADDR_VAR 0 8
42382: PUSH
42383: DOUBLE
42384: LD_INT 1
42386: DEC
42387: ST_TO_ADDR
42388: LD_VAR 0 6
42392: PUSH
42393: FOR_TO
42394: IFFALSE 42456
// begin if tmp < result [ j ] [ 2 ] then
42396: LD_VAR 0 9
42400: PUSH
42401: LD_VAR 0 6
42405: PUSH
42406: LD_VAR 0 8
42410: ARRAY
42411: PUSH
42412: LD_INT 2
42414: ARRAY
42415: LESS
42416: IFFALSE 42454
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42418: LD_ADDR_VAR 0 6
42422: PUSH
42423: LD_VAR 0 6
42427: PPUSH
42428: LD_VAR 0 8
42432: PPUSH
42433: LD_VAR 0 7
42437: PUSH
42438: LD_VAR 0 9
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PPUSH
42447: CALL_OW 2
42451: ST_TO_ADDR
// break ;
42452: GO 42456
// end ; end ;
42454: GO 42393
42456: POP
42457: POP
// end ; end ;
42458: GO 42257
42460: POP
42461: POP
// if result and not asc then
42462: LD_VAR 0 6
42466: PUSH
42467: LD_VAR 0 4
42471: NOT
42472: AND
42473: IFFALSE 42548
// begin tmp := result ;
42475: LD_ADDR_VAR 0 9
42479: PUSH
42480: LD_VAR 0 6
42484: ST_TO_ADDR
// for i = tmp downto 1 do
42485: LD_ADDR_VAR 0 7
42489: PUSH
42490: DOUBLE
42491: LD_VAR 0 9
42495: INC
42496: ST_TO_ADDR
42497: LD_INT 1
42499: PUSH
42500: FOR_DOWNTO
42501: IFFALSE 42546
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42503: LD_ADDR_VAR 0 6
42507: PUSH
42508: LD_VAR 0 6
42512: PPUSH
42513: LD_VAR 0 9
42517: PUSH
42518: LD_VAR 0 7
42522: MINUS
42523: PUSH
42524: LD_INT 1
42526: PLUS
42527: PPUSH
42528: LD_VAR 0 9
42532: PUSH
42533: LD_VAR 0 7
42537: ARRAY
42538: PPUSH
42539: CALL_OW 1
42543: ST_TO_ADDR
42544: GO 42500
42546: POP
42547: POP
// end ; tmp := [ ] ;
42548: LD_ADDR_VAR 0 9
42552: PUSH
42553: EMPTY
42554: ST_TO_ADDR
// if mode then
42555: LD_VAR 0 5
42559: IFFALSE 42628
// begin for i = 1 to result do
42561: LD_ADDR_VAR 0 7
42565: PUSH
42566: DOUBLE
42567: LD_INT 1
42569: DEC
42570: ST_TO_ADDR
42571: LD_VAR 0 6
42575: PUSH
42576: FOR_TO
42577: IFFALSE 42616
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42579: LD_ADDR_VAR 0 9
42583: PUSH
42584: LD_VAR 0 9
42588: PPUSH
42589: LD_VAR 0 7
42593: PPUSH
42594: LD_VAR 0 6
42598: PUSH
42599: LD_VAR 0 7
42603: ARRAY
42604: PUSH
42605: LD_INT 1
42607: ARRAY
42608: PPUSH
42609: CALL_OW 1
42613: ST_TO_ADDR
42614: GO 42576
42616: POP
42617: POP
// result := tmp ;
42618: LD_ADDR_VAR 0 6
42622: PUSH
42623: LD_VAR 0 9
42627: ST_TO_ADDR
// end ; end ;
42628: LD_VAR 0 6
42632: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42633: LD_INT 0
42635: PPUSH
42636: PPUSH
42637: PPUSH
42638: PPUSH
42639: PPUSH
42640: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42641: LD_ADDR_VAR 0 5
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: LD_INT 0
42651: PUSH
42652: LD_INT 0
42654: PUSH
42655: EMPTY
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: ST_TO_ADDR
// if not x or not y then
42663: LD_VAR 0 2
42667: NOT
42668: PUSH
42669: LD_VAR 0 3
42673: NOT
42674: OR
42675: IFFALSE 42679
// exit ;
42677: GO 44329
// if not range then
42679: LD_VAR 0 4
42683: NOT
42684: IFFALSE 42694
// range := 10 ;
42686: LD_ADDR_VAR 0 4
42690: PUSH
42691: LD_INT 10
42693: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42694: LD_ADDR_VAR 0 8
42698: PUSH
42699: LD_INT 81
42701: PUSH
42702: LD_VAR 0 1
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 92
42713: PUSH
42714: LD_VAR 0 2
42718: PUSH
42719: LD_VAR 0 3
42723: PUSH
42724: LD_VAR 0 4
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 3
42737: PUSH
42738: LD_INT 21
42740: PUSH
42741: LD_INT 3
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: LIST
42756: PPUSH
42757: CALL_OW 69
42761: ST_TO_ADDR
// if not tmp then
42762: LD_VAR 0 8
42766: NOT
42767: IFFALSE 42771
// exit ;
42769: GO 44329
// for i in tmp do
42771: LD_ADDR_VAR 0 6
42775: PUSH
42776: LD_VAR 0 8
42780: PUSH
42781: FOR_IN
42782: IFFALSE 44304
// begin points := [ 0 , 0 , 0 ] ;
42784: LD_ADDR_VAR 0 9
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: LD_INT 0
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: LIST
42802: ST_TO_ADDR
// bpoints := 1 ;
42803: LD_ADDR_VAR 0 10
42807: PUSH
42808: LD_INT 1
42810: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42811: LD_VAR 0 6
42815: PPUSH
42816: CALL_OW 247
42820: PUSH
42821: LD_INT 1
42823: DOUBLE
42824: EQUAL
42825: IFTRUE 42829
42827: GO 43407
42829: POP
// begin if GetClass ( i ) = 1 then
42830: LD_VAR 0 6
42834: PPUSH
42835: CALL_OW 257
42839: PUSH
42840: LD_INT 1
42842: EQUAL
42843: IFFALSE 42864
// points := [ 10 , 5 , 3 ] ;
42845: LD_ADDR_VAR 0 9
42849: PUSH
42850: LD_INT 10
42852: PUSH
42853: LD_INT 5
42855: PUSH
42856: LD_INT 3
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: LIST
42863: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42864: LD_VAR 0 6
42868: PPUSH
42869: CALL_OW 257
42873: PUSH
42874: LD_INT 2
42876: PUSH
42877: LD_INT 3
42879: PUSH
42880: LD_INT 4
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: LIST
42887: IN
42888: IFFALSE 42909
// points := [ 3 , 2 , 1 ] ;
42890: LD_ADDR_VAR 0 9
42894: PUSH
42895: LD_INT 3
42897: PUSH
42898: LD_INT 2
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: LIST
42908: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42909: LD_VAR 0 6
42913: PPUSH
42914: CALL_OW 257
42918: PUSH
42919: LD_INT 5
42921: EQUAL
42922: IFFALSE 42943
// points := [ 130 , 5 , 2 ] ;
42924: LD_ADDR_VAR 0 9
42928: PUSH
42929: LD_INT 130
42931: PUSH
42932: LD_INT 5
42934: PUSH
42935: LD_INT 2
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: LIST
42942: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42943: LD_VAR 0 6
42947: PPUSH
42948: CALL_OW 257
42952: PUSH
42953: LD_INT 8
42955: EQUAL
42956: IFFALSE 42977
// points := [ 35 , 35 , 30 ] ;
42958: LD_ADDR_VAR 0 9
42962: PUSH
42963: LD_INT 35
42965: PUSH
42966: LD_INT 35
42968: PUSH
42969: LD_INT 30
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: LIST
42976: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42977: LD_VAR 0 6
42981: PPUSH
42982: CALL_OW 257
42986: PUSH
42987: LD_INT 9
42989: EQUAL
42990: IFFALSE 43011
// points := [ 20 , 55 , 40 ] ;
42992: LD_ADDR_VAR 0 9
42996: PUSH
42997: LD_INT 20
42999: PUSH
43000: LD_INT 55
43002: PUSH
43003: LD_INT 40
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: LIST
43010: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43011: LD_VAR 0 6
43015: PPUSH
43016: CALL_OW 257
43020: PUSH
43021: LD_INT 12
43023: PUSH
43024: LD_INT 16
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: IN
43031: IFFALSE 43052
// points := [ 5 , 3 , 2 ] ;
43033: LD_ADDR_VAR 0 9
43037: PUSH
43038: LD_INT 5
43040: PUSH
43041: LD_INT 3
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: LIST
43051: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43052: LD_VAR 0 6
43056: PPUSH
43057: CALL_OW 257
43061: PUSH
43062: LD_INT 17
43064: EQUAL
43065: IFFALSE 43086
// points := [ 100 , 50 , 75 ] ;
43067: LD_ADDR_VAR 0 9
43071: PUSH
43072: LD_INT 100
43074: PUSH
43075: LD_INT 50
43077: PUSH
43078: LD_INT 75
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: LIST
43085: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43086: LD_VAR 0 6
43090: PPUSH
43091: CALL_OW 257
43095: PUSH
43096: LD_INT 15
43098: EQUAL
43099: IFFALSE 43120
// points := [ 10 , 5 , 3 ] ;
43101: LD_ADDR_VAR 0 9
43105: PUSH
43106: LD_INT 10
43108: PUSH
43109: LD_INT 5
43111: PUSH
43112: LD_INT 3
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: LIST
43119: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43120: LD_VAR 0 6
43124: PPUSH
43125: CALL_OW 257
43129: PUSH
43130: LD_INT 14
43132: EQUAL
43133: IFFALSE 43154
// points := [ 10 , 0 , 0 ] ;
43135: LD_ADDR_VAR 0 9
43139: PUSH
43140: LD_INT 10
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: LD_INT 0
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: LIST
43153: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43154: LD_VAR 0 6
43158: PPUSH
43159: CALL_OW 257
43163: PUSH
43164: LD_INT 11
43166: EQUAL
43167: IFFALSE 43188
// points := [ 30 , 10 , 5 ] ;
43169: LD_ADDR_VAR 0 9
43173: PUSH
43174: LD_INT 30
43176: PUSH
43177: LD_INT 10
43179: PUSH
43180: LD_INT 5
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: LIST
43187: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43188: LD_VAR 0 1
43192: PPUSH
43193: LD_INT 5
43195: PPUSH
43196: CALL_OW 321
43200: PUSH
43201: LD_INT 2
43203: EQUAL
43204: IFFALSE 43221
// bpoints := bpoints * 1.8 ;
43206: LD_ADDR_VAR 0 10
43210: PUSH
43211: LD_VAR 0 10
43215: PUSH
43216: LD_REAL  1.80000000000000E+0000
43219: MUL
43220: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43221: LD_VAR 0 6
43225: PPUSH
43226: CALL_OW 257
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: LD_INT 2
43236: PUSH
43237: LD_INT 3
43239: PUSH
43240: LD_INT 4
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: IN
43249: PUSH
43250: LD_VAR 0 1
43254: PPUSH
43255: LD_INT 51
43257: PPUSH
43258: CALL_OW 321
43262: PUSH
43263: LD_INT 2
43265: EQUAL
43266: AND
43267: IFFALSE 43284
// bpoints := bpoints * 1.2 ;
43269: LD_ADDR_VAR 0 10
43273: PUSH
43274: LD_VAR 0 10
43278: PUSH
43279: LD_REAL  1.20000000000000E+0000
43282: MUL
43283: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43284: LD_VAR 0 6
43288: PPUSH
43289: CALL_OW 257
43293: PUSH
43294: LD_INT 5
43296: PUSH
43297: LD_INT 7
43299: PUSH
43300: LD_INT 9
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: LIST
43307: IN
43308: PUSH
43309: LD_VAR 0 1
43313: PPUSH
43314: LD_INT 52
43316: PPUSH
43317: CALL_OW 321
43321: PUSH
43322: LD_INT 2
43324: EQUAL
43325: AND
43326: IFFALSE 43343
// bpoints := bpoints * 1.5 ;
43328: LD_ADDR_VAR 0 10
43332: PUSH
43333: LD_VAR 0 10
43337: PUSH
43338: LD_REAL  1.50000000000000E+0000
43341: MUL
43342: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43343: LD_VAR 0 1
43347: PPUSH
43348: LD_INT 66
43350: PPUSH
43351: CALL_OW 321
43355: PUSH
43356: LD_INT 2
43358: EQUAL
43359: IFFALSE 43376
// bpoints := bpoints * 1.1 ;
43361: LD_ADDR_VAR 0 10
43365: PUSH
43366: LD_VAR 0 10
43370: PUSH
43371: LD_REAL  1.10000000000000E+0000
43374: MUL
43375: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43376: LD_ADDR_VAR 0 10
43380: PUSH
43381: LD_VAR 0 10
43385: PUSH
43386: LD_VAR 0 6
43390: PPUSH
43391: LD_INT 1
43393: PPUSH
43394: CALL_OW 259
43398: PUSH
43399: LD_REAL  1.15000000000000E+0000
43402: MUL
43403: MUL
43404: ST_TO_ADDR
// end ; unit_vehicle :
43405: GO 44233
43407: LD_INT 2
43409: DOUBLE
43410: EQUAL
43411: IFTRUE 43415
43413: GO 44221
43415: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43416: LD_VAR 0 6
43420: PPUSH
43421: CALL_OW 264
43425: PUSH
43426: LD_INT 2
43428: PUSH
43429: LD_INT 42
43431: PUSH
43432: LD_INT 24
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: LIST
43439: IN
43440: IFFALSE 43461
// points := [ 25 , 5 , 3 ] ;
43442: LD_ADDR_VAR 0 9
43446: PUSH
43447: LD_INT 25
43449: PUSH
43450: LD_INT 5
43452: PUSH
43453: LD_INT 3
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: LIST
43460: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43461: LD_VAR 0 6
43465: PPUSH
43466: CALL_OW 264
43470: PUSH
43471: LD_INT 4
43473: PUSH
43474: LD_INT 43
43476: PUSH
43477: LD_INT 25
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: LIST
43484: IN
43485: IFFALSE 43506
// points := [ 40 , 15 , 5 ] ;
43487: LD_ADDR_VAR 0 9
43491: PUSH
43492: LD_INT 40
43494: PUSH
43495: LD_INT 15
43497: PUSH
43498: LD_INT 5
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: LIST
43505: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43506: LD_VAR 0 6
43510: PPUSH
43511: CALL_OW 264
43515: PUSH
43516: LD_INT 3
43518: PUSH
43519: LD_INT 23
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: IN
43526: IFFALSE 43547
// points := [ 7 , 25 , 8 ] ;
43528: LD_ADDR_VAR 0 9
43532: PUSH
43533: LD_INT 7
43535: PUSH
43536: LD_INT 25
43538: PUSH
43539: LD_INT 8
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43547: LD_VAR 0 6
43551: PPUSH
43552: CALL_OW 264
43556: PUSH
43557: LD_INT 5
43559: PUSH
43560: LD_INT 27
43562: PUSH
43563: LD_INT 44
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: LIST
43570: IN
43571: IFFALSE 43592
// points := [ 14 , 50 , 16 ] ;
43573: LD_ADDR_VAR 0 9
43577: PUSH
43578: LD_INT 14
43580: PUSH
43581: LD_INT 50
43583: PUSH
43584: LD_INT 16
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: LIST
43591: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43592: LD_VAR 0 6
43596: PPUSH
43597: CALL_OW 264
43601: PUSH
43602: LD_INT 6
43604: PUSH
43605: LD_INT 46
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: IN
43612: IFFALSE 43633
// points := [ 32 , 120 , 70 ] ;
43614: LD_ADDR_VAR 0 9
43618: PUSH
43619: LD_INT 32
43621: PUSH
43622: LD_INT 120
43624: PUSH
43625: LD_INT 70
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: LIST
43632: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43633: LD_VAR 0 6
43637: PPUSH
43638: CALL_OW 264
43642: PUSH
43643: LD_INT 7
43645: PUSH
43646: LD_INT 28
43648: PUSH
43649: LD_INT 45
43651: PUSH
43652: LD_INT 92
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: IN
43661: IFFALSE 43682
// points := [ 35 , 20 , 45 ] ;
43663: LD_ADDR_VAR 0 9
43667: PUSH
43668: LD_INT 35
43670: PUSH
43671: LD_INT 20
43673: PUSH
43674: LD_INT 45
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: LIST
43681: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43682: LD_VAR 0 6
43686: PPUSH
43687: CALL_OW 264
43691: PUSH
43692: LD_INT 47
43694: PUSH
43695: EMPTY
43696: LIST
43697: IN
43698: IFFALSE 43719
// points := [ 67 , 45 , 75 ] ;
43700: LD_ADDR_VAR 0 9
43704: PUSH
43705: LD_INT 67
43707: PUSH
43708: LD_INT 45
43710: PUSH
43711: LD_INT 75
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: LIST
43718: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43719: LD_VAR 0 6
43723: PPUSH
43724: CALL_OW 264
43728: PUSH
43729: LD_INT 26
43731: PUSH
43732: EMPTY
43733: LIST
43734: IN
43735: IFFALSE 43756
// points := [ 120 , 30 , 80 ] ;
43737: LD_ADDR_VAR 0 9
43741: PUSH
43742: LD_INT 120
43744: PUSH
43745: LD_INT 30
43747: PUSH
43748: LD_INT 80
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: LIST
43755: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43756: LD_VAR 0 6
43760: PPUSH
43761: CALL_OW 264
43765: PUSH
43766: LD_INT 22
43768: PUSH
43769: EMPTY
43770: LIST
43771: IN
43772: IFFALSE 43793
// points := [ 40 , 1 , 1 ] ;
43774: LD_ADDR_VAR 0 9
43778: PUSH
43779: LD_INT 40
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: LIST
43792: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43793: LD_VAR 0 6
43797: PPUSH
43798: CALL_OW 264
43802: PUSH
43803: LD_INT 29
43805: PUSH
43806: EMPTY
43807: LIST
43808: IN
43809: IFFALSE 43830
// points := [ 70 , 200 , 400 ] ;
43811: LD_ADDR_VAR 0 9
43815: PUSH
43816: LD_INT 70
43818: PUSH
43819: LD_INT 200
43821: PUSH
43822: LD_INT 400
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: LIST
43829: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43830: LD_VAR 0 6
43834: PPUSH
43835: CALL_OW 264
43839: PUSH
43840: LD_INT 14
43842: PUSH
43843: LD_INT 53
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: IN
43850: IFFALSE 43871
// points := [ 40 , 10 , 20 ] ;
43852: LD_ADDR_VAR 0 9
43856: PUSH
43857: LD_INT 40
43859: PUSH
43860: LD_INT 10
43862: PUSH
43863: LD_INT 20
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: LIST
43870: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43871: LD_VAR 0 6
43875: PPUSH
43876: CALL_OW 264
43880: PUSH
43881: LD_INT 9
43883: PUSH
43884: EMPTY
43885: LIST
43886: IN
43887: IFFALSE 43908
// points := [ 5 , 70 , 20 ] ;
43889: LD_ADDR_VAR 0 9
43893: PUSH
43894: LD_INT 5
43896: PUSH
43897: LD_INT 70
43899: PUSH
43900: LD_INT 20
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: LIST
43907: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43908: LD_VAR 0 6
43912: PPUSH
43913: CALL_OW 264
43917: PUSH
43918: LD_INT 10
43920: PUSH
43921: EMPTY
43922: LIST
43923: IN
43924: IFFALSE 43945
// points := [ 35 , 110 , 70 ] ;
43926: LD_ADDR_VAR 0 9
43930: PUSH
43931: LD_INT 35
43933: PUSH
43934: LD_INT 110
43936: PUSH
43937: LD_INT 70
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: LIST
43944: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43945: LD_VAR 0 6
43949: PPUSH
43950: CALL_OW 265
43954: PUSH
43955: LD_INT 25
43957: EQUAL
43958: IFFALSE 43979
// points := [ 80 , 65 , 100 ] ;
43960: LD_ADDR_VAR 0 9
43964: PUSH
43965: LD_INT 80
43967: PUSH
43968: LD_INT 65
43970: PUSH
43971: LD_INT 100
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: LIST
43978: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43979: LD_VAR 0 6
43983: PPUSH
43984: CALL_OW 263
43988: PUSH
43989: LD_INT 1
43991: EQUAL
43992: IFFALSE 44027
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43994: LD_ADDR_VAR 0 10
43998: PUSH
43999: LD_VAR 0 10
44003: PUSH
44004: LD_VAR 0 6
44008: PPUSH
44009: CALL_OW 311
44013: PPUSH
44014: LD_INT 3
44016: PPUSH
44017: CALL_OW 259
44021: PUSH
44022: LD_INT 4
44024: MUL
44025: MUL
44026: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44027: LD_VAR 0 6
44031: PPUSH
44032: CALL_OW 263
44036: PUSH
44037: LD_INT 2
44039: EQUAL
44040: IFFALSE 44091
// begin j := IsControledBy ( i ) ;
44042: LD_ADDR_VAR 0 7
44046: PUSH
44047: LD_VAR 0 6
44051: PPUSH
44052: CALL_OW 312
44056: ST_TO_ADDR
// if j then
44057: LD_VAR 0 7
44061: IFFALSE 44091
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44063: LD_ADDR_VAR 0 10
44067: PUSH
44068: LD_VAR 0 10
44072: PUSH
44073: LD_VAR 0 7
44077: PPUSH
44078: LD_INT 3
44080: PPUSH
44081: CALL_OW 259
44085: PUSH
44086: LD_INT 3
44088: MUL
44089: MUL
44090: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44091: LD_VAR 0 6
44095: PPUSH
44096: CALL_OW 264
44100: PUSH
44101: LD_INT 5
44103: PUSH
44104: LD_INT 6
44106: PUSH
44107: LD_INT 46
44109: PUSH
44110: LD_INT 44
44112: PUSH
44113: LD_INT 47
44115: PUSH
44116: LD_INT 45
44118: PUSH
44119: LD_INT 28
44121: PUSH
44122: LD_INT 7
44124: PUSH
44125: LD_INT 27
44127: PUSH
44128: LD_INT 29
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: IN
44143: PUSH
44144: LD_VAR 0 1
44148: PPUSH
44149: LD_INT 52
44151: PPUSH
44152: CALL_OW 321
44156: PUSH
44157: LD_INT 2
44159: EQUAL
44160: AND
44161: IFFALSE 44178
// bpoints := bpoints * 1.2 ;
44163: LD_ADDR_VAR 0 10
44167: PUSH
44168: LD_VAR 0 10
44172: PUSH
44173: LD_REAL  1.20000000000000E+0000
44176: MUL
44177: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44178: LD_VAR 0 6
44182: PPUSH
44183: CALL_OW 264
44187: PUSH
44188: LD_INT 6
44190: PUSH
44191: LD_INT 46
44193: PUSH
44194: LD_INT 47
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: LIST
44201: IN
44202: IFFALSE 44219
// bpoints := bpoints * 1.2 ;
44204: LD_ADDR_VAR 0 10
44208: PUSH
44209: LD_VAR 0 10
44213: PUSH
44214: LD_REAL  1.20000000000000E+0000
44217: MUL
44218: ST_TO_ADDR
// end ; unit_building :
44219: GO 44233
44221: LD_INT 3
44223: DOUBLE
44224: EQUAL
44225: IFTRUE 44229
44227: GO 44232
44229: POP
// ; end ;
44230: GO 44233
44232: POP
// for j = 1 to 3 do
44233: LD_ADDR_VAR 0 7
44237: PUSH
44238: DOUBLE
44239: LD_INT 1
44241: DEC
44242: ST_TO_ADDR
44243: LD_INT 3
44245: PUSH
44246: FOR_TO
44247: IFFALSE 44300
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44249: LD_ADDR_VAR 0 5
44253: PUSH
44254: LD_VAR 0 5
44258: PPUSH
44259: LD_VAR 0 7
44263: PPUSH
44264: LD_VAR 0 5
44268: PUSH
44269: LD_VAR 0 7
44273: ARRAY
44274: PUSH
44275: LD_VAR 0 9
44279: PUSH
44280: LD_VAR 0 7
44284: ARRAY
44285: PUSH
44286: LD_VAR 0 10
44290: MUL
44291: PLUS
44292: PPUSH
44293: CALL_OW 1
44297: ST_TO_ADDR
44298: GO 44246
44300: POP
44301: POP
// end ;
44302: GO 42781
44304: POP
44305: POP
// result := Replace ( result , 4 , tmp ) ;
44306: LD_ADDR_VAR 0 5
44310: PUSH
44311: LD_VAR 0 5
44315: PPUSH
44316: LD_INT 4
44318: PPUSH
44319: LD_VAR 0 8
44323: PPUSH
44324: CALL_OW 1
44328: ST_TO_ADDR
// end ;
44329: LD_VAR 0 5
44333: RET
// export function DangerAtRange ( unit , range ) ; begin
44334: LD_INT 0
44336: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44337: LD_ADDR_VAR 0 3
44341: PUSH
44342: LD_VAR 0 1
44346: PPUSH
44347: CALL_OW 255
44351: PPUSH
44352: LD_VAR 0 1
44356: PPUSH
44357: CALL_OW 250
44361: PPUSH
44362: LD_VAR 0 1
44366: PPUSH
44367: CALL_OW 251
44371: PPUSH
44372: LD_VAR 0 2
44376: PPUSH
44377: CALL 42633 0 4
44381: ST_TO_ADDR
// end ;
44382: LD_VAR 0 3
44386: RET
// export function DangerInArea ( side , area ) ; begin
44387: LD_INT 0
44389: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44390: LD_ADDR_VAR 0 3
44394: PUSH
44395: LD_VAR 0 2
44399: PPUSH
44400: LD_INT 81
44402: PUSH
44403: LD_VAR 0 1
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PPUSH
44412: CALL_OW 70
44416: ST_TO_ADDR
// end ;
44417: LD_VAR 0 3
44421: RET
// export function IsExtension ( b ) ; begin
44422: LD_INT 0
44424: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44425: LD_ADDR_VAR 0 2
44429: PUSH
44430: LD_VAR 0 1
44434: PUSH
44435: LD_INT 23
44437: PUSH
44438: LD_INT 20
44440: PUSH
44441: LD_INT 22
44443: PUSH
44444: LD_INT 17
44446: PUSH
44447: LD_INT 24
44449: PUSH
44450: LD_INT 21
44452: PUSH
44453: LD_INT 19
44455: PUSH
44456: LD_INT 16
44458: PUSH
44459: LD_INT 25
44461: PUSH
44462: LD_INT 18
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: IN
44477: ST_TO_ADDR
// end ;
44478: LD_VAR 0 2
44482: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44483: LD_INT 0
44485: PPUSH
44486: PPUSH
44487: PPUSH
// result := [ ] ;
44488: LD_ADDR_VAR 0 4
44492: PUSH
44493: EMPTY
44494: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44495: LD_ADDR_VAR 0 5
44499: PUSH
44500: LD_VAR 0 2
44504: PPUSH
44505: LD_INT 21
44507: PUSH
44508: LD_INT 3
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PPUSH
44515: CALL_OW 70
44519: ST_TO_ADDR
// if not tmp then
44520: LD_VAR 0 5
44524: NOT
44525: IFFALSE 44529
// exit ;
44527: GO 44593
// if checkLink then
44529: LD_VAR 0 3
44533: IFFALSE 44583
// begin for i in tmp do
44535: LD_ADDR_VAR 0 6
44539: PUSH
44540: LD_VAR 0 5
44544: PUSH
44545: FOR_IN
44546: IFFALSE 44581
// if GetBase ( i ) <> base then
44548: LD_VAR 0 6
44552: PPUSH
44553: CALL_OW 274
44557: PUSH
44558: LD_VAR 0 1
44562: NONEQUAL
44563: IFFALSE 44579
// ComLinkToBase ( base , i ) ;
44565: LD_VAR 0 1
44569: PPUSH
44570: LD_VAR 0 6
44574: PPUSH
44575: CALL_OW 169
44579: GO 44545
44581: POP
44582: POP
// end ; result := tmp ;
44583: LD_ADDR_VAR 0 4
44587: PUSH
44588: LD_VAR 0 5
44592: ST_TO_ADDR
// end ;
44593: LD_VAR 0 4
44597: RET
// export function ComComplete ( units , b ) ; var i ; begin
44598: LD_INT 0
44600: PPUSH
44601: PPUSH
// if not units then
44602: LD_VAR 0 1
44606: NOT
44607: IFFALSE 44611
// exit ;
44609: GO 44701
// for i in units do
44611: LD_ADDR_VAR 0 4
44615: PUSH
44616: LD_VAR 0 1
44620: PUSH
44621: FOR_IN
44622: IFFALSE 44699
// if BuildingStatus ( b ) = bs_build then
44624: LD_VAR 0 2
44628: PPUSH
44629: CALL_OW 461
44633: PUSH
44634: LD_INT 1
44636: EQUAL
44637: IFFALSE 44697
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44639: LD_VAR 0 4
44643: PPUSH
44644: LD_STRING h
44646: PUSH
44647: LD_VAR 0 2
44651: PPUSH
44652: CALL_OW 250
44656: PUSH
44657: LD_VAR 0 2
44661: PPUSH
44662: CALL_OW 251
44666: PUSH
44667: LD_VAR 0 2
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: PUSH
44690: EMPTY
44691: LIST
44692: PPUSH
44693: CALL_OW 446
44697: GO 44621
44699: POP
44700: POP
// end ;
44701: LD_VAR 0 3
44705: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44706: LD_INT 0
44708: PPUSH
44709: PPUSH
44710: PPUSH
44711: PPUSH
44712: PPUSH
44713: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44714: LD_VAR 0 1
44718: NOT
44719: PUSH
44720: LD_VAR 0 1
44724: PPUSH
44725: CALL_OW 263
44729: PUSH
44730: LD_INT 2
44732: NONEQUAL
44733: OR
44734: IFFALSE 44738
// exit ;
44736: GO 45054
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44738: LD_ADDR_VAR 0 6
44742: PUSH
44743: LD_INT 22
44745: PUSH
44746: LD_VAR 0 1
44750: PPUSH
44751: CALL_OW 255
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 2
44762: PUSH
44763: LD_INT 30
44765: PUSH
44766: LD_INT 36
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 34
44775: PUSH
44776: LD_INT 31
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: LIST
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PPUSH
44792: CALL_OW 69
44796: ST_TO_ADDR
// if not tmp then
44797: LD_VAR 0 6
44801: NOT
44802: IFFALSE 44806
// exit ;
44804: GO 45054
// result := [ ] ;
44806: LD_ADDR_VAR 0 2
44810: PUSH
44811: EMPTY
44812: ST_TO_ADDR
// for i in tmp do
44813: LD_ADDR_VAR 0 3
44817: PUSH
44818: LD_VAR 0 6
44822: PUSH
44823: FOR_IN
44824: IFFALSE 44895
// begin t := UnitsInside ( i ) ;
44826: LD_ADDR_VAR 0 4
44830: PUSH
44831: LD_VAR 0 3
44835: PPUSH
44836: CALL_OW 313
44840: ST_TO_ADDR
// if t then
44841: LD_VAR 0 4
44845: IFFALSE 44893
// for j in t do
44847: LD_ADDR_VAR 0 7
44851: PUSH
44852: LD_VAR 0 4
44856: PUSH
44857: FOR_IN
44858: IFFALSE 44891
// result := Replace ( result , result + 1 , j ) ;
44860: LD_ADDR_VAR 0 2
44864: PUSH
44865: LD_VAR 0 2
44869: PPUSH
44870: LD_VAR 0 2
44874: PUSH
44875: LD_INT 1
44877: PLUS
44878: PPUSH
44879: LD_VAR 0 7
44883: PPUSH
44884: CALL_OW 1
44888: ST_TO_ADDR
44889: GO 44857
44891: POP
44892: POP
// end ;
44893: GO 44823
44895: POP
44896: POP
// if not result then
44897: LD_VAR 0 2
44901: NOT
44902: IFFALSE 44906
// exit ;
44904: GO 45054
// mech := result [ 1 ] ;
44906: LD_ADDR_VAR 0 5
44910: PUSH
44911: LD_VAR 0 2
44915: PUSH
44916: LD_INT 1
44918: ARRAY
44919: ST_TO_ADDR
// if result > 1 then
44920: LD_VAR 0 2
44924: PUSH
44925: LD_INT 1
44927: GREATER
44928: IFFALSE 45040
// begin for i = 2 to result do
44930: LD_ADDR_VAR 0 3
44934: PUSH
44935: DOUBLE
44936: LD_INT 2
44938: DEC
44939: ST_TO_ADDR
44940: LD_VAR 0 2
44944: PUSH
44945: FOR_TO
44946: IFFALSE 45038
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44948: LD_ADDR_VAR 0 4
44952: PUSH
44953: LD_VAR 0 2
44957: PUSH
44958: LD_VAR 0 3
44962: ARRAY
44963: PPUSH
44964: LD_INT 3
44966: PPUSH
44967: CALL_OW 259
44971: PUSH
44972: LD_VAR 0 2
44976: PUSH
44977: LD_VAR 0 3
44981: ARRAY
44982: PPUSH
44983: CALL_OW 432
44987: MINUS
44988: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44989: LD_VAR 0 4
44993: PUSH
44994: LD_VAR 0 5
44998: PPUSH
44999: LD_INT 3
45001: PPUSH
45002: CALL_OW 259
45006: PUSH
45007: LD_VAR 0 5
45011: PPUSH
45012: CALL_OW 432
45016: MINUS
45017: GREATEREQUAL
45018: IFFALSE 45036
// mech := result [ i ] ;
45020: LD_ADDR_VAR 0 5
45024: PUSH
45025: LD_VAR 0 2
45029: PUSH
45030: LD_VAR 0 3
45034: ARRAY
45035: ST_TO_ADDR
// end ;
45036: GO 44945
45038: POP
45039: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45040: LD_VAR 0 1
45044: PPUSH
45045: LD_VAR 0 5
45049: PPUSH
45050: CALL_OW 135
// end ;
45054: LD_VAR 0 2
45058: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45059: LD_INT 0
45061: PPUSH
45062: PPUSH
45063: PPUSH
45064: PPUSH
45065: PPUSH
45066: PPUSH
45067: PPUSH
45068: PPUSH
45069: PPUSH
45070: PPUSH
45071: PPUSH
45072: PPUSH
45073: PPUSH
// result := [ ] ;
45074: LD_ADDR_VAR 0 7
45078: PUSH
45079: EMPTY
45080: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45081: LD_VAR 0 1
45085: PPUSH
45086: CALL_OW 266
45090: PUSH
45091: LD_INT 0
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: IN
45101: NOT
45102: IFFALSE 45106
// exit ;
45104: GO 46740
// if name then
45106: LD_VAR 0 3
45110: IFFALSE 45126
// SetBName ( base_dep , name ) ;
45112: LD_VAR 0 1
45116: PPUSH
45117: LD_VAR 0 3
45121: PPUSH
45122: CALL_OW 500
// base := GetBase ( base_dep ) ;
45126: LD_ADDR_VAR 0 15
45130: PUSH
45131: LD_VAR 0 1
45135: PPUSH
45136: CALL_OW 274
45140: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45141: LD_ADDR_VAR 0 16
45145: PUSH
45146: LD_VAR 0 1
45150: PPUSH
45151: CALL_OW 255
45155: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45156: LD_ADDR_VAR 0 17
45160: PUSH
45161: LD_VAR 0 1
45165: PPUSH
45166: CALL_OW 248
45170: ST_TO_ADDR
// if sources then
45171: LD_VAR 0 5
45175: IFFALSE 45222
// for i = 1 to 3 do
45177: LD_ADDR_VAR 0 8
45181: PUSH
45182: DOUBLE
45183: LD_INT 1
45185: DEC
45186: ST_TO_ADDR
45187: LD_INT 3
45189: PUSH
45190: FOR_TO
45191: IFFALSE 45220
// AddResourceType ( base , i , sources [ i ] ) ;
45193: LD_VAR 0 15
45197: PPUSH
45198: LD_VAR 0 8
45202: PPUSH
45203: LD_VAR 0 5
45207: PUSH
45208: LD_VAR 0 8
45212: ARRAY
45213: PPUSH
45214: CALL_OW 276
45218: GO 45190
45220: POP
45221: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45222: LD_ADDR_VAR 0 18
45226: PUSH
45227: LD_VAR 0 15
45231: PPUSH
45232: LD_VAR 0 2
45236: PPUSH
45237: LD_INT 1
45239: PPUSH
45240: CALL 44483 0 3
45244: ST_TO_ADDR
// InitHc ;
45245: CALL_OW 19
// InitUc ;
45249: CALL_OW 18
// uc_side := side ;
45253: LD_ADDR_OWVAR 20
45257: PUSH
45258: LD_VAR 0 16
45262: ST_TO_ADDR
// uc_nation := nation ;
45263: LD_ADDR_OWVAR 21
45267: PUSH
45268: LD_VAR 0 17
45272: ST_TO_ADDR
// if buildings then
45273: LD_VAR 0 18
45277: IFFALSE 46599
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45279: LD_ADDR_VAR 0 19
45283: PUSH
45284: LD_VAR 0 18
45288: PPUSH
45289: LD_INT 2
45291: PUSH
45292: LD_INT 30
45294: PUSH
45295: LD_INT 29
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 30
45304: PUSH
45305: LD_INT 30
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: LIST
45316: PPUSH
45317: CALL_OW 72
45321: ST_TO_ADDR
// if tmp then
45322: LD_VAR 0 19
45326: IFFALSE 45374
// for i in tmp do
45328: LD_ADDR_VAR 0 8
45332: PUSH
45333: LD_VAR 0 19
45337: PUSH
45338: FOR_IN
45339: IFFALSE 45372
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45341: LD_VAR 0 8
45345: PPUSH
45346: CALL_OW 250
45350: PPUSH
45351: LD_VAR 0 8
45355: PPUSH
45356: CALL_OW 251
45360: PPUSH
45361: LD_VAR 0 16
45365: PPUSH
45366: CALL_OW 441
45370: GO 45338
45372: POP
45373: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45374: LD_VAR 0 18
45378: PPUSH
45379: LD_INT 2
45381: PUSH
45382: LD_INT 30
45384: PUSH
45385: LD_INT 32
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 30
45394: PUSH
45395: LD_INT 33
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: LIST
45406: PPUSH
45407: CALL_OW 72
45411: IFFALSE 45499
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45413: LD_ADDR_VAR 0 8
45417: PUSH
45418: LD_VAR 0 18
45422: PPUSH
45423: LD_INT 2
45425: PUSH
45426: LD_INT 30
45428: PUSH
45429: LD_INT 32
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 30
45438: PUSH
45439: LD_INT 33
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: LIST
45450: PPUSH
45451: CALL_OW 72
45455: PUSH
45456: FOR_IN
45457: IFFALSE 45497
// begin if not GetBWeapon ( i ) then
45459: LD_VAR 0 8
45463: PPUSH
45464: CALL_OW 269
45468: NOT
45469: IFFALSE 45495
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45471: LD_VAR 0 8
45475: PPUSH
45476: LD_VAR 0 8
45480: PPUSH
45481: LD_VAR 0 2
45485: PPUSH
45486: CALL 46745 0 2
45490: PPUSH
45491: CALL_OW 431
// end ;
45495: GO 45456
45497: POP
45498: POP
// end ; for i = 1 to personel do
45499: LD_ADDR_VAR 0 8
45503: PUSH
45504: DOUBLE
45505: LD_INT 1
45507: DEC
45508: ST_TO_ADDR
45509: LD_VAR 0 6
45513: PUSH
45514: FOR_TO
45515: IFFALSE 46579
// begin if i > 4 then
45517: LD_VAR 0 8
45521: PUSH
45522: LD_INT 4
45524: GREATER
45525: IFFALSE 45529
// break ;
45527: GO 46579
// case i of 1 :
45529: LD_VAR 0 8
45533: PUSH
45534: LD_INT 1
45536: DOUBLE
45537: EQUAL
45538: IFTRUE 45542
45540: GO 45622
45542: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45543: LD_ADDR_VAR 0 12
45547: PUSH
45548: LD_VAR 0 18
45552: PPUSH
45553: LD_INT 22
45555: PUSH
45556: LD_VAR 0 16
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 58
45567: PUSH
45568: EMPTY
45569: LIST
45570: PUSH
45571: LD_INT 2
45573: PUSH
45574: LD_INT 30
45576: PUSH
45577: LD_INT 32
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 30
45586: PUSH
45587: LD_INT 4
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 30
45596: PUSH
45597: LD_INT 5
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: LIST
45614: PPUSH
45615: CALL_OW 72
45619: ST_TO_ADDR
45620: GO 45844
45622: LD_INT 2
45624: DOUBLE
45625: EQUAL
45626: IFTRUE 45630
45628: GO 45692
45630: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45631: LD_ADDR_VAR 0 12
45635: PUSH
45636: LD_VAR 0 18
45640: PPUSH
45641: LD_INT 22
45643: PUSH
45644: LD_VAR 0 16
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 2
45655: PUSH
45656: LD_INT 30
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 30
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: LIST
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PPUSH
45685: CALL_OW 72
45689: ST_TO_ADDR
45690: GO 45844
45692: LD_INT 3
45694: DOUBLE
45695: EQUAL
45696: IFTRUE 45700
45698: GO 45762
45700: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45701: LD_ADDR_VAR 0 12
45705: PUSH
45706: LD_VAR 0 18
45710: PPUSH
45711: LD_INT 22
45713: PUSH
45714: LD_VAR 0 16
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 2
45725: PUSH
45726: LD_INT 30
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 30
45738: PUSH
45739: LD_INT 3
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: LIST
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PPUSH
45755: CALL_OW 72
45759: ST_TO_ADDR
45760: GO 45844
45762: LD_INT 4
45764: DOUBLE
45765: EQUAL
45766: IFTRUE 45770
45768: GO 45843
45770: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45771: LD_ADDR_VAR 0 12
45775: PUSH
45776: LD_VAR 0 18
45780: PPUSH
45781: LD_INT 22
45783: PUSH
45784: LD_VAR 0 16
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 2
45795: PUSH
45796: LD_INT 30
45798: PUSH
45799: LD_INT 6
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 30
45808: PUSH
45809: LD_INT 7
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 30
45818: PUSH
45819: LD_INT 8
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PPUSH
45836: CALL_OW 72
45840: ST_TO_ADDR
45841: GO 45844
45843: POP
// if i = 1 then
45844: LD_VAR 0 8
45848: PUSH
45849: LD_INT 1
45851: EQUAL
45852: IFFALSE 45963
// begin tmp := [ ] ;
45854: LD_ADDR_VAR 0 19
45858: PUSH
45859: EMPTY
45860: ST_TO_ADDR
// for j in f do
45861: LD_ADDR_VAR 0 9
45865: PUSH
45866: LD_VAR 0 12
45870: PUSH
45871: FOR_IN
45872: IFFALSE 45945
// if GetBType ( j ) = b_bunker then
45874: LD_VAR 0 9
45878: PPUSH
45879: CALL_OW 266
45883: PUSH
45884: LD_INT 32
45886: EQUAL
45887: IFFALSE 45914
// tmp := Insert ( tmp , 1 , j ) else
45889: LD_ADDR_VAR 0 19
45893: PUSH
45894: LD_VAR 0 19
45898: PPUSH
45899: LD_INT 1
45901: PPUSH
45902: LD_VAR 0 9
45906: PPUSH
45907: CALL_OW 2
45911: ST_TO_ADDR
45912: GO 45943
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45914: LD_ADDR_VAR 0 19
45918: PUSH
45919: LD_VAR 0 19
45923: PPUSH
45924: LD_VAR 0 19
45928: PUSH
45929: LD_INT 1
45931: PLUS
45932: PPUSH
45933: LD_VAR 0 9
45937: PPUSH
45938: CALL_OW 2
45942: ST_TO_ADDR
45943: GO 45871
45945: POP
45946: POP
// if tmp then
45947: LD_VAR 0 19
45951: IFFALSE 45963
// f := tmp ;
45953: LD_ADDR_VAR 0 12
45957: PUSH
45958: LD_VAR 0 19
45962: ST_TO_ADDR
// end ; x := personel [ i ] ;
45963: LD_ADDR_VAR 0 13
45967: PUSH
45968: LD_VAR 0 6
45972: PUSH
45973: LD_VAR 0 8
45977: ARRAY
45978: ST_TO_ADDR
// if x = - 1 then
45979: LD_VAR 0 13
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: EQUAL
45988: IFFALSE 46197
// begin for j in f do
45990: LD_ADDR_VAR 0 9
45994: PUSH
45995: LD_VAR 0 12
45999: PUSH
46000: FOR_IN
46001: IFFALSE 46193
// repeat InitHc ;
46003: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46007: LD_VAR 0 9
46011: PPUSH
46012: CALL_OW 266
46016: PUSH
46017: LD_INT 5
46019: EQUAL
46020: IFFALSE 46090
// begin if UnitsInside ( j ) < 3 then
46022: LD_VAR 0 9
46026: PPUSH
46027: CALL_OW 313
46031: PUSH
46032: LD_INT 3
46034: LESS
46035: IFFALSE 46071
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46037: LD_INT 0
46039: PPUSH
46040: LD_INT 5
46042: PUSH
46043: LD_INT 8
46045: PUSH
46046: LD_INT 9
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: LIST
46053: PUSH
46054: LD_VAR 0 17
46058: ARRAY
46059: PPUSH
46060: LD_VAR 0 4
46064: PPUSH
46065: CALL_OW 380
46069: GO 46088
// PrepareHuman ( false , i , skill ) ;
46071: LD_INT 0
46073: PPUSH
46074: LD_VAR 0 8
46078: PPUSH
46079: LD_VAR 0 4
46083: PPUSH
46084: CALL_OW 380
// end else
46088: GO 46107
// PrepareHuman ( false , i , skill ) ;
46090: LD_INT 0
46092: PPUSH
46093: LD_VAR 0 8
46097: PPUSH
46098: LD_VAR 0 4
46102: PPUSH
46103: CALL_OW 380
// un := CreateHuman ;
46107: LD_ADDR_VAR 0 14
46111: PUSH
46112: CALL_OW 44
46116: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46117: LD_ADDR_VAR 0 7
46121: PUSH
46122: LD_VAR 0 7
46126: PPUSH
46127: LD_INT 1
46129: PPUSH
46130: LD_VAR 0 14
46134: PPUSH
46135: CALL_OW 2
46139: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46140: LD_VAR 0 14
46144: PPUSH
46145: LD_VAR 0 9
46149: PPUSH
46150: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46154: LD_VAR 0 9
46158: PPUSH
46159: CALL_OW 313
46163: PUSH
46164: LD_INT 6
46166: EQUAL
46167: PUSH
46168: LD_VAR 0 9
46172: PPUSH
46173: CALL_OW 266
46177: PUSH
46178: LD_INT 32
46180: PUSH
46181: LD_INT 31
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: IN
46188: OR
46189: IFFALSE 46003
46191: GO 46000
46193: POP
46194: POP
// end else
46195: GO 46577
// for j = 1 to x do
46197: LD_ADDR_VAR 0 9
46201: PUSH
46202: DOUBLE
46203: LD_INT 1
46205: DEC
46206: ST_TO_ADDR
46207: LD_VAR 0 13
46211: PUSH
46212: FOR_TO
46213: IFFALSE 46575
// begin InitHc ;
46215: CALL_OW 19
// if not f then
46219: LD_VAR 0 12
46223: NOT
46224: IFFALSE 46313
// begin PrepareHuman ( false , i , skill ) ;
46226: LD_INT 0
46228: PPUSH
46229: LD_VAR 0 8
46233: PPUSH
46234: LD_VAR 0 4
46238: PPUSH
46239: CALL_OW 380
// un := CreateHuman ;
46243: LD_ADDR_VAR 0 14
46247: PUSH
46248: CALL_OW 44
46252: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46253: LD_ADDR_VAR 0 7
46257: PUSH
46258: LD_VAR 0 7
46262: PPUSH
46263: LD_INT 1
46265: PPUSH
46266: LD_VAR 0 14
46270: PPUSH
46271: CALL_OW 2
46275: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46276: LD_VAR 0 14
46280: PPUSH
46281: LD_VAR 0 1
46285: PPUSH
46286: CALL_OW 250
46290: PPUSH
46291: LD_VAR 0 1
46295: PPUSH
46296: CALL_OW 251
46300: PPUSH
46301: LD_INT 10
46303: PPUSH
46304: LD_INT 0
46306: PPUSH
46307: CALL_OW 50
// continue ;
46311: GO 46212
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46313: LD_VAR 0 12
46317: PUSH
46318: LD_INT 1
46320: ARRAY
46321: PPUSH
46322: CALL_OW 313
46326: PUSH
46327: LD_VAR 0 12
46331: PUSH
46332: LD_INT 1
46334: ARRAY
46335: PPUSH
46336: CALL_OW 266
46340: PUSH
46341: LD_INT 32
46343: PUSH
46344: LD_INT 31
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: IN
46351: AND
46352: PUSH
46353: LD_VAR 0 12
46357: PUSH
46358: LD_INT 1
46360: ARRAY
46361: PPUSH
46362: CALL_OW 313
46366: PUSH
46367: LD_INT 6
46369: EQUAL
46370: OR
46371: IFFALSE 46391
// f := Delete ( f , 1 ) ;
46373: LD_ADDR_VAR 0 12
46377: PUSH
46378: LD_VAR 0 12
46382: PPUSH
46383: LD_INT 1
46385: PPUSH
46386: CALL_OW 3
46390: ST_TO_ADDR
// if not f then
46391: LD_VAR 0 12
46395: NOT
46396: IFFALSE 46414
// begin x := x + 2 ;
46398: LD_ADDR_VAR 0 13
46402: PUSH
46403: LD_VAR 0 13
46407: PUSH
46408: LD_INT 2
46410: PLUS
46411: ST_TO_ADDR
// continue ;
46412: GO 46212
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46414: LD_VAR 0 12
46418: PUSH
46419: LD_INT 1
46421: ARRAY
46422: PPUSH
46423: CALL_OW 266
46427: PUSH
46428: LD_INT 5
46430: EQUAL
46431: IFFALSE 46505
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46433: LD_VAR 0 12
46437: PUSH
46438: LD_INT 1
46440: ARRAY
46441: PPUSH
46442: CALL_OW 313
46446: PUSH
46447: LD_INT 3
46449: LESS
46450: IFFALSE 46486
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46452: LD_INT 0
46454: PPUSH
46455: LD_INT 5
46457: PUSH
46458: LD_INT 8
46460: PUSH
46461: LD_INT 9
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: LIST
46468: PUSH
46469: LD_VAR 0 17
46473: ARRAY
46474: PPUSH
46475: LD_VAR 0 4
46479: PPUSH
46480: CALL_OW 380
46484: GO 46503
// PrepareHuman ( false , i , skill ) ;
46486: LD_INT 0
46488: PPUSH
46489: LD_VAR 0 8
46493: PPUSH
46494: LD_VAR 0 4
46498: PPUSH
46499: CALL_OW 380
// end else
46503: GO 46522
// PrepareHuman ( false , i , skill ) ;
46505: LD_INT 0
46507: PPUSH
46508: LD_VAR 0 8
46512: PPUSH
46513: LD_VAR 0 4
46517: PPUSH
46518: CALL_OW 380
// un := CreateHuman ;
46522: LD_ADDR_VAR 0 14
46526: PUSH
46527: CALL_OW 44
46531: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46532: LD_ADDR_VAR 0 7
46536: PUSH
46537: LD_VAR 0 7
46541: PPUSH
46542: LD_INT 1
46544: PPUSH
46545: LD_VAR 0 14
46549: PPUSH
46550: CALL_OW 2
46554: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46555: LD_VAR 0 14
46559: PPUSH
46560: LD_VAR 0 12
46564: PUSH
46565: LD_INT 1
46567: ARRAY
46568: PPUSH
46569: CALL_OW 52
// end ;
46573: GO 46212
46575: POP
46576: POP
// end ;
46577: GO 45514
46579: POP
46580: POP
// result := result ^ buildings ;
46581: LD_ADDR_VAR 0 7
46585: PUSH
46586: LD_VAR 0 7
46590: PUSH
46591: LD_VAR 0 18
46595: ADD
46596: ST_TO_ADDR
// end else
46597: GO 46740
// begin for i = 1 to personel do
46599: LD_ADDR_VAR 0 8
46603: PUSH
46604: DOUBLE
46605: LD_INT 1
46607: DEC
46608: ST_TO_ADDR
46609: LD_VAR 0 6
46613: PUSH
46614: FOR_TO
46615: IFFALSE 46738
// begin if i > 4 then
46617: LD_VAR 0 8
46621: PUSH
46622: LD_INT 4
46624: GREATER
46625: IFFALSE 46629
// break ;
46627: GO 46738
// x := personel [ i ] ;
46629: LD_ADDR_VAR 0 13
46633: PUSH
46634: LD_VAR 0 6
46638: PUSH
46639: LD_VAR 0 8
46643: ARRAY
46644: ST_TO_ADDR
// if x = - 1 then
46645: LD_VAR 0 13
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: EQUAL
46654: IFFALSE 46658
// continue ;
46656: GO 46614
// PrepareHuman ( false , i , skill ) ;
46658: LD_INT 0
46660: PPUSH
46661: LD_VAR 0 8
46665: PPUSH
46666: LD_VAR 0 4
46670: PPUSH
46671: CALL_OW 380
// un := CreateHuman ;
46675: LD_ADDR_VAR 0 14
46679: PUSH
46680: CALL_OW 44
46684: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46685: LD_VAR 0 14
46689: PPUSH
46690: LD_VAR 0 1
46694: PPUSH
46695: CALL_OW 250
46699: PPUSH
46700: LD_VAR 0 1
46704: PPUSH
46705: CALL_OW 251
46709: PPUSH
46710: LD_INT 10
46712: PPUSH
46713: LD_INT 0
46715: PPUSH
46716: CALL_OW 50
// result := result ^ un ;
46720: LD_ADDR_VAR 0 7
46724: PUSH
46725: LD_VAR 0 7
46729: PUSH
46730: LD_VAR 0 14
46734: ADD
46735: ST_TO_ADDR
// end ;
46736: GO 46614
46738: POP
46739: POP
// end ; end ;
46740: LD_VAR 0 7
46744: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46745: LD_INT 0
46747: PPUSH
46748: PPUSH
46749: PPUSH
46750: PPUSH
46751: PPUSH
46752: PPUSH
46753: PPUSH
46754: PPUSH
46755: PPUSH
46756: PPUSH
46757: PPUSH
46758: PPUSH
46759: PPUSH
46760: PPUSH
46761: PPUSH
46762: PPUSH
// result := false ;
46763: LD_ADDR_VAR 0 3
46767: PUSH
46768: LD_INT 0
46770: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46771: LD_VAR 0 1
46775: NOT
46776: PUSH
46777: LD_VAR 0 1
46781: PPUSH
46782: CALL_OW 266
46786: PUSH
46787: LD_INT 32
46789: PUSH
46790: LD_INT 33
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: IN
46797: NOT
46798: OR
46799: IFFALSE 46803
// exit ;
46801: GO 47912
// nat := GetNation ( tower ) ;
46803: LD_ADDR_VAR 0 12
46807: PUSH
46808: LD_VAR 0 1
46812: PPUSH
46813: CALL_OW 248
46817: ST_TO_ADDR
// side := GetSide ( tower ) ;
46818: LD_ADDR_VAR 0 16
46822: PUSH
46823: LD_VAR 0 1
46827: PPUSH
46828: CALL_OW 255
46832: ST_TO_ADDR
// x := GetX ( tower ) ;
46833: LD_ADDR_VAR 0 10
46837: PUSH
46838: LD_VAR 0 1
46842: PPUSH
46843: CALL_OW 250
46847: ST_TO_ADDR
// y := GetY ( tower ) ;
46848: LD_ADDR_VAR 0 11
46852: PUSH
46853: LD_VAR 0 1
46857: PPUSH
46858: CALL_OW 251
46862: ST_TO_ADDR
// if not x or not y then
46863: LD_VAR 0 10
46867: NOT
46868: PUSH
46869: LD_VAR 0 11
46873: NOT
46874: OR
46875: IFFALSE 46879
// exit ;
46877: GO 47912
// weapon := 0 ;
46879: LD_ADDR_VAR 0 18
46883: PUSH
46884: LD_INT 0
46886: ST_TO_ADDR
// fac_list := [ ] ;
46887: LD_ADDR_VAR 0 17
46891: PUSH
46892: EMPTY
46893: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46894: LD_ADDR_VAR 0 6
46898: PUSH
46899: LD_VAR 0 1
46903: PPUSH
46904: CALL_OW 274
46908: PPUSH
46909: LD_VAR 0 2
46913: PPUSH
46914: LD_INT 0
46916: PPUSH
46917: CALL 44483 0 3
46921: PPUSH
46922: LD_INT 30
46924: PUSH
46925: LD_INT 3
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PPUSH
46932: CALL_OW 72
46936: ST_TO_ADDR
// if not factories then
46937: LD_VAR 0 6
46941: NOT
46942: IFFALSE 46946
// exit ;
46944: GO 47912
// for i in factories do
46946: LD_ADDR_VAR 0 8
46950: PUSH
46951: LD_VAR 0 6
46955: PUSH
46956: FOR_IN
46957: IFFALSE 46982
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46959: LD_ADDR_VAR 0 17
46963: PUSH
46964: LD_VAR 0 17
46968: PUSH
46969: LD_VAR 0 8
46973: PPUSH
46974: CALL_OW 478
46978: UNION
46979: ST_TO_ADDR
46980: GO 46956
46982: POP
46983: POP
// if not fac_list then
46984: LD_VAR 0 17
46988: NOT
46989: IFFALSE 46993
// exit ;
46991: GO 47912
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46993: LD_ADDR_VAR 0 5
46997: PUSH
46998: LD_INT 4
47000: PUSH
47001: LD_INT 5
47003: PUSH
47004: LD_INT 9
47006: PUSH
47007: LD_INT 10
47009: PUSH
47010: LD_INT 6
47012: PUSH
47013: LD_INT 7
47015: PUSH
47016: LD_INT 11
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 27
47030: PUSH
47031: LD_INT 28
47033: PUSH
47034: LD_INT 26
47036: PUSH
47037: LD_INT 30
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 43
47048: PUSH
47049: LD_INT 44
47051: PUSH
47052: LD_INT 46
47054: PUSH
47055: LD_INT 45
47057: PUSH
47058: LD_INT 47
47060: PUSH
47061: LD_INT 49
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: LIST
47076: PUSH
47077: LD_VAR 0 12
47081: ARRAY
47082: ST_TO_ADDR
// list := list isect fac_list ;
47083: LD_ADDR_VAR 0 5
47087: PUSH
47088: LD_VAR 0 5
47092: PUSH
47093: LD_VAR 0 17
47097: ISECT
47098: ST_TO_ADDR
// if not list then
47099: LD_VAR 0 5
47103: NOT
47104: IFFALSE 47108
// exit ;
47106: GO 47912
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47108: LD_VAR 0 12
47112: PUSH
47113: LD_INT 3
47115: EQUAL
47116: PUSH
47117: LD_INT 49
47119: PUSH
47120: LD_VAR 0 5
47124: IN
47125: AND
47126: PUSH
47127: LD_INT 31
47129: PPUSH
47130: LD_VAR 0 16
47134: PPUSH
47135: CALL_OW 321
47139: PUSH
47140: LD_INT 2
47142: EQUAL
47143: AND
47144: IFFALSE 47204
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47146: LD_INT 22
47148: PUSH
47149: LD_VAR 0 16
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 35
47160: PUSH
47161: LD_INT 49
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 91
47170: PUSH
47171: LD_VAR 0 1
47175: PUSH
47176: LD_INT 10
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: LIST
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: LIST
47188: PPUSH
47189: CALL_OW 69
47193: NOT
47194: IFFALSE 47204
// weapon := ru_time_lapser ;
47196: LD_ADDR_VAR 0 18
47200: PUSH
47201: LD_INT 49
47203: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47204: LD_VAR 0 12
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: IN
47219: PUSH
47220: LD_INT 11
47222: PUSH
47223: LD_VAR 0 5
47227: IN
47228: PUSH
47229: LD_INT 30
47231: PUSH
47232: LD_VAR 0 5
47236: IN
47237: OR
47238: AND
47239: PUSH
47240: LD_INT 6
47242: PPUSH
47243: LD_VAR 0 16
47247: PPUSH
47248: CALL_OW 321
47252: PUSH
47253: LD_INT 2
47255: EQUAL
47256: AND
47257: IFFALSE 47422
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47259: LD_INT 22
47261: PUSH
47262: LD_VAR 0 16
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: LD_INT 35
47276: PUSH
47277: LD_INT 11
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 35
47286: PUSH
47287: LD_INT 30
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 91
47301: PUSH
47302: LD_VAR 0 1
47306: PUSH
47307: LD_INT 18
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: LIST
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: LIST
47319: PPUSH
47320: CALL_OW 69
47324: NOT
47325: PUSH
47326: LD_INT 22
47328: PUSH
47329: LD_VAR 0 16
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 2
47340: PUSH
47341: LD_INT 30
47343: PUSH
47344: LD_INT 32
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 30
47353: PUSH
47354: LD_INT 33
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 91
47368: PUSH
47369: LD_VAR 0 1
47373: PUSH
47374: LD_INT 12
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: LIST
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: LIST
47386: PUSH
47387: EMPTY
47388: LIST
47389: PPUSH
47390: CALL_OW 69
47394: PUSH
47395: LD_INT 2
47397: GREATER
47398: AND
47399: IFFALSE 47422
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47401: LD_ADDR_VAR 0 18
47405: PUSH
47406: LD_INT 11
47408: PUSH
47409: LD_INT 30
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_VAR 0 12
47420: ARRAY
47421: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47422: LD_VAR 0 18
47426: NOT
47427: PUSH
47428: LD_INT 40
47430: PPUSH
47431: LD_VAR 0 16
47435: PPUSH
47436: CALL_OW 321
47440: PUSH
47441: LD_INT 2
47443: EQUAL
47444: AND
47445: PUSH
47446: LD_INT 7
47448: PUSH
47449: LD_VAR 0 5
47453: IN
47454: PUSH
47455: LD_INT 28
47457: PUSH
47458: LD_VAR 0 5
47462: IN
47463: OR
47464: PUSH
47465: LD_INT 45
47467: PUSH
47468: LD_VAR 0 5
47472: IN
47473: OR
47474: AND
47475: IFFALSE 47729
// begin hex := GetHexInfo ( x , y ) ;
47477: LD_ADDR_VAR 0 4
47481: PUSH
47482: LD_VAR 0 10
47486: PPUSH
47487: LD_VAR 0 11
47491: PPUSH
47492: CALL_OW 546
47496: ST_TO_ADDR
// if hex [ 1 ] then
47497: LD_VAR 0 4
47501: PUSH
47502: LD_INT 1
47504: ARRAY
47505: IFFALSE 47509
// exit ;
47507: GO 47912
// height := hex [ 2 ] ;
47509: LD_ADDR_VAR 0 15
47513: PUSH
47514: LD_VAR 0 4
47518: PUSH
47519: LD_INT 2
47521: ARRAY
47522: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47523: LD_ADDR_VAR 0 14
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: LD_INT 2
47533: PUSH
47534: LD_INT 3
47536: PUSH
47537: LD_INT 5
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: ST_TO_ADDR
// for i in tmp do
47546: LD_ADDR_VAR 0 8
47550: PUSH
47551: LD_VAR 0 14
47555: PUSH
47556: FOR_IN
47557: IFFALSE 47727
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47559: LD_ADDR_VAR 0 9
47563: PUSH
47564: LD_VAR 0 10
47568: PPUSH
47569: LD_VAR 0 8
47573: PPUSH
47574: LD_INT 5
47576: PPUSH
47577: CALL_OW 272
47581: PUSH
47582: LD_VAR 0 11
47586: PPUSH
47587: LD_VAR 0 8
47591: PPUSH
47592: LD_INT 5
47594: PPUSH
47595: CALL_OW 273
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47604: LD_VAR 0 9
47608: PUSH
47609: LD_INT 1
47611: ARRAY
47612: PPUSH
47613: LD_VAR 0 9
47617: PUSH
47618: LD_INT 2
47620: ARRAY
47621: PPUSH
47622: CALL_OW 488
47626: IFFALSE 47725
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47628: LD_ADDR_VAR 0 4
47632: PUSH
47633: LD_VAR 0 9
47637: PUSH
47638: LD_INT 1
47640: ARRAY
47641: PPUSH
47642: LD_VAR 0 9
47646: PUSH
47647: LD_INT 2
47649: ARRAY
47650: PPUSH
47651: CALL_OW 546
47655: ST_TO_ADDR
// if hex [ 1 ] then
47656: LD_VAR 0 4
47660: PUSH
47661: LD_INT 1
47663: ARRAY
47664: IFFALSE 47668
// continue ;
47666: GO 47556
// h := hex [ 2 ] ;
47668: LD_ADDR_VAR 0 13
47672: PUSH
47673: LD_VAR 0 4
47677: PUSH
47678: LD_INT 2
47680: ARRAY
47681: ST_TO_ADDR
// if h + 7 < height then
47682: LD_VAR 0 13
47686: PUSH
47687: LD_INT 7
47689: PLUS
47690: PUSH
47691: LD_VAR 0 15
47695: LESS
47696: IFFALSE 47725
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47698: LD_ADDR_VAR 0 18
47702: PUSH
47703: LD_INT 7
47705: PUSH
47706: LD_INT 28
47708: PUSH
47709: LD_INT 45
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: LIST
47716: PUSH
47717: LD_VAR 0 12
47721: ARRAY
47722: ST_TO_ADDR
// break ;
47723: GO 47727
// end ; end ; end ;
47725: GO 47556
47727: POP
47728: POP
// end ; if not weapon then
47729: LD_VAR 0 18
47733: NOT
47734: IFFALSE 47794
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47736: LD_ADDR_VAR 0 5
47740: PUSH
47741: LD_VAR 0 5
47745: PUSH
47746: LD_INT 11
47748: PUSH
47749: LD_INT 30
47751: PUSH
47752: LD_INT 49
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: LIST
47759: DIFF
47760: ST_TO_ADDR
// if not list then
47761: LD_VAR 0 5
47765: NOT
47766: IFFALSE 47770
// exit ;
47768: GO 47912
// weapon := list [ rand ( 1 , list ) ] ;
47770: LD_ADDR_VAR 0 18
47774: PUSH
47775: LD_VAR 0 5
47779: PUSH
47780: LD_INT 1
47782: PPUSH
47783: LD_VAR 0 5
47787: PPUSH
47788: CALL_OW 12
47792: ARRAY
47793: ST_TO_ADDR
// end ; if weapon then
47794: LD_VAR 0 18
47798: IFFALSE 47912
// begin tmp := CostOfWeapon ( weapon ) ;
47800: LD_ADDR_VAR 0 14
47804: PUSH
47805: LD_VAR 0 18
47809: PPUSH
47810: CALL_OW 451
47814: ST_TO_ADDR
// j := GetBase ( tower ) ;
47815: LD_ADDR_VAR 0 9
47819: PUSH
47820: LD_VAR 0 1
47824: PPUSH
47825: CALL_OW 274
47829: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47830: LD_VAR 0 9
47834: PPUSH
47835: LD_INT 1
47837: PPUSH
47838: CALL_OW 275
47842: PUSH
47843: LD_VAR 0 14
47847: PUSH
47848: LD_INT 1
47850: ARRAY
47851: GREATEREQUAL
47852: PUSH
47853: LD_VAR 0 9
47857: PPUSH
47858: LD_INT 2
47860: PPUSH
47861: CALL_OW 275
47865: PUSH
47866: LD_VAR 0 14
47870: PUSH
47871: LD_INT 2
47873: ARRAY
47874: GREATEREQUAL
47875: AND
47876: PUSH
47877: LD_VAR 0 9
47881: PPUSH
47882: LD_INT 3
47884: PPUSH
47885: CALL_OW 275
47889: PUSH
47890: LD_VAR 0 14
47894: PUSH
47895: LD_INT 3
47897: ARRAY
47898: GREATEREQUAL
47899: AND
47900: IFFALSE 47912
// result := weapon ;
47902: LD_ADDR_VAR 0 3
47906: PUSH
47907: LD_VAR 0 18
47911: ST_TO_ADDR
// end ; end ;
47912: LD_VAR 0 3
47916: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47917: LD_INT 0
47919: PPUSH
47920: PPUSH
// result := true ;
47921: LD_ADDR_VAR 0 3
47925: PUSH
47926: LD_INT 1
47928: ST_TO_ADDR
// if array1 = array2 then
47929: LD_VAR 0 1
47933: PUSH
47934: LD_VAR 0 2
47938: EQUAL
47939: IFFALSE 47999
// begin for i = 1 to array1 do
47941: LD_ADDR_VAR 0 4
47945: PUSH
47946: DOUBLE
47947: LD_INT 1
47949: DEC
47950: ST_TO_ADDR
47951: LD_VAR 0 1
47955: PUSH
47956: FOR_TO
47957: IFFALSE 47995
// if array1 [ i ] <> array2 [ i ] then
47959: LD_VAR 0 1
47963: PUSH
47964: LD_VAR 0 4
47968: ARRAY
47969: PUSH
47970: LD_VAR 0 2
47974: PUSH
47975: LD_VAR 0 4
47979: ARRAY
47980: NONEQUAL
47981: IFFALSE 47993
// begin result := false ;
47983: LD_ADDR_VAR 0 3
47987: PUSH
47988: LD_INT 0
47990: ST_TO_ADDR
// break ;
47991: GO 47995
// end ;
47993: GO 47956
47995: POP
47996: POP
// end else
47997: GO 48007
// result := false ;
47999: LD_ADDR_VAR 0 3
48003: PUSH
48004: LD_INT 0
48006: ST_TO_ADDR
// end ;
48007: LD_VAR 0 3
48011: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48012: LD_INT 0
48014: PPUSH
48015: PPUSH
// if not array1 or not array2 then
48016: LD_VAR 0 1
48020: NOT
48021: PUSH
48022: LD_VAR 0 2
48026: NOT
48027: OR
48028: IFFALSE 48032
// exit ;
48030: GO 48096
// result := true ;
48032: LD_ADDR_VAR 0 3
48036: PUSH
48037: LD_INT 1
48039: ST_TO_ADDR
// for i = 1 to array1 do
48040: LD_ADDR_VAR 0 4
48044: PUSH
48045: DOUBLE
48046: LD_INT 1
48048: DEC
48049: ST_TO_ADDR
48050: LD_VAR 0 1
48054: PUSH
48055: FOR_TO
48056: IFFALSE 48094
// if array1 [ i ] <> array2 [ i ] then
48058: LD_VAR 0 1
48062: PUSH
48063: LD_VAR 0 4
48067: ARRAY
48068: PUSH
48069: LD_VAR 0 2
48073: PUSH
48074: LD_VAR 0 4
48078: ARRAY
48079: NONEQUAL
48080: IFFALSE 48092
// begin result := false ;
48082: LD_ADDR_VAR 0 3
48086: PUSH
48087: LD_INT 0
48089: ST_TO_ADDR
// break ;
48090: GO 48094
// end ;
48092: GO 48055
48094: POP
48095: POP
// end ;
48096: LD_VAR 0 3
48100: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48101: LD_INT 0
48103: PPUSH
48104: PPUSH
48105: PPUSH
// pom := GetBase ( fac ) ;
48106: LD_ADDR_VAR 0 5
48110: PUSH
48111: LD_VAR 0 1
48115: PPUSH
48116: CALL_OW 274
48120: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48121: LD_ADDR_VAR 0 4
48125: PUSH
48126: LD_VAR 0 2
48130: PUSH
48131: LD_INT 1
48133: ARRAY
48134: PPUSH
48135: LD_VAR 0 2
48139: PUSH
48140: LD_INT 2
48142: ARRAY
48143: PPUSH
48144: LD_VAR 0 2
48148: PUSH
48149: LD_INT 3
48151: ARRAY
48152: PPUSH
48153: LD_VAR 0 2
48157: PUSH
48158: LD_INT 4
48160: ARRAY
48161: PPUSH
48162: CALL_OW 449
48166: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48167: LD_ADDR_VAR 0 3
48171: PUSH
48172: LD_VAR 0 5
48176: PPUSH
48177: LD_INT 1
48179: PPUSH
48180: CALL_OW 275
48184: PUSH
48185: LD_VAR 0 4
48189: PUSH
48190: LD_INT 1
48192: ARRAY
48193: GREATEREQUAL
48194: PUSH
48195: LD_VAR 0 5
48199: PPUSH
48200: LD_INT 2
48202: PPUSH
48203: CALL_OW 275
48207: PUSH
48208: LD_VAR 0 4
48212: PUSH
48213: LD_INT 2
48215: ARRAY
48216: GREATEREQUAL
48217: AND
48218: PUSH
48219: LD_VAR 0 5
48223: PPUSH
48224: LD_INT 3
48226: PPUSH
48227: CALL_OW 275
48231: PUSH
48232: LD_VAR 0 4
48236: PUSH
48237: LD_INT 3
48239: ARRAY
48240: GREATEREQUAL
48241: AND
48242: ST_TO_ADDR
// end ;
48243: LD_VAR 0 3
48247: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48248: LD_INT 0
48250: PPUSH
48251: PPUSH
48252: PPUSH
48253: PPUSH
// pom := GetBase ( building ) ;
48254: LD_ADDR_VAR 0 3
48258: PUSH
48259: LD_VAR 0 1
48263: PPUSH
48264: CALL_OW 274
48268: ST_TO_ADDR
// if not pom then
48269: LD_VAR 0 3
48273: NOT
48274: IFFALSE 48278
// exit ;
48276: GO 48448
// btype := GetBType ( building ) ;
48278: LD_ADDR_VAR 0 5
48282: PUSH
48283: LD_VAR 0 1
48287: PPUSH
48288: CALL_OW 266
48292: ST_TO_ADDR
// if btype = b_armoury then
48293: LD_VAR 0 5
48297: PUSH
48298: LD_INT 4
48300: EQUAL
48301: IFFALSE 48311
// btype := b_barracks ;
48303: LD_ADDR_VAR 0 5
48307: PUSH
48308: LD_INT 5
48310: ST_TO_ADDR
// if btype = b_depot then
48311: LD_VAR 0 5
48315: PUSH
48316: LD_INT 0
48318: EQUAL
48319: IFFALSE 48329
// btype := b_warehouse ;
48321: LD_ADDR_VAR 0 5
48325: PUSH
48326: LD_INT 1
48328: ST_TO_ADDR
// if btype = b_workshop then
48329: LD_VAR 0 5
48333: PUSH
48334: LD_INT 2
48336: EQUAL
48337: IFFALSE 48347
// btype := b_factory ;
48339: LD_ADDR_VAR 0 5
48343: PUSH
48344: LD_INT 3
48346: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48347: LD_ADDR_VAR 0 4
48351: PUSH
48352: LD_VAR 0 5
48356: PPUSH
48357: LD_VAR 0 1
48361: PPUSH
48362: CALL_OW 248
48366: PPUSH
48367: CALL_OW 450
48371: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48372: LD_ADDR_VAR 0 2
48376: PUSH
48377: LD_VAR 0 3
48381: PPUSH
48382: LD_INT 1
48384: PPUSH
48385: CALL_OW 275
48389: PUSH
48390: LD_VAR 0 4
48394: PUSH
48395: LD_INT 1
48397: ARRAY
48398: GREATEREQUAL
48399: PUSH
48400: LD_VAR 0 3
48404: PPUSH
48405: LD_INT 2
48407: PPUSH
48408: CALL_OW 275
48412: PUSH
48413: LD_VAR 0 4
48417: PUSH
48418: LD_INT 2
48420: ARRAY
48421: GREATEREQUAL
48422: AND
48423: PUSH
48424: LD_VAR 0 3
48428: PPUSH
48429: LD_INT 3
48431: PPUSH
48432: CALL_OW 275
48436: PUSH
48437: LD_VAR 0 4
48441: PUSH
48442: LD_INT 3
48444: ARRAY
48445: GREATEREQUAL
48446: AND
48447: ST_TO_ADDR
// end ;
48448: LD_VAR 0 2
48452: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48453: LD_INT 0
48455: PPUSH
48456: PPUSH
48457: PPUSH
// pom := GetBase ( building ) ;
48458: LD_ADDR_VAR 0 4
48462: PUSH
48463: LD_VAR 0 1
48467: PPUSH
48468: CALL_OW 274
48472: ST_TO_ADDR
// if not pom then
48473: LD_VAR 0 4
48477: NOT
48478: IFFALSE 48482
// exit ;
48480: GO 48583
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48482: LD_ADDR_VAR 0 5
48486: PUSH
48487: LD_VAR 0 2
48491: PPUSH
48492: LD_VAR 0 1
48496: PPUSH
48497: CALL_OW 248
48501: PPUSH
48502: CALL_OW 450
48506: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48507: LD_ADDR_VAR 0 3
48511: PUSH
48512: LD_VAR 0 4
48516: PPUSH
48517: LD_INT 1
48519: PPUSH
48520: CALL_OW 275
48524: PUSH
48525: LD_VAR 0 5
48529: PUSH
48530: LD_INT 1
48532: ARRAY
48533: GREATEREQUAL
48534: PUSH
48535: LD_VAR 0 4
48539: PPUSH
48540: LD_INT 2
48542: PPUSH
48543: CALL_OW 275
48547: PUSH
48548: LD_VAR 0 5
48552: PUSH
48553: LD_INT 2
48555: ARRAY
48556: GREATEREQUAL
48557: AND
48558: PUSH
48559: LD_VAR 0 4
48563: PPUSH
48564: LD_INT 3
48566: PPUSH
48567: CALL_OW 275
48571: PUSH
48572: LD_VAR 0 5
48576: PUSH
48577: LD_INT 3
48579: ARRAY
48580: GREATEREQUAL
48581: AND
48582: ST_TO_ADDR
// end ;
48583: LD_VAR 0 3
48587: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48588: LD_INT 0
48590: PPUSH
48591: PPUSH
48592: PPUSH
48593: PPUSH
48594: PPUSH
48595: PPUSH
48596: PPUSH
48597: PPUSH
48598: PPUSH
48599: PPUSH
48600: PPUSH
// result := false ;
48601: LD_ADDR_VAR 0 8
48605: PUSH
48606: LD_INT 0
48608: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48609: LD_VAR 0 5
48613: NOT
48614: PUSH
48615: LD_VAR 0 1
48619: NOT
48620: OR
48621: PUSH
48622: LD_VAR 0 2
48626: NOT
48627: OR
48628: PUSH
48629: LD_VAR 0 3
48633: NOT
48634: OR
48635: IFFALSE 48639
// exit ;
48637: GO 49453
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48639: LD_ADDR_VAR 0 14
48643: PUSH
48644: LD_VAR 0 1
48648: PPUSH
48649: LD_VAR 0 2
48653: PPUSH
48654: LD_VAR 0 3
48658: PPUSH
48659: LD_VAR 0 4
48663: PPUSH
48664: LD_VAR 0 5
48668: PUSH
48669: LD_INT 1
48671: ARRAY
48672: PPUSH
48673: CALL_OW 248
48677: PPUSH
48678: LD_INT 0
48680: PPUSH
48681: CALL 50686 0 6
48685: ST_TO_ADDR
// if not hexes then
48686: LD_VAR 0 14
48690: NOT
48691: IFFALSE 48695
// exit ;
48693: GO 49453
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48695: LD_ADDR_VAR 0 17
48699: PUSH
48700: LD_VAR 0 5
48704: PPUSH
48705: LD_INT 22
48707: PUSH
48708: LD_VAR 0 13
48712: PPUSH
48713: CALL_OW 255
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 2
48724: PUSH
48725: LD_INT 30
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 30
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: LIST
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PPUSH
48754: CALL_OW 72
48758: ST_TO_ADDR
// for i = 1 to hexes do
48759: LD_ADDR_VAR 0 9
48763: PUSH
48764: DOUBLE
48765: LD_INT 1
48767: DEC
48768: ST_TO_ADDR
48769: LD_VAR 0 14
48773: PUSH
48774: FOR_TO
48775: IFFALSE 49451
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48777: LD_ADDR_VAR 0 13
48781: PUSH
48782: LD_VAR 0 14
48786: PUSH
48787: LD_VAR 0 9
48791: ARRAY
48792: PUSH
48793: LD_INT 1
48795: ARRAY
48796: PPUSH
48797: LD_VAR 0 14
48801: PUSH
48802: LD_VAR 0 9
48806: ARRAY
48807: PUSH
48808: LD_INT 2
48810: ARRAY
48811: PPUSH
48812: CALL_OW 428
48816: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48817: LD_VAR 0 14
48821: PUSH
48822: LD_VAR 0 9
48826: ARRAY
48827: PUSH
48828: LD_INT 1
48830: ARRAY
48831: PPUSH
48832: LD_VAR 0 14
48836: PUSH
48837: LD_VAR 0 9
48841: ARRAY
48842: PUSH
48843: LD_INT 2
48845: ARRAY
48846: PPUSH
48847: CALL_OW 351
48851: PUSH
48852: LD_VAR 0 14
48856: PUSH
48857: LD_VAR 0 9
48861: ARRAY
48862: PUSH
48863: LD_INT 1
48865: ARRAY
48866: PPUSH
48867: LD_VAR 0 14
48871: PUSH
48872: LD_VAR 0 9
48876: ARRAY
48877: PUSH
48878: LD_INT 2
48880: ARRAY
48881: PPUSH
48882: CALL_OW 488
48886: NOT
48887: OR
48888: PUSH
48889: LD_VAR 0 13
48893: PPUSH
48894: CALL_OW 247
48898: PUSH
48899: LD_INT 3
48901: EQUAL
48902: OR
48903: IFFALSE 48909
// exit ;
48905: POP
48906: POP
48907: GO 49453
// if not tmp then
48909: LD_VAR 0 13
48913: NOT
48914: IFFALSE 48918
// continue ;
48916: GO 48774
// result := true ;
48918: LD_ADDR_VAR 0 8
48922: PUSH
48923: LD_INT 1
48925: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48926: LD_VAR 0 6
48930: PUSH
48931: LD_VAR 0 13
48935: PPUSH
48936: CALL_OW 247
48940: PUSH
48941: LD_INT 2
48943: EQUAL
48944: AND
48945: PUSH
48946: LD_VAR 0 13
48950: PPUSH
48951: CALL_OW 263
48955: PUSH
48956: LD_INT 1
48958: EQUAL
48959: AND
48960: IFFALSE 49124
// begin if IsDrivenBy ( tmp ) then
48962: LD_VAR 0 13
48966: PPUSH
48967: CALL_OW 311
48971: IFFALSE 48975
// continue ;
48973: GO 48774
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48975: LD_VAR 0 6
48979: PPUSH
48980: LD_INT 3
48982: PUSH
48983: LD_INT 60
48985: PUSH
48986: EMPTY
48987: LIST
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 3
48995: PUSH
48996: LD_INT 55
48998: PUSH
48999: EMPTY
49000: LIST
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PPUSH
49010: CALL_OW 72
49014: IFFALSE 49122
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49016: LD_ADDR_VAR 0 18
49020: PUSH
49021: LD_VAR 0 6
49025: PPUSH
49026: LD_INT 3
49028: PUSH
49029: LD_INT 60
49031: PUSH
49032: EMPTY
49033: LIST
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 3
49041: PUSH
49042: LD_INT 55
49044: PUSH
49045: EMPTY
49046: LIST
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PPUSH
49056: CALL_OW 72
49060: PUSH
49061: LD_INT 1
49063: ARRAY
49064: ST_TO_ADDR
// if IsInUnit ( driver ) then
49065: LD_VAR 0 18
49069: PPUSH
49070: CALL_OW 310
49074: IFFALSE 49085
// ComExit ( driver ) ;
49076: LD_VAR 0 18
49080: PPUSH
49081: CALL 74465 0 1
// AddComEnterUnit ( driver , tmp ) ;
49085: LD_VAR 0 18
49089: PPUSH
49090: LD_VAR 0 13
49094: PPUSH
49095: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49099: LD_VAR 0 18
49103: PPUSH
49104: LD_VAR 0 7
49108: PPUSH
49109: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49113: LD_VAR 0 18
49117: PPUSH
49118: CALL_OW 181
// end ; continue ;
49122: GO 48774
// end ; if not cleaners or not tmp in cleaners then
49124: LD_VAR 0 6
49128: NOT
49129: PUSH
49130: LD_VAR 0 13
49134: PUSH
49135: LD_VAR 0 6
49139: IN
49140: NOT
49141: OR
49142: IFFALSE 49449
// begin if dep then
49144: LD_VAR 0 17
49148: IFFALSE 49284
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49150: LD_ADDR_VAR 0 16
49154: PUSH
49155: LD_VAR 0 17
49159: PUSH
49160: LD_INT 1
49162: ARRAY
49163: PPUSH
49164: CALL_OW 250
49168: PPUSH
49169: LD_VAR 0 17
49173: PUSH
49174: LD_INT 1
49176: ARRAY
49177: PPUSH
49178: CALL_OW 254
49182: PPUSH
49183: LD_INT 5
49185: PPUSH
49186: CALL_OW 272
49190: PUSH
49191: LD_VAR 0 17
49195: PUSH
49196: LD_INT 1
49198: ARRAY
49199: PPUSH
49200: CALL_OW 251
49204: PPUSH
49205: LD_VAR 0 17
49209: PUSH
49210: LD_INT 1
49212: ARRAY
49213: PPUSH
49214: CALL_OW 254
49218: PPUSH
49219: LD_INT 5
49221: PPUSH
49222: CALL_OW 273
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49231: LD_VAR 0 16
49235: PUSH
49236: LD_INT 1
49238: ARRAY
49239: PPUSH
49240: LD_VAR 0 16
49244: PUSH
49245: LD_INT 2
49247: ARRAY
49248: PPUSH
49249: CALL_OW 488
49253: IFFALSE 49284
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49255: LD_VAR 0 13
49259: PPUSH
49260: LD_VAR 0 16
49264: PUSH
49265: LD_INT 1
49267: ARRAY
49268: PPUSH
49269: LD_VAR 0 16
49273: PUSH
49274: LD_INT 2
49276: ARRAY
49277: PPUSH
49278: CALL_OW 111
// continue ;
49282: GO 48774
// end ; end ; r := GetDir ( tmp ) ;
49284: LD_ADDR_VAR 0 15
49288: PUSH
49289: LD_VAR 0 13
49293: PPUSH
49294: CALL_OW 254
49298: ST_TO_ADDR
// if r = 5 then
49299: LD_VAR 0 15
49303: PUSH
49304: LD_INT 5
49306: EQUAL
49307: IFFALSE 49317
// r := 0 ;
49309: LD_ADDR_VAR 0 15
49313: PUSH
49314: LD_INT 0
49316: ST_TO_ADDR
// for j = r to 5 do
49317: LD_ADDR_VAR 0 10
49321: PUSH
49322: DOUBLE
49323: LD_VAR 0 15
49327: DEC
49328: ST_TO_ADDR
49329: LD_INT 5
49331: PUSH
49332: FOR_TO
49333: IFFALSE 49447
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49335: LD_ADDR_VAR 0 11
49339: PUSH
49340: LD_VAR 0 13
49344: PPUSH
49345: CALL_OW 250
49349: PPUSH
49350: LD_VAR 0 10
49354: PPUSH
49355: LD_INT 2
49357: PPUSH
49358: CALL_OW 272
49362: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49363: LD_ADDR_VAR 0 12
49367: PUSH
49368: LD_VAR 0 13
49372: PPUSH
49373: CALL_OW 251
49377: PPUSH
49378: LD_VAR 0 10
49382: PPUSH
49383: LD_INT 2
49385: PPUSH
49386: CALL_OW 273
49390: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49391: LD_VAR 0 11
49395: PPUSH
49396: LD_VAR 0 12
49400: PPUSH
49401: CALL_OW 488
49405: PUSH
49406: LD_VAR 0 11
49410: PPUSH
49411: LD_VAR 0 12
49415: PPUSH
49416: CALL_OW 428
49420: NOT
49421: AND
49422: IFFALSE 49445
// begin ComMoveXY ( tmp , _x , _y ) ;
49424: LD_VAR 0 13
49428: PPUSH
49429: LD_VAR 0 11
49433: PPUSH
49434: LD_VAR 0 12
49438: PPUSH
49439: CALL_OW 111
// break ;
49443: GO 49447
// end ; end ;
49445: GO 49332
49447: POP
49448: POP
// end ; end ;
49449: GO 48774
49451: POP
49452: POP
// end ;
49453: LD_VAR 0 8
49457: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49458: LD_INT 0
49460: PPUSH
// result := true ;
49461: LD_ADDR_VAR 0 3
49465: PUSH
49466: LD_INT 1
49468: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49469: LD_VAR 0 2
49473: PUSH
49474: LD_INT 24
49476: DOUBLE
49477: EQUAL
49478: IFTRUE 49488
49480: LD_INT 33
49482: DOUBLE
49483: EQUAL
49484: IFTRUE 49488
49486: GO 49513
49488: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49489: LD_ADDR_VAR 0 3
49493: PUSH
49494: LD_INT 32
49496: PPUSH
49497: LD_VAR 0 1
49501: PPUSH
49502: CALL_OW 321
49506: PUSH
49507: LD_INT 2
49509: EQUAL
49510: ST_TO_ADDR
49511: GO 49829
49513: LD_INT 20
49515: DOUBLE
49516: EQUAL
49517: IFTRUE 49521
49519: GO 49546
49521: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49522: LD_ADDR_VAR 0 3
49526: PUSH
49527: LD_INT 6
49529: PPUSH
49530: LD_VAR 0 1
49534: PPUSH
49535: CALL_OW 321
49539: PUSH
49540: LD_INT 2
49542: EQUAL
49543: ST_TO_ADDR
49544: GO 49829
49546: LD_INT 22
49548: DOUBLE
49549: EQUAL
49550: IFTRUE 49560
49552: LD_INT 36
49554: DOUBLE
49555: EQUAL
49556: IFTRUE 49560
49558: GO 49585
49560: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49561: LD_ADDR_VAR 0 3
49565: PUSH
49566: LD_INT 15
49568: PPUSH
49569: LD_VAR 0 1
49573: PPUSH
49574: CALL_OW 321
49578: PUSH
49579: LD_INT 2
49581: EQUAL
49582: ST_TO_ADDR
49583: GO 49829
49585: LD_INT 30
49587: DOUBLE
49588: EQUAL
49589: IFTRUE 49593
49591: GO 49618
49593: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49594: LD_ADDR_VAR 0 3
49598: PUSH
49599: LD_INT 20
49601: PPUSH
49602: LD_VAR 0 1
49606: PPUSH
49607: CALL_OW 321
49611: PUSH
49612: LD_INT 2
49614: EQUAL
49615: ST_TO_ADDR
49616: GO 49829
49618: LD_INT 28
49620: DOUBLE
49621: EQUAL
49622: IFTRUE 49632
49624: LD_INT 21
49626: DOUBLE
49627: EQUAL
49628: IFTRUE 49632
49630: GO 49657
49632: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49633: LD_ADDR_VAR 0 3
49637: PUSH
49638: LD_INT 21
49640: PPUSH
49641: LD_VAR 0 1
49645: PPUSH
49646: CALL_OW 321
49650: PUSH
49651: LD_INT 2
49653: EQUAL
49654: ST_TO_ADDR
49655: GO 49829
49657: LD_INT 16
49659: DOUBLE
49660: EQUAL
49661: IFTRUE 49665
49663: GO 49690
49665: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49666: LD_ADDR_VAR 0 3
49670: PUSH
49671: LD_INT 84
49673: PPUSH
49674: LD_VAR 0 1
49678: PPUSH
49679: CALL_OW 321
49683: PUSH
49684: LD_INT 2
49686: EQUAL
49687: ST_TO_ADDR
49688: GO 49829
49690: LD_INT 19
49692: DOUBLE
49693: EQUAL
49694: IFTRUE 49704
49696: LD_INT 23
49698: DOUBLE
49699: EQUAL
49700: IFTRUE 49704
49702: GO 49729
49704: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49705: LD_ADDR_VAR 0 3
49709: PUSH
49710: LD_INT 83
49712: PPUSH
49713: LD_VAR 0 1
49717: PPUSH
49718: CALL_OW 321
49722: PUSH
49723: LD_INT 2
49725: EQUAL
49726: ST_TO_ADDR
49727: GO 49829
49729: LD_INT 17
49731: DOUBLE
49732: EQUAL
49733: IFTRUE 49737
49735: GO 49762
49737: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49738: LD_ADDR_VAR 0 3
49742: PUSH
49743: LD_INT 39
49745: PPUSH
49746: LD_VAR 0 1
49750: PPUSH
49751: CALL_OW 321
49755: PUSH
49756: LD_INT 2
49758: EQUAL
49759: ST_TO_ADDR
49760: GO 49829
49762: LD_INT 18
49764: DOUBLE
49765: EQUAL
49766: IFTRUE 49770
49768: GO 49795
49770: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49771: LD_ADDR_VAR 0 3
49775: PUSH
49776: LD_INT 40
49778: PPUSH
49779: LD_VAR 0 1
49783: PPUSH
49784: CALL_OW 321
49788: PUSH
49789: LD_INT 2
49791: EQUAL
49792: ST_TO_ADDR
49793: GO 49829
49795: LD_INT 27
49797: DOUBLE
49798: EQUAL
49799: IFTRUE 49803
49801: GO 49828
49803: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49804: LD_ADDR_VAR 0 3
49808: PUSH
49809: LD_INT 35
49811: PPUSH
49812: LD_VAR 0 1
49816: PPUSH
49817: CALL_OW 321
49821: PUSH
49822: LD_INT 2
49824: EQUAL
49825: ST_TO_ADDR
49826: GO 49829
49828: POP
// end ;
49829: LD_VAR 0 3
49833: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49834: LD_INT 0
49836: PPUSH
49837: PPUSH
49838: PPUSH
49839: PPUSH
49840: PPUSH
49841: PPUSH
49842: PPUSH
49843: PPUSH
49844: PPUSH
49845: PPUSH
49846: PPUSH
// result := false ;
49847: LD_ADDR_VAR 0 6
49851: PUSH
49852: LD_INT 0
49854: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49855: LD_VAR 0 1
49859: NOT
49860: PUSH
49861: LD_VAR 0 1
49865: PPUSH
49866: CALL_OW 266
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: IN
49881: NOT
49882: OR
49883: PUSH
49884: LD_VAR 0 2
49888: NOT
49889: OR
49890: PUSH
49891: LD_VAR 0 5
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: LD_INT 2
49904: PUSH
49905: LD_INT 3
49907: PUSH
49908: LD_INT 4
49910: PUSH
49911: LD_INT 5
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: IN
49922: NOT
49923: OR
49924: PUSH
49925: LD_VAR 0 3
49929: PPUSH
49930: LD_VAR 0 4
49934: PPUSH
49935: CALL_OW 488
49939: NOT
49940: OR
49941: IFFALSE 49945
// exit ;
49943: GO 50681
// side := GetSide ( depot ) ;
49945: LD_ADDR_VAR 0 9
49949: PUSH
49950: LD_VAR 0 1
49954: PPUSH
49955: CALL_OW 255
49959: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49960: LD_VAR 0 9
49964: PPUSH
49965: LD_VAR 0 2
49969: PPUSH
49970: CALL 49458 0 2
49974: NOT
49975: IFFALSE 49979
// exit ;
49977: GO 50681
// pom := GetBase ( depot ) ;
49979: LD_ADDR_VAR 0 10
49983: PUSH
49984: LD_VAR 0 1
49988: PPUSH
49989: CALL_OW 274
49993: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49994: LD_ADDR_VAR 0 11
49998: PUSH
49999: LD_VAR 0 2
50003: PPUSH
50004: LD_VAR 0 1
50008: PPUSH
50009: CALL_OW 248
50013: PPUSH
50014: CALL_OW 450
50018: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50019: LD_VAR 0 10
50023: PPUSH
50024: LD_INT 1
50026: PPUSH
50027: CALL_OW 275
50031: PUSH
50032: LD_VAR 0 11
50036: PUSH
50037: LD_INT 1
50039: ARRAY
50040: GREATEREQUAL
50041: PUSH
50042: LD_VAR 0 10
50046: PPUSH
50047: LD_INT 2
50049: PPUSH
50050: CALL_OW 275
50054: PUSH
50055: LD_VAR 0 11
50059: PUSH
50060: LD_INT 2
50062: ARRAY
50063: GREATEREQUAL
50064: AND
50065: PUSH
50066: LD_VAR 0 10
50070: PPUSH
50071: LD_INT 3
50073: PPUSH
50074: CALL_OW 275
50078: PUSH
50079: LD_VAR 0 11
50083: PUSH
50084: LD_INT 3
50086: ARRAY
50087: GREATEREQUAL
50088: AND
50089: NOT
50090: IFFALSE 50094
// exit ;
50092: GO 50681
// if GetBType ( depot ) = b_depot then
50094: LD_VAR 0 1
50098: PPUSH
50099: CALL_OW 266
50103: PUSH
50104: LD_INT 0
50106: EQUAL
50107: IFFALSE 50119
// dist := 28 else
50109: LD_ADDR_VAR 0 14
50113: PUSH
50114: LD_INT 28
50116: ST_TO_ADDR
50117: GO 50127
// dist := 36 ;
50119: LD_ADDR_VAR 0 14
50123: PUSH
50124: LD_INT 36
50126: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50127: LD_VAR 0 1
50131: PPUSH
50132: LD_VAR 0 3
50136: PPUSH
50137: LD_VAR 0 4
50141: PPUSH
50142: CALL_OW 297
50146: PUSH
50147: LD_VAR 0 14
50151: GREATER
50152: IFFALSE 50156
// exit ;
50154: GO 50681
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50156: LD_ADDR_VAR 0 12
50160: PUSH
50161: LD_VAR 0 2
50165: PPUSH
50166: LD_VAR 0 3
50170: PPUSH
50171: LD_VAR 0 4
50175: PPUSH
50176: LD_VAR 0 5
50180: PPUSH
50181: LD_VAR 0 1
50185: PPUSH
50186: CALL_OW 248
50190: PPUSH
50191: LD_INT 0
50193: PPUSH
50194: CALL 50686 0 6
50198: ST_TO_ADDR
// if not hexes then
50199: LD_VAR 0 12
50203: NOT
50204: IFFALSE 50208
// exit ;
50206: GO 50681
// hex := GetHexInfo ( x , y ) ;
50208: LD_ADDR_VAR 0 15
50212: PUSH
50213: LD_VAR 0 3
50217: PPUSH
50218: LD_VAR 0 4
50222: PPUSH
50223: CALL_OW 546
50227: ST_TO_ADDR
// if hex [ 1 ] then
50228: LD_VAR 0 15
50232: PUSH
50233: LD_INT 1
50235: ARRAY
50236: IFFALSE 50240
// exit ;
50238: GO 50681
// height := hex [ 2 ] ;
50240: LD_ADDR_VAR 0 13
50244: PUSH
50245: LD_VAR 0 15
50249: PUSH
50250: LD_INT 2
50252: ARRAY
50253: ST_TO_ADDR
// for i = 1 to hexes do
50254: LD_ADDR_VAR 0 7
50258: PUSH
50259: DOUBLE
50260: LD_INT 1
50262: DEC
50263: ST_TO_ADDR
50264: LD_VAR 0 12
50268: PUSH
50269: FOR_TO
50270: IFFALSE 50600
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50272: LD_VAR 0 12
50276: PUSH
50277: LD_VAR 0 7
50281: ARRAY
50282: PUSH
50283: LD_INT 1
50285: ARRAY
50286: PPUSH
50287: LD_VAR 0 12
50291: PUSH
50292: LD_VAR 0 7
50296: ARRAY
50297: PUSH
50298: LD_INT 2
50300: ARRAY
50301: PPUSH
50302: CALL_OW 488
50306: NOT
50307: PUSH
50308: LD_VAR 0 12
50312: PUSH
50313: LD_VAR 0 7
50317: ARRAY
50318: PUSH
50319: LD_INT 1
50321: ARRAY
50322: PPUSH
50323: LD_VAR 0 12
50327: PUSH
50328: LD_VAR 0 7
50332: ARRAY
50333: PUSH
50334: LD_INT 2
50336: ARRAY
50337: PPUSH
50338: CALL_OW 428
50342: PUSH
50343: LD_INT 0
50345: GREATER
50346: OR
50347: PUSH
50348: LD_VAR 0 12
50352: PUSH
50353: LD_VAR 0 7
50357: ARRAY
50358: PUSH
50359: LD_INT 1
50361: ARRAY
50362: PPUSH
50363: LD_VAR 0 12
50367: PUSH
50368: LD_VAR 0 7
50372: ARRAY
50373: PUSH
50374: LD_INT 2
50376: ARRAY
50377: PPUSH
50378: CALL_OW 351
50382: OR
50383: IFFALSE 50389
// exit ;
50385: POP
50386: POP
50387: GO 50681
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50389: LD_ADDR_VAR 0 8
50393: PUSH
50394: LD_VAR 0 12
50398: PUSH
50399: LD_VAR 0 7
50403: ARRAY
50404: PUSH
50405: LD_INT 1
50407: ARRAY
50408: PPUSH
50409: LD_VAR 0 12
50413: PUSH
50414: LD_VAR 0 7
50418: ARRAY
50419: PUSH
50420: LD_INT 2
50422: ARRAY
50423: PPUSH
50424: CALL_OW 546
50428: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50429: LD_VAR 0 8
50433: PUSH
50434: LD_INT 1
50436: ARRAY
50437: PUSH
50438: LD_VAR 0 8
50442: PUSH
50443: LD_INT 2
50445: ARRAY
50446: PUSH
50447: LD_VAR 0 13
50451: PUSH
50452: LD_INT 2
50454: PLUS
50455: GREATER
50456: OR
50457: PUSH
50458: LD_VAR 0 8
50462: PUSH
50463: LD_INT 2
50465: ARRAY
50466: PUSH
50467: LD_VAR 0 13
50471: PUSH
50472: LD_INT 2
50474: MINUS
50475: LESS
50476: OR
50477: PUSH
50478: LD_VAR 0 8
50482: PUSH
50483: LD_INT 3
50485: ARRAY
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: LD_INT 8
50492: PUSH
50493: LD_INT 9
50495: PUSH
50496: LD_INT 10
50498: PUSH
50499: LD_INT 11
50501: PUSH
50502: LD_INT 12
50504: PUSH
50505: LD_INT 13
50507: PUSH
50508: LD_INT 16
50510: PUSH
50511: LD_INT 17
50513: PUSH
50514: LD_INT 18
50516: PUSH
50517: LD_INT 19
50519: PUSH
50520: LD_INT 20
50522: PUSH
50523: LD_INT 21
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: IN
50541: NOT
50542: OR
50543: PUSH
50544: LD_VAR 0 8
50548: PUSH
50549: LD_INT 5
50551: ARRAY
50552: NOT
50553: OR
50554: PUSH
50555: LD_VAR 0 8
50559: PUSH
50560: LD_INT 6
50562: ARRAY
50563: PUSH
50564: LD_INT 1
50566: PUSH
50567: LD_INT 2
50569: PUSH
50570: LD_INT 7
50572: PUSH
50573: LD_INT 9
50575: PUSH
50576: LD_INT 10
50578: PUSH
50579: LD_INT 11
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: IN
50590: NOT
50591: OR
50592: IFFALSE 50598
// exit ;
50594: POP
50595: POP
50596: GO 50681
// end ;
50598: GO 50269
50600: POP
50601: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50602: LD_VAR 0 9
50606: PPUSH
50607: LD_VAR 0 3
50611: PPUSH
50612: LD_VAR 0 4
50616: PPUSH
50617: LD_INT 20
50619: PPUSH
50620: CALL 42633 0 4
50624: PUSH
50625: LD_INT 4
50627: ARRAY
50628: IFFALSE 50632
// exit ;
50630: GO 50681
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50632: LD_VAR 0 2
50636: PUSH
50637: LD_INT 29
50639: PUSH
50640: LD_INT 30
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: IN
50647: PUSH
50648: LD_VAR 0 3
50652: PPUSH
50653: LD_VAR 0 4
50657: PPUSH
50658: LD_VAR 0 9
50662: PPUSH
50663: CALL_OW 440
50667: NOT
50668: AND
50669: IFFALSE 50673
// exit ;
50671: GO 50681
// result := true ;
50673: LD_ADDR_VAR 0 6
50677: PUSH
50678: LD_INT 1
50680: ST_TO_ADDR
// end ;
50681: LD_VAR 0 6
50685: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50686: LD_INT 0
50688: PPUSH
50689: PPUSH
50690: PPUSH
50691: PPUSH
50692: PPUSH
50693: PPUSH
50694: PPUSH
50695: PPUSH
50696: PPUSH
50697: PPUSH
50698: PPUSH
50699: PPUSH
50700: PPUSH
50701: PPUSH
50702: PPUSH
50703: PPUSH
50704: PPUSH
50705: PPUSH
50706: PPUSH
50707: PPUSH
50708: PPUSH
50709: PPUSH
50710: PPUSH
50711: PPUSH
50712: PPUSH
50713: PPUSH
50714: PPUSH
50715: PPUSH
50716: PPUSH
50717: PPUSH
50718: PPUSH
50719: PPUSH
50720: PPUSH
50721: PPUSH
50722: PPUSH
50723: PPUSH
50724: PPUSH
50725: PPUSH
50726: PPUSH
50727: PPUSH
50728: PPUSH
50729: PPUSH
50730: PPUSH
50731: PPUSH
50732: PPUSH
50733: PPUSH
50734: PPUSH
50735: PPUSH
50736: PPUSH
50737: PPUSH
50738: PPUSH
50739: PPUSH
50740: PPUSH
50741: PPUSH
50742: PPUSH
50743: PPUSH
50744: PPUSH
50745: PPUSH
// result = [ ] ;
50746: LD_ADDR_VAR 0 7
50750: PUSH
50751: EMPTY
50752: ST_TO_ADDR
// temp_list = [ ] ;
50753: LD_ADDR_VAR 0 9
50757: PUSH
50758: EMPTY
50759: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50760: LD_VAR 0 4
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: LD_INT 2
50773: PUSH
50774: LD_INT 3
50776: PUSH
50777: LD_INT 4
50779: PUSH
50780: LD_INT 5
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: IN
50791: NOT
50792: PUSH
50793: LD_VAR 0 1
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: LD_INT 1
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: IN
50808: PUSH
50809: LD_VAR 0 5
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: LD_INT 2
50819: PUSH
50820: LD_INT 3
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: LIST
50827: IN
50828: NOT
50829: AND
50830: OR
50831: IFFALSE 50835
// exit ;
50833: GO 69226
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50835: LD_VAR 0 1
50839: PUSH
50840: LD_INT 6
50842: PUSH
50843: LD_INT 7
50845: PUSH
50846: LD_INT 8
50848: PUSH
50849: LD_INT 13
50851: PUSH
50852: LD_INT 12
50854: PUSH
50855: LD_INT 15
50857: PUSH
50858: LD_INT 11
50860: PUSH
50861: LD_INT 14
50863: PUSH
50864: LD_INT 10
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: IN
50878: IFFALSE 50888
// btype = b_lab ;
50880: LD_ADDR_VAR 0 1
50884: PUSH
50885: LD_INT 6
50887: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50888: LD_VAR 0 6
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: LD_INT 2
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: LIST
50906: IN
50907: NOT
50908: PUSH
50909: LD_VAR 0 1
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: LD_INT 2
50922: PUSH
50923: LD_INT 3
50925: PUSH
50926: LD_INT 6
50928: PUSH
50929: LD_INT 36
50931: PUSH
50932: LD_INT 4
50934: PUSH
50935: LD_INT 5
50937: PUSH
50938: LD_INT 31
50940: PUSH
50941: LD_INT 32
50943: PUSH
50944: LD_INT 33
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: IN
50960: NOT
50961: PUSH
50962: LD_VAR 0 6
50966: PUSH
50967: LD_INT 1
50969: EQUAL
50970: AND
50971: OR
50972: PUSH
50973: LD_VAR 0 1
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: LD_INT 3
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: IN
50988: NOT
50989: PUSH
50990: LD_VAR 0 6
50994: PUSH
50995: LD_INT 2
50997: EQUAL
50998: AND
50999: OR
51000: IFFALSE 51010
// mode = 0 ;
51002: LD_ADDR_VAR 0 6
51006: PUSH
51007: LD_INT 0
51009: ST_TO_ADDR
// case mode of 0 :
51010: LD_VAR 0 6
51014: PUSH
51015: LD_INT 0
51017: DOUBLE
51018: EQUAL
51019: IFTRUE 51023
51021: GO 62476
51023: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51024: LD_ADDR_VAR 0 11
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: LD_INT 2
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: LD_INT 2
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: LD_INT 1
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: LD_INT 2
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: LD_INT 2
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: LD_INT 3
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: LD_INT 3
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: LD_INT 2
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51217: LD_ADDR_VAR 0 12
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 2
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 2
51319: PUSH
51320: LD_INT 1
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 2
51340: NEG
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 2
51351: NEG
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 2
51363: NEG
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 3
51374: NEG
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 3
51385: NEG
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51413: LD_ADDR_VAR 0 13
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: LD_INT 1
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 1
51482: NEG
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 1
51494: NEG
51495: PUSH
51496: LD_INT 2
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 2
51506: PUSH
51507: LD_INT 1
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 2
51516: PUSH
51517: LD_INT 2
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: LD_INT 2
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 2
51536: NEG
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 2
51548: NEG
51549: PUSH
51550: LD_INT 2
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 2
51560: NEG
51561: PUSH
51562: LD_INT 3
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 3
51572: NEG
51573: PUSH
51574: LD_INT 2
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 3
51584: NEG
51585: PUSH
51586: LD_INT 3
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51612: LD_ADDR_VAR 0 14
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: NEG
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 1
51693: NEG
51694: PUSH
51695: LD_INT 2
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 0
51705: PUSH
51706: LD_INT 2
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: PUSH
51717: LD_INT 1
51719: NEG
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: NEG
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: NEG
51759: PUSH
51760: LD_INT 3
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 3
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: LD_INT 2
51784: NEG
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51808: LD_ADDR_VAR 0 15
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 1
51877: NEG
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 2
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 2
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 2
51931: NEG
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 2
51942: NEG
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 2
51954: PUSH
51955: LD_INT 1
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 3
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 3
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52001: LD_ADDR_VAR 0 16
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: LD_INT 1
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: LD_INT 2
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 2
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 2
52104: PUSH
52105: LD_INT 2
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: LD_INT 2
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 2
52124: NEG
52125: PUSH
52126: LD_INT 1
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 2
52136: NEG
52137: PUSH
52138: LD_INT 2
52140: NEG
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 3
52148: PUSH
52149: LD_INT 2
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 3
52158: PUSH
52159: LD_INT 3
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: LD_INT 3
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52194: LD_ADDR_VAR 0 17
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: LD_INT 1
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 1
52252: NEG
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 1
52275: NEG
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: LD_INT 2
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 1
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 2
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 2
52319: PUSH
52320: LD_INT 1
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 2
52329: PUSH
52330: LD_INT 2
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: LD_INT 2
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 2
52370: NEG
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 2
52381: NEG
52382: PUSH
52383: LD_INT 1
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: LD_INT 2
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52424: LD_ADDR_VAR 0 18
52428: PUSH
52429: LD_INT 0
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 1
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: NEG
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: LD_INT 2
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: LD_INT 2
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 2
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 2
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 2
52559: PUSH
52560: LD_INT 2
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: LD_INT 2
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 2
52600: NEG
52601: PUSH
52602: LD_INT 0
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 2
52611: NEG
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 2
52623: NEG
52624: PUSH
52625: LD_INT 2
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52654: LD_ADDR_VAR 0 19
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: LD_INT 2
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: LD_INT 2
52750: NEG
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 1
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 2
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 2
52779: PUSH
52780: LD_INT 1
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: LD_INT 2
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: LD_INT 2
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 2
52830: NEG
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 2
52841: NEG
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52884: LD_ADDR_VAR 0 20
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 0
52901: PUSH
52902: LD_INT 1
52904: NEG
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: LD_INT 1
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: LD_INT 2
52969: NEG
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: LD_INT 2
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 2
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 2
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 2
53019: PUSH
53020: LD_INT 2
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 1
53029: PUSH
53030: LD_INT 2
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: LD_INT 2
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 2
53060: NEG
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 2
53071: NEG
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 2
53083: NEG
53084: PUSH
53085: LD_INT 2
53087: NEG
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53114: LD_ADDR_VAR 0 21
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 1
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 0
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 1
53183: NEG
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: LD_INT 2
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: LD_INT 2
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 2
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 2
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 2
53249: PUSH
53250: LD_INT 2
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: LD_INT 2
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: LD_INT 2
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 2
53290: NEG
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 2
53301: NEG
53302: PUSH
53303: LD_INT 1
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 2
53313: NEG
53314: PUSH
53315: LD_INT 2
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53344: LD_ADDR_VAR 0 22
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: LD_INT 0
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 0
53361: PUSH
53362: LD_INT 1
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: LD_INT 1
53417: NEG
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: LD_INT 2
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: LD_INT 2
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 2
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 2
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 2
53479: PUSH
53480: LD_INT 2
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 1
53489: PUSH
53490: LD_INT 2
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: LD_INT 2
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 2
53520: NEG
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 2
53531: NEG
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 2
53543: NEG
53544: PUSH
53545: LD_INT 2
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53574: LD_ADDR_VAR 0 23
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: LD_INT 1
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: LD_INT 1
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: NEG
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: NEG
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: NEG
53656: PUSH
53657: LD_INT 2
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: LD_INT 2
53670: NEG
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 2
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 2
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 2
53709: PUSH
53710: LD_INT 2
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 1
53719: PUSH
53720: LD_INT 2
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: LD_INT 2
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: LD_INT 1
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 2
53750: NEG
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 2
53761: NEG
53762: PUSH
53763: LD_INT 1
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: NEG
53774: PUSH
53775: LD_INT 2
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 2
53785: NEG
53786: PUSH
53787: LD_INT 3
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: LD_INT 3
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: LD_INT 2
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 2
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53854: LD_ADDR_VAR 0 24
53858: PUSH
53859: LD_INT 0
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: LD_INT 1
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 1
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: LD_INT 2
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: LD_INT 2
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: PUSH
53959: LD_INT 1
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 2
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 2
53979: PUSH
53980: LD_INT 1
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 2
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: LD_INT 2
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: LD_INT 2
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 2
54030: NEG
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 2
54041: NEG
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 2
54053: NEG
54054: PUSH
54055: LD_INT 2
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: LD_INT 2
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 3
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 3
54097: PUSH
54098: LD_INT 2
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54130: LD_ADDR_VAR 0 25
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: LD_INT 1
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 1
54199: NEG
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: LD_INT 2
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: LD_INT 2
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: LD_INT 1
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 2
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 2
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 2
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: LD_INT 2
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: LD_INT 2
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 2
54306: NEG
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 2
54317: NEG
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 2
54329: NEG
54330: PUSH
54331: LD_INT 2
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 3
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 3
54351: PUSH
54352: LD_INT 2
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: LD_INT 3
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: PUSH
54372: LD_INT 3
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54404: LD_ADDR_VAR 0 26
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: LD_INT 2
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: LD_INT 2
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 2
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 2
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: PUSH
54540: LD_INT 2
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: LD_INT 2
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: LD_INT 2
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 2
54580: NEG
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 2
54591: NEG
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 2
54603: NEG
54604: PUSH
54605: LD_INT 2
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 2
54615: PUSH
54616: LD_INT 3
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: LD_INT 3
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 2
54646: NEG
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54680: LD_ADDR_VAR 0 27
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: LD_INT 1
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 1
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: LD_INT 2
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: LD_INT 2
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 2
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 2
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 2
54815: PUSH
54816: LD_INT 2
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: LD_INT 2
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: LD_INT 2
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 2
54856: NEG
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 2
54867: NEG
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 2
54879: NEG
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: NEG
54892: PUSH
54893: LD_INT 2
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 2
54902: NEG
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 3
54913: NEG
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 3
54925: NEG
54926: PUSH
54927: LD_INT 2
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54960: LD_ADDR_VAR 0 28
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 0
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: LD_INT 2
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: LD_INT 2
55056: NEG
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: LD_INT 2
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: LD_INT 2
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 1
55125: NEG
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 2
55136: NEG
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 2
55147: NEG
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 2
55159: NEG
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 2
55171: NEG
55172: PUSH
55173: LD_INT 3
55175: NEG
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 1
55183: NEG
55184: PUSH
55185: LD_INT 3
55187: NEG
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 3
55195: NEG
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 3
55207: NEG
55208: PUSH
55209: LD_INT 2
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55242: LD_ADDR_VAR 0 29
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: LD_INT 0
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: LD_INT 1
55262: NEG
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 1
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 1
55280: PUSH
55281: LD_INT 1
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: LD_INT 2
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: LD_INT 2
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 1
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 2
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 2
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: LD_INT 2
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: LD_INT 2
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 2
55408: NEG
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 2
55420: NEG
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 2
55432: NEG
55433: PUSH
55434: LD_INT 3
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 2
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 3
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: LD_INT 3
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: LD_INT 2
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 3
55486: NEG
55487: PUSH
55488: LD_INT 2
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55521: LD_ADDR_VAR 0 30
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: LD_INT 1
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 1
55590: NEG
55591: PUSH
55592: LD_INT 1
55594: NEG
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: LD_INT 2
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: LD_INT 2
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 2
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 2
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 2
55656: PUSH
55657: LD_INT 2
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: LD_INT 2
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: LD_INT 1
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 2
55687: NEG
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 2
55698: NEG
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: NEG
55711: PUSH
55712: LD_INT 3
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: LD_INT 2
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 3
55733: PUSH
55734: LD_INT 2
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: LD_INT 3
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 3
55764: NEG
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55799: LD_ADDR_VAR 0 31
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 0
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: LD_INT 1
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: NEG
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 1
55880: NEG
55881: PUSH
55882: LD_INT 2
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 2
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 2
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 2
55923: PUSH
55924: LD_INT 2
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 1
55933: PUSH
55934: LD_INT 2
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: LD_INT 2
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 2
55964: NEG
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 2
55976: NEG
55977: PUSH
55978: LD_INT 2
55980: NEG
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 2
55988: NEG
55989: PUSH
55990: LD_INT 3
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 2
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 3
56011: PUSH
56012: LD_INT 1
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: PUSH
56022: LD_INT 3
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: LD_INT 2
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 3
56042: NEG
56043: PUSH
56044: LD_INT 2
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56077: LD_ADDR_VAR 0 32
56081: PUSH
56082: LD_INT 0
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: LD_INT 0
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: LD_INT 0
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: LD_INT 2
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: LD_INT 2
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 2
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 2
56202: PUSH
56203: LD_INT 2
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: LD_INT 2
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: LD_INT 2
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: NEG
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 2
56243: NEG
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 2
56254: NEG
56255: PUSH
56256: LD_INT 1
56258: NEG
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: LD_INT 3
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: LD_INT 2
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 3
56289: PUSH
56290: LD_INT 2
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 2
56299: PUSH
56300: LD_INT 3
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 2
56309: NEG
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 3
56320: NEG
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56355: LD_ADDR_VAR 0 33
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: NEG
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 1
56424: NEG
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 1
56436: NEG
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 2
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 2
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: LD_INT 2
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 2
56510: NEG
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 2
56521: NEG
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 2
56533: NEG
56534: PUSH
56535: LD_INT 2
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 2
56545: NEG
56546: PUSH
56547: LD_INT 3
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 2
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 3
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: LD_INT 3
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: NEG
56589: PUSH
56590: LD_INT 2
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 3
56599: NEG
56600: PUSH
56601: LD_INT 2
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56634: LD_ADDR_VAR 0 34
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 0
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: LD_INT 1
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: LD_INT 1
56707: NEG
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 1
56715: NEG
56716: PUSH
56717: LD_INT 2
56719: NEG
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 0
56727: PUSH
56728: LD_INT 2
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: LD_INT 1
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 2
56749: PUSH
56750: LD_INT 1
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 2
56759: PUSH
56760: LD_INT 2
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 1
56769: PUSH
56770: LD_INT 2
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: LD_INT 1
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 2
56790: NEG
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 2
56801: NEG
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 2
56813: NEG
56814: PUSH
56815: LD_INT 2
56817: NEG
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 1
56825: NEG
56826: PUSH
56827: LD_INT 3
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: LD_INT 2
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 3
56848: PUSH
56849: LD_INT 2
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 2
56858: PUSH
56859: LD_INT 3
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 2
56868: NEG
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 3
56879: NEG
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56914: LD_ADDR_VAR 0 35
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 1
56972: NEG
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 2
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 2
57005: NEG
57006: PUSH
57007: LD_INT 1
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57026: LD_ADDR_VAR 0 36
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 1
57054: PUSH
57055: LD_INT 0
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 1
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 1
57084: NEG
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: NEG
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: NEG
57108: PUSH
57109: LD_INT 2
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: LD_INT 2
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57138: LD_ADDR_VAR 0 37
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57250: LD_ADDR_VAR 0 38
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 0
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 1
57308: NEG
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: LD_INT 1
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 2
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 2
57341: NEG
57342: PUSH
57343: LD_INT 1
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57362: LD_ADDR_VAR 0 39
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: LD_INT 0
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 0
57379: PUSH
57380: LD_INT 1
57382: NEG
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 1
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: LD_INT 1
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: LD_INT 1
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 1
57420: NEG
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 1
57431: NEG
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: LD_INT 2
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: LD_INT 2
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57474: LD_ADDR_VAR 0 40
57478: PUSH
57479: LD_INT 0
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: LD_INT 1
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 1
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: LD_INT 1
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 1
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: LD_INT 1
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57586: LD_ADDR_VAR 0 41
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 1
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: LD_INT 1
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: LD_INT 0
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 1
57655: NEG
57656: PUSH
57657: LD_INT 1
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: NEG
57668: PUSH
57669: LD_INT 2
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 2
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 2
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 2
57710: PUSH
57711: LD_INT 2
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 1
57720: PUSH
57721: LD_INT 2
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: LD_INT 1
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 2
57741: NEG
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 2
57752: NEG
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 2
57764: NEG
57765: PUSH
57766: LD_INT 2
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 2
57776: NEG
57777: PUSH
57778: LD_INT 3
57780: NEG
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 2
57788: PUSH
57789: LD_INT 1
57791: NEG
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 3
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 3
57809: PUSH
57810: LD_INT 1
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 3
57819: PUSH
57820: LD_INT 2
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 3
57829: PUSH
57830: LD_INT 3
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 2
57839: PUSH
57840: LD_INT 3
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 2
57849: NEG
57850: PUSH
57851: LD_INT 1
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 3
57860: NEG
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 3
57871: NEG
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 3
57883: NEG
57884: PUSH
57885: LD_INT 2
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 3
57895: NEG
57896: PUSH
57897: LD_INT 3
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57936: LD_ADDR_VAR 0 42
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 1
58005: NEG
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: LD_INT 2
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 0
58029: PUSH
58030: LD_INT 2
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 2
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 2
58061: PUSH
58062: LD_INT 2
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: PUSH
58072: LD_INT 2
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 1
58091: NEG
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: LD_INT 1
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 2
58114: NEG
58115: PUSH
58116: LD_INT 2
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 2
58126: NEG
58127: PUSH
58128: LD_INT 3
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: LD_INT 3
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: LD_INT 3
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: LD_INT 2
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 3
58172: PUSH
58173: LD_INT 2
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 3
58182: PUSH
58183: LD_INT 3
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 2
58192: PUSH
58193: LD_INT 3
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: LD_INT 3
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: LD_INT 3
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: LD_INT 2
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 3
58233: NEG
58234: PUSH
58235: LD_INT 2
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 3
58245: NEG
58246: PUSH
58247: LD_INT 3
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58286: LD_ADDR_VAR 0 43
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: LD_INT 1
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: LD_INT 2
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 2
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: LD_INT 2
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: LD_INT 2
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: LD_INT 1
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 2
58452: NEG
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 2
58463: NEG
58464: PUSH
58465: LD_INT 1
58467: NEG
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 1
58475: NEG
58476: PUSH
58477: LD_INT 3
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 0
58487: PUSH
58488: LD_INT 3
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 1
58498: PUSH
58499: LD_INT 2
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 2
58509: PUSH
58510: LD_INT 1
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 3
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 3
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 1
58540: PUSH
58541: LD_INT 3
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 0
58550: PUSH
58551: LD_INT 3
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 1
58560: NEG
58561: PUSH
58562: LD_INT 2
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 2
58571: NEG
58572: PUSH
58573: LD_INT 1
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 3
58582: NEG
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 3
58593: NEG
58594: PUSH
58595: LD_INT 1
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58634: LD_ADDR_VAR 0 44
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 1
58672: PUSH
58673: LD_INT 1
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 1
58692: NEG
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: NEG
58716: PUSH
58717: LD_INT 2
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 1
58727: PUSH
58728: LD_INT 1
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 2
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 2
58748: PUSH
58749: LD_INT 1
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 2
58758: PUSH
58759: LD_INT 2
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 1
58768: PUSH
58769: LD_INT 2
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 1
58778: NEG
58779: PUSH
58780: LD_INT 1
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 2
58789: NEG
58790: PUSH
58791: LD_INT 0
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 2
58800: NEG
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 2
58812: NEG
58813: PUSH
58814: LD_INT 2
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 2
58824: NEG
58825: PUSH
58826: LD_INT 3
58828: NEG
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 2
58836: PUSH
58837: LD_INT 1
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 3
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 3
58857: PUSH
58858: LD_INT 1
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 3
58867: PUSH
58868: LD_INT 2
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 3
58877: PUSH
58878: LD_INT 3
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 2
58887: PUSH
58888: LD_INT 3
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 2
58897: NEG
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 3
58908: NEG
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 3
58919: NEG
58920: PUSH
58921: LD_INT 1
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 3
58931: NEG
58932: PUSH
58933: LD_INT 2
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 3
58943: NEG
58944: PUSH
58945: LD_INT 3
58947: NEG
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58984: LD_ADDR_VAR 0 45
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: LD_INT 1
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: PUSH
59023: LD_INT 1
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: NEG
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: NEG
59066: PUSH
59067: LD_INT 2
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: LD_INT 2
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: LD_INT 1
59091: NEG
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 2
59099: PUSH
59100: LD_INT 1
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 2
59109: PUSH
59110: LD_INT 2
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 1
59119: PUSH
59120: LD_INT 2
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: LD_INT 2
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 1
59139: NEG
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 2
59150: NEG
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 2
59162: NEG
59163: PUSH
59164: LD_INT 2
59166: NEG
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 2
59174: NEG
59175: PUSH
59176: LD_INT 3
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: LD_INT 3
59190: NEG
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: LD_INT 3
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 1
59209: PUSH
59210: LD_INT 2
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 3
59220: PUSH
59221: LD_INT 2
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 3
59230: PUSH
59231: LD_INT 3
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: PUSH
59241: LD_INT 3
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: LD_INT 3
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: LD_INT 3
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 1
59270: NEG
59271: PUSH
59272: LD_INT 2
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 3
59281: NEG
59282: PUSH
59283: LD_INT 2
59285: NEG
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 3
59293: NEG
59294: PUSH
59295: LD_INT 3
59297: NEG
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59334: LD_ADDR_VAR 0 46
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 0
59351: PUSH
59352: LD_INT 1
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 1
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 1
59372: PUSH
59373: LD_INT 1
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: LD_INT 2
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: LD_INT 2
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 2
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 2
59459: PUSH
59460: LD_INT 1
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: LD_INT 2
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: LD_INT 2
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 1
59489: NEG
59490: PUSH
59491: LD_INT 1
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 2
59500: NEG
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 2
59511: NEG
59512: PUSH
59513: LD_INT 1
59515: NEG
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 1
59523: NEG
59524: PUSH
59525: LD_INT 3
59527: NEG
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: LD_INT 3
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: LD_INT 2
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 2
59557: PUSH
59558: LD_INT 1
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 3
59568: PUSH
59569: LD_INT 0
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 3
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 1
59588: PUSH
59589: LD_INT 3
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: LD_INT 3
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: NEG
59609: PUSH
59610: LD_INT 2
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 2
59619: NEG
59620: PUSH
59621: LD_INT 1
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 3
59630: NEG
59631: PUSH
59632: LD_INT 0
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 3
59641: NEG
59642: PUSH
59643: LD_INT 1
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59682: LD_ADDR_VAR 0 47
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 1
59710: PUSH
59711: LD_INT 0
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: LD_INT 1
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 0
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: LD_INT 1
59755: NEG
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 1
59763: NEG
59764: PUSH
59765: LD_INT 2
59767: NEG
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 0
59775: PUSH
59776: LD_INT 2
59778: NEG
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 1
59786: PUSH
59787: LD_INT 1
59789: NEG
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 2
59797: NEG
59798: PUSH
59799: LD_INT 1
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 2
59809: NEG
59810: PUSH
59811: LD_INT 2
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59833: LD_ADDR_VAR 0 48
59837: PUSH
59838: LD_INT 0
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: LD_INT 1
59853: NEG
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 1
59861: PUSH
59862: LD_INT 0
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: LD_INT 1
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: LD_INT 1
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 1
59891: NEG
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 1
59902: NEG
59903: PUSH
59904: LD_INT 1
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: LD_INT 2
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: LD_INT 2
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: PUSH
59938: LD_INT 1
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 2
59948: PUSH
59949: LD_INT 0
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 2
59958: PUSH
59959: LD_INT 1
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59980: LD_ADDR_VAR 0 49
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 0
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 1
60008: PUSH
60009: LD_INT 0
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: LD_INT 1
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 0
60028: PUSH
60029: LD_INT 1
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 1
60038: NEG
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 1
60049: NEG
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: LD_INT 1
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 2
60072: PUSH
60073: LD_INT 0
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 2
60082: PUSH
60083: LD_INT 1
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 2
60092: PUSH
60093: LD_INT 2
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 1
60102: PUSH
60103: LD_INT 2
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60124: LD_ADDR_VAR 0 50
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 0
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 1
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 1
60162: PUSH
60163: LD_INT 1
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 0
60172: PUSH
60173: LD_INT 1
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 1
60182: NEG
60183: PUSH
60184: LD_INT 0
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 1
60193: NEG
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 2
60205: PUSH
60206: LD_INT 1
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 2
60215: PUSH
60216: LD_INT 2
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 1
60225: PUSH
60226: LD_INT 2
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 0
60235: PUSH
60236: LD_INT 2
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 1
60245: NEG
60246: PUSH
60247: LD_INT 1
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60268: LD_ADDR_VAR 0 51
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 1
60326: NEG
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: NEG
60338: PUSH
60339: LD_INT 1
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: LD_INT 2
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: LD_INT 2
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 1
60369: NEG
60370: PUSH
60371: LD_INT 1
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 2
60380: NEG
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 2
60391: NEG
60392: PUSH
60393: LD_INT 1
60395: NEG
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60415: LD_ADDR_VAR 0 52
60419: PUSH
60420: LD_INT 0
60422: PUSH
60423: LD_INT 0
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: LD_INT 1
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: PUSH
60444: LD_INT 0
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 1
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 0
60463: PUSH
60464: LD_INT 1
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 1
60473: NEG
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 1
60484: NEG
60485: PUSH
60486: LD_INT 1
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 1
60496: NEG
60497: PUSH
60498: LD_INT 2
60500: NEG
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 1
60508: NEG
60509: PUSH
60510: LD_INT 1
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 2
60519: NEG
60520: PUSH
60521: LD_INT 0
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 2
60530: NEG
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 2
60542: NEG
60543: PUSH
60544: LD_INT 2
60546: NEG
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60566: LD_ADDR_VAR 0 53
60570: PUSH
60571: LD_INT 0
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 0
60583: PUSH
60584: LD_INT 1
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 1
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 1
60604: PUSH
60605: LD_INT 1
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: LD_INT 1
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 1
60624: NEG
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 1
60635: NEG
60636: PUSH
60637: LD_INT 1
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 1
60647: NEG
60648: PUSH
60649: LD_INT 2
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: LD_INT 2
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 1
60670: PUSH
60671: LD_INT 1
60673: NEG
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 2
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 2
60691: PUSH
60692: LD_INT 1
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 2
60701: PUSH
60702: LD_INT 2
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: LD_INT 2
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: LD_INT 2
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 1
60731: NEG
60732: PUSH
60733: LD_INT 1
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 2
60742: NEG
60743: PUSH
60744: LD_INT 0
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 2
60753: NEG
60754: PUSH
60755: LD_INT 1
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 2
60765: NEG
60766: PUSH
60767: LD_INT 2
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60796: LD_ADDR_VAR 0 54
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: LD_INT 0
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 0
60813: PUSH
60814: LD_INT 1
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 1
60824: PUSH
60825: LD_INT 0
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 1
60834: PUSH
60835: LD_INT 1
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 0
60844: PUSH
60845: LD_INT 1
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 1
60854: NEG
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 1
60865: NEG
60866: PUSH
60867: LD_INT 1
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: NEG
60878: PUSH
60879: LD_INT 2
60881: NEG
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 0
60889: PUSH
60890: LD_INT 2
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 1
60900: PUSH
60901: LD_INT 1
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 2
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 2
60921: PUSH
60922: LD_INT 1
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 2
60931: PUSH
60932: LD_INT 2
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 1
60941: PUSH
60942: LD_INT 2
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 0
60951: PUSH
60952: LD_INT 2
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 1
60961: NEG
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 2
60972: NEG
60973: PUSH
60974: LD_INT 0
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 2
60983: NEG
60984: PUSH
60985: LD_INT 1
60987: NEG
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 2
60995: NEG
60996: PUSH
60997: LD_INT 2
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61026: LD_ADDR_VAR 0 55
61030: PUSH
61031: LD_INT 0
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: LD_INT 1
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 1
61054: PUSH
61055: LD_INT 0
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 1
61084: NEG
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 1
61095: NEG
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 1
61107: NEG
61108: PUSH
61109: LD_INT 2
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: LD_INT 2
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 1
61130: PUSH
61131: LD_INT 1
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 2
61141: PUSH
61142: LD_INT 0
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 2
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 2
61161: PUSH
61162: LD_INT 2
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: LD_INT 2
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: LD_INT 2
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 1
61191: NEG
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 2
61202: NEG
61203: PUSH
61204: LD_INT 0
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 2
61213: NEG
61214: PUSH
61215: LD_INT 1
61217: NEG
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 2
61225: NEG
61226: PUSH
61227: LD_INT 2
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61256: LD_ADDR_VAR 0 56
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: LD_INT 1
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: LD_INT 0
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 1
61294: PUSH
61295: LD_INT 1
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: LD_INT 1
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 1
61314: NEG
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 1
61325: NEG
61326: PUSH
61327: LD_INT 1
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 1
61337: NEG
61338: PUSH
61339: LD_INT 2
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: LD_INT 2
61352: NEG
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: LD_INT 1
61363: NEG
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 2
61371: PUSH
61372: LD_INT 0
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 2
61381: PUSH
61382: LD_INT 1
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 2
61391: PUSH
61392: LD_INT 2
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 1
61401: PUSH
61402: LD_INT 2
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 0
61411: PUSH
61412: LD_INT 2
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 1
61421: NEG
61422: PUSH
61423: LD_INT 1
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 2
61432: NEG
61433: PUSH
61434: LD_INT 0
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 2
61443: NEG
61444: PUSH
61445: LD_INT 1
61447: NEG
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 2
61455: NEG
61456: PUSH
61457: LD_INT 2
61459: NEG
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61486: LD_ADDR_VAR 0 57
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 0
61503: PUSH
61504: LD_INT 1
61506: NEG
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 1
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 1
61524: PUSH
61525: LD_INT 1
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 0
61534: PUSH
61535: LD_INT 1
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 1
61544: NEG
61545: PUSH
61546: LD_INT 0
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 1
61555: NEG
61556: PUSH
61557: LD_INT 1
61559: NEG
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 1
61567: NEG
61568: PUSH
61569: LD_INT 2
61571: NEG
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 0
61579: PUSH
61580: LD_INT 2
61582: NEG
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: LD_INT 1
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 2
61601: PUSH
61602: LD_INT 0
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 2
61611: PUSH
61612: LD_INT 1
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 2
61621: PUSH
61622: LD_INT 2
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 1
61631: PUSH
61632: LD_INT 2
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 0
61641: PUSH
61642: LD_INT 2
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 1
61651: NEG
61652: PUSH
61653: LD_INT 1
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 2
61662: NEG
61663: PUSH
61664: LD_INT 0
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 2
61673: NEG
61674: PUSH
61675: LD_INT 1
61677: NEG
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 2
61685: NEG
61686: PUSH
61687: LD_INT 2
61689: NEG
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61716: LD_ADDR_VAR 0 58
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: LD_INT 0
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: LD_INT 1
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 1
61754: PUSH
61755: LD_INT 1
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 0
61764: PUSH
61765: LD_INT 1
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 1
61774: NEG
61775: PUSH
61776: LD_INT 0
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 1
61785: NEG
61786: PUSH
61787: LD_INT 1
61789: NEG
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: LD_INT 2
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: LD_INT 2
61812: NEG
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 1
61820: PUSH
61821: LD_INT 1
61823: NEG
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 2
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 2
61841: PUSH
61842: LD_INT 1
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 2
61851: PUSH
61852: LD_INT 2
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 1
61861: PUSH
61862: LD_INT 2
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 0
61871: PUSH
61872: LD_INT 2
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 1
61881: NEG
61882: PUSH
61883: LD_INT 1
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 2
61892: NEG
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 2
61903: NEG
61904: PUSH
61905: LD_INT 1
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 2
61915: NEG
61916: PUSH
61917: LD_INT 2
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61946: LD_ADDR_VAR 0 59
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: LD_INT 0
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 0
61963: PUSH
61964: LD_INT 1
61966: NEG
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 1
61974: PUSH
61975: LD_INT 0
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: LD_INT 1
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 0
61994: PUSH
61995: LD_INT 1
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 1
62004: NEG
62005: PUSH
62006: LD_INT 0
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 1
62015: NEG
62016: PUSH
62017: LD_INT 1
62019: NEG
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62034: LD_ADDR_VAR 0 60
62038: PUSH
62039: LD_INT 0
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: LD_INT 1
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 1
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 1
62072: PUSH
62073: LD_INT 1
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: LD_INT 1
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 1
62092: NEG
62093: PUSH
62094: LD_INT 0
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 1
62103: NEG
62104: PUSH
62105: LD_INT 1
62107: NEG
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62122: LD_ADDR_VAR 0 61
62126: PUSH
62127: LD_INT 0
62129: PUSH
62130: LD_INT 0
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 0
62139: PUSH
62140: LD_INT 1
62142: NEG
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 1
62150: PUSH
62151: LD_INT 0
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 1
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 0
62170: PUSH
62171: LD_INT 1
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 1
62180: NEG
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 1
62191: NEG
62192: PUSH
62193: LD_INT 1
62195: NEG
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62210: LD_ADDR_VAR 0 62
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: LD_INT 0
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 0
62227: PUSH
62228: LD_INT 1
62230: NEG
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 1
62238: PUSH
62239: LD_INT 0
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: LD_INT 1
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 0
62258: PUSH
62259: LD_INT 1
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 1
62268: NEG
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 1
62279: NEG
62280: PUSH
62281: LD_INT 1
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62298: LD_ADDR_VAR 0 63
62302: PUSH
62303: LD_INT 0
62305: PUSH
62306: LD_INT 0
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 0
62315: PUSH
62316: LD_INT 1
62318: NEG
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 1
62326: PUSH
62327: LD_INT 0
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 1
62336: PUSH
62337: LD_INT 1
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 0
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 1
62356: NEG
62357: PUSH
62358: LD_INT 0
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 1
62367: NEG
62368: PUSH
62369: LD_INT 1
62371: NEG
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62386: LD_ADDR_VAR 0 64
62390: PUSH
62391: LD_INT 0
62393: PUSH
62394: LD_INT 0
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 0
62403: PUSH
62404: LD_INT 1
62406: NEG
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 1
62414: PUSH
62415: LD_INT 0
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 1
62424: PUSH
62425: LD_INT 1
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 0
62434: PUSH
62435: LD_INT 1
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 1
62444: NEG
62445: PUSH
62446: LD_INT 0
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 1
62455: NEG
62456: PUSH
62457: LD_INT 1
62459: NEG
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: ST_TO_ADDR
// end ; 1 :
62474: GO 68371
62476: LD_INT 1
62478: DOUBLE
62479: EQUAL
62480: IFTRUE 62484
62482: GO 65107
62484: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62485: LD_ADDR_VAR 0 11
62489: PUSH
62490: LD_INT 1
62492: NEG
62493: PUSH
62494: LD_INT 3
62496: NEG
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 0
62504: PUSH
62505: LD_INT 3
62507: NEG
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 1
62515: PUSH
62516: LD_INT 2
62518: NEG
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: LIST
62528: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62529: LD_ADDR_VAR 0 12
62533: PUSH
62534: LD_INT 2
62536: PUSH
62537: LD_INT 1
62539: NEG
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 3
62547: PUSH
62548: LD_INT 0
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 3
62557: PUSH
62558: LD_INT 1
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: LIST
62569: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62570: LD_ADDR_VAR 0 13
62574: PUSH
62575: LD_INT 3
62577: PUSH
62578: LD_INT 2
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 3
62587: PUSH
62588: LD_INT 3
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 2
62597: PUSH
62598: LD_INT 3
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: LIST
62609: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62610: LD_ADDR_VAR 0 14
62614: PUSH
62615: LD_INT 1
62617: PUSH
62618: LD_INT 3
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 0
62627: PUSH
62628: LD_INT 3
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 1
62637: NEG
62638: PUSH
62639: LD_INT 2
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: LIST
62650: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62651: LD_ADDR_VAR 0 15
62655: PUSH
62656: LD_INT 2
62658: NEG
62659: PUSH
62660: LD_INT 1
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 3
62669: NEG
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 3
62680: NEG
62681: PUSH
62682: LD_INT 1
62684: NEG
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: LIST
62694: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62695: LD_ADDR_VAR 0 16
62699: PUSH
62700: LD_INT 2
62702: NEG
62703: PUSH
62704: LD_INT 3
62706: NEG
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 3
62714: NEG
62715: PUSH
62716: LD_INT 2
62718: NEG
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 3
62726: NEG
62727: PUSH
62728: LD_INT 3
62730: NEG
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: LIST
62740: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62741: LD_ADDR_VAR 0 17
62745: PUSH
62746: LD_INT 1
62748: NEG
62749: PUSH
62750: LD_INT 3
62752: NEG
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 0
62760: PUSH
62761: LD_INT 3
62763: NEG
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 1
62771: PUSH
62772: LD_INT 2
62774: NEG
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: LIST
62784: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62785: LD_ADDR_VAR 0 18
62789: PUSH
62790: LD_INT 2
62792: PUSH
62793: LD_INT 1
62795: NEG
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 3
62803: PUSH
62804: LD_INT 0
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 3
62813: PUSH
62814: LD_INT 1
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: LIST
62825: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62826: LD_ADDR_VAR 0 19
62830: PUSH
62831: LD_INT 3
62833: PUSH
62834: LD_INT 2
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 3
62843: PUSH
62844: LD_INT 3
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 2
62853: PUSH
62854: LD_INT 3
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: LIST
62865: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62866: LD_ADDR_VAR 0 20
62870: PUSH
62871: LD_INT 1
62873: PUSH
62874: LD_INT 3
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 0
62883: PUSH
62884: LD_INT 3
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 1
62893: NEG
62894: PUSH
62895: LD_INT 2
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: LIST
62906: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62907: LD_ADDR_VAR 0 21
62911: PUSH
62912: LD_INT 2
62914: NEG
62915: PUSH
62916: LD_INT 1
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 3
62925: NEG
62926: PUSH
62927: LD_INT 0
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 3
62936: NEG
62937: PUSH
62938: LD_INT 1
62940: NEG
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: LIST
62950: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62951: LD_ADDR_VAR 0 22
62955: PUSH
62956: LD_INT 2
62958: NEG
62959: PUSH
62960: LD_INT 3
62962: NEG
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 3
62970: NEG
62971: PUSH
62972: LD_INT 2
62974: NEG
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 3
62982: NEG
62983: PUSH
62984: LD_INT 3
62986: NEG
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: LIST
62996: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62997: LD_ADDR_VAR 0 23
63001: PUSH
63002: LD_INT 0
63004: PUSH
63005: LD_INT 3
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 1
63015: NEG
63016: PUSH
63017: LD_INT 4
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 1
63027: PUSH
63028: LD_INT 3
63030: NEG
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: LIST
63040: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63041: LD_ADDR_VAR 0 24
63045: PUSH
63046: LD_INT 3
63048: PUSH
63049: LD_INT 0
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 3
63058: PUSH
63059: LD_INT 1
63061: NEG
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 4
63069: PUSH
63070: LD_INT 1
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: LIST
63081: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63082: LD_ADDR_VAR 0 25
63086: PUSH
63087: LD_INT 3
63089: PUSH
63090: LD_INT 3
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 4
63099: PUSH
63100: LD_INT 3
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 3
63109: PUSH
63110: LD_INT 4
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: LIST
63121: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63122: LD_ADDR_VAR 0 26
63126: PUSH
63127: LD_INT 0
63129: PUSH
63130: LD_INT 3
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 1
63139: PUSH
63140: LD_INT 4
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 1
63149: NEG
63150: PUSH
63151: LD_INT 3
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: LIST
63162: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63163: LD_ADDR_VAR 0 27
63167: PUSH
63168: LD_INT 3
63170: NEG
63171: PUSH
63172: LD_INT 0
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 3
63181: NEG
63182: PUSH
63183: LD_INT 1
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 4
63192: NEG
63193: PUSH
63194: LD_INT 1
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: LIST
63206: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63207: LD_ADDR_VAR 0 28
63211: PUSH
63212: LD_INT 3
63214: NEG
63215: PUSH
63216: LD_INT 3
63218: NEG
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 3
63226: NEG
63227: PUSH
63228: LD_INT 4
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 4
63238: NEG
63239: PUSH
63240: LD_INT 3
63242: NEG
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: LIST
63252: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63253: LD_ADDR_VAR 0 29
63257: PUSH
63258: LD_INT 1
63260: NEG
63261: PUSH
63262: LD_INT 3
63264: NEG
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: LD_INT 3
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 1
63283: PUSH
63284: LD_INT 2
63286: NEG
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 1
63294: NEG
63295: PUSH
63296: LD_INT 4
63298: NEG
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 0
63306: PUSH
63307: LD_INT 4
63309: NEG
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 1
63317: PUSH
63318: LD_INT 3
63320: NEG
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 1
63328: NEG
63329: PUSH
63330: LD_INT 5
63332: NEG
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 0
63340: PUSH
63341: LD_INT 5
63343: NEG
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 1
63351: PUSH
63352: LD_INT 4
63354: NEG
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 1
63362: NEG
63363: PUSH
63364: LD_INT 6
63366: NEG
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 0
63374: PUSH
63375: LD_INT 6
63377: NEG
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 1
63385: PUSH
63386: LD_INT 5
63388: NEG
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63408: LD_ADDR_VAR 0 30
63412: PUSH
63413: LD_INT 2
63415: PUSH
63416: LD_INT 1
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 3
63426: PUSH
63427: LD_INT 0
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 3
63436: PUSH
63437: LD_INT 1
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 3
63446: PUSH
63447: LD_INT 1
63449: NEG
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 4
63457: PUSH
63458: LD_INT 0
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 4
63467: PUSH
63468: LD_INT 1
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 4
63477: PUSH
63478: LD_INT 1
63480: NEG
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 5
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 5
63498: PUSH
63499: LD_INT 1
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 5
63508: PUSH
63509: LD_INT 1
63511: NEG
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 6
63519: PUSH
63520: LD_INT 0
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 6
63529: PUSH
63530: LD_INT 1
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63551: LD_ADDR_VAR 0 31
63555: PUSH
63556: LD_INT 3
63558: PUSH
63559: LD_INT 2
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 3
63568: PUSH
63569: LD_INT 3
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 2
63578: PUSH
63579: LD_INT 3
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 4
63588: PUSH
63589: LD_INT 3
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 4
63598: PUSH
63599: LD_INT 4
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 3
63608: PUSH
63609: LD_INT 4
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 5
63618: PUSH
63619: LD_INT 4
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 5
63628: PUSH
63629: LD_INT 5
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 4
63638: PUSH
63639: LD_INT 5
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 6
63648: PUSH
63649: LD_INT 5
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 6
63658: PUSH
63659: LD_INT 6
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 5
63668: PUSH
63669: LD_INT 6
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63690: LD_ADDR_VAR 0 32
63694: PUSH
63695: LD_INT 1
63697: PUSH
63698: LD_INT 3
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 0
63707: PUSH
63708: LD_INT 3
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 1
63717: NEG
63718: PUSH
63719: LD_INT 2
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 1
63728: PUSH
63729: LD_INT 4
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 0
63738: PUSH
63739: LD_INT 4
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 1
63748: NEG
63749: PUSH
63750: LD_INT 3
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: LD_INT 5
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 0
63769: PUSH
63770: LD_INT 5
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 1
63779: NEG
63780: PUSH
63781: LD_INT 4
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 1
63790: PUSH
63791: LD_INT 6
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 0
63800: PUSH
63801: LD_INT 6
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 1
63810: NEG
63811: PUSH
63812: LD_INT 5
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63833: LD_ADDR_VAR 0 33
63837: PUSH
63838: LD_INT 2
63840: NEG
63841: PUSH
63842: LD_INT 1
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 3
63851: NEG
63852: PUSH
63853: LD_INT 0
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 3
63862: NEG
63863: PUSH
63864: LD_INT 1
63866: NEG
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 3
63874: NEG
63875: PUSH
63876: LD_INT 1
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 4
63885: NEG
63886: PUSH
63887: LD_INT 0
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 4
63896: NEG
63897: PUSH
63898: LD_INT 1
63900: NEG
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 4
63908: NEG
63909: PUSH
63910: LD_INT 1
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 5
63919: NEG
63920: PUSH
63921: LD_INT 0
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 5
63930: NEG
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 5
63942: NEG
63943: PUSH
63944: LD_INT 1
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 6
63953: NEG
63954: PUSH
63955: LD_INT 0
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 6
63964: NEG
63965: PUSH
63966: LD_INT 1
63968: NEG
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63988: LD_ADDR_VAR 0 34
63992: PUSH
63993: LD_INT 2
63995: NEG
63996: PUSH
63997: LD_INT 3
63999: NEG
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 3
64007: NEG
64008: PUSH
64009: LD_INT 2
64011: NEG
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 3
64019: NEG
64020: PUSH
64021: LD_INT 3
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 3
64031: NEG
64032: PUSH
64033: LD_INT 4
64035: NEG
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 4
64043: NEG
64044: PUSH
64045: LD_INT 3
64047: NEG
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 4
64055: NEG
64056: PUSH
64057: LD_INT 4
64059: NEG
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 4
64067: NEG
64068: PUSH
64069: LD_INT 5
64071: NEG
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 5
64079: NEG
64080: PUSH
64081: LD_INT 4
64083: NEG
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 5
64091: NEG
64092: PUSH
64093: LD_INT 5
64095: NEG
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 5
64103: NEG
64104: PUSH
64105: LD_INT 6
64107: NEG
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 6
64115: NEG
64116: PUSH
64117: LD_INT 5
64119: NEG
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 6
64127: NEG
64128: PUSH
64129: LD_INT 6
64131: NEG
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64151: LD_ADDR_VAR 0 41
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: LD_INT 2
64161: NEG
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 1
64169: NEG
64170: PUSH
64171: LD_INT 3
64173: NEG
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 1
64181: PUSH
64182: LD_INT 2
64184: NEG
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: LIST
64194: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64195: LD_ADDR_VAR 0 42
64199: PUSH
64200: LD_INT 2
64202: PUSH
64203: LD_INT 0
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 2
64212: PUSH
64213: LD_INT 1
64215: NEG
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 3
64223: PUSH
64224: LD_INT 1
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: LIST
64235: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64236: LD_ADDR_VAR 0 43
64240: PUSH
64241: LD_INT 2
64243: PUSH
64244: LD_INT 2
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 3
64253: PUSH
64254: LD_INT 2
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 2
64263: PUSH
64264: LD_INT 3
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: LIST
64275: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64276: LD_ADDR_VAR 0 44
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: LD_INT 2
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 1
64293: PUSH
64294: LD_INT 3
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 1
64303: NEG
64304: PUSH
64305: LD_INT 2
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: LIST
64316: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64317: LD_ADDR_VAR 0 45
64321: PUSH
64322: LD_INT 2
64324: NEG
64325: PUSH
64326: LD_INT 0
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 2
64335: NEG
64336: PUSH
64337: LD_INT 1
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 3
64346: NEG
64347: PUSH
64348: LD_INT 1
64350: NEG
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: LIST
64360: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64361: LD_ADDR_VAR 0 46
64365: PUSH
64366: LD_INT 2
64368: NEG
64369: PUSH
64370: LD_INT 2
64372: NEG
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 2
64380: NEG
64381: PUSH
64382: LD_INT 3
64384: NEG
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 3
64392: NEG
64393: PUSH
64394: LD_INT 2
64396: NEG
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: LIST
64406: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64407: LD_ADDR_VAR 0 47
64411: PUSH
64412: LD_INT 2
64414: NEG
64415: PUSH
64416: LD_INT 3
64418: NEG
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 1
64426: NEG
64427: PUSH
64428: LD_INT 3
64430: NEG
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64440: LD_ADDR_VAR 0 48
64444: PUSH
64445: LD_INT 1
64447: PUSH
64448: LD_INT 2
64450: NEG
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 2
64458: PUSH
64459: LD_INT 1
64461: NEG
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64471: LD_ADDR_VAR 0 49
64475: PUSH
64476: LD_INT 3
64478: PUSH
64479: LD_INT 1
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 3
64488: PUSH
64489: LD_INT 2
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64500: LD_ADDR_VAR 0 50
64504: PUSH
64505: LD_INT 2
64507: PUSH
64508: LD_INT 3
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 1
64517: PUSH
64518: LD_INT 3
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64529: LD_ADDR_VAR 0 51
64533: PUSH
64534: LD_INT 1
64536: NEG
64537: PUSH
64538: LD_INT 2
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 2
64547: NEG
64548: PUSH
64549: LD_INT 1
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64560: LD_ADDR_VAR 0 52
64564: PUSH
64565: LD_INT 3
64567: NEG
64568: PUSH
64569: LD_INT 1
64571: NEG
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 3
64579: NEG
64580: PUSH
64581: LD_INT 2
64583: NEG
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64593: LD_ADDR_VAR 0 53
64597: PUSH
64598: LD_INT 1
64600: NEG
64601: PUSH
64602: LD_INT 3
64604: NEG
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 0
64612: PUSH
64613: LD_INT 3
64615: NEG
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 1
64623: PUSH
64624: LD_INT 2
64626: NEG
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: LIST
64636: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64637: LD_ADDR_VAR 0 54
64641: PUSH
64642: LD_INT 2
64644: PUSH
64645: LD_INT 1
64647: NEG
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 3
64655: PUSH
64656: LD_INT 0
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 3
64665: PUSH
64666: LD_INT 1
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: LIST
64677: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64678: LD_ADDR_VAR 0 55
64682: PUSH
64683: LD_INT 3
64685: PUSH
64686: LD_INT 2
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 3
64695: PUSH
64696: LD_INT 3
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 2
64705: PUSH
64706: LD_INT 3
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: LIST
64717: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64718: LD_ADDR_VAR 0 56
64722: PUSH
64723: LD_INT 1
64725: PUSH
64726: LD_INT 3
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 0
64735: PUSH
64736: LD_INT 3
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 1
64745: NEG
64746: PUSH
64747: LD_INT 2
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: LIST
64758: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64759: LD_ADDR_VAR 0 57
64763: PUSH
64764: LD_INT 2
64766: NEG
64767: PUSH
64768: LD_INT 1
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 3
64777: NEG
64778: PUSH
64779: LD_INT 0
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 3
64788: NEG
64789: PUSH
64790: LD_INT 1
64792: NEG
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: LIST
64802: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64803: LD_ADDR_VAR 0 58
64807: PUSH
64808: LD_INT 2
64810: NEG
64811: PUSH
64812: LD_INT 3
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 3
64822: NEG
64823: PUSH
64824: LD_INT 2
64826: NEG
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 3
64834: NEG
64835: PUSH
64836: LD_INT 3
64838: NEG
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: LIST
64848: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64849: LD_ADDR_VAR 0 59
64853: PUSH
64854: LD_INT 1
64856: NEG
64857: PUSH
64858: LD_INT 2
64860: NEG
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 0
64868: PUSH
64869: LD_INT 2
64871: NEG
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 1
64879: PUSH
64880: LD_INT 1
64882: NEG
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: LIST
64892: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64893: LD_ADDR_VAR 0 60
64897: PUSH
64898: LD_INT 1
64900: PUSH
64901: LD_INT 1
64903: NEG
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 2
64911: PUSH
64912: LD_INT 0
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 2
64921: PUSH
64922: LD_INT 1
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: LIST
64933: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64934: LD_ADDR_VAR 0 61
64938: PUSH
64939: LD_INT 2
64941: PUSH
64942: LD_INT 1
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 2
64951: PUSH
64952: LD_INT 2
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 1
64961: PUSH
64962: LD_INT 2
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: LIST
64973: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64974: LD_ADDR_VAR 0 62
64978: PUSH
64979: LD_INT 1
64981: PUSH
64982: LD_INT 2
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 0
64991: PUSH
64992: LD_INT 2
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 1
65001: NEG
65002: PUSH
65003: LD_INT 1
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: LIST
65014: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65015: LD_ADDR_VAR 0 63
65019: PUSH
65020: LD_INT 1
65022: NEG
65023: PUSH
65024: LD_INT 1
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 2
65033: NEG
65034: PUSH
65035: LD_INT 0
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 2
65044: NEG
65045: PUSH
65046: LD_INT 1
65048: NEG
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: LIST
65058: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65059: LD_ADDR_VAR 0 64
65063: PUSH
65064: LD_INT 1
65066: NEG
65067: PUSH
65068: LD_INT 2
65070: NEG
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 2
65078: NEG
65079: PUSH
65080: LD_INT 1
65082: NEG
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 2
65090: NEG
65091: PUSH
65092: LD_INT 2
65094: NEG
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: LIST
65104: ST_TO_ADDR
// end ; 2 :
65105: GO 68371
65107: LD_INT 2
65109: DOUBLE
65110: EQUAL
65111: IFTRUE 65115
65113: GO 68370
65115: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65116: LD_ADDR_VAR 0 29
65120: PUSH
65121: LD_INT 4
65123: PUSH
65124: LD_INT 0
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 4
65133: PUSH
65134: LD_INT 1
65136: NEG
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 5
65144: PUSH
65145: LD_INT 0
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 5
65154: PUSH
65155: LD_INT 1
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 4
65164: PUSH
65165: LD_INT 1
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 3
65174: PUSH
65175: LD_INT 0
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 3
65184: PUSH
65185: LD_INT 1
65187: NEG
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 3
65195: PUSH
65196: LD_INT 2
65198: NEG
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 5
65206: PUSH
65207: LD_INT 2
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 3
65216: PUSH
65217: LD_INT 3
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 3
65226: PUSH
65227: LD_INT 2
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 4
65236: PUSH
65237: LD_INT 3
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 4
65246: PUSH
65247: LD_INT 4
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 3
65256: PUSH
65257: LD_INT 4
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 2
65266: PUSH
65267: LD_INT 3
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 2
65276: PUSH
65277: LD_INT 2
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 4
65286: PUSH
65287: LD_INT 2
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 2
65296: PUSH
65297: LD_INT 4
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 0
65306: PUSH
65307: LD_INT 4
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 0
65316: PUSH
65317: LD_INT 3
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 1
65326: PUSH
65327: LD_INT 4
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 1
65336: PUSH
65337: LD_INT 5
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 0
65346: PUSH
65347: LD_INT 5
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 1
65356: NEG
65357: PUSH
65358: LD_INT 4
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 1
65367: NEG
65368: PUSH
65369: LD_INT 3
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 2
65378: PUSH
65379: LD_INT 5
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 2
65388: NEG
65389: PUSH
65390: LD_INT 3
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 3
65399: NEG
65400: PUSH
65401: LD_INT 0
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 3
65410: NEG
65411: PUSH
65412: LD_INT 1
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 2
65422: NEG
65423: PUSH
65424: LD_INT 0
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 2
65433: NEG
65434: PUSH
65435: LD_INT 1
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 3
65444: NEG
65445: PUSH
65446: LD_INT 1
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 4
65455: NEG
65456: PUSH
65457: LD_INT 0
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 4
65466: NEG
65467: PUSH
65468: LD_INT 1
65470: NEG
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 4
65478: NEG
65479: PUSH
65480: LD_INT 2
65482: NEG
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 2
65490: NEG
65491: PUSH
65492: LD_INT 2
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 4
65501: NEG
65502: PUSH
65503: LD_INT 4
65505: NEG
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 4
65513: NEG
65514: PUSH
65515: LD_INT 5
65517: NEG
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 3
65525: NEG
65526: PUSH
65527: LD_INT 4
65529: NEG
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 3
65537: NEG
65538: PUSH
65539: LD_INT 3
65541: NEG
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 4
65549: NEG
65550: PUSH
65551: LD_INT 3
65553: NEG
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 5
65561: NEG
65562: PUSH
65563: LD_INT 4
65565: NEG
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 5
65573: NEG
65574: PUSH
65575: LD_INT 5
65577: NEG
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 3
65585: NEG
65586: PUSH
65587: LD_INT 5
65589: NEG
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 5
65597: NEG
65598: PUSH
65599: LD_INT 3
65601: NEG
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65654: LD_ADDR_VAR 0 30
65658: PUSH
65659: LD_INT 4
65661: PUSH
65662: LD_INT 4
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 4
65671: PUSH
65672: LD_INT 3
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 5
65681: PUSH
65682: LD_INT 4
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 5
65691: PUSH
65692: LD_INT 5
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 4
65701: PUSH
65702: LD_INT 5
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 3
65711: PUSH
65712: LD_INT 4
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 3
65721: PUSH
65722: LD_INT 3
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 5
65731: PUSH
65732: LD_INT 3
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 3
65741: PUSH
65742: LD_INT 5
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 0
65751: PUSH
65752: LD_INT 3
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 0
65761: PUSH
65762: LD_INT 2
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 1
65771: PUSH
65772: LD_INT 3
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 1
65781: PUSH
65782: LD_INT 4
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 0
65791: PUSH
65792: LD_INT 4
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 1
65801: NEG
65802: PUSH
65803: LD_INT 3
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 1
65812: NEG
65813: PUSH
65814: LD_INT 2
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 2
65823: PUSH
65824: LD_INT 4
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 2
65833: NEG
65834: PUSH
65835: LD_INT 2
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 4
65844: NEG
65845: PUSH
65846: LD_INT 0
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 4
65855: NEG
65856: PUSH
65857: LD_INT 1
65859: NEG
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 3
65867: NEG
65868: PUSH
65869: LD_INT 0
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 3
65878: NEG
65879: PUSH
65880: LD_INT 1
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 4
65889: NEG
65890: PUSH
65891: LD_INT 1
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 5
65900: NEG
65901: PUSH
65902: LD_INT 0
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 5
65911: NEG
65912: PUSH
65913: LD_INT 1
65915: NEG
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 5
65923: NEG
65924: PUSH
65925: LD_INT 2
65927: NEG
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 3
65935: NEG
65936: PUSH
65937: LD_INT 2
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 3
65946: NEG
65947: PUSH
65948: LD_INT 3
65950: NEG
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 3
65958: NEG
65959: PUSH
65960: LD_INT 4
65962: NEG
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 2
65970: NEG
65971: PUSH
65972: LD_INT 3
65974: NEG
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 2
65982: NEG
65983: PUSH
65984: LD_INT 2
65986: NEG
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 3
65994: NEG
65995: PUSH
65996: LD_INT 2
65998: NEG
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 4
66006: NEG
66007: PUSH
66008: LD_INT 3
66010: NEG
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 4
66018: NEG
66019: PUSH
66020: LD_INT 4
66022: NEG
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 2
66030: NEG
66031: PUSH
66032: LD_INT 4
66034: NEG
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 4
66042: NEG
66043: PUSH
66044: LD_INT 2
66046: NEG
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 0
66054: PUSH
66055: LD_INT 4
66057: NEG
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 0
66065: PUSH
66066: LD_INT 5
66068: NEG
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 1
66076: PUSH
66077: LD_INT 4
66079: NEG
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 1
66087: PUSH
66088: LD_INT 3
66090: NEG
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 0
66098: PUSH
66099: LD_INT 3
66101: NEG
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 1
66109: NEG
66110: PUSH
66111: LD_INT 4
66113: NEG
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 1
66121: NEG
66122: PUSH
66123: LD_INT 5
66125: NEG
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 2
66133: PUSH
66134: LD_INT 3
66136: NEG
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 2
66144: NEG
66145: PUSH
66146: LD_INT 5
66148: NEG
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66201: LD_ADDR_VAR 0 31
66205: PUSH
66206: LD_INT 0
66208: PUSH
66209: LD_INT 4
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 0
66218: PUSH
66219: LD_INT 3
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 1
66228: PUSH
66229: LD_INT 4
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 1
66238: PUSH
66239: LD_INT 5
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 0
66248: PUSH
66249: LD_INT 5
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: LD_INT 1
66258: NEG
66259: PUSH
66260: LD_INT 4
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 1
66269: NEG
66270: PUSH
66271: LD_INT 3
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 2
66280: PUSH
66281: LD_INT 5
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 2
66290: NEG
66291: PUSH
66292: LD_INT 3
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 3
66301: NEG
66302: PUSH
66303: LD_INT 0
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 3
66312: NEG
66313: PUSH
66314: LD_INT 1
66316: NEG
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 2
66324: NEG
66325: PUSH
66326: LD_INT 0
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 2
66335: NEG
66336: PUSH
66337: LD_INT 1
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 3
66346: NEG
66347: PUSH
66348: LD_INT 1
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 4
66357: NEG
66358: PUSH
66359: LD_INT 0
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 4
66368: NEG
66369: PUSH
66370: LD_INT 1
66372: NEG
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 4
66380: NEG
66381: PUSH
66382: LD_INT 2
66384: NEG
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 2
66392: NEG
66393: PUSH
66394: LD_INT 2
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 4
66403: NEG
66404: PUSH
66405: LD_INT 4
66407: NEG
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 4
66415: NEG
66416: PUSH
66417: LD_INT 5
66419: NEG
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 3
66427: NEG
66428: PUSH
66429: LD_INT 4
66431: NEG
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 3
66439: NEG
66440: PUSH
66441: LD_INT 3
66443: NEG
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 4
66451: NEG
66452: PUSH
66453: LD_INT 3
66455: NEG
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 5
66463: NEG
66464: PUSH
66465: LD_INT 4
66467: NEG
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 5
66475: NEG
66476: PUSH
66477: LD_INT 5
66479: NEG
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 3
66487: NEG
66488: PUSH
66489: LD_INT 5
66491: NEG
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 5
66499: NEG
66500: PUSH
66501: LD_INT 3
66503: NEG
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 0
66511: PUSH
66512: LD_INT 3
66514: NEG
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 0
66522: PUSH
66523: LD_INT 4
66525: NEG
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 1
66533: PUSH
66534: LD_INT 3
66536: NEG
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 1
66544: PUSH
66545: LD_INT 2
66547: NEG
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 0
66555: PUSH
66556: LD_INT 2
66558: NEG
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 1
66566: NEG
66567: PUSH
66568: LD_INT 3
66570: NEG
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 1
66578: NEG
66579: PUSH
66580: LD_INT 4
66582: NEG
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 2
66590: PUSH
66591: LD_INT 2
66593: NEG
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 2
66601: NEG
66602: PUSH
66603: LD_INT 4
66605: NEG
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 4
66613: PUSH
66614: LD_INT 0
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 4
66623: PUSH
66624: LD_INT 1
66626: NEG
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 5
66634: PUSH
66635: LD_INT 0
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 5
66644: PUSH
66645: LD_INT 1
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 4
66654: PUSH
66655: LD_INT 1
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 3
66664: PUSH
66665: LD_INT 0
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 3
66674: PUSH
66675: LD_INT 1
66677: NEG
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 3
66685: PUSH
66686: LD_INT 2
66688: NEG
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 5
66696: PUSH
66697: LD_INT 2
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66751: LD_ADDR_VAR 0 32
66755: PUSH
66756: LD_INT 4
66758: NEG
66759: PUSH
66760: LD_INT 0
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 4
66769: NEG
66770: PUSH
66771: LD_INT 1
66773: NEG
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 3
66781: NEG
66782: PUSH
66783: LD_INT 0
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 3
66792: NEG
66793: PUSH
66794: LD_INT 1
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 4
66803: NEG
66804: PUSH
66805: LD_INT 1
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: LD_INT 5
66814: NEG
66815: PUSH
66816: LD_INT 0
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 5
66825: NEG
66826: PUSH
66827: LD_INT 1
66829: NEG
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PUSH
66835: LD_INT 5
66837: NEG
66838: PUSH
66839: LD_INT 2
66841: NEG
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 3
66849: NEG
66850: PUSH
66851: LD_INT 2
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 3
66860: NEG
66861: PUSH
66862: LD_INT 3
66864: NEG
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 3
66872: NEG
66873: PUSH
66874: LD_INT 4
66876: NEG
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 2
66884: NEG
66885: PUSH
66886: LD_INT 3
66888: NEG
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 2
66896: NEG
66897: PUSH
66898: LD_INT 2
66900: NEG
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 3
66908: NEG
66909: PUSH
66910: LD_INT 2
66912: NEG
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 4
66920: NEG
66921: PUSH
66922: LD_INT 3
66924: NEG
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 4
66932: NEG
66933: PUSH
66934: LD_INT 4
66936: NEG
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 2
66944: NEG
66945: PUSH
66946: LD_INT 4
66948: NEG
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 4
66956: NEG
66957: PUSH
66958: LD_INT 2
66960: NEG
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 0
66968: PUSH
66969: LD_INT 4
66971: NEG
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 0
66979: PUSH
66980: LD_INT 5
66982: NEG
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 1
66990: PUSH
66991: LD_INT 4
66993: NEG
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 1
67001: PUSH
67002: LD_INT 3
67004: NEG
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 0
67012: PUSH
67013: LD_INT 3
67015: NEG
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 1
67023: NEG
67024: PUSH
67025: LD_INT 4
67027: NEG
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 1
67035: NEG
67036: PUSH
67037: LD_INT 5
67039: NEG
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 2
67047: PUSH
67048: LD_INT 3
67050: NEG
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 2
67058: NEG
67059: PUSH
67060: LD_INT 5
67062: NEG
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 3
67070: PUSH
67071: LD_INT 0
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 3
67080: PUSH
67081: LD_INT 1
67083: NEG
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 4
67091: PUSH
67092: LD_INT 0
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 4
67101: PUSH
67102: LD_INT 1
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: LD_INT 3
67111: PUSH
67112: LD_INT 1
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 2
67121: PUSH
67122: LD_INT 0
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 2
67131: PUSH
67132: LD_INT 1
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 2
67142: PUSH
67143: LD_INT 2
67145: NEG
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 4
67153: PUSH
67154: LD_INT 2
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 4
67163: PUSH
67164: LD_INT 4
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 4
67173: PUSH
67174: LD_INT 3
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 5
67183: PUSH
67184: LD_INT 4
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 5
67193: PUSH
67194: LD_INT 5
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 4
67203: PUSH
67204: LD_INT 5
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 3
67213: PUSH
67214: LD_INT 4
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 3
67223: PUSH
67224: LD_INT 3
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 5
67233: PUSH
67234: LD_INT 3
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 3
67243: PUSH
67244: LD_INT 5
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67298: LD_ADDR_VAR 0 33
67302: PUSH
67303: LD_INT 4
67305: NEG
67306: PUSH
67307: LD_INT 4
67309: NEG
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 4
67317: NEG
67318: PUSH
67319: LD_INT 5
67321: NEG
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 3
67329: NEG
67330: PUSH
67331: LD_INT 4
67333: NEG
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: LD_INT 3
67341: NEG
67342: PUSH
67343: LD_INT 3
67345: NEG
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 4
67353: NEG
67354: PUSH
67355: LD_INT 3
67357: NEG
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 5
67365: NEG
67366: PUSH
67367: LD_INT 4
67369: NEG
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 5
67377: NEG
67378: PUSH
67379: LD_INT 5
67381: NEG
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 3
67389: NEG
67390: PUSH
67391: LD_INT 5
67393: NEG
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 5
67401: NEG
67402: PUSH
67403: LD_INT 3
67405: NEG
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 0
67413: PUSH
67414: LD_INT 3
67416: NEG
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 0
67424: PUSH
67425: LD_INT 4
67427: NEG
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 1
67435: PUSH
67436: LD_INT 3
67438: NEG
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 1
67446: PUSH
67447: LD_INT 2
67449: NEG
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: LD_INT 2
67460: NEG
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: LD_INT 1
67468: NEG
67469: PUSH
67470: LD_INT 3
67472: NEG
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 1
67480: NEG
67481: PUSH
67482: LD_INT 4
67484: NEG
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 2
67492: PUSH
67493: LD_INT 2
67495: NEG
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 2
67503: NEG
67504: PUSH
67505: LD_INT 4
67507: NEG
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 4
67515: PUSH
67516: LD_INT 0
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 4
67525: PUSH
67526: LD_INT 1
67528: NEG
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: LD_INT 5
67536: PUSH
67537: LD_INT 0
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 5
67546: PUSH
67547: LD_INT 1
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 4
67556: PUSH
67557: LD_INT 1
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 3
67566: PUSH
67567: LD_INT 0
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 3
67576: PUSH
67577: LD_INT 1
67579: NEG
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 3
67587: PUSH
67588: LD_INT 2
67590: NEG
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 5
67598: PUSH
67599: LD_INT 2
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 3
67608: PUSH
67609: LD_INT 3
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 3
67618: PUSH
67619: LD_INT 2
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 4
67628: PUSH
67629: LD_INT 3
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 4
67638: PUSH
67639: LD_INT 4
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 3
67648: PUSH
67649: LD_INT 4
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 2
67658: PUSH
67659: LD_INT 3
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 2
67668: PUSH
67669: LD_INT 2
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 4
67678: PUSH
67679: LD_INT 2
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 2
67688: PUSH
67689: LD_INT 4
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 0
67698: PUSH
67699: LD_INT 4
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 0
67708: PUSH
67709: LD_INT 3
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 1
67718: PUSH
67719: LD_INT 4
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 1
67728: PUSH
67729: LD_INT 5
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: LD_INT 0
67738: PUSH
67739: LD_INT 5
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 1
67748: NEG
67749: PUSH
67750: LD_INT 4
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 1
67759: NEG
67760: PUSH
67761: LD_INT 3
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 2
67770: PUSH
67771: LD_INT 5
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 2
67780: NEG
67781: PUSH
67782: LD_INT 3
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67836: LD_ADDR_VAR 0 34
67840: PUSH
67841: LD_INT 0
67843: PUSH
67844: LD_INT 4
67846: NEG
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 0
67854: PUSH
67855: LD_INT 5
67857: NEG
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 1
67865: PUSH
67866: LD_INT 4
67868: NEG
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 1
67876: PUSH
67877: LD_INT 3
67879: NEG
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: LD_INT 0
67887: PUSH
67888: LD_INT 3
67890: NEG
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 1
67898: NEG
67899: PUSH
67900: LD_INT 4
67902: NEG
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 1
67910: NEG
67911: PUSH
67912: LD_INT 5
67914: NEG
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 2
67922: PUSH
67923: LD_INT 3
67925: NEG
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 2
67933: NEG
67934: PUSH
67935: LD_INT 5
67937: NEG
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 3
67945: PUSH
67946: LD_INT 0
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 3
67955: PUSH
67956: LD_INT 1
67958: NEG
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 4
67966: PUSH
67967: LD_INT 0
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: LD_INT 4
67976: PUSH
67977: LD_INT 1
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 3
67986: PUSH
67987: LD_INT 1
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PUSH
67994: LD_INT 2
67996: PUSH
67997: LD_INT 0
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 2
68006: PUSH
68007: LD_INT 1
68009: NEG
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 2
68017: PUSH
68018: LD_INT 2
68020: NEG
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 4
68028: PUSH
68029: LD_INT 2
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 4
68038: PUSH
68039: LD_INT 4
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 4
68048: PUSH
68049: LD_INT 3
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 5
68058: PUSH
68059: LD_INT 4
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 5
68068: PUSH
68069: LD_INT 5
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 4
68078: PUSH
68079: LD_INT 5
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 3
68088: PUSH
68089: LD_INT 4
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 3
68098: PUSH
68099: LD_INT 3
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 5
68108: PUSH
68109: LD_INT 3
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 3
68118: PUSH
68119: LD_INT 5
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 0
68128: PUSH
68129: LD_INT 3
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 0
68138: PUSH
68139: LD_INT 2
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 1
68148: PUSH
68149: LD_INT 3
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 1
68158: PUSH
68159: LD_INT 4
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 0
68168: PUSH
68169: LD_INT 4
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 1
68178: NEG
68179: PUSH
68180: LD_INT 3
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 1
68189: NEG
68190: PUSH
68191: LD_INT 2
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 2
68200: PUSH
68201: LD_INT 4
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 2
68210: NEG
68211: PUSH
68212: LD_INT 2
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 4
68221: NEG
68222: PUSH
68223: LD_INT 0
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 4
68232: NEG
68233: PUSH
68234: LD_INT 1
68236: NEG
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 3
68244: NEG
68245: PUSH
68246: LD_INT 0
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 3
68255: NEG
68256: PUSH
68257: LD_INT 1
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 4
68266: NEG
68267: PUSH
68268: LD_INT 1
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 5
68277: NEG
68278: PUSH
68279: LD_INT 0
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 5
68288: NEG
68289: PUSH
68290: LD_INT 1
68292: NEG
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: LD_INT 5
68300: NEG
68301: PUSH
68302: LD_INT 2
68304: NEG
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: PUSH
68310: LD_INT 3
68312: NEG
68313: PUSH
68314: LD_INT 2
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: ST_TO_ADDR
// end ; end ;
68368: GO 68371
68370: POP
// case btype of b_depot , b_warehouse :
68371: LD_VAR 0 1
68375: PUSH
68376: LD_INT 0
68378: DOUBLE
68379: EQUAL
68380: IFTRUE 68390
68382: LD_INT 1
68384: DOUBLE
68385: EQUAL
68386: IFTRUE 68390
68388: GO 68591
68390: POP
// case nation of nation_american :
68391: LD_VAR 0 5
68395: PUSH
68396: LD_INT 1
68398: DOUBLE
68399: EQUAL
68400: IFTRUE 68404
68402: GO 68460
68404: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68405: LD_ADDR_VAR 0 9
68409: PUSH
68410: LD_VAR 0 11
68414: PUSH
68415: LD_VAR 0 12
68419: PUSH
68420: LD_VAR 0 13
68424: PUSH
68425: LD_VAR 0 14
68429: PUSH
68430: LD_VAR 0 15
68434: PUSH
68435: LD_VAR 0 16
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: PUSH
68448: LD_VAR 0 4
68452: PUSH
68453: LD_INT 1
68455: PLUS
68456: ARRAY
68457: ST_TO_ADDR
68458: GO 68589
68460: LD_INT 2
68462: DOUBLE
68463: EQUAL
68464: IFTRUE 68468
68466: GO 68524
68468: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68469: LD_ADDR_VAR 0 9
68473: PUSH
68474: LD_VAR 0 17
68478: PUSH
68479: LD_VAR 0 18
68483: PUSH
68484: LD_VAR 0 19
68488: PUSH
68489: LD_VAR 0 20
68493: PUSH
68494: LD_VAR 0 21
68498: PUSH
68499: LD_VAR 0 22
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: PUSH
68512: LD_VAR 0 4
68516: PUSH
68517: LD_INT 1
68519: PLUS
68520: ARRAY
68521: ST_TO_ADDR
68522: GO 68589
68524: LD_INT 3
68526: DOUBLE
68527: EQUAL
68528: IFTRUE 68532
68530: GO 68588
68532: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68533: LD_ADDR_VAR 0 9
68537: PUSH
68538: LD_VAR 0 23
68542: PUSH
68543: LD_VAR 0 24
68547: PUSH
68548: LD_VAR 0 25
68552: PUSH
68553: LD_VAR 0 26
68557: PUSH
68558: LD_VAR 0 27
68562: PUSH
68563: LD_VAR 0 28
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: LIST
68575: PUSH
68576: LD_VAR 0 4
68580: PUSH
68581: LD_INT 1
68583: PLUS
68584: ARRAY
68585: ST_TO_ADDR
68586: GO 68589
68588: POP
68589: GO 69144
68591: LD_INT 2
68593: DOUBLE
68594: EQUAL
68595: IFTRUE 68605
68597: LD_INT 3
68599: DOUBLE
68600: EQUAL
68601: IFTRUE 68605
68603: GO 68661
68605: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68606: LD_ADDR_VAR 0 9
68610: PUSH
68611: LD_VAR 0 29
68615: PUSH
68616: LD_VAR 0 30
68620: PUSH
68621: LD_VAR 0 31
68625: PUSH
68626: LD_VAR 0 32
68630: PUSH
68631: LD_VAR 0 33
68635: PUSH
68636: LD_VAR 0 34
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: PUSH
68649: LD_VAR 0 4
68653: PUSH
68654: LD_INT 1
68656: PLUS
68657: ARRAY
68658: ST_TO_ADDR
68659: GO 69144
68661: LD_INT 16
68663: DOUBLE
68664: EQUAL
68665: IFTRUE 68723
68667: LD_INT 17
68669: DOUBLE
68670: EQUAL
68671: IFTRUE 68723
68673: LD_INT 18
68675: DOUBLE
68676: EQUAL
68677: IFTRUE 68723
68679: LD_INT 19
68681: DOUBLE
68682: EQUAL
68683: IFTRUE 68723
68685: LD_INT 22
68687: DOUBLE
68688: EQUAL
68689: IFTRUE 68723
68691: LD_INT 20
68693: DOUBLE
68694: EQUAL
68695: IFTRUE 68723
68697: LD_INT 21
68699: DOUBLE
68700: EQUAL
68701: IFTRUE 68723
68703: LD_INT 23
68705: DOUBLE
68706: EQUAL
68707: IFTRUE 68723
68709: LD_INT 24
68711: DOUBLE
68712: EQUAL
68713: IFTRUE 68723
68715: LD_INT 25
68717: DOUBLE
68718: EQUAL
68719: IFTRUE 68723
68721: GO 68779
68723: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68724: LD_ADDR_VAR 0 9
68728: PUSH
68729: LD_VAR 0 35
68733: PUSH
68734: LD_VAR 0 36
68738: PUSH
68739: LD_VAR 0 37
68743: PUSH
68744: LD_VAR 0 38
68748: PUSH
68749: LD_VAR 0 39
68753: PUSH
68754: LD_VAR 0 40
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: PUSH
68767: LD_VAR 0 4
68771: PUSH
68772: LD_INT 1
68774: PLUS
68775: ARRAY
68776: ST_TO_ADDR
68777: GO 69144
68779: LD_INT 6
68781: DOUBLE
68782: EQUAL
68783: IFTRUE 68835
68785: LD_INT 7
68787: DOUBLE
68788: EQUAL
68789: IFTRUE 68835
68791: LD_INT 8
68793: DOUBLE
68794: EQUAL
68795: IFTRUE 68835
68797: LD_INT 13
68799: DOUBLE
68800: EQUAL
68801: IFTRUE 68835
68803: LD_INT 12
68805: DOUBLE
68806: EQUAL
68807: IFTRUE 68835
68809: LD_INT 15
68811: DOUBLE
68812: EQUAL
68813: IFTRUE 68835
68815: LD_INT 11
68817: DOUBLE
68818: EQUAL
68819: IFTRUE 68835
68821: LD_INT 14
68823: DOUBLE
68824: EQUAL
68825: IFTRUE 68835
68827: LD_INT 10
68829: DOUBLE
68830: EQUAL
68831: IFTRUE 68835
68833: GO 68891
68835: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68836: LD_ADDR_VAR 0 9
68840: PUSH
68841: LD_VAR 0 41
68845: PUSH
68846: LD_VAR 0 42
68850: PUSH
68851: LD_VAR 0 43
68855: PUSH
68856: LD_VAR 0 44
68860: PUSH
68861: LD_VAR 0 45
68865: PUSH
68866: LD_VAR 0 46
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: PUSH
68879: LD_VAR 0 4
68883: PUSH
68884: LD_INT 1
68886: PLUS
68887: ARRAY
68888: ST_TO_ADDR
68889: GO 69144
68891: LD_INT 36
68893: DOUBLE
68894: EQUAL
68895: IFTRUE 68899
68897: GO 68955
68899: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68900: LD_ADDR_VAR 0 9
68904: PUSH
68905: LD_VAR 0 47
68909: PUSH
68910: LD_VAR 0 48
68914: PUSH
68915: LD_VAR 0 49
68919: PUSH
68920: LD_VAR 0 50
68924: PUSH
68925: LD_VAR 0 51
68929: PUSH
68930: LD_VAR 0 52
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: PUSH
68943: LD_VAR 0 4
68947: PUSH
68948: LD_INT 1
68950: PLUS
68951: ARRAY
68952: ST_TO_ADDR
68953: GO 69144
68955: LD_INT 4
68957: DOUBLE
68958: EQUAL
68959: IFTRUE 68981
68961: LD_INT 5
68963: DOUBLE
68964: EQUAL
68965: IFTRUE 68981
68967: LD_INT 34
68969: DOUBLE
68970: EQUAL
68971: IFTRUE 68981
68973: LD_INT 37
68975: DOUBLE
68976: EQUAL
68977: IFTRUE 68981
68979: GO 69037
68981: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68982: LD_ADDR_VAR 0 9
68986: PUSH
68987: LD_VAR 0 53
68991: PUSH
68992: LD_VAR 0 54
68996: PUSH
68997: LD_VAR 0 55
69001: PUSH
69002: LD_VAR 0 56
69006: PUSH
69007: LD_VAR 0 57
69011: PUSH
69012: LD_VAR 0 58
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: PUSH
69025: LD_VAR 0 4
69029: PUSH
69030: LD_INT 1
69032: PLUS
69033: ARRAY
69034: ST_TO_ADDR
69035: GO 69144
69037: LD_INT 31
69039: DOUBLE
69040: EQUAL
69041: IFTRUE 69087
69043: LD_INT 32
69045: DOUBLE
69046: EQUAL
69047: IFTRUE 69087
69049: LD_INT 33
69051: DOUBLE
69052: EQUAL
69053: IFTRUE 69087
69055: LD_INT 27
69057: DOUBLE
69058: EQUAL
69059: IFTRUE 69087
69061: LD_INT 26
69063: DOUBLE
69064: EQUAL
69065: IFTRUE 69087
69067: LD_INT 28
69069: DOUBLE
69070: EQUAL
69071: IFTRUE 69087
69073: LD_INT 29
69075: DOUBLE
69076: EQUAL
69077: IFTRUE 69087
69079: LD_INT 30
69081: DOUBLE
69082: EQUAL
69083: IFTRUE 69087
69085: GO 69143
69087: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69088: LD_ADDR_VAR 0 9
69092: PUSH
69093: LD_VAR 0 59
69097: PUSH
69098: LD_VAR 0 60
69102: PUSH
69103: LD_VAR 0 61
69107: PUSH
69108: LD_VAR 0 62
69112: PUSH
69113: LD_VAR 0 63
69117: PUSH
69118: LD_VAR 0 64
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: PUSH
69131: LD_VAR 0 4
69135: PUSH
69136: LD_INT 1
69138: PLUS
69139: ARRAY
69140: ST_TO_ADDR
69141: GO 69144
69143: POP
// temp_list2 = [ ] ;
69144: LD_ADDR_VAR 0 10
69148: PUSH
69149: EMPTY
69150: ST_TO_ADDR
// for i in temp_list do
69151: LD_ADDR_VAR 0 8
69155: PUSH
69156: LD_VAR 0 9
69160: PUSH
69161: FOR_IN
69162: IFFALSE 69214
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69164: LD_ADDR_VAR 0 10
69168: PUSH
69169: LD_VAR 0 10
69173: PUSH
69174: LD_VAR 0 8
69178: PUSH
69179: LD_INT 1
69181: ARRAY
69182: PUSH
69183: LD_VAR 0 2
69187: PLUS
69188: PUSH
69189: LD_VAR 0 8
69193: PUSH
69194: LD_INT 2
69196: ARRAY
69197: PUSH
69198: LD_VAR 0 3
69202: PLUS
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: EMPTY
69209: LIST
69210: ADD
69211: ST_TO_ADDR
69212: GO 69161
69214: POP
69215: POP
// result = temp_list2 ;
69216: LD_ADDR_VAR 0 7
69220: PUSH
69221: LD_VAR 0 10
69225: ST_TO_ADDR
// end ;
69226: LD_VAR 0 7
69230: RET
// export function EnemyInRange ( unit , dist ) ; begin
69231: LD_INT 0
69233: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69234: LD_ADDR_VAR 0 3
69238: PUSH
69239: LD_VAR 0 1
69243: PPUSH
69244: CALL_OW 255
69248: PPUSH
69249: LD_VAR 0 1
69253: PPUSH
69254: CALL_OW 250
69258: PPUSH
69259: LD_VAR 0 1
69263: PPUSH
69264: CALL_OW 251
69268: PPUSH
69269: LD_VAR 0 2
69273: PPUSH
69274: CALL 42633 0 4
69278: PUSH
69279: LD_INT 4
69281: ARRAY
69282: ST_TO_ADDR
// end ;
69283: LD_VAR 0 3
69287: RET
// export function PlayerSeeMe ( unit ) ; begin
69288: LD_INT 0
69290: PPUSH
// result := See ( your_side , unit ) ;
69291: LD_ADDR_VAR 0 2
69295: PUSH
69296: LD_OWVAR 2
69300: PPUSH
69301: LD_VAR 0 1
69305: PPUSH
69306: CALL_OW 292
69310: ST_TO_ADDR
// end ;
69311: LD_VAR 0 2
69315: RET
// export function ReverseDir ( unit ) ; begin
69316: LD_INT 0
69318: PPUSH
// if not unit then
69319: LD_VAR 0 1
69323: NOT
69324: IFFALSE 69328
// exit ;
69326: GO 69351
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69328: LD_ADDR_VAR 0 2
69332: PUSH
69333: LD_VAR 0 1
69337: PPUSH
69338: CALL_OW 254
69342: PUSH
69343: LD_INT 3
69345: PLUS
69346: PUSH
69347: LD_INT 6
69349: MOD
69350: ST_TO_ADDR
// end ;
69351: LD_VAR 0 2
69355: RET
// export function ReverseArray ( array ) ; var i ; begin
69356: LD_INT 0
69358: PPUSH
69359: PPUSH
// if not array then
69360: LD_VAR 0 1
69364: NOT
69365: IFFALSE 69369
// exit ;
69367: GO 69424
// result := [ ] ;
69369: LD_ADDR_VAR 0 2
69373: PUSH
69374: EMPTY
69375: ST_TO_ADDR
// for i := array downto 1 do
69376: LD_ADDR_VAR 0 3
69380: PUSH
69381: DOUBLE
69382: LD_VAR 0 1
69386: INC
69387: ST_TO_ADDR
69388: LD_INT 1
69390: PUSH
69391: FOR_DOWNTO
69392: IFFALSE 69422
// result := Join ( result , array [ i ] ) ;
69394: LD_ADDR_VAR 0 2
69398: PUSH
69399: LD_VAR 0 2
69403: PPUSH
69404: LD_VAR 0 1
69408: PUSH
69409: LD_VAR 0 3
69413: ARRAY
69414: PPUSH
69415: CALL 74067 0 2
69419: ST_TO_ADDR
69420: GO 69391
69422: POP
69423: POP
// end ;
69424: LD_VAR 0 2
69428: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
69429: LD_INT 0
69431: PPUSH
69432: PPUSH
69433: PPUSH
69434: PPUSH
69435: PPUSH
69436: PPUSH
// if not unit or not hexes then
69437: LD_VAR 0 1
69441: NOT
69442: PUSH
69443: LD_VAR 0 2
69447: NOT
69448: OR
69449: IFFALSE 69453
// exit ;
69451: GO 69576
// dist := 9999 ;
69453: LD_ADDR_VAR 0 5
69457: PUSH
69458: LD_INT 9999
69460: ST_TO_ADDR
// for i = 1 to hexes do
69461: LD_ADDR_VAR 0 4
69465: PUSH
69466: DOUBLE
69467: LD_INT 1
69469: DEC
69470: ST_TO_ADDR
69471: LD_VAR 0 2
69475: PUSH
69476: FOR_TO
69477: IFFALSE 69564
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69479: LD_ADDR_VAR 0 6
69483: PUSH
69484: LD_VAR 0 1
69488: PPUSH
69489: LD_VAR 0 2
69493: PUSH
69494: LD_VAR 0 4
69498: ARRAY
69499: PUSH
69500: LD_INT 1
69502: ARRAY
69503: PPUSH
69504: LD_VAR 0 2
69508: PUSH
69509: LD_VAR 0 4
69513: ARRAY
69514: PUSH
69515: LD_INT 2
69517: ARRAY
69518: PPUSH
69519: CALL_OW 297
69523: ST_TO_ADDR
// if tdist < dist then
69524: LD_VAR 0 6
69528: PUSH
69529: LD_VAR 0 5
69533: LESS
69534: IFFALSE 69562
// begin hex := hexes [ i ] ;
69536: LD_ADDR_VAR 0 8
69540: PUSH
69541: LD_VAR 0 2
69545: PUSH
69546: LD_VAR 0 4
69550: ARRAY
69551: ST_TO_ADDR
// dist := tdist ;
69552: LD_ADDR_VAR 0 5
69556: PUSH
69557: LD_VAR 0 6
69561: ST_TO_ADDR
// end ; end ;
69562: GO 69476
69564: POP
69565: POP
// result := hex ;
69566: LD_ADDR_VAR 0 3
69570: PUSH
69571: LD_VAR 0 8
69575: ST_TO_ADDR
// end ;
69576: LD_VAR 0 3
69580: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69581: LD_INT 0
69583: PPUSH
69584: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69585: LD_VAR 0 1
69589: NOT
69590: PUSH
69591: LD_VAR 0 1
69595: PUSH
69596: LD_INT 21
69598: PUSH
69599: LD_INT 2
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 23
69608: PUSH
69609: LD_INT 2
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PPUSH
69620: CALL_OW 69
69624: IN
69625: NOT
69626: OR
69627: IFFALSE 69631
// exit ;
69629: GO 69678
// for i = 1 to 3 do
69631: LD_ADDR_VAR 0 3
69635: PUSH
69636: DOUBLE
69637: LD_INT 1
69639: DEC
69640: ST_TO_ADDR
69641: LD_INT 3
69643: PUSH
69644: FOR_TO
69645: IFFALSE 69676
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69647: LD_VAR 0 1
69651: PPUSH
69652: CALL_OW 250
69656: PPUSH
69657: LD_VAR 0 1
69661: PPUSH
69662: CALL_OW 251
69666: PPUSH
69667: LD_INT 1
69669: PPUSH
69670: CALL_OW 453
69674: GO 69644
69676: POP
69677: POP
// end ;
69678: LD_VAR 0 2
69682: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69683: LD_INT 0
69685: PPUSH
69686: PPUSH
69687: PPUSH
69688: PPUSH
69689: PPUSH
69690: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69691: LD_VAR 0 1
69695: NOT
69696: PUSH
69697: LD_VAR 0 2
69701: NOT
69702: OR
69703: PUSH
69704: LD_VAR 0 1
69708: PPUSH
69709: CALL_OW 314
69713: OR
69714: IFFALSE 69718
// exit ;
69716: GO 70185
// if GetLives ( i ) < 250 then
69718: LD_VAR 0 4
69722: PPUSH
69723: CALL_OW 256
69727: PUSH
69728: LD_INT 250
69730: LESS
69731: IFFALSE 69744
// begin ComAutodestruct ( i ) ;
69733: LD_VAR 0 4
69737: PPUSH
69738: CALL 69581 0 1
// exit ;
69742: GO 70185
// end ; x := GetX ( enemy_unit ) ;
69744: LD_ADDR_VAR 0 7
69748: PUSH
69749: LD_VAR 0 2
69753: PPUSH
69754: CALL_OW 250
69758: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69759: LD_ADDR_VAR 0 8
69763: PUSH
69764: LD_VAR 0 2
69768: PPUSH
69769: CALL_OW 251
69773: ST_TO_ADDR
// if not x or not y then
69774: LD_VAR 0 7
69778: NOT
69779: PUSH
69780: LD_VAR 0 8
69784: NOT
69785: OR
69786: IFFALSE 69790
// exit ;
69788: GO 70185
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69790: LD_ADDR_VAR 0 6
69794: PUSH
69795: LD_VAR 0 7
69799: PPUSH
69800: LD_INT 0
69802: PPUSH
69803: LD_INT 4
69805: PPUSH
69806: CALL_OW 272
69810: PUSH
69811: LD_VAR 0 8
69815: PPUSH
69816: LD_INT 0
69818: PPUSH
69819: LD_INT 4
69821: PPUSH
69822: CALL_OW 273
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_VAR 0 7
69835: PPUSH
69836: LD_INT 1
69838: PPUSH
69839: LD_INT 4
69841: PPUSH
69842: CALL_OW 272
69846: PUSH
69847: LD_VAR 0 8
69851: PPUSH
69852: LD_INT 1
69854: PPUSH
69855: LD_INT 4
69857: PPUSH
69858: CALL_OW 273
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: PUSH
69867: LD_VAR 0 7
69871: PPUSH
69872: LD_INT 2
69874: PPUSH
69875: LD_INT 4
69877: PPUSH
69878: CALL_OW 272
69882: PUSH
69883: LD_VAR 0 8
69887: PPUSH
69888: LD_INT 2
69890: PPUSH
69891: LD_INT 4
69893: PPUSH
69894: CALL_OW 273
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_VAR 0 7
69907: PPUSH
69908: LD_INT 3
69910: PPUSH
69911: LD_INT 4
69913: PPUSH
69914: CALL_OW 272
69918: PUSH
69919: LD_VAR 0 8
69923: PPUSH
69924: LD_INT 3
69926: PPUSH
69927: LD_INT 4
69929: PPUSH
69930: CALL_OW 273
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_VAR 0 7
69943: PPUSH
69944: LD_INT 4
69946: PPUSH
69947: LD_INT 4
69949: PPUSH
69950: CALL_OW 272
69954: PUSH
69955: LD_VAR 0 8
69959: PPUSH
69960: LD_INT 4
69962: PPUSH
69963: LD_INT 4
69965: PPUSH
69966: CALL_OW 273
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_VAR 0 7
69979: PPUSH
69980: LD_INT 5
69982: PPUSH
69983: LD_INT 4
69985: PPUSH
69986: CALL_OW 272
69990: PUSH
69991: LD_VAR 0 8
69995: PPUSH
69996: LD_INT 5
69998: PPUSH
69999: LD_INT 4
70001: PPUSH
70002: CALL_OW 273
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: LIST
70015: LIST
70016: LIST
70017: LIST
70018: ST_TO_ADDR
// for i = tmp downto 1 do
70019: LD_ADDR_VAR 0 4
70023: PUSH
70024: DOUBLE
70025: LD_VAR 0 6
70029: INC
70030: ST_TO_ADDR
70031: LD_INT 1
70033: PUSH
70034: FOR_DOWNTO
70035: IFFALSE 70136
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70037: LD_VAR 0 6
70041: PUSH
70042: LD_VAR 0 4
70046: ARRAY
70047: PUSH
70048: LD_INT 1
70050: ARRAY
70051: PPUSH
70052: LD_VAR 0 6
70056: PUSH
70057: LD_VAR 0 4
70061: ARRAY
70062: PUSH
70063: LD_INT 2
70065: ARRAY
70066: PPUSH
70067: CALL_OW 488
70071: NOT
70072: PUSH
70073: LD_VAR 0 6
70077: PUSH
70078: LD_VAR 0 4
70082: ARRAY
70083: PUSH
70084: LD_INT 1
70086: ARRAY
70087: PPUSH
70088: LD_VAR 0 6
70092: PUSH
70093: LD_VAR 0 4
70097: ARRAY
70098: PUSH
70099: LD_INT 2
70101: ARRAY
70102: PPUSH
70103: CALL_OW 428
70107: PUSH
70108: LD_INT 0
70110: NONEQUAL
70111: OR
70112: IFFALSE 70134
// tmp := Delete ( tmp , i ) ;
70114: LD_ADDR_VAR 0 6
70118: PUSH
70119: LD_VAR 0 6
70123: PPUSH
70124: LD_VAR 0 4
70128: PPUSH
70129: CALL_OW 3
70133: ST_TO_ADDR
70134: GO 70034
70136: POP
70137: POP
// j := GetClosestHex ( unit , tmp ) ;
70138: LD_ADDR_VAR 0 5
70142: PUSH
70143: LD_VAR 0 1
70147: PPUSH
70148: LD_VAR 0 6
70152: PPUSH
70153: CALL 69429 0 2
70157: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70158: LD_VAR 0 1
70162: PPUSH
70163: LD_VAR 0 5
70167: PUSH
70168: LD_INT 1
70170: ARRAY
70171: PPUSH
70172: LD_VAR 0 5
70176: PUSH
70177: LD_INT 2
70179: ARRAY
70180: PPUSH
70181: CALL_OW 111
// end ;
70185: LD_VAR 0 3
70189: RET
// export function PrepareApemanSoldier ( ) ; begin
70190: LD_INT 0
70192: PPUSH
// uc_nation := 0 ;
70193: LD_ADDR_OWVAR 21
70197: PUSH
70198: LD_INT 0
70200: ST_TO_ADDR
// hc_sex := sex_male ;
70201: LD_ADDR_OWVAR 27
70205: PUSH
70206: LD_INT 1
70208: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
70209: LD_ADDR_OWVAR 28
70213: PUSH
70214: LD_INT 15
70216: ST_TO_ADDR
// hc_gallery :=  ;
70217: LD_ADDR_OWVAR 33
70221: PUSH
70222: LD_STRING 
70224: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70225: LD_ADDR_OWVAR 31
70229: PUSH
70230: LD_INT 0
70232: PPUSH
70233: LD_INT 3
70235: PPUSH
70236: CALL_OW 12
70240: PUSH
70241: LD_INT 0
70243: PPUSH
70244: LD_INT 3
70246: PPUSH
70247: CALL_OW 12
70251: PUSH
70252: LD_INT 0
70254: PUSH
70255: LD_INT 0
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: ST_TO_ADDR
// end ;
70264: LD_VAR 0 1
70268: RET
// export function PrepareApemanEngineer ( ) ; begin
70269: LD_INT 0
70271: PPUSH
// uc_nation := 0 ;
70272: LD_ADDR_OWVAR 21
70276: PUSH
70277: LD_INT 0
70279: ST_TO_ADDR
// hc_sex := sex_male ;
70280: LD_ADDR_OWVAR 27
70284: PUSH
70285: LD_INT 1
70287: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
70288: LD_ADDR_OWVAR 28
70292: PUSH
70293: LD_INT 16
70295: ST_TO_ADDR
// hc_gallery :=  ;
70296: LD_ADDR_OWVAR 33
70300: PUSH
70301: LD_STRING 
70303: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70304: LD_ADDR_OWVAR 31
70308: PUSH
70309: LD_INT 0
70311: PPUSH
70312: LD_INT 3
70314: PPUSH
70315: CALL_OW 12
70319: PUSH
70320: LD_INT 0
70322: PPUSH
70323: LD_INT 3
70325: PPUSH
70326: CALL_OW 12
70330: PUSH
70331: LD_INT 0
70333: PUSH
70334: LD_INT 0
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: ST_TO_ADDR
// end ;
70343: LD_VAR 0 1
70347: RET
// export function PrepareApeman ( agressivity ) ; begin
70348: LD_INT 0
70350: PPUSH
// uc_side := 0 ;
70351: LD_ADDR_OWVAR 20
70355: PUSH
70356: LD_INT 0
70358: ST_TO_ADDR
// uc_nation := 0 ;
70359: LD_ADDR_OWVAR 21
70363: PUSH
70364: LD_INT 0
70366: ST_TO_ADDR
// hc_sex := sex_male ;
70367: LD_ADDR_OWVAR 27
70371: PUSH
70372: LD_INT 1
70374: ST_TO_ADDR
// hc_class := class_apeman ;
70375: LD_ADDR_OWVAR 28
70379: PUSH
70380: LD_INT 12
70382: ST_TO_ADDR
// hc_gallery :=  ;
70383: LD_ADDR_OWVAR 33
70387: PUSH
70388: LD_STRING 
70390: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70391: LD_ADDR_OWVAR 35
70395: PUSH
70396: LD_VAR 0 1
70400: NEG
70401: PPUSH
70402: LD_VAR 0 1
70406: PPUSH
70407: CALL_OW 12
70411: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70412: LD_ADDR_OWVAR 31
70416: PUSH
70417: LD_INT 0
70419: PPUSH
70420: LD_INT 3
70422: PPUSH
70423: CALL_OW 12
70427: PUSH
70428: LD_INT 0
70430: PPUSH
70431: LD_INT 3
70433: PPUSH
70434: CALL_OW 12
70438: PUSH
70439: LD_INT 0
70441: PUSH
70442: LD_INT 0
70444: PUSH
70445: EMPTY
70446: LIST
70447: LIST
70448: LIST
70449: LIST
70450: ST_TO_ADDR
// end ;
70451: LD_VAR 0 2
70455: RET
// export function PrepareTiger ( agressivity ) ; begin
70456: LD_INT 0
70458: PPUSH
// uc_side := 0 ;
70459: LD_ADDR_OWVAR 20
70463: PUSH
70464: LD_INT 0
70466: ST_TO_ADDR
// uc_nation := 0 ;
70467: LD_ADDR_OWVAR 21
70471: PUSH
70472: LD_INT 0
70474: ST_TO_ADDR
// hc_class := class_tiger ;
70475: LD_ADDR_OWVAR 28
70479: PUSH
70480: LD_INT 14
70482: ST_TO_ADDR
// hc_gallery :=  ;
70483: LD_ADDR_OWVAR 33
70487: PUSH
70488: LD_STRING 
70490: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70491: LD_ADDR_OWVAR 35
70495: PUSH
70496: LD_VAR 0 1
70500: NEG
70501: PPUSH
70502: LD_VAR 0 1
70506: PPUSH
70507: CALL_OW 12
70511: ST_TO_ADDR
// end ;
70512: LD_VAR 0 2
70516: RET
// export function PrepareEnchidna ( ) ; begin
70517: LD_INT 0
70519: PPUSH
// uc_side := 0 ;
70520: LD_ADDR_OWVAR 20
70524: PUSH
70525: LD_INT 0
70527: ST_TO_ADDR
// uc_nation := 0 ;
70528: LD_ADDR_OWVAR 21
70532: PUSH
70533: LD_INT 0
70535: ST_TO_ADDR
// hc_class := class_baggie ;
70536: LD_ADDR_OWVAR 28
70540: PUSH
70541: LD_INT 13
70543: ST_TO_ADDR
// hc_gallery :=  ;
70544: LD_ADDR_OWVAR 33
70548: PUSH
70549: LD_STRING 
70551: ST_TO_ADDR
// end ;
70552: LD_VAR 0 1
70556: RET
// export function PrepareFrog ( ) ; begin
70557: LD_INT 0
70559: PPUSH
// uc_side := 0 ;
70560: LD_ADDR_OWVAR 20
70564: PUSH
70565: LD_INT 0
70567: ST_TO_ADDR
// uc_nation := 0 ;
70568: LD_ADDR_OWVAR 21
70572: PUSH
70573: LD_INT 0
70575: ST_TO_ADDR
// hc_class := class_frog ;
70576: LD_ADDR_OWVAR 28
70580: PUSH
70581: LD_INT 19
70583: ST_TO_ADDR
// hc_gallery :=  ;
70584: LD_ADDR_OWVAR 33
70588: PUSH
70589: LD_STRING 
70591: ST_TO_ADDR
// end ;
70592: LD_VAR 0 1
70596: RET
// export function PrepareFish ( ) ; begin
70597: LD_INT 0
70599: PPUSH
// uc_side := 0 ;
70600: LD_ADDR_OWVAR 20
70604: PUSH
70605: LD_INT 0
70607: ST_TO_ADDR
// uc_nation := 0 ;
70608: LD_ADDR_OWVAR 21
70612: PUSH
70613: LD_INT 0
70615: ST_TO_ADDR
// hc_class := class_fish ;
70616: LD_ADDR_OWVAR 28
70620: PUSH
70621: LD_INT 20
70623: ST_TO_ADDR
// hc_gallery :=  ;
70624: LD_ADDR_OWVAR 33
70628: PUSH
70629: LD_STRING 
70631: ST_TO_ADDR
// end ;
70632: LD_VAR 0 1
70636: RET
// export function PrepareBird ( ) ; begin
70637: LD_INT 0
70639: PPUSH
// uc_side := 0 ;
70640: LD_ADDR_OWVAR 20
70644: PUSH
70645: LD_INT 0
70647: ST_TO_ADDR
// uc_nation := 0 ;
70648: LD_ADDR_OWVAR 21
70652: PUSH
70653: LD_INT 0
70655: ST_TO_ADDR
// hc_class := class_phororhacos ;
70656: LD_ADDR_OWVAR 28
70660: PUSH
70661: LD_INT 18
70663: ST_TO_ADDR
// hc_gallery :=  ;
70664: LD_ADDR_OWVAR 33
70668: PUSH
70669: LD_STRING 
70671: ST_TO_ADDR
// end ;
70672: LD_VAR 0 1
70676: RET
// export function PrepareHorse ( ) ; begin
70677: LD_INT 0
70679: PPUSH
// uc_side := 0 ;
70680: LD_ADDR_OWVAR 20
70684: PUSH
70685: LD_INT 0
70687: ST_TO_ADDR
// uc_nation := 0 ;
70688: LD_ADDR_OWVAR 21
70692: PUSH
70693: LD_INT 0
70695: ST_TO_ADDR
// hc_class := class_horse ;
70696: LD_ADDR_OWVAR 28
70700: PUSH
70701: LD_INT 21
70703: ST_TO_ADDR
// hc_gallery :=  ;
70704: LD_ADDR_OWVAR 33
70708: PUSH
70709: LD_STRING 
70711: ST_TO_ADDR
// end ;
70712: LD_VAR 0 1
70716: RET
// export function PrepareMastodont ( ) ; begin
70717: LD_INT 0
70719: PPUSH
// uc_side := 0 ;
70720: LD_ADDR_OWVAR 20
70724: PUSH
70725: LD_INT 0
70727: ST_TO_ADDR
// uc_nation := 0 ;
70728: LD_ADDR_OWVAR 21
70732: PUSH
70733: LD_INT 0
70735: ST_TO_ADDR
// vc_chassis := class_mastodont ;
70736: LD_ADDR_OWVAR 37
70740: PUSH
70741: LD_INT 31
70743: ST_TO_ADDR
// vc_control := control_rider ;
70744: LD_ADDR_OWVAR 38
70748: PUSH
70749: LD_INT 4
70751: ST_TO_ADDR
// end ;
70752: LD_VAR 0 1
70756: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70757: LD_INT 0
70759: PPUSH
70760: PPUSH
70761: PPUSH
// uc_side = 0 ;
70762: LD_ADDR_OWVAR 20
70766: PUSH
70767: LD_INT 0
70769: ST_TO_ADDR
// uc_nation = 0 ;
70770: LD_ADDR_OWVAR 21
70774: PUSH
70775: LD_INT 0
70777: ST_TO_ADDR
// InitHc_All ( ) ;
70778: CALL_OW 584
// InitVc ;
70782: CALL_OW 20
// if mastodonts then
70786: LD_VAR 0 6
70790: IFFALSE 70857
// for i = 1 to mastodonts do
70792: LD_ADDR_VAR 0 11
70796: PUSH
70797: DOUBLE
70798: LD_INT 1
70800: DEC
70801: ST_TO_ADDR
70802: LD_VAR 0 6
70806: PUSH
70807: FOR_TO
70808: IFFALSE 70855
// begin vc_chassis := 31 ;
70810: LD_ADDR_OWVAR 37
70814: PUSH
70815: LD_INT 31
70817: ST_TO_ADDR
// vc_control := control_rider ;
70818: LD_ADDR_OWVAR 38
70822: PUSH
70823: LD_INT 4
70825: ST_TO_ADDR
// animal := CreateVehicle ;
70826: LD_ADDR_VAR 0 12
70830: PUSH
70831: CALL_OW 45
70835: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70836: LD_VAR 0 12
70840: PPUSH
70841: LD_VAR 0 8
70845: PPUSH
70846: LD_INT 0
70848: PPUSH
70849: CALL 72985 0 3
// end ;
70853: GO 70807
70855: POP
70856: POP
// if horses then
70857: LD_VAR 0 5
70861: IFFALSE 70928
// for i = 1 to horses do
70863: LD_ADDR_VAR 0 11
70867: PUSH
70868: DOUBLE
70869: LD_INT 1
70871: DEC
70872: ST_TO_ADDR
70873: LD_VAR 0 5
70877: PUSH
70878: FOR_TO
70879: IFFALSE 70926
// begin hc_class := 21 ;
70881: LD_ADDR_OWVAR 28
70885: PUSH
70886: LD_INT 21
70888: ST_TO_ADDR
// hc_gallery :=  ;
70889: LD_ADDR_OWVAR 33
70893: PUSH
70894: LD_STRING 
70896: ST_TO_ADDR
// animal := CreateHuman ;
70897: LD_ADDR_VAR 0 12
70901: PUSH
70902: CALL_OW 44
70906: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70907: LD_VAR 0 12
70911: PPUSH
70912: LD_VAR 0 8
70916: PPUSH
70917: LD_INT 0
70919: PPUSH
70920: CALL 72985 0 3
// end ;
70924: GO 70878
70926: POP
70927: POP
// if birds then
70928: LD_VAR 0 1
70932: IFFALSE 70999
// for i = 1 to birds do
70934: LD_ADDR_VAR 0 11
70938: PUSH
70939: DOUBLE
70940: LD_INT 1
70942: DEC
70943: ST_TO_ADDR
70944: LD_VAR 0 1
70948: PUSH
70949: FOR_TO
70950: IFFALSE 70997
// begin hc_class = 18 ;
70952: LD_ADDR_OWVAR 28
70956: PUSH
70957: LD_INT 18
70959: ST_TO_ADDR
// hc_gallery =  ;
70960: LD_ADDR_OWVAR 33
70964: PUSH
70965: LD_STRING 
70967: ST_TO_ADDR
// animal := CreateHuman ;
70968: LD_ADDR_VAR 0 12
70972: PUSH
70973: CALL_OW 44
70977: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70978: LD_VAR 0 12
70982: PPUSH
70983: LD_VAR 0 8
70987: PPUSH
70988: LD_INT 0
70990: PPUSH
70991: CALL 72985 0 3
// end ;
70995: GO 70949
70997: POP
70998: POP
// if tigers then
70999: LD_VAR 0 2
71003: IFFALSE 71087
// for i = 1 to tigers do
71005: LD_ADDR_VAR 0 11
71009: PUSH
71010: DOUBLE
71011: LD_INT 1
71013: DEC
71014: ST_TO_ADDR
71015: LD_VAR 0 2
71019: PUSH
71020: FOR_TO
71021: IFFALSE 71085
// begin hc_class = class_tiger ;
71023: LD_ADDR_OWVAR 28
71027: PUSH
71028: LD_INT 14
71030: ST_TO_ADDR
// hc_gallery =  ;
71031: LD_ADDR_OWVAR 33
71035: PUSH
71036: LD_STRING 
71038: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71039: LD_ADDR_OWVAR 35
71043: PUSH
71044: LD_INT 7
71046: NEG
71047: PPUSH
71048: LD_INT 7
71050: PPUSH
71051: CALL_OW 12
71055: ST_TO_ADDR
// animal := CreateHuman ;
71056: LD_ADDR_VAR 0 12
71060: PUSH
71061: CALL_OW 44
71065: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71066: LD_VAR 0 12
71070: PPUSH
71071: LD_VAR 0 8
71075: PPUSH
71076: LD_INT 0
71078: PPUSH
71079: CALL 72985 0 3
// end ;
71083: GO 71020
71085: POP
71086: POP
// if apemans then
71087: LD_VAR 0 3
71091: IFFALSE 71214
// for i = 1 to apemans do
71093: LD_ADDR_VAR 0 11
71097: PUSH
71098: DOUBLE
71099: LD_INT 1
71101: DEC
71102: ST_TO_ADDR
71103: LD_VAR 0 3
71107: PUSH
71108: FOR_TO
71109: IFFALSE 71212
// begin hc_class = class_apeman ;
71111: LD_ADDR_OWVAR 28
71115: PUSH
71116: LD_INT 12
71118: ST_TO_ADDR
// hc_gallery =  ;
71119: LD_ADDR_OWVAR 33
71123: PUSH
71124: LD_STRING 
71126: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71127: LD_ADDR_OWVAR 35
71131: PUSH
71132: LD_INT 2
71134: NEG
71135: PPUSH
71136: LD_INT 2
71138: PPUSH
71139: CALL_OW 12
71143: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71144: LD_ADDR_OWVAR 31
71148: PUSH
71149: LD_INT 1
71151: PPUSH
71152: LD_INT 3
71154: PPUSH
71155: CALL_OW 12
71159: PUSH
71160: LD_INT 1
71162: PPUSH
71163: LD_INT 3
71165: PPUSH
71166: CALL_OW 12
71170: PUSH
71171: LD_INT 0
71173: PUSH
71174: LD_INT 0
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: ST_TO_ADDR
// animal := CreateHuman ;
71183: LD_ADDR_VAR 0 12
71187: PUSH
71188: CALL_OW 44
71192: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71193: LD_VAR 0 12
71197: PPUSH
71198: LD_VAR 0 8
71202: PPUSH
71203: LD_INT 0
71205: PPUSH
71206: CALL 72985 0 3
// end ;
71210: GO 71108
71212: POP
71213: POP
// if enchidnas then
71214: LD_VAR 0 4
71218: IFFALSE 71285
// for i = 1 to enchidnas do
71220: LD_ADDR_VAR 0 11
71224: PUSH
71225: DOUBLE
71226: LD_INT 1
71228: DEC
71229: ST_TO_ADDR
71230: LD_VAR 0 4
71234: PUSH
71235: FOR_TO
71236: IFFALSE 71283
// begin hc_class = 13 ;
71238: LD_ADDR_OWVAR 28
71242: PUSH
71243: LD_INT 13
71245: ST_TO_ADDR
// hc_gallery =  ;
71246: LD_ADDR_OWVAR 33
71250: PUSH
71251: LD_STRING 
71253: ST_TO_ADDR
// animal := CreateHuman ;
71254: LD_ADDR_VAR 0 12
71258: PUSH
71259: CALL_OW 44
71263: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71264: LD_VAR 0 12
71268: PPUSH
71269: LD_VAR 0 8
71273: PPUSH
71274: LD_INT 0
71276: PPUSH
71277: CALL 72985 0 3
// end ;
71281: GO 71235
71283: POP
71284: POP
// if fishes then
71285: LD_VAR 0 7
71289: IFFALSE 71356
// for i = 1 to fishes do
71291: LD_ADDR_VAR 0 11
71295: PUSH
71296: DOUBLE
71297: LD_INT 1
71299: DEC
71300: ST_TO_ADDR
71301: LD_VAR 0 7
71305: PUSH
71306: FOR_TO
71307: IFFALSE 71354
// begin hc_class = 20 ;
71309: LD_ADDR_OWVAR 28
71313: PUSH
71314: LD_INT 20
71316: ST_TO_ADDR
// hc_gallery =  ;
71317: LD_ADDR_OWVAR 33
71321: PUSH
71322: LD_STRING 
71324: ST_TO_ADDR
// animal := CreateHuman ;
71325: LD_ADDR_VAR 0 12
71329: PUSH
71330: CALL_OW 44
71334: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71335: LD_VAR 0 12
71339: PPUSH
71340: LD_VAR 0 9
71344: PPUSH
71345: LD_INT 0
71347: PPUSH
71348: CALL 72985 0 3
// end ;
71352: GO 71306
71354: POP
71355: POP
// end ;
71356: LD_VAR 0 10
71360: RET
// export function WantHeal ( sci , unit ) ; begin
71361: LD_INT 0
71363: PPUSH
// if GetTaskList ( sci ) > 0 then
71364: LD_VAR 0 1
71368: PPUSH
71369: CALL_OW 437
71373: PUSH
71374: LD_INT 0
71376: GREATER
71377: IFFALSE 71447
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71379: LD_VAR 0 1
71383: PPUSH
71384: CALL_OW 437
71388: PUSH
71389: LD_INT 1
71391: ARRAY
71392: PUSH
71393: LD_INT 1
71395: ARRAY
71396: PUSH
71397: LD_STRING l
71399: EQUAL
71400: PUSH
71401: LD_VAR 0 1
71405: PPUSH
71406: CALL_OW 437
71410: PUSH
71411: LD_INT 1
71413: ARRAY
71414: PUSH
71415: LD_INT 4
71417: ARRAY
71418: PUSH
71419: LD_VAR 0 2
71423: EQUAL
71424: AND
71425: IFFALSE 71437
// result := true else
71427: LD_ADDR_VAR 0 3
71431: PUSH
71432: LD_INT 1
71434: ST_TO_ADDR
71435: GO 71445
// result := false ;
71437: LD_ADDR_VAR 0 3
71441: PUSH
71442: LD_INT 0
71444: ST_TO_ADDR
// end else
71445: GO 71455
// result := false ;
71447: LD_ADDR_VAR 0 3
71451: PUSH
71452: LD_INT 0
71454: ST_TO_ADDR
// end ;
71455: LD_VAR 0 3
71459: RET
// export function HealTarget ( sci ) ; begin
71460: LD_INT 0
71462: PPUSH
// if not sci then
71463: LD_VAR 0 1
71467: NOT
71468: IFFALSE 71472
// exit ;
71470: GO 71537
// result := 0 ;
71472: LD_ADDR_VAR 0 2
71476: PUSH
71477: LD_INT 0
71479: ST_TO_ADDR
// if GetTaskList ( sci ) then
71480: LD_VAR 0 1
71484: PPUSH
71485: CALL_OW 437
71489: IFFALSE 71537
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71491: LD_VAR 0 1
71495: PPUSH
71496: CALL_OW 437
71500: PUSH
71501: LD_INT 1
71503: ARRAY
71504: PUSH
71505: LD_INT 1
71507: ARRAY
71508: PUSH
71509: LD_STRING l
71511: EQUAL
71512: IFFALSE 71537
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71514: LD_ADDR_VAR 0 2
71518: PUSH
71519: LD_VAR 0 1
71523: PPUSH
71524: CALL_OW 437
71528: PUSH
71529: LD_INT 1
71531: ARRAY
71532: PUSH
71533: LD_INT 4
71535: ARRAY
71536: ST_TO_ADDR
// end ;
71537: LD_VAR 0 2
71541: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71542: LD_INT 0
71544: PPUSH
71545: PPUSH
71546: PPUSH
71547: PPUSH
// if not base_units then
71548: LD_VAR 0 1
71552: NOT
71553: IFFALSE 71557
// exit ;
71555: GO 71644
// result := false ;
71557: LD_ADDR_VAR 0 2
71561: PUSH
71562: LD_INT 0
71564: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71565: LD_ADDR_VAR 0 5
71569: PUSH
71570: LD_VAR 0 1
71574: PPUSH
71575: LD_INT 21
71577: PUSH
71578: LD_INT 3
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: PPUSH
71585: CALL_OW 72
71589: ST_TO_ADDR
// if not tmp then
71590: LD_VAR 0 5
71594: NOT
71595: IFFALSE 71599
// exit ;
71597: GO 71644
// for i in tmp do
71599: LD_ADDR_VAR 0 3
71603: PUSH
71604: LD_VAR 0 5
71608: PUSH
71609: FOR_IN
71610: IFFALSE 71642
// begin result := EnemyInRange ( i , 22 ) ;
71612: LD_ADDR_VAR 0 2
71616: PUSH
71617: LD_VAR 0 3
71621: PPUSH
71622: LD_INT 22
71624: PPUSH
71625: CALL 69231 0 2
71629: ST_TO_ADDR
// if result then
71630: LD_VAR 0 2
71634: IFFALSE 71640
// exit ;
71636: POP
71637: POP
71638: GO 71644
// end ;
71640: GO 71609
71642: POP
71643: POP
// end ;
71644: LD_VAR 0 2
71648: RET
// export function FilterByTag ( units , tag ) ; begin
71649: LD_INT 0
71651: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71652: LD_ADDR_VAR 0 3
71656: PUSH
71657: LD_VAR 0 1
71661: PPUSH
71662: LD_INT 120
71664: PUSH
71665: LD_VAR 0 2
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: PPUSH
71674: CALL_OW 72
71678: ST_TO_ADDR
// end ;
71679: LD_VAR 0 3
71683: RET
// export function IsDriver ( un ) ; begin
71684: LD_INT 0
71686: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71687: LD_ADDR_VAR 0 2
71691: PUSH
71692: LD_VAR 0 1
71696: PUSH
71697: LD_INT 55
71699: PUSH
71700: EMPTY
71701: LIST
71702: PPUSH
71703: CALL_OW 69
71707: IN
71708: ST_TO_ADDR
// end ;
71709: LD_VAR 0 2
71713: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71714: LD_INT 0
71716: PPUSH
71717: PPUSH
// list := [ ] ;
71718: LD_ADDR_VAR 0 5
71722: PUSH
71723: EMPTY
71724: ST_TO_ADDR
// case d of 0 :
71725: LD_VAR 0 3
71729: PUSH
71730: LD_INT 0
71732: DOUBLE
71733: EQUAL
71734: IFTRUE 71738
71736: GO 71871
71738: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71739: LD_ADDR_VAR 0 5
71743: PUSH
71744: LD_VAR 0 1
71748: PUSH
71749: LD_INT 4
71751: MINUS
71752: PUSH
71753: LD_VAR 0 2
71757: PUSH
71758: LD_INT 4
71760: MINUS
71761: PUSH
71762: LD_INT 2
71764: PUSH
71765: EMPTY
71766: LIST
71767: LIST
71768: LIST
71769: PUSH
71770: LD_VAR 0 1
71774: PUSH
71775: LD_INT 3
71777: MINUS
71778: PUSH
71779: LD_VAR 0 2
71783: PUSH
71784: LD_INT 1
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: LIST
71791: PUSH
71792: LD_VAR 0 1
71796: PUSH
71797: LD_INT 4
71799: PLUS
71800: PUSH
71801: LD_VAR 0 2
71805: PUSH
71806: LD_INT 4
71808: PUSH
71809: EMPTY
71810: LIST
71811: LIST
71812: LIST
71813: PUSH
71814: LD_VAR 0 1
71818: PUSH
71819: LD_INT 3
71821: PLUS
71822: PUSH
71823: LD_VAR 0 2
71827: PUSH
71828: LD_INT 3
71830: PLUS
71831: PUSH
71832: LD_INT 5
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: LIST
71839: PUSH
71840: LD_VAR 0 1
71844: PUSH
71845: LD_VAR 0 2
71849: PUSH
71850: LD_INT 4
71852: PLUS
71853: PUSH
71854: LD_INT 0
71856: PUSH
71857: EMPTY
71858: LIST
71859: LIST
71860: LIST
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: ST_TO_ADDR
// end ; 1 :
71869: GO 72569
71871: LD_INT 1
71873: DOUBLE
71874: EQUAL
71875: IFTRUE 71879
71877: GO 72012
71879: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71880: LD_ADDR_VAR 0 5
71884: PUSH
71885: LD_VAR 0 1
71889: PUSH
71890: LD_VAR 0 2
71894: PUSH
71895: LD_INT 4
71897: MINUS
71898: PUSH
71899: LD_INT 3
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: LIST
71906: PUSH
71907: LD_VAR 0 1
71911: PUSH
71912: LD_INT 3
71914: MINUS
71915: PUSH
71916: LD_VAR 0 2
71920: PUSH
71921: LD_INT 3
71923: MINUS
71924: PUSH
71925: LD_INT 2
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: LIST
71932: PUSH
71933: LD_VAR 0 1
71937: PUSH
71938: LD_INT 4
71940: MINUS
71941: PUSH
71942: LD_VAR 0 2
71946: PUSH
71947: LD_INT 1
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: LIST
71954: PUSH
71955: LD_VAR 0 1
71959: PUSH
71960: LD_VAR 0 2
71964: PUSH
71965: LD_INT 3
71967: PLUS
71968: PUSH
71969: LD_INT 0
71971: PUSH
71972: EMPTY
71973: LIST
71974: LIST
71975: LIST
71976: PUSH
71977: LD_VAR 0 1
71981: PUSH
71982: LD_INT 4
71984: PLUS
71985: PUSH
71986: LD_VAR 0 2
71990: PUSH
71991: LD_INT 4
71993: PLUS
71994: PUSH
71995: LD_INT 5
71997: PUSH
71998: EMPTY
71999: LIST
72000: LIST
72001: LIST
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: LIST
72007: LIST
72008: LIST
72009: ST_TO_ADDR
// end ; 2 :
72010: GO 72569
72012: LD_INT 2
72014: DOUBLE
72015: EQUAL
72016: IFTRUE 72020
72018: GO 72149
72020: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72021: LD_ADDR_VAR 0 5
72025: PUSH
72026: LD_VAR 0 1
72030: PUSH
72031: LD_VAR 0 2
72035: PUSH
72036: LD_INT 3
72038: MINUS
72039: PUSH
72040: LD_INT 3
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: LIST
72047: PUSH
72048: LD_VAR 0 1
72052: PUSH
72053: LD_INT 4
72055: PLUS
72056: PUSH
72057: LD_VAR 0 2
72061: PUSH
72062: LD_INT 4
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: LIST
72069: PUSH
72070: LD_VAR 0 1
72074: PUSH
72075: LD_VAR 0 2
72079: PUSH
72080: LD_INT 4
72082: PLUS
72083: PUSH
72084: LD_INT 0
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: LIST
72091: PUSH
72092: LD_VAR 0 1
72096: PUSH
72097: LD_INT 3
72099: MINUS
72100: PUSH
72101: LD_VAR 0 2
72105: PUSH
72106: LD_INT 1
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: LIST
72113: PUSH
72114: LD_VAR 0 1
72118: PUSH
72119: LD_INT 4
72121: MINUS
72122: PUSH
72123: LD_VAR 0 2
72127: PUSH
72128: LD_INT 4
72130: MINUS
72131: PUSH
72132: LD_INT 2
72134: PUSH
72135: EMPTY
72136: LIST
72137: LIST
72138: LIST
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: ST_TO_ADDR
// end ; 3 :
72147: GO 72569
72149: LD_INT 3
72151: DOUBLE
72152: EQUAL
72153: IFTRUE 72157
72155: GO 72290
72157: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72158: LD_ADDR_VAR 0 5
72162: PUSH
72163: LD_VAR 0 1
72167: PUSH
72168: LD_INT 3
72170: PLUS
72171: PUSH
72172: LD_VAR 0 2
72176: PUSH
72177: LD_INT 4
72179: PUSH
72180: EMPTY
72181: LIST
72182: LIST
72183: LIST
72184: PUSH
72185: LD_VAR 0 1
72189: PUSH
72190: LD_INT 4
72192: PLUS
72193: PUSH
72194: LD_VAR 0 2
72198: PUSH
72199: LD_INT 4
72201: PLUS
72202: PUSH
72203: LD_INT 5
72205: PUSH
72206: EMPTY
72207: LIST
72208: LIST
72209: LIST
72210: PUSH
72211: LD_VAR 0 1
72215: PUSH
72216: LD_INT 4
72218: MINUS
72219: PUSH
72220: LD_VAR 0 2
72224: PUSH
72225: LD_INT 1
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: LIST
72232: PUSH
72233: LD_VAR 0 1
72237: PUSH
72238: LD_VAR 0 2
72242: PUSH
72243: LD_INT 4
72245: MINUS
72246: PUSH
72247: LD_INT 3
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: LIST
72254: PUSH
72255: LD_VAR 0 1
72259: PUSH
72260: LD_INT 3
72262: MINUS
72263: PUSH
72264: LD_VAR 0 2
72268: PUSH
72269: LD_INT 3
72271: MINUS
72272: PUSH
72273: LD_INT 2
72275: PUSH
72276: EMPTY
72277: LIST
72278: LIST
72279: LIST
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: LIST
72285: LIST
72286: LIST
72287: ST_TO_ADDR
// end ; 4 :
72288: GO 72569
72290: LD_INT 4
72292: DOUBLE
72293: EQUAL
72294: IFTRUE 72298
72296: GO 72431
72298: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72299: LD_ADDR_VAR 0 5
72303: PUSH
72304: LD_VAR 0 1
72308: PUSH
72309: LD_VAR 0 2
72313: PUSH
72314: LD_INT 4
72316: PLUS
72317: PUSH
72318: LD_INT 0
72320: PUSH
72321: EMPTY
72322: LIST
72323: LIST
72324: LIST
72325: PUSH
72326: LD_VAR 0 1
72330: PUSH
72331: LD_INT 3
72333: PLUS
72334: PUSH
72335: LD_VAR 0 2
72339: PUSH
72340: LD_INT 3
72342: PLUS
72343: PUSH
72344: LD_INT 5
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: LIST
72351: PUSH
72352: LD_VAR 0 1
72356: PUSH
72357: LD_INT 4
72359: PLUS
72360: PUSH
72361: LD_VAR 0 2
72365: PUSH
72366: LD_INT 4
72368: PUSH
72369: EMPTY
72370: LIST
72371: LIST
72372: LIST
72373: PUSH
72374: LD_VAR 0 1
72378: PUSH
72379: LD_VAR 0 2
72383: PUSH
72384: LD_INT 3
72386: MINUS
72387: PUSH
72388: LD_INT 3
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: LIST
72395: PUSH
72396: LD_VAR 0 1
72400: PUSH
72401: LD_INT 4
72403: MINUS
72404: PUSH
72405: LD_VAR 0 2
72409: PUSH
72410: LD_INT 4
72412: MINUS
72413: PUSH
72414: LD_INT 2
72416: PUSH
72417: EMPTY
72418: LIST
72419: LIST
72420: LIST
72421: PUSH
72422: EMPTY
72423: LIST
72424: LIST
72425: LIST
72426: LIST
72427: LIST
72428: ST_TO_ADDR
// end ; 5 :
72429: GO 72569
72431: LD_INT 5
72433: DOUBLE
72434: EQUAL
72435: IFTRUE 72439
72437: GO 72568
72439: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72440: LD_ADDR_VAR 0 5
72444: PUSH
72445: LD_VAR 0 1
72449: PUSH
72450: LD_INT 4
72452: MINUS
72453: PUSH
72454: LD_VAR 0 2
72458: PUSH
72459: LD_INT 1
72461: PUSH
72462: EMPTY
72463: LIST
72464: LIST
72465: LIST
72466: PUSH
72467: LD_VAR 0 1
72471: PUSH
72472: LD_VAR 0 2
72476: PUSH
72477: LD_INT 4
72479: MINUS
72480: PUSH
72481: LD_INT 3
72483: PUSH
72484: EMPTY
72485: LIST
72486: LIST
72487: LIST
72488: PUSH
72489: LD_VAR 0 1
72493: PUSH
72494: LD_INT 4
72496: PLUS
72497: PUSH
72498: LD_VAR 0 2
72502: PUSH
72503: LD_INT 4
72505: PLUS
72506: PUSH
72507: LD_INT 5
72509: PUSH
72510: EMPTY
72511: LIST
72512: LIST
72513: LIST
72514: PUSH
72515: LD_VAR 0 1
72519: PUSH
72520: LD_INT 3
72522: PLUS
72523: PUSH
72524: LD_VAR 0 2
72528: PUSH
72529: LD_INT 4
72531: PUSH
72532: EMPTY
72533: LIST
72534: LIST
72535: LIST
72536: PUSH
72537: LD_VAR 0 1
72541: PUSH
72542: LD_VAR 0 2
72546: PUSH
72547: LD_INT 3
72549: PLUS
72550: PUSH
72551: LD_INT 0
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: LIST
72558: PUSH
72559: EMPTY
72560: LIST
72561: LIST
72562: LIST
72563: LIST
72564: LIST
72565: ST_TO_ADDR
// end ; end ;
72566: GO 72569
72568: POP
// result := list ;
72569: LD_ADDR_VAR 0 4
72573: PUSH
72574: LD_VAR 0 5
72578: ST_TO_ADDR
// end ;
72579: LD_VAR 0 4
72583: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72584: LD_INT 0
72586: PPUSH
72587: PPUSH
72588: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72589: LD_VAR 0 1
72593: NOT
72594: PUSH
72595: LD_VAR 0 2
72599: PUSH
72600: LD_INT 1
72602: PUSH
72603: LD_INT 2
72605: PUSH
72606: LD_INT 3
72608: PUSH
72609: LD_INT 4
72611: PUSH
72612: EMPTY
72613: LIST
72614: LIST
72615: LIST
72616: LIST
72617: IN
72618: NOT
72619: OR
72620: IFFALSE 72624
// exit ;
72622: GO 72707
// tmp := [ ] ;
72624: LD_ADDR_VAR 0 5
72628: PUSH
72629: EMPTY
72630: ST_TO_ADDR
// for i in units do
72631: LD_ADDR_VAR 0 4
72635: PUSH
72636: LD_VAR 0 1
72640: PUSH
72641: FOR_IN
72642: IFFALSE 72676
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
72644: LD_ADDR_VAR 0 5
72648: PUSH
72649: LD_VAR 0 5
72653: PPUSH
72654: LD_VAR 0 4
72658: PPUSH
72659: LD_VAR 0 2
72663: PPUSH
72664: CALL_OW 259
72668: PPUSH
72669: CALL 74067 0 2
72673: ST_TO_ADDR
72674: GO 72641
72676: POP
72677: POP
// if not tmp then
72678: LD_VAR 0 5
72682: NOT
72683: IFFALSE 72687
// exit ;
72685: GO 72707
// result := SortListByListDesc ( units , tmp ) ;
72687: LD_ADDR_VAR 0 3
72691: PUSH
72692: LD_VAR 0 1
72696: PPUSH
72697: LD_VAR 0 5
72701: PPUSH
72702: CALL_OW 77
72706: ST_TO_ADDR
// end ;
72707: LD_VAR 0 3
72711: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72712: LD_INT 0
72714: PPUSH
72715: PPUSH
72716: PPUSH
// result := false ;
72717: LD_ADDR_VAR 0 3
72721: PUSH
72722: LD_INT 0
72724: ST_TO_ADDR
// if not building then
72725: LD_VAR 0 2
72729: NOT
72730: IFFALSE 72734
// exit ;
72732: GO 72872
// x := GetX ( building ) ;
72734: LD_ADDR_VAR 0 4
72738: PUSH
72739: LD_VAR 0 2
72743: PPUSH
72744: CALL_OW 250
72748: ST_TO_ADDR
// y := GetY ( building ) ;
72749: LD_ADDR_VAR 0 5
72753: PUSH
72754: LD_VAR 0 2
72758: PPUSH
72759: CALL_OW 251
72763: ST_TO_ADDR
// if not x or not y then
72764: LD_VAR 0 4
72768: NOT
72769: PUSH
72770: LD_VAR 0 5
72774: NOT
72775: OR
72776: IFFALSE 72780
// exit ;
72778: GO 72872
// if GetTaskList ( unit ) then
72780: LD_VAR 0 1
72784: PPUSH
72785: CALL_OW 437
72789: IFFALSE 72872
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72791: LD_STRING e
72793: PUSH
72794: LD_VAR 0 1
72798: PPUSH
72799: CALL_OW 437
72803: PUSH
72804: LD_INT 1
72806: ARRAY
72807: PUSH
72808: LD_INT 1
72810: ARRAY
72811: EQUAL
72812: PUSH
72813: LD_VAR 0 4
72817: PUSH
72818: LD_VAR 0 1
72822: PPUSH
72823: CALL_OW 437
72827: PUSH
72828: LD_INT 1
72830: ARRAY
72831: PUSH
72832: LD_INT 2
72834: ARRAY
72835: EQUAL
72836: AND
72837: PUSH
72838: LD_VAR 0 5
72842: PUSH
72843: LD_VAR 0 1
72847: PPUSH
72848: CALL_OW 437
72852: PUSH
72853: LD_INT 1
72855: ARRAY
72856: PUSH
72857: LD_INT 3
72859: ARRAY
72860: EQUAL
72861: AND
72862: IFFALSE 72872
// result := true end ;
72864: LD_ADDR_VAR 0 3
72868: PUSH
72869: LD_INT 1
72871: ST_TO_ADDR
// end ;
72872: LD_VAR 0 3
72876: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72877: LD_INT 0
72879: PPUSH
// result := false ;
72880: LD_ADDR_VAR 0 4
72884: PUSH
72885: LD_INT 0
72887: ST_TO_ADDR
// if GetTaskList ( unit ) then
72888: LD_VAR 0 1
72892: PPUSH
72893: CALL_OW 437
72897: IFFALSE 72980
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72899: LD_STRING M
72901: PUSH
72902: LD_VAR 0 1
72906: PPUSH
72907: CALL_OW 437
72911: PUSH
72912: LD_INT 1
72914: ARRAY
72915: PUSH
72916: LD_INT 1
72918: ARRAY
72919: EQUAL
72920: PUSH
72921: LD_VAR 0 2
72925: PUSH
72926: LD_VAR 0 1
72930: PPUSH
72931: CALL_OW 437
72935: PUSH
72936: LD_INT 1
72938: ARRAY
72939: PUSH
72940: LD_INT 2
72942: ARRAY
72943: EQUAL
72944: AND
72945: PUSH
72946: LD_VAR 0 3
72950: PUSH
72951: LD_VAR 0 1
72955: PPUSH
72956: CALL_OW 437
72960: PUSH
72961: LD_INT 1
72963: ARRAY
72964: PUSH
72965: LD_INT 3
72967: ARRAY
72968: EQUAL
72969: AND
72970: IFFALSE 72980
// result := true ;
72972: LD_ADDR_VAR 0 4
72976: PUSH
72977: LD_INT 1
72979: ST_TO_ADDR
// end ; end ;
72980: LD_VAR 0 4
72984: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72985: LD_INT 0
72987: PPUSH
72988: PPUSH
72989: PPUSH
72990: PPUSH
// if not unit or not area then
72991: LD_VAR 0 1
72995: NOT
72996: PUSH
72997: LD_VAR 0 2
73001: NOT
73002: OR
73003: IFFALSE 73007
// exit ;
73005: GO 73170
// tmp := AreaToList ( area , i ) ;
73007: LD_ADDR_VAR 0 6
73011: PUSH
73012: LD_VAR 0 2
73016: PPUSH
73017: LD_VAR 0 5
73021: PPUSH
73022: CALL_OW 517
73026: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73027: LD_ADDR_VAR 0 5
73031: PUSH
73032: DOUBLE
73033: LD_INT 1
73035: DEC
73036: ST_TO_ADDR
73037: LD_VAR 0 6
73041: PUSH
73042: LD_INT 1
73044: ARRAY
73045: PUSH
73046: FOR_TO
73047: IFFALSE 73168
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73049: LD_ADDR_VAR 0 7
73053: PUSH
73054: LD_VAR 0 6
73058: PUSH
73059: LD_INT 1
73061: ARRAY
73062: PUSH
73063: LD_VAR 0 5
73067: ARRAY
73068: PUSH
73069: LD_VAR 0 6
73073: PUSH
73074: LD_INT 2
73076: ARRAY
73077: PUSH
73078: LD_VAR 0 5
73082: ARRAY
73083: PUSH
73084: EMPTY
73085: LIST
73086: LIST
73087: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
73088: LD_INT 92
73090: PUSH
73091: LD_VAR 0 7
73095: PUSH
73096: LD_INT 1
73098: ARRAY
73099: PUSH
73100: LD_VAR 0 7
73104: PUSH
73105: LD_INT 2
73107: ARRAY
73108: PUSH
73109: LD_INT 3
73111: PUSH
73112: EMPTY
73113: LIST
73114: LIST
73115: LIST
73116: LIST
73117: PPUSH
73118: CALL_OW 69
73122: PUSH
73123: LD_INT 0
73125: EQUAL
73126: IFFALSE 73166
// begin PlaceUnitArea ( unit , area , mode ) ;
73128: LD_VAR 0 1
73132: PPUSH
73133: LD_VAR 0 2
73137: PPUSH
73138: LD_VAR 0 3
73142: PPUSH
73143: CALL_OW 49
// result := IsPlaced ( unit ) ;
73147: LD_ADDR_VAR 0 4
73151: PUSH
73152: LD_VAR 0 1
73156: PPUSH
73157: CALL_OW 305
73161: ST_TO_ADDR
// exit ;
73162: POP
73163: POP
73164: GO 73170
// end ; end ;
73166: GO 73046
73168: POP
73169: POP
// end ;
73170: LD_VAR 0 4
73174: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73175: LD_INT 0
73177: PPUSH
73178: PPUSH
73179: PPUSH
// if not side or side > 8 then
73180: LD_VAR 0 1
73184: NOT
73185: PUSH
73186: LD_VAR 0 1
73190: PUSH
73191: LD_INT 8
73193: GREATER
73194: OR
73195: IFFALSE 73199
// exit ;
73197: GO 73386
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73199: LD_ADDR_VAR 0 4
73203: PUSH
73204: LD_INT 22
73206: PUSH
73207: LD_VAR 0 1
73211: PUSH
73212: EMPTY
73213: LIST
73214: LIST
73215: PUSH
73216: LD_INT 21
73218: PUSH
73219: LD_INT 3
73221: PUSH
73222: EMPTY
73223: LIST
73224: LIST
73225: PUSH
73226: EMPTY
73227: LIST
73228: LIST
73229: PPUSH
73230: CALL_OW 69
73234: ST_TO_ADDR
// if not tmp then
73235: LD_VAR 0 4
73239: NOT
73240: IFFALSE 73244
// exit ;
73242: GO 73386
// enable_addtolog := true ;
73244: LD_ADDR_OWVAR 81
73248: PUSH
73249: LD_INT 1
73251: ST_TO_ADDR
// AddToLog ( [ ) ;
73252: LD_STRING [
73254: PPUSH
73255: CALL_OW 561
// for i in tmp do
73259: LD_ADDR_VAR 0 3
73263: PUSH
73264: LD_VAR 0 4
73268: PUSH
73269: FOR_IN
73270: IFFALSE 73377
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73272: LD_STRING [
73274: PUSH
73275: LD_VAR 0 3
73279: PPUSH
73280: CALL_OW 266
73284: STR
73285: PUSH
73286: LD_STRING , 
73288: STR
73289: PUSH
73290: LD_VAR 0 3
73294: PPUSH
73295: CALL_OW 250
73299: STR
73300: PUSH
73301: LD_STRING , 
73303: STR
73304: PUSH
73305: LD_VAR 0 3
73309: PPUSH
73310: CALL_OW 251
73314: STR
73315: PUSH
73316: LD_STRING , 
73318: STR
73319: PUSH
73320: LD_VAR 0 3
73324: PPUSH
73325: CALL_OW 254
73329: STR
73330: PUSH
73331: LD_STRING , 
73333: STR
73334: PUSH
73335: LD_VAR 0 3
73339: PPUSH
73340: LD_INT 1
73342: PPUSH
73343: CALL_OW 268
73347: STR
73348: PUSH
73349: LD_STRING , 
73351: STR
73352: PUSH
73353: LD_VAR 0 3
73357: PPUSH
73358: LD_INT 2
73360: PPUSH
73361: CALL_OW 268
73365: STR
73366: PUSH
73367: LD_STRING ],
73369: STR
73370: PPUSH
73371: CALL_OW 561
// end ;
73375: GO 73269
73377: POP
73378: POP
// AddToLog ( ]; ) ;
73379: LD_STRING ];
73381: PPUSH
73382: CALL_OW 561
// end ;
73386: LD_VAR 0 2
73390: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73391: LD_INT 0
73393: PPUSH
73394: PPUSH
73395: PPUSH
73396: PPUSH
73397: PPUSH
// if not area or not rate or not max then
73398: LD_VAR 0 1
73402: NOT
73403: PUSH
73404: LD_VAR 0 2
73408: NOT
73409: OR
73410: PUSH
73411: LD_VAR 0 4
73415: NOT
73416: OR
73417: IFFALSE 73421
// exit ;
73419: GO 73610
// while 1 do
73421: LD_INT 1
73423: IFFALSE 73610
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73425: LD_ADDR_VAR 0 9
73429: PUSH
73430: LD_VAR 0 1
73434: PPUSH
73435: LD_INT 1
73437: PPUSH
73438: CALL_OW 287
73442: PUSH
73443: LD_INT 10
73445: MUL
73446: ST_TO_ADDR
// r := rate / 10 ;
73447: LD_ADDR_VAR 0 7
73451: PUSH
73452: LD_VAR 0 2
73456: PUSH
73457: LD_INT 10
73459: DIVREAL
73460: ST_TO_ADDR
// time := 1 1$00 ;
73461: LD_ADDR_VAR 0 8
73465: PUSH
73466: LD_INT 2100
73468: ST_TO_ADDR
// if amount < min then
73469: LD_VAR 0 9
73473: PUSH
73474: LD_VAR 0 3
73478: LESS
73479: IFFALSE 73497
// r := r * 2 else
73481: LD_ADDR_VAR 0 7
73485: PUSH
73486: LD_VAR 0 7
73490: PUSH
73491: LD_INT 2
73493: MUL
73494: ST_TO_ADDR
73495: GO 73523
// if amount > max then
73497: LD_VAR 0 9
73501: PUSH
73502: LD_VAR 0 4
73506: GREATER
73507: IFFALSE 73523
// r := r / 2 ;
73509: LD_ADDR_VAR 0 7
73513: PUSH
73514: LD_VAR 0 7
73518: PUSH
73519: LD_INT 2
73521: DIVREAL
73522: ST_TO_ADDR
// time := time / r ;
73523: LD_ADDR_VAR 0 8
73527: PUSH
73528: LD_VAR 0 8
73532: PUSH
73533: LD_VAR 0 7
73537: DIVREAL
73538: ST_TO_ADDR
// if time < 0 then
73539: LD_VAR 0 8
73543: PUSH
73544: LD_INT 0
73546: LESS
73547: IFFALSE 73564
// time := time * - 1 ;
73549: LD_ADDR_VAR 0 8
73553: PUSH
73554: LD_VAR 0 8
73558: PUSH
73559: LD_INT 1
73561: NEG
73562: MUL
73563: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73564: LD_VAR 0 8
73568: PUSH
73569: LD_INT 35
73571: PPUSH
73572: LD_INT 875
73574: PPUSH
73575: CALL_OW 12
73579: PLUS
73580: PPUSH
73581: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73585: LD_INT 1
73587: PPUSH
73588: LD_INT 5
73590: PPUSH
73591: CALL_OW 12
73595: PPUSH
73596: LD_VAR 0 1
73600: PPUSH
73601: LD_INT 1
73603: PPUSH
73604: CALL_OW 55
// end ;
73608: GO 73421
// end ;
73610: LD_VAR 0 5
73614: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73615: LD_INT 0
73617: PPUSH
73618: PPUSH
73619: PPUSH
73620: PPUSH
73621: PPUSH
73622: PPUSH
73623: PPUSH
73624: PPUSH
// if not turrets or not factories then
73625: LD_VAR 0 1
73629: NOT
73630: PUSH
73631: LD_VAR 0 2
73635: NOT
73636: OR
73637: IFFALSE 73641
// exit ;
73639: GO 73948
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73641: LD_ADDR_VAR 0 10
73645: PUSH
73646: LD_INT 5
73648: PUSH
73649: LD_INT 6
73651: PUSH
73652: EMPTY
73653: LIST
73654: LIST
73655: PUSH
73656: LD_INT 2
73658: PUSH
73659: LD_INT 4
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: PUSH
73666: LD_INT 3
73668: PUSH
73669: LD_INT 5
73671: PUSH
73672: EMPTY
73673: LIST
73674: LIST
73675: PUSH
73676: EMPTY
73677: LIST
73678: LIST
73679: LIST
73680: PUSH
73681: LD_INT 24
73683: PUSH
73684: LD_INT 25
73686: PUSH
73687: EMPTY
73688: LIST
73689: LIST
73690: PUSH
73691: LD_INT 23
73693: PUSH
73694: LD_INT 27
73696: PUSH
73697: EMPTY
73698: LIST
73699: LIST
73700: PUSH
73701: EMPTY
73702: LIST
73703: LIST
73704: PUSH
73705: LD_INT 42
73707: PUSH
73708: LD_INT 43
73710: PUSH
73711: EMPTY
73712: LIST
73713: LIST
73714: PUSH
73715: LD_INT 44
73717: PUSH
73718: LD_INT 46
73720: PUSH
73721: EMPTY
73722: LIST
73723: LIST
73724: PUSH
73725: LD_INT 45
73727: PUSH
73728: LD_INT 47
73730: PUSH
73731: EMPTY
73732: LIST
73733: LIST
73734: PUSH
73735: EMPTY
73736: LIST
73737: LIST
73738: LIST
73739: PUSH
73740: EMPTY
73741: LIST
73742: LIST
73743: LIST
73744: ST_TO_ADDR
// result := [ ] ;
73745: LD_ADDR_VAR 0 3
73749: PUSH
73750: EMPTY
73751: ST_TO_ADDR
// for i in turrets do
73752: LD_ADDR_VAR 0 4
73756: PUSH
73757: LD_VAR 0 1
73761: PUSH
73762: FOR_IN
73763: IFFALSE 73946
// begin nat := GetNation ( i ) ;
73765: LD_ADDR_VAR 0 7
73769: PUSH
73770: LD_VAR 0 4
73774: PPUSH
73775: CALL_OW 248
73779: ST_TO_ADDR
// weapon := 0 ;
73780: LD_ADDR_VAR 0 8
73784: PUSH
73785: LD_INT 0
73787: ST_TO_ADDR
// if not nat then
73788: LD_VAR 0 7
73792: NOT
73793: IFFALSE 73797
// continue ;
73795: GO 73762
// for j in list [ nat ] do
73797: LD_ADDR_VAR 0 5
73801: PUSH
73802: LD_VAR 0 10
73806: PUSH
73807: LD_VAR 0 7
73811: ARRAY
73812: PUSH
73813: FOR_IN
73814: IFFALSE 73855
// if GetBWeapon ( i ) = j [ 1 ] then
73816: LD_VAR 0 4
73820: PPUSH
73821: CALL_OW 269
73825: PUSH
73826: LD_VAR 0 5
73830: PUSH
73831: LD_INT 1
73833: ARRAY
73834: EQUAL
73835: IFFALSE 73853
// begin weapon := j [ 2 ] ;
73837: LD_ADDR_VAR 0 8
73841: PUSH
73842: LD_VAR 0 5
73846: PUSH
73847: LD_INT 2
73849: ARRAY
73850: ST_TO_ADDR
// break ;
73851: GO 73855
// end ;
73853: GO 73813
73855: POP
73856: POP
// if not weapon then
73857: LD_VAR 0 8
73861: NOT
73862: IFFALSE 73866
// continue ;
73864: GO 73762
// for k in factories do
73866: LD_ADDR_VAR 0 6
73870: PUSH
73871: LD_VAR 0 2
73875: PUSH
73876: FOR_IN
73877: IFFALSE 73942
// begin weapons := AvailableWeaponList ( k ) ;
73879: LD_ADDR_VAR 0 9
73883: PUSH
73884: LD_VAR 0 6
73888: PPUSH
73889: CALL_OW 478
73893: ST_TO_ADDR
// if not weapons then
73894: LD_VAR 0 9
73898: NOT
73899: IFFALSE 73903
// continue ;
73901: GO 73876
// if weapon in weapons then
73903: LD_VAR 0 8
73907: PUSH
73908: LD_VAR 0 9
73912: IN
73913: IFFALSE 73940
// begin result := [ i , weapon ] ;
73915: LD_ADDR_VAR 0 3
73919: PUSH
73920: LD_VAR 0 4
73924: PUSH
73925: LD_VAR 0 8
73929: PUSH
73930: EMPTY
73931: LIST
73932: LIST
73933: ST_TO_ADDR
// exit ;
73934: POP
73935: POP
73936: POP
73937: POP
73938: GO 73948
// end ; end ;
73940: GO 73876
73942: POP
73943: POP
// end ;
73944: GO 73762
73946: POP
73947: POP
// end ;
73948: LD_VAR 0 3
73952: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73953: LD_INT 0
73955: PPUSH
// if not side or side > 8 then
73956: LD_VAR 0 3
73960: NOT
73961: PUSH
73962: LD_VAR 0 3
73966: PUSH
73967: LD_INT 8
73969: GREATER
73970: OR
73971: IFFALSE 73975
// exit ;
73973: GO 74034
// if not range then
73975: LD_VAR 0 4
73979: NOT
73980: IFFALSE 73991
// range := - 12 ;
73982: LD_ADDR_VAR 0 4
73986: PUSH
73987: LD_INT 12
73989: NEG
73990: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73991: LD_VAR 0 1
73995: PPUSH
73996: LD_VAR 0 2
74000: PPUSH
74001: LD_VAR 0 3
74005: PPUSH
74006: LD_VAR 0 4
74010: PPUSH
74011: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74015: LD_VAR 0 1
74019: PPUSH
74020: LD_VAR 0 2
74024: PPUSH
74025: LD_VAR 0 3
74029: PPUSH
74030: CALL_OW 331
// end ;
74034: LD_VAR 0 5
74038: RET
// export function Video ( mode ) ; begin
74039: LD_INT 0
74041: PPUSH
// ingame_video = mode ;
74042: LD_ADDR_OWVAR 52
74046: PUSH
74047: LD_VAR 0 1
74051: ST_TO_ADDR
// interface_hidden = mode ;
74052: LD_ADDR_OWVAR 54
74056: PUSH
74057: LD_VAR 0 1
74061: ST_TO_ADDR
// end ;
74062: LD_VAR 0 2
74066: RET
// export function Join ( array , element ) ; begin
74067: LD_INT 0
74069: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74070: LD_ADDR_VAR 0 3
74074: PUSH
74075: LD_VAR 0 1
74079: PPUSH
74080: LD_VAR 0 1
74084: PUSH
74085: LD_INT 1
74087: PLUS
74088: PPUSH
74089: LD_VAR 0 2
74093: PPUSH
74094: CALL_OW 1
74098: ST_TO_ADDR
// end ;
74099: LD_VAR 0 3
74103: RET
// export function JoinUnion ( array , element ) ; begin
74104: LD_INT 0
74106: PPUSH
// result := array union element ;
74107: LD_ADDR_VAR 0 3
74111: PUSH
74112: LD_VAR 0 1
74116: PUSH
74117: LD_VAR 0 2
74121: UNION
74122: ST_TO_ADDR
// end ;
74123: LD_VAR 0 3
74127: RET
// export function GetBehemoths ( side ) ; begin
74128: LD_INT 0
74130: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
74131: LD_ADDR_VAR 0 2
74135: PUSH
74136: LD_INT 22
74138: PUSH
74139: LD_VAR 0 1
74143: PUSH
74144: EMPTY
74145: LIST
74146: LIST
74147: PUSH
74148: LD_INT 31
74150: PUSH
74151: LD_INT 25
74153: PUSH
74154: EMPTY
74155: LIST
74156: LIST
74157: PUSH
74158: EMPTY
74159: LIST
74160: LIST
74161: PPUSH
74162: CALL_OW 69
74166: ST_TO_ADDR
// end ;
74167: LD_VAR 0 2
74171: RET
// export function Shuffle ( array ) ; var i , index ; begin
74172: LD_INT 0
74174: PPUSH
74175: PPUSH
74176: PPUSH
// result := [ ] ;
74177: LD_ADDR_VAR 0 2
74181: PUSH
74182: EMPTY
74183: ST_TO_ADDR
// if not array then
74184: LD_VAR 0 1
74188: NOT
74189: IFFALSE 74193
// exit ;
74191: GO 74292
// Randomize ;
74193: CALL_OW 10
// for i = array downto 1 do
74197: LD_ADDR_VAR 0 3
74201: PUSH
74202: DOUBLE
74203: LD_VAR 0 1
74207: INC
74208: ST_TO_ADDR
74209: LD_INT 1
74211: PUSH
74212: FOR_DOWNTO
74213: IFFALSE 74290
// begin index := rand ( 1 , array ) ;
74215: LD_ADDR_VAR 0 4
74219: PUSH
74220: LD_INT 1
74222: PPUSH
74223: LD_VAR 0 1
74227: PPUSH
74228: CALL_OW 12
74232: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74233: LD_ADDR_VAR 0 2
74237: PUSH
74238: LD_VAR 0 2
74242: PPUSH
74243: LD_VAR 0 2
74247: PUSH
74248: LD_INT 1
74250: PLUS
74251: PPUSH
74252: LD_VAR 0 1
74256: PUSH
74257: LD_VAR 0 4
74261: ARRAY
74262: PPUSH
74263: CALL_OW 2
74267: ST_TO_ADDR
// array := Delete ( array , index ) ;
74268: LD_ADDR_VAR 0 1
74272: PUSH
74273: LD_VAR 0 1
74277: PPUSH
74278: LD_VAR 0 4
74282: PPUSH
74283: CALL_OW 3
74287: ST_TO_ADDR
// end ;
74288: GO 74212
74290: POP
74291: POP
// end ;
74292: LD_VAR 0 2
74296: RET
// export function GetBaseMaterials ( base ) ; begin
74297: LD_INT 0
74299: PPUSH
// result := [ 0 , 0 , 0 ] ;
74300: LD_ADDR_VAR 0 2
74304: PUSH
74305: LD_INT 0
74307: PUSH
74308: LD_INT 0
74310: PUSH
74311: LD_INT 0
74313: PUSH
74314: EMPTY
74315: LIST
74316: LIST
74317: LIST
74318: ST_TO_ADDR
// if not base then
74319: LD_VAR 0 1
74323: NOT
74324: IFFALSE 74328
// exit ;
74326: GO 74377
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74328: LD_ADDR_VAR 0 2
74332: PUSH
74333: LD_VAR 0 1
74337: PPUSH
74338: LD_INT 1
74340: PPUSH
74341: CALL_OW 275
74345: PUSH
74346: LD_VAR 0 1
74350: PPUSH
74351: LD_INT 2
74353: PPUSH
74354: CALL_OW 275
74358: PUSH
74359: LD_VAR 0 1
74363: PPUSH
74364: LD_INT 3
74366: PPUSH
74367: CALL_OW 275
74371: PUSH
74372: EMPTY
74373: LIST
74374: LIST
74375: LIST
74376: ST_TO_ADDR
// end ;
74377: LD_VAR 0 2
74381: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74382: LD_INT 0
74384: PPUSH
74385: PPUSH
// result := array ;
74386: LD_ADDR_VAR 0 3
74390: PUSH
74391: LD_VAR 0 1
74395: ST_TO_ADDR
// if size >= result then
74396: LD_VAR 0 2
74400: PUSH
74401: LD_VAR 0 3
74405: GREATEREQUAL
74406: IFFALSE 74410
// exit ;
74408: GO 74460
// if size then
74410: LD_VAR 0 2
74414: IFFALSE 74460
// for i := array downto size do
74416: LD_ADDR_VAR 0 4
74420: PUSH
74421: DOUBLE
74422: LD_VAR 0 1
74426: INC
74427: ST_TO_ADDR
74428: LD_VAR 0 2
74432: PUSH
74433: FOR_DOWNTO
74434: IFFALSE 74458
// result := Delete ( result , result ) ;
74436: LD_ADDR_VAR 0 3
74440: PUSH
74441: LD_VAR 0 3
74445: PPUSH
74446: LD_VAR 0 3
74450: PPUSH
74451: CALL_OW 3
74455: ST_TO_ADDR
74456: GO 74433
74458: POP
74459: POP
// end ;
74460: LD_VAR 0 3
74464: RET
// export function ComExit ( unit ) ; var tmp ; begin
74465: LD_INT 0
74467: PPUSH
74468: PPUSH
// if not IsInUnit ( unit ) then
74469: LD_VAR 0 1
74473: PPUSH
74474: CALL_OW 310
74478: NOT
74479: IFFALSE 74483
// exit ;
74481: GO 74543
// tmp := IsInUnit ( unit ) ;
74483: LD_ADDR_VAR 0 3
74487: PUSH
74488: LD_VAR 0 1
74492: PPUSH
74493: CALL_OW 310
74497: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74498: LD_VAR 0 3
74502: PPUSH
74503: CALL_OW 247
74507: PUSH
74508: LD_INT 2
74510: EQUAL
74511: IFFALSE 74524
// ComExitVehicle ( unit ) else
74513: LD_VAR 0 1
74517: PPUSH
74518: CALL_OW 121
74522: GO 74533
// ComExitBuilding ( unit ) ;
74524: LD_VAR 0 1
74528: PPUSH
74529: CALL_OW 122
// result := tmp ;
74533: LD_ADDR_VAR 0 2
74537: PUSH
74538: LD_VAR 0 3
74542: ST_TO_ADDR
// end ;
74543: LD_VAR 0 2
74547: RET
// export function ComExitAll ( units ) ; var i ; begin
74548: LD_INT 0
74550: PPUSH
74551: PPUSH
// if not units then
74552: LD_VAR 0 1
74556: NOT
74557: IFFALSE 74561
// exit ;
74559: GO 74587
// for i in units do
74561: LD_ADDR_VAR 0 3
74565: PUSH
74566: LD_VAR 0 1
74570: PUSH
74571: FOR_IN
74572: IFFALSE 74585
// ComExit ( i ) ;
74574: LD_VAR 0 3
74578: PPUSH
74579: CALL 74465 0 1
74583: GO 74571
74585: POP
74586: POP
// end ;
74587: LD_VAR 0 2
74591: RET
// export function ResetHc ; begin
74592: LD_INT 0
74594: PPUSH
// InitHc ;
74595: CALL_OW 19
// hc_importance := 0 ;
74599: LD_ADDR_OWVAR 32
74603: PUSH
74604: LD_INT 0
74606: ST_TO_ADDR
// end ;
74607: LD_VAR 0 1
74611: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74612: LD_INT 0
74614: PPUSH
74615: PPUSH
74616: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74617: LD_ADDR_VAR 0 6
74621: PUSH
74622: LD_VAR 0 1
74626: PUSH
74627: LD_VAR 0 3
74631: PLUS
74632: PUSH
74633: LD_INT 2
74635: DIV
74636: ST_TO_ADDR
// if _x < 0 then
74637: LD_VAR 0 6
74641: PUSH
74642: LD_INT 0
74644: LESS
74645: IFFALSE 74662
// _x := _x * - 1 ;
74647: LD_ADDR_VAR 0 6
74651: PUSH
74652: LD_VAR 0 6
74656: PUSH
74657: LD_INT 1
74659: NEG
74660: MUL
74661: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74662: LD_ADDR_VAR 0 7
74666: PUSH
74667: LD_VAR 0 2
74671: PUSH
74672: LD_VAR 0 4
74676: PLUS
74677: PUSH
74678: LD_INT 2
74680: DIV
74681: ST_TO_ADDR
// if _y < 0 then
74682: LD_VAR 0 7
74686: PUSH
74687: LD_INT 0
74689: LESS
74690: IFFALSE 74707
// _y := _y * - 1 ;
74692: LD_ADDR_VAR 0 7
74696: PUSH
74697: LD_VAR 0 7
74701: PUSH
74702: LD_INT 1
74704: NEG
74705: MUL
74706: ST_TO_ADDR
// result := [ _x , _y ] ;
74707: LD_ADDR_VAR 0 5
74711: PUSH
74712: LD_VAR 0 6
74716: PUSH
74717: LD_VAR 0 7
74721: PUSH
74722: EMPTY
74723: LIST
74724: LIST
74725: ST_TO_ADDR
// end ;
74726: LD_VAR 0 5
74730: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74731: LD_INT 0
74733: PPUSH
74734: PPUSH
74735: PPUSH
74736: PPUSH
// task := GetTaskList ( unit ) ;
74737: LD_ADDR_VAR 0 7
74741: PUSH
74742: LD_VAR 0 1
74746: PPUSH
74747: CALL_OW 437
74751: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74752: LD_VAR 0 7
74756: NOT
74757: PUSH
74758: LD_VAR 0 1
74762: PPUSH
74763: LD_VAR 0 2
74767: PPUSH
74768: CALL_OW 308
74772: NOT
74773: AND
74774: IFFALSE 74778
// exit ;
74776: GO 74896
// if IsInArea ( unit , area ) then
74778: LD_VAR 0 1
74782: PPUSH
74783: LD_VAR 0 2
74787: PPUSH
74788: CALL_OW 308
74792: IFFALSE 74810
// begin ComMoveToArea ( unit , goAway ) ;
74794: LD_VAR 0 1
74798: PPUSH
74799: LD_VAR 0 3
74803: PPUSH
74804: CALL_OW 113
// exit ;
74808: GO 74896
// end ; if task [ 1 ] [ 1 ] <> M then
74810: LD_VAR 0 7
74814: PUSH
74815: LD_INT 1
74817: ARRAY
74818: PUSH
74819: LD_INT 1
74821: ARRAY
74822: PUSH
74823: LD_STRING M
74825: NONEQUAL
74826: IFFALSE 74830
// exit ;
74828: GO 74896
// x := task [ 1 ] [ 2 ] ;
74830: LD_ADDR_VAR 0 5
74834: PUSH
74835: LD_VAR 0 7
74839: PUSH
74840: LD_INT 1
74842: ARRAY
74843: PUSH
74844: LD_INT 2
74846: ARRAY
74847: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74848: LD_ADDR_VAR 0 6
74852: PUSH
74853: LD_VAR 0 7
74857: PUSH
74858: LD_INT 1
74860: ARRAY
74861: PUSH
74862: LD_INT 3
74864: ARRAY
74865: ST_TO_ADDR
// if InArea ( x , y , area ) then
74866: LD_VAR 0 5
74870: PPUSH
74871: LD_VAR 0 6
74875: PPUSH
74876: LD_VAR 0 2
74880: PPUSH
74881: CALL_OW 309
74885: IFFALSE 74896
// ComStop ( unit ) ;
74887: LD_VAR 0 1
74891: PPUSH
74892: CALL_OW 141
// end ;
74896: LD_VAR 0 4
74900: RET
// export function Abs ( value ) ; begin
74901: LD_INT 0
74903: PPUSH
// result := value ;
74904: LD_ADDR_VAR 0 2
74908: PUSH
74909: LD_VAR 0 1
74913: ST_TO_ADDR
// if value < 0 then
74914: LD_VAR 0 1
74918: PUSH
74919: LD_INT 0
74921: LESS
74922: IFFALSE 74939
// result := value * - 1 ;
74924: LD_ADDR_VAR 0 2
74928: PUSH
74929: LD_VAR 0 1
74933: PUSH
74934: LD_INT 1
74936: NEG
74937: MUL
74938: ST_TO_ADDR
// end ;
74939: LD_VAR 0 2
74943: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74944: LD_INT 0
74946: PPUSH
74947: PPUSH
74948: PPUSH
74949: PPUSH
74950: PPUSH
74951: PPUSH
74952: PPUSH
74953: PPUSH
// if not unit or not building then
74954: LD_VAR 0 1
74958: NOT
74959: PUSH
74960: LD_VAR 0 2
74964: NOT
74965: OR
74966: IFFALSE 74970
// exit ;
74968: GO 75196
// x := GetX ( building ) ;
74970: LD_ADDR_VAR 0 4
74974: PUSH
74975: LD_VAR 0 2
74979: PPUSH
74980: CALL_OW 250
74984: ST_TO_ADDR
// y := GetY ( building ) ;
74985: LD_ADDR_VAR 0 6
74989: PUSH
74990: LD_VAR 0 2
74994: PPUSH
74995: CALL_OW 251
74999: ST_TO_ADDR
// d := GetDir ( building ) ;
75000: LD_ADDR_VAR 0 8
75004: PUSH
75005: LD_VAR 0 2
75009: PPUSH
75010: CALL_OW 254
75014: ST_TO_ADDR
// r := 4 ;
75015: LD_ADDR_VAR 0 9
75019: PUSH
75020: LD_INT 4
75022: ST_TO_ADDR
// for i := 1 to 5 do
75023: LD_ADDR_VAR 0 10
75027: PUSH
75028: DOUBLE
75029: LD_INT 1
75031: DEC
75032: ST_TO_ADDR
75033: LD_INT 5
75035: PUSH
75036: FOR_TO
75037: IFFALSE 75194
// begin _x := ShiftX ( x , d , r + i ) ;
75039: LD_ADDR_VAR 0 5
75043: PUSH
75044: LD_VAR 0 4
75048: PPUSH
75049: LD_VAR 0 8
75053: PPUSH
75054: LD_VAR 0 9
75058: PUSH
75059: LD_VAR 0 10
75063: PLUS
75064: PPUSH
75065: CALL_OW 272
75069: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75070: LD_ADDR_VAR 0 7
75074: PUSH
75075: LD_VAR 0 6
75079: PPUSH
75080: LD_VAR 0 8
75084: PPUSH
75085: LD_VAR 0 9
75089: PUSH
75090: LD_VAR 0 10
75094: PLUS
75095: PPUSH
75096: CALL_OW 273
75100: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75101: LD_VAR 0 5
75105: PPUSH
75106: LD_VAR 0 7
75110: PPUSH
75111: CALL_OW 488
75115: PUSH
75116: LD_VAR 0 5
75120: PPUSH
75121: LD_VAR 0 7
75125: PPUSH
75126: CALL_OW 428
75130: PPUSH
75131: CALL_OW 247
75135: PUSH
75136: LD_INT 3
75138: PUSH
75139: LD_INT 2
75141: PUSH
75142: EMPTY
75143: LIST
75144: LIST
75145: IN
75146: NOT
75147: AND
75148: IFFALSE 75192
// begin ComMoveXY ( unit , _x , _y ) ;
75150: LD_VAR 0 1
75154: PPUSH
75155: LD_VAR 0 5
75159: PPUSH
75160: LD_VAR 0 7
75164: PPUSH
75165: CALL_OW 111
// result := [ _x , _y ] ;
75169: LD_ADDR_VAR 0 3
75173: PUSH
75174: LD_VAR 0 5
75178: PUSH
75179: LD_VAR 0 7
75183: PUSH
75184: EMPTY
75185: LIST
75186: LIST
75187: ST_TO_ADDR
// exit ;
75188: POP
75189: POP
75190: GO 75196
// end ; end ;
75192: GO 75036
75194: POP
75195: POP
// end ;
75196: LD_VAR 0 3
75200: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75201: LD_INT 0
75203: PPUSH
75204: PPUSH
75205: PPUSH
// result := 0 ;
75206: LD_ADDR_VAR 0 3
75210: PUSH
75211: LD_INT 0
75213: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75214: LD_VAR 0 1
75218: PUSH
75219: LD_INT 0
75221: LESS
75222: PUSH
75223: LD_VAR 0 1
75227: PUSH
75228: LD_INT 8
75230: GREATER
75231: OR
75232: PUSH
75233: LD_VAR 0 2
75237: PUSH
75238: LD_INT 0
75240: LESS
75241: OR
75242: PUSH
75243: LD_VAR 0 2
75247: PUSH
75248: LD_INT 8
75250: GREATER
75251: OR
75252: IFFALSE 75256
// exit ;
75254: GO 75331
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75256: LD_ADDR_VAR 0 4
75260: PUSH
75261: LD_INT 22
75263: PUSH
75264: LD_VAR 0 2
75268: PUSH
75269: EMPTY
75270: LIST
75271: LIST
75272: PPUSH
75273: CALL_OW 69
75277: PUSH
75278: FOR_IN
75279: IFFALSE 75329
// begin un := UnitShoot ( i ) ;
75281: LD_ADDR_VAR 0 5
75285: PUSH
75286: LD_VAR 0 4
75290: PPUSH
75291: CALL_OW 504
75295: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75296: LD_VAR 0 5
75300: PPUSH
75301: CALL_OW 255
75305: PUSH
75306: LD_VAR 0 1
75310: EQUAL
75311: IFFALSE 75327
// begin result := un ;
75313: LD_ADDR_VAR 0 3
75317: PUSH
75318: LD_VAR 0 5
75322: ST_TO_ADDR
// exit ;
75323: POP
75324: POP
75325: GO 75331
// end ; end ;
75327: GO 75278
75329: POP
75330: POP
// end ;
75331: LD_VAR 0 3
75335: RET
// export function GetCargoBay ( units ) ; begin
75336: LD_INT 0
75338: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75339: LD_ADDR_VAR 0 2
75343: PUSH
75344: LD_VAR 0 1
75348: PPUSH
75349: LD_INT 2
75351: PUSH
75352: LD_INT 34
75354: PUSH
75355: LD_INT 12
75357: PUSH
75358: EMPTY
75359: LIST
75360: LIST
75361: PUSH
75362: LD_INT 34
75364: PUSH
75365: LD_INT 51
75367: PUSH
75368: EMPTY
75369: LIST
75370: LIST
75371: PUSH
75372: LD_INT 34
75374: PUSH
75375: LD_INT 32
75377: PUSH
75378: EMPTY
75379: LIST
75380: LIST
75381: PUSH
75382: LD_INT 34
75384: PUSH
75385: LD_INT 89
75387: PUSH
75388: EMPTY
75389: LIST
75390: LIST
75391: PUSH
75392: EMPTY
75393: LIST
75394: LIST
75395: LIST
75396: LIST
75397: LIST
75398: PPUSH
75399: CALL_OW 72
75403: ST_TO_ADDR
// end ;
75404: LD_VAR 0 2
75408: RET
// export function Negate ( value ) ; begin
75409: LD_INT 0
75411: PPUSH
// result := not value ;
75412: LD_ADDR_VAR 0 2
75416: PUSH
75417: LD_VAR 0 1
75421: NOT
75422: ST_TO_ADDR
// end ;
75423: LD_VAR 0 2
75427: RET
// export function Inc ( value ) ; begin
75428: LD_INT 0
75430: PPUSH
// result := value + 1 ;
75431: LD_ADDR_VAR 0 2
75435: PUSH
75436: LD_VAR 0 1
75440: PUSH
75441: LD_INT 1
75443: PLUS
75444: ST_TO_ADDR
// end ;
75445: LD_VAR 0 2
75449: RET
// export function Dec ( value ) ; begin
75450: LD_INT 0
75452: PPUSH
// result := value - 1 ;
75453: LD_ADDR_VAR 0 2
75457: PUSH
75458: LD_VAR 0 1
75462: PUSH
75463: LD_INT 1
75465: MINUS
75466: ST_TO_ADDR
// end ;
75467: LD_VAR 0 2
75471: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75472: LD_INT 0
75474: PPUSH
75475: PPUSH
75476: PPUSH
75477: PPUSH
75478: PPUSH
75479: PPUSH
75480: PPUSH
75481: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75482: LD_VAR 0 1
75486: PPUSH
75487: LD_VAR 0 2
75491: PPUSH
75492: CALL_OW 488
75496: NOT
75497: PUSH
75498: LD_VAR 0 3
75502: PPUSH
75503: LD_VAR 0 4
75507: PPUSH
75508: CALL_OW 488
75512: NOT
75513: OR
75514: IFFALSE 75527
// begin result := - 1 ;
75516: LD_ADDR_VAR 0 5
75520: PUSH
75521: LD_INT 1
75523: NEG
75524: ST_TO_ADDR
// exit ;
75525: GO 75762
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75527: LD_ADDR_VAR 0 12
75531: PUSH
75532: LD_VAR 0 1
75536: PPUSH
75537: LD_VAR 0 2
75541: PPUSH
75542: LD_VAR 0 3
75546: PPUSH
75547: LD_VAR 0 4
75551: PPUSH
75552: CALL 74612 0 4
75556: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75557: LD_ADDR_VAR 0 11
75561: PUSH
75562: LD_VAR 0 1
75566: PPUSH
75567: LD_VAR 0 2
75571: PPUSH
75572: LD_VAR 0 12
75576: PUSH
75577: LD_INT 1
75579: ARRAY
75580: PPUSH
75581: LD_VAR 0 12
75585: PUSH
75586: LD_INT 2
75588: ARRAY
75589: PPUSH
75590: CALL_OW 298
75594: ST_TO_ADDR
// distance := 9999 ;
75595: LD_ADDR_VAR 0 10
75599: PUSH
75600: LD_INT 9999
75602: ST_TO_ADDR
// for i := 0 to 5 do
75603: LD_ADDR_VAR 0 6
75607: PUSH
75608: DOUBLE
75609: LD_INT 0
75611: DEC
75612: ST_TO_ADDR
75613: LD_INT 5
75615: PUSH
75616: FOR_TO
75617: IFFALSE 75760
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75619: LD_ADDR_VAR 0 7
75623: PUSH
75624: LD_VAR 0 1
75628: PPUSH
75629: LD_VAR 0 6
75633: PPUSH
75634: LD_VAR 0 11
75638: PPUSH
75639: CALL_OW 272
75643: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75644: LD_ADDR_VAR 0 8
75648: PUSH
75649: LD_VAR 0 2
75653: PPUSH
75654: LD_VAR 0 6
75658: PPUSH
75659: LD_VAR 0 11
75663: PPUSH
75664: CALL_OW 273
75668: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75669: LD_VAR 0 7
75673: PPUSH
75674: LD_VAR 0 8
75678: PPUSH
75679: CALL_OW 488
75683: NOT
75684: IFFALSE 75688
// continue ;
75686: GO 75616
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75688: LD_ADDR_VAR 0 9
75692: PUSH
75693: LD_VAR 0 12
75697: PUSH
75698: LD_INT 1
75700: ARRAY
75701: PPUSH
75702: LD_VAR 0 12
75706: PUSH
75707: LD_INT 2
75709: ARRAY
75710: PPUSH
75711: LD_VAR 0 7
75715: PPUSH
75716: LD_VAR 0 8
75720: PPUSH
75721: CALL_OW 298
75725: ST_TO_ADDR
// if tmp < distance then
75726: LD_VAR 0 9
75730: PUSH
75731: LD_VAR 0 10
75735: LESS
75736: IFFALSE 75758
// begin result := i ;
75738: LD_ADDR_VAR 0 5
75742: PUSH
75743: LD_VAR 0 6
75747: ST_TO_ADDR
// distance := tmp ;
75748: LD_ADDR_VAR 0 10
75752: PUSH
75753: LD_VAR 0 9
75757: ST_TO_ADDR
// end ; end ;
75758: GO 75616
75760: POP
75761: POP
// end ;
75762: LD_VAR 0 5
75766: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75767: LD_INT 0
75769: PPUSH
75770: PPUSH
// if not driver or not IsInUnit ( driver ) then
75771: LD_VAR 0 1
75775: NOT
75776: PUSH
75777: LD_VAR 0 1
75781: PPUSH
75782: CALL_OW 310
75786: NOT
75787: OR
75788: IFFALSE 75792
// exit ;
75790: GO 75882
// vehicle := IsInUnit ( driver ) ;
75792: LD_ADDR_VAR 0 3
75796: PUSH
75797: LD_VAR 0 1
75801: PPUSH
75802: CALL_OW 310
75806: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75807: LD_VAR 0 1
75811: PPUSH
75812: LD_STRING \
75814: PUSH
75815: LD_INT 0
75817: PUSH
75818: LD_INT 0
75820: PUSH
75821: LD_INT 0
75823: PUSH
75824: LD_INT 0
75826: PUSH
75827: LD_INT 0
75829: PUSH
75830: LD_INT 0
75832: PUSH
75833: EMPTY
75834: LIST
75835: LIST
75836: LIST
75837: LIST
75838: LIST
75839: LIST
75840: LIST
75841: PUSH
75842: LD_STRING E
75844: PUSH
75845: LD_INT 0
75847: PUSH
75848: LD_INT 0
75850: PUSH
75851: LD_VAR 0 3
75855: PUSH
75856: LD_INT 0
75858: PUSH
75859: LD_INT 0
75861: PUSH
75862: LD_INT 0
75864: PUSH
75865: EMPTY
75866: LIST
75867: LIST
75868: LIST
75869: LIST
75870: LIST
75871: LIST
75872: LIST
75873: PUSH
75874: EMPTY
75875: LIST
75876: LIST
75877: PPUSH
75878: CALL_OW 446
// end ;
75882: LD_VAR 0 2
75886: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75887: LD_INT 0
75889: PPUSH
75890: PPUSH
// if not driver or not IsInUnit ( driver ) then
75891: LD_VAR 0 1
75895: NOT
75896: PUSH
75897: LD_VAR 0 1
75901: PPUSH
75902: CALL_OW 310
75906: NOT
75907: OR
75908: IFFALSE 75912
// exit ;
75910: GO 76002
// vehicle := IsInUnit ( driver ) ;
75912: LD_ADDR_VAR 0 3
75916: PUSH
75917: LD_VAR 0 1
75921: PPUSH
75922: CALL_OW 310
75926: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75927: LD_VAR 0 1
75931: PPUSH
75932: LD_STRING \
75934: PUSH
75935: LD_INT 0
75937: PUSH
75938: LD_INT 0
75940: PUSH
75941: LD_INT 0
75943: PUSH
75944: LD_INT 0
75946: PUSH
75947: LD_INT 0
75949: PUSH
75950: LD_INT 0
75952: PUSH
75953: EMPTY
75954: LIST
75955: LIST
75956: LIST
75957: LIST
75958: LIST
75959: LIST
75960: LIST
75961: PUSH
75962: LD_STRING E
75964: PUSH
75965: LD_INT 0
75967: PUSH
75968: LD_INT 0
75970: PUSH
75971: LD_VAR 0 3
75975: PUSH
75976: LD_INT 0
75978: PUSH
75979: LD_INT 0
75981: PUSH
75982: LD_INT 0
75984: PUSH
75985: EMPTY
75986: LIST
75987: LIST
75988: LIST
75989: LIST
75990: LIST
75991: LIST
75992: LIST
75993: PUSH
75994: EMPTY
75995: LIST
75996: LIST
75997: PPUSH
75998: CALL_OW 447
// end ;
76002: LD_VAR 0 2
76006: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76007: LD_INT 0
76009: PPUSH
76010: PPUSH
76011: PPUSH
// tmp := [ ] ;
76012: LD_ADDR_VAR 0 5
76016: PUSH
76017: EMPTY
76018: ST_TO_ADDR
// for i in units do
76019: LD_ADDR_VAR 0 4
76023: PUSH
76024: LD_VAR 0 1
76028: PUSH
76029: FOR_IN
76030: IFFALSE 76068
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76032: LD_ADDR_VAR 0 5
76036: PUSH
76037: LD_VAR 0 5
76041: PPUSH
76042: LD_VAR 0 5
76046: PUSH
76047: LD_INT 1
76049: PLUS
76050: PPUSH
76051: LD_VAR 0 4
76055: PPUSH
76056: CALL_OW 256
76060: PPUSH
76061: CALL_OW 2
76065: ST_TO_ADDR
76066: GO 76029
76068: POP
76069: POP
// if not tmp then
76070: LD_VAR 0 5
76074: NOT
76075: IFFALSE 76079
// exit ;
76077: GO 76127
// if asc then
76079: LD_VAR 0 2
76083: IFFALSE 76107
// result := SortListByListAsc ( units , tmp ) else
76085: LD_ADDR_VAR 0 3
76089: PUSH
76090: LD_VAR 0 1
76094: PPUSH
76095: LD_VAR 0 5
76099: PPUSH
76100: CALL_OW 76
76104: ST_TO_ADDR
76105: GO 76127
// result := SortListByListDesc ( units , tmp ) ;
76107: LD_ADDR_VAR 0 3
76111: PUSH
76112: LD_VAR 0 1
76116: PPUSH
76117: LD_VAR 0 5
76121: PPUSH
76122: CALL_OW 77
76126: ST_TO_ADDR
// end ;
76127: LD_VAR 0 3
76131: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76132: LD_INT 0
76134: PPUSH
76135: PPUSH
// task := GetTaskList ( mech ) ;
76136: LD_ADDR_VAR 0 4
76140: PUSH
76141: LD_VAR 0 1
76145: PPUSH
76146: CALL_OW 437
76150: ST_TO_ADDR
// if not task then
76151: LD_VAR 0 4
76155: NOT
76156: IFFALSE 76160
// exit ;
76158: GO 76202
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76160: LD_ADDR_VAR 0 3
76164: PUSH
76165: LD_VAR 0 4
76169: PUSH
76170: LD_INT 1
76172: ARRAY
76173: PUSH
76174: LD_INT 1
76176: ARRAY
76177: PUSH
76178: LD_STRING r
76180: EQUAL
76181: PUSH
76182: LD_VAR 0 4
76186: PUSH
76187: LD_INT 1
76189: ARRAY
76190: PUSH
76191: LD_INT 4
76193: ARRAY
76194: PUSH
76195: LD_VAR 0 2
76199: EQUAL
76200: AND
76201: ST_TO_ADDR
// end ;
76202: LD_VAR 0 3
76206: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76207: LD_INT 0
76209: PPUSH
// SetDir ( unit , d ) ;
76210: LD_VAR 0 1
76214: PPUSH
76215: LD_VAR 0 4
76219: PPUSH
76220: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76224: LD_VAR 0 1
76228: PPUSH
76229: LD_VAR 0 2
76233: PPUSH
76234: LD_VAR 0 3
76238: PPUSH
76239: LD_VAR 0 5
76243: PPUSH
76244: CALL_OW 48
// end ;
76248: LD_VAR 0 6
76252: RET
// export function ToNaturalNumber ( number ) ; begin
76253: LD_INT 0
76255: PPUSH
// result := number div 1 ;
76256: LD_ADDR_VAR 0 2
76260: PUSH
76261: LD_VAR 0 1
76265: PUSH
76266: LD_INT 1
76268: DIV
76269: ST_TO_ADDR
// if number < 0 then
76270: LD_VAR 0 1
76274: PUSH
76275: LD_INT 0
76277: LESS
76278: IFFALSE 76288
// result := 0 ;
76280: LD_ADDR_VAR 0 2
76284: PUSH
76285: LD_INT 0
76287: ST_TO_ADDR
// end ;
76288: LD_VAR 0 2
76292: RET
// export function SortByClass ( units , class ) ; var un ; begin
76293: LD_INT 0
76295: PPUSH
76296: PPUSH
// if not units or not class then
76297: LD_VAR 0 1
76301: NOT
76302: PUSH
76303: LD_VAR 0 2
76307: NOT
76308: OR
76309: IFFALSE 76313
// exit ;
76311: GO 76408
// result := [ ] ;
76313: LD_ADDR_VAR 0 3
76317: PUSH
76318: EMPTY
76319: ST_TO_ADDR
// for un in units do
76320: LD_ADDR_VAR 0 4
76324: PUSH
76325: LD_VAR 0 1
76329: PUSH
76330: FOR_IN
76331: IFFALSE 76406
// if GetClass ( un ) = class then
76333: LD_VAR 0 4
76337: PPUSH
76338: CALL_OW 257
76342: PUSH
76343: LD_VAR 0 2
76347: EQUAL
76348: IFFALSE 76375
// result := Insert ( result , 1 , un ) else
76350: LD_ADDR_VAR 0 3
76354: PUSH
76355: LD_VAR 0 3
76359: PPUSH
76360: LD_INT 1
76362: PPUSH
76363: LD_VAR 0 4
76367: PPUSH
76368: CALL_OW 2
76372: ST_TO_ADDR
76373: GO 76404
// result := Replace ( result , result + 1 , un ) ;
76375: LD_ADDR_VAR 0 3
76379: PUSH
76380: LD_VAR 0 3
76384: PPUSH
76385: LD_VAR 0 3
76389: PUSH
76390: LD_INT 1
76392: PLUS
76393: PPUSH
76394: LD_VAR 0 4
76398: PPUSH
76399: CALL_OW 1
76403: ST_TO_ADDR
76404: GO 76330
76406: POP
76407: POP
// end ;
76408: LD_VAR 0 3
76412: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76413: LD_INT 0
76415: PPUSH
76416: PPUSH
76417: PPUSH
76418: PPUSH
76419: PPUSH
76420: PPUSH
76421: PPUSH
// result := [ ] ;
76422: LD_ADDR_VAR 0 4
76426: PUSH
76427: EMPTY
76428: ST_TO_ADDR
// if x - r < 0 then
76429: LD_VAR 0 1
76433: PUSH
76434: LD_VAR 0 3
76438: MINUS
76439: PUSH
76440: LD_INT 0
76442: LESS
76443: IFFALSE 76455
// min_x := 0 else
76445: LD_ADDR_VAR 0 8
76449: PUSH
76450: LD_INT 0
76452: ST_TO_ADDR
76453: GO 76471
// min_x := x - r ;
76455: LD_ADDR_VAR 0 8
76459: PUSH
76460: LD_VAR 0 1
76464: PUSH
76465: LD_VAR 0 3
76469: MINUS
76470: ST_TO_ADDR
// if y - r < 0 then
76471: LD_VAR 0 2
76475: PUSH
76476: LD_VAR 0 3
76480: MINUS
76481: PUSH
76482: LD_INT 0
76484: LESS
76485: IFFALSE 76497
// min_y := 0 else
76487: LD_ADDR_VAR 0 7
76491: PUSH
76492: LD_INT 0
76494: ST_TO_ADDR
76495: GO 76513
// min_y := y - r ;
76497: LD_ADDR_VAR 0 7
76501: PUSH
76502: LD_VAR 0 2
76506: PUSH
76507: LD_VAR 0 3
76511: MINUS
76512: ST_TO_ADDR
// max_x := x + r ;
76513: LD_ADDR_VAR 0 9
76517: PUSH
76518: LD_VAR 0 1
76522: PUSH
76523: LD_VAR 0 3
76527: PLUS
76528: ST_TO_ADDR
// max_y := y + r ;
76529: LD_ADDR_VAR 0 10
76533: PUSH
76534: LD_VAR 0 2
76538: PUSH
76539: LD_VAR 0 3
76543: PLUS
76544: ST_TO_ADDR
// for _x = min_x to max_x do
76545: LD_ADDR_VAR 0 5
76549: PUSH
76550: DOUBLE
76551: LD_VAR 0 8
76555: DEC
76556: ST_TO_ADDR
76557: LD_VAR 0 9
76561: PUSH
76562: FOR_TO
76563: IFFALSE 76664
// for _y = min_y to max_y do
76565: LD_ADDR_VAR 0 6
76569: PUSH
76570: DOUBLE
76571: LD_VAR 0 7
76575: DEC
76576: ST_TO_ADDR
76577: LD_VAR 0 10
76581: PUSH
76582: FOR_TO
76583: IFFALSE 76660
// begin if not ValidHex ( _x , _y ) then
76585: LD_VAR 0 5
76589: PPUSH
76590: LD_VAR 0 6
76594: PPUSH
76595: CALL_OW 488
76599: NOT
76600: IFFALSE 76604
// continue ;
76602: GO 76582
// if GetResourceTypeXY ( _x , _y ) then
76604: LD_VAR 0 5
76608: PPUSH
76609: LD_VAR 0 6
76613: PPUSH
76614: CALL_OW 283
76618: IFFALSE 76658
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76620: LD_ADDR_VAR 0 4
76624: PUSH
76625: LD_VAR 0 4
76629: PPUSH
76630: LD_VAR 0 4
76634: PUSH
76635: LD_INT 1
76637: PLUS
76638: PPUSH
76639: LD_VAR 0 5
76643: PUSH
76644: LD_VAR 0 6
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: PPUSH
76653: CALL_OW 1
76657: ST_TO_ADDR
// end ;
76658: GO 76582
76660: POP
76661: POP
76662: GO 76562
76664: POP
76665: POP
// end ;
76666: LD_VAR 0 4
76670: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76671: LD_INT 0
76673: PPUSH
76674: PPUSH
76675: PPUSH
76676: PPUSH
76677: PPUSH
76678: PPUSH
76679: PPUSH
76680: PPUSH
// if not units then
76681: LD_VAR 0 1
76685: NOT
76686: IFFALSE 76690
// exit ;
76688: GO 77214
// result := UnitFilter ( units , [ f_ok ] ) ;
76690: LD_ADDR_VAR 0 3
76694: PUSH
76695: LD_VAR 0 1
76699: PPUSH
76700: LD_INT 50
76702: PUSH
76703: EMPTY
76704: LIST
76705: PPUSH
76706: CALL_OW 72
76710: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76711: LD_ADDR_VAR 0 8
76715: PUSH
76716: LD_VAR 0 1
76720: PUSH
76721: LD_INT 1
76723: ARRAY
76724: PPUSH
76725: CALL_OW 255
76729: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76730: LD_ADDR_VAR 0 10
76734: PUSH
76735: LD_INT 29
76737: PUSH
76738: LD_INT 91
76740: PUSH
76741: LD_INT 49
76743: PUSH
76744: EMPTY
76745: LIST
76746: LIST
76747: LIST
76748: ST_TO_ADDR
// if not result then
76749: LD_VAR 0 3
76753: NOT
76754: IFFALSE 76758
// exit ;
76756: GO 77214
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76758: LD_ADDR_VAR 0 5
76762: PUSH
76763: LD_INT 81
76765: PUSH
76766: LD_VAR 0 8
76770: PUSH
76771: EMPTY
76772: LIST
76773: LIST
76774: PPUSH
76775: CALL_OW 69
76779: ST_TO_ADDR
// for i in result do
76780: LD_ADDR_VAR 0 4
76784: PUSH
76785: LD_VAR 0 3
76789: PUSH
76790: FOR_IN
76791: IFFALSE 77212
// begin tag := GetTag ( i ) + 1 ;
76793: LD_ADDR_VAR 0 9
76797: PUSH
76798: LD_VAR 0 4
76802: PPUSH
76803: CALL_OW 110
76807: PUSH
76808: LD_INT 1
76810: PLUS
76811: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76812: LD_ADDR_VAR 0 7
76816: PUSH
76817: LD_VAR 0 4
76821: PPUSH
76822: CALL_OW 250
76826: PPUSH
76827: LD_VAR 0 4
76831: PPUSH
76832: CALL_OW 251
76836: PPUSH
76837: LD_INT 6
76839: PPUSH
76840: CALL 76413 0 3
76844: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76845: LD_VAR 0 4
76849: PPUSH
76850: CALL_OW 247
76854: PUSH
76855: LD_INT 2
76857: EQUAL
76858: PUSH
76859: LD_VAR 0 7
76863: AND
76864: PUSH
76865: LD_VAR 0 4
76869: PPUSH
76870: CALL_OW 264
76874: PUSH
76875: LD_VAR 0 10
76879: IN
76880: NOT
76881: AND
76882: IFFALSE 76921
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76884: LD_VAR 0 4
76888: PPUSH
76889: LD_VAR 0 7
76893: PUSH
76894: LD_INT 1
76896: ARRAY
76897: PUSH
76898: LD_INT 1
76900: ARRAY
76901: PPUSH
76902: LD_VAR 0 7
76906: PUSH
76907: LD_INT 1
76909: ARRAY
76910: PUSH
76911: LD_INT 2
76913: ARRAY
76914: PPUSH
76915: CALL_OW 116
76919: GO 77210
// if path > tag then
76921: LD_VAR 0 2
76925: PUSH
76926: LD_VAR 0 9
76930: GREATER
76931: IFFALSE 77139
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
76933: LD_ADDR_VAR 0 6
76937: PUSH
76938: LD_VAR 0 5
76942: PPUSH
76943: LD_INT 91
76945: PUSH
76946: LD_VAR 0 4
76950: PUSH
76951: LD_INT 8
76953: PUSH
76954: EMPTY
76955: LIST
76956: LIST
76957: LIST
76958: PPUSH
76959: CALL_OW 72
76963: ST_TO_ADDR
// if nearEnemy then
76964: LD_VAR 0 6
76968: IFFALSE 77037
// begin if GetWeapon ( i ) = ru_time_lapser then
76970: LD_VAR 0 4
76974: PPUSH
76975: CALL_OW 264
76979: PUSH
76980: LD_INT 49
76982: EQUAL
76983: IFFALSE 77011
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
76985: LD_VAR 0 4
76989: PPUSH
76990: LD_VAR 0 6
76994: PPUSH
76995: LD_VAR 0 4
76999: PPUSH
77000: CALL_OW 74
77004: PPUSH
77005: CALL_OW 112
77009: GO 77035
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77011: LD_VAR 0 4
77015: PPUSH
77016: LD_VAR 0 6
77020: PPUSH
77021: LD_VAR 0 4
77025: PPUSH
77026: CALL_OW 74
77030: PPUSH
77031: CALL_OW 115
// end else
77035: GO 77137
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77037: LD_VAR 0 4
77041: PPUSH
77042: LD_VAR 0 2
77046: PUSH
77047: LD_VAR 0 9
77051: ARRAY
77052: PUSH
77053: LD_INT 1
77055: ARRAY
77056: PPUSH
77057: LD_VAR 0 2
77061: PUSH
77062: LD_VAR 0 9
77066: ARRAY
77067: PUSH
77068: LD_INT 2
77070: ARRAY
77071: PPUSH
77072: CALL_OW 297
77076: PUSH
77077: LD_INT 6
77079: GREATER
77080: IFFALSE 77123
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77082: LD_VAR 0 4
77086: PPUSH
77087: LD_VAR 0 2
77091: PUSH
77092: LD_VAR 0 9
77096: ARRAY
77097: PUSH
77098: LD_INT 1
77100: ARRAY
77101: PPUSH
77102: LD_VAR 0 2
77106: PUSH
77107: LD_VAR 0 9
77111: ARRAY
77112: PUSH
77113: LD_INT 2
77115: ARRAY
77116: PPUSH
77117: CALL_OW 114
77121: GO 77137
// SetTag ( i , tag ) ;
77123: LD_VAR 0 4
77127: PPUSH
77128: LD_VAR 0 9
77132: PPUSH
77133: CALL_OW 109
// end else
77137: GO 77210
// if enemy then
77139: LD_VAR 0 5
77143: IFFALSE 77210
// begin if GetWeapon ( i ) = ru_time_lapser then
77145: LD_VAR 0 4
77149: PPUSH
77150: CALL_OW 264
77154: PUSH
77155: LD_INT 49
77157: EQUAL
77158: IFFALSE 77186
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77160: LD_VAR 0 4
77164: PPUSH
77165: LD_VAR 0 5
77169: PPUSH
77170: LD_VAR 0 4
77174: PPUSH
77175: CALL_OW 74
77179: PPUSH
77180: CALL_OW 112
77184: GO 77210
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77186: LD_VAR 0 4
77190: PPUSH
77191: LD_VAR 0 5
77195: PPUSH
77196: LD_VAR 0 4
77200: PPUSH
77201: CALL_OW 74
77205: PPUSH
77206: CALL_OW 115
// end ; end ;
77210: GO 76790
77212: POP
77213: POP
// end ;
77214: LD_VAR 0 3
77218: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77219: LD_INT 0
77221: PPUSH
77222: PPUSH
77223: PPUSH
// if not unit or IsInUnit ( unit ) then
77224: LD_VAR 0 1
77228: NOT
77229: PUSH
77230: LD_VAR 0 1
77234: PPUSH
77235: CALL_OW 310
77239: OR
77240: IFFALSE 77244
// exit ;
77242: GO 77335
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77244: LD_ADDR_VAR 0 4
77248: PUSH
77249: LD_VAR 0 1
77253: PPUSH
77254: CALL_OW 250
77258: PPUSH
77259: LD_VAR 0 2
77263: PPUSH
77264: LD_INT 1
77266: PPUSH
77267: CALL_OW 272
77271: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77272: LD_ADDR_VAR 0 5
77276: PUSH
77277: LD_VAR 0 1
77281: PPUSH
77282: CALL_OW 251
77286: PPUSH
77287: LD_VAR 0 2
77291: PPUSH
77292: LD_INT 1
77294: PPUSH
77295: CALL_OW 273
77299: ST_TO_ADDR
// if ValidHex ( x , y ) then
77300: LD_VAR 0 4
77304: PPUSH
77305: LD_VAR 0 5
77309: PPUSH
77310: CALL_OW 488
77314: IFFALSE 77335
// ComTurnXY ( unit , x , y ) ;
77316: LD_VAR 0 1
77320: PPUSH
77321: LD_VAR 0 4
77325: PPUSH
77326: LD_VAR 0 5
77330: PPUSH
77331: CALL_OW 118
// end ;
77335: LD_VAR 0 3
77339: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77340: LD_INT 0
77342: PPUSH
77343: PPUSH
// result := false ;
77344: LD_ADDR_VAR 0 3
77348: PUSH
77349: LD_INT 0
77351: ST_TO_ADDR
// if not units then
77352: LD_VAR 0 2
77356: NOT
77357: IFFALSE 77361
// exit ;
77359: GO 77406
// for i in units do
77361: LD_ADDR_VAR 0 4
77365: PUSH
77366: LD_VAR 0 2
77370: PUSH
77371: FOR_IN
77372: IFFALSE 77404
// if See ( side , i ) then
77374: LD_VAR 0 1
77378: PPUSH
77379: LD_VAR 0 4
77383: PPUSH
77384: CALL_OW 292
77388: IFFALSE 77402
// begin result := true ;
77390: LD_ADDR_VAR 0 3
77394: PUSH
77395: LD_INT 1
77397: ST_TO_ADDR
// exit ;
77398: POP
77399: POP
77400: GO 77406
// end ;
77402: GO 77371
77404: POP
77405: POP
// end ;
77406: LD_VAR 0 3
77410: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77411: LD_INT 0
77413: PPUSH
77414: PPUSH
77415: PPUSH
77416: PPUSH
// if not unit or not points then
77417: LD_VAR 0 1
77421: NOT
77422: PUSH
77423: LD_VAR 0 2
77427: NOT
77428: OR
77429: IFFALSE 77433
// exit ;
77431: GO 77523
// dist := 99999 ;
77433: LD_ADDR_VAR 0 5
77437: PUSH
77438: LD_INT 99999
77440: ST_TO_ADDR
// for i in points do
77441: LD_ADDR_VAR 0 4
77445: PUSH
77446: LD_VAR 0 2
77450: PUSH
77451: FOR_IN
77452: IFFALSE 77521
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77454: LD_ADDR_VAR 0 6
77458: PUSH
77459: LD_VAR 0 1
77463: PPUSH
77464: LD_VAR 0 4
77468: PUSH
77469: LD_INT 1
77471: ARRAY
77472: PPUSH
77473: LD_VAR 0 4
77477: PUSH
77478: LD_INT 2
77480: ARRAY
77481: PPUSH
77482: CALL_OW 297
77486: ST_TO_ADDR
// if tmpDist < dist then
77487: LD_VAR 0 6
77491: PUSH
77492: LD_VAR 0 5
77496: LESS
77497: IFFALSE 77519
// begin result := i ;
77499: LD_ADDR_VAR 0 3
77503: PUSH
77504: LD_VAR 0 4
77508: ST_TO_ADDR
// dist := tmpDist ;
77509: LD_ADDR_VAR 0 5
77513: PUSH
77514: LD_VAR 0 6
77518: ST_TO_ADDR
// end ; end ;
77519: GO 77451
77521: POP
77522: POP
// end ;
77523: LD_VAR 0 3
77527: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77528: LD_INT 0
77530: PPUSH
// uc_side := side ;
77531: LD_ADDR_OWVAR 20
77535: PUSH
77536: LD_VAR 0 1
77540: ST_TO_ADDR
// uc_nation := 3 ;
77541: LD_ADDR_OWVAR 21
77545: PUSH
77546: LD_INT 3
77548: ST_TO_ADDR
// vc_chassis := 25 ;
77549: LD_ADDR_OWVAR 37
77553: PUSH
77554: LD_INT 25
77556: ST_TO_ADDR
// vc_engine := engine_siberite ;
77557: LD_ADDR_OWVAR 39
77561: PUSH
77562: LD_INT 3
77564: ST_TO_ADDR
// vc_control := control_computer ;
77565: LD_ADDR_OWVAR 38
77569: PUSH
77570: LD_INT 3
77572: ST_TO_ADDR
// vc_weapon := 59 ;
77573: LD_ADDR_OWVAR 40
77577: PUSH
77578: LD_INT 59
77580: ST_TO_ADDR
// result := CreateVehicle ;
77581: LD_ADDR_VAR 0 5
77585: PUSH
77586: CALL_OW 45
77590: ST_TO_ADDR
// SetDir ( result , d ) ;
77591: LD_VAR 0 5
77595: PPUSH
77596: LD_VAR 0 4
77600: PPUSH
77601: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77605: LD_VAR 0 5
77609: PPUSH
77610: LD_VAR 0 2
77614: PPUSH
77615: LD_VAR 0 3
77619: PPUSH
77620: LD_INT 0
77622: PPUSH
77623: CALL_OW 48
// end ;
77627: LD_VAR 0 5
77631: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77632: LD_INT 0
77634: PPUSH
77635: PPUSH
77636: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77637: LD_ADDR_VAR 0 2
77641: PUSH
77642: LD_INT 0
77644: PUSH
77645: LD_INT 0
77647: PUSH
77648: LD_INT 0
77650: PUSH
77651: LD_INT 0
77653: PUSH
77654: EMPTY
77655: LIST
77656: LIST
77657: LIST
77658: LIST
77659: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77660: LD_VAR 0 1
77664: NOT
77665: PUSH
77666: LD_VAR 0 1
77670: PPUSH
77671: CALL_OW 264
77675: PUSH
77676: LD_INT 12
77678: PUSH
77679: LD_INT 51
77681: PUSH
77682: LD_INT 32
77684: PUSH
77685: LD_INT 89
77687: PUSH
77688: EMPTY
77689: LIST
77690: LIST
77691: LIST
77692: LIST
77693: IN
77694: NOT
77695: OR
77696: IFFALSE 77700
// exit ;
77698: GO 77798
// for i := 1 to 3 do
77700: LD_ADDR_VAR 0 3
77704: PUSH
77705: DOUBLE
77706: LD_INT 1
77708: DEC
77709: ST_TO_ADDR
77710: LD_INT 3
77712: PUSH
77713: FOR_TO
77714: IFFALSE 77796
// begin tmp := GetCargo ( cargo , i ) ;
77716: LD_ADDR_VAR 0 4
77720: PUSH
77721: LD_VAR 0 1
77725: PPUSH
77726: LD_VAR 0 3
77730: PPUSH
77731: CALL_OW 289
77735: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77736: LD_ADDR_VAR 0 2
77740: PUSH
77741: LD_VAR 0 2
77745: PPUSH
77746: LD_VAR 0 3
77750: PPUSH
77751: LD_VAR 0 4
77755: PPUSH
77756: CALL_OW 1
77760: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77761: LD_ADDR_VAR 0 2
77765: PUSH
77766: LD_VAR 0 2
77770: PPUSH
77771: LD_INT 4
77773: PPUSH
77774: LD_VAR 0 2
77778: PUSH
77779: LD_INT 4
77781: ARRAY
77782: PUSH
77783: LD_VAR 0 4
77787: PLUS
77788: PPUSH
77789: CALL_OW 1
77793: ST_TO_ADDR
// end ;
77794: GO 77713
77796: POP
77797: POP
// end ;
77798: LD_VAR 0 2
77802: RET
// export function Length ( array ) ; begin
77803: LD_INT 0
77805: PPUSH
// result := array + 0 ;
77806: LD_ADDR_VAR 0 2
77810: PUSH
77811: LD_VAR 0 1
77815: PUSH
77816: LD_INT 0
77818: PLUS
77819: ST_TO_ADDR
// end ;
77820: LD_VAR 0 2
77824: RET
// export function PrepareArray ( array ) ; begin
77825: LD_INT 0
77827: PPUSH
// result := array diff 0 ;
77828: LD_ADDR_VAR 0 2
77832: PUSH
77833: LD_VAR 0 1
77837: PUSH
77838: LD_INT 0
77840: DIFF
77841: ST_TO_ADDR
// if not result [ 1 ] then
77842: LD_VAR 0 2
77846: PUSH
77847: LD_INT 1
77849: ARRAY
77850: NOT
77851: IFFALSE 77871
// result := Delete ( result , 1 ) ;
77853: LD_ADDR_VAR 0 2
77857: PUSH
77858: LD_VAR 0 2
77862: PPUSH
77863: LD_INT 1
77865: PPUSH
77866: CALL_OW 3
77870: ST_TO_ADDR
// end ;
77871: LD_VAR 0 2
77875: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
77876: LD_INT 0
77878: PPUSH
77879: PPUSH
77880: PPUSH
77881: PPUSH
// sibRocketRange := 25 ;
77882: LD_ADDR_VAR 0 6
77886: PUSH
77887: LD_INT 25
77889: ST_TO_ADDR
// result := false ;
77890: LD_ADDR_VAR 0 4
77894: PUSH
77895: LD_INT 0
77897: ST_TO_ADDR
// for i := 0 to 5 do
77898: LD_ADDR_VAR 0 5
77902: PUSH
77903: DOUBLE
77904: LD_INT 0
77906: DEC
77907: ST_TO_ADDR
77908: LD_INT 5
77910: PUSH
77911: FOR_TO
77912: IFFALSE 77979
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
77914: LD_VAR 0 1
77918: PPUSH
77919: LD_VAR 0 5
77923: PPUSH
77924: LD_VAR 0 6
77928: PPUSH
77929: CALL_OW 272
77933: PPUSH
77934: LD_VAR 0 2
77938: PPUSH
77939: LD_VAR 0 5
77943: PPUSH
77944: LD_VAR 0 6
77948: PPUSH
77949: CALL_OW 273
77953: PPUSH
77954: LD_VAR 0 3
77958: PPUSH
77959: CALL_OW 309
77963: IFFALSE 77977
// begin result := true ;
77965: LD_ADDR_VAR 0 4
77969: PUSH
77970: LD_INT 1
77972: ST_TO_ADDR
// exit ;
77973: POP
77974: POP
77975: GO 77981
// end ;
77977: GO 77911
77979: POP
77980: POP
// end ;
77981: LD_VAR 0 4
77985: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
77986: LD_INT 0
77988: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
77989: LD_VAR 0 1
77993: PPUSH
77994: LD_VAR 0 2
77998: PPUSH
77999: LD_INT 0
78001: PPUSH
78002: LD_INT 0
78004: PPUSH
78005: LD_INT 1
78007: PPUSH
78008: LD_INT 0
78010: PPUSH
78011: CALL_OW 587
// end ;
78015: LD_VAR 0 3
78019: RET
// export function CenterOnNow ( unit ) ; begin
78020: LD_INT 0
78022: PPUSH
// result := IsInUnit ( unit ) ;
78023: LD_ADDR_VAR 0 2
78027: PUSH
78028: LD_VAR 0 1
78032: PPUSH
78033: CALL_OW 310
78037: ST_TO_ADDR
// if not result then
78038: LD_VAR 0 2
78042: NOT
78043: IFFALSE 78055
// result := unit ;
78045: LD_ADDR_VAR 0 2
78049: PUSH
78050: LD_VAR 0 1
78054: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
78055: LD_VAR 0 1
78059: PPUSH
78060: CALL_OW 87
// end ;
78064: LD_VAR 0 2
78068: RET
// export function ComMoveHex ( unit , hex ) ; begin
78069: LD_INT 0
78071: PPUSH
// if not hex then
78072: LD_VAR 0 2
78076: NOT
78077: IFFALSE 78081
// exit ;
78079: GO 78134
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
78081: LD_VAR 0 2
78085: PUSH
78086: LD_INT 1
78088: ARRAY
78089: PPUSH
78090: LD_VAR 0 2
78094: PUSH
78095: LD_INT 2
78097: ARRAY
78098: PPUSH
78099: CALL_OW 428
78103: IFFALSE 78107
// exit ;
78105: GO 78134
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
78107: LD_VAR 0 1
78111: PPUSH
78112: LD_VAR 0 2
78116: PUSH
78117: LD_INT 1
78119: ARRAY
78120: PPUSH
78121: LD_VAR 0 2
78125: PUSH
78126: LD_INT 2
78128: ARRAY
78129: PPUSH
78130: CALL_OW 111
// end ; end_of_file
78134: LD_VAR 0 3
78138: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78139: LD_VAR 0 1
78143: PUSH
78144: LD_INT 200
78146: DOUBLE
78147: GREATEREQUAL
78148: IFFALSE 78156
78150: LD_INT 299
78152: DOUBLE
78153: LESSEQUAL
78154: IFTRUE 78158
78156: GO 78190
78158: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78159: LD_VAR 0 1
78163: PPUSH
78164: LD_VAR 0 2
78168: PPUSH
78169: LD_VAR 0 3
78173: PPUSH
78174: LD_VAR 0 4
78178: PPUSH
78179: LD_VAR 0 5
78183: PPUSH
78184: CALL 32862 0 5
78188: GO 78267
78190: LD_INT 300
78192: DOUBLE
78193: GREATEREQUAL
78194: IFFALSE 78202
78196: LD_INT 399
78198: DOUBLE
78199: LESSEQUAL
78200: IFTRUE 78204
78202: GO 78266
78204: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78205: LD_VAR 0 1
78209: PPUSH
78210: LD_VAR 0 2
78214: PPUSH
78215: LD_VAR 0 3
78219: PPUSH
78220: LD_VAR 0 4
78224: PPUSH
78225: LD_VAR 0 5
78229: PPUSH
78230: LD_VAR 0 6
78234: PPUSH
78235: LD_VAR 0 7
78239: PPUSH
78240: LD_VAR 0 8
78244: PPUSH
78245: LD_VAR 0 9
78249: PPUSH
78250: LD_VAR 0 10
78254: PPUSH
78255: LD_VAR 0 11
78259: PPUSH
78260: CALL 29187 0 11
78264: GO 78267
78266: POP
// end ;
78267: PPOPN 11
78269: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78270: LD_VAR 0 1
78274: PPUSH
78275: LD_VAR 0 2
78279: PPUSH
78280: LD_VAR 0 3
78284: PPUSH
78285: LD_VAR 0 4
78289: PPUSH
78290: LD_VAR 0 5
78294: PPUSH
78295: CALL 32598 0 5
// end ; end_of_file
78299: PPOPN 5
78301: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78302: LD_VAR 0 1
78306: PPUSH
78307: LD_VAR 0 2
78311: PPUSH
78312: LD_VAR 0 3
78316: PPUSH
78317: LD_VAR 0 4
78321: PPUSH
78322: LD_VAR 0 5
78326: PPUSH
78327: LD_VAR 0 6
78331: PPUSH
78332: CALL 16839 0 6
// end ;
78336: PPOPN 6
78338: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78339: LD_INT 0
78341: PPUSH
// begin if not units then
78342: LD_VAR 0 1
78346: NOT
78347: IFFALSE 78351
// exit ;
78349: GO 78351
// end ;
78351: PPOPN 7
78353: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78354: CALL 16743 0 0
// end ;
78358: PPOPN 1
78360: END
