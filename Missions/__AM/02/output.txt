// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// AnimateTrees ( true ) ;
 161: LD_INT 1
 163: PPUSH
 164: CALL_OW 573
// PrepareDifficulty ;
 168: CALL 10355 0 0
// PrepareRussianCommander ;
 172: CALL 11811 0 0
// PrepareSouthBase ;
 176: CALL 11894 0 0
// PrepareNorthBase ;
 180: CALL 12233 0 0
// PrepareOtherRussians ;
 184: CALL 12599 0 0
// PrepareHeroes ;
 188: CALL 10670 0 0
// PrepareLisSquad ;
 192: CALL 10998 0 0
// PrepareOtherAmericans ;
 196: CALL 11343 0 0
// end ; end_of_file
 200: END
// every 1 do var tmp ;
 201: GO 203
 203: DISABLE
 204: LD_INT 0
 206: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 207: LD_EXP 1
 211: PPUSH
 212: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 216: LD_ADDR_VAR 0 1
 220: PUSH
 221: LD_INT 22
 223: PUSH
 224: LD_INT 4
 226: PUSH
 227: EMPTY
 228: LIST
 229: LIST
 230: PUSH
 231: LD_INT 21
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: PPUSH
 245: CALL_OW 69
 249: PUSH
 250: LD_EXP 4
 254: PUSH
 255: EMPTY
 256: LIST
 257: DIFF
 258: ST_TO_ADDR
// if Cyrus and Bobby then
 259: LD_EXP 3
 263: PUSH
 264: LD_EXP 2
 268: AND
 269: IFFALSE 599
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 271: LD_EXP 3
 275: PPUSH
 276: LD_INT 43
 278: PPUSH
 279: LD_INT 72
 281: PPUSH
 282: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 286: LD_EXP 2
 290: PPUSH
 291: LD_INT 44
 293: PPUSH
 294: LD_INT 70
 296: PPUSH
 297: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 301: LD_EXP 1
 305: PPUSH
 306: LD_INT 46
 308: PPUSH
 309: LD_INT 73
 311: PPUSH
 312: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 316: LD_EXP 3
 320: PPUSH
 321: LD_STRING D1a-Cyrus-1
 323: PPUSH
 324: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 328: LD_EXP 1
 332: PPUSH
 333: LD_STRING D1a-JMM-1
 335: PPUSH
 336: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 340: LD_EXP 3
 344: PPUSH
 345: LD_INT 37
 347: PPUSH
 348: LD_INT 66
 350: PPUSH
 351: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 355: LD_EXP 2
 359: PPUSH
 360: LD_INT 41
 362: PPUSH
 363: LD_INT 67
 365: PPUSH
 366: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 370: LD_EXP 1
 374: PPUSH
 375: LD_INT 38
 377: PPUSH
 378: LD_INT 64
 380: PPUSH
 381: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 385: LD_EXP 2
 389: PPUSH
 390: LD_STRING D1a-Bobby-2
 392: PPUSH
 393: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 397: LD_EXP 3
 401: PPUSH
 402: LD_INT 35
 404: PPUSH
 405: LD_INT 62
 407: PPUSH
 408: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 412: LD_EXP 2
 416: PPUSH
 417: LD_INT 32
 419: PPUSH
 420: LD_INT 60
 422: PPUSH
 423: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 427: LD_EXP 1
 431: PPUSH
 432: LD_INT 35
 434: PPUSH
 435: LD_INT 60
 437: PPUSH
 438: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 442: LD_EXP 1
 446: PPUSH
 447: LD_STRING D1a-JMM-2
 449: PPUSH
 450: CALL_OW 88
// ComWalk ( Lisa ) ;
 454: LD_EXP 4
 458: PPUSH
 459: CALL_OW 138
// wait ( 0 0$1 ) ;
 463: LD_INT 35
 465: PPUSH
 466: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 470: LD_EXP 4
 474: PPUSH
 475: LD_EXP 1
 479: PPUSH
 480: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 484: LD_EXP 1
 488: PUSH
 489: LD_EXP 3
 493: PUSH
 494: LD_EXP 2
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: PPUSH
 504: LD_EXP 4
 508: PPUSH
 509: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 513: LD_VAR 0 1
 517: PUSH
 518: LD_INT 1
 520: ARRAY
 521: PPUSH
 522: LD_INT 33
 524: PPUSH
 525: LD_INT 55
 527: PPUSH
 528: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 532: LD_VAR 0 1
 536: PUSH
 537: LD_INT 2
 539: ARRAY
 540: PPUSH
 541: LD_INT 30
 543: PPUSH
 544: LD_INT 54
 546: PPUSH
 547: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 551: LD_VAR 0 1
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_EXP 1
 564: PPUSH
 565: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 569: LD_VAR 0 1
 573: PUSH
 574: LD_INT 2
 576: ARRAY
 577: PPUSH
 578: LD_EXP 1
 582: PPUSH
 583: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 587: LD_EXP 4
 591: PPUSH
 592: LD_STRING D1a-Lisa-2
 594: PPUSH
 595: CALL_OW 88
// end ; if Cyrus and not Bobby then
 599: LD_EXP 3
 603: PUSH
 604: LD_EXP 2
 608: NOT
 609: AND
 610: IFFALSE 815
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 612: LD_EXP 3
 616: PPUSH
 617: LD_INT 43
 619: PPUSH
 620: LD_INT 72
 622: PPUSH
 623: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 627: LD_EXP 1
 631: PPUSH
 632: LD_INT 46
 634: PPUSH
 635: LD_INT 73
 637: PPUSH
 638: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 642: LD_EXP 3
 646: PPUSH
 647: LD_STRING D1a-Cyrus-1
 649: PPUSH
 650: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 654: LD_EXP 1
 658: PPUSH
 659: LD_STRING D1a-JMM-1
 661: PPUSH
 662: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 666: LD_EXP 3
 670: PPUSH
 671: LD_INT 37
 673: PPUSH
 674: LD_INT 66
 676: PPUSH
 677: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 681: LD_EXP 1
 685: PPUSH
 686: LD_INT 38
 688: PPUSH
 689: LD_INT 64
 691: PPUSH
 692: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 696: LD_EXP 3
 700: PPUSH
 701: LD_STRING D1a-Cyrus-2
 703: PPUSH
 704: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 708: LD_EXP 3
 712: PPUSH
 713: LD_INT 35
 715: PPUSH
 716: LD_INT 62
 718: PPUSH
 719: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 723: LD_EXP 1
 727: PPUSH
 728: LD_INT 35
 730: PPUSH
 731: LD_INT 60
 733: PPUSH
 734: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 738: LD_EXP 1
 742: PPUSH
 743: LD_STRING D1a-JMM-2
 745: PPUSH
 746: CALL_OW 88
// ComWalk ( Lisa ) ;
 750: LD_EXP 4
 754: PPUSH
 755: CALL_OW 138
// wait ( 0 0$1 ) ;
 759: LD_INT 35
 761: PPUSH
 762: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 766: LD_EXP 4
 770: PPUSH
 771: LD_EXP 1
 775: PPUSH
 776: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 780: LD_EXP 4
 784: PPUSH
 785: LD_STRING D1a-Lisa-2
 787: PPUSH
 788: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 792: LD_EXP 1
 796: PUSH
 797: LD_EXP 3
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PPUSH
 806: LD_EXP 4
 810: PPUSH
 811: CALL_OW 119
// end ; if not Cyrus and Bobby then
 815: LD_EXP 3
 819: NOT
 820: PUSH
 821: LD_EXP 2
 825: AND
 826: IFFALSE 1105
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 828: LD_EXP 2
 832: PPUSH
 833: LD_INT 44
 835: PPUSH
 836: LD_INT 70
 838: PPUSH
 839: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 843: LD_EXP 1
 847: PPUSH
 848: LD_INT 46
 850: PPUSH
 851: LD_INT 73
 853: PPUSH
 854: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 858: LD_EXP 2
 862: PPUSH
 863: LD_STRING D1a-Bobby-1
 865: PPUSH
 866: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 870: LD_EXP 1
 874: PPUSH
 875: LD_STRING D1a-JMM-1
 877: PPUSH
 878: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 882: LD_EXP 2
 886: PPUSH
 887: LD_INT 37
 889: PPUSH
 890: LD_INT 66
 892: PPUSH
 893: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 897: LD_EXP 1
 901: PPUSH
 902: LD_INT 38
 904: PPUSH
 905: LD_INT 64
 907: PPUSH
 908: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 912: LD_EXP 2
 916: PPUSH
 917: LD_STRING D1a-Bobby-2
 919: PPUSH
 920: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 924: LD_EXP 2
 928: PPUSH
 929: LD_INT 35
 931: PPUSH
 932: LD_INT 62
 934: PPUSH
 935: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 939: LD_EXP 1
 943: PPUSH
 944: LD_INT 35
 946: PPUSH
 947: LD_INT 60
 949: PPUSH
 950: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 954: LD_EXP 1
 958: PPUSH
 959: LD_STRING D1a-JMM-2
 961: PPUSH
 962: CALL_OW 88
// ComWalk ( Lisa ) ;
 966: LD_EXP 4
 970: PPUSH
 971: CALL_OW 138
// wait ( 0 0$1 ) ;
 975: LD_INT 35
 977: PPUSH
 978: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 982: LD_EXP 4
 986: PPUSH
 987: LD_EXP 1
 991: PPUSH
 992: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 996: LD_EXP 1
1000: PUSH
1001: LD_EXP 3
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PPUSH
1010: LD_EXP 4
1014: PPUSH
1015: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 1
1026: ARRAY
1027: PPUSH
1028: LD_INT 33
1030: PPUSH
1031: LD_INT 55
1033: PPUSH
1034: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1038: LD_VAR 0 1
1042: PUSH
1043: LD_INT 2
1045: ARRAY
1046: PPUSH
1047: LD_INT 30
1049: PPUSH
1050: LD_INT 54
1052: PPUSH
1053: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1057: LD_VAR 0 1
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: LD_EXP 1
1070: PPUSH
1071: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1075: LD_VAR 0 1
1079: PUSH
1080: LD_INT 2
1082: ARRAY
1083: PPUSH
1084: LD_EXP 1
1088: PPUSH
1089: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1093: LD_EXP 4
1097: PPUSH
1098: LD_STRING D1a-Lisa-2
1100: PPUSH
1101: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1105: LD_EXP 3
1109: NOT
1110: PUSH
1111: LD_EXP 2
1115: NOT
1116: AND
1117: IFFALSE 1331
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1119: LD_EXP 1
1123: PPUSH
1124: LD_INT 37
1126: PPUSH
1127: LD_INT 66
1129: PPUSH
1130: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1134: LD_EXP 1
1138: PPUSH
1139: LD_STRING D1b-JMM-1
1141: PPUSH
1142: CALL_OW 88
// ComCrawl ( JMM ) ;
1146: LD_EXP 1
1150: PPUSH
1151: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1155: LD_EXP 1
1159: PPUSH
1160: LD_INT 35
1162: PPUSH
1163: LD_INT 60
1165: PPUSH
1166: CALL_OW 171
// wait ( 0 0$8 ) ;
1170: LD_INT 280
1172: PPUSH
1173: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1177: LD_EXP 1
1181: PPUSH
1182: LD_STRING D1b-JMM-1a
1184: PPUSH
1185: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1189: LD_EXP 1
1193: PUSH
1194: LD_EXP 4
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 138
// wait ( 0 0$1 ) ;
1207: LD_INT 35
1209: PPUSH
1210: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1214: LD_EXP 4
1218: PPUSH
1219: LD_EXP 1
1223: PPUSH
1224: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1228: LD_EXP 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: PPUSH
1236: LD_EXP 4
1240: PPUSH
1241: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1245: LD_VAR 0 1
1249: PUSH
1250: LD_INT 1
1252: ARRAY
1253: PPUSH
1254: LD_INT 33
1256: PPUSH
1257: LD_INT 55
1259: PPUSH
1260: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: ARRAY
1272: PPUSH
1273: LD_INT 30
1275: PPUSH
1276: LD_INT 54
1278: PPUSH
1279: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1283: LD_VAR 0 1
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_EXP 1
1296: PPUSH
1297: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1301: LD_VAR 0 1
1305: PUSH
1306: LD_INT 2
1308: ARRAY
1309: PPUSH
1310: LD_EXP 1
1314: PPUSH
1315: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1319: LD_EXP 4
1323: PPUSH
1324: LD_STRING D1b-Lisa-1
1326: PPUSH
1327: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1331: LD_EXP 1
1335: PPUSH
1336: LD_STRING D1-JMM-1
1338: PPUSH
1339: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1343: LD_EXP 4
1347: PPUSH
1348: LD_STRING D1-Lisa-1
1350: PPUSH
1351: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1355: LD_EXP 1
1359: PPUSH
1360: LD_STRING D1-JMM-2
1362: PPUSH
1363: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1367: LD_EXP 9
1371: PPUSH
1372: LD_STRING D1-Pow-2
1374: PPUSH
1375: CALL_OW 94
// if Cyrus then
1379: LD_EXP 3
1383: IFFALSE 1409
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1385: LD_EXP 3
1389: PPUSH
1390: LD_STRING D1-Cyrus-2
1392: PPUSH
1393: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1397: LD_EXP 1
1401: PPUSH
1402: LD_STRING D1-JMM-3
1404: PPUSH
1405: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1409: LD_EXP 9
1413: PPUSH
1414: LD_STRING D1-Pow-3
1416: PPUSH
1417: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1421: LD_EXP 1
1425: PPUSH
1426: LD_STRING D1-JMM-4
1428: PPUSH
1429: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1433: LD_EXP 9
1437: PPUSH
1438: LD_STRING D1-Pow-4
1440: PPUSH
1441: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1445: LD_EXP 9
1449: PPUSH
1450: LD_STRING D1-Pow-4a
1452: PPUSH
1453: CALL_OW 94
// if Cyrus then
1457: LD_EXP 3
1461: IFFALSE 1475
// Say ( Cyrus , D1-Cyrus-4 ) ;
1463: LD_EXP 3
1467: PPUSH
1468: LD_STRING D1-Cyrus-4
1470: PPUSH
1471: CALL_OW 88
// if Bobby then
1475: LD_EXP 2
1479: IFFALSE 1517
// begin Say ( Bobby , D1-Bobby-4 ) ;
1481: LD_EXP 2
1485: PPUSH
1486: LD_STRING D1-Bobby-4
1488: PPUSH
1489: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1493: LD_EXP 4
1497: PPUSH
1498: LD_STRING D1-Lisa-4
1500: PPUSH
1501: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1505: LD_EXP 1
1509: PPUSH
1510: LD_STRING D1-JMM-5
1512: PPUSH
1513: CALL_OW 88
// end ; InGameOff ;
1517: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1521: LD_INT 22
1523: PUSH
1524: LD_INT 4
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PPUSH
1531: CALL_OW 69
1535: PUSH
1536: LD_EXP 6
1540: PUSH
1541: LD_EXP 7
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: DIFF
1550: PPUSH
1551: LD_INT 1
1553: PPUSH
1554: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1558: LD_STRING M1
1560: PPUSH
1561: CALL_OW 337
// SaveForQuickRestart ;
1565: CALL_OW 22
// end ;
1569: PPOPN 1
1571: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1572: LD_INT 7
1574: PPUSH
1575: LD_INT 22
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PPUSH
1585: CALL_OW 70
1589: PUSH
1590: LD_INT 0
1592: GREATER
1593: IFFALSE 2010
1595: GO 1597
1597: DISABLE
// begin InGameOn ;
1598: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1602: LD_INT 22
1604: PUSH
1605: LD_INT 1
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 21
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PPUSH
1626: CALL_OW 69
1630: PPUSH
1631: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1635: LD_INT 24
1637: PPUSH
1638: LD_INT 32
1640: PPUSH
1641: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1645: LD_EXP 5
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: LD_INT 1
1655: PPUSH
1656: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1660: LD_EXP 5
1664: PPUSH
1665: LD_INT 4
1667: PPUSH
1668: CALL_OW 336
// wait ( 0 0$1 ) ;
1672: LD_INT 35
1674: PPUSH
1675: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1679: LD_EXP 5
1683: PPUSH
1684: LD_INT 27
1686: PPUSH
1687: LD_INT 38
1689: PPUSH
1690: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1694: LD_EXP 5
1698: PPUSH
1699: LD_EXP 1
1703: PPUSH
1704: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1708: LD_INT 22
1710: PUSH
1711: LD_INT 1
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 21
1720: PUSH
1721: LD_INT 1
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PPUSH
1732: CALL_OW 69
1736: PUSH
1737: LD_EXP 5
1741: PUSH
1742: EMPTY
1743: LIST
1744: DIFF
1745: PPUSH
1746: LD_EXP 5
1750: PPUSH
1751: CALL_OW 119
// wait ( 0 0$1 ) ;
1755: LD_INT 35
1757: PPUSH
1758: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1762: LD_EXP 5
1766: PPUSH
1767: LD_STRING D2a-Khat-1
1769: PPUSH
1770: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1774: LD_EXP 1
1778: PPUSH
1779: LD_STRING D2a-JMM-1
1781: PPUSH
1782: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1786: LD_EXP 5
1790: PPUSH
1791: LD_STRING D2a-Khat-2
1793: PPUSH
1794: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1798: LD_EXP 1
1802: PPUSH
1803: LD_STRING D2a-JMM-2
1805: PPUSH
1806: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1810: LD_EXP 5
1814: PPUSH
1815: LD_STRING D2a-Khat-3
1817: PPUSH
1818: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1822: LD_EXP 1
1826: PPUSH
1827: LD_STRING D2a-JMM-3
1829: PPUSH
1830: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1834: LD_EXP 5
1838: PPUSH
1839: LD_STRING D2a-Khat-4
1841: PPUSH
1842: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1846: LD_EXP 1
1850: PPUSH
1851: LD_STRING D2a-JMM-4
1853: PPUSH
1854: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1858: LD_EXP 5
1862: PPUSH
1863: LD_STRING D2a-Khat-5
1865: PPUSH
1866: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1870: LD_EXP 1
1874: PPUSH
1875: LD_STRING D2a-JMM-5
1877: PPUSH
1878: CALL_OW 88
// InGameOff ;
1882: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1886: LD_INT 22
1888: PUSH
1889: LD_INT 1
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: LD_INT 21
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 3
1908: PUSH
1909: LD_INT 24
1911: PUSH
1912: LD_INT 800
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PPUSH
1928: CALL_OW 69
1932: PUSH
1933: LD_INT 0
1935: GREATER
1936: IFFALSE 2010
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1938: LD_EXP 5
1942: PPUSH
1943: LD_INT 22
1945: PUSH
1946: LD_INT 1
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 21
1955: PUSH
1956: LD_INT 1
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: LD_INT 3
1965: PUSH
1966: LD_INT 24
1968: PUSH
1969: LD_INT 1000
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PPUSH
1985: CALL_OW 69
1989: PUSH
1990: LD_INT 1
1992: ARRAY
1993: PPUSH
1994: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1998: LD_EXP 5
2002: PPUSH
2003: LD_STRING D2b-Khat-1
2005: PPUSH
2006: CALL_OW 88
// end ; end ;
2010: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
2011: LD_INT 15
2013: PPUSH
2014: LD_INT 22
2016: PUSH
2017: LD_INT 1
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL_OW 70
2028: PUSH
2029: LD_INT 0
2031: GREATER
2032: IFFALSE 3196
2034: GO 2036
2036: DISABLE
2037: LD_INT 0
2039: PPUSH
2040: PPUSH
2041: PPUSH
2042: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2043: LD_ADDR_VAR 0 2
2047: PUSH
2048: LD_INT 999
2050: PUSH
2051: LD_INT 999
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2061: LD_ADDR_VAR 0 4
2065: PUSH
2066: LD_INT 22
2068: PUSH
2069: LD_INT 1
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: PUSH
2076: LD_INT 21
2078: PUSH
2079: LD_INT 1
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: PPUSH
2090: CALL_OW 69
2094: PUSH
2095: LD_EXP 1
2099: PUSH
2100: LD_EXP 2
2104: PUSH
2105: LD_EXP 3
2109: PUSH
2110: LD_EXP 4
2114: PUSH
2115: LD_EXP 5
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: DIFF
2127: ST_TO_ADDR
// PrepareDeadSoldiers ;
2128: CALL 11501 0 0
// spotCorpses = 1 ;
2132: LD_ADDR_EXP 32
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2140: LD_INT 70
2142: PPUSH
2143: CALL_OW 67
// InGameOn ;
2147: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2151: LD_INT 23
2153: PPUSH
2154: LD_INT 12
2156: PPUSH
2157: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2161: LD_ADDR_VAR 0 3
2165: PUSH
2166: LD_VAR 0 2
2170: PUSH
2171: LD_INT 1
2173: ARRAY
2174: PUSH
2175: LD_INT 2
2177: ARRAY
2178: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2179: LD_ADDR_VAR 0 1
2183: PUSH
2184: LD_INT 22
2186: PUSH
2187: LD_INT 1
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_INT 21
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: PPUSH
2208: CALL_OW 69
2212: PUSH
2213: LD_EXP 1
2217: PUSH
2218: LD_EXP 5
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: DIFF
2227: PUSH
2228: FOR_IN
2229: IFFALSE 2280
// if IsOK ( i ) then
2231: LD_VAR 0 1
2235: PPUSH
2236: CALL_OW 302
2240: IFFALSE 2278
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2242: LD_ADDR_VAR 0 2
2246: PUSH
2247: LD_VAR 0 2
2251: PUSH
2252: LD_VAR 0 1
2256: PUSH
2257: LD_VAR 0 1
2261: PPUSH
2262: LD_INT 16
2264: PPUSH
2265: CALL_OW 299
2269: PUSH
2270: EMPTY
2271: LIST
2272: LIST
2273: PUSH
2274: EMPTY
2275: LIST
2276: ADD
2277: ST_TO_ADDR
2278: GO 2228
2280: POP
2281: POP
// for i = 2 to distanceTab do
2282: LD_ADDR_VAR 0 1
2286: PUSH
2287: DOUBLE
2288: LD_INT 2
2290: DEC
2291: ST_TO_ADDR
2292: LD_VAR 0 2
2296: PUSH
2297: FOR_TO
2298: IFFALSE 2344
// if distanceTab [ i ] [ 2 ] < min then
2300: LD_VAR 0 2
2304: PUSH
2305: LD_VAR 0 1
2309: ARRAY
2310: PUSH
2311: LD_INT 2
2313: ARRAY
2314: PUSH
2315: LD_VAR 0 3
2319: LESS
2320: IFFALSE 2342
// min = distanceTab [ i ] [ 2 ] ;
2322: LD_ADDR_VAR 0 3
2326: PUSH
2327: LD_VAR 0 2
2331: PUSH
2332: LD_VAR 0 1
2336: ARRAY
2337: PUSH
2338: LD_INT 2
2340: ARRAY
2341: ST_TO_ADDR
2342: GO 2297
2344: POP
2345: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2346: LD_ADDR_VAR 0 1
2350: PUSH
2351: LD_INT 22
2353: PUSH
2354: LD_INT 1
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 21
2363: PUSH
2364: LD_INT 1
2366: PUSH
2367: EMPTY
2368: LIST
2369: LIST
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PPUSH
2375: CALL_OW 69
2379: PUSH
2380: LD_EXP 1
2384: PUSH
2385: EMPTY
2386: LIST
2387: DIFF
2388: PUSH
2389: FOR_IN
2390: IFFALSE 2460
// begin ComMoveToArea ( i , DeadCutscene ) ;
2392: LD_VAR 0 1
2396: PPUSH
2397: LD_INT 28
2399: PPUSH
2400: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2404: LD_EXP 1
2408: PPUSH
2409: LD_INT 30
2411: PPUSH
2412: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2416: LD_VAR 0 1
2420: PPUSH
2421: LD_INT 23
2423: PPUSH
2424: LD_INT 11
2426: PPUSH
2427: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2431: LD_EXP 1
2435: PPUSH
2436: LD_INT 23
2438: PPUSH
2439: LD_INT 11
2441: PPUSH
2442: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2446: LD_EXP 34
2450: PPUSH
2451: LD_INT 250
2453: PPUSH
2454: CALL_OW 234
// end ;
2458: GO 2389
2460: POP
2461: POP
// for i = 2 to distanceTab do
2462: LD_ADDR_VAR 0 1
2466: PUSH
2467: DOUBLE
2468: LD_INT 2
2470: DEC
2471: ST_TO_ADDR
2472: LD_VAR 0 2
2476: PUSH
2477: FOR_TO
2478: IFFALSE 2864
// begin if distanceTab [ i ] [ 2 ] = min then
2480: LD_VAR 0 2
2484: PUSH
2485: LD_VAR 0 1
2489: ARRAY
2490: PUSH
2491: LD_INT 2
2493: ARRAY
2494: PUSH
2495: LD_VAR 0 3
2499: EQUAL
2500: IFFALSE 2862
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2502: LD_VAR 0 2
2506: PUSH
2507: LD_VAR 0 1
2511: ARRAY
2512: PUSH
2513: LD_INT 1
2515: ARRAY
2516: PUSH
2517: LD_EXP 2
2521: EQUAL
2522: IFFALSE 2536
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2524: LD_EXP 2
2528: PPUSH
2529: LD_STRING DCorpses-Bobby-1
2531: PPUSH
2532: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2536: LD_VAR 0 2
2540: PUSH
2541: LD_VAR 0 1
2545: ARRAY
2546: PUSH
2547: LD_INT 1
2549: ARRAY
2550: PUSH
2551: LD_EXP 3
2555: EQUAL
2556: IFFALSE 2570
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2558: LD_EXP 3
2562: PPUSH
2563: LD_STRING DCorpses-Cyrus-1
2565: PPUSH
2566: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2570: LD_VAR 0 2
2574: PUSH
2575: LD_VAR 0 1
2579: ARRAY
2580: PUSH
2581: LD_INT 1
2583: ARRAY
2584: PUSH
2585: LD_EXP 4
2589: EQUAL
2590: IFFALSE 2604
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2592: LD_EXP 4
2596: PPUSH
2597: LD_STRING DCorpses-Lisa-1
2599: PPUSH
2600: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2604: LD_VAR 0 2
2608: PUSH
2609: LD_VAR 0 1
2613: ARRAY
2614: PUSH
2615: LD_INT 1
2617: ARRAY
2618: PUSH
2619: LD_VAR 0 4
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: EQUAL
2628: PUSH
2629: LD_VAR 0 4
2633: PUSH
2634: LD_INT 1
2636: ARRAY
2637: PPUSH
2638: CALL_OW 258
2642: PUSH
2643: LD_INT 1
2645: EQUAL
2646: AND
2647: IFFALSE 2665
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2649: LD_VAR 0 4
2653: PUSH
2654: LD_INT 1
2656: ARRAY
2657: PPUSH
2658: LD_STRING DCorpses-Sol1-1
2660: PPUSH
2661: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2665: LD_VAR 0 2
2669: PUSH
2670: LD_VAR 0 1
2674: ARRAY
2675: PUSH
2676: LD_INT 1
2678: ARRAY
2679: PUSH
2680: LD_VAR 0 4
2684: PUSH
2685: LD_INT 1
2687: ARRAY
2688: EQUAL
2689: PUSH
2690: LD_VAR 0 4
2694: PUSH
2695: LD_INT 1
2697: ARRAY
2698: PPUSH
2699: CALL_OW 258
2703: PUSH
2704: LD_INT 2
2706: EQUAL
2707: AND
2708: IFFALSE 2726
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2710: LD_VAR 0 4
2714: PUSH
2715: LD_INT 1
2717: ARRAY
2718: PPUSH
2719: LD_STRING DCorpses-FSol1-1
2721: PPUSH
2722: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2726: LD_VAR 0 2
2730: PUSH
2731: LD_VAR 0 1
2735: ARRAY
2736: PUSH
2737: LD_INT 1
2739: ARRAY
2740: PUSH
2741: LD_VAR 0 4
2745: PUSH
2746: LD_INT 2
2748: ARRAY
2749: EQUAL
2750: PUSH
2751: LD_VAR 0 4
2755: PUSH
2756: LD_INT 2
2758: ARRAY
2759: PPUSH
2760: CALL_OW 258
2764: PUSH
2765: LD_INT 1
2767: EQUAL
2768: AND
2769: IFFALSE 2787
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2771: LD_VAR 0 4
2775: PUSH
2776: LD_INT 2
2778: ARRAY
2779: PPUSH
2780: LD_STRING DCorpses-Sol1-1
2782: PPUSH
2783: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2787: LD_VAR 0 2
2791: PUSH
2792: LD_VAR 0 1
2796: ARRAY
2797: PUSH
2798: LD_INT 1
2800: ARRAY
2801: PUSH
2802: LD_VAR 0 4
2806: PUSH
2807: LD_INT 2
2809: ARRAY
2810: EQUAL
2811: PUSH
2812: LD_VAR 0 4
2816: PUSH
2817: LD_INT 2
2819: ARRAY
2820: PPUSH
2821: CALL_OW 258
2825: PUSH
2826: LD_INT 2
2828: EQUAL
2829: AND
2830: IFFALSE 2848
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2832: LD_VAR 0 4
2836: PUSH
2837: LD_INT 2
2839: ARRAY
2840: PPUSH
2841: LD_STRING DCorpses-FSol1-1
2843: PPUSH
2844: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2848: LD_EXP 34
2852: PPUSH
2853: LD_INT 150
2855: PPUSH
2856: CALL_OW 234
// break ;
2860: GO 2864
// end ; end ;
2862: GO 2477
2864: POP
2865: POP
// repeat wait ( 0 0$1 ) ;
2866: LD_INT 35
2868: PPUSH
2869: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2873: LD_ADDR_VAR 0 1
2877: PUSH
2878: LD_INT 22
2880: PUSH
2881: LD_INT 1
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PUSH
2888: LD_INT 21
2890: PUSH
2891: LD_INT 1
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 69
2906: PUSH
2907: LD_EXP 1
2911: PUSH
2912: EMPTY
2913: LIST
2914: DIFF
2915: PUSH
2916: FOR_IN
2917: IFFALSE 2987
// begin ComMoveToArea ( i , DeadCutscene ) ;
2919: LD_VAR 0 1
2923: PPUSH
2924: LD_INT 28
2926: PPUSH
2927: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2931: LD_EXP 1
2935: PPUSH
2936: LD_INT 30
2938: PPUSH
2939: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2943: LD_VAR 0 1
2947: PPUSH
2948: LD_INT 23
2950: PPUSH
2951: LD_INT 11
2953: PPUSH
2954: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2958: LD_EXP 1
2962: PPUSH
2963: LD_INT 23
2965: PPUSH
2966: LD_INT 11
2968: PPUSH
2969: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2973: LD_EXP 34
2977: PPUSH
2978: LD_INT 250
2980: PPUSH
2981: CALL_OW 234
// end ;
2985: GO 2916
2987: POP
2988: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2989: LD_EXP 1
2993: PPUSH
2994: LD_INT 30
2996: PPUSH
2997: CALL_OW 308
3001: IFFALSE 2866
// wait ( 0 0$1 ) ;
3003: LD_INT 35
3005: PPUSH
3006: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3010: LD_EXP 1
3014: PPUSH
3015: LD_STRING DCorpses-JMM-1
3017: PPUSH
3018: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3022: LD_EXP 34
3026: PPUSH
3027: LD_INT 100
3029: PPUSH
3030: CALL_OW 234
// if IsOK ( Khatam ) then
3034: LD_EXP 5
3038: PPUSH
3039: CALL_OW 302
3043: IFFALSE 3180
// begin repeat wait ( 0 0$1 ) ;
3045: LD_INT 35
3047: PPUSH
3048: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3052: LD_EXP 5
3056: PPUSH
3057: LD_EXP 34
3061: PPUSH
3062: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3066: LD_EXP 5
3070: PPUSH
3071: LD_EXP 34
3075: PPUSH
3076: CALL_OW 296
3080: PUSH
3081: LD_INT 2
3083: LESS
3084: IFFALSE 3045
// spotCorpses = 0 ;
3086: LD_ADDR_EXP 32
3090: PUSH
3091: LD_INT 0
3093: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3094: LD_EXP 34
3098: PPUSH
3099: LD_INT 10
3101: PPUSH
3102: CALL_OW 234
// wait ( 0 0$3 ) ;
3106: LD_INT 105
3108: PPUSH
3109: CALL_OW 67
// KillUnit ( DyingSold ) ;
3113: LD_EXP 34
3117: PPUSH
3118: CALL_OW 66
// wait ( 0 0$1 ) ;
3122: LD_INT 35
3124: PPUSH
3125: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3129: LD_EXP 1
3133: PUSH
3134: LD_EXP 5
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: PPUSH
3143: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3147: LD_EXP 5
3151: PPUSH
3152: LD_EXP 1
3156: PPUSH
3157: CALL_OW 119
// wait ( 0 0$1 ) ;
3161: LD_INT 35
3163: PPUSH
3164: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3168: LD_EXP 5
3172: PPUSH
3173: LD_STRING DCorpses-Khat-1
3175: PPUSH
3176: CALL_OW 88
// end ; InGameOff ;
3180: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3184: LD_EXP 1
3188: PPUSH
3189: LD_STRING DCorpses-JMM-2
3191: PPUSH
3192: CALL_OW 88
// end ;
3196: PPOPN 4
3198: END
// every 0 0$1 trigger spotCorpses = 1 do
3199: LD_EXP 32
3203: PUSH
3204: LD_INT 1
3206: EQUAL
3207: IFFALSE 3225
3209: GO 3211
3211: DISABLE
// begin enable ;
3212: ENABLE
// SetLives ( DyingSold , 10 ) ;
3213: LD_EXP 34
3217: PPUSH
3218: LD_INT 10
3220: PPUSH
3221: CALL_OW 234
// end ;
3225: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 15 ) do var i ;
3226: LD_INT 8
3228: PPUSH
3229: LD_INT 22
3231: PUSH
3232: LD_INT 1
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PPUSH
3239: CALL_OW 70
3243: PUSH
3244: LD_INT 0
3246: GREATER
3247: PUSH
3248: LD_INT 22
3250: PUSH
3251: LD_INT 1
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PPUSH
3258: CALL_OW 69
3262: PPUSH
3263: LD_EXP 7
3267: PPUSH
3268: CALL_OW 74
3272: PPUSH
3273: LD_EXP 7
3277: PPUSH
3278: CALL_OW 296
3282: PUSH
3283: LD_INT 15
3285: LESS
3286: OR
3287: IFFALSE 3511
3289: GO 3291
3291: DISABLE
3292: LD_INT 0
3294: PPUSH
// begin InGameOn ;
3295: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3299: LD_EXP 7
3303: PPUSH
3304: LD_INT 250
3306: PPUSH
3307: CALL_OW 234
// SetLives ( Brian , 750 ) ;
3311: LD_EXP 6
3315: PPUSH
3316: LD_INT 750
3318: PPUSH
3319: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3323: LD_INT 3
3325: PPUSH
3326: LD_INT 4
3328: PPUSH
3329: LD_INT 2
3331: PPUSH
3332: LD_INT 1
3334: PPUSH
3335: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3339: LD_EXP 6
3343: PUSH
3344: LD_EXP 7
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PPUSH
3353: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3357: LD_ADDR_VAR 0 1
3361: PUSH
3362: LD_INT 9
3364: PPUSH
3365: LD_INT 22
3367: PUSH
3368: LD_INT 3
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: PPUSH
3375: CALL_OW 70
3379: PUSH
3380: FOR_IN
3381: IFFALSE 3394
// ComFree ( i ) ;
3383: LD_VAR 0 1
3387: PPUSH
3388: CALL_OW 139
3392: GO 3380
3394: POP
3395: POP
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3396: LD_ADDR_VAR 0 1
3400: PUSH
3401: LD_INT 9
3403: PPUSH
3404: LD_INT 22
3406: PUSH
3407: LD_INT 3
3409: PUSH
3410: EMPTY
3411: LIST
3412: LIST
3413: PPUSH
3414: CALL_OW 70
3418: PUSH
3419: FOR_IN
3420: IFFALSE 3438
// AddComAttackUnit ( i , Brian ) ;
3422: LD_VAR 0 1
3426: PPUSH
3427: LD_EXP 6
3431: PPUSH
3432: CALL_OW 175
3436: GO 3419
3438: POP
3439: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3440: LD_ADDR_VAR 0 1
3444: PUSH
3445: LD_INT 22
3447: PUSH
3448: LD_INT 4
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PPUSH
3455: CALL_OW 69
3459: PUSH
3460: FOR_IN
3461: IFFALSE 3474
// ComFree ( i ) ;
3463: LD_VAR 0 1
3467: PPUSH
3468: CALL_OW 139
3472: GO 3460
3474: POP
3475: POP
// wait ( 0 0$1 ) ;
3476: LD_INT 35
3478: PPUSH
3479: CALL_OW 67
// InGameOff ;
3483: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3487: LD_EXP 6
3491: PPUSH
3492: LD_STRING DF-Sol1-1
3494: PPUSH
3495: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3499: LD_EXP 1
3503: PPUSH
3504: LD_STRING DF-JMM-1
3506: PPUSH
3507: CALL_OW 88
// end ;
3511: PPOPN 1
3513: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3514: LD_INT 19
3516: PPUSH
3517: LD_INT 22
3519: PUSH
3520: LD_INT 3
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 70
3531: PUSH
3532: LD_INT 0
3534: EQUAL
3535: IFFALSE 3648
3537: GO 3539
3539: DISABLE
// begin if not IsDead ( Brian ) then
3540: LD_EXP 6
3544: PPUSH
3545: CALL_OW 301
3549: NOT
3550: IFFALSE 3564
// SetSide ( Brian , 1 ) ;
3552: LD_EXP 6
3556: PPUSH
3557: LD_INT 1
3559: PPUSH
3560: CALL_OW 235
// if not IsDead ( Jerry ) then
3564: LD_EXP 7
3568: PPUSH
3569: CALL_OW 301
3573: NOT
3574: IFFALSE 3588
// SetSide ( Jerry , 1 ) ;
3576: LD_EXP 7
3580: PPUSH
3581: LD_INT 1
3583: PPUSH
3584: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3588: LD_INT 22
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PUSH
3598: LD_INT 25
3600: PUSH
3601: LD_INT 4
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: PPUSH
3612: CALL_OW 69
3616: PUSH
3617: LD_INT 0
3619: GREATER
3620: IFFALSE 3636
// begin Say ( JMM , DFa-JMM-1 ) ;
3622: LD_EXP 1
3626: PPUSH
3627: LD_STRING DFa-JMM-1
3629: PPUSH
3630: CALL_OW 88
// end else
3634: GO 3648
// begin Say ( JMM , DFa-JMM-1a ) ;
3636: LD_EXP 1
3640: PPUSH
3641: LD_STRING DFa-JMM-1a
3643: PPUSH
3644: CALL_OW 88
// end ; end ;
3648: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3649: LD_INT 19
3651: PPUSH
3652: LD_INT 22
3654: PUSH
3655: LD_INT 3
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: PPUSH
3662: CALL_OW 70
3666: PUSH
3667: LD_INT 0
3669: EQUAL
3670: PUSH
3671: LD_EXP 6
3675: PPUSH
3676: CALL_OW 302
3680: NOT
3681: AND
3682: IFFALSE 3759
3684: GO 3686
3686: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3687: LD_INT 35
3689: PPUSH
3690: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3694: LD_EXP 6
3698: PPUSH
3699: CALL_OW 256
3703: PUSH
3704: LD_INT 250
3706: GREATER
3707: IFFALSE 3687
// Say ( Brian , DFb-Sol1-1 ) ;
3709: LD_EXP 6
3713: PPUSH
3714: LD_STRING DFb-Sol1-1
3716: PPUSH
3717: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3721: LD_EXP 6
3725: PPUSH
3726: LD_INT 78
3728: PPUSH
3729: LD_INT 74
3731: PPUSH
3732: CALL_OW 111
// if IsDead ( Jerry ) then
3736: LD_EXP 7
3740: PPUSH
3741: CALL_OW 301
3745: IFFALSE 3759
// Say ( Brian , DFb-Sol1-1a ) end ;
3747: LD_EXP 6
3751: PPUSH
3752: LD_STRING DFb-Sol1-1a
3754: PPUSH
3755: CALL_OW 88
3759: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3760: LD_INT 22
3762: PUSH
3763: LD_INT 1
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: PUSH
3770: LD_INT 21
3772: PUSH
3773: LD_INT 2
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PPUSH
3784: CALL_OW 69
3788: PUSH
3789: LD_INT 0
3791: EQUAL
3792: IFFALSE 3880
3794: GO 3796
3796: DISABLE
3797: LD_INT 0
3799: PPUSH
// begin enable ;
3800: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3801: LD_ADDR_VAR 0 1
3805: PUSH
3806: LD_INT 22
3808: PUSH
3809: LD_INT 3
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: PUSH
3816: LD_INT 21
3818: PUSH
3819: LD_INT 3
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: PUSH
3826: LD_INT 30
3828: PUSH
3829: LD_INT 31
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: LIST
3840: PPUSH
3841: CALL_OW 69
3845: PUSH
3846: FOR_IN
3847: IFFALSE 3878
// begin if See ( 1 , i ) then
3849: LD_INT 1
3851: PPUSH
3852: LD_VAR 0 1
3856: PPUSH
3857: CALL_OW 292
3861: IFFALSE 3876
// begin disable ;
3863: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3864: LD_EXP 1
3868: PPUSH
3869: LD_STRING DX1-JMM-1
3871: PPUSH
3872: CALL_OW 88
// end ; end ;
3876: GO 3846
3878: POP
3879: POP
// end ;
3880: PPOPN 1
3882: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3883: LD_INT 1
3885: PPUSH
3886: LD_INT 11
3888: PPUSH
3889: CALL_OW 294
3893: IFFALSE 4307
3895: GO 3897
3897: DISABLE
3898: LD_INT 0
3900: PPUSH
3901: PPUSH
// begin DialogueOn ;
3902: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3906: LD_INT 11
3908: PPUSH
3909: LD_INT 22
3911: PUSH
3912: LD_INT 3
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: PUSH
3919: LD_INT 21
3921: PUSH
3922: LD_INT 1
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: PUSH
3929: EMPTY
3930: LIST
3931: LIST
3932: PPUSH
3933: CALL_OW 70
3937: PUSH
3938: LD_INT 1
3940: ARRAY
3941: PPUSH
3942: LD_STRING DX3-Rus1-1
3944: PPUSH
3945: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3949: LD_EXP 1
3953: PPUSH
3954: LD_STRING DX3-JMM-1
3956: PPUSH
3957: CALL_OW 88
// DialogueOff ;
3961: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3965: LD_ADDR_VAR 0 1
3969: PUSH
3970: LD_INT 11
3972: PPUSH
3973: LD_INT 22
3975: PUSH
3976: LD_INT 3
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: PUSH
3983: LD_INT 21
3985: PUSH
3986: LD_INT 1
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PUSH
3993: EMPTY
3994: LIST
3995: LIST
3996: PPUSH
3997: CALL_OW 70
4001: PUSH
4002: FOR_IN
4003: IFFALSE 4023
// southBaseDefenders = southBaseDefenders ^ i ;
4005: LD_ADDR_EXP 25
4009: PUSH
4010: LD_EXP 25
4014: PUSH
4015: LD_VAR 0 1
4019: ADD
4020: ST_TO_ADDR
4021: GO 4002
4023: POP
4024: POP
// wait ( [ 0 0$13 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
4025: LD_INT 455
4027: PUSH
4028: LD_INT 420
4030: PUSH
4031: LD_INT 315
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: LIST
4038: PUSH
4039: LD_OWVAR 67
4043: ARRAY
4044: PPUSH
4045: CALL_OW 67
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ) ;
4049: LD_INT 22
4051: PUSH
4052: LD_INT 3
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PUSH
4059: LD_INT 21
4061: PUSH
4062: LD_INT 1
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PUSH
4069: LD_INT 25
4071: PUSH
4072: LD_INT 3
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: PPUSH
4084: CALL_OW 69
4088: PPUSH
4089: CALL_OW 122
// wait ( 0 0$1 ) ;
4093: LD_INT 35
4095: PPUSH
4096: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
4100: LD_INT 35
4102: PPUSH
4103: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
4107: LD_ADDR_VAR 0 1
4111: PUSH
4112: LD_INT 22
4114: PUSH
4115: LD_INT 3
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PUSH
4122: LD_INT 21
4124: PUSH
4125: LD_INT 2
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: PUSH
4132: LD_INT 58
4134: PUSH
4135: EMPTY
4136: LIST
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: LIST
4142: PPUSH
4143: CALL_OW 69
4147: PUSH
4148: FOR_IN
4149: IFFALSE 4219
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
4151: LD_ADDR_VAR 0 2
4155: PUSH
4156: LD_INT 22
4158: PUSH
4159: LD_INT 3
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: PUSH
4166: LD_INT 21
4168: PUSH
4169: LD_INT 1
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PUSH
4176: LD_INT 25
4178: PUSH
4179: LD_INT 3
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: PUSH
4186: EMPTY
4187: LIST
4188: LIST
4189: LIST
4190: PPUSH
4191: CALL_OW 69
4195: PUSH
4196: FOR_IN
4197: IFFALSE 4215
// begin ComEnterUnit ( j , i ) ;
4199: LD_VAR 0 2
4203: PPUSH
4204: LD_VAR 0 1
4208: PPUSH
4209: CALL_OW 120
// end ;
4213: GO 4196
4215: POP
4216: POP
// end ;
4217: GO 4148
4219: POP
4220: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
4221: LD_INT 22
4223: PUSH
4224: LD_INT 3
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: LD_INT 21
4233: PUSH
4234: LD_INT 2
4236: PUSH
4237: EMPTY
4238: LIST
4239: LIST
4240: PUSH
4241: LD_INT 58
4243: PUSH
4244: EMPTY
4245: LIST
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: LIST
4251: PPUSH
4252: CALL_OW 69
4256: PUSH
4257: LD_INT 0
4259: EQUAL
4260: PUSH
4261: LD_INT 22
4263: PUSH
4264: LD_INT 3
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PUSH
4271: LD_INT 21
4273: PUSH
4274: LD_INT 1
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: PUSH
4281: LD_INT 25
4283: PUSH
4284: LD_INT 3
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: LIST
4295: PPUSH
4296: CALL_OW 69
4300: PUSH
4301: LD_INT 0
4303: EQUAL
4304: OR
4305: IFFALSE 4100
// end ;
4307: PPOPN 2
4309: END
// every 0 0$1 do var i , tmp ;
4310: GO 4312
4312: DISABLE
4313: LD_INT 0
4315: PPUSH
4316: PPUSH
// begin enable ;
4317: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
4318: LD_ADDR_VAR 0 2
4322: PUSH
4323: LD_INT 22
4325: PUSH
4326: LD_INT 1
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PUSH
4333: LD_INT 21
4335: PUSH
4336: LD_INT 1
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: PPUSH
4347: CALL_OW 69
4351: ST_TO_ADDR
// for i in tmp do
4352: LD_ADDR_VAR 0 1
4356: PUSH
4357: LD_VAR 0 2
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4485
// begin if GetDistUnits ( i , vehicle1 ) < 4 or GetDistUnits ( i , vehicle2 ) < 4 then
4365: LD_VAR 0 1
4369: PPUSH
4370: LD_INT 5
4372: PPUSH
4373: CALL_OW 296
4377: PUSH
4378: LD_INT 4
4380: LESS
4381: PUSH
4382: LD_VAR 0 1
4386: PPUSH
4387: LD_INT 4
4389: PPUSH
4390: CALL_OW 296
4394: PUSH
4395: LD_INT 4
4397: LESS
4398: OR
4399: IFFALSE 4483
// begin disable ;
4401: DISABLE
// CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4402: LD_INT 5
4404: PUSH
4405: LD_INT 4
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PPUSH
4412: CALL_OW 85
// if IsOK ( Bobby ) then
4416: LD_EXP 2
4420: PPUSH
4421: CALL_OW 302
4425: IFFALSE 4462
// begin DialogueOn ;
4427: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4431: LD_EXP 2
4435: PPUSH
4436: LD_STRING DX2-Bobby-1
4438: PPUSH
4439: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4443: LD_EXP 1
4447: PPUSH
4448: LD_STRING DX2-JMM-1a
4450: PPUSH
4451: CALL_OW 88
// DialogueOff ;
4455: CALL_OW 7
// disable ;
4459: DISABLE
// end else
4460: GO 4483
// begin DialogueOn ;
4462: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4466: LD_EXP 1
4470: PPUSH
4471: LD_STRING DX2-JMM-1
4473: PPUSH
4474: CALL_OW 88
// DialogueOff ;
4478: CALL_OW 7
// disable ;
4482: DISABLE
// end ; end ; end ;
4483: GO 4362
4485: POP
4486: POP
// end ;
4487: PPOPN 2
4489: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4490: LD_INT 22
4492: PUSH
4493: LD_INT 1
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: PUSH
4500: LD_INT 23
4502: PUSH
4503: LD_INT 3
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: PUSH
4510: LD_INT 21
4512: PUSH
4513: LD_INT 2
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: PUSH
4520: LD_INT 34
4522: PUSH
4523: LD_INT 42
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: PUSH
4530: EMPTY
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 69
4540: IFFALSE 4961
4542: GO 4544
4544: DISABLE
4545: LD_INT 0
4547: PPUSH
4548: PPUSH
4549: PPUSH
4550: PPUSH
4551: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4552: LD_ADDR_VAR 0 1
4556: PUSH
4557: LD_INT 22
4559: PUSH
4560: LD_INT 1
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: PUSH
4567: LD_INT 23
4569: PUSH
4570: LD_INT 3
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: PUSH
4577: LD_INT 21
4579: PUSH
4580: LD_INT 2
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: PUSH
4587: LD_INT 34
4589: PUSH
4590: LD_INT 42
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: PPUSH
4603: CALL_OW 69
4607: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4608: LD_ADDR_VAR 0 3
4612: PUSH
4613: LD_INT 22
4615: PUSH
4616: LD_INT 1
4618: PUSH
4619: EMPTY
4620: LIST
4621: LIST
4622: PUSH
4623: LD_INT 21
4625: PUSH
4626: LD_INT 1
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: PUSH
4633: LD_INT 26
4635: PUSH
4636: LD_INT 1
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: LIST
4647: PPUSH
4648: CALL_OW 69
4652: PUSH
4653: LD_EXP 1
4657: PUSH
4658: LD_EXP 3
4662: PUSH
4663: LD_EXP 2
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: LIST
4672: DIFF
4673: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4674: LD_ADDR_VAR 0 4
4678: PUSH
4679: LD_INT 22
4681: PUSH
4682: LD_INT 1
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PUSH
4689: LD_INT 21
4691: PUSH
4692: LD_INT 1
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: PUSH
4699: LD_INT 26
4701: PUSH
4702: LD_INT 2
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: LIST
4713: PPUSH
4714: CALL_OW 69
4718: PUSH
4719: LD_EXP 4
4723: PUSH
4724: EMPTY
4725: LIST
4726: DIFF
4727: ST_TO_ADDR
// if not tmp then
4728: LD_VAR 0 1
4732: NOT
4733: IFFALSE 4737
// exit ;
4735: GO 4961
// DialogueOn ;
4737: CALL_OW 6
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4741: LD_ADDR_VAR 0 2
4745: PUSH
4746: LD_VAR 0 1
4750: PUSH
4751: LD_INT 1
4753: ARRAY
4754: PPUSH
4755: CALL_OW 311
4759: ST_TO_ADDR
// if not speaker then
4760: LD_VAR 0 2
4764: NOT
4765: IFFALSE 4769
// exit ;
4767: GO 4961
// if speaker = JMM then
4769: LD_VAR 0 2
4773: PUSH
4774: LD_EXP 1
4778: EQUAL
4779: IFFALSE 4813
// begin if Lisa then
4781: LD_EXP 4
4785: IFFALSE 4799
// Say ( Lisa , DX2b-Lisa-1 ) ;
4787: LD_EXP 4
4791: PPUSH
4792: LD_STRING DX2b-Lisa-1
4794: PPUSH
4795: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4799: LD_EXP 1
4803: PPUSH
4804: LD_STRING DX2b-JMM-1
4806: PPUSH
4807: CALL_OW 88
// end else
4811: GO 4957
// begin Say ( JMM , DX2a-JMM-1 ) ;
4813: LD_EXP 1
4817: PPUSH
4818: LD_STRING DX2a-JMM-1
4820: PPUSH
4821: CALL_OW 88
// if speaker = Bobby then
4825: LD_VAR 0 2
4829: PUSH
4830: LD_EXP 2
4834: EQUAL
4835: IFFALSE 4849
// Say ( Bobby , DX2a-Bobby-1 ) ;
4837: LD_EXP 2
4841: PPUSH
4842: LD_STRING DX2a-Bobby-1
4844: PPUSH
4845: CALL_OW 88
// if speaker = Cyrus then
4849: LD_VAR 0 2
4853: PUSH
4854: LD_EXP 3
4858: EQUAL
4859: IFFALSE 4873
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4861: LD_EXP 3
4865: PPUSH
4866: LD_STRING DX2a-Cyrus-1
4868: PPUSH
4869: CALL_OW 88
// if speaker = Lisa then
4873: LD_VAR 0 2
4877: PUSH
4878: LD_EXP 4
4882: EQUAL
4883: IFFALSE 4897
// Say ( Lisa , DX2a-Lisa-1 ) ;
4885: LD_EXP 4
4889: PPUSH
4890: LD_STRING DX2a-Lisa-1
4892: PPUSH
4893: CALL_OW 88
// if speaker in temp1 then
4897: LD_VAR 0 2
4901: PUSH
4902: LD_VAR 0 3
4906: IN
4907: IFFALSE 4921
// Say ( speaker , DX2a-Sol1-1 ) ;
4909: LD_VAR 0 2
4913: PPUSH
4914: LD_STRING DX2a-Sol1-1
4916: PPUSH
4917: CALL_OW 88
// if speaker in temp2 then
4921: LD_VAR 0 2
4925: PUSH
4926: LD_VAR 0 4
4930: IN
4931: IFFALSE 4945
// Say ( speaker , DX2a-FSol1-1 ) ;
4933: LD_VAR 0 2
4937: PPUSH
4938: LD_STRING DX2a-FSol1-1
4940: PPUSH
4941: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4945: LD_EXP 1
4949: PPUSH
4950: LD_STRING DX2a-JMM-2
4952: PPUSH
4953: CALL_OW 88
// end ; DialogueOff ;
4957: CALL_OW 7
// end ;
4961: PPOPN 5
4963: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4964: LD_INT 1
4966: PPUSH
4967: CALL_OW 255
4971: PUSH
4972: LD_INT 1
4974: EQUAL
4975: PUSH
4976: LD_INT 10
4978: PPUSH
4979: CALL_OW 255
4983: PUSH
4984: LD_INT 1
4986: EQUAL
4987: OR
4988: IFFALSE 5048
4990: GO 4992
4992: DISABLE
// begin DialogueOn ;
4993: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4997: LD_EXP 1
5001: PPUSH
5002: LD_STRING D3-JMM-1
5004: PPUSH
5005: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
5009: LD_EXP 9
5013: PPUSH
5014: LD_STRING D3-Pow-1
5016: PPUSH
5017: CALL_OW 94
// if IsOK ( Cyrus ) then
5021: LD_EXP 3
5025: PPUSH
5026: CALL_OW 302
5030: IFFALSE 5044
// Say ( Cyrus , D3-Cyrus-1 ) ;
5032: LD_EXP 3
5036: PPUSH
5037: LD_STRING D3-Cyrus-1
5039: PPUSH
5040: CALL_OW 88
// DialogueOff ;
5044: CALL_OW 7
// end ;
5048: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < 2 do var temp , i ;
5049: LD_INT 1
5051: PPUSH
5052: CALL_OW 255
5056: PUSH
5057: LD_INT 1
5059: EQUAL
5060: PUSH
5061: LD_INT 10
5063: PPUSH
5064: CALL_OW 255
5068: PUSH
5069: LD_INT 1
5071: EQUAL
5072: AND
5073: PUSH
5074: LD_INT 22
5076: PUSH
5077: LD_INT 3
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PUSH
5084: LD_INT 21
5086: PUSH
5087: LD_INT 1
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: PPUSH
5098: CALL_OW 69
5102: PUSH
5103: LD_INT 2
5105: LESS
5106: AND
5107: IFFALSE 6359
5109: GO 5111
5111: DISABLE
5112: LD_INT 0
5114: PPUSH
5115: PPUSH
// begin wait ( 0 0$03 ) ;
5116: LD_INT 105
5118: PPUSH
5119: CALL_OW 67
// DialogueOn ;
5123: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5127: LD_EXP 1
5131: PPUSH
5132: LD_STRING D3a-JMM-1
5134: PPUSH
5135: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5139: LD_EXP 9
5143: PPUSH
5144: LD_STRING D3a-Pow-1
5146: PPUSH
5147: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5151: LD_EXP 1
5155: PPUSH
5156: LD_STRING D3a-JMM-2
5158: PPUSH
5159: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5163: LD_EXP 9
5167: PPUSH
5168: LD_STRING D3a-Pow-2
5170: PPUSH
5171: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5175: LD_EXP 1
5179: PPUSH
5180: LD_STRING D3a-JMM-3
5182: PPUSH
5183: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5187: LD_EXP 9
5191: PPUSH
5192: LD_STRING D3a-Pow-3
5194: PPUSH
5195: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5199: LD_EXP 1
5203: PPUSH
5204: LD_STRING D3a-JMM-4
5206: PPUSH
5207: CALL_OW 88
// DialogueOff ;
5211: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5215: LD_STRING M2
5217: PPUSH
5218: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5222: LD_EXP 1
5226: PPUSH
5227: LD_STRING D3b-JMM-1
5229: PPUSH
5230: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5234: LD_INT 35
5236: PPUSH
5237: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
5241: LD_INT 22
5243: PPUSH
5244: LD_INT 22
5246: PUSH
5247: LD_INT 1
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: PUSH
5254: LD_INT 25
5256: PUSH
5257: LD_INT 2
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: PUSH
5264: EMPTY
5265: LIST
5266: LIST
5267: PPUSH
5268: CALL_OW 70
5272: IFFALSE 5234
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5274: LD_ADDR_VAR 0 1
5278: PUSH
5279: LD_INT 22
5281: PUSH
5282: LD_INT 1
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: PUSH
5289: LD_INT 23
5291: PUSH
5292: LD_INT 1
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PUSH
5299: LD_INT 25
5301: PUSH
5302: LD_INT 2
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: LD_INT 50
5311: PUSH
5312: EMPTY
5313: LIST
5314: PUSH
5315: LD_INT 56
5317: PUSH
5318: EMPTY
5319: LIST
5320: PUSH
5321: EMPTY
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: PPUSH
5328: CALL_OW 69
5332: PUSH
5333: LD_EXP 1
5337: PUSH
5338: LD_EXP 5
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: DIFF
5347: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5348: LD_INT 35
5350: PPUSH
5351: CALL_OW 67
// until temp > 0 ;
5355: LD_VAR 0 1
5359: PUSH
5360: LD_INT 0
5362: GREATER
5363: IFFALSE 5274
// wait ( 0 0$5 ) ;
5365: LD_INT 175
5367: PPUSH
5368: CALL_OW 67
// PrepareRussianHeroes ;
5372: CALL 11658 0 0
// InGameOn ;
5376: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5380: LD_EXP 8
5384: PPUSH
5385: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5389: LD_EXP 1
5393: PUSH
5394: LD_VAR 0 1
5398: PUSH
5399: LD_INT 1
5401: ARRAY
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PPUSH
5407: LD_EXP 8
5411: PPUSH
5412: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5416: LD_EXP 8
5420: PPUSH
5421: LD_VAR 0 1
5425: PUSH
5426: LD_INT 1
5428: ARRAY
5429: PPUSH
5430: CALL_OW 119
// Wait ( 0 0$02 ) ;
5434: LD_INT 70
5436: PPUSH
5437: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5441: LD_EXP 8
5445: PPUSH
5446: LD_STRING D4-Mikh-1
5448: PPUSH
5449: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5453: LD_VAR 0 1
5457: PUSH
5458: LD_INT 1
5460: ARRAY
5461: PPUSH
5462: CALL_OW 258
5466: PUSH
5467: LD_INT 1
5469: EQUAL
5470: IFFALSE 5488
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5472: LD_VAR 0 1
5476: PUSH
5477: LD_INT 1
5479: ARRAY
5480: PPUSH
5481: LD_STRING D4-Sol1-1
5483: PPUSH
5484: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5488: LD_VAR 0 1
5492: PUSH
5493: LD_INT 1
5495: ARRAY
5496: PPUSH
5497: CALL_OW 258
5501: PUSH
5502: LD_INT 2
5504: EQUAL
5505: IFFALSE 5523
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5507: LD_VAR 0 1
5511: PUSH
5512: LD_INT 1
5514: ARRAY
5515: PPUSH
5516: LD_STRING D4-FSol1-1
5518: PPUSH
5519: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5523: LD_EXP 8
5527: PPUSH
5528: LD_STRING D4-Mikh-2
5530: PPUSH
5531: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5535: LD_VAR 0 1
5539: PUSH
5540: LD_INT 1
5542: ARRAY
5543: PPUSH
5544: CALL_OW 258
5548: PUSH
5549: LD_INT 1
5551: EQUAL
5552: IFFALSE 5570
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5554: LD_VAR 0 1
5558: PUSH
5559: LD_INT 1
5561: ARRAY
5562: PPUSH
5563: LD_STRING D4-Sol1-2
5565: PPUSH
5566: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5570: LD_VAR 0 1
5574: PUSH
5575: LD_INT 1
5577: ARRAY
5578: PPUSH
5579: CALL_OW 258
5583: PUSH
5584: LD_INT 2
5586: EQUAL
5587: IFFALSE 5605
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5589: LD_VAR 0 1
5593: PUSH
5594: LD_INT 1
5596: ARRAY
5597: PPUSH
5598: LD_STRING D4-FSol1-2
5600: PPUSH
5601: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5605: LD_EXP 8
5609: PPUSH
5610: LD_STRING D4-Mikh-3
5612: PPUSH
5613: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5617: LD_VAR 0 1
5621: PUSH
5622: LD_INT 1
5624: ARRAY
5625: PPUSH
5626: CALL_OW 258
5630: PUSH
5631: LD_INT 1
5633: EQUAL
5634: IFFALSE 5652
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5636: LD_VAR 0 1
5640: PUSH
5641: LD_INT 1
5643: ARRAY
5644: PPUSH
5645: LD_STRING D4-Sol1-3
5647: PPUSH
5648: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5652: LD_VAR 0 1
5656: PUSH
5657: LD_INT 1
5659: ARRAY
5660: PPUSH
5661: CALL_OW 258
5665: PUSH
5666: LD_INT 2
5668: EQUAL
5669: IFFALSE 5687
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5671: LD_VAR 0 1
5675: PUSH
5676: LD_INT 1
5678: ARRAY
5679: PPUSH
5680: LD_STRING D4-FSol1-3
5682: PPUSH
5683: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5687: LD_EXP 8
5691: PPUSH
5692: LD_STRING D4-Mikh-4
5694: PPUSH
5695: CALL_OW 88
// case query ( Qs1 ) of 1 :
5699: LD_STRING Qs1
5701: PPUSH
5702: CALL_OW 97
5706: PUSH
5707: LD_INT 1
5709: DOUBLE
5710: EQUAL
5711: IFTRUE 5715
5713: GO 5750
5715: POP
// begin InGameOff ;
5716: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5720: LD_INT 1
5722: PPUSH
5723: LD_INT 6
5725: PPUSH
5726: LD_INT 2
5728: PPUSH
5729: LD_INT 1
5731: PPUSH
5732: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5736: LD_EXP 8
5740: PPUSH
5741: LD_INT 17
5743: PPUSH
5744: CALL_OW 113
// end ; 2 :
5748: GO 6343
5750: LD_INT 2
5752: DOUBLE
5753: EQUAL
5754: IFTRUE 5758
5756: GO 6308
5758: POP
// begin repeat wait ( 0 0$1 ) ;
5759: LD_INT 35
5761: PPUSH
5762: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5766: LD_VAR 0 1
5770: PUSH
5771: LD_INT 1
5773: ARRAY
5774: PPUSH
5775: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5779: LD_VAR 0 1
5783: PUSH
5784: LD_INT 1
5786: ARRAY
5787: PPUSH
5788: LD_EXP 1
5792: PPUSH
5793: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5797: LD_EXP 8
5801: PPUSH
5802: LD_EXP 1
5806: PPUSH
5807: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5811: LD_EXP 1
5815: PPUSH
5816: LD_EXP 8
5820: PPUSH
5821: CALL_OW 296
5825: PUSH
5826: LD_INT 5
5828: LESS
5829: IFFALSE 5759
// ComTurnUnit ( Mikhail , JMM ) ;
5831: LD_EXP 8
5835: PPUSH
5836: LD_EXP 1
5840: PPUSH
5841: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5845: LD_EXP 1
5849: PPUSH
5850: LD_STRING D4b-JMM-1
5852: PPUSH
5853: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5857: LD_EXP 8
5861: PPUSH
5862: LD_STRING D4b-Mikh-1
5864: PPUSH
5865: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5869: LD_EXP 1
5873: PPUSH
5874: LD_STRING D4b-JMM-2
5876: PPUSH
5877: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5881: LD_EXP 8
5885: PPUSH
5886: LD_STRING D4b-Mikh-2
5888: PPUSH
5889: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5893: LD_EXP 1
5897: PPUSH
5898: LD_STRING D4b-JMM-3
5900: PPUSH
5901: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5905: LD_EXP 8
5909: PPUSH
5910: LD_STRING D4b-Mikh-3
5912: PPUSH
5913: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5917: LD_EXP 1
5921: PPUSH
5922: LD_STRING D4b-JMM-4
5924: PPUSH
5925: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5929: LD_EXP 8
5933: PPUSH
5934: LD_STRING D4b-Mikh-4
5936: PPUSH
5937: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5941: LD_EXP 1
5945: PPUSH
5946: LD_STRING D4b-JMM-5
5948: PPUSH
5949: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5953: LD_EXP 8
5957: PPUSH
5958: LD_STRING D4b-Mikh-5
5960: PPUSH
5961: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5965: LD_EXP 1
5969: PPUSH
5970: LD_STRING D4b-JMM-6
5972: PPUSH
5973: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5977: LD_EXP 8
5981: PPUSH
5982: LD_STRING D4b-Mikh-6
5984: PPUSH
5985: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5989: LD_EXP 1
5993: PPUSH
5994: LD_STRING D4b-JMM-7
5996: PPUSH
5997: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6001: LD_EXP 8
6005: PPUSH
6006: LD_STRING D4b-Mikh-7
6008: PPUSH
6009: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6013: LD_VAR 0 1
6017: PUSH
6018: LD_INT 1
6020: ARRAY
6021: PPUSH
6022: CALL_OW 258
6026: PUSH
6027: LD_INT 1
6029: EQUAL
6030: IFFALSE 6048
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6032: LD_VAR 0 1
6036: PUSH
6037: LD_INT 1
6039: ARRAY
6040: PPUSH
6041: LD_STRING D4b-Sol1-7
6043: PPUSH
6044: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6048: LD_VAR 0 1
6052: PUSH
6053: LD_INT 1
6055: ARRAY
6056: PPUSH
6057: CALL_OW 258
6061: PUSH
6062: LD_INT 2
6064: EQUAL
6065: IFFALSE 6083
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6067: LD_VAR 0 1
6071: PUSH
6072: LD_INT 1
6074: ARRAY
6075: PPUSH
6076: LD_STRING D4b-FSol1-7
6078: PPUSH
6079: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6083: LD_EXP 1
6087: PPUSH
6088: LD_STRING D4b-JMM-8
6090: PPUSH
6091: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6095: LD_VAR 0 1
6099: PUSH
6100: LD_INT 1
6102: ARRAY
6103: PPUSH
6104: CALL_OW 258
6108: PUSH
6109: LD_INT 1
6111: EQUAL
6112: IFFALSE 6130
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6114: LD_VAR 0 1
6118: PUSH
6119: LD_INT 1
6121: ARRAY
6122: PPUSH
6123: LD_STRING D4b-Sol1-8
6125: PPUSH
6126: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6130: LD_VAR 0 1
6134: PUSH
6135: LD_INT 1
6137: ARRAY
6138: PPUSH
6139: CALL_OW 258
6143: PUSH
6144: LD_INT 2
6146: EQUAL
6147: IFFALSE 6165
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6149: LD_VAR 0 1
6153: PUSH
6154: LD_INT 1
6156: ARRAY
6157: PPUSH
6158: LD_STRING D4b-FSol1-8
6160: PPUSH
6161: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6165: LD_EXP 1
6169: PPUSH
6170: LD_STRING D4b-JMM-9
6172: PPUSH
6173: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6177: LD_EXP 8
6181: PPUSH
6182: LD_INT 1
6184: PPUSH
6185: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6189: LD_ADDR_VAR 0 2
6193: PUSH
6194: LD_INT 22
6196: PUSH
6197: LD_INT 1
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: EMPTY
6205: LIST
6206: PPUSH
6207: CALL_OW 69
6211: PUSH
6212: FOR_IN
6213: IFFALSE 6226
// ComFree ( i ) ;
6215: LD_VAR 0 2
6219: PPUSH
6220: CALL_OW 139
6224: GO 6212
6226: POP
6227: POP
// repeat wait ( 0 0$1 ) ;
6228: LD_INT 35
6230: PPUSH
6231: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6235: LD_EXP 8
6239: PPUSH
6240: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6244: LD_EXP 8
6248: PUSH
6249: LD_VAR 0 1
6253: PUSH
6254: LD_INT 1
6256: ARRAY
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: PPUSH
6262: LD_INT 1
6264: PPUSH
6265: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6269: LD_EXP 8
6273: PPUSH
6274: CALL_OW 310
6278: IFFALSE 6228
// mikhailDepot = IsInUnit ( Mikhail ) ;
6280: LD_ADDR_EXP 23
6284: PUSH
6285: LD_EXP 8
6289: PPUSH
6290: CALL_OW 310
6294: ST_TO_ADDR
// InGameOff ;
6295: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6299: LD_STRING M3
6301: PPUSH
6302: CALL_OW 337
// end ; 3 :
6306: GO 6343
6308: LD_INT 3
6310: DOUBLE
6311: EQUAL
6312: IFTRUE 6316
6314: GO 6342
6316: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6317: LD_EXP 8
6321: PPUSH
6322: LD_INT 17
6324: PPUSH
6325: CALL_OW 113
// wait ( 0 0$3 ) ;
6329: LD_INT 105
6331: PPUSH
6332: CALL_OW 67
// InGameOff ;
6336: CALL_OW 9
// end ; end ;
6340: GO 6343
6342: POP
// PrepareTigers ;
6343: CALL 14508 0 0
// RussianTrap ;
6347: CALL 10054 0 0
// tigersRespawn = 1 ;
6351: LD_ADDR_EXP 30
6355: PUSH
6356: LD_INT 1
6358: ST_TO_ADDR
// end ;
6359: PPOPN 2
6361: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6362: LD_INT 1
6364: PPUSH
6365: CALL_OW 255
6369: PUSH
6370: LD_INT 1
6372: EQUAL
6373: PUSH
6374: LD_INT 10
6376: PPUSH
6377: CALL_OW 255
6381: PUSH
6382: LD_INT 1
6384: EQUAL
6385: AND
6386: PUSH
6387: LD_INT 1
6389: PPUSH
6390: CALL_OW 274
6394: PPUSH
6395: LD_INT 1
6397: PPUSH
6398: CALL_OW 275
6402: PUSH
6403: LD_INT 100
6405: GREATEREQUAL
6406: AND
6407: IFFALSE 6556
6409: GO 6411
6411: DISABLE
6412: LD_INT 0
6414: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6415: LD_INT 2100
6417: PPUSH
6418: LD_INT 4200
6420: PPUSH
6421: CALL_OW 12
6425: PUSH
6426: LD_INT 1050
6428: PLUS
6429: PPUSH
6430: CALL_OW 67
// PrepareCargoBays ;
6434: CALL 12791 0 0
// cargoRespawn = 1 ;
6438: LD_ADDR_EXP 28
6442: PUSH
6443: LD_INT 1
6445: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6446: LD_ADDR_VAR 0 1
6450: PUSH
6451: LD_EXP 15
6455: PUSH
6456: LD_EXP 16
6460: PUSH
6461: LD_EXP 17
6465: PUSH
6466: LD_EXP 18
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6477: LD_VAR 0 1
6481: PPUSH
6482: LD_INT 17
6484: PPUSH
6485: LD_INT 10
6487: PPUSH
6488: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6492: LD_VAR 0 1
6496: PPUSH
6497: LD_INT 36
6499: PPUSH
6500: LD_INT 13
6502: PPUSH
6503: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6507: LD_VAR 0 1
6511: PPUSH
6512: LD_INT 40
6514: PPUSH
6515: LD_INT 20
6517: PPUSH
6518: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6522: LD_VAR 0 1
6526: PPUSH
6527: LD_INT 53
6529: PPUSH
6530: LD_INT 16
6532: PPUSH
6533: CALL_OW 171
// wait ( 0 0$5 ) ;
6537: LD_INT 175
6539: PPUSH
6540: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6544: LD_EXP 17
6548: PPUSH
6549: LD_STRING D5-Rus2-1
6551: PPUSH
6552: CALL_OW 88
// end ;
6556: PPOPN 1
6558: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6559: LD_EXP 28
6563: PUSH
6564: LD_INT 1
6566: EQUAL
6567: IFFALSE 6722
6569: GO 6571
6571: DISABLE
6572: LD_INT 0
6574: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6575: LD_ADDR_VAR 0 1
6579: PUSH
6580: LD_INT 22
6582: PUSH
6583: LD_INT 3
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: LD_INT 21
6592: PUSH
6593: LD_INT 2
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: PUSH
6600: LD_INT 34
6602: PUSH
6603: LD_INT 51
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: LIST
6614: PPUSH
6615: CALL_OW 69
6619: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6620: LD_INT 105
6622: PPUSH
6623: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6627: LD_VAR 0 1
6631: PPUSH
6632: LD_INT 3
6634: PUSH
6635: LD_INT 60
6637: PUSH
6638: EMPTY
6639: LIST
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PPUSH
6645: CALL_OW 72
6649: PUSH
6650: LD_VAR 0 1
6654: PPUSH
6655: LD_INT 3
6657: PUSH
6658: LD_INT 24
6660: PUSH
6661: LD_INT 980
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PPUSH
6672: CALL_OW 72
6676: OR
6677: IFFALSE 6620
// ComMoveXY ( cargos , 7 , 9 ) ;
6679: LD_VAR 0 1
6683: PPUSH
6684: LD_INT 7
6686: PPUSH
6687: LD_INT 9
6689: PPUSH
6690: CALL_OW 111
// cargoSee = 1 ;
6694: LD_ADDR_EXP 29
6698: PUSH
6699: LD_INT 1
6701: ST_TO_ADDR
// cargoEscape = 1 ;
6702: LD_ADDR_EXP 20
6706: PUSH
6707: LD_INT 1
6709: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6710: LD_EXP 17
6714: PPUSH
6715: LD_STRING D5-Rus2-1a
6717: PPUSH
6718: CALL_OW 88
// end ;
6722: PPOPN 1
6724: END
// every 0 0$1 trigger cargoEscape > 0 do
6725: LD_EXP 20
6729: PUSH
6730: LD_INT 0
6732: GREATER
6733: IFFALSE 6880
6735: GO 6737
6737: DISABLE
// begin enable ;
6738: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6739: LD_EXP 15
6743: PUSH
6744: LD_EXP 16
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: PPUSH
6753: LD_INT 13
6755: PPUSH
6756: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6760: LD_EXP 15
6764: PPUSH
6765: LD_INT 13
6767: PPUSH
6768: CALL_OW 308
6772: PUSH
6773: LD_EXP 17
6777: PPUSH
6778: LD_INT 13
6780: PPUSH
6781: CALL_OW 308
6785: OR
6786: IFFALSE 6820
// begin RemoveUnit ( cargo1 ) ;
6788: LD_EXP 15
6792: PPUSH
6793: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6797: LD_EXP 17
6801: PPUSH
6802: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6806: LD_ADDR_EXP 20
6810: PUSH
6811: LD_EXP 20
6815: PUSH
6816: LD_INT 1
6818: PLUS
6819: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6820: LD_EXP 16
6824: PPUSH
6825: LD_INT 13
6827: PPUSH
6828: CALL_OW 308
6832: PUSH
6833: LD_EXP 18
6837: PPUSH
6838: LD_INT 13
6840: PPUSH
6841: CALL_OW 308
6845: OR
6846: IFFALSE 6880
// begin RemoveUnit ( cargo2 ) ;
6848: LD_EXP 16
6852: PPUSH
6853: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6857: LD_EXP 18
6861: PPUSH
6862: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6866: LD_ADDR_EXP 20
6870: PUSH
6871: LD_EXP 20
6875: PUSH
6876: LD_INT 1
6878: PLUS
6879: ST_TO_ADDR
// end ; end ;
6880: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
6881: LD_EXP 20
6885: PUSH
6886: LD_INT 1
6888: GREATER
6889: IFFALSE 7046
6891: GO 6893
6893: DISABLE
6894: LD_INT 0
6896: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
6897: LD_INT 4
6899: PPUSH
6900: LD_INT 1
6902: PPUSH
6903: LD_INT 1
6905: PPUSH
6906: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6910: LD_INT 31
6912: PPUSH
6913: LD_INT 1
6915: PPUSH
6916: LD_INT 1
6918: PPUSH
6919: CALL_OW 324
// if IsOK ( Jerry ) then
6923: LD_EXP 7
6927: PPUSH
6928: CALL_OW 302
6932: IFFALSE 6948
// Say ( Jerry , D5a-Sol1-1 ) else
6934: LD_EXP 7
6938: PPUSH
6939: LD_STRING D5a-Sol1-1
6941: PPUSH
6942: CALL_OW 88
6946: GO 7034
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
6948: LD_ADDR_VAR 0 1
6952: PUSH
6953: LD_INT 22
6955: PUSH
6956: LD_INT 1
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: LD_INT 26
6965: PUSH
6966: LD_INT 1
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: PPUSH
6977: CALL_OW 69
6981: PUSH
6982: LD_EXP 1
6986: PUSH
6987: LD_EXP 2
6991: PUSH
6992: LD_EXP 3
6996: PUSH
6997: LD_EXP 5
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: DIFF
7008: ST_TO_ADDR
// if not speaker then
7009: LD_VAR 0 1
7013: NOT
7014: IFFALSE 7018
// exit ;
7016: GO 7046
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7018: LD_VAR 0 1
7022: PUSH
7023: LD_INT 1
7025: ARRAY
7026: PPUSH
7027: LD_STRING D5a-Sol1-1
7029: PPUSH
7030: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7034: LD_EXP 1
7038: PPUSH
7039: LD_STRING D5a-JMM-1
7041: PPUSH
7042: CALL_OW 88
// end ;
7046: PPOPN 1
7048: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7049: LD_INT 1
7051: PPUSH
7052: CALL_OW 255
7056: PUSH
7057: LD_INT 3
7059: EQUAL
7060: PUSH
7061: LD_INT 1
7063: PPUSH
7064: CALL_OW 256
7068: PUSH
7069: LD_INT 1000
7071: LESS
7072: AND
7073: PUSH
7074: LD_INT 10
7076: PPUSH
7077: CALL_OW 255
7081: PUSH
7082: LD_INT 3
7084: EQUAL
7085: PUSH
7086: LD_INT 10
7088: PPUSH
7089: CALL_OW 256
7093: PUSH
7094: LD_INT 1000
7096: LESS
7097: AND
7098: OR
7099: IFFALSE 7116
7101: GO 7103
7103: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
7104: LD_EXP 1
7108: PPUSH
7109: LD_STRING D8-JMM-1
7111: PPUSH
7112: CALL_OW 88
// end ;
7116: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7117: LD_EXP 8
7121: PPUSH
7122: CALL_OW 310
7126: PUSH
7127: LD_INT 1
7129: EQUAL
7130: PUSH
7131: LD_EXP 22
7135: PUSH
7136: LD_INT 3
7138: EQUAL
7139: NOT
7140: AND
7141: IFFALSE 7163
7143: GO 7145
7145: DISABLE
// begin mikhailInBase = 1 ;
7146: LD_ADDR_EXP 22
7150: PUSH
7151: LD_INT 1
7153: ST_TO_ADDR
// mikhailStatus = 1 ;
7154: LD_ADDR_EXP 21
7158: PUSH
7159: LD_INT 1
7161: ST_TO_ADDR
// enable ;
7162: ENABLE
// end ;
7163: END
// export function AskMikhail ; begin
7164: LD_INT 0
7166: PPUSH
// case query ( QMikh2 ) of 1 :
7167: LD_STRING QMikh2
7169: PPUSH
7170: CALL_OW 97
7174: PUSH
7175: LD_INT 1
7177: DOUBLE
7178: EQUAL
7179: IFTRUE 7183
7181: GO 7250
7183: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7184: LD_INT 1
7186: PPUSH
7187: LD_INT 6
7189: PPUSH
7190: LD_INT 2
7192: PPUSH
7193: LD_INT 1
7195: PPUSH
7196: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7200: LD_EXP 8
7204: PPUSH
7205: LD_INT 6
7207: PPUSH
7208: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7212: LD_EXP 8
7216: PPUSH
7217: CALL_OW 122
// wait ( 0 0$1 ) ;
7221: LD_INT 35
7223: PPUSH
7224: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7228: LD_EXP 8
7232: PPUSH
7233: LD_INT 17
7235: PPUSH
7236: CALL_OW 113
// mikhailInbase = 0 ;
7240: LD_ADDR_EXP 22
7244: PUSH
7245: LD_INT 0
7247: ST_TO_ADDR
// end ; 2 :
7248: GO 7491
7250: LD_INT 2
7252: DOUBLE
7253: EQUAL
7254: IFTRUE 7258
7256: GO 7431
7258: POP
// begin mikhailInBase = 2 ;
7259: LD_ADDR_EXP 22
7263: PUSH
7264: LD_INT 2
7266: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7267: LD_EXP 8
7271: PPUSH
7272: LD_INT 6
7274: PPUSH
7275: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7279: LD_EXP 8
7283: PPUSH
7284: CALL_OW 122
// wait ( 0 0$1 ) ;
7288: LD_INT 35
7290: PPUSH
7291: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7295: LD_EXP 8
7299: PPUSH
7300: LD_EXP 8
7304: PPUSH
7305: CALL_OW 250
7309: PUSH
7310: LD_INT 2
7312: PLUS
7313: PPUSH
7314: LD_EXP 8
7318: PPUSH
7319: CALL_OW 251
7323: PUSH
7324: LD_INT 2
7326: PLUS
7327: PPUSH
7328: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7332: LD_EXP 8
7336: PPUSH
7337: LD_EXP 8
7341: PPUSH
7342: CALL_OW 250
7346: PUSH
7347: LD_INT 1
7349: PLUS
7350: PPUSH
7351: LD_EXP 8
7355: PPUSH
7356: CALL_OW 251
7360: PUSH
7361: LD_INT 2
7363: PLUS
7364: PPUSH
7365: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7369: LD_EXP 8
7373: PPUSH
7374: LD_EXP 8
7378: PPUSH
7379: CALL_OW 250
7383: PUSH
7384: LD_INT 2
7386: PLUS
7387: PPUSH
7388: LD_EXP 8
7392: PPUSH
7393: CALL_OW 251
7397: PPUSH
7398: CALL_OW 171
// wait ( 0 0$5 ) ;
7402: LD_INT 175
7404: PPUSH
7405: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7409: LD_EXP 8
7413: PPUSH
7414: LD_INT 25
7416: PPUSH
7417: CALL_OW 113
// mikhailInBase = 4 ;
7421: LD_ADDR_EXP 22
7425: PUSH
7426: LD_INT 4
7428: ST_TO_ADDR
// end ; 3 :
7429: GO 7491
7431: LD_INT 3
7433: DOUBLE
7434: EQUAL
7435: IFTRUE 7439
7437: GO 7490
7439: POP
// begin SetSide ( Mikhail , 6 ) ;
7440: LD_EXP 8
7444: PPUSH
7445: LD_INT 6
7447: PPUSH
7448: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7452: LD_EXP 8
7456: PPUSH
7457: CALL_OW 122
// wait ( 0 0$1 ) ;
7461: LD_INT 35
7463: PPUSH
7464: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7468: LD_EXP 8
7472: PPUSH
7473: LD_INT 17
7475: PPUSH
7476: CALL_OW 113
// mikhailInbase = 3 ;
7480: LD_ADDR_EXP 22
7484: PUSH
7485: LD_INT 3
7487: ST_TO_ADDR
// end ; end ;
7488: GO 7491
7490: POP
// end ;
7491: LD_VAR 0 1
7495: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7496: LD_EXP 8
7500: PPUSH
7501: LD_INT 25
7503: PPUSH
7504: CALL_OW 308
7508: PUSH
7509: LD_EXP 22
7513: PUSH
7514: LD_INT 4
7516: EQUAL
7517: AND
7518: IFFALSE 7622
7520: GO 7522
7522: DISABLE
// begin enable ;
7523: ENABLE
// mikhailInBase = 1 ;
7524: LD_ADDR_EXP 22
7528: PUSH
7529: LD_INT 1
7531: ST_TO_ADDR
// InGameOn ;
7532: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7536: LD_INT 1
7538: PPUSH
7539: LD_INT 6
7541: PPUSH
7542: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7546: LD_INT 35
7548: PPUSH
7549: CALL_OW 67
// if Carry ( Mikhail ) then
7553: LD_EXP 8
7557: PPUSH
7558: CALL_OW 281
7562: IFFALSE 7573
// ComUnload ( Mikhail ) ;
7564: LD_EXP 8
7568: PPUSH
7569: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7573: LD_EXP 8
7577: PPUSH
7578: LD_INT 1
7580: PPUSH
7581: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7585: LD_EXP 8
7589: PPUSH
7590: CALL_OW 310
7594: IFFALSE 7546
// SetSide ( dep1 , 1 ) ;
7596: LD_INT 1
7598: PPUSH
7599: LD_INT 1
7601: PPUSH
7602: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7606: LD_EXP 8
7610: PPUSH
7611: LD_INT 1
7613: PPUSH
7614: CALL_OW 235
// InGameOff ;
7618: CALL_OW 9
// end ;
7622: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7623: LD_EXP 8
7627: PPUSH
7628: CALL_OW 310
7632: PUSH
7633: LD_EXP 22
7637: PUSH
7638: LD_INT 3
7640: EQUAL
7641: NOT
7642: AND
7643: IFFALSE 7778
7645: GO 7647
7647: DISABLE
// begin enable ;
7648: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7649: LD_INT 22
7651: PUSH
7652: LD_INT 1
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: PUSH
7659: LD_INT 21
7661: PUSH
7662: LD_INT 1
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: LD_INT 91
7671: PUSH
7672: LD_EXP 8
7676: PPUSH
7677: CALL_OW 310
7681: PUSH
7682: LD_INT 10
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: LIST
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: LIST
7694: PPUSH
7695: CALL_OW 69
7699: PUSH
7700: LD_INT 1
7702: EQUAL
7703: IFFALSE 7778
// begin mikhailStatus = 4 ;
7705: LD_ADDR_EXP 21
7709: PUSH
7710: LD_INT 4
7712: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7713: LD_INT 1
7715: PPUSH
7716: LD_INT 6
7718: PPUSH
7719: LD_INT 2
7721: PPUSH
7722: LD_INT 1
7724: PPUSH
7725: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7729: LD_EXP 8
7733: PPUSH
7734: LD_INT 6
7736: PPUSH
7737: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7741: LD_EXP 8
7745: PPUSH
7746: CALL_OW 122
// wait ( 0 0$1 ) ;
7750: LD_INT 35
7752: PPUSH
7753: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7757: LD_EXP 8
7761: PPUSH
7762: LD_INT 17
7764: PPUSH
7765: CALL_OW 113
// mikhailStatus = 3 ;
7769: LD_ADDR_EXP 21
7773: PUSH
7774: LD_INT 3
7776: ST_TO_ADDR
// disable ;
7777: DISABLE
// end ; end ;
7778: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7779: LD_EXP 1
7783: PPUSH
7784: LD_EXP 23
7788: PPUSH
7789: CALL_OW 296
7793: PUSH
7794: LD_INT 5
7796: LESS
7797: PUSH
7798: LD_EXP 21
7802: PUSH
7803: LD_INT 3
7805: EQUAL
7806: AND
7807: PUSH
7808: LD_EXP 22
7812: PUSH
7813: LD_INT 3
7815: EQUAL
7816: NOT
7817: AND
7818: IFFALSE 8040
7820: GO 7822
7822: DISABLE
7823: LD_INT 0
7825: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7826: LD_ADDR_VAR 0 1
7830: PUSH
7831: LD_INT 22
7833: PUSH
7834: LD_INT 1
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: PUSH
7841: LD_INT 21
7843: PUSH
7844: LD_INT 1
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PUSH
7851: LD_INT 26
7853: PUSH
7854: LD_INT 1
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: PPUSH
7866: CALL_OW 69
7870: PUSH
7871: LD_EXP 1
7875: PUSH
7876: LD_EXP 5
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: DIFF
7885: ST_TO_ADDR
// DialogueOn ;
7886: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7890: LD_EXP 1
7894: PPUSH
7895: LD_STRING D7-JMM-1
7897: PPUSH
7898: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7902: LD_VAR 0 1
7906: PUSH
7907: LD_INT 1
7909: ARRAY
7910: PPUSH
7911: LD_STRING D7-Sol1-1
7913: PPUSH
7914: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7918: LD_EXP 1
7922: PPUSH
7923: LD_STRING D7-JMM-2
7925: PPUSH
7926: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7930: LD_VAR 0 1
7934: PUSH
7935: LD_INT 1
7937: ARRAY
7938: PPUSH
7939: LD_STRING D7-Sol1-2
7941: PPUSH
7942: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7946: LD_EXP 1
7950: PPUSH
7951: LD_STRING D7-JMM-3
7953: PPUSH
7954: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7958: LD_VAR 0 1
7962: PUSH
7963: LD_INT 1
7965: ARRAY
7966: PPUSH
7967: LD_STRING D7-Sol1-3
7969: PPUSH
7970: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7974: LD_EXP 3
7978: PPUSH
7979: CALL_OW 302
7983: PUSH
7984: LD_EXP 4
7988: PPUSH
7989: CALL_OW 302
7993: AND
7994: IFFALSE 8036
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7996: LD_EXP 3
8000: PPUSH
8001: LD_STRING D7-Cyrus-3
8003: PPUSH
8004: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8008: LD_VAR 0 1
8012: PUSH
8013: LD_INT 1
8015: ARRAY
8016: PPUSH
8017: LD_STRING D7-Sol1-4
8019: PPUSH
8020: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8024: LD_EXP 4
8028: PPUSH
8029: LD_STRING D7-Lisa-4
8031: PPUSH
8032: CALL_OW 88
// end ; DialogueOff ;
8036: CALL_OW 7
// end ;
8040: PPOPN 1
8042: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8043: LD_EXP 8
8047: PPUSH
8048: CALL_OW 303
8052: PUSH
8053: LD_EXP 21
8057: PUSH
8058: LD_INT 3
8060: EQUAL
8061: AND
8062: IFFALSE 8076
8064: GO 8066
8066: DISABLE
// begin enable ;
8067: ENABLE
// mikhailStatus = 2 ;
8068: LD_ADDR_EXP 21
8072: PUSH
8073: LD_INT 2
8075: ST_TO_ADDR
// end ;
8076: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8077: LD_EXP 8
8081: PPUSH
8082: LD_INT 17
8084: PPUSH
8085: CALL_OW 308
8089: PUSH
8090: LD_EXP 8
8094: PPUSH
8095: CALL_OW 255
8099: PUSH
8100: LD_INT 6
8102: EQUAL
8103: AND
8104: IFFALSE 8137
8106: GO 8108
8108: DISABLE
// begin if not mikhailInBase = 3 then
8109: LD_EXP 22
8113: PUSH
8114: LD_INT 3
8116: EQUAL
8117: NOT
8118: IFFALSE 8128
// mikhailStatus = 3 ;
8120: LD_ADDR_EXP 21
8124: PUSH
8125: LD_INT 3
8127: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8128: LD_EXP 8
8132: PPUSH
8133: CALL_OW 64
// end ;
8137: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8138: LD_EXP 21
8142: PUSH
8143: LD_INT 3
8145: EQUAL
8146: PUSH
8147: LD_EXP 8
8151: PPUSH
8152: CALL_OW 255
8156: PUSH
8157: LD_INT 6
8159: EQUAL
8160: AND
8161: IFFALSE 8327
8163: GO 8165
8165: DISABLE
8166: LD_INT 0
8168: PPUSH
8169: PPUSH
// begin enable ;
8170: ENABLE
// if IsOk ( Mikhail ) then
8171: LD_EXP 8
8175: PPUSH
8176: CALL_OW 302
8180: IFFALSE 8327
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8182: LD_ADDR_VAR 0 2
8186: PUSH
8187: LD_EXP 8
8191: PPUSH
8192: LD_INT 22
8194: PUSH
8195: LD_INT 1
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PUSH
8202: LD_INT 21
8204: PUSH
8205: LD_INT 1
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: PPUSH
8216: CALL_OW 69
8220: PPUSH
8221: CALL 10246 0 2
8225: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8226: LD_VAR 0 2
8230: PPUSH
8231: LD_EXP 8
8235: PPUSH
8236: CALL_OW 296
8240: PUSH
8241: LD_INT 8
8243: LESS
8244: IFFALSE 8327
// begin if GetSex ( attacker ) = sex_male then
8246: LD_VAR 0 2
8250: PPUSH
8251: CALL_OW 258
8255: PUSH
8256: LD_INT 1
8258: EQUAL
8259: IFFALSE 8295
// begin disable ;
8261: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8262: LD_VAR 0 2
8266: PPUSH
8267: LD_STRING D7a-Sol1-1
8269: PPUSH
8270: CALL_OW 88
// wait ( 0 0$2 ) ;
8274: LD_INT 70
8276: PPUSH
8277: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8281: LD_VAR 0 2
8285: PPUSH
8286: LD_STRING D7a-Sol1-1a
8288: PPUSH
8289: CALL_OW 88
// end else
8293: GO 8327
// begin disable ;
8295: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8296: LD_VAR 0 2
8300: PPUSH
8301: LD_STRING D7a-FSol1-1
8303: PPUSH
8304: CALL_OW 88
// wait ( 0 0$2 ) ;
8308: LD_INT 70
8310: PPUSH
8311: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8315: LD_VAR 0 2
8319: PPUSH
8320: LD_STRING D7a-FSol1-1a
8322: PPUSH
8323: CALL_OW 88
// end ; end ; end ; end ;
8327: PPOPN 2
8329: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8330: LD_EXP 27
8334: PUSH
8335: LD_INT 1
8337: EQUAL
8338: PUSH
8339: LD_INT 22
8341: PPUSH
8342: LD_INT 22
8344: PUSH
8345: LD_INT 3
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PUSH
8352: LD_INT 21
8354: PUSH
8355: LD_INT 1
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: PPUSH
8366: CALL_OW 70
8370: PUSH
8371: LD_INT 2
8373: GREATER
8374: AND
8375: PUSH
8376: LD_INT 22
8378: PPUSH
8379: LD_INT 22
8381: PUSH
8382: LD_INT 1
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: PUSH
8389: LD_INT 2
8391: PUSH
8392: LD_INT 21
8394: PUSH
8395: LD_INT 1
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: PUSH
8402: LD_INT 59
8404: PUSH
8405: EMPTY
8406: LIST
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: LIST
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PPUSH
8417: CALL_OW 70
8421: PUSH
8422: LD_INT 0
8424: EQUAL
8425: AND
8426: IFFALSE 8441
8428: GO 8430
8430: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8431: LD_INT 1
8433: PPUSH
8434: LD_INT 3
8436: PPUSH
8437: CALL_OW 235
// end ;
8441: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8442: LD_EXP 30
8446: PUSH
8447: LD_INT 1
8449: EQUAL
8450: PUSH
8451: LD_INT 22
8453: PUSH
8454: LD_INT 0
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: LD_INT 25
8463: PUSH
8464: LD_INT 14
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PPUSH
8475: CALL_OW 69
8479: PUSH
8480: LD_INT 0
8482: EQUAL
8483: AND
8484: IFFALSE 8578
8486: GO 8488
8488: DISABLE
8489: LD_INT 0
8491: PPUSH
8492: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8493: LD_ADDR_VAR 0 2
8497: PUSH
8498: LD_INT 22
8500: PUSH
8501: LD_INT 1
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: PUSH
8508: LD_INT 21
8510: PUSH
8511: LD_INT 1
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 23
8520: PUSH
8521: LD_INT 1
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: LIST
8532: PPUSH
8533: CALL_OW 69
8537: ST_TO_ADDR
// for i in tmp do
8538: LD_ADDR_VAR 0 1
8542: PUSH
8543: LD_VAR 0 2
8547: PUSH
8548: FOR_IN
8549: IFFALSE 8576
// begin AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8551: LD_VAR 0 1
8555: PPUSH
8556: LD_INT 1
8558: PPUSH
8559: LD_INT 4
8561: PPUSH
8562: CALL_OW 12
8566: PPUSH
8567: LD_INT 300
8569: PPUSH
8570: CALL_OW 492
// end ;
8574: GO 8548
8576: POP
8577: POP
// end ; end_of_file
8578: PPOPN 2
8580: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8581: LD_INT 0
8583: PPUSH
8584: PPUSH
8585: PPUSH
8586: PPUSH
// for i = 1 to count do
8587: LD_ADDR_VAR 0 8
8591: PUSH
8592: DOUBLE
8593: LD_INT 1
8595: DEC
8596: ST_TO_ADDR
8597: LD_VAR 0 6
8601: PUSH
8602: FOR_TO
8603: IFFALSE 8684
// begin uc_side = side ;
8605: LD_ADDR_OWVAR 20
8609: PUSH
8610: LD_VAR 0 1
8614: ST_TO_ADDR
// uc_nation = nation ;
8615: LD_ADDR_OWVAR 21
8619: PUSH
8620: LD_VAR 0 2
8624: ST_TO_ADDR
// hc_gallery =  ;
8625: LD_ADDR_OWVAR 33
8629: PUSH
8630: LD_STRING 
8632: ST_TO_ADDR
// hc_name =  ;
8633: LD_ADDR_OWVAR 26
8637: PUSH
8638: LD_STRING 
8640: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8641: LD_INT 0
8643: PPUSH
8644: LD_VAR 0 5
8648: PPUSH
8649: LD_VAR 0 4
8653: PPUSH
8654: CALL_OW 380
// un = CreateHuman ;
8658: LD_ADDR_VAR 0 10
8662: PUSH
8663: CALL_OW 44
8667: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8668: LD_VAR 0 10
8672: PPUSH
8673: LD_VAR 0 3
8677: PPUSH
8678: CALL_OW 52
// end ;
8682: GO 8602
8684: POP
8685: POP
// end ;
8686: LD_VAR 0 7
8690: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8691: LD_INT 0
8693: PPUSH
8694: PPUSH
8695: PPUSH
// uc_side := GetSide ( b ) ;
8696: LD_ADDR_OWVAR 20
8700: PUSH
8701: LD_VAR 0 2
8705: PPUSH
8706: CALL_OW 255
8710: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8711: LD_ADDR_OWVAR 21
8715: PUSH
8716: LD_VAR 0 2
8720: PPUSH
8721: CALL_OW 248
8725: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8726: LD_INT 0
8728: PPUSH
8729: LD_INT 1
8731: PPUSH
8732: LD_VAR 0 1
8736: PPUSH
8737: CALL_OW 380
// un = CreateHuman ;
8741: LD_ADDR_VAR 0 4
8745: PUSH
8746: CALL_OW 44
8750: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8751: LD_ADDR_VAR 0 5
8755: PUSH
8756: LD_VAR 0 2
8760: PPUSH
8761: CALL_OW 254
8765: PUSH
8766: LD_INT 3
8768: MINUS
8769: ST_TO_ADDR
// if dir < 0 then
8770: LD_VAR 0 5
8774: PUSH
8775: LD_INT 0
8777: LESS
8778: IFFALSE 8794
// dir := 6 + dir ;
8780: LD_ADDR_VAR 0 5
8784: PUSH
8785: LD_INT 6
8787: PUSH
8788: LD_VAR 0 5
8792: PLUS
8793: ST_TO_ADDR
// SetDir ( un , dir ) ;
8794: LD_VAR 0 4
8798: PPUSH
8799: LD_VAR 0 5
8803: PPUSH
8804: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8808: LD_VAR 0 4
8812: PPUSH
8813: LD_VAR 0 2
8817: PPUSH
8818: CALL_OW 52
// end ;
8822: LD_VAR 0 3
8826: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8827: LD_INT 0
8829: PPUSH
8830: PPUSH
8831: PPUSH
8832: PPUSH
8833: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8834: LD_ADDR_VAR 0 7
8838: PUSH
8839: LD_INT 22
8841: PUSH
8842: LD_VAR 0 1
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PUSH
8851: LD_INT 25
8853: PUSH
8854: LD_INT 2
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: PUSH
8861: LD_INT 24
8863: PUSH
8864: LD_INT 1000
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: LIST
8875: PPUSH
8876: CALL_OW 69
8880: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8881: LD_ADDR_VAR 0 5
8885: PUSH
8886: LD_VAR 0 3
8890: PPUSH
8891: LD_INT 22
8893: PUSH
8894: LD_VAR 0 1
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: LD_INT 21
8905: PUSH
8906: LD_INT 3
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PUSH
8913: LD_INT 3
8915: PUSH
8916: LD_INT 24
8918: PUSH
8919: LD_INT 1000
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: LIST
8934: PUSH
8935: EMPTY
8936: LIST
8937: PPUSH
8938: CALL_OW 70
8942: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8943: LD_VAR 0 5
8947: PUSH
8948: LD_INT 0
8950: GREATER
8951: PUSH
8952: LD_VAR 0 7
8956: PUSH
8957: LD_INT 0
8959: GREATER
8960: AND
8961: IFFALSE 9027
// begin for i in engineerOk_list do
8963: LD_ADDR_VAR 0 6
8967: PUSH
8968: LD_VAR 0 7
8972: PUSH
8973: FOR_IN
8974: IFFALSE 9025
// begin for j in buildings_list do
8976: LD_ADDR_VAR 0 8
8980: PUSH
8981: LD_VAR 0 5
8985: PUSH
8986: FOR_IN
8987: IFFALSE 9021
// begin AddComExitBuilding ( i ) ;
8989: LD_VAR 0 6
8993: PPUSH
8994: CALL_OW 182
// wait ( 0 0$1 ) ;
8998: LD_INT 35
9000: PPUSH
9001: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
9005: LD_VAR 0 6
9009: PPUSH
9010: LD_VAR 0 8
9014: PPUSH
9015: CALL_OW 190
// end ;
9019: GO 8986
9021: POP
9022: POP
// end ;
9023: GO 8973
9025: POP
9026: POP
// end ; if buildings_list = 0 then
9027: LD_VAR 0 5
9031: PUSH
9032: LD_INT 0
9034: EQUAL
9035: IFFALSE 9068
// begin for i in engineerOK_list do
9037: LD_ADDR_VAR 0 6
9041: PUSH
9042: LD_VAR 0 7
9046: PUSH
9047: FOR_IN
9048: IFFALSE 9066
// begin ComEnterUnit ( i , building ) ;
9050: LD_VAR 0 6
9054: PPUSH
9055: LD_VAR 0 2
9059: PPUSH
9060: CALL_OW 120
// end ;
9064: GO 9047
9066: POP
9067: POP
// end ; end ;
9068: LD_VAR 0 4
9072: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
9073: LD_INT 0
9075: PPUSH
9076: PPUSH
9077: PPUSH
9078: PPUSH
9079: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9080: LD_ADDR_VAR 0 6
9084: PUSH
9085: LD_INT 22
9087: PUSH
9088: LD_VAR 0 1
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: PUSH
9097: LD_INT 25
9099: PUSH
9100: LD_INT 4
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: PUSH
9107: LD_INT 24
9109: PUSH
9110: LD_INT 250
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: LIST
9121: PPUSH
9122: CALL_OW 69
9126: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9127: LD_ADDR_VAR 0 9
9131: PUSH
9132: LD_VAR 0 3
9136: PPUSH
9137: LD_INT 22
9139: PUSH
9140: LD_VAR 0 1
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 21
9151: PUSH
9152: LD_INT 1
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: LD_INT 3
9161: PUSH
9162: LD_INT 24
9164: PUSH
9165: LD_INT 650
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: LIST
9180: PPUSH
9181: CALL_OW 70
9185: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9186: LD_VAR 0 9
9190: PUSH
9191: LD_INT 0
9193: GREATER
9194: PUSH
9195: LD_VAR 0 6
9199: PUSH
9200: LD_INT 0
9202: GREATER
9203: AND
9204: IFFALSE 9331
// begin for i = 1 to damageUnits do
9206: LD_ADDR_VAR 0 7
9210: PUSH
9211: DOUBLE
9212: LD_INT 1
9214: DEC
9215: ST_TO_ADDR
9216: LD_VAR 0 9
9220: PUSH
9221: FOR_TO
9222: IFFALSE 9246
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9224: LD_VAR 0 9
9228: PUSH
9229: LD_VAR 0 7
9233: ARRAY
9234: PPUSH
9235: LD_VAR 0 2
9239: PPUSH
9240: CALL_OW 113
9244: GO 9221
9246: POP
9247: POP
// for i in sci_list do
9248: LD_ADDR_VAR 0 7
9252: PUSH
9253: LD_VAR 0 6
9257: PUSH
9258: FOR_IN
9259: IFFALSE 9327
// begin ComExitBuilding ( i ) ;
9261: LD_VAR 0 7
9265: PPUSH
9266: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9270: LD_ADDR_VAR 0 8
9274: PUSH
9275: LD_VAR 0 2
9279: PPUSH
9280: LD_INT 22
9282: PUSH
9283: LD_VAR 0 1
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: PPUSH
9292: CALL_OW 70
9296: PUSH
9297: FOR_IN
9298: IFFALSE 9323
// begin AddComHeal ( i , j ) ;
9300: LD_VAR 0 7
9304: PPUSH
9305: LD_VAR 0 8
9309: PPUSH
9310: CALL_OW 188
// wait ( 1 1$0 ) ;
9314: LD_INT 2100
9316: PPUSH
9317: CALL_OW 67
// end ;
9321: GO 9297
9323: POP
9324: POP
// end ;
9325: GO 9258
9327: POP
9328: POP
// end else
9329: GO 9345
// begin AddComEnterUnit ( sci_list , build ) ;
9331: LD_VAR 0 6
9335: PPUSH
9336: LD_VAR 0 4
9340: PPUSH
9341: CALL_OW 180
// end ; end ;
9345: LD_VAR 0 5
9349: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9350: LD_INT 0
9352: PPUSH
9353: PPUSH
9354: PPUSH
9355: PPUSH
9356: PPUSH
9357: PPUSH
9358: PPUSH
9359: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9360: LD_ADDR_VAR 0 7
9364: PUSH
9365: LD_VAR 0 3
9369: PPUSH
9370: LD_INT 22
9372: PUSH
9373: LD_VAR 0 1
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: PUSH
9382: LD_INT 21
9384: PUSH
9385: LD_INT 2
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: PUSH
9392: LD_INT 24
9394: PUSH
9395: LD_INT 550
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PUSH
9402: LD_INT 34
9404: PUSH
9405: LD_INT 46
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: PPUSH
9418: CALL_OW 70
9422: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9423: LD_ADDR_VAR 0 8
9427: PUSH
9428: LD_VAR 0 3
9432: PPUSH
9433: LD_INT 22
9435: PUSH
9436: LD_VAR 0 1
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: LD_INT 21
9447: PUSH
9448: LD_INT 2
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: PUSH
9455: LD_INT 34
9457: PUSH
9458: LD_INT 46
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: PUSH
9465: LD_INT 3
9467: PUSH
9468: LD_INT 24
9470: PUSH
9471: LD_INT 550
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: PPUSH
9488: CALL_OW 70
9492: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9493: LD_ADDR_VAR 0 9
9497: PUSH
9498: LD_VAR 0 2
9502: PPUSH
9503: LD_INT 22
9505: PUSH
9506: LD_VAR 0 1
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: PUSH
9515: LD_INT 21
9517: PUSH
9518: LD_INT 2
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PUSH
9525: LD_INT 34
9527: PUSH
9528: LD_INT 46
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PUSH
9535: LD_INT 24
9537: PUSH
9538: LD_INT 1000
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: PUSH
9545: LD_INT 58
9547: PUSH
9548: EMPTY
9549: LIST
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: PPUSH
9558: CALL_OW 70
9562: ST_TO_ADDR
// for i in damageVehicle_list do
9563: LD_ADDR_VAR 0 5
9567: PUSH
9568: LD_VAR 0 8
9572: PUSH
9573: FOR_IN
9574: IFFALSE 9593
// mechanicInside_list = UnitsInside ( i ) ;
9576: LD_ADDR_VAR 0 10
9580: PUSH
9581: LD_VAR 0 5
9585: PPUSH
9586: CALL_OW 313
9590: ST_TO_ADDR
9591: GO 9573
9593: POP
9594: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9595: LD_ADDR_VAR 0 11
9599: PUSH
9600: LD_VAR 0 2
9604: PPUSH
9605: LD_INT 22
9607: PUSH
9608: LD_VAR 0 1
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 25
9619: PUSH
9620: LD_INT 3
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: PPUSH
9631: CALL_OW 70
9635: ST_TO_ADDR
// if damageVehicle_list > 0 then
9636: LD_VAR 0 8
9640: PUSH
9641: LD_INT 0
9643: GREATER
9644: IFFALSE 9717
// begin for i in damageVehicle_list do
9646: LD_ADDR_VAR 0 5
9650: PUSH
9651: LD_VAR 0 8
9655: PUSH
9656: FOR_IN
9657: IFFALSE 9715
// begin for j in mechanicInside_list do
9659: LD_ADDR_VAR 0 6
9663: PUSH
9664: LD_VAR 0 10
9668: PUSH
9669: FOR_IN
9670: IFFALSE 9711
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9672: LD_VAR 0 8
9676: PPUSH
9677: LD_VAR 0 2
9681: PPUSH
9682: CALL_OW 113
// AddComExitVehicle ( j ) ;
9686: LD_VAR 0 6
9690: PPUSH
9691: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9695: LD_VAR 0 6
9699: PPUSH
9700: LD_VAR 0 5
9704: PPUSH
9705: CALL_OW 189
// end ;
9709: GO 9669
9711: POP
9712: POP
// end ;
9713: GO 9656
9715: POP
9716: POP
// end ; if emptyVehicle_list > 0 then
9717: LD_VAR 0 9
9721: PUSH
9722: LD_INT 0
9724: GREATER
9725: IFFALSE 9775
// begin for i in emptyVehicle_list do
9727: LD_ADDR_VAR 0 5
9731: PUSH
9732: LD_VAR 0 9
9736: PUSH
9737: FOR_IN
9738: IFFALSE 9773
// begin for j in mechanicOutside_list do
9740: LD_ADDR_VAR 0 6
9744: PUSH
9745: LD_VAR 0 11
9749: PUSH
9750: FOR_IN
9751: IFFALSE 9769
// begin AddComEnterUnit ( j , i ) ;
9753: LD_VAR 0 6
9757: PPUSH
9758: LD_VAR 0 5
9762: PPUSH
9763: CALL_OW 180
// end ;
9767: GO 9750
9769: POP
9770: POP
// end ;
9771: GO 9737
9773: POP
9774: POP
// end ; if VehicleOK_list > 0 then
9775: LD_VAR 0 7
9779: PUSH
9780: LD_INT 0
9782: GREATER
9783: IFFALSE 9817
// begin for i in VehicleOK_list do
9785: LD_ADDR_VAR 0 5
9789: PUSH
9790: LD_VAR 0 7
9794: PUSH
9795: FOR_IN
9796: IFFALSE 9815
// ComAgressiveMove ( i , 110 , 29 ) ;
9798: LD_VAR 0 5
9802: PPUSH
9803: LD_INT 110
9805: PPUSH
9806: LD_INT 29
9808: PPUSH
9809: CALL_OW 114
9813: GO 9795
9815: POP
9816: POP
// end ; end ;
9817: LD_VAR 0 4
9821: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9822: LD_INT 0
9824: PPUSH
9825: PPUSH
9826: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9827: LD_VAR 0 1
9831: PPUSH
9832: LD_INT 22
9834: PUSH
9835: LD_VAR 0 2
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: PUSH
9844: LD_INT 2
9846: PUSH
9847: LD_INT 21
9849: PUSH
9850: LD_INT 2
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 21
9859: PUSH
9860: LD_INT 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: LIST
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PPUSH
9876: CALL_OW 70
9880: PUSH
9881: LD_VAR 0 5
9885: GREATER
9886: IFFALSE 10018
// begin for i in defendersList do
9888: LD_ADDR_VAR 0 7
9892: PUSH
9893: LD_VAR 0 3
9897: PUSH
9898: FOR_IN
9899: IFFALSE 10014
// begin AddComExitBuilding ( i ) ;
9901: LD_VAR 0 7
9905: PPUSH
9906: CALL_OW 182
// wait ( 0 0$1 ) ;
9910: LD_INT 35
9912: PPUSH
9913: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9917: LD_ADDR_VAR 0 8
9921: PUSH
9922: LD_VAR 0 1
9926: PPUSH
9927: LD_INT 22
9929: PUSH
9930: LD_VAR 0 2
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: PUSH
9939: LD_INT 2
9941: PUSH
9942: LD_INT 21
9944: PUSH
9945: LD_INT 2
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: PUSH
9952: LD_INT 21
9954: PUSH
9955: LD_INT 1
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: LIST
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PPUSH
9971: CALL_OW 70
9975: PUSH
9976: FOR_IN
9977: IFFALSE 10010
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
9979: LD_VAR 0 7
9983: PPUSH
9984: LD_VAR 0 8
9988: PPUSH
9989: CALL_OW 250
9993: PPUSH
9994: LD_VAR 0 8
9998: PPUSH
9999: CALL_OW 251
10003: PPUSH
10004: CALL_OW 174
10008: GO 9976
10010: POP
10011: POP
// end ;
10012: GO 9898
10014: POP
10015: POP
// end else
10016: GO 10049
// begin for i in defendersList do
10018: LD_ADDR_VAR 0 7
10022: PUSH
10023: LD_VAR 0 3
10027: PUSH
10028: FOR_IN
10029: IFFALSE 10047
// ComEnterUnit ( i , build ) ;
10031: LD_VAR 0 7
10035: PPUSH
10036: LD_VAR 0 4
10040: PPUSH
10041: CALL_OW 120
10045: GO 10028
10047: POP
10048: POP
// end ; end ;
10049: LD_VAR 0 6
10053: RET
// export function RussianTrap ; var i ; begin
10054: LD_INT 0
10056: PPUSH
10057: PPUSH
// if GetSide ( Brian ) = 4 then
10058: LD_EXP 6
10062: PPUSH
10063: CALL_OW 255
10067: PUSH
10068: LD_INT 4
10070: EQUAL
10071: IFFALSE 10094
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10073: LD_EXP 6
10077: PUSH
10078: LD_EXP 7
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PPUSH
10087: LD_INT 0
10089: PPUSH
10090: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10094: LD_ADDR_VAR 0 2
10098: PUSH
10099: LD_INT 22
10101: PUSH
10102: LD_INT 3
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: PUSH
10109: LD_INT 21
10111: PUSH
10112: LD_INT 1
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PPUSH
10123: CALL_OW 69
10127: PUSH
10128: FOR_IN
10129: IFFALSE 10239
// begin ComExitBuilding ( i ) ;
10131: LD_VAR 0 2
10135: PPUSH
10136: CALL_OW 122
// wait ( 0 0$1 ) ;
10140: LD_INT 35
10142: PPUSH
10143: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10147: LD_VAR 0 2
10151: PPUSH
10152: LD_INT 120
10154: PPUSH
10155: LD_INT 56
10157: PPUSH
10158: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10162: LD_VAR 0 2
10166: PPUSH
10167: LD_INT 111
10169: PPUSH
10170: LD_INT 37
10172: PPUSH
10173: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10177: LD_INT 33
10179: PPUSH
10180: CALL_OW 255
10184: PUSH
10185: LD_INT 3
10187: EQUAL
10188: PUSH
10189: LD_INT 33
10191: PPUSH
10192: CALL_OW 302
10196: AND
10197: IFFALSE 10213
// begin AddComEnterUnit ( i , arm2 ) ;
10199: LD_VAR 0 2
10203: PPUSH
10204: LD_INT 33
10206: PPUSH
10207: CALL_OW 180
// end else
10211: GO 10237
// begin AddComCrawl ( i ) ;
10213: LD_VAR 0 2
10217: PPUSH
10218: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10222: LD_VAR 0 2
10226: PPUSH
10227: LD_INT 109
10229: PPUSH
10230: LD_INT 30
10232: PPUSH
10233: CALL_OW 174
// end ; end ;
10237: GO 10128
10239: POP
10240: POP
// end ;
10241: LD_VAR 0 1
10245: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10246: LD_INT 0
10248: PPUSH
10249: PPUSH
10250: PPUSH
10251: PPUSH
10252: PPUSH
// nearest_dist = 1000 ;
10253: LD_ADDR_VAR 0 4
10257: PUSH
10258: LD_INT 1000
10260: ST_TO_ADDR
// nearest_un = un ;
10261: LD_ADDR_VAR 0 5
10265: PUSH
10266: LD_VAR 0 1
10270: ST_TO_ADDR
// for sold in units do
10271: LD_ADDR_VAR 0 6
10275: PUSH
10276: LD_VAR 0 2
10280: PUSH
10281: FOR_IN
10282: IFFALSE 10338
// begin dist = GetDistUnits ( un , sold ) ;
10284: LD_ADDR_VAR 0 7
10288: PUSH
10289: LD_VAR 0 1
10293: PPUSH
10294: LD_VAR 0 6
10298: PPUSH
10299: CALL_OW 296
10303: ST_TO_ADDR
// if dist < nearest_dist then
10304: LD_VAR 0 7
10308: PUSH
10309: LD_VAR 0 4
10313: LESS
10314: IFFALSE 10336
// begin nearest_un = sold ;
10316: LD_ADDR_VAR 0 5
10320: PUSH
10321: LD_VAR 0 6
10325: ST_TO_ADDR
// nearest_dist = dist ;
10326: LD_ADDR_VAR 0 4
10330: PUSH
10331: LD_VAR 0 7
10335: ST_TO_ADDR
// end ; end ;
10336: GO 10281
10338: POP
10339: POP
// result := nearest_un ;
10340: LD_ADDR_VAR 0 3
10344: PUSH
10345: LD_VAR 0 5
10349: ST_TO_ADDR
// end ;
10350: LD_VAR 0 3
10354: RET
// export function PrepareDifficulty ; begin
10355: LD_INT 0
10357: PPUSH
// if Difficulty = 1 then
10358: LD_OWVAR 67
10362: PUSH
10363: LD_INT 1
10365: EQUAL
10366: IFFALSE 10429
// begin RemoveUnit ( brw2 ) ;
10368: LD_INT 9
10370: PPUSH
10371: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10375: LD_INT 30
10377: PPUSH
10378: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10382: LD_INT 52
10384: PPUSH
10385: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10389: LD_INT 63
10391: PPUSH
10392: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10396: LD_INT 5
10398: PUSH
10399: LD_INT 4
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PPUSH
10406: LD_INT 60
10408: PPUSH
10409: CALL_OW 240
// RuSoldMinLevel = 0 ;
10413: LD_ADDR_EXP 13
10417: PUSH
10418: LD_INT 0
10420: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10421: LD_ADDR_EXP 14
10425: PUSH
10426: LD_INT 1
10428: ST_TO_ADDR
// end ; if Difficulty = 2 then
10429: LD_OWVAR 67
10433: PUSH
10434: LD_INT 2
10436: EQUAL
10437: IFFALSE 10479
// begin RemoveUnit ( brw4 ) ;
10439: LD_INT 52
10441: PPUSH
10442: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10446: LD_INT 5
10448: PUSH
10449: LD_INT 4
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: PPUSH
10456: LD_INT 50
10458: PPUSH
10459: CALL_OW 240
// RuSoldMinLevel = 1 ;
10463: LD_ADDR_EXP 13
10467: PUSH
10468: LD_INT 1
10470: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10471: LD_ADDR_EXP 14
10475: PUSH
10476: LD_INT 2
10478: ST_TO_ADDR
// end ; if Difficulty = 3 then
10479: LD_OWVAR 67
10483: PUSH
10484: LD_INT 3
10486: EQUAL
10487: IFFALSE 10522
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10489: LD_INT 5
10491: PUSH
10492: LD_INT 4
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: PPUSH
10499: LD_INT 40
10501: PPUSH
10502: CALL_OW 240
// RuSoldMinLevel = 2 ;
10506: LD_ADDR_EXP 13
10510: PUSH
10511: LD_INT 2
10513: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10514: LD_ADDR_EXP 14
10518: PUSH
10519: LD_INT 3
10521: ST_TO_ADDR
// end ; end ;
10522: LD_VAR 0 1
10526: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10527: LD_INT 0
10529: PPUSH
10530: PPUSH
10531: PPUSH
// tmp = [ ] ;
10532: LD_ADDR_VAR 0 5
10536: PUSH
10537: EMPTY
10538: ST_TO_ADDR
// if not vehicles then
10539: LD_VAR 0 1
10543: NOT
10544: IFFALSE 10548
// exit ;
10546: GO 10665
// for i in vehicles do
10548: LD_ADDR_VAR 0 4
10552: PUSH
10553: LD_VAR 0 1
10557: PUSH
10558: FOR_IN
10559: IFFALSE 10649
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10561: LD_ADDR_VAR 0 5
10565: PUSH
10566: LD_VAR 0 5
10570: PPUSH
10571: LD_INT 1
10573: PPUSH
10574: LD_VAR 0 4
10578: PPUSH
10579: CALL_OW 265
10583: PUSH
10584: LD_VAR 0 4
10588: PPUSH
10589: CALL_OW 262
10593: PUSH
10594: LD_VAR 0 4
10598: PPUSH
10599: CALL_OW 263
10603: PUSH
10604: LD_VAR 0 4
10608: PPUSH
10609: CALL_OW 264
10613: PUSH
10614: LD_VAR 0 4
10618: PPUSH
10619: CALL_OW 261
10623: PUSH
10624: LD_VAR 0 4
10628: PPUSH
10629: CALL_OW 256
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: PPUSH
10642: CALL_OW 2
10646: ST_TO_ADDR
// end ;
10647: GO 10558
10649: POP
10650: POP
// SaveVariable ( tmp , ident ) ;
10651: LD_VAR 0 5
10655: PPUSH
10656: LD_VAR 0 2
10660: PPUSH
10661: CALL_OW 39
// end ; end_of_file
10665: LD_VAR 0 3
10669: RET
// export function PrepareHeroes ; var plive ; begin
10670: LD_INT 0
10672: PPUSH
10673: PPUSH
// uc_side = 1 ;
10674: LD_ADDR_OWVAR 20
10678: PUSH
10679: LD_INT 1
10681: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10682: LD_ADDR_EXP 1
10686: PUSH
10687: LD_STRING 01_JMM
10689: PPUSH
10690: CALL_OW 34
10694: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10695: LD_ADDR_VAR 0 2
10699: PUSH
10700: LD_STRING 01_JMMLifePoints_1
10702: PPUSH
10703: LD_INT 1000
10705: PPUSH
10706: CALL_OW 30
10710: ST_TO_ADDR
// if plive < 250 then
10711: LD_VAR 0 2
10715: PUSH
10716: LD_INT 250
10718: LESS
10719: IFFALSE 10729
// plive := 300 ;
10721: LD_ADDR_VAR 0 2
10725: PUSH
10726: LD_INT 300
10728: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10729: LD_EXP 1
10733: PPUSH
10734: LD_VAR 0 2
10738: PPUSH
10739: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10743: LD_ADDR_EXP 9
10747: PUSH
10748: LD_STRING Powell
10750: PPUSH
10751: CALL_OW 25
10755: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10756: LD_ADDR_EXP 2
10760: PUSH
10761: LD_STRING 01_Bobby
10763: PPUSH
10764: CALL_OW 34
10768: ST_TO_ADDR
// if Bobby then
10769: LD_EXP 2
10773: IFFALSE 10823
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10775: LD_ADDR_VAR 0 2
10779: PUSH
10780: LD_STRING 01_BobbyLifePoints_1
10782: PPUSH
10783: LD_INT 1000
10785: PPUSH
10786: CALL_OW 30
10790: ST_TO_ADDR
// if plive < 250 then
10791: LD_VAR 0 2
10795: PUSH
10796: LD_INT 250
10798: LESS
10799: IFFALSE 10809
// plive := 300 ;
10801: LD_ADDR_VAR 0 2
10805: PUSH
10806: LD_INT 300
10808: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10809: LD_EXP 2
10813: PPUSH
10814: LD_VAR 0 2
10818: PPUSH
10819: CALL_OW 234
// end ; Cyrus = CreateCharacter ( 01_Cyrus ) ;
10823: LD_ADDR_EXP 3
10827: PUSH
10828: LD_STRING 01_Cyrus
10830: PPUSH
10831: CALL_OW 34
10835: ST_TO_ADDR
// if Cyrus then
10836: LD_EXP 3
10840: IFFALSE 10890
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10842: LD_ADDR_VAR 0 2
10846: PUSH
10847: LD_STRING 01_CyrusLifePoints_1
10849: PPUSH
10850: LD_INT 1000
10852: PPUSH
10853: CALL_OW 30
10857: ST_TO_ADDR
// if plive < 250 then
10858: LD_VAR 0 2
10862: PUSH
10863: LD_INT 250
10865: LESS
10866: IFFALSE 10876
// plive := 300 ;
10868: LD_ADDR_VAR 0 2
10872: PUSH
10873: LD_INT 300
10875: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
10876: LD_EXP 3
10880: PPUSH
10881: LD_VAR 0 2
10885: PPUSH
10886: CALL_OW 234
// end ; Khatam = NewCharacter ( Khatam ) ;
10890: LD_ADDR_EXP 5
10894: PUSH
10895: LD_STRING Khatam
10897: PPUSH
10898: CALL_OW 25
10902: ST_TO_ADDR
// uc_side = 4 ;
10903: LD_ADDR_OWVAR 20
10907: PUSH
10908: LD_INT 4
10910: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10911: LD_ADDR_EXP 4
10915: PUSH
10916: LD_STRING Lisa
10918: PPUSH
10919: CALL_OW 25
10923: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10924: LD_EXP 1
10928: PPUSH
10929: LD_INT 3
10931: PPUSH
10932: LD_INT 0
10934: PPUSH
10935: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10939: LD_EXP 2
10943: PPUSH
10944: LD_INT 3
10946: PPUSH
10947: LD_INT 0
10949: PPUSH
10950: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10954: LD_EXP 3
10958: PPUSH
10959: LD_INT 3
10961: PPUSH
10962: LD_INT 0
10964: PPUSH
10965: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10969: LD_EXP 4
10973: PPUSH
10974: LD_INT 5
10976: PPUSH
10977: LD_INT 0
10979: PPUSH
10980: CALL_OW 49
// ComCrawl ( Lisa ) ;
10984: LD_EXP 4
10988: PPUSH
10989: CALL_OW 137
// end ;
10993: LD_VAR 0 1
10997: RET
// export function PrepareLisSquad ; var i , un ; begin
10998: LD_INT 0
11000: PPUSH
11001: PPUSH
11002: PPUSH
// uc_side = 4 ;
11003: LD_ADDR_OWVAR 20
11007: PUSH
11008: LD_INT 4
11010: ST_TO_ADDR
// uc_nation = 1 ;
11011: LD_ADDR_OWVAR 21
11015: PUSH
11016: LD_INT 1
11018: ST_TO_ADDR
// hc_class := 2 ;
11019: LD_ADDR_OWVAR 28
11023: PUSH
11024: LD_INT 2
11026: ST_TO_ADDR
// hc_sex := sex_male ;
11027: LD_ADDR_OWVAR 27
11031: PUSH
11032: LD_INT 1
11034: ST_TO_ADDR
// hc_gallery :=  ;
11035: LD_ADDR_OWVAR 33
11039: PUSH
11040: LD_STRING 
11042: ST_TO_ADDR
// hc_name :=  ;
11043: LD_ADDR_OWVAR 26
11047: PUSH
11048: LD_STRING 
11050: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11051: LD_ADDR_OWVAR 30
11055: PUSH
11056: LD_INT 0
11058: PUSH
11059: LD_INT 1
11061: PUSH
11062: LD_INT 0
11064: PUSH
11065: LD_INT 0
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11074: LD_ADDR_OWVAR 31
11078: PUSH
11079: LD_INT 1
11081: PUSH
11082: LD_INT 2
11084: PUSH
11085: LD_INT 0
11087: PUSH
11088: LD_INT 0
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: ST_TO_ADDR
// un := CreateHuman ;
11097: LD_ADDR_VAR 0 3
11101: PUSH
11102: CALL_OW 44
11106: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11107: LD_VAR 0 3
11111: PPUSH
11112: LD_INT 6
11114: PPUSH
11115: LD_INT 0
11117: PPUSH
11118: CALL_OW 49
// hc_sex := sex_female ;
11122: LD_ADDR_OWVAR 27
11126: PUSH
11127: LD_INT 2
11129: ST_TO_ADDR
// hc_gallery :=  ;
11130: LD_ADDR_OWVAR 33
11134: PUSH
11135: LD_STRING 
11137: ST_TO_ADDR
// hc_name :=  ;
11138: LD_ADDR_OWVAR 26
11142: PUSH
11143: LD_STRING 
11145: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11146: LD_ADDR_OWVAR 30
11150: PUSH
11151: LD_INT 0
11153: PUSH
11154: LD_INT 0
11156: PUSH
11157: LD_INT 0
11159: PUSH
11160: LD_INT 1
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11169: LD_ADDR_OWVAR 31
11173: PUSH
11174: LD_INT 0
11176: PUSH
11177: LD_INT 1
11179: PUSH
11180: LD_INT 0
11182: PUSH
11183: LD_INT 1
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: ST_TO_ADDR
// un := CreateHuman ;
11192: LD_ADDR_VAR 0 3
11196: PUSH
11197: CALL_OW 44
11201: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11202: LD_VAR 0 3
11206: PPUSH
11207: LD_INT 6
11209: PPUSH
11210: LD_INT 0
11212: PPUSH
11213: CALL_OW 49
// if not Bobby and not Cyrus then
11217: LD_EXP 2
11221: NOT
11222: PUSH
11223: LD_EXP 3
11227: NOT
11228: AND
11229: IFFALSE 11334
// begin hc_class := 1 ;
11231: LD_ADDR_OWVAR 28
11235: PUSH
11236: LD_INT 1
11238: ST_TO_ADDR
// hc_sex := sex_male ;
11239: LD_ADDR_OWVAR 27
11243: PUSH
11244: LD_INT 1
11246: ST_TO_ADDR
// hc_gallery :=  ;
11247: LD_ADDR_OWVAR 33
11251: PUSH
11252: LD_STRING 
11254: ST_TO_ADDR
// hc_name :=  ;
11255: LD_ADDR_OWVAR 26
11259: PUSH
11260: LD_STRING 
11262: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11263: LD_ADDR_OWVAR 30
11267: PUSH
11268: LD_INT 2
11270: PUSH
11271: LD_INT 3
11273: PUSH
11274: LD_INT 1
11276: PUSH
11277: LD_INT 0
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11286: LD_ADDR_OWVAR 31
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: LD_INT 3
11296: PUSH
11297: LD_INT 1
11299: PUSH
11300: LD_INT 0
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: ST_TO_ADDR
// un := CreateHuman ;
11309: LD_ADDR_VAR 0 3
11313: PUSH
11314: CALL_OW 44
11318: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11319: LD_VAR 0 3
11323: PPUSH
11324: LD_INT 31
11326: PPUSH
11327: LD_INT 0
11329: PPUSH
11330: CALL_OW 49
// end ; InitHc ;
11334: CALL_OW 19
// end ;
11338: LD_VAR 0 1
11342: RET
// export function PrepareOtherAmericans ; begin
11343: LD_INT 0
11345: PPUSH
// uc_side = 4 ;
11346: LD_ADDR_OWVAR 20
11350: PUSH
11351: LD_INT 4
11353: ST_TO_ADDR
// uc_nation = 1 ;
11354: LD_ADDR_OWVAR 21
11358: PUSH
11359: LD_INT 1
11361: ST_TO_ADDR
// hc_gallery =  ;
11362: LD_ADDR_OWVAR 33
11366: PUSH
11367: LD_STRING 
11369: ST_TO_ADDR
// hc_name = Tom Garvin ;
11370: LD_ADDR_OWVAR 26
11374: PUSH
11375: LD_STRING Tom Garvin
11377: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11378: LD_INT 1
11380: PPUSH
11381: LD_INT 1
11383: PPUSH
11384: LD_INT 1
11386: PPUSH
11387: LD_INT 2
11389: PPUSH
11390: CALL_OW 12
11394: PPUSH
11395: CALL_OW 380
// Brian = CreateHuman ;
11399: LD_ADDR_EXP 6
11403: PUSH
11404: CALL_OW 44
11408: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11409: LD_EXP 6
11413: PPUSH
11414: LD_INT 10
11416: PPUSH
11417: LD_INT 0
11419: PPUSH
11420: CALL_OW 49
// hc_name = Jerry White ;
11424: LD_ADDR_OWVAR 26
11428: PUSH
11429: LD_STRING Jerry White
11431: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11432: LD_INT 1
11434: PPUSH
11435: LD_INT 3
11437: PPUSH
11438: LD_INT 1
11440: PPUSH
11441: LD_INT 2
11443: PPUSH
11444: CALL_OW 12
11448: PPUSH
11449: CALL_OW 380
// Jerry = CreateHuman ;
11453: LD_ADDR_EXP 7
11457: PUSH
11458: CALL_OW 44
11462: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11463: LD_EXP 7
11467: PPUSH
11468: LD_INT 10
11470: PPUSH
11471: LD_INT 0
11473: PPUSH
11474: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11478: LD_EXP 6
11482: PUSH
11483: LD_EXP 7
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PPUSH
11492: CALL_OW 140
// end ;
11496: LD_VAR 0 1
11500: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11501: LD_INT 0
11503: PPUSH
11504: PPUSH
11505: PPUSH
// for i = 1 to 6 do
11506: LD_ADDR_VAR 0 2
11510: PUSH
11511: DOUBLE
11512: LD_INT 1
11514: DEC
11515: ST_TO_ADDR
11516: LD_INT 6
11518: PUSH
11519: FOR_TO
11520: IFFALSE 11614
// begin uc_side = 4 ;
11522: LD_ADDR_OWVAR 20
11526: PUSH
11527: LD_INT 4
11529: ST_TO_ADDR
// uc_nation = 1 ;
11530: LD_ADDR_OWVAR 21
11534: PUSH
11535: LD_INT 1
11537: ST_TO_ADDR
// hc_gallery =  ;
11538: LD_ADDR_OWVAR 33
11542: PUSH
11543: LD_STRING 
11545: ST_TO_ADDR
// hc_name =  ;
11546: LD_ADDR_OWVAR 26
11550: PUSH
11551: LD_STRING 
11553: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11554: LD_INT 0
11556: PPUSH
11557: LD_INT 1
11559: PPUSH
11560: LD_INT 4
11562: PPUSH
11563: CALL_OW 12
11567: PPUSH
11568: LD_INT 1
11570: PPUSH
11571: CALL_OW 380
// un = CreateHuman ;
11575: LD_ADDR_VAR 0 3
11579: PUSH
11580: CALL_OW 44
11584: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11585: LD_VAR 0 3
11589: PPUSH
11590: LD_INT 16
11592: PPUSH
11593: LD_INT 0
11595: PPUSH
11596: CALL_OW 49
// SetLives ( un , 1 ) ;
11600: LD_VAR 0 3
11604: PPUSH
11605: LD_INT 1
11607: PPUSH
11608: CALL_OW 234
// end ;
11612: GO 11519
11614: POP
11615: POP
// DyingSold = CreateHuman ;
11616: LD_ADDR_EXP 34
11620: PUSH
11621: CALL_OW 44
11625: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11626: LD_EXP 34
11630: PPUSH
11631: LD_INT 16
11633: PPUSH
11634: LD_INT 0
11636: PPUSH
11637: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11641: LD_EXP 34
11645: PPUSH
11646: LD_INT 250
11648: PPUSH
11649: CALL_OW 234
// end ; end_of_file
11653: LD_VAR 0 1
11657: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11658: LD_INT 0
11660: PPUSH
11661: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11662: LD_ADDR_VAR 0 2
11666: PUSH
11667: LD_INT 22
11669: PUSH
11670: LD_INT 1
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: PUSH
11677: LD_INT 23
11679: PUSH
11680: LD_INT 1
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 25
11689: PUSH
11690: LD_INT 2
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: LD_INT 50
11699: PUSH
11700: EMPTY
11701: LIST
11702: PUSH
11703: LD_INT 56
11705: PUSH
11706: EMPTY
11707: LIST
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: PPUSH
11716: CALL_OW 69
11720: PUSH
11721: LD_EXP 1
11725: PUSH
11726: EMPTY
11727: LIST
11728: DIFF
11729: ST_TO_ADDR
// uc_side = 6 ;
11730: LD_ADDR_OWVAR 20
11734: PUSH
11735: LD_INT 6
11737: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11738: LD_ADDR_EXP 8
11742: PUSH
11743: LD_STRING Mikhail
11745: PPUSH
11746: CALL_OW 25
11750: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11751: LD_EXP 8
11755: PPUSH
11756: LD_INT 3
11758: PPUSH
11759: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
11763: LD_EXP 8
11767: PPUSH
11768: LD_VAR 0 2
11772: PUSH
11773: LD_INT 1
11775: ARRAY
11776: PPUSH
11777: CALL_OW 250
11781: PPUSH
11782: LD_VAR 0 2
11786: PUSH
11787: LD_INT 1
11789: ARRAY
11790: PPUSH
11791: CALL_OW 251
11795: PPUSH
11796: LD_INT 5
11798: PPUSH
11799: LD_INT 1
11801: PPUSH
11802: CALL_OW 50
// end ;
11806: LD_VAR 0 1
11810: RET
// export function PrepareRussianCommander ; begin
11811: LD_INT 0
11813: PPUSH
// uc_side = 3 ;
11814: LD_ADDR_OWVAR 20
11818: PUSH
11819: LD_INT 3
11821: ST_TO_ADDR
// uc_nation = 3 ;
11822: LD_ADDR_OWVAR 21
11826: PUSH
11827: LD_INT 3
11829: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11830: LD_ADDR_EXP 19
11834: PUSH
11835: LD_STRING Natasza
11837: PPUSH
11838: CALL_OW 25
11842: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11843: LD_EXP 19
11847: PPUSH
11848: LD_INT 24
11850: PPUSH
11851: LD_INT 0
11853: PPUSH
11854: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11858: LD_EXP 19
11862: PPUSH
11863: LD_INT 56
11865: PPUSH
11866: LD_INT 16
11868: PPUSH
11869: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11873: LD_ADDR_EXP 24
11877: PUSH
11878: LD_EXP 24
11882: PUSH
11883: LD_EXP 19
11887: ADD
11888: ST_TO_ADDR
// end ;
11889: LD_VAR 0 1
11893: RET
// export function PrepareSouthBase ; var i , un ; begin
11894: LD_INT 0
11896: PPUSH
11897: PPUSH
11898: PPUSH
// for i = 1 to 2 do
11899: LD_ADDR_VAR 0 2
11903: PUSH
11904: DOUBLE
11905: LD_INT 1
11907: DEC
11908: ST_TO_ADDR
11909: LD_INT 2
11911: PUSH
11912: FOR_TO
11913: IFFALSE 12022
// begin uc_side = 3 ;
11915: LD_ADDR_OWVAR 20
11919: PUSH
11920: LD_INT 3
11922: ST_TO_ADDR
// uc_nation = 3 ;
11923: LD_ADDR_OWVAR 21
11927: PUSH
11928: LD_INT 3
11930: ST_TO_ADDR
// hc_gallery =  ;
11931: LD_ADDR_OWVAR 33
11935: PUSH
11936: LD_STRING 
11938: ST_TO_ADDR
// hc_name =  ;
11939: LD_ADDR_OWVAR 26
11943: PUSH
11944: LD_STRING 
11946: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11947: LD_INT 1
11949: PPUSH
11950: LD_INT 1
11952: PPUSH
11953: LD_EXP 13
11957: PPUSH
11958: LD_EXP 14
11962: PPUSH
11963: CALL_OW 12
11967: PPUSH
11968: CALL_OW 380
// hc_importance = 0 ;
11972: LD_ADDR_OWVAR 32
11976: PUSH
11977: LD_INT 0
11979: ST_TO_ADDR
// un = CreateHuman ;
11980: LD_ADDR_VAR 0 3
11984: PUSH
11985: CALL_OW 44
11989: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11990: LD_VAR 0 3
11994: PPUSH
11995: LD_INT 11
11997: PPUSH
11998: LD_INT 0
12000: PPUSH
12001: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12005: LD_VAR 0 3
12009: PPUSH
12010: LD_INT 111
12012: PPUSH
12013: LD_INT 38
12015: PPUSH
12016: CALL_OW 118
// end ;
12020: GO 11912
12022: POP
12023: POP
// for i = 1 to Difficulty do
12024: LD_ADDR_VAR 0 2
12028: PUSH
12029: DOUBLE
12030: LD_INT 1
12032: DEC
12033: ST_TO_ADDR
12034: LD_OWVAR 67
12038: PUSH
12039: FOR_TO
12040: IFFALSE 12123
// begin uc_side = 3 ;
12042: LD_ADDR_OWVAR 20
12046: PUSH
12047: LD_INT 3
12049: ST_TO_ADDR
// uc_nation = 3 ;
12050: LD_ADDR_OWVAR 21
12054: PUSH
12055: LD_INT 3
12057: ST_TO_ADDR
// hc_gallery =  ;
12058: LD_ADDR_OWVAR 33
12062: PUSH
12063: LD_STRING 
12065: ST_TO_ADDR
// hc_name =  ;
12066: LD_ADDR_OWVAR 26
12070: PUSH
12071: LD_STRING 
12073: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12074: LD_INT 0
12076: PPUSH
12077: LD_INT 3
12079: PPUSH
12080: LD_EXP 13
12084: PPUSH
12085: LD_EXP 14
12089: PPUSH
12090: CALL_OW 12
12094: PPUSH
12095: CALL_OW 380
// un = CreateHuman ;
12099: LD_ADDR_VAR 0 3
12103: PUSH
12104: CALL_OW 44
12108: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12109: LD_VAR 0 3
12113: PPUSH
12114: LD_INT 10
12116: PPUSH
12117: CALL_OW 52
// end ;
12121: GO 12039
12123: POP
12124: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
12125: LD_INT 3
12127: PPUSH
12128: LD_INT 3
12130: PPUSH
12131: LD_INT 33
12133: PPUSH
12134: LD_EXP 13
12138: PPUSH
12139: LD_EXP 14
12143: PPUSH
12144: CALL_OW 12
12148: PPUSH
12149: LD_INT 1
12151: PPUSH
12152: LD_INT 1
12154: PUSH
12155: LD_INT 1
12157: PPUSH
12158: LD_INT 2
12160: PPUSH
12161: CALL_OW 12
12165: PUSH
12166: LD_INT 1
12168: PPUSH
12169: LD_INT 2
12171: PPUSH
12172: CALL_OW 12
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: LIST
12181: PUSH
12182: LD_OWVAR 67
12186: ARRAY
12187: PPUSH
12188: CALL 8581 0 6
// for i in UnitsInside ( arm2 ) do
12192: LD_ADDR_VAR 0 2
12196: PUSH
12197: LD_INT 33
12199: PPUSH
12200: CALL_OW 313
12204: PUSH
12205: FOR_IN
12206: IFFALSE 12226
// southBaseDefenders = southBaseDefenders ^ i ;
12208: LD_ADDR_EXP 25
12212: PUSH
12213: LD_EXP 25
12217: PUSH
12218: LD_VAR 0 2
12222: ADD
12223: ST_TO_ADDR
12224: GO 12205
12226: POP
12227: POP
// end ;
12228: LD_VAR 0 1
12232: RET
// export function PrepareNorthBase ; var i , un ; begin
12233: LD_INT 0
12235: PPUSH
12236: PPUSH
12237: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
12238: LD_ADDR_VAR 0 2
12242: PUSH
12243: DOUBLE
12244: LD_INT 1
12246: DEC
12247: ST_TO_ADDR
12248: LD_INT 1
12250: PPUSH
12251: LD_INT 2
12253: PPUSH
12254: CALL_OW 12
12258: PUSH
12259: LD_INT 2
12261: PPUSH
12262: LD_INT 3
12264: PPUSH
12265: CALL_OW 12
12269: PUSH
12270: LD_INT 3
12272: PPUSH
12273: LD_INT 4
12275: PPUSH
12276: CALL_OW 12
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: LIST
12285: PUSH
12286: LD_OWVAR 67
12290: ARRAY
12291: PUSH
12292: FOR_TO
12293: IFFALSE 12379
// begin uc_side = 3 ;
12295: LD_ADDR_OWVAR 20
12299: PUSH
12300: LD_INT 3
12302: ST_TO_ADDR
// uc_nation = 3 ;
12303: LD_ADDR_OWVAR 21
12307: PUSH
12308: LD_INT 3
12310: ST_TO_ADDR
// hc_gallery =  ;
12311: LD_ADDR_OWVAR 33
12315: PUSH
12316: LD_STRING 
12318: ST_TO_ADDR
// hc_name =  ;
12319: LD_ADDR_OWVAR 26
12323: PUSH
12324: LD_STRING 
12326: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12327: LD_INT 0
12329: PPUSH
12330: LD_INT 1
12332: PPUSH
12333: LD_EXP 13
12337: PPUSH
12338: LD_EXP 14
12342: PPUSH
12343: CALL_OW 12
12347: PPUSH
12348: CALL_OW 380
// un = CreateHuman ;
12352: LD_ADDR_VAR 0 3
12356: PUSH
12357: CALL_OW 44
12361: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12362: LD_VAR 0 3
12366: PPUSH
12367: LD_INT 14
12369: PPUSH
12370: LD_INT 0
12372: PPUSH
12373: CALL_OW 49
// end ;
12377: GO 12292
12379: POP
12380: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12381: LD_INT 3
12383: PPUSH
12384: LD_INT 3
12386: PPUSH
12387: LD_INT 2
12389: PPUSH
12390: LD_EXP 13
12394: PPUSH
12395: LD_EXP 14
12399: PPUSH
12400: CALL_OW 12
12404: PPUSH
12405: LD_INT 1
12407: PPUSH
12408: LD_INT 1
12410: PPUSH
12411: LD_INT 2
12413: PPUSH
12414: CALL_OW 12
12418: PUSH
12419: LD_INT 1
12421: PPUSH
12422: LD_INT 3
12424: PPUSH
12425: CALL_OW 12
12429: PUSH
12430: LD_INT 1
12432: PPUSH
12433: LD_INT 3
12435: PPUSH
12436: CALL_OW 12
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: LIST
12445: PUSH
12446: LD_OWVAR 67
12450: ARRAY
12451: PPUSH
12452: CALL 8581 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12456: LD_INT 3
12458: PPUSH
12459: LD_INT 3
12461: PPUSH
12462: LD_INT 23
12464: PPUSH
12465: LD_EXP 13
12469: PPUSH
12470: LD_EXP 14
12474: PPUSH
12475: CALL_OW 12
12479: PPUSH
12480: LD_INT 4
12482: PPUSH
12483: LD_INT 0
12485: PUSH
12486: LD_INT 1
12488: PUSH
12489: LD_INT 2
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: PUSH
12497: LD_OWVAR 67
12501: ARRAY
12502: PPUSH
12503: CALL 8581 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12507: LD_INT 3
12509: PPUSH
12510: LD_INT 3
12512: PPUSH
12513: LD_INT 1
12515: PPUSH
12516: LD_EXP 13
12520: PPUSH
12521: LD_EXP 14
12525: PPUSH
12526: CALL_OW 12
12530: PPUSH
12531: LD_INT 2
12533: PPUSH
12534: LD_INT 1
12536: PUSH
12537: LD_INT 2
12539: PUSH
12540: LD_INT 2
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: LIST
12547: PUSH
12548: LD_OWVAR 67
12552: ARRAY
12553: PPUSH
12554: CALL 8581 0 6
// for i in UnitsInside ( arm1 ) do
12558: LD_ADDR_VAR 0 2
12562: PUSH
12563: LD_INT 2
12565: PPUSH
12566: CALL_OW 313
12570: PUSH
12571: FOR_IN
12572: IFFALSE 12592
// northBaseDefenders = northBaseDefenders ^ i ;
12574: LD_ADDR_EXP 24
12578: PUSH
12579: LD_EXP 24
12583: PUSH
12584: LD_VAR 0 2
12588: ADD
12589: ST_TO_ADDR
12590: GO 12571
12592: POP
12593: POP
// end ;
12594: LD_VAR 0 1
12598: RET
// export function PrepareOtherRussians ; var i , un ; begin
12599: LD_INT 0
12601: PPUSH
12602: PPUSH
12603: PPUSH
// for i = 1 to 2 do
12604: LD_ADDR_VAR 0 2
12608: PUSH
12609: DOUBLE
12610: LD_INT 1
12612: DEC
12613: ST_TO_ADDR
12614: LD_INT 2
12616: PUSH
12617: FOR_TO
12618: IFFALSE 12719
// begin uc_side = 3 ;
12620: LD_ADDR_OWVAR 20
12624: PUSH
12625: LD_INT 3
12627: ST_TO_ADDR
// uc_nation = 3 ;
12628: LD_ADDR_OWVAR 21
12632: PUSH
12633: LD_INT 3
12635: ST_TO_ADDR
// hc_gallery =  ;
12636: LD_ADDR_OWVAR 33
12640: PUSH
12641: LD_STRING 
12643: ST_TO_ADDR
// hc_name =  ;
12644: LD_ADDR_OWVAR 26
12648: PUSH
12649: LD_STRING 
12651: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12652: LD_INT 0
12654: PPUSH
12655: LD_INT 1
12657: PPUSH
12658: LD_EXP 13
12662: PPUSH
12663: LD_EXP 14
12667: PPUSH
12668: CALL_OW 12
12672: PPUSH
12673: CALL_OW 380
// un = CreateHuman ;
12677: LD_ADDR_VAR 0 3
12681: PUSH
12682: CALL_OW 44
12686: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12687: LD_VAR 0 3
12691: PPUSH
12692: LD_INT 9
12694: PPUSH
12695: LD_INT 0
12697: PPUSH
12698: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12702: LD_VAR 0 3
12706: PPUSH
12707: LD_INT 80
12709: PPUSH
12710: LD_INT 73
12712: PPUSH
12713: CALL_OW 118
// end ;
12717: GO 12617
12719: POP
12720: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12721: LD_ADDR_VAR 0 2
12725: PUSH
12726: LD_INT 22
12728: PUSH
12729: LD_INT 3
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 30
12738: PUSH
12739: LD_INT 31
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PPUSH
12750: CALL_OW 69
12754: PUSH
12755: FOR_IN
12756: IFFALSE 12784
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12758: LD_EXP 13
12762: PPUSH
12763: LD_EXP 14
12767: PPUSH
12768: CALL_OW 12
12772: PPUSH
12773: LD_VAR 0 2
12777: PPUSH
12778: CALL 8691 0 2
12782: GO 12755
12784: POP
12785: POP
// end ;
12786: LD_VAR 0 1
12790: RET
// export function PrepareCargoBays ; begin
12791: LD_INT 0
12793: PPUSH
// uc_side = 3 ;
12794: LD_ADDR_OWVAR 20
12798: PUSH
12799: LD_INT 3
12801: ST_TO_ADDR
// uc_nation = 3 ;
12802: LD_ADDR_OWVAR 21
12806: PUSH
12807: LD_INT 3
12809: ST_TO_ADDR
// vc_engine = 1 ;
12810: LD_ADDR_OWVAR 39
12814: PUSH
12815: LD_INT 1
12817: ST_TO_ADDR
// vc_control = 1 ;
12818: LD_ADDR_OWVAR 38
12822: PUSH
12823: LD_INT 1
12825: ST_TO_ADDR
// vc_weapon = 51 ;
12826: LD_ADDR_OWVAR 40
12830: PUSH
12831: LD_INT 51
12833: ST_TO_ADDR
// vc_chassis = 22 ;
12834: LD_ADDR_OWVAR 37
12838: PUSH
12839: LD_INT 22
12841: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12842: LD_ADDR_EXP 15
12846: PUSH
12847: CALL_OW 45
12851: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12852: LD_ADDR_EXP 16
12856: PUSH
12857: CALL_OW 45
12861: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12862: LD_EXP 15
12866: PPUSH
12867: LD_INT 13
12869: PPUSH
12870: LD_INT 0
12872: PPUSH
12873: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12877: LD_EXP 16
12881: PPUSH
12882: LD_INT 13
12884: PPUSH
12885: LD_INT 0
12887: PPUSH
12888: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12892: LD_EXP 15
12896: PPUSH
12897: LD_INT 2
12899: PPUSH
12900: LD_INT 70
12902: PUSH
12903: LD_INT 50
12905: PUSH
12906: LD_INT 30
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: LIST
12913: PUSH
12914: LD_OWVAR 67
12918: ARRAY
12919: PPUSH
12920: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12924: LD_EXP 16
12928: PPUSH
12929: LD_INT 2
12931: PPUSH
12932: LD_INT 70
12934: PUSH
12935: LD_INT 50
12937: PUSH
12938: LD_INT 30
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: LIST
12945: PUSH
12946: LD_OWVAR 67
12950: ARRAY
12951: PPUSH
12952: CALL_OW 291
// hc_gallery =  ;
12956: LD_ADDR_OWVAR 33
12960: PUSH
12961: LD_STRING 
12963: ST_TO_ADDR
// hc_name =  ;
12964: LD_ADDR_OWVAR 26
12968: PUSH
12969: LD_STRING 
12971: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12972: LD_INT 1
12974: PPUSH
12975: LD_INT 3
12977: PPUSH
12978: LD_INT 1
12980: PPUSH
12981: LD_INT 2
12983: PPUSH
12984: CALL_OW 12
12988: PPUSH
12989: CALL_OW 380
// driver1 = CreateHuman ;
12993: LD_ADDR_EXP 17
12997: PUSH
12998: CALL_OW 44
13002: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13003: LD_EXP 17
13007: PPUSH
13008: LD_EXP 15
13012: PPUSH
13013: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13017: LD_ADDR_OWVAR 26
13021: PUSH
13022: LD_STRING Nikolai Andreyev
13024: ST_TO_ADDR
// driver2 = CreateHuman ;
13025: LD_ADDR_EXP 18
13029: PUSH
13030: CALL_OW 44
13034: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13035: LD_EXP 18
13039: PPUSH
13040: LD_EXP 16
13044: PPUSH
13045: CALL_OW 52
// end ;
13049: LD_VAR 0 1
13053: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
13054: LD_INT 0
13056: PPUSH
13057: PPUSH
13058: PPUSH
13059: PPUSH
13060: PPUSH
13061: PPUSH
13062: PPUSH
// uc_side = 3 ;
13063: LD_ADDR_OWVAR 20
13067: PUSH
13068: LD_INT 3
13070: ST_TO_ADDR
// uc_nation = 3 ;
13071: LD_ADDR_OWVAR 21
13075: PUSH
13076: LD_INT 3
13078: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
13079: LD_ADDR_VAR 0 4
13083: PUSH
13084: DOUBLE
13085: LD_INT 1
13087: DEC
13088: ST_TO_ADDR
13089: LD_VAR 0 1
13093: PUSH
13094: LD_INT 1
13096: PPUSH
13097: LD_INT 3
13099: PPUSH
13100: CALL_OW 12
13104: PLUS
13105: PUSH
13106: FOR_TO
13107: IFFALSE 13284
// begin vc_engine = 1 ;
13109: LD_ADDR_OWVAR 39
13113: PUSH
13114: LD_INT 1
13116: ST_TO_ADDR
// vc_control = 1 ;
13117: LD_ADDR_OWVAR 38
13121: PUSH
13122: LD_INT 1
13124: ST_TO_ADDR
// vc_weapon = 42 ;
13125: LD_ADDR_OWVAR 40
13129: PUSH
13130: LD_INT 42
13132: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
13133: LD_ADDR_OWVAR 37
13137: PUSH
13138: LD_INT 21
13140: PUSH
13141: LD_INT 22
13143: PUSH
13144: LD_INT 22
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: LIST
13151: PUSH
13152: LD_OWVAR 67
13156: ARRAY
13157: ST_TO_ADDR
// veh = CreateVehicle ;
13158: LD_ADDR_VAR 0 5
13162: PUSH
13163: CALL_OW 45
13167: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13168: LD_VAR 0 5
13172: PPUSH
13173: LD_VAR 0 2
13177: PPUSH
13178: LD_INT 0
13180: PPUSH
13181: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13185: LD_ADDR_EXP 26
13189: PUSH
13190: LD_EXP 26
13194: PUSH
13195: LD_VAR 0 5
13199: ADD
13200: ST_TO_ADDR
// hc_gallery =  ;
13201: LD_ADDR_OWVAR 33
13205: PUSH
13206: LD_STRING 
13208: ST_TO_ADDR
// hc_name =  ;
13209: LD_ADDR_OWVAR 26
13213: PUSH
13214: LD_STRING 
13216: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13217: LD_INT 0
13219: PPUSH
13220: LD_INT 3
13222: PPUSH
13223: LD_EXP 13
13227: PPUSH
13228: LD_EXP 14
13232: PPUSH
13233: CALL_OW 12
13237: PPUSH
13238: CALL_OW 380
// un = CreateHuman ;
13242: LD_ADDR_VAR 0 6
13246: PUSH
13247: CALL_OW 44
13251: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13252: LD_VAR 0 6
13256: PPUSH
13257: LD_VAR 0 5
13261: PPUSH
13262: CALL_OW 52
// attackGroup = attackGroup ^ un ;
13266: LD_ADDR_EXP 26
13270: PUSH
13271: LD_EXP 26
13275: PUSH
13276: LD_VAR 0 6
13280: ADD
13281: ST_TO_ADDR
// end ;
13282: GO 13106
13284: POP
13285: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13286: LD_INT 0
13288: PPUSH
13289: LD_INT 2
13291: PPUSH
13292: LD_EXP 13
13296: PPUSH
13297: LD_EXP 14
13301: PPUSH
13302: CALL_OW 12
13306: PPUSH
13307: CALL_OW 380
// un = CreateHuman ;
13311: LD_ADDR_VAR 0 6
13315: PUSH
13316: CALL_OW 44
13320: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13321: LD_ADDR_VAR 0 4
13325: PUSH
13326: DOUBLE
13327: LD_INT 1
13329: DEC
13330: ST_TO_ADDR
13331: LD_VAR 0 1
13335: PUSH
13336: LD_INT 2
13338: PUSH
13339: LD_INT 2
13341: MUL
13342: PLUS
13343: PUSH
13344: FOR_TO
13345: IFFALSE 13433
// begin hc_gallery =  ;
13347: LD_ADDR_OWVAR 33
13351: PUSH
13352: LD_STRING 
13354: ST_TO_ADDR
// hc_name =  ;
13355: LD_ADDR_OWVAR 26
13359: PUSH
13360: LD_STRING 
13362: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13363: LD_INT 1
13365: PPUSH
13366: LD_INT 1
13368: PPUSH
13369: LD_EXP 13
13373: PPUSH
13374: LD_EXP 14
13378: PPUSH
13379: CALL_OW 12
13383: PPUSH
13384: CALL_OW 380
// un = CreateHuman ;
13388: LD_ADDR_VAR 0 6
13392: PUSH
13393: CALL_OW 44
13397: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13398: LD_VAR 0 6
13402: PPUSH
13403: LD_VAR 0 2
13407: PPUSH
13408: LD_INT 0
13410: PPUSH
13411: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13415: LD_ADDR_EXP 26
13419: PUSH
13420: LD_EXP 26
13424: PUSH
13425: LD_VAR 0 6
13429: ADD
13430: ST_TO_ADDR
// end ;
13431: GO 13344
13433: POP
13434: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13435: LD_ADDR_VAR 0 7
13439: PUSH
13440: LD_INT 26
13442: PPUSH
13443: LD_INT 22
13445: PUSH
13446: LD_INT 3
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: LD_INT 21
13455: PUSH
13456: LD_INT 1
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 26
13465: PUSH
13466: LD_INT 1
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: LIST
13477: PPUSH
13478: CALL_OW 70
13482: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13483: LD_VAR 0 7
13487: PUSH
13488: LD_INT 1
13490: ARRAY
13491: PPUSH
13492: LD_STRING D9-Rus3-1
13494: PPUSH
13495: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13499: LD_VAR 0 7
13503: PUSH
13504: LD_INT 2
13506: ARRAY
13507: PPUSH
13508: LD_STRING D9-Russ-1
13510: PPUSH
13511: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13515: LD_INT 35
13517: PPUSH
13518: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13522: LD_ADDR_VAR 0 4
13526: PUSH
13527: LD_INT 26
13529: PPUSH
13530: LD_INT 22
13532: PUSH
13533: LD_INT 3
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: EMPTY
13541: LIST
13542: PPUSH
13543: CALL_OW 70
13547: PUSH
13548: FOR_IN
13549: IFFALSE 13721
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13551: LD_ADDR_VAR 0 8
13555: PUSH
13556: LD_INT 22
13558: PUSH
13559: LD_INT 1
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: PPUSH
13566: CALL_OW 69
13570: PPUSH
13571: LD_VAR 0 4
13575: PPUSH
13576: CALL_OW 74
13580: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13581: LD_ADDR_VAR 0 9
13585: PUSH
13586: LD_INT 22
13588: PUSH
13589: LD_INT 1
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PUSH
13596: LD_INT 2
13598: PUSH
13599: LD_INT 59
13601: PUSH
13602: EMPTY
13603: LIST
13604: PUSH
13605: LD_INT 21
13607: PUSH
13608: LD_INT 1
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: PUSH
13615: LD_INT 21
13617: PUSH
13618: LD_INT 2
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PUSH
13635: EMPTY
13636: LIST
13637: PPUSH
13638: CALL_OW 69
13642: PPUSH
13643: LD_VAR 0 4
13647: PPUSH
13648: CALL_OW 74
13652: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13653: LD_VAR 0 4
13657: PPUSH
13658: LD_VAR 0 8
13662: PPUSH
13663: CALL_OW 296
13667: PUSH
13668: LD_INT 8
13670: PLUS
13671: PUSH
13672: LD_VAR 0 4
13676: PPUSH
13677: LD_VAR 0 9
13681: PPUSH
13682: CALL_OW 296
13686: LESS
13687: IFFALSE 13705
// begin ComAttackUnit ( i , target1 ) ;
13689: LD_VAR 0 4
13693: PPUSH
13694: LD_VAR 0 8
13698: PPUSH
13699: CALL_OW 115
// end else
13703: GO 13719
// begin ComAttackUnit ( i , target2 ) ;
13705: LD_VAR 0 4
13709: PPUSH
13710: LD_VAR 0 9
13714: PPUSH
13715: CALL_OW 115
// end ; end ;
13719: GO 13548
13721: POP
13722: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13723: LD_INT 26
13725: PPUSH
13726: LD_INT 22
13728: PUSH
13729: LD_INT 3
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: LD_INT 2
13738: PUSH
13739: LD_INT 21
13741: PUSH
13742: LD_INT 1
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: PUSH
13749: LD_INT 21
13751: PUSH
13752: LD_INT 2
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: PUSH
13759: LD_INT 59
13761: PUSH
13762: EMPTY
13763: LIST
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PPUSH
13775: CALL_OW 70
13779: PUSH
13780: LD_INT 0
13782: EQUAL
13783: IFFALSE 13515
// end ; end_of_file
13785: LD_VAR 0 3
13789: RET
// every 0 0$1 do
13790: GO 13792
13792: DISABLE
// begin enable ;
13793: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13794: LD_INT 3
13796: PPUSH
13797: LD_INT 1
13799: PPUSH
13800: LD_INT 22
13802: PPUSH
13803: CALL 8827 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13807: LD_INT 3
13809: PPUSH
13810: LD_INT 20
13812: PPUSH
13813: LD_INT 22
13815: PPUSH
13816: LD_INT 23
13818: PPUSH
13819: CALL 9073 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13823: LD_INT 3
13825: PPUSH
13826: LD_INT 21
13828: PPUSH
13829: LD_INT 23
13831: PPUSH
13832: CALL 9350 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13836: LD_INT 22
13838: PPUSH
13839: LD_INT 1
13841: PPUSH
13842: LD_EXP 24
13846: PPUSH
13847: LD_INT 2
13849: PPUSH
13850: LD_INT 3
13852: PPUSH
13853: CALL 9822 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13857: LD_INT 23
13859: PPUSH
13860: LD_INT 1
13862: PPUSH
13863: LD_EXP 25
13867: PPUSH
13868: LD_INT 33
13870: PPUSH
13871: LD_INT 1
13873: PPUSH
13874: CALL 9822 0 5
// end ; end_of_file
13878: END
// on UnitDestroyed ( unit ) do begin if GetBType ( unit ) = b_depot then
13879: LD_VAR 0 1
13883: PPUSH
13884: CALL_OW 266
13888: PUSH
13889: LD_INT 0
13891: EQUAL
13892: IFFALSE 13901
// YouLost ( DepotDestroyed ) ;
13894: LD_STRING DepotDestroyed
13896: PPUSH
13897: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13901: LD_VAR 0 1
13905: PPUSH
13906: CALL_OW 255
13910: PUSH
13911: LD_INT 1
13913: EQUAL
13914: PUSH
13915: LD_VAR 0 1
13919: PPUSH
13920: CALL_OW 247
13924: PUSH
13925: LD_INT 1
13927: EQUAL
13928: AND
13929: IFFALSE 13945
// deadsCounter = deadsCounter + 1 ;
13931: LD_ADDR_EXP 31
13935: PUSH
13936: LD_EXP 31
13940: PUSH
13941: LD_INT 1
13943: PLUS
13944: ST_TO_ADDR
// end ;
13945: PPOPN 1
13947: END
// on Command ( comandid ) do var i , j , tmp ;
13948: LD_INT 0
13950: PPUSH
13951: PPUSH
13952: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13953: LD_ADDR_VAR 0 2
13957: PUSH
13958: LD_INT 22
13960: PUSH
13961: LD_INT 1
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 21
13970: PUSH
13971: LD_INT 2
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: PPUSH
13982: CALL_OW 69
13986: PUSH
13987: FOR_IN
13988: IFFALSE 14113
// begin if GetTaskList ( i ) > 0 then
13990: LD_VAR 0 2
13994: PPUSH
13995: CALL_OW 437
13999: PUSH
14000: LD_INT 0
14002: GREATER
14003: IFFALSE 14111
// begin for j = 1 to GetTaskList ( i ) do
14005: LD_ADDR_VAR 0 3
14009: PUSH
14010: DOUBLE
14011: LD_INT 1
14013: DEC
14014: ST_TO_ADDR
14015: LD_VAR 0 2
14019: PPUSH
14020: CALL_OW 437
14024: PUSH
14025: FOR_TO
14026: IFFALSE 14109
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14028: LD_ADDR_VAR 0 4
14032: PUSH
14033: LD_VAR 0 2
14037: PPUSH
14038: CALL_OW 437
14042: PUSH
14043: LD_VAR 0 3
14047: ARRAY
14048: PUSH
14049: LD_INT 4
14051: ARRAY
14052: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14053: LD_VAR 0 4
14057: PPUSH
14058: CALL_OW 255
14062: PUSH
14063: LD_INT 3
14065: EQUAL
14066: PUSH
14067: LD_VAR 0 4
14071: PPUSH
14072: CALL_OW 247
14076: PUSH
14077: LD_INT 2
14079: EQUAL
14080: AND
14081: PUSH
14082: LD_VAR 0 4
14086: PPUSH
14087: CALL_OW 264
14091: PUSH
14092: LD_INT 51
14094: EQUAL
14095: AND
14096: IFFALSE 14107
// ComStop ( i ) ;
14098: LD_VAR 0 2
14102: PPUSH
14103: CALL_OW 141
// end ;
14107: GO 14025
14109: POP
14110: POP
// end ; end ;
14111: GO 13987
14113: POP
14114: POP
// end ;
14115: PPOPN 4
14117: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14118: LD_VAR 0 2
14122: PUSH
14123: LD_EXP 8
14127: EQUAL
14128: PUSH
14129: LD_EXP 21
14133: PUSH
14134: LD_INT 4
14136: NONEQUAL
14137: AND
14138: IFFALSE 14290
// begin if IsOk ( Mikhail ) then
14140: LD_EXP 8
14144: PPUSH
14145: CALL_OW 302
14149: IFFALSE 14157
// AskMikhail else
14151: CALL 7164 0 0
14155: GO 14290
// if IsOk ( lab1 ) then
14157: LD_INT 23
14159: PPUSH
14160: CALL_OW 302
14164: IFFALSE 14253
// begin InGameOn ;
14166: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14170: LD_EXP 8
14174: PPUSH
14175: LD_INT 6
14177: PPUSH
14178: CALL_OW 235
// SetSide ( lab1 , 6 ) ;
14182: LD_INT 23
14184: PPUSH
14185: LD_INT 6
14187: PPUSH
14188: CALL_OW 235
// ComEnterUnit ( Mikhail , lab1 ) ;
14192: LD_EXP 8
14196: PPUSH
14197: LD_INT 23
14199: PPUSH
14200: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14204: LD_INT 35
14206: PPUSH
14207: CALL_OW 67
// until IsInUnit ( Mikhail ) = lab1 or IsDead ( Mikhail ) ;
14211: LD_EXP 8
14215: PPUSH
14216: CALL_OW 310
14220: PUSH
14221: LD_INT 23
14223: EQUAL
14224: PUSH
14225: LD_EXP 8
14229: PPUSH
14230: CALL_OW 301
14234: OR
14235: IFFALSE 14204
// SetSide ( lab1 , 1 ) ;
14237: LD_INT 23
14239: PPUSH
14240: LD_INT 1
14242: PPUSH
14243: CALL_OW 235
// InGameOff ;
14247: CALL_OW 9
// end else
14251: GO 14290
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14253: LD_INT 3
14255: PPUSH
14256: LD_INT 6
14258: PPUSH
14259: LD_INT 2
14261: PPUSH
14262: LD_INT 1
14264: PPUSH
14265: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14269: LD_EXP 8
14273: PPUSH
14274: LD_INT 6
14276: PPUSH
14277: CALL_OW 235
// ComHold ( Mikhail ) ;
14281: LD_EXP 8
14285: PPUSH
14286: CALL_OW 140
// end ; end ; end ;
14290: PPOPN 2
14292: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
14293: LD_EXP 8
14297: PPUSH
14298: CALL_OW 257
14302: PUSH
14303: LD_INT 3
14305: NONEQUAL
14306: IFFALSE 14324
14308: GO 14310
14310: DISABLE
// begin enable ;
14311: ENABLE
// SetClass ( Mikhail , 3 ) ;
14312: LD_EXP 8
14316: PPUSH
14317: LD_INT 3
14319: PPUSH
14320: CALL_OW 336
// end ; end_of_file
14324: END
// every 0 0$1 trigger IsDead ( JMM ) do
14325: LD_EXP 1
14329: PPUSH
14330: CALL_OW 301
14334: IFFALSE 14346
14336: GO 14338
14338: DISABLE
// YouLost ( JMM ) ;
14339: LD_STRING JMM
14341: PPUSH
14342: CALL_OW 104
14346: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14347: LD_INT 22
14349: PUSH
14350: LD_INT 1
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: LD_INT 21
14359: PUSH
14360: LD_INT 1
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: LD_INT 25
14369: PUSH
14370: LD_INT 2
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: LIST
14381: PPUSH
14382: CALL_OW 69
14386: PUSH
14387: LD_INT 0
14389: EQUAL
14390: PUSH
14391: LD_INT 22
14393: PUSH
14394: LD_INT 4
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: PUSH
14401: LD_INT 21
14403: PUSH
14404: LD_INT 1
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: PUSH
14411: LD_INT 25
14413: PUSH
14414: LD_INT 2
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: LIST
14425: PPUSH
14426: CALL_OW 69
14430: PUSH
14431: LD_INT 0
14433: EQUAL
14434: AND
14435: PUSH
14436: LD_INT 1
14438: PPUSH
14439: CALL_OW 255
14443: PUSH
14444: LD_INT 3
14446: EQUAL
14447: AND
14448: PUSH
14449: LD_INT 10
14451: PPUSH
14452: CALL_OW 255
14456: PUSH
14457: LD_INT 3
14459: EQUAL
14460: AND
14461: IFFALSE 14473
14463: GO 14465
14465: DISABLE
// YouLost ( Engineer ) ;
14466: LD_STRING Engineer
14468: PPUSH
14469: CALL_OW 104
14473: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14474: LD_INT 1
14476: PPUSH
14477: CALL_OW 255
14481: PUSH
14482: LD_INT 3
14484: EQUAL
14485: PUSH
14486: LD_EXP 27
14490: PUSH
14491: LD_INT 1
14493: EQUAL
14494: AND
14495: IFFALSE 14507
14497: GO 14499
14499: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14500: LD_STRING DepotCaptured
14502: PPUSH
14503: CALL_OW 104
14507: END
// export function PrepareTigers ; var i , un ; begin
14508: LD_INT 0
14510: PPUSH
14511: PPUSH
14512: PPUSH
// for i = 1 to Difficulty do
14513: LD_ADDR_VAR 0 2
14517: PUSH
14518: DOUBLE
14519: LD_INT 1
14521: DEC
14522: ST_TO_ADDR
14523: LD_OWVAR 67
14527: PUSH
14528: FOR_TO
14529: IFFALSE 14664
// begin hc_sex = sex_male ;
14531: LD_ADDR_OWVAR 27
14535: PUSH
14536: LD_INT 1
14538: ST_TO_ADDR
// uc_side = 0 ;
14539: LD_ADDR_OWVAR 20
14543: PUSH
14544: LD_INT 0
14546: ST_TO_ADDR
// uc_nation = nation_nature ;
14547: LD_ADDR_OWVAR 21
14551: PUSH
14552: LD_INT 0
14554: ST_TO_ADDR
// hc_class = class_tiger ;
14555: LD_ADDR_OWVAR 28
14559: PUSH
14560: LD_INT 14
14562: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14563: LD_ADDR_OWVAR 31
14567: PUSH
14568: LD_EXP 14
14572: PUSH
14573: LD_INT 0
14575: PUSH
14576: LD_INT 0
14578: PUSH
14579: LD_INT 0
14581: PUSH
14582: EMPTY
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14588: LD_ADDR_OWVAR 35
14592: PUSH
14593: LD_INT 30
14595: PPUSH
14596: LD_INT 40
14598: PPUSH
14599: CALL_OW 12
14603: PUSH
14604: LD_INT 40
14606: PPUSH
14607: LD_INT 50
14609: PPUSH
14610: CALL_OW 12
14614: PUSH
14615: LD_INT 50
14617: PPUSH
14618: LD_INT 60
14620: PPUSH
14621: CALL_OW 12
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: LIST
14630: PUSH
14631: LD_OWVAR 67
14635: ARRAY
14636: ST_TO_ADDR
// un = CreateHuman ;
14637: LD_ADDR_VAR 0 3
14641: PUSH
14642: CALL_OW 44
14646: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14647: LD_VAR 0 3
14651: PPUSH
14652: LD_INT 27
14654: PPUSH
14655: LD_INT 0
14657: PPUSH
14658: CALL_OW 49
// end ;
14662: GO 14528
14664: POP
14665: POP
// end ; end_of_file
14666: LD_VAR 0 1
14670: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
14671: LD_INT 1
14673: PPUSH
14674: CALL_OW 255
14678: PUSH
14679: LD_INT 1
14681: EQUAL
14682: PUSH
14683: LD_INT 10
14685: PPUSH
14686: CALL_OW 255
14690: PUSH
14691: LD_INT 1
14693: EQUAL
14694: AND
14695: PUSH
14696: LD_EXP 20
14700: PUSH
14701: LD_INT 1
14703: EQUAL
14704: AND
14705: PUSH
14706: LD_INT 22
14708: PUSH
14709: LD_INT 3
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PUSH
14716: LD_INT 21
14718: PUSH
14719: LD_INT 2
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: PUSH
14726: LD_INT 34
14728: PUSH
14729: LD_INT 51
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: PUSH
14736: LD_INT 3
14738: PUSH
14739: LD_INT 58
14741: PUSH
14742: EMPTY
14743: LIST
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: PPUSH
14755: CALL_OW 69
14759: PUSH
14760: LD_INT 0
14762: EQUAL
14763: AND
14764: IFFALSE 14855
14766: GO 14768
14768: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14769: LD_INT 9450
14771: PUSH
14772: LD_INT 8400
14774: PUSH
14775: LD_INT 6300
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: LIST
14782: PUSH
14783: LD_OWVAR 67
14787: ARRAY
14788: PPUSH
14789: CALL_OW 67
// if cargoEscape = 1 then
14793: LD_EXP 20
14797: PUSH
14798: LD_INT 1
14800: EQUAL
14801: IFFALSE 14855
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14803: LD_EXP 9
14807: PPUSH
14808: LD_STRING D6-Pow-1
14810: PPUSH
14811: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14815: LD_EXP 1
14819: PPUSH
14820: LD_STRING D6-JMM-1
14822: PPUSH
14823: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14827: LD_EXP 9
14831: PPUSH
14832: LD_STRING D6-Pow-2
14834: PPUSH
14835: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14839: LD_EXP 1
14843: PPUSH
14844: LD_STRING D6-JMM-2
14846: PPUSH
14847: CALL_OW 88
// FinishMission ;
14851: CALL 15063 0 0
// end ; end ;
14855: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14856: LD_INT 1
14858: PPUSH
14859: CALL_OW 255
14863: PUSH
14864: LD_INT 1
14866: EQUAL
14867: PUSH
14868: LD_INT 10
14870: PPUSH
14871: CALL_OW 255
14875: PUSH
14876: LD_INT 1
14878: EQUAL
14879: AND
14880: PUSH
14881: LD_EXP 20
14885: PUSH
14886: LD_INT 1
14888: GREATER
14889: AND
14890: IFFALSE 14957
14892: GO 14894
14894: DISABLE
14895: LD_INT 0
14897: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14898: LD_INT 11550
14900: PUSH
14901: LD_INT 10500
14903: PUSH
14904: LD_INT 9450
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: LIST
14911: PUSH
14912: LD_OWVAR 67
14916: ARRAY
14917: PPUSH
14918: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14922: LD_INT 1
14924: PUSH
14925: LD_INT 2
14927: PUSH
14928: LD_INT 3
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: LIST
14935: PUSH
14936: LD_OWVAR 67
14940: ARRAY
14941: PPUSH
14942: LD_INT 13
14944: PPUSH
14945: CALL 13054 0 2
// lastBattle = 1 ;
14949: LD_ADDR_EXP 27
14953: PUSH
14954: LD_INT 1
14956: ST_TO_ADDR
// end ;
14957: PPOPN 1
14959: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14960: LD_EXP 27
14964: PUSH
14965: LD_INT 1
14967: EQUAL
14968: PUSH
14969: LD_INT 26
14971: PPUSH
14972: LD_INT 22
14974: PUSH
14975: LD_INT 3
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 21
14984: PUSH
14985: LD_INT 1
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PPUSH
14996: CALL_OW 70
15000: PUSH
15001: LD_INT 0
15003: EQUAL
15004: AND
15005: IFFALSE 15062
15007: GO 15009
15009: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15010: LD_EXP 9
15014: PPUSH
15015: LD_STRING D6-Pow-1
15017: PPUSH
15018: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15022: LD_EXP 1
15026: PPUSH
15027: LD_STRING D6-JMM-1
15029: PPUSH
15030: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15034: LD_EXP 9
15038: PPUSH
15039: LD_STRING D6-Pow-2
15041: PPUSH
15042: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15046: LD_EXP 1
15050: PPUSH
15051: LD_STRING D6-JMM-2
15053: PPUSH
15054: CALL_OW 88
// FinishMission ;
15058: CALL 15063 0 0
// end ;
15062: END
// export function FinishMission ; var tmp ; begin
15063: LD_INT 0
15065: PPUSH
15066: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15067: LD_ADDR_VAR 0 2
15071: PUSH
15072: LD_INT 22
15074: PUSH
15075: LD_INT 1
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: PUSH
15082: LD_INT 21
15084: PUSH
15085: LD_INT 2
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: PUSH
15092: LD_INT 24
15094: PUSH
15095: LD_INT 251
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: LIST
15106: PPUSH
15107: CALL_OW 69
15111: ST_TO_ADDR
// if tmp then
15112: LD_VAR 0 2
15116: IFFALSE 15130
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15118: LD_VAR 0 2
15122: PPUSH
15123: LD_STRING 02_tanks_1
15125: PPUSH
15126: CALL 10527 0 2
// if mikhailStatus = 1 then
15130: LD_EXP 21
15134: PUSH
15135: LD_INT 1
15137: EQUAL
15138: IFFALSE 15152
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15140: LD_EXP 21
15144: PPUSH
15145: LD_STRING 02_mikhailStatus_1
15147: PPUSH
15148: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15152: LD_INT 1
15154: PPUSH
15155: CALL_OW 274
15159: PPUSH
15160: LD_INT 1
15162: PPUSH
15163: CALL_OW 275
15167: PPUSH
15168: LD_STRING 02_resources_4
15170: PPUSH
15171: CALL_OW 39
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15175: LD_INT 1
15177: PPUSH
15178: CALL_OW 274
15182: PPUSH
15183: LD_INT 1
15185: PPUSH
15186: CALL_OW 275
15190: PUSH
15191: LD_INT 200
15193: GREATEREQUAL
15194: IFFALSE 15208
// begin AddMedal ( Cans , 1 ) ;
15196: LD_STRING Cans
15198: PPUSH
15199: LD_INT 1
15201: PPUSH
15202: CALL_OW 101
// end else
15206: GO 15219
// begin AddMedal ( Cans , - 1 ) ;
15208: LD_STRING Cans
15210: PPUSH
15211: LD_INT 1
15213: NEG
15214: PPUSH
15215: CALL_OW 101
// end ; if deadsCounter < 2 then
15219: LD_EXP 31
15223: PUSH
15224: LD_INT 2
15226: LESS
15227: IFFALSE 15241
// begin AddMedal ( Deaths , 1 ) ;
15229: LD_STRING Deaths
15231: PPUSH
15232: LD_INT 1
15234: PPUSH
15235: CALL_OW 101
// end else
15239: GO 15252
// begin AddMedal ( Deaths , - 1 ) ;
15241: LD_STRING Deaths
15243: PPUSH
15244: LD_INT 1
15246: NEG
15247: PPUSH
15248: CALL_OW 101
// end ; if mikhailStatus = 0 then
15252: LD_EXP 21
15256: PUSH
15257: LD_INT 0
15259: EQUAL
15260: IFFALSE 15273
// AddMedal ( Prisoner , - 1 ) ;
15262: LD_STRING Prisoner
15264: PPUSH
15265: LD_INT 1
15267: NEG
15268: PPUSH
15269: CALL_OW 101
// if mikhailStatus = 1 then
15273: LD_EXP 21
15277: PUSH
15278: LD_INT 1
15280: EQUAL
15281: IFFALSE 15293
// AddMedal ( Prisoner , 1 ) ;
15283: LD_STRING Prisoner
15285: PPUSH
15286: LD_INT 1
15288: PPUSH
15289: CALL_OW 101
// if mikhailStatus = 2 then
15293: LD_EXP 21
15297: PUSH
15298: LD_INT 2
15300: EQUAL
15301: IFFALSE 15313
// AddMedal ( Prisoner , 2 ) ;
15303: LD_STRING Prisoner
15305: PPUSH
15306: LD_INT 2
15308: PPUSH
15309: CALL_OW 101
// if mikhailStatus = 3 then
15313: LD_EXP 21
15317: PUSH
15318: LD_INT 3
15320: EQUAL
15321: IFFALSE 15334
// AddMedal ( Prisoner , - 2 ) ;
15323: LD_STRING Prisoner
15325: PPUSH
15326: LD_INT 2
15328: NEG
15329: PPUSH
15330: CALL_OW 101
// GiveMedals ( MAIN ) ;
15334: LD_STRING MAIN
15336: PPUSH
15337: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15341: LD_INT 22
15343: PUSH
15344: LD_INT 1
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: LD_INT 23
15353: PUSH
15354: LD_INT 1
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: LD_INT 21
15363: PUSH
15364: LD_INT 1
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: LIST
15375: PPUSH
15376: CALL_OW 69
15380: PPUSH
15381: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15385: LD_EXP 1
15389: PPUSH
15390: LD_EXP 33
15394: PUSH
15395: LD_STRING JMM
15397: STR
15398: PPUSH
15399: CALL_OW 38
// if IsOK ( Bobby ) then
15403: LD_EXP 2
15407: PPUSH
15408: CALL_OW 302
15412: IFFALSE 15432
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15414: LD_EXP 2
15418: PPUSH
15419: LD_EXP 33
15423: PUSH
15424: LD_STRING Bobby
15426: STR
15427: PPUSH
15428: CALL_OW 38
// if IsOK ( Cyrus ) then
15432: LD_EXP 3
15436: PPUSH
15437: CALL_OW 302
15441: IFFALSE 15461
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15443: LD_EXP 3
15447: PPUSH
15448: LD_EXP 33
15452: PUSH
15453: LD_STRING Cyrus
15455: STR
15456: PPUSH
15457: CALL_OW 38
// if IsOK ( Lisa ) then
15461: LD_EXP 4
15465: PPUSH
15466: CALL_OW 302
15470: IFFALSE 15490
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15472: LD_EXP 4
15476: PPUSH
15477: LD_EXP 33
15481: PUSH
15482: LD_STRING Lisa
15484: STR
15485: PPUSH
15486: CALL_OW 38
// if IsOK ( Khatam ) then
15490: LD_EXP 5
15494: PPUSH
15495: CALL_OW 302
15499: IFFALSE 15519
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15501: LD_EXP 5
15505: PPUSH
15506: LD_EXP 33
15510: PUSH
15511: LD_STRING Khatam
15513: STR
15514: PPUSH
15515: CALL_OW 38
// if IsOK ( Brian ) then
15519: LD_EXP 6
15523: PPUSH
15524: CALL_OW 302
15528: IFFALSE 15548
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
15530: LD_EXP 6
15534: PPUSH
15535: LD_EXP 33
15539: PUSH
15540: LD_STRING Brian
15542: STR
15543: PPUSH
15544: CALL_OW 38
// if IsOk ( Jerry ) then
15548: LD_EXP 7
15552: PPUSH
15553: CALL_OW 302
15557: IFFALSE 15577
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15559: LD_EXP 7
15563: PPUSH
15564: LD_EXP 33
15568: PUSH
15569: LD_STRING Jerry
15571: STR
15572: PPUSH
15573: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
15577: LD_EXP 21
15581: PUSH
15582: LD_INT 1
15584: EQUAL
15585: PUSH
15586: LD_EXP 8
15590: PPUSH
15591: CALL_OW 255
15595: PUSH
15596: LD_INT 1
15598: EQUAL
15599: AND
15600: PUSH
15601: LD_EXP 8
15605: PPUSH
15606: CALL_OW 302
15610: AND
15611: IFFALSE 15631
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15613: LD_EXP 8
15617: PPUSH
15618: LD_EXP 33
15622: PUSH
15623: LD_STRING Mikhail
15625: STR
15626: PPUSH
15627: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15631: LD_INT 50
15633: PUSH
15634: EMPTY
15635: LIST
15636: PUSH
15637: LD_INT 22
15639: PUSH
15640: LD_INT 1
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 21
15649: PUSH
15650: LD_INT 1
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: LIST
15661: PPUSH
15662: CALL_OW 69
15666: PUSH
15667: LD_EXP 1
15671: PUSH
15672: LD_EXP 2
15676: PUSH
15677: LD_EXP 3
15681: PUSH
15682: LD_EXP 4
15686: PUSH
15687: LD_EXP 5
15691: PUSH
15692: LD_EXP 6
15696: PUSH
15697: LD_EXP 7
15701: PUSH
15702: LD_EXP 8
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: DIFF
15717: PPUSH
15718: LD_STRING 02_other_survivors
15720: PPUSH
15721: CALL_OW 38
// YouWin ;
15725: CALL_OW 103
// end ; end_of_file
15729: LD_VAR 0 1
15733: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
15734: GO 15736
15736: DISABLE
// begin ru_radar := 98 ;
15737: LD_ADDR_EXP 35
15741: PUSH
15742: LD_INT 98
15744: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
15745: LD_ADDR_EXP 36
15749: PUSH
15750: LD_INT 89
15752: ST_TO_ADDR
// us_hack := 99 ;
15753: LD_ADDR_EXP 37
15757: PUSH
15758: LD_INT 99
15760: ST_TO_ADDR
// us_artillery := 97 ;
15761: LD_ADDR_EXP 38
15765: PUSH
15766: LD_INT 97
15768: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15769: LD_ADDR_EXP 39
15773: PUSH
15774: LD_INT 91
15776: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
15777: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
15778: LD_INT 0
15780: PPUSH
15781: PPUSH
15782: PPUSH
15783: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15784: LD_VAR 0 1
15788: PPUSH
15789: CALL_OW 264
15793: PUSH
15794: LD_EXP 39
15798: EQUAL
15799: IFFALSE 15871
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15801: LD_INT 68
15803: PPUSH
15804: LD_VAR 0 1
15808: PPUSH
15809: CALL_OW 255
15813: PPUSH
15814: CALL_OW 321
15818: PUSH
15819: LD_INT 2
15821: EQUAL
15822: IFFALSE 15834
// eff := 70 else
15824: LD_ADDR_VAR 0 6
15828: PUSH
15829: LD_INT 70
15831: ST_TO_ADDR
15832: GO 15842
// eff := 30 ;
15834: LD_ADDR_VAR 0 6
15838: PUSH
15839: LD_INT 30
15841: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15842: LD_VAR 0 1
15846: PPUSH
15847: CALL_OW 250
15851: PPUSH
15852: LD_VAR 0 1
15856: PPUSH
15857: CALL_OW 251
15861: PPUSH
15862: LD_VAR 0 6
15866: PPUSH
15867: CALL_OW 495
// end ; end ;
15871: LD_VAR 0 4
15875: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
15876: LD_INT 0
15878: PPUSH
15879: PPUSH
15880: PPUSH
15881: PPUSH
15882: PPUSH
15883: PPUSH
// if cmd = 124 then
15884: LD_VAR 0 1
15888: PUSH
15889: LD_INT 124
15891: EQUAL
15892: IFFALSE 16098
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
15894: LD_ADDR_VAR 0 5
15898: PUSH
15899: LD_INT 2
15901: PUSH
15902: LD_INT 34
15904: PUSH
15905: LD_INT 53
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PUSH
15912: LD_INT 34
15914: PUSH
15915: LD_INT 14
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: LIST
15926: PPUSH
15927: CALL_OW 69
15931: ST_TO_ADDR
// if not tmp then
15932: LD_VAR 0 5
15936: NOT
15937: IFFALSE 15941
// exit ;
15939: GO 16098
// for i in tmp do
15941: LD_ADDR_VAR 0 3
15945: PUSH
15946: LD_VAR 0 5
15950: PUSH
15951: FOR_IN
15952: IFFALSE 16096
// begin taskList := GetTaskList ( i ) ;
15954: LD_ADDR_VAR 0 6
15958: PUSH
15959: LD_VAR 0 3
15963: PPUSH
15964: CALL_OW 437
15968: ST_TO_ADDR
// if not taskList then
15969: LD_VAR 0 6
15973: NOT
15974: IFFALSE 15978
// continue ;
15976: GO 15951
// for j = 1 to taskList do
15978: LD_ADDR_VAR 0 4
15982: PUSH
15983: DOUBLE
15984: LD_INT 1
15986: DEC
15987: ST_TO_ADDR
15988: LD_VAR 0 6
15992: PUSH
15993: FOR_TO
15994: IFFALSE 16092
// if taskList [ j ] [ 1 ] = | then
15996: LD_VAR 0 6
16000: PUSH
16001: LD_VAR 0 4
16005: ARRAY
16006: PUSH
16007: LD_INT 1
16009: ARRAY
16010: PUSH
16011: LD_STRING |
16013: EQUAL
16014: IFFALSE 16090
// begin _taskList := Delete ( taskList , 1 ) ;
16016: LD_ADDR_VAR 0 7
16020: PUSH
16021: LD_VAR 0 6
16025: PPUSH
16026: LD_INT 1
16028: PPUSH
16029: CALL_OW 3
16033: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
16034: LD_VAR 0 3
16038: PPUSH
16039: LD_VAR 0 7
16043: PPUSH
16044: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
16048: LD_VAR 0 3
16052: PPUSH
16053: LD_VAR 0 6
16057: PUSH
16058: LD_VAR 0 4
16062: ARRAY
16063: PUSH
16064: LD_INT 2
16066: ARRAY
16067: PPUSH
16068: LD_VAR 0 6
16072: PUSH
16073: LD_VAR 0 4
16077: ARRAY
16078: PUSH
16079: LD_INT 3
16081: ARRAY
16082: PPUSH
16083: LD_INT 8
16085: PPUSH
16086: CALL 16103 0 4
// end ;
16090: GO 15993
16092: POP
16093: POP
// end ;
16094: GO 15951
16096: POP
16097: POP
// end ; end ;
16098: LD_VAR 0 2
16102: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16103: LD_INT 0
16105: PPUSH
16106: PPUSH
16107: PPUSH
16108: PPUSH
16109: PPUSH
16110: PPUSH
16111: PPUSH
16112: PPUSH
16113: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
16114: LD_VAR 0 1
16118: NOT
16119: PUSH
16120: LD_VAR 0 2
16124: PPUSH
16125: LD_VAR 0 3
16129: PPUSH
16130: CALL_OW 488
16134: NOT
16135: OR
16136: PUSH
16137: LD_VAR 0 4
16141: NOT
16142: OR
16143: IFFALSE 16147
// exit ;
16145: GO 16487
// list := [ ] ;
16147: LD_ADDR_VAR 0 13
16151: PUSH
16152: EMPTY
16153: ST_TO_ADDR
// if x - r < 0 then
16154: LD_VAR 0 2
16158: PUSH
16159: LD_VAR 0 4
16163: MINUS
16164: PUSH
16165: LD_INT 0
16167: LESS
16168: IFFALSE 16180
// min_x := 0 else
16170: LD_ADDR_VAR 0 7
16174: PUSH
16175: LD_INT 0
16177: ST_TO_ADDR
16178: GO 16196
// min_x := x - r ;
16180: LD_ADDR_VAR 0 7
16184: PUSH
16185: LD_VAR 0 2
16189: PUSH
16190: LD_VAR 0 4
16194: MINUS
16195: ST_TO_ADDR
// if y - r < 0 then
16196: LD_VAR 0 3
16200: PUSH
16201: LD_VAR 0 4
16205: MINUS
16206: PUSH
16207: LD_INT 0
16209: LESS
16210: IFFALSE 16222
// min_y := 0 else
16212: LD_ADDR_VAR 0 8
16216: PUSH
16217: LD_INT 0
16219: ST_TO_ADDR
16220: GO 16238
// min_y := y - r ;
16222: LD_ADDR_VAR 0 8
16226: PUSH
16227: LD_VAR 0 3
16231: PUSH
16232: LD_VAR 0 4
16236: MINUS
16237: ST_TO_ADDR
// max_x := x + r ;
16238: LD_ADDR_VAR 0 9
16242: PUSH
16243: LD_VAR 0 2
16247: PUSH
16248: LD_VAR 0 4
16252: PLUS
16253: ST_TO_ADDR
// max_y := y + r ;
16254: LD_ADDR_VAR 0 10
16258: PUSH
16259: LD_VAR 0 3
16263: PUSH
16264: LD_VAR 0 4
16268: PLUS
16269: ST_TO_ADDR
// for _x = min_x to max_x do
16270: LD_ADDR_VAR 0 11
16274: PUSH
16275: DOUBLE
16276: LD_VAR 0 7
16280: DEC
16281: ST_TO_ADDR
16282: LD_VAR 0 9
16286: PUSH
16287: FOR_TO
16288: IFFALSE 16405
// for _y = min_y to max_y do
16290: LD_ADDR_VAR 0 12
16294: PUSH
16295: DOUBLE
16296: LD_VAR 0 8
16300: DEC
16301: ST_TO_ADDR
16302: LD_VAR 0 10
16306: PUSH
16307: FOR_TO
16308: IFFALSE 16401
// begin if not ValidHex ( _x , _y ) then
16310: LD_VAR 0 11
16314: PPUSH
16315: LD_VAR 0 12
16319: PPUSH
16320: CALL_OW 488
16324: NOT
16325: IFFALSE 16329
// continue ;
16327: GO 16307
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16329: LD_VAR 0 11
16333: PPUSH
16334: LD_VAR 0 12
16338: PPUSH
16339: CALL_OW 351
16343: PUSH
16344: LD_VAR 0 11
16348: PPUSH
16349: LD_VAR 0 12
16353: PPUSH
16354: CALL_OW 554
16358: AND
16359: IFFALSE 16399
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16361: LD_ADDR_VAR 0 13
16365: PUSH
16366: LD_VAR 0 13
16370: PPUSH
16371: LD_VAR 0 13
16375: PUSH
16376: LD_INT 1
16378: PLUS
16379: PPUSH
16380: LD_VAR 0 11
16384: PUSH
16385: LD_VAR 0 12
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PPUSH
16394: CALL_OW 2
16398: ST_TO_ADDR
// end ;
16399: GO 16307
16401: POP
16402: POP
16403: GO 16287
16405: POP
16406: POP
// if not list then
16407: LD_VAR 0 13
16411: NOT
16412: IFFALSE 16416
// exit ;
16414: GO 16487
// for i in list do
16416: LD_ADDR_VAR 0 6
16420: PUSH
16421: LD_VAR 0 13
16425: PUSH
16426: FOR_IN
16427: IFFALSE 16485
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16429: LD_VAR 0 1
16433: PPUSH
16434: LD_STRING M
16436: PUSH
16437: LD_VAR 0 6
16441: PUSH
16442: LD_INT 1
16444: ARRAY
16445: PUSH
16446: LD_VAR 0 6
16450: PUSH
16451: LD_INT 2
16453: ARRAY
16454: PUSH
16455: LD_INT 0
16457: PUSH
16458: LD_INT 0
16460: PUSH
16461: LD_INT 0
16463: PUSH
16464: LD_INT 0
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: PUSH
16476: EMPTY
16477: LIST
16478: PPUSH
16479: CALL_OW 447
16483: GO 16426
16485: POP
16486: POP
// end ;
16487: LD_VAR 0 5
16491: RET
