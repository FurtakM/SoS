// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// PrepareDifficulty ;
 161: CALL 10341 0 0
// PrepareRussianCommander ;
 165: CALL 11797 0 0
// PrepareSouthBase ;
 169: CALL 11880 0 0
// PrepareNorthBase ;
 173: CALL 12219 0 0
// PrepareOtherRussians ;
 177: CALL 12585 0 0
// PrepareHeroes ;
 181: CALL 10656 0 0
// PrepareLisSquad ;
 185: CALL 10984 0 0
// PrepareOtherAmericans ;
 189: CALL 11329 0 0
// end ; end_of_file
 193: END
// every 1 do var tmp ;
 194: GO 196
 196: DISABLE
 197: LD_INT 0
 199: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 209: LD_ADDR_VAR 0 1
 213: PUSH
 214: LD_INT 22
 216: PUSH
 217: LD_INT 4
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 21
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: EMPTY
 231: LIST
 232: LIST
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: PPUSH
 238: CALL_OW 69
 242: PUSH
 243: LD_EXP 4
 247: PUSH
 248: EMPTY
 249: LIST
 250: DIFF
 251: ST_TO_ADDR
// if Cyrus and Bobby then
 252: LD_EXP 3
 256: PUSH
 257: LD_EXP 2
 261: AND
 262: IFFALSE 592
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 264: LD_EXP 3
 268: PPUSH
 269: LD_INT 43
 271: PPUSH
 272: LD_INT 72
 274: PPUSH
 275: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_INT 44
 286: PPUSH
 287: LD_INT 70
 289: PPUSH
 290: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 294: LD_EXP 1
 298: PPUSH
 299: LD_INT 46
 301: PPUSH
 302: LD_INT 73
 304: PPUSH
 305: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 309: LD_EXP 3
 313: PPUSH
 314: LD_STRING D1a-Cyrus-1
 316: PPUSH
 317: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 321: LD_EXP 1
 325: PPUSH
 326: LD_STRING D1a-JMM-1
 328: PPUSH
 329: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 333: LD_EXP 3
 337: PPUSH
 338: LD_INT 37
 340: PPUSH
 341: LD_INT 66
 343: PPUSH
 344: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 348: LD_EXP 2
 352: PPUSH
 353: LD_INT 41
 355: PPUSH
 356: LD_INT 67
 358: PPUSH
 359: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 363: LD_EXP 1
 367: PPUSH
 368: LD_INT 38
 370: PPUSH
 371: LD_INT 64
 373: PPUSH
 374: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 378: LD_EXP 2
 382: PPUSH
 383: LD_STRING D1a-Bobby-2
 385: PPUSH
 386: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 390: LD_EXP 3
 394: PPUSH
 395: LD_INT 35
 397: PPUSH
 398: LD_INT 62
 400: PPUSH
 401: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 405: LD_EXP 2
 409: PPUSH
 410: LD_INT 32
 412: PPUSH
 413: LD_INT 60
 415: PPUSH
 416: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 420: LD_EXP 1
 424: PPUSH
 425: LD_INT 35
 427: PPUSH
 428: LD_INT 60
 430: PPUSH
 431: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 435: LD_EXP 1
 439: PPUSH
 440: LD_STRING D1a-JMM-2
 442: PPUSH
 443: CALL_OW 88
// ComWalk ( Lisa ) ;
 447: LD_EXP 4
 451: PPUSH
 452: CALL_OW 138
// wait ( 0 0$1 ) ;
 456: LD_INT 35
 458: PPUSH
 459: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 463: LD_EXP 4
 467: PPUSH
 468: LD_EXP 1
 472: PPUSH
 473: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 477: LD_EXP 1
 481: PUSH
 482: LD_EXP 3
 486: PUSH
 487: LD_EXP 2
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: PPUSH
 497: LD_EXP 4
 501: PPUSH
 502: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 506: LD_VAR 0 1
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: LD_INT 33
 517: PPUSH
 518: LD_INT 55
 520: PPUSH
 521: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 525: LD_VAR 0 1
 529: PUSH
 530: LD_INT 2
 532: ARRAY
 533: PPUSH
 534: LD_INT 30
 536: PPUSH
 537: LD_INT 54
 539: PPUSH
 540: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 544: LD_VAR 0 1
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: PPUSH
 553: LD_EXP 1
 557: PPUSH
 558: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 562: LD_VAR 0 1
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 1
 575: PPUSH
 576: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 580: LD_EXP 4
 584: PPUSH
 585: LD_STRING D1a-Lisa-2
 587: PPUSH
 588: CALL_OW 88
// end ; if Cyrus and not Bobby then
 592: LD_EXP 3
 596: PUSH
 597: LD_EXP 2
 601: NOT
 602: AND
 603: IFFALSE 808
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 605: LD_EXP 3
 609: PPUSH
 610: LD_INT 43
 612: PPUSH
 613: LD_INT 72
 615: PPUSH
 616: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 620: LD_EXP 1
 624: PPUSH
 625: LD_INT 46
 627: PPUSH
 628: LD_INT 73
 630: PPUSH
 631: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 635: LD_EXP 3
 639: PPUSH
 640: LD_STRING D1a-Cyrus-1
 642: PPUSH
 643: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 647: LD_EXP 1
 651: PPUSH
 652: LD_STRING D1a-JMM-1
 654: PPUSH
 655: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 659: LD_EXP 3
 663: PPUSH
 664: LD_INT 37
 666: PPUSH
 667: LD_INT 66
 669: PPUSH
 670: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 674: LD_EXP 1
 678: PPUSH
 679: LD_INT 38
 681: PPUSH
 682: LD_INT 64
 684: PPUSH
 685: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 689: LD_EXP 3
 693: PPUSH
 694: LD_STRING D1a-Cyrus-2
 696: PPUSH
 697: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 701: LD_EXP 3
 705: PPUSH
 706: LD_INT 35
 708: PPUSH
 709: LD_INT 62
 711: PPUSH
 712: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 716: LD_EXP 1
 720: PPUSH
 721: LD_INT 35
 723: PPUSH
 724: LD_INT 60
 726: PPUSH
 727: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 731: LD_EXP 1
 735: PPUSH
 736: LD_STRING D1a-JMM-2
 738: PPUSH
 739: CALL_OW 88
// ComWalk ( Lisa ) ;
 743: LD_EXP 4
 747: PPUSH
 748: CALL_OW 138
// wait ( 0 0$1 ) ;
 752: LD_INT 35
 754: PPUSH
 755: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 759: LD_EXP 4
 763: PPUSH
 764: LD_EXP 1
 768: PPUSH
 769: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 773: LD_EXP 4
 777: PPUSH
 778: LD_STRING D1a-Lisa-2
 780: PPUSH
 781: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 785: LD_EXP 1
 789: PUSH
 790: LD_EXP 3
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PPUSH
 799: LD_EXP 4
 803: PPUSH
 804: CALL_OW 119
// end ; if not Cyrus and Bobby then
 808: LD_EXP 3
 812: NOT
 813: PUSH
 814: LD_EXP 2
 818: AND
 819: IFFALSE 1098
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 821: LD_EXP 2
 825: PPUSH
 826: LD_INT 44
 828: PPUSH
 829: LD_INT 70
 831: PPUSH
 832: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 836: LD_EXP 1
 840: PPUSH
 841: LD_INT 46
 843: PPUSH
 844: LD_INT 73
 846: PPUSH
 847: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 851: LD_EXP 2
 855: PPUSH
 856: LD_STRING D1a-Bobby-1
 858: PPUSH
 859: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 863: LD_EXP 1
 867: PPUSH
 868: LD_STRING D1a-JMM-1
 870: PPUSH
 871: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 875: LD_EXP 2
 879: PPUSH
 880: LD_INT 37
 882: PPUSH
 883: LD_INT 66
 885: PPUSH
 886: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 890: LD_EXP 1
 894: PPUSH
 895: LD_INT 38
 897: PPUSH
 898: LD_INT 64
 900: PPUSH
 901: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 905: LD_EXP 2
 909: PPUSH
 910: LD_STRING D1a-Bobby-2
 912: PPUSH
 913: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 917: LD_EXP 2
 921: PPUSH
 922: LD_INT 35
 924: PPUSH
 925: LD_INT 62
 927: PPUSH
 928: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 932: LD_EXP 1
 936: PPUSH
 937: LD_INT 35
 939: PPUSH
 940: LD_INT 60
 942: PPUSH
 943: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 947: LD_EXP 1
 951: PPUSH
 952: LD_STRING D1a-JMM-2
 954: PPUSH
 955: CALL_OW 88
// ComWalk ( Lisa ) ;
 959: LD_EXP 4
 963: PPUSH
 964: CALL_OW 138
// wait ( 0 0$1 ) ;
 968: LD_INT 35
 970: PPUSH
 971: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 975: LD_EXP 4
 979: PPUSH
 980: LD_EXP 1
 984: PPUSH
 985: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 989: LD_EXP 1
 993: PUSH
 994: LD_EXP 3
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PPUSH
1003: LD_EXP 4
1007: PPUSH
1008: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1012: LD_VAR 0 1
1016: PUSH
1017: LD_INT 1
1019: ARRAY
1020: PPUSH
1021: LD_INT 33
1023: PPUSH
1024: LD_INT 55
1026: PPUSH
1027: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1031: LD_VAR 0 1
1035: PUSH
1036: LD_INT 2
1038: ARRAY
1039: PPUSH
1040: LD_INT 30
1042: PPUSH
1043: LD_INT 54
1045: PPUSH
1046: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1050: LD_VAR 0 1
1054: PUSH
1055: LD_INT 1
1057: ARRAY
1058: PPUSH
1059: LD_EXP 1
1063: PPUSH
1064: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1068: LD_VAR 0 1
1072: PUSH
1073: LD_INT 2
1075: ARRAY
1076: PPUSH
1077: LD_EXP 1
1081: PPUSH
1082: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1086: LD_EXP 4
1090: PPUSH
1091: LD_STRING D1a-Lisa-2
1093: PPUSH
1094: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1098: LD_EXP 3
1102: NOT
1103: PUSH
1104: LD_EXP 2
1108: NOT
1109: AND
1110: IFFALSE 1324
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1112: LD_EXP 1
1116: PPUSH
1117: LD_INT 37
1119: PPUSH
1120: LD_INT 66
1122: PPUSH
1123: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1127: LD_EXP 1
1131: PPUSH
1132: LD_STRING D1b-JMM-1
1134: PPUSH
1135: CALL_OW 88
// ComCrawl ( JMM ) ;
1139: LD_EXP 1
1143: PPUSH
1144: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1148: LD_EXP 1
1152: PPUSH
1153: LD_INT 35
1155: PPUSH
1156: LD_INT 60
1158: PPUSH
1159: CALL_OW 171
// wait ( 0 0$8 ) ;
1163: LD_INT 280
1165: PPUSH
1166: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1170: LD_EXP 1
1174: PPUSH
1175: LD_STRING D1b-JMM-1a
1177: PPUSH
1178: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1182: LD_EXP 1
1186: PUSH
1187: LD_EXP 4
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PPUSH
1196: CALL_OW 138
// wait ( 0 0$1 ) ;
1200: LD_INT 35
1202: PPUSH
1203: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1207: LD_EXP 4
1211: PPUSH
1212: LD_EXP 1
1216: PPUSH
1217: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1221: LD_EXP 1
1225: PUSH
1226: EMPTY
1227: LIST
1228: PPUSH
1229: LD_EXP 4
1233: PPUSH
1234: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1238: LD_VAR 0 1
1242: PUSH
1243: LD_INT 1
1245: ARRAY
1246: PPUSH
1247: LD_INT 33
1249: PPUSH
1250: LD_INT 55
1252: PPUSH
1253: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1257: LD_VAR 0 1
1261: PUSH
1262: LD_INT 2
1264: ARRAY
1265: PPUSH
1266: LD_INT 30
1268: PPUSH
1269: LD_INT 54
1271: PPUSH
1272: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1276: LD_VAR 0 1
1280: PUSH
1281: LD_INT 1
1283: ARRAY
1284: PPUSH
1285: LD_EXP 1
1289: PPUSH
1290: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1294: LD_VAR 0 1
1298: PUSH
1299: LD_INT 2
1301: ARRAY
1302: PPUSH
1303: LD_EXP 1
1307: PPUSH
1308: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1312: LD_EXP 4
1316: PPUSH
1317: LD_STRING D1b-Lisa-1
1319: PPUSH
1320: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1324: LD_EXP 1
1328: PPUSH
1329: LD_STRING D1-JMM-1
1331: PPUSH
1332: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1336: LD_EXP 4
1340: PPUSH
1341: LD_STRING D1-Lisa-1
1343: PPUSH
1344: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1348: LD_EXP 1
1352: PPUSH
1353: LD_STRING D1-JMM-2
1355: PPUSH
1356: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1360: LD_EXP 9
1364: PPUSH
1365: LD_STRING D1-Pow-2
1367: PPUSH
1368: CALL_OW 94
// if Cyrus then
1372: LD_EXP 3
1376: IFFALSE 1402
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1378: LD_EXP 3
1382: PPUSH
1383: LD_STRING D1-Cyrus-2
1385: PPUSH
1386: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1390: LD_EXP 1
1394: PPUSH
1395: LD_STRING D1-JMM-3
1397: PPUSH
1398: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1402: LD_EXP 9
1406: PPUSH
1407: LD_STRING D1-Pow-3
1409: PPUSH
1410: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1414: LD_EXP 1
1418: PPUSH
1419: LD_STRING D1-JMM-4
1421: PPUSH
1422: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1426: LD_EXP 9
1430: PPUSH
1431: LD_STRING D1-Pow-4
1433: PPUSH
1434: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1438: LD_EXP 9
1442: PPUSH
1443: LD_STRING D1-Pow-4a
1445: PPUSH
1446: CALL_OW 94
// if Cyrus then
1450: LD_EXP 3
1454: IFFALSE 1468
// Say ( Cyrus , D1-Cyrus-4 ) ;
1456: LD_EXP 3
1460: PPUSH
1461: LD_STRING D1-Cyrus-4
1463: PPUSH
1464: CALL_OW 88
// if Bobby then
1468: LD_EXP 2
1472: IFFALSE 1510
// begin Say ( Bobby , D1-Bobby-4 ) ;
1474: LD_EXP 2
1478: PPUSH
1479: LD_STRING D1-Bobby-4
1481: PPUSH
1482: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1486: LD_EXP 4
1490: PPUSH
1491: LD_STRING D1-Lisa-4
1493: PPUSH
1494: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1498: LD_EXP 1
1502: PPUSH
1503: LD_STRING D1-JMM-5
1505: PPUSH
1506: CALL_OW 88
// end ; InGameOff ;
1510: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1514: LD_INT 22
1516: PUSH
1517: LD_INT 4
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PPUSH
1524: CALL_OW 69
1528: PUSH
1529: LD_EXP 6
1533: PUSH
1534: LD_EXP 7
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: DIFF
1543: PPUSH
1544: LD_INT 1
1546: PPUSH
1547: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1551: LD_STRING M1
1553: PPUSH
1554: CALL_OW 337
// SaveForQuickRestart ;
1558: CALL_OW 22
// end ;
1562: PPOPN 1
1564: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1565: LD_INT 7
1567: PPUSH
1568: LD_INT 22
1570: PUSH
1571: LD_INT 1
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 70
1582: PUSH
1583: LD_INT 0
1585: GREATER
1586: IFFALSE 2003
1588: GO 1590
1590: DISABLE
// begin InGameOn ;
1591: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1595: LD_INT 22
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: PUSH
1605: LD_INT 21
1607: PUSH
1608: LD_INT 1
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PPUSH
1619: CALL_OW 69
1623: PPUSH
1624: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1628: LD_INT 24
1630: PPUSH
1631: LD_INT 32
1633: PPUSH
1634: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1638: LD_EXP 5
1642: PPUSH
1643: LD_INT 4
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1653: LD_EXP 5
1657: PPUSH
1658: LD_INT 4
1660: PPUSH
1661: CALL_OW 336
// wait ( 0 0$1 ) ;
1665: LD_INT 35
1667: PPUSH
1668: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1672: LD_EXP 5
1676: PPUSH
1677: LD_INT 27
1679: PPUSH
1680: LD_INT 38
1682: PPUSH
1683: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1687: LD_EXP 5
1691: PPUSH
1692: LD_EXP 1
1696: PPUSH
1697: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1701: LD_INT 22
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: LD_INT 21
1713: PUSH
1714: LD_INT 1
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PPUSH
1725: CALL_OW 69
1729: PUSH
1730: LD_EXP 5
1734: PUSH
1735: EMPTY
1736: LIST
1737: DIFF
1738: PPUSH
1739: LD_EXP 5
1743: PPUSH
1744: CALL_OW 119
// wait ( 0 0$1 ) ;
1748: LD_INT 35
1750: PPUSH
1751: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1755: LD_EXP 5
1759: PPUSH
1760: LD_STRING D2a-Khat-1
1762: PPUSH
1763: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1767: LD_EXP 1
1771: PPUSH
1772: LD_STRING D2a-JMM-1
1774: PPUSH
1775: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1779: LD_EXP 5
1783: PPUSH
1784: LD_STRING D2a-Khat-2
1786: PPUSH
1787: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1791: LD_EXP 1
1795: PPUSH
1796: LD_STRING D2a-JMM-2
1798: PPUSH
1799: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1803: LD_EXP 5
1807: PPUSH
1808: LD_STRING D2a-Khat-3
1810: PPUSH
1811: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1815: LD_EXP 1
1819: PPUSH
1820: LD_STRING D2a-JMM-3
1822: PPUSH
1823: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1827: LD_EXP 5
1831: PPUSH
1832: LD_STRING D2a-Khat-4
1834: PPUSH
1835: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1839: LD_EXP 1
1843: PPUSH
1844: LD_STRING D2a-JMM-4
1846: PPUSH
1847: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1851: LD_EXP 5
1855: PPUSH
1856: LD_STRING D2a-Khat-5
1858: PPUSH
1859: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1863: LD_EXP 1
1867: PPUSH
1868: LD_STRING D2a-JMM-5
1870: PPUSH
1871: CALL_OW 88
// InGameOff ;
1875: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1879: LD_INT 22
1881: PUSH
1882: LD_INT 1
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 21
1891: PUSH
1892: LD_INT 1
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 3
1901: PUSH
1902: LD_INT 24
1904: PUSH
1905: LD_INT 800
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: PPUSH
1921: CALL_OW 69
1925: PUSH
1926: LD_INT 0
1928: GREATER
1929: IFFALSE 2003
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1931: LD_EXP 5
1935: PPUSH
1936: LD_INT 22
1938: PUSH
1939: LD_INT 1
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 21
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 3
1958: PUSH
1959: LD_INT 24
1961: PUSH
1962: LD_INT 1000
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: LIST
1977: PPUSH
1978: CALL_OW 69
1982: PUSH
1983: LD_INT 1
1985: ARRAY
1986: PPUSH
1987: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1991: LD_EXP 5
1995: PPUSH
1996: LD_STRING D2b-Khat-1
1998: PPUSH
1999: CALL_OW 88
// end ; end ;
2003: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
2004: LD_INT 15
2006: PPUSH
2007: LD_INT 22
2009: PUSH
2010: LD_INT 1
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PPUSH
2017: CALL_OW 70
2021: PUSH
2022: LD_INT 0
2024: GREATER
2025: IFFALSE 3182
2027: GO 2029
2029: DISABLE
2030: LD_INT 0
2032: PPUSH
2033: PPUSH
2034: PPUSH
2035: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: LD_INT 999
2043: PUSH
2044: LD_INT 999
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2054: LD_ADDR_VAR 0 4
2058: PUSH
2059: LD_INT 22
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 1
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: PPUSH
2083: CALL_OW 69
2087: PUSH
2088: LD_EXP 1
2092: PUSH
2093: LD_EXP 2
2097: PUSH
2098: LD_EXP 3
2102: PUSH
2103: LD_EXP 4
2107: PUSH
2108: LD_EXP 5
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: DIFF
2120: ST_TO_ADDR
// PrepareDeadSoldiers ;
2121: CALL 11487 0 0
// spotCorpses = 1 ;
2125: LD_ADDR_EXP 32
2129: PUSH
2130: LD_INT 1
2132: ST_TO_ADDR
// InGameOn ;
2133: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2137: LD_INT 23
2139: PPUSH
2140: LD_INT 12
2142: PPUSH
2143: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2147: LD_ADDR_VAR 0 3
2151: PUSH
2152: LD_VAR 0 2
2156: PUSH
2157: LD_INT 1
2159: ARRAY
2160: PUSH
2161: LD_INT 2
2163: ARRAY
2164: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2165: LD_ADDR_VAR 0 1
2169: PUSH
2170: LD_INT 22
2172: PUSH
2173: LD_INT 1
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: PUSH
2180: LD_INT 21
2182: PUSH
2183: LD_INT 1
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PPUSH
2194: CALL_OW 69
2198: PUSH
2199: LD_EXP 1
2203: PUSH
2204: LD_EXP 5
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: DIFF
2213: PUSH
2214: FOR_IN
2215: IFFALSE 2266
// if IsOK ( i ) then
2217: LD_VAR 0 1
2221: PPUSH
2222: CALL_OW 302
2226: IFFALSE 2264
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2228: LD_ADDR_VAR 0 2
2232: PUSH
2233: LD_VAR 0 2
2237: PUSH
2238: LD_VAR 0 1
2242: PUSH
2243: LD_VAR 0 1
2247: PPUSH
2248: LD_INT 16
2250: PPUSH
2251: CALL_OW 299
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: ADD
2263: ST_TO_ADDR
2264: GO 2214
2266: POP
2267: POP
// for i = 2 to distanceTab do
2268: LD_ADDR_VAR 0 1
2272: PUSH
2273: DOUBLE
2274: LD_INT 2
2276: DEC
2277: ST_TO_ADDR
2278: LD_VAR 0 2
2282: PUSH
2283: FOR_TO
2284: IFFALSE 2330
// if distanceTab [ i ] [ 2 ] < min then
2286: LD_VAR 0 2
2290: PUSH
2291: LD_VAR 0 1
2295: ARRAY
2296: PUSH
2297: LD_INT 2
2299: ARRAY
2300: PUSH
2301: LD_VAR 0 3
2305: LESS
2306: IFFALSE 2328
// min = distanceTab [ i ] [ 2 ] ;
2308: LD_ADDR_VAR 0 3
2312: PUSH
2313: LD_VAR 0 2
2317: PUSH
2318: LD_VAR 0 1
2322: ARRAY
2323: PUSH
2324: LD_INT 2
2326: ARRAY
2327: ST_TO_ADDR
2328: GO 2283
2330: POP
2331: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2332: LD_ADDR_VAR 0 1
2336: PUSH
2337: LD_INT 22
2339: PUSH
2340: LD_INT 1
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: PUSH
2347: LD_INT 21
2349: PUSH
2350: LD_INT 1
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: PPUSH
2361: CALL_OW 69
2365: PUSH
2366: LD_EXP 1
2370: PUSH
2371: EMPTY
2372: LIST
2373: DIFF
2374: PUSH
2375: FOR_IN
2376: IFFALSE 2446
// begin ComMoveToArea ( i , DeadCutscene ) ;
2378: LD_VAR 0 1
2382: PPUSH
2383: LD_INT 28
2385: PPUSH
2386: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2390: LD_EXP 1
2394: PPUSH
2395: LD_INT 30
2397: PPUSH
2398: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2402: LD_VAR 0 1
2406: PPUSH
2407: LD_INT 23
2409: PPUSH
2410: LD_INT 11
2412: PPUSH
2413: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2417: LD_EXP 1
2421: PPUSH
2422: LD_INT 23
2424: PPUSH
2425: LD_INT 11
2427: PPUSH
2428: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2432: LD_EXP 34
2436: PPUSH
2437: LD_INT 250
2439: PPUSH
2440: CALL_OW 234
// end ;
2444: GO 2375
2446: POP
2447: POP
// for i = 2 to distanceTab do
2448: LD_ADDR_VAR 0 1
2452: PUSH
2453: DOUBLE
2454: LD_INT 2
2456: DEC
2457: ST_TO_ADDR
2458: LD_VAR 0 2
2462: PUSH
2463: FOR_TO
2464: IFFALSE 2850
// begin if distanceTab [ i ] [ 2 ] = min then
2466: LD_VAR 0 2
2470: PUSH
2471: LD_VAR 0 1
2475: ARRAY
2476: PUSH
2477: LD_INT 2
2479: ARRAY
2480: PUSH
2481: LD_VAR 0 3
2485: EQUAL
2486: IFFALSE 2848
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2488: LD_VAR 0 2
2492: PUSH
2493: LD_VAR 0 1
2497: ARRAY
2498: PUSH
2499: LD_INT 1
2501: ARRAY
2502: PUSH
2503: LD_EXP 2
2507: EQUAL
2508: IFFALSE 2522
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2510: LD_EXP 2
2514: PPUSH
2515: LD_STRING DCorpses-Bobby-1
2517: PPUSH
2518: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2522: LD_VAR 0 2
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PUSH
2533: LD_INT 1
2535: ARRAY
2536: PUSH
2537: LD_EXP 3
2541: EQUAL
2542: IFFALSE 2556
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2544: LD_EXP 3
2548: PPUSH
2549: LD_STRING DCorpses-Cyrus-1
2551: PPUSH
2552: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2556: LD_VAR 0 2
2560: PUSH
2561: LD_VAR 0 1
2565: ARRAY
2566: PUSH
2567: LD_INT 1
2569: ARRAY
2570: PUSH
2571: LD_EXP 4
2575: EQUAL
2576: IFFALSE 2590
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2578: LD_EXP 4
2582: PPUSH
2583: LD_STRING DCorpses-Lisa-1
2585: PPUSH
2586: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2590: LD_VAR 0 2
2594: PUSH
2595: LD_VAR 0 1
2599: ARRAY
2600: PUSH
2601: LD_INT 1
2603: ARRAY
2604: PUSH
2605: LD_VAR 0 4
2609: PUSH
2610: LD_INT 1
2612: ARRAY
2613: EQUAL
2614: PUSH
2615: LD_VAR 0 4
2619: PUSH
2620: LD_INT 1
2622: ARRAY
2623: PPUSH
2624: CALL_OW 258
2628: PUSH
2629: LD_INT 1
2631: EQUAL
2632: AND
2633: IFFALSE 2651
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2635: LD_VAR 0 4
2639: PUSH
2640: LD_INT 1
2642: ARRAY
2643: PPUSH
2644: LD_STRING DCorpses-Sol1-1
2646: PPUSH
2647: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2651: LD_VAR 0 2
2655: PUSH
2656: LD_VAR 0 1
2660: ARRAY
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: PUSH
2666: LD_VAR 0 4
2670: PUSH
2671: LD_INT 1
2673: ARRAY
2674: EQUAL
2675: PUSH
2676: LD_VAR 0 4
2680: PUSH
2681: LD_INT 1
2683: ARRAY
2684: PPUSH
2685: CALL_OW 258
2689: PUSH
2690: LD_INT 2
2692: EQUAL
2693: AND
2694: IFFALSE 2712
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2696: LD_VAR 0 4
2700: PUSH
2701: LD_INT 1
2703: ARRAY
2704: PPUSH
2705: LD_STRING DCorpses-FSol1-1
2707: PPUSH
2708: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2712: LD_VAR 0 2
2716: PUSH
2717: LD_VAR 0 1
2721: ARRAY
2722: PUSH
2723: LD_INT 1
2725: ARRAY
2726: PUSH
2727: LD_VAR 0 4
2731: PUSH
2732: LD_INT 2
2734: ARRAY
2735: EQUAL
2736: PUSH
2737: LD_VAR 0 4
2741: PUSH
2742: LD_INT 2
2744: ARRAY
2745: PPUSH
2746: CALL_OW 258
2750: PUSH
2751: LD_INT 1
2753: EQUAL
2754: AND
2755: IFFALSE 2773
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2757: LD_VAR 0 4
2761: PUSH
2762: LD_INT 2
2764: ARRAY
2765: PPUSH
2766: LD_STRING DCorpses-Sol1-1
2768: PPUSH
2769: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2773: LD_VAR 0 2
2777: PUSH
2778: LD_VAR 0 1
2782: ARRAY
2783: PUSH
2784: LD_INT 1
2786: ARRAY
2787: PUSH
2788: LD_VAR 0 4
2792: PUSH
2793: LD_INT 2
2795: ARRAY
2796: EQUAL
2797: PUSH
2798: LD_VAR 0 4
2802: PUSH
2803: LD_INT 2
2805: ARRAY
2806: PPUSH
2807: CALL_OW 258
2811: PUSH
2812: LD_INT 2
2814: EQUAL
2815: AND
2816: IFFALSE 2834
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2818: LD_VAR 0 4
2822: PUSH
2823: LD_INT 2
2825: ARRAY
2826: PPUSH
2827: LD_STRING DCorpses-FSol1-1
2829: PPUSH
2830: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2834: LD_EXP 34
2838: PPUSH
2839: LD_INT 150
2841: PPUSH
2842: CALL_OW 234
// break ;
2846: GO 2850
// end ; end ;
2848: GO 2463
2850: POP
2851: POP
// repeat wait ( 0 0$1 ) ;
2852: LD_INT 35
2854: PPUSH
2855: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2859: LD_ADDR_VAR 0 1
2863: PUSH
2864: LD_INT 22
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: LD_INT 21
2876: PUSH
2877: LD_INT 1
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PPUSH
2888: CALL_OW 69
2892: PUSH
2893: LD_EXP 1
2897: PUSH
2898: EMPTY
2899: LIST
2900: DIFF
2901: PUSH
2902: FOR_IN
2903: IFFALSE 2973
// begin ComMoveToArea ( i , DeadCutscene ) ;
2905: LD_VAR 0 1
2909: PPUSH
2910: LD_INT 28
2912: PPUSH
2913: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2917: LD_EXP 1
2921: PPUSH
2922: LD_INT 30
2924: PPUSH
2925: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2929: LD_VAR 0 1
2933: PPUSH
2934: LD_INT 23
2936: PPUSH
2937: LD_INT 11
2939: PPUSH
2940: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2944: LD_EXP 1
2948: PPUSH
2949: LD_INT 23
2951: PPUSH
2952: LD_INT 11
2954: PPUSH
2955: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2959: LD_EXP 34
2963: PPUSH
2964: LD_INT 250
2966: PPUSH
2967: CALL_OW 234
// end ;
2971: GO 2902
2973: POP
2974: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2975: LD_EXP 1
2979: PPUSH
2980: LD_INT 30
2982: PPUSH
2983: CALL_OW 308
2987: IFFALSE 2852
// wait ( 0 0$3 ) ;
2989: LD_INT 105
2991: PPUSH
2992: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
2996: LD_EXP 1
3000: PPUSH
3001: LD_STRING DCorpses-JMM-1
3003: PPUSH
3004: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3008: LD_EXP 34
3012: PPUSH
3013: LD_INT 100
3015: PPUSH
3016: CALL_OW 234
// if IsOK ( Khatam ) then
3020: LD_EXP 5
3024: PPUSH
3025: CALL_OW 302
3029: IFFALSE 3166
// begin repeat wait ( 0 0$1 ) ;
3031: LD_INT 35
3033: PPUSH
3034: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3038: LD_EXP 5
3042: PPUSH
3043: LD_EXP 34
3047: PPUSH
3048: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3052: LD_EXP 5
3056: PPUSH
3057: LD_EXP 34
3061: PPUSH
3062: CALL_OW 296
3066: PUSH
3067: LD_INT 2
3069: LESS
3070: IFFALSE 3031
// spotCorpses = 0 ;
3072: LD_ADDR_EXP 32
3076: PUSH
3077: LD_INT 0
3079: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3080: LD_EXP 34
3084: PPUSH
3085: LD_INT 10
3087: PPUSH
3088: CALL_OW 234
// wait ( 0 0$3 ) ;
3092: LD_INT 105
3094: PPUSH
3095: CALL_OW 67
// KillUnit ( DyingSold ) ;
3099: LD_EXP 34
3103: PPUSH
3104: CALL_OW 66
// wait ( 0 0$1 ) ;
3108: LD_INT 35
3110: PPUSH
3111: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3115: LD_EXP 1
3119: PUSH
3120: LD_EXP 5
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: PPUSH
3129: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3133: LD_EXP 5
3137: PPUSH
3138: LD_EXP 1
3142: PPUSH
3143: CALL_OW 119
// wait ( 0 0$1 ) ;
3147: LD_INT 35
3149: PPUSH
3150: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3154: LD_EXP 5
3158: PPUSH
3159: LD_STRING DCorpses-Khat-1
3161: PPUSH
3162: CALL_OW 88
// end ; InGameOff ;
3166: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3170: LD_EXP 1
3174: PPUSH
3175: LD_STRING DCorpses-JMM-2
3177: PPUSH
3178: CALL_OW 88
// end ;
3182: PPOPN 4
3184: END
// every 0 0$1 trigger spotCorpses = 1 do
3185: LD_EXP 32
3189: PUSH
3190: LD_INT 1
3192: EQUAL
3193: IFFALSE 3211
3195: GO 3197
3197: DISABLE
// begin enable ;
3198: ENABLE
// SetLives ( DyingSold , 10 ) ;
3199: LD_EXP 34
3203: PPUSH
3204: LD_INT 10
3206: PPUSH
3207: CALL_OW 234
// end ;
3211: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 15 ) do var i ;
3212: LD_INT 8
3214: PPUSH
3215: LD_INT 22
3217: PUSH
3218: LD_INT 1
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PPUSH
3225: CALL_OW 70
3229: PUSH
3230: LD_INT 0
3232: GREATER
3233: PUSH
3234: LD_INT 22
3236: PUSH
3237: LD_INT 1
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PPUSH
3244: CALL_OW 69
3248: PPUSH
3249: LD_EXP 7
3253: PPUSH
3254: CALL_OW 74
3258: PPUSH
3259: LD_EXP 7
3263: PPUSH
3264: CALL_OW 296
3268: PUSH
3269: LD_INT 15
3271: LESS
3272: OR
3273: IFFALSE 3497
3275: GO 3277
3277: DISABLE
3278: LD_INT 0
3280: PPUSH
// begin InGameOn ;
3281: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3285: LD_EXP 7
3289: PPUSH
3290: LD_INT 250
3292: PPUSH
3293: CALL_OW 234
// SetLives ( Brian , 750 ) ;
3297: LD_EXP 6
3301: PPUSH
3302: LD_INT 750
3304: PPUSH
3305: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3309: LD_INT 3
3311: PPUSH
3312: LD_INT 4
3314: PPUSH
3315: LD_INT 2
3317: PPUSH
3318: LD_INT 1
3320: PPUSH
3321: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3325: LD_EXP 6
3329: PUSH
3330: LD_EXP 7
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PPUSH
3339: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3343: LD_ADDR_VAR 0 1
3347: PUSH
3348: LD_INT 9
3350: PPUSH
3351: LD_INT 22
3353: PUSH
3354: LD_INT 3
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PPUSH
3361: CALL_OW 70
3365: PUSH
3366: FOR_IN
3367: IFFALSE 3380
// ComFree ( i ) ;
3369: LD_VAR 0 1
3373: PPUSH
3374: CALL_OW 139
3378: GO 3366
3380: POP
3381: POP
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3382: LD_ADDR_VAR 0 1
3386: PUSH
3387: LD_INT 9
3389: PPUSH
3390: LD_INT 22
3392: PUSH
3393: LD_INT 3
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PPUSH
3400: CALL_OW 70
3404: PUSH
3405: FOR_IN
3406: IFFALSE 3424
// AddComAttackUnit ( i , Brian ) ;
3408: LD_VAR 0 1
3412: PPUSH
3413: LD_EXP 6
3417: PPUSH
3418: CALL_OW 175
3422: GO 3405
3424: POP
3425: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3426: LD_ADDR_VAR 0 1
3430: PUSH
3431: LD_INT 22
3433: PUSH
3434: LD_INT 4
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PPUSH
3441: CALL_OW 69
3445: PUSH
3446: FOR_IN
3447: IFFALSE 3460
// ComFree ( i ) ;
3449: LD_VAR 0 1
3453: PPUSH
3454: CALL_OW 139
3458: GO 3446
3460: POP
3461: POP
// wait ( 0 0$1 ) ;
3462: LD_INT 35
3464: PPUSH
3465: CALL_OW 67
// InGameOff ;
3469: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3473: LD_EXP 6
3477: PPUSH
3478: LD_STRING DF-Sol1-1
3480: PPUSH
3481: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3485: LD_EXP 1
3489: PPUSH
3490: LD_STRING DF-JMM-1
3492: PPUSH
3493: CALL_OW 88
// end ;
3497: PPOPN 1
3499: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3500: LD_INT 19
3502: PPUSH
3503: LD_INT 22
3505: PUSH
3506: LD_INT 3
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 70
3517: PUSH
3518: LD_INT 0
3520: EQUAL
3521: IFFALSE 3634
3523: GO 3525
3525: DISABLE
// begin if not IsDead ( Brian ) then
3526: LD_EXP 6
3530: PPUSH
3531: CALL_OW 301
3535: NOT
3536: IFFALSE 3550
// SetSide ( Brian , 1 ) ;
3538: LD_EXP 6
3542: PPUSH
3543: LD_INT 1
3545: PPUSH
3546: CALL_OW 235
// if not IsDead ( Jerry ) then
3550: LD_EXP 7
3554: PPUSH
3555: CALL_OW 301
3559: NOT
3560: IFFALSE 3574
// SetSide ( Jerry , 1 ) ;
3562: LD_EXP 7
3566: PPUSH
3567: LD_INT 1
3569: PPUSH
3570: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3574: LD_INT 22
3576: PUSH
3577: LD_INT 1
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: PUSH
3584: LD_INT 25
3586: PUSH
3587: LD_INT 4
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PPUSH
3598: CALL_OW 69
3602: PUSH
3603: LD_INT 0
3605: GREATER
3606: IFFALSE 3622
// begin Say ( JMM , DFa-JMM-1 ) ;
3608: LD_EXP 1
3612: PPUSH
3613: LD_STRING DFa-JMM-1
3615: PPUSH
3616: CALL_OW 88
// end else
3620: GO 3634
// begin Say ( JMM , DFa-JMM-1a ) ;
3622: LD_EXP 1
3626: PPUSH
3627: LD_STRING DFa-JMM-1a
3629: PPUSH
3630: CALL_OW 88
// end ; end ;
3634: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3635: LD_INT 19
3637: PPUSH
3638: LD_INT 22
3640: PUSH
3641: LD_INT 3
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PPUSH
3648: CALL_OW 70
3652: PUSH
3653: LD_INT 0
3655: EQUAL
3656: PUSH
3657: LD_EXP 6
3661: PPUSH
3662: CALL_OW 302
3666: NOT
3667: AND
3668: IFFALSE 3745
3670: GO 3672
3672: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3673: LD_INT 35
3675: PPUSH
3676: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3680: LD_EXP 6
3684: PPUSH
3685: CALL_OW 256
3689: PUSH
3690: LD_INT 250
3692: GREATER
3693: IFFALSE 3673
// Say ( Brian , DFb-Sol1-1 ) ;
3695: LD_EXP 6
3699: PPUSH
3700: LD_STRING DFb-Sol1-1
3702: PPUSH
3703: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3707: LD_EXP 6
3711: PPUSH
3712: LD_INT 78
3714: PPUSH
3715: LD_INT 74
3717: PPUSH
3718: CALL_OW 111
// if IsDead ( Jerry ) then
3722: LD_EXP 7
3726: PPUSH
3727: CALL_OW 301
3731: IFFALSE 3745
// Say ( Brian , DFb-Sol1-1a ) end ;
3733: LD_EXP 6
3737: PPUSH
3738: LD_STRING DFb-Sol1-1a
3740: PPUSH
3741: CALL_OW 88
3745: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3746: LD_INT 22
3748: PUSH
3749: LD_INT 1
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: LD_INT 21
3758: PUSH
3759: LD_INT 2
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: PPUSH
3770: CALL_OW 69
3774: PUSH
3775: LD_INT 0
3777: EQUAL
3778: IFFALSE 3866
3780: GO 3782
3782: DISABLE
3783: LD_INT 0
3785: PPUSH
// begin enable ;
3786: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3787: LD_ADDR_VAR 0 1
3791: PUSH
3792: LD_INT 22
3794: PUSH
3795: LD_INT 3
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 21
3804: PUSH
3805: LD_INT 3
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PUSH
3812: LD_INT 30
3814: PUSH
3815: LD_INT 31
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: LIST
3826: PPUSH
3827: CALL_OW 69
3831: PUSH
3832: FOR_IN
3833: IFFALSE 3864
// begin if See ( 1 , i ) then
3835: LD_INT 1
3837: PPUSH
3838: LD_VAR 0 1
3842: PPUSH
3843: CALL_OW 292
3847: IFFALSE 3862
// begin disable ;
3849: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3850: LD_EXP 1
3854: PPUSH
3855: LD_STRING DX1-JMM-1
3857: PPUSH
3858: CALL_OW 88
// end ; end ;
3862: GO 3832
3864: POP
3865: POP
// end ;
3866: PPOPN 1
3868: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3869: LD_INT 1
3871: PPUSH
3872: LD_INT 11
3874: PPUSH
3875: CALL_OW 294
3879: IFFALSE 4293
3881: GO 3883
3883: DISABLE
3884: LD_INT 0
3886: PPUSH
3887: PPUSH
// begin DialogueOn ;
3888: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3892: LD_INT 11
3894: PPUSH
3895: LD_INT 22
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: EMPTY
3902: LIST
3903: LIST
3904: PUSH
3905: LD_INT 21
3907: PUSH
3908: LD_INT 1
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: PPUSH
3919: CALL_OW 70
3923: PUSH
3924: LD_INT 1
3926: ARRAY
3927: PPUSH
3928: LD_STRING DX3-Rus1-1
3930: PPUSH
3931: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3935: LD_EXP 1
3939: PPUSH
3940: LD_STRING DX3-JMM-1
3942: PPUSH
3943: CALL_OW 88
// DialogueOff ;
3947: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3951: LD_ADDR_VAR 0 1
3955: PUSH
3956: LD_INT 11
3958: PPUSH
3959: LD_INT 22
3961: PUSH
3962: LD_INT 3
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PUSH
3969: LD_INT 21
3971: PUSH
3972: LD_INT 1
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: PPUSH
3983: CALL_OW 70
3987: PUSH
3988: FOR_IN
3989: IFFALSE 4009
// southBaseDefenders = southBaseDefenders ^ i ;
3991: LD_ADDR_EXP 25
3995: PUSH
3996: LD_EXP 25
4000: PUSH
4001: LD_VAR 0 1
4005: ADD
4006: ST_TO_ADDR
4007: GO 3988
4009: POP
4010: POP
// wait ( [ 0 0$13 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
4011: LD_INT 455
4013: PUSH
4014: LD_INT 420
4016: PUSH
4017: LD_INT 315
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: LIST
4024: PUSH
4025: LD_OWVAR 67
4029: ARRAY
4030: PPUSH
4031: CALL_OW 67
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ) ;
4035: LD_INT 22
4037: PUSH
4038: LD_INT 3
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: PUSH
4045: LD_INT 21
4047: PUSH
4048: LD_INT 1
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 25
4057: PUSH
4058: LD_INT 3
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: PPUSH
4070: CALL_OW 69
4074: PPUSH
4075: CALL_OW 122
// wait ( 0 0$1 ) ;
4079: LD_INT 35
4081: PPUSH
4082: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
4086: LD_INT 35
4088: PPUSH
4089: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
4093: LD_ADDR_VAR 0 1
4097: PUSH
4098: LD_INT 22
4100: PUSH
4101: LD_INT 3
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 21
4110: PUSH
4111: LD_INT 2
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PUSH
4118: LD_INT 58
4120: PUSH
4121: EMPTY
4122: LIST
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: LIST
4128: PPUSH
4129: CALL_OW 69
4133: PUSH
4134: FOR_IN
4135: IFFALSE 4205
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
4137: LD_ADDR_VAR 0 2
4141: PUSH
4142: LD_INT 22
4144: PUSH
4145: LD_INT 3
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: LD_INT 21
4154: PUSH
4155: LD_INT 1
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 25
4164: PUSH
4165: LD_INT 3
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: LIST
4176: PPUSH
4177: CALL_OW 69
4181: PUSH
4182: FOR_IN
4183: IFFALSE 4201
// begin ComEnterUnit ( j , i ) ;
4185: LD_VAR 0 2
4189: PPUSH
4190: LD_VAR 0 1
4194: PPUSH
4195: CALL_OW 120
// end ;
4199: GO 4182
4201: POP
4202: POP
// end ;
4203: GO 4134
4205: POP
4206: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
4207: LD_INT 22
4209: PUSH
4210: LD_INT 3
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 21
4219: PUSH
4220: LD_INT 2
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: LD_INT 58
4229: PUSH
4230: EMPTY
4231: LIST
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: PPUSH
4238: CALL_OW 69
4242: PUSH
4243: LD_INT 0
4245: EQUAL
4246: PUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 3
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 21
4259: PUSH
4260: LD_INT 1
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: LD_INT 25
4269: PUSH
4270: LD_INT 3
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: LIST
4281: PPUSH
4282: CALL_OW 69
4286: PUSH
4287: LD_INT 0
4289: EQUAL
4290: OR
4291: IFFALSE 4086
// end ;
4293: PPOPN 2
4295: END
// every 0 0$1 do var i , tmp ;
4296: GO 4298
4298: DISABLE
4299: LD_INT 0
4301: PPUSH
4302: PPUSH
// begin enable ;
4303: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
4304: LD_ADDR_VAR 0 2
4308: PUSH
4309: LD_INT 22
4311: PUSH
4312: LD_INT 1
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PUSH
4319: LD_INT 21
4321: PUSH
4322: LD_INT 1
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PPUSH
4333: CALL_OW 69
4337: ST_TO_ADDR
// for i in tmp do
4338: LD_ADDR_VAR 0 1
4342: PUSH
4343: LD_VAR 0 2
4347: PUSH
4348: FOR_IN
4349: IFFALSE 4471
// begin if GetDistUnits ( i , vehicle1 ) < 4 or GetDistUnits ( i , vehicle2 ) < 4 then
4351: LD_VAR 0 1
4355: PPUSH
4356: LD_INT 5
4358: PPUSH
4359: CALL_OW 296
4363: PUSH
4364: LD_INT 4
4366: LESS
4367: PUSH
4368: LD_VAR 0 1
4372: PPUSH
4373: LD_INT 4
4375: PPUSH
4376: CALL_OW 296
4380: PUSH
4381: LD_INT 4
4383: LESS
4384: OR
4385: IFFALSE 4469
// begin disable ;
4387: DISABLE
// CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4388: LD_INT 5
4390: PUSH
4391: LD_INT 4
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: PPUSH
4398: CALL_OW 85
// if IsOK ( Bobby ) then
4402: LD_EXP 2
4406: PPUSH
4407: CALL_OW 302
4411: IFFALSE 4448
// begin DialogueOn ;
4413: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4417: LD_EXP 2
4421: PPUSH
4422: LD_STRING DX2-Bobby-1
4424: PPUSH
4425: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4429: LD_EXP 1
4433: PPUSH
4434: LD_STRING DX2-JMM-1a
4436: PPUSH
4437: CALL_OW 88
// DialogueOff ;
4441: CALL_OW 7
// disable ;
4445: DISABLE
// end else
4446: GO 4469
// begin DialogueOn ;
4448: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4452: LD_EXP 1
4456: PPUSH
4457: LD_STRING DX2-JMM-1
4459: PPUSH
4460: CALL_OW 88
// DialogueOff ;
4464: CALL_OW 7
// disable ;
4468: DISABLE
// end ; end ; end ;
4469: GO 4348
4471: POP
4472: POP
// end ;
4473: PPOPN 2
4475: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4476: LD_INT 22
4478: PUSH
4479: LD_INT 1
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 23
4488: PUSH
4489: LD_INT 3
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 21
4498: PUSH
4499: LD_INT 2
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: LD_INT 34
4508: PUSH
4509: LD_INT 42
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: PPUSH
4522: CALL_OW 69
4526: IFFALSE 4947
4528: GO 4530
4530: DISABLE
4531: LD_INT 0
4533: PPUSH
4534: PPUSH
4535: PPUSH
4536: PPUSH
4537: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4538: LD_ADDR_VAR 0 1
4542: PUSH
4543: LD_INT 22
4545: PUSH
4546: LD_INT 1
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 23
4555: PUSH
4556: LD_INT 3
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: PUSH
4563: LD_INT 21
4565: PUSH
4566: LD_INT 2
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: LD_INT 34
4575: PUSH
4576: LD_INT 42
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: PPUSH
4589: CALL_OW 69
4593: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4594: LD_ADDR_VAR 0 3
4598: PUSH
4599: LD_INT 22
4601: PUSH
4602: LD_INT 1
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PUSH
4609: LD_INT 21
4611: PUSH
4612: LD_INT 1
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: PUSH
4619: LD_INT 26
4621: PUSH
4622: LD_INT 1
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: LIST
4633: PPUSH
4634: CALL_OW 69
4638: PUSH
4639: LD_EXP 1
4643: PUSH
4644: LD_EXP 3
4648: PUSH
4649: LD_EXP 2
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: LIST
4658: DIFF
4659: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4660: LD_ADDR_VAR 0 4
4664: PUSH
4665: LD_INT 22
4667: PUSH
4668: LD_INT 1
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: PUSH
4675: LD_INT 21
4677: PUSH
4678: LD_INT 1
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PUSH
4685: LD_INT 26
4687: PUSH
4688: LD_INT 2
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: LIST
4699: PPUSH
4700: CALL_OW 69
4704: PUSH
4705: LD_EXP 4
4709: PUSH
4710: EMPTY
4711: LIST
4712: DIFF
4713: ST_TO_ADDR
// if not tmp then
4714: LD_VAR 0 1
4718: NOT
4719: IFFALSE 4723
// exit ;
4721: GO 4947
// DialogueOn ;
4723: CALL_OW 6
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4727: LD_ADDR_VAR 0 2
4731: PUSH
4732: LD_VAR 0 1
4736: PUSH
4737: LD_INT 1
4739: ARRAY
4740: PPUSH
4741: CALL_OW 311
4745: ST_TO_ADDR
// if not speaker then
4746: LD_VAR 0 2
4750: NOT
4751: IFFALSE 4755
// exit ;
4753: GO 4947
// if speaker = JMM then
4755: LD_VAR 0 2
4759: PUSH
4760: LD_EXP 1
4764: EQUAL
4765: IFFALSE 4799
// begin if Lisa then
4767: LD_EXP 4
4771: IFFALSE 4785
// Say ( Lisa , DX2b-Lisa-1 ) ;
4773: LD_EXP 4
4777: PPUSH
4778: LD_STRING DX2b-Lisa-1
4780: PPUSH
4781: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4785: LD_EXP 1
4789: PPUSH
4790: LD_STRING DX2b-JMM-1
4792: PPUSH
4793: CALL_OW 88
// end else
4797: GO 4943
// begin Say ( JMM , DX2a-JMM-1 ) ;
4799: LD_EXP 1
4803: PPUSH
4804: LD_STRING DX2a-JMM-1
4806: PPUSH
4807: CALL_OW 88
// if speaker = Bobby then
4811: LD_VAR 0 2
4815: PUSH
4816: LD_EXP 2
4820: EQUAL
4821: IFFALSE 4835
// Say ( Bobby , DX2a-Bobby-1 ) ;
4823: LD_EXP 2
4827: PPUSH
4828: LD_STRING DX2a-Bobby-1
4830: PPUSH
4831: CALL_OW 88
// if speaker = Cyrus then
4835: LD_VAR 0 2
4839: PUSH
4840: LD_EXP 3
4844: EQUAL
4845: IFFALSE 4859
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4847: LD_EXP 3
4851: PPUSH
4852: LD_STRING DX2a-Cyrus-1
4854: PPUSH
4855: CALL_OW 88
// if speaker = Lisa then
4859: LD_VAR 0 2
4863: PUSH
4864: LD_EXP 4
4868: EQUAL
4869: IFFALSE 4883
// Say ( Lisa , DX2a-Lisa-1 ) ;
4871: LD_EXP 4
4875: PPUSH
4876: LD_STRING DX2a-Lisa-1
4878: PPUSH
4879: CALL_OW 88
// if speaker in temp1 then
4883: LD_VAR 0 2
4887: PUSH
4888: LD_VAR 0 3
4892: IN
4893: IFFALSE 4907
// Say ( speaker , DX2a-Sol1-1 ) ;
4895: LD_VAR 0 2
4899: PPUSH
4900: LD_STRING DX2a-Sol1-1
4902: PPUSH
4903: CALL_OW 88
// if speaker in temp2 then
4907: LD_VAR 0 2
4911: PUSH
4912: LD_VAR 0 4
4916: IN
4917: IFFALSE 4931
// Say ( speaker , DX2a-FSol1-1 ) ;
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_STRING DX2a-FSol1-1
4926: PPUSH
4927: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4931: LD_EXP 1
4935: PPUSH
4936: LD_STRING DX2a-JMM-2
4938: PPUSH
4939: CALL_OW 88
// end ; DialogueOff ;
4943: CALL_OW 7
// end ;
4947: PPOPN 5
4949: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4950: LD_INT 1
4952: PPUSH
4953: CALL_OW 255
4957: PUSH
4958: LD_INT 1
4960: EQUAL
4961: PUSH
4962: LD_INT 10
4964: PPUSH
4965: CALL_OW 255
4969: PUSH
4970: LD_INT 1
4972: EQUAL
4973: OR
4974: IFFALSE 5034
4976: GO 4978
4978: DISABLE
// begin DialogueOn ;
4979: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4983: LD_EXP 1
4987: PPUSH
4988: LD_STRING D3-JMM-1
4990: PPUSH
4991: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4995: LD_EXP 9
4999: PPUSH
5000: LD_STRING D3-Pow-1
5002: PPUSH
5003: CALL_OW 94
// if IsOK ( Cyrus ) then
5007: LD_EXP 3
5011: PPUSH
5012: CALL_OW 302
5016: IFFALSE 5030
// Say ( Cyrus , D3-Cyrus-1 ) ;
5018: LD_EXP 3
5022: PPUSH
5023: LD_STRING D3-Cyrus-1
5025: PPUSH
5026: CALL_OW 88
// DialogueOff ;
5030: CALL_OW 7
// end ;
5034: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < 2 do var temp , i ;
5035: LD_INT 1
5037: PPUSH
5038: CALL_OW 255
5042: PUSH
5043: LD_INT 1
5045: EQUAL
5046: PUSH
5047: LD_INT 10
5049: PPUSH
5050: CALL_OW 255
5054: PUSH
5055: LD_INT 1
5057: EQUAL
5058: AND
5059: PUSH
5060: LD_INT 22
5062: PUSH
5063: LD_INT 3
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: PUSH
5070: LD_INT 21
5072: PUSH
5073: LD_INT 1
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PPUSH
5084: CALL_OW 69
5088: PUSH
5089: LD_INT 2
5091: LESS
5092: AND
5093: IFFALSE 6345
5095: GO 5097
5097: DISABLE
5098: LD_INT 0
5100: PPUSH
5101: PPUSH
// begin wait ( 0 0$03 ) ;
5102: LD_INT 105
5104: PPUSH
5105: CALL_OW 67
// DialogueOn ;
5109: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5113: LD_EXP 1
5117: PPUSH
5118: LD_STRING D3a-JMM-1
5120: PPUSH
5121: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5125: LD_EXP 9
5129: PPUSH
5130: LD_STRING D3a-Pow-1
5132: PPUSH
5133: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5137: LD_EXP 1
5141: PPUSH
5142: LD_STRING D3a-JMM-2
5144: PPUSH
5145: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5149: LD_EXP 9
5153: PPUSH
5154: LD_STRING D3a-Pow-2
5156: PPUSH
5157: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5161: LD_EXP 1
5165: PPUSH
5166: LD_STRING D3a-JMM-3
5168: PPUSH
5169: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5173: LD_EXP 9
5177: PPUSH
5178: LD_STRING D3a-Pow-3
5180: PPUSH
5181: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5185: LD_EXP 1
5189: PPUSH
5190: LD_STRING D3a-JMM-4
5192: PPUSH
5193: CALL_OW 88
// DialogueOff ;
5197: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5201: LD_STRING M2
5203: PPUSH
5204: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5208: LD_EXP 1
5212: PPUSH
5213: LD_STRING D3b-JMM-1
5215: PPUSH
5216: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5220: LD_INT 35
5222: PPUSH
5223: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
5227: LD_INT 22
5229: PPUSH
5230: LD_INT 22
5232: PUSH
5233: LD_INT 1
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: PUSH
5240: LD_INT 25
5242: PUSH
5243: LD_INT 2
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: PPUSH
5254: CALL_OW 70
5258: IFFALSE 5220
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5260: LD_ADDR_VAR 0 1
5264: PUSH
5265: LD_INT 22
5267: PUSH
5268: LD_INT 1
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PUSH
5275: LD_INT 23
5277: PUSH
5278: LD_INT 1
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: PUSH
5285: LD_INT 25
5287: PUSH
5288: LD_INT 2
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: PUSH
5295: LD_INT 50
5297: PUSH
5298: EMPTY
5299: LIST
5300: PUSH
5301: LD_INT 56
5303: PUSH
5304: EMPTY
5305: LIST
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: PPUSH
5314: CALL_OW 69
5318: PUSH
5319: LD_EXP 1
5323: PUSH
5324: LD_EXP 5
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: DIFF
5333: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5334: LD_INT 35
5336: PPUSH
5337: CALL_OW 67
// until temp > 0 ;
5341: LD_VAR 0 1
5345: PUSH
5346: LD_INT 0
5348: GREATER
5349: IFFALSE 5260
// wait ( 0 0$5 ) ;
5351: LD_INT 175
5353: PPUSH
5354: CALL_OW 67
// PrepareRussianHeroes ;
5358: CALL 11644 0 0
// InGameOn ;
5362: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5366: LD_EXP 8
5370: PPUSH
5371: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5375: LD_EXP 1
5379: PUSH
5380: LD_VAR 0 1
5384: PUSH
5385: LD_INT 1
5387: ARRAY
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: PPUSH
5393: LD_EXP 8
5397: PPUSH
5398: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5402: LD_EXP 8
5406: PPUSH
5407: LD_VAR 0 1
5411: PUSH
5412: LD_INT 1
5414: ARRAY
5415: PPUSH
5416: CALL_OW 119
// Wait ( 0 0$02 ) ;
5420: LD_INT 70
5422: PPUSH
5423: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5427: LD_EXP 8
5431: PPUSH
5432: LD_STRING D4-Mikh-1
5434: PPUSH
5435: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5439: LD_VAR 0 1
5443: PUSH
5444: LD_INT 1
5446: ARRAY
5447: PPUSH
5448: CALL_OW 258
5452: PUSH
5453: LD_INT 1
5455: EQUAL
5456: IFFALSE 5474
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5458: LD_VAR 0 1
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PPUSH
5467: LD_STRING D4-Sol1-1
5469: PPUSH
5470: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5474: LD_VAR 0 1
5478: PUSH
5479: LD_INT 1
5481: ARRAY
5482: PPUSH
5483: CALL_OW 258
5487: PUSH
5488: LD_INT 2
5490: EQUAL
5491: IFFALSE 5509
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5493: LD_VAR 0 1
5497: PUSH
5498: LD_INT 1
5500: ARRAY
5501: PPUSH
5502: LD_STRING D4-FSol1-1
5504: PPUSH
5505: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5509: LD_EXP 8
5513: PPUSH
5514: LD_STRING D4-Mikh-2
5516: PPUSH
5517: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5521: LD_VAR 0 1
5525: PUSH
5526: LD_INT 1
5528: ARRAY
5529: PPUSH
5530: CALL_OW 258
5534: PUSH
5535: LD_INT 1
5537: EQUAL
5538: IFFALSE 5556
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5540: LD_VAR 0 1
5544: PUSH
5545: LD_INT 1
5547: ARRAY
5548: PPUSH
5549: LD_STRING D4-Sol1-2
5551: PPUSH
5552: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5556: LD_VAR 0 1
5560: PUSH
5561: LD_INT 1
5563: ARRAY
5564: PPUSH
5565: CALL_OW 258
5569: PUSH
5570: LD_INT 2
5572: EQUAL
5573: IFFALSE 5591
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5575: LD_VAR 0 1
5579: PUSH
5580: LD_INT 1
5582: ARRAY
5583: PPUSH
5584: LD_STRING D4-FSol1-2
5586: PPUSH
5587: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5591: LD_EXP 8
5595: PPUSH
5596: LD_STRING D4-Mikh-3
5598: PPUSH
5599: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5603: LD_VAR 0 1
5607: PUSH
5608: LD_INT 1
5610: ARRAY
5611: PPUSH
5612: CALL_OW 258
5616: PUSH
5617: LD_INT 1
5619: EQUAL
5620: IFFALSE 5638
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5622: LD_VAR 0 1
5626: PUSH
5627: LD_INT 1
5629: ARRAY
5630: PPUSH
5631: LD_STRING D4-Sol1-3
5633: PPUSH
5634: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5638: LD_VAR 0 1
5642: PUSH
5643: LD_INT 1
5645: ARRAY
5646: PPUSH
5647: CALL_OW 258
5651: PUSH
5652: LD_INT 2
5654: EQUAL
5655: IFFALSE 5673
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5657: LD_VAR 0 1
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: PPUSH
5666: LD_STRING D4-FSol1-3
5668: PPUSH
5669: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5673: LD_EXP 8
5677: PPUSH
5678: LD_STRING D4-Mikh-4
5680: PPUSH
5681: CALL_OW 88
// case query ( Qs1 ) of 1 :
5685: LD_STRING Qs1
5687: PPUSH
5688: CALL_OW 97
5692: PUSH
5693: LD_INT 1
5695: DOUBLE
5696: EQUAL
5697: IFTRUE 5701
5699: GO 5736
5701: POP
// begin InGameOff ;
5702: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5706: LD_INT 1
5708: PPUSH
5709: LD_INT 6
5711: PPUSH
5712: LD_INT 2
5714: PPUSH
5715: LD_INT 1
5717: PPUSH
5718: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5722: LD_EXP 8
5726: PPUSH
5727: LD_INT 17
5729: PPUSH
5730: CALL_OW 113
// end ; 2 :
5734: GO 6329
5736: LD_INT 2
5738: DOUBLE
5739: EQUAL
5740: IFTRUE 5744
5742: GO 6294
5744: POP
// begin repeat wait ( 0 0$1 ) ;
5745: LD_INT 35
5747: PPUSH
5748: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5752: LD_VAR 0 1
5756: PUSH
5757: LD_INT 1
5759: ARRAY
5760: PPUSH
5761: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5765: LD_VAR 0 1
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: PPUSH
5774: LD_EXP 1
5778: PPUSH
5779: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5783: LD_EXP 8
5787: PPUSH
5788: LD_EXP 1
5792: PPUSH
5793: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5797: LD_EXP 1
5801: PPUSH
5802: LD_EXP 8
5806: PPUSH
5807: CALL_OW 296
5811: PUSH
5812: LD_INT 5
5814: LESS
5815: IFFALSE 5745
// ComTurnUnit ( Mikhail , JMM ) ;
5817: LD_EXP 8
5821: PPUSH
5822: LD_EXP 1
5826: PPUSH
5827: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5831: LD_EXP 1
5835: PPUSH
5836: LD_STRING D4b-JMM-1
5838: PPUSH
5839: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5843: LD_EXP 8
5847: PPUSH
5848: LD_STRING D4b-Mikh-1
5850: PPUSH
5851: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5855: LD_EXP 1
5859: PPUSH
5860: LD_STRING D4b-JMM-2
5862: PPUSH
5863: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5867: LD_EXP 8
5871: PPUSH
5872: LD_STRING D4b-Mikh-2
5874: PPUSH
5875: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5879: LD_EXP 1
5883: PPUSH
5884: LD_STRING D4b-JMM-3
5886: PPUSH
5887: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5891: LD_EXP 8
5895: PPUSH
5896: LD_STRING D4b-Mikh-3
5898: PPUSH
5899: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5903: LD_EXP 1
5907: PPUSH
5908: LD_STRING D4b-JMM-4
5910: PPUSH
5911: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5915: LD_EXP 8
5919: PPUSH
5920: LD_STRING D4b-Mikh-4
5922: PPUSH
5923: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5927: LD_EXP 1
5931: PPUSH
5932: LD_STRING D4b-JMM-5
5934: PPUSH
5935: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5939: LD_EXP 8
5943: PPUSH
5944: LD_STRING D4b-Mikh-5
5946: PPUSH
5947: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5951: LD_EXP 1
5955: PPUSH
5956: LD_STRING D4b-JMM-6
5958: PPUSH
5959: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5963: LD_EXP 8
5967: PPUSH
5968: LD_STRING D4b-Mikh-6
5970: PPUSH
5971: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5975: LD_EXP 1
5979: PPUSH
5980: LD_STRING D4b-JMM-7
5982: PPUSH
5983: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5987: LD_EXP 8
5991: PPUSH
5992: LD_STRING D4b-Mikh-7
5994: PPUSH
5995: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5999: LD_VAR 0 1
6003: PUSH
6004: LD_INT 1
6006: ARRAY
6007: PPUSH
6008: CALL_OW 258
6012: PUSH
6013: LD_INT 1
6015: EQUAL
6016: IFFALSE 6034
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6018: LD_VAR 0 1
6022: PUSH
6023: LD_INT 1
6025: ARRAY
6026: PPUSH
6027: LD_STRING D4b-Sol1-7
6029: PPUSH
6030: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6034: LD_VAR 0 1
6038: PUSH
6039: LD_INT 1
6041: ARRAY
6042: PPUSH
6043: CALL_OW 258
6047: PUSH
6048: LD_INT 2
6050: EQUAL
6051: IFFALSE 6069
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6053: LD_VAR 0 1
6057: PUSH
6058: LD_INT 1
6060: ARRAY
6061: PPUSH
6062: LD_STRING D4b-FSol1-7
6064: PPUSH
6065: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6069: LD_EXP 1
6073: PPUSH
6074: LD_STRING D4b-JMM-8
6076: PPUSH
6077: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6081: LD_VAR 0 1
6085: PUSH
6086: LD_INT 1
6088: ARRAY
6089: PPUSH
6090: CALL_OW 258
6094: PUSH
6095: LD_INT 1
6097: EQUAL
6098: IFFALSE 6116
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6100: LD_VAR 0 1
6104: PUSH
6105: LD_INT 1
6107: ARRAY
6108: PPUSH
6109: LD_STRING D4b-Sol1-8
6111: PPUSH
6112: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6116: LD_VAR 0 1
6120: PUSH
6121: LD_INT 1
6123: ARRAY
6124: PPUSH
6125: CALL_OW 258
6129: PUSH
6130: LD_INT 2
6132: EQUAL
6133: IFFALSE 6151
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6135: LD_VAR 0 1
6139: PUSH
6140: LD_INT 1
6142: ARRAY
6143: PPUSH
6144: LD_STRING D4b-FSol1-8
6146: PPUSH
6147: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6151: LD_EXP 1
6155: PPUSH
6156: LD_STRING D4b-JMM-9
6158: PPUSH
6159: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6163: LD_EXP 8
6167: PPUSH
6168: LD_INT 1
6170: PPUSH
6171: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6175: LD_ADDR_VAR 0 2
6179: PUSH
6180: LD_INT 22
6182: PUSH
6183: LD_INT 1
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PUSH
6190: EMPTY
6191: LIST
6192: PPUSH
6193: CALL_OW 69
6197: PUSH
6198: FOR_IN
6199: IFFALSE 6212
// ComFree ( i ) ;
6201: LD_VAR 0 2
6205: PPUSH
6206: CALL_OW 139
6210: GO 6198
6212: POP
6213: POP
// repeat wait ( 0 0$1 ) ;
6214: LD_INT 35
6216: PPUSH
6217: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6221: LD_EXP 8
6225: PPUSH
6226: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6230: LD_EXP 8
6234: PUSH
6235: LD_VAR 0 1
6239: PUSH
6240: LD_INT 1
6242: ARRAY
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PPUSH
6248: LD_INT 1
6250: PPUSH
6251: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6255: LD_EXP 8
6259: PPUSH
6260: CALL_OW 310
6264: IFFALSE 6214
// mikhailDepot = IsInUnit ( Mikhail ) ;
6266: LD_ADDR_EXP 23
6270: PUSH
6271: LD_EXP 8
6275: PPUSH
6276: CALL_OW 310
6280: ST_TO_ADDR
// InGameOff ;
6281: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6285: LD_STRING M3
6287: PPUSH
6288: CALL_OW 337
// end ; 3 :
6292: GO 6329
6294: LD_INT 3
6296: DOUBLE
6297: EQUAL
6298: IFTRUE 6302
6300: GO 6328
6302: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6303: LD_EXP 8
6307: PPUSH
6308: LD_INT 17
6310: PPUSH
6311: CALL_OW 113
// wait ( 0 0$3 ) ;
6315: LD_INT 105
6317: PPUSH
6318: CALL_OW 67
// InGameOff ;
6322: CALL_OW 9
// end ; end ;
6326: GO 6329
6328: POP
// PrepareTigers ;
6329: CALL 14470 0 0
// RussianTrap ;
6333: CALL 10040 0 0
// tigersRespawn = 1 ;
6337: LD_ADDR_EXP 30
6341: PUSH
6342: LD_INT 1
6344: ST_TO_ADDR
// end ;
6345: PPOPN 2
6347: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6348: LD_INT 1
6350: PPUSH
6351: CALL_OW 255
6355: PUSH
6356: LD_INT 1
6358: EQUAL
6359: PUSH
6360: LD_INT 10
6362: PPUSH
6363: CALL_OW 255
6367: PUSH
6368: LD_INT 1
6370: EQUAL
6371: AND
6372: PUSH
6373: LD_INT 1
6375: PPUSH
6376: CALL_OW 274
6380: PPUSH
6381: LD_INT 1
6383: PPUSH
6384: CALL_OW 275
6388: PUSH
6389: LD_INT 100
6391: GREATEREQUAL
6392: AND
6393: IFFALSE 6542
6395: GO 6397
6397: DISABLE
6398: LD_INT 0
6400: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6401: LD_INT 2100
6403: PPUSH
6404: LD_INT 4200
6406: PPUSH
6407: CALL_OW 12
6411: PUSH
6412: LD_INT 1050
6414: PLUS
6415: PPUSH
6416: CALL_OW 67
// PrepareCargoBays ;
6420: CALL 12777 0 0
// cargoRespawn = 1 ;
6424: LD_ADDR_EXP 28
6428: PUSH
6429: LD_INT 1
6431: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6432: LD_ADDR_VAR 0 1
6436: PUSH
6437: LD_EXP 15
6441: PUSH
6442: LD_EXP 16
6446: PUSH
6447: LD_EXP 17
6451: PUSH
6452: LD_EXP 18
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6463: LD_VAR 0 1
6467: PPUSH
6468: LD_INT 17
6470: PPUSH
6471: LD_INT 10
6473: PPUSH
6474: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6478: LD_VAR 0 1
6482: PPUSH
6483: LD_INT 36
6485: PPUSH
6486: LD_INT 13
6488: PPUSH
6489: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6493: LD_VAR 0 1
6497: PPUSH
6498: LD_INT 40
6500: PPUSH
6501: LD_INT 20
6503: PPUSH
6504: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6508: LD_VAR 0 1
6512: PPUSH
6513: LD_INT 53
6515: PPUSH
6516: LD_INT 16
6518: PPUSH
6519: CALL_OW 171
// wait ( 0 0$5 ) ;
6523: LD_INT 175
6525: PPUSH
6526: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6530: LD_EXP 17
6534: PPUSH
6535: LD_STRING D5-Rus2-1
6537: PPUSH
6538: CALL_OW 88
// end ;
6542: PPOPN 1
6544: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6545: LD_EXP 28
6549: PUSH
6550: LD_INT 1
6552: EQUAL
6553: IFFALSE 6708
6555: GO 6557
6557: DISABLE
6558: LD_INT 0
6560: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6561: LD_ADDR_VAR 0 1
6565: PUSH
6566: LD_INT 22
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: PUSH
6576: LD_INT 21
6578: PUSH
6579: LD_INT 2
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 34
6588: PUSH
6589: LD_INT 51
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: LIST
6600: PPUSH
6601: CALL_OW 69
6605: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6606: LD_INT 105
6608: PPUSH
6609: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6613: LD_VAR 0 1
6617: PPUSH
6618: LD_INT 3
6620: PUSH
6621: LD_INT 60
6623: PUSH
6624: EMPTY
6625: LIST
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: PPUSH
6631: CALL_OW 72
6635: PUSH
6636: LD_VAR 0 1
6640: PPUSH
6641: LD_INT 3
6643: PUSH
6644: LD_INT 24
6646: PUSH
6647: LD_INT 980
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: PPUSH
6658: CALL_OW 72
6662: OR
6663: IFFALSE 6606
// ComMoveXY ( cargos , 7 , 9 ) ;
6665: LD_VAR 0 1
6669: PPUSH
6670: LD_INT 7
6672: PPUSH
6673: LD_INT 9
6675: PPUSH
6676: CALL_OW 111
// cargoSee = 1 ;
6680: LD_ADDR_EXP 29
6684: PUSH
6685: LD_INT 1
6687: ST_TO_ADDR
// cargoEscape = 1 ;
6688: LD_ADDR_EXP 20
6692: PUSH
6693: LD_INT 1
6695: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6696: LD_EXP 17
6700: PPUSH
6701: LD_STRING D5-Rus2-1a
6703: PPUSH
6704: CALL_OW 88
// end ;
6708: PPOPN 1
6710: END
// every 0 0$1 trigger cargoEscape > 0 do
6711: LD_EXP 20
6715: PUSH
6716: LD_INT 0
6718: GREATER
6719: IFFALSE 6866
6721: GO 6723
6723: DISABLE
// begin enable ;
6724: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6725: LD_EXP 15
6729: PUSH
6730: LD_EXP 16
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PPUSH
6739: LD_INT 13
6741: PPUSH
6742: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6746: LD_EXP 15
6750: PPUSH
6751: LD_INT 13
6753: PPUSH
6754: CALL_OW 308
6758: PUSH
6759: LD_EXP 17
6763: PPUSH
6764: LD_INT 13
6766: PPUSH
6767: CALL_OW 308
6771: OR
6772: IFFALSE 6806
// begin RemoveUnit ( cargo1 ) ;
6774: LD_EXP 15
6778: PPUSH
6779: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6783: LD_EXP 17
6787: PPUSH
6788: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6792: LD_ADDR_EXP 20
6796: PUSH
6797: LD_EXP 20
6801: PUSH
6802: LD_INT 1
6804: PLUS
6805: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6806: LD_EXP 16
6810: PPUSH
6811: LD_INT 13
6813: PPUSH
6814: CALL_OW 308
6818: PUSH
6819: LD_EXP 18
6823: PPUSH
6824: LD_INT 13
6826: PPUSH
6827: CALL_OW 308
6831: OR
6832: IFFALSE 6866
// begin RemoveUnit ( cargo2 ) ;
6834: LD_EXP 16
6838: PPUSH
6839: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6843: LD_EXP 18
6847: PPUSH
6848: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6852: LD_ADDR_EXP 20
6856: PUSH
6857: LD_EXP 20
6861: PUSH
6862: LD_INT 1
6864: PLUS
6865: ST_TO_ADDR
// end ; end ;
6866: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
6867: LD_EXP 20
6871: PUSH
6872: LD_INT 1
6874: GREATER
6875: IFFALSE 7032
6877: GO 6879
6879: DISABLE
6880: LD_INT 0
6882: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
6883: LD_INT 4
6885: PPUSH
6886: LD_INT 1
6888: PPUSH
6889: LD_INT 1
6891: PPUSH
6892: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6896: LD_INT 31
6898: PPUSH
6899: LD_INT 1
6901: PPUSH
6902: LD_INT 1
6904: PPUSH
6905: CALL_OW 324
// if IsOK ( Jerry ) then
6909: LD_EXP 7
6913: PPUSH
6914: CALL_OW 302
6918: IFFALSE 6934
// Say ( Jerry , D5a-Sol1-1 ) else
6920: LD_EXP 7
6924: PPUSH
6925: LD_STRING D5a-Sol1-1
6927: PPUSH
6928: CALL_OW 88
6932: GO 7020
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
6934: LD_ADDR_VAR 0 1
6938: PUSH
6939: LD_INT 22
6941: PUSH
6942: LD_INT 1
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 26
6951: PUSH
6952: LD_INT 1
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PPUSH
6963: CALL_OW 69
6967: PUSH
6968: LD_EXP 1
6972: PUSH
6973: LD_EXP 2
6977: PUSH
6978: LD_EXP 3
6982: PUSH
6983: LD_EXP 5
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: DIFF
6994: ST_TO_ADDR
// if not speaker then
6995: LD_VAR 0 1
6999: NOT
7000: IFFALSE 7004
// exit ;
7002: GO 7032
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7004: LD_VAR 0 1
7008: PUSH
7009: LD_INT 1
7011: ARRAY
7012: PPUSH
7013: LD_STRING D5a-Sol1-1
7015: PPUSH
7016: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7020: LD_EXP 1
7024: PPUSH
7025: LD_STRING D5a-JMM-1
7027: PPUSH
7028: CALL_OW 88
// end ;
7032: PPOPN 1
7034: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7035: LD_INT 1
7037: PPUSH
7038: CALL_OW 255
7042: PUSH
7043: LD_INT 3
7045: EQUAL
7046: PUSH
7047: LD_INT 1
7049: PPUSH
7050: CALL_OW 256
7054: PUSH
7055: LD_INT 1000
7057: LESS
7058: AND
7059: PUSH
7060: LD_INT 10
7062: PPUSH
7063: CALL_OW 255
7067: PUSH
7068: LD_INT 3
7070: EQUAL
7071: PUSH
7072: LD_INT 10
7074: PPUSH
7075: CALL_OW 256
7079: PUSH
7080: LD_INT 1000
7082: LESS
7083: AND
7084: OR
7085: IFFALSE 7102
7087: GO 7089
7089: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
7090: LD_EXP 1
7094: PPUSH
7095: LD_STRING D8-JMM-1
7097: PPUSH
7098: CALL_OW 88
// end ;
7102: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7103: LD_EXP 8
7107: PPUSH
7108: CALL_OW 310
7112: PUSH
7113: LD_INT 1
7115: EQUAL
7116: PUSH
7117: LD_EXP 22
7121: PUSH
7122: LD_INT 3
7124: EQUAL
7125: NOT
7126: AND
7127: IFFALSE 7149
7129: GO 7131
7131: DISABLE
// begin mikhailInBase = 1 ;
7132: LD_ADDR_EXP 22
7136: PUSH
7137: LD_INT 1
7139: ST_TO_ADDR
// mikhailStatus = 1 ;
7140: LD_ADDR_EXP 21
7144: PUSH
7145: LD_INT 1
7147: ST_TO_ADDR
// enable ;
7148: ENABLE
// end ;
7149: END
// export function AskMikhail ; begin
7150: LD_INT 0
7152: PPUSH
// case query ( QMikh2 ) of 1 :
7153: LD_STRING QMikh2
7155: PPUSH
7156: CALL_OW 97
7160: PUSH
7161: LD_INT 1
7163: DOUBLE
7164: EQUAL
7165: IFTRUE 7169
7167: GO 7236
7169: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7170: LD_INT 1
7172: PPUSH
7173: LD_INT 6
7175: PPUSH
7176: LD_INT 2
7178: PPUSH
7179: LD_INT 1
7181: PPUSH
7182: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7186: LD_EXP 8
7190: PPUSH
7191: LD_INT 6
7193: PPUSH
7194: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7198: LD_EXP 8
7202: PPUSH
7203: CALL_OW 122
// wait ( 0 0$1 ) ;
7207: LD_INT 35
7209: PPUSH
7210: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7214: LD_EXP 8
7218: PPUSH
7219: LD_INT 17
7221: PPUSH
7222: CALL_OW 113
// mikhailInbase = 0 ;
7226: LD_ADDR_EXP 22
7230: PUSH
7231: LD_INT 0
7233: ST_TO_ADDR
// end ; 2 :
7234: GO 7477
7236: LD_INT 2
7238: DOUBLE
7239: EQUAL
7240: IFTRUE 7244
7242: GO 7417
7244: POP
// begin mikhailInBase = 2 ;
7245: LD_ADDR_EXP 22
7249: PUSH
7250: LD_INT 2
7252: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7253: LD_EXP 8
7257: PPUSH
7258: LD_INT 6
7260: PPUSH
7261: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7265: LD_EXP 8
7269: PPUSH
7270: CALL_OW 122
// wait ( 0 0$1 ) ;
7274: LD_INT 35
7276: PPUSH
7277: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7281: LD_EXP 8
7285: PPUSH
7286: LD_EXP 8
7290: PPUSH
7291: CALL_OW 250
7295: PUSH
7296: LD_INT 2
7298: PLUS
7299: PPUSH
7300: LD_EXP 8
7304: PPUSH
7305: CALL_OW 251
7309: PUSH
7310: LD_INT 2
7312: PLUS
7313: PPUSH
7314: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7318: LD_EXP 8
7322: PPUSH
7323: LD_EXP 8
7327: PPUSH
7328: CALL_OW 250
7332: PUSH
7333: LD_INT 1
7335: PLUS
7336: PPUSH
7337: LD_EXP 8
7341: PPUSH
7342: CALL_OW 251
7346: PUSH
7347: LD_INT 2
7349: PLUS
7350: PPUSH
7351: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7355: LD_EXP 8
7359: PPUSH
7360: LD_EXP 8
7364: PPUSH
7365: CALL_OW 250
7369: PUSH
7370: LD_INT 2
7372: PLUS
7373: PPUSH
7374: LD_EXP 8
7378: PPUSH
7379: CALL_OW 251
7383: PPUSH
7384: CALL_OW 171
// wait ( 0 0$5 ) ;
7388: LD_INT 175
7390: PPUSH
7391: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7395: LD_EXP 8
7399: PPUSH
7400: LD_INT 25
7402: PPUSH
7403: CALL_OW 113
// mikhailInBase = 4 ;
7407: LD_ADDR_EXP 22
7411: PUSH
7412: LD_INT 4
7414: ST_TO_ADDR
// end ; 3 :
7415: GO 7477
7417: LD_INT 3
7419: DOUBLE
7420: EQUAL
7421: IFTRUE 7425
7423: GO 7476
7425: POP
// begin SetSide ( Mikhail , 6 ) ;
7426: LD_EXP 8
7430: PPUSH
7431: LD_INT 6
7433: PPUSH
7434: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7438: LD_EXP 8
7442: PPUSH
7443: CALL_OW 122
// wait ( 0 0$1 ) ;
7447: LD_INT 35
7449: PPUSH
7450: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7454: LD_EXP 8
7458: PPUSH
7459: LD_INT 17
7461: PPUSH
7462: CALL_OW 113
// mikhailInbase = 3 ;
7466: LD_ADDR_EXP 22
7470: PUSH
7471: LD_INT 3
7473: ST_TO_ADDR
// end ; end ;
7474: GO 7477
7476: POP
// end ;
7477: LD_VAR 0 1
7481: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7482: LD_EXP 8
7486: PPUSH
7487: LD_INT 25
7489: PPUSH
7490: CALL_OW 308
7494: PUSH
7495: LD_EXP 22
7499: PUSH
7500: LD_INT 4
7502: EQUAL
7503: AND
7504: IFFALSE 7608
7506: GO 7508
7508: DISABLE
// begin enable ;
7509: ENABLE
// mikhailInBase = 1 ;
7510: LD_ADDR_EXP 22
7514: PUSH
7515: LD_INT 1
7517: ST_TO_ADDR
// InGameOn ;
7518: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7522: LD_INT 1
7524: PPUSH
7525: LD_INT 6
7527: PPUSH
7528: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7532: LD_INT 35
7534: PPUSH
7535: CALL_OW 67
// if Carry ( Mikhail ) then
7539: LD_EXP 8
7543: PPUSH
7544: CALL_OW 281
7548: IFFALSE 7559
// ComUnload ( Mikhail ) ;
7550: LD_EXP 8
7554: PPUSH
7555: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7559: LD_EXP 8
7563: PPUSH
7564: LD_INT 1
7566: PPUSH
7567: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7571: LD_EXP 8
7575: PPUSH
7576: CALL_OW 310
7580: IFFALSE 7532
// SetSide ( dep1 , 1 ) ;
7582: LD_INT 1
7584: PPUSH
7585: LD_INT 1
7587: PPUSH
7588: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7592: LD_EXP 8
7596: PPUSH
7597: LD_INT 1
7599: PPUSH
7600: CALL_OW 235
// InGameOff ;
7604: CALL_OW 9
// end ;
7608: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7609: LD_EXP 8
7613: PPUSH
7614: CALL_OW 310
7618: PUSH
7619: LD_EXP 22
7623: PUSH
7624: LD_INT 3
7626: EQUAL
7627: NOT
7628: AND
7629: IFFALSE 7764
7631: GO 7633
7633: DISABLE
// begin enable ;
7634: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7635: LD_INT 22
7637: PUSH
7638: LD_INT 1
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: LD_INT 21
7647: PUSH
7648: LD_INT 1
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 91
7657: PUSH
7658: LD_EXP 8
7662: PPUSH
7663: CALL_OW 310
7667: PUSH
7668: LD_INT 10
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: LIST
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: LIST
7680: PPUSH
7681: CALL_OW 69
7685: PUSH
7686: LD_INT 1
7688: EQUAL
7689: IFFALSE 7764
// begin mikhailStatus = 4 ;
7691: LD_ADDR_EXP 21
7695: PUSH
7696: LD_INT 4
7698: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7699: LD_INT 1
7701: PPUSH
7702: LD_INT 6
7704: PPUSH
7705: LD_INT 2
7707: PPUSH
7708: LD_INT 1
7710: PPUSH
7711: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7715: LD_EXP 8
7719: PPUSH
7720: LD_INT 6
7722: PPUSH
7723: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7727: LD_EXP 8
7731: PPUSH
7732: CALL_OW 122
// wait ( 0 0$1 ) ;
7736: LD_INT 35
7738: PPUSH
7739: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7743: LD_EXP 8
7747: PPUSH
7748: LD_INT 17
7750: PPUSH
7751: CALL_OW 113
// mikhailStatus = 3 ;
7755: LD_ADDR_EXP 21
7759: PUSH
7760: LD_INT 3
7762: ST_TO_ADDR
// disable ;
7763: DISABLE
// end ; end ;
7764: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7765: LD_EXP 1
7769: PPUSH
7770: LD_EXP 23
7774: PPUSH
7775: CALL_OW 296
7779: PUSH
7780: LD_INT 5
7782: LESS
7783: PUSH
7784: LD_EXP 21
7788: PUSH
7789: LD_INT 3
7791: EQUAL
7792: AND
7793: PUSH
7794: LD_EXP 22
7798: PUSH
7799: LD_INT 3
7801: EQUAL
7802: NOT
7803: AND
7804: IFFALSE 8026
7806: GO 7808
7808: DISABLE
7809: LD_INT 0
7811: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7812: LD_ADDR_VAR 0 1
7816: PUSH
7817: LD_INT 22
7819: PUSH
7820: LD_INT 1
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: PUSH
7827: LD_INT 21
7829: PUSH
7830: LD_INT 1
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PUSH
7837: LD_INT 26
7839: PUSH
7840: LD_INT 1
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: LIST
7851: PPUSH
7852: CALL_OW 69
7856: PUSH
7857: LD_EXP 1
7861: PUSH
7862: LD_EXP 5
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: DIFF
7871: ST_TO_ADDR
// DialogueOn ;
7872: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7876: LD_EXP 1
7880: PPUSH
7881: LD_STRING D7-JMM-1
7883: PPUSH
7884: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7888: LD_VAR 0 1
7892: PUSH
7893: LD_INT 1
7895: ARRAY
7896: PPUSH
7897: LD_STRING D7-Sol1-1
7899: PPUSH
7900: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7904: LD_EXP 1
7908: PPUSH
7909: LD_STRING D7-JMM-2
7911: PPUSH
7912: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7916: LD_VAR 0 1
7920: PUSH
7921: LD_INT 1
7923: ARRAY
7924: PPUSH
7925: LD_STRING D7-Sol1-2
7927: PPUSH
7928: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7932: LD_EXP 1
7936: PPUSH
7937: LD_STRING D7-JMM-3
7939: PPUSH
7940: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7944: LD_VAR 0 1
7948: PUSH
7949: LD_INT 1
7951: ARRAY
7952: PPUSH
7953: LD_STRING D7-Sol1-3
7955: PPUSH
7956: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7960: LD_EXP 3
7964: PPUSH
7965: CALL_OW 302
7969: PUSH
7970: LD_EXP 4
7974: PPUSH
7975: CALL_OW 302
7979: AND
7980: IFFALSE 8022
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7982: LD_EXP 3
7986: PPUSH
7987: LD_STRING D7-Cyrus-3
7989: PPUSH
7990: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7994: LD_VAR 0 1
7998: PUSH
7999: LD_INT 1
8001: ARRAY
8002: PPUSH
8003: LD_STRING D7-Sol1-4
8005: PPUSH
8006: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8010: LD_EXP 4
8014: PPUSH
8015: LD_STRING D7-Lisa-4
8017: PPUSH
8018: CALL_OW 88
// end ; DialogueOff ;
8022: CALL_OW 7
// end ;
8026: PPOPN 1
8028: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8029: LD_EXP 8
8033: PPUSH
8034: CALL_OW 303
8038: PUSH
8039: LD_EXP 21
8043: PUSH
8044: LD_INT 3
8046: EQUAL
8047: AND
8048: IFFALSE 8062
8050: GO 8052
8052: DISABLE
// begin enable ;
8053: ENABLE
// mikhailStatus = 2 ;
8054: LD_ADDR_EXP 21
8058: PUSH
8059: LD_INT 2
8061: ST_TO_ADDR
// end ;
8062: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8063: LD_EXP 8
8067: PPUSH
8068: LD_INT 17
8070: PPUSH
8071: CALL_OW 308
8075: PUSH
8076: LD_EXP 8
8080: PPUSH
8081: CALL_OW 255
8085: PUSH
8086: LD_INT 6
8088: EQUAL
8089: AND
8090: IFFALSE 8123
8092: GO 8094
8094: DISABLE
// begin if not mikhailInBase = 3 then
8095: LD_EXP 22
8099: PUSH
8100: LD_INT 3
8102: EQUAL
8103: NOT
8104: IFFALSE 8114
// mikhailStatus = 3 ;
8106: LD_ADDR_EXP 21
8110: PUSH
8111: LD_INT 3
8113: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8114: LD_EXP 8
8118: PPUSH
8119: CALL_OW 64
// end ;
8123: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8124: LD_EXP 21
8128: PUSH
8129: LD_INT 3
8131: EQUAL
8132: PUSH
8133: LD_EXP 8
8137: PPUSH
8138: CALL_OW 255
8142: PUSH
8143: LD_INT 6
8145: EQUAL
8146: AND
8147: IFFALSE 8313
8149: GO 8151
8151: DISABLE
8152: LD_INT 0
8154: PPUSH
8155: PPUSH
// begin enable ;
8156: ENABLE
// if IsOk ( Mikhail ) then
8157: LD_EXP 8
8161: PPUSH
8162: CALL_OW 302
8166: IFFALSE 8313
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8168: LD_ADDR_VAR 0 2
8172: PUSH
8173: LD_EXP 8
8177: PPUSH
8178: LD_INT 22
8180: PUSH
8181: LD_INT 1
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: PUSH
8188: LD_INT 21
8190: PUSH
8191: LD_INT 1
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PPUSH
8202: CALL_OW 69
8206: PPUSH
8207: CALL 10232 0 2
8211: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8212: LD_VAR 0 2
8216: PPUSH
8217: LD_EXP 8
8221: PPUSH
8222: CALL_OW 296
8226: PUSH
8227: LD_INT 8
8229: LESS
8230: IFFALSE 8313
// begin if GetSex ( attacker ) = sex_male then
8232: LD_VAR 0 2
8236: PPUSH
8237: CALL_OW 258
8241: PUSH
8242: LD_INT 1
8244: EQUAL
8245: IFFALSE 8281
// begin disable ;
8247: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8248: LD_VAR 0 2
8252: PPUSH
8253: LD_STRING D7a-Sol1-1
8255: PPUSH
8256: CALL_OW 88
// wait ( 0 0$2 ) ;
8260: LD_INT 70
8262: PPUSH
8263: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8267: LD_VAR 0 2
8271: PPUSH
8272: LD_STRING D7a-Sol1-1a
8274: PPUSH
8275: CALL_OW 88
// end else
8279: GO 8313
// begin disable ;
8281: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8282: LD_VAR 0 2
8286: PPUSH
8287: LD_STRING D7a-FSol1-1
8289: PPUSH
8290: CALL_OW 88
// wait ( 0 0$2 ) ;
8294: LD_INT 70
8296: PPUSH
8297: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8301: LD_VAR 0 2
8305: PPUSH
8306: LD_STRING D7a-FSol1-1a
8308: PPUSH
8309: CALL_OW 88
// end ; end ; end ; end ;
8313: PPOPN 2
8315: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8316: LD_EXP 27
8320: PUSH
8321: LD_INT 1
8323: EQUAL
8324: PUSH
8325: LD_INT 22
8327: PPUSH
8328: LD_INT 22
8330: PUSH
8331: LD_INT 3
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: PUSH
8338: LD_INT 21
8340: PUSH
8341: LD_INT 1
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PPUSH
8352: CALL_OW 70
8356: PUSH
8357: LD_INT 2
8359: GREATER
8360: AND
8361: PUSH
8362: LD_INT 22
8364: PPUSH
8365: LD_INT 22
8367: PUSH
8368: LD_INT 1
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: PUSH
8375: LD_INT 2
8377: PUSH
8378: LD_INT 21
8380: PUSH
8381: LD_INT 1
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: PUSH
8388: LD_INT 59
8390: PUSH
8391: EMPTY
8392: LIST
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: LIST
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 70
8407: PUSH
8408: LD_INT 0
8410: EQUAL
8411: AND
8412: IFFALSE 8427
8414: GO 8416
8416: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8417: LD_INT 1
8419: PPUSH
8420: LD_INT 3
8422: PPUSH
8423: CALL_OW 235
// end ;
8427: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8428: LD_EXP 30
8432: PUSH
8433: LD_INT 1
8435: EQUAL
8436: PUSH
8437: LD_INT 22
8439: PUSH
8440: LD_INT 0
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: PUSH
8447: LD_INT 25
8449: PUSH
8450: LD_INT 14
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PPUSH
8461: CALL_OW 69
8465: PUSH
8466: LD_INT 0
8468: EQUAL
8469: AND
8470: IFFALSE 8564
8472: GO 8474
8474: DISABLE
8475: LD_INT 0
8477: PPUSH
8478: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8479: LD_ADDR_VAR 0 2
8483: PUSH
8484: LD_INT 22
8486: PUSH
8487: LD_INT 1
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: PUSH
8494: LD_INT 21
8496: PUSH
8497: LD_INT 1
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: PUSH
8504: LD_INT 23
8506: PUSH
8507: LD_INT 1
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: LIST
8518: PPUSH
8519: CALL_OW 69
8523: ST_TO_ADDR
// for i in tmp do
8524: LD_ADDR_VAR 0 1
8528: PUSH
8529: LD_VAR 0 2
8533: PUSH
8534: FOR_IN
8535: IFFALSE 8562
// begin AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8537: LD_VAR 0 1
8541: PPUSH
8542: LD_INT 1
8544: PPUSH
8545: LD_INT 4
8547: PPUSH
8548: CALL_OW 12
8552: PPUSH
8553: LD_INT 300
8555: PPUSH
8556: CALL_OW 492
// end ;
8560: GO 8534
8562: POP
8563: POP
// end ; end_of_file
8564: PPOPN 2
8566: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8567: LD_INT 0
8569: PPUSH
8570: PPUSH
8571: PPUSH
8572: PPUSH
// for i = 1 to count do
8573: LD_ADDR_VAR 0 8
8577: PUSH
8578: DOUBLE
8579: LD_INT 1
8581: DEC
8582: ST_TO_ADDR
8583: LD_VAR 0 6
8587: PUSH
8588: FOR_TO
8589: IFFALSE 8670
// begin uc_side = side ;
8591: LD_ADDR_OWVAR 20
8595: PUSH
8596: LD_VAR 0 1
8600: ST_TO_ADDR
// uc_nation = nation ;
8601: LD_ADDR_OWVAR 21
8605: PUSH
8606: LD_VAR 0 2
8610: ST_TO_ADDR
// hc_gallery =  ;
8611: LD_ADDR_OWVAR 33
8615: PUSH
8616: LD_STRING 
8618: ST_TO_ADDR
// hc_name =  ;
8619: LD_ADDR_OWVAR 26
8623: PUSH
8624: LD_STRING 
8626: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8627: LD_INT 0
8629: PPUSH
8630: LD_VAR 0 5
8634: PPUSH
8635: LD_VAR 0 4
8639: PPUSH
8640: CALL_OW 380
// un = CreateHuman ;
8644: LD_ADDR_VAR 0 10
8648: PUSH
8649: CALL_OW 44
8653: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8654: LD_VAR 0 10
8658: PPUSH
8659: LD_VAR 0 3
8663: PPUSH
8664: CALL_OW 52
// end ;
8668: GO 8588
8670: POP
8671: POP
// end ;
8672: LD_VAR 0 7
8676: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8677: LD_INT 0
8679: PPUSH
8680: PPUSH
8681: PPUSH
// uc_side := GetSide ( b ) ;
8682: LD_ADDR_OWVAR 20
8686: PUSH
8687: LD_VAR 0 2
8691: PPUSH
8692: CALL_OW 255
8696: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8697: LD_ADDR_OWVAR 21
8701: PUSH
8702: LD_VAR 0 2
8706: PPUSH
8707: CALL_OW 248
8711: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8712: LD_INT 0
8714: PPUSH
8715: LD_INT 1
8717: PPUSH
8718: LD_VAR 0 1
8722: PPUSH
8723: CALL_OW 380
// un = CreateHuman ;
8727: LD_ADDR_VAR 0 4
8731: PUSH
8732: CALL_OW 44
8736: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8737: LD_ADDR_VAR 0 5
8741: PUSH
8742: LD_VAR 0 2
8746: PPUSH
8747: CALL_OW 254
8751: PUSH
8752: LD_INT 3
8754: MINUS
8755: ST_TO_ADDR
// if dir < 0 then
8756: LD_VAR 0 5
8760: PUSH
8761: LD_INT 0
8763: LESS
8764: IFFALSE 8780
// dir := 6 + dir ;
8766: LD_ADDR_VAR 0 5
8770: PUSH
8771: LD_INT 6
8773: PUSH
8774: LD_VAR 0 5
8778: PLUS
8779: ST_TO_ADDR
// SetDir ( un , dir ) ;
8780: LD_VAR 0 4
8784: PPUSH
8785: LD_VAR 0 5
8789: PPUSH
8790: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8794: LD_VAR 0 4
8798: PPUSH
8799: LD_VAR 0 2
8803: PPUSH
8804: CALL_OW 52
// end ;
8808: LD_VAR 0 3
8812: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8813: LD_INT 0
8815: PPUSH
8816: PPUSH
8817: PPUSH
8818: PPUSH
8819: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8820: LD_ADDR_VAR 0 7
8824: PUSH
8825: LD_INT 22
8827: PUSH
8828: LD_VAR 0 1
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: PUSH
8837: LD_INT 25
8839: PUSH
8840: LD_INT 2
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: PUSH
8847: LD_INT 24
8849: PUSH
8850: LD_INT 1000
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: LIST
8861: PPUSH
8862: CALL_OW 69
8866: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8867: LD_ADDR_VAR 0 5
8871: PUSH
8872: LD_VAR 0 3
8876: PPUSH
8877: LD_INT 22
8879: PUSH
8880: LD_VAR 0 1
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PUSH
8889: LD_INT 21
8891: PUSH
8892: LD_INT 3
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: PUSH
8899: LD_INT 3
8901: PUSH
8902: LD_INT 24
8904: PUSH
8905: LD_INT 1000
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: LIST
8920: PUSH
8921: EMPTY
8922: LIST
8923: PPUSH
8924: CALL_OW 70
8928: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8929: LD_VAR 0 5
8933: PUSH
8934: LD_INT 0
8936: GREATER
8937: PUSH
8938: LD_VAR 0 7
8942: PUSH
8943: LD_INT 0
8945: GREATER
8946: AND
8947: IFFALSE 9013
// begin for i in engineerOk_list do
8949: LD_ADDR_VAR 0 6
8953: PUSH
8954: LD_VAR 0 7
8958: PUSH
8959: FOR_IN
8960: IFFALSE 9011
// begin for j in buildings_list do
8962: LD_ADDR_VAR 0 8
8966: PUSH
8967: LD_VAR 0 5
8971: PUSH
8972: FOR_IN
8973: IFFALSE 9007
// begin AddComExitBuilding ( i ) ;
8975: LD_VAR 0 6
8979: PPUSH
8980: CALL_OW 182
// wait ( 0 0$1 ) ;
8984: LD_INT 35
8986: PPUSH
8987: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8991: LD_VAR 0 6
8995: PPUSH
8996: LD_VAR 0 8
9000: PPUSH
9001: CALL_OW 190
// end ;
9005: GO 8972
9007: POP
9008: POP
// end ;
9009: GO 8959
9011: POP
9012: POP
// end ; if buildings_list = 0 then
9013: LD_VAR 0 5
9017: PUSH
9018: LD_INT 0
9020: EQUAL
9021: IFFALSE 9054
// begin for i in engineerOK_list do
9023: LD_ADDR_VAR 0 6
9027: PUSH
9028: LD_VAR 0 7
9032: PUSH
9033: FOR_IN
9034: IFFALSE 9052
// begin ComEnterUnit ( i , building ) ;
9036: LD_VAR 0 6
9040: PPUSH
9041: LD_VAR 0 2
9045: PPUSH
9046: CALL_OW 120
// end ;
9050: GO 9033
9052: POP
9053: POP
// end ; end ;
9054: LD_VAR 0 4
9058: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
9059: LD_INT 0
9061: PPUSH
9062: PPUSH
9063: PPUSH
9064: PPUSH
9065: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9066: LD_ADDR_VAR 0 6
9070: PUSH
9071: LD_INT 22
9073: PUSH
9074: LD_VAR 0 1
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: PUSH
9083: LD_INT 25
9085: PUSH
9086: LD_INT 4
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PUSH
9093: LD_INT 24
9095: PUSH
9096: LD_INT 250
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: LIST
9107: PPUSH
9108: CALL_OW 69
9112: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9113: LD_ADDR_VAR 0 9
9117: PUSH
9118: LD_VAR 0 3
9122: PPUSH
9123: LD_INT 22
9125: PUSH
9126: LD_VAR 0 1
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: PUSH
9135: LD_INT 21
9137: PUSH
9138: LD_INT 1
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: PUSH
9145: LD_INT 3
9147: PUSH
9148: LD_INT 24
9150: PUSH
9151: LD_INT 650
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: LIST
9166: PPUSH
9167: CALL_OW 70
9171: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9172: LD_VAR 0 9
9176: PUSH
9177: LD_INT 0
9179: GREATER
9180: PUSH
9181: LD_VAR 0 6
9185: PUSH
9186: LD_INT 0
9188: GREATER
9189: AND
9190: IFFALSE 9317
// begin for i = 1 to damageUnits do
9192: LD_ADDR_VAR 0 7
9196: PUSH
9197: DOUBLE
9198: LD_INT 1
9200: DEC
9201: ST_TO_ADDR
9202: LD_VAR 0 9
9206: PUSH
9207: FOR_TO
9208: IFFALSE 9232
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9210: LD_VAR 0 9
9214: PUSH
9215: LD_VAR 0 7
9219: ARRAY
9220: PPUSH
9221: LD_VAR 0 2
9225: PPUSH
9226: CALL_OW 113
9230: GO 9207
9232: POP
9233: POP
// for i in sci_list do
9234: LD_ADDR_VAR 0 7
9238: PUSH
9239: LD_VAR 0 6
9243: PUSH
9244: FOR_IN
9245: IFFALSE 9313
// begin ComExitBuilding ( i ) ;
9247: LD_VAR 0 7
9251: PPUSH
9252: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9256: LD_ADDR_VAR 0 8
9260: PUSH
9261: LD_VAR 0 2
9265: PPUSH
9266: LD_INT 22
9268: PUSH
9269: LD_VAR 0 1
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: PPUSH
9278: CALL_OW 70
9282: PUSH
9283: FOR_IN
9284: IFFALSE 9309
// begin AddComHeal ( i , j ) ;
9286: LD_VAR 0 7
9290: PPUSH
9291: LD_VAR 0 8
9295: PPUSH
9296: CALL_OW 188
// wait ( 1 1$0 ) ;
9300: LD_INT 2100
9302: PPUSH
9303: CALL_OW 67
// end ;
9307: GO 9283
9309: POP
9310: POP
// end ;
9311: GO 9244
9313: POP
9314: POP
// end else
9315: GO 9331
// begin AddComEnterUnit ( sci_list , build ) ;
9317: LD_VAR 0 6
9321: PPUSH
9322: LD_VAR 0 4
9326: PPUSH
9327: CALL_OW 180
// end ; end ;
9331: LD_VAR 0 5
9335: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9336: LD_INT 0
9338: PPUSH
9339: PPUSH
9340: PPUSH
9341: PPUSH
9342: PPUSH
9343: PPUSH
9344: PPUSH
9345: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9346: LD_ADDR_VAR 0 7
9350: PUSH
9351: LD_VAR 0 3
9355: PPUSH
9356: LD_INT 22
9358: PUSH
9359: LD_VAR 0 1
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: PUSH
9368: LD_INT 21
9370: PUSH
9371: LD_INT 2
9373: PUSH
9374: EMPTY
9375: LIST
9376: LIST
9377: PUSH
9378: LD_INT 24
9380: PUSH
9381: LD_INT 550
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: PUSH
9388: LD_INT 34
9390: PUSH
9391: LD_INT 46
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: PPUSH
9404: CALL_OW 70
9408: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9409: LD_ADDR_VAR 0 8
9413: PUSH
9414: LD_VAR 0 3
9418: PPUSH
9419: LD_INT 22
9421: PUSH
9422: LD_VAR 0 1
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: LD_INT 21
9433: PUSH
9434: LD_INT 2
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: LD_INT 34
9443: PUSH
9444: LD_INT 46
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: PUSH
9451: LD_INT 3
9453: PUSH
9454: LD_INT 24
9456: PUSH
9457: LD_INT 550
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: PPUSH
9474: CALL_OW 70
9478: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9479: LD_ADDR_VAR 0 9
9483: PUSH
9484: LD_VAR 0 2
9488: PPUSH
9489: LD_INT 22
9491: PUSH
9492: LD_VAR 0 1
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 21
9503: PUSH
9504: LD_INT 2
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 34
9513: PUSH
9514: LD_INT 46
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 24
9523: PUSH
9524: LD_INT 1000
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: LD_INT 58
9533: PUSH
9534: EMPTY
9535: LIST
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: PPUSH
9544: CALL_OW 70
9548: ST_TO_ADDR
// for i in damageVehicle_list do
9549: LD_ADDR_VAR 0 5
9553: PUSH
9554: LD_VAR 0 8
9558: PUSH
9559: FOR_IN
9560: IFFALSE 9579
// mechanicInside_list = UnitsInside ( i ) ;
9562: LD_ADDR_VAR 0 10
9566: PUSH
9567: LD_VAR 0 5
9571: PPUSH
9572: CALL_OW 313
9576: ST_TO_ADDR
9577: GO 9559
9579: POP
9580: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9581: LD_ADDR_VAR 0 11
9585: PUSH
9586: LD_VAR 0 2
9590: PPUSH
9591: LD_INT 22
9593: PUSH
9594: LD_VAR 0 1
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PUSH
9603: LD_INT 25
9605: PUSH
9606: LD_INT 3
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PPUSH
9617: CALL_OW 70
9621: ST_TO_ADDR
// if damageVehicle_list > 0 then
9622: LD_VAR 0 8
9626: PUSH
9627: LD_INT 0
9629: GREATER
9630: IFFALSE 9703
// begin for i in damageVehicle_list do
9632: LD_ADDR_VAR 0 5
9636: PUSH
9637: LD_VAR 0 8
9641: PUSH
9642: FOR_IN
9643: IFFALSE 9701
// begin for j in mechanicInside_list do
9645: LD_ADDR_VAR 0 6
9649: PUSH
9650: LD_VAR 0 10
9654: PUSH
9655: FOR_IN
9656: IFFALSE 9697
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9658: LD_VAR 0 8
9662: PPUSH
9663: LD_VAR 0 2
9667: PPUSH
9668: CALL_OW 113
// AddComExitVehicle ( j ) ;
9672: LD_VAR 0 6
9676: PPUSH
9677: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9681: LD_VAR 0 6
9685: PPUSH
9686: LD_VAR 0 5
9690: PPUSH
9691: CALL_OW 189
// end ;
9695: GO 9655
9697: POP
9698: POP
// end ;
9699: GO 9642
9701: POP
9702: POP
// end ; if emptyVehicle_list > 0 then
9703: LD_VAR 0 9
9707: PUSH
9708: LD_INT 0
9710: GREATER
9711: IFFALSE 9761
// begin for i in emptyVehicle_list do
9713: LD_ADDR_VAR 0 5
9717: PUSH
9718: LD_VAR 0 9
9722: PUSH
9723: FOR_IN
9724: IFFALSE 9759
// begin for j in mechanicOutside_list do
9726: LD_ADDR_VAR 0 6
9730: PUSH
9731: LD_VAR 0 11
9735: PUSH
9736: FOR_IN
9737: IFFALSE 9755
// begin AddComEnterUnit ( j , i ) ;
9739: LD_VAR 0 6
9743: PPUSH
9744: LD_VAR 0 5
9748: PPUSH
9749: CALL_OW 180
// end ;
9753: GO 9736
9755: POP
9756: POP
// end ;
9757: GO 9723
9759: POP
9760: POP
// end ; if VehicleOK_list > 0 then
9761: LD_VAR 0 7
9765: PUSH
9766: LD_INT 0
9768: GREATER
9769: IFFALSE 9803
// begin for i in VehicleOK_list do
9771: LD_ADDR_VAR 0 5
9775: PUSH
9776: LD_VAR 0 7
9780: PUSH
9781: FOR_IN
9782: IFFALSE 9801
// ComAgressiveMove ( i , 110 , 29 ) ;
9784: LD_VAR 0 5
9788: PPUSH
9789: LD_INT 110
9791: PPUSH
9792: LD_INT 29
9794: PPUSH
9795: CALL_OW 114
9799: GO 9781
9801: POP
9802: POP
// end ; end ;
9803: LD_VAR 0 4
9807: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9808: LD_INT 0
9810: PPUSH
9811: PPUSH
9812: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9813: LD_VAR 0 1
9817: PPUSH
9818: LD_INT 22
9820: PUSH
9821: LD_VAR 0 2
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: PUSH
9830: LD_INT 2
9832: PUSH
9833: LD_INT 21
9835: PUSH
9836: LD_INT 2
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: LD_INT 21
9845: PUSH
9846: LD_INT 1
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: LIST
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PPUSH
9862: CALL_OW 70
9866: PUSH
9867: LD_VAR 0 5
9871: GREATER
9872: IFFALSE 10004
// begin for i in defendersList do
9874: LD_ADDR_VAR 0 7
9878: PUSH
9879: LD_VAR 0 3
9883: PUSH
9884: FOR_IN
9885: IFFALSE 10000
// begin AddComExitBuilding ( i ) ;
9887: LD_VAR 0 7
9891: PPUSH
9892: CALL_OW 182
// wait ( 0 0$1 ) ;
9896: LD_INT 35
9898: PPUSH
9899: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9903: LD_ADDR_VAR 0 8
9907: PUSH
9908: LD_VAR 0 1
9912: PPUSH
9913: LD_INT 22
9915: PUSH
9916: LD_VAR 0 2
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PUSH
9925: LD_INT 2
9927: PUSH
9928: LD_INT 21
9930: PUSH
9931: LD_INT 2
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: LD_INT 21
9940: PUSH
9941: LD_INT 1
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: LIST
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PPUSH
9957: CALL_OW 70
9961: PUSH
9962: FOR_IN
9963: IFFALSE 9996
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
9965: LD_VAR 0 7
9969: PPUSH
9970: LD_VAR 0 8
9974: PPUSH
9975: CALL_OW 250
9979: PPUSH
9980: LD_VAR 0 8
9984: PPUSH
9985: CALL_OW 251
9989: PPUSH
9990: CALL_OW 174
9994: GO 9962
9996: POP
9997: POP
// end ;
9998: GO 9884
10000: POP
10001: POP
// end else
10002: GO 10035
// begin for i in defendersList do
10004: LD_ADDR_VAR 0 7
10008: PUSH
10009: LD_VAR 0 3
10013: PUSH
10014: FOR_IN
10015: IFFALSE 10033
// ComEnterUnit ( i , build ) ;
10017: LD_VAR 0 7
10021: PPUSH
10022: LD_VAR 0 4
10026: PPUSH
10027: CALL_OW 120
10031: GO 10014
10033: POP
10034: POP
// end ; end ;
10035: LD_VAR 0 6
10039: RET
// export function RussianTrap ; var i ; begin
10040: LD_INT 0
10042: PPUSH
10043: PPUSH
// if GetSide ( Brian ) = 4 then
10044: LD_EXP 6
10048: PPUSH
10049: CALL_OW 255
10053: PUSH
10054: LD_INT 4
10056: EQUAL
10057: IFFALSE 10080
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10059: LD_EXP 6
10063: PUSH
10064: LD_EXP 7
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: PPUSH
10073: LD_INT 0
10075: PPUSH
10076: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10080: LD_ADDR_VAR 0 2
10084: PUSH
10085: LD_INT 22
10087: PUSH
10088: LD_INT 3
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: LD_INT 21
10097: PUSH
10098: LD_INT 1
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: PPUSH
10109: CALL_OW 69
10113: PUSH
10114: FOR_IN
10115: IFFALSE 10225
// begin ComExitBuilding ( i ) ;
10117: LD_VAR 0 2
10121: PPUSH
10122: CALL_OW 122
// wait ( 0 0$1 ) ;
10126: LD_INT 35
10128: PPUSH
10129: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10133: LD_VAR 0 2
10137: PPUSH
10138: LD_INT 120
10140: PPUSH
10141: LD_INT 56
10143: PPUSH
10144: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10148: LD_VAR 0 2
10152: PPUSH
10153: LD_INT 111
10155: PPUSH
10156: LD_INT 37
10158: PPUSH
10159: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10163: LD_INT 33
10165: PPUSH
10166: CALL_OW 255
10170: PUSH
10171: LD_INT 3
10173: EQUAL
10174: PUSH
10175: LD_INT 33
10177: PPUSH
10178: CALL_OW 302
10182: AND
10183: IFFALSE 10199
// begin AddComEnterUnit ( i , arm2 ) ;
10185: LD_VAR 0 2
10189: PPUSH
10190: LD_INT 33
10192: PPUSH
10193: CALL_OW 180
// end else
10197: GO 10223
// begin AddComCrawl ( i ) ;
10199: LD_VAR 0 2
10203: PPUSH
10204: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10208: LD_VAR 0 2
10212: PPUSH
10213: LD_INT 109
10215: PPUSH
10216: LD_INT 30
10218: PPUSH
10219: CALL_OW 174
// end ; end ;
10223: GO 10114
10225: POP
10226: POP
// end ;
10227: LD_VAR 0 1
10231: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10232: LD_INT 0
10234: PPUSH
10235: PPUSH
10236: PPUSH
10237: PPUSH
10238: PPUSH
// nearest_dist = 1000 ;
10239: LD_ADDR_VAR 0 4
10243: PUSH
10244: LD_INT 1000
10246: ST_TO_ADDR
// nearest_un = un ;
10247: LD_ADDR_VAR 0 5
10251: PUSH
10252: LD_VAR 0 1
10256: ST_TO_ADDR
// for sold in units do
10257: LD_ADDR_VAR 0 6
10261: PUSH
10262: LD_VAR 0 2
10266: PUSH
10267: FOR_IN
10268: IFFALSE 10324
// begin dist = GetDistUnits ( un , sold ) ;
10270: LD_ADDR_VAR 0 7
10274: PUSH
10275: LD_VAR 0 1
10279: PPUSH
10280: LD_VAR 0 6
10284: PPUSH
10285: CALL_OW 296
10289: ST_TO_ADDR
// if dist < nearest_dist then
10290: LD_VAR 0 7
10294: PUSH
10295: LD_VAR 0 4
10299: LESS
10300: IFFALSE 10322
// begin nearest_un = sold ;
10302: LD_ADDR_VAR 0 5
10306: PUSH
10307: LD_VAR 0 6
10311: ST_TO_ADDR
// nearest_dist = dist ;
10312: LD_ADDR_VAR 0 4
10316: PUSH
10317: LD_VAR 0 7
10321: ST_TO_ADDR
// end ; end ;
10322: GO 10267
10324: POP
10325: POP
// result := nearest_un ;
10326: LD_ADDR_VAR 0 3
10330: PUSH
10331: LD_VAR 0 5
10335: ST_TO_ADDR
// end ;
10336: LD_VAR 0 3
10340: RET
// export function PrepareDifficulty ; begin
10341: LD_INT 0
10343: PPUSH
// if Difficulty = 1 then
10344: LD_OWVAR 67
10348: PUSH
10349: LD_INT 1
10351: EQUAL
10352: IFFALSE 10415
// begin RemoveUnit ( brw2 ) ;
10354: LD_INT 9
10356: PPUSH
10357: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10361: LD_INT 30
10363: PPUSH
10364: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10368: LD_INT 52
10370: PPUSH
10371: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10375: LD_INT 63
10377: PPUSH
10378: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10382: LD_INT 5
10384: PUSH
10385: LD_INT 4
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: PPUSH
10392: LD_INT 60
10394: PPUSH
10395: CALL_OW 240
// RuSoldMinLevel = 0 ;
10399: LD_ADDR_EXP 13
10403: PUSH
10404: LD_INT 0
10406: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10407: LD_ADDR_EXP 14
10411: PUSH
10412: LD_INT 1
10414: ST_TO_ADDR
// end ; if Difficulty = 2 then
10415: LD_OWVAR 67
10419: PUSH
10420: LD_INT 2
10422: EQUAL
10423: IFFALSE 10465
// begin RemoveUnit ( brw4 ) ;
10425: LD_INT 52
10427: PPUSH
10428: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10432: LD_INT 5
10434: PUSH
10435: LD_INT 4
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PPUSH
10442: LD_INT 50
10444: PPUSH
10445: CALL_OW 240
// RuSoldMinLevel = 1 ;
10449: LD_ADDR_EXP 13
10453: PUSH
10454: LD_INT 1
10456: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10457: LD_ADDR_EXP 14
10461: PUSH
10462: LD_INT 2
10464: ST_TO_ADDR
// end ; if Difficulty = 3 then
10465: LD_OWVAR 67
10469: PUSH
10470: LD_INT 3
10472: EQUAL
10473: IFFALSE 10508
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10475: LD_INT 5
10477: PUSH
10478: LD_INT 4
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: PPUSH
10485: LD_INT 40
10487: PPUSH
10488: CALL_OW 240
// RuSoldMinLevel = 2 ;
10492: LD_ADDR_EXP 13
10496: PUSH
10497: LD_INT 2
10499: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10500: LD_ADDR_EXP 14
10504: PUSH
10505: LD_INT 3
10507: ST_TO_ADDR
// end ; end ;
10508: LD_VAR 0 1
10512: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10513: LD_INT 0
10515: PPUSH
10516: PPUSH
10517: PPUSH
// tmp = [ ] ;
10518: LD_ADDR_VAR 0 5
10522: PUSH
10523: EMPTY
10524: ST_TO_ADDR
// if not vehicles then
10525: LD_VAR 0 1
10529: NOT
10530: IFFALSE 10534
// exit ;
10532: GO 10651
// for i in vehicles do
10534: LD_ADDR_VAR 0 4
10538: PUSH
10539: LD_VAR 0 1
10543: PUSH
10544: FOR_IN
10545: IFFALSE 10635
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10547: LD_ADDR_VAR 0 5
10551: PUSH
10552: LD_VAR 0 5
10556: PPUSH
10557: LD_INT 1
10559: PPUSH
10560: LD_VAR 0 4
10564: PPUSH
10565: CALL_OW 265
10569: PUSH
10570: LD_VAR 0 4
10574: PPUSH
10575: CALL_OW 262
10579: PUSH
10580: LD_VAR 0 4
10584: PPUSH
10585: CALL_OW 263
10589: PUSH
10590: LD_VAR 0 4
10594: PPUSH
10595: CALL_OW 264
10599: PUSH
10600: LD_VAR 0 4
10604: PPUSH
10605: CALL_OW 261
10609: PUSH
10610: LD_VAR 0 4
10614: PPUSH
10615: CALL_OW 256
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: PPUSH
10628: CALL_OW 2
10632: ST_TO_ADDR
// end ;
10633: GO 10544
10635: POP
10636: POP
// SaveVariable ( tmp , ident ) ;
10637: LD_VAR 0 5
10641: PPUSH
10642: LD_VAR 0 2
10646: PPUSH
10647: CALL_OW 39
// end ; end_of_file
10651: LD_VAR 0 3
10655: RET
// export function PrepareHeroes ; var plive ; begin
10656: LD_INT 0
10658: PPUSH
10659: PPUSH
// uc_side = 1 ;
10660: LD_ADDR_OWVAR 20
10664: PUSH
10665: LD_INT 1
10667: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10668: LD_ADDR_EXP 1
10672: PUSH
10673: LD_STRING 01_JMM
10675: PPUSH
10676: CALL_OW 34
10680: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10681: LD_ADDR_VAR 0 2
10685: PUSH
10686: LD_STRING 01_JMMLifePoints_1
10688: PPUSH
10689: LD_INT 1000
10691: PPUSH
10692: CALL_OW 30
10696: ST_TO_ADDR
// if plive < 250 then
10697: LD_VAR 0 2
10701: PUSH
10702: LD_INT 250
10704: LESS
10705: IFFALSE 10715
// plive := 300 ;
10707: LD_ADDR_VAR 0 2
10711: PUSH
10712: LD_INT 300
10714: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10715: LD_EXP 1
10719: PPUSH
10720: LD_VAR 0 2
10724: PPUSH
10725: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10729: LD_ADDR_EXP 9
10733: PUSH
10734: LD_STRING Powell
10736: PPUSH
10737: CALL_OW 25
10741: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10742: LD_ADDR_EXP 2
10746: PUSH
10747: LD_STRING 01_Bobby
10749: PPUSH
10750: CALL_OW 34
10754: ST_TO_ADDR
// if Bobby then
10755: LD_EXP 2
10759: IFFALSE 10809
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10761: LD_ADDR_VAR 0 2
10765: PUSH
10766: LD_STRING 01_BobbyLifePoints_1
10768: PPUSH
10769: LD_INT 1000
10771: PPUSH
10772: CALL_OW 30
10776: ST_TO_ADDR
// if plive < 250 then
10777: LD_VAR 0 2
10781: PUSH
10782: LD_INT 250
10784: LESS
10785: IFFALSE 10795
// plive := 300 ;
10787: LD_ADDR_VAR 0 2
10791: PUSH
10792: LD_INT 300
10794: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10795: LD_EXP 2
10799: PPUSH
10800: LD_VAR 0 2
10804: PPUSH
10805: CALL_OW 234
// end ; Cyrus = CreateCharacter ( 01_Cyrus ) ;
10809: LD_ADDR_EXP 3
10813: PUSH
10814: LD_STRING 01_Cyrus
10816: PPUSH
10817: CALL_OW 34
10821: ST_TO_ADDR
// if Cyrus then
10822: LD_EXP 3
10826: IFFALSE 10876
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10828: LD_ADDR_VAR 0 2
10832: PUSH
10833: LD_STRING 01_CyrusLifePoints_1
10835: PPUSH
10836: LD_INT 1000
10838: PPUSH
10839: CALL_OW 30
10843: ST_TO_ADDR
// if plive < 250 then
10844: LD_VAR 0 2
10848: PUSH
10849: LD_INT 250
10851: LESS
10852: IFFALSE 10862
// plive := 300 ;
10854: LD_ADDR_VAR 0 2
10858: PUSH
10859: LD_INT 300
10861: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
10862: LD_EXP 3
10866: PPUSH
10867: LD_VAR 0 2
10871: PPUSH
10872: CALL_OW 234
// end ; Khatam = NewCharacter ( Khatam ) ;
10876: LD_ADDR_EXP 5
10880: PUSH
10881: LD_STRING Khatam
10883: PPUSH
10884: CALL_OW 25
10888: ST_TO_ADDR
// uc_side = 4 ;
10889: LD_ADDR_OWVAR 20
10893: PUSH
10894: LD_INT 4
10896: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10897: LD_ADDR_EXP 4
10901: PUSH
10902: LD_STRING Lisa
10904: PPUSH
10905: CALL_OW 25
10909: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10910: LD_EXP 1
10914: PPUSH
10915: LD_INT 3
10917: PPUSH
10918: LD_INT 0
10920: PPUSH
10921: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10925: LD_EXP 2
10929: PPUSH
10930: LD_INT 3
10932: PPUSH
10933: LD_INT 0
10935: PPUSH
10936: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10940: LD_EXP 3
10944: PPUSH
10945: LD_INT 3
10947: PPUSH
10948: LD_INT 0
10950: PPUSH
10951: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10955: LD_EXP 4
10959: PPUSH
10960: LD_INT 5
10962: PPUSH
10963: LD_INT 0
10965: PPUSH
10966: CALL_OW 49
// ComCrawl ( Lisa ) ;
10970: LD_EXP 4
10974: PPUSH
10975: CALL_OW 137
// end ;
10979: LD_VAR 0 1
10983: RET
// export function PrepareLisSquad ; var i , un ; begin
10984: LD_INT 0
10986: PPUSH
10987: PPUSH
10988: PPUSH
// uc_side = 4 ;
10989: LD_ADDR_OWVAR 20
10993: PUSH
10994: LD_INT 4
10996: ST_TO_ADDR
// uc_nation = 1 ;
10997: LD_ADDR_OWVAR 21
11001: PUSH
11002: LD_INT 1
11004: ST_TO_ADDR
// hc_class := 2 ;
11005: LD_ADDR_OWVAR 28
11009: PUSH
11010: LD_INT 2
11012: ST_TO_ADDR
// hc_sex := sex_male ;
11013: LD_ADDR_OWVAR 27
11017: PUSH
11018: LD_INT 1
11020: ST_TO_ADDR
// hc_gallery :=  ;
11021: LD_ADDR_OWVAR 33
11025: PUSH
11026: LD_STRING 
11028: ST_TO_ADDR
// hc_name :=  ;
11029: LD_ADDR_OWVAR 26
11033: PUSH
11034: LD_STRING 
11036: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11037: LD_ADDR_OWVAR 30
11041: PUSH
11042: LD_INT 0
11044: PUSH
11045: LD_INT 1
11047: PUSH
11048: LD_INT 0
11050: PUSH
11051: LD_INT 0
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11060: LD_ADDR_OWVAR 31
11064: PUSH
11065: LD_INT 1
11067: PUSH
11068: LD_INT 2
11070: PUSH
11071: LD_INT 0
11073: PUSH
11074: LD_INT 0
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: ST_TO_ADDR
// un := CreateHuman ;
11083: LD_ADDR_VAR 0 3
11087: PUSH
11088: CALL_OW 44
11092: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11093: LD_VAR 0 3
11097: PPUSH
11098: LD_INT 6
11100: PPUSH
11101: LD_INT 0
11103: PPUSH
11104: CALL_OW 49
// hc_sex := sex_female ;
11108: LD_ADDR_OWVAR 27
11112: PUSH
11113: LD_INT 2
11115: ST_TO_ADDR
// hc_gallery :=  ;
11116: LD_ADDR_OWVAR 33
11120: PUSH
11121: LD_STRING 
11123: ST_TO_ADDR
// hc_name :=  ;
11124: LD_ADDR_OWVAR 26
11128: PUSH
11129: LD_STRING 
11131: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11132: LD_ADDR_OWVAR 30
11136: PUSH
11137: LD_INT 0
11139: PUSH
11140: LD_INT 0
11142: PUSH
11143: LD_INT 0
11145: PUSH
11146: LD_INT 1
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11155: LD_ADDR_OWVAR 31
11159: PUSH
11160: LD_INT 0
11162: PUSH
11163: LD_INT 1
11165: PUSH
11166: LD_INT 0
11168: PUSH
11169: LD_INT 1
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: ST_TO_ADDR
// un := CreateHuman ;
11178: LD_ADDR_VAR 0 3
11182: PUSH
11183: CALL_OW 44
11187: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11188: LD_VAR 0 3
11192: PPUSH
11193: LD_INT 6
11195: PPUSH
11196: LD_INT 0
11198: PPUSH
11199: CALL_OW 49
// if not Bobby and not Cyrus then
11203: LD_EXP 2
11207: NOT
11208: PUSH
11209: LD_EXP 3
11213: NOT
11214: AND
11215: IFFALSE 11320
// begin hc_class := 1 ;
11217: LD_ADDR_OWVAR 28
11221: PUSH
11222: LD_INT 1
11224: ST_TO_ADDR
// hc_sex := sex_male ;
11225: LD_ADDR_OWVAR 27
11229: PUSH
11230: LD_INT 1
11232: ST_TO_ADDR
// hc_gallery :=  ;
11233: LD_ADDR_OWVAR 33
11237: PUSH
11238: LD_STRING 
11240: ST_TO_ADDR
// hc_name :=  ;
11241: LD_ADDR_OWVAR 26
11245: PUSH
11246: LD_STRING 
11248: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11249: LD_ADDR_OWVAR 30
11253: PUSH
11254: LD_INT 2
11256: PUSH
11257: LD_INT 3
11259: PUSH
11260: LD_INT 1
11262: PUSH
11263: LD_INT 0
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11272: LD_ADDR_OWVAR 31
11276: PUSH
11277: LD_INT 2
11279: PUSH
11280: LD_INT 3
11282: PUSH
11283: LD_INT 1
11285: PUSH
11286: LD_INT 0
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: ST_TO_ADDR
// un := CreateHuman ;
11295: LD_ADDR_VAR 0 3
11299: PUSH
11300: CALL_OW 44
11304: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11305: LD_VAR 0 3
11309: PPUSH
11310: LD_INT 31
11312: PPUSH
11313: LD_INT 0
11315: PPUSH
11316: CALL_OW 49
// end ; InitHc ;
11320: CALL_OW 19
// end ;
11324: LD_VAR 0 1
11328: RET
// export function PrepareOtherAmericans ; begin
11329: LD_INT 0
11331: PPUSH
// uc_side = 4 ;
11332: LD_ADDR_OWVAR 20
11336: PUSH
11337: LD_INT 4
11339: ST_TO_ADDR
// uc_nation = 1 ;
11340: LD_ADDR_OWVAR 21
11344: PUSH
11345: LD_INT 1
11347: ST_TO_ADDR
// hc_gallery =  ;
11348: LD_ADDR_OWVAR 33
11352: PUSH
11353: LD_STRING 
11355: ST_TO_ADDR
// hc_name = Tom Garvin ;
11356: LD_ADDR_OWVAR 26
11360: PUSH
11361: LD_STRING Tom Garvin
11363: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11364: LD_INT 1
11366: PPUSH
11367: LD_INT 1
11369: PPUSH
11370: LD_INT 1
11372: PPUSH
11373: LD_INT 2
11375: PPUSH
11376: CALL_OW 12
11380: PPUSH
11381: CALL_OW 380
// Brian = CreateHuman ;
11385: LD_ADDR_EXP 6
11389: PUSH
11390: CALL_OW 44
11394: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11395: LD_EXP 6
11399: PPUSH
11400: LD_INT 10
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 49
// hc_name = Jerry White ;
11410: LD_ADDR_OWVAR 26
11414: PUSH
11415: LD_STRING Jerry White
11417: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11418: LD_INT 1
11420: PPUSH
11421: LD_INT 3
11423: PPUSH
11424: LD_INT 1
11426: PPUSH
11427: LD_INT 2
11429: PPUSH
11430: CALL_OW 12
11434: PPUSH
11435: CALL_OW 380
// Jerry = CreateHuman ;
11439: LD_ADDR_EXP 7
11443: PUSH
11444: CALL_OW 44
11448: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11449: LD_EXP 7
11453: PPUSH
11454: LD_INT 10
11456: PPUSH
11457: LD_INT 0
11459: PPUSH
11460: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11464: LD_EXP 6
11468: PUSH
11469: LD_EXP 7
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: PPUSH
11478: CALL_OW 140
// end ;
11482: LD_VAR 0 1
11486: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11487: LD_INT 0
11489: PPUSH
11490: PPUSH
11491: PPUSH
// for i = 1 to 6 do
11492: LD_ADDR_VAR 0 2
11496: PUSH
11497: DOUBLE
11498: LD_INT 1
11500: DEC
11501: ST_TO_ADDR
11502: LD_INT 6
11504: PUSH
11505: FOR_TO
11506: IFFALSE 11600
// begin uc_side = 4 ;
11508: LD_ADDR_OWVAR 20
11512: PUSH
11513: LD_INT 4
11515: ST_TO_ADDR
// uc_nation = 1 ;
11516: LD_ADDR_OWVAR 21
11520: PUSH
11521: LD_INT 1
11523: ST_TO_ADDR
// hc_gallery =  ;
11524: LD_ADDR_OWVAR 33
11528: PUSH
11529: LD_STRING 
11531: ST_TO_ADDR
// hc_name =  ;
11532: LD_ADDR_OWVAR 26
11536: PUSH
11537: LD_STRING 
11539: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11540: LD_INT 0
11542: PPUSH
11543: LD_INT 1
11545: PPUSH
11546: LD_INT 4
11548: PPUSH
11549: CALL_OW 12
11553: PPUSH
11554: LD_INT 1
11556: PPUSH
11557: CALL_OW 380
// un = CreateHuman ;
11561: LD_ADDR_VAR 0 3
11565: PUSH
11566: CALL_OW 44
11570: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11571: LD_VAR 0 3
11575: PPUSH
11576: LD_INT 16
11578: PPUSH
11579: LD_INT 0
11581: PPUSH
11582: CALL_OW 49
// SetLives ( un , 1 ) ;
11586: LD_VAR 0 3
11590: PPUSH
11591: LD_INT 1
11593: PPUSH
11594: CALL_OW 234
// end ;
11598: GO 11505
11600: POP
11601: POP
// DyingSold = CreateHuman ;
11602: LD_ADDR_EXP 34
11606: PUSH
11607: CALL_OW 44
11611: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11612: LD_EXP 34
11616: PPUSH
11617: LD_INT 16
11619: PPUSH
11620: LD_INT 0
11622: PPUSH
11623: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11627: LD_EXP 34
11631: PPUSH
11632: LD_INT 250
11634: PPUSH
11635: CALL_OW 234
// end ; end_of_file
11639: LD_VAR 0 1
11643: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11644: LD_INT 0
11646: PPUSH
11647: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11648: LD_ADDR_VAR 0 2
11652: PUSH
11653: LD_INT 22
11655: PUSH
11656: LD_INT 1
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PUSH
11663: LD_INT 23
11665: PUSH
11666: LD_INT 1
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: PUSH
11673: LD_INT 25
11675: PUSH
11676: LD_INT 2
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: LD_INT 50
11685: PUSH
11686: EMPTY
11687: LIST
11688: PUSH
11689: LD_INT 56
11691: PUSH
11692: EMPTY
11693: LIST
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: PPUSH
11702: CALL_OW 69
11706: PUSH
11707: LD_EXP 1
11711: PUSH
11712: EMPTY
11713: LIST
11714: DIFF
11715: ST_TO_ADDR
// uc_side = 6 ;
11716: LD_ADDR_OWVAR 20
11720: PUSH
11721: LD_INT 6
11723: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11724: LD_ADDR_EXP 8
11728: PUSH
11729: LD_STRING Mikhail
11731: PPUSH
11732: CALL_OW 25
11736: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11737: LD_EXP 8
11741: PPUSH
11742: LD_INT 3
11744: PPUSH
11745: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
11749: LD_EXP 8
11753: PPUSH
11754: LD_VAR 0 2
11758: PUSH
11759: LD_INT 1
11761: ARRAY
11762: PPUSH
11763: CALL_OW 250
11767: PPUSH
11768: LD_VAR 0 2
11772: PUSH
11773: LD_INT 1
11775: ARRAY
11776: PPUSH
11777: CALL_OW 251
11781: PPUSH
11782: LD_INT 5
11784: PPUSH
11785: LD_INT 1
11787: PPUSH
11788: CALL_OW 50
// end ;
11792: LD_VAR 0 1
11796: RET
// export function PrepareRussianCommander ; begin
11797: LD_INT 0
11799: PPUSH
// uc_side = 3 ;
11800: LD_ADDR_OWVAR 20
11804: PUSH
11805: LD_INT 3
11807: ST_TO_ADDR
// uc_nation = 3 ;
11808: LD_ADDR_OWVAR 21
11812: PUSH
11813: LD_INT 3
11815: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11816: LD_ADDR_EXP 19
11820: PUSH
11821: LD_STRING Natasza
11823: PPUSH
11824: CALL_OW 25
11828: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11829: LD_EXP 19
11833: PPUSH
11834: LD_INT 24
11836: PPUSH
11837: LD_INT 0
11839: PPUSH
11840: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11844: LD_EXP 19
11848: PPUSH
11849: LD_INT 56
11851: PPUSH
11852: LD_INT 16
11854: PPUSH
11855: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11859: LD_ADDR_EXP 24
11863: PUSH
11864: LD_EXP 24
11868: PUSH
11869: LD_EXP 19
11873: ADD
11874: ST_TO_ADDR
// end ;
11875: LD_VAR 0 1
11879: RET
// export function PrepareSouthBase ; var i , un ; begin
11880: LD_INT 0
11882: PPUSH
11883: PPUSH
11884: PPUSH
// for i = 1 to 2 do
11885: LD_ADDR_VAR 0 2
11889: PUSH
11890: DOUBLE
11891: LD_INT 1
11893: DEC
11894: ST_TO_ADDR
11895: LD_INT 2
11897: PUSH
11898: FOR_TO
11899: IFFALSE 12008
// begin uc_side = 3 ;
11901: LD_ADDR_OWVAR 20
11905: PUSH
11906: LD_INT 3
11908: ST_TO_ADDR
// uc_nation = 3 ;
11909: LD_ADDR_OWVAR 21
11913: PUSH
11914: LD_INT 3
11916: ST_TO_ADDR
// hc_gallery =  ;
11917: LD_ADDR_OWVAR 33
11921: PUSH
11922: LD_STRING 
11924: ST_TO_ADDR
// hc_name =  ;
11925: LD_ADDR_OWVAR 26
11929: PUSH
11930: LD_STRING 
11932: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11933: LD_INT 1
11935: PPUSH
11936: LD_INT 1
11938: PPUSH
11939: LD_EXP 13
11943: PPUSH
11944: LD_EXP 14
11948: PPUSH
11949: CALL_OW 12
11953: PPUSH
11954: CALL_OW 380
// hc_importance = 0 ;
11958: LD_ADDR_OWVAR 32
11962: PUSH
11963: LD_INT 0
11965: ST_TO_ADDR
// un = CreateHuman ;
11966: LD_ADDR_VAR 0 3
11970: PUSH
11971: CALL_OW 44
11975: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11976: LD_VAR 0 3
11980: PPUSH
11981: LD_INT 11
11983: PPUSH
11984: LD_INT 0
11986: PPUSH
11987: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11991: LD_VAR 0 3
11995: PPUSH
11996: LD_INT 111
11998: PPUSH
11999: LD_INT 38
12001: PPUSH
12002: CALL_OW 118
// end ;
12006: GO 11898
12008: POP
12009: POP
// for i = 1 to Difficulty do
12010: LD_ADDR_VAR 0 2
12014: PUSH
12015: DOUBLE
12016: LD_INT 1
12018: DEC
12019: ST_TO_ADDR
12020: LD_OWVAR 67
12024: PUSH
12025: FOR_TO
12026: IFFALSE 12109
// begin uc_side = 3 ;
12028: LD_ADDR_OWVAR 20
12032: PUSH
12033: LD_INT 3
12035: ST_TO_ADDR
// uc_nation = 3 ;
12036: LD_ADDR_OWVAR 21
12040: PUSH
12041: LD_INT 3
12043: ST_TO_ADDR
// hc_gallery =  ;
12044: LD_ADDR_OWVAR 33
12048: PUSH
12049: LD_STRING 
12051: ST_TO_ADDR
// hc_name =  ;
12052: LD_ADDR_OWVAR 26
12056: PUSH
12057: LD_STRING 
12059: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12060: LD_INT 0
12062: PPUSH
12063: LD_INT 3
12065: PPUSH
12066: LD_EXP 13
12070: PPUSH
12071: LD_EXP 14
12075: PPUSH
12076: CALL_OW 12
12080: PPUSH
12081: CALL_OW 380
// un = CreateHuman ;
12085: LD_ADDR_VAR 0 3
12089: PUSH
12090: CALL_OW 44
12094: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12095: LD_VAR 0 3
12099: PPUSH
12100: LD_INT 10
12102: PPUSH
12103: CALL_OW 52
// end ;
12107: GO 12025
12109: POP
12110: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
12111: LD_INT 3
12113: PPUSH
12114: LD_INT 3
12116: PPUSH
12117: LD_INT 33
12119: PPUSH
12120: LD_EXP 13
12124: PPUSH
12125: LD_EXP 14
12129: PPUSH
12130: CALL_OW 12
12134: PPUSH
12135: LD_INT 1
12137: PPUSH
12138: LD_INT 1
12140: PUSH
12141: LD_INT 1
12143: PPUSH
12144: LD_INT 2
12146: PPUSH
12147: CALL_OW 12
12151: PUSH
12152: LD_INT 1
12154: PPUSH
12155: LD_INT 2
12157: PPUSH
12158: CALL_OW 12
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: LIST
12167: PUSH
12168: LD_OWVAR 67
12172: ARRAY
12173: PPUSH
12174: CALL 8567 0 6
// for i in UnitsInside ( arm2 ) do
12178: LD_ADDR_VAR 0 2
12182: PUSH
12183: LD_INT 33
12185: PPUSH
12186: CALL_OW 313
12190: PUSH
12191: FOR_IN
12192: IFFALSE 12212
// southBaseDefenders = southBaseDefenders ^ i ;
12194: LD_ADDR_EXP 25
12198: PUSH
12199: LD_EXP 25
12203: PUSH
12204: LD_VAR 0 2
12208: ADD
12209: ST_TO_ADDR
12210: GO 12191
12212: POP
12213: POP
// end ;
12214: LD_VAR 0 1
12218: RET
// export function PrepareNorthBase ; var i , un ; begin
12219: LD_INT 0
12221: PPUSH
12222: PPUSH
12223: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
12224: LD_ADDR_VAR 0 2
12228: PUSH
12229: DOUBLE
12230: LD_INT 1
12232: DEC
12233: ST_TO_ADDR
12234: LD_INT 1
12236: PPUSH
12237: LD_INT 2
12239: PPUSH
12240: CALL_OW 12
12244: PUSH
12245: LD_INT 2
12247: PPUSH
12248: LD_INT 3
12250: PPUSH
12251: CALL_OW 12
12255: PUSH
12256: LD_INT 3
12258: PPUSH
12259: LD_INT 4
12261: PPUSH
12262: CALL_OW 12
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: LIST
12271: PUSH
12272: LD_OWVAR 67
12276: ARRAY
12277: PUSH
12278: FOR_TO
12279: IFFALSE 12365
// begin uc_side = 3 ;
12281: LD_ADDR_OWVAR 20
12285: PUSH
12286: LD_INT 3
12288: ST_TO_ADDR
// uc_nation = 3 ;
12289: LD_ADDR_OWVAR 21
12293: PUSH
12294: LD_INT 3
12296: ST_TO_ADDR
// hc_gallery =  ;
12297: LD_ADDR_OWVAR 33
12301: PUSH
12302: LD_STRING 
12304: ST_TO_ADDR
// hc_name =  ;
12305: LD_ADDR_OWVAR 26
12309: PUSH
12310: LD_STRING 
12312: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12313: LD_INT 0
12315: PPUSH
12316: LD_INT 1
12318: PPUSH
12319: LD_EXP 13
12323: PPUSH
12324: LD_EXP 14
12328: PPUSH
12329: CALL_OW 12
12333: PPUSH
12334: CALL_OW 380
// un = CreateHuman ;
12338: LD_ADDR_VAR 0 3
12342: PUSH
12343: CALL_OW 44
12347: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12348: LD_VAR 0 3
12352: PPUSH
12353: LD_INT 14
12355: PPUSH
12356: LD_INT 0
12358: PPUSH
12359: CALL_OW 49
// end ;
12363: GO 12278
12365: POP
12366: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12367: LD_INT 3
12369: PPUSH
12370: LD_INT 3
12372: PPUSH
12373: LD_INT 2
12375: PPUSH
12376: LD_EXP 13
12380: PPUSH
12381: LD_EXP 14
12385: PPUSH
12386: CALL_OW 12
12390: PPUSH
12391: LD_INT 1
12393: PPUSH
12394: LD_INT 1
12396: PPUSH
12397: LD_INT 2
12399: PPUSH
12400: CALL_OW 12
12404: PUSH
12405: LD_INT 1
12407: PPUSH
12408: LD_INT 3
12410: PPUSH
12411: CALL_OW 12
12415: PUSH
12416: LD_INT 1
12418: PPUSH
12419: LD_INT 3
12421: PPUSH
12422: CALL_OW 12
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: LIST
12431: PUSH
12432: LD_OWVAR 67
12436: ARRAY
12437: PPUSH
12438: CALL 8567 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12442: LD_INT 3
12444: PPUSH
12445: LD_INT 3
12447: PPUSH
12448: LD_INT 23
12450: PPUSH
12451: LD_EXP 13
12455: PPUSH
12456: LD_EXP 14
12460: PPUSH
12461: CALL_OW 12
12465: PPUSH
12466: LD_INT 4
12468: PPUSH
12469: LD_INT 0
12471: PUSH
12472: LD_INT 1
12474: PUSH
12475: LD_INT 2
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: LIST
12482: PUSH
12483: LD_OWVAR 67
12487: ARRAY
12488: PPUSH
12489: CALL 8567 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12493: LD_INT 3
12495: PPUSH
12496: LD_INT 3
12498: PPUSH
12499: LD_INT 1
12501: PPUSH
12502: LD_EXP 13
12506: PPUSH
12507: LD_EXP 14
12511: PPUSH
12512: CALL_OW 12
12516: PPUSH
12517: LD_INT 2
12519: PPUSH
12520: LD_INT 1
12522: PUSH
12523: LD_INT 2
12525: PUSH
12526: LD_INT 2
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: LIST
12533: PUSH
12534: LD_OWVAR 67
12538: ARRAY
12539: PPUSH
12540: CALL 8567 0 6
// for i in UnitsInside ( arm1 ) do
12544: LD_ADDR_VAR 0 2
12548: PUSH
12549: LD_INT 2
12551: PPUSH
12552: CALL_OW 313
12556: PUSH
12557: FOR_IN
12558: IFFALSE 12578
// northBaseDefenders = northBaseDefenders ^ i ;
12560: LD_ADDR_EXP 24
12564: PUSH
12565: LD_EXP 24
12569: PUSH
12570: LD_VAR 0 2
12574: ADD
12575: ST_TO_ADDR
12576: GO 12557
12578: POP
12579: POP
// end ;
12580: LD_VAR 0 1
12584: RET
// export function PrepareOtherRussians ; var i , un ; begin
12585: LD_INT 0
12587: PPUSH
12588: PPUSH
12589: PPUSH
// for i = 1 to 2 do
12590: LD_ADDR_VAR 0 2
12594: PUSH
12595: DOUBLE
12596: LD_INT 1
12598: DEC
12599: ST_TO_ADDR
12600: LD_INT 2
12602: PUSH
12603: FOR_TO
12604: IFFALSE 12705
// begin uc_side = 3 ;
12606: LD_ADDR_OWVAR 20
12610: PUSH
12611: LD_INT 3
12613: ST_TO_ADDR
// uc_nation = 3 ;
12614: LD_ADDR_OWVAR 21
12618: PUSH
12619: LD_INT 3
12621: ST_TO_ADDR
// hc_gallery =  ;
12622: LD_ADDR_OWVAR 33
12626: PUSH
12627: LD_STRING 
12629: ST_TO_ADDR
// hc_name =  ;
12630: LD_ADDR_OWVAR 26
12634: PUSH
12635: LD_STRING 
12637: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12638: LD_INT 0
12640: PPUSH
12641: LD_INT 1
12643: PPUSH
12644: LD_EXP 13
12648: PPUSH
12649: LD_EXP 14
12653: PPUSH
12654: CALL_OW 12
12658: PPUSH
12659: CALL_OW 380
// un = CreateHuman ;
12663: LD_ADDR_VAR 0 3
12667: PUSH
12668: CALL_OW 44
12672: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12673: LD_VAR 0 3
12677: PPUSH
12678: LD_INT 9
12680: PPUSH
12681: LD_INT 0
12683: PPUSH
12684: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12688: LD_VAR 0 3
12692: PPUSH
12693: LD_INT 80
12695: PPUSH
12696: LD_INT 73
12698: PPUSH
12699: CALL_OW 118
// end ;
12703: GO 12603
12705: POP
12706: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12707: LD_ADDR_VAR 0 2
12711: PUSH
12712: LD_INT 22
12714: PUSH
12715: LD_INT 3
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: LD_INT 30
12724: PUSH
12725: LD_INT 31
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PPUSH
12736: CALL_OW 69
12740: PUSH
12741: FOR_IN
12742: IFFALSE 12770
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12744: LD_EXP 13
12748: PPUSH
12749: LD_EXP 14
12753: PPUSH
12754: CALL_OW 12
12758: PPUSH
12759: LD_VAR 0 2
12763: PPUSH
12764: CALL 8677 0 2
12768: GO 12741
12770: POP
12771: POP
// end ;
12772: LD_VAR 0 1
12776: RET
// export function PrepareCargoBays ; begin
12777: LD_INT 0
12779: PPUSH
// uc_side = 3 ;
12780: LD_ADDR_OWVAR 20
12784: PUSH
12785: LD_INT 3
12787: ST_TO_ADDR
// uc_nation = 3 ;
12788: LD_ADDR_OWVAR 21
12792: PUSH
12793: LD_INT 3
12795: ST_TO_ADDR
// vc_engine = 1 ;
12796: LD_ADDR_OWVAR 39
12800: PUSH
12801: LD_INT 1
12803: ST_TO_ADDR
// vc_control = 1 ;
12804: LD_ADDR_OWVAR 38
12808: PUSH
12809: LD_INT 1
12811: ST_TO_ADDR
// vc_weapon = 51 ;
12812: LD_ADDR_OWVAR 40
12816: PUSH
12817: LD_INT 51
12819: ST_TO_ADDR
// vc_chassis = 22 ;
12820: LD_ADDR_OWVAR 37
12824: PUSH
12825: LD_INT 22
12827: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12828: LD_ADDR_EXP 15
12832: PUSH
12833: CALL_OW 45
12837: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12838: LD_ADDR_EXP 16
12842: PUSH
12843: CALL_OW 45
12847: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12848: LD_EXP 15
12852: PPUSH
12853: LD_INT 13
12855: PPUSH
12856: LD_INT 0
12858: PPUSH
12859: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12863: LD_EXP 16
12867: PPUSH
12868: LD_INT 13
12870: PPUSH
12871: LD_INT 0
12873: PPUSH
12874: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12878: LD_EXP 15
12882: PPUSH
12883: LD_INT 2
12885: PPUSH
12886: LD_INT 70
12888: PUSH
12889: LD_INT 50
12891: PUSH
12892: LD_INT 30
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: LIST
12899: PUSH
12900: LD_OWVAR 67
12904: ARRAY
12905: PPUSH
12906: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12910: LD_EXP 16
12914: PPUSH
12915: LD_INT 2
12917: PPUSH
12918: LD_INT 70
12920: PUSH
12921: LD_INT 50
12923: PUSH
12924: LD_INT 30
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: LIST
12931: PUSH
12932: LD_OWVAR 67
12936: ARRAY
12937: PPUSH
12938: CALL_OW 291
// hc_gallery =  ;
12942: LD_ADDR_OWVAR 33
12946: PUSH
12947: LD_STRING 
12949: ST_TO_ADDR
// hc_name =  ;
12950: LD_ADDR_OWVAR 26
12954: PUSH
12955: LD_STRING 
12957: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12958: LD_INT 1
12960: PPUSH
12961: LD_INT 3
12963: PPUSH
12964: LD_INT 1
12966: PPUSH
12967: LD_INT 2
12969: PPUSH
12970: CALL_OW 12
12974: PPUSH
12975: CALL_OW 380
// driver1 = CreateHuman ;
12979: LD_ADDR_EXP 17
12983: PUSH
12984: CALL_OW 44
12988: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12989: LD_EXP 17
12993: PPUSH
12994: LD_EXP 15
12998: PPUSH
12999: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13003: LD_ADDR_OWVAR 26
13007: PUSH
13008: LD_STRING Nikolai Andreyev
13010: ST_TO_ADDR
// driver2 = CreateHuman ;
13011: LD_ADDR_EXP 18
13015: PUSH
13016: CALL_OW 44
13020: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13021: LD_EXP 18
13025: PPUSH
13026: LD_EXP 16
13030: PPUSH
13031: CALL_OW 52
// end ;
13035: LD_VAR 0 1
13039: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
13040: LD_INT 0
13042: PPUSH
13043: PPUSH
13044: PPUSH
13045: PPUSH
13046: PPUSH
13047: PPUSH
13048: PPUSH
// uc_side = 3 ;
13049: LD_ADDR_OWVAR 20
13053: PUSH
13054: LD_INT 3
13056: ST_TO_ADDR
// uc_nation = 3 ;
13057: LD_ADDR_OWVAR 21
13061: PUSH
13062: LD_INT 3
13064: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
13065: LD_ADDR_VAR 0 4
13069: PUSH
13070: DOUBLE
13071: LD_INT 1
13073: DEC
13074: ST_TO_ADDR
13075: LD_VAR 0 1
13079: PUSH
13080: LD_INT 1
13082: PPUSH
13083: LD_INT 3
13085: PPUSH
13086: CALL_OW 12
13090: PLUS
13091: PUSH
13092: FOR_TO
13093: IFFALSE 13270
// begin vc_engine = 1 ;
13095: LD_ADDR_OWVAR 39
13099: PUSH
13100: LD_INT 1
13102: ST_TO_ADDR
// vc_control = 1 ;
13103: LD_ADDR_OWVAR 38
13107: PUSH
13108: LD_INT 1
13110: ST_TO_ADDR
// vc_weapon = 42 ;
13111: LD_ADDR_OWVAR 40
13115: PUSH
13116: LD_INT 42
13118: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
13119: LD_ADDR_OWVAR 37
13123: PUSH
13124: LD_INT 21
13126: PUSH
13127: LD_INT 22
13129: PUSH
13130: LD_INT 22
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: LIST
13137: PUSH
13138: LD_OWVAR 67
13142: ARRAY
13143: ST_TO_ADDR
// veh = CreateVehicle ;
13144: LD_ADDR_VAR 0 5
13148: PUSH
13149: CALL_OW 45
13153: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13154: LD_VAR 0 5
13158: PPUSH
13159: LD_VAR 0 2
13163: PPUSH
13164: LD_INT 0
13166: PPUSH
13167: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13171: LD_ADDR_EXP 26
13175: PUSH
13176: LD_EXP 26
13180: PUSH
13181: LD_VAR 0 5
13185: ADD
13186: ST_TO_ADDR
// hc_gallery =  ;
13187: LD_ADDR_OWVAR 33
13191: PUSH
13192: LD_STRING 
13194: ST_TO_ADDR
// hc_name =  ;
13195: LD_ADDR_OWVAR 26
13199: PUSH
13200: LD_STRING 
13202: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13203: LD_INT 0
13205: PPUSH
13206: LD_INT 3
13208: PPUSH
13209: LD_EXP 13
13213: PPUSH
13214: LD_EXP 14
13218: PPUSH
13219: CALL_OW 12
13223: PPUSH
13224: CALL_OW 380
// un = CreateHuman ;
13228: LD_ADDR_VAR 0 6
13232: PUSH
13233: CALL_OW 44
13237: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13238: LD_VAR 0 6
13242: PPUSH
13243: LD_VAR 0 5
13247: PPUSH
13248: CALL_OW 52
// attackGroup = attackGroup ^ un ;
13252: LD_ADDR_EXP 26
13256: PUSH
13257: LD_EXP 26
13261: PUSH
13262: LD_VAR 0 6
13266: ADD
13267: ST_TO_ADDR
// end ;
13268: GO 13092
13270: POP
13271: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13272: LD_INT 0
13274: PPUSH
13275: LD_INT 2
13277: PPUSH
13278: LD_EXP 13
13282: PPUSH
13283: LD_EXP 14
13287: PPUSH
13288: CALL_OW 12
13292: PPUSH
13293: CALL_OW 380
// un = CreateHuman ;
13297: LD_ADDR_VAR 0 6
13301: PUSH
13302: CALL_OW 44
13306: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13307: LD_ADDR_VAR 0 4
13311: PUSH
13312: DOUBLE
13313: LD_INT 1
13315: DEC
13316: ST_TO_ADDR
13317: LD_VAR 0 1
13321: PUSH
13322: LD_INT 2
13324: PUSH
13325: LD_INT 2
13327: MUL
13328: PLUS
13329: PUSH
13330: FOR_TO
13331: IFFALSE 13419
// begin hc_gallery =  ;
13333: LD_ADDR_OWVAR 33
13337: PUSH
13338: LD_STRING 
13340: ST_TO_ADDR
// hc_name =  ;
13341: LD_ADDR_OWVAR 26
13345: PUSH
13346: LD_STRING 
13348: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13349: LD_INT 1
13351: PPUSH
13352: LD_INT 1
13354: PPUSH
13355: LD_EXP 13
13359: PPUSH
13360: LD_EXP 14
13364: PPUSH
13365: CALL_OW 12
13369: PPUSH
13370: CALL_OW 380
// un = CreateHuman ;
13374: LD_ADDR_VAR 0 6
13378: PUSH
13379: CALL_OW 44
13383: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13384: LD_VAR 0 6
13388: PPUSH
13389: LD_VAR 0 2
13393: PPUSH
13394: LD_INT 0
13396: PPUSH
13397: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13401: LD_ADDR_EXP 26
13405: PUSH
13406: LD_EXP 26
13410: PUSH
13411: LD_VAR 0 6
13415: ADD
13416: ST_TO_ADDR
// end ;
13417: GO 13330
13419: POP
13420: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13421: LD_ADDR_VAR 0 7
13425: PUSH
13426: LD_INT 26
13428: PPUSH
13429: LD_INT 22
13431: PUSH
13432: LD_INT 3
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PUSH
13439: LD_INT 21
13441: PUSH
13442: LD_INT 1
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: LD_INT 26
13451: PUSH
13452: LD_INT 1
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: LIST
13463: PPUSH
13464: CALL_OW 70
13468: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13469: LD_VAR 0 7
13473: PUSH
13474: LD_INT 1
13476: ARRAY
13477: PPUSH
13478: LD_STRING D9-Rus3-1
13480: PPUSH
13481: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13485: LD_VAR 0 7
13489: PUSH
13490: LD_INT 2
13492: ARRAY
13493: PPUSH
13494: LD_STRING D9-Russ-1
13496: PPUSH
13497: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13501: LD_INT 35
13503: PPUSH
13504: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13508: LD_ADDR_VAR 0 4
13512: PUSH
13513: LD_INT 26
13515: PPUSH
13516: LD_INT 22
13518: PUSH
13519: LD_INT 3
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PUSH
13526: EMPTY
13527: LIST
13528: PPUSH
13529: CALL_OW 70
13533: PUSH
13534: FOR_IN
13535: IFFALSE 13707
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13537: LD_ADDR_VAR 0 8
13541: PUSH
13542: LD_INT 22
13544: PUSH
13545: LD_INT 1
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PPUSH
13552: CALL_OW 69
13556: PPUSH
13557: LD_VAR 0 4
13561: PPUSH
13562: CALL_OW 74
13566: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13567: LD_ADDR_VAR 0 9
13571: PUSH
13572: LD_INT 22
13574: PUSH
13575: LD_INT 1
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 2
13584: PUSH
13585: LD_INT 59
13587: PUSH
13588: EMPTY
13589: LIST
13590: PUSH
13591: LD_INT 21
13593: PUSH
13594: LD_INT 1
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PUSH
13601: LD_INT 21
13603: PUSH
13604: LD_INT 2
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: EMPTY
13622: LIST
13623: PPUSH
13624: CALL_OW 69
13628: PPUSH
13629: LD_VAR 0 4
13633: PPUSH
13634: CALL_OW 74
13638: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13639: LD_VAR 0 4
13643: PPUSH
13644: LD_VAR 0 8
13648: PPUSH
13649: CALL_OW 296
13653: PUSH
13654: LD_INT 8
13656: PLUS
13657: PUSH
13658: LD_VAR 0 4
13662: PPUSH
13663: LD_VAR 0 9
13667: PPUSH
13668: CALL_OW 296
13672: LESS
13673: IFFALSE 13691
// begin ComAttackUnit ( i , target1 ) ;
13675: LD_VAR 0 4
13679: PPUSH
13680: LD_VAR 0 8
13684: PPUSH
13685: CALL_OW 115
// end else
13689: GO 13705
// begin ComAttackUnit ( i , target2 ) ;
13691: LD_VAR 0 4
13695: PPUSH
13696: LD_VAR 0 9
13700: PPUSH
13701: CALL_OW 115
// end ; end ;
13705: GO 13534
13707: POP
13708: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13709: LD_INT 26
13711: PPUSH
13712: LD_INT 22
13714: PUSH
13715: LD_INT 3
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: LD_INT 2
13724: PUSH
13725: LD_INT 21
13727: PUSH
13728: LD_INT 1
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PUSH
13735: LD_INT 21
13737: PUSH
13738: LD_INT 2
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: PUSH
13745: LD_INT 59
13747: PUSH
13748: EMPTY
13749: LIST
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PPUSH
13761: CALL_OW 70
13765: PUSH
13766: LD_INT 0
13768: EQUAL
13769: IFFALSE 13501
// end ; end_of_file
13771: LD_VAR 0 3
13775: RET
// every 0 0$1 do
13776: GO 13778
13778: DISABLE
// begin enable ;
13779: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13780: LD_INT 3
13782: PPUSH
13783: LD_INT 1
13785: PPUSH
13786: LD_INT 22
13788: PPUSH
13789: CALL 8813 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13793: LD_INT 3
13795: PPUSH
13796: LD_INT 20
13798: PPUSH
13799: LD_INT 22
13801: PPUSH
13802: LD_INT 23
13804: PPUSH
13805: CALL 9059 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13809: LD_INT 3
13811: PPUSH
13812: LD_INT 21
13814: PPUSH
13815: LD_INT 23
13817: PPUSH
13818: CALL 9336 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13822: LD_INT 22
13824: PPUSH
13825: LD_INT 1
13827: PPUSH
13828: LD_EXP 24
13832: PPUSH
13833: LD_INT 2
13835: PPUSH
13836: LD_INT 3
13838: PPUSH
13839: CALL 9808 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13843: LD_INT 23
13845: PPUSH
13846: LD_INT 1
13848: PPUSH
13849: LD_EXP 25
13853: PPUSH
13854: LD_INT 33
13856: PPUSH
13857: LD_INT 1
13859: PPUSH
13860: CALL 9808 0 5
// end ; end_of_file
13864: END
// on UnitDestroyed ( unit ) do begin if GetBType ( unit ) = b_depot then
13865: LD_VAR 0 1
13869: PPUSH
13870: CALL_OW 266
13874: PUSH
13875: LD_INT 0
13877: EQUAL
13878: IFFALSE 13887
// YouLost ( DepotDestroyed ) ;
13880: LD_STRING DepotDestroyed
13882: PPUSH
13883: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13887: LD_VAR 0 1
13891: PPUSH
13892: CALL_OW 255
13896: PUSH
13897: LD_INT 1
13899: EQUAL
13900: PUSH
13901: LD_VAR 0 1
13905: PPUSH
13906: CALL_OW 247
13910: PUSH
13911: LD_INT 1
13913: EQUAL
13914: AND
13915: IFFALSE 13931
// deadsCounter = deadsCounter + 1 ;
13917: LD_ADDR_EXP 31
13921: PUSH
13922: LD_EXP 31
13926: PUSH
13927: LD_INT 1
13929: PLUS
13930: ST_TO_ADDR
// end ;
13931: PPOPN 1
13933: END
// on Command ( comandid ) do var i , j , tmp ;
13934: LD_INT 0
13936: PPUSH
13937: PPUSH
13938: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13939: LD_ADDR_VAR 0 2
13943: PUSH
13944: LD_INT 22
13946: PUSH
13947: LD_INT 1
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PUSH
13954: LD_INT 21
13956: PUSH
13957: LD_INT 2
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PPUSH
13968: CALL_OW 69
13972: PUSH
13973: FOR_IN
13974: IFFALSE 14099
// begin if GetTaskList ( i ) > 0 then
13976: LD_VAR 0 2
13980: PPUSH
13981: CALL_OW 437
13985: PUSH
13986: LD_INT 0
13988: GREATER
13989: IFFALSE 14097
// begin for j = 1 to GetTaskList ( i ) do
13991: LD_ADDR_VAR 0 3
13995: PUSH
13996: DOUBLE
13997: LD_INT 1
13999: DEC
14000: ST_TO_ADDR
14001: LD_VAR 0 2
14005: PPUSH
14006: CALL_OW 437
14010: PUSH
14011: FOR_TO
14012: IFFALSE 14095
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14014: LD_ADDR_VAR 0 4
14018: PUSH
14019: LD_VAR 0 2
14023: PPUSH
14024: CALL_OW 437
14028: PUSH
14029: LD_VAR 0 3
14033: ARRAY
14034: PUSH
14035: LD_INT 4
14037: ARRAY
14038: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14039: LD_VAR 0 4
14043: PPUSH
14044: CALL_OW 255
14048: PUSH
14049: LD_INT 3
14051: EQUAL
14052: PUSH
14053: LD_VAR 0 4
14057: PPUSH
14058: CALL_OW 247
14062: PUSH
14063: LD_INT 2
14065: EQUAL
14066: AND
14067: PUSH
14068: LD_VAR 0 4
14072: PPUSH
14073: CALL_OW 264
14077: PUSH
14078: LD_INT 51
14080: EQUAL
14081: AND
14082: IFFALSE 14093
// ComStop ( i ) ;
14084: LD_VAR 0 2
14088: PPUSH
14089: CALL_OW 141
// end ;
14093: GO 14011
14095: POP
14096: POP
// end ; end ;
14097: GO 13973
14099: POP
14100: POP
// end ;
14101: PPOPN 4
14103: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14104: LD_VAR 0 2
14108: PUSH
14109: LD_EXP 8
14113: EQUAL
14114: PUSH
14115: LD_EXP 21
14119: PUSH
14120: LD_INT 4
14122: NONEQUAL
14123: AND
14124: IFFALSE 14252
// begin if IsOk ( Mikhail ) then
14126: LD_EXP 8
14130: PPUSH
14131: CALL_OW 302
14135: IFFALSE 14143
// AskMikhail else
14137: CALL 7150 0 0
14141: GO 14252
// if IsOk ( lab1 ) then
14143: LD_INT 23
14145: PPUSH
14146: CALL_OW 302
14150: IFFALSE 14231
// begin SetSide ( Mikhail , 6 ) ;
14152: LD_EXP 8
14156: PPUSH
14157: LD_INT 6
14159: PPUSH
14160: CALL_OW 235
// SetSide ( lab1 , 6 ) ;
14164: LD_INT 23
14166: PPUSH
14167: LD_INT 6
14169: PPUSH
14170: CALL_OW 235
// ComEnterUnit ( Mikhail , lab1 ) ;
14174: LD_EXP 8
14178: PPUSH
14179: LD_INT 23
14181: PPUSH
14182: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14186: LD_INT 35
14188: PPUSH
14189: CALL_OW 67
// until IsInUnit ( Mikhail ) = lab1 or IsDead ( Mikhail ) ;
14193: LD_EXP 8
14197: PPUSH
14198: CALL_OW 310
14202: PUSH
14203: LD_INT 23
14205: EQUAL
14206: PUSH
14207: LD_EXP 8
14211: PPUSH
14212: CALL_OW 301
14216: OR
14217: IFFALSE 14186
// SetSide ( lab1 , 1 ) ;
14219: LD_INT 23
14221: PPUSH
14222: LD_INT 1
14224: PPUSH
14225: CALL_OW 235
// end else
14229: GO 14252
// begin SetSide ( Mikhail , 6 ) ;
14231: LD_EXP 8
14235: PPUSH
14236: LD_INT 6
14238: PPUSH
14239: CALL_OW 235
// ComHold ( Mikhail ) ;
14243: LD_EXP 8
14247: PPUSH
14248: CALL_OW 140
// end ; end ; end ;
14252: PPOPN 2
14254: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
14255: LD_EXP 8
14259: PPUSH
14260: CALL_OW 257
14264: PUSH
14265: LD_INT 3
14267: NONEQUAL
14268: IFFALSE 14286
14270: GO 14272
14272: DISABLE
// begin enable ;
14273: ENABLE
// SetClass ( Mikhail , 3 ) ;
14274: LD_EXP 8
14278: PPUSH
14279: LD_INT 3
14281: PPUSH
14282: CALL_OW 336
// end ; end_of_file
14286: END
// every 0 0$1 trigger IsDead ( JMM ) do
14287: LD_EXP 1
14291: PPUSH
14292: CALL_OW 301
14296: IFFALSE 14308
14298: GO 14300
14300: DISABLE
// YouLost ( JMM ) ;
14301: LD_STRING JMM
14303: PPUSH
14304: CALL_OW 104
14308: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14309: LD_INT 22
14311: PUSH
14312: LD_INT 1
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: LD_INT 21
14321: PUSH
14322: LD_INT 1
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 25
14331: PUSH
14332: LD_INT 2
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: LIST
14343: PPUSH
14344: CALL_OW 69
14348: PUSH
14349: LD_INT 0
14351: EQUAL
14352: PUSH
14353: LD_INT 22
14355: PUSH
14356: LD_INT 4
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: LD_INT 21
14365: PUSH
14366: LD_INT 1
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: LD_INT 25
14375: PUSH
14376: LD_INT 2
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: LIST
14387: PPUSH
14388: CALL_OW 69
14392: PUSH
14393: LD_INT 0
14395: EQUAL
14396: AND
14397: PUSH
14398: LD_INT 1
14400: PPUSH
14401: CALL_OW 255
14405: PUSH
14406: LD_INT 3
14408: EQUAL
14409: AND
14410: PUSH
14411: LD_INT 10
14413: PPUSH
14414: CALL_OW 255
14418: PUSH
14419: LD_INT 3
14421: EQUAL
14422: AND
14423: IFFALSE 14435
14425: GO 14427
14427: DISABLE
// YouLost ( Engineer ) ;
14428: LD_STRING Engineer
14430: PPUSH
14431: CALL_OW 104
14435: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14436: LD_INT 1
14438: PPUSH
14439: CALL_OW 255
14443: PUSH
14444: LD_INT 3
14446: EQUAL
14447: PUSH
14448: LD_EXP 27
14452: PUSH
14453: LD_INT 1
14455: EQUAL
14456: AND
14457: IFFALSE 14469
14459: GO 14461
14461: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14462: LD_STRING DepotCaptured
14464: PPUSH
14465: CALL_OW 104
14469: END
// export function PrepareTigers ; var i , un ; begin
14470: LD_INT 0
14472: PPUSH
14473: PPUSH
14474: PPUSH
// for i = 1 to Difficulty do
14475: LD_ADDR_VAR 0 2
14479: PUSH
14480: DOUBLE
14481: LD_INT 1
14483: DEC
14484: ST_TO_ADDR
14485: LD_OWVAR 67
14489: PUSH
14490: FOR_TO
14491: IFFALSE 14626
// begin hc_sex = sex_male ;
14493: LD_ADDR_OWVAR 27
14497: PUSH
14498: LD_INT 1
14500: ST_TO_ADDR
// uc_side = 0 ;
14501: LD_ADDR_OWVAR 20
14505: PUSH
14506: LD_INT 0
14508: ST_TO_ADDR
// uc_nation = nation_nature ;
14509: LD_ADDR_OWVAR 21
14513: PUSH
14514: LD_INT 0
14516: ST_TO_ADDR
// hc_class = class_tiger ;
14517: LD_ADDR_OWVAR 28
14521: PUSH
14522: LD_INT 14
14524: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14525: LD_ADDR_OWVAR 31
14529: PUSH
14530: LD_EXP 14
14534: PUSH
14535: LD_INT 0
14537: PUSH
14538: LD_INT 0
14540: PUSH
14541: LD_INT 0
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14550: LD_ADDR_OWVAR 35
14554: PUSH
14555: LD_INT 30
14557: PPUSH
14558: LD_INT 40
14560: PPUSH
14561: CALL_OW 12
14565: PUSH
14566: LD_INT 40
14568: PPUSH
14569: LD_INT 50
14571: PPUSH
14572: CALL_OW 12
14576: PUSH
14577: LD_INT 50
14579: PPUSH
14580: LD_INT 60
14582: PPUSH
14583: CALL_OW 12
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: LIST
14592: PUSH
14593: LD_OWVAR 67
14597: ARRAY
14598: ST_TO_ADDR
// un = CreateHuman ;
14599: LD_ADDR_VAR 0 3
14603: PUSH
14604: CALL_OW 44
14608: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14609: LD_VAR 0 3
14613: PPUSH
14614: LD_INT 27
14616: PPUSH
14617: LD_INT 0
14619: PPUSH
14620: CALL_OW 49
// end ;
14624: GO 14490
14626: POP
14627: POP
// end ; end_of_file
14628: LD_VAR 0 1
14632: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
14633: LD_INT 1
14635: PPUSH
14636: CALL_OW 255
14640: PUSH
14641: LD_INT 1
14643: EQUAL
14644: PUSH
14645: LD_INT 10
14647: PPUSH
14648: CALL_OW 255
14652: PUSH
14653: LD_INT 1
14655: EQUAL
14656: AND
14657: PUSH
14658: LD_EXP 20
14662: PUSH
14663: LD_INT 1
14665: EQUAL
14666: AND
14667: PUSH
14668: LD_INT 22
14670: PUSH
14671: LD_INT 3
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: PUSH
14678: LD_INT 21
14680: PUSH
14681: LD_INT 2
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PUSH
14688: LD_INT 34
14690: PUSH
14691: LD_INT 51
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: LD_INT 3
14700: PUSH
14701: LD_INT 58
14703: PUSH
14704: EMPTY
14705: LIST
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: PPUSH
14717: CALL_OW 69
14721: PUSH
14722: LD_INT 0
14724: EQUAL
14725: AND
14726: IFFALSE 14817
14728: GO 14730
14730: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14731: LD_INT 9450
14733: PUSH
14734: LD_INT 8400
14736: PUSH
14737: LD_INT 6300
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: LIST
14744: PUSH
14745: LD_OWVAR 67
14749: ARRAY
14750: PPUSH
14751: CALL_OW 67
// if cargoEscape = 1 then
14755: LD_EXP 20
14759: PUSH
14760: LD_INT 1
14762: EQUAL
14763: IFFALSE 14817
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14765: LD_EXP 9
14769: PPUSH
14770: LD_STRING D6-Pow-1
14772: PPUSH
14773: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14777: LD_EXP 1
14781: PPUSH
14782: LD_STRING D6-JMM-1
14784: PPUSH
14785: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14789: LD_EXP 9
14793: PPUSH
14794: LD_STRING D6-Pow-2
14796: PPUSH
14797: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14801: LD_EXP 1
14805: PPUSH
14806: LD_STRING D6-JMM-2
14808: PPUSH
14809: CALL_OW 88
// FinishMission ;
14813: CALL 15025 0 0
// end ; end ;
14817: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14818: LD_INT 1
14820: PPUSH
14821: CALL_OW 255
14825: PUSH
14826: LD_INT 1
14828: EQUAL
14829: PUSH
14830: LD_INT 10
14832: PPUSH
14833: CALL_OW 255
14837: PUSH
14838: LD_INT 1
14840: EQUAL
14841: AND
14842: PUSH
14843: LD_EXP 20
14847: PUSH
14848: LD_INT 1
14850: GREATER
14851: AND
14852: IFFALSE 14919
14854: GO 14856
14856: DISABLE
14857: LD_INT 0
14859: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14860: LD_INT 11550
14862: PUSH
14863: LD_INT 10500
14865: PUSH
14866: LD_INT 9450
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: LIST
14873: PUSH
14874: LD_OWVAR 67
14878: ARRAY
14879: PPUSH
14880: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14884: LD_INT 1
14886: PUSH
14887: LD_INT 2
14889: PUSH
14890: LD_INT 3
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: LIST
14897: PUSH
14898: LD_OWVAR 67
14902: ARRAY
14903: PPUSH
14904: LD_INT 13
14906: PPUSH
14907: CALL 13040 0 2
// lastBattle = 1 ;
14911: LD_ADDR_EXP 27
14915: PUSH
14916: LD_INT 1
14918: ST_TO_ADDR
// end ;
14919: PPOPN 1
14921: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14922: LD_EXP 27
14926: PUSH
14927: LD_INT 1
14929: EQUAL
14930: PUSH
14931: LD_INT 26
14933: PPUSH
14934: LD_INT 22
14936: PUSH
14937: LD_INT 3
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: PUSH
14944: LD_INT 21
14946: PUSH
14947: LD_INT 1
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PPUSH
14958: CALL_OW 70
14962: PUSH
14963: LD_INT 0
14965: EQUAL
14966: AND
14967: IFFALSE 15024
14969: GO 14971
14971: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14972: LD_EXP 9
14976: PPUSH
14977: LD_STRING D6-Pow-1
14979: PPUSH
14980: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14984: LD_EXP 1
14988: PPUSH
14989: LD_STRING D6-JMM-1
14991: PPUSH
14992: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14996: LD_EXP 9
15000: PPUSH
15001: LD_STRING D6-Pow-2
15003: PPUSH
15004: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15008: LD_EXP 1
15012: PPUSH
15013: LD_STRING D6-JMM-2
15015: PPUSH
15016: CALL_OW 88
// FinishMission ;
15020: CALL 15025 0 0
// end ;
15024: END
// export function FinishMission ; var tmp ; begin
15025: LD_INT 0
15027: PPUSH
15028: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15029: LD_ADDR_VAR 0 2
15033: PUSH
15034: LD_INT 22
15036: PUSH
15037: LD_INT 1
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: LD_INT 21
15046: PUSH
15047: LD_INT 2
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: LD_INT 24
15056: PUSH
15057: LD_INT 251
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: LIST
15068: PPUSH
15069: CALL_OW 69
15073: ST_TO_ADDR
// if tmp then
15074: LD_VAR 0 2
15078: IFFALSE 15092
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15080: LD_VAR 0 2
15084: PPUSH
15085: LD_STRING 02_tanks_1
15087: PPUSH
15088: CALL 10513 0 2
// if mikhailStatus = 1 then
15092: LD_EXP 21
15096: PUSH
15097: LD_INT 1
15099: EQUAL
15100: IFFALSE 15114
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15102: LD_EXP 21
15106: PPUSH
15107: LD_STRING 02_mikhailStatus_1
15109: PPUSH
15110: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15114: LD_INT 1
15116: PPUSH
15117: CALL_OW 274
15121: PPUSH
15122: LD_INT 1
15124: PPUSH
15125: CALL_OW 275
15129: PPUSH
15130: LD_STRING 02_resources_4
15132: PPUSH
15133: CALL_OW 39
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15137: LD_INT 1
15139: PPUSH
15140: CALL_OW 274
15144: PPUSH
15145: LD_INT 1
15147: PPUSH
15148: CALL_OW 275
15152: PUSH
15153: LD_INT 200
15155: GREATEREQUAL
15156: IFFALSE 15170
// begin AddMedal ( Cans , 1 ) ;
15158: LD_STRING Cans
15160: PPUSH
15161: LD_INT 1
15163: PPUSH
15164: CALL_OW 101
// end else
15168: GO 15181
// begin AddMedal ( Cans , - 1 ) ;
15170: LD_STRING Cans
15172: PPUSH
15173: LD_INT 1
15175: NEG
15176: PPUSH
15177: CALL_OW 101
// end ; if deadsCounter < 2 then
15181: LD_EXP 31
15185: PUSH
15186: LD_INT 2
15188: LESS
15189: IFFALSE 15203
// begin AddMedal ( Deaths , 1 ) ;
15191: LD_STRING Deaths
15193: PPUSH
15194: LD_INT 1
15196: PPUSH
15197: CALL_OW 101
// end else
15201: GO 15214
// begin AddMedal ( Deaths , - 1 ) ;
15203: LD_STRING Deaths
15205: PPUSH
15206: LD_INT 1
15208: NEG
15209: PPUSH
15210: CALL_OW 101
// end ; if mikhailStatus = 0 then
15214: LD_EXP 21
15218: PUSH
15219: LD_INT 0
15221: EQUAL
15222: IFFALSE 15235
// AddMedal ( Prisoner , - 1 ) ;
15224: LD_STRING Prisoner
15226: PPUSH
15227: LD_INT 1
15229: NEG
15230: PPUSH
15231: CALL_OW 101
// if mikhailStatus = 1 then
15235: LD_EXP 21
15239: PUSH
15240: LD_INT 1
15242: EQUAL
15243: IFFALSE 15255
// AddMedal ( Prisoner , 1 ) ;
15245: LD_STRING Prisoner
15247: PPUSH
15248: LD_INT 1
15250: PPUSH
15251: CALL_OW 101
// if mikhailStatus = 2 then
15255: LD_EXP 21
15259: PUSH
15260: LD_INT 2
15262: EQUAL
15263: IFFALSE 15275
// AddMedal ( Prisoner , 2 ) ;
15265: LD_STRING Prisoner
15267: PPUSH
15268: LD_INT 2
15270: PPUSH
15271: CALL_OW 101
// if mikhailStatus = 3 then
15275: LD_EXP 21
15279: PUSH
15280: LD_INT 3
15282: EQUAL
15283: IFFALSE 15296
// AddMedal ( Prisoner , - 2 ) ;
15285: LD_STRING Prisoner
15287: PPUSH
15288: LD_INT 2
15290: NEG
15291: PPUSH
15292: CALL_OW 101
// GiveMedals ( MAIN ) ;
15296: LD_STRING MAIN
15298: PPUSH
15299: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15303: LD_INT 22
15305: PUSH
15306: LD_INT 1
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: PUSH
15313: LD_INT 23
15315: PUSH
15316: LD_INT 1
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: LD_INT 21
15325: PUSH
15326: LD_INT 1
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: LIST
15337: PPUSH
15338: CALL_OW 69
15342: PPUSH
15343: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15347: LD_EXP 1
15351: PPUSH
15352: LD_EXP 33
15356: PUSH
15357: LD_STRING JMM
15359: STR
15360: PPUSH
15361: CALL_OW 38
// if IsOK ( Bobby ) then
15365: LD_EXP 2
15369: PPUSH
15370: CALL_OW 302
15374: IFFALSE 15394
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15376: LD_EXP 2
15380: PPUSH
15381: LD_EXP 33
15385: PUSH
15386: LD_STRING Bobby
15388: STR
15389: PPUSH
15390: CALL_OW 38
// if IsOK ( Cyrus ) then
15394: LD_EXP 3
15398: PPUSH
15399: CALL_OW 302
15403: IFFALSE 15423
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15405: LD_EXP 3
15409: PPUSH
15410: LD_EXP 33
15414: PUSH
15415: LD_STRING Cyrus
15417: STR
15418: PPUSH
15419: CALL_OW 38
// if IsOK ( Lisa ) then
15423: LD_EXP 4
15427: PPUSH
15428: CALL_OW 302
15432: IFFALSE 15452
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15434: LD_EXP 4
15438: PPUSH
15439: LD_EXP 33
15443: PUSH
15444: LD_STRING Lisa
15446: STR
15447: PPUSH
15448: CALL_OW 38
// if IsOK ( Khatam ) then
15452: LD_EXP 5
15456: PPUSH
15457: CALL_OW 302
15461: IFFALSE 15481
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15463: LD_EXP 5
15467: PPUSH
15468: LD_EXP 33
15472: PUSH
15473: LD_STRING Khatam
15475: STR
15476: PPUSH
15477: CALL_OW 38
// if IsOK ( Brian ) then
15481: LD_EXP 6
15485: PPUSH
15486: CALL_OW 302
15490: IFFALSE 15510
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
15492: LD_EXP 6
15496: PPUSH
15497: LD_EXP 33
15501: PUSH
15502: LD_STRING Brian
15504: STR
15505: PPUSH
15506: CALL_OW 38
// if IsOk ( Jerry ) then
15510: LD_EXP 7
15514: PPUSH
15515: CALL_OW 302
15519: IFFALSE 15539
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15521: LD_EXP 7
15525: PPUSH
15526: LD_EXP 33
15530: PUSH
15531: LD_STRING Jerry
15533: STR
15534: PPUSH
15535: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
15539: LD_EXP 21
15543: PUSH
15544: LD_INT 1
15546: EQUAL
15547: PUSH
15548: LD_EXP 8
15552: PPUSH
15553: CALL_OW 255
15557: PUSH
15558: LD_INT 1
15560: EQUAL
15561: AND
15562: PUSH
15563: LD_EXP 8
15567: PPUSH
15568: CALL_OW 302
15572: AND
15573: IFFALSE 15593
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15575: LD_EXP 8
15579: PPUSH
15580: LD_EXP 33
15584: PUSH
15585: LD_STRING Mikhail
15587: STR
15588: PPUSH
15589: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15593: LD_INT 50
15595: PUSH
15596: EMPTY
15597: LIST
15598: PUSH
15599: LD_INT 22
15601: PUSH
15602: LD_INT 1
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: PUSH
15609: LD_INT 21
15611: PUSH
15612: LD_INT 1
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: LIST
15623: PPUSH
15624: CALL_OW 69
15628: PUSH
15629: LD_EXP 1
15633: PUSH
15634: LD_EXP 2
15638: PUSH
15639: LD_EXP 3
15643: PUSH
15644: LD_EXP 4
15648: PUSH
15649: LD_EXP 5
15653: PUSH
15654: LD_EXP 6
15658: PUSH
15659: LD_EXP 7
15663: PUSH
15664: LD_EXP 8
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: DIFF
15679: PPUSH
15680: LD_STRING 02_other_survivors
15682: PPUSH
15683: CALL_OW 38
// YouWin ;
15687: CALL_OW 103
// end ;
15691: LD_VAR 0 1
15695: RET
