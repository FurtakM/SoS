// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// AnimateTrees ( true ) ;
 161: LD_INT 1
 163: PPUSH
 164: CALL_OW 573
// PrepareDifficulty ;
 168: CALL 10285 0 0
// PrepareRussianCommander ;
 172: CALL 11741 0 0
// PrepareSouthBase ;
 176: CALL 11824 0 0
// PrepareNorthBase ;
 180: CALL 12163 0 0
// PrepareOtherRussians ;
 184: CALL 12529 0 0
// PrepareHeroes ;
 188: CALL 10600 0 0
// PrepareLisSquad ;
 192: CALL 10928 0 0
// PrepareOtherAmericans ;
 196: CALL 11273 0 0
// end ; end_of_file
 200: END
// every 1 do var tmp ;
 201: GO 203
 203: DISABLE
 204: LD_INT 0
 206: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 207: LD_EXP 1
 211: PPUSH
 212: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 216: LD_ADDR_VAR 0 1
 220: PUSH
 221: LD_INT 22
 223: PUSH
 224: LD_INT 4
 226: PUSH
 227: EMPTY
 228: LIST
 229: LIST
 230: PUSH
 231: LD_INT 21
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: PPUSH
 245: CALL_OW 69
 249: PUSH
 250: LD_EXP 4
 254: PUSH
 255: EMPTY
 256: LIST
 257: DIFF
 258: ST_TO_ADDR
// if Cyrus and Bobby then
 259: LD_EXP 3
 263: PUSH
 264: LD_EXP 2
 268: AND
 269: IFFALSE 599
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 271: LD_EXP 3
 275: PPUSH
 276: LD_INT 43
 278: PPUSH
 279: LD_INT 72
 281: PPUSH
 282: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 286: LD_EXP 2
 290: PPUSH
 291: LD_INT 44
 293: PPUSH
 294: LD_INT 70
 296: PPUSH
 297: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 301: LD_EXP 1
 305: PPUSH
 306: LD_INT 46
 308: PPUSH
 309: LD_INT 73
 311: PPUSH
 312: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 316: LD_EXP 3
 320: PPUSH
 321: LD_STRING D1a-Cyrus-1
 323: PPUSH
 324: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 328: LD_EXP 1
 332: PPUSH
 333: LD_STRING D1a-JMM-1
 335: PPUSH
 336: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 340: LD_EXP 3
 344: PPUSH
 345: LD_INT 37
 347: PPUSH
 348: LD_INT 66
 350: PPUSH
 351: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 355: LD_EXP 2
 359: PPUSH
 360: LD_INT 41
 362: PPUSH
 363: LD_INT 67
 365: PPUSH
 366: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 370: LD_EXP 1
 374: PPUSH
 375: LD_INT 38
 377: PPUSH
 378: LD_INT 64
 380: PPUSH
 381: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 385: LD_EXP 2
 389: PPUSH
 390: LD_STRING D1a-Bobby-2
 392: PPUSH
 393: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 397: LD_EXP 3
 401: PPUSH
 402: LD_INT 35
 404: PPUSH
 405: LD_INT 62
 407: PPUSH
 408: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 412: LD_EXP 2
 416: PPUSH
 417: LD_INT 32
 419: PPUSH
 420: LD_INT 60
 422: PPUSH
 423: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 427: LD_EXP 1
 431: PPUSH
 432: LD_INT 35
 434: PPUSH
 435: LD_INT 60
 437: PPUSH
 438: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 442: LD_EXP 1
 446: PPUSH
 447: LD_STRING D1a-JMM-2
 449: PPUSH
 450: CALL_OW 88
// ComWalk ( Lisa ) ;
 454: LD_EXP 4
 458: PPUSH
 459: CALL_OW 138
// wait ( 0 0$1 ) ;
 463: LD_INT 35
 465: PPUSH
 466: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 470: LD_EXP 4
 474: PPUSH
 475: LD_EXP 1
 479: PPUSH
 480: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 484: LD_EXP 1
 488: PUSH
 489: LD_EXP 3
 493: PUSH
 494: LD_EXP 2
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: PPUSH
 504: LD_EXP 4
 508: PPUSH
 509: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 513: LD_VAR 0 1
 517: PUSH
 518: LD_INT 1
 520: ARRAY
 521: PPUSH
 522: LD_INT 33
 524: PPUSH
 525: LD_INT 55
 527: PPUSH
 528: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 532: LD_VAR 0 1
 536: PUSH
 537: LD_INT 2
 539: ARRAY
 540: PPUSH
 541: LD_INT 30
 543: PPUSH
 544: LD_INT 54
 546: PPUSH
 547: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 551: LD_VAR 0 1
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_EXP 1
 564: PPUSH
 565: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 569: LD_VAR 0 1
 573: PUSH
 574: LD_INT 2
 576: ARRAY
 577: PPUSH
 578: LD_EXP 1
 582: PPUSH
 583: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 587: LD_EXP 4
 591: PPUSH
 592: LD_STRING D1a-Lisa-2
 594: PPUSH
 595: CALL_OW 88
// end ; if Cyrus and not Bobby then
 599: LD_EXP 3
 603: PUSH
 604: LD_EXP 2
 608: NOT
 609: AND
 610: IFFALSE 815
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 612: LD_EXP 3
 616: PPUSH
 617: LD_INT 43
 619: PPUSH
 620: LD_INT 72
 622: PPUSH
 623: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 627: LD_EXP 1
 631: PPUSH
 632: LD_INT 46
 634: PPUSH
 635: LD_INT 73
 637: PPUSH
 638: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 642: LD_EXP 3
 646: PPUSH
 647: LD_STRING D1a-Cyrus-1
 649: PPUSH
 650: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 654: LD_EXP 1
 658: PPUSH
 659: LD_STRING D1a-JMM-1
 661: PPUSH
 662: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 666: LD_EXP 3
 670: PPUSH
 671: LD_INT 37
 673: PPUSH
 674: LD_INT 66
 676: PPUSH
 677: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 681: LD_EXP 1
 685: PPUSH
 686: LD_INT 38
 688: PPUSH
 689: LD_INT 64
 691: PPUSH
 692: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 696: LD_EXP 3
 700: PPUSH
 701: LD_STRING D1a-Cyrus-2
 703: PPUSH
 704: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 708: LD_EXP 3
 712: PPUSH
 713: LD_INT 35
 715: PPUSH
 716: LD_INT 62
 718: PPUSH
 719: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 723: LD_EXP 1
 727: PPUSH
 728: LD_INT 35
 730: PPUSH
 731: LD_INT 60
 733: PPUSH
 734: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 738: LD_EXP 1
 742: PPUSH
 743: LD_STRING D1a-JMM-2
 745: PPUSH
 746: CALL_OW 88
// ComWalk ( Lisa ) ;
 750: LD_EXP 4
 754: PPUSH
 755: CALL_OW 138
// wait ( 0 0$1 ) ;
 759: LD_INT 35
 761: PPUSH
 762: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 766: LD_EXP 4
 770: PPUSH
 771: LD_EXP 1
 775: PPUSH
 776: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 780: LD_EXP 4
 784: PPUSH
 785: LD_STRING D1a-Lisa-2
 787: PPUSH
 788: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 792: LD_EXP 1
 796: PUSH
 797: LD_EXP 3
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PPUSH
 806: LD_EXP 4
 810: PPUSH
 811: CALL_OW 119
// end ; if not Cyrus and Bobby then
 815: LD_EXP 3
 819: NOT
 820: PUSH
 821: LD_EXP 2
 825: AND
 826: IFFALSE 1105
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 828: LD_EXP 2
 832: PPUSH
 833: LD_INT 44
 835: PPUSH
 836: LD_INT 70
 838: PPUSH
 839: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 843: LD_EXP 1
 847: PPUSH
 848: LD_INT 46
 850: PPUSH
 851: LD_INT 73
 853: PPUSH
 854: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 858: LD_EXP 2
 862: PPUSH
 863: LD_STRING D1a-Bobby-1
 865: PPUSH
 866: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 870: LD_EXP 1
 874: PPUSH
 875: LD_STRING D1a-JMM-1
 877: PPUSH
 878: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 882: LD_EXP 2
 886: PPUSH
 887: LD_INT 37
 889: PPUSH
 890: LD_INT 66
 892: PPUSH
 893: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 897: LD_EXP 1
 901: PPUSH
 902: LD_INT 38
 904: PPUSH
 905: LD_INT 64
 907: PPUSH
 908: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 912: LD_EXP 2
 916: PPUSH
 917: LD_STRING D1a-Bobby-2
 919: PPUSH
 920: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 924: LD_EXP 2
 928: PPUSH
 929: LD_INT 35
 931: PPUSH
 932: LD_INT 62
 934: PPUSH
 935: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 939: LD_EXP 1
 943: PPUSH
 944: LD_INT 35
 946: PPUSH
 947: LD_INT 60
 949: PPUSH
 950: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 954: LD_EXP 1
 958: PPUSH
 959: LD_STRING D1a-JMM-2
 961: PPUSH
 962: CALL_OW 88
// ComWalk ( Lisa ) ;
 966: LD_EXP 4
 970: PPUSH
 971: CALL_OW 138
// wait ( 0 0$1 ) ;
 975: LD_INT 35
 977: PPUSH
 978: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 982: LD_EXP 4
 986: PPUSH
 987: LD_EXP 1
 991: PPUSH
 992: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 996: LD_EXP 1
1000: PUSH
1001: LD_EXP 3
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PPUSH
1010: LD_EXP 4
1014: PPUSH
1015: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 1
1026: ARRAY
1027: PPUSH
1028: LD_INT 33
1030: PPUSH
1031: LD_INT 55
1033: PPUSH
1034: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1038: LD_VAR 0 1
1042: PUSH
1043: LD_INT 2
1045: ARRAY
1046: PPUSH
1047: LD_INT 30
1049: PPUSH
1050: LD_INT 54
1052: PPUSH
1053: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1057: LD_VAR 0 1
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: LD_EXP 1
1070: PPUSH
1071: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1075: LD_VAR 0 1
1079: PUSH
1080: LD_INT 2
1082: ARRAY
1083: PPUSH
1084: LD_EXP 1
1088: PPUSH
1089: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1093: LD_EXP 4
1097: PPUSH
1098: LD_STRING D1a-Lisa-2
1100: PPUSH
1101: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1105: LD_EXP 3
1109: NOT
1110: PUSH
1111: LD_EXP 2
1115: NOT
1116: AND
1117: IFFALSE 1331
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1119: LD_EXP 1
1123: PPUSH
1124: LD_INT 37
1126: PPUSH
1127: LD_INT 66
1129: PPUSH
1130: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1134: LD_EXP 1
1138: PPUSH
1139: LD_STRING D1b-JMM-1
1141: PPUSH
1142: CALL_OW 88
// ComCrawl ( JMM ) ;
1146: LD_EXP 1
1150: PPUSH
1151: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1155: LD_EXP 1
1159: PPUSH
1160: LD_INT 35
1162: PPUSH
1163: LD_INT 60
1165: PPUSH
1166: CALL_OW 171
// wait ( 0 0$8 ) ;
1170: LD_INT 280
1172: PPUSH
1173: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1177: LD_EXP 1
1181: PPUSH
1182: LD_STRING D1b-JMM-1a
1184: PPUSH
1185: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1189: LD_EXP 1
1193: PUSH
1194: LD_EXP 4
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 138
// wait ( 0 0$1 ) ;
1207: LD_INT 35
1209: PPUSH
1210: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1214: LD_EXP 4
1218: PPUSH
1219: LD_EXP 1
1223: PPUSH
1224: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1228: LD_EXP 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: PPUSH
1236: LD_EXP 4
1240: PPUSH
1241: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1245: LD_VAR 0 1
1249: PUSH
1250: LD_INT 1
1252: ARRAY
1253: PPUSH
1254: LD_INT 33
1256: PPUSH
1257: LD_INT 55
1259: PPUSH
1260: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: ARRAY
1272: PPUSH
1273: LD_INT 30
1275: PPUSH
1276: LD_INT 54
1278: PPUSH
1279: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1283: LD_VAR 0 1
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_EXP 1
1296: PPUSH
1297: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1301: LD_VAR 0 1
1305: PUSH
1306: LD_INT 2
1308: ARRAY
1309: PPUSH
1310: LD_EXP 1
1314: PPUSH
1315: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1319: LD_EXP 4
1323: PPUSH
1324: LD_STRING D1b-Lisa-1
1326: PPUSH
1327: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1331: LD_EXP 1
1335: PPUSH
1336: LD_STRING D1-JMM-1
1338: PPUSH
1339: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1343: LD_EXP 4
1347: PPUSH
1348: LD_STRING D1-Lisa-1
1350: PPUSH
1351: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1355: LD_EXP 1
1359: PPUSH
1360: LD_STRING D1-JMM-2
1362: PPUSH
1363: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1367: LD_EXP 9
1371: PPUSH
1372: LD_STRING D1-Pow-2
1374: PPUSH
1375: CALL_OW 94
// if Cyrus then
1379: LD_EXP 3
1383: IFFALSE 1409
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1385: LD_EXP 3
1389: PPUSH
1390: LD_STRING D1-Cyrus-2
1392: PPUSH
1393: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1397: LD_EXP 1
1401: PPUSH
1402: LD_STRING D1-JMM-3
1404: PPUSH
1405: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1409: LD_EXP 9
1413: PPUSH
1414: LD_STRING D1-Pow-3
1416: PPUSH
1417: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1421: LD_EXP 1
1425: PPUSH
1426: LD_STRING D1-JMM-4
1428: PPUSH
1429: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1433: LD_EXP 9
1437: PPUSH
1438: LD_STRING D1-Pow-4
1440: PPUSH
1441: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1445: LD_EXP 9
1449: PPUSH
1450: LD_STRING D1-Pow-4a
1452: PPUSH
1453: CALL_OW 94
// if Cyrus then
1457: LD_EXP 3
1461: IFFALSE 1475
// Say ( Cyrus , D1-Cyrus-4 ) ;
1463: LD_EXP 3
1467: PPUSH
1468: LD_STRING D1-Cyrus-4
1470: PPUSH
1471: CALL_OW 88
// if Bobby then
1475: LD_EXP 2
1479: IFFALSE 1517
// begin Say ( Bobby , D1-Bobby-4 ) ;
1481: LD_EXP 2
1485: PPUSH
1486: LD_STRING D1-Bobby-4
1488: PPUSH
1489: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1493: LD_EXP 4
1497: PPUSH
1498: LD_STRING D1-Lisa-4
1500: PPUSH
1501: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1505: LD_EXP 1
1509: PPUSH
1510: LD_STRING D1-JMM-5
1512: PPUSH
1513: CALL_OW 88
// end ; InGameOff ;
1517: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1521: LD_INT 22
1523: PUSH
1524: LD_INT 4
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PPUSH
1531: CALL_OW 69
1535: PUSH
1536: LD_EXP 6
1540: PUSH
1541: LD_EXP 7
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: DIFF
1550: PPUSH
1551: LD_INT 1
1553: PPUSH
1554: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1558: LD_STRING M1
1560: PPUSH
1561: CALL_OW 337
// SaveForQuickRestart ;
1565: CALL_OW 22
// end ;
1569: PPOPN 1
1571: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1572: LD_INT 7
1574: PPUSH
1575: LD_INT 22
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PPUSH
1585: CALL_OW 70
1589: PUSH
1590: LD_INT 0
1592: GREATER
1593: IFFALSE 2010
1595: GO 1597
1597: DISABLE
// begin InGameOn ;
1598: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1602: LD_INT 22
1604: PUSH
1605: LD_INT 1
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 21
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PPUSH
1626: CALL_OW 69
1630: PPUSH
1631: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1635: LD_INT 24
1637: PPUSH
1638: LD_INT 32
1640: PPUSH
1641: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1645: LD_EXP 5
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: LD_INT 1
1655: PPUSH
1656: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1660: LD_EXP 5
1664: PPUSH
1665: LD_INT 4
1667: PPUSH
1668: CALL_OW 336
// wait ( 0 0$1 ) ;
1672: LD_INT 35
1674: PPUSH
1675: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1679: LD_EXP 5
1683: PPUSH
1684: LD_INT 27
1686: PPUSH
1687: LD_INT 38
1689: PPUSH
1690: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1694: LD_EXP 5
1698: PPUSH
1699: LD_EXP 1
1703: PPUSH
1704: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1708: LD_INT 22
1710: PUSH
1711: LD_INT 1
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 21
1720: PUSH
1721: LD_INT 1
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PPUSH
1732: CALL_OW 69
1736: PUSH
1737: LD_EXP 5
1741: PUSH
1742: EMPTY
1743: LIST
1744: DIFF
1745: PPUSH
1746: LD_EXP 5
1750: PPUSH
1751: CALL_OW 119
// wait ( 0 0$1 ) ;
1755: LD_INT 35
1757: PPUSH
1758: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1762: LD_EXP 5
1766: PPUSH
1767: LD_STRING D2a-Khat-1
1769: PPUSH
1770: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1774: LD_EXP 1
1778: PPUSH
1779: LD_STRING D2a-JMM-1
1781: PPUSH
1782: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1786: LD_EXP 5
1790: PPUSH
1791: LD_STRING D2a-Khat-2
1793: PPUSH
1794: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1798: LD_EXP 1
1802: PPUSH
1803: LD_STRING D2a-JMM-2
1805: PPUSH
1806: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1810: LD_EXP 5
1814: PPUSH
1815: LD_STRING D2a-Khat-3
1817: PPUSH
1818: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1822: LD_EXP 1
1826: PPUSH
1827: LD_STRING D2a-JMM-3
1829: PPUSH
1830: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1834: LD_EXP 5
1838: PPUSH
1839: LD_STRING D2a-Khat-4
1841: PPUSH
1842: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1846: LD_EXP 1
1850: PPUSH
1851: LD_STRING D2a-JMM-4
1853: PPUSH
1854: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1858: LD_EXP 5
1862: PPUSH
1863: LD_STRING D2a-Khat-5
1865: PPUSH
1866: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1870: LD_EXP 1
1874: PPUSH
1875: LD_STRING D2a-JMM-5
1877: PPUSH
1878: CALL_OW 88
// InGameOff ;
1882: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1886: LD_INT 22
1888: PUSH
1889: LD_INT 1
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: LD_INT 21
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 3
1908: PUSH
1909: LD_INT 24
1911: PUSH
1912: LD_INT 800
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PPUSH
1928: CALL_OW 69
1932: PUSH
1933: LD_INT 0
1935: GREATER
1936: IFFALSE 2010
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1938: LD_EXP 5
1942: PPUSH
1943: LD_INT 22
1945: PUSH
1946: LD_INT 1
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 21
1955: PUSH
1956: LD_INT 1
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: LD_INT 3
1965: PUSH
1966: LD_INT 24
1968: PUSH
1969: LD_INT 1000
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PPUSH
1985: CALL_OW 69
1989: PUSH
1990: LD_INT 1
1992: ARRAY
1993: PPUSH
1994: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1998: LD_EXP 5
2002: PPUSH
2003: LD_STRING D2b-Khat-1
2005: PPUSH
2006: CALL_OW 88
// end ; end ;
2010: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
2011: LD_INT 15
2013: PPUSH
2014: LD_INT 22
2016: PUSH
2017: LD_INT 1
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL_OW 70
2028: PUSH
2029: LD_INT 0
2031: GREATER
2032: IFFALSE 3196
2034: GO 2036
2036: DISABLE
2037: LD_INT 0
2039: PPUSH
2040: PPUSH
2041: PPUSH
2042: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2043: LD_ADDR_VAR 0 2
2047: PUSH
2048: LD_INT 999
2050: PUSH
2051: LD_INT 999
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2061: LD_ADDR_VAR 0 4
2065: PUSH
2066: LD_INT 22
2068: PUSH
2069: LD_INT 1
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: PUSH
2076: LD_INT 21
2078: PUSH
2079: LD_INT 1
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: PPUSH
2090: CALL_OW 69
2094: PUSH
2095: LD_EXP 1
2099: PUSH
2100: LD_EXP 2
2104: PUSH
2105: LD_EXP 3
2109: PUSH
2110: LD_EXP 4
2114: PUSH
2115: LD_EXP 5
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: DIFF
2127: ST_TO_ADDR
// PrepareDeadSoldiers ;
2128: CALL 11431 0 0
// spotCorpses = 1 ;
2132: LD_ADDR_EXP 32
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2140: LD_INT 70
2142: PPUSH
2143: CALL_OW 67
// InGameOn ;
2147: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2151: LD_INT 23
2153: PPUSH
2154: LD_INT 12
2156: PPUSH
2157: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2161: LD_ADDR_VAR 0 3
2165: PUSH
2166: LD_VAR 0 2
2170: PUSH
2171: LD_INT 1
2173: ARRAY
2174: PUSH
2175: LD_INT 2
2177: ARRAY
2178: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2179: LD_ADDR_VAR 0 1
2183: PUSH
2184: LD_INT 22
2186: PUSH
2187: LD_INT 1
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_INT 21
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: PPUSH
2208: CALL_OW 69
2212: PUSH
2213: LD_EXP 1
2217: PUSH
2218: LD_EXP 5
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: DIFF
2227: PUSH
2228: FOR_IN
2229: IFFALSE 2280
// if IsOK ( i ) then
2231: LD_VAR 0 1
2235: PPUSH
2236: CALL_OW 302
2240: IFFALSE 2278
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2242: LD_ADDR_VAR 0 2
2246: PUSH
2247: LD_VAR 0 2
2251: PUSH
2252: LD_VAR 0 1
2256: PUSH
2257: LD_VAR 0 1
2261: PPUSH
2262: LD_INT 16
2264: PPUSH
2265: CALL_OW 299
2269: PUSH
2270: EMPTY
2271: LIST
2272: LIST
2273: PUSH
2274: EMPTY
2275: LIST
2276: ADD
2277: ST_TO_ADDR
2278: GO 2228
2280: POP
2281: POP
// for i = 2 to distanceTab do
2282: LD_ADDR_VAR 0 1
2286: PUSH
2287: DOUBLE
2288: LD_INT 2
2290: DEC
2291: ST_TO_ADDR
2292: LD_VAR 0 2
2296: PUSH
2297: FOR_TO
2298: IFFALSE 2344
// if distanceTab [ i ] [ 2 ] < min then
2300: LD_VAR 0 2
2304: PUSH
2305: LD_VAR 0 1
2309: ARRAY
2310: PUSH
2311: LD_INT 2
2313: ARRAY
2314: PUSH
2315: LD_VAR 0 3
2319: LESS
2320: IFFALSE 2342
// min = distanceTab [ i ] [ 2 ] ;
2322: LD_ADDR_VAR 0 3
2326: PUSH
2327: LD_VAR 0 2
2331: PUSH
2332: LD_VAR 0 1
2336: ARRAY
2337: PUSH
2338: LD_INT 2
2340: ARRAY
2341: ST_TO_ADDR
2342: GO 2297
2344: POP
2345: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2346: LD_ADDR_VAR 0 1
2350: PUSH
2351: LD_INT 22
2353: PUSH
2354: LD_INT 1
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 21
2363: PUSH
2364: LD_INT 1
2366: PUSH
2367: EMPTY
2368: LIST
2369: LIST
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PPUSH
2375: CALL_OW 69
2379: PUSH
2380: LD_EXP 1
2384: PUSH
2385: EMPTY
2386: LIST
2387: DIFF
2388: PUSH
2389: FOR_IN
2390: IFFALSE 2460
// begin ComMoveToArea ( i , DeadCutscene ) ;
2392: LD_VAR 0 1
2396: PPUSH
2397: LD_INT 28
2399: PPUSH
2400: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2404: LD_EXP 1
2408: PPUSH
2409: LD_INT 30
2411: PPUSH
2412: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2416: LD_VAR 0 1
2420: PPUSH
2421: LD_INT 23
2423: PPUSH
2424: LD_INT 11
2426: PPUSH
2427: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2431: LD_EXP 1
2435: PPUSH
2436: LD_INT 23
2438: PPUSH
2439: LD_INT 11
2441: PPUSH
2442: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2446: LD_EXP 34
2450: PPUSH
2451: LD_INT 250
2453: PPUSH
2454: CALL_OW 234
// end ;
2458: GO 2389
2460: POP
2461: POP
// for i = 2 to distanceTab do
2462: LD_ADDR_VAR 0 1
2466: PUSH
2467: DOUBLE
2468: LD_INT 2
2470: DEC
2471: ST_TO_ADDR
2472: LD_VAR 0 2
2476: PUSH
2477: FOR_TO
2478: IFFALSE 2864
// begin if distanceTab [ i ] [ 2 ] = min then
2480: LD_VAR 0 2
2484: PUSH
2485: LD_VAR 0 1
2489: ARRAY
2490: PUSH
2491: LD_INT 2
2493: ARRAY
2494: PUSH
2495: LD_VAR 0 3
2499: EQUAL
2500: IFFALSE 2862
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2502: LD_VAR 0 2
2506: PUSH
2507: LD_VAR 0 1
2511: ARRAY
2512: PUSH
2513: LD_INT 1
2515: ARRAY
2516: PUSH
2517: LD_EXP 2
2521: EQUAL
2522: IFFALSE 2536
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2524: LD_EXP 2
2528: PPUSH
2529: LD_STRING DCorpses-Bobby-1
2531: PPUSH
2532: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2536: LD_VAR 0 2
2540: PUSH
2541: LD_VAR 0 1
2545: ARRAY
2546: PUSH
2547: LD_INT 1
2549: ARRAY
2550: PUSH
2551: LD_EXP 3
2555: EQUAL
2556: IFFALSE 2570
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2558: LD_EXP 3
2562: PPUSH
2563: LD_STRING DCorpses-Cyrus-1
2565: PPUSH
2566: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2570: LD_VAR 0 2
2574: PUSH
2575: LD_VAR 0 1
2579: ARRAY
2580: PUSH
2581: LD_INT 1
2583: ARRAY
2584: PUSH
2585: LD_EXP 4
2589: EQUAL
2590: IFFALSE 2604
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2592: LD_EXP 4
2596: PPUSH
2597: LD_STRING DCorpses-Lisa-1
2599: PPUSH
2600: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2604: LD_VAR 0 2
2608: PUSH
2609: LD_VAR 0 1
2613: ARRAY
2614: PUSH
2615: LD_INT 1
2617: ARRAY
2618: PUSH
2619: LD_VAR 0 4
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: EQUAL
2628: PUSH
2629: LD_VAR 0 4
2633: PUSH
2634: LD_INT 1
2636: ARRAY
2637: PPUSH
2638: CALL_OW 258
2642: PUSH
2643: LD_INT 1
2645: EQUAL
2646: AND
2647: IFFALSE 2665
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2649: LD_VAR 0 4
2653: PUSH
2654: LD_INT 1
2656: ARRAY
2657: PPUSH
2658: LD_STRING DCorpses-Sol1-1
2660: PPUSH
2661: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2665: LD_VAR 0 2
2669: PUSH
2670: LD_VAR 0 1
2674: ARRAY
2675: PUSH
2676: LD_INT 1
2678: ARRAY
2679: PUSH
2680: LD_VAR 0 4
2684: PUSH
2685: LD_INT 1
2687: ARRAY
2688: EQUAL
2689: PUSH
2690: LD_VAR 0 4
2694: PUSH
2695: LD_INT 1
2697: ARRAY
2698: PPUSH
2699: CALL_OW 258
2703: PUSH
2704: LD_INT 2
2706: EQUAL
2707: AND
2708: IFFALSE 2726
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2710: LD_VAR 0 4
2714: PUSH
2715: LD_INT 1
2717: ARRAY
2718: PPUSH
2719: LD_STRING DCorpses-FSol1-1
2721: PPUSH
2722: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2726: LD_VAR 0 2
2730: PUSH
2731: LD_VAR 0 1
2735: ARRAY
2736: PUSH
2737: LD_INT 1
2739: ARRAY
2740: PUSH
2741: LD_VAR 0 4
2745: PUSH
2746: LD_INT 2
2748: ARRAY
2749: EQUAL
2750: PUSH
2751: LD_VAR 0 4
2755: PUSH
2756: LD_INT 2
2758: ARRAY
2759: PPUSH
2760: CALL_OW 258
2764: PUSH
2765: LD_INT 1
2767: EQUAL
2768: AND
2769: IFFALSE 2787
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2771: LD_VAR 0 4
2775: PUSH
2776: LD_INT 2
2778: ARRAY
2779: PPUSH
2780: LD_STRING DCorpses-Sol1-1
2782: PPUSH
2783: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2787: LD_VAR 0 2
2791: PUSH
2792: LD_VAR 0 1
2796: ARRAY
2797: PUSH
2798: LD_INT 1
2800: ARRAY
2801: PUSH
2802: LD_VAR 0 4
2806: PUSH
2807: LD_INT 2
2809: ARRAY
2810: EQUAL
2811: PUSH
2812: LD_VAR 0 4
2816: PUSH
2817: LD_INT 2
2819: ARRAY
2820: PPUSH
2821: CALL_OW 258
2825: PUSH
2826: LD_INT 2
2828: EQUAL
2829: AND
2830: IFFALSE 2848
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2832: LD_VAR 0 4
2836: PUSH
2837: LD_INT 2
2839: ARRAY
2840: PPUSH
2841: LD_STRING DCorpses-FSol1-1
2843: PPUSH
2844: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2848: LD_EXP 34
2852: PPUSH
2853: LD_INT 150
2855: PPUSH
2856: CALL_OW 234
// break ;
2860: GO 2864
// end ; end ;
2862: GO 2477
2864: POP
2865: POP
// repeat wait ( 0 0$1 ) ;
2866: LD_INT 35
2868: PPUSH
2869: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2873: LD_ADDR_VAR 0 1
2877: PUSH
2878: LD_INT 22
2880: PUSH
2881: LD_INT 1
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PUSH
2888: LD_INT 21
2890: PUSH
2891: LD_INT 1
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 69
2906: PUSH
2907: LD_EXP 1
2911: PUSH
2912: EMPTY
2913: LIST
2914: DIFF
2915: PUSH
2916: FOR_IN
2917: IFFALSE 2987
// begin ComMoveToArea ( i , DeadCutscene ) ;
2919: LD_VAR 0 1
2923: PPUSH
2924: LD_INT 28
2926: PPUSH
2927: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2931: LD_EXP 1
2935: PPUSH
2936: LD_INT 30
2938: PPUSH
2939: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2943: LD_VAR 0 1
2947: PPUSH
2948: LD_INT 23
2950: PPUSH
2951: LD_INT 11
2953: PPUSH
2954: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2958: LD_EXP 1
2962: PPUSH
2963: LD_INT 23
2965: PPUSH
2966: LD_INT 11
2968: PPUSH
2969: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2973: LD_EXP 34
2977: PPUSH
2978: LD_INT 250
2980: PPUSH
2981: CALL_OW 234
// end ;
2985: GO 2916
2987: POP
2988: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2989: LD_EXP 1
2993: PPUSH
2994: LD_INT 30
2996: PPUSH
2997: CALL_OW 308
3001: IFFALSE 2866
// wait ( 0 0$1 ) ;
3003: LD_INT 35
3005: PPUSH
3006: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3010: LD_EXP 1
3014: PPUSH
3015: LD_STRING DCorpses-JMM-1
3017: PPUSH
3018: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3022: LD_EXP 34
3026: PPUSH
3027: LD_INT 100
3029: PPUSH
3030: CALL_OW 234
// if IsOK ( Khatam ) then
3034: LD_EXP 5
3038: PPUSH
3039: CALL_OW 302
3043: IFFALSE 3180
// begin repeat wait ( 0 0$1 ) ;
3045: LD_INT 35
3047: PPUSH
3048: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3052: LD_EXP 5
3056: PPUSH
3057: LD_EXP 34
3061: PPUSH
3062: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3066: LD_EXP 5
3070: PPUSH
3071: LD_EXP 34
3075: PPUSH
3076: CALL_OW 296
3080: PUSH
3081: LD_INT 2
3083: LESS
3084: IFFALSE 3045
// spotCorpses = 0 ;
3086: LD_ADDR_EXP 32
3090: PUSH
3091: LD_INT 0
3093: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3094: LD_EXP 34
3098: PPUSH
3099: LD_INT 10
3101: PPUSH
3102: CALL_OW 234
// wait ( 0 0$3 ) ;
3106: LD_INT 105
3108: PPUSH
3109: CALL_OW 67
// KillUnit ( DyingSold ) ;
3113: LD_EXP 34
3117: PPUSH
3118: CALL_OW 66
// wait ( 0 0$1 ) ;
3122: LD_INT 35
3124: PPUSH
3125: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3129: LD_EXP 1
3133: PUSH
3134: LD_EXP 5
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: PPUSH
3143: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3147: LD_EXP 5
3151: PPUSH
3152: LD_EXP 1
3156: PPUSH
3157: CALL_OW 119
// wait ( 0 0$1 ) ;
3161: LD_INT 35
3163: PPUSH
3164: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3168: LD_EXP 5
3172: PPUSH
3173: LD_STRING DCorpses-Khat-1
3175: PPUSH
3176: CALL_OW 88
// end ; InGameOff ;
3180: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3184: LD_EXP 1
3188: PPUSH
3189: LD_STRING DCorpses-JMM-2
3191: PPUSH
3192: CALL_OW 88
// end ;
3196: PPOPN 4
3198: END
// every 0 0$1 trigger spotCorpses = 1 do
3199: LD_EXP 32
3203: PUSH
3204: LD_INT 1
3206: EQUAL
3207: IFFALSE 3225
3209: GO 3211
3211: DISABLE
// begin enable ;
3212: ENABLE
// SetLives ( DyingSold , 10 ) ;
3213: LD_EXP 34
3217: PPUSH
3218: LD_INT 10
3220: PPUSH
3221: CALL_OW 234
// end ;
3225: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 15 ) do var i ;
3226: LD_INT 8
3228: PPUSH
3229: LD_INT 22
3231: PUSH
3232: LD_INT 1
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PPUSH
3239: CALL_OW 70
3243: PUSH
3244: LD_INT 0
3246: GREATER
3247: PUSH
3248: LD_INT 22
3250: PUSH
3251: LD_INT 1
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PPUSH
3258: CALL_OW 69
3262: PPUSH
3263: LD_EXP 7
3267: PPUSH
3268: CALL_OW 74
3272: PPUSH
3273: LD_EXP 7
3277: PPUSH
3278: CALL_OW 296
3282: PUSH
3283: LD_INT 15
3285: LESS
3286: OR
3287: IFFALSE 3511
3289: GO 3291
3291: DISABLE
3292: LD_INT 0
3294: PPUSH
// begin InGameOn ;
3295: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3299: LD_EXP 7
3303: PPUSH
3304: LD_INT 250
3306: PPUSH
3307: CALL_OW 234
// SetLives ( Brian , 750 ) ;
3311: LD_EXP 6
3315: PPUSH
3316: LD_INT 750
3318: PPUSH
3319: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3323: LD_INT 3
3325: PPUSH
3326: LD_INT 4
3328: PPUSH
3329: LD_INT 2
3331: PPUSH
3332: LD_INT 1
3334: PPUSH
3335: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3339: LD_EXP 6
3343: PUSH
3344: LD_EXP 7
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PPUSH
3353: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3357: LD_ADDR_VAR 0 1
3361: PUSH
3362: LD_INT 9
3364: PPUSH
3365: LD_INT 22
3367: PUSH
3368: LD_INT 3
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: PPUSH
3375: CALL_OW 70
3379: PUSH
3380: FOR_IN
3381: IFFALSE 3394
// ComFree ( i ) ;
3383: LD_VAR 0 1
3387: PPUSH
3388: CALL_OW 139
3392: GO 3380
3394: POP
3395: POP
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3396: LD_ADDR_VAR 0 1
3400: PUSH
3401: LD_INT 9
3403: PPUSH
3404: LD_INT 22
3406: PUSH
3407: LD_INT 3
3409: PUSH
3410: EMPTY
3411: LIST
3412: LIST
3413: PPUSH
3414: CALL_OW 70
3418: PUSH
3419: FOR_IN
3420: IFFALSE 3438
// AddComAttackUnit ( i , Brian ) ;
3422: LD_VAR 0 1
3426: PPUSH
3427: LD_EXP 6
3431: PPUSH
3432: CALL_OW 175
3436: GO 3419
3438: POP
3439: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3440: LD_ADDR_VAR 0 1
3444: PUSH
3445: LD_INT 22
3447: PUSH
3448: LD_INT 4
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PPUSH
3455: CALL_OW 69
3459: PUSH
3460: FOR_IN
3461: IFFALSE 3474
// ComFree ( i ) ;
3463: LD_VAR 0 1
3467: PPUSH
3468: CALL_OW 139
3472: GO 3460
3474: POP
3475: POP
// wait ( 0 0$1 ) ;
3476: LD_INT 35
3478: PPUSH
3479: CALL_OW 67
// InGameOff ;
3483: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3487: LD_EXP 6
3491: PPUSH
3492: LD_STRING DF-Sol1-1
3494: PPUSH
3495: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3499: LD_EXP 1
3503: PPUSH
3504: LD_STRING DF-JMM-1
3506: PPUSH
3507: CALL_OW 88
// end ;
3511: PPOPN 1
3513: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3514: LD_INT 19
3516: PPUSH
3517: LD_INT 22
3519: PUSH
3520: LD_INT 3
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 70
3531: PUSH
3532: LD_INT 0
3534: EQUAL
3535: IFFALSE 3648
3537: GO 3539
3539: DISABLE
// begin if not IsDead ( Brian ) then
3540: LD_EXP 6
3544: PPUSH
3545: CALL_OW 301
3549: NOT
3550: IFFALSE 3564
// SetSide ( Brian , 1 ) ;
3552: LD_EXP 6
3556: PPUSH
3557: LD_INT 1
3559: PPUSH
3560: CALL_OW 235
// if not IsDead ( Jerry ) then
3564: LD_EXP 7
3568: PPUSH
3569: CALL_OW 301
3573: NOT
3574: IFFALSE 3588
// SetSide ( Jerry , 1 ) ;
3576: LD_EXP 7
3580: PPUSH
3581: LD_INT 1
3583: PPUSH
3584: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3588: LD_INT 22
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PUSH
3598: LD_INT 25
3600: PUSH
3601: LD_INT 4
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: PPUSH
3612: CALL_OW 69
3616: PUSH
3617: LD_INT 0
3619: GREATER
3620: IFFALSE 3636
// begin Say ( JMM , DFa-JMM-1 ) ;
3622: LD_EXP 1
3626: PPUSH
3627: LD_STRING DFa-JMM-1
3629: PPUSH
3630: CALL_OW 88
// end else
3634: GO 3648
// begin Say ( JMM , DFa-JMM-1a ) ;
3636: LD_EXP 1
3640: PPUSH
3641: LD_STRING DFa-JMM-1a
3643: PPUSH
3644: CALL_OW 88
// end ; end ;
3648: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3649: LD_INT 19
3651: PPUSH
3652: LD_INT 22
3654: PUSH
3655: LD_INT 3
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: PPUSH
3662: CALL_OW 70
3666: PUSH
3667: LD_INT 0
3669: EQUAL
3670: PUSH
3671: LD_EXP 6
3675: PPUSH
3676: CALL_OW 302
3680: NOT
3681: AND
3682: IFFALSE 3768
3684: GO 3686
3686: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3687: LD_INT 35
3689: PPUSH
3690: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3694: LD_EXP 6
3698: PPUSH
3699: CALL_OW 256
3703: PUSH
3704: LD_INT 250
3706: GREATER
3707: IFFALSE 3687
// Say ( Brian , DFb-Sol1-1 ) ;
3709: LD_EXP 6
3713: PPUSH
3714: LD_STRING DFb-Sol1-1
3716: PPUSH
3717: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3721: LD_EXP 6
3725: PPUSH
3726: LD_INT 78
3728: PPUSH
3729: LD_INT 74
3731: PPUSH
3732: CALL_OW 111
// if IsDead ( Jerry ) then
3736: LD_EXP 7
3740: PPUSH
3741: CALL_OW 301
3745: IFFALSE 3761
// Say ( Brian , DFb-Sol1-1a ) else
3747: LD_EXP 6
3751: PPUSH
3752: LD_STRING DFb-Sol1-1a
3754: PPUSH
3755: CALL_OW 88
3759: GO 3768
// SetAchievement ( ACH_JERRY ) ;
3761: LD_STRING ACH_JERRY
3763: PPUSH
3764: CALL_OW 543
// end ;
3768: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3769: LD_INT 22
3771: PUSH
3772: LD_INT 1
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: PUSH
3779: LD_INT 21
3781: PUSH
3782: LD_INT 2
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: PPUSH
3793: CALL_OW 69
3797: PUSH
3798: LD_INT 0
3800: EQUAL
3801: IFFALSE 3889
3803: GO 3805
3805: DISABLE
3806: LD_INT 0
3808: PPUSH
// begin enable ;
3809: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3810: LD_ADDR_VAR 0 1
3814: PUSH
3815: LD_INT 22
3817: PUSH
3818: LD_INT 3
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 21
3827: PUSH
3828: LD_INT 3
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: LD_INT 30
3837: PUSH
3838: LD_INT 31
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: LIST
3849: PPUSH
3850: CALL_OW 69
3854: PUSH
3855: FOR_IN
3856: IFFALSE 3887
// begin if See ( 1 , i ) then
3858: LD_INT 1
3860: PPUSH
3861: LD_VAR 0 1
3865: PPUSH
3866: CALL_OW 292
3870: IFFALSE 3885
// begin disable ;
3872: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3873: LD_EXP 1
3877: PPUSH
3878: LD_STRING DX1-JMM-1
3880: PPUSH
3881: CALL_OW 88
// end ; end ;
3885: GO 3855
3887: POP
3888: POP
// end ;
3889: PPOPN 1
3891: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
3892: LD_INT 1
3894: PPUSH
3895: LD_INT 11
3897: PPUSH
3898: CALL_OW 294
3902: IFFALSE 4161
3904: GO 3906
3906: DISABLE
3907: LD_INT 0
3909: PPUSH
3910: PPUSH
3911: PPUSH
// begin DialogueOn ;
3912: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3916: LD_INT 11
3918: PPUSH
3919: LD_INT 22
3921: PUSH
3922: LD_INT 3
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: PUSH
3929: LD_INT 21
3931: PUSH
3932: LD_INT 1
3934: PUSH
3935: EMPTY
3936: LIST
3937: LIST
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: PPUSH
3943: CALL_OW 70
3947: PUSH
3948: LD_INT 1
3950: ARRAY
3951: PPUSH
3952: LD_STRING DX3-Rus1-1
3954: PPUSH
3955: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3959: LD_EXP 1
3963: PPUSH
3964: LD_STRING DX3-JMM-1
3966: PPUSH
3967: CALL_OW 88
// DialogueOff ;
3971: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
3975: LD_ADDR_VAR 0 1
3979: PUSH
3980: LD_INT 11
3982: PPUSH
3983: LD_INT 22
3985: PUSH
3986: LD_INT 3
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PUSH
3993: LD_INT 25
3995: PUSH
3996: LD_INT 1
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PPUSH
4007: CALL_OW 70
4011: PUSH
4012: FOR_IN
4013: IFFALSE 4033
// southBaseDefenders = southBaseDefenders ^ i ;
4015: LD_ADDR_EXP 25
4019: PUSH
4020: LD_EXP 25
4024: PUSH
4025: LD_VAR 0 1
4029: ADD
4030: ST_TO_ADDR
4031: GO 4012
4033: POP
4034: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 ] [ Difficulty ] ) ;
4035: LD_INT 175
4037: PUSH
4038: LD_INT 140
4040: PUSH
4041: LD_INT 105
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: LIST
4048: PUSH
4049: LD_OWVAR 67
4053: ARRAY
4054: PPUSH
4055: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4059: LD_ADDR_VAR 0 3
4063: PUSH
4064: LD_INT 22
4066: PUSH
4067: LD_INT 3
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: PUSH
4074: LD_INT 21
4076: PUSH
4077: LD_INT 1
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: PUSH
4084: LD_INT 25
4086: PUSH
4087: LD_INT 3
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: LIST
4098: PPUSH
4099: CALL_OW 69
4103: ST_TO_ADDR
// if not mech then
4104: LD_VAR 0 3
4108: NOT
4109: IFFALSE 4113
// exit ;
4111: GO 4161
// ComExitBuilding ( mech ) ;
4113: LD_VAR 0 3
4117: PPUSH
4118: CALL_OW 122
// wait ( 0 0$1 ) ;
4122: LD_INT 35
4124: PPUSH
4125: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4129: LD_VAR 0 3
4133: PUSH
4134: LD_INT 1
4136: ARRAY
4137: PPUSH
4138: LD_INT 5
4140: PPUSH
4141: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4145: LD_VAR 0 3
4149: PUSH
4150: LD_INT 2
4152: ARRAY
4153: PPUSH
4154: LD_INT 4
4156: PPUSH
4157: CALL_OW 180
// end ;
4161: PPOPN 3
4163: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4164: LD_INT 1
4166: PPUSH
4167: LD_INT 5
4169: PPUSH
4170: CALL_OW 292
4174: PUSH
4175: LD_INT 1
4177: PPUSH
4178: LD_INT 4
4180: PPUSH
4181: CALL_OW 292
4185: OR
4186: IFFALSE 4270
4188: GO 4190
4190: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4191: LD_INT 5
4193: PUSH
4194: LD_INT 4
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: PPUSH
4201: CALL_OW 85
// if IsOK ( Bobby ) then
4205: LD_EXP 2
4209: PPUSH
4210: CALL_OW 302
4214: IFFALSE 4250
// begin DialogueOn ;
4216: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4220: LD_EXP 2
4224: PPUSH
4225: LD_STRING DX2-Bobby-1
4227: PPUSH
4228: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4232: LD_EXP 1
4236: PPUSH
4237: LD_STRING DX2-JMM-1a
4239: PPUSH
4240: CALL_OW 88
// DialogueOff ;
4244: CALL_OW 7
// end else
4248: GO 4270
// begin DialogueOn ;
4250: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4254: LD_EXP 1
4258: PPUSH
4259: LD_STRING DX2-JMM-1
4261: PPUSH
4262: CALL_OW 88
// DialogueOff ;
4266: CALL_OW 7
// end ; end ;
4270: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4271: LD_INT 22
4273: PUSH
4274: LD_INT 1
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: PUSH
4281: LD_INT 23
4283: PUSH
4284: LD_INT 3
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: PUSH
4291: LD_INT 21
4293: PUSH
4294: LD_INT 2
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PUSH
4301: LD_INT 34
4303: PUSH
4304: LD_INT 42
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: PPUSH
4317: CALL_OW 69
4321: IFFALSE 4742
4323: GO 4325
4325: DISABLE
4326: LD_INT 0
4328: PPUSH
4329: PPUSH
4330: PPUSH
4331: PPUSH
4332: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4333: LD_ADDR_VAR 0 1
4337: PUSH
4338: LD_INT 22
4340: PUSH
4341: LD_INT 1
4343: PUSH
4344: EMPTY
4345: LIST
4346: LIST
4347: PUSH
4348: LD_INT 23
4350: PUSH
4351: LD_INT 3
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: PUSH
4358: LD_INT 21
4360: PUSH
4361: LD_INT 2
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: PUSH
4368: LD_INT 34
4370: PUSH
4371: LD_INT 42
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: PPUSH
4384: CALL_OW 69
4388: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4389: LD_ADDR_VAR 0 3
4393: PUSH
4394: LD_INT 22
4396: PUSH
4397: LD_INT 1
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: PUSH
4404: LD_INT 21
4406: PUSH
4407: LD_INT 1
4409: PUSH
4410: EMPTY
4411: LIST
4412: LIST
4413: PUSH
4414: LD_INT 26
4416: PUSH
4417: LD_INT 1
4419: PUSH
4420: EMPTY
4421: LIST
4422: LIST
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: LIST
4428: PPUSH
4429: CALL_OW 69
4433: PUSH
4434: LD_EXP 1
4438: PUSH
4439: LD_EXP 3
4443: PUSH
4444: LD_EXP 2
4448: PUSH
4449: EMPTY
4450: LIST
4451: LIST
4452: LIST
4453: DIFF
4454: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4455: LD_ADDR_VAR 0 4
4459: PUSH
4460: LD_INT 22
4462: PUSH
4463: LD_INT 1
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 21
4472: PUSH
4473: LD_INT 1
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: PUSH
4480: LD_INT 26
4482: PUSH
4483: LD_INT 2
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: LIST
4494: PPUSH
4495: CALL_OW 69
4499: PUSH
4500: LD_EXP 4
4504: PUSH
4505: EMPTY
4506: LIST
4507: DIFF
4508: ST_TO_ADDR
// if not tmp then
4509: LD_VAR 0 1
4513: NOT
4514: IFFALSE 4518
// exit ;
4516: GO 4742
// DialogueOn ;
4518: CALL_OW 6
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4522: LD_ADDR_VAR 0 2
4526: PUSH
4527: LD_VAR 0 1
4531: PUSH
4532: LD_INT 1
4534: ARRAY
4535: PPUSH
4536: CALL_OW 311
4540: ST_TO_ADDR
// if not speaker then
4541: LD_VAR 0 2
4545: NOT
4546: IFFALSE 4550
// exit ;
4548: GO 4742
// if speaker = JMM then
4550: LD_VAR 0 2
4554: PUSH
4555: LD_EXP 1
4559: EQUAL
4560: IFFALSE 4594
// begin if Lisa then
4562: LD_EXP 4
4566: IFFALSE 4580
// Say ( Lisa , DX2b-Lisa-1 ) ;
4568: LD_EXP 4
4572: PPUSH
4573: LD_STRING DX2b-Lisa-1
4575: PPUSH
4576: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4580: LD_EXP 1
4584: PPUSH
4585: LD_STRING DX2b-JMM-1
4587: PPUSH
4588: CALL_OW 88
// end else
4592: GO 4738
// begin Say ( JMM , DX2a-JMM-1 ) ;
4594: LD_EXP 1
4598: PPUSH
4599: LD_STRING DX2a-JMM-1
4601: PPUSH
4602: CALL_OW 88
// if speaker = Bobby then
4606: LD_VAR 0 2
4610: PUSH
4611: LD_EXP 2
4615: EQUAL
4616: IFFALSE 4630
// Say ( Bobby , DX2a-Bobby-1 ) ;
4618: LD_EXP 2
4622: PPUSH
4623: LD_STRING DX2a-Bobby-1
4625: PPUSH
4626: CALL_OW 88
// if speaker = Cyrus then
4630: LD_VAR 0 2
4634: PUSH
4635: LD_EXP 3
4639: EQUAL
4640: IFFALSE 4654
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4642: LD_EXP 3
4646: PPUSH
4647: LD_STRING DX2a-Cyrus-1
4649: PPUSH
4650: CALL_OW 88
// if speaker = Lisa then
4654: LD_VAR 0 2
4658: PUSH
4659: LD_EXP 4
4663: EQUAL
4664: IFFALSE 4678
// Say ( Lisa , DX2a-Lisa-1 ) ;
4666: LD_EXP 4
4670: PPUSH
4671: LD_STRING DX2a-Lisa-1
4673: PPUSH
4674: CALL_OW 88
// if speaker in temp1 then
4678: LD_VAR 0 2
4682: PUSH
4683: LD_VAR 0 3
4687: IN
4688: IFFALSE 4702
// Say ( speaker , DX2a-Sol1-1 ) ;
4690: LD_VAR 0 2
4694: PPUSH
4695: LD_STRING DX2a-Sol1-1
4697: PPUSH
4698: CALL_OW 88
// if speaker in temp2 then
4702: LD_VAR 0 2
4706: PUSH
4707: LD_VAR 0 4
4711: IN
4712: IFFALSE 4726
// Say ( speaker , DX2a-FSol1-1 ) ;
4714: LD_VAR 0 2
4718: PPUSH
4719: LD_STRING DX2a-FSol1-1
4721: PPUSH
4722: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4726: LD_EXP 1
4730: PPUSH
4731: LD_STRING DX2a-JMM-2
4733: PPUSH
4734: CALL_OW 88
// end ; DialogueOff ;
4738: CALL_OW 7
// end ;
4742: PPOPN 5
4744: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4745: LD_INT 1
4747: PPUSH
4748: CALL_OW 255
4752: PUSH
4753: LD_INT 1
4755: EQUAL
4756: PUSH
4757: LD_INT 10
4759: PPUSH
4760: CALL_OW 255
4764: PUSH
4765: LD_INT 1
4767: EQUAL
4768: OR
4769: IFFALSE 4829
4771: GO 4773
4773: DISABLE
// begin DialogueOn ;
4774: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4778: LD_EXP 1
4782: PPUSH
4783: LD_STRING D3-JMM-1
4785: PPUSH
4786: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4790: LD_EXP 9
4794: PPUSH
4795: LD_STRING D3-Pow-1
4797: PPUSH
4798: CALL_OW 94
// if IsOK ( Cyrus ) then
4802: LD_EXP 3
4806: PPUSH
4807: CALL_OW 302
4811: IFFALSE 4825
// Say ( Cyrus , D3-Cyrus-1 ) ;
4813: LD_EXP 3
4817: PPUSH
4818: LD_STRING D3-Cyrus-1
4820: PPUSH
4821: CALL_OW 88
// DialogueOff ;
4825: CALL_OW 7
// end ;
4829: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4830: LD_INT 1
4832: PPUSH
4833: CALL_OW 255
4837: PUSH
4838: LD_INT 1
4840: EQUAL
4841: PUSH
4842: LD_INT 10
4844: PPUSH
4845: CALL_OW 255
4849: PUSH
4850: LD_INT 1
4852: EQUAL
4853: AND
4854: IFFALSE 6237
4856: GO 4858
4858: DISABLE
4859: LD_INT 0
4861: PPUSH
4862: PPUSH
4863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4864: LD_ADDR_VAR 0 2
4868: PUSH
4869: LD_INT 22
4871: PUSH
4872: LD_INT 3
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: PUSH
4879: LD_INT 21
4881: PUSH
4882: LD_INT 1
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: PPUSH
4893: CALL_OW 69
4897: ST_TO_ADDR
// if tmp then
4898: LD_VAR 0 2
4902: IFFALSE 4963
// begin for i in tmp do
4904: LD_ADDR_VAR 0 3
4908: PUSH
4909: LD_VAR 0 2
4913: PUSH
4914: FOR_IN
4915: IFFALSE 4961
// begin if IsInUnit ( i ) then
4917: LD_VAR 0 3
4921: PPUSH
4922: CALL_OW 310
4926: IFFALSE 4937
// ComExitBuilding ( i ) ;
4928: LD_VAR 0 3
4932: PPUSH
4933: CALL_OW 122
// wait ( 0 0$1 ) ;
4937: LD_INT 35
4939: PPUSH
4940: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
4944: LD_VAR 0 3
4948: PPUSH
4949: LD_INT 54
4951: PPUSH
4952: LD_INT 17
4954: PPUSH
4955: CALL_OW 174
// end ;
4959: GO 4914
4961: POP
4962: POP
// end ; wait ( 0 0$03 ) ;
4963: LD_INT 105
4965: PPUSH
4966: CALL_OW 67
// DialogueOn ;
4970: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
4974: LD_EXP 1
4978: PPUSH
4979: LD_STRING D3a-JMM-1
4981: PPUSH
4982: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
4986: LD_EXP 9
4990: PPUSH
4991: LD_STRING D3a-Pow-1
4993: PPUSH
4994: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
4998: LD_EXP 1
5002: PPUSH
5003: LD_STRING D3a-JMM-2
5005: PPUSH
5006: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5010: LD_EXP 9
5014: PPUSH
5015: LD_STRING D3a-Pow-2
5017: PPUSH
5018: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5022: LD_EXP 1
5026: PPUSH
5027: LD_STRING D3a-JMM-3
5029: PPUSH
5030: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5034: LD_EXP 9
5038: PPUSH
5039: LD_STRING D3a-Pow-3
5041: PPUSH
5042: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5046: LD_EXP 1
5050: PPUSH
5051: LD_STRING D3a-JMM-4
5053: PPUSH
5054: CALL_OW 88
// DialogueOff ;
5058: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5062: LD_STRING M2
5064: PPUSH
5065: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5069: LD_EXP 1
5073: PPUSH
5074: LD_STRING D3b-JMM-1
5076: PPUSH
5077: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5081: LD_INT 35
5083: PPUSH
5084: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5088: LD_INT 22
5090: PPUSH
5091: LD_INT 22
5093: PUSH
5094: LD_INT 1
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PUSH
5101: LD_INT 25
5103: PUSH
5104: LD_INT 2
5106: PUSH
5107: EMPTY
5108: LIST
5109: LIST
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: PPUSH
5115: CALL_OW 70
5119: PUSH
5120: LD_INT 22
5122: PUSH
5123: LD_INT 3
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: PUSH
5130: LD_INT 21
5132: PUSH
5133: LD_INT 1
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PPUSH
5144: CALL_OW 69
5148: NOT
5149: AND
5150: IFFALSE 5081
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5152: LD_ADDR_VAR 0 1
5156: PUSH
5157: LD_INT 22
5159: PUSH
5160: LD_INT 1
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: LD_INT 23
5169: PUSH
5170: LD_INT 1
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: LD_INT 25
5179: PUSH
5180: LD_INT 2
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PUSH
5187: LD_INT 50
5189: PUSH
5190: EMPTY
5191: LIST
5192: PUSH
5193: LD_INT 56
5195: PUSH
5196: EMPTY
5197: LIST
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: PPUSH
5206: CALL_OW 69
5210: PUSH
5211: LD_EXP 1
5215: PUSH
5216: LD_EXP 5
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: DIFF
5225: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5226: LD_INT 35
5228: PPUSH
5229: CALL_OW 67
// until temp > 0 ;
5233: LD_VAR 0 1
5237: PUSH
5238: LD_INT 0
5240: GREATER
5241: IFFALSE 5152
// wait ( 0 0$5 ) ;
5243: LD_INT 175
5245: PPUSH
5246: CALL_OW 67
// PrepareRussianHeroes ;
5250: CALL 11588 0 0
// InGameOn ;
5254: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5258: LD_EXP 8
5262: PPUSH
5263: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5267: LD_EXP 1
5271: PUSH
5272: LD_VAR 0 1
5276: PUSH
5277: LD_INT 1
5279: ARRAY
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: PPUSH
5285: LD_EXP 8
5289: PPUSH
5290: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5294: LD_EXP 8
5298: PPUSH
5299: LD_VAR 0 1
5303: PUSH
5304: LD_INT 1
5306: ARRAY
5307: PPUSH
5308: CALL_OW 119
// Wait ( 0 0$02 ) ;
5312: LD_INT 70
5314: PPUSH
5315: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5319: LD_EXP 8
5323: PPUSH
5324: LD_STRING D4-Mikh-1
5326: PPUSH
5327: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5331: LD_VAR 0 1
5335: PUSH
5336: LD_INT 1
5338: ARRAY
5339: PPUSH
5340: CALL_OW 258
5344: PUSH
5345: LD_INT 1
5347: EQUAL
5348: IFFALSE 5366
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5350: LD_VAR 0 1
5354: PUSH
5355: LD_INT 1
5357: ARRAY
5358: PPUSH
5359: LD_STRING D4-Sol1-1
5361: PPUSH
5362: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5366: LD_VAR 0 1
5370: PUSH
5371: LD_INT 1
5373: ARRAY
5374: PPUSH
5375: CALL_OW 258
5379: PUSH
5380: LD_INT 2
5382: EQUAL
5383: IFFALSE 5401
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5385: LD_VAR 0 1
5389: PUSH
5390: LD_INT 1
5392: ARRAY
5393: PPUSH
5394: LD_STRING D4-FSol1-1
5396: PPUSH
5397: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5401: LD_EXP 8
5405: PPUSH
5406: LD_STRING D4-Mikh-2
5408: PPUSH
5409: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5413: LD_VAR 0 1
5417: PUSH
5418: LD_INT 1
5420: ARRAY
5421: PPUSH
5422: CALL_OW 258
5426: PUSH
5427: LD_INT 1
5429: EQUAL
5430: IFFALSE 5448
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5432: LD_VAR 0 1
5436: PUSH
5437: LD_INT 1
5439: ARRAY
5440: PPUSH
5441: LD_STRING D4-Sol1-2
5443: PPUSH
5444: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5448: LD_VAR 0 1
5452: PUSH
5453: LD_INT 1
5455: ARRAY
5456: PPUSH
5457: CALL_OW 258
5461: PUSH
5462: LD_INT 2
5464: EQUAL
5465: IFFALSE 5483
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5467: LD_VAR 0 1
5471: PUSH
5472: LD_INT 1
5474: ARRAY
5475: PPUSH
5476: LD_STRING D4-FSol1-2
5478: PPUSH
5479: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5483: LD_EXP 8
5487: PPUSH
5488: LD_STRING D4-Mikh-3
5490: PPUSH
5491: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5495: LD_VAR 0 1
5499: PUSH
5500: LD_INT 1
5502: ARRAY
5503: PPUSH
5504: CALL_OW 258
5508: PUSH
5509: LD_INT 1
5511: EQUAL
5512: IFFALSE 5530
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5514: LD_VAR 0 1
5518: PUSH
5519: LD_INT 1
5521: ARRAY
5522: PPUSH
5523: LD_STRING D4-Sol1-3
5525: PPUSH
5526: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5530: LD_VAR 0 1
5534: PUSH
5535: LD_INT 1
5537: ARRAY
5538: PPUSH
5539: CALL_OW 258
5543: PUSH
5544: LD_INT 2
5546: EQUAL
5547: IFFALSE 5565
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5549: LD_VAR 0 1
5553: PUSH
5554: LD_INT 1
5556: ARRAY
5557: PPUSH
5558: LD_STRING D4-FSol1-3
5560: PPUSH
5561: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5565: LD_EXP 8
5569: PPUSH
5570: LD_STRING D4-Mikh-4
5572: PPUSH
5573: CALL_OW 88
// case query ( Qs1 ) of 1 :
5577: LD_STRING Qs1
5579: PPUSH
5580: CALL_OW 97
5584: PUSH
5585: LD_INT 1
5587: DOUBLE
5588: EQUAL
5589: IFTRUE 5593
5591: GO 5628
5593: POP
// begin InGameOff ;
5594: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5598: LD_INT 1
5600: PPUSH
5601: LD_INT 6
5603: PPUSH
5604: LD_INT 2
5606: PPUSH
5607: LD_INT 1
5609: PPUSH
5610: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5614: LD_EXP 8
5618: PPUSH
5619: LD_INT 17
5621: PPUSH
5622: CALL_OW 113
// end ; 2 :
5626: GO 6221
5628: LD_INT 2
5630: DOUBLE
5631: EQUAL
5632: IFTRUE 5636
5634: GO 6186
5636: POP
// begin repeat wait ( 0 0$1 ) ;
5637: LD_INT 35
5639: PPUSH
5640: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5644: LD_VAR 0 1
5648: PUSH
5649: LD_INT 1
5651: ARRAY
5652: PPUSH
5653: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5657: LD_VAR 0 1
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: PPUSH
5666: LD_EXP 1
5670: PPUSH
5671: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5675: LD_EXP 8
5679: PPUSH
5680: LD_EXP 1
5684: PPUSH
5685: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5689: LD_EXP 1
5693: PPUSH
5694: LD_EXP 8
5698: PPUSH
5699: CALL_OW 296
5703: PUSH
5704: LD_INT 5
5706: LESS
5707: IFFALSE 5637
// ComTurnUnit ( Mikhail , JMM ) ;
5709: LD_EXP 8
5713: PPUSH
5714: LD_EXP 1
5718: PPUSH
5719: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5723: LD_EXP 1
5727: PPUSH
5728: LD_STRING D4b-JMM-1
5730: PPUSH
5731: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_STRING D4b-Mikh-1
5742: PPUSH
5743: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5747: LD_EXP 1
5751: PPUSH
5752: LD_STRING D4b-JMM-2
5754: PPUSH
5755: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5759: LD_EXP 8
5763: PPUSH
5764: LD_STRING D4b-Mikh-2
5766: PPUSH
5767: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5771: LD_EXP 1
5775: PPUSH
5776: LD_STRING D4b-JMM-3
5778: PPUSH
5779: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5783: LD_EXP 8
5787: PPUSH
5788: LD_STRING D4b-Mikh-3
5790: PPUSH
5791: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5795: LD_EXP 1
5799: PPUSH
5800: LD_STRING D4b-JMM-4
5802: PPUSH
5803: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5807: LD_EXP 8
5811: PPUSH
5812: LD_STRING D4b-Mikh-4
5814: PPUSH
5815: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5819: LD_EXP 1
5823: PPUSH
5824: LD_STRING D4b-JMM-5
5826: PPUSH
5827: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5831: LD_EXP 8
5835: PPUSH
5836: LD_STRING D4b-Mikh-5
5838: PPUSH
5839: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5843: LD_EXP 1
5847: PPUSH
5848: LD_STRING D4b-JMM-6
5850: PPUSH
5851: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5855: LD_EXP 8
5859: PPUSH
5860: LD_STRING D4b-Mikh-6
5862: PPUSH
5863: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5867: LD_EXP 1
5871: PPUSH
5872: LD_STRING D4b-JMM-7
5874: PPUSH
5875: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5879: LD_EXP 8
5883: PPUSH
5884: LD_STRING D4b-Mikh-7
5886: PPUSH
5887: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5891: LD_VAR 0 1
5895: PUSH
5896: LD_INT 1
5898: ARRAY
5899: PPUSH
5900: CALL_OW 258
5904: PUSH
5905: LD_INT 1
5907: EQUAL
5908: IFFALSE 5926
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5910: LD_VAR 0 1
5914: PUSH
5915: LD_INT 1
5917: ARRAY
5918: PPUSH
5919: LD_STRING D4b-Sol1-7
5921: PPUSH
5922: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5926: LD_VAR 0 1
5930: PUSH
5931: LD_INT 1
5933: ARRAY
5934: PPUSH
5935: CALL_OW 258
5939: PUSH
5940: LD_INT 2
5942: EQUAL
5943: IFFALSE 5961
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5945: LD_VAR 0 1
5949: PUSH
5950: LD_INT 1
5952: ARRAY
5953: PPUSH
5954: LD_STRING D4b-FSol1-7
5956: PPUSH
5957: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5961: LD_EXP 1
5965: PPUSH
5966: LD_STRING D4b-JMM-8
5968: PPUSH
5969: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5973: LD_VAR 0 1
5977: PUSH
5978: LD_INT 1
5980: ARRAY
5981: PPUSH
5982: CALL_OW 258
5986: PUSH
5987: LD_INT 1
5989: EQUAL
5990: IFFALSE 6008
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
5992: LD_VAR 0 1
5996: PUSH
5997: LD_INT 1
5999: ARRAY
6000: PPUSH
6001: LD_STRING D4b-Sol1-8
6003: PPUSH
6004: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6008: LD_VAR 0 1
6012: PUSH
6013: LD_INT 1
6015: ARRAY
6016: PPUSH
6017: CALL_OW 258
6021: PUSH
6022: LD_INT 2
6024: EQUAL
6025: IFFALSE 6043
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6027: LD_VAR 0 1
6031: PUSH
6032: LD_INT 1
6034: ARRAY
6035: PPUSH
6036: LD_STRING D4b-FSol1-8
6038: PPUSH
6039: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6043: LD_EXP 1
6047: PPUSH
6048: LD_STRING D4b-JMM-9
6050: PPUSH
6051: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6055: LD_EXP 8
6059: PPUSH
6060: LD_INT 1
6062: PPUSH
6063: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6067: LD_ADDR_VAR 0 3
6071: PUSH
6072: LD_INT 22
6074: PUSH
6075: LD_INT 1
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: PUSH
6082: EMPTY
6083: LIST
6084: PPUSH
6085: CALL_OW 69
6089: PUSH
6090: FOR_IN
6091: IFFALSE 6104
// ComFree ( i ) ;
6093: LD_VAR 0 3
6097: PPUSH
6098: CALL_OW 139
6102: GO 6090
6104: POP
6105: POP
// repeat wait ( 0 0$1 ) ;
6106: LD_INT 35
6108: PPUSH
6109: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6113: LD_EXP 8
6117: PPUSH
6118: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6122: LD_EXP 8
6126: PUSH
6127: LD_VAR 0 1
6131: PUSH
6132: LD_INT 1
6134: ARRAY
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PPUSH
6140: LD_INT 1
6142: PPUSH
6143: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6147: LD_EXP 8
6151: PPUSH
6152: CALL_OW 310
6156: IFFALSE 6106
// mikhailDepot = IsInUnit ( Mikhail ) ;
6158: LD_ADDR_EXP 23
6162: PUSH
6163: LD_EXP 8
6167: PPUSH
6168: CALL_OW 310
6172: ST_TO_ADDR
// InGameOff ;
6173: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6177: LD_STRING M3
6179: PPUSH
6180: CALL_OW 337
// end ; 3 :
6184: GO 6221
6186: LD_INT 3
6188: DOUBLE
6189: EQUAL
6190: IFTRUE 6194
6192: GO 6220
6194: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6195: LD_EXP 8
6199: PPUSH
6200: LD_INT 17
6202: PPUSH
6203: CALL_OW 113
// wait ( 0 0$3 ) ;
6207: LD_INT 105
6209: PPUSH
6210: CALL_OW 67
// InGameOff ;
6214: CALL_OW 9
// end ; end ;
6218: GO 6221
6220: POP
// PrepareTigers ;
6221: CALL 14438 0 0
// RussianTrap ;
6225: CALL 9984 0 0
// tigersRespawn = 1 ;
6229: LD_ADDR_EXP 30
6233: PUSH
6234: LD_INT 1
6236: ST_TO_ADDR
// end ;
6237: PPOPN 3
6239: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6240: LD_INT 1
6242: PPUSH
6243: CALL_OW 255
6247: PUSH
6248: LD_INT 1
6250: EQUAL
6251: PUSH
6252: LD_INT 10
6254: PPUSH
6255: CALL_OW 255
6259: PUSH
6260: LD_INT 1
6262: EQUAL
6263: AND
6264: PUSH
6265: LD_INT 1
6267: PPUSH
6268: CALL_OW 274
6272: PPUSH
6273: LD_INT 1
6275: PPUSH
6276: CALL_OW 275
6280: PUSH
6281: LD_INT 100
6283: GREATEREQUAL
6284: AND
6285: IFFALSE 6434
6287: GO 6289
6289: DISABLE
6290: LD_INT 0
6292: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6293: LD_INT 2100
6295: PPUSH
6296: LD_INT 4200
6298: PPUSH
6299: CALL_OW 12
6303: PUSH
6304: LD_INT 1050
6306: PLUS
6307: PPUSH
6308: CALL_OW 67
// PrepareCargoBays ;
6312: CALL 12721 0 0
// cargoRespawn = 1 ;
6316: LD_ADDR_EXP 28
6320: PUSH
6321: LD_INT 1
6323: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6324: LD_ADDR_VAR 0 1
6328: PUSH
6329: LD_EXP 15
6333: PUSH
6334: LD_EXP 16
6338: PUSH
6339: LD_EXP 17
6343: PUSH
6344: LD_EXP 18
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6355: LD_VAR 0 1
6359: PPUSH
6360: LD_INT 17
6362: PPUSH
6363: LD_INT 10
6365: PPUSH
6366: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6370: LD_VAR 0 1
6374: PPUSH
6375: LD_INT 36
6377: PPUSH
6378: LD_INT 13
6380: PPUSH
6381: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6385: LD_VAR 0 1
6389: PPUSH
6390: LD_INT 40
6392: PPUSH
6393: LD_INT 20
6395: PPUSH
6396: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6400: LD_VAR 0 1
6404: PPUSH
6405: LD_INT 53
6407: PPUSH
6408: LD_INT 16
6410: PPUSH
6411: CALL_OW 171
// wait ( 0 0$5 ) ;
6415: LD_INT 175
6417: PPUSH
6418: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6422: LD_EXP 17
6426: PPUSH
6427: LD_STRING D5-Rus2-1
6429: PPUSH
6430: CALL_OW 88
// end ;
6434: PPOPN 1
6436: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6437: LD_EXP 28
6441: PUSH
6442: LD_INT 1
6444: EQUAL
6445: IFFALSE 6600
6447: GO 6449
6449: DISABLE
6450: LD_INT 0
6452: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6453: LD_ADDR_VAR 0 1
6457: PUSH
6458: LD_INT 22
6460: PUSH
6461: LD_INT 3
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: PUSH
6468: LD_INT 21
6470: PUSH
6471: LD_INT 2
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PUSH
6478: LD_INT 34
6480: PUSH
6481: LD_INT 51
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: LIST
6492: PPUSH
6493: CALL_OW 69
6497: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6498: LD_INT 105
6500: PPUSH
6501: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6505: LD_VAR 0 1
6509: PPUSH
6510: LD_INT 3
6512: PUSH
6513: LD_INT 60
6515: PUSH
6516: EMPTY
6517: LIST
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: PPUSH
6523: CALL_OW 72
6527: PUSH
6528: LD_VAR 0 1
6532: PPUSH
6533: LD_INT 3
6535: PUSH
6536: LD_INT 24
6538: PUSH
6539: LD_INT 980
6541: PUSH
6542: EMPTY
6543: LIST
6544: LIST
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PPUSH
6550: CALL_OW 72
6554: OR
6555: IFFALSE 6498
// ComMoveXY ( cargos , 7 , 9 ) ;
6557: LD_VAR 0 1
6561: PPUSH
6562: LD_INT 7
6564: PPUSH
6565: LD_INT 9
6567: PPUSH
6568: CALL_OW 111
// cargoSee = 1 ;
6572: LD_ADDR_EXP 29
6576: PUSH
6577: LD_INT 1
6579: ST_TO_ADDR
// cargoEscape = 1 ;
6580: LD_ADDR_EXP 20
6584: PUSH
6585: LD_INT 1
6587: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6588: LD_EXP 17
6592: PPUSH
6593: LD_STRING D5-Rus2-1a
6595: PPUSH
6596: CALL_OW 88
// end ;
6600: PPOPN 1
6602: END
// every 0 0$1 trigger cargoEscape > 0 do
6603: LD_EXP 20
6607: PUSH
6608: LD_INT 0
6610: GREATER
6611: IFFALSE 6758
6613: GO 6615
6615: DISABLE
// begin enable ;
6616: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6617: LD_EXP 15
6621: PUSH
6622: LD_EXP 16
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: PPUSH
6631: LD_INT 13
6633: PPUSH
6634: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6638: LD_EXP 15
6642: PPUSH
6643: LD_INT 13
6645: PPUSH
6646: CALL_OW 308
6650: PUSH
6651: LD_EXP 17
6655: PPUSH
6656: LD_INT 13
6658: PPUSH
6659: CALL_OW 308
6663: OR
6664: IFFALSE 6698
// begin RemoveUnit ( cargo1 ) ;
6666: LD_EXP 15
6670: PPUSH
6671: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6675: LD_EXP 17
6679: PPUSH
6680: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6684: LD_ADDR_EXP 20
6688: PUSH
6689: LD_EXP 20
6693: PUSH
6694: LD_INT 1
6696: PLUS
6697: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6698: LD_EXP 16
6702: PPUSH
6703: LD_INT 13
6705: PPUSH
6706: CALL_OW 308
6710: PUSH
6711: LD_EXP 18
6715: PPUSH
6716: LD_INT 13
6718: PPUSH
6719: CALL_OW 308
6723: OR
6724: IFFALSE 6758
// begin RemoveUnit ( cargo2 ) ;
6726: LD_EXP 16
6730: PPUSH
6731: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6735: LD_EXP 18
6739: PPUSH
6740: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6744: LD_ADDR_EXP 20
6748: PUSH
6749: LD_EXP 20
6753: PUSH
6754: LD_INT 1
6756: PLUS
6757: ST_TO_ADDR
// end ; end ;
6758: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
6759: LD_EXP 20
6763: PUSH
6764: LD_INT 1
6766: GREATER
6767: IFFALSE 6924
6769: GO 6771
6771: DISABLE
6772: LD_INT 0
6774: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
6775: LD_INT 4
6777: PPUSH
6778: LD_INT 1
6780: PPUSH
6781: LD_INT 1
6783: PPUSH
6784: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6788: LD_INT 31
6790: PPUSH
6791: LD_INT 1
6793: PPUSH
6794: LD_INT 1
6796: PPUSH
6797: CALL_OW 324
// if IsOK ( Jerry ) then
6801: LD_EXP 7
6805: PPUSH
6806: CALL_OW 302
6810: IFFALSE 6826
// Say ( Jerry , D5a-Sol1-1 ) else
6812: LD_EXP 7
6816: PPUSH
6817: LD_STRING D5a-Sol1-1
6819: PPUSH
6820: CALL_OW 88
6824: GO 6912
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
6826: LD_ADDR_VAR 0 1
6830: PUSH
6831: LD_INT 22
6833: PUSH
6834: LD_INT 1
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: PUSH
6841: LD_INT 26
6843: PUSH
6844: LD_INT 1
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: PPUSH
6855: CALL_OW 69
6859: PUSH
6860: LD_EXP 1
6864: PUSH
6865: LD_EXP 2
6869: PUSH
6870: LD_EXP 3
6874: PUSH
6875: LD_EXP 5
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: DIFF
6886: ST_TO_ADDR
// if not speaker then
6887: LD_VAR 0 1
6891: NOT
6892: IFFALSE 6896
// exit ;
6894: GO 6924
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
6896: LD_VAR 0 1
6900: PUSH
6901: LD_INT 1
6903: ARRAY
6904: PPUSH
6905: LD_STRING D5a-Sol1-1
6907: PPUSH
6908: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
6912: LD_EXP 1
6916: PPUSH
6917: LD_STRING D5a-JMM-1
6919: PPUSH
6920: CALL_OW 88
// end ;
6924: PPOPN 1
6926: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
6927: LD_INT 1
6929: PPUSH
6930: CALL_OW 255
6934: PUSH
6935: LD_INT 3
6937: EQUAL
6938: PUSH
6939: LD_INT 1
6941: PPUSH
6942: CALL_OW 256
6946: PUSH
6947: LD_INT 1000
6949: LESS
6950: AND
6951: PUSH
6952: LD_INT 10
6954: PPUSH
6955: CALL_OW 255
6959: PUSH
6960: LD_INT 3
6962: EQUAL
6963: PUSH
6964: LD_INT 10
6966: PPUSH
6967: CALL_OW 256
6971: PUSH
6972: LD_INT 1000
6974: LESS
6975: AND
6976: OR
6977: IFFALSE 6994
6979: GO 6981
6981: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
6982: LD_EXP 1
6986: PPUSH
6987: LD_STRING D8-JMM-1
6989: PPUSH
6990: CALL_OW 88
// end ;
6994: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
6995: LD_EXP 8
6999: PPUSH
7000: CALL_OW 310
7004: PUSH
7005: LD_INT 1
7007: EQUAL
7008: PUSH
7009: LD_EXP 22
7013: PUSH
7014: LD_INT 3
7016: EQUAL
7017: NOT
7018: AND
7019: IFFALSE 7041
7021: GO 7023
7023: DISABLE
// begin mikhailInBase = 1 ;
7024: LD_ADDR_EXP 22
7028: PUSH
7029: LD_INT 1
7031: ST_TO_ADDR
// mikhailStatus = 1 ;
7032: LD_ADDR_EXP 21
7036: PUSH
7037: LD_INT 1
7039: ST_TO_ADDR
// enable ;
7040: ENABLE
// end ;
7041: END
// export function AskMikhail ; begin
7042: LD_INT 0
7044: PPUSH
// case query ( QMikh2 ) of 1 :
7045: LD_STRING QMikh2
7047: PPUSH
7048: CALL_OW 97
7052: PUSH
7053: LD_INT 1
7055: DOUBLE
7056: EQUAL
7057: IFTRUE 7061
7059: GO 7128
7061: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7062: LD_INT 1
7064: PPUSH
7065: LD_INT 6
7067: PPUSH
7068: LD_INT 2
7070: PPUSH
7071: LD_INT 1
7073: PPUSH
7074: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7078: LD_EXP 8
7082: PPUSH
7083: LD_INT 6
7085: PPUSH
7086: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7090: LD_EXP 8
7094: PPUSH
7095: CALL_OW 122
// wait ( 0 0$1 ) ;
7099: LD_INT 35
7101: PPUSH
7102: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7106: LD_EXP 8
7110: PPUSH
7111: LD_INT 17
7113: PPUSH
7114: CALL_OW 113
// mikhailInbase = 0 ;
7118: LD_ADDR_EXP 22
7122: PUSH
7123: LD_INT 0
7125: ST_TO_ADDR
// end ; 2 :
7126: GO 7369
7128: LD_INT 2
7130: DOUBLE
7131: EQUAL
7132: IFTRUE 7136
7134: GO 7309
7136: POP
// begin mikhailInBase = 2 ;
7137: LD_ADDR_EXP 22
7141: PUSH
7142: LD_INT 2
7144: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7145: LD_EXP 8
7149: PPUSH
7150: LD_INT 6
7152: PPUSH
7153: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7157: LD_EXP 8
7161: PPUSH
7162: CALL_OW 122
// wait ( 0 0$1 ) ;
7166: LD_INT 35
7168: PPUSH
7169: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7173: LD_EXP 8
7177: PPUSH
7178: LD_EXP 8
7182: PPUSH
7183: CALL_OW 250
7187: PUSH
7188: LD_INT 2
7190: PLUS
7191: PPUSH
7192: LD_EXP 8
7196: PPUSH
7197: CALL_OW 251
7201: PUSH
7202: LD_INT 2
7204: PLUS
7205: PPUSH
7206: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7210: LD_EXP 8
7214: PPUSH
7215: LD_EXP 8
7219: PPUSH
7220: CALL_OW 250
7224: PUSH
7225: LD_INT 1
7227: PLUS
7228: PPUSH
7229: LD_EXP 8
7233: PPUSH
7234: CALL_OW 251
7238: PUSH
7239: LD_INT 2
7241: PLUS
7242: PPUSH
7243: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7247: LD_EXP 8
7251: PPUSH
7252: LD_EXP 8
7256: PPUSH
7257: CALL_OW 250
7261: PUSH
7262: LD_INT 2
7264: PLUS
7265: PPUSH
7266: LD_EXP 8
7270: PPUSH
7271: CALL_OW 251
7275: PPUSH
7276: CALL_OW 171
// wait ( 0 0$5 ) ;
7280: LD_INT 175
7282: PPUSH
7283: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7287: LD_EXP 8
7291: PPUSH
7292: LD_INT 25
7294: PPUSH
7295: CALL_OW 113
// mikhailInBase = 4 ;
7299: LD_ADDR_EXP 22
7303: PUSH
7304: LD_INT 4
7306: ST_TO_ADDR
// end ; 3 :
7307: GO 7369
7309: LD_INT 3
7311: DOUBLE
7312: EQUAL
7313: IFTRUE 7317
7315: GO 7368
7317: POP
// begin SetSide ( Mikhail , 6 ) ;
7318: LD_EXP 8
7322: PPUSH
7323: LD_INT 6
7325: PPUSH
7326: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7330: LD_EXP 8
7334: PPUSH
7335: CALL_OW 122
// wait ( 0 0$1 ) ;
7339: LD_INT 35
7341: PPUSH
7342: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7346: LD_EXP 8
7350: PPUSH
7351: LD_INT 17
7353: PPUSH
7354: CALL_OW 113
// mikhailInbase = 3 ;
7358: LD_ADDR_EXP 22
7362: PUSH
7363: LD_INT 3
7365: ST_TO_ADDR
// end ; end ;
7366: GO 7369
7368: POP
// end ;
7369: LD_VAR 0 1
7373: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7374: LD_EXP 8
7378: PPUSH
7379: LD_INT 25
7381: PPUSH
7382: CALL_OW 308
7386: PUSH
7387: LD_EXP 22
7391: PUSH
7392: LD_INT 4
7394: EQUAL
7395: AND
7396: IFFALSE 7500
7398: GO 7400
7400: DISABLE
// begin enable ;
7401: ENABLE
// mikhailInBase = 1 ;
7402: LD_ADDR_EXP 22
7406: PUSH
7407: LD_INT 1
7409: ST_TO_ADDR
// InGameOn ;
7410: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7414: LD_INT 1
7416: PPUSH
7417: LD_INT 6
7419: PPUSH
7420: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7424: LD_INT 35
7426: PPUSH
7427: CALL_OW 67
// if Carry ( Mikhail ) then
7431: LD_EXP 8
7435: PPUSH
7436: CALL_OW 281
7440: IFFALSE 7451
// ComUnload ( Mikhail ) ;
7442: LD_EXP 8
7446: PPUSH
7447: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7451: LD_EXP 8
7455: PPUSH
7456: LD_INT 1
7458: PPUSH
7459: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7463: LD_EXP 8
7467: PPUSH
7468: CALL_OW 310
7472: IFFALSE 7424
// SetSide ( dep1 , 1 ) ;
7474: LD_INT 1
7476: PPUSH
7477: LD_INT 1
7479: PPUSH
7480: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7484: LD_EXP 8
7488: PPUSH
7489: LD_INT 1
7491: PPUSH
7492: CALL_OW 235
// InGameOff ;
7496: CALL_OW 9
// end ;
7500: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7501: LD_EXP 8
7505: PPUSH
7506: CALL_OW 310
7510: PUSH
7511: LD_EXP 22
7515: PUSH
7516: LD_INT 3
7518: EQUAL
7519: NOT
7520: AND
7521: IFFALSE 7656
7523: GO 7525
7525: DISABLE
// begin enable ;
7526: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7527: LD_INT 22
7529: PUSH
7530: LD_INT 1
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 21
7539: PUSH
7540: LD_INT 1
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 91
7549: PUSH
7550: LD_EXP 8
7554: PPUSH
7555: CALL_OW 310
7559: PUSH
7560: LD_INT 10
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: LIST
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: LIST
7572: PPUSH
7573: CALL_OW 69
7577: PUSH
7578: LD_INT 1
7580: EQUAL
7581: IFFALSE 7656
// begin mikhailStatus = 4 ;
7583: LD_ADDR_EXP 21
7587: PUSH
7588: LD_INT 4
7590: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7591: LD_INT 1
7593: PPUSH
7594: LD_INT 6
7596: PPUSH
7597: LD_INT 2
7599: PPUSH
7600: LD_INT 1
7602: PPUSH
7603: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7607: LD_EXP 8
7611: PPUSH
7612: LD_INT 6
7614: PPUSH
7615: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7619: LD_EXP 8
7623: PPUSH
7624: CALL_OW 122
// wait ( 0 0$1 ) ;
7628: LD_INT 35
7630: PPUSH
7631: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7635: LD_EXP 8
7639: PPUSH
7640: LD_INT 17
7642: PPUSH
7643: CALL_OW 113
// mikhailStatus = 3 ;
7647: LD_ADDR_EXP 21
7651: PUSH
7652: LD_INT 3
7654: ST_TO_ADDR
// disable ;
7655: DISABLE
// end ; end ;
7656: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7657: LD_EXP 1
7661: PPUSH
7662: LD_EXP 23
7666: PPUSH
7667: CALL_OW 296
7671: PUSH
7672: LD_INT 5
7674: LESS
7675: PUSH
7676: LD_EXP 21
7680: PUSH
7681: LD_INT 3
7683: EQUAL
7684: AND
7685: PUSH
7686: LD_EXP 22
7690: PUSH
7691: LD_INT 3
7693: EQUAL
7694: NOT
7695: AND
7696: IFFALSE 7918
7698: GO 7700
7700: DISABLE
7701: LD_INT 0
7703: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7704: LD_ADDR_VAR 0 1
7708: PUSH
7709: LD_INT 22
7711: PUSH
7712: LD_INT 1
7714: PUSH
7715: EMPTY
7716: LIST
7717: LIST
7718: PUSH
7719: LD_INT 21
7721: PUSH
7722: LD_INT 1
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PUSH
7729: LD_INT 26
7731: PUSH
7732: LD_INT 1
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: LIST
7743: PPUSH
7744: CALL_OW 69
7748: PUSH
7749: LD_EXP 1
7753: PUSH
7754: LD_EXP 5
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: DIFF
7763: ST_TO_ADDR
// DialogueOn ;
7764: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7768: LD_EXP 1
7772: PPUSH
7773: LD_STRING D7-JMM-1
7775: PPUSH
7776: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7780: LD_VAR 0 1
7784: PUSH
7785: LD_INT 1
7787: ARRAY
7788: PPUSH
7789: LD_STRING D7-Sol1-1
7791: PPUSH
7792: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7796: LD_EXP 1
7800: PPUSH
7801: LD_STRING D7-JMM-2
7803: PPUSH
7804: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7808: LD_VAR 0 1
7812: PUSH
7813: LD_INT 1
7815: ARRAY
7816: PPUSH
7817: LD_STRING D7-Sol1-2
7819: PPUSH
7820: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7824: LD_EXP 1
7828: PPUSH
7829: LD_STRING D7-JMM-3
7831: PPUSH
7832: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7836: LD_VAR 0 1
7840: PUSH
7841: LD_INT 1
7843: ARRAY
7844: PPUSH
7845: LD_STRING D7-Sol1-3
7847: PPUSH
7848: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7852: LD_EXP 3
7856: PPUSH
7857: CALL_OW 302
7861: PUSH
7862: LD_EXP 4
7866: PPUSH
7867: CALL_OW 302
7871: AND
7872: IFFALSE 7914
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7874: LD_EXP 3
7878: PPUSH
7879: LD_STRING D7-Cyrus-3
7881: PPUSH
7882: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7886: LD_VAR 0 1
7890: PUSH
7891: LD_INT 1
7893: ARRAY
7894: PPUSH
7895: LD_STRING D7-Sol1-4
7897: PPUSH
7898: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
7902: LD_EXP 4
7906: PPUSH
7907: LD_STRING D7-Lisa-4
7909: PPUSH
7910: CALL_OW 88
// end ; DialogueOff ;
7914: CALL_OW 7
// end ;
7918: PPOPN 1
7920: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
7921: LD_EXP 8
7925: PPUSH
7926: CALL_OW 303
7930: PUSH
7931: LD_EXP 21
7935: PUSH
7936: LD_INT 3
7938: EQUAL
7939: AND
7940: IFFALSE 7954
7942: GO 7944
7944: DISABLE
// begin enable ;
7945: ENABLE
// mikhailStatus = 2 ;
7946: LD_ADDR_EXP 21
7950: PUSH
7951: LD_INT 2
7953: ST_TO_ADDR
// end ;
7954: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
7955: LD_EXP 8
7959: PPUSH
7960: LD_INT 17
7962: PPUSH
7963: CALL_OW 308
7967: PUSH
7968: LD_EXP 8
7972: PPUSH
7973: CALL_OW 255
7977: PUSH
7978: LD_INT 6
7980: EQUAL
7981: AND
7982: IFFALSE 8015
7984: GO 7986
7986: DISABLE
// begin if not mikhailInBase = 3 then
7987: LD_EXP 22
7991: PUSH
7992: LD_INT 3
7994: EQUAL
7995: NOT
7996: IFFALSE 8006
// mikhailStatus = 3 ;
7998: LD_ADDR_EXP 21
8002: PUSH
8003: LD_INT 3
8005: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8006: LD_EXP 8
8010: PPUSH
8011: CALL_OW 64
// end ;
8015: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8016: LD_EXP 21
8020: PUSH
8021: LD_INT 3
8023: EQUAL
8024: PUSH
8025: LD_EXP 8
8029: PPUSH
8030: CALL_OW 255
8034: PUSH
8035: LD_INT 6
8037: EQUAL
8038: AND
8039: IFFALSE 8205
8041: GO 8043
8043: DISABLE
8044: LD_INT 0
8046: PPUSH
8047: PPUSH
// begin enable ;
8048: ENABLE
// if IsOk ( Mikhail ) then
8049: LD_EXP 8
8053: PPUSH
8054: CALL_OW 302
8058: IFFALSE 8205
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8060: LD_ADDR_VAR 0 2
8064: PUSH
8065: LD_EXP 8
8069: PPUSH
8070: LD_INT 22
8072: PUSH
8073: LD_INT 1
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PUSH
8080: LD_INT 21
8082: PUSH
8083: LD_INT 1
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: PPUSH
8094: CALL_OW 69
8098: PPUSH
8099: CALL 10176 0 2
8103: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8104: LD_VAR 0 2
8108: PPUSH
8109: LD_EXP 8
8113: PPUSH
8114: CALL_OW 296
8118: PUSH
8119: LD_INT 8
8121: LESS
8122: IFFALSE 8205
// begin if GetSex ( attacker ) = sex_male then
8124: LD_VAR 0 2
8128: PPUSH
8129: CALL_OW 258
8133: PUSH
8134: LD_INT 1
8136: EQUAL
8137: IFFALSE 8173
// begin disable ;
8139: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8140: LD_VAR 0 2
8144: PPUSH
8145: LD_STRING D7a-Sol1-1
8147: PPUSH
8148: CALL_OW 88
// wait ( 0 0$2 ) ;
8152: LD_INT 70
8154: PPUSH
8155: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8159: LD_VAR 0 2
8163: PPUSH
8164: LD_STRING D7a-Sol1-1a
8166: PPUSH
8167: CALL_OW 88
// end else
8171: GO 8205
// begin disable ;
8173: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8174: LD_VAR 0 2
8178: PPUSH
8179: LD_STRING D7a-FSol1-1
8181: PPUSH
8182: CALL_OW 88
// wait ( 0 0$2 ) ;
8186: LD_INT 70
8188: PPUSH
8189: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8193: LD_VAR 0 2
8197: PPUSH
8198: LD_STRING D7a-FSol1-1a
8200: PPUSH
8201: CALL_OW 88
// end ; end ; end ; end ;
8205: PPOPN 2
8207: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8208: LD_EXP 27
8212: PUSH
8213: LD_INT 1
8215: EQUAL
8216: PUSH
8217: LD_INT 22
8219: PPUSH
8220: LD_INT 22
8222: PUSH
8223: LD_INT 3
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: PUSH
8230: LD_INT 21
8232: PUSH
8233: LD_INT 1
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: PPUSH
8244: CALL_OW 70
8248: PUSH
8249: LD_INT 2
8251: GREATER
8252: AND
8253: PUSH
8254: LD_INT 22
8256: PPUSH
8257: LD_INT 22
8259: PUSH
8260: LD_INT 1
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: PUSH
8267: LD_INT 2
8269: PUSH
8270: LD_INT 21
8272: PUSH
8273: LD_INT 1
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PUSH
8280: LD_INT 59
8282: PUSH
8283: EMPTY
8284: LIST
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: LIST
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: PPUSH
8295: CALL_OW 70
8299: PUSH
8300: LD_INT 0
8302: EQUAL
8303: AND
8304: IFFALSE 8319
8306: GO 8308
8308: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8309: LD_INT 1
8311: PPUSH
8312: LD_INT 3
8314: PPUSH
8315: CALL_OW 235
// end ;
8319: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8320: LD_EXP 30
8324: PUSH
8325: LD_INT 1
8327: EQUAL
8328: PUSH
8329: LD_INT 22
8331: PUSH
8332: LD_INT 0
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PUSH
8339: LD_INT 25
8341: PUSH
8342: LD_INT 14
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PPUSH
8353: CALL_OW 69
8357: PUSH
8358: LD_INT 0
8360: EQUAL
8361: AND
8362: IFFALSE 8463
8364: GO 8366
8366: DISABLE
8367: LD_INT 0
8369: PPUSH
8370: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8371: LD_ADDR_VAR 0 2
8375: PUSH
8376: LD_INT 22
8378: PUSH
8379: LD_INT 1
8381: PUSH
8382: EMPTY
8383: LIST
8384: LIST
8385: PUSH
8386: LD_INT 21
8388: PUSH
8389: LD_INT 1
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: PUSH
8396: LD_INT 23
8398: PUSH
8399: LD_INT 1
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: LIST
8410: PPUSH
8411: CALL_OW 69
8415: ST_TO_ADDR
// for i in tmp do
8416: LD_ADDR_VAR 0 1
8420: PUSH
8421: LD_VAR 0 2
8425: PUSH
8426: FOR_IN
8427: IFFALSE 8454
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8429: LD_VAR 0 1
8433: PPUSH
8434: LD_INT 1
8436: PPUSH
8437: LD_INT 4
8439: PPUSH
8440: CALL_OW 12
8444: PPUSH
8445: LD_INT 300
8447: PPUSH
8448: CALL_OW 492
8452: GO 8426
8454: POP
8455: POP
// SetAchievement ( ACH_TIGER ) ;
8456: LD_STRING ACH_TIGER
8458: PPUSH
8459: CALL_OW 543
// end ;
8463: PPOPN 2
8465: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8466: LD_INT 22
8468: PUSH
8469: LD_INT 1
8471: PUSH
8472: EMPTY
8473: LIST
8474: LIST
8475: PUSH
8476: LD_INT 34
8478: PUSH
8479: LD_INT 51
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PPUSH
8490: CALL_OW 69
8494: PUSH
8495: LD_INT 2
8497: GREATEREQUAL
8498: IFFALSE 8510
8500: GO 8502
8502: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8503: LD_STRING ACH_CARGO
8505: PPUSH
8506: CALL_OW 543
8510: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8511: LD_INT 0
8513: PPUSH
8514: PPUSH
8515: PPUSH
8516: PPUSH
// for i = 1 to count do
8517: LD_ADDR_VAR 0 8
8521: PUSH
8522: DOUBLE
8523: LD_INT 1
8525: DEC
8526: ST_TO_ADDR
8527: LD_VAR 0 6
8531: PUSH
8532: FOR_TO
8533: IFFALSE 8614
// begin uc_side = side ;
8535: LD_ADDR_OWVAR 20
8539: PUSH
8540: LD_VAR 0 1
8544: ST_TO_ADDR
// uc_nation = nation ;
8545: LD_ADDR_OWVAR 21
8549: PUSH
8550: LD_VAR 0 2
8554: ST_TO_ADDR
// hc_gallery =  ;
8555: LD_ADDR_OWVAR 33
8559: PUSH
8560: LD_STRING 
8562: ST_TO_ADDR
// hc_name =  ;
8563: LD_ADDR_OWVAR 26
8567: PUSH
8568: LD_STRING 
8570: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8571: LD_INT 0
8573: PPUSH
8574: LD_VAR 0 5
8578: PPUSH
8579: LD_VAR 0 4
8583: PPUSH
8584: CALL_OW 380
// un = CreateHuman ;
8588: LD_ADDR_VAR 0 10
8592: PUSH
8593: CALL_OW 44
8597: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8598: LD_VAR 0 10
8602: PPUSH
8603: LD_VAR 0 3
8607: PPUSH
8608: CALL_OW 52
// end ;
8612: GO 8532
8614: POP
8615: POP
// end ;
8616: LD_VAR 0 7
8620: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8621: LD_INT 0
8623: PPUSH
8624: PPUSH
8625: PPUSH
// uc_side := GetSide ( b ) ;
8626: LD_ADDR_OWVAR 20
8630: PUSH
8631: LD_VAR 0 2
8635: PPUSH
8636: CALL_OW 255
8640: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8641: LD_ADDR_OWVAR 21
8645: PUSH
8646: LD_VAR 0 2
8650: PPUSH
8651: CALL_OW 248
8655: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8656: LD_INT 0
8658: PPUSH
8659: LD_INT 1
8661: PPUSH
8662: LD_VAR 0 1
8666: PPUSH
8667: CALL_OW 380
// un = CreateHuman ;
8671: LD_ADDR_VAR 0 4
8675: PUSH
8676: CALL_OW 44
8680: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8681: LD_ADDR_VAR 0 5
8685: PUSH
8686: LD_VAR 0 2
8690: PPUSH
8691: CALL_OW 254
8695: PUSH
8696: LD_INT 3
8698: MINUS
8699: ST_TO_ADDR
// if dir < 0 then
8700: LD_VAR 0 5
8704: PUSH
8705: LD_INT 0
8707: LESS
8708: IFFALSE 8724
// dir := 6 + dir ;
8710: LD_ADDR_VAR 0 5
8714: PUSH
8715: LD_INT 6
8717: PUSH
8718: LD_VAR 0 5
8722: PLUS
8723: ST_TO_ADDR
// SetDir ( un , dir ) ;
8724: LD_VAR 0 4
8728: PPUSH
8729: LD_VAR 0 5
8733: PPUSH
8734: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8738: LD_VAR 0 4
8742: PPUSH
8743: LD_VAR 0 2
8747: PPUSH
8748: CALL_OW 52
// end ;
8752: LD_VAR 0 3
8756: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8757: LD_INT 0
8759: PPUSH
8760: PPUSH
8761: PPUSH
8762: PPUSH
8763: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8764: LD_ADDR_VAR 0 7
8768: PUSH
8769: LD_INT 22
8771: PUSH
8772: LD_VAR 0 1
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PUSH
8781: LD_INT 25
8783: PUSH
8784: LD_INT 2
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: PUSH
8791: LD_INT 24
8793: PUSH
8794: LD_INT 1000
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: LIST
8805: PPUSH
8806: CALL_OW 69
8810: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8811: LD_ADDR_VAR 0 5
8815: PUSH
8816: LD_VAR 0 3
8820: PPUSH
8821: LD_INT 22
8823: PUSH
8824: LD_VAR 0 1
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: LD_INT 21
8835: PUSH
8836: LD_INT 3
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 3
8845: PUSH
8846: LD_INT 24
8848: PUSH
8849: LD_INT 1000
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: LIST
8864: PUSH
8865: EMPTY
8866: LIST
8867: PPUSH
8868: CALL_OW 70
8872: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8873: LD_VAR 0 5
8877: PUSH
8878: LD_INT 0
8880: GREATER
8881: PUSH
8882: LD_VAR 0 7
8886: PUSH
8887: LD_INT 0
8889: GREATER
8890: AND
8891: IFFALSE 8957
// begin for i in engineerOk_list do
8893: LD_ADDR_VAR 0 6
8897: PUSH
8898: LD_VAR 0 7
8902: PUSH
8903: FOR_IN
8904: IFFALSE 8955
// begin for j in buildings_list do
8906: LD_ADDR_VAR 0 8
8910: PUSH
8911: LD_VAR 0 5
8915: PUSH
8916: FOR_IN
8917: IFFALSE 8951
// begin AddComExitBuilding ( i ) ;
8919: LD_VAR 0 6
8923: PPUSH
8924: CALL_OW 182
// wait ( 0 0$1 ) ;
8928: LD_INT 35
8930: PPUSH
8931: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8935: LD_VAR 0 6
8939: PPUSH
8940: LD_VAR 0 8
8944: PPUSH
8945: CALL_OW 190
// end ;
8949: GO 8916
8951: POP
8952: POP
// end ;
8953: GO 8903
8955: POP
8956: POP
// end ; if buildings_list = 0 then
8957: LD_VAR 0 5
8961: PUSH
8962: LD_INT 0
8964: EQUAL
8965: IFFALSE 8998
// begin for i in engineerOK_list do
8967: LD_ADDR_VAR 0 6
8971: PUSH
8972: LD_VAR 0 7
8976: PUSH
8977: FOR_IN
8978: IFFALSE 8996
// begin ComEnterUnit ( i , building ) ;
8980: LD_VAR 0 6
8984: PPUSH
8985: LD_VAR 0 2
8989: PPUSH
8990: CALL_OW 120
// end ;
8994: GO 8977
8996: POP
8997: POP
// end ; end ;
8998: LD_VAR 0 4
9002: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
9003: LD_INT 0
9005: PPUSH
9006: PPUSH
9007: PPUSH
9008: PPUSH
9009: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9010: LD_ADDR_VAR 0 6
9014: PUSH
9015: LD_INT 22
9017: PUSH
9018: LD_VAR 0 1
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PUSH
9027: LD_INT 25
9029: PUSH
9030: LD_INT 4
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PUSH
9037: LD_INT 24
9039: PUSH
9040: LD_INT 250
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: LIST
9051: PPUSH
9052: CALL_OW 69
9056: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9057: LD_ADDR_VAR 0 9
9061: PUSH
9062: LD_VAR 0 3
9066: PPUSH
9067: LD_INT 22
9069: PUSH
9070: LD_VAR 0 1
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: LD_INT 21
9081: PUSH
9082: LD_INT 1
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: LD_INT 3
9091: PUSH
9092: LD_INT 24
9094: PUSH
9095: LD_INT 650
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: LIST
9110: PPUSH
9111: CALL_OW 70
9115: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9116: LD_VAR 0 9
9120: PUSH
9121: LD_INT 0
9123: GREATER
9124: PUSH
9125: LD_VAR 0 6
9129: PUSH
9130: LD_INT 0
9132: GREATER
9133: AND
9134: IFFALSE 9261
// begin for i = 1 to damageUnits do
9136: LD_ADDR_VAR 0 7
9140: PUSH
9141: DOUBLE
9142: LD_INT 1
9144: DEC
9145: ST_TO_ADDR
9146: LD_VAR 0 9
9150: PUSH
9151: FOR_TO
9152: IFFALSE 9176
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9154: LD_VAR 0 9
9158: PUSH
9159: LD_VAR 0 7
9163: ARRAY
9164: PPUSH
9165: LD_VAR 0 2
9169: PPUSH
9170: CALL_OW 113
9174: GO 9151
9176: POP
9177: POP
// for i in sci_list do
9178: LD_ADDR_VAR 0 7
9182: PUSH
9183: LD_VAR 0 6
9187: PUSH
9188: FOR_IN
9189: IFFALSE 9257
// begin ComExitBuilding ( i ) ;
9191: LD_VAR 0 7
9195: PPUSH
9196: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9200: LD_ADDR_VAR 0 8
9204: PUSH
9205: LD_VAR 0 2
9209: PPUSH
9210: LD_INT 22
9212: PUSH
9213: LD_VAR 0 1
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PPUSH
9222: CALL_OW 70
9226: PUSH
9227: FOR_IN
9228: IFFALSE 9253
// begin AddComHeal ( i , j ) ;
9230: LD_VAR 0 7
9234: PPUSH
9235: LD_VAR 0 8
9239: PPUSH
9240: CALL_OW 188
// wait ( 1 1$0 ) ;
9244: LD_INT 2100
9246: PPUSH
9247: CALL_OW 67
// end ;
9251: GO 9227
9253: POP
9254: POP
// end ;
9255: GO 9188
9257: POP
9258: POP
// end else
9259: GO 9275
// begin AddComEnterUnit ( sci_list , build ) ;
9261: LD_VAR 0 6
9265: PPUSH
9266: LD_VAR 0 4
9270: PPUSH
9271: CALL_OW 180
// end ; end ;
9275: LD_VAR 0 5
9279: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9280: LD_INT 0
9282: PPUSH
9283: PPUSH
9284: PPUSH
9285: PPUSH
9286: PPUSH
9287: PPUSH
9288: PPUSH
9289: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9290: LD_ADDR_VAR 0 7
9294: PUSH
9295: LD_VAR 0 3
9299: PPUSH
9300: LD_INT 22
9302: PUSH
9303: LD_VAR 0 1
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PUSH
9312: LD_INT 21
9314: PUSH
9315: LD_INT 2
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: PUSH
9322: LD_INT 24
9324: PUSH
9325: LD_INT 550
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: PUSH
9332: LD_INT 34
9334: PUSH
9335: LD_INT 46
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: PPUSH
9348: CALL_OW 70
9352: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9353: LD_ADDR_VAR 0 8
9357: PUSH
9358: LD_VAR 0 3
9362: PPUSH
9363: LD_INT 22
9365: PUSH
9366: LD_VAR 0 1
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: PUSH
9375: LD_INT 21
9377: PUSH
9378: LD_INT 2
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: LD_INT 34
9387: PUSH
9388: LD_INT 46
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PUSH
9395: LD_INT 3
9397: PUSH
9398: LD_INT 24
9400: PUSH
9401: LD_INT 550
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: PPUSH
9418: CALL_OW 70
9422: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9423: LD_ADDR_VAR 0 9
9427: PUSH
9428: LD_VAR 0 2
9432: PPUSH
9433: LD_INT 22
9435: PUSH
9436: LD_VAR 0 1
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: LD_INT 21
9447: PUSH
9448: LD_INT 2
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: PUSH
9455: LD_INT 34
9457: PUSH
9458: LD_INT 46
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: PUSH
9465: LD_INT 24
9467: PUSH
9468: LD_INT 1000
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: PUSH
9475: LD_INT 58
9477: PUSH
9478: EMPTY
9479: LIST
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: PPUSH
9488: CALL_OW 70
9492: ST_TO_ADDR
// for i in damageVehicle_list do
9493: LD_ADDR_VAR 0 5
9497: PUSH
9498: LD_VAR 0 8
9502: PUSH
9503: FOR_IN
9504: IFFALSE 9523
// mechanicInside_list = UnitsInside ( i ) ;
9506: LD_ADDR_VAR 0 10
9510: PUSH
9511: LD_VAR 0 5
9515: PPUSH
9516: CALL_OW 313
9520: ST_TO_ADDR
9521: GO 9503
9523: POP
9524: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9525: LD_ADDR_VAR 0 11
9529: PUSH
9530: LD_VAR 0 2
9534: PPUSH
9535: LD_INT 22
9537: PUSH
9538: LD_VAR 0 1
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 25
9549: PUSH
9550: LD_INT 3
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PPUSH
9561: CALL_OW 70
9565: ST_TO_ADDR
// if damageVehicle_list > 0 then
9566: LD_VAR 0 8
9570: PUSH
9571: LD_INT 0
9573: GREATER
9574: IFFALSE 9647
// begin for i in damageVehicle_list do
9576: LD_ADDR_VAR 0 5
9580: PUSH
9581: LD_VAR 0 8
9585: PUSH
9586: FOR_IN
9587: IFFALSE 9645
// begin for j in mechanicInside_list do
9589: LD_ADDR_VAR 0 6
9593: PUSH
9594: LD_VAR 0 10
9598: PUSH
9599: FOR_IN
9600: IFFALSE 9641
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9602: LD_VAR 0 8
9606: PPUSH
9607: LD_VAR 0 2
9611: PPUSH
9612: CALL_OW 113
// AddComExitVehicle ( j ) ;
9616: LD_VAR 0 6
9620: PPUSH
9621: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9625: LD_VAR 0 6
9629: PPUSH
9630: LD_VAR 0 5
9634: PPUSH
9635: CALL_OW 189
// end ;
9639: GO 9599
9641: POP
9642: POP
// end ;
9643: GO 9586
9645: POP
9646: POP
// end ; if emptyVehicle_list > 0 then
9647: LD_VAR 0 9
9651: PUSH
9652: LD_INT 0
9654: GREATER
9655: IFFALSE 9705
// begin for i in emptyVehicle_list do
9657: LD_ADDR_VAR 0 5
9661: PUSH
9662: LD_VAR 0 9
9666: PUSH
9667: FOR_IN
9668: IFFALSE 9703
// begin for j in mechanicOutside_list do
9670: LD_ADDR_VAR 0 6
9674: PUSH
9675: LD_VAR 0 11
9679: PUSH
9680: FOR_IN
9681: IFFALSE 9699
// begin AddComEnterUnit ( j , i ) ;
9683: LD_VAR 0 6
9687: PPUSH
9688: LD_VAR 0 5
9692: PPUSH
9693: CALL_OW 180
// end ;
9697: GO 9680
9699: POP
9700: POP
// end ;
9701: GO 9667
9703: POP
9704: POP
// end ; if VehicleOK_list > 0 then
9705: LD_VAR 0 7
9709: PUSH
9710: LD_INT 0
9712: GREATER
9713: IFFALSE 9747
// begin for i in VehicleOK_list do
9715: LD_ADDR_VAR 0 5
9719: PUSH
9720: LD_VAR 0 7
9724: PUSH
9725: FOR_IN
9726: IFFALSE 9745
// ComAgressiveMove ( i , 110 , 29 ) ;
9728: LD_VAR 0 5
9732: PPUSH
9733: LD_INT 110
9735: PPUSH
9736: LD_INT 29
9738: PPUSH
9739: CALL_OW 114
9743: GO 9725
9745: POP
9746: POP
// end ; end ;
9747: LD_VAR 0 4
9751: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9752: LD_INT 0
9754: PPUSH
9755: PPUSH
9756: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9757: LD_VAR 0 1
9761: PPUSH
9762: LD_INT 22
9764: PUSH
9765: LD_VAR 0 2
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: PUSH
9774: LD_INT 2
9776: PUSH
9777: LD_INT 21
9779: PUSH
9780: LD_INT 2
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: PUSH
9787: LD_INT 21
9789: PUSH
9790: LD_INT 1
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: LIST
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PPUSH
9806: CALL_OW 70
9810: PUSH
9811: LD_VAR 0 5
9815: GREATER
9816: IFFALSE 9948
// begin for i in defendersList do
9818: LD_ADDR_VAR 0 7
9822: PUSH
9823: LD_VAR 0 3
9827: PUSH
9828: FOR_IN
9829: IFFALSE 9944
// begin AddComExitBuilding ( i ) ;
9831: LD_VAR 0 7
9835: PPUSH
9836: CALL_OW 182
// wait ( 0 0$1 ) ;
9840: LD_INT 35
9842: PPUSH
9843: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9847: LD_ADDR_VAR 0 8
9851: PUSH
9852: LD_VAR 0 1
9856: PPUSH
9857: LD_INT 22
9859: PUSH
9860: LD_VAR 0 2
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: LD_INT 2
9871: PUSH
9872: LD_INT 21
9874: PUSH
9875: LD_INT 2
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: LD_INT 21
9884: PUSH
9885: LD_INT 1
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: LIST
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PPUSH
9901: CALL_OW 70
9905: PUSH
9906: FOR_IN
9907: IFFALSE 9940
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
9909: LD_VAR 0 7
9913: PPUSH
9914: LD_VAR 0 8
9918: PPUSH
9919: CALL_OW 250
9923: PPUSH
9924: LD_VAR 0 8
9928: PPUSH
9929: CALL_OW 251
9933: PPUSH
9934: CALL_OW 174
9938: GO 9906
9940: POP
9941: POP
// end ;
9942: GO 9828
9944: POP
9945: POP
// end else
9946: GO 9979
// begin for i in defendersList do
9948: LD_ADDR_VAR 0 7
9952: PUSH
9953: LD_VAR 0 3
9957: PUSH
9958: FOR_IN
9959: IFFALSE 9977
// ComEnterUnit ( i , build ) ;
9961: LD_VAR 0 7
9965: PPUSH
9966: LD_VAR 0 4
9970: PPUSH
9971: CALL_OW 120
9975: GO 9958
9977: POP
9978: POP
// end ; end ;
9979: LD_VAR 0 6
9983: RET
// export function RussianTrap ; var i ; begin
9984: LD_INT 0
9986: PPUSH
9987: PPUSH
// if GetSide ( Brian ) = 4 then
9988: LD_EXP 6
9992: PPUSH
9993: CALL_OW 255
9997: PUSH
9998: LD_INT 4
10000: EQUAL
10001: IFFALSE 10024
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10003: LD_EXP 6
10007: PUSH
10008: LD_EXP 7
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: PPUSH
10017: LD_INT 0
10019: PPUSH
10020: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10024: LD_ADDR_VAR 0 2
10028: PUSH
10029: LD_INT 22
10031: PUSH
10032: LD_INT 3
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: PUSH
10039: LD_INT 21
10041: PUSH
10042: LD_INT 1
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PPUSH
10053: CALL_OW 69
10057: PUSH
10058: FOR_IN
10059: IFFALSE 10169
// begin ComExitBuilding ( i ) ;
10061: LD_VAR 0 2
10065: PPUSH
10066: CALL_OW 122
// wait ( 0 0$1 ) ;
10070: LD_INT 35
10072: PPUSH
10073: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10077: LD_VAR 0 2
10081: PPUSH
10082: LD_INT 120
10084: PPUSH
10085: LD_INT 56
10087: PPUSH
10088: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10092: LD_VAR 0 2
10096: PPUSH
10097: LD_INT 111
10099: PPUSH
10100: LD_INT 37
10102: PPUSH
10103: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10107: LD_INT 33
10109: PPUSH
10110: CALL_OW 255
10114: PUSH
10115: LD_INT 3
10117: EQUAL
10118: PUSH
10119: LD_INT 33
10121: PPUSH
10122: CALL_OW 302
10126: AND
10127: IFFALSE 10143
// begin AddComEnterUnit ( i , arm2 ) ;
10129: LD_VAR 0 2
10133: PPUSH
10134: LD_INT 33
10136: PPUSH
10137: CALL_OW 180
// end else
10141: GO 10167
// begin AddComCrawl ( i ) ;
10143: LD_VAR 0 2
10147: PPUSH
10148: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10152: LD_VAR 0 2
10156: PPUSH
10157: LD_INT 109
10159: PPUSH
10160: LD_INT 30
10162: PPUSH
10163: CALL_OW 174
// end ; end ;
10167: GO 10058
10169: POP
10170: POP
// end ;
10171: LD_VAR 0 1
10175: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10176: LD_INT 0
10178: PPUSH
10179: PPUSH
10180: PPUSH
10181: PPUSH
10182: PPUSH
// nearest_dist = 1000 ;
10183: LD_ADDR_VAR 0 4
10187: PUSH
10188: LD_INT 1000
10190: ST_TO_ADDR
// nearest_un = un ;
10191: LD_ADDR_VAR 0 5
10195: PUSH
10196: LD_VAR 0 1
10200: ST_TO_ADDR
// for sold in units do
10201: LD_ADDR_VAR 0 6
10205: PUSH
10206: LD_VAR 0 2
10210: PUSH
10211: FOR_IN
10212: IFFALSE 10268
// begin dist = GetDistUnits ( un , sold ) ;
10214: LD_ADDR_VAR 0 7
10218: PUSH
10219: LD_VAR 0 1
10223: PPUSH
10224: LD_VAR 0 6
10228: PPUSH
10229: CALL_OW 296
10233: ST_TO_ADDR
// if dist < nearest_dist then
10234: LD_VAR 0 7
10238: PUSH
10239: LD_VAR 0 4
10243: LESS
10244: IFFALSE 10266
// begin nearest_un = sold ;
10246: LD_ADDR_VAR 0 5
10250: PUSH
10251: LD_VAR 0 6
10255: ST_TO_ADDR
// nearest_dist = dist ;
10256: LD_ADDR_VAR 0 4
10260: PUSH
10261: LD_VAR 0 7
10265: ST_TO_ADDR
// end ; end ;
10266: GO 10211
10268: POP
10269: POP
// result := nearest_un ;
10270: LD_ADDR_VAR 0 3
10274: PUSH
10275: LD_VAR 0 5
10279: ST_TO_ADDR
// end ;
10280: LD_VAR 0 3
10284: RET
// export function PrepareDifficulty ; begin
10285: LD_INT 0
10287: PPUSH
// if Difficulty = 1 then
10288: LD_OWVAR 67
10292: PUSH
10293: LD_INT 1
10295: EQUAL
10296: IFFALSE 10359
// begin RemoveUnit ( brw2 ) ;
10298: LD_INT 9
10300: PPUSH
10301: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10305: LD_INT 30
10307: PPUSH
10308: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10312: LD_INT 52
10314: PPUSH
10315: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10319: LD_INT 63
10321: PPUSH
10322: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10326: LD_INT 5
10328: PUSH
10329: LD_INT 4
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PPUSH
10336: LD_INT 60
10338: PPUSH
10339: CALL_OW 240
// RuSoldMinLevel = 0 ;
10343: LD_ADDR_EXP 13
10347: PUSH
10348: LD_INT 0
10350: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10351: LD_ADDR_EXP 14
10355: PUSH
10356: LD_INT 1
10358: ST_TO_ADDR
// end ; if Difficulty = 2 then
10359: LD_OWVAR 67
10363: PUSH
10364: LD_INT 2
10366: EQUAL
10367: IFFALSE 10409
// begin RemoveUnit ( brw4 ) ;
10369: LD_INT 52
10371: PPUSH
10372: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10376: LD_INT 5
10378: PUSH
10379: LD_INT 4
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PPUSH
10386: LD_INT 50
10388: PPUSH
10389: CALL_OW 240
// RuSoldMinLevel = 1 ;
10393: LD_ADDR_EXP 13
10397: PUSH
10398: LD_INT 1
10400: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10401: LD_ADDR_EXP 14
10405: PUSH
10406: LD_INT 2
10408: ST_TO_ADDR
// end ; if Difficulty = 3 then
10409: LD_OWVAR 67
10413: PUSH
10414: LD_INT 3
10416: EQUAL
10417: IFFALSE 10452
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10419: LD_INT 5
10421: PUSH
10422: LD_INT 4
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PPUSH
10429: LD_INT 40
10431: PPUSH
10432: CALL_OW 240
// RuSoldMinLevel = 2 ;
10436: LD_ADDR_EXP 13
10440: PUSH
10441: LD_INT 2
10443: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10444: LD_ADDR_EXP 14
10448: PUSH
10449: LD_INT 3
10451: ST_TO_ADDR
// end ; end ;
10452: LD_VAR 0 1
10456: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10457: LD_INT 0
10459: PPUSH
10460: PPUSH
10461: PPUSH
// tmp = [ ] ;
10462: LD_ADDR_VAR 0 5
10466: PUSH
10467: EMPTY
10468: ST_TO_ADDR
// if not vehicles then
10469: LD_VAR 0 1
10473: NOT
10474: IFFALSE 10478
// exit ;
10476: GO 10595
// for i in vehicles do
10478: LD_ADDR_VAR 0 4
10482: PUSH
10483: LD_VAR 0 1
10487: PUSH
10488: FOR_IN
10489: IFFALSE 10579
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10491: LD_ADDR_VAR 0 5
10495: PUSH
10496: LD_VAR 0 5
10500: PPUSH
10501: LD_INT 1
10503: PPUSH
10504: LD_VAR 0 4
10508: PPUSH
10509: CALL_OW 265
10513: PUSH
10514: LD_VAR 0 4
10518: PPUSH
10519: CALL_OW 262
10523: PUSH
10524: LD_VAR 0 4
10528: PPUSH
10529: CALL_OW 263
10533: PUSH
10534: LD_VAR 0 4
10538: PPUSH
10539: CALL_OW 264
10543: PUSH
10544: LD_VAR 0 4
10548: PPUSH
10549: CALL_OW 261
10553: PUSH
10554: LD_VAR 0 4
10558: PPUSH
10559: CALL_OW 256
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: PPUSH
10572: CALL_OW 2
10576: ST_TO_ADDR
// end ;
10577: GO 10488
10579: POP
10580: POP
// SaveVariable ( tmp , ident ) ;
10581: LD_VAR 0 5
10585: PPUSH
10586: LD_VAR 0 2
10590: PPUSH
10591: CALL_OW 39
// end ; end_of_file
10595: LD_VAR 0 3
10599: RET
// export function PrepareHeroes ; var plive ; begin
10600: LD_INT 0
10602: PPUSH
10603: PPUSH
// uc_side = 1 ;
10604: LD_ADDR_OWVAR 20
10608: PUSH
10609: LD_INT 1
10611: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10612: LD_ADDR_EXP 1
10616: PUSH
10617: LD_STRING 01_JMM
10619: PPUSH
10620: CALL_OW 34
10624: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10625: LD_ADDR_VAR 0 2
10629: PUSH
10630: LD_STRING 01_JMMLifePoints_1
10632: PPUSH
10633: LD_INT 1000
10635: PPUSH
10636: CALL_OW 30
10640: ST_TO_ADDR
// if plive < 250 then
10641: LD_VAR 0 2
10645: PUSH
10646: LD_INT 250
10648: LESS
10649: IFFALSE 10659
// plive := 300 ;
10651: LD_ADDR_VAR 0 2
10655: PUSH
10656: LD_INT 300
10658: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10659: LD_EXP 1
10663: PPUSH
10664: LD_VAR 0 2
10668: PPUSH
10669: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10673: LD_ADDR_EXP 9
10677: PUSH
10678: LD_STRING Powell
10680: PPUSH
10681: CALL_OW 25
10685: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10686: LD_ADDR_EXP 2
10690: PUSH
10691: LD_STRING 01_Bobby
10693: PPUSH
10694: CALL_OW 34
10698: ST_TO_ADDR
// if Bobby then
10699: LD_EXP 2
10703: IFFALSE 10753
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10705: LD_ADDR_VAR 0 2
10709: PUSH
10710: LD_STRING 01_BobbyLifePoints_1
10712: PPUSH
10713: LD_INT 1000
10715: PPUSH
10716: CALL_OW 30
10720: ST_TO_ADDR
// if plive < 250 then
10721: LD_VAR 0 2
10725: PUSH
10726: LD_INT 250
10728: LESS
10729: IFFALSE 10739
// plive := 300 ;
10731: LD_ADDR_VAR 0 2
10735: PUSH
10736: LD_INT 300
10738: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10739: LD_EXP 2
10743: PPUSH
10744: LD_VAR 0 2
10748: PPUSH
10749: CALL_OW 234
// end ; Cyrus = CreateCharacter ( 01_Cyrus ) ;
10753: LD_ADDR_EXP 3
10757: PUSH
10758: LD_STRING 01_Cyrus
10760: PPUSH
10761: CALL_OW 34
10765: ST_TO_ADDR
// if Cyrus then
10766: LD_EXP 3
10770: IFFALSE 10820
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10772: LD_ADDR_VAR 0 2
10776: PUSH
10777: LD_STRING 01_CyrusLifePoints_1
10779: PPUSH
10780: LD_INT 1000
10782: PPUSH
10783: CALL_OW 30
10787: ST_TO_ADDR
// if plive < 250 then
10788: LD_VAR 0 2
10792: PUSH
10793: LD_INT 250
10795: LESS
10796: IFFALSE 10806
// plive := 300 ;
10798: LD_ADDR_VAR 0 2
10802: PUSH
10803: LD_INT 300
10805: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
10806: LD_EXP 3
10810: PPUSH
10811: LD_VAR 0 2
10815: PPUSH
10816: CALL_OW 234
// end ; Khatam = NewCharacter ( Khatam ) ;
10820: LD_ADDR_EXP 5
10824: PUSH
10825: LD_STRING Khatam
10827: PPUSH
10828: CALL_OW 25
10832: ST_TO_ADDR
// uc_side = 4 ;
10833: LD_ADDR_OWVAR 20
10837: PUSH
10838: LD_INT 4
10840: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10841: LD_ADDR_EXP 4
10845: PUSH
10846: LD_STRING Lisa
10848: PPUSH
10849: CALL_OW 25
10853: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10854: LD_EXP 1
10858: PPUSH
10859: LD_INT 3
10861: PPUSH
10862: LD_INT 0
10864: PPUSH
10865: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10869: LD_EXP 2
10873: PPUSH
10874: LD_INT 3
10876: PPUSH
10877: LD_INT 0
10879: PPUSH
10880: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10884: LD_EXP 3
10888: PPUSH
10889: LD_INT 3
10891: PPUSH
10892: LD_INT 0
10894: PPUSH
10895: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10899: LD_EXP 4
10903: PPUSH
10904: LD_INT 5
10906: PPUSH
10907: LD_INT 0
10909: PPUSH
10910: CALL_OW 49
// ComCrawl ( Lisa ) ;
10914: LD_EXP 4
10918: PPUSH
10919: CALL_OW 137
// end ;
10923: LD_VAR 0 1
10927: RET
// export function PrepareLisSquad ; var i , un ; begin
10928: LD_INT 0
10930: PPUSH
10931: PPUSH
10932: PPUSH
// uc_side = 4 ;
10933: LD_ADDR_OWVAR 20
10937: PUSH
10938: LD_INT 4
10940: ST_TO_ADDR
// uc_nation = 1 ;
10941: LD_ADDR_OWVAR 21
10945: PUSH
10946: LD_INT 1
10948: ST_TO_ADDR
// hc_class := 2 ;
10949: LD_ADDR_OWVAR 28
10953: PUSH
10954: LD_INT 2
10956: ST_TO_ADDR
// hc_sex := sex_male ;
10957: LD_ADDR_OWVAR 27
10961: PUSH
10962: LD_INT 1
10964: ST_TO_ADDR
// hc_gallery :=  ;
10965: LD_ADDR_OWVAR 33
10969: PUSH
10970: LD_STRING 
10972: ST_TO_ADDR
// hc_name :=  ;
10973: LD_ADDR_OWVAR 26
10977: PUSH
10978: LD_STRING 
10980: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
10981: LD_ADDR_OWVAR 30
10985: PUSH
10986: LD_INT 0
10988: PUSH
10989: LD_INT 1
10991: PUSH
10992: LD_INT 0
10994: PUSH
10995: LD_INT 0
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11004: LD_ADDR_OWVAR 31
11008: PUSH
11009: LD_INT 1
11011: PUSH
11012: LD_INT 2
11014: PUSH
11015: LD_INT 0
11017: PUSH
11018: LD_INT 0
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: ST_TO_ADDR
// un := CreateHuman ;
11027: LD_ADDR_VAR 0 3
11031: PUSH
11032: CALL_OW 44
11036: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11037: LD_VAR 0 3
11041: PPUSH
11042: LD_INT 6
11044: PPUSH
11045: LD_INT 0
11047: PPUSH
11048: CALL_OW 49
// hc_sex := sex_female ;
11052: LD_ADDR_OWVAR 27
11056: PUSH
11057: LD_INT 2
11059: ST_TO_ADDR
// hc_gallery :=  ;
11060: LD_ADDR_OWVAR 33
11064: PUSH
11065: LD_STRING 
11067: ST_TO_ADDR
// hc_name :=  ;
11068: LD_ADDR_OWVAR 26
11072: PUSH
11073: LD_STRING 
11075: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11076: LD_ADDR_OWVAR 30
11080: PUSH
11081: LD_INT 0
11083: PUSH
11084: LD_INT 0
11086: PUSH
11087: LD_INT 0
11089: PUSH
11090: LD_INT 1
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11099: LD_ADDR_OWVAR 31
11103: PUSH
11104: LD_INT 0
11106: PUSH
11107: LD_INT 1
11109: PUSH
11110: LD_INT 0
11112: PUSH
11113: LD_INT 1
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: ST_TO_ADDR
// un := CreateHuman ;
11122: LD_ADDR_VAR 0 3
11126: PUSH
11127: CALL_OW 44
11131: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11132: LD_VAR 0 3
11136: PPUSH
11137: LD_INT 6
11139: PPUSH
11140: LD_INT 0
11142: PPUSH
11143: CALL_OW 49
// if not Bobby and not Cyrus then
11147: LD_EXP 2
11151: NOT
11152: PUSH
11153: LD_EXP 3
11157: NOT
11158: AND
11159: IFFALSE 11264
// begin hc_class := 1 ;
11161: LD_ADDR_OWVAR 28
11165: PUSH
11166: LD_INT 1
11168: ST_TO_ADDR
// hc_sex := sex_male ;
11169: LD_ADDR_OWVAR 27
11173: PUSH
11174: LD_INT 1
11176: ST_TO_ADDR
// hc_gallery :=  ;
11177: LD_ADDR_OWVAR 33
11181: PUSH
11182: LD_STRING 
11184: ST_TO_ADDR
// hc_name :=  ;
11185: LD_ADDR_OWVAR 26
11189: PUSH
11190: LD_STRING 
11192: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11193: LD_ADDR_OWVAR 30
11197: PUSH
11198: LD_INT 2
11200: PUSH
11201: LD_INT 3
11203: PUSH
11204: LD_INT 1
11206: PUSH
11207: LD_INT 0
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11216: LD_ADDR_OWVAR 31
11220: PUSH
11221: LD_INT 2
11223: PUSH
11224: LD_INT 3
11226: PUSH
11227: LD_INT 1
11229: PUSH
11230: LD_INT 0
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: ST_TO_ADDR
// un := CreateHuman ;
11239: LD_ADDR_VAR 0 3
11243: PUSH
11244: CALL_OW 44
11248: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11249: LD_VAR 0 3
11253: PPUSH
11254: LD_INT 31
11256: PPUSH
11257: LD_INT 0
11259: PPUSH
11260: CALL_OW 49
// end ; InitHc ;
11264: CALL_OW 19
// end ;
11268: LD_VAR 0 1
11272: RET
// export function PrepareOtherAmericans ; begin
11273: LD_INT 0
11275: PPUSH
// uc_side = 4 ;
11276: LD_ADDR_OWVAR 20
11280: PUSH
11281: LD_INT 4
11283: ST_TO_ADDR
// uc_nation = 1 ;
11284: LD_ADDR_OWVAR 21
11288: PUSH
11289: LD_INT 1
11291: ST_TO_ADDR
// hc_gallery =  ;
11292: LD_ADDR_OWVAR 33
11296: PUSH
11297: LD_STRING 
11299: ST_TO_ADDR
// hc_name = Tom Garvin ;
11300: LD_ADDR_OWVAR 26
11304: PUSH
11305: LD_STRING Tom Garvin
11307: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11308: LD_INT 1
11310: PPUSH
11311: LD_INT 1
11313: PPUSH
11314: LD_INT 1
11316: PPUSH
11317: LD_INT 2
11319: PPUSH
11320: CALL_OW 12
11324: PPUSH
11325: CALL_OW 380
// Brian = CreateHuman ;
11329: LD_ADDR_EXP 6
11333: PUSH
11334: CALL_OW 44
11338: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11339: LD_EXP 6
11343: PPUSH
11344: LD_INT 10
11346: PPUSH
11347: LD_INT 0
11349: PPUSH
11350: CALL_OW 49
// hc_name = Jerry White ;
11354: LD_ADDR_OWVAR 26
11358: PUSH
11359: LD_STRING Jerry White
11361: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11362: LD_INT 1
11364: PPUSH
11365: LD_INT 3
11367: PPUSH
11368: LD_INT 1
11370: PPUSH
11371: LD_INT 2
11373: PPUSH
11374: CALL_OW 12
11378: PPUSH
11379: CALL_OW 380
// Jerry = CreateHuman ;
11383: LD_ADDR_EXP 7
11387: PUSH
11388: CALL_OW 44
11392: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11393: LD_EXP 7
11397: PPUSH
11398: LD_INT 10
11400: PPUSH
11401: LD_INT 0
11403: PPUSH
11404: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11408: LD_EXP 6
11412: PUSH
11413: LD_EXP 7
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PPUSH
11422: CALL_OW 140
// end ;
11426: LD_VAR 0 1
11430: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11431: LD_INT 0
11433: PPUSH
11434: PPUSH
11435: PPUSH
// for i = 1 to 6 do
11436: LD_ADDR_VAR 0 2
11440: PUSH
11441: DOUBLE
11442: LD_INT 1
11444: DEC
11445: ST_TO_ADDR
11446: LD_INT 6
11448: PUSH
11449: FOR_TO
11450: IFFALSE 11544
// begin uc_side = 4 ;
11452: LD_ADDR_OWVAR 20
11456: PUSH
11457: LD_INT 4
11459: ST_TO_ADDR
// uc_nation = 1 ;
11460: LD_ADDR_OWVAR 21
11464: PUSH
11465: LD_INT 1
11467: ST_TO_ADDR
// hc_gallery =  ;
11468: LD_ADDR_OWVAR 33
11472: PUSH
11473: LD_STRING 
11475: ST_TO_ADDR
// hc_name =  ;
11476: LD_ADDR_OWVAR 26
11480: PUSH
11481: LD_STRING 
11483: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11484: LD_INT 0
11486: PPUSH
11487: LD_INT 1
11489: PPUSH
11490: LD_INT 4
11492: PPUSH
11493: CALL_OW 12
11497: PPUSH
11498: LD_INT 1
11500: PPUSH
11501: CALL_OW 380
// un = CreateHuman ;
11505: LD_ADDR_VAR 0 3
11509: PUSH
11510: CALL_OW 44
11514: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11515: LD_VAR 0 3
11519: PPUSH
11520: LD_INT 16
11522: PPUSH
11523: LD_INT 0
11525: PPUSH
11526: CALL_OW 49
// SetLives ( un , 1 ) ;
11530: LD_VAR 0 3
11534: PPUSH
11535: LD_INT 1
11537: PPUSH
11538: CALL_OW 234
// end ;
11542: GO 11449
11544: POP
11545: POP
// DyingSold = CreateHuman ;
11546: LD_ADDR_EXP 34
11550: PUSH
11551: CALL_OW 44
11555: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11556: LD_EXP 34
11560: PPUSH
11561: LD_INT 16
11563: PPUSH
11564: LD_INT 0
11566: PPUSH
11567: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11571: LD_EXP 34
11575: PPUSH
11576: LD_INT 250
11578: PPUSH
11579: CALL_OW 234
// end ; end_of_file
11583: LD_VAR 0 1
11587: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11588: LD_INT 0
11590: PPUSH
11591: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11592: LD_ADDR_VAR 0 2
11596: PUSH
11597: LD_INT 22
11599: PUSH
11600: LD_INT 1
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PUSH
11607: LD_INT 23
11609: PUSH
11610: LD_INT 1
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: PUSH
11617: LD_INT 25
11619: PUSH
11620: LD_INT 2
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: PUSH
11627: LD_INT 50
11629: PUSH
11630: EMPTY
11631: LIST
11632: PUSH
11633: LD_INT 56
11635: PUSH
11636: EMPTY
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: PPUSH
11646: CALL_OW 69
11650: PUSH
11651: LD_EXP 1
11655: PUSH
11656: EMPTY
11657: LIST
11658: DIFF
11659: ST_TO_ADDR
// uc_side = 6 ;
11660: LD_ADDR_OWVAR 20
11664: PUSH
11665: LD_INT 6
11667: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11668: LD_ADDR_EXP 8
11672: PUSH
11673: LD_STRING Mikhail
11675: PPUSH
11676: CALL_OW 25
11680: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11681: LD_EXP 8
11685: PPUSH
11686: LD_INT 3
11688: PPUSH
11689: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
11693: LD_EXP 8
11697: PPUSH
11698: LD_VAR 0 2
11702: PUSH
11703: LD_INT 1
11705: ARRAY
11706: PPUSH
11707: CALL_OW 250
11711: PPUSH
11712: LD_VAR 0 2
11716: PUSH
11717: LD_INT 1
11719: ARRAY
11720: PPUSH
11721: CALL_OW 251
11725: PPUSH
11726: LD_INT 5
11728: PPUSH
11729: LD_INT 1
11731: PPUSH
11732: CALL_OW 50
// end ;
11736: LD_VAR 0 1
11740: RET
// export function PrepareRussianCommander ; begin
11741: LD_INT 0
11743: PPUSH
// uc_side = 3 ;
11744: LD_ADDR_OWVAR 20
11748: PUSH
11749: LD_INT 3
11751: ST_TO_ADDR
// uc_nation = 3 ;
11752: LD_ADDR_OWVAR 21
11756: PUSH
11757: LD_INT 3
11759: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11760: LD_ADDR_EXP 19
11764: PUSH
11765: LD_STRING Natasza
11767: PPUSH
11768: CALL_OW 25
11772: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11773: LD_EXP 19
11777: PPUSH
11778: LD_INT 24
11780: PPUSH
11781: LD_INT 0
11783: PPUSH
11784: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11788: LD_EXP 19
11792: PPUSH
11793: LD_INT 56
11795: PPUSH
11796: LD_INT 16
11798: PPUSH
11799: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11803: LD_ADDR_EXP 24
11807: PUSH
11808: LD_EXP 24
11812: PUSH
11813: LD_EXP 19
11817: ADD
11818: ST_TO_ADDR
// end ;
11819: LD_VAR 0 1
11823: RET
// export function PrepareSouthBase ; var i , un ; begin
11824: LD_INT 0
11826: PPUSH
11827: PPUSH
11828: PPUSH
// for i = 1 to 2 do
11829: LD_ADDR_VAR 0 2
11833: PUSH
11834: DOUBLE
11835: LD_INT 1
11837: DEC
11838: ST_TO_ADDR
11839: LD_INT 2
11841: PUSH
11842: FOR_TO
11843: IFFALSE 11952
// begin uc_side = 3 ;
11845: LD_ADDR_OWVAR 20
11849: PUSH
11850: LD_INT 3
11852: ST_TO_ADDR
// uc_nation = 3 ;
11853: LD_ADDR_OWVAR 21
11857: PUSH
11858: LD_INT 3
11860: ST_TO_ADDR
// hc_gallery =  ;
11861: LD_ADDR_OWVAR 33
11865: PUSH
11866: LD_STRING 
11868: ST_TO_ADDR
// hc_name =  ;
11869: LD_ADDR_OWVAR 26
11873: PUSH
11874: LD_STRING 
11876: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11877: LD_INT 1
11879: PPUSH
11880: LD_INT 1
11882: PPUSH
11883: LD_EXP 13
11887: PPUSH
11888: LD_EXP 14
11892: PPUSH
11893: CALL_OW 12
11897: PPUSH
11898: CALL_OW 380
// hc_importance = 0 ;
11902: LD_ADDR_OWVAR 32
11906: PUSH
11907: LD_INT 0
11909: ST_TO_ADDR
// un = CreateHuman ;
11910: LD_ADDR_VAR 0 3
11914: PUSH
11915: CALL_OW 44
11919: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11920: LD_VAR 0 3
11924: PPUSH
11925: LD_INT 11
11927: PPUSH
11928: LD_INT 0
11930: PPUSH
11931: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11935: LD_VAR 0 3
11939: PPUSH
11940: LD_INT 111
11942: PPUSH
11943: LD_INT 38
11945: PPUSH
11946: CALL_OW 118
// end ;
11950: GO 11842
11952: POP
11953: POP
// for i = 1 to Difficulty do
11954: LD_ADDR_VAR 0 2
11958: PUSH
11959: DOUBLE
11960: LD_INT 1
11962: DEC
11963: ST_TO_ADDR
11964: LD_OWVAR 67
11968: PUSH
11969: FOR_TO
11970: IFFALSE 12053
// begin uc_side = 3 ;
11972: LD_ADDR_OWVAR 20
11976: PUSH
11977: LD_INT 3
11979: ST_TO_ADDR
// uc_nation = 3 ;
11980: LD_ADDR_OWVAR 21
11984: PUSH
11985: LD_INT 3
11987: ST_TO_ADDR
// hc_gallery =  ;
11988: LD_ADDR_OWVAR 33
11992: PUSH
11993: LD_STRING 
11995: ST_TO_ADDR
// hc_name =  ;
11996: LD_ADDR_OWVAR 26
12000: PUSH
12001: LD_STRING 
12003: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12004: LD_INT 0
12006: PPUSH
12007: LD_INT 3
12009: PPUSH
12010: LD_EXP 13
12014: PPUSH
12015: LD_EXP 14
12019: PPUSH
12020: CALL_OW 12
12024: PPUSH
12025: CALL_OW 380
// un = CreateHuman ;
12029: LD_ADDR_VAR 0 3
12033: PUSH
12034: CALL_OW 44
12038: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12039: LD_VAR 0 3
12043: PPUSH
12044: LD_INT 10
12046: PPUSH
12047: CALL_OW 52
// end ;
12051: GO 11969
12053: POP
12054: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
12055: LD_INT 3
12057: PPUSH
12058: LD_INT 3
12060: PPUSH
12061: LD_INT 33
12063: PPUSH
12064: LD_EXP 13
12068: PPUSH
12069: LD_EXP 14
12073: PPUSH
12074: CALL_OW 12
12078: PPUSH
12079: LD_INT 1
12081: PPUSH
12082: LD_INT 1
12084: PUSH
12085: LD_INT 1
12087: PPUSH
12088: LD_INT 2
12090: PPUSH
12091: CALL_OW 12
12095: PUSH
12096: LD_INT 1
12098: PPUSH
12099: LD_INT 2
12101: PPUSH
12102: CALL_OW 12
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: LIST
12111: PUSH
12112: LD_OWVAR 67
12116: ARRAY
12117: PPUSH
12118: CALL 8511 0 6
// for i in UnitsInside ( arm2 ) do
12122: LD_ADDR_VAR 0 2
12126: PUSH
12127: LD_INT 33
12129: PPUSH
12130: CALL_OW 313
12134: PUSH
12135: FOR_IN
12136: IFFALSE 12156
// southBaseDefenders = southBaseDefenders ^ i ;
12138: LD_ADDR_EXP 25
12142: PUSH
12143: LD_EXP 25
12147: PUSH
12148: LD_VAR 0 2
12152: ADD
12153: ST_TO_ADDR
12154: GO 12135
12156: POP
12157: POP
// end ;
12158: LD_VAR 0 1
12162: RET
// export function PrepareNorthBase ; var i , un ; begin
12163: LD_INT 0
12165: PPUSH
12166: PPUSH
12167: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
12168: LD_ADDR_VAR 0 2
12172: PUSH
12173: DOUBLE
12174: LD_INT 1
12176: DEC
12177: ST_TO_ADDR
12178: LD_INT 1
12180: PPUSH
12181: LD_INT 2
12183: PPUSH
12184: CALL_OW 12
12188: PUSH
12189: LD_INT 2
12191: PPUSH
12192: LD_INT 3
12194: PPUSH
12195: CALL_OW 12
12199: PUSH
12200: LD_INT 3
12202: PPUSH
12203: LD_INT 4
12205: PPUSH
12206: CALL_OW 12
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: LIST
12215: PUSH
12216: LD_OWVAR 67
12220: ARRAY
12221: PUSH
12222: FOR_TO
12223: IFFALSE 12309
// begin uc_side = 3 ;
12225: LD_ADDR_OWVAR 20
12229: PUSH
12230: LD_INT 3
12232: ST_TO_ADDR
// uc_nation = 3 ;
12233: LD_ADDR_OWVAR 21
12237: PUSH
12238: LD_INT 3
12240: ST_TO_ADDR
// hc_gallery =  ;
12241: LD_ADDR_OWVAR 33
12245: PUSH
12246: LD_STRING 
12248: ST_TO_ADDR
// hc_name =  ;
12249: LD_ADDR_OWVAR 26
12253: PUSH
12254: LD_STRING 
12256: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12257: LD_INT 0
12259: PPUSH
12260: LD_INT 1
12262: PPUSH
12263: LD_EXP 13
12267: PPUSH
12268: LD_EXP 14
12272: PPUSH
12273: CALL_OW 12
12277: PPUSH
12278: CALL_OW 380
// un = CreateHuman ;
12282: LD_ADDR_VAR 0 3
12286: PUSH
12287: CALL_OW 44
12291: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12292: LD_VAR 0 3
12296: PPUSH
12297: LD_INT 14
12299: PPUSH
12300: LD_INT 0
12302: PPUSH
12303: CALL_OW 49
// end ;
12307: GO 12222
12309: POP
12310: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12311: LD_INT 3
12313: PPUSH
12314: LD_INT 3
12316: PPUSH
12317: LD_INT 2
12319: PPUSH
12320: LD_EXP 13
12324: PPUSH
12325: LD_EXP 14
12329: PPUSH
12330: CALL_OW 12
12334: PPUSH
12335: LD_INT 1
12337: PPUSH
12338: LD_INT 1
12340: PPUSH
12341: LD_INT 2
12343: PPUSH
12344: CALL_OW 12
12348: PUSH
12349: LD_INT 1
12351: PPUSH
12352: LD_INT 3
12354: PPUSH
12355: CALL_OW 12
12359: PUSH
12360: LD_INT 1
12362: PPUSH
12363: LD_INT 3
12365: PPUSH
12366: CALL_OW 12
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: PUSH
12376: LD_OWVAR 67
12380: ARRAY
12381: PPUSH
12382: CALL 8511 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12386: LD_INT 3
12388: PPUSH
12389: LD_INT 3
12391: PPUSH
12392: LD_INT 23
12394: PPUSH
12395: LD_EXP 13
12399: PPUSH
12400: LD_EXP 14
12404: PPUSH
12405: CALL_OW 12
12409: PPUSH
12410: LD_INT 4
12412: PPUSH
12413: LD_INT 0
12415: PUSH
12416: LD_INT 1
12418: PUSH
12419: LD_INT 2
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: LIST
12426: PUSH
12427: LD_OWVAR 67
12431: ARRAY
12432: PPUSH
12433: CALL 8511 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12437: LD_INT 3
12439: PPUSH
12440: LD_INT 3
12442: PPUSH
12443: LD_INT 1
12445: PPUSH
12446: LD_EXP 13
12450: PPUSH
12451: LD_EXP 14
12455: PPUSH
12456: CALL_OW 12
12460: PPUSH
12461: LD_INT 2
12463: PPUSH
12464: LD_INT 1
12466: PUSH
12467: LD_INT 2
12469: PUSH
12470: LD_INT 2
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: LIST
12477: PUSH
12478: LD_OWVAR 67
12482: ARRAY
12483: PPUSH
12484: CALL 8511 0 6
// for i in UnitsInside ( arm1 ) do
12488: LD_ADDR_VAR 0 2
12492: PUSH
12493: LD_INT 2
12495: PPUSH
12496: CALL_OW 313
12500: PUSH
12501: FOR_IN
12502: IFFALSE 12522
// northBaseDefenders = northBaseDefenders ^ i ;
12504: LD_ADDR_EXP 24
12508: PUSH
12509: LD_EXP 24
12513: PUSH
12514: LD_VAR 0 2
12518: ADD
12519: ST_TO_ADDR
12520: GO 12501
12522: POP
12523: POP
// end ;
12524: LD_VAR 0 1
12528: RET
// export function PrepareOtherRussians ; var i , un ; begin
12529: LD_INT 0
12531: PPUSH
12532: PPUSH
12533: PPUSH
// for i = 1 to 2 do
12534: LD_ADDR_VAR 0 2
12538: PUSH
12539: DOUBLE
12540: LD_INT 1
12542: DEC
12543: ST_TO_ADDR
12544: LD_INT 2
12546: PUSH
12547: FOR_TO
12548: IFFALSE 12649
// begin uc_side = 3 ;
12550: LD_ADDR_OWVAR 20
12554: PUSH
12555: LD_INT 3
12557: ST_TO_ADDR
// uc_nation = 3 ;
12558: LD_ADDR_OWVAR 21
12562: PUSH
12563: LD_INT 3
12565: ST_TO_ADDR
// hc_gallery =  ;
12566: LD_ADDR_OWVAR 33
12570: PUSH
12571: LD_STRING 
12573: ST_TO_ADDR
// hc_name =  ;
12574: LD_ADDR_OWVAR 26
12578: PUSH
12579: LD_STRING 
12581: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12582: LD_INT 0
12584: PPUSH
12585: LD_INT 1
12587: PPUSH
12588: LD_EXP 13
12592: PPUSH
12593: LD_EXP 14
12597: PPUSH
12598: CALL_OW 12
12602: PPUSH
12603: CALL_OW 380
// un = CreateHuman ;
12607: LD_ADDR_VAR 0 3
12611: PUSH
12612: CALL_OW 44
12616: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12617: LD_VAR 0 3
12621: PPUSH
12622: LD_INT 9
12624: PPUSH
12625: LD_INT 0
12627: PPUSH
12628: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12632: LD_VAR 0 3
12636: PPUSH
12637: LD_INT 80
12639: PPUSH
12640: LD_INT 73
12642: PPUSH
12643: CALL_OW 118
// end ;
12647: GO 12547
12649: POP
12650: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12651: LD_ADDR_VAR 0 2
12655: PUSH
12656: LD_INT 22
12658: PUSH
12659: LD_INT 3
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PUSH
12666: LD_INT 30
12668: PUSH
12669: LD_INT 31
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PPUSH
12680: CALL_OW 69
12684: PUSH
12685: FOR_IN
12686: IFFALSE 12714
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12688: LD_EXP 13
12692: PPUSH
12693: LD_EXP 14
12697: PPUSH
12698: CALL_OW 12
12702: PPUSH
12703: LD_VAR 0 2
12707: PPUSH
12708: CALL 8621 0 2
12712: GO 12685
12714: POP
12715: POP
// end ;
12716: LD_VAR 0 1
12720: RET
// export function PrepareCargoBays ; begin
12721: LD_INT 0
12723: PPUSH
// uc_side = 3 ;
12724: LD_ADDR_OWVAR 20
12728: PUSH
12729: LD_INT 3
12731: ST_TO_ADDR
// uc_nation = 3 ;
12732: LD_ADDR_OWVAR 21
12736: PUSH
12737: LD_INT 3
12739: ST_TO_ADDR
// vc_engine = 1 ;
12740: LD_ADDR_OWVAR 39
12744: PUSH
12745: LD_INT 1
12747: ST_TO_ADDR
// vc_control = 1 ;
12748: LD_ADDR_OWVAR 38
12752: PUSH
12753: LD_INT 1
12755: ST_TO_ADDR
// vc_weapon = 51 ;
12756: LD_ADDR_OWVAR 40
12760: PUSH
12761: LD_INT 51
12763: ST_TO_ADDR
// vc_chassis = 22 ;
12764: LD_ADDR_OWVAR 37
12768: PUSH
12769: LD_INT 22
12771: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12772: LD_ADDR_EXP 15
12776: PUSH
12777: CALL_OW 45
12781: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12782: LD_ADDR_EXP 16
12786: PUSH
12787: CALL_OW 45
12791: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12792: LD_EXP 15
12796: PPUSH
12797: LD_INT 13
12799: PPUSH
12800: LD_INT 0
12802: PPUSH
12803: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12807: LD_EXP 16
12811: PPUSH
12812: LD_INT 13
12814: PPUSH
12815: LD_INT 0
12817: PPUSH
12818: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12822: LD_EXP 15
12826: PPUSH
12827: LD_INT 2
12829: PPUSH
12830: LD_INT 70
12832: PUSH
12833: LD_INT 50
12835: PUSH
12836: LD_INT 30
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: LIST
12843: PUSH
12844: LD_OWVAR 67
12848: ARRAY
12849: PPUSH
12850: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12854: LD_EXP 16
12858: PPUSH
12859: LD_INT 2
12861: PPUSH
12862: LD_INT 70
12864: PUSH
12865: LD_INT 50
12867: PUSH
12868: LD_INT 30
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: LIST
12875: PUSH
12876: LD_OWVAR 67
12880: ARRAY
12881: PPUSH
12882: CALL_OW 291
// hc_gallery =  ;
12886: LD_ADDR_OWVAR 33
12890: PUSH
12891: LD_STRING 
12893: ST_TO_ADDR
// hc_name =  ;
12894: LD_ADDR_OWVAR 26
12898: PUSH
12899: LD_STRING 
12901: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12902: LD_INT 1
12904: PPUSH
12905: LD_INT 3
12907: PPUSH
12908: LD_INT 1
12910: PPUSH
12911: LD_INT 2
12913: PPUSH
12914: CALL_OW 12
12918: PPUSH
12919: CALL_OW 380
// driver1 = CreateHuman ;
12923: LD_ADDR_EXP 17
12927: PUSH
12928: CALL_OW 44
12932: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12933: LD_EXP 17
12937: PPUSH
12938: LD_EXP 15
12942: PPUSH
12943: CALL_OW 52
// hc_name = Nikolai Andreyev ;
12947: LD_ADDR_OWVAR 26
12951: PUSH
12952: LD_STRING Nikolai Andreyev
12954: ST_TO_ADDR
// driver2 = CreateHuman ;
12955: LD_ADDR_EXP 18
12959: PUSH
12960: CALL_OW 44
12964: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
12965: LD_EXP 18
12969: PPUSH
12970: LD_EXP 16
12974: PPUSH
12975: CALL_OW 52
// end ;
12979: LD_VAR 0 1
12983: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
12984: LD_INT 0
12986: PPUSH
12987: PPUSH
12988: PPUSH
12989: PPUSH
12990: PPUSH
12991: PPUSH
12992: PPUSH
// uc_side = 3 ;
12993: LD_ADDR_OWVAR 20
12997: PUSH
12998: LD_INT 3
13000: ST_TO_ADDR
// uc_nation = 3 ;
13001: LD_ADDR_OWVAR 21
13005: PUSH
13006: LD_INT 3
13008: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
13009: LD_ADDR_VAR 0 4
13013: PUSH
13014: DOUBLE
13015: LD_INT 1
13017: DEC
13018: ST_TO_ADDR
13019: LD_VAR 0 1
13023: PUSH
13024: LD_INT 1
13026: PPUSH
13027: LD_INT 3
13029: PPUSH
13030: CALL_OW 12
13034: PLUS
13035: PUSH
13036: FOR_TO
13037: IFFALSE 13214
// begin vc_engine = 1 ;
13039: LD_ADDR_OWVAR 39
13043: PUSH
13044: LD_INT 1
13046: ST_TO_ADDR
// vc_control = 1 ;
13047: LD_ADDR_OWVAR 38
13051: PUSH
13052: LD_INT 1
13054: ST_TO_ADDR
// vc_weapon = 42 ;
13055: LD_ADDR_OWVAR 40
13059: PUSH
13060: LD_INT 42
13062: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
13063: LD_ADDR_OWVAR 37
13067: PUSH
13068: LD_INT 21
13070: PUSH
13071: LD_INT 22
13073: PUSH
13074: LD_INT 22
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: PUSH
13082: LD_OWVAR 67
13086: ARRAY
13087: ST_TO_ADDR
// veh = CreateVehicle ;
13088: LD_ADDR_VAR 0 5
13092: PUSH
13093: CALL_OW 45
13097: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13098: LD_VAR 0 5
13102: PPUSH
13103: LD_VAR 0 2
13107: PPUSH
13108: LD_INT 0
13110: PPUSH
13111: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13115: LD_ADDR_EXP 26
13119: PUSH
13120: LD_EXP 26
13124: PUSH
13125: LD_VAR 0 5
13129: ADD
13130: ST_TO_ADDR
// hc_gallery =  ;
13131: LD_ADDR_OWVAR 33
13135: PUSH
13136: LD_STRING 
13138: ST_TO_ADDR
// hc_name =  ;
13139: LD_ADDR_OWVAR 26
13143: PUSH
13144: LD_STRING 
13146: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13147: LD_INT 0
13149: PPUSH
13150: LD_INT 3
13152: PPUSH
13153: LD_EXP 13
13157: PPUSH
13158: LD_EXP 14
13162: PPUSH
13163: CALL_OW 12
13167: PPUSH
13168: CALL_OW 380
// un = CreateHuman ;
13172: LD_ADDR_VAR 0 6
13176: PUSH
13177: CALL_OW 44
13181: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13182: LD_VAR 0 6
13186: PPUSH
13187: LD_VAR 0 5
13191: PPUSH
13192: CALL_OW 52
// attackGroup = attackGroup ^ un ;
13196: LD_ADDR_EXP 26
13200: PUSH
13201: LD_EXP 26
13205: PUSH
13206: LD_VAR 0 6
13210: ADD
13211: ST_TO_ADDR
// end ;
13212: GO 13036
13214: POP
13215: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13216: LD_INT 0
13218: PPUSH
13219: LD_INT 2
13221: PPUSH
13222: LD_EXP 13
13226: PPUSH
13227: LD_EXP 14
13231: PPUSH
13232: CALL_OW 12
13236: PPUSH
13237: CALL_OW 380
// un = CreateHuman ;
13241: LD_ADDR_VAR 0 6
13245: PUSH
13246: CALL_OW 44
13250: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13251: LD_ADDR_VAR 0 4
13255: PUSH
13256: DOUBLE
13257: LD_INT 1
13259: DEC
13260: ST_TO_ADDR
13261: LD_VAR 0 1
13265: PUSH
13266: LD_INT 2
13268: PUSH
13269: LD_INT 2
13271: MUL
13272: PLUS
13273: PUSH
13274: FOR_TO
13275: IFFALSE 13363
// begin hc_gallery =  ;
13277: LD_ADDR_OWVAR 33
13281: PUSH
13282: LD_STRING 
13284: ST_TO_ADDR
// hc_name =  ;
13285: LD_ADDR_OWVAR 26
13289: PUSH
13290: LD_STRING 
13292: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13293: LD_INT 1
13295: PPUSH
13296: LD_INT 1
13298: PPUSH
13299: LD_EXP 13
13303: PPUSH
13304: LD_EXP 14
13308: PPUSH
13309: CALL_OW 12
13313: PPUSH
13314: CALL_OW 380
// un = CreateHuman ;
13318: LD_ADDR_VAR 0 6
13322: PUSH
13323: CALL_OW 44
13327: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13328: LD_VAR 0 6
13332: PPUSH
13333: LD_VAR 0 2
13337: PPUSH
13338: LD_INT 0
13340: PPUSH
13341: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13345: LD_ADDR_EXP 26
13349: PUSH
13350: LD_EXP 26
13354: PUSH
13355: LD_VAR 0 6
13359: ADD
13360: ST_TO_ADDR
// end ;
13361: GO 13274
13363: POP
13364: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13365: LD_ADDR_VAR 0 7
13369: PUSH
13370: LD_INT 26
13372: PPUSH
13373: LD_INT 22
13375: PUSH
13376: LD_INT 3
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 21
13385: PUSH
13386: LD_INT 1
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: PUSH
13393: LD_INT 26
13395: PUSH
13396: LD_INT 1
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: LIST
13407: PPUSH
13408: CALL_OW 70
13412: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13413: LD_VAR 0 7
13417: PUSH
13418: LD_INT 1
13420: ARRAY
13421: PPUSH
13422: LD_STRING D9-Rus3-1
13424: PPUSH
13425: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13429: LD_VAR 0 7
13433: PUSH
13434: LD_INT 2
13436: ARRAY
13437: PPUSH
13438: LD_STRING D9-Russ-1
13440: PPUSH
13441: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13445: LD_INT 35
13447: PPUSH
13448: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13452: LD_ADDR_VAR 0 4
13456: PUSH
13457: LD_INT 26
13459: PPUSH
13460: LD_INT 22
13462: PUSH
13463: LD_INT 3
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: EMPTY
13471: LIST
13472: PPUSH
13473: CALL_OW 70
13477: PUSH
13478: FOR_IN
13479: IFFALSE 13651
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13481: LD_ADDR_VAR 0 8
13485: PUSH
13486: LD_INT 22
13488: PUSH
13489: LD_INT 1
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PPUSH
13496: CALL_OW 69
13500: PPUSH
13501: LD_VAR 0 4
13505: PPUSH
13506: CALL_OW 74
13510: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13511: LD_ADDR_VAR 0 9
13515: PUSH
13516: LD_INT 22
13518: PUSH
13519: LD_INT 1
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PUSH
13526: LD_INT 2
13528: PUSH
13529: LD_INT 59
13531: PUSH
13532: EMPTY
13533: LIST
13534: PUSH
13535: LD_INT 21
13537: PUSH
13538: LD_INT 1
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: PUSH
13545: LD_INT 21
13547: PUSH
13548: LD_INT 2
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: EMPTY
13566: LIST
13567: PPUSH
13568: CALL_OW 69
13572: PPUSH
13573: LD_VAR 0 4
13577: PPUSH
13578: CALL_OW 74
13582: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13583: LD_VAR 0 4
13587: PPUSH
13588: LD_VAR 0 8
13592: PPUSH
13593: CALL_OW 296
13597: PUSH
13598: LD_INT 8
13600: PLUS
13601: PUSH
13602: LD_VAR 0 4
13606: PPUSH
13607: LD_VAR 0 9
13611: PPUSH
13612: CALL_OW 296
13616: LESS
13617: IFFALSE 13635
// begin ComAttackUnit ( i , target1 ) ;
13619: LD_VAR 0 4
13623: PPUSH
13624: LD_VAR 0 8
13628: PPUSH
13629: CALL_OW 115
// end else
13633: GO 13649
// begin ComAttackUnit ( i , target2 ) ;
13635: LD_VAR 0 4
13639: PPUSH
13640: LD_VAR 0 9
13644: PPUSH
13645: CALL_OW 115
// end ; end ;
13649: GO 13478
13651: POP
13652: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13653: LD_INT 26
13655: PPUSH
13656: LD_INT 22
13658: PUSH
13659: LD_INT 3
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: PUSH
13666: LD_INT 2
13668: PUSH
13669: LD_INT 21
13671: PUSH
13672: LD_INT 1
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: PUSH
13679: LD_INT 21
13681: PUSH
13682: LD_INT 2
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PUSH
13689: LD_INT 59
13691: PUSH
13692: EMPTY
13693: LIST
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: PPUSH
13705: CALL_OW 70
13709: PUSH
13710: LD_INT 0
13712: EQUAL
13713: IFFALSE 13445
// end ; end_of_file
13715: LD_VAR 0 3
13719: RET
// every 0 0$1 do
13720: GO 13722
13722: DISABLE
// begin enable ;
13723: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13724: LD_INT 3
13726: PPUSH
13727: LD_INT 1
13729: PPUSH
13730: LD_INT 22
13732: PPUSH
13733: CALL 8757 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13737: LD_INT 3
13739: PPUSH
13740: LD_INT 20
13742: PPUSH
13743: LD_INT 22
13745: PPUSH
13746: LD_INT 23
13748: PPUSH
13749: CALL 9003 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13753: LD_INT 3
13755: PPUSH
13756: LD_INT 21
13758: PPUSH
13759: LD_INT 23
13761: PPUSH
13762: CALL 9280 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13766: LD_INT 22
13768: PPUSH
13769: LD_INT 1
13771: PPUSH
13772: LD_EXP 24
13776: PPUSH
13777: LD_INT 2
13779: PPUSH
13780: LD_INT 3
13782: PPUSH
13783: CALL 9752 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13787: LD_INT 23
13789: PPUSH
13790: LD_INT 1
13792: PPUSH
13793: LD_EXP 25
13797: PPUSH
13798: LD_INT 33
13800: PPUSH
13801: LD_INT 1
13803: PPUSH
13804: CALL 9752 0 5
// end ; end_of_file
13808: END
// on UnitDestroyed ( unit ) do begin if GetBType ( unit ) = b_depot then
13809: LD_VAR 0 1
13813: PPUSH
13814: CALL_OW 266
13818: PUSH
13819: LD_INT 0
13821: EQUAL
13822: IFFALSE 13831
// YouLost ( DepotDestroyed ) ;
13824: LD_STRING DepotDestroyed
13826: PPUSH
13827: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13831: LD_VAR 0 1
13835: PPUSH
13836: CALL_OW 255
13840: PUSH
13841: LD_INT 1
13843: EQUAL
13844: PUSH
13845: LD_VAR 0 1
13849: PPUSH
13850: CALL_OW 247
13854: PUSH
13855: LD_INT 1
13857: EQUAL
13858: AND
13859: IFFALSE 13875
// deadsCounter = deadsCounter + 1 ;
13861: LD_ADDR_EXP 31
13865: PUSH
13866: LD_EXP 31
13870: PUSH
13871: LD_INT 1
13873: PLUS
13874: ST_TO_ADDR
// end ;
13875: PPOPN 1
13877: END
// on Command ( comandid ) do var i , j , tmp ;
13878: LD_INT 0
13880: PPUSH
13881: PPUSH
13882: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13883: LD_ADDR_VAR 0 2
13887: PUSH
13888: LD_INT 22
13890: PUSH
13891: LD_INT 1
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 21
13900: PUSH
13901: LD_INT 2
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PPUSH
13912: CALL_OW 69
13916: PUSH
13917: FOR_IN
13918: IFFALSE 14043
// begin if GetTaskList ( i ) > 0 then
13920: LD_VAR 0 2
13924: PPUSH
13925: CALL_OW 437
13929: PUSH
13930: LD_INT 0
13932: GREATER
13933: IFFALSE 14041
// begin for j = 1 to GetTaskList ( i ) do
13935: LD_ADDR_VAR 0 3
13939: PUSH
13940: DOUBLE
13941: LD_INT 1
13943: DEC
13944: ST_TO_ADDR
13945: LD_VAR 0 2
13949: PPUSH
13950: CALL_OW 437
13954: PUSH
13955: FOR_TO
13956: IFFALSE 14039
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
13958: LD_ADDR_VAR 0 4
13962: PUSH
13963: LD_VAR 0 2
13967: PPUSH
13968: CALL_OW 437
13972: PUSH
13973: LD_VAR 0 3
13977: ARRAY
13978: PUSH
13979: LD_INT 4
13981: ARRAY
13982: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
13983: LD_VAR 0 4
13987: PPUSH
13988: CALL_OW 255
13992: PUSH
13993: LD_INT 3
13995: EQUAL
13996: PUSH
13997: LD_VAR 0 4
14001: PPUSH
14002: CALL_OW 247
14006: PUSH
14007: LD_INT 2
14009: EQUAL
14010: AND
14011: PUSH
14012: LD_VAR 0 4
14016: PPUSH
14017: CALL_OW 264
14021: PUSH
14022: LD_INT 51
14024: EQUAL
14025: AND
14026: IFFALSE 14037
// ComStop ( i ) ;
14028: LD_VAR 0 2
14032: PPUSH
14033: CALL_OW 141
// end ;
14037: GO 13955
14039: POP
14040: POP
// end ; end ;
14041: GO 13917
14043: POP
14044: POP
// end ;
14045: PPOPN 4
14047: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14048: LD_VAR 0 2
14052: PUSH
14053: LD_EXP 8
14057: EQUAL
14058: PUSH
14059: LD_EXP 21
14063: PUSH
14064: LD_INT 4
14066: NONEQUAL
14067: AND
14068: IFFALSE 14220
// begin if IsOk ( Mikhail ) then
14070: LD_EXP 8
14074: PPUSH
14075: CALL_OW 302
14079: IFFALSE 14087
// AskMikhail else
14081: CALL 7042 0 0
14085: GO 14220
// if IsOk ( lab1 ) then
14087: LD_INT 23
14089: PPUSH
14090: CALL_OW 302
14094: IFFALSE 14183
// begin InGameOn ;
14096: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14100: LD_EXP 8
14104: PPUSH
14105: LD_INT 6
14107: PPUSH
14108: CALL_OW 235
// SetSide ( lab1 , 6 ) ;
14112: LD_INT 23
14114: PPUSH
14115: LD_INT 6
14117: PPUSH
14118: CALL_OW 235
// ComEnterUnit ( Mikhail , lab1 ) ;
14122: LD_EXP 8
14126: PPUSH
14127: LD_INT 23
14129: PPUSH
14130: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14134: LD_INT 35
14136: PPUSH
14137: CALL_OW 67
// until IsInUnit ( Mikhail ) = lab1 or IsDead ( Mikhail ) ;
14141: LD_EXP 8
14145: PPUSH
14146: CALL_OW 310
14150: PUSH
14151: LD_INT 23
14153: EQUAL
14154: PUSH
14155: LD_EXP 8
14159: PPUSH
14160: CALL_OW 301
14164: OR
14165: IFFALSE 14134
// SetSide ( lab1 , 1 ) ;
14167: LD_INT 23
14169: PPUSH
14170: LD_INT 1
14172: PPUSH
14173: CALL_OW 235
// InGameOff ;
14177: CALL_OW 9
// end else
14181: GO 14220
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14183: LD_INT 3
14185: PPUSH
14186: LD_INT 6
14188: PPUSH
14189: LD_INT 2
14191: PPUSH
14192: LD_INT 1
14194: PPUSH
14195: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14199: LD_EXP 8
14203: PPUSH
14204: LD_INT 6
14206: PPUSH
14207: CALL_OW 235
// ComHold ( Mikhail ) ;
14211: LD_EXP 8
14215: PPUSH
14216: CALL_OW 140
// end ; end ; end ;
14220: PPOPN 2
14222: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
14223: LD_EXP 8
14227: PPUSH
14228: CALL_OW 257
14232: PUSH
14233: LD_INT 3
14235: NONEQUAL
14236: IFFALSE 14254
14238: GO 14240
14240: DISABLE
// begin enable ;
14241: ENABLE
// SetClass ( Mikhail , 3 ) ;
14242: LD_EXP 8
14246: PPUSH
14247: LD_INT 3
14249: PPUSH
14250: CALL_OW 336
// end ; end_of_file
14254: END
// every 0 0$1 trigger IsDead ( JMM ) do
14255: LD_EXP 1
14259: PPUSH
14260: CALL_OW 301
14264: IFFALSE 14276
14266: GO 14268
14268: DISABLE
// YouLost ( JMM ) ;
14269: LD_STRING JMM
14271: PPUSH
14272: CALL_OW 104
14276: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14277: LD_INT 22
14279: PUSH
14280: LD_INT 1
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: LD_INT 21
14289: PUSH
14290: LD_INT 1
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: PUSH
14297: LD_INT 25
14299: PUSH
14300: LD_INT 2
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: LIST
14311: PPUSH
14312: CALL_OW 69
14316: PUSH
14317: LD_INT 0
14319: EQUAL
14320: PUSH
14321: LD_INT 22
14323: PUSH
14324: LD_INT 4
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 21
14333: PUSH
14334: LD_INT 1
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PUSH
14341: LD_INT 25
14343: PUSH
14344: LD_INT 2
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: LIST
14355: PPUSH
14356: CALL_OW 69
14360: PUSH
14361: LD_INT 0
14363: EQUAL
14364: AND
14365: PUSH
14366: LD_INT 1
14368: PPUSH
14369: CALL_OW 255
14373: PUSH
14374: LD_INT 3
14376: EQUAL
14377: AND
14378: PUSH
14379: LD_INT 10
14381: PPUSH
14382: CALL_OW 255
14386: PUSH
14387: LD_INT 3
14389: EQUAL
14390: AND
14391: IFFALSE 14403
14393: GO 14395
14395: DISABLE
// YouLost ( Engineer ) ;
14396: LD_STRING Engineer
14398: PPUSH
14399: CALL_OW 104
14403: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14404: LD_INT 1
14406: PPUSH
14407: CALL_OW 255
14411: PUSH
14412: LD_INT 3
14414: EQUAL
14415: PUSH
14416: LD_EXP 27
14420: PUSH
14421: LD_INT 1
14423: EQUAL
14424: AND
14425: IFFALSE 14437
14427: GO 14429
14429: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14430: LD_STRING DepotCaptured
14432: PPUSH
14433: CALL_OW 104
14437: END
// export function PrepareTigers ; var i , un ; begin
14438: LD_INT 0
14440: PPUSH
14441: PPUSH
14442: PPUSH
// for i = 1 to Difficulty do
14443: LD_ADDR_VAR 0 2
14447: PUSH
14448: DOUBLE
14449: LD_INT 1
14451: DEC
14452: ST_TO_ADDR
14453: LD_OWVAR 67
14457: PUSH
14458: FOR_TO
14459: IFFALSE 14594
// begin hc_sex = sex_male ;
14461: LD_ADDR_OWVAR 27
14465: PUSH
14466: LD_INT 1
14468: ST_TO_ADDR
// uc_side = 0 ;
14469: LD_ADDR_OWVAR 20
14473: PUSH
14474: LD_INT 0
14476: ST_TO_ADDR
// uc_nation = nation_nature ;
14477: LD_ADDR_OWVAR 21
14481: PUSH
14482: LD_INT 0
14484: ST_TO_ADDR
// hc_class = class_tiger ;
14485: LD_ADDR_OWVAR 28
14489: PUSH
14490: LD_INT 14
14492: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14493: LD_ADDR_OWVAR 31
14497: PUSH
14498: LD_EXP 14
14502: PUSH
14503: LD_INT 0
14505: PUSH
14506: LD_INT 0
14508: PUSH
14509: LD_INT 0
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14518: LD_ADDR_OWVAR 35
14522: PUSH
14523: LD_INT 30
14525: PPUSH
14526: LD_INT 40
14528: PPUSH
14529: CALL_OW 12
14533: PUSH
14534: LD_INT 40
14536: PPUSH
14537: LD_INT 50
14539: PPUSH
14540: CALL_OW 12
14544: PUSH
14545: LD_INT 50
14547: PPUSH
14548: LD_INT 60
14550: PPUSH
14551: CALL_OW 12
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: LIST
14560: PUSH
14561: LD_OWVAR 67
14565: ARRAY
14566: ST_TO_ADDR
// un = CreateHuman ;
14567: LD_ADDR_VAR 0 3
14571: PUSH
14572: CALL_OW 44
14576: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14577: LD_VAR 0 3
14581: PPUSH
14582: LD_INT 27
14584: PPUSH
14585: LD_INT 0
14587: PPUSH
14588: CALL_OW 49
// end ;
14592: GO 14458
14594: POP
14595: POP
// end ; end_of_file
14596: LD_VAR 0 1
14600: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
14601: LD_INT 1
14603: PPUSH
14604: CALL_OW 255
14608: PUSH
14609: LD_INT 1
14611: EQUAL
14612: PUSH
14613: LD_INT 10
14615: PPUSH
14616: CALL_OW 255
14620: PUSH
14621: LD_INT 1
14623: EQUAL
14624: AND
14625: PUSH
14626: LD_EXP 20
14630: PUSH
14631: LD_INT 1
14633: EQUAL
14634: AND
14635: PUSH
14636: LD_INT 22
14638: PUSH
14639: LD_INT 3
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: PUSH
14646: LD_INT 21
14648: PUSH
14649: LD_INT 2
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PUSH
14656: LD_INT 34
14658: PUSH
14659: LD_INT 51
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: PUSH
14666: LD_INT 3
14668: PUSH
14669: LD_INT 58
14671: PUSH
14672: EMPTY
14673: LIST
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: PPUSH
14685: CALL_OW 69
14689: PUSH
14690: LD_INT 0
14692: EQUAL
14693: AND
14694: IFFALSE 14785
14696: GO 14698
14698: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14699: LD_INT 9450
14701: PUSH
14702: LD_INT 8400
14704: PUSH
14705: LD_INT 6300
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: PUSH
14713: LD_OWVAR 67
14717: ARRAY
14718: PPUSH
14719: CALL_OW 67
// if cargoEscape = 1 then
14723: LD_EXP 20
14727: PUSH
14728: LD_INT 1
14730: EQUAL
14731: IFFALSE 14785
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14733: LD_EXP 9
14737: PPUSH
14738: LD_STRING D6-Pow-1
14740: PPUSH
14741: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14745: LD_EXP 1
14749: PPUSH
14750: LD_STRING D6-JMM-1
14752: PPUSH
14753: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14757: LD_EXP 9
14761: PPUSH
14762: LD_STRING D6-Pow-2
14764: PPUSH
14765: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14769: LD_EXP 1
14773: PPUSH
14774: LD_STRING D6-JMM-2
14776: PPUSH
14777: CALL_OW 88
// FinishMission ;
14781: CALL 14993 0 0
// end ; end ;
14785: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14786: LD_INT 1
14788: PPUSH
14789: CALL_OW 255
14793: PUSH
14794: LD_INT 1
14796: EQUAL
14797: PUSH
14798: LD_INT 10
14800: PPUSH
14801: CALL_OW 255
14805: PUSH
14806: LD_INT 1
14808: EQUAL
14809: AND
14810: PUSH
14811: LD_EXP 20
14815: PUSH
14816: LD_INT 1
14818: GREATER
14819: AND
14820: IFFALSE 14887
14822: GO 14824
14824: DISABLE
14825: LD_INT 0
14827: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14828: LD_INT 11550
14830: PUSH
14831: LD_INT 10500
14833: PUSH
14834: LD_INT 9450
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: LIST
14841: PUSH
14842: LD_OWVAR 67
14846: ARRAY
14847: PPUSH
14848: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14852: LD_INT 1
14854: PUSH
14855: LD_INT 2
14857: PUSH
14858: LD_INT 3
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: LIST
14865: PUSH
14866: LD_OWVAR 67
14870: ARRAY
14871: PPUSH
14872: LD_INT 13
14874: PPUSH
14875: CALL 12984 0 2
// lastBattle = 1 ;
14879: LD_ADDR_EXP 27
14883: PUSH
14884: LD_INT 1
14886: ST_TO_ADDR
// end ;
14887: PPOPN 1
14889: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14890: LD_EXP 27
14894: PUSH
14895: LD_INT 1
14897: EQUAL
14898: PUSH
14899: LD_INT 26
14901: PPUSH
14902: LD_INT 22
14904: PUSH
14905: LD_INT 3
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PUSH
14912: LD_INT 21
14914: PUSH
14915: LD_INT 1
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: PPUSH
14926: CALL_OW 70
14930: PUSH
14931: LD_INT 0
14933: EQUAL
14934: AND
14935: IFFALSE 14992
14937: GO 14939
14939: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14940: LD_EXP 9
14944: PPUSH
14945: LD_STRING D6-Pow-1
14947: PPUSH
14948: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14952: LD_EXP 1
14956: PPUSH
14957: LD_STRING D6-JMM-1
14959: PPUSH
14960: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14964: LD_EXP 9
14968: PPUSH
14969: LD_STRING D6-Pow-2
14971: PPUSH
14972: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14976: LD_EXP 1
14980: PPUSH
14981: LD_STRING D6-JMM-2
14983: PPUSH
14984: CALL_OW 88
// FinishMission ;
14988: CALL 14993 0 0
// end ;
14992: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
14993: LD_INT 0
14995: PPUSH
14996: PPUSH
14997: PPUSH
14998: PPUSH
14999: PPUSH
// if tick <= 18 18$00 then
15000: LD_OWVAR 1
15004: PUSH
15005: LD_INT 37800
15007: LESSEQUAL
15008: IFFALSE 15017
// SetAchievement ( ACH_ASPEED_2 ) ;
15010: LD_STRING ACH_ASPEED_2
15012: PPUSH
15013: CALL_OW 543
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15017: LD_ADDR_VAR 0 2
15021: PUSH
15022: LD_INT 22
15024: PUSH
15025: LD_INT 1
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 21
15034: PUSH
15035: LD_INT 2
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PUSH
15042: LD_INT 24
15044: PUSH
15045: LD_INT 251
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: LIST
15056: PPUSH
15057: CALL_OW 69
15061: ST_TO_ADDR
// if tmp then
15062: LD_VAR 0 2
15066: IFFALSE 15080
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15068: LD_VAR 0 2
15072: PPUSH
15073: LD_STRING 02_tanks_1
15075: PPUSH
15076: CALL 10457 0 2
// if mikhailStatus = 1 then
15080: LD_EXP 21
15084: PUSH
15085: LD_INT 1
15087: EQUAL
15088: IFFALSE 15102
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15090: LD_EXP 21
15094: PPUSH
15095: LD_STRING 02_mikhailStatus_1
15097: PPUSH
15098: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15102: LD_INT 1
15104: PPUSH
15105: CALL_OW 274
15109: PPUSH
15110: LD_INT 1
15112: PPUSH
15113: CALL_OW 275
15117: PPUSH
15118: LD_STRING 02_resources_4
15120: PPUSH
15121: CALL_OW 39
// m1 := false ;
15125: LD_ADDR_VAR 0 3
15129: PUSH
15130: LD_INT 0
15132: ST_TO_ADDR
// m2 := false ;
15133: LD_ADDR_VAR 0 4
15137: PUSH
15138: LD_INT 0
15140: ST_TO_ADDR
// m3 := false ;
15141: LD_ADDR_VAR 0 5
15145: PUSH
15146: LD_INT 0
15148: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15149: LD_INT 1
15151: PPUSH
15152: CALL_OW 274
15156: PPUSH
15157: LD_INT 1
15159: PPUSH
15160: CALL_OW 275
15164: PUSH
15165: LD_INT 200
15167: GREATEREQUAL
15168: IFFALSE 15190
// begin AddMedal ( Cans , 1 ) ;
15170: LD_STRING Cans
15172: PPUSH
15173: LD_INT 1
15175: PPUSH
15176: CALL_OW 101
// m1 := true ;
15180: LD_ADDR_VAR 0 3
15184: PUSH
15185: LD_INT 1
15187: ST_TO_ADDR
// end else
15188: GO 15201
// begin AddMedal ( Cans , - 1 ) ;
15190: LD_STRING Cans
15192: PPUSH
15193: LD_INT 1
15195: NEG
15196: PPUSH
15197: CALL_OW 101
// end ; if deadsCounter < 2 then
15201: LD_EXP 31
15205: PUSH
15206: LD_INT 2
15208: LESS
15209: IFFALSE 15231
// begin AddMedal ( Deaths , 1 ) ;
15211: LD_STRING Deaths
15213: PPUSH
15214: LD_INT 1
15216: PPUSH
15217: CALL_OW 101
// m2 := true ;
15221: LD_ADDR_VAR 0 4
15225: PUSH
15226: LD_INT 1
15228: ST_TO_ADDR
// end else
15229: GO 15242
// begin AddMedal ( Deaths , - 1 ) ;
15231: LD_STRING Deaths
15233: PPUSH
15234: LD_INT 1
15236: NEG
15237: PPUSH
15238: CALL_OW 101
// end ; if mikhailStatus = 0 then
15242: LD_EXP 21
15246: PUSH
15247: LD_INT 0
15249: EQUAL
15250: IFFALSE 15263
// AddMedal ( Prisoner , - 1 ) ;
15252: LD_STRING Prisoner
15254: PPUSH
15255: LD_INT 1
15257: NEG
15258: PPUSH
15259: CALL_OW 101
// if mikhailStatus = 1 then
15263: LD_EXP 21
15267: PUSH
15268: LD_INT 1
15270: EQUAL
15271: IFFALSE 15291
// begin AddMedal ( Prisoner , 1 ) ;
15273: LD_STRING Prisoner
15275: PPUSH
15276: LD_INT 1
15278: PPUSH
15279: CALL_OW 101
// m3 := true ;
15283: LD_ADDR_VAR 0 5
15287: PUSH
15288: LD_INT 1
15290: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
15291: LD_EXP 21
15295: PUSH
15296: LD_INT 2
15298: EQUAL
15299: IFFALSE 15319
// begin AddMedal ( Prisoner , 2 ) ;
15301: LD_STRING Prisoner
15303: PPUSH
15304: LD_INT 2
15306: PPUSH
15307: CALL_OW 101
// m3 := true ;
15311: LD_ADDR_VAR 0 5
15315: PUSH
15316: LD_INT 1
15318: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
15319: LD_EXP 21
15323: PUSH
15324: LD_INT 3
15326: EQUAL
15327: IFFALSE 15340
// AddMedal ( Prisoner , - 2 ) ;
15329: LD_STRING Prisoner
15331: PPUSH
15332: LD_INT 2
15334: NEG
15335: PPUSH
15336: CALL_OW 101
// if Difficulty = 3 and m1 and m2 and m3 then
15340: LD_OWVAR 67
15344: PUSH
15345: LD_INT 3
15347: EQUAL
15348: PUSH
15349: LD_VAR 0 3
15353: AND
15354: PUSH
15355: LD_VAR 0 4
15359: AND
15360: PUSH
15361: LD_VAR 0 5
15365: AND
15366: IFFALSE 15378
// SetAchievementEX ( ACH_AMER , 2 ) ;
15368: LD_STRING ACH_AMER
15370: PPUSH
15371: LD_INT 2
15373: PPUSH
15374: CALL_OW 564
// GiveMedals ( MAIN ) ;
15378: LD_STRING MAIN
15380: PPUSH
15381: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15385: LD_INT 22
15387: PUSH
15388: LD_INT 1
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: LD_INT 23
15397: PUSH
15398: LD_INT 1
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: LD_INT 21
15407: PUSH
15408: LD_INT 1
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: LIST
15419: PPUSH
15420: CALL_OW 69
15424: PPUSH
15425: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15429: LD_EXP 1
15433: PPUSH
15434: LD_EXP 33
15438: PUSH
15439: LD_STRING JMM
15441: STR
15442: PPUSH
15443: CALL_OW 38
// if IsOK ( Bobby ) then
15447: LD_EXP 2
15451: PPUSH
15452: CALL_OW 302
15456: IFFALSE 15476
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15458: LD_EXP 2
15462: PPUSH
15463: LD_EXP 33
15467: PUSH
15468: LD_STRING Bobby
15470: STR
15471: PPUSH
15472: CALL_OW 38
// if IsOK ( Cyrus ) then
15476: LD_EXP 3
15480: PPUSH
15481: CALL_OW 302
15485: IFFALSE 15505
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15487: LD_EXP 3
15491: PPUSH
15492: LD_EXP 33
15496: PUSH
15497: LD_STRING Cyrus
15499: STR
15500: PPUSH
15501: CALL_OW 38
// if IsOK ( Lisa ) then
15505: LD_EXP 4
15509: PPUSH
15510: CALL_OW 302
15514: IFFALSE 15534
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15516: LD_EXP 4
15520: PPUSH
15521: LD_EXP 33
15525: PUSH
15526: LD_STRING Lisa
15528: STR
15529: PPUSH
15530: CALL_OW 38
// if IsOK ( Khatam ) then
15534: LD_EXP 5
15538: PPUSH
15539: CALL_OW 302
15543: IFFALSE 15563
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15545: LD_EXP 5
15549: PPUSH
15550: LD_EXP 33
15554: PUSH
15555: LD_STRING Khatam
15557: STR
15558: PPUSH
15559: CALL_OW 38
// if IsOK ( Brian ) then
15563: LD_EXP 6
15567: PPUSH
15568: CALL_OW 302
15572: IFFALSE 15592
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
15574: LD_EXP 6
15578: PPUSH
15579: LD_EXP 33
15583: PUSH
15584: LD_STRING Brian
15586: STR
15587: PPUSH
15588: CALL_OW 38
// if IsOk ( Jerry ) then
15592: LD_EXP 7
15596: PPUSH
15597: CALL_OW 302
15601: IFFALSE 15621
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15603: LD_EXP 7
15607: PPUSH
15608: LD_EXP 33
15612: PUSH
15613: LD_STRING Jerry
15615: STR
15616: PPUSH
15617: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
15621: LD_EXP 21
15625: PUSH
15626: LD_INT 1
15628: EQUAL
15629: PUSH
15630: LD_EXP 8
15634: PPUSH
15635: CALL_OW 255
15639: PUSH
15640: LD_INT 1
15642: EQUAL
15643: AND
15644: PUSH
15645: LD_EXP 8
15649: PPUSH
15650: CALL_OW 302
15654: AND
15655: IFFALSE 15675
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15657: LD_EXP 8
15661: PPUSH
15662: LD_EXP 33
15666: PUSH
15667: LD_STRING Mikhail
15669: STR
15670: PPUSH
15671: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15675: LD_INT 50
15677: PUSH
15678: EMPTY
15679: LIST
15680: PUSH
15681: LD_INT 22
15683: PUSH
15684: LD_INT 1
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: LD_INT 21
15693: PUSH
15694: LD_INT 1
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: LIST
15705: PPUSH
15706: CALL_OW 69
15710: PUSH
15711: LD_EXP 1
15715: PUSH
15716: LD_EXP 2
15720: PUSH
15721: LD_EXP 3
15725: PUSH
15726: LD_EXP 4
15730: PUSH
15731: LD_EXP 5
15735: PUSH
15736: LD_EXP 6
15740: PUSH
15741: LD_EXP 7
15745: PUSH
15746: LD_EXP 8
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: DIFF
15761: PPUSH
15762: LD_STRING 02_other_survivors
15764: PPUSH
15765: CALL_OW 38
// YouWin ;
15769: CALL_OW 103
// end ; end_of_file
15773: LD_VAR 0 1
15777: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
15778: GO 15780
15780: DISABLE
// begin ru_radar := 98 ;
15781: LD_ADDR_EXP 35
15785: PUSH
15786: LD_INT 98
15788: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
15789: LD_ADDR_EXP 36
15793: PUSH
15794: LD_INT 89
15796: ST_TO_ADDR
// us_hack := 99 ;
15797: LD_ADDR_EXP 37
15801: PUSH
15802: LD_INT 99
15804: ST_TO_ADDR
// us_artillery := 97 ;
15805: LD_ADDR_EXP 38
15809: PUSH
15810: LD_INT 97
15812: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15813: LD_ADDR_EXP 39
15817: PUSH
15818: LD_INT 91
15820: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
15821: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
15822: LD_INT 0
15824: PPUSH
15825: PPUSH
15826: PPUSH
15827: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15828: LD_VAR 0 1
15832: PPUSH
15833: CALL_OW 264
15837: PUSH
15838: LD_EXP 39
15842: EQUAL
15843: IFFALSE 15915
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15845: LD_INT 68
15847: PPUSH
15848: LD_VAR 0 1
15852: PPUSH
15853: CALL_OW 255
15857: PPUSH
15858: CALL_OW 321
15862: PUSH
15863: LD_INT 2
15865: EQUAL
15866: IFFALSE 15878
// eff := 70 else
15868: LD_ADDR_VAR 0 6
15872: PUSH
15873: LD_INT 70
15875: ST_TO_ADDR
15876: GO 15886
// eff := 30 ;
15878: LD_ADDR_VAR 0 6
15882: PUSH
15883: LD_INT 30
15885: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15886: LD_VAR 0 1
15890: PPUSH
15891: CALL_OW 250
15895: PPUSH
15896: LD_VAR 0 1
15900: PPUSH
15901: CALL_OW 251
15905: PPUSH
15906: LD_VAR 0 6
15910: PPUSH
15911: CALL_OW 495
// end ; end ;
15915: LD_VAR 0 4
15919: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
15920: LD_INT 0
15922: PPUSH
15923: PPUSH
15924: PPUSH
15925: PPUSH
15926: PPUSH
15927: PPUSH
// if cmd = 124 then
15928: LD_VAR 0 1
15932: PUSH
15933: LD_INT 124
15935: EQUAL
15936: IFFALSE 16142
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
15938: LD_ADDR_VAR 0 5
15942: PUSH
15943: LD_INT 2
15945: PUSH
15946: LD_INT 34
15948: PUSH
15949: LD_INT 53
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: PUSH
15956: LD_INT 34
15958: PUSH
15959: LD_INT 14
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: LIST
15970: PPUSH
15971: CALL_OW 69
15975: ST_TO_ADDR
// if not tmp then
15976: LD_VAR 0 5
15980: NOT
15981: IFFALSE 15985
// exit ;
15983: GO 16142
// for i in tmp do
15985: LD_ADDR_VAR 0 3
15989: PUSH
15990: LD_VAR 0 5
15994: PUSH
15995: FOR_IN
15996: IFFALSE 16140
// begin taskList := GetTaskList ( i ) ;
15998: LD_ADDR_VAR 0 6
16002: PUSH
16003: LD_VAR 0 3
16007: PPUSH
16008: CALL_OW 437
16012: ST_TO_ADDR
// if not taskList then
16013: LD_VAR 0 6
16017: NOT
16018: IFFALSE 16022
// continue ;
16020: GO 15995
// for j = 1 to taskList do
16022: LD_ADDR_VAR 0 4
16026: PUSH
16027: DOUBLE
16028: LD_INT 1
16030: DEC
16031: ST_TO_ADDR
16032: LD_VAR 0 6
16036: PUSH
16037: FOR_TO
16038: IFFALSE 16136
// if taskList [ j ] [ 1 ] = | then
16040: LD_VAR 0 6
16044: PUSH
16045: LD_VAR 0 4
16049: ARRAY
16050: PUSH
16051: LD_INT 1
16053: ARRAY
16054: PUSH
16055: LD_STRING |
16057: EQUAL
16058: IFFALSE 16134
// begin _taskList := Delete ( taskList , 1 ) ;
16060: LD_ADDR_VAR 0 7
16064: PUSH
16065: LD_VAR 0 6
16069: PPUSH
16070: LD_INT 1
16072: PPUSH
16073: CALL_OW 3
16077: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
16078: LD_VAR 0 3
16082: PPUSH
16083: LD_VAR 0 7
16087: PPUSH
16088: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
16092: LD_VAR 0 3
16096: PPUSH
16097: LD_VAR 0 6
16101: PUSH
16102: LD_VAR 0 4
16106: ARRAY
16107: PUSH
16108: LD_INT 2
16110: ARRAY
16111: PPUSH
16112: LD_VAR 0 6
16116: PUSH
16117: LD_VAR 0 4
16121: ARRAY
16122: PUSH
16123: LD_INT 3
16125: ARRAY
16126: PPUSH
16127: LD_INT 8
16129: PPUSH
16130: CALL 16147 0 4
// end ;
16134: GO 16037
16136: POP
16137: POP
// end ;
16138: GO 15995
16140: POP
16141: POP
// end ; end ;
16142: LD_VAR 0 2
16146: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16147: LD_INT 0
16149: PPUSH
16150: PPUSH
16151: PPUSH
16152: PPUSH
16153: PPUSH
16154: PPUSH
16155: PPUSH
16156: PPUSH
16157: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
16158: LD_VAR 0 1
16162: NOT
16163: PUSH
16164: LD_VAR 0 2
16168: PPUSH
16169: LD_VAR 0 3
16173: PPUSH
16174: CALL_OW 488
16178: NOT
16179: OR
16180: PUSH
16181: LD_VAR 0 4
16185: NOT
16186: OR
16187: IFFALSE 16191
// exit ;
16189: GO 16531
// list := [ ] ;
16191: LD_ADDR_VAR 0 13
16195: PUSH
16196: EMPTY
16197: ST_TO_ADDR
// if x - r < 0 then
16198: LD_VAR 0 2
16202: PUSH
16203: LD_VAR 0 4
16207: MINUS
16208: PUSH
16209: LD_INT 0
16211: LESS
16212: IFFALSE 16224
// min_x := 0 else
16214: LD_ADDR_VAR 0 7
16218: PUSH
16219: LD_INT 0
16221: ST_TO_ADDR
16222: GO 16240
// min_x := x - r ;
16224: LD_ADDR_VAR 0 7
16228: PUSH
16229: LD_VAR 0 2
16233: PUSH
16234: LD_VAR 0 4
16238: MINUS
16239: ST_TO_ADDR
// if y - r < 0 then
16240: LD_VAR 0 3
16244: PUSH
16245: LD_VAR 0 4
16249: MINUS
16250: PUSH
16251: LD_INT 0
16253: LESS
16254: IFFALSE 16266
// min_y := 0 else
16256: LD_ADDR_VAR 0 8
16260: PUSH
16261: LD_INT 0
16263: ST_TO_ADDR
16264: GO 16282
// min_y := y - r ;
16266: LD_ADDR_VAR 0 8
16270: PUSH
16271: LD_VAR 0 3
16275: PUSH
16276: LD_VAR 0 4
16280: MINUS
16281: ST_TO_ADDR
// max_x := x + r ;
16282: LD_ADDR_VAR 0 9
16286: PUSH
16287: LD_VAR 0 2
16291: PUSH
16292: LD_VAR 0 4
16296: PLUS
16297: ST_TO_ADDR
// max_y := y + r ;
16298: LD_ADDR_VAR 0 10
16302: PUSH
16303: LD_VAR 0 3
16307: PUSH
16308: LD_VAR 0 4
16312: PLUS
16313: ST_TO_ADDR
// for _x = min_x to max_x do
16314: LD_ADDR_VAR 0 11
16318: PUSH
16319: DOUBLE
16320: LD_VAR 0 7
16324: DEC
16325: ST_TO_ADDR
16326: LD_VAR 0 9
16330: PUSH
16331: FOR_TO
16332: IFFALSE 16449
// for _y = min_y to max_y do
16334: LD_ADDR_VAR 0 12
16338: PUSH
16339: DOUBLE
16340: LD_VAR 0 8
16344: DEC
16345: ST_TO_ADDR
16346: LD_VAR 0 10
16350: PUSH
16351: FOR_TO
16352: IFFALSE 16445
// begin if not ValidHex ( _x , _y ) then
16354: LD_VAR 0 11
16358: PPUSH
16359: LD_VAR 0 12
16363: PPUSH
16364: CALL_OW 488
16368: NOT
16369: IFFALSE 16373
// continue ;
16371: GO 16351
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16373: LD_VAR 0 11
16377: PPUSH
16378: LD_VAR 0 12
16382: PPUSH
16383: CALL_OW 351
16387: PUSH
16388: LD_VAR 0 11
16392: PPUSH
16393: LD_VAR 0 12
16397: PPUSH
16398: CALL_OW 554
16402: AND
16403: IFFALSE 16443
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16405: LD_ADDR_VAR 0 13
16409: PUSH
16410: LD_VAR 0 13
16414: PPUSH
16415: LD_VAR 0 13
16419: PUSH
16420: LD_INT 1
16422: PLUS
16423: PPUSH
16424: LD_VAR 0 11
16428: PUSH
16429: LD_VAR 0 12
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PPUSH
16438: CALL_OW 2
16442: ST_TO_ADDR
// end ;
16443: GO 16351
16445: POP
16446: POP
16447: GO 16331
16449: POP
16450: POP
// if not list then
16451: LD_VAR 0 13
16455: NOT
16456: IFFALSE 16460
// exit ;
16458: GO 16531
// for i in list do
16460: LD_ADDR_VAR 0 6
16464: PUSH
16465: LD_VAR 0 13
16469: PUSH
16470: FOR_IN
16471: IFFALSE 16529
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16473: LD_VAR 0 1
16477: PPUSH
16478: LD_STRING M
16480: PUSH
16481: LD_VAR 0 6
16485: PUSH
16486: LD_INT 1
16488: ARRAY
16489: PUSH
16490: LD_VAR 0 6
16494: PUSH
16495: LD_INT 2
16497: ARRAY
16498: PUSH
16499: LD_INT 0
16501: PUSH
16502: LD_INT 0
16504: PUSH
16505: LD_INT 0
16507: PUSH
16508: LD_INT 0
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: PUSH
16520: EMPTY
16521: LIST
16522: PPUSH
16523: CALL_OW 447
16527: GO 16470
16529: POP
16530: POP
// end ;
16531: LD_VAR 0 5
16535: RET
